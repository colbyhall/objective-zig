// THIS FILE IS AUTOGENERATED. MODIFICATIONS WILL NOT BE MAINTAINED.

const std = @import("std");
const objc = @import("objc.zig"); // Objective-C Runtime in zig.
const core_foundation = @import("core_foundation.zig"); // Framework dependency CoreFoundation.

pub const __SecCertificate = extern struct {};

pub const CertificateRef = ?*__SecCertificate;

pub const __SecIdentity = extern struct {};

pub const IdentityRef = ?*__SecIdentity;

pub const __SecKey = extern struct {};

pub const KeyRef = ?*__SecKey;

pub const __SecPolicy = extern struct {};

pub const PolicyRef = ?*__SecPolicy;

pub const __SecAccessControl = extern struct {};

pub const AccessControlRef = ?*__SecAccessControl;

pub const __SecKeychain = extern struct {};

pub const KeychainRef = ?*__SecKeychain;

pub const __SecKeychainItem = extern struct {};

pub const KeychainItemRef = ?*__SecKeychainItem;

pub const __SecKeychainSearch = extern struct {};

pub const KeychainSearchRef = ?*__SecKeychainSearch;

pub const KeychainAttrType = objc.OSType;

pub const KeychainAttribute = extern struct {
    tag: KeychainAttrType,
    length: objc.UInt32,
    data: ?*anyopaque,
};

pub const KeychainAttributePtr = ?*KeychainAttribute;

pub const KeychainAttributeList = extern struct {
    count: objc.UInt32,
    attr: ?*KeychainAttribute,
};

pub const KeychainStatus = objc.UInt32;

pub const __SecTrustedApplication = extern struct {};

pub const TrustedApplicationRef = ?*__SecTrustedApplication;

pub const __SecAccess = extern struct {};

pub const AccessRef = ?*__SecAccess;

pub const __SecACL = extern struct {};

pub const ACLRef = ?*__SecACL;

pub const __SecPassword = extern struct {};

pub const PasswordRef = ?*__SecPassword;

pub const KeychainAttributeInfo = extern struct {
    count: objc.UInt32,
    tag: ?*objc.UInt32,
    format: ?*objc.UInt32,
};

pub extern "Security" fn CopyErrorMessageString(status: objc.OSStatus, reserved: ?*anyopaque) callconv(.C) core_foundation.StringRef;

pub const anon3181 = enum(objc.OSStatus) {
    errSecSuccess = 0,
    errSecUnimplemented = -4,
    errSecDiskFull = -34,
    errSecDskFull = -34,
    errSecIO = -36,
    errSecOpWr = -49,
    errSecParam = -50,
    errSecWrPerm = -61,
    errSecAllocate = -108,
    errSecUserCanceled = -128,
    errSecBadReq = -909,
    errSecInternalComponent = -2070,
    errSecCoreFoundationUnknown = -4960,
    errSecMissingEntitlement = -34018,
    errSecRestrictedAPI = -34020,
    errSecNotAvailable = -25291,
    errSecReadOnly = -25292,
    errSecAuthFailed = -25293,
    errSecNoSuchKeychain = -25294,
    errSecInvalidKeychain = -25295,
    errSecDuplicateKeychain = -25296,
    errSecDuplicateCallback = -25297,
    errSecInvalidCallback = -25298,
    errSecDuplicateItem = -25299,
    errSecItemNotFound = -25300,
    errSecBufferTooSmall = -25301,
    errSecDataTooLarge = -25302,
    errSecNoSuchAttr = -25303,
    errSecInvalidItemRef = -25304,
    errSecInvalidSearchRef = -25305,
    errSecNoSuchClass = -25306,
    errSecNoDefaultKeychain = -25307,
    errSecInteractionNotAllowed = -25308,
    errSecReadOnlyAttr = -25309,
    errSecWrongSecVersion = -25310,
    errSecKeySizeNotAllowed = -25311,
    errSecNoStorageModule = -25312,
    errSecNoCertificateModule = -25313,
    errSecNoPolicyModule = -25314,
    errSecInteractionRequired = -25315,
    errSecDataNotAvailable = -25316,
    errSecDataNotModifiable = -25317,
    errSecCreateChainFailed = -25318,
    errSecInvalidPrefsDomain = -25319,
    errSecInDarkWake = -25320,
    errSecACLNotSimple = -25240,
    errSecPolicyNotFound = -25241,
    errSecInvalidTrustSetting = -25242,
    errSecNoAccessForItem = -25243,
    errSecInvalidOwnerEdit = -25244,
    errSecTrustNotAvailable = -25245,
    errSecUnsupportedFormat = -25256,
    errSecUnknownFormat = -25257,
    errSecKeyIsSensitive = -25258,
    errSecMultiplePrivKeys = -25259,
    errSecPassphraseRequired = -25260,
    errSecInvalidPasswordRef = -25261,
    errSecInvalidTrustSettings = -25262,
    errSecNoTrustSettings = -25263,
    errSecPkcs12VerifyFailure = -25264,
    errSecNotSigner = -26267,
    errSecDecode = -26275,
    errSecServiceNotAvailable = -67585,
    errSecInsufficientClientID = -67586,
    errSecDeviceReset = -67587,
    errSecDeviceFailed = -67588,
    errSecAppleAddAppACLSubject = -67589,
    errSecApplePublicKeyIncomplete = -67590,
    errSecAppleSignatureMismatch = -67591,
    errSecAppleInvalidKeyStartDate = -67592,
    errSecAppleInvalidKeyEndDate = -67593,
    errSecConversionError = -67594,
    errSecAppleSSLv2Rollback = -67595,
    errSecQuotaExceeded = -67596,
    errSecFileTooBig = -67597,
    errSecInvalidDatabaseBlob = -67598,
    errSecInvalidKeyBlob = -67599,
    errSecIncompatibleDatabaseBlob = -67600,
    errSecIncompatibleKeyBlob = -67601,
    errSecHostNameMismatch = -67602,
    errSecUnknownCriticalExtensionFlag = -67603,
    errSecNoBasicConstraints = -67604,
    errSecNoBasicConstraintsCA = -67605,
    errSecInvalidAuthorityKeyID = -67606,
    errSecInvalidSubjectKeyID = -67607,
    errSecInvalidKeyUsageForPolicy = -67608,
    errSecInvalidExtendedKeyUsage = -67609,
    errSecInvalidIDLinkage = -67610,
    errSecPathLengthConstraintExceeded = -67611,
    errSecInvalidRoot = -67612,
    errSecCRLExpired = -67613,
    errSecCRLNotValidYet = -67614,
    errSecCRLNotFound = -67615,
    errSecCRLServerDown = -67616,
    errSecCRLBadURI = -67617,
    errSecUnknownCertExtension = -67618,
    errSecUnknownCRLExtension = -67619,
    errSecCRLNotTrusted = -67620,
    errSecCRLPolicyFailed = -67621,
    errSecIDPFailure = -67622,
    errSecSMIMEEmailAddressesNotFound = -67623,
    errSecSMIMEBadExtendedKeyUsage = -67624,
    errSecSMIMEBadKeyUsage = -67625,
    errSecSMIMEKeyUsageNotCritical = -67626,
    errSecSMIMENoEmailAddress = -67627,
    errSecSMIMESubjAltNameNotCritical = -67628,
    errSecSSLBadExtendedKeyUsage = -67629,
    errSecOCSPBadResponse = -67630,
    errSecOCSPBadRequest = -67631,
    errSecOCSPUnavailable = -67632,
    errSecOCSPStatusUnrecognized = -67633,
    errSecEndOfData = -67634,
    errSecIncompleteCertRevocationCheck = -67635,
    errSecNetworkFailure = -67636,
    errSecOCSPNotTrustedToAnchor = -67637,
    errSecRecordModified = -67638,
    errSecOCSPSignatureError = -67639,
    errSecOCSPNoSigner = -67640,
    errSecOCSPResponderMalformedReq = -67641,
    errSecOCSPResponderInternalError = -67642,
    errSecOCSPResponderTryLater = -67643,
    errSecOCSPResponderSignatureRequired = -67644,
    errSecOCSPResponderUnauthorized = -67645,
    errSecOCSPResponseNonceMismatch = -67646,
    errSecCodeSigningBadCertChainLength = -67647,
    errSecCodeSigningNoBasicConstraints = -67648,
    errSecCodeSigningBadPathLengthConstraint = -67649,
    errSecCodeSigningNoExtendedKeyUsage = -67650,
    errSecCodeSigningDevelopment = -67651,
    errSecResourceSignBadCertChainLength = -67652,
    errSecResourceSignBadExtKeyUsage = -67653,
    errSecTrustSettingDeny = -67654,
    errSecInvalidSubjectName = -67655,
    errSecUnknownQualifiedCertStatement = -67656,
    errSecMobileMeRequestQueued = -67657,
    errSecMobileMeRequestRedirected = -67658,
    errSecMobileMeServerError = -67659,
    errSecMobileMeServerNotAvailable = -67660,
    errSecMobileMeServerAlreadyExists = -67661,
    errSecMobileMeServerServiceErr = -67662,
    errSecMobileMeRequestAlreadyPending = -67663,
    errSecMobileMeNoRequestPending = -67664,
    errSecMobileMeCSRVerifyFailure = -67665,
    errSecMobileMeFailedConsistencyCheck = -67666,
    errSecNotInitialized = -67667,
    errSecInvalidHandleUsage = -67668,
    errSecPVCReferentNotFound = -67669,
    errSecFunctionIntegrityFail = -67670,
    errSecInternalError = -67671,
    errSecMemoryError = -67672,
    errSecInvalidData = -67673,
    errSecMDSError = -67674,
    errSecInvalidPointer = -67675,
    errSecSelfCheckFailed = -67676,
    errSecFunctionFailed = -67677,
    errSecModuleManifestVerifyFailed = -67678,
    errSecInvalidGUID = -67679,
    errSecInvalidHandle = -67680,
    errSecInvalidDBList = -67681,
    errSecInvalidPassthroughID = -67682,
    errSecInvalidNetworkAddress = -67683,
    errSecCRLAlreadySigned = -67684,
    errSecInvalidNumberOfFields = -67685,
    errSecVerificationFailure = -67686,
    errSecUnknownTag = -67687,
    errSecInvalidSignature = -67688,
    errSecInvalidName = -67689,
    errSecInvalidCertificateRef = -67690,
    errSecInvalidCertificateGroup = -67691,
    errSecTagNotFound = -67692,
    errSecInvalidQuery = -67693,
    errSecInvalidValue = -67694,
    errSecCallbackFailed = -67695,
    errSecACLDeleteFailed = -67696,
    errSecACLReplaceFailed = -67697,
    errSecACLAddFailed = -67698,
    errSecACLChangeFailed = -67699,
    errSecInvalidAccessCredentials = -67700,
    errSecInvalidRecord = -67701,
    errSecInvalidACL = -67702,
    errSecInvalidSampleValue = -67703,
    errSecIncompatibleVersion = -67704,
    errSecPrivilegeNotGranted = -67705,
    errSecInvalidScope = -67706,
    errSecPVCAlreadyConfigured = -67707,
    errSecInvalidPVC = -67708,
    errSecEMMLoadFailed = -67709,
    errSecEMMUnloadFailed = -67710,
    errSecAddinLoadFailed = -67711,
    errSecInvalidKeyRef = -67712,
    errSecInvalidKeyHierarchy = -67713,
    errSecAddinUnloadFailed = -67714,
    errSecLibraryReferenceNotFound = -67715,
    errSecInvalidAddinFunctionTable = -67716,
    errSecInvalidServiceMask = -67717,
    errSecModuleNotLoaded = -67718,
    errSecInvalidSubServiceID = -67719,
    errSecAttributeNotInContext = -67720,
    errSecModuleManagerInitializeFailed = -67721,
    errSecModuleManagerNotFound = -67722,
    errSecEventNotificationCallbackNotFound = -67723,
    errSecInputLengthError = -67724,
    errSecOutputLengthError = -67725,
    errSecPrivilegeNotSupported = -67726,
    errSecDeviceError = -67727,
    errSecAttachHandleBusy = -67728,
    errSecNotLoggedIn = -67729,
    errSecAlgorithmMismatch = -67730,
    errSecKeyUsageIncorrect = -67731,
    errSecKeyBlobTypeIncorrect = -67732,
    errSecKeyHeaderInconsistent = -67733,
    errSecUnsupportedKeyFormat = -67734,
    errSecUnsupportedKeySize = -67735,
    errSecInvalidKeyUsageMask = -67736,
    errSecUnsupportedKeyUsageMask = -67737,
    errSecInvalidKeyAttributeMask = -67738,
    errSecUnsupportedKeyAttributeMask = -67739,
    errSecInvalidKeyLabel = -67740,
    errSecUnsupportedKeyLabel = -67741,
    errSecInvalidKeyFormat = -67742,
    errSecUnsupportedVectorOfBuffers = -67743,
    errSecInvalidInputVector = -67744,
    errSecInvalidOutputVector = -67745,
    errSecInvalidContext = -67746,
    errSecInvalidAlgorithm = -67747,
    errSecInvalidAttributeKey = -67748,
    errSecMissingAttributeKey = -67749,
    errSecInvalidAttributeInitVector = -67750,
    errSecMissingAttributeInitVector = -67751,
    errSecInvalidAttributeSalt = -67752,
    errSecMissingAttributeSalt = -67753,
    errSecInvalidAttributePadding = -67754,
    errSecMissingAttributePadding = -67755,
    errSecInvalidAttributeRandom = -67756,
    errSecMissingAttributeRandom = -67757,
    errSecInvalidAttributeSeed = -67758,
    errSecMissingAttributeSeed = -67759,
    errSecInvalidAttributePassphrase = -67760,
    errSecMissingAttributePassphrase = -67761,
    errSecInvalidAttributeKeyLength = -67762,
    errSecMissingAttributeKeyLength = -67763,
    errSecInvalidAttributeBlockSize = -67764,
    errSecMissingAttributeBlockSize = -67765,
    errSecInvalidAttributeOutputSize = -67766,
    errSecMissingAttributeOutputSize = -67767,
    errSecInvalidAttributeRounds = -67768,
    errSecMissingAttributeRounds = -67769,
    errSecInvalidAlgorithmParms = -67770,
    errSecMissingAlgorithmParms = -67771,
    errSecInvalidAttributeLabel = -67772,
    errSecMissingAttributeLabel = -67773,
    errSecInvalidAttributeKeyType = -67774,
    errSecMissingAttributeKeyType = -67775,
    errSecInvalidAttributeMode = -67776,
    errSecMissingAttributeMode = -67777,
    errSecInvalidAttributeEffectiveBits = -67778,
    errSecMissingAttributeEffectiveBits = -67779,
    errSecInvalidAttributeStartDate = -67780,
    errSecMissingAttributeStartDate = -67781,
    errSecInvalidAttributeEndDate = -67782,
    errSecMissingAttributeEndDate = -67783,
    errSecInvalidAttributeVersion = -67784,
    errSecMissingAttributeVersion = -67785,
    errSecInvalidAttributePrime = -67786,
    errSecMissingAttributePrime = -67787,
    errSecInvalidAttributeBase = -67788,
    errSecMissingAttributeBase = -67789,
    errSecInvalidAttributeSubprime = -67790,
    errSecMissingAttributeSubprime = -67791,
    errSecInvalidAttributeIterationCount = -67792,
    errSecMissingAttributeIterationCount = -67793,
    errSecInvalidAttributeDLDBHandle = -67794,
    errSecMissingAttributeDLDBHandle = -67795,
    errSecInvalidAttributeAccessCredentials = -67796,
    errSecMissingAttributeAccessCredentials = -67797,
    errSecInvalidAttributePublicKeyFormat = -67798,
    errSecMissingAttributePublicKeyFormat = -67799,
    errSecInvalidAttributePrivateKeyFormat = -67800,
    errSecMissingAttributePrivateKeyFormat = -67801,
    errSecInvalidAttributeSymmetricKeyFormat = -67802,
    errSecMissingAttributeSymmetricKeyFormat = -67803,
    errSecInvalidAttributeWrappedKeyFormat = -67804,
    errSecMissingAttributeWrappedKeyFormat = -67805,
    errSecStagedOperationInProgress = -67806,
    errSecStagedOperationNotStarted = -67807,
    errSecVerifyFailed = -67808,
    errSecQuerySizeUnknown = -67809,
    errSecBlockSizeMismatch = -67810,
    errSecPublicKeyInconsistent = -67811,
    errSecDeviceVerifyFailed = -67812,
    errSecInvalidLoginName = -67813,
    errSecAlreadyLoggedIn = -67814,
    errSecInvalidDigestAlgorithm = -67815,
    errSecInvalidCRLGroup = -67816,
    errSecCertificateCannotOperate = -67817,
    errSecCertificateExpired = -67818,
    errSecCertificateNotValidYet = -67819,
    errSecCertificateRevoked = -67820,
    errSecCertificateSuspended = -67821,
    errSecInsufficientCredentials = -67822,
    errSecInvalidAction = -67823,
    errSecInvalidAuthority = -67824,
    errSecVerifyActionFailed = -67825,
    errSecInvalidCertAuthority = -67826,
    errSecInvalidCRLAuthority = -67827,
    errSecInvaldCRLAuthority = -67827,
    errSecInvalidCRLEncoding = -67828,
    errSecInvalidCRLType = -67829,
    errSecInvalidCRL = -67830,
    errSecInvalidFormType = -67831,
    errSecInvalidID = -67832,
    errSecInvalidIdentifier = -67833,
    errSecInvalidIndex = -67834,
    errSecInvalidPolicyIdentifiers = -67835,
    errSecInvalidTimeString = -67836,
    errSecInvalidReason = -67837,
    errSecInvalidRequestInputs = -67838,
    errSecInvalidResponseVector = -67839,
    errSecInvalidStopOnPolicy = -67840,
    errSecInvalidTuple = -67841,
    errSecMultipleValuesUnsupported = -67842,
    errSecNotTrusted = -67843,
    errSecNoDefaultAuthority = -67844,
    errSecRejectedForm = -67845,
    errSecRequestLost = -67846,
    errSecRequestRejected = -67847,
    errSecUnsupportedAddressType = -67848,
    errSecUnsupportedService = -67849,
    errSecInvalidTupleGroup = -67850,
    errSecInvalidBaseACLs = -67851,
    errSecInvalidTupleCredentials = -67852,
    errSecInvalidTupleCredendtials = -67852,
    errSecInvalidEncoding = -67853,
    errSecInvalidValidityPeriod = -67854,
    errSecInvalidRequestor = -67855,
    errSecRequestDescriptor = -67856,
    errSecInvalidBundleInfo = -67857,
    errSecInvalidCRLIndex = -67858,
    errSecNoFieldValues = -67859,
    errSecUnsupportedFieldFormat = -67860,
    errSecUnsupportedIndexInfo = -67861,
    errSecUnsupportedLocality = -67862,
    errSecUnsupportedNumAttributes = -67863,
    errSecUnsupportedNumIndexes = -67864,
    errSecUnsupportedNumRecordTypes = -67865,
    errSecFieldSpecifiedMultiple = -67866,
    errSecIncompatibleFieldFormat = -67867,
    errSecInvalidParsingModule = -67868,
    errSecDatabaseLocked = -67869,
    errSecDatastoreIsOpen = -67870,
    errSecMissingValue = -67871,
    errSecUnsupportedQueryLimits = -67872,
    errSecUnsupportedNumSelectionPreds = -67873,
    errSecUnsupportedOperator = -67874,
    errSecInvalidDBLocation = -67875,
    errSecInvalidAccessRequest = -67876,
    errSecInvalidIndexInfo = -67877,
    errSecInvalidNewOwner = -67878,
    errSecInvalidModifyMode = -67879,
    errSecMissingRequiredExtension = -67880,
    errSecExtendedKeyUsageNotCritical = -67881,
    errSecTimestampMissing = -67882,
    errSecTimestampInvalid = -67883,
    errSecTimestampNotTrusted = -67884,
    errSecTimestampServiceNotAvailable = -67885,
    errSecTimestampBadAlg = -67886,
    errSecTimestampBadRequest = -67887,
    errSecTimestampBadDataFormat = -67888,
    errSecTimestampTimeNotAvailable = -67889,
    errSecTimestampUnacceptedPolicy = -67890,
    errSecTimestampUnacceptedExtension = -67891,
    errSecTimestampAddInfoNotAvailable = -67892,
    errSecTimestampSystemFailure = -67893,
    errSecSigningTimeMissing = -67894,
    errSecTimestampRejection = -67895,
    errSecTimestampWaiting = -67896,
    errSecTimestampRevocationWarning = -67897,
    errSecTimestampRevocationNotification = -67898,
    errSecCertificatePolicyNotAllowed = -67899,
    errSecCertificateNameNotAllowed = -67900,
    errSecCertificateValidityPeriodTooLong = -67901,
    errSecCertificateIsCA = -67902,
    errSecCertificateDuplicateExtension = -67903,
};

pub const anon7991 = enum(objc.OSStatus) {
    errSSLProtocol = -9800,
    errSSLNegotiation = -9801,
    errSSLFatalAlert = -9802,
    errSSLWouldBlock = -9803,
    errSSLSessionNotFound = -9804,
    errSSLClosedGraceful = -9805,
    errSSLClosedAbort = -9806,
    errSSLXCertChainInvalid = -9807,
    errSSLBadCert = -9808,
    errSSLCrypto = -9809,
    errSSLInternal = -9810,
    errSSLModuleAttach = -9811,
    errSSLUnknownRootCert = -9812,
    errSSLNoRootCert = -9813,
    errSSLCertExpired = -9814,
    errSSLCertNotYetValid = -9815,
    errSSLClosedNoNotify = -9816,
    errSSLBufferOverflow = -9817,
    errSSLBadCipherSuite = -9818,
    errSSLPeerUnexpectedMsg = -9819,
    errSSLPeerBadRecordMac = -9820,
    errSSLPeerDecryptionFail = -9821,
    errSSLPeerRecordOverflow = -9822,
    errSSLPeerDecompressFail = -9823,
    errSSLPeerHandshakeFail = -9824,
    errSSLPeerBadCert = -9825,
    errSSLPeerUnsupportedCert = -9826,
    errSSLPeerCertRevoked = -9827,
    errSSLPeerCertExpired = -9828,
    errSSLPeerCertUnknown = -9829,
    errSSLIllegalParam = -9830,
    errSSLPeerUnknownCA = -9831,
    errSSLPeerAccessDenied = -9832,
    errSSLPeerDecodeError = -9833,
    errSSLPeerDecryptError = -9834,
    errSSLPeerExportRestriction = -9835,
    errSSLPeerProtocolVersion = -9836,
    errSSLPeerInsufficientSecurity = -9837,
    errSSLPeerInternalError = -9838,
    errSSLPeerUserCancelled = -9839,
    errSSLPeerNoRenegotiation = -9840,
    errSSLPeerAuthCompleted = -9841,
    errSSLClientCertRequested = -9842,
    errSSLHostNameMismatch = -9843,
    errSSLConnectionRefused = -9844,
    errSSLDecryptionFail = -9845,
    errSSLBadRecordMac = -9846,
    errSSLRecordOverflow = -9847,
    errSSLBadConfiguration = -9848,
    errSSLUnexpectedRecord = -9849,
    errSSLWeakPeerEphemeralDHKey = -9850,
    errSSLClientHelloReceived = -9851,
    errSSLTransportReset = -9852,
    errSSLNetworkTimeout = -9853,
    errSSLConfigurationFailed = -9854,
    errSSLUnsupportedExtension = -9855,
    errSSLUnexpectedMessage = -9856,
    errSSLDecompressFail = -9857,
    errSSLHandshakeFail = -9858,
    errSSLDecodeError = -9859,
    errSSLInappropriateFallback = -9860,
    errSSLMissingExtension = -9861,
    errSSLBadCertificateStatusResponse = -9862,
    errSSLCertificateRequired = -9863,
    errSSLUnknownPSKIdentity = -9864,
    errSSLUnrecognizedName = -9865,
    errSSLATSViolation = -9880,
    errSSLATSMinimumVersionViolation = -9881,
    errSSLATSCiphersuiteViolation = -9882,
    errSSLATSMinimumKeySizeViolation = -9883,
    errSSLATSLeafCertificateHashAlgorithmViolation = -9884,
    errSSLATSCertificateHashAlgorithmViolation = -9885,
    errSSLATSCertificateTrustViolation = -9886,
    errSSLEarlyDataRejected = -9890,
};

pub const sint64 = objc.int64_t;

pub const uint64 = objc.uint64_t;

pub const sint32 = objc.int32_t;

pub const sint16 = objc.int16_t;

pub const sint8 = objc.int8_t;

pub const uint32 = objc.uint32_t;

pub const uint16 = objc.uint16_t;

pub const uint8 = objc.uint8_t;

pub const CSSM_INTPTR = objc.intptr_t;

pub const CSSM_SIZE = objc.size_t;

pub const cssm_data = extern struct {
    Length: objc.size_t,
    Data: ?*objc.uint8_t,
};

pub const Asn1AlgId = extern struct {
    algorithm: Asn1Oid,
    parameters: Asn1Item,
};

pub const Asn1PubKeyInfo = extern struct {
    algorithm: Asn1AlgId,
    subjectPublicKey: Asn1Item,
};

pub const Asn1Template_struct = extern struct {
    kind: objc.uint32_t,
    offset: objc.uint32_t,
    sub: ?*anyopaque,
    size: objc.uint32_t,
};

pub const Asn1TemplateChooser = fn(?*anyopaque, objc.Boolean, ?*i8, objc.size_t, ?*anyopaque, ) callconv(.C) ?*Asn1Template;

pub const Asn1TemplateChooserPtr = ?*Asn1TemplateChooser;

pub const CSSM_HANDLE = CSSM_INTPTR;

pub const CSSM_HANDLE_PTR = ?*CSSM_INTPTR;

pub const CSSM_LONG_HANDLE = uint64;

pub const CSSM_LONG_HANDLE_PTR = ?*uint64;

pub const CSSM_MODULE_HANDLE = CSSM_HANDLE;

pub const CSSM_MODULE_HANDLE_PTR = ?*CSSM_HANDLE;

pub const CSSM_CC_HANDLE = CSSM_LONG_HANDLE;

pub const CSSM_CSP_HANDLE = CSSM_MODULE_HANDLE;

pub const CSSM_TP_HANDLE = CSSM_MODULE_HANDLE;

pub const CSSM_AC_HANDLE = CSSM_MODULE_HANDLE;

pub const CSSM_CL_HANDLE = CSSM_MODULE_HANDLE;

pub const CSSM_DL_HANDLE = CSSM_MODULE_HANDLE;

pub const CSSM_DB_HANDLE = CSSM_MODULE_HANDLE;

pub const CSSM_BOOL = sint32;

pub const anon781 = enum(u32) {
    CSSM_FALSE = 0,
    CSSM_TRUE = 1,
};

pub const CSSM_RETURN = sint32;

pub const anon851 = enum(i32) {
    CSSMERR_CSSM_INVALID_ADDIN_HANDLE = -2147417855,
    CSSMERR_CSSM_NOT_INITIALIZED = -2147417854,
    CSSMERR_CSSM_INVALID_HANDLE_USAGE = -2147417853,
    CSSMERR_CSSM_PVC_REFERENT_NOT_FOUND = -2147417852,
    CSSMERR_CSSM_FUNCTION_INTEGRITY_FAIL = -2147417851,
};

pub const anon891 = enum(u32) {
    CSSM_MODULE_STRING_SIZE = 64,
};

pub const CSSM_STRING = [68] i8;

pub const CSSM_DATA_PTR = ?*Asn1Item;

pub const cssm_guid = extern struct {
    Data1: uint32,
    Data2: uint16,
    Data3: uint16,
    Data4: [8] uint8,
};

pub const CSSM_GUID_PTR = ?*cssm_guid;

pub const CSSM_BITMASK = uint32;

pub const CSSM_KEY_HIERARCHY = CSSM_BITMASK;

pub const CSSM_PVC_MODE = CSSM_BITMASK;

pub const anon1131 = enum(u32) {
    CSSM_PVC_NONE = 0,
    CSSM_PVC_APP = 1,
    CSSM_PVC_SP = 2,
};

pub const CSSM_PRIVILEGE_SCOPE = uint32;

pub const anon1201 = enum(u32) {
    CSSM_PRIVILEGE_SCOPE_NONE = 0,
    CSSM_PRIVILEGE_SCOPE_PROCESS = 1,
    CSSM_PRIVILEGE_SCOPE_THREAD = 2,
};

pub const cssm_version = extern struct {
    Major: uint32,
    Minor: uint32,
};

pub const CSSM_VERSION_PTR = ?*cssm_version;

pub const CSSM_SERVICE_MASK = uint32;

pub const anon1321 = enum(u32) {
    CSSM_ACL_AUTHORIZATION_CHANGE_ACL = 65536,
    CSSM_ACL_AUTHORIZATION_CHANGE_OWNER = 65537,
    CSSM_ACL_AUTHORIZATION_PARTITION_ID = 65538,
    CSSM_ACL_AUTHORIZATION_INTEGRITY = 65539,
    CSSM_ACL_AUTHORIZATION_PREAUTH_BASE = 16842752,
    CSSM_ACL_AUTHORIZATION_PREAUTH_END = 16908288,
};

pub const CSSM_SERVICE_TYPE = CSSM_SERVICE_MASK;

pub const cssm_subservice_uid = extern struct {
    Guid: CSSM_GUID,
    Version: CSSM_VERSION,
    SubserviceId: uint32,
    SubserviceType: CSSM_SERVICE_TYPE,
};

pub const CSSM_SUBSERVICE_UID_PTR = ?*cssm_subservice_uid;

pub const CSSM_MODULE_EVENT = uint32;

pub const CSSM_MODULE_EVENT_PTR = ?*uint32;

pub const anon1521 = enum(u32) {
    CSSM_NOTIFY_INSERT = 1,
    CSSM_NOTIFY_REMOVE = 2,
    CSSM_NOTIFY_FAULT = 3,
};

pub const CSSM_API_ModuleEventHandler = ?*const fn(?*CSSM_GUID, ?*anyopaque, uint32, CSSM_SERVICE_TYPE, CSSM_MODULE_EVENT, ) callconv(.C) CSSM_RETURN;

pub const CSSM_ATTACH_FLAGS = uint32;

pub const anon1661 = enum(i32) {
    CSSMERR_CSSM_INTERNAL_ERROR = -2147418111,
    CSSMERR_CSSM_MEMORY_ERROR = -2147418110,
    CSSMERR_CSSM_MDS_ERROR = -2147418109,
    CSSMERR_CSSM_INVALID_POINTER = -2147418108,
    CSSMERR_CSSM_INVALID_INPUT_POINTER = -2147418107,
    CSSMERR_CSSM_INVALID_OUTPUT_POINTER = -2147418106,
    CSSMERR_CSSM_FUNCTION_NOT_IMPLEMENTED = -2147418105,
    CSSMERR_CSSM_SELF_CHECK_FAILED = -2147418104,
    CSSMERR_CSSM_OS_ACCESS_DENIED = -2147418103,
    CSSMERR_CSSM_FUNCTION_FAILED = -2147418102,
    CSSMERR_CSSM_MODULE_MANIFEST_VERIFY_FAILED = -2147418101,
    CSSMERR_CSSM_INVALID_GUID = -2147418100,
};

pub const CSSM_PRIVILEGE = uint64;

pub const CSSM_USEE_TAG = CSSM_PRIVILEGE;

pub const anon1741 = enum(u32) {
    CSSM_USEE_LAST = 255,
    CSSM_USEE_NONE = 0,
    CSSM_USEE_DOMESTIC = 1,
    CSSM_USEE_FINANCIAL = 2,
    CSSM_USEE_KRLE = 3,
    CSSM_USEE_KRENT = 4,
    CSSM_USEE_SSL = 5,
    CSSM_USEE_AUTHENTICATION = 6,
    CSSM_USEE_KEYEXCH = 7,
    CSSM_USEE_MEDICAL = 8,
    CSSM_USEE_INSURANCE = 9,
    CSSM_USEE_WEAK = 10,
};

pub const CSSM_NET_ADDRESS_TYPE = uint32;

pub const anon1901 = enum(u32) {
    CSSM_ADDR_NONE = 0,
    CSSM_ADDR_CUSTOM = 1,
    CSSM_ADDR_URL = 2,
    CSSM_ADDR_SOCKADDR = 3,
    CSSM_ADDR_NAME = 4,
};

pub const cssm_net_address = extern struct {
    AddressType: CSSM_NET_ADDRESS_TYPE,
    Address: Asn1Item,
};

pub const CSSM_NET_ADDRESS_PTR = ?*cssm_net_address;

pub const CSSM_NET_PROTOCOL = uint32;

pub const anon2041 = enum(u32) {
    CSSM_NET_PROTO_NONE = 0,
    CSSM_NET_PROTO_CUSTOM = 1,
    CSSM_NET_PROTO_UNSPECIFIED = 2,
    CSSM_NET_PROTO_LDAP = 3,
    CSSM_NET_PROTO_LDAPS = 4,
    CSSM_NET_PROTO_LDAPNS = 5,
    CSSM_NET_PROTO_X500DAP = 6,
    CSSM_NET_PROTO_FTP = 7,
    CSSM_NET_PROTO_FTPS = 8,
    CSSM_NET_PROTO_OCSP = 9,
    CSSM_NET_PROTO_CMP = 10,
    CSSM_NET_PROTO_CMPS = 11,
};

pub const CSSM_CALLBACK = ?*const fn(CSSM_DATA_PTR, ?*anyopaque) callconv(.C) CSSM_RETURN;

pub const cssm_crypto_data = extern struct {
    Param: Asn1Item,
    Callback: CSSM_CALLBACK,
    CallerCtx: ?*anyopaque,
};

pub const CSSM_CRYPTO_DATA_PTR = ?*cssm_crypto_data;

pub const CSSM_WORDID_TYPE = sint32;

pub const anon2291 = enum(i32) {
    CSSM_WORDID__UNK_ = -1,
    CSSM_WORDID__NLU_ = 0,
    CSSM_WORDID__STAR_ = 1,
    CSSM_WORDID_A = 2,
    CSSM_WORDID_ACL = 3,
    CSSM_WORDID_ALPHA = 4,
    CSSM_WORDID_B = 5,
    CSSM_WORDID_BER = 6,
    CSSM_WORDID_BINARY = 7,
    CSSM_WORDID_BIOMETRIC = 8,
    CSSM_WORDID_C = 9,
    CSSM_WORDID_CANCELED = 10,
    CSSM_WORDID_CERT = 11,
    CSSM_WORDID_COMMENT = 12,
    CSSM_WORDID_CRL = 13,
    CSSM_WORDID_CUSTOM = 14,
    CSSM_WORDID_D = 15,
    CSSM_WORDID_DATE = 16,
    CSSM_WORDID_DB_DELETE = 17,
    CSSM_WORDID_DB_EXEC_STORED_QUERY = 18,
    CSSM_WORDID_DB_INSERT = 19,
    CSSM_WORDID_DB_MODIFY = 20,
    CSSM_WORDID_DB_READ = 21,
    CSSM_WORDID_DBS_CREATE = 22,
    CSSM_WORDID_DBS_DELETE = 23,
    CSSM_WORDID_DECRYPT = 24,
    CSSM_WORDID_DELETE = 25,
    CSSM_WORDID_DELTA_CRL = 26,
    CSSM_WORDID_DER = 27,
    CSSM_WORDID_DERIVE = 28,
    CSSM_WORDID_DISPLAY = 29,
    CSSM_WORDID_DO = 30,
    CSSM_WORDID_DSA = 31,
    CSSM_WORDID_DSA_SHA1 = 32,
    CSSM_WORDID_E = 33,
    CSSM_WORDID_ELGAMAL = 34,
    CSSM_WORDID_ENCRYPT = 35,
    CSSM_WORDID_ENTRY = 36,
    CSSM_WORDID_EXPORT_CLEAR = 37,
    CSSM_WORDID_EXPORT_WRAPPED = 38,
    CSSM_WORDID_G = 39,
    CSSM_WORDID_GE = 40,
    CSSM_WORDID_GENKEY = 41,
    CSSM_WORDID_HASH = 42,
    CSSM_WORDID_HASHED_PASSWORD = 43,
    CSSM_WORDID_HASHED_SUBJECT = 44,
    CSSM_WORDID_HAVAL = 45,
    CSSM_WORDID_IBCHASH = 46,
    CSSM_WORDID_IMPORT_CLEAR = 47,
    CSSM_WORDID_IMPORT_WRAPPED = 48,
    CSSM_WORDID_INTEL = 49,
    CSSM_WORDID_ISSUER = 50,
    CSSM_WORDID_ISSUER_INFO = 51,
    CSSM_WORDID_K_OF_N = 52,
    CSSM_WORDID_KEA = 53,
    CSSM_WORDID_KEYHOLDER = 54,
    CSSM_WORDID_L = 55,
    CSSM_WORDID_LE = 56,
    CSSM_WORDID_LOGIN = 57,
    CSSM_WORDID_LOGIN_NAME = 58,
    CSSM_WORDID_MAC = 59,
    CSSM_WORDID_MD2 = 60,
    CSSM_WORDID_MD2WITHRSA = 61,
    CSSM_WORDID_MD4 = 62,
    CSSM_WORDID_MD5 = 63,
    CSSM_WORDID_MD5WITHRSA = 64,
    CSSM_WORDID_N = 65,
    CSSM_WORDID_NAME = 66,
    CSSM_WORDID_NDR = 67,
    CSSM_WORDID_NHASH = 68,
    CSSM_WORDID_NOT_AFTER = 69,
    CSSM_WORDID_NOT_BEFORE = 70,
    CSSM_WORDID_NULL = 71,
    CSSM_WORDID_NUMERIC = 72,
    CSSM_WORDID_OBJECT_HASH = 73,
    CSSM_WORDID_ONE_TIME = 74,
    CSSM_WORDID_ONLINE = 75,
    CSSM_WORDID_OWNER = 76,
    CSSM_WORDID_P = 77,
    CSSM_WORDID_PAM_NAME = 78,
    CSSM_WORDID_PASSWORD = 79,
    CSSM_WORDID_PGP = 80,
    CSSM_WORDID_PREFIX = 81,
    CSSM_WORDID_PRIVATE_KEY = 82,
    CSSM_WORDID_PROMPTED_BIOMETRIC = 83,
    CSSM_WORDID_PROMPTED_PASSWORD = 84,
    CSSM_WORDID_PROPAGATE = 85,
    CSSM_WORDID_PROTECTED_BIOMETRIC = 86,
    CSSM_WORDID_PROTECTED_PASSWORD = 87,
    CSSM_WORDID_PROTECTED_PIN = 88,
    CSSM_WORDID_PUBLIC_KEY = 89,
    CSSM_WORDID_PUBLIC_KEY_FROM_CERT = 90,
    CSSM_WORDID_Q = 91,
    CSSM_WORDID_RANGE = 92,
    CSSM_WORDID_REVAL = 93,
    CSSM_WORDID_RIPEMAC = 94,
    CSSM_WORDID_RIPEMD = 95,
    CSSM_WORDID_RIPEMD160 = 96,
    CSSM_WORDID_RSA = 97,
    CSSM_WORDID_RSA_ISO9796 = 98,
    CSSM_WORDID_RSA_PKCS = 99,
    CSSM_WORDID_RSA_PKCS_MD5 = 100,
    CSSM_WORDID_RSA_PKCS_SHA1 = 101,
    CSSM_WORDID_RSA_PKCS1 = 102,
    CSSM_WORDID_RSA_PKCS1_MD5 = 103,
    CSSM_WORDID_RSA_PKCS1_SHA1 = 104,
    CSSM_WORDID_RSA_PKCS1_SIG = 105,
    CSSM_WORDID_RSA_RAW = 106,
    CSSM_WORDID_SDSIV1 = 107,
    CSSM_WORDID_SEQUENCE = 108,
    CSSM_WORDID_SET = 109,
    CSSM_WORDID_SEXPR = 110,
    CSSM_WORDID_SHA1 = 111,
    CSSM_WORDID_SHA1WITHDSA = 112,
    CSSM_WORDID_SHA1WITHECDSA = 113,
    CSSM_WORDID_SHA1WITHRSA = 114,
    CSSM_WORDID_SIGN = 115,
    CSSM_WORDID_SIGNATURE = 116,
    CSSM_WORDID_SIGNED_NONCE = 117,
    CSSM_WORDID_SIGNED_SECRET = 118,
    CSSM_WORDID_SPKI = 119,
    CSSM_WORDID_SUBJECT = 120,
    CSSM_WORDID_SUBJECT_INFO = 121,
    CSSM_WORDID_TAG = 122,
    CSSM_WORDID_THRESHOLD = 123,
    CSSM_WORDID_TIME = 124,
    CSSM_WORDID_URI = 125,
    CSSM_WORDID_VERSION = 126,
    CSSM_WORDID_X509_ATTRIBUTE = 127,
    CSSM_WORDID_X509V1 = 128,
    CSSM_WORDID_X509V2 = 129,
    CSSM_WORDID_X509V3 = 130,
    CSSM_WORDID_X9_ATTRIBUTE = 131,
    CSSM_WORDID_VENDOR_START = 65536,
    CSSM_WORDID_VENDOR_END = 2147418112,
};

pub const CSSM_LIST_ELEMENT_TYPE = uint32;

pub const CSSM_LIST_ELEMENT_TYPE_PTR = ?*uint32;

pub const anon3681 = enum(u32) {
    CSSM_DL_DB_RECORD_GENERIC_PASSWORD = -2147483648,
    CSSM_DL_DB_RECORD_INTERNET_PASSWORD = -2147483647,
    CSSM_DL_DB_RECORD_APPLESHARE_PASSWORD = -2147483646,
    CSSM_DL_DB_RECORD_X509_CERTIFICATE = -2147479552,
    CSSM_DL_DB_RECORD_USER_TRUST = -2147479551,
    CSSM_DL_DB_RECORD_X509_CRL = -2147479550,
    CSSM_DL_DB_RECORD_UNLOCK_REFERRAL = -2147479549,
    CSSM_DL_DB_RECORD_EXTENDED_ATTRIBUTE = -2147479548,
    CSSM_DL_DB_RECORD_METADATA = -2147450880,
};

pub const CSSM_LIST_TYPE = uint32;

pub const CSSM_LIST_TYPE_PTR = ?*uint32;

pub const anon3751 = enum(u32) {
    CSSM_LIST_TYPE_UNKNOWN = 0,
    CSSM_LIST_TYPE_CUSTOM = 1,
    CSSM_LIST_TYPE_SEXPR = 2,
};

pub const cssm_list_element = extern struct {
    NextElement: ?*cssm_list_element,
    WordID: CSSM_WORDID_TYPE,
    ElementType: CSSM_LIST_ELEMENT_TYPE,
    Element: anon3945,
};

pub const CSSM_LIST_ELEMENT_PTR = ?*cssm_list_element;

pub const cssm_list = extern struct {
    ListType: CSSM_LIST_TYPE,
    Head: CSSM_LIST_ELEMENT_PTR,
    Tail: CSSM_LIST_ELEMENT_PTR,
};

pub const CSSM_LIST_PTR = ?*cssm_list;

pub const anon3945 = extern union {
    Sublist: CSSM_LIST,
    Word: Asn1Item,
};

pub const CSSM_TUPLE = extern struct {
    Issuer: CSSM_LIST,
    Subject: CSSM_LIST,
    Delegate: CSSM_BOOL,
    AuthorizationTag: CSSM_LIST,
    ValidityPeriod: CSSM_LIST,
};

pub const CSSM_TUPLE_PTR = ?*CSSM_TUPLE;

pub const cssm_tuplegroup = extern struct {
    NumberOfTuples: uint32,
    Tuples: CSSM_TUPLE_PTR,
};

pub const CSSM_TUPLEGROUP_PTR = ?*cssm_tuplegroup;

pub const CSSM_SAMPLE_TYPE = CSSM_WORDID_TYPE;

pub const anon4141 = enum(u32) {
    CSSM_SAMPLE_TYPE_PASSWORD = 79,
    CSSM_SAMPLE_TYPE_HASHED_PASSWORD = 43,
    CSSM_SAMPLE_TYPE_PROTECTED_PASSWORD = 87,
    CSSM_SAMPLE_TYPE_PROMPTED_PASSWORD = 84,
    CSSM_SAMPLE_TYPE_SIGNED_NONCE = 117,
    CSSM_SAMPLE_TYPE_SIGNED_SECRET = 118,
    CSSM_SAMPLE_TYPE_BIOMETRIC = 8,
    CSSM_SAMPLE_TYPE_PROTECTED_BIOMETRIC = 86,
    CSSM_SAMPLE_TYPE_PROMPTED_BIOMETRIC = 83,
    CSSM_SAMPLE_TYPE_THRESHOLD = 123,
};

pub const cssm_sample = extern struct {
    TypedSample: CSSM_LIST,
    Verifier: ?*CSSM_SUBSERVICE_UID,
};

pub const CSSM_SAMPLE_PTR = ?*cssm_sample;

pub const cssm_samplegroup = extern struct {
    NumberOfSamples: uint32,
    Samples: ?*CSSM_SAMPLE,
};

pub const CSSM_SAMPLEGROUP_PTR = ?*cssm_samplegroup;

pub const CSSM_MALLOC = ?*const fn(CSSM_SIZE, ?*anyopaque) callconv(.C) ?*anyopaque;

pub const CSSM_FREE = ?*const fn(?*anyopaque, ?*anyopaque) callconv(.C) void;

pub const CSSM_REALLOC = ?*const fn(?*anyopaque, CSSM_SIZE, ?*anyopaque) callconv(.C) ?*anyopaque;

pub const CSSM_CALLOC = ?*const fn(uint32, CSSM_SIZE, ?*anyopaque) callconv(.C) ?*anyopaque;

pub const cssm_memory_funcs = extern struct {
    malloc_func: CSSM_MALLOC,
    free_func: CSSM_FREE,
    realloc_func: CSSM_REALLOC,
    calloc_func: CSSM_CALLOC,
    AllocRef: ?*anyopaque,
};

pub const CSSM_MEMORY_FUNCS_PTR = ?*cssm_memory_funcs;

pub const CSSM_API_MEMORY_FUNCS = CSSM_MEMORY_FUNCS;

pub const CSSM_API_MEMORY_FUNCS_PTR = ?*CSSM_API_MEMORY_FUNCS;

pub const CSSM_CHALLENGE_CALLBACK = ?*const fn(?*CSSM_LIST, CSSM_SAMPLEGROUP_PTR, ?*anyopaque, ?*CSSM_MEMORY_FUNCS, ) callconv(.C) CSSM_RETURN;

pub const CSSM_CERT_TYPE = uint32;

pub const CSSM_CERT_TYPE_PTR = ?*uint32;

pub const anon4731 = enum(u32) {
    CSSM_CERT_UNKNOWN = 0,
    CSSM_CERT_X_509v1 = 1,
    CSSM_CERT_X_509v2 = 2,
    CSSM_CERT_X_509v3 = 3,
    CSSM_CERT_PGP = 4,
    CSSM_CERT_SPKI = 5,
    CSSM_CERT_SDSIv1 = 6,
    CSSM_CERT_Intel = 8,
    CSSM_CERT_X_509_ATTRIBUTE = 9,
    CSSM_CERT_X9_ATTRIBUTE = 10,
    CSSM_CERT_TUPLE = 11,
    CSSM_CERT_ACL_ENTRY = 12,
    CSSM_CERT_MULTIPLE = 32766,
    CSSM_CERT_LAST = 32767,
    CSSM_CL_CUSTOM_CERT_TYPE = 32768,
};

pub const CSSM_CERT_ENCODING = uint32;

pub const CSSM_CERT_ENCODING_PTR = ?*uint32;

pub const anon4951 = enum(u32) {
    CSSM_CERT_ENCODING_UNKNOWN = 0,
    CSSM_CERT_ENCODING_CUSTOM = 1,
    CSSM_CERT_ENCODING_BER = 2,
    CSSM_CERT_ENCODING_DER = 3,
    CSSM_CERT_ENCODING_NDR = 4,
    CSSM_CERT_ENCODING_SEXPR = 5,
    CSSM_CERT_ENCODING_PGP = 6,
    CSSM_CERT_ENCODING_MULTIPLE = 32766,
    CSSM_CERT_ENCODING_LAST = 32767,
    CSSM_CL_CUSTOM_CERT_ENCODING = 32768,
};

pub const cssm_encoded_cert = extern struct {
    CertType: CSSM_CERT_TYPE,
    CertEncoding: CSSM_CERT_ENCODING,
    CertBlob: Asn1Item,
};

pub const CSSM_ENCODED_CERT_PTR = ?*cssm_encoded_cert;

pub const CSSM_CERT_PARSE_FORMAT = uint32;

pub const CSSM_CERT_PARSE_FORMAT_PTR = ?*uint32;

pub const anon5181 = enum(u32) {
    CSSM_CERT_PARSE_FORMAT_NONE = 0,
    CSSM_CERT_PARSE_FORMAT_CUSTOM = 1,
    CSSM_CERT_PARSE_FORMAT_SEXPR = 2,
    CSSM_CERT_PARSE_FORMAT_COMPLEX = 3,
    CSSM_CERT_PARSE_FORMAT_OID_NAMED = 4,
    CSSM_CERT_PARSE_FORMAT_TUPLE = 5,
    CSSM_CERT_PARSE_FORMAT_MULTIPLE = 32766,
    CSSM_CERT_PARSE_FORMAT_LAST = 32767,
    CSSM_CL_CUSTOM_CERT_PARSE_FORMAT = 32768,
};

pub const cssm_parsed_cert = extern struct {
    CertType: CSSM_CERT_TYPE,
    ParsedCertFormat: CSSM_CERT_PARSE_FORMAT,
    ParsedCert: ?*anyopaque,
};

pub const CSSM_PARSED_CERT_PTR = ?*cssm_parsed_cert;

pub const cssm_cert_pair = extern struct {
    EncodedCert: CSSM_ENCODED_CERT,
    ParsedCert: CSSM_PARSED_CERT,
};

pub const CSSM_CERT_PAIR_PTR = ?*cssm_cert_pair;

pub const CSSM_CERTGROUP_TYPE = uint32;

pub const CSSM_CERTGROUP_TYPE_PTR = ?*uint32;

pub const anon5491 = enum(u32) {
    CSSM_CERTGROUP_DATA = 0,
    CSSM_CERTGROUP_ENCODED_CERT = 1,
    CSSM_CERTGROUP_PARSED_CERT = 2,
    CSSM_CERTGROUP_CERT_PAIR = 3,
};

pub const cssm_certgroup = extern struct {
    CertType: CSSM_CERT_TYPE,
    CertEncoding: CSSM_CERT_ENCODING,
    NumCerts: uint32,
    GroupList: anon5605,
    CertGroupType: CSSM_CERTGROUP_TYPE,
    Reserved: ?*anyopaque,
};

pub const anon5605 = extern union {
    CertList: CSSM_DATA_PTR,
    EncodedCertList: CSSM_ENCODED_CERT_PTR,
    ParsedCertList: CSSM_PARSED_CERT_PTR,
    PairCertList: CSSM_CERT_PAIR_PTR,
};

pub const CSSM_CERTGROUP_PTR = ?*cssm_certgroup;

pub const cssm_base_certs = extern struct {
    TPHandle: CSSM_TP_HANDLE,
    CLHandle: CSSM_CL_HANDLE,
    Certs: CSSM_CERTGROUP,
};

pub const CSSM_BASE_CERTS_PTR = ?*cssm_base_certs;

pub const cssm_access_credentials = extern struct {
    EntryTag: CSSM_STRING,
    BaseCerts: CSSM_BASE_CERTS,
    Samples: CSSM_SAMPLEGROUP,
    Callback: CSSM_CHALLENGE_CALLBACK,
    CallerCtx: ?*anyopaque,
};

pub const CSSM_ACCESS_CREDENTIALS_PTR = ?*cssm_access_credentials;

pub const CSSM_ACL_SUBJECT_TYPE = sint32;

pub const anon5891 = enum(u32) {
    CSSM_ACL_SUBJECT_TYPE_ANY = 1,
    CSSM_ACL_SUBJECT_TYPE_THRESHOLD = 123,
    CSSM_ACL_SUBJECT_TYPE_PASSWORD = 79,
    CSSM_ACL_SUBJECT_TYPE_PROTECTED_PASSWORD = 87,
    CSSM_ACL_SUBJECT_TYPE_PROMPTED_PASSWORD = 84,
    CSSM_ACL_SUBJECT_TYPE_PUBLIC_KEY = 89,
    CSSM_ACL_SUBJECT_TYPE_HASHED_SUBJECT = 44,
    CSSM_ACL_SUBJECT_TYPE_BIOMETRIC = 8,
    CSSM_ACL_SUBJECT_TYPE_PROTECTED_BIOMETRIC = 86,
    CSSM_ACL_SUBJECT_TYPE_PROMPTED_BIOMETRIC = 83,
    CSSM_ACL_SUBJECT_TYPE_LOGIN_NAME = 58,
    CSSM_ACL_SUBJECT_TYPE_EXT_PAM_NAME = 78,
};

pub const CSSM_ACL_AUTHORIZATION_TAG = sint32;

pub const anon6061 = enum(u32) {
    CSSM_ACL_AUTHORIZATION_TAG_VENDOR_DEFINED_START = 65536,
    CSSM_ACL_AUTHORIZATION_ANY = 1,
    CSSM_ACL_AUTHORIZATION_LOGIN = 57,
    CSSM_ACL_AUTHORIZATION_GENKEY = 41,
    CSSM_ACL_AUTHORIZATION_DELETE = 25,
    CSSM_ACL_AUTHORIZATION_EXPORT_WRAPPED = 38,
    CSSM_ACL_AUTHORIZATION_EXPORT_CLEAR = 37,
    CSSM_ACL_AUTHORIZATION_IMPORT_WRAPPED = 48,
    CSSM_ACL_AUTHORIZATION_IMPORT_CLEAR = 47,
    CSSM_ACL_AUTHORIZATION_SIGN = 115,
    CSSM_ACL_AUTHORIZATION_ENCRYPT = 35,
    CSSM_ACL_AUTHORIZATION_DECRYPT = 24,
    CSSM_ACL_AUTHORIZATION_MAC = 59,
    CSSM_ACL_AUTHORIZATION_DERIVE = 28,
    CSSM_ACL_AUTHORIZATION_DBS_CREATE = 22,
    CSSM_ACL_AUTHORIZATION_DBS_DELETE = 23,
    CSSM_ACL_AUTHORIZATION_DB_READ = 21,
    CSSM_ACL_AUTHORIZATION_DB_INSERT = 19,
    CSSM_ACL_AUTHORIZATION_DB_MODIFY = 20,
    CSSM_ACL_AUTHORIZATION_DB_DELETE = 17,
};

pub const cssm_authorizationgroup = extern struct {
    NumberOfAuthTags: uint32,
    AuthTags: ?*CSSM_ACL_AUTHORIZATION_TAG,
};

pub const CSSM_AUTHORIZATIONGROUP_PTR = ?*cssm_authorizationgroup;

pub const cssm_acl_validity_period = extern struct {
    StartDate: Asn1Item,
    EndDate: Asn1Item,
};

pub const CSSM_ACL_VALIDITY_PERIOD_PTR = ?*cssm_acl_validity_period;

pub const cssm_acl_entry_prototype = extern struct {
    TypedSubject: CSSM_LIST,
    Delegate: CSSM_BOOL,
    Authorization: CSSM_AUTHORIZATIONGROUP,
    TimeRange: CSSM_ACL_VALIDITY_PERIOD,
    EntryTag: CSSM_STRING,
};

pub const CSSM_ACL_ENTRY_PROTOTYPE_PTR = ?*cssm_acl_entry_prototype;

pub const cssm_acl_owner_prototype = extern struct {
    TypedSubject: CSSM_LIST,
    Delegate: CSSM_BOOL,
};

pub const CSSM_ACL_OWNER_PROTOTYPE_PTR = ?*cssm_acl_owner_prototype;

pub const CSSM_ACL_SUBJECT_CALLBACK = ?*const fn(?*CSSM_LIST, CSSM_LIST_PTR, ?*anyopaque, ?*CSSM_MEMORY_FUNCS, ) callconv(.C) CSSM_RETURN;

pub const cssm_acl_entry_input = extern struct {
    Prototype: CSSM_ACL_ENTRY_PROTOTYPE,
    Callback: CSSM_ACL_SUBJECT_CALLBACK,
    CallerContext: ?*anyopaque,
};

pub const CSSM_ACL_ENTRY_INPUT_PTR = ?*cssm_acl_entry_input;

pub const cssm_resource_control_context = extern struct {
    AccessCred: CSSM_ACCESS_CREDENTIALS_PTR,
    InitialAclEntry: CSSM_ACL_ENTRY_INPUT,
};

pub const CSSM_RESOURCE_CONTROL_CONTEXT_PTR = ?*cssm_resource_control_context;

pub const CSSM_ACL_HANDLE = CSSM_HANDLE;

pub const cssm_acl_entry_info = extern struct {
    EntryPublicInfo: CSSM_ACL_ENTRY_PROTOTYPE,
    EntryHandle: CSSM_ACL_HANDLE,
};

pub const CSSM_ACL_ENTRY_INFO_PTR = ?*cssm_acl_entry_info;

pub const CSSM_ACL_EDIT_MODE = uint32;

pub const anon6831 = enum(u32) {
    CSSM_ACL_EDIT_MODE_ADD = 1,
    CSSM_ACL_EDIT_MODE_DELETE = 2,
    CSSM_ACL_EDIT_MODE_REPLACE = 3,
};

pub const cssm_acl_edit = extern struct {
    EditMode: CSSM_ACL_EDIT_MODE,
    OldEntryHandle: CSSM_ACL_HANDLE,
    NewEntry: ?*CSSM_ACL_ENTRY_INPUT,
};

pub const CSSM_ACL_EDIT_PTR = ?*cssm_acl_edit;

pub const CSSM_PROC_ADDR = ?*const fn() callconv(.C) void;

pub const CSSM_PROC_ADDR_PTR = ?*CSSM_PROC_ADDR;

pub const cssm_func_name_addr = extern struct {
    Name: CSSM_STRING,
    Address: CSSM_PROC_ADDR,
};

pub const CSSM_FUNC_NAME_ADDR_PTR = ?*cssm_func_name_addr;

pub const cssm_date = extern struct {
    Year: [4] uint8,
    Month: [2] uint8,
    Day: [2] uint8,
};

pub const CSSM_DATE_PTR = ?*cssm_date;

pub const cssm_range = extern struct {
    Min: uint32,
    Max: uint32,
};

pub const CSSM_RANGE_PTR = ?*cssm_range;

pub const cssm_query_size_data = extern struct {
    SizeInputBlock: uint32,
    SizeOutputBlock: uint32,
};

pub const CSSM_QUERY_SIZE_DATA_PTR = ?*cssm_query_size_data;

pub const CSSM_HEADERVERSION = uint32;

pub const anon7271 = enum(u32) {
    CSSM_KEYHEADER_VERSION = 2,
};

pub const cssm_key_size = extern struct {
    LogicalKeySizeInBits: uint32,
    EffectiveKeySizeInBits: uint32,
};

pub const CSSM_KEY_SIZE_PTR = ?*cssm_key_size;

pub const CSSM_KEYBLOB_TYPE = uint32;

pub const anon7371 = enum(u32) {
    CSSM_KEYBLOB_RAW = 0,
    CSSM_KEYBLOB_REFERENCE = 2,
    CSSM_KEYBLOB_WRAPPED = 3,
    CSSM_KEYBLOB_OTHER = -1,
};

pub const CSSM_KEYBLOB_FORMAT = uint32;

pub const anon7451 = enum(u32) {
    CSSM_KEYBLOB_RAW_FORMAT_NONE = 0,
    CSSM_KEYBLOB_RAW_FORMAT_PKCS1 = 1,
    CSSM_KEYBLOB_RAW_FORMAT_PKCS3 = 2,
    CSSM_KEYBLOB_RAW_FORMAT_MSCAPI = 3,
    CSSM_KEYBLOB_RAW_FORMAT_PGP = 4,
    CSSM_KEYBLOB_RAW_FORMAT_FIPS186 = 5,
    CSSM_KEYBLOB_RAW_FORMAT_BSAFE = 6,
    CSSM_KEYBLOB_RAW_FORMAT_CCA = 9,
    CSSM_KEYBLOB_RAW_FORMAT_PKCS8 = 10,
    CSSM_KEYBLOB_RAW_FORMAT_SPKI = 11,
    CSSM_KEYBLOB_RAW_FORMAT_OCTET_STRING = 12,
    CSSM_KEYBLOB_RAW_FORMAT_OTHER = -1,
};

pub const anon7611 = enum(u32) {
    CSSM_KEYBLOB_WRAPPED_FORMAT_NONE = 0,
    CSSM_KEYBLOB_WRAPPED_FORMAT_PKCS8 = 1,
    CSSM_KEYBLOB_WRAPPED_FORMAT_PKCS7 = 2,
    CSSM_KEYBLOB_WRAPPED_FORMAT_MSCAPI = 3,
    CSSM_KEYBLOB_WRAPPED_FORMAT_OTHER = -1,
};

pub const anon7701 = enum(u32) {
    CSSM_KEYBLOB_WRAPPED_FORMAT_APPLE_CUSTOM = 100,
    CSSM_KEYBLOB_WRAPPED_FORMAT_OPENSSL = 101,
    CSSM_KEYBLOB_WRAPPED_FORMAT_OPENSSH1 = 102,
};

pub const CSSM_KEYCLASS = uint32;

pub const anon7801 = enum(u32) {
    CSSM_KEYCLASS_PUBLIC_KEY = 0,
    CSSM_KEYCLASS_PRIVATE_KEY = 1,
    CSSM_KEYCLASS_SESSION_KEY = 2,
    CSSM_KEYCLASS_SECRET_PART = 3,
    CSSM_KEYCLASS_OTHER = -1,
};

pub const CSSM_KEYATTR_FLAGS = uint32;

pub const anon7891 = enum(u32) {
    CSSM_KEYATTR_RETURN_DEFAULT = 0,
    CSSM_KEYATTR_RETURN_DATA = 268435456,
    CSSM_KEYATTR_RETURN_REF = 536870912,
    CSSM_KEYATTR_RETURN_NONE = 1073741824,
    CSSM_KEYATTR_PERMANENT = 1,
    CSSM_KEYATTR_PRIVATE = 2,
    CSSM_KEYATTR_MODIFIABLE = 4,
    CSSM_KEYATTR_SENSITIVE = 8,
    CSSM_KEYATTR_EXTRACTABLE = 32,
    CSSM_KEYATTR_ALWAYS_SENSITIVE = 16,
    CSSM_KEYATTR_NEVER_EXTRACTABLE = 64,
};

pub const CSSM_KEYUSE = uint32;

pub const anon8071 = enum(u32) {
    CSSM_KEYUSE_ANY = -2147483648,
    CSSM_KEYUSE_ENCRYPT = 1,
    CSSM_KEYUSE_DECRYPT = 2,
    CSSM_KEYUSE_SIGN = 4,
    CSSM_KEYUSE_VERIFY = 8,
    CSSM_KEYUSE_SIGN_RECOVER = 16,
    CSSM_KEYUSE_VERIFY_RECOVER = 32,
    CSSM_KEYUSE_WRAP = 64,
    CSSM_KEYUSE_UNWRAP = 128,
    CSSM_KEYUSE_DERIVE = 256,
};

pub const CSSM_ALGORITHMS = uint32;

pub const anon8211 = enum(u32) {
    CSSM_ALGID_NONE = 0,
    CSSM_ALGID_CUSTOM = 1,
    CSSM_ALGID_DH = 2,
    CSSM_ALGID_PH = 3,
    CSSM_ALGID_KEA = 4,
    CSSM_ALGID_MD2 = 5,
    CSSM_ALGID_MD4 = 6,
    CSSM_ALGID_MD5 = 7,
    CSSM_ALGID_SHA1 = 8,
    CSSM_ALGID_NHASH = 9,
    CSSM_ALGID_HAVAL = 10,
    CSSM_ALGID_RIPEMD = 11,
    CSSM_ALGID_IBCHASH = 12,
    CSSM_ALGID_RIPEMAC = 13,
    CSSM_ALGID_DES = 14,
    CSSM_ALGID_DESX = 15,
    CSSM_ALGID_RDES = 16,
    CSSM_ALGID_3DES_3KEY_EDE = 17,
    CSSM_ALGID_3DES_2KEY_EDE = 18,
    CSSM_ALGID_3DES_1KEY_EEE = 19,
    CSSM_ALGID_3DES_3KEY = 17,
    CSSM_ALGID_3DES_3KEY_EEE = 20,
    CSSM_ALGID_3DES_2KEY = 18,
    CSSM_ALGID_3DES_2KEY_EEE = 21,
    CSSM_ALGID_3DES_1KEY = 20,
    CSSM_ALGID_IDEA = 22,
    CSSM_ALGID_RC2 = 23,
    CSSM_ALGID_RC5 = 24,
    CSSM_ALGID_RC4 = 25,
    CSSM_ALGID_SEAL = 26,
    CSSM_ALGID_CAST = 27,
    CSSM_ALGID_BLOWFISH = 28,
    CSSM_ALGID_SKIPJACK = 29,
    CSSM_ALGID_LUCIFER = 30,
    CSSM_ALGID_MADRYGA = 31,
    CSSM_ALGID_FEAL = 32,
    CSSM_ALGID_REDOC = 33,
    CSSM_ALGID_REDOC3 = 34,
    CSSM_ALGID_LOKI = 35,
    CSSM_ALGID_KHUFU = 36,
    CSSM_ALGID_KHAFRE = 37,
    CSSM_ALGID_MMB = 38,
    CSSM_ALGID_GOST = 39,
    CSSM_ALGID_SAFER = 40,
    CSSM_ALGID_CRAB = 41,
    CSSM_ALGID_RSA = 42,
    CSSM_ALGID_DSA = 43,
    CSSM_ALGID_MD5WithRSA = 44,
    CSSM_ALGID_MD2WithRSA = 45,
    CSSM_ALGID_ElGamal = 46,
    CSSM_ALGID_MD2Random = 47,
    CSSM_ALGID_MD5Random = 48,
    CSSM_ALGID_SHARandom = 49,
    CSSM_ALGID_DESRandom = 50,
    CSSM_ALGID_SHA1WithRSA = 51,
    CSSM_ALGID_CDMF = 52,
    CSSM_ALGID_CAST3 = 53,
    CSSM_ALGID_CAST5 = 54,
    CSSM_ALGID_GenericSecret = 55,
    CSSM_ALGID_ConcatBaseAndKey = 56,
    CSSM_ALGID_ConcatKeyAndBase = 57,
    CSSM_ALGID_ConcatBaseAndData = 58,
    CSSM_ALGID_ConcatDataAndBase = 59,
    CSSM_ALGID_XORBaseAndData = 60,
    CSSM_ALGID_ExtractFromKey = 61,
    CSSM_ALGID_SSL3PrePrimaryGen = 62,
    CSSM_ALGID_SSL3PreMasterGen = 62,
    CSSM_ALGID_SSL3PrimaryDerive = 63,
    CSSM_ALGID_SSL3MasterDerive = 63,
    CSSM_ALGID_SSL3KeyAndMacDerive = 64,
    CSSM_ALGID_SSL3MD5_MAC = 65,
    CSSM_ALGID_SSL3SHA1_MAC = 66,
    CSSM_ALGID_PKCS5_PBKDF1_MD5 = 67,
    CSSM_ALGID_PKCS5_PBKDF1_MD2 = 68,
    CSSM_ALGID_PKCS5_PBKDF1_SHA1 = 69,
    CSSM_ALGID_WrapLynks = 70,
    CSSM_ALGID_WrapSET_OAEP = 71,
    CSSM_ALGID_BATON = 72,
    CSSM_ALGID_ECDSA = 73,
    CSSM_ALGID_MAYFLY = 74,
    CSSM_ALGID_JUNIPER = 75,
    CSSM_ALGID_FASTHASH = 76,
    CSSM_ALGID_3DES = 77,
    CSSM_ALGID_SSL3MD5 = 78,
    CSSM_ALGID_SSL3SHA1 = 79,
    CSSM_ALGID_FortezzaTimestamp = 80,
    CSSM_ALGID_SHA1WithDSA = 81,
    CSSM_ALGID_SHA1WithECDSA = 82,
    CSSM_ALGID_DSA_BSAFE = 83,
    CSSM_ALGID_ECDH = 84,
    CSSM_ALGID_ECMQV = 85,
    CSSM_ALGID_PKCS12_SHA1_PBE = 86,
    CSSM_ALGID_ECNRA = 87,
    CSSM_ALGID_SHA1WithECNRA = 88,
    CSSM_ALGID_ECES = 89,
    CSSM_ALGID_ECAES = 90,
    CSSM_ALGID_SHA1HMAC = 91,
    CSSM_ALGID_FIPS186Random = 92,
    CSSM_ALGID_ECC = 93,
    CSSM_ALGID_MQV = 94,
    CSSM_ALGID_NRA = 95,
    CSSM_ALGID_IntelPlatformRandom = 96,
    CSSM_ALGID_UTC = 97,
    CSSM_ALGID_HAVAL3 = 98,
    CSSM_ALGID_HAVAL4 = 99,
    CSSM_ALGID_HAVAL5 = 100,
    CSSM_ALGID_TIGER = 101,
    CSSM_ALGID_MD5HMAC = 102,
    CSSM_ALGID_PKCS5_PBKDF2 = 103,
    CSSM_ALGID_RUNNING_COUNTER = 104,
    CSSM_ALGID_LAST = 2147483647,
    CSSM_ALGID_VENDOR_DEFINED = -2147483648,
};

pub const CSSM_ENCRYPT_MODE = uint32;

pub const anon9401 = enum(u32) {
    CSSM_ALGMODE_NONE = 0,
    CSSM_ALGMODE_CUSTOM = 1,
    CSSM_ALGMODE_ECB = 2,
    CSSM_ALGMODE_ECBPad = 3,
    CSSM_ALGMODE_CBC = 4,
    CSSM_ALGMODE_CBC_IV8 = 5,
    CSSM_ALGMODE_CBCPadIV8 = 6,
    CSSM_ALGMODE_CFB = 7,
    CSSM_ALGMODE_CFB_IV8 = 8,
    CSSM_ALGMODE_CFBPadIV8 = 9,
    CSSM_ALGMODE_OFB = 10,
    CSSM_ALGMODE_OFB_IV8 = 11,
    CSSM_ALGMODE_OFBPadIV8 = 12,
    CSSM_ALGMODE_COUNTER = 13,
    CSSM_ALGMODE_BC = 14,
    CSSM_ALGMODE_PCBC = 15,
    CSSM_ALGMODE_CBCC = 16,
    CSSM_ALGMODE_OFBNLF = 17,
    CSSM_ALGMODE_PBC = 18,
    CSSM_ALGMODE_PFB = 19,
    CSSM_ALGMODE_CBCPD = 20,
    CSSM_ALGMODE_PUBLIC_KEY = 21,
    CSSM_ALGMODE_PRIVATE_KEY = 22,
    CSSM_ALGMODE_SHUFFLE = 23,
    CSSM_ALGMODE_ECB64 = 24,
    CSSM_ALGMODE_CBC64 = 25,
    CSSM_ALGMODE_OFB64 = 26,
    CSSM_ALGMODE_CFB32 = 28,
    CSSM_ALGMODE_CFB16 = 29,
    CSSM_ALGMODE_CFB8 = 30,
    CSSM_ALGMODE_WRAP = 31,
    CSSM_ALGMODE_PRIVATE_WRAP = 32,
    CSSM_ALGMODE_RELAYX = 33,
    CSSM_ALGMODE_ECB128 = 34,
    CSSM_ALGMODE_ECB96 = 35,
    CSSM_ALGMODE_CBC128 = 36,
    CSSM_ALGMODE_OAEP_HASH = 37,
    CSSM_ALGMODE_PKCS1_EME_V15 = 38,
    CSSM_ALGMODE_PKCS1_EME_OAEP = 39,
    CSSM_ALGMODE_PKCS1_EMSA_V15 = 40,
    CSSM_ALGMODE_ISO_9796 = 41,
    CSSM_ALGMODE_X9_31 = 42,
    CSSM_ALGMODE_LAST = 2147483647,
    CSSM_ALGMODE_VENDOR_DEFINED = -2147483648,
};

pub const cssm_keyheader = extern struct {
    HeaderVersion: CSSM_HEADERVERSION,
    CspId: CSSM_GUID,
    BlobType: CSSM_KEYBLOB_TYPE,
    Format: CSSM_KEYBLOB_FORMAT,
    AlgorithmId: CSSM_ALGORITHMS,
    KeyClass: CSSM_KEYCLASS,
    LogicalKeySizeInBits: uint32,
    KeyAttr: CSSM_KEYATTR_FLAGS,
    KeyUsage: CSSM_KEYUSE,
    StartDate: CSSM_DATE,
    EndDate: CSSM_DATE,
    WrapAlgorithmId: CSSM_ALGORITHMS,
    WrapMode: CSSM_ENCRYPT_MODE,
    Reserved: uint32,
};

pub const CSSM_KEYHEADER_PTR = ?*cssm_keyheader;

pub const cssm_key = extern struct {
    KeyHeader: CSSM_KEYHEADER,
    KeyData: Asn1Item,
};

pub const CSSM_KEY_PTR = ?*cssm_key;

pub const CSSM_WRAP_KEY = CSSM_KEY;

pub const CSSM_WRAP_KEY_PTR = ?*CSSM_KEY;

pub const CSSM_CSPTYPE = uint32;

pub const anon10151 = enum(u32) {
    CSSM_CSP_SOFTWARE = 1,
    CSSM_CSP_HARDWARE = 2,
    CSSM_CSP_HYBRID = 3,
};

pub const cssm_dl_db_handle = extern struct {
    DLHandle: CSSM_DL_HANDLE,
    DBHandle: CSSM_DB_HANDLE,
};

pub const CSSM_DL_DB_HANDLE_PTR = ?*cssm_dl_db_handle;

pub const CSSM_CONTEXT_TYPE = uint32;

pub const anon10281 = enum(u32) {
    CSSM_ALGCLASS_NONE = 0,
    CSSM_ALGCLASS_CUSTOM = 1,
    CSSM_ALGCLASS_SIGNATURE = 2,
    CSSM_ALGCLASS_SYMMETRIC = 3,
    CSSM_ALGCLASS_DIGEST = 4,
    CSSM_ALGCLASS_RANDOMGEN = 5,
    CSSM_ALGCLASS_UNIQUEGEN = 6,
    CSSM_ALGCLASS_MAC = 7,
    CSSM_ALGCLASS_ASYMMETRIC = 8,
    CSSM_ALGCLASS_KEYGEN = 9,
    CSSM_ALGCLASS_DERIVEKEY = 10,
};

pub const anon10431 = enum(u32) {
    CSSM_ATTRIBUTE_DATA_NONE = 0,
    CSSM_ATTRIBUTE_DATA_UINT32 = 268435456,
    CSSM_ATTRIBUTE_DATA_CSSM_DATA = 536870912,
    CSSM_ATTRIBUTE_DATA_CRYPTO_DATA = 805306368,
    CSSM_ATTRIBUTE_DATA_KEY = 1073741824,
    CSSM_ATTRIBUTE_DATA_STRING = 1342177280,
    CSSM_ATTRIBUTE_DATA_DATE = 1610612736,
    CSSM_ATTRIBUTE_DATA_RANGE = 1879048192,
    CSSM_ATTRIBUTE_DATA_ACCESS_CREDENTIALS = -2147483648,
    CSSM_ATTRIBUTE_DATA_VERSION = 16777216,
    CSSM_ATTRIBUTE_DATA_DL_DB_HANDLE = 33554432,
    CSSM_ATTRIBUTE_DATA_KR_PROFILE = 50331648,
    CSSM_ATTRIBUTE_TYPE_MASK = -16777216,
};

pub const CSSM_ATTRIBUTE_TYPE = uint32;

pub const anon10601 = enum(u32) {
    CSSM_ATTRIBUTE_NONE = 0,
    CSSM_ATTRIBUTE_CUSTOM = 536870913,
    CSSM_ATTRIBUTE_DESCRIPTION = 1342177282,
    CSSM_ATTRIBUTE_KEY = 1073741827,
    CSSM_ATTRIBUTE_INIT_VECTOR = 536870916,
    CSSM_ATTRIBUTE_SALT = 536870917,
    CSSM_ATTRIBUTE_PADDING = 268435462,
    CSSM_ATTRIBUTE_RANDOM = 536870919,
    CSSM_ATTRIBUTE_SEED = 805306376,
    CSSM_ATTRIBUTE_PASSPHRASE = 805306377,
    CSSM_ATTRIBUTE_KEY_LENGTH = 268435466,
    CSSM_ATTRIBUTE_KEY_LENGTH_RANGE = 1879048203,
    CSSM_ATTRIBUTE_BLOCK_SIZE = 268435468,
    CSSM_ATTRIBUTE_OUTPUT_SIZE = 268435469,
    CSSM_ATTRIBUTE_ROUNDS = 268435470,
    CSSM_ATTRIBUTE_IV_SIZE = 268435471,
    CSSM_ATTRIBUTE_ALG_PARAMS = 536870928,
    CSSM_ATTRIBUTE_LABEL = 536870929,
    CSSM_ATTRIBUTE_KEY_TYPE = 268435474,
    CSSM_ATTRIBUTE_MODE = 268435475,
    CSSM_ATTRIBUTE_EFFECTIVE_BITS = 268435476,
    CSSM_ATTRIBUTE_START_DATE = 1610612757,
    CSSM_ATTRIBUTE_END_DATE = 1610612758,
    CSSM_ATTRIBUTE_KEYUSAGE = 268435479,
    CSSM_ATTRIBUTE_KEYATTR = 268435480,
    CSSM_ATTRIBUTE_VERSION = 16777241,
    CSSM_ATTRIBUTE_PRIME = 536870938,
    CSSM_ATTRIBUTE_BASE = 536870939,
    CSSM_ATTRIBUTE_SUBPRIME = 536870940,
    CSSM_ATTRIBUTE_ALG_ID = 268435485,
    CSSM_ATTRIBUTE_ITERATION_COUNT = 268435486,
    CSSM_ATTRIBUTE_ROUNDS_RANGE = 1879048223,
    CSSM_ATTRIBUTE_KRPROFILE_LOCAL = 50331680,
    CSSM_ATTRIBUTE_KRPROFILE_REMOTE = 50331681,
    CSSM_ATTRIBUTE_CSP_HANDLE = 268435490,
    CSSM_ATTRIBUTE_DL_DB_HANDLE = 33554467,
    CSSM_ATTRIBUTE_ACCESS_CREDENTIALS = -2147483612,
    CSSM_ATTRIBUTE_PUBLIC_KEY_FORMAT = 268435493,
    CSSM_ATTRIBUTE_PRIVATE_KEY_FORMAT = 268435494,
    CSSM_ATTRIBUTE_SYMMETRIC_KEY_FORMAT = 268435495,
    CSSM_ATTRIBUTE_WRAPPED_KEY_FORMAT = 268435496,
};

pub const CSSM_PADDING = uint32;

pub const anon11051 = enum(u32) {
    CSSM_PADDING_NONE = 0,
    CSSM_PADDING_CUSTOM = 1,
    CSSM_PADDING_ZERO = 2,
    CSSM_PADDING_ONE = 3,
    CSSM_PADDING_ALTERNATE = 4,
    CSSM_PADDING_FF = 5,
    CSSM_PADDING_PKCS5 = 6,
    CSSM_PADDING_PKCS7 = 7,
    CSSM_PADDING_CIPHERSTEALING = 8,
    CSSM_PADDING_RANDOM = 9,
    CSSM_PADDING_PKCS1 = 10,
    CSSM_PADDING_SIGRAW = 11,
    CSSM_PADDING_VENDOR_DEFINED = -2147483648,
};

pub const CSSM_KEY_TYPE = CSSM_ALGORITHMS;

pub const cssm_context_attribute = extern struct {
    AttributeType: CSSM_ATTRIBUTE_TYPE,
    AttributeLength: uint32,
    Attribute: cssm_context_attribute_value,
};

pub const cssm_context_attribute_value = extern union {
    String: ?*i8,
    Uint32: uint32,
    AccessCredentials: CSSM_ACCESS_CREDENTIALS_PTR,
    Key: CSSM_KEY_PTR,
    Data: CSSM_DATA_PTR,
    Padding: CSSM_PADDING,
    Date: CSSM_DATE_PTR,
    Range: CSSM_RANGE_PTR,
    CryptoData: CSSM_CRYPTO_DATA_PTR,
    Version: CSSM_VERSION_PTR,
    DLDBHandle: CSSM_DL_DB_HANDLE_PTR,
    KRProfile: ?*cssm_kr_profile,
};

pub const cssm_kr_profile = extern struct {
    UserName: CSSM_KR_NAME,
    UserCertificate: CSSM_CERTGROUP_PTR,
    KRSCertChain: CSSM_CERTGROUP_PTR,
    LE_KRANum: uint8,
    LE_KRACertChainList: CSSM_CERTGROUP_PTR,
    ENT_KRANum: uint8,
    ENT_KRACertChainList: CSSM_CERTGROUP_PTR,
    INDIV_KRANum: uint8,
    INDIV_KRACertChainList: CSSM_CERTGROUP_PTR,
    INDIV_AuthenticationInfo: CSSM_DATA_PTR,
    KRSPFlags: uint32,
    KRSPExtensions: CSSM_DATA_PTR,
};

pub const CSSM_CONTEXT_ATTRIBUTE_PTR = ?*cssm_context_attribute;

pub const cssm_context = extern struct {
    ContextType: CSSM_CONTEXT_TYPE,
    AlgorithmType: CSSM_ALGORITHMS,
    NumberOfAttributes: uint32,
    ContextAttributes: CSSM_CONTEXT_ATTRIBUTE_PTR,
    CSPHandle: CSSM_CSP_HANDLE,
    Privileged: CSSM_BOOL,
    EncryptionProhibited: uint32,
    WorkFactor: uint32,
    Reserved: uint32,
};

pub const CSSM_CONTEXT_PTR = ?*cssm_context;

pub const CSSM_SC_FLAGS = uint32;

pub const anon11581 = enum(u32) {
    CSSM_CSP_TOK_RNG = 1,
    CSSM_CSP_TOK_CLOCK_EXISTS = 64,
};

pub const CSSM_CSP_READER_FLAGS = uint32;

pub const anon11641 = enum(u32) {
    CSSM_CSP_RDR_TOKENPRESENT = 1,
    CSSM_CSP_RDR_EXISTS = 2,
    CSSM_CSP_RDR_HW = 4,
};

pub const CSSM_CSP_FLAGS = uint32;

pub const anon11751 = enum(u32) {
    CSSM_CSP_TOK_WRITE_PROTECTED = 2,
    CSSM_CSP_TOK_LOGIN_REQUIRED = 4,
    CSSM_CSP_TOK_USER_PIN_INITIALIZED = 8,
    CSSM_CSP_TOK_PROT_AUTHENTICATION = 256,
    CSSM_CSP_TOK_USER_PIN_EXPIRED = 1048576,
    CSSM_CSP_TOK_SESSION_KEY_PASSWORD = 2097152,
    CSSM_CSP_TOK_PRIVATE_KEY_PASSWORD = 4194304,
    CSSM_CSP_STORES_PRIVATE_KEYS = 16777216,
    CSSM_CSP_STORES_PUBLIC_KEYS = 33554432,
    CSSM_CSP_STORES_SESSION_KEYS = 67108864,
    CSSM_CSP_STORES_CERTIFICATES = 134217728,
    CSSM_CSP_STORES_GENERIC = 268435456,
};

pub const CSSM_PKCS_OAEP_MGF = uint32;

pub const anon11911 = enum(u32) {
    CSSM_PKCS_OAEP_MGF_NONE = 0,
    CSSM_PKCS_OAEP_MGF1_SHA1 = 1,
    CSSM_PKCS_OAEP_MGF1_MD5 = 2,
};

pub const CSSM_PKCS_OAEP_PSOURCE = uint32;

pub const anon11981 = enum(u32) {
    CSSM_PKCS_OAEP_PSOURCE_NONE = 0,
    CSSM_PKCS_OAEP_PSOURCE_Pspecified = 1,
};

pub const cssm_pkcs1_oaep_params = extern struct {
    HashAlgorithm: uint32,
    HashParams: Asn1Item,
    MGF: CSSM_PKCS_OAEP_MGF,
    MGFParams: Asn1Item,
    PSource: CSSM_PKCS_OAEP_PSOURCE,
    PSourceParams: Asn1Item,
};

pub const CSSM_PKCS1_OAEP_PARAMS_PTR = ?*cssm_pkcs1_oaep_params;

pub const cssm_csp_operational_statistics = extern struct {
    UserAuthenticated: CSSM_BOOL,
    DeviceFlags: CSSM_CSP_FLAGS,
    TokenMaxSessionCount: uint32,
    TokenOpenedSessionCount: uint32,
    TokenMaxRWSessionCount: uint32,
    TokenOpenedRWSessionCount: uint32,
    TokenTotalPublicMem: uint32,
    TokenFreePublicMem: uint32,
    TokenTotalPrivateMem: uint32,
    TokenFreePrivateMem: uint32,
};

pub const CSSM_CSP_OPERATIONAL_STATISTICS_PTR = ?*cssm_csp_operational_statistics;

pub const anon12281 = enum(i32) {
    CSSM_VALUE_NOT_AVAILABLE = -1,
};

pub const cssm_pkcs5_pbkdf1_params = extern struct {
    Passphrase: Asn1Item,
    InitVector: Asn1Item,
};

pub const CSSM_PKCS5_PBKDF1_PARAMS_PTR = ?*cssm_pkcs5_pbkdf1_params;

pub const CSSM_PKCS5_PBKDF2_PRF = uint32;

pub const anon12381 = enum(u32) {
    CSSM_PKCS5_PBKDF2_PRF_HMAC_SHA1 = 0,
};

pub const cssm_pkcs5_pbkdf2_params = extern struct {
    Passphrase: Asn1Item,
    PseudoRandomFunction: CSSM_PKCS5_PBKDF2_PRF,
};

pub const CSSM_PKCS5_PBKDF2_PARAMS_PTR = ?*cssm_pkcs5_pbkdf2_params;

pub const cssm_kea_derive_params = extern struct {
    Rb: Asn1Item,
    Yb: Asn1Item,
};

pub const CSSM_KEA_DERIVE_PARAMS_PTR = ?*cssm_kea_derive_params;

pub const cssm_tp_authority_id = extern struct {
    AuthorityCert: ?*Asn1Item,
    AuthorityLocation: CSSM_NET_ADDRESS_PTR,
};

pub const CSSM_TP_AUTHORITY_ID_PTR = ?*cssm_tp_authority_id;

pub const CSSM_TP_AUTHORITY_REQUEST_TYPE = uint32;

pub const CSSM_TP_AUTHORITY_REQUEST_TYPE_PTR = ?*uint32;

pub const anon12611 = enum(u32) {
    CSSM_TP_AUTHORITY_REQUEST_CERTISSUE = 1,
    CSSM_TP_AUTHORITY_REQUEST_CERTREVOKE = 2,
    CSSM_TP_AUTHORITY_REQUEST_CERTSUSPEND = 3,
    CSSM_TP_AUTHORITY_REQUEST_CERTRESUME = 4,
    CSSM_TP_AUTHORITY_REQUEST_CERTVERIFY = 5,
    CSSM_TP_AUTHORITY_REQUEST_CERTNOTARIZE = 6,
    CSSM_TP_AUTHORITY_REQUEST_CERTUSERECOVER = 7,
    CSSM_TP_AUTHORITY_REQUEST_CRLISSUE = 256,
};

pub const CSSM_TP_VERIFICATION_RESULTS_CALLBACK = ?*const fn(CSSM_MODULE_HANDLE, ?*anyopaque, CSSM_DATA_PTR) callconv(.C) CSSM_RETURN;

pub const CSSM_OID_PTR = ?*Asn1Oid;

pub const cssm_field = extern struct {
    FieldOid: Asn1Oid,
    FieldValue: Asn1Item,
};

pub const CSSM_FIELD_PTR = ?*cssm_field;

pub const cssm_tp_policyinfo = extern struct {
    NumberOfPolicyIds: uint32,
    PolicyIds: CSSM_FIELD_PTR,
    PolicyControl: ?*anyopaque,
};

pub const CSSM_TP_POLICYINFO_PTR = ?*cssm_tp_policyinfo;

pub const CSSM_TP_SERVICES = uint32;

pub const anon12941 = enum(u32) {
    CSSM_TP_KEY_ARCHIVE = 1,
    CSSM_TP_CERT_PUBLISH = 2,
    CSSM_TP_CERT_NOTIFY_RENEW = 4,
    CSSM_TP_CERT_DIR_UPDATE = 8,
    CSSM_TP_CRL_DISTRIBUTE = 16,
};

pub const CSSM_TP_ACTION = uint32;

pub const anon13041 = enum(u32) {
    CSSM_TP_ACTION_DEFAULT = 0,
};

pub const CSSM_TP_STOP_ON = uint32;

pub const anon13091 = enum(u32) {
    CSSM_TP_STOP_ON_POLICY = 0,
    CSSM_TP_STOP_ON_NONE = 1,
    CSSM_TP_STOP_ON_FIRST_PASS = 2,
    CSSM_TP_STOP_ON_FIRST_FAIL = 3,
};

pub const CSSM_TIMESTRING = ?*i8;

pub const cssm_dl_db_list = extern struct {
    NumHandles: uint32,
    DLDBHandle: CSSM_DL_DB_HANDLE_PTR,
};

pub const CSSM_DL_DB_LIST_PTR = ?*cssm_dl_db_list;

pub const cssm_tp_callerauth_context = extern struct {
    Policy: CSSM_TP_POLICYINFO,
    VerifyTime: CSSM_TIMESTRING,
    VerificationAbortOn: CSSM_TP_STOP_ON,
    CallbackWithVerifiedCert: CSSM_TP_VERIFICATION_RESULTS_CALLBACK,
    NumberOfAnchorCerts: uint32,
    AnchorCerts: CSSM_DATA_PTR,
    DBList: CSSM_DL_DB_LIST_PTR,
    CallerCredentials: CSSM_ACCESS_CREDENTIALS_PTR,
};

pub const CSSM_TP_CALLERAUTH_CONTEXT_PTR = ?*cssm_tp_callerauth_context;

pub const CSSM_CRL_PARSE_FORMAT = uint32;

pub const CSSM_CRL_PARSE_FORMAT_PTR = ?*uint32;

pub const anon13371 = enum(u32) {
    CSSM_CRL_PARSE_FORMAT_NONE = 0,
    CSSM_CRL_PARSE_FORMAT_CUSTOM = 1,
    CSSM_CRL_PARSE_FORMAT_SEXPR = 2,
    CSSM_CRL_PARSE_FORMAT_COMPLEX = 3,
    CSSM_CRL_PARSE_FORMAT_OID_NAMED = 4,
    CSSM_CRL_PARSE_FORMAT_TUPLE = 5,
    CSSM_CRL_PARSE_FORMAT_MULTIPLE = 32766,
    CSSM_CRL_PARSE_FORMAT_LAST = 32767,
    CSSM_CL_CUSTOM_CRL_PARSE_FORMAT = 32768,
};

pub const CSSM_CRL_TYPE = uint32;

pub const CSSM_CRL_TYPE_PTR = ?*uint32;

pub const anon13541 = enum(u32) {
    CSSM_CRL_TYPE_UNKNOWN = 0,
    CSSM_CRL_TYPE_X_509v1 = 1,
    CSSM_CRL_TYPE_X_509v2 = 2,
    CSSM_CRL_TYPE_SPKI = 3,
    CSSM_CRL_TYPE_MULTIPLE = 32766,
};

pub const CSSM_CRL_ENCODING = uint32;

pub const CSSM_CRL_ENCODING_PTR = ?*uint32;

pub const anon13631 = enum(u32) {
    CSSM_CRL_ENCODING_UNKNOWN = 0,
    CSSM_CRL_ENCODING_CUSTOM = 1,
    CSSM_CRL_ENCODING_BER = 2,
    CSSM_CRL_ENCODING_DER = 3,
    CSSM_CRL_ENCODING_BLOOM = 4,
    CSSM_CRL_ENCODING_SEXPR = 5,
    CSSM_CRL_ENCODING_MULTIPLE = 32766,
};

pub const cssm_encoded_crl = extern struct {
    CrlType: CSSM_CRL_TYPE,
    CrlEncoding: CSSM_CRL_ENCODING,
    CrlBlob: Asn1Item,
};

pub const CSSM_ENCODED_CRL_PTR = ?*cssm_encoded_crl;

pub const cssm_parsed_crl = extern struct {
    CrlType: CSSM_CRL_TYPE,
    ParsedCrlFormat: CSSM_CRL_PARSE_FORMAT,
    ParsedCrl: ?*anyopaque,
};

pub const CSSM_PARSED_CRL_PTR = ?*cssm_parsed_crl;

pub const cssm_crl_pair = extern struct {
    EncodedCrl: CSSM_ENCODED_CRL,
    ParsedCrl: CSSM_PARSED_CRL,
};

pub const CSSM_CRL_PAIR_PTR = ?*cssm_crl_pair;

pub const CSSM_CRLGROUP_TYPE = uint32;

pub const CSSM_CRLGROUP_TYPE_PTR = ?*uint32;

pub const anon13931 = enum(u32) {
    CSSM_CRLGROUP_DATA = 0,
    CSSM_CRLGROUP_ENCODED_CRL = 1,
    CSSM_CRLGROUP_PARSED_CRL = 2,
    CSSM_CRLGROUP_CRL_PAIR = 3,
};

pub const cssm_crlgroup = extern struct {
    CrlType: CSSM_CRL_TYPE,
    CrlEncoding: CSSM_CRL_ENCODING,
    NumberOfCrls: uint32,
    GroupCrlList: anon14045,
    CrlGroupType: CSSM_CRLGROUP_TYPE,
};

pub const anon14045 = extern union {
    CrlList: CSSM_DATA_PTR,
    EncodedCrlList: CSSM_ENCODED_CRL_PTR,
    ParsedCrlList: CSSM_PARSED_CRL_PTR,
    PairCrlList: CSSM_CRL_PAIR_PTR,
};

pub const CSSM_CRLGROUP_PTR = ?*cssm_crlgroup;

pub const cssm_fieldgroup = extern struct {
    NumberOfFields: i32,
    Fields: CSSM_FIELD_PTR,
};

pub const CSSM_FIELDGROUP_PTR = ?*cssm_fieldgroup;

pub const CSSM_EVIDENCE_FORM = uint32;

pub const anon14191 = enum(u32) {
    CSSM_EVIDENCE_FORM_UNSPECIFIC = 0,
    CSSM_EVIDENCE_FORM_CERT = 1,
    CSSM_EVIDENCE_FORM_CRL = 2,
    CSSM_EVIDENCE_FORM_CERT_ID = 3,
    CSSM_EVIDENCE_FORM_CRL_ID = 4,
    CSSM_EVIDENCE_FORM_VERIFIER_TIME = 5,
    CSSM_EVIDENCE_FORM_CRL_THISTIME = 6,
    CSSM_EVIDENCE_FORM_CRL_NEXTTIME = 7,
    CSSM_EVIDENCE_FORM_POLICYINFO = 8,
    CSSM_EVIDENCE_FORM_TUPLEGROUP = 9,
};

pub const cssm_evidence = extern struct {
    EvidenceForm: CSSM_EVIDENCE_FORM,
    Evidence: ?*anyopaque,
};

pub const CSSM_EVIDENCE_PTR = ?*cssm_evidence;

pub const cssm_tp_verify_context = extern struct {
    Action: CSSM_TP_ACTION,
    ActionData: Asn1Item,
    Crls: CSSM_CRLGROUP,
    Cred: CSSM_TP_CALLERAUTH_CONTEXT_PTR,
};

pub const CSSM_TP_VERIFY_CONTEXT_PTR = ?*cssm_tp_verify_context;

pub const cssm_tp_verify_context_result = extern struct {
    NumberOfEvidences: uint32,
    Evidence: CSSM_EVIDENCE_PTR,
};

pub const CSSM_TP_VERIFY_CONTEXT_RESULT_PTR = ?*cssm_tp_verify_context_result;

pub const cssm_tp_request_set = extern struct {
    NumberOfRequests: uint32,
    Requests: ?*anyopaque,
};

pub const CSSM_TP_REQUEST_SET_PTR = ?*cssm_tp_request_set;

pub const cssm_tp_result_set = extern struct {
    NumberOfResults: uint32,
    Results: ?*anyopaque,
};

pub const CSSM_TP_RESULT_SET_PTR = ?*cssm_tp_result_set;

pub const CSSM_TP_CONFIRM_STATUS = uint32;

pub const CSSM_TP_CONFIRM_STATUS_PTR = ?*uint32;

pub const anon14601 = enum(u32) {
    CSSM_TP_CONFIRM_STATUS_UNKNOWN = 0,
    CSSM_TP_CONFIRM_ACCEPT = 1,
    CSSM_TP_CONFIRM_REJECT = 2,
};

pub const cssm_tp_confirm_response = extern struct {
    NumberOfResponses: uint32,
    Responses: CSSM_TP_CONFIRM_STATUS_PTR,
};

pub const CSSM_TP_CONFIRM_RESPONSE_PTR = ?*cssm_tp_confirm_response;

pub const anon14761 = enum(i32) {
    CSSM_ESTIMATED_TIME_UNKNOWN = -1,
};

pub const anon14801 = enum(i32) {
    CSSM_ELAPSED_TIME_UNKNOWN = -1,
    CSSM_ELAPSED_TIME_COMPLETE = -2,
};

pub const cssm_tp_certissue_input = extern struct {
    CSPSubserviceUid: CSSM_SUBSERVICE_UID,
    CLHandle: CSSM_CL_HANDLE,
    NumberOfTemplateFields: uint32,
    SubjectCertFields: CSSM_FIELD_PTR,
    MoreServiceRequests: CSSM_TP_SERVICES,
    NumberOfServiceControls: uint32,
    ServiceControls: CSSM_FIELD_PTR,
    UserCredentials: CSSM_ACCESS_CREDENTIALS_PTR,
};

pub const CSSM_TP_CERTISSUE_INPUT_PTR = ?*cssm_tp_certissue_input;

pub const CSSM_TP_CERTISSUE_STATUS = uint32;

pub const anon14971 = enum(u32) {
    CSSM_TP_CERTISSUE_STATUS_UNKNOWN = 0,
    CSSM_TP_CERTISSUE_OK = 1,
    CSSM_TP_CERTISSUE_OKWITHCERTMODS = 2,
    CSSM_TP_CERTISSUE_OKWITHSERVICEMODS = 3,
    CSSM_TP_CERTISSUE_REJECTED = 4,
    CSSM_TP_CERTISSUE_NOT_AUTHORIZED = 5,
    CSSM_TP_CERTISSUE_WILL_BE_REVOKED = 6,
};

pub const cssm_tp_certissue_output = extern struct {
    IssueStatus: CSSM_TP_CERTISSUE_STATUS,
    CertGroup: CSSM_CERTGROUP_PTR,
    PerformedServiceRequests: CSSM_TP_SERVICES,
};

pub const CSSM_TP_CERTISSUE_OUTPUT_PTR = ?*cssm_tp_certissue_output;

pub const CSSM_TP_CERTCHANGE_ACTION = uint32;

pub const anon15271 = enum(u32) {
    CSSM_TP_CERTCHANGE_NONE = 0,
    CSSM_TP_CERTCHANGE_REVOKE = 1,
    CSSM_TP_CERTCHANGE_HOLD = 2,
    CSSM_TP_CERTCHANGE_RELEASE = 3,
};

pub const CSSM_TP_CERTCHANGE_REASON = uint32;

pub const anon15541 = enum(u32) {
    CSSM_TP_CERTCHANGE_REASON_UNKNOWN = 0,
    CSSM_TP_CERTCHANGE_REASON_KEYCOMPROMISE = 1,
    CSSM_TP_CERTCHANGE_REASON_CACOMPROMISE = 2,
    CSSM_TP_CERTCHANGE_REASON_CEASEOPERATION = 3,
    CSSM_TP_CERTCHANGE_REASON_AFFILIATIONCHANGE = 4,
    CSSM_TP_CERTCHANGE_REASON_SUPERCEDED = 5,
    CSSM_TP_CERTCHANGE_REASON_SUSPECTEDCOMPROMISE = 6,
    CSSM_TP_CERTCHANGE_REASON_HOLDRELEASE = 7,
};

pub const cssm_tp_certchange_input = extern struct {
    Action: CSSM_TP_CERTCHANGE_ACTION,
    Reason: CSSM_TP_CERTCHANGE_REASON,
    CLHandle: CSSM_CL_HANDLE,
    Cert: CSSM_DATA_PTR,
    ChangeInfo: CSSM_FIELD_PTR,
    StartTime: CSSM_TIMESTRING,
    CallerCredentials: CSSM_ACCESS_CREDENTIALS_PTR,
};

pub const CSSM_TP_CERTCHANGE_INPUT_PTR = ?*cssm_tp_certchange_input;

pub const CSSM_TP_CERTCHANGE_STATUS = uint32;

pub const anon15881 = enum(u32) {
    CSSM_TP_CERTCHANGE_STATUS_UNKNOWN = 0,
    CSSM_TP_CERTCHANGE_OK = 1,
    CSSM_TP_CERTCHANGE_OKWITHNEWTIME = 2,
    CSSM_TP_CERTCHANGE_WRONGCA = 3,
    CSSM_TP_CERTCHANGE_REJECTED = 4,
    CSSM_TP_CERTCHANGE_NOT_AUTHORIZED = 5,
};

pub const cssm_tp_certchange_output = extern struct {
    ActionStatus: CSSM_TP_CERTCHANGE_STATUS,
    RevokeInfo: CSSM_FIELD,
};

pub const CSSM_TP_CERTCHANGE_OUTPUT_PTR = ?*cssm_tp_certchange_output;

pub const cssm_tp_certverify_input = extern struct {
    CLHandle: CSSM_CL_HANDLE,
    Cert: CSSM_DATA_PTR,
    VerifyContext: CSSM_TP_VERIFY_CONTEXT_PTR,
};

pub const CSSM_TP_CERTVERIFY_INPUT_PTR = ?*cssm_tp_certverify_input;

pub const CSSM_TP_CERTVERIFY_STATUS = uint32;

pub const anon16221 = enum(u32) {
    CSSM_TP_CERTVERIFY_UNKNOWN = 0,
    CSSM_TP_CERTVERIFY_VALID = 1,
    CSSM_TP_CERTVERIFY_INVALID = 2,
    CSSM_TP_CERTVERIFY_REVOKED = 3,
    CSSM_TP_CERTVERIFY_SUSPENDED = 4,
    CSSM_TP_CERTVERIFY_EXPIRED = 5,
    CSSM_TP_CERTVERIFY_NOT_VALID_YET = 6,
    CSSM_TP_CERTVERIFY_INVALID_AUTHORITY = 7,
    CSSM_TP_CERTVERIFY_INVALID_SIGNATURE = 8,
    CSSM_TP_CERTVERIFY_INVALID_CERT_VALUE = 9,
    CSSM_TP_CERTVERIFY_INVALID_CERTGROUP = 10,
    CSSM_TP_CERTVERIFY_INVALID_POLICY = 11,
    CSSM_TP_CERTVERIFY_INVALID_POLICY_IDS = 12,
    CSSM_TP_CERTVERIFY_INVALID_BASIC_CONSTRAINTS = 13,
    CSSM_TP_CERTVERIFY_INVALID_CRL_DIST_PT = 14,
    CSSM_TP_CERTVERIFY_INVALID_NAME_TREE = 15,
    CSSM_TP_CERTVERIFY_UNKNOWN_CRITICAL_EXT = 16,
};

pub const cssm_tp_certverify_output = extern struct {
    VerifyStatus: CSSM_TP_CERTVERIFY_STATUS,
    NumberOfEvidence: uint32,
    Evidence: CSSM_EVIDENCE_PTR,
};

pub const CSSM_TP_CERTVERIFY_OUTPUT_PTR = ?*cssm_tp_certverify_output;

pub const cssm_tp_certnotarize_input = extern struct {
    CLHandle: CSSM_CL_HANDLE,
    NumberOfFields: uint32,
    MoreFields: CSSM_FIELD_PTR,
    SignScope: CSSM_FIELD_PTR,
    ScopeSize: uint32,
    MoreServiceRequests: CSSM_TP_SERVICES,
    NumberOfServiceControls: uint32,
    ServiceControls: CSSM_FIELD_PTR,
    UserCredentials: CSSM_ACCESS_CREDENTIALS_PTR,
};

pub const CSSM_TP_CERTNOTARIZE_INPUT_PTR = ?*cssm_tp_certnotarize_input;

pub const CSSM_TP_CERTNOTARIZE_STATUS = uint32;

pub const anon16611 = enum(u32) {
    CSSM_TP_CERTNOTARIZE_STATUS_UNKNOWN = 0,
    CSSM_TP_CERTNOTARIZE_OK = 1,
    CSSM_TP_CERTNOTARIZE_OKWITHOUTFIELDS = 2,
    CSSM_TP_CERTNOTARIZE_OKWITHSERVICEMODS = 3,
    CSSM_TP_CERTNOTARIZE_REJECTED = 4,
    CSSM_TP_CERTNOTARIZE_NOT_AUTHORIZED = 5,
};

pub const cssm_tp_certnotarize_output = extern struct {
    NotarizeStatus: CSSM_TP_CERTNOTARIZE_STATUS,
    NotarizedCertGroup: CSSM_CERTGROUP_PTR,
    PerformedServiceRequests: CSSM_TP_SERVICES,
};

pub const CSSM_TP_CERTNOTARIZE_OUTPUT_PTR = ?*cssm_tp_certnotarize_output;

pub const cssm_tp_certreclaim_input = extern struct {
    CLHandle: CSSM_CL_HANDLE,
    NumberOfSelectionFields: uint32,
    SelectionFields: CSSM_FIELD_PTR,
    UserCredentials: CSSM_ACCESS_CREDENTIALS_PTR,
};

pub const CSSM_TP_CERTRECLAIM_INPUT_PTR = ?*cssm_tp_certreclaim_input;

pub const CSSM_TP_CERTRECLAIM_STATUS = uint32;

pub const anon16981 = enum(u32) {
    CSSM_TP_CERTRECLAIM_STATUS_UNKNOWN = 0,
    CSSM_TP_CERTRECLAIM_OK = 1,
    CSSM_TP_CERTRECLAIM_NOMATCH = 2,
    CSSM_TP_CERTRECLAIM_REJECTED = 3,
    CSSM_TP_CERTRECLAIM_NOT_AUTHORIZED = 4,
};

pub const cssm_tp_certreclaim_output = extern struct {
    ReclaimStatus: CSSM_TP_CERTRECLAIM_STATUS,
    ReclaimedCertGroup: CSSM_CERTGROUP_PTR,
    KeyCacheHandle: CSSM_LONG_HANDLE,
};

pub const CSSM_TP_CERTRECLAIM_OUTPUT_PTR = ?*cssm_tp_certreclaim_output;

pub const cssm_tp_crlissue_input = extern struct {
    CLHandle: CSSM_CL_HANDLE,
    CrlIdentifier: uint32,
    CrlThisTime: CSSM_TIMESTRING,
    PolicyIdentifier: CSSM_FIELD_PTR,
    CallerCredentials: CSSM_ACCESS_CREDENTIALS_PTR,
};

pub const CSSM_TP_CRLISSUE_INPUT_PTR = ?*cssm_tp_crlissue_input;

pub const CSSM_TP_CRLISSUE_STATUS = uint32;

pub const anon17331 = enum(u32) {
    CSSM_TP_CRLISSUE_STATUS_UNKNOWN = 0,
    CSSM_TP_CRLISSUE_OK = 1,
    CSSM_TP_CRLISSUE_NOT_CURRENT = 2,
    CSSM_TP_CRLISSUE_INVALID_DOMAIN = 3,
    CSSM_TP_CRLISSUE_UNKNOWN_IDENTIFIER = 4,
    CSSM_TP_CRLISSUE_REJECTED = 5,
    CSSM_TP_CRLISSUE_NOT_AUTHORIZED = 6,
};

pub const cssm_tp_crlissue_output = extern struct {
    IssueStatus: CSSM_TP_CRLISSUE_STATUS,
    Crl: CSSM_ENCODED_CRL_PTR,
    CrlNextTime: CSSM_TIMESTRING,
};

pub const CSSM_TP_CRLISSUE_OUTPUT_PTR = ?*cssm_tp_crlissue_output;

pub const CSSM_TP_FORM_TYPE = uint32;

pub const anon17731 = enum(u32) {
    CSSM_TP_FORM_TYPE_GENERIC = 0,
    CSSM_TP_FORM_TYPE_REGISTRATION = 1,
};

pub const CSSM_CL_TEMPLATE_TYPE = uint32;

pub const anon17811 = enum(u32) {
    CSSM_CL_TEMPLATE_INTERMEDIATE_CERT = 1,
    CSSM_CL_TEMPLATE_PKIX_CERTTEMPLATE = 2,
};

pub const CSSM_CERT_BUNDLE_TYPE = uint32;

pub const anon17901 = enum(u32) {
    CSSM_CERT_BUNDLE_UNKNOWN = 0,
    CSSM_CERT_BUNDLE_CUSTOM = 1,
    CSSM_CERT_BUNDLE_PKCS7_SIGNED_DATA = 2,
    CSSM_CERT_BUNDLE_PKCS7_SIGNED_ENVELOPED_DATA = 3,
    CSSM_CERT_BUNDLE_PKCS12 = 4,
    CSSM_CERT_BUNDLE_PFX = 5,
    CSSM_CERT_BUNDLE_SPKI_SEQUENCE = 6,
    CSSM_CERT_BUNDLE_PGP_KEYRING = 7,
    CSSM_CERT_BUNDLE_LAST = 32767,
    CSSM_CL_CUSTOM_CERT_BUNDLE_TYPE = 32768,
};

pub const CSSM_CERT_BUNDLE_ENCODING = uint32;

pub const anon18071 = enum(u32) {
    CSSM_CERT_BUNDLE_ENCODING_UNKNOWN = 0,
    CSSM_CERT_BUNDLE_ENCODING_CUSTOM = 1,
    CSSM_CERT_BUNDLE_ENCODING_BER = 2,
    CSSM_CERT_BUNDLE_ENCODING_DER = 3,
    CSSM_CERT_BUNDLE_ENCODING_SEXPR = 4,
    CSSM_CERT_BUNDLE_ENCODING_PGP = 5,
};

pub const cssm_cert_bundle_header = extern struct {
    BundleType: CSSM_CERT_BUNDLE_TYPE,
    BundleEncoding: CSSM_CERT_BUNDLE_ENCODING,
};

pub const CSSM_CERT_BUNDLE_HEADER_PTR = ?*cssm_cert_bundle_header;

pub const cssm_cert_bundle = extern struct {
    BundleHeader: CSSM_CERT_BUNDLE_HEADER,
    Bundle: Asn1Item,
};

pub const CSSM_CERT_BUNDLE_PTR = ?*cssm_cert_bundle;

pub const anon18261 = enum(u32) {
    CSSM_FIELDVALUE_COMPLEX_DATA_TYPE = -1,
};

pub const CSSM_DB_ATTRIBUTE_NAME_FORMAT = uint32;

pub const CSSM_DB_ATTRIBUTE_NAME_FORMAT_PTR = ?*uint32;

pub const anon18331 = enum(u32) {
    CSSM_DB_ATTRIBUTE_NAME_AS_STRING = 0,
    CSSM_DB_ATTRIBUTE_NAME_AS_OID = 1,
    CSSM_DB_ATTRIBUTE_NAME_AS_INTEGER = 2,
};

pub const CSSM_DB_ATTRIBUTE_FORMAT = uint32;

pub const CSSM_DB_ATTRIBUTE_FORMAT_PTR = ?*uint32;

pub const anon18401 = enum(u32) {
    CSSM_DB_ATTRIBUTE_FORMAT_STRING = 0,
    CSSM_DB_ATTRIBUTE_FORMAT_SINT32 = 1,
    CSSM_DB_ATTRIBUTE_FORMAT_UINT32 = 2,
    CSSM_DB_ATTRIBUTE_FORMAT_BIG_NUM = 3,
    CSSM_DB_ATTRIBUTE_FORMAT_REAL = 4,
    CSSM_DB_ATTRIBUTE_FORMAT_TIME_DATE = 5,
    CSSM_DB_ATTRIBUTE_FORMAT_BLOB = 6,
    CSSM_DB_ATTRIBUTE_FORMAT_MULTI_UINT32 = 7,
    CSSM_DB_ATTRIBUTE_FORMAT_COMPLEX = 8,
};

pub const cssm_db_attribute_info = extern struct {
    AttributeNameFormat: CSSM_DB_ATTRIBUTE_NAME_FORMAT,
    Label: cssm_db_attribute_label,
    AttributeFormat: CSSM_DB_ATTRIBUTE_FORMAT,
};

pub const cssm_db_attribute_label = extern union {
    AttributeName: ?*i8,
    AttributeOID: Asn1Oid,
    AttributeID: uint32,
};

pub const CSSM_DB_ATTRIBUTE_INFO_PTR = ?*cssm_db_attribute_info;

pub const cssm_db_attribute_data = extern struct {
    Info: CSSM_DB_ATTRIBUTE_INFO,
    NumberOfValues: uint32,
    Value: CSSM_DATA_PTR,
};

pub const CSSM_DB_ATTRIBUTE_DATA_PTR = ?*cssm_db_attribute_data;

pub const CSSM_DB_RECORDTYPE = uint32;

pub const anon18691 = enum(u32) {
    CSSM_DB_RECORDTYPE_SCHEMA_START = 0,
    CSSM_DB_RECORDTYPE_SCHEMA_END = 4,
    CSSM_DB_RECORDTYPE_OPEN_GROUP_START = 10,
    CSSM_DB_RECORDTYPE_OPEN_GROUP_END = 18,
    CSSM_DB_RECORDTYPE_APP_DEFINED_START = -2147483648,
    CSSM_DB_RECORDTYPE_APP_DEFINED_END = -1,
    CSSM_DL_DB_SCHEMA_INFO = 0,
    CSSM_DL_DB_SCHEMA_INDEXES = 1,
    CSSM_DL_DB_SCHEMA_ATTRIBUTES = 2,
    CSSM_DL_DB_SCHEMA_PARSING_MODULE = 3,
    CSSM_DL_DB_RECORD_ANY = 10,
    CSSM_DL_DB_RECORD_CERT = 11,
    CSSM_DL_DB_RECORD_CRL = 12,
    CSSM_DL_DB_RECORD_POLICY = 13,
    CSSM_DL_DB_RECORD_GENERIC = 14,
    CSSM_DL_DB_RECORD_PUBLIC_KEY = 15,
    CSSM_DL_DB_RECORD_PRIVATE_KEY = 16,
    CSSM_DL_DB_RECORD_SYMMETRIC_KEY = 17,
    CSSM_DL_DB_RECORD_ALL_KEYS = 18,
};

pub const anon18961 = enum(u32) {
    CSSM_DB_CERT_USE_TRUSTED = 1,
    CSSM_DB_CERT_USE_SYSTEM = 2,
    CSSM_DB_CERT_USE_OWNER = 4,
    CSSM_DB_CERT_USE_REVOKED = 8,
    CSSM_DB_CERT_USE_SIGNING = 16,
    CSSM_DB_CERT_USE_PRIVACY = 32,
};

pub const cssm_db_record_attribute_info = extern struct {
    DataRecordType: CSSM_DB_RECORDTYPE,
    NumberOfAttributes: uint32,
    AttributeInfo: CSSM_DB_ATTRIBUTE_INFO_PTR,
};

pub const CSSM_DB_RECORD_ATTRIBUTE_INFO_PTR = ?*cssm_db_record_attribute_info;

pub const cssm_db_record_attribute_data = extern struct {
    DataRecordType: CSSM_DB_RECORDTYPE,
    SemanticInformation: uint32,
    NumberOfAttributes: uint32,
    AttributeData: CSSM_DB_ATTRIBUTE_DATA_PTR,
};

pub const CSSM_DB_RECORD_ATTRIBUTE_DATA_PTR = ?*cssm_db_record_attribute_data;

pub const cssm_db_parsing_module_info = extern struct {
    RecordType: CSSM_DB_RECORDTYPE,
    ModuleSubserviceUid: CSSM_SUBSERVICE_UID,
};

pub const CSSM_DB_PARSING_MODULE_INFO_PTR = ?*cssm_db_parsing_module_info;

pub const CSSM_DB_INDEX_TYPE = uint32;

pub const anon19241 = enum(u32) {
    CSSM_DB_INDEX_UNIQUE = 0,
    CSSM_DB_INDEX_NONUNIQUE = 1,
};

pub const CSSM_DB_INDEXED_DATA_LOCATION = uint32;

pub const anon19301 = enum(u32) {
    CSSM_DB_INDEX_ON_UNKNOWN = 0,
    CSSM_DB_INDEX_ON_ATTRIBUTE = 1,
    CSSM_DB_INDEX_ON_RECORD = 2,
};

pub const cssm_db_index_info = extern struct {
    IndexType: CSSM_DB_INDEX_TYPE,
    IndexedDataLocation: CSSM_DB_INDEXED_DATA_LOCATION,
    Info: CSSM_DB_ATTRIBUTE_INFO,
};

pub const CSSM_DB_INDEX_INFO_PTR = ?*cssm_db_index_info;

pub const cssm_db_unique_record = extern struct {
    RecordLocator: CSSM_DB_INDEX_INFO,
    RecordIdentifier: Asn1Item,
};

pub const CSSM_DB_UNIQUE_RECORD_PTR = ?*cssm_db_unique_record;

pub const cssm_db_record_index_info = extern struct {
    DataRecordType: CSSM_DB_RECORDTYPE,
    NumberOfIndexes: uint32,
    IndexInfo: CSSM_DB_INDEX_INFO_PTR,
};

pub const CSSM_DB_RECORD_INDEX_INFO_PTR = ?*cssm_db_record_index_info;

pub const CSSM_DB_ACCESS_TYPE = uint32;

pub const CSSM_DB_ACCESS_TYPE_PTR = ?*uint32;

pub const anon19541 = enum(u32) {
    CSSM_DB_ACCESS_READ = 1,
    CSSM_DB_ACCESS_WRITE = 2,
    CSSM_DB_ACCESS_PRIVILEGED = 4,
};

pub const CSSM_DB_MODIFY_MODE = uint32;

pub const anon19611 = enum(u32) {
    CSSM_DB_MODIFY_ATTRIBUTE_NONE = 0,
    CSSM_DB_MODIFY_ATTRIBUTE_ADD = 1,
    CSSM_DB_MODIFY_ATTRIBUTE_DELETE = 2,
    CSSM_DB_MODIFY_ATTRIBUTE_REPLACE = 3,
};

pub const cssm_dbinfo = extern struct {
    NumberOfRecordTypes: uint32,
    DefaultParsingModules: CSSM_DB_PARSING_MODULE_INFO_PTR,
    RecordAttributeNames: CSSM_DB_RECORD_ATTRIBUTE_INFO_PTR,
    RecordIndexes: CSSM_DB_RECORD_INDEX_INFO_PTR,
    IsLocal: CSSM_BOOL,
    AccessPath: ?*i8,
    Reserved: ?*anyopaque,
};

pub const CSSM_DBINFO_PTR = ?*cssm_dbinfo;

pub const CSSM_DB_OPERATOR = uint32;

pub const CSSM_DB_OPERATOR_PTR = ?*uint32;

pub const anon19831 = enum(u32) {
    CSSM_DB_EQUAL = 0,
    CSSM_DB_NOT_EQUAL = 1,
    CSSM_DB_LESS_THAN = 2,
    CSSM_DB_GREATER_THAN = 3,
    CSSM_DB_CONTAINS = 4,
    CSSM_DB_CONTAINS_INITIAL_SUBSTRING = 5,
    CSSM_DB_CONTAINS_FINAL_SUBSTRING = 6,
};

pub const CSSM_DB_CONJUNCTIVE = uint32;

pub const CSSM_DB_CONJUNCTIVE_PTR = ?*uint32;

pub const anon19941 = enum(u32) {
    CSSM_DB_NONE = 0,
    CSSM_DB_AND = 1,
    CSSM_DB_OR = 2,
};

pub const cssm_selection_predicate = extern struct {
    DbOperator: CSSM_DB_OPERATOR,
    Attribute: CSSM_DB_ATTRIBUTE_DATA,
};

pub const CSSM_SELECTION_PREDICATE_PTR = ?*cssm_selection_predicate;

pub const anon20051 = enum(u32) {
    CSSM_QUERY_TIMELIMIT_NONE = 0,
};

pub const anon20091 = enum(u32) {
    CSSM_QUERY_SIZELIMIT_NONE = 0,
};

pub const cssm_query_limits = extern struct {
    TimeLimit: uint32,
    SizeLimit: uint32,
};

pub const CSSM_QUERY_LIMITS_PTR = ?*cssm_query_limits;

pub const CSSM_QUERY_FLAGS = uint32;

pub const anon20191 = enum(u32) {
    CSSM_QUERY_RETURN_DATA = 1,
};

pub const cssm_query = extern struct {
    RecordType: CSSM_DB_RECORDTYPE,
    Conjunctive: CSSM_DB_CONJUNCTIVE,
    NumSelectionPredicates: uint32,
    SelectionPredicate: CSSM_SELECTION_PREDICATE_PTR,
    QueryLimits: CSSM_QUERY_LIMITS,
    QueryFlags: CSSM_QUERY_FLAGS,
};

pub const CSSM_QUERY_PTR = ?*cssm_query;

pub const CSSM_DLTYPE = uint32;

pub const CSSM_DLTYPE_PTR = ?*uint32;

pub const anon20331 = enum(u32) {
    CSSM_DL_UNKNOWN = 0,
    CSSM_DL_CUSTOM = 1,
    CSSM_DL_LDAP = 2,
    CSSM_DL_ODBC = 3,
    CSSM_DL_PKCS11 = 4,
    CSSM_DL_FFS = 5,
    CSSM_DL_MEMORY = 6,
    CSSM_DL_REMOTEDIR = 7,
};

pub const CSSM_DL_CUSTOM_ATTRIBUTES = ?*anyopaque;

pub const CSSM_DL_LDAP_ATTRIBUTES = ?*anyopaque;

pub const CSSM_DL_ODBC_ATTRIBUTES = ?*anyopaque;

pub const CSSM_DL_FFS_ATTRIBUTES = ?*anyopaque;

pub const cssm_dl_pkcs11_attributes = extern struct {
    DeviceAccessFlags: uint32,
};

pub const CSSM_DL_PKCS11_ATTRIBUTE = ?*cssm_dl_pkcs11_attributes;

pub const CSSM_DL_PKCS11_ATTRIBUTE_PTR = ?*cssm_dl_pkcs11_attributes;

pub const anon20531 = enum(u32) {
    CSSM_DB_DATASTORES_UNKNOWN = -1,
};

pub const cssm_name_list = extern struct {
    NumStrings: uint32,
    String: ?*?*i8,
};

pub const CSSM_NAME_LIST_PTR = ?*cssm_name_list;

pub const CSSM_DB_RETRIEVAL_MODES = uint32;

pub const anon20631 = enum(u32) {
    CSSM_DB_TRANSACTIONAL_MODE = 0,
    CSSM_DB_FILESYSTEMSCAN_MODE = 1,
};

pub const cssm_db_schema_attribute_info = extern struct {
    AttributeId: uint32,
    AttributeName: ?*i8,
    AttributeNameID: Asn1Oid,
    DataType: CSSM_DB_ATTRIBUTE_FORMAT,
};

pub const CSSM_DB_SCHEMA_ATTRIBUTE_INFO_PTR = ?*cssm_db_schema_attribute_info;

pub const cssm_db_schema_index_info = extern struct {
    AttributeId: uint32,
    IndexId: uint32,
    IndexType: CSSM_DB_INDEX_TYPE,
    IndexedDataLocation: CSSM_DB_INDEXED_DATA_LOCATION,
};

pub const CSSM_DB_SCHEMA_INDEX_INFO_PTR = ?*cssm_db_schema_index_info;

pub const CSSM_BER_TAG = uint8;

pub const CSSM_X509_ALGORITHM_IDENTIFIER_PTR = ?*Asn1AlgId;

pub const cssm_x509_type_value_pair = extern struct {
    @"type": Asn1Oid,
    valueType: CSSM_BER_TAG,
    value: Asn1Item,
};

pub const CSSM_X509_TYPE_VALUE_PAIR_PTR = ?*cssm_x509_type_value_pair;

pub const cssm_x509_rdn = extern struct {
    numberOfPairs: uint32,
    AttributeTypeAndValue: CSSM_X509_TYPE_VALUE_PAIR_PTR,
};

pub const CSSM_X509_RDN_PTR = ?*cssm_x509_rdn;

pub const cssm_x509_name = extern struct {
    numberOfRDNs: uint32,
    RelativeDistinguishedName: CSSM_X509_RDN_PTR,
};

pub const CSSM_X509_NAME_PTR = ?*cssm_x509_name;

pub const CSSM_X509_SUBJECT_PUBLIC_KEY_INFO_PTR = ?*Asn1PubKeyInfo;

pub const cssm_x509_time = extern struct {
    timeType: CSSM_BER_TAG,
    time: Asn1Item,
};

pub const CSSM_X509_TIME_PTR = ?*cssm_x509_time;

pub const x509_validity = extern struct {
    notBefore: CSSM_X509_TIME,
    notAfter: CSSM_X509_TIME,
};

pub const CSSM_X509_VALIDITY_PTR = ?*x509_validity;

pub const CSSM_X509_OPTION = CSSM_BOOL;

pub const cssm_x509ext_basicConstraints = extern struct {
    cA: CSSM_BOOL,
    pathLenConstraintPresent: CSSM_X509_OPTION,
    pathLenConstraint: uint32,
};

pub const CSSM_X509EXT_BASICCONSTRAINTS_PTR = ?*cssm_x509ext_basicConstraints;

pub const extension_data_format = enum(u32) {
    CSSM_X509_DATAFORMAT_ENCODED = 0,
    CSSM_X509_DATAFORMAT_PARSED = 1,
    CSSM_X509_DATAFORMAT_PAIR = 2,
};

pub const cssm_x509_extensionTagAndValue = extern struct {
    @"type": CSSM_BER_TAG,
    value: Asn1Item,
};

pub const CSSM_X509EXT_TAGandVALUE_PTR = ?*cssm_x509_extensionTagAndValue;

pub const cssm_x509ext_pair = extern struct {
    tagAndValue: CSSM_X509EXT_TAGandVALUE,
    parsedValue: ?*anyopaque,
};

pub const CSSM_X509EXT_PAIR_PTR = ?*cssm_x509ext_pair;

pub const cssm_x509_extension = extern struct {
    extnId: Asn1Oid,
    critical: CSSM_BOOL,
    format: CSSM_X509EXT_DATA_FORMAT,
    value: cssm_x509ext_value,
    BERvalue: Asn1Item,
};

pub const cssm_x509ext_value = extern union {
    tagAndValue: ?*CSSM_X509EXT_TAGandVALUE,
    parsedValue: ?*anyopaque,
    valuePair: ?*CSSM_X509EXT_PAIR,
};

pub const CSSM_X509_EXTENSION_PTR = ?*cssm_x509_extension;

pub const cssm_x509_extensions = extern struct {
    numberOfExtensions: uint32,
    extensions: CSSM_X509_EXTENSION_PTR,
};

pub const CSSM_X509_EXTENSIONS_PTR = ?*cssm_x509_extensions;

pub const cssm_x509_tbs_certificate = extern struct {
    version: Asn1Item,
    serialNumber: Asn1Item,
    signature: Asn1AlgId,
    issuer: CSSM_X509_NAME,
    validity: CSSM_X509_VALIDITY,
    subject: CSSM_X509_NAME,
    subjectPublicKeyInfo: Asn1PubKeyInfo,
    issuerUniqueIdentifier: Asn1Item,
    subjectUniqueIdentifier: Asn1Item,
    extensions: CSSM_X509_EXTENSIONS,
};

pub const CSSM_X509_TBS_CERTIFICATE_PTR = ?*cssm_x509_tbs_certificate;

pub const cssm_x509_signature = extern struct {
    algorithmIdentifier: Asn1AlgId,
    encrypted: Asn1Item,
};

pub const CSSM_X509_SIGNATURE_PTR = ?*cssm_x509_signature;

pub const cssm_x509_signed_certificate = extern struct {
    certificate: CSSM_X509_TBS_CERTIFICATE,
    signature: CSSM_X509_SIGNATURE,
};

pub const CSSM_X509_SIGNED_CERTIFICATE_PTR = ?*cssm_x509_signed_certificate;

pub const cssm_x509ext_policyQualifierInfo = extern struct {
    policyQualifierId: Asn1Oid,
    value: Asn1Item,
};

pub const CSSM_X509EXT_POLICYQUALIFIERINFO_PTR = ?*cssm_x509ext_policyQualifierInfo;

pub const cssm_x509ext_policyQualifiers = extern struct {
    numberOfPolicyQualifiers: uint32,
    policyQualifier: ?*CSSM_X509EXT_POLICYQUALIFIERINFO,
};

pub const CSSM_X509EXT_POLICYQUALIFIERS_PTR = ?*cssm_x509ext_policyQualifiers;

pub const cssm_x509ext_policyInfo = extern struct {
    policyIdentifier: Asn1Oid,
    policyQualifiers: CSSM_X509EXT_POLICYQUALIFIERS,
};

pub const CSSM_X509EXT_POLICYINFO_PTR = ?*cssm_x509ext_policyInfo;

pub const cssm_x509_revoked_cert_entry = extern struct {
    certificateSerialNumber: Asn1Item,
    revocationDate: CSSM_X509_TIME,
    extensions: CSSM_X509_EXTENSIONS,
};

pub const CSSM_X509_REVOKED_CERT_ENTRY_PTR = ?*cssm_x509_revoked_cert_entry;

pub const cssm_x509_revoked_cert_list = extern struct {
    numberOfRevokedCertEntries: uint32,
    revokedCertEntry: CSSM_X509_REVOKED_CERT_ENTRY_PTR,
};

pub const CSSM_X509_REVOKED_CERT_LIST_PTR = ?*cssm_x509_revoked_cert_list;

pub const cssm_x509_tbs_certlist = extern struct {
    version: Asn1Item,
    signature: Asn1AlgId,
    issuer: CSSM_X509_NAME,
    thisUpdate: CSSM_X509_TIME,
    nextUpdate: CSSM_X509_TIME,
    revokedCertificates: CSSM_X509_REVOKED_CERT_LIST_PTR,
    extensions: CSSM_X509_EXTENSIONS,
};

pub const CSSM_X509_TBS_CERTLIST_PTR = ?*cssm_x509_tbs_certlist;

pub const cssm_x509_signed_crl = extern struct {
    tbsCertList: CSSM_X509_TBS_CERTLIST,
    signature: CSSM_X509_SIGNATURE,
};

pub const CSSM_X509_SIGNED_CRL_PTR = ?*cssm_x509_signed_crl;

pub extern "Security" fn CertificateGetTypeID() callconv(.C) core_foundation.TypeID;

pub extern "Security" fn CertificateCreateWithData(allocator: core_foundation.AllocatorRef, data: core_foundation.DataRef) callconv(.C) CertificateRef;

pub extern "Security" fn CertificateCopyData(certificate: CertificateRef) callconv(.C) core_foundation.DataRef;

pub extern "Security" fn CertificateCopySubjectSummary(certificate: CertificateRef) callconv(.C) core_foundation.StringRef;

pub extern "Security" fn CertificateCopyCommonName(certificate: CertificateRef, commonName: ?*core_foundation.StringRef) callconv(.C) objc.OSStatus;

pub extern "Security" fn CertificateCopyEmailAddresses(certificate: CertificateRef, emailAddresses: ?*core_foundation.ArrayRef) callconv(.C) objc.OSStatus;

pub extern "Security" fn CertificateCopyNormalizedIssuerSequence(certificate: CertificateRef) callconv(.C) core_foundation.DataRef;

pub extern "Security" fn CertificateCopyNormalizedSubjectSequence(certificate: CertificateRef) callconv(.C) core_foundation.DataRef;

pub extern "Security" fn CertificateCopyKey(certificate: CertificateRef) callconv(.C) KeyRef;

pub extern "Security" fn CertificateCopyPublicKey(certificate: CertificateRef, key: ?*KeyRef) callconv(.C) objc.OSStatus;

pub extern "Security" fn CertificateCopySerialNumberData(certificate: CertificateRef, @"error": ?*core_foundation.ErrorRef) callconv(.C) core_foundation.DataRef;

pub extern "Security" fn CertificateCopyNotValidBeforeDate(certificate: CertificateRef) callconv(.C) core_foundation.DateRef;

pub extern "Security" fn CertificateCopyNotValidAfterDate(certificate: CertificateRef) callconv(.C) core_foundation.DateRef;

pub extern "Security" fn CertificateCopySerialNumber(certificate: CertificateRef, @"error": ?*core_foundation.ErrorRef) callconv(.C) core_foundation.DataRef;

pub const anon2671 = enum(u32) {
    kSecSubjectItemAttr = 1937072746,
    kSecIssuerItemAttr = 1769173877,
    kSecSerialNumberItemAttr = 1936614002,
    kSecPublicKeyHashItemAttr = 1752198009,
    kSecSubjectKeyIdentifierItemAttr = 1936419172,
    kSecCertTypeItemAttr = 1668577648,
    kSecCertEncodingItemAttr = 1667591779,
};

pub extern "Security" fn CertificateCreateFromData(data: ?*Asn1Item, @"type": CSSM_CERT_TYPE, encoding: CSSM_CERT_ENCODING, certificate: ?*CertificateRef, ) callconv(.C) objc.OSStatus;

pub extern "Security" fn CertificateAddToKeychain(certificate: CertificateRef, keychain: KeychainRef) callconv(.C) objc.OSStatus;

pub extern "Security" fn CertificateGetData(certificate: CertificateRef, data: CSSM_DATA_PTR) callconv(.C) objc.OSStatus;

pub extern "Security" fn CertificateGetType(certificate: CertificateRef, certificateType: ?*CSSM_CERT_TYPE) callconv(.C) objc.OSStatus;

pub extern "Security" fn CertificateGetSubject(certificate: CertificateRef, subject: ?*?*CSSM_X509_NAME) callconv(.C) objc.OSStatus;

pub extern "Security" fn CertificateGetIssuer(certificate: CertificateRef, issuer: ?*?*CSSM_X509_NAME) callconv(.C) objc.OSStatus;

pub extern "Security" fn CertificateGetCLHandle(certificate: CertificateRef, clHandle: ?*CSSM_CL_HANDLE) callconv(.C) objc.OSStatus;

pub extern "Security" fn CertificateGetAlgorithmID(certificate: CertificateRef, algid: ?*?*Asn1AlgId) callconv(.C) objc.OSStatus;

pub extern "Security" fn CertificateCopyPreference(name: core_foundation.StringRef, keyUsage: uint32, certificate: ?*CertificateRef) callconv(.C) objc.OSStatus;

pub extern "Security" fn CertificateCopyPreferred(name: core_foundation.StringRef, keyUsage: core_foundation.ArrayRef) callconv(.C) CertificateRef;

pub extern "Security" fn CertificateSetPreference(certificate: CertificateRef, name: core_foundation.StringRef, keyUsage: uint32, date: core_foundation.DateRef, ) callconv(.C) objc.OSStatus;

pub extern "Security" fn CertificateSetPreferred(certificate: CertificateRef, name: core_foundation.StringRef, keyUsage: core_foundation.ArrayRef) callconv(.C) objc.OSStatus;

pub const KeyUsage = enum(objc.uint32_t) {
    kSecKeyUsageUnspecified = 0,
    kSecKeyUsageDigitalSignature = 1,
    kSecKeyUsageNonRepudiation = 2,
    kSecKeyUsageContentCommitment = 2,
    kSecKeyUsageKeyEncipherment = 4,
    kSecKeyUsageDataEncipherment = 8,
    kSecKeyUsageKeyAgreement = 16,
    kSecKeyUsageKeyCertSign = 32,
    kSecKeyUsageCRLSign = 64,
    kSecKeyUsageEncipherOnly = 128,
    kSecKeyUsageDecipherOnly = 256,
    kSecKeyUsageCritical = -2147483648,
    kSecKeyUsageAll = 2147483647,
};

pub extern "Security" fn CertificateCopyValues(certificate: CertificateRef, keys: core_foundation.ArrayRef, @"error": ?*core_foundation.ErrorRef) callconv(.C) core_foundation.DictionaryRef;

pub extern "Security" fn CertificateCopyLongDescription(alloc: core_foundation.AllocatorRef, certificate: CertificateRef, @"error": ?*core_foundation.ErrorRef) callconv(.C) core_foundation.StringRef;

pub extern "Security" fn CertificateCopyShortDescription(alloc: core_foundation.AllocatorRef, certificate: CertificateRef, @"error": ?*core_foundation.ErrorRef) callconv(.C) core_foundation.StringRef;

pub extern "Security" fn CertificateCopyNormalizedIssuerContent(certificate: CertificateRef, @"error": ?*core_foundation.ErrorRef) callconv(.C) core_foundation.DataRef;

pub extern "Security" fn CertificateCopyNormalizedSubjectContent(certificate: CertificateRef, @"error": ?*core_foundation.ErrorRef) callconv(.C) core_foundation.DataRef;

pub extern "Security" fn IdentityGetTypeID() callconv(.C) core_foundation.TypeID;

pub extern "Security" fn IdentityCreateWithCertificate(keychainOrArray: core_foundation.TypeRef, certificateRef: CertificateRef, identityRef: ?*IdentityRef) callconv(.C) objc.OSStatus;

pub extern "Security" fn IdentityCopyCertificate(identityRef: IdentityRef, certificateRef: ?*CertificateRef) callconv(.C) objc.OSStatus;

pub extern "Security" fn IdentityCopyPrivateKey(identityRef: IdentityRef, privateKeyRef: ?*KeyRef) callconv(.C) objc.OSStatus;

pub extern "Security" fn IdentityCopyPreference(name: core_foundation.StringRef, keyUsage: CSSM_KEYUSE, validIssuers: core_foundation.ArrayRef, identity: ?*IdentityRef, ) callconv(.C) objc.OSStatus;

pub extern "Security" fn IdentityCopyPreferred(name: core_foundation.StringRef, keyUsage: core_foundation.ArrayRef, validIssuers: core_foundation.ArrayRef) callconv(.C) IdentityRef;

pub extern "Security" fn IdentitySetPreference(identity: IdentityRef, name: core_foundation.StringRef, keyUsage: CSSM_KEYUSE) callconv(.C) objc.OSStatus;

pub extern "Security" fn IdentitySetPreferred(identity: IdentityRef, name: core_foundation.StringRef, keyUsage: core_foundation.ArrayRef) callconv(.C) objc.OSStatus;

pub extern "Security" fn IdentityCopySystemIdentity(domain: core_foundation.StringRef, idRef: ?*IdentityRef, actualDomain: ?*core_foundation.StringRef) callconv(.C) objc.OSStatus;

pub extern "Security" fn IdentitySetSystemIdentity(domain: core_foundation.StringRef, idRef: IdentityRef) callconv(.C) objc.OSStatus;

pub extern "Security" fn AccessControlGetTypeID() callconv(.C) core_foundation.TypeID;

pub const AccessControlCreateFlags = enum(core_foundation.OptionFlags) {
    kSecAccessControlUserPresence = 1,
    kSecAccessControlBiometryAny = 2,
    kSecAccessControlTouchIDAny = 2,
    kSecAccessControlBiometryCurrentSet = 8,
    kSecAccessControlTouchIDCurrentSet = 8,
    kSecAccessControlDevicePasscode = 16,
    kSecAccessControlWatch = 32,
    kSecAccessControlCompanion = 32,
    kSecAccessControlOr = 16384,
    kSecAccessControlAnd = 32768,
    kSecAccessControlPrivateKeyUsage = 1073741824,
    kSecAccessControlApplicationPassword = 2147483648,
};

pub extern "Security" fn AccessControlCreateWithFlags(allocator: core_foundation.AllocatorRef, protection: core_foundation.TypeRef, flags: AccessControlCreateFlags, @"error": ?*core_foundation.ErrorRef, ) callconv(.C) AccessControlRef;

pub extern "Security" fn ItemCopyMatching(query: core_foundation.DictionaryRef, result: ?*core_foundation.TypeRef) callconv(.C) objc.OSStatus;

pub extern "Security" fn ItemAdd(attributes: core_foundation.DictionaryRef, result: ?*core_foundation.TypeRef) callconv(.C) objc.OSStatus;

pub extern "Security" fn ItemUpdate(query: core_foundation.DictionaryRef, attributesToUpdate: core_foundation.DictionaryRef) callconv(.C) objc.OSStatus;

pub extern "Security" fn ItemDelete(query: core_foundation.DictionaryRef) callconv(.C) objc.OSStatus;

pub const AccessOwnerType = objc.UInt32;

pub const anon491 = enum(u32) {
    kSecUseOnlyUID = 1,
    kSecUseOnlyGID = 2,
    kSecHonorRoot = 256,
    kSecMatchBits = 3,
};

pub extern "Security" fn AccessGetTypeID() callconv(.C) core_foundation.TypeID;

pub extern "Security" fn AccessCreate(descriptor: core_foundation.StringRef, trustedlist: core_foundation.ArrayRef, accessRef: ?*AccessRef) callconv(.C) objc.OSStatus;

pub extern "Security" fn AccessCreateFromOwnerAndACL(owner: ?*CSSM_ACL_OWNER_PROTOTYPE, aclCount: uint32, acls: ?*CSSM_ACL_ENTRY_INFO, accessRef: ?*AccessRef, ) callconv(.C) objc.OSStatus;

pub extern "Security" fn AccessCreateWithOwnerAndACL(userId: objc.uid_t, groupId: objc.gid_t, ownerType: AccessOwnerType, acls: core_foundation.ArrayRef, @"error": ?*core_foundation.ErrorRef, ) callconv(.C) AccessRef;

pub extern "Security" fn AccessGetOwnerAndACL(accessRef: AccessRef, owner: ?*CSSM_ACL_OWNER_PROTOTYPE_PTR, aclCount: ?*uint32, acls: ?*CSSM_ACL_ENTRY_INFO_PTR, ) callconv(.C) objc.OSStatus;

pub extern "Security" fn AccessCopyOwnerAndACL(accessRef: AccessRef, userId: ?*objc.uid_t, groupId: ?*objc.gid_t, ownerType: ?*AccessOwnerType, aclList: ?*core_foundation.ArrayRef, ) callconv(.C) objc.OSStatus;

pub extern "Security" fn AccessCopyACLList(accessRef: AccessRef, aclList: ?*core_foundation.ArrayRef) callconv(.C) objc.OSStatus;

pub extern "Security" fn AccessCopySelectedACLList(accessRef: AccessRef, action: CSSM_ACL_AUTHORIZATION_TAG, aclList: ?*core_foundation.ArrayRef) callconv(.C) objc.OSStatus;

pub extern "Security" fn AccessCopyMatchingACLList(accessRef: AccessRef, authorizationTag: core_foundation.TypeRef) callconv(.C) core_foundation.ArrayRef;

pub const anon1241 = enum(i32) {
    kSecKeyKeyClass = 0,
    kSecKeyPrintName = 1,
    kSecKeyAlias = 2,
    kSecKeyPermanent = 3,
    kSecKeyPrivate = 4,
    kSecKeyModifiable = 5,
    kSecKeyLabel = 6,
    kSecKeyApplicationTag = 7,
    kSecKeyKeyCreator = 8,
    kSecKeyKeyType = 9,
    kSecKeyKeySizeInBits = 10,
    kSecKeyEffectiveKeySize = 11,
    kSecKeyStartDate = 12,
    kSecKeyEndDate = 13,
    kSecKeySensitive = 14,
    kSecKeyAlwaysSensitive = 15,
    kSecKeyExtractable = 16,
    kSecKeyNeverExtractable = 17,
    kSecKeyEncrypt = 18,
    kSecKeyDecrypt = 19,
    kSecKeyDerive = 20,
    kSecKeySign = 21,
    kSecKeyVerify = 22,
    kSecKeySignRecover = 23,
    kSecKeyVerifyRecover = 24,
    kSecKeyWrap = 25,
    kSecKeyUnwrap = 26,
};

pub const CredentialType = enum(uint32) {
    kSecCredentialTypeDefault = 0,
    kSecCredentialTypeWithUI = 1,
    kSecCredentialTypeNoUI = 2,
};

pub const Padding = enum(objc.uint32_t) {
    kSecPaddingNone = 0,
    kSecPaddingPKCS1 = 1,
    kSecPaddingOAEP = 2,
    kSecPaddingSigRaw = 16384,
    kSecPaddingPKCS1MD2 = 32768,
    kSecPaddingPKCS1MD5 = 32769,
    kSecPaddingPKCS1SHA1 = 32770,
    kSecPaddingPKCS1SHA224 = 32771,
    kSecPaddingPKCS1SHA256 = 32772,
    kSecPaddingPKCS1SHA384 = 32773,
    kSecPaddingPKCS1SHA512 = 32774,
};

pub const KeySizes = enum(objc.uint32_t) {
    kSecDefaultKeySize = 0,
    kSec3DES192 = 192,
    kSecAES128 = 128,
    kSecAES192 = 192,
    kSecAES256 = 256,
    kSecp192r1 = 192,
    kSecp256r1 = 256,
    kSecp384r1 = 384,
    kSecp521r1 = 521,
    kSecRSAMin = 1024,
    kSecRSAMax = 4096,
};

pub extern "Security" fn KeyGetTypeID() callconv(.C) core_foundation.TypeID;

pub extern "Security" fn KeyCreatePair(keychainRef: KeychainRef, algorithm: CSSM_ALGORITHMS, keySizeInBits: uint32, contextHandle: CSSM_CC_HANDLE, publicKeyUsage: CSSM_KEYUSE, publicKeyAttr: uint32, privateKeyUsage: CSSM_KEYUSE, privateKeyAttr: uint32, initialAccess: AccessRef, publicKey: ?*KeyRef, privateKey: ?*KeyRef, ) callconv(.C) objc.OSStatus;

pub extern "Security" fn KeyGenerate(keychainRef: KeychainRef, algorithm: CSSM_ALGORITHMS, keySizeInBits: uint32, contextHandle: CSSM_CC_HANDLE, keyUsage: CSSM_KEYUSE, keyAttr: uint32, initialAccess: AccessRef, keyRef: ?*KeyRef, ) callconv(.C) objc.OSStatus;

pub extern "Security" fn KeyGetCSSMKey(key: KeyRef, cssmKey: ?*?*CSSM_KEY) callconv(.C) objc.OSStatus;

pub extern "Security" fn KeyGetCSPHandle(keyRef: KeyRef, cspHandle: ?*CSSM_CSP_HANDLE) callconv(.C) objc.OSStatus;

pub extern "Security" fn KeyGetCredentials(keyRef: KeyRef, operation: CSSM_ACL_AUTHORIZATION_TAG, credentialType: CredentialType, outCredentials: ?*?*CSSM_ACCESS_CREDENTIALS, ) callconv(.C) objc.OSStatus;

pub extern "Security" fn KeyGenerateSymmetric(parameters: core_foundation.DictionaryRef, @"error": ?*core_foundation.ErrorRef) callconv(.C) KeyRef;

pub extern "Security" fn KeyCreateFromData(parameters: core_foundation.DictionaryRef, keyData: core_foundation.DataRef, @"error": ?*core_foundation.ErrorRef) callconv(.C) KeyRef;

pub const KeyGeneratePairBlock = *const fn(KeyRef, KeyRef, core_foundation.ErrorRef) callconv(.C) void;

pub extern "Security" fn KeyGeneratePairAsync(parameters: core_foundation.DictionaryRef, deliveryQueue: objc.dispatch_queue_t, result: KeyGeneratePairBlock) callconv(.C) void;

pub extern "Security" fn KeyDeriveFromPassword(password: core_foundation.StringRef, parameters: core_foundation.DictionaryRef, @"error": ?*core_foundation.ErrorRef) callconv(.C) KeyRef;

pub extern "Security" fn KeyWrapSymmetric(keyToWrap: KeyRef, wrappingKey: KeyRef, parameters: core_foundation.DictionaryRef, @"error": ?*core_foundation.ErrorRef, ) callconv(.C) core_foundation.DataRef;

pub extern "Security" fn KeyUnwrapSymmetric(keyToUnwrap: ?*core_foundation.DataRef, unwrappingKey: KeyRef, parameters: core_foundation.DictionaryRef, @"error": ?*core_foundation.ErrorRef, ) callconv(.C) KeyRef;

pub extern "Security" fn KeyGeneratePair(parameters: core_foundation.DictionaryRef, publicKey: ?*KeyRef, privateKey: ?*KeyRef) callconv(.C) objc.OSStatus;

pub extern "Security" fn KeyCreateRandomKey(parameters: core_foundation.DictionaryRef, @"error": ?*core_foundation.ErrorRef) callconv(.C) KeyRef;

pub extern "Security" fn KeyCreateWithData(keyData: core_foundation.DataRef, attributes: core_foundation.DictionaryRef, @"error": ?*core_foundation.ErrorRef) callconv(.C) KeyRef;

pub extern "Security" fn KeyGetBlockSize(key: KeyRef) callconv(.C) objc.size_t;

pub extern "Security" fn KeyCopyExternalRepresentation(key: KeyRef, @"error": ?*core_foundation.ErrorRef) callconv(.C) core_foundation.DataRef;

pub extern "Security" fn KeyCopyAttributes(key: KeyRef) callconv(.C) core_foundation.DictionaryRef;

pub extern "Security" fn KeyCopyPublicKey(key: KeyRef) callconv(.C) KeyRef;

pub const KeyAlgorithm = core_foundation.StringRef;

pub extern "Security" fn KeyCreateSignature(key: KeyRef, algorithm: KeyAlgorithm, dataToSign: core_foundation.DataRef, @"error": ?*core_foundation.ErrorRef, ) callconv(.C) core_foundation.DataRef;

pub extern "Security" fn KeyVerifySignature(key: KeyRef, algorithm: KeyAlgorithm, signedData: core_foundation.DataRef, signature: core_foundation.DataRef, @"error": ?*core_foundation.ErrorRef, ) callconv(.C) objc.Boolean;

pub extern "Security" fn KeyCreateEncryptedData(key: KeyRef, algorithm: KeyAlgorithm, plaintext: core_foundation.DataRef, @"error": ?*core_foundation.ErrorRef, ) callconv(.C) core_foundation.DataRef;

pub extern "Security" fn KeyCreateDecryptedData(key: KeyRef, algorithm: KeyAlgorithm, ciphertext: core_foundation.DataRef, @"error": ?*core_foundation.ErrorRef, ) callconv(.C) core_foundation.DataRef;

pub const KeyKeyExchangeParameter = core_foundation.StringRef;

pub extern "Security" fn KeyCopyKeyExchangeResult(privateKey: KeyRef, algorithm: KeyAlgorithm, publicKey: KeyRef, parameters: core_foundation.DictionaryRef, @"error": ?*core_foundation.ErrorRef, ) callconv(.C) core_foundation.DataRef;

pub const KeyOperationType = enum(core_foundation.Index) {
    kSecKeyOperationTypeSign = 0,
    kSecKeyOperationTypeVerify = 1,
    kSecKeyOperationTypeEncrypt = 2,
    kSecKeyOperationTypeDecrypt = 3,
    kSecKeyOperationTypeKeyExchange = 4,
};

pub extern "Security" fn KeyIsAlgorithmSupported(key: KeyRef, operation: KeyOperationType, algorithm: KeyAlgorithm) callconv(.C) objc.Boolean;

pub extern "Security" fn PolicyGetTypeID() callconv(.C) core_foundation.TypeID;

pub extern "Security" fn PolicyCopyProperties(policyRef: PolicyRef) callconv(.C) core_foundation.DictionaryRef;

pub extern "Security" fn PolicyCreateBasicX509() callconv(.C) PolicyRef;

pub extern "Security" fn PolicyCreateSSL(server: objc.Boolean, hostname: core_foundation.StringRef) callconv(.C) PolicyRef;

pub const anon2091 = enum(core_foundation.OptionFlags) {
    kSecRevocationOCSPMethod = 1,
    kSecRevocationCRLMethod = 2,
    kSecRevocationPreferCRL = 4,
    kSecRevocationRequirePositiveResponse = 8,
    kSecRevocationNetworkAccessDisabled = 16,
    kSecRevocationUseAnyAvailableMethod = 3,
};

pub extern "Security" fn PolicyCreateRevocation(revocationFlags: core_foundation.OptionFlags) callconv(.C) PolicyRef;

pub extern "Security" fn PolicyCreateWithProperties(policyIdentifier: core_foundation.TypeRef, properties: core_foundation.DictionaryRef) callconv(.C) PolicyRef;

pub extern "Security" fn PolicyCreateWithOID(policyOID: core_foundation.TypeRef) callconv(.C) PolicyRef;

pub extern "Security" fn PolicyGetOID(policyRef: PolicyRef, oid: ?*Asn1Oid) callconv(.C) objc.OSStatus;

pub extern "Security" fn PolicyGetValue(policyRef: PolicyRef, value: ?*Asn1Item) callconv(.C) objc.OSStatus;

pub extern "Security" fn PolicySetValue(policyRef: PolicyRef, value: ?*Asn1Item) callconv(.C) objc.OSStatus;

pub extern "Security" fn PolicySetProperties(policyRef: PolicyRef, properties: core_foundation.DictionaryRef) callconv(.C) objc.OSStatus;

pub extern "Security" fn PolicyGetTPHandle(policyRef: PolicyRef, tpHandle: ?*CSSM_TP_HANDLE) callconv(.C) objc.OSStatus;

pub const __SecRandom = extern struct {};

pub const RandomRef = ?*__SecRandom;

pub extern "Security" fn RandomCopyBytes(rnd: RandomRef, count: objc.size_t, bytes: ?*anyopaque) callconv(.C) i32;

pub const anon551 = enum(i32) {
    CSSM_BASE_ERROR = -2147418112,
    CSSM_ERRORCODE_MODULE_EXTENT = 2048,
    CSSM_ERRORCODE_CUSTOM_OFFSET = 1024,
    CSSM_ERRORCODE_COMMON_EXTENT = 256,
    CSSM_CSSM_BASE_ERROR = -2147418112,
    CSSM_CSSM_PRIVATE_ERROR = -2147417088,
    CSSM_CSP_BASE_ERROR = -2147416064,
    CSSM_CSP_PRIVATE_ERROR = -2147415040,
    CSSM_DL_BASE_ERROR = -2147414016,
    CSSM_DL_PRIVATE_ERROR = -2147412992,
    CSSM_CL_BASE_ERROR = -2147411968,
    CSSM_CL_PRIVATE_ERROR = -2147410944,
    CSSM_TP_BASE_ERROR = -2147409920,
    CSSM_TP_PRIVATE_ERROR = -2147408896,
    CSSM_KR_BASE_ERROR = -2147407872,
    CSSM_KR_PRIVATE_ERROR = -2147406848,
    CSSM_AC_BASE_ERROR = -2147405824,
    CSSM_AC_PRIVATE_ERROR = -2147404800,
};

pub const anon791 = enum(i32) {
    CSSM_MDS_BASE_ERROR = -2147414016,
    CSSM_MDS_PRIVATE_ERROR = -2147412992,
};

pub const anon941 = enum(u32) {
    CSSM_ERRCODE_INTERNAL_ERROR = 1,
    CSSM_ERRCODE_MEMORY_ERROR = 2,
    CSSM_ERRCODE_MDS_ERROR = 3,
    CSSM_ERRCODE_INVALID_POINTER = 4,
    CSSM_ERRCODE_INVALID_INPUT_POINTER = 5,
    CSSM_ERRCODE_INVALID_OUTPUT_POINTER = 6,
    CSSM_ERRCODE_FUNCTION_NOT_IMPLEMENTED = 7,
    CSSM_ERRCODE_SELF_CHECK_FAILED = 8,
    CSSM_ERRCODE_OS_ACCESS_DENIED = 9,
    CSSM_ERRCODE_FUNCTION_FAILED = 10,
    CSSM_ERRCODE_MODULE_MANIFEST_VERIFY_FAILED = 11,
    CSSM_ERRCODE_INVALID_GUID = 12,
};

pub const anon1101 = enum(u32) {
    CSSM_ERRCODE_OPERATION_AUTH_DENIED = 32,
    CSSM_ERRCODE_OBJECT_USE_AUTH_DENIED = 33,
    CSSM_ERRCODE_OBJECT_MANIP_AUTH_DENIED = 34,
    CSSM_ERRCODE_OBJECT_ACL_NOT_SUPPORTED = 35,
    CSSM_ERRCODE_OBJECT_ACL_REQUIRED = 36,
    CSSM_ERRCODE_INVALID_ACCESS_CREDENTIALS = 37,
    CSSM_ERRCODE_INVALID_ACL_BASE_CERTS = 38,
    CSSM_ERRCODE_ACL_BASE_CERTS_NOT_SUPPORTED = 39,
    CSSM_ERRCODE_INVALID_SAMPLE_VALUE = 40,
    CSSM_ERRCODE_SAMPLE_VALUE_NOT_SUPPORTED = 41,
    CSSM_ERRCODE_INVALID_ACL_SUBJECT_VALUE = 42,
    CSSM_ERRCODE_ACL_SUBJECT_TYPE_NOT_SUPPORTED = 43,
    CSSM_ERRCODE_INVALID_ACL_CHALLENGE_CALLBACK = 44,
    CSSM_ERRCODE_ACL_CHALLENGE_CALLBACK_FAILED = 45,
    CSSM_ERRCODE_INVALID_ACL_ENTRY_TAG = 46,
    CSSM_ERRCODE_ACL_ENTRY_TAG_NOT_FOUND = 47,
    CSSM_ERRCODE_INVALID_ACL_EDIT_MODE = 48,
    CSSM_ERRCODE_ACL_CHANGE_FAILED = 49,
    CSSM_ERRCODE_INVALID_NEW_ACL_ENTRY = 50,
    CSSM_ERRCODE_INVALID_NEW_ACL_OWNER = 51,
    CSSM_ERRCODE_ACL_DELETE_FAILED = 52,
    CSSM_ERRCODE_ACL_REPLACE_FAILED = 53,
    CSSM_ERRCODE_ACL_ADD_FAILED = 54,
};

pub const anon1371 = enum(u32) {
    CSSM_ERRCODE_INVALID_CONTEXT_HANDLE = 64,
    CSSM_ERRCODE_INCOMPATIBLE_VERSION = 65,
    CSSM_ERRCODE_INVALID_CERTGROUP_POINTER = 66,
    CSSM_ERRCODE_INVALID_CERT_POINTER = 67,
    CSSM_ERRCODE_INVALID_CRL_POINTER = 68,
    CSSM_ERRCODE_INVALID_FIELD_POINTER = 69,
    CSSM_ERRCODE_INVALID_DATA = 70,
    CSSM_ERRCODE_CRL_ALREADY_SIGNED = 71,
    CSSM_ERRCODE_INVALID_NUMBER_OF_FIELDS = 72,
    CSSM_ERRCODE_VERIFICATION_FAILURE = 73,
    CSSM_ERRCODE_INVALID_DB_HANDLE = 74,
    CSSM_ERRCODE_PRIVILEGE_NOT_GRANTED = 75,
    CSSM_ERRCODE_INVALID_DB_LIST = 76,
    CSSM_ERRCODE_INVALID_DB_LIST_POINTER = 77,
    CSSM_ERRCODE_UNKNOWN_FORMAT = 78,
    CSSM_ERRCODE_UNKNOWN_TAG = 79,
    CSSM_ERRCODE_INVALID_CSP_HANDLE = 80,
    CSSM_ERRCODE_INVALID_DL_HANDLE = 81,
    CSSM_ERRCODE_INVALID_CL_HANDLE = 82,
    CSSM_ERRCODE_INVALID_TP_HANDLE = 83,
    CSSM_ERRCODE_INVALID_KR_HANDLE = 84,
    CSSM_ERRCODE_INVALID_AC_HANDLE = 85,
    CSSM_ERRCODE_INVALID_PASSTHROUGH_ID = 86,
    CSSM_ERRCODE_INVALID_NETWORK_ADDR = 87,
    CSSM_ERRCODE_INVALID_CRYPTO_DATA = 88,
};

pub const anon1821 = enum(i32) {
    CSSMERR_CSSM_INVALID_CONTEXT_HANDLE = -2147418048,
    CSSMERR_CSSM_INCOMPATIBLE_VERSION = -2147418047,
    CSSMERR_CSSM_PRIVILEGE_NOT_GRANTED = -2147418037,
};

pub const anon1891 = enum(i32) {
    CSSM_CSSM_BASE_CSSM_ERROR = -2147417840,
    CSSMERR_CSSM_SCOPE_NOT_SUPPORTED = -2147417839,
    CSSMERR_CSSM_PVC_ALREADY_CONFIGURED = -2147417838,
    CSSMERR_CSSM_INVALID_PVC = -2147417837,
    CSSMERR_CSSM_EMM_LOAD_FAILED = -2147417836,
    CSSMERR_CSSM_EMM_UNLOAD_FAILED = -2147417835,
    CSSMERR_CSSM_ADDIN_LOAD_FAILED = -2147417834,
    CSSMERR_CSSM_INVALID_KEY_HIERARCHY = -2147417833,
    CSSMERR_CSSM_ADDIN_UNLOAD_FAILED = -2147417832,
    CSSMERR_CSSM_LIB_REF_NOT_FOUND = -2147417831,
    CSSMERR_CSSM_INVALID_ADDIN_FUNCTION_TABLE = -2147417830,
    CSSMERR_CSSM_EMM_AUTHENTICATE_FAILED = -2147417829,
    CSSMERR_CSSM_ADDIN_AUTHENTICATE_FAILED = -2147417828,
    CSSMERR_CSSM_INVALID_SERVICE_MASK = -2147417827,
    CSSMERR_CSSM_MODULE_NOT_LOADED = -2147417826,
    CSSMERR_CSSM_INVALID_SUBSERVICEID = -2147417825,
    CSSMERR_CSSM_BUFFER_TOO_SMALL = -2147417824,
    CSSMERR_CSSM_INVALID_ATTRIBUTE = -2147417823,
    CSSMERR_CSSM_ATTRIBUTE_NOT_IN_CONTEXT = -2147417822,
    CSSMERR_CSSM_MODULE_MANAGER_INITIALIZE_FAIL = -2147417821,
    CSSMERR_CSSM_MODULE_MANAGER_NOT_FOUND = -2147417820,
    CSSMERR_CSSM_EVENT_NOTIFICATION_CALLBACK_NOT_FOUND = -2147417819,
};

pub const anon2161 = enum(i32) {
    CSSMERR_CSP_INTERNAL_ERROR = -2147416063,
    CSSMERR_CSP_MEMORY_ERROR = -2147416062,
    CSSMERR_CSP_MDS_ERROR = -2147416061,
    CSSMERR_CSP_INVALID_POINTER = -2147416060,
    CSSMERR_CSP_INVALID_INPUT_POINTER = -2147416059,
    CSSMERR_CSP_INVALID_OUTPUT_POINTER = -2147416058,
    CSSMERR_CSP_FUNCTION_NOT_IMPLEMENTED = -2147416057,
    CSSMERR_CSP_SELF_CHECK_FAILED = -2147416056,
    CSSMERR_CSP_OS_ACCESS_DENIED = -2147416055,
    CSSMERR_CSP_FUNCTION_FAILED = -2147416054,
};

pub const anon2301 = enum(i32) {
    CSSMERR_CSP_OPERATION_AUTH_DENIED = -2147416032,
    CSSMERR_CSP_OBJECT_USE_AUTH_DENIED = -2147416031,
    CSSMERR_CSP_OBJECT_MANIP_AUTH_DENIED = -2147416030,
    CSSMERR_CSP_OBJECT_ACL_NOT_SUPPORTED = -2147416029,
    CSSMERR_CSP_OBJECT_ACL_REQUIRED = -2147416028,
    CSSMERR_CSP_INVALID_ACCESS_CREDENTIALS = -2147416027,
    CSSMERR_CSP_INVALID_ACL_BASE_CERTS = -2147416026,
    CSSMERR_CSP_ACL_BASE_CERTS_NOT_SUPPORTED = -2147416025,
    CSSMERR_CSP_INVALID_SAMPLE_VALUE = -2147416024,
    CSSMERR_CSP_SAMPLE_VALUE_NOT_SUPPORTED = -2147416023,
    CSSMERR_CSP_INVALID_ACL_SUBJECT_VALUE = -2147416022,
    CSSMERR_CSP_ACL_SUBJECT_TYPE_NOT_SUPPORTED = -2147416021,
    CSSMERR_CSP_INVALID_ACL_CHALLENGE_CALLBACK = -2147416020,
    CSSMERR_CSP_ACL_CHALLENGE_CALLBACK_FAILED = -2147416019,
    CSSMERR_CSP_INVALID_ACL_ENTRY_TAG = -2147416018,
    CSSMERR_CSP_ACL_ENTRY_TAG_NOT_FOUND = -2147416017,
    CSSMERR_CSP_INVALID_ACL_EDIT_MODE = -2147416016,
    CSSMERR_CSP_ACL_CHANGE_FAILED = -2147416015,
    CSSMERR_CSP_INVALID_NEW_ACL_ENTRY = -2147416014,
    CSSMERR_CSP_INVALID_NEW_ACL_OWNER = -2147416013,
    CSSMERR_CSP_ACL_DELETE_FAILED = -2147416012,
    CSSMERR_CSP_ACL_REPLACE_FAILED = -2147416011,
    CSSMERR_CSP_ACL_ADD_FAILED = -2147416010,
};

pub const anon2571 = enum(u32) {
    CSSM_PADDING_APPLE_SSLv2 = -2147483648,
};

pub const anon2661 = enum(i32) {
    CSSM_CSP_BASE_CSP_ERROR = -2147415808,
    CSSMERR_CSP_INPUT_LENGTH_ERROR = -2147415807,
    CSSMERR_CSP_OUTPUT_LENGTH_ERROR = -2147415806,
    CSSMERR_CSP_PRIVILEGE_NOT_SUPPORTED = -2147415805,
    CSSMERR_CSP_DEVICE_ERROR = -2147415804,
    CSSMERR_CSP_DEVICE_MEMORY_ERROR = -2147415803,
    CSSMERR_CSP_ATTACH_HANDLE_BUSY = -2147415802,
    CSSMERR_CSP_NOT_LOGGED_IN = -2147415801,
    CSSMERR_CSP_INVALID_KEY = -2147415792,
    CSSMERR_CSP_INVALID_KEY_REFERENCE = -2147415791,
    CSSMERR_CSP_INVALID_KEY_CLASS = -2147415790,
    CSSMERR_CSP_ALGID_MISMATCH = -2147415789,
    CSSMERR_CSP_KEY_USAGE_INCORRECT = -2147415788,
    CSSMERR_CSP_KEY_BLOB_TYPE_INCORRECT = -2147415787,
    CSSMERR_CSP_KEY_HEADER_INCONSISTENT = -2147415786,
    CSSMERR_CSP_UNSUPPORTED_KEY_FORMAT = -2147415785,
    CSSMERR_CSP_UNSUPPORTED_KEY_SIZE = -2147415784,
    CSSMERR_CSP_INVALID_KEY_POINTER = -2147415783,
    CSSMERR_CSP_INVALID_KEYUSAGE_MASK = -2147415782,
    CSSMERR_CSP_UNSUPPORTED_KEYUSAGE_MASK = -2147415781,
    CSSMERR_CSP_INVALID_KEYATTR_MASK = -2147415780,
    CSSMERR_CSP_UNSUPPORTED_KEYATTR_MASK = -2147415779,
    CSSMERR_CSP_INVALID_KEY_LABEL = -2147415778,
    CSSMERR_CSP_UNSUPPORTED_KEY_LABEL = -2147415777,
    CSSMERR_CSP_INVALID_KEY_FORMAT = -2147415776,
    CSSMERR_CSP_INVALID_DATA_COUNT = -2147415768,
    CSSMERR_CSP_VECTOR_OF_BUFS_UNSUPPORTED = -2147415767,
    CSSMERR_CSP_INVALID_INPUT_VECTOR = -2147415766,
    CSSMERR_CSP_INVALID_OUTPUT_VECTOR = -2147415765,
    CSSMERR_CSP_INVALID_CONTEXT = -2147415760,
    CSSMERR_CSP_INVALID_ALGORITHM = -2147415759,
    CSSMERR_CSP_INVALID_ATTR_KEY = -2147415754,
    CSSMERR_CSP_MISSING_ATTR_KEY = -2147415753,
    CSSMERR_CSP_INVALID_ATTR_INIT_VECTOR = -2147415752,
    CSSMERR_CSP_MISSING_ATTR_INIT_VECTOR = -2147415751,
    CSSMERR_CSP_INVALID_ATTR_SALT = -2147415750,
    CSSMERR_CSP_MISSING_ATTR_SALT = -2147415749,
    CSSMERR_CSP_INVALID_ATTR_PADDING = -2147415748,
    CSSMERR_CSP_MISSING_ATTR_PADDING = -2147415747,
    CSSMERR_CSP_INVALID_ATTR_RANDOM = -2147415746,
    CSSMERR_CSP_MISSING_ATTR_RANDOM = -2147415745,
    CSSMERR_CSP_INVALID_ATTR_SEED = -2147415744,
    CSSMERR_CSP_MISSING_ATTR_SEED = -2147415743,
    CSSMERR_CSP_INVALID_ATTR_PASSPHRASE = -2147415742,
    CSSMERR_CSP_MISSING_ATTR_PASSPHRASE = -2147415741,
    CSSMERR_CSP_INVALID_ATTR_KEY_LENGTH = -2147415740,
    CSSMERR_CSP_MISSING_ATTR_KEY_LENGTH = -2147415739,
    CSSMERR_CSP_INVALID_ATTR_BLOCK_SIZE = -2147415738,
    CSSMERR_CSP_MISSING_ATTR_BLOCK_SIZE = -2147415737,
    CSSMERR_CSP_INVALID_ATTR_OUTPUT_SIZE = -2147415708,
    CSSMERR_CSP_MISSING_ATTR_OUTPUT_SIZE = -2147415707,
    CSSMERR_CSP_INVALID_ATTR_ROUNDS = -2147415706,
    CSSMERR_CSP_MISSING_ATTR_ROUNDS = -2147415705,
    CSSMERR_CSP_INVALID_ATTR_ALG_PARAMS = -2147415704,
    CSSMERR_CSP_MISSING_ATTR_ALG_PARAMS = -2147415703,
    CSSMERR_CSP_INVALID_ATTR_LABEL = -2147415702,
    CSSMERR_CSP_MISSING_ATTR_LABEL = -2147415701,
    CSSMERR_CSP_INVALID_ATTR_KEY_TYPE = -2147415700,
    CSSMERR_CSP_MISSING_ATTR_KEY_TYPE = -2147415699,
    CSSMERR_CSP_INVALID_ATTR_MODE = -2147415698,
    CSSMERR_CSP_MISSING_ATTR_MODE = -2147415697,
    CSSMERR_CSP_INVALID_ATTR_EFFECTIVE_BITS = -2147415696,
    CSSMERR_CSP_MISSING_ATTR_EFFECTIVE_BITS = -2147415695,
    CSSMERR_CSP_INVALID_ATTR_START_DATE = -2147415694,
    CSSMERR_CSP_MISSING_ATTR_START_DATE = -2147415693,
    CSSMERR_CSP_INVALID_ATTR_END_DATE = -2147415692,
    CSSMERR_CSP_MISSING_ATTR_END_DATE = -2147415691,
    CSSMERR_CSP_INVALID_ATTR_VERSION = -2147415690,
    CSSMERR_CSP_MISSING_ATTR_VERSION = -2147415689,
    CSSMERR_CSP_INVALID_ATTR_PRIME = -2147415688,
    CSSMERR_CSP_MISSING_ATTR_PRIME = -2147415687,
    CSSMERR_CSP_INVALID_ATTR_BASE = -2147415686,
    CSSMERR_CSP_MISSING_ATTR_BASE = -2147415685,
    CSSMERR_CSP_INVALID_ATTR_SUBPRIME = -2147415684,
    CSSMERR_CSP_MISSING_ATTR_SUBPRIME = -2147415683,
    CSSMERR_CSP_INVALID_ATTR_ITERATION_COUNT = -2147415682,
    CSSMERR_CSP_MISSING_ATTR_ITERATION_COUNT = -2147415681,
    CSSMERR_CSP_INVALID_ATTR_DL_DB_HANDLE = -2147415680,
    CSSMERR_CSP_MISSING_ATTR_DL_DB_HANDLE = -2147415679,
    CSSMERR_CSP_INVALID_ATTR_ACCESS_CREDENTIALS = -2147415678,
    CSSMERR_CSP_MISSING_ATTR_ACCESS_CREDENTIALS = -2147415677,
    CSSMERR_CSP_INVALID_ATTR_PUBLIC_KEY_FORMAT = -2147415676,
    CSSMERR_CSP_MISSING_ATTR_PUBLIC_KEY_FORMAT = -2147415675,
    CSSMERR_CSP_INVALID_ATTR_PRIVATE_KEY_FORMAT = -2147415674,
    CSSMERR_CSP_MISSING_ATTR_PRIVATE_KEY_FORMAT = -2147415673,
    CSSMERR_CSP_INVALID_ATTR_SYMMETRIC_KEY_FORMAT = -2147415672,
    CSSMERR_CSP_MISSING_ATTR_SYMMETRIC_KEY_FORMAT = -2147415671,
    CSSMERR_CSP_INVALID_ATTR_WRAPPED_KEY_FORMAT = -2147415670,
    CSSMERR_CSP_MISSING_ATTR_WRAPPED_KEY_FORMAT = -2147415669,
    CSSMERR_CSP_STAGED_OPERATION_IN_PROGRESS = -2147415736,
    CSSMERR_CSP_STAGED_OPERATION_NOT_STARTED = -2147415735,
    CSSMERR_CSP_VERIFY_FAILED = -2147415734,
    CSSMERR_CSP_INVALID_SIGNATURE = -2147415733,
    CSSMERR_CSP_QUERY_SIZE_UNKNOWN = -2147415732,
    CSSMERR_CSP_BLOCK_SIZE_MISMATCH = -2147415731,
    CSSMERR_CSP_PRIVATE_KEY_NOT_FOUND = -2147415730,
    CSSMERR_CSP_PUBLIC_KEY_INCONSISTENT = -2147415729,
    CSSMERR_CSP_DEVICE_VERIFY_FAILED = -2147415728,
    CSSMERR_CSP_INVALID_LOGIN_NAME = -2147415727,
    CSSMERR_CSP_ALREADY_LOGGED_IN = -2147415726,
    CSSMERR_CSP_PRIVATE_KEY_ALREADY_EXISTS = -2147415725,
    CSSMERR_CSP_KEY_LABEL_ALREADY_EXISTS = -2147415724,
    CSSMERR_CSP_INVALID_DIGEST_ALGORITHM = -2147415723,
    CSSMERR_CSP_CRYPTO_DATA_CALLBACK_FAILED = -2147415722,
};

pub const anon3801 = enum(i32) {
    CSSMERR_TP_INTERNAL_ERROR = -2147409919,
    CSSMERR_TP_MEMORY_ERROR = -2147409918,
    CSSMERR_TP_MDS_ERROR = -2147409917,
    CSSMERR_TP_INVALID_POINTER = -2147409916,
    CSSMERR_TP_INVALID_INPUT_POINTER = -2147409915,
    CSSMERR_TP_INVALID_OUTPUT_POINTER = -2147409914,
    CSSMERR_TP_FUNCTION_NOT_IMPLEMENTED = -2147409913,
    CSSMERR_TP_SELF_CHECK_FAILED = -2147409912,
    CSSMERR_TP_OS_ACCESS_DENIED = -2147409911,
    CSSMERR_TP_FUNCTION_FAILED = -2147409910,
    CSSMERR_TP_INVALID_CONTEXT_HANDLE = -2147409856,
    CSSMERR_TP_INVALID_DATA = -2147409850,
    CSSMERR_TP_INVALID_DB_LIST = -2147409844,
    CSSMERR_TP_INVALID_CERTGROUP_POINTER = -2147409854,
    CSSMERR_TP_INVALID_CERT_POINTER = -2147409853,
    CSSMERR_TP_INVALID_CRL_POINTER = -2147409852,
    CSSMERR_TP_INVALID_FIELD_POINTER = -2147409851,
    CSSMERR_TP_INVALID_NETWORK_ADDR = -2147409833,
    CSSMERR_TP_CRL_ALREADY_SIGNED = -2147409849,
    CSSMERR_TP_INVALID_NUMBER_OF_FIELDS = -2147409848,
    CSSMERR_TP_VERIFICATION_FAILURE = -2147409847,
    CSSMERR_TP_INVALID_DB_HANDLE = -2147409846,
    CSSMERR_TP_UNKNOWN_FORMAT = -2147409842,
    CSSMERR_TP_UNKNOWN_TAG = -2147409841,
    CSSMERR_TP_INVALID_PASSTHROUGH_ID = -2147409834,
    CSSMERR_TP_INVALID_CSP_HANDLE = -2147409840,
    CSSMERR_TP_INVALID_DL_HANDLE = -2147409839,
    CSSMERR_TP_INVALID_CL_HANDLE = -2147409838,
    CSSMERR_TP_INVALID_DB_LIST_POINTER = -2147409843,
};

pub const anon4131 = enum(i32) {
    CSSM_TP_BASE_TP_ERROR = -2147409664,
    CSSMERR_TP_INVALID_CALLERAUTH_CONTEXT_POINTER = -2147409663,
    CSSMERR_TP_INVALID_IDENTIFIER_POINTER = -2147409662,
    CSSMERR_TP_INVALID_KEYCACHE_HANDLE = -2147409661,
    CSSMERR_TP_INVALID_CERTGROUP = -2147409660,
    CSSMERR_TP_INVALID_CRLGROUP = -2147409659,
    CSSMERR_TP_INVALID_CRLGROUP_POINTER = -2147409658,
    CSSMERR_TP_AUTHENTICATION_FAILED = -2147409657,
    CSSMERR_TP_CERTGROUP_INCOMPLETE = -2147409656,
    CSSMERR_TP_CERTIFICATE_CANT_OPERATE = -2147409655,
    CSSMERR_TP_CERT_EXPIRED = -2147409654,
    CSSMERR_TP_CERT_NOT_VALID_YET = -2147409653,
    CSSMERR_TP_CERT_REVOKED = -2147409652,
    CSSMERR_TP_CERT_SUSPENDED = -2147409651,
    CSSMERR_TP_INSUFFICIENT_CREDENTIALS = -2147409650,
    CSSMERR_TP_INVALID_ACTION = -2147409649,
    CSSMERR_TP_INVALID_ACTION_DATA = -2147409648,
    CSSMERR_TP_INVALID_ANCHOR_CERT = -2147409646,
    CSSMERR_TP_INVALID_AUTHORITY = -2147409645,
    CSSMERR_TP_VERIFY_ACTION_FAILED = -2147409644,
    CSSMERR_TP_INVALID_CERTIFICATE = -2147409643,
    CSSMERR_TP_INVALID_CERT_AUTHORITY = -2147409642,
    CSSMERR_TP_INVALID_CRL_AUTHORITY = -2147409641,
    CSSMERR_TP_INVALID_CRL_ENCODING = -2147409640,
    CSSMERR_TP_INVALID_CRL_TYPE = -2147409639,
    CSSMERR_TP_INVALID_CRL = -2147409638,
    CSSMERR_TP_INVALID_FORM_TYPE = -2147409637,
    CSSMERR_TP_INVALID_ID = -2147409636,
    CSSMERR_TP_INVALID_IDENTIFIER = -2147409635,
    CSSMERR_TP_INVALID_INDEX = -2147409634,
    CSSMERR_TP_INVALID_NAME = -2147409633,
    CSSMERR_TP_INVALID_POLICY_IDENTIFIERS = -2147409632,
    CSSMERR_TP_INVALID_TIMESTRING = -2147409631,
    CSSMERR_TP_INVALID_REASON = -2147409630,
    CSSMERR_TP_INVALID_REQUEST_INPUTS = -2147409629,
    CSSMERR_TP_INVALID_RESPONSE_VECTOR = -2147409628,
    CSSMERR_TP_INVALID_SIGNATURE = -2147409627,
    CSSMERR_TP_INVALID_STOP_ON_POLICY = -2147409626,
    CSSMERR_TP_INVALID_CALLBACK = -2147409625,
    CSSMERR_TP_INVALID_TUPLE = -2147409624,
    CSSMERR_TP_NOT_SIGNER = -2147409623,
    CSSMERR_TP_NOT_TRUSTED = -2147409622,
    CSSMERR_TP_NO_DEFAULT_AUTHORITY = -2147409621,
    CSSMERR_TP_REJECTED_FORM = -2147409620,
    CSSMERR_TP_REQUEST_LOST = -2147409619,
    CSSMERR_TP_REQUEST_REJECTED = -2147409618,
    CSSMERR_TP_UNSUPPORTED_ADDR_TYPE = -2147409617,
    CSSMERR_TP_UNSUPPORTED_SERVICE = -2147409616,
    CSSMERR_TP_INVALID_TUPLEGROUP_POINTER = -2147409615,
    CSSMERR_TP_INVALID_TUPLEGROUP = -2147409614,
};

pub const anon4681 = enum(i32) {
    CSSMERR_AC_INTERNAL_ERROR = -2147405823,
    CSSMERR_AC_MEMORY_ERROR = -2147405822,
    CSSMERR_AC_MDS_ERROR = -2147405821,
    CSSMERR_AC_INVALID_POINTER = -2147405820,
    CSSMERR_AC_INVALID_INPUT_POINTER = -2147405819,
    CSSMERR_AC_INVALID_OUTPUT_POINTER = -2147405818,
    CSSMERR_AC_FUNCTION_NOT_IMPLEMENTED = -2147405817,
    CSSMERR_AC_SELF_CHECK_FAILED = -2147405816,
    CSSMERR_AC_OS_ACCESS_DENIED = -2147405815,
    CSSMERR_AC_FUNCTION_FAILED = -2147405814,
    CSSMERR_AC_INVALID_CONTEXT_HANDLE = -2147405760,
    CSSMERR_AC_INVALID_DATA = -2147405754,
    CSSMERR_AC_INVALID_DB_LIST = -2147405748,
    CSSMERR_AC_INVALID_PASSTHROUGH_ID = -2147405738,
    CSSMERR_AC_INVALID_DL_HANDLE = -2147405743,
    CSSMERR_AC_INVALID_CL_HANDLE = -2147405742,
    CSSMERR_AC_INVALID_TP_HANDLE = -2147405741,
    CSSMERR_AC_INVALID_DB_HANDLE = -2147405750,
    CSSMERR_AC_INVALID_DB_LIST_POINTER = -2147405747,
};

pub const anon4911 = enum(i32) {
    CSSM_AC_BASE_AC_ERROR = -2147405568,
    CSSMERR_AC_INVALID_BASE_ACLS = -2147405567,
    CSSMERR_AC_INVALID_TUPLE_CREDENTIALS = -2147405566,
    CSSMERR_AC_INVALID_ENCODING = -2147405565,
    CSSMERR_AC_INVALID_VALIDITY_PERIOD = -2147405564,
    CSSMERR_AC_INVALID_REQUESTOR = -2147405563,
    CSSMERR_AC_INVALID_REQUEST_DESCRIPTOR = -2147405562,
};

pub const anon5031 = enum(i32) {
    CSSMERR_CL_INTERNAL_ERROR = -2147411967,
    CSSMERR_CL_MEMORY_ERROR = -2147411966,
    CSSMERR_CL_MDS_ERROR = -2147411965,
    CSSMERR_CL_INVALID_POINTER = -2147411964,
    CSSMERR_CL_INVALID_INPUT_POINTER = -2147411963,
    CSSMERR_CL_INVALID_OUTPUT_POINTER = -2147411962,
    CSSMERR_CL_FUNCTION_NOT_IMPLEMENTED = -2147411961,
    CSSMERR_CL_SELF_CHECK_FAILED = -2147411960,
    CSSMERR_CL_OS_ACCESS_DENIED = -2147411959,
    CSSMERR_CL_FUNCTION_FAILED = -2147411958,
    CSSMERR_CL_INVALID_CONTEXT_HANDLE = -2147411904,
    CSSMERR_CL_INVALID_CERTGROUP_POINTER = -2147411902,
    CSSMERR_CL_INVALID_CERT_POINTER = -2147411901,
    CSSMERR_CL_INVALID_CRL_POINTER = -2147411900,
    CSSMERR_CL_INVALID_FIELD_POINTER = -2147411899,
    CSSMERR_CL_INVALID_DATA = -2147411898,
    CSSMERR_CL_CRL_ALREADY_SIGNED = -2147411897,
    CSSMERR_CL_INVALID_NUMBER_OF_FIELDS = -2147411896,
    CSSMERR_CL_VERIFICATION_FAILURE = -2147411895,
    CSSMERR_CL_UNKNOWN_FORMAT = -2147411890,
    CSSMERR_CL_UNKNOWN_TAG = -2147411889,
    CSSMERR_CL_INVALID_PASSTHROUGH_ID = -2147411882,
};

pub const anon5291 = enum(i32) {
    CSSM_CL_BASE_CL_ERROR = -2147411712,
    CSSMERR_CL_INVALID_BUNDLE_POINTER = -2147411711,
    CSSMERR_CL_INVALID_CACHE_HANDLE = -2147411710,
    CSSMERR_CL_INVALID_RESULTS_HANDLE = -2147411709,
    CSSMERR_CL_INVALID_BUNDLE_INFO = -2147411708,
    CSSMERR_CL_INVALID_CRL_INDEX = -2147411707,
    CSSMERR_CL_INVALID_SCOPE = -2147411706,
    CSSMERR_CL_NO_FIELD_VALUES = -2147411705,
    CSSMERR_CL_SCOPE_NOT_SUPPORTED = -2147411704,
};

pub const anon5431 = enum(i32) {
    CSSMERR_DL_INTERNAL_ERROR = -2147414015,
    CSSMERR_DL_MEMORY_ERROR = -2147414014,
    CSSMERR_DL_MDS_ERROR = -2147414013,
    CSSMERR_DL_INVALID_POINTER = -2147414012,
    CSSMERR_DL_INVALID_INPUT_POINTER = -2147414011,
    CSSMERR_DL_INVALID_OUTPUT_POINTER = -2147414010,
    CSSMERR_DL_FUNCTION_NOT_IMPLEMENTED = -2147414009,
    CSSMERR_DL_SELF_CHECK_FAILED = -2147414008,
    CSSMERR_DL_OS_ACCESS_DENIED = -2147414007,
    CSSMERR_DL_FUNCTION_FAILED = -2147414006,
    CSSMERR_DL_INVALID_CSP_HANDLE = -2147413936,
    CSSMERR_DL_INVALID_DL_HANDLE = -2147413935,
    CSSMERR_DL_INVALID_CL_HANDLE = -2147413934,
    CSSMERR_DL_INVALID_DB_LIST_POINTER = -2147413939,
};

pub const anon5611 = enum(i32) {
    CSSMERR_DL_OPERATION_AUTH_DENIED = -2147413984,
    CSSMERR_DL_OBJECT_USE_AUTH_DENIED = -2147413983,
    CSSMERR_DL_OBJECT_MANIP_AUTH_DENIED = -2147413982,
    CSSMERR_DL_OBJECT_ACL_NOT_SUPPORTED = -2147413981,
    CSSMERR_DL_OBJECT_ACL_REQUIRED = -2147413980,
    CSSMERR_DL_INVALID_ACCESS_CREDENTIALS = -2147413979,
    CSSMERR_DL_INVALID_ACL_BASE_CERTS = -2147413978,
    CSSMERR_DL_ACL_BASE_CERTS_NOT_SUPPORTED = -2147413977,
    CSSMERR_DL_INVALID_SAMPLE_VALUE = -2147413976,
    CSSMERR_DL_SAMPLE_VALUE_NOT_SUPPORTED = -2147413975,
    CSSMERR_DL_INVALID_ACL_SUBJECT_VALUE = -2147413974,
    CSSMERR_DL_ACL_SUBJECT_TYPE_NOT_SUPPORTED = -2147413973,
    CSSMERR_DL_INVALID_ACL_CHALLENGE_CALLBACK = -2147413972,
    CSSMERR_DL_ACL_CHALLENGE_CALLBACK_FAILED = -2147413971,
    CSSMERR_DL_INVALID_ACL_ENTRY_TAG = -2147413970,
    CSSMERR_DL_ACL_ENTRY_TAG_NOT_FOUND = -2147413969,
    CSSMERR_DL_INVALID_ACL_EDIT_MODE = -2147413968,
    CSSMERR_DL_ACL_CHANGE_FAILED = -2147413967,
    CSSMERR_DL_INVALID_NEW_ACL_ENTRY = -2147413966,
    CSSMERR_DL_INVALID_NEW_ACL_OWNER = -2147413965,
    CSSMERR_DL_ACL_DELETE_FAILED = -2147413964,
    CSSMERR_DL_ACL_REPLACE_FAILED = -2147413963,
    CSSMERR_DL_ACL_ADD_FAILED = -2147413962,
};

pub const anon5881 = enum(i32) {
    CSSMERR_DL_INVALID_DB_HANDLE = -2147413942,
    CSSMERR_DL_INVALID_PASSTHROUGH_ID = -2147413930,
    CSSMERR_DL_INVALID_NETWORK_ADDR = -2147413929,
};

pub const anon5951 = enum(i32) {
    CSSM_DL_BASE_DL_ERROR = -2147413760,
    CSSMERR_DL_DATABASE_CORRUPT = -2147413759,
    CSSMERR_DL_INVALID_RECORD_INDEX = -2147413752,
    CSSMERR_DL_INVALID_RECORDTYPE = -2147413751,
    CSSMERR_DL_INVALID_FIELD_NAME = -2147413750,
    CSSMERR_DL_UNSUPPORTED_FIELD_FORMAT = -2147413749,
    CSSMERR_DL_UNSUPPORTED_INDEX_INFO = -2147413748,
    CSSMERR_DL_UNSUPPORTED_LOCALITY = -2147413747,
    CSSMERR_DL_UNSUPPORTED_NUM_ATTRIBUTES = -2147413746,
    CSSMERR_DL_UNSUPPORTED_NUM_INDEXES = -2147413745,
    CSSMERR_DL_UNSUPPORTED_NUM_RECORDTYPES = -2147413744,
    CSSMERR_DL_UNSUPPORTED_RECORDTYPE = -2147413743,
    CSSMERR_DL_FIELD_SPECIFIED_MULTIPLE = -2147413742,
    CSSMERR_DL_INCOMPATIBLE_FIELD_FORMAT = -2147413741,
    CSSMERR_DL_INVALID_PARSING_MODULE = -2147413740,
    CSSMERR_DL_INVALID_DB_NAME = -2147413738,
    CSSMERR_DL_DATASTORE_DOESNOT_EXIST = -2147413737,
    CSSMERR_DL_DATASTORE_ALREADY_EXISTS = -2147413736,
    CSSMERR_DL_DB_LOCKED = -2147413735,
    CSSMERR_DL_DATASTORE_IS_OPEN = -2147413734,
    CSSMERR_DL_RECORD_NOT_FOUND = -2147413733,
    CSSMERR_DL_MISSING_VALUE = -2147413732,
    CSSMERR_DL_UNSUPPORTED_QUERY = -2147413731,
    CSSMERR_DL_UNSUPPORTED_QUERY_LIMITS = -2147413730,
    CSSMERR_DL_UNSUPPORTED_NUM_SELECTION_PREDS = -2147413729,
    CSSMERR_DL_UNSUPPORTED_OPERATOR = -2147413727,
    CSSMERR_DL_INVALID_RESULTS_HANDLE = -2147413726,
    CSSMERR_DL_INVALID_DB_LOCATION = -2147413725,
    CSSMERR_DL_INVALID_ACCESS_REQUEST = -2147413724,
    CSSMERR_DL_INVALID_INDEX_INFO = -2147413723,
    CSSMERR_DL_INVALID_SELECTION_TAG = -2147413722,
    CSSMERR_DL_INVALID_NEW_OWNER = -2147413721,
    CSSMERR_DL_INVALID_RECORD_UID = -2147413720,
    CSSMERR_DL_INVALID_UNIQUE_INDEX_DATA = -2147413719,
    CSSMERR_DL_INVALID_MODIFY_MODE = -2147413718,
    CSSMERR_DL_INVALID_OPEN_PARAMETERS = -2147413717,
    CSSMERR_DL_RECORD_MODIFIED = -2147413716,
    CSSMERR_DL_ENDOFDATA = -2147413715,
    CSSMERR_DL_INVALID_QUERY = -2147413714,
    CSSMERR_DL_INVALID_VALUE = -2147413713,
    CSSMERR_DL_MULTIPLE_VALUES_UNSUPPORTED = -2147413712,
    CSSMERR_DL_STALE_UNIQUE_RECORD = -2147413711,
};

pub const __CE_GeneralNameType = enum(u32) {
    GNT_OtherName = 0,
    GNT_RFC822Name = 1,
    GNT_DNSName = 2,
    GNT_X400Address = 3,
    GNT_DirectoryName = 4,
    GNT_EdiPartyName = 5,
    GNT_URI = 6,
    GNT_IPAddress = 7,
    GNT_RegisteredID = 8,
};

pub const __CE_OtherName = extern struct {
    typeId: Asn1Oid,
    value: Asn1Item,
};

pub const __CE_GeneralName = extern struct {
    nameType: CE_GeneralNameType,
    berEncoded: CSSM_BOOL,
    name: Asn1Item,
};

pub const __CE_GeneralNames = extern struct {
    numNames: uint32,
    generalName: ?*CE_GeneralName,
};

pub const __CE_AuthorityKeyID = extern struct {
    keyIdentifierPresent: CSSM_BOOL,
    keyIdentifier: Asn1Item,
    generalNamesPresent: CSSM_BOOL,
    generalNames: ?*CE_GeneralNames,
    serialNumberPresent: CSSM_BOOL,
    serialNumber: Asn1Item,
};

pub const CE_SubjectKeyID = Asn1Item;

pub const CE_KeyUsage = uint16;

pub const CE_CrlReason = uint32;

pub const __CE_ExtendedKeyUsage = extern struct {
    numPurposes: uint32,
    purposes: CSSM_OID_PTR,
};

pub const __CE_BasicConstraints = extern struct {
    cA: CSSM_BOOL,
    pathLenConstraintPresent: CSSM_BOOL,
    pathLenConstraint: uint32,
};

pub const __CE_PolicyQualifierInfo = extern struct {
    policyQualifierId: Asn1Oid,
    qualifier: Asn1Item,
};

pub const __CE_PolicyInformation = extern struct {
    certPolicyId: Asn1Oid,
    numPolicyQualifiers: uint32,
    policyQualifiers: ?*CE_PolicyQualifierInfo,
};

pub const __CE_CertPolicies = extern struct {
    numPolicies: uint32,
    policies: ?*CE_PolicyInformation,
};

pub const CE_NetscapeCertType = uint16;

pub const CE_CrlDistReasonFlags = uint8;

pub const __CE_CrlDistributionPointNameType = enum(u32) {
    CE_CDNT_FullName = 0,
    CE_CDNT_NameRelativeToCrlIssuer = 1,
};

pub const __CE_DistributionPointName = extern struct {
    nameType: CE_CrlDistributionPointNameType,
    dpn: anon5372,
};

pub const anon5372 = extern union {
    fullName: ?*CE_GeneralNames,
    rdn: CSSM_X509_RDN_PTR,
};

pub const __CE_CRLDistributionPoint = extern struct {
    distPointName: ?*CE_DistributionPointName,
    reasonsPresent: CSSM_BOOL,
    reasons: CE_CrlDistReasonFlags,
    crlIssuer: ?*CE_GeneralNames,
};

pub const __CE_CRLDistPointsSyntax = extern struct {
    numDistPoints: uint32,
    distPoints: ?*CE_CRLDistributionPoint,
};

pub const __CE_AccessDescription = extern struct {
    accessMethod: Asn1Oid,
    accessLocation: CE_GeneralName,
};

pub const __CE_AuthorityInfoAccess = extern struct {
    numAccessDescriptions: uint32,
    accessDescriptions: ?*CE_AccessDescription,
};

pub const CE_NameRegistrationAuthorities = CE_GeneralNames;

pub const __CE_SemanticsInformation = extern struct {
    semanticsIdentifier: ?*Asn1Oid,
    nameRegistrationAuthorities: ?*CE_NameRegistrationAuthorities,
};

pub const __CE_QC_Statement = extern struct {
    statementId: Asn1Oid,
    semanticsInfo: ?*CE_SemanticsInformation,
    otherInfo: ?*Asn1Item,
};

pub const __CE_QC_Statements = extern struct {
    numQCStatements: uint32,
    qcStatements: ?*CE_QC_Statement,
};

pub const CE_CrlNumber = uint32;

pub const CE_DeltaCrl = uint32;

pub const __CE_IssuingDistributionPoint = extern struct {
    distPointName: ?*CE_DistributionPointName,
    onlyUserCertsPresent: CSSM_BOOL,
    onlyUserCerts: CSSM_BOOL,
    onlyCACertsPresent: CSSM_BOOL,
    onlyCACerts: CSSM_BOOL,
    onlySomeReasonsPresent: CSSM_BOOL,
    onlySomeReasons: CE_CrlDistReasonFlags,
    indirectCrlPresent: CSSM_BOOL,
    indirectCrl: CSSM_BOOL,
};

pub const __CE_GeneralSubtree = extern struct {
    base: ?*CE_GeneralNames,
    minimum: uint32,
    maximumPresent: CSSM_BOOL,
    maximum: uint32,
};

pub const __CE_GeneralSubtrees = extern struct {
    numSubtrees: uint32,
    subtrees: ?*CE_GeneralSubtree,
};

pub const __CE_NameConstraints = extern struct {
    permitted: ?*CE_GeneralSubtrees,
    excluded: ?*CE_GeneralSubtrees,
};

pub const __CE_PolicyMapping = extern struct {
    issuerDomainPolicy: Asn1Oid,
    subjectDomainPolicy: Asn1Oid,
};

pub const __CE_PolicyMappings = extern struct {
    numPolicyMappings: uint32,
    policyMappings: ?*CE_PolicyMapping,
};

pub const __CE_PolicyConstraints = extern struct {
    requireExplicitPolicyPresent: CSSM_BOOL,
    requireExplicitPolicy: uint32,
    inhibitPolicyMappingPresent: CSSM_BOOL,
    inhibitPolicyMapping: uint32,
};

pub const CE_InhibitAnyPolicy = uint32;

pub const __CE_DataType = enum(u32) {
    DT_AuthorityKeyID = 0,
    DT_SubjectKeyID = 1,
    DT_KeyUsage = 2,
    DT_SubjectAltName = 3,
    DT_IssuerAltName = 4,
    DT_ExtendedKeyUsage = 5,
    DT_BasicConstraints = 6,
    DT_CertPolicies = 7,
    DT_NetscapeCertType = 8,
    DT_CrlNumber = 9,
    DT_DeltaCrl = 10,
    DT_CrlReason = 11,
    DT_CrlDistributionPoints = 12,
    DT_IssuingDistributionPoint = 13,
    DT_AuthorityInfoAccess = 14,
    DT_Other = 15,
    DT_QC_Statements = 16,
    DT_NameConstraints = 17,
    DT_PolicyMappings = 18,
    DT_PolicyConstraints = 19,
    DT_InhibitAnyPolicy = 20,
};

pub const CE_Data = extern union {
    authorityKeyID: CE_AuthorityKeyID,
    subjectKeyID: CE_SubjectKeyID,
    keyUsage: CE_KeyUsage,
    subjectAltName: CE_GeneralNames,
    issuerAltName: CE_GeneralNames,
    extendedKeyUsage: CE_ExtendedKeyUsage,
    basicConstraints: CE_BasicConstraints,
    certPolicies: CE_CertPolicies,
    netscapeCertType: CE_NetscapeCertType,
    crlNumber: CE_CrlNumber,
    deltaCrl: CE_DeltaCrl,
    crlReason: CE_CrlReason,
    crlDistPoints: CE_CRLDistPointsSyntax,
    issuingDistPoint: CE_IssuingDistributionPoint,
    authorityInfoAccess: CE_AuthorityInfoAccess,
    qualifiedCertStatements: CE_QC_Statements,
    nameConstraints: CE_NameConstraints,
    policyMappings: CE_PolicyMappings,
    policyConstraints: CE_PolicyConstraints,
    inhibitAnyPolicy: CE_InhibitAnyPolicy,
    rawData: Asn1Item,
};

pub const __CE_DataAndType = extern struct {
    @"type": CE_DataType,
    extension: CE_Data,
    critical: CSSM_BOOL,
};

pub const anon821 = enum(u32) {
    CSSM_HINT_NONE = 0,
    CSSM_HINT_ADDRESS_APP = 1,
    CSSM_HINT_ADDRESS_SP = 2,
};

pub const anon1021 = enum(u32) {
    CSSM_ACL_SUBJECT_TYPE_KEYCHAIN_PROMPT = 65536,
    CSSM_ACL_SUBJECT_TYPE_PROCESS = 65539,
    CSSM_ACL_SUBJECT_TYPE_CODE_SIGNATURE = 116,
    CSSM_ACL_SUBJECT_TYPE_COMMENT = 12,
    CSSM_ACL_SUBJECT_TYPE_SYMMETRIC_KEY = 65541,
    CSSM_ACL_SUBJECT_TYPE_PREAUTH = 65545,
    CSSM_ACL_SUBJECT_TYPE_PREAUTH_SOURCE = 65546,
    CSSM_ACL_SUBJECT_TYPE_ASYMMETRIC_KEY = 65547,
    CSSM_ACL_SUBJECT_TYPE_PARTITION = 65548,
};

pub const anon1151 = enum(objc.OSStatus) {
    errSessionSuccess = 0,
    errSessionInvalidId = -60500,
    errSessionInvalidAttributes = -60501,
    errSessionAuthorizationDenied = -60502,
    errSessionValueNotSet = -60503,
    errSessionInternal = -60008,
    errSessionInvalidFlags = -60011,
};

pub const anon1561 = enum(u32) {
    CSSM_ACL_CODE_SIGNATURE_INVALID = 0,
    CSSM_ACL_CODE_SIGNATURE_OSX = 1,
};

pub const anon1631 = enum(u32) {
    CSSM_ACL_MATCH_UID = 1,
    CSSM_ACL_MATCH_GID = 2,
    CSSM_ACL_MATCH_HONOR_ROOT = 256,
    CSSM_ACL_MATCH_BITS = 3,
};

pub const anon1701 = enum(u32) {
    CSSM_ACL_PROCESS_SELECTOR_CURRENT_VERSION = 257,
};

pub const cssm_acl_process_subject_selector = extern struct {
    version: uint16,
    mask: uint16,
    uid: uint32,
    gid: uint32,
};

pub const anon1831 = enum(u32) {
    CSSM_ACL_KEYCHAIN_PROMPT_CURRENT_VERSION = 257,
};

pub const anon1871 = enum(u32) {
    CSSM_ACL_KEYCHAIN_PROMPT_REQUIRE_PASSPHRASE = 1,
    CSSM_ACL_KEYCHAIN_PROMPT_UNSIGNED = 16,
    CSSM_ACL_KEYCHAIN_PROMPT_UNSIGNED_ACT = 32,
    CSSM_ACL_KEYCHAIN_PROMPT_INVALID = 64,
    CSSM_ACL_KEYCHAIN_PROMPT_INVALID_ACT = 128,
};

pub const cssm_acl_keychain_prompt_selector = extern struct {
    version: uint16,
    flags: uint16,
};

pub const CSSM_ACL_PREAUTH_TRACKING_STATE = uint32;

pub const anon2031 = enum(u32) {
    CSSM_ACL_PREAUTH_TRACKING_COUNT_MASK = 255,
    CSSM_ACL_PREAUTH_TRACKING_BLOCKED = 0,
    CSSM_ACL_PREAUTH_TRACKING_UNKNOWN = 1073741824,
    CSSM_ACL_PREAUTH_TRACKING_AUTHORIZED = -2147483648,
};

pub const anon2151 = enum(u32) {
    CSSM_DB_ACCESS_RESET = 65536,
};

pub const anon2211 = enum(u32) {
    CSSM_ALGID_APPLE_YARROW = -2147483648,
    CSSM_ALGID_AES = -2147483647,
    CSSM_ALGID_FEE = -2147483646,
    CSSM_ALGID_FEE_MD5 = -2147483645,
    CSSM_ALGID_FEE_SHA1 = -2147483644,
    CSSM_ALGID_FEED = -2147483643,
    CSSM_ALGID_FEEDEXP = -2147483642,
    CSSM_ALGID_ASC = -2147483641,
    CSSM_ALGID_SHA1HMAC_LEGACY = -2147483640,
    CSSM_ALGID_KEYCHAIN_KEY = -2147483639,
    CSSM_ALGID_PKCS12_PBE_ENCR = -2147483638,
    CSSM_ALGID_PKCS12_PBE_MAC = -2147483637,
    CSSM_ALGID_SECURE_PASSPHRASE = -2147483636,
    CSSM_ALGID_PBE_OPENSSL_MD5 = -2147483635,
    CSSM_ALGID_SHA256 = -2147483634,
    CSSM_ALGID_SHA384 = -2147483633,
    CSSM_ALGID_SHA512 = -2147483632,
    CSSM_ALGID_ENTROPY_DEFAULT = -2147483631,
    CSSM_ALGID_SHA224 = -2147483630,
    CSSM_ALGID_SHA224WithRSA = -2147483629,
    CSSM_ALGID_SHA256WithRSA = -2147483628,
    CSSM_ALGID_SHA384WithRSA = -2147483627,
    CSSM_ALGID_SHA512WithRSA = -2147483626,
    CSSM_ALGID_OPENSSH1 = -2147483625,
    CSSM_ALGID_SHA224WithECDSA = -2147483624,
    CSSM_ALGID_SHA256WithECDSA = -2147483623,
    CSSM_ALGID_SHA384WithECDSA = -2147483622,
    CSSM_ALGID_SHA512WithECDSA = -2147483621,
    CSSM_ALGID_ECDSA_SPECIFIED = -2147483620,
    CSSM_ALGID_ECDH_X963_KDF = -2147483619,
    CSSM_ALGID__FIRST_UNUSED = -2147483618,
};

pub const anon2651 = enum(u32) {
    CSSM_KEYBLOB_RAW_FORMAT_VENDOR_DEFINED = -2147483648,
};

pub const anon2681 = enum(u32) {
    CSSM_KEYBLOB_RAW_FORMAT_X509 = -2147483648,
    CSSM_KEYBLOB_RAW_FORMAT_OPENSSH = -2147483647,
    CSSM_KEYBLOB_RAW_FORMAT_OPENSSL = -2147483646,
    CSSM_KEYBLOB_RAW_FORMAT_OPENSSH2 = -2147483645,
};

pub const anon2801 = enum(u32) {
    CSSM_CUSTOM_COMMON_ERROR_EXTENT = 224,
    CSSM_ERRCODE_NO_USER_INTERACTION = 224,
    CSSM_ERRCODE_USER_CANCELED = 225,
    CSSM_ERRCODE_SERVICE_NOT_AVAILABLE = 226,
    CSSM_ERRCODE_INSUFFICIENT_CLIENT_IDENTIFICATION = 227,
    CSSM_ERRCODE_DEVICE_RESET = 228,
    CSSM_ERRCODE_DEVICE_FAILED = 229,
    CSSM_ERRCODE_IN_DARK_WAKE = 230,
};

pub const anon2931 = enum(i32) {
    CSSMERR_CSSM_NO_USER_INTERACTION = -2147417888,
    CSSMERR_AC_NO_USER_INTERACTION = -2147405600,
    CSSMERR_CSP_NO_USER_INTERACTION = -2147415840,
    CSSMERR_CL_NO_USER_INTERACTION = -2147411744,
    CSSMERR_DL_NO_USER_INTERACTION = -2147413792,
    CSSMERR_TP_NO_USER_INTERACTION = -2147409696,
    CSSMERR_CSSM_USER_CANCELED = -2147417887,
    CSSMERR_AC_USER_CANCELED = -2147405599,
    CSSMERR_CSP_USER_CANCELED = -2147415839,
    CSSMERR_CL_USER_CANCELED = -2147411743,
    CSSMERR_DL_USER_CANCELED = -2147413791,
    CSSMERR_TP_USER_CANCELED = -2147409695,
    CSSMERR_CSSM_SERVICE_NOT_AVAILABLE = -2147417886,
    CSSMERR_AC_SERVICE_NOT_AVAILABLE = -2147405598,
    CSSMERR_CSP_SERVICE_NOT_AVAILABLE = -2147415838,
    CSSMERR_CL_SERVICE_NOT_AVAILABLE = -2147411742,
    CSSMERR_DL_SERVICE_NOT_AVAILABLE = -2147413790,
    CSSMERR_TP_SERVICE_NOT_AVAILABLE = -2147409694,
    CSSMERR_CSSM_INSUFFICIENT_CLIENT_IDENTIFICATION = -2147417885,
    CSSMERR_AC_INSUFFICIENT_CLIENT_IDENTIFICATION = -2147405597,
    CSSMERR_CSP_INSUFFICIENT_CLIENT_IDENTIFICATION = -2147415837,
    CSSMERR_CL_INSUFFICIENT_CLIENT_IDENTIFICATION = -2147411741,
    CSSMERR_DL_INSUFFICIENT_CLIENT_IDENTIFICATION = -2147413789,
    CSSMERR_TP_INSUFFICIENT_CLIENT_IDENTIFICATION = -2147409693,
    CSSMERR_CSSM_DEVICE_RESET = -2147417884,
    CSSMERR_AC_DEVICE_RESET = -2147405596,
    CSSMERR_CSP_DEVICE_RESET = -2147415836,
    CSSMERR_CL_DEVICE_RESET = -2147411740,
    CSSMERR_DL_DEVICE_RESET = -2147413788,
    CSSMERR_TP_DEVICE_RESET = -2147409692,
    CSSMERR_CSSM_DEVICE_FAILED = -2147417883,
    CSSMERR_AC_DEVICE_FAILED = -2147405595,
    CSSMERR_CSP_DEVICE_FAILED = -2147415835,
    CSSMERR_CL_DEVICE_FAILED = -2147411739,
    CSSMERR_DL_DEVICE_FAILED = -2147413787,
    CSSMERR_TP_DEVICE_FAILED = -2147409691,
    CSSMERR_CSSM_IN_DARK_WAKE = -2147417882,
    CSSMERR_AC_IN_DARK_WAKE = -2147405594,
    CSSMERR_CSP_IN_DARK_WAKE = -2147415834,
    CSSMERR_CL_IN_DARK_WAKE = -2147411738,
    CSSMERR_DL_IN_DARK_WAKE = -2147413786,
    CSSMERR_TP_IN_DARK_WAKE = -2147409690,
};

pub const anon3451 = enum(i32) {
    CSSMERR_CSP_APPLE_ADD_APPLICATION_ACL_SUBJECT = -2147415040,
    CSSMERR_CSP_APPLE_PUBLIC_KEY_INCOMPLETE = -2147415039,
    CSSMERR_CSP_APPLE_SIGNATURE_MISMATCH = -2147415038,
    CSSMERR_CSP_APPLE_INVALID_KEY_START_DATE = -2147415037,
    CSSMERR_CSP_APPLE_INVALID_KEY_END_DATE = -2147415036,
    CSSMERR_CSPDL_APPLE_DL_CONVERSION_ERROR = -2147415035,
    CSSMERR_CSP_APPLE_SSLv2_ROLLBACK = -2147415034,
};

pub const anon3831 = enum(u32) {
    CSSM_APPLEFILEDL_TOGGLE_AUTOCOMMIT = 0,
    CSSM_APPLEFILEDL_COMMIT = 1,
    CSSM_APPLEFILEDL_ROLLBACK = 2,
    CSSM_APPLEFILEDL_TAKE_FILE_LOCK = 3,
    CSSM_APPLEFILEDL_MAKE_BACKUP = 4,
    CSSM_APPLEFILEDL_MAKE_COPY = 5,
    CSSM_APPLEFILEDL_DELETE_FILE = 6,
};

pub const anon4101 = enum(u32) {
    CSSM_APPLE_UNLOCK_TYPE_KEY_DIRECT = 1,
    CSSM_APPLE_UNLOCK_TYPE_WRAPPED_PRIVATE = 2,
    CSSM_APPLE_UNLOCK_TYPE_KEYBAG = 3,
};

pub const anon4171 = enum(i32) {
    CSSMERR_APPLEDL_INVALID_OPEN_PARAMETERS = -2147412992,
    CSSMERR_APPLEDL_DISK_FULL = -2147412991,
    CSSMERR_APPLEDL_QUOTA_EXCEEDED = -2147412990,
    CSSMERR_APPLEDL_FILE_TOO_BIG = -2147412989,
    CSSMERR_APPLEDL_INVALID_DATABASE_BLOB = -2147412988,
    CSSMERR_APPLEDL_INVALID_KEY_BLOB = -2147412987,
    CSSMERR_APPLEDL_INCOMPATIBLE_DATABASE_BLOB = -2147412986,
    CSSMERR_APPLEDL_INCOMPATIBLE_KEY_BLOB = -2147412985,
};

pub const anon4471 = enum(i32) {
    CSSMERR_APPLETP_HOSTNAME_MISMATCH = -2147408896,
    CSSMERR_APPLETP_UNKNOWN_CRITICAL_EXTEN = -2147408895,
    CSSMERR_APPLETP_NO_BASIC_CONSTRAINTS = -2147408894,
    CSSMERR_APPLETP_INVALID_CA = -2147408893,
    CSSMERR_APPLETP_INVALID_AUTHORITY_ID = -2147408892,
    CSSMERR_APPLETP_INVALID_SUBJECT_ID = -2147408891,
    CSSMERR_APPLETP_INVALID_KEY_USAGE = -2147408890,
    CSSMERR_APPLETP_INVALID_EXTENDED_KEY_USAGE = -2147408889,
    CSSMERR_APPLETP_INVALID_ID_LINKAGE = -2147408888,
    CSSMERR_APPLETP_PATH_LEN_CONSTRAINT = -2147408887,
    CSSMERR_APPLETP_INVALID_ROOT = -2147408886,
    CSSMERR_APPLETP_CRL_EXPIRED = -2147408885,
    CSSMERR_APPLETP_CRL_NOT_VALID_YET = -2147408884,
    CSSMERR_APPLETP_CRL_NOT_FOUND = -2147408883,
    CSSMERR_APPLETP_CRL_SERVER_DOWN = -2147408882,
    CSSMERR_APPLETP_CRL_BAD_URI = -2147408881,
    CSSMERR_APPLETP_UNKNOWN_CERT_EXTEN = -2147408880,
    CSSMERR_APPLETP_UNKNOWN_CRL_EXTEN = -2147408879,
    CSSMERR_APPLETP_CRL_NOT_TRUSTED = -2147408878,
    CSSMERR_APPLETP_CRL_INVALID_ANCHOR_CERT = -2147408877,
    CSSMERR_APPLETP_CRL_POLICY_FAIL = -2147408876,
    CSSMERR_APPLETP_IDP_FAIL = -2147408875,
    CSSMERR_APPLETP_CERT_NOT_FOUND_FROM_ISSUER = -2147408874,
    CSSMERR_APPLETP_BAD_CERT_FROM_ISSUER = -2147408873,
    CSSMERR_APPLETP_SMIME_EMAIL_ADDRS_NOT_FOUND = -2147408872,
    CSSMERR_APPLETP_SMIME_BAD_EXT_KEY_USE = -2147408871,
    CSSMERR_APPLETP_SMIME_BAD_KEY_USE = -2147408870,
    CSSMERR_APPLETP_SMIME_KEYUSAGE_NOT_CRITICAL = -2147408869,
    CSSMERR_APPLETP_SMIME_NO_EMAIL_ADDRS = -2147408868,
    CSSMERR_APPLETP_SMIME_SUBJ_ALT_NAME_NOT_CRIT = -2147408867,
    CSSMERR_APPLETP_SSL_BAD_EXT_KEY_USE = -2147408866,
    CSSMERR_APPLETP_OCSP_BAD_RESPONSE = -2147408865,
    CSSMERR_APPLETP_OCSP_BAD_REQUEST = -2147408864,
    CSSMERR_APPLETP_OCSP_UNAVAILABLE = -2147408863,
    CSSMERR_APPLETP_OCSP_STATUS_UNRECOGNIZED = -2147408862,
    CSSMERR_APPLETP_INCOMPLETE_REVOCATION_CHECK = -2147408861,
    CSSMERR_APPLETP_NETWORK_FAILURE = -2147408860,
    CSSMERR_APPLETP_OCSP_NOT_TRUSTED = -2147408859,
    CSSMERR_APPLETP_OCSP_INVALID_ANCHOR_CERT = -2147408858,
    CSSMERR_APPLETP_OCSP_SIG_ERROR = -2147408857,
    CSSMERR_APPLETP_OCSP_NO_SIGNER = -2147408856,
    CSSMERR_APPLETP_OCSP_RESP_MALFORMED_REQ = -2147408855,
    CSSMERR_APPLETP_OCSP_RESP_INTERNAL_ERR = -2147408854,
    CSSMERR_APPLETP_OCSP_RESP_TRY_LATER = -2147408853,
    CSSMERR_APPLETP_OCSP_RESP_SIG_REQUIRED = -2147408852,
    CSSMERR_APPLETP_OCSP_RESP_UNAUTHORIZED = -2147408851,
    CSSMERR_APPLETP_OCSP_NONCE_MISMATCH = -2147408850,
    CSSMERR_APPLETP_CS_BAD_CERT_CHAIN_LENGTH = -2147408849,
    CSSMERR_APPLETP_CS_NO_BASIC_CONSTRAINTS = -2147408848,
    CSSMERR_APPLETP_CS_BAD_PATH_LENGTH = -2147408847,
    CSSMERR_APPLETP_CS_NO_EXTENDED_KEY_USAGE = -2147408846,
    CSSMERR_APPLETP_CODE_SIGN_DEVELOPMENT = -2147408845,
    CSSMERR_APPLETP_RS_BAD_CERT_CHAIN_LENGTH = -2147408844,
    CSSMERR_APPLETP_RS_BAD_EXTENDED_KEY_USAGE = -2147408843,
    CSSMERR_APPLETP_TRUST_SETTING_DENY = -2147408842,
    CSSMERR_APPLETP_INVALID_EMPTY_SUBJECT = -2147408841,
    CSSMERR_APPLETP_UNKNOWN_QUAL_CERT_STATEMENT = -2147408840,
    CSSMERR_APPLETP_MISSING_REQUIRED_EXTENSION = -2147408839,
    CSSMERR_APPLETP_EXT_KEYUSAGE_NOT_CRITICAL = -2147408838,
    CSSMERR_APPLETP_IDENTIFIER_MISSING = -2147408837,
    CSSMERR_APPLETP_CA_PIN_MISMATCH = -2147408836,
    CSSMERR_APPLETP_LEAF_PIN_MISMATCH = -2147408835,
};

pub const anon5781 = enum(i32) {
    CSSMERR_APPLE_DOTMAC_REQ_QUEUED = -2147408796,
    CSSMERR_APPLE_DOTMAC_REQ_REDIRECT = -2147408795,
    CSSMERR_APPLE_DOTMAC_REQ_SERVER_ERR = -2147408794,
    CSSMERR_APPLE_DOTMAC_REQ_SERVER_PARAM = -2147408793,
    CSSMERR_APPLE_DOTMAC_REQ_SERVER_AUTH = -2147408792,
    CSSMERR_APPLE_DOTMAC_REQ_SERVER_UNIMPL = -2147408791,
    CSSMERR_APPLE_DOTMAC_REQ_SERVER_NOT_AVAIL = -2147408790,
    CSSMERR_APPLE_DOTMAC_REQ_SERVER_ALREADY_EXIST = -2147408789,
    CSSMERR_APPLE_DOTMAC_REQ_SERVER_SERVICE_ERROR = -2147408788,
    CSSMERR_APPLE_DOTMAC_REQ_IS_PENDING = -2147408787,
    CSSMERR_APPLE_DOTMAC_NO_REQ_PENDING = -2147408786,
    CSSMERR_APPLE_DOTMAC_CSR_VERIFY_FAIL = -2147408785,
    CSSMERR_APPLE_DOTMAC_FAILED_CONSISTENCY_CHECK = -2147408784,
};

pub const anon6081 = enum(u32) {
    CSSM_APPLEDL_OPEN_PARAMETERS_VERSION = 1,
};

pub const cssm_appledl_open_parameters_mask = enum(u32) {
    kCSSM_APPLEDL_MASK_MODE = 1,
};

pub const cssm_appledl_open_parameters = extern struct {
    length: uint32,
    version: uint32,
    autoCommit: CSSM_BOOL,
    mask: uint32,
    mode: objc.mode_t,
};

pub const CSSM_APPLEDL_OPEN_PARAMETERS_PTR = ?*cssm_appledl_open_parameters;

pub const anon6451 = enum(u32) {
    CSSM_APPLECSPDL_DB_LOCK = 0,
    CSSM_APPLECSPDL_DB_UNLOCK = 1,
    CSSM_APPLECSPDL_DB_GET_SETTINGS = 2,
    CSSM_APPLECSPDL_DB_SET_SETTINGS = 3,
    CSSM_APPLECSPDL_DB_IS_LOCKED = 4,
    CSSM_APPLECSPDL_DB_CHANGE_PASSWORD = 5,
    CSSM_APPLECSPDL_DB_GET_HANDLE = 6,
    CSSM_APPLESCPDL_CSP_GET_KEYHANDLE = 7,
    CSSM_APPLE_PRIVATE_CSPDL_CODE_8 = 8,
    CSSM_APPLE_PRIVATE_CSPDL_CODE_9 = 9,
    CSSM_APPLE_PRIVATE_CSPDL_CODE_10 = 10,
    CSSM_APPLE_PRIVATE_CSPDL_CODE_11 = 11,
    CSSM_APPLE_PRIVATE_CSPDL_CODE_12 = 12,
    CSSM_APPLE_PRIVATE_CSPDL_CODE_13 = 13,
    CSSM_APPLE_PRIVATE_CSPDL_CODE_14 = 14,
    CSSM_APPLE_PRIVATE_CSPDL_CODE_15 = 15,
    CSSM_APPLE_PRIVATE_CSPDL_CODE_16 = 16,
    CSSM_APPLE_PRIVATE_CSPDL_CODE_17 = 17,
    CSSM_APPLE_PRIVATE_CSPDL_CODE_18 = 18,
    CSSM_APPLE_PRIVATE_CSPDL_CODE_19 = 19,
    CSSM_APPLE_PRIVATE_CSPDL_CODE_20 = 20,
    CSSM_APPLE_PRIVATE_CSPDL_CODE_21 = 21,
    CSSM_APPLE_PRIVATE_CSPDL_CODE_22 = 22,
    CSSM_APPLE_PRIVATE_CSPDL_CODE_23 = 23,
    CSSM_APPLE_PRIVATE_CSPDL_CODE_24 = 24,
    CSSM_APPLE_PRIVATE_CSPDL_CODE_25 = 25,
    CSSM_APPLE_PRIVATE_CSPDL_CODE_26 = 26,
    CSSM_APPLE_PRIVATE_CSPDL_CODE_27 = 27,
    CSSM_APPLECSP_KEYDIGEST = 256,
    CSSM_APPLECSP_PUBKEY = 257,
};

pub const cssm_applecspdl_db_settings_parameters = extern struct {
    idleTimeout: uint32,
    lockOnSleep: uint8,
};

pub const CSSM_APPLECSPDL_DB_SETTINGS_PARAMETERS_PTR = ?*cssm_applecspdl_db_settings_parameters;

pub const cssm_applecspdl_db_is_locked_parameters = extern struct {
    isLocked: uint8,
};

pub const CSSM_APPLECSPDL_DB_IS_LOCKED_PARAMETERS_PTR = ?*cssm_applecspdl_db_is_locked_parameters;

pub const cssm_applecspdl_db_change_password_parameters = extern struct {
    accessCredentials: ?*CSSM_ACCESS_CREDENTIALS,
};

pub const CSSM_APPLECSPDL_DB_CHANGE_PASSWORD_PARAMETERS_PTR = ?*cssm_applecspdl_db_change_password_parameters;

pub const anon7791 = enum(u32) {
    CSSM_ATTRIBUTE_VENDOR_DEFINED = 8388608,
};

pub const anon7831 = enum(u32) {
    CSSM_ATTRIBUTE_PUBLIC_KEY = 1082130432,
    CSSM_ATTRIBUTE_FEE_PRIME_TYPE = 276824065,
    CSSM_ATTRIBUTE_FEE_CURVE_TYPE = 276824066,
    CSSM_ATTRIBUTE_ASC_OPTIMIZATION = 276824067,
    CSSM_ATTRIBUTE_RSA_BLINDING = 276824068,
    CSSM_ATTRIBUTE_PARAM_KEY = 1082130437,
    CSSM_ATTRIBUTE_PROMPT = 545259526,
    CSSM_ATTRIBUTE_ALERT_TITLE = 545259527,
    CSSM_ATTRIBUTE_VERIFY_PASSPHRASE = 276824072,
};

pub const anon8461 = enum(u32) {
    CSSM_FEE_PRIME_TYPE_DEFAULT = 0,
    CSSM_FEE_PRIME_TYPE_MERSENNE = 1,
    CSSM_FEE_PRIME_TYPE_FEE = 2,
    CSSM_FEE_PRIME_TYPE_GENERAL = 3,
};

pub const anon8581 = enum(u32) {
    CSSM_FEE_CURVE_TYPE_DEFAULT = 0,
    CSSM_FEE_CURVE_TYPE_MONTGOMERY = 1,
    CSSM_FEE_CURVE_TYPE_WEIERSTRASS = 2,
    CSSM_FEE_CURVE_TYPE_ANSI_X9_62 = 3,
};

pub const anon8681 = enum(u32) {
    CSSM_ASC_OPTIMIZE_DEFAULT = 0,
    CSSM_ASC_OPTIMIZE_SIZE = 1,
    CSSM_ASC_OPTIMIZE_SECURITY = 2,
    CSSM_ASC_OPTIMIZE_TIME = 3,
    CSSM_ASC_OPTIMIZE_TIME_SIZE = 4,
    CSSM_ASC_OPTIMIZE_ASCII = 5,
};

pub const anon8801 = enum(u32) {
    CSSM_KEYATTR_PARTIAL = 65536,
    CSSM_KEYATTR_PUBLIC_KEY_ENCRYPT = 131072,
};

pub const CSSM_APPLE_TP_NAME_OID = extern struct {
    string: ?*i8,
    oid: ?*Asn1Oid,
};

pub const CSSM_APPLE_TP_CERT_REQUEST = extern struct {
    cspHand: CSSM_CSP_HANDLE,
    clHand: CSSM_CL_HANDLE,
    serialNumber: uint32,
    numSubjectNames: uint32,
    subjectNames: ?*CSSM_APPLE_TP_NAME_OID,
    numIssuerNames: uint32,
    issuerNames: ?*CSSM_APPLE_TP_NAME_OID,
    issuerNameX509: CSSM_X509_NAME_PTR,
    certPublicKey: ?*CSSM_KEY,
    issuerPrivateKey: ?*CSSM_KEY,
    signatureAlg: CSSM_ALGORITHMS,
    signatureOid: Asn1Oid,
    notBefore: uint32,
    notAfter: uint32,
    numExtensions: uint32,
    extensions: ?*CE_DataAndType,
    challengeString: ?*i8,
};

pub const CSSM_APPLE_TP_SSL_OPTIONS = extern struct {
    Version: uint32,
    ServerNameLen: uint32,
    ServerName: ?*i8,
    Flags: uint32,
};

pub const CSSM_APPLE_TP_CRL_OPT_FLAGS = uint32;

pub const anon9821 = enum(u32) {
    CSSM_TP_ACTION_REQUIRE_CRL_PER_CERT = 1,
    CSSM_TP_ACTION_FETCH_CRL_FROM_NET = 2,
    CSSM_TP_ACTION_CRL_SUFFICIENT = 4,
    CSSM_TP_ACTION_REQUIRE_CRL_IF_PRESENT = 8,
};

pub const CSSM_APPLE_TP_CRL_OPTIONS = extern struct {
    Version: uint32,
    CrlFlags: CSSM_APPLE_TP_CRL_OPT_FLAGS,
    crlStore: CSSM_DL_DB_HANDLE_PTR,
};

pub const CSSM_APPLE_TP_SMIME_OPTIONS = extern struct {
    Version: uint32,
    IntendedUsage: CE_KeyUsage,
    SenderEmailLen: uint32,
    SenderEmail: ?*i8,
};

pub const CSSM_APPLE_TP_ACTION_FLAGS = uint32;

pub const anon10411 = enum(u32) {
    CSSM_TP_ACTION_ALLOW_EXPIRED = 1,
    CSSM_TP_ACTION_LEAF_IS_CA = 2,
    CSSM_TP_ACTION_FETCH_CERT_FROM_NET = 4,
    CSSM_TP_ACTION_ALLOW_EXPIRED_ROOT = 8,
    CSSM_TP_ACTION_REQUIRE_REV_PER_CERT = 16,
    CSSM_TP_ACTION_TRUST_SETTINGS = 32,
    CSSM_TP_ACTION_IMPLICIT_ANCHORS = 64,
};

pub const CSSM_APPLE_TP_ACTION_DATA = extern struct {
    Version: uint32,
    ActionFlags: CSSM_APPLE_TP_ACTION_FLAGS,
};

pub const CSSM_TP_APPLE_CERT_STATUS = uint32;

pub const anon10701 = enum(u32) {
    CSSM_CERT_STATUS_EXPIRED = 1,
    CSSM_CERT_STATUS_NOT_VALID_YET = 2,
    CSSM_CERT_STATUS_IS_IN_INPUT_CERTS = 4,
    CSSM_CERT_STATUS_IS_IN_ANCHORS = 8,
    CSSM_CERT_STATUS_IS_ROOT = 16,
    CSSM_CERT_STATUS_IS_FROM_NET = 32,
    CSSM_CERT_STATUS_TRUST_SETTINGS_FOUND_USER = 64,
    CSSM_CERT_STATUS_TRUST_SETTINGS_FOUND_ADMIN = 128,
    CSSM_CERT_STATUS_TRUST_SETTINGS_FOUND_SYSTEM = 256,
    CSSM_CERT_STATUS_TRUST_SETTINGS_TRUST = 512,
    CSSM_CERT_STATUS_TRUST_SETTINGS_DENY = 1024,
    CSSM_CERT_STATUS_TRUST_SETTINGS_IGNORED_ERROR = 2048,
};

pub const CSSM_TP_APPLE_EVIDENCE_INFO = extern struct {
    StatusBits: CSSM_TP_APPLE_CERT_STATUS,
    NumStatusCodes: uint32,
    StatusCodes: ?*CSSM_RETURN,
    Index: uint32,
    DlDbHandle: CSSM_DL_DB_HANDLE,
    UniqueRecord: CSSM_DB_UNIQUE_RECORD_PTR,
};

pub const CSSM_TP_APPLE_EVIDENCE_HEADER = extern struct {
    Version: uint32,
};

pub const anon11371 = enum(u32) {
    CSSM_EVIDENCE_FORM_APPLE_HEADER = -2147483648,
    CSSM_EVIDENCE_FORM_APPLE_CERTGROUP = -2147483647,
    CSSM_EVIDENCE_FORM_APPLE_CERT_INFO = -2147483646,
};

pub const anon11451 = enum(u32) {
    CSSM_APPLEX509CL_OBTAIN_CSR = 0,
    CSSM_APPLEX509CL_VERIFY_CSR = 1,
};

pub const CSSM_APPLE_CL_CSR_REQUEST = extern struct {
    subjectNameX509: CSSM_X509_NAME_PTR,
    signatureAlg: CSSM_ALGORITHMS,
    signatureOid: Asn1Oid,
    cspHand: CSSM_CSP_HANDLE,
    subjectPublicKey: ?*CSSM_KEY,
    subjectPrivateKey: ?*CSSM_KEY,
    challengeString: ?*i8,
};

pub extern "Security" fn cssmPerror(how: ?*i8, @"error": CSSM_RETURN) callconv(.C) void;

pub extern "Security" fn cssmOidToAlg() callconv(.C) i32;

pub extern "Security" fn cssmAlgToOid(algId: CSSM_ALGORITHMS) callconv(.C) ?*Asn1Oid;

pub const anon541 = enum(objc.UInt32) {
    kSecUnlockStateStatus = 1,
    kSecReadPermStatus = 2,
    kSecWritePermStatus = 4,
};

pub const KeychainSettings = extern struct {
    version: objc.UInt32,
    lockOnSleep: objc.Boolean,
    useLockInterval: objc.Boolean,
    lockInterval: objc.UInt32,
};

pub const AuthenticationType = enum(objc.FourCharCode) {
    kSecAuthenticationTypeNTLM = 1835824238,
    kSecAuthenticationTypeMSN = 1634628461,
    kSecAuthenticationTypeDPA = 1633775716,
    kSecAuthenticationTypeRPA = 1633775730,
    kSecAuthenticationTypeHTTPBasic = 1886680168,
    kSecAuthenticationTypeHTTPDigest = 1685353576,
    kSecAuthenticationTypeHTMLForm = 1836216166,
    kSecAuthenticationTypeDefault = 1953261156,
    kSecAuthenticationTypeAny = 0,
};

pub const ProtocolType = enum(objc.FourCharCode) {
    kSecProtocolTypeFTP = 1718906912,
    kSecProtocolTypeFTPAccount = 1718906977,
    kSecProtocolTypeHTTP = 1752462448,
    kSecProtocolTypeIRC = 1769104160,
    kSecProtocolTypeNNTP = 1852732528,
    kSecProtocolTypePOP3 = 1886351411,
    kSecProtocolTypeSMTP = 1936553072,
    kSecProtocolTypeSOCKS = 1936685088,
    kSecProtocolTypeIMAP = 1768776048,
    kSecProtocolTypeLDAP = 1818517872,
    kSecProtocolTypeAppleTalk = 1635019883,
    kSecProtocolTypeAFP = 1634103328,
    kSecProtocolTypeTelnet = 1952803950,
    kSecProtocolTypeSSH = 1936943136,
    kSecProtocolTypeFTPS = 1718906995,
    kSecProtocolTypeHTTPS = 1752461427,
    kSecProtocolTypeHTTPProxy = 1752461432,
    kSecProtocolTypeHTTPSProxy = 1752462200,
    kSecProtocolTypeFTPProxy = 1718907000,
    kSecProtocolTypeCIFS = 1667851891,
    kSecProtocolTypeSMB = 1936548384,
    kSecProtocolTypeRTSP = 1920234352,
    kSecProtocolTypeRTSPProxy = 1920234360,
    kSecProtocolTypeDAAP = 1684103536,
    kSecProtocolTypeEPPC = 1701867619,
    kSecProtocolTypeIPP = 1768976416,
    kSecProtocolTypeNNTPS = 1853124723,
    kSecProtocolTypeLDAPS = 1818521715,
    kSecProtocolTypeTelnetS = 1952803955,
    kSecProtocolTypeIMAPS = 1768779891,
    kSecProtocolTypeIRCS = 1769104243,
    kSecProtocolTypePOP3S = 1886351475,
    kSecProtocolTypeCVSpserver = 1668707184,
    kSecProtocolTypeSVN = 1937141280,
    kSecProtocolTypeAny = 0,
};

pub const KeychainEvent = enum(objc.UInt32) {
    kSecLockEvent = 1,
    kSecUnlockEvent = 2,
    kSecAddEvent = 3,
    kSecDeleteEvent = 4,
    kSecUpdateEvent = 5,
    kSecPasswordChangedEvent = 6,
    kSecDefaultChangedEvent = 9,
    kSecDataAccessEvent = 10,
    kSecKeychainListChangedEvent = 11,
    kSecTrustSettingsChangedEvent = 12,
};

pub const KeychainEventMask = enum(objc.UInt32) {
    kSecLockEventMask = 2,
    kSecUnlockEventMask = 4,
    kSecAddEventMask = 8,
    kSecDeleteEventMask = 16,
    kSecUpdateEventMask = 32,
    kSecPasswordChangedEventMask = 64,
    kSecDefaultChangedEventMask = 512,
    kSecDataAccessEventMask = 1024,
    kSecKeychainListChangedMask = 2048,
    kSecTrustSettingsChangedEventMask = 4096,
    kSecEveryEventMask = -1,
};

pub const KeychainCallbackInfo = extern struct {
    version: objc.UInt32,
    item: KeychainItemRef,
    keychain: KeychainRef,
    pid: objc.pid_t,
};

pub extern "Security" fn KeychainGetTypeID() callconv(.C) core_foundation.TypeID;

pub extern "Security" fn KeychainGetVersion(returnVers: ?*objc.UInt32) callconv(.C) objc.OSStatus;

pub extern "Security" fn KeychainOpen(pathName: ?*i8, keychain: ?*KeychainRef) callconv(.C) objc.OSStatus;

pub extern "Security" fn KeychainCreate(pathName: ?*i8, passwordLength: objc.UInt32, password: ?*anyopaque, promptUser: objc.Boolean, initialAccess: AccessRef, keychain: ?*KeychainRef, ) callconv(.C) objc.OSStatus;

pub extern "Security" fn KeychainDelete(keychainOrArray: KeychainRef) callconv(.C) objc.OSStatus;

pub extern "Security" fn KeychainSetSettings(keychain: KeychainRef, newSettings: ?*KeychainSettings) callconv(.C) objc.OSStatus;

pub extern "Security" fn KeychainCopySettings(keychain: KeychainRef, outSettings: ?*KeychainSettings) callconv(.C) objc.OSStatus;

pub extern "Security" fn KeychainUnlock(keychain: KeychainRef, passwordLength: objc.UInt32, password: ?*anyopaque, usePassword: objc.Boolean, ) callconv(.C) objc.OSStatus;

pub extern "Security" fn KeychainLock(keychain: KeychainRef) callconv(.C) objc.OSStatus;

pub extern "Security" fn KeychainLockAll() callconv(.C) objc.OSStatus;

pub extern "Security" fn KeychainCopyDefault(keychain: ?*KeychainRef) callconv(.C) objc.OSStatus;

pub extern "Security" fn KeychainSetDefault(keychain: KeychainRef) callconv(.C) objc.OSStatus;

pub extern "Security" fn KeychainCopySearchList(searchList: ?*core_foundation.ArrayRef) callconv(.C) objc.OSStatus;

pub extern "Security" fn KeychainSetSearchList(searchList: core_foundation.ArrayRef) callconv(.C) objc.OSStatus;

pub const PreferencesDomain = enum(i32) {
    kSecPreferencesDomainUser = 0,
    kSecPreferencesDomainSystem = 1,
    kSecPreferencesDomainCommon = 2,
    kSecPreferencesDomainDynamic = 3,
};

pub extern "Security" fn KeychainCopyDomainDefault(domain: PreferencesDomain, keychain: ?*KeychainRef) callconv(.C) objc.OSStatus;

pub extern "Security" fn KeychainSetDomainDefault(domain: PreferencesDomain, keychain: KeychainRef) callconv(.C) objc.OSStatus;

pub extern "Security" fn KeychainCopyDomainSearchList(domain: PreferencesDomain, searchList: ?*core_foundation.ArrayRef) callconv(.C) objc.OSStatus;

pub extern "Security" fn KeychainSetDomainSearchList(domain: PreferencesDomain, searchList: core_foundation.ArrayRef) callconv(.C) objc.OSStatus;

pub extern "Security" fn KeychainSetPreferenceDomain(domain: PreferencesDomain) callconv(.C) objc.OSStatus;

pub extern "Security" fn KeychainGetPreferenceDomain(domain: ?*PreferencesDomain) callconv(.C) objc.OSStatus;

pub extern "Security" fn KeychainGetStatus(keychain: KeychainRef, keychainStatus: ?*KeychainStatus) callconv(.C) objc.OSStatus;

pub extern "Security" fn KeychainGetPath(keychain: KeychainRef, ioPathLength: ?*objc.UInt32, pathName: ?*i8) callconv(.C) objc.OSStatus;

pub extern "Security" fn KeychainAttributeInfoForItemID(keychain: KeychainRef, itemID: objc.UInt32, info: ?*?*KeychainAttributeInfo) callconv(.C) objc.OSStatus;

pub extern "Security" fn KeychainFreeAttributeInfo(info: ?*KeychainAttributeInfo) callconv(.C) objc.OSStatus;

pub const KeychainCallback = ?*const fn(KeychainEvent, ?*KeychainCallbackInfo, ?*anyopaque) callconv(.C) objc.OSStatus;

pub extern "Security" fn KeychainAddCallback(callbackFunction: KeychainCallback, eventMask: KeychainEventMask, userContext: ?*anyopaque) callconv(.C) objc.OSStatus;

pub extern "Security" fn KeychainRemoveCallback(callbackFunction: KeychainCallback) callconv(.C) objc.OSStatus;

pub extern "Security" fn KeychainAddInternetPassword(keychain: KeychainRef, serverNameLength: objc.UInt32, serverName: ?*i8, securityDomainLength: objc.UInt32, securityDomain: ?*i8, accountNameLength: objc.UInt32, accountName: ?*i8, pathLength: objc.UInt32, path: ?*i8, port: objc.UInt16, protocol: ProtocolType, authenticationType: AuthenticationType, passwordLength: objc.UInt32, passwordData: ?*anyopaque, itemRef: ?*KeychainItemRef, ) callconv(.C) objc.OSStatus;

pub extern "Security" fn KeychainFindInternetPassword(keychainOrArray: core_foundation.TypeRef, serverNameLength: objc.UInt32, serverName: ?*i8, securityDomainLength: objc.UInt32, securityDomain: ?*i8, accountNameLength: objc.UInt32, accountName: ?*i8, pathLength: objc.UInt32, path: ?*i8, port: objc.UInt16, protocol: ProtocolType, authenticationType: AuthenticationType, passwordLength: ?*objc.UInt32, passwordData: ?*?*anyopaque, itemRef: ?*KeychainItemRef, ) callconv(.C) objc.OSStatus;

pub extern "Security" fn KeychainAddGenericPassword(keychain: KeychainRef, serviceNameLength: objc.UInt32, serviceName: ?*i8, accountNameLength: objc.UInt32, accountName: ?*i8, passwordLength: objc.UInt32, passwordData: ?*anyopaque, itemRef: ?*KeychainItemRef, ) callconv(.C) objc.OSStatus;

pub extern "Security" fn KeychainFindGenericPassword(keychainOrArray: core_foundation.TypeRef, serviceNameLength: objc.UInt32, serviceName: ?*i8, accountNameLength: objc.UInt32, accountName: ?*i8, passwordLength: ?*objc.UInt32, passwordData: ?*?*anyopaque, itemRef: ?*KeychainItemRef, ) callconv(.C) objc.OSStatus;

pub extern "Security" fn KeychainSetUserInteractionAllowed(state: objc.Boolean) callconv(.C) objc.OSStatus;

pub extern "Security" fn KeychainGetUserInteractionAllowed(state: ?*objc.Boolean) callconv(.C) objc.OSStatus;

pub extern "Security" fn KeychainGetCSPHandle(keychain: KeychainRef, cspHandle: ?*CSSM_CSP_HANDLE) callconv(.C) objc.OSStatus;

pub extern "Security" fn KeychainGetDLDBHandle(keychain: KeychainRef, dldbHandle: ?*CSSM_DL_DB_HANDLE) callconv(.C) objc.OSStatus;

pub extern "Security" fn KeychainCopyAccess(keychain: KeychainRef, access: ?*AccessRef) callconv(.C) objc.OSStatus;

pub extern "Security" fn KeychainSetAccess(keychain: KeychainRef, access: AccessRef) callconv(.C) objc.OSStatus;

pub const ExternalFormat = enum(objc.uint32_t) {
    kSecFormatUnknown = 0,
    kSecFormatOpenSSL = 1,
    kSecFormatSSH = 2,
    kSecFormatBSAFE = 3,
    kSecFormatRawKey = 4,
    kSecFormatWrappedPKCS8 = 5,
    kSecFormatWrappedOpenSSL = 6,
    kSecFormatWrappedSSH = 7,
    kSecFormatWrappedLSH = 8,
    kSecFormatX509Cert = 9,
    kSecFormatPEMSequence = 10,
    kSecFormatPKCS7 = 11,
    kSecFormatPKCS12 = 12,
    kSecFormatNetscapeCertSequence = 13,
    kSecFormatSSHv2 = 14,
};

pub const ExternalItemType = enum(objc.uint32_t) {
    kSecItemTypeUnknown = 0,
    kSecItemTypePrivateKey = 1,
    kSecItemTypePublicKey = 2,
    kSecItemTypeSessionKey = 3,
    kSecItemTypeCertificate = 4,
    kSecItemTypeAggregate = 5,
};

pub const ItemImportExportFlags = enum(objc.uint32_t) {
    kSecItemPemArmour = 1,
};

pub const KeyImportExportFlags = enum(objc.uint32_t) {
    kSecKeyImportOnlyOne = 1,
    kSecKeySecurePassphrase = 2,
    kSecKeyNoAccessControl = 4,
};

pub const KeyImportExportParameters = extern struct {
    version: objc.uint32_t,
    flags: KeyImportExportFlags,
    passphrase: core_foundation.TypeRef,
    alertTitle: core_foundation.StringRef,
    alertPrompt: core_foundation.StringRef,
    accessRef: AccessRef,
    keyUsage: CSSM_KEYUSE,
    keyAttributes: CSSM_KEYATTR_FLAGS,
};

pub const ItemImportExportKeyParameters = extern struct {
    version: objc.uint32_t,
    flags: KeyImportExportFlags,
    passphrase: core_foundation.TypeRef,
    alertTitle: core_foundation.StringRef,
    alertPrompt: core_foundation.StringRef,
    accessRef: AccessRef,
    keyUsage: core_foundation.ArrayRef,
    keyAttributes: core_foundation.ArrayRef,
};

pub extern "Security" fn KeychainItemExport(keychainItemOrArray: core_foundation.TypeRef, outputFormat: ExternalFormat, flags: ItemImportExportFlags, keyParams: ?*KeyImportExportParameters, exportedData: ?*core_foundation.DataRef, ) callconv(.C) objc.OSStatus;

pub extern "Security" fn ItemExport(secItemOrArray: core_foundation.TypeRef, outputFormat: ExternalFormat, flags: ItemImportExportFlags, keyParams: ?*ItemImportExportKeyParameters, exportedData: ?*core_foundation.DataRef, ) callconv(.C) objc.OSStatus;

pub extern "Security" fn KeychainItemImport(importedData: core_foundation.DataRef, fileNameOrExtension: core_foundation.StringRef, inputFormat: ?*ExternalFormat, itemType: ?*ExternalItemType, flags: ItemImportExportFlags, keyParams: ?*KeyImportExportParameters, importKeychain: KeychainRef, outItems: ?*core_foundation.ArrayRef, ) callconv(.C) objc.OSStatus;

pub extern "Security" fn ItemImport(importedData: core_foundation.DataRef, fileNameOrExtension: core_foundation.StringRef, inputFormat: ?*ExternalFormat, itemType: ?*ExternalItemType, flags: ItemImportExportFlags, keyParams: ?*ItemImportExportKeyParameters, importKeychain: KeychainRef, outItems: ?*core_foundation.ArrayRef, ) callconv(.C) objc.OSStatus;

pub extern "Security" fn PKCS12Import(pkcs12_data: core_foundation.DataRef, options: core_foundation.DictionaryRef, items: ?*core_foundation.ArrayRef) callconv(.C) objc.OSStatus;

pub const TrustResultType = enum(objc.uint32_t) {
    kSecTrustResultInvalid = 0,
    kSecTrustResultProceed = 1,
    kSecTrustResultConfirm = 2,
    kSecTrustResultDeny = 3,
    kSecTrustResultUnspecified = 4,
    kSecTrustResultRecoverableTrustFailure = 5,
    kSecTrustResultFatalTrustFailure = 6,
    kSecTrustResultOtherError = 7,
};

pub const __SecTrust = extern struct {};

pub const TrustRef = ?*__SecTrust;

pub const TrustCallback = *const fn(TrustRef, TrustResultType) callconv(.C) void;

pub extern "Security" fn TrustGetTypeID() callconv(.C) core_foundation.TypeID;

pub extern "Security" fn TrustCreateWithCertificates(certificates: core_foundation.TypeRef, policies: core_foundation.TypeRef, trust: ?*TrustRef) callconv(.C) objc.OSStatus;

pub extern "Security" fn TrustSetPolicies(trust: TrustRef, policies: core_foundation.TypeRef) callconv(.C) objc.OSStatus;

pub extern "Security" fn TrustCopyPolicies(trust: TrustRef, policies: ?*core_foundation.ArrayRef) callconv(.C) objc.OSStatus;

pub extern "Security" fn TrustSetNetworkFetchAllowed(trust: TrustRef, allowFetch: objc.Boolean) callconv(.C) objc.OSStatus;

pub extern "Security" fn TrustGetNetworkFetchAllowed(trust: TrustRef, allowFetch: ?*objc.Boolean) callconv(.C) objc.OSStatus;

pub extern "Security" fn TrustSetAnchorCertificates(trust: TrustRef, anchorCertificates: core_foundation.ArrayRef) callconv(.C) objc.OSStatus;

pub extern "Security" fn TrustSetAnchorCertificatesOnly(trust: TrustRef, anchorCertificatesOnly: objc.Boolean) callconv(.C) objc.OSStatus;

pub extern "Security" fn TrustCopyCustomAnchorCertificates(trust: TrustRef, anchors: ?*core_foundation.ArrayRef) callconv(.C) objc.OSStatus;

pub extern "Security" fn TrustSetVerifyDate(trust: TrustRef, verifyDate: core_foundation.DateRef) callconv(.C) objc.OSStatus;

pub extern "Security" fn TrustGetVerifyTime(trust: TrustRef) callconv(.C) core_foundation.AbsoluteTime;

pub extern "Security" fn TrustEvaluate(trust: TrustRef, result: ?*TrustResultType) callconv(.C) objc.OSStatus;

pub extern "Security" fn TrustEvaluateAsync(trust: TrustRef, queue: objc.dispatch_queue_t, result: TrustCallback) callconv(.C) objc.OSStatus;

pub extern "Security" fn TrustEvaluateWithError() callconv(.C) i32;

pub const TrustWithErrorCallback = *const fn(TrustRef, objc.bool, core_foundation.ErrorRef) callconv(.C) void;

pub extern "Security" fn TrustEvaluateAsyncWithError(trust: TrustRef, queue: objc.dispatch_queue_t, result: TrustWithErrorCallback) callconv(.C) objc.OSStatus;

pub extern "Security" fn TrustGetTrustResult(trust: TrustRef, result: ?*TrustResultType) callconv(.C) objc.OSStatus;

pub extern "Security" fn TrustCopyPublicKey(trust: TrustRef) callconv(.C) KeyRef;

pub extern "Security" fn TrustCopyKey(trust: TrustRef) callconv(.C) KeyRef;

pub extern "Security" fn TrustGetCertificateCount(trust: TrustRef) callconv(.C) core_foundation.Index;

pub extern "Security" fn TrustGetCertificateAtIndex(trust: TrustRef, ix: core_foundation.Index) callconv(.C) CertificateRef;

pub extern "Security" fn TrustCopyExceptions(trust: TrustRef) callconv(.C) core_foundation.DataRef;

pub extern "Security" fn TrustSetExceptions() callconv(.C) i32;

pub extern "Security" fn TrustCopyProperties(trust: TrustRef) callconv(.C) core_foundation.ArrayRef;

pub extern "Security" fn TrustCopyResult(trust: TrustRef) callconv(.C) core_foundation.DictionaryRef;

pub extern "Security" fn TrustSetOCSPResponse(trust: TrustRef, responseData: core_foundation.TypeRef) callconv(.C) objc.OSStatus;

pub extern "Security" fn TrustSetSignedCertificateTimestamps(trust: TrustRef, sctArray: core_foundation.ArrayRef) callconv(.C) objc.OSStatus;

pub extern "Security" fn TrustCopyCertificateChain(trust: TrustRef) callconv(.C) core_foundation.ArrayRef;

pub const TrustUserSetting = TrustResultType;

pub const TrustOptionFlags = enum(objc.uint32_t) {
    kSecTrustOptionAllowExpired = 1,
    kSecTrustOptionLeafIsCA = 2,
    kSecTrustOptionFetchIssuerFromNet = 4,
    kSecTrustOptionAllowExpiredRoot = 8,
    kSecTrustOptionRequireRevPerCert = 16,
    kSecTrustOptionUseTrustSettings = 32,
    kSecTrustOptionImplicitAnchors = 64,
};

pub extern "Security" fn TrustSetOptions(trustRef: TrustRef, options: TrustOptionFlags) callconv(.C) objc.OSStatus;

pub extern "Security" fn TrustSetParameters(trustRef: TrustRef, action: CSSM_TP_ACTION, actionData: core_foundation.DataRef) callconv(.C) objc.OSStatus;

pub extern "Security" fn TrustSetKeychains(trust: TrustRef, keychainOrArray: core_foundation.TypeRef) callconv(.C) objc.OSStatus;

pub extern "Security" fn TrustGetResult(trustRef: TrustRef, result: ?*TrustResultType, certChain: ?*core_foundation.ArrayRef, statusChain: ?*?*CSSM_TP_APPLE_EVIDENCE_INFO, ) callconv(.C) objc.OSStatus;

pub extern "Security" fn TrustGetCssmResult(trust: TrustRef, result: ?*CSSM_TP_VERIFY_CONTEXT_RESULT_PTR) callconv(.C) objc.OSStatus;

pub extern "Security" fn TrustGetCssmResultCode(trust: TrustRef, resultCode: ?*objc.OSStatus) callconv(.C) objc.OSStatus;

pub extern "Security" fn TrustGetTPHandle(trust: TrustRef, handle: ?*CSSM_TP_HANDLE) callconv(.C) objc.OSStatus;

pub extern "Security" fn TrustCopyAnchorCertificates(anchors: ?*core_foundation.ArrayRef) callconv(.C) objc.OSStatus;

pub extern "Security" fn AddSharedWebCredential(fqdn: core_foundation.StringRef, account: core_foundation.StringRef, password: core_foundation.StringRef, completionHandler: *const fn(core_foundation.ErrorRef) callconv(.C) void, ) callconv(.C) void;

pub extern "Security" fn RequestSharedWebCredential(fqdn: core_foundation.StringRef, account: core_foundation.StringRef, completionHandler: *const fn(core_foundation.ArrayRef, core_foundation.ErrorRef) callconv(.C) void) callconv(.C) void;

pub extern "Security" fn CreateSharedWebCredentialPassword() callconv(.C) core_foundation.StringRef;

pub extern "Security" fn sec_retain(obj: ?*anyopaque) callconv(.C) ?*anyopaque;

pub extern "Security" fn sec_release(obj: ?*anyopaque) callconv(.C) void;

/// https://developer.apple.com/documentation/Security/OS_sec_object?language=objc
pub const OS_sec_object = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{objc.NSObject, });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
};

pub const sec_object_t = ?*anyopaque;

pub const SSLCipherSuite = objc.uint16_t;

pub const anon471 = enum(u32) {
    CSSM_CONTEXT_EVENT_CREATE = 1,
    CSSM_CONTEXT_EVENT_DELETE = 2,
    CSSM_CONTEXT_EVENT_UPDATE = 3,
};

pub const SSLCiphersuiteGroup = enum(i32) {
    kSSLCiphersuiteGroupDefault = 0,
    kSSLCiphersuiteGroupCompatibility = 1,
    kSSLCiphersuiteGroupLegacy = 2,
    kSSLCiphersuiteGroupATS = 3,
    kSSLCiphersuiteGroupATSCompatibility = 4,
};

/// https://developer.apple.com/documentation/Security/OS_sec_trust?language=objc
pub const OS_sec_trust = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{objc.NSObject, });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
};

pub const sec_trust_t = ?*anyopaque;

/// https://developer.apple.com/documentation/Security/OS_sec_identity?language=objc
pub const OS_sec_identity = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{objc.NSObject, });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
};

pub const sec_identity_t = ?*anyopaque;

/// https://developer.apple.com/documentation/Security/OS_sec_certificate?language=objc
pub const OS_sec_certificate = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{objc.NSObject, });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
};

pub const sec_certificate_t = ?*anyopaque;

pub const tls_protocol_version_t = enum(objc.uint16_t) {
    TLSv10 = 769,
    TLSv11 = 770,
    TLSv12 = 771,
    TLSv13 = 772,
    DTLSv10 = -257,
    DTLSv12 = -259,
};

pub const tls_ciphersuite_t = enum(objc.uint16_t) {
    RSA_WITH_3DES_EDE_CBC_SHA = 10,
    RSA_WITH_AES_128_CBC_SHA = 47,
    RSA_WITH_AES_256_CBC_SHA = 53,
    RSA_WITH_AES_128_GCM_SHA256 = 156,
    RSA_WITH_AES_256_GCM_SHA384 = 157,
    RSA_WITH_AES_128_CBC_SHA256 = 60,
    RSA_WITH_AES_256_CBC_SHA256 = 61,
    ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA = -16376,
    ECDHE_ECDSA_WITH_AES_128_CBC_SHA = -16375,
    ECDHE_ECDSA_WITH_AES_256_CBC_SHA = -16374,
    ECDHE_RSA_WITH_3DES_EDE_CBC_SHA = -16366,
    ECDHE_RSA_WITH_AES_128_CBC_SHA = -16365,
    ECDHE_RSA_WITH_AES_256_CBC_SHA = -16364,
    ECDHE_ECDSA_WITH_AES_128_CBC_SHA256 = -16349,
    ECDHE_ECDSA_WITH_AES_256_CBC_SHA384 = -16348,
    ECDHE_RSA_WITH_AES_128_CBC_SHA256 = -16345,
    ECDHE_RSA_WITH_AES_256_CBC_SHA384 = -16344,
    ECDHE_ECDSA_WITH_AES_128_GCM_SHA256 = -16341,
    ECDHE_ECDSA_WITH_AES_256_GCM_SHA384 = -16340,
    ECDHE_RSA_WITH_AES_128_GCM_SHA256 = -16337,
    ECDHE_RSA_WITH_AES_256_GCM_SHA384 = -16336,
    ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256 = -13144,
    ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256 = -13143,
    AES_128_GCM_SHA256 = 4865,
    AES_256_GCM_SHA384 = 4866,
    CHACHA20_POLY1305_SHA256 = 4867,
};

pub const tls_ciphersuite_group_t = enum(objc.uint16_t) {
    tls_ciphersuite_group_default = 0,
    tls_ciphersuite_group_compatibility = 1,
    tls_ciphersuite_group_legacy = 2,
    tls_ciphersuite_group_ats = 3,
    tls_ciphersuite_group_ats_compatibility = 4,
};

pub const SSLProtocol = enum(i32) {
    kSSLProtocolUnknown = 0,
    kTLSProtocol1 = 4,
    kTLSProtocol11 = 7,
    kTLSProtocol12 = 8,
    kDTLSProtocol1 = 9,
    kTLSProtocol13 = 10,
    kDTLSProtocol12 = 11,
    kTLSProtocolMaxSupported = 999,
    kSSLProtocol2 = 1,
    kSSLProtocol3 = 2,
    kSSLProtocol3Only = 3,
    kTLSProtocol1Only = 5,
    kSSLProtocolAll = 6,
};

pub extern "Security" fn sec_trust_create(trust: TrustRef) callconv(.C) sec_trust_t;

pub extern "Security" fn sec_trust_copy_ref(trust: sec_trust_t) callconv(.C) TrustRef;

pub extern "Security" fn sec_identity_create(identity: IdentityRef) callconv(.C) sec_identity_t;

pub extern "Security" fn sec_identity_create_with_certificates(identity: IdentityRef, certificates: core_foundation.ArrayRef) callconv(.C) sec_identity_t;

pub extern "Security" fn sec_identity_access_certificates() callconv(.C) i32;

pub extern "Security" fn sec_identity_copy_ref(identity: sec_identity_t) callconv(.C) IdentityRef;

pub extern "Security" fn sec_identity_copy_certificates_ref(identity: sec_identity_t) callconv(.C) core_foundation.ArrayRef;

pub extern "Security" fn sec_certificate_create(certificate: CertificateRef) callconv(.C) sec_certificate_t;

pub extern "Security" fn sec_certificate_copy_ref(certificate: sec_certificate_t) callconv(.C) CertificateRef;

/// https://developer.apple.com/documentation/Security/OS_sec_protocol_metadata?language=objc
pub const OS_sec_protocol_metadata = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{objc.NSObject, });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
};

pub const sec_protocol_metadata_t = ?*anyopaque;

pub extern "Security" fn sec_protocol_metadata_get_negotiated_protocol(metadata: sec_protocol_metadata_t) callconv(.C) ?*i8;

pub extern "Security" fn sec_protocol_metadata_copy_peer_public_key(metadata: sec_protocol_metadata_t) callconv(.C) objc.dispatch_data_t;

pub extern "Security" fn sec_protocol_metadata_get_negotiated_tls_protocol_version(metadata: sec_protocol_metadata_t) callconv(.C) tls_protocol_version_t;

pub extern "Security" fn sec_protocol_metadata_get_negotiated_protocol_version(metadata: sec_protocol_metadata_t) callconv(.C) SSLProtocol;

pub extern "Security" fn sec_protocol_metadata_get_negotiated_tls_ciphersuite(metadata: sec_protocol_metadata_t) callconv(.C) tls_ciphersuite_t;

pub extern "Security" fn sec_protocol_metadata_get_negotiated_ciphersuite(metadata: sec_protocol_metadata_t) callconv(.C) SSLCipherSuite;

pub extern "Security" fn sec_protocol_metadata_get_early_data_accepted() callconv(.C) i32;

pub extern "Security" fn sec_protocol_metadata_access_peer_certificate_chain() callconv(.C) i32;

pub extern "Security" fn sec_protocol_metadata_access_ocsp_response() callconv(.C) i32;

pub extern "Security" fn sec_protocol_metadata_access_supported_signature_algorithms() callconv(.C) i32;

pub extern "Security" fn sec_protocol_metadata_access_distinguished_names() callconv(.C) i32;

pub extern "Security" fn sec_protocol_metadata_access_pre_shared_keys() callconv(.C) i32;

pub extern "Security" fn sec_protocol_metadata_get_server_name(metadata: sec_protocol_metadata_t) callconv(.C) ?*i8;

pub extern "Security" fn sec_protocol_metadata_peers_are_equal() callconv(.C) i32;

pub extern "Security" fn sec_protocol_metadata_challenge_parameters_are_equal() callconv(.C) i32;

pub extern "Security" fn sec_protocol_metadata_create_secret(metadata: sec_protocol_metadata_t, label_len: objc.size_t, label: ?*i8, exporter_length: objc.size_t, ) callconv(.C) objc.dispatch_data_t;

pub extern "Security" fn sec_protocol_metadata_create_secret_with_context(metadata: sec_protocol_metadata_t, label_len: objc.size_t, label: ?*i8, context_len: objc.size_t, context: ?*objc.uint8_t, exporter_length: objc.size_t, ) callconv(.C) objc.dispatch_data_t;

/// https://developer.apple.com/documentation/Security/OS_sec_protocol_options?language=objc
pub const OS_sec_protocol_options = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{objc.NSObject, });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
};

pub const sec_protocol_options_t = ?*anyopaque;

pub extern "Security" fn sec_protocol_options_are_equal() callconv(.C) i32;

pub extern "Security" fn sec_protocol_options_set_local_identity(options: sec_protocol_options_t, identity: sec_identity_t) callconv(.C) void;

pub extern "Security" fn sec_protocol_options_append_tls_ciphersuite(options: sec_protocol_options_t, ciphersuite: tls_ciphersuite_t) callconv(.C) void;

pub extern "Security" fn sec_protocol_options_add_tls_ciphersuite(options: sec_protocol_options_t, ciphersuite: SSLCipherSuite) callconv(.C) void;

pub extern "Security" fn sec_protocol_options_append_tls_ciphersuite_group(options: sec_protocol_options_t, group: tls_ciphersuite_group_t) callconv(.C) void;

pub extern "Security" fn sec_protocol_options_add_tls_ciphersuite_group(options: sec_protocol_options_t, group: SSLCiphersuiteGroup) callconv(.C) void;

pub extern "Security" fn sec_protocol_options_set_tls_min_version(options: sec_protocol_options_t, version: SSLProtocol) callconv(.C) void;

pub extern "Security" fn sec_protocol_options_set_min_tls_protocol_version(options: sec_protocol_options_t, version: tls_protocol_version_t) callconv(.C) void;

pub extern "Security" fn sec_protocol_options_get_default_min_tls_protocol_version() callconv(.C) tls_protocol_version_t;

pub extern "Security" fn sec_protocol_options_get_default_min_dtls_protocol_version() callconv(.C) tls_protocol_version_t;

pub extern "Security" fn sec_protocol_options_set_tls_max_version(options: sec_protocol_options_t, version: SSLProtocol) callconv(.C) void;

pub extern "Security" fn sec_protocol_options_set_max_tls_protocol_version(options: sec_protocol_options_t, version: tls_protocol_version_t) callconv(.C) void;

pub extern "Security" fn sec_protocol_options_get_default_max_tls_protocol_version() callconv(.C) tls_protocol_version_t;

pub extern "Security" fn sec_protocol_options_get_default_max_dtls_protocol_version() callconv(.C) tls_protocol_version_t;

pub extern "Security" fn sec_protocol_options_get_enable_encrypted_client_hello() callconv(.C) i32;

pub extern "Security" fn sec_protocol_options_get_quic_use_legacy_codepoint() callconv(.C) i32;

pub extern "Security" fn sec_protocol_options_add_tls_application_protocol(options: sec_protocol_options_t, application_protocol: ?*i8) callconv(.C) void;

pub extern "Security" fn sec_protocol_options_set_tls_server_name(options: sec_protocol_options_t, server_name: ?*i8) callconv(.C) void;

pub extern "Security" fn sec_protocol_options_set_tls_diffie_hellman_parameters(options: sec_protocol_options_t, params: objc.dispatch_data_t) callconv(.C) void;

pub extern "Security" fn sec_protocol_options_add_pre_shared_key(options: sec_protocol_options_t, psk: objc.dispatch_data_t, psk_identity: objc.dispatch_data_t) callconv(.C) void;

pub extern "Security" fn sec_protocol_options_set_tls_pre_shared_key_identity_hint(options: sec_protocol_options_t, psk_identity_hint: objc.dispatch_data_t) callconv(.C) void;

pub const sec_protocol_pre_shared_key_selection_complete_t = *const fn(objc.dispatch_data_t) callconv(.C) void;

pub const sec_protocol_pre_shared_key_selection_t = *const fn(sec_protocol_metadata_t, objc.dispatch_data_t, sec_protocol_pre_shared_key_selection_complete_t) callconv(.C) void;

pub extern "Security" fn sec_protocol_options_set_pre_shared_key_selection_block(options: sec_protocol_options_t, psk_selection_block: sec_protocol_pre_shared_key_selection_t, psk_selection_queue: objc.dispatch_queue_t) callconv(.C) void;

pub extern "Security" fn sec_protocol_options_set_tls_tickets_enabled(options: sec_protocol_options_t, tickets_enabled: objc.bool) callconv(.C) void;

pub extern "Security" fn sec_protocol_options_set_tls_is_fallback_attempt(options: sec_protocol_options_t, is_fallback_attempt: objc.bool) callconv(.C) void;

pub extern "Security" fn sec_protocol_options_set_tls_resumption_enabled(options: sec_protocol_options_t, resumption_enabled: objc.bool) callconv(.C) void;

pub extern "Security" fn sec_protocol_options_set_tls_false_start_enabled(options: sec_protocol_options_t, false_start_enabled: objc.bool) callconv(.C) void;

pub extern "Security" fn sec_protocol_options_set_tls_ocsp_enabled(options: sec_protocol_options_t, ocsp_enabled: objc.bool) callconv(.C) void;

pub extern "Security" fn sec_protocol_options_set_tls_sct_enabled(options: sec_protocol_options_t, sct_enabled: objc.bool) callconv(.C) void;

pub extern "Security" fn sec_protocol_options_set_tls_renegotiation_enabled(options: sec_protocol_options_t, renegotiation_enabled: objc.bool) callconv(.C) void;

pub extern "Security" fn sec_protocol_options_set_peer_authentication_required(options: sec_protocol_options_t, peer_authentication_required: objc.bool) callconv(.C) void;

pub extern "Security" fn sec_protocol_options_set_peer_authentication_optional(options: sec_protocol_options_t, peer_authentication_optional: objc.bool) callconv(.C) void;

pub extern "Security" fn sec_protocol_options_set_enable_encrypted_client_hello(options: sec_protocol_options_t, enable_encrypted_client_hello: objc.bool) callconv(.C) void;

pub extern "Security" fn sec_protocol_options_set_quic_use_legacy_codepoint(options: sec_protocol_options_t, quic_use_legacy_codepoint: objc.bool) callconv(.C) void;

pub const sec_protocol_key_update_complete_t = *const fn() callconv(.C) void;

pub const sec_protocol_key_update_t = *const fn(sec_protocol_metadata_t, sec_protocol_key_update_complete_t) callconv(.C) void;

pub const sec_protocol_challenge_complete_t = *const fn(sec_identity_t) callconv(.C) void;

pub const sec_protocol_challenge_t = *const fn(sec_protocol_metadata_t, sec_protocol_challenge_complete_t) callconv(.C) void;

pub const sec_protocol_verify_complete_t = *const fn(objc.bool) callconv(.C) void;

pub const sec_protocol_verify_t = *const fn(sec_protocol_metadata_t, sec_trust_t, sec_protocol_verify_complete_t) callconv(.C) void;

pub extern "Security" fn sec_protocol_options_set_key_update_block(options: sec_protocol_options_t, key_update_block: sec_protocol_key_update_t, key_update_queue: objc.dispatch_queue_t) callconv(.C) void;

pub extern "Security" fn sec_protocol_options_set_challenge_block(options: sec_protocol_options_t, challenge_block: sec_protocol_challenge_t, challenge_queue: objc.dispatch_queue_t) callconv(.C) void;

pub extern "Security" fn sec_protocol_options_set_verify_block(options: sec_protocol_options_t, verify_block: sec_protocol_verify_t, verify_block_queue: objc.dispatch_queue_t) callconv(.C) void;

pub const anon871 = enum(objc.OSStatus) {
    errAuthorizationSuccess = 0,
    errAuthorizationInvalidSet = -60001,
    errAuthorizationInvalidRef = -60002,
    errAuthorizationInvalidTag = -60003,
    errAuthorizationInvalidPointer = -60004,
    errAuthorizationDenied = -60005,
    errAuthorizationCanceled = -60006,
    errAuthorizationInteractionNotAllowed = -60007,
    errAuthorizationInternal = -60008,
    errAuthorizationExternalizeNotAllowed = -60009,
    errAuthorizationInternalizeNotAllowed = -60010,
    errAuthorizationInvalidFlags = -60011,
    errAuthorizationToolExecuteFailure = -60031,
    errAuthorizationToolEnvironmentError = -60032,
    errAuthorizationBadAddress = -60033,
};

pub const AuthorizationFlags = enum(objc.UInt32) {
    kAuthorizationFlagDefaults = 0,
    kAuthorizationFlagInteractionAllowed = 1,
    kAuthorizationFlagExtendRights = 2,
    kAuthorizationFlagPartialRights = 4,
    kAuthorizationFlagDestroyRights = 8,
    kAuthorizationFlagPreAuthorize = 16,
    kAuthorizationFlagSkipInternalAuth = 512,
    kAuthorizationFlagNoData = 1048576,
};

pub const anon1291 = enum(u32) {
    kAuthorizationFlagCanNotPreAuthorize = 1,
};

pub const AuthorizationOpaqueRef = extern struct {};

pub const AuthorizationRef = ?*AuthorizationOpaqueRef;

pub const AuthorizationString = ?*i8;

pub const AuthorizationItem = extern struct {
    name: AuthorizationString,
    valueLength: objc.size_t,
    value: ?*anyopaque,
    flags: objc.UInt32,
};

pub const AuthorizationItemSet = extern struct {
    count: objc.UInt32,
    items: ?*AuthorizationItem,
};

pub const AuthorizationExternalForm = extern struct {
    bytes: [32] i8,
};

pub const AuthorizationRights = AuthorizationItemSet;

pub const AuthorizationEnvironment = AuthorizationItemSet;

pub extern "Security" fn AuthorizationCreate(rights: ?*AuthorizationRights, environment: ?*AuthorizationEnvironment, flags: AuthorizationFlags, authorization: ?*AuthorizationRef, ) callconv(.C) objc.OSStatus;

pub extern "Security" fn AuthorizationFree(authorization: AuthorizationRef, flags: AuthorizationFlags) callconv(.C) objc.OSStatus;

pub extern "Security" fn AuthorizationCopyRights(authorization: AuthorizationRef, rights: ?*AuthorizationRights, environment: ?*AuthorizationEnvironment, flags: AuthorizationFlags, authorizedRights: ?*?*AuthorizationRights, ) callconv(.C) objc.OSStatus;

pub const AuthorizationAsyncCallback = *const fn(objc.OSStatus, ?*AuthorizationRights) callconv(.C) void;

pub extern "Security" fn AuthorizationCopyRightsAsync(authorization: AuthorizationRef, rights: ?*AuthorizationRights, environment: ?*AuthorizationEnvironment, flags: AuthorizationFlags, callbackBlock: AuthorizationAsyncCallback, ) callconv(.C) void;

pub extern "Security" fn AuthorizationCopyInfo(authorization: AuthorizationRef, tag: AuthorizationString, info: ?*?*AuthorizationItemSet) callconv(.C) objc.OSStatus;

pub extern "Security" fn AuthorizationMakeExternalForm(authorization: AuthorizationRef, extForm: ?*AuthorizationExternalForm) callconv(.C) objc.OSStatus;

pub extern "Security" fn AuthorizationCreateFromExternalForm(extForm: ?*AuthorizationExternalForm, authorization: ?*AuthorizationRef) callconv(.C) objc.OSStatus;

pub extern "Security" fn AuthorizationFreeItemSet(set: ?*AuthorizationItemSet) callconv(.C) objc.OSStatus;

pub extern "Security" fn AuthorizationExecuteWithPrivileges(authorization: AuthorizationRef, pathToTool: ?*i8, options: AuthorizationFlags, arguments: ?*?*const i8, communicationsPipe: ?*?*objc.FILE, ) callconv(.C) objc.OSStatus;

pub extern "Security" fn AuthorizationCopyPrivilegedReference(authorization: ?*AuthorizationRef, flags: AuthorizationFlags) callconv(.C) objc.OSStatus;

pub const uritySessionId = objc.UInt32;

pub const anon811 = enum(uritySessionId) {
    noSecuritySession = 0,
    callerSecuritySession = -1,
};

pub const SessionAttributeBits = enum(objc.UInt32) {
    sessionIsRoot = 1,
    sessionHasGraphicAccess = 16,
    sessionHasTTY = 32,
    sessionIsRemote = 4096,
};

pub const SessionCreationFlags = enum(objc.UInt32) {
    sessionKeepCurrentBootstrap = 32768,
};

pub extern "Security" fn SessionGetInfo(session: uritySessionId, sessionId: ?*uritySessionId, attributes: ?*SessionAttributeBits) callconv(.C) objc.OSStatus;

pub extern "Security" fn SessionCreate(flags: SessionCreationFlags, attributes: SessionAttributeBits) callconv(.C) objc.OSStatus;

pub const CSSM_MANAGER_EVENT_TYPES = uint32;

pub const cssm_manager_event_notification = extern struct {
    DestinationModuleManagerType: CSSM_SERVICE_MASK,
    SourceModuleManagerType: CSSM_SERVICE_MASK,
    Event: CSSM_MANAGER_EVENT_TYPES,
    EventId: uint32,
    EventData: Asn1Item,
};

pub const CSSM_MANAGER_EVENT_NOTIFICATION_PTR = ?*cssm_manager_event_notification;

pub extern "Security" fn CSSM_Init(Version: ?*CSSM_VERSION, Scope: CSSM_PRIVILEGE_SCOPE, CallerGuid: ?*CSSM_GUID, KeyHierarchy: CSSM_KEY_HIERARCHY, PvcPolicy: ?*CSSM_PVC_MODE, Reserved: ?*anyopaque, ) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_Terminate() callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_ModuleLoad(ModuleGuid: ?*CSSM_GUID, KeyHierarchy: CSSM_KEY_HIERARCHY, AppNotifyCallback: CSSM_API_ModuleEventHandler, AppNotifyCallbackCtx: ?*anyopaque, ) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_ModuleUnload(ModuleGuid: ?*CSSM_GUID, AppNotifyCallback: CSSM_API_ModuleEventHandler, AppNotifyCallbackCtx: ?*anyopaque) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_Introduce(ModuleID: ?*CSSM_GUID, KeyHierarchy: CSSM_KEY_HIERARCHY) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_Unintroduce(ModuleID: ?*CSSM_GUID) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_ModuleAttach(ModuleGuid: ?*CSSM_GUID, Version: ?*CSSM_VERSION, MemoryFuncs: ?*CSSM_API_MEMORY_FUNCS, SubserviceID: uint32, SubServiceType: CSSM_SERVICE_TYPE, AttachFlags: CSSM_ATTACH_FLAGS, KeyHierarchy: CSSM_KEY_HIERARCHY, FunctionTable: ?*CSSM_FUNC_NAME_ADDR, NumFunctionTable: uint32, Reserved: ?*anyopaque, NewModuleHandle: CSSM_MODULE_HANDLE_PTR, ) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_ModuleDetach(ModuleHandle: CSSM_MODULE_HANDLE) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_SetPrivilege(Privilege: CSSM_PRIVILEGE) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_GetPrivilege(Privilege: ?*CSSM_PRIVILEGE) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_GetModuleGUIDFromHandle(ModuleHandle: CSSM_MODULE_HANDLE, ModuleGUID: CSSM_GUID_PTR) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_GetSubserviceUIDFromHandle(ModuleHandle: CSSM_MODULE_HANDLE, SubserviceUID: CSSM_SUBSERVICE_UID_PTR) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_ListAttachedModuleManagers(NumberOfModuleManagers: ?*uint32, ModuleManagerGuids: CSSM_GUID_PTR) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_GetAPIMemoryFunctions(AddInHandle: CSSM_MODULE_HANDLE, AppMemoryFuncs: CSSM_API_MEMORY_FUNCS_PTR) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_CSP_CreateSignatureContext(CSPHandle: CSSM_CSP_HANDLE, AlgorithmID: CSSM_ALGORITHMS, AccessCred: ?*CSSM_ACCESS_CREDENTIALS, Key: ?*CSSM_KEY, NewContextHandle: ?*CSSM_CC_HANDLE, ) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_CSP_CreateSymmetricContext(CSPHandle: CSSM_CSP_HANDLE, AlgorithmID: CSSM_ALGORITHMS, Mode: CSSM_ENCRYPT_MODE, AccessCred: ?*CSSM_ACCESS_CREDENTIALS, Key: ?*CSSM_KEY, InitVector: ?*Asn1Item, Padding: CSSM_PADDING, Reserved: ?*anyopaque, NewContextHandle: ?*CSSM_CC_HANDLE, ) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_CSP_CreateDigestContext(CSPHandle: CSSM_CSP_HANDLE, AlgorithmID: CSSM_ALGORITHMS, NewContextHandle: ?*CSSM_CC_HANDLE) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_CSP_CreateMacContext(CSPHandle: CSSM_CSP_HANDLE, AlgorithmID: CSSM_ALGORITHMS, Key: ?*CSSM_KEY, NewContextHandle: ?*CSSM_CC_HANDLE, ) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_CSP_CreateRandomGenContext(CSPHandle: CSSM_CSP_HANDLE, AlgorithmID: CSSM_ALGORITHMS, Seed: ?*CSSM_CRYPTO_DATA, Length: CSSM_SIZE, NewContextHandle: ?*CSSM_CC_HANDLE, ) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_CSP_CreateAsymmetricContext(CSPHandle: CSSM_CSP_HANDLE, AlgorithmID: CSSM_ALGORITHMS, AccessCred: ?*CSSM_ACCESS_CREDENTIALS, Key: ?*CSSM_KEY, Padding: CSSM_PADDING, NewContextHandle: ?*CSSM_CC_HANDLE, ) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_CSP_CreateDeriveKeyContext(CSPHandle: CSSM_CSP_HANDLE, AlgorithmID: CSSM_ALGORITHMS, DeriveKeyType: CSSM_KEY_TYPE, DeriveKeyLengthInBits: uint32, AccessCred: ?*CSSM_ACCESS_CREDENTIALS, BaseKey: ?*CSSM_KEY, IterationCount: uint32, Salt: ?*Asn1Item, Seed: ?*CSSM_CRYPTO_DATA, NewContextHandle: ?*CSSM_CC_HANDLE, ) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_CSP_CreateKeyGenContext(CSPHandle: CSSM_CSP_HANDLE, AlgorithmID: CSSM_ALGORITHMS, KeySizeInBits: uint32, Seed: ?*CSSM_CRYPTO_DATA, Salt: ?*Asn1Item, StartDate: ?*CSSM_DATE, EndDate: ?*CSSM_DATE, Params: ?*Asn1Item, NewContextHandle: ?*CSSM_CC_HANDLE, ) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_CSP_CreatePassThroughContext(CSPHandle: CSSM_CSP_HANDLE, Key: ?*CSSM_KEY, NewContextHandle: ?*CSSM_CC_HANDLE) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_GetContext(CCHandle: CSSM_CC_HANDLE, Context: ?*CSSM_CONTEXT_PTR) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_FreeContext(Context: CSSM_CONTEXT_PTR) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_SetContext(CCHandle: CSSM_CC_HANDLE, Context: ?*CSSM_CONTEXT) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_DeleteContext(CCHandle: CSSM_CC_HANDLE) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_GetContextAttribute(Context: ?*CSSM_CONTEXT, AttributeType: uint32, ContextAttribute: ?*CSSM_CONTEXT_ATTRIBUTE_PTR) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_UpdateContextAttributes(CCHandle: CSSM_CC_HANDLE, NumberOfAttributes: uint32, ContextAttributes: ?*CSSM_CONTEXT_ATTRIBUTE) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_DeleteContextAttributes(CCHandle: CSSM_CC_HANDLE, NumberOfAttributes: uint32, ContextAttributes: ?*CSSM_CONTEXT_ATTRIBUTE) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_CSP_Login(CSPHandle: CSSM_CSP_HANDLE, AccessCred: ?*CSSM_ACCESS_CREDENTIALS, LoginName: ?*Asn1Item, Reserved: ?*anyopaque, ) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_CSP_Logout(CSPHandle: CSSM_CSP_HANDLE) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_CSP_GetLoginAcl(CSPHandle: CSSM_CSP_HANDLE, SelectionTag: ?*CSSM_STRING, NumberOfAclInfos: ?*uint32, AclInfos: ?*CSSM_ACL_ENTRY_INFO_PTR, ) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_CSP_ChangeLoginAcl(CSPHandle: CSSM_CSP_HANDLE, AccessCred: ?*CSSM_ACCESS_CREDENTIALS, AclEdit: ?*CSSM_ACL_EDIT) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_GetKeyAcl(CSPHandle: CSSM_CSP_HANDLE, Key: ?*CSSM_KEY, SelectionTag: ?*CSSM_STRING, NumberOfAclInfos: ?*uint32, AclInfos: ?*CSSM_ACL_ENTRY_INFO_PTR, ) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_ChangeKeyAcl(CSPHandle: CSSM_CSP_HANDLE, AccessCred: ?*CSSM_ACCESS_CREDENTIALS, AclEdit: ?*CSSM_ACL_EDIT, Key: ?*CSSM_KEY, ) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_GetKeyOwner(CSPHandle: CSSM_CSP_HANDLE, Key: ?*CSSM_KEY, Owner: CSSM_ACL_OWNER_PROTOTYPE_PTR) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_ChangeKeyOwner(CSPHandle: CSSM_CSP_HANDLE, AccessCred: ?*CSSM_ACCESS_CREDENTIALS, Key: ?*CSSM_KEY, NewOwner: ?*CSSM_ACL_OWNER_PROTOTYPE, ) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_CSP_GetLoginOwner(CSPHandle: CSSM_CSP_HANDLE, Owner: CSSM_ACL_OWNER_PROTOTYPE_PTR) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_CSP_ChangeLoginOwner(CSPHandle: CSSM_CSP_HANDLE, AccessCred: ?*CSSM_ACCESS_CREDENTIALS, NewOwner: ?*CSSM_ACL_OWNER_PROTOTYPE) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_SignData(CCHandle: CSSM_CC_HANDLE, DataBufs: ?*Asn1Item, DataBufCount: uint32, DigestAlgorithm: CSSM_ALGORITHMS, Signature: CSSM_DATA_PTR, ) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_SignDataInit(CCHandle: CSSM_CC_HANDLE) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_SignDataUpdate(CCHandle: CSSM_CC_HANDLE, DataBufs: ?*Asn1Item, DataBufCount: uint32) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_SignDataFinal(CCHandle: CSSM_CC_HANDLE, Signature: CSSM_DATA_PTR) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_VerifyData(CCHandle: CSSM_CC_HANDLE, DataBufs: ?*Asn1Item, DataBufCount: uint32, DigestAlgorithm: CSSM_ALGORITHMS, Signature: ?*Asn1Item, ) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_VerifyDataInit(CCHandle: CSSM_CC_HANDLE) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_VerifyDataUpdate(CCHandle: CSSM_CC_HANDLE, DataBufs: ?*Asn1Item, DataBufCount: uint32) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_VerifyDataFinal(CCHandle: CSSM_CC_HANDLE, Signature: ?*Asn1Item) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_DigestData(CCHandle: CSSM_CC_HANDLE, DataBufs: ?*Asn1Item, DataBufCount: uint32, Digest: CSSM_DATA_PTR, ) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_DigestDataInit(CCHandle: CSSM_CC_HANDLE) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_DigestDataUpdate(CCHandle: CSSM_CC_HANDLE, DataBufs: ?*Asn1Item, DataBufCount: uint32) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_DigestDataClone(CCHandle: CSSM_CC_HANDLE, ClonednewCCHandle: ?*CSSM_CC_HANDLE) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_DigestDataFinal(CCHandle: CSSM_CC_HANDLE, Digest: CSSM_DATA_PTR) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_GenerateMac(CCHandle: CSSM_CC_HANDLE, DataBufs: ?*Asn1Item, DataBufCount: uint32, Mac: CSSM_DATA_PTR, ) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_GenerateMacInit(CCHandle: CSSM_CC_HANDLE) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_GenerateMacUpdate(CCHandle: CSSM_CC_HANDLE, DataBufs: ?*Asn1Item, DataBufCount: uint32) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_GenerateMacFinal(CCHandle: CSSM_CC_HANDLE, Mac: CSSM_DATA_PTR) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_VerifyMac(CCHandle: CSSM_CC_HANDLE, DataBufs: ?*Asn1Item, DataBufCount: uint32, Mac: ?*Asn1Item, ) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_VerifyMacInit(CCHandle: CSSM_CC_HANDLE) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_VerifyMacUpdate(CCHandle: CSSM_CC_HANDLE, DataBufs: ?*Asn1Item, DataBufCount: uint32) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_VerifyMacFinal(CCHandle: CSSM_CC_HANDLE, Mac: ?*Asn1Item) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_QuerySize(CCHandle: CSSM_CC_HANDLE, Encrypt: CSSM_BOOL, QuerySizeCount: uint32, DataBlockSizes: CSSM_QUERY_SIZE_DATA_PTR, ) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_EncryptData(CCHandle: CSSM_CC_HANDLE, ClearBufs: ?*Asn1Item, ClearBufCount: uint32, CipherBufs: CSSM_DATA_PTR, CipherBufCount: uint32, bytesEncrypted: ?*CSSM_SIZE, RemData: CSSM_DATA_PTR, ) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_EncryptDataP(CCHandle: CSSM_CC_HANDLE, ClearBufs: ?*Asn1Item, ClearBufCount: uint32, CipherBufs: CSSM_DATA_PTR, CipherBufCount: uint32, bytesEncrypted: ?*CSSM_SIZE, RemData: CSSM_DATA_PTR, Privilege: CSSM_PRIVILEGE, ) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_EncryptDataInit(CCHandle: CSSM_CC_HANDLE) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_EncryptDataInitP(CCHandle: CSSM_CC_HANDLE, Privilege: CSSM_PRIVILEGE) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_EncryptDataUpdate(CCHandle: CSSM_CC_HANDLE, ClearBufs: ?*Asn1Item, ClearBufCount: uint32, CipherBufs: CSSM_DATA_PTR, CipherBufCount: uint32, bytesEncrypted: ?*CSSM_SIZE, ) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_EncryptDataFinal(CCHandle: CSSM_CC_HANDLE, RemData: CSSM_DATA_PTR) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_DecryptData(CCHandle: CSSM_CC_HANDLE, CipherBufs: ?*Asn1Item, CipherBufCount: uint32, ClearBufs: CSSM_DATA_PTR, ClearBufCount: uint32, bytesDecrypted: ?*CSSM_SIZE, RemData: CSSM_DATA_PTR, ) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_DecryptDataP(CCHandle: CSSM_CC_HANDLE, CipherBufs: ?*Asn1Item, CipherBufCount: uint32, ClearBufs: CSSM_DATA_PTR, ClearBufCount: uint32, bytesDecrypted: ?*CSSM_SIZE, RemData: CSSM_DATA_PTR, Privilege: CSSM_PRIVILEGE, ) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_DecryptDataInit(CCHandle: CSSM_CC_HANDLE) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_DecryptDataInitP(CCHandle: CSSM_CC_HANDLE, Privilege: CSSM_PRIVILEGE) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_DecryptDataUpdate(CCHandle: CSSM_CC_HANDLE, CipherBufs: ?*Asn1Item, CipherBufCount: uint32, ClearBufs: CSSM_DATA_PTR, ClearBufCount: uint32, bytesDecrypted: ?*CSSM_SIZE, ) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_DecryptDataFinal(CCHandle: CSSM_CC_HANDLE, RemData: CSSM_DATA_PTR) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_QueryKeySizeInBits(CSPHandle: CSSM_CSP_HANDLE, CCHandle: CSSM_CC_HANDLE, Key: ?*CSSM_KEY, KeySize: CSSM_KEY_SIZE_PTR, ) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_GenerateKey(CCHandle: CSSM_CC_HANDLE, KeyUsage: uint32, KeyAttr: uint32, KeyLabel: ?*Asn1Item, CredAndAclEntry: ?*CSSM_RESOURCE_CONTROL_CONTEXT, Key: CSSM_KEY_PTR, ) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_GenerateKeyP(CCHandle: CSSM_CC_HANDLE, KeyUsage: uint32, KeyAttr: uint32, KeyLabel: ?*Asn1Item, CredAndAclEntry: ?*CSSM_RESOURCE_CONTROL_CONTEXT, Key: CSSM_KEY_PTR, Privilege: CSSM_PRIVILEGE, ) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_GenerateKeyPair(CCHandle: CSSM_CC_HANDLE, PublicKeyUsage: uint32, PublicKeyAttr: uint32, PublicKeyLabel: ?*Asn1Item, PublicKey: CSSM_KEY_PTR, PrivateKeyUsage: uint32, PrivateKeyAttr: uint32, PrivateKeyLabel: ?*Asn1Item, CredAndAclEntry: ?*CSSM_RESOURCE_CONTROL_CONTEXT, PrivateKey: CSSM_KEY_PTR, ) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_GenerateKeyPairP(CCHandle: CSSM_CC_HANDLE, PublicKeyUsage: uint32, PublicKeyAttr: uint32, PublicKeyLabel: ?*Asn1Item, PublicKey: CSSM_KEY_PTR, PrivateKeyUsage: uint32, PrivateKeyAttr: uint32, PrivateKeyLabel: ?*Asn1Item, CredAndAclEntry: ?*CSSM_RESOURCE_CONTROL_CONTEXT, PrivateKey: CSSM_KEY_PTR, Privilege: CSSM_PRIVILEGE, ) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_GenerateRandom(CCHandle: CSSM_CC_HANDLE, RandomNumber: CSSM_DATA_PTR) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_CSP_ObtainPrivateKeyFromPublicKey(CSPHandle: CSSM_CSP_HANDLE, PublicKey: ?*CSSM_KEY, PrivateKey: CSSM_KEY_PTR) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_WrapKey(CCHandle: CSSM_CC_HANDLE, AccessCred: ?*CSSM_ACCESS_CREDENTIALS, Key: ?*CSSM_KEY, DescriptiveData: ?*Asn1Item, WrappedKey: CSSM_WRAP_KEY_PTR, ) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_UnwrapKey(CCHandle: CSSM_CC_HANDLE, PublicKey: ?*CSSM_KEY, WrappedKey: ?*CSSM_WRAP_KEY, KeyUsage: uint32, KeyAttr: uint32, KeyLabel: ?*Asn1Item, CredAndAclEntry: ?*CSSM_RESOURCE_CONTROL_CONTEXT, UnwrappedKey: CSSM_KEY_PTR, DescriptiveData: CSSM_DATA_PTR, ) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_WrapKeyP(CCHandle: CSSM_CC_HANDLE, AccessCred: ?*CSSM_ACCESS_CREDENTIALS, Key: ?*CSSM_KEY, DescriptiveData: ?*Asn1Item, WrappedKey: CSSM_WRAP_KEY_PTR, Privilege: CSSM_PRIVILEGE, ) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_UnwrapKeyP(CCHandle: CSSM_CC_HANDLE, PublicKey: ?*CSSM_KEY, WrappedKey: ?*CSSM_WRAP_KEY, KeyUsage: uint32, KeyAttr: uint32, KeyLabel: ?*Asn1Item, CredAndAclEntry: ?*CSSM_RESOURCE_CONTROL_CONTEXT, UnwrappedKey: CSSM_KEY_PTR, DescriptiveData: CSSM_DATA_PTR, Privilege: CSSM_PRIVILEGE, ) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_DeriveKey(CCHandle: CSSM_CC_HANDLE, Param: CSSM_DATA_PTR, KeyUsage: uint32, KeyAttr: uint32, KeyLabel: ?*Asn1Item, CredAndAclEntry: ?*CSSM_RESOURCE_CONTROL_CONTEXT, DerivedKey: CSSM_KEY_PTR, ) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_FreeKey(CSPHandle: CSSM_CSP_HANDLE, AccessCred: ?*CSSM_ACCESS_CREDENTIALS, KeyPtr: CSSM_KEY_PTR, Delete: CSSM_BOOL, ) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_GenerateAlgorithmParams(CCHandle: CSSM_CC_HANDLE, ParamBits: uint32, Param: CSSM_DATA_PTR) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_CSP_GetOperationalStatistics(CSPHandle: CSSM_CSP_HANDLE, Statistics: ?*CSSM_CSP_OPERATIONAL_STATISTICS) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_GetTimeValue(CSPHandle: CSSM_CSP_HANDLE, TimeAlgorithm: CSSM_ALGORITHMS, TimeData: ?*Asn1Item) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_RetrieveUniqueId(CSPHandle: CSSM_CSP_HANDLE, UniqueID: CSSM_DATA_PTR) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_RetrieveCounter(CSPHandle: CSSM_CSP_HANDLE, Counter: CSSM_DATA_PTR) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_VerifyDevice(CSPHandle: CSSM_CSP_HANDLE, DeviceCert: ?*Asn1Item) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_CSP_PassThrough(CCHandle: CSSM_CC_HANDLE, PassThroughId: uint32, InData: ?*anyopaque, OutData: ?*?*anyopaque, ) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_TP_SubmitCredRequest(TPHandle: CSSM_TP_HANDLE, PreferredAuthority: ?*CSSM_TP_AUTHORITY_ID, RequestType: CSSM_TP_AUTHORITY_REQUEST_TYPE, RequestInput: ?*CSSM_TP_REQUEST_SET, CallerAuthContext: ?*CSSM_TP_CALLERAUTH_CONTEXT, EstimatedTime: ?*sint32, ReferenceIdentifier: CSSM_DATA_PTR, ) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_TP_RetrieveCredResult(TPHandle: CSSM_TP_HANDLE, ReferenceIdentifier: ?*Asn1Item, CallerAuthCredentials: ?*CSSM_TP_CALLERAUTH_CONTEXT, EstimatedTime: ?*sint32, ConfirmationRequired: ?*CSSM_BOOL, RetrieveOutput: ?*CSSM_TP_RESULT_SET_PTR, ) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_TP_ConfirmCredResult(TPHandle: CSSM_TP_HANDLE, ReferenceIdentifier: ?*Asn1Item, CallerAuthCredentials: ?*CSSM_TP_CALLERAUTH_CONTEXT, Responses: ?*CSSM_TP_CONFIRM_RESPONSE, PreferredAuthority: ?*CSSM_TP_AUTHORITY_ID, ) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_TP_ReceiveConfirmation(TPHandle: CSSM_TP_HANDLE, ReferenceIdentifier: ?*Asn1Item, Responses: ?*CSSM_TP_CONFIRM_RESPONSE_PTR, ElapsedTime: ?*sint32, ) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_TP_CertReclaimKey(TPHandle: CSSM_TP_HANDLE, CertGroup: ?*CSSM_CERTGROUP, CertIndex: uint32, KeyCacheHandle: CSSM_LONG_HANDLE, CSPHandle: CSSM_CSP_HANDLE, CredAndAclEntry: ?*CSSM_RESOURCE_CONTROL_CONTEXT, ) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_TP_CertReclaimAbort(TPHandle: CSSM_TP_HANDLE, KeyCacheHandle: CSSM_LONG_HANDLE) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_TP_FormRequest(TPHandle: CSSM_TP_HANDLE, PreferredAuthority: ?*CSSM_TP_AUTHORITY_ID, FormType: CSSM_TP_FORM_TYPE, BlankForm: CSSM_DATA_PTR, ) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_TP_FormSubmit(TPHandle: CSSM_TP_HANDLE, FormType: CSSM_TP_FORM_TYPE, Form: ?*Asn1Item, ClearanceAuthority: ?*CSSM_TP_AUTHORITY_ID, RepresentedAuthority: ?*CSSM_TP_AUTHORITY_ID, Credentials: CSSM_ACCESS_CREDENTIALS_PTR, ) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_TP_CertGroupVerify(TPHandle: CSSM_TP_HANDLE, CLHandle: CSSM_CL_HANDLE, CSPHandle: CSSM_CSP_HANDLE, CertGroupToBeVerified: ?*CSSM_CERTGROUP, VerifyContext: ?*CSSM_TP_VERIFY_CONTEXT, VerifyContextResult: CSSM_TP_VERIFY_CONTEXT_RESULT_PTR, ) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_TP_CertCreateTemplate(TPHandle: CSSM_TP_HANDLE, CLHandle: CSSM_CL_HANDLE, NumberOfFields: uint32, CertFields: ?*CSSM_FIELD, CertTemplate: CSSM_DATA_PTR, ) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_TP_CertGetAllTemplateFields(TPHandle: CSSM_TP_HANDLE, CLHandle: CSSM_CL_HANDLE, CertTemplate: ?*Asn1Item, NumberOfFields: ?*uint32, CertFields: ?*CSSM_FIELD_PTR, ) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_TP_CertSign(TPHandle: CSSM_TP_HANDLE, CLHandle: CSSM_CL_HANDLE, CCHandle: CSSM_CC_HANDLE, CertTemplateToBeSigned: ?*Asn1Item, SignerCertGroup: ?*CSSM_CERTGROUP, SignerVerifyContext: ?*CSSM_TP_VERIFY_CONTEXT, SignerVerifyResult: CSSM_TP_VERIFY_CONTEXT_RESULT_PTR, SignedCert: CSSM_DATA_PTR, ) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_TP_CrlVerify(TPHandle: CSSM_TP_HANDLE, CLHandle: CSSM_CL_HANDLE, CSPHandle: CSSM_CSP_HANDLE, CrlToBeVerified: ?*CSSM_ENCODED_CRL, SignerCertGroup: ?*CSSM_CERTGROUP, VerifyContext: ?*CSSM_TP_VERIFY_CONTEXT, RevokerVerifyResult: CSSM_TP_VERIFY_CONTEXT_RESULT_PTR, ) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_TP_CrlCreateTemplate(TPHandle: CSSM_TP_HANDLE, CLHandle: CSSM_CL_HANDLE, NumberOfFields: uint32, CrlFields: ?*CSSM_FIELD, NewCrlTemplate: CSSM_DATA_PTR, ) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_TP_CertRevoke(TPHandle: CSSM_TP_HANDLE, CLHandle: CSSM_CL_HANDLE, CSPHandle: CSSM_CSP_HANDLE, OldCrlTemplate: ?*Asn1Item, CertGroupToBeRevoked: ?*CSSM_CERTGROUP, RevokerCertGroup: ?*CSSM_CERTGROUP, RevokerVerifyContext: ?*CSSM_TP_VERIFY_CONTEXT, RevokerVerifyResult: CSSM_TP_VERIFY_CONTEXT_RESULT_PTR, Reason: CSSM_TP_CERTCHANGE_REASON, NewCrlTemplate: CSSM_DATA_PTR, ) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_TP_CertRemoveFromCrlTemplate(TPHandle: CSSM_TP_HANDLE, CLHandle: CSSM_CL_HANDLE, CSPHandle: CSSM_CSP_HANDLE, OldCrlTemplate: ?*Asn1Item, CertGroupToBeRemoved: ?*CSSM_CERTGROUP, RevokerCertGroup: ?*CSSM_CERTGROUP, RevokerVerifyContext: ?*CSSM_TP_VERIFY_CONTEXT, RevokerVerifyResult: CSSM_TP_VERIFY_CONTEXT_RESULT_PTR, NewCrlTemplate: CSSM_DATA_PTR, ) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_TP_CrlSign(TPHandle: CSSM_TP_HANDLE, CLHandle: CSSM_CL_HANDLE, CCHandle: CSSM_CC_HANDLE, CrlToBeSigned: ?*CSSM_ENCODED_CRL, SignerCertGroup: ?*CSSM_CERTGROUP, SignerVerifyContext: ?*CSSM_TP_VERIFY_CONTEXT, SignerVerifyResult: CSSM_TP_VERIFY_CONTEXT_RESULT_PTR, SignedCrl: CSSM_DATA_PTR, ) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_TP_ApplyCrlToDb(TPHandle: CSSM_TP_HANDLE, CLHandle: CSSM_CL_HANDLE, CSPHandle: CSSM_CSP_HANDLE, CrlToBeApplied: ?*CSSM_ENCODED_CRL, SignerCertGroup: ?*CSSM_CERTGROUP, ApplyCrlVerifyContext: ?*CSSM_TP_VERIFY_CONTEXT, ApplyCrlVerifyResult: CSSM_TP_VERIFY_CONTEXT_RESULT_PTR, ) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_TP_CertGroupConstruct(TPHandle: CSSM_TP_HANDLE, CLHandle: CSSM_CL_HANDLE, CSPHandle: CSSM_CSP_HANDLE, DBList: ?*CSSM_DL_DB_LIST, ConstructParams: ?*anyopaque, CertGroupFrag: ?*CSSM_CERTGROUP, CertGroup: ?*CSSM_CERTGROUP_PTR, ) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_TP_CertGroupPrune(TPHandle: CSSM_TP_HANDLE, CLHandle: CSSM_CL_HANDLE, DBList: ?*CSSM_DL_DB_LIST, OrderedCertGroup: ?*CSSM_CERTGROUP, PrunedCertGroup: ?*CSSM_CERTGROUP_PTR, ) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_TP_CertGroupToTupleGroup(TPHandle: CSSM_TP_HANDLE, CLHandle: CSSM_CL_HANDLE, CertGroup: ?*CSSM_CERTGROUP, TupleGroup: ?*CSSM_TUPLEGROUP_PTR, ) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_TP_TupleGroupToCertGroup(TPHandle: CSSM_TP_HANDLE, CLHandle: CSSM_CL_HANDLE, TupleGroup: ?*CSSM_TUPLEGROUP, CertTemplates: ?*CSSM_CERTGROUP_PTR, ) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_TP_PassThrough(TPHandle: CSSM_TP_HANDLE, CLHandle: CSSM_CL_HANDLE, CCHandle: CSSM_CC_HANDLE, DBList: ?*CSSM_DL_DB_LIST, PassThroughId: uint32, InputParams: ?*anyopaque, OutputParams: ?*?*anyopaque, ) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_AC_AuthCompute(ACHandle: CSSM_AC_HANDLE, BaseAuthorizations: ?*CSSM_TUPLEGROUP, Credentials: ?*CSSM_TUPLEGROUP, NumberOfRequestors: uint32, Requestors: ?*CSSM_LIST, RequestedAuthorizationPeriod: ?*CSSM_LIST, RequestedAuthorization: ?*CSSM_LIST, AuthorizationResult: CSSM_TUPLEGROUP_PTR, ) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_AC_PassThrough(ACHandle: CSSM_AC_HANDLE, TPHandle: CSSM_TP_HANDLE, CLHandle: CSSM_CL_HANDLE, CCHandle: CSSM_CC_HANDLE, DBList: ?*CSSM_DL_DB_LIST, PassThroughId: uint32, InputParams: ?*anyopaque, OutputParams: ?*?*anyopaque, ) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_CL_CertCreateTemplate(CLHandle: CSSM_CL_HANDLE, NumberOfFields: uint32, CertFields: ?*CSSM_FIELD, CertTemplate: CSSM_DATA_PTR, ) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_CL_CertGetAllTemplateFields(CLHandle: CSSM_CL_HANDLE, CertTemplate: ?*Asn1Item, NumberOfFields: ?*uint32, CertFields: ?*CSSM_FIELD_PTR, ) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_CL_CertSign(CLHandle: CSSM_CL_HANDLE, CCHandle: CSSM_CC_HANDLE, CertTemplate: ?*Asn1Item, SignScope: ?*CSSM_FIELD, ScopeSize: uint32, SignedCert: CSSM_DATA_PTR, ) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_CL_CertVerify(CLHandle: CSSM_CL_HANDLE, CCHandle: CSSM_CC_HANDLE, CertToBeVerified: ?*Asn1Item, SignerCert: ?*Asn1Item, VerifyScope: ?*CSSM_FIELD, ScopeSize: uint32, ) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_CL_CertVerifyWithKey(CLHandle: CSSM_CL_HANDLE, CCHandle: CSSM_CC_HANDLE, CertToBeVerified: ?*Asn1Item) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_CL_CertGetFirstFieldValue(CLHandle: CSSM_CL_HANDLE, Cert: ?*Asn1Item, CertField: ?*Asn1Oid, ResultsHandle: CSSM_HANDLE_PTR, NumberOfMatchedFields: ?*uint32, Value: ?*CSSM_DATA_PTR, ) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_CL_CertGetNextFieldValue(CLHandle: CSSM_CL_HANDLE, ResultsHandle: CSSM_HANDLE, Value: ?*CSSM_DATA_PTR) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_CL_CertAbortQuery(CLHandle: CSSM_CL_HANDLE, ResultsHandle: CSSM_HANDLE) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_CL_CertGetKeyInfo(CLHandle: CSSM_CL_HANDLE, Cert: ?*Asn1Item, Key: ?*CSSM_KEY_PTR) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_CL_CertGetAllFields(CLHandle: CSSM_CL_HANDLE, Cert: ?*Asn1Item, NumberOfFields: ?*uint32, CertFields: ?*CSSM_FIELD_PTR, ) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_CL_FreeFields(CLHandle: CSSM_CL_HANDLE, NumberOfFields: uint32, Fields: ?*CSSM_FIELD_PTR) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_CL_FreeFieldValue(CLHandle: CSSM_CL_HANDLE, CertOrCrlOid: ?*Asn1Oid, Value: CSSM_DATA_PTR) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_CL_CertCache(CLHandle: CSSM_CL_HANDLE, Cert: ?*Asn1Item, CertHandle: CSSM_HANDLE_PTR) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_CL_CertGetFirstCachedFieldValue(CLHandle: CSSM_CL_HANDLE, CertHandle: CSSM_HANDLE, CertField: ?*Asn1Oid, ResultsHandle: CSSM_HANDLE_PTR, NumberOfMatchedFields: ?*uint32, Value: ?*CSSM_DATA_PTR, ) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_CL_CertGetNextCachedFieldValue(CLHandle: CSSM_CL_HANDLE, ResultsHandle: CSSM_HANDLE, Value: ?*CSSM_DATA_PTR) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_CL_CertAbortCache(CLHandle: CSSM_CL_HANDLE, CertHandle: CSSM_HANDLE) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_CL_CertGroupToSignedBundle(CLHandle: CSSM_CL_HANDLE, CCHandle: CSSM_CC_HANDLE, CertGroupToBundle: ?*CSSM_CERTGROUP, BundleInfo: ?*CSSM_CERT_BUNDLE_HEADER, SignedBundle: CSSM_DATA_PTR, ) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_CL_CertGroupFromVerifiedBundle(CLHandle: CSSM_CL_HANDLE, CCHandle: CSSM_CC_HANDLE, CertBundle: ?*CSSM_CERT_BUNDLE, SignerCert: ?*Asn1Item, CertGroup: ?*CSSM_CERTGROUP_PTR, ) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_CL_CertDescribeFormat(CLHandle: CSSM_CL_HANDLE, NumberOfFields: ?*uint32, OidList: ?*CSSM_OID_PTR) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_CL_CrlCreateTemplate(CLHandle: CSSM_CL_HANDLE, NumberOfFields: uint32, CrlTemplate: ?*CSSM_FIELD, NewCrl: CSSM_DATA_PTR, ) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_CL_CrlSetFields(CLHandle: CSSM_CL_HANDLE, NumberOfFields: uint32, CrlTemplate: ?*CSSM_FIELD, OldCrl: ?*Asn1Item, ModifiedCrl: CSSM_DATA_PTR, ) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_CL_CrlAddCert(CLHandle: CSSM_CL_HANDLE, CCHandle: CSSM_CC_HANDLE, Cert: ?*Asn1Item, NumberOfFields: uint32, CrlEntryFields: ?*CSSM_FIELD, OldCrl: ?*Asn1Item, NewCrl: CSSM_DATA_PTR, ) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_CL_CrlRemoveCert(CLHandle: CSSM_CL_HANDLE, Cert: ?*Asn1Item, OldCrl: ?*Asn1Item, NewCrl: CSSM_DATA_PTR, ) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_CL_CrlSign(CLHandle: CSSM_CL_HANDLE, CCHandle: CSSM_CC_HANDLE, UnsignedCrl: ?*Asn1Item, SignScope: ?*CSSM_FIELD, ScopeSize: uint32, SignedCrl: CSSM_DATA_PTR, ) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_CL_CrlVerify(CLHandle: CSSM_CL_HANDLE, CCHandle: CSSM_CC_HANDLE, CrlToBeVerified: ?*Asn1Item, SignerCert: ?*Asn1Item, VerifyScope: ?*CSSM_FIELD, ScopeSize: uint32, ) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_CL_CrlVerifyWithKey(CLHandle: CSSM_CL_HANDLE, CCHandle: CSSM_CC_HANDLE, CrlToBeVerified: ?*Asn1Item) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_CL_IsCertInCrl(CLHandle: CSSM_CL_HANDLE, Cert: ?*Asn1Item, Crl: ?*Asn1Item, CertFound: ?*CSSM_BOOL, ) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_CL_CrlGetFirstFieldValue(CLHandle: CSSM_CL_HANDLE, Crl: ?*Asn1Item, CrlField: ?*Asn1Oid, ResultsHandle: CSSM_HANDLE_PTR, NumberOfMatchedFields: ?*uint32, Value: ?*CSSM_DATA_PTR, ) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_CL_CrlGetNextFieldValue(CLHandle: CSSM_CL_HANDLE, ResultsHandle: CSSM_HANDLE, Value: ?*CSSM_DATA_PTR) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_CL_CrlAbortQuery(CLHandle: CSSM_CL_HANDLE, ResultsHandle: CSSM_HANDLE) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_CL_CrlGetAllFields(CLHandle: CSSM_CL_HANDLE, Crl: ?*Asn1Item, NumberOfCrlFields: ?*uint32, CrlFields: ?*CSSM_FIELD_PTR, ) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_CL_CrlCache(CLHandle: CSSM_CL_HANDLE, Crl: ?*Asn1Item, CrlHandle: CSSM_HANDLE_PTR) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_CL_IsCertInCachedCrl(CLHandle: CSSM_CL_HANDLE, Cert: ?*Asn1Item, CrlHandle: CSSM_HANDLE, CertFound: ?*CSSM_BOOL, CrlRecordIndex: CSSM_DATA_PTR, ) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_CL_CrlGetFirstCachedFieldValue(CLHandle: CSSM_CL_HANDLE, CrlHandle: CSSM_HANDLE, CrlRecordIndex: ?*Asn1Item, CrlField: ?*Asn1Oid, ResultsHandle: CSSM_HANDLE_PTR, NumberOfMatchedFields: ?*uint32, Value: ?*CSSM_DATA_PTR, ) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_CL_CrlGetNextCachedFieldValue(CLHandle: CSSM_CL_HANDLE, ResultsHandle: CSSM_HANDLE, Value: ?*CSSM_DATA_PTR) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_CL_CrlGetAllCachedRecordFields(CLHandle: CSSM_CL_HANDLE, CrlHandle: CSSM_HANDLE, CrlRecordIndex: ?*Asn1Item, NumberOfFields: ?*uint32, CrlFields: ?*CSSM_FIELD_PTR, ) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_CL_CrlAbortCache(CLHandle: CSSM_CL_HANDLE, CrlHandle: CSSM_HANDLE) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_CL_CrlDescribeFormat(CLHandle: CSSM_CL_HANDLE, NumberOfFields: ?*uint32, OidList: ?*CSSM_OID_PTR) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_CL_PassThrough(CLHandle: CSSM_CL_HANDLE, CCHandle: CSSM_CC_HANDLE, PassThroughId: uint32, InputParams: ?*anyopaque, OutputParams: ?*?*anyopaque, ) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_DL_DbOpen(DLHandle: CSSM_DL_HANDLE, DbName: ?*i8, DbLocation: ?*CSSM_NET_ADDRESS, AccessRequest: CSSM_DB_ACCESS_TYPE, AccessCred: ?*CSSM_ACCESS_CREDENTIALS, OpenParameters: ?*anyopaque, DbHandle: ?*CSSM_DB_HANDLE, ) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_DL_DbClose(DLDBHandle: CSSM_DL_DB_HANDLE) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_DL_DbCreate(DLHandle: CSSM_DL_HANDLE, DbName: ?*i8, DbLocation: ?*CSSM_NET_ADDRESS, DBInfo: ?*CSSM_DBINFO, AccessRequest: CSSM_DB_ACCESS_TYPE, CredAndAclEntry: ?*CSSM_RESOURCE_CONTROL_CONTEXT, OpenParameters: ?*anyopaque, DbHandle: ?*CSSM_DB_HANDLE, ) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_DL_DbDelete(DLHandle: CSSM_DL_HANDLE, DbName: ?*i8, DbLocation: ?*CSSM_NET_ADDRESS, AccessCred: ?*CSSM_ACCESS_CREDENTIALS, ) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_DL_CreateRelation(DLDBHandle: CSSM_DL_DB_HANDLE, RelationID: CSSM_DB_RECORDTYPE, RelationName: ?*i8, NumberOfAttributes: uint32, pAttributeInfo: ?*CSSM_DB_SCHEMA_ATTRIBUTE_INFO, NumberOfIndexes: uint32, pIndexInfo: ?*CSSM_DB_SCHEMA_INDEX_INFO, ) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_DL_DestroyRelation(DLDBHandle: CSSM_DL_DB_HANDLE, RelationID: CSSM_DB_RECORDTYPE) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_DL_Authenticate(DLDBHandle: CSSM_DL_DB_HANDLE, AccessRequest: CSSM_DB_ACCESS_TYPE, AccessCred: ?*CSSM_ACCESS_CREDENTIALS) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_DL_GetDbAcl(DLDBHandle: CSSM_DL_DB_HANDLE, SelectionTag: ?*CSSM_STRING, NumberOfAclInfos: ?*uint32, AclInfos: ?*CSSM_ACL_ENTRY_INFO_PTR, ) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_DL_ChangeDbAcl(DLDBHandle: CSSM_DL_DB_HANDLE, AccessCred: ?*CSSM_ACCESS_CREDENTIALS, AclEdit: ?*CSSM_ACL_EDIT) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_DL_GetDbOwner(DLDBHandle: CSSM_DL_DB_HANDLE, Owner: CSSM_ACL_OWNER_PROTOTYPE_PTR) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_DL_ChangeDbOwner(DLDBHandle: CSSM_DL_DB_HANDLE, AccessCred: ?*CSSM_ACCESS_CREDENTIALS, NewOwner: ?*CSSM_ACL_OWNER_PROTOTYPE) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_DL_GetDbNames(DLHandle: CSSM_DL_HANDLE, NameList: ?*CSSM_NAME_LIST_PTR) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_DL_GetDbNameFromHandle(DLDBHandle: CSSM_DL_DB_HANDLE, DbName: ?*?*i8) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_DL_FreeNameList(DLHandle: CSSM_DL_HANDLE, NameList: CSSM_NAME_LIST_PTR) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_DL_DataInsert(DLDBHandle: CSSM_DL_DB_HANDLE, RecordType: CSSM_DB_RECORDTYPE, Attributes: ?*CSSM_DB_RECORD_ATTRIBUTE_DATA, Data: ?*Asn1Item, UniqueId: ?*CSSM_DB_UNIQUE_RECORD_PTR, ) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_DL_DataDelete(DLDBHandle: CSSM_DL_DB_HANDLE, UniqueRecordIdentifier: ?*CSSM_DB_UNIQUE_RECORD) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_DL_DataModify(DLDBHandle: CSSM_DL_DB_HANDLE, RecordType: CSSM_DB_RECORDTYPE, UniqueRecordIdentifier: CSSM_DB_UNIQUE_RECORD_PTR, AttributesToBeModified: ?*CSSM_DB_RECORD_ATTRIBUTE_DATA, DataToBeModified: ?*Asn1Item, ModifyMode: CSSM_DB_MODIFY_MODE, ) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_DL_DataGetFirst(DLDBHandle: CSSM_DL_DB_HANDLE, Query: ?*CSSM_QUERY, ResultsHandle: CSSM_HANDLE_PTR, Attributes: CSSM_DB_RECORD_ATTRIBUTE_DATA_PTR, Data: CSSM_DATA_PTR, UniqueId: ?*CSSM_DB_UNIQUE_RECORD_PTR, ) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_DL_DataGetNext(DLDBHandle: CSSM_DL_DB_HANDLE, ResultsHandle: CSSM_HANDLE, Attributes: CSSM_DB_RECORD_ATTRIBUTE_DATA_PTR, Data: CSSM_DATA_PTR, UniqueId: ?*CSSM_DB_UNIQUE_RECORD_PTR, ) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_DL_DataAbortQuery(DLDBHandle: CSSM_DL_DB_HANDLE, ResultsHandle: CSSM_HANDLE) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_DL_DataGetFromUniqueRecordId(DLDBHandle: CSSM_DL_DB_HANDLE, UniqueRecord: ?*CSSM_DB_UNIQUE_RECORD, Attributes: CSSM_DB_RECORD_ATTRIBUTE_DATA_PTR, Data: CSSM_DATA_PTR, ) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_DL_FreeUniqueRecord(DLDBHandle: CSSM_DL_DB_HANDLE, UniqueRecord: CSSM_DB_UNIQUE_RECORD_PTR) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_DL_PassThrough(DLDBHandle: CSSM_DL_DB_HANDLE, PassThroughId: uint32, InputParams: ?*anyopaque, OutputParams: ?*?*anyopaque, ) callconv(.C) CSSM_RETURN;

pub const cssm_spi_ac_funcs = extern struct {
    AuthCompute: ?*const fn(CSSM_AC_HANDLE, ?*CSSM_TUPLEGROUP, ?*CSSM_TUPLEGROUP, uint32, ?*CSSM_LIST, ?*CSSM_LIST, ?*CSSM_LIST, CSSM_TUPLEGROUP_PTR, ) callconv(.C) CSSM_RETURN,
    PassThrough: ?*const fn(CSSM_AC_HANDLE, CSSM_TP_HANDLE, CSSM_CL_HANDLE, CSSM_CC_HANDLE, ?*CSSM_DL_DB_LIST, uint32, ?*anyopaque, ?*?*anyopaque, ) callconv(.C) CSSM_RETURN,
};

pub const CSSM_SPI_AC_FUNCS_PTR = ?*cssm_spi_ac_funcs;

pub const cssm_spi_cl_funcs = extern struct {
    CertCreateTemplate: ?*const fn(CSSM_CL_HANDLE, uint32, ?*CSSM_FIELD, CSSM_DATA_PTR, ) callconv(.C) CSSM_RETURN,
    CertGetAllTemplateFields: ?*const fn(CSSM_CL_HANDLE, ?*Asn1Item, ?*uint32, ?*CSSM_FIELD_PTR, ) callconv(.C) CSSM_RETURN,
    CertSign: ?*const fn(CSSM_CL_HANDLE, CSSM_CC_HANDLE, ?*Asn1Item, ?*CSSM_FIELD, uint32, CSSM_DATA_PTR, ) callconv(.C) CSSM_RETURN,
    CertVerify: ?*const fn(CSSM_CL_HANDLE, CSSM_CC_HANDLE, ?*Asn1Item, ?*Asn1Item, ?*CSSM_FIELD, uint32, ) callconv(.C) CSSM_RETURN,
    CertVerifyWithKey: ?*const fn(CSSM_CL_HANDLE, CSSM_CC_HANDLE, ?*Asn1Item) callconv(.C) CSSM_RETURN,
    CertGetFirstFieldValue: ?*const fn(CSSM_CL_HANDLE, ?*Asn1Item, ?*Asn1Oid, CSSM_HANDLE_PTR, ?*uint32, ?*CSSM_DATA_PTR, ) callconv(.C) CSSM_RETURN,
    CertGetNextFieldValue: ?*const fn(CSSM_CL_HANDLE, CSSM_HANDLE, ?*CSSM_DATA_PTR) callconv(.C) CSSM_RETURN,
    CertAbortQuery: ?*const fn(CSSM_CL_HANDLE, CSSM_HANDLE) callconv(.C) CSSM_RETURN,
    CertGetKeyInfo: ?*const fn(CSSM_CL_HANDLE, ?*Asn1Item, ?*CSSM_KEY_PTR) callconv(.C) CSSM_RETURN,
    CertGetAllFields: ?*const fn(CSSM_CL_HANDLE, ?*Asn1Item, ?*uint32, ?*CSSM_FIELD_PTR, ) callconv(.C) CSSM_RETURN,
    FreeFields: ?*const fn(CSSM_CL_HANDLE, uint32, ?*CSSM_FIELD_PTR) callconv(.C) CSSM_RETURN,
    FreeFieldValue: ?*const fn(CSSM_CL_HANDLE, ?*Asn1Oid, CSSM_DATA_PTR) callconv(.C) CSSM_RETURN,
    CertCache: ?*const fn(CSSM_CL_HANDLE, ?*Asn1Item, CSSM_HANDLE_PTR) callconv(.C) CSSM_RETURN,
    CertGetFirstCachedFieldValue: ?*const fn(CSSM_CL_HANDLE, CSSM_HANDLE, ?*Asn1Oid, CSSM_HANDLE_PTR, ?*uint32, ?*CSSM_DATA_PTR, ) callconv(.C) CSSM_RETURN,
    CertGetNextCachedFieldValue: ?*const fn(CSSM_CL_HANDLE, CSSM_HANDLE, ?*CSSM_DATA_PTR) callconv(.C) CSSM_RETURN,
    CertAbortCache: ?*const fn(CSSM_CL_HANDLE, CSSM_HANDLE) callconv(.C) CSSM_RETURN,
    CertGroupToSignedBundle: ?*const fn(CSSM_CL_HANDLE, CSSM_CC_HANDLE, ?*CSSM_CERTGROUP, ?*CSSM_CERT_BUNDLE_HEADER, CSSM_DATA_PTR, ) callconv(.C) CSSM_RETURN,
    CertGroupFromVerifiedBundle: ?*const fn(CSSM_CL_HANDLE, CSSM_CC_HANDLE, ?*CSSM_CERT_BUNDLE, ?*Asn1Item, ?*CSSM_CERTGROUP_PTR, ) callconv(.C) CSSM_RETURN,
    CertDescribeFormat: ?*const fn(CSSM_CL_HANDLE, ?*uint32, ?*CSSM_OID_PTR) callconv(.C) CSSM_RETURN,
    CrlCreateTemplate: ?*const fn(CSSM_CL_HANDLE, uint32, ?*CSSM_FIELD, CSSM_DATA_PTR, ) callconv(.C) CSSM_RETURN,
    CrlSetFields: ?*const fn(CSSM_CL_HANDLE, uint32, ?*CSSM_FIELD, ?*Asn1Item, CSSM_DATA_PTR, ) callconv(.C) CSSM_RETURN,
    CrlAddCert: ?*const fn(CSSM_CL_HANDLE, CSSM_CC_HANDLE, ?*Asn1Item, uint32, ?*CSSM_FIELD, ?*Asn1Item, CSSM_DATA_PTR, ) callconv(.C) CSSM_RETURN,
    CrlRemoveCert: ?*const fn(CSSM_CL_HANDLE, ?*Asn1Item, ?*Asn1Item, CSSM_DATA_PTR, ) callconv(.C) CSSM_RETURN,
    CrlSign: ?*const fn(CSSM_CL_HANDLE, CSSM_CC_HANDLE, ?*Asn1Item, ?*CSSM_FIELD, uint32, CSSM_DATA_PTR, ) callconv(.C) CSSM_RETURN,
    CrlVerify: ?*const fn(CSSM_CL_HANDLE, CSSM_CC_HANDLE, ?*Asn1Item, ?*Asn1Item, ?*CSSM_FIELD, uint32, ) callconv(.C) CSSM_RETURN,
    CrlVerifyWithKey: ?*const fn(CSSM_CL_HANDLE, CSSM_CC_HANDLE, ?*Asn1Item) callconv(.C) CSSM_RETURN,
    IsCertInCrl: ?*const fn(CSSM_CL_HANDLE, ?*Asn1Item, ?*Asn1Item, ?*CSSM_BOOL, ) callconv(.C) CSSM_RETURN,
    CrlGetFirstFieldValue: ?*const fn(CSSM_CL_HANDLE, ?*Asn1Item, ?*Asn1Oid, CSSM_HANDLE_PTR, ?*uint32, ?*CSSM_DATA_PTR, ) callconv(.C) CSSM_RETURN,
    CrlGetNextFieldValue: ?*const fn(CSSM_CL_HANDLE, CSSM_HANDLE, ?*CSSM_DATA_PTR) callconv(.C) CSSM_RETURN,
    CrlAbortQuery: ?*const fn(CSSM_CL_HANDLE, CSSM_HANDLE) callconv(.C) CSSM_RETURN,
    CrlGetAllFields: ?*const fn(CSSM_CL_HANDLE, ?*Asn1Item, ?*uint32, ?*CSSM_FIELD_PTR, ) callconv(.C) CSSM_RETURN,
    CrlCache: ?*const fn(CSSM_CL_HANDLE, ?*Asn1Item, CSSM_HANDLE_PTR) callconv(.C) CSSM_RETURN,
    IsCertInCachedCrl: ?*const fn(CSSM_CL_HANDLE, ?*Asn1Item, CSSM_HANDLE, ?*CSSM_BOOL, CSSM_DATA_PTR, ) callconv(.C) CSSM_RETURN,
    CrlGetFirstCachedFieldValue: ?*const fn(CSSM_CL_HANDLE, CSSM_HANDLE, ?*Asn1Item, ?*Asn1Oid, CSSM_HANDLE_PTR, ?*uint32, ?*CSSM_DATA_PTR, ) callconv(.C) CSSM_RETURN,
    CrlGetNextCachedFieldValue: ?*const fn(CSSM_CL_HANDLE, CSSM_HANDLE, ?*CSSM_DATA_PTR) callconv(.C) CSSM_RETURN,
    CrlGetAllCachedRecordFields: ?*const fn(CSSM_CL_HANDLE, CSSM_HANDLE, ?*Asn1Item, ?*uint32, ?*CSSM_FIELD_PTR, ) callconv(.C) CSSM_RETURN,
    CrlAbortCache: ?*const fn(CSSM_CL_HANDLE, CSSM_HANDLE) callconv(.C) CSSM_RETURN,
    CrlDescribeFormat: ?*const fn(CSSM_CL_HANDLE, ?*uint32, ?*CSSM_OID_PTR) callconv(.C) CSSM_RETURN,
    PassThrough: ?*const fn(CSSM_CL_HANDLE, CSSM_CC_HANDLE, uint32, ?*anyopaque, ?*?*anyopaque, ) callconv(.C) CSSM_RETURN,
};

pub const CSSM_SPI_CL_FUNCS_PTR = ?*cssm_spi_cl_funcs;

pub const CSSM_SPI_ModuleEventHandler = ?*const fn(?*CSSM_GUID, ?*anyopaque, uint32, CSSM_SERVICE_TYPE, CSSM_MODULE_EVENT, ) callconv(.C) CSSM_RETURN;

pub const CSSM_CONTEXT_EVENT = uint32;

pub const cssm_module_funcs = extern struct {
    ServiceType: CSSM_SERVICE_TYPE,
    NumberOfServiceFuncs: uint32,
    ServiceFuncs: ?*CSSM_PROC_ADDR,
};

pub const CSSM_MODULE_FUNCS_PTR = ?*cssm_module_funcs;

pub const CSSM_UPCALLS_MALLOC = ?*const fn(CSSM_HANDLE, objc.size_t) callconv(.C) ?*anyopaque;

pub const CSSM_UPCALLS_FREE = ?*const fn(CSSM_HANDLE, ?*anyopaque) callconv(.C) void;

pub const CSSM_UPCALLS_REALLOC = ?*const fn(CSSM_HANDLE, ?*anyopaque, objc.size_t) callconv(.C) ?*anyopaque;

pub const CSSM_UPCALLS_CALLOC = ?*const fn(CSSM_HANDLE, objc.size_t, objc.size_t) callconv(.C) ?*anyopaque;

pub const cssm_upcalls = extern struct {
    malloc_func: CSSM_UPCALLS_MALLOC,
    free_func: CSSM_UPCALLS_FREE,
    realloc_func: CSSM_UPCALLS_REALLOC,
    calloc_func: CSSM_UPCALLS_CALLOC,
    CcToHandle_func: ?*const fn(CSSM_CC_HANDLE, CSSM_MODULE_HANDLE_PTR) callconv(.C) CSSM_RETURN,
    GetModuleInfo_func: ?*const fn(CSSM_MODULE_HANDLE, CSSM_GUID_PTR, CSSM_VERSION_PTR, ?*uint32, ?*CSSM_SERVICE_TYPE, ?*CSSM_ATTACH_FLAGS, ?*CSSM_KEY_HIERARCHY, CSSM_API_MEMORY_FUNCS_PTR, CSSM_FUNC_NAME_ADDR_PTR, uint32, ) callconv(.C) CSSM_RETURN,
};

pub const CSSM_UPCALLS_PTR = ?*cssm_upcalls;

pub const cssm_spi_csp_funcs = extern struct {
    EventNotify: ?*const fn(CSSM_CSP_HANDLE, CSSM_CONTEXT_EVENT, CSSM_CC_HANDLE, ?*CSSM_CONTEXT, ) callconv(.C) CSSM_RETURN,
    QuerySize: ?*const fn(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, ?*CSSM_CONTEXT, CSSM_BOOL, uint32, CSSM_QUERY_SIZE_DATA_PTR, ) callconv(.C) CSSM_RETURN,
    SignData: ?*const fn(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, ?*CSSM_CONTEXT, ?*Asn1Item, uint32, CSSM_ALGORITHMS, CSSM_DATA_PTR, ) callconv(.C) CSSM_RETURN,
    SignDataInit: ?*const fn(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, ?*CSSM_CONTEXT) callconv(.C) CSSM_RETURN,
    SignDataUpdate: ?*const fn(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, ?*Asn1Item, uint32, ) callconv(.C) CSSM_RETURN,
    SignDataFinal: ?*const fn(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_DATA_PTR) callconv(.C) CSSM_RETURN,
    VerifyData: ?*const fn(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, ?*CSSM_CONTEXT, ?*Asn1Item, uint32, CSSM_ALGORITHMS, ?*Asn1Item, ) callconv(.C) CSSM_RETURN,
    VerifyDataInit: ?*const fn(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, ?*CSSM_CONTEXT) callconv(.C) CSSM_RETURN,
    VerifyDataUpdate: ?*const fn(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, ?*Asn1Item, uint32, ) callconv(.C) CSSM_RETURN,
    VerifyDataFinal: ?*const fn(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, ?*Asn1Item) callconv(.C) CSSM_RETURN,
    DigestData: ?*const fn(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, ?*CSSM_CONTEXT, ?*Asn1Item, uint32, CSSM_DATA_PTR, ) callconv(.C) CSSM_RETURN,
    DigestDataInit: ?*const fn(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, ?*CSSM_CONTEXT) callconv(.C) CSSM_RETURN,
    DigestDataUpdate: ?*const fn(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, ?*Asn1Item, uint32, ) callconv(.C) CSSM_RETURN,
    DigestDataClone: ?*const fn(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_CC_HANDLE) callconv(.C) CSSM_RETURN,
    DigestDataFinal: ?*const fn(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_DATA_PTR) callconv(.C) CSSM_RETURN,
    GenerateMac: ?*const fn(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, ?*CSSM_CONTEXT, ?*Asn1Item, uint32, CSSM_DATA_PTR, ) callconv(.C) CSSM_RETURN,
    GenerateMacInit: ?*const fn(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, ?*CSSM_CONTEXT) callconv(.C) CSSM_RETURN,
    GenerateMacUpdate: ?*const fn(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, ?*Asn1Item, uint32, ) callconv(.C) CSSM_RETURN,
    GenerateMacFinal: ?*const fn(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_DATA_PTR) callconv(.C) CSSM_RETURN,
    VerifyMac: ?*const fn(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, ?*CSSM_CONTEXT, ?*Asn1Item, uint32, ?*Asn1Item, ) callconv(.C) CSSM_RETURN,
    VerifyMacInit: ?*const fn(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, ?*CSSM_CONTEXT) callconv(.C) CSSM_RETURN,
    VerifyMacUpdate: ?*const fn(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, ?*Asn1Item, uint32, ) callconv(.C) CSSM_RETURN,
    VerifyMacFinal: ?*const fn(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, ?*Asn1Item) callconv(.C) CSSM_RETURN,
    EncryptData: ?*const fn(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, ?*CSSM_CONTEXT, ?*Asn1Item, uint32, CSSM_DATA_PTR, uint32, ?*CSSM_SIZE, CSSM_DATA_PTR, CSSM_PRIVILEGE, ) callconv(.C) CSSM_RETURN,
    EncryptDataInit: ?*const fn(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, ?*CSSM_CONTEXT, CSSM_PRIVILEGE, ) callconv(.C) CSSM_RETURN,
    EncryptDataUpdate: ?*const fn(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, ?*Asn1Item, uint32, CSSM_DATA_PTR, uint32, ?*CSSM_SIZE, ) callconv(.C) CSSM_RETURN,
    EncryptDataFinal: ?*const fn(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_DATA_PTR) callconv(.C) CSSM_RETURN,
    DecryptData: ?*const fn(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, ?*CSSM_CONTEXT, ?*Asn1Item, uint32, CSSM_DATA_PTR, uint32, ?*CSSM_SIZE, CSSM_DATA_PTR, CSSM_PRIVILEGE, ) callconv(.C) CSSM_RETURN,
    DecryptDataInit: ?*const fn(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, ?*CSSM_CONTEXT, CSSM_PRIVILEGE, ) callconv(.C) CSSM_RETURN,
    DecryptDataUpdate: ?*const fn(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, ?*Asn1Item, uint32, CSSM_DATA_PTR, uint32, ?*CSSM_SIZE, ) callconv(.C) CSSM_RETURN,
    DecryptDataFinal: ?*const fn(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_DATA_PTR) callconv(.C) CSSM_RETURN,
    QueryKeySizeInBits: ?*const fn(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, ?*CSSM_CONTEXT, ?*CSSM_KEY, CSSM_KEY_SIZE_PTR, ) callconv(.C) CSSM_RETURN,
    GenerateKey: ?*const fn(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, ?*CSSM_CONTEXT, uint32, uint32, ?*Asn1Item, ?*CSSM_RESOURCE_CONTROL_CONTEXT, CSSM_KEY_PTR, CSSM_PRIVILEGE, ) callconv(.C) CSSM_RETURN,
    GenerateKeyPair: ?*const fn(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, ?*CSSM_CONTEXT, uint32, uint32, ?*Asn1Item, CSSM_KEY_PTR, uint32, uint32, ?*Asn1Item, ?*CSSM_RESOURCE_CONTROL_CONTEXT, CSSM_KEY_PTR, CSSM_PRIVILEGE, ) callconv(.C) CSSM_RETURN,
    GenerateRandom: ?*const fn(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, ?*CSSM_CONTEXT, CSSM_DATA_PTR, ) callconv(.C) CSSM_RETURN,
    GenerateAlgorithmParams: ?*const fn(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, ?*CSSM_CONTEXT, uint32, CSSM_DATA_PTR, ?*uint32, ?*CSSM_CONTEXT_ATTRIBUTE_PTR, ) callconv(.C) CSSM_RETURN,
    WrapKey: ?*const fn(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, ?*CSSM_CONTEXT, ?*CSSM_ACCESS_CREDENTIALS, ?*CSSM_KEY, ?*Asn1Item, CSSM_WRAP_KEY_PTR, CSSM_PRIVILEGE, ) callconv(.C) CSSM_RETURN,
    UnwrapKey: ?*const fn(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, ?*CSSM_CONTEXT, ?*CSSM_KEY, ?*CSSM_WRAP_KEY, uint32, uint32, ?*Asn1Item, ?*CSSM_RESOURCE_CONTROL_CONTEXT, CSSM_KEY_PTR, CSSM_DATA_PTR, CSSM_PRIVILEGE, ) callconv(.C) CSSM_RETURN,
    DeriveKey: ?*const fn(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, ?*CSSM_CONTEXT, CSSM_DATA_PTR, uint32, uint32, ?*Asn1Item, ?*CSSM_RESOURCE_CONTROL_CONTEXT, CSSM_KEY_PTR, ) callconv(.C) CSSM_RETURN,
    FreeKey: ?*const fn(CSSM_CSP_HANDLE, ?*CSSM_ACCESS_CREDENTIALS, CSSM_KEY_PTR, CSSM_BOOL, ) callconv(.C) CSSM_RETURN,
    PassThrough: ?*const fn(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, ?*CSSM_CONTEXT, uint32, ?*anyopaque, ?*?*anyopaque, ) callconv(.C) CSSM_RETURN,
    Login: ?*const fn(CSSM_CSP_HANDLE, ?*CSSM_ACCESS_CREDENTIALS, ?*Asn1Item, ?*anyopaque, ) callconv(.C) CSSM_RETURN,
    Logout: ?*const fn(CSSM_CSP_HANDLE) callconv(.C) CSSM_RETURN,
    ChangeLoginAcl: ?*const fn(CSSM_CSP_HANDLE, ?*CSSM_ACCESS_CREDENTIALS, ?*CSSM_ACL_EDIT) callconv(.C) CSSM_RETURN,
    ObtainPrivateKeyFromPublicKey: ?*const fn(CSSM_CSP_HANDLE, ?*CSSM_KEY, CSSM_KEY_PTR) callconv(.C) CSSM_RETURN,
    RetrieveUniqueId: ?*const fn(CSSM_CSP_HANDLE, CSSM_DATA_PTR) callconv(.C) CSSM_RETURN,
    RetrieveCounter: ?*const fn(CSSM_CSP_HANDLE, CSSM_DATA_PTR) callconv(.C) CSSM_RETURN,
    VerifyDevice: ?*const fn(CSSM_CSP_HANDLE, ?*Asn1Item) callconv(.C) CSSM_RETURN,
    GetTimeValue: ?*const fn(CSSM_CSP_HANDLE, CSSM_ALGORITHMS, ?*Asn1Item) callconv(.C) CSSM_RETURN,
    GetOperationalStatistics: ?*const fn(CSSM_CSP_HANDLE, ?*CSSM_CSP_OPERATIONAL_STATISTICS) callconv(.C) CSSM_RETURN,
    GetLoginAcl: ?*const fn(CSSM_CSP_HANDLE, ?*CSSM_STRING, ?*uint32, ?*CSSM_ACL_ENTRY_INFO_PTR, ) callconv(.C) CSSM_RETURN,
    GetKeyAcl: ?*const fn(CSSM_CSP_HANDLE, ?*CSSM_KEY, ?*CSSM_STRING, ?*uint32, ?*CSSM_ACL_ENTRY_INFO_PTR, ) callconv(.C) CSSM_RETURN,
    ChangeKeyAcl: ?*const fn(CSSM_CSP_HANDLE, ?*CSSM_ACCESS_CREDENTIALS, ?*CSSM_ACL_EDIT, ?*CSSM_KEY, ) callconv(.C) CSSM_RETURN,
    GetKeyOwner: ?*const fn(CSSM_CSP_HANDLE, ?*CSSM_KEY, CSSM_ACL_OWNER_PROTOTYPE_PTR) callconv(.C) CSSM_RETURN,
    ChangeKeyOwner: ?*const fn(CSSM_CSP_HANDLE, ?*CSSM_ACCESS_CREDENTIALS, ?*CSSM_KEY, ?*CSSM_ACL_OWNER_PROTOTYPE, ) callconv(.C) CSSM_RETURN,
    GetLoginOwner: ?*const fn(CSSM_CSP_HANDLE, CSSM_ACL_OWNER_PROTOTYPE_PTR) callconv(.C) CSSM_RETURN,
    ChangeLoginOwner: ?*const fn(CSSM_CSP_HANDLE, ?*CSSM_ACCESS_CREDENTIALS, ?*CSSM_ACL_OWNER_PROTOTYPE) callconv(.C) CSSM_RETURN,
};

pub const CSSM_SPI_CSP_FUNCS_PTR = ?*cssm_spi_csp_funcs;

pub const cssm_spi_dl_funcs = extern struct {
    DbOpen: ?*const fn(CSSM_DL_HANDLE, ?*i8, ?*CSSM_NET_ADDRESS, CSSM_DB_ACCESS_TYPE, ?*CSSM_ACCESS_CREDENTIALS, ?*anyopaque, ?*CSSM_DB_HANDLE, ) callconv(.C) CSSM_RETURN,
    DbClose: ?*const fn(CSSM_DL_DB_HANDLE) callconv(.C) CSSM_RETURN,
    DbCreate: ?*const fn(CSSM_DL_HANDLE, ?*i8, ?*CSSM_NET_ADDRESS, ?*CSSM_DBINFO, CSSM_DB_ACCESS_TYPE, ?*CSSM_RESOURCE_CONTROL_CONTEXT, ?*anyopaque, ?*CSSM_DB_HANDLE, ) callconv(.C) CSSM_RETURN,
    DbDelete: ?*const fn(CSSM_DL_HANDLE, ?*i8, ?*CSSM_NET_ADDRESS, ?*CSSM_ACCESS_CREDENTIALS, ) callconv(.C) CSSM_RETURN,
    CreateRelation: ?*const fn(CSSM_DL_DB_HANDLE, CSSM_DB_RECORDTYPE, ?*i8, uint32, ?*CSSM_DB_SCHEMA_ATTRIBUTE_INFO, uint32, ?*CSSM_DB_SCHEMA_INDEX_INFO, ) callconv(.C) CSSM_RETURN,
    DestroyRelation: ?*const fn(CSSM_DL_DB_HANDLE, CSSM_DB_RECORDTYPE) callconv(.C) CSSM_RETURN,
    Authenticate: ?*const fn(CSSM_DL_DB_HANDLE, CSSM_DB_ACCESS_TYPE, ?*CSSM_ACCESS_CREDENTIALS) callconv(.C) CSSM_RETURN,
    GetDbAcl: ?*const fn(CSSM_DL_DB_HANDLE, ?*CSSM_STRING, ?*uint32, ?*CSSM_ACL_ENTRY_INFO_PTR, ) callconv(.C) CSSM_RETURN,
    ChangeDbAcl: ?*const fn(CSSM_DL_DB_HANDLE, ?*CSSM_ACCESS_CREDENTIALS, ?*CSSM_ACL_EDIT) callconv(.C) CSSM_RETURN,
    GetDbOwner: ?*const fn(CSSM_DL_DB_HANDLE, CSSM_ACL_OWNER_PROTOTYPE_PTR) callconv(.C) CSSM_RETURN,
    ChangeDbOwner: ?*const fn(CSSM_DL_DB_HANDLE, ?*CSSM_ACCESS_CREDENTIALS, ?*CSSM_ACL_OWNER_PROTOTYPE) callconv(.C) CSSM_RETURN,
    GetDbNames: ?*const fn(CSSM_DL_HANDLE, ?*CSSM_NAME_LIST_PTR) callconv(.C) CSSM_RETURN,
    GetDbNameFromHandle: ?*const fn(CSSM_DL_DB_HANDLE, ?*?*i8) callconv(.C) CSSM_RETURN,
    FreeNameList: ?*const fn(CSSM_DL_HANDLE, CSSM_NAME_LIST_PTR) callconv(.C) CSSM_RETURN,
    DataInsert: ?*const fn(CSSM_DL_DB_HANDLE, CSSM_DB_RECORDTYPE, ?*CSSM_DB_RECORD_ATTRIBUTE_DATA, ?*Asn1Item, ?*CSSM_DB_UNIQUE_RECORD_PTR, ) callconv(.C) CSSM_RETURN,
    DataDelete: ?*const fn(CSSM_DL_DB_HANDLE, ?*CSSM_DB_UNIQUE_RECORD) callconv(.C) CSSM_RETURN,
    DataModify: ?*const fn(CSSM_DL_DB_HANDLE, CSSM_DB_RECORDTYPE, CSSM_DB_UNIQUE_RECORD_PTR, ?*CSSM_DB_RECORD_ATTRIBUTE_DATA, ?*Asn1Item, CSSM_DB_MODIFY_MODE, ) callconv(.C) CSSM_RETURN,
    DataGetFirst: ?*const fn(CSSM_DL_DB_HANDLE, ?*CSSM_QUERY, CSSM_HANDLE_PTR, CSSM_DB_RECORD_ATTRIBUTE_DATA_PTR, CSSM_DATA_PTR, ?*CSSM_DB_UNIQUE_RECORD_PTR, ) callconv(.C) CSSM_RETURN,
    DataGetNext: ?*const fn(CSSM_DL_DB_HANDLE, CSSM_HANDLE, CSSM_DB_RECORD_ATTRIBUTE_DATA_PTR, CSSM_DATA_PTR, ?*CSSM_DB_UNIQUE_RECORD_PTR, ) callconv(.C) CSSM_RETURN,
    DataAbortQuery: ?*const fn(CSSM_DL_DB_HANDLE, CSSM_HANDLE) callconv(.C) CSSM_RETURN,
    DataGetFromUniqueRecordId: ?*const fn(CSSM_DL_DB_HANDLE, ?*CSSM_DB_UNIQUE_RECORD, CSSM_DB_RECORD_ATTRIBUTE_DATA_PTR, CSSM_DATA_PTR, ) callconv(.C) CSSM_RETURN,
    FreeUniqueRecord: ?*const fn(CSSM_DL_DB_HANDLE, CSSM_DB_UNIQUE_RECORD_PTR) callconv(.C) CSSM_RETURN,
    PassThrough: ?*const fn(CSSM_DL_DB_HANDLE, uint32, ?*anyopaque, ?*?*anyopaque, ) callconv(.C) CSSM_RETURN,
};

pub const CSSM_SPI_DL_FUNCS_PTR = ?*cssm_spi_dl_funcs;

pub const CSSM_KRSP_HANDLE = uint32;

pub const cssm_kr_name = extern struct {
    Type: uint8,
    Length: uint8,
    Name: ?*i8,
};

pub const CSSM_KR_PROFILE_PTR = ?*cssm_kr_profile;

pub const cssm_kr_wrappedproductinfo = extern struct {
    StandardVersion: CSSM_VERSION,
    StandardDescription: CSSM_STRING,
    ProductVersion: CSSM_VERSION,
    ProductDescription: CSSM_STRING,
    ProductVendor: CSSM_STRING,
    ProductFlags: uint32,
};

pub const CSSM_KR_WRAPPEDPRODUCT_INFO_PTR = ?*cssm_kr_wrappedproductinfo;

pub const cssm_krsubservice = extern struct {
    SubServiceId: uint32,
    Description: ?*i8,
    WrappedProduct: CSSM_KR_WRAPPEDPRODUCT_INFO,
};

pub const CSSM_KRSUBSERVICE_PTR = ?*cssm_krsubservice;

pub const CSSM_KR_POLICY_TYPE = uint32;

pub const CSSM_KR_POLICY_FLAGS = uint32;

pub const cssm_kr_policy_list_item = extern struct {
    next: ?*kr_policy_list_item,
    AlgorithmId: CSSM_ALGORITHMS,
    Mode: CSSM_ENCRYPT_MODE,
    MaxKeyLength: uint32,
    MaxRounds: uint32,
    WorkFactor: uint8,
    PolicyFlags: CSSM_KR_POLICY_FLAGS,
    AlgClass: CSSM_CONTEXT_TYPE,
};

pub const kr_policy_list_item = extern struct {};

pub const CSSM_KR_POLICY_LIST_ITEM_PTR = ?*cssm_kr_policy_list_item;

pub const cssm_kr_policy_info = extern struct {
    krbNotAllowed: CSSM_BOOL,
    numberOfEntries: uint32,
    policyEntry: ?*CSSM_KR_POLICY_LIST_ITEM,
};

pub const CSSM_KR_POLICY_INFO_PTR = ?*cssm_kr_policy_info;

pub const cssm_spi_kr_funcs = extern struct {
    RegistrationRequest: ?*const fn(CSSM_KRSP_HANDLE, CSSM_CC_HANDLE, ?*CSSM_CONTEXT, ?*Asn1Item, ?*CSSM_ACCESS_CREDENTIALS, CSSM_KR_POLICY_FLAGS, ?*sint32, CSSM_HANDLE_PTR, ) callconv(.C) CSSM_RETURN,
    RegistrationRetrieve: ?*const fn(CSSM_KRSP_HANDLE, CSSM_HANDLE, ?*sint32, CSSM_KR_PROFILE_PTR, ) callconv(.C) CSSM_RETURN,
    GenerateRecoveryFields: ?*const fn(CSSM_KRSP_HANDLE, CSSM_CC_HANDLE, ?*CSSM_CONTEXT, CSSM_CC_HANDLE, ?*CSSM_CONTEXT, ?*Asn1Item, CSSM_KR_POLICY_FLAGS, CSSM_DATA_PTR, ) callconv(.C) CSSM_RETURN,
    ProcessRecoveryFields: ?*const fn(CSSM_KRSP_HANDLE, CSSM_CC_HANDLE, ?*CSSM_CONTEXT, CSSM_CC_HANDLE, ?*CSSM_CONTEXT, ?*Asn1Item, CSSM_KR_POLICY_FLAGS, ?*Asn1Item, ) callconv(.C) CSSM_RETURN,
    RecoveryRequest: ?*const fn(CSSM_KRSP_HANDLE, CSSM_CC_HANDLE, ?*CSSM_CONTEXT, ?*Asn1Item, ?*CSSM_ACCESS_CREDENTIALS, ?*sint32, CSSM_HANDLE_PTR, ) callconv(.C) CSSM_RETURN,
    RecoveryRetrieve: ?*const fn(CSSM_KRSP_HANDLE, CSSM_HANDLE, ?*sint32, CSSM_HANDLE_PTR, ?*uint32, ) callconv(.C) CSSM_RETURN,
    GetRecoveredObject: ?*const fn(CSSM_KRSP_HANDLE, CSSM_HANDLE, uint32, CSSM_CSP_HANDLE, ?*CSSM_RESOURCE_CONTROL_CONTEXT, uint32, CSSM_KEY_PTR, CSSM_DATA_PTR, ) callconv(.C) CSSM_RETURN,
    RecoveryRequestAbort: ?*const fn(CSSM_KRSP_HANDLE, CSSM_HANDLE) callconv(.C) CSSM_RETURN,
    PassThrough: ?*const fn(CSSM_KRSP_HANDLE, CSSM_CC_HANDLE, ?*CSSM_CONTEXT, CSSM_CC_HANDLE, ?*CSSM_CONTEXT, uint32, ?*anyopaque, ?*?*anyopaque, ) callconv(.C) CSSM_RETURN,
};

pub const CSSM_SPI_KR_FUNCS_PTR = ?*cssm_spi_kr_funcs;

pub const cssm_spi_tp_funcs = extern struct {
    SubmitCredRequest: ?*const fn(CSSM_TP_HANDLE, ?*CSSM_TP_AUTHORITY_ID, CSSM_TP_AUTHORITY_REQUEST_TYPE, ?*CSSM_TP_REQUEST_SET, ?*CSSM_TP_CALLERAUTH_CONTEXT, ?*sint32, CSSM_DATA_PTR, ) callconv(.C) CSSM_RETURN,
    RetrieveCredResult: ?*const fn(CSSM_TP_HANDLE, ?*Asn1Item, ?*CSSM_TP_CALLERAUTH_CONTEXT, ?*sint32, ?*CSSM_BOOL, ?*CSSM_TP_RESULT_SET_PTR, ) callconv(.C) CSSM_RETURN,
    ConfirmCredResult: ?*const fn(CSSM_TP_HANDLE, ?*Asn1Item, ?*CSSM_TP_CALLERAUTH_CONTEXT, ?*CSSM_TP_CONFIRM_RESPONSE, ?*CSSM_TP_AUTHORITY_ID, ) callconv(.C) CSSM_RETURN,
    ReceiveConfirmation: ?*const fn(CSSM_TP_HANDLE, ?*Asn1Item, ?*CSSM_TP_CONFIRM_RESPONSE_PTR, ?*sint32, ) callconv(.C) CSSM_RETURN,
    CertReclaimKey: ?*const fn(CSSM_TP_HANDLE, ?*CSSM_CERTGROUP, uint32, CSSM_LONG_HANDLE, CSSM_CSP_HANDLE, ?*CSSM_RESOURCE_CONTROL_CONTEXT, ) callconv(.C) CSSM_RETURN,
    CertReclaimAbort: ?*const fn(CSSM_TP_HANDLE, CSSM_LONG_HANDLE) callconv(.C) CSSM_RETURN,
    FormRequest: ?*const fn(CSSM_TP_HANDLE, ?*CSSM_TP_AUTHORITY_ID, CSSM_TP_FORM_TYPE, CSSM_DATA_PTR, ) callconv(.C) CSSM_RETURN,
    FormSubmit: ?*const fn(CSSM_TP_HANDLE, CSSM_TP_FORM_TYPE, ?*Asn1Item, ?*CSSM_TP_AUTHORITY_ID, ?*CSSM_TP_AUTHORITY_ID, CSSM_ACCESS_CREDENTIALS_PTR, ) callconv(.C) CSSM_RETURN,
    CertGroupVerify: ?*const fn(CSSM_TP_HANDLE, CSSM_CL_HANDLE, CSSM_CSP_HANDLE, ?*CSSM_CERTGROUP, ?*CSSM_TP_VERIFY_CONTEXT, CSSM_TP_VERIFY_CONTEXT_RESULT_PTR, ) callconv(.C) CSSM_RETURN,
    CertCreateTemplate: ?*const fn(CSSM_TP_HANDLE, CSSM_CL_HANDLE, uint32, ?*CSSM_FIELD, CSSM_DATA_PTR, ) callconv(.C) CSSM_RETURN,
    CertGetAllTemplateFields: ?*const fn(CSSM_TP_HANDLE, CSSM_CL_HANDLE, ?*Asn1Item, ?*uint32, ?*CSSM_FIELD_PTR, ) callconv(.C) CSSM_RETURN,
    CertSign: ?*const fn(CSSM_TP_HANDLE, CSSM_CL_HANDLE, CSSM_CC_HANDLE, ?*Asn1Item, ?*CSSM_CERTGROUP, ?*CSSM_TP_VERIFY_CONTEXT, CSSM_TP_VERIFY_CONTEXT_RESULT_PTR, CSSM_DATA_PTR, ) callconv(.C) CSSM_RETURN,
    CrlVerify: ?*const fn(CSSM_TP_HANDLE, CSSM_CL_HANDLE, CSSM_CSP_HANDLE, ?*CSSM_ENCODED_CRL, ?*CSSM_CERTGROUP, ?*CSSM_TP_VERIFY_CONTEXT, CSSM_TP_VERIFY_CONTEXT_RESULT_PTR, ) callconv(.C) CSSM_RETURN,
    CrlCreateTemplate: ?*const fn(CSSM_TP_HANDLE, CSSM_CL_HANDLE, uint32, ?*CSSM_FIELD, CSSM_DATA_PTR, ) callconv(.C) CSSM_RETURN,
    CertRevoke: ?*const fn(CSSM_TP_HANDLE, CSSM_CL_HANDLE, CSSM_CSP_HANDLE, ?*Asn1Item, ?*CSSM_CERTGROUP, ?*CSSM_CERTGROUP, ?*CSSM_TP_VERIFY_CONTEXT, CSSM_TP_VERIFY_CONTEXT_RESULT_PTR, CSSM_TP_CERTCHANGE_REASON, CSSM_DATA_PTR, ) callconv(.C) CSSM_RETURN,
    CertRemoveFromCrlTemplate: ?*const fn(CSSM_TP_HANDLE, CSSM_CL_HANDLE, CSSM_CSP_HANDLE, ?*Asn1Item, ?*CSSM_CERTGROUP, ?*CSSM_CERTGROUP, ?*CSSM_TP_VERIFY_CONTEXT, CSSM_TP_VERIFY_CONTEXT_RESULT_PTR, CSSM_DATA_PTR, ) callconv(.C) CSSM_RETURN,
    CrlSign: ?*const fn(CSSM_TP_HANDLE, CSSM_CL_HANDLE, CSSM_CC_HANDLE, ?*CSSM_ENCODED_CRL, ?*CSSM_CERTGROUP, ?*CSSM_TP_VERIFY_CONTEXT, CSSM_TP_VERIFY_CONTEXT_RESULT_PTR, CSSM_DATA_PTR, ) callconv(.C) CSSM_RETURN,
    ApplyCrlToDb: ?*const fn(CSSM_TP_HANDLE, CSSM_CL_HANDLE, CSSM_CSP_HANDLE, ?*CSSM_ENCODED_CRL, ?*CSSM_CERTGROUP, ?*CSSM_TP_VERIFY_CONTEXT, CSSM_TP_VERIFY_CONTEXT_RESULT_PTR, ) callconv(.C) CSSM_RETURN,
    CertGroupConstruct: ?*const fn(CSSM_TP_HANDLE, CSSM_CL_HANDLE, CSSM_CSP_HANDLE, ?*CSSM_DL_DB_LIST, ?*anyopaque, ?*CSSM_CERTGROUP, ?*CSSM_CERTGROUP_PTR, ) callconv(.C) CSSM_RETURN,
    CertGroupPrune: ?*const fn(CSSM_TP_HANDLE, CSSM_CL_HANDLE, ?*CSSM_DL_DB_LIST, ?*CSSM_CERTGROUP, ?*CSSM_CERTGROUP_PTR, ) callconv(.C) CSSM_RETURN,
    CertGroupToTupleGroup: ?*const fn(CSSM_TP_HANDLE, CSSM_CL_HANDLE, ?*CSSM_CERTGROUP, ?*CSSM_TUPLEGROUP_PTR, ) callconv(.C) CSSM_RETURN,
    TupleGroupToCertGroup: ?*const fn(CSSM_TP_HANDLE, CSSM_CL_HANDLE, ?*CSSM_TUPLEGROUP, ?*CSSM_CERTGROUP_PTR, ) callconv(.C) CSSM_RETURN,
    PassThrough: ?*const fn(CSSM_TP_HANDLE, CSSM_CL_HANDLE, CSSM_CC_HANDLE, ?*CSSM_DL_DB_LIST, uint32, ?*anyopaque, ?*?*anyopaque, ) callconv(.C) CSSM_RETURN,
};

pub const CSSM_SPI_TP_FUNCS_PTR = ?*cssm_spi_tp_funcs;

pub const cssm_state_funcs = extern struct {
    cssm_GetAttachFunctions: ?*const fn(CSSM_MODULE_HANDLE, CSSM_SERVICE_MASK, ?*?*anyopaque, CSSM_GUID_PTR, ?*CSSM_BOOL, ) callconv(.C) CSSM_RETURN,
    cssm_ReleaseAttachFunctions: ?*const fn(CSSM_MODULE_HANDLE) callconv(.C) CSSM_RETURN,
    cssm_GetAppMemoryFunctions: ?*const fn(CSSM_MODULE_HANDLE, CSSM_UPCALLS_PTR) callconv(.C) CSSM_RETURN,
    cssm_IsFuncCallValid: ?*const fn(CSSM_MODULE_HANDLE, CSSM_PROC_ADDR, CSSM_PROC_ADDR, CSSM_PRIVILEGE, ?*CSSM_PRIVILEGE, CSSM_BITMASK, ?*CSSM_BOOL, ) callconv(.C) CSSM_RETURN,
    cssm_DeregisterManagerServices: ?*const fn(?*CSSM_GUID) callconv(.C) CSSM_RETURN,
    cssm_DeliverModuleManagerEvent: ?*const fn(?*CSSM_MANAGER_EVENT_NOTIFICATION) callconv(.C) CSSM_RETURN,
};

pub const CSSM_STATE_FUNCS_PTR = ?*cssm_state_funcs;

pub const cssm_manager_registration_info = extern struct {
    Initialize: ?*const fn(uint32, uint32) callconv(.C) CSSM_RETURN,
    Terminate: ?*const fn() callconv(.C) CSSM_RETURN,
    RegisterDispatchTable: ?*const fn(CSSM_STATE_FUNCS_PTR) callconv(.C) CSSM_RETURN,
    DeregisterDispatchTable: ?*const fn() callconv(.C) CSSM_RETURN,
    EventNotifyManager: ?*const fn(?*CSSM_MANAGER_EVENT_NOTIFICATION) callconv(.C) CSSM_RETURN,
    RefreshFunctionTable: ?*const fn(CSSM_FUNC_NAME_ADDR_PTR, uint32) callconv(.C) CSSM_RETURN,
};

pub const CSSM_MANAGER_REGISTRATION_INFO_PTR = ?*cssm_manager_registration_info;

pub const MDS_HANDLE = CSSM_DL_HANDLE;

pub const MDS_DB_HANDLE = CSSM_DL_DB_HANDLE;

pub const mds_funcs = extern struct {
    DbOpen: ?*const fn(MDS_HANDLE, ?*i8, ?*CSSM_NET_ADDRESS, CSSM_DB_ACCESS_TYPE, ?*CSSM_ACCESS_CREDENTIALS, ?*anyopaque, ?*CSSM_DB_HANDLE, ) callconv(.C) CSSM_RETURN,
    DbClose: ?*const fn(MDS_DB_HANDLE) callconv(.C) CSSM_RETURN,
    GetDbNames: ?*const fn(MDS_HANDLE, ?*CSSM_NAME_LIST_PTR) callconv(.C) CSSM_RETURN,
    GetDbNameFromHandle: ?*const fn(MDS_DB_HANDLE, ?*?*i8) callconv(.C) CSSM_RETURN,
    FreeNameList: ?*const fn(MDS_HANDLE, CSSM_NAME_LIST_PTR) callconv(.C) CSSM_RETURN,
    DataInsert: ?*const fn(MDS_DB_HANDLE, CSSM_DB_RECORDTYPE, ?*CSSM_DB_RECORD_ATTRIBUTE_DATA, ?*Asn1Item, ?*CSSM_DB_UNIQUE_RECORD_PTR, ) callconv(.C) CSSM_RETURN,
    DataDelete: ?*const fn(MDS_DB_HANDLE, ?*CSSM_DB_UNIQUE_RECORD) callconv(.C) CSSM_RETURN,
    DataModify: ?*const fn(MDS_DB_HANDLE, CSSM_DB_RECORDTYPE, CSSM_DB_UNIQUE_RECORD_PTR, ?*CSSM_DB_RECORD_ATTRIBUTE_DATA, ?*Asn1Item, CSSM_DB_MODIFY_MODE, ) callconv(.C) CSSM_RETURN,
    DataGetFirst: ?*const fn(MDS_DB_HANDLE, ?*CSSM_QUERY, CSSM_HANDLE_PTR, CSSM_DB_RECORD_ATTRIBUTE_DATA_PTR, CSSM_DATA_PTR, ?*CSSM_DB_UNIQUE_RECORD_PTR, ) callconv(.C) CSSM_RETURN,
    DataGetNext: ?*const fn(MDS_DB_HANDLE, CSSM_HANDLE, CSSM_DB_RECORD_ATTRIBUTE_DATA_PTR, CSSM_DATA_PTR, ?*CSSM_DB_UNIQUE_RECORD_PTR, ) callconv(.C) CSSM_RETURN,
    DataAbortQuery: ?*const fn(MDS_DB_HANDLE, CSSM_HANDLE) callconv(.C) CSSM_RETURN,
    DataGetFromUniqueRecordId: ?*const fn(MDS_DB_HANDLE, ?*CSSM_DB_UNIQUE_RECORD, CSSM_DB_RECORD_ATTRIBUTE_DATA_PTR, CSSM_DATA_PTR, ) callconv(.C) CSSM_RETURN,
    FreeUniqueRecord: ?*const fn(MDS_DB_HANDLE, CSSM_DB_UNIQUE_RECORD_PTR) callconv(.C) CSSM_RETURN,
    CreateRelation: ?*const fn(MDS_DB_HANDLE, CSSM_DB_RECORDTYPE, ?*i8, uint32, ?*CSSM_DB_SCHEMA_ATTRIBUTE_INFO, uint32, ?*CSSM_DB_SCHEMA_INDEX_INFO, ) callconv(.C) CSSM_RETURN,
    DestroyRelation: ?*const fn(MDS_DB_HANDLE, CSSM_DB_RECORDTYPE) callconv(.C) CSSM_RETURN,
};

pub const MDS_FUNCS_PTR = ?*mds_funcs;

pub extern "Security" fn MDS_Initialize(pCallerGuid: ?*CSSM_GUID, pMemoryFunctions: ?*CSSM_MEMORY_FUNCS, pDlFunctions: MDS_FUNCS_PTR, hMds: ?*MDS_HANDLE, ) callconv(.C) CSSM_RETURN;

pub extern "Security" fn MDS_Terminate(MdsHandle: MDS_HANDLE) callconv(.C) CSSM_RETURN;

pub extern "Security" fn MDS_Install(MdsHandle: MDS_HANDLE) callconv(.C) CSSM_RETURN;

pub extern "Security" fn MDS_Uninstall(MdsHandle: MDS_HANDLE) callconv(.C) CSSM_RETURN;

pub const KeychainPromptSelector = enum(uint16) {
    kSecKeychainPromptRequirePassphase = 1,
    kSecKeychainPromptUnsigned = 16,
    kSecKeychainPromptUnsignedAct = 32,
    kSecKeychainPromptInvalid = 64,
    kSecKeychainPromptInvalidAct = 128,
};

pub extern "Security" fn ACLGetTypeID() callconv(.C) core_foundation.TypeID;

pub extern "Security" fn ACLCreateFromSimpleContents(access: AccessRef, applicationList: core_foundation.ArrayRef, description: core_foundation.StringRef, promptSelector: ?*CSSM_ACL_KEYCHAIN_PROMPT_SELECTOR, newAcl: ?*ACLRef, ) callconv(.C) objc.OSStatus;

pub extern "Security" fn ACLCreateWithSimpleContents(access: AccessRef, applicationList: core_foundation.ArrayRef, description: core_foundation.StringRef, promptSelector: KeychainPromptSelector, newAcl: ?*ACLRef, ) callconv(.C) objc.OSStatus;

pub extern "Security" fn ACLRemove(aclRef: ACLRef) callconv(.C) objc.OSStatus;

pub extern "Security" fn ACLCopySimpleContents(acl: ACLRef, applicationList: ?*core_foundation.ArrayRef, description: ?*core_foundation.StringRef, promptSelector: ?*CSSM_ACL_KEYCHAIN_PROMPT_SELECTOR, ) callconv(.C) objc.OSStatus;

pub extern "Security" fn ACLCopyContents(acl: ACLRef, applicationList: ?*core_foundation.ArrayRef, description: ?*core_foundation.StringRef, promptSelector: ?*KeychainPromptSelector, ) callconv(.C) objc.OSStatus;

pub extern "Security" fn ACLSetSimpleContents(acl: ACLRef, applicationList: core_foundation.ArrayRef, description: core_foundation.StringRef, promptSelector: ?*CSSM_ACL_KEYCHAIN_PROMPT_SELECTOR, ) callconv(.C) objc.OSStatus;

pub extern "Security" fn ACLSetContents(acl: ACLRef, applicationList: core_foundation.ArrayRef, description: core_foundation.StringRef, promptSelector: KeychainPromptSelector, ) callconv(.C) objc.OSStatus;

pub extern "Security" fn ACLGetAuthorizations(acl: ACLRef, tags: ?*CSSM_ACL_AUTHORIZATION_TAG, tagCount: ?*uint32) callconv(.C) objc.OSStatus;

pub extern "Security" fn ACLCopyAuthorizations(acl: ACLRef) callconv(.C) core_foundation.ArrayRef;

pub extern "Security" fn ACLSetAuthorizations(acl: ACLRef, tags: ?*CSSM_ACL_AUTHORIZATION_TAG, tagCount: uint32) callconv(.C) objc.OSStatus;

pub extern "Security" fn ACLUpdateAuthorizations(acl: ACLRef, authorizations: core_foundation.ArrayRef) callconv(.C) objc.OSStatus;

pub const OpaqueSecIdentitySearchRef = extern struct {};

pub const IdentitySearchRef = ?*OpaqueSecIdentitySearchRef;

pub extern "Security" fn IdentitySearchGetTypeID() callconv(.C) core_foundation.TypeID;

pub extern "Security" fn IdentitySearchCreate(keychainOrArray: core_foundation.TypeRef, keyUsage: CSSM_KEYUSE, searchRef: ?*IdentitySearchRef) callconv(.C) objc.OSStatus;

pub extern "Security" fn IdentitySearchCopyNext(searchRef: IdentitySearchRef, identity: ?*IdentityRef) callconv(.C) objc.OSStatus;

pub const ItemClass = enum(objc.FourCharCode) {
    kSecInternetPasswordItemClass = 1768842612,
    kSecGenericPasswordItemClass = 1734700656,
    kSecAppleSharePasswordItemClass = 1634953328,
    kSecCertificateItemClass = -2147479552,
    kSecPublicKeyItemClass = 15,
    kSecPrivateKeyItemClass = 16,
    kSecSymmetricKeyItemClass = 17,
};

pub const ItemAttr = enum(objc.FourCharCode) {
    kSecCreationDateItemAttr = 1667522932,
    kSecModDateItemAttr = 1835295092,
    kSecDescriptionItemAttr = 1684370275,
    kSecCommentItemAttr = 1768123764,
    kSecCreatorItemAttr = 1668445298,
    kSecTypeItemAttr = 1954115685,
    kSecScriptCodeItemAttr = 1935897200,
    kSecLabelItemAttr = 1818321516,
    kSecInvisibleItemAttr = 1768846953,
    kSecNegativeItemAttr = 1852139361,
    kSecCustomIconItemAttr = 1668641641,
    kSecAccountItemAttr = 1633903476,
    kSecServiceItemAttr = 1937138533,
    kSecGenericItemAttr = 1734700641,
    kSecSecurityDomainItemAttr = 1935961454,
    kSecServerItemAttr = 1936881266,
    kSecAuthenticationTypeItemAttr = 1635023216,
    kSecPortItemAttr = 1886351988,
    kSecPathItemAttr = 1885434984,
    kSecVolumeItemAttr = 1986817381,
    kSecAddressItemAttr = 1633969266,
    kSecSignatureItemAttr = 1936943463,
    kSecProtocolItemAttr = 1886675820,
    kSecCertificateType = 1668577648,
    kSecCertificateEncoding = 1667591779,
    kSecCrlType = 1668445296,
    kSecCrlEncoding = 1668443747,
    kSecAlias = 1634494835,
};

pub const AFPServerSignature = [16] objc.UInt8;

pub const PublicKeyHash = [20] objc.UInt8;

pub extern "Security" fn KeychainItemGetTypeID() callconv(.C) core_foundation.TypeID;

pub extern "Security" fn KeychainItemModifyAttributesAndData(itemRef: KeychainItemRef, attrList: ?*KeychainAttributeList, length: objc.UInt32, data: ?*anyopaque, ) callconv(.C) objc.OSStatus;

pub extern "Security" fn KeychainItemCreateFromContent(itemClass: ItemClass, attrList: ?*KeychainAttributeList, length: objc.UInt32, data: ?*anyopaque, keychainRef: KeychainRef, initialAccess: AccessRef, itemRef: ?*KeychainItemRef, ) callconv(.C) objc.OSStatus;

pub extern "Security" fn KeychainItemModifyContent(itemRef: KeychainItemRef, attrList: ?*KeychainAttributeList, length: objc.UInt32, data: ?*anyopaque, ) callconv(.C) objc.OSStatus;

pub extern "Security" fn KeychainItemCopyContent(itemRef: KeychainItemRef, itemClass: ?*ItemClass, attrList: ?*KeychainAttributeList, length: ?*objc.UInt32, outData: ?*?*anyopaque, ) callconv(.C) objc.OSStatus;

pub extern "Security" fn KeychainItemFreeContent(attrList: ?*KeychainAttributeList, data: ?*anyopaque) callconv(.C) objc.OSStatus;

pub extern "Security" fn KeychainItemCopyAttributesAndData(itemRef: KeychainItemRef, info: ?*KeychainAttributeInfo, itemClass: ?*ItemClass, attrList: ?*?*KeychainAttributeList, length: ?*objc.UInt32, outData: ?*?*anyopaque, ) callconv(.C) objc.OSStatus;

pub extern "Security" fn KeychainItemFreeAttributesAndData(attrList: ?*KeychainAttributeList, data: ?*anyopaque) callconv(.C) objc.OSStatus;

pub extern "Security" fn KeychainItemDelete(itemRef: KeychainItemRef) callconv(.C) objc.OSStatus;

pub extern "Security" fn KeychainItemCopyKeychain(itemRef: KeychainItemRef, keychainRef: ?*KeychainRef) callconv(.C) objc.OSStatus;

pub extern "Security" fn KeychainItemCreateCopy(itemRef: KeychainItemRef, destKeychainRef: KeychainRef, initialAccess: AccessRef, itemCopy: ?*KeychainItemRef, ) callconv(.C) objc.OSStatus;

pub extern "Security" fn KeychainItemCreatePersistentReference(itemRef: KeychainItemRef, persistentItemRef: ?*core_foundation.DataRef) callconv(.C) objc.OSStatus;

pub extern "Security" fn KeychainItemCopyFromPersistentReference(persistentItemRef: core_foundation.DataRef, itemRef: ?*KeychainItemRef) callconv(.C) objc.OSStatus;

pub extern "Security" fn KeychainItemGetDLDBHandle(keyItemRef: KeychainItemRef, dldbHandle: ?*CSSM_DL_DB_HANDLE) callconv(.C) objc.OSStatus;

pub extern "Security" fn KeychainItemGetUniqueRecordID(itemRef: KeychainItemRef, uniqueRecordID: ?*?*CSSM_DB_UNIQUE_RECORD) callconv(.C) objc.OSStatus;

pub extern "Security" fn KeychainItemCopyAccess(itemRef: KeychainItemRef, access: ?*AccessRef) callconv(.C) objc.OSStatus;

pub extern "Security" fn KeychainItemSetAccess(itemRef: KeychainItemRef, access: AccessRef) callconv(.C) objc.OSStatus;

pub extern "Security" fn KeychainSearchGetTypeID() callconv(.C) core_foundation.TypeID;

pub extern "Security" fn KeychainSearchCreateFromAttributes(keychainOrArray: core_foundation.TypeRef, itemClass: ItemClass, attrList: ?*KeychainAttributeList, searchRef: ?*KeychainSearchRef, ) callconv(.C) objc.OSStatus;

pub extern "Security" fn KeychainSearchCopyNext(searchRef: KeychainSearchRef, itemRef: ?*KeychainItemRef) callconv(.C) objc.OSStatus;

pub const OpaquePolicySearchRef = extern struct {};

pub const PolicySearchRef = ?*OpaquePolicySearchRef;

pub extern "Security" fn PolicySearchGetTypeID() callconv(.C) core_foundation.TypeID;

pub extern "Security" fn PolicySearchCreate(certType: CSSM_CERT_TYPE, policyOID: ?*Asn1Oid, value: ?*Asn1Item, searchRef: ?*PolicySearchRef, ) callconv(.C) objc.OSStatus;

pub extern "Security" fn PolicySearchCopyNext(searchRef: PolicySearchRef, policyRef: ?*PolicyRef) callconv(.C) objc.OSStatus;

pub extern "Security" fn TrustedApplicationGetTypeID() callconv(.C) core_foundation.TypeID;

pub extern "Security" fn TrustedApplicationCreateFromPath(path: ?*i8, app: ?*TrustedApplicationRef) callconv(.C) objc.OSStatus;

pub extern "Security" fn TrustedApplicationCopyData(appRef: TrustedApplicationRef, data: ?*core_foundation.DataRef) callconv(.C) objc.OSStatus;

pub extern "Security" fn TrustedApplicationSetData(appRef: TrustedApplicationRef, data: core_foundation.DataRef) callconv(.C) objc.OSStatus;

pub const TrustSettingsKeyUsage = enum(objc.uint32_t) {
    kSecTrustSettingsKeyUseSignature = 1,
    kSecTrustSettingsKeyUseEnDecryptData = 2,
    kSecTrustSettingsKeyUseEnDecryptKey = 4,
    kSecTrustSettingsKeyUseSignCert = 8,
    kSecTrustSettingsKeyUseSignRevocation = 16,
    kSecTrustSettingsKeyUseKeyExchange = 32,
    kSecTrustSettingsKeyUseAny = -1,
};

pub const TrustSettingsResult = enum(objc.uint32_t) {
    kSecTrustSettingsResultInvalid = 0,
    kSecTrustSettingsResultTrustRoot = 1,
    kSecTrustSettingsResultTrustAsRoot = 2,
    kSecTrustSettingsResultDeny = 3,
    kSecTrustSettingsResultUnspecified = 4,
};

pub const TrustSettingsDomain = enum(objc.uint32_t) {
    kSecTrustSettingsDomainUser = 0,
    kSecTrustSettingsDomainAdmin = 1,
    kSecTrustSettingsDomainSystem = 2,
};

pub extern "Security" fn TrustSettingsCopyTrustSettings(certRef: CertificateRef, domain: TrustSettingsDomain, trustSettings: ?*core_foundation.ArrayRef) callconv(.C) objc.OSStatus;

pub extern "Security" fn TrustSettingsSetTrustSettings(certRef: CertificateRef, domain: TrustSettingsDomain, trustSettingsDictOrArray: core_foundation.TypeRef) callconv(.C) objc.OSStatus;

pub extern "Security" fn TrustSettingsRemoveTrustSettings(certRef: CertificateRef, domain: TrustSettingsDomain) callconv(.C) objc.OSStatus;

pub extern "Security" fn TrustSettingsCopyCertificates(domain: TrustSettingsDomain, certArray: ?*core_foundation.ArrayRef) callconv(.C) objc.OSStatus;

pub extern "Security" fn TrustSettingsCopyModificationDate(certRef: CertificateRef, domain: TrustSettingsDomain, modificationDate: ?*core_foundation.DateRef) callconv(.C) objc.OSStatus;

pub extern "Security" fn TrustSettingsCreateExternalRepresentation(domain: TrustSettingsDomain, trustSettings: ?*core_foundation.DataRef) callconv(.C) objc.OSStatus;

pub extern "Security" fn TrustSettingsImportExternalRepresentation(domain: TrustSettingsDomain, trustSettings: core_foundation.DataRef) callconv(.C) objc.OSStatus;

pub const anon631 = enum(objc.OSStatus) {
    errSecCSUnimplemented = -67072,
    errSecCSInvalidObjectRef = -67071,
    errSecCSInvalidFlags = -67070,
    errSecCSObjectRequired = -67069,
    errSecCSStaticCodeNotFound = -67068,
    errSecCSUnsupportedGuestAttributes = -67067,
    errSecCSInvalidAttributeValues = -67066,
    errSecCSNoSuchCode = -67065,
    errSecCSMultipleGuests = -67064,
    errSecCSGuestInvalid = -67063,
    errSecCSUnsigned = -67062,
    errSecCSSignatureFailed = -67061,
    errSecCSSignatureNotVerifiable = -67060,
    errSecCSSignatureUnsupported = -67059,
    errSecCSBadDictionaryFormat = -67058,
    errSecCSResourcesNotSealed = -67057,
    errSecCSResourcesNotFound = -67056,
    errSecCSResourcesInvalid = -67055,
    errSecCSBadResource = -67054,
    errSecCSResourceRulesInvalid = -67053,
    errSecCSReqInvalid = -67052,
    errSecCSReqUnsupported = -67051,
    errSecCSReqFailed = -67050,
    errSecCSBadObjectFormat = -67049,
    errSecCSInternalError = -67048,
    errSecCSHostReject = -67047,
    errSecCSNotAHost = -67046,
    errSecCSSignatureInvalid = -67045,
    errSecCSHostProtocolRelativePath = -67044,
    errSecCSHostProtocolContradiction = -67043,
    errSecCSHostProtocolDedicationError = -67042,
    errSecCSHostProtocolNotProxy = -67041,
    errSecCSHostProtocolStateError = -67040,
    errSecCSHostProtocolUnrelated = -67039,
    errSecCSNotSupported = -67037,
    errSecCSCMSTooLarge = -67036,
    errSecCSHostProtocolInvalidHash = -67035,
    errSecCSStaticCodeChanged = -67034,
    errSecCSDBDenied = -67033,
    errSecCSDBAccess = -67032,
    errSecCSSigDBDenied = -67033,
    errSecCSSigDBAccess = -67032,
    errSecCSHostProtocolInvalidAttribute = -67031,
    errSecCSInfoPlistFailed = -67030,
    errSecCSNoMainExecutable = -67029,
    errSecCSBadBundleFormat = -67028,
    errSecCSNoMatches = -67027,
    errSecCSFileHardQuarantined = -67026,
    errSecCSOutdated = -67025,
    errSecCSDbCorrupt = -67024,
    errSecCSResourceDirectoryFailed = -67023,
    errSecCSUnsignedNestedCode = -67022,
    errSecCSBadNestedCode = -67021,
    errSecCSBadCallbackValue = -67020,
    errSecCSHelperFailed = -67019,
    errSecCSVetoed = -67018,
    errSecCSBadLVArch = -67017,
    errSecCSResourceNotSupported = -67016,
    errSecCSRegularFile = -67015,
    errSecCSUnsealedAppRoot = -67014,
    errSecCSWeakResourceRules = -67013,
    errSecCSDSStoreSymlink = -67012,
    errSecCSAmbiguousBundleFormat = -67011,
    errSecCSBadMainExecutable = -67010,
    errSecCSBadFrameworkVersion = -67009,
    errSecCSUnsealedFrameworkRoot = -67008,
    errSecCSWeakResourceEnvelope = -67007,
    errSecCSCancelled = -67006,
    errSecCSInvalidPlatform = -67005,
    errSecCSTooBig = -67004,
    errSecCSInvalidSymlink = -67003,
    errSecCSNotAppLike = -67002,
    errSecCSBadDiskImageFormat = -67001,
    errSecCSUnsupportedDigestAlgorithm = -67000,
    errSecCSInvalidAssociatedFileData = -66999,
    errSecCSInvalidTeamIdentifier = -66998,
    errSecCSBadTeamIdentifier = -66997,
    errSecCSSignatureUntrusted = -66996,
    errSecMultipleExecSegments = -66995,
    errSecCSInvalidEntitlements = -66994,
    errSecCSInvalidRuntimeVersion = -66993,
    errSecCSRevokedNotarization = -66992,
    errSecCSCMSConstructionFailed = -66991,
    errSecCSRemoteSignerFailed = -66990,
};

pub const __SecCode = extern struct {};

pub const CodeRef = ?*__SecCode;

pub const StaticCodeRef = ?*__SecCode;

pub const __SecRequirement = extern struct {};

pub const RequirementRef = ?*__SecRequirement;

pub const GuestRef = objc.u_int32_t;

pub const anon2051 = enum(GuestRef) {
    kSecNoGuest = 0,
};

pub const CSFlags = enum(objc.uint32_t) {
    kSecCSDefaultFlags = 0,
    kSecCSConsiderExpiration = -2147483648,
    kSecCSEnforceRevocationChecks = 1073741824,
    kSecCSNoNetworkAccess = 536870912,
    kSecCSReportProgress = 268435456,
    kSecCSCheckTrustedAnchors = 134217728,
    kSecCSQuickCheck = 67108864,
    kSecCSApplyEmbeddedPolicy = 33554432,
    kSecCSStripDisallowedXattrs = 16777216,
    kSecCSMatchGuestRequirementInKernel = 8388608,
};

pub const CodeSignatureFlags = enum(objc.uint32_t) {
    kSecCodeSignatureHost = 1,
    kSecCodeSignatureAdhoc = 2,
    kSecCodeSignatureForceHard = 256,
    kSecCodeSignatureForceKill = 512,
    kSecCodeSignatureForceExpiration = 1024,
    kSecCodeSignatureRestrict = 2048,
    kSecCodeSignatureEnforcement = 4096,
    kSecCodeSignatureLibraryValidation = 8192,
    kSecCodeSignatureRuntime = 65536,
    kSecCodeSignatureLinkerSigned = 131072,
};

pub const CodeStatus = enum(objc.uint32_t) {
    kSecCodeStatusValid = 1,
    kSecCodeStatusHard = 256,
    kSecCodeStatusKill = 512,
    kSecCodeStatusDebugged = 268435456,
    kSecCodeStatusPlatform = 67108864,
};

pub const RequirementType = enum(objc.uint32_t) {
    kSecHostRequirementType = 1,
    kSecGuestRequirementType = 2,
    kSecDesignatedRequirementType = 3,
    kSecLibraryRequirementType = 4,
    kSecPluginRequirementType = 5,
    kSecInvalidRequirementType = 6,
    kSecRequirementTypeCount = 6,
};

pub const CSDigestAlgorithm = enum(objc.uint32_t) {
    kSecCodeSignatureNoHash = 0,
    kSecCodeSignatureHashSHA1 = 1,
    kSecCodeSignatureHashSHA256 = 2,
    kSecCodeSignatureHashSHA256Truncated = 3,
    kSecCodeSignatureHashSHA384 = 4,
    kSecCodeSignatureHashSHA512 = 5,
};

pub extern "Security" fn StaticCodeGetTypeID() callconv(.C) core_foundation.TypeID;

pub extern "Security" fn StaticCodeCreateWithPath(path: core_foundation.URLRef, flags: CSFlags, staticCode: ?*StaticCodeRef) callconv(.C) objc.OSStatus;

pub extern "Security" fn StaticCodeCreateWithPathAndAttributes(path: core_foundation.URLRef, flags: CSFlags, attributes: core_foundation.DictionaryRef, staticCode: ?*StaticCodeRef, ) callconv(.C) objc.OSStatus;

pub const anon1751 = enum(objc.uint32_t) {
    kSecCSCheckAllArchitectures = 1,
    kSecCSDoNotValidateExecutable = 2,
    kSecCSDoNotValidateResources = 4,
    kSecCSBasicValidateOnly = 6,
    kSecCSCheckNestedCode = 8,
    kSecCSStrictValidate = 16,
    kSecCSFullReport = 32,
    kSecCSCheckGatekeeperArchitectures = 65,
    kSecCSRestrictSymlinks = 128,
    kSecCSRestrictToAppLike = 256,
    kSecCSRestrictSidebandData = 512,
    kSecCSUseSoftwareSigningCert = 1024,
    kSecCSValidatePEH = 2048,
    kSecCSSingleThreaded = 4096,
    kSecCSAllowNetworkAccess = 65536,
    kSecCSFastExecutableValidation = 131072,
};

pub extern "Security" fn StaticCodeCheckValidity(staticCode: StaticCodeRef, flags: CSFlags, requirement: RequirementRef) callconv(.C) objc.OSStatus;

pub extern "Security" fn StaticCodeCheckValidityWithErrors(staticCode: StaticCodeRef, flags: CSFlags, requirement: RequirementRef, errors: ?*core_foundation.ErrorRef, ) callconv(.C) objc.OSStatus;

pub extern "Security" fn CodeGetTypeID() callconv(.C) core_foundation.TypeID;

pub extern "Security" fn CodeCopySelf(flags: CSFlags, self: ?*CodeRef) callconv(.C) objc.OSStatus;

pub const anon991 = enum(objc.uint32_t) {
    kSecCSUseAllArchitectures = 1,
};

pub extern "Security" fn CodeCopyStaticCode(code: CodeRef, flags: CSFlags, staticCode: ?*StaticCodeRef) callconv(.C) objc.OSStatus;

pub extern "Security" fn CodeCopyHost(guest: CodeRef, flags: CSFlags, host: ?*CodeRef) callconv(.C) objc.OSStatus;

pub extern "Security" fn CodeCopyGuestWithAttributes(host: CodeRef, attributes: core_foundation.DictionaryRef, flags: CSFlags, guest: ?*CodeRef, ) callconv(.C) objc.OSStatus;

pub extern "Security" fn CodeCreateWithXPCMessage(message: objc.xpc_object_t, flags: CSFlags, target: ?*CodeRef) callconv(.C) objc.OSStatus;

pub extern "Security" fn CodeCheckValidity(code: CodeRef, flags: CSFlags, requirement: RequirementRef) callconv(.C) objc.OSStatus;

pub extern "Security" fn CodeCheckValidityWithErrors(code: CodeRef, flags: CSFlags, requirement: RequirementRef, errors: ?*core_foundation.ErrorRef, ) callconv(.C) objc.OSStatus;

pub extern "Security" fn CodeValidateFileResource(code: StaticCodeRef, relativePath: core_foundation.StringRef, fileData: core_foundation.DataRef, flags: CSFlags, ) callconv(.C) objc.OSStatus;

pub extern "Security" fn CodeCopyPath(staticCode: StaticCodeRef, flags: CSFlags, path: ?*core_foundation.URLRef) callconv(.C) objc.OSStatus;

pub extern "Security" fn CodeCopyDesignatedRequirement(code: StaticCodeRef, flags: CSFlags, requirement: ?*RequirementRef) callconv(.C) objc.OSStatus;

pub const anon4671 = enum(objc.uint32_t) {
    kSecCSInternalInformation = 1,
    kSecCSSigningInformation = 2,
    kSecCSRequirementInformation = 4,
    kSecCSDynamicInformation = 8,
    kSecCSContentInformation = 16,
    kSecCSSkipResourceDirectory = 32,
    kSecCSCalculateCMSDigest = 64,
};

pub extern "Security" fn CodeCopySigningInformation(code: StaticCodeRef, flags: CSFlags, information: ?*core_foundation.DictionaryRef) callconv(.C) objc.OSStatus;

pub extern "Security" fn CodeMapMemory(code: StaticCodeRef, flags: CSFlags) callconv(.C) objc.OSStatus;

pub const anon351 = enum(objc.uint32_t) {
    kSecCSDedicatedHost = 1,
    kSecCSGenerateGuestHash = 2,
};

pub extern "Security" fn HostCreateGuest(host: GuestRef, status: objc.uint32_t, path: core_foundation.URLRef, attributes: core_foundation.DictionaryRef, flags: CSFlags, newGuest: ?*GuestRef, ) callconv(.C) objc.OSStatus;

pub extern "Security" fn HostRemoveGuest(host: GuestRef, guest: GuestRef, flags: CSFlags) callconv(.C) objc.OSStatus;

pub extern "Security" fn HostSelectGuest(guestRef: GuestRef, flags: CSFlags) callconv(.C) objc.OSStatus;

pub extern "Security" fn HostSelectedGuest(flags: CSFlags, guestRef: ?*GuestRef) callconv(.C) objc.OSStatus;

pub extern "Security" fn HostSetGuestStatus(guestRef: GuestRef, status: objc.uint32_t, attributes: core_foundation.DictionaryRef, flags: CSFlags, ) callconv(.C) objc.OSStatus;

pub extern "Security" fn HostSetHostingPort(hostingPort: objc.mach_port_t, flags: CSFlags) callconv(.C) objc.OSStatus;

pub extern "Security" fn RequirementGetTypeID() callconv(.C) core_foundation.TypeID;

pub extern "Security" fn RequirementCreateWithData(data: core_foundation.DataRef, flags: CSFlags, requirement: ?*RequirementRef) callconv(.C) objc.OSStatus;

pub extern "Security" fn RequirementCreateWithString(text: core_foundation.StringRef, flags: CSFlags, requirement: ?*RequirementRef) callconv(.C) objc.OSStatus;

pub extern "Security" fn RequirementCreateWithStringAndErrors(text: core_foundation.StringRef, flags: CSFlags, errors: ?*core_foundation.ErrorRef, requirement: ?*RequirementRef, ) callconv(.C) objc.OSStatus;

pub extern "Security" fn RequirementCopyData(requirement: RequirementRef, flags: CSFlags, data: ?*core_foundation.DataRef) callconv(.C) objc.OSStatus;

pub extern "Security" fn RequirementCopyString(requirement: RequirementRef, flags: CSFlags, text: ?*core_foundation.StringRef) callconv(.C) objc.OSStatus;

pub const __SecTask = extern struct {};

pub const TaskRef = ?*__SecTask;

pub extern "Security" fn TaskGetTypeID() callconv(.C) core_foundation.TypeID;

pub extern "Security" fn TaskCreateWithAuditToken(allocator: core_foundation.AllocatorRef, token: objc.audit_token_t) callconv(.C) TaskRef;

pub extern "Security" fn TaskCreateFromSelf(allocator: core_foundation.AllocatorRef) callconv(.C) TaskRef;

pub extern "Security" fn TaskCopyValueForEntitlement(task: TaskRef, entitlement: core_foundation.StringRef, @"error": ?*core_foundation.ErrorRef) callconv(.C) core_foundation.TypeRef;

pub extern "Security" fn TaskCopyValuesForEntitlements(task: TaskRef, entitlements: core_foundation.ArrayRef, @"error": ?*core_foundation.ErrorRef) callconv(.C) core_foundation.DictionaryRef;

pub extern "Security" fn TaskCopySigningIdentifier(task: TaskRef, @"error": ?*core_foundation.ErrorRef) callconv(.C) core_foundation.StringRef;

pub extern "Security" fn TaskGetCodeSignStatus(task: TaskRef) callconv(.C) objc.uint32_t;

pub extern "Security" fn AuthorizationRightGet(rightName: ?*i8, rightDefinition: ?*core_foundation.DictionaryRef) callconv(.C) objc.OSStatus;

pub extern "Security" fn AuthorizationRightSet(authRef: AuthorizationRef, rightName: ?*i8, rightDefinition: core_foundation.TypeRef, descriptionKey: core_foundation.StringRef, bundle: core_foundation.BundleRef, localeTableName: core_foundation.StringRef, ) callconv(.C) objc.OSStatus;

pub extern "Security" fn AuthorizationRightRemove(authRef: AuthorizationRef, rightName: ?*i8) callconv(.C) objc.OSStatus;

pub const _CMSDecoder = extern struct {};

pub const CMSDecoderRef = ?*_CMSDecoder;

pub extern "Security" fn CMSDecoderGetTypeID() callconv(.C) core_foundation.TypeID;

pub const CMSSignerStatus = enum(objc.uint32_t) {
    kCMSSignerUnsigned = 0,
    kCMSSignerValid = 1,
    kCMSSignerNeedsDetachedContent = 2,
    kCMSSignerInvalidSignature = 3,
    kCMSSignerInvalidCert = 4,
    kCMSSignerInvalidIndex = 5,
};

pub extern "Security" fn CMSDecoderCreate(cmsDecoderOut: ?*CMSDecoderRef) callconv(.C) objc.OSStatus;

pub extern "Security" fn CMSDecoderUpdateMessage(cmsDecoder: CMSDecoderRef, msgBytes: ?*anyopaque, msgBytesLen: objc.size_t) callconv(.C) objc.OSStatus;

pub extern "Security" fn CMSDecoderFinalizeMessage(cmsDecoder: CMSDecoderRef) callconv(.C) objc.OSStatus;

pub extern "Security" fn CMSDecoderSetDetachedContent(cmsDecoder: CMSDecoderRef, detachedContent: core_foundation.DataRef) callconv(.C) objc.OSStatus;

pub extern "Security" fn CMSDecoderCopyDetachedContent(cmsDecoder: CMSDecoderRef, detachedContentOut: ?*core_foundation.DataRef) callconv(.C) objc.OSStatus;

pub extern "Security" fn CMSDecoderSetSearchKeychain(cmsDecoder: CMSDecoderRef, keychainOrArray: core_foundation.TypeRef) callconv(.C) objc.OSStatus;

pub extern "Security" fn CMSDecoderGetNumSigners(cmsDecoder: CMSDecoderRef, numSignersOut: ?*objc.size_t) callconv(.C) objc.OSStatus;

pub extern "Security" fn CMSDecoderCopySignerStatus(cmsDecoder: CMSDecoderRef, signerIndex: objc.size_t, policyOrArray: core_foundation.TypeRef, evaluateSecTrust: objc.Boolean, signerStatusOut: ?*CMSSignerStatus, secTrustOut: ?*TrustRef, certVerifyResultCodeOut: ?*objc.OSStatus, ) callconv(.C) objc.OSStatus;

pub extern "Security" fn CMSDecoderCopySignerEmailAddress(cmsDecoder: CMSDecoderRef, signerIndex: objc.size_t, signerEmailAddressOut: ?*core_foundation.StringRef) callconv(.C) objc.OSStatus;

pub extern "Security" fn CMSDecoderCopySignerCert(cmsDecoder: CMSDecoderRef, signerIndex: objc.size_t, signerCertOut: ?*CertificateRef) callconv(.C) objc.OSStatus;

pub extern "Security" fn CMSDecoderIsContentEncrypted(cmsDecoder: CMSDecoderRef, isEncryptedOut: ?*objc.Boolean) callconv(.C) objc.OSStatus;

pub extern "Security" fn CMSDecoderCopyEncapsulatedContentType(cmsDecoder: CMSDecoderRef, eContentTypeOut: ?*core_foundation.DataRef) callconv(.C) objc.OSStatus;

pub extern "Security" fn CMSDecoderCopyAllCerts(cmsDecoder: CMSDecoderRef, certsOut: ?*core_foundation.ArrayRef) callconv(.C) objc.OSStatus;

pub extern "Security" fn CMSDecoderCopyContent(cmsDecoder: CMSDecoderRef, contentOut: ?*core_foundation.DataRef) callconv(.C) objc.OSStatus;

pub extern "Security" fn CMSDecoderCopySignerSigningTime(cmsDecoder: CMSDecoderRef, signerIndex: objc.size_t, signingTime: ?*core_foundation.AbsoluteTime) callconv(.C) objc.OSStatus;

pub extern "Security" fn CMSDecoderCopySignerTimestamp(cmsDecoder: CMSDecoderRef, signerIndex: objc.size_t, timestamp: ?*core_foundation.AbsoluteTime) callconv(.C) objc.OSStatus;

pub extern "Security" fn CMSDecoderCopySignerTimestampWithPolicy(cmsDecoder: CMSDecoderRef, timeStampPolicy: core_foundation.TypeRef, signerIndex: objc.size_t, timestamp: ?*core_foundation.AbsoluteTime, ) callconv(.C) objc.OSStatus;

pub extern "Security" fn CMSDecoderCopySignerTimestampCertificates(cmsDecoder: CMSDecoderRef, signerIndex: objc.size_t, certificateRefs: ?*core_foundation.ArrayRef) callconv(.C) objc.OSStatus;

pub const _CMSEncoder = extern struct {};

pub const CMSEncoderRef = ?*_CMSEncoder;

pub extern "Security" fn CMSEncoderGetTypeID() callconv(.C) core_foundation.TypeID;

pub extern "Security" fn CMSEncoderCreate(cmsEncoderOut: ?*CMSEncoderRef) callconv(.C) objc.OSStatus;

pub extern "Security" fn CMSEncoderSetSignerAlgorithm(cmsEncoder: CMSEncoderRef, digestAlgorithm: core_foundation.StringRef) callconv(.C) objc.OSStatus;

pub extern "Security" fn CMSEncoderAddSigners(cmsEncoder: CMSEncoderRef, signerOrArray: core_foundation.TypeRef) callconv(.C) objc.OSStatus;

pub extern "Security" fn CMSEncoderCopySigners(cmsEncoder: CMSEncoderRef, signersOut: ?*core_foundation.ArrayRef) callconv(.C) objc.OSStatus;

pub extern "Security" fn CMSEncoderAddRecipients(cmsEncoder: CMSEncoderRef, recipientOrArray: core_foundation.TypeRef) callconv(.C) objc.OSStatus;

pub extern "Security" fn CMSEncoderCopyRecipients(cmsEncoder: CMSEncoderRef, recipientsOut: ?*core_foundation.ArrayRef) callconv(.C) objc.OSStatus;

pub extern "Security" fn CMSEncoderSetHasDetachedContent(cmsEncoder: CMSEncoderRef, detachedContent: objc.Boolean) callconv(.C) objc.OSStatus;

pub extern "Security" fn CMSEncoderGetHasDetachedContent(cmsEncoder: CMSEncoderRef, detachedContentOut: ?*objc.Boolean) callconv(.C) objc.OSStatus;

pub extern "Security" fn CMSEncoderSetEncapsulatedContentType(cmsEncoder: CMSEncoderRef, eContentType: ?*Asn1Oid) callconv(.C) objc.OSStatus;

pub extern "Security" fn CMSEncoderSetEncapsulatedContentTypeOID(cmsEncoder: CMSEncoderRef, eContentTypeOID: core_foundation.TypeRef) callconv(.C) objc.OSStatus;

pub extern "Security" fn CMSEncoderCopyEncapsulatedContentType(cmsEncoder: CMSEncoderRef, eContentTypeOut: ?*core_foundation.DataRef) callconv(.C) objc.OSStatus;

pub extern "Security" fn CMSEncoderAddSupportingCerts(cmsEncoder: CMSEncoderRef, certOrArray: core_foundation.TypeRef) callconv(.C) objc.OSStatus;

pub extern "Security" fn CMSEncoderCopySupportingCerts(cmsEncoder: CMSEncoderRef, certsOut: ?*core_foundation.ArrayRef) callconv(.C) objc.OSStatus;

pub const CMSSignedAttributes = enum(objc.uint32_t) {
    kCMSAttrNone = 0,
    kCMSAttrSmimeCapabilities = 1,
    kCMSAttrSmimeEncryptionKeyPrefs = 2,
    kCMSAttrSmimeMSEncryptionKeyPrefs = 4,
    kCMSAttrSigningTime = 8,
    kCMSAttrAppleCodesigningHashAgility = 16,
    kCMSAttrAppleCodesigningHashAgilityV2 = 32,
    kCMSAttrAppleExpirationTime = 64,
};

pub extern "Security" fn CMSEncoderAddSignedAttributes(cmsEncoder: CMSEncoderRef, signedAttributes: CMSSignedAttributes) callconv(.C) objc.OSStatus;

pub const CMSCertificateChainMode = enum(objc.uint32_t) {
    kCMSCertificateNone = 0,
    kCMSCertificateSignerOnly = 1,
    kCMSCertificateChain = 2,
    kCMSCertificateChainWithRoot = 3,
    kCMSCertificateChainWithRootOrFail = 4,
};

pub extern "Security" fn CMSEncoderSetCertificateChainMode(cmsEncoder: CMSEncoderRef, chainMode: CMSCertificateChainMode) callconv(.C) objc.OSStatus;

pub extern "Security" fn CMSEncoderGetCertificateChainMode(cmsEncoder: CMSEncoderRef, chainModeOut: ?*CMSCertificateChainMode) callconv(.C) objc.OSStatus;

pub extern "Security" fn CMSEncoderUpdateContent(cmsEncoder: CMSEncoderRef, content: ?*anyopaque, contentLen: objc.size_t) callconv(.C) objc.OSStatus;

pub extern "Security" fn CMSEncoderCopyEncodedContent(cmsEncoder: CMSEncoderRef, encodedContentOut: ?*core_foundation.DataRef) callconv(.C) objc.OSStatus;

pub extern "Security" fn CMSEncode(signers: core_foundation.TypeRef, recipients: core_foundation.TypeRef, eContentType: ?*Asn1Oid, detachedContent: objc.Boolean, signedAttributes: CMSSignedAttributes, content: ?*anyopaque, contentLen: objc.size_t, encodedContentOut: ?*core_foundation.DataRef, ) callconv(.C) objc.OSStatus;

pub extern "Security" fn CMSEncodeContent(signers: core_foundation.TypeRef, recipients: core_foundation.TypeRef, eContentTypeOID: core_foundation.TypeRef, detachedContent: objc.Boolean, signedAttributes: CMSSignedAttributes, content: ?*anyopaque, contentLen: objc.size_t, encodedContentOut: ?*core_foundation.DataRef, ) callconv(.C) objc.OSStatus;

pub extern "Security" fn CMSEncoderCopySignerTimestamp(cmsEncoder: CMSEncoderRef, signerIndex: objc.size_t, timestamp: ?*core_foundation.AbsoluteTime) callconv(.C) objc.OSStatus;

pub extern "Security" fn CMSEncoderCopySignerTimestampWithPolicy(cmsEncoder: CMSEncoderRef, timeStampPolicy: core_foundation.TypeRef, signerIndex: objc.size_t, timestamp: ?*core_foundation.AbsoluteTime, ) callconv(.C) objc.OSStatus;

pub const SSLContext = extern struct {};

pub const SSLContextRef = ?*SSLContext;

pub const SSLConnectionRef = ?*anyopaque;

pub const SSLSessionOption = enum(i32) {
    kSSLSessionOptionBreakOnServerAuth = 0,
    kSSLSessionOptionBreakOnCertRequested = 1,
    kSSLSessionOptionBreakOnClientAuth = 2,
    kSSLSessionOptionFalseStart = 3,
    kSSLSessionOptionSendOneByteRecord = 4,
    kSSLSessionOptionAllowServerIdentityChange = 5,
    kSSLSessionOptionFallback = 6,
    kSSLSessionOptionBreakOnClientHello = 7,
    kSSLSessionOptionAllowRenegotiation = 8,
    kSSLSessionOptionEnableSessionTickets = 9,
};

pub const SSLSessionState = enum(i32) {
    kSSLIdle = 0,
    kSSLHandshake = 1,
    kSSLConnected = 2,
    kSSLClosed = 3,
    kSSLAborted = 4,
};

pub const SSLClientCertificateState = enum(i32) {
    kSSLClientCertNone = 0,
    kSSLClientCertRequested = 1,
    kSSLClientCertSent = 2,
    kSSLClientCertRejected = 3,
};

pub const SSLReadFunc = ?*const fn(SSLConnectionRef, ?*anyopaque, ?*objc.size_t) callconv(.C) objc.OSStatus;

pub const SSLWriteFunc = ?*const fn(SSLConnectionRef, ?*anyopaque, ?*objc.size_t) callconv(.C) objc.OSStatus;

pub const SSLProtocolSide = enum(i32) {
    kSSLServerSide = 0,
    kSSLClientSide = 1,
};

pub const SSLConnectionType = enum(i32) {
    kSSLStreamType = 0,
    kSSLDatagramType = 1,
};

pub extern "Security" fn SSLContextGetTypeID() callconv(.C) core_foundation.TypeID;

pub extern "Security" fn SSLCreateContext(alloc: core_foundation.AllocatorRef, protocolSide: SSLProtocolSide, connectionType: SSLConnectionType) callconv(.C) SSLContextRef;

pub extern "Security" fn SSLNewContext(isServer: objc.Boolean, contextPtr: ?*SSLContextRef) callconv(.C) objc.OSStatus;

pub extern "Security" fn SSLDisposeContext(context: SSLContextRef) callconv(.C) objc.OSStatus;

pub extern "Security" fn SSLGetSessionState(context: SSLContextRef, state: ?*SSLSessionState) callconv(.C) objc.OSStatus;

pub extern "Security" fn SSLSetSessionOption(context: SSLContextRef, option: SSLSessionOption, value: objc.Boolean) callconv(.C) objc.OSStatus;

pub extern "Security" fn SSLGetSessionOption(context: SSLContextRef, option: SSLSessionOption, value: ?*objc.Boolean) callconv(.C) objc.OSStatus;

pub extern "Security" fn SSLSetIOFuncs(context: SSLContextRef, readFunc: SSLReadFunc, writeFunc: SSLWriteFunc) callconv(.C) objc.OSStatus;

pub extern "Security" fn SSLSetSessionConfig(context: SSLContextRef, config: core_foundation.StringRef) callconv(.C) objc.OSStatus;

pub extern "Security" fn SSLSetProtocolVersionMin(context: SSLContextRef, minVersion: SSLProtocol) callconv(.C) objc.OSStatus;

pub extern "Security" fn SSLGetProtocolVersionMin(context: SSLContextRef, minVersion: ?*SSLProtocol) callconv(.C) objc.OSStatus;

pub extern "Security" fn SSLSetProtocolVersionMax(context: SSLContextRef, maxVersion: SSLProtocol) callconv(.C) objc.OSStatus;

pub extern "Security" fn SSLGetProtocolVersionMax(context: SSLContextRef, maxVersion: ?*SSLProtocol) callconv(.C) objc.OSStatus;

pub extern "Security" fn SSLSetProtocolVersionEnabled(context: SSLContextRef, protocol: SSLProtocol, enable: objc.Boolean) callconv(.C) objc.OSStatus;

pub extern "Security" fn SSLGetProtocolVersionEnabled(context: SSLContextRef, protocol: SSLProtocol, enable: ?*objc.Boolean) callconv(.C) objc.OSStatus;

pub extern "Security" fn SSLSetProtocolVersion(context: SSLContextRef, version: SSLProtocol) callconv(.C) objc.OSStatus;

pub extern "Security" fn SSLGetProtocolVersion(context: SSLContextRef, protocol: ?*SSLProtocol) callconv(.C) objc.OSStatus;

pub extern "Security" fn SSLSetCertificate(context: SSLContextRef, certRefs: core_foundation.ArrayRef) callconv(.C) objc.OSStatus;

pub extern "Security" fn SSLSetConnection(context: SSLContextRef, connection: SSLConnectionRef) callconv(.C) objc.OSStatus;

pub extern "Security" fn SSLGetConnection(context: SSLContextRef, connection: ?*SSLConnectionRef) callconv(.C) objc.OSStatus;

pub extern "Security" fn SSLSetPeerDomainName(context: SSLContextRef, peerName: ?*i8, peerNameLen: objc.size_t) callconv(.C) objc.OSStatus;

pub extern "Security" fn SSLGetPeerDomainNameLength(context: SSLContextRef, peerNameLen: ?*objc.size_t) callconv(.C) objc.OSStatus;

pub extern "Security" fn SSLGetPeerDomainName(context: SSLContextRef, peerName: ?*i8, peerNameLen: ?*objc.size_t) callconv(.C) objc.OSStatus;

pub extern "Security" fn SSLCopyRequestedPeerNameLength(ctx: SSLContextRef, peerNameLen: ?*objc.size_t) callconv(.C) objc.OSStatus;

pub extern "Security" fn SSLCopyRequestedPeerName(context: SSLContextRef, peerName: ?*i8, peerNameLen: ?*objc.size_t) callconv(.C) objc.OSStatus;

pub extern "Security" fn SSLSetDatagramHelloCookie(dtlsContext: SSLContextRef, cookie: ?*anyopaque, cookieLen: objc.size_t) callconv(.C) objc.OSStatus;

pub extern "Security" fn SSLSetMaxDatagramRecordSize(dtlsContext: SSLContextRef, maxSize: objc.size_t) callconv(.C) objc.OSStatus;

pub extern "Security" fn SSLGetMaxDatagramRecordSize(dtlsContext: SSLContextRef, maxSize: ?*objc.size_t) callconv(.C) objc.OSStatus;

pub extern "Security" fn SSLGetNegotiatedProtocolVersion(context: SSLContextRef, protocol: ?*SSLProtocol) callconv(.C) objc.OSStatus;

pub extern "Security" fn SSLGetNumberSupportedCiphers(context: SSLContextRef, numCiphers: ?*objc.size_t) callconv(.C) objc.OSStatus;

pub extern "Security" fn SSLGetSupportedCiphers(context: SSLContextRef, ciphers: ?*SSLCipherSuite, numCiphers: ?*objc.size_t) callconv(.C) objc.OSStatus;

pub extern "Security" fn SSLGetNumberEnabledCiphers(context: SSLContextRef, numCiphers: ?*objc.size_t) callconv(.C) objc.OSStatus;

pub extern "Security" fn SSLSetEnabledCiphers(context: SSLContextRef, ciphers: ?*SSLCipherSuite, numCiphers: objc.size_t) callconv(.C) objc.OSStatus;

pub extern "Security" fn SSLGetEnabledCiphers(context: SSLContextRef, ciphers: ?*SSLCipherSuite, numCiphers: ?*objc.size_t) callconv(.C) objc.OSStatus;

pub extern "Security" fn SSLSetSessionTicketsEnabled(context: SSLContextRef, enabled: objc.Boolean) callconv(.C) objc.OSStatus;

pub extern "Security" fn SSLSetEnableCertVerify(context: SSLContextRef, enableVerify: objc.Boolean) callconv(.C) objc.OSStatus;

pub extern "Security" fn SSLGetEnableCertVerify(context: SSLContextRef, enableVerify: ?*objc.Boolean) callconv(.C) objc.OSStatus;

pub extern "Security" fn SSLSetAllowsExpiredCerts(context: SSLContextRef, allowsExpired: objc.Boolean) callconv(.C) objc.OSStatus;

pub extern "Security" fn SSLGetAllowsExpiredCerts(context: SSLContextRef, allowsExpired: ?*objc.Boolean) callconv(.C) objc.OSStatus;

pub extern "Security" fn SSLSetAllowsExpiredRoots(context: SSLContextRef, allowsExpired: objc.Boolean) callconv(.C) objc.OSStatus;

pub extern "Security" fn SSLGetAllowsExpiredRoots(context: SSLContextRef, allowsExpired: ?*objc.Boolean) callconv(.C) objc.OSStatus;

pub extern "Security" fn SSLSetAllowsAnyRoot(context: SSLContextRef, anyRoot: objc.Boolean) callconv(.C) objc.OSStatus;

pub extern "Security" fn SSLGetAllowsAnyRoot(context: SSLContextRef, anyRoot: ?*objc.Boolean) callconv(.C) objc.OSStatus;

pub extern "Security" fn SSLSetTrustedRoots(context: SSLContextRef, trustedRoots: core_foundation.ArrayRef, replaceExisting: objc.Boolean) callconv(.C) objc.OSStatus;

pub extern "Security" fn SSLCopyTrustedRoots(context: SSLContextRef, trustedRoots: ?*core_foundation.ArrayRef) callconv(.C) objc.OSStatus;

pub extern "Security" fn SSLCopyPeerCertificates(context: SSLContextRef, certs: ?*core_foundation.ArrayRef) callconv(.C) objc.OSStatus;

pub extern "Security" fn SSLCopyPeerTrust(context: SSLContextRef, trust: ?*TrustRef) callconv(.C) objc.OSStatus;

pub extern "Security" fn SSLSetPeerID(context: SSLContextRef, peerID: ?*anyopaque, peerIDLen: objc.size_t) callconv(.C) objc.OSStatus;

pub extern "Security" fn SSLGetPeerID(context: SSLContextRef, peerID: ?*?*anyopaque, peerIDLen: ?*objc.size_t) callconv(.C) objc.OSStatus;

pub extern "Security" fn SSLGetNegotiatedCipher(context: SSLContextRef, cipherSuite: ?*SSLCipherSuite) callconv(.C) objc.OSStatus;

pub extern "Security" fn SSLSetALPNProtocols(context: SSLContextRef, protocols: core_foundation.ArrayRef) callconv(.C) objc.OSStatus;

pub extern "Security" fn SSLCopyALPNProtocols(context: SSLContextRef, protocols: ?*core_foundation.ArrayRef) callconv(.C) objc.OSStatus;

pub extern "Security" fn SSLSetOCSPResponse(context: SSLContextRef, response: core_foundation.DataRef) callconv(.C) objc.OSStatus;

pub extern "Security" fn SSLSetEncryptionCertificate(context: SSLContextRef, certRefs: core_foundation.ArrayRef) callconv(.C) objc.OSStatus;

pub const SSLAuthenticate = enum(i32) {
    kNeverAuthenticate = 0,
    kAlwaysAuthenticate = 1,
    kTryAuthenticate = 2,
};

pub extern "Security" fn SSLSetClientSideAuthenticate(context: SSLContextRef, auth: SSLAuthenticate) callconv(.C) objc.OSStatus;

pub extern "Security" fn SSLAddDistinguishedName(context: SSLContextRef, derDN: ?*anyopaque, derDNLen: objc.size_t) callconv(.C) objc.OSStatus;

pub extern "Security" fn SSLSetCertificateAuthorities(context: SSLContextRef, certificateOrArray: core_foundation.TypeRef, replaceExisting: objc.Boolean) callconv(.C) objc.OSStatus;

pub extern "Security" fn SSLCopyCertificateAuthorities(context: SSLContextRef, certificates: ?*core_foundation.ArrayRef) callconv(.C) objc.OSStatus;

pub extern "Security" fn SSLCopyDistinguishedNames(context: SSLContextRef, names: ?*core_foundation.ArrayRef) callconv(.C) objc.OSStatus;

pub extern "Security" fn SSLGetClientCertificateState(context: SSLContextRef, clientState: ?*SSLClientCertificateState) callconv(.C) objc.OSStatus;

pub extern "Security" fn SSLSetDiffieHellmanParams(context: SSLContextRef, dhParams: ?*anyopaque, dhParamsLen: objc.size_t) callconv(.C) objc.OSStatus;

pub extern "Security" fn SSLGetDiffieHellmanParams(context: SSLContextRef, dhParams: ?*?*anyopaque, dhParamsLen: ?*objc.size_t) callconv(.C) objc.OSStatus;

pub extern "Security" fn SSLSetRsaBlinding(context: SSLContextRef, blinding: objc.Boolean) callconv(.C) objc.OSStatus;

pub extern "Security" fn SSLGetRsaBlinding(context: SSLContextRef, blinding: ?*objc.Boolean) callconv(.C) objc.OSStatus;

pub extern "Security" fn SSLHandshake(context: SSLContextRef) callconv(.C) objc.OSStatus;

pub extern "Security" fn SSLReHandshake(context: SSLContextRef) callconv(.C) objc.OSStatus;

pub extern "Security" fn SSLWrite(context: SSLContextRef, data: ?*anyopaque, dataLength: objc.size_t, processed: ?*objc.size_t, ) callconv(.C) objc.OSStatus;

pub extern "Security" fn SSLRead(context: SSLContextRef, data: ?*anyopaque, dataLength: objc.size_t, processed: ?*objc.size_t, ) callconv(.C) objc.OSStatus;

pub extern "Security" fn SSLGetBufferedReadSize(context: SSLContextRef, bufferSize: ?*objc.size_t) callconv(.C) objc.OSStatus;

pub extern "Security" fn SSLGetDatagramWriteSize(dtlsContext: SSLContextRef, bufSize: ?*objc.size_t) callconv(.C) objc.OSStatus;

pub extern "Security" fn SSLClose(context: SSLContextRef) callconv(.C) objc.OSStatus;

pub extern "Security" fn SSLSetError(context: SSLContextRef, status: objc.OSStatus) callconv(.C) objc.OSStatus;

pub const anon1791 = enum(core_foundation.Index) {
    kSecTransformErrorAttributeNotFound = 1,
    kSecTransformErrorInvalidOperation = 2,
    kSecTransformErrorNotInitializedCorrectly = 3,
    kSecTransformErrorMoreThanOneOutput = 4,
    kSecTransformErrorInvalidInputDictionary = 5,
    kSecTransformErrorInvalidAlgorithm = 6,
    kSecTransformErrorInvalidLength = 7,
    kSecTransformErrorInvalidType = 8,
    kSecTransformErrorInvalidInput = 10,
    kSecTransformErrorNameAlreadyRegistered = 11,
    kSecTransformErrorUnsupportedAttribute = 12,
    kSecTransformOperationNotSupportedOnGroup = 13,
    kSecTransformErrorMissingParameter = 14,
    kSecTransformErrorInvalidConnection = 15,
    kSecTransformTransformIsExecuting = 16,
    kSecTransformInvalidOverride = 17,
    kSecTransformTransformIsNotRegistered = 18,
    kSecTransformErrorAbortInProgress = 19,
    kSecTransformErrorAborted = 20,
    kSecTransformInvalidArgument = 21,
};

pub const TransformRef = core_foundation.TypeRef;

pub const GroupTransformRef = core_foundation.TypeRef;

pub extern "Security" fn TransformGetTypeID() callconv(.C) core_foundation.TypeID;

pub extern "Security" fn GroupTransformGetTypeID() callconv(.C) core_foundation.TypeID;

pub extern "Security" fn TransformCreateFromExternalRepresentation(dictionary: core_foundation.DictionaryRef, @"error": ?*core_foundation.ErrorRef) callconv(.C) TransformRef;

pub extern "Security" fn TransformCopyExternalRepresentation(transformRef: TransformRef) callconv(.C) core_foundation.DictionaryRef;

pub extern "Security" fn TransformCreateGroupTransform() callconv(.C) GroupTransformRef;

pub extern "Security" fn TransformConnectTransforms(sourceTransformRef: TransformRef, sourceAttributeName: core_foundation.StringRef, destinationTransformRef: TransformRef, destinationAttributeName: core_foundation.StringRef, group: GroupTransformRef, @"error": ?*core_foundation.ErrorRef, ) callconv(.C) GroupTransformRef;

pub extern "Security" fn TransformSetAttribute(transformRef: TransformRef, key: core_foundation.StringRef, value: core_foundation.TypeRef, @"error": ?*core_foundation.ErrorRef, ) callconv(.C) objc.Boolean;

pub extern "Security" fn TransformGetAttribute(transformRef: TransformRef, key: core_foundation.StringRef) callconv(.C) core_foundation.TypeRef;

pub extern "Security" fn TransformFindByName(transform: GroupTransformRef, name: core_foundation.StringRef) callconv(.C) TransformRef;

pub extern "Security" fn TransformExecute(transformRef: TransformRef, errorRef: ?*core_foundation.ErrorRef) callconv(.C) core_foundation.TypeRef;

pub const MessageBlock = *const fn(core_foundation.TypeRef, core_foundation.ErrorRef, objc.Boolean) callconv(.C) void;

pub extern "Security" fn TransformExecuteAsync(transformRef: TransformRef, deliveryQueue: objc.dispatch_queue_t, deliveryBlock: MessageBlock) callconv(.C) void;

pub const TransformMetaAttributeType = enum(core_foundation.Index) {
    kSecTransformMetaAttributeValue = 0,
    kSecTransformMetaAttributeName = 1,
    kSecTransformMetaAttributeRef = 2,
    kSecTransformMetaAttributeRequired = 3,
    kSecTransformMetaAttributeRequiresOutboundConnection = 4,
    kSecTransformMetaAttributeDeferred = 5,
    kSecTransformMetaAttributeStream = 6,
    kSecTransformMetaAttributeCanCycle = 7,
    kSecTransformMetaAttributeExternalize = 8,
    kSecTransformMetaAttributeHasOutboundConnections = 9,
    kSecTransformMetaAttributeHasInboundConnection = 10,
};

pub const TransformAttributeRef = core_foundation.TypeRef;

pub const TransformStringOrAttributeRef = core_foundation.TypeRef;

pub const TransformActionBlock = *const fn() callconv(.C) core_foundation.TypeRef;

pub const TransformAttributeActionBlock = *const fn(TransformAttributeRef, core_foundation.TypeRef) callconv(.C) core_foundation.TypeRef;

pub const TransformDataBlock = *const fn(core_foundation.TypeRef) callconv(.C) core_foundation.TypeRef;

pub const TransformInstanceBlock = *const fn() callconv(.C) core_foundation.ErrorRef;

pub const OpaqueSecTransformImplementation = extern struct {};

pub const TransformImplementationRef = ?*OpaqueSecTransformImplementation;

pub extern "Security" fn TransformSetAttributeAction(ref: TransformImplementationRef, action: core_foundation.StringRef, attribute: TransformStringOrAttributeRef, newAction: TransformAttributeActionBlock, ) callconv(.C) core_foundation.ErrorRef;

pub extern "Security" fn TransformSetDataAction(ref: TransformImplementationRef, action: core_foundation.StringRef, newAction: TransformDataBlock) callconv(.C) core_foundation.ErrorRef;

pub extern "Security" fn TransformSetTransformAction(ref: TransformImplementationRef, action: core_foundation.StringRef, newAction: TransformActionBlock) callconv(.C) core_foundation.ErrorRef;

pub extern "Security" fn TranformCustomGetAttribute(ref: TransformImplementationRef, attribute: TransformStringOrAttributeRef, @"type": TransformMetaAttributeType) callconv(.C) core_foundation.TypeRef;

pub extern "Security" fn TransformCustomGetAttribute(ref: TransformImplementationRef, attribute: TransformStringOrAttributeRef, @"type": TransformMetaAttributeType) callconv(.C) core_foundation.TypeRef;

pub extern "Security" fn TransformCustomSetAttribute(ref: TransformImplementationRef, attribute: TransformStringOrAttributeRef, @"type": TransformMetaAttributeType, value: core_foundation.TypeRef, ) callconv(.C) core_foundation.TypeRef;

pub extern "Security" fn TransformPushbackAttribute(ref: TransformImplementationRef, attribute: TransformStringOrAttributeRef, value: core_foundation.TypeRef) callconv(.C) core_foundation.TypeRef;

pub const TransformCreateFP = ?*const fn(core_foundation.StringRef, TransformRef, TransformImplementationRef) callconv(.C) TransformInstanceBlock;

pub extern "Security" fn TransformRegister(uniqueName: core_foundation.StringRef, createTransformFunction: TransformCreateFP, @"error": ?*core_foundation.ErrorRef) callconv(.C) objc.Boolean;

pub extern "Security" fn TransformCreate(name: core_foundation.StringRef, @"error": ?*core_foundation.ErrorRef) callconv(.C) TransformRef;

pub extern "Security" fn TransformNoData() callconv(.C) core_foundation.TypeRef;

pub extern "Security" fn EncodeTransformCreate(encodeType: core_foundation.TypeRef, @"error": ?*core_foundation.ErrorRef) callconv(.C) TransformRef;

pub extern "Security" fn DecodeTransformCreate(DecodeType: core_foundation.TypeRef, @"error": ?*core_foundation.ErrorRef) callconv(.C) TransformRef;

pub extern "Security" fn DigestTransformCreate(digestType: core_foundation.TypeRef, digestLength: core_foundation.Index, @"error": ?*core_foundation.ErrorRef) callconv(.C) TransformRef;

pub extern "Security" fn DigestTransformGetTypeID() callconv(.C) core_foundation.TypeID;

pub extern "Security" fn EncryptTransformCreate(keyRef: KeyRef, @"error": ?*core_foundation.ErrorRef) callconv(.C) TransformRef;

pub extern "Security" fn DecryptTransformCreate(keyRef: KeyRef, @"error": ?*core_foundation.ErrorRef) callconv(.C) TransformRef;

pub extern "Security" fn DecryptTransformGetTypeID() callconv(.C) core_foundation.TypeID;

pub extern "Security" fn EncryptTransformGetTypeID() callconv(.C) core_foundation.TypeID;

pub extern "Security" fn SignTransformCreate(key: KeyRef, @"error": ?*core_foundation.ErrorRef) callconv(.C) TransformRef;

pub extern "Security" fn VerifyTransformCreate(key: KeyRef, signature: core_foundation.DataRef, @"error": ?*core_foundation.ErrorRef) callconv(.C) TransformRef;

pub extern "Security" fn TransformCreateReadTransformWithReadStream(inputStream: core_foundation.ReadStreamRef) callconv(.C) TransformRef;

