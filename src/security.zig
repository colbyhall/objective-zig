// THIS FILE IS AUTOGENERATED. MODIFICATIONS WILL NOT BE MAINTAINED.

const std = @import("std");
const objc = @import("objc.zig"); // Objective-C Runtime in zig.
const core_foundation = @import("core_foundation.zig"); // Framework dependency CoreFoundation.
const foundation = @import("foundation.zig"); // Framework dependency Foundation.

pub const __SecCertificate = extern struct {};

pub const CertificateRef = __SecCertificate;

pub const OpaqueSecCertificateRef = __SecCertificate;

pub const __SecIdentity = extern struct {};

pub const IdentityRef = __SecIdentity;

pub const OpaqueSecIdentityRef = __SecIdentity;

pub const __SecKey = extern struct {};

pub const KeyRef = __SecKey;

pub const OpaqueSecKeyRef = __SecKey;

pub const __SecPolicy = extern struct {};

pub const PolicyRef = __SecPolicy;

pub const __SecAccessControl = extern struct {};

pub const AccessControlRef = __SecAccessControl;

pub const __SecKeychain = extern struct {};

pub const KeychainRef = __SecKeychain;

pub const __SecKeychainItem = extern struct {};

pub const KeychainItemRef = __SecKeychainItem;

pub const __SecKeychainSearch = extern struct {};

pub const KeychainSearchRef = __SecKeychainSearch;

pub const KeychainAttrType = objc.OSType;

pub const KeychainAttribute = extern struct {
    tag: KeychainAttrType,
    length: objc.UInt32,
    data: ?*anyopaque,
};

pub const KeychainAttributePtr = KeychainAttribute;

pub const KeychainAttributeList = extern struct {
    count: objc.UInt32,
    attr: KeychainAttribute,
};

pub const KeychainStatus = objc.UInt32;

pub const __SecTrustedApplication = extern struct {};

pub const TrustedApplicationRef = __SecTrustedApplication;

pub const __SecAccess = extern struct {};

pub const AccessRef = __SecAccess;

pub const OpaqueSecAccessRef = __SecAccess;

pub const __SecACL = extern struct {};

pub const ACLRef = __SecACL;

pub const __SecPassword = extern struct {};

pub const PasswordRef = __SecPassword;

pub const KeychainAttributeInfo = extern struct {
    count: objc.UInt32,
    tag: objc.UInt32,
    format: objc.UInt32,
};

extern "Security" fn SecCopyErrorMessageString(status: objc.OSStatus, reserved: ?*anyopaque) callconv(.C) core_foundation.StringRef;
pub const copyErrorMessageString = SecCopyErrorMessageString;

pub const anon3181 = objc.OSStatus;
pub const anon3181_errSecSuccess: objc.OSStatus = 0;
pub const anon3181_errSecUnimplemented: objc.OSStatus = -4;
pub const anon3181_errSecDiskFull: objc.OSStatus = -34;
pub const anon3181_errSecDskFull: objc.OSStatus = -34;
pub const anon3181_errSecIO: objc.OSStatus = -36;
pub const anon3181_errSecOpWr: objc.OSStatus = -49;
pub const anon3181_errSecParam: objc.OSStatus = -50;
pub const anon3181_errSecWrPerm: objc.OSStatus = -61;
pub const anon3181_errSecAllocate: objc.OSStatus = -108;
pub const anon3181_errSecUserCanceled: objc.OSStatus = -128;
pub const anon3181_errSecBadReq: objc.OSStatus = -909;
pub const anon3181_errSecInternalComponent: objc.OSStatus = -2070;
pub const anon3181_errSecCoreFoundationUnknown: objc.OSStatus = -4960;
pub const anon3181_errSecMissingEntitlement: objc.OSStatus = -34018;
pub const anon3181_errSecRestrictedAPI: objc.OSStatus = -34020;
pub const anon3181_errSecNotAvailable: objc.OSStatus = -25291;
pub const anon3181_errSecReadOnly: objc.OSStatus = -25292;
pub const anon3181_errSecAuthFailed: objc.OSStatus = -25293;
pub const anon3181_errSecNoSuchKeychain: objc.OSStatus = -25294;
pub const anon3181_errSecInvalidKeychain: objc.OSStatus = -25295;
pub const anon3181_errSecDuplicateKeychain: objc.OSStatus = -25296;
pub const anon3181_errSecDuplicateCallback: objc.OSStatus = -25297;
pub const anon3181_errSecInvalidCallback: objc.OSStatus = -25298;
pub const anon3181_errSecDuplicateItem: objc.OSStatus = -25299;
pub const anon3181_errSecItemNotFound: objc.OSStatus = -25300;
pub const anon3181_errSecBufferTooSmall: objc.OSStatus = -25301;
pub const anon3181_errSecDataTooLarge: objc.OSStatus = -25302;
pub const anon3181_errSecNoSuchAttr: objc.OSStatus = -25303;
pub const anon3181_errSecInvalidItemRef: objc.OSStatus = -25304;
pub const anon3181_errSecInvalidSearchRef: objc.OSStatus = -25305;
pub const anon3181_errSecNoSuchClass: objc.OSStatus = -25306;
pub const anon3181_errSecNoDefaultKeychain: objc.OSStatus = -25307;
pub const anon3181_errSecInteractionNotAllowed: objc.OSStatus = -25308;
pub const anon3181_errSecReadOnlyAttr: objc.OSStatus = -25309;
pub const anon3181_errSecWrongSecVersion: objc.OSStatus = -25310;
pub const anon3181_errSecKeySizeNotAllowed: objc.OSStatus = -25311;
pub const anon3181_errSecNoStorageModule: objc.OSStatus = -25312;
pub const anon3181_errSecNoCertificateModule: objc.OSStatus = -25313;
pub const anon3181_errSecNoPolicyModule: objc.OSStatus = -25314;
pub const anon3181_errSecInteractionRequired: objc.OSStatus = -25315;
pub const anon3181_errSecDataNotAvailable: objc.OSStatus = -25316;
pub const anon3181_errSecDataNotModifiable: objc.OSStatus = -25317;
pub const anon3181_errSecCreateChainFailed: objc.OSStatus = -25318;
pub const anon3181_errSecInvalidPrefsDomain: objc.OSStatus = -25319;
pub const anon3181_errSecInDarkWake: objc.OSStatus = -25320;
pub const anon3181_errSecACLNotSimple: objc.OSStatus = -25240;
pub const anon3181_errSecPolicyNotFound: objc.OSStatus = -25241;
pub const anon3181_errSecInvalidTrustSetting: objc.OSStatus = -25242;
pub const anon3181_errSecNoAccessForItem: objc.OSStatus = -25243;
pub const anon3181_errSecInvalidOwnerEdit: objc.OSStatus = -25244;
pub const anon3181_errSecTrustNotAvailable: objc.OSStatus = -25245;
pub const anon3181_errSecUnsupportedFormat: objc.OSStatus = -25256;
pub const anon3181_errSecUnknownFormat: objc.OSStatus = -25257;
pub const anon3181_errSecKeyIsSensitive: objc.OSStatus = -25258;
pub const anon3181_errSecMultiplePrivKeys: objc.OSStatus = -25259;
pub const anon3181_errSecPassphraseRequired: objc.OSStatus = -25260;
pub const anon3181_errSecInvalidPasswordRef: objc.OSStatus = -25261;
pub const anon3181_errSecInvalidTrustSettings: objc.OSStatus = -25262;
pub const anon3181_errSecNoTrustSettings: objc.OSStatus = -25263;
pub const anon3181_errSecPkcs12VerifyFailure: objc.OSStatus = -25264;
pub const anon3181_errSecNotSigner: objc.OSStatus = -26267;
pub const anon3181_errSecDecode: objc.OSStatus = -26275;
pub const anon3181_errSecServiceNotAvailable: objc.OSStatus = -67585;
pub const anon3181_errSecInsufficientClientID: objc.OSStatus = -67586;
pub const anon3181_errSecDeviceReset: objc.OSStatus = -67587;
pub const anon3181_errSecDeviceFailed: objc.OSStatus = -67588;
pub const anon3181_errSecAppleAddAppACLSubject: objc.OSStatus = -67589;
pub const anon3181_errSecApplePublicKeyIncomplete: objc.OSStatus = -67590;
pub const anon3181_errSecAppleSignatureMismatch: objc.OSStatus = -67591;
pub const anon3181_errSecAppleInvalidKeyStartDate: objc.OSStatus = -67592;
pub const anon3181_errSecAppleInvalidKeyEndDate: objc.OSStatus = -67593;
pub const anon3181_errSecConversionError: objc.OSStatus = -67594;
pub const anon3181_errSecAppleSSLv2Rollback: objc.OSStatus = -67595;
pub const anon3181_errSecQuotaExceeded: objc.OSStatus = -67596;
pub const anon3181_errSecFileTooBig: objc.OSStatus = -67597;
pub const anon3181_errSecInvalidDatabaseBlob: objc.OSStatus = -67598;
pub const anon3181_errSecInvalidKeyBlob: objc.OSStatus = -67599;
pub const anon3181_errSecIncompatibleDatabaseBlob: objc.OSStatus = -67600;
pub const anon3181_errSecIncompatibleKeyBlob: objc.OSStatus = -67601;
pub const anon3181_errSecHostNameMismatch: objc.OSStatus = -67602;
pub const anon3181_errSecUnknownCriticalExtensionFlag: objc.OSStatus = -67603;
pub const anon3181_errSecNoBasicConstraints: objc.OSStatus = -67604;
pub const anon3181_errSecNoBasicConstraintsCA: objc.OSStatus = -67605;
pub const anon3181_errSecInvalidAuthorityKeyID: objc.OSStatus = -67606;
pub const anon3181_errSecInvalidSubjectKeyID: objc.OSStatus = -67607;
pub const anon3181_errSecInvalidKeyUsageForPolicy: objc.OSStatus = -67608;
pub const anon3181_errSecInvalidExtendedKeyUsage: objc.OSStatus = -67609;
pub const anon3181_errSecInvalidIDLinkage: objc.OSStatus = -67610;
pub const anon3181_errSecPathLengthConstraintExceeded: objc.OSStatus = -67611;
pub const anon3181_errSecInvalidRoot: objc.OSStatus = -67612;
pub const anon3181_errSecCRLExpired: objc.OSStatus = -67613;
pub const anon3181_errSecCRLNotValidYet: objc.OSStatus = -67614;
pub const anon3181_errSecCRLNotFound: objc.OSStatus = -67615;
pub const anon3181_errSecCRLServerDown: objc.OSStatus = -67616;
pub const anon3181_errSecCRLBadURI: objc.OSStatus = -67617;
pub const anon3181_errSecUnknownCertExtension: objc.OSStatus = -67618;
pub const anon3181_errSecUnknownCRLExtension: objc.OSStatus = -67619;
pub const anon3181_errSecCRLNotTrusted: objc.OSStatus = -67620;
pub const anon3181_errSecCRLPolicyFailed: objc.OSStatus = -67621;
pub const anon3181_errSecIDPFailure: objc.OSStatus = -67622;
pub const anon3181_errSecSMIMEEmailAddressesNotFound: objc.OSStatus = -67623;
pub const anon3181_errSecSMIMEBadExtendedKeyUsage: objc.OSStatus = -67624;
pub const anon3181_errSecSMIMEBadKeyUsage: objc.OSStatus = -67625;
pub const anon3181_errSecSMIMEKeyUsageNotCritical: objc.OSStatus = -67626;
pub const anon3181_errSecSMIMENoEmailAddress: objc.OSStatus = -67627;
pub const anon3181_errSecSMIMESubjAltNameNotCritical: objc.OSStatus = -67628;
pub const anon3181_errSecSSLBadExtendedKeyUsage: objc.OSStatus = -67629;
pub const anon3181_errSecOCSPBadResponse: objc.OSStatus = -67630;
pub const anon3181_errSecOCSPBadRequest: objc.OSStatus = -67631;
pub const anon3181_errSecOCSPUnavailable: objc.OSStatus = -67632;
pub const anon3181_errSecOCSPStatusUnrecognized: objc.OSStatus = -67633;
pub const anon3181_errSecEndOfData: objc.OSStatus = -67634;
pub const anon3181_errSecIncompleteCertRevocationCheck: objc.OSStatus = -67635;
pub const anon3181_errSecNetworkFailure: objc.OSStatus = -67636;
pub const anon3181_errSecOCSPNotTrustedToAnchor: objc.OSStatus = -67637;
pub const anon3181_errSecRecordModified: objc.OSStatus = -67638;
pub const anon3181_errSecOCSPSignatureError: objc.OSStatus = -67639;
pub const anon3181_errSecOCSPNoSigner: objc.OSStatus = -67640;
pub const anon3181_errSecOCSPResponderMalformedReq: objc.OSStatus = -67641;
pub const anon3181_errSecOCSPResponderInternalError: objc.OSStatus = -67642;
pub const anon3181_errSecOCSPResponderTryLater: objc.OSStatus = -67643;
pub const anon3181_errSecOCSPResponderSignatureRequired: objc.OSStatus = -67644;
pub const anon3181_errSecOCSPResponderUnauthorized: objc.OSStatus = -67645;
pub const anon3181_errSecOCSPResponseNonceMismatch: objc.OSStatus = -67646;
pub const anon3181_errSecCodeSigningBadCertChainLength: objc.OSStatus = -67647;
pub const anon3181_errSecCodeSigningNoBasicConstraints: objc.OSStatus = -67648;
pub const anon3181_errSecCodeSigningBadPathLengthConstraint: objc.OSStatus = -67649;
pub const anon3181_errSecCodeSigningNoExtendedKeyUsage: objc.OSStatus = -67650;
pub const anon3181_errSecCodeSigningDevelopment: objc.OSStatus = -67651;
pub const anon3181_errSecResourceSignBadCertChainLength: objc.OSStatus = -67652;
pub const anon3181_errSecResourceSignBadExtKeyUsage: objc.OSStatus = -67653;
pub const anon3181_errSecTrustSettingDeny: objc.OSStatus = -67654;
pub const anon3181_errSecInvalidSubjectName: objc.OSStatus = -67655;
pub const anon3181_errSecUnknownQualifiedCertStatement: objc.OSStatus = -67656;
pub const anon3181_errSecMobileMeRequestQueued: objc.OSStatus = -67657;
pub const anon3181_errSecMobileMeRequestRedirected: objc.OSStatus = -67658;
pub const anon3181_errSecMobileMeServerError: objc.OSStatus = -67659;
pub const anon3181_errSecMobileMeServerNotAvailable: objc.OSStatus = -67660;
pub const anon3181_errSecMobileMeServerAlreadyExists: objc.OSStatus = -67661;
pub const anon3181_errSecMobileMeServerServiceErr: objc.OSStatus = -67662;
pub const anon3181_errSecMobileMeRequestAlreadyPending: objc.OSStatus = -67663;
pub const anon3181_errSecMobileMeNoRequestPending: objc.OSStatus = -67664;
pub const anon3181_errSecMobileMeCSRVerifyFailure: objc.OSStatus = -67665;
pub const anon3181_errSecMobileMeFailedConsistencyCheck: objc.OSStatus = -67666;
pub const anon3181_errSecNotInitialized: objc.OSStatus = -67667;
pub const anon3181_errSecInvalidHandleUsage: objc.OSStatus = -67668;
pub const anon3181_errSecPVCReferentNotFound: objc.OSStatus = -67669;
pub const anon3181_errSecFunctionIntegrityFail: objc.OSStatus = -67670;
pub const anon3181_errSecInternalError: objc.OSStatus = -67671;
pub const anon3181_errSecMemoryError: objc.OSStatus = -67672;
pub const anon3181_errSecInvalidData: objc.OSStatus = -67673;
pub const anon3181_errSecMDSError: objc.OSStatus = -67674;
pub const anon3181_errSecInvalidPointer: objc.OSStatus = -67675;
pub const anon3181_errSecSelfCheckFailed: objc.OSStatus = -67676;
pub const anon3181_errSecFunctionFailed: objc.OSStatus = -67677;
pub const anon3181_errSecModuleManifestVerifyFailed: objc.OSStatus = -67678;
pub const anon3181_errSecInvalidGUID: objc.OSStatus = -67679;
pub const anon3181_errSecInvalidHandle: objc.OSStatus = -67680;
pub const anon3181_errSecInvalidDBList: objc.OSStatus = -67681;
pub const anon3181_errSecInvalidPassthroughID: objc.OSStatus = -67682;
pub const anon3181_errSecInvalidNetworkAddress: objc.OSStatus = -67683;
pub const anon3181_errSecCRLAlreadySigned: objc.OSStatus = -67684;
pub const anon3181_errSecInvalidNumberOfFields: objc.OSStatus = -67685;
pub const anon3181_errSecVerificationFailure: objc.OSStatus = -67686;
pub const anon3181_errSecUnknownTag: objc.OSStatus = -67687;
pub const anon3181_errSecInvalidSignature: objc.OSStatus = -67688;
pub const anon3181_errSecInvalidName: objc.OSStatus = -67689;
pub const anon3181_errSecInvalidCertificateRef: objc.OSStatus = -67690;
pub const anon3181_errSecInvalidCertificateGroup: objc.OSStatus = -67691;
pub const anon3181_errSecTagNotFound: objc.OSStatus = -67692;
pub const anon3181_errSecInvalidQuery: objc.OSStatus = -67693;
pub const anon3181_errSecInvalidValue: objc.OSStatus = -67694;
pub const anon3181_errSecCallbackFailed: objc.OSStatus = -67695;
pub const anon3181_errSecACLDeleteFailed: objc.OSStatus = -67696;
pub const anon3181_errSecACLReplaceFailed: objc.OSStatus = -67697;
pub const anon3181_errSecACLAddFailed: objc.OSStatus = -67698;
pub const anon3181_errSecACLChangeFailed: objc.OSStatus = -67699;
pub const anon3181_errSecInvalidAccessCredentials: objc.OSStatus = -67700;
pub const anon3181_errSecInvalidRecord: objc.OSStatus = -67701;
pub const anon3181_errSecInvalidACL: objc.OSStatus = -67702;
pub const anon3181_errSecInvalidSampleValue: objc.OSStatus = -67703;
pub const anon3181_errSecIncompatibleVersion: objc.OSStatus = -67704;
pub const anon3181_errSecPrivilegeNotGranted: objc.OSStatus = -67705;
pub const anon3181_errSecInvalidScope: objc.OSStatus = -67706;
pub const anon3181_errSecPVCAlreadyConfigured: objc.OSStatus = -67707;
pub const anon3181_errSecInvalidPVC: objc.OSStatus = -67708;
pub const anon3181_errSecEMMLoadFailed: objc.OSStatus = -67709;
pub const anon3181_errSecEMMUnloadFailed: objc.OSStatus = -67710;
pub const anon3181_errSecAddinLoadFailed: objc.OSStatus = -67711;
pub const anon3181_errSecInvalidKeyRef: objc.OSStatus = -67712;
pub const anon3181_errSecInvalidKeyHierarchy: objc.OSStatus = -67713;
pub const anon3181_errSecAddinUnloadFailed: objc.OSStatus = -67714;
pub const anon3181_errSecLibraryReferenceNotFound: objc.OSStatus = -67715;
pub const anon3181_errSecInvalidAddinFunctionTable: objc.OSStatus = -67716;
pub const anon3181_errSecInvalidServiceMask: objc.OSStatus = -67717;
pub const anon3181_errSecModuleNotLoaded: objc.OSStatus = -67718;
pub const anon3181_errSecInvalidSubServiceID: objc.OSStatus = -67719;
pub const anon3181_errSecAttributeNotInContext: objc.OSStatus = -67720;
pub const anon3181_errSecModuleManagerInitializeFailed: objc.OSStatus = -67721;
pub const anon3181_errSecModuleManagerNotFound: objc.OSStatus = -67722;
pub const anon3181_errSecEventNotificationCallbackNotFound: objc.OSStatus = -67723;
pub const anon3181_errSecInputLengthError: objc.OSStatus = -67724;
pub const anon3181_errSecOutputLengthError: objc.OSStatus = -67725;
pub const anon3181_errSecPrivilegeNotSupported: objc.OSStatus = -67726;
pub const anon3181_errSecDeviceError: objc.OSStatus = -67727;
pub const anon3181_errSecAttachHandleBusy: objc.OSStatus = -67728;
pub const anon3181_errSecNotLoggedIn: objc.OSStatus = -67729;
pub const anon3181_errSecAlgorithmMismatch: objc.OSStatus = -67730;
pub const anon3181_errSecKeyUsageIncorrect: objc.OSStatus = -67731;
pub const anon3181_errSecKeyBlobTypeIncorrect: objc.OSStatus = -67732;
pub const anon3181_errSecKeyHeaderInconsistent: objc.OSStatus = -67733;
pub const anon3181_errSecUnsupportedKeyFormat: objc.OSStatus = -67734;
pub const anon3181_errSecUnsupportedKeySize: objc.OSStatus = -67735;
pub const anon3181_errSecInvalidKeyUsageMask: objc.OSStatus = -67736;
pub const anon3181_errSecUnsupportedKeyUsageMask: objc.OSStatus = -67737;
pub const anon3181_errSecInvalidKeyAttributeMask: objc.OSStatus = -67738;
pub const anon3181_errSecUnsupportedKeyAttributeMask: objc.OSStatus = -67739;
pub const anon3181_errSecInvalidKeyLabel: objc.OSStatus = -67740;
pub const anon3181_errSecUnsupportedKeyLabel: objc.OSStatus = -67741;
pub const anon3181_errSecInvalidKeyFormat: objc.OSStatus = -67742;
pub const anon3181_errSecUnsupportedVectorOfBuffers: objc.OSStatus = -67743;
pub const anon3181_errSecInvalidInputVector: objc.OSStatus = -67744;
pub const anon3181_errSecInvalidOutputVector: objc.OSStatus = -67745;
pub const anon3181_errSecInvalidContext: objc.OSStatus = -67746;
pub const anon3181_errSecInvalidAlgorithm: objc.OSStatus = -67747;
pub const anon3181_errSecInvalidAttributeKey: objc.OSStatus = -67748;
pub const anon3181_errSecMissingAttributeKey: objc.OSStatus = -67749;
pub const anon3181_errSecInvalidAttributeInitVector: objc.OSStatus = -67750;
pub const anon3181_errSecMissingAttributeInitVector: objc.OSStatus = -67751;
pub const anon3181_errSecInvalidAttributeSalt: objc.OSStatus = -67752;
pub const anon3181_errSecMissingAttributeSalt: objc.OSStatus = -67753;
pub const anon3181_errSecInvalidAttributePadding: objc.OSStatus = -67754;
pub const anon3181_errSecMissingAttributePadding: objc.OSStatus = -67755;
pub const anon3181_errSecInvalidAttributeRandom: objc.OSStatus = -67756;
pub const anon3181_errSecMissingAttributeRandom: objc.OSStatus = -67757;
pub const anon3181_errSecInvalidAttributeSeed: objc.OSStatus = -67758;
pub const anon3181_errSecMissingAttributeSeed: objc.OSStatus = -67759;
pub const anon3181_errSecInvalidAttributePassphrase: objc.OSStatus = -67760;
pub const anon3181_errSecMissingAttributePassphrase: objc.OSStatus = -67761;
pub const anon3181_errSecInvalidAttributeKeyLength: objc.OSStatus = -67762;
pub const anon3181_errSecMissingAttributeKeyLength: objc.OSStatus = -67763;
pub const anon3181_errSecInvalidAttributeBlockSize: objc.OSStatus = -67764;
pub const anon3181_errSecMissingAttributeBlockSize: objc.OSStatus = -67765;
pub const anon3181_errSecInvalidAttributeOutputSize: objc.OSStatus = -67766;
pub const anon3181_errSecMissingAttributeOutputSize: objc.OSStatus = -67767;
pub const anon3181_errSecInvalidAttributeRounds: objc.OSStatus = -67768;
pub const anon3181_errSecMissingAttributeRounds: objc.OSStatus = -67769;
pub const anon3181_errSecInvalidAlgorithmParms: objc.OSStatus = -67770;
pub const anon3181_errSecMissingAlgorithmParms: objc.OSStatus = -67771;
pub const anon3181_errSecInvalidAttributeLabel: objc.OSStatus = -67772;
pub const anon3181_errSecMissingAttributeLabel: objc.OSStatus = -67773;
pub const anon3181_errSecInvalidAttributeKeyType: objc.OSStatus = -67774;
pub const anon3181_errSecMissingAttributeKeyType: objc.OSStatus = -67775;
pub const anon3181_errSecInvalidAttributeMode: objc.OSStatus = -67776;
pub const anon3181_errSecMissingAttributeMode: objc.OSStatus = -67777;
pub const anon3181_errSecInvalidAttributeEffectiveBits: objc.OSStatus = -67778;
pub const anon3181_errSecMissingAttributeEffectiveBits: objc.OSStatus = -67779;
pub const anon3181_errSecInvalidAttributeStartDate: objc.OSStatus = -67780;
pub const anon3181_errSecMissingAttributeStartDate: objc.OSStatus = -67781;
pub const anon3181_errSecInvalidAttributeEndDate: objc.OSStatus = -67782;
pub const anon3181_errSecMissingAttributeEndDate: objc.OSStatus = -67783;
pub const anon3181_errSecInvalidAttributeVersion: objc.OSStatus = -67784;
pub const anon3181_errSecMissingAttributeVersion: objc.OSStatus = -67785;
pub const anon3181_errSecInvalidAttributePrime: objc.OSStatus = -67786;
pub const anon3181_errSecMissingAttributePrime: objc.OSStatus = -67787;
pub const anon3181_errSecInvalidAttributeBase: objc.OSStatus = -67788;
pub const anon3181_errSecMissingAttributeBase: objc.OSStatus = -67789;
pub const anon3181_errSecInvalidAttributeSubprime: objc.OSStatus = -67790;
pub const anon3181_errSecMissingAttributeSubprime: objc.OSStatus = -67791;
pub const anon3181_errSecInvalidAttributeIterationCount: objc.OSStatus = -67792;
pub const anon3181_errSecMissingAttributeIterationCount: objc.OSStatus = -67793;
pub const anon3181_errSecInvalidAttributeDLDBHandle: objc.OSStatus = -67794;
pub const anon3181_errSecMissingAttributeDLDBHandle: objc.OSStatus = -67795;
pub const anon3181_errSecInvalidAttributeAccessCredentials: objc.OSStatus = -67796;
pub const anon3181_errSecMissingAttributeAccessCredentials: objc.OSStatus = -67797;
pub const anon3181_errSecInvalidAttributePublicKeyFormat: objc.OSStatus = -67798;
pub const anon3181_errSecMissingAttributePublicKeyFormat: objc.OSStatus = -67799;
pub const anon3181_errSecInvalidAttributePrivateKeyFormat: objc.OSStatus = -67800;
pub const anon3181_errSecMissingAttributePrivateKeyFormat: objc.OSStatus = -67801;
pub const anon3181_errSecInvalidAttributeSymmetricKeyFormat: objc.OSStatus = -67802;
pub const anon3181_errSecMissingAttributeSymmetricKeyFormat: objc.OSStatus = -67803;
pub const anon3181_errSecInvalidAttributeWrappedKeyFormat: objc.OSStatus = -67804;
pub const anon3181_errSecMissingAttributeWrappedKeyFormat: objc.OSStatus = -67805;
pub const anon3181_errSecStagedOperationInProgress: objc.OSStatus = -67806;
pub const anon3181_errSecStagedOperationNotStarted: objc.OSStatus = -67807;
pub const anon3181_errSecVerifyFailed: objc.OSStatus = -67808;
pub const anon3181_errSecQuerySizeUnknown: objc.OSStatus = -67809;
pub const anon3181_errSecBlockSizeMismatch: objc.OSStatus = -67810;
pub const anon3181_errSecPublicKeyInconsistent: objc.OSStatus = -67811;
pub const anon3181_errSecDeviceVerifyFailed: objc.OSStatus = -67812;
pub const anon3181_errSecInvalidLoginName: objc.OSStatus = -67813;
pub const anon3181_errSecAlreadyLoggedIn: objc.OSStatus = -67814;
pub const anon3181_errSecInvalidDigestAlgorithm: objc.OSStatus = -67815;
pub const anon3181_errSecInvalidCRLGroup: objc.OSStatus = -67816;
pub const anon3181_errSecCertificateCannotOperate: objc.OSStatus = -67817;
pub const anon3181_errSecCertificateExpired: objc.OSStatus = -67818;
pub const anon3181_errSecCertificateNotValidYet: objc.OSStatus = -67819;
pub const anon3181_errSecCertificateRevoked: objc.OSStatus = -67820;
pub const anon3181_errSecCertificateSuspended: objc.OSStatus = -67821;
pub const anon3181_errSecInsufficientCredentials: objc.OSStatus = -67822;
pub const anon3181_errSecInvalidAction: objc.OSStatus = -67823;
pub const anon3181_errSecInvalidAuthority: objc.OSStatus = -67824;
pub const anon3181_errSecVerifyActionFailed: objc.OSStatus = -67825;
pub const anon3181_errSecInvalidCertAuthority: objc.OSStatus = -67826;
pub const anon3181_errSecInvalidCRLAuthority: objc.OSStatus = -67827;
pub const anon3181_errSecInvaldCRLAuthority: objc.OSStatus = -67827;
pub const anon3181_errSecInvalidCRLEncoding: objc.OSStatus = -67828;
pub const anon3181_errSecInvalidCRLType: objc.OSStatus = -67829;
pub const anon3181_errSecInvalidCRL: objc.OSStatus = -67830;
pub const anon3181_errSecInvalidFormType: objc.OSStatus = -67831;
pub const anon3181_errSecInvalidID: objc.OSStatus = -67832;
pub const anon3181_errSecInvalidIdentifier: objc.OSStatus = -67833;
pub const anon3181_errSecInvalidIndex: objc.OSStatus = -67834;
pub const anon3181_errSecInvalidPolicyIdentifiers: objc.OSStatus = -67835;
pub const anon3181_errSecInvalidTimeString: objc.OSStatus = -67836;
pub const anon3181_errSecInvalidReason: objc.OSStatus = -67837;
pub const anon3181_errSecInvalidRequestInputs: objc.OSStatus = -67838;
pub const anon3181_errSecInvalidResponseVector: objc.OSStatus = -67839;
pub const anon3181_errSecInvalidStopOnPolicy: objc.OSStatus = -67840;
pub const anon3181_errSecInvalidTuple: objc.OSStatus = -67841;
pub const anon3181_errSecMultipleValuesUnsupported: objc.OSStatus = -67842;
pub const anon3181_errSecNotTrusted: objc.OSStatus = -67843;
pub const anon3181_errSecNoDefaultAuthority: objc.OSStatus = -67844;
pub const anon3181_errSecRejectedForm: objc.OSStatus = -67845;
pub const anon3181_errSecRequestLost: objc.OSStatus = -67846;
pub const anon3181_errSecRequestRejected: objc.OSStatus = -67847;
pub const anon3181_errSecUnsupportedAddressType: objc.OSStatus = -67848;
pub const anon3181_errSecUnsupportedService: objc.OSStatus = -67849;
pub const anon3181_errSecInvalidTupleGroup: objc.OSStatus = -67850;
pub const anon3181_errSecInvalidBaseACLs: objc.OSStatus = -67851;
pub const anon3181_errSecInvalidTupleCredentials: objc.OSStatus = -67852;
pub const anon3181_errSecInvalidTupleCredendtials: objc.OSStatus = -67852;
pub const anon3181_errSecInvalidEncoding: objc.OSStatus = -67853;
pub const anon3181_errSecInvalidValidityPeriod: objc.OSStatus = -67854;
pub const anon3181_errSecInvalidRequestor: objc.OSStatus = -67855;
pub const anon3181_errSecRequestDescriptor: objc.OSStatus = -67856;
pub const anon3181_errSecInvalidBundleInfo: objc.OSStatus = -67857;
pub const anon3181_errSecInvalidCRLIndex: objc.OSStatus = -67858;
pub const anon3181_errSecNoFieldValues: objc.OSStatus = -67859;
pub const anon3181_errSecUnsupportedFieldFormat: objc.OSStatus = -67860;
pub const anon3181_errSecUnsupportedIndexInfo: objc.OSStatus = -67861;
pub const anon3181_errSecUnsupportedLocality: objc.OSStatus = -67862;
pub const anon3181_errSecUnsupportedNumAttributes: objc.OSStatus = -67863;
pub const anon3181_errSecUnsupportedNumIndexes: objc.OSStatus = -67864;
pub const anon3181_errSecUnsupportedNumRecordTypes: objc.OSStatus = -67865;
pub const anon3181_errSecFieldSpecifiedMultiple: objc.OSStatus = -67866;
pub const anon3181_errSecIncompatibleFieldFormat: objc.OSStatus = -67867;
pub const anon3181_errSecInvalidParsingModule: objc.OSStatus = -67868;
pub const anon3181_errSecDatabaseLocked: objc.OSStatus = -67869;
pub const anon3181_errSecDatastoreIsOpen: objc.OSStatus = -67870;
pub const anon3181_errSecMissingValue: objc.OSStatus = -67871;
pub const anon3181_errSecUnsupportedQueryLimits: objc.OSStatus = -67872;
pub const anon3181_errSecUnsupportedNumSelectionPreds: objc.OSStatus = -67873;
pub const anon3181_errSecUnsupportedOperator: objc.OSStatus = -67874;
pub const anon3181_errSecInvalidDBLocation: objc.OSStatus = -67875;
pub const anon3181_errSecInvalidAccessRequest: objc.OSStatus = -67876;
pub const anon3181_errSecInvalidIndexInfo: objc.OSStatus = -67877;
pub const anon3181_errSecInvalidNewOwner: objc.OSStatus = -67878;
pub const anon3181_errSecInvalidModifyMode: objc.OSStatus = -67879;
pub const anon3181_errSecMissingRequiredExtension: objc.OSStatus = -67880;
pub const anon3181_errSecExtendedKeyUsageNotCritical: objc.OSStatus = -67881;
pub const anon3181_errSecTimestampMissing: objc.OSStatus = -67882;
pub const anon3181_errSecTimestampInvalid: objc.OSStatus = -67883;
pub const anon3181_errSecTimestampNotTrusted: objc.OSStatus = -67884;
pub const anon3181_errSecTimestampServiceNotAvailable: objc.OSStatus = -67885;
pub const anon3181_errSecTimestampBadAlg: objc.OSStatus = -67886;
pub const anon3181_errSecTimestampBadRequest: objc.OSStatus = -67887;
pub const anon3181_errSecTimestampBadDataFormat: objc.OSStatus = -67888;
pub const anon3181_errSecTimestampTimeNotAvailable: objc.OSStatus = -67889;
pub const anon3181_errSecTimestampUnacceptedPolicy: objc.OSStatus = -67890;
pub const anon3181_errSecTimestampUnacceptedExtension: objc.OSStatus = -67891;
pub const anon3181_errSecTimestampAddInfoNotAvailable: objc.OSStatus = -67892;
pub const anon3181_errSecTimestampSystemFailure: objc.OSStatus = -67893;
pub const anon3181_errSecSigningTimeMissing: objc.OSStatus = -67894;
pub const anon3181_errSecTimestampRejection: objc.OSStatus = -67895;
pub const anon3181_errSecTimestampWaiting: objc.OSStatus = -67896;
pub const anon3181_errSecTimestampRevocationWarning: objc.OSStatus = -67897;
pub const anon3181_errSecTimestampRevocationNotification: objc.OSStatus = -67898;
pub const anon3181_errSecCertificatePolicyNotAllowed: objc.OSStatus = -67899;
pub const anon3181_errSecCertificateNameNotAllowed: objc.OSStatus = -67900;
pub const anon3181_errSecCertificateValidityPeriodTooLong: objc.OSStatus = -67901;
pub const anon3181_errSecCertificateIsCA: objc.OSStatus = -67902;
pub const anon3181_errSecCertificateDuplicateExtension: objc.OSStatus = -67903;

pub const anon7991 = objc.OSStatus;
pub const anon7991_errSSLProtocol: objc.OSStatus = -9800;
pub const anon7991_errSSLNegotiation: objc.OSStatus = -9801;
pub const anon7991_errSSLFatalAlert: objc.OSStatus = -9802;
pub const anon7991_errSSLWouldBlock: objc.OSStatus = -9803;
pub const anon7991_errSSLSessionNotFound: objc.OSStatus = -9804;
pub const anon7991_errSSLClosedGraceful: objc.OSStatus = -9805;
pub const anon7991_errSSLClosedAbort: objc.OSStatus = -9806;
pub const anon7991_errSSLXCertChainInvalid: objc.OSStatus = -9807;
pub const anon7991_errSSLBadCert: objc.OSStatus = -9808;
pub const anon7991_errSSLCrypto: objc.OSStatus = -9809;
pub const anon7991_errSSLInternal: objc.OSStatus = -9810;
pub const anon7991_errSSLModuleAttach: objc.OSStatus = -9811;
pub const anon7991_errSSLUnknownRootCert: objc.OSStatus = -9812;
pub const anon7991_errSSLNoRootCert: objc.OSStatus = -9813;
pub const anon7991_errSSLCertExpired: objc.OSStatus = -9814;
pub const anon7991_errSSLCertNotYetValid: objc.OSStatus = -9815;
pub const anon7991_errSSLClosedNoNotify: objc.OSStatus = -9816;
pub const anon7991_errSSLBufferOverflow: objc.OSStatus = -9817;
pub const anon7991_errSSLBadCipherSuite: objc.OSStatus = -9818;
pub const anon7991_errSSLPeerUnexpectedMsg: objc.OSStatus = -9819;
pub const anon7991_errSSLPeerBadRecordMac: objc.OSStatus = -9820;
pub const anon7991_errSSLPeerDecryptionFail: objc.OSStatus = -9821;
pub const anon7991_errSSLPeerRecordOverflow: objc.OSStatus = -9822;
pub const anon7991_errSSLPeerDecompressFail: objc.OSStatus = -9823;
pub const anon7991_errSSLPeerHandshakeFail: objc.OSStatus = -9824;
pub const anon7991_errSSLPeerBadCert: objc.OSStatus = -9825;
pub const anon7991_errSSLPeerUnsupportedCert: objc.OSStatus = -9826;
pub const anon7991_errSSLPeerCertRevoked: objc.OSStatus = -9827;
pub const anon7991_errSSLPeerCertExpired: objc.OSStatus = -9828;
pub const anon7991_errSSLPeerCertUnknown: objc.OSStatus = -9829;
pub const anon7991_errSSLIllegalParam: objc.OSStatus = -9830;
pub const anon7991_errSSLPeerUnknownCA: objc.OSStatus = -9831;
pub const anon7991_errSSLPeerAccessDenied: objc.OSStatus = -9832;
pub const anon7991_errSSLPeerDecodeError: objc.OSStatus = -9833;
pub const anon7991_errSSLPeerDecryptError: objc.OSStatus = -9834;
pub const anon7991_errSSLPeerExportRestriction: objc.OSStatus = -9835;
pub const anon7991_errSSLPeerProtocolVersion: objc.OSStatus = -9836;
pub const anon7991_errSSLPeerInsufficientSecurity: objc.OSStatus = -9837;
pub const anon7991_errSSLPeerInternalError: objc.OSStatus = -9838;
pub const anon7991_errSSLPeerUserCancelled: objc.OSStatus = -9839;
pub const anon7991_errSSLPeerNoRenegotiation: objc.OSStatus = -9840;
pub const anon7991_errSSLPeerAuthCompleted: objc.OSStatus = -9841;
pub const anon7991_errSSLClientCertRequested: objc.OSStatus = -9842;
pub const anon7991_errSSLHostNameMismatch: objc.OSStatus = -9843;
pub const anon7991_errSSLConnectionRefused: objc.OSStatus = -9844;
pub const anon7991_errSSLDecryptionFail: objc.OSStatus = -9845;
pub const anon7991_errSSLBadRecordMac: objc.OSStatus = -9846;
pub const anon7991_errSSLRecordOverflow: objc.OSStatus = -9847;
pub const anon7991_errSSLBadConfiguration: objc.OSStatus = -9848;
pub const anon7991_errSSLUnexpectedRecord: objc.OSStatus = -9849;
pub const anon7991_errSSLWeakPeerEphemeralDHKey: objc.OSStatus = -9850;
pub const anon7991_errSSLClientHelloReceived: objc.OSStatus = -9851;
pub const anon7991_errSSLTransportReset: objc.OSStatus = -9852;
pub const anon7991_errSSLNetworkTimeout: objc.OSStatus = -9853;
pub const anon7991_errSSLConfigurationFailed: objc.OSStatus = -9854;
pub const anon7991_errSSLUnsupportedExtension: objc.OSStatus = -9855;
pub const anon7991_errSSLUnexpectedMessage: objc.OSStatus = -9856;
pub const anon7991_errSSLDecompressFail: objc.OSStatus = -9857;
pub const anon7991_errSSLHandshakeFail: objc.OSStatus = -9858;
pub const anon7991_errSSLDecodeError: objc.OSStatus = -9859;
pub const anon7991_errSSLInappropriateFallback: objc.OSStatus = -9860;
pub const anon7991_errSSLMissingExtension: objc.OSStatus = -9861;
pub const anon7991_errSSLBadCertificateStatusResponse: objc.OSStatus = -9862;
pub const anon7991_errSSLCertificateRequired: objc.OSStatus = -9863;
pub const anon7991_errSSLUnknownPSKIdentity: objc.OSStatus = -9864;
pub const anon7991_errSSLUnrecognizedName: objc.OSStatus = -9865;
pub const anon7991_errSSLATSViolation: objc.OSStatus = -9880;
pub const anon7991_errSSLATSMinimumVersionViolation: objc.OSStatus = -9881;
pub const anon7991_errSSLATSCiphersuiteViolation: objc.OSStatus = -9882;
pub const anon7991_errSSLATSMinimumKeySizeViolation: objc.OSStatus = -9883;
pub const anon7991_errSSLATSLeafCertificateHashAlgorithmViolation: objc.OSStatus = -9884;
pub const anon7991_errSSLATSCertificateHashAlgorithmViolation: objc.OSStatus = -9885;
pub const anon7991_errSSLATSCertificateTrustViolation: objc.OSStatus = -9886;
pub const anon7991_errSSLEarlyDataRejected: objc.OSStatus = -9890;

pub const sint64 = objc.int64_t;

pub const uint64 = objc.uint64_t;

pub const sint32 = objc.int32_t;

pub const sint16 = objc.int16_t;

pub const sint8 = objc.int8_t;

pub const uint32 = objc.uint32_t;

pub const uint16 = objc.uint16_t;

pub const uint8 = objc.uint8_t;

pub const CSSM_INTPTR = objc.intptr_t;

pub const CSSM_SIZE = objc.size_t;

pub const cssm_data = extern struct {
    Length: objc.size_t,
    Data: objc.uint8_t,
};

pub const Asn1Item = cssm_data;

pub const Asn1Oid = cssm_data;

pub const Asn1AlgId = extern struct {
    algorithm: Asn1Oid,
    parameters: Asn1Item,
};

pub const Asn1PubKeyInfo = extern struct {
    algorithm: Asn1AlgId,
    subjectPublicKey: Asn1Item,
};

pub const Asn1Template_struct = extern struct {
    kind: objc.uint32_t,
    offset: objc.uint32_t,
    sub: ?*const anyopaque,
    size: objc.uint32_t,
};

pub const Asn1Template = Asn1Template_struct;

pub const Asn1TemplateChooser = Asn1Template;

pub const Asn1TemplateChooserPtr = Asn1TemplateChooser;

pub const CSSM_HANDLE = CSSM_INTPTR;

pub const CSSM_HANDLE_PTR = CSSM_INTPTR;

pub const CSSM_LONG_HANDLE = uint64;

pub const CSSM_LONG_HANDLE_PTR = uint64;

pub const CSSM_MODULE_HANDLE = CSSM_HANDLE;

pub const CSSM_MODULE_HANDLE_PTR = CSSM_HANDLE;

pub const CSSM_CC_HANDLE = CSSM_LONG_HANDLE;

pub const CSSM_CSP_HANDLE = CSSM_MODULE_HANDLE;

pub const CSSM_TP_HANDLE = CSSM_MODULE_HANDLE;

pub const CSSM_AC_HANDLE = CSSM_MODULE_HANDLE;

pub const CSSM_CL_HANDLE = CSSM_MODULE_HANDLE;

pub const CSSM_DL_HANDLE = CSSM_MODULE_HANDLE;

pub const CSSM_DB_HANDLE = CSSM_MODULE_HANDLE;

pub const anon701 = u32;
pub const anon701_CSSM_INVALID_HANDLE: u32 = 0;
pub const anon701_OSUnknownByteOrder: u32 = 0;
pub const anon701_OSLittleEndian: u32 = 1;
pub const anon701_OSBigEndian: u32 = 2;
pub const anon701_CFNotificationDeliverImmediately: u32 = 1;
pub const anon701_CFNotificationPostToAllSessions: u32 = 2;

pub const CSSM_BOOL = sint32;

pub const anon781 = u32;
pub const anon781_CSSM_FALSE: u32 = 0;
pub const anon781_CSSM_TRUE: u32 = 1;

pub const CSSM_RETURN = sint32;

pub const anon851 = u32;
pub const anon851_CSSM_OK: u32 = 0;
pub const anon851_CSSMERR_CSSM_INVALID_ADDIN_HANDLE: u32 = -2147417855;
pub const anon851_CSSMERR_CSSM_NOT_INITIALIZED: u32 = -2147417854;
pub const anon851_CSSMERR_CSSM_INVALID_HANDLE_USAGE: u32 = -2147417853;
pub const anon851_CSSMERR_CSSM_PVC_REFERENT_NOT_FOUND: u32 = -2147417852;
pub const anon851_CSSMERR_CSSM_FUNCTION_INTEGRITY_FAIL: u32 = -2147417851;

pub const anon891 = u32;
pub const anon891_CSSM_MODULE_STRING_SIZE: u32 = 64;

pub const CSSM_STRING = [68]c_char;

pub const CSSM_DATA_PTR = Asn1Item;

pub const cssm_guid = extern struct {
    Data1: uint32,
    Data2: uint16,
    Data3: uint16,
    Data4: uint8,
};

pub const CSSM_GUID = cssm_guid;

pub const CSSM_GUID_PTR = ?*cssm_guid;

pub const CSSM_BITMASK = uint32;

pub const CSSM_KEY_HIERARCHY = CSSM_BITMASK;

pub const anon1061 = u32;
pub const anon1061_CSSM_KEY_HIERARCHY_NONE: u32 = 0;
pub const anon1061_CSSM_KEY_HIERARCHY_INTEG: u32 = 1;
pub const anon1061_CSSM_KEY_HIERARCHY_EXPORT: u32 = 2;
pub const anon1061_CFCalendarComponentsWrap: u32 = 1;

pub const CSSM_PVC_MODE = CSSM_BITMASK;

pub const anon1131 = u32;
pub const anon1131_CSSM_PVC_NONE: u32 = 0;
pub const anon1131_CSSM_PVC_APP: u32 = 1;
pub const anon1131_CSSM_PVC_SP: u32 = 2;

pub const CSSM_PRIVILEGE_SCOPE = uint32;

pub const anon1201 = u32;
pub const anon1201_CSSM_PRIVILEGE_SCOPE_NONE: u32 = 0;
pub const anon1201_CSSM_PRIVILEGE_SCOPE_PROCESS: u32 = 1;
pub const anon1201_CSSM_PRIVILEGE_SCOPE_THREAD: u32 = 2;

pub const cssm_version = extern struct {
    Major: uint32,
    Minor: uint32,
};

pub const CSSM_VERSION = cssm_version;

pub const CSSM_VERSION_PTR = ?*cssm_version;

pub const CSSM_SERVICE_MASK = uint32;

pub const anon1321 = u32;
pub const anon1321_CSSM_SERVICE_CSSM: u32 = 1;
pub const anon1321_CSSM_SERVICE_CSP: u32 = 2;
pub const anon1321_CSSM_SERVICE_DL: u32 = 4;
pub const anon1321_CSSM_SERVICE_CL: u32 = 8;
pub const anon1321_CSSM_SERVICE_TP: u32 = 16;
pub const anon1321_CSSM_SERVICE_AC: u32 = 32;
pub const anon1321_CSSM_SERVICE_KR: u32 = 64;
pub const anon1321_CSSM_ACL_AUTHORIZATION_CHANGE_ACL: u32 = 65536;
pub const anon1321_CSSM_ACL_AUTHORIZATION_CHANGE_OWNER: u32 = 65537;
pub const anon1321_CSSM_ACL_AUTHORIZATION_PARTITION_ID: u32 = 65538;
pub const anon1321_CSSM_ACL_AUTHORIZATION_INTEGRITY: u32 = 65539;
pub const anon1321_CSSM_ACL_AUTHORIZATION_PREAUTH_BASE: u32 = 16842752;
pub const anon1321_CSSM_ACL_AUTHORIZATION_PREAUTH_END: u32 = 16908288;

pub const CSSM_SERVICE_TYPE = CSSM_SERVICE_MASK;

pub const cssm_subservice_uid = extern struct {
    Guid: CSSM_GUID,
    Version: CSSM_VERSION,
    SubserviceId: uint32,
    SubserviceType: CSSM_SERVICE_TYPE,
};

pub const CSSM_SUBSERVICE_UID = cssm_subservice_uid;

pub const CSSM_SUBSERVICE_UID_PTR = ?*cssm_subservice_uid;

pub const CSSM_MODULE_EVENT = uint32;

pub const CSSM_MODULE_EVENT_PTR = uint32;

pub const anon1521 = u32;
pub const anon1521_CSSM_NOTIFY_INSERT: u32 = 1;
pub const anon1521_CSSM_NOTIFY_REMOVE: u32 = 2;
pub const anon1521_CSSM_NOTIFY_FAULT: u32 = 3;

pub const CSSM_API_ModuleEventHandler = CSSM_RETURN;

pub const CSSM_ATTACH_FLAGS = uint32;

pub const anon1661 = u32;
pub const anon1661_CSSM_ATTACH_READ_ONLY: u32 = 1;
pub const anon1661_CSSMERR_CSSM_INTERNAL_ERROR: u32 = -2147418111;
pub const anon1661_CSSMERR_CSSM_MEMORY_ERROR: u32 = -2147418110;
pub const anon1661_CSSMERR_CSSM_MDS_ERROR: u32 = -2147418109;
pub const anon1661_CSSMERR_CSSM_INVALID_POINTER: u32 = -2147418108;
pub const anon1661_CSSMERR_CSSM_INVALID_INPUT_POINTER: u32 = -2147418107;
pub const anon1661_CSSMERR_CSSM_INVALID_OUTPUT_POINTER: u32 = -2147418106;
pub const anon1661_CSSMERR_CSSM_FUNCTION_NOT_IMPLEMENTED: u32 = -2147418105;
pub const anon1661_CSSMERR_CSSM_SELF_CHECK_FAILED: u32 = -2147418104;
pub const anon1661_CSSMERR_CSSM_OS_ACCESS_DENIED: u32 = -2147418103;
pub const anon1661_CSSMERR_CSSM_FUNCTION_FAILED: u32 = -2147418102;
pub const anon1661_CSSMERR_CSSM_MODULE_MANIFEST_VERIFY_FAILED: u32 = -2147418101;
pub const anon1661_CSSMERR_CSSM_INVALID_GUID: u32 = -2147418100;

pub const CSSM_PRIVILEGE = uint64;

pub const CSSM_USEE_TAG = CSSM_PRIVILEGE;

pub const anon1741 = u32;
pub const anon1741_CSSM_USEE_LAST: u32 = 255;
pub const anon1741_CSSM_USEE_NONE: u32 = 0;
pub const anon1741_CSSM_USEE_DOMESTIC: u32 = 1;
pub const anon1741_CSSM_USEE_FINANCIAL: u32 = 2;
pub const anon1741_CSSM_USEE_KRLE: u32 = 3;
pub const anon1741_CSSM_USEE_KRENT: u32 = 4;
pub const anon1741_CSSM_USEE_SSL: u32 = 5;
pub const anon1741_CSSM_USEE_AUTHENTICATION: u32 = 6;
pub const anon1741_CSSM_USEE_KEYEXCH: u32 = 7;
pub const anon1741_CSSM_USEE_MEDICAL: u32 = 8;
pub const anon1741_CSSM_USEE_INSURANCE: u32 = 9;
pub const anon1741_CSSM_USEE_WEAK: u32 = 10;

pub const CSSM_NET_ADDRESS_TYPE = uint32;

pub const anon1901 = u32;
pub const anon1901_CSSM_ADDR_NONE: u32 = 0;
pub const anon1901_CSSM_ADDR_CUSTOM: u32 = 1;
pub const anon1901_CSSM_ADDR_URL: u32 = 2;
pub const anon1901_CSSM_ADDR_SOCKADDR: u32 = 3;
pub const anon1901_CSSM_ADDR_NAME: u32 = 4;

pub const cssm_net_address = extern struct {
    AddressType: CSSM_NET_ADDRESS_TYPE,
    Address: Asn1Item,
};

pub const CSSM_NET_ADDRESS = cssm_net_address;

pub const CSSM_NET_ADDRESS_PTR = ?*cssm_net_address;

pub const CSSM_NET_PROTOCOL = uint32;

pub const anon2041 = u32;
pub const anon2041_CSSM_NET_PROTO_NONE: u32 = 0;
pub const anon2041_CSSM_NET_PROTO_CUSTOM: u32 = 1;
pub const anon2041_CSSM_NET_PROTO_UNSPECIFIED: u32 = 2;
pub const anon2041_CSSM_NET_PROTO_LDAP: u32 = 3;
pub const anon2041_CSSM_NET_PROTO_LDAPS: u32 = 4;
pub const anon2041_CSSM_NET_PROTO_LDAPNS: u32 = 5;
pub const anon2041_CSSM_NET_PROTO_X500DAP: u32 = 6;
pub const anon2041_CSSM_NET_PROTO_FTP: u32 = 7;
pub const anon2041_CSSM_NET_PROTO_FTPS: u32 = 8;
pub const anon2041_CSSM_NET_PROTO_OCSP: u32 = 9;
pub const anon2041_CSSM_NET_PROTO_CMP: u32 = 10;
pub const anon2041_CSSM_NET_PROTO_CMPS: u32 = 11;

pub const CSSM_CALLBACK = CSSM_RETURN;

pub const cssm_crypto_data = extern struct {
    Param: Asn1Item,
    Callback: CSSM_CALLBACK,
    CallerCtx: ?*anyopaque,
};

pub const CSSM_CRYPTO_DATA = cssm_crypto_data;

pub const CSSM_CRYPTO_DATA_PTR = ?*cssm_crypto_data;

pub const CSSM_WORDID_TYPE = sint32;

pub const anon2291 = i32;
pub const anon2291_CSSM_WORDID__UNK_: i32 = -1;
pub const anon2291_CSSM_WORDID__NLU_: i32 = 0;
pub const anon2291_CSSM_WORDID__STAR_: i32 = 1;
pub const anon2291_CSSM_WORDID_A: i32 = 2;
pub const anon2291_CSSM_WORDID_ACL: i32 = 3;
pub const anon2291_CSSM_WORDID_ALPHA: i32 = 4;
pub const anon2291_CSSM_WORDID_B: i32 = 5;
pub const anon2291_CSSM_WORDID_BER: i32 = 6;
pub const anon2291_CSSM_WORDID_BINARY: i32 = 7;
pub const anon2291_CSSM_WORDID_BIOMETRIC: i32 = 8;
pub const anon2291_CSSM_WORDID_C: i32 = 9;
pub const anon2291_CSSM_WORDID_CANCELED: i32 = 10;
pub const anon2291_CSSM_WORDID_CERT: i32 = 11;
pub const anon2291_CSSM_WORDID_COMMENT: i32 = 12;
pub const anon2291_CSSM_WORDID_CRL: i32 = 13;
pub const anon2291_CSSM_WORDID_CUSTOM: i32 = 14;
pub const anon2291_CSSM_WORDID_D: i32 = 15;
pub const anon2291_CSSM_WORDID_DATE: i32 = 16;
pub const anon2291_CSSM_WORDID_DB_DELETE: i32 = 17;
pub const anon2291_CSSM_WORDID_DB_EXEC_STORED_QUERY: i32 = 18;
pub const anon2291_CSSM_WORDID_DB_INSERT: i32 = 19;
pub const anon2291_CSSM_WORDID_DB_MODIFY: i32 = 20;
pub const anon2291_CSSM_WORDID_DB_READ: i32 = 21;
pub const anon2291_CSSM_WORDID_DBS_CREATE: i32 = 22;
pub const anon2291_CSSM_WORDID_DBS_DELETE: i32 = 23;
pub const anon2291_CSSM_WORDID_DECRYPT: i32 = 24;
pub const anon2291_CSSM_WORDID_DELETE: i32 = 25;
pub const anon2291_CSSM_WORDID_DELTA_CRL: i32 = 26;
pub const anon2291_CSSM_WORDID_DER: i32 = 27;
pub const anon2291_CSSM_WORDID_DERIVE: i32 = 28;
pub const anon2291_CSSM_WORDID_DISPLAY: i32 = 29;
pub const anon2291_CSSM_WORDID_DO: i32 = 30;
pub const anon2291_CSSM_WORDID_DSA: i32 = 31;
pub const anon2291_CSSM_WORDID_DSA_SHA1: i32 = 32;
pub const anon2291_CSSM_WORDID_E: i32 = 33;
pub const anon2291_CSSM_WORDID_ELGAMAL: i32 = 34;
pub const anon2291_CSSM_WORDID_ENCRYPT: i32 = 35;
pub const anon2291_CSSM_WORDID_ENTRY: i32 = 36;
pub const anon2291_CSSM_WORDID_EXPORT_CLEAR: i32 = 37;
pub const anon2291_CSSM_WORDID_EXPORT_WRAPPED: i32 = 38;
pub const anon2291_CSSM_WORDID_G: i32 = 39;
pub const anon2291_CSSM_WORDID_GE: i32 = 40;
pub const anon2291_CSSM_WORDID_GENKEY: i32 = 41;
pub const anon2291_CSSM_WORDID_HASH: i32 = 42;
pub const anon2291_CSSM_WORDID_HASHED_PASSWORD: i32 = 43;
pub const anon2291_CSSM_WORDID_HASHED_SUBJECT: i32 = 44;
pub const anon2291_CSSM_WORDID_HAVAL: i32 = 45;
pub const anon2291_CSSM_WORDID_IBCHASH: i32 = 46;
pub const anon2291_CSSM_WORDID_IMPORT_CLEAR: i32 = 47;
pub const anon2291_CSSM_WORDID_IMPORT_WRAPPED: i32 = 48;
pub const anon2291_CSSM_WORDID_INTEL: i32 = 49;
pub const anon2291_CSSM_WORDID_ISSUER: i32 = 50;
pub const anon2291_CSSM_WORDID_ISSUER_INFO: i32 = 51;
pub const anon2291_CSSM_WORDID_K_OF_N: i32 = 52;
pub const anon2291_CSSM_WORDID_KEA: i32 = 53;
pub const anon2291_CSSM_WORDID_KEYHOLDER: i32 = 54;
pub const anon2291_CSSM_WORDID_L: i32 = 55;
pub const anon2291_CSSM_WORDID_LE: i32 = 56;
pub const anon2291_CSSM_WORDID_LOGIN: i32 = 57;
pub const anon2291_CSSM_WORDID_LOGIN_NAME: i32 = 58;
pub const anon2291_CSSM_WORDID_MAC: i32 = 59;
pub const anon2291_CSSM_WORDID_MD2: i32 = 60;
pub const anon2291_CSSM_WORDID_MD2WITHRSA: i32 = 61;
pub const anon2291_CSSM_WORDID_MD4: i32 = 62;
pub const anon2291_CSSM_WORDID_MD5: i32 = 63;
pub const anon2291_CSSM_WORDID_MD5WITHRSA: i32 = 64;
pub const anon2291_CSSM_WORDID_N: i32 = 65;
pub const anon2291_CSSM_WORDID_NAME: i32 = 66;
pub const anon2291_CSSM_WORDID_NDR: i32 = 67;
pub const anon2291_CSSM_WORDID_NHASH: i32 = 68;
pub const anon2291_CSSM_WORDID_NOT_AFTER: i32 = 69;
pub const anon2291_CSSM_WORDID_NOT_BEFORE: i32 = 70;
pub const anon2291_CSSM_WORDID_NULL: i32 = 71;
pub const anon2291_CSSM_WORDID_NUMERIC: i32 = 72;
pub const anon2291_CSSM_WORDID_OBJECT_HASH: i32 = 73;
pub const anon2291_CSSM_WORDID_ONE_TIME: i32 = 74;
pub const anon2291_CSSM_WORDID_ONLINE: i32 = 75;
pub const anon2291_CSSM_WORDID_OWNER: i32 = 76;
pub const anon2291_CSSM_WORDID_P: i32 = 77;
pub const anon2291_CSSM_WORDID_PAM_NAME: i32 = 78;
pub const anon2291_CSSM_WORDID_PASSWORD: i32 = 79;
pub const anon2291_CSSM_WORDID_PGP: i32 = 80;
pub const anon2291_CSSM_WORDID_PREFIX: i32 = 81;
pub const anon2291_CSSM_WORDID_PRIVATE_KEY: i32 = 82;
pub const anon2291_CSSM_WORDID_PROMPTED_BIOMETRIC: i32 = 83;
pub const anon2291_CSSM_WORDID_PROMPTED_PASSWORD: i32 = 84;
pub const anon2291_CSSM_WORDID_PROPAGATE: i32 = 85;
pub const anon2291_CSSM_WORDID_PROTECTED_BIOMETRIC: i32 = 86;
pub const anon2291_CSSM_WORDID_PROTECTED_PASSWORD: i32 = 87;
pub const anon2291_CSSM_WORDID_PROTECTED_PIN: i32 = 88;
pub const anon2291_CSSM_WORDID_PUBLIC_KEY: i32 = 89;
pub const anon2291_CSSM_WORDID_PUBLIC_KEY_FROM_CERT: i32 = 90;
pub const anon2291_CSSM_WORDID_Q: i32 = 91;
pub const anon2291_CSSM_WORDID_RANGE: i32 = 92;
pub const anon2291_CSSM_WORDID_REVAL: i32 = 93;
pub const anon2291_CSSM_WORDID_RIPEMAC: i32 = 94;
pub const anon2291_CSSM_WORDID_RIPEMD: i32 = 95;
pub const anon2291_CSSM_WORDID_RIPEMD160: i32 = 96;
pub const anon2291_CSSM_WORDID_RSA: i32 = 97;
pub const anon2291_CSSM_WORDID_RSA_ISO9796: i32 = 98;
pub const anon2291_CSSM_WORDID_RSA_PKCS: i32 = 99;
pub const anon2291_CSSM_WORDID_RSA_PKCS_MD5: i32 = 100;
pub const anon2291_CSSM_WORDID_RSA_PKCS_SHA1: i32 = 101;
pub const anon2291_CSSM_WORDID_RSA_PKCS1: i32 = 102;
pub const anon2291_CSSM_WORDID_RSA_PKCS1_MD5: i32 = 103;
pub const anon2291_CSSM_WORDID_RSA_PKCS1_SHA1: i32 = 104;
pub const anon2291_CSSM_WORDID_RSA_PKCS1_SIG: i32 = 105;
pub const anon2291_CSSM_WORDID_RSA_RAW: i32 = 106;
pub const anon2291_CSSM_WORDID_SDSIV1: i32 = 107;
pub const anon2291_CSSM_WORDID_SEQUENCE: i32 = 108;
pub const anon2291_CSSM_WORDID_SET: i32 = 109;
pub const anon2291_CSSM_WORDID_SEXPR: i32 = 110;
pub const anon2291_CSSM_WORDID_SHA1: i32 = 111;
pub const anon2291_CSSM_WORDID_SHA1WITHDSA: i32 = 112;
pub const anon2291_CSSM_WORDID_SHA1WITHECDSA: i32 = 113;
pub const anon2291_CSSM_WORDID_SHA1WITHRSA: i32 = 114;
pub const anon2291_CSSM_WORDID_SIGN: i32 = 115;
pub const anon2291_CSSM_WORDID_SIGNATURE: i32 = 116;
pub const anon2291_CSSM_WORDID_SIGNED_NONCE: i32 = 117;
pub const anon2291_CSSM_WORDID_SIGNED_SECRET: i32 = 118;
pub const anon2291_CSSM_WORDID_SPKI: i32 = 119;
pub const anon2291_CSSM_WORDID_SUBJECT: i32 = 120;
pub const anon2291_CSSM_WORDID_SUBJECT_INFO: i32 = 121;
pub const anon2291_CSSM_WORDID_TAG: i32 = 122;
pub const anon2291_CSSM_WORDID_THRESHOLD: i32 = 123;
pub const anon2291_CSSM_WORDID_TIME: i32 = 124;
pub const anon2291_CSSM_WORDID_URI: i32 = 125;
pub const anon2291_CSSM_WORDID_VERSION: i32 = 126;
pub const anon2291_CSSM_WORDID_X509_ATTRIBUTE: i32 = 127;
pub const anon2291_CSSM_WORDID_X509V1: i32 = 128;
pub const anon2291_CSSM_WORDID_X509V2: i32 = 129;
pub const anon2291_CSSM_WORDID_X509V3: i32 = 130;
pub const anon2291_CSSM_WORDID_X9_ATTRIBUTE: i32 = 131;
pub const anon2291_CSSM_WORDID_VENDOR_START: i32 = 65536;
pub const anon2291_CSSM_WORDID_VENDOR_END: i32 = 2147418112;

pub const CSSM_LIST_ELEMENT_TYPE = uint32;

pub const CSSM_LIST_ELEMENT_TYPE_PTR = uint32;

pub const anon3681 = u32;
pub const anon3681_CSSM_LIST_ELEMENT_DATUM: u32 = 0;
pub const anon3681_CSSM_LIST_ELEMENT_SUBLIST: u32 = 1;
pub const anon3681_CSSM_LIST_ELEMENT_WORDID: u32 = 2;
pub const anon3681_CSSM_DL_DB_RECORD_GENERIC_PASSWORD: u32 = -2147483648;
pub const anon3681_CSSM_DL_DB_RECORD_INTERNET_PASSWORD: u32 = -2147483647;
pub const anon3681_CSSM_DL_DB_RECORD_APPLESHARE_PASSWORD: u32 = -2147483646;
pub const anon3681_CSSM_DL_DB_RECORD_X509_CERTIFICATE: u32 = -2147479552;
pub const anon3681_CSSM_DL_DB_RECORD_USER_TRUST: u32 = -2147479551;
pub const anon3681_CSSM_DL_DB_RECORD_X509_CRL: u32 = -2147479550;
pub const anon3681_CSSM_DL_DB_RECORD_UNLOCK_REFERRAL: u32 = -2147479549;
pub const anon3681_CSSM_DL_DB_RECORD_EXTENDED_ATTRIBUTE: u32 = -2147479548;
pub const anon3681_CSSM_DL_DB_RECORD_METADATA: u32 = -2147450880;

pub const CSSM_LIST_TYPE = uint32;

pub const CSSM_LIST_TYPE_PTR = uint32;

pub const anon3751 = u32;
pub const anon3751_CSSM_LIST_TYPE_UNKNOWN: u32 = 0;
pub const anon3751_CSSM_LIST_TYPE_CUSTOM: u32 = 1;
pub const anon3751_CSSM_LIST_TYPE_SEXPR: u32 = 2;

pub const cssm_list_element = extern struct {
    pub const anon3945 = extern union {
        Sublist: CSSM_LIST,
        Word: Asn1Item,
    };

    NextElement: cssm_list_element,
    WordID: CSSM_WORDID_TYPE,
    ElementType: CSSM_LIST_ELEMENT_TYPE,
    Element: cssm_list_element.anon3945,
};

pub const CSSM_LIST_ELEMENT_PTR = cssm_list_element;

pub const cssm_list = extern struct {
    ListType: CSSM_LIST_TYPE,
    Head: CSSM_LIST_ELEMENT_PTR,
    Tail: CSSM_LIST_ELEMENT_PTR,
};

pub const CSSM_LIST = cssm_list;

pub const CSSM_LIST_PTR = ?*cssm_list;

pub const CSSM_LIST_ELEMENT = cssm_list_element;

pub const CSSM_TUPLE = extern struct {
    Issuer: CSSM_LIST,
    Subject: CSSM_LIST,
    Delegate: CSSM_BOOL,
    AuthorizationTag: CSSM_LIST,
    ValidityPeriod: CSSM_LIST,
};

pub const CSSM_TUPLE_PTR = ?*CSSM_TUPLE;

pub const cssm_tuplegroup = extern struct {
    NumberOfTuples: uint32,
    Tuples: CSSM_TUPLE_PTR,
};

pub const CSSM_TUPLEGROUP = cssm_tuplegroup;

pub const CSSM_TUPLEGROUP_PTR = ?*cssm_tuplegroup;

pub const CSSM_SAMPLE_TYPE = CSSM_WORDID_TYPE;

pub const anon4141 = u32;
pub const anon4141_CSSM_SAMPLE_TYPE_PASSWORD: u32 = 79;
pub const anon4141_CSSM_SAMPLE_TYPE_HASHED_PASSWORD: u32 = 43;
pub const anon4141_CSSM_SAMPLE_TYPE_PROTECTED_PASSWORD: u32 = 87;
pub const anon4141_CSSM_SAMPLE_TYPE_PROMPTED_PASSWORD: u32 = 84;
pub const anon4141_CSSM_SAMPLE_TYPE_SIGNED_NONCE: u32 = 117;
pub const anon4141_CSSM_SAMPLE_TYPE_SIGNED_SECRET: u32 = 118;
pub const anon4141_CSSM_SAMPLE_TYPE_BIOMETRIC: u32 = 8;
pub const anon4141_CSSM_SAMPLE_TYPE_PROTECTED_BIOMETRIC: u32 = 86;
pub const anon4141_CSSM_SAMPLE_TYPE_PROMPTED_BIOMETRIC: u32 = 83;
pub const anon4141_CSSM_SAMPLE_TYPE_THRESHOLD: u32 = 123;

pub const cssm_sample = extern struct {
    TypedSample: CSSM_LIST,
    Verifier: CSSM_SUBSERVICE_UID,
};

pub const CSSM_SAMPLE = cssm_sample;

pub const CSSM_SAMPLE_PTR = ?*cssm_sample;

pub const cssm_samplegroup = extern struct {
    NumberOfSamples: uint32,
    Samples: CSSM_SAMPLE,
};

pub const CSSM_SAMPLEGROUP = cssm_samplegroup;

pub const CSSM_SAMPLEGROUP_PTR = ?*cssm_samplegroup;

pub const CSSM_MALLOC = ?*const fn (CSSM_SIZE, ?*anyopaque) callconv(.C) ?*anyopaque;

pub const CSSM_FREE = ?*const fn (?*anyopaque, ?*anyopaque) callconv(.C) void;

pub const CSSM_REALLOC = ?*const fn (?*anyopaque, CSSM_SIZE, ?*anyopaque) callconv(.C) ?*anyopaque;

pub const CSSM_CALLOC = ?*const fn (uint32, CSSM_SIZE, ?*anyopaque) callconv(.C) ?*anyopaque;

pub const cssm_memory_funcs = extern struct {
    malloc_func: CSSM_MALLOC,
    free_func: CSSM_FREE,
    realloc_func: CSSM_REALLOC,
    calloc_func: CSSM_CALLOC,
    AllocRef: ?*anyopaque,
};

pub const CSSM_MEMORY_FUNCS = cssm_memory_funcs;

pub const CSSM_MEMORY_FUNCS_PTR = ?*cssm_memory_funcs;

pub const CSSM_API_MEMORY_FUNCS = CSSM_MEMORY_FUNCS;

pub const CSSM_API_MEMORY_FUNCS_PTR = CSSM_API_MEMORY_FUNCS;

pub const CSSM_CHALLENGE_CALLBACK = CSSM_RETURN;

pub const CSSM_CERT_TYPE = uint32;

pub const CSSM_CERT_TYPE_PTR = uint32;

pub const anon4731 = u32;
pub const anon4731_CSSM_CERT_UNKNOWN: u32 = 0;
pub const anon4731_CSSM_CERT_X_509v1: u32 = 1;
pub const anon4731_CSSM_CERT_X_509v2: u32 = 2;
pub const anon4731_CSSM_CERT_X_509v3: u32 = 3;
pub const anon4731_CSSM_CERT_PGP: u32 = 4;
pub const anon4731_CSSM_CERT_SPKI: u32 = 5;
pub const anon4731_CSSM_CERT_SDSIv1: u32 = 6;
pub const anon4731_CSSM_CERT_Intel: u32 = 8;
pub const anon4731_CSSM_CERT_X_509_ATTRIBUTE: u32 = 9;
pub const anon4731_CSSM_CERT_X9_ATTRIBUTE: u32 = 10;
pub const anon4731_CSSM_CERT_TUPLE: u32 = 11;
pub const anon4731_CSSM_CERT_ACL_ENTRY: u32 = 12;
pub const anon4731_CSSM_CERT_MULTIPLE: u32 = 32766;
pub const anon4731_CSSM_CERT_LAST: u32 = 32767;
pub const anon4731_CSSM_CL_CUSTOM_CERT_TYPE: u32 = 32768;

pub const CSSM_CERT_ENCODING = uint32;

pub const CSSM_CERT_ENCODING_PTR = uint32;

pub const anon4951 = u32;
pub const anon4951_CSSM_CERT_ENCODING_UNKNOWN: u32 = 0;
pub const anon4951_CSSM_CERT_ENCODING_CUSTOM: u32 = 1;
pub const anon4951_CSSM_CERT_ENCODING_BER: u32 = 2;
pub const anon4951_CSSM_CERT_ENCODING_DER: u32 = 3;
pub const anon4951_CSSM_CERT_ENCODING_NDR: u32 = 4;
pub const anon4951_CSSM_CERT_ENCODING_SEXPR: u32 = 5;
pub const anon4951_CSSM_CERT_ENCODING_PGP: u32 = 6;
pub const anon4951_CSSM_CERT_ENCODING_MULTIPLE: u32 = 32766;
pub const anon4951_CSSM_CERT_ENCODING_LAST: u32 = 32767;
pub const anon4951_CSSM_CL_CUSTOM_CERT_ENCODING: u32 = 32768;

pub const cssm_encoded_cert = extern struct {
    CertType: CSSM_CERT_TYPE,
    CertEncoding: CSSM_CERT_ENCODING,
    CertBlob: Asn1Item,
};

pub const CSSM_ENCODED_CERT = cssm_encoded_cert;

pub const CSSM_ENCODED_CERT_PTR = ?*cssm_encoded_cert;

pub const CSSM_CERT_PARSE_FORMAT = uint32;

pub const CSSM_CERT_PARSE_FORMAT_PTR = uint32;

pub const anon5181 = u32;
pub const anon5181_CSSM_CERT_PARSE_FORMAT_NONE: u32 = 0;
pub const anon5181_CSSM_CERT_PARSE_FORMAT_CUSTOM: u32 = 1;
pub const anon5181_CSSM_CERT_PARSE_FORMAT_SEXPR: u32 = 2;
pub const anon5181_CSSM_CERT_PARSE_FORMAT_COMPLEX: u32 = 3;
pub const anon5181_CSSM_CERT_PARSE_FORMAT_OID_NAMED: u32 = 4;
pub const anon5181_CSSM_CERT_PARSE_FORMAT_TUPLE: u32 = 5;
pub const anon5181_CSSM_CERT_PARSE_FORMAT_MULTIPLE: u32 = 32766;
pub const anon5181_CSSM_CERT_PARSE_FORMAT_LAST: u32 = 32767;
pub const anon5181_CSSM_CL_CUSTOM_CERT_PARSE_FORMAT: u32 = 32768;

pub const cssm_parsed_cert = extern struct {
    CertType: CSSM_CERT_TYPE,
    ParsedCertFormat: CSSM_CERT_PARSE_FORMAT,
    ParsedCert: ?*anyopaque,
};

pub const CSSM_PARSED_CERT = cssm_parsed_cert;

pub const CSSM_PARSED_CERT_PTR = ?*cssm_parsed_cert;

pub const cssm_cert_pair = extern struct {
    EncodedCert: CSSM_ENCODED_CERT,
    ParsedCert: CSSM_PARSED_CERT,
};

pub const CSSM_CERT_PAIR = cssm_cert_pair;

pub const CSSM_CERT_PAIR_PTR = ?*cssm_cert_pair;

pub const CSSM_CERTGROUP_TYPE = uint32;

pub const CSSM_CERTGROUP_TYPE_PTR = uint32;

pub const anon5491 = u32;
pub const anon5491_CSSM_CERTGROUP_DATA: u32 = 0;
pub const anon5491_CSSM_CERTGROUP_ENCODED_CERT: u32 = 1;
pub const anon5491_CSSM_CERTGROUP_PARSED_CERT: u32 = 2;
pub const anon5491_CSSM_CERTGROUP_CERT_PAIR: u32 = 3;

pub const cssm_certgroup = extern struct {
    pub const anon5605 = extern union {
        CertList: CSSM_DATA_PTR,
        EncodedCertList: CSSM_ENCODED_CERT_PTR,
        ParsedCertList: CSSM_PARSED_CERT_PTR,
        PairCertList: CSSM_CERT_PAIR_PTR,
    };

    CertType: CSSM_CERT_TYPE,
    CertEncoding: CSSM_CERT_ENCODING,
    NumCerts: uint32,
    GroupList: cssm_certgroup.anon5605,
    CertGroupType: CSSM_CERTGROUP_TYPE,
    Reserved: ?*anyopaque,
};

pub const CSSM_CERTGROUP = cssm_certgroup;

pub const CSSM_CERTGROUP_PTR = ?*cssm_certgroup;

pub const cssm_base_certs = extern struct {
    TPHandle: CSSM_TP_HANDLE,
    CLHandle: CSSM_CL_HANDLE,
    Certs: CSSM_CERTGROUP,
};

pub const CSSM_BASE_CERTS = cssm_base_certs;

pub const CSSM_BASE_CERTS_PTR = ?*cssm_base_certs;

pub const cssm_access_credentials = extern struct {
    EntryTag: CSSM_STRING,
    BaseCerts: CSSM_BASE_CERTS,
    Samples: CSSM_SAMPLEGROUP,
    Callback: CSSM_CHALLENGE_CALLBACK,
    CallerCtx: ?*anyopaque,
};

pub const CSSM_ACCESS_CREDENTIALS = cssm_access_credentials;

pub const CSSM_ACCESS_CREDENTIALS_PTR = ?*cssm_access_credentials;

pub const CSSM_ACL_SUBJECT_TYPE = sint32;

pub const anon5891 = u32;
pub const anon5891_CSSM_ACL_SUBJECT_TYPE_ANY: u32 = 1;
pub const anon5891_CSSM_ACL_SUBJECT_TYPE_THRESHOLD: u32 = 123;
pub const anon5891_CSSM_ACL_SUBJECT_TYPE_PASSWORD: u32 = 79;
pub const anon5891_CSSM_ACL_SUBJECT_TYPE_PROTECTED_PASSWORD: u32 = 87;
pub const anon5891_CSSM_ACL_SUBJECT_TYPE_PROMPTED_PASSWORD: u32 = 84;
pub const anon5891_CSSM_ACL_SUBJECT_TYPE_PUBLIC_KEY: u32 = 89;
pub const anon5891_CSSM_ACL_SUBJECT_TYPE_HASHED_SUBJECT: u32 = 44;
pub const anon5891_CSSM_ACL_SUBJECT_TYPE_BIOMETRIC: u32 = 8;
pub const anon5891_CSSM_ACL_SUBJECT_TYPE_PROTECTED_BIOMETRIC: u32 = 86;
pub const anon5891_CSSM_ACL_SUBJECT_TYPE_PROMPTED_BIOMETRIC: u32 = 83;
pub const anon5891_CSSM_ACL_SUBJECT_TYPE_LOGIN_NAME: u32 = 58;
pub const anon5891_CSSM_ACL_SUBJECT_TYPE_EXT_PAM_NAME: u32 = 78;

pub const CSSM_ACL_AUTHORIZATION_TAG = sint32;

pub const anon6061 = u32;
pub const anon6061_CSSM_ACL_AUTHORIZATION_TAG_VENDOR_DEFINED_START: u32 = 65536;
pub const anon6061_CSSM_ACL_AUTHORIZATION_ANY: u32 = 1;
pub const anon6061_CSSM_ACL_AUTHORIZATION_LOGIN: u32 = 57;
pub const anon6061_CSSM_ACL_AUTHORIZATION_GENKEY: u32 = 41;
pub const anon6061_CSSM_ACL_AUTHORIZATION_DELETE: u32 = 25;
pub const anon6061_CSSM_ACL_AUTHORIZATION_EXPORT_WRAPPED: u32 = 38;
pub const anon6061_CSSM_ACL_AUTHORIZATION_EXPORT_CLEAR: u32 = 37;
pub const anon6061_CSSM_ACL_AUTHORIZATION_IMPORT_WRAPPED: u32 = 48;
pub const anon6061_CSSM_ACL_AUTHORIZATION_IMPORT_CLEAR: u32 = 47;
pub const anon6061_CSSM_ACL_AUTHORIZATION_SIGN: u32 = 115;
pub const anon6061_CSSM_ACL_AUTHORIZATION_ENCRYPT: u32 = 35;
pub const anon6061_CSSM_ACL_AUTHORIZATION_DECRYPT: u32 = 24;
pub const anon6061_CSSM_ACL_AUTHORIZATION_MAC: u32 = 59;
pub const anon6061_CSSM_ACL_AUTHORIZATION_DERIVE: u32 = 28;
pub const anon6061_CSSM_ACL_AUTHORIZATION_DBS_CREATE: u32 = 22;
pub const anon6061_CSSM_ACL_AUTHORIZATION_DBS_DELETE: u32 = 23;
pub const anon6061_CSSM_ACL_AUTHORIZATION_DB_READ: u32 = 21;
pub const anon6061_CSSM_ACL_AUTHORIZATION_DB_INSERT: u32 = 19;
pub const anon6061_CSSM_ACL_AUTHORIZATION_DB_MODIFY: u32 = 20;
pub const anon6061_CSSM_ACL_AUTHORIZATION_DB_DELETE: u32 = 17;

pub const cssm_authorizationgroup = extern struct {
    NumberOfAuthTags: uint32,
    AuthTags: CSSM_ACL_AUTHORIZATION_TAG,
};

pub const CSSM_AUTHORIZATIONGROUP = cssm_authorizationgroup;

pub const CSSM_AUTHORIZATIONGROUP_PTR = ?*cssm_authorizationgroup;

pub const cssm_acl_validity_period = extern struct {
    StartDate: Asn1Item,
    EndDate: Asn1Item,
};

pub const CSSM_ACL_VALIDITY_PERIOD = cssm_acl_validity_period;

pub const CSSM_ACL_VALIDITY_PERIOD_PTR = ?*cssm_acl_validity_period;

pub const cssm_acl_entry_prototype = extern struct {
    TypedSubject: CSSM_LIST,
    Delegate: CSSM_BOOL,
    Authorization: CSSM_AUTHORIZATIONGROUP,
    TimeRange: CSSM_ACL_VALIDITY_PERIOD,
    EntryTag: CSSM_STRING,
};

pub const CSSM_ACL_ENTRY_PROTOTYPE = cssm_acl_entry_prototype;

pub const CSSM_ACL_ENTRY_PROTOTYPE_PTR = ?*cssm_acl_entry_prototype;

pub const cssm_acl_owner_prototype = extern struct {
    TypedSubject: CSSM_LIST,
    Delegate: CSSM_BOOL,
};

pub const CSSM_ACL_OWNER_PROTOTYPE = cssm_acl_owner_prototype;

pub const CSSM_ACL_OWNER_PROTOTYPE_PTR = ?*cssm_acl_owner_prototype;

pub const CSSM_ACL_SUBJECT_CALLBACK = CSSM_RETURN;

pub const cssm_acl_entry_input = extern struct {
    Prototype: CSSM_ACL_ENTRY_PROTOTYPE,
    Callback: CSSM_ACL_SUBJECT_CALLBACK,
    CallerContext: ?*anyopaque,
};

pub const CSSM_ACL_ENTRY_INPUT = cssm_acl_entry_input;

pub const CSSM_ACL_ENTRY_INPUT_PTR = ?*cssm_acl_entry_input;

pub const cssm_resource_control_context = extern struct {
    AccessCred: CSSM_ACCESS_CREDENTIALS_PTR,
    InitialAclEntry: CSSM_ACL_ENTRY_INPUT,
};

pub const CSSM_RESOURCE_CONTROL_CONTEXT = cssm_resource_control_context;

pub const CSSM_RESOURCE_CONTROL_CONTEXT_PTR = ?*cssm_resource_control_context;

pub const CSSM_ACL_HANDLE = CSSM_HANDLE;

pub const cssm_acl_entry_info = extern struct {
    EntryPublicInfo: CSSM_ACL_ENTRY_PROTOTYPE,
    EntryHandle: CSSM_ACL_HANDLE,
};

pub const CSSM_ACL_ENTRY_INFO = cssm_acl_entry_info;

pub const CSSM_ACL_ENTRY_INFO_PTR = ?*cssm_acl_entry_info;

pub const CSSM_ACL_EDIT_MODE = uint32;

pub const anon6831 = u32;
pub const anon6831_CSSM_ACL_EDIT_MODE_ADD: u32 = 1;
pub const anon6831_CSSM_ACL_EDIT_MODE_DELETE: u32 = 2;
pub const anon6831_CSSM_ACL_EDIT_MODE_REPLACE: u32 = 3;

pub const cssm_acl_edit = extern struct {
    EditMode: CSSM_ACL_EDIT_MODE,
    OldEntryHandle: CSSM_ACL_HANDLE,
    NewEntry: CSSM_ACL_ENTRY_INPUT,
};

pub const CSSM_ACL_EDIT = cssm_acl_edit;

pub const CSSM_ACL_EDIT_PTR = ?*cssm_acl_edit;

pub const CSSM_PROC_ADDR = ?*const fn () callconv(.C) void;

pub const CSSM_PROC_ADDR_PTR = CSSM_PROC_ADDR;

pub const cssm_func_name_addr = extern struct {
    Name: CSSM_STRING,
    Address: CSSM_PROC_ADDR,
};

pub const CSSM_FUNC_NAME_ADDR = cssm_func_name_addr;

pub const CSSM_FUNC_NAME_ADDR_PTR = ?*cssm_func_name_addr;

pub const cssm_date = extern struct {
    Year: uint8,
    Month: uint8,
    Day: uint8,
};

pub const CSSM_DATE = cssm_date;

pub const CSSM_DATE_PTR = ?*cssm_date;

pub const cssm_range = extern struct {
    Min: uint32,
    Max: uint32,
};

pub const CSSM_RANGE = cssm_range;

pub const CSSM_RANGE_PTR = ?*cssm_range;

pub const cssm_query_size_data = extern struct {
    SizeInputBlock: uint32,
    SizeOutputBlock: uint32,
};

pub const CSSM_QUERY_SIZE_DATA = cssm_query_size_data;

pub const CSSM_QUERY_SIZE_DATA_PTR = ?*cssm_query_size_data;

pub const CSSM_HEADERVERSION = uint32;

pub const anon7271 = u32;
pub const anon7271_CSSM_KEYHEADER_VERSION: u32 = 2;

pub const cssm_key_size = extern struct {
    LogicalKeySizeInBits: uint32,
    EffectiveKeySizeInBits: uint32,
};

pub const CSSM_KEY_SIZE = cssm_key_size;

pub const CSSM_KEY_SIZE_PTR = ?*cssm_key_size;

pub const CSSM_KEYBLOB_TYPE = uint32;

pub const anon7371 = u32;
pub const anon7371_CSSM_KEYBLOB_RAW: u32 = 0;
pub const anon7371_CSSM_KEYBLOB_REFERENCE: u32 = 2;
pub const anon7371_CSSM_KEYBLOB_WRAPPED: u32 = 3;
pub const anon7371_CSSM_KEYBLOB_OTHER: u32 = -1;

pub const CSSM_KEYBLOB_FORMAT = uint32;

pub const anon7451 = u32;
pub const anon7451_CSSM_KEYBLOB_RAW_FORMAT_NONE: u32 = 0;
pub const anon7451_CSSM_KEYBLOB_RAW_FORMAT_PKCS1: u32 = 1;
pub const anon7451_CSSM_KEYBLOB_RAW_FORMAT_PKCS3: u32 = 2;
pub const anon7451_CSSM_KEYBLOB_RAW_FORMAT_MSCAPI: u32 = 3;
pub const anon7451_CSSM_KEYBLOB_RAW_FORMAT_PGP: u32 = 4;
pub const anon7451_CSSM_KEYBLOB_RAW_FORMAT_FIPS186: u32 = 5;
pub const anon7451_CSSM_KEYBLOB_RAW_FORMAT_BSAFE: u32 = 6;
pub const anon7451_CSSM_KEYBLOB_RAW_FORMAT_CCA: u32 = 9;
pub const anon7451_CSSM_KEYBLOB_RAW_FORMAT_PKCS8: u32 = 10;
pub const anon7451_CSSM_KEYBLOB_RAW_FORMAT_SPKI: u32 = 11;
pub const anon7451_CSSM_KEYBLOB_RAW_FORMAT_OCTET_STRING: u32 = 12;
pub const anon7451_CSSM_KEYBLOB_RAW_FORMAT_OTHER: u32 = -1;

pub const anon7611 = u32;
pub const anon7611_CSSM_KEYBLOB_WRAPPED_FORMAT_NONE: u32 = 0;
pub const anon7611_CSSM_KEYBLOB_WRAPPED_FORMAT_PKCS8: u32 = 1;
pub const anon7611_CSSM_KEYBLOB_WRAPPED_FORMAT_PKCS7: u32 = 2;
pub const anon7611_CSSM_KEYBLOB_WRAPPED_FORMAT_MSCAPI: u32 = 3;
pub const anon7611_CSSM_KEYBLOB_WRAPPED_FORMAT_OTHER: u32 = -1;

pub const anon7701 = u32;
pub const anon7701_CSSM_KEYBLOB_REF_FORMAT_INTEGER: u32 = 0;
pub const anon7701_CSSM_KEYBLOB_REF_FORMAT_STRING: u32 = 1;
pub const anon7701_CSSM_KEYBLOB_REF_FORMAT_SPKI: u32 = 2;
pub const anon7701_CSSM_KEYBLOB_REF_FORMAT_OTHER: u32 = -1;
pub const anon7701_CSSM_KEYBLOB_WRAPPED_FORMAT_APPLE_CUSTOM: u32 = 100;
pub const anon7701_CSSM_KEYBLOB_WRAPPED_FORMAT_OPENSSL: u32 = 101;
pub const anon7701_CSSM_KEYBLOB_WRAPPED_FORMAT_OPENSSH1: u32 = 102;

pub const CSSM_KEYCLASS = uint32;

pub const anon7801 = u32;
pub const anon7801_CSSM_KEYCLASS_PUBLIC_KEY: u32 = 0;
pub const anon7801_CSSM_KEYCLASS_PRIVATE_KEY: u32 = 1;
pub const anon7801_CSSM_KEYCLASS_SESSION_KEY: u32 = 2;
pub const anon7801_CSSM_KEYCLASS_SECRET_PART: u32 = 3;
pub const anon7801_CSSM_KEYCLASS_OTHER: u32 = -1;

pub const CSSM_KEYATTR_FLAGS = uint32;

pub const anon7891 = u32;
pub const anon7891_CSSM_KEYATTR_RETURN_DEFAULT: u32 = 0;
pub const anon7891_CSSM_KEYATTR_RETURN_DATA: u32 = 268435456;
pub const anon7891_CSSM_KEYATTR_RETURN_REF: u32 = 536870912;
pub const anon7891_CSSM_KEYATTR_RETURN_NONE: u32 = 1073741824;
pub const anon7891_CSSM_KEYATTR_PERMANENT: u32 = 1;
pub const anon7891_CSSM_KEYATTR_PRIVATE: u32 = 2;
pub const anon7891_CSSM_KEYATTR_MODIFIABLE: u32 = 4;
pub const anon7891_CSSM_KEYATTR_SENSITIVE: u32 = 8;
pub const anon7891_CSSM_KEYATTR_EXTRACTABLE: u32 = 32;
pub const anon7891_CSSM_KEYATTR_ALWAYS_SENSITIVE: u32 = 16;
pub const anon7891_CSSM_KEYATTR_NEVER_EXTRACTABLE: u32 = 64;

pub const CSSM_KEYUSE = uint32;

pub const anon8071 = u32;
pub const anon8071_CSSM_KEYUSE_ANY: u32 = -2147483648;
pub const anon8071_CSSM_KEYUSE_ENCRYPT: u32 = 1;
pub const anon8071_CSSM_KEYUSE_DECRYPT: u32 = 2;
pub const anon8071_CSSM_KEYUSE_SIGN: u32 = 4;
pub const anon8071_CSSM_KEYUSE_VERIFY: u32 = 8;
pub const anon8071_CSSM_KEYUSE_SIGN_RECOVER: u32 = 16;
pub const anon8071_CSSM_KEYUSE_VERIFY_RECOVER: u32 = 32;
pub const anon8071_CSSM_KEYUSE_WRAP: u32 = 64;
pub const anon8071_CSSM_KEYUSE_UNWRAP: u32 = 128;
pub const anon8071_CSSM_KEYUSE_DERIVE: u32 = 256;

pub const CSSM_ALGORITHMS = uint32;

pub const anon8211 = u32;
pub const anon8211_CSSM_ALGID_NONE: u32 = 0;
pub const anon8211_CSSM_ALGID_CUSTOM: u32 = 1;
pub const anon8211_CSSM_ALGID_DH: u32 = 2;
pub const anon8211_CSSM_ALGID_PH: u32 = 3;
pub const anon8211_CSSM_ALGID_KEA: u32 = 4;
pub const anon8211_CSSM_ALGID_MD2: u32 = 5;
pub const anon8211_CSSM_ALGID_MD4: u32 = 6;
pub const anon8211_CSSM_ALGID_MD5: u32 = 7;
pub const anon8211_CSSM_ALGID_SHA1: u32 = 8;
pub const anon8211_CSSM_ALGID_NHASH: u32 = 9;
pub const anon8211_CSSM_ALGID_HAVAL: u32 = 10;
pub const anon8211_CSSM_ALGID_RIPEMD: u32 = 11;
pub const anon8211_CSSM_ALGID_IBCHASH: u32 = 12;
pub const anon8211_CSSM_ALGID_RIPEMAC: u32 = 13;
pub const anon8211_CSSM_ALGID_DES: u32 = 14;
pub const anon8211_CSSM_ALGID_DESX: u32 = 15;
pub const anon8211_CSSM_ALGID_RDES: u32 = 16;
pub const anon8211_CSSM_ALGID_3DES_3KEY_EDE: u32 = 17;
pub const anon8211_CSSM_ALGID_3DES_2KEY_EDE: u32 = 18;
pub const anon8211_CSSM_ALGID_3DES_1KEY_EEE: u32 = 19;
pub const anon8211_CSSM_ALGID_3DES_3KEY: u32 = 17;
pub const anon8211_CSSM_ALGID_3DES_3KEY_EEE: u32 = 20;
pub const anon8211_CSSM_ALGID_3DES_2KEY: u32 = 18;
pub const anon8211_CSSM_ALGID_3DES_2KEY_EEE: u32 = 21;
pub const anon8211_CSSM_ALGID_3DES_1KEY: u32 = 20;
pub const anon8211_CSSM_ALGID_IDEA: u32 = 22;
pub const anon8211_CSSM_ALGID_RC2: u32 = 23;
pub const anon8211_CSSM_ALGID_RC5: u32 = 24;
pub const anon8211_CSSM_ALGID_RC4: u32 = 25;
pub const anon8211_CSSM_ALGID_SEAL: u32 = 26;
pub const anon8211_CSSM_ALGID_CAST: u32 = 27;
pub const anon8211_CSSM_ALGID_BLOWFISH: u32 = 28;
pub const anon8211_CSSM_ALGID_SKIPJACK: u32 = 29;
pub const anon8211_CSSM_ALGID_LUCIFER: u32 = 30;
pub const anon8211_CSSM_ALGID_MADRYGA: u32 = 31;
pub const anon8211_CSSM_ALGID_FEAL: u32 = 32;
pub const anon8211_CSSM_ALGID_REDOC: u32 = 33;
pub const anon8211_CSSM_ALGID_REDOC3: u32 = 34;
pub const anon8211_CSSM_ALGID_LOKI: u32 = 35;
pub const anon8211_CSSM_ALGID_KHUFU: u32 = 36;
pub const anon8211_CSSM_ALGID_KHAFRE: u32 = 37;
pub const anon8211_CSSM_ALGID_MMB: u32 = 38;
pub const anon8211_CSSM_ALGID_GOST: u32 = 39;
pub const anon8211_CSSM_ALGID_SAFER: u32 = 40;
pub const anon8211_CSSM_ALGID_CRAB: u32 = 41;
pub const anon8211_CSSM_ALGID_RSA: u32 = 42;
pub const anon8211_CSSM_ALGID_DSA: u32 = 43;
pub const anon8211_CSSM_ALGID_MD5WithRSA: u32 = 44;
pub const anon8211_CSSM_ALGID_MD2WithRSA: u32 = 45;
pub const anon8211_CSSM_ALGID_ElGamal: u32 = 46;
pub const anon8211_CSSM_ALGID_MD2Random: u32 = 47;
pub const anon8211_CSSM_ALGID_MD5Random: u32 = 48;
pub const anon8211_CSSM_ALGID_SHARandom: u32 = 49;
pub const anon8211_CSSM_ALGID_DESRandom: u32 = 50;
pub const anon8211_CSSM_ALGID_SHA1WithRSA: u32 = 51;
pub const anon8211_CSSM_ALGID_CDMF: u32 = 52;
pub const anon8211_CSSM_ALGID_CAST3: u32 = 53;
pub const anon8211_CSSM_ALGID_CAST5: u32 = 54;
pub const anon8211_CSSM_ALGID_GenericSecret: u32 = 55;
pub const anon8211_CSSM_ALGID_ConcatBaseAndKey: u32 = 56;
pub const anon8211_CSSM_ALGID_ConcatKeyAndBase: u32 = 57;
pub const anon8211_CSSM_ALGID_ConcatBaseAndData: u32 = 58;
pub const anon8211_CSSM_ALGID_ConcatDataAndBase: u32 = 59;
pub const anon8211_CSSM_ALGID_XORBaseAndData: u32 = 60;
pub const anon8211_CSSM_ALGID_ExtractFromKey: u32 = 61;
pub const anon8211_CSSM_ALGID_SSL3PrePrimaryGen: u32 = 62;
pub const anon8211_CSSM_ALGID_SSL3PreMasterGen: u32 = 62;
pub const anon8211_CSSM_ALGID_SSL3PrimaryDerive: u32 = 63;
pub const anon8211_CSSM_ALGID_SSL3MasterDerive: u32 = 63;
pub const anon8211_CSSM_ALGID_SSL3KeyAndMacDerive: u32 = 64;
pub const anon8211_CSSM_ALGID_SSL3MD5_MAC: u32 = 65;
pub const anon8211_CSSM_ALGID_SSL3SHA1_MAC: u32 = 66;
pub const anon8211_CSSM_ALGID_PKCS5_PBKDF1_MD5: u32 = 67;
pub const anon8211_CSSM_ALGID_PKCS5_PBKDF1_MD2: u32 = 68;
pub const anon8211_CSSM_ALGID_PKCS5_PBKDF1_SHA1: u32 = 69;
pub const anon8211_CSSM_ALGID_WrapLynks: u32 = 70;
pub const anon8211_CSSM_ALGID_WrapSET_OAEP: u32 = 71;
pub const anon8211_CSSM_ALGID_BATON: u32 = 72;
pub const anon8211_CSSM_ALGID_ECDSA: u32 = 73;
pub const anon8211_CSSM_ALGID_MAYFLY: u32 = 74;
pub const anon8211_CSSM_ALGID_JUNIPER: u32 = 75;
pub const anon8211_CSSM_ALGID_FASTHASH: u32 = 76;
pub const anon8211_CSSM_ALGID_3DES: u32 = 77;
pub const anon8211_CSSM_ALGID_SSL3MD5: u32 = 78;
pub const anon8211_CSSM_ALGID_SSL3SHA1: u32 = 79;
pub const anon8211_CSSM_ALGID_FortezzaTimestamp: u32 = 80;
pub const anon8211_CSSM_ALGID_SHA1WithDSA: u32 = 81;
pub const anon8211_CSSM_ALGID_SHA1WithECDSA: u32 = 82;
pub const anon8211_CSSM_ALGID_DSA_BSAFE: u32 = 83;
pub const anon8211_CSSM_ALGID_ECDH: u32 = 84;
pub const anon8211_CSSM_ALGID_ECMQV: u32 = 85;
pub const anon8211_CSSM_ALGID_PKCS12_SHA1_PBE: u32 = 86;
pub const anon8211_CSSM_ALGID_ECNRA: u32 = 87;
pub const anon8211_CSSM_ALGID_SHA1WithECNRA: u32 = 88;
pub const anon8211_CSSM_ALGID_ECES: u32 = 89;
pub const anon8211_CSSM_ALGID_ECAES: u32 = 90;
pub const anon8211_CSSM_ALGID_SHA1HMAC: u32 = 91;
pub const anon8211_CSSM_ALGID_FIPS186Random: u32 = 92;
pub const anon8211_CSSM_ALGID_ECC: u32 = 93;
pub const anon8211_CSSM_ALGID_MQV: u32 = 94;
pub const anon8211_CSSM_ALGID_NRA: u32 = 95;
pub const anon8211_CSSM_ALGID_IntelPlatformRandom: u32 = 96;
pub const anon8211_CSSM_ALGID_UTC: u32 = 97;
pub const anon8211_CSSM_ALGID_HAVAL3: u32 = 98;
pub const anon8211_CSSM_ALGID_HAVAL4: u32 = 99;
pub const anon8211_CSSM_ALGID_HAVAL5: u32 = 100;
pub const anon8211_CSSM_ALGID_TIGER: u32 = 101;
pub const anon8211_CSSM_ALGID_MD5HMAC: u32 = 102;
pub const anon8211_CSSM_ALGID_PKCS5_PBKDF2: u32 = 103;
pub const anon8211_CSSM_ALGID_RUNNING_COUNTER: u32 = 104;
pub const anon8211_CSSM_ALGID_LAST: u32 = 2147483647;
pub const anon8211_CSSM_ALGID_VENDOR_DEFINED: u32 = -2147483648;

pub const CSSM_ENCRYPT_MODE = uint32;

pub const anon9401 = u32;
pub const anon9401_CSSM_ALGMODE_NONE: u32 = 0;
pub const anon9401_CSSM_ALGMODE_CUSTOM: u32 = 1;
pub const anon9401_CSSM_ALGMODE_ECB: u32 = 2;
pub const anon9401_CSSM_ALGMODE_ECBPad: u32 = 3;
pub const anon9401_CSSM_ALGMODE_CBC: u32 = 4;
pub const anon9401_CSSM_ALGMODE_CBC_IV8: u32 = 5;
pub const anon9401_CSSM_ALGMODE_CBCPadIV8: u32 = 6;
pub const anon9401_CSSM_ALGMODE_CFB: u32 = 7;
pub const anon9401_CSSM_ALGMODE_CFB_IV8: u32 = 8;
pub const anon9401_CSSM_ALGMODE_CFBPadIV8: u32 = 9;
pub const anon9401_CSSM_ALGMODE_OFB: u32 = 10;
pub const anon9401_CSSM_ALGMODE_OFB_IV8: u32 = 11;
pub const anon9401_CSSM_ALGMODE_OFBPadIV8: u32 = 12;
pub const anon9401_CSSM_ALGMODE_COUNTER: u32 = 13;
pub const anon9401_CSSM_ALGMODE_BC: u32 = 14;
pub const anon9401_CSSM_ALGMODE_PCBC: u32 = 15;
pub const anon9401_CSSM_ALGMODE_CBCC: u32 = 16;
pub const anon9401_CSSM_ALGMODE_OFBNLF: u32 = 17;
pub const anon9401_CSSM_ALGMODE_PBC: u32 = 18;
pub const anon9401_CSSM_ALGMODE_PFB: u32 = 19;
pub const anon9401_CSSM_ALGMODE_CBCPD: u32 = 20;
pub const anon9401_CSSM_ALGMODE_PUBLIC_KEY: u32 = 21;
pub const anon9401_CSSM_ALGMODE_PRIVATE_KEY: u32 = 22;
pub const anon9401_CSSM_ALGMODE_SHUFFLE: u32 = 23;
pub const anon9401_CSSM_ALGMODE_ECB64: u32 = 24;
pub const anon9401_CSSM_ALGMODE_CBC64: u32 = 25;
pub const anon9401_CSSM_ALGMODE_OFB64: u32 = 26;
pub const anon9401_CSSM_ALGMODE_CFB32: u32 = 28;
pub const anon9401_CSSM_ALGMODE_CFB16: u32 = 29;
pub const anon9401_CSSM_ALGMODE_CFB8: u32 = 30;
pub const anon9401_CSSM_ALGMODE_WRAP: u32 = 31;
pub const anon9401_CSSM_ALGMODE_PRIVATE_WRAP: u32 = 32;
pub const anon9401_CSSM_ALGMODE_RELAYX: u32 = 33;
pub const anon9401_CSSM_ALGMODE_ECB128: u32 = 34;
pub const anon9401_CSSM_ALGMODE_ECB96: u32 = 35;
pub const anon9401_CSSM_ALGMODE_CBC128: u32 = 36;
pub const anon9401_CSSM_ALGMODE_OAEP_HASH: u32 = 37;
pub const anon9401_CSSM_ALGMODE_PKCS1_EME_V15: u32 = 38;
pub const anon9401_CSSM_ALGMODE_PKCS1_EME_OAEP: u32 = 39;
pub const anon9401_CSSM_ALGMODE_PKCS1_EMSA_V15: u32 = 40;
pub const anon9401_CSSM_ALGMODE_ISO_9796: u32 = 41;
pub const anon9401_CSSM_ALGMODE_X9_31: u32 = 42;
pub const anon9401_CSSM_ALGMODE_LAST: u32 = 2147483647;
pub const anon9401_CSSM_ALGMODE_VENDOR_DEFINED: u32 = -2147483648;

pub const cssm_keyheader = extern struct {
    HeaderVersion: CSSM_HEADERVERSION,
    CspId: CSSM_GUID,
    BlobType: CSSM_KEYBLOB_TYPE,
    Format: CSSM_KEYBLOB_FORMAT,
    AlgorithmId: CSSM_ALGORITHMS,
    KeyClass: CSSM_KEYCLASS,
    LogicalKeySizeInBits: uint32,
    KeyAttr: CSSM_KEYATTR_FLAGS,
    KeyUsage: CSSM_KEYUSE,
    StartDate: CSSM_DATE,
    EndDate: CSSM_DATE,
    WrapAlgorithmId: CSSM_ALGORITHMS,
    WrapMode: CSSM_ENCRYPT_MODE,
    Reserved: uint32,
};

pub const CSSM_KEYHEADER = cssm_keyheader;

pub const CSSM_KEYHEADER_PTR = ?*cssm_keyheader;

pub const cssm_key = extern struct {
    KeyHeader: CSSM_KEYHEADER,
    KeyData: Asn1Item,
};

pub const CSSM_KEY = cssm_key;

pub const CSSM_KEY_PTR = ?*cssm_key;

pub const CSSM_WRAP_KEY = CSSM_KEY;

pub const CSSM_WRAP_KEY_PTR = CSSM_KEY;

pub const CSSM_CSPTYPE = uint32;

pub const anon10151 = u32;
pub const anon10151_CSSM_CSP_SOFTWARE: u32 = 1;
pub const anon10151_CSSM_CSP_HARDWARE: u32 = 2;
pub const anon10151_CSSM_CSP_HYBRID: u32 = 3;

pub const cssm_dl_db_handle = extern struct {
    DLHandle: CSSM_DL_HANDLE,
    DBHandle: CSSM_DB_HANDLE,
};

pub const CSSM_DL_DB_HANDLE = cssm_dl_db_handle;

pub const CSSM_DL_DB_HANDLE_PTR = ?*cssm_dl_db_handle;

pub const CSSM_CONTEXT_TYPE = uint32;

pub const anon10281 = u32;
pub const anon10281_CSSM_ALGCLASS_NONE: u32 = 0;
pub const anon10281_CSSM_ALGCLASS_CUSTOM: u32 = 1;
pub const anon10281_CSSM_ALGCLASS_SIGNATURE: u32 = 2;
pub const anon10281_CSSM_ALGCLASS_SYMMETRIC: u32 = 3;
pub const anon10281_CSSM_ALGCLASS_DIGEST: u32 = 4;
pub const anon10281_CSSM_ALGCLASS_RANDOMGEN: u32 = 5;
pub const anon10281_CSSM_ALGCLASS_UNIQUEGEN: u32 = 6;
pub const anon10281_CSSM_ALGCLASS_MAC: u32 = 7;
pub const anon10281_CSSM_ALGCLASS_ASYMMETRIC: u32 = 8;
pub const anon10281_CSSM_ALGCLASS_KEYGEN: u32 = 9;
pub const anon10281_CSSM_ALGCLASS_DERIVEKEY: u32 = 10;

pub const anon10431 = u32;
pub const anon10431_CSSM_ATTRIBUTE_DATA_NONE: u32 = 0;
pub const anon10431_CSSM_ATTRIBUTE_DATA_UINT32: u32 = 268435456;
pub const anon10431_CSSM_ATTRIBUTE_DATA_CSSM_DATA: u32 = 536870912;
pub const anon10431_CSSM_ATTRIBUTE_DATA_CRYPTO_DATA: u32 = 805306368;
pub const anon10431_CSSM_ATTRIBUTE_DATA_KEY: u32 = 1073741824;
pub const anon10431_CSSM_ATTRIBUTE_DATA_STRING: u32 = 1342177280;
pub const anon10431_CSSM_ATTRIBUTE_DATA_DATE: u32 = 1610612736;
pub const anon10431_CSSM_ATTRIBUTE_DATA_RANGE: u32 = 1879048192;
pub const anon10431_CSSM_ATTRIBUTE_DATA_ACCESS_CREDENTIALS: u32 = -2147483648;
pub const anon10431_CSSM_ATTRIBUTE_DATA_VERSION: u32 = 16777216;
pub const anon10431_CSSM_ATTRIBUTE_DATA_DL_DB_HANDLE: u32 = 33554432;
pub const anon10431_CSSM_ATTRIBUTE_DATA_KR_PROFILE: u32 = 50331648;
pub const anon10431_CSSM_ATTRIBUTE_TYPE_MASK: u32 = -16777216;

pub const CSSM_ATTRIBUTE_TYPE = uint32;

pub const anon10601 = u32;
pub const anon10601_CSSM_ATTRIBUTE_NONE: u32 = 0;
pub const anon10601_CSSM_ATTRIBUTE_CUSTOM: u32 = 536870913;
pub const anon10601_CSSM_ATTRIBUTE_DESCRIPTION: u32 = 1342177282;
pub const anon10601_CSSM_ATTRIBUTE_KEY: u32 = 1073741827;
pub const anon10601_CSSM_ATTRIBUTE_INIT_VECTOR: u32 = 536870916;
pub const anon10601_CSSM_ATTRIBUTE_SALT: u32 = 536870917;
pub const anon10601_CSSM_ATTRIBUTE_PADDING: u32 = 268435462;
pub const anon10601_CSSM_ATTRIBUTE_RANDOM: u32 = 536870919;
pub const anon10601_CSSM_ATTRIBUTE_SEED: u32 = 805306376;
pub const anon10601_CSSM_ATTRIBUTE_PASSPHRASE: u32 = 805306377;
pub const anon10601_CSSM_ATTRIBUTE_KEY_LENGTH: u32 = 268435466;
pub const anon10601_CSSM_ATTRIBUTE_KEY_LENGTH_RANGE: u32 = 1879048203;
pub const anon10601_CSSM_ATTRIBUTE_BLOCK_SIZE: u32 = 268435468;
pub const anon10601_CSSM_ATTRIBUTE_OUTPUT_SIZE: u32 = 268435469;
pub const anon10601_CSSM_ATTRIBUTE_ROUNDS: u32 = 268435470;
pub const anon10601_CSSM_ATTRIBUTE_IV_SIZE: u32 = 268435471;
pub const anon10601_CSSM_ATTRIBUTE_ALG_PARAMS: u32 = 536870928;
pub const anon10601_CSSM_ATTRIBUTE_LABEL: u32 = 536870929;
pub const anon10601_CSSM_ATTRIBUTE_KEY_TYPE: u32 = 268435474;
pub const anon10601_CSSM_ATTRIBUTE_MODE: u32 = 268435475;
pub const anon10601_CSSM_ATTRIBUTE_EFFECTIVE_BITS: u32 = 268435476;
pub const anon10601_CSSM_ATTRIBUTE_START_DATE: u32 = 1610612757;
pub const anon10601_CSSM_ATTRIBUTE_END_DATE: u32 = 1610612758;
pub const anon10601_CSSM_ATTRIBUTE_KEYUSAGE: u32 = 268435479;
pub const anon10601_CSSM_ATTRIBUTE_KEYATTR: u32 = 268435480;
pub const anon10601_CSSM_ATTRIBUTE_VERSION: u32 = 16777241;
pub const anon10601_CSSM_ATTRIBUTE_PRIME: u32 = 536870938;
pub const anon10601_CSSM_ATTRIBUTE_BASE: u32 = 536870939;
pub const anon10601_CSSM_ATTRIBUTE_SUBPRIME: u32 = 536870940;
pub const anon10601_CSSM_ATTRIBUTE_ALG_ID: u32 = 268435485;
pub const anon10601_CSSM_ATTRIBUTE_ITERATION_COUNT: u32 = 268435486;
pub const anon10601_CSSM_ATTRIBUTE_ROUNDS_RANGE: u32 = 1879048223;
pub const anon10601_CSSM_ATTRIBUTE_KRPROFILE_LOCAL: u32 = 50331680;
pub const anon10601_CSSM_ATTRIBUTE_KRPROFILE_REMOTE: u32 = 50331681;
pub const anon10601_CSSM_ATTRIBUTE_CSP_HANDLE: u32 = 268435490;
pub const anon10601_CSSM_ATTRIBUTE_DL_DB_HANDLE: u32 = 33554467;
pub const anon10601_CSSM_ATTRIBUTE_ACCESS_CREDENTIALS: u32 = -2147483612;
pub const anon10601_CSSM_ATTRIBUTE_PUBLIC_KEY_FORMAT: u32 = 268435493;
pub const anon10601_CSSM_ATTRIBUTE_PRIVATE_KEY_FORMAT: u32 = 268435494;
pub const anon10601_CSSM_ATTRIBUTE_SYMMETRIC_KEY_FORMAT: u32 = 268435495;
pub const anon10601_CSSM_ATTRIBUTE_WRAPPED_KEY_FORMAT: u32 = 268435496;

pub const CSSM_PADDING = uint32;

pub const anon11051 = u32;
pub const anon11051_CSSM_PADDING_NONE: u32 = 0;
pub const anon11051_CSSM_PADDING_CUSTOM: u32 = 1;
pub const anon11051_CSSM_PADDING_ZERO: u32 = 2;
pub const anon11051_CSSM_PADDING_ONE: u32 = 3;
pub const anon11051_CSSM_PADDING_ALTERNATE: u32 = 4;
pub const anon11051_CSSM_PADDING_FF: u32 = 5;
pub const anon11051_CSSM_PADDING_PKCS5: u32 = 6;
pub const anon11051_CSSM_PADDING_PKCS7: u32 = 7;
pub const anon11051_CSSM_PADDING_CIPHERSTEALING: u32 = 8;
pub const anon11051_CSSM_PADDING_RANDOM: u32 = 9;
pub const anon11051_CSSM_PADDING_PKCS1: u32 = 10;
pub const anon11051_CSSM_PADDING_SIGRAW: u32 = 11;
pub const anon11051_CSSM_PADDING_VENDOR_DEFINED: u32 = -2147483648;

pub const CSSM_KEY_TYPE = CSSM_ALGORITHMS;

pub const cssm_context_attribute = extern struct {
    pub const _value = extern union {
        pub const cssm_kr_profile = extern struct {
            UserName: CSSM_KR_NAME,
            UserCertificate: CSSM_CERTGROUP_PTR,
            KRSCertChain: CSSM_CERTGROUP_PTR,
            LE_KRANum: uint8,
            LE_KRACertChainList: CSSM_CERTGROUP_PTR,
            ENT_KRANum: uint8,
            ENT_KRACertChainList: CSSM_CERTGROUP_PTR,
            INDIV_KRANum: uint8,
            INDIV_KRACertChainList: CSSM_CERTGROUP_PTR,
            INDIV_AuthenticationInfo: CSSM_DATA_PTR,
            KRSPFlags: uint32,
            KRSPExtensions: CSSM_DATA_PTR,
        };

        String: ?*c_char,
        Uint32: uint32,
        AccessCredentials: CSSM_ACCESS_CREDENTIALS_PTR,
        Key: CSSM_KEY_PTR,
        Data: CSSM_DATA_PTR,
        Padding: CSSM_PADDING,
        Date: CSSM_DATE_PTR,
        Range: CSSM_RANGE_PTR,
        CryptoData: CSSM_CRYPTO_DATA_PTR,
        Version: CSSM_VERSION_PTR,
        DLDBHandle: CSSM_DL_DB_HANDLE_PTR,
        KRProfile: cssm_context_attribute._value.cssm_kr_profile,
    };

    AttributeType: CSSM_ATTRIBUTE_TYPE,
    AttributeLength: uint32,
    Attribute: cssm_context_attribute._value,
};

pub const CSSM_CONTEXT_ATTRIBUTE = cssm_context_attribute;

pub const CSSM_CONTEXT_ATTRIBUTE_PTR = ?*cssm_context_attribute;

pub const cssm_context = extern struct {
    ContextType: CSSM_CONTEXT_TYPE,
    AlgorithmType: CSSM_ALGORITHMS,
    NumberOfAttributes: uint32,
    ContextAttributes: CSSM_CONTEXT_ATTRIBUTE_PTR,
    CSPHandle: CSSM_CSP_HANDLE,
    Privileged: CSSM_BOOL,
    EncryptionProhibited: uint32,
    WorkFactor: uint32,
    Reserved: uint32,
};

pub const CSSM_CONTEXT = cssm_context;

pub const CSSM_CONTEXT_PTR = ?*cssm_context;

pub const CSSM_SC_FLAGS = uint32;

pub const anon11581 = u32;
pub const anon11581_CSSM_CSP_TOK_RNG: u32 = 1;
pub const anon11581_CSSM_CSP_TOK_CLOCK_EXISTS: u32 = 64;

pub const CSSM_CSP_READER_FLAGS = uint32;

pub const anon11641 = u32;
pub const anon11641_CSSM_CSP_RDR_TOKENPRESENT: u32 = 1;
pub const anon11641_CSSM_CSP_RDR_EXISTS: u32 = 2;
pub const anon11641_CSSM_CSP_RDR_HW: u32 = 4;

pub const CSSM_CSP_FLAGS = uint32;

pub const anon11751 = u32;
pub const anon11751_CSSM_CSP_TOK_WRITE_PROTECTED: u32 = 2;
pub const anon11751_CSSM_CSP_TOK_LOGIN_REQUIRED: u32 = 4;
pub const anon11751_CSSM_CSP_TOK_USER_PIN_INITIALIZED: u32 = 8;
pub const anon11751_CSSM_CSP_TOK_PROT_AUTHENTICATION: u32 = 256;
pub const anon11751_CSSM_CSP_TOK_USER_PIN_EXPIRED: u32 = 1048576;
pub const anon11751_CSSM_CSP_TOK_SESSION_KEY_PASSWORD: u32 = 2097152;
pub const anon11751_CSSM_CSP_TOK_PRIVATE_KEY_PASSWORD: u32 = 4194304;
pub const anon11751_CSSM_CSP_STORES_PRIVATE_KEYS: u32 = 16777216;
pub const anon11751_CSSM_CSP_STORES_PUBLIC_KEYS: u32 = 33554432;
pub const anon11751_CSSM_CSP_STORES_SESSION_KEYS: u32 = 67108864;
pub const anon11751_CSSM_CSP_STORES_CERTIFICATES: u32 = 134217728;
pub const anon11751_CSSM_CSP_STORES_GENERIC: u32 = 268435456;

pub const CSSM_PKCS_OAEP_MGF = uint32;

pub const anon11911 = u32;
pub const anon11911_CSSM_PKCS_OAEP_MGF_NONE: u32 = 0;
pub const anon11911_CSSM_PKCS_OAEP_MGF1_SHA1: u32 = 1;
pub const anon11911_CSSM_PKCS_OAEP_MGF1_MD5: u32 = 2;

pub const CSSM_PKCS_OAEP_PSOURCE = uint32;

pub const anon11981 = u32;
pub const anon11981_CSSM_PKCS_OAEP_PSOURCE_NONE: u32 = 0;
pub const anon11981_CSSM_PKCS_OAEP_PSOURCE_Pspecified: u32 = 1;

pub const cssm_pkcs1_oaep_params = extern struct {
    HashAlgorithm: uint32,
    HashParams: Asn1Item,
    MGF: CSSM_PKCS_OAEP_MGF,
    MGFParams: Asn1Item,
    PSource: CSSM_PKCS_OAEP_PSOURCE,
    PSourceParams: Asn1Item,
};

pub const CSSM_PKCS1_OAEP_PARAMS = cssm_pkcs1_oaep_params;

pub const CSSM_PKCS1_OAEP_PARAMS_PTR = ?*cssm_pkcs1_oaep_params;

pub const cssm_csp_operational_statistics = extern struct {
    UserAuthenticated: CSSM_BOOL,
    DeviceFlags: CSSM_CSP_FLAGS,
    TokenMaxSessionCount: uint32,
    TokenOpenedSessionCount: uint32,
    TokenMaxRWSessionCount: uint32,
    TokenOpenedRWSessionCount: uint32,
    TokenTotalPublicMem: uint32,
    TokenFreePublicMem: uint32,
    TokenTotalPrivateMem: uint32,
    TokenFreePrivateMem: uint32,
};

pub const CSSM_CSP_OPERATIONAL_STATISTICS = cssm_csp_operational_statistics;

pub const CSSM_CSP_OPERATIONAL_STATISTICS_PTR = ?*cssm_csp_operational_statistics;

pub const anon12281 = i32;
pub const anon12281_CSSM_VALUE_NOT_AVAILABLE: i32 = -1;

pub const cssm_pkcs5_pbkdf1_params = extern struct {
    Passphrase: Asn1Item,
    InitVector: Asn1Item,
};

pub const CSSM_PKCS5_PBKDF1_PARAMS = cssm_pkcs5_pbkdf1_params;

pub const CSSM_PKCS5_PBKDF1_PARAMS_PTR = ?*cssm_pkcs5_pbkdf1_params;

pub const CSSM_PKCS5_PBKDF2_PRF = uint32;

pub const anon12381 = u32;
pub const anon12381_CSSM_PKCS5_PBKDF2_PRF_HMAC_SHA1: u32 = 0;

pub const cssm_pkcs5_pbkdf2_params = extern struct {
    Passphrase: Asn1Item,
    PseudoRandomFunction: CSSM_PKCS5_PBKDF2_PRF,
};

pub const CSSM_PKCS5_PBKDF2_PARAMS = cssm_pkcs5_pbkdf2_params;

pub const CSSM_PKCS5_PBKDF2_PARAMS_PTR = ?*cssm_pkcs5_pbkdf2_params;

pub const cssm_kea_derive_params = extern struct {
    Rb: Asn1Item,
    Yb: Asn1Item,
};

pub const CSSM_KEA_DERIVE_PARAMS = cssm_kea_derive_params;

pub const CSSM_KEA_DERIVE_PARAMS_PTR = ?*cssm_kea_derive_params;

pub const cssm_tp_authority_id = extern struct {
    AuthorityCert: Asn1Item,
    AuthorityLocation: CSSM_NET_ADDRESS_PTR,
};

pub const CSSM_TP_AUTHORITY_ID = cssm_tp_authority_id;

pub const CSSM_TP_AUTHORITY_ID_PTR = ?*cssm_tp_authority_id;

pub const CSSM_TP_AUTHORITY_REQUEST_TYPE = uint32;

pub const CSSM_TP_AUTHORITY_REQUEST_TYPE_PTR = uint32;

pub const anon12611 = u32;
pub const anon12611_CSSM_TP_AUTHORITY_REQUEST_CERTISSUE: u32 = 1;
pub const anon12611_CSSM_TP_AUTHORITY_REQUEST_CERTREVOKE: u32 = 2;
pub const anon12611_CSSM_TP_AUTHORITY_REQUEST_CERTSUSPEND: u32 = 3;
pub const anon12611_CSSM_TP_AUTHORITY_REQUEST_CERTRESUME: u32 = 4;
pub const anon12611_CSSM_TP_AUTHORITY_REQUEST_CERTVERIFY: u32 = 5;
pub const anon12611_CSSM_TP_AUTHORITY_REQUEST_CERTNOTARIZE: u32 = 6;
pub const anon12611_CSSM_TP_AUTHORITY_REQUEST_CERTUSERECOVER: u32 = 7;
pub const anon12611_CSSM_TP_AUTHORITY_REQUEST_CRLISSUE: u32 = 256;

pub const CSSM_TP_VERIFICATION_RESULTS_CALLBACK = CSSM_RETURN;

pub const CSSM_OID_PTR = Asn1Oid;

pub const cssm_field = extern struct {
    FieldOid: Asn1Oid,
    FieldValue: Asn1Item,
};

pub const CSSM_FIELD = cssm_field;

pub const CSSM_FIELD_PTR = ?*cssm_field;

pub const cssm_tp_policyinfo = extern struct {
    NumberOfPolicyIds: uint32,
    PolicyIds: CSSM_FIELD_PTR,
    PolicyControl: ?*anyopaque,
};

pub const CSSM_TP_POLICYINFO = cssm_tp_policyinfo;

pub const CSSM_TP_POLICYINFO_PTR = ?*cssm_tp_policyinfo;

pub const CSSM_TP_SERVICES = uint32;

pub const anon12941 = u32;
pub const anon12941_CSSM_TP_KEY_ARCHIVE: u32 = 1;
pub const anon12941_CSSM_TP_CERT_PUBLISH: u32 = 2;
pub const anon12941_CSSM_TP_CERT_NOTIFY_RENEW: u32 = 4;
pub const anon12941_CSSM_TP_CERT_DIR_UPDATE: u32 = 8;
pub const anon12941_CSSM_TP_CRL_DISTRIBUTE: u32 = 16;

pub const CSSM_TP_ACTION = uint32;

pub const anon13041 = u32;
pub const anon13041_CSSM_TP_ACTION_DEFAULT: u32 = 0;

pub const CSSM_TP_STOP_ON = uint32;

pub const anon13091 = u32;
pub const anon13091_CSSM_TP_STOP_ON_POLICY: u32 = 0;
pub const anon13091_CSSM_TP_STOP_ON_NONE: u32 = 1;
pub const anon13091_CSSM_TP_STOP_ON_FIRST_PASS: u32 = 2;
pub const anon13091_CSSM_TP_STOP_ON_FIRST_FAIL: u32 = 3;

pub const CSSM_TIMESTRING = ?*c_char;

pub const cssm_dl_db_list = extern struct {
    NumHandles: uint32,
    DLDBHandle: CSSM_DL_DB_HANDLE_PTR,
};

pub const CSSM_DL_DB_LIST = cssm_dl_db_list;

pub const CSSM_DL_DB_LIST_PTR = ?*cssm_dl_db_list;

pub const cssm_tp_callerauth_context = extern struct {
    Policy: CSSM_TP_POLICYINFO,
    VerifyTime: CSSM_TIMESTRING,
    VerificationAbortOn: CSSM_TP_STOP_ON,
    CallbackWithVerifiedCert: CSSM_TP_VERIFICATION_RESULTS_CALLBACK,
    NumberOfAnchorCerts: uint32,
    AnchorCerts: CSSM_DATA_PTR,
    DBList: CSSM_DL_DB_LIST_PTR,
    CallerCredentials: CSSM_ACCESS_CREDENTIALS_PTR,
};

pub const CSSM_TP_CALLERAUTH_CONTEXT = cssm_tp_callerauth_context;

pub const CSSM_TP_CALLERAUTH_CONTEXT_PTR = ?*cssm_tp_callerauth_context;

pub const CSSM_CRL_PARSE_FORMAT = uint32;

pub const CSSM_CRL_PARSE_FORMAT_PTR = uint32;

pub const anon13371 = u32;
pub const anon13371_CSSM_CRL_PARSE_FORMAT_NONE: u32 = 0;
pub const anon13371_CSSM_CRL_PARSE_FORMAT_CUSTOM: u32 = 1;
pub const anon13371_CSSM_CRL_PARSE_FORMAT_SEXPR: u32 = 2;
pub const anon13371_CSSM_CRL_PARSE_FORMAT_COMPLEX: u32 = 3;
pub const anon13371_CSSM_CRL_PARSE_FORMAT_OID_NAMED: u32 = 4;
pub const anon13371_CSSM_CRL_PARSE_FORMAT_TUPLE: u32 = 5;
pub const anon13371_CSSM_CRL_PARSE_FORMAT_MULTIPLE: u32 = 32766;
pub const anon13371_CSSM_CRL_PARSE_FORMAT_LAST: u32 = 32767;
pub const anon13371_CSSM_CL_CUSTOM_CRL_PARSE_FORMAT: u32 = 32768;

pub const CSSM_CRL_TYPE = uint32;

pub const CSSM_CRL_TYPE_PTR = uint32;

pub const anon13541 = u32;
pub const anon13541_CSSM_CRL_TYPE_UNKNOWN: u32 = 0;
pub const anon13541_CSSM_CRL_TYPE_X_509v1: u32 = 1;
pub const anon13541_CSSM_CRL_TYPE_X_509v2: u32 = 2;
pub const anon13541_CSSM_CRL_TYPE_SPKI: u32 = 3;
pub const anon13541_CSSM_CRL_TYPE_MULTIPLE: u32 = 32766;

pub const CSSM_CRL_ENCODING = uint32;

pub const CSSM_CRL_ENCODING_PTR = uint32;

pub const anon13631 = u32;
pub const anon13631_CSSM_CRL_ENCODING_UNKNOWN: u32 = 0;
pub const anon13631_CSSM_CRL_ENCODING_CUSTOM: u32 = 1;
pub const anon13631_CSSM_CRL_ENCODING_BER: u32 = 2;
pub const anon13631_CSSM_CRL_ENCODING_DER: u32 = 3;
pub const anon13631_CSSM_CRL_ENCODING_BLOOM: u32 = 4;
pub const anon13631_CSSM_CRL_ENCODING_SEXPR: u32 = 5;
pub const anon13631_CSSM_CRL_ENCODING_MULTIPLE: u32 = 32766;

pub const cssm_encoded_crl = extern struct {
    CrlType: CSSM_CRL_TYPE,
    CrlEncoding: CSSM_CRL_ENCODING,
    CrlBlob: Asn1Item,
};

pub const CSSM_ENCODED_CRL = cssm_encoded_crl;

pub const CSSM_ENCODED_CRL_PTR = ?*cssm_encoded_crl;

pub const cssm_parsed_crl = extern struct {
    CrlType: CSSM_CRL_TYPE,
    ParsedCrlFormat: CSSM_CRL_PARSE_FORMAT,
    ParsedCrl: ?*anyopaque,
};

pub const CSSM_PARSED_CRL = cssm_parsed_crl;

pub const CSSM_PARSED_CRL_PTR = ?*cssm_parsed_crl;

pub const cssm_crl_pair = extern struct {
    EncodedCrl: CSSM_ENCODED_CRL,
    ParsedCrl: CSSM_PARSED_CRL,
};

pub const CSSM_CRL_PAIR = cssm_crl_pair;

pub const CSSM_CRL_PAIR_PTR = ?*cssm_crl_pair;

pub const CSSM_CRLGROUP_TYPE = uint32;

pub const CSSM_CRLGROUP_TYPE_PTR = uint32;

pub const anon13931 = u32;
pub const anon13931_CSSM_CRLGROUP_DATA: u32 = 0;
pub const anon13931_CSSM_CRLGROUP_ENCODED_CRL: u32 = 1;
pub const anon13931_CSSM_CRLGROUP_PARSED_CRL: u32 = 2;
pub const anon13931_CSSM_CRLGROUP_CRL_PAIR: u32 = 3;

pub const cssm_crlgroup = extern struct {
    pub const anon14045 = extern union {
        CrlList: CSSM_DATA_PTR,
        EncodedCrlList: CSSM_ENCODED_CRL_PTR,
        ParsedCrlList: CSSM_PARSED_CRL_PTR,
        PairCrlList: CSSM_CRL_PAIR_PTR,
    };

    CrlType: CSSM_CRL_TYPE,
    CrlEncoding: CSSM_CRL_ENCODING,
    NumberOfCrls: uint32,
    GroupCrlList: cssm_crlgroup.anon14045,
    CrlGroupType: CSSM_CRLGROUP_TYPE,
};

pub const CSSM_CRLGROUP = cssm_crlgroup;

pub const CSSM_CRLGROUP_PTR = ?*cssm_crlgroup;

pub const cssm_fieldgroup = extern struct {
    NumberOfFields: i32,
    Fields: CSSM_FIELD_PTR,
};

pub const CSSM_FIELDGROUP = cssm_fieldgroup;

pub const CSSM_FIELDGROUP_PTR = ?*cssm_fieldgroup;

pub const CSSM_EVIDENCE_FORM = uint32;

pub const anon14191 = u32;
pub const anon14191_CSSM_EVIDENCE_FORM_UNSPECIFIC: u32 = 0;
pub const anon14191_CSSM_EVIDENCE_FORM_CERT: u32 = 1;
pub const anon14191_CSSM_EVIDENCE_FORM_CRL: u32 = 2;
pub const anon14191_CSSM_EVIDENCE_FORM_CERT_ID: u32 = 3;
pub const anon14191_CSSM_EVIDENCE_FORM_CRL_ID: u32 = 4;
pub const anon14191_CSSM_EVIDENCE_FORM_VERIFIER_TIME: u32 = 5;
pub const anon14191_CSSM_EVIDENCE_FORM_CRL_THISTIME: u32 = 6;
pub const anon14191_CSSM_EVIDENCE_FORM_CRL_NEXTTIME: u32 = 7;
pub const anon14191_CSSM_EVIDENCE_FORM_POLICYINFO: u32 = 8;
pub const anon14191_CSSM_EVIDENCE_FORM_TUPLEGROUP: u32 = 9;

pub const cssm_evidence = extern struct {
    EvidenceForm: CSSM_EVIDENCE_FORM,
    Evidence: ?*anyopaque,
};

pub const CSSM_EVIDENCE = cssm_evidence;

pub const CSSM_EVIDENCE_PTR = ?*cssm_evidence;

pub const cssm_tp_verify_context = extern struct {
    Action: CSSM_TP_ACTION,
    ActionData: Asn1Item,
    Crls: CSSM_CRLGROUP,
    Cred: CSSM_TP_CALLERAUTH_CONTEXT_PTR,
};

pub const CSSM_TP_VERIFY_CONTEXT = cssm_tp_verify_context;

pub const CSSM_TP_VERIFY_CONTEXT_PTR = ?*cssm_tp_verify_context;

pub const cssm_tp_verify_context_result = extern struct {
    NumberOfEvidences: uint32,
    Evidence: CSSM_EVIDENCE_PTR,
};

pub const CSSM_TP_VERIFY_CONTEXT_RESULT = cssm_tp_verify_context_result;

pub const CSSM_TP_VERIFY_CONTEXT_RESULT_PTR = ?*cssm_tp_verify_context_result;

pub const cssm_tp_request_set = extern struct {
    NumberOfRequests: uint32,
    Requests: ?*anyopaque,
};

pub const CSSM_TP_REQUEST_SET = cssm_tp_request_set;

pub const CSSM_TP_REQUEST_SET_PTR = ?*cssm_tp_request_set;

pub const cssm_tp_result_set = extern struct {
    NumberOfResults: uint32,
    Results: ?*anyopaque,
};

pub const CSSM_TP_RESULT_SET = cssm_tp_result_set;

pub const CSSM_TP_RESULT_SET_PTR = ?*cssm_tp_result_set;

pub const CSSM_TP_CONFIRM_STATUS = uint32;

pub const CSSM_TP_CONFIRM_STATUS_PTR = uint32;

pub const anon14601 = u32;
pub const anon14601_CSSM_TP_CONFIRM_STATUS_UNKNOWN: u32 = 0;
pub const anon14601_CSSM_TP_CONFIRM_ACCEPT: u32 = 1;
pub const anon14601_CSSM_TP_CONFIRM_REJECT: u32 = 2;

pub const cssm_tp_confirm_response = extern struct {
    NumberOfResponses: uint32,
    Responses: CSSM_TP_CONFIRM_STATUS_PTR,
};

pub const CSSM_TP_CONFIRM_RESPONSE = cssm_tp_confirm_response;

pub const CSSM_TP_CONFIRM_RESPONSE_PTR = ?*cssm_tp_confirm_response;

pub const anon14761 = i32;
pub const anon14761_CSSM_ESTIMATED_TIME_UNKNOWN: i32 = -1;

pub const anon14801 = i32;
pub const anon14801_CSSM_ELAPSED_TIME_UNKNOWN: i32 = -1;
pub const anon14801_CSSM_ELAPSED_TIME_COMPLETE: i32 = -2;

pub const cssm_tp_certissue_input = extern struct {
    CSPSubserviceUid: CSSM_SUBSERVICE_UID,
    CLHandle: CSSM_CL_HANDLE,
    NumberOfTemplateFields: uint32,
    SubjectCertFields: CSSM_FIELD_PTR,
    MoreServiceRequests: CSSM_TP_SERVICES,
    NumberOfServiceControls: uint32,
    ServiceControls: CSSM_FIELD_PTR,
    UserCredentials: CSSM_ACCESS_CREDENTIALS_PTR,
};

pub const CSSM_TP_CERTISSUE_INPUT = cssm_tp_certissue_input;

pub const CSSM_TP_CERTISSUE_INPUT_PTR = ?*cssm_tp_certissue_input;

pub const CSSM_TP_CERTISSUE_STATUS = uint32;

pub const anon14971 = u32;
pub const anon14971_CSSM_TP_CERTISSUE_STATUS_UNKNOWN: u32 = 0;
pub const anon14971_CSSM_TP_CERTISSUE_OK: u32 = 1;
pub const anon14971_CSSM_TP_CERTISSUE_OKWITHCERTMODS: u32 = 2;
pub const anon14971_CSSM_TP_CERTISSUE_OKWITHSERVICEMODS: u32 = 3;
pub const anon14971_CSSM_TP_CERTISSUE_REJECTED: u32 = 4;
pub const anon14971_CSSM_TP_CERTISSUE_NOT_AUTHORIZED: u32 = 5;
pub const anon14971_CSSM_TP_CERTISSUE_WILL_BE_REVOKED: u32 = 6;

pub const cssm_tp_certissue_output = extern struct {
    IssueStatus: CSSM_TP_CERTISSUE_STATUS,
    CertGroup: CSSM_CERTGROUP_PTR,
    PerformedServiceRequests: CSSM_TP_SERVICES,
};

pub const CSSM_TP_CERTISSUE_OUTPUT = cssm_tp_certissue_output;

pub const CSSM_TP_CERTISSUE_OUTPUT_PTR = ?*cssm_tp_certissue_output;

pub const CSSM_TP_CERTCHANGE_ACTION = uint32;

pub const anon15271 = u32;
pub const anon15271_CSSM_TP_CERTCHANGE_NONE: u32 = 0;
pub const anon15271_CSSM_TP_CERTCHANGE_REVOKE: u32 = 1;
pub const anon15271_CSSM_TP_CERTCHANGE_HOLD: u32 = 2;
pub const anon15271_CSSM_TP_CERTCHANGE_RELEASE: u32 = 3;

pub const CSSM_TP_CERTCHANGE_REASON = uint32;

pub const anon15541 = u32;
pub const anon15541_CSSM_TP_CERTCHANGE_REASON_UNKNOWN: u32 = 0;
pub const anon15541_CSSM_TP_CERTCHANGE_REASON_KEYCOMPROMISE: u32 = 1;
pub const anon15541_CSSM_TP_CERTCHANGE_REASON_CACOMPROMISE: u32 = 2;
pub const anon15541_CSSM_TP_CERTCHANGE_REASON_CEASEOPERATION: u32 = 3;
pub const anon15541_CSSM_TP_CERTCHANGE_REASON_AFFILIATIONCHANGE: u32 = 4;
pub const anon15541_CSSM_TP_CERTCHANGE_REASON_SUPERCEDED: u32 = 5;
pub const anon15541_CSSM_TP_CERTCHANGE_REASON_SUSPECTEDCOMPROMISE: u32 = 6;
pub const anon15541_CSSM_TP_CERTCHANGE_REASON_HOLDRELEASE: u32 = 7;

pub const cssm_tp_certchange_input = extern struct {
    Action: CSSM_TP_CERTCHANGE_ACTION,
    Reason: CSSM_TP_CERTCHANGE_REASON,
    CLHandle: CSSM_CL_HANDLE,
    Cert: CSSM_DATA_PTR,
    ChangeInfo: CSSM_FIELD_PTR,
    StartTime: CSSM_TIMESTRING,
    CallerCredentials: CSSM_ACCESS_CREDENTIALS_PTR,
};

pub const CSSM_TP_CERTCHANGE_INPUT = cssm_tp_certchange_input;

pub const CSSM_TP_CERTCHANGE_INPUT_PTR = ?*cssm_tp_certchange_input;

pub const CSSM_TP_CERTCHANGE_STATUS = uint32;

pub const anon15881 = u32;
pub const anon15881_CSSM_TP_CERTCHANGE_STATUS_UNKNOWN: u32 = 0;
pub const anon15881_CSSM_TP_CERTCHANGE_OK: u32 = 1;
pub const anon15881_CSSM_TP_CERTCHANGE_OKWITHNEWTIME: u32 = 2;
pub const anon15881_CSSM_TP_CERTCHANGE_WRONGCA: u32 = 3;
pub const anon15881_CSSM_TP_CERTCHANGE_REJECTED: u32 = 4;
pub const anon15881_CSSM_TP_CERTCHANGE_NOT_AUTHORIZED: u32 = 5;

pub const cssm_tp_certchange_output = extern struct {
    ActionStatus: CSSM_TP_CERTCHANGE_STATUS,
    RevokeInfo: CSSM_FIELD,
};

pub const CSSM_TP_CERTCHANGE_OUTPUT = cssm_tp_certchange_output;

pub const CSSM_TP_CERTCHANGE_OUTPUT_PTR = ?*cssm_tp_certchange_output;

pub const cssm_tp_certverify_input = extern struct {
    CLHandle: CSSM_CL_HANDLE,
    Cert: CSSM_DATA_PTR,
    VerifyContext: CSSM_TP_VERIFY_CONTEXT_PTR,
};

pub const CSSM_TP_CERTVERIFY_INPUT = cssm_tp_certverify_input;

pub const CSSM_TP_CERTVERIFY_INPUT_PTR = ?*cssm_tp_certverify_input;

pub const CSSM_TP_CERTVERIFY_STATUS = uint32;

pub const anon16221 = u32;
pub const anon16221_CSSM_TP_CERTVERIFY_UNKNOWN: u32 = 0;
pub const anon16221_CSSM_TP_CERTVERIFY_VALID: u32 = 1;
pub const anon16221_CSSM_TP_CERTVERIFY_INVALID: u32 = 2;
pub const anon16221_CSSM_TP_CERTVERIFY_REVOKED: u32 = 3;
pub const anon16221_CSSM_TP_CERTVERIFY_SUSPENDED: u32 = 4;
pub const anon16221_CSSM_TP_CERTVERIFY_EXPIRED: u32 = 5;
pub const anon16221_CSSM_TP_CERTVERIFY_NOT_VALID_YET: u32 = 6;
pub const anon16221_CSSM_TP_CERTVERIFY_INVALID_AUTHORITY: u32 = 7;
pub const anon16221_CSSM_TP_CERTVERIFY_INVALID_SIGNATURE: u32 = 8;
pub const anon16221_CSSM_TP_CERTVERIFY_INVALID_CERT_VALUE: u32 = 9;
pub const anon16221_CSSM_TP_CERTVERIFY_INVALID_CERTGROUP: u32 = 10;
pub const anon16221_CSSM_TP_CERTVERIFY_INVALID_POLICY: u32 = 11;
pub const anon16221_CSSM_TP_CERTVERIFY_INVALID_POLICY_IDS: u32 = 12;
pub const anon16221_CSSM_TP_CERTVERIFY_INVALID_BASIC_CONSTRAINTS: u32 = 13;
pub const anon16221_CSSM_TP_CERTVERIFY_INVALID_CRL_DIST_PT: u32 = 14;
pub const anon16221_CSSM_TP_CERTVERIFY_INVALID_NAME_TREE: u32 = 15;
pub const anon16221_CSSM_TP_CERTVERIFY_UNKNOWN_CRITICAL_EXT: u32 = 16;

pub const cssm_tp_certverify_output = extern struct {
    VerifyStatus: CSSM_TP_CERTVERIFY_STATUS,
    NumberOfEvidence: uint32,
    Evidence: CSSM_EVIDENCE_PTR,
};

pub const CSSM_TP_CERTVERIFY_OUTPUT = cssm_tp_certverify_output;

pub const CSSM_TP_CERTVERIFY_OUTPUT_PTR = ?*cssm_tp_certverify_output;

pub const cssm_tp_certnotarize_input = extern struct {
    CLHandle: CSSM_CL_HANDLE,
    NumberOfFields: uint32,
    MoreFields: CSSM_FIELD_PTR,
    SignScope: CSSM_FIELD_PTR,
    ScopeSize: uint32,
    MoreServiceRequests: CSSM_TP_SERVICES,
    NumberOfServiceControls: uint32,
    ServiceControls: CSSM_FIELD_PTR,
    UserCredentials: CSSM_ACCESS_CREDENTIALS_PTR,
};

pub const CSSM_TP_CERTNOTARIZE_INPUT = cssm_tp_certnotarize_input;

pub const CSSM_TP_CERTNOTARIZE_INPUT_PTR = ?*cssm_tp_certnotarize_input;

pub const CSSM_TP_CERTNOTARIZE_STATUS = uint32;

pub const anon16611 = u32;
pub const anon16611_CSSM_TP_CERTNOTARIZE_STATUS_UNKNOWN: u32 = 0;
pub const anon16611_CSSM_TP_CERTNOTARIZE_OK: u32 = 1;
pub const anon16611_CSSM_TP_CERTNOTARIZE_OKWITHOUTFIELDS: u32 = 2;
pub const anon16611_CSSM_TP_CERTNOTARIZE_OKWITHSERVICEMODS: u32 = 3;
pub const anon16611_CSSM_TP_CERTNOTARIZE_REJECTED: u32 = 4;
pub const anon16611_CSSM_TP_CERTNOTARIZE_NOT_AUTHORIZED: u32 = 5;

pub const cssm_tp_certnotarize_output = extern struct {
    NotarizeStatus: CSSM_TP_CERTNOTARIZE_STATUS,
    NotarizedCertGroup: CSSM_CERTGROUP_PTR,
    PerformedServiceRequests: CSSM_TP_SERVICES,
};

pub const CSSM_TP_CERTNOTARIZE_OUTPUT = cssm_tp_certnotarize_output;

pub const CSSM_TP_CERTNOTARIZE_OUTPUT_PTR = ?*cssm_tp_certnotarize_output;

pub const cssm_tp_certreclaim_input = extern struct {
    CLHandle: CSSM_CL_HANDLE,
    NumberOfSelectionFields: uint32,
    SelectionFields: CSSM_FIELD_PTR,
    UserCredentials: CSSM_ACCESS_CREDENTIALS_PTR,
};

pub const CSSM_TP_CERTRECLAIM_INPUT = cssm_tp_certreclaim_input;

pub const CSSM_TP_CERTRECLAIM_INPUT_PTR = ?*cssm_tp_certreclaim_input;

pub const CSSM_TP_CERTRECLAIM_STATUS = uint32;

pub const anon16981 = u32;
pub const anon16981_CSSM_TP_CERTRECLAIM_STATUS_UNKNOWN: u32 = 0;
pub const anon16981_CSSM_TP_CERTRECLAIM_OK: u32 = 1;
pub const anon16981_CSSM_TP_CERTRECLAIM_NOMATCH: u32 = 2;
pub const anon16981_CSSM_TP_CERTRECLAIM_REJECTED: u32 = 3;
pub const anon16981_CSSM_TP_CERTRECLAIM_NOT_AUTHORIZED: u32 = 4;

pub const cssm_tp_certreclaim_output = extern struct {
    ReclaimStatus: CSSM_TP_CERTRECLAIM_STATUS,
    ReclaimedCertGroup: CSSM_CERTGROUP_PTR,
    KeyCacheHandle: CSSM_LONG_HANDLE,
};

pub const CSSM_TP_CERTRECLAIM_OUTPUT = cssm_tp_certreclaim_output;

pub const CSSM_TP_CERTRECLAIM_OUTPUT_PTR = ?*cssm_tp_certreclaim_output;

pub const cssm_tp_crlissue_input = extern struct {
    CLHandle: CSSM_CL_HANDLE,
    CrlIdentifier: uint32,
    CrlThisTime: CSSM_TIMESTRING,
    PolicyIdentifier: CSSM_FIELD_PTR,
    CallerCredentials: CSSM_ACCESS_CREDENTIALS_PTR,
};

pub const CSSM_TP_CRLISSUE_INPUT = cssm_tp_crlissue_input;

pub const CSSM_TP_CRLISSUE_INPUT_PTR = ?*cssm_tp_crlissue_input;

pub const CSSM_TP_CRLISSUE_STATUS = uint32;

pub const anon17331 = u32;
pub const anon17331_CSSM_TP_CRLISSUE_STATUS_UNKNOWN: u32 = 0;
pub const anon17331_CSSM_TP_CRLISSUE_OK: u32 = 1;
pub const anon17331_CSSM_TP_CRLISSUE_NOT_CURRENT: u32 = 2;
pub const anon17331_CSSM_TP_CRLISSUE_INVALID_DOMAIN: u32 = 3;
pub const anon17331_CSSM_TP_CRLISSUE_UNKNOWN_IDENTIFIER: u32 = 4;
pub const anon17331_CSSM_TP_CRLISSUE_REJECTED: u32 = 5;
pub const anon17331_CSSM_TP_CRLISSUE_NOT_AUTHORIZED: u32 = 6;

pub const cssm_tp_crlissue_output = extern struct {
    IssueStatus: CSSM_TP_CRLISSUE_STATUS,
    Crl: CSSM_ENCODED_CRL_PTR,
    CrlNextTime: CSSM_TIMESTRING,
};

pub const CSSM_TP_CRLISSUE_OUTPUT = cssm_tp_crlissue_output;

pub const CSSM_TP_CRLISSUE_OUTPUT_PTR = ?*cssm_tp_crlissue_output;

pub const CSSM_TP_FORM_TYPE = uint32;

pub const anon17731 = u32;
pub const anon17731_CSSM_TP_FORM_TYPE_GENERIC: u32 = 0;
pub const anon17731_CSSM_TP_FORM_TYPE_REGISTRATION: u32 = 1;

pub const CSSM_CL_TEMPLATE_TYPE = uint32;

pub const anon17811 = u32;
pub const anon17811_CSSM_CL_TEMPLATE_INTERMEDIATE_CERT: u32 = 1;
pub const anon17811_CSSM_CL_TEMPLATE_PKIX_CERTTEMPLATE: u32 = 2;

pub const CSSM_CERT_BUNDLE_TYPE = uint32;

pub const anon17901 = u32;
pub const anon17901_CSSM_CERT_BUNDLE_UNKNOWN: u32 = 0;
pub const anon17901_CSSM_CERT_BUNDLE_CUSTOM: u32 = 1;
pub const anon17901_CSSM_CERT_BUNDLE_PKCS7_SIGNED_DATA: u32 = 2;
pub const anon17901_CSSM_CERT_BUNDLE_PKCS7_SIGNED_ENVELOPED_DATA: u32 = 3;
pub const anon17901_CSSM_CERT_BUNDLE_PKCS12: u32 = 4;
pub const anon17901_CSSM_CERT_BUNDLE_PFX: u32 = 5;
pub const anon17901_CSSM_CERT_BUNDLE_SPKI_SEQUENCE: u32 = 6;
pub const anon17901_CSSM_CERT_BUNDLE_PGP_KEYRING: u32 = 7;
pub const anon17901_CSSM_CERT_BUNDLE_LAST: u32 = 32767;
pub const anon17901_CSSM_CL_CUSTOM_CERT_BUNDLE_TYPE: u32 = 32768;

pub const CSSM_CERT_BUNDLE_ENCODING = uint32;

pub const anon18071 = u32;
pub const anon18071_CSSM_CERT_BUNDLE_ENCODING_UNKNOWN: u32 = 0;
pub const anon18071_CSSM_CERT_BUNDLE_ENCODING_CUSTOM: u32 = 1;
pub const anon18071_CSSM_CERT_BUNDLE_ENCODING_BER: u32 = 2;
pub const anon18071_CSSM_CERT_BUNDLE_ENCODING_DER: u32 = 3;
pub const anon18071_CSSM_CERT_BUNDLE_ENCODING_SEXPR: u32 = 4;
pub const anon18071_CSSM_CERT_BUNDLE_ENCODING_PGP: u32 = 5;

pub const cssm_cert_bundle_header = extern struct {
    BundleType: CSSM_CERT_BUNDLE_TYPE,
    BundleEncoding: CSSM_CERT_BUNDLE_ENCODING,
};

pub const CSSM_CERT_BUNDLE_HEADER = cssm_cert_bundle_header;

pub const CSSM_CERT_BUNDLE_HEADER_PTR = ?*cssm_cert_bundle_header;

pub const cssm_cert_bundle = extern struct {
    BundleHeader: CSSM_CERT_BUNDLE_HEADER,
    Bundle: Asn1Item,
};

pub const CSSM_CERT_BUNDLE = cssm_cert_bundle;

pub const CSSM_CERT_BUNDLE_PTR = ?*cssm_cert_bundle;

pub const anon18261 = u32;
pub const anon18261_CSSM_FIELDVALUE_COMPLEX_DATA_TYPE: u32 = -1;

pub const CSSM_DB_ATTRIBUTE_NAME_FORMAT = uint32;

pub const CSSM_DB_ATTRIBUTE_NAME_FORMAT_PTR = uint32;

pub const anon18331 = u32;
pub const anon18331_CSSM_DB_ATTRIBUTE_NAME_AS_STRING: u32 = 0;
pub const anon18331_CSSM_DB_ATTRIBUTE_NAME_AS_OID: u32 = 1;
pub const anon18331_CSSM_DB_ATTRIBUTE_NAME_AS_INTEGER: u32 = 2;

pub const CSSM_DB_ATTRIBUTE_FORMAT = uint32;

pub const CSSM_DB_ATTRIBUTE_FORMAT_PTR = uint32;

pub const anon18401 = u32;
pub const anon18401_CSSM_DB_ATTRIBUTE_FORMAT_STRING: u32 = 0;
pub const anon18401_CSSM_DB_ATTRIBUTE_FORMAT_SINT32: u32 = 1;
pub const anon18401_CSSM_DB_ATTRIBUTE_FORMAT_UINT32: u32 = 2;
pub const anon18401_CSSM_DB_ATTRIBUTE_FORMAT_BIG_NUM: u32 = 3;
pub const anon18401_CSSM_DB_ATTRIBUTE_FORMAT_REAL: u32 = 4;
pub const anon18401_CSSM_DB_ATTRIBUTE_FORMAT_TIME_DATE: u32 = 5;
pub const anon18401_CSSM_DB_ATTRIBUTE_FORMAT_BLOB: u32 = 6;
pub const anon18401_CSSM_DB_ATTRIBUTE_FORMAT_MULTI_UINT32: u32 = 7;
pub const anon18401_CSSM_DB_ATTRIBUTE_FORMAT_COMPLEX: u32 = 8;

pub const cssm_db_attribute_info = extern struct {
    pub const cssm_db_attribute_label = extern union {
        AttributeName: ?*c_char,
        AttributeOID: Asn1Oid,
        AttributeID: uint32,
    };

    AttributeNameFormat: CSSM_DB_ATTRIBUTE_NAME_FORMAT,
    Label: cssm_db_attribute_info.cssm_db_attribute_label,
    AttributeFormat: CSSM_DB_ATTRIBUTE_FORMAT,
};

pub const CSSM_DB_ATTRIBUTE_INFO = cssm_db_attribute_info;

pub const CSSM_DB_ATTRIBUTE_INFO_PTR = ?*cssm_db_attribute_info;

pub const cssm_db_attribute_data = extern struct {
    Info: CSSM_DB_ATTRIBUTE_INFO,
    NumberOfValues: uint32,
    Value: CSSM_DATA_PTR,
};

pub const CSSM_DB_ATTRIBUTE_DATA = cssm_db_attribute_data;

pub const CSSM_DB_ATTRIBUTE_DATA_PTR = ?*cssm_db_attribute_data;

pub const CSSM_DB_RECORDTYPE = uint32;

pub const anon18691 = u32;
pub const anon18691_CSSM_DB_RECORDTYPE_SCHEMA_START: u32 = 0;
pub const anon18691_CSSM_DB_RECORDTYPE_SCHEMA_END: u32 = 4;
pub const anon18691_CSSM_DB_RECORDTYPE_OPEN_GROUP_START: u32 = 10;
pub const anon18691_CSSM_DB_RECORDTYPE_OPEN_GROUP_END: u32 = 18;
pub const anon18691_CSSM_DB_RECORDTYPE_APP_DEFINED_START: u32 = -2147483648;
pub const anon18691_CSSM_DB_RECORDTYPE_APP_DEFINED_END: u32 = -1;
pub const anon18691_CSSM_DL_DB_SCHEMA_INFO: u32 = 0;
pub const anon18691_CSSM_DL_DB_SCHEMA_INDEXES: u32 = 1;
pub const anon18691_CSSM_DL_DB_SCHEMA_ATTRIBUTES: u32 = 2;
pub const anon18691_CSSM_DL_DB_SCHEMA_PARSING_MODULE: u32 = 3;
pub const anon18691_CSSM_DL_DB_RECORD_ANY: u32 = 10;
pub const anon18691_CSSM_DL_DB_RECORD_CERT: u32 = 11;
pub const anon18691_CSSM_DL_DB_RECORD_CRL: u32 = 12;
pub const anon18691_CSSM_DL_DB_RECORD_POLICY: u32 = 13;
pub const anon18691_CSSM_DL_DB_RECORD_GENERIC: u32 = 14;
pub const anon18691_CSSM_DL_DB_RECORD_PUBLIC_KEY: u32 = 15;
pub const anon18691_CSSM_DL_DB_RECORD_PRIVATE_KEY: u32 = 16;
pub const anon18691_CSSM_DL_DB_RECORD_SYMMETRIC_KEY: u32 = 17;
pub const anon18691_CSSM_DL_DB_RECORD_ALL_KEYS: u32 = 18;

pub const anon18961 = u32;
pub const anon18961_CSSM_DB_CERT_USE_TRUSTED: u32 = 1;
pub const anon18961_CSSM_DB_CERT_USE_SYSTEM: u32 = 2;
pub const anon18961_CSSM_DB_CERT_USE_OWNER: u32 = 4;
pub const anon18961_CSSM_DB_CERT_USE_REVOKED: u32 = 8;
pub const anon18961_CSSM_DB_CERT_USE_SIGNING: u32 = 16;
pub const anon18961_CSSM_DB_CERT_USE_PRIVACY: u32 = 32;

pub const cssm_db_record_attribute_info = extern struct {
    DataRecordType: CSSM_DB_RECORDTYPE,
    NumberOfAttributes: uint32,
    AttributeInfo: CSSM_DB_ATTRIBUTE_INFO_PTR,
};

pub const CSSM_DB_RECORD_ATTRIBUTE_INFO = cssm_db_record_attribute_info;

pub const CSSM_DB_RECORD_ATTRIBUTE_INFO_PTR = ?*cssm_db_record_attribute_info;

pub const cssm_db_record_attribute_data = extern struct {
    DataRecordType: CSSM_DB_RECORDTYPE,
    SemanticInformation: uint32,
    NumberOfAttributes: uint32,
    AttributeData: CSSM_DB_ATTRIBUTE_DATA_PTR,
};

pub const CSSM_DB_RECORD_ATTRIBUTE_DATA = cssm_db_record_attribute_data;

pub const CSSM_DB_RECORD_ATTRIBUTE_DATA_PTR = ?*cssm_db_record_attribute_data;

pub const cssm_db_parsing_module_info = extern struct {
    RecordType: CSSM_DB_RECORDTYPE,
    ModuleSubserviceUid: CSSM_SUBSERVICE_UID,
};

pub const CSSM_DB_PARSING_MODULE_INFO = cssm_db_parsing_module_info;

pub const CSSM_DB_PARSING_MODULE_INFO_PTR = ?*cssm_db_parsing_module_info;

pub const CSSM_DB_INDEX_TYPE = uint32;

pub const anon19241 = u32;
pub const anon19241_CSSM_DB_INDEX_UNIQUE: u32 = 0;
pub const anon19241_CSSM_DB_INDEX_NONUNIQUE: u32 = 1;

pub const CSSM_DB_INDEXED_DATA_LOCATION = uint32;

pub const anon19301 = u32;
pub const anon19301_CSSM_DB_INDEX_ON_UNKNOWN: u32 = 0;
pub const anon19301_CSSM_DB_INDEX_ON_ATTRIBUTE: u32 = 1;
pub const anon19301_CSSM_DB_INDEX_ON_RECORD: u32 = 2;

pub const cssm_db_index_info = extern struct {
    IndexType: CSSM_DB_INDEX_TYPE,
    IndexedDataLocation: CSSM_DB_INDEXED_DATA_LOCATION,
    Info: CSSM_DB_ATTRIBUTE_INFO,
};

pub const CSSM_DB_INDEX_INFO = cssm_db_index_info;

pub const CSSM_DB_INDEX_INFO_PTR = ?*cssm_db_index_info;

pub const cssm_db_unique_record = extern struct {
    RecordLocator: CSSM_DB_INDEX_INFO,
    RecordIdentifier: Asn1Item,
};

pub const CSSM_DB_UNIQUE_RECORD = cssm_db_unique_record;

pub const CSSM_DB_UNIQUE_RECORD_PTR = ?*cssm_db_unique_record;

pub const cssm_db_record_index_info = extern struct {
    DataRecordType: CSSM_DB_RECORDTYPE,
    NumberOfIndexes: uint32,
    IndexInfo: CSSM_DB_INDEX_INFO_PTR,
};

pub const CSSM_DB_RECORD_INDEX_INFO = cssm_db_record_index_info;

pub const CSSM_DB_RECORD_INDEX_INFO_PTR = ?*cssm_db_record_index_info;

pub const CSSM_DB_ACCESS_TYPE = uint32;

pub const CSSM_DB_ACCESS_TYPE_PTR = uint32;

pub const anon19541 = u32;
pub const anon19541_CSSM_DB_ACCESS_READ: u32 = 1;
pub const anon19541_CSSM_DB_ACCESS_WRITE: u32 = 2;
pub const anon19541_CSSM_DB_ACCESS_PRIVILEGED: u32 = 4;

pub const CSSM_DB_MODIFY_MODE = uint32;

pub const anon19611 = u32;
pub const anon19611_CSSM_DB_MODIFY_ATTRIBUTE_NONE: u32 = 0;
pub const anon19611_CSSM_DB_MODIFY_ATTRIBUTE_ADD: u32 = 1;
pub const anon19611_CSSM_DB_MODIFY_ATTRIBUTE_DELETE: u32 = 2;
pub const anon19611_CSSM_DB_MODIFY_ATTRIBUTE_REPLACE: u32 = 3;

pub const cssm_dbinfo = extern struct {
    NumberOfRecordTypes: uint32,
    DefaultParsingModules: CSSM_DB_PARSING_MODULE_INFO_PTR,
    RecordAttributeNames: CSSM_DB_RECORD_ATTRIBUTE_INFO_PTR,
    RecordIndexes: CSSM_DB_RECORD_INDEX_INFO_PTR,
    IsLocal: CSSM_BOOL,
    AccessPath: ?*c_char,
    Reserved: ?*anyopaque,
};

pub const CSSM_DBINFO = cssm_dbinfo;

pub const CSSM_DBINFO_PTR = ?*cssm_dbinfo;

pub const CSSM_DB_OPERATOR = uint32;

pub const CSSM_DB_OPERATOR_PTR = uint32;

pub const anon19831 = u32;
pub const anon19831_CSSM_DB_EQUAL: u32 = 0;
pub const anon19831_CSSM_DB_NOT_EQUAL: u32 = 1;
pub const anon19831_CSSM_DB_LESS_THAN: u32 = 2;
pub const anon19831_CSSM_DB_GREATER_THAN: u32 = 3;
pub const anon19831_CSSM_DB_CONTAINS: u32 = 4;
pub const anon19831_CSSM_DB_CONTAINS_INITIAL_SUBSTRING: u32 = 5;
pub const anon19831_CSSM_DB_CONTAINS_FINAL_SUBSTRING: u32 = 6;

pub const CSSM_DB_CONJUNCTIVE = uint32;

pub const CSSM_DB_CONJUNCTIVE_PTR = uint32;

pub const anon19941 = u32;
pub const anon19941_CSSM_DB_NONE: u32 = 0;
pub const anon19941_CSSM_DB_AND: u32 = 1;
pub const anon19941_CSSM_DB_OR: u32 = 2;

pub const cssm_selection_predicate = extern struct {
    DbOperator: CSSM_DB_OPERATOR,
    Attribute: CSSM_DB_ATTRIBUTE_DATA,
};

pub const CSSM_SELECTION_PREDICATE = cssm_selection_predicate;

pub const CSSM_SELECTION_PREDICATE_PTR = ?*cssm_selection_predicate;

pub const anon20051 = u32;
pub const anon20051_CSSM_QUERY_TIMELIMIT_NONE: u32 = 0;

pub const anon20091 = u32;
pub const anon20091_CSSM_QUERY_SIZELIMIT_NONE: u32 = 0;

pub const cssm_query_limits = extern struct {
    TimeLimit: uint32,
    SizeLimit: uint32,
};

pub const CSSM_QUERY_LIMITS = cssm_query_limits;

pub const CSSM_QUERY_LIMITS_PTR = ?*cssm_query_limits;

pub const CSSM_QUERY_FLAGS = uint32;

pub const anon20191 = u32;
pub const anon20191_CSSM_QUERY_RETURN_DATA: u32 = 1;

pub const cssm_query = extern struct {
    RecordType: CSSM_DB_RECORDTYPE,
    Conjunctive: CSSM_DB_CONJUNCTIVE,
    NumSelectionPredicates: uint32,
    SelectionPredicate: CSSM_SELECTION_PREDICATE_PTR,
    QueryLimits: CSSM_QUERY_LIMITS,
    QueryFlags: CSSM_QUERY_FLAGS,
};

pub const CSSM_QUERY = cssm_query;

pub const CSSM_QUERY_PTR = ?*cssm_query;

pub const CSSM_DLTYPE = uint32;

pub const CSSM_DLTYPE_PTR = uint32;

pub const anon20331 = u32;
pub const anon20331_CSSM_DL_UNKNOWN: u32 = 0;
pub const anon20331_CSSM_DL_CUSTOM: u32 = 1;
pub const anon20331_CSSM_DL_LDAP: u32 = 2;
pub const anon20331_CSSM_DL_ODBC: u32 = 3;
pub const anon20331_CSSM_DL_PKCS11: u32 = 4;
pub const anon20331_CSSM_DL_FFS: u32 = 5;
pub const anon20331_CSSM_DL_MEMORY: u32 = 6;
pub const anon20331_CSSM_DL_REMOTEDIR: u32 = 7;

pub const CSSM_DL_CUSTOM_ATTRIBUTES = ?*anyopaque;

pub const CSSM_DL_LDAP_ATTRIBUTES = ?*anyopaque;

pub const CSSM_DL_ODBC_ATTRIBUTES = ?*anyopaque;

pub const CSSM_DL_FFS_ATTRIBUTES = ?*anyopaque;

pub const cssm_dl_pkcs11_attributes = extern struct {
    DeviceAccessFlags: uint32,
};

pub const CSSM_DL_PKCS11_ATTRIBUTE = ?*cssm_dl_pkcs11_attributes;

pub const CSSM_DL_PKCS11_ATTRIBUTE_PTR = ?*cssm_dl_pkcs11_attributes;

pub const anon20531 = u32;
pub const anon20531_CSSM_DB_DATASTORES_UNKNOWN: u32 = -1;

pub const cssm_name_list = extern struct {
    NumStrings: uint32,
    String: ?*?*c_char,
};

pub const CSSM_NAME_LIST = cssm_name_list;

pub const CSSM_NAME_LIST_PTR = ?*cssm_name_list;

pub const CSSM_DB_RETRIEVAL_MODES = uint32;

pub const anon20631 = u32;
pub const anon20631_CSSM_DB_TRANSACTIONAL_MODE: u32 = 0;
pub const anon20631_CSSM_DB_FILESYSTEMSCAN_MODE: u32 = 1;

pub const cssm_db_schema_attribute_info = extern struct {
    AttributeId: uint32,
    AttributeName: ?*c_char,
    AttributeNameID: Asn1Oid,
    DataType: CSSM_DB_ATTRIBUTE_FORMAT,
};

pub const CSSM_DB_SCHEMA_ATTRIBUTE_INFO = cssm_db_schema_attribute_info;

pub const CSSM_DB_SCHEMA_ATTRIBUTE_INFO_PTR = ?*cssm_db_schema_attribute_info;

pub const cssm_db_schema_index_info = extern struct {
    AttributeId: uint32,
    IndexId: uint32,
    IndexType: CSSM_DB_INDEX_TYPE,
    IndexedDataLocation: CSSM_DB_INDEXED_DATA_LOCATION,
};

pub const CSSM_DB_SCHEMA_INDEX_INFO = cssm_db_schema_index_info;

pub const CSSM_DB_SCHEMA_INDEX_INFO_PTR = ?*cssm_db_schema_index_info;

pub const CSSM_BER_TAG = uint8;

pub const CSSM_X509_ALGORITHM_IDENTIFIER_PTR = Asn1AlgId;

pub const cssm_x509_type_value_pair = extern struct {
    type: Asn1Oid,
    valueType: CSSM_BER_TAG,
    value: Asn1Item,
};

pub const CSSM_X509_TYPE_VALUE_PAIR = cssm_x509_type_value_pair;

pub const CSSM_X509_TYPE_VALUE_PAIR_PTR = ?*cssm_x509_type_value_pair;

pub const cssm_x509_rdn = extern struct {
    numberOfPairs: uint32,
    AttributeTypeAndValue: CSSM_X509_TYPE_VALUE_PAIR_PTR,
};

pub const CSSM_X509_RDN = cssm_x509_rdn;

pub const CSSM_X509_RDN_PTR = ?*cssm_x509_rdn;

pub const cssm_x509_name = extern struct {
    numberOfRDNs: uint32,
    RelativeDistinguishedName: CSSM_X509_RDN_PTR,
};

pub const CSSM_X509_NAME = cssm_x509_name;

pub const CSSM_X509_NAME_PTR = ?*cssm_x509_name;

pub const CSSM_X509_SUBJECT_PUBLIC_KEY_INFO_PTR = Asn1PubKeyInfo;

pub const cssm_x509_time = extern struct {
    timeType: CSSM_BER_TAG,
    time: Asn1Item,
};

pub const CSSM_X509_TIME = cssm_x509_time;

pub const CSSM_X509_TIME_PTR = ?*cssm_x509_time;

pub const x509_validity = extern struct {
    notBefore: CSSM_X509_TIME,
    notAfter: CSSM_X509_TIME,
};

pub const CSSM_X509_VALIDITY = x509_validity;

pub const CSSM_X509_VALIDITY_PTR = ?*x509_validity;

pub const CSSM_X509_OPTION = CSSM_BOOL;

pub const cssm_x509ext_basicConstraints = extern struct {
    cA: CSSM_BOOL,
    pathLenConstraintPresent: CSSM_X509_OPTION,
    pathLenConstraint: uint32,
};

pub const CSSM_X509EXT_BASICCONSTRAINTS = cssm_x509ext_basicConstraints;

pub const CSSM_X509EXT_BASICCONSTRAINTS_PTR = ?*cssm_x509ext_basicConstraints;

pub const extension_data_format = u32;
pub const extension_data_format_CSSM_X509_DATAFORMAT_ENCODED: u32 = 0;
pub const extension_data_format_CSSM_X509_DATAFORMAT_PARSED: u32 = 1;
pub const extension_data_format_CSSM_X509_DATAFORMAT_PAIR: u32 = 2;

pub const CSSM_X509EXT_DATA_FORMAT = extension_data_format;

pub const cssm_x509_extensionTagAndValue = extern struct {
    type: CSSM_BER_TAG,
    value: Asn1Item,
};

pub const CSSM_X509EXT_TAGandVALUE = cssm_x509_extensionTagAndValue;

pub const CSSM_X509EXT_TAGandVALUE_PTR = ?*cssm_x509_extensionTagAndValue;

pub const cssm_x509ext_pair = extern struct {
    tagAndValue: CSSM_X509EXT_TAGandVALUE,
    parsedValue: ?*anyopaque,
};

pub const CSSM_X509EXT_PAIR = cssm_x509ext_pair;

pub const CSSM_X509EXT_PAIR_PTR = ?*cssm_x509ext_pair;

pub const cssm_x509_extension = extern struct {
    pub const cssm_x509ext_value = extern union {
        tagAndValue: CSSM_X509EXT_TAGandVALUE,
        parsedValue: ?*anyopaque,
        valuePair: CSSM_X509EXT_PAIR,
    };

    extnId: Asn1Oid,
    critical: CSSM_BOOL,
    format: CSSM_X509EXT_DATA_FORMAT,
    value: cssm_x509_extension.cssm_x509ext_value,
    BERvalue: Asn1Item,
};

pub const CSSM_X509_EXTENSION = cssm_x509_extension;

pub const CSSM_X509_EXTENSION_PTR = ?*cssm_x509_extension;

pub const cssm_x509_extensions = extern struct {
    numberOfExtensions: uint32,
    extensions: CSSM_X509_EXTENSION_PTR,
};

pub const CSSM_X509_EXTENSIONS = cssm_x509_extensions;

pub const CSSM_X509_EXTENSIONS_PTR = ?*cssm_x509_extensions;

pub const cssm_x509_tbs_certificate = extern struct {
    version: Asn1Item,
    serialNumber: Asn1Item,
    signature: Asn1AlgId,
    issuer: CSSM_X509_NAME,
    validity: CSSM_X509_VALIDITY,
    subject: CSSM_X509_NAME,
    subjectPublicKeyInfo: Asn1PubKeyInfo,
    issuerUniqueIdentifier: Asn1Item,
    subjectUniqueIdentifier: Asn1Item,
    extensions: CSSM_X509_EXTENSIONS,
};

pub const CSSM_X509_TBS_CERTIFICATE = cssm_x509_tbs_certificate;

pub const CSSM_X509_TBS_CERTIFICATE_PTR = ?*cssm_x509_tbs_certificate;

pub const cssm_x509_signature = extern struct {
    algorithmIdentifier: Asn1AlgId,
    encrypted: Asn1Item,
};

pub const CSSM_X509_SIGNATURE = cssm_x509_signature;

pub const CSSM_X509_SIGNATURE_PTR = ?*cssm_x509_signature;

pub const cssm_x509_signed_certificate = extern struct {
    certificate: CSSM_X509_TBS_CERTIFICATE,
    signature: CSSM_X509_SIGNATURE,
};

pub const CSSM_X509_SIGNED_CERTIFICATE = cssm_x509_signed_certificate;

pub const CSSM_X509_SIGNED_CERTIFICATE_PTR = ?*cssm_x509_signed_certificate;

pub const cssm_x509ext_policyQualifierInfo = extern struct {
    policyQualifierId: Asn1Oid,
    value: Asn1Item,
};

pub const CSSM_X509EXT_POLICYQUALIFIERINFO = cssm_x509ext_policyQualifierInfo;

pub const CSSM_X509EXT_POLICYQUALIFIERINFO_PTR = ?*cssm_x509ext_policyQualifierInfo;

pub const cssm_x509ext_policyQualifiers = extern struct {
    numberOfPolicyQualifiers: uint32,
    policyQualifier: CSSM_X509EXT_POLICYQUALIFIERINFO,
};

pub const CSSM_X509EXT_POLICYQUALIFIERS = cssm_x509ext_policyQualifiers;

pub const CSSM_X509EXT_POLICYQUALIFIERS_PTR = ?*cssm_x509ext_policyQualifiers;

pub const cssm_x509ext_policyInfo = extern struct {
    policyIdentifier: Asn1Oid,
    policyQualifiers: CSSM_X509EXT_POLICYQUALIFIERS,
};

pub const CSSM_X509EXT_POLICYINFO = cssm_x509ext_policyInfo;

pub const CSSM_X509EXT_POLICYINFO_PTR = ?*cssm_x509ext_policyInfo;

pub const cssm_x509_revoked_cert_entry = extern struct {
    certificateSerialNumber: Asn1Item,
    revocationDate: CSSM_X509_TIME,
    extensions: CSSM_X509_EXTENSIONS,
};

pub const CSSM_X509_REVOKED_CERT_ENTRY = cssm_x509_revoked_cert_entry;

pub const CSSM_X509_REVOKED_CERT_ENTRY_PTR = ?*cssm_x509_revoked_cert_entry;

pub const cssm_x509_revoked_cert_list = extern struct {
    numberOfRevokedCertEntries: uint32,
    revokedCertEntry: CSSM_X509_REVOKED_CERT_ENTRY_PTR,
};

pub const CSSM_X509_REVOKED_CERT_LIST = cssm_x509_revoked_cert_list;

pub const CSSM_X509_REVOKED_CERT_LIST_PTR = ?*cssm_x509_revoked_cert_list;

pub const cssm_x509_tbs_certlist = extern struct {
    version: Asn1Item,
    signature: Asn1AlgId,
    issuer: CSSM_X509_NAME,
    thisUpdate: CSSM_X509_TIME,
    nextUpdate: CSSM_X509_TIME,
    revokedCertificates: CSSM_X509_REVOKED_CERT_LIST_PTR,
    extensions: CSSM_X509_EXTENSIONS,
};

pub const CSSM_X509_TBS_CERTLIST = cssm_x509_tbs_certlist;

pub const CSSM_X509_TBS_CERTLIST_PTR = ?*cssm_x509_tbs_certlist;

pub const cssm_x509_signed_crl = extern struct {
    tbsCertList: CSSM_X509_TBS_CERTLIST,
    signature: CSSM_X509_SIGNATURE,
};

pub const CSSM_X509_SIGNED_CRL = cssm_x509_signed_crl;

pub const CSSM_X509_SIGNED_CRL_PTR = ?*cssm_x509_signed_crl;

extern "Security" fn SecCertificateGetTypeID() callconv(.C) core_foundation.TypeID;
pub const certificateGetTypeID = SecCertificateGetTypeID;

extern "Security" fn SecCertificateCreateWithData(allocator: core_foundation.AllocatorRef, data: core_foundation.DataRef) callconv(.C) CertificateRef;
pub const certificateCreateWithData = SecCertificateCreateWithData;

extern "Security" fn SecCertificateCopyData(certificate: CertificateRef) callconv(.C) core_foundation.DataRef;
pub const certificateCopyData = SecCertificateCopyData;

extern "Security" fn SecCertificateCopySubjectSummary(certificate: CertificateRef) callconv(.C) core_foundation.StringRef;
pub const certificateCopySubjectSummary = SecCertificateCopySubjectSummary;

extern "Security" fn SecCertificateCopyCommonName(certificate: CertificateRef, commonName: ?*core_foundation.StringRef) callconv(.C) objc.OSStatus;
pub const certificateCopyCommonName = SecCertificateCopyCommonName;

extern "Security" fn SecCertificateCopyEmailAddresses(certificate: CertificateRef, emailAddresses: ?*core_foundation.ArrayRef) callconv(.C) objc.OSStatus;
pub const certificateCopyEmailAddresses = SecCertificateCopyEmailAddresses;

extern "Security" fn SecCertificateCopyNormalizedIssuerSequence(certificate: CertificateRef) callconv(.C) core_foundation.DataRef;
pub const certificateCopyNormalizedIssuerSequence = SecCertificateCopyNormalizedIssuerSequence;

extern "Security" fn SecCertificateCopyNormalizedSubjectSequence(certificate: CertificateRef) callconv(.C) core_foundation.DataRef;
pub const certificateCopyNormalizedSubjectSequence = SecCertificateCopyNormalizedSubjectSequence;

extern "Security" fn SecCertificateCopyKey(certificate: CertificateRef) callconv(.C) KeyRef;
pub const certificateCopyKey = SecCertificateCopyKey;

extern "Security" fn SecCertificateCopyPublicKey(certificate: CertificateRef, key: ?*KeyRef) callconv(.C) objc.OSStatus;
pub const certificateCopyPublicKey = SecCertificateCopyPublicKey;

extern "Security" fn SecCertificateCopySerialNumberData(certificate: CertificateRef, @"error": ?*core_foundation.ErrorRef) callconv(.C) core_foundation.DataRef;
pub const certificateCopySerialNumberData = SecCertificateCopySerialNumberData;

extern "Security" fn SecCertificateCopyNotValidBeforeDate(certificate: CertificateRef) callconv(.C) core_foundation.DateRef;
pub const certificateCopyNotValidBeforeDate = SecCertificateCopyNotValidBeforeDate;

extern "Security" fn SecCertificateCopyNotValidAfterDate(certificate: CertificateRef) callconv(.C) core_foundation.DateRef;
pub const certificateCopyNotValidAfterDate = SecCertificateCopyNotValidAfterDate;

extern "Security" fn SecCertificateCopySerialNumber(certificate: CertificateRef, @"error": ?*core_foundation.ErrorRef) callconv(.C) core_foundation.DataRef;
pub const certificateCopySerialNumber = SecCertificateCopySerialNumber;

pub const anon2671 = u32;
pub const anon2671_SecSubjectItemAttr: u32 = 1937072746;
pub const anon2671_SecIssuerItemAttr: u32 = 1769173877;
pub const anon2671_SecSerialNumberItemAttr: u32 = 1936614002;
pub const anon2671_SecPublicKeyHashItemAttr: u32 = 1752198009;
pub const anon2671_SecSubjectKeyIdentifierItemAttr: u32 = 1936419172;
pub const anon2671_SecCertTypeItemAttr: u32 = 1668577648;
pub const anon2671_SecCertEncodingItemAttr: u32 = 1667591779;

extern "Security" fn SecCertificateCreateFromData(
    data: ?*const Asn1Item,
    @"type": CSSM_CERT_TYPE,
    encoding: CSSM_CERT_ENCODING,
    certificate: ?*CertificateRef,
) callconv(.C) objc.OSStatus;
pub const certificateCreateFromData = SecCertificateCreateFromData;

extern "Security" fn SecCertificateAddToKeychain(certificate: CertificateRef, keychain: KeychainRef) callconv(.C) objc.OSStatus;
pub const certificateAddToKeychain = SecCertificateAddToKeychain;

extern "Security" fn SecCertificateGetData(certificate: CertificateRef, data: CSSM_DATA_PTR) callconv(.C) objc.OSStatus;
pub const certificateGetData = SecCertificateGetData;

extern "Security" fn SecCertificateGetType(certificate: CertificateRef, certificateType: ?*CSSM_CERT_TYPE) callconv(.C) objc.OSStatus;
pub const certificateGetType = SecCertificateGetType;

extern "Security" fn SecCertificateGetSubject(certificate: CertificateRef, subject: ?*?*const CSSM_X509_NAME) callconv(.C) objc.OSStatus;
pub const certificateGetSubject = SecCertificateGetSubject;

extern "Security" fn SecCertificateGetIssuer(certificate: CertificateRef, issuer: ?*?*const CSSM_X509_NAME) callconv(.C) objc.OSStatus;
pub const certificateGetIssuer = SecCertificateGetIssuer;

extern "Security" fn SecCertificateGetCLHandle(certificate: CertificateRef, clHandle: ?*CSSM_CL_HANDLE) callconv(.C) objc.OSStatus;
pub const certificateGetCLHandle = SecCertificateGetCLHandle;

extern "Security" fn SecCertificateGetAlgorithmID(certificate: CertificateRef, algid: ?*?*const Asn1AlgId) callconv(.C) objc.OSStatus;
pub const certificateGetAlgorithmID = SecCertificateGetAlgorithmID;

extern "Security" fn SecCertificateCopyPreference(name: core_foundation.StringRef, keyUsage: uint32, certificate: ?*CertificateRef) callconv(.C) objc.OSStatus;
pub const certificateCopyPreference = SecCertificateCopyPreference;

extern "Security" fn SecCertificateCopyPreferred(name: core_foundation.StringRef, keyUsage: core_foundation.ArrayRef) callconv(.C) CertificateRef;
pub const certificateCopyPreferred = SecCertificateCopyPreferred;

extern "Security" fn SecCertificateSetPreference(
    certificate: CertificateRef,
    name: core_foundation.StringRef,
    keyUsage: uint32,
    date: core_foundation.DateRef,
) callconv(.C) objc.OSStatus;
pub const certificateSetPreference = SecCertificateSetPreference;

extern "Security" fn SecCertificateSetPreferred(certificate: CertificateRef, name: core_foundation.StringRef, keyUsage: core_foundation.ArrayRef) callconv(.C) objc.OSStatus;
pub const certificateSetPreferred = SecCertificateSetPreferred;

pub const KeyUsage = objc.uint32_t;
pub const KeyUsage_Unspecified: objc.uint32_t = 0;
pub const KeyUsage_DigitalSignature: objc.uint32_t = 1;
pub const KeyUsage_NonRepudiation: objc.uint32_t = 2;
pub const KeyUsage_ContentCommitment: objc.uint32_t = 2;
pub const KeyUsage_KeyEncipherment: objc.uint32_t = 4;
pub const KeyUsage_DataEncipherment: objc.uint32_t = 8;
pub const KeyUsage_KeyAgreement: objc.uint32_t = 16;
pub const KeyUsage_KeyCertSign: objc.uint32_t = 32;
pub const KeyUsage_CRLSign: objc.uint32_t = 64;
pub const KeyUsage_EncipherOnly: objc.uint32_t = 128;
pub const KeyUsage_DecipherOnly: objc.uint32_t = 256;
pub const KeyUsage_Critical: objc.uint32_t = -2147483648;
pub const KeyUsage_All: objc.uint32_t = 2147483647;

extern "Security" fn SecCertificateCopyValues(certificate: CertificateRef, keys: core_foundation.ArrayRef, @"error": ?*core_foundation.ErrorRef) callconv(.C) core_foundation.DictionaryRef;
pub const certificateCopyValues = SecCertificateCopyValues;

extern "Security" fn SecCertificateCopyLongDescription(alloc: core_foundation.AllocatorRef, certificate: CertificateRef, @"error": ?*core_foundation.ErrorRef) callconv(.C) core_foundation.StringRef;
pub const certificateCopyLongDescription = SecCertificateCopyLongDescription;

extern "Security" fn SecCertificateCopyShortDescription(alloc: core_foundation.AllocatorRef, certificate: CertificateRef, @"error": ?*core_foundation.ErrorRef) callconv(.C) core_foundation.StringRef;
pub const certificateCopyShortDescription = SecCertificateCopyShortDescription;

extern "Security" fn SecCertificateCopyNormalizedIssuerContent(certificate: CertificateRef, @"error": ?*core_foundation.ErrorRef) callconv(.C) core_foundation.DataRef;
pub const certificateCopyNormalizedIssuerContent = SecCertificateCopyNormalizedIssuerContent;

extern "Security" fn SecCertificateCopyNormalizedSubjectContent(certificate: CertificateRef, @"error": ?*core_foundation.ErrorRef) callconv(.C) core_foundation.DataRef;
pub const certificateCopyNormalizedSubjectContent = SecCertificateCopyNormalizedSubjectContent;

extern "Security" fn SecIdentityGetTypeID() callconv(.C) core_foundation.TypeID;
pub const identityGetTypeID = SecIdentityGetTypeID;

extern "Security" fn SecIdentityCreateWithCertificate(keychainOrArray: core_foundation.TypeRef, certificateRef: CertificateRef, identityRef: ?*IdentityRef) callconv(.C) objc.OSStatus;
pub const identityCreateWithCertificate = SecIdentityCreateWithCertificate;

extern "Security" fn SecIdentityCopyCertificate(identityRef: IdentityRef, certificateRef: ?*CertificateRef) callconv(.C) objc.OSStatus;
pub const identityCopyCertificate = SecIdentityCopyCertificate;

extern "Security" fn SecIdentityCopyPrivateKey(identityRef: IdentityRef, privateKeyRef: ?*KeyRef) callconv(.C) objc.OSStatus;
pub const identityCopyPrivateKey = SecIdentityCopyPrivateKey;

extern "Security" fn SecIdentityCopyPreference(
    name: core_foundation.StringRef,
    keyUsage: CSSM_KEYUSE,
    validIssuers: core_foundation.ArrayRef,
    identity: ?*IdentityRef,
) callconv(.C) objc.OSStatus;
pub const identityCopyPreference = SecIdentityCopyPreference;

extern "Security" fn SecIdentityCopyPreferred(name: core_foundation.StringRef, keyUsage: core_foundation.ArrayRef, validIssuers: core_foundation.ArrayRef) callconv(.C) IdentityRef;
pub const identityCopyPreferred = SecIdentityCopyPreferred;

extern "Security" fn SecIdentitySetPreference(identity: IdentityRef, name: core_foundation.StringRef, keyUsage: CSSM_KEYUSE) callconv(.C) objc.OSStatus;
pub const identitySetPreference = SecIdentitySetPreference;

extern "Security" fn SecIdentitySetPreferred(identity: IdentityRef, name: core_foundation.StringRef, keyUsage: core_foundation.ArrayRef) callconv(.C) objc.OSStatus;
pub const identitySetPreferred = SecIdentitySetPreferred;

extern "Security" fn SecIdentityCopySystemIdentity(domain: core_foundation.StringRef, idRef: ?*IdentityRef, actualDomain: ?*core_foundation.StringRef) callconv(.C) objc.OSStatus;
pub const identityCopySystemIdentity = SecIdentityCopySystemIdentity;

extern "Security" fn SecIdentitySetSystemIdentity(domain: core_foundation.StringRef, idRef: IdentityRef) callconv(.C) objc.OSStatus;
pub const identitySetSystemIdentity = SecIdentitySetSystemIdentity;

extern "Security" fn SecAccessControlGetTypeID() callconv(.C) core_foundation.TypeID;
pub const accessControlGetTypeID = SecAccessControlGetTypeID;

pub const AccessControlCreateFlags = core_foundation.OptionFlags;
pub const AccessControlCreateFlags_UserPresence: core_foundation.OptionFlags = 1;
pub const AccessControlCreateFlags_BiometryAny: core_foundation.OptionFlags = 2;
pub const AccessControlCreateFlags_TouchIDAny: core_foundation.OptionFlags = 2;
pub const AccessControlCreateFlags_BiometryCurrentSet: core_foundation.OptionFlags = 8;
pub const AccessControlCreateFlags_TouchIDCurrentSet: core_foundation.OptionFlags = 8;
pub const AccessControlCreateFlags_DevicePasscode: core_foundation.OptionFlags = 16;
pub const AccessControlCreateFlags_Watch: core_foundation.OptionFlags = 32;
pub const AccessControlCreateFlags_Companion: core_foundation.OptionFlags = 32;
pub const AccessControlCreateFlags_Or: core_foundation.OptionFlags = 16384;
pub const AccessControlCreateFlags_And: core_foundation.OptionFlags = 32768;
pub const AccessControlCreateFlags_PrivateKeyUsage: core_foundation.OptionFlags = 1073741824;
pub const AccessControlCreateFlags_ApplicationPassword: core_foundation.OptionFlags = 2147483648;

extern "Security" fn SecAccessControlCreateWithFlags(
    allocator: core_foundation.AllocatorRef,
    protection: core_foundation.TypeRef,
    flags: AccessControlCreateFlags,
    @"error": ?*core_foundation.ErrorRef,
) callconv(.C) AccessControlRef;
pub const accessControlCreateWithFlags = SecAccessControlCreateWithFlags;

extern "Security" fn SecItemCopyMatching(query: core_foundation.DictionaryRef, result: ?*core_foundation.TypeRef) callconv(.C) objc.OSStatus;
pub const itemCopyMatching = SecItemCopyMatching;

extern "Security" fn SecItemAdd(attributes: core_foundation.DictionaryRef, result: ?*core_foundation.TypeRef) callconv(.C) objc.OSStatus;
pub const itemAdd = SecItemAdd;

extern "Security" fn SecItemUpdate(query: core_foundation.DictionaryRef, attributesToUpdate: core_foundation.DictionaryRef) callconv(.C) objc.OSStatus;
pub const itemUpdate = SecItemUpdate;

extern "Security" fn SecItemDelete(query: core_foundation.DictionaryRef) callconv(.C) objc.OSStatus;
pub const itemDelete = SecItemDelete;

pub const AccessOwnerType = objc.UInt32;

pub const anon491 = u32;
pub const anon491_SecUseOnlyUID: u32 = 1;
pub const anon491_SecUseOnlyGID: u32 = 2;
pub const anon491_SecHonorRoot: u32 = 256;
pub const anon491_SecMatchBits: u32 = 3;

extern "Security" fn SecAccessGetTypeID() callconv(.C) core_foundation.TypeID;
pub const accessGetTypeID = SecAccessGetTypeID;

extern "Security" fn SecAccessCreate(descriptor: core_foundation.StringRef, trustedlist: core_foundation.ArrayRef, accessRef: ?*AccessRef) callconv(.C) objc.OSStatus;
pub const accessCreate = SecAccessCreate;

extern "Security" fn SecAccessCreateFromOwnerAndACL(
    owner: ?*const CSSM_ACL_OWNER_PROTOTYPE,
    aclCount: uint32,
    acls: ?*const CSSM_ACL_ENTRY_INFO,
    accessRef: ?*AccessRef,
) callconv(.C) objc.OSStatus;
pub const accessCreateFromOwnerAndACL = SecAccessCreateFromOwnerAndACL;

extern "Security" fn SecAccessCreateWithOwnerAndACL(
    userId: objc.uid_t,
    groupId: objc.gid_t,
    ownerType: AccessOwnerType,
    acls: core_foundation.ArrayRef,
    @"error": ?*core_foundation.ErrorRef,
) callconv(.C) AccessRef;
pub const accessCreateWithOwnerAndACL = SecAccessCreateWithOwnerAndACL;

extern "Security" fn SecAccessGetOwnerAndACL(
    accessRef: AccessRef,
    owner: ?*CSSM_ACL_OWNER_PROTOTYPE_PTR,
    aclCount: ?*uint32,
    acls: ?*CSSM_ACL_ENTRY_INFO_PTR,
) callconv(.C) objc.OSStatus;
pub const accessGetOwnerAndACL = SecAccessGetOwnerAndACL;

extern "Security" fn SecAccessCopyOwnerAndACL(
    accessRef: AccessRef,
    userId: ?*objc.uid_t,
    groupId: ?*objc.gid_t,
    ownerType: ?*AccessOwnerType,
    aclList: ?*core_foundation.ArrayRef,
) callconv(.C) objc.OSStatus;
pub const accessCopyOwnerAndACL = SecAccessCopyOwnerAndACL;

extern "Security" fn SecAccessCopyACLList(accessRef: AccessRef, aclList: ?*core_foundation.ArrayRef) callconv(.C) objc.OSStatus;
pub const accessCopyACLList = SecAccessCopyACLList;

extern "Security" fn SecAccessCopySelectedACLList(accessRef: AccessRef, action: CSSM_ACL_AUTHORIZATION_TAG, aclList: ?*core_foundation.ArrayRef) callconv(.C) objc.OSStatus;
pub const accessCopySelectedACLList = SecAccessCopySelectedACLList;

extern "Security" fn SecAccessCopyMatchingACLList(accessRef: AccessRef, authorizationTag: core_foundation.TypeRef) callconv(.C) core_foundation.ArrayRef;
pub const accessCopyMatchingACLList = SecAccessCopyMatchingACLList;

pub const anon1241 = i32;
pub const anon1241_SecKeyKeyClass: i32 = 0;
pub const anon1241_SecKeyPrintName: i32 = 1;
pub const anon1241_SecKeyAlias: i32 = 2;
pub const anon1241_SecKeyPermanent: i32 = 3;
pub const anon1241_SecKeyPrivate: i32 = 4;
pub const anon1241_SecKeyModifiable: i32 = 5;
pub const anon1241_SecKeyLabel: i32 = 6;
pub const anon1241_SecKeyApplicationTag: i32 = 7;
pub const anon1241_SecKeyKeyCreator: i32 = 8;
pub const anon1241_SecKeyKeyType: i32 = 9;
pub const anon1241_SecKeyKeySizeInBits: i32 = 10;
pub const anon1241_SecKeyEffectiveKeySize: i32 = 11;
pub const anon1241_SecKeyStartDate: i32 = 12;
pub const anon1241_SecKeyEndDate: i32 = 13;
pub const anon1241_SecKeySensitive: i32 = 14;
pub const anon1241_SecKeyAlwaysSensitive: i32 = 15;
pub const anon1241_SecKeyExtractable: i32 = 16;
pub const anon1241_SecKeyNeverExtractable: i32 = 17;
pub const anon1241_SecKeyEncrypt: i32 = 18;
pub const anon1241_SecKeyDecrypt: i32 = 19;
pub const anon1241_SecKeyDerive: i32 = 20;
pub const anon1241_SecKeySign: i32 = 21;
pub const anon1241_SecKeyVerify: i32 = 22;
pub const anon1241_SecKeySignRecover: i32 = 23;
pub const anon1241_SecKeyVerifyRecover: i32 = 24;
pub const anon1241_SecKeyWrap: i32 = 25;
pub const anon1241_SecKeyUnwrap: i32 = 26;

pub const CredentialType = uint32;
pub const CredentialType_Default: uint32 = 0;
pub const CredentialType_WithUI: uint32 = 1;
pub const CredentialType_NoUI: uint32 = 2;

pub const Padding = objc.uint32_t;
pub const Padding_None: objc.uint32_t = 0;
pub const Padding_PKCS1: objc.uint32_t = 1;
pub const Padding_OAEP: objc.uint32_t = 2;
pub const Padding_SigRaw: objc.uint32_t = 16384;
pub const Padding_PKCS1MD2: objc.uint32_t = 32768;
pub const Padding_PKCS1MD5: objc.uint32_t = 32769;
pub const Padding_PKCS1SHA1: objc.uint32_t = 32770;
pub const Padding_PKCS1SHA224: objc.uint32_t = 32771;
pub const Padding_PKCS1SHA256: objc.uint32_t = 32772;
pub const Padding_PKCS1SHA384: objc.uint32_t = 32773;
pub const Padding_PKCS1SHA512: objc.uint32_t = 32774;

pub const KeySizes = objc.uint32_t;
pub const KeySizes_DefaultKeySize: objc.uint32_t = 0;
pub const KeySizes_Sec3DES192: objc.uint32_t = 192;
pub const KeySizes_AES128: objc.uint32_t = 128;
pub const KeySizes_AES192: objc.uint32_t = 192;
pub const KeySizes_AES256: objc.uint32_t = 256;
pub const KeySizes_Secp192r1: objc.uint32_t = 192;
pub const KeySizes_Secp256r1: objc.uint32_t = 256;
pub const KeySizes_Secp384r1: objc.uint32_t = 384;
pub const KeySizes_Secp521r1: objc.uint32_t = 521;
pub const KeySizes_RSAMin: objc.uint32_t = 1024;
pub const KeySizes_RSAMax: objc.uint32_t = 4096;

extern "Security" fn SecKeyGetTypeID() callconv(.C) core_foundation.TypeID;
pub const keyGetTypeID = SecKeyGetTypeID;

extern "Security" fn SecKeyCreatePair(
    keychainRef: KeychainRef,
    algorithm: CSSM_ALGORITHMS,
    keySizeInBits: uint32,
    contextHandle: CSSM_CC_HANDLE,
    publicKeyUsage: CSSM_KEYUSE,
    publicKeyAttr: uint32,
    privateKeyUsage: CSSM_KEYUSE,
    privateKeyAttr: uint32,
    initialAccess: AccessRef,
    publicKey: ?*KeyRef,
    privateKey: ?*KeyRef,
) callconv(.C) objc.OSStatus;
pub const keyCreatePair = SecKeyCreatePair;

extern "Security" fn SecKeyGenerate(
    keychainRef: KeychainRef,
    algorithm: CSSM_ALGORITHMS,
    keySizeInBits: uint32,
    contextHandle: CSSM_CC_HANDLE,
    keyUsage: CSSM_KEYUSE,
    keyAttr: uint32,
    initialAccess: AccessRef,
    keyRef: ?*KeyRef,
) callconv(.C) objc.OSStatus;
pub const keyGenerate = SecKeyGenerate;

extern "Security" fn SecKeyGetCSSMKey(key: KeyRef, cssmKey: ?*?*const CSSM_KEY) callconv(.C) objc.OSStatus;
pub const keyGetCSSMKey = SecKeyGetCSSMKey;

extern "Security" fn SecKeyGetCSPHandle(keyRef: KeyRef, cspHandle: ?*CSSM_CSP_HANDLE) callconv(.C) objc.OSStatus;
pub const keyGetCSPHandle = SecKeyGetCSPHandle;

extern "Security" fn SecKeyGetCredentials(
    keyRef: KeyRef,
    operation: CSSM_ACL_AUTHORIZATION_TAG,
    credentialType: CredentialType,
    outCredentials: ?*?*const CSSM_ACCESS_CREDENTIALS,
) callconv(.C) objc.OSStatus;
pub const keyGetCredentials = SecKeyGetCredentials;

extern "Security" fn SecKeyGenerateSymmetric(parameters: core_foundation.DictionaryRef, @"error": ?*core_foundation.ErrorRef) callconv(.C) KeyRef;
pub const keyGenerateSymmetric = SecKeyGenerateSymmetric;

extern "Security" fn SecKeyCreateFromData(parameters: core_foundation.DictionaryRef, keyData: core_foundation.DataRef, @"error": ?*core_foundation.ErrorRef) callconv(.C) KeyRef;
pub const keyCreateFromData = SecKeyCreateFromData;

pub const KeyGeneratePairBlock = *const fn (KeyRef, KeyRef, core_foundation.ErrorRef) callconv(.C) void;

extern "Security" fn SecKeyGeneratePairAsync(parameters: core_foundation.DictionaryRef, deliveryQueue: objc.dispatch_queue_t, result: KeyGeneratePairBlock) callconv(.C) void;
pub const keyGeneratePairAsync = SecKeyGeneratePairAsync;

extern "Security" fn SecKeyDeriveFromPassword(password: core_foundation.StringRef, parameters: core_foundation.DictionaryRef, @"error": ?*core_foundation.ErrorRef) callconv(.C) KeyRef;
pub const keyDeriveFromPassword = SecKeyDeriveFromPassword;

extern "Security" fn SecKeyWrapSymmetric(
    keyToWrap: KeyRef,
    wrappingKey: KeyRef,
    parameters: core_foundation.DictionaryRef,
    @"error": ?*core_foundation.ErrorRef,
) callconv(.C) core_foundation.DataRef;
pub const keyWrapSymmetric = SecKeyWrapSymmetric;

extern "Security" fn SecKeyUnwrapSymmetric(
    keyToUnwrap: ?*core_foundation.DataRef,
    unwrappingKey: KeyRef,
    parameters: core_foundation.DictionaryRef,
    @"error": ?*core_foundation.ErrorRef,
) callconv(.C) KeyRef;
pub const keyUnwrapSymmetric = SecKeyUnwrapSymmetric;

extern "Security" fn SecKeyGeneratePair(parameters: core_foundation.DictionaryRef, publicKey: ?*KeyRef, privateKey: ?*KeyRef) callconv(.C) objc.OSStatus;
pub const keyGeneratePair = SecKeyGeneratePair;

extern "Security" fn SecKeyCreateRandomKey(parameters: core_foundation.DictionaryRef, @"error": ?*core_foundation.ErrorRef) callconv(.C) KeyRef;
pub const keyCreateRandomKey = SecKeyCreateRandomKey;

extern "Security" fn SecKeyCreateWithData(keyData: core_foundation.DataRef, attributes: core_foundation.DictionaryRef, @"error": ?*core_foundation.ErrorRef) callconv(.C) KeyRef;
pub const keyCreateWithData = SecKeyCreateWithData;

extern "Security" fn SecKeyGetBlockSize(key: KeyRef) callconv(.C) objc.size_t;
pub const keyGetBlockSize = SecKeyGetBlockSize;

extern "Security" fn SecKeyCopyExternalRepresentation(key: KeyRef, @"error": ?*core_foundation.ErrorRef) callconv(.C) core_foundation.DataRef;
pub const keyCopyExternalRepresentation = SecKeyCopyExternalRepresentation;

extern "Security" fn SecKeyCopyAttributes(key: KeyRef) callconv(.C) core_foundation.DictionaryRef;
pub const keyCopyAttributes = SecKeyCopyAttributes;

extern "Security" fn SecKeyCopyPublicKey(key: KeyRef) callconv(.C) KeyRef;
pub const keyCopyPublicKey = SecKeyCopyPublicKey;

pub const KeyAlgorithm = core_foundation.StringRef;

extern "Security" fn SecKeyCreateSignature(
    key: KeyRef,
    algorithm: KeyAlgorithm,
    dataToSign: core_foundation.DataRef,
    @"error": ?*core_foundation.ErrorRef,
) callconv(.C) core_foundation.DataRef;
pub const keyCreateSignature = SecKeyCreateSignature;

extern "Security" fn SecKeyVerifySignature(
    key: KeyRef,
    algorithm: KeyAlgorithm,
    signedData: core_foundation.DataRef,
    signature: core_foundation.DataRef,
    @"error": ?*core_foundation.ErrorRef,
) callconv(.C) objc.Boolean;
pub const keyVerifySignature = SecKeyVerifySignature;

extern "Security" fn SecKeyCreateEncryptedData(
    key: KeyRef,
    algorithm: KeyAlgorithm,
    plaintext: core_foundation.DataRef,
    @"error": ?*core_foundation.ErrorRef,
) callconv(.C) core_foundation.DataRef;
pub const keyCreateEncryptedData = SecKeyCreateEncryptedData;

extern "Security" fn SecKeyCreateDecryptedData(
    key: KeyRef,
    algorithm: KeyAlgorithm,
    ciphertext: core_foundation.DataRef,
    @"error": ?*core_foundation.ErrorRef,
) callconv(.C) core_foundation.DataRef;
pub const keyCreateDecryptedData = SecKeyCreateDecryptedData;

pub const KeyKeyExchangeParameter = core_foundation.StringRef;

extern "Security" fn SecKeyCopyKeyExchangeResult(
    privateKey: KeyRef,
    algorithm: KeyAlgorithm,
    publicKey: KeyRef,
    parameters: core_foundation.DictionaryRef,
    @"error": ?*core_foundation.ErrorRef,
) callconv(.C) core_foundation.DataRef;
pub const keyCopyKeyExchangeResult = SecKeyCopyKeyExchangeResult;

pub const KeyOperationType = core_foundation.Index;
pub const KeyOperationType_Sign: core_foundation.Index = 0;
pub const KeyOperationType_Verify: core_foundation.Index = 1;
pub const KeyOperationType_Encrypt: core_foundation.Index = 2;
pub const KeyOperationType_Decrypt: core_foundation.Index = 3;
pub const KeyOperationType_KeyExchange: core_foundation.Index = 4;

extern "Security" fn SecKeyIsAlgorithmSupported(key: KeyRef, operation: KeyOperationType, algorithm: KeyAlgorithm) callconv(.C) objc.Boolean;
pub const keyIsAlgorithmSupported = SecKeyIsAlgorithmSupported;

extern "Security" fn SecPolicyGetTypeID() callconv(.C) core_foundation.TypeID;
pub const policyGetTypeID = SecPolicyGetTypeID;

extern "Security" fn SecPolicyCopyProperties(policyRef: PolicyRef) callconv(.C) core_foundation.DictionaryRef;
pub const policyCopyProperties = SecPolicyCopyProperties;

extern "Security" fn SecPolicyCreateBasicX509() callconv(.C) PolicyRef;
pub const policyCreateBasicX509 = SecPolicyCreateBasicX509;

extern "Security" fn SecPolicyCreateSSL(server: objc.Boolean, hostname: core_foundation.StringRef) callconv(.C) PolicyRef;
pub const policyCreateSSL = SecPolicyCreateSSL;

pub const anon2091 = core_foundation.OptionFlags;
pub const anon2091_SecRevocationOCSPMethod: core_foundation.OptionFlags = 1;
pub const anon2091_SecRevocationCRLMethod: core_foundation.OptionFlags = 2;
pub const anon2091_SecRevocationPreferCRL: core_foundation.OptionFlags = 4;
pub const anon2091_SecRevocationRequirePositiveResponse: core_foundation.OptionFlags = 8;
pub const anon2091_SecRevocationNetworkAccessDisabled: core_foundation.OptionFlags = 16;
pub const anon2091_SecRevocationUseAnyAvailableMethod: core_foundation.OptionFlags = 3;

extern "Security" fn SecPolicyCreateRevocation(revocationFlags: core_foundation.OptionFlags) callconv(.C) PolicyRef;
pub const policyCreateRevocation = SecPolicyCreateRevocation;

extern "Security" fn SecPolicyCreateWithProperties(policyIdentifier: core_foundation.TypeRef, properties: core_foundation.DictionaryRef) callconv(.C) PolicyRef;
pub const policyCreateWithProperties = SecPolicyCreateWithProperties;

extern "Security" fn SecPolicyCreateWithOID(policyOID: core_foundation.TypeRef) callconv(.C) PolicyRef;
pub const policyCreateWithOID = SecPolicyCreateWithOID;

extern "Security" fn SecPolicyGetOID(policyRef: PolicyRef, oid: ?*Asn1Oid) callconv(.C) objc.OSStatus;
pub const policyGetOID = SecPolicyGetOID;

extern "Security" fn SecPolicyGetValue(policyRef: PolicyRef, value: ?*Asn1Item) callconv(.C) objc.OSStatus;
pub const policyGetValue = SecPolicyGetValue;

extern "Security" fn SecPolicySetValue(policyRef: PolicyRef, value: ?*const Asn1Item) callconv(.C) objc.OSStatus;
pub const policySetValue = SecPolicySetValue;

extern "Security" fn SecPolicySetProperties(policyRef: PolicyRef, properties: core_foundation.DictionaryRef) callconv(.C) objc.OSStatus;
pub const policySetProperties = SecPolicySetProperties;

extern "Security" fn SecPolicyGetTPHandle(policyRef: PolicyRef, tpHandle: ?*CSSM_TP_HANDLE) callconv(.C) objc.OSStatus;
pub const policyGetTPHandle = SecPolicyGetTPHandle;

pub const __SecRandom = extern struct {};

pub const RandomRef = __SecRandom;

extern "Security" fn SecRandomCopyBytes(rnd: RandomRef, count: objc.size_t, bytes: ?*anyopaque) callconv(.C) i32;
pub const randomCopyBytes = SecRandomCopyBytes;

pub const anon551 = i32;
pub const anon551_CSSM_BASE_ERROR: i32 = -2147418112;
pub const anon551_CSSM_ERRORCODE_MODULE_EXTENT: i32 = 2048;
pub const anon551_CSSM_ERRORCODE_CUSTOM_OFFSET: i32 = 1024;
pub const anon551_CSSM_ERRORCODE_COMMON_EXTENT: i32 = 256;
pub const anon551_CSSM_CSSM_BASE_ERROR: i32 = -2147418112;
pub const anon551_CSSM_CSSM_PRIVATE_ERROR: i32 = -2147417088;
pub const anon551_CSSM_CSP_BASE_ERROR: i32 = -2147416064;
pub const anon551_CSSM_CSP_PRIVATE_ERROR: i32 = -2147415040;
pub const anon551_CSSM_DL_BASE_ERROR: i32 = -2147414016;
pub const anon551_CSSM_DL_PRIVATE_ERROR: i32 = -2147412992;
pub const anon551_CSSM_CL_BASE_ERROR: i32 = -2147411968;
pub const anon551_CSSM_CL_PRIVATE_ERROR: i32 = -2147410944;
pub const anon551_CSSM_TP_BASE_ERROR: i32 = -2147409920;
pub const anon551_CSSM_TP_PRIVATE_ERROR: i32 = -2147408896;
pub const anon551_CSSM_KR_BASE_ERROR: i32 = -2147407872;
pub const anon551_CSSM_KR_PRIVATE_ERROR: i32 = -2147406848;
pub const anon551_CSSM_AC_BASE_ERROR: i32 = -2147405824;
pub const anon551_CSSM_AC_PRIVATE_ERROR: i32 = -2147404800;

pub const anon791 = i32;
pub const anon791_CSSM_MDS_BASE_ERROR: i32 = -2147414016;
pub const anon791_CSSM_MDS_PRIVATE_ERROR: i32 = -2147412992;

pub const anon941 = u32;
pub const anon941_CSSM_ERRCODE_INTERNAL_ERROR: u32 = 1;
pub const anon941_CSSM_ERRCODE_MEMORY_ERROR: u32 = 2;
pub const anon941_CSSM_ERRCODE_MDS_ERROR: u32 = 3;
pub const anon941_CSSM_ERRCODE_INVALID_POINTER: u32 = 4;
pub const anon941_CSSM_ERRCODE_INVALID_INPUT_POINTER: u32 = 5;
pub const anon941_CSSM_ERRCODE_INVALID_OUTPUT_POINTER: u32 = 6;
pub const anon941_CSSM_ERRCODE_FUNCTION_NOT_IMPLEMENTED: u32 = 7;
pub const anon941_CSSM_ERRCODE_SELF_CHECK_FAILED: u32 = 8;
pub const anon941_CSSM_ERRCODE_OS_ACCESS_DENIED: u32 = 9;
pub const anon941_CSSM_ERRCODE_FUNCTION_FAILED: u32 = 10;
pub const anon941_CSSM_ERRCODE_MODULE_MANIFEST_VERIFY_FAILED: u32 = 11;
pub const anon941_CSSM_ERRCODE_INVALID_GUID: u32 = 12;

pub const anon1101 = u32;
pub const anon1101_CSSM_ERRCODE_OPERATION_AUTH_DENIED: u32 = 32;
pub const anon1101_CSSM_ERRCODE_OBJECT_USE_AUTH_DENIED: u32 = 33;
pub const anon1101_CSSM_ERRCODE_OBJECT_MANIP_AUTH_DENIED: u32 = 34;
pub const anon1101_CSSM_ERRCODE_OBJECT_ACL_NOT_SUPPORTED: u32 = 35;
pub const anon1101_CSSM_ERRCODE_OBJECT_ACL_REQUIRED: u32 = 36;
pub const anon1101_CSSM_ERRCODE_INVALID_ACCESS_CREDENTIALS: u32 = 37;
pub const anon1101_CSSM_ERRCODE_INVALID_ACL_BASE_CERTS: u32 = 38;
pub const anon1101_CSSM_ERRCODE_ACL_BASE_CERTS_NOT_SUPPORTED: u32 = 39;
pub const anon1101_CSSM_ERRCODE_INVALID_SAMPLE_VALUE: u32 = 40;
pub const anon1101_CSSM_ERRCODE_SAMPLE_VALUE_NOT_SUPPORTED: u32 = 41;
pub const anon1101_CSSM_ERRCODE_INVALID_ACL_SUBJECT_VALUE: u32 = 42;
pub const anon1101_CSSM_ERRCODE_ACL_SUBJECT_TYPE_NOT_SUPPORTED: u32 = 43;
pub const anon1101_CSSM_ERRCODE_INVALID_ACL_CHALLENGE_CALLBACK: u32 = 44;
pub const anon1101_CSSM_ERRCODE_ACL_CHALLENGE_CALLBACK_FAILED: u32 = 45;
pub const anon1101_CSSM_ERRCODE_INVALID_ACL_ENTRY_TAG: u32 = 46;
pub const anon1101_CSSM_ERRCODE_ACL_ENTRY_TAG_NOT_FOUND: u32 = 47;
pub const anon1101_CSSM_ERRCODE_INVALID_ACL_EDIT_MODE: u32 = 48;
pub const anon1101_CSSM_ERRCODE_ACL_CHANGE_FAILED: u32 = 49;
pub const anon1101_CSSM_ERRCODE_INVALID_NEW_ACL_ENTRY: u32 = 50;
pub const anon1101_CSSM_ERRCODE_INVALID_NEW_ACL_OWNER: u32 = 51;
pub const anon1101_CSSM_ERRCODE_ACL_DELETE_FAILED: u32 = 52;
pub const anon1101_CSSM_ERRCODE_ACL_REPLACE_FAILED: u32 = 53;
pub const anon1101_CSSM_ERRCODE_ACL_ADD_FAILED: u32 = 54;

pub const anon1371 = u32;
pub const anon1371_CSSM_ERRCODE_INVALID_CONTEXT_HANDLE: u32 = 64;
pub const anon1371_CSSM_ERRCODE_INCOMPATIBLE_VERSION: u32 = 65;
pub const anon1371_CSSM_ERRCODE_INVALID_CERTGROUP_POINTER: u32 = 66;
pub const anon1371_CSSM_ERRCODE_INVALID_CERT_POINTER: u32 = 67;
pub const anon1371_CSSM_ERRCODE_INVALID_CRL_POINTER: u32 = 68;
pub const anon1371_CSSM_ERRCODE_INVALID_FIELD_POINTER: u32 = 69;
pub const anon1371_CSSM_ERRCODE_INVALID_DATA: u32 = 70;
pub const anon1371_CSSM_ERRCODE_CRL_ALREADY_SIGNED: u32 = 71;
pub const anon1371_CSSM_ERRCODE_INVALID_NUMBER_OF_FIELDS: u32 = 72;
pub const anon1371_CSSM_ERRCODE_VERIFICATION_FAILURE: u32 = 73;
pub const anon1371_CSSM_ERRCODE_INVALID_DB_HANDLE: u32 = 74;
pub const anon1371_CSSM_ERRCODE_PRIVILEGE_NOT_GRANTED: u32 = 75;
pub const anon1371_CSSM_ERRCODE_INVALID_DB_LIST: u32 = 76;
pub const anon1371_CSSM_ERRCODE_INVALID_DB_LIST_POINTER: u32 = 77;
pub const anon1371_CSSM_ERRCODE_UNKNOWN_FORMAT: u32 = 78;
pub const anon1371_CSSM_ERRCODE_UNKNOWN_TAG: u32 = 79;
pub const anon1371_CSSM_ERRCODE_INVALID_CSP_HANDLE: u32 = 80;
pub const anon1371_CSSM_ERRCODE_INVALID_DL_HANDLE: u32 = 81;
pub const anon1371_CSSM_ERRCODE_INVALID_CL_HANDLE: u32 = 82;
pub const anon1371_CSSM_ERRCODE_INVALID_TP_HANDLE: u32 = 83;
pub const anon1371_CSSM_ERRCODE_INVALID_KR_HANDLE: u32 = 84;
pub const anon1371_CSSM_ERRCODE_INVALID_AC_HANDLE: u32 = 85;
pub const anon1371_CSSM_ERRCODE_INVALID_PASSTHROUGH_ID: u32 = 86;
pub const anon1371_CSSM_ERRCODE_INVALID_NETWORK_ADDR: u32 = 87;
pub const anon1371_CSSM_ERRCODE_INVALID_CRYPTO_DATA: u32 = 88;

pub const anon1821 = i32;
pub const anon1821_CSSMERR_CSSM_INVALID_CONTEXT_HANDLE: i32 = -2147418048;
pub const anon1821_CSSMERR_CSSM_INCOMPATIBLE_VERSION: i32 = -2147418047;
pub const anon1821_CSSMERR_CSSM_PRIVILEGE_NOT_GRANTED: i32 = -2147418037;

pub const anon1891 = i32;
pub const anon1891_CSSM_CSSM_BASE_CSSM_ERROR: i32 = -2147417840;
pub const anon1891_CSSMERR_CSSM_SCOPE_NOT_SUPPORTED: i32 = -2147417839;
pub const anon1891_CSSMERR_CSSM_PVC_ALREADY_CONFIGURED: i32 = -2147417838;
pub const anon1891_CSSMERR_CSSM_INVALID_PVC: i32 = -2147417837;
pub const anon1891_CSSMERR_CSSM_EMM_LOAD_FAILED: i32 = -2147417836;
pub const anon1891_CSSMERR_CSSM_EMM_UNLOAD_FAILED: i32 = -2147417835;
pub const anon1891_CSSMERR_CSSM_ADDIN_LOAD_FAILED: i32 = -2147417834;
pub const anon1891_CSSMERR_CSSM_INVALID_KEY_HIERARCHY: i32 = -2147417833;
pub const anon1891_CSSMERR_CSSM_ADDIN_UNLOAD_FAILED: i32 = -2147417832;
pub const anon1891_CSSMERR_CSSM_LIB_REF_NOT_FOUND: i32 = -2147417831;
pub const anon1891_CSSMERR_CSSM_INVALID_ADDIN_FUNCTION_TABLE: i32 = -2147417830;
pub const anon1891_CSSMERR_CSSM_EMM_AUTHENTICATE_FAILED: i32 = -2147417829;
pub const anon1891_CSSMERR_CSSM_ADDIN_AUTHENTICATE_FAILED: i32 = -2147417828;
pub const anon1891_CSSMERR_CSSM_INVALID_SERVICE_MASK: i32 = -2147417827;
pub const anon1891_CSSMERR_CSSM_MODULE_NOT_LOADED: i32 = -2147417826;
pub const anon1891_CSSMERR_CSSM_INVALID_SUBSERVICEID: i32 = -2147417825;
pub const anon1891_CSSMERR_CSSM_BUFFER_TOO_SMALL: i32 = -2147417824;
pub const anon1891_CSSMERR_CSSM_INVALID_ATTRIBUTE: i32 = -2147417823;
pub const anon1891_CSSMERR_CSSM_ATTRIBUTE_NOT_IN_CONTEXT: i32 = -2147417822;
pub const anon1891_CSSMERR_CSSM_MODULE_MANAGER_INITIALIZE_FAIL: i32 = -2147417821;
pub const anon1891_CSSMERR_CSSM_MODULE_MANAGER_NOT_FOUND: i32 = -2147417820;
pub const anon1891_CSSMERR_CSSM_EVENT_NOTIFICATION_CALLBACK_NOT_FOUND: i32 = -2147417819;

pub const anon2161 = i32;
pub const anon2161_CSSMERR_CSP_INTERNAL_ERROR: i32 = -2147416063;
pub const anon2161_CSSMERR_CSP_MEMORY_ERROR: i32 = -2147416062;
pub const anon2161_CSSMERR_CSP_MDS_ERROR: i32 = -2147416061;
pub const anon2161_CSSMERR_CSP_INVALID_POINTER: i32 = -2147416060;
pub const anon2161_CSSMERR_CSP_INVALID_INPUT_POINTER: i32 = -2147416059;
pub const anon2161_CSSMERR_CSP_INVALID_OUTPUT_POINTER: i32 = -2147416058;
pub const anon2161_CSSMERR_CSP_FUNCTION_NOT_IMPLEMENTED: i32 = -2147416057;
pub const anon2161_CSSMERR_CSP_SELF_CHECK_FAILED: i32 = -2147416056;
pub const anon2161_CSSMERR_CSP_OS_ACCESS_DENIED: i32 = -2147416055;
pub const anon2161_CSSMERR_CSP_FUNCTION_FAILED: i32 = -2147416054;

pub const anon2301 = i32;
pub const anon2301_CSSMERR_CSP_OPERATION_AUTH_DENIED: i32 = -2147416032;
pub const anon2301_CSSMERR_CSP_OBJECT_USE_AUTH_DENIED: i32 = -2147416031;
pub const anon2301_CSSMERR_CSP_OBJECT_MANIP_AUTH_DENIED: i32 = -2147416030;
pub const anon2301_CSSMERR_CSP_OBJECT_ACL_NOT_SUPPORTED: i32 = -2147416029;
pub const anon2301_CSSMERR_CSP_OBJECT_ACL_REQUIRED: i32 = -2147416028;
pub const anon2301_CSSMERR_CSP_INVALID_ACCESS_CREDENTIALS: i32 = -2147416027;
pub const anon2301_CSSMERR_CSP_INVALID_ACL_BASE_CERTS: i32 = -2147416026;
pub const anon2301_CSSMERR_CSP_ACL_BASE_CERTS_NOT_SUPPORTED: i32 = -2147416025;
pub const anon2301_CSSMERR_CSP_INVALID_SAMPLE_VALUE: i32 = -2147416024;
pub const anon2301_CSSMERR_CSP_SAMPLE_VALUE_NOT_SUPPORTED: i32 = -2147416023;
pub const anon2301_CSSMERR_CSP_INVALID_ACL_SUBJECT_VALUE: i32 = -2147416022;
pub const anon2301_CSSMERR_CSP_ACL_SUBJECT_TYPE_NOT_SUPPORTED: i32 = -2147416021;
pub const anon2301_CSSMERR_CSP_INVALID_ACL_CHALLENGE_CALLBACK: i32 = -2147416020;
pub const anon2301_CSSMERR_CSP_ACL_CHALLENGE_CALLBACK_FAILED: i32 = -2147416019;
pub const anon2301_CSSMERR_CSP_INVALID_ACL_ENTRY_TAG: i32 = -2147416018;
pub const anon2301_CSSMERR_CSP_ACL_ENTRY_TAG_NOT_FOUND: i32 = -2147416017;
pub const anon2301_CSSMERR_CSP_INVALID_ACL_EDIT_MODE: i32 = -2147416016;
pub const anon2301_CSSMERR_CSP_ACL_CHANGE_FAILED: i32 = -2147416015;
pub const anon2301_CSSMERR_CSP_INVALID_NEW_ACL_ENTRY: i32 = -2147416014;
pub const anon2301_CSSMERR_CSP_INVALID_NEW_ACL_OWNER: i32 = -2147416013;
pub const anon2301_CSSMERR_CSP_ACL_DELETE_FAILED: i32 = -2147416012;
pub const anon2301_CSSMERR_CSP_ACL_REPLACE_FAILED: i32 = -2147416011;
pub const anon2301_CSSMERR_CSP_ACL_ADD_FAILED: i32 = -2147416010;

pub const anon2571 = i32;
pub const anon2571_CSSMERR_CSP_INVALID_CONTEXT_HANDLE: i32 = -2147416000;
pub const anon2571_CSSMERR_CSP_PRIVILEGE_NOT_GRANTED: i32 = -2147415989;
pub const anon2571_CSSMERR_CSP_INVALID_DATA: i32 = -2147415994;
pub const anon2571_CSSMERR_CSP_INVALID_PASSTHROUGH_ID: i32 = -2147415978;
pub const anon2571_CSSMERR_CSP_INVALID_CRYPTO_DATA: i32 = -2147415976;
pub const anon2571_CSSM_PADDING_APPLE_SSLv2: i32 = -2147483648;

pub const anon2661 = i32;
pub const anon2661_CSSM_CSP_BASE_CSP_ERROR: i32 = -2147415808;
pub const anon2661_CSSMERR_CSP_INPUT_LENGTH_ERROR: i32 = -2147415807;
pub const anon2661_CSSMERR_CSP_OUTPUT_LENGTH_ERROR: i32 = -2147415806;
pub const anon2661_CSSMERR_CSP_PRIVILEGE_NOT_SUPPORTED: i32 = -2147415805;
pub const anon2661_CSSMERR_CSP_DEVICE_ERROR: i32 = -2147415804;
pub const anon2661_CSSMERR_CSP_DEVICE_MEMORY_ERROR: i32 = -2147415803;
pub const anon2661_CSSMERR_CSP_ATTACH_HANDLE_BUSY: i32 = -2147415802;
pub const anon2661_CSSMERR_CSP_NOT_LOGGED_IN: i32 = -2147415801;
pub const anon2661_CSSMERR_CSP_INVALID_KEY: i32 = -2147415792;
pub const anon2661_CSSMERR_CSP_INVALID_KEY_REFERENCE: i32 = -2147415791;
pub const anon2661_CSSMERR_CSP_INVALID_KEY_CLASS: i32 = -2147415790;
pub const anon2661_CSSMERR_CSP_ALGID_MISMATCH: i32 = -2147415789;
pub const anon2661_CSSMERR_CSP_KEY_USAGE_INCORRECT: i32 = -2147415788;
pub const anon2661_CSSMERR_CSP_KEY_BLOB_TYPE_INCORRECT: i32 = -2147415787;
pub const anon2661_CSSMERR_CSP_KEY_HEADER_INCONSISTENT: i32 = -2147415786;
pub const anon2661_CSSMERR_CSP_UNSUPPORTED_KEY_FORMAT: i32 = -2147415785;
pub const anon2661_CSSMERR_CSP_UNSUPPORTED_KEY_SIZE: i32 = -2147415784;
pub const anon2661_CSSMERR_CSP_INVALID_KEY_POINTER: i32 = -2147415783;
pub const anon2661_CSSMERR_CSP_INVALID_KEYUSAGE_MASK: i32 = -2147415782;
pub const anon2661_CSSMERR_CSP_UNSUPPORTED_KEYUSAGE_MASK: i32 = -2147415781;
pub const anon2661_CSSMERR_CSP_INVALID_KEYATTR_MASK: i32 = -2147415780;
pub const anon2661_CSSMERR_CSP_UNSUPPORTED_KEYATTR_MASK: i32 = -2147415779;
pub const anon2661_CSSMERR_CSP_INVALID_KEY_LABEL: i32 = -2147415778;
pub const anon2661_CSSMERR_CSP_UNSUPPORTED_KEY_LABEL: i32 = -2147415777;
pub const anon2661_CSSMERR_CSP_INVALID_KEY_FORMAT: i32 = -2147415776;
pub const anon2661_CSSMERR_CSP_INVALID_DATA_COUNT: i32 = -2147415768;
pub const anon2661_CSSMERR_CSP_VECTOR_OF_BUFS_UNSUPPORTED: i32 = -2147415767;
pub const anon2661_CSSMERR_CSP_INVALID_INPUT_VECTOR: i32 = -2147415766;
pub const anon2661_CSSMERR_CSP_INVALID_OUTPUT_VECTOR: i32 = -2147415765;
pub const anon2661_CSSMERR_CSP_INVALID_CONTEXT: i32 = -2147415760;
pub const anon2661_CSSMERR_CSP_INVALID_ALGORITHM: i32 = -2147415759;
pub const anon2661_CSSMERR_CSP_INVALID_ATTR_KEY: i32 = -2147415754;
pub const anon2661_CSSMERR_CSP_MISSING_ATTR_KEY: i32 = -2147415753;
pub const anon2661_CSSMERR_CSP_INVALID_ATTR_INIT_VECTOR: i32 = -2147415752;
pub const anon2661_CSSMERR_CSP_MISSING_ATTR_INIT_VECTOR: i32 = -2147415751;
pub const anon2661_CSSMERR_CSP_INVALID_ATTR_SALT: i32 = -2147415750;
pub const anon2661_CSSMERR_CSP_MISSING_ATTR_SALT: i32 = -2147415749;
pub const anon2661_CSSMERR_CSP_INVALID_ATTR_PADDING: i32 = -2147415748;
pub const anon2661_CSSMERR_CSP_MISSING_ATTR_PADDING: i32 = -2147415747;
pub const anon2661_CSSMERR_CSP_INVALID_ATTR_RANDOM: i32 = -2147415746;
pub const anon2661_CSSMERR_CSP_MISSING_ATTR_RANDOM: i32 = -2147415745;
pub const anon2661_CSSMERR_CSP_INVALID_ATTR_SEED: i32 = -2147415744;
pub const anon2661_CSSMERR_CSP_MISSING_ATTR_SEED: i32 = -2147415743;
pub const anon2661_CSSMERR_CSP_INVALID_ATTR_PASSPHRASE: i32 = -2147415742;
pub const anon2661_CSSMERR_CSP_MISSING_ATTR_PASSPHRASE: i32 = -2147415741;
pub const anon2661_CSSMERR_CSP_INVALID_ATTR_KEY_LENGTH: i32 = -2147415740;
pub const anon2661_CSSMERR_CSP_MISSING_ATTR_KEY_LENGTH: i32 = -2147415739;
pub const anon2661_CSSMERR_CSP_INVALID_ATTR_BLOCK_SIZE: i32 = -2147415738;
pub const anon2661_CSSMERR_CSP_MISSING_ATTR_BLOCK_SIZE: i32 = -2147415737;
pub const anon2661_CSSMERR_CSP_INVALID_ATTR_OUTPUT_SIZE: i32 = -2147415708;
pub const anon2661_CSSMERR_CSP_MISSING_ATTR_OUTPUT_SIZE: i32 = -2147415707;
pub const anon2661_CSSMERR_CSP_INVALID_ATTR_ROUNDS: i32 = -2147415706;
pub const anon2661_CSSMERR_CSP_MISSING_ATTR_ROUNDS: i32 = -2147415705;
pub const anon2661_CSSMERR_CSP_INVALID_ATTR_ALG_PARAMS: i32 = -2147415704;
pub const anon2661_CSSMERR_CSP_MISSING_ATTR_ALG_PARAMS: i32 = -2147415703;
pub const anon2661_CSSMERR_CSP_INVALID_ATTR_LABEL: i32 = -2147415702;
pub const anon2661_CSSMERR_CSP_MISSING_ATTR_LABEL: i32 = -2147415701;
pub const anon2661_CSSMERR_CSP_INVALID_ATTR_KEY_TYPE: i32 = -2147415700;
pub const anon2661_CSSMERR_CSP_MISSING_ATTR_KEY_TYPE: i32 = -2147415699;
pub const anon2661_CSSMERR_CSP_INVALID_ATTR_MODE: i32 = -2147415698;
pub const anon2661_CSSMERR_CSP_MISSING_ATTR_MODE: i32 = -2147415697;
pub const anon2661_CSSMERR_CSP_INVALID_ATTR_EFFECTIVE_BITS: i32 = -2147415696;
pub const anon2661_CSSMERR_CSP_MISSING_ATTR_EFFECTIVE_BITS: i32 = -2147415695;
pub const anon2661_CSSMERR_CSP_INVALID_ATTR_START_DATE: i32 = -2147415694;
pub const anon2661_CSSMERR_CSP_MISSING_ATTR_START_DATE: i32 = -2147415693;
pub const anon2661_CSSMERR_CSP_INVALID_ATTR_END_DATE: i32 = -2147415692;
pub const anon2661_CSSMERR_CSP_MISSING_ATTR_END_DATE: i32 = -2147415691;
pub const anon2661_CSSMERR_CSP_INVALID_ATTR_VERSION: i32 = -2147415690;
pub const anon2661_CSSMERR_CSP_MISSING_ATTR_VERSION: i32 = -2147415689;
pub const anon2661_CSSMERR_CSP_INVALID_ATTR_PRIME: i32 = -2147415688;
pub const anon2661_CSSMERR_CSP_MISSING_ATTR_PRIME: i32 = -2147415687;
pub const anon2661_CSSMERR_CSP_INVALID_ATTR_BASE: i32 = -2147415686;
pub const anon2661_CSSMERR_CSP_MISSING_ATTR_BASE: i32 = -2147415685;
pub const anon2661_CSSMERR_CSP_INVALID_ATTR_SUBPRIME: i32 = -2147415684;
pub const anon2661_CSSMERR_CSP_MISSING_ATTR_SUBPRIME: i32 = -2147415683;
pub const anon2661_CSSMERR_CSP_INVALID_ATTR_ITERATION_COUNT: i32 = -2147415682;
pub const anon2661_CSSMERR_CSP_MISSING_ATTR_ITERATION_COUNT: i32 = -2147415681;
pub const anon2661_CSSMERR_CSP_INVALID_ATTR_DL_DB_HANDLE: i32 = -2147415680;
pub const anon2661_CSSMERR_CSP_MISSING_ATTR_DL_DB_HANDLE: i32 = -2147415679;
pub const anon2661_CSSMERR_CSP_INVALID_ATTR_ACCESS_CREDENTIALS: i32 = -2147415678;
pub const anon2661_CSSMERR_CSP_MISSING_ATTR_ACCESS_CREDENTIALS: i32 = -2147415677;
pub const anon2661_CSSMERR_CSP_INVALID_ATTR_PUBLIC_KEY_FORMAT: i32 = -2147415676;
pub const anon2661_CSSMERR_CSP_MISSING_ATTR_PUBLIC_KEY_FORMAT: i32 = -2147415675;
pub const anon2661_CSSMERR_CSP_INVALID_ATTR_PRIVATE_KEY_FORMAT: i32 = -2147415674;
pub const anon2661_CSSMERR_CSP_MISSING_ATTR_PRIVATE_KEY_FORMAT: i32 = -2147415673;
pub const anon2661_CSSMERR_CSP_INVALID_ATTR_SYMMETRIC_KEY_FORMAT: i32 = -2147415672;
pub const anon2661_CSSMERR_CSP_MISSING_ATTR_SYMMETRIC_KEY_FORMAT: i32 = -2147415671;
pub const anon2661_CSSMERR_CSP_INVALID_ATTR_WRAPPED_KEY_FORMAT: i32 = -2147415670;
pub const anon2661_CSSMERR_CSP_MISSING_ATTR_WRAPPED_KEY_FORMAT: i32 = -2147415669;
pub const anon2661_CSSMERR_CSP_STAGED_OPERATION_IN_PROGRESS: i32 = -2147415736;
pub const anon2661_CSSMERR_CSP_STAGED_OPERATION_NOT_STARTED: i32 = -2147415735;
pub const anon2661_CSSMERR_CSP_VERIFY_FAILED: i32 = -2147415734;
pub const anon2661_CSSMERR_CSP_INVALID_SIGNATURE: i32 = -2147415733;
pub const anon2661_CSSMERR_CSP_QUERY_SIZE_UNKNOWN: i32 = -2147415732;
pub const anon2661_CSSMERR_CSP_BLOCK_SIZE_MISMATCH: i32 = -2147415731;
pub const anon2661_CSSMERR_CSP_PRIVATE_KEY_NOT_FOUND: i32 = -2147415730;
pub const anon2661_CSSMERR_CSP_PUBLIC_KEY_INCONSISTENT: i32 = -2147415729;
pub const anon2661_CSSMERR_CSP_DEVICE_VERIFY_FAILED: i32 = -2147415728;
pub const anon2661_CSSMERR_CSP_INVALID_LOGIN_NAME: i32 = -2147415727;
pub const anon2661_CSSMERR_CSP_ALREADY_LOGGED_IN: i32 = -2147415726;
pub const anon2661_CSSMERR_CSP_PRIVATE_KEY_ALREADY_EXISTS: i32 = -2147415725;
pub const anon2661_CSSMERR_CSP_KEY_LABEL_ALREADY_EXISTS: i32 = -2147415724;
pub const anon2661_CSSMERR_CSP_INVALID_DIGEST_ALGORITHM: i32 = -2147415723;
pub const anon2661_CSSMERR_CSP_CRYPTO_DATA_CALLBACK_FAILED: i32 = -2147415722;

pub const anon3801 = i32;
pub const anon3801_CSSMERR_TP_INTERNAL_ERROR: i32 = -2147409919;
pub const anon3801_CSSMERR_TP_MEMORY_ERROR: i32 = -2147409918;
pub const anon3801_CSSMERR_TP_MDS_ERROR: i32 = -2147409917;
pub const anon3801_CSSMERR_TP_INVALID_POINTER: i32 = -2147409916;
pub const anon3801_CSSMERR_TP_INVALID_INPUT_POINTER: i32 = -2147409915;
pub const anon3801_CSSMERR_TP_INVALID_OUTPUT_POINTER: i32 = -2147409914;
pub const anon3801_CSSMERR_TP_FUNCTION_NOT_IMPLEMENTED: i32 = -2147409913;
pub const anon3801_CSSMERR_TP_SELF_CHECK_FAILED: i32 = -2147409912;
pub const anon3801_CSSMERR_TP_OS_ACCESS_DENIED: i32 = -2147409911;
pub const anon3801_CSSMERR_TP_FUNCTION_FAILED: i32 = -2147409910;
pub const anon3801_CSSMERR_TP_INVALID_CONTEXT_HANDLE: i32 = -2147409856;
pub const anon3801_CSSMERR_TP_INVALID_DATA: i32 = -2147409850;
pub const anon3801_CSSMERR_TP_INVALID_DB_LIST: i32 = -2147409844;
pub const anon3801_CSSMERR_TP_INVALID_CERTGROUP_POINTER: i32 = -2147409854;
pub const anon3801_CSSMERR_TP_INVALID_CERT_POINTER: i32 = -2147409853;
pub const anon3801_CSSMERR_TP_INVALID_CRL_POINTER: i32 = -2147409852;
pub const anon3801_CSSMERR_TP_INVALID_FIELD_POINTER: i32 = -2147409851;
pub const anon3801_CSSMERR_TP_INVALID_NETWORK_ADDR: i32 = -2147409833;
pub const anon3801_CSSMERR_TP_CRL_ALREADY_SIGNED: i32 = -2147409849;
pub const anon3801_CSSMERR_TP_INVALID_NUMBER_OF_FIELDS: i32 = -2147409848;
pub const anon3801_CSSMERR_TP_VERIFICATION_FAILURE: i32 = -2147409847;
pub const anon3801_CSSMERR_TP_INVALID_DB_HANDLE: i32 = -2147409846;
pub const anon3801_CSSMERR_TP_UNKNOWN_FORMAT: i32 = -2147409842;
pub const anon3801_CSSMERR_TP_UNKNOWN_TAG: i32 = -2147409841;
pub const anon3801_CSSMERR_TP_INVALID_PASSTHROUGH_ID: i32 = -2147409834;
pub const anon3801_CSSMERR_TP_INVALID_CSP_HANDLE: i32 = -2147409840;
pub const anon3801_CSSMERR_TP_INVALID_DL_HANDLE: i32 = -2147409839;
pub const anon3801_CSSMERR_TP_INVALID_CL_HANDLE: i32 = -2147409838;
pub const anon3801_CSSMERR_TP_INVALID_DB_LIST_POINTER: i32 = -2147409843;

pub const anon4131 = i32;
pub const anon4131_CSSM_TP_BASE_TP_ERROR: i32 = -2147409664;
pub const anon4131_CSSMERR_TP_INVALID_CALLERAUTH_CONTEXT_POINTER: i32 = -2147409663;
pub const anon4131_CSSMERR_TP_INVALID_IDENTIFIER_POINTER: i32 = -2147409662;
pub const anon4131_CSSMERR_TP_INVALID_KEYCACHE_HANDLE: i32 = -2147409661;
pub const anon4131_CSSMERR_TP_INVALID_CERTGROUP: i32 = -2147409660;
pub const anon4131_CSSMERR_TP_INVALID_CRLGROUP: i32 = -2147409659;
pub const anon4131_CSSMERR_TP_INVALID_CRLGROUP_POINTER: i32 = -2147409658;
pub const anon4131_CSSMERR_TP_AUTHENTICATION_FAILED: i32 = -2147409657;
pub const anon4131_CSSMERR_TP_CERTGROUP_INCOMPLETE: i32 = -2147409656;
pub const anon4131_CSSMERR_TP_CERTIFICATE_CANT_OPERATE: i32 = -2147409655;
pub const anon4131_CSSMERR_TP_CERT_EXPIRED: i32 = -2147409654;
pub const anon4131_CSSMERR_TP_CERT_NOT_VALID_YET: i32 = -2147409653;
pub const anon4131_CSSMERR_TP_CERT_REVOKED: i32 = -2147409652;
pub const anon4131_CSSMERR_TP_CERT_SUSPENDED: i32 = -2147409651;
pub const anon4131_CSSMERR_TP_INSUFFICIENT_CREDENTIALS: i32 = -2147409650;
pub const anon4131_CSSMERR_TP_INVALID_ACTION: i32 = -2147409649;
pub const anon4131_CSSMERR_TP_INVALID_ACTION_DATA: i32 = -2147409648;
pub const anon4131_CSSMERR_TP_INVALID_ANCHOR_CERT: i32 = -2147409646;
pub const anon4131_CSSMERR_TP_INVALID_AUTHORITY: i32 = -2147409645;
pub const anon4131_CSSMERR_TP_VERIFY_ACTION_FAILED: i32 = -2147409644;
pub const anon4131_CSSMERR_TP_INVALID_CERTIFICATE: i32 = -2147409643;
pub const anon4131_CSSMERR_TP_INVALID_CERT_AUTHORITY: i32 = -2147409642;
pub const anon4131_CSSMERR_TP_INVALID_CRL_AUTHORITY: i32 = -2147409641;
pub const anon4131_CSSMERR_TP_INVALID_CRL_ENCODING: i32 = -2147409640;
pub const anon4131_CSSMERR_TP_INVALID_CRL_TYPE: i32 = -2147409639;
pub const anon4131_CSSMERR_TP_INVALID_CRL: i32 = -2147409638;
pub const anon4131_CSSMERR_TP_INVALID_FORM_TYPE: i32 = -2147409637;
pub const anon4131_CSSMERR_TP_INVALID_ID: i32 = -2147409636;
pub const anon4131_CSSMERR_TP_INVALID_IDENTIFIER: i32 = -2147409635;
pub const anon4131_CSSMERR_TP_INVALID_INDEX: i32 = -2147409634;
pub const anon4131_CSSMERR_TP_INVALID_NAME: i32 = -2147409633;
pub const anon4131_CSSMERR_TP_INVALID_POLICY_IDENTIFIERS: i32 = -2147409632;
pub const anon4131_CSSMERR_TP_INVALID_TIMESTRING: i32 = -2147409631;
pub const anon4131_CSSMERR_TP_INVALID_REASON: i32 = -2147409630;
pub const anon4131_CSSMERR_TP_INVALID_REQUEST_INPUTS: i32 = -2147409629;
pub const anon4131_CSSMERR_TP_INVALID_RESPONSE_VECTOR: i32 = -2147409628;
pub const anon4131_CSSMERR_TP_INVALID_SIGNATURE: i32 = -2147409627;
pub const anon4131_CSSMERR_TP_INVALID_STOP_ON_POLICY: i32 = -2147409626;
pub const anon4131_CSSMERR_TP_INVALID_CALLBACK: i32 = -2147409625;
pub const anon4131_CSSMERR_TP_INVALID_TUPLE: i32 = -2147409624;
pub const anon4131_CSSMERR_TP_NOT_SIGNER: i32 = -2147409623;
pub const anon4131_CSSMERR_TP_NOT_TRUSTED: i32 = -2147409622;
pub const anon4131_CSSMERR_TP_NO_DEFAULT_AUTHORITY: i32 = -2147409621;
pub const anon4131_CSSMERR_TP_REJECTED_FORM: i32 = -2147409620;
pub const anon4131_CSSMERR_TP_REQUEST_LOST: i32 = -2147409619;
pub const anon4131_CSSMERR_TP_REQUEST_REJECTED: i32 = -2147409618;
pub const anon4131_CSSMERR_TP_UNSUPPORTED_ADDR_TYPE: i32 = -2147409617;
pub const anon4131_CSSMERR_TP_UNSUPPORTED_SERVICE: i32 = -2147409616;
pub const anon4131_CSSMERR_TP_INVALID_TUPLEGROUP_POINTER: i32 = -2147409615;
pub const anon4131_CSSMERR_TP_INVALID_TUPLEGROUP: i32 = -2147409614;

pub const anon4681 = i32;
pub const anon4681_CSSMERR_AC_INTERNAL_ERROR: i32 = -2147405823;
pub const anon4681_CSSMERR_AC_MEMORY_ERROR: i32 = -2147405822;
pub const anon4681_CSSMERR_AC_MDS_ERROR: i32 = -2147405821;
pub const anon4681_CSSMERR_AC_INVALID_POINTER: i32 = -2147405820;
pub const anon4681_CSSMERR_AC_INVALID_INPUT_POINTER: i32 = -2147405819;
pub const anon4681_CSSMERR_AC_INVALID_OUTPUT_POINTER: i32 = -2147405818;
pub const anon4681_CSSMERR_AC_FUNCTION_NOT_IMPLEMENTED: i32 = -2147405817;
pub const anon4681_CSSMERR_AC_SELF_CHECK_FAILED: i32 = -2147405816;
pub const anon4681_CSSMERR_AC_OS_ACCESS_DENIED: i32 = -2147405815;
pub const anon4681_CSSMERR_AC_FUNCTION_FAILED: i32 = -2147405814;
pub const anon4681_CSSMERR_AC_INVALID_CONTEXT_HANDLE: i32 = -2147405760;
pub const anon4681_CSSMERR_AC_INVALID_DATA: i32 = -2147405754;
pub const anon4681_CSSMERR_AC_INVALID_DB_LIST: i32 = -2147405748;
pub const anon4681_CSSMERR_AC_INVALID_PASSTHROUGH_ID: i32 = -2147405738;
pub const anon4681_CSSMERR_AC_INVALID_DL_HANDLE: i32 = -2147405743;
pub const anon4681_CSSMERR_AC_INVALID_CL_HANDLE: i32 = -2147405742;
pub const anon4681_CSSMERR_AC_INVALID_TP_HANDLE: i32 = -2147405741;
pub const anon4681_CSSMERR_AC_INVALID_DB_HANDLE: i32 = -2147405750;
pub const anon4681_CSSMERR_AC_INVALID_DB_LIST_POINTER: i32 = -2147405747;

pub const anon4911 = i32;
pub const anon4911_CSSM_AC_BASE_AC_ERROR: i32 = -2147405568;
pub const anon4911_CSSMERR_AC_INVALID_BASE_ACLS: i32 = -2147405567;
pub const anon4911_CSSMERR_AC_INVALID_TUPLE_CREDENTIALS: i32 = -2147405566;
pub const anon4911_CSSMERR_AC_INVALID_ENCODING: i32 = -2147405565;
pub const anon4911_CSSMERR_AC_INVALID_VALIDITY_PERIOD: i32 = -2147405564;
pub const anon4911_CSSMERR_AC_INVALID_REQUESTOR: i32 = -2147405563;
pub const anon4911_CSSMERR_AC_INVALID_REQUEST_DESCRIPTOR: i32 = -2147405562;

pub const anon5031 = i32;
pub const anon5031_CSSMERR_CL_INTERNAL_ERROR: i32 = -2147411967;
pub const anon5031_CSSMERR_CL_MEMORY_ERROR: i32 = -2147411966;
pub const anon5031_CSSMERR_CL_MDS_ERROR: i32 = -2147411965;
pub const anon5031_CSSMERR_CL_INVALID_POINTER: i32 = -2147411964;
pub const anon5031_CSSMERR_CL_INVALID_INPUT_POINTER: i32 = -2147411963;
pub const anon5031_CSSMERR_CL_INVALID_OUTPUT_POINTER: i32 = -2147411962;
pub const anon5031_CSSMERR_CL_FUNCTION_NOT_IMPLEMENTED: i32 = -2147411961;
pub const anon5031_CSSMERR_CL_SELF_CHECK_FAILED: i32 = -2147411960;
pub const anon5031_CSSMERR_CL_OS_ACCESS_DENIED: i32 = -2147411959;
pub const anon5031_CSSMERR_CL_FUNCTION_FAILED: i32 = -2147411958;
pub const anon5031_CSSMERR_CL_INVALID_CONTEXT_HANDLE: i32 = -2147411904;
pub const anon5031_CSSMERR_CL_INVALID_CERTGROUP_POINTER: i32 = -2147411902;
pub const anon5031_CSSMERR_CL_INVALID_CERT_POINTER: i32 = -2147411901;
pub const anon5031_CSSMERR_CL_INVALID_CRL_POINTER: i32 = -2147411900;
pub const anon5031_CSSMERR_CL_INVALID_FIELD_POINTER: i32 = -2147411899;
pub const anon5031_CSSMERR_CL_INVALID_DATA: i32 = -2147411898;
pub const anon5031_CSSMERR_CL_CRL_ALREADY_SIGNED: i32 = -2147411897;
pub const anon5031_CSSMERR_CL_INVALID_NUMBER_OF_FIELDS: i32 = -2147411896;
pub const anon5031_CSSMERR_CL_VERIFICATION_FAILURE: i32 = -2147411895;
pub const anon5031_CSSMERR_CL_UNKNOWN_FORMAT: i32 = -2147411890;
pub const anon5031_CSSMERR_CL_UNKNOWN_TAG: i32 = -2147411889;
pub const anon5031_CSSMERR_CL_INVALID_PASSTHROUGH_ID: i32 = -2147411882;

pub const anon5291 = i32;
pub const anon5291_CSSM_CL_BASE_CL_ERROR: i32 = -2147411712;
pub const anon5291_CSSMERR_CL_INVALID_BUNDLE_POINTER: i32 = -2147411711;
pub const anon5291_CSSMERR_CL_INVALID_CACHE_HANDLE: i32 = -2147411710;
pub const anon5291_CSSMERR_CL_INVALID_RESULTS_HANDLE: i32 = -2147411709;
pub const anon5291_CSSMERR_CL_INVALID_BUNDLE_INFO: i32 = -2147411708;
pub const anon5291_CSSMERR_CL_INVALID_CRL_INDEX: i32 = -2147411707;
pub const anon5291_CSSMERR_CL_INVALID_SCOPE: i32 = -2147411706;
pub const anon5291_CSSMERR_CL_NO_FIELD_VALUES: i32 = -2147411705;
pub const anon5291_CSSMERR_CL_SCOPE_NOT_SUPPORTED: i32 = -2147411704;

pub const anon5431 = i32;
pub const anon5431_CSSMERR_DL_INTERNAL_ERROR: i32 = -2147414015;
pub const anon5431_CSSMERR_DL_MEMORY_ERROR: i32 = -2147414014;
pub const anon5431_CSSMERR_DL_MDS_ERROR: i32 = -2147414013;
pub const anon5431_CSSMERR_DL_INVALID_POINTER: i32 = -2147414012;
pub const anon5431_CSSMERR_DL_INVALID_INPUT_POINTER: i32 = -2147414011;
pub const anon5431_CSSMERR_DL_INVALID_OUTPUT_POINTER: i32 = -2147414010;
pub const anon5431_CSSMERR_DL_FUNCTION_NOT_IMPLEMENTED: i32 = -2147414009;
pub const anon5431_CSSMERR_DL_SELF_CHECK_FAILED: i32 = -2147414008;
pub const anon5431_CSSMERR_DL_OS_ACCESS_DENIED: i32 = -2147414007;
pub const anon5431_CSSMERR_DL_FUNCTION_FAILED: i32 = -2147414006;
pub const anon5431_CSSMERR_DL_INVALID_CSP_HANDLE: i32 = -2147413936;
pub const anon5431_CSSMERR_DL_INVALID_DL_HANDLE: i32 = -2147413935;
pub const anon5431_CSSMERR_DL_INVALID_CL_HANDLE: i32 = -2147413934;
pub const anon5431_CSSMERR_DL_INVALID_DB_LIST_POINTER: i32 = -2147413939;

pub const anon5611 = i32;
pub const anon5611_CSSMERR_DL_OPERATION_AUTH_DENIED: i32 = -2147413984;
pub const anon5611_CSSMERR_DL_OBJECT_USE_AUTH_DENIED: i32 = -2147413983;
pub const anon5611_CSSMERR_DL_OBJECT_MANIP_AUTH_DENIED: i32 = -2147413982;
pub const anon5611_CSSMERR_DL_OBJECT_ACL_NOT_SUPPORTED: i32 = -2147413981;
pub const anon5611_CSSMERR_DL_OBJECT_ACL_REQUIRED: i32 = -2147413980;
pub const anon5611_CSSMERR_DL_INVALID_ACCESS_CREDENTIALS: i32 = -2147413979;
pub const anon5611_CSSMERR_DL_INVALID_ACL_BASE_CERTS: i32 = -2147413978;
pub const anon5611_CSSMERR_DL_ACL_BASE_CERTS_NOT_SUPPORTED: i32 = -2147413977;
pub const anon5611_CSSMERR_DL_INVALID_SAMPLE_VALUE: i32 = -2147413976;
pub const anon5611_CSSMERR_DL_SAMPLE_VALUE_NOT_SUPPORTED: i32 = -2147413975;
pub const anon5611_CSSMERR_DL_INVALID_ACL_SUBJECT_VALUE: i32 = -2147413974;
pub const anon5611_CSSMERR_DL_ACL_SUBJECT_TYPE_NOT_SUPPORTED: i32 = -2147413973;
pub const anon5611_CSSMERR_DL_INVALID_ACL_CHALLENGE_CALLBACK: i32 = -2147413972;
pub const anon5611_CSSMERR_DL_ACL_CHALLENGE_CALLBACK_FAILED: i32 = -2147413971;
pub const anon5611_CSSMERR_DL_INVALID_ACL_ENTRY_TAG: i32 = -2147413970;
pub const anon5611_CSSMERR_DL_ACL_ENTRY_TAG_NOT_FOUND: i32 = -2147413969;
pub const anon5611_CSSMERR_DL_INVALID_ACL_EDIT_MODE: i32 = -2147413968;
pub const anon5611_CSSMERR_DL_ACL_CHANGE_FAILED: i32 = -2147413967;
pub const anon5611_CSSMERR_DL_INVALID_NEW_ACL_ENTRY: i32 = -2147413966;
pub const anon5611_CSSMERR_DL_INVALID_NEW_ACL_OWNER: i32 = -2147413965;
pub const anon5611_CSSMERR_DL_ACL_DELETE_FAILED: i32 = -2147413964;
pub const anon5611_CSSMERR_DL_ACL_REPLACE_FAILED: i32 = -2147413963;
pub const anon5611_CSSMERR_DL_ACL_ADD_FAILED: i32 = -2147413962;

pub const anon5881 = i32;
pub const anon5881_CSSMERR_DL_INVALID_DB_HANDLE: i32 = -2147413942;
pub const anon5881_CSSMERR_DL_INVALID_PASSTHROUGH_ID: i32 = -2147413930;
pub const anon5881_CSSMERR_DL_INVALID_NETWORK_ADDR: i32 = -2147413929;

pub const anon5951 = i32;
pub const anon5951_CSSM_DL_BASE_DL_ERROR: i32 = -2147413760;
pub const anon5951_CSSMERR_DL_DATABASE_CORRUPT: i32 = -2147413759;
pub const anon5951_CSSMERR_DL_INVALID_RECORD_INDEX: i32 = -2147413752;
pub const anon5951_CSSMERR_DL_INVALID_RECORDTYPE: i32 = -2147413751;
pub const anon5951_CSSMERR_DL_INVALID_FIELD_NAME: i32 = -2147413750;
pub const anon5951_CSSMERR_DL_UNSUPPORTED_FIELD_FORMAT: i32 = -2147413749;
pub const anon5951_CSSMERR_DL_UNSUPPORTED_INDEX_INFO: i32 = -2147413748;
pub const anon5951_CSSMERR_DL_UNSUPPORTED_LOCALITY: i32 = -2147413747;
pub const anon5951_CSSMERR_DL_UNSUPPORTED_NUM_ATTRIBUTES: i32 = -2147413746;
pub const anon5951_CSSMERR_DL_UNSUPPORTED_NUM_INDEXES: i32 = -2147413745;
pub const anon5951_CSSMERR_DL_UNSUPPORTED_NUM_RECORDTYPES: i32 = -2147413744;
pub const anon5951_CSSMERR_DL_UNSUPPORTED_RECORDTYPE: i32 = -2147413743;
pub const anon5951_CSSMERR_DL_FIELD_SPECIFIED_MULTIPLE: i32 = -2147413742;
pub const anon5951_CSSMERR_DL_INCOMPATIBLE_FIELD_FORMAT: i32 = -2147413741;
pub const anon5951_CSSMERR_DL_INVALID_PARSING_MODULE: i32 = -2147413740;
pub const anon5951_CSSMERR_DL_INVALID_DB_NAME: i32 = -2147413738;
pub const anon5951_CSSMERR_DL_DATASTORE_DOESNOT_EXIST: i32 = -2147413737;
pub const anon5951_CSSMERR_DL_DATASTORE_ALREADY_EXISTS: i32 = -2147413736;
pub const anon5951_CSSMERR_DL_DB_LOCKED: i32 = -2147413735;
pub const anon5951_CSSMERR_DL_DATASTORE_IS_OPEN: i32 = -2147413734;
pub const anon5951_CSSMERR_DL_RECORD_NOT_FOUND: i32 = -2147413733;
pub const anon5951_CSSMERR_DL_MISSING_VALUE: i32 = -2147413732;
pub const anon5951_CSSMERR_DL_UNSUPPORTED_QUERY: i32 = -2147413731;
pub const anon5951_CSSMERR_DL_UNSUPPORTED_QUERY_LIMITS: i32 = -2147413730;
pub const anon5951_CSSMERR_DL_UNSUPPORTED_NUM_SELECTION_PREDS: i32 = -2147413729;
pub const anon5951_CSSMERR_DL_UNSUPPORTED_OPERATOR: i32 = -2147413727;
pub const anon5951_CSSMERR_DL_INVALID_RESULTS_HANDLE: i32 = -2147413726;
pub const anon5951_CSSMERR_DL_INVALID_DB_LOCATION: i32 = -2147413725;
pub const anon5951_CSSMERR_DL_INVALID_ACCESS_REQUEST: i32 = -2147413724;
pub const anon5951_CSSMERR_DL_INVALID_INDEX_INFO: i32 = -2147413723;
pub const anon5951_CSSMERR_DL_INVALID_SELECTION_TAG: i32 = -2147413722;
pub const anon5951_CSSMERR_DL_INVALID_NEW_OWNER: i32 = -2147413721;
pub const anon5951_CSSMERR_DL_INVALID_RECORD_UID: i32 = -2147413720;
pub const anon5951_CSSMERR_DL_INVALID_UNIQUE_INDEX_DATA: i32 = -2147413719;
pub const anon5951_CSSMERR_DL_INVALID_MODIFY_MODE: i32 = -2147413718;
pub const anon5951_CSSMERR_DL_INVALID_OPEN_PARAMETERS: i32 = -2147413717;
pub const anon5951_CSSMERR_DL_RECORD_MODIFIED: i32 = -2147413716;
pub const anon5951_CSSMERR_DL_ENDOFDATA: i32 = -2147413715;
pub const anon5951_CSSMERR_DL_INVALID_QUERY: i32 = -2147413714;
pub const anon5951_CSSMERR_DL_INVALID_VALUE: i32 = -2147413713;
pub const anon5951_CSSMERR_DL_MULTIPLE_VALUES_UNSUPPORTED: i32 = -2147413712;
pub const anon5951_CSSMERR_DL_STALE_UNIQUE_RECORD: i32 = -2147413711;

pub const __CE_GeneralNameType = u32;
pub const __CE_GeneralNameType_GNT_OtherName: u32 = 0;
pub const __CE_GeneralNameType_GNT_RFC822Name: u32 = 1;
pub const __CE_GeneralNameType_GNT_DNSName: u32 = 2;
pub const __CE_GeneralNameType_GNT_X400Address: u32 = 3;
pub const __CE_GeneralNameType_GNT_DirectoryName: u32 = 4;
pub const __CE_GeneralNameType_GNT_EdiPartyName: u32 = 5;
pub const __CE_GeneralNameType_GNT_URI: u32 = 6;
pub const __CE_GeneralNameType_GNT_IPAddress: u32 = 7;
pub const __CE_GeneralNameType_GNT_RegisteredID: u32 = 8;

pub const CE_GeneralNameType = __CE_GeneralNameType;

pub const __CE_OtherName = extern struct {
    typeId: Asn1Oid,
    value: Asn1Item,
};

pub const CE_OtherName = __CE_OtherName;

pub const __CE_GeneralName = extern struct {
    nameType: CE_GeneralNameType,
    berEncoded: CSSM_BOOL,
    name: Asn1Item,
};

pub const CE_GeneralName = __CE_GeneralName;

pub const __CE_GeneralNames = extern struct {
    numNames: uint32,
    generalName: CE_GeneralName,
};

pub const CE_GeneralNames = __CE_GeneralNames;

pub const __CE_AuthorityKeyID = extern struct {
    keyIdentifierPresent: CSSM_BOOL,
    keyIdentifier: Asn1Item,
    generalNamesPresent: CSSM_BOOL,
    generalNames: CE_GeneralNames,
    serialNumberPresent: CSSM_BOOL,
    serialNumber: Asn1Item,
};

pub const CE_AuthorityKeyID = __CE_AuthorityKeyID;

pub const CE_SubjectKeyID = Asn1Item;

pub const CE_KeyUsage = uint16;

pub const CE_CrlReason = uint32;

pub const __CE_ExtendedKeyUsage = extern struct {
    numPurposes: uint32,
    purposes: CSSM_OID_PTR,
};

pub const CE_ExtendedKeyUsage = __CE_ExtendedKeyUsage;

pub const __CE_BasicConstraints = extern struct {
    cA: CSSM_BOOL,
    pathLenConstraintPresent: CSSM_BOOL,
    pathLenConstraint: uint32,
};

pub const CE_BasicConstraints = __CE_BasicConstraints;

pub const __CE_PolicyQualifierInfo = extern struct {
    policyQualifierId: Asn1Oid,
    qualifier: Asn1Item,
};

pub const CE_PolicyQualifierInfo = __CE_PolicyQualifierInfo;

pub const __CE_PolicyInformation = extern struct {
    certPolicyId: Asn1Oid,
    numPolicyQualifiers: uint32,
    policyQualifiers: CE_PolicyQualifierInfo,
};

pub const CE_PolicyInformation = __CE_PolicyInformation;

pub const __CE_CertPolicies = extern struct {
    numPolicies: uint32,
    policies: CE_PolicyInformation,
};

pub const CE_CertPolicies = __CE_CertPolicies;

pub const CE_NetscapeCertType = uint16;

pub const CE_CrlDistReasonFlags = uint8;

pub const __CE_CrlDistributionPointNameType = u32;
pub const __CE_CrlDistributionPointNameType_CE_CDNT_FullName: u32 = 0;
pub const __CE_CrlDistributionPointNameType_CE_CDNT_NameRelativeToCrlIssuer: u32 = 1;

pub const CE_CrlDistributionPointNameType = __CE_CrlDistributionPointNameType;

pub const __CE_DistributionPointName = extern struct {
    pub const anon5372 = extern union {
        fullName: CE_GeneralNames,
        rdn: CSSM_X509_RDN_PTR,
    };

    nameType: CE_CrlDistributionPointNameType,
    dpn: __CE_DistributionPointName.anon5372,
};

pub const CE_DistributionPointName = __CE_DistributionPointName;

pub const __CE_CRLDistributionPoint = extern struct {
    distPointName: CE_DistributionPointName,
    reasonsPresent: CSSM_BOOL,
    reasons: CE_CrlDistReasonFlags,
    crlIssuer: CE_GeneralNames,
};

pub const CE_CRLDistributionPoint = __CE_CRLDistributionPoint;

pub const __CE_CRLDistPointsSyntax = extern struct {
    numDistPoints: uint32,
    distPoints: CE_CRLDistributionPoint,
};

pub const CE_CRLDistPointsSyntax = __CE_CRLDistPointsSyntax;

pub const __CE_AccessDescription = extern struct {
    accessMethod: Asn1Oid,
    accessLocation: CE_GeneralName,
};

pub const CE_AccessDescription = __CE_AccessDescription;

pub const __CE_AuthorityInfoAccess = extern struct {
    numAccessDescriptions: uint32,
    accessDescriptions: CE_AccessDescription,
};

pub const CE_AuthorityInfoAccess = __CE_AuthorityInfoAccess;

pub const CE_NameRegistrationAuthorities = CE_GeneralNames;

pub const __CE_SemanticsInformation = extern struct {
    semanticsIdentifier: Asn1Oid,
    nameRegistrationAuthorities: CE_NameRegistrationAuthorities,
};

pub const CE_SemanticsInformation = __CE_SemanticsInformation;

pub const __CE_QC_Statement = extern struct {
    statementId: Asn1Oid,
    semanticsInfo: CE_SemanticsInformation,
    otherInfo: Asn1Item,
};

pub const CE_QC_Statement = __CE_QC_Statement;

pub const __CE_QC_Statements = extern struct {
    numQCStatements: uint32,
    qcStatements: CE_QC_Statement,
};

pub const CE_QC_Statements = __CE_QC_Statements;

pub const CE_CrlNumber = uint32;

pub const CE_DeltaCrl = uint32;

pub const __CE_IssuingDistributionPoint = extern struct {
    distPointName: CE_DistributionPointName,
    onlyUserCertsPresent: CSSM_BOOL,
    onlyUserCerts: CSSM_BOOL,
    onlyCACertsPresent: CSSM_BOOL,
    onlyCACerts: CSSM_BOOL,
    onlySomeReasonsPresent: CSSM_BOOL,
    onlySomeReasons: CE_CrlDistReasonFlags,
    indirectCrlPresent: CSSM_BOOL,
    indirectCrl: CSSM_BOOL,
};

pub const CE_IssuingDistributionPoint = __CE_IssuingDistributionPoint;

pub const __CE_GeneralSubtree = extern struct {
    base: CE_GeneralNames,
    minimum: uint32,
    maximumPresent: CSSM_BOOL,
    maximum: uint32,
};

pub const CE_GeneralSubtree = __CE_GeneralSubtree;

pub const __CE_GeneralSubtrees = extern struct {
    numSubtrees: uint32,
    subtrees: CE_GeneralSubtree,
};

pub const CE_GeneralSubtrees = __CE_GeneralSubtrees;

pub const __CE_NameConstraints = extern struct {
    permitted: CE_GeneralSubtrees,
    excluded: CE_GeneralSubtrees,
};

pub const CE_NameConstraints = __CE_NameConstraints;

pub const __CE_PolicyMapping = extern struct {
    issuerDomainPolicy: Asn1Oid,
    subjectDomainPolicy: Asn1Oid,
};

pub const CE_PolicyMapping = __CE_PolicyMapping;

pub const __CE_PolicyMappings = extern struct {
    numPolicyMappings: uint32,
    policyMappings: CE_PolicyMapping,
};

pub const CE_PolicyMappings = __CE_PolicyMappings;

pub const __CE_PolicyConstraints = extern struct {
    requireExplicitPolicyPresent: CSSM_BOOL,
    requireExplicitPolicy: uint32,
    inhibitPolicyMappingPresent: CSSM_BOOL,
    inhibitPolicyMapping: uint32,
};

pub const CE_PolicyConstraints = __CE_PolicyConstraints;

pub const CE_InhibitAnyPolicy = uint32;

pub const __CE_DataType = u32;
pub const __CE_DataType_DT_AuthorityKeyID: u32 = 0;
pub const __CE_DataType_DT_SubjectKeyID: u32 = 1;
pub const __CE_DataType_DT_KeyUsage: u32 = 2;
pub const __CE_DataType_DT_SubjectAltName: u32 = 3;
pub const __CE_DataType_DT_IssuerAltName: u32 = 4;
pub const __CE_DataType_DT_ExtendedKeyUsage: u32 = 5;
pub const __CE_DataType_DT_BasicConstraints: u32 = 6;
pub const __CE_DataType_DT_CertPolicies: u32 = 7;
pub const __CE_DataType_DT_NetscapeCertType: u32 = 8;
pub const __CE_DataType_DT_CrlNumber: u32 = 9;
pub const __CE_DataType_DT_DeltaCrl: u32 = 10;
pub const __CE_DataType_DT_CrlReason: u32 = 11;
pub const __CE_DataType_DT_CrlDistributionPoints: u32 = 12;
pub const __CE_DataType_DT_IssuingDistributionPoint: u32 = 13;
pub const __CE_DataType_DT_AuthorityInfoAccess: u32 = 14;
pub const __CE_DataType_DT_Other: u32 = 15;
pub const __CE_DataType_DT_QC_Statements: u32 = 16;
pub const __CE_DataType_DT_NameConstraints: u32 = 17;
pub const __CE_DataType_DT_PolicyMappings: u32 = 18;
pub const __CE_DataType_DT_PolicyConstraints: u32 = 19;
pub const __CE_DataType_DT_InhibitAnyPolicy: u32 = 20;

pub const CE_DataType = __CE_DataType;

pub const CE_Data = extern union {
    authorityKeyID: CE_AuthorityKeyID,
    subjectKeyID: CE_SubjectKeyID,
    keyUsage: CE_KeyUsage,
    subjectAltName: CE_GeneralNames,
    issuerAltName: CE_GeneralNames,
    extendedKeyUsage: CE_ExtendedKeyUsage,
    basicConstraints: CE_BasicConstraints,
    certPolicies: CE_CertPolicies,
    netscapeCertType: CE_NetscapeCertType,
    crlNumber: CE_CrlNumber,
    deltaCrl: CE_DeltaCrl,
    crlReason: CE_CrlReason,
    crlDistPoints: CE_CRLDistPointsSyntax,
    issuingDistPoint: CE_IssuingDistributionPoint,
    authorityInfoAccess: CE_AuthorityInfoAccess,
    qualifiedCertStatements: CE_QC_Statements,
    nameConstraints: CE_NameConstraints,
    policyMappings: CE_PolicyMappings,
    policyConstraints: CE_PolicyConstraints,
    inhibitAnyPolicy: CE_InhibitAnyPolicy,
    rawData: Asn1Item,
};

pub const __CE_DataAndType = extern struct {
    type: CE_DataType,
    extension: CE_Data,
    critical: CSSM_BOOL,
};

pub const CE_DataAndType = __CE_DataAndType;

pub const anon821 = u32;
pub const anon821_CSSM_WORDID_KEYCHAIN_PROMPT: u32 = 65536;
pub const anon821_CSSM_WORDID_KEYCHAIN_LOCK: u32 = 65537;
pub const anon821_CSSM_WORDID_KEYCHAIN_CHANGE_LOCK: u32 = 65538;
pub const anon821_CSSM_WORDID_PROCESS: u32 = 65539;
pub const anon821_CSSM_WORDID__RESERVED_1: u32 = 65540;
pub const anon821_CSSM_WORDID_SYMMETRIC_KEY: u32 = 65541;
pub const anon821_CSSM_WORDID_SYSTEM: u32 = 65542;
pub const anon821_CSSM_WORDID_KEY: u32 = 65543;
pub const anon821_CSSM_WORDID_PIN: u32 = 65544;
pub const anon821_CSSM_WORDID_PREAUTH: u32 = 65545;
pub const anon821_CSSM_WORDID_PREAUTH_SOURCE: u32 = 65546;
pub const anon821_CSSM_WORDID_ASYMMETRIC_KEY: u32 = 65547;
pub const anon821_CSSM_WORDID_PARTITION: u32 = 65548;
pub const anon821_CSSM_WORDID_KEYBAG_KEY: u32 = 65549;
pub const anon821_CSSM_WORDID__FIRST_UNUSED: u32 = 65550;
pub const anon821_CSSM_HINT_NONE: u32 = 0;
pub const anon821_CSSM_HINT_ADDRESS_APP: u32 = 1;
pub const anon821_CSSM_HINT_ADDRESS_SP: u32 = 2;

pub const anon1021 = u32;
pub const anon1021_CSSM_ACL_SUBJECT_TYPE_KEYCHAIN_PROMPT: u32 = 65536;
pub const anon1021_CSSM_ACL_SUBJECT_TYPE_PROCESS: u32 = 65539;
pub const anon1021_CSSM_ACL_SUBJECT_TYPE_CODE_SIGNATURE: u32 = 116;
pub const anon1021_CSSM_ACL_SUBJECT_TYPE_COMMENT: u32 = 12;
pub const anon1021_CSSM_ACL_SUBJECT_TYPE_SYMMETRIC_KEY: u32 = 65541;
pub const anon1021_CSSM_ACL_SUBJECT_TYPE_PREAUTH: u32 = 65545;
pub const anon1021_CSSM_ACL_SUBJECT_TYPE_PREAUTH_SOURCE: u32 = 65546;
pub const anon1021_CSSM_ACL_SUBJECT_TYPE_ASYMMETRIC_KEY: u32 = 65547;
pub const anon1021_CSSM_ACL_SUBJECT_TYPE_PARTITION: u32 = 65548;

pub const anon1151 = u32;
pub const anon1151_CSSM_SAMPLE_TYPE_KEYCHAIN_PROMPT: u32 = 65536;
pub const anon1151_CSSM_SAMPLE_TYPE_KEYCHAIN_LOCK: u32 = 65537;
pub const anon1151_CSSM_SAMPLE_TYPE_KEYCHAIN_CHANGE_LOCK: u32 = 65538;
pub const anon1151_CSSM_SAMPLE_TYPE_PROCESS: u32 = 65539;
pub const anon1151_CSSM_SAMPLE_TYPE_COMMENT: u32 = 12;
pub const anon1151_CSSM_SAMPLE_TYPE_RETRY_ID: u32 = 85;
pub const anon1151_CSSM_SAMPLE_TYPE_SYMMETRIC_KEY: u32 = 65541;
pub const anon1151_CSSM_SAMPLE_TYPE_PREAUTH: u32 = 65545;
pub const anon1151_CSSM_SAMPLE_TYPE_ASYMMETRIC_KEY: u32 = 65547;
pub const anon1151_CSSM_SAMPLE_TYPE_KEYBAG_KEY: u32 = 65549;
pub const anon1151_errSessionSuccess: u32 = 0;
pub const anon1151_errSessionInvalidId: u32 = -60500;
pub const anon1151_errSessionInvalidAttributes: u32 = -60501;
pub const anon1151_errSessionAuthorizationDenied: u32 = -60502;
pub const anon1151_errSessionValueNotSet: u32 = -60503;
pub const anon1151_errSessionInternal: u32 = -60008;
pub const anon1151_errSessionInvalidFlags: u32 = -60011;

pub const anon1561 = u32;
pub const anon1561_CSSM_ACL_CODE_SIGNATURE_INVALID: u32 = 0;
pub const anon1561_CSSM_ACL_CODE_SIGNATURE_OSX: u32 = 1;

pub const anon1631 = u32;
pub const anon1631_CSSM_ACL_MATCH_UID: u32 = 1;
pub const anon1631_CSSM_ACL_MATCH_GID: u32 = 2;
pub const anon1631_CSSM_ACL_MATCH_HONOR_ROOT: u32 = 256;
pub const anon1631_CSSM_ACL_MATCH_BITS: u32 = 3;

pub const anon1701 = u32;
pub const anon1701_CSSM_ACL_PROCESS_SELECTOR_CURRENT_VERSION: u32 = 257;

pub const cssm_acl_process_subject_selector = extern struct {
    version: uint16,
    mask: uint16,
    uid: uint32,
    gid: uint32,
};

pub const CSSM_ACL_PROCESS_SUBJECT_SELECTOR = cssm_acl_process_subject_selector;

pub const anon1831 = u32;
pub const anon1831_CSSM_ACL_KEYCHAIN_PROMPT_CURRENT_VERSION: u32 = 257;

pub const anon1871 = u32;
pub const anon1871_CSSM_ACL_KEYCHAIN_PROMPT_REQUIRE_PASSPHRASE: u32 = 1;
pub const anon1871_CSSM_ACL_KEYCHAIN_PROMPT_UNSIGNED: u32 = 16;
pub const anon1871_CSSM_ACL_KEYCHAIN_PROMPT_UNSIGNED_ACT: u32 = 32;
pub const anon1871_CSSM_ACL_KEYCHAIN_PROMPT_INVALID: u32 = 64;
pub const anon1871_CSSM_ACL_KEYCHAIN_PROMPT_INVALID_ACT: u32 = 128;

pub const cssm_acl_keychain_prompt_selector = extern struct {
    version: uint16,
    flags: uint16,
};

pub const CSSM_ACL_KEYCHAIN_PROMPT_SELECTOR = cssm_acl_keychain_prompt_selector;

pub const CSSM_ACL_PREAUTH_TRACKING_STATE = uint32;

pub const anon2031 = u32;
pub const anon2031_CSSM_ACL_PREAUTH_TRACKING_COUNT_MASK: u32 = 255;
pub const anon2031_CSSM_ACL_PREAUTH_TRACKING_BLOCKED: u32 = 0;
pub const anon2031_CSSM_ACL_PREAUTH_TRACKING_UNKNOWN: u32 = 1073741824;
pub const anon2031_CSSM_ACL_PREAUTH_TRACKING_AUTHORIZED: u32 = -2147483648;

pub const anon2151 = u32;
pub const anon2151_CSSM_DB_ACCESS_RESET: u32 = 65536;

pub const anon2211 = u32;
pub const anon2211_CSSM_ALGID_APPLE_YARROW: u32 = -2147483648;
pub const anon2211_CSSM_ALGID_AES: u32 = -2147483647;
pub const anon2211_CSSM_ALGID_FEE: u32 = -2147483646;
pub const anon2211_CSSM_ALGID_FEE_MD5: u32 = -2147483645;
pub const anon2211_CSSM_ALGID_FEE_SHA1: u32 = -2147483644;
pub const anon2211_CSSM_ALGID_FEED: u32 = -2147483643;
pub const anon2211_CSSM_ALGID_FEEDEXP: u32 = -2147483642;
pub const anon2211_CSSM_ALGID_ASC: u32 = -2147483641;
pub const anon2211_CSSM_ALGID_SHA1HMAC_LEGACY: u32 = -2147483640;
pub const anon2211_CSSM_ALGID_KEYCHAIN_KEY: u32 = -2147483639;
pub const anon2211_CSSM_ALGID_PKCS12_PBE_ENCR: u32 = -2147483638;
pub const anon2211_CSSM_ALGID_PKCS12_PBE_MAC: u32 = -2147483637;
pub const anon2211_CSSM_ALGID_SECURE_PASSPHRASE: u32 = -2147483636;
pub const anon2211_CSSM_ALGID_PBE_OPENSSL_MD5: u32 = -2147483635;
pub const anon2211_CSSM_ALGID_SHA256: u32 = -2147483634;
pub const anon2211_CSSM_ALGID_SHA384: u32 = -2147483633;
pub const anon2211_CSSM_ALGID_SHA512: u32 = -2147483632;
pub const anon2211_CSSM_ALGID_ENTROPY_DEFAULT: u32 = -2147483631;
pub const anon2211_CSSM_ALGID_SHA224: u32 = -2147483630;
pub const anon2211_CSSM_ALGID_SHA224WithRSA: u32 = -2147483629;
pub const anon2211_CSSM_ALGID_SHA256WithRSA: u32 = -2147483628;
pub const anon2211_CSSM_ALGID_SHA384WithRSA: u32 = -2147483627;
pub const anon2211_CSSM_ALGID_SHA512WithRSA: u32 = -2147483626;
pub const anon2211_CSSM_ALGID_OPENSSH1: u32 = -2147483625;
pub const anon2211_CSSM_ALGID_SHA224WithECDSA: u32 = -2147483624;
pub const anon2211_CSSM_ALGID_SHA256WithECDSA: u32 = -2147483623;
pub const anon2211_CSSM_ALGID_SHA384WithECDSA: u32 = -2147483622;
pub const anon2211_CSSM_ALGID_SHA512WithECDSA: u32 = -2147483621;
pub const anon2211_CSSM_ALGID_ECDSA_SPECIFIED: u32 = -2147483620;
pub const anon2211_CSSM_ALGID_ECDH_X963_KDF: u32 = -2147483619;
pub const anon2211_CSSM_ALGID__FIRST_UNUSED: u32 = -2147483618;

pub const anon2651 = u32;
pub const anon2651_CSSM_KEYBLOB_RAW_FORMAT_VENDOR_DEFINED: u32 = -2147483648;

pub const anon2681 = u32;
pub const anon2681_CSSM_KEYBLOB_RAW_FORMAT_X509: u32 = -2147483648;
pub const anon2681_CSSM_KEYBLOB_RAW_FORMAT_OPENSSH: u32 = -2147483647;
pub const anon2681_CSSM_KEYBLOB_RAW_FORMAT_OPENSSL: u32 = -2147483646;
pub const anon2681_CSSM_KEYBLOB_RAW_FORMAT_OPENSSH2: u32 = -2147483645;

pub const anon2801 = u32;
pub const anon2801_CSSM_CUSTOM_COMMON_ERROR_EXTENT: u32 = 224;
pub const anon2801_CSSM_ERRCODE_NO_USER_INTERACTION: u32 = 224;
pub const anon2801_CSSM_ERRCODE_USER_CANCELED: u32 = 225;
pub const anon2801_CSSM_ERRCODE_SERVICE_NOT_AVAILABLE: u32 = 226;
pub const anon2801_CSSM_ERRCODE_INSUFFICIENT_CLIENT_IDENTIFICATION: u32 = 227;
pub const anon2801_CSSM_ERRCODE_DEVICE_RESET: u32 = 228;
pub const anon2801_CSSM_ERRCODE_DEVICE_FAILED: u32 = 229;
pub const anon2801_CSSM_ERRCODE_IN_DARK_WAKE: u32 = 230;

pub const anon2931 = i32;
pub const anon2931_CSSMERR_CSSM_NO_USER_INTERACTION: i32 = -2147417888;
pub const anon2931_CSSMERR_AC_NO_USER_INTERACTION: i32 = -2147405600;
pub const anon2931_CSSMERR_CSP_NO_USER_INTERACTION: i32 = -2147415840;
pub const anon2931_CSSMERR_CL_NO_USER_INTERACTION: i32 = -2147411744;
pub const anon2931_CSSMERR_DL_NO_USER_INTERACTION: i32 = -2147413792;
pub const anon2931_CSSMERR_TP_NO_USER_INTERACTION: i32 = -2147409696;
pub const anon2931_CSSMERR_CSSM_USER_CANCELED: i32 = -2147417887;
pub const anon2931_CSSMERR_AC_USER_CANCELED: i32 = -2147405599;
pub const anon2931_CSSMERR_CSP_USER_CANCELED: i32 = -2147415839;
pub const anon2931_CSSMERR_CL_USER_CANCELED: i32 = -2147411743;
pub const anon2931_CSSMERR_DL_USER_CANCELED: i32 = -2147413791;
pub const anon2931_CSSMERR_TP_USER_CANCELED: i32 = -2147409695;
pub const anon2931_CSSMERR_CSSM_SERVICE_NOT_AVAILABLE: i32 = -2147417886;
pub const anon2931_CSSMERR_AC_SERVICE_NOT_AVAILABLE: i32 = -2147405598;
pub const anon2931_CSSMERR_CSP_SERVICE_NOT_AVAILABLE: i32 = -2147415838;
pub const anon2931_CSSMERR_CL_SERVICE_NOT_AVAILABLE: i32 = -2147411742;
pub const anon2931_CSSMERR_DL_SERVICE_NOT_AVAILABLE: i32 = -2147413790;
pub const anon2931_CSSMERR_TP_SERVICE_NOT_AVAILABLE: i32 = -2147409694;
pub const anon2931_CSSMERR_CSSM_INSUFFICIENT_CLIENT_IDENTIFICATION: i32 = -2147417885;
pub const anon2931_CSSMERR_AC_INSUFFICIENT_CLIENT_IDENTIFICATION: i32 = -2147405597;
pub const anon2931_CSSMERR_CSP_INSUFFICIENT_CLIENT_IDENTIFICATION: i32 = -2147415837;
pub const anon2931_CSSMERR_CL_INSUFFICIENT_CLIENT_IDENTIFICATION: i32 = -2147411741;
pub const anon2931_CSSMERR_DL_INSUFFICIENT_CLIENT_IDENTIFICATION: i32 = -2147413789;
pub const anon2931_CSSMERR_TP_INSUFFICIENT_CLIENT_IDENTIFICATION: i32 = -2147409693;
pub const anon2931_CSSMERR_CSSM_DEVICE_RESET: i32 = -2147417884;
pub const anon2931_CSSMERR_AC_DEVICE_RESET: i32 = -2147405596;
pub const anon2931_CSSMERR_CSP_DEVICE_RESET: i32 = -2147415836;
pub const anon2931_CSSMERR_CL_DEVICE_RESET: i32 = -2147411740;
pub const anon2931_CSSMERR_DL_DEVICE_RESET: i32 = -2147413788;
pub const anon2931_CSSMERR_TP_DEVICE_RESET: i32 = -2147409692;
pub const anon2931_CSSMERR_CSSM_DEVICE_FAILED: i32 = -2147417883;
pub const anon2931_CSSMERR_AC_DEVICE_FAILED: i32 = -2147405595;
pub const anon2931_CSSMERR_CSP_DEVICE_FAILED: i32 = -2147415835;
pub const anon2931_CSSMERR_CL_DEVICE_FAILED: i32 = -2147411739;
pub const anon2931_CSSMERR_DL_DEVICE_FAILED: i32 = -2147413787;
pub const anon2931_CSSMERR_TP_DEVICE_FAILED: i32 = -2147409691;
pub const anon2931_CSSMERR_CSSM_IN_DARK_WAKE: i32 = -2147417882;
pub const anon2931_CSSMERR_AC_IN_DARK_WAKE: i32 = -2147405594;
pub const anon2931_CSSMERR_CSP_IN_DARK_WAKE: i32 = -2147415834;
pub const anon2931_CSSMERR_CL_IN_DARK_WAKE: i32 = -2147411738;
pub const anon2931_CSSMERR_DL_IN_DARK_WAKE: i32 = -2147413786;
pub const anon2931_CSSMERR_TP_IN_DARK_WAKE: i32 = -2147409690;

pub const anon3451 = i32;
pub const anon3451_CSSMERR_CSP_APPLE_ADD_APPLICATION_ACL_SUBJECT: i32 = -2147415040;
pub const anon3451_CSSMERR_CSP_APPLE_PUBLIC_KEY_INCOMPLETE: i32 = -2147415039;
pub const anon3451_CSSMERR_CSP_APPLE_SIGNATURE_MISMATCH: i32 = -2147415038;
pub const anon3451_CSSMERR_CSP_APPLE_INVALID_KEY_START_DATE: i32 = -2147415037;
pub const anon3451_CSSMERR_CSP_APPLE_INVALID_KEY_END_DATE: i32 = -2147415036;
pub const anon3451_CSSMERR_CSPDL_APPLE_DL_CONVERSION_ERROR: i32 = -2147415035;
pub const anon3451_CSSMERR_CSP_APPLE_SSLv2_ROLLBACK: i32 = -2147415034;

pub const anon3831 = u32;
pub const anon3831_CSSM_APPLEFILEDL_TOGGLE_AUTOCOMMIT: u32 = 0;
pub const anon3831_CSSM_APPLEFILEDL_COMMIT: u32 = 1;
pub const anon3831_CSSM_APPLEFILEDL_ROLLBACK: u32 = 2;
pub const anon3831_CSSM_APPLEFILEDL_TAKE_FILE_LOCK: u32 = 3;
pub const anon3831_CSSM_APPLEFILEDL_MAKE_BACKUP: u32 = 4;
pub const anon3831_CSSM_APPLEFILEDL_MAKE_COPY: u32 = 5;
pub const anon3831_CSSM_APPLEFILEDL_DELETE_FILE: u32 = 6;

pub const anon4101 = u32;
pub const anon4101_CSSM_APPLE_UNLOCK_TYPE_KEY_DIRECT: u32 = 1;
pub const anon4101_CSSM_APPLE_UNLOCK_TYPE_WRAPPED_PRIVATE: u32 = 2;
pub const anon4101_CSSM_APPLE_UNLOCK_TYPE_KEYBAG: u32 = 3;

pub const anon4171 = i32;
pub const anon4171_CSSMERR_APPLEDL_INVALID_OPEN_PARAMETERS: i32 = -2147412992;
pub const anon4171_CSSMERR_APPLEDL_DISK_FULL: i32 = -2147412991;
pub const anon4171_CSSMERR_APPLEDL_QUOTA_EXCEEDED: i32 = -2147412990;
pub const anon4171_CSSMERR_APPLEDL_FILE_TOO_BIG: i32 = -2147412989;
pub const anon4171_CSSMERR_APPLEDL_INVALID_DATABASE_BLOB: i32 = -2147412988;
pub const anon4171_CSSMERR_APPLEDL_INVALID_KEY_BLOB: i32 = -2147412987;
pub const anon4171_CSSMERR_APPLEDL_INCOMPATIBLE_DATABASE_BLOB: i32 = -2147412986;
pub const anon4171_CSSMERR_APPLEDL_INCOMPATIBLE_KEY_BLOB: i32 = -2147412985;

pub const anon4471 = i32;
pub const anon4471_CSSMERR_APPLETP_HOSTNAME_MISMATCH: i32 = -2147408896;
pub const anon4471_CSSMERR_APPLETP_UNKNOWN_CRITICAL_EXTEN: i32 = -2147408895;
pub const anon4471_CSSMERR_APPLETP_NO_BASIC_CONSTRAINTS: i32 = -2147408894;
pub const anon4471_CSSMERR_APPLETP_INVALID_CA: i32 = -2147408893;
pub const anon4471_CSSMERR_APPLETP_INVALID_AUTHORITY_ID: i32 = -2147408892;
pub const anon4471_CSSMERR_APPLETP_INVALID_SUBJECT_ID: i32 = -2147408891;
pub const anon4471_CSSMERR_APPLETP_INVALID_KEY_USAGE: i32 = -2147408890;
pub const anon4471_CSSMERR_APPLETP_INVALID_EXTENDED_KEY_USAGE: i32 = -2147408889;
pub const anon4471_CSSMERR_APPLETP_INVALID_ID_LINKAGE: i32 = -2147408888;
pub const anon4471_CSSMERR_APPLETP_PATH_LEN_CONSTRAINT: i32 = -2147408887;
pub const anon4471_CSSMERR_APPLETP_INVALID_ROOT: i32 = -2147408886;
pub const anon4471_CSSMERR_APPLETP_CRL_EXPIRED: i32 = -2147408885;
pub const anon4471_CSSMERR_APPLETP_CRL_NOT_VALID_YET: i32 = -2147408884;
pub const anon4471_CSSMERR_APPLETP_CRL_NOT_FOUND: i32 = -2147408883;
pub const anon4471_CSSMERR_APPLETP_CRL_SERVER_DOWN: i32 = -2147408882;
pub const anon4471_CSSMERR_APPLETP_CRL_BAD_URI: i32 = -2147408881;
pub const anon4471_CSSMERR_APPLETP_UNKNOWN_CERT_EXTEN: i32 = -2147408880;
pub const anon4471_CSSMERR_APPLETP_UNKNOWN_CRL_EXTEN: i32 = -2147408879;
pub const anon4471_CSSMERR_APPLETP_CRL_NOT_TRUSTED: i32 = -2147408878;
pub const anon4471_CSSMERR_APPLETP_CRL_INVALID_ANCHOR_CERT: i32 = -2147408877;
pub const anon4471_CSSMERR_APPLETP_CRL_POLICY_FAIL: i32 = -2147408876;
pub const anon4471_CSSMERR_APPLETP_IDP_FAIL: i32 = -2147408875;
pub const anon4471_CSSMERR_APPLETP_CERT_NOT_FOUND_FROM_ISSUER: i32 = -2147408874;
pub const anon4471_CSSMERR_APPLETP_BAD_CERT_FROM_ISSUER: i32 = -2147408873;
pub const anon4471_CSSMERR_APPLETP_SMIME_EMAIL_ADDRS_NOT_FOUND: i32 = -2147408872;
pub const anon4471_CSSMERR_APPLETP_SMIME_BAD_EXT_KEY_USE: i32 = -2147408871;
pub const anon4471_CSSMERR_APPLETP_SMIME_BAD_KEY_USE: i32 = -2147408870;
pub const anon4471_CSSMERR_APPLETP_SMIME_KEYUSAGE_NOT_CRITICAL: i32 = -2147408869;
pub const anon4471_CSSMERR_APPLETP_SMIME_NO_EMAIL_ADDRS: i32 = -2147408868;
pub const anon4471_CSSMERR_APPLETP_SMIME_SUBJ_ALT_NAME_NOT_CRIT: i32 = -2147408867;
pub const anon4471_CSSMERR_APPLETP_SSL_BAD_EXT_KEY_USE: i32 = -2147408866;
pub const anon4471_CSSMERR_APPLETP_OCSP_BAD_RESPONSE: i32 = -2147408865;
pub const anon4471_CSSMERR_APPLETP_OCSP_BAD_REQUEST: i32 = -2147408864;
pub const anon4471_CSSMERR_APPLETP_OCSP_UNAVAILABLE: i32 = -2147408863;
pub const anon4471_CSSMERR_APPLETP_OCSP_STATUS_UNRECOGNIZED: i32 = -2147408862;
pub const anon4471_CSSMERR_APPLETP_INCOMPLETE_REVOCATION_CHECK: i32 = -2147408861;
pub const anon4471_CSSMERR_APPLETP_NETWORK_FAILURE: i32 = -2147408860;
pub const anon4471_CSSMERR_APPLETP_OCSP_NOT_TRUSTED: i32 = -2147408859;
pub const anon4471_CSSMERR_APPLETP_OCSP_INVALID_ANCHOR_CERT: i32 = -2147408858;
pub const anon4471_CSSMERR_APPLETP_OCSP_SIG_ERROR: i32 = -2147408857;
pub const anon4471_CSSMERR_APPLETP_OCSP_NO_SIGNER: i32 = -2147408856;
pub const anon4471_CSSMERR_APPLETP_OCSP_RESP_MALFORMED_REQ: i32 = -2147408855;
pub const anon4471_CSSMERR_APPLETP_OCSP_RESP_INTERNAL_ERR: i32 = -2147408854;
pub const anon4471_CSSMERR_APPLETP_OCSP_RESP_TRY_LATER: i32 = -2147408853;
pub const anon4471_CSSMERR_APPLETP_OCSP_RESP_SIG_REQUIRED: i32 = -2147408852;
pub const anon4471_CSSMERR_APPLETP_OCSP_RESP_UNAUTHORIZED: i32 = -2147408851;
pub const anon4471_CSSMERR_APPLETP_OCSP_NONCE_MISMATCH: i32 = -2147408850;
pub const anon4471_CSSMERR_APPLETP_CS_BAD_CERT_CHAIN_LENGTH: i32 = -2147408849;
pub const anon4471_CSSMERR_APPLETP_CS_NO_BASIC_CONSTRAINTS: i32 = -2147408848;
pub const anon4471_CSSMERR_APPLETP_CS_BAD_PATH_LENGTH: i32 = -2147408847;
pub const anon4471_CSSMERR_APPLETP_CS_NO_EXTENDED_KEY_USAGE: i32 = -2147408846;
pub const anon4471_CSSMERR_APPLETP_CODE_SIGN_DEVELOPMENT: i32 = -2147408845;
pub const anon4471_CSSMERR_APPLETP_RS_BAD_CERT_CHAIN_LENGTH: i32 = -2147408844;
pub const anon4471_CSSMERR_APPLETP_RS_BAD_EXTENDED_KEY_USAGE: i32 = -2147408843;
pub const anon4471_CSSMERR_APPLETP_TRUST_SETTING_DENY: i32 = -2147408842;
pub const anon4471_CSSMERR_APPLETP_INVALID_EMPTY_SUBJECT: i32 = -2147408841;
pub const anon4471_CSSMERR_APPLETP_UNKNOWN_QUAL_CERT_STATEMENT: i32 = -2147408840;
pub const anon4471_CSSMERR_APPLETP_MISSING_REQUIRED_EXTENSION: i32 = -2147408839;
pub const anon4471_CSSMERR_APPLETP_EXT_KEYUSAGE_NOT_CRITICAL: i32 = -2147408838;
pub const anon4471_CSSMERR_APPLETP_IDENTIFIER_MISSING: i32 = -2147408837;
pub const anon4471_CSSMERR_APPLETP_CA_PIN_MISMATCH: i32 = -2147408836;
pub const anon4471_CSSMERR_APPLETP_LEAF_PIN_MISMATCH: i32 = -2147408835;

pub const anon5781 = i32;
pub const anon5781_CSSMERR_APPLE_DOTMAC_REQ_QUEUED: i32 = -2147408796;
pub const anon5781_CSSMERR_APPLE_DOTMAC_REQ_REDIRECT: i32 = -2147408795;
pub const anon5781_CSSMERR_APPLE_DOTMAC_REQ_SERVER_ERR: i32 = -2147408794;
pub const anon5781_CSSMERR_APPLE_DOTMAC_REQ_SERVER_PARAM: i32 = -2147408793;
pub const anon5781_CSSMERR_APPLE_DOTMAC_REQ_SERVER_AUTH: i32 = -2147408792;
pub const anon5781_CSSMERR_APPLE_DOTMAC_REQ_SERVER_UNIMPL: i32 = -2147408791;
pub const anon5781_CSSMERR_APPLE_DOTMAC_REQ_SERVER_NOT_AVAIL: i32 = -2147408790;
pub const anon5781_CSSMERR_APPLE_DOTMAC_REQ_SERVER_ALREADY_EXIST: i32 = -2147408789;
pub const anon5781_CSSMERR_APPLE_DOTMAC_REQ_SERVER_SERVICE_ERROR: i32 = -2147408788;
pub const anon5781_CSSMERR_APPLE_DOTMAC_REQ_IS_PENDING: i32 = -2147408787;
pub const anon5781_CSSMERR_APPLE_DOTMAC_NO_REQ_PENDING: i32 = -2147408786;
pub const anon5781_CSSMERR_APPLE_DOTMAC_CSR_VERIFY_FAIL: i32 = -2147408785;
pub const anon5781_CSSMERR_APPLE_DOTMAC_FAILED_CONSISTENCY_CHECK: i32 = -2147408784;

pub const anon6081 = u32;
pub const anon6081_CSSM_APPLEDL_OPEN_PARAMETERS_VERSION: u32 = 1;

pub const cssm_appledl_open_parameters_mask = u32;
pub const cssm_appledl_open_parameters_mask_CSSM_APPLEDL_MASK_MODE: u32 = 1;

pub const cssm_appledl_open_parameters = extern struct {
    length: uint32,
    version: uint32,
    autoCommit: CSSM_BOOL,
    mask: uint32,
    mode: objc.mode_t,
};

pub const CSSM_APPLEDL_OPEN_PARAMETERS = cssm_appledl_open_parameters;

pub const CSSM_APPLEDL_OPEN_PARAMETERS_PTR = ?*cssm_appledl_open_parameters;

pub const anon6451 = u32;
pub const anon6451_CSSM_APPLECSPDL_DB_LOCK: u32 = 0;
pub const anon6451_CSSM_APPLECSPDL_DB_UNLOCK: u32 = 1;
pub const anon6451_CSSM_APPLECSPDL_DB_GET_SETTINGS: u32 = 2;
pub const anon6451_CSSM_APPLECSPDL_DB_SET_SETTINGS: u32 = 3;
pub const anon6451_CSSM_APPLECSPDL_DB_IS_LOCKED: u32 = 4;
pub const anon6451_CSSM_APPLECSPDL_DB_CHANGE_PASSWORD: u32 = 5;
pub const anon6451_CSSM_APPLECSPDL_DB_GET_HANDLE: u32 = 6;
pub const anon6451_CSSM_APPLESCPDL_CSP_GET_KEYHANDLE: u32 = 7;
pub const anon6451_CSSM_APPLE_PRIVATE_CSPDL_CODE_8: u32 = 8;
pub const anon6451_CSSM_APPLE_PRIVATE_CSPDL_CODE_9: u32 = 9;
pub const anon6451_CSSM_APPLE_PRIVATE_CSPDL_CODE_10: u32 = 10;
pub const anon6451_CSSM_APPLE_PRIVATE_CSPDL_CODE_11: u32 = 11;
pub const anon6451_CSSM_APPLE_PRIVATE_CSPDL_CODE_12: u32 = 12;
pub const anon6451_CSSM_APPLE_PRIVATE_CSPDL_CODE_13: u32 = 13;
pub const anon6451_CSSM_APPLE_PRIVATE_CSPDL_CODE_14: u32 = 14;
pub const anon6451_CSSM_APPLE_PRIVATE_CSPDL_CODE_15: u32 = 15;
pub const anon6451_CSSM_APPLE_PRIVATE_CSPDL_CODE_16: u32 = 16;
pub const anon6451_CSSM_APPLE_PRIVATE_CSPDL_CODE_17: u32 = 17;
pub const anon6451_CSSM_APPLE_PRIVATE_CSPDL_CODE_18: u32 = 18;
pub const anon6451_CSSM_APPLE_PRIVATE_CSPDL_CODE_19: u32 = 19;
pub const anon6451_CSSM_APPLE_PRIVATE_CSPDL_CODE_20: u32 = 20;
pub const anon6451_CSSM_APPLE_PRIVATE_CSPDL_CODE_21: u32 = 21;
pub const anon6451_CSSM_APPLE_PRIVATE_CSPDL_CODE_22: u32 = 22;
pub const anon6451_CSSM_APPLE_PRIVATE_CSPDL_CODE_23: u32 = 23;
pub const anon6451_CSSM_APPLE_PRIVATE_CSPDL_CODE_24: u32 = 24;
pub const anon6451_CSSM_APPLE_PRIVATE_CSPDL_CODE_25: u32 = 25;
pub const anon6451_CSSM_APPLE_PRIVATE_CSPDL_CODE_26: u32 = 26;
pub const anon6451_CSSM_APPLE_PRIVATE_CSPDL_CODE_27: u32 = 27;
pub const anon6451_CSSM_APPLECSP_KEYDIGEST: u32 = 256;
pub const anon6451_CSSM_APPLECSP_PUBKEY: u32 = 257;

pub const cssm_applecspdl_db_settings_parameters = extern struct {
    idleTimeout: uint32,
    lockOnSleep: uint8,
};

pub const CSSM_APPLECSPDL_DB_SETTINGS_PARAMETERS = cssm_applecspdl_db_settings_parameters;

pub const CSSM_APPLECSPDL_DB_SETTINGS_PARAMETERS_PTR = ?*cssm_applecspdl_db_settings_parameters;

pub const cssm_applecspdl_db_is_locked_parameters = extern struct {
    isLocked: uint8,
};

pub const CSSM_APPLECSPDL_DB_IS_LOCKED_PARAMETERS = cssm_applecspdl_db_is_locked_parameters;

pub const CSSM_APPLECSPDL_DB_IS_LOCKED_PARAMETERS_PTR = ?*cssm_applecspdl_db_is_locked_parameters;

pub const cssm_applecspdl_db_change_password_parameters = extern struct {
    accessCredentials: CSSM_ACCESS_CREDENTIALS,
};

pub const CSSM_APPLECSPDL_DB_CHANGE_PASSWORD_PARAMETERS = cssm_applecspdl_db_change_password_parameters;

pub const CSSM_APPLECSPDL_DB_CHANGE_PASSWORD_PARAMETERS_PTR = ?*cssm_applecspdl_db_change_password_parameters;

pub const anon7791 = u32;
pub const anon7791_CSSM_ATTRIBUTE_VENDOR_DEFINED: u32 = 8388608;

pub const anon7831 = u32;
pub const anon7831_CSSM_ATTRIBUTE_PUBLIC_KEY: u32 = 1082130432;
pub const anon7831_CSSM_ATTRIBUTE_FEE_PRIME_TYPE: u32 = 276824065;
pub const anon7831_CSSM_ATTRIBUTE_FEE_CURVE_TYPE: u32 = 276824066;
pub const anon7831_CSSM_ATTRIBUTE_ASC_OPTIMIZATION: u32 = 276824067;
pub const anon7831_CSSM_ATTRIBUTE_RSA_BLINDING: u32 = 276824068;
pub const anon7831_CSSM_ATTRIBUTE_PARAM_KEY: u32 = 1082130437;
pub const anon7831_CSSM_ATTRIBUTE_PROMPT: u32 = 545259526;
pub const anon7831_CSSM_ATTRIBUTE_ALERT_TITLE: u32 = 545259527;
pub const anon7831_CSSM_ATTRIBUTE_VERIFY_PASSPHRASE: u32 = 276824072;

pub const anon8461 = u32;
pub const anon8461_CSSM_FEE_PRIME_TYPE_DEFAULT: u32 = 0;
pub const anon8461_CSSM_FEE_PRIME_TYPE_MERSENNE: u32 = 1;
pub const anon8461_CSSM_FEE_PRIME_TYPE_FEE: u32 = 2;
pub const anon8461_CSSM_FEE_PRIME_TYPE_GENERAL: u32 = 3;

pub const anon8581 = u32;
pub const anon8581_CSSM_FEE_CURVE_TYPE_DEFAULT: u32 = 0;
pub const anon8581_CSSM_FEE_CURVE_TYPE_MONTGOMERY: u32 = 1;
pub const anon8581_CSSM_FEE_CURVE_TYPE_WEIERSTRASS: u32 = 2;
pub const anon8581_CSSM_FEE_CURVE_TYPE_ANSI_X9_62: u32 = 3;

pub const anon8681 = u32;
pub const anon8681_CSSM_ASC_OPTIMIZE_DEFAULT: u32 = 0;
pub const anon8681_CSSM_ASC_OPTIMIZE_SIZE: u32 = 1;
pub const anon8681_CSSM_ASC_OPTIMIZE_SECURITY: u32 = 2;
pub const anon8681_CSSM_ASC_OPTIMIZE_TIME: u32 = 3;
pub const anon8681_CSSM_ASC_OPTIMIZE_TIME_SIZE: u32 = 4;
pub const anon8681_CSSM_ASC_OPTIMIZE_ASCII: u32 = 5;

pub const anon8801 = u32;
pub const anon8801_CSSM_KEYATTR_PARTIAL: u32 = 65536;
pub const anon8801_CSSM_KEYATTR_PUBLIC_KEY_ENCRYPT: u32 = 131072;

pub const CSSM_APPLE_TP_NAME_OID = extern struct {
    string: [*:0]const u8,
    oid: Asn1Oid,
};

pub const CSSM_APPLE_TP_CERT_REQUEST = extern struct {
    cspHand: CSSM_CSP_HANDLE,
    clHand: CSSM_CL_HANDLE,
    serialNumber: uint32,
    numSubjectNames: uint32,
    subjectNames: CSSM_APPLE_TP_NAME_OID,
    numIssuerNames: uint32,
    issuerNames: CSSM_APPLE_TP_NAME_OID,
    issuerNameX509: CSSM_X509_NAME_PTR,
    certPublicKey: CSSM_KEY,
    issuerPrivateKey: CSSM_KEY,
    signatureAlg: CSSM_ALGORITHMS,
    signatureOid: Asn1Oid,
    notBefore: uint32,
    notAfter: uint32,
    numExtensions: uint32,
    extensions: CE_DataAndType,
    challengeString: [*:0]const u8,
};

pub const CSSM_APPLE_TP_SSL_OPTIONS = extern struct {
    Version: uint32,
    ServerNameLen: uint32,
    ServerName: [*:0]const u8,
    Flags: uint32,
};

pub const CSSM_APPLE_TP_CRL_OPT_FLAGS = uint32;

pub const anon9821 = u32;
pub const anon9821_CSSM_TP_ACTION_REQUIRE_CRL_PER_CERT: u32 = 1;
pub const anon9821_CSSM_TP_ACTION_FETCH_CRL_FROM_NET: u32 = 2;
pub const anon9821_CSSM_TP_ACTION_CRL_SUFFICIENT: u32 = 4;
pub const anon9821_CSSM_TP_ACTION_REQUIRE_CRL_IF_PRESENT: u32 = 8;

pub const CSSM_APPLE_TP_CRL_OPTIONS = extern struct {
    Version: uint32,
    CrlFlags: CSSM_APPLE_TP_CRL_OPT_FLAGS,
    crlStore: CSSM_DL_DB_HANDLE_PTR,
};

pub const CSSM_APPLE_TP_SMIME_OPTIONS = extern struct {
    Version: uint32,
    IntendedUsage: CE_KeyUsage,
    SenderEmailLen: uint32,
    SenderEmail: [*:0]const u8,
};

pub const CSSM_APPLE_TP_ACTION_FLAGS = uint32;

pub const anon10411 = u32;
pub const anon10411_CSSM_TP_ACTION_ALLOW_EXPIRED: u32 = 1;
pub const anon10411_CSSM_TP_ACTION_LEAF_IS_CA: u32 = 2;
pub const anon10411_CSSM_TP_ACTION_FETCH_CERT_FROM_NET: u32 = 4;
pub const anon10411_CSSM_TP_ACTION_ALLOW_EXPIRED_ROOT: u32 = 8;
pub const anon10411_CSSM_TP_ACTION_REQUIRE_REV_PER_CERT: u32 = 16;
pub const anon10411_CSSM_TP_ACTION_TRUST_SETTINGS: u32 = 32;
pub const anon10411_CSSM_TP_ACTION_IMPLICIT_ANCHORS: u32 = 64;

pub const CSSM_APPLE_TP_ACTION_DATA = extern struct {
    Version: uint32,
    ActionFlags: CSSM_APPLE_TP_ACTION_FLAGS,
};

pub const CSSM_TP_APPLE_CERT_STATUS = uint32;

pub const anon10701 = u32;
pub const anon10701_CSSM_CERT_STATUS_EXPIRED: u32 = 1;
pub const anon10701_CSSM_CERT_STATUS_NOT_VALID_YET: u32 = 2;
pub const anon10701_CSSM_CERT_STATUS_IS_IN_INPUT_CERTS: u32 = 4;
pub const anon10701_CSSM_CERT_STATUS_IS_IN_ANCHORS: u32 = 8;
pub const anon10701_CSSM_CERT_STATUS_IS_ROOT: u32 = 16;
pub const anon10701_CSSM_CERT_STATUS_IS_FROM_NET: u32 = 32;
pub const anon10701_CSSM_CERT_STATUS_TRUST_SETTINGS_FOUND_USER: u32 = 64;
pub const anon10701_CSSM_CERT_STATUS_TRUST_SETTINGS_FOUND_ADMIN: u32 = 128;
pub const anon10701_CSSM_CERT_STATUS_TRUST_SETTINGS_FOUND_SYSTEM: u32 = 256;
pub const anon10701_CSSM_CERT_STATUS_TRUST_SETTINGS_TRUST: u32 = 512;
pub const anon10701_CSSM_CERT_STATUS_TRUST_SETTINGS_DENY: u32 = 1024;
pub const anon10701_CSSM_CERT_STATUS_TRUST_SETTINGS_IGNORED_ERROR: u32 = 2048;

pub const CSSM_TP_APPLE_EVIDENCE_INFO = extern struct {
    StatusBits: CSSM_TP_APPLE_CERT_STATUS,
    NumStatusCodes: uint32,
    StatusCodes: CSSM_RETURN,
    Index: uint32,
    DlDbHandle: CSSM_DL_DB_HANDLE,
    UniqueRecord: CSSM_DB_UNIQUE_RECORD_PTR,
};

pub const CSSM_TP_APPLE_EVIDENCE_HEADER = extern struct {
    Version: uint32,
};

pub const anon11371 = u32;
pub const anon11371_CSSM_EVIDENCE_FORM_APPLE_HEADER: u32 = -2147483648;
pub const anon11371_CSSM_EVIDENCE_FORM_APPLE_CERTGROUP: u32 = -2147483647;
pub const anon11371_CSSM_EVIDENCE_FORM_APPLE_CERT_INFO: u32 = -2147483646;

pub const anon11451 = u32;
pub const anon11451_CSSM_APPLEX509CL_OBTAIN_CSR: u32 = 0;
pub const anon11451_CSSM_APPLEX509CL_VERIFY_CSR: u32 = 1;

pub const CSSM_APPLE_CL_CSR_REQUEST = extern struct {
    subjectNameX509: CSSM_X509_NAME_PTR,
    signatureAlg: CSSM_ALGORITHMS,
    signatureOid: Asn1Oid,
    cspHand: CSSM_CSP_HANDLE,
    subjectPublicKey: CSSM_KEY,
    subjectPrivateKey: CSSM_KEY,
    challengeString: [*:0]const u8,
};

pub extern "Security" fn cssmPerror(how: [*:0]const u8, @"error": CSSM_RETURN) callconv(.C) void;

pub extern "Security" fn cssmOidToAlg() callconv(.C) i32;

pub extern "Security" fn cssmAlgToOid(algId: CSSM_ALGORITHMS) callconv(.C) ?*const Asn1Oid;

pub const anon541 = objc.UInt32;
pub const anon541_SecUnlockStateStatus: objc.UInt32 = 1;
pub const anon541_SecReadPermStatus: objc.UInt32 = 2;
pub const anon541_SecWritePermStatus: objc.UInt32 = 4;

pub const KeychainSettings = extern struct {
    version: objc.UInt32,
    lockOnSleep: objc.Boolean,
    useLockInterval: objc.Boolean,
    lockInterval: objc.UInt32,
};

pub const AuthenticationType = objc.FourCharCode;
pub const AuthenticationType_NTLM: objc.FourCharCode = 1835824238;
pub const AuthenticationType_MSN: objc.FourCharCode = 1634628461;
pub const AuthenticationType_DPA: objc.FourCharCode = 1633775716;
pub const AuthenticationType_RPA: objc.FourCharCode = 1633775730;
pub const AuthenticationType_HTTPBasic: objc.FourCharCode = 1886680168;
pub const AuthenticationType_HTTPDigest: objc.FourCharCode = 1685353576;
pub const AuthenticationType_HTMLForm: objc.FourCharCode = 1836216166;
pub const AuthenticationType_Default: objc.FourCharCode = 1953261156;
pub const AuthenticationType_Any: objc.FourCharCode = 0;

pub const ProtocolType = objc.FourCharCode;
pub const ProtocolType_FTP: objc.FourCharCode = 1718906912;
pub const ProtocolType_FTPAccount: objc.FourCharCode = 1718906977;
pub const ProtocolType_HTTP: objc.FourCharCode = 1752462448;
pub const ProtocolType_IRC: objc.FourCharCode = 1769104160;
pub const ProtocolType_NNTP: objc.FourCharCode = 1852732528;
pub const ProtocolType_POP3: objc.FourCharCode = 1886351411;
pub const ProtocolType_SMTP: objc.FourCharCode = 1936553072;
pub const ProtocolType_SOCKS: objc.FourCharCode = 1936685088;
pub const ProtocolType_IMAP: objc.FourCharCode = 1768776048;
pub const ProtocolType_LDAP: objc.FourCharCode = 1818517872;
pub const ProtocolType_AppleTalk: objc.FourCharCode = 1635019883;
pub const ProtocolType_AFP: objc.FourCharCode = 1634103328;
pub const ProtocolType_Telnet: objc.FourCharCode = 1952803950;
pub const ProtocolType_SSH: objc.FourCharCode = 1936943136;
pub const ProtocolType_FTPS: objc.FourCharCode = 1718906995;
pub const ProtocolType_HTTPS: objc.FourCharCode = 1752461427;
pub const ProtocolType_HTTPProxy: objc.FourCharCode = 1752461432;
pub const ProtocolType_HTTPSProxy: objc.FourCharCode = 1752462200;
pub const ProtocolType_FTPProxy: objc.FourCharCode = 1718907000;
pub const ProtocolType_CIFS: objc.FourCharCode = 1667851891;
pub const ProtocolType_SMB: objc.FourCharCode = 1936548384;
pub const ProtocolType_RTSP: objc.FourCharCode = 1920234352;
pub const ProtocolType_RTSPProxy: objc.FourCharCode = 1920234360;
pub const ProtocolType_DAAP: objc.FourCharCode = 1684103536;
pub const ProtocolType_EPPC: objc.FourCharCode = 1701867619;
pub const ProtocolType_IPP: objc.FourCharCode = 1768976416;
pub const ProtocolType_NNTPS: objc.FourCharCode = 1853124723;
pub const ProtocolType_LDAPS: objc.FourCharCode = 1818521715;
pub const ProtocolType_TelnetS: objc.FourCharCode = 1952803955;
pub const ProtocolType_IMAPS: objc.FourCharCode = 1768779891;
pub const ProtocolType_IRCS: objc.FourCharCode = 1769104243;
pub const ProtocolType_POP3S: objc.FourCharCode = 1886351475;
pub const ProtocolType_CVSpserver: objc.FourCharCode = 1668707184;
pub const ProtocolType_SVN: objc.FourCharCode = 1937141280;
pub const ProtocolType_Any: objc.FourCharCode = 0;

pub const KeychainEvent = objc.UInt32;
pub const KeychainEvent_LockEvent: objc.UInt32 = 1;
pub const KeychainEvent_UnlockEvent: objc.UInt32 = 2;
pub const KeychainEvent_AddEvent: objc.UInt32 = 3;
pub const KeychainEvent_DeleteEvent: objc.UInt32 = 4;
pub const KeychainEvent_UpdateEvent: objc.UInt32 = 5;
pub const KeychainEvent_PasswordChangedEvent: objc.UInt32 = 6;
pub const KeychainEvent_DefaultChangedEvent: objc.UInt32 = 9;
pub const KeychainEvent_DataAccessEvent: objc.UInt32 = 10;
pub const KeychainEvent_ListChangedEvent: objc.UInt32 = 11;
pub const KeychainEvent_TrustSettingsChangedEvent: objc.UInt32 = 12;

pub const KeychainEventMask = objc.UInt32;
pub const KeychainEventMask_LockEventMask: objc.UInt32 = 2;
pub const KeychainEventMask_UnlockEventMask: objc.UInt32 = 4;
pub const KeychainEventMask_AddEventMask: objc.UInt32 = 8;
pub const KeychainEventMask_DeleteEventMask: objc.UInt32 = 16;
pub const KeychainEventMask_UpdateEventMask: objc.UInt32 = 32;
pub const KeychainEventMask_PasswordChangedEventMask: objc.UInt32 = 64;
pub const KeychainEventMask_DefaultChangedEventMask: objc.UInt32 = 512;
pub const KeychainEventMask_DataAccessEventMask: objc.UInt32 = 1024;
pub const KeychainEventMask_ListChangedMask: objc.UInt32 = 2048;
pub const KeychainEventMask_TrustSettingsChangedEventMask: objc.UInt32 = 4096;
pub const KeychainEventMask_EveryEventMask: objc.UInt32 = -1;

pub const KeychainCallbackInfo = extern struct {
    version: objc.UInt32,
    item: KeychainItemRef,
    keychain: KeychainRef,
    pid: objc.pid_t,
};

extern "Security" fn SecKeychainGetTypeID() callconv(.C) core_foundation.TypeID;
pub const keychainGetTypeID = SecKeychainGetTypeID;

extern "Security" fn SecKeychainGetVersion(returnVers: ?*objc.UInt32) callconv(.C) objc.OSStatus;
pub const keychainGetVersion = SecKeychainGetVersion;

extern "Security" fn SecKeychainOpen(pathName: [*:0]const u8, keychain: ?*KeychainRef) callconv(.C) objc.OSStatus;
pub const keychainOpen = SecKeychainOpen;

extern "Security" fn SecKeychainCreate(
    pathName: [*:0]const u8,
    passwordLength: objc.UInt32,
    password: ?*const anyopaque,
    promptUser: objc.Boolean,
    initialAccess: AccessRef,
    keychain: ?*KeychainRef,
) callconv(.C) objc.OSStatus;
pub const keychainCreate = SecKeychainCreate;

extern "Security" fn SecKeychainDelete(keychainOrArray: KeychainRef) callconv(.C) objc.OSStatus;
pub const keychainDelete = SecKeychainDelete;

extern "Security" fn SecKeychainSetSettings(keychain: KeychainRef, newSettings: ?*const KeychainSettings) callconv(.C) objc.OSStatus;
pub const keychainSetSettings = SecKeychainSetSettings;

extern "Security" fn SecKeychainCopySettings(keychain: KeychainRef, outSettings: ?*KeychainSettings) callconv(.C) objc.OSStatus;
pub const keychainCopySettings = SecKeychainCopySettings;

extern "Security" fn SecKeychainUnlock(
    keychain: KeychainRef,
    passwordLength: objc.UInt32,
    password: ?*const anyopaque,
    usePassword: objc.Boolean,
) callconv(.C) objc.OSStatus;
pub const keychainUnlock = SecKeychainUnlock;

extern "Security" fn SecKeychainLock(keychain: KeychainRef) callconv(.C) objc.OSStatus;
pub const keychainLock = SecKeychainLock;

extern "Security" fn SecKeychainLockAll() callconv(.C) objc.OSStatus;
pub const keychainLockAll = SecKeychainLockAll;

extern "Security" fn SecKeychainCopyDefault(keychain: ?*KeychainRef) callconv(.C) objc.OSStatus;
pub const keychainCopyDefault = SecKeychainCopyDefault;

extern "Security" fn SecKeychainSetDefault(keychain: KeychainRef) callconv(.C) objc.OSStatus;
pub const keychainSetDefault = SecKeychainSetDefault;

extern "Security" fn SecKeychainCopySearchList(searchList: ?*core_foundation.ArrayRef) callconv(.C) objc.OSStatus;
pub const keychainCopySearchList = SecKeychainCopySearchList;

extern "Security" fn SecKeychainSetSearchList(searchList: core_foundation.ArrayRef) callconv(.C) objc.OSStatus;
pub const keychainSetSearchList = SecKeychainSetSearchList;

pub const PreferencesDomain = i32;
pub const PreferencesDomain_User: i32 = 0;
pub const PreferencesDomain_System: i32 = 1;
pub const PreferencesDomain_Common: i32 = 2;
pub const PreferencesDomain_Dynamic: i32 = 3;

extern "Security" fn SecKeychainCopyDomainDefault(domain: PreferencesDomain, keychain: ?*KeychainRef) callconv(.C) objc.OSStatus;
pub const keychainCopyDomainDefault = SecKeychainCopyDomainDefault;

extern "Security" fn SecKeychainSetDomainDefault(domain: PreferencesDomain, keychain: KeychainRef) callconv(.C) objc.OSStatus;
pub const keychainSetDomainDefault = SecKeychainSetDomainDefault;

extern "Security" fn SecKeychainCopyDomainSearchList(domain: PreferencesDomain, searchList: ?*core_foundation.ArrayRef) callconv(.C) objc.OSStatus;
pub const keychainCopyDomainSearchList = SecKeychainCopyDomainSearchList;

extern "Security" fn SecKeychainSetDomainSearchList(domain: PreferencesDomain, searchList: core_foundation.ArrayRef) callconv(.C) objc.OSStatus;
pub const keychainSetDomainSearchList = SecKeychainSetDomainSearchList;

extern "Security" fn SecKeychainSetPreferenceDomain(domain: PreferencesDomain) callconv(.C) objc.OSStatus;
pub const keychainSetPreferenceDomain = SecKeychainSetPreferenceDomain;

extern "Security" fn SecKeychainGetPreferenceDomain(domain: ?*PreferencesDomain) callconv(.C) objc.OSStatus;
pub const keychainGetPreferenceDomain = SecKeychainGetPreferenceDomain;

extern "Security" fn SecKeychainGetStatus(keychain: KeychainRef, keychainStatus: ?*KeychainStatus) callconv(.C) objc.OSStatus;
pub const keychainGetStatus = SecKeychainGetStatus;

extern "Security" fn SecKeychainGetPath(keychain: KeychainRef, ioPathLength: ?*objc.UInt32, pathName: ?*c_char) callconv(.C) objc.OSStatus;
pub const keychainGetPath = SecKeychainGetPath;

extern "Security" fn SecKeychainAttributeInfoForItemID(keychain: KeychainRef, itemID: objc.UInt32, info: ?*?*KeychainAttributeInfo) callconv(.C) objc.OSStatus;
pub const keychainAttributeInfoForItemID = SecKeychainAttributeInfoForItemID;

extern "Security" fn SecKeychainFreeAttributeInfo(info: ?*KeychainAttributeInfo) callconv(.C) objc.OSStatus;
pub const keychainFreeAttributeInfo = SecKeychainFreeAttributeInfo;

pub const KeychainCallback = objc.OSStatus;

extern "Security" fn SecKeychainAddCallback(callbackFunction: KeychainCallback, eventMask: KeychainEventMask, userContext: ?*anyopaque) callconv(.C) objc.OSStatus;
pub const keychainAddCallback = SecKeychainAddCallback;

extern "Security" fn SecKeychainRemoveCallback(callbackFunction: KeychainCallback) callconv(.C) objc.OSStatus;
pub const keychainRemoveCallback = SecKeychainRemoveCallback;

extern "Security" fn SecKeychainAddInternetPassword(
    keychain: KeychainRef,
    serverNameLength: objc.UInt32,
    serverName: [*:0]const u8,
    securityDomainLength: objc.UInt32,
    securityDomain: [*:0]const u8,
    accountNameLength: objc.UInt32,
    accountName: [*:0]const u8,
    pathLength: objc.UInt32,
    path: [*:0]const u8,
    port: objc.UInt16,
    protocol: ProtocolType,
    authenticationType: AuthenticationType,
    passwordLength: objc.UInt32,
    passwordData: ?*const anyopaque,
    itemRef: ?*KeychainItemRef,
) callconv(.C) objc.OSStatus;
pub const keychainAddInternetPassword = SecKeychainAddInternetPassword;

extern "Security" fn SecKeychainFindInternetPassword(
    keychainOrArray: core_foundation.TypeRef,
    serverNameLength: objc.UInt32,
    serverName: [*:0]const u8,
    securityDomainLength: objc.UInt32,
    securityDomain: [*:0]const u8,
    accountNameLength: objc.UInt32,
    accountName: [*:0]const u8,
    pathLength: objc.UInt32,
    path: [*:0]const u8,
    port: objc.UInt16,
    protocol: ProtocolType,
    authenticationType: AuthenticationType,
    passwordLength: ?*objc.UInt32,
    passwordData: ?*?*anyopaque,
    itemRef: ?*KeychainItemRef,
) callconv(.C) objc.OSStatus;
pub const keychainFindInternetPassword = SecKeychainFindInternetPassword;

extern "Security" fn SecKeychainAddGenericPassword(
    keychain: KeychainRef,
    serviceNameLength: objc.UInt32,
    serviceName: [*:0]const u8,
    accountNameLength: objc.UInt32,
    accountName: [*:0]const u8,
    passwordLength: objc.UInt32,
    passwordData: ?*const anyopaque,
    itemRef: ?*KeychainItemRef,
) callconv(.C) objc.OSStatus;
pub const keychainAddGenericPassword = SecKeychainAddGenericPassword;

extern "Security" fn SecKeychainFindGenericPassword(
    keychainOrArray: core_foundation.TypeRef,
    serviceNameLength: objc.UInt32,
    serviceName: [*:0]const u8,
    accountNameLength: objc.UInt32,
    accountName: [*:0]const u8,
    passwordLength: ?*objc.UInt32,
    passwordData: ?*?*anyopaque,
    itemRef: ?*KeychainItemRef,
) callconv(.C) objc.OSStatus;
pub const keychainFindGenericPassword = SecKeychainFindGenericPassword;

extern "Security" fn SecKeychainSetUserInteractionAllowed(state: objc.Boolean) callconv(.C) objc.OSStatus;
pub const keychainSetUserInteractionAllowed = SecKeychainSetUserInteractionAllowed;

extern "Security" fn SecKeychainGetUserInteractionAllowed(state: ?*objc.Boolean) callconv(.C) objc.OSStatus;
pub const keychainGetUserInteractionAllowed = SecKeychainGetUserInteractionAllowed;

extern "Security" fn SecKeychainGetCSPHandle(keychain: KeychainRef, cspHandle: ?*CSSM_CSP_HANDLE) callconv(.C) objc.OSStatus;
pub const keychainGetCSPHandle = SecKeychainGetCSPHandle;

extern "Security" fn SecKeychainGetDLDBHandle(keychain: KeychainRef, dldbHandle: ?*CSSM_DL_DB_HANDLE) callconv(.C) objc.OSStatus;
pub const keychainGetDLDBHandle = SecKeychainGetDLDBHandle;

extern "Security" fn SecKeychainCopyAccess(keychain: KeychainRef, access: ?*AccessRef) callconv(.C) objc.OSStatus;
pub const keychainCopyAccess = SecKeychainCopyAccess;

extern "Security" fn SecKeychainSetAccess(keychain: KeychainRef, access: AccessRef) callconv(.C) objc.OSStatus;
pub const keychainSetAccess = SecKeychainSetAccess;

pub const ExternalFormat = objc.uint32_t;
pub const ExternalFormat_FormatUnknown: objc.uint32_t = 0;
pub const ExternalFormat_FormatOpenSSL: objc.uint32_t = 1;
pub const ExternalFormat_FormatSSH: objc.uint32_t = 2;
pub const ExternalFormat_FormatBSAFE: objc.uint32_t = 3;
pub const ExternalFormat_FormatRawKey: objc.uint32_t = 4;
pub const ExternalFormat_FormatWrappedPKCS8: objc.uint32_t = 5;
pub const ExternalFormat_FormatWrappedOpenSSL: objc.uint32_t = 6;
pub const ExternalFormat_FormatWrappedSSH: objc.uint32_t = 7;
pub const ExternalFormat_FormatWrappedLSH: objc.uint32_t = 8;
pub const ExternalFormat_FormatX509Cert: objc.uint32_t = 9;
pub const ExternalFormat_FormatPEMSequence: objc.uint32_t = 10;
pub const ExternalFormat_FormatPKCS7: objc.uint32_t = 11;
pub const ExternalFormat_FormatPKCS12: objc.uint32_t = 12;
pub const ExternalFormat_FormatNetscapeCertSequence: objc.uint32_t = 13;
pub const ExternalFormat_FormatSSHv2: objc.uint32_t = 14;

pub const ExternalItemType = objc.uint32_t;
pub const ExternalItemType_ItemTypeUnknown: objc.uint32_t = 0;
pub const ExternalItemType_ItemTypePrivateKey: objc.uint32_t = 1;
pub const ExternalItemType_ItemTypePublicKey: objc.uint32_t = 2;
pub const ExternalItemType_ItemTypeSessionKey: objc.uint32_t = 3;
pub const ExternalItemType_ItemTypeCertificate: objc.uint32_t = 4;
pub const ExternalItemType_ItemTypeAggregate: objc.uint32_t = 5;

pub const ItemImportExportFlags = objc.uint32_t;
pub const ItemImportExportFlags_PemArmour: objc.uint32_t = 1;

pub const KeyImportExportFlags = objc.uint32_t;
pub const KeyImportExportFlags_OnlyOne: objc.uint32_t = 1;
pub const KeyImportExportFlags_SecurePassphrase: objc.uint32_t = 2;
pub const KeyImportExportFlags_NoAccessControl: objc.uint32_t = 4;

pub const KeyImportExportParameters = extern struct {
    version: objc.uint32_t,
    flags: KeyImportExportFlags,
    passphrase: core_foundation.TypeRef,
    alertTitle: core_foundation.StringRef,
    alertPrompt: core_foundation.StringRef,
    accessRef: AccessRef,
    keyUsage: CSSM_KEYUSE,
    keyAttributes: CSSM_KEYATTR_FLAGS,
};

pub const ItemImportExportKeyParameters = extern struct {
    version: objc.uint32_t,
    flags: KeyImportExportFlags,
    passphrase: core_foundation.TypeRef,
    alertTitle: core_foundation.StringRef,
    alertPrompt: core_foundation.StringRef,
    accessRef: AccessRef,
    keyUsage: core_foundation.ArrayRef,
    keyAttributes: core_foundation.ArrayRef,
};

extern "Security" fn SecKeychainItemExport(
    keychainItemOrArray: core_foundation.TypeRef,
    outputFormat: ExternalFormat,
    flags: ItemImportExportFlags,
    keyParams: ?*const KeyImportExportParameters,
    exportedData: ?*core_foundation.DataRef,
) callconv(.C) objc.OSStatus;
pub const keychainItemExport = SecKeychainItemExport;

extern "Security" fn SecItemExport(
    secItemOrArray: core_foundation.TypeRef,
    outputFormat: ExternalFormat,
    flags: ItemImportExportFlags,
    keyParams: ?*const ItemImportExportKeyParameters,
    exportedData: ?*core_foundation.DataRef,
) callconv(.C) objc.OSStatus;
pub const itemExport = SecItemExport;

extern "Security" fn SecKeychainItemImport(
    importedData: core_foundation.DataRef,
    fileNameOrExtension: core_foundation.StringRef,
    inputFormat: ?*ExternalFormat,
    itemType: ?*ExternalItemType,
    flags: ItemImportExportFlags,
    keyParams: ?*const KeyImportExportParameters,
    importKeychain: KeychainRef,
    outItems: ?*core_foundation.ArrayRef,
) callconv(.C) objc.OSStatus;
pub const keychainItemImport = SecKeychainItemImport;

extern "Security" fn SecItemImport(
    importedData: core_foundation.DataRef,
    fileNameOrExtension: core_foundation.StringRef,
    inputFormat: ?*ExternalFormat,
    itemType: ?*ExternalItemType,
    flags: ItemImportExportFlags,
    keyParams: ?*const ItemImportExportKeyParameters,
    importKeychain: KeychainRef,
    outItems: ?*core_foundation.ArrayRef,
) callconv(.C) objc.OSStatus;
pub const itemImport = SecItemImport;

extern "Security" fn SecPKCS12Import(pkcs12_data: core_foundation.DataRef, options: core_foundation.DictionaryRef, items: ?*core_foundation.ArrayRef) callconv(.C) objc.OSStatus;
pub const pkcs12Import = SecPKCS12Import;

pub const TrustResultType = objc.uint32_t;
pub const TrustResultType_Invalid: objc.uint32_t = 0;
pub const TrustResultType_Proceed: objc.uint32_t = 1;
pub const TrustResultType_Confirm: objc.uint32_t = 2;
pub const TrustResultType_Deny: objc.uint32_t = 3;
pub const TrustResultType_Unspecified: objc.uint32_t = 4;
pub const TrustResultType_RecoverableTrustFailure: objc.uint32_t = 5;
pub const TrustResultType_FatalTrustFailure: objc.uint32_t = 6;
pub const TrustResultType_OtherError: objc.uint32_t = 7;

pub const __SecTrust = extern struct {};

pub const TrustRef = __SecTrust;

pub const TrustCallback = *const fn (TrustRef, TrustResultType) callconv(.C) void;

extern "Security" fn SecTrustGetTypeID() callconv(.C) core_foundation.TypeID;
pub const trustGetTypeID = SecTrustGetTypeID;

extern "Security" fn SecTrustCreateWithCertificates(certificates: core_foundation.TypeRef, policies: core_foundation.TypeRef, trust: ?*TrustRef) callconv(.C) objc.OSStatus;
pub const trustCreateWithCertificates = SecTrustCreateWithCertificates;

extern "Security" fn SecTrustSetPolicies(trust: TrustRef, policies: core_foundation.TypeRef) callconv(.C) objc.OSStatus;
pub const trustSetPolicies = SecTrustSetPolicies;

extern "Security" fn SecTrustCopyPolicies(trust: TrustRef, policies: ?*core_foundation.ArrayRef) callconv(.C) objc.OSStatus;
pub const trustCopyPolicies = SecTrustCopyPolicies;

extern "Security" fn SecTrustSetNetworkFetchAllowed(trust: TrustRef, allowFetch: objc.Boolean) callconv(.C) objc.OSStatus;
pub const trustSetNetworkFetchAllowed = SecTrustSetNetworkFetchAllowed;

extern "Security" fn SecTrustGetNetworkFetchAllowed(trust: TrustRef, allowFetch: ?*objc.Boolean) callconv(.C) objc.OSStatus;
pub const trustGetNetworkFetchAllowed = SecTrustGetNetworkFetchAllowed;

extern "Security" fn SecTrustSetAnchorCertificates(trust: TrustRef, anchorCertificates: core_foundation.ArrayRef) callconv(.C) objc.OSStatus;
pub const trustSetAnchorCertificates = SecTrustSetAnchorCertificates;

extern "Security" fn SecTrustSetAnchorCertificatesOnly(trust: TrustRef, anchorCertificatesOnly: objc.Boolean) callconv(.C) objc.OSStatus;
pub const trustSetAnchorCertificatesOnly = SecTrustSetAnchorCertificatesOnly;

extern "Security" fn SecTrustCopyCustomAnchorCertificates(trust: TrustRef, anchors: ?*core_foundation.ArrayRef) callconv(.C) objc.OSStatus;
pub const trustCopyCustomAnchorCertificates = SecTrustCopyCustomAnchorCertificates;

extern "Security" fn SecTrustSetVerifyDate(trust: TrustRef, verifyDate: core_foundation.DateRef) callconv(.C) objc.OSStatus;
pub const trustSetVerifyDate = SecTrustSetVerifyDate;

extern "Security" fn SecTrustGetVerifyTime(trust: TrustRef) callconv(.C) core_foundation.AbsoluteTime;
pub const trustGetVerifyTime = SecTrustGetVerifyTime;

extern "Security" fn SecTrustEvaluate(trust: TrustRef, result: ?*TrustResultType) callconv(.C) objc.OSStatus;
pub const trustEvaluate = SecTrustEvaluate;

extern "Security" fn SecTrustEvaluateAsync(trust: TrustRef, queue: objc.dispatch_queue_t, result: TrustCallback) callconv(.C) objc.OSStatus;
pub const trustEvaluateAsync = SecTrustEvaluateAsync;

extern "Security" fn SecTrustEvaluateWithError() callconv(.C) i32;
pub const trustEvaluateWithError = SecTrustEvaluateWithError;

pub const TrustWithErrorCallback = *const fn (TrustRef, objc.bool, core_foundation.ErrorRef) callconv(.C) void;

extern "Security" fn SecTrustEvaluateAsyncWithError(trust: TrustRef, queue: objc.dispatch_queue_t, result: TrustWithErrorCallback) callconv(.C) objc.OSStatus;
pub const trustEvaluateAsyncWithError = SecTrustEvaluateAsyncWithError;

extern "Security" fn SecTrustGetTrustResult(trust: TrustRef, result: ?*TrustResultType) callconv(.C) objc.OSStatus;
pub const trustGetTrustResult = SecTrustGetTrustResult;

extern "Security" fn SecTrustCopyPublicKey(trust: TrustRef) callconv(.C) KeyRef;
pub const trustCopyPublicKey = SecTrustCopyPublicKey;

extern "Security" fn SecTrustCopyKey(trust: TrustRef) callconv(.C) KeyRef;
pub const trustCopyKey = SecTrustCopyKey;

extern "Security" fn SecTrustGetCertificateCount(trust: TrustRef) callconv(.C) core_foundation.Index;
pub const trustGetCertificateCount = SecTrustGetCertificateCount;

extern "Security" fn SecTrustGetCertificateAtIndex(trust: TrustRef, ix: core_foundation.Index) callconv(.C) CertificateRef;
pub const trustGetCertificateAtIndex = SecTrustGetCertificateAtIndex;

extern "Security" fn SecTrustCopyExceptions(trust: TrustRef) callconv(.C) core_foundation.DataRef;
pub const trustCopyExceptions = SecTrustCopyExceptions;

extern "Security" fn SecTrustSetExceptions() callconv(.C) i32;
pub const trustSetExceptions = SecTrustSetExceptions;

extern "Security" fn SecTrustCopyProperties(trust: TrustRef) callconv(.C) core_foundation.ArrayRef;
pub const trustCopyProperties = SecTrustCopyProperties;

extern "Security" fn SecTrustCopyResult(trust: TrustRef) callconv(.C) core_foundation.DictionaryRef;
pub const trustCopyResult = SecTrustCopyResult;

extern "Security" fn SecTrustSetOCSPResponse(trust: TrustRef, responseData: core_foundation.TypeRef) callconv(.C) objc.OSStatus;
pub const trustSetOCSPResponse = SecTrustSetOCSPResponse;

extern "Security" fn SecTrustSetSignedCertificateTimestamps(trust: TrustRef, sctArray: core_foundation.ArrayRef) callconv(.C) objc.OSStatus;
pub const trustSetSignedCertificateTimestamps = SecTrustSetSignedCertificateTimestamps;

extern "Security" fn SecTrustCopyCertificateChain(trust: TrustRef) callconv(.C) core_foundation.ArrayRef;
pub const trustCopyCertificateChain = SecTrustCopyCertificateChain;

pub const TrustUserSetting = TrustResultType;

pub const TrustOptionFlags = objc.uint32_t;
pub const TrustOptionFlags_AllowExpired: objc.uint32_t = 1;
pub const TrustOptionFlags_LeafIsCA: objc.uint32_t = 2;
pub const TrustOptionFlags_FetchIssuerFromNet: objc.uint32_t = 4;
pub const TrustOptionFlags_AllowExpiredRoot: objc.uint32_t = 8;
pub const TrustOptionFlags_RequireRevPerCert: objc.uint32_t = 16;
pub const TrustOptionFlags_UseTrustSettings: objc.uint32_t = 32;
pub const TrustOptionFlags_ImplicitAnchors: objc.uint32_t = 64;

extern "Security" fn SecTrustSetOptions(trustRef: TrustRef, options: TrustOptionFlags) callconv(.C) objc.OSStatus;
pub const trustSetOptions = SecTrustSetOptions;

extern "Security" fn SecTrustSetParameters(trustRef: TrustRef, action: CSSM_TP_ACTION, actionData: core_foundation.DataRef) callconv(.C) objc.OSStatus;
pub const trustSetParameters = SecTrustSetParameters;

extern "Security" fn SecTrustSetKeychains(trust: TrustRef, keychainOrArray: core_foundation.TypeRef) callconv(.C) objc.OSStatus;
pub const trustSetKeychains = SecTrustSetKeychains;

extern "Security" fn SecTrustGetResult(
    trustRef: TrustRef,
    result: ?*TrustResultType,
    certChain: ?*core_foundation.ArrayRef,
    statusChain: ?*?*CSSM_TP_APPLE_EVIDENCE_INFO,
) callconv(.C) objc.OSStatus;
pub const trustGetResult = SecTrustGetResult;

extern "Security" fn SecTrustGetCssmResult(trust: TrustRef, result: ?*CSSM_TP_VERIFY_CONTEXT_RESULT_PTR) callconv(.C) objc.OSStatus;
pub const trustGetCssmResult = SecTrustGetCssmResult;

extern "Security" fn SecTrustGetCssmResultCode(trust: TrustRef, resultCode: ?*objc.OSStatus) callconv(.C) objc.OSStatus;
pub const trustGetCssmResultCode = SecTrustGetCssmResultCode;

extern "Security" fn SecTrustGetTPHandle(trust: TrustRef, handle: ?*CSSM_TP_HANDLE) callconv(.C) objc.OSStatus;
pub const trustGetTPHandle = SecTrustGetTPHandle;

extern "Security" fn SecTrustCopyAnchorCertificates(anchors: ?*core_foundation.ArrayRef) callconv(.C) objc.OSStatus;
pub const trustCopyAnchorCertificates = SecTrustCopyAnchorCertificates;

extern "Security" fn SecAddSharedWebCredential(
    fqdn: core_foundation.StringRef,
    account: core_foundation.StringRef,
    password: core_foundation.StringRef,
    completionHandler: *const fn (core_foundation.ErrorRef) callconv(.C) void,
) callconv(.C) void;
pub const addSharedWebCredential = SecAddSharedWebCredential;

extern "Security" fn SecRequestSharedWebCredential(fqdn: core_foundation.StringRef, account: core_foundation.StringRef, completionHandler: *const fn (core_foundation.ArrayRef, core_foundation.ErrorRef) callconv(.C) void) callconv(.C) void;
pub const requestSharedWebCredential = SecRequestSharedWebCredential;

extern "Security" fn SecCreateSharedWebCredentialPassword() callconv(.C) core_foundation.StringRef;
pub const createSharedWebCredentialPassword = SecCreateSharedWebCredentialPassword;

pub extern "Security" fn sec_retain(obj: ?*anyopaque) callconv(.C) ?*anyopaque;

pub extern "Security" fn sec_release(obj: ?*anyopaque) callconv(.C) void;

/// https://developer.apple.com/documentation/Security/OS_sec_object?language=objc
pub const OS_sec_object = opaque {
    pub const Internal = objc.ExternProtocol(@This(), &.{objc.NSObject});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "description", ?*foundation.String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "debugDescription", ?*foundation.String, .{});
    }
};

pub const sec_object_t = OS_sec_object;

pub const SSLCipherSuite = objc.uint16_t;

pub const anon471 = SSLCipherSuite;
pub const anon471_SSL_NULL_WITH_NULL_NULL: SSLCipherSuite = 0;
pub const anon471_SSL_RSA_WITH_NULL_MD5: SSLCipherSuite = 1;
pub const anon471_SSL_RSA_WITH_NULL_SHA: SSLCipherSuite = 2;
pub const anon471_SSL_RSA_EXPORT_WITH_RC4_40_MD5: SSLCipherSuite = 3;
pub const anon471_SSL_RSA_WITH_RC4_128_MD5: SSLCipherSuite = 4;
pub const anon471_SSL_RSA_WITH_RC4_128_SHA: SSLCipherSuite = 5;
pub const anon471_SSL_RSA_EXPORT_WITH_RC2_CBC_40_MD5: SSLCipherSuite = 6;
pub const anon471_SSL_RSA_WITH_IDEA_CBC_SHA: SSLCipherSuite = 7;
pub const anon471_SSL_RSA_EXPORT_WITH_DES40_CBC_SHA: SSLCipherSuite = 8;
pub const anon471_SSL_RSA_WITH_DES_CBC_SHA: SSLCipherSuite = 9;
pub const anon471_SSL_RSA_WITH_3DES_EDE_CBC_SHA: SSLCipherSuite = 10;
pub const anon471_SSL_DH_DSS_EXPORT_WITH_DES40_CBC_SHA: SSLCipherSuite = 11;
pub const anon471_SSL_DH_DSS_WITH_DES_CBC_SHA: SSLCipherSuite = 12;
pub const anon471_SSL_DH_DSS_WITH_3DES_EDE_CBC_SHA: SSLCipherSuite = 13;
pub const anon471_SSL_DH_RSA_EXPORT_WITH_DES40_CBC_SHA: SSLCipherSuite = 14;
pub const anon471_SSL_DH_RSA_WITH_DES_CBC_SHA: SSLCipherSuite = 15;
pub const anon471_SSL_DH_RSA_WITH_3DES_EDE_CBC_SHA: SSLCipherSuite = 16;
pub const anon471_SSL_DHE_DSS_EXPORT_WITH_DES40_CBC_SHA: SSLCipherSuite = 17;
pub const anon471_SSL_DHE_DSS_WITH_DES_CBC_SHA: SSLCipherSuite = 18;
pub const anon471_SSL_DHE_DSS_WITH_3DES_EDE_CBC_SHA: SSLCipherSuite = 19;
pub const anon471_SSL_DHE_RSA_EXPORT_WITH_DES40_CBC_SHA: SSLCipherSuite = 20;
pub const anon471_SSL_DHE_RSA_WITH_DES_CBC_SHA: SSLCipherSuite = 21;
pub const anon471_SSL_DHE_RSA_WITH_3DES_EDE_CBC_SHA: SSLCipherSuite = 22;
pub const anon471_SSL_DH_anon_EXPORT_WITH_RC4_40_MD5: SSLCipherSuite = 23;
pub const anon471_SSL_DH_anon_WITH_RC4_128_MD5: SSLCipherSuite = 24;
pub const anon471_SSL_DH_anon_EXPORT_WITH_DES40_CBC_SHA: SSLCipherSuite = 25;
pub const anon471_SSL_DH_anon_WITH_DES_CBC_SHA: SSLCipherSuite = 26;
pub const anon471_SSL_DH_anon_WITH_3DES_EDE_CBC_SHA: SSLCipherSuite = 27;
pub const anon471_SSL_FORTEZZA_DMS_WITH_NULL_SHA: SSLCipherSuite = 28;
pub const anon471_SSL_FORTEZZA_DMS_WITH_FORTEZZA_CBC_SHA: SSLCipherSuite = 29;
pub const anon471_TLS_RSA_WITH_AES_128_CBC_SHA: SSLCipherSuite = 47;
pub const anon471_TLS_DH_DSS_WITH_AES_128_CBC_SHA: SSLCipherSuite = 48;
pub const anon471_TLS_DH_RSA_WITH_AES_128_CBC_SHA: SSLCipherSuite = 49;
pub const anon471_TLS_DHE_DSS_WITH_AES_128_CBC_SHA: SSLCipherSuite = 50;
pub const anon471_TLS_DHE_RSA_WITH_AES_128_CBC_SHA: SSLCipherSuite = 51;
pub const anon471_TLS_DH_anon_WITH_AES_128_CBC_SHA: SSLCipherSuite = 52;
pub const anon471_TLS_RSA_WITH_AES_256_CBC_SHA: SSLCipherSuite = 53;
pub const anon471_TLS_DH_DSS_WITH_AES_256_CBC_SHA: SSLCipherSuite = 54;
pub const anon471_TLS_DH_RSA_WITH_AES_256_CBC_SHA: SSLCipherSuite = 55;
pub const anon471_TLS_DHE_DSS_WITH_AES_256_CBC_SHA: SSLCipherSuite = 56;
pub const anon471_TLS_DHE_RSA_WITH_AES_256_CBC_SHA: SSLCipherSuite = 57;
pub const anon471_TLS_DH_anon_WITH_AES_256_CBC_SHA: SSLCipherSuite = 58;
pub const anon471_TLS_ECDH_ECDSA_WITH_NULL_SHA: SSLCipherSuite = -16383;
pub const anon471_TLS_ECDH_ECDSA_WITH_RC4_128_SHA: SSLCipherSuite = -16382;
pub const anon471_TLS_ECDH_ECDSA_WITH_3DES_EDE_CBC_SHA: SSLCipherSuite = -16381;
pub const anon471_TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA: SSLCipherSuite = -16380;
pub const anon471_TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA: SSLCipherSuite = -16379;
pub const anon471_TLS_ECDHE_ECDSA_WITH_NULL_SHA: SSLCipherSuite = -16378;
pub const anon471_TLS_ECDHE_ECDSA_WITH_RC4_128_SHA: SSLCipherSuite = -16377;
pub const anon471_TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA: SSLCipherSuite = -16376;
pub const anon471_TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA: SSLCipherSuite = -16375;
pub const anon471_TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA: SSLCipherSuite = -16374;
pub const anon471_TLS_ECDH_RSA_WITH_NULL_SHA: SSLCipherSuite = -16373;
pub const anon471_TLS_ECDH_RSA_WITH_RC4_128_SHA: SSLCipherSuite = -16372;
pub const anon471_TLS_ECDH_RSA_WITH_3DES_EDE_CBC_SHA: SSLCipherSuite = -16371;
pub const anon471_TLS_ECDH_RSA_WITH_AES_128_CBC_SHA: SSLCipherSuite = -16370;
pub const anon471_TLS_ECDH_RSA_WITH_AES_256_CBC_SHA: SSLCipherSuite = -16369;
pub const anon471_TLS_ECDHE_RSA_WITH_NULL_SHA: SSLCipherSuite = -16368;
pub const anon471_TLS_ECDHE_RSA_WITH_RC4_128_SHA: SSLCipherSuite = -16367;
pub const anon471_TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA: SSLCipherSuite = -16366;
pub const anon471_TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA: SSLCipherSuite = -16365;
pub const anon471_TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA: SSLCipherSuite = -16364;
pub const anon471_TLS_ECDH_anon_WITH_NULL_SHA: SSLCipherSuite = -16363;
pub const anon471_TLS_ECDH_anon_WITH_RC4_128_SHA: SSLCipherSuite = -16362;
pub const anon471_TLS_ECDH_anon_WITH_3DES_EDE_CBC_SHA: SSLCipherSuite = -16361;
pub const anon471_TLS_ECDH_anon_WITH_AES_128_CBC_SHA: SSLCipherSuite = -16360;
pub const anon471_TLS_ECDH_anon_WITH_AES_256_CBC_SHA: SSLCipherSuite = -16359;
pub const anon471_TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA: SSLCipherSuite = -16331;
pub const anon471_TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA: SSLCipherSuite = -16330;
pub const anon471_TLS_PSK_WITH_CHACHA20_POLY1305_SHA256: SSLCipherSuite = -13141;
pub const anon471_TLS_NULL_WITH_NULL_NULL: SSLCipherSuite = 0;
pub const anon471_TLS_RSA_WITH_NULL_MD5: SSLCipherSuite = 1;
pub const anon471_TLS_RSA_WITH_NULL_SHA: SSLCipherSuite = 2;
pub const anon471_TLS_RSA_WITH_RC4_128_MD5: SSLCipherSuite = 4;
pub const anon471_TLS_RSA_WITH_RC4_128_SHA: SSLCipherSuite = 5;
pub const anon471_TLS_RSA_WITH_3DES_EDE_CBC_SHA: SSLCipherSuite = 10;
pub const anon471_TLS_RSA_WITH_NULL_SHA256: SSLCipherSuite = 59;
pub const anon471_TLS_RSA_WITH_AES_128_CBC_SHA256: SSLCipherSuite = 60;
pub const anon471_TLS_RSA_WITH_AES_256_CBC_SHA256: SSLCipherSuite = 61;
pub const anon471_TLS_DH_DSS_WITH_3DES_EDE_CBC_SHA: SSLCipherSuite = 13;
pub const anon471_TLS_DH_RSA_WITH_3DES_EDE_CBC_SHA: SSLCipherSuite = 16;
pub const anon471_TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA: SSLCipherSuite = 19;
pub const anon471_TLS_DHE_RSA_WITH_3DES_EDE_CBC_SHA: SSLCipherSuite = 22;
pub const anon471_TLS_DH_DSS_WITH_AES_128_CBC_SHA256: SSLCipherSuite = 62;
pub const anon471_TLS_DH_RSA_WITH_AES_128_CBC_SHA256: SSLCipherSuite = 63;
pub const anon471_TLS_DHE_DSS_WITH_AES_128_CBC_SHA256: SSLCipherSuite = 64;
pub const anon471_TLS_DHE_RSA_WITH_AES_128_CBC_SHA256: SSLCipherSuite = 103;
pub const anon471_TLS_DH_DSS_WITH_AES_256_CBC_SHA256: SSLCipherSuite = 104;
pub const anon471_TLS_DH_RSA_WITH_AES_256_CBC_SHA256: SSLCipherSuite = 105;
pub const anon471_TLS_DHE_DSS_WITH_AES_256_CBC_SHA256: SSLCipherSuite = 106;
pub const anon471_TLS_DHE_RSA_WITH_AES_256_CBC_SHA256: SSLCipherSuite = 107;
pub const anon471_TLS_DH_anon_WITH_RC4_128_MD5: SSLCipherSuite = 24;
pub const anon471_TLS_DH_anon_WITH_3DES_EDE_CBC_SHA: SSLCipherSuite = 27;
pub const anon471_TLS_DH_anon_WITH_AES_128_CBC_SHA256: SSLCipherSuite = 108;
pub const anon471_TLS_DH_anon_WITH_AES_256_CBC_SHA256: SSLCipherSuite = 109;
pub const anon471_TLS_PSK_WITH_RC4_128_SHA: SSLCipherSuite = 138;
pub const anon471_TLS_PSK_WITH_3DES_EDE_CBC_SHA: SSLCipherSuite = 139;
pub const anon471_TLS_PSK_WITH_AES_128_CBC_SHA: SSLCipherSuite = 140;
pub const anon471_TLS_PSK_WITH_AES_256_CBC_SHA: SSLCipherSuite = 141;
pub const anon471_TLS_DHE_PSK_WITH_RC4_128_SHA: SSLCipherSuite = 142;
pub const anon471_TLS_DHE_PSK_WITH_3DES_EDE_CBC_SHA: SSLCipherSuite = 143;
pub const anon471_TLS_DHE_PSK_WITH_AES_128_CBC_SHA: SSLCipherSuite = 144;
pub const anon471_TLS_DHE_PSK_WITH_AES_256_CBC_SHA: SSLCipherSuite = 145;
pub const anon471_TLS_RSA_PSK_WITH_RC4_128_SHA: SSLCipherSuite = 146;
pub const anon471_TLS_RSA_PSK_WITH_3DES_EDE_CBC_SHA: SSLCipherSuite = 147;
pub const anon471_TLS_RSA_PSK_WITH_AES_128_CBC_SHA: SSLCipherSuite = 148;
pub const anon471_TLS_RSA_PSK_WITH_AES_256_CBC_SHA: SSLCipherSuite = 149;
pub const anon471_TLS_PSK_WITH_NULL_SHA: SSLCipherSuite = 44;
pub const anon471_TLS_DHE_PSK_WITH_NULL_SHA: SSLCipherSuite = 45;
pub const anon471_TLS_RSA_PSK_WITH_NULL_SHA: SSLCipherSuite = 46;
pub const anon471_TLS_RSA_WITH_AES_128_GCM_SHA256: SSLCipherSuite = 156;
pub const anon471_TLS_RSA_WITH_AES_256_GCM_SHA384: SSLCipherSuite = 157;
pub const anon471_TLS_DHE_RSA_WITH_AES_128_GCM_SHA256: SSLCipherSuite = 158;
pub const anon471_TLS_DHE_RSA_WITH_AES_256_GCM_SHA384: SSLCipherSuite = 159;
pub const anon471_TLS_DH_RSA_WITH_AES_128_GCM_SHA256: SSLCipherSuite = 160;
pub const anon471_TLS_DH_RSA_WITH_AES_256_GCM_SHA384: SSLCipherSuite = 161;
pub const anon471_TLS_DHE_DSS_WITH_AES_128_GCM_SHA256: SSLCipherSuite = 162;
pub const anon471_TLS_DHE_DSS_WITH_AES_256_GCM_SHA384: SSLCipherSuite = 163;
pub const anon471_TLS_DH_DSS_WITH_AES_128_GCM_SHA256: SSLCipherSuite = 164;
pub const anon471_TLS_DH_DSS_WITH_AES_256_GCM_SHA384: SSLCipherSuite = 165;
pub const anon471_TLS_DH_anon_WITH_AES_128_GCM_SHA256: SSLCipherSuite = 166;
pub const anon471_TLS_DH_anon_WITH_AES_256_GCM_SHA384: SSLCipherSuite = 167;
pub const anon471_TLS_PSK_WITH_AES_128_GCM_SHA256: SSLCipherSuite = 168;
pub const anon471_TLS_PSK_WITH_AES_256_GCM_SHA384: SSLCipherSuite = 169;
pub const anon471_TLS_DHE_PSK_WITH_AES_128_GCM_SHA256: SSLCipherSuite = 170;
pub const anon471_TLS_DHE_PSK_WITH_AES_256_GCM_SHA384: SSLCipherSuite = 171;
pub const anon471_TLS_RSA_PSK_WITH_AES_128_GCM_SHA256: SSLCipherSuite = 172;
pub const anon471_TLS_RSA_PSK_WITH_AES_256_GCM_SHA384: SSLCipherSuite = 173;
pub const anon471_TLS_PSK_WITH_AES_128_CBC_SHA256: SSLCipherSuite = 174;
pub const anon471_TLS_PSK_WITH_AES_256_CBC_SHA384: SSLCipherSuite = 175;
pub const anon471_TLS_PSK_WITH_NULL_SHA256: SSLCipherSuite = 176;
pub const anon471_TLS_PSK_WITH_NULL_SHA384: SSLCipherSuite = 177;
pub const anon471_TLS_DHE_PSK_WITH_AES_128_CBC_SHA256: SSLCipherSuite = 178;
pub const anon471_TLS_DHE_PSK_WITH_AES_256_CBC_SHA384: SSLCipherSuite = 179;
pub const anon471_TLS_DHE_PSK_WITH_NULL_SHA256: SSLCipherSuite = 180;
pub const anon471_TLS_DHE_PSK_WITH_NULL_SHA384: SSLCipherSuite = 181;
pub const anon471_TLS_RSA_PSK_WITH_AES_128_CBC_SHA256: SSLCipherSuite = 182;
pub const anon471_TLS_RSA_PSK_WITH_AES_256_CBC_SHA384: SSLCipherSuite = 183;
pub const anon471_TLS_RSA_PSK_WITH_NULL_SHA256: SSLCipherSuite = 184;
pub const anon471_TLS_RSA_PSK_WITH_NULL_SHA384: SSLCipherSuite = 185;
pub const anon471_TLS_AES_128_GCM_SHA256: SSLCipherSuite = 4865;
pub const anon471_TLS_AES_256_GCM_SHA384: SSLCipherSuite = 4866;
pub const anon471_TLS_CHACHA20_POLY1305_SHA256: SSLCipherSuite = 4867;
pub const anon471_TLS_AES_128_CCM_SHA256: SSLCipherSuite = 4868;
pub const anon471_TLS_AES_128_CCM_8_SHA256: SSLCipherSuite = 4869;
pub const anon471_TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256: SSLCipherSuite = -16349;
pub const anon471_TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384: SSLCipherSuite = -16348;
pub const anon471_TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256: SSLCipherSuite = -16347;
pub const anon471_TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384: SSLCipherSuite = -16346;
pub const anon471_TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256: SSLCipherSuite = -16345;
pub const anon471_TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384: SSLCipherSuite = -16344;
pub const anon471_TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256: SSLCipherSuite = -16343;
pub const anon471_TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384: SSLCipherSuite = -16342;
pub const anon471_TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256: SSLCipherSuite = -16341;
pub const anon471_TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384: SSLCipherSuite = -16340;
pub const anon471_TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256: SSLCipherSuite = -16339;
pub const anon471_TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384: SSLCipherSuite = -16338;
pub const anon471_TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256: SSLCipherSuite = -16337;
pub const anon471_TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384: SSLCipherSuite = -16336;
pub const anon471_TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256: SSLCipherSuite = -16335;
pub const anon471_TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384: SSLCipherSuite = -16334;
pub const anon471_TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256: SSLCipherSuite = -13144;
pub const anon471_TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256: SSLCipherSuite = -13143;
pub const anon471_TLS_EMPTY_RENEGOTIATION_INFO_SCSV: SSLCipherSuite = 255;
pub const anon471_SSL_RSA_WITH_RC2_CBC_MD5: SSLCipherSuite = -128;
pub const anon471_SSL_RSA_WITH_IDEA_CBC_MD5: SSLCipherSuite = -127;
pub const anon471_SSL_RSA_WITH_DES_CBC_MD5: SSLCipherSuite = -126;
pub const anon471_SSL_RSA_WITH_3DES_EDE_CBC_MD5: SSLCipherSuite = -125;
pub const anon471_SSL_NO_SUCH_CIPHERSUITE: SSLCipherSuite = -1;
pub const anon471_CSSM_CONTEXT_EVENT_CREATE: SSLCipherSuite = 1;
pub const anon471_CSSM_CONTEXT_EVENT_DELETE: SSLCipherSuite = 2;
pub const anon471_CSSM_CONTEXT_EVENT_UPDATE: SSLCipherSuite = 3;

pub const SSLCiphersuiteGroup = i32;
pub const SSLCiphersuiteGroup_Default: i32 = 0;
pub const SSLCiphersuiteGroup_Compatibility: i32 = 1;
pub const SSLCiphersuiteGroup_Legacy: i32 = 2;
pub const SSLCiphersuiteGroup_ATS: i32 = 3;
pub const SSLCiphersuiteGroup_ATSCompatibility: i32 = 4;

/// https://developer.apple.com/documentation/Security/OS_sec_trust?language=objc
pub const OS_sec_trust = opaque {
    pub const Internal = objc.ExternProtocol(@This(), &.{objc.NSObject});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "description", ?*foundation.String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "debugDescription", ?*foundation.String, .{});
    }
};

pub const sec_trust_t = OS_sec_trust;

/// https://developer.apple.com/documentation/Security/OS_sec_identity?language=objc
pub const OS_sec_identity = opaque {
    pub const Internal = objc.ExternProtocol(@This(), &.{objc.NSObject});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "description", ?*foundation.String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "debugDescription", ?*foundation.String, .{});
    }
};

pub const sec_identity_t = OS_sec_identity;

/// https://developer.apple.com/documentation/Security/OS_sec_certificate?language=objc
pub const OS_sec_certificate = opaque {
    pub const Internal = objc.ExternProtocol(@This(), &.{objc.NSObject});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "description", ?*foundation.String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "debugDescription", ?*foundation.String, .{});
    }
};

pub const sec_certificate_t = OS_sec_certificate;

pub const tls_protocol_version_t = objc.uint16_t;
pub const tls_protocol_version_t_TLSv10: objc.uint16_t = 769;
pub const tls_protocol_version_t_TLSv11: objc.uint16_t = 770;
pub const tls_protocol_version_t_TLSv12: objc.uint16_t = 771;
pub const tls_protocol_version_t_TLSv13: objc.uint16_t = 772;
pub const tls_protocol_version_t_DTLSv10: objc.uint16_t = -257;
pub const tls_protocol_version_t_DTLSv12: objc.uint16_t = -259;

pub const tls_ciphersuite_t = objc.uint16_t;
pub const tls_ciphersuite_t_RSA_WITH_3DES_EDE_CBC_SHA: objc.uint16_t = 10;
pub const tls_ciphersuite_t_RSA_WITH_AES_128_CBC_SHA: objc.uint16_t = 47;
pub const tls_ciphersuite_t_RSA_WITH_AES_256_CBC_SHA: objc.uint16_t = 53;
pub const tls_ciphersuite_t_RSA_WITH_AES_128_GCM_SHA256: objc.uint16_t = 156;
pub const tls_ciphersuite_t_RSA_WITH_AES_256_GCM_SHA384: objc.uint16_t = 157;
pub const tls_ciphersuite_t_RSA_WITH_AES_128_CBC_SHA256: objc.uint16_t = 60;
pub const tls_ciphersuite_t_RSA_WITH_AES_256_CBC_SHA256: objc.uint16_t = 61;
pub const tls_ciphersuite_t_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA: objc.uint16_t = -16376;
pub const tls_ciphersuite_t_ECDHE_ECDSA_WITH_AES_128_CBC_SHA: objc.uint16_t = -16375;
pub const tls_ciphersuite_t_ECDHE_ECDSA_WITH_AES_256_CBC_SHA: objc.uint16_t = -16374;
pub const tls_ciphersuite_t_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA: objc.uint16_t = -16366;
pub const tls_ciphersuite_t_ECDHE_RSA_WITH_AES_128_CBC_SHA: objc.uint16_t = -16365;
pub const tls_ciphersuite_t_ECDHE_RSA_WITH_AES_256_CBC_SHA: objc.uint16_t = -16364;
pub const tls_ciphersuite_t_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256: objc.uint16_t = -16349;
pub const tls_ciphersuite_t_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384: objc.uint16_t = -16348;
pub const tls_ciphersuite_t_ECDHE_RSA_WITH_AES_128_CBC_SHA256: objc.uint16_t = -16345;
pub const tls_ciphersuite_t_ECDHE_RSA_WITH_AES_256_CBC_SHA384: objc.uint16_t = -16344;
pub const tls_ciphersuite_t_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256: objc.uint16_t = -16341;
pub const tls_ciphersuite_t_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384: objc.uint16_t = -16340;
pub const tls_ciphersuite_t_ECDHE_RSA_WITH_AES_128_GCM_SHA256: objc.uint16_t = -16337;
pub const tls_ciphersuite_t_ECDHE_RSA_WITH_AES_256_GCM_SHA384: objc.uint16_t = -16336;
pub const tls_ciphersuite_t_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256: objc.uint16_t = -13144;
pub const tls_ciphersuite_t_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256: objc.uint16_t = -13143;
pub const tls_ciphersuite_t_AES_128_GCM_SHA256: objc.uint16_t = 4865;
pub const tls_ciphersuite_t_AES_256_GCM_SHA384: objc.uint16_t = 4866;
pub const tls_ciphersuite_t_CHACHA20_POLY1305_SHA256: objc.uint16_t = 4867;

pub const tls_ciphersuite_group_t = objc.uint16_t;
pub const tls_ciphersuite_group_t_tls_ciphersuite_group_default: objc.uint16_t = 0;
pub const tls_ciphersuite_group_t_tls_ciphersuite_group_compatibility: objc.uint16_t = 1;
pub const tls_ciphersuite_group_t_tls_ciphersuite_group_legacy: objc.uint16_t = 2;
pub const tls_ciphersuite_group_t_tls_ciphersuite_group_ats: objc.uint16_t = 3;
pub const tls_ciphersuite_group_t_tls_ciphersuite_group_ats_compatibility: objc.uint16_t = 4;

pub const SSLProtocol = i32;
pub const SSLProtocol_Unknown: i32 = 0;
pub const SSLProtocol_TLSProtocol1: i32 = 4;
pub const SSLProtocol_TLSProtocol11: i32 = 7;
pub const SSLProtocol_TLSProtocol12: i32 = 8;
pub const SSLProtocol_DTLSProtocol1: i32 = 9;
pub const SSLProtocol_TLSProtocol13: i32 = 10;
pub const SSLProtocol_DTLSProtocol12: i32 = 11;
pub const SSLProtocol_TLSProtocolMaxSupported: i32 = 999;
pub const SSLProtocol_2: i32 = 1;
pub const SSLProtocol_3: i32 = 2;
pub const SSLProtocol_3Only: i32 = 3;
pub const SSLProtocol_TLSProtocol1Only: i32 = 5;
pub const SSLProtocol_All: i32 = 6;

pub extern "Security" fn sec_trust_create(trust: TrustRef) callconv(.C) sec_trust_t;

pub extern "Security" fn sec_trust_copy_ref(trust: sec_trust_t) callconv(.C) TrustRef;

pub extern "Security" fn sec_identity_create(identity: IdentityRef) callconv(.C) sec_identity_t;

pub extern "Security" fn sec_identity_create_with_certificates(identity: IdentityRef, certificates: core_foundation.ArrayRef) callconv(.C) sec_identity_t;

pub extern "Security" fn sec_identity_access_certificates() callconv(.C) i32;

pub extern "Security" fn sec_identity_copy_ref(identity: sec_identity_t) callconv(.C) IdentityRef;

pub extern "Security" fn sec_identity_copy_certificates_ref(identity: sec_identity_t) callconv(.C) core_foundation.ArrayRef;

pub extern "Security" fn sec_certificate_create(certificate: CertificateRef) callconv(.C) sec_certificate_t;

pub extern "Security" fn sec_certificate_copy_ref(certificate: sec_certificate_t) callconv(.C) CertificateRef;

/// https://developer.apple.com/documentation/Security/OS_sec_protocol_metadata?language=objc
pub const OS_sec_protocol_metadata = opaque {
    pub const Internal = objc.ExternProtocol(@This(), &.{objc.NSObject});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "description", ?*foundation.String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "debugDescription", ?*foundation.String, .{});
    }
};

pub const sec_protocol_metadata_t = OS_sec_protocol_metadata;

pub extern "Security" fn sec_protocol_metadata_get_negotiated_protocol(metadata: sec_protocol_metadata_t) callconv(.C) [*:0]const u8;

pub extern "Security" fn sec_protocol_metadata_copy_peer_public_key(metadata: sec_protocol_metadata_t) callconv(.C) objc.dispatch_data_t;

pub extern "Security" fn sec_protocol_metadata_get_negotiated_tls_protocol_version(metadata: sec_protocol_metadata_t) callconv(.C) tls_protocol_version_t;

pub extern "Security" fn sec_protocol_metadata_get_negotiated_protocol_version(metadata: sec_protocol_metadata_t) callconv(.C) SSLProtocol;

pub extern "Security" fn sec_protocol_metadata_get_negotiated_tls_ciphersuite(metadata: sec_protocol_metadata_t) callconv(.C) tls_ciphersuite_t;

pub extern "Security" fn sec_protocol_metadata_get_negotiated_ciphersuite(metadata: sec_protocol_metadata_t) callconv(.C) SSLCipherSuite;

pub extern "Security" fn sec_protocol_metadata_get_early_data_accepted() callconv(.C) i32;

pub extern "Security" fn sec_protocol_metadata_access_peer_certificate_chain() callconv(.C) i32;

pub extern "Security" fn sec_protocol_metadata_access_ocsp_response() callconv(.C) i32;

pub extern "Security" fn sec_protocol_metadata_access_supported_signature_algorithms() callconv(.C) i32;

pub extern "Security" fn sec_protocol_metadata_access_distinguished_names() callconv(.C) i32;

pub extern "Security" fn sec_protocol_metadata_access_pre_shared_keys() callconv(.C) i32;

pub extern "Security" fn sec_protocol_metadata_get_server_name(metadata: sec_protocol_metadata_t) callconv(.C) [*:0]const u8;

pub extern "Security" fn sec_protocol_metadata_peers_are_equal() callconv(.C) i32;

pub extern "Security" fn sec_protocol_metadata_challenge_parameters_are_equal() callconv(.C) i32;

pub extern "Security" fn sec_protocol_metadata_create_secret(
    metadata: sec_protocol_metadata_t,
    label_len: objc.size_t,
    label: [*:0]const u8,
    exporter_length: objc.size_t,
) callconv(.C) objc.dispatch_data_t;

pub extern "Security" fn sec_protocol_metadata_create_secret_with_context(
    metadata: sec_protocol_metadata_t,
    label_len: objc.size_t,
    label: [*:0]const u8,
    context_len: objc.size_t,
    context: ?*const objc.uint8_t,
    exporter_length: objc.size_t,
) callconv(.C) objc.dispatch_data_t;

/// https://developer.apple.com/documentation/Security/OS_sec_protocol_options?language=objc
pub const OS_sec_protocol_options = opaque {
    pub const Internal = objc.ExternProtocol(@This(), &.{objc.NSObject});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "description", ?*foundation.String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "debugDescription", ?*foundation.String, .{});
    }
};

pub const sec_protocol_options_t = OS_sec_protocol_options;

pub extern "Security" fn sec_protocol_options_are_equal() callconv(.C) i32;

pub extern "Security" fn sec_protocol_options_set_local_identity(options: sec_protocol_options_t, identity: sec_identity_t) callconv(.C) void;

pub extern "Security" fn sec_protocol_options_append_tls_ciphersuite(options: sec_protocol_options_t, ciphersuite: tls_ciphersuite_t) callconv(.C) void;

pub extern "Security" fn sec_protocol_options_add_tls_ciphersuite(options: sec_protocol_options_t, ciphersuite: SSLCipherSuite) callconv(.C) void;

pub extern "Security" fn sec_protocol_options_append_tls_ciphersuite_group(options: sec_protocol_options_t, group: tls_ciphersuite_group_t) callconv(.C) void;

pub extern "Security" fn sec_protocol_options_add_tls_ciphersuite_group(options: sec_protocol_options_t, group: SSLCiphersuiteGroup) callconv(.C) void;

pub extern "Security" fn sec_protocol_options_set_tls_min_version(options: sec_protocol_options_t, version: SSLProtocol) callconv(.C) void;

pub extern "Security" fn sec_protocol_options_set_min_tls_protocol_version(options: sec_protocol_options_t, version: tls_protocol_version_t) callconv(.C) void;

pub extern "Security" fn sec_protocol_options_get_default_min_tls_protocol_version() callconv(.C) tls_protocol_version_t;

pub extern "Security" fn sec_protocol_options_get_default_min_dtls_protocol_version() callconv(.C) tls_protocol_version_t;

pub extern "Security" fn sec_protocol_options_set_tls_max_version(options: sec_protocol_options_t, version: SSLProtocol) callconv(.C) void;

pub extern "Security" fn sec_protocol_options_set_max_tls_protocol_version(options: sec_protocol_options_t, version: tls_protocol_version_t) callconv(.C) void;

pub extern "Security" fn sec_protocol_options_get_default_max_tls_protocol_version() callconv(.C) tls_protocol_version_t;

pub extern "Security" fn sec_protocol_options_get_default_max_dtls_protocol_version() callconv(.C) tls_protocol_version_t;

pub extern "Security" fn sec_protocol_options_get_enable_encrypted_client_hello() callconv(.C) i32;

pub extern "Security" fn sec_protocol_options_get_quic_use_legacy_codepoint() callconv(.C) i32;

pub extern "Security" fn sec_protocol_options_add_tls_application_protocol(options: sec_protocol_options_t, application_protocol: [*:0]const u8) callconv(.C) void;

pub extern "Security" fn sec_protocol_options_set_tls_server_name(options: sec_protocol_options_t, server_name: [*:0]const u8) callconv(.C) void;

pub extern "Security" fn sec_protocol_options_set_tls_diffie_hellman_parameters(options: sec_protocol_options_t, params: objc.dispatch_data_t) callconv(.C) void;

pub extern "Security" fn sec_protocol_options_add_pre_shared_key(options: sec_protocol_options_t, psk: objc.dispatch_data_t, psk_identity: objc.dispatch_data_t) callconv(.C) void;

pub extern "Security" fn sec_protocol_options_set_tls_pre_shared_key_identity_hint(options: sec_protocol_options_t, psk_identity_hint: objc.dispatch_data_t) callconv(.C) void;

pub const sec_protocol_pre_shared_key_selection_complete_t = *const fn (objc.dispatch_data_t) callconv(.C) void;

pub const sec_protocol_pre_shared_key_selection_t = *const fn (sec_protocol_metadata_t, objc.dispatch_data_t, sec_protocol_pre_shared_key_selection_complete_t) callconv(.C) void;

pub extern "Security" fn sec_protocol_options_set_pre_shared_key_selection_block(options: sec_protocol_options_t, psk_selection_block: sec_protocol_pre_shared_key_selection_t, psk_selection_queue: objc.dispatch_queue_t) callconv(.C) void;

pub extern "Security" fn sec_protocol_options_set_tls_tickets_enabled(options: sec_protocol_options_t, tickets_enabled: objc.bool) callconv(.C) void;

pub extern "Security" fn sec_protocol_options_set_tls_is_fallback_attempt(options: sec_protocol_options_t, is_fallback_attempt: objc.bool) callconv(.C) void;

pub extern "Security" fn sec_protocol_options_set_tls_resumption_enabled(options: sec_protocol_options_t, resumption_enabled: objc.bool) callconv(.C) void;

pub extern "Security" fn sec_protocol_options_set_tls_false_start_enabled(options: sec_protocol_options_t, false_start_enabled: objc.bool) callconv(.C) void;

pub extern "Security" fn sec_protocol_options_set_tls_ocsp_enabled(options: sec_protocol_options_t, ocsp_enabled: objc.bool) callconv(.C) void;

pub extern "Security" fn sec_protocol_options_set_tls_sct_enabled(options: sec_protocol_options_t, sct_enabled: objc.bool) callconv(.C) void;

pub extern "Security" fn sec_protocol_options_set_tls_renegotiation_enabled(options: sec_protocol_options_t, renegotiation_enabled: objc.bool) callconv(.C) void;

pub extern "Security" fn sec_protocol_options_set_peer_authentication_required(options: sec_protocol_options_t, peer_authentication_required: objc.bool) callconv(.C) void;

pub extern "Security" fn sec_protocol_options_set_peer_authentication_optional(options: sec_protocol_options_t, peer_authentication_optional: objc.bool) callconv(.C) void;

pub extern "Security" fn sec_protocol_options_set_enable_encrypted_client_hello(options: sec_protocol_options_t, enable_encrypted_client_hello: objc.bool) callconv(.C) void;

pub extern "Security" fn sec_protocol_options_set_quic_use_legacy_codepoint(options: sec_protocol_options_t, quic_use_legacy_codepoint: objc.bool) callconv(.C) void;

pub const sec_protocol_key_update_complete_t = *const fn () callconv(.C) void;

pub const sec_protocol_key_update_t = *const fn (sec_protocol_metadata_t, sec_protocol_key_update_complete_t) callconv(.C) void;

pub const sec_protocol_challenge_complete_t = *const fn (sec_identity_t) callconv(.C) void;

pub const sec_protocol_challenge_t = *const fn (sec_protocol_metadata_t, sec_protocol_challenge_complete_t) callconv(.C) void;

pub const sec_protocol_verify_complete_t = *const fn (objc.bool) callconv(.C) void;

pub const sec_protocol_verify_t = *const fn (sec_protocol_metadata_t, sec_trust_t, sec_protocol_verify_complete_t) callconv(.C) void;

pub extern "Security" fn sec_protocol_options_set_key_update_block(options: sec_protocol_options_t, key_update_block: sec_protocol_key_update_t, key_update_queue: objc.dispatch_queue_t) callconv(.C) void;

pub extern "Security" fn sec_protocol_options_set_challenge_block(options: sec_protocol_options_t, challenge_block: sec_protocol_challenge_t, challenge_queue: objc.dispatch_queue_t) callconv(.C) void;

pub extern "Security" fn sec_protocol_options_set_verify_block(options: sec_protocol_options_t, verify_block: sec_protocol_verify_t, verify_block_queue: objc.dispatch_queue_t) callconv(.C) void;

pub const anon871 = objc.OSStatus;
pub const anon871_errAuthorizationSuccess: objc.OSStatus = 0;
pub const anon871_errAuthorizationInvalidSet: objc.OSStatus = -60001;
pub const anon871_errAuthorizationInvalidRef: objc.OSStatus = -60002;
pub const anon871_errAuthorizationInvalidTag: objc.OSStatus = -60003;
pub const anon871_errAuthorizationInvalidPointer: objc.OSStatus = -60004;
pub const anon871_errAuthorizationDenied: objc.OSStatus = -60005;
pub const anon871_errAuthorizationCanceled: objc.OSStatus = -60006;
pub const anon871_errAuthorizationInteractionNotAllowed: objc.OSStatus = -60007;
pub const anon871_errAuthorizationInternal: objc.OSStatus = -60008;
pub const anon871_errAuthorizationExternalizeNotAllowed: objc.OSStatus = -60009;
pub const anon871_errAuthorizationInternalizeNotAllowed: objc.OSStatus = -60010;
pub const anon871_errAuthorizationInvalidFlags: objc.OSStatus = -60011;
pub const anon871_errAuthorizationToolExecuteFailure: objc.OSStatus = -60031;
pub const anon871_errAuthorizationToolEnvironmentError: objc.OSStatus = -60032;
pub const anon871_errAuthorizationBadAddress: objc.OSStatus = -60033;

pub const AuthorizationFlags = objc.UInt32;
pub const AuthorizationFlags_Defaults: objc.UInt32 = 0;
pub const AuthorizationFlags_InteractionAllowed: objc.UInt32 = 1;
pub const AuthorizationFlags_ExtendRights: objc.UInt32 = 2;
pub const AuthorizationFlags_PartialRights: objc.UInt32 = 4;
pub const AuthorizationFlags_DestroyRights: objc.UInt32 = 8;
pub const AuthorizationFlags_PreAuthorize: objc.UInt32 = 16;
pub const AuthorizationFlags_SkipInternalAuth: objc.UInt32 = 512;
pub const AuthorizationFlags_NoData: objc.UInt32 = 1048576;

pub const anon1291 = u32;
pub const anon1291_AuthorizationFlagCanNotPreAuthorize: u32 = 1;

pub const AuthorizationOpaqueRef = extern struct {};

pub const AuthorizationRef = AuthorizationOpaqueRef;

pub const AuthorizationString = [*:0]const u8;

pub const AuthorizationItem = extern struct {
    name: AuthorizationString,
    valueLength: objc.size_t,
    value: ?*anyopaque,
    flags: objc.UInt32,
};

pub const AuthorizationItemSet = extern struct {
    count: objc.UInt32,
    items: AuthorizationItem,
};

pub const AuthorizationExternalForm = extern struct {
    bytes: [32]c_char,
};

pub const AuthorizationRights = AuthorizationItemSet;

pub const AuthorizationEnvironment = AuthorizationItemSet;

pub extern "Security" fn AuthorizationCreate(
    rights: ?*const AuthorizationRights,
    environment: ?*const AuthorizationEnvironment,
    flags: AuthorizationFlags,
    authorization: ?*AuthorizationRef,
) callconv(.C) objc.OSStatus;

pub extern "Security" fn AuthorizationFree(authorization: AuthorizationRef, flags: AuthorizationFlags) callconv(.C) objc.OSStatus;

pub extern "Security" fn AuthorizationCopyRights(
    authorization: AuthorizationRef,
    rights: ?*const AuthorizationRights,
    environment: ?*const AuthorizationEnvironment,
    flags: AuthorizationFlags,
    authorizedRights: ?*?*AuthorizationRights,
) callconv(.C) objc.OSStatus;

pub const AuthorizationAsyncCallback = *const fn (objc.OSStatus, ?*AuthorizationRights) callconv(.C) void;

pub extern "Security" fn AuthorizationCopyRightsAsync(
    authorization: AuthorizationRef,
    rights: ?*const AuthorizationRights,
    environment: ?*const AuthorizationEnvironment,
    flags: AuthorizationFlags,
    callbackBlock: AuthorizationAsyncCallback,
) callconv(.C) void;

pub extern "Security" fn AuthorizationCopyInfo(authorization: AuthorizationRef, tag: AuthorizationString, info: ?*?*AuthorizationItemSet) callconv(.C) objc.OSStatus;

pub extern "Security" fn AuthorizationMakeExternalForm(authorization: AuthorizationRef, extForm: ?*AuthorizationExternalForm) callconv(.C) objc.OSStatus;

pub extern "Security" fn AuthorizationCreateFromExternalForm(extForm: ?*const AuthorizationExternalForm, authorization: ?*AuthorizationRef) callconv(.C) objc.OSStatus;

pub extern "Security" fn AuthorizationFreeItemSet(set: ?*AuthorizationItemSet) callconv(.C) objc.OSStatus;

pub extern "Security" fn AuthorizationExecuteWithPrivileges(
    authorization: AuthorizationRef,
    pathToTool: [*:0]const u8,
    options: AuthorizationFlags,
    arguments: ?*const ?*c_char,
    communicationsPipe: ?*?*objc.FILE,
) callconv(.C) objc.OSStatus;

pub extern "Security" fn AuthorizationCopyPrivilegedReference(authorization: ?*AuthorizationRef, flags: AuthorizationFlags) callconv(.C) objc.OSStatus;

pub const uritySessionId = objc.UInt32;

pub const anon811 = uritySessionId;
pub const anon811_noSecuritySession: uritySessionId = 0;
pub const anon811_callerSecuritySession: uritySessionId = -1;

pub const SessionAttributeBits = objc.UInt32;
pub const SessionAttributeBits_sessionIsRoot: objc.UInt32 = 1;
pub const SessionAttributeBits_sessionHasGraphicAccess: objc.UInt32 = 16;
pub const SessionAttributeBits_sessionHasTTY: objc.UInt32 = 32;
pub const SessionAttributeBits_sessionIsRemote: objc.UInt32 = 4096;

pub const SessionCreationFlags = objc.UInt32;
pub const SessionCreationFlags_sessionKeepCurrentBootstrap: objc.UInt32 = 32768;

pub extern "Security" fn SessionGetInfo(session: uritySessionId, sessionId: ?*uritySessionId, attributes: ?*SessionAttributeBits) callconv(.C) objc.OSStatus;

pub extern "Security" fn SessionCreate(flags: SessionCreationFlags, attributes: SessionAttributeBits) callconv(.C) objc.OSStatus;

pub const CSSM_MANAGER_EVENT_TYPES = uint32;

pub const cssm_manager_event_notification = extern struct {
    DestinationModuleManagerType: CSSM_SERVICE_MASK,
    SourceModuleManagerType: CSSM_SERVICE_MASK,
    Event: CSSM_MANAGER_EVENT_TYPES,
    EventId: uint32,
    EventData: Asn1Item,
};

pub const CSSM_MANAGER_EVENT_NOTIFICATION = cssm_manager_event_notification;

pub const CSSM_MANAGER_EVENT_NOTIFICATION_PTR = ?*cssm_manager_event_notification;

pub extern "Security" fn CSSM_Init(
    Version: ?*const CSSM_VERSION,
    Scope: CSSM_PRIVILEGE_SCOPE,
    CallerGuid: ?*const CSSM_GUID,
    KeyHierarchy: CSSM_KEY_HIERARCHY,
    PvcPolicy: ?*CSSM_PVC_MODE,
    Reserved: ?*const anyopaque,
) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_Terminate() callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_ModuleLoad(
    ModuleGuid: ?*const CSSM_GUID,
    KeyHierarchy: CSSM_KEY_HIERARCHY,
    AppNotifyCallback: CSSM_API_ModuleEventHandler,
    AppNotifyCallbackCtx: ?*anyopaque,
) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_ModuleUnload(ModuleGuid: ?*const CSSM_GUID, AppNotifyCallback: CSSM_API_ModuleEventHandler, AppNotifyCallbackCtx: ?*anyopaque) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_Introduce(ModuleID: ?*const CSSM_GUID, KeyHierarchy: CSSM_KEY_HIERARCHY) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_Unintroduce(ModuleID: ?*const CSSM_GUID) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_ModuleAttach(
    ModuleGuid: ?*const CSSM_GUID,
    Version: ?*const CSSM_VERSION,
    MemoryFuncs: ?*const CSSM_API_MEMORY_FUNCS,
    SubserviceID: uint32,
    SubServiceType: CSSM_SERVICE_TYPE,
    AttachFlags: CSSM_ATTACH_FLAGS,
    KeyHierarchy: CSSM_KEY_HIERARCHY,
    FunctionTable: ?*CSSM_FUNC_NAME_ADDR,
    NumFunctionTable: uint32,
    Reserved: ?*const anyopaque,
    NewModuleHandle: CSSM_MODULE_HANDLE_PTR,
) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_ModuleDetach(ModuleHandle: CSSM_MODULE_HANDLE) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_SetPrivilege(Privilege: CSSM_PRIVILEGE) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_GetPrivilege(Privilege: ?*CSSM_PRIVILEGE) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_GetModuleGUIDFromHandle(ModuleHandle: CSSM_MODULE_HANDLE, ModuleGUID: CSSM_GUID_PTR) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_GetSubserviceUIDFromHandle(ModuleHandle: CSSM_MODULE_HANDLE, SubserviceUID: CSSM_SUBSERVICE_UID_PTR) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_ListAttachedModuleManagers(NumberOfModuleManagers: ?*uint32, ModuleManagerGuids: CSSM_GUID_PTR) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_GetAPIMemoryFunctions(AddInHandle: CSSM_MODULE_HANDLE, AppMemoryFuncs: CSSM_API_MEMORY_FUNCS_PTR) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_CSP_CreateSignatureContext(
    CSPHandle: CSSM_CSP_HANDLE,
    AlgorithmID: CSSM_ALGORITHMS,
    AccessCred: ?*const CSSM_ACCESS_CREDENTIALS,
    Key: ?*const CSSM_KEY,
    NewContextHandle: ?*CSSM_CC_HANDLE,
) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_CSP_CreateSymmetricContext(
    CSPHandle: CSSM_CSP_HANDLE,
    AlgorithmID: CSSM_ALGORITHMS,
    Mode: CSSM_ENCRYPT_MODE,
    AccessCred: ?*const CSSM_ACCESS_CREDENTIALS,
    Key: ?*const CSSM_KEY,
    InitVector: ?*const Asn1Item,
    Padding: CSSM_PADDING,
    Reserved: ?*anyopaque,
    NewContextHandle: ?*CSSM_CC_HANDLE,
) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_CSP_CreateDigestContext(CSPHandle: CSSM_CSP_HANDLE, AlgorithmID: CSSM_ALGORITHMS, NewContextHandle: ?*CSSM_CC_HANDLE) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_CSP_CreateMacContext(
    CSPHandle: CSSM_CSP_HANDLE,
    AlgorithmID: CSSM_ALGORITHMS,
    Key: ?*const CSSM_KEY,
    NewContextHandle: ?*CSSM_CC_HANDLE,
) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_CSP_CreateRandomGenContext(
    CSPHandle: CSSM_CSP_HANDLE,
    AlgorithmID: CSSM_ALGORITHMS,
    Seed: ?*const CSSM_CRYPTO_DATA,
    Length: CSSM_SIZE,
    NewContextHandle: ?*CSSM_CC_HANDLE,
) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_CSP_CreateAsymmetricContext(
    CSPHandle: CSSM_CSP_HANDLE,
    AlgorithmID: CSSM_ALGORITHMS,
    AccessCred: ?*const CSSM_ACCESS_CREDENTIALS,
    Key: ?*const CSSM_KEY,
    Padding: CSSM_PADDING,
    NewContextHandle: ?*CSSM_CC_HANDLE,
) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_CSP_CreateDeriveKeyContext(
    CSPHandle: CSSM_CSP_HANDLE,
    AlgorithmID: CSSM_ALGORITHMS,
    DeriveKeyType: CSSM_KEY_TYPE,
    DeriveKeyLengthInBits: uint32,
    AccessCred: ?*const CSSM_ACCESS_CREDENTIALS,
    BaseKey: ?*const CSSM_KEY,
    IterationCount: uint32,
    Salt: ?*const Asn1Item,
    Seed: ?*const CSSM_CRYPTO_DATA,
    NewContextHandle: ?*CSSM_CC_HANDLE,
) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_CSP_CreateKeyGenContext(
    CSPHandle: CSSM_CSP_HANDLE,
    AlgorithmID: CSSM_ALGORITHMS,
    KeySizeInBits: uint32,
    Seed: ?*const CSSM_CRYPTO_DATA,
    Salt: ?*const Asn1Item,
    StartDate: ?*const CSSM_DATE,
    EndDate: ?*const CSSM_DATE,
    Params: ?*const Asn1Item,
    NewContextHandle: ?*CSSM_CC_HANDLE,
) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_CSP_CreatePassThroughContext(CSPHandle: CSSM_CSP_HANDLE, Key: ?*const CSSM_KEY, NewContextHandle: ?*CSSM_CC_HANDLE) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_GetContext(CCHandle: CSSM_CC_HANDLE, Context: ?*CSSM_CONTEXT_PTR) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_FreeContext(Context: CSSM_CONTEXT_PTR) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_SetContext(CCHandle: CSSM_CC_HANDLE, Context: ?*const CSSM_CONTEXT) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_DeleteContext(CCHandle: CSSM_CC_HANDLE) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_GetContextAttribute(Context: ?*const CSSM_CONTEXT, AttributeType: uint32, ContextAttribute: ?*CSSM_CONTEXT_ATTRIBUTE_PTR) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_UpdateContextAttributes(CCHandle: CSSM_CC_HANDLE, NumberOfAttributes: uint32, ContextAttributes: ?*const CSSM_CONTEXT_ATTRIBUTE) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_DeleteContextAttributes(CCHandle: CSSM_CC_HANDLE, NumberOfAttributes: uint32, ContextAttributes: ?*const CSSM_CONTEXT_ATTRIBUTE) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_CSP_Login(
    CSPHandle: CSSM_CSP_HANDLE,
    AccessCred: ?*const CSSM_ACCESS_CREDENTIALS,
    LoginName: ?*const Asn1Item,
    Reserved: ?*const anyopaque,
) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_CSP_Logout(CSPHandle: CSSM_CSP_HANDLE) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_CSP_GetLoginAcl(
    CSPHandle: CSSM_CSP_HANDLE,
    SelectionTag: ?*const CSSM_STRING,
    NumberOfAclInfos: ?*uint32,
    AclInfos: ?*CSSM_ACL_ENTRY_INFO_PTR,
) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_CSP_ChangeLoginAcl(CSPHandle: CSSM_CSP_HANDLE, AccessCred: ?*const CSSM_ACCESS_CREDENTIALS, AclEdit: ?*const CSSM_ACL_EDIT) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_GetKeyAcl(
    CSPHandle: CSSM_CSP_HANDLE,
    Key: ?*const CSSM_KEY,
    SelectionTag: ?*const CSSM_STRING,
    NumberOfAclInfos: ?*uint32,
    AclInfos: ?*CSSM_ACL_ENTRY_INFO_PTR,
) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_ChangeKeyAcl(
    CSPHandle: CSSM_CSP_HANDLE,
    AccessCred: ?*const CSSM_ACCESS_CREDENTIALS,
    AclEdit: ?*const CSSM_ACL_EDIT,
    Key: ?*const CSSM_KEY,
) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_GetKeyOwner(CSPHandle: CSSM_CSP_HANDLE, Key: ?*const CSSM_KEY, Owner: CSSM_ACL_OWNER_PROTOTYPE_PTR) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_ChangeKeyOwner(
    CSPHandle: CSSM_CSP_HANDLE,
    AccessCred: ?*const CSSM_ACCESS_CREDENTIALS,
    Key: ?*const CSSM_KEY,
    NewOwner: ?*const CSSM_ACL_OWNER_PROTOTYPE,
) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_CSP_GetLoginOwner(CSPHandle: CSSM_CSP_HANDLE, Owner: CSSM_ACL_OWNER_PROTOTYPE_PTR) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_CSP_ChangeLoginOwner(CSPHandle: CSSM_CSP_HANDLE, AccessCred: ?*const CSSM_ACCESS_CREDENTIALS, NewOwner: ?*const CSSM_ACL_OWNER_PROTOTYPE) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_SignData(
    CCHandle: CSSM_CC_HANDLE,
    DataBufs: ?*const Asn1Item,
    DataBufCount: uint32,
    DigestAlgorithm: CSSM_ALGORITHMS,
    Signature: CSSM_DATA_PTR,
) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_SignDataInit(CCHandle: CSSM_CC_HANDLE) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_SignDataUpdate(CCHandle: CSSM_CC_HANDLE, DataBufs: ?*const Asn1Item, DataBufCount: uint32) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_SignDataFinal(CCHandle: CSSM_CC_HANDLE, Signature: CSSM_DATA_PTR) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_VerifyData(
    CCHandle: CSSM_CC_HANDLE,
    DataBufs: ?*const Asn1Item,
    DataBufCount: uint32,
    DigestAlgorithm: CSSM_ALGORITHMS,
    Signature: ?*const Asn1Item,
) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_VerifyDataInit(CCHandle: CSSM_CC_HANDLE) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_VerifyDataUpdate(CCHandle: CSSM_CC_HANDLE, DataBufs: ?*const Asn1Item, DataBufCount: uint32) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_VerifyDataFinal(CCHandle: CSSM_CC_HANDLE, Signature: ?*const Asn1Item) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_DigestData(
    CCHandle: CSSM_CC_HANDLE,
    DataBufs: ?*const Asn1Item,
    DataBufCount: uint32,
    Digest: CSSM_DATA_PTR,
) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_DigestDataInit(CCHandle: CSSM_CC_HANDLE) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_DigestDataUpdate(CCHandle: CSSM_CC_HANDLE, DataBufs: ?*const Asn1Item, DataBufCount: uint32) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_DigestDataClone(CCHandle: CSSM_CC_HANDLE, ClonednewCCHandle: ?*CSSM_CC_HANDLE) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_DigestDataFinal(CCHandle: CSSM_CC_HANDLE, Digest: CSSM_DATA_PTR) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_GenerateMac(
    CCHandle: CSSM_CC_HANDLE,
    DataBufs: ?*const Asn1Item,
    DataBufCount: uint32,
    Mac: CSSM_DATA_PTR,
) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_GenerateMacInit(CCHandle: CSSM_CC_HANDLE) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_GenerateMacUpdate(CCHandle: CSSM_CC_HANDLE, DataBufs: ?*const Asn1Item, DataBufCount: uint32) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_GenerateMacFinal(CCHandle: CSSM_CC_HANDLE, Mac: CSSM_DATA_PTR) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_VerifyMac(
    CCHandle: CSSM_CC_HANDLE,
    DataBufs: ?*const Asn1Item,
    DataBufCount: uint32,
    Mac: ?*const Asn1Item,
) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_VerifyMacInit(CCHandle: CSSM_CC_HANDLE) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_VerifyMacUpdate(CCHandle: CSSM_CC_HANDLE, DataBufs: ?*const Asn1Item, DataBufCount: uint32) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_VerifyMacFinal(CCHandle: CSSM_CC_HANDLE, Mac: ?*const Asn1Item) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_QuerySize(
    CCHandle: CSSM_CC_HANDLE,
    Encrypt: CSSM_BOOL,
    QuerySizeCount: uint32,
    DataBlockSizes: CSSM_QUERY_SIZE_DATA_PTR,
) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_EncryptData(
    CCHandle: CSSM_CC_HANDLE,
    ClearBufs: ?*const Asn1Item,
    ClearBufCount: uint32,
    CipherBufs: CSSM_DATA_PTR,
    CipherBufCount: uint32,
    bytesEncrypted: ?*CSSM_SIZE,
    RemData: CSSM_DATA_PTR,
) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_EncryptDataP(
    CCHandle: CSSM_CC_HANDLE,
    ClearBufs: ?*const Asn1Item,
    ClearBufCount: uint32,
    CipherBufs: CSSM_DATA_PTR,
    CipherBufCount: uint32,
    bytesEncrypted: ?*CSSM_SIZE,
    RemData: CSSM_DATA_PTR,
    Privilege: CSSM_PRIVILEGE,
) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_EncryptDataInit(CCHandle: CSSM_CC_HANDLE) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_EncryptDataInitP(CCHandle: CSSM_CC_HANDLE, Privilege: CSSM_PRIVILEGE) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_EncryptDataUpdate(
    CCHandle: CSSM_CC_HANDLE,
    ClearBufs: ?*const Asn1Item,
    ClearBufCount: uint32,
    CipherBufs: CSSM_DATA_PTR,
    CipherBufCount: uint32,
    bytesEncrypted: ?*CSSM_SIZE,
) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_EncryptDataFinal(CCHandle: CSSM_CC_HANDLE, RemData: CSSM_DATA_PTR) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_DecryptData(
    CCHandle: CSSM_CC_HANDLE,
    CipherBufs: ?*const Asn1Item,
    CipherBufCount: uint32,
    ClearBufs: CSSM_DATA_PTR,
    ClearBufCount: uint32,
    bytesDecrypted: ?*CSSM_SIZE,
    RemData: CSSM_DATA_PTR,
) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_DecryptDataP(
    CCHandle: CSSM_CC_HANDLE,
    CipherBufs: ?*const Asn1Item,
    CipherBufCount: uint32,
    ClearBufs: CSSM_DATA_PTR,
    ClearBufCount: uint32,
    bytesDecrypted: ?*CSSM_SIZE,
    RemData: CSSM_DATA_PTR,
    Privilege: CSSM_PRIVILEGE,
) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_DecryptDataInit(CCHandle: CSSM_CC_HANDLE) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_DecryptDataInitP(CCHandle: CSSM_CC_HANDLE, Privilege: CSSM_PRIVILEGE) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_DecryptDataUpdate(
    CCHandle: CSSM_CC_HANDLE,
    CipherBufs: ?*const Asn1Item,
    CipherBufCount: uint32,
    ClearBufs: CSSM_DATA_PTR,
    ClearBufCount: uint32,
    bytesDecrypted: ?*CSSM_SIZE,
) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_DecryptDataFinal(CCHandle: CSSM_CC_HANDLE, RemData: CSSM_DATA_PTR) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_QueryKeySizeInBits(
    CSPHandle: CSSM_CSP_HANDLE,
    CCHandle: CSSM_CC_HANDLE,
    Key: ?*const CSSM_KEY,
    KeySize: CSSM_KEY_SIZE_PTR,
) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_GenerateKey(
    CCHandle: CSSM_CC_HANDLE,
    KeyUsage: uint32,
    KeyAttr: uint32,
    KeyLabel: ?*const Asn1Item,
    CredAndAclEntry: ?*const CSSM_RESOURCE_CONTROL_CONTEXT,
    Key: CSSM_KEY_PTR,
) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_GenerateKeyP(
    CCHandle: CSSM_CC_HANDLE,
    KeyUsage: uint32,
    KeyAttr: uint32,
    KeyLabel: ?*const Asn1Item,
    CredAndAclEntry: ?*const CSSM_RESOURCE_CONTROL_CONTEXT,
    Key: CSSM_KEY_PTR,
    Privilege: CSSM_PRIVILEGE,
) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_GenerateKeyPair(
    CCHandle: CSSM_CC_HANDLE,
    PublicKeyUsage: uint32,
    PublicKeyAttr: uint32,
    PublicKeyLabel: ?*const Asn1Item,
    PublicKey: CSSM_KEY_PTR,
    PrivateKeyUsage: uint32,
    PrivateKeyAttr: uint32,
    PrivateKeyLabel: ?*const Asn1Item,
    CredAndAclEntry: ?*const CSSM_RESOURCE_CONTROL_CONTEXT,
    PrivateKey: CSSM_KEY_PTR,
) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_GenerateKeyPairP(
    CCHandle: CSSM_CC_HANDLE,
    PublicKeyUsage: uint32,
    PublicKeyAttr: uint32,
    PublicKeyLabel: ?*const Asn1Item,
    PublicKey: CSSM_KEY_PTR,
    PrivateKeyUsage: uint32,
    PrivateKeyAttr: uint32,
    PrivateKeyLabel: ?*const Asn1Item,
    CredAndAclEntry: ?*const CSSM_RESOURCE_CONTROL_CONTEXT,
    PrivateKey: CSSM_KEY_PTR,
    Privilege: CSSM_PRIVILEGE,
) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_GenerateRandom(CCHandle: CSSM_CC_HANDLE, RandomNumber: CSSM_DATA_PTR) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_CSP_ObtainPrivateKeyFromPublicKey(CSPHandle: CSSM_CSP_HANDLE, PublicKey: ?*const CSSM_KEY, PrivateKey: CSSM_KEY_PTR) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_WrapKey(
    CCHandle: CSSM_CC_HANDLE,
    AccessCred: ?*const CSSM_ACCESS_CREDENTIALS,
    Key: ?*const CSSM_KEY,
    DescriptiveData: ?*const Asn1Item,
    WrappedKey: CSSM_WRAP_KEY_PTR,
) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_UnwrapKey(
    CCHandle: CSSM_CC_HANDLE,
    PublicKey: ?*const CSSM_KEY,
    WrappedKey: ?*const CSSM_WRAP_KEY,
    KeyUsage: uint32,
    KeyAttr: uint32,
    KeyLabel: ?*const Asn1Item,
    CredAndAclEntry: ?*const CSSM_RESOURCE_CONTROL_CONTEXT,
    UnwrappedKey: CSSM_KEY_PTR,
    DescriptiveData: CSSM_DATA_PTR,
) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_WrapKeyP(
    CCHandle: CSSM_CC_HANDLE,
    AccessCred: ?*const CSSM_ACCESS_CREDENTIALS,
    Key: ?*const CSSM_KEY,
    DescriptiveData: ?*const Asn1Item,
    WrappedKey: CSSM_WRAP_KEY_PTR,
    Privilege: CSSM_PRIVILEGE,
) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_UnwrapKeyP(
    CCHandle: CSSM_CC_HANDLE,
    PublicKey: ?*const CSSM_KEY,
    WrappedKey: ?*const CSSM_WRAP_KEY,
    KeyUsage: uint32,
    KeyAttr: uint32,
    KeyLabel: ?*const Asn1Item,
    CredAndAclEntry: ?*const CSSM_RESOURCE_CONTROL_CONTEXT,
    UnwrappedKey: CSSM_KEY_PTR,
    DescriptiveData: CSSM_DATA_PTR,
    Privilege: CSSM_PRIVILEGE,
) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_DeriveKey(
    CCHandle: CSSM_CC_HANDLE,
    Param: CSSM_DATA_PTR,
    KeyUsage: uint32,
    KeyAttr: uint32,
    KeyLabel: ?*const Asn1Item,
    CredAndAclEntry: ?*const CSSM_RESOURCE_CONTROL_CONTEXT,
    DerivedKey: CSSM_KEY_PTR,
) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_FreeKey(
    CSPHandle: CSSM_CSP_HANDLE,
    AccessCred: ?*const CSSM_ACCESS_CREDENTIALS,
    KeyPtr: CSSM_KEY_PTR,
    Delete: CSSM_BOOL,
) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_GenerateAlgorithmParams(CCHandle: CSSM_CC_HANDLE, ParamBits: uint32, Param: CSSM_DATA_PTR) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_CSP_GetOperationalStatistics(CSPHandle: CSSM_CSP_HANDLE, Statistics: ?*CSSM_CSP_OPERATIONAL_STATISTICS) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_GetTimeValue(CSPHandle: CSSM_CSP_HANDLE, TimeAlgorithm: CSSM_ALGORITHMS, TimeData: ?*Asn1Item) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_RetrieveUniqueId(CSPHandle: CSSM_CSP_HANDLE, UniqueID: CSSM_DATA_PTR) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_RetrieveCounter(CSPHandle: CSSM_CSP_HANDLE, Counter: CSSM_DATA_PTR) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_VerifyDevice(CSPHandle: CSSM_CSP_HANDLE, DeviceCert: ?*const Asn1Item) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_CSP_PassThrough(
    CCHandle: CSSM_CC_HANDLE,
    PassThroughId: uint32,
    InData: ?*const anyopaque,
    OutData: ?*?*anyopaque,
) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_TP_SubmitCredRequest(
    TPHandle: CSSM_TP_HANDLE,
    PreferredAuthority: ?*const CSSM_TP_AUTHORITY_ID,
    RequestType: CSSM_TP_AUTHORITY_REQUEST_TYPE,
    RequestInput: ?*const CSSM_TP_REQUEST_SET,
    CallerAuthContext: ?*const CSSM_TP_CALLERAUTH_CONTEXT,
    EstimatedTime: ?*sint32,
    ReferenceIdentifier: CSSM_DATA_PTR,
) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_TP_RetrieveCredResult(
    TPHandle: CSSM_TP_HANDLE,
    ReferenceIdentifier: ?*const Asn1Item,
    CallerAuthCredentials: ?*const CSSM_TP_CALLERAUTH_CONTEXT,
    EstimatedTime: ?*sint32,
    ConfirmationRequired: ?*CSSM_BOOL,
    RetrieveOutput: ?*CSSM_TP_RESULT_SET_PTR,
) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_TP_ConfirmCredResult(
    TPHandle: CSSM_TP_HANDLE,
    ReferenceIdentifier: ?*const Asn1Item,
    CallerAuthCredentials: ?*const CSSM_TP_CALLERAUTH_CONTEXT,
    Responses: ?*const CSSM_TP_CONFIRM_RESPONSE,
    PreferredAuthority: ?*const CSSM_TP_AUTHORITY_ID,
) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_TP_ReceiveConfirmation(
    TPHandle: CSSM_TP_HANDLE,
    ReferenceIdentifier: ?*const Asn1Item,
    Responses: ?*CSSM_TP_CONFIRM_RESPONSE_PTR,
    ElapsedTime: ?*sint32,
) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_TP_CertReclaimKey(
    TPHandle: CSSM_TP_HANDLE,
    CertGroup: ?*const CSSM_CERTGROUP,
    CertIndex: uint32,
    KeyCacheHandle: CSSM_LONG_HANDLE,
    CSPHandle: CSSM_CSP_HANDLE,
    CredAndAclEntry: ?*const CSSM_RESOURCE_CONTROL_CONTEXT,
) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_TP_CertReclaimAbort(TPHandle: CSSM_TP_HANDLE, KeyCacheHandle: CSSM_LONG_HANDLE) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_TP_FormRequest(
    TPHandle: CSSM_TP_HANDLE,
    PreferredAuthority: ?*const CSSM_TP_AUTHORITY_ID,
    FormType: CSSM_TP_FORM_TYPE,
    BlankForm: CSSM_DATA_PTR,
) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_TP_FormSubmit(
    TPHandle: CSSM_TP_HANDLE,
    FormType: CSSM_TP_FORM_TYPE,
    Form: ?*const Asn1Item,
    ClearanceAuthority: ?*const CSSM_TP_AUTHORITY_ID,
    RepresentedAuthority: ?*const CSSM_TP_AUTHORITY_ID,
    Credentials: CSSM_ACCESS_CREDENTIALS_PTR,
) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_TP_CertGroupVerify(
    TPHandle: CSSM_TP_HANDLE,
    CLHandle: CSSM_CL_HANDLE,
    CSPHandle: CSSM_CSP_HANDLE,
    CertGroupToBeVerified: ?*const CSSM_CERTGROUP,
    VerifyContext: ?*const CSSM_TP_VERIFY_CONTEXT,
    VerifyContextResult: CSSM_TP_VERIFY_CONTEXT_RESULT_PTR,
) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_TP_CertCreateTemplate(
    TPHandle: CSSM_TP_HANDLE,
    CLHandle: CSSM_CL_HANDLE,
    NumberOfFields: uint32,
    CertFields: ?*const CSSM_FIELD,
    CertTemplate: CSSM_DATA_PTR,
) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_TP_CertGetAllTemplateFields(
    TPHandle: CSSM_TP_HANDLE,
    CLHandle: CSSM_CL_HANDLE,
    CertTemplate: ?*const Asn1Item,
    NumberOfFields: ?*uint32,
    CertFields: ?*CSSM_FIELD_PTR,
) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_TP_CertSign(
    TPHandle: CSSM_TP_HANDLE,
    CLHandle: CSSM_CL_HANDLE,
    CCHandle: CSSM_CC_HANDLE,
    CertTemplateToBeSigned: ?*const Asn1Item,
    SignerCertGroup: ?*const CSSM_CERTGROUP,
    SignerVerifyContext: ?*const CSSM_TP_VERIFY_CONTEXT,
    SignerVerifyResult: CSSM_TP_VERIFY_CONTEXT_RESULT_PTR,
    SignedCert: CSSM_DATA_PTR,
) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_TP_CrlVerify(
    TPHandle: CSSM_TP_HANDLE,
    CLHandle: CSSM_CL_HANDLE,
    CSPHandle: CSSM_CSP_HANDLE,
    CrlToBeVerified: ?*const CSSM_ENCODED_CRL,
    SignerCertGroup: ?*const CSSM_CERTGROUP,
    VerifyContext: ?*const CSSM_TP_VERIFY_CONTEXT,
    RevokerVerifyResult: CSSM_TP_VERIFY_CONTEXT_RESULT_PTR,
) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_TP_CrlCreateTemplate(
    TPHandle: CSSM_TP_HANDLE,
    CLHandle: CSSM_CL_HANDLE,
    NumberOfFields: uint32,
    CrlFields: ?*const CSSM_FIELD,
    NewCrlTemplate: CSSM_DATA_PTR,
) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_TP_CertRevoke(
    TPHandle: CSSM_TP_HANDLE,
    CLHandle: CSSM_CL_HANDLE,
    CSPHandle: CSSM_CSP_HANDLE,
    OldCrlTemplate: ?*const Asn1Item,
    CertGroupToBeRevoked: ?*const CSSM_CERTGROUP,
    RevokerCertGroup: ?*const CSSM_CERTGROUP,
    RevokerVerifyContext: ?*const CSSM_TP_VERIFY_CONTEXT,
    RevokerVerifyResult: CSSM_TP_VERIFY_CONTEXT_RESULT_PTR,
    Reason: CSSM_TP_CERTCHANGE_REASON,
    NewCrlTemplate: CSSM_DATA_PTR,
) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_TP_CertRemoveFromCrlTemplate(
    TPHandle: CSSM_TP_HANDLE,
    CLHandle: CSSM_CL_HANDLE,
    CSPHandle: CSSM_CSP_HANDLE,
    OldCrlTemplate: ?*const Asn1Item,
    CertGroupToBeRemoved: ?*const CSSM_CERTGROUP,
    RevokerCertGroup: ?*const CSSM_CERTGROUP,
    RevokerVerifyContext: ?*const CSSM_TP_VERIFY_CONTEXT,
    RevokerVerifyResult: CSSM_TP_VERIFY_CONTEXT_RESULT_PTR,
    NewCrlTemplate: CSSM_DATA_PTR,
) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_TP_CrlSign(
    TPHandle: CSSM_TP_HANDLE,
    CLHandle: CSSM_CL_HANDLE,
    CCHandle: CSSM_CC_HANDLE,
    CrlToBeSigned: ?*const CSSM_ENCODED_CRL,
    SignerCertGroup: ?*const CSSM_CERTGROUP,
    SignerVerifyContext: ?*const CSSM_TP_VERIFY_CONTEXT,
    SignerVerifyResult: CSSM_TP_VERIFY_CONTEXT_RESULT_PTR,
    SignedCrl: CSSM_DATA_PTR,
) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_TP_ApplyCrlToDb(
    TPHandle: CSSM_TP_HANDLE,
    CLHandle: CSSM_CL_HANDLE,
    CSPHandle: CSSM_CSP_HANDLE,
    CrlToBeApplied: ?*const CSSM_ENCODED_CRL,
    SignerCertGroup: ?*const CSSM_CERTGROUP,
    ApplyCrlVerifyContext: ?*const CSSM_TP_VERIFY_CONTEXT,
    ApplyCrlVerifyResult: CSSM_TP_VERIFY_CONTEXT_RESULT_PTR,
) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_TP_CertGroupConstruct(
    TPHandle: CSSM_TP_HANDLE,
    CLHandle: CSSM_CL_HANDLE,
    CSPHandle: CSSM_CSP_HANDLE,
    DBList: ?*const CSSM_DL_DB_LIST,
    ConstructParams: ?*const anyopaque,
    CertGroupFrag: ?*const CSSM_CERTGROUP,
    CertGroup: ?*CSSM_CERTGROUP_PTR,
) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_TP_CertGroupPrune(
    TPHandle: CSSM_TP_HANDLE,
    CLHandle: CSSM_CL_HANDLE,
    DBList: ?*const CSSM_DL_DB_LIST,
    OrderedCertGroup: ?*const CSSM_CERTGROUP,
    PrunedCertGroup: ?*CSSM_CERTGROUP_PTR,
) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_TP_CertGroupToTupleGroup(
    TPHandle: CSSM_TP_HANDLE,
    CLHandle: CSSM_CL_HANDLE,
    CertGroup: ?*const CSSM_CERTGROUP,
    TupleGroup: ?*CSSM_TUPLEGROUP_PTR,
) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_TP_TupleGroupToCertGroup(
    TPHandle: CSSM_TP_HANDLE,
    CLHandle: CSSM_CL_HANDLE,
    TupleGroup: ?*const CSSM_TUPLEGROUP,
    CertTemplates: ?*CSSM_CERTGROUP_PTR,
) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_TP_PassThrough(
    TPHandle: CSSM_TP_HANDLE,
    CLHandle: CSSM_CL_HANDLE,
    CCHandle: CSSM_CC_HANDLE,
    DBList: ?*const CSSM_DL_DB_LIST,
    PassThroughId: uint32,
    InputParams: ?*const anyopaque,
    OutputParams: ?*?*anyopaque,
) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_AC_AuthCompute(
    ACHandle: CSSM_AC_HANDLE,
    BaseAuthorizations: ?*const CSSM_TUPLEGROUP,
    Credentials: ?*const CSSM_TUPLEGROUP,
    NumberOfRequestors: uint32,
    Requestors: ?*const CSSM_LIST,
    RequestedAuthorizationPeriod: ?*const CSSM_LIST,
    RequestedAuthorization: ?*const CSSM_LIST,
    AuthorizationResult: CSSM_TUPLEGROUP_PTR,
) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_AC_PassThrough(
    ACHandle: CSSM_AC_HANDLE,
    TPHandle: CSSM_TP_HANDLE,
    CLHandle: CSSM_CL_HANDLE,
    CCHandle: CSSM_CC_HANDLE,
    DBList: ?*const CSSM_DL_DB_LIST,
    PassThroughId: uint32,
    InputParams: ?*const anyopaque,
    OutputParams: ?*?*anyopaque,
) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_CL_CertCreateTemplate(
    CLHandle: CSSM_CL_HANDLE,
    NumberOfFields: uint32,
    CertFields: ?*const CSSM_FIELD,
    CertTemplate: CSSM_DATA_PTR,
) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_CL_CertGetAllTemplateFields(
    CLHandle: CSSM_CL_HANDLE,
    CertTemplate: ?*const Asn1Item,
    NumberOfFields: ?*uint32,
    CertFields: ?*CSSM_FIELD_PTR,
) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_CL_CertSign(
    CLHandle: CSSM_CL_HANDLE,
    CCHandle: CSSM_CC_HANDLE,
    CertTemplate: ?*const Asn1Item,
    SignScope: ?*const CSSM_FIELD,
    ScopeSize: uint32,
    SignedCert: CSSM_DATA_PTR,
) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_CL_CertVerify(
    CLHandle: CSSM_CL_HANDLE,
    CCHandle: CSSM_CC_HANDLE,
    CertToBeVerified: ?*const Asn1Item,
    SignerCert: ?*const Asn1Item,
    VerifyScope: ?*const CSSM_FIELD,
    ScopeSize: uint32,
) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_CL_CertVerifyWithKey(CLHandle: CSSM_CL_HANDLE, CCHandle: CSSM_CC_HANDLE, CertToBeVerified: ?*const Asn1Item) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_CL_CertGetFirstFieldValue(
    CLHandle: CSSM_CL_HANDLE,
    Cert: ?*const Asn1Item,
    CertField: ?*const Asn1Oid,
    ResultsHandle: CSSM_HANDLE_PTR,
    NumberOfMatchedFields: ?*uint32,
    Value: ?*CSSM_DATA_PTR,
) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_CL_CertGetNextFieldValue(CLHandle: CSSM_CL_HANDLE, ResultsHandle: CSSM_HANDLE, Value: ?*CSSM_DATA_PTR) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_CL_CertAbortQuery(CLHandle: CSSM_CL_HANDLE, ResultsHandle: CSSM_HANDLE) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_CL_CertGetKeyInfo(CLHandle: CSSM_CL_HANDLE, Cert: ?*const Asn1Item, Key: ?*CSSM_KEY_PTR) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_CL_CertGetAllFields(
    CLHandle: CSSM_CL_HANDLE,
    Cert: ?*const Asn1Item,
    NumberOfFields: ?*uint32,
    CertFields: ?*CSSM_FIELD_PTR,
) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_CL_FreeFields(CLHandle: CSSM_CL_HANDLE, NumberOfFields: uint32, Fields: ?*CSSM_FIELD_PTR) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_CL_FreeFieldValue(CLHandle: CSSM_CL_HANDLE, CertOrCrlOid: ?*const Asn1Oid, Value: CSSM_DATA_PTR) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_CL_CertCache(CLHandle: CSSM_CL_HANDLE, Cert: ?*const Asn1Item, CertHandle: CSSM_HANDLE_PTR) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_CL_CertGetFirstCachedFieldValue(
    CLHandle: CSSM_CL_HANDLE,
    CertHandle: CSSM_HANDLE,
    CertField: ?*const Asn1Oid,
    ResultsHandle: CSSM_HANDLE_PTR,
    NumberOfMatchedFields: ?*uint32,
    Value: ?*CSSM_DATA_PTR,
) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_CL_CertGetNextCachedFieldValue(CLHandle: CSSM_CL_HANDLE, ResultsHandle: CSSM_HANDLE, Value: ?*CSSM_DATA_PTR) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_CL_CertAbortCache(CLHandle: CSSM_CL_HANDLE, CertHandle: CSSM_HANDLE) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_CL_CertGroupToSignedBundle(
    CLHandle: CSSM_CL_HANDLE,
    CCHandle: CSSM_CC_HANDLE,
    CertGroupToBundle: ?*const CSSM_CERTGROUP,
    BundleInfo: ?*const CSSM_CERT_BUNDLE_HEADER,
    SignedBundle: CSSM_DATA_PTR,
) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_CL_CertGroupFromVerifiedBundle(
    CLHandle: CSSM_CL_HANDLE,
    CCHandle: CSSM_CC_HANDLE,
    CertBundle: ?*const CSSM_CERT_BUNDLE,
    SignerCert: ?*const Asn1Item,
    CertGroup: ?*CSSM_CERTGROUP_PTR,
) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_CL_CertDescribeFormat(CLHandle: CSSM_CL_HANDLE, NumberOfFields: ?*uint32, OidList: ?*CSSM_OID_PTR) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_CL_CrlCreateTemplate(
    CLHandle: CSSM_CL_HANDLE,
    NumberOfFields: uint32,
    CrlTemplate: ?*const CSSM_FIELD,
    NewCrl: CSSM_DATA_PTR,
) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_CL_CrlSetFields(
    CLHandle: CSSM_CL_HANDLE,
    NumberOfFields: uint32,
    CrlTemplate: ?*const CSSM_FIELD,
    OldCrl: ?*const Asn1Item,
    ModifiedCrl: CSSM_DATA_PTR,
) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_CL_CrlAddCert(
    CLHandle: CSSM_CL_HANDLE,
    CCHandle: CSSM_CC_HANDLE,
    Cert: ?*const Asn1Item,
    NumberOfFields: uint32,
    CrlEntryFields: ?*const CSSM_FIELD,
    OldCrl: ?*const Asn1Item,
    NewCrl: CSSM_DATA_PTR,
) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_CL_CrlRemoveCert(
    CLHandle: CSSM_CL_HANDLE,
    Cert: ?*const Asn1Item,
    OldCrl: ?*const Asn1Item,
    NewCrl: CSSM_DATA_PTR,
) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_CL_CrlSign(
    CLHandle: CSSM_CL_HANDLE,
    CCHandle: CSSM_CC_HANDLE,
    UnsignedCrl: ?*const Asn1Item,
    SignScope: ?*const CSSM_FIELD,
    ScopeSize: uint32,
    SignedCrl: CSSM_DATA_PTR,
) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_CL_CrlVerify(
    CLHandle: CSSM_CL_HANDLE,
    CCHandle: CSSM_CC_HANDLE,
    CrlToBeVerified: ?*const Asn1Item,
    SignerCert: ?*const Asn1Item,
    VerifyScope: ?*const CSSM_FIELD,
    ScopeSize: uint32,
) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_CL_CrlVerifyWithKey(CLHandle: CSSM_CL_HANDLE, CCHandle: CSSM_CC_HANDLE, CrlToBeVerified: ?*const Asn1Item) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_CL_IsCertInCrl(
    CLHandle: CSSM_CL_HANDLE,
    Cert: ?*const Asn1Item,
    Crl: ?*const Asn1Item,
    CertFound: ?*CSSM_BOOL,
) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_CL_CrlGetFirstFieldValue(
    CLHandle: CSSM_CL_HANDLE,
    Crl: ?*const Asn1Item,
    CrlField: ?*const Asn1Oid,
    ResultsHandle: CSSM_HANDLE_PTR,
    NumberOfMatchedFields: ?*uint32,
    Value: ?*CSSM_DATA_PTR,
) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_CL_CrlGetNextFieldValue(CLHandle: CSSM_CL_HANDLE, ResultsHandle: CSSM_HANDLE, Value: ?*CSSM_DATA_PTR) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_CL_CrlAbortQuery(CLHandle: CSSM_CL_HANDLE, ResultsHandle: CSSM_HANDLE) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_CL_CrlGetAllFields(
    CLHandle: CSSM_CL_HANDLE,
    Crl: ?*const Asn1Item,
    NumberOfCrlFields: ?*uint32,
    CrlFields: ?*CSSM_FIELD_PTR,
) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_CL_CrlCache(CLHandle: CSSM_CL_HANDLE, Crl: ?*const Asn1Item, CrlHandle: CSSM_HANDLE_PTR) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_CL_IsCertInCachedCrl(
    CLHandle: CSSM_CL_HANDLE,
    Cert: ?*const Asn1Item,
    CrlHandle: CSSM_HANDLE,
    CertFound: ?*CSSM_BOOL,
    CrlRecordIndex: CSSM_DATA_PTR,
) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_CL_CrlGetFirstCachedFieldValue(
    CLHandle: CSSM_CL_HANDLE,
    CrlHandle: CSSM_HANDLE,
    CrlRecordIndex: ?*const Asn1Item,
    CrlField: ?*const Asn1Oid,
    ResultsHandle: CSSM_HANDLE_PTR,
    NumberOfMatchedFields: ?*uint32,
    Value: ?*CSSM_DATA_PTR,
) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_CL_CrlGetNextCachedFieldValue(CLHandle: CSSM_CL_HANDLE, ResultsHandle: CSSM_HANDLE, Value: ?*CSSM_DATA_PTR) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_CL_CrlGetAllCachedRecordFields(
    CLHandle: CSSM_CL_HANDLE,
    CrlHandle: CSSM_HANDLE,
    CrlRecordIndex: ?*const Asn1Item,
    NumberOfFields: ?*uint32,
    CrlFields: ?*CSSM_FIELD_PTR,
) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_CL_CrlAbortCache(CLHandle: CSSM_CL_HANDLE, CrlHandle: CSSM_HANDLE) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_CL_CrlDescribeFormat(CLHandle: CSSM_CL_HANDLE, NumberOfFields: ?*uint32, OidList: ?*CSSM_OID_PTR) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_CL_PassThrough(
    CLHandle: CSSM_CL_HANDLE,
    CCHandle: CSSM_CC_HANDLE,
    PassThroughId: uint32,
    InputParams: ?*const anyopaque,
    OutputParams: ?*?*anyopaque,
) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_DL_DbOpen(
    DLHandle: CSSM_DL_HANDLE,
    DbName: [*:0]const u8,
    DbLocation: ?*const CSSM_NET_ADDRESS,
    AccessRequest: CSSM_DB_ACCESS_TYPE,
    AccessCred: ?*const CSSM_ACCESS_CREDENTIALS,
    OpenParameters: ?*const anyopaque,
    DbHandle: ?*CSSM_DB_HANDLE,
) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_DL_DbClose(DLDBHandle: CSSM_DL_DB_HANDLE) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_DL_DbCreate(
    DLHandle: CSSM_DL_HANDLE,
    DbName: [*:0]const u8,
    DbLocation: ?*const CSSM_NET_ADDRESS,
    DBInfo: ?*const CSSM_DBINFO,
    AccessRequest: CSSM_DB_ACCESS_TYPE,
    CredAndAclEntry: ?*const CSSM_RESOURCE_CONTROL_CONTEXT,
    OpenParameters: ?*const anyopaque,
    DbHandle: ?*CSSM_DB_HANDLE,
) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_DL_DbDelete(
    DLHandle: CSSM_DL_HANDLE,
    DbName: [*:0]const u8,
    DbLocation: ?*const CSSM_NET_ADDRESS,
    AccessCred: ?*const CSSM_ACCESS_CREDENTIALS,
) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_DL_CreateRelation(
    DLDBHandle: CSSM_DL_DB_HANDLE,
    RelationID: CSSM_DB_RECORDTYPE,
    RelationName: [*:0]const u8,
    NumberOfAttributes: uint32,
    pAttributeInfo: ?*const CSSM_DB_SCHEMA_ATTRIBUTE_INFO,
    NumberOfIndexes: uint32,
    pIndexInfo: ?*const CSSM_DB_SCHEMA_INDEX_INFO,
) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_DL_DestroyRelation(DLDBHandle: CSSM_DL_DB_HANDLE, RelationID: CSSM_DB_RECORDTYPE) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_DL_Authenticate(DLDBHandle: CSSM_DL_DB_HANDLE, AccessRequest: CSSM_DB_ACCESS_TYPE, AccessCred: ?*const CSSM_ACCESS_CREDENTIALS) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_DL_GetDbAcl(
    DLDBHandle: CSSM_DL_DB_HANDLE,
    SelectionTag: ?*const CSSM_STRING,
    NumberOfAclInfos: ?*uint32,
    AclInfos: ?*CSSM_ACL_ENTRY_INFO_PTR,
) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_DL_ChangeDbAcl(DLDBHandle: CSSM_DL_DB_HANDLE, AccessCred: ?*const CSSM_ACCESS_CREDENTIALS, AclEdit: ?*const CSSM_ACL_EDIT) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_DL_GetDbOwner(DLDBHandle: CSSM_DL_DB_HANDLE, Owner: CSSM_ACL_OWNER_PROTOTYPE_PTR) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_DL_ChangeDbOwner(DLDBHandle: CSSM_DL_DB_HANDLE, AccessCred: ?*const CSSM_ACCESS_CREDENTIALS, NewOwner: ?*const CSSM_ACL_OWNER_PROTOTYPE) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_DL_GetDbNames(DLHandle: CSSM_DL_HANDLE, NameList: ?*CSSM_NAME_LIST_PTR) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_DL_GetDbNameFromHandle(DLDBHandle: CSSM_DL_DB_HANDLE, DbName: ?*?*c_char) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_DL_FreeNameList(DLHandle: CSSM_DL_HANDLE, NameList: CSSM_NAME_LIST_PTR) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_DL_DataInsert(
    DLDBHandle: CSSM_DL_DB_HANDLE,
    RecordType: CSSM_DB_RECORDTYPE,
    Attributes: ?*const CSSM_DB_RECORD_ATTRIBUTE_DATA,
    Data: ?*const Asn1Item,
    UniqueId: ?*CSSM_DB_UNIQUE_RECORD_PTR,
) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_DL_DataDelete(DLDBHandle: CSSM_DL_DB_HANDLE, UniqueRecordIdentifier: ?*const CSSM_DB_UNIQUE_RECORD) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_DL_DataModify(
    DLDBHandle: CSSM_DL_DB_HANDLE,
    RecordType: CSSM_DB_RECORDTYPE,
    UniqueRecordIdentifier: CSSM_DB_UNIQUE_RECORD_PTR,
    AttributesToBeModified: ?*const CSSM_DB_RECORD_ATTRIBUTE_DATA,
    DataToBeModified: ?*const Asn1Item,
    ModifyMode: CSSM_DB_MODIFY_MODE,
) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_DL_DataGetFirst(
    DLDBHandle: CSSM_DL_DB_HANDLE,
    Query: ?*const CSSM_QUERY,
    ResultsHandle: CSSM_HANDLE_PTR,
    Attributes: CSSM_DB_RECORD_ATTRIBUTE_DATA_PTR,
    Data: CSSM_DATA_PTR,
    UniqueId: ?*CSSM_DB_UNIQUE_RECORD_PTR,
) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_DL_DataGetNext(
    DLDBHandle: CSSM_DL_DB_HANDLE,
    ResultsHandle: CSSM_HANDLE,
    Attributes: CSSM_DB_RECORD_ATTRIBUTE_DATA_PTR,
    Data: CSSM_DATA_PTR,
    UniqueId: ?*CSSM_DB_UNIQUE_RECORD_PTR,
) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_DL_DataAbortQuery(DLDBHandle: CSSM_DL_DB_HANDLE, ResultsHandle: CSSM_HANDLE) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_DL_DataGetFromUniqueRecordId(
    DLDBHandle: CSSM_DL_DB_HANDLE,
    UniqueRecord: ?*const CSSM_DB_UNIQUE_RECORD,
    Attributes: CSSM_DB_RECORD_ATTRIBUTE_DATA_PTR,
    Data: CSSM_DATA_PTR,
) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_DL_FreeUniqueRecord(DLDBHandle: CSSM_DL_DB_HANDLE, UniqueRecord: CSSM_DB_UNIQUE_RECORD_PTR) callconv(.C) CSSM_RETURN;

pub extern "Security" fn CSSM_DL_PassThrough(
    DLDBHandle: CSSM_DL_DB_HANDLE,
    PassThroughId: uint32,
    InputParams: ?*const anyopaque,
    OutputParams: ?*?*anyopaque,
) callconv(.C) CSSM_RETURN;

pub const cssm_spi_ac_funcs = extern struct {
    AuthCompute: CSSM_RETURN,
    PassThrough: CSSM_RETURN,
};

pub const CSSM_SPI_AC_FUNCS = cssm_spi_ac_funcs;

pub const CSSM_SPI_AC_FUNCS_PTR = ?*cssm_spi_ac_funcs;

pub const cssm_spi_cl_funcs = extern struct {
    CertCreateTemplate: CSSM_RETURN,
    CertGetAllTemplateFields: CSSM_RETURN,
    CertSign: CSSM_RETURN,
    CertVerify: CSSM_RETURN,
    CertVerifyWithKey: CSSM_RETURN,
    CertGetFirstFieldValue: CSSM_RETURN,
    CertGetNextFieldValue: CSSM_RETURN,
    CertAbortQuery: CSSM_RETURN,
    CertGetKeyInfo: CSSM_RETURN,
    CertGetAllFields: CSSM_RETURN,
    FreeFields: CSSM_RETURN,
    FreeFieldValue: CSSM_RETURN,
    CertCache: CSSM_RETURN,
    CertGetFirstCachedFieldValue: CSSM_RETURN,
    CertGetNextCachedFieldValue: CSSM_RETURN,
    CertAbortCache: CSSM_RETURN,
    CertGroupToSignedBundle: CSSM_RETURN,
    CertGroupFromVerifiedBundle: CSSM_RETURN,
    CertDescribeFormat: CSSM_RETURN,
    CrlCreateTemplate: CSSM_RETURN,
    CrlSetFields: CSSM_RETURN,
    CrlAddCert: CSSM_RETURN,
    CrlRemoveCert: CSSM_RETURN,
    CrlSign: CSSM_RETURN,
    CrlVerify: CSSM_RETURN,
    CrlVerifyWithKey: CSSM_RETURN,
    IsCertInCrl: CSSM_RETURN,
    CrlGetFirstFieldValue: CSSM_RETURN,
    CrlGetNextFieldValue: CSSM_RETURN,
    CrlAbortQuery: CSSM_RETURN,
    CrlGetAllFields: CSSM_RETURN,
    CrlCache: CSSM_RETURN,
    IsCertInCachedCrl: CSSM_RETURN,
    CrlGetFirstCachedFieldValue: CSSM_RETURN,
    CrlGetNextCachedFieldValue: CSSM_RETURN,
    CrlGetAllCachedRecordFields: CSSM_RETURN,
    CrlAbortCache: CSSM_RETURN,
    CrlDescribeFormat: CSSM_RETURN,
    PassThrough: CSSM_RETURN,
};

pub const CSSM_SPI_CL_FUNCS = cssm_spi_cl_funcs;

pub const CSSM_SPI_CL_FUNCS_PTR = ?*cssm_spi_cl_funcs;

pub const CSSM_SPI_ModuleEventHandler = CSSM_RETURN;

pub const CSSM_CONTEXT_EVENT = uint32;

pub const cssm_module_funcs = extern struct {
    ServiceType: CSSM_SERVICE_TYPE,
    NumberOfServiceFuncs: uint32,
    ServiceFuncs: CSSM_PROC_ADDR,
};

pub const CSSM_MODULE_FUNCS = cssm_module_funcs;

pub const CSSM_MODULE_FUNCS_PTR = ?*cssm_module_funcs;

pub const CSSM_UPCALLS_MALLOC = ?*const fn (CSSM_HANDLE, objc.size_t) callconv(.C) ?*anyopaque;

pub const CSSM_UPCALLS_FREE = ?*const fn (CSSM_HANDLE, ?*anyopaque) callconv(.C) void;

pub const CSSM_UPCALLS_REALLOC = ?*const fn (CSSM_HANDLE, ?*anyopaque, objc.size_t) callconv(.C) ?*anyopaque;

pub const CSSM_UPCALLS_CALLOC = ?*const fn (CSSM_HANDLE, objc.size_t, objc.size_t) callconv(.C) ?*anyopaque;

pub const cssm_upcalls = extern struct {
    malloc_func: CSSM_UPCALLS_MALLOC,
    free_func: CSSM_UPCALLS_FREE,
    realloc_func: CSSM_UPCALLS_REALLOC,
    calloc_func: CSSM_UPCALLS_CALLOC,
    CcToHandle_func: CSSM_RETURN,
    GetModuleInfo_func: CSSM_RETURN,
};

pub const CSSM_UPCALLS = cssm_upcalls;

pub const CSSM_UPCALLS_PTR = ?*cssm_upcalls;

pub const cssm_spi_csp_funcs = extern struct {
    EventNotify: CSSM_RETURN,
    QuerySize: CSSM_RETURN,
    SignData: CSSM_RETURN,
    SignDataInit: CSSM_RETURN,
    SignDataUpdate: CSSM_RETURN,
    SignDataFinal: CSSM_RETURN,
    VerifyData: CSSM_RETURN,
    VerifyDataInit: CSSM_RETURN,
    VerifyDataUpdate: CSSM_RETURN,
    VerifyDataFinal: CSSM_RETURN,
    DigestData: CSSM_RETURN,
    DigestDataInit: CSSM_RETURN,
    DigestDataUpdate: CSSM_RETURN,
    DigestDataClone: CSSM_RETURN,
    DigestDataFinal: CSSM_RETURN,
    GenerateMac: CSSM_RETURN,
    GenerateMacInit: CSSM_RETURN,
    GenerateMacUpdate: CSSM_RETURN,
    GenerateMacFinal: CSSM_RETURN,
    VerifyMac: CSSM_RETURN,
    VerifyMacInit: CSSM_RETURN,
    VerifyMacUpdate: CSSM_RETURN,
    VerifyMacFinal: CSSM_RETURN,
    EncryptData: CSSM_RETURN,
    EncryptDataInit: CSSM_RETURN,
    EncryptDataUpdate: CSSM_RETURN,
    EncryptDataFinal: CSSM_RETURN,
    DecryptData: CSSM_RETURN,
    DecryptDataInit: CSSM_RETURN,
    DecryptDataUpdate: CSSM_RETURN,
    DecryptDataFinal: CSSM_RETURN,
    QueryKeySizeInBits: CSSM_RETURN,
    GenerateKey: CSSM_RETURN,
    GenerateKeyPair: CSSM_RETURN,
    GenerateRandom: CSSM_RETURN,
    GenerateAlgorithmParams: CSSM_RETURN,
    WrapKey: CSSM_RETURN,
    UnwrapKey: CSSM_RETURN,
    DeriveKey: CSSM_RETURN,
    FreeKey: CSSM_RETURN,
    PassThrough: CSSM_RETURN,
    Login: CSSM_RETURN,
    Logout: CSSM_RETURN,
    ChangeLoginAcl: CSSM_RETURN,
    ObtainPrivateKeyFromPublicKey: CSSM_RETURN,
    RetrieveUniqueId: CSSM_RETURN,
    RetrieveCounter: CSSM_RETURN,
    VerifyDevice: CSSM_RETURN,
    GetTimeValue: CSSM_RETURN,
    GetOperationalStatistics: CSSM_RETURN,
    GetLoginAcl: CSSM_RETURN,
    GetKeyAcl: CSSM_RETURN,
    ChangeKeyAcl: CSSM_RETURN,
    GetKeyOwner: CSSM_RETURN,
    ChangeKeyOwner: CSSM_RETURN,
    GetLoginOwner: CSSM_RETURN,
    ChangeLoginOwner: CSSM_RETURN,
};

pub const CSSM_SPI_CSP_FUNCS = cssm_spi_csp_funcs;

pub const CSSM_SPI_CSP_FUNCS_PTR = ?*cssm_spi_csp_funcs;

pub const cssm_spi_dl_funcs = extern struct {
    DbOpen: CSSM_RETURN,
    DbClose: CSSM_RETURN,
    DbCreate: CSSM_RETURN,
    DbDelete: CSSM_RETURN,
    CreateRelation: CSSM_RETURN,
    DestroyRelation: CSSM_RETURN,
    Authenticate: CSSM_RETURN,
    GetDbAcl: CSSM_RETURN,
    ChangeDbAcl: CSSM_RETURN,
    GetDbOwner: CSSM_RETURN,
    ChangeDbOwner: CSSM_RETURN,
    GetDbNames: CSSM_RETURN,
    GetDbNameFromHandle: CSSM_RETURN,
    FreeNameList: CSSM_RETURN,
    DataInsert: CSSM_RETURN,
    DataDelete: CSSM_RETURN,
    DataModify: CSSM_RETURN,
    DataGetFirst: CSSM_RETURN,
    DataGetNext: CSSM_RETURN,
    DataAbortQuery: CSSM_RETURN,
    DataGetFromUniqueRecordId: CSSM_RETURN,
    FreeUniqueRecord: CSSM_RETURN,
    PassThrough: CSSM_RETURN,
};

pub const CSSM_SPI_DL_FUNCS = cssm_spi_dl_funcs;

pub const CSSM_SPI_DL_FUNCS_PTR = ?*cssm_spi_dl_funcs;

pub const CSSM_KRSP_HANDLE = uint32;

pub const cssm_kr_name = extern struct {
    Type: uint8,
    Length: uint8,
    Name: ?*c_char,
};

pub const CSSM_KR_NAME = cssm_kr_name;

pub const CSSM_KR_PROFILE = cssm_context_attribute._value.cssm_kr_profile;

pub const CSSM_KR_PROFILE_PTR = ?*cssm_context_attribute._value.cssm_kr_profile;

pub const cssm_kr_wrappedproductinfo = extern struct {
    StandardVersion: CSSM_VERSION,
    StandardDescription: CSSM_STRING,
    ProductVersion: CSSM_VERSION,
    ProductDescription: CSSM_STRING,
    ProductVendor: CSSM_STRING,
    ProductFlags: uint32,
};

pub const CSSM_KR_WRAPPEDPRODUCT_INFO = cssm_kr_wrappedproductinfo;

pub const CSSM_KR_WRAPPEDPRODUCT_INFO_PTR = ?*cssm_kr_wrappedproductinfo;

pub const cssm_krsubservice = extern struct {
    SubServiceId: uint32,
    Description: ?*c_char,
    WrappedProduct: CSSM_KR_WRAPPEDPRODUCT_INFO,
};

pub const CSSM_KRSUBSERVICE = cssm_krsubservice;

pub const CSSM_KRSUBSERVICE_PTR = ?*cssm_krsubservice;

pub const CSSM_KR_POLICY_TYPE = uint32;

pub const CSSM_KR_POLICY_FLAGS = uint32;

pub const cssm_kr_policy_list_item = extern struct {
    pub const kr_policy_list_item = extern struct {};

    next: cssm_kr_policy_list_item.kr_policy_list_item,
    AlgorithmId: CSSM_ALGORITHMS,
    Mode: CSSM_ENCRYPT_MODE,
    MaxKeyLength: uint32,
    MaxRounds: uint32,
    WorkFactor: uint8,
    PolicyFlags: CSSM_KR_POLICY_FLAGS,
    AlgClass: CSSM_CONTEXT_TYPE,
};

pub const CSSM_KR_POLICY_LIST_ITEM = cssm_kr_policy_list_item;

pub const CSSM_KR_POLICY_LIST_ITEM_PTR = ?*cssm_kr_policy_list_item;

pub const cssm_kr_policy_info = extern struct {
    krbNotAllowed: CSSM_BOOL,
    numberOfEntries: uint32,
    policyEntry: CSSM_KR_POLICY_LIST_ITEM,
};

pub const CSSM_KR_POLICY_INFO = cssm_kr_policy_info;

pub const CSSM_KR_POLICY_INFO_PTR = ?*cssm_kr_policy_info;

pub const cssm_spi_kr_funcs = extern struct {
    RegistrationRequest: CSSM_RETURN,
    RegistrationRetrieve: CSSM_RETURN,
    GenerateRecoveryFields: CSSM_RETURN,
    ProcessRecoveryFields: CSSM_RETURN,
    RecoveryRequest: CSSM_RETURN,
    RecoveryRetrieve: CSSM_RETURN,
    GetRecoveredObject: CSSM_RETURN,
    RecoveryRequestAbort: CSSM_RETURN,
    PassThrough: CSSM_RETURN,
};

pub const CSSM_SPI_KR_FUNCS = cssm_spi_kr_funcs;

pub const CSSM_SPI_KR_FUNCS_PTR = ?*cssm_spi_kr_funcs;

pub const cssm_spi_tp_funcs = extern struct {
    SubmitCredRequest: CSSM_RETURN,
    RetrieveCredResult: CSSM_RETURN,
    ConfirmCredResult: CSSM_RETURN,
    ReceiveConfirmation: CSSM_RETURN,
    CertReclaimKey: CSSM_RETURN,
    CertReclaimAbort: CSSM_RETURN,
    FormRequest: CSSM_RETURN,
    FormSubmit: CSSM_RETURN,
    CertGroupVerify: CSSM_RETURN,
    CertCreateTemplate: CSSM_RETURN,
    CertGetAllTemplateFields: CSSM_RETURN,
    CertSign: CSSM_RETURN,
    CrlVerify: CSSM_RETURN,
    CrlCreateTemplate: CSSM_RETURN,
    CertRevoke: CSSM_RETURN,
    CertRemoveFromCrlTemplate: CSSM_RETURN,
    CrlSign: CSSM_RETURN,
    ApplyCrlToDb: CSSM_RETURN,
    CertGroupConstruct: CSSM_RETURN,
    CertGroupPrune: CSSM_RETURN,
    CertGroupToTupleGroup: CSSM_RETURN,
    TupleGroupToCertGroup: CSSM_RETURN,
    PassThrough: CSSM_RETURN,
};

pub const CSSM_SPI_TP_FUNCS = cssm_spi_tp_funcs;

pub const CSSM_SPI_TP_FUNCS_PTR = ?*cssm_spi_tp_funcs;

pub const cssm_state_funcs = extern struct {
    cssm_GetAttachFunctions: CSSM_RETURN,
    cssm_ReleaseAttachFunctions: CSSM_RETURN,
    cssm_GetAppMemoryFunctions: CSSM_RETURN,
    cssm_IsFuncCallValid: CSSM_RETURN,
    cssm_DeregisterManagerServices: CSSM_RETURN,
    cssm_DeliverModuleManagerEvent: CSSM_RETURN,
};

pub const CSSM_STATE_FUNCS = cssm_state_funcs;

pub const CSSM_STATE_FUNCS_PTR = ?*cssm_state_funcs;

pub const cssm_manager_registration_info = extern struct {
    Initialize: CSSM_RETURN,
    Terminate: CSSM_RETURN,
    RegisterDispatchTable: CSSM_RETURN,
    DeregisterDispatchTable: CSSM_RETURN,
    EventNotifyManager: CSSM_RETURN,
    RefreshFunctionTable: CSSM_RETURN,
};

pub const CSSM_MANAGER_REGISTRATION_INFO = cssm_manager_registration_info;

pub const CSSM_MANAGER_REGISTRATION_INFO_PTR = ?*cssm_manager_registration_info;

pub const MDS_HANDLE = CSSM_DL_HANDLE;

pub const MDS_DB_HANDLE = CSSM_DL_DB_HANDLE;

pub const mds_funcs = extern struct {
    DbOpen: CSSM_RETURN,
    DbClose: CSSM_RETURN,
    GetDbNames: CSSM_RETURN,
    GetDbNameFromHandle: CSSM_RETURN,
    FreeNameList: CSSM_RETURN,
    DataInsert: CSSM_RETURN,
    DataDelete: CSSM_RETURN,
    DataModify: CSSM_RETURN,
    DataGetFirst: CSSM_RETURN,
    DataGetNext: CSSM_RETURN,
    DataAbortQuery: CSSM_RETURN,
    DataGetFromUniqueRecordId: CSSM_RETURN,
    FreeUniqueRecord: CSSM_RETURN,
    CreateRelation: CSSM_RETURN,
    DestroyRelation: CSSM_RETURN,
};

pub const MDS_FUNCS = mds_funcs;

pub const MDS_FUNCS_PTR = ?*mds_funcs;

pub extern "Security" fn MDS_Initialize(
    pCallerGuid: ?*const CSSM_GUID,
    pMemoryFunctions: ?*const CSSM_MEMORY_FUNCS,
    pDlFunctions: MDS_FUNCS_PTR,
    hMds: ?*MDS_HANDLE,
) callconv(.C) CSSM_RETURN;

pub extern "Security" fn MDS_Terminate(MdsHandle: MDS_HANDLE) callconv(.C) CSSM_RETURN;

pub extern "Security" fn MDS_Install(MdsHandle: MDS_HANDLE) callconv(.C) CSSM_RETURN;

pub extern "Security" fn MDS_Uninstall(MdsHandle: MDS_HANDLE) callconv(.C) CSSM_RETURN;

pub const KeychainPromptSelector = uint16;
pub const KeychainPromptSelector_RequirePassphase: uint16 = 1;
pub const KeychainPromptSelector_Unsigned: uint16 = 16;
pub const KeychainPromptSelector_UnsignedAct: uint16 = 32;
pub const KeychainPromptSelector_Invalid: uint16 = 64;
pub const KeychainPromptSelector_InvalidAct: uint16 = 128;

extern "Security" fn SecACLGetTypeID() callconv(.C) core_foundation.TypeID;
pub const aclGetTypeID = SecACLGetTypeID;

extern "Security" fn SecACLCreateFromSimpleContents(
    access: AccessRef,
    applicationList: core_foundation.ArrayRef,
    description: core_foundation.StringRef,
    promptSelector: ?*const CSSM_ACL_KEYCHAIN_PROMPT_SELECTOR,
    newAcl: ?*ACLRef,
) callconv(.C) objc.OSStatus;
pub const aclCreateFromSimpleContents = SecACLCreateFromSimpleContents;

extern "Security" fn SecACLCreateWithSimpleContents(
    access: AccessRef,
    applicationList: core_foundation.ArrayRef,
    description: core_foundation.StringRef,
    promptSelector: KeychainPromptSelector,
    newAcl: ?*ACLRef,
) callconv(.C) objc.OSStatus;
pub const aclCreateWithSimpleContents = SecACLCreateWithSimpleContents;

extern "Security" fn SecACLRemove(aclRef: ACLRef) callconv(.C) objc.OSStatus;
pub const aclRemove = SecACLRemove;

extern "Security" fn SecACLCopySimpleContents(
    acl: ACLRef,
    applicationList: ?*core_foundation.ArrayRef,
    description: ?*core_foundation.StringRef,
    promptSelector: ?*CSSM_ACL_KEYCHAIN_PROMPT_SELECTOR,
) callconv(.C) objc.OSStatus;
pub const aclCopySimpleContents = SecACLCopySimpleContents;

extern "Security" fn SecACLCopyContents(
    acl: ACLRef,
    applicationList: ?*core_foundation.ArrayRef,
    description: ?*core_foundation.StringRef,
    promptSelector: ?*KeychainPromptSelector,
) callconv(.C) objc.OSStatus;
pub const aclCopyContents = SecACLCopyContents;

extern "Security" fn SecACLSetSimpleContents(
    acl: ACLRef,
    applicationList: core_foundation.ArrayRef,
    description: core_foundation.StringRef,
    promptSelector: ?*const CSSM_ACL_KEYCHAIN_PROMPT_SELECTOR,
) callconv(.C) objc.OSStatus;
pub const aclSetSimpleContents = SecACLSetSimpleContents;

extern "Security" fn SecACLSetContents(
    acl: ACLRef,
    applicationList: core_foundation.ArrayRef,
    description: core_foundation.StringRef,
    promptSelector: KeychainPromptSelector,
) callconv(.C) objc.OSStatus;
pub const aclSetContents = SecACLSetContents;

extern "Security" fn SecACLGetAuthorizations(acl: ACLRef, tags: ?*CSSM_ACL_AUTHORIZATION_TAG, tagCount: ?*uint32) callconv(.C) objc.OSStatus;
pub const aclGetAuthorizations = SecACLGetAuthorizations;

extern "Security" fn SecACLCopyAuthorizations(acl: ACLRef) callconv(.C) core_foundation.ArrayRef;
pub const aclCopyAuthorizations = SecACLCopyAuthorizations;

extern "Security" fn SecACLSetAuthorizations(acl: ACLRef, tags: ?*CSSM_ACL_AUTHORIZATION_TAG, tagCount: uint32) callconv(.C) objc.OSStatus;
pub const aclSetAuthorizations = SecACLSetAuthorizations;

extern "Security" fn SecACLUpdateAuthorizations(acl: ACLRef, authorizations: core_foundation.ArrayRef) callconv(.C) objc.OSStatus;
pub const aclUpdateAuthorizations = SecACLUpdateAuthorizations;

pub const OpaqueSecIdentitySearchRef = extern struct {};

pub const IdentitySearchRef = OpaqueSecIdentitySearchRef;

extern "Security" fn SecIdentitySearchGetTypeID() callconv(.C) core_foundation.TypeID;
pub const identitySearchGetTypeID = SecIdentitySearchGetTypeID;

extern "Security" fn SecIdentitySearchCreate(keychainOrArray: core_foundation.TypeRef, keyUsage: CSSM_KEYUSE, searchRef: ?*IdentitySearchRef) callconv(.C) objc.OSStatus;
pub const identitySearchCreate = SecIdentitySearchCreate;

extern "Security" fn SecIdentitySearchCopyNext(searchRef: IdentitySearchRef, identity: ?*IdentityRef) callconv(.C) objc.OSStatus;
pub const identitySearchCopyNext = SecIdentitySearchCopyNext;

pub const ItemClass = objc.FourCharCode;
pub const ItemClass_InternetPasswordItemClass: objc.FourCharCode = 1768842612;
pub const ItemClass_GenericPasswordItemClass: objc.FourCharCode = 1734700656;
pub const ItemClass_AppleSharePasswordItemClass: objc.FourCharCode = 1634953328;
pub const ItemClass_CertificateItemClass: objc.FourCharCode = -2147479552;
pub const ItemClass_PublicKeyItemClass: objc.FourCharCode = 15;
pub const ItemClass_PrivateKeyItemClass: objc.FourCharCode = 16;
pub const ItemClass_SymmetricKeyItemClass: objc.FourCharCode = 17;

pub const ItemAttr = objc.FourCharCode;
pub const ItemAttr_CreationDateItemAttr: objc.FourCharCode = 1667522932;
pub const ItemAttr_ModDateItemAttr: objc.FourCharCode = 1835295092;
pub const ItemAttr_DescriptionItemAttr: objc.FourCharCode = 1684370275;
pub const ItemAttr_CommentItemAttr: objc.FourCharCode = 1768123764;
pub const ItemAttr_CreatorItemAttr: objc.FourCharCode = 1668445298;
pub const ItemAttr_TypeItemAttr: objc.FourCharCode = 1954115685;
pub const ItemAttr_ScriptCodeItemAttr: objc.FourCharCode = 1935897200;
pub const ItemAttr_LabelItemAttr: objc.FourCharCode = 1818321516;
pub const ItemAttr_InvisibleItemAttr: objc.FourCharCode = 1768846953;
pub const ItemAttr_NegativeItemAttr: objc.FourCharCode = 1852139361;
pub const ItemAttr_CustomIconItemAttr: objc.FourCharCode = 1668641641;
pub const ItemAttr_AccountItemAttr: objc.FourCharCode = 1633903476;
pub const ItemAttr_ServiceItemAttr: objc.FourCharCode = 1937138533;
pub const ItemAttr_GenericItemAttr: objc.FourCharCode = 1734700641;
pub const ItemAttr_SecurityDomainItemAttr: objc.FourCharCode = 1935961454;
pub const ItemAttr_ServerItemAttr: objc.FourCharCode = 1936881266;
pub const ItemAttr_AuthenticationTypeItemAttr: objc.FourCharCode = 1635023216;
pub const ItemAttr_PortItemAttr: objc.FourCharCode = 1886351988;
pub const ItemAttr_PathItemAttr: objc.FourCharCode = 1885434984;
pub const ItemAttr_VolumeItemAttr: objc.FourCharCode = 1986817381;
pub const ItemAttr_AddressItemAttr: objc.FourCharCode = 1633969266;
pub const ItemAttr_SignatureItemAttr: objc.FourCharCode = 1936943463;
pub const ItemAttr_ProtocolItemAttr: objc.FourCharCode = 1886675820;
pub const ItemAttr_CertificateType: objc.FourCharCode = 1668577648;
pub const ItemAttr_CertificateEncoding: objc.FourCharCode = 1667591779;
pub const ItemAttr_CrlType: objc.FourCharCode = 1668445296;
pub const ItemAttr_CrlEncoding: objc.FourCharCode = 1668443747;
pub const ItemAttr_Alias: objc.FourCharCode = 1634494835;

pub const AFPServerSignature = objc.UInt8;

pub const PublicKeyHash = objc.UInt8;

extern "Security" fn SecKeychainItemGetTypeID() callconv(.C) core_foundation.TypeID;
pub const keychainItemGetTypeID = SecKeychainItemGetTypeID;

extern "Security" fn SecKeychainItemModifyAttributesAndData(
    itemRef: KeychainItemRef,
    attrList: ?*const KeychainAttributeList,
    length: objc.UInt32,
    data: ?*const anyopaque,
) callconv(.C) objc.OSStatus;
pub const keychainItemModifyAttributesAndData = SecKeychainItemModifyAttributesAndData;

extern "Security" fn SecKeychainItemCreateFromContent(
    itemClass: ItemClass,
    attrList: ?*KeychainAttributeList,
    length: objc.UInt32,
    data: ?*const anyopaque,
    keychainRef: KeychainRef,
    initialAccess: AccessRef,
    itemRef: ?*KeychainItemRef,
) callconv(.C) objc.OSStatus;
pub const keychainItemCreateFromContent = SecKeychainItemCreateFromContent;

extern "Security" fn SecKeychainItemModifyContent(
    itemRef: KeychainItemRef,
    attrList: ?*const KeychainAttributeList,
    length: objc.UInt32,
    data: ?*const anyopaque,
) callconv(.C) objc.OSStatus;
pub const keychainItemModifyContent = SecKeychainItemModifyContent;

extern "Security" fn SecKeychainItemCopyContent(
    itemRef: KeychainItemRef,
    itemClass: ?*ItemClass,
    attrList: ?*KeychainAttributeList,
    length: ?*objc.UInt32,
    outData: ?*?*anyopaque,
) callconv(.C) objc.OSStatus;
pub const keychainItemCopyContent = SecKeychainItemCopyContent;

extern "Security" fn SecKeychainItemFreeContent(attrList: ?*KeychainAttributeList, data: ?*anyopaque) callconv(.C) objc.OSStatus;
pub const keychainItemFreeContent = SecKeychainItemFreeContent;

extern "Security" fn SecKeychainItemCopyAttributesAndData(
    itemRef: KeychainItemRef,
    info: ?*KeychainAttributeInfo,
    itemClass: ?*ItemClass,
    attrList: ?*?*KeychainAttributeList,
    length: ?*objc.UInt32,
    outData: ?*?*anyopaque,
) callconv(.C) objc.OSStatus;
pub const keychainItemCopyAttributesAndData = SecKeychainItemCopyAttributesAndData;

extern "Security" fn SecKeychainItemFreeAttributesAndData(attrList: ?*KeychainAttributeList, data: ?*anyopaque) callconv(.C) objc.OSStatus;
pub const keychainItemFreeAttributesAndData = SecKeychainItemFreeAttributesAndData;

extern "Security" fn SecKeychainItemDelete(itemRef: KeychainItemRef) callconv(.C) objc.OSStatus;
pub const keychainItemDelete = SecKeychainItemDelete;

extern "Security" fn SecKeychainItemCopyKeychain(itemRef: KeychainItemRef, keychainRef: ?*KeychainRef) callconv(.C) objc.OSStatus;
pub const keychainItemCopyKeychain = SecKeychainItemCopyKeychain;

extern "Security" fn SecKeychainItemCreateCopy(
    itemRef: KeychainItemRef,
    destKeychainRef: KeychainRef,
    initialAccess: AccessRef,
    itemCopy: ?*KeychainItemRef,
) callconv(.C) objc.OSStatus;
pub const keychainItemCreateCopy = SecKeychainItemCreateCopy;

extern "Security" fn SecKeychainItemCreatePersistentReference(itemRef: KeychainItemRef, persistentItemRef: ?*core_foundation.DataRef) callconv(.C) objc.OSStatus;
pub const keychainItemCreatePersistentReference = SecKeychainItemCreatePersistentReference;

extern "Security" fn SecKeychainItemCopyFromPersistentReference(persistentItemRef: core_foundation.DataRef, itemRef: ?*KeychainItemRef) callconv(.C) objc.OSStatus;
pub const keychainItemCopyFromPersistentReference = SecKeychainItemCopyFromPersistentReference;

extern "Security" fn SecKeychainItemGetDLDBHandle(keyItemRef: KeychainItemRef, dldbHandle: ?*CSSM_DL_DB_HANDLE) callconv(.C) objc.OSStatus;
pub const keychainItemGetDLDBHandle = SecKeychainItemGetDLDBHandle;

extern "Security" fn SecKeychainItemGetUniqueRecordID(itemRef: KeychainItemRef, uniqueRecordID: ?*?*const CSSM_DB_UNIQUE_RECORD) callconv(.C) objc.OSStatus;
pub const keychainItemGetUniqueRecordID = SecKeychainItemGetUniqueRecordID;

extern "Security" fn SecKeychainItemCopyAccess(itemRef: KeychainItemRef, access: ?*AccessRef) callconv(.C) objc.OSStatus;
pub const keychainItemCopyAccess = SecKeychainItemCopyAccess;

extern "Security" fn SecKeychainItemSetAccess(itemRef: KeychainItemRef, access: AccessRef) callconv(.C) objc.OSStatus;
pub const keychainItemSetAccess = SecKeychainItemSetAccess;

extern "Security" fn SecKeychainSearchGetTypeID() callconv(.C) core_foundation.TypeID;
pub const keychainSearchGetTypeID = SecKeychainSearchGetTypeID;

extern "Security" fn SecKeychainSearchCreateFromAttributes(
    keychainOrArray: core_foundation.TypeRef,
    itemClass: ItemClass,
    attrList: ?*const KeychainAttributeList,
    searchRef: ?*KeychainSearchRef,
) callconv(.C) objc.OSStatus;
pub const keychainSearchCreateFromAttributes = SecKeychainSearchCreateFromAttributes;

extern "Security" fn SecKeychainSearchCopyNext(searchRef: KeychainSearchRef, itemRef: ?*KeychainItemRef) callconv(.C) objc.OSStatus;
pub const keychainSearchCopyNext = SecKeychainSearchCopyNext;

pub const OpaquePolicySearchRef = extern struct {};

pub const PolicySearchRef = OpaquePolicySearchRef;

extern "Security" fn SecPolicySearchGetTypeID() callconv(.C) core_foundation.TypeID;
pub const policySearchGetTypeID = SecPolicySearchGetTypeID;

extern "Security" fn SecPolicySearchCreate(
    certType: CSSM_CERT_TYPE,
    policyOID: ?*const Asn1Oid,
    value: ?*const Asn1Item,
    searchRef: ?*PolicySearchRef,
) callconv(.C) objc.OSStatus;
pub const policySearchCreate = SecPolicySearchCreate;

extern "Security" fn SecPolicySearchCopyNext(searchRef: PolicySearchRef, policyRef: ?*PolicyRef) callconv(.C) objc.OSStatus;
pub const policySearchCopyNext = SecPolicySearchCopyNext;

extern "Security" fn SecTrustedApplicationGetTypeID() callconv(.C) core_foundation.TypeID;
pub const trustedApplicationGetTypeID = SecTrustedApplicationGetTypeID;

extern "Security" fn SecTrustedApplicationCreateFromPath(path: [*:0]const u8, app: ?*TrustedApplicationRef) callconv(.C) objc.OSStatus;
pub const trustedApplicationCreateFromPath = SecTrustedApplicationCreateFromPath;

extern "Security" fn SecTrustedApplicationCopyData(appRef: TrustedApplicationRef, data: ?*core_foundation.DataRef) callconv(.C) objc.OSStatus;
pub const trustedApplicationCopyData = SecTrustedApplicationCopyData;

extern "Security" fn SecTrustedApplicationSetData(appRef: TrustedApplicationRef, data: core_foundation.DataRef) callconv(.C) objc.OSStatus;
pub const trustedApplicationSetData = SecTrustedApplicationSetData;

pub const TrustSettingsKeyUsage = objc.uint32_t;
pub const TrustSettingsKeyUsage_UseSignature: objc.uint32_t = 1;
pub const TrustSettingsKeyUsage_UseEnDecryptData: objc.uint32_t = 2;
pub const TrustSettingsKeyUsage_UseEnDecryptKey: objc.uint32_t = 4;
pub const TrustSettingsKeyUsage_UseSignCert: objc.uint32_t = 8;
pub const TrustSettingsKeyUsage_UseSignRevocation: objc.uint32_t = 16;
pub const TrustSettingsKeyUsage_UseKeyExchange: objc.uint32_t = 32;
pub const TrustSettingsKeyUsage_UseAny: objc.uint32_t = -1;

pub const TrustSettingsResult = objc.uint32_t;
pub const TrustSettingsResult_Invalid: objc.uint32_t = 0;
pub const TrustSettingsResult_TrustRoot: objc.uint32_t = 1;
pub const TrustSettingsResult_TrustAsRoot: objc.uint32_t = 2;
pub const TrustSettingsResult_Deny: objc.uint32_t = 3;
pub const TrustSettingsResult_Unspecified: objc.uint32_t = 4;

pub const TrustSettingsDomain = objc.uint32_t;
pub const TrustSettingsDomain_User: objc.uint32_t = 0;
pub const TrustSettingsDomain_Admin: objc.uint32_t = 1;
pub const TrustSettingsDomain_System: objc.uint32_t = 2;

extern "Security" fn SecTrustSettingsCopyTrustSettings(certRef: CertificateRef, domain: TrustSettingsDomain, trustSettings: ?*core_foundation.ArrayRef) callconv(.C) objc.OSStatus;
pub const trustSettingsCopyTrustSettings = SecTrustSettingsCopyTrustSettings;

extern "Security" fn SecTrustSettingsSetTrustSettings(certRef: CertificateRef, domain: TrustSettingsDomain, trustSettingsDictOrArray: core_foundation.TypeRef) callconv(.C) objc.OSStatus;
pub const trustSettingsSetTrustSettings = SecTrustSettingsSetTrustSettings;

extern "Security" fn SecTrustSettingsRemoveTrustSettings(certRef: CertificateRef, domain: TrustSettingsDomain) callconv(.C) objc.OSStatus;
pub const trustSettingsRemoveTrustSettings = SecTrustSettingsRemoveTrustSettings;

extern "Security" fn SecTrustSettingsCopyCertificates(domain: TrustSettingsDomain, certArray: ?*core_foundation.ArrayRef) callconv(.C) objc.OSStatus;
pub const trustSettingsCopyCertificates = SecTrustSettingsCopyCertificates;

extern "Security" fn SecTrustSettingsCopyModificationDate(certRef: CertificateRef, domain: TrustSettingsDomain, modificationDate: ?*core_foundation.DateRef) callconv(.C) objc.OSStatus;
pub const trustSettingsCopyModificationDate = SecTrustSettingsCopyModificationDate;

extern "Security" fn SecTrustSettingsCreateExternalRepresentation(domain: TrustSettingsDomain, trustSettings: ?*core_foundation.DataRef) callconv(.C) objc.OSStatus;
pub const trustSettingsCreateExternalRepresentation = SecTrustSettingsCreateExternalRepresentation;

extern "Security" fn SecTrustSettingsImportExternalRepresentation(domain: TrustSettingsDomain, trustSettings: core_foundation.DataRef) callconv(.C) objc.OSStatus;
pub const trustSettingsImportExternalRepresentation = SecTrustSettingsImportExternalRepresentation;

pub const anon631 = objc.OSStatus;
pub const anon631_errSecCSUnimplemented: objc.OSStatus = -67072;
pub const anon631_errSecCSInvalidObjectRef: objc.OSStatus = -67071;
pub const anon631_errSecCSInvalidFlags: objc.OSStatus = -67070;
pub const anon631_errSecCSObjectRequired: objc.OSStatus = -67069;
pub const anon631_errSecCSStaticCodeNotFound: objc.OSStatus = -67068;
pub const anon631_errSecCSUnsupportedGuestAttributes: objc.OSStatus = -67067;
pub const anon631_errSecCSInvalidAttributeValues: objc.OSStatus = -67066;
pub const anon631_errSecCSNoSuchCode: objc.OSStatus = -67065;
pub const anon631_errSecCSMultipleGuests: objc.OSStatus = -67064;
pub const anon631_errSecCSGuestInvalid: objc.OSStatus = -67063;
pub const anon631_errSecCSUnsigned: objc.OSStatus = -67062;
pub const anon631_errSecCSSignatureFailed: objc.OSStatus = -67061;
pub const anon631_errSecCSSignatureNotVerifiable: objc.OSStatus = -67060;
pub const anon631_errSecCSSignatureUnsupported: objc.OSStatus = -67059;
pub const anon631_errSecCSBadDictionaryFormat: objc.OSStatus = -67058;
pub const anon631_errSecCSResourcesNotSealed: objc.OSStatus = -67057;
pub const anon631_errSecCSResourcesNotFound: objc.OSStatus = -67056;
pub const anon631_errSecCSResourcesInvalid: objc.OSStatus = -67055;
pub const anon631_errSecCSBadResource: objc.OSStatus = -67054;
pub const anon631_errSecCSResourceRulesInvalid: objc.OSStatus = -67053;
pub const anon631_errSecCSReqInvalid: objc.OSStatus = -67052;
pub const anon631_errSecCSReqUnsupported: objc.OSStatus = -67051;
pub const anon631_errSecCSReqFailed: objc.OSStatus = -67050;
pub const anon631_errSecCSBadObjectFormat: objc.OSStatus = -67049;
pub const anon631_errSecCSInternalError: objc.OSStatus = -67048;
pub const anon631_errSecCSHostReject: objc.OSStatus = -67047;
pub const anon631_errSecCSNotAHost: objc.OSStatus = -67046;
pub const anon631_errSecCSSignatureInvalid: objc.OSStatus = -67045;
pub const anon631_errSecCSHostProtocolRelativePath: objc.OSStatus = -67044;
pub const anon631_errSecCSHostProtocolContradiction: objc.OSStatus = -67043;
pub const anon631_errSecCSHostProtocolDedicationError: objc.OSStatus = -67042;
pub const anon631_errSecCSHostProtocolNotProxy: objc.OSStatus = -67041;
pub const anon631_errSecCSHostProtocolStateError: objc.OSStatus = -67040;
pub const anon631_errSecCSHostProtocolUnrelated: objc.OSStatus = -67039;
pub const anon631_errSecCSNotSupported: objc.OSStatus = -67037;
pub const anon631_errSecCSCMSTooLarge: objc.OSStatus = -67036;
pub const anon631_errSecCSHostProtocolInvalidHash: objc.OSStatus = -67035;
pub const anon631_errSecCSStaticCodeChanged: objc.OSStatus = -67034;
pub const anon631_errSecCSDBDenied: objc.OSStatus = -67033;
pub const anon631_errSecCSDBAccess: objc.OSStatus = -67032;
pub const anon631_errSecCSSigDBDenied: objc.OSStatus = -67033;
pub const anon631_errSecCSSigDBAccess: objc.OSStatus = -67032;
pub const anon631_errSecCSHostProtocolInvalidAttribute: objc.OSStatus = -67031;
pub const anon631_errSecCSInfoPlistFailed: objc.OSStatus = -67030;
pub const anon631_errSecCSNoMainExecutable: objc.OSStatus = -67029;
pub const anon631_errSecCSBadBundleFormat: objc.OSStatus = -67028;
pub const anon631_errSecCSNoMatches: objc.OSStatus = -67027;
pub const anon631_errSecCSFileHardQuarantined: objc.OSStatus = -67026;
pub const anon631_errSecCSOutdated: objc.OSStatus = -67025;
pub const anon631_errSecCSDbCorrupt: objc.OSStatus = -67024;
pub const anon631_errSecCSResourceDirectoryFailed: objc.OSStatus = -67023;
pub const anon631_errSecCSUnsignedNestedCode: objc.OSStatus = -67022;
pub const anon631_errSecCSBadNestedCode: objc.OSStatus = -67021;
pub const anon631_errSecCSBadCallbackValue: objc.OSStatus = -67020;
pub const anon631_errSecCSHelperFailed: objc.OSStatus = -67019;
pub const anon631_errSecCSVetoed: objc.OSStatus = -67018;
pub const anon631_errSecCSBadLVArch: objc.OSStatus = -67017;
pub const anon631_errSecCSResourceNotSupported: objc.OSStatus = -67016;
pub const anon631_errSecCSRegularFile: objc.OSStatus = -67015;
pub const anon631_errSecCSUnsealedAppRoot: objc.OSStatus = -67014;
pub const anon631_errSecCSWeakResourceRules: objc.OSStatus = -67013;
pub const anon631_errSecCSDSStoreSymlink: objc.OSStatus = -67012;
pub const anon631_errSecCSAmbiguousBundleFormat: objc.OSStatus = -67011;
pub const anon631_errSecCSBadMainExecutable: objc.OSStatus = -67010;
pub const anon631_errSecCSBadFrameworkVersion: objc.OSStatus = -67009;
pub const anon631_errSecCSUnsealedFrameworkRoot: objc.OSStatus = -67008;
pub const anon631_errSecCSWeakResourceEnvelope: objc.OSStatus = -67007;
pub const anon631_errSecCSCancelled: objc.OSStatus = -67006;
pub const anon631_errSecCSInvalidPlatform: objc.OSStatus = -67005;
pub const anon631_errSecCSTooBig: objc.OSStatus = -67004;
pub const anon631_errSecCSInvalidSymlink: objc.OSStatus = -67003;
pub const anon631_errSecCSNotAppLike: objc.OSStatus = -67002;
pub const anon631_errSecCSBadDiskImageFormat: objc.OSStatus = -67001;
pub const anon631_errSecCSUnsupportedDigestAlgorithm: objc.OSStatus = -67000;
pub const anon631_errSecCSInvalidAssociatedFileData: objc.OSStatus = -66999;
pub const anon631_errSecCSInvalidTeamIdentifier: objc.OSStatus = -66998;
pub const anon631_errSecCSBadTeamIdentifier: objc.OSStatus = -66997;
pub const anon631_errSecCSSignatureUntrusted: objc.OSStatus = -66996;
pub const anon631_errSecMultipleExecSegments: objc.OSStatus = -66995;
pub const anon631_errSecCSInvalidEntitlements: objc.OSStatus = -66994;
pub const anon631_errSecCSInvalidRuntimeVersion: objc.OSStatus = -66993;
pub const anon631_errSecCSRevokedNotarization: objc.OSStatus = -66992;
pub const anon631_errSecCSCMSConstructionFailed: objc.OSStatus = -66991;
pub const anon631_errSecCSRemoteSignerFailed: objc.OSStatus = -66990;

pub const __SecCode = extern struct {};

pub const CodeRef = __SecCode;

pub const StaticCodeRef = __SecCode;

pub const __SecRequirement = extern struct {};

pub const RequirementRef = __SecRequirement;

pub const GuestRef = objc.u_int32_t;

pub const anon2051 = GuestRef;
pub const anon2051_SecNoGuest: GuestRef = 0;

pub const CSFlags = objc.uint32_t;
pub const CSFlags_DefaultFlags: objc.uint32_t = 0;
pub const CSFlags_ConsiderExpiration: objc.uint32_t = -2147483648;
pub const CSFlags_EnforceRevocationChecks: objc.uint32_t = 1073741824;
pub const CSFlags_NoNetworkAccess: objc.uint32_t = 536870912;
pub const CSFlags_ReportProgress: objc.uint32_t = 268435456;
pub const CSFlags_CheckTrustedAnchors: objc.uint32_t = 134217728;
pub const CSFlags_QuickCheck: objc.uint32_t = 67108864;
pub const CSFlags_ApplyEmbeddedPolicy: objc.uint32_t = 33554432;
pub const CSFlags_StripDisallowedXattrs: objc.uint32_t = 16777216;
pub const CSFlags_MatchGuestRequirementInKernel: objc.uint32_t = 8388608;

pub const CodeSignatureFlags = objc.uint32_t;
pub const CodeSignatureFlags_Host: objc.uint32_t = 1;
pub const CodeSignatureFlags_Adhoc: objc.uint32_t = 2;
pub const CodeSignatureFlags_ForceHard: objc.uint32_t = 256;
pub const CodeSignatureFlags_ForceKill: objc.uint32_t = 512;
pub const CodeSignatureFlags_ForceExpiration: objc.uint32_t = 1024;
pub const CodeSignatureFlags_Restrict: objc.uint32_t = 2048;
pub const CodeSignatureFlags_Enforcement: objc.uint32_t = 4096;
pub const CodeSignatureFlags_LibraryValidation: objc.uint32_t = 8192;
pub const CodeSignatureFlags_Runtime: objc.uint32_t = 65536;
pub const CodeSignatureFlags_LinkerSigned: objc.uint32_t = 131072;

pub const CodeStatus = objc.uint32_t;
pub const CodeStatus_Valid: objc.uint32_t = 1;
pub const CodeStatus_Hard: objc.uint32_t = 256;
pub const CodeStatus_Kill: objc.uint32_t = 512;
pub const CodeStatus_Debugged: objc.uint32_t = 268435456;
pub const CodeStatus_Platform: objc.uint32_t = 67108864;

pub const RequirementType = objc.uint32_t;
pub const RequirementType_HostRequirementType: objc.uint32_t = 1;
pub const RequirementType_GuestRequirementType: objc.uint32_t = 2;
pub const RequirementType_DesignatedRequirementType: objc.uint32_t = 3;
pub const RequirementType_LibraryRequirementType: objc.uint32_t = 4;
pub const RequirementType_PluginRequirementType: objc.uint32_t = 5;
pub const RequirementType_InvalidRequirementType: objc.uint32_t = 6;
pub const RequirementType_Count: objc.uint32_t = 6;

pub const CSDigestAlgorithm = objc.uint32_t;
pub const CSDigestAlgorithm_CodeSignatureNoHash: objc.uint32_t = 0;
pub const CSDigestAlgorithm_CodeSignatureHashSHA1: objc.uint32_t = 1;
pub const CSDigestAlgorithm_CodeSignatureHashSHA256: objc.uint32_t = 2;
pub const CSDigestAlgorithm_CodeSignatureHashSHA256Truncated: objc.uint32_t = 3;
pub const CSDigestAlgorithm_CodeSignatureHashSHA384: objc.uint32_t = 4;
pub const CSDigestAlgorithm_CodeSignatureHashSHA512: objc.uint32_t = 5;

extern "Security" fn SecStaticCodeGetTypeID() callconv(.C) core_foundation.TypeID;
pub const staticCodeGetTypeID = SecStaticCodeGetTypeID;

extern "Security" fn SecStaticCodeCreateWithPath(path: core_foundation.URLRef, flags: CSFlags, staticCode: ?*StaticCodeRef) callconv(.C) objc.OSStatus;
pub const staticCodeCreateWithPath = SecStaticCodeCreateWithPath;

extern "Security" fn SecStaticCodeCreateWithPathAndAttributes(
    path: core_foundation.URLRef,
    flags: CSFlags,
    attributes: core_foundation.DictionaryRef,
    staticCode: ?*StaticCodeRef,
) callconv(.C) objc.OSStatus;
pub const staticCodeCreateWithPathAndAttributes = SecStaticCodeCreateWithPathAndAttributes;

pub const anon1751 = objc.uint32_t;
pub const anon1751_SecCSCheckAllArchitectures: objc.uint32_t = 1;
pub const anon1751_SecCSDoNotValidateExecutable: objc.uint32_t = 2;
pub const anon1751_SecCSDoNotValidateResources: objc.uint32_t = 4;
pub const anon1751_SecCSBasicValidateOnly: objc.uint32_t = 6;
pub const anon1751_SecCSCheckNestedCode: objc.uint32_t = 8;
pub const anon1751_SecCSStrictValidate: objc.uint32_t = 16;
pub const anon1751_SecCSFullReport: objc.uint32_t = 32;
pub const anon1751_SecCSCheckGatekeeperArchitectures: objc.uint32_t = 65;
pub const anon1751_SecCSRestrictSymlinks: objc.uint32_t = 128;
pub const anon1751_SecCSRestrictToAppLike: objc.uint32_t = 256;
pub const anon1751_SecCSRestrictSidebandData: objc.uint32_t = 512;
pub const anon1751_SecCSUseSoftwareSigningCert: objc.uint32_t = 1024;
pub const anon1751_SecCSValidatePEH: objc.uint32_t = 2048;
pub const anon1751_SecCSSingleThreaded: objc.uint32_t = 4096;
pub const anon1751_SecCSAllowNetworkAccess: objc.uint32_t = 65536;
pub const anon1751_SecCSFastExecutableValidation: objc.uint32_t = 131072;

extern "Security" fn SecStaticCodeCheckValidity(staticCode: StaticCodeRef, flags: CSFlags, requirement: RequirementRef) callconv(.C) objc.OSStatus;
pub const staticCodeCheckValidity = SecStaticCodeCheckValidity;

extern "Security" fn SecStaticCodeCheckValidityWithErrors(
    staticCode: StaticCodeRef,
    flags: CSFlags,
    requirement: RequirementRef,
    errors: ?*core_foundation.ErrorRef,
) callconv(.C) objc.OSStatus;
pub const staticCodeCheckValidityWithErrors = SecStaticCodeCheckValidityWithErrors;

extern "Security" fn SecCodeGetTypeID() callconv(.C) core_foundation.TypeID;
pub const codeGetTypeID = SecCodeGetTypeID;

extern "Security" fn SecCodeCopySelf(flags: CSFlags, self: ?*CodeRef) callconv(.C) objc.OSStatus;
pub const codeCopySelf = SecCodeCopySelf;

pub const anon991 = objc.uint32_t;
pub const anon991_SecCSUseAllArchitectures: objc.uint32_t = 1;

extern "Security" fn SecCodeCopyStaticCode(code: CodeRef, flags: CSFlags, staticCode: ?*StaticCodeRef) callconv(.C) objc.OSStatus;
pub const codeCopyStaticCode = SecCodeCopyStaticCode;

extern "Security" fn SecCodeCopyHost(guest: CodeRef, flags: CSFlags, host: ?*CodeRef) callconv(.C) objc.OSStatus;
pub const codeCopyHost = SecCodeCopyHost;

extern "Security" fn SecCodeCopyGuestWithAttributes(
    host: CodeRef,
    attributes: core_foundation.DictionaryRef,
    flags: CSFlags,
    guest: ?*CodeRef,
) callconv(.C) objc.OSStatus;
pub const codeCopyGuestWithAttributes = SecCodeCopyGuestWithAttributes;

extern "Security" fn SecCodeCreateWithXPCMessage(message: objc.xpc_object_t, flags: CSFlags, target: ?*CodeRef) callconv(.C) objc.OSStatus;
pub const codeCreateWithXPCMessage = SecCodeCreateWithXPCMessage;

extern "Security" fn SecCodeCheckValidity(code: CodeRef, flags: CSFlags, requirement: RequirementRef) callconv(.C) objc.OSStatus;
pub const codeCheckValidity = SecCodeCheckValidity;

extern "Security" fn SecCodeCheckValidityWithErrors(
    code: CodeRef,
    flags: CSFlags,
    requirement: RequirementRef,
    errors: ?*core_foundation.ErrorRef,
) callconv(.C) objc.OSStatus;
pub const codeCheckValidityWithErrors = SecCodeCheckValidityWithErrors;

extern "Security" fn SecCodeValidateFileResource(
    code: StaticCodeRef,
    relativePath: core_foundation.StringRef,
    fileData: core_foundation.DataRef,
    flags: CSFlags,
) callconv(.C) objc.OSStatus;
pub const codeValidateFileResource = SecCodeValidateFileResource;

extern "Security" fn SecCodeCopyPath(staticCode: StaticCodeRef, flags: CSFlags, path: ?*core_foundation.URLRef) callconv(.C) objc.OSStatus;
pub const codeCopyPath = SecCodeCopyPath;

extern "Security" fn SecCodeCopyDesignatedRequirement(code: StaticCodeRef, flags: CSFlags, requirement: ?*RequirementRef) callconv(.C) objc.OSStatus;
pub const codeCopyDesignatedRequirement = SecCodeCopyDesignatedRequirement;

pub const anon4671 = objc.uint32_t;
pub const anon4671_SecCSInternalInformation: objc.uint32_t = 1;
pub const anon4671_SecCSSigningInformation: objc.uint32_t = 2;
pub const anon4671_SecCSRequirementInformation: objc.uint32_t = 4;
pub const anon4671_SecCSDynamicInformation: objc.uint32_t = 8;
pub const anon4671_SecCSContentInformation: objc.uint32_t = 16;
pub const anon4671_SecCSSkipResourceDirectory: objc.uint32_t = 32;
pub const anon4671_SecCSCalculateCMSDigest: objc.uint32_t = 64;

extern "Security" fn SecCodeCopySigningInformation(code: StaticCodeRef, flags: CSFlags, information: ?*core_foundation.DictionaryRef) callconv(.C) objc.OSStatus;
pub const codeCopySigningInformation = SecCodeCopySigningInformation;

extern "Security" fn SecCodeMapMemory(code: StaticCodeRef, flags: CSFlags) callconv(.C) objc.OSStatus;
pub const codeMapMemory = SecCodeMapMemory;

pub const anon351 = objc.uint32_t;
pub const anon351_SecCSDedicatedHost: objc.uint32_t = 1;
pub const anon351_SecCSGenerateGuestHash: objc.uint32_t = 2;

extern "Security" fn SecHostCreateGuest(
    host: GuestRef,
    status: objc.uint32_t,
    path: core_foundation.URLRef,
    attributes: core_foundation.DictionaryRef,
    flags: CSFlags,
    newGuest: ?*GuestRef,
) callconv(.C) objc.OSStatus;
pub const hostCreateGuest = SecHostCreateGuest;

extern "Security" fn SecHostRemoveGuest(host: GuestRef, guest: GuestRef, flags: CSFlags) callconv(.C) objc.OSStatus;
pub const hostRemoveGuest = SecHostRemoveGuest;

extern "Security" fn SecHostSelectGuest(guestRef: GuestRef, flags: CSFlags) callconv(.C) objc.OSStatus;
pub const hostSelectGuest = SecHostSelectGuest;

extern "Security" fn SecHostSelectedGuest(flags: CSFlags, guestRef: ?*GuestRef) callconv(.C) objc.OSStatus;
pub const hostSelectedGuest = SecHostSelectedGuest;

extern "Security" fn SecHostSetGuestStatus(
    guestRef: GuestRef,
    status: objc.uint32_t,
    attributes: core_foundation.DictionaryRef,
    flags: CSFlags,
) callconv(.C) objc.OSStatus;
pub const hostSetGuestStatus = SecHostSetGuestStatus;

extern "Security" fn SecHostSetHostingPort(hostingPort: objc.mach_port_t, flags: CSFlags) callconv(.C) objc.OSStatus;
pub const hostSetHostingPort = SecHostSetHostingPort;

extern "Security" fn SecRequirementGetTypeID() callconv(.C) core_foundation.TypeID;
pub const requirementGetTypeID = SecRequirementGetTypeID;

extern "Security" fn SecRequirementCreateWithData(data: core_foundation.DataRef, flags: CSFlags, requirement: ?*RequirementRef) callconv(.C) objc.OSStatus;
pub const requirementCreateWithData = SecRequirementCreateWithData;

extern "Security" fn SecRequirementCreateWithString(text: core_foundation.StringRef, flags: CSFlags, requirement: ?*RequirementRef) callconv(.C) objc.OSStatus;
pub const requirementCreateWithString = SecRequirementCreateWithString;

extern "Security" fn SecRequirementCreateWithStringAndErrors(
    text: core_foundation.StringRef,
    flags: CSFlags,
    errors: ?*core_foundation.ErrorRef,
    requirement: ?*RequirementRef,
) callconv(.C) objc.OSStatus;
pub const requirementCreateWithStringAndErrors = SecRequirementCreateWithStringAndErrors;

extern "Security" fn SecRequirementCopyData(requirement: RequirementRef, flags: CSFlags, data: ?*core_foundation.DataRef) callconv(.C) objc.OSStatus;
pub const requirementCopyData = SecRequirementCopyData;

extern "Security" fn SecRequirementCopyString(requirement: RequirementRef, flags: CSFlags, text: ?*core_foundation.StringRef) callconv(.C) objc.OSStatus;
pub const requirementCopyString = SecRequirementCopyString;

pub const __SecTask = extern struct {};

pub const TaskRef = __SecTask;

extern "Security" fn SecTaskGetTypeID() callconv(.C) core_foundation.TypeID;
pub const taskGetTypeID = SecTaskGetTypeID;

extern "Security" fn SecTaskCreateWithAuditToken(allocator: core_foundation.AllocatorRef, token: objc.audit_token_t) callconv(.C) TaskRef;
pub const taskCreateWithAuditToken = SecTaskCreateWithAuditToken;

extern "Security" fn SecTaskCreateFromSelf(allocator: core_foundation.AllocatorRef) callconv(.C) TaskRef;
pub const taskCreateFromSelf = SecTaskCreateFromSelf;

extern "Security" fn SecTaskCopyValueForEntitlement(task: TaskRef, entitlement: core_foundation.StringRef, @"error": ?*core_foundation.ErrorRef) callconv(.C) core_foundation.TypeRef;
pub const taskCopyValueForEntitlement = SecTaskCopyValueForEntitlement;

extern "Security" fn SecTaskCopyValuesForEntitlements(task: TaskRef, entitlements: core_foundation.ArrayRef, @"error": ?*core_foundation.ErrorRef) callconv(.C) core_foundation.DictionaryRef;
pub const taskCopyValuesForEntitlements = SecTaskCopyValuesForEntitlements;

extern "Security" fn SecTaskCopySigningIdentifier(task: TaskRef, @"error": ?*core_foundation.ErrorRef) callconv(.C) core_foundation.StringRef;
pub const taskCopySigningIdentifier = SecTaskCopySigningIdentifier;

extern "Security" fn SecTaskGetCodeSignStatus(task: TaskRef) callconv(.C) objc.uint32_t;
pub const taskGetCodeSignStatus = SecTaskGetCodeSignStatus;

pub extern "Security" fn AuthorizationRightGet(rightName: [*:0]const u8, rightDefinition: ?*core_foundation.DictionaryRef) callconv(.C) objc.OSStatus;

pub extern "Security" fn AuthorizationRightSet(
    authRef: AuthorizationRef,
    rightName: [*:0]const u8,
    rightDefinition: core_foundation.TypeRef,
    descriptionKey: core_foundation.StringRef,
    bundle: core_foundation.BundleRef,
    localeTableName: core_foundation.StringRef,
) callconv(.C) objc.OSStatus;

pub extern "Security" fn AuthorizationRightRemove(authRef: AuthorizationRef, rightName: [*:0]const u8) callconv(.C) objc.OSStatus;

pub const _CMSDecoder = extern struct {};

pub const CMSDecoderRef = _CMSDecoder;

pub extern "Security" fn CMSDecoderGetTypeID() callconv(.C) core_foundation.TypeID;

pub const CMSSignerStatus = objc.uint32_t;
pub const CMSSignerStatus_Unsigned: objc.uint32_t = 0;
pub const CMSSignerStatus_Valid: objc.uint32_t = 1;
pub const CMSSignerStatus_NeedsDetachedContent: objc.uint32_t = 2;
pub const CMSSignerStatus_InvalidSignature: objc.uint32_t = 3;
pub const CMSSignerStatus_InvalidCert: objc.uint32_t = 4;
pub const CMSSignerStatus_InvalidIndex: objc.uint32_t = 5;

pub extern "Security" fn CMSDecoderCreate(cmsDecoderOut: ?*CMSDecoderRef) callconv(.C) objc.OSStatus;

pub extern "Security" fn CMSDecoderUpdateMessage(cmsDecoder: CMSDecoderRef, msgBytes: ?*const anyopaque, msgBytesLen: objc.size_t) callconv(.C) objc.OSStatus;

pub extern "Security" fn CMSDecoderFinalizeMessage(cmsDecoder: CMSDecoderRef) callconv(.C) objc.OSStatus;

pub extern "Security" fn CMSDecoderSetDetachedContent(cmsDecoder: CMSDecoderRef, detachedContent: core_foundation.DataRef) callconv(.C) objc.OSStatus;

pub extern "Security" fn CMSDecoderCopyDetachedContent(cmsDecoder: CMSDecoderRef, detachedContentOut: ?*core_foundation.DataRef) callconv(.C) objc.OSStatus;

pub extern "Security" fn CMSDecoderSetSearchKeychain(cmsDecoder: CMSDecoderRef, keychainOrArray: core_foundation.TypeRef) callconv(.C) objc.OSStatus;

pub extern "Security" fn CMSDecoderGetNumSigners(cmsDecoder: CMSDecoderRef, numSignersOut: ?*objc.size_t) callconv(.C) objc.OSStatus;

pub extern "Security" fn CMSDecoderCopySignerStatus(
    cmsDecoder: CMSDecoderRef,
    signerIndex: objc.size_t,
    policyOrArray: core_foundation.TypeRef,
    evaluateSecTrust: objc.Boolean,
    signerStatusOut: ?*CMSSignerStatus,
    secTrustOut: ?*TrustRef,
    certVerifyResultCodeOut: ?*objc.OSStatus,
) callconv(.C) objc.OSStatus;

pub extern "Security" fn CMSDecoderCopySignerEmailAddress(cmsDecoder: CMSDecoderRef, signerIndex: objc.size_t, signerEmailAddressOut: ?*core_foundation.StringRef) callconv(.C) objc.OSStatus;

pub extern "Security" fn CMSDecoderCopySignerCert(cmsDecoder: CMSDecoderRef, signerIndex: objc.size_t, signerCertOut: ?*CertificateRef) callconv(.C) objc.OSStatus;

pub extern "Security" fn CMSDecoderIsContentEncrypted(cmsDecoder: CMSDecoderRef, isEncryptedOut: ?*objc.Boolean) callconv(.C) objc.OSStatus;

pub extern "Security" fn CMSDecoderCopyEncapsulatedContentType(cmsDecoder: CMSDecoderRef, eContentTypeOut: ?*core_foundation.DataRef) callconv(.C) objc.OSStatus;

pub extern "Security" fn CMSDecoderCopyAllCerts(cmsDecoder: CMSDecoderRef, certsOut: ?*core_foundation.ArrayRef) callconv(.C) objc.OSStatus;

pub extern "Security" fn CMSDecoderCopyContent(cmsDecoder: CMSDecoderRef, contentOut: ?*core_foundation.DataRef) callconv(.C) objc.OSStatus;

pub extern "Security" fn CMSDecoderCopySignerSigningTime(cmsDecoder: CMSDecoderRef, signerIndex: objc.size_t, signingTime: ?*core_foundation.AbsoluteTime) callconv(.C) objc.OSStatus;

pub extern "Security" fn CMSDecoderCopySignerTimestamp(cmsDecoder: CMSDecoderRef, signerIndex: objc.size_t, timestamp: ?*core_foundation.AbsoluteTime) callconv(.C) objc.OSStatus;

pub extern "Security" fn CMSDecoderCopySignerTimestampWithPolicy(
    cmsDecoder: CMSDecoderRef,
    timeStampPolicy: core_foundation.TypeRef,
    signerIndex: objc.size_t,
    timestamp: ?*core_foundation.AbsoluteTime,
) callconv(.C) objc.OSStatus;

pub extern "Security" fn CMSDecoderCopySignerTimestampCertificates(cmsDecoder: CMSDecoderRef, signerIndex: objc.size_t, certificateRefs: ?*core_foundation.ArrayRef) callconv(.C) objc.OSStatus;

pub const _CMSEncoder = extern struct {};

pub const CMSEncoderRef = _CMSEncoder;

pub extern "Security" fn CMSEncoderGetTypeID() callconv(.C) core_foundation.TypeID;

pub extern "Security" fn CMSEncoderCreate(cmsEncoderOut: ?*CMSEncoderRef) callconv(.C) objc.OSStatus;

pub extern "Security" fn CMSEncoderSetSignerAlgorithm(cmsEncoder: CMSEncoderRef, digestAlgorithm: core_foundation.StringRef) callconv(.C) objc.OSStatus;

pub extern "Security" fn CMSEncoderAddSigners(cmsEncoder: CMSEncoderRef, signerOrArray: core_foundation.TypeRef) callconv(.C) objc.OSStatus;

pub extern "Security" fn CMSEncoderCopySigners(cmsEncoder: CMSEncoderRef, signersOut: ?*core_foundation.ArrayRef) callconv(.C) objc.OSStatus;

pub extern "Security" fn CMSEncoderAddRecipients(cmsEncoder: CMSEncoderRef, recipientOrArray: core_foundation.TypeRef) callconv(.C) objc.OSStatus;

pub extern "Security" fn CMSEncoderCopyRecipients(cmsEncoder: CMSEncoderRef, recipientsOut: ?*core_foundation.ArrayRef) callconv(.C) objc.OSStatus;

pub extern "Security" fn CMSEncoderSetHasDetachedContent(cmsEncoder: CMSEncoderRef, detachedContent: objc.Boolean) callconv(.C) objc.OSStatus;

pub extern "Security" fn CMSEncoderGetHasDetachedContent(cmsEncoder: CMSEncoderRef, detachedContentOut: ?*objc.Boolean) callconv(.C) objc.OSStatus;

pub extern "Security" fn CMSEncoderSetEncapsulatedContentType(cmsEncoder: CMSEncoderRef, eContentType: ?*const Asn1Oid) callconv(.C) objc.OSStatus;

pub extern "Security" fn CMSEncoderSetEncapsulatedContentTypeOID(cmsEncoder: CMSEncoderRef, eContentTypeOID: core_foundation.TypeRef) callconv(.C) objc.OSStatus;

pub extern "Security" fn CMSEncoderCopyEncapsulatedContentType(cmsEncoder: CMSEncoderRef, eContentTypeOut: ?*core_foundation.DataRef) callconv(.C) objc.OSStatus;

pub extern "Security" fn CMSEncoderAddSupportingCerts(cmsEncoder: CMSEncoderRef, certOrArray: core_foundation.TypeRef) callconv(.C) objc.OSStatus;

pub extern "Security" fn CMSEncoderCopySupportingCerts(cmsEncoder: CMSEncoderRef, certsOut: ?*core_foundation.ArrayRef) callconv(.C) objc.OSStatus;

pub const CMSSignedAttributes = objc.uint32_t;
pub const CMSSignedAttributes_AttrNone: objc.uint32_t = 0;
pub const CMSSignedAttributes_AttrSmimeCapabilities: objc.uint32_t = 1;
pub const CMSSignedAttributes_AttrSmimeEncryptionKeyPrefs: objc.uint32_t = 2;
pub const CMSSignedAttributes_AttrSmimeMSEncryptionKeyPrefs: objc.uint32_t = 4;
pub const CMSSignedAttributes_AttrSigningTime: objc.uint32_t = 8;
pub const CMSSignedAttributes_AttrAppleCodesigningHashAgility: objc.uint32_t = 16;
pub const CMSSignedAttributes_AttrAppleCodesigningHashAgilityV2: objc.uint32_t = 32;
pub const CMSSignedAttributes_AttrAppleExpirationTime: objc.uint32_t = 64;

pub extern "Security" fn CMSEncoderAddSignedAttributes(cmsEncoder: CMSEncoderRef, signedAttributes: CMSSignedAttributes) callconv(.C) objc.OSStatus;

pub const CMSCertificateChainMode = objc.uint32_t;
pub const CMSCertificateChainMode_None: objc.uint32_t = 0;
pub const CMSCertificateChainMode_SignerOnly: objc.uint32_t = 1;
pub const CMSCertificateChainMode_Chain: objc.uint32_t = 2;
pub const CMSCertificateChainMode_WithRoot: objc.uint32_t = 3;
pub const CMSCertificateChainMode_WithRootOrFail: objc.uint32_t = 4;

pub extern "Security" fn CMSEncoderSetCertificateChainMode(cmsEncoder: CMSEncoderRef, chainMode: CMSCertificateChainMode) callconv(.C) objc.OSStatus;

pub extern "Security" fn CMSEncoderGetCertificateChainMode(cmsEncoder: CMSEncoderRef, chainModeOut: ?*CMSCertificateChainMode) callconv(.C) objc.OSStatus;

pub extern "Security" fn CMSEncoderUpdateContent(cmsEncoder: CMSEncoderRef, content: ?*const anyopaque, contentLen: objc.size_t) callconv(.C) objc.OSStatus;

pub extern "Security" fn CMSEncoderCopyEncodedContent(cmsEncoder: CMSEncoderRef, encodedContentOut: ?*core_foundation.DataRef) callconv(.C) objc.OSStatus;

pub extern "Security" fn CMSEncode(
    signers: core_foundation.TypeRef,
    recipients: core_foundation.TypeRef,
    eContentType: ?*const Asn1Oid,
    detachedContent: objc.Boolean,
    signedAttributes: CMSSignedAttributes,
    content: ?*const anyopaque,
    contentLen: objc.size_t,
    encodedContentOut: ?*core_foundation.DataRef,
) callconv(.C) objc.OSStatus;

pub extern "Security" fn CMSEncodeContent(
    signers: core_foundation.TypeRef,
    recipients: core_foundation.TypeRef,
    eContentTypeOID: core_foundation.TypeRef,
    detachedContent: objc.Boolean,
    signedAttributes: CMSSignedAttributes,
    content: ?*const anyopaque,
    contentLen: objc.size_t,
    encodedContentOut: ?*core_foundation.DataRef,
) callconv(.C) objc.OSStatus;

pub extern "Security" fn CMSEncoderCopySignerTimestamp(cmsEncoder: CMSEncoderRef, signerIndex: objc.size_t, timestamp: ?*core_foundation.AbsoluteTime) callconv(.C) objc.OSStatus;

pub extern "Security" fn CMSEncoderCopySignerTimestampWithPolicy(
    cmsEncoder: CMSEncoderRef,
    timeStampPolicy: core_foundation.TypeRef,
    signerIndex: objc.size_t,
    timestamp: ?*core_foundation.AbsoluteTime,
) callconv(.C) objc.OSStatus;

pub const SSLContext = extern struct {};

pub const SSLContextRef = SSLContext;

pub const SSLConnectionRef = ?*const anyopaque;

pub const SSLSessionOption = i32;
pub const SSLSessionOption_BreakOnServerAuth: i32 = 0;
pub const SSLSessionOption_BreakOnCertRequested: i32 = 1;
pub const SSLSessionOption_BreakOnClientAuth: i32 = 2;
pub const SSLSessionOption_FalseStart: i32 = 3;
pub const SSLSessionOption_SendOneByteRecord: i32 = 4;
pub const SSLSessionOption_AllowServerIdentityChange: i32 = 5;
pub const SSLSessionOption_Fallback: i32 = 6;
pub const SSLSessionOption_BreakOnClientHello: i32 = 7;
pub const SSLSessionOption_AllowRenegotiation: i32 = 8;
pub const SSLSessionOption_EnableSessionTickets: i32 = 9;

pub const SSLSessionState = i32;
pub const SSLSessionState_Idle: i32 = 0;
pub const SSLSessionState_Handshake: i32 = 1;
pub const SSLSessionState_Connected: i32 = 2;
pub const SSLSessionState_Closed: i32 = 3;
pub const SSLSessionState_Aborted: i32 = 4;

pub const SSLClientCertificateState = i32;
pub const SSLClientCertificateState_None: i32 = 0;
pub const SSLClientCertificateState_Requested: i32 = 1;
pub const SSLClientCertificateState_Sent: i32 = 2;
pub const SSLClientCertificateState_Rejected: i32 = 3;

pub const SSLReadFunc = objc.OSStatus;

pub const SSLWriteFunc = objc.OSStatus;

pub const SSLProtocolSide = i32;
pub const SSLProtocolSide_ServerSide: i32 = 0;
pub const SSLProtocolSide_ClientSide: i32 = 1;

pub const SSLConnectionType = i32;
pub const SSLConnectionType_StreamType: i32 = 0;
pub const SSLConnectionType_DatagramType: i32 = 1;

pub extern "Security" fn SSLContextGetTypeID() callconv(.C) core_foundation.TypeID;

pub extern "Security" fn SSLCreateContext(alloc: core_foundation.AllocatorRef, protocolSide: SSLProtocolSide, connectionType: SSLConnectionType) callconv(.C) SSLContextRef;

pub extern "Security" fn SSLNewContext(isServer: objc.Boolean, contextPtr: ?*SSLContextRef) callconv(.C) objc.OSStatus;

pub extern "Security" fn SSLDisposeContext(context: SSLContextRef) callconv(.C) objc.OSStatus;

pub extern "Security" fn SSLGetSessionState(context: SSLContextRef, state: ?*SSLSessionState) callconv(.C) objc.OSStatus;

pub extern "Security" fn SSLSetSessionOption(context: SSLContextRef, option: SSLSessionOption, value: objc.Boolean) callconv(.C) objc.OSStatus;

pub extern "Security" fn SSLGetSessionOption(context: SSLContextRef, option: SSLSessionOption, value: ?*objc.Boolean) callconv(.C) objc.OSStatus;

pub extern "Security" fn SSLSetIOFuncs(context: SSLContextRef, readFunc: SSLReadFunc, writeFunc: SSLWriteFunc) callconv(.C) objc.OSStatus;

pub extern "Security" fn SSLSetSessionConfig(context: SSLContextRef, config: core_foundation.StringRef) callconv(.C) objc.OSStatus;

pub extern "Security" fn SSLSetProtocolVersionMin(context: SSLContextRef, minVersion: SSLProtocol) callconv(.C) objc.OSStatus;

pub extern "Security" fn SSLGetProtocolVersionMin(context: SSLContextRef, minVersion: ?*SSLProtocol) callconv(.C) objc.OSStatus;

pub extern "Security" fn SSLSetProtocolVersionMax(context: SSLContextRef, maxVersion: SSLProtocol) callconv(.C) objc.OSStatus;

pub extern "Security" fn SSLGetProtocolVersionMax(context: SSLContextRef, maxVersion: ?*SSLProtocol) callconv(.C) objc.OSStatus;

pub extern "Security" fn SSLSetProtocolVersionEnabled(context: SSLContextRef, protocol: SSLProtocol, enable: objc.Boolean) callconv(.C) objc.OSStatus;

pub extern "Security" fn SSLGetProtocolVersionEnabled(context: SSLContextRef, protocol: SSLProtocol, enable: ?*objc.Boolean) callconv(.C) objc.OSStatus;

pub extern "Security" fn SSLSetProtocolVersion(context: SSLContextRef, version: SSLProtocol) callconv(.C) objc.OSStatus;

pub extern "Security" fn SSLGetProtocolVersion(context: SSLContextRef, protocol: ?*SSLProtocol) callconv(.C) objc.OSStatus;

pub extern "Security" fn SSLSetCertificate(context: SSLContextRef, certRefs: core_foundation.ArrayRef) callconv(.C) objc.OSStatus;

pub extern "Security" fn SSLSetConnection(context: SSLContextRef, connection: SSLConnectionRef) callconv(.C) objc.OSStatus;

pub extern "Security" fn SSLGetConnection(context: SSLContextRef, connection: ?*SSLConnectionRef) callconv(.C) objc.OSStatus;

pub extern "Security" fn SSLSetPeerDomainName(context: SSLContextRef, peerName: [*:0]const u8, peerNameLen: objc.size_t) callconv(.C) objc.OSStatus;

pub extern "Security" fn SSLGetPeerDomainNameLength(context: SSLContextRef, peerNameLen: ?*objc.size_t) callconv(.C) objc.OSStatus;

pub extern "Security" fn SSLGetPeerDomainName(context: SSLContextRef, peerName: ?*c_char, peerNameLen: ?*objc.size_t) callconv(.C) objc.OSStatus;

pub extern "Security" fn SSLCopyRequestedPeerNameLength(ctx: SSLContextRef, peerNameLen: ?*objc.size_t) callconv(.C) objc.OSStatus;

pub extern "Security" fn SSLCopyRequestedPeerName(context: SSLContextRef, peerName: ?*c_char, peerNameLen: ?*objc.size_t) callconv(.C) objc.OSStatus;

pub extern "Security" fn SSLSetDatagramHelloCookie(dtlsContext: SSLContextRef, cookie: ?*const anyopaque, cookieLen: objc.size_t) callconv(.C) objc.OSStatus;

pub extern "Security" fn SSLSetMaxDatagramRecordSize(dtlsContext: SSLContextRef, maxSize: objc.size_t) callconv(.C) objc.OSStatus;

pub extern "Security" fn SSLGetMaxDatagramRecordSize(dtlsContext: SSLContextRef, maxSize: ?*objc.size_t) callconv(.C) objc.OSStatus;

pub extern "Security" fn SSLGetNegotiatedProtocolVersion(context: SSLContextRef, protocol: ?*SSLProtocol) callconv(.C) objc.OSStatus;

pub extern "Security" fn SSLGetNumberSupportedCiphers(context: SSLContextRef, numCiphers: ?*objc.size_t) callconv(.C) objc.OSStatus;

pub extern "Security" fn SSLGetSupportedCiphers(context: SSLContextRef, ciphers: ?*SSLCipherSuite, numCiphers: ?*objc.size_t) callconv(.C) objc.OSStatus;

pub extern "Security" fn SSLGetNumberEnabledCiphers(context: SSLContextRef, numCiphers: ?*objc.size_t) callconv(.C) objc.OSStatus;

pub extern "Security" fn SSLSetEnabledCiphers(context: SSLContextRef, ciphers: ?*const SSLCipherSuite, numCiphers: objc.size_t) callconv(.C) objc.OSStatus;

pub extern "Security" fn SSLGetEnabledCiphers(context: SSLContextRef, ciphers: ?*SSLCipherSuite, numCiphers: ?*objc.size_t) callconv(.C) objc.OSStatus;

pub extern "Security" fn SSLSetSessionTicketsEnabled(context: SSLContextRef, enabled: objc.Boolean) callconv(.C) objc.OSStatus;

pub extern "Security" fn SSLSetEnableCertVerify(context: SSLContextRef, enableVerify: objc.Boolean) callconv(.C) objc.OSStatus;

pub extern "Security" fn SSLGetEnableCertVerify(context: SSLContextRef, enableVerify: ?*objc.Boolean) callconv(.C) objc.OSStatus;

pub extern "Security" fn SSLSetAllowsExpiredCerts(context: SSLContextRef, allowsExpired: objc.Boolean) callconv(.C) objc.OSStatus;

pub extern "Security" fn SSLGetAllowsExpiredCerts(context: SSLContextRef, allowsExpired: ?*objc.Boolean) callconv(.C) objc.OSStatus;

pub extern "Security" fn SSLSetAllowsExpiredRoots(context: SSLContextRef, allowsExpired: objc.Boolean) callconv(.C) objc.OSStatus;

pub extern "Security" fn SSLGetAllowsExpiredRoots(context: SSLContextRef, allowsExpired: ?*objc.Boolean) callconv(.C) objc.OSStatus;

pub extern "Security" fn SSLSetAllowsAnyRoot(context: SSLContextRef, anyRoot: objc.Boolean) callconv(.C) objc.OSStatus;

pub extern "Security" fn SSLGetAllowsAnyRoot(context: SSLContextRef, anyRoot: ?*objc.Boolean) callconv(.C) objc.OSStatus;

pub extern "Security" fn SSLSetTrustedRoots(context: SSLContextRef, trustedRoots: core_foundation.ArrayRef, replaceExisting: objc.Boolean) callconv(.C) objc.OSStatus;

pub extern "Security" fn SSLCopyTrustedRoots(context: SSLContextRef, trustedRoots: ?*core_foundation.ArrayRef) callconv(.C) objc.OSStatus;

pub extern "Security" fn SSLCopyPeerCertificates(context: SSLContextRef, certs: ?*core_foundation.ArrayRef) callconv(.C) objc.OSStatus;

pub extern "Security" fn SSLCopyPeerTrust(context: SSLContextRef, trust: ?*TrustRef) callconv(.C) objc.OSStatus;

pub extern "Security" fn SSLSetPeerID(context: SSLContextRef, peerID: ?*const anyopaque, peerIDLen: objc.size_t) callconv(.C) objc.OSStatus;

pub extern "Security" fn SSLGetPeerID(context: SSLContextRef, peerID: ?*?*const anyopaque, peerIDLen: ?*objc.size_t) callconv(.C) objc.OSStatus;

pub extern "Security" fn SSLGetNegotiatedCipher(context: SSLContextRef, cipherSuite: ?*SSLCipherSuite) callconv(.C) objc.OSStatus;

pub extern "Security" fn SSLSetALPNProtocols(context: SSLContextRef, protocols: core_foundation.ArrayRef) callconv(.C) objc.OSStatus;

pub extern "Security" fn SSLCopyALPNProtocols(context: SSLContextRef, protocols: ?*core_foundation.ArrayRef) callconv(.C) objc.OSStatus;

pub extern "Security" fn SSLSetOCSPResponse(context: SSLContextRef, response: core_foundation.DataRef) callconv(.C) objc.OSStatus;

pub extern "Security" fn SSLSetEncryptionCertificate(context: SSLContextRef, certRefs: core_foundation.ArrayRef) callconv(.C) objc.OSStatus;

pub const SSLAuthenticate = i32;
pub const SSLAuthenticate_NeverAuthenticate: i32 = 0;
pub const SSLAuthenticate_AlwaysAuthenticate: i32 = 1;
pub const SSLAuthenticate_TryAuthenticate: i32 = 2;

pub extern "Security" fn SSLSetClientSideAuthenticate(context: SSLContextRef, auth: SSLAuthenticate) callconv(.C) objc.OSStatus;

pub extern "Security" fn SSLAddDistinguishedName(context: SSLContextRef, derDN: ?*const anyopaque, derDNLen: objc.size_t) callconv(.C) objc.OSStatus;

pub extern "Security" fn SSLSetCertificateAuthorities(context: SSLContextRef, certificateOrArray: core_foundation.TypeRef, replaceExisting: objc.Boolean) callconv(.C) objc.OSStatus;

pub extern "Security" fn SSLCopyCertificateAuthorities(context: SSLContextRef, certificates: ?*core_foundation.ArrayRef) callconv(.C) objc.OSStatus;

pub extern "Security" fn SSLCopyDistinguishedNames(context: SSLContextRef, names: ?*core_foundation.ArrayRef) callconv(.C) objc.OSStatus;

pub extern "Security" fn SSLGetClientCertificateState(context: SSLContextRef, clientState: ?*SSLClientCertificateState) callconv(.C) objc.OSStatus;

pub extern "Security" fn SSLSetDiffieHellmanParams(context: SSLContextRef, dhParams: ?*const anyopaque, dhParamsLen: objc.size_t) callconv(.C) objc.OSStatus;

pub extern "Security" fn SSLGetDiffieHellmanParams(context: SSLContextRef, dhParams: ?*?*const anyopaque, dhParamsLen: ?*objc.size_t) callconv(.C) objc.OSStatus;

pub extern "Security" fn SSLSetRsaBlinding(context: SSLContextRef, blinding: objc.Boolean) callconv(.C) objc.OSStatus;

pub extern "Security" fn SSLGetRsaBlinding(context: SSLContextRef, blinding: ?*objc.Boolean) callconv(.C) objc.OSStatus;

pub extern "Security" fn SSLHandshake(context: SSLContextRef) callconv(.C) objc.OSStatus;

pub extern "Security" fn SSLReHandshake(context: SSLContextRef) callconv(.C) objc.OSStatus;

pub extern "Security" fn SSLWrite(
    context: SSLContextRef,
    data: ?*const anyopaque,
    dataLength: objc.size_t,
    processed: ?*objc.size_t,
) callconv(.C) objc.OSStatus;

pub extern "Security" fn SSLRead(
    context: SSLContextRef,
    data: ?*anyopaque,
    dataLength: objc.size_t,
    processed: ?*objc.size_t,
) callconv(.C) objc.OSStatus;

pub extern "Security" fn SSLGetBufferedReadSize(context: SSLContextRef, bufferSize: ?*objc.size_t) callconv(.C) objc.OSStatus;

pub extern "Security" fn SSLGetDatagramWriteSize(dtlsContext: SSLContextRef, bufSize: ?*objc.size_t) callconv(.C) objc.OSStatus;

pub extern "Security" fn SSLClose(context: SSLContextRef) callconv(.C) objc.OSStatus;

pub extern "Security" fn SSLSetError(context: SSLContextRef, status: objc.OSStatus) callconv(.C) objc.OSStatus;

pub const anon1791 = core_foundation.Index;
pub const anon1791_SecTransformErrorAttributeNotFound: core_foundation.Index = 1;
pub const anon1791_SecTransformErrorInvalidOperation: core_foundation.Index = 2;
pub const anon1791_SecTransformErrorNotInitializedCorrectly: core_foundation.Index = 3;
pub const anon1791_SecTransformErrorMoreThanOneOutput: core_foundation.Index = 4;
pub const anon1791_SecTransformErrorInvalidInputDictionary: core_foundation.Index = 5;
pub const anon1791_SecTransformErrorInvalidAlgorithm: core_foundation.Index = 6;
pub const anon1791_SecTransformErrorInvalidLength: core_foundation.Index = 7;
pub const anon1791_SecTransformErrorInvalidType: core_foundation.Index = 8;
pub const anon1791_SecTransformErrorInvalidInput: core_foundation.Index = 10;
pub const anon1791_SecTransformErrorNameAlreadyRegistered: core_foundation.Index = 11;
pub const anon1791_SecTransformErrorUnsupportedAttribute: core_foundation.Index = 12;
pub const anon1791_SecTransformOperationNotSupportedOnGroup: core_foundation.Index = 13;
pub const anon1791_SecTransformErrorMissingParameter: core_foundation.Index = 14;
pub const anon1791_SecTransformErrorInvalidConnection: core_foundation.Index = 15;
pub const anon1791_SecTransformTransformIsExecuting: core_foundation.Index = 16;
pub const anon1791_SecTransformInvalidOverride: core_foundation.Index = 17;
pub const anon1791_SecTransformTransformIsNotRegistered: core_foundation.Index = 18;
pub const anon1791_SecTransformErrorAbortInProgress: core_foundation.Index = 19;
pub const anon1791_SecTransformErrorAborted: core_foundation.Index = 20;
pub const anon1791_SecTransformInvalidArgument: core_foundation.Index = 21;

pub const TransformRef = core_foundation.TypeRef;

pub const GroupTransformRef = core_foundation.TypeRef;

extern "Security" fn SecTransformGetTypeID() callconv(.C) core_foundation.TypeID;
pub const transformGetTypeID = SecTransformGetTypeID;

extern "Security" fn SecGroupTransformGetTypeID() callconv(.C) core_foundation.TypeID;
pub const groupTransformGetTypeID = SecGroupTransformGetTypeID;

extern "Security" fn SecTransformCreateFromExternalRepresentation(dictionary: core_foundation.DictionaryRef, @"error": ?*core_foundation.ErrorRef) callconv(.C) TransformRef;
pub const transformCreateFromExternalRepresentation = SecTransformCreateFromExternalRepresentation;

extern "Security" fn SecTransformCopyExternalRepresentation(transformRef: TransformRef) callconv(.C) core_foundation.DictionaryRef;
pub const transformCopyExternalRepresentation = SecTransformCopyExternalRepresentation;

extern "Security" fn SecTransformCreateGroupTransform() callconv(.C) GroupTransformRef;
pub const transformCreateGroupTransform = SecTransformCreateGroupTransform;

extern "Security" fn SecTransformConnectTransforms(
    sourceTransformRef: TransformRef,
    sourceAttributeName: core_foundation.StringRef,
    destinationTransformRef: TransformRef,
    destinationAttributeName: core_foundation.StringRef,
    group: GroupTransformRef,
    @"error": ?*core_foundation.ErrorRef,
) callconv(.C) GroupTransformRef;
pub const transformConnectTransforms = SecTransformConnectTransforms;

extern "Security" fn SecTransformSetAttribute(
    transformRef: TransformRef,
    key: core_foundation.StringRef,
    value: core_foundation.TypeRef,
    @"error": ?*core_foundation.ErrorRef,
) callconv(.C) objc.Boolean;
pub const transformSetAttribute = SecTransformSetAttribute;

extern "Security" fn SecTransformGetAttribute(transformRef: TransformRef, key: core_foundation.StringRef) callconv(.C) core_foundation.TypeRef;
pub const transformGetAttribute = SecTransformGetAttribute;

extern "Security" fn SecTransformFindByName(transform: GroupTransformRef, name: core_foundation.StringRef) callconv(.C) TransformRef;
pub const transformFindByName = SecTransformFindByName;

extern "Security" fn SecTransformExecute(transformRef: TransformRef, errorRef: ?*core_foundation.ErrorRef) callconv(.C) core_foundation.TypeRef;
pub const transformExecute = SecTransformExecute;

pub const MessageBlock = *const fn (core_foundation.TypeRef, core_foundation.ErrorRef, objc.Boolean) callconv(.C) void;

extern "Security" fn SecTransformExecuteAsync(transformRef: TransformRef, deliveryQueue: objc.dispatch_queue_t, deliveryBlock: MessageBlock) callconv(.C) void;
pub const transformExecuteAsync = SecTransformExecuteAsync;

pub const TransformMetaAttributeType = core_foundation.Index;
pub const TransformMetaAttributeType_Value: core_foundation.Index = 0;
pub const TransformMetaAttributeType_Name: core_foundation.Index = 1;
pub const TransformMetaAttributeType_Ref: core_foundation.Index = 2;
pub const TransformMetaAttributeType_Required: core_foundation.Index = 3;
pub const TransformMetaAttributeType_RequiresOutboundConnection: core_foundation.Index = 4;
pub const TransformMetaAttributeType_Deferred: core_foundation.Index = 5;
pub const TransformMetaAttributeType_Stream: core_foundation.Index = 6;
pub const TransformMetaAttributeType_CanCycle: core_foundation.Index = 7;
pub const TransformMetaAttributeType_Externalize: core_foundation.Index = 8;
pub const TransformMetaAttributeType_HasOutboundConnections: core_foundation.Index = 9;
pub const TransformMetaAttributeType_HasInboundConnection: core_foundation.Index = 10;

pub const TransformAttributeRef = core_foundation.TypeRef;

pub const TransformStringOrAttributeRef = core_foundation.TypeRef;

pub const TransformActionBlock = core_foundation.TypeRef;

pub const TransformAttributeActionBlock = core_foundation.TypeRef;

pub const TransformDataBlock = core_foundation.TypeRef;

pub const TransformInstanceBlock = core_foundation.ErrorRef;

pub const OpaqueSecTransformImplementation = extern struct {};

pub const TransformImplementationRef = OpaqueSecTransformImplementation;

extern "Security" fn SecTransformSetAttributeAction(
    ref: TransformImplementationRef,
    action: core_foundation.StringRef,
    attribute: TransformStringOrAttributeRef,
    newAction: TransformAttributeActionBlock,
) callconv(.C) core_foundation.ErrorRef;
pub const transformSetAttributeAction = SecTransformSetAttributeAction;

extern "Security" fn SecTransformSetDataAction(ref: TransformImplementationRef, action: core_foundation.StringRef, newAction: TransformDataBlock) callconv(.C) core_foundation.ErrorRef;
pub const transformSetDataAction = SecTransformSetDataAction;

extern "Security" fn SecTransformSetTransformAction(ref: TransformImplementationRef, action: core_foundation.StringRef, newAction: TransformActionBlock) callconv(.C) core_foundation.ErrorRef;
pub const transformSetTransformAction = SecTransformSetTransformAction;

extern "Security" fn SecTranformCustomGetAttribute(ref: TransformImplementationRef, attribute: TransformStringOrAttributeRef, @"type": TransformMetaAttributeType) callconv(.C) core_foundation.TypeRef;
pub const tranformCustomGetAttribute = SecTranformCustomGetAttribute;

extern "Security" fn SecTransformCustomGetAttribute(ref: TransformImplementationRef, attribute: TransformStringOrAttributeRef, @"type": TransformMetaAttributeType) callconv(.C) core_foundation.TypeRef;
pub const transformCustomGetAttribute = SecTransformCustomGetAttribute;

extern "Security" fn SecTransformCustomSetAttribute(
    ref: TransformImplementationRef,
    attribute: TransformStringOrAttributeRef,
    @"type": TransformMetaAttributeType,
    value: core_foundation.TypeRef,
) callconv(.C) core_foundation.TypeRef;
pub const transformCustomSetAttribute = SecTransformCustomSetAttribute;

extern "Security" fn SecTransformPushbackAttribute(ref: TransformImplementationRef, attribute: TransformStringOrAttributeRef, value: core_foundation.TypeRef) callconv(.C) core_foundation.TypeRef;
pub const transformPushbackAttribute = SecTransformPushbackAttribute;

pub const TransformCreateFP = TransformInstanceBlock;

extern "Security" fn SecTransformRegister(uniqueName: core_foundation.StringRef, createTransformFunction: TransformCreateFP, @"error": ?*core_foundation.ErrorRef) callconv(.C) objc.Boolean;
pub const transformRegister = SecTransformRegister;

extern "Security" fn SecTransformCreate(name: core_foundation.StringRef, @"error": ?*core_foundation.ErrorRef) callconv(.C) TransformRef;
pub const transformCreate = SecTransformCreate;

extern "Security" fn SecTransformNoData() callconv(.C) core_foundation.TypeRef;
pub const transformNoData = SecTransformNoData;

extern "Security" fn SecEncodeTransformCreate(encodeType: core_foundation.TypeRef, @"error": ?*core_foundation.ErrorRef) callconv(.C) TransformRef;
pub const encodeTransformCreate = SecEncodeTransformCreate;

extern "Security" fn SecDecodeTransformCreate(DecodeType: core_foundation.TypeRef, @"error": ?*core_foundation.ErrorRef) callconv(.C) TransformRef;
pub const decodeTransformCreate = SecDecodeTransformCreate;

extern "Security" fn SecDigestTransformCreate(digestType: core_foundation.TypeRef, digestLength: core_foundation.Index, @"error": ?*core_foundation.ErrorRef) callconv(.C) TransformRef;
pub const digestTransformCreate = SecDigestTransformCreate;

extern "Security" fn SecDigestTransformGetTypeID() callconv(.C) core_foundation.TypeID;
pub const digestTransformGetTypeID = SecDigestTransformGetTypeID;

extern "Security" fn SecEncryptTransformCreate(keyRef: KeyRef, @"error": ?*core_foundation.ErrorRef) callconv(.C) TransformRef;
pub const encryptTransformCreate = SecEncryptTransformCreate;

extern "Security" fn SecDecryptTransformCreate(keyRef: KeyRef, @"error": ?*core_foundation.ErrorRef) callconv(.C) TransformRef;
pub const decryptTransformCreate = SecDecryptTransformCreate;

extern "Security" fn SecDecryptTransformGetTypeID() callconv(.C) core_foundation.TypeID;
pub const decryptTransformGetTypeID = SecDecryptTransformGetTypeID;

extern "Security" fn SecEncryptTransformGetTypeID() callconv(.C) core_foundation.TypeID;
pub const encryptTransformGetTypeID = SecEncryptTransformGetTypeID;

extern "Security" fn SecSignTransformCreate(key: KeyRef, @"error": ?*core_foundation.ErrorRef) callconv(.C) TransformRef;
pub const signTransformCreate = SecSignTransformCreate;

extern "Security" fn SecVerifyTransformCreate(key: KeyRef, signature: core_foundation.DataRef, @"error": ?*core_foundation.ErrorRef) callconv(.C) TransformRef;
pub const verifyTransformCreate = SecVerifyTransformCreate;

extern "Security" fn SecTransformCreateReadTransformWithReadStream(inputStream: core_foundation.ReadStreamRef) callconv(.C) TransformRef;
pub const transformCreateReadTransformWithReadStream = SecTransformCreateReadTransformWithReadStream;
