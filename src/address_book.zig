// THIS FILE IS AUTOGENERATED. MODIFICATIONS WILL NOT BE MAINTAINED.

const std = @import("std");
const objc = @import("objc.zig"); // Objective-C Runtime in zig.
const foundation = @import("foundation.zig"); // Framework dependency Foundation.
const core_foundation = @import("core_foundation.zig"); // Framework dependency CoreFoundation.

pub const _ABPropertyType = u32;
pub const _ABPropertyType_ABErrorInProperty: u32 = 0;
pub const _ABPropertyType_ABStringProperty: u32 = 1;
pub const _ABPropertyType_ABIntegerProperty: u32 = 2;
pub const _ABPropertyType_ABRealProperty: u32 = 3;
pub const _ABPropertyType_ABDateProperty: u32 = 4;
pub const _ABPropertyType_ABArrayProperty: u32 = 5;
pub const _ABPropertyType_ABDictionaryProperty: u32 = 6;
pub const _ABPropertyType_ABDataProperty: u32 = 7;
pub const _ABPropertyType_ABDateComponentsProperty: u32 = 8;
pub const _ABPropertyType_ABMultiStringProperty: u32 = 257;
pub const _ABPropertyType_ABMultiIntegerProperty: u32 = 258;
pub const _ABPropertyType_ABMultiRealProperty: u32 = 259;
pub const _ABPropertyType_ABMultiDateProperty: u32 = 260;
pub const _ABPropertyType_ABMultiArrayProperty: u32 = 261;
pub const _ABPropertyType_ABMultiDictionaryProperty: u32 = 262;
pub const _ABPropertyType_ABMultiDataProperty: u32 = 263;
pub const _ABPropertyType_ABMultiDateComponentsProperty: u32 = 264;

pub const PropertyType = core_foundation.Index;

pub const _ABSearchComparison = u32;
pub const _ABSearchComparison_ABEqual: u32 = 0;
pub const _ABSearchComparison_ABNotEqual: u32 = 1;
pub const _ABSearchComparison_ABLessThan: u32 = 2;
pub const _ABSearchComparison_ABLessThanOrEqual: u32 = 3;
pub const _ABSearchComparison_ABGreaterThan: u32 = 4;
pub const _ABSearchComparison_ABGreaterThanOrEqual: u32 = 5;
pub const _ABSearchComparison_ABEqualCaseInsensitive: u32 = 6;
pub const _ABSearchComparison_ABContainsSubString: u32 = 7;
pub const _ABSearchComparison_ABContainsSubStringCaseInsensitive: u32 = 8;
pub const _ABSearchComparison_ABPrefixMatch: u32 = 9;
pub const _ABSearchComparison_ABPrefixMatchCaseInsensitive: u32 = 10;
pub const _ABSearchComparison_ABBitsInBitFieldMatch: u32 = 11;
pub const _ABSearchComparison_ABDoesNotContainSubString: u32 = 12;
pub const _ABSearchComparison_ABDoesNotContainSubStringCaseInsensitive: u32 = 13;
pub const _ABSearchComparison_ABNotEqualCaseInsensitive: u32 = 14;
pub const _ABSearchComparison_ABSuffixMatch: u32 = 15;
pub const _ABSearchComparison_ABSuffixMatchCaseInsensitive: u32 = 16;
pub const _ABSearchComparison_ABWithinIntervalAroundToday: u32 = 17;
pub const _ABSearchComparison_ABWithinIntervalAroundTodayYearless: u32 = 18;
pub const _ABSearchComparison_ABNotWithinIntervalAroundToday: u32 = 19;
pub const _ABSearchComparison_ABNotWithinIntervalAroundTodayYearless: u32 = 20;
pub const _ABSearchComparison_ABWithinIntervalFromToday: u32 = 21;
pub const _ABSearchComparison_ABWithinIntervalFromTodayYearless: u32 = 22;
pub const _ABSearchComparison_ABNotWithinIntervalFromToday: u32 = 23;
pub const _ABSearchComparison_ABNotWithinIntervalFromTodayYearless: u32 = 24;

pub const SearchComparison = core_foundation.Index;

pub const _ABSearchConjunction = u32;
pub const _ABSearchConjunction_ABSearchAnd: u32 = 0;
pub const _ABSearchConjunction_ABSearchOr: u32 = 1;

pub const SearchConjunction = core_foundation.Index;

extern "AddressBook" fn ABLocalizedPropertyOrLabel(propertyOrLabel: ?*foundation.String) callconv(.C) ?*foundation.String;
pub const localizedPropertyOrLabel = ABLocalizedPropertyOrLabel;

/// https://developer.apple.com/documentation/AddressBook/ABAddressBook?language=objc
pub const AddressBook = opaque {
    pub const Internal = objc.ExternClass("ABAddressBook", @This(), objc.NSObject, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn sharedAddressBook() ?*AddressBook {
        return objc.msgSend(Internal.class(), "sharedAddressBook", ?*AddressBook, .{});
    }

    pub fn addressBook() ?*AddressBook {
        return objc.msgSend(Internal.class(), "addressBook", ?*AddressBook, .{});
    }

    pub fn recordsMatchingSearchElement(_self: *@This(), _search: ?*SearchElement) ?*foundation.Array {
        return objc.msgSend(_self, "recordsMatchingSearchElement:", ?*foundation.Array, .{_search});
    }

    pub fn save(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "save", objc.BOOL, .{});
    }

    pub fn saveAndReturnError(_self: *@This(), _error: ?*?*foundation.Error) objc.BOOL {
        return objc.msgSend(_self, "saveAndReturnError:", objc.BOOL, .{_error});
    }

    pub fn hasUnsavedChanges(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "hasUnsavedChanges", objc.BOOL, .{});
    }

    pub fn me(_self: *@This()) ?*Person {
        return objc.msgSend(_self, "me", ?*Person, .{});
    }

    pub fn setMe(_self: *@This(), _moi: ?*Person) void {
        return objc.msgSend(_self, "setMe:", void, .{_moi});
    }

    pub fn recordForUniqueId(_self: *@This(), _uniqueId: ?*foundation.String) ?*Record {
        return objc.msgSend(_self, "recordForUniqueId:", ?*Record, .{_uniqueId});
    }

    pub fn addRecordError(_self: *@This(), _record: ?*Record, _error: ?*?*foundation.Error) objc.BOOL {
        return objc.msgSend(_self, "addRecord:error:", objc.BOOL, .{ _record, _error });
    }

    pub fn addRecord(_self: *@This(), _record: ?*Record) objc.BOOL {
        return objc.msgSend(_self, "addRecord:", objc.BOOL, .{_record});
    }

    pub fn removeRecordError(_self: *@This(), _record: ?*Record, _error: ?*?*foundation.Error) objc.BOOL {
        return objc.msgSend(_self, "removeRecord:error:", objc.BOOL, .{ _record, _error });
    }

    pub fn removeRecord(_self: *@This(), _record: ?*Record) objc.BOOL {
        return objc.msgSend(_self, "removeRecord:", objc.BOOL, .{_record});
    }

    pub fn people(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "people", ?*foundation.Array, .{});
    }

    pub fn groups(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "groups", ?*foundation.Array, .{});
    }

    pub fn recordClassFromUniqueId(_self: *@This(), _uniqueId: ?*foundation.String) ?*foundation.String {
        return objc.msgSend(_self, "recordClassFromUniqueId:", ?*foundation.String, .{_uniqueId});
    }

    pub fn formattedAddressFromDictionary(_self: *@This(), _address: ?*foundation.Dictionary) ?*foundation.AttributedString {
        return objc.msgSend(_self, "formattedAddressFromDictionary:", ?*foundation.AttributedString, .{_address});
    }

    pub fn defaultCountryCode(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "defaultCountryCode", ?*foundation.String, .{});
    }

    pub fn defaultNameOrdering(_self: *@This()) objc.NSInteger {
        return objc.msgSend(_self, "defaultNameOrdering", objc.NSInteger, .{});
    }
};

/// https://developer.apple.com/documentation/AddressBook/ABRecord?language=objc
pub const Record = opaque {
    pub const Internal = objc.ExternClass("ABRecord", @This(), objc.NSObject, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn init(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "init", ?objc.Id, .{});
    }

    pub fn initWithAddressBook(_self: *@This(), _addressBook: ?*AddressBook) ?objc.Id {
        return objc.msgSend(_self, "initWithAddressBook:", ?objc.Id, .{_addressBook});
    }

    pub fn valueForProperty(_self: *@This(), _property: ?*foundation.String) ?objc.Id {
        return objc.msgSend(_self, "valueForProperty:", ?objc.Id, .{_property});
    }

    pub fn setValueForPropertyError(_self: *@This(), _value: ?objc.Id, _property: ?*foundation.String, _error: ?*?*foundation.Error) objc.BOOL {
        return objc.msgSend(_self, "setValue:forProperty:error:", objc.BOOL, .{ _value, _property, _error });
    }

    pub fn setValueForProperty(_self: *@This(), _value: ?objc.Id, _property: ?*foundation.String) objc.BOOL {
        return objc.msgSend(_self, "setValue:forProperty:", objc.BOOL, .{ _value, _property });
    }

    pub fn removeValueForProperty(_self: *@This(), _property: ?*foundation.String) objc.BOOL {
        return objc.msgSend(_self, "removeValueForProperty:", objc.BOOL, .{_property});
    }

    pub fn isReadOnly(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isReadOnly", objc.BOOL, .{});
    }

    pub fn uniqueId(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "uniqueId", ?*foundation.String, .{});
    }

    pub fn displayName(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "displayName", ?*foundation.String, .{});
    }
};

/// https://developer.apple.com/documentation/AddressBook/ABGroup?language=objc
pub const Group = opaque {
    pub const Internal = objc.ExternClass("ABGroup", @This(), Record, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn members(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "members", ?*foundation.Array, .{});
    }

    pub fn addMember(_self: *@This(), _person: ?*Person) objc.BOOL {
        return objc.msgSend(_self, "addMember:", objc.BOOL, .{_person});
    }

    pub fn removeMember(_self: *@This(), _person: ?*Person) objc.BOOL {
        return objc.msgSend(_self, "removeMember:", objc.BOOL, .{_person});
    }

    pub fn subgroups(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "subgroups", ?*foundation.Array, .{});
    }

    pub fn addSubgroup(_self: *@This(), _group: ?*Group) objc.BOOL {
        return objc.msgSend(_self, "addSubgroup:", objc.BOOL, .{_group});
    }

    pub fn removeSubgroup(_self: *@This(), _group: ?*Group) objc.BOOL {
        return objc.msgSend(_self, "removeSubgroup:", objc.BOOL, .{_group});
    }

    pub fn parentGroups(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "parentGroups", ?*foundation.Array, .{});
    }

    pub fn setDistributionIdentifierForPropertyPerson(_self: *@This(), _identifier: ?*foundation.String, _property: ?*foundation.String, _person: ?*Person) objc.BOOL {
        return objc.msgSend(_self, "setDistributionIdentifier:forProperty:person:", objc.BOOL, .{ _identifier, _property, _person });
    }

    pub fn distributionIdentifierForPropertyPerson(_self: *@This(), _property: ?*foundation.String, _person: ?*Person) ?*foundation.String {
        return objc.msgSend(_self, "distributionIdentifierForProperty:person:", ?*foundation.String, .{ _property, _person });
    }

    pub fn addPropertiesAndTypes(_properties: ?*foundation.Dictionary) objc.NSInteger {
        return objc.msgSend(Internal.class(), "addPropertiesAndTypes:", objc.NSInteger, .{_properties});
    }

    pub fn removeProperties(_properties: ?*foundation.Array) objc.NSInteger {
        return objc.msgSend(Internal.class(), "removeProperties:", objc.NSInteger, .{_properties});
    }

    pub fn properties() ?*foundation.Array {
        return objc.msgSend(Internal.class(), "properties", ?*foundation.Array, .{});
    }

    pub fn typeOfProperty(_property: ?*foundation.String) PropertyType {
        return objc.msgSend(Internal.class(), "typeOfProperty:", PropertyType, .{_property});
    }

    pub fn searchElementForPropertyLabelKeyValueComparison(
        _property: ?*foundation.String,
        _label: ?*foundation.String,
        _key: ?*foundation.String,
        _value: ?objc.Id,
        _comparison: SearchComparison,
    ) ?*SearchElement {
        return objc.msgSend(Internal.class(), "searchElementForProperty:label:key:value:comparison:", ?*SearchElement, .{
            _property,
            _label,
            _key,
            _value,
            _comparison,
        });
    }
};

/// https://developer.apple.com/documentation/AddressBook/ABPerson?language=objc
pub const Person = opaque {
    pub const Internal = objc.ExternClass("ABPerson", @This(), Record, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn parentGroups(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "parentGroups", ?*foundation.Array, .{});
    }

    pub fn linkedPeople(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "linkedPeople", ?*foundation.Array, .{});
    }

    pub fn addPropertiesAndTypes(_properties: ?*foundation.Dictionary) objc.NSInteger {
        return objc.msgSend(Internal.class(), "addPropertiesAndTypes:", objc.NSInteger, .{_properties});
    }

    pub fn removeProperties(_properties: ?*foundation.Array) objc.NSInteger {
        return objc.msgSend(Internal.class(), "removeProperties:", objc.NSInteger, .{_properties});
    }

    pub fn properties() ?*foundation.Array {
        return objc.msgSend(Internal.class(), "properties", ?*foundation.Array, .{});
    }

    pub fn typeOfProperty(_property: ?*foundation.String) PropertyType {
        return objc.msgSend(Internal.class(), "typeOfProperty:", PropertyType, .{_property});
    }

    pub fn searchElementForPropertyLabelKeyValueComparison(
        _property: ?*foundation.String,
        _label: ?*foundation.String,
        _key: ?*foundation.String,
        _value: ?objc.Id,
        _comparison: SearchComparison,
    ) ?*SearchElement {
        return objc.msgSend(Internal.class(), "searchElementForProperty:label:key:value:comparison:", ?*SearchElement, .{
            _property,
            _label,
            _key,
            _value,
            _comparison,
        });
    }

    pub fn initWithVCardRepresentation(_self: *@This(), _vCardData: ?*foundation.Data) ?objc.Id {
        return objc.msgSend(_self, "initWithVCardRepresentation:", ?objc.Id, .{_vCardData});
    }

    pub fn vCardRepresentation(_self: *@This()) ?*foundation.Data {
        return objc.msgSend(_self, "vCardRepresentation", ?*foundation.Data, .{});
    }

    pub fn setImageData(_self: *@This(), _data: ?*foundation.Data) objc.BOOL {
        return objc.msgSend(_self, "setImageData:", objc.BOOL, .{_data});
    }

    pub fn imageData(_self: *@This()) ?*foundation.Data {
        return objc.msgSend(_self, "imageData", ?*foundation.Data, .{});
    }

    pub fn beginLoadingImageDataForClient(_self: *@This(), _client: ?*objc.id) objc.NSInteger {
        return objc.msgSend(_self, "beginLoadingImageDataForClient:", objc.NSInteger, .{_client});
    }

    pub fn cancelLoadingImageDataForTag(_tag: objc.NSInteger) void {
        return objc.msgSend(Internal.class(), "cancelLoadingImageDataForTag:", void, .{_tag});
    }
};

/// https://developer.apple.com/documentation/AddressBook/ABImageClient?language=objc
pub const ImageClient = opaque {
    pub const Internal = objc.ExternProtocol(@This(), &.{objc.NSObject});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "description", ?*foundation.String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "debugDescription", ?*foundation.String, .{});
    }

    pub fn consumeImageDataForTag(_self: *@This(), _data: ?*foundation.Data, _tag: objc.NSInteger) void {
        return objc.msgSend(_self, "consumeImageData:forTag:", void, .{ _data, _tag });
    }
};

/// https://developer.apple.com/documentation/AddressBook/ABSearchElement?language=objc
pub const SearchElement = opaque {
    pub const Internal = objc.ExternClass("ABSearchElement", @This(), objc.NSObject, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn searchElementForConjunctionChildren(_conjuction: SearchConjunction, _children: ?*foundation.Array) ?*SearchElement {
        return objc.msgSend(Internal.class(), "searchElementForConjunction:children:", ?*SearchElement, .{ _conjuction, _children });
    }

    pub fn matchesRecord(_self: *@This(), _record: ?*Record) objc.BOOL {
        return objc.msgSend(_self, "matchesRecord:", objc.BOOL, .{_record});
    }
};

/// https://developer.apple.com/documentation/AddressBook/ABMultiValue?language=objc
pub const MultiValue = opaque {
    pub const Internal = objc.ExternClass("ABMultiValue", @This(), objc.NSObject, &.{ foundation.Copying, foundation.MutableCopying, foundation.FastEnumeration });
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn copyWithZone(_self: *@This(), _zone: ?*foundation.Zone) ?objc.Id {
        return objc.msgSend(_self, "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_self: *@This(), _zone: ?*foundation.Zone) ?objc.Id {
        return objc.msgSend(_self, "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn countByEnumeratingWithStateObjectsCount(_self: *@This(), _state: ?*foundation.FastEnumerationState, _buffer: ?*?objc.Id, _len: objc.NSUInteger) objc.NSUInteger {
        return objc.msgSend(_self, "countByEnumeratingWithState:objects:count:", objc.NSUInteger, .{ _state, _buffer, _len });
    }

    pub fn count(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "count", objc.NSUInteger, .{});
    }

    pub fn valueAtIndex(_self: *@This(), _index: objc.NSUInteger) ?objc.Id {
        return objc.msgSend(_self, "valueAtIndex:", ?objc.Id, .{_index});
    }

    pub fn labelAtIndex(_self: *@This(), _index: objc.NSUInteger) ?*foundation.String {
        return objc.msgSend(_self, "labelAtIndex:", ?*foundation.String, .{_index});
    }

    pub fn identifierAtIndex(_self: *@This(), _index: objc.NSUInteger) ?*foundation.String {
        return objc.msgSend(_self, "identifierAtIndex:", ?*foundation.String, .{_index});
    }

    pub fn indexForIdentifier(_self: *@This(), _identifier: ?*foundation.String) objc.NSUInteger {
        return objc.msgSend(_self, "indexForIdentifier:", objc.NSUInteger, .{_identifier});
    }

    pub fn primaryIdentifier(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "primaryIdentifier", ?*foundation.String, .{});
    }

    pub fn propertyType(_self: *@This()) PropertyType {
        return objc.msgSend(_self, "propertyType", PropertyType, .{});
    }

    pub fn valueForIdentifier(_self: *@This(), _identifier: ?*foundation.String) ?objc.Id {
        return objc.msgSend(_self, "valueForIdentifier:", ?objc.Id, .{_identifier});
    }

    pub fn labelForIdentifier(_self: *@This(), _identifier: ?*foundation.String) ?objc.Id {
        return objc.msgSend(_self, "labelForIdentifier:", ?objc.Id, .{_identifier});
    }
};

/// https://developer.apple.com/documentation/AddressBook/ABMutableMultiValue?language=objc
pub const MutableMultiValue = opaque {
    pub const Internal = objc.ExternClass("ABMutableMultiValue", @This(), MultiValue, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn addValueWithLabel(_self: *@This(), _value: ?objc.Id, _label: ?*foundation.String) ?*foundation.String {
        return objc.msgSend(_self, "addValue:withLabel:", ?*foundation.String, .{ _value, _label });
    }

    pub fn insertValueWithLabelAtIndex(_self: *@This(), _value: ?objc.Id, _label: ?*foundation.String, _index: objc.NSUInteger) ?*foundation.String {
        return objc.msgSend(_self, "insertValue:withLabel:atIndex:", ?*foundation.String, .{ _value, _label, _index });
    }

    pub fn removeValueAndLabelAtIndex(_self: *@This(), _index: objc.NSUInteger) objc.BOOL {
        return objc.msgSend(_self, "removeValueAndLabelAtIndex:", objc.BOOL, .{_index});
    }

    pub fn replaceValueAtIndexWithValue(_self: *@This(), _index: objc.NSUInteger, _value: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "replaceValueAtIndex:withValue:", objc.BOOL, .{ _index, _value });
    }

    pub fn replaceLabelAtIndexWithLabel(_self: *@This(), _index: objc.NSUInteger, _label: ?*foundation.String) objc.BOOL {
        return objc.msgSend(_self, "replaceLabelAtIndex:withLabel:", objc.BOOL, .{ _index, _label });
    }

    pub fn setPrimaryIdentifier(_self: *@This(), _identifier: ?*foundation.String) objc.BOOL {
        return objc.msgSend(_self, "setPrimaryIdentifier:", objc.BOOL, .{_identifier});
    }
};
