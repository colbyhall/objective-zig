// THIS FILE IS AUTOGENERATED. MODIFICATIONS WILL NOT BE MAINTAINED.

const std = @import("std");
const objc = @import("objc.zig"); // Objective-C Runtime in zig.
const core_foundation = @import("core_foundation.zig"); // Framework dependency CoreFoundation.
const foundation = @import("foundation.zig"); // Framework dependency Foundation.
const core_graphics = @import("core_graphics.zig"); // Framework dependency CoreGraphics.
const image_io = @import("image_io.zig"); // Framework dependency ImageIO.
const core_video = @import("core_video.zig"); // Framework dependency CoreVideo.
const io_surface = @import("io_surface.zig"); // Framework dependency IOSurface.
const application_services = @import("application_services.zig"); // Framework dependency ApplicationServices.
const opengl = @import("opengl.zig"); // Framework dependency OpenGL.
const metal = @import("metal.zig"); // Framework dependency Metal.
const avfoundation = @import("avfoundation.zig"); // Framework dependency AVFoundation.

/// https://developer.apple.com/documentation/CoreImage/CIVector?language=objc
pub const Vector = opaque {
    pub const anon235 = extern union {
        vec: [4]core_foundation.CGFloat,
        ptr: ?*core_foundation.CGFloat,
    };

    pub const Internal = objc.ExternClass("CIVector", @This(), objc.NSObject, &.{ foundation.Copying, foundation.SecureCoding });
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn copyWithZone(_self: *@This(), _zone: ?*foundation.Zone) ?objc.Id {
        return objc.msgSend(_self, "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*foundation.Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*foundation.Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn supportsSecureCoding() objc.BOOL {
        return objc.msgSend(Internal.class(), "supportsSecureCoding", objc.BOOL, .{});
    }

    pub fn vectorWithValuesCount(_values: ?*const core_foundation.CGFloat, _count: objc.size_t) *@This() {
        return objc.msgSend(Internal.class(), "vectorWithValues:count:", *@This(), .{ _values, _count });
    }

    pub fn vectorWithX(_x: core_foundation.CGFloat) *@This() {
        return objc.msgSend(Internal.class(), "vectorWithX:", *@This(), .{_x});
    }

    pub fn vectorWithXY(_x: core_foundation.CGFloat, _y: core_foundation.CGFloat) *@This() {
        return objc.msgSend(Internal.class(), "vectorWithX:Y:", *@This(), .{ _x, _y });
    }

    pub fn vectorWithXYZ(_x: core_foundation.CGFloat, _y: core_foundation.CGFloat, _z: core_foundation.CGFloat) *@This() {
        return objc.msgSend(Internal.class(), "vectorWithX:Y:Z:", *@This(), .{ _x, _y, _z });
    }

    pub fn vectorWithXYZW(
        _x: core_foundation.CGFloat,
        _y: core_foundation.CGFloat,
        _z: core_foundation.CGFloat,
        _w: core_foundation.CGFloat,
    ) *@This() {
        return objc.msgSend(Internal.class(), "vectorWithX:Y:Z:W:", *@This(), .{
            _x,
            _y,
            _z,
            _w,
        });
    }

    pub fn vectorWithCGPoint(_p: core_foundation.CGPoint) *@This() {
        return objc.msgSend(Internal.class(), "vectorWithCGPoint:", *@This(), .{_p});
    }

    pub fn vectorWithCGRect(_r: core_foundation.CGRect) *@This() {
        return objc.msgSend(Internal.class(), "vectorWithCGRect:", *@This(), .{_r});
    }

    pub fn vectorWithCGAffineTransform(_t: core_foundation.CGAffineTransform) *@This() {
        return objc.msgSend(Internal.class(), "vectorWithCGAffineTransform:", *@This(), .{_t});
    }

    pub fn vectorWithString(_representation: ?*foundation.String) *@This() {
        return objc.msgSend(Internal.class(), "vectorWithString:", *@This(), .{_representation});
    }

    pub fn initWithValuesCount(_self: *@This(), _values: ?*const core_foundation.CGFloat, _count: objc.size_t) *@This() {
        return objc.msgSend(_self, "initWithValues:count:", *@This(), .{ _values, _count });
    }

    pub fn initWithX(_self: *@This(), _x: core_foundation.CGFloat) *@This() {
        return objc.msgSend(_self, "initWithX:", *@This(), .{_x});
    }

    pub fn initWithXY(_self: *@This(), _x: core_foundation.CGFloat, _y: core_foundation.CGFloat) *@This() {
        return objc.msgSend(_self, "initWithX:Y:", *@This(), .{ _x, _y });
    }

    pub fn initWithXYZ(_self: *@This(), _x: core_foundation.CGFloat, _y: core_foundation.CGFloat, _z: core_foundation.CGFloat) *@This() {
        return objc.msgSend(_self, "initWithX:Y:Z:", *@This(), .{ _x, _y, _z });
    }

    pub fn initWithXYZW(
        _self: *@This(),
        _x: core_foundation.CGFloat,
        _y: core_foundation.CGFloat,
        _z: core_foundation.CGFloat,
        _w: core_foundation.CGFloat,
    ) *@This() {
        return objc.msgSend(_self, "initWithX:Y:Z:W:", *@This(), .{
            _x,
            _y,
            _z,
            _w,
        });
    }

    pub fn initWithCGPoint(_self: *@This(), _p: core_foundation.CGPoint) *@This() {
        return objc.msgSend(_self, "initWithCGPoint:", *@This(), .{_p});
    }

    pub fn initWithCGRect(_self: *@This(), _r: core_foundation.CGRect) *@This() {
        return objc.msgSend(_self, "initWithCGRect:", *@This(), .{_r});
    }

    pub fn initWithCGAffineTransform(_self: *@This(), _r: core_foundation.CGAffineTransform) *@This() {
        return objc.msgSend(_self, "initWithCGAffineTransform:", *@This(), .{_r});
    }

    pub fn initWithString(_self: *@This(), _representation: ?*foundation.String) *@This() {
        return objc.msgSend(_self, "initWithString:", *@This(), .{_representation});
    }

    pub fn valueAtIndex(_self: *@This(), _index: objc.size_t) core_foundation.CGFloat {
        return objc.msgSend(_self, "valueAtIndex:", core_foundation.CGFloat, .{_index});
    }

    pub fn count(_self: *@This()) objc.size_t {
        return objc.msgSend(_self, "count", objc.size_t, .{});
    }

    pub fn x(_self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(_self, "X", core_foundation.CGFloat, .{});
    }

    pub fn y(_self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(_self, "Y", core_foundation.CGFloat, .{});
    }

    pub fn z(_self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(_self, "Z", core_foundation.CGFloat, .{});
    }

    pub fn w(_self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(_self, "W", core_foundation.CGFloat, .{});
    }

    pub fn cgPointValue(_self: *@This()) core_foundation.CGPoint {
        return objc.msgSend(_self, "CGPointValue", core_foundation.CGPoint, .{});
    }

    pub fn cgRectValue(_self: *@This()) core_foundation.CGRect {
        return objc.msgSend(_self, "CGRectValue", core_foundation.CGRect, .{});
    }

    pub fn cgAffineTransformValue(_self: *@This()) core_foundation.CGAffineTransform {
        return objc.msgSend(_self, "CGAffineTransformValue", core_foundation.CGAffineTransform, .{});
    }

    pub fn stringRepresentation(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "stringRepresentation", ?*foundation.String, .{});
    }
};

/// https://developer.apple.com/documentation/CoreImage/CIColor?language=objc
pub const Color = opaque {
    pub const Internal = objc.ExternClass("CIColor", @This(), objc.NSObject, &.{ foundation.SecureCoding, foundation.Copying });
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*foundation.Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*foundation.Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn supportsSecureCoding() objc.BOOL {
        return objc.msgSend(Internal.class(), "supportsSecureCoding", objc.BOOL, .{});
    }

    pub fn copyWithZone(_self: *@This(), _zone: ?*foundation.Zone) ?objc.Id {
        return objc.msgSend(_self, "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn colorWithCGColor(_c: core_graphics.ColorRef) *@This() {
        return objc.msgSend(Internal.class(), "colorWithCGColor:", *@This(), .{_c});
    }

    pub fn colorWithRedGreenBlueAlpha(
        _r: core_foundation.CGFloat,
        _g: core_foundation.CGFloat,
        _b: core_foundation.CGFloat,
        _a: core_foundation.CGFloat,
    ) *@This() {
        return objc.msgSend(Internal.class(), "colorWithRed:green:blue:alpha:", *@This(), .{
            _r,
            _g,
            _b,
            _a,
        });
    }

    pub fn colorWithRedGreenBlue(_r: core_foundation.CGFloat, _g: core_foundation.CGFloat, _b: core_foundation.CGFloat) *@This() {
        return objc.msgSend(Internal.class(), "colorWithRed:green:blue:", *@This(), .{ _r, _g, _b });
    }

    pub fn colorWithRedGreenBlueAlphaColorSpace(
        _r: core_foundation.CGFloat,
        _g: core_foundation.CGFloat,
        _b: core_foundation.CGFloat,
        _a: core_foundation.CGFloat,
        _colorSpace: core_graphics.ColorSpaceRef,
    ) *@This() {
        return objc.msgSend(Internal.class(), "colorWithRed:green:blue:alpha:colorSpace:", *@This(), .{
            _r,
            _g,
            _b,
            _a,
            _colorSpace,
        });
    }

    pub fn colorWithRedGreenBlueColorSpace(
        _r: core_foundation.CGFloat,
        _g: core_foundation.CGFloat,
        _b: core_foundation.CGFloat,
        _colorSpace: core_graphics.ColorSpaceRef,
    ) *@This() {
        return objc.msgSend(Internal.class(), "colorWithRed:green:blue:colorSpace:", *@This(), .{
            _r,
            _g,
            _b,
            _colorSpace,
        });
    }

    pub fn colorWithString(_representation: ?*foundation.String) *@This() {
        return objc.msgSend(Internal.class(), "colorWithString:", *@This(), .{_representation});
    }

    pub fn initWithCGColor(_self: *@This(), _c: core_graphics.ColorRef) *@This() {
        return objc.msgSend(_self, "initWithCGColor:", *@This(), .{_c});
    }

    pub fn initWithRedGreenBlueAlpha(
        _self: *@This(),
        _r: core_foundation.CGFloat,
        _g: core_foundation.CGFloat,
        _b: core_foundation.CGFloat,
        _a: core_foundation.CGFloat,
    ) *@This() {
        return objc.msgSend(_self, "initWithRed:green:blue:alpha:", *@This(), .{
            _r,
            _g,
            _b,
            _a,
        });
    }

    pub fn initWithRedGreenBlue(_self: *@This(), _r: core_foundation.CGFloat, _g: core_foundation.CGFloat, _b: core_foundation.CGFloat) *@This() {
        return objc.msgSend(_self, "initWithRed:green:blue:", *@This(), .{ _r, _g, _b });
    }

    pub fn initWithRedGreenBlueAlphaColorSpace(
        _self: *@This(),
        _r: core_foundation.CGFloat,
        _g: core_foundation.CGFloat,
        _b: core_foundation.CGFloat,
        _a: core_foundation.CGFloat,
        _colorSpace: core_graphics.ColorSpaceRef,
    ) *@This() {
        return objc.msgSend(_self, "initWithRed:green:blue:alpha:colorSpace:", *@This(), .{
            _r,
            _g,
            _b,
            _a,
            _colorSpace,
        });
    }

    pub fn initWithRedGreenBlueColorSpace(
        _self: *@This(),
        _r: core_foundation.CGFloat,
        _g: core_foundation.CGFloat,
        _b: core_foundation.CGFloat,
        _colorSpace: core_graphics.ColorSpaceRef,
    ) *@This() {
        return objc.msgSend(_self, "initWithRed:green:blue:colorSpace:", *@This(), .{
            _r,
            _g,
            _b,
            _colorSpace,
        });
    }

    pub fn numberOfComponents(_self: *@This()) objc.size_t {
        return objc.msgSend(_self, "numberOfComponents", objc.size_t, .{});
    }

    pub fn components(_self: *@This()) ?*const core_foundation.CGFloat {
        return objc.msgSend(_self, "components", ?*const core_foundation.CGFloat, .{});
    }

    pub fn alpha(_self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(_self, "alpha", core_foundation.CGFloat, .{});
    }

    pub fn colorSpace(_self: *@This()) core_graphics.ColorSpaceRef {
        return objc.msgSend(_self, "colorSpace", core_graphics.ColorSpaceRef, .{});
    }

    pub fn red(_self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(_self, "red", core_foundation.CGFloat, .{});
    }

    pub fn green(_self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(_self, "green", core_foundation.CGFloat, .{});
    }

    pub fn blue(_self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(_self, "blue", core_foundation.CGFloat, .{});
    }

    pub fn stringRepresentation(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "stringRepresentation", ?*foundation.String, .{});
    }

    pub fn blackColor() ?*Color {
        return objc.msgSend(Internal.class(), "blackColor", ?*Color, .{});
    }

    pub fn whiteColor() ?*Color {
        return objc.msgSend(Internal.class(), "whiteColor", ?*Color, .{});
    }

    pub fn grayColor() ?*Color {
        return objc.msgSend(Internal.class(), "grayColor", ?*Color, .{});
    }

    pub fn redColor() ?*Color {
        return objc.msgSend(Internal.class(), "redColor", ?*Color, .{});
    }

    pub fn greenColor() ?*Color {
        return objc.msgSend(Internal.class(), "greenColor", ?*Color, .{});
    }

    pub fn blueColor() ?*Color {
        return objc.msgSend(Internal.class(), "blueColor", ?*Color, .{});
    }

    pub fn cyanColor() ?*Color {
        return objc.msgSend(Internal.class(), "cyanColor", ?*Color, .{});
    }

    pub fn magentaColor() ?*Color {
        return objc.msgSend(Internal.class(), "magentaColor", ?*Color, .{});
    }

    pub fn yellowColor() ?*Color {
        return objc.msgSend(Internal.class(), "yellowColor", ?*Color, .{});
    }

    pub fn clearColor() ?*Color {
        return objc.msgSend(Internal.class(), "clearColor", ?*Color, .{});
    }
};

/// https://developer.apple.com/documentation/CoreImage/CIImage?language=objc
pub const Image = opaque {
    pub const Format = i32;

    pub const Option = ?*foundation.String;

    pub const AutoAdjustmentOption = ?*foundation.String;

    pub const Internal = objc.ExternClass("CIImage", @This(), objc.NSObject, &.{ foundation.SecureCoding, foundation.Copying });
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*foundation.Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*foundation.Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn supportsSecureCoding() objc.BOOL {
        return objc.msgSend(Internal.class(), "supportsSecureCoding", objc.BOOL, .{});
    }

    pub fn copyWithZone(_self: *@This(), _zone: ?*foundation.Zone) ?objc.Id {
        return objc.msgSend(_self, "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn imageWithCGImage(_image: core_graphics.ImageRef) ?*Image {
        return objc.msgSend(Internal.class(), "imageWithCGImage:", ?*Image, .{_image});
    }

    pub fn imageWithCGImageOptions(_image: core_graphics.ImageRef, _options: ?*foundation.Dictionary(Image.Option, ?objc.Id)) ?*Image {
        return objc.msgSend(Internal.class(), "imageWithCGImage:options:", ?*Image, .{ _image, _options });
    }

    pub fn imageWithCGImageSourceIndexOptions(_source: image_io.SourceRef, _index: objc.size_t, _dict: ?*foundation.Dictionary(Image.Option, ?objc.Id)) ?*Image {
        return objc.msgSend(Internal.class(), "imageWithCGImageSource:index:options:", ?*Image, .{ _source, _index, _dict });
    }

    pub fn imageWithCGLayer(_layer: core_graphics.LayerRef) ?*Image {
        return objc.msgSend(Internal.class(), "imageWithCGLayer:", ?*Image, .{_layer});
    }

    pub fn imageWithCGLayerOptions(_layer: core_graphics.LayerRef, _options: ?*foundation.Dictionary(Image.Option, ?objc.Id)) ?*Image {
        return objc.msgSend(Internal.class(), "imageWithCGLayer:options:", ?*Image, .{ _layer, _options });
    }

    pub fn imageWithBitmapDataBytesPerRowSizeFormatColorSpace(
        _data: ?*foundation.Data,
        _bytesPerRow: objc.size_t,
        _size: core_foundation.CGSize,
        _format: Image.Format,
        _colorSpace: core_graphics.ColorSpaceRef,
    ) ?*Image {
        return objc.msgSend(Internal.class(), "imageWithBitmapData:bytesPerRow:size:format:colorSpace:", ?*Image, .{
            _data,
            _bytesPerRow,
            _size,
            _format,
            _colorSpace,
        });
    }

    pub fn imageWithTextureSizeFlippedColorSpace(
        _name: u32,
        _size: core_foundation.CGSize,
        _flipped: objc.BOOL,
        _colorSpace: core_graphics.ColorSpaceRef,
    ) ?*Image {
        return objc.msgSend(Internal.class(), "imageWithTexture:size:flipped:colorSpace:", ?*Image, .{
            _name,
            _size,
            _flipped,
            _colorSpace,
        });
    }

    pub fn imageWithTextureSizeFlippedOptions(
        _name: u32,
        _size: core_foundation.CGSize,
        _flipped: objc.BOOL,
        _options: ?*foundation.Dictionary(Image.Option, ?objc.Id),
    ) ?*Image {
        return objc.msgSend(Internal.class(), "imageWithTexture:size:flipped:options:", ?*Image, .{
            _name,
            _size,
            _flipped,
            _options,
        });
    }

    pub fn imageWithMTLTextureOptions(_texture: ?*objc.id, _options: ?*foundation.Dictionary(Image.Option, ?objc.Id)) ?*Image {
        return objc.msgSend(Internal.class(), "imageWithMTLTexture:options:", ?*Image, .{ _texture, _options });
    }

    pub fn imageWithContentsOfURL(_url: ?*foundation.URL) ?*Image {
        return objc.msgSend(Internal.class(), "imageWithContentsOfURL:", ?*Image, .{_url});
    }

    pub fn imageWithContentsOfURLOptions(_url: ?*foundation.URL, _options: ?*foundation.Dictionary(Image.Option, ?objc.Id)) ?*Image {
        return objc.msgSend(Internal.class(), "imageWithContentsOfURL:options:", ?*Image, .{ _url, _options });
    }

    pub fn imageWithData(_data: ?*foundation.Data) ?*Image {
        return objc.msgSend(Internal.class(), "imageWithData:", ?*Image, .{_data});
    }

    pub fn imageWithDataOptions(_data: ?*foundation.Data, _options: ?*foundation.Dictionary(Image.Option, ?objc.Id)) ?*Image {
        return objc.msgSend(Internal.class(), "imageWithData:options:", ?*Image, .{ _data, _options });
    }

    pub fn imageWithCVImageBuffer(_imageBuffer: core_video.ImageBufferRef) ?*Image {
        return objc.msgSend(Internal.class(), "imageWithCVImageBuffer:", ?*Image, .{_imageBuffer});
    }

    pub fn imageWithCVImageBufferOptions(_imageBuffer: core_video.ImageBufferRef, _options: ?*foundation.Dictionary(Image.Option, ?objc.Id)) ?*Image {
        return objc.msgSend(Internal.class(), "imageWithCVImageBuffer:options:", ?*Image, .{ _imageBuffer, _options });
    }

    pub fn imageWithCVPixelBuffer(_pixelBuffer: core_video.PixelBufferRef) ?*Image {
        return objc.msgSend(Internal.class(), "imageWithCVPixelBuffer:", ?*Image, .{_pixelBuffer});
    }

    pub fn imageWithCVPixelBufferOptions(_pixelBuffer: core_video.PixelBufferRef, _options: ?*foundation.Dictionary(Image.Option, ?objc.Id)) ?*Image {
        return objc.msgSend(Internal.class(), "imageWithCVPixelBuffer:options:", ?*Image, .{ _pixelBuffer, _options });
    }

    pub fn imageWithIOSurface(_surface: core_graphics.IOSurfaceRef) ?*Image {
        return objc.msgSend(Internal.class(), "imageWithIOSurface:", ?*Image, .{_surface});
    }

    pub fn imageWithIOSurfaceOptions(_surface: core_graphics.IOSurfaceRef, _options: ?*foundation.Dictionary(Image.Option, ?objc.Id)) ?*Image {
        return objc.msgSend(Internal.class(), "imageWithIOSurface:options:", ?*Image, .{ _surface, _options });
    }

    pub fn imageWithColor(_color: ?*Color) ?*Image {
        return objc.msgSend(Internal.class(), "imageWithColor:", ?*Image, .{_color});
    }

    pub fn emptyImage() ?*Image {
        return objc.msgSend(Internal.class(), "emptyImage", ?*Image, .{});
    }

    pub fn blackImage() ?*Image {
        return objc.msgSend(Internal.class(), "blackImage", ?*Image, .{});
    }

    pub fn whiteImage() ?*Image {
        return objc.msgSend(Internal.class(), "whiteImage", ?*Image, .{});
    }

    pub fn grayImage() ?*Image {
        return objc.msgSend(Internal.class(), "grayImage", ?*Image, .{});
    }

    pub fn redImage() ?*Image {
        return objc.msgSend(Internal.class(), "redImage", ?*Image, .{});
    }

    pub fn greenImage() ?*Image {
        return objc.msgSend(Internal.class(), "greenImage", ?*Image, .{});
    }

    pub fn blueImage() ?*Image {
        return objc.msgSend(Internal.class(), "blueImage", ?*Image, .{});
    }

    pub fn cyanImage() ?*Image {
        return objc.msgSend(Internal.class(), "cyanImage", ?*Image, .{});
    }

    pub fn magentaImage() ?*Image {
        return objc.msgSend(Internal.class(), "magentaImage", ?*Image, .{});
    }

    pub fn yellowImage() ?*Image {
        return objc.msgSend(Internal.class(), "yellowImage", ?*Image, .{});
    }

    pub fn clearImage() ?*Image {
        return objc.msgSend(Internal.class(), "clearImage", ?*Image, .{});
    }

    pub fn initWithCGImage(_self: *@This(), _image: core_graphics.ImageRef) *@This() {
        return objc.msgSend(_self, "initWithCGImage:", *@This(), .{_image});
    }

    pub fn initWithCGImageOptions(_self: *@This(), _image: core_graphics.ImageRef, _options: ?*foundation.Dictionary(Image.Option, ?objc.Id)) *@This() {
        return objc.msgSend(_self, "initWithCGImage:options:", *@This(), .{ _image, _options });
    }

    pub fn initWithCGImageSourceIndexOptions(_self: *@This(), _source: image_io.SourceRef, _index: objc.size_t, _dict: ?*foundation.Dictionary(Image.Option, ?objc.Id)) *@This() {
        return objc.msgSend(_self, "initWithCGImageSource:index:options:", *@This(), .{ _source, _index, _dict });
    }

    pub fn initWithCGLayer(_self: *@This(), _layer: core_graphics.LayerRef) *@This() {
        return objc.msgSend(_self, "initWithCGLayer:", *@This(), .{_layer});
    }

    pub fn initWithCGLayerOptions(_self: *@This(), _layer: core_graphics.LayerRef, _options: ?*foundation.Dictionary(Image.Option, ?objc.Id)) *@This() {
        return objc.msgSend(_self, "initWithCGLayer:options:", *@This(), .{ _layer, _options });
    }

    pub fn initWithData(_self: *@This(), _data: ?*foundation.Data) *@This() {
        return objc.msgSend(_self, "initWithData:", *@This(), .{_data});
    }

    pub fn initWithDataOptions(_self: *@This(), _data: ?*foundation.Data, _options: ?*foundation.Dictionary(Image.Option, ?objc.Id)) *@This() {
        return objc.msgSend(_self, "initWithData:options:", *@This(), .{ _data, _options });
    }

    pub fn initWithBitmapDataBytesPerRowSizeFormatColorSpace(
        _self: *@This(),
        _data: ?*foundation.Data,
        _bytesPerRow: objc.size_t,
        _size: core_foundation.CGSize,
        _format: Image.Format,
        _colorSpace: core_graphics.ColorSpaceRef,
    ) *@This() {
        return objc.msgSend(_self, "initWithBitmapData:bytesPerRow:size:format:colorSpace:", *@This(), .{
            _data,
            _bytesPerRow,
            _size,
            _format,
            _colorSpace,
        });
    }

    pub fn initWithTextureSizeFlippedColorSpace(
        _self: *@This(),
        _name: u32,
        _size: core_foundation.CGSize,
        _flipped: objc.BOOL,
        _colorSpace: core_graphics.ColorSpaceRef,
    ) *@This() {
        return objc.msgSend(_self, "initWithTexture:size:flipped:colorSpace:", *@This(), .{
            _name,
            _size,
            _flipped,
            _colorSpace,
        });
    }

    pub fn initWithTextureSizeFlippedOptions(
        _self: *@This(),
        _name: u32,
        _size: core_foundation.CGSize,
        _flipped: objc.BOOL,
        _options: ?*foundation.Dictionary(Image.Option, ?objc.Id),
    ) *@This() {
        return objc.msgSend(_self, "initWithTexture:size:flipped:options:", *@This(), .{
            _name,
            _size,
            _flipped,
            _options,
        });
    }

    pub fn initWithMTLTextureOptions(_self: *@This(), _texture: ?*objc.id, _options: ?*foundation.Dictionary(Image.Option, ?objc.Id)) *@This() {
        return objc.msgSend(_self, "initWithMTLTexture:options:", *@This(), .{ _texture, _options });
    }

    pub fn initWithContentsOfURL(_self: *@This(), _url: ?*foundation.URL) *@This() {
        return objc.msgSend(_self, "initWithContentsOfURL:", *@This(), .{_url});
    }

    pub fn initWithContentsOfURLOptions(_self: *@This(), _url: ?*foundation.URL, _options: ?*foundation.Dictionary(Image.Option, ?objc.Id)) *@This() {
        return objc.msgSend(_self, "initWithContentsOfURL:options:", *@This(), .{ _url, _options });
    }

    pub fn initWithIOSurface(_self: *@This(), _surface: core_graphics.IOSurfaceRef) *@This() {
        return objc.msgSend(_self, "initWithIOSurface:", *@This(), .{_surface});
    }

    pub fn initWithIOSurfaceOptions(_self: *@This(), _surface: core_graphics.IOSurfaceRef, _options: ?*foundation.Dictionary(Image.Option, ?objc.Id)) *@This() {
        return objc.msgSend(_self, "initWithIOSurface:options:", *@This(), .{ _surface, _options });
    }

    pub fn initWithIOSurfacePlaneFormatOptions(
        _self: *@This(),
        _surface: core_graphics.IOSurfaceRef,
        _plane: objc.size_t,
        _format: Image.Format,
        _options: ?*foundation.Dictionary(Image.Option, ?objc.Id),
    ) *@This() {
        return objc.msgSend(_self, "initWithIOSurface:plane:format:options:", *@This(), .{
            _surface,
            _plane,
            _format,
            _options,
        });
    }

    pub fn initWithCVImageBuffer(_self: *@This(), _imageBuffer: core_video.ImageBufferRef) *@This() {
        return objc.msgSend(_self, "initWithCVImageBuffer:", *@This(), .{_imageBuffer});
    }

    pub fn initWithCVImageBufferOptions(_self: *@This(), _imageBuffer: core_video.ImageBufferRef, _options: ?*foundation.Dictionary(Image.Option, ?objc.Id)) *@This() {
        return objc.msgSend(_self, "initWithCVImageBuffer:options:", *@This(), .{ _imageBuffer, _options });
    }

    pub fn initWithCVPixelBuffer(_self: *@This(), _pixelBuffer: core_video.PixelBufferRef) *@This() {
        return objc.msgSend(_self, "initWithCVPixelBuffer:", *@This(), .{_pixelBuffer});
    }

    pub fn initWithCVPixelBufferOptions(_self: *@This(), _pixelBuffer: core_video.PixelBufferRef, _options: ?*foundation.Dictionary(Image.Option, ?objc.Id)) *@This() {
        return objc.msgSend(_self, "initWithCVPixelBuffer:options:", *@This(), .{ _pixelBuffer, _options });
    }

    pub fn initWithColor(_self: *@This(), _color: ?*Color) *@This() {
        return objc.msgSend(_self, "initWithColor:", *@This(), .{_color});
    }

    pub fn imageByApplyingTransform(_self: *@This(), _matrix: core_foundation.CGAffineTransform) ?*Image {
        return objc.msgSend(_self, "imageByApplyingTransform:", ?*Image, .{_matrix});
    }

    pub fn imageByApplyingTransformHighQualityDownsample(_self: *@This(), _matrix: core_foundation.CGAffineTransform, _highQualityDownsample: objc.BOOL) ?*Image {
        return objc.msgSend(_self, "imageByApplyingTransform:highQualityDownsample:", ?*Image, .{ _matrix, _highQualityDownsample });
    }

    pub fn imageByApplyingOrientation(_self: *@This(), _orientation: i32) ?*Image {
        return objc.msgSend(_self, "imageByApplyingOrientation:", ?*Image, .{_orientation});
    }

    pub fn imageTransformForOrientation(_self: *@This(), _orientation: i32) core_foundation.CGAffineTransform {
        return objc.msgSend(_self, "imageTransformForOrientation:", core_foundation.CGAffineTransform, .{_orientation});
    }

    pub fn imageByApplyingCGOrientation(_self: *@This(), _orientation: image_io.PropertyOrientation) ?*Image {
        return objc.msgSend(_self, "imageByApplyingCGOrientation:", ?*Image, .{_orientation});
    }

    pub fn imageTransformForCGOrientation(_self: *@This(), _orientation: image_io.PropertyOrientation) core_foundation.CGAffineTransform {
        return objc.msgSend(_self, "imageTransformForCGOrientation:", core_foundation.CGAffineTransform, .{_orientation});
    }

    pub fn imageByCompositingOverImage(_self: *@This(), _dest: ?*Image) ?*Image {
        return objc.msgSend(_self, "imageByCompositingOverImage:", ?*Image, .{_dest});
    }

    pub fn imageByCroppingToRect(_self: *@This(), _rect: core_foundation.CGRect) ?*Image {
        return objc.msgSend(_self, "imageByCroppingToRect:", ?*Image, .{_rect});
    }

    pub fn imageByClampingToExtent(_self: *@This()) ?*Image {
        return objc.msgSend(_self, "imageByClampingToExtent", ?*Image, .{});
    }

    pub fn imageByClampingToRect(_self: *@This(), _rect: core_foundation.CGRect) ?*Image {
        return objc.msgSend(_self, "imageByClampingToRect:", ?*Image, .{_rect});
    }

    pub fn imageByApplyingFilterWithInputParameters(_self: *@This(), _filterName: ?*foundation.String, _params: ?*foundation.Dictionary(?*foundation.String, ?objc.Id)) ?*Image {
        return objc.msgSend(_self, "imageByApplyingFilter:withInputParameters:", ?*Image, .{ _filterName, _params });
    }

    pub fn imageByApplyingFilter(_self: *@This(), _filterName: ?*foundation.String) ?*Image {
        return objc.msgSend(_self, "imageByApplyingFilter:", ?*Image, .{_filterName});
    }

    pub fn imageByColorMatchingColorSpaceToWorkingSpace(_self: *@This(), _colorSpace: core_graphics.ColorSpaceRef) ?*Image {
        return objc.msgSend(_self, "imageByColorMatchingColorSpaceToWorkingSpace:", ?*Image, .{_colorSpace});
    }

    pub fn imageByColorMatchingWorkingSpaceToColorSpace(_self: *@This(), _colorSpace: core_graphics.ColorSpaceRef) ?*Image {
        return objc.msgSend(_self, "imageByColorMatchingWorkingSpaceToColorSpace:", ?*Image, .{_colorSpace});
    }

    pub fn imageByPremultiplyingAlpha(_self: *@This()) ?*Image {
        return objc.msgSend(_self, "imageByPremultiplyingAlpha", ?*Image, .{});
    }

    pub fn imageByUnpremultiplyingAlpha(_self: *@This()) ?*Image {
        return objc.msgSend(_self, "imageByUnpremultiplyingAlpha", ?*Image, .{});
    }

    pub fn imageBySettingAlphaOneInExtent(_self: *@This(), _extent: core_foundation.CGRect) ?*Image {
        return objc.msgSend(_self, "imageBySettingAlphaOneInExtent:", ?*Image, .{_extent});
    }

    pub fn imageByApplyingGaussianBlurWithSigma(_self: *@This(), _sigma: f64) ?*Image {
        return objc.msgSend(_self, "imageByApplyingGaussianBlurWithSigma:", ?*Image, .{_sigma});
    }

    pub fn imageBySettingProperties(_self: *@This(), _properties: ?*foundation.Dictionary) ?*Image {
        return objc.msgSend(_self, "imageBySettingProperties:", ?*Image, .{_properties});
    }

    pub fn imageBySamplingLinear(_self: *@This()) ?*Image {
        return objc.msgSend(_self, "imageBySamplingLinear", ?*Image, .{});
    }

    pub fn imageBySamplingNearest(_self: *@This()) ?*Image {
        return objc.msgSend(_self, "imageBySamplingNearest", ?*Image, .{});
    }

    pub fn imageByInsertingIntermediate(_self: *@This()) ?*Image {
        return objc.msgSend(_self, "imageByInsertingIntermediate", ?*Image, .{});
    }

    pub fn imageByInsertingIntermediate2(_self: *@This(), _cache: objc.BOOL) ?*Image {
        return objc.msgSend(_self, "imageByInsertingIntermediate:", ?*Image, .{_cache});
    }

    pub fn imageByApplyingGainMap(_self: *@This(), _gainmap: ?*Image) ?*Image {
        return objc.msgSend(_self, "imageByApplyingGainMap:", ?*Image, .{_gainmap});
    }

    pub fn imageByApplyingGainMapHeadroom(_self: *@This(), _gainmap: ?*Image, _headroom: f32) ?*Image {
        return objc.msgSend(_self, "imageByApplyingGainMap:headroom:", ?*Image, .{ _gainmap, _headroom });
    }

    pub fn extent(_self: *@This()) core_foundation.CGRect {
        return objc.msgSend(_self, "extent", core_foundation.CGRect, .{});
    }

    pub fn isOpaque(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isOpaque", objc.BOOL, .{});
    }

    pub fn properties(_self: *@This()) ?*foundation.Dictionary(?*foundation.String, ?objc.Id) {
        return objc.msgSend(_self, "properties", ?*foundation.Dictionary(?*foundation.String, ?objc.Id), .{});
    }

    pub fn definition(_self: *@This()) ?*FilterShape {
        return objc.msgSend(_self, "definition", ?*FilterShape, .{});
    }

    pub fn url(_self: *@This()) ?*foundation.URL {
        return objc.msgSend(_self, "url", ?*foundation.URL, .{});
    }

    pub fn colorSpace(_self: *@This()) core_graphics.ColorSpaceRef {
        return objc.msgSend(_self, "colorSpace", core_graphics.ColorSpaceRef, .{});
    }

    pub fn contentHeadroom(_self: *@This()) f32 {
        return objc.msgSend(_self, "contentHeadroom", f32, .{});
    }

    pub fn pixelBuffer(_self: *@This()) core_video.PixelBufferRef {
        return objc.msgSend(_self, "pixelBuffer", core_video.PixelBufferRef, .{});
    }

    pub fn cgImage(_self: *@This()) core_graphics.ImageRef {
        return objc.msgSend(_self, "CGImage", core_graphics.ImageRef, .{});
    }

    pub fn metalTexture(_self: *@This()) ?*objc.id {
        return objc.msgSend(_self, "metalTexture", ?*objc.id, .{});
    }

    pub fn regionOfInterestForImageInRect(_self: *@This(), _image: ?*Image, _rect: core_foundation.CGRect) core_foundation.CGRect {
        return objc.msgSend(_self, "regionOfInterestForImage:inRect:", core_foundation.CGRect, .{ _image, _rect });
    }

    pub fn autoAdjustmentFilters(_self: *@This()) ?*foundation.Array(?*Filter) {
        return objc.msgSend(_self, "autoAdjustmentFilters", ?*foundation.Array(?*Filter), .{});
    }

    pub fn autoAdjustmentFiltersWithOptions(_self: *@This(), _options: ?*foundation.Dictionary(Image.AutoAdjustmentOption, ?objc.Id)) ?*foundation.Array(?*Filter) {
        return objc.msgSend(_self, "autoAdjustmentFiltersWithOptions:", ?*foundation.Array(?*Filter), .{_options});
    }

    pub fn imageByConvertingWorkingSpaceToLab(_self: *@This()) ?*Image {
        return objc.msgSend(_self, "imageByConvertingWorkingSpaceToLab", ?*Image, .{});
    }

    pub fn imageByConvertingLabToWorkingSpace(_self: *@This()) ?*Image {
        return objc.msgSend(_self, "imageByConvertingLabToWorkingSpace", ?*Image, .{});
    }

    pub fn initWithDepthDataOptions(_self: *@This(), _data: ?*avfoundation.DepthData, _options: ?*foundation.Dictionary(?*foundation.String, ?objc.Id)) *@This() {
        return objc.msgSend(_self, "initWithDepthData:options:", *@This(), .{ _data, _options });
    }

    pub fn initWithDepthData(_self: *@This(), _data: ?*avfoundation.DepthData) *@This() {
        return objc.msgSend(_self, "initWithDepthData:", *@This(), .{_data});
    }

    pub fn imageWithDepthDataOptions(_data: ?*avfoundation.DepthData, _options: ?*foundation.Dictionary(?*foundation.String, ?objc.Id)) *@This() {
        return objc.msgSend(Internal.class(), "imageWithDepthData:options:", *@This(), .{ _data, _options });
    }

    pub fn imageWithDepthData(_data: ?*avfoundation.DepthData) *@This() {
        return objc.msgSend(Internal.class(), "imageWithDepthData:", *@This(), .{_data});
    }

    pub fn depthData(_self: *@This()) ?*avfoundation.DepthData {
        return objc.msgSend(_self, "depthData", ?*avfoundation.DepthData, .{});
    }

    pub fn initWithPortaitEffectsMatteOptions(_self: *@This(), _matte: ?*avfoundation.PortraitEffectsMatte, _options: ?*foundation.Dictionary(Image.Option, ?objc.Id)) *@This() {
        return objc.msgSend(_self, "initWithPortaitEffectsMatte:options:", *@This(), .{ _matte, _options });
    }

    pub fn initWithPortaitEffectsMatte(_self: *@This(), _matte: ?*avfoundation.PortraitEffectsMatte) *@This() {
        return objc.msgSend(_self, "initWithPortaitEffectsMatte:", *@This(), .{_matte});
    }

    pub fn imageWithPortaitEffectsMatteOptions(_matte: ?*avfoundation.PortraitEffectsMatte, _options: ?*foundation.Dictionary(Image.Option, ?objc.Id)) *@This() {
        return objc.msgSend(Internal.class(), "imageWithPortaitEffectsMatte:options:", *@This(), .{ _matte, _options });
    }

    pub fn imageWithPortaitEffectsMatte(_matte: ?*avfoundation.PortraitEffectsMatte) *@This() {
        return objc.msgSend(Internal.class(), "imageWithPortaitEffectsMatte:", *@This(), .{_matte});
    }

    pub fn portraitEffectsMatte(_self: *@This()) ?*avfoundation.PortraitEffectsMatte {
        return objc.msgSend(_self, "portraitEffectsMatte", ?*avfoundation.PortraitEffectsMatte, .{});
    }

    pub fn initWithSemanticSegmentationMatteOptions(_self: *@This(), _matte: ?*avfoundation.SemanticSegmentationMatte, _options: ?*foundation.Dictionary(Image.Option, ?objc.Id)) *@This() {
        return objc.msgSend(_self, "initWithSemanticSegmentationMatte:options:", *@This(), .{ _matte, _options });
    }

    pub fn initWithSemanticSegmentationMatte(_self: *@This(), _matte: ?*avfoundation.SemanticSegmentationMatte) *@This() {
        return objc.msgSend(_self, "initWithSemanticSegmentationMatte:", *@This(), .{_matte});
    }

    pub fn imageWithSemanticSegmentationMatteOptions(_matte: ?*avfoundation.SemanticSegmentationMatte, _options: ?*foundation.Dictionary(Image.Option, ?objc.Id)) *@This() {
        return objc.msgSend(Internal.class(), "imageWithSemanticSegmentationMatte:options:", *@This(), .{ _matte, _options });
    }

    pub fn imageWithSemanticSegmentationMatte(_matte: ?*avfoundation.SemanticSegmentationMatte) *@This() {
        return objc.msgSend(Internal.class(), "imageWithSemanticSegmentationMatte:", *@This(), .{_matte});
    }

    pub fn semanticSegmentationMatte(_self: *@This()) ?*avfoundation.SemanticSegmentationMatte {
        return objc.msgSend(_self, "semanticSegmentationMatte", ?*avfoundation.SemanticSegmentationMatte, .{});
    }

    pub fn imageWithImageProviderSizeFormatColorSpaceOptions(
        _p: ?objc.Id,
        _width: objc.size_t,
        _height: objc.size_t,
        _f: Image.Format,
        _cs: core_graphics.ColorSpaceRef,
        _options: ?*foundation.Dictionary(Image.Option, ?objc.Id),
    ) ?*Image {
        return objc.msgSend(Internal.class(), "imageWithImageProvider:size::format:colorSpace:options:", ?*Image, .{
            _p,
            _width,
            _height,
            _f,
            _cs,
            _options,
        });
    }

    pub fn initWithImageProviderSizeFormatColorSpaceOptions(
        _self: *@This(),
        _p: ?objc.Id,
        _width: objc.size_t,
        _height: objc.size_t,
        _f: Image.Format,
        _cs: core_graphics.ColorSpaceRef,
        _options: ?*foundation.Dictionary(Image.Option, ?objc.Id),
    ) *@This() {
        return objc.msgSend(_self, "initWithImageProvider:size::format:colorSpace:options:", *@This(), .{
            _p,
            _width,
            _height,
            _f,
            _cs,
            _options,
        });
    }
};

/// https://developer.apple.com/documentation/CoreImage/CIContext?language=objc
pub const Context = opaque {
    pub const Option = ?*foundation.String;

    pub const Internal = objc.ExternClass("CIContext", @This(), objc.NSObject, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn contextWithCGLContextPixelFormatColorSpaceOptions(
        _cglctx: opengl.ContextObj,
        _pixelFormat: opengl.PixelFormatObj,
        _colorSpace: core_graphics.ColorSpaceRef,
        _options: ?*foundation.Dictionary(Context.Option, ?objc.Id),
    ) ?*Context {
        return objc.msgSend(Internal.class(), "contextWithCGLContext:pixelFormat:colorSpace:options:", ?*Context, .{
            _cglctx,
            _pixelFormat,
            _colorSpace,
            _options,
        });
    }

    pub fn contextWithCGLContextPixelFormatOptions(_cglctx: opengl.ContextObj, _pixelFormat: opengl.PixelFormatObj, _options: ?*foundation.Dictionary(Context.Option, ?objc.Id)) ?*Context {
        return objc.msgSend(Internal.class(), "contextWithCGLContext:pixelFormat:options:", ?*Context, .{ _cglctx, _pixelFormat, _options });
    }

    pub fn contextWithCGContextOptions(_cgctx: core_graphics.ContextRef, _options: ?*foundation.Dictionary(Context.Option, ?objc.Id)) ?*Context {
        return objc.msgSend(Internal.class(), "contextWithCGContext:options:", ?*Context, .{ _cgctx, _options });
    }

    pub fn contextWithOptions(_options: ?*foundation.Dictionary(Context.Option, ?objc.Id)) ?*Context {
        return objc.msgSend(Internal.class(), "contextWithOptions:", ?*Context, .{_options});
    }

    pub fn context() ?*Context {
        return objc.msgSend(Internal.class(), "context", ?*Context, .{});
    }

    pub fn initWithOptions(_self: *@This(), _options: ?*foundation.Dictionary(Context.Option, ?objc.Id)) *@This() {
        return objc.msgSend(_self, "initWithOptions:", *@This(), .{_options});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn contextWithMTLDevice(_device: ?*objc.id) ?*Context {
        return objc.msgSend(Internal.class(), "contextWithMTLDevice:", ?*Context, .{_device});
    }

    pub fn contextWithMTLDeviceOptions(_device: ?*objc.id, _options: ?*foundation.Dictionary(Context.Option, ?objc.Id)) ?*Context {
        return objc.msgSend(Internal.class(), "contextWithMTLDevice:options:", ?*Context, .{ _device, _options });
    }

    pub fn contextWithMTLCommandQueue(_commandQueue: ?*objc.id) ?*Context {
        return objc.msgSend(Internal.class(), "contextWithMTLCommandQueue:", ?*Context, .{_commandQueue});
    }

    pub fn contextWithMTLCommandQueueOptions(_commandQueue: ?*objc.id, _options: ?*foundation.Dictionary(Context.Option, ?objc.Id)) ?*Context {
        return objc.msgSend(Internal.class(), "contextWithMTLCommandQueue:options:", ?*Context, .{ _commandQueue, _options });
    }

    pub fn workingColorSpace(_self: *@This()) core_graphics.ColorSpaceRef {
        return objc.msgSend(_self, "workingColorSpace", core_graphics.ColorSpaceRef, .{});
    }

    pub fn workingFormat(_self: *@This()) Image.Format {
        return objc.msgSend(_self, "workingFormat", Image.Format, .{});
    }

    pub fn drawImageAtPointFromRect(_self: *@This(), _image: ?*Image, _atPoint: core_foundation.CGPoint, _fromRect: core_foundation.CGRect) void {
        return objc.msgSend(_self, "drawImage:atPoint:fromRect:", void, .{ _image, _atPoint, _fromRect });
    }

    pub fn drawImageInRectFromRect(_self: *@This(), _image: ?*Image, _inRect: core_foundation.CGRect, _fromRect: core_foundation.CGRect) void {
        return objc.msgSend(_self, "drawImage:inRect:fromRect:", void, .{ _image, _inRect, _fromRect });
    }

    pub fn createCGLayerWithSizeInfo(_self: *@This(), _size: core_foundation.CGSize, _info: core_foundation.DictionaryRef) core_graphics.LayerRef {
        return objc.msgSend(_self, "createCGLayerWithSize:info:", core_graphics.LayerRef, .{ _size, _info });
    }

    pub fn renderToBitmapRowBytesBoundsFormatColorSpace(
        _self: *@This(),
        _image: ?*Image,
        _data: ?*anyopaque,
        _rowBytes: objc.ptrdiff_t,
        _bounds: core_foundation.CGRect,
        _format: Image.Format,
        _colorSpace: core_graphics.ColorSpaceRef,
    ) void {
        return objc.msgSend(_self, "render:toBitmap:rowBytes:bounds:format:colorSpace:", void, .{
            _image,
            _data,
            _rowBytes,
            _bounds,
            _format,
            _colorSpace,
        });
    }

    pub fn renderToIOSurfaceBoundsColorSpace(
        _self: *@This(),
        _image: ?*Image,
        _surface: core_graphics.IOSurfaceRef,
        _bounds: core_foundation.CGRect,
        _colorSpace: core_graphics.ColorSpaceRef,
    ) void {
        return objc.msgSend(_self, "render:toIOSurface:bounds:colorSpace:", void, .{
            _image,
            _surface,
            _bounds,
            _colorSpace,
        });
    }

    pub fn renderToCVPixelBuffer(_self: *@This(), _image: ?*Image, _buffer: core_video.PixelBufferRef) void {
        return objc.msgSend(_self, "render:toCVPixelBuffer:", void, .{ _image, _buffer });
    }

    pub fn renderToCVPixelBufferBoundsColorSpace(
        _self: *@This(),
        _image: ?*Image,
        _buffer: core_video.PixelBufferRef,
        _bounds: core_foundation.CGRect,
        _colorSpace: core_graphics.ColorSpaceRef,
    ) void {
        return objc.msgSend(_self, "render:toCVPixelBuffer:bounds:colorSpace:", void, .{
            _image,
            _buffer,
            _bounds,
            _colorSpace,
        });
    }

    pub fn renderToMTLTextureCommandBufferBoundsColorSpace(
        _self: *@This(),
        _image: ?*Image,
        _texture: ?*objc.id,
        _commandBuffer: ?*objc.id,
        _bounds: core_foundation.CGRect,
        _colorSpace: core_graphics.ColorSpaceRef,
    ) void {
        return objc.msgSend(_self, "render:toMTLTexture:commandBuffer:bounds:colorSpace:", void, .{
            _image,
            _texture,
            _commandBuffer,
            _bounds,
            _colorSpace,
        });
    }

    pub fn reclaimResources(_self: *@This()) void {
        return objc.msgSend(_self, "reclaimResources", void, .{});
    }

    pub fn clearCaches(_self: *@This()) void {
        return objc.msgSend(_self, "clearCaches", void, .{});
    }

    pub fn inputImageMaximumSize(_self: *@This()) core_foundation.CGSize {
        return objc.msgSend(_self, "inputImageMaximumSize", core_foundation.CGSize, .{});
    }

    pub fn outputImageMaximumSize(_self: *@This()) core_foundation.CGSize {
        return objc.msgSend(_self, "outputImageMaximumSize", core_foundation.CGSize, .{});
    }

    pub fn createCGImageFromRect(_self: *@This(), _image: ?*Image, _fromRect: core_foundation.CGRect) core_graphics.ImageRef {
        return objc.msgSend(_self, "createCGImage:fromRect:", core_graphics.ImageRef, .{ _image, _fromRect });
    }

    pub fn createCGImageFromRectFormatColorSpace(
        _self: *@This(),
        _image: ?*Image,
        _fromRect: core_foundation.CGRect,
        _format: Image.Format,
        _colorSpace: core_graphics.ColorSpaceRef,
    ) core_graphics.ImageRef {
        return objc.msgSend(_self, "createCGImage:fromRect:format:colorSpace:", core_graphics.ImageRef, .{
            _image,
            _fromRect,
            _format,
            _colorSpace,
        });
    }

    pub fn createCGImageFromRectFormatColorSpaceDeferred(
        _self: *@This(),
        _image: ?*Image,
        _fromRect: core_foundation.CGRect,
        _format: Image.Format,
        _colorSpace: core_graphics.ColorSpaceRef,
        _deferred: objc.BOOL,
    ) core_graphics.ImageRef {
        return objc.msgSend(_self, "createCGImage:fromRect:format:colorSpace:deferred:", core_graphics.ImageRef, .{
            _image,
            _fromRect,
            _format,
            _colorSpace,
            _deferred,
        });
    }

    pub fn offlineGPUCount() u32 {
        return objc.msgSend(Internal.class(), "offlineGPUCount", u32, .{});
    }

    pub fn contextForOfflineGPUAtIndex(_index: u32) ?*Context {
        return objc.msgSend(Internal.class(), "contextForOfflineGPUAtIndex:", ?*Context, .{_index});
    }

    pub fn contextForOfflineGPUAtIndexColorSpaceOptionsSharedContext(
        _index: u32,
        _colorSpace: core_graphics.ColorSpaceRef,
        _options: ?*foundation.Dictionary(Context.Option, ?objc.Id),
        _sharedContext: opengl.ContextObj,
    ) ?*Context {
        return objc.msgSend(Internal.class(), "contextForOfflineGPUAtIndex:colorSpace:options:sharedContext:", ?*Context, .{
            _index,
            _colorSpace,
            _options,
            _sharedContext,
        });
    }

    pub fn tiffRepresentationOfImageFormatColorSpaceOptions(
        _self: *@This(),
        _image: ?*Image,
        _format: Image.Format,
        _colorSpace: core_graphics.ColorSpaceRef,
        _options: ?*foundation.Dictionary(ImageRepresentationOption, ?objc.Id),
    ) ?*foundation.Data {
        return objc.msgSend(_self, "TIFFRepresentationOfImage:format:colorSpace:options:", ?*foundation.Data, .{
            _image,
            _format,
            _colorSpace,
            _options,
        });
    }

    pub fn jpegRepresentationOfImageColorSpaceOptions(_self: *@This(), _image: ?*Image, _colorSpace: core_graphics.ColorSpaceRef, _options: ?*foundation.Dictionary(ImageRepresentationOption, ?objc.Id)) ?*foundation.Data {
        return objc.msgSend(_self, "JPEGRepresentationOfImage:colorSpace:options:", ?*foundation.Data, .{ _image, _colorSpace, _options });
    }

    pub fn heifRepresentationOfImageFormatColorSpaceOptions(
        _self: *@This(),
        _image: ?*Image,
        _format: Image.Format,
        _colorSpace: core_graphics.ColorSpaceRef,
        _options: ?*foundation.Dictionary(ImageRepresentationOption, ?objc.Id),
    ) ?*foundation.Data {
        return objc.msgSend(_self, "HEIFRepresentationOfImage:format:colorSpace:options:", ?*foundation.Data, .{
            _image,
            _format,
            _colorSpace,
            _options,
        });
    }

    pub fn heif10RepresentationOfImageColorSpaceOptionsError(
        _self: *@This(),
        _image: ?*Image,
        _colorSpace: core_graphics.ColorSpaceRef,
        _options: ?*foundation.Dictionary(ImageRepresentationOption, ?objc.Id),
        _errorPtr: ?*?*foundation.Error,
    ) ?*foundation.Data {
        return objc.msgSend(_self, "HEIF10RepresentationOfImage:colorSpace:options:error:", ?*foundation.Data, .{
            _image,
            _colorSpace,
            _options,
            _errorPtr,
        });
    }

    pub fn pngRepresentationOfImageFormatColorSpaceOptions(
        _self: *@This(),
        _image: ?*Image,
        _format: Image.Format,
        _colorSpace: core_graphics.ColorSpaceRef,
        _options: ?*foundation.Dictionary(ImageRepresentationOption, ?objc.Id),
    ) ?*foundation.Data {
        return objc.msgSend(_self, "PNGRepresentationOfImage:format:colorSpace:options:", ?*foundation.Data, .{
            _image,
            _format,
            _colorSpace,
            _options,
        });
    }

    pub fn openEXRRepresentationOfImageOptionsError(_self: *@This(), _image: ?*Image, _options: ?*foundation.Dictionary(ImageRepresentationOption, ?objc.Id), _errorPtr: ?*?*foundation.Error) ?*foundation.Data {
        return objc.msgSend(_self, "OpenEXRRepresentationOfImage:options:error:", ?*foundation.Data, .{ _image, _options, _errorPtr });
    }

    pub fn depthBlurEffectFilterForImageURLOptions(_self: *@This(), _url: ?*foundation.URL, _options: ?*foundation.Dictionary) ?*Filter {
        return objc.msgSend(_self, "depthBlurEffectFilterForImageURL:options:", ?*Filter, .{ _url, _options });
    }

    pub fn depthBlurEffectFilterForImageDataOptions(_self: *@This(), _data: ?*foundation.Data, _options: ?*foundation.Dictionary) ?*Filter {
        return objc.msgSend(_self, "depthBlurEffectFilterForImageData:options:", ?*Filter, .{ _data, _options });
    }

    pub fn depthBlurEffectFilterForImageDisparityImagePortraitEffectsMatteOrientationOptions(
        _self: *@This(),
        _image: ?*Image,
        _disparityImage: ?*Image,
        _portraitEffectsMatte: ?*Image,
        _orientation: image_io.PropertyOrientation,
        _options: ?*foundation.Dictionary,
    ) ?*Filter {
        return objc.msgSend(_self, "depthBlurEffectFilterForImage:disparityImage:portraitEffectsMatte:orientation:options:", ?*Filter, .{
            _image,
            _disparityImage,
            _portraitEffectsMatte,
            _orientation,
            _options,
        });
    }

    pub fn depthBlurEffectFilterForImageDisparityImagePortraitEffectsMatteHairSemanticSegmentationOrientationOptions(
        _self: *@This(),
        _image: ?*Image,
        _disparityImage: ?*Image,
        _portraitEffectsMatte: ?*Image,
        _hairSemanticSegmentation: ?*Image,
        _orientation: image_io.PropertyOrientation,
        _options: ?*foundation.Dictionary,
    ) ?*Filter {
        return objc.msgSend(_self, "depthBlurEffectFilterForImage:disparityImage:portraitEffectsMatte:hairSemanticSegmentation:orientation:options:", ?*Filter, .{
            _image,
            _disparityImage,
            _portraitEffectsMatte,
            _hairSemanticSegmentation,
            _orientation,
            _options,
        });
    }

    pub fn depthBlurEffectFilterForImageDisparityImagePortraitEffectsMatteHairSemanticSegmentationGlassesMatteGainMapOrientationOptions(
        _self: *@This(),
        _image: ?*Image,
        _disparityImage: ?*Image,
        _portraitEffectsMatte: ?*Image,
        _hairSemanticSegmentation: ?*Image,
        _glassesMatte: ?*Image,
        _gainMap: ?*Image,
        _orientation: image_io.PropertyOrientation,
        _options: ?*foundation.Dictionary,
    ) ?*Filter {
        return objc.msgSend(_self, "depthBlurEffectFilterForImage:disparityImage:portraitEffectsMatte:hairSemanticSegmentation:glassesMatte:gainMap:orientation:options:", ?*Filter, .{
            _image,
            _disparityImage,
            _portraitEffectsMatte,
            _hairSemanticSegmentation,
            _glassesMatte,
            _gainMap,
            _orientation,
            _options,
        });
    }

    pub fn startTaskToRenderFromRectToDestinationAtPointError(
        _self: *@This(),
        _image: ?*Image,
        _fromRect: core_foundation.CGRect,
        _destination: ?*RenderDestination,
        _atPoint: core_foundation.CGPoint,
        _error: ?*?*foundation.Error,
    ) ?*RenderTask {
        return objc.msgSend(_self, "startTaskToRender:fromRect:toDestination:atPoint:error:", ?*RenderTask, .{
            _image,
            _fromRect,
            _destination,
            _atPoint,
            _error,
        });
    }

    pub fn startTaskToRenderToDestinationError(_self: *@This(), _image: ?*Image, _destination: ?*RenderDestination, _error: ?*?*foundation.Error) ?*RenderTask {
        return objc.msgSend(_self, "startTaskToRender:toDestination:error:", ?*RenderTask, .{ _image, _destination, _error });
    }

    pub fn startTaskToClearError(_self: *@This(), _destination: ?*RenderDestination, _error: ?*?*foundation.Error) ?*RenderTask {
        return objc.msgSend(_self, "startTaskToClear:error:", ?*RenderTask, .{ _destination, _error });
    }
};

pub const ImageRepresentationOption = ?*foundation.String;

/// https://developer.apple.com/documentation/CoreImage/CIFilterConstructor?language=objc
pub const FilterConstructor = opaque {
    pub const Internal = objc.ExternProtocol(@This(), &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;

    pub fn filterWithName(_self: *@This(), _name: ?*foundation.String) ?*Filter {
        return objc.msgSend(_self, "filterWithName:", ?*Filter, .{_name});
    }
};

/// https://developer.apple.com/documentation/CoreImage/CIFilter?language=objc
pub const Filter = opaque {
    pub const Internal = objc.ExternClass("CIFilter", @This(), objc.NSObject, &.{ foundation.SecureCoding, foundation.Copying });
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*foundation.Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*foundation.Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn supportsSecureCoding() objc.BOOL {
        return objc.msgSend(Internal.class(), "supportsSecureCoding", objc.BOOL, .{});
    }

    pub fn copyWithZone(_self: *@This(), _zone: ?*foundation.Zone) ?objc.Id {
        return objc.msgSend(_self, "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn name(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "name", ?*foundation.String, .{});
    }

    pub fn setName(_self: *@This(), _aString: ?*foundation.String) void {
        return objc.msgSend(_self, "setName:", void, .{_aString});
    }

    pub fn setDefaults(_self: *@This()) void {
        return objc.msgSend(_self, "setDefaults", void, .{});
    }

    pub fn applyArgumentsOptions(_self: *@This(), _k: ?*Kernel, _args: ?*foundation.Array, _dict: ?*foundation.Dictionary(?*foundation.String, ?objc.Id)) ?*Image {
        return objc.msgSend(_self, "apply:arguments:options:", ?*Image, .{ _k, _args, _dict });
    }

    pub fn apply(_self: *@This(), _k: ?*Kernel) ?*Image {
        return objc.msgSend(_self, "apply:", ?*Image, .{_k});
    }

    pub fn outputImage(_self: *@This()) ?*Image {
        return objc.msgSend(_self, "outputImage", ?*Image, .{});
    }

    pub fn isEnabled(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isEnabled", objc.BOOL, .{});
    }

    pub fn setEnabled(_self: *@This(), _enabled: objc.BOOL) void {
        return objc.msgSend(_self, "setEnabled:", void, .{_enabled});
    }

    pub fn inputKeys(_self: *@This()) ?*foundation.Array(?*foundation.String) {
        return objc.msgSend(_self, "inputKeys", ?*foundation.Array(?*foundation.String), .{});
    }

    pub fn outputKeys(_self: *@This()) ?*foundation.Array(?*foundation.String) {
        return objc.msgSend(_self, "outputKeys", ?*foundation.Array(?*foundation.String), .{});
    }

    pub fn attributes(_self: *@This()) ?*foundation.Dictionary(?*foundation.String, ?objc.Id) {
        return objc.msgSend(_self, "attributes", ?*foundation.Dictionary(?*foundation.String, ?objc.Id), .{});
    }

    pub fn filterWithName(_name: ?*foundation.String) ?*Filter {
        return objc.msgSend(Internal.class(), "filterWithName:", ?*Filter, .{_name});
    }

    pub fn filterWithNameKeysAndValues(_name: ?*foundation.String, _key0: ?objc.Id) ?*Filter {
        return objc.msgSend(Internal.class(), "filterWithName:keysAndValues:", ?*Filter, .{ _name, _key0 });
    }

    pub fn filterWithNameWithInputParameters(_name: ?*foundation.String, _params: ?*foundation.Dictionary(?*foundation.String, ?objc.Id)) ?*Filter {
        return objc.msgSend(Internal.class(), "filterWithName:withInputParameters:", ?*Filter, .{ _name, _params });
    }

    pub fn filterNamesInCategory(_category: ?*foundation.String) ?*foundation.Array(?*foundation.String) {
        return objc.msgSend(Internal.class(), "filterNamesInCategory:", ?*foundation.Array(?*foundation.String), .{_category});
    }

    pub fn filterNamesInCategories(_categories: ?*foundation.Array(?*foundation.String)) ?*foundation.Array(?*foundation.String) {
        return objc.msgSend(Internal.class(), "filterNamesInCategories:", ?*foundation.Array(?*foundation.String), .{_categories});
    }

    pub fn registerFilterNameConstructorClassAttributes(_name: ?*foundation.String, _anObject: ?*objc.id, _attributes: ?*foundation.Dictionary(?*foundation.String, ?objc.Id)) void {
        return objc.msgSend(Internal.class(), "registerFilterName:constructor:classAttributes:", void, .{ _name, _anObject, _attributes });
    }

    pub fn localizedNameForFilterName(_filterName: ?*foundation.String) ?*foundation.String {
        return objc.msgSend(Internal.class(), "localizedNameForFilterName:", ?*foundation.String, .{_filterName});
    }

    pub fn localizedNameForCategory(_category: ?*foundation.String) ?*foundation.String {
        return objc.msgSend(Internal.class(), "localizedNameForCategory:", ?*foundation.String, .{_category});
    }

    pub fn localizedDescriptionForFilterName(_filterName: ?*foundation.String) ?*foundation.String {
        return objc.msgSend(Internal.class(), "localizedDescriptionForFilterName:", ?*foundation.String, .{_filterName});
    }

    pub fn localizedReferenceDocumentationForFilterName(_filterName: ?*foundation.String) ?*foundation.URL {
        return objc.msgSend(Internal.class(), "localizedReferenceDocumentationForFilterName:", ?*foundation.URL, .{_filterName});
    }

    pub fn serializedXMPFromFiltersInputImageExtent(_filters: ?*foundation.Array(?*Filter), _extent: core_foundation.CGRect) ?*foundation.Data {
        return objc.msgSend(Internal.class(), "serializedXMPFromFilters:inputImageExtent:", ?*foundation.Data, .{ _filters, _extent });
    }

    pub fn filterArrayFromSerializedXMPInputImageExtentError(_xmpData: ?*foundation.Data, _extent: core_foundation.CGRect, _outError: ?*?*foundation.Error) ?*foundation.Array(?*Filter) {
        return objc.msgSend(Internal.class(), "filterArrayFromSerializedXMP:inputImageExtent:error:", ?*foundation.Array(?*Filter), .{ _xmpData, _extent, _outError });
    }

    pub fn filterWithImageURLOptions(_url: ?*foundation.URL, _options: ?*foundation.Dictionary(RAWFilterOption, ?objc.Id)) ?*Filter {
        return objc.msgSend(Internal.class(), "filterWithImageURL:options:", ?*Filter, .{ _url, _options });
    }

    pub fn filterWithImageDataOptions(_data: ?*foundation.Data, _options: ?*foundation.Dictionary(RAWFilterOption, ?objc.Id)) ?*Filter {
        return objc.msgSend(Internal.class(), "filterWithImageData:options:", ?*Filter, .{ _data, _options });
    }

    pub fn filterWithCVPixelBufferPropertiesOptions(_pixelBuffer: core_video.PixelBufferRef, _properties: ?*foundation.Dictionary, _options: ?*foundation.Dictionary(RAWFilterOption, ?objc.Id)) ?*Filter {
        return objc.msgSend(Internal.class(), "filterWithCVPixelBuffer:properties:options:", ?*Filter, .{ _pixelBuffer, _properties, _options });
    }

    pub fn supportedRawCameraModels() ?*foundation.Array(?*foundation.String) {
        return objc.msgSend(Internal.class(), "supportedRawCameraModels", ?*foundation.Array(?*foundation.String), .{});
    }
};

pub const KernelROICallback = core_foundation.CGRect;

/// https://developer.apple.com/documentation/CoreImage/CIKernel?language=objc
pub const Kernel = opaque {
    pub const Internal = objc.ExternClass("CIKernel", @This(), objc.NSObject, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn kernelsWithString(_string: ?*foundation.String) ?*foundation.Array(?*Kernel) {
        return objc.msgSend(Internal.class(), "kernelsWithString:", ?*foundation.Array(?*Kernel), .{_string});
    }

    pub fn kernelsWithMetalStringError(_source: ?*foundation.String, _error: ?*?*foundation.Error) ?*foundation.Array(?*Kernel) {
        return objc.msgSend(Internal.class(), "kernelsWithMetalString:error:", ?*foundation.Array(?*Kernel), .{ _source, _error });
    }

    pub fn kernelWithString(_string: ?*foundation.String) *@This() {
        return objc.msgSend(Internal.class(), "kernelWithString:", *@This(), .{_string});
    }

    pub fn kernelWithFunctionNameFromMetalLibraryDataError(_name: ?*foundation.String, _data: ?*foundation.Data, _error: ?*?*foundation.Error) *@This() {
        return objc.msgSend(Internal.class(), "kernelWithFunctionName:fromMetalLibraryData:error:", *@This(), .{ _name, _data, _error });
    }

    pub fn kernelWithFunctionNameFromMetalLibraryDataOutputPixelFormatError(
        _name: ?*foundation.String,
        _data: ?*foundation.Data,
        _format: Image.Format,
        _error: ?*?*foundation.Error,
    ) *@This() {
        return objc.msgSend(Internal.class(), "kernelWithFunctionName:fromMetalLibraryData:outputPixelFormat:error:", *@This(), .{
            _name,
            _data,
            _format,
            _error,
        });
    }

    pub fn kernelNamesFromMetalLibraryData(_data: ?*foundation.Data) ?*foundation.Array(?*foundation.String) {
        return objc.msgSend(Internal.class(), "kernelNamesFromMetalLibraryData:", ?*foundation.Array(?*foundation.String), .{_data});
    }

    pub fn setROISelector(_self: *@This(), _method: objc.Selector) void {
        return objc.msgSend(_self, "setROISelector:", void, .{_method});
    }

    pub fn applyWithExtentRoiCallbackArguments(_self: *@This(), _extent: core_foundation.CGRect, _callback: KernelROICallback, _args: ?*foundation.Array(?objc.Id)) ?*Image {
        return objc.msgSend(_self, "applyWithExtent:roiCallback:arguments:", ?*Image, .{ _extent, _callback, _args });
    }

    pub fn name(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "name", ?*foundation.String, .{});
    }
};

/// https://developer.apple.com/documentation/CoreImage/CIColorKernel?language=objc
pub const ColorKernel = opaque {
    pub const Internal = objc.ExternClass("CIColorKernel", @This(), Kernel, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn kernelWithString(_string: ?*foundation.String) *@This() {
        return objc.msgSend(Internal.class(), "kernelWithString:", *@This(), .{_string});
    }

    pub fn applyWithExtentArguments(_self: *@This(), _extent: core_foundation.CGRect, _args: ?*foundation.Array(?objc.Id)) ?*Image {
        return objc.msgSend(_self, "applyWithExtent:arguments:", ?*Image, .{ _extent, _args });
    }
};

/// https://developer.apple.com/documentation/CoreImage/CIWarpKernel?language=objc
pub const WarpKernel = opaque {
    pub const Internal = objc.ExternClass("CIWarpKernel", @This(), Kernel, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn kernelWithString(_string: ?*foundation.String) *@This() {
        return objc.msgSend(Internal.class(), "kernelWithString:", *@This(), .{_string});
    }

    pub fn applyWithExtentRoiCallbackInputImageArguments(
        _self: *@This(),
        _extent: core_foundation.CGRect,
        _callback: KernelROICallback,
        _image: ?*Image,
        _args: ?*foundation.Array(?objc.Id),
    ) ?*Image {
        return objc.msgSend(_self, "applyWithExtent:roiCallback:inputImage:arguments:", ?*Image, .{
            _extent,
            _callback,
            _image,
            _args,
        });
    }
};

/// https://developer.apple.com/documentation/CoreImage/CIBlendKernel?language=objc
pub const BlendKernel = opaque {
    pub const Internal = objc.ExternClass("CIBlendKernel", @This(), ColorKernel, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn kernelWithString(_string: ?*foundation.String) *@This() {
        return objc.msgSend(Internal.class(), "kernelWithString:", *@This(), .{_string});
    }

    pub fn applyWithForegroundBackground(_self: *@This(), _foreground: ?*Image, _background: ?*Image) ?*Image {
        return objc.msgSend(_self, "applyWithForeground:background:", ?*Image, .{ _foreground, _background });
    }

    pub fn applyWithForegroundBackgroundColorSpace(_self: *@This(), _foreground: ?*Image, _background: ?*Image, _colorSpace: core_graphics.ColorSpaceRef) ?*Image {
        return objc.msgSend(_self, "applyWithForeground:background:colorSpace:", ?*Image, .{ _foreground, _background, _colorSpace });
    }

    pub fn componentAdd() ?*BlendKernel {
        return objc.msgSend(Internal.class(), "componentAdd", ?*BlendKernel, .{});
    }

    pub fn componentMultiply() ?*BlendKernel {
        return objc.msgSend(Internal.class(), "componentMultiply", ?*BlendKernel, .{});
    }

    pub fn componentMin() ?*BlendKernel {
        return objc.msgSend(Internal.class(), "componentMin", ?*BlendKernel, .{});
    }

    pub fn componentMax() ?*BlendKernel {
        return objc.msgSend(Internal.class(), "componentMax", ?*BlendKernel, .{});
    }

    pub fn clear() ?*BlendKernel {
        return objc.msgSend(Internal.class(), "clear", ?*BlendKernel, .{});
    }

    pub fn source() ?*BlendKernel {
        return objc.msgSend(Internal.class(), "source", ?*BlendKernel, .{});
    }

    pub fn destination() ?*BlendKernel {
        return objc.msgSend(Internal.class(), "destination", ?*BlendKernel, .{});
    }

    pub fn sourceOver() ?*BlendKernel {
        return objc.msgSend(Internal.class(), "sourceOver", ?*BlendKernel, .{});
    }

    pub fn destinationOver() ?*BlendKernel {
        return objc.msgSend(Internal.class(), "destinationOver", ?*BlendKernel, .{});
    }

    pub fn sourceIn() ?*BlendKernel {
        return objc.msgSend(Internal.class(), "sourceIn", ?*BlendKernel, .{});
    }

    pub fn destinationIn() ?*BlendKernel {
        return objc.msgSend(Internal.class(), "destinationIn", ?*BlendKernel, .{});
    }

    pub fn sourceOut() ?*BlendKernel {
        return objc.msgSend(Internal.class(), "sourceOut", ?*BlendKernel, .{});
    }

    pub fn destinationOut() ?*BlendKernel {
        return objc.msgSend(Internal.class(), "destinationOut", ?*BlendKernel, .{});
    }

    pub fn sourceAtop() ?*BlendKernel {
        return objc.msgSend(Internal.class(), "sourceAtop", ?*BlendKernel, .{});
    }

    pub fn destinationAtop() ?*BlendKernel {
        return objc.msgSend(Internal.class(), "destinationAtop", ?*BlendKernel, .{});
    }

    pub fn exclusiveOr() ?*BlendKernel {
        return objc.msgSend(Internal.class(), "exclusiveOr", ?*BlendKernel, .{});
    }

    pub fn multiply() ?*BlendKernel {
        return objc.msgSend(Internal.class(), "multiply", ?*BlendKernel, .{});
    }

    pub fn screen() ?*BlendKernel {
        return objc.msgSend(Internal.class(), "screen", ?*BlendKernel, .{});
    }

    pub fn overlay() ?*BlendKernel {
        return objc.msgSend(Internal.class(), "overlay", ?*BlendKernel, .{});
    }

    pub fn darken() ?*BlendKernel {
        return objc.msgSend(Internal.class(), "darken", ?*BlendKernel, .{});
    }

    pub fn lighten() ?*BlendKernel {
        return objc.msgSend(Internal.class(), "lighten", ?*BlendKernel, .{});
    }

    pub fn colorDodge() ?*BlendKernel {
        return objc.msgSend(Internal.class(), "colorDodge", ?*BlendKernel, .{});
    }

    pub fn colorBurn() ?*BlendKernel {
        return objc.msgSend(Internal.class(), "colorBurn", ?*BlendKernel, .{});
    }

    pub fn hardLight() ?*BlendKernel {
        return objc.msgSend(Internal.class(), "hardLight", ?*BlendKernel, .{});
    }

    pub fn softLight() ?*BlendKernel {
        return objc.msgSend(Internal.class(), "softLight", ?*BlendKernel, .{});
    }

    pub fn difference() ?*BlendKernel {
        return objc.msgSend(Internal.class(), "difference", ?*BlendKernel, .{});
    }

    pub fn exclusion() ?*BlendKernel {
        return objc.msgSend(Internal.class(), "exclusion", ?*BlendKernel, .{});
    }

    pub fn hue() ?*BlendKernel {
        return objc.msgSend(Internal.class(), "hue", ?*BlendKernel, .{});
    }

    pub fn saturation() ?*BlendKernel {
        return objc.msgSend(Internal.class(), "saturation", ?*BlendKernel, .{});
    }

    pub fn color() ?*BlendKernel {
        return objc.msgSend(Internal.class(), "color", ?*BlendKernel, .{});
    }

    pub fn luminosity() ?*BlendKernel {
        return objc.msgSend(Internal.class(), "luminosity", ?*BlendKernel, .{});
    }

    pub fn subtract() ?*BlendKernel {
        return objc.msgSend(Internal.class(), "subtract", ?*BlendKernel, .{});
    }

    pub fn divide() ?*BlendKernel {
        return objc.msgSend(Internal.class(), "divide", ?*BlendKernel, .{});
    }

    pub fn linearBurn() ?*BlendKernel {
        return objc.msgSend(Internal.class(), "linearBurn", ?*BlendKernel, .{});
    }

    pub fn linearDodge() ?*BlendKernel {
        return objc.msgSend(Internal.class(), "linearDodge", ?*BlendKernel, .{});
    }

    pub fn vividLight() ?*BlendKernel {
        return objc.msgSend(Internal.class(), "vividLight", ?*BlendKernel, .{});
    }

    pub fn linearLight() ?*BlendKernel {
        return objc.msgSend(Internal.class(), "linearLight", ?*BlendKernel, .{});
    }

    pub fn pinLight() ?*BlendKernel {
        return objc.msgSend(Internal.class(), "pinLight", ?*BlendKernel, .{});
    }

    pub fn hardMix() ?*BlendKernel {
        return objc.msgSend(Internal.class(), "hardMix", ?*BlendKernel, .{});
    }

    pub fn darkerColor() ?*BlendKernel {
        return objc.msgSend(Internal.class(), "darkerColor", ?*BlendKernel, .{});
    }

    pub fn lighterColor() ?*BlendKernel {
        return objc.msgSend(Internal.class(), "lighterColor", ?*BlendKernel, .{});
    }
};

/// https://developer.apple.com/documentation/CoreImage/CIDetector?language=objc
pub const Detector = opaque {
    pub const Internal = objc.ExternClass("CIDetector", @This(), objc.NSObject, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn detectorOfTypeContextOptions(_type: ?*foundation.String, _context: ?*Context, _options: ?*foundation.Dictionary(?*foundation.String, ?objc.Id)) ?*Detector {
        return objc.msgSend(Internal.class(), "detectorOfType:context:options:", ?*Detector, .{ _type, _context, _options });
    }

    pub fn featuresInImage(_self: *@This(), _image: ?*Image) ?*foundation.Array(?*Feature) {
        return objc.msgSend(_self, "featuresInImage:", ?*foundation.Array(?*Feature), .{_image});
    }

    pub fn featuresInImageOptions(_self: *@This(), _image: ?*Image, _options: ?*foundation.Dictionary(?*foundation.String, ?objc.Id)) ?*foundation.Array(?*Feature) {
        return objc.msgSend(_self, "featuresInImage:options:", ?*foundation.Array(?*Feature), .{ _image, _options });
    }
};

/// https://developer.apple.com/documentation/CoreImage/CIFeature?language=objc
pub const Feature = opaque {
    pub const Internal = objc.ExternClass("CIFeature", @This(), objc.NSObject, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn @"type"(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "type", ?*foundation.String, .{});
    }

    pub fn bounds(_self: *@This()) core_foundation.CGRect {
        return objc.msgSend(_self, "bounds", core_foundation.CGRect, .{});
    }
};

/// https://developer.apple.com/documentation/CoreImage/CIFaceFeature?language=objc
pub const FaceFeature = opaque {
    pub const Internal = objc.ExternClass("CIFaceFeature", @This(), Feature, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;
};

/// https://developer.apple.com/documentation/CoreImage/CIRectangleFeature?language=objc
pub const RectangleFeature = opaque {
    pub const Internal = objc.ExternClass("CIRectangleFeature", @This(), Feature, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn bounds(_self: *@This()) core_foundation.CGRect {
        return objc.msgSend(_self, "bounds", core_foundation.CGRect, .{});
    }

    pub fn topLeft(_self: *@This()) core_foundation.CGPoint {
        return objc.msgSend(_self, "topLeft", core_foundation.CGPoint, .{});
    }

    pub fn topRight(_self: *@This()) core_foundation.CGPoint {
        return objc.msgSend(_self, "topRight", core_foundation.CGPoint, .{});
    }

    pub fn bottomLeft(_self: *@This()) core_foundation.CGPoint {
        return objc.msgSend(_self, "bottomLeft", core_foundation.CGPoint, .{});
    }

    pub fn bottomRight(_self: *@This()) core_foundation.CGPoint {
        return objc.msgSend(_self, "bottomRight", core_foundation.CGPoint, .{});
    }
};

/// https://developer.apple.com/documentation/CoreImage/CIQRCodeFeature?language=objc
pub const QRCodeFeature = opaque {
    pub const Internal = objc.ExternClass("CIQRCodeFeature", @This(), Feature, &.{ foundation.SecureCoding, foundation.Copying });
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*foundation.Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*foundation.Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn supportsSecureCoding() objc.BOOL {
        return objc.msgSend(Internal.class(), "supportsSecureCoding", objc.BOOL, .{});
    }

    pub fn copyWithZone(_self: *@This(), _zone: ?*foundation.Zone) ?objc.Id {
        return objc.msgSend(_self, "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn bounds(_self: *@This()) core_foundation.CGRect {
        return objc.msgSend(_self, "bounds", core_foundation.CGRect, .{});
    }

    pub fn topLeft(_self: *@This()) core_foundation.CGPoint {
        return objc.msgSend(_self, "topLeft", core_foundation.CGPoint, .{});
    }

    pub fn topRight(_self: *@This()) core_foundation.CGPoint {
        return objc.msgSend(_self, "topRight", core_foundation.CGPoint, .{});
    }

    pub fn bottomLeft(_self: *@This()) core_foundation.CGPoint {
        return objc.msgSend(_self, "bottomLeft", core_foundation.CGPoint, .{});
    }

    pub fn bottomRight(_self: *@This()) core_foundation.CGPoint {
        return objc.msgSend(_self, "bottomRight", core_foundation.CGPoint, .{});
    }

    pub fn messageString(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "messageString", ?*foundation.String, .{});
    }

    pub fn symbolDescriptor(_self: *@This()) ?*QRCodeDescriptor {
        return objc.msgSend(_self, "symbolDescriptor", ?*QRCodeDescriptor, .{});
    }
};

/// https://developer.apple.com/documentation/CoreImage/CITextFeature?language=objc
pub const TextFeature = opaque {
    pub const Internal = objc.ExternClass("CITextFeature", @This(), Feature, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn bounds(_self: *@This()) core_foundation.CGRect {
        return objc.msgSend(_self, "bounds", core_foundation.CGRect, .{});
    }

    pub fn topLeft(_self: *@This()) core_foundation.CGPoint {
        return objc.msgSend(_self, "topLeft", core_foundation.CGPoint, .{});
    }

    pub fn topRight(_self: *@This()) core_foundation.CGPoint {
        return objc.msgSend(_self, "topRight", core_foundation.CGPoint, .{});
    }

    pub fn bottomLeft(_self: *@This()) core_foundation.CGPoint {
        return objc.msgSend(_self, "bottomLeft", core_foundation.CGPoint, .{});
    }

    pub fn bottomRight(_self: *@This()) core_foundation.CGPoint {
        return objc.msgSend(_self, "bottomRight", core_foundation.CGPoint, .{});
    }

    pub fn subFeatures(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "subFeatures", ?*foundation.Array, .{});
    }
};

/// https://developer.apple.com/documentation/CoreImage/CIImageProcessorKernel?language=objc
pub const ImageProcessorKernel = opaque {
    pub const Internal = objc.ExternClass("CIImageProcessorKernel", @This(), objc.NSObject, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn roiForInputArgumentsOutputRect(_input: i32, _arguments: ?*foundation.Dictionary(?*foundation.String, ?objc.Id), _outputRect: core_foundation.CGRect) core_foundation.CGRect {
        return objc.msgSend(Internal.class(), "roiForInput:arguments:outputRect:", core_foundation.CGRect, .{ _input, _arguments, _outputRect });
    }

    pub fn roiTileArrayForInputArgumentsOutputRect(_input: i32, _arguments: ?*foundation.Dictionary(?*foundation.String, ?objc.Id), _outputRect: core_foundation.CGRect) ?*foundation.Array(?*Vector) {
        return objc.msgSend(Internal.class(), "roiTileArrayForInput:arguments:outputRect:", ?*foundation.Array(?*Vector), .{ _input, _arguments, _outputRect });
    }

    pub fn formatForInputAtIndex(_input: i32) Image.Format {
        return objc.msgSend(Internal.class(), "formatForInputAtIndex:", Image.Format, .{_input});
    }

    pub fn applyWithExtentInputsArgumentsError(
        _extent: core_foundation.CGRect,
        _inputs: ?*foundation.Array(?*Image),
        _args: ?*foundation.Dictionary(?*foundation.String, ?objc.Id),
        _error: ?*?*foundation.Error,
    ) ?*Image {
        return objc.msgSend(Internal.class(), "applyWithExtent:inputs:arguments:error:", ?*Image, .{
            _extent,
            _inputs,
            _args,
            _error,
        });
    }

    pub fn outputFormat() Image.Format {
        return objc.msgSend(Internal.class(), "outputFormat", Image.Format, .{});
    }

    pub fn outputIsOpaque() core_graphics.bool {
        return objc.msgSend(Internal.class(), "outputIsOpaque", core_graphics.bool, .{});
    }

    pub fn synchronizeInputs() core_graphics.bool {
        return objc.msgSend(Internal.class(), "synchronizeInputs", core_graphics.bool, .{});
    }
};

/// https://developer.apple.com/documentation/CoreImage/CIImageProcessorInput?language=objc
pub const ImageProcessorInput = opaque {
    pub const Internal = objc.ExternProtocol(@This(), &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;

    pub fn region(_self: *@This()) core_foundation.CGRect {
        return objc.msgSend(_self, "region", core_foundation.CGRect, .{});
    }

    pub fn bytesPerRow(_self: *@This()) objc.size_t {
        return objc.msgSend(_self, "bytesPerRow", objc.size_t, .{});
    }

    pub fn format(_self: *@This()) Image.Format {
        return objc.msgSend(_self, "format", Image.Format, .{});
    }

    pub fn baseAddress(_self: *@This()) ?*const anyopaque {
        return objc.msgSend(_self, "baseAddress", ?*const anyopaque, .{});
    }

    pub fn surface(_self: *@This()) core_graphics.IOSurfaceRef {
        return objc.msgSend(_self, "surface", core_graphics.IOSurfaceRef, .{});
    }

    pub fn pixelBuffer(_self: *@This()) core_video.PixelBufferRef {
        return objc.msgSend(_self, "pixelBuffer", core_video.PixelBufferRef, .{});
    }

    pub fn metalTexture(_self: *@This()) ?*objc.id {
        return objc.msgSend(_self, "metalTexture", ?*objc.id, .{});
    }

    pub fn digest(_self: *@This()) objc.uint64_t {
        return objc.msgSend(_self, "digest", objc.uint64_t, .{});
    }

    pub fn roiTileIndex(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "roiTileIndex", objc.NSUInteger, .{});
    }

    pub fn roiTileCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "roiTileCount", objc.NSUInteger, .{});
    }
};

/// https://developer.apple.com/documentation/CoreImage/CIImageProcessorOutput?language=objc
pub const ImageProcessorOutput = opaque {
    pub const Internal = objc.ExternProtocol(@This(), &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;

    pub fn region(_self: *@This()) core_foundation.CGRect {
        return objc.msgSend(_self, "region", core_foundation.CGRect, .{});
    }

    pub fn bytesPerRow(_self: *@This()) objc.size_t {
        return objc.msgSend(_self, "bytesPerRow", objc.size_t, .{});
    }

    pub fn format(_self: *@This()) Image.Format {
        return objc.msgSend(_self, "format", Image.Format, .{});
    }

    pub fn baseAddress(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "baseAddress", ?*anyopaque, .{});
    }

    pub fn surface(_self: *@This()) core_graphics.IOSurfaceRef {
        return objc.msgSend(_self, "surface", core_graphics.IOSurfaceRef, .{});
    }

    pub fn pixelBuffer(_self: *@This()) core_video.PixelBufferRef {
        return objc.msgSend(_self, "pixelBuffer", core_video.PixelBufferRef, .{});
    }

    pub fn metalTexture(_self: *@This()) ?*objc.id {
        return objc.msgSend(_self, "metalTexture", ?*objc.id, .{});
    }

    pub fn metalCommandBuffer(_self: *@This()) ?*objc.id {
        return objc.msgSend(_self, "metalCommandBuffer", ?*objc.id, .{});
    }

    pub fn digest(_self: *@This()) objc.uint64_t {
        return objc.msgSend(_self, "digest", objc.uint64_t, .{});
    }
};

/// https://developer.apple.com/documentation/CoreImage/CIImageAccumulator?language=objc
pub const ImageAccumulator = opaque {
    pub const Internal = objc.ExternClass("CIImageAccumulator", @This(), objc.NSObject, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn imageAccumulatorWithExtentFormat(_extent: core_foundation.CGRect, _format: Image.Format) *@This() {
        return objc.msgSend(Internal.class(), "imageAccumulatorWithExtent:format:", *@This(), .{ _extent, _format });
    }

    pub fn imageAccumulatorWithExtentFormatColorSpace(_extent: core_foundation.CGRect, _format: Image.Format, _colorSpace: core_graphics.ColorSpaceRef) *@This() {
        return objc.msgSend(Internal.class(), "imageAccumulatorWithExtent:format:colorSpace:", *@This(), .{ _extent, _format, _colorSpace });
    }

    pub fn initWithExtentFormat(_self: *@This(), _extent: core_foundation.CGRect, _format: Image.Format) *@This() {
        return objc.msgSend(_self, "initWithExtent:format:", *@This(), .{ _extent, _format });
    }

    pub fn initWithExtentFormatColorSpace(_self: *@This(), _extent: core_foundation.CGRect, _format: Image.Format, _colorSpace: core_graphics.ColorSpaceRef) *@This() {
        return objc.msgSend(_self, "initWithExtent:format:colorSpace:", *@This(), .{ _extent, _format, _colorSpace });
    }

    pub fn image(_self: *@This()) ?*Image {
        return objc.msgSend(_self, "image", ?*Image, .{});
    }

    pub fn setImage(_self: *@This(), _image: ?*Image) void {
        return objc.msgSend(_self, "setImage:", void, .{_image});
    }

    pub fn setImageDirtyRect(_self: *@This(), _image: ?*Image, _dirtyRect: core_foundation.CGRect) void {
        return objc.msgSend(_self, "setImage:dirtyRect:", void, .{ _image, _dirtyRect });
    }

    pub fn clear(_self: *@This()) void {
        return objc.msgSend(_self, "clear", void, .{});
    }

    pub fn extent(_self: *@This()) core_foundation.CGRect {
        return objc.msgSend(_self, "extent", core_foundation.CGRect, .{});
    }

    pub fn format(_self: *@This()) Image.Format {
        return objc.msgSend(_self, "format", Image.Format, .{});
    }
};

/// https://developer.apple.com/documentation/CoreImage/CIFilterShape?language=objc
pub const FilterShape = opaque {
    pub const Internal = objc.ExternClass("CIFilterShape", @This(), objc.NSObject, &.{foundation.Copying});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn copyWithZone(_self: *@This(), _zone: ?*foundation.Zone) ?objc.Id {
        return objc.msgSend(_self, "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn shapeWithRect(_r: core_foundation.CGRect) *@This() {
        return objc.msgSend(Internal.class(), "shapeWithRect:", *@This(), .{_r});
    }

    pub fn initWithRect(_self: *@This(), _r: core_foundation.CGRect) *@This() {
        return objc.msgSend(_self, "initWithRect:", *@This(), .{_r});
    }

    pub fn transformByInterior(_self: *@This(), _m: core_foundation.CGAffineTransform, _flag: objc.BOOL) ?*FilterShape {
        return objc.msgSend(_self, "transformBy:interior:", ?*FilterShape, .{ _m, _flag });
    }

    pub fn insetByXY(_self: *@This(), _dx: i32, _dy: i32) ?*FilterShape {
        return objc.msgSend(_self, "insetByX:Y:", ?*FilterShape, .{ _dx, _dy });
    }

    pub fn unionWith(_self: *@This(), _s2: ?*FilterShape) ?*FilterShape {
        return objc.msgSend(_self, "unionWith:", ?*FilterShape, .{_s2});
    }

    pub fn unionWithRect(_self: *@This(), _r: core_foundation.CGRect) ?*FilterShape {
        return objc.msgSend(_self, "unionWithRect:", ?*FilterShape, .{_r});
    }

    pub fn intersectWith(_self: *@This(), _s2: ?*FilterShape) ?*FilterShape {
        return objc.msgSend(_self, "intersectWith:", ?*FilterShape, .{_s2});
    }

    pub fn intersectWithRect(_self: *@This(), _r: core_foundation.CGRect) ?*FilterShape {
        return objc.msgSend(_self, "intersectWithRect:", ?*FilterShape, .{_r});
    }

    pub fn extent(_self: *@This()) core_foundation.CGRect {
        return objc.msgSend(_self, "extent", core_foundation.CGRect, .{});
    }
};

/// https://developer.apple.com/documentation/CoreImage/CISampler?language=objc
pub const Sampler = opaque {
    pub const Internal = objc.ExternClass("CISampler", @This(), objc.NSObject, &.{foundation.Copying});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn copyWithZone(_self: *@This(), _zone: ?*foundation.Zone) ?objc.Id {
        return objc.msgSend(_self, "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn samplerWithImage(_im: ?*Image) *@This() {
        return objc.msgSend(Internal.class(), "samplerWithImage:", *@This(), .{_im});
    }

    pub fn samplerWithImageKeysAndValues(_im: ?*Image, _key0: ?objc.Id) *@This() {
        return objc.msgSend(Internal.class(), "samplerWithImage:keysAndValues:", *@This(), .{ _im, _key0 });
    }

    pub fn samplerWithImageOptions(_im: ?*Image, _dict: ?*foundation.Dictionary) *@This() {
        return objc.msgSend(Internal.class(), "samplerWithImage:options:", *@This(), .{ _im, _dict });
    }

    pub fn initWithImage(_self: *@This(), _im: ?*Image) *@This() {
        return objc.msgSend(_self, "initWithImage:", *@This(), .{_im});
    }

    pub fn initWithImageKeysAndValues(_self: *@This(), _im: ?*Image, _key0: ?objc.Id) *@This() {
        return objc.msgSend(_self, "initWithImage:keysAndValues:", *@This(), .{ _im, _key0 });
    }

    pub fn initWithImageOptions(_self: *@This(), _im: ?*Image, _dict: ?*foundation.Dictionary) *@This() {
        return objc.msgSend(_self, "initWithImage:options:", *@This(), .{ _im, _dict });
    }

    pub fn definition(_self: *@This()) ?*FilterShape {
        return objc.msgSend(_self, "definition", ?*FilterShape, .{});
    }

    pub fn extent(_self: *@This()) core_foundation.CGRect {
        return objc.msgSend(_self, "extent", core_foundation.CGRect, .{});
    }
};

pub const RAWFilterOption = ?*foundation.String;

/// https://developer.apple.com/documentation/CoreImage/CIRAWFilter?language=objc
pub const RAWFilter = opaque {
    pub const RAWDecoderVersion = ?*foundation.String;

    pub const Internal = objc.ExternClass("CIRAWFilter", @This(), Filter, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn supportedCameraModels() ?*foundation.Array(?*foundation.String) {
        return objc.msgSend(Internal.class(), "supportedCameraModels", ?*foundation.Array(?*foundation.String), .{});
    }

    pub fn supportedDecoderVersions(_self: *@This()) ?*foundation.Array(RAWFilter.RAWDecoderVersion) {
        return objc.msgSend(_self, "supportedDecoderVersions", ?*foundation.Array(RAWFilter.RAWDecoderVersion), .{});
    }

    pub fn nativeSize(_self: *@This()) core_foundation.CGSize {
        return objc.msgSend(_self, "nativeSize", core_foundation.CGSize, .{});
    }

    pub fn properties(_self: *@This()) ?*foundation.Dictionary {
        return objc.msgSend(_self, "properties", ?*foundation.Dictionary, .{});
    }

    pub fn setOrientation(_self: *@This(), _orientation: image_io.PropertyOrientation) void {
        return objc.msgSend(_self, "setOrientation:", void, .{_orientation});
    }

    pub fn orientation(_self: *@This()) image_io.PropertyOrientation {
        return objc.msgSend(_self, "orientation", image_io.PropertyOrientation, .{});
    }

    pub fn isDraftModeEnabled(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isDraftModeEnabled", objc.BOOL, .{});
    }

    pub fn setDraftModeEnabled(_self: *@This(), _draftModeEnabled: objc.BOOL) void {
        return objc.msgSend(_self, "setDraftModeEnabled:", void, .{_draftModeEnabled});
    }

    pub fn setDecoderVersion(_self: *@This(), _decoderVersion: RAWFilter.RAWDecoderVersion) void {
        return objc.msgSend(_self, "setDecoderVersion:", void, .{_decoderVersion});
    }

    pub fn decoderVersion(_self: *@This()) RAWFilter.RAWDecoderVersion {
        return objc.msgSend(_self, "decoderVersion", RAWFilter.RAWDecoderVersion, .{});
    }

    pub fn setScaleFactor(_self: *@This(), _scaleFactor: f32) void {
        return objc.msgSend(_self, "setScaleFactor:", void, .{_scaleFactor});
    }

    pub fn scaleFactor(_self: *@This()) f32 {
        return objc.msgSend(_self, "scaleFactor", f32, .{});
    }

    pub fn setExposure(_self: *@This(), _exposure: f32) void {
        return objc.msgSend(_self, "setExposure:", void, .{_exposure});
    }

    pub fn exposure(_self: *@This()) f32 {
        return objc.msgSend(_self, "exposure", f32, .{});
    }

    pub fn setBaselineExposure(_self: *@This(), _baselineExposure: f32) void {
        return objc.msgSend(_self, "setBaselineExposure:", void, .{_baselineExposure});
    }

    pub fn baselineExposure(_self: *@This()) f32 {
        return objc.msgSend(_self, "baselineExposure", f32, .{});
    }

    pub fn setShadowBias(_self: *@This(), _shadowBias: f32) void {
        return objc.msgSend(_self, "setShadowBias:", void, .{_shadowBias});
    }

    pub fn shadowBias(_self: *@This()) f32 {
        return objc.msgSend(_self, "shadowBias", f32, .{});
    }

    pub fn setBoostAmount(_self: *@This(), _boostAmount: f32) void {
        return objc.msgSend(_self, "setBoostAmount:", void, .{_boostAmount});
    }

    pub fn boostAmount(_self: *@This()) f32 {
        return objc.msgSend(_self, "boostAmount", f32, .{});
    }

    pub fn setBoostShadowAmount(_self: *@This(), _boostShadowAmount: f32) void {
        return objc.msgSend(_self, "setBoostShadowAmount:", void, .{_boostShadowAmount});
    }

    pub fn boostShadowAmount(_self: *@This()) f32 {
        return objc.msgSend(_self, "boostShadowAmount", f32, .{});
    }

    pub fn setGamutMappingEnabled(_self: *@This(), _gamutMappingEnabled: objc.BOOL) void {
        return objc.msgSend(_self, "setGamutMappingEnabled:", void, .{_gamutMappingEnabled});
    }

    pub fn isGamutMappingEnabled(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isGamutMappingEnabled", objc.BOOL, .{});
    }

    pub fn isLensCorrectionSupported(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isLensCorrectionSupported", objc.BOOL, .{});
    }

    pub fn setLensCorrectionEnabled(_self: *@This(), _lensCorrectionEnabled: objc.BOOL) void {
        return objc.msgSend(_self, "setLensCorrectionEnabled:", void, .{_lensCorrectionEnabled});
    }

    pub fn isLensCorrectionEnabled(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isLensCorrectionEnabled", objc.BOOL, .{});
    }

    pub fn isLuminanceNoiseReductionSupported(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isLuminanceNoiseReductionSupported", objc.BOOL, .{});
    }

    pub fn setLuminanceNoiseReductionAmount(_self: *@This(), _luminanceNoiseReductionAmount: f32) void {
        return objc.msgSend(_self, "setLuminanceNoiseReductionAmount:", void, .{_luminanceNoiseReductionAmount});
    }

    pub fn luminanceNoiseReductionAmount(_self: *@This()) f32 {
        return objc.msgSend(_self, "luminanceNoiseReductionAmount", f32, .{});
    }

    pub fn isColorNoiseReductionSupported(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isColorNoiseReductionSupported", objc.BOOL, .{});
    }

    pub fn setColorNoiseReductionAmount(_self: *@This(), _colorNoiseReductionAmount: f32) void {
        return objc.msgSend(_self, "setColorNoiseReductionAmount:", void, .{_colorNoiseReductionAmount});
    }

    pub fn colorNoiseReductionAmount(_self: *@This()) f32 {
        return objc.msgSend(_self, "colorNoiseReductionAmount", f32, .{});
    }

    pub fn isSharpnessSupported(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isSharpnessSupported", objc.BOOL, .{});
    }

    pub fn sharpnessAmount(_self: *@This()) f32 {
        return objc.msgSend(_self, "sharpnessAmount", f32, .{});
    }

    pub fn setSharpnessAmount(_self: *@This(), _sharpnessAmount: f32) void {
        return objc.msgSend(_self, "setSharpnessAmount:", void, .{_sharpnessAmount});
    }

    pub fn isContrastSupported(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isContrastSupported", objc.BOOL, .{});
    }

    pub fn setContrastAmount(_self: *@This(), _contrastAmount: f32) void {
        return objc.msgSend(_self, "setContrastAmount:", void, .{_contrastAmount});
    }

    pub fn contrastAmount(_self: *@This()) f32 {
        return objc.msgSend(_self, "contrastAmount", f32, .{});
    }

    pub fn isDetailSupported(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isDetailSupported", objc.BOOL, .{});
    }

    pub fn detailAmount(_self: *@This()) f32 {
        return objc.msgSend(_self, "detailAmount", f32, .{});
    }

    pub fn setDetailAmount(_self: *@This(), _detailAmount: f32) void {
        return objc.msgSend(_self, "setDetailAmount:", void, .{_detailAmount});
    }

    pub fn isMoireReductionSupported(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isMoireReductionSupported", objc.BOOL, .{});
    }

    pub fn moireReductionAmount(_self: *@This()) f32 {
        return objc.msgSend(_self, "moireReductionAmount", f32, .{});
    }

    pub fn setMoireReductionAmount(_self: *@This(), _moireReductionAmount: f32) void {
        return objc.msgSend(_self, "setMoireReductionAmount:", void, .{_moireReductionAmount});
    }

    pub fn isLocalToneMapSupported(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isLocalToneMapSupported", objc.BOOL, .{});
    }

    pub fn localToneMapAmount(_self: *@This()) f32 {
        return objc.msgSend(_self, "localToneMapAmount", f32, .{});
    }

    pub fn setLocalToneMapAmount(_self: *@This(), _localToneMapAmount: f32) void {
        return objc.msgSend(_self, "setLocalToneMapAmount:", void, .{_localToneMapAmount});
    }

    pub fn setExtendedDynamicRangeAmount(_self: *@This(), _extendedDynamicRangeAmount: f32) void {
        return objc.msgSend(_self, "setExtendedDynamicRangeAmount:", void, .{_extendedDynamicRangeAmount});
    }

    pub fn extendedDynamicRangeAmount(_self: *@This()) f32 {
        return objc.msgSend(_self, "extendedDynamicRangeAmount", f32, .{});
    }

    pub fn setNeutralChromaticity(_self: *@This(), _neutralChromaticity: core_foundation.CGPoint) void {
        return objc.msgSend(_self, "setNeutralChromaticity:", void, .{_neutralChromaticity});
    }

    pub fn neutralChromaticity(_self: *@This()) core_foundation.CGPoint {
        return objc.msgSend(_self, "neutralChromaticity", core_foundation.CGPoint, .{});
    }

    pub fn neutralLocation(_self: *@This()) core_foundation.CGPoint {
        return objc.msgSend(_self, "neutralLocation", core_foundation.CGPoint, .{});
    }

    pub fn setNeutralLocation(_self: *@This(), _neutralLocation: core_foundation.CGPoint) void {
        return objc.msgSend(_self, "setNeutralLocation:", void, .{_neutralLocation});
    }

    pub fn neutralTemperature(_self: *@This()) f32 {
        return objc.msgSend(_self, "neutralTemperature", f32, .{});
    }

    pub fn setNeutralTemperature(_self: *@This(), _neutralTemperature: f32) void {
        return objc.msgSend(_self, "setNeutralTemperature:", void, .{_neutralTemperature});
    }

    pub fn neutralTint(_self: *@This()) f32 {
        return objc.msgSend(_self, "neutralTint", f32, .{});
    }

    pub fn setNeutralTint(_self: *@This(), _neutralTint: f32) void {
        return objc.msgSend(_self, "setNeutralTint:", void, .{_neutralTint});
    }

    pub fn linearSpaceFilter(_self: *@This()) ?*Filter {
        return objc.msgSend(_self, "linearSpaceFilter", ?*Filter, .{});
    }

    pub fn setLinearSpaceFilter(_self: *@This(), _linearSpaceFilter: ?*Filter) void {
        return objc.msgSend(_self, "setLinearSpaceFilter:", void, .{_linearSpaceFilter});
    }

    pub fn previewImage(_self: *@This()) ?*Image {
        return objc.msgSend(_self, "previewImage", ?*Image, .{});
    }

    pub fn portraitEffectsMatte(_self: *@This()) ?*Image {
        return objc.msgSend(_self, "portraitEffectsMatte", ?*Image, .{});
    }

    pub fn semanticSegmentationSkinMatte(_self: *@This()) ?*Image {
        return objc.msgSend(_self, "semanticSegmentationSkinMatte", ?*Image, .{});
    }

    pub fn semanticSegmentationHairMatte(_self: *@This()) ?*Image {
        return objc.msgSend(_self, "semanticSegmentationHairMatte", ?*Image, .{});
    }

    pub fn semanticSegmentationGlassesMatte(_self: *@This()) ?*Image {
        return objc.msgSend(_self, "semanticSegmentationGlassesMatte", ?*Image, .{});
    }

    pub fn semanticSegmentationSkyMatte(_self: *@This()) ?*Image {
        return objc.msgSend(_self, "semanticSegmentationSkyMatte", ?*Image, .{});
    }

    pub fn semanticSegmentationTeethMatte(_self: *@This()) ?*Image {
        return objc.msgSend(_self, "semanticSegmentationTeethMatte", ?*Image, .{});
    }

    pub fn filterWithImageURL(_url: ?*foundation.URL) *@This() {
        return objc.msgSend(Internal.class(), "filterWithImageURL:", *@This(), .{_url});
    }

    pub fn filterWithImageDataIdentifierHint(_data: ?*foundation.Data, _identifierHint: ?*foundation.String) *@This() {
        return objc.msgSend(Internal.class(), "filterWithImageData:identifierHint:", *@This(), .{ _data, _identifierHint });
    }

    pub fn filterWithCVPixelBufferProperties(_buffer: core_video.PixelBufferRef, _properties: ?*foundation.Dictionary) *@This() {
        return objc.msgSend(Internal.class(), "filterWithCVPixelBuffer:properties:", *@This(), .{ _buffer, _properties });
    }
};

/// https://developer.apple.com/documentation/CoreImage/CIRenderDestination?language=objc
pub const RenderDestination = opaque {
    pub const AlphaMode = RenderDestination.AlphaMode;

    pub const Internal = objc.ExternClass("CIRenderDestination", @This(), objc.NSObject, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn initWithPixelBuffer(_self: *@This(), _pixelBuffer: core_video.PixelBufferRef) *@This() {
        return objc.msgSend(_self, "initWithPixelBuffer:", *@This(), .{_pixelBuffer});
    }

    pub fn initWithIOSurface(_self: *@This(), _surface: ?*io_surface.IOSurface) *@This() {
        return objc.msgSend(_self, "initWithIOSurface:", *@This(), .{_surface});
    }

    pub fn initWithMTLTextureCommandBuffer(_self: *@This(), _texture: ?*objc.id, _commandBuffer: ?*objc.id) *@This() {
        return objc.msgSend(_self, "initWithMTLTexture:commandBuffer:", *@This(), .{ _texture, _commandBuffer });
    }

    pub fn initWithWidthHeightPixelFormatCommandBufferMtlTextureProvider(
        _self: *@This(),
        _width: objc.NSUInteger,
        _height: objc.NSUInteger,
        _pixelFormat: metal.PixelFormat,
        _commandBuffer: ?*objc.id,
        _block: *const fn () callconv(.C) ?*objc.id,
    ) *@This() {
        return objc.msgSend(_self, "initWithWidth:height:pixelFormat:commandBuffer:mtlTextureProvider:", *@This(), .{
            _width,
            _height,
            _pixelFormat,
            _commandBuffer,
            _block,
        });
    }

    pub fn initWithGLTextureTargetWidthHeight(
        _self: *@This(),
        _texture: u32,
        _target: u32,
        _width: objc.NSUInteger,
        _height: objc.NSUInteger,
    ) *@This() {
        return objc.msgSend(_self, "initWithGLTexture:target:width:height:", *@This(), .{
            _texture,
            _target,
            _width,
            _height,
        });
    }

    pub fn initWithBitmapDataWidthHeightBytesPerRowFormat(
        _self: *@This(),
        _data: ?*anyopaque,
        _width: objc.NSUInteger,
        _height: objc.NSUInteger,
        _bytesPerRow: objc.NSUInteger,
        _format: Image.Format,
    ) *@This() {
        return objc.msgSend(_self, "initWithBitmapData:width:height:bytesPerRow:format:", *@This(), .{
            _data,
            _width,
            _height,
            _bytesPerRow,
            _format,
        });
    }

    pub fn width(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "width", objc.NSUInteger, .{});
    }

    pub fn height(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "height", objc.NSUInteger, .{});
    }

    pub fn setAlphaMode(_self: *@This(), _alphaMode: RenderDestination.AlphaMode) void {
        return objc.msgSend(_self, "setAlphaMode:", void, .{_alphaMode});
    }

    pub fn alphaMode(_self: *@This()) RenderDestination.AlphaMode {
        return objc.msgSend(_self, "alphaMode", RenderDestination.AlphaMode, .{});
    }

    pub fn setFlipped(_self: *@This(), _flipped: objc.BOOL) void {
        return objc.msgSend(_self, "setFlipped:", void, .{_flipped});
    }

    pub fn isFlipped(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isFlipped", objc.BOOL, .{});
    }

    pub fn isDithered(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isDithered", objc.BOOL, .{});
    }

    pub fn setDithered(_self: *@This(), _dithered: objc.BOOL) void {
        return objc.msgSend(_self, "setDithered:", void, .{_dithered});
    }

    pub fn setClamped(_self: *@This(), _clamped: objc.BOOL) void {
        return objc.msgSend(_self, "setClamped:", void, .{_clamped});
    }

    pub fn isClamped(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isClamped", objc.BOOL, .{});
    }

    pub fn setColorSpace(_self: *@This(), _colorSpace: core_graphics.ColorSpaceRef) void {
        return objc.msgSend(_self, "setColorSpace:", void, .{_colorSpace});
    }

    pub fn colorSpace(_self: *@This()) core_graphics.ColorSpaceRef {
        return objc.msgSend(_self, "colorSpace", core_graphics.ColorSpaceRef, .{});
    }

    pub fn blendKernel(_self: *@This()) ?*BlendKernel {
        return objc.msgSend(_self, "blendKernel", ?*BlendKernel, .{});
    }

    pub fn setBlendKernel(_self: *@This(), _blendKernel: ?*BlendKernel) void {
        return objc.msgSend(_self, "setBlendKernel:", void, .{_blendKernel});
    }

    pub fn blendsInDestinationColorSpace(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "blendsInDestinationColorSpace", objc.BOOL, .{});
    }

    pub fn setBlendsInDestinationColorSpace(_self: *@This(), _blendsInDestinationColorSpace: objc.BOOL) void {
        return objc.msgSend(_self, "setBlendsInDestinationColorSpace:", void, .{_blendsInDestinationColorSpace});
    }
};

/// https://developer.apple.com/documentation/CoreImage/CIRenderInfo?language=objc
pub const RenderInfo = opaque {
    pub const Internal = objc.ExternClass("CIRenderInfo", @This(), objc.NSObject, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn kernelExecutionTime(_self: *@This()) foundation.TimeInterval {
        return objc.msgSend(_self, "kernelExecutionTime", foundation.TimeInterval, .{});
    }

    pub fn kernelCompileTime(_self: *@This()) foundation.TimeInterval {
        return objc.msgSend(_self, "kernelCompileTime", foundation.TimeInterval, .{});
    }

    pub fn passCount(_self: *@This()) objc.NSInteger {
        return objc.msgSend(_self, "passCount", objc.NSInteger, .{});
    }

    pub fn pixelsProcessed(_self: *@This()) objc.NSInteger {
        return objc.msgSend(_self, "pixelsProcessed", objc.NSInteger, .{});
    }
};

/// https://developer.apple.com/documentation/CoreImage/CIRenderTask?language=objc
pub const RenderTask = opaque {
    pub const Internal = objc.ExternClass("CIRenderTask", @This(), objc.NSObject, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn waitUntilCompletedAndReturnError(_self: *@This(), _error: ?*?*foundation.Error) ?*RenderInfo {
        return objc.msgSend(_self, "waitUntilCompletedAndReturnError:", ?*RenderInfo, .{_error});
    }
};

/// https://developer.apple.com/documentation/CoreImage/CIBarcodeDescriptor?language=objc
pub const BarcodeDescriptor = opaque {
    pub const Internal = objc.ExternClass("CIBarcodeDescriptor", @This(), objc.NSObject, &.{ foundation.SecureCoding, foundation.Copying });
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*foundation.Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*foundation.Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn supportsSecureCoding() objc.BOOL {
        return objc.msgSend(Internal.class(), "supportsSecureCoding", objc.BOOL, .{});
    }

    pub fn copyWithZone(_self: *@This(), _zone: ?*foundation.Zone) ?objc.Id {
        return objc.msgSend(_self, "copyWithZone:", ?objc.Id, .{_zone});
    }
};

pub const QRCodeErrorCorrectionLevel = objc.NSInteger;
pub const QRCodeErrorCorrectionLevel_L: objc.NSInteger = 76;
pub const QRCodeErrorCorrectionLevel_M: objc.NSInteger = 77;
pub const QRCodeErrorCorrectionLevel_Q: objc.NSInteger = 81;
pub const QRCodeErrorCorrectionLevel_H: objc.NSInteger = 72;

/// https://developer.apple.com/documentation/CoreImage/CIQRCodeDescriptor?language=objc
pub const QRCodeDescriptor = opaque {
    pub const Internal = objc.ExternClass("CIQRCodeDescriptor", @This(), BarcodeDescriptor, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn initWithPayloadSymbolVersionMaskPatternErrorCorrectionLevel(
        _self: *@This(),
        _errorCorrectedPayload: ?*foundation.Data,
        _symbolVersion: objc.NSInteger,
        _maskPattern: objc.uint8_t,
        _errorCorrectionLevel: QRCodeErrorCorrectionLevel,
    ) *@This() {
        return objc.msgSend(_self, "initWithPayload:symbolVersion:maskPattern:errorCorrectionLevel:", *@This(), .{
            _errorCorrectedPayload,
            _symbolVersion,
            _maskPattern,
            _errorCorrectionLevel,
        });
    }

    pub fn descriptorWithPayloadSymbolVersionMaskPatternErrorCorrectionLevel(
        _errorCorrectedPayload: ?*foundation.Data,
        _symbolVersion: objc.NSInteger,
        _maskPattern: objc.uint8_t,
        _errorCorrectionLevel: QRCodeErrorCorrectionLevel,
    ) *@This() {
        return objc.msgSend(Internal.class(), "descriptorWithPayload:symbolVersion:maskPattern:errorCorrectionLevel:", *@This(), .{
            _errorCorrectedPayload,
            _symbolVersion,
            _maskPattern,
            _errorCorrectionLevel,
        });
    }

    pub fn errorCorrectedPayload(_self: *@This()) ?*foundation.Data {
        return objc.msgSend(_self, "errorCorrectedPayload", ?*foundation.Data, .{});
    }

    pub fn symbolVersion(_self: *@This()) objc.NSInteger {
        return objc.msgSend(_self, "symbolVersion", objc.NSInteger, .{});
    }

    pub fn maskPattern(_self: *@This()) objc.uint8_t {
        return objc.msgSend(_self, "maskPattern", objc.uint8_t, .{});
    }

    pub fn errorCorrectionLevel(_self: *@This()) QRCodeErrorCorrectionLevel {
        return objc.msgSend(_self, "errorCorrectionLevel", QRCodeErrorCorrectionLevel, .{});
    }
};

/// https://developer.apple.com/documentation/CoreImage/CIAztecCodeDescriptor?language=objc
pub const AztecCodeDescriptor = opaque {
    pub const Internal = objc.ExternClass("CIAztecCodeDescriptor", @This(), BarcodeDescriptor, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn initWithPayloadIsCompactLayerCountDataCodewordCount(
        _self: *@This(),
        _errorCorrectedPayload: ?*foundation.Data,
        _isCompact: objc.BOOL,
        _layerCount: objc.NSInteger,
        _dataCodewordCount: objc.NSInteger,
    ) *@This() {
        return objc.msgSend(_self, "initWithPayload:isCompact:layerCount:dataCodewordCount:", *@This(), .{
            _errorCorrectedPayload,
            _isCompact,
            _layerCount,
            _dataCodewordCount,
        });
    }

    pub fn descriptorWithPayloadIsCompactLayerCountDataCodewordCount(
        _errorCorrectedPayload: ?*foundation.Data,
        _isCompact: objc.BOOL,
        _layerCount: objc.NSInteger,
        _dataCodewordCount: objc.NSInteger,
    ) *@This() {
        return objc.msgSend(Internal.class(), "descriptorWithPayload:isCompact:layerCount:dataCodewordCount:", *@This(), .{
            _errorCorrectedPayload,
            _isCompact,
            _layerCount,
            _dataCodewordCount,
        });
    }
};

/// https://developer.apple.com/documentation/CoreImage/CIPDF417CodeDescriptor?language=objc
pub const PDF417CodeDescriptor = opaque {
    pub const Internal = objc.ExternClass("CIPDF417CodeDescriptor", @This(), BarcodeDescriptor, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn initWithPayloadIsCompactRowCountColumnCount(
        _self: *@This(),
        _errorCorrectedPayload: ?*foundation.Data,
        _isCompact: objc.BOOL,
        _rowCount: objc.NSInteger,
        _columnCount: objc.NSInteger,
    ) *@This() {
        return objc.msgSend(_self, "initWithPayload:isCompact:rowCount:columnCount:", *@This(), .{
            _errorCorrectedPayload,
            _isCompact,
            _rowCount,
            _columnCount,
        });
    }

    pub fn descriptorWithPayloadIsCompactRowCountColumnCount(
        _errorCorrectedPayload: ?*foundation.Data,
        _isCompact: objc.BOOL,
        _rowCount: objc.NSInteger,
        _columnCount: objc.NSInteger,
    ) *@This() {
        return objc.msgSend(Internal.class(), "descriptorWithPayload:isCompact:rowCount:columnCount:", *@This(), .{
            _errorCorrectedPayload,
            _isCompact,
            _rowCount,
            _columnCount,
        });
    }
};

pub const DataMatrixCodeECCVersion = objc.NSInteger;
pub const DataMatrixCodeECCVersion_000: objc.NSInteger = 0;
pub const DataMatrixCodeECCVersion_050: objc.NSInteger = 50;
pub const DataMatrixCodeECCVersion_080: objc.NSInteger = 80;
pub const DataMatrixCodeECCVersion_100: objc.NSInteger = 100;
pub const DataMatrixCodeECCVersion_140: objc.NSInteger = 140;
pub const DataMatrixCodeECCVersion_200: objc.NSInteger = 200;

/// https://developer.apple.com/documentation/CoreImage/CIDataMatrixCodeDescriptor?language=objc
pub const DataMatrixCodeDescriptor = opaque {
    pub const Internal = objc.ExternClass("CIDataMatrixCodeDescriptor", @This(), BarcodeDescriptor, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn initWithPayloadRowCountColumnCountEccVersion(
        _self: *@This(),
        _errorCorrectedPayload: ?*foundation.Data,
        _rowCount: objc.NSInteger,
        _columnCount: objc.NSInteger,
        _eccVersion: DataMatrixCodeECCVersion,
    ) *@This() {
        return objc.msgSend(_self, "initWithPayload:rowCount:columnCount:eccVersion:", *@This(), .{
            _errorCorrectedPayload,
            _rowCount,
            _columnCount,
            _eccVersion,
        });
    }

    pub fn descriptorWithPayloadRowCountColumnCountEccVersion(
        _errorCorrectedPayload: ?*foundation.Data,
        _rowCount: objc.NSInteger,
        _columnCount: objc.NSInteger,
        _eccVersion: DataMatrixCodeECCVersion,
    ) *@This() {
        return objc.msgSend(Internal.class(), "descriptorWithPayload:rowCount:columnCount:eccVersion:", *@This(), .{
            _errorCorrectedPayload,
            _rowCount,
            _columnCount,
            _eccVersion,
        });
    }

    pub fn errorCorrectedPayload(_self: *@This()) ?*foundation.Data {
        return objc.msgSend(_self, "errorCorrectedPayload", ?*foundation.Data, .{});
    }

    pub fn rowCount(_self: *@This()) objc.NSInteger {
        return objc.msgSend(_self, "rowCount", objc.NSInteger, .{});
    }

    pub fn columnCount(_self: *@This()) objc.NSInteger {
        return objc.msgSend(_self, "columnCount", objc.NSInteger, .{});
    }

    pub fn eccVersion(_self: *@This()) DataMatrixCodeECCVersion {
        return objc.msgSend(_self, "eccVersion", DataMatrixCodeECCVersion, .{});
    }
};

/// https://developer.apple.com/documentation/CoreImage/CIFilterGenerator?language=objc
pub const FilterGenerator = opaque {
    pub const Struct = extern struct {};

    pub const Internal = objc.ExternClass("CIFilterGenerator", @This(), objc.NSObject, &.{ foundation.SecureCoding, foundation.Copying, FilterConstructor });
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*foundation.Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*foundation.Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn supportsSecureCoding() objc.BOOL {
        return objc.msgSend(Internal.class(), "supportsSecureCoding", objc.BOOL, .{});
    }

    pub fn copyWithZone(_self: *@This(), _zone: ?*foundation.Zone) ?objc.Id {
        return objc.msgSend(_self, "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn filterWithName(_self: *@This(), _name: ?*foundation.String) ?*Filter {
        return objc.msgSend(_self, "filterWithName:", ?*Filter, .{_name});
    }

    pub fn filterGenerator() ?*FilterGenerator {
        return objc.msgSend(Internal.class(), "filterGenerator", ?*FilterGenerator, .{});
    }

    pub fn filterGeneratorWithContentsOfURL(_aURL: ?*foundation.URL) ?*FilterGenerator {
        return objc.msgSend(Internal.class(), "filterGeneratorWithContentsOfURL:", ?*FilterGenerator, .{_aURL});
    }

    pub fn initWithContentsOfURL(_self: *@This(), _aURL: ?*foundation.URL) ?objc.Id {
        return objc.msgSend(_self, "initWithContentsOfURL:", ?objc.Id, .{_aURL});
    }

    pub fn connectObjectWithKeyToObjectWithKey(
        _self: *@This(),
        _sourceObject: ?objc.Id,
        _sourceKey: ?*foundation.String,
        _targetObject: ?objc.Id,
        _targetKey: ?*foundation.String,
    ) void {
        return objc.msgSend(_self, "connectObject:withKey:toObject:withKey:", void, .{
            _sourceObject,
            _sourceKey,
            _targetObject,
            _targetKey,
        });
    }

    pub fn disconnectObjectWithKeyToObjectWithKey(
        _self: *@This(),
        _sourceObject: ?objc.Id,
        _sourceKey: ?*foundation.String,
        _targetObject: ?objc.Id,
        _targetKey: ?*foundation.String,
    ) void {
        return objc.msgSend(_self, "disconnectObject:withKey:toObject:withKey:", void, .{
            _sourceObject,
            _sourceKey,
            _targetObject,
            _targetKey,
        });
    }

    pub fn exportKeyFromObjectWithName(_self: *@This(), _key: ?*foundation.String, _targetObject: ?objc.Id, _exportedKeyName: ?*foundation.String) void {
        return objc.msgSend(_self, "exportKey:fromObject:withName:", void, .{ _key, _targetObject, _exportedKeyName });
    }

    pub fn removeExportedKey(_self: *@This(), _exportedKeyName: ?*foundation.String) void {
        return objc.msgSend(_self, "removeExportedKey:", void, .{_exportedKeyName});
    }

    pub fn setAttributesForExportedKey(_self: *@This(), _attributes: ?*foundation.Dictionary, _key: ?*foundation.String) void {
        return objc.msgSend(_self, "setAttributes:forExportedKey:", void, .{ _attributes, _key });
    }

    pub fn filter(_self: *@This()) ?*Filter {
        return objc.msgSend(_self, "filter", ?*Filter, .{});
    }

    pub fn registerFilterName(_self: *@This(), _name: ?*foundation.String) void {
        return objc.msgSend(_self, "registerFilterName:", void, .{_name});
    }

    pub fn exportedKeys(_self: *@This()) ?*foundation.Dictionary {
        return objc.msgSend(_self, "exportedKeys", ?*foundation.Dictionary, .{});
    }

    pub fn classAttributes(_self: *@This()) ?*foundation.Dictionary {
        return objc.msgSend(_self, "classAttributes", ?*foundation.Dictionary, .{});
    }

    pub fn setClassAttributes(_self: *@This(), _classAttributes: ?*foundation.Dictionary) void {
        return objc.msgSend(_self, "setClassAttributes:", void, .{_classAttributes});
    }
};

/// https://developer.apple.com/documentation/CoreImage/CIPlugInRegistration?language=objc
pub const PlugInRegistration = opaque {
    pub const Internal = objc.ExternProtocol(@This(), &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
};

/// https://developer.apple.com/documentation/CoreImage/CIPlugIn?language=objc
pub const PlugIn = opaque {
    pub const Internal = objc.ExternClass("CIPlugIn", @This(), objc.NSObject, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn loadAllPlugIns() void {
        return objc.msgSend(Internal.class(), "loadAllPlugIns", void, .{});
    }

    pub fn loadNonExecutablePlugIns() void {
        return objc.msgSend(Internal.class(), "loadNonExecutablePlugIns", void, .{});
    }

    pub fn loadPlugInAllowNonExecutable(_url: ?*foundation.URL, _allowNonExecutable: objc.BOOL) void {
        return objc.msgSend(Internal.class(), "loadPlugIn:allowNonExecutable:", void, .{ _url, _allowNonExecutable });
    }

    pub fn loadPlugInAllowExecutableCode(_url: ?*foundation.URL, _allowExecutableCode: objc.BOOL) void {
        return objc.msgSend(Internal.class(), "loadPlugIn:allowExecutableCode:", void, .{ _url, _allowExecutableCode });
    }

    pub fn loadNonExecutablePlugIn(_url: ?*foundation.URL) void {
        return objc.msgSend(Internal.class(), "loadNonExecutablePlugIn:", void, .{_url});
    }
};
