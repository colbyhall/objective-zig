// THIS FILE IS AUTOGENERATED. MODIFICATIONS WILL NOT BE MAINTAINED.

const std = @import("std");
const objc = @import("objc.zig"); // Objective-C Runtime in zig.
const core_foundation = @import("core_foundation.zig"); // Framework dependency CoreFoundation.
const foundation = @import("foundation.zig"); // Framework dependency Foundation.
const core_graphics = @import("core_graphics.zig"); // Framework dependency CoreGraphics.
const image_io = @import("image_io.zig"); // Framework dependency ImageIO.
const core_video = @import("core_video.zig"); // Framework dependency CoreVideo.
const io_surface = @import("io_surface.zig"); // Framework dependency IOSurface.
const application_services = @import("application_services.zig"); // Framework dependency ApplicationServices.
const opengl = @import("opengl.zig"); // Framework dependency OpenGL.
const metal = @import("metal.zig"); // Framework dependency Metal.

/// https://developer.apple.com/documentation/CoreImage/CIVector?language=objc
pub const Vector = opaque {
    pub const InternalInfo = objc.ExternalClass("CIVector", @This(), NSObject, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn vectorWithValuesCount(self: *@This(), values: ?*core_foundation.CGFloat, count: objc.size_t) *@This() {
        return objc.msgSend(self, "vectorWithValues:count:", *@This(), .{values, count});
    }

    pub fn vectorWithX(self: *@This(), x: core_foundation.CGFloat) *@This() {
        return objc.msgSend(self, "vectorWithX:", *@This(), .{x});
    }

    pub fn vectorWithXY(self: *@This(), x: core_foundation.CGFloat, y: core_foundation.CGFloat) *@This() {
        return objc.msgSend(self, "vectorWithX:Y:", *@This(), .{x, y});
    }

    pub fn vectorWithXYZ(self: *@This(), x: core_foundation.CGFloat, y: core_foundation.CGFloat, z: core_foundation.CGFloat) *@This() {
        return objc.msgSend(self, "vectorWithX:Y:Z:", *@This(), .{x, y, z});
    }

    pub fn vectorWithXYZW(self: *@This(), x: core_foundation.CGFloat, y: core_foundation.CGFloat, z: core_foundation.CGFloat, w: core_foundation.CGFloat, ) *@This() {
        return objc.msgSend(self, "vectorWithX:Y:Z:W:", *@This(), .{x, y, z, w, });
    }

    pub fn vectorWithCGPoint(self: *@This(), p: core_foundation.CGPoint) *@This() {
        return objc.msgSend(self, "vectorWithCGPoint:", *@This(), .{p});
    }

    pub fn vectorWithCGRect(self: *@This(), r: core_foundation.CGRect) *@This() {
        return objc.msgSend(self, "vectorWithCGRect:", *@This(), .{r});
    }

    pub fn vectorWithCGAffineTransform(self: *@This(), t: core_foundation.CGAffineTransform) *@This() {
        return objc.msgSend(self, "vectorWithCGAffineTransform:", *@This(), .{t});
    }

    pub fn vectorWithString(self: *@This(), representation: ?*foundation.String) *@This() {
        return objc.msgSend(self, "vectorWithString:", *@This(), .{representation});
    }

    pub fn initWithValuesCount(self: *@This(), values: ?*core_foundation.CGFloat, count: objc.size_t) *@This() {
        return objc.msgSend(self, "initWithValues:count:", *@This(), .{values, count});
    }

    pub fn initWithX(self: *@This(), x: core_foundation.CGFloat) *@This() {
        return objc.msgSend(self, "initWithX:", *@This(), .{x});
    }

    pub fn initWithXY(self: *@This(), x: core_foundation.CGFloat, y: core_foundation.CGFloat) *@This() {
        return objc.msgSend(self, "initWithX:Y:", *@This(), .{x, y});
    }

    pub fn initWithXYZ(self: *@This(), x: core_foundation.CGFloat, y: core_foundation.CGFloat, z: core_foundation.CGFloat) *@This() {
        return objc.msgSend(self, "initWithX:Y:Z:", *@This(), .{x, y, z});
    }

    pub fn initWithXYZW(self: *@This(), x: core_foundation.CGFloat, y: core_foundation.CGFloat, z: core_foundation.CGFloat, w: core_foundation.CGFloat, ) *@This() {
        return objc.msgSend(self, "initWithX:Y:Z:W:", *@This(), .{x, y, z, w, });
    }

    pub fn initWithCGPoint(self: *@This(), p: core_foundation.CGPoint) *@This() {
        return objc.msgSend(self, "initWithCGPoint:", *@This(), .{p});
    }

    pub fn initWithCGRect(self: *@This(), r: core_foundation.CGRect) *@This() {
        return objc.msgSend(self, "initWithCGRect:", *@This(), .{r});
    }

    pub fn initWithCGAffineTransform(self: *@This(), r: core_foundation.CGAffineTransform) *@This() {
        return objc.msgSend(self, "initWithCGAffineTransform:", *@This(), .{r});
    }

    pub fn initWithString(self: *@This(), representation: ?*foundation.String) *@This() {
        return objc.msgSend(self, "initWithString:", *@This(), .{representation});
    }

    pub fn valueAtIndex(self: *@This(), index: objc.size_t) core_foundation.CGFloat {
        return objc.msgSend(self, "valueAtIndex:", core_foundation.CGFloat, .{index});
    }

    pub fn count(self: *@This()) objc.size_t {
        return objc.msgSend(self, "count", objc.size_t, .{});
    }

    pub fn X(self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(self, "X", core_foundation.CGFloat, .{});
    }

    pub fn Y(self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(self, "Y", core_foundation.CGFloat, .{});
    }

    pub fn Z(self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(self, "Z", core_foundation.CGFloat, .{});
    }

    pub fn W(self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(self, "W", core_foundation.CGFloat, .{});
    }

    pub fn CGPointValue(self: *@This()) core_foundation.CGPoint {
        return objc.msgSend(self, "CGPointValue", core_foundation.CGPoint, .{});
    }

    pub fn CGRectValue(self: *@This()) core_foundation.CGRect {
        return objc.msgSend(self, "CGRectValue", core_foundation.CGRect, .{});
    }

    pub fn CGAffineTransformValue(self: *@This()) core_foundation.CGAffineTransform {
        return objc.msgSend(self, "CGAffineTransformValue", core_foundation.CGAffineTransform, .{});
    }

    pub fn stringRepresentation(self: *@This()) ?*foundation.String {
        return objc.msgSend(self, "stringRepresentation", ?*foundation.String, .{});
    }

};

pub const anon235 = extern union {
    vec: [4] core_foundation.CGFloat,
    ptr: ?*core_foundation.CGFloat,
};

/// https://developer.apple.com/documentation/CoreImage/CIColor?language=objc
pub const Color = opaque {
    pub const InternalInfo = objc.ExternalClass("CIColor", @This(), NSObject, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn colorWithCGColor(self: *@This(), c: core_graphics.ColorRef) *@This() {
        return objc.msgSend(self, "colorWithCGColor:", *@This(), .{c});
    }

    pub fn colorWithRedGreenBlueAlpha(self: *@This(), r: core_foundation.CGFloat, g: core_foundation.CGFloat, b: core_foundation.CGFloat, a: core_foundation.CGFloat, ) *@This() {
        return objc.msgSend(self, "colorWithRed:green:blue:alpha:", *@This(), .{r, g, b, a, });
    }

    pub fn colorWithRedGreenBlue(self: *@This(), r: core_foundation.CGFloat, g: core_foundation.CGFloat, b: core_foundation.CGFloat) *@This() {
        return objc.msgSend(self, "colorWithRed:green:blue:", *@This(), .{r, g, b});
    }

    pub fn colorWithRedGreenBlueAlphaColorSpace(self: *@This(), r: core_foundation.CGFloat, g: core_foundation.CGFloat, b: core_foundation.CGFloat, a: core_foundation.CGFloat, colorSpace: core_graphics.ColorSpaceRef, ) *@This() {
        return objc.msgSend(self, "colorWithRed:green:blue:alpha:colorSpace:", *@This(), .{r, g, b, a, colorSpace, });
    }

    pub fn colorWithRedGreenBlueColorSpace(self: *@This(), r: core_foundation.CGFloat, g: core_foundation.CGFloat, b: core_foundation.CGFloat, colorSpace: core_graphics.ColorSpaceRef, ) *@This() {
        return objc.msgSend(self, "colorWithRed:green:blue:colorSpace:", *@This(), .{r, g, b, colorSpace, });
    }

    pub fn colorWithString(self: *@This(), representation: ?*foundation.String) *@This() {
        return objc.msgSend(self, "colorWithString:", *@This(), .{representation});
    }

    pub fn initWithCGColor(self: *@This(), c: core_graphics.ColorRef) *@This() {
        return objc.msgSend(self, "initWithCGColor:", *@This(), .{c});
    }

    pub fn initWithRedGreenBlueAlpha(self: *@This(), r: core_foundation.CGFloat, g: core_foundation.CGFloat, b: core_foundation.CGFloat, a: core_foundation.CGFloat, ) *@This() {
        return objc.msgSend(self, "initWithRed:green:blue:alpha:", *@This(), .{r, g, b, a, });
    }

    pub fn initWithRedGreenBlue(self: *@This(), r: core_foundation.CGFloat, g: core_foundation.CGFloat, b: core_foundation.CGFloat) *@This() {
        return objc.msgSend(self, "initWithRed:green:blue:", *@This(), .{r, g, b});
    }

    pub fn initWithRedGreenBlueAlphaColorSpace(self: *@This(), r: core_foundation.CGFloat, g: core_foundation.CGFloat, b: core_foundation.CGFloat, a: core_foundation.CGFloat, colorSpace: core_graphics.ColorSpaceRef, ) *@This() {
        return objc.msgSend(self, "initWithRed:green:blue:alpha:colorSpace:", *@This(), .{r, g, b, a, colorSpace, });
    }

    pub fn initWithRedGreenBlueColorSpace(self: *@This(), r: core_foundation.CGFloat, g: core_foundation.CGFloat, b: core_foundation.CGFloat, colorSpace: core_graphics.ColorSpaceRef, ) *@This() {
        return objc.msgSend(self, "initWithRed:green:blue:colorSpace:", *@This(), .{r, g, b, colorSpace, });
    }

    pub fn numberOfComponents(self: *@This()) objc.size_t {
        return objc.msgSend(self, "numberOfComponents", objc.size_t, .{});
    }

    pub fn components(self: *@This()) ?*core_foundation.CGFloat {
        return objc.msgSend(self, "components", ?*core_foundation.CGFloat, .{});
    }

    pub fn alpha(self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(self, "alpha", core_foundation.CGFloat, .{});
    }

    pub fn colorSpace(self: *@This()) core_graphics.ColorSpaceRef {
        return objc.msgSend(self, "colorSpace", core_graphics.ColorSpaceRef, .{});
    }

    pub fn red(self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(self, "red", core_foundation.CGFloat, .{});
    }

    pub fn green(self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(self, "green", core_foundation.CGFloat, .{});
    }

    pub fn blue(self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(self, "blue", core_foundation.CGFloat, .{});
    }

    pub fn stringRepresentation(self: *@This()) ?*foundation.String {
        return objc.msgSend(self, "stringRepresentation", ?*foundation.String, .{});
    }

    pub fn blackColor(self: *@This()) ?*Color {
        return objc.msgSend(self, "blackColor", ?*Color, .{});
    }

    pub fn whiteColor(self: *@This()) ?*Color {
        return objc.msgSend(self, "whiteColor", ?*Color, .{});
    }

    pub fn grayColor(self: *@This()) ?*Color {
        return objc.msgSend(self, "grayColor", ?*Color, .{});
    }

    pub fn redColor(self: *@This()) ?*Color {
        return objc.msgSend(self, "redColor", ?*Color, .{});
    }

    pub fn greenColor(self: *@This()) ?*Color {
        return objc.msgSend(self, "greenColor", ?*Color, .{});
    }

    pub fn blueColor(self: *@This()) ?*Color {
        return objc.msgSend(self, "blueColor", ?*Color, .{});
    }

    pub fn cyanColor(self: *@This()) ?*Color {
        return objc.msgSend(self, "cyanColor", ?*Color, .{});
    }

    pub fn magentaColor(self: *@This()) ?*Color {
        return objc.msgSend(self, "magentaColor", ?*Color, .{});
    }

    pub fn yellowColor(self: *@This()) ?*Color {
        return objc.msgSend(self, "yellowColor", ?*Color, .{});
    }

    pub fn clearColor(self: *@This()) ?*Color {
        return objc.msgSend(self, "clearColor", ?*Color, .{});
    }

};

/// https://developer.apple.com/documentation/CoreImage/CIImage?language=objc
pub const Image = opaque {
    pub const InternalInfo = objc.ExternalClass("CIImage", @This(), NSObject, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn imageWithCGImage(self: *@This(), image: core_graphics.ImageRef) ?*Image {
        return objc.msgSend(self, "imageWithCGImage:", ?*Image, .{image});
    }

    pub fn imageWithCGImageOptions(self: *@This(), image: core_graphics.ImageRef, options: ?*anyopaque) ?*Image {
        return objc.msgSend(self, "imageWithCGImage:options:", ?*Image, .{image, options});
    }

    pub fn imageWithCGImageSourceIndexOptions(self: *@This(), source: image_io.SourceRef, index: objc.size_t, dict: ?*anyopaque) ?*Image {
        return objc.msgSend(self, "imageWithCGImageSource:index:options:", ?*Image, .{source, index, dict});
    }

    pub fn imageWithCGLayer(self: *@This(), layer: core_graphics.LayerRef) ?*Image {
        return objc.msgSend(self, "imageWithCGLayer:", ?*Image, .{layer});
    }

    pub fn imageWithCGLayerOptions(self: *@This(), layer: core_graphics.LayerRef, options: ?*anyopaque) ?*Image {
        return objc.msgSend(self, "imageWithCGLayer:options:", ?*Image, .{layer, options});
    }

    pub fn imageWithBitmapDataBytesPerRowSizeFormatColorSpace(self: *@This(), data: ?*foundation.Data, bytesPerRow: objc.size_t, size: core_foundation.CGSize, format: Format, colorSpace: core_graphics.ColorSpaceRef, ) ?*Image {
        return objc.msgSend(self, "imageWithBitmapData:bytesPerRow:size:format:colorSpace:", ?*Image, .{data, bytesPerRow, size, format, colorSpace, });
    }

    pub fn imageWithTextureSizeFlippedColorSpace(self: *@This(), name: u32, size: core_foundation.CGSize, flipped: objc.BOOL, colorSpace: core_graphics.ColorSpaceRef, ) ?*Image {
        return objc.msgSend(self, "imageWithTexture:size:flipped:colorSpace:", ?*Image, .{name, size, flipped, colorSpace, });
    }

    pub fn imageWithTextureSizeFlippedOptions(self: *@This(), name: u32, size: core_foundation.CGSize, flipped: objc.BOOL, options: ?*anyopaque, ) ?*Image {
        return objc.msgSend(self, "imageWithTexture:size:flipped:options:", ?*Image, .{name, size, flipped, options, });
    }

    pub fn imageWithMTLTextureOptions(self: *@This(), texture: ?*anyopaque, options: ?*anyopaque) ?*Image {
        return objc.msgSend(self, "imageWithMTLTexture:options:", ?*Image, .{texture, options});
    }

    pub fn imageWithContentsOfURL(self: *@This(), url: ?*foundation.URL) ?*Image {
        return objc.msgSend(self, "imageWithContentsOfURL:", ?*Image, .{url});
    }

    pub fn imageWithContentsOfURLOptions(self: *@This(), url: ?*foundation.URL, options: ?*anyopaque) ?*Image {
        return objc.msgSend(self, "imageWithContentsOfURL:options:", ?*Image, .{url, options});
    }

    pub fn imageWithData(self: *@This(), data: ?*foundation.Data) ?*Image {
        return objc.msgSend(self, "imageWithData:", ?*Image, .{data});
    }

    pub fn imageWithDataOptions(self: *@This(), data: ?*foundation.Data, options: ?*anyopaque) ?*Image {
        return objc.msgSend(self, "imageWithData:options:", ?*Image, .{data, options});
    }

    pub fn imageWithCVImageBuffer(self: *@This(), imageBuffer: core_video.ImageBufferRef) ?*Image {
        return objc.msgSend(self, "imageWithCVImageBuffer:", ?*Image, .{imageBuffer});
    }

    pub fn imageWithCVImageBufferOptions(self: *@This(), imageBuffer: core_video.ImageBufferRef, options: ?*anyopaque) ?*Image {
        return objc.msgSend(self, "imageWithCVImageBuffer:options:", ?*Image, .{imageBuffer, options});
    }

    pub fn imageWithCVPixelBuffer(self: *@This(), pixelBuffer: core_video.PixelBufferRef) ?*Image {
        return objc.msgSend(self, "imageWithCVPixelBuffer:", ?*Image, .{pixelBuffer});
    }

    pub fn imageWithCVPixelBufferOptions(self: *@This(), pixelBuffer: core_video.PixelBufferRef, options: ?*anyopaque) ?*Image {
        return objc.msgSend(self, "imageWithCVPixelBuffer:options:", ?*Image, .{pixelBuffer, options});
    }

    pub fn imageWithIOSurface(self: *@This(), surface: io_surface.Ref) ?*Image {
        return objc.msgSend(self, "imageWithIOSurface:", ?*Image, .{surface});
    }

    pub fn imageWithIOSurfaceOptions(self: *@This(), surface: io_surface.Ref, options: ?*anyopaque) ?*Image {
        return objc.msgSend(self, "imageWithIOSurface:options:", ?*Image, .{surface, options});
    }

    pub fn imageWithColor(self: *@This(), color: ?*Color) ?*Image {
        return objc.msgSend(self, "imageWithColor:", ?*Image, .{color});
    }

    pub fn emptyImage(self: *@This()) ?*Image {
        return objc.msgSend(self, "emptyImage", ?*Image, .{});
    }

    pub fn blackImage(self: *@This()) ?*Image {
        return objc.msgSend(self, "blackImage", ?*Image, .{});
    }

    pub fn whiteImage(self: *@This()) ?*Image {
        return objc.msgSend(self, "whiteImage", ?*Image, .{});
    }

    pub fn grayImage(self: *@This()) ?*Image {
        return objc.msgSend(self, "grayImage", ?*Image, .{});
    }

    pub fn redImage(self: *@This()) ?*Image {
        return objc.msgSend(self, "redImage", ?*Image, .{});
    }

    pub fn greenImage(self: *@This()) ?*Image {
        return objc.msgSend(self, "greenImage", ?*Image, .{});
    }

    pub fn blueImage(self: *@This()) ?*Image {
        return objc.msgSend(self, "blueImage", ?*Image, .{});
    }

    pub fn cyanImage(self: *@This()) ?*Image {
        return objc.msgSend(self, "cyanImage", ?*Image, .{});
    }

    pub fn magentaImage(self: *@This()) ?*Image {
        return objc.msgSend(self, "magentaImage", ?*Image, .{});
    }

    pub fn yellowImage(self: *@This()) ?*Image {
        return objc.msgSend(self, "yellowImage", ?*Image, .{});
    }

    pub fn clearImage(self: *@This()) ?*Image {
        return objc.msgSend(self, "clearImage", ?*Image, .{});
    }

    pub fn initWithCGImage(self: *@This(), image: core_graphics.ImageRef) *@This() {
        return objc.msgSend(self, "initWithCGImage:", *@This(), .{image});
    }

    pub fn initWithCGImageOptions(self: *@This(), image: core_graphics.ImageRef, options: ?*anyopaque) *@This() {
        return objc.msgSend(self, "initWithCGImage:options:", *@This(), .{image, options});
    }

    pub fn initWithCGImageSourceIndexOptions(self: *@This(), source: image_io.SourceRef, index: objc.size_t, dict: ?*anyopaque) *@This() {
        return objc.msgSend(self, "initWithCGImageSource:index:options:", *@This(), .{source, index, dict});
    }

    pub fn initWithCGLayer(self: *@This(), layer: core_graphics.LayerRef) *@This() {
        return objc.msgSend(self, "initWithCGLayer:", *@This(), .{layer});
    }

    pub fn initWithCGLayerOptions(self: *@This(), layer: core_graphics.LayerRef, options: ?*anyopaque) *@This() {
        return objc.msgSend(self, "initWithCGLayer:options:", *@This(), .{layer, options});
    }

    pub fn initWithData(self: *@This(), data: ?*foundation.Data) *@This() {
        return objc.msgSend(self, "initWithData:", *@This(), .{data});
    }

    pub fn initWithDataOptions(self: *@This(), data: ?*foundation.Data, options: ?*anyopaque) *@This() {
        return objc.msgSend(self, "initWithData:options:", *@This(), .{data, options});
    }

    pub fn initWithBitmapDataBytesPerRowSizeFormatColorSpace(self: *@This(), data: ?*foundation.Data, bytesPerRow: objc.size_t, size: core_foundation.CGSize, format: Format, colorSpace: core_graphics.ColorSpaceRef, ) *@This() {
        return objc.msgSend(self, "initWithBitmapData:bytesPerRow:size:format:colorSpace:", *@This(), .{data, bytesPerRow, size, format, colorSpace, });
    }

    pub fn initWithTextureSizeFlippedColorSpace(self: *@This(), name: u32, size: core_foundation.CGSize, flipped: objc.BOOL, colorSpace: core_graphics.ColorSpaceRef, ) *@This() {
        return objc.msgSend(self, "initWithTexture:size:flipped:colorSpace:", *@This(), .{name, size, flipped, colorSpace, });
    }

    pub fn initWithTextureSizeFlippedOptions(self: *@This(), name: u32, size: core_foundation.CGSize, flipped: objc.BOOL, options: ?*anyopaque, ) *@This() {
        return objc.msgSend(self, "initWithTexture:size:flipped:options:", *@This(), .{name, size, flipped, options, });
    }

    pub fn initWithMTLTextureOptions(self: *@This(), texture: ?*anyopaque, options: ?*anyopaque) *@This() {
        return objc.msgSend(self, "initWithMTLTexture:options:", *@This(), .{texture, options});
    }

    pub fn initWithContentsOfURL(self: *@This(), url: ?*foundation.URL) *@This() {
        return objc.msgSend(self, "initWithContentsOfURL:", *@This(), .{url});
    }

    pub fn initWithContentsOfURLOptions(self: *@This(), url: ?*foundation.URL, options: ?*anyopaque) *@This() {
        return objc.msgSend(self, "initWithContentsOfURL:options:", *@This(), .{url, options});
    }

    pub fn initWithIOSurface(self: *@This(), surface: io_surface.Ref) *@This() {
        return objc.msgSend(self, "initWithIOSurface:", *@This(), .{surface});
    }

    pub fn initWithIOSurfaceOptions(self: *@This(), surface: io_surface.Ref, options: ?*anyopaque) *@This() {
        return objc.msgSend(self, "initWithIOSurface:options:", *@This(), .{surface, options});
    }

    pub fn initWithIOSurfacePlaneFormatOptions(self: *@This(), surface: io_surface.Ref, plane: objc.size_t, format: Format, options: ?*anyopaque, ) *@This() {
        return objc.msgSend(self, "initWithIOSurface:plane:format:options:", *@This(), .{surface, plane, format, options, });
    }

    pub fn initWithCVImageBuffer(self: *@This(), imageBuffer: core_video.ImageBufferRef) *@This() {
        return objc.msgSend(self, "initWithCVImageBuffer:", *@This(), .{imageBuffer});
    }

    pub fn initWithCVImageBufferOptions(self: *@This(), imageBuffer: core_video.ImageBufferRef, options: ?*anyopaque) *@This() {
        return objc.msgSend(self, "initWithCVImageBuffer:options:", *@This(), .{imageBuffer, options});
    }

    pub fn initWithCVPixelBuffer(self: *@This(), pixelBuffer: core_video.PixelBufferRef) *@This() {
        return objc.msgSend(self, "initWithCVPixelBuffer:", *@This(), .{pixelBuffer});
    }

    pub fn initWithCVPixelBufferOptions(self: *@This(), pixelBuffer: core_video.PixelBufferRef, options: ?*anyopaque) *@This() {
        return objc.msgSend(self, "initWithCVPixelBuffer:options:", *@This(), .{pixelBuffer, options});
    }

    pub fn initWithColor(self: *@This(), color: ?*Color) *@This() {
        return objc.msgSend(self, "initWithColor:", *@This(), .{color});
    }

    pub fn imageByApplyingTransform(self: *@This(), matrix: core_foundation.CGAffineTransform) ?*Image {
        return objc.msgSend(self, "imageByApplyingTransform:", ?*Image, .{matrix});
    }

    pub fn imageByApplyingTransformHighQualityDownsample(self: *@This(), matrix: core_foundation.CGAffineTransform, highQualityDownsample: objc.BOOL) ?*Image {
        return objc.msgSend(self, "imageByApplyingTransform:highQualityDownsample:", ?*Image, .{matrix, highQualityDownsample});
    }

    pub fn imageByApplyingOrientation(self: *@This(), orientation: i32) ?*Image {
        return objc.msgSend(self, "imageByApplyingOrientation:", ?*Image, .{orientation});
    }

    pub fn imageTransformForOrientation(self: *@This(), orientation: i32) core_foundation.CGAffineTransform {
        return objc.msgSend(self, "imageTransformForOrientation:", core_foundation.CGAffineTransform, .{orientation});
    }

    pub fn imageByApplyingCGOrientation(self: *@This(), orientation: image_io.PropertyOrientation) ?*Image {
        return objc.msgSend(self, "imageByApplyingCGOrientation:", ?*Image, .{orientation});
    }

    pub fn imageTransformForCGOrientation(self: *@This(), orientation: image_io.PropertyOrientation) core_foundation.CGAffineTransform {
        return objc.msgSend(self, "imageTransformForCGOrientation:", core_foundation.CGAffineTransform, .{orientation});
    }

    pub fn imageByCompositingOverImage(self: *@This(), dest: ?*Image) ?*Image {
        return objc.msgSend(self, "imageByCompositingOverImage:", ?*Image, .{dest});
    }

    pub fn imageByCroppingToRect(self: *@This(), rect: core_foundation.CGRect) ?*Image {
        return objc.msgSend(self, "imageByCroppingToRect:", ?*Image, .{rect});
    }

    pub fn imageByClampingToExtent(self: *@This()) ?*Image {
        return objc.msgSend(self, "imageByClampingToExtent", ?*Image, .{});
    }

    pub fn imageByClampingToRect(self: *@This(), rect: core_foundation.CGRect) ?*Image {
        return objc.msgSend(self, "imageByClampingToRect:", ?*Image, .{rect});
    }

    pub fn imageByApplyingFilterWithInputParameters(self: *@This(), filterName: ?*application_services.NSString, params: ?*anyopaque) ?*Image {
        return objc.msgSend(self, "imageByApplyingFilter:withInputParameters:", ?*Image, .{filterName, params});
    }

    pub fn imageByApplyingFilter(self: *@This(), filterName: ?*application_services.NSString) ?*Image {
        return objc.msgSend(self, "imageByApplyingFilter:", ?*Image, .{filterName});
    }

    pub fn imageByColorMatchingColorSpaceToWorkingSpace(self: *@This(), colorSpace: core_graphics.ColorSpaceRef) ?*Image {
        return objc.msgSend(self, "imageByColorMatchingColorSpaceToWorkingSpace:", ?*Image, .{colorSpace});
    }

    pub fn imageByColorMatchingWorkingSpaceToColorSpace(self: *@This(), colorSpace: core_graphics.ColorSpaceRef) ?*Image {
        return objc.msgSend(self, "imageByColorMatchingWorkingSpaceToColorSpace:", ?*Image, .{colorSpace});
    }

    pub fn imageByPremultiplyingAlpha(self: *@This()) ?*Image {
        return objc.msgSend(self, "imageByPremultiplyingAlpha", ?*Image, .{});
    }

    pub fn imageByUnpremultiplyingAlpha(self: *@This()) ?*Image {
        return objc.msgSend(self, "imageByUnpremultiplyingAlpha", ?*Image, .{});
    }

    pub fn imageBySettingAlphaOneInExtent(self: *@This(), extent: core_foundation.CGRect) ?*Image {
        return objc.msgSend(self, "imageBySettingAlphaOneInExtent:", ?*Image, .{extent});
    }

    pub fn imageByApplyingGaussianBlurWithSigma(self: *@This(), sigma: f64) ?*Image {
        return objc.msgSend(self, "imageByApplyingGaussianBlurWithSigma:", ?*Image, .{sigma});
    }

    pub fn imageBySettingProperties(self: *@This(), properties: ?*application_services.NSDictionary) ?*Image {
        return objc.msgSend(self, "imageBySettingProperties:", ?*Image, .{properties});
    }

    pub fn imageBySamplingLinear(self: *@This()) ?*Image {
        return objc.msgSend(self, "imageBySamplingLinear", ?*Image, .{});
    }

    pub fn imageBySamplingNearest(self: *@This()) ?*Image {
        return objc.msgSend(self, "imageBySamplingNearest", ?*Image, .{});
    }

    pub fn imageByInsertingIntermediate(self: *@This()) ?*Image {
        return objc.msgSend(self, "imageByInsertingIntermediate", ?*Image, .{});
    }

    pub fn imageByInsertingIntermediate(self: *@This(), cache: objc.BOOL) ?*Image {
        return objc.msgSend(self, "imageByInsertingIntermediate:", ?*Image, .{cache});
    }

    pub fn imageByApplyingGainMap(self: *@This(), gainmap: ?*Image) ?*Image {
        return objc.msgSend(self, "imageByApplyingGainMap:", ?*Image, .{gainmap});
    }

    pub fn imageByApplyingGainMapHeadroom(self: *@This(), gainmap: ?*Image, headroom: f32) ?*Image {
        return objc.msgSend(self, "imageByApplyingGainMap:headroom:", ?*Image, .{gainmap, headroom});
    }

    pub fn extent(self: *@This()) core_foundation.CGRect {
        return objc.msgSend(self, "extent", core_foundation.CGRect, .{});
    }

    pub fn isOpaque(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isOpaque", objc.BOOL, .{});
    }

    pub fn properties(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "properties", ?*anyopaque, .{});
    }

    pub fn definition(self: *@This()) ?*FilterShape {
        return objc.msgSend(self, "definition", ?*FilterShape, .{});
    }

    pub fn url(self: *@This()) ?*foundation.URL {
        return objc.msgSend(self, "url", ?*foundation.URL, .{});
    }

    pub fn colorSpace(self: *@This()) core_graphics.ColorSpaceRef {
        return objc.msgSend(self, "colorSpace", core_graphics.ColorSpaceRef, .{});
    }

    pub fn contentHeadroom(self: *@This()) f32 {
        return objc.msgSend(self, "contentHeadroom", f32, .{});
    }

    pub fn pixelBuffer(self: *@This()) core_video.PixelBufferRef {
        return objc.msgSend(self, "pixelBuffer", core_video.PixelBufferRef, .{});
    }

    pub fn CGImage(self: *@This()) core_graphics.ImageRef {
        return objc.msgSend(self, "CGImage", core_graphics.ImageRef, .{});
    }

    pub fn metalTexture(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "metalTexture", ?*anyopaque, .{});
    }

    pub fn regionOfInterestForImageInRect(self: *@This(), image: ?*Image, rect: core_foundation.CGRect) core_foundation.CGRect {
        return objc.msgSend(self, "regionOfInterestForImage:inRect:", core_foundation.CGRect, .{image, rect});
    }

};

pub const Format = i32;

pub const ImageOption = ?*application_services.NSString;

pub const ImageAutoAdjustmentOption = ?*application_services.NSString;

/// https://developer.apple.com/documentation/CoreImage/CIContext?language=objc
pub const Context = opaque {
    pub const InternalInfo = objc.ExternalClass("CIContext", @This(), NSObject, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn contextWithCGLContextPixelFormatColorSpaceOptions(self: *@This(), cglctx: opengl.ContextObj, pixelFormat: opengl.PixelFormatObj, colorSpace: core_graphics.ColorSpaceRef, options: ?*anyopaque, ) ?*Context {
        return objc.msgSend(self, "contextWithCGLContext:pixelFormat:colorSpace:options:", ?*Context, .{cglctx, pixelFormat, colorSpace, options, });
    }

    pub fn contextWithCGLContextPixelFormatOptions(self: *@This(), cglctx: opengl.ContextObj, pixelFormat: opengl.PixelFormatObj, options: ?*anyopaque) ?*Context {
        return objc.msgSend(self, "contextWithCGLContext:pixelFormat:options:", ?*Context, .{cglctx, pixelFormat, options});
    }

    pub fn contextWithCGContextOptions(self: *@This(), cgctx: core_graphics.ContextRef, options: ?*anyopaque) ?*Context {
        return objc.msgSend(self, "contextWithCGContext:options:", ?*Context, .{cgctx, options});
    }

    pub fn contextWithOptions(self: *@This(), options: ?*anyopaque) ?*Context {
        return objc.msgSend(self, "contextWithOptions:", ?*Context, .{options});
    }

    pub fn context(self: *@This()) ?*Context {
        return objc.msgSend(self, "context", ?*Context, .{});
    }

    pub fn initWithOptions(self: *@This(), options: ?*anyopaque) *@This() {
        return objc.msgSend(self, "initWithOptions:", *@This(), .{options});
    }

    pub fn init(self: *@This()) *@This() {
        return objc.msgSend(self, "init", *@This(), .{});
    }

    pub fn contextWithMTLDevice(self: *@This(), device: ?*anyopaque) ?*Context {
        return objc.msgSend(self, "contextWithMTLDevice:", ?*Context, .{device});
    }

    pub fn contextWithMTLDeviceOptions(self: *@This(), device: ?*anyopaque, options: ?*anyopaque) ?*Context {
        return objc.msgSend(self, "contextWithMTLDevice:options:", ?*Context, .{device, options});
    }

    pub fn contextWithMTLCommandQueue(self: *@This(), commandQueue: ?*anyopaque) ?*Context {
        return objc.msgSend(self, "contextWithMTLCommandQueue:", ?*Context, .{commandQueue});
    }

    pub fn contextWithMTLCommandQueueOptions(self: *@This(), commandQueue: ?*anyopaque, options: ?*anyopaque) ?*Context {
        return objc.msgSend(self, "contextWithMTLCommandQueue:options:", ?*Context, .{commandQueue, options});
    }

    pub fn workingColorSpace(self: *@This()) core_graphics.ColorSpaceRef {
        return objc.msgSend(self, "workingColorSpace", core_graphics.ColorSpaceRef, .{});
    }

    pub fn workingFormat(self: *@This()) Format {
        return objc.msgSend(self, "workingFormat", Format, .{});
    }

    pub fn drawImageAtPointFromRect(self: *@This(), image: ?*Image, atPoint: core_foundation.CGPoint, fromRect: core_foundation.CGRect) void {
        return objc.msgSend(self, "drawImage:atPoint:fromRect:", void, .{image, atPoint, fromRect});
    }

    pub fn drawImageInRectFromRect(self: *@This(), image: ?*Image, inRect: core_foundation.CGRect, fromRect: core_foundation.CGRect) void {
        return objc.msgSend(self, "drawImage:inRect:fromRect:", void, .{image, inRect, fromRect});
    }

    pub fn createCGLayerWithSizeInfo(self: *@This(), size: core_foundation.CGSize, info: core_foundation.DictionaryRef) core_graphics.LayerRef {
        return objc.msgSend(self, "createCGLayerWithSize:info:", core_graphics.LayerRef, .{size, info});
    }

    pub fn renderToBitmapRowBytesBoundsFormatColorSpace(self: *@This(), image: ?*Image, data: ?*anyopaque, rowBytes: objc.ptrdiff_t, bounds: core_foundation.CGRect, format: Format, colorSpace: core_graphics.ColorSpaceRef, ) void {
        return objc.msgSend(self, "render:toBitmap:rowBytes:bounds:format:colorSpace:", void, .{image, data, rowBytes, bounds, format, colorSpace, });
    }

    pub fn renderToIOSurfaceBoundsColorSpace(self: *@This(), image: ?*Image, surface: io_surface.Ref, bounds: core_foundation.CGRect, colorSpace: core_graphics.ColorSpaceRef, ) void {
        return objc.msgSend(self, "render:toIOSurface:bounds:colorSpace:", void, .{image, surface, bounds, colorSpace, });
    }

    pub fn renderToCVPixelBuffer(self: *@This(), image: ?*Image, buffer: core_video.PixelBufferRef) void {
        return objc.msgSend(self, "render:toCVPixelBuffer:", void, .{image, buffer});
    }

    pub fn renderToCVPixelBufferBoundsColorSpace(self: *@This(), image: ?*Image, buffer: core_video.PixelBufferRef, bounds: core_foundation.CGRect, colorSpace: core_graphics.ColorSpaceRef, ) void {
        return objc.msgSend(self, "render:toCVPixelBuffer:bounds:colorSpace:", void, .{image, buffer, bounds, colorSpace, });
    }

    pub fn renderToMTLTextureCommandBufferBoundsColorSpace(self: *@This(), image: ?*Image, texture: ?*anyopaque, commandBuffer: ?*anyopaque, bounds: core_foundation.CGRect, colorSpace: core_graphics.ColorSpaceRef, ) void {
        return objc.msgSend(self, "render:toMTLTexture:commandBuffer:bounds:colorSpace:", void, .{image, texture, commandBuffer, bounds, colorSpace, });
    }

    pub fn reclaimResources(self: *@This()) void {
        return objc.msgSend(self, "reclaimResources", void, .{});
    }

    pub fn clearCaches(self: *@This()) void {
        return objc.msgSend(self, "clearCaches", void, .{});
    }

    pub fn inputImageMaximumSize(self: *@This()) core_foundation.CGSize {
        return objc.msgSend(self, "inputImageMaximumSize", core_foundation.CGSize, .{});
    }

    pub fn outputImageMaximumSize(self: *@This()) core_foundation.CGSize {
        return objc.msgSend(self, "outputImageMaximumSize", core_foundation.CGSize, .{});
    }

};

pub const ContextOption = ?*application_services.NSString;

pub const ImageRepresentationOption = ?*application_services.NSString;

/// https://developer.apple.com/documentation/CoreImage/CIFilterConstructor?language=objc
pub const FilterConstructor = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn filterWithName(self: *@This(), name: ?*application_services.NSString) ?*Filter {
        return objc.msgSend(self, "filterWithName:", ?*Filter, .{name});
    }

};

/// https://developer.apple.com/documentation/CoreImage/CIFilter?language=objc
pub const Filter = opaque {
    pub const InternalInfo = objc.ExternalClass("CIFilter", @This(), NSObject, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn name(self: *@This()) ?*application_services.NSString {
        return objc.msgSend(self, "name", ?*application_services.NSString, .{});
    }

    pub fn setName(self: *@This(), aString: ?*NSString) void {
        return objc.msgSend(self, "setName:", void, .{aString});
    }

    pub fn setDefaults(self: *@This()) void {
        return objc.msgSend(self, "setDefaults", void, .{});
    }

    pub fn applyArgumentsOptions(self: *@This(), k: ?*Kernel, args: ?*application_services.NSArray, dict: ?*anyopaque) ?*Image {
        return objc.msgSend(self, "apply:arguments:options:", ?*Image, .{k, args, dict});
    }

    pub fn apply(self: *@This(), k: ?*Kernel) ?*Image {
        return objc.msgSend(self, "apply:", ?*Image, .{k});
    }

    pub fn outputImage(self: *@This()) ?*Image {
        return objc.msgSend(self, "outputImage", ?*Image, .{});
    }

    pub fn isEnabled(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isEnabled", objc.BOOL, .{});
    }

    pub fn setEnabled(self: *@This(), enabled: objc.BOOL) void {
        return objc.msgSend(self, "setEnabled:", void, .{enabled});
    }

    pub fn inputKeys(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "inputKeys", ?*anyopaque, .{});
    }

    pub fn outputKeys(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "outputKeys", ?*anyopaque, .{});
    }

    pub fn attributes(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "attributes", ?*anyopaque, .{});
    }

};

/// https://developer.apple.com/documentation/CoreImage/CIFilter?language=objc
pub const Filter = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn customAttributes(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "customAttributes", ?*anyopaque, .{});
    }

    pub fn outputImage(self: *@This()) ?*Image {
        return objc.msgSend(self, "outputImage", ?*Image, .{});
    }

};

pub const KernelROICallback = *const fn(i32, core_foundation.CGRect) callconv(.C) core_foundation.CGRect;

/// https://developer.apple.com/documentation/CoreImage/CIKernel?language=objc
pub const Kernel = opaque {
    pub const InternalInfo = objc.ExternalClass("CIKernel", @This(), NSObject, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn kernelsWithString(self: *@This(), string: ?*NSString) ?*anyopaque {
        return objc.msgSend(self, "kernelsWithString:", ?*anyopaque, .{string});
    }

    pub fn kernelsWithMetalStringError(self: *@This(), source: ?*NSString, @"error": ?*?*foundation.Error) ?*anyopaque {
        return objc.msgSend(self, "kernelsWithMetalString:error:", ?*anyopaque, .{source, @"error"});
    }

    pub fn kernelWithString(self: *@This(), string: ?*NSString) *@This() {
        return objc.msgSend(self, "kernelWithString:", *@This(), .{string});
    }

    pub fn kernelWithFunctionNameFromMetalLibraryDataError(self: *@This(), name: ?*NSString, data: ?*foundation.Data, @"error": ?*?*foundation.Error) *@This() {
        return objc.msgSend(self, "kernelWithFunctionName:fromMetalLibraryData:error:", *@This(), .{name, data, @"error"});
    }

    pub fn kernelWithFunctionNameFromMetalLibraryDataOutputPixelFormatError(self: *@This(), name: ?*NSString, data: ?*foundation.Data, format: Format, @"error": ?*?*foundation.Error, ) *@This() {
        return objc.msgSend(self, "kernelWithFunctionName:fromMetalLibraryData:outputPixelFormat:error:", *@This(), .{name, data, format, @"error", });
    }

    pub fn kernelNamesFromMetalLibraryData(self: *@This(), data: ?*foundation.Data) ?*anyopaque {
        return objc.msgSend(self, "kernelNamesFromMetalLibraryData:", ?*anyopaque, .{data});
    }

    pub fn setROISelector(self: *@This(), method: *objc.SEL) void {
        return objc.msgSend(self, "setROISelector:", void, .{method});
    }

    pub fn applyWithExtentRoiCallbackArguments(self: *@This(), extent: core_foundation.CGRect, callback: KernelROICallback, args: ?*anyopaque) ?*Image {
        return objc.msgSend(self, "applyWithExtent:roiCallback:arguments:", ?*Image, .{extent, callback, args});
    }

    pub fn name(self: *@This()) ?*NSString {
        return objc.msgSend(self, "name", ?*NSString, .{});
    }

};

/// https://developer.apple.com/documentation/CoreImage/CIColorKernel?language=objc
pub const ColorKernel = opaque {
    pub const InternalInfo = objc.ExternalClass("CIColorKernel", @This(), Kernel, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn kernelWithString(self: *@This(), string: ?*NSString) *@This() {
        return objc.msgSend(self, "kernelWithString:", *@This(), .{string});
    }

    pub fn applyWithExtentArguments(self: *@This(), extent: core_foundation.CGRect, args: ?*anyopaque) ?*Image {
        return objc.msgSend(self, "applyWithExtent:arguments:", ?*Image, .{extent, args});
    }

};

/// https://developer.apple.com/documentation/CoreImage/CIWarpKernel?language=objc
pub const WarpKernel = opaque {
    pub const InternalInfo = objc.ExternalClass("CIWarpKernel", @This(), Kernel, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn kernelWithString(self: *@This(), string: ?*NSString) *@This() {
        return objc.msgSend(self, "kernelWithString:", *@This(), .{string});
    }

    pub fn applyWithExtentRoiCallbackInputImageArguments(self: *@This(), extent: core_foundation.CGRect, callback: KernelROICallback, image: ?*Image, args: ?*anyopaque, ) ?*Image {
        return objc.msgSend(self, "applyWithExtent:roiCallback:inputImage:arguments:", ?*Image, .{extent, callback, image, args, });
    }

};

/// https://developer.apple.com/documentation/CoreImage/CIBlendKernel?language=objc
pub const BlendKernel = opaque {
    pub const InternalInfo = objc.ExternalClass("CIBlendKernel", @This(), ColorKernel, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn kernelWithString(self: *@This(), string: ?*NSString) *@This() {
        return objc.msgSend(self, "kernelWithString:", *@This(), .{string});
    }

    pub fn applyWithForegroundBackground(self: *@This(), foreground: ?*Image, background: ?*Image) ?*Image {
        return objc.msgSend(self, "applyWithForeground:background:", ?*Image, .{foreground, background});
    }

    pub fn applyWithForegroundBackgroundColorSpace(self: *@This(), foreground: ?*Image, background: ?*Image, colorSpace: core_graphics.ColorSpaceRef) ?*Image {
        return objc.msgSend(self, "applyWithForeground:background:colorSpace:", ?*Image, .{foreground, background, colorSpace});
    }

};

/// https://developer.apple.com/documentation/CoreImage/CIDetector?language=objc
pub const Detector = opaque {
    pub const InternalInfo = objc.ExternalClass("CIDetector", @This(), NSObject, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn detectorOfTypeContextOptions(self: *@This(), @"type": ?*NSString, context: ?*Context, options: ?*anyopaque) ?*Detector {
        return objc.msgSend(self, "detectorOfType:context:options:", ?*Detector, .{@"type", context, options});
    }

    pub fn featuresInImage(self: *@This(), image: ?*Image) ?*anyopaque {
        return objc.msgSend(self, "featuresInImage:", ?*anyopaque, .{image});
    }

    pub fn featuresInImageOptions(self: *@This(), image: ?*Image, options: ?*anyopaque) ?*anyopaque {
        return objc.msgSend(self, "featuresInImage:options:", ?*anyopaque, .{image, options});
    }

};

/// https://developer.apple.com/documentation/CoreImage/CIFeature?language=objc
pub const Feature = opaque {
    pub const InternalInfo = objc.ExternalClass("CIFeature", @This(), NSObject, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn @"type"(self: *@This()) ?*NSString {
        return objc.msgSend(self, "type", ?*NSString, .{});
    }

    pub fn bounds(self: *@This()) core_foundation.CGRect {
        return objc.msgSend(self, "bounds", core_foundation.CGRect, .{});
    }

};

/// https://developer.apple.com/documentation/CoreImage/CIFaceFeature?language=objc
pub const FaceFeature = opaque {
    pub const InternalInfo = objc.ExternalClass("CIFaceFeature", @This(), Feature, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;
};

/// https://developer.apple.com/documentation/CoreImage/CIRectangleFeature?language=objc
pub const RectangleFeature = opaque {
    pub const InternalInfo = objc.ExternalClass("CIRectangleFeature", @This(), Feature, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn bounds(self: *@This()) core_foundation.CGRect {
        return objc.msgSend(self, "bounds", core_foundation.CGRect, .{});
    }

    pub fn topLeft(self: *@This()) core_foundation.CGPoint {
        return objc.msgSend(self, "topLeft", core_foundation.CGPoint, .{});
    }

    pub fn topRight(self: *@This()) core_foundation.CGPoint {
        return objc.msgSend(self, "topRight", core_foundation.CGPoint, .{});
    }

    pub fn bottomLeft(self: *@This()) core_foundation.CGPoint {
        return objc.msgSend(self, "bottomLeft", core_foundation.CGPoint, .{});
    }

    pub fn bottomRight(self: *@This()) core_foundation.CGPoint {
        return objc.msgSend(self, "bottomRight", core_foundation.CGPoint, .{});
    }

};

/// https://developer.apple.com/documentation/CoreImage/CIQRCodeFeature?language=objc
pub const QRCodeFeature = opaque {
    pub const InternalInfo = objc.ExternalClass("CIQRCodeFeature", @This(), Feature, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn bounds(self: *@This()) core_foundation.CGRect {
        return objc.msgSend(self, "bounds", core_foundation.CGRect, .{});
    }

    pub fn topLeft(self: *@This()) core_foundation.CGPoint {
        return objc.msgSend(self, "topLeft", core_foundation.CGPoint, .{});
    }

    pub fn topRight(self: *@This()) core_foundation.CGPoint {
        return objc.msgSend(self, "topRight", core_foundation.CGPoint, .{});
    }

    pub fn bottomLeft(self: *@This()) core_foundation.CGPoint {
        return objc.msgSend(self, "bottomLeft", core_foundation.CGPoint, .{});
    }

    pub fn bottomRight(self: *@This()) core_foundation.CGPoint {
        return objc.msgSend(self, "bottomRight", core_foundation.CGPoint, .{});
    }

    pub fn messageString(self: *@This()) ?*NSString {
        return objc.msgSend(self, "messageString", ?*NSString, .{});
    }

    pub fn symbolDescriptor(self: *@This()) ?*QRCodeDescriptor {
        return objc.msgSend(self, "symbolDescriptor", ?*QRCodeDescriptor, .{});
    }

};

/// https://developer.apple.com/documentation/CoreImage/CITextFeature?language=objc
pub const TextFeature = opaque {
    pub const InternalInfo = objc.ExternalClass("CITextFeature", @This(), Feature, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn bounds(self: *@This()) core_foundation.CGRect {
        return objc.msgSend(self, "bounds", core_foundation.CGRect, .{});
    }

    pub fn topLeft(self: *@This()) core_foundation.CGPoint {
        return objc.msgSend(self, "topLeft", core_foundation.CGPoint, .{});
    }

    pub fn topRight(self: *@This()) core_foundation.CGPoint {
        return objc.msgSend(self, "topRight", core_foundation.CGPoint, .{});
    }

    pub fn bottomLeft(self: *@This()) core_foundation.CGPoint {
        return objc.msgSend(self, "bottomLeft", core_foundation.CGPoint, .{});
    }

    pub fn bottomRight(self: *@This()) core_foundation.CGPoint {
        return objc.msgSend(self, "bottomRight", core_foundation.CGPoint, .{});
    }

    pub fn subFeatures(self: *@This()) ?*NSArray {
        return objc.msgSend(self, "subFeatures", ?*NSArray, .{});
    }

};

/// https://developer.apple.com/documentation/CoreImage/CIImageProcessorKernel?language=objc
pub const ImageProcessorKernel = opaque {
    pub const InternalInfo = objc.ExternalClass("CIImageProcessorKernel", @This(), NSObject, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn roiForInputArgumentsOutputRect(self: *@This(), input: i32, arguments: ?*anyopaque, outputRect: core_foundation.CGRect) core_foundation.CGRect {
        return objc.msgSend(self, "roiForInput:arguments:outputRect:", core_foundation.CGRect, .{input, arguments, outputRect});
    }

    pub fn roiTileArrayForInputArgumentsOutputRect(self: *@This(), input: i32, arguments: ?*anyopaque, outputRect: core_foundation.CGRect) ?*anyopaque {
        return objc.msgSend(self, "roiTileArrayForInput:arguments:outputRect:", ?*anyopaque, .{input, arguments, outputRect});
    }

    pub fn formatForInputAtIndex(self: *@This(), input: i32) Format {
        return objc.msgSend(self, "formatForInputAtIndex:", Format, .{input});
    }

    pub fn applyWithExtentInputsArgumentsError(self: *@This(), extent: core_foundation.CGRect, inputs: ?*anyopaque, args: ?*anyopaque, @"error": ?*?*foundation.Error, ) ?*Image {
        return objc.msgSend(self, "applyWithExtent:inputs:arguments:error:", ?*Image, .{extent, inputs, args, @"error", });
    }

    pub fn outputFormat(self: *@This()) Format {
        return objc.msgSend(self, "outputFormat", Format, .{});
    }

    pub fn outputIsOpaque(self: *@This()) core_graphics.bool {
        return objc.msgSend(self, "outputIsOpaque", core_graphics.bool, .{});
    }

    pub fn synchronizeInputs(self: *@This()) core_graphics.bool {
        return objc.msgSend(self, "synchronizeInputs", core_graphics.bool, .{});
    }

};

/// https://developer.apple.com/documentation/CoreImage/CIImageProcessorInput?language=objc
pub const ImageProcessorInput = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn region(self: *@This()) core_foundation.CGRect {
        return objc.msgSend(self, "region", core_foundation.CGRect, .{});
    }

    pub fn bytesPerRow(self: *@This()) objc.size_t {
        return objc.msgSend(self, "bytesPerRow", objc.size_t, .{});
    }

    pub fn format(self: *@This()) Format {
        return objc.msgSend(self, "format", Format, .{});
    }

    pub fn baseAddress(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "baseAddress", ?*anyopaque, .{});
    }

    pub fn surface(self: *@This()) io_surface.Ref {
        return objc.msgSend(self, "surface", io_surface.Ref, .{});
    }

    pub fn pixelBuffer(self: *@This()) core_video.PixelBufferRef {
        return objc.msgSend(self, "pixelBuffer", core_video.PixelBufferRef, .{});
    }

    pub fn metalTexture(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "metalTexture", ?*anyopaque, .{});
    }

    pub fn digest(self: *@This()) objc.uint64_t {
        return objc.msgSend(self, "digest", objc.uint64_t, .{});
    }

    pub fn roiTileIndex(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "roiTileIndex", objc.NSUInteger, .{});
    }

    pub fn roiTileCount(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "roiTileCount", objc.NSUInteger, .{});
    }

};

/// https://developer.apple.com/documentation/CoreImage/CIImageProcessorOutput?language=objc
pub const ImageProcessorOutput = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn region(self: *@This()) core_foundation.CGRect {
        return objc.msgSend(self, "region", core_foundation.CGRect, .{});
    }

    pub fn bytesPerRow(self: *@This()) objc.size_t {
        return objc.msgSend(self, "bytesPerRow", objc.size_t, .{});
    }

    pub fn format(self: *@This()) Format {
        return objc.msgSend(self, "format", Format, .{});
    }

    pub fn baseAddress(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "baseAddress", ?*anyopaque, .{});
    }

    pub fn surface(self: *@This()) io_surface.Ref {
        return objc.msgSend(self, "surface", io_surface.Ref, .{});
    }

    pub fn pixelBuffer(self: *@This()) core_video.PixelBufferRef {
        return objc.msgSend(self, "pixelBuffer", core_video.PixelBufferRef, .{});
    }

    pub fn metalTexture(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "metalTexture", ?*anyopaque, .{});
    }

    pub fn metalCommandBuffer(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "metalCommandBuffer", ?*anyopaque, .{});
    }

    pub fn digest(self: *@This()) objc.uint64_t {
        return objc.msgSend(self, "digest", objc.uint64_t, .{});
    }

};

/// https://developer.apple.com/documentation/CoreImage/CIImageAccumulator?language=objc
pub const ImageAccumulator = opaque {
    pub const InternalInfo = objc.ExternalClass("CIImageAccumulator", @This(), NSObject, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn imageAccumulatorWithExtentFormat(self: *@This(), extent: core_foundation.CGRect, format: Format) *@This() {
        return objc.msgSend(self, "imageAccumulatorWithExtent:format:", *@This(), .{extent, format});
    }

    pub fn imageAccumulatorWithExtentFormatColorSpace(self: *@This(), extent: core_foundation.CGRect, format: Format, colorSpace: core_graphics.ColorSpaceRef) *@This() {
        return objc.msgSend(self, "imageAccumulatorWithExtent:format:colorSpace:", *@This(), .{extent, format, colorSpace});
    }

    pub fn initWithExtentFormat(self: *@This(), extent: core_foundation.CGRect, format: Format) *@This() {
        return objc.msgSend(self, "initWithExtent:format:", *@This(), .{extent, format});
    }

    pub fn initWithExtentFormatColorSpace(self: *@This(), extent: core_foundation.CGRect, format: Format, colorSpace: core_graphics.ColorSpaceRef) *@This() {
        return objc.msgSend(self, "initWithExtent:format:colorSpace:", *@This(), .{extent, format, colorSpace});
    }

    pub fn image(self: *@This()) ?*Image {
        return objc.msgSend(self, "image", ?*Image, .{});
    }

    pub fn setImage(self: *@This(), image: ?*Image) void {
        return objc.msgSend(self, "setImage:", void, .{image});
    }

    pub fn setImageDirtyRect(self: *@This(), image: ?*Image, dirtyRect: core_foundation.CGRect) void {
        return objc.msgSend(self, "setImage:dirtyRect:", void, .{image, dirtyRect});
    }

    pub fn clear(self: *@This()) void {
        return objc.msgSend(self, "clear", void, .{});
    }

    pub fn extent(self: *@This()) core_foundation.CGRect {
        return objc.msgSend(self, "extent", core_foundation.CGRect, .{});
    }

    pub fn format(self: *@This()) Format {
        return objc.msgSend(self, "format", Format, .{});
    }

};

/// https://developer.apple.com/documentation/CoreImage/CIFilterShape?language=objc
pub const FilterShape = opaque {
    pub const InternalInfo = objc.ExternalClass("CIFilterShape", @This(), NSObject, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn shapeWithRect(self: *@This(), r: core_foundation.CGRect) *@This() {
        return objc.msgSend(self, "shapeWithRect:", *@This(), .{r});
    }

    pub fn initWithRect(self: *@This(), r: core_foundation.CGRect) *@This() {
        return objc.msgSend(self, "initWithRect:", *@This(), .{r});
    }

    pub fn transformByInterior(self: *@This(), m: core_foundation.CGAffineTransform, flag: objc.BOOL) ?*FilterShape {
        return objc.msgSend(self, "transformBy:interior:", ?*FilterShape, .{m, flag});
    }

    pub fn insetByXY(self: *@This(), dx: i32, dy: i32) ?*FilterShape {
        return objc.msgSend(self, "insetByX:Y:", ?*FilterShape, .{dx, dy});
    }

    pub fn unionWith(self: *@This(), s2: ?*FilterShape) ?*FilterShape {
        return objc.msgSend(self, "unionWith:", ?*FilterShape, .{s2});
    }

    pub fn unionWithRect(self: *@This(), r: core_foundation.CGRect) ?*FilterShape {
        return objc.msgSend(self, "unionWithRect:", ?*FilterShape, .{r});
    }

    pub fn intersectWith(self: *@This(), s2: ?*FilterShape) ?*FilterShape {
        return objc.msgSend(self, "intersectWith:", ?*FilterShape, .{s2});
    }

    pub fn intersectWithRect(self: *@This(), r: core_foundation.CGRect) ?*FilterShape {
        return objc.msgSend(self, "intersectWithRect:", ?*FilterShape, .{r});
    }

    pub fn extent(self: *@This()) core_foundation.CGRect {
        return objc.msgSend(self, "extent", core_foundation.CGRect, .{});
    }

};

/// https://developer.apple.com/documentation/CoreImage/CISampler?language=objc
pub const Sampler = opaque {
    pub const InternalInfo = objc.ExternalClass("CISampler", @This(), NSObject, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn samplerWithImage(self: *@This(), im: ?*Image) *@This() {
        return objc.msgSend(self, "samplerWithImage:", *@This(), .{im});
    }

    pub fn samplerWithImageKeysAndValues(self: *@This(), im: ?*Image, key0: *objc.Id) *@This() {
        return objc.msgSend(self, "samplerWithImage:keysAndValues:", *@This(), .{im, key0});
    }

    pub fn samplerWithImageOptions(self: *@This(), im: ?*Image, dict: ?*NSDictionary) *@This() {
        return objc.msgSend(self, "samplerWithImage:options:", *@This(), .{im, dict});
    }

    pub fn initWithImage(self: *@This(), im: ?*Image) *@This() {
        return objc.msgSend(self, "initWithImage:", *@This(), .{im});
    }

    pub fn initWithImageKeysAndValues(self: *@This(), im: ?*Image, key0: *objc.Id) *@This() {
        return objc.msgSend(self, "initWithImage:keysAndValues:", *@This(), .{im, key0});
    }

    pub fn initWithImageOptions(self: *@This(), im: ?*Image, dict: ?*NSDictionary) *@This() {
        return objc.msgSend(self, "initWithImage:options:", *@This(), .{im, dict});
    }

    pub fn definition(self: *@This()) ?*FilterShape {
        return objc.msgSend(self, "definition", ?*FilterShape, .{});
    }

    pub fn extent(self: *@This()) core_foundation.CGRect {
        return objc.msgSend(self, "extent", core_foundation.CGRect, .{});
    }

};

pub const RAWFilterOption = ?*NSString;

/// https://developer.apple.com/documentation/CoreImage/CIRAWFilter?language=objc
pub const RAWFilter = opaque {
    pub const InternalInfo = objc.ExternalClass("CIRAWFilter", @This(), Filter, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn supportedCameraModels(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "supportedCameraModels", ?*anyopaque, .{});
    }

    pub fn supportedDecoderVersions(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "supportedDecoderVersions", ?*anyopaque, .{});
    }

    pub fn nativeSize(self: *@This()) core_foundation.CGSize {
        return objc.msgSend(self, "nativeSize", core_foundation.CGSize, .{});
    }

    pub fn properties(self: *@This()) ?*NSDictionary {
        return objc.msgSend(self, "properties", ?*NSDictionary, .{});
    }

    pub fn setOrientation(self: *@This(), orientation: image_io.PropertyOrientation) void {
        return objc.msgSend(self, "setOrientation:", void, .{orientation});
    }

    pub fn orientation(self: *@This()) image_io.PropertyOrientation {
        return objc.msgSend(self, "orientation", image_io.PropertyOrientation, .{});
    }

    pub fn isDraftModeEnabled(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isDraftModeEnabled", objc.BOOL, .{});
    }

    pub fn setDraftModeEnabled(self: *@This(), draftModeEnabled: objc.BOOL) void {
        return objc.msgSend(self, "setDraftModeEnabled:", void, .{draftModeEnabled});
    }

    pub fn setDecoderVersion(self: *@This(), decoderVersion: RAWDecoderVersion) void {
        return objc.msgSend(self, "setDecoderVersion:", void, .{decoderVersion});
    }

    pub fn decoderVersion(self: *@This()) RAWDecoderVersion {
        return objc.msgSend(self, "decoderVersion", RAWDecoderVersion, .{});
    }

    pub fn setScaleFactor(self: *@This(), scaleFactor: f32) void {
        return objc.msgSend(self, "setScaleFactor:", void, .{scaleFactor});
    }

    pub fn scaleFactor(self: *@This()) f32 {
        return objc.msgSend(self, "scaleFactor", f32, .{});
    }

    pub fn setExposure(self: *@This(), exposure: f32) void {
        return objc.msgSend(self, "setExposure:", void, .{exposure});
    }

    pub fn exposure(self: *@This()) f32 {
        return objc.msgSend(self, "exposure", f32, .{});
    }

    pub fn setBaselineExposure(self: *@This(), baselineExposure: f32) void {
        return objc.msgSend(self, "setBaselineExposure:", void, .{baselineExposure});
    }

    pub fn baselineExposure(self: *@This()) f32 {
        return objc.msgSend(self, "baselineExposure", f32, .{});
    }

    pub fn setShadowBias(self: *@This(), shadowBias: f32) void {
        return objc.msgSend(self, "setShadowBias:", void, .{shadowBias});
    }

    pub fn shadowBias(self: *@This()) f32 {
        return objc.msgSend(self, "shadowBias", f32, .{});
    }

    pub fn setBoostAmount(self: *@This(), boostAmount: f32) void {
        return objc.msgSend(self, "setBoostAmount:", void, .{boostAmount});
    }

    pub fn boostAmount(self: *@This()) f32 {
        return objc.msgSend(self, "boostAmount", f32, .{});
    }

    pub fn setBoostShadowAmount(self: *@This(), boostShadowAmount: f32) void {
        return objc.msgSend(self, "setBoostShadowAmount:", void, .{boostShadowAmount});
    }

    pub fn boostShadowAmount(self: *@This()) f32 {
        return objc.msgSend(self, "boostShadowAmount", f32, .{});
    }

    pub fn setGamutMappingEnabled(self: *@This(), gamutMappingEnabled: objc.BOOL) void {
        return objc.msgSend(self, "setGamutMappingEnabled:", void, .{gamutMappingEnabled});
    }

    pub fn isGamutMappingEnabled(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isGamutMappingEnabled", objc.BOOL, .{});
    }

    pub fn isLensCorrectionSupported(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isLensCorrectionSupported", objc.BOOL, .{});
    }

    pub fn setLensCorrectionEnabled(self: *@This(), lensCorrectionEnabled: objc.BOOL) void {
        return objc.msgSend(self, "setLensCorrectionEnabled:", void, .{lensCorrectionEnabled});
    }

    pub fn isLensCorrectionEnabled(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isLensCorrectionEnabled", objc.BOOL, .{});
    }

    pub fn isLuminanceNoiseReductionSupported(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isLuminanceNoiseReductionSupported", objc.BOOL, .{});
    }

    pub fn setLuminanceNoiseReductionAmount(self: *@This(), luminanceNoiseReductionAmount: f32) void {
        return objc.msgSend(self, "setLuminanceNoiseReductionAmount:", void, .{luminanceNoiseReductionAmount});
    }

    pub fn luminanceNoiseReductionAmount(self: *@This()) f32 {
        return objc.msgSend(self, "luminanceNoiseReductionAmount", f32, .{});
    }

    pub fn isColorNoiseReductionSupported(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isColorNoiseReductionSupported", objc.BOOL, .{});
    }

    pub fn setColorNoiseReductionAmount(self: *@This(), colorNoiseReductionAmount: f32) void {
        return objc.msgSend(self, "setColorNoiseReductionAmount:", void, .{colorNoiseReductionAmount});
    }

    pub fn colorNoiseReductionAmount(self: *@This()) f32 {
        return objc.msgSend(self, "colorNoiseReductionAmount", f32, .{});
    }

    pub fn isSharpnessSupported(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isSharpnessSupported", objc.BOOL, .{});
    }

    pub fn sharpnessAmount(self: *@This()) f32 {
        return objc.msgSend(self, "sharpnessAmount", f32, .{});
    }

    pub fn setSharpnessAmount(self: *@This(), sharpnessAmount: f32) void {
        return objc.msgSend(self, "setSharpnessAmount:", void, .{sharpnessAmount});
    }

    pub fn isContrastSupported(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isContrastSupported", objc.BOOL, .{});
    }

    pub fn setContrastAmount(self: *@This(), contrastAmount: f32) void {
        return objc.msgSend(self, "setContrastAmount:", void, .{contrastAmount});
    }

    pub fn contrastAmount(self: *@This()) f32 {
        return objc.msgSend(self, "contrastAmount", f32, .{});
    }

    pub fn isDetailSupported(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isDetailSupported", objc.BOOL, .{});
    }

    pub fn detailAmount(self: *@This()) f32 {
        return objc.msgSend(self, "detailAmount", f32, .{});
    }

    pub fn setDetailAmount(self: *@This(), detailAmount: f32) void {
        return objc.msgSend(self, "setDetailAmount:", void, .{detailAmount});
    }

    pub fn isMoireReductionSupported(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isMoireReductionSupported", objc.BOOL, .{});
    }

    pub fn moireReductionAmount(self: *@This()) f32 {
        return objc.msgSend(self, "moireReductionAmount", f32, .{});
    }

    pub fn setMoireReductionAmount(self: *@This(), moireReductionAmount: f32) void {
        return objc.msgSend(self, "setMoireReductionAmount:", void, .{moireReductionAmount});
    }

    pub fn isLocalToneMapSupported(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isLocalToneMapSupported", objc.BOOL, .{});
    }

    pub fn localToneMapAmount(self: *@This()) f32 {
        return objc.msgSend(self, "localToneMapAmount", f32, .{});
    }

    pub fn setLocalToneMapAmount(self: *@This(), localToneMapAmount: f32) void {
        return objc.msgSend(self, "setLocalToneMapAmount:", void, .{localToneMapAmount});
    }

    pub fn setExtendedDynamicRangeAmount(self: *@This(), extendedDynamicRangeAmount: f32) void {
        return objc.msgSend(self, "setExtendedDynamicRangeAmount:", void, .{extendedDynamicRangeAmount});
    }

    pub fn extendedDynamicRangeAmount(self: *@This()) f32 {
        return objc.msgSend(self, "extendedDynamicRangeAmount", f32, .{});
    }

    pub fn setNeutralChromaticity(self: *@This(), neutralChromaticity: core_foundation.CGPoint) void {
        return objc.msgSend(self, "setNeutralChromaticity:", void, .{neutralChromaticity});
    }

    pub fn neutralChromaticity(self: *@This()) core_foundation.CGPoint {
        return objc.msgSend(self, "neutralChromaticity", core_foundation.CGPoint, .{});
    }

    pub fn neutralLocation(self: *@This()) core_foundation.CGPoint {
        return objc.msgSend(self, "neutralLocation", core_foundation.CGPoint, .{});
    }

    pub fn setNeutralLocation(self: *@This(), neutralLocation: core_foundation.CGPoint) void {
        return objc.msgSend(self, "setNeutralLocation:", void, .{neutralLocation});
    }

    pub fn neutralTemperature(self: *@This()) f32 {
        return objc.msgSend(self, "neutralTemperature", f32, .{});
    }

    pub fn setNeutralTemperature(self: *@This(), neutralTemperature: f32) void {
        return objc.msgSend(self, "setNeutralTemperature:", void, .{neutralTemperature});
    }

    pub fn neutralTint(self: *@This()) f32 {
        return objc.msgSend(self, "neutralTint", f32, .{});
    }

    pub fn setNeutralTint(self: *@This(), neutralTint: f32) void {
        return objc.msgSend(self, "setNeutralTint:", void, .{neutralTint});
    }

    pub fn linearSpaceFilter(self: *@This()) ?*Filter {
        return objc.msgSend(self, "linearSpaceFilter", ?*Filter, .{});
    }

    pub fn setLinearSpaceFilter(self: *@This(), linearSpaceFilter: ?*Filter) void {
        return objc.msgSend(self, "setLinearSpaceFilter:", void, .{linearSpaceFilter});
    }

    pub fn previewImage(self: *@This()) ?*Image {
        return objc.msgSend(self, "previewImage", ?*Image, .{});
    }

    pub fn portraitEffectsMatte(self: *@This()) ?*Image {
        return objc.msgSend(self, "portraitEffectsMatte", ?*Image, .{});
    }

    pub fn semanticSegmentationSkinMatte(self: *@This()) ?*Image {
        return objc.msgSend(self, "semanticSegmentationSkinMatte", ?*Image, .{});
    }

    pub fn semanticSegmentationHairMatte(self: *@This()) ?*Image {
        return objc.msgSend(self, "semanticSegmentationHairMatte", ?*Image, .{});
    }

    pub fn semanticSegmentationGlassesMatte(self: *@This()) ?*Image {
        return objc.msgSend(self, "semanticSegmentationGlassesMatte", ?*Image, .{});
    }

    pub fn semanticSegmentationSkyMatte(self: *@This()) ?*Image {
        return objc.msgSend(self, "semanticSegmentationSkyMatte", ?*Image, .{});
    }

    pub fn semanticSegmentationTeethMatte(self: *@This()) ?*Image {
        return objc.msgSend(self, "semanticSegmentationTeethMatte", ?*Image, .{});
    }

    pub fn filterWithImageURL(self: *@This(), url: ?*NSURL) *@This() {
        return objc.msgSend(self, "filterWithImageURL:", *@This(), .{url});
    }

    pub fn filterWithImageDataIdentifierHint(self: *@This(), data: ?*NSData, identifierHint: ?*NSString) *@This() {
        return objc.msgSend(self, "filterWithImageData:identifierHint:", *@This(), .{data, identifierHint});
    }

    pub fn filterWithCVPixelBufferProperties(self: *@This(), buffer: core_video.PixelBufferRef, properties: ?*NSDictionary) *@This() {
        return objc.msgSend(self, "filterWithCVPixelBuffer:properties:", *@This(), .{buffer, properties});
    }

};

pub const RAWDecoderVersion = ?*NSString;

/// https://developer.apple.com/documentation/CoreImage/CIRenderDestination?language=objc
pub const RenderDestination = opaque {
    pub const InternalInfo = objc.ExternalClass("CIRenderDestination", @This(), NSObject, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn initWithPixelBuffer(self: *@This(), pixelBuffer: core_video.PixelBufferRef) *@This() {
        return objc.msgSend(self, "initWithPixelBuffer:", *@This(), .{pixelBuffer});
    }

    pub fn initWithIOSurface(self: *@This(), surface: ?*io_surface.) *@This() {
        return objc.msgSend(self, "initWithIOSurface:", *@This(), .{surface});
    }

    pub fn initWithMTLTextureCommandBuffer(self: *@This(), texture: ?*anyopaque, commandBuffer: ?*anyopaque) *@This() {
        return objc.msgSend(self, "initWithMTLTexture:commandBuffer:", *@This(), .{texture, commandBuffer});
    }

    pub fn initWithWidthHeightPixelFormatCommandBufferMtlTextureProvider(self: *@This(), width: objc.NSUInteger, height: objc.NSUInteger, pixelFormat: metal.PixelFormat, commandBuffer: ?*anyopaque, block: *const fn() callconv(.C) ?*anyopaque, ) *@This() {
        return objc.msgSend(self, "initWithWidth:height:pixelFormat:commandBuffer:mtlTextureProvider:", *@This(), .{width, height, pixelFormat, commandBuffer, block, });
    }

    pub fn initWithGLTextureTargetWidthHeight(self: *@This(), texture: u32, target: u32, width: objc.NSUInteger, height: objc.NSUInteger, ) *@This() {
        return objc.msgSend(self, "initWithGLTexture:target:width:height:", *@This(), .{texture, target, width, height, });
    }

    pub fn initWithBitmapDataWidthHeightBytesPerRowFormat(self: *@This(), data: ?*anyopaque, width: objc.NSUInteger, height: objc.NSUInteger, bytesPerRow: objc.NSUInteger, format: Format, ) *@This() {
        return objc.msgSend(self, "initWithBitmapData:width:height:bytesPerRow:format:", *@This(), .{data, width, height, bytesPerRow, format, });
    }

    pub fn width(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "width", objc.NSUInteger, .{});
    }

    pub fn height(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "height", objc.NSUInteger, .{});
    }

    pub fn setAlphaMode(self: *@This(), alphaMode: RenderDestinationAlphaMode) void {
        return objc.msgSend(self, "setAlphaMode:", void, .{alphaMode});
    }

    pub fn alphaMode(self: *@This()) RenderDestinationAlphaMode {
        return objc.msgSend(self, "alphaMode", RenderDestinationAlphaMode, .{});
    }

    pub fn setFlipped(self: *@This(), flipped: objc.BOOL) void {
        return objc.msgSend(self, "setFlipped:", void, .{flipped});
    }

    pub fn isFlipped(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isFlipped", objc.BOOL, .{});
    }

    pub fn isDithered(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isDithered", objc.BOOL, .{});
    }

    pub fn setDithered(self: *@This(), dithered: objc.BOOL) void {
        return objc.msgSend(self, "setDithered:", void, .{dithered});
    }

    pub fn setClamped(self: *@This(), clamped: objc.BOOL) void {
        return objc.msgSend(self, "setClamped:", void, .{clamped});
    }

    pub fn isClamped(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isClamped", objc.BOOL, .{});
    }

    pub fn setColorSpace(self: *@This(), colorSpace: core_graphics.ColorSpaceRef) void {
        return objc.msgSend(self, "setColorSpace:", void, .{colorSpace});
    }

    pub fn colorSpace(self: *@This()) core_graphics.ColorSpaceRef {
        return objc.msgSend(self, "colorSpace", core_graphics.ColorSpaceRef, .{});
    }

    pub fn blendKernel(self: *@This()) ?*BlendKernel {
        return objc.msgSend(self, "blendKernel", ?*BlendKernel, .{});
    }

    pub fn setBlendKernel(self: *@This(), blendKernel: ?*BlendKernel) void {
        return objc.msgSend(self, "setBlendKernel:", void, .{blendKernel});
    }

    pub fn blendsInDestinationColorSpace(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "blendsInDestinationColorSpace", objc.BOOL, .{});
    }

    pub fn setBlendsInDestinationColorSpace(self: *@This(), blendsInDestinationColorSpace: objc.BOOL) void {
        return objc.msgSend(self, "setBlendsInDestinationColorSpace:", void, .{blendsInDestinationColorSpace});
    }

};

pub const RenderDestinationAlphaMode = RenderDestinationAlphaMode;

pub const RenderDestinationAlphaMode = enum(objc.NSUInteger) {
    None = 0,
    Premultiplied = 1,
    Unpremultiplied = 2,
};

/// https://developer.apple.com/documentation/CoreImage/CIRenderInfo?language=objc
pub const RenderInfo = opaque {
    pub const InternalInfo = objc.ExternalClass("CIRenderInfo", @This(), NSObject, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn kernelExecutionTime(self: *@This()) foundation.TimeInterval {
        return objc.msgSend(self, "kernelExecutionTime", foundation.TimeInterval, .{});
    }

    pub fn kernelCompileTime(self: *@This()) foundation.TimeInterval {
        return objc.msgSend(self, "kernelCompileTime", foundation.TimeInterval, .{});
    }

    pub fn passCount(self: *@This()) objc.NSInteger {
        return objc.msgSend(self, "passCount", objc.NSInteger, .{});
    }

    pub fn pixelsProcessed(self: *@This()) objc.NSInteger {
        return objc.msgSend(self, "pixelsProcessed", objc.NSInteger, .{});
    }

};

/// https://developer.apple.com/documentation/CoreImage/CIRenderTask?language=objc
pub const RenderTask = opaque {
    pub const InternalInfo = objc.ExternalClass("CIRenderTask", @This(), NSObject, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn waitUntilCompletedAndReturnError(self: *@This(), @"error": ?*?*foundation.Error) ?*RenderInfo {
        return objc.msgSend(self, "waitUntilCompletedAndReturnError:", ?*RenderInfo, .{@"error"});
    }

};

/// https://developer.apple.com/documentation/CoreImage/CIBarcodeDescriptor?language=objc
pub const BarcodeDescriptor = opaque {
    pub const InternalInfo = objc.ExternalClass("CIBarcodeDescriptor", @This(), NSObject, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;
};

pub const QRCodeErrorCorrectionLevel = enum(objc.NSInteger) {
    L = 76,
    M = 77,
    Q = 81,
    H = 72,
};

/// https://developer.apple.com/documentation/CoreImage/CIQRCodeDescriptor?language=objc
pub const QRCodeDescriptor = opaque {
    pub const InternalInfo = objc.ExternalClass("CIQRCodeDescriptor", @This(), BarcodeDescriptor, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn initWithPayloadSymbolVersionMaskPatternErrorCorrectionLevel(self: *@This(), errorCorrectedPayload: ?*NSData, symbolVersion: objc.NSInteger, maskPattern: objc.uint8_t, errorCorrectionLevel: QRCodeErrorCorrectionLevel, ) *@This() {
        return objc.msgSend(self, "initWithPayload:symbolVersion:maskPattern:errorCorrectionLevel:", *@This(), .{errorCorrectedPayload, symbolVersion, maskPattern, errorCorrectionLevel, });
    }

    pub fn descriptorWithPayloadSymbolVersionMaskPatternErrorCorrectionLevel(self: *@This(), errorCorrectedPayload: ?*NSData, symbolVersion: objc.NSInteger, maskPattern: objc.uint8_t, errorCorrectionLevel: QRCodeErrorCorrectionLevel, ) *@This() {
        return objc.msgSend(self, "descriptorWithPayload:symbolVersion:maskPattern:errorCorrectionLevel:", *@This(), .{errorCorrectedPayload, symbolVersion, maskPattern, errorCorrectionLevel, });
    }

    pub fn errorCorrectedPayload(self: *@This()) ?*NSData {
        return objc.msgSend(self, "errorCorrectedPayload", ?*NSData, .{});
    }

    pub fn symbolVersion(self: *@This()) objc.NSInteger {
        return objc.msgSend(self, "symbolVersion", objc.NSInteger, .{});
    }

    pub fn maskPattern(self: *@This()) objc.uint8_t {
        return objc.msgSend(self, "maskPattern", objc.uint8_t, .{});
    }

    pub fn errorCorrectionLevel(self: *@This()) QRCodeErrorCorrectionLevel {
        return objc.msgSend(self, "errorCorrectionLevel", QRCodeErrorCorrectionLevel, .{});
    }

};

/// https://developer.apple.com/documentation/CoreImage/CIAztecCodeDescriptor?language=objc
pub const AztecCodeDescriptor = opaque {
    pub const InternalInfo = objc.ExternalClass("CIAztecCodeDescriptor", @This(), BarcodeDescriptor, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn initWithPayloadIsCompactLayerCountDataCodewordCount(self: *@This(), errorCorrectedPayload: ?*NSData, isCompact: objc.BOOL, layerCount: objc.NSInteger, dataCodewordCount: objc.NSInteger, ) *@This() {
        return objc.msgSend(self, "initWithPayload:isCompact:layerCount:dataCodewordCount:", *@This(), .{errorCorrectedPayload, isCompact, layerCount, dataCodewordCount, });
    }

    pub fn descriptorWithPayloadIsCompactLayerCountDataCodewordCount(self: *@This(), errorCorrectedPayload: ?*NSData, isCompact: objc.BOOL, layerCount: objc.NSInteger, dataCodewordCount: objc.NSInteger, ) *@This() {
        return objc.msgSend(self, "descriptorWithPayload:isCompact:layerCount:dataCodewordCount:", *@This(), .{errorCorrectedPayload, isCompact, layerCount, dataCodewordCount, });
    }

};

/// https://developer.apple.com/documentation/CoreImage/CIPDF417CodeDescriptor?language=objc
pub const PDF417CodeDescriptor = opaque {
    pub const InternalInfo = objc.ExternalClass("CIPDF417CodeDescriptor", @This(), BarcodeDescriptor, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn initWithPayloadIsCompactRowCountColumnCount(self: *@This(), errorCorrectedPayload: ?*NSData, isCompact: objc.BOOL, rowCount: objc.NSInteger, columnCount: objc.NSInteger, ) *@This() {
        return objc.msgSend(self, "initWithPayload:isCompact:rowCount:columnCount:", *@This(), .{errorCorrectedPayload, isCompact, rowCount, columnCount, });
    }

    pub fn descriptorWithPayloadIsCompactRowCountColumnCount(self: *@This(), errorCorrectedPayload: ?*NSData, isCompact: objc.BOOL, rowCount: objc.NSInteger, columnCount: objc.NSInteger, ) *@This() {
        return objc.msgSend(self, "descriptorWithPayload:isCompact:rowCount:columnCount:", *@This(), .{errorCorrectedPayload, isCompact, rowCount, columnCount, });
    }

};

pub const DataMatrixCodeECCVersion = enum(objc.NSInteger) {
    000 = 0,
    050 = 50,
    080 = 80,
    100 = 100,
    140 = 140,
    200 = 200,
};

/// https://developer.apple.com/documentation/CoreImage/CIDataMatrixCodeDescriptor?language=objc
pub const DataMatrixCodeDescriptor = opaque {
    pub const InternalInfo = objc.ExternalClass("CIDataMatrixCodeDescriptor", @This(), BarcodeDescriptor, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn initWithPayloadRowCountColumnCountEccVersion(self: *@This(), errorCorrectedPayload: ?*NSData, rowCount: objc.NSInteger, columnCount: objc.NSInteger, eccVersion: DataMatrixCodeECCVersion, ) *@This() {
        return objc.msgSend(self, "initWithPayload:rowCount:columnCount:eccVersion:", *@This(), .{errorCorrectedPayload, rowCount, columnCount, eccVersion, });
    }

    pub fn descriptorWithPayloadRowCountColumnCountEccVersion(self: *@This(), errorCorrectedPayload: ?*NSData, rowCount: objc.NSInteger, columnCount: objc.NSInteger, eccVersion: DataMatrixCodeECCVersion, ) *@This() {
        return objc.msgSend(self, "descriptorWithPayload:rowCount:columnCount:eccVersion:", *@This(), .{errorCorrectedPayload, rowCount, columnCount, eccVersion, });
    }

    pub fn errorCorrectedPayload(self: *@This()) ?*NSData {
        return objc.msgSend(self, "errorCorrectedPayload", ?*NSData, .{});
    }

    pub fn rowCount(self: *@This()) objc.NSInteger {
        return objc.msgSend(self, "rowCount", objc.NSInteger, .{});
    }

    pub fn columnCount(self: *@This()) objc.NSInteger {
        return objc.msgSend(self, "columnCount", objc.NSInteger, .{});
    }

    pub fn eccVersion(self: *@This()) DataMatrixCodeECCVersion {
        return objc.msgSend(self, "eccVersion", DataMatrixCodeECCVersion, .{});
    }

};

/// https://developer.apple.com/documentation/CoreImage/CIFilterGenerator?language=objc
pub const FilterGenerator = opaque {
    pub const InternalInfo = objc.ExternalClass("CIFilterGenerator", @This(), NSObject, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn filterGenerator(self: *@This()) ?*FilterGenerator {
        return objc.msgSend(self, "filterGenerator", ?*FilterGenerator, .{});
    }

    pub fn filterGeneratorWithContentsOfURL(self: *@This(), aURL: ?*NSURL) ?*FilterGenerator {
        return objc.msgSend(self, "filterGeneratorWithContentsOfURL:", ?*FilterGenerator, .{aURL});
    }

    pub fn initWithContentsOfURL(self: *@This(), aURL: ?*NSURL) *objc.Id {
        return objc.msgSend(self, "initWithContentsOfURL:", *objc.Id, .{aURL});
    }

    pub fn connectObjectWithKeyToObjectWithKey(self: *@This(), sourceObject: *objc.Id, sourceKey: ?*io_surface.NSString, targetObject: *objc.Id, targetKey: ?*io_surface.NSString, ) void {
        return objc.msgSend(self, "connectObject:withKey:toObject:withKey:", void, .{sourceObject, sourceKey, targetObject, targetKey, });
    }

    pub fn disconnectObjectWithKeyToObjectWithKey(self: *@This(), sourceObject: *objc.Id, sourceKey: ?*io_surface.NSString, targetObject: *objc.Id, targetKey: ?*io_surface.NSString, ) void {
        return objc.msgSend(self, "disconnectObject:withKey:toObject:withKey:", void, .{sourceObject, sourceKey, targetObject, targetKey, });
    }

    pub fn exportKeyFromObjectWithName(self: *@This(), key: ?*io_surface.NSString, targetObject: *objc.Id, exportedKeyName: ?*io_surface.NSString) void {
        return objc.msgSend(self, "exportKey:fromObject:withName:", void, .{key, targetObject, exportedKeyName});
    }

    pub fn removeExportedKey(self: *@This(), exportedKeyName: ?*io_surface.NSString) void {
        return objc.msgSend(self, "removeExportedKey:", void, .{exportedKeyName});
    }

    pub fn setAttributesForExportedKey(self: *@This(), attributes: ?*NSDictionary, key: ?*io_surface.NSString) void {
        return objc.msgSend(self, "setAttributes:forExportedKey:", void, .{attributes, key});
    }

    pub fn filter(self: *@This()) ?*Filter {
        return objc.msgSend(self, "filter", ?*Filter, .{});
    }

    pub fn registerFilterName(self: *@This(), name: ?*io_surface.NSString) void {
        return objc.msgSend(self, "registerFilterName:", void, .{name});
    }

    pub fn exportedKeys(self: *@This()) ?*NSDictionary {
        return objc.msgSend(self, "exportedKeys", ?*NSDictionary, .{});
    }

    pub fn classAttributes(self: *@This()) ?*NSDictionary {
        return objc.msgSend(self, "classAttributes", ?*NSDictionary, .{});
    }

    pub fn setClassAttributes(self: *@This(), classAttributes: ?*NSDictionary) void {
        return objc.msgSend(self, "setClassAttributes:", void, .{classAttributes});
    }

};

pub const FilterGeneratorStruct = extern struct {};

/// https://developer.apple.com/documentation/CoreImage/CIPlugInRegistration?language=objc
pub const PlugInRegistration = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
};

/// https://developer.apple.com/documentation/CoreImage/CIPlugIn?language=objc
pub const PlugIn = opaque {
    pub const InternalInfo = objc.ExternalClass("CIPlugIn", @This(), NSObject, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn loadAllPlugIns(self: *@This()) void {
        return objc.msgSend(self, "loadAllPlugIns", void, .{});
    }

    pub fn loadNonExecutablePlugIns(self: *@This()) void {
        return objc.msgSend(self, "loadNonExecutablePlugIns", void, .{});
    }

    pub fn loadPlugInAllowNonExecutable(self: *@This(), url: ?*NSURL, allowNonExecutable: objc.BOOL) void {
        return objc.msgSend(self, "loadPlugIn:allowNonExecutable:", void, .{url, allowNonExecutable});
    }

    pub fn loadPlugInAllowExecutableCode(self: *@This(), url: ?*NSURL, allowExecutableCode: objc.BOOL) void {
        return objc.msgSend(self, "loadPlugIn:allowExecutableCode:", void, .{url, allowExecutableCode});
    }

    pub fn loadNonExecutablePlugIn(self: *@This(), url: ?*NSURL) void {
        return objc.msgSend(self, "loadNonExecutablePlugIn:", void, .{url});
    }

};

