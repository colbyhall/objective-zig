// THIS FILE IS AUTOGENERATED. MODIFICATIONS WILL NOT BE MAINTAINED.

const std = @import("std");
const objc = @import("objc.zig"); // Objective-C Runtime in zig.
const core_foundation = @import("core_foundation.zig"); // Framework dependency CoreFoundation.
const app_kit = @import("app_kit.zig"); // Framework dependency AppKit.
const core_audio_types = @import("core_audio_types.zig"); // Framework dependency CoreAudioTypes.
const core_midi = @import("core_midi.zig"); // Framework dependency CoreMIDI.
const foundation = @import("foundation.zig"); // Framework dependency Foundation.
const avfaudio = @import("avfaudio.zig"); // Framework dependency AVFAudio.
const core_services = @import("core_services.zig"); // Framework dependency CoreServices.
const core_audio = @import("core_audio.zig"); // Framework dependency CoreAudio.

pub const ComponentFlags = objc.UInt32;
pub const ComponentFlags_Flag_Unsearchable: objc.UInt32 = 1;
pub const ComponentFlags_Flag_SandboxSafe: objc.UInt32 = 2;
pub const ComponentFlags_Flag_IsV3AudioUnit: objc.UInt32 = 4;
pub const ComponentFlags_Flag_RequiresAsyncInstantiation: objc.UInt32 = 8;
pub const ComponentFlags_Flag_CanLoadInProcess: objc.UInt32 = 16;

pub const ComponentInstantiationOptions = objc.UInt32;
pub const ComponentInstantiationOptions_Instantiation_LoadOutOfProcess: objc.UInt32 = 1;
pub const ComponentInstantiationOptions_Instantiation_LoadInProcess: objc.UInt32 = 2;
pub const ComponentInstantiationOptions_Instantiation_LoadedRemotely: objc.UInt32 = -2147483648;

pub const ComponentDescription = extern struct {
    componentType: objc.OSType,
    componentSubType: objc.OSType,
    componentManufacturer: objc.OSType,
    componentFlags: objc.UInt32,
    componentFlagsMask: objc.UInt32,
};

pub const OpaqueAudioComponent = extern struct {};

pub const Component = OpaqueAudioComponent;

pub const ComponentInstanceRecord = extern struct {
    data: [1]i64,
};

pub const ComponentInstance = ComponentInstanceRecord;

pub const ComponentMethod = objc.OSStatus;

pub const ComponentPlugInInterface = extern struct {
    Open: ?*const fn (?*anyopaque, ComponentInstance) callconv(.C) objc.OSStatus,
    Close: ?*const fn (?*anyopaque) callconv(.C) objc.OSStatus,
    Lookup: ?*const fn (objc.SInt16) callconv(.C) ComponentMethod,
    reserved: ?*anyopaque,
};

pub const ComponentFactoryFunction = ComponentPlugInInterface;

extern "AudioToolbox" fn AudioComponentFindNext(inComponent: Component, inDesc: ?*const ComponentDescription) callconv(.C) Component;
pub const componentFindNext = AudioComponentFindNext;

extern "AudioToolbox" fn AudioComponentCount(inDesc: ?*const ComponentDescription) callconv(.C) objc.UInt32;
pub const componentCount = AudioComponentCount;

extern "AudioToolbox" fn AudioComponentCopyName(inComponent: Component, outName: ?*core_foundation.StringRef) callconv(.C) objc.OSStatus;
pub const componentCopyName = AudioComponentCopyName;

extern "AudioToolbox" fn AudioComponentGetDescription(inComponent: Component, outDesc: ?*ComponentDescription) callconv(.C) objc.OSStatus;
pub const componentGetDescription = AudioComponentGetDescription;

extern "AudioToolbox" fn AudioComponentGetVersion(inComponent: Component, outVersion: ?*objc.UInt32) callconv(.C) objc.OSStatus;
pub const componentGetVersion = AudioComponentGetVersion;

extern "AudioToolbox" fn AudioComponentGetIcon(comp: Component) callconv(.C) ?*app_kit.Image;
pub const componentGetIcon = AudioComponentGetIcon;

extern "AudioToolbox" fn AudioComponentInstanceNew(inComponent: Component, outInstance: ?*ComponentInstance) callconv(.C) objc.OSStatus;
pub const componentInstanceNew = AudioComponentInstanceNew;

extern "AudioToolbox" fn AudioComponentInstantiate(inComponent: Component, inOptions: ComponentInstantiationOptions, inCompletionHandler: *const fn (ComponentInstance, objc.OSStatus) callconv(.C) void) callconv(.C) void;
pub const componentInstantiate = AudioComponentInstantiate;

extern "AudioToolbox" fn AudioComponentInstanceDispose(inInstance: ComponentInstance) callconv(.C) objc.OSStatus;
pub const componentInstanceDispose = AudioComponentInstanceDispose;

extern "AudioToolbox" fn AudioComponentInstanceGetComponent(inInstance: ComponentInstance) callconv(.C) Component;
pub const componentInstanceGetComponent = AudioComponentInstanceGetComponent;

extern "AudioToolbox" fn AudioComponentInstanceCanDo(inInstance: ComponentInstance, inSelectorID: objc.SInt16) callconv(.C) objc.Boolean;
pub const componentInstanceCanDo = AudioComponentInstanceCanDo;

extern "AudioToolbox" fn AudioComponentRegister(
    inDesc: ?*const ComponentDescription,
    inName: core_foundation.StringRef,
    inVersion: objc.UInt32,
    inFactory: ComponentFactoryFunction,
) callconv(.C) Component;
pub const componentRegister = AudioComponentRegister;

extern "AudioToolbox" fn AudioComponentCopyConfigurationInfo(inComponent: Component, outConfigurationInfo: ?*core_foundation.DictionaryRef) callconv(.C) objc.OSStatus;
pub const componentCopyConfigurationInfo = AudioComponentCopyConfigurationInfo;

pub const ComponentValidationResult = objc.UInt32;
pub const ComponentValidationResult__Unknown: objc.UInt32 = 0;
pub const ComponentValidationResult__Passed: objc.UInt32 = 1;
pub const ComponentValidationResult__Failed: objc.UInt32 = 2;
pub const ComponentValidationResult__TimedOut: objc.UInt32 = 3;
pub const ComponentValidationResult__UnauthorizedError_Open: objc.UInt32 = 4;
pub const ComponentValidationResult__UnauthorizedError_Init: objc.UInt32 = 5;

extern "AudioToolbox" fn AudioComponentValidate(inComponent: Component, inValidationParameters: core_foundation.DictionaryRef, outValidationResult: ?*ComponentValidationResult) callconv(.C) objc.OSStatus;
pub const componentValidate = AudioComponentValidate;

extern "AudioToolbox" fn AudioComponentValidateWithResults(inComponent: Component, inValidationParameters: core_foundation.DictionaryRef, inCompletionHandler: *const fn (ComponentValidationResult, core_foundation.DictionaryRef) callconv(.C) void) callconv(.C) objc.OSStatus;
pub const componentValidateWithResults = AudioComponentValidateWithResults;

pub const Codec = ComponentInstance;

pub const CodecPropertyID = objc.UInt32;

pub const CodecMagicCookieInfo = extern struct {
    mMagicCookieSize: objc.UInt32,
    mMagicCookie: ?*const anyopaque,
};

pub const anon1431 = objc.UInt32;
pub const anon1431_AudioDecoderComponentType: objc.UInt32 = 1633969507;
pub const anon1431_AudioEncoderComponentType: objc.UInt32 = 1634037347;
pub const anon1431_AudioUnityCodecComponentType: objc.UInt32 = 1633903715;
pub const anon1431_TextEncodingMacFarsi: objc.UInt32 = 140;
pub const anon1431_TextEncodingMacUkrainian: objc.UInt32 = 152;
pub const anon1431_TextEncodingMacInuit: objc.UInt32 = 236;
pub const anon1431_TextEncodingMacVT100: objc.UInt32 = 252;
pub const anon1431_AudioFileStreamError_UnsupportedFileType: objc.UInt32 = 1954115647;
pub const anon1431_AudioFileStreamError_UnsupportedDataFormat: objc.UInt32 = 1718449215;
pub const anon1431_AudioFileStreamError_UnsupportedProperty: objc.UInt32 = 1886681407;
pub const anon1431_AudioFileStreamError_BadPropertySize: objc.UInt32 = 561211770;
pub const anon1431_AudioFileStreamError_NotOptimized: objc.UInt32 = 1869640813;
pub const anon1431_AudioFileStreamError_InvalidPacketOffset: objc.UInt32 = 1885563711;
pub const anon1431_AudioFileStreamError_InvalidFile: objc.UInt32 = 1685348671;
pub const anon1431_AudioFileStreamError_ValueUnknown: objc.UInt32 = 1970170687;
pub const anon1431_AudioFileStreamError_DataUnavailable: objc.UInt32 = 1836020325;
pub const anon1431_AudioFileStreamError_IllegalOperation: objc.UInt32 = 1852797029;
pub const anon1431_AudioFileStreamError_UnspecifiedError: objc.UInt32 = 2003334207;
pub const anon1431_AudioFileStreamError_DiscontinuityCantRecover: objc.UInt32 = 1685283617;

pub const anon2281 = CodecPropertyID;
pub const anon2281_AudioCodecPropertySupportedInputFormats: CodecPropertyID = 1768320291;
pub const anon2281_AudioCodecPropertySupportedOutputFormats: CodecPropertyID = 1868983587;
pub const anon2281_AudioCodecPropertyAvailableInputSampleRates: CodecPropertyID = 1634300786;
pub const anon2281_AudioCodecPropertyAvailableOutputSampleRates: CodecPropertyID = 1634694002;
pub const anon2281_AudioCodecPropertyAvailableBitRateRange: CodecPropertyID = 1633841780;
pub const anon2281_AudioCodecPropertyMinimumNumberInputPackets: CodecPropertyID = 1835952496;
pub const anon2281_AudioCodecPropertyMinimumNumberOutputPackets: CodecPropertyID = 1835954032;
pub const anon2281_AudioCodecPropertyAvailableNumberChannels: CodecPropertyID = 1668116067;
pub const anon2281_AudioCodecPropertyDoesSampleRateConversion: CodecPropertyID = 1819112035;
pub const anon2281_AudioCodecPropertyAvailableInputChannelLayoutTags: CodecPropertyID = 1634296684;
pub const anon2281_AudioCodecPropertyAvailableOutputChannelLayoutTags: CodecPropertyID = 1634689900;
pub const anon2281_AudioCodecPropertyInputFormatsForOutputFormat: CodecPropertyID = 1768305775;
pub const anon2281_AudioCodecPropertyOutputFormatsForInputFormat: CodecPropertyID = 1868969065;
pub const anon2281_AudioCodecPropertyFormatInfo: CodecPropertyID = 1633904233;

pub const anon4761 = CodecPropertyID;
pub const anon4761_AudioCodecPropertyInputBufferSize: CodecPropertyID = 1952609638;
pub const anon4761_AudioCodecPropertyPacketFrameSize: CodecPropertyID = 1885432678;
pub const anon4761_AudioCodecPropertyHasVariablePacketByteSizes: CodecPropertyID = 1987078975;
pub const anon4761_AudioCodecPropertyEmploysDependentPackets: CodecPropertyID = 1685089087;
pub const anon4761_AudioCodecPropertyMaximumPacketByteSize: CodecPropertyID = 1885432674;
pub const anon4761_AudioCodecPropertyPacketSizeLimitForVBR: CodecPropertyID = 1885432684;
pub const anon4761_AudioCodecPropertyCurrentInputFormat: CodecPropertyID = 1768320372;
pub const anon4761_AudioCodecPropertyCurrentOutputFormat: CodecPropertyID = 1868983668;
pub const anon4761_AudioCodecPropertyMagicCookie: CodecPropertyID = 1802857321;
pub const anon4761_AudioCodecPropertyUsedInputBufferSize: CodecPropertyID = 1969386854;
pub const anon4761_AudioCodecPropertyIsInitialized: CodecPropertyID = 1768843636;
pub const anon4761_AudioCodecPropertyCurrentTargetBitRate: CodecPropertyID = 1651663220;
pub const anon4761_AudioCodecPropertyCurrentInputSampleRate: CodecPropertyID = 1667855218;
pub const anon4761_AudioCodecPropertyCurrentOutputSampleRate: CodecPropertyID = 1668248434;
pub const anon4761_AudioCodecPropertyQualitySetting: CodecPropertyID = 1936876401;
pub const anon4761_AudioCodecPropertyApplicableBitRateRange: CodecPropertyID = 1651668065;
pub const anon4761_AudioCodecPropertyRecommendedBitRateRange: CodecPropertyID = 1651668082;
pub const anon4761_AudioCodecPropertyApplicableInputSampleRates: CodecPropertyID = 1769173601;
pub const anon4761_AudioCodecPropertyApplicableOutputSampleRates: CodecPropertyID = 1869836897;
pub const anon4761_AudioCodecPropertyPaddedZeros: CodecPropertyID = 1885430832;
pub const anon4761_AudioCodecPropertyPrimeMethod: CodecPropertyID = 1886547309;
pub const anon4761_AudioCodecPropertyPrimeInfo: CodecPropertyID = 1886546285;
pub const anon4761_AudioCodecPropertyCurrentInputChannelLayout: CodecPropertyID = 1768123424;
pub const anon4761_AudioCodecPropertyCurrentOutputChannelLayout: CodecPropertyID = 1868786720;
pub const anon4761_AudioCodecPropertySettings: CodecPropertyID = 1633907488;
pub const anon4761_AudioCodecPropertyFormatList: CodecPropertyID = 1633904236;
pub const anon4761_AudioCodecPropertyBitRateControlMode: CodecPropertyID = 1633903206;
pub const anon4761_AudioCodecPropertySoundQualityForVBR: CodecPropertyID = 1986163313;
pub const anon4761_AudioCodecPropertyBitRateForVBR: CodecPropertyID = 1986163298;
pub const anon4761_AudioCodecPropertyDelayMode: CodecPropertyID = 1684893540;
pub const anon4761_AudioCodecPropertyAdjustLocalQuality: CodecPropertyID = 1584488812;
pub const anon4761_AudioCodecPropertyDynamicRangeControlMode: CodecPropertyID = 1835299427;
pub const anon4761_AudioCodecPropertyAdjustCompressionProfile: CodecPropertyID = 1584427631;
pub const anon4761_AudioCodecPropertyProgramTargetLevelConstant: CodecPropertyID = 1886678115;
pub const anon4761_AudioCodecPropertyAdjustTargetLevelConstant: CodecPropertyID = 1584688227;
pub const anon4761_AudioCodecPropertyProgramTargetLevel: CodecPropertyID = 1886418028;
pub const anon4761_AudioCodecPropertyAdjustTargetLevel: CodecPropertyID = 1584428140;

pub const anon5291 = objc.UInt32;
pub const anon5291_AudioCodecQuality_Max: objc.UInt32 = 127;
pub const anon5291_AudioCodecQuality_High: objc.UInt32 = 96;
pub const anon5291_AudioCodecQuality_Medium: objc.UInt32 = 64;
pub const anon5291_AudioCodecQuality_Low: objc.UInt32 = 32;
pub const anon5291_AudioCodecQuality_Min: objc.UInt32 = 0;
pub const anon5291_CSSM_CL_BASE_CL_ERROR: objc.UInt32 = -2147411712;
pub const anon5291_CSSMERR_CL_INVALID_BUNDLE_POINTER: objc.UInt32 = -2147411711;
pub const anon5291_CSSMERR_CL_INVALID_CACHE_HANDLE: objc.UInt32 = -2147411710;
pub const anon5291_CSSMERR_CL_INVALID_RESULTS_HANDLE: objc.UInt32 = -2147411709;
pub const anon5291_CSSMERR_CL_INVALID_BUNDLE_INFO: objc.UInt32 = -2147411708;
pub const anon5291_CSSMERR_CL_INVALID_CRL_INDEX: objc.UInt32 = -2147411707;
pub const anon5291_CSSMERR_CL_INVALID_SCOPE: objc.UInt32 = -2147411706;
pub const anon5291_CSSMERR_CL_NO_FIELD_VALUES: objc.UInt32 = -2147411705;
pub const anon5291_CSSMERR_CL_SCOPE_NOT_SUPPORTED: objc.UInt32 = -2147411704;
pub const anon5291_AudioBoxPropertyBoxUID: objc.UInt32 = 1651861860;
pub const anon5291_AudioBoxPropertyTransportType: objc.UInt32 = 1953653102;
pub const anon5291_AudioBoxPropertyHasAudio: objc.UInt32 = 1651007861;
pub const anon5291_AudioBoxPropertyHasVideo: objc.UInt32 = 1651013225;
pub const anon5291_AudioBoxPropertyHasMIDI: objc.UInt32 = 1651010921;
pub const anon5291_AudioBoxPropertyIsProtected: objc.UInt32 = 1651536495;
pub const anon5291_AudioBoxPropertyAcquired: objc.UInt32 = 1652060014;
pub const anon5291_AudioBoxPropertyAcquisitionFailed: objc.UInt32 = 1652060006;
pub const anon5291_AudioBoxPropertyDeviceList: objc.UInt32 = 1650751011;
pub const anon5291_AudioBoxPropertyClockDeviceList: objc.UInt32 = 1650682915;

pub const anon5531 = objc.UInt32;
pub const anon5531_AudioCodecPrimeMethod_Pre: objc.UInt32 = 0;
pub const anon5531_AudioCodecPrimeMethod_Normal: objc.UInt32 = 1;
pub const anon5531_AudioCodecPrimeMethod_None: objc.UInt32 = 2;
pub const anon5531_gestaltAUXVersion: objc.UInt32 = 1630500216;
pub const anon5531_AudioDeviceClassID: objc.UInt32 = 1633969526;

pub const anon5941 = objc.UInt32;
pub const anon5941_AudioCodecBitRateControlMode_Constant: objc.UInt32 = 0;
pub const anon5941_AudioCodecBitRateControlMode_LongTermAverage: objc.UInt32 = 1;
pub const anon5941_AudioCodecBitRateControlMode_VariableConstrained: objc.UInt32 = 2;
pub const anon5941_AudioCodecBitRateControlMode_Variable: objc.UInt32 = 3;
pub const anon5941_gestaltCollectionMgrVersion: objc.UInt32 = 1668052078;

pub const anon6191 = objc.UInt32;
pub const anon6191_AudioCodecDelayMode_Compatibility: objc.UInt32 = 0;
pub const anon6191_AudioCodecDelayMode_Minimum: objc.UInt32 = 1;
pub const anon6191_AudioCodecDelayMode_Optimal: objc.UInt32 = 2;
pub const anon6191_smKeyNextScript: objc.UInt32 = -1;
pub const anon6191_smKeySysScript: objc.UInt32 = -2;
pub const anon6191_smKeySwapScript: objc.UInt32 = -3;
pub const anon6191_smKeyNextKybd: objc.UInt32 = -4;
pub const anon6191_smKeySwapKybd: objc.UInt32 = -5;
pub const anon6191_smKeyDisableKybds: objc.UInt32 = -6;
pub const anon6191_smKeyEnableKybds: objc.UInt32 = -7;
pub const anon6191_smKeyToggleInline: objc.UInt32 = -8;
pub const anon6191_smKeyToggleDirection: objc.UInt32 = -9;
pub const anon6191_smKeyNextInputMethod: objc.UInt32 = -10;
pub const anon6191_smKeySwapInputMethod: objc.UInt32 = -11;
pub const anon6191_smKeyDisableKybdSwitch: objc.UInt32 = -12;
pub const anon6191_smKeySetDirLeftRight: objc.UInt32 = -15;
pub const anon6191_smKeySetDirRightLeft: objc.UInt32 = -16;
pub const anon6191_smKeyRoman: objc.UInt32 = -17;

pub const anon6371 = objc.UInt32;
pub const anon6371_ProgramTargetLevel_None: objc.UInt32 = 0;
pub const anon6371_ProgramTargetLevel_Minus31dB: objc.UInt32 = 1;
pub const anon6371_ProgramTargetLevel_Minus23dB: objc.UInt32 = 2;
pub const anon6371_ProgramTargetLevel_Minus20dB: objc.UInt32 = 3;

pub const anon6571 = objc.UInt32;
pub const anon6571_DynamicRangeControlMode_None: objc.UInt32 = 0;
pub const anon6571_DynamicRangeControlMode_Light: objc.UInt32 = 1;
pub const anon6571_DynamicRangeControlMode_Heavy: objc.UInt32 = 2;
pub const anon6571_errRefNum: objc.UInt32 = -1280;
pub const anon6571_errAborted: objc.UInt32 = -1279;
pub const anon6571_errState: objc.UInt32 = -1278;
pub const anon6571_errOpening: objc.UInt32 = -1277;
pub const anon6571_errAttention: objc.UInt32 = -1276;
pub const anon6571_errFwdReset: objc.UInt32 = -1275;
pub const anon6571_errDSPQueueSize: objc.UInt32 = -1274;
pub const anon6571_errOpenDenied: objc.UInt32 = -1273;

pub const anon6811 = objc.UInt32;
pub const anon6811_DynamicRangeCompressionProfile_None: objc.UInt32 = 0;
pub const anon6811_DynamicRangeCompressionProfile_LateNight: objc.UInt32 = 1;
pub const anon6811_DynamicRangeCompressionProfile_NoisyEnvironment: objc.UInt32 = 2;
pub const anon6811_DynamicRangeCompressionProfile_LimitedPlaybackRange: objc.UInt32 = 3;
pub const anon6811_DynamicRangeCompressionProfile_GeneralCompression: objc.UInt32 = 6;

pub const CodecPrimeInfo = extern struct {
    leadingFrames: objc.UInt32,
    trailingFrames: objc.UInt32,
};

pub const SettingsFlags = objc.UInt32;
pub const SettingsFlags__ExpertParameter: objc.UInt32 = 1;
pub const SettingsFlags__InvisibleParameter: objc.UInt32 = 2;
pub const SettingsFlags__MetaParameter: objc.UInt32 = 4;
pub const SettingsFlags__UserInterfaceParameter: objc.UInt32 = 8;

pub const anon7851 = objc.UInt32;
pub const anon7851_AudioCodecProduceOutputPacketFailure: objc.UInt32 = 1;
pub const anon7851_AudioCodecProduceOutputPacketSuccess: objc.UInt32 = 2;
pub const anon7851_AudioCodecProduceOutputPacketSuccessHasMore: objc.UInt32 = 3;
pub const anon7851_AudioCodecProduceOutputPacketNeedsMoreInputData: objc.UInt32 = 4;
pub const anon7851_AudioCodecProduceOutputPacketAtEOF: objc.UInt32 = 5;
pub const anon7851_AudioCodecProduceOutputPacketSuccessConcealed: objc.UInt32 = 6;
pub const anon7851_UCBidiCatNotApplicable: objc.UInt32 = 0;
pub const anon7851_UCBidiCatLeftRight: objc.UInt32 = 1;
pub const anon7851_UCBidiCatRightLeft: objc.UInt32 = 2;
pub const anon7851_UCBidiCatEuroNumber: objc.UInt32 = 3;
pub const anon7851_UCBidiCatEuroNumberSeparator: objc.UInt32 = 4;
pub const anon7851_UCBidiCatEuroNumberTerminator: objc.UInt32 = 5;
pub const anon7851_UCBidiCatArabicNumber: objc.UInt32 = 6;
pub const anon7851_UCBidiCatCommonNumberSeparator: objc.UInt32 = 7;
pub const anon7851_UCBidiCatBlockSeparator: objc.UInt32 = 8;
pub const anon7851_UCBidiCatSegmentSeparator: objc.UInt32 = 9;
pub const anon7851_UCBidiCatWhitespace: objc.UInt32 = 10;
pub const anon7851_UCBidiCatOtherNeutral: objc.UInt32 = 11;
pub const anon7851_UCBidiCatRightLeftArabic: objc.UInt32 = 12;
pub const anon7851_UCBidiCatLeftRightEmbedding: objc.UInt32 = 13;
pub const anon7851_UCBidiCatRightLeftEmbedding: objc.UInt32 = 14;
pub const anon7851_UCBidiCatLeftRightOverride: objc.UInt32 = 15;
pub const anon7851_UCBidiCatRightLeftOverride: objc.UInt32 = 16;
pub const anon7851_UCBidiCatPopDirectionalFormat: objc.UInt32 = 17;
pub const anon7851_UCBidiCatNonSpacingMark: objc.UInt32 = 18;
pub const anon7851_UCBidiCatBoundaryNeutral: objc.UInt32 = 19;
pub const anon7851_UCBidiCatLeftRightIsolate: objc.UInt32 = 20;
pub const anon7851_UCBidiCatRightLeftIsolate: objc.UInt32 = 21;
pub const anon7851_UCBidiCatFirstStrongIsolate: objc.UInt32 = 22;
pub const anon7851_UCBidiCatPopDirectionalIsolate: objc.UInt32 = 23;
pub const anon7851_gestaltDisplayMgrVers: objc.UInt32 = 1685089398;
pub const anon7851_MultibandCompressorParam_Pregain: objc.UInt32 = 0;
pub const anon7851_MultibandCompressorParam_Postgain: objc.UInt32 = 1;
pub const anon7851_MultibandCompressorParam_Crossover1: objc.UInt32 = 2;
pub const anon7851_MultibandCompressorParam_Crossover2: objc.UInt32 = 3;
pub const anon7851_MultibandCompressorParam_Crossover3: objc.UInt32 = 4;
pub const anon7851_MultibandCompressorParam_Threshold1: objc.UInt32 = 5;
pub const anon7851_MultibandCompressorParam_Threshold2: objc.UInt32 = 6;
pub const anon7851_MultibandCompressorParam_Threshold3: objc.UInt32 = 7;
pub const anon7851_MultibandCompressorParam_Threshold4: objc.UInt32 = 8;
pub const anon7851_MultibandCompressorParam_Headroom1: objc.UInt32 = 9;
pub const anon7851_MultibandCompressorParam_Headroom2: objc.UInt32 = 10;
pub const anon7851_MultibandCompressorParam_Headroom3: objc.UInt32 = 11;
pub const anon7851_MultibandCompressorParam_Headroom4: objc.UInt32 = 12;
pub const anon7851_MultibandCompressorParam_AttackTime: objc.UInt32 = 13;
pub const anon7851_MultibandCompressorParam_ReleaseTime: objc.UInt32 = 14;
pub const anon7851_MultibandCompressorParam_EQ1: objc.UInt32 = 15;
pub const anon7851_MultibandCompressorParam_EQ2: objc.UInt32 = 16;
pub const anon7851_MultibandCompressorParam_EQ3: objc.UInt32 = 17;
pub const anon7851_MultibandCompressorParam_EQ4: objc.UInt32 = 18;
pub const anon7851_MultibandCompressorParam_CompressionAmount1: objc.UInt32 = 1000;
pub const anon7851_MultibandCompressorParam_CompressionAmount2: objc.UInt32 = 2000;
pub const anon7851_MultibandCompressorParam_CompressionAmount3: objc.UInt32 = 3000;
pub const anon7851_MultibandCompressorParam_CompressionAmount4: objc.UInt32 = 4000;
pub const anon7851_MultibandCompressorParam_InputAmplitude1: objc.UInt32 = 5000;
pub const anon7851_MultibandCompressorParam_InputAmplitude2: objc.UInt32 = 6000;
pub const anon7851_MultibandCompressorParam_InputAmplitude3: objc.UInt32 = 7000;
pub const anon7851_MultibandCompressorParam_InputAmplitude4: objc.UInt32 = 8000;
pub const anon7851_MultibandCompressorParam_OutputAmplitude1: objc.UInt32 = 9000;
pub const anon7851_MultibandCompressorParam_OutputAmplitude2: objc.UInt32 = 10000;
pub const anon7851_MultibandCompressorParam_OutputAmplitude3: objc.UInt32 = 11000;
pub const anon7851_MultibandCompressorParam_OutputAmplitude4: objc.UInt32 = 12000;

pub const anon8171 = objc.UInt32;
pub const anon8171_AudioCodecGetPropertyInfoSelect: objc.UInt32 = 1;
pub const anon8171_AudioCodecGetPropertySelect: objc.UInt32 = 2;
pub const anon8171_AudioCodecSetPropertySelect: objc.UInt32 = 3;
pub const anon8171_AudioCodecInitializeSelect: objc.UInt32 = 4;
pub const anon8171_AudioCodecUninitializeSelect: objc.UInt32 = 5;
pub const anon8171_AudioCodecAppendInputDataSelect: objc.UInt32 = 6;
pub const anon8171_AudioCodecProduceOutputDataSelect: objc.UInt32 = 7;
pub const anon8171_AudioCodecResetSelect: objc.UInt32 = 8;
pub const anon8171_AudioCodecAppendInputBufferListSelect: objc.UInt32 = 9;
pub const anon8171_AudioCodecProduceOutputBufferListSelect: objc.UInt32 = 10;

pub const anon8511 = objc.OSStatus;
pub const anon8511_AudioCodecNoError: objc.OSStatus = 0;
pub const anon8511_AudioCodecUnspecifiedError: objc.OSStatus = 2003329396;
pub const anon8511_AudioCodecUnknownPropertyError: objc.OSStatus = 2003332927;
pub const anon8511_AudioCodecBadPropertySizeError: objc.OSStatus = 561211770;
pub const anon8511_AudioCodecIllegalOperationError: objc.OSStatus = 1852797029;
pub const anon8511_AudioCodecUnsupportedFormatError: objc.OSStatus = 560226676;
pub const anon8511_AudioCodecStateError: objc.OSStatus = 561214580;
pub const anon8511_AudioCodecNotEnoughBufferSpaceError: objc.OSStatus = 560100710;
pub const anon8511_AudioCodecBadDataError: objc.OSStatus = 1650549857;

extern "AudioToolbox" fn AudioCodecGetPropertyInfo(
    inCodec: Codec,
    inPropertyID: CodecPropertyID,
    outSize: ?*objc.UInt32,
    outWritable: ?*objc.Boolean,
) callconv(.C) objc.OSStatus;
pub const codecGetPropertyInfo = AudioCodecGetPropertyInfo;

extern "AudioToolbox" fn AudioCodecGetProperty(
    inCodec: Codec,
    inPropertyID: CodecPropertyID,
    ioPropertyDataSize: ?*objc.UInt32,
    outPropertyData: ?*anyopaque,
) callconv(.C) objc.OSStatus;
pub const codecGetProperty = AudioCodecGetProperty;

extern "AudioToolbox" fn AudioCodecSetProperty(
    inCodec: Codec,
    inPropertyID: CodecPropertyID,
    inPropertyDataSize: objc.UInt32,
    inPropertyData: ?*const anyopaque,
) callconv(.C) objc.OSStatus;
pub const codecSetProperty = AudioCodecSetProperty;

extern "AudioToolbox" fn AudioCodecInitialize(
    inCodec: Codec,
    inInputFormat: ?*const core_audio_types.StreamBasicDescription,
    inOutputFormat: ?*const core_audio_types.StreamBasicDescription,
    inMagicCookie: ?*const anyopaque,
    inMagicCookieByteSize: objc.UInt32,
) callconv(.C) objc.OSStatus;
pub const codecInitialize = AudioCodecInitialize;

extern "AudioToolbox" fn AudioCodecUninitialize(inCodec: Codec) callconv(.C) objc.OSStatus;
pub const codecUninitialize = AudioCodecUninitialize;

extern "AudioToolbox" fn AudioCodecAppendInputData(
    inCodec: Codec,
    inInputData: ?*const anyopaque,
    ioInputDataByteSize: ?*objc.UInt32,
    ioNumberPackets: ?*objc.UInt32,
    inPacketDescription: ?*const core_audio_types.StreamPacketDescription,
) callconv(.C) objc.OSStatus;
pub const codecAppendInputData = AudioCodecAppendInputData;

extern "AudioToolbox" fn AudioCodecProduceOutputPackets(
    inCodec: Codec,
    outOutputData: ?*anyopaque,
    ioOutputDataByteSize: ?*objc.UInt32,
    ioNumberPackets: ?*objc.UInt32,
    outPacketDescription: ?*core_audio_types.StreamPacketDescription,
    outStatus: ?*objc.UInt32,
) callconv(.C) objc.OSStatus;
pub const codecProduceOutputPackets = AudioCodecProduceOutputPackets;

extern "AudioToolbox" fn AudioCodecAppendInputBufferList(
    inCodec: Codec,
    inBufferList: ?*const core_audio_types.BufferList,
    ioNumberPackets: ?*objc.UInt32,
    inPacketDescription: ?*const core_audio_types.StreamPacketDescription,
    outBytesConsumed: ?*objc.UInt32,
) callconv(.C) objc.OSStatus;
pub const codecAppendInputBufferList = AudioCodecAppendInputBufferList;

extern "AudioToolbox" fn AudioCodecProduceOutputBufferList(
    inCodec: Codec,
    ioBufferList: ?*core_audio_types.BufferList,
    ioNumberPackets: ?*objc.UInt32,
    outPacketDescription: ?*core_audio_types.StreamPacketDescription,
    outStatus: ?*objc.UInt32,
) callconv(.C) objc.OSStatus;
pub const codecProduceOutputBufferList = AudioCodecProduceOutputBufferList;

extern "AudioToolbox" fn AudioCodecReset(inCodec: Codec) callconv(.C) objc.OSStatus;
pub const codecReset = AudioCodecReset;

pub const CodecGetPropertyInfoProc = objc.OSStatus;

pub const CodecGetPropertyProc = objc.OSStatus;

pub const CodecSetPropertyProc = objc.OSStatus;

pub const CodecInitializeProc = objc.OSStatus;

pub const CodecUninitializeProc = objc.OSStatus;

pub const CodecAppendInputDataProc = objc.OSStatus;

pub const CodecProduceOutputPacketsProc = objc.OSStatus;

pub const CodecResetProc = objc.OSStatus;

pub const CodecAppendInputBufferListProc = objc.OSStatus;

pub const CodecProduceOutputBufferListProc = objc.OSStatus;

pub const anon11551 = CodecPropertyID;
pub const anon11551_AudioCodecPropertyMinimumDelayMode: CodecPropertyID = 1835296108;
pub const anon11551_AudioControlPropertyScope: CodecPropertyID = 1668506480;
pub const anon11551_AudioControlPropertyElement: CodecPropertyID = 1667591277;

pub const anon11751 = CodecPropertyID;
pub const anon11751_AudioCodecPropertyNameCFString: CodecPropertyID = 1819173229;
pub const anon11751_AudioCodecPropertyManufacturerCFString: CodecPropertyID = 1819107691;
pub const anon11751_AudioCodecPropertyFormatCFString: CodecPropertyID = 1818652530;
pub const anon11751_CSSM_CSP_TOK_WRITE_PROTECTED: CodecPropertyID = 2;
pub const anon11751_CSSM_CSP_TOK_LOGIN_REQUIRED: CodecPropertyID = 4;
pub const anon11751_CSSM_CSP_TOK_USER_PIN_INITIALIZED: CodecPropertyID = 8;
pub const anon11751_CSSM_CSP_TOK_PROT_AUTHENTICATION: CodecPropertyID = 256;
pub const anon11751_CSSM_CSP_TOK_USER_PIN_EXPIRED: CodecPropertyID = 1048576;
pub const anon11751_CSSM_CSP_TOK_SESSION_KEY_PASSWORD: CodecPropertyID = 2097152;
pub const anon11751_CSSM_CSP_TOK_PRIVATE_KEY_PASSWORD: CodecPropertyID = 4194304;
pub const anon11751_CSSM_CSP_STORES_PRIVATE_KEYS: CodecPropertyID = 16777216;
pub const anon11751_CSSM_CSP_STORES_PUBLIC_KEYS: CodecPropertyID = 33554432;
pub const anon11751_CSSM_CSP_STORES_SESSION_KEYS: CodecPropertyID = 67108864;
pub const anon11751_CSSM_CSP_STORES_CERTIFICATES: CodecPropertyID = 134217728;
pub const anon11751_CSSM_CSP_STORES_GENERIC: CodecPropertyID = 268435456;

pub const anon12361 = CodecPropertyID;
pub const anon12361_AudioCodecPropertyRequiresPacketDescription: CodecPropertyID = 1885432676;
pub const anon12361_AudioCodecPropertyAvailableBitRates: CodecPropertyID = 1651668003;
pub const anon12361_AudioCodecExtendFrequencies: CodecPropertyID = 1633903974;
pub const anon12361_AudioCodecUseRecommendedSampleRate: CodecPropertyID = 1970434930;
pub const anon12361_AudioCodecOutputPrecedence: CodecPropertyID = 1869639794;
pub const anon12361_AudioCodecBitRateFormat: CodecPropertyID = 1633903206;
pub const anon12361_AudioCodecDoesSampleRateConversion: CodecPropertyID = 1819112035;
pub const anon12361_AudioCodecInputFormatsForOutputFormat: CodecPropertyID = 1768305775;
pub const anon12361_AudioCodecOutputFormatsForInputFormat: CodecPropertyID = 1868969065;
pub const anon12361_AudioCodecPropertyInputChannelLayout: CodecPropertyID = 1768123424;
pub const anon12361_AudioCodecPropertyOutputChannelLayout: CodecPropertyID = 1868786720;
pub const anon12361_AudioCodecPropertyAvailableInputChannelLayouts: CodecPropertyID = 1634296684;
pub const anon12361_AudioCodecPropertyAvailableOutputChannelLayouts: CodecPropertyID = 1634689900;
pub const anon12361_AudioCodecPropertyZeroFramesPadded: CodecPropertyID = 1885430832;

pub const anon12671 = objc.UInt32;
pub const anon12671_AudioCodecBitRateFormat_CBR: objc.UInt32 = 0;
pub const anon12671_AudioCodecBitRateFormat_ABR: objc.UInt32 = 1;
pub const anon12671_AudioCodecBitRateFormat_VBR: objc.UInt32 = 2;

pub const anon12911 = objc.UInt32;
pub const anon12911_AudioCodecOutputPrecedenceNone: objc.UInt32 = 0;
pub const anon12911_AudioCodecOutputPrecedenceBitRate: objc.UInt32 = 1;
pub const anon12911_AudioCodecOutputPrecedenceSampleRate: objc.UInt32 = 2;

pub const MagicCookieInfo = CodecMagicCookieInfo;

pub const anon13201 = objc.UInt32;
pub const anon13201_HintBasic: objc.UInt32 = 0;
pub const anon13201_HintAdvanced: objc.UInt32 = 1;
pub const anon13201_HintHidden: objc.UInt32 = 2;

pub const Unit = ComponentInstance;

pub const anon1921 = objc.UInt32;
pub const anon1921_AudioUnitType_Output: objc.UInt32 = 1635086197;
pub const anon1921_AudioUnitType_MusicDevice: objc.UInt32 = 1635085685;
pub const anon1921_AudioUnitType_MusicEffect: objc.UInt32 = 1635085670;
pub const anon1921_AudioUnitType_FormatConverter: objc.UInt32 = 1635083875;
pub const anon1921_AudioUnitType_Effect: objc.UInt32 = 1635083896;
pub const anon1921_AudioUnitType_Mixer: objc.UInt32 = 1635085688;
pub const anon1921_AudioUnitType_Panner: objc.UInt32 = 1635086446;
pub const anon1921_AudioUnitType_Generator: objc.UInt32 = 1635084142;
pub const anon1921_AudioUnitType_OfflineEffect: objc.UInt32 = 1635086188;
pub const anon1921_AudioUnitType_MIDIProcessor: objc.UInt32 = 1635085673;
pub const anon1921_AudioUnitType_SpeechSynthesizer: objc.UInt32 = 1635087216;

pub const anon2381 = objc.UInt32;
pub const anon2381_AudioUnitType_RemoteEffect: objc.UInt32 = 1635086968;
pub const anon2381_AudioUnitType_RemoteGenerator: objc.UInt32 = 1635086951;
pub const anon2381_AudioUnitType_RemoteInstrument: objc.UInt32 = 1635086953;
pub const anon2381_AudioUnitType_RemoteMusicEffect: objc.UInt32 = 1635086957;
pub const anon2381_SOAP1999Schema: objc.UInt32 = 1936931129;
pub const anon2381_SOAP2001Schema: objc.UInt32 = 1936928817;

pub const anon2531 = objc.UInt32;
pub const anon2531_AudioUnitManufacturer_Apple: objc.UInt32 = 1634758764;
pub const anon2531_langUnspecified: objc.UInt32 = 32767;

pub const anon2751 = objc.UInt32;
pub const anon2751_AudioUnitSubType_GenericOutput: objc.UInt32 = 1734700658;
pub const anon2751_AudioUnitSubType_VoiceProcessingIO: objc.UInt32 = 1987078511;

pub const anon2961 = objc.UInt32;
pub const anon2961_AudioUnitSubType_HALOutput: objc.UInt32 = 1634230636;
pub const anon2961_AudioUnitSubType_DefaultOutput: objc.UInt32 = 1684366880;
pub const anon2961_AudioUnitSubType_SystemOutput: objc.UInt32 = 1937339168;
pub const anon2961_AudioQueueTimePitchAlgorithm_Spectral: objc.UInt32 = 1936745827;
pub const anon2961_AudioQueueTimePitchAlgorithm_TimeDomain: objc.UInt32 = 1953064047;
pub const anon2961_AudioQueueTimePitchAlgorithm_Varispeed: objc.UInt32 = 1987276900;

pub const anon3281 = objc.UInt32;
pub const anon3281_AudioUnitSubType_DLSSynth: objc.UInt32 = 1684828960;
pub const anon3281_AudioUnitSubType_Sampler: objc.UInt32 = 1935764848;
pub const anon3281_AudioUnitSubType_MIDISynth: objc.UInt32 = 1836284270;
pub const anon3281_eyAEDoScale: objc.UInt32 = 1802724193;
pub const anon3281_eyAEDoTranslate: objc.UInt32 = 1802793569;
pub const anon3281_eyAEEditionFileLoc: objc.UInt32 = 1701605219;
pub const anon3281_eyAEElements: objc.UInt32 = 1701604723;
pub const anon3281_eyAEEndPoint: objc.UInt32 = 1885695588;
pub const anon3281_eyAEEventClass: objc.UInt32 = 1702257516;
pub const anon3281_eyAEEventID: objc.UInt32 = 1702261865;
pub const anon3281_eyAEFile: objc.UInt32 = 1801873772;
pub const anon3281_eyAEFileType: objc.UInt32 = 1718383728;
pub const anon3281_eyAEFillColor: objc.UInt32 = 1718379372;
pub const anon3281_eyAEFillPattern: objc.UInt32 = 1718382708;
pub const anon3281_eyAEFlipHorizontal: objc.UInt32 = 1801873519;
pub const anon3281_eyAEFlipVertical: objc.UInt32 = 1801877108;
pub const anon3281_eyAEFont: objc.UInt32 = 1718578804;
pub const anon3281_eyAEFormula: objc.UInt32 = 1885761394;
pub const anon3281_eyAEGraphicObjects: objc.UInt32 = 1735352947;
pub const anon3281_eyAEID: objc.UInt32 = 1229201440;
pub const anon3281_eyAEImageQuality: objc.UInt32 = 1735488865;
pub const anon3281_eyAEInsertHere: objc.UInt32 = 1768846184;
pub const anon3281_eyAEKeyForms: objc.UInt32 = 1801812326;

pub const anon3821 = objc.UInt32;
pub const anon3821_AudioUnitSubType_AUConverter: objc.UInt32 = 1668247158;
pub const anon3821_AudioUnitSubType_Varispeed: objc.UInt32 = 1986097769;
pub const anon3821_AudioUnitSubType_DeferredRenderer: objc.UInt32 = 1684366962;
pub const anon3821_AudioUnitSubType_Splitter: objc.UInt32 = 1936747636;
pub const anon3821_AudioUnitSubType_MultiSplitter: objc.UInt32 = 1836281964;
pub const anon3821_AudioUnitSubType_Merger: objc.UInt32 = 1835364967;
pub const anon3821_AudioUnitSubType_NewTimePitch: objc.UInt32 = 1853191280;
pub const anon3821_AudioUnitSubType_AUiPodTimeOther: objc.UInt32 = 1768977519;
pub const anon3821_AudioUnitSubType_RoundTripAAC: objc.UInt32 = 1918984547;

pub const anon4011 = objc.UInt32;
pub const anon4011_AudioUnitSubType_TimePitch: objc.UInt32 = 1953329268;
pub const anon4011_smCPUErr: objc.UInt32 = -334;
pub const anon4011_smsPointerNil: objc.UInt32 = -335;
pub const anon4011_smNilsBlockErr: objc.UInt32 = -336;
pub const anon4011_smSlotOOBErr: objc.UInt32 = -337;
pub const anon4011_smSelOOBErr: objc.UInt32 = -338;
pub const anon4011_smNewPErr: objc.UInt32 = -339;
pub const anon4011_smBlkMoveErr: objc.UInt32 = -340;
pub const anon4011_smCkStatusErr: objc.UInt32 = -341;
pub const anon4011_smGetDrvrNamErr: objc.UInt32 = -342;
pub const anon4011_smDisDrvrNamErr: objc.UInt32 = -343;
pub const anon4011_smNoMoresRsrcs: objc.UInt32 = -344;
pub const anon4011_smsGetDrvrErr: objc.UInt32 = -345;
pub const anon4011_smBadsPtrErr: objc.UInt32 = -346;
pub const anon4011_smByteLanesErr: objc.UInt32 = -347;
pub const anon4011_smOffsetErr: objc.UInt32 = -348;
pub const anon4011_smNoGoodOpens: objc.UInt32 = -349;
pub const anon4011_smSRTOvrFlErr: objc.UInt32 = -350;
pub const anon4011_smRecNotFnd: objc.UInt32 = -351;
pub const anon4011_IconServicesNormalUsageFlag: objc.UInt32 = 0;
pub const anon4011_IconServicesNoBadgeFlag: objc.UInt32 = 1;
pub const anon4011_IconServicesUpdateIfNeededFlag: objc.UInt32 = 2;
pub const anon4011_HipassParam_CutoffFrequency: objc.UInt32 = 0;
pub const anon4011_HipassParam_Resonance: objc.UInt32 = 1;

pub const anon4671 = objc.UInt32;
pub const anon4671_AudioUnitSubType_PeakLimiter: objc.UInt32 = 1819112562;
pub const anon4671_AudioUnitSubType_DynamicsProcessor: objc.UInt32 = 1684237680;
pub const anon4671_AudioUnitSubType_LowPassFilter: objc.UInt32 = 1819304307;
pub const anon4671_AudioUnitSubType_HighPassFilter: objc.UInt32 = 1752195443;
pub const anon4671_AudioUnitSubType_BandPassFilter: objc.UInt32 = 1651532147;
pub const anon4671_AudioUnitSubType_HighShelfFilter: objc.UInt32 = 1752393830;
pub const anon4671_AudioUnitSubType_LowShelfFilter: objc.UInt32 = 1819502694;
pub const anon4671_AudioUnitSubType_ParametricEQ: objc.UInt32 = 1886217585;
pub const anon4671_AudioUnitSubType_Distortion: objc.UInt32 = 1684632436;
pub const anon4671_AudioUnitSubType_Delay: objc.UInt32 = 1684368505;
pub const anon4671_AudioUnitSubType_SampleDelay: objc.UInt32 = 1935961209;
pub const anon4671_AudioUnitSubType_NBandEQ: objc.UInt32 = 1851942257;
pub const anon4671_AudioUnitSubType_Reverb2: objc.UInt32 = 1920361010;
pub const anon4671_AudioUnitSubType_AUSoundIsolation: objc.UInt32 = 1987012979;
pub const anon4671_SecCSInternalInformation: objc.UInt32 = 1;
pub const anon4671_SecCSSigningInformation: objc.UInt32 = 2;
pub const anon4671_SecCSRequirementInformation: objc.UInt32 = 4;
pub const anon4671_SecCSDynamicInformation: objc.UInt32 = 8;
pub const anon4671_SecCSContentInformation: objc.UInt32 = 16;
pub const anon4671_SecCSSkipResourceDirectory: objc.UInt32 = 32;
pub const anon4671_SecCSCalculateCMSDigest: objc.UInt32 = 64;
pub const anon4671_UCTextBreakCharMask: objc.UInt32 = 1;
pub const anon4671_UCTextBreakClusterMask: objc.UInt32 = 4;
pub const anon4671_UCTextBreakWordMask: objc.UInt32 = 16;
pub const anon4671_UCTextBreakLineMask: objc.UInt32 = 64;
pub const anon4671_UCTextBreakParagraphMask: objc.UInt32 = 256;
pub const anon4671_PEFHashSlotSymCountShift: objc.UInt32 = 18;
pub const anon4671_PEFHashSlotFirstKeyMask: objc.UInt32 = 262143;
pub const anon4671_PEFHashSlotMaxSymbolCount: objc.UInt32 = 16383;
pub const anon4671_PEFHashSlotMaxKeyIndex: objc.UInt32 = 262143;

pub const anon5041 = objc.UInt32;
pub const anon5041_AudioUnitSubType_GraphicEQ: objc.UInt32 = 1735550321;
pub const anon5041_AudioUnitSubType_MultiBandCompressor: objc.UInt32 = 1835232624;
pub const anon5041_AudioUnitSubType_MatrixReverb: objc.UInt32 = 1836213622;
pub const anon5041_AudioUnitSubType_Pitch: objc.UInt32 = 1953329268;
pub const anon5041_AudioUnitSubType_AUFilter: objc.UInt32 = 1718185076;
pub const anon5041_AudioUnitSubType_NetSend: objc.UInt32 = 1853058660;
pub const anon5041_AudioUnitSubType_RogerBeep: objc.UInt32 = 1919903602;
pub const anon5041_UCTextBreakLeadingEdgeMask: objc.UInt32 = 1;
pub const anon5041_UCTextBreakGoBackwardsMask: objc.UInt32 = 2;
pub const anon5041_UCTextBreakIterateMask: objc.UInt32 = 4;
pub const anon5041_pTextStyles: objc.UInt32 = 1954050932;
pub const anon5041_pTransferMode: objc.UInt32 = 1886418029;
pub const anon5041_pTranslation: objc.UInt32 = 1886679667;
pub const anon5041_pUniformStyles: objc.UInt32 = 1970500716;
pub const anon5041_pUpdateOn: objc.UInt32 = 1886744676;
pub const anon5041_pUserSelection: objc.UInt32 = 1886745452;
pub const anon5041_pVersion: objc.UInt32 = 1986359923;
pub const anon5041_pVisible: objc.UInt32 = 1886808435;

pub const anon5491 = objc.UInt32;
pub const anon5491_AudioUnitSubType_MultiChannelMixer: objc.UInt32 = 1835232632;
pub const anon5491_AudioUnitSubType_MatrixMixer: objc.UInt32 = 1836608888;
pub const anon5491_AudioUnitSubType_SpatialMixer: objc.UInt32 = 862217581;
pub const anon5491_CSSM_CERTGROUP_DATA: objc.UInt32 = 0;
pub const anon5491_CSSM_CERTGROUP_ENCODED_CERT: objc.UInt32 = 1;
pub const anon5491_CSSM_CERTGROUP_PARSED_CERT: objc.UInt32 = 2;
pub const anon5491_CSSM_CERTGROUP_CERT_PAIR: objc.UInt32 = 3;

pub const anon5691 = objc.UInt32;
pub const anon5691_AudioUnitSubType_StereoMixer: objc.UInt32 = 1936554098;
pub const anon5691_AudioUnitSubType_3DMixer: objc.UInt32 = 862219640;

pub const anon6121 = objc.UInt32;
pub const anon6121_AudioUnitSubType_SphericalHeadPanner: objc.UInt32 = 1936746610;
pub const anon6121_AudioUnitSubType_VectorPanner: objc.UInt32 = 1986158963;
pub const anon6121_AudioUnitSubType_SoundFieldPanner: objc.UInt32 = 1634558569;
pub const anon6121_AudioUnitSubType_HRTFPanner: objc.UInt32 = 1752331366;

pub const anon6381 = objc.UInt32;
pub const anon6381_AudioUnitSubType_NetReceive: objc.UInt32 = 1852990326;
pub const anon6381_AudioUnitSubType_ScheduledSoundPlayer: objc.UInt32 = 1936945260;
pub const anon6381_AudioUnitSubType_AudioFilePlayer: objc.UInt32 = 1634103404;

pub const UnitRenderActionFlags = objc.UInt32;
pub const UnitRenderActionFlags_Action_PreRender: objc.UInt32 = 4;
pub const UnitRenderActionFlags_Action_PostRender: objc.UInt32 = 8;
pub const UnitRenderActionFlags_Action_OutputIsSilence: objc.UInt32 = 16;
pub const UnitRenderActionFlags_OfflineUnitRenderAction_Preflight: objc.UInt32 = 32;
pub const UnitRenderActionFlags_OfflineUnitRenderAction_Render: objc.UInt32 = 64;
pub const UnitRenderActionFlags_OfflineUnitRenderAction_Complete: objc.UInt32 = 128;
pub const UnitRenderActionFlags_Action_PostRenderError: objc.UInt32 = 256;
pub const UnitRenderActionFlags_Action_DoNotCheckRenderArgs: objc.UInt32 = 512;

pub const anon8021 = objc.OSStatus;
pub const anon8021_AudioUnitErr_InvalidProperty: objc.OSStatus = -10879;
pub const anon8021_AudioUnitErr_InvalidParameter: objc.OSStatus = -10878;
pub const anon8021_AudioUnitErr_InvalidElement: objc.OSStatus = -10877;
pub const anon8021_AudioUnitErr_NoConnection: objc.OSStatus = -10876;
pub const anon8021_AudioUnitErr_FailedInitialization: objc.OSStatus = -10875;
pub const anon8021_AudioUnitErr_TooManyFramesToProcess: objc.OSStatus = -10874;
pub const anon8021_AudioUnitErr_InvalidFile: objc.OSStatus = -10871;
pub const anon8021_AudioUnitErr_UnknownFileType: objc.OSStatus = -10870;
pub const anon8021_AudioUnitErr_FileNotSpecified: objc.OSStatus = -10869;
pub const anon8021_AudioUnitErr_FormatNotSupported: objc.OSStatus = -10868;
pub const anon8021_AudioUnitErr_Uninitialized: objc.OSStatus = -10867;
pub const anon8021_AudioUnitErr_InvalidScope: objc.OSStatus = -10866;
pub const anon8021_AudioUnitErr_PropertyNotWritable: objc.OSStatus = -10865;
pub const anon8021_AudioUnitErr_CannotDoInCurrentContext: objc.OSStatus = -10863;
pub const anon8021_AudioUnitErr_InvalidPropertyValue: objc.OSStatus = -10851;
pub const anon8021_AudioUnitErr_PropertyNotInUse: objc.OSStatus = -10850;
pub const anon8021_AudioUnitErr_Initialized: objc.OSStatus = -10849;
pub const anon8021_AudioUnitErr_InvalidOfflineRender: objc.OSStatus = -10848;
pub const anon8021_AudioUnitErr_Unauthorized: objc.OSStatus = -10847;
pub const anon8021_AudioUnitErr_MIDIOutputBufferFull: objc.OSStatus = -66753;
pub const anon8021_AudioComponentErr_InstanceTimedOut: objc.OSStatus = -66754;
pub const anon8021_AudioComponentErr_InstanceInvalidated: objc.OSStatus = -66749;
pub const anon8021_AudioUnitErr_RenderTimeout: objc.OSStatus = -66745;
pub const anon8021_AudioUnitErr_ExtensionNotFound: objc.OSStatus = -66744;
pub const anon8021_AudioUnitErr_InvalidParameterValue: objc.OSStatus = -66743;
pub const anon8021_AudioUnitErr_InvalidFilePath: objc.OSStatus = -66742;
pub const anon8021_AudioUnitErr_MissingKey: objc.OSStatus = -66741;
pub const anon8021_AudioUnitErr_ComponentManagerNotSupported: objc.OSStatus = -66740;

pub const anon8521 = objc.OSStatus;
pub const anon8521_AudioComponentErr_DuplicateDescription: objc.OSStatus = -66752;
pub const anon8521_AudioComponentErr_UnsupportedType: objc.OSStatus = -66751;
pub const anon8521_AudioComponentErr_TooManyInstances: objc.OSStatus = -66750;
pub const anon8521_AudioComponentErr_NotPermitted: objc.OSStatus = -66748;
pub const anon8521_AudioComponentErr_InitializationTimedOut: objc.OSStatus = -66747;
pub const anon8521_AudioComponentErr_InvalidFormat: objc.OSStatus = -66746;

pub const UnitPropertyID = objc.UInt32;

pub const UnitScope = objc.UInt32;

pub const UnitElement = objc.UInt32;

pub const UnitParameterID = objc.UInt32;

pub const UnitParameterValue = objc.Float32;

pub const AUParameterEventType = objc.UInt32;
pub const AUParameterEventType_ParameterEvent_Immediate: objc.UInt32 = 1;
pub const AUParameterEventType_ParameterEvent_Ramped: objc.UInt32 = 2;

pub const UnitParameterEvent = extern struct {
    pub const anon9532 = extern union {
        pub const anon9553 = extern struct {
            startBufferOffset: objc.SInt32,
            durationInFrames: objc.UInt32,
            startValue: UnitParameterValue,
            endValue: UnitParameterValue,
        };

        pub const anon9633 = extern struct {
            bufferOffset: objc.UInt32,
            value: UnitParameterValue,
        };

        ramp: UnitParameterEvent.anon9532.anon9553,
        immediate: UnitParameterEvent.anon9532.anon9633,
    };

    scope: UnitScope,
    element: UnitElement,
    parameter: UnitParameterID,
    eventType: AUParameterEventType,
    eventValues: UnitParameterEvent.anon9532,
};

pub const UnitParameter = extern struct {
    mAudioUnit: Unit,
    mParameterID: UnitParameterID,
    mScope: UnitScope,
    mElement: UnitElement,
};

pub const UnitProperty = extern struct {
    mAudioUnit: Unit,
    mPropertyID: UnitPropertyID,
    mScope: UnitScope,
    mElement: UnitElement,
};

pub const AURenderCallback = objc.OSStatus;

pub const UnitPropertyListenerProc = ?*const fn (
    ?*anyopaque,
    Unit,
    UnitPropertyID,
    UnitScope,
    UnitElement,
) callconv(.C) void;

pub const AUInputSamplesInOutputCallback = ?*const fn (
    ?*anyopaque,
    ?*const core_audio_types.TimeStamp,
    objc.Float64,
    objc.Float64,
) callconv(.C) void;

extern "AudioToolbox" fn AudioUnitInitialize(inUnit: Unit) callconv(.C) objc.OSStatus;
pub const unitInitialize = AudioUnitInitialize;

extern "AudioToolbox" fn AudioUnitUninitialize(inUnit: Unit) callconv(.C) objc.OSStatus;
pub const unitUninitialize = AudioUnitUninitialize;

extern "AudioToolbox" fn AudioUnitGetPropertyInfo(
    inUnit: Unit,
    inID: UnitPropertyID,
    inScope: UnitScope,
    inElement: UnitElement,
    outDataSize: ?*objc.UInt32,
    outWritable: ?*objc.Boolean,
) callconv(.C) objc.OSStatus;
pub const unitGetPropertyInfo = AudioUnitGetPropertyInfo;

extern "AudioToolbox" fn AudioUnitGetProperty(
    inUnit: Unit,
    inID: UnitPropertyID,
    inScope: UnitScope,
    inElement: UnitElement,
    outData: ?*anyopaque,
    ioDataSize: ?*objc.UInt32,
) callconv(.C) objc.OSStatus;
pub const unitGetProperty = AudioUnitGetProperty;

extern "AudioToolbox" fn AudioUnitSetProperty(
    inUnit: Unit,
    inID: UnitPropertyID,
    inScope: UnitScope,
    inElement: UnitElement,
    inData: ?*const anyopaque,
    inDataSize: objc.UInt32,
) callconv(.C) objc.OSStatus;
pub const unitSetProperty = AudioUnitSetProperty;

extern "AudioToolbox" fn AudioUnitAddPropertyListener(
    inUnit: Unit,
    inID: UnitPropertyID,
    inProc: UnitPropertyListenerProc,
    inProcUserData: ?*anyopaque,
) callconv(.C) objc.OSStatus;
pub const unitAddPropertyListener = AudioUnitAddPropertyListener;

extern "AudioToolbox" fn AudioUnitRemovePropertyListenerWithUserData(
    inUnit: Unit,
    inID: UnitPropertyID,
    inProc: UnitPropertyListenerProc,
    inProcUserData: ?*anyopaque,
) callconv(.C) objc.OSStatus;
pub const unitRemovePropertyListenerWithUserData = AudioUnitRemovePropertyListenerWithUserData;

extern "AudioToolbox" fn AudioUnitAddRenderNotify(inUnit: Unit, inProc: AURenderCallback, inProcUserData: ?*anyopaque) callconv(.C) objc.OSStatus;
pub const unitAddRenderNotify = AudioUnitAddRenderNotify;

extern "AudioToolbox" fn AudioUnitRemoveRenderNotify(inUnit: Unit, inProc: AURenderCallback, inProcUserData: ?*anyopaque) callconv(.C) objc.OSStatus;
pub const unitRemoveRenderNotify = AudioUnitRemoveRenderNotify;

extern "AudioToolbox" fn AudioUnitGetParameter(
    inUnit: Unit,
    inID: UnitParameterID,
    inScope: UnitScope,
    inElement: UnitElement,
    outValue: ?*UnitParameterValue,
) callconv(.C) objc.OSStatus;
pub const unitGetParameter = AudioUnitGetParameter;

extern "AudioToolbox" fn AudioUnitSetParameter(
    inUnit: Unit,
    inID: UnitParameterID,
    inScope: UnitScope,
    inElement: UnitElement,
    inValue: UnitParameterValue,
    inBufferOffsetInFrames: objc.UInt32,
) callconv(.C) objc.OSStatus;
pub const unitSetParameter = AudioUnitSetParameter;

extern "AudioToolbox" fn AudioUnitScheduleParameters(inUnit: Unit, inParameterEvent: ?*const UnitParameterEvent, inNumParamEvents: objc.UInt32) callconv(.C) objc.OSStatus;
pub const unitScheduleParameters = AudioUnitScheduleParameters;

extern "AudioToolbox" fn AudioUnitRender(
    inUnit: Unit,
    ioActionFlags: ?*UnitRenderActionFlags,
    inTimeStamp: ?*const core_audio_types.TimeStamp,
    inOutputBusNumber: objc.UInt32,
    inNumberFrames: objc.UInt32,
    ioData: ?*core_audio_types.BufferList,
) callconv(.C) objc.OSStatus;
pub const unitRender = AudioUnitRender;

extern "AudioToolbox" fn AudioUnitProcess(
    inUnit: Unit,
    ioActionFlags: ?*UnitRenderActionFlags,
    inTimeStamp: ?*const core_audio_types.TimeStamp,
    inNumberFrames: objc.UInt32,
    ioData: ?*core_audio_types.BufferList,
) callconv(.C) objc.OSStatus;
pub const unitProcess = AudioUnitProcess;

extern "AudioToolbox" fn AudioUnitProcessMultiple(
    inUnit: Unit,
    ioActionFlags: ?*UnitRenderActionFlags,
    inTimeStamp: ?*const core_audio_types.TimeStamp,
    inNumberFrames: objc.UInt32,
    inNumberInputBufferLists: objc.UInt32,
    inInputBufferLists: ?*?*const core_audio_types.BufferList,
    inNumberOutputBufferLists: objc.UInt32,
    ioOutputBufferLists: ?*?*core_audio_types.BufferList,
) callconv(.C) objc.OSStatus;
pub const unitProcessMultiple = AudioUnitProcessMultiple;

extern "AudioToolbox" fn AudioUnitReset(inUnit: Unit, inScope: UnitScope, inElement: UnitElement) callconv(.C) objc.OSStatus;
pub const unitReset = AudioUnitReset;

extern "AudioToolbox" fn AudioOutputUnitPublish(
    inDesc: ?*const ComponentDescription,
    inName: core_foundation.StringRef,
    inVersion: objc.UInt32,
    inOutputUnit: Unit,
) callconv(.C) objc.OSStatus;
pub const outputUnitPublish = AudioOutputUnitPublish;

extern "AudioToolbox" fn AudioComponentGetLastActiveTime(comp: Component) callconv(.C) core_foundation.AbsoluteTime;
pub const componentGetLastActiveTime = AudioComponentGetLastActiveTime;

extern "AudioToolbox" fn AudioComponentCopyIcon(comp: Component) callconv(.C) ?*app_kit.Image;
pub const componentCopyIcon = AudioComponentCopyIcon;

extern "AudioToolbox" fn AudioUnitExtensionSetComponentList(extensionIdentifier: core_foundation.StringRef, audioComponentInfo: core_foundation.ArrayRef) callconv(.C) objc.OSStatus;
pub const unitExtensionSetComponentList = AudioUnitExtensionSetComponentList;

extern "AudioToolbox" fn AudioUnitExtensionCopyComponentList(extensionIdentifier: core_foundation.StringRef) callconv(.C) core_foundation.ArrayRef;
pub const unitExtensionCopyComponentList = AudioUnitExtensionCopyComponentList;

pub const anon17711 = u32;
pub const anon17711_AudioUnitRange: u32 = 0;
pub const anon17711_AudioUnitInitializeSelect: u32 = 1;
pub const anon17711_AudioUnitUninitializeSelect: u32 = 2;
pub const anon17711_AudioUnitGetPropertyInfoSelect: u32 = 3;
pub const anon17711_AudioUnitGetPropertySelect: u32 = 4;
pub const anon17711_AudioUnitSetPropertySelect: u32 = 5;
pub const anon17711_AudioUnitAddPropertyListenerSelect: u32 = 10;
pub const anon17711_AudioUnitRemovePropertyListenerSelect: u32 = 11;
pub const anon17711_AudioUnitRemovePropertyListenerWithUserDataSelect: u32 = 18;
pub const anon17711_AudioUnitAddRenderNotifySelect: u32 = 15;
pub const anon17711_AudioUnitRemoveRenderNotifySelect: u32 = 16;
pub const anon17711_AudioUnitGetParameterSelect: u32 = 6;
pub const anon17711_AudioUnitSetParameterSelect: u32 = 7;
pub const anon17711_AudioUnitScheduleParametersSelect: u32 = 17;
pub const anon17711_AudioUnitRenderSelect: u32 = 14;
pub const anon17711_AudioUnitResetSelect: u32 = 9;
pub const anon17711_AudioUnitComplexRenderSelect: u32 = 19;
pub const anon17711_AudioUnitProcessSelect: u32 = 20;
pub const anon17711_AudioUnitProcessMultipleSelect: u32 = 21;

pub const UnitInitializeProc = objc.OSStatus;

pub const UnitUninitializeProc = objc.OSStatus;

pub const UnitGetPropertyInfoProc = objc.OSStatus;

pub const UnitGetPropertyProc = objc.OSStatus;

pub const UnitSetPropertyProc = objc.OSStatus;

pub const UnitAddPropertyListenerProc = objc.OSStatus;

pub const UnitRemovePropertyListenerProc = objc.OSStatus;

pub const UnitRemovePropertyListenerWithUserDataProc = objc.OSStatus;

pub const UnitAddRenderNotifyProc = objc.OSStatus;

pub const UnitRemoveRenderNotifyProc = objc.OSStatus;

pub const UnitScheduleParametersProc = objc.OSStatus;

pub const UnitResetProc = objc.OSStatus;

pub const UnitComplexRenderProc = objc.OSStatus;

pub const UnitProcessProc = objc.OSStatus;

pub const UnitProcessMultipleProc = objc.OSStatus;

pub const UnitGetParameterProc = objc.OSStatus;

pub const UnitSetParameterProc = objc.OSStatus;

pub const UnitRenderProc = objc.OSStatus;

pub const anon19261 = objc.OSStatus;
pub const anon19261_AudioUnitErr_IllegalInstrument: objc.OSStatus = -10873;
pub const anon19261_AudioUnitErr_InstrumentTypeNotFound: objc.OSStatus = -10872;
pub const anon19261_gestaltScriptMgrVersion: objc.OSStatus = 1935897193;

pub const anon1021 = UnitScope;
pub const anon1021_AudioUnitScope_Global: UnitScope = 0;
pub const anon1021_AudioUnitScope_Input: UnitScope = 1;
pub const anon1021_AudioUnitScope_Output: UnitScope = 2;
pub const anon1021_AudioUnitScope_Group: UnitScope = 3;
pub const anon1021_AudioUnitScope_Part: UnitScope = 4;
pub const anon1021_AudioUnitScope_Note: UnitScope = 5;
pub const anon1021_AudioUnitScope_Layer: UnitScope = 6;
pub const anon1021_AudioUnitScope_LayerItem: UnitScope = 7;
pub const anon1021_CSSM_ACL_SUBJECT_TYPE_KEYCHAIN_PROMPT: UnitScope = 65536;
pub const anon1021_CSSM_ACL_SUBJECT_TYPE_PROCESS: UnitScope = 65539;
pub const anon1021_CSSM_ACL_SUBJECT_TYPE_CODE_SIGNATURE: UnitScope = 116;
pub const anon1021_CSSM_ACL_SUBJECT_TYPE_COMMENT: UnitScope = 12;
pub const anon1021_CSSM_ACL_SUBJECT_TYPE_SYMMETRIC_KEY: UnitScope = 65541;
pub const anon1021_CSSM_ACL_SUBJECT_TYPE_PREAUTH: UnitScope = 65545;
pub const anon1021_CSSM_ACL_SUBJECT_TYPE_PREAUTH_SOURCE: UnitScope = 65546;
pub const anon1021_CSSM_ACL_SUBJECT_TYPE_ASYMMETRIC_KEY: UnitScope = 65547;
pub const anon1021_CSSM_ACL_SUBJECT_TYPE_PARTITION: UnitScope = 65548;

pub const anon8911 = UnitPropertyID;
pub const anon8911_AudioUnitProperty_ClassInfo: UnitPropertyID = 0;
pub const anon8911_AudioUnitProperty_MakeConnection: UnitPropertyID = 1;
pub const anon8911_AudioUnitProperty_SampleRate: UnitPropertyID = 2;
pub const anon8911_AudioUnitProperty_ParameterList: UnitPropertyID = 3;
pub const anon8911_AudioUnitProperty_ParameterInfo: UnitPropertyID = 4;
pub const anon8911_AudioUnitProperty_CPULoad: UnitPropertyID = 6;
pub const anon8911_AudioUnitProperty_StreamFormat: UnitPropertyID = 8;
pub const anon8911_AudioUnitProperty_ElementCount: UnitPropertyID = 11;
pub const anon8911_AudioUnitProperty_Latency: UnitPropertyID = 12;
pub const anon8911_AudioUnitProperty_SupportedNumChannels: UnitPropertyID = 13;
pub const anon8911_AudioUnitProperty_MaximumFramesPerSlice: UnitPropertyID = 14;
pub const anon8911_AudioUnitProperty_ParameterValueStrings: UnitPropertyID = 16;
pub const anon8911_AudioUnitProperty_AudioChannelLayout: UnitPropertyID = 19;
pub const anon8911_AudioUnitProperty_TailTime: UnitPropertyID = 20;
pub const anon8911_AudioUnitProperty_BypassEffect: UnitPropertyID = 21;
pub const anon8911_AudioUnitProperty_LastRenderError: UnitPropertyID = 22;
pub const anon8911_AudioUnitProperty_SetRenderCallback: UnitPropertyID = 23;
pub const anon8911_AudioUnitProperty_FactoryPresets: UnitPropertyID = 24;
pub const anon8911_AudioUnitProperty_RenderQuality: UnitPropertyID = 26;
pub const anon8911_AudioUnitProperty_HostCallbacks: UnitPropertyID = 27;
pub const anon8911_AudioUnitProperty_InPlaceProcessing: UnitPropertyID = 29;
pub const anon8911_AudioUnitProperty_ElementName: UnitPropertyID = 30;
pub const anon8911_AudioUnitProperty_SupportedChannelLayoutTags: UnitPropertyID = 32;
pub const anon8911_AudioUnitProperty_PresentPreset: UnitPropertyID = 36;
pub const anon8911_AudioUnitProperty_DependentParameters: UnitPropertyID = 45;
pub const anon8911_AudioUnitProperty_InputSamplesInOutput: UnitPropertyID = 49;
pub const anon8911_AudioUnitProperty_ShouldAllocateBuffer: UnitPropertyID = 51;
pub const anon8911_AudioUnitProperty_FrequencyResponse: UnitPropertyID = 52;
pub const anon8911_AudioUnitProperty_ParameterHistoryInfo: UnitPropertyID = 53;
pub const anon8911_AudioUnitProperty_NickName: UnitPropertyID = 54;
pub const anon8911_AudioUnitProperty_OfflineRender: UnitPropertyID = 37;
pub const anon8911_AudioUnitProperty_ParameterIDName: UnitPropertyID = 34;
pub const anon8911_AudioUnitProperty_ParameterStringFromValue: UnitPropertyID = 33;
pub const anon8911_AudioUnitProperty_ParameterClumpName: UnitPropertyID = 35;
pub const anon8911_AudioUnitProperty_ParameterValueFromString: UnitPropertyID = 38;
pub const anon8911_AudioUnitProperty_ContextName: UnitPropertyID = 25;
pub const anon8911_AudioUnitProperty_PresentationLatency: UnitPropertyID = 40;
pub const anon8911_AudioUnitProperty_ClassInfoFromDocument: UnitPropertyID = 50;
pub const anon8911_AudioUnitProperty_RequestViewController: UnitPropertyID = 56;
pub const anon8911_AudioUnitProperty_ParametersForOverview: UnitPropertyID = 57;
pub const anon8911_AudioUnitProperty_SupportsMPE: UnitPropertyID = 58;
pub const anon8911_AudioUnitProperty_RenderContextObserver: UnitPropertyID = 60;
pub const anon8911_AudioUnitProperty_LastRenderSampleTime: UnitPropertyID = 61;
pub const anon8911_AudioUnitProperty_LoadedOutOfProcess: UnitPropertyID = 62;
pub const anon8911_AudioUnitProperty_FastDispatch: UnitPropertyID = 5;
pub const anon8911_AudioUnitProperty_SetExternalBuffer: UnitPropertyID = 15;
pub const anon8911_AudioUnitProperty_GetUIComponentList: UnitPropertyID = 18;
pub const anon8911_AudioUnitProperty_CocoaUI: UnitPropertyID = 31;
pub const anon8911_AudioUnitProperty_IconLocation: UnitPropertyID = 39;
pub const anon8911_AudioUnitProperty_AUHostIdentifier: UnitPropertyID = 46;
pub const anon8911_AudioUnitProperty_MIDIOutputCallbackInfo: UnitPropertyID = 47;
pub const anon8911_AudioUnitProperty_MIDIOutputCallback: UnitPropertyID = 48;
pub const anon8911_AudioUnitProperty_MIDIOutputEventListCallback: UnitPropertyID = 63;
pub const anon8911_AudioUnitProperty_AudioUnitMIDIProtocol: UnitPropertyID = 64;
pub const anon8911_AudioUnitProperty_HostMIDIProtocol: UnitPropertyID = 65;
pub const anon8911_AudioUnitProperty_MIDIOutputBufferSizeHint: UnitPropertyID = 66;
pub const anon8911_PEFRelocIncrPositionMaxOffset: UnitPropertyID = 4096;

pub const anon9931 = UnitPropertyID;
pub const anon9931_AudioUnitProperty_RemoteControlEventListener: UnitPropertyID = 100;
pub const anon9931_AudioUnitProperty_IsInterAppConnected: UnitPropertyID = 101;
pub const anon9931_AudioUnitProperty_PeerURL: UnitPropertyID = 102;

pub const UnitConnection = extern struct {
    sourceAudioUnit: Unit,
    sourceOutputNumber: objc.UInt32,
    destInputNumber: objc.UInt32,
};

pub const AUChannelInfo = extern struct {
    inChannels: objc.SInt16,
    outChannels: objc.SInt16,
};

pub const UnitExternalBuffer = extern struct {
    buffer: ?*objc.Byte,
    size: objc.UInt32,
};

pub const AURenderCallbackStruct = extern struct {
    inputProc: AURenderCallback,
    inputProcRefCon: ?*anyopaque,
};

pub const AUPreset = extern struct {
    presetNumber: objc.SInt32,
    presetName: core_foundation.StringRef,
};

pub const anon11101 = u32;
pub const anon11101_RenderQuality_Max: u32 = 127;
pub const anon11101_RenderQuality_High: u32 = 96;
pub const anon11101_RenderQuality_Medium: u32 = 64;
pub const anon11101_RenderQuality_Low: u32 = 32;
pub const anon11101_RenderQuality_Min: u32 = 0;
pub const anon11101_gestaltLogicalRAMSize: u32 = 1819435373;

pub const anon11271 = u32;
pub const anon11271_NumberOfResponseFrequencies: u32 = 1024;

pub const UnitFrequencyResponseBin = extern struct {
    mFrequency: objc.Float64,
    mMagnitude: objc.Float64,
};

pub const HostCallback_GetBeatAndTempo = objc.OSStatus;

pub const HostCallback_GetMusicalTimeLocation = objc.OSStatus;

pub const HostCallback_GetTransportState = objc.OSStatus;

pub const HostCallback_GetTransportState2 = objc.OSStatus;

pub const HostCallbackInfo = extern struct {
    hostUserData: ?*anyopaque,
    beatAndTempoProc: HostCallback_GetBeatAndTempo,
    musicalTimeLocationProc: HostCallback_GetMusicalTimeLocation,
    transportStateProc: HostCallback_GetTransportState,
    transportStateProc2: HostCallback_GetTransportState2,
};

pub const AUDependentParameter = extern struct {
    mScope: UnitScope,
    mParameterID: UnitParameterID,
};

pub const UnitCocoaViewInfo = extern struct {
    mCocoaAUViewBundleLocation: core_foundation.URLRef,
    mCocoaAUViewClass: [1]core_foundation.StringRef,
};

pub const AUHostVersionIdentifier = extern struct {
    hostName: core_foundation.StringRef,
    hostVersion: objc.UInt32,
};

pub const MIDIPacketList = extern struct {
    numPackets: objc.UInt32,
    packet: [1]core_midi.Packet,
};

pub const AUMIDIOutputCallback = objc.OSStatus;

pub const AUMIDIOutputCallbackStruct = extern struct {
    midiOutputCallback: AUMIDIOutputCallback,
    userData: ?*anyopaque,
};

pub const AUInputSamplesInOutputCallbackStruct = extern struct {
    inputToOutputCallback: AUInputSamplesInOutputCallback,
    userData: ?*anyopaque,
};

pub const UnitParameterHistoryInfo = extern struct {
    updatesPerSecond: objc.Float32,
    historyDurationInSeconds: objc.Float32,
};

pub const UnitRenderContext = extern struct {
    workgroup: objc.os_workgroup_t,
    reserved: [6]objc.uint32_t,
};

pub const AURenderContextObserver = *const fn (?*const UnitRenderContext) callconv(.C) void;

pub const MIDIEventList = extern struct {
    protocol: core_midi.ProtocolID,
    numPackets: objc.UInt32,
    packet: [1]core_midi.EventPacket,
};

pub const AUEventSampleTime = objc.int64_t;

pub const AUMIDIEventListBlock = objc.OSStatus;

pub const UnitParameterUnit = objc.UInt32;
pub const UnitParameterUnit__Generic: objc.UInt32 = 0;
pub const UnitParameterUnit__Indexed: objc.UInt32 = 1;
pub const UnitParameterUnit__Boolean: objc.UInt32 = 2;
pub const UnitParameterUnit__Percent: objc.UInt32 = 3;
pub const UnitParameterUnit__Seconds: objc.UInt32 = 4;
pub const UnitParameterUnit__SampleFrames: objc.UInt32 = 5;
pub const UnitParameterUnit__Phase: objc.UInt32 = 6;
pub const UnitParameterUnit__Rate: objc.UInt32 = 7;
pub const UnitParameterUnit__Hertz: objc.UInt32 = 8;
pub const UnitParameterUnit__Cents: objc.UInt32 = 9;
pub const UnitParameterUnit__RelativeSemiTones: objc.UInt32 = 10;
pub const UnitParameterUnit__MIDINoteNumber: objc.UInt32 = 11;
pub const UnitParameterUnit__MIDIController: objc.UInt32 = 12;
pub const UnitParameterUnit__Decibels: objc.UInt32 = 13;
pub const UnitParameterUnit__LinearGain: objc.UInt32 = 14;
pub const UnitParameterUnit__Degrees: objc.UInt32 = 15;
pub const UnitParameterUnit__EqualPowerCrossfade: objc.UInt32 = 16;
pub const UnitParameterUnit__MixerFaderCurve1: objc.UInt32 = 17;
pub const UnitParameterUnit__Pan: objc.UInt32 = 18;
pub const UnitParameterUnit__Meters: objc.UInt32 = 19;
pub const UnitParameterUnit__AbsoluteCents: objc.UInt32 = 20;
pub const UnitParameterUnit__Octaves: objc.UInt32 = 21;
pub const UnitParameterUnit__BPM: objc.UInt32 = 22;
pub const UnitParameterUnit__Beats: objc.UInt32 = 23;
pub const UnitParameterUnit__Milliseconds: objc.UInt32 = 24;
pub const UnitParameterUnit__Ratio: objc.UInt32 = 25;
pub const UnitParameterUnit__CustomUnit: objc.UInt32 = 26;
pub const UnitParameterUnit__MIDI2Controller: objc.UInt32 = 27;

pub const UnitParameterOptions = objc.UInt32;
pub const UnitParameterOptions_Flag_CFNameRelease: objc.UInt32 = 16;
pub const UnitParameterOptions_Flag_OmitFromPresets: objc.UInt32 = 8192;
pub const UnitParameterOptions_Flag_PlotHistory: objc.UInt32 = 16384;
pub const UnitParameterOptions_Flag_MeterReadOnly: objc.UInt32 = 32768;
pub const UnitParameterOptions_Flag_DisplayMask: objc.UInt32 = 4653056;
pub const UnitParameterOptions_Flag_DisplaySquareRoot: objc.UInt32 = 65536;
pub const UnitParameterOptions_Flag_DisplaySquared: objc.UInt32 = 131072;
pub const UnitParameterOptions_Flag_DisplayCubed: objc.UInt32 = 196608;
pub const UnitParameterOptions_Flag_DisplayCubeRoot: objc.UInt32 = 262144;
pub const UnitParameterOptions_Flag_DisplayExponential: objc.UInt32 = 327680;
pub const UnitParameterOptions_Flag_HasClump: objc.UInt32 = 1048576;
pub const UnitParameterOptions_Flag_ValuesHaveStrings: objc.UInt32 = 2097152;
pub const UnitParameterOptions_Flag_DisplayLogarithmic: objc.UInt32 = 4194304;
pub const UnitParameterOptions_Flag_IsHighResolution: objc.UInt32 = 8388608;
pub const UnitParameterOptions_Flag_NonRealTime: objc.UInt32 = 16777216;
pub const UnitParameterOptions_Flag_CanRamp: objc.UInt32 = 33554432;
pub const UnitParameterOptions_Flag_ExpertMode: objc.UInt32 = 67108864;
pub const UnitParameterOptions_Flag_HasCFNameString: objc.UInt32 = 134217728;
pub const UnitParameterOptions_Flag_IsGlobalMeta: objc.UInt32 = 268435456;
pub const UnitParameterOptions_Flag_IsElementMeta: objc.UInt32 = 536870912;
pub const UnitParameterOptions_Flag_IsReadable: objc.UInt32 = 1073741824;
pub const UnitParameterOptions_Flag_IsWritable: objc.UInt32 = -2147483648;

pub const UnitParameterInfo = extern struct {
    name: [52]c_char,
    unitName: core_foundation.StringRef,
    clumpID: objc.UInt32,
    cfNameString: core_foundation.StringRef,
    unit: UnitParameterUnit,
    minValue: UnitParameterValue,
    maxValue: UnitParameterValue,
    defaultValue: UnitParameterValue,
    flags: UnitParameterOptions,
};

pub const anon16541 = u32;
pub const anon16541_AudioUnitClumpID_System: u32 = 0;

pub const anon17151 = i32;
pub const anon17151_AudioUnitParameterName_Full: i32 = -1;

pub const UnitParameterNameInfo = extern struct {
    inID: UnitParameterID,
    inDesiredLength: objc.SInt32,
    outName: core_foundation.StringRef,
};

pub const UnitParameterIDName = UnitParameterNameInfo;

pub const UnitParameterStringFromValue = extern struct {
    inParamID: UnitParameterID,
    inValue: ?*const UnitParameterValue,
    outString: core_foundation.StringRef,
};

pub const UnitParameterValueFromString = extern struct {
    inParamID: UnitParameterID,
    inString: core_foundation.StringRef,
    outValue: UnitParameterValue,
};

pub const UnitRemoteControlEvent = objc.UInt32;
pub const UnitRemoteControlEvent__TogglePlayPause: objc.UInt32 = 1;
pub const UnitRemoteControlEvent__ToggleRecord: objc.UInt32 = 2;
pub const UnitRemoteControlEvent__Rewind: objc.UInt32 = 3;

pub const UnitRemoteControlEventListener = *const fn (UnitRemoteControlEvent) callconv(.C) void;

pub const anon19871 = UnitPropertyID;
pub const anon19871_AudioUnitProperty_AllParameterMIDIMappings: UnitPropertyID = 41;
pub const anon19871_AudioUnitProperty_AddParameterMIDIMapping: UnitPropertyID = 42;
pub const anon19871_AudioUnitProperty_RemoveParameterMIDIMapping: UnitPropertyID = 43;
pub const anon19871_AudioUnitProperty_HotMapParameterMIDIMapping: UnitPropertyID = 44;
pub const anon19871_gestaltSoundAttr: UnitPropertyID = 1936614432;
pub const anon19871_gestaltStereoCapability: UnitPropertyID = 0;
pub const anon19871_gestaltStereoMixing: UnitPropertyID = 1;
pub const anon19871_gestaltSoundIOMgrPresent: UnitPropertyID = 3;
pub const anon19871_gestaltBuiltInSoundInput: UnitPropertyID = 4;
pub const anon19871_gestaltHasSoundInputDevice: UnitPropertyID = 5;
pub const anon19871_gestaltPlayAndRecord: UnitPropertyID = 6;
pub const anon19871_gestalt16BitSoundIO: UnitPropertyID = 7;
pub const anon19871_gestaltStereoInput: UnitPropertyID = 8;
pub const anon19871_gestaltLineLevelInput: UnitPropertyID = 9;
pub const anon19871_gestaltSndPlayDoubleBuffer: UnitPropertyID = 10;
pub const anon19871_gestaltMultiChannels: UnitPropertyID = 11;
pub const anon19871_gestalt16BitAudioSupport: UnitPropertyID = 12;

pub const AUParameterMIDIMappingFlags = objc.UInt32;
pub const AUParameterMIDIMappingFlags_Mapping_AnyChannelFlag: objc.UInt32 = 1;
pub const AUParameterMIDIMappingFlags_Mapping_AnyNoteFlag: objc.UInt32 = 2;
pub const AUParameterMIDIMappingFlags_Mapping_SubRange: objc.UInt32 = 4;
pub const AUParameterMIDIMappingFlags_Mapping_Toggle: objc.UInt32 = 8;
pub const AUParameterMIDIMappingFlags_Mapping_Bipolar: objc.UInt32 = 16;
pub const AUParameterMIDIMappingFlags_Mapping_Bipolar_On: objc.UInt32 = 32;

pub const AUParameterMIDIMapping = extern struct {
    mScope: UnitScope,
    mElement: UnitElement,
    mParameterID: UnitParameterID,
    mFlags: AUParameterMIDIMappingFlags,
    mSubRangeMin: UnitParameterValue,
    mSubRangeMax: UnitParameterValue,
    mStatus: objc.UInt8,
    mData1: objc.UInt8,
    reserved1: objc.UInt8,
    reserved2: objc.UInt8,
    reserved3: objc.UInt32,
};

pub const anon21381 = UnitPropertyID;
pub const anon21381_MusicDeviceProperty_MIDIXMLNames: UnitPropertyID = 1006;
pub const anon21381_MusicDeviceProperty_PartGroup: UnitPropertyID = 1010;
pub const anon21381_MusicDeviceProperty_DualSchedulingMode: UnitPropertyID = 1013;
pub const anon21381_MusicDeviceProperty_SupportsStartStopNote: UnitPropertyID = 1014;

pub const anon21491 = u32;
pub const anon21491_MusicDeviceSampleFrameMask_SampleOffset: u32 = 16777215;
pub const anon21491_MusicDeviceSampleFrameMask_IsScheduled: u32 = 16777216;

pub const anon22181 = UnitPropertyID;
pub const anon22181_AudioUnitOfflineProperty_InputSize: UnitPropertyID = 3020;
pub const anon22181_AudioUnitOfflineProperty_OutputSize: UnitPropertyID = 3021;
pub const anon22181_AudioUnitOfflineProperty_StartOffset: UnitPropertyID = 3022;
pub const anon22181_AudioUnitOfflineProperty_PreflightRequirements: UnitPropertyID = 3023;
pub const anon22181_AudioUnitOfflineProperty_PreflightName: UnitPropertyID = 3024;

pub const anon22391 = u32;
pub const anon22391_OfflinePreflight_NotRequired: u32 = 0;
pub const anon22391_OfflinePreflight_Optional: u32 = 1;
pub const anon22391_OfflinePreflight_Required: u32 = 2;

pub const anon22571 = UnitPropertyID;
pub const anon22571_AudioUnitProperty_DistanceAttenuationData: UnitPropertyID = 3600;

pub const AUDistanceAttenuationData = extern struct {
    pub const anon22642 = extern struct {
        inDistance: objc.Float32,
        outGain: objc.Float32,
    };

    inNumberOfPairs: objc.UInt32,
    pairs: [1]AUDistanceAttenuationData.anon22642,
};

pub const anon23021 = UnitPropertyID;
pub const anon23021_AudioUnitMigrateProperty_FromPlugin: UnitPropertyID = 4000;
pub const anon23021_AudioUnitMigrateProperty_OldAutomation: UnitPropertyID = 4001;

pub const anon23111 = objc.UInt32;
pub const anon23111_OtherPluginFormat_Undefined: objc.UInt32 = 0;
pub const anon23111_OtherPluginFormat_kMAS: objc.UInt32 = 1;
pub const anon23111_OtherPluginFormat_kVST: objc.UInt32 = 2;
pub const anon23111_OtherPluginFormat_AU: objc.UInt32 = 3;

pub const UnitOtherPluginDesc = extern struct {
    format: objc.UInt32,
    plugin: core_audio_types.ClassDescription,
};

pub const UnitParameterValueTranslation = extern struct {
    otherDesc: UnitOtherPluginDesc,
    otherParamID: objc.UInt32,
    otherValue: objc.Float32,
    auParamID: UnitParameterID,
    auValue: UnitParameterValue,
};

pub const UnitPresetMAS_SettingData = extern struct {
    isStockSetting: objc.UInt32,
    settingID: objc.UInt32,
    dataLen: objc.UInt32,
    data: [1]objc.UInt8,
};

pub const UnitPresetMAS_Settings = extern struct {
    manufacturerID: objc.UInt32,
    effectID: objc.UInt32,
    variantID: objc.UInt32,
    settingsVersion: objc.UInt32,
    numberOfSettings: objc.UInt32,
    settings: [1]UnitPresetMAS_SettingData,
};

pub const anon24011 = UnitPropertyID;
pub const anon24011_AudioUnitProperty_SampleRateConverterComplexity: UnitPropertyID = 3014;

pub const anon24131 = objc.UInt32;
pub const anon24131_AudioUnitSampleRateConverterComplexity_Linear: objc.UInt32 = 1818848869;
pub const anon24131_AudioUnitSampleRateConverterComplexity_Normal: objc.UInt32 = 1852797549;
pub const anon24131_AudioUnitSampleRateConverterComplexity_Mastering: objc.UInt32 = 1650553971;

pub const anon25101 = UnitPropertyID;
pub const anon25101_AudioOutputUnitProperty_CurrentDevice: UnitPropertyID = 2000;
pub const anon25101_AudioOutputUnitProperty_IsRunning: UnitPropertyID = 2001;
pub const anon25101_AudioOutputUnitProperty_ChannelMap: UnitPropertyID = 2002;
pub const anon25101_AudioOutputUnitProperty_EnableIO: UnitPropertyID = 2003;
pub const anon25101_AudioOutputUnitProperty_StartTime: UnitPropertyID = 2004;
pub const anon25101_AudioOutputUnitProperty_SetInputCallback: UnitPropertyID = 2005;
pub const anon25101_AudioOutputUnitProperty_HasIO: UnitPropertyID = 2006;
pub const anon25101_AudioOutputUnitProperty_StartTimestampsAtZero: UnitPropertyID = 2007;
pub const anon25101_AudioOutputUnitProperty_OSWorkgroup: UnitPropertyID = 2015;

pub const anon25701 = UnitPropertyID;
pub const anon25701_AudioOutputUnitProperty_MIDICallbacks: UnitPropertyID = 2010;
pub const anon25701_AudioOutputUnitProperty_HostReceivesRemoteControlEvents: UnitPropertyID = 2011;
pub const anon25701_AudioOutputUnitProperty_RemoteControlToHost: UnitPropertyID = 2012;
pub const anon25701_AudioOutputUnitProperty_HostTransportState: UnitPropertyID = 2013;
pub const anon25701_AudioOutputUnitProperty_NodeComponentDescription: UnitPropertyID = 2014;

pub const OutputUnitMIDICallbacks = extern struct {
    userData: ?*anyopaque,
    MIDIEventProc: ?*const fn (
        ?*anyopaque,
        objc.UInt32,
        objc.UInt32,
        objc.UInt32,
        objc.UInt32,
    ) callconv(.C) void,
    MIDISysExProc: ?*const fn (?*anyopaque, ?*const objc.UInt8, objc.UInt32) callconv(.C) void,
};

pub const OutputUnitStartAtTimeParams = extern struct {
    mTimestamp: core_audio_types.TimeStamp,
    mFlags: objc.UInt32,
};

pub const anon26341 = UnitPropertyID;
pub const anon26341_AUVoiceIOProperty_BypassVoiceProcessing: UnitPropertyID = 2100;
pub const anon26341_AUVoiceIOProperty_VoiceProcessingEnableAGC: UnitPropertyID = 2101;
pub const anon26341_AUVoiceIOProperty_MuteOutput: UnitPropertyID = 2104;

pub const AUVoiceIOSpeechActivityEvent = objc.UInt32;
pub const AUVoiceIOSpeechActivityEvent_HasStarted: objc.UInt32 = 0;
pub const AUVoiceIOSpeechActivityEvent_HasEnded: objc.UInt32 = 1;

pub const AUVoiceIOMutedSpeechActivityEventListener = *const fn (AUVoiceIOSpeechActivityEvent) callconv(.C) void;

pub const anon26651 = UnitPropertyID;
pub const anon26651_AUVoiceIOProperty_MutedSpeechActivityEventListener: UnitPropertyID = 2106;
pub const anon26651_FBCvTwinExceptionErr: UnitPropertyID = -30500;
pub const anon26651_FBCnoIndexesFound: UnitPropertyID = -30501;
pub const anon26651_FBCallocFailed: UnitPropertyID = -30502;
pub const anon26651_FBCbadParam: UnitPropertyID = -30503;
pub const anon26651_FBCfileNotIndexed: UnitPropertyID = -30504;
pub const anon26651_FBCbadIndexFile: UnitPropertyID = -30505;
pub const anon26651_FBCcompactionFailed: UnitPropertyID = -30506;
pub const anon26651_FBCvalidationFailed: UnitPropertyID = -30507;
pub const anon26651_FBCindexingFailed: UnitPropertyID = -30508;
pub const anon26651_FBCcommitFailed: UnitPropertyID = -30509;
pub const anon26651_FBCdeletionFailed: UnitPropertyID = -30510;
pub const anon26651_FBCmoveFailed: UnitPropertyID = -30511;
pub const anon26651_FBCtokenizationFailed: UnitPropertyID = -30512;
pub const anon26651_FBCmergingFailed: UnitPropertyID = -30513;
pub const anon26651_FBCindexCreationFailed: UnitPropertyID = -30514;
pub const anon26651_FBCaccessorStoreFailed: UnitPropertyID = -30515;
pub const anon26651_FBCaddDocFailed: UnitPropertyID = -30516;
pub const anon26651_FBCflushFailed: UnitPropertyID = -30517;
pub const anon26651_FBCindexNotFound: UnitPropertyID = -30518;
pub const anon26651_FBCnoSearchSession: UnitPropertyID = -30519;
pub const anon26651_FBCindexingCanceled: UnitPropertyID = -30520;
pub const anon26651_FBCaccessCanceled: UnitPropertyID = -30521;
pub const anon26651_FBCindexFileDestroyed: UnitPropertyID = -30522;
pub const anon26651_FBCindexNotAvailable: UnitPropertyID = -30523;
pub const anon26651_FBCsearchFailed: UnitPropertyID = -30524;
pub const anon26651_FBCsomeFilesNotIndexed: UnitPropertyID = -30525;
pub const anon26651_FBCillegalSessionChange: UnitPropertyID = -30526;
pub const anon26651_FBCanalysisNotAvailable: UnitPropertyID = -30527;
pub const anon26651_FBCbadIndexFileVersion: UnitPropertyID = -30528;
pub const anon26651_FBCsummarizationCanceled: UnitPropertyID = -30529;
pub const anon26651_FBCindexDiskIOFailed: UnitPropertyID = -30530;
pub const anon26651_FBCbadSearchSession: UnitPropertyID = -30531;
pub const anon26651_FBCnoSuchHit: UnitPropertyID = -30532;

pub const AUVoiceIOOtherAudioDuckingLevel = objc.UInt32;
pub const AUVoiceIOOtherAudioDuckingLevel_Default: objc.UInt32 = 0;
pub const AUVoiceIOOtherAudioDuckingLevel_Min: objc.UInt32 = 10;
pub const AUVoiceIOOtherAudioDuckingLevel_Mid: objc.UInt32 = 20;
pub const AUVoiceIOOtherAudioDuckingLevel_Max: objc.UInt32 = 30;

pub const AUVoiceIOOtherAudioDuckingConfiguration = extern struct {
    mEnableAdvancedDucking: objc.Boolean,
    mDuckingLevel: AUVoiceIOOtherAudioDuckingLevel,
};

pub const anon27111 = UnitPropertyID;
pub const anon27111_AUVoiceIOProperty_OtherAudioDuckingConfiguration: UnitPropertyID = 2108;

pub const anon27461 = UnitPropertyID;
pub const anon27461_AUVoiceIOProperty_VoiceProcessingQuality: UnitPropertyID = 2103;

pub const anon27771 = UnitPropertyID;
pub const anon27771_AUNBandEQProperty_NumberOfBands: UnitPropertyID = 2200;
pub const anon27771_AUNBandEQProperty_MaxNumberOfBands: UnitPropertyID = 2201;
pub const anon27771_AUNBandEQProperty_BiquadCoefficients: UnitPropertyID = 2203;

pub const anon27931 = objc.OSStatus;
pub const anon27931_AUVoiceIOErr_UnexpectedNumberOfInputChannels: objc.OSStatus = -66784;

pub const anon28681 = UnitPropertyID;
pub const anon28681_AudioUnitProperty_MeteringMode: UnitPropertyID = 3007;
pub const anon28681_AudioUnitProperty_MatrixLevels: UnitPropertyID = 3006;
pub const anon28681_AudioUnitProperty_MatrixDimensions: UnitPropertyID = 3009;
pub const anon28681_AudioUnitProperty_MeterClipping: UnitPropertyID = 3011;
pub const anon28681_AudioUnitProperty_InputAnchorTimeStamp: UnitPropertyID = 3016;

pub const UnitMeterClipping = extern struct {
    peakValueSinceLastCall: objc.Float32,
    sawInfinity: objc.Boolean,
    sawNotANumber: objc.Boolean,
};

pub const anon29971 = UnitPropertyID;
pub const anon29971_AudioUnitProperty_ReverbRoomType: UnitPropertyID = 10;
pub const anon29971_AudioUnitProperty_UsesInternalReverb: UnitPropertyID = 1005;
pub const anon29971_AudioUnitProperty_SpatializationAlgorithm: UnitPropertyID = 3000;
pub const anon29971_AudioUnitProperty_SpatialMixerRenderingFlags: UnitPropertyID = 3003;
pub const anon29971_AudioUnitProperty_SpatialMixerSourceMode: UnitPropertyID = 3005;
pub const anon29971_AudioUnitProperty_SpatialMixerDistanceParams: UnitPropertyID = 3010;
pub const anon29971_AudioUnitProperty_SpatialMixerAttenuationCurve: UnitPropertyID = 3013;
pub const anon29971_AudioUnitProperty_SpatialMixerOutputType: UnitPropertyID = 3100;
pub const anon29971_AudioUnitProperty_SpatialMixerPointSourceInHeadMode: UnitPropertyID = 3103;
pub const anon29971_AudioUnitProperty_SpatialMixerEnableHeadTracking: UnitPropertyID = 3111;
pub const anon29971_AudioUnitProperty_SpatialMixerPersonalizedHRTFMode: UnitPropertyID = 3113;
pub const anon29971_AudioUnitProperty_SpatialMixerAnyInputIsUsingPersonalizedHRTF: UnitPropertyID = 3116;

pub const AUSpatializationAlgorithm = objc.UInt32;
pub const AUSpatializationAlgorithm_SpatializationAlgorithm_EqualPowerPanning: objc.UInt32 = 0;
pub const AUSpatializationAlgorithm_SpatializationAlgorithm_SphericalHead: objc.UInt32 = 1;
pub const AUSpatializationAlgorithm_SpatializationAlgorithm_HRTF: objc.UInt32 = 2;
pub const AUSpatializationAlgorithm_SpatializationAlgorithm_SoundField: objc.UInt32 = 3;
pub const AUSpatializationAlgorithm_SpatializationAlgorithm_VectorBasedPanning: objc.UInt32 = 4;
pub const AUSpatializationAlgorithm_SpatializationAlgorithm_StereoPassThrough: objc.UInt32 = 5;
pub const AUSpatializationAlgorithm_SpatializationAlgorithm_HRTFHQ: objc.UInt32 = 6;
pub const AUSpatializationAlgorithm_SpatializationAlgorithm_UseOutputType: objc.UInt32 = 7;

pub const AUSpatialMixerSourceMode = objc.UInt32;
pub const AUSpatialMixerSourceMode_SpatialMixerSourceMode_SpatializeIfMono: objc.UInt32 = 0;
pub const AUSpatialMixerSourceMode_SpatialMixerSourceMode_Bypass: objc.UInt32 = 1;
pub const AUSpatialMixerSourceMode_SpatialMixerSourceMode_PointSource: objc.UInt32 = 2;
pub const AUSpatialMixerSourceMode_SpatialMixerSourceMode_AmbienceBed: objc.UInt32 = 3;

pub const AUReverbRoomType = objc.UInt32;
pub const AUReverbRoomType_ReverbRoomType_SmallRoom: objc.UInt32 = 0;
pub const AUReverbRoomType_ReverbRoomType_MediumRoom: objc.UInt32 = 1;
pub const AUReverbRoomType_ReverbRoomType_LargeRoom: objc.UInt32 = 2;
pub const AUReverbRoomType_ReverbRoomType_MediumHall: objc.UInt32 = 3;
pub const AUReverbRoomType_ReverbRoomType_LargeHall: objc.UInt32 = 4;
pub const AUReverbRoomType_ReverbRoomType_Plate: objc.UInt32 = 5;
pub const AUReverbRoomType_ReverbRoomType_MediumChamber: objc.UInt32 = 6;
pub const AUReverbRoomType_ReverbRoomType_LargeChamber: objc.UInt32 = 7;
pub const AUReverbRoomType_ReverbRoomType_Cathedral: objc.UInt32 = 8;
pub const AUReverbRoomType_ReverbRoomType_LargeRoom2: objc.UInt32 = 9;
pub const AUReverbRoomType_ReverbRoomType_MediumHall2: objc.UInt32 = 10;
pub const AUReverbRoomType_ReverbRoomType_MediumHall3: objc.UInt32 = 11;
pub const AUReverbRoomType_ReverbRoomType_LargeHall2: objc.UInt32 = 12;

pub const AUSpatialMixerAttenuationCurve = objc.UInt32;
pub const AUSpatialMixerAttenuationCurve_SpatialMixerAttenuationCurve_Power: objc.UInt32 = 0;
pub const AUSpatialMixerAttenuationCurve_SpatialMixerAttenuationCurve_Exponential: objc.UInt32 = 1;
pub const AUSpatialMixerAttenuationCurve_SpatialMixerAttenuationCurve_Inverse: objc.UInt32 = 2;
pub const AUSpatialMixerAttenuationCurve_SpatialMixerAttenuationCurve_Linear: objc.UInt32 = 3;

pub const MixerDistanceParams = extern struct {
    mReferenceDistance: objc.Float32,
    mMaxDistance: objc.Float32,
    mMaxAttenuation: objc.Float32,
};

pub const AUSpatialMixerRenderingFlags = objc.UInt32;
pub const AUSpatialMixerRenderingFlags_SpatialMixerRenderingFlags_InterAuralDelay: objc.UInt32 = 1;
pub const AUSpatialMixerRenderingFlags_SpatialMixerRenderingFlags_DistanceAttenuation: objc.UInt32 = 4;

pub const AUSpatialMixerPersonalizedHRTFMode = objc.UInt32;
pub const AUSpatialMixerPersonalizedHRTFMode_SpatialMixerPersonalizedHRTFMode_Off: objc.UInt32 = 0;
pub const AUSpatialMixerPersonalizedHRTFMode_SpatialMixerPersonalizedHRTFMode_On: objc.UInt32 = 1;
pub const AUSpatialMixerPersonalizedHRTFMode_SpatialMixerPersonalizedHRTFMode_Auto: objc.UInt32 = 2;

pub const AUSpatialMixerOutputType = objc.UInt32;
pub const AUSpatialMixerOutputType_SpatialMixerOutputType_Headphones: objc.UInt32 = 1;
pub const AUSpatialMixerOutputType_SpatialMixerOutputType_BuiltInSpeakers: objc.UInt32 = 2;
pub const AUSpatialMixerOutputType_SpatialMixerOutputType_ExternalSpeakers: objc.UInt32 = 3;

pub const AUSpatialMixerPointSourceInHeadMode = objc.UInt32;
pub const AUSpatialMixerPointSourceInHeadMode_SpatialMixerPointSourceInHeadMode_Mono: objc.UInt32 = 0;
pub const AUSpatialMixerPointSourceInHeadMode_SpatialMixerPointSourceInHeadMode_Bypass: objc.UInt32 = 1;

pub const anon32201 = UnitPropertyID;
pub const anon32201_AudioUnitProperty_3DMixerDistanceParams: UnitPropertyID = 3010;
pub const anon32201_AudioUnitProperty_3DMixerAttenuationCurve: UnitPropertyID = 3013;
pub const anon32201_AudioUnitProperty_DopplerShift: UnitPropertyID = 3002;
pub const anon32201_AudioUnitProperty_3DMixerRenderingFlags: UnitPropertyID = 3003;
pub const anon32201_AudioUnitProperty_3DMixerDistanceAtten: UnitPropertyID = 3004;
pub const anon32201_AudioUnitProperty_ReverbPreset: UnitPropertyID = 3012;

pub const AU3DMixerRenderingFlags = objc.UInt32;
pub const AU3DMixerRenderingFlags_3DMixerRenderingFlags_InterAuralDelay: objc.UInt32 = 1;
pub const AU3DMixerRenderingFlags_3DMixerRenderingFlags_DopplerShift: objc.UInt32 = 2;
pub const AU3DMixerRenderingFlags_3DMixerRenderingFlags_DistanceAttenuation: objc.UInt32 = 4;
pub const AU3DMixerRenderingFlags_3DMixerRenderingFlags_DistanceFilter: objc.UInt32 = 8;
pub const AU3DMixerRenderingFlags_3DMixerRenderingFlags_DistanceDiffusion: objc.UInt32 = 16;
pub const AU3DMixerRenderingFlags_3DMixerRenderingFlags_LinearDistanceAttenuation: objc.UInt32 = 32;
pub const AU3DMixerRenderingFlags_3DMixerRenderingFlags_ConstantReverbBlend: objc.UInt32 = 64;

pub const AU3DMixerAttenuationCurve = objc.UInt32;
pub const AU3DMixerAttenuationCurve_3DMixerAttenuationCurve_Power: objc.UInt32 = 0;
pub const AU3DMixerAttenuationCurve_3DMixerAttenuationCurve_Exponential: objc.UInt32 = 1;
pub const AU3DMixerAttenuationCurve_3DMixerAttenuationCurve_Inverse: objc.UInt32 = 2;
pub const AU3DMixerAttenuationCurve_3DMixerAttenuationCurve_Linear: objc.UInt32 = 3;

pub const anon33621 = UnitPropertyID;
pub const anon33621_AudioUnitProperty_ScheduleAudioSlice: UnitPropertyID = 3300;
pub const anon33621_AudioUnitProperty_ScheduleStartTimeStamp: UnitPropertyID = 3301;
pub const anon33621_AudioUnitProperty_CurrentPlayTime: UnitPropertyID = 3302;

pub const AUScheduledAudioSliceFlags = objc.UInt32;
pub const AUScheduledAudioSliceFlags_ScheduledAudioSliceFlag_Complete: objc.UInt32 = 1;
pub const AUScheduledAudioSliceFlags_ScheduledAudioSliceFlag_BeganToRender: objc.UInt32 = 2;
pub const AUScheduledAudioSliceFlags_ScheduledAudioSliceFlag_BeganToRenderLate: objc.UInt32 = 4;
pub const AUScheduledAudioSliceFlags_ScheduledAudioSliceFlag_Loop: objc.UInt32 = 8;
pub const AUScheduledAudioSliceFlags_ScheduledAudioSliceFlag_Interrupt: objc.UInt32 = 16;
pub const AUScheduledAudioSliceFlags_ScheduledAudioSliceFlag_InterruptAtLoop: objc.UInt32 = 32;

pub const ScheduledAudioSlice = extern struct {
    mTimeStamp: core_audio_types.TimeStamp,
    mCompletionProc: ScheduledAudioSliceCompletionProc,
    mCompletionProcUserData: ?*anyopaque,
    mFlags: AUScheduledAudioSliceFlags,
    mReserved: objc.UInt32,
    mReserved2: ?*anyopaque,
    mNumberFrames: objc.UInt32,
    mBufferList: ?*core_audio_types.BufferList,
};

pub const ScheduledAudioSliceCompletionProc = ?*const fn (?*anyopaque, ?*ScheduledAudioSlice) callconv(.C) void;

pub const anon35571 = UnitPropertyID;
pub const anon35571_AudioUnitProperty_ScheduledFileIDs: UnitPropertyID = 3310;
pub const anon35571_AudioUnitProperty_ScheduledFileRegion: UnitPropertyID = 3311;
pub const anon35571_AudioUnitProperty_ScheduledFilePrime: UnitPropertyID = 3312;
pub const anon35571_AudioUnitProperty_ScheduledFileBufferSizeFrames: UnitPropertyID = 3313;
pub const anon35571_AudioUnitProperty_ScheduledFileNumberBuffers: UnitPropertyID = 3314;

pub const ScheduledAudioFileRegion = extern struct {
    pub const OpaqueAudioFileID = extern struct {};

    mTimeStamp: core_audio_types.TimeStamp,
    mCompletionProc: ScheduledAudioFileRegionCompletionProc,
    mCompletionProcUserData: ?*anyopaque,
    mAudioFile: ?*ScheduledAudioFileRegion.OpaqueAudioFileID,
    mLoopCount: objc.UInt32,
    mStartFrame: objc.SInt64,
    mFramesToPlay: objc.UInt32,
};

pub const ScheduledAudioFileRegionCompletionProc = ?*const fn (?*anyopaque, ?*ScheduledAudioFileRegion, objc.OSStatus) callconv(.C) void;

pub const anon36241 = UnitPropertyID;
pub const anon36241_MusicDeviceProperty_UsesInternalReverb: UnitPropertyID = 1005;
pub const anon36241_MusicDeviceProperty_SoundBankData: UnitPropertyID = 1008;
pub const anon36241_MusicDeviceProperty_StreamFromDisk: UnitPropertyID = 1011;
pub const anon36241_MusicDeviceProperty_SoundBankFSRef: UnitPropertyID = 1012;

pub const anon36511 = UnitPropertyID;
pub const anon36511_MusicDeviceProperty_InstrumentName: UnitPropertyID = 1001;
pub const anon36511_MusicDeviceProperty_InstrumentNumber: UnitPropertyID = 1004;

pub const anon36891 = UnitPropertyID;
pub const anon36891_MusicDeviceProperty_InstrumentCount: UnitPropertyID = 1000;
pub const anon36891_MusicDeviceProperty_BankName: UnitPropertyID = 1007;
pub const anon36891_MusicDeviceProperty_SoundBankURL: UnitPropertyID = 1100;

pub const anon37151 = UnitPropertyID;
pub const anon37151_AUMIDISynthProperty_EnablePreload: UnitPropertyID = 4119;

pub const anon37421 = UnitPropertyID;
pub const anon37421_AUSamplerProperty_LoadInstrument: UnitPropertyID = 4102;
pub const anon37421_AUSamplerProperty_LoadAudioFiles: UnitPropertyID = 4101;

pub const AUSamplerInstrumentData = extern struct {
    fileURL: core_foundation.URLRef,
    instrumentType: objc.UInt8,
    bankMSB: objc.UInt8,
    bankLSB: objc.UInt8,
    presetID: objc.UInt8,
};

pub const anon38081 = u32;
pub const anon38081_InstrumentType_DLSPreset: u32 = 1;
pub const anon38081_InstrumentType_SF2Preset: u32 = 1;
pub const anon38081_InstrumentType_AUPreset: u32 = 2;
pub const anon38081_InstrumentType_Audiofile: u32 = 3;
pub const anon38081_InstrumentType_EXS24: u32 = 4;

pub const anon38171 = u32;
pub const anon38171_AUSampler_DefaultPercussionBankMSB: u32 = 120;
pub const anon38171_AUSampler_DefaultMelodicBankMSB: u32 = 121;
pub const anon38171_AUSampler_DefaultBankLSB: u32 = 0;

pub const anon38741 = UnitPropertyID;
pub const anon38741_AudioUnitProperty_DeferredRendererPullSize: UnitPropertyID = 3320;
pub const anon38741_AudioUnitProperty_DeferredRendererExtraLatency: UnitPropertyID = 3321;
pub const anon38741_AudioUnitProperty_DeferredRendererWaitFrames: UnitPropertyID = 3322;

pub const anon39031 = UnitPropertyID;
pub const anon39031_AUNetReceiveProperty_Hostname: UnitPropertyID = 3511;
pub const anon39031_AUNetReceiveProperty_Password: UnitPropertyID = 3512;

pub const anon39571 = UnitPropertyID;
pub const anon39571_AUNetSendProperty_PortNum: UnitPropertyID = 3513;
pub const anon39571_AUNetSendProperty_TransmissionFormat: UnitPropertyID = 3514;
pub const anon39571_AUNetSendProperty_TransmissionFormatIndex: UnitPropertyID = 3515;
pub const anon39571_AUNetSendProperty_ServiceName: UnitPropertyID = 3516;
pub const anon39571_AUNetSendProperty_Disconnect: UnitPropertyID = 3517;
pub const anon39571_AUNetSendProperty_Password: UnitPropertyID = 3518;

pub const anon39981 = UnitPropertyID;
pub const anon39981_AUNetSendPresetFormat_PCMFloat32: UnitPropertyID = 0;
pub const anon39981_AUNetSendPresetFormat_PCMInt24: UnitPropertyID = 1;
pub const anon39981_AUNetSendPresetFormat_PCMInt16: UnitPropertyID = 2;
pub const anon39981_AUNetSendPresetFormat_Lossless24: UnitPropertyID = 3;
pub const anon39981_AUNetSendPresetFormat_Lossless16: UnitPropertyID = 4;
pub const anon39981_AUNetSendPresetFormat_ULaw: UnitPropertyID = 5;
pub const anon39981_AUNetSendPresetFormat_IMA4: UnitPropertyID = 6;
pub const anon39981_AUNetSendPresetFormat_AAC_128kbpspc: UnitPropertyID = 7;
pub const anon39981_AUNetSendPresetFormat_AAC_96kbpspc: UnitPropertyID = 8;
pub const anon39981_AUNetSendPresetFormat_AAC_80kbpspc: UnitPropertyID = 9;
pub const anon39981_AUNetSendPresetFormat_AAC_64kbpspc: UnitPropertyID = 10;
pub const anon39981_AUNetSendPresetFormat_AAC_48kbpspc: UnitPropertyID = 11;
pub const anon39981_AUNetSendPresetFormat_AAC_40kbpspc: UnitPropertyID = 12;
pub const anon39981_AUNetSendPresetFormat_AAC_32kbpspc: UnitPropertyID = 13;
pub const anon39981_AUNetSendPresetFormat_AAC_LD_64kbpspc: UnitPropertyID = 14;
pub const anon39981_AUNetSendPresetFormat_AAC_LD_48kbpspc: UnitPropertyID = 15;
pub const anon39981_AUNetSendPresetFormat_AAC_LD_40kbpspc: UnitPropertyID = 16;
pub const anon39981_AUNetSendPresetFormat_AAC_LD_32kbpspc: UnitPropertyID = 17;
pub const anon39981_AUNetSendNumPresetFormats: UnitPropertyID = 18;

pub const AUNumVersion = extern struct {
    nonRelRev: objc.UInt8,
    stage: objc.UInt8,
    minorAndBugRev: objc.UInt8,
    majorRev: objc.UInt8,
};

pub const AUHostIdentifier = extern struct {
    hostName: core_foundation.StringRef,
    hostVersion: AUNumVersion,
};

pub const anon40591 = u32;
pub const anon40591_AudioUnitParameterFlag_Global: u32 = 1;
pub const anon40591_AudioUnitParameterFlag_Input: u32 = 2;
pub const anon40591_AudioUnitParameterFlag_Output: u32 = 4;
pub const anon40591_AudioUnitParameterFlag_Group: u32 = 8;

pub const anon40661 = u32;
pub const anon40661_AudioUnitParameterFlag_HasName: u32 = 2097152;

pub const anon40701 = UnitPropertyID;
pub const anon40701_AudioUnitProperty_SRCAlgorithm: UnitPropertyID = 9;
pub const anon40701_AudioUnitProperty_MIDIControlMapping: UnitPropertyID = 17;
pub const anon40701_AudioUnitProperty_CurrentPreset: UnitPropertyID = 28;
pub const anon40701_AudioUnitProperty_ParameterValueName: UnitPropertyID = 33;
pub const anon40701_AudioUnitProperty_BusCount: UnitPropertyID = 11;
pub const anon40701_AudioOfflineUnitProperty_InputSize: UnitPropertyID = 3020;
pub const anon40701_AudioOfflineUnitProperty_OutputSize: UnitPropertyID = 3021;

pub const anon40831 = objc.UInt32;
pub const anon40831_AudioUnitSRCAlgorithm_Polyphase: objc.UInt32 = 1886350457;
pub const anon40831_AudioUnitSRCAlgorithm_MediumQuality: objc.UInt32 = 1668510307;

pub const UnitMIDIControlMapping = extern struct {
    midiNRPN: objc.UInt16,
    midiControl: objc.UInt8,
    scope: objc.UInt8,
    element: UnitElement,
    parameter: UnitParameterID,
};

pub const UnitParameterValueName = extern struct {
    inParamID: UnitParameterID,
    inValue: ?*const objc.Float32,
    outName: core_foundation.StringRef,
};

pub const anon41091 = UnitPropertyID;
pub const anon41091_MusicDeviceProperty_GroupOutputBus: UnitPropertyID = 1002;
pub const anon41091_MusicDeviceProperty_SoundBankFSSpec: UnitPropertyID = 1003;
pub const anon41091_AudioUnitProperty_PannerMode: UnitPropertyID = 3008;

pub const anon41151 = UnitPropertyID;
pub const anon41151_AudioUnitProperty_SpeakerConfiguration: UnitPropertyID = 3001;

pub const anon41211 = u32;
pub const anon41211_SpeakerConfiguration_HeadPhones: u32 = 0;
pub const anon41211_SpeakerConfiguration_Stereo: u32 = 1;
pub const anon41211_SpeakerConfiguration_Quad: u32 = 2;
pub const anon41211_SpeakerConfiguration_5_0: u32 = 3;
pub const anon41211_SpeakerConfiguration_5_1: u32 = 3;

pub const AUSamplerBankPresetData = extern struct {
    bankURL: core_foundation.URLRef,
    bankMSB: objc.UInt8,
    bankLSB: objc.UInt8,
    presetID: objc.UInt8,
    reserved: objc.UInt8,
};

pub const anon41411 = UnitPropertyID;
pub const anon41411_AUSamplerProperty_LoadPresetFromBank: UnitPropertyID = 4100;
pub const anon41411_AUSamplerProperty_BankAndPreset: UnitPropertyID = 4100;

pub const AUValue = f32;

pub const AUParameterAddress = objc.uint64_t;

pub const AUParameterAutomationEventType = objc.uint32_t;
pub const AUParameterAutomationEventType_Value: objc.uint32_t = 0;
pub const AUParameterAutomationEventType_Touch: objc.uint32_t = 1;
pub const AUParameterAutomationEventType_Release: objc.uint32_t = 2;

pub const AURecordedParameterEvent = extern struct {
    hostTime: objc.uint64_t,
    address: AUParameterAddress,
    value: AUValue,
};

pub const AUParameterAutomationEvent = extern struct {
    hostTime: objc.uint64_t,
    address: AUParameterAddress,
    value: AUValue,
    eventType: AUParameterAutomationEventType,
    reserved: objc.uint64_t,
};

pub const AUParameterObserver = *const fn (AUParameterAddress, AUValue) callconv(.C) void;

pub const AUParameterRecordingObserver = *const fn (objc.NSInteger, ?*const AURecordedParameterEvent) callconv(.C) void;

pub const AUParameterAutomationObserver = *const fn (objc.NSInteger, ?*const AUParameterAutomationEvent) callconv(.C) void;

pub const AUParameterObserverToken = ?*anyopaque;

/// https://developer.apple.com/documentation/AudioToolbox/AUParameterNode?language=objc
pub const AUParameterNode = opaque {
    pub const Internal = objc.ExternClass("AUParameterNode", @This(), objc.NSObject, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn displayNameWithLength(_self: *@This(), _maximumLength: objc.NSInteger) ?*foundation.String {
        return objc.msgSend(_self, "displayNameWithLength:", ?*foundation.String, .{_maximumLength});
    }

    pub fn tokenByAddingParameterObserver(_self: *@This(), _observer: AUParameterObserver) AUParameterObserverToken {
        return objc.msgSend(_self, "tokenByAddingParameterObserver:", AUParameterObserverToken, .{_observer});
    }

    pub fn tokenByAddingParameterRecordingObserver(_self: *@This(), _observer: AUParameterRecordingObserver) AUParameterObserverToken {
        return objc.msgSend(_self, "tokenByAddingParameterRecordingObserver:", AUParameterObserverToken, .{_observer});
    }

    pub fn tokenByAddingParameterAutomationObserver(_self: *@This(), _observer: AUParameterAutomationObserver) AUParameterObserverToken {
        return objc.msgSend(_self, "tokenByAddingParameterAutomationObserver:", AUParameterObserverToken, .{_observer});
    }

    pub fn removeParameterObserver(_self: *@This(), _token: AUParameterObserverToken) void {
        return objc.msgSend(_self, "removeParameterObserver:", void, .{_token});
    }

    pub fn identifier(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "identifier", ?*foundation.String, .{});
    }

    pub fn keyPath(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "keyPath", ?*foundation.String, .{});
    }

    pub fn displayName(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "displayName", ?*foundation.String, .{});
    }

    pub fn implementorValueObserver(_self: *@This()) AUImplementorValueObserver {
        return objc.msgSend(_self, "implementorValueObserver", AUImplementorValueObserver, .{});
    }

    pub fn setImplementorValueObserver(_self: *@This(), _implementorValueObserver: AUImplementorValueObserver) void {
        return objc.msgSend(_self, "setImplementorValueObserver:", void, .{_implementorValueObserver});
    }

    pub fn implementorValueProvider(_self: *@This()) AUImplementorValueProvider {
        return objc.msgSend(_self, "implementorValueProvider", AUImplementorValueProvider, .{});
    }

    pub fn setImplementorValueProvider(_self: *@This(), _implementorValueProvider: AUImplementorValueProvider) void {
        return objc.msgSend(_self, "setImplementorValueProvider:", void, .{_implementorValueProvider});
    }

    pub fn implementorStringFromValueCallback(_self: *@This()) AUImplementorStringFromValueCallback {
        return objc.msgSend(_self, "implementorStringFromValueCallback", AUImplementorStringFromValueCallback, .{});
    }

    pub fn setImplementorStringFromValueCallback(_self: *@This(), _implementorStringFromValueCallback: AUImplementorStringFromValueCallback) void {
        return objc.msgSend(_self, "setImplementorStringFromValueCallback:", void, .{_implementorStringFromValueCallback});
    }

    pub fn implementorValueFromStringCallback(_self: *@This()) AUImplementorValueFromStringCallback {
        return objc.msgSend(_self, "implementorValueFromStringCallback", AUImplementorValueFromStringCallback, .{});
    }

    pub fn setImplementorValueFromStringCallback(_self: *@This(), _implementorValueFromStringCallback: AUImplementorValueFromStringCallback) void {
        return objc.msgSend(_self, "setImplementorValueFromStringCallback:", void, .{_implementorValueFromStringCallback});
    }

    pub fn implementorDisplayNameWithLengthCallback(_self: *@This()) AUImplementorDisplayNameWithLengthCallback {
        return objc.msgSend(_self, "implementorDisplayNameWithLengthCallback", AUImplementorDisplayNameWithLengthCallback, .{});
    }

    pub fn setImplementorDisplayNameWithLengthCallback(_self: *@This(), _implementorDisplayNameWithLengthCallback: AUImplementorDisplayNameWithLengthCallback) void {
        return objc.msgSend(_self, "setImplementorDisplayNameWithLengthCallback:", void, .{_implementorDisplayNameWithLengthCallback});
    }
};

/// https://developer.apple.com/documentation/AudioToolbox/AUParameterGroup?language=objc
pub const AUParameterGroup = opaque {
    pub const Internal = objc.ExternClass("AUParameterGroup", @This(), AUParameterNode, &.{foundation.SecureCoding});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*foundation.Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*foundation.Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn supportsSecureCoding() objc.BOOL {
        return objc.msgSend(Internal.class(), "supportsSecureCoding", objc.BOOL, .{});
    }

    pub fn children(_self: *@This()) ?*foundation.Array(?*AUParameterNode) {
        return objc.msgSend(_self, "children", ?*foundation.Array(?*AUParameterNode), .{});
    }

    pub fn allParameters(_self: *@This()) ?*foundation.Array(?*AUParameter) {
        return objc.msgSend(_self, "allParameters", ?*foundation.Array(?*AUParameter), .{});
    }
};

/// https://developer.apple.com/documentation/AudioToolbox/AUParameterTree?language=objc
pub const AUParameterTree = opaque {
    pub const Internal = objc.ExternClass("AUParameterTree", @This(), AUParameterGroup, &.{foundation.SecureCoding});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*foundation.Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*foundation.Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn supportsSecureCoding() objc.BOOL {
        return objc.msgSend(Internal.class(), "supportsSecureCoding", objc.BOOL, .{});
    }

    pub fn parameterWithAddress(_self: *@This(), _address: AUParameterAddress) ?*AUParameter {
        return objc.msgSend(_self, "parameterWithAddress:", ?*AUParameter, .{_address});
    }

    pub fn parameterWithIDScopeElement(_self: *@This(), _paramID: UnitParameterID, _scope: UnitScope, _element: UnitElement) ?*AUParameter {
        return objc.msgSend(_self, "parameterWithID:scope:element:", ?*AUParameter, .{ _paramID, _scope, _element });
    }

    pub fn createParameterWithIdentifierNameAddressMinMaxUnitUnitNameFlagsValueStringsDependentParameters(
        _identifier: ?*foundation.String,
        _name: ?*foundation.String,
        _address: AUParameterAddress,
        _min: AUValue,
        _max: AUValue,
        _unit: UnitParameterUnit,
        _unitName: ?*foundation.String,
        _flags: UnitParameterOptions,
        _valueStrings: ?*foundation.Array(?*foundation.String),
        _dependentParameters: ?*foundation.Array(?*foundation.Number),
    ) ?*AUParameter {
        return objc.msgSend(Internal.class(), "createParameterWithIdentifier:name:address:min:max:unit:unitName:flags:valueStrings:dependentParameters:", ?*AUParameter, .{
            _identifier,
            _name,
            _address,
            _min,
            _max,
            _unit,
            _unitName,
            _flags,
            _valueStrings,
            _dependentParameters,
        });
    }

    pub fn createGroupWithIdentifierNameChildren(_identifier: ?*foundation.String, _name: ?*foundation.String, _children: ?*foundation.Array(?*AUParameterNode)) ?*AUParameterGroup {
        return objc.msgSend(Internal.class(), "createGroupWithIdentifier:name:children:", ?*AUParameterGroup, .{ _identifier, _name, _children });
    }

    pub fn createGroupTemplate(_children: ?*foundation.Array(?*AUParameterNode)) ?*AUParameterGroup {
        return objc.msgSend(Internal.class(), "createGroupTemplate:", ?*AUParameterGroup, .{_children});
    }

    pub fn createGroupFromTemplateIdentifierNameAddressOffset(
        _templateGroup: ?*AUParameterGroup,
        _identifier: ?*foundation.String,
        _name: ?*foundation.String,
        _addressOffset: AUParameterAddress,
    ) ?*AUParameterGroup {
        return objc.msgSend(Internal.class(), "createGroupFromTemplate:identifier:name:addressOffset:", ?*AUParameterGroup, .{
            _templateGroup,
            _identifier,
            _name,
            _addressOffset,
        });
    }

    pub fn createTreeWithChildren(_children: ?*foundation.Array(?*AUParameterNode)) ?*AUParameterTree {
        return objc.msgSend(Internal.class(), "createTreeWithChildren:", ?*AUParameterTree, .{_children});
    }
};

/// https://developer.apple.com/documentation/AudioToolbox/AUParameter?language=objc
pub const AUParameter = opaque {
    pub const Internal = objc.ExternClass("AUParameter", @This(), AUParameterNode, &.{foundation.SecureCoding});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*foundation.Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*foundation.Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn supportsSecureCoding() objc.BOOL {
        return objc.msgSend(Internal.class(), "supportsSecureCoding", objc.BOOL, .{});
    }

    pub fn setValueOriginator(_self: *@This(), _value: AUValue, _originator: AUParameterObserverToken) void {
        return objc.msgSend(_self, "setValue:originator:", void, .{ _value, _originator });
    }

    pub fn setValueOriginatorAtHostTime(_self: *@This(), _value: AUValue, _originator: AUParameterObserverToken, _hostTime: objc.uint64_t) void {
        return objc.msgSend(_self, "setValue:originator:atHostTime:", void, .{ _value, _originator, _hostTime });
    }

    pub fn setValueOriginatorAtHostTimeEventType(
        _self: *@This(),
        _value: AUValue,
        _originator: AUParameterObserverToken,
        _hostTime: objc.uint64_t,
        _eventType: AUParameterAutomationEventType,
    ) void {
        return objc.msgSend(_self, "setValue:originator:atHostTime:eventType:", void, .{
            _value,
            _originator,
            _hostTime,
            _eventType,
        });
    }

    pub fn stringFromValue(_self: *@This(), _value: ?*const AUValue) ?*foundation.String {
        return objc.msgSend(_self, "stringFromValue:", ?*foundation.String, .{_value});
    }

    pub fn valueFromString(_self: *@This(), _string: ?*foundation.String) AUValue {
        return objc.msgSend(_self, "valueFromString:", AUValue, .{_string});
    }

    pub fn minValue(_self: *@This()) AUValue {
        return objc.msgSend(_self, "minValue", AUValue, .{});
    }

    pub fn maxValue(_self: *@This()) AUValue {
        return objc.msgSend(_self, "maxValue", AUValue, .{});
    }

    pub fn unit(_self: *@This()) UnitParameterUnit {
        return objc.msgSend(_self, "unit", UnitParameterUnit, .{});
    }

    pub fn unitName(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "unitName", ?*foundation.String, .{});
    }

    pub fn flags(_self: *@This()) UnitParameterOptions {
        return objc.msgSend(_self, "flags", UnitParameterOptions, .{});
    }

    pub fn address(_self: *@This()) AUParameterAddress {
        return objc.msgSend(_self, "address", AUParameterAddress, .{});
    }

    pub fn valueStrings(_self: *@This()) ?*foundation.Array(?*foundation.String) {
        return objc.msgSend(_self, "valueStrings", ?*foundation.Array(?*foundation.String), .{});
    }

    pub fn dependentParameters(_self: *@This()) ?*foundation.Array(?*foundation.Number) {
        return objc.msgSend(_self, "dependentParameters", ?*foundation.Array(?*foundation.Number), .{});
    }

    pub fn value(_self: *@This()) AUValue {
        return objc.msgSend(_self, "value", AUValue, .{});
    }

    pub fn setValue(_self: *@This(), _value: AUValue) void {
        return objc.msgSend(_self, "setValue:", void, .{_value});
    }
};

pub const AUAudioObjectID = objc.UInt32;

pub const MIDIChannelNumber = objc.uint8_t;

pub const AUAudioUnitStatus = objc.OSStatus;

pub const AUAudioFrameCount = objc.uint32_t;

pub const AUAudioChannelCount = objc.uint32_t;

pub const AUAudioUnitBusType = objc.NSInteger;
pub const AUAudioUnitBusType_Input: objc.NSInteger = 1;
pub const AUAudioUnitBusType_Output: objc.NSInteger = 2;

pub const AURenderPullInputBlock = AUAudioUnitStatus;

pub const AURenderBlock = AUAudioUnitStatus;

pub const AURenderObserver = *const fn (
    UnitRenderActionFlags,
    ?*const core_audio_types.TimeStamp,
    AUAudioFrameCount,
    objc.NSInteger,
) callconv(.C) void;

pub const AUScheduleParameterBlock = *const fn (
    AUEventSampleTime,
    AUAudioFrameCount,
    AUParameterAddress,
    AUValue,
) callconv(.C) void;

pub const AUScheduleMIDIEventBlock = *const fn (
    AUEventSampleTime,
    objc.uint8_t,
    objc.NSInteger,
    ?*const objc.uint8_t,
) callconv(.C) void;

pub const AUMIDIOutputEventBlock = objc.OSStatus;

pub const AUHostMusicalContextBlock = objc.BOOL;

pub const AUMIDICIProfileChangedBlock = *const fn (
    objc.uint8_t,
    MIDIChannelNumber,
    ?*core_midi.CIProfile,
    objc.BOOL,
) callconv(.C) void;

pub const AUHostTransportStateFlags = objc.NSUInteger;
pub const AUHostTransportStateFlags_Changed: objc.NSUInteger = 1;
pub const AUHostTransportStateFlags_Moving: objc.NSUInteger = 2;
pub const AUHostTransportStateFlags_Recording: objc.NSUInteger = 4;
pub const AUHostTransportStateFlags_Cycling: objc.NSUInteger = 8;

pub const AUHostTransportStateBlock = objc.BOOL;

/// https://developer.apple.com/documentation/AudioToolbox/AUAudioUnit?language=objc
pub const AUAudioUnit = opaque {
    pub const Internal = objc.ExternClass("AUAudioUnit", @This(), objc.NSObject, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn initWithComponentDescriptionOptionsError(_self: *@This(), _componentDescription: ComponentDescription, _options: ComponentInstantiationOptions, _outError: ?*?*foundation.Error) *@This() {
        return objc.msgSend(_self, "initWithComponentDescription:options:error:", *@This(), .{ _componentDescription, _options, _outError });
    }

    pub fn initWithComponentDescriptionError(_self: *@This(), _componentDescription: ComponentDescription, _outError: ?*?*foundation.Error) *@This() {
        return objc.msgSend(_self, "initWithComponentDescription:error:", *@This(), .{ _componentDescription, _outError });
    }

    pub fn instantiateWithComponentDescriptionOptionsCompletionHandler(_componentDescription: ComponentDescription, _options: ComponentInstantiationOptions, _completionHandler: *const fn (?*AUAudioUnit, ?*foundation.Error) callconv(.C) void) void {
        return objc.msgSend(Internal.class(), "instantiateWithComponentDescription:options:completionHandler:", void, .{ _componentDescription, _options, _completionHandler });
    }

    pub fn allocateRenderResourcesAndReturnError(_self: *@This(), _outError: ?*?*foundation.Error) objc.BOOL {
        return objc.msgSend(_self, "allocateRenderResourcesAndReturnError:", objc.BOOL, .{_outError});
    }

    pub fn deallocateRenderResources(_self: *@This()) void {
        return objc.msgSend(_self, "deallocateRenderResources", void, .{});
    }

    pub fn reset(_self: *@This()) void {
        return objc.msgSend(_self, "reset", void, .{});
    }

    pub fn tokenByAddingRenderObserver(_self: *@This(), _observer: AURenderObserver) objc.NSInteger {
        return objc.msgSend(_self, "tokenByAddingRenderObserver:", objc.NSInteger, .{_observer});
    }

    pub fn removeRenderObserver(_self: *@This(), _token: objc.NSInteger) void {
        return objc.msgSend(_self, "removeRenderObserver:", void, .{_token});
    }

    pub fn parametersForOverviewWithCount(_self: *@This(), _count: objc.NSInteger) ?*foundation.Array(?*foundation.Number) {
        return objc.msgSend(_self, "parametersForOverviewWithCount:", ?*foundation.Array(?*foundation.Number), .{_count});
    }

    pub fn saveUserPresetError(_self: *@This(), _userPreset: ?*AUAudioUnitPreset, _outError: ?*?*foundation.Error) objc.BOOL {
        return objc.msgSend(_self, "saveUserPreset:error:", objc.BOOL, .{ _userPreset, _outError });
    }

    pub fn deleteUserPresetError(_self: *@This(), _userPreset: ?*AUAudioUnitPreset, _outError: ?*?*foundation.Error) objc.BOOL {
        return objc.msgSend(_self, "deleteUserPreset:error:", objc.BOOL, .{ _userPreset, _outError });
    }

    pub fn presetStateForError(_self: *@This(), _userPreset: ?*AUAudioUnitPreset, _outError: ?*?*foundation.Error) ?*foundation.Dictionary(?*foundation.String, ?objc.Id) {
        return objc.msgSend(_self, "presetStateFor:error:", ?*foundation.Dictionary(?*foundation.String, ?objc.Id), .{ _userPreset, _outError });
    }

    pub fn profileStateForCableChannel(_self: *@This(), _cable: objc.uint8_t, _channel: MIDIChannelNumber) ?*core_midi.CIProfileState {
        return objc.msgSend(_self, "profileStateForCable:channel:", ?*core_midi.CIProfileState, .{ _cable, _channel });
    }

    pub fn enableProfileCableOnChannelError(
        _self: *@This(),
        _profile: ?*core_midi.CIProfile,
        _cable: objc.uint8_t,
        _channel: MIDIChannelNumber,
        _outError: ?*?*foundation.Error,
    ) objc.BOOL {
        return objc.msgSend(_self, "enableProfile:cable:onChannel:error:", objc.BOOL, .{
            _profile,
            _cable,
            _channel,
            _outError,
        });
    }

    pub fn disableProfileCableOnChannelError(
        _self: *@This(),
        _profile: ?*core_midi.CIProfile,
        _cable: objc.uint8_t,
        _channel: MIDIChannelNumber,
        _outError: ?*?*foundation.Error,
    ) objc.BOOL {
        return objc.msgSend(_self, "disableProfile:cable:onChannel:error:", objc.BOOL, .{
            _profile,
            _cable,
            _channel,
            _outError,
        });
    }

    pub fn messageChannelFor(_self: *@This(), _channelName: ?*foundation.String) ?*objc.id {
        return objc.msgSend(_self, "messageChannelFor:", ?*objc.id, .{_channelName});
    }

    pub fn componentDescription(_self: *@This()) ComponentDescription {
        return objc.msgSend(_self, "componentDescription", ComponentDescription, .{});
    }

    pub fn component(_self: *@This()) Component {
        return objc.msgSend(_self, "component", Component, .{});
    }

    pub fn componentName(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "componentName", ?*foundation.String, .{});
    }

    pub fn audioUnitName(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "audioUnitName", ?*foundation.String, .{});
    }

    pub fn manufacturerName(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "manufacturerName", ?*foundation.String, .{});
    }

    pub fn audioUnitShortName(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "audioUnitShortName", ?*foundation.String, .{});
    }

    pub fn componentVersion(_self: *@This()) objc.uint32_t {
        return objc.msgSend(_self, "componentVersion", objc.uint32_t, .{});
    }

    pub fn renderResourcesAllocated(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "renderResourcesAllocated", objc.BOOL, .{});
    }

    pub fn inputBusses(_self: *@This()) ?*AUAudioUnitBusArray {
        return objc.msgSend(_self, "inputBusses", ?*AUAudioUnitBusArray, .{});
    }

    pub fn outputBusses(_self: *@This()) ?*AUAudioUnitBusArray {
        return objc.msgSend(_self, "outputBusses", ?*AUAudioUnitBusArray, .{});
    }

    pub fn renderBlock(_self: *@This()) AURenderBlock {
        return objc.msgSend(_self, "renderBlock", AURenderBlock, .{});
    }

    pub fn scheduleParameterBlock(_self: *@This()) AUScheduleParameterBlock {
        return objc.msgSend(_self, "scheduleParameterBlock", AUScheduleParameterBlock, .{});
    }

    pub fn maximumFramesToRender(_self: *@This()) AUAudioFrameCount {
        return objc.msgSend(_self, "maximumFramesToRender", AUAudioFrameCount, .{});
    }

    pub fn setMaximumFramesToRender(_self: *@This(), _maximumFramesToRender: AUAudioFrameCount) void {
        return objc.msgSend(_self, "setMaximumFramesToRender:", void, .{_maximumFramesToRender});
    }

    pub fn parameterTree(_self: *@This()) ?*AUParameterTree {
        return objc.msgSend(_self, "parameterTree", ?*AUParameterTree, .{});
    }

    pub fn setParameterTree(_self: *@This(), _parameterTree: ?*AUParameterTree) void {
        return objc.msgSend(_self, "setParameterTree:", void, .{_parameterTree});
    }

    pub fn allParameterValues(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allParameterValues", objc.BOOL, .{});
    }

    pub fn isMusicDeviceOrEffect(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isMusicDeviceOrEffect", objc.BOOL, .{});
    }

    pub fn virtualMIDICableCount(_self: *@This()) objc.NSInteger {
        return objc.msgSend(_self, "virtualMIDICableCount", objc.NSInteger, .{});
    }

    pub fn scheduleMIDIEventBlock(_self: *@This()) AUScheduleMIDIEventBlock {
        return objc.msgSend(_self, "scheduleMIDIEventBlock", AUScheduleMIDIEventBlock, .{});
    }

    pub fn scheduleMIDIEventListBlock(_self: *@This()) AUMIDIEventListBlock {
        return objc.msgSend(_self, "scheduleMIDIEventListBlock", AUMIDIEventListBlock, .{});
    }

    pub fn midiOutputNames(_self: *@This()) ?*foundation.Array(?*foundation.String) {
        return objc.msgSend(_self, "MIDIOutputNames", ?*foundation.Array(?*foundation.String), .{});
    }

    pub fn providesUserInterface(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "providesUserInterface", objc.BOOL, .{});
    }

    pub fn midiOutputEventBlock(_self: *@This()) AUMIDIOutputEventBlock {
        return objc.msgSend(_self, "MIDIOutputEventBlock", AUMIDIOutputEventBlock, .{});
    }

    pub fn setMIDIOutputEventBlock(_self: *@This(), _MIDIOutputEventBlock: AUMIDIOutputEventBlock) void {
        return objc.msgSend(_self, "setMIDIOutputEventBlock:", void, .{_MIDIOutputEventBlock});
    }

    pub fn midiOutputEventListBlock(_self: *@This()) AUMIDIEventListBlock {
        return objc.msgSend(_self, "MIDIOutputEventListBlock", AUMIDIEventListBlock, .{});
    }

    pub fn setMIDIOutputEventListBlock(_self: *@This(), _MIDIOutputEventListBlock: AUMIDIEventListBlock) void {
        return objc.msgSend(_self, "setMIDIOutputEventListBlock:", void, .{_MIDIOutputEventListBlock});
    }

    pub fn audioUnitMIDIProtocol(_self: *@This()) core_midi.ProtocolID {
        return objc.msgSend(_self, "AudioUnitMIDIProtocol", core_midi.ProtocolID, .{});
    }

    pub fn hostMIDIProtocol(_self: *@This()) core_midi.ProtocolID {
        return objc.msgSend(_self, "hostMIDIProtocol", core_midi.ProtocolID, .{});
    }

    pub fn setHostMIDIProtocol(_self: *@This(), _hostMIDIProtocol: core_midi.ProtocolID) void {
        return objc.msgSend(_self, "setHostMIDIProtocol:", void, .{_hostMIDIProtocol});
    }

    pub fn fullState(_self: *@This()) ?*foundation.Dictionary(?*foundation.String, ?objc.Id) {
        return objc.msgSend(_self, "fullState", ?*foundation.Dictionary(?*foundation.String, ?objc.Id), .{});
    }

    pub fn setFullState(_self: *@This(), _fullState: ?*foundation.Dictionary(?*foundation.String, ?objc.Id)) void {
        return objc.msgSend(_self, "setFullState:", void, .{_fullState});
    }

    pub fn fullStateForDocument(_self: *@This()) ?*foundation.Dictionary(?*foundation.String, ?objc.Id) {
        return objc.msgSend(_self, "fullStateForDocument", ?*foundation.Dictionary(?*foundation.String, ?objc.Id), .{});
    }

    pub fn setFullStateForDocument(_self: *@This(), _fullStateForDocument: ?*foundation.Dictionary(?*foundation.String, ?objc.Id)) void {
        return objc.msgSend(_self, "setFullStateForDocument:", void, .{_fullStateForDocument});
    }

    pub fn factoryPresets(_self: *@This()) ?*foundation.Array(?*AUAudioUnitPreset) {
        return objc.msgSend(_self, "factoryPresets", ?*foundation.Array(?*AUAudioUnitPreset), .{});
    }

    pub fn userPresets(_self: *@This()) ?*foundation.Array(?*AUAudioUnitPreset) {
        return objc.msgSend(_self, "userPresets", ?*foundation.Array(?*AUAudioUnitPreset), .{});
    }

    pub fn supportsUserPresets(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "supportsUserPresets", objc.BOOL, .{});
    }

    pub fn isLoadedInProcess(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isLoadedInProcess", objc.BOOL, .{});
    }

    pub fn currentPreset(_self: *@This()) ?*AUAudioUnitPreset {
        return objc.msgSend(_self, "currentPreset", ?*AUAudioUnitPreset, .{});
    }

    pub fn setCurrentPreset(_self: *@This(), _currentPreset: ?*AUAudioUnitPreset) void {
        return objc.msgSend(_self, "setCurrentPreset:", void, .{_currentPreset});
    }

    pub fn latency(_self: *@This()) foundation.TimeInterval {
        return objc.msgSend(_self, "latency", foundation.TimeInterval, .{});
    }

    pub fn tailTime(_self: *@This()) foundation.TimeInterval {
        return objc.msgSend(_self, "tailTime", foundation.TimeInterval, .{});
    }

    pub fn renderQuality(_self: *@This()) objc.NSInteger {
        return objc.msgSend(_self, "renderQuality", objc.NSInteger, .{});
    }

    pub fn setRenderQuality(_self: *@This(), _renderQuality: objc.NSInteger) void {
        return objc.msgSend(_self, "setRenderQuality:", void, .{_renderQuality});
    }

    pub fn shouldBypassEffect(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "shouldBypassEffect", objc.BOOL, .{});
    }

    pub fn setShouldBypassEffect(_self: *@This(), _shouldBypassEffect: objc.BOOL) void {
        return objc.msgSend(_self, "setShouldBypassEffect:", void, .{_shouldBypassEffect});
    }

    pub fn canProcessInPlace(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "canProcessInPlace", objc.BOOL, .{});
    }

    pub fn isRenderingOffline(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isRenderingOffline", objc.BOOL, .{});
    }

    pub fn setRenderingOffline(_self: *@This(), _renderingOffline: objc.BOOL) void {
        return objc.msgSend(_self, "setRenderingOffline:", void, .{_renderingOffline});
    }

    pub fn channelCapabilities(_self: *@This()) ?*foundation.Array(?*foundation.Number) {
        return objc.msgSend(_self, "channelCapabilities", ?*foundation.Array(?*foundation.Number), .{});
    }

    pub fn musicalContextBlock(_self: *@This()) AUHostMusicalContextBlock {
        return objc.msgSend(_self, "musicalContextBlock", AUHostMusicalContextBlock, .{});
    }

    pub fn setMusicalContextBlock(_self: *@This(), _musicalContextBlock: AUHostMusicalContextBlock) void {
        return objc.msgSend(_self, "setMusicalContextBlock:", void, .{_musicalContextBlock});
    }

    pub fn transportStateBlock(_self: *@This()) AUHostTransportStateBlock {
        return objc.msgSend(_self, "transportStateBlock", AUHostTransportStateBlock, .{});
    }

    pub fn setTransportStateBlock(_self: *@This(), _transportStateBlock: AUHostTransportStateBlock) void {
        return objc.msgSend(_self, "setTransportStateBlock:", void, .{_transportStateBlock});
    }

    pub fn contextName(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "contextName", ?*foundation.String, .{});
    }

    pub fn setContextName(_self: *@This(), _contextName: ?*foundation.String) void {
        return objc.msgSend(_self, "setContextName:", void, .{_contextName});
    }

    pub fn migrateFromPlugin(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "migrateFromPlugin", ?*foundation.Array, .{});
    }

    pub fn supportsMPE(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "supportsMPE", objc.BOOL, .{});
    }

    pub fn channelMap(_self: *@This()) ?*foundation.Array(?*foundation.Number) {
        return objc.msgSend(_self, "channelMap", ?*foundation.Array(?*foundation.Number), .{});
    }

    pub fn setChannelMap(_self: *@This(), _channelMap: ?*foundation.Array(?*foundation.Number)) void {
        return objc.msgSend(_self, "setChannelMap:", void, .{_channelMap});
    }

    pub fn profileChangedBlock(_self: *@This()) AUMIDICIProfileChangedBlock {
        return objc.msgSend(_self, "profileChangedBlock", AUMIDICIProfileChangedBlock, .{});
    }

    pub fn setProfileChangedBlock(_self: *@This(), _profileChangedBlock: AUMIDICIProfileChangedBlock) void {
        return objc.msgSend(_self, "setProfileChangedBlock:", void, .{_profileChangedBlock});
    }

    pub fn setDeviceIDError(_self: *@This(), _deviceID: AUAudioObjectID, _outError: ?*?*foundation.Error) objc.BOOL {
        return objc.msgSend(_self, "setDeviceID:error:", objc.BOOL, .{ _deviceID, _outError });
    }

    pub fn startHardwareAndReturnError(_self: *@This(), _outError: ?*?*foundation.Error) objc.BOOL {
        return objc.msgSend(_self, "startHardwareAndReturnError:", objc.BOOL, .{_outError});
    }

    pub fn stopHardware(_self: *@This()) void {
        return objc.msgSend(_self, "stopHardware", void, .{});
    }

    pub fn canPerformInput(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "canPerformInput", objc.BOOL, .{});
    }

    pub fn canPerformOutput(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "canPerformOutput", objc.BOOL, .{});
    }

    pub fn isInputEnabled(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isInputEnabled", objc.BOOL, .{});
    }

    pub fn setInputEnabled(_self: *@This(), _inputEnabled: objc.BOOL) void {
        return objc.msgSend(_self, "setInputEnabled:", void, .{_inputEnabled});
    }

    pub fn isOutputEnabled(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isOutputEnabled", objc.BOOL, .{});
    }

    pub fn setOutputEnabled(_self: *@This(), _outputEnabled: objc.BOOL) void {
        return objc.msgSend(_self, "setOutputEnabled:", void, .{_outputEnabled});
    }

    pub fn outputProvider(_self: *@This()) AURenderPullInputBlock {
        return objc.msgSend(_self, "outputProvider", AURenderPullInputBlock, .{});
    }

    pub fn setOutputProvider(_self: *@This(), _outputProvider: AURenderPullInputBlock) void {
        return objc.msgSend(_self, "setOutputProvider:", void, .{_outputProvider});
    }

    pub fn inputHandler(_self: *@This()) AUInputHandler {
        return objc.msgSend(_self, "inputHandler", AUInputHandler, .{});
    }

    pub fn setInputHandler(_self: *@This(), _inputHandler: AUInputHandler) void {
        return objc.msgSend(_self, "setInputHandler:", void, .{_inputHandler});
    }

    pub fn deviceID(_self: *@This()) AUAudioObjectID {
        return objc.msgSend(_self, "deviceID", AUAudioObjectID, .{});
    }

    pub fn deviceInputLatency(_self: *@This()) foundation.TimeInterval {
        return objc.msgSend(_self, "deviceInputLatency", foundation.TimeInterval, .{});
    }

    pub fn deviceOutputLatency(_self: *@This()) foundation.TimeInterval {
        return objc.msgSend(_self, "deviceOutputLatency", foundation.TimeInterval, .{});
    }

    pub fn isRunning(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isRunning", objc.BOOL, .{});
    }

    pub fn osWorkgroup(_self: *@This()) objc.os_workgroup_t {
        return objc.msgSend(_self, "osWorkgroup", objc.os_workgroup_t, .{});
    }

    pub fn registerSubclassAsComponentDescriptionNameVersion(
        _cls: objc.Class,
        _componentDescription: ComponentDescription,
        _name: ?*foundation.String,
        _version: objc.UInt32,
    ) void {
        return objc.msgSend(Internal.class(), "registerSubclass:asComponentDescription:name:version:", void, .{
            _cls,
            _componentDescription,
            _name,
            _version,
        });
    }

    pub fn shouldChangeToFormatForBus(_self: *@This(), _format: ?*avfaudio.Format, _bus: ?*AUAudioUnitBus) objc.BOOL {
        return objc.msgSend(_self, "shouldChangeToFormat:forBus:", objc.BOOL, .{ _format, _bus });
    }

    pub fn setRenderResourcesAllocated(_self: *@This(), _flag: objc.BOOL) void {
        return objc.msgSend(_self, "setRenderResourcesAllocated:", void, .{_flag});
    }

    pub fn internalRenderBlock(_self: *@This()) AUInternalRenderBlock {
        return objc.msgSend(_self, "internalRenderBlock", AUInternalRenderBlock, .{});
    }

    pub fn renderContextObserver(_self: *@This()) AURenderContextObserver {
        return objc.msgSend(_self, "renderContextObserver", AURenderContextObserver, .{});
    }

    pub fn midiOutputBufferSizeHint(_self: *@This()) objc.NSInteger {
        return objc.msgSend(_self, "MIDIOutputBufferSizeHint", objc.NSInteger, .{});
    }

    pub fn setMIDIOutputBufferSizeHint(_self: *@This(), _MIDIOutputBufferSizeHint: objc.NSInteger) void {
        return objc.msgSend(_self, "setMIDIOutputBufferSizeHint:", void, .{_MIDIOutputBufferSizeHint});
    }
};

pub const AUInputHandler = *const fn (
    ?*UnitRenderActionFlags,
    ?*const core_audio_types.TimeStamp,
    AUAudioFrameCount,
    objc.NSInteger,
) callconv(.C) void;

/// https://developer.apple.com/documentation/AudioToolbox/AUAudioUnitBusArray?language=objc
pub const AUAudioUnitBusArray = opaque {
    pub const Internal = objc.ExternClass("AUAudioUnitBusArray", @This(), objc.NSObject, &.{foundation.FastEnumeration});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn countByEnumeratingWithStateObjectsCount(_self: *@This(), _state: ?*foundation.FastEnumerationState, _buffer: ?*?objc.Id, _len: objc.NSUInteger) objc.NSUInteger {
        return objc.msgSend(_self, "countByEnumeratingWithState:objects:count:", objc.NSUInteger, .{ _state, _buffer, _len });
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn initWithAudioUnitBusTypeBusses(_self: *@This(), _owner: ?*AUAudioUnit, _busType: AUAudioUnitBusType, _busArray: ?*foundation.Array(?*AUAudioUnitBus)) *@This() {
        return objc.msgSend(_self, "initWithAudioUnit:busType:busses:", *@This(), .{ _owner, _busType, _busArray });
    }

    pub fn initWithAudioUnitBusType(_self: *@This(), _owner: ?*AUAudioUnit, _busType: AUAudioUnitBusType) *@This() {
        return objc.msgSend(_self, "initWithAudioUnit:busType:", *@This(), .{ _owner, _busType });
    }

    pub fn objectAtIndexedSubscript(_self: *@This(), _index: objc.NSUInteger) ?*AUAudioUnitBus {
        return objc.msgSend(_self, "objectAtIndexedSubscript:", ?*AUAudioUnitBus, .{_index});
    }

    pub fn setBusCountError(_self: *@This(), _count: objc.NSUInteger, _outError: ?*?*foundation.Error) objc.BOOL {
        return objc.msgSend(_self, "setBusCount:error:", objc.BOOL, .{ _count, _outError });
    }

    pub fn addObserverToAllBussesForKeyPathOptionsContext(
        _self: *@This(),
        _observer: ?*objc.NSObject,
        _keyPath: ?*foundation.String,
        _options: foundation.KeyValueObservingOptions,
        _context: ?*anyopaque,
    ) void {
        return objc.msgSend(_self, "addObserverToAllBusses:forKeyPath:options:context:", void, .{
            _observer,
            _keyPath,
            _options,
            _context,
        });
    }

    pub fn removeObserverFromAllBussesForKeyPathContext(_self: *@This(), _observer: ?*objc.NSObject, _keyPath: ?*foundation.String, _context: ?*anyopaque) void {
        return objc.msgSend(_self, "removeObserverFromAllBusses:forKeyPath:context:", void, .{ _observer, _keyPath, _context });
    }

    pub fn count(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "count", objc.NSUInteger, .{});
    }

    pub fn isCountChangeable(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isCountChangeable", objc.BOOL, .{});
    }

    pub fn ownerAudioUnit(_self: *@This()) ?*AUAudioUnit {
        return objc.msgSend(_self, "ownerAudioUnit", ?*AUAudioUnit, .{});
    }

    pub fn busType(_self: *@This()) AUAudioUnitBusType {
        return objc.msgSend(_self, "busType", AUAudioUnitBusType, .{});
    }

    pub fn replaceBusses(_self: *@This(), _busArray: ?*foundation.Array(?*AUAudioUnitBus)) void {
        return objc.msgSend(_self, "replaceBusses:", void, .{_busArray});
    }
};

/// https://developer.apple.com/documentation/AudioToolbox/AUAudioUnitBus?language=objc
pub const AUAudioUnitBus = opaque {
    pub const Internal = objc.ExternClass("AUAudioUnitBus", @This(), objc.NSObject, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn setFormatError(_self: *@This(), _format: ?*avfaudio.Format, _outError: ?*?*foundation.Error) objc.BOOL {
        return objc.msgSend(_self, "setFormat:error:", objc.BOOL, .{ _format, _outError });
    }

    pub fn format(_self: *@This()) ?*avfaudio.Format {
        return objc.msgSend(_self, "format", ?*avfaudio.Format, .{});
    }

    pub fn shouldAllocateBuffer(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "shouldAllocateBuffer", objc.BOOL, .{});
    }

    pub fn setShouldAllocateBuffer(_self: *@This(), _shouldAllocateBuffer: objc.BOOL) void {
        return objc.msgSend(_self, "setShouldAllocateBuffer:", void, .{_shouldAllocateBuffer});
    }

    pub fn isEnabled(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isEnabled", objc.BOOL, .{});
    }

    pub fn setEnabled(_self: *@This(), _enabled: objc.BOOL) void {
        return objc.msgSend(_self, "setEnabled:", void, .{_enabled});
    }

    pub fn name(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "name", ?*foundation.String, .{});
    }

    pub fn setName(_self: *@This(), _name: ?*foundation.String) void {
        return objc.msgSend(_self, "setName:", void, .{_name});
    }

    pub fn index(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "index", objc.NSUInteger, .{});
    }

    pub fn busType(_self: *@This()) AUAudioUnitBusType {
        return objc.msgSend(_self, "busType", AUAudioUnitBusType, .{});
    }

    pub fn ownerAudioUnit(_self: *@This()) ?*AUAudioUnit {
        return objc.msgSend(_self, "ownerAudioUnit", ?*AUAudioUnit, .{});
    }

    pub fn supportedChannelLayoutTags(_self: *@This()) ?*foundation.Array(?*foundation.Number) {
        return objc.msgSend(_self, "supportedChannelLayoutTags", ?*foundation.Array(?*foundation.Number), .{});
    }

    pub fn contextPresentationLatency(_self: *@This()) foundation.TimeInterval {
        return objc.msgSend(_self, "contextPresentationLatency", foundation.TimeInterval, .{});
    }

    pub fn setContextPresentationLatency(_self: *@This(), _contextPresentationLatency: foundation.TimeInterval) void {
        return objc.msgSend(_self, "setContextPresentationLatency:", void, .{_contextPresentationLatency});
    }

    pub fn initWithFormatError(_self: *@This(), _format: ?*avfaudio.Format, _outError: ?*?*foundation.Error) *@This() {
        return objc.msgSend(_self, "initWithFormat:error:", *@This(), .{ _format, _outError });
    }

    pub fn supportedChannelCounts(_self: *@This()) ?*foundation.Array(?*foundation.Number) {
        return objc.msgSend(_self, "supportedChannelCounts", ?*foundation.Array(?*foundation.Number), .{});
    }

    pub fn setSupportedChannelCounts(_self: *@This(), _supportedChannelCounts: ?*foundation.Array(?*foundation.Number)) void {
        return objc.msgSend(_self, "setSupportedChannelCounts:", void, .{_supportedChannelCounts});
    }

    pub fn maximumChannelCount(_self: *@This()) AUAudioChannelCount {
        return objc.msgSend(_self, "maximumChannelCount", AUAudioChannelCount, .{});
    }

    pub fn setMaximumChannelCount(_self: *@This(), _maximumChannelCount: AUAudioChannelCount) void {
        return objc.msgSend(_self, "setMaximumChannelCount:", void, .{_maximumChannelCount});
    }
};

/// https://developer.apple.com/documentation/AudioToolbox/AUAudioUnitPreset?language=objc
pub const AUAudioUnitPreset = opaque {
    pub const Internal = objc.ExternClass("AUAudioUnitPreset", @This(), objc.NSObject, &.{foundation.SecureCoding});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*foundation.Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*foundation.Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn supportsSecureCoding() objc.BOOL {
        return objc.msgSend(Internal.class(), "supportsSecureCoding", objc.BOOL, .{});
    }

    pub fn number(_self: *@This()) objc.NSInteger {
        return objc.msgSend(_self, "number", objc.NSInteger, .{});
    }

    pub fn setNumber(_self: *@This(), _number: objc.NSInteger) void {
        return objc.msgSend(_self, "setNumber:", void, .{_number});
    }

    pub fn name(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "name", ?*foundation.String, .{});
    }

    pub fn setName(_self: *@This(), _name: ?*foundation.String) void {
        return objc.msgSend(_self, "setName:", void, .{_name});
    }
};

pub const CallHostBlock = *const fn (?*foundation.Dictionary) callconv(.C) ?*foundation.Dictionary;

/// https://developer.apple.com/documentation/AudioToolbox/AUMessageChannel?language=objc
pub const AUMessageChannel = opaque {
    pub const Internal = objc.ExternProtocol(@This(), &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;

    pub fn callAudioUnit(_self: *@This(), _message: ?*foundation.Dictionary) ?*foundation.Dictionary {
        return objc.msgSend(_self, "callAudioUnit:", ?*foundation.Dictionary, .{_message});
    }

    pub fn callHostBlock(_self: *@This()) CallHostBlock {
        return objc.msgSend(_self, "callHostBlock", CallHostBlock, .{});
    }

    pub fn setCallHostBlock(_self: *@This(), _callHostBlock: CallHostBlock) void {
        return objc.msgSend(_self, "setCallHostBlock:", void, .{_callHostBlock});
    }
};

pub const AURenderEvent = extern union {
    head: AURenderEventHeader,
    parameter: AUParameterEvent,
    MIDI: AUMIDIEvent,
    MIDIEventsList: AUMIDIEventList,
};

pub const AURenderEventType = objc.uint8_t;
pub const AURenderEventType_Parameter: objc.uint8_t = 1;
pub const AURenderEventType_ParameterRamp: objc.uint8_t = 2;
pub const AURenderEventType_MIDI: objc.uint8_t = 8;
pub const AURenderEventType_MIDISysEx: objc.uint8_t = 9;
pub const AURenderEventType_MIDIEventList: objc.uint8_t = 10;

pub const AURenderEventHeader = extern struct {
    next: ?*AURenderEvent,
    eventSampleTime: AUEventSampleTime,
    eventType: AURenderEventType,
    reserved: objc.uint8_t,
};

pub const AUParameterEvent = extern struct {
    next: ?*AURenderEvent,
    eventSampleTime: AUEventSampleTime,
    eventType: AURenderEventType,
    reserved: [3]objc.uint8_t,
    rampDurationSampleFrames: AUAudioFrameCount,
    parameterAddress: AUParameterAddress,
    value: AUValue,
};

pub const AUMIDIEvent = extern struct {
    next: ?*AURenderEvent,
    eventSampleTime: AUEventSampleTime,
    eventType: AURenderEventType,
    reserved: objc.uint8_t,
    length: objc.uint16_t,
    cable: objc.uint8_t,
    data: [3]objc.uint8_t,
};

pub const AUMIDIEventList = extern struct {
    next: ?*AURenderEvent,
    eventSampleTime: AUEventSampleTime,
    eventType: AURenderEventType,
    reserved: objc.uint8_t,
    cable: objc.uint8_t,
    eventList: core_midi.EventList,
};

pub const AUInternalRenderBlock = AUAudioUnitStatus;

pub const AUImplementorValueObserver = *const fn (?*AUParameter, AUValue) callconv(.C) void;

pub const AUImplementorValueProvider = AUValue;

pub const AUImplementorStringFromValueCallback = *const fn (?*AUParameter, ?*const AUValue) callconv(.C) ?*foundation.String;

pub const AUImplementorValueFromStringCallback = AUValue;

pub const AUImplementorDisplayNameWithLengthCallback = *const fn (?*AUParameterNode, objc.NSInteger) callconv(.C) ?*foundation.String;

/// https://developer.apple.com/documentation/AudioToolbox/AUAudioUnitV2Bridge?language=objc
pub const AUAudioUnitV2Bridge = opaque {
    pub const Internal = objc.ExternClass("AUAudioUnitV2Bridge", @This(), AUAudioUnit, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn audioUnit(_self: *@This()) Unit {
        return objc.msgSend(_self, "audioUnit", Unit, .{});
    }
};

/// https://developer.apple.com/documentation/AudioToolbox/AUAudioUnitFactory?language=objc
pub const AUAudioUnitFactory = opaque {
    pub const Internal = objc.ExternProtocol(@This(), &.{foundation.ExtensionRequestHandling});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "description", ?*foundation.String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "debugDescription", ?*foundation.String, .{});
    }

    pub fn beginRequestWithExtensionContext(_self: *@This(), _context: ?*foundation.ExtensionContext) void {
        return objc.msgSend(_self, "beginRequestWithExtensionContext:", void, .{_context});
    }

    pub fn createAudioUnitWithComponentDescriptionError(_self: *@This(), _desc: ComponentDescription, _error: ?*?*foundation.Error) ?*AUAudioUnit {
        return objc.msgSend(_self, "createAudioUnitWithComponentDescription:error:", ?*AUAudioUnit, .{ _desc, _error });
    }
};

extern "AudioToolbox" fn AudioOutputUnitStart(ci: Unit) callconv(.C) objc.OSStatus;
pub const outputUnitStart = AudioOutputUnitStart;

extern "AudioToolbox" fn AudioOutputUnitStop(ci: Unit) callconv(.C) objc.OSStatus;
pub const outputUnitStop = AudioOutputUnitStop;

pub const OutputUnitStartProc = objc.OSStatus;

pub const OutputUnitStopProc = objc.OSStatus;

pub const anon1721 = UnitParameterID;
pub const anon1721_3DMixerParam_Azimuth: UnitParameterID = 0;
pub const anon1721_3DMixerParam_Elevation: UnitParameterID = 1;
pub const anon1721_3DMixerParam_Distance: UnitParameterID = 2;
pub const anon1721_3DMixerParam_Gain: UnitParameterID = 3;
pub const anon1721_3DMixerParam_PlaybackRate: UnitParameterID = 4;
pub const anon1721_3DMixerParam_BusEnable: UnitParameterID = 20;
pub const anon1721_3DMixerParam_MinGainInDecibels: UnitParameterID = 21;
pub const anon1721_3DMixerParam_MaxGainInDecibels: UnitParameterID = 22;
pub const anon1721_3DMixerParam_DryWetReverbBlend: UnitParameterID = 23;
pub const anon1721_3DMixerParam_GlobalReverbGainInDecibels: UnitParameterID = 24;
pub const anon1721_3DMixerParam_OcclusionAttenuationInDecibels: UnitParameterID = 25;
pub const anon1721_3DMixerParam_ObstructionAttenuationInDecibels: UnitParameterID = 26;
pub const anon1721_3DMixerParam_ReverbBlend: UnitParameterID = 5;
pub const anon1721_3DMixerParam_GlobalReverbGain: UnitParameterID = 6;
pub const anon1721_3DMixerParam_OcclusionAttenuation: UnitParameterID = 7;
pub const anon1721_3DMixerParam_ObstructionAttenuation: UnitParameterID = 8;
pub const anon1721_3DMixerParam_MinGain: UnitParameterID = 9;
pub const anon1721_3DMixerParam_MaxGain: UnitParameterID = 10;
pub const anon1721_3DMixerParam_PreAveragePower: UnitParameterID = 1000;
pub const anon1721_3DMixerParam_PrePeakHoldLevel: UnitParameterID = 2000;
pub const anon1721_3DMixerParam_PostAveragePower: UnitParameterID = 3000;
pub const anon1721_3DMixerParam_PostPeakHoldLevel: UnitParameterID = 4000;

pub const anon2841 = UnitParameterID;
pub const anon2841_MultiChannelMixerParam_Volume: UnitParameterID = 0;
pub const anon2841_MultiChannelMixerParam_Enable: UnitParameterID = 1;
pub const anon2841_MultiChannelMixerParam_Pan: UnitParameterID = 2;
pub const anon2841_MultiChannelMixerParam_PreAveragePower: UnitParameterID = 1000;
pub const anon2841_MultiChannelMixerParam_PrePeakHoldLevel: UnitParameterID = 2000;
pub const anon2841_MultiChannelMixerParam_PostAveragePower: UnitParameterID = 3000;
pub const anon2841_MultiChannelMixerParam_PostPeakHoldLevel: UnitParameterID = 4000;

pub const anon3311 = UnitParameterID;
pub const anon3311_TimePitchParam_Rate: UnitParameterID = 0;
pub const anon3311_TimePitchParam_Pitch: UnitParameterID = 1;
pub const anon3311_TimePitchParam_EffectBlend: UnitParameterID = 2;

pub const anon3381 = UnitParameterID;
pub const anon3381_NewTimePitchParam_Rate: UnitParameterID = 0;
pub const anon3381_NewTimePitchParam_Pitch: UnitParameterID = 1;
pub const anon3381_NewTimePitchParam_Smoothness: UnitParameterID = 4;
pub const anon3381_NewTimePitchParam_Overlap: UnitParameterID = 4;
pub const anon3381_NewTimePitchParam_EnableSpectralCoherence: UnitParameterID = 6;
pub const anon3381_NewTimePitchParam_EnablePeakLocking: UnitParameterID = 6;
pub const anon3381_NewTimePitchParam_EnableTransientPreservation: UnitParameterID = 7;
pub const anon3381_ConverterPrimeMethod_Pre: UnitParameterID = 0;
pub const anon3381_ConverterPrimeMethod_Normal: UnitParameterID = 1;
pub const anon3381_ConverterPrimeMethod_None: UnitParameterID = 2;

pub const anon4191 = UnitParameterID;
pub const anon4191_HighShelfParam_CutOffFrequency: UnitParameterID = 0;
pub const anon4191_HighShelfParam_Gain: UnitParameterID = 1;
pub const anon4191_AudioQueueParam_Volume: UnitParameterID = 1;
pub const anon4191_AudioQueueParam_PlayRate: UnitParameterID = 2;
pub const anon4191_AudioQueueParam_Pitch: UnitParameterID = 3;
pub const anon4191_AudioQueueParam_VolumeRampTime: UnitParameterID = 4;
pub const anon4191_AudioQueueParam_Pan: UnitParameterID = 13;

pub const anon4281 = UnitParameterID;
pub const anon4281_AULowShelfParam_CutoffFrequency: UnitParameterID = 0;
pub const anon4281_AULowShelfParam_Gain: UnitParameterID = 1;

pub const anon4371 = UnitParameterID;
pub const anon4371_ParametricEQParam_CenterFreq: UnitParameterID = 0;
pub const anon4371_ParametricEQParam_Q: UnitParameterID = 1;
pub const anon4371_ParametricEQParam_Gain: UnitParameterID = 2;

pub const anon4661 = UnitParameterID;
pub const anon4661_DynamicsProcessorParam_Threshold: UnitParameterID = 0;
pub const anon4661_DynamicsProcessorParam_HeadRoom: UnitParameterID = 1;
pub const anon4661_DynamicsProcessorParam_ExpansionRatio: UnitParameterID = 2;
pub const anon4661_DynamicsProcessorParam_ExpansionThreshold: UnitParameterID = 3;
pub const anon4661_DynamicsProcessorParam_AttackTime: UnitParameterID = 4;
pub const anon4661_DynamicsProcessorParam_ReleaseTime: UnitParameterID = 5;
pub const anon4661_DynamicsProcessorParam_OverallGain: UnitParameterID = 6;
pub const anon4661_DynamicsProcessorParam_MasterGain: UnitParameterID = 6;
pub const anon4661_DynamicsProcessorParam_CompressionAmount: UnitParameterID = 1000;
pub const anon4661_DynamicsProcessorParam_InputAmplitude: UnitParameterID = 2000;
pub const anon4661_DynamicsProcessorParam_OutputAmplitude: UnitParameterID = 3000;

pub const anon4981 = UnitParameterID;
pub const anon4981_VarispeedParam_PlaybackRate: UnitParameterID = 0;
pub const anon4981_VarispeedParam_PlaybackCents: UnitParameterID = 1;

pub const anon5071 = UnitParameterID;
pub const anon5071_DistortionParam_Delay: UnitParameterID = 0;
pub const anon5071_DistortionParam_Decay: UnitParameterID = 1;
pub const anon5071_DistortionParam_DelayMix: UnitParameterID = 2;
pub const anon5071_DistortionParam_Decimation: UnitParameterID = 3;
pub const anon5071_DistortionParam_Rounding: UnitParameterID = 4;
pub const anon5071_DistortionParam_DecimationMix: UnitParameterID = 5;
pub const anon5071_DistortionParam_LinearTerm: UnitParameterID = 6;
pub const anon5071_DistortionParam_SquaredTerm: UnitParameterID = 7;
pub const anon5071_DistortionParam_CubicTerm: UnitParameterID = 8;
pub const anon5071_DistortionParam_PolynomialMix: UnitParameterID = 9;
pub const anon5071_DistortionParam_RingModFreq1: UnitParameterID = 10;
pub const anon5071_DistortionParam_RingModFreq2: UnitParameterID = 11;
pub const anon5071_DistortionParam_RingModBalance: UnitParameterID = 12;
pub const anon5071_DistortionParam_RingModMix: UnitParameterID = 13;
pub const anon5071_DistortionParam_SoftClipGain: UnitParameterID = 14;
pub const anon5071_DistortionParam_FinalMix: UnitParameterID = 15;

pub const anon5631 = UnitParameterID;
pub const anon5631_SampleDelayParam_DelayFrames: UnitParameterID = 0;

pub const anon6701 = i64;
pub const anon6701_AUNBandEQFilterType_Parametric: i64 = 0;
pub const anon6701_AUNBandEQFilterType_2ndOrderButterworthLowPass: i64 = 1;
pub const anon6701_AUNBandEQFilterType_2ndOrderButterworthHighPass: i64 = 2;
pub const anon6701_AUNBandEQFilterType_ResonantLowPass: i64 = 3;
pub const anon6701_AUNBandEQFilterType_ResonantHighPass: i64 = 4;
pub const anon6701_AUNBandEQFilterType_BandPass: i64 = 5;
pub const anon6701_AUNBandEQFilterType_BandStop: i64 = 6;
pub const anon6701_AUNBandEQFilterType_LowShelf: i64 = 7;
pub const anon6701_AUNBandEQFilterType_HighShelf: i64 = 8;
pub const anon6701_AUNBandEQFilterType_ResonantLowShelf: i64 = 9;
pub const anon6701_AUNBandEQFilterType_ResonantHighShelf: i64 = 10;
pub const anon6701_NumAUNBandEQFilterTypes: i64 = 11;

pub const anon6881 = UnitParameterID;
pub const anon6881_RoundTripAACParam_Format: UnitParameterID = 0;
pub const anon6881_RoundTripAACParam_EncodingStrategy: UnitParameterID = 1;
pub const anon6881_RoundTripAACParam_RateOrQuality: UnitParameterID = 2;
pub const anon6881_RoundTripAACParam_BitRate: UnitParameterID = 1;
pub const anon6881_RoundTripAACParam_Quality: UnitParameterID = 2;
pub const anon6881_RoundTripAACParam_CompressedFormatSampleRate: UnitParameterID = 3;

pub const anon7341 = UnitParameterID;
pub const anon7341_GraphicEQParam_NumberOfBands: UnitParameterID = 10000;

pub const anon8941 = UnitParameterID;
pub const anon8941_RogerBeepParam_InGateThreshold: UnitParameterID = 0;
pub const anon8941_RogerBeepParam_InGateThresholdTime: UnitParameterID = 1;
pub const anon8941_RogerBeepParam_OutGateThreshold: UnitParameterID = 2;
pub const anon8941_RogerBeepParam_OutGateThresholdTime: UnitParameterID = 3;
pub const anon8941_RogerBeepParam_Sensitivity: UnitParameterID = 4;
pub const anon8941_RogerBeepParam_RogerType: UnitParameterID = 5;
pub const anon8941_RogerBeepParam_RogerGain: UnitParameterID = 6;

pub const anon9341 = UnitParameterID;
pub const anon9341_AUNetReceiveParam_Status: UnitParameterID = 0;
pub const anon9341_AUNetReceiveParam_NumParameters: UnitParameterID = 1;

pub const anon9411 = UnitParameterID;
pub const anon9411_AUNetSendParam_Status: UnitParameterID = 0;
pub const anon9411_AUNetSendParam_NumParameters: UnitParameterID = 1;

pub const anon9491 = u32;
pub const anon9491_AUNetStatus_NotConnected: u32 = 0;
pub const anon9491_AUNetStatus_Connected: u32 = 1;
pub const anon9491_AUNetStatus_Overflow: u32 = 2;
pub const anon9491_AUNetStatus_Underflow: u32 = 3;
pub const anon9491_AUNetStatus_Connecting: u32 = 4;
pub const anon9491_AUNetStatus_Listening: u32 = 5;

pub const anon10021 = UnitParameterID;
pub const anon10021_RandomParam_BoundA: UnitParameterID = 0;
pub const anon10021_RandomParam_BoundB: UnitParameterID = 1;
pub const anon10021_RandomParam_Curve: UnitParameterID = 2;

pub const MusicDeviceInstrumentID = objc.UInt32;

pub const MusicDeviceStdNoteParams = extern struct {
    argCount: objc.UInt32,
    mPitch: objc.Float32,
    mVelocity: objc.Float32,
};

pub const NoteParamsControlValue = extern struct {
    mID: UnitParameterID,
    mValue: UnitParameterValue,
};

pub const MusicDeviceNoteParams = extern struct {
    argCount: objc.UInt32,
    mPitch: objc.Float32,
    mVelocity: objc.Float32,
    mControls: [1]NoteParamsControlValue,
};

pub const anon1471 = u32;
pub const anon1471_MusicNoteEvent_UseGroupInstrument: u32 = -1;
pub const anon1471_MusicNoteEvent_Unused: u32 = -1;

pub const MusicDeviceGroupID = objc.UInt32;

pub const NoteInstanceID = objc.UInt32;

pub const MusicDeviceComponent = ComponentInstance;

pub extern "AudioToolbox" fn MusicDeviceMIDIEvent(
    inUnit: MusicDeviceComponent,
    inStatus: objc.UInt32,
    inData1: objc.UInt32,
    inData2: objc.UInt32,
    inOffsetSampleFrame: objc.UInt32,
) callconv(.C) objc.OSStatus;

pub extern "AudioToolbox" fn MusicDeviceSysEx(inUnit: MusicDeviceComponent, inData: ?*const objc.UInt8, inLength: objc.UInt32) callconv(.C) objc.OSStatus;

pub extern "AudioToolbox" fn MusicDeviceMIDIEventList(inUnit: MusicDeviceComponent, inOffsetSampleFrame: objc.UInt32, evtList: ?*const core_midi.EventList) callconv(.C) objc.OSStatus;

pub extern "AudioToolbox" fn MusicDeviceStartNote(
    inUnit: MusicDeviceComponent,
    inInstrument: MusicDeviceInstrumentID,
    inGroupID: MusicDeviceGroupID,
    outNoteInstanceID: ?*NoteInstanceID,
    inOffsetSampleFrame: objc.UInt32,
    inParams: ?*const MusicDeviceNoteParams,
) callconv(.C) objc.OSStatus;

pub extern "AudioToolbox" fn MusicDeviceStopNote(
    inUnit: MusicDeviceComponent,
    inGroupID: MusicDeviceGroupID,
    inNoteInstanceID: NoteInstanceID,
    inOffsetSampleFrame: objc.UInt32,
) callconv(.C) objc.OSStatus;

pub const anon3571 = u32;
pub const anon3571_MusicDeviceRange: u32 = 256;
pub const anon3571_MusicDeviceMIDIEventSelect: u32 = 257;
pub const anon3571_MusicDeviceSysExSelect: u32 = 258;
pub const anon3571_MusicDevicePrepareInstrumentSelect: u32 = 259;
pub const anon3571_MusicDeviceReleaseInstrumentSelect: u32 = 260;
pub const anon3571_MusicDeviceStartNoteSelect: u32 = 261;
pub const anon3571_MusicDeviceStopNoteSelect: u32 = 262;
pub const anon3571_MusicDeviceMIDIEventListSelect: u32 = 263;

pub const MusicDeviceMIDIEventProc = objc.OSStatus;

pub const MusicDeviceSysExProc = objc.OSStatus;

pub const MusicDeviceStartNoteProc = objc.OSStatus;

pub const MusicDeviceStopNoteProc = objc.OSStatus;

pub extern "AudioToolbox" fn MusicDevicePrepareInstrument(inUnit: MusicDeviceComponent, inInstrument: MusicDeviceInstrumentID) callconv(.C) objc.OSStatus;

pub extern "AudioToolbox" fn MusicDeviceReleaseInstrument(inUnit: MusicDeviceComponent, inInstrument: MusicDeviceInstrumentID) callconv(.C) objc.OSStatus;

pub const OpaqueAUGraph = extern struct {};

pub const AUGraph = OpaqueAUGraph;

pub const AUNode = objc.SInt32;

pub extern "AudioToolbox" fn NewAUGraph(outGraph: ?*AUGraph) callconv(.C) objc.OSStatus;

pub extern "AudioToolbox" fn DisposeAUGraph(inGraph: AUGraph) callconv(.C) objc.OSStatus;

pub extern "AudioToolbox" fn AUGraphAddNode(inGraph: AUGraph, inDescription: ?*const ComponentDescription, outNode: ?*AUNode) callconv(.C) objc.OSStatus;

pub extern "AudioToolbox" fn AUGraphRemoveNode(inGraph: AUGraph, inNode: AUNode) callconv(.C) objc.OSStatus;

pub extern "AudioToolbox" fn AUGraphGetNodeCount(inGraph: AUGraph, outNumberOfNodes: ?*objc.UInt32) callconv(.C) objc.OSStatus;

pub extern "AudioToolbox" fn AUGraphGetIndNode(inGraph: AUGraph, inIndex: objc.UInt32, outNode: ?*AUNode) callconv(.C) objc.OSStatus;

pub extern "AudioToolbox" fn AUGraphNodeInfo(
    inGraph: AUGraph,
    inNode: AUNode,
    outDescription: ?*ComponentDescription,
    outAudioUnit: ?*Unit,
) callconv(.C) objc.OSStatus;

pub extern "AudioToolbox" fn AUGraphNewNodeSubGraph(inGraph: AUGraph, outNode: ?*AUNode) callconv(.C) objc.OSStatus;

pub extern "AudioToolbox" fn AUGraphGetNodeInfoSubGraph(inGraph: AUGraph, inNode: AUNode, outSubGraph: ?*AUGraph) callconv(.C) objc.OSStatus;

pub extern "AudioToolbox" fn AUGraphIsNodeSubGraph(inGraph: AUGraph, inNode: AUNode, outFlag: ?*objc.Boolean) callconv(.C) objc.OSStatus;

pub const UnitNodeConnection = extern struct {
    sourceNode: AUNode,
    sourceOutputNumber: objc.UInt32,
    destNode: AUNode,
    destInputNumber: objc.UInt32,
};

pub const AUNodeConnection = UnitNodeConnection;

pub const AUNodeRenderCallback = extern struct {
    destNode: AUNode,
    destInputNumber: UnitElement,
    cback: AURenderCallbackStruct,
};

pub const AUNodeInteraction = extern struct {
    pub const anon3332 = extern union {
        connection: AUNodeConnection,
        inputCallback: AUNodeRenderCallback,
    };

    nodeInteractionType: objc.UInt32,
    nodeInteraction: AUNodeInteraction.anon3332,
};

pub extern "AudioToolbox" fn AUGraphConnectNodeInput(
    inGraph: AUGraph,
    inSourceNode: AUNode,
    inSourceOutputNumber: objc.UInt32,
    inDestNode: AUNode,
    inDestInputNumber: objc.UInt32,
) callconv(.C) objc.OSStatus;

pub extern "AudioToolbox" fn AUGraphSetNodeInputCallback(
    inGraph: AUGraph,
    inDestNode: AUNode,
    inDestInputNumber: objc.UInt32,
    inInputCallback: ?*const AURenderCallbackStruct,
) callconv(.C) objc.OSStatus;

pub extern "AudioToolbox" fn AUGraphDisconnectNodeInput(inGraph: AUGraph, inDestNode: AUNode, inDestInputNumber: objc.UInt32) callconv(.C) objc.OSStatus;

pub extern "AudioToolbox" fn AUGraphClearConnections(inGraph: AUGraph) callconv(.C) objc.OSStatus;

pub extern "AudioToolbox" fn AUGraphGetNumberOfInteractions(inGraph: AUGraph, outNumInteractions: ?*objc.UInt32) callconv(.C) objc.OSStatus;

pub extern "AudioToolbox" fn AUGraphGetInteractionInfo(inGraph: AUGraph, inInteractionIndex: objc.UInt32, outInteraction: ?*AUNodeInteraction) callconv(.C) objc.OSStatus;

pub extern "AudioToolbox" fn AUGraphCountNodeInteractions(inGraph: AUGraph, inNode: AUNode, outNumInteractions: ?*objc.UInt32) callconv(.C) objc.OSStatus;

pub extern "AudioToolbox" fn AUGraphGetNodeInteractions(
    inGraph: AUGraph,
    inNode: AUNode,
    ioNumInteractions: ?*objc.UInt32,
    outInteractions: ?*AUNodeInteraction,
) callconv(.C) objc.OSStatus;

pub extern "AudioToolbox" fn AUGraphUpdate(inGraph: AUGraph, outIsUpdated: ?*objc.Boolean) callconv(.C) objc.OSStatus;

pub extern "AudioToolbox" fn AUGraphOpen(inGraph: AUGraph) callconv(.C) objc.OSStatus;

pub extern "AudioToolbox" fn AUGraphClose(inGraph: AUGraph) callconv(.C) objc.OSStatus;

pub extern "AudioToolbox" fn AUGraphInitialize(inGraph: AUGraph) callconv(.C) objc.OSStatus;

pub extern "AudioToolbox" fn AUGraphUninitialize(inGraph: AUGraph) callconv(.C) objc.OSStatus;

pub extern "AudioToolbox" fn AUGraphStart(inGraph: AUGraph) callconv(.C) objc.OSStatus;

pub extern "AudioToolbox" fn AUGraphStop(inGraph: AUGraph) callconv(.C) objc.OSStatus;

pub extern "AudioToolbox" fn AUGraphIsOpen(inGraph: AUGraph, outIsOpen: ?*objc.Boolean) callconv(.C) objc.OSStatus;

pub extern "AudioToolbox" fn AUGraphIsInitialized(inGraph: AUGraph, outIsInitialized: ?*objc.Boolean) callconv(.C) objc.OSStatus;

pub extern "AudioToolbox" fn AUGraphIsRunning(inGraph: AUGraph, outIsRunning: ?*objc.Boolean) callconv(.C) objc.OSStatus;

pub extern "AudioToolbox" fn AUGraphGetCPULoad(inGraph: AUGraph, outAverageCPULoad: ?*objc.Float32) callconv(.C) objc.OSStatus;

pub extern "AudioToolbox" fn AUGraphGetMaxCPULoad(inGraph: AUGraph, outMaxLoad: ?*objc.Float32) callconv(.C) objc.OSStatus;

pub extern "AudioToolbox" fn AUGraphAddRenderNotify(inGraph: AUGraph, inCallback: AURenderCallback, inRefCon: ?*anyopaque) callconv(.C) objc.OSStatus;

pub extern "AudioToolbox" fn AUGraphRemoveRenderNotify(inGraph: AUGraph, inCallback: AURenderCallback, inRefCon: ?*anyopaque) callconv(.C) objc.OSStatus;

pub extern "AudioToolbox" fn AUGraphNewNode(
    inGraph: AUGraph,
    inDescription: ?*const core_services.ComponentDescription,
    inClassDataSize: objc.UInt32,
    inClassData: ?*const anyopaque,
    outNode: ?*AUNode,
) callconv(.C) objc.OSStatus;

pub extern "AudioToolbox" fn AUGraphGetNodeInfo(
    inGraph: AUGraph,
    inNode: AUNode,
    outDescription: ?*core_services.ComponentDescription,
    outClassDataSize: ?*objc.UInt32,
    outClassData: ?*?*anyopaque,
    outAudioUnit: ?*Unit,
) callconv(.C) objc.OSStatus;

pub extern "AudioToolbox" fn AUGraphGetNumberOfConnections(inGraph: AUGraph, outNumConnections: ?*objc.UInt32) callconv(.C) objc.OSStatus;

pub extern "AudioToolbox" fn AUGraphGetConnectionInfo(
    inGraph: AUGraph,
    inConnectionIndex: objc.UInt32,
    outSourceNode: ?*AUNode,
    outSourceOutputNumber: ?*objc.UInt32,
    outDestNode: ?*AUNode,
    outDestInputNumber: ?*objc.UInt32,
) callconv(.C) objc.OSStatus;

pub extern "AudioToolbox" fn AUGraphCountNodeConnections(inGraph: AUGraph, inNode: AUNode, outNumConnections: ?*objc.UInt32) callconv(.C) objc.OSStatus;

pub extern "AudioToolbox" fn AUGraphGetNodeConnections(
    inGraph: AUGraph,
    inNode: AUNode,
    outConnections: ?*UnitNodeConnection,
    ioNumConnections: ?*objc.UInt32,
) callconv(.C) objc.OSStatus;

pub const OpaqueAudioConverter = extern struct {};

pub const ConverterRef = OpaqueAudioConverter;

pub const ConverterPropertyID = objc.UInt32;

pub const anon2811 = objc.UInt32;
pub const anon2811_AudioConverterQuality_Max: objc.UInt32 = 127;
pub const anon2811_AudioConverterQuality_High: objc.UInt32 = 96;
pub const anon2811_AudioConverterQuality_Medium: objc.UInt32 = 64;
pub const anon2811_AudioConverterQuality_Low: objc.UInt32 = 32;
pub const anon2811_AudioConverterQuality_Min: objc.UInt32 = 0;

pub const anon3151 = objc.UInt32;
pub const anon3151_AudioConverterSampleRateConverterComplexity_Linear: objc.UInt32 = 1818848869;
pub const anon3151_AudioConverterSampleRateConverterComplexity_Normal: objc.UInt32 = 1852797549;
pub const anon3151_AudioConverterSampleRateConverterComplexity_Mastering: objc.UInt32 = 1650553971;
pub const anon3151_AudioConverterSampleRateConverterComplexity_MinimumPhase: objc.UInt32 = 1835626096;

pub const ConverterPrimeInfo = extern struct {
    leadingFrames: objc.UInt32,
    trailingFrames: objc.UInt32,
};

pub const ConverterOptions = objc.UInt32;
pub const ConverterOptions_Option_Unbuffered: objc.UInt32 = 65536;

extern "AudioToolbox" fn AudioConverterPrepare(inFlags: objc.UInt32, ioReserved: ?*anyopaque, inCompletionBlock: *const fn (objc.OSStatus) callconv(.C) void) callconv(.C) void;
pub const converterPrepare = AudioConverterPrepare;

extern "AudioToolbox" fn AudioConverterNew(inSourceFormat: ?*const core_audio_types.StreamBasicDescription, inDestinationFormat: ?*const core_audio_types.StreamBasicDescription, outAudioConverter: ?*ConverterRef) callconv(.C) objc.OSStatus;
pub const converterNew = AudioConverterNew;

extern "AudioToolbox" fn AudioConverterNewSpecific(
    inSourceFormat: ?*const core_audio_types.StreamBasicDescription,
    inDestinationFormat: ?*const core_audio_types.StreamBasicDescription,
    inNumberClassDescriptions: objc.UInt32,
    inClassDescriptions: ?*const core_audio_types.ClassDescription,
    outAudioConverter: ?*ConverterRef,
) callconv(.C) objc.OSStatus;
pub const converterNewSpecific = AudioConverterNewSpecific;

extern "AudioToolbox" fn AudioConverterNewWithOptions(
    inSourceFormat: ?*const core_audio_types.StreamBasicDescription,
    inDestinationFormat: ?*const core_audio_types.StreamBasicDescription,
    inOptions: ConverterOptions,
    outAudioConverter: ?*ConverterRef,
) callconv(.C) objc.OSStatus;
pub const converterNewWithOptions = AudioConverterNewWithOptions;

extern "AudioToolbox" fn AudioConverterDispose(inAudioConverter: ConverterRef) callconv(.C) objc.OSStatus;
pub const converterDispose = AudioConverterDispose;

extern "AudioToolbox" fn AudioConverterReset(inAudioConverter: ConverterRef) callconv(.C) objc.OSStatus;
pub const converterReset = AudioConverterReset;

extern "AudioToolbox" fn AudioConverterGetPropertyInfo(
    inAudioConverter: ConverterRef,
    inPropertyID: ConverterPropertyID,
    outSize: ?*objc.UInt32,
    outWritable: ?*objc.Boolean,
) callconv(.C) objc.OSStatus;
pub const converterGetPropertyInfo = AudioConverterGetPropertyInfo;

extern "AudioToolbox" fn AudioConverterGetProperty(
    inAudioConverter: ConverterRef,
    inPropertyID: ConverterPropertyID,
    ioPropertyDataSize: ?*objc.UInt32,
    outPropertyData: ?*anyopaque,
) callconv(.C) objc.OSStatus;
pub const converterGetProperty = AudioConverterGetProperty;

extern "AudioToolbox" fn AudioConverterSetProperty(
    inAudioConverter: ConverterRef,
    inPropertyID: ConverterPropertyID,
    inPropertyDataSize: objc.UInt32,
    inPropertyData: ?*const anyopaque,
) callconv(.C) objc.OSStatus;
pub const converterSetProperty = AudioConverterSetProperty;

extern "AudioToolbox" fn AudioConverterConvertBuffer(
    inAudioConverter: ConverterRef,
    inInputDataSize: objc.UInt32,
    inInputData: ?*const anyopaque,
    ioOutputDataSize: ?*objc.UInt32,
    outOutputData: ?*anyopaque,
) callconv(.C) objc.OSStatus;
pub const converterConvertBuffer = AudioConverterConvertBuffer;

pub const ConverterComplexInputDataProc = objc.OSStatus;

extern "AudioToolbox" fn AudioConverterFillComplexBuffer(
    inAudioConverter: ConverterRef,
    inInputDataProc: ConverterComplexInputDataProc,
    inInputDataProcUserData: ?*anyopaque,
    ioOutputDataPacketSize: ?*objc.UInt32,
    outOutputData: ?*core_audio_types.BufferList,
    outPacketDescription: ?*core_audio_types.StreamPacketDescription,
) callconv(.C) objc.OSStatus;
pub const converterFillComplexBuffer = AudioConverterFillComplexBuffer;

extern "AudioToolbox" fn AudioConverterConvertComplexBuffer(
    inAudioConverter: ConverterRef,
    inNumberPCMFrames: objc.UInt32,
    inInputData: ?*const core_audio_types.BufferList,
    outOutputData: ?*core_audio_types.BufferList,
) callconv(.C) objc.OSStatus;
pub const converterConvertComplexBuffer = AudioConverterConvertComplexBuffer;

pub const ConverterInputDataProc = objc.OSStatus;

extern "AudioToolbox" fn AudioConverterFillBuffer(
    inAudioConverter: ConverterRef,
    inInputDataProc: ConverterInputDataProc,
    inInputDataProcUserData: ?*anyopaque,
    ioOutputDataSize: ?*objc.UInt32,
    outOutputData: ?*anyopaque,
) callconv(.C) objc.OSStatus;
pub const converterFillBuffer = AudioConverterFillBuffer;

pub const FileTypeID = objc.UInt32;

pub const FileFlags = objc.UInt32;
pub const FileFlags__EraseFile: objc.UInt32 = 1;
pub const FileFlags__DontPageAlignAudioData: objc.UInt32 = 2;

pub const FilePermissions = objc.SInt8;
pub const FilePermissions_ReadPermission: objc.SInt8 = 1;
pub const FilePermissions_WritePermission: objc.SInt8 = 2;
pub const FilePermissions_ReadWritePermission: objc.SInt8 = 3;

pub const FileID = ScheduledAudioFileRegion.OpaqueAudioFileID;

pub const FilePropertyID = objc.UInt32;

pub const File_SMPTE_Time = extern struct {
    mHours: objc.SInt8,
    mMinutes: objc.UInt8,
    mSeconds: objc.UInt8,
    mFrames: objc.UInt8,
    mSubFrameSampleOffset: objc.UInt32,
};

pub const FileMarker = extern struct {
    mFramePosition: objc.Float64,
    mName: core_foundation.StringRef,
    mMarkerID: objc.SInt32,
    mSMPTETime: File_SMPTE_Time,
    mType: objc.UInt32,
    mReserved: objc.UInt16,
    mChannel: objc.UInt16,
};

pub const FileMarkerList = extern struct {
    mSMPTE_TimeType: objc.UInt32,
    mNumberMarkers: objc.UInt32,
    mMarkers: [1]FileMarker,
};

pub const FileRegionFlags = objc.UInt32;
pub const FileRegionFlags_Flag_LoopEnable: objc.UInt32 = 1;
pub const FileRegionFlags_Flag_PlayForward: objc.UInt32 = 2;
pub const FileRegionFlags_Flag_PlayBackward: objc.UInt32 = 4;

pub const FileRegion = extern struct {
    mRegionID: objc.UInt32,
    mName: core_foundation.StringRef,
    mFlags: FileRegionFlags,
    mNumberMarkers: objc.UInt32,
    mMarkers: [1]FileMarker,
};

pub const FileRegionList = extern struct {
    mSMPTE_TimeType: objc.UInt32,
    mNumberRegions: objc.UInt32,
    mRegions: [1]FileRegion,
};

pub const FramePacketTranslation = extern struct {
    mFrame: objc.SInt64,
    mPacket: objc.SInt64,
    mFrameOffsetInPacket: objc.UInt32,
};

pub const BytePacketTranslationFlags = objc.UInt32;
pub const BytePacketTranslationFlags_BytePacketTranslationFlag_IsEstimate: objc.UInt32 = 1;

pub const BytePacketTranslation = extern struct {
    mByte: objc.SInt64,
    mPacket: objc.SInt64,
    mByteOffsetInPacket: objc.UInt32,
    mFlags: BytePacketTranslationFlags,
};

pub const FilePacketTableInfo = extern struct {
    mNumberValidFrames: objc.SInt64,
    mPrimingFrames: objc.SInt32,
    mRemainderFrames: objc.SInt32,
};

pub const PacketRangeByteCountTranslation = extern struct {
    mPacket: objc.SInt64,
    mPacketCount: objc.SInt64,
    mByteCountUpperBound: objc.SInt64,
};

pub const PacketRollDistanceTranslation = extern struct {
    mPacket: objc.SInt64,
    mRollDistance: objc.SInt64,
};

pub const IndependentPacketTranslation = extern struct {
    mPacket: objc.SInt64,
    mIndependentlyDecodablePacket: objc.SInt64,
};

pub const PacketDependencyInfoTranslation = extern struct {
    mPacket: objc.SInt64,
    mIsIndependentlyDecodable: objc.UInt32,
    mNumberPrerollPackets: objc.UInt32,
};

extern "AudioToolbox" fn AudioFileCreateWithURL(
    inFileRef: core_foundation.URLRef,
    inFileType: FileTypeID,
    inFormat: ?*const core_audio_types.StreamBasicDescription,
    inFlags: FileFlags,
    outAudioFile: ?*FileID,
) callconv(.C) objc.OSStatus;
pub const fileCreateWithURL = AudioFileCreateWithURL;

extern "AudioToolbox" fn AudioFileOpenURL(
    inFileRef: core_foundation.URLRef,
    inPermissions: FilePermissions,
    inFileTypeHint: FileTypeID,
    outAudioFile: ?*FileID,
) callconv(.C) objc.OSStatus;
pub const fileOpenURL = AudioFileOpenURL;

pub const File_ReadProc = objc.OSStatus;

pub const File_WriteProc = objc.OSStatus;

pub const File_GetSizeProc = objc.SInt64;

pub const File_SetSizeProc = objc.OSStatus;

extern "AudioToolbox" fn AudioFileInitializeWithCallbacks(
    inClientData: ?*anyopaque,
    inReadFunc: File_ReadProc,
    inWriteFunc: File_WriteProc,
    inGetSizeFunc: File_GetSizeProc,
    inSetSizeFunc: File_SetSizeProc,
    inFileType: FileTypeID,
    inFormat: ?*const core_audio_types.StreamBasicDescription,
    inFlags: FileFlags,
    outAudioFile: ?*FileID,
) callconv(.C) objc.OSStatus;
pub const fileInitializeWithCallbacks = AudioFileInitializeWithCallbacks;

extern "AudioToolbox" fn AudioFileOpenWithCallbacks(
    inClientData: ?*anyopaque,
    inReadFunc: File_ReadProc,
    inWriteFunc: File_WriteProc,
    inGetSizeFunc: File_GetSizeProc,
    inSetSizeFunc: File_SetSizeProc,
    inFileTypeHint: FileTypeID,
    outAudioFile: ?*FileID,
) callconv(.C) objc.OSStatus;
pub const fileOpenWithCallbacks = AudioFileOpenWithCallbacks;

extern "AudioToolbox" fn AudioFileClose(inAudioFile: FileID) callconv(.C) objc.OSStatus;
pub const fileClose = AudioFileClose;

extern "AudioToolbox" fn AudioFileOptimize(inAudioFile: FileID) callconv(.C) objc.OSStatus;
pub const fileOptimize = AudioFileOptimize;

extern "AudioToolbox" fn AudioFileReadBytes(
    inAudioFile: FileID,
    inUseCache: objc.Boolean,
    inStartingByte: objc.SInt64,
    ioNumBytes: ?*objc.UInt32,
    outBuffer: ?*anyopaque,
) callconv(.C) objc.OSStatus;
pub const fileReadBytes = AudioFileReadBytes;

extern "AudioToolbox" fn AudioFileWriteBytes(
    inAudioFile: FileID,
    inUseCache: objc.Boolean,
    inStartingByte: objc.SInt64,
    ioNumBytes: ?*objc.UInt32,
    inBuffer: ?*const anyopaque,
) callconv(.C) objc.OSStatus;
pub const fileWriteBytes = AudioFileWriteBytes;

extern "AudioToolbox" fn AudioFileReadPacketData(
    inAudioFile: FileID,
    inUseCache: objc.Boolean,
    ioNumBytes: ?*objc.UInt32,
    outPacketDescriptions: ?*core_audio_types.StreamPacketDescription,
    inStartingPacket: objc.SInt64,
    ioNumPackets: ?*objc.UInt32,
    outBuffer: ?*anyopaque,
) callconv(.C) objc.OSStatus;
pub const fileReadPacketData = AudioFileReadPacketData;

extern "AudioToolbox" fn AudioFileReadPackets(
    inAudioFile: FileID,
    inUseCache: objc.Boolean,
    outNumBytes: ?*objc.UInt32,
    outPacketDescriptions: ?*core_audio_types.StreamPacketDescription,
    inStartingPacket: objc.SInt64,
    ioNumPackets: ?*objc.UInt32,
    outBuffer: ?*anyopaque,
) callconv(.C) objc.OSStatus;
pub const fileReadPackets = AudioFileReadPackets;

extern "AudioToolbox" fn AudioFileWritePackets(
    inAudioFile: FileID,
    inUseCache: objc.Boolean,
    inNumBytes: objc.UInt32,
    inPacketDescriptions: ?*const core_audio_types.StreamPacketDescription,
    inStartingPacket: objc.SInt64,
    ioNumPackets: ?*objc.UInt32,
    inBuffer: ?*const anyopaque,
) callconv(.C) objc.OSStatus;
pub const fileWritePackets = AudioFileWritePackets;

extern "AudioToolbox" fn AudioFileCountUserData(inAudioFile: FileID, inUserDataID: objc.UInt32, outNumberItems: ?*objc.UInt32) callconv(.C) objc.OSStatus;
pub const fileCountUserData = AudioFileCountUserData;

extern "AudioToolbox" fn AudioFileGetUserDataSize(
    inAudioFile: FileID,
    inUserDataID: objc.UInt32,
    inIndex: objc.UInt32,
    outUserDataSize: ?*objc.UInt32,
) callconv(.C) objc.OSStatus;
pub const fileGetUserDataSize = AudioFileGetUserDataSize;

extern "AudioToolbox" fn AudioFileGetUserDataSize64(
    inAudioFile: FileID,
    inUserDataID: objc.UInt32,
    inIndex: objc.UInt32,
    outUserDataSize: ?*objc.UInt64,
) callconv(.C) objc.OSStatus;
pub const fileGetUserDataSize64 = AudioFileGetUserDataSize64;

extern "AudioToolbox" fn AudioFileGetUserData(
    inAudioFile: FileID,
    inUserDataID: objc.UInt32,
    inIndex: objc.UInt32,
    ioUserDataSize: ?*objc.UInt32,
    outUserData: ?*anyopaque,
) callconv(.C) objc.OSStatus;
pub const fileGetUserData = AudioFileGetUserData;

extern "AudioToolbox" fn AudioFileGetUserDataAtOffset(
    inAudioFile: FileID,
    inUserDataID: objc.UInt32,
    inIndex: objc.UInt32,
    inOffset: objc.SInt64,
    ioUserDataSize: ?*objc.UInt32,
    outUserData: ?*anyopaque,
) callconv(.C) objc.OSStatus;
pub const fileGetUserDataAtOffset = AudioFileGetUserDataAtOffset;

extern "AudioToolbox" fn AudioFileSetUserData(
    inAudioFile: FileID,
    inUserDataID: objc.UInt32,
    inIndex: objc.UInt32,
    inUserDataSize: objc.UInt32,
    inUserData: ?*const anyopaque,
) callconv(.C) objc.OSStatus;
pub const fileSetUserData = AudioFileSetUserData;

extern "AudioToolbox" fn AudioFileRemoveUserData(inAudioFile: FileID, inUserDataID: objc.UInt32, inIndex: objc.UInt32) callconv(.C) objc.OSStatus;
pub const fileRemoveUserData = AudioFileRemoveUserData;

pub const anon11871 = FilePropertyID;
pub const anon11871_AudioFilePropertyFileFormat: FilePropertyID = 1717988724;
pub const anon11871_AudioFilePropertyDataFormat: FilePropertyID = 1684434292;
pub const anon11871_AudioFilePropertyIsOptimized: FilePropertyID = 1869640813;
pub const anon11871_AudioFilePropertyMagicCookieData: FilePropertyID = 1835493731;
pub const anon11871_AudioFilePropertyAudioDataByteCount: FilePropertyID = 1650683508;
pub const anon11871_AudioFilePropertyAudioDataPacketCount: FilePropertyID = 1885564532;
pub const anon11871_AudioFilePropertyMaximumPacketSize: FilePropertyID = 1886616165;
pub const anon11871_AudioFilePropertyDataOffset: FilePropertyID = 1685022310;
pub const anon11871_AudioFilePropertyChannelLayout: FilePropertyID = 1668112752;
pub const anon11871_AudioFilePropertyDeferSizeUpdates: FilePropertyID = 1685289589;
pub const anon11871_AudioFilePropertyDataFormatName: FilePropertyID = 1718512997;
pub const anon11871_AudioFilePropertyMarkerList: FilePropertyID = 1835756659;
pub const anon11871_AudioFilePropertyRegionList: FilePropertyID = 1919380595;
pub const anon11871_AudioFilePropertyPacketToFrame: FilePropertyID = 1886086770;
pub const anon11871_AudioFilePropertyFrameToPacket: FilePropertyID = 1718775915;
pub const anon11871_AudioFilePropertyRestrictsRandomAccess: FilePropertyID = 1920098672;
pub const anon11871_AudioFilePropertyPacketToRollDistance: FilePropertyID = 1886089836;
pub const anon11871_AudioFilePropertyPreviousIndependentPacket: FilePropertyID = 1885957732;
pub const anon11871_AudioFilePropertyNextIndependentPacket: FilePropertyID = 1852403300;
pub const anon11871_AudioFilePropertyPacketToDependencyInfo: FilePropertyID = 1886086256;
pub const anon11871_AudioFilePropertyPacketToByte: FilePropertyID = 1886085753;
pub const anon11871_AudioFilePropertyByteToPacket: FilePropertyID = 1652125803;
pub const anon11871_AudioFilePropertyChunkIDs: FilePropertyID = 1667787108;
pub const anon11871_AudioFilePropertyInfoDictionary: FilePropertyID = 1768842863;
pub const anon11871_AudioFilePropertyPacketTableInfo: FilePropertyID = 1886283375;
pub const anon11871_AudioFilePropertyFormatList: FilePropertyID = 1718383476;
pub const anon11871_AudioFilePropertyPacketSizeUpperBound: FilePropertyID = 1886090594;
pub const anon11871_AudioFilePropertyPacketRangeByteCountUpperBound: FilePropertyID = 1886549346;
pub const anon11871_AudioFilePropertyReserveDuration: FilePropertyID = 1920168566;
pub const anon11871_AudioFilePropertyEstimatedDuration: FilePropertyID = 1701082482;
pub const anon11871_AudioFilePropertyBitRate: FilePropertyID = 1651663220;
pub const anon11871_AudioFilePropertyID3Tag: FilePropertyID = 1768174452;
pub const anon11871_AudioFilePropertyID3TagOffset: FilePropertyID = 1768174447;
pub const anon11871_AudioFilePropertySourceBitDepth: FilePropertyID = 1935832164;
pub const anon11871_AudioFilePropertyAlbumArtwork: FilePropertyID = 1633776244;
pub const anon11871_AudioFilePropertyAudioTrackCount: FilePropertyID = 1635017588;
pub const anon11871_AudioFilePropertyUseAudioTrack: FilePropertyID = 1969321067;
pub const anon11871_AudioSliderControlPropertyValue: FilePropertyID = 1935962742;
pub const anon11871_AudioSliderControlPropertyRange: FilePropertyID = 1935962738;

extern "AudioToolbox" fn AudioFileGetPropertyInfo(
    inAudioFile: FileID,
    inPropertyID: FilePropertyID,
    outDataSize: ?*objc.UInt32,
    isWritable: ?*objc.UInt32,
) callconv(.C) objc.OSStatus;
pub const fileGetPropertyInfo = AudioFileGetPropertyInfo;

extern "AudioToolbox" fn AudioFileGetProperty(
    inAudioFile: FileID,
    inPropertyID: FilePropertyID,
    ioDataSize: ?*objc.UInt32,
    outPropertyData: ?*anyopaque,
) callconv(.C) objc.OSStatus;
pub const fileGetProperty = AudioFileGetProperty;

extern "AudioToolbox" fn AudioFileSetProperty(
    inAudioFile: FileID,
    inPropertyID: FilePropertyID,
    inDataSize: objc.UInt32,
    inPropertyData: ?*const anyopaque,
) callconv(.C) objc.OSStatus;
pub const fileSetProperty = AudioFileSetProperty;

pub const anon13701 = FilePropertyID;
pub const anon13701_AudioFileGlobalInfo_ReadableTypes: FilePropertyID = 1634103910;
pub const anon13701_AudioFileGlobalInfo_WritableTypes: FilePropertyID = 1634105190;
pub const anon13701_AudioFileGlobalInfo_FileTypeName: FilePropertyID = 1718906477;
pub const anon13701_AudioFileGlobalInfo_AvailableStreamDescriptionsForFormat: FilePropertyID = 1935960420;
pub const anon13701_AudioFileGlobalInfo_AvailableFormatIDs: FilePropertyID = 1718446436;
pub const anon13701_AudioFileGlobalInfo_AllExtensions: FilePropertyID = 1634498676;
pub const anon13701_AudioFileGlobalInfo_AllHFSTypeCodes: FilePropertyID = 1634231923;
pub const anon13701_AudioFileGlobalInfo_AllUTIs: FilePropertyID = 1635087465;
pub const anon13701_AudioFileGlobalInfo_AllMIMETypes: FilePropertyID = 1634560365;
pub const anon13701_AudioFileGlobalInfo_ExtensionsForType: FilePropertyID = 1717926004;
pub const anon13701_AudioFileGlobalInfo_HFSTypeCodesForType: FilePropertyID = 1718118003;
pub const anon13701_AudioFileGlobalInfo_UTIsForType: FilePropertyID = 1718973545;
pub const anon13701_AudioFileGlobalInfo_MIMETypesForType: FilePropertyID = 1718446445;
pub const anon13701_AudioFileGlobalInfo_TypesForMIMEType: FilePropertyID = 1953327469;
pub const anon13701_AudioFileGlobalInfo_TypesForUTI: FilePropertyID = 1953854569;
pub const anon13701_AudioFileGlobalInfo_TypesForHFSTypeCode: FilePropertyID = 1952999027;
pub const anon13701_AudioFileGlobalInfo_TypesForExtension: FilePropertyID = 1952807028;

pub const FileTypeAndFormatID = extern struct {
    mFileType: FileTypeID,
    mFormatID: objc.UInt32,
};

extern "AudioToolbox" fn AudioFileGetGlobalInfoSize(
    inPropertyID: FilePropertyID,
    inSpecifierSize: objc.UInt32,
    inSpecifier: ?*anyopaque,
    outDataSize: ?*objc.UInt32,
) callconv(.C) objc.OSStatus;
pub const fileGetGlobalInfoSize = AudioFileGetGlobalInfoSize;

extern "AudioToolbox" fn AudioFileGetGlobalInfo(
    inPropertyID: FilePropertyID,
    inSpecifierSize: objc.UInt32,
    inSpecifier: ?*anyopaque,
    ioDataSize: ?*objc.UInt32,
    outPropertyData: ?*anyopaque,
) callconv(.C) objc.OSStatus;
pub const fileGetGlobalInfo = AudioFileGetGlobalInfo;

extern "AudioToolbox" fn AudioFileCreate(
    inParentRef: ?*const core_services.FSRef,
    inFileName: core_foundation.StringRef,
    inFileType: FileTypeID,
    inFormat: ?*const core_audio_types.StreamBasicDescription,
    inFlags: FileFlags,
    outNewFileRef: ?*core_services.FSRef,
    outAudioFile: ?*FileID,
) callconv(.C) objc.OSStatus;
pub const fileCreate = AudioFileCreate;

extern "AudioToolbox" fn AudioFileInitialize(
    inFileRef: ?*const core_services.FSRef,
    inFileType: FileTypeID,
    inFormat: ?*const core_audio_types.StreamBasicDescription,
    inFlags: FileFlags,
    outAudioFile: ?*FileID,
) callconv(.C) objc.OSStatus;
pub const fileInitialize = AudioFileInitialize;

extern "AudioToolbox" fn AudioFileOpen(
    inFileRef: ?*const core_services.FSRef,
    inPermissions: FilePermissions,
    inFileTypeHint: FileTypeID,
    outAudioFile: ?*FileID,
) callconv(.C) objc.OSStatus;
pub const fileOpen = AudioFileOpen;

pub const FileStreamPropertyFlags = objc.UInt32;
pub const FileStreamPropertyFlags_Flag_PropertyIsCached: objc.UInt32 = 1;
pub const FileStreamPropertyFlags_Flag_CacheProperty: objc.UInt32 = 2;

pub const FileStreamParseFlags = objc.UInt32;
pub const FileStreamParseFlags_Flag_Discontinuity: objc.UInt32 = 1;

pub const FileStreamSeekFlags = objc.UInt32;
pub const FileStreamSeekFlags_Flag_OffsetIsEstimated: objc.UInt32 = 1;

pub const FileStreamPropertyID = objc.UInt32;

pub const OpaqueAudioFileStreamID = extern struct {};

pub const FileStreamID = OpaqueAudioFileStreamID;

pub const FileStream_PropertyListenerProc = ?*const fn (
    ?*anyopaque,
    FileStreamID,
    FileStreamPropertyID,
    ?*FileStreamPropertyFlags,
) callconv(.C) void;

pub const FileStream_PacketsProc = ?*const fn (
    ?*anyopaque,
    objc.UInt32,
    objc.UInt32,
    ?*const anyopaque,
    ?*core_audio_types.StreamPacketDescription,
) callconv(.C) void;

extern "AudioToolbox" fn AudioFileStreamOpen(
    inClientData: ?*anyopaque,
    inPropertyListenerProc: FileStream_PropertyListenerProc,
    inPacketsProc: FileStream_PacketsProc,
    inFileTypeHint: FileTypeID,
    outAudioFileStream: ?*FileStreamID,
) callconv(.C) objc.OSStatus;
pub const fileStreamOpen = AudioFileStreamOpen;

extern "AudioToolbox" fn AudioFileStreamParseBytes(
    inAudioFileStream: FileStreamID,
    inDataByteSize: objc.UInt32,
    inData: ?*const anyopaque,
    inFlags: FileStreamParseFlags,
) callconv(.C) objc.OSStatus;
pub const fileStreamParseBytes = AudioFileStreamParseBytes;

extern "AudioToolbox" fn AudioFileStreamSeek(
    inAudioFileStream: FileStreamID,
    inPacketOffset: objc.SInt64,
    outDataByteOffset: ?*objc.SInt64,
    ioFlags: ?*FileStreamSeekFlags,
) callconv(.C) objc.OSStatus;
pub const fileStreamSeek = AudioFileStreamSeek;

extern "AudioToolbox" fn AudioFileStreamGetPropertyInfo(
    inAudioFileStream: FileStreamID,
    inPropertyID: FileStreamPropertyID,
    outPropertyDataSize: ?*objc.UInt32,
    outWritable: ?*objc.Boolean,
) callconv(.C) objc.OSStatus;
pub const fileStreamGetPropertyInfo = AudioFileStreamGetPropertyInfo;

extern "AudioToolbox" fn AudioFileStreamGetProperty(
    inAudioFileStream: FileStreamID,
    inPropertyID: FileStreamPropertyID,
    ioPropertyDataSize: ?*objc.UInt32,
    outPropertyData: ?*anyopaque,
) callconv(.C) objc.OSStatus;
pub const fileStreamGetProperty = AudioFileStreamGetProperty;

extern "AudioToolbox" fn AudioFileStreamSetProperty(
    inAudioFileStream: FileStreamID,
    inPropertyID: FileStreamPropertyID,
    inPropertyDataSize: objc.UInt32,
    inPropertyData: ?*const anyopaque,
) callconv(.C) objc.OSStatus;
pub const fileStreamSetProperty = AudioFileStreamSetProperty;

extern "AudioToolbox" fn AudioFileStreamClose(inAudioFileStream: FileStreamID) callconv(.C) objc.OSStatus;
pub const fileStreamClose = AudioFileStreamClose;

pub const FormatPropertyID = objc.UInt32;

pub const PanningMode = objc.UInt32;
pub const PanningMode_PanningMode_SoundField: objc.UInt32 = 3;
pub const PanningMode_PanningMode_VectorBasedPanning: objc.UInt32 = 4;

pub const PanningInfo = extern struct {
    mPanningMode: PanningMode,
    mCoordinateFlags: objc.UInt32,
    mCoordinates: [3]objc.Float32,
    mGainScale: objc.Float32,
    mOutputChannelMap: ?*const core_audio_types.ChannelLayout,
};

pub const BalanceFadeType = objc.UInt32;
pub const BalanceFadeType__MaxUnityGain: objc.UInt32 = 0;
pub const BalanceFadeType__EqualPower: objc.UInt32 = 1;

pub const BalanceFade = extern struct {
    mLeftRightBalance: objc.Float32,
    mBackFrontFade: objc.Float32,
    mType: BalanceFadeType,
    mChannelLayout: ?*const core_audio_types.ChannelLayout,
};

pub const FormatInfo = extern struct {
    mASBD: core_audio_types.StreamBasicDescription,
    mMagicCookie: ?*const anyopaque,
    mMagicCookieSize: objc.UInt32,
};

pub const ExtendedAudioFormatInfo = extern struct {
    mASBD: core_audio_types.StreamBasicDescription,
    mMagicCookie: ?*const anyopaque,
    mMagicCookieSize: objc.UInt32,
    mClassDescription: core_audio_types.ClassDescription,
};

pub const anon3701 = FormatPropertyID;
pub const anon3701_AudioFormatProperty_FormatInfo: FormatPropertyID = 1718449257;
pub const anon3701_AudioFormatProperty_FormatName: FormatPropertyID = 1718509933;
pub const anon3701_AudioFormatProperty_EncodeFormatIDs: FormatPropertyID = 1633906534;
pub const anon3701_AudioFormatProperty_DecodeFormatIDs: FormatPropertyID = 1633904998;
pub const anon3701_AudioFormatProperty_FormatList: FormatPropertyID = 1718383476;
pub const anon3701_AudioFormatProperty_ASBDFromESDS: FormatPropertyID = 1702064996;
pub const anon3701_AudioFormatProperty_ChannelLayoutFromESDS: FormatPropertyID = 1702060908;
pub const anon3701_AudioFormatProperty_OutputFormatList: FormatPropertyID = 1868983411;
pub const anon3701_AudioFormatProperty_FirstPlayableFormatFromList: FormatPropertyID = 1718642284;
pub const anon3701_AudioFormatProperty_FormatIsVBR: FormatPropertyID = 1719034482;
pub const anon3701_AudioFormatProperty_FormatIsExternallyFramed: FormatPropertyID = 1717925990;
pub const anon3701_AudioFormatProperty_FormatEmploysDependentPackets: FormatPropertyID = 1717855600;
pub const anon3701_AudioFormatProperty_FormatIsEncrypted: FormatPropertyID = 1668446576;
pub const anon3701_AudioFormatProperty_Encoders: FormatPropertyID = 1635149166;
pub const anon3701_AudioFormatProperty_Decoders: FormatPropertyID = 1635148901;
pub const anon3701_AudioFormatProperty_AvailableEncodeBitRates: FormatPropertyID = 1634034290;
pub const anon3701_AudioFormatProperty_AvailableEncodeSampleRates: FormatPropertyID = 1634038642;
pub const anon3701_AudioFormatProperty_AvailableEncodeChannelLayoutTags: FormatPropertyID = 1634034540;
pub const anon3701_AudioFormatProperty_AvailableEncodeNumberChannels: FormatPropertyID = 1635151459;
pub const anon3701_AudioFormatProperty_AvailableDecodeNumberChannels: FormatPropertyID = 1633971811;
pub const anon3701_AudioFormatProperty_ASBDFromMPEGPacket: FormatPropertyID = 1633971568;
pub const anon3701_AudioFormatProperty_BitmapForLayoutTag: FormatPropertyID = 1651340391;
pub const anon3701_AudioFormatProperty_MatrixMixMap: FormatPropertyID = 1835884912;
pub const anon3701_AudioFormatProperty_ChannelMap: FormatPropertyID = 1667788144;
pub const anon3701_AudioFormatProperty_NumberOfChannelsForLayout: FormatPropertyID = 1852008557;
pub const anon3701_AudioFormatProperty_AreChannelLayoutsEquivalent: FormatPropertyID = 1667786097;
pub const anon3701_AudioFormatProperty_ChannelLayoutHash: FormatPropertyID = 1667786849;
pub const anon3701_AudioFormatProperty_ValidateChannelLayout: FormatPropertyID = 1986093932;
pub const anon3701_AudioFormatProperty_ChannelLayoutForTag: FormatPropertyID = 1668116588;
pub const anon3701_AudioFormatProperty_TagForChannelLayout: FormatPropertyID = 1668116596;
pub const anon3701_AudioFormatProperty_ChannelLayoutName: FormatPropertyID = 1819242093;
pub const anon3701_AudioFormatProperty_ChannelLayoutSimpleName: FormatPropertyID = 1819504237;
pub const anon3701_AudioFormatProperty_ChannelLayoutForBitmap: FormatPropertyID = 1668116578;
pub const anon3701_AudioFormatProperty_ChannelName: FormatPropertyID = 1668178285;
pub const anon3701_AudioFormatProperty_ChannelShortName: FormatPropertyID = 1668509293;
pub const anon3701_AudioFormatProperty_TagsForNumberOfChannels: FormatPropertyID = 1952540515;
pub const anon3701_AudioFormatProperty_PanningMatrix: FormatPropertyID = 1885433453;
pub const anon3701_AudioFormatProperty_BalanceFade: FormatPropertyID = 1650551910;
pub const anon3701_AudioFormatProperty_ID3TagSize: FormatPropertyID = 1768174451;
pub const anon3701_AudioFormatProperty_ID3TagToDictionary: FormatPropertyID = 1768174436;

extern "AudioToolbox" fn AudioFormatGetPropertyInfo(
    inPropertyID: FormatPropertyID,
    inSpecifierSize: objc.UInt32,
    inSpecifier: ?*const anyopaque,
    outPropertyDataSize: ?*objc.UInt32,
) callconv(.C) objc.OSStatus;
pub const formatGetPropertyInfo = AudioFormatGetPropertyInfo;

extern "AudioToolbox" fn AudioFormatGetProperty(
    inPropertyID: FormatPropertyID,
    inSpecifierSize: objc.UInt32,
    inSpecifier: ?*const anyopaque,
    ioPropertyDataSize: ?*objc.UInt32,
    outPropertyData: ?*anyopaque,
) callconv(.C) objc.OSStatus;
pub const formatGetProperty = AudioFormatGetProperty;

pub const anon5171 = objc.OSStatus;
pub const anon5171_AudioFormatUnspecifiedError: objc.OSStatus = 2003329396;
pub const anon5171_AudioFormatUnsupportedPropertyError: objc.OSStatus = 1886547824;
pub const anon5171_AudioFormatBadPropertySizeError: objc.OSStatus = 561211770;
pub const anon5171_AudioFormatBadSpecifierSizeError: objc.OSStatus = 561213539;
pub const anon5171_AudioFormatUnsupportedDataFormatError: objc.OSStatus = 1718449215;
pub const anon5171_AudioFormatUnknownFormatError: objc.OSStatus = 560360820;

pub const QueuePropertyID = objc.UInt32;

pub const QueueParameterID = objc.UInt32;

pub const QueueParameterValue = objc.Float32;

pub const OpaqueAudioQueue = extern struct {};

pub const QueueRef = OpaqueAudioQueue;

pub const OpaqueAudioQueueTimeline = extern struct {};

pub const QueueTimelineRef = OpaqueAudioQueueTimeline;

pub const anon2601 = QueuePropertyID;
pub const anon2601_AudioQueueProperty_IsRunning: QueuePropertyID = 1634824814;
pub const anon2601_AudioQueueDeviceProperty_SampleRate: QueuePropertyID = 1634825074;
pub const anon2601_AudioQueueDeviceProperty_NumberChannels: QueuePropertyID = 1634821219;
pub const anon2601_AudioQueueProperty_CurrentDevice: QueuePropertyID = 1634820964;
pub const anon2601_AudioQueueProperty_MagicCookie: QueuePropertyID = 1634823523;
pub const anon2601_AudioQueueProperty_MaximumOutputPacketSize: QueuePropertyID = 2020569203;
pub const anon2601_AudioQueueProperty_StreamDescription: QueuePropertyID = 1634821748;
pub const anon2601_AudioQueueProperty_ChannelLayout: QueuePropertyID = 1634820972;
pub const anon2601_AudioQueueProperty_EnableLevelMetering: QueuePropertyID = 1634823525;
pub const anon2601_AudioQueueProperty_CurrentLevelMeter: QueuePropertyID = 1634823542;
pub const anon2601_AudioQueueProperty_CurrentLevelMeterDB: QueuePropertyID = 1634823524;
pub const anon2601_AudioQueueProperty_DecodeBufferSizeFrames: QueuePropertyID = 1684234854;
pub const anon2601_AudioQueueProperty_ConverterError: QueuePropertyID = 1902343781;
pub const anon2601_AudioQueueProperty_EnableTimePitch: QueuePropertyID = 1902081136;
pub const anon2601_AudioQueueProperty_TimePitchAlgorithm: QueuePropertyID = 1903456353;
pub const anon2601_AudioQueueProperty_TimePitchBypass: QueuePropertyID = 1903456354;

pub const anon3811 = QueuePropertyID;
pub const anon3811_AudioQueueProperty_ChannelAssignments: QueuePropertyID = 1634820961;

pub const QueueProcessingTapFlags = objc.UInt32;
pub const QueueProcessingTapFlags_Tap_PreEffects: objc.UInt32 = 1;
pub const QueueProcessingTapFlags_Tap_PostEffects: objc.UInt32 = 2;
pub const QueueProcessingTapFlags_Tap_Siphon: objc.UInt32 = 4;
pub const QueueProcessingTapFlags_Tap_StartOfStream: objc.UInt32 = 256;
pub const QueueProcessingTapFlags_Tap_EndOfStream: objc.UInt32 = 512;

pub const QueueBuffer = extern struct {
    mAudioDataBytesCapacity: objc.UInt32,
    mAudioData: ?*anyopaque,
    mAudioDataByteSize: objc.UInt32,
    mUserData: ?*anyopaque,
    mPacketDescriptionCapacity: objc.UInt32,
    mPacketDescriptions: ?*core_audio_types.StreamPacketDescription,
    mPacketDescriptionCount: objc.UInt32,
};

pub const QueueBufferRef = QueueBuffer;

pub const QueueParameterEvent = extern struct {
    mID: QueueParameterID,
    mValue: QueueParameterValue,
};

pub const QueueLevelMeterState = extern struct {
    mAveragePower: objc.Float32,
    mPeakPower: objc.Float32,
};

pub const OpaqueAudioQueueProcessingTap = extern struct {};

pub const QueueProcessingTapRef = OpaqueAudioQueueProcessingTap;

pub const QueueChannelAssignment = extern struct {
    mDeviceUID: core_foundation.StringRef,
    mChannelNumber: objc.UInt32,
};

pub const QueueOutputCallbackBlock = *const fn (QueueRef, QueueBufferRef) callconv(.C) void;

pub const QueueInputCallbackBlock = *const fn (
    QueueRef,
    QueueBufferRef,
    ?*const core_audio_types.TimeStamp,
    objc.UInt32,
    ?*const core_audio_types.StreamPacketDescription,
) callconv(.C) void;

pub const QueueOutputCallback = ?*const fn (?*anyopaque, QueueRef, QueueBufferRef) callconv(.C) void;

pub const QueueInputCallback = ?*const fn (
    ?*anyopaque,
    QueueRef,
    QueueBufferRef,
    ?*const core_audio_types.TimeStamp,
    objc.UInt32,
    ?*const core_audio_types.StreamPacketDescription,
) callconv(.C) void;

pub const QueuePropertyListenerProc = ?*const fn (?*anyopaque, QueueRef, QueuePropertyID) callconv(.C) void;

pub const QueueProcessingTapCallback = ?*const fn (
    ?*anyopaque,
    QueueProcessingTapRef,
    objc.UInt32,
    ?*core_audio_types.TimeStamp,
    ?*QueueProcessingTapFlags,
    ?*objc.UInt32,
    ?*core_audio_types.BufferList,
) callconv(.C) void;

extern "AudioToolbox" fn AudioQueueNewOutput(
    inFormat: ?*const core_audio_types.StreamBasicDescription,
    inCallbackProc: QueueOutputCallback,
    inUserData: ?*anyopaque,
    inCallbackRunLoop: core_foundation.RunLoopRef,
    inCallbackRunLoopMode: core_foundation.StringRef,
    inFlags: objc.UInt32,
    outAQ: ?*QueueRef,
) callconv(.C) objc.OSStatus;
pub const queueNewOutput = AudioQueueNewOutput;

extern "AudioToolbox" fn AudioQueueNewInput(
    inFormat: ?*const core_audio_types.StreamBasicDescription,
    inCallbackProc: QueueInputCallback,
    inUserData: ?*anyopaque,
    inCallbackRunLoop: core_foundation.RunLoopRef,
    inCallbackRunLoopMode: core_foundation.StringRef,
    inFlags: objc.UInt32,
    outAQ: ?*QueueRef,
) callconv(.C) objc.OSStatus;
pub const queueNewInput = AudioQueueNewInput;

extern "AudioToolbox" fn AudioQueueNewOutputWithDispatchQueue(
    outAQ: ?*QueueRef,
    inFormat: ?*const core_audio_types.StreamBasicDescription,
    inFlags: objc.UInt32,
    inCallbackDispatchQueue: objc.dispatch_queue_t,
    inCallbackBlock: QueueOutputCallbackBlock,
) callconv(.C) objc.OSStatus;
pub const queueNewOutputWithDispatchQueue = AudioQueueNewOutputWithDispatchQueue;

extern "AudioToolbox" fn AudioQueueNewInputWithDispatchQueue(
    outAQ: ?*QueueRef,
    inFormat: ?*const core_audio_types.StreamBasicDescription,
    inFlags: objc.UInt32,
    inCallbackDispatchQueue: objc.dispatch_queue_t,
    inCallbackBlock: QueueInputCallbackBlock,
) callconv(.C) objc.OSStatus;
pub const queueNewInputWithDispatchQueue = AudioQueueNewInputWithDispatchQueue;

extern "AudioToolbox" fn AudioQueueDispose(inAQ: QueueRef, inImmediate: objc.Boolean) callconv(.C) objc.OSStatus;
pub const queueDispose = AudioQueueDispose;

extern "AudioToolbox" fn AudioQueueAllocateBuffer(inAQ: QueueRef, inBufferByteSize: objc.UInt32, outBuffer: ?*QueueBufferRef) callconv(.C) objc.OSStatus;
pub const queueAllocateBuffer = AudioQueueAllocateBuffer;

extern "AudioToolbox" fn AudioQueueAllocateBufferWithPacketDescriptions(
    inAQ: QueueRef,
    inBufferByteSize: objc.UInt32,
    inNumberPacketDescriptions: objc.UInt32,
    outBuffer: ?*QueueBufferRef,
) callconv(.C) objc.OSStatus;
pub const queueAllocateBufferWithPacketDescriptions = AudioQueueAllocateBufferWithPacketDescriptions;

extern "AudioToolbox" fn AudioQueueFreeBuffer(inAQ: QueueRef, inBuffer: QueueBufferRef) callconv(.C) objc.OSStatus;
pub const queueFreeBuffer = AudioQueueFreeBuffer;

extern "AudioToolbox" fn AudioQueueEnqueueBuffer(
    inAQ: QueueRef,
    inBuffer: QueueBufferRef,
    inNumPacketDescs: objc.UInt32,
    inPacketDescs: ?*const core_audio_types.StreamPacketDescription,
) callconv(.C) objc.OSStatus;
pub const queueEnqueueBuffer = AudioQueueEnqueueBuffer;

extern "AudioToolbox" fn AudioQueueEnqueueBufferWithParameters(
    inAQ: QueueRef,
    inBuffer: QueueBufferRef,
    inNumPacketDescs: objc.UInt32,
    inPacketDescs: ?*const core_audio_types.StreamPacketDescription,
    inTrimFramesAtStart: objc.UInt32,
    inTrimFramesAtEnd: objc.UInt32,
    inNumParamValues: objc.UInt32,
    inParamValues: ?*const QueueParameterEvent,
    inStartTime: ?*const core_audio_types.TimeStamp,
    outActualStartTime: ?*core_audio_types.TimeStamp,
) callconv(.C) objc.OSStatus;
pub const queueEnqueueBufferWithParameters = AudioQueueEnqueueBufferWithParameters;

extern "AudioToolbox" fn AudioQueueStart(inAQ: QueueRef, inStartTime: ?*const core_audio_types.TimeStamp) callconv(.C) objc.OSStatus;
pub const queueStart = AudioQueueStart;

extern "AudioToolbox" fn AudioQueuePrime(inAQ: QueueRef, inNumberOfFramesToPrepare: objc.UInt32, outNumberOfFramesPrepared: ?*objc.UInt32) callconv(.C) objc.OSStatus;
pub const queuePrime = AudioQueuePrime;

extern "AudioToolbox" fn AudioQueueStop(inAQ: QueueRef, inImmediate: objc.Boolean) callconv(.C) objc.OSStatus;
pub const queueStop = AudioQueueStop;

extern "AudioToolbox" fn AudioQueuePause(inAQ: QueueRef) callconv(.C) objc.OSStatus;
pub const queuePause = AudioQueuePause;

extern "AudioToolbox" fn AudioQueueFlush(inAQ: QueueRef) callconv(.C) objc.OSStatus;
pub const queueFlush = AudioQueueFlush;

extern "AudioToolbox" fn AudioQueueReset(inAQ: QueueRef) callconv(.C) objc.OSStatus;
pub const queueReset = AudioQueueReset;

extern "AudioToolbox" fn AudioQueueGetParameter(inAQ: QueueRef, inParamID: QueueParameterID, outValue: ?*QueueParameterValue) callconv(.C) objc.OSStatus;
pub const queueGetParameter = AudioQueueGetParameter;

extern "AudioToolbox" fn AudioQueueSetParameter(inAQ: QueueRef, inParamID: QueueParameterID, inValue: QueueParameterValue) callconv(.C) objc.OSStatus;
pub const queueSetParameter = AudioQueueSetParameter;

extern "AudioToolbox" fn AudioQueueGetProperty(
    inAQ: QueueRef,
    inID: QueuePropertyID,
    outData: ?*anyopaque,
    ioDataSize: ?*objc.UInt32,
) callconv(.C) objc.OSStatus;
pub const queueGetProperty = AudioQueueGetProperty;

extern "AudioToolbox" fn AudioQueueSetProperty(
    inAQ: QueueRef,
    inID: QueuePropertyID,
    inData: ?*const anyopaque,
    inDataSize: objc.UInt32,
) callconv(.C) objc.OSStatus;
pub const queueSetProperty = AudioQueueSetProperty;

extern "AudioToolbox" fn AudioQueueGetPropertySize(inAQ: QueueRef, inID: QueuePropertyID, outDataSize: ?*objc.UInt32) callconv(.C) objc.OSStatus;
pub const queueGetPropertySize = AudioQueueGetPropertySize;

extern "AudioToolbox" fn AudioQueueAddPropertyListener(
    inAQ: QueueRef,
    inID: QueuePropertyID,
    inProc: QueuePropertyListenerProc,
    inUserData: ?*anyopaque,
) callconv(.C) objc.OSStatus;
pub const queueAddPropertyListener = AudioQueueAddPropertyListener;

extern "AudioToolbox" fn AudioQueueRemovePropertyListener(
    inAQ: QueueRef,
    inID: QueuePropertyID,
    inProc: QueuePropertyListenerProc,
    inUserData: ?*anyopaque,
) callconv(.C) objc.OSStatus;
pub const queueRemovePropertyListener = AudioQueueRemovePropertyListener;

extern "AudioToolbox" fn AudioQueueCreateTimeline(inAQ: QueueRef, outTimeline: ?*QueueTimelineRef) callconv(.C) objc.OSStatus;
pub const queueCreateTimeline = AudioQueueCreateTimeline;

extern "AudioToolbox" fn AudioQueueDisposeTimeline(inAQ: QueueRef, inTimeline: QueueTimelineRef) callconv(.C) objc.OSStatus;
pub const queueDisposeTimeline = AudioQueueDisposeTimeline;

extern "AudioToolbox" fn AudioQueueGetCurrentTime(
    inAQ: QueueRef,
    inTimeline: QueueTimelineRef,
    outTimeStamp: ?*core_audio_types.TimeStamp,
    outTimelineDiscontinuity: ?*objc.Boolean,
) callconv(.C) objc.OSStatus;
pub const queueGetCurrentTime = AudioQueueGetCurrentTime;

extern "AudioToolbox" fn AudioQueueDeviceGetCurrentTime(inAQ: QueueRef, outTimeStamp: ?*core_audio_types.TimeStamp) callconv(.C) objc.OSStatus;
pub const queueDeviceGetCurrentTime = AudioQueueDeviceGetCurrentTime;

extern "AudioToolbox" fn AudioQueueDeviceTranslateTime(inAQ: QueueRef, inTime: ?*const core_audio_types.TimeStamp, outTime: ?*core_audio_types.TimeStamp) callconv(.C) objc.OSStatus;
pub const queueDeviceTranslateTime = AudioQueueDeviceTranslateTime;

extern "AudioToolbox" fn AudioQueueDeviceGetNearestStartTime(inAQ: QueueRef, ioRequestedStartTime: ?*core_audio_types.TimeStamp, inFlags: objc.UInt32) callconv(.C) objc.OSStatus;
pub const queueDeviceGetNearestStartTime = AudioQueueDeviceGetNearestStartTime;

extern "AudioToolbox" fn AudioQueueSetOfflineRenderFormat(inAQ: QueueRef, inFormat: ?*const core_audio_types.StreamBasicDescription, inLayout: ?*const core_audio_types.ChannelLayout) callconv(.C) objc.OSStatus;
pub const queueSetOfflineRenderFormat = AudioQueueSetOfflineRenderFormat;

extern "AudioToolbox" fn AudioQueueOfflineRender(
    inAQ: QueueRef,
    inTimestamp: ?*const core_audio_types.TimeStamp,
    ioBuffer: QueueBufferRef,
    inNumberFrames: objc.UInt32,
) callconv(.C) objc.OSStatus;
pub const queueOfflineRender = AudioQueueOfflineRender;

extern "AudioToolbox" fn AudioQueueProcessingTapNew(
    inAQ: QueueRef,
    inCallback: QueueProcessingTapCallback,
    inClientData: ?*anyopaque,
    inFlags: QueueProcessingTapFlags,
    outMaxFrames: ?*objc.UInt32,
    outProcessingFormat: ?*core_audio_types.StreamBasicDescription,
    outAQTap: ?*QueueProcessingTapRef,
) callconv(.C) objc.OSStatus;
pub const queueProcessingTapNew = AudioQueueProcessingTapNew;

extern "AudioToolbox" fn AudioQueueProcessingTapDispose(inAQTap: QueueProcessingTapRef) callconv(.C) objc.OSStatus;
pub const queueProcessingTapDispose = AudioQueueProcessingTapDispose;

extern "AudioToolbox" fn AudioQueueProcessingTapGetSourceAudio(
    inAQTap: QueueProcessingTapRef,
    inNumberFrames: objc.UInt32,
    ioTimeStamp: ?*core_audio_types.TimeStamp,
    outFlags: ?*QueueProcessingTapFlags,
    outNumberFrames: ?*objc.UInt32,
    ioData: ?*core_audio_types.BufferList,
) callconv(.C) objc.OSStatus;
pub const queueProcessingTapGetSourceAudio = AudioQueueProcessingTapGetSourceAudio;

extern "AudioToolbox" fn AudioQueueProcessingTapGetQueueTime(inAQTap: QueueProcessingTapRef, outQueueSampleTime: ?*objc.Float64, outQueueFrameCount: ?*objc.UInt32) callconv(.C) objc.OSStatus;
pub const queueProcessingTapGetQueueTime = AudioQueueProcessingTapGetQueueTime;

extern "AudioToolbox" fn AudioHardwareServiceHasProperty(inObjectID: core_audio.ObjectID, inAddress: ?*const core_audio.ObjectPropertyAddress) callconv(.C) objc.Boolean;
pub const hardwareServiceHasProperty = AudioHardwareServiceHasProperty;

extern "AudioToolbox" fn AudioHardwareServiceIsPropertySettable(inObjectID: core_audio.ObjectID, inAddress: ?*const core_audio.ObjectPropertyAddress, outIsSettable: ?*objc.Boolean) callconv(.C) objc.OSStatus;
pub const hardwareServiceIsPropertySettable = AudioHardwareServiceIsPropertySettable;

extern "AudioToolbox" fn AudioHardwareServiceGetPropertyDataSize(
    inObjectID: core_audio.ObjectID,
    inAddress: ?*const core_audio.ObjectPropertyAddress,
    inQualifierDataSize: objc.UInt32,
    inQualifierData: ?*const anyopaque,
    outDataSize: ?*objc.UInt32,
) callconv(.C) objc.OSStatus;
pub const hardwareServiceGetPropertyDataSize = AudioHardwareServiceGetPropertyDataSize;

extern "AudioToolbox" fn AudioHardwareServiceGetPropertyData(
    inObjectID: core_audio.ObjectID,
    inAddress: ?*const core_audio.ObjectPropertyAddress,
    inQualifierDataSize: objc.UInt32,
    inQualifierData: ?*const anyopaque,
    ioDataSize: ?*objc.UInt32,
    outData: ?*anyopaque,
) callconv(.C) objc.OSStatus;
pub const hardwareServiceGetPropertyData = AudioHardwareServiceGetPropertyData;

extern "AudioToolbox" fn AudioHardwareServiceSetPropertyData(
    inObjectID: core_audio.ObjectID,
    inAddress: ?*const core_audio.ObjectPropertyAddress,
    inQualifierDataSize: objc.UInt32,
    inQualifierData: ?*const anyopaque,
    inDataSize: objc.UInt32,
    inData: ?*const anyopaque,
) callconv(.C) objc.OSStatus;
pub const hardwareServiceSetPropertyData = AudioHardwareServiceSetPropertyData;

extern "AudioToolbox" fn AudioHardwareServiceAddPropertyListener(
    inObjectID: core_audio.ObjectID,
    inAddress: ?*const core_audio.ObjectPropertyAddress,
    inListener: core_audio.ObjectPropertyListenerProc,
    inClientData: ?*anyopaque,
) callconv(.C) objc.OSStatus;
pub const hardwareServiceAddPropertyListener = AudioHardwareServiceAddPropertyListener;

extern "AudioToolbox" fn AudioHardwareServiceRemovePropertyListener(
    inObjectID: core_audio.ObjectID,
    inAddress: ?*const core_audio.ObjectPropertyAddress,
    inListener: core_audio.ObjectPropertyListenerProc,
    inClientData: ?*anyopaque,
) callconv(.C) objc.OSStatus;
pub const hardwareServiceRemovePropertyListener = AudioHardwareServiceRemovePropertyListener;

pub const SystemSoundID = objc.UInt32;

pub const ServicesPropertyID = objc.UInt32;

pub const ServicesSystemSoundCompletionProc = ?*const fn (SystemSoundID, ?*anyopaque) callconv(.C) void;

extern "AudioToolbox" fn AudioServicesCreateSystemSoundID(inFileURL: core_foundation.URLRef, outSystemSoundID: ?*SystemSoundID) callconv(.C) objc.OSStatus;
pub const servicesCreateSystemSoundID = AudioServicesCreateSystemSoundID;

extern "AudioToolbox" fn AudioServicesDisposeSystemSoundID(inSystemSoundID: SystemSoundID) callconv(.C) objc.OSStatus;
pub const servicesDisposeSystemSoundID = AudioServicesDisposeSystemSoundID;

extern "AudioToolbox" fn AudioServicesPlayAlertSoundWithCompletion(inSystemSoundID: SystemSoundID, inCompletionBlock: *const fn () callconv(.C) void) callconv(.C) void;
pub const servicesPlayAlertSoundWithCompletion = AudioServicesPlayAlertSoundWithCompletion;

extern "AudioToolbox" fn AudioServicesPlaySystemSoundWithCompletion(inSystemSoundID: SystemSoundID, inCompletionBlock: *const fn () callconv(.C) void) callconv(.C) void;
pub const servicesPlaySystemSoundWithCompletion = AudioServicesPlaySystemSoundWithCompletion;

extern "AudioToolbox" fn AudioServicesGetPropertyInfo(
    inPropertyID: ServicesPropertyID,
    inSpecifierSize: objc.UInt32,
    inSpecifier: ?*const anyopaque,
    outPropertyDataSize: ?*objc.UInt32,
    outWritable: ?*objc.Boolean,
) callconv(.C) objc.OSStatus;
pub const servicesGetPropertyInfo = AudioServicesGetPropertyInfo;

extern "AudioToolbox" fn AudioServicesGetProperty(
    inPropertyID: ServicesPropertyID,
    inSpecifierSize: objc.UInt32,
    inSpecifier: ?*const anyopaque,
    ioPropertyDataSize: ?*objc.UInt32,
    outPropertyData: ?*anyopaque,
) callconv(.C) objc.OSStatus;
pub const servicesGetProperty = AudioServicesGetProperty;

extern "AudioToolbox" fn AudioServicesSetProperty(
    inPropertyID: ServicesPropertyID,
    inSpecifierSize: objc.UInt32,
    inSpecifier: ?*const anyopaque,
    inPropertyDataSize: objc.UInt32,
    inPropertyData: ?*const anyopaque,
) callconv(.C) objc.OSStatus;
pub const servicesSetProperty = AudioServicesSetProperty;

extern "AudioToolbox" fn AudioServicesPlayAlertSound(inSystemSoundID: SystemSoundID) callconv(.C) void;
pub const servicesPlayAlertSound = AudioServicesPlayAlertSound;

extern "AudioToolbox" fn AudioServicesPlaySystemSound(inSystemSoundID: SystemSoundID) callconv(.C) void;
pub const servicesPlaySystemSound = AudioServicesPlaySystemSound;

extern "AudioToolbox" fn AudioServicesAddSystemSoundCompletion(
    inSystemSoundID: SystemSoundID,
    inRunLoop: core_foundation.RunLoopRef,
    inRunLoopMode: core_foundation.StringRef,
    inCompletionRoutine: ServicesSystemSoundCompletionProc,
    inClientData: ?*anyopaque,
) callconv(.C) objc.OSStatus;
pub const servicesAddSystemSoundCompletion = AudioServicesAddSystemSoundCompletion;

extern "AudioToolbox" fn AudioServicesRemoveSystemSoundCompletion(inSystemSoundID: SystemSoundID) callconv(.C) void;
pub const servicesRemoveSystemSoundCompletion = AudioServicesRemoveSystemSoundCompletion;

pub const UnitEventType = objc.UInt32;
pub const UnitEventType_Event_ParameterValueChange: objc.UInt32 = 0;
pub const UnitEventType_Event_BeginParameterChangeGesture: objc.UInt32 = 1;
pub const UnitEventType_Event_EndParameterChangeGesture: objc.UInt32 = 2;
pub const UnitEventType_Event_PropertyChange: objc.UInt32 = 3;

pub const AUListenerBase = extern struct {};

pub const AUParameterListenerRef = AUListenerBase;

pub const AUEventListenerRef = AUParameterListenerRef;

pub const UnitEvent = extern struct {
    pub const anon1075 = extern union {
        mParameter: UnitParameter,
        mProperty: UnitProperty,
    };

    mEventType: UnitEventType,
    mArgument: UnitEvent.anon1075,
};

pub const AUParameterListenerBlock = *const fn (?*anyopaque, ?*const UnitParameter, UnitParameterValue) callconv(.C) void;

pub const AUEventListenerBlock = *const fn (
    ?*anyopaque,
    ?*const UnitEvent,
    objc.UInt64,
    UnitParameterValue,
) callconv(.C) void;

pub const AUParameterListenerProc = ?*const fn (
    ?*anyopaque,
    ?*anyopaque,
    ?*const UnitParameter,
    UnitParameterValue,
) callconv(.C) void;

pub const AUEventListenerProc = ?*const fn (
    ?*anyopaque,
    ?*anyopaque,
    ?*const UnitEvent,
    objc.UInt64,
    UnitParameterValue,
) callconv(.C) void;

pub extern "AudioToolbox" fn AUListenerCreateWithDispatchQueue(
    outListener: ?*AUParameterListenerRef,
    inNotificationInterval: objc.Float32,
    inDispatchQueue: objc.dispatch_queue_t,
    inBlock: AUParameterListenerBlock,
) callconv(.C) objc.OSStatus;

pub extern "AudioToolbox" fn AUListenerCreate(
    inProc: AUParameterListenerProc,
    inUserData: ?*anyopaque,
    inRunLoop: core_foundation.RunLoopRef,
    inRunLoopMode: core_foundation.StringRef,
    inNotificationInterval: objc.Float32,
    outListener: ?*AUParameterListenerRef,
) callconv(.C) objc.OSStatus;

pub extern "AudioToolbox" fn AUListenerDispose(inListener: AUParameterListenerRef) callconv(.C) objc.OSStatus;

pub extern "AudioToolbox" fn AUListenerAddParameter(inListener: AUParameterListenerRef, inObject: ?*anyopaque, inParameter: ?*const UnitParameter) callconv(.C) objc.OSStatus;

pub extern "AudioToolbox" fn AUListenerRemoveParameter(inListener: AUParameterListenerRef, inObject: ?*anyopaque, inParameter: ?*const UnitParameter) callconv(.C) objc.OSStatus;

pub extern "AudioToolbox" fn AUParameterSet(
    inSendingListener: AUParameterListenerRef,
    inSendingObject: ?*anyopaque,
    inParameter: ?*const UnitParameter,
    inValue: UnitParameterValue,
    inBufferOffsetInFrames: objc.UInt32,
) callconv(.C) objc.OSStatus;

pub extern "AudioToolbox" fn AUParameterListenerNotify(inSendingListener: AUParameterListenerRef, inSendingObject: ?*anyopaque, inParameter: ?*const UnitParameter) callconv(.C) objc.OSStatus;

pub extern "AudioToolbox" fn AUEventListenerCreateWithDispatchQueue(
    outListener: ?*AUEventListenerRef,
    inNotificationInterval: objc.Float32,
    inValueChangeGranularity: objc.Float32,
    inDispatchQueue: objc.dispatch_queue_t,
    inBlock: AUEventListenerBlock,
) callconv(.C) objc.OSStatus;

pub extern "AudioToolbox" fn AUEventListenerCreate(
    inProc: AUEventListenerProc,
    inUserData: ?*anyopaque,
    inRunLoop: core_foundation.RunLoopRef,
    inRunLoopMode: core_foundation.StringRef,
    inNotificationInterval: objc.Float32,
    inValueChangeGranularity: objc.Float32,
    outListener: ?*AUEventListenerRef,
) callconv(.C) objc.OSStatus;

pub extern "AudioToolbox" fn AUEventListenerAddEventType(inListener: AUEventListenerRef, inObject: ?*anyopaque, inEvent: ?*const UnitEvent) callconv(.C) objc.OSStatus;

pub extern "AudioToolbox" fn AUEventListenerRemoveEventType(inListener: AUEventListenerRef, inObject: ?*anyopaque, inEvent: ?*const UnitEvent) callconv(.C) objc.OSStatus;

pub extern "AudioToolbox" fn AUEventListenerNotify(inSendingListener: AUEventListenerRef, inSendingObject: ?*anyopaque, inEvent: ?*const UnitEvent) callconv(.C) objc.OSStatus;

pub extern "AudioToolbox" fn AUParameterValueFromLinear(inLinearValue: objc.Float32, inParameter: ?*const UnitParameter) callconv(.C) UnitParameterValue;

pub extern "AudioToolbox" fn AUParameterValueToLinear(inParameterValue: UnitParameterValue, inParameter: ?*const UnitParameter) callconv(.C) objc.Float32;

pub extern "AudioToolbox" fn AUParameterFormatValue(
    inParameterValue: objc.Float64,
    inParameter: ?*const UnitParameter,
    inTextBuffer: ?*c_char,
    inDigits: objc.UInt32,
) callconv(.C) ?*c_char;

extern "AudioToolbox" fn AudioWorkIntervalCreate(name: [*:0]const u8, clock: objc.os_clockid_t, attr: objc.os_workgroup_attr_t) callconv(.C) objc.os_workgroup_interval_t;
pub const workIntervalCreate = AudioWorkIntervalCreate;

pub const anon251 = objc.UInt32;
pub const anon251_CAF_FileType: objc.UInt32 = 1667327590;
pub const anon251_CAF_FileVersion_Initial: objc.UInt32 = 1;

pub const CAFFileHeader = extern struct {
    mFileType: objc.UInt32,
    mFileVersion: objc.UInt16,
    mFileFlags: objc.UInt16,
};

pub const CAFChunkHeader = extern struct {
    mChunkType: objc.UInt32,
    mChunkSize: objc.SInt64,
};

pub const CAF_UUID_ChunkHeader = extern struct {
    mHeader: CAFChunkHeader,
    mUUID: [16]objc.UInt8,
};

pub const CAFFormatFlags = objc.UInt32;
pub const CAFFormatFlags_LinearPCMFormatFlagIsFloat: objc.UInt32 = 1;
pub const CAFFormatFlags_LinearPCMFormatFlagIsLittleEndian: objc.UInt32 = 2;

pub const CAFAudioDescription = extern struct {
    mSampleRate: objc.Float64,
    mFormatID: objc.UInt32,
    mFormatFlags: CAFFormatFlags,
    mBytesPerPacket: objc.UInt32,
    mFramesPerPacket: objc.UInt32,
    mChannelsPerFrame: objc.UInt32,
    mBitsPerChannel: objc.UInt32,
};

pub const CAFAudioFormatListItem = extern struct {
    mFormat: CAFAudioDescription,
    mChannelLayoutTag: objc.UInt32,
};

pub const CAFPacketTableHeader = extern struct {
    mNumberPackets: objc.SInt64,
    mNumberValidFrames: objc.SInt64,
    mPrimingFrames: objc.SInt32,
    mRemainderFrames: objc.SInt32,
    mPacketDescriptions: [1]objc.UInt8,
};

pub const CAFDataChunk = extern struct {
    mEditCount: objc.UInt32,
    mData: [1]objc.UInt8,
};

pub const CAF_SMPTE_Time = extern struct {
    mHours: objc.SInt8,
    mMinutes: objc.SInt8,
    mSeconds: objc.SInt8,
    mFrames: objc.SInt8,
    mSubFrameSampleOffset: objc.UInt32,
};

pub const CAFMarker = extern struct {
    mType: objc.UInt32,
    mFramePosition: objc.Float64,
    mMarkerID: objc.UInt32,
    mSMPTETime: CAF_SMPTE_Time,
    mChannel: objc.UInt32,
};

pub const CAFMarkerChunk = extern struct {
    mSMPTE_TimeType: objc.UInt32,
    mNumberMarkers: objc.UInt32,
    mMarkers: [1]CAFMarker,
};

pub const CAFRegionFlags = objc.UInt32;
pub const CAFRegionFlags_Flag_LoopEnable: objc.UInt32 = 1;
pub const CAFRegionFlags_Flag_PlayForward: objc.UInt32 = 2;
pub const CAFRegionFlags_Flag_PlayBackward: objc.UInt32 = 4;

pub const CAFRegion = extern struct {
    mRegionID: objc.UInt32,
    mFlags: CAFRegionFlags,
    mNumberMarkers: objc.UInt32,
    mMarkers: [1]CAFMarker,
};

pub const CAFRegionChunk = extern struct {
    mSMPTE_TimeType: objc.UInt32,
    mNumberRegions: objc.UInt32,
    mRegions: [1]CAFRegion,
};

pub const CAFInstrumentChunk = extern struct {
    mBaseNote: objc.Float32,
    mMIDILowNote: objc.UInt8,
    mMIDIHighNote: objc.UInt8,
    mMIDILowVelocity: objc.UInt8,
    mMIDIHighVelocity: objc.UInt8,
    mdBGain: objc.Float32,
    mStartRegionID: objc.UInt32,
    mSustainRegionID: objc.UInt32,
    mReleaseRegionID: objc.UInt32,
    mInstrumentID: objc.UInt32,
};

pub const CAFStringID = extern struct {
    mStringID: objc.UInt32,
    mStringStartByteOffset: objc.SInt64,
};

pub const CAFStrings = extern struct {
    mNumEntries: objc.UInt32,
    mStringsIDs: [1]CAFStringID,
};

pub const CAFInfoStrings = extern struct {
    mNumEntries: objc.UInt32,
};

pub const CAFPositionPeak = extern struct {
    mValue: objc.Float32,
    mFrameNumber: objc.UInt64,
};

pub const CAFPeakChunk = extern struct {
    mEditCount: objc.UInt32,
    mPeaks: [1]CAFPositionPeak,
};

pub const CAFOverviewSample = extern struct {
    mMinValue: objc.SInt16,
    mMaxValue: objc.SInt16,
};

pub const CAFOverviewChunk = extern struct {
    mEditCount: objc.UInt32,
    mNumFramesPerOVWSample: objc.UInt32,
    mData: [1]CAFOverviewSample,
};

pub const CAFUMIDChunk = extern struct {
    mBytes: [64]objc.UInt8,
};

pub extern "AudioToolbox" fn CAShow(inObject: ?*anyopaque) callconv(.C) void;

pub extern "AudioToolbox" fn CAShowFile(inObject: ?*anyopaque, inFile: ?*objc.FILE) callconv(.C) void;

pub const OpaqueExtAudioFile = extern struct {};

pub const ExtAudioFileRef = OpaqueExtAudioFile;

pub const ExtAudioFilePacketTableInfoOverride = objc.SInt32;

pub const anon381 = ExtAudioFilePacketTableInfoOverride;
pub const anon381_ExtAudioFilePacketTableInfoOverride_UseFileValue: ExtAudioFilePacketTableInfoOverride = -1;
pub const anon381_ExtAudioFilePacketTableInfoOverride_UseFileValueIfValid: ExtAudioFilePacketTableInfoOverride = -2;

pub const ExtAudioFilePropertyID = objc.UInt32;

pub extern "AudioToolbox" fn ExtAudioFileOpenURL(inURL: core_foundation.URLRef, outExtAudioFile: ?*ExtAudioFileRef) callconv(.C) objc.OSStatus;

pub extern "AudioToolbox" fn ExtAudioFileWrapAudioFileID(inFileID: FileID, inForWriting: objc.Boolean, outExtAudioFile: ?*ExtAudioFileRef) callconv(.C) objc.OSStatus;

pub extern "AudioToolbox" fn ExtAudioFileCreateWithURL(
    inURL: core_foundation.URLRef,
    inFileType: FileTypeID,
    inStreamDesc: ?*const core_audio_types.StreamBasicDescription,
    inChannelLayout: ?*const core_audio_types.ChannelLayout,
    inFlags: objc.UInt32,
    outExtAudioFile: ?*ExtAudioFileRef,
) callconv(.C) objc.OSStatus;

pub extern "AudioToolbox" fn ExtAudioFileOpen(inFSRef: ?*const core_services.FSRef, outExtAudioFile: ?*ExtAudioFileRef) callconv(.C) objc.OSStatus;

pub extern "AudioToolbox" fn ExtAudioFileCreateNew(
    inParentDir: ?*const core_services.FSRef,
    inFileName: core_foundation.StringRef,
    inFileType: FileTypeID,
    inStreamDesc: ?*const core_audio_types.StreamBasicDescription,
    inChannelLayout: ?*const core_audio_types.ChannelLayout,
    outExtAudioFile: ?*ExtAudioFileRef,
) callconv(.C) objc.OSStatus;

pub extern "AudioToolbox" fn ExtAudioFileDispose(inExtAudioFile: ExtAudioFileRef) callconv(.C) objc.OSStatus;

pub extern "AudioToolbox" fn ExtAudioFileRead(inExtAudioFile: ExtAudioFileRef, ioNumberFrames: ?*objc.UInt32, ioData: ?*core_audio_types.BufferList) callconv(.C) objc.OSStatus;

pub extern "AudioToolbox" fn ExtAudioFileWrite(inExtAudioFile: ExtAudioFileRef, inNumberFrames: objc.UInt32, ioData: ?*const core_audio_types.BufferList) callconv(.C) objc.OSStatus;

pub extern "AudioToolbox" fn ExtAudioFileWriteAsync(inExtAudioFile: ExtAudioFileRef, inNumberFrames: objc.UInt32, ioData: ?*const core_audio_types.BufferList) callconv(.C) objc.OSStatus;

pub extern "AudioToolbox" fn ExtAudioFileSeek(inExtAudioFile: ExtAudioFileRef, inFrameOffset: objc.SInt64) callconv(.C) objc.OSStatus;

pub extern "AudioToolbox" fn ExtAudioFileTell(inExtAudioFile: ExtAudioFileRef, outFrameOffset: ?*objc.SInt64) callconv(.C) objc.OSStatus;

pub extern "AudioToolbox" fn ExtAudioFileGetPropertyInfo(
    inExtAudioFile: ExtAudioFileRef,
    inPropertyID: ExtAudioFilePropertyID,
    outSize: ?*objc.UInt32,
    outWritable: ?*objc.Boolean,
) callconv(.C) objc.OSStatus;

pub extern "AudioToolbox" fn ExtAudioFileGetProperty(
    inExtAudioFile: ExtAudioFileRef,
    inPropertyID: ExtAudioFilePropertyID,
    ioPropertyDataSize: ?*objc.UInt32,
    outPropertyData: ?*anyopaque,
) callconv(.C) objc.OSStatus;

pub extern "AudioToolbox" fn ExtAudioFileSetProperty(
    inExtAudioFile: ExtAudioFileRef,
    inPropertyID: ExtAudioFilePropertyID,
    inPropertyDataSize: objc.UInt32,
    inPropertyData: ?*const anyopaque,
) callconv(.C) objc.OSStatus;

pub const MusicEventType = objc.UInt32;

pub const MusicSequenceLoadFlags = objc.UInt32;
pub const MusicSequenceLoadFlags_SMF_PreserveTracks: objc.UInt32 = 0;
pub const MusicSequenceLoadFlags_SMF_ChannelsToTracks: objc.UInt32 = 1;

pub const MusicSequenceType = objc.UInt32;
pub const MusicSequenceType__Beats: objc.UInt32 = 1650811252;
pub const MusicSequenceType__Seconds: objc.UInt32 = 1936024435;
pub const MusicSequenceType__Samples: objc.UInt32 = 1935764848;

pub const MusicSequenceFileTypeID = objc.UInt32;
pub const MusicSequenceFileTypeID_File_AnyType: objc.UInt32 = 0;
pub const MusicSequenceFileTypeID_File_MIDIType: objc.UInt32 = 1835623529;
pub const MusicSequenceFileTypeID_File_iMelodyType: objc.UInt32 = 1768777068;

pub const MusicSequenceFileFlags = objc.UInt32;
pub const MusicSequenceFileFlags__Default: objc.UInt32 = 0;
pub const MusicSequenceFileFlags__EraseFile: objc.UInt32 = 1;

pub const MusicTimeStamp = objc.Float64;

pub const MIDINoteMessage = extern struct {
    channel: objc.UInt8,
    note: objc.UInt8,
    velocity: objc.UInt8,
    releaseVelocity: objc.UInt8,
    duration: objc.Float32,
};

pub const MIDIChannelMessage = extern struct {
    status: objc.UInt8,
    data1: objc.UInt8,
    data2: objc.UInt8,
    reserved: objc.UInt8,
};

pub const MIDIRawData = extern struct {
    length: objc.UInt32,
    data: [1]objc.UInt8,
};

pub const MIDIMetaEvent = extern struct {
    metaEventType: objc.UInt8,
    unused1: objc.UInt8,
    unused2: objc.UInt8,
    unused3: objc.UInt8,
    dataLength: objc.UInt32,
    data: [1]objc.UInt8,
};

pub const MusicEventUserData = extern struct {
    length: objc.UInt32,
    data: [1]objc.UInt8,
};

pub const ExtendedNoteOnEvent = extern struct {
    instrumentID: MusicDeviceInstrumentID,
    groupID: MusicDeviceGroupID,
    duration: objc.Float32,
    extendedParams: MusicDeviceNoteParams,
};

pub const ParameterEvent = extern struct {
    parameterID: UnitParameterID,
    scope: UnitScope,
    element: UnitElement,
    value: UnitParameterValue,
};

pub const ExtendedTempoEvent = extern struct {
    bpm: objc.Float64,
};

pub const AUPresetEvent = extern struct {
    scope: UnitScope,
    element: UnitElement,
    preset: core_foundation.PropertyListRef,
};

pub const CABarBeatTime = extern struct {
    bar: objc.SInt32,
    beat: objc.UInt16,
    subbeat: objc.UInt16,
    subbeatDivisor: objc.UInt16,
    reserved: objc.UInt16,
};

pub const OpaqueMusicPlayer = extern struct {};

pub const MusicPlayer = OpaqueMusicPlayer;

pub const OpaqueMusicSequence = extern struct {};

pub const MusicSequence = OpaqueMusicSequence;

pub const OpaqueMusicTrack = extern struct {};

pub const MusicTrack = OpaqueMusicTrack;

pub const OpaqueMusicEventIterator = extern struct {};

pub const MusicEventIterator = OpaqueMusicEventIterator;

pub const MusicSequenceUserCallback = ?*const fn (
    ?*anyopaque,
    MusicSequence,
    MusicTrack,
    MusicTimeStamp,
    ?*const MusicEventUserData,
    MusicTimeStamp,
    MusicTimeStamp,
) callconv(.C) void;

pub const anon3631 = objc.OSStatus;
pub const anon3631_AudioToolboxErr_InvalidSequenceType: objc.OSStatus = -10846;
pub const anon3631_AudioToolboxErr_TrackIndexError: objc.OSStatus = -10859;
pub const anon3631_AudioToolboxErr_TrackNotFound: objc.OSStatus = -10858;
pub const anon3631_AudioToolboxErr_EndOfTrack: objc.OSStatus = -10857;
pub const anon3631_AudioToolboxErr_StartOfTrack: objc.OSStatus = -10856;
pub const anon3631_AudioToolboxErr_IllegalTrackDestination: objc.OSStatus = -10855;
pub const anon3631_AudioToolboxErr_NoSequence: objc.OSStatus = -10854;
pub const anon3631_AudioToolboxErr_InvalidEventType: objc.OSStatus = -10853;
pub const anon3631_AudioToolboxErr_InvalidPlayerState: objc.OSStatus = -10852;
pub const anon3631_AudioToolboxErr_CannotDoInCurrentContext: objc.OSStatus = -10863;
pub const anon3631_AudioToolboxError_NoTrackDestination: objc.OSStatus = -66720;

pub const anon4311 = objc.UInt32;
pub const anon4311_SequenceTrackProperty_LoopInfo: objc.UInt32 = 0;
pub const anon4311_SequenceTrackProperty_OffsetTime: objc.UInt32 = 1;
pub const anon4311_SequenceTrackProperty_MuteStatus: objc.UInt32 = 2;
pub const anon4311_SequenceTrackProperty_SoloStatus: objc.UInt32 = 3;
pub const anon4311_SequenceTrackProperty_AutomatedParameters: objc.UInt32 = 4;
pub const anon4311_SequenceTrackProperty_TrackLength: objc.UInt32 = 5;
pub const anon4311_SequenceTrackProperty_TimeResolution: objc.UInt32 = 6;

pub const MusicTrackLoopInfo = extern struct {
    loopDuration: MusicTimeStamp,
    numberOfLoops: objc.SInt32,
};

pub extern "AudioToolbox" fn NewMusicPlayer(outPlayer: ?*MusicPlayer) callconv(.C) objc.OSStatus;

pub extern "AudioToolbox" fn DisposeMusicPlayer(inPlayer: MusicPlayer) callconv(.C) objc.OSStatus;

pub extern "AudioToolbox" fn MusicPlayerSetSequence(inPlayer: MusicPlayer, inSequence: MusicSequence) callconv(.C) objc.OSStatus;

pub extern "AudioToolbox" fn MusicPlayerGetSequence(inPlayer: MusicPlayer, outSequence: ?*MusicSequence) callconv(.C) objc.OSStatus;

pub extern "AudioToolbox" fn MusicPlayerSetTime(inPlayer: MusicPlayer, inTime: MusicTimeStamp) callconv(.C) objc.OSStatus;

pub extern "AudioToolbox" fn MusicPlayerGetTime(inPlayer: MusicPlayer, outTime: ?*MusicTimeStamp) callconv(.C) objc.OSStatus;

pub extern "AudioToolbox" fn MusicPlayerGetHostTimeForBeats(inPlayer: MusicPlayer, inBeats: MusicTimeStamp, outHostTime: ?*objc.UInt64) callconv(.C) objc.OSStatus;

pub extern "AudioToolbox" fn MusicPlayerGetBeatsForHostTime(inPlayer: MusicPlayer, inHostTime: objc.UInt64, outBeats: ?*MusicTimeStamp) callconv(.C) objc.OSStatus;

pub extern "AudioToolbox" fn MusicPlayerPreroll(inPlayer: MusicPlayer) callconv(.C) objc.OSStatus;

pub extern "AudioToolbox" fn MusicPlayerStart(inPlayer: MusicPlayer) callconv(.C) objc.OSStatus;

pub extern "AudioToolbox" fn MusicPlayerStop(inPlayer: MusicPlayer) callconv(.C) objc.OSStatus;

pub extern "AudioToolbox" fn MusicPlayerIsPlaying(inPlayer: MusicPlayer, outIsPlaying: ?*objc.Boolean) callconv(.C) objc.OSStatus;

pub extern "AudioToolbox" fn MusicPlayerSetPlayRateScalar(inPlayer: MusicPlayer, inScaleRate: objc.Float64) callconv(.C) objc.OSStatus;

pub extern "AudioToolbox" fn MusicPlayerGetPlayRateScalar(inPlayer: MusicPlayer, outScaleRate: ?*objc.Float64) callconv(.C) objc.OSStatus;

pub extern "AudioToolbox" fn NewMusicSequence(outSequence: ?*MusicSequence) callconv(.C) objc.OSStatus;

pub extern "AudioToolbox" fn DisposeMusicSequence(inSequence: MusicSequence) callconv(.C) objc.OSStatus;

pub extern "AudioToolbox" fn MusicSequenceNewTrack(inSequence: MusicSequence, outTrack: ?*MusicTrack) callconv(.C) objc.OSStatus;

pub extern "AudioToolbox" fn MusicSequenceDisposeTrack(inSequence: MusicSequence, inTrack: MusicTrack) callconv(.C) objc.OSStatus;

pub extern "AudioToolbox" fn MusicSequenceGetTrackCount(inSequence: MusicSequence, outNumberOfTracks: ?*objc.UInt32) callconv(.C) objc.OSStatus;

pub extern "AudioToolbox" fn MusicSequenceGetIndTrack(inSequence: MusicSequence, inTrackIndex: objc.UInt32, outTrack: ?*MusicTrack) callconv(.C) objc.OSStatus;

pub extern "AudioToolbox" fn MusicSequenceGetTrackIndex(inSequence: MusicSequence, inTrack: MusicTrack, outTrackIndex: ?*objc.UInt32) callconv(.C) objc.OSStatus;

pub extern "AudioToolbox" fn MusicSequenceGetTempoTrack(inSequence: MusicSequence, outTrack: ?*MusicTrack) callconv(.C) objc.OSStatus;

pub extern "AudioToolbox" fn MusicSequenceSetAUGraph(inSequence: MusicSequence, inGraph: AUGraph) callconv(.C) objc.OSStatus;

pub extern "AudioToolbox" fn MusicSequenceGetAUGraph(inSequence: MusicSequence, outGraph: ?*AUGraph) callconv(.C) objc.OSStatus;

pub extern "AudioToolbox" fn MusicSequenceSetMIDIEndpoint(inSequence: MusicSequence, inEndpoint: core_midi.EndpointRef) callconv(.C) objc.OSStatus;

pub extern "AudioToolbox" fn MusicSequenceSetSequenceType(inSequence: MusicSequence, inType: MusicSequenceType) callconv(.C) objc.OSStatus;

pub extern "AudioToolbox" fn MusicSequenceGetSequenceType(inSequence: MusicSequence, outType: ?*MusicSequenceType) callconv(.C) objc.OSStatus;

pub extern "AudioToolbox" fn MusicSequenceFileLoad(
    inSequence: MusicSequence,
    inFileRef: core_foundation.URLRef,
    inFileTypeHint: MusicSequenceFileTypeID,
    inFlags: MusicSequenceLoadFlags,
) callconv(.C) objc.OSStatus;

pub extern "AudioToolbox" fn MusicSequenceFileLoadData(
    inSequence: MusicSequence,
    inData: core_foundation.DataRef,
    inFileTypeHint: MusicSequenceFileTypeID,
    inFlags: MusicSequenceLoadFlags,
) callconv(.C) objc.OSStatus;

pub extern "AudioToolbox" fn MusicSequenceFileCreate(
    inSequence: MusicSequence,
    inFileRef: core_foundation.URLRef,
    inFileType: MusicSequenceFileTypeID,
    inFlags: MusicSequenceFileFlags,
    inResolution: objc.SInt16,
) callconv(.C) objc.OSStatus;

pub extern "AudioToolbox" fn MusicSequenceFileCreateData(
    inSequence: MusicSequence,
    inFileType: MusicSequenceFileTypeID,
    inFlags: MusicSequenceFileFlags,
    inResolution: objc.SInt16,
    outData: ?*core_foundation.DataRef,
) callconv(.C) objc.OSStatus;

pub extern "AudioToolbox" fn MusicSequenceReverse(inSequence: MusicSequence) callconv(.C) objc.OSStatus;

pub extern "AudioToolbox" fn MusicSequenceGetSecondsForBeats(inSequence: MusicSequence, inBeats: MusicTimeStamp, outSeconds: ?*objc.Float64) callconv(.C) objc.OSStatus;

pub extern "AudioToolbox" fn MusicSequenceGetBeatsForSeconds(inSequence: MusicSequence, inSeconds: objc.Float64, outBeats: ?*MusicTimeStamp) callconv(.C) objc.OSStatus;

pub extern "AudioToolbox" fn MusicSequenceSetUserCallback(inSequence: MusicSequence, inCallback: MusicSequenceUserCallback, inClientData: ?*anyopaque) callconv(.C) objc.OSStatus;

pub extern "AudioToolbox" fn MusicSequenceBeatsToBarBeatTime(
    inSequence: MusicSequence,
    inBeats: MusicTimeStamp,
    inSubbeatDivisor: objc.UInt32,
    outBarBeatTime: ?*CABarBeatTime,
) callconv(.C) objc.OSStatus;

pub extern "AudioToolbox" fn MusicSequenceBarBeatTimeToBeats(inSequence: MusicSequence, inBarBeatTime: ?*const CABarBeatTime, outBeats: ?*MusicTimeStamp) callconv(.C) objc.OSStatus;

pub extern "AudioToolbox" fn MusicSequenceGetInfoDictionary(inSequence: MusicSequence) callconv(.C) core_foundation.DictionaryRef;

pub extern "AudioToolbox" fn MusicTrackGetSequence(inTrack: MusicTrack, outSequence: ?*MusicSequence) callconv(.C) objc.OSStatus;

pub extern "AudioToolbox" fn MusicTrackSetDestNode(inTrack: MusicTrack, inNode: AUNode) callconv(.C) objc.OSStatus;

pub extern "AudioToolbox" fn MusicTrackSetDestMIDIEndpoint(inTrack: MusicTrack, inEndpoint: core_midi.EndpointRef) callconv(.C) objc.OSStatus;

pub extern "AudioToolbox" fn MusicTrackGetDestNode(inTrack: MusicTrack, outNode: ?*AUNode) callconv(.C) objc.OSStatus;

pub extern "AudioToolbox" fn MusicTrackGetDestMIDIEndpoint(inTrack: MusicTrack, outEndpoint: ?*core_midi.EndpointRef) callconv(.C) objc.OSStatus;

pub extern "AudioToolbox" fn MusicTrackSetProperty(
    inTrack: MusicTrack,
    inPropertyID: objc.UInt32,
    inData: ?*anyopaque,
    inLength: objc.UInt32,
) callconv(.C) objc.OSStatus;

pub extern "AudioToolbox" fn MusicTrackGetProperty(
    inTrack: MusicTrack,
    inPropertyID: objc.UInt32,
    outData: ?*anyopaque,
    ioLength: ?*objc.UInt32,
) callconv(.C) objc.OSStatus;

pub extern "AudioToolbox" fn MusicTrackMoveEvents(
    inTrack: MusicTrack,
    inStartTime: MusicTimeStamp,
    inEndTime: MusicTimeStamp,
    inMoveTime: MusicTimeStamp,
) callconv(.C) objc.OSStatus;

pub extern "AudioToolbox" fn MusicTrackClear(inTrack: MusicTrack, inStartTime: MusicTimeStamp, inEndTime: MusicTimeStamp) callconv(.C) objc.OSStatus;

pub extern "AudioToolbox" fn MusicTrackCut(inTrack: MusicTrack, inStartTime: MusicTimeStamp, inEndTime: MusicTimeStamp) callconv(.C) objc.OSStatus;

pub extern "AudioToolbox" fn MusicTrackCopyInsert(
    inSourceTrack: MusicTrack,
    inSourceStartTime: MusicTimeStamp,
    inSourceEndTime: MusicTimeStamp,
    inDestTrack: MusicTrack,
    inDestInsertTime: MusicTimeStamp,
) callconv(.C) objc.OSStatus;

pub extern "AudioToolbox" fn MusicTrackMerge(
    inSourceTrack: MusicTrack,
    inSourceStartTime: MusicTimeStamp,
    inSourceEndTime: MusicTimeStamp,
    inDestTrack: MusicTrack,
    inDestInsertTime: MusicTimeStamp,
) callconv(.C) objc.OSStatus;

pub extern "AudioToolbox" fn MusicTrackNewMIDINoteEvent(inTrack: MusicTrack, inTimeStamp: MusicTimeStamp, inMessage: ?*const MIDINoteMessage) callconv(.C) objc.OSStatus;

pub extern "AudioToolbox" fn MusicTrackNewMIDIChannelEvent(inTrack: MusicTrack, inTimeStamp: MusicTimeStamp, inMessage: ?*const MIDIChannelMessage) callconv(.C) objc.OSStatus;

pub extern "AudioToolbox" fn MusicTrackNewMIDIRawDataEvent(inTrack: MusicTrack, inTimeStamp: MusicTimeStamp, inRawData: ?*const MIDIRawData) callconv(.C) objc.OSStatus;

pub extern "AudioToolbox" fn MusicTrackNewExtendedNoteEvent(inTrack: MusicTrack, inTimeStamp: MusicTimeStamp, inInfo: ?*const ExtendedNoteOnEvent) callconv(.C) objc.OSStatus;

pub extern "AudioToolbox" fn MusicTrackNewParameterEvent(inTrack: MusicTrack, inTimeStamp: MusicTimeStamp, inInfo: ?*const ParameterEvent) callconv(.C) objc.OSStatus;

pub extern "AudioToolbox" fn MusicTrackNewExtendedTempoEvent(inTrack: MusicTrack, inTimeStamp: MusicTimeStamp, inBPM: objc.Float64) callconv(.C) objc.OSStatus;

pub extern "AudioToolbox" fn MusicTrackNewMetaEvent(inTrack: MusicTrack, inTimeStamp: MusicTimeStamp, inMetaEvent: ?*const MIDIMetaEvent) callconv(.C) objc.OSStatus;

pub extern "AudioToolbox" fn MusicTrackNewUserEvent(inTrack: MusicTrack, inTimeStamp: MusicTimeStamp, inUserData: ?*const MusicEventUserData) callconv(.C) objc.OSStatus;

pub extern "AudioToolbox" fn MusicTrackNewAUPresetEvent(inTrack: MusicTrack, inTimeStamp: MusicTimeStamp, inPresetEvent: ?*const AUPresetEvent) callconv(.C) objc.OSStatus;

pub extern "AudioToolbox" fn NewMusicEventIterator(inTrack: MusicTrack, outIterator: ?*MusicEventIterator) callconv(.C) objc.OSStatus;

pub extern "AudioToolbox" fn DisposeMusicEventIterator(inIterator: MusicEventIterator) callconv(.C) objc.OSStatus;

pub extern "AudioToolbox" fn MusicEventIteratorSeek(inIterator: MusicEventIterator, inTimeStamp: MusicTimeStamp) callconv(.C) objc.OSStatus;

pub extern "AudioToolbox" fn MusicEventIteratorNextEvent(inIterator: MusicEventIterator) callconv(.C) objc.OSStatus;

pub extern "AudioToolbox" fn MusicEventIteratorPreviousEvent(inIterator: MusicEventIterator) callconv(.C) objc.OSStatus;

pub extern "AudioToolbox" fn MusicEventIteratorGetEventInfo(
    inIterator: MusicEventIterator,
    outTimeStamp: ?*MusicTimeStamp,
    outEventType: ?*MusicEventType,
    outEventData: ?*?*const anyopaque,
    outEventDataSize: ?*objc.UInt32,
) callconv(.C) objc.OSStatus;

pub extern "AudioToolbox" fn MusicEventIteratorSetEventInfo(inIterator: MusicEventIterator, inEventType: MusicEventType, inEventData: ?*const anyopaque) callconv(.C) objc.OSStatus;

pub extern "AudioToolbox" fn MusicEventIteratorSetEventTime(inIterator: MusicEventIterator, inTimeStamp: MusicTimeStamp) callconv(.C) objc.OSStatus;

pub extern "AudioToolbox" fn MusicEventIteratorDeleteEvent(inIterator: MusicEventIterator) callconv(.C) objc.OSStatus;

pub extern "AudioToolbox" fn MusicEventIteratorHasPreviousEvent(inIterator: MusicEventIterator, outHasPrevEvent: ?*objc.Boolean) callconv(.C) objc.OSStatus;

pub extern "AudioToolbox" fn MusicEventIteratorHasNextEvent(inIterator: MusicEventIterator, outHasNextEvent: ?*objc.Boolean) callconv(.C) objc.OSStatus;

pub extern "AudioToolbox" fn MusicEventIteratorHasCurrentEvent(inIterator: MusicEventIterator, outHasCurEvent: ?*objc.Boolean) callconv(.C) objc.OSStatus;

pub extern "AudioToolbox" fn MusicSequenceLoadSMFWithFlags(inSequence: MusicSequence, inFileRef: ?*const core_services.FSRef, inFlags: MusicSequenceLoadFlags) callconv(.C) objc.OSStatus;

pub extern "AudioToolbox" fn MusicSequenceLoadSMFDataWithFlags(inSequence: MusicSequence, inData: core_foundation.DataRef, inFlags: MusicSequenceLoadFlags) callconv(.C) objc.OSStatus;

pub extern "AudioToolbox" fn MusicSequenceSaveMIDIFile(
    inSequence: MusicSequence,
    inParentDirectory: ?*const core_services.FSRef,
    inFileName: core_foundation.StringRef,
    inResolution: objc.UInt16,
    inFlags: objc.UInt32,
) callconv(.C) objc.OSStatus;

pub extern "AudioToolbox" fn MusicSequenceSaveSMFData(inSequence: MusicSequence, outData: ?*core_foundation.DataRef, inResolution: objc.UInt16) callconv(.C) objc.OSStatus;

pub extern "AudioToolbox" fn NewMusicTrackFrom(
    inSourceTrack: MusicTrack,
    inSourceStartTime: MusicTimeStamp,
    inSourceEndTime: MusicTimeStamp,
    outNewTrack: ?*MusicTrack,
) callconv(.C) objc.OSStatus;

pub const anon16551 = u32;
pub const anon16551_MusicEventType_ExtendedControl: u32 = 2;

pub const ExtendedControlEvent = extern struct {
    groupID: MusicDeviceGroupID,
    controlID: UnitParameterID,
    value: UnitParameterValue,
};

pub extern "AudioToolbox" fn MusicTrackNewExtendedControlEvent(inTrack: MusicTrack, inTimeStamp: MusicTimeStamp, inInfo: ?*const ExtendedControlEvent) callconv(.C) objc.OSStatus;

pub const FileComponent = ComponentInstance;

pub const FileComponentPropertyID = objc.UInt32;

extern "AudioToolbox" fn AudioFileComponentCreateURL(
    inComponent: FileComponent,
    inFileRef: core_foundation.URLRef,
    inFormat: ?*const core_audio_types.StreamBasicDescription,
    inFlags: objc.UInt32,
) callconv(.C) objc.OSStatus;
pub const fileComponentCreateURL = AudioFileComponentCreateURL;

extern "AudioToolbox" fn AudioFileComponentOpenURL(
    inComponent: FileComponent,
    inFileRef: core_foundation.URLRef,
    inPermissions: objc.SInt8,
    inFileDescriptor: i32,
) callconv(.C) objc.OSStatus;
pub const fileComponentOpenURL = AudioFileComponentOpenURL;

extern "AudioToolbox" fn AudioFileComponentOpenWithCallbacks(
    inComponent: FileComponent,
    inClientData: ?*anyopaque,
    inReadFunc: File_ReadProc,
    inWriteFunc: File_WriteProc,
    inGetSizeFunc: File_GetSizeProc,
    inSetSizeFunc: File_SetSizeProc,
) callconv(.C) objc.OSStatus;
pub const fileComponentOpenWithCallbacks = AudioFileComponentOpenWithCallbacks;

extern "AudioToolbox" fn AudioFileComponentInitializeWithCallbacks(
    inComponent: FileComponent,
    inClientData: ?*anyopaque,
    inReadFunc: File_ReadProc,
    inWriteFunc: File_WriteProc,
    inGetSizeFunc: File_GetSizeProc,
    inSetSizeFunc: File_SetSizeProc,
    inFileType: objc.UInt32,
    inFormat: ?*const core_audio_types.StreamBasicDescription,
    inFlags: objc.UInt32,
) callconv(.C) objc.OSStatus;
pub const fileComponentInitializeWithCallbacks = AudioFileComponentInitializeWithCallbacks;

extern "AudioToolbox" fn AudioFileComponentCloseFile(inComponent: FileComponent) callconv(.C) objc.OSStatus;
pub const fileComponentCloseFile = AudioFileComponentCloseFile;

extern "AudioToolbox" fn AudioFileComponentOptimize(inComponent: FileComponent) callconv(.C) objc.OSStatus;
pub const fileComponentOptimize = AudioFileComponentOptimize;

extern "AudioToolbox" fn AudioFileComponentReadBytes(
    inComponent: FileComponent,
    inUseCache: objc.Boolean,
    inStartingByte: objc.SInt64,
    ioNumBytes: ?*objc.UInt32,
    outBuffer: ?*anyopaque,
) callconv(.C) objc.OSStatus;
pub const fileComponentReadBytes = AudioFileComponentReadBytes;

extern "AudioToolbox" fn AudioFileComponentWriteBytes(
    inComponent: FileComponent,
    inUseCache: objc.Boolean,
    inStartingByte: objc.SInt64,
    ioNumBytes: ?*objc.UInt32,
    inBuffer: ?*const anyopaque,
) callconv(.C) objc.OSStatus;
pub const fileComponentWriteBytes = AudioFileComponentWriteBytes;

extern "AudioToolbox" fn AudioFileComponentReadPackets(
    inComponent: FileComponent,
    inUseCache: objc.Boolean,
    outNumBytes: ?*objc.UInt32,
    outPacketDescriptions: ?*core_audio_types.StreamPacketDescription,
    inStartingPacket: objc.SInt64,
    ioNumPackets: ?*objc.UInt32,
    outBuffer: ?*anyopaque,
) callconv(.C) objc.OSStatus;
pub const fileComponentReadPackets = AudioFileComponentReadPackets;

extern "AudioToolbox" fn AudioFileComponentReadPacketData(
    inComponent: FileComponent,
    inUseCache: objc.Boolean,
    ioNumBytes: ?*objc.UInt32,
    outPacketDescriptions: ?*core_audio_types.StreamPacketDescription,
    inStartingPacket: objc.SInt64,
    ioNumPackets: ?*objc.UInt32,
    outBuffer: ?*anyopaque,
) callconv(.C) objc.OSStatus;
pub const fileComponentReadPacketData = AudioFileComponentReadPacketData;

extern "AudioToolbox" fn AudioFileComponentWritePackets(
    inComponent: FileComponent,
    inUseCache: objc.Boolean,
    inNumBytes: objc.UInt32,
    inPacketDescriptions: ?*const core_audio_types.StreamPacketDescription,
    inStartingPacket: objc.SInt64,
    ioNumPackets: ?*objc.UInt32,
    inBuffer: ?*const anyopaque,
) callconv(.C) objc.OSStatus;
pub const fileComponentWritePackets = AudioFileComponentWritePackets;

extern "AudioToolbox" fn AudioFileComponentGetPropertyInfo(
    inComponent: FileComponent,
    inPropertyID: FileComponentPropertyID,
    outPropertySize: ?*objc.UInt32,
    outWritable: ?*objc.UInt32,
) callconv(.C) objc.OSStatus;
pub const fileComponentGetPropertyInfo = AudioFileComponentGetPropertyInfo;

extern "AudioToolbox" fn AudioFileComponentGetProperty(
    inComponent: FileComponent,
    inPropertyID: FileComponentPropertyID,
    ioPropertyDataSize: ?*objc.UInt32,
    outPropertyData: ?*anyopaque,
) callconv(.C) objc.OSStatus;
pub const fileComponentGetProperty = AudioFileComponentGetProperty;

extern "AudioToolbox" fn AudioFileComponentSetProperty(
    inComponent: FileComponent,
    inPropertyID: FileComponentPropertyID,
    inPropertyDataSize: objc.UInt32,
    inPropertyData: ?*const anyopaque,
) callconv(.C) objc.OSStatus;
pub const fileComponentSetProperty = AudioFileComponentSetProperty;

extern "AudioToolbox" fn AudioFileComponentCountUserData(inComponent: FileComponent, inUserDataID: objc.UInt32, outNumberItems: ?*objc.UInt32) callconv(.C) objc.OSStatus;
pub const fileComponentCountUserData = AudioFileComponentCountUserData;

extern "AudioToolbox" fn AudioFileComponentGetUserDataSize(
    inComponent: FileComponent,
    inUserDataID: objc.UInt32,
    inIndex: objc.UInt32,
    outUserDataSize: ?*objc.UInt32,
) callconv(.C) objc.OSStatus;
pub const fileComponentGetUserDataSize = AudioFileComponentGetUserDataSize;

extern "AudioToolbox" fn AudioFileComponentGetUserDataSize64(
    inComponent: FileComponent,
    inUserDataID: objc.UInt32,
    inIndex: objc.UInt32,
    outUserDataSize: ?*objc.UInt64,
) callconv(.C) objc.OSStatus;
pub const fileComponentGetUserDataSize64 = AudioFileComponentGetUserDataSize64;

extern "AudioToolbox" fn AudioFileComponentGetUserData(
    inComponent: FileComponent,
    inUserDataID: objc.UInt32,
    inIndex: objc.UInt32,
    ioUserDataSize: ?*objc.UInt32,
    outUserData: ?*anyopaque,
) callconv(.C) objc.OSStatus;
pub const fileComponentGetUserData = AudioFileComponentGetUserData;

extern "AudioToolbox" fn AudioFileComponentGetUserDataAtOffset(
    inComponent: FileComponent,
    inUserDataID: objc.UInt32,
    inIndex: objc.UInt32,
    inOffset: objc.SInt64,
    ioUserDataSize: ?*objc.UInt32,
    outUserData: ?*anyopaque,
) callconv(.C) objc.OSStatus;
pub const fileComponentGetUserDataAtOffset = AudioFileComponentGetUserDataAtOffset;

extern "AudioToolbox" fn AudioFileComponentSetUserData(
    inComponent: FileComponent,
    inUserDataID: objc.UInt32,
    inIndex: objc.UInt32,
    inUserDataSize: objc.UInt32,
    inUserData: ?*const anyopaque,
) callconv(.C) objc.OSStatus;
pub const fileComponentSetUserData = AudioFileComponentSetUserData;

extern "AudioToolbox" fn AudioFileComponentRemoveUserData(inComponent: FileComponent, inUserDataID: objc.UInt32, inIndex: objc.UInt32) callconv(.C) objc.OSStatus;
pub const fileComponentRemoveUserData = AudioFileComponentRemoveUserData;

extern "AudioToolbox" fn AudioFileComponentExtensionIsThisFormat(inComponent: FileComponent, inExtension: core_foundation.StringRef, outResult: ?*objc.UInt32) callconv(.C) objc.OSStatus;
pub const fileComponentExtensionIsThisFormat = AudioFileComponentExtensionIsThisFormat;

extern "AudioToolbox" fn AudioFileComponentFileDataIsThisFormat(
    inComponent: FileComponent,
    inDataByteSize: objc.UInt32,
    inData: ?*const anyopaque,
    outResult: ?*objc.UInt32,
) callconv(.C) objc.OSStatus;
pub const fileComponentFileDataIsThisFormat = AudioFileComponentFileDataIsThisFormat;

extern "AudioToolbox" fn AudioFileComponentFileIsThisFormat(inComponent: FileComponent, inFileRefNum: objc.SInt16, outResult: ?*objc.UInt32) callconv(.C) objc.OSStatus;
pub const fileComponentFileIsThisFormat = AudioFileComponentFileIsThisFormat;

extern "AudioToolbox" fn AudioFileComponentDataIsThisFormat(
    inComponent: FileComponent,
    inClientData: ?*anyopaque,
    inReadFunc: File_ReadProc,
    inWriteFunc: File_WriteProc,
    inGetSizeFunc: File_GetSizeProc,
    inSetSizeFunc: File_SetSizeProc,
    outResult: ?*objc.UInt32,
) callconv(.C) objc.OSStatus;
pub const fileComponentDataIsThisFormat = AudioFileComponentDataIsThisFormat;

extern "AudioToolbox" fn AudioFileComponentGetGlobalInfoSize(
    inComponent: FileComponent,
    inPropertyID: FileComponentPropertyID,
    inSpecifierSize: objc.UInt32,
    inSpecifier: ?*const anyopaque,
    outPropertySize: ?*objc.UInt32,
) callconv(.C) objc.OSStatus;
pub const fileComponentGetGlobalInfoSize = AudioFileComponentGetGlobalInfoSize;

extern "AudioToolbox" fn AudioFileComponentGetGlobalInfo(
    inComponent: FileComponent,
    inPropertyID: FileComponentPropertyID,
    inSpecifierSize: objc.UInt32,
    inSpecifier: ?*const anyopaque,
    ioPropertyDataSize: ?*objc.UInt32,
    outPropertyData: ?*anyopaque,
) callconv(.C) objc.OSStatus;
pub const fileComponentGetGlobalInfo = AudioFileComponentGetGlobalInfo;

pub const anon6331 = u32;
pub const anon6331_AudioFileCreateSelect: u32 = 1;
pub const anon6331_AudioFileOpenSelect: u32 = 2;
pub const anon6331_AudioFileInitializeSelect: u32 = 3;
pub const anon6331_AudioFileOpenWithCallbacksSelect: u32 = 4;
pub const anon6331_AudioFileInitializeWithCallbacksSelect: u32 = 5;
pub const anon6331_AudioFileCloseSelect: u32 = 6;
pub const anon6331_AudioFileOptimizeSelect: u32 = 7;
pub const anon6331_AudioFileReadBytesSelect: u32 = 8;
pub const anon6331_AudioFileWriteBytesSelect: u32 = 9;
pub const anon6331_AudioFileReadPacketsSelect: u32 = 10;
pub const anon6331_AudioFileWritePacketsSelect: u32 = 11;
pub const anon6331_AudioFileGetPropertyInfoSelect: u32 = 12;
pub const anon6331_AudioFileGetPropertySelect: u32 = 13;
pub const anon6331_AudioFileSetPropertySelect: u32 = 14;
pub const anon6331_AudioFileExtensionIsThisFormatSelect: u32 = 15;
pub const anon6331_AudioFileFileIsThisFormatSelect: u32 = 16;
pub const anon6331_AudioFileDataIsThisFormatSelect: u32 = 17;
pub const anon6331_AudioFileGetGlobalInfoSizeSelect: u32 = 18;
pub const anon6331_AudioFileGetGlobalInfoSelect: u32 = 19;
pub const anon6331_AudioFileCountUserDataSelect: u32 = 20;
pub const anon6331_AudioFileGetUserDataSizeSelect: u32 = 21;
pub const anon6331_AudioFileGetUserDataSelect: u32 = 22;
pub const anon6331_AudioFileSetUserDataSelect: u32 = 23;
pub const anon6331_AudioFileRemoveUserDataSelect: u32 = 24;
pub const anon6331_AudioFileCreateURLSelect: u32 = 25;
pub const anon6331_AudioFileOpenURLSelect: u32 = 26;
pub const anon6331_AudioFileFileDataIsThisFormatSelect: u32 = 27;
pub const anon6331_AudioFileReadPacketDataSelect: u32 = 28;
pub const anon6331_AudioFileGetUserDataSize64Select: u32 = 29;
pub const anon6331_AudioFileGetUserDataAtOffsetSelect: u32 = 30;

pub const ReadBytesFDF = objc.OSStatus;

pub const WriteBytesFDF = objc.OSStatus;

pub const ReadPacketsFDF = objc.OSStatus;

pub const ReadPacketDataFDF = objc.OSStatus;

pub const WritePacketsFDF = objc.OSStatus;

pub const GetPropertyInfoFDF = objc.OSStatus;

pub const GetPropertyFDF = objc.OSStatus;

pub const SetPropertyFDF = objc.OSStatus;

pub const CountUserDataFDF = objc.OSStatus;

pub const GetUserDataSizeFDF = objc.OSStatus;

pub const GetUserDataFDF = objc.OSStatus;

pub const SetUserDataFDF = objc.OSStatus;

pub const FileFDFTable = extern struct {
    mComponentStorage: ?*anyopaque,
    mReadBytesFDF: ReadBytesFDF,
    mWriteBytesFDF: WriteBytesFDF,
    mReadPacketsFDF: ReadPacketsFDF,
    mWritePacketsFDF: WritePacketsFDF,
    mGetPropertyInfoFDF: GetPropertyInfoFDF,
    mGetPropertyFDF: GetPropertyFDF,
    mSetPropertyFDF: SetPropertyFDF,
    mCountUserDataFDF: CountUserDataFDF,
    mGetUserDataSizeFDF: GetUserDataSizeFDF,
    mGetUserDataFDF: GetUserDataFDF,
    mSetUserDataFDF: SetUserDataFDF,
};

pub const FileFDFTableExtended = extern struct {
    mComponentStorage: ?*anyopaque,
    mReadBytesFDF: ReadBytesFDF,
    mWriteBytesFDF: WriteBytesFDF,
    mReadPacketsFDF: ReadPacketsFDF,
    mWritePacketsFDF: WritePacketsFDF,
    mGetPropertyInfoFDF: GetPropertyInfoFDF,
    mGetPropertyFDF: GetPropertyFDF,
    mSetPropertyFDF: SetPropertyFDF,
    mCountUserDataFDF: CountUserDataFDF,
    mGetUserDataSizeFDF: GetUserDataSizeFDF,
    mGetUserDataFDF: GetUserDataFDF,
    mSetUserDataFDF: SetUserDataFDF,
    mReadPacketDataFDF: ReadPacketDataFDF,
};

extern "AudioToolbox" fn AudioFileComponentCreate(
    inComponent: FileComponent,
    inParentRef: ?*const core_services.FSRef,
    inFileName: core_foundation.StringRef,
    inFormat: ?*const core_audio_types.StreamBasicDescription,
    inFlags: objc.UInt32,
    outNewFileRef: ?*core_services.FSRef,
) callconv(.C) objc.OSStatus;
pub const fileComponentCreate = AudioFileComponentCreate;

extern "AudioToolbox" fn AudioFileComponentInitialize(
    inComponent: FileComponent,
    inFileRef: ?*const core_services.FSRef,
    inFormat: ?*const core_audio_types.StreamBasicDescription,
    inFlags: objc.UInt32,
) callconv(.C) objc.OSStatus;
pub const fileComponentInitialize = AudioFileComponentInitialize;

extern "AudioToolbox" fn AudioFileComponentOpenFile(
    inComponent: FileComponent,
    inFileRef: ?*const core_services.FSRef,
    inPermissions: objc.SInt8,
    inRefNum: objc.SInt16,
) callconv(.C) objc.OSStatus;
pub const fileComponentOpenFile = AudioFileComponentOpenFile;

pub const FileComponentCreateURLProc = objc.OSStatus;

pub const FileComponentOpenURLProc = objc.OSStatus;

pub const FileComponentOpenWithCallbacksProc = objc.OSStatus;

pub const FileComponentInitializeWithCallbacksProc = objc.OSStatus;

pub const FileComponentCloseProc = objc.OSStatus;

pub const FileComponentOptimizeProc = objc.OSStatus;

pub const FileComponentReadBytesProc = objc.OSStatus;

pub const FileComponentWriteBytesProc = objc.OSStatus;

pub const FileComponentReadPacketsProc = objc.OSStatus;

pub const FileComponentReadPacketDataProc = objc.OSStatus;

pub const FileComponentWritePacketsProc = objc.OSStatus;

pub const FileComponentGetPropertyInfoProc = objc.OSStatus;

pub const FileComponentGetPropertyProc = objc.OSStatus;

pub const FileComponentSetPropertyProc = objc.OSStatus;

pub const FileComponentCountUserDataProc = objc.OSStatus;

pub const FileComponentGetUserDataSizeProc = objc.OSStatus;

pub const FileComponentGetUserDataSize64Proc = objc.OSStatus;

pub const FileComponentGetUserDataProc = objc.OSStatus;

pub const FileComponentGetUserDataAtOffsetProc = objc.OSStatus;

pub const FileComponentSetUserDataProc = objc.OSStatus;

pub const FileComponentRemoveUserDataProc = objc.OSStatus;

pub const FileComponentExtensionIsThisFormatProc = objc.OSStatus;

pub const FileComponentFileDataIsThisFormatProc = objc.OSStatus;

pub const FileComponentGetGlobalInfoSizeProc = objc.OSStatus;

pub const FileComponentGetGlobalInfoProc = objc.OSStatus;

pub const CAClockPropertyID = objc.UInt32;
pub const CAClockPropertyID_Property_InternalTimebase: objc.UInt32 = 1768846434;
pub const CAClockPropertyID_Property_TimebaseSource: objc.UInt32 = 1769235059;
pub const CAClockPropertyID_Property_SyncMode: objc.UInt32 = 1937337965;
pub const CAClockPropertyID_Property_SyncSource: objc.UInt32 = 1937337971;
pub const CAClockPropertyID_Property_SMPTEFormat: objc.UInt32 = 1936552038;
pub const CAClockPropertyID_Property_SMPTEOffset: objc.UInt32 = 1936552047;
pub const CAClockPropertyID_Property_MIDIClockDestinations: objc.UInt32 = 1835164516;
pub const CAClockPropertyID_Property_MTCDestinations: objc.UInt32 = 1836344164;
pub const CAClockPropertyID_Property_MTCFreewheelTime: objc.UInt32 = 1836344951;
pub const CAClockPropertyID_Property_TempoMap: objc.UInt32 = 1953329263;
pub const CAClockPropertyID_Property_MeterTrack: objc.UInt32 = 1835365490;
pub const CAClockPropertyID_Property_Name: objc.UInt32 = 1851878757;
pub const CAClockPropertyID_Property_SendMIDISPP: objc.UInt32 = 1836281968;

pub const CAClockTimebase = objc.UInt32;
pub const CAClockTimebase__HostTime: objc.UInt32 = 1752134516;
pub const CAClockTimebase__AudioDevice: objc.UInt32 = 1635083369;
pub const CAClockTimebase__AudioOutputUnit: objc.UInt32 = 1635086197;

pub const CAClockSyncMode = objc.UInt32;
pub const CAClockSyncMode__Internal: objc.UInt32 = 1768846450;
pub const CAClockSyncMode__MIDIClockTransport: objc.UInt32 = 1835232363;
pub const CAClockSyncMode__MTCTransport: objc.UInt32 = 1835889763;

pub const CAClockSMPTEFormat = core_audio_types.SMPTETimeType;

pub const CAClockMessage = objc.UInt32;
pub const CAClockMessage__StartTimeSet: objc.UInt32 = 1937009005;
pub const CAClockMessage__Started: objc.UInt32 = 1937011316;
pub const CAClockMessage__Stopped: objc.UInt32 = 1937010544;
pub const CAClockMessage__Armed: objc.UInt32 = 1634889060;
pub const CAClockMessage__Disarmed: objc.UInt32 = 1684107885;
pub const CAClockMessage__PropertyChanged: objc.UInt32 = 1885562983;
pub const CAClockMessage__WrongSMPTEFormat: objc.UInt32 = 1064529264;

pub const CAClockTimeFormat = objc.UInt32;
pub const CAClockTimeFormat__HostTime: objc.UInt32 = 1752134516;
pub const CAClockTimeFormat__Samples: objc.UInt32 = 1935764848;
pub const CAClockTimeFormat__Beats: objc.UInt32 = 1650811252;
pub const CAClockTimeFormat__Seconds: objc.UInt32 = 1936024435;
pub const CAClockTimeFormat__SMPTESeconds: objc.UInt32 = 1936552051;
pub const CAClockTimeFormat__SMPTETime: objc.UInt32 = 1936552052;
pub const CAClockTimeFormat__AbsoluteSeconds: objc.UInt32 = 1634952547;

pub const OpaqueCAClock = extern struct {};

pub const CAClockRef = OpaqueCAClock;

pub const CAClockBeats = objc.Float64;

pub const CAClockTempo = objc.Float64;

pub const CAClockSamples = objc.Float64;

pub const CAClockSeconds = objc.Float64;

pub const CAClockListenerProc = ?*const fn (?*anyopaque, CAClockMessage, ?*const anyopaque) callconv(.C) void;

pub const CAClockTime = extern struct {
    pub const anon3102 = extern union {
        hostTime: objc.UInt64,
        samples: CAClockSamples,
        beats: CAClockBeats,
        seconds: CAClockSeconds,
        smpte: core_audio_types.SMPTETime,
    };

    format: CAClockTimeFormat,
    reserved: objc.UInt32,
    time: CAClockTime.anon3102,
};

pub const CATempoMapEntry = extern struct {
    beats: CAClockBeats,
    tempoBPM: CAClockTempo,
};

pub const CAMeterTrackEntry = extern struct {
    beats: CAClockBeats,
    meterNumer: objc.UInt16,
    meterDenom: objc.UInt16,
};

pub extern "AudioToolbox" fn CAClockNew(inReservedFlags: objc.UInt32, outCAClock: ?*CAClockRef) callconv(.C) objc.OSStatus;

pub extern "AudioToolbox" fn CAClockDispose(inCAClock: CAClockRef) callconv(.C) objc.OSStatus;

pub extern "AudioToolbox" fn CAClockGetPropertyInfo(
    inCAClock: CAClockRef,
    inPropertyID: CAClockPropertyID,
    outSize: ?*objc.UInt32,
    outWritable: ?*objc.Boolean,
) callconv(.C) objc.OSStatus;

pub extern "AudioToolbox" fn CAClockGetProperty(
    inCAClock: CAClockRef,
    inPropertyID: CAClockPropertyID,
    ioPropertyDataSize: ?*objc.UInt32,
    outPropertyData: ?*anyopaque,
) callconv(.C) objc.OSStatus;

pub extern "AudioToolbox" fn CAClockSetProperty(
    inCAClock: CAClockRef,
    inPropertyID: CAClockPropertyID,
    inPropertyDataSize: objc.UInt32,
    inPropertyData: ?*const anyopaque,
) callconv(.C) objc.OSStatus;

pub extern "AudioToolbox" fn CAClockAddListener(inCAClock: CAClockRef, inListenerProc: CAClockListenerProc, inUserData: ?*anyopaque) callconv(.C) objc.OSStatus;

pub extern "AudioToolbox" fn CAClockRemoveListener(inCAClock: CAClockRef, inListenerProc: CAClockListenerProc, inUserData: ?*anyopaque) callconv(.C) objc.OSStatus;

pub extern "AudioToolbox" fn CAClockSetCurrentTime(inCAClock: CAClockRef, inTime: ?*const CAClockTime) callconv(.C) objc.OSStatus;

pub extern "AudioToolbox" fn CAClockGetCurrentTime(inCAClock: CAClockRef, inTimeFormat: CAClockTimeFormat, outTime: ?*CAClockTime) callconv(.C) objc.OSStatus;

pub extern "AudioToolbox" fn CAClockGetStartTime(inCAClock: CAClockRef, inTimeFormat: CAClockTimeFormat, outTime: ?*CAClockTime) callconv(.C) objc.OSStatus;

pub extern "AudioToolbox" fn CAClockTranslateTime(
    inCAClock: CAClockRef,
    inTime: ?*const CAClockTime,
    inOutputTimeFormat: CAClockTimeFormat,
    outTime: ?*CAClockTime,
) callconv(.C) objc.OSStatus;

pub extern "AudioToolbox" fn CAClockStart(inCAClock: CAClockRef) callconv(.C) objc.OSStatus;

pub extern "AudioToolbox" fn CAClockStop(inCAClock: CAClockRef) callconv(.C) objc.OSStatus;

pub extern "AudioToolbox" fn CAClockArm(inCAClock: CAClockRef) callconv(.C) objc.OSStatus;

pub extern "AudioToolbox" fn CAClockDisarm(inCAClock: CAClockRef) callconv(.C) objc.OSStatus;

pub extern "AudioToolbox" fn CAClockSetPlayRate(inCAClock: CAClockRef, inPlayRate: objc.Float64) callconv(.C) objc.OSStatus;

pub extern "AudioToolbox" fn CAClockGetPlayRate(inCAClock: CAClockRef, outPlayRate: ?*objc.Float64) callconv(.C) objc.OSStatus;

pub extern "AudioToolbox" fn CAClockGetCurrentTempo(inCAClock: CAClockRef, outTempo: ?*CAClockTempo, outTimestamp: ?*CAClockTime) callconv(.C) objc.OSStatus;

pub extern "AudioToolbox" fn CAClockSetCurrentTempo(inCAClock: CAClockRef, inTempo: CAClockTempo, inTimestamp: ?*const CAClockTime) callconv(.C) objc.OSStatus;

pub extern "AudioToolbox" fn CAClockSecondsToSMPTETime(
    inCAClock: CAClockRef,
    inSeconds: CAClockSeconds,
    inSubframeDivisor: objc.UInt16,
    outSMPTETime: ?*core_audio_types.SMPTETime,
) callconv(.C) objc.OSStatus;

pub extern "AudioToolbox" fn CAClockSMPTETimeToSeconds(inCAClock: CAClockRef, inSMPTETime: ?*const core_audio_types.SMPTETime, outSeconds: ?*CAClockSeconds) callconv(.C) objc.OSStatus;

pub extern "AudioToolbox" fn CAClockBeatsToBarBeatTime(
    inCAClock: CAClockRef,
    inBeats: CAClockBeats,
    inSubbeatDivisor: objc.UInt16,
    outBarBeatTime: ?*CABarBeatTime,
) callconv(.C) objc.OSStatus;

pub extern "AudioToolbox" fn CAClockBarBeatTimeToBeats(inCAClock: CAClockRef, inBarBeatTime: ?*const CABarBeatTime, outBeats: ?*CAClockBeats) callconv(.C) objc.OSStatus;

pub extern "AudioToolbox" fn CAClockParseMIDI(inCAClock: CAClockRef, inMIDIPacketList: ?*const core_midi.PacketList) callconv(.C) objc.OSStatus;

pub const anon872 = u32;
pub const anon872_AudioSessionNoError: u32 = 0;
pub const anon872_AudioSessionNotInitialized: u32 = 560557673;
pub const anon872_AudioSessionAlreadyInitialized: u32 = 1768843636;
pub const anon872_AudioSessionInitializationError: u32 = 1768843583;
pub const anon872_AudioSessionUnsupportedPropertyError: u32 = 1886681407;
pub const anon872_AudioSessionBadPropertySizeError: u32 = 561211770;
pub const anon872_AudioSessionNotActiveError: u32 = 560030580;
pub const anon872_AudioServicesNoHardwareError: u32 = 1852794999;
pub const anon872_AudioSessionNoCategorySet: u32 = 1063477620;
pub const anon872_AudioSessionIncompatibleCategory: u32 = 560161140;
pub const anon872_AudioSessionUnspecifiedError: u32 = 2003329396;

pub const SessionPropertyID = objc.UInt32;

pub const anon1252 = u32;
pub const anon1252_AudioSessionBeginInterruption: u32 = 1;
pub const anon1252_AudioSessionEndInterruption: u32 = 0;

pub const anon1532 = u32;
pub const anon1532_AudioSessionCategory_AmbientSound: u32 = 1634558569;
pub const anon1532_AudioSessionCategory_SoloAmbientSound: u32 = 1936682095;
pub const anon1532_AudioSessionCategory_MediaPlayback: u32 = 1835361385;
pub const anon1532_AudioSessionCategory_RecordAudio: u32 = 1919247201;
pub const anon1532_AudioSessionCategory_PlayAndRecord: u32 = 1886151026;
pub const anon1532_AudioSessionCategory_AudioProcessing: u32 = 1886547811;

pub const anon1732 = u32;
pub const anon1732_AudioSessionOverrideAudioRoute_None: u32 = 0;
pub const anon1732_AudioSessionOverrideAudioRoute_Speaker: u32 = 1936747378;

pub const anon2052 = u32;
pub const anon2052_AudioSessionRouteChangeReason_Unknown: u32 = 0;
pub const anon2052_AudioSessionRouteChangeReason_NewDeviceAvailable: u32 = 1;
pub const anon2052_AudioSessionRouteChangeReason_OldDeviceUnavailable: u32 = 2;
pub const anon2052_AudioSessionRouteChangeReason_CategoryChange: u32 = 3;
pub const anon2052_AudioSessionRouteChangeReason_Override: u32 = 4;
pub const anon2052_AudioSessionRouteChangeReason_WakeFromSleep: u32 = 6;
pub const anon2052_AudioSessionRouteChangeReason_NoSuitableRouteForCategory: u32 = 7;
pub const anon2052_AudioSessionRouteChangeReason_RouteConfigurationChange: u32 = 8;

pub const anon3242 = u32;
pub const anon3242_AudioSessionInterruptionType_ShouldResume: u32 = 1769108333;
pub const anon3242_AudioSessionInterruptionType_ShouldNotResume: u32 = 561148781;

pub const SessionInterruptionType = objc.UInt32;

pub const anon3562 = u32;
pub const anon3562_AudioSessionMode_Default: u32 = 1684434036;
pub const anon3562_AudioSessionMode_VoiceChat: u32 = 1986225012;
pub const anon3562_AudioSessionMode_VideoRecording: u32 = 1987208036;
pub const anon3562_AudioSessionMode_Measurement: u32 = 1836281204;
pub const anon3562_AudioSessionMode_GameChat: u32 = 1735222132;

pub const anon5552 = u32;
pub const anon5552_AudioSessionProperty_PreferredHardwareSampleRate: u32 = 1752658802;
pub const anon5552_AudioSessionProperty_PreferredHardwareIOBufferDuration: u32 = 1768907364;
pub const anon5552_AudioSessionProperty_AudioCategory: u32 = 1633902964;
pub const anon5552_AudioSessionProperty_AudioRouteChange: u32 = 1919902568;
pub const anon5552_AudioSessionProperty_CurrentHardwareSampleRate: u32 = 1667789682;
pub const anon5552_AudioSessionProperty_CurrentHardwareInputNumberChannels: u32 = 1667787107;
pub const anon5552_AudioSessionProperty_CurrentHardwareOutputNumberChannels: u32 = 1667788643;
pub const anon5552_AudioSessionProperty_CurrentHardwareOutputVolume: u32 = 1667788662;
pub const anon5552_AudioSessionProperty_CurrentHardwareInputLatency: u32 = 1667853428;
pub const anon5552_AudioSessionProperty_CurrentHardwareOutputLatency: u32 = 1668246644;
pub const anon5552_AudioSessionProperty_CurrentHardwareIOBufferDuration: u32 = 1667785316;
pub const anon5552_AudioSessionProperty_OtherAudioIsPlaying: u32 = 1869899890;
pub const anon5552_AudioSessionProperty_OverrideAudioRoute: u32 = 1870033508;
pub const anon5552_AudioSessionProperty_AudioInputAvailable: u32 = 1634296182;
pub const anon5552_AudioSessionProperty_ServerDied: u32 = 1684628836;
pub const anon5552_AudioSessionProperty_OtherMixableAudioShouldDuck: u32 = 1685414763;
pub const anon5552_AudioSessionProperty_OverrideCategoryMixWithOthers: u32 = 1668114808;
pub const anon5552_AudioSessionProperty_OverrideCategoryDefaultToSpeaker: u32 = 1668509803;
pub const anon5552_AudioSessionProperty_OverrideCategoryEnableBluetoothInput: u32 = 1667394677;
pub const anon5552_AudioSessionProperty_InterruptionType: u32 = 1954115685;
pub const anon5552_AudioSessionProperty_Mode: u32 = 1836016741;
pub const anon5552_AudioSessionProperty_InputSources: u32 = 1936876403;
pub const anon5552_AudioSessionProperty_OutputDestinations: u32 = 1685288051;
pub const anon5552_AudioSessionProperty_InputSource: u32 = 1769173603;
pub const anon5552_AudioSessionProperty_OutputDestination: u32 = 1868854132;
pub const anon5552_AudioSessionProperty_InputGainAvailable: u32 = 1768382838;
pub const anon5552_AudioSessionProperty_InputGainScalar: u32 = 1768387427;
pub const anon5552_AudioSessionProperty_AudioRouteDescription: u32 = 1668440434;

pub const SessionInterruptionListener = ?*const fn (?*anyopaque, objc.UInt32) callconv(.C) void;

pub const SessionPropertyListener = ?*const fn (
    ?*anyopaque,
    SessionPropertyID,
    objc.UInt32,
    ?*const anyopaque,
) callconv(.C) void;

extern "AudioToolbox" fn AudioSessionInitialize(
    inRunLoop: core_foundation.RunLoopRef,
    inRunLoopMode: core_foundation.StringRef,
    inInterruptionListener: SessionInterruptionListener,
    inClientData: ?*anyopaque,
) callconv(.C) objc.OSStatus;
pub const sessionInitialize = AudioSessionInitialize;

extern "AudioToolbox" fn AudioSessionSetActive(active: objc.Boolean) callconv(.C) objc.OSStatus;
pub const sessionSetActive = AudioSessionSetActive;

pub const anon6822 = u32;
pub const anon6822_AudioSessionSetActiveFlag_NotifyOthersOnDeactivation: u32 = 1;

extern "AudioToolbox" fn AudioSessionSetActiveWithFlags(active: objc.Boolean, inFlags: objc.UInt32) callconv(.C) objc.OSStatus;
pub const sessionSetActiveWithFlags = AudioSessionSetActiveWithFlags;

extern "AudioToolbox" fn AudioSessionGetProperty(inID: SessionPropertyID, ioDataSize: ?*objc.UInt32, outData: ?*anyopaque) callconv(.C) objc.OSStatus;
pub const sessionGetProperty = AudioSessionGetProperty;

extern "AudioToolbox" fn AudioSessionSetProperty(inID: SessionPropertyID, inDataSize: objc.UInt32, inData: ?*const anyopaque) callconv(.C) objc.OSStatus;
pub const sessionSetProperty = AudioSessionSetProperty;

extern "AudioToolbox" fn AudioSessionGetPropertySize(inID: SessionPropertyID, outDataSize: ?*objc.UInt32) callconv(.C) objc.OSStatus;
pub const sessionGetPropertySize = AudioSessionGetPropertySize;

extern "AudioToolbox" fn AudioSessionAddPropertyListener(inID: SessionPropertyID, inProc: SessionPropertyListener, inClientData: ?*anyopaque) callconv(.C) objc.OSStatus;
pub const sessionAddPropertyListener = AudioSessionAddPropertyListener;

extern "AudioToolbox" fn AudioSessionRemovePropertyListener(inID: SessionPropertyID) callconv(.C) objc.OSStatus;
pub const sessionRemovePropertyListener = AudioSessionRemovePropertyListener;

extern "AudioToolbox" fn AudioSessionRemovePropertyListenerWithUserData(inID: SessionPropertyID, inProc: SessionPropertyListener, inClientData: ?*anyopaque) callconv(.C) objc.OSStatus;
pub const sessionRemovePropertyListenerWithUserData = AudioSessionRemovePropertyListenerWithUserData;

pub const anon8372 = u32;
pub const anon8372_AudioSessionCategory_UserInterfaceSoundEffects: u32 = 1969841784;
pub const anon8372_AudioSessionCategory_LiveAudio: u32 = 1818850917;

pub const anon8482 = u32;
pub const anon8482_AudioSessionProperty_AudioRoute: u32 = 1919907188;

pub extern "AudioToolbox" fn GetNameFromSoundBank(inSoundBankRef: ?*const core_services.FSRef, outName: ?*core_foundation.StringRef) callconv(.C) objc.OSStatus;

pub extern "AudioToolbox" fn CopyNameFromSoundBank(inURL: core_foundation.URLRef, outName: ?*core_foundation.StringRef) callconv(.C) objc.OSStatus;

pub extern "AudioToolbox" fn CopyInstrumentInfoFromSoundBank(inURL: core_foundation.URLRef, outInstrumentInfo: ?*core_foundation.ArrayRef) callconv(.C) objc.OSStatus;
