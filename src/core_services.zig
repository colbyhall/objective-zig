// THIS FILE IS AUTOGENERATED. MODIFICATIONS WILL NOT BE MAINTAINED.

const std = @import("std");
const objc = @import("objc.zig"); // Objective-C Runtime in zig.
const core_foundation = @import("core_foundation.zig"); // Framework dependency CoreFoundation.
const disk_arbitration = @import("disk_arbitration.zig"); // Framework dependency DiskArbitration.
const security = @import("security.zig"); // Framework dependency Security.

pub const anon5721 = enum(u32) {
    kPEFExpSymClassShift = 24,
    kPEFExpSymNameOffsetMask = 16777215,
    kPEFExpSymMaxNameOffset = 16777215,
};

pub const anon1061 = enum(u32) {
    kIconFamilyType = 1768124019,
};

pub const FSRef = extern struct {
    hidden: [80]objc.UInt8,
};

pub const anon1231 = enum(u32) {
    kWriteReference = 0,
    kReadReference = 1,
    kFetchReference = 2,
    writeReference = 0,
    readReference = 1,
    fetchReference = 2,
};

pub const anon741 = enum(u32) {
    fPositive = 0,
    fNegative = 1,
    fZero = 2,
};

pub const anon1211 = enum(u32) {
    typeWhoseDescriptor = 2003332979,
    formWhose = 2003332979,
    typeWhoseRange = 2003988071,
    keyAEWhoseRangeStart = 2004055154,
    keyAEWhoseRangeStop = 2004055152,
    keyAEIndex = 1802069112,
    keyAETest = 1802793844,
};

pub const anon2441 = enum(objc.OSType) {
    kAESetPosition = 1886352238,
    kAEShadow = 1936220516,
    kAEShowClipboard = 1936221036,
    kAEShutDown = 1936225652,
    kAESleep = 1936483696,
    kAESmallCaps = 1936548720,
    kAESpecialClassProperties = 1665147681,
    kAEStrikethrough = 1937011307,
    kAESubscript = 1935831907,
    kAESuperscript = 1936749411,
    kAETableSuite = 1952607347,
    kAETextSuite = 1413830740,
    kAETransactionTerminated = 1953788525,
    kAEUnderline = 1970168940,
    kAEUndo = 1970168943,
    kAEWholeWordEquals = 2004313457,
    kAEYes = 2036691744,
    kAEZoom = 2054123373,
};

pub const anon231 = enum(objc.OSStatus) {
    kLSNo32BitEnvironmentErr = -10386,
    kLSMalformedLocErr = -10400,
    kLSAppInTrashErr = -10660,
    kLSExecutableIncorrectFormat = -10661,
    kLSAttributeNotFoundErr = -10662,
    kLSAttributeNotSettableErr = -10663,
    kLSIncompatibleApplicationVersionErr = -10664,
    kLSNoRosettaEnvironmentErr = -10665,
    kLSGarbageCollectionUnsupportedErr = -10666,
    kLSUnknownErr = -10810,
    kLSNotAnApplicationErr = -10811,
    kLSNotInitializedErr = -10812,
    kLSDataUnavailableErr = -10813,
    kLSApplicationNotFoundErr = -10814,
    kLSUnknownTypeErr = -10815,
    kLSDataTooOldErr = -10816,
    kLSDataErr = -10817,
    kLSLaunchInProgressErr = -10818,
    kLSNotRegisteredErr = -10819,
    kLSAppDoesNotClaimTypeErr = -10820,
    kLSAppDoesNotSupportSchemeWarning = -10821,
    kLSServerCommunicationErr = -10822,
    kLSCannotSetInfoErr = -10823,
    kLSNoRegistrationInfoErr = -10824,
    kLSIncompatibleSystemVersionErr = -10825,
    kLSNoLaunchPermissionErr = -10826,
    kLSNoExecutableErr = -10827,
    kLSNoClassicEnvironmentErr = -10828,
    kLSMultipleSessionsNotSupportedErr = -10829,
};

pub const anon651 = enum(u32) {
    kIdleKCEvent = 0,
    kLockKCEvent = 1,
    kUnlockKCEvent = 2,
    kAddKCEvent = 3,
    kDeleteKCEvent = 4,
    kUpdateKCEvent = 5,
    kPasswordChangedKCEvent = 6,
    kSystemKCEvent = 8,
    kDefaultChangedKCEvent = 9,
    kDataAccessKCEvent = 10,
    kKeychainListChangedKCEvent = 11,
};

pub const anon1141 = enum(u32) {
    kUCKeyStateEntryTerminalFormat = 1,
    kUCKeyStateEntryRangeFormat = 2,
};

pub const anon271 = enum(i32) {
    paramErr = -50,
    noHardwareErr = -200,
    notEnoughHardwareErr = -201,
    userCanceledErr = -128,
    qErr = -1,
    vTypErr = -2,
    corErr = -3,
    unimpErr = -4,
    SlpTypeErr = -5,
    seNoDB = -8,
    controlErr = -17,
    statusErr = -18,
    readErr = -19,
    writErr = -20,
    badUnitErr = -21,
    unitEmptyErr = -22,
    openErr = -23,
    closErr = -24,
    dRemovErr = -25,
    dInstErr = -26,
};

pub const anon371 = enum(objc.OSType) {
    cAEList = 1818850164,
    cApplication = 1667330160,
    cArc = 1667330659,
    cBoolean = 1651470188,
    cCell = 1667458412,
    cChar = 1667784992,
    cColorTable = 1668051572,
    cColumn = 1667460972,
    cDocument = 1685021557,
    cDrawingArea = 1667527287,
    cEnumeration = 1701737837,
    cFile = 1718185061,
    cFixed = 1718188132,
    cFixedPoint = 1718644340,
    cFixedRectangle = 1718772596,
    cGraphicLine = 1735158126,
    cGraphicObject = 1667723106,
    cGraphicShape = 1667724136,
    cGraphicText = 1667724408,
    cGroupedGraphic = 1668311395,
};

pub const anon521 = enum(u32) {
    kTECAvailableEncodingsResType = 1668703598,
    kTECAvailableSniffersResType = 1668707174,
    kTECSubTextEncodingsResType = 1668707170,
    kTECConversionInfoResType = 1668704614,
    kTECMailEncodingsResType = 1668705644,
    kTECWebEncodingsResType = 1668708194,
    kTECInternetNamesResType = 1668705645,
};

pub const anon611 = enum(u32) {
    kLarge1BitMask = 1229147683,
    kLarge4BitData = 1768123444,
    kLarge8BitData = 1768123448,
    kLarge32BitData = 1768698674,
    kLarge8BitMask = 1815637355,
    kSmall1BitMask = 1768125219,
    kSmall4BitData = 1768125236,
    kSmall8BitData = 1768125240,
    kSmall32BitData = 1769157426,
    kSmall8BitMask = 1933077867,
    kMini1BitMask = 1768123683,
    kMini4BitData = 1768123700,
    kMini8BitData = 1768123704,
};

pub const CustomBadgeResource = extern struct {
    version: objc.SInt16,
    customBadgeResourceID: objc.SInt16,
    customBadgeType: objc.OSType,
    customBadgeCreator: objc.OSType,
    windowBadgeType: objc.OSType,
    windowBadgeCreator: objc.OSType,
    overrideType: objc.OSType,
    overrideCreator: objc.OSType,
};

pub const CustomBadgeResourcePtr = ?*CustomBadgeResource;

pub const CustomBadgeResourceHandle = ?*CustomBadgeResourcePtr;

pub const anon931 = enum(u32) {
    OverallAct = 0,
    UsrActivity = 1,
    NetActivity = 2,
    HDActivity = 3,
    IdleActivity = 4,
};

pub const RoutingResourceEntry = extern struct {
    creator: objc.OSType,
    fileType: objc.OSType,
    targetFolder: objc.OSType,
    destinationFolder: objc.OSType,
    reservedField: objc.OSType,
};

pub const RoutingResourcePtr = ?*RoutingResourceEntry;

pub const RoutingResourceHandle = ?*RoutingResourcePtr;

pub const anon1271 = enum(u32) {
    kSystemFolderAliasType = 1717662585,
    kAppleMenuFolderAliasType = 1717657965,
    kStartupFolderAliasType = 1717662580,
    kPrintMonitorDocsFolderAliasType = 1717661806,
    kPreferencesFolderAliasType = 1717661798,
    kControlPanelFolderAliasType = 1717658484,
    kExtensionFolderAliasType = 1717659000,
};

pub const anon1381 = enum(u32) {
    shortDate = 0,
    longDate = 1,
    abbrevDate = 2,
};

pub const anon1491 = enum(u32) {
    kCSIdentityFlagNone = 0,
    kCSIdentityFlagHidden = 1,
};

pub const anon1761 = enum(u32) {
    kClipboardIcon = 1129072976,
    kClippingUnknownTypeIcon = 1668051061,
    kClippingPictureTypeIcon = 1668051056,
    kClippingTextTypeIcon = 1668051060,
    kClippingSoundTypeIcon = 1668051059,
    kDesktopIcon = 1684370283,
    kFinderIcon = 1179534418,
    kComputerIcon = 1919905652,
    kFontSuitcaseIcon = 1179011404,
    kFullTrashIcon = 1718907496,
    kGenericApplicationIcon = 1095782476,
    kGenericCDROMIcon = 1667523698,
    kGenericControlPanelIcon = 1095782467,
    kGenericControlStripModuleIcon = 1935959414,
    kGenericComponentIcon = 1953001063,
    kGenericDeskAccessoryIcon = 1095782468,
    kGenericDocumentIcon = 1685021557,
    kGenericEditionFileIcon = 1701082214,
    kGenericExtensionIcon = 1229867348,
    kGenericFileServerIcon = 1936881266,
    kGenericFontIcon = 1717987692,
    kGenericFontScalerIcon = 1935895666,
    kGenericFloppyIcon = 1718382713,
    kGenericHardDiskIcon = 1751413611,
    kGenericIDiskIcon = 1768190827,
    kGenericRemovableMediaIcon = 1919774582,
    kGenericMoverObjectIcon = 1836021362,
    kGenericPCCardIcon = 1885564259,
    kGenericPreferencesIcon = 1886545254,
    kGenericQueryDocumentIcon = 1902473849,
    kGenericRAMDiskIcon = 1918987620,
    kGenericSharedLibaryIcon = 1936223330,
    kGenericStationeryIcon = 1935961955,
    kGenericSuitcaseIcon = 1937074548,
    kGenericURLIcon = 1735750252,
    kGenericWORMIcon = 2003792493,
    kInternationalResourcesIcon = 1768319340,
    kKeyboardLayoutIcon = 1801873772,
    kSoundFileIcon = 1936091500,
    kSystemSuitcaseIcon = 2054388083,
    kTrashIcon = 1953657704,
    kTrueTypeFontIcon = 1952868716,
    kTrueTypeFlatFontIcon = 1936092788,
    kTrueTypeMultiFlatFontIcon = 1953784678,
    kUserIDiskIcon = 1969517419,
    kUnknownFSObjectIcon = 1970169459,
    kInternationResourcesIcon = 1768319340,
};

pub const anon1981 = enum(u32) {
    kSecOptionReserved = 255,
    kCertUsageShift = 8,
    kCertUsageSigningAdd = 256,
    kCertUsageSigningAskAndAdd = 512,
    kCertUsageVerifyAdd = 1024,
    kCertUsageVerifyAskAndAdd = 2048,
    kCertUsageEncryptAdd = 4096,
    kCertUsageEncryptAskAndAdd = 8192,
    kCertUsageDecryptAdd = 16384,
    kCertUsageDecryptAskAndAdd = 32768,
    kCertUsageKeyExchAdd = 65536,
    kCertUsageKeyExchAskAndAdd = 131072,
    kCertUsageRootAdd = 262144,
    kCertUsageRootAskAndAdd = 524288,
    kCertUsageSSLAdd = 1048576,
    kCertUsageSSLAskAndAdd = 2097152,
    kCertUsageAllAdd = 2147483392,
};

pub const anon2131 = enum(u32) {
    kFirstMagicBusyFiletype = 1652193568,
    kLastMagicBusyFiletype = 1652193599,
};

pub const FileInfo = extern struct {
    fileType: objc.OSType,
    fileCreator: objc.OSType,
    finderFlags: objc.UInt16,
    location: objc.Point,
    reservedField: objc.UInt16,
};

pub const FolderInfo = extern struct {
    windowBounds: objc.Rect,
    finderFlags: objc.UInt16,
    location: objc.Point,
    reservedField: objc.UInt16,
};

pub const ExtendedFileInfo = extern struct {
    reserved1: [4]objc.SInt16,
    extendedFinderFlags: objc.UInt16,
    reserved2: objc.SInt16,
    putAwayFolderID: objc.SInt32,
};

pub const ExtendedFolderInfo = extern struct {
    scrollPosition: objc.Point,
    reserved1: objc.SInt32,
    extendedFinderFlags: objc.UInt16,
    reserved2: objc.SInt16,
    putAwayFolderID: objc.SInt32,
};

pub const FInfo = extern struct {
    fdType: objc.OSType,
    fdCreator: objc.OSType,
    fdFlags: objc.UInt16,
    fdLocation: objc.Point,
    fdFldr: objc.SInt16,
};

pub const FXInfo = extern struct {
    fdIconID: objc.SInt16,
    fdReserved: [3]objc.SInt16,
    fdScript: objc.SInt8,
    fdXFlags: objc.SInt8,
    fdComment: objc.SInt16,
    fdPutAway: objc.SInt32,
};

pub const DInfo = extern struct {
    frRect: objc.Rect,
    frFlags: objc.UInt16,
    frLocation: objc.Point,
    frView: objc.SInt16,
};

pub const DXInfo = extern struct {
    frScroll: objc.Point,
    frOpenChain: objc.SInt32,
    frScript: objc.SInt8,
    frXFlags: objc.SInt8,
    frComment: objc.SInt16,
    frPutAway: objc.SInt32,
};

extern "CoreServices" fn FixRatio(numer: i16, denom: i16) callconv(.C) objc.Fixed;
pub const fixRatio = FixRatio;

extern "CoreServices" fn FixMul(a: objc.Fixed, b: objc.Fixed) callconv(.C) objc.Fixed;
pub const fixMul = FixMul;

extern "CoreServices" fn FixRound(x: objc.Fixed) callconv(.C) i16;
pub const fixRound = FixRound;

extern "CoreServices" fn Fix2Frac(x: objc.Fixed) callconv(.C) objc.Fract;
pub const fix2Frac = Fix2Frac;

extern "CoreServices" fn Fix2Long(x: objc.Fixed) callconv(.C) objc.SInt32;
pub const fix2Long = Fix2Long;

extern "CoreServices" fn Long2Fix(x: objc.SInt32) callconv(.C) objc.Fixed;
pub const long2Fix = Long2Fix;

extern "CoreServices" fn Frac2Fix(x: objc.Fract) callconv(.C) objc.Fixed;
pub const frac2Fix = Frac2Fix;

extern "CoreServices" fn FracMul(x: objc.Fract, y: objc.Fract) callconv(.C) objc.Fract;
pub const fracMul = FracMul;

extern "CoreServices" fn FixDiv(x: objc.Fixed, y: objc.Fixed) callconv(.C) objc.Fixed;
pub const fixDiv = FixDiv;

extern "CoreServices" fn FracDiv(x: objc.Fract, y: objc.Fract) callconv(.C) objc.Fract;
pub const fracDiv = FracDiv;

extern "CoreServices" fn FracSqrt(x: objc.Fract) callconv(.C) objc.Fract;
pub const fracSqrt = FracSqrt;

extern "CoreServices" fn FracSin(x: objc.Fixed) callconv(.C) objc.Fract;
pub const fracSin = FracSin;

extern "CoreServices" fn FracCos(x: objc.Fixed) callconv(.C) objc.Fract;
pub const fracCos = FracCos;

extern "CoreServices" fn FixATan2(x: objc.SInt32, y: objc.SInt32) callconv(.C) objc.Fixed;
pub const fixATan2 = FixATan2;

extern "CoreServices" fn Frac2X(x: objc.Fract) callconv(.C) f64;
pub const frac2X = Frac2X;

extern "CoreServices" fn Fix2X(x: objc.Fixed) callconv(.C) f64;
pub const fix2X = Fix2X;

extern "CoreServices" fn X2Fix(x: f64) callconv(.C) objc.Fixed;
pub const x2Fix = X2Fix;

extern "CoreServices" fn X2Frac(x: f64) callconv(.C) objc.Fract;
pub const x2Frac = X2Frac;

extern "CoreServices" fn WideCompare(target: ?*objc.wide, source: ?*objc.wide) callconv(.C) i16;
pub const wideCompare = WideCompare;

extern "CoreServices" fn WideAdd(target: ?*objc.wide, source: ?*objc.wide) callconv(.C) ?*objc.wide;
pub const wideAdd = WideAdd;

extern "CoreServices" fn WideSubtract(target: ?*objc.wide, source: ?*objc.wide) callconv(.C) ?*objc.wide;
pub const wideSubtract = WideSubtract;

extern "CoreServices" fn WideNegate(target: ?*objc.wide) callconv(.C) ?*objc.wide;
pub const wideNegate = WideNegate;

extern "CoreServices" fn WideShift(target: ?*objc.wide, shift: objc.SInt32) callconv(.C) ?*objc.wide;
pub const wideShift = WideShift;

extern "CoreServices" fn WideSquareRoot(source: ?*objc.wide) callconv(.C) objc.UInt32;
pub const wideSquareRoot = WideSquareRoot;

extern "CoreServices" fn WideMultiply(multiplicand: objc.SInt32, multiplier: objc.SInt32, target: ?*objc.wide) callconv(.C) ?*objc.wide;
pub const wideMultiply = WideMultiply;

extern "CoreServices" fn WideDivide(dividend: ?*objc.wide, divisor: objc.SInt32, remainder: ?*objc.SInt32) callconv(.C) objc.SInt32;
pub const wideDivide = WideDivide;

extern "CoreServices" fn WideWideDivide(dividend: ?*objc.wide, divisor: objc.SInt32, remainder: ?*objc.SInt32) callconv(.C) ?*objc.wide;
pub const wideWideDivide = WideWideDivide;

extern "CoreServices" fn WideBitShift(target: ?*objc.wide, shift: objc.SInt32) callconv(.C) ?*objc.wide;
pub const wideBitShift = WideBitShift;

extern "CoreServices" fn UnsignedFixedMulDiv(value: objc.UnsignedFixed, multiplier: objc.UnsignedFixed, divisor: objc.UnsignedFixed) callconv(.C) objc.UnsignedFixed;
pub const unsignedFixedMulDiv = UnsignedFixedMulDiv;

pub const anon311 = enum(u32) {
    itlcShowIcon = 7,
    itlcDualCaret = 6,
    itlcSysDirection = 15,
};

pub const anon391 = enum(u32) {
    kAEUTHasReturningParam = 31,
    kAEUTOptional = 15,
    kAEUTlistOfItems = 14,
    kAEUTEnumerated = 13,
    kAEUTReadWrite = 12,
    kAEUTChangesState = 12,
    kAEUTTightBindingFunction = 12,
    kAEUTEnumsAreTypes = 11,
    kAEUTEnumListIsExclusive = 10,
    kAEUTReplyIsReference = 9,
    kAEUTDirectParamIsReference = 9,
    kAEUTParamIsReference = 9,
    kAEUTPropertyIsReference = 9,
    kAEUTNotDirectParamIsTarget = 8,
    kAEUTParamIsTarget = 8,
    kAEUTApostrophe = 3,
    kAEUTFeminine = 2,
    kAEUTMasculine = 1,
    kAEUTPlural = 0,
};

pub const anon441 = enum(u32) {
    resSysRefBit = 7,
    resSysHeapBit = 6,
    resPurgeableBit = 5,
    resLockedBit = 4,
    resProtectedBit = 3,
    resPreloadBit = 2,
    resChangedBit = 1,
};

pub const anon501 = enum(i32) {
    kGenericDocumentIconResource = -4000,
    kGenericStationeryIconResource = -3985,
    kGenericEditionFileIconResource = -3989,
    kGenericApplicationIconResource = -3996,
    kGenericDeskAccessoryIconResource = -3991,
    kGenericFolderIconResource = -3999,
    kPrivateFolderIconResource = -3994,
    kFloppyIconResource = -3998,
    kTrashIconResource = -3993,
    kGenericRAMDiskIconResource = -3988,
    kGenericCDROMIconResource = -3987,
};

pub const anon711 = enum(DescType) {
    kCoreEventClass = 1634039412,
};

pub const anon781 = enum(u32) {
    large1BitMask = 1229147683,
    large4BitData = 1768123444,
    large8BitData = 1768123448,
    small1BitMask = 1768125219,
    small4BitData = 1768125236,
    small8BitData = 1768125240,
    mini1BitMask = 1768123683,
    mini4BitData = 1768123700,
    mini8BitData = 1768123704,
};

pub const DateOrders = objc.SInt8;

pub const anon881 = enum(DescType) {
    keyAERestoreAppState = 1920169071,
};

pub const OffPair = extern struct {
    offFirst: i16,
    offSecond: i16,
};

pub const OffsetTable = [3]OffPair;

pub const Intl0Rec = extern struct {
    decimalPt: i8,
    thousSep: i8,
    listSep: i8,
    currSym1: i8,
    currSym2: i8,
    currSym3: i8,
    currFmt: objc.UInt8,
    dateOrder: objc.UInt8,
    shrtDateFmt: objc.UInt8,
    dateSep: i8,
    timeCycle: objc.UInt8,
    timeFmt: objc.UInt8,
    mornStr: [4]i8,
    eveStr: [4]i8,
    timeSep: i8,
    time1Suff: i8,
    time2Suff: i8,
    time3Suff: i8,
    time4Suff: i8,
    time5Suff: i8,
    time6Suff: i8,
    time7Suff: i8,
    time8Suff: i8,
    metricSys: objc.UInt8,
    intl0Vers: i16,
};

pub const Intl0Ptr = ?*Intl0Rec;

pub const Intl0Hndl = ?*Intl0Ptr;

pub const Intl1Rec = extern struct {
    days: [7]objc.Str15,
    months: [12]objc.Str15,
    suppressDay: objc.UInt8,
    lngDateFmt: objc.UInt8,
    dayLeading0: objc.UInt8,
    abbrLen: objc.UInt8,
    st0: [4]i8,
    st1: [4]i8,
    st2: [4]i8,
    st3: [4]i8,
    st4: [4]i8,
    intl1Vers: i16,
    localRtn: [1]i16,
};

pub const Intl1Ptr = ?*Intl1Rec;

pub const Intl1Hndl = ?*Intl1Ptr;

pub const Itl1ExtRec = extern struct {
    base: Intl1Rec,
    version: i16,
    format: i16,
    calendarCode: i16,
    extraDaysTableOffset: objc.SInt32,
    extraDaysTableLength: objc.SInt32,
    extraMonthsTableOffset: objc.SInt32,
    extraMonthsTableLength: objc.SInt32,
    abbrevDaysTableOffset: objc.SInt32,
    abbrevDaysTableLength: objc.SInt32,
    abbrevMonthsTableOffset: objc.SInt32,
    abbrevMonthsTableLength: objc.SInt32,
    extraSepsTableOffset: objc.SInt32,
    extraSepsTableLength: objc.SInt32,
    tables: [1]i16,
};

pub const UntokenTable = extern struct {
    len: i16,
    lastToken: i16,
    index: [256]i16,
};

pub const UntokenTablePtr = ?*UntokenTable;

pub const UntokenTableHandle = ?*UntokenTablePtr;

pub const WideChar = extern union {
    a: anon2083,
    b: i16,
};

pub const anon2083 = extern struct {
    lo: i8,
    hi: i8,
};

pub const WideCharArr = extern struct {
    size: i16,
    data: [10]WideChar,
};

pub const NumberParts = extern struct {
    version: i16,
    data: [31]WideChar,
    pePlus: WideCharArr,
    peMinus: WideCharArr,
    peMinusPlus: WideCharArr,
    altNumTable: WideCharArr,
    reserved: [20]i8,
};

pub const NumberPartsPtr = ?*NumberParts;

pub const Itl4Rec = extern struct {
    flags: i16,
    resourceType: objc.SInt32,
    resourceNum: i16,
    version: i16,
    resHeader1: objc.SInt32,
    resHeader2: objc.SInt32,
    numTables: i16,
    mapOffset: objc.SInt32,
    strOffset: objc.SInt32,
    fetchOffset: objc.SInt32,
    unTokenOffset: objc.SInt32,
    defPartsOffset: objc.SInt32,
    resOffset6: objc.SInt32,
    resOffset7: objc.SInt32,
    resOffset8: objc.SInt32,
};

pub const Itl4Ptr = ?*Itl4Rec;

pub const Itl4Handle = ?*Itl4Ptr;

pub const NItl4Rec = extern struct {
    flags: i16,
    resourceType: objc.SInt32,
    resourceNum: i16,
    version: i16,
    format: i16,
    resHeader: i16,
    resHeader2: objc.SInt32,
    numTables: i16,
    mapOffset: objc.SInt32,
    strOffset: objc.SInt32,
    fetchOffset: objc.SInt32,
    unTokenOffset: objc.SInt32,
    defPartsOffset: objc.SInt32,
    whtSpListOffset: objc.SInt32,
    resOffset7: objc.SInt32,
    resOffset8: objc.SInt32,
    resLength1: i16,
    resLength2: i16,
    resLength3: i16,
    unTokenLength: i16,
    defPartsLength: i16,
    whtSpListLength: i16,
    resLength7: i16,
    resLength8: i16,
};

pub const NItl4Ptr = ?*NItl4Rec;

pub const NItl4Handle = ?*NItl4Ptr;

pub const TableDirectoryRecord = extern struct {
    tableSignature: objc.OSType,
    reserved: objc.UInt32,
    tableStartOffset: objc.UInt32,
    tableSize: objc.UInt32,
};

pub const Itl5Record = extern struct {
    versionNumber: objc.Fixed,
    numberOfTables: u16,
    reserved: [3]u16,
    tableDirectory: [1]TableDirectoryRecord,
};

pub const RuleBasedTrslRecord = extern struct {
    sourceType: i16,
    targetType: i16,
    formatNumber: i16,
    propertyFlag: i16,
    numberOfRules: i16,
};

pub const ItlcRecord = extern struct {
    itlcSystem: i16,
    itlcReserved: i16,
    itlcFontForce: objc.SInt8,
    itlcIntlForce: objc.SInt8,
    itlcOldKybd: objc.SInt8,
    itlcFlags: objc.SInt8,
    itlcIconOffset: i16,
    itlcIconSide: objc.SInt8,
    itlcIconRsvd: objc.SInt8,
    itlcRegionCode: i16,
    itlcSysFlags: i16,
    itlcReserved4: [32]objc.SInt8,
};

pub const ItlbRecord = extern struct {
    itlbNumber: i16,
    itlbDate: i16,
    itlbSort: i16,
    itlbFlags: i16,
    itlbToken: i16,
    itlbEncoding: i16,
    itlbLang: i16,
    itlbNumRep: objc.SInt8,
    itlbDateRep: objc.SInt8,
    itlbKeys: i16,
    itlbIcon: i16,
};

pub const ItlbExtRecord = extern struct {
    base: ItlbRecord,
    itlbLocalSize: objc.SInt32,
    itlbMonoFond: i16,
    itlbMonoSize: i16,
    itlbPrefFond: i16,
    itlbPrefSize: i16,
    itlbSmallFond: i16,
    itlbSmallSize: i16,
    itlbSysFond: i16,
    itlbSysSize: i16,
    itlbAppFond: i16,
    itlbAppSize: i16,
    itlbHelpFond: i16,
    itlbHelpSize: i16,
    itlbValidStyles: objc.Style,
    itlbAliasStyle: objc.Style,
};

pub const anon341 = enum(u32) {
    kIconServices16PixelDataARGB = 1768108084,
    kIconServices32PixelDataARGB = 1768108085,
    kIconServices48PixelDataARGB = 1768108086,
    kIconServices128PixelDataARGB = 1768108087,
};

pub const anon901 = enum(u32) {
    kOpaqueAnyID = 0,
    kOpaqueProcessID = 1,
    kOpaqueTaskID = 2,
    kOpaqueTimerID = 3,
    kOpaqueQueueID = 4,
    kOpaqueSemaphoreID = 5,
    kOpaqueCriticalRegionID = 6,
    kOpaqueCpuID = 7,
    kOpaqueAddressSpaceID = 8,
    kOpaqueEventID = 9,
    kOpaqueCoherenceID = 10,
    kOpaqueAreaID = 11,
    kOpaqueNotificationID = 12,
    kOpaqueConsoleID = 13,
};

pub const anon951 = enum(u32) {
    smChinese = 2,
    smRussian = 7,
    smLaotian = 22,
    smAmharic = 28,
    smSlavic = 29,
    smEastEurRoman = 29,
    smSindhi = 31,
    smKlingon = 32,
};

pub const anon1121 = enum(u32) {
    langEnglish = 0,
    langFrench = 1,
    langGerman = 2,
    langItalian = 3,
    langDutch = 4,
    langSwedish = 5,
    langSpanish = 6,
    langDanish = 7,
    langPortuguese = 8,
    langNorwegian = 9,
    langHebrew = 10,
    langJapanese = 11,
    langArabic = 12,
    langFinnish = 13,
    langGreek = 14,
    langIcelandic = 15,
    langMaltese = 16,
    langTurkish = 17,
    langCroatian = 18,
    langTradChinese = 19,
    langUrdu = 20,
    langHindi = 21,
    langThai = 22,
    langKorean = 23,
};

pub const anon1391 = enum(u32) {
    langLithuanian = 24,
    langPolish = 25,
    langHungarian = 26,
    langEstonian = 27,
    langLatvian = 28,
    langSami = 29,
    langFaroese = 30,
    langFarsi = 31,
    langPersian = 31,
    langRussian = 32,
    langSimpChinese = 33,
    langFlemish = 34,
    langIrishGaelic = 35,
    langAlbanian = 36,
    langRomanian = 37,
    langCzech = 38,
    langSlovak = 39,
    langSlovenian = 40,
    langYiddish = 41,
    langSerbian = 42,
    langMacedonian = 43,
    langBulgarian = 44,
    langUkrainian = 45,
    langByelorussian = 46,
    langBelorussian = 46,
};

pub const anon1671 = enum(u32) {
    kUnicodeFallbackSequencingMask = 3,
    kUnicodeFallbackInterruptSafeMask = 4,
};

pub const anon1941 = enum(u32) {
    langOriya = 71,
    langMalayalam = 72,
    langKannada = 73,
    langTamil = 74,
    langTelugu = 75,
    langSinhalese = 76,
    langBurmese = 77,
    langKhmer = 78,
    langLao = 79,
    langVietnamese = 80,
    langIndonesian = 81,
    langTagalog = 82,
    langMalayRoman = 83,
    langMalayArabic = 84,
    langAmharic = 85,
    langTigrinya = 86,
    langOromo = 87,
    langSomali = 88,
    langSwahili = 89,
    langKinyarwanda = 90,
    langRuanda = 90,
    langRundi = 91,
    langNyanja = 92,
    langChewa = 92,
    langMalagasy = 93,
    langEsperanto = 94,
};

pub const anon2401 = enum(u32) {
    kGenericFolderIcon = 1718379634,
    kDropFolderIcon = 1684172664,
    kMountedFolderIcon = 1835955300,
    kOpenFolderIcon = 1868983396,
    kOwnedFolderIcon = 1870098020,
    kPrivateFolderIcon = 1886549606,
    kSharedFolderIcon = 1936221804,
};

pub const anon2531 = enum(u32) {
    langUnspecified = 32767,
};

pub const anon2611 = enum(u32) {
    kUserFolderIcon = 1969646692,
    kWorkgroupFolderIcon = 2003201124,
    kGuestUserIcon = 1735750514,
    kUserIcon = 1970496882,
    kOwnerIcon = 1937077106,
    kGroupIcon = 1735554416,
};

pub const anon2891 = enum(u32) {
    verUS = 0,
    verFrance = 1,
    verBritain = 2,
    verGermany = 3,
    verItaly = 4,
    verNetherlands = 5,
    verFlemish = 6,
    verSweden = 7,
    verSpain = 8,
    verDenmark = 9,
    verPortugal = 10,
    verFrCanada = 11,
    verNorway = 12,
    verIsrael = 13,
    verJapan = 14,
    verAustralia = 15,
    verArabic = 16,
    verFinland = 17,
    verFrSwiss = 18,
    verGrSwiss = 19,
    verGreece = 20,
    verIceland = 21,
    verMalta = 22,
    verCyprus = 23,
    verTurkey = 24,
    verYugoCroatian = 25,
};

pub const anon3191 = enum(u32) {
    kAppleScriptBadgeIcon = 1935897200,
    kLockedBadgeIcon = 1818387559,
    kMountedBadgeIcon = 1835164775,
    kSharedBadgeIcon = 1935828071,
    kAliasBadgeIcon = 1633838183,
    kAlertCautionBadgeIcon = 1667392615,
};

pub const anon3291 = enum(u32) {
    kAlertNoteIcon = 1852798053,
    kAlertCautionIcon = 1667331444,
    kAlertStopIcon = 1937010544,
};

pub const anon3611 = enum(u32) {
    kMacRomanianDefaultVariant = 0,
    kMacRomanianCurrencySignVariant = 1,
    kMacRomanianEuroSignVariant = 2,
};

pub const anon4001 = enum(u32) {
    verFrBelgium = 98,
    verUzbek = 99,
    verSingapore = 100,
    verNynorsk = 101,
    verAfrikaans = 102,
    verEsperanto = 103,
    verMarathi = 104,
    verTibetan = 105,
    verNepal = 106,
    verGreenland = 107,
    verIrelandEnglish = 108,
};

pub const anon4271 = enum(u32) {
    kCSIdentityQueryEventSearchPhaseFinished = 1,
    kCSIdentityQueryEventResultsAdded = 2,
    kCSIdentityQueryEventResultsChanged = 3,
    kCSIdentityQueryEventResultsRemoved = 4,
    kCSIdentityQueryEventErrorOccurred = 5,
};

pub const anon4551 = enum(u32) {
    minCountry = 0,
    maxCountry = 108,
};

pub const anon4601 = enum(u32) {
    calGregorian = 0,
    calArabicCivil = 1,
    calArabicLunar = 2,
    calJapanese = 3,
    calJewish = 4,
    calCoptic = 5,
    calPersian = 6,
};

pub const anon4711 = enum(i32) {
    procNotFound = -600,
    memFragErr = -601,
    appModeErr = -602,
    protocolErr = -603,
    hardwareConfigErr = -604,
    appMemFullErr = -605,
    appIsDaemon = -606,
    bufferIsSmall = -607,
    noOutstandingHLE = -608,
    connectionInvalid = -609,
    noUserInteractionAllowed = -610,
};

pub const anon4811 = enum(objc.OSType) {
    pNewElementLoc = 1886283116,
    pPenColor = 1886413676,
    pPenPattern = 1886416993,
    pPenWidth = 1886418788,
    pPixelDepth = 1885630580,
    pPointList = 1886678132,
    pPointSize = 1886679930,
    pProtection = 1886417519,
    pRotation = 1886547828,
    pScale = 1886610284,
    pScript = 1935896692,
    pScriptTag = 1886610292,
    pSelected = 1936026723,
    pSelection = 1936026725,
    pStartAngle = 1885433447,
    pStartPoint = 1886614640,
    pTextColor = 1886681187,
    pTextFont = 1886681190,
    pTextItemDelimiters = 1954047084,
    pTextPointSize = 1886679155,
};

pub const anon5001 = enum(i32) {
    threadBadAppContextErr = -616,
};

pub const anon5251 = enum(u32) {
    smCharFISGreek = 5,
    smCharFISRussian = 6,
    smPunctNormal = 0,
    smPunctNumber = 256,
    smPunctSymbol = 512,
    smPunctBlank = 768,
    smPunctRepeat = 1024,
    smPunctGraphic = 1280,
    smKanaSmall = 256,
    smKanaHardOK = 512,
    smKanaSoftOK = 768,
    smIdeographicLevel1 = 0,
    smIdeographicLevel2 = 256,
    smIdeographicUser = 512,
    smFISClassLvl1 = 0,
    smFISClassLvl2 = 256,
    smFISClassUser = 512,
    smJamoJaeum = 0,
    smJamoBogJaeum = 256,
    smJamoMoeum = 512,
    smJamoBogMoeum = 768,
};

pub const anon5541 = enum(u32) {
    smCharHorizontal = 0,
    smCharVertical = 4096,
    smCharLeft = 0,
    smCharRight = 8192,
    smCharLower = 0,
    smCharUpper = 16384,
    smChar1byte = 0,
    smChar2byte = 32768,
};

pub const anon5671 = enum(u32) {
    kRelativeFolder = 1919249510,
    kRedirectedRelativeFolder = 1920099692,
    kSpecialFolder = 1936745318,
};

pub const anon5801 = enum(u32) {
    kCurrentUserFolderLocation = 1668641638,
};

pub const anon5961 = enum(AEKeyword) {
    keyMenuID = 1835623456,
    keyMenuItem = 1835627629,
    keyCloseAllWindows = 1667331872,
    keyOriginalBounds = 1868721764,
    keyNewBounds = 1851944548,
    keyLocalWhere = 1819764850,
};

pub const anon6131 = enum(i32) {
    iuSystemScript = -1,
    iuCurrentScript = -2,
};

pub const anon6191 = enum(i32) {
    smKeyNextScript = -1,
    smKeySysScript = -2,
    smKeySwapScript = -3,
    smKeyNextKybd = -4,
    smKeySwapKybd = -5,
    smKeyDisableKybds = -6,
    smKeyEnableKybds = -7,
    smKeyToggleInline = -8,
    smKeyToggleDirection = -9,
    smKeyNextInputMethod = -10,
    smKeySwapInputMethod = -11,
    smKeyDisableKybdSwitch = -12,
    smKeySetDirLeftRight = -15,
    smKeySetDirRightLeft = -16,
    smKeyRoman = -17,
};

pub const anon6391 = enum(objc.OSType) {
    kTextServiceClass = 1953724003,
    kUpdateActiveInputArea = 1970300020,
    kShowHideInputWindow = 1936222583,
    kPos2Offset = 1882354548,
    kOffset2Pos = 1936994928,
    kUnicodeNotFromInputMethod = 1970170221,
    kGetSelectedText = 1735686260,
    keyAETSMDocumentRefcon = 1919247971,
    keyAEServerInstance = 1936881257,
    keyAETheData = 1801740660,
    keyAEFixLength = 1718188140,
    keyAEUpdateRange = 1969516135,
    keyAECurrentPoint = 1668312947,
    keyAEBufferSize = 1651861094,
    keyAEMoveView = 1836480119,
    keyAENextBody = 1853383268,
    keyAETSMScriptTag = 1935895655,
    keyAETSMTextFont = 1802795110,
    keyAETSMTextFMFont = 1802795117,
    keyAETSMTextPointSize = 1802793075,
    keyAETSMEventRecord = 1952806516,
    keyAETSMEventRef = 1952806514,
    keyAETextServiceEncoding = 1953719662,
    keyAETextServiceMacEncoding = 1953326446,
    keyAETSMGlyphInfoArray = 1952934241,
    typeTextRange = 1954050670,
    typeComponentInstance = 1668116585,
    typeOffsetArray = 1868980601,
    typeTextRangeArray = 1953653113,
    typeLowLevelEventRecord = 1702261874,
    typeGlyphInfoArray = 1735158113,
    typeEventRef = 1702261350,
    typeText = 1413830740,
};

pub const anon6591 = enum(u32) {
    diaeresisUprY = 217,
    fraction = 218,
    intlCurrency = 219,
    leftSingGuillemet = 220,
    rightSingGuillemet = 221,
    fiLigature = 222,
    flLigature = 223,
    dblDagger = 224,
    centeredDot = 225,
    baseSingQuote = 226,
    baseDblQuote = 227,
    perThousand = 228,
    circumflexUprA = 229,
    circumflexUprE = 230,
    acuteUprA = 231,
    diaeresisUprE = 232,
    graveUprE = 233,
    acuteUprI = 234,
    circumflexUprI = 235,
    diaeresisUprI = 236,
    graveUprI = 237,
    acuteUprO = 238,
    circumflexUprO = 239,
    appleLogo = 240,
    graveUprO = 241,
    acuteUprU = 242,
    circumflexUprU = 243,
    graveUprU = 244,
    dotlessLwrI = 245,
    circumflex = 246,
    tilde = 247,
    macron = 248,
    breveMark = 249,
    overDot = 250,
    ringMark = 251,
    cedilla = 252,
    doubleAcute = 253,
    ogonek = 254,
    hachek = 255,
};

pub const anon7021 = enum(i32) {
    tokenIntl = 4,
    tokenEmpty = -1,
};

pub const anon7081 = enum(u32) {
    tokenUnknown = 0,
    tokenWhite = 1,
    tokenLeftLit = 2,
    tokenRightLit = 3,
    tokenAlpha = 4,
    tokenNumeric = 5,
    tokenNewLine = 6,
    tokenLeftComment = 7,
    tokenRightComment = 8,
    tokenLiteral = 9,
    tokenEscape = 10,
    tokenAltNum = 11,
    tokenRealNum = 12,
    tokenAltReal = 13,
    tokenReserve1 = 14,
    tokenReserve2 = 15,
    tokenLeftParen = 16,
    tokenRightParen = 17,
    tokenLeftBracket = 18,
    tokenRightBracket = 19,
};

pub const anon7311 = enum(u32) {
    gestaltControlStripVersion = 1668511346,
};

pub const anon7541 = enum(u32) {
    tokenNotEqual = 40,
    tokenLessGreat = 41,
    tokenExclamEqual = 42,
    tokenExclam = 43,
    tokenTilde = 44,
    tokenComma = 45,
    tokenPeriod = 46,
    tokenLeft2Quote = 47,
    tokenRight2Quote = 48,
    tokenLeft1Quote = 49,
    tokenRight1Quote = 50,
    token2Quote = 51,
    token1Quote = 52,
    tokenSemicolon = 53,
    tokenPercent = 54,
    tokenCaret = 55,
    tokenUnderline = 56,
    tokenAmpersand = 57,
    tokenAtSign = 58,
    tokenBar = 59,
};

pub const anon8001 = enum(objc.OSType) {
    kFAServerApp = 1936945782,
    kDoFolderActionEvent = 1718578273,
    kFolderActionCode = 1633907822,
    kFolderOpenedEvent = 1718579310,
    kFolderClosedEvent = 1717791855,
    kFolderWindowMovedEvent = 1718839674,
    kFolderItemsAddedEvent = 1718052212,
    kFolderItemsRemovedEvent = 1718382451,
    kItemList = 1718383476,
    kNewSizeParameter = 1718514554,
    kFASuiteCode = 1717658479,
    kFAAttachCommand = 1635018337,
    kFARemoveCommand = 1919772257,
    kFAEditCommand = 1701078625,
    kFAFileParam = 1717657964,
    kFAIndexParam = 1768842360,
};

pub const anon8061 = enum(u32) {
    smWordSelectTable = 0,
    smWordWrapTable = 1,
    smNumberPartsTable = 2,
    smUnTokenTable = 3,
    smWhiteSpaceList = 4,
    iuWordSelectTable = 0,
    iuWordWrapTable = 1,
    iuNumberPartsTable = 2,
    iuUnTokenTable = 3,
    iuWhiteSpaceList = 4,
};

pub const TokenResults = objc.SInt8;

pub const CharByteTable = [256]i8;

pub const ScriptTokenType = i16;

pub const DelimType = [2]ScriptTokenType;

pub const CommentType = [4]ScriptTokenType;

pub const TokenRec = extern struct {
    theToken: ScriptTokenType,
    position: objc.Ptr,
    length: i64,
    stringPosition: objc.StringPtr,
};

pub const TokenRecPtr = ?*TokenRec;

pub const TokenBlock = extern struct {
    source: objc.Ptr,
    sourceLength: i64,
    tokenList: objc.Ptr,
    tokenLength: i64,
    tokenCount: i64,
    stringList: objc.Ptr,
    stringLength: i64,
    stringCount: i64,
    doString: objc.Boolean,
    doAppend: objc.Boolean,
    doAlphanumeric: objc.Boolean,
    doNest: objc.Boolean,
    leftDelims: [2]ScriptTokenType,
    rightDelims: [2]ScriptTokenType,
    leftComment: [4]ScriptTokenType,
    rightComment: [4]ScriptTokenType,
    escapeCode: ScriptTokenType,
    decimalCode: ScriptTokenType,
    itlResource: objc.Handle,
    reserved: [8]i64,
};

pub const TokenBlockPtr = ?*TokenBlock;

pub const anon8701 = enum(i32) {
    smNotInstalled = 0,
    smBadVerb = -1,
    smBadScript = -2,
};

pub const anon8781 = enum(u32) {
    smfShowIcon = 31,
    smfDualCaret = 30,
    smfNameTagEnab = 29,
    smfUseAssocFontInfo = 28,
    smfDisableKeyScriptSync = 27,
};

pub const anon8871 = enum(u32) {
    smfDisableKeyScriptSyncMask = 134217728,
};

pub const anon8921 = enum(u32) {
    smSysScript = 18,
    smKeyScript = 22,
    smKCHRCache = 38,
    smRegionCode = 40,
};

extern "CoreServices" fn GetScriptManagerVariable(selector: i16) callconv(.C) i64;
pub const getScriptManagerVariable = GetScriptManagerVariable;

extern "CoreServices" fn SetScriptManagerVariable(selector: i16, param: i64) callconv(.C) objc.OSErr;
pub const setScriptManagerVariable = SetScriptManagerVariable;

pub const anon10241 = enum(u32) {
    smsfIntellCP = 0,
    smsfSingByte = 1,
    smsfNatCase = 2,
    smsfContext = 3,
    smsfNoForceFont = 4,
    smsfB0Digits = 5,
    smsfAutoInit = 6,
    smsfUnivExt = 7,
    smsfSynchUnstyledTE = 8,
    smsfForms = 13,
    smsfLigatures = 14,
    smsfReverse = 15,
};

pub const anon731 = enum(u32) {
    kResolveAliasFileNoUI = 1,
    kResolveAliasTryFileIDFirst = 2,
};

pub const anon961 = enum(i32) {
    fidNotFound = -1300,
    fidExists = -1301,
    notAFileErr = -1302,
    diffVolErr = -1303,
    catChangedErr = -1304,
    desktopDamagedErr = -1305,
    sameFileErr = -1306,
    badFidErr = -1307,
    notARemountErr = -1308,
    fileBoundsErr = -1309,
    fsDataTooBigErr = -1310,
    volVMBusyErr = -1311,
    badFCBErr = -1327,
    errFSUnknownCall = -1400,
    errFSBadFSRef = -1401,
    errFSBadForkName = -1402,
    errFSBadBuffer = -1403,
    errFSBadForkRef = -1404,
    errFSBadInfoBitmap = -1405,
    errFSMissingCatInfo = -1406,
    errFSNotAFolder = -1407,
    errFSForkNotFound = -1409,
    errFSNameTooLong = -1410,
    errFSMissingName = -1411,
    errFSBadPosMode = -1412,
    errFSBadAllocFlags = -1413,
    errFSNoMoreItems = -1417,
    errFSBadItemCount = -1418,
    errFSBadSearchParams = -1419,
    errFSRefsDifferent = -1420,
    errFSForkExists = -1421,
    errFSBadIteratorFlags = -1422,
    errFSIteratorNotFound = -1423,
    errFSIteratorNotSupported = -1424,
    errFSQuotaExceeded = -1425,
    errFSOperationNotSupported = -1426,
    errFSAttributeNotFound = -1427,
    errFSPropertyNotValid = -1428,
    errFSNotEnoughSpaceForOperation = -1429,
    envNotPresent = -5500,
    envBadVers = -5501,
    envVersTooBig = -5502,
    fontDecError = -64,
    fontNotDeclared = -65,
    fontSubErr = -66,
    fontNotOutlineErr = -32615,
    firstDskErr = -84,
    lastDskErr = -64,
    noDriveErr = -64,
    offLinErr = -65,
    noNybErr = -66,
};

pub const anon1501 = enum(i32) {
    noAdrMkErr = -67,
    dataVerErr = -68,
    badCksmErr = -69,
    badBtSlpErr = -70,
    noDtaMkErr = -71,
    badDCksum = -72,
    badDBtSlp = -73,
    wrUnderrun = -74,
    cantStepErr = -75,
    tk0BadErr = -76,
    initIWMErr = -77,
    twoSideErr = -78,
    spdAdjErr = -79,
    seekErr = -80,
    sectNFErr = -81,
    fmt1Err = -82,
    fmt2Err = -83,
    verErr = -84,
    clkRdErr = -85,
    clkWrErr = -86,
    prWrErr = -87,
    prInitErr = -88,
    rcvrErr = -89,
    breakRecd = -90,
};

pub const anon1771 = enum(i32) {
    noScrapErr = -100,
    noTypeErr = -102,
};

pub const anon2171 = enum(i32) {
    iMemFullErr = -108,
    iIOAbort = -27,
};

pub const anon2241 = enum(i32) {
    resourceInMemory = -188,
    writingPastEnd = -189,
    inputOutOfBounds = -190,
    resNotFound = -192,
    resFNotFound = -193,
    addResFailed = -194,
    addRefFailed = -195,
    rmvResFailed = -196,
    rmvRefFailed = -197,
    resAttrErr = -198,
    mapReadErr = -199,
    CantDecompress = -186,
    badExtResource = -185,
    noMemForPictPlaybackErr = -145,
    rgnOverflowErr = -147,
    rgnTooBigError = -147,
    pixMapTooDeepErr = -148,
    insufficientStackErr = -149,
    nsStackErr = -149,
};

pub const anon2461 = enum(u32) {
    evtNotEnb = 1,
};

pub const anon2511 = enum(u32) {
    kSharingPrivsNotApplicableIcon = 1936223841,
    kSharingPrivsReadOnlyIcon = 1936224879,
    kSharingPrivsReadWriteIcon = 1936224887,
    kSharingPrivsUnknownIcon = 1936225643,
    kSharingPrivsWritableIcon = 2003986804,
};

pub const anon2711 = enum(u32) {
    kLSSharedFileListNoUserInteraction = 1,
    kLSSharedFileListDoNotMountVolumes = 2,
};

pub const anon2861 = enum(u32) {
    kSpecialCase = 15,
};

pub const anon3171 = enum(u32) {
    kUCCollateTypeSourceMask = 255,
    kUCCollateTypeShiftBits = 24,
};

pub const anon3501 = enum(u32) {
    kUCTSDirectionNext = 0,
    kUCTSDirectionPrevious = 1,
};

pub const anon3761 = enum(i32) {
    smResrvErr = -307,
    smUnExBusErr = -308,
    smBLFieldBad = -309,
    smFHBlockRdErr = -310,
    smFHBlkDispErr = -311,
    smDisposePErr = -312,
    smNoBoardSRsrc = -313,
    smGetPRErr = -314,
    smNoBoardId = -315,
    smInitStatVErr = -316,
    smInitTblVErr = -317,
    smNoJmpTbl = -318,
    smReservedSlot = -318,
    smBadBoardId = -319,
    smBusErrTO = -320,
    svTempDisable = -32768,
    svDisabled = -32640,
    smBadRefId = -330,
    smBadsList = -331,
    smReservedErr = -332,
    smCodeRevErr = -333,
};

pub const anon4011 = enum(u32) {
    kIconServicesNormalUsageFlag = 0,
    kIconServicesNoBadgeFlag = 1,
    kIconServicesUpdateIfNeededFlag = 2,
};

pub const anon4231 = enum(i32) {
    notBTree = -410,
    btNoSpace = -413,
    btDupRecErr = -414,
    btRecNotFnd = -415,
    btKeyLenErr = -416,
    btKeyAttrErr = -417,
    unknownInsertModeErr = -20000,
    recordDataTooBigErr = -20001,
    invalidIndexErr = -20002,
};

pub const anon4401 = enum(i32) {
    fsmFFSNotFoundErr = -431,
    fsmBusyFFSErr = -432,
    fsmBadFFSNameErr = -433,
    fsmBadFSDLenErr = -434,
    fsmDuplicateFSIDErr = -435,
    fsmBadFSDVersionErr = -436,
    fsmNoAlternateStackErr = -437,
    fsmUnknownFSMMessageErr = -438,
};

pub const anon4521 = enum(u32) {
    kISOLatinHebrewImplicitOrderVariant = 0,
    kISOLatinHebrewVisualOrderVariant = 1,
    kISOLatinHebrewExplicitOrderVariant = 2,
};

pub const anon4651 = enum(u32) {
    kDOSJapaneseStandardVariant = 0,
    kDOSJapanesePalmVariant = 1,
};

pub const anon4861 = enum(i32) {
    wrongApplicationPlatform = -875,
    appVersionTooOld = -876,
    notAppropriateForClassic = -877,
};

pub const anon4941 = enum(i32) {
    threadTooManyReqsErr = -617,
    threadNotFoundErr = -618,
    threadProtocolErr = -619,
};

pub const anon5051 = enum(i32) {
    notEnoughMemoryErr = -620,
    notHeldErr = -621,
    cannotMakeContiguousErr = -622,
    notLockedErr = -623,
    interruptsMaskedErr = -624,
    cannotDeferErr = -625,
    noMMUErr = -626,
};

pub const anon5161 = enum(i32) {
    vmMorePhysicalThanVirtualErr = -628,
    vmKernelMMUInitErr = -629,
    vmOffErr = -630,
    vmMemLckdErr = -631,
    vmBadDriver = -632,
    vmNoVectorErr = -633,
};

pub const anon5261 = enum(u32) {
    kDeveloperDocsFolderType = 1684303715,
    kDeveloperHelpFolderType = 1684371048,
    kDeveloperFolderType = 1684371046,
    kDeveloperApplicationsFolderType = 1684107376,
};

pub const anon5391 = enum(i32) {
    rcDBNull = -800,
    rcDBValue = -801,
    rcDBError = -802,
    rcDBBadType = -803,
    rcDBBreak = -804,
    rcDBExec = -805,
    rcDBBadSessID = -806,
    rcDBBadSessNum = -807,
    rcDBBadDDEV = -808,
    rcDBAsyncNotSupp = -809,
    rcDBBadAsyncPB = -810,
    rcDBNoHandler = -811,
    rcDBWrongVersion = -812,
    rcDBPackNotInited = -813,
};

pub const anon5581 = enum(i32) {
    hmHelpDisabled = -850,
    hmBalloonAborted = -853,
    hmSameAsLastBalloon = -854,
    hmHelpManagerNotInited = -855,
    hmSkippedBalloon = -857,
    hmWrongVersion = -858,
    hmUnknownHelpType = -859,
    hmOperationUnsupported = -861,
    hmNoBalloonUp = -862,
    hmCloseViewActive = -863,
};

pub const anon5731 = enum(i32) {
    notInitErr = -900,
    nameTypeErr = -902,
    noPortErr = -903,
    noGlobalsErr = -904,
    localOnlyErr = -905,
    destPortErr = -906,
    sessTableErr = -907,
    noSessionErr = -908,
    badReqErr = -909,
    portNameExistsErr = -910,
    noUserNameErr = -911,
    userRejectErr = -912,
    noMachineNameErr = -913,
    noToolboxNameErr = -914,
    noResponseErr = -915,
    portClosedErr = -916,
    sessClosedErr = -917,
    badPortNameErr = -919,
    noDefaultUserErr = -922,
    notLoggedInErr = -923,
    noUserRefErr = -924,
    networkErr = -925,
    noInformErr = -926,
    authFailErr = -927,
    noUserRecErr = -928,
    badServiceMethodErr = -930,
    badLocNameErr = -931,
    guestNotAllowedErr = -932,
};

pub const anon6171 = enum(i32) {
    noMaskFoundErr = -1000,
};

pub const anon6211 = enum(u32) {
    gestaltControlMgrVersion = 1668118130,
};

pub const anon6301 = enum(i32) {
    aspBadVersNum = -1066,
    aspBufTooSmall = -1067,
    aspNoMoreSess = -1068,
    aspNoServers = -1069,
    aspParamErr = -1070,
    aspServerBusy = -1071,
    aspSessClosed = -1072,
    aspSizeErr = -1073,
    aspTooMany = -1074,
    aspNoAck = -1075,
};

pub const anon6431 = enum(i32) {
    reqFailed = -1096,
    tooManyReqs = -1097,
    tooManySkts = -1098,
    badATPSkt = -1099,
    badBuffNum = -1100,
    noRelErr = -1101,
    cbNotFound = -1102,
    noSendResp = -1103,
    noDataArea = -1104,
    reqAborted = -1105,
};

pub const anon6571 = enum(i32) {
    errRefNum = -1280,
    errAborted = -1279,
    errState = -1278,
    errOpening = -1277,
    errAttention = -1276,
    errFwdReset = -1275,
    errDSPQueueSize = -1274,
    errOpenDenied = -1273,
};

pub const anon6741 = enum(i32) {
    errAECoercionFail = -1700,
    errAEDescNotFound = -1701,
    errAECorruptData = -1702,
    errAEWrongDataType = -1703,
    errAENotAEDesc = -1704,
    errAEBadListItem = -1705,
    errAENewerVersion = -1706,
    errAENotAppleEvent = -1707,
    errAEEventNotHandled = -1708,
    errAEReplyNotValid = -1709,
    errAEUnknownSendMode = -1710,
    errAEWaitCanceled = -1711,
    errAETimeout = -1712,
    errAENoUserInteraction = -1713,
    errAENotASpecialFunction = -1714,
    errAEParamMissed = -1715,
    errAEUnknownAddressType = -1716,
    errAEHandlerNotFound = -1717,
    errAEReplyNotArrived = -1718,
    errAEIllegalIndex = -1719,
    errAEImpossibleRange = -1720,
    errAEWrongNumberArgs = -1721,
    errAEAccessorNotFound = -1723,
    errAENoSuchLogical = -1725,
    errAEBadTestKey = -1726,
    errAENotAnObjSpec = -1727,
    errAENoSuchObject = -1728,
    errAENegativeCount = -1729,
    errAEEmptyListContainer = -1730,
    errAEUnknownObjectType = -1731,
    errAERecordingIsAlreadyOn = -1732,
    errAEReceiveTerminate = -1733,
    errAEReceiveEscapeCurrent = -1734,
    errAEEventFiltered = -1735,
    errAEDuplicateHandler = -1736,
    errAEStreamBadNesting = -1737,
    errAEStreamAlreadyConverted = -1738,
    errAEDescIsNull = -1739,
    errAEBuildSyntaxError = -1740,
    errAEBufferTooSmall = -1741,
};

pub const anon7171 = enum(i32) {
    errOSASystemError = -1750,
    errOSAInvalidID = -1751,
    errOSABadStorageType = -1752,
    errOSAScriptError = -1753,
    errOSABadSelector = -1754,
    errOSASourceNotAvailable = -1756,
    errOSANoSuchDialect = -1757,
    errOSADataFormatObsolete = -1758,
    errOSADataFormatTooNew = -1759,
    errOSACorruptData = -1702,
    errOSARecordingIsAlreadyOn = -1732,
    errOSAComponentMismatch = -1761,
    errOSACantOpenComponent = -1762,
    errOSACantStorePointers = -1763,
};

pub const anon7471 = enum(i32) {
    badDragRefErr = -1850,
    badDragItemErr = -1851,
    badDragFlavorErr = -1852,
    duplicateFlavorErr = -1853,
    cantGetFlavorErr = -1854,
    duplicateHandlerErr = -1855,
    handlerNotFoundErr = -1856,
    dragNotAcceptedErr = -1857,
    unsupportedForPlatformErr = -1858,
    noSuitableDisplaysErr = -1859,
    badImageRgnErr = -1860,
    badImageErr = -1861,
    nonDragOriginatorErr = -1862,
};

pub const anon7661 = enum(i32) {
    couldNotResolveDataRef = -2000,
    badImageDescription = -2001,
    badPublicMovieAtom = -2002,
    cantFindHandler = -2003,
    cantOpenHandler = -2004,
    badComponentType = -2005,
    noMediaHandler = -2006,
    noDataHandler = -2007,
    invalidMedia = -2008,
    invalidTrack = -2009,
    invalidMovie = -2010,
    invalidSampleTable = -2011,
    invalidDataRef = -2012,
    invalidHandler = -2013,
    invalidDuration = -2014,
    invalidTime = -2015,
    cantPutPublicMovieAtom = -2016,
    badEditList = -2017,
    mediaTypesDontMatch = -2018,
    progressProcAborted = -2019,
    movieToolboxUninitialized = -2020,
    noRecordOfApp = -2020,
    wfFileNotFound = -2021,
    cantCreateSingleForkFile = -2022,
    invalidEditState = -2023,
    nonMatchingEditState = -2024,
    staleEditState = -2025,
    userDataItemNotFound = -2026,
    maxSizeToGrowTooSmall = -2027,
    badTrackIndex = -2028,
    trackIDNotFound = -2029,
    trackNotInMovie = -2030,
    timeNotInTrack = -2031,
    timeNotInMedia = -2032,
    badEditIndex = -2033,
    internalQuickTimeError = -2034,
    cantEnableTrack = -2035,
    invalidRect = -2036,
    invalidSampleNum = -2037,
    invalidChunkNum = -2038,
    invalidSampleDescIndex = -2039,
    invalidChunkCache = -2040,
    invalidSampleDescription = -2041,
    dataNotOpenForRead = -2042,
    dataNotOpenForWrite = -2043,
    dataAlreadyOpenForWrite = -2044,
    dataAlreadyClosed = -2045,
    endOfDataReached = -2046,
    dataNoDataRef = -2047,
    noMovieFound = -2048,
    invalidDataRefContainer = -2049,
    badDataRefIndex = -2050,
    noDefaultDataRef = -2051,
    couldNotUseAnExistingSample = -2052,
    featureUnsupported = -2053,
    noVideoTrackInMovieErr = -2054,
    noSoundTrackInMovieErr = -2055,
    soundSupportNotAvailableErr = -2056,
    unsupportedAuxiliaryImportData = -2057,
    auxiliaryExportDataUnavailable = -2058,
    samplesAlreadyInMediaErr = -2059,
    noSourceTreeFoundErr = -2060,
    sourceNotFoundErr = -2061,
    movieTextNotFoundErr = -2062,
    missingRequiredParameterErr = -2063,
    invalidSpriteWorldPropertyErr = -2064,
    invalidSpritePropertyErr = -2065,
    gWorldsNotSameDepthAndSizeErr = -2066,
    invalidSpriteIndexErr = -2067,
    invalidImageIndexErr = -2068,
    invalidSpriteIDErr = -2069,
};

pub const anon8401 = enum(i32) {
    internalComponentErr = -2070,
    notImplementedMusicOSErr = -2071,
    cantSendToSynthesizerOSErr = -2072,
    cantReceiveFromSynthesizerOSErr = -2073,
    illegalVoiceAllocationOSErr = -2074,
    illegalPartOSErr = -2075,
    illegalChannelOSErr = -2076,
    illegalKnobOSErr = -2077,
    illegalKnobValueOSErr = -2078,
    illegalInstrumentOSErr = -2079,
    illegalControllerOSErr = -2080,
    midiManagerAbsentOSErr = -2081,
    synthesizerNotRespondingOSErr = -2082,
    synthesizerOSErr = -2083,
    illegalNoteChannelOSErr = -2084,
    noteChannelNotAllocatedOSErr = -2085,
    tunePlayerFullOSErr = -2086,
    tuneParseOSErr = -2087,
    noExportProcAvailableErr = -2089,
    videoOutputInUseErr = -2090,
};

pub const anon8631 = enum(u32) {
    gestaltFBCIndexingState = 1717724009,
    gestaltFBCindexingSafe = 0,
    gestaltFBCindexingCritical = 1,
};

pub const anon8741 = enum(i32) {
    cannotFindAtomErr = -2101,
    notLeafAtomErr = -2102,
    atomsNotOfSameTypeErr = -2103,
    atomIndexInvalidErr = -2104,
    duplicateAtomTypeAndIDErr = -2105,
    invalidAtomErr = -2106,
    invalidAtomContainerErr = -2107,
    invalidAtomTypeErr = -2108,
    cannotBeLeafAtomErr = -2109,
    pathTooLongErr = -2110,
    emptyPathErr = -2111,
    noPathMappingErr = -2112,
    pathNotVerifiedErr = -2113,
    unknownFormatErr = -2114,
    wackBadFileErr = -2115,
    wackForkNotFoundErr = -2116,
    wackBadMetaDataErr = -2117,
    qfcbNotFoundErr = -2118,
    qfcbNotCreatedErr = -2119,
    AAPNotCreatedErr = -2120,
    AAPNotFoundErr = -2121,
    ASDBadHeaderErr = -2122,
    ASDBadForkErr = -2123,
    ASDEntryNotFoundErr = -2124,
    fileOffsetTooBigErr = -2125,
    notAllowedToSaveMovieErr = -2126,
    qtNetworkAlreadyAllocatedErr = -2127,
    urlDataHHTTPProtocolErr = -2129,
    urlDataHHTTPNoNetDriverErr = -2130,
    urlDataHHTTPURLErr = -2131,
    urlDataHHTTPRedirectErr = -2132,
    urlDataHFTPProtocolErr = -2133,
    urlDataHFTPShutdownErr = -2134,
    urlDataHFTPBadUserErr = -2135,
    urlDataHFTPBadPasswordErr = -2136,
    urlDataHFTPServerErr = -2137,
    urlDataHFTPDataConnectionErr = -2138,
    urlDataHFTPNoDirectoryErr = -2139,
    urlDataHFTPQuotaErr = -2140,
    urlDataHFTPPermissionsErr = -2141,
    urlDataHFTPFilenameErr = -2142,
    urlDataHFTPNoNetDriverErr = -2143,
    urlDataHFTPBadNameListErr = -2144,
    urlDataHFTPNeedPasswordErr = -2145,
    urlDataHFTPNoPasswordErr = -2146,
    urlDataHFTPServerDisconnectedErr = -2147,
    urlDataHFTPURLErr = -2148,
    notEnoughDataErr = -2149,
    qtActionNotHandledErr = -2157,
    qtXMLParseErr = -2158,
    qtXMLApplicationErr = -2159,
};

pub const anon9291 = enum(i32) {
    digiUnimpErr = -2201,
    qtParamErr = -2202,
    matrixErr = -2203,
    notExactMatrixErr = -2204,
    noMoreKeyColorsErr = -2205,
    notExactSizeErr = -2206,
    badDepthErr = -2207,
    noDMAErr = -2208,
    badCallOrderErr = -2209,
};

pub const anon9431 = enum(i32) {
    kernelIncompleteErr = -2401,
    kernelCanceledErr = -2402,
    kernelOptionsErr = -2403,
    kernelPrivilegeErr = -2404,
    kernelUnsupportedErr = -2405,
    kernelObjectExistsErr = -2406,
    kernelWritePermissionErr = -2407,
    kernelReadPermissionErr = -2408,
    kernelExecutePermissionErr = -2409,
    kernelDeletePermissionErr = -2410,
    kernelExecutionLevelErr = -2411,
    kernelAttributeErr = -2412,
    kernelAsyncSendLimitErr = -2413,
    kernelAsyncReceiveLimitErr = -2414,
    kernelTimeoutErr = -2415,
    kernelInUseErr = -2416,
    kernelTerminatedErr = -2417,
    kernelExceptionErr = -2418,
    kernelIDErr = -2419,
    kernelAlreadyFreeErr = -2421,
    kernelReturnValueErr = -2422,
    kernelUnrecoverableErr = -2499,
};

pub const anon9701 = enum(i32) {
    tsmComponentNoErr = 0,
    tsmUnsupScriptLanguageErr = -2500,
    tsmInputMethodNotFoundErr = -2501,
    tsmNotAnAppErr = -2502,
    tsmAlreadyRegisteredErr = -2503,
    tsmNeverRegisteredErr = -2504,
    tsmInvalidDocIDErr = -2505,
    tsmTSMDocBusyErr = -2506,
    tsmDocNotActiveErr = -2507,
    tsmNoOpenTSErr = -2508,
    tsmCantOpenComponentErr = -2509,
    tsmTextServiceNotFoundErr = -2510,
    tsmDocumentOpenErr = -2511,
    tsmUseInputWindowErr = -2512,
    tsmTSHasNoMenuErr = -2513,
    tsmTSNotOpenErr = -2514,
    tsmComponentAlreadyOpenErr = -2515,
    tsmInputMethodIsOldErr = -2516,
    tsmScriptHasNoIMErr = -2517,
    tsmUnsupportedTypeErr = -2518,
    tsmUnknownErr = -2519,
    tsmInvalidContext = -2520,
    tsmNoHandler = -2521,
    tsmNoMoreTokens = -2522,
    tsmNoStem = -2523,
    tsmDefaultIsNotInputMethodErr = -2524,
    tsmDocPropertyNotFoundErr = -2528,
    tsmDocPropertyBufferTooSmallErr = -2529,
    tsmCantChangeForcedClassStateErr = -2530,
    tsmComponentPropertyUnsupportedErr = -2531,
    tsmComponentPropertyNotFoundErr = -2532,
    tsmInputModeChangeFailedErr = -2533,
};

pub const anon10071 = enum(i32) {
    mmInternalError = -2526,
};

pub const anon10131 = enum(i32) {
    nrLockedErr = -2536,
    nrNotEnoughMemoryErr = -2537,
    nrInvalidNodeErr = -2538,
    nrNotFoundErr = -2539,
    nrNotCreatedErr = -2540,
    nrNameErr = -2541,
    nrNotSlotDeviceErr = -2542,
    nrDataTruncatedErr = -2543,
    nrPowerErr = -2544,
    nrPowerSwitchAbortErr = -2545,
    nrTypeMismatchErr = -2546,
    nrNotModifiedErr = -2547,
    nrOverrunErr = -2548,
    nrResultCodeBase = -2549,
    nrPathNotFound = -2550,
    nrPathBufferTooSmall = -2551,
    nrInvalidEntryIterationOp = -2552,
    nrPropertyAlreadyExists = -2553,
    nrIterationDone = -2554,
    nrExitedIteratorScope = -2555,
    nrTransactionAborted = -2556,
    nrCallNotSupported = -2557,
};

pub const anon10391 = enum(i32) {
    invalidIconRefErr = -2580,
    noSuchIconErr = -2581,
    noIconDataAvailableErr = -2582,
};

pub const anon10521 = enum(i32) {
    errOSACantCoerce = -1700,
    errOSACantAccess = -1728,
    errOSACantAssign = -10006,
    errOSAGeneralError = -2700,
    errOSADivideByZero = -2701,
    errOSANumericOverflow = -2702,
    errOSACantLaunch = -2703,
    errOSAAppNotHighLevelEventAware = -2704,
    errOSACorruptTerminology = -2705,
    errOSAStackOverflow = -2706,
    errOSAInternalTableOverflow = -2707,
    errOSADataBlockTooLarge = -2708,
    errOSACantGetTerminology = -2709,
    errOSACantCreate = -2710,
};

pub const anon10831 = enum(u32) {
    gestaltPortable2001ANSIKbd = 202,
    gestaltPortable2001ISOKbd = 203,
    gestaltPortable2001JISKbd = 207,
};

pub const anon11241 = enum(i32) {
    errASCantConsiderAndIgnore = -2720,
    errASCantCompareMoreThan32k = -2721,
    errASTerminologyNestingTooDeep = -2760,
    errASIllegalFormalParameter = -2761,
    errASParameterNotForEvent = -2762,
    errASNoResultReturned = -2763,
    errASInconsistentNames = -2780,
};

pub const anon11361 = enum(i32) {
    cfragFirstErrCode = -2800,
    cfragContextIDErr = -2800,
    cfragConnectionIDErr = -2801,
    cfragNoSymbolErr = -2802,
    cfragNoSectionErr = -2803,
    cfragNoLibraryErr = -2804,
    cfragDupRegistrationErr = -2805,
    cfragFragmentFormatErr = -2806,
    cfragUnresolvedErr = -2807,
    cfragNoPositionErr = -2808,
    cfragNoPrivateMemErr = -2809,
    cfragNoClientMemErr = -2810,
    cfragNoIDsErr = -2811,
    cfragInitOrderErr = -2812,
    cfragImportTooOldErr = -2813,
    cfragImportTooNewErr = -2814,
    cfragInitLoopErr = -2815,
    cfragInitAtBootErr = -2816,
    cfragLibConnErr = -2817,
    cfragCFMStartupErr = -2818,
    cfragCFMInternalErr = -2819,
    cfragFragmentCorruptErr = -2820,
    cfragInitFunctionErr = -2821,
    cfragNoApplicationErr = -2822,
    cfragArchitectureErr = -2823,
    cfragFragmentUsageErr = -2824,
    cfragFileSizeErr = -2825,
    cfragNotClosureErr = -2826,
    cfragNoRegistrationErr = -2827,
    cfragContainerIDErr = -2828,
    cfragClosureIDErr = -2829,
    cfragAbortClosureErr = -2830,
    cfragOutputLengthErr = -2831,
    cfragMapFileErr = -2851,
    cfragExecFileRefErr = -2854,
    cfragStdFolderErr = -2855,
    cfragRsrcForkErr = -2856,
    cfragCFragRsrcErr = -2857,
    cfragLastErrCode = -2899,
};

pub const anon11781 = enum(i32) {
    cfragFirstReservedCode = -2897,
    cfragReservedCode_3 = -2897,
    cfragReservedCode_2 = -2898,
    cfragReservedCode_1 = -2899,
};

pub const anon12191 = enum(i32) {
    invalidComponentID = -3000,
    validInstancesExist = -3001,
    componentNotCaptured = -3002,
    componentDontRegister = -3003,
    unresolvedComponentDLLErr = -3004,
    retryComponentRegistrationErr = -3005,
};

pub const anon12291 = enum(i32) {
    invalidTranslationPathErr = -3025,
    couldNotParseSourceFileErr = -3026,
    noTranslationPathErr = -3030,
    badTranslationSpecErr = -3031,
    noPrefAppErr = -3032,
};

pub const anon12371 = enum(i32) {
    buf2SmallErr = -3101,
    noMPPErr = -3102,
    ckSumErr = -3103,
    extractErr = -3104,
    readQErr = -3105,
    atpLenErr = -3106,
    atpBadRsp = -3107,
    recNotFnd = -3108,
    sktClosedErr = -3109,
};

pub const anon12511 = enum(i32) {
    kOTNoError = 0,
    kOTOutOfMemoryErr = -3211,
    kOTNotFoundErr = -3201,
    kOTDuplicateFoundErr = -3216,
    kOTBadAddressErr = -3150,
    kOTBadOptionErr = -3151,
    kOTAccessErr = -3152,
    kOTBadReferenceErr = -3153,
    kOTNoAddressErr = -3154,
    kOTOutStateErr = -3155,
    kOTBadSequenceErr = -3156,
    kOTSysErrorErr = -3157,
    kOTLookErr = -3158,
    kOTBadDataErr = -3159,
    kOTBufferOverflowErr = -3160,
    kOTFlowErr = -3161,
    kOTNoDataErr = -3162,
    kOTNoDisconnectErr = -3163,
    kOTNoUDErrErr = -3164,
    kOTBadFlagErr = -3165,
    kOTNoReleaseErr = -3166,
    kOTNotSupportedErr = -3167,
    kOTStateChangeErr = -3168,
    kOTNoStructureTypeErr = -3169,
    kOTBadNameErr = -3170,
    kOTBadQLenErr = -3171,
    kOTAddressBusyErr = -3172,
    kOTIndOutErr = -3173,
    kOTProviderMismatchErr = -3174,
    kOTResQLenErr = -3175,
    kOTResAddressErr = -3176,
    kOTQFullErr = -3177,
    kOTProtocolErr = -3178,
    kOTBadSyncErr = -3179,
    kOTCanceledErr = -3180,
    kEPERMErr = -3200,
    kENOENTErr = -3201,
    kENORSRCErr = -3202,
    kEINTRErr = -3203,
    kEIOErr = -3204,
    kENXIOErr = -3205,
    kEBADFErr = -3208,
    kEAGAINErr = -3210,
    kENOMEMErr = -3211,
    kEACCESErr = -3212,
    kEFAULTErr = -3213,
    kEBUSYErr = -3215,
    kEEXISTErr = -3216,
    kENODEVErr = -3218,
    kEINVALErr = -3221,
    kENOTTYErr = -3224,
    kEPIPEErr = -3231,
    kERANGEErr = -3233,
    kEWOULDBLOCKErr = -3234,
    kEDEADLKErr = -3234,
    kEALREADYErr = -3236,
    kENOTSOCKErr = -3237,
    kEDESTADDRREQErr = -3238,
    kEMSGSIZEErr = -3239,
    kEPROTOTYPEErr = -3240,
    kENOPROTOOPTErr = -3241,
    kEPROTONOSUPPORTErr = -3242,
    kESOCKTNOSUPPORTErr = -3243,
    kEOPNOTSUPPErr = -3244,
    kEADDRINUSEErr = -3247,
    kEADDRNOTAVAILErr = -3248,
    kENETDOWNErr = -3249,
    kENETUNREACHErr = -3250,
    kENETRESETErr = -3251,
    kECONNABORTEDErr = -3252,
    kECONNRESETErr = -3253,
    kENOBUFSErr = -3254,
    kEISCONNErr = -3255,
    kENOTCONNErr = -3256,
    kESHUTDOWNErr = -3257,
    kETOOMANYREFSErr = -3258,
    kETIMEDOUTErr = -3259,
    kECONNREFUSEDErr = -3260,
    kEHOSTDOWNErr = -3263,
    kEHOSTUNREACHErr = -3264,
    kEPROTOErr = -3269,
    kETIMEErr = -3270,
    kENOSRErr = -3271,
    kEBADMSGErr = -3272,
    kECANCELErr = -3273,
    kENOSTRErr = -3274,
    kENODATAErr = -3275,
    kEINPROGRESSErr = -3276,
    kESRCHErr = -3277,
    kENOMSGErr = -3278,
    kOTClientNotInittedErr = -3279,
    kOTPortHasDiedErr = -3280,
    kOTPortWasEjectedErr = -3281,
    kOTBadConfigurationErr = -3282,
    kOTConfigurationChangedErr = -3283,
    kOTUserRequestedErr = -3284,
    kOTPortLostConnection = -3285,
};

pub const anon13531 = enum(i32) {
    kQDNoPalette = -3950,
    kQDNoColorHWCursorSupport = -3951,
    kQDCursorAlreadyRegistered = -3952,
    kQDCursorNotRegistered = -3953,
    kQDCorruptPICTDataErr = -3954,
};

pub const anon13641 = enum(i32) {
    firstPickerError = -4000,
    invalidPickerType = -4000,
    requiredFlagsDontMatch = -4001,
    pickerResourceError = -4002,
    cantLoadPicker = -4003,
    cantCreatePickerWindow = -4004,
    cantLoadPackage = -4005,
    pickerCantLive = -4006,
    colorSyncNotInstalled = -4007,
    badProfileError = -4008,
    noHelpForItem = -4009,
};

pub const anon13811 = enum(i32) {
    kNSL68kContextNotSupported = -4170,
    kNSLSchedulerError = -4171,
    kNSLBadURLSyntax = -4172,
    kNSLNoCarbonLib = -4173,
    kNSLUILibraryNotAvailable = -4174,
    kNSLNotImplementedYet = -4175,
    kNSLErrNullPtrError = -4176,
    kNSLSomePluginsFailedToLoad = -4177,
    kNSLNullNeighborhoodPtr = -4178,
    kNSLNoPluginsForSearch = -4179,
    kNSLSearchAlreadyInProgress = -4180,
    kNSLNoPluginsFound = -4181,
    kNSLPluginLoadFailed = -4182,
    kNSLBadProtocolTypeErr = -4183,
    kNSLNullListPtr = -4184,
    kNSLBadClientInfoPtr = -4185,
    kNSLCannotContinueLookup = -4186,
    kNSLBufferTooSmallForData = -4187,
    kNSLNoContextAvailable = -4188,
    kNSLRequestBufferAlreadyInList = -4189,
    kNSLInvalidPluginSpec = -4190,
    kNSLNoSupportForService = -4191,
    kNSLBadNetConnection = -4192,
    kNSLBadDataTypeErr = -4193,
    kNSLBadServiceTypeErr = -4194,
    kNSLBadReferenceErr = -4195,
    kNSLNoElementsInList = -4196,
    kNSLInsufficientOTVer = -4197,
    kNSLInsufficientSysVer = -4198,
    kNSLNotInitialized = -4199,
    kNSLInitializationFailed = -4200,
};

pub const anon14181 = enum(i32) {
    kDTPHoldJobErr = -4200,
    kDTPStopQueueErr = -4201,
    kDTPTryAgainErr = -4202,
    kDTPAbortJobErr = 128,
};

pub const anon14271 = enum(u32) {
    kMPLowLevelDebugger = 0,
    kMPMidLevelDebugger = 268435456,
    kMPHighLevelDebugger = 536870912,
};

pub const anon14511 = enum(i32) {
    badFolderDescErr = -4270,
    duplicateFolderDescErr = -4271,
    noMoreFolderDescErr = -4272,
    invalidFolderTypeErr = -4273,
    duplicateRoutingErr = -4274,
    routingNotFoundErr = -4275,
    badRoutingSizeErr = -4276,
};

pub const anon14631 = enum(i32) {
    coreFoundationUnknownErr = -4960,
};

pub const anon14681 = enum(i32) {
    errCoreEndianDataTooShortForFormat = -4940,
    errCoreEndianDataTooLongForFormat = -4941,
    errCoreEndianDataDoesNotMatchFormat = -4942,
};

pub const anon14941 = enum(i32) {
    afpAccessDenied = -5000,
    afpAuthContinue = -5001,
    afpBadUAM = -5002,
    afpBadVersNum = -5003,
    afpBitmapErr = -5004,
    afpCantMove = -5005,
    afpDenyConflict = -5006,
    afpDirNotEmpty = -5007,
    afpDiskFull = -5008,
    afpEofError = -5009,
    afpFileBusy = -5010,
    afpFlatVol = -5011,
    afpItemNotFound = -5012,
    afpLockErr = -5013,
    afpMiscErr = -5014,
    afpNoMoreLocks = -5015,
    afpNoServer = -5016,
    afpObjectExists = -5017,
    afpObjectNotFound = -5018,
    afpParmErr = -5019,
    afpRangeNotLocked = -5020,
    afpRangeOverlap = -5021,
    afpSessClosed = -5022,
    afpUserNotAuth = -5023,
    afpCallNotSupported = -5024,
    afpObjectTypeErr = -5025,
    afpTooManyFilesOpen = -5026,
    afpServerGoingDown = -5027,
    afpCantRename = -5028,
    afpDirNotFound = -5029,
    afpIconTypeError = -5030,
    afpVolLocked = -5031,
    afpObjectLocked = -5032,
    afpContainsSharedErr = -5033,
    afpIDNotFound = -5034,
    afpIDExists = -5035,
    afpDiffVolErr = -5036,
    afpCatalogChanged = -5037,
    afpSameObjectErr = -5038,
    afpBadIDErr = -5039,
    afpPwdSameErr = -5040,
    afpPwdTooShortErr = -5041,
    afpPwdExpiredErr = -5042,
    afpInsideSharedErr = -5043,
    afpInsideTrashErr = -5044,
    afpPwdNeedsChangeErr = -5045,
    afpPwdPolicyErr = -5046,
    afpAlreadyLoggedInErr = -5047,
    afpCallNotAllowed = -5048,
};

pub const anon15491 = enum(i32) {
    afpBadDirIDType = -5060,
    afpCantMountMoreSrvre = -5061,
    afpAlreadyMounted = -5062,
    afpSameNodeErr = -5063,
};

pub const anon15621 = enum(i32) {
    numberFormattingNotANumberErr = -5200,
    numberFormattingOverflowInDestinationErr = -5201,
    numberFormattingBadNumberFormattingObjectErr = -5202,
    numberFormattingSpuriousCharErr = -5203,
    numberFormattingLiteralMissingErr = -5204,
    numberFormattingDelimiterMissingErr = -5205,
    numberFormattingEmptyFormatErr = -5206,
    numberFormattingBadFormatErr = -5207,
    numberFormattingBadOptionsErr = -5208,
    numberFormattingBadTokenErr = -5209,
    numberFormattingUnOrderedCurrencyRangeErr = -5210,
    numberFormattingBadCurrencyPositionErr = -5211,
    numberFormattingNotADigitErr = -5212,
    numberFormattingUnOrdredCurrencyRangeErr = -5210,
    numberFortmattingNotADigitErr = -5212,
};

pub const anon15811 = enum(i32) {
    textParserBadParamErr = -5220,
    textParserObjectNotFoundErr = -5221,
    textParserBadTokenValueErr = -5222,
    textParserBadParserObjectErr = -5223,
    textParserParamErr = -5224,
    textParserNoMoreTextErr = -5225,
    textParserBadTextLanguageErr = -5226,
    textParserBadTextEncodingErr = -5227,
    textParserNoSuchTokenFoundErr = -5228,
    textParserNoMoreTokensErr = -5229,
};

pub const anon15941 = enum(i32) {
    errUnknownAttributeTag = -5240,
    errMarginWilllNotFit = -5241,
    errNotInImagingMode = -5242,
    errAlreadyInImagingMode = -5243,
    errEngineNotFound = -5244,
    errIteratorReachedEnd = -5245,
    errInvalidRange = -5246,
    errOffsetNotOnElementBounday = -5247,
    errNoHiliteText = -5248,
    errEmptyScrap = -5249,
    errReadOnlyText = -5250,
    errUnknownElement = -5251,
    errNonContiuousAttribute = -5252,
    errCannotUndo = -5253,
};

pub const anon16131 = enum(u32) {
    gestaltProcClkSpeed = 1885564011,
};

pub const anon16371 = enum(i32) {
    qtsBadSelectorErr = -5400,
    qtsBadStateErr = -5401,
    qtsBadDataErr = -5402,
    qtsUnsupportedDataTypeErr = -5403,
    qtsUnsupportedRateErr = -5404,
    qtsUnsupportedFeatureErr = -5405,
    qtsTooMuchDataErr = -5406,
    qtsUnknownValueErr = -5407,
    qtsTimeoutErr = -5408,
    qtsConnectionFailedErr = -5420,
    qtsAddressBusyErr = -5421,
};

pub const anon16521 = enum(u32) {
    gestaltPopupAttr = 1886351393,
    gestaltPopupPresent = 0,
};

pub const anon16621 = enum(i32) {
    menuPropertyInvalidErr = -5603,
    menuPropertyInvalid = -5603,
    menuPropertyNotFoundErr = -5604,
    menuNotFoundErr = -5620,
    menuUsesSystemDefErr = -5621,
    menuItemNotFoundErr = -5622,
    menuInvalidErr = -5623,
};

pub const anon16741 = enum(i32) {
    errInvalidWindowPtr = -5600,
    errInvalidWindowRef = -5600,
    errUnsupportedWindowAttributesForClass = -5601,
    errWindowDoesNotHaveProxy = -5602,
    errInvalidWindowProperty = -5603,
    errWindowPropertyNotFound = -5604,
    errUnrecognizedWindowClass = -5605,
    errCorruptWindowDescription = -5606,
    errUserWantsToDragWindow = -5607,
    errWindowsAlreadyInitialized = -5608,
    errFloatingWindowsNotInitialized = -5609,
    errWindowNotFound = -5610,
    errWindowDoesNotFitOnscreen = -5611,
    windowAttributeImmutableErr = -5612,
    windowAttributesConflictErr = -5613,
    windowManagerInternalErr = -5614,
    windowWrongStateErr = -5615,
    windowGroupInvalidErr = -5616,
    windowAppModalStateAlreadyExistsErr = -5617,
    windowNoAppModalStateErr = -5618,
    errWindowDoesntSupportFocus = -30583,
    errWindowRegionCodeInvalid = -30593,
};

pub const anon17011 = enum(i32) {
    dialogNoTimeoutErr = -5640,
};

pub const anon17071 = enum(i32) {
    kNavWrongDialogStateErr = -5694,
    kNavWrongDialogClassErr = -5695,
    kNavInvalidSystemConfigErr = -5696,
    kNavCustomControlMessageFailedErr = -5697,
    kNavInvalidCustomControlMessageErr = -5698,
    kNavMissingKindStringErr = -5699,
};

pub const anon17181 = enum(u32) {
    gestaltSDPPromptVersion = 1886548086,
};

pub const anon17271 = enum(i32) {
    kQTSSUnknownErr = -6150,
};

pub const anon17321 = enum(u32) {
    gestaltQD3DViewer = 1899198051,
    gestaltQD3DViewerPresent = 0,
};

pub const anon17571 = enum(u32) {
    gestaltQD3D = 1902392164,
    gestaltQD3DPresent = 0,
};

pub const anon17781 = enum(u32) {
    kUSBNoErr = 0,
    kUSBNoTran = 0,
    kUSBNoDelay = 0,
    kUSBPending = 1,
};

pub const anon17981 = enum(i32) {
    kUSBNotSent2Err = -6901,
    kUSBNotSent1Err = -6902,
    kUSBBufUnderRunErr = -6903,
    kUSBBufOvrRunErr = -6904,
    kUSBRes2Err = -6905,
    kUSBRes1Err = -6906,
    kUSBUnderRunErr = -6907,
    kUSBOverRunErr = -6908,
    kUSBWrongPIDErr = -6909,
    kUSBPIDCheckErr = -6910,
    kUSBNotRespondingErr = -6911,
    kUSBEndpointStallErr = -6912,
    kUSBDataToggleErr = -6913,
    kUSBBitstufErr = -6914,
    kUSBCRCErr = -6915,
    kUSBLinkErr = -6916,
};

pub const anon18221 = enum(i32) {
    kUSBQueueFull = -6948,
    kUSBNotHandled = -6987,
    kUSBUnknownNotification = -6949,
    kUSBBadDispatchTable = -6950,
};

pub const anon18351 = enum(i32) {
    kUSBInternalReserved10 = -6951,
    kUSBInternalReserved9 = -6952,
    kUSBInternalReserved8 = -6953,
    kUSBInternalReserved7 = -6954,
    kUSBInternalReserved6 = -6955,
    kUSBInternalReserved5 = -6956,
    kUSBInternalReserved4 = -6957,
    kUSBInternalReserved3 = -6958,
    kUSBInternalReserved2 = -6959,
    kUSBInternalReserved1 = -6960,
};

pub const anon18491 = enum(i32) {
    kUSBPortDisabled = -6969,
    kUSBQueueAborted = -6970,
    kUSBTimedOut = -6971,
    kUSBDeviceDisconnected = -6972,
    kUSBDeviceNotSuspended = -6973,
    kUSBDeviceSuspended = -6974,
    kUSBInvalidBuffer = -6975,
    kUSBDevicePowerProblem = -6976,
    kUSBDeviceBusy = -6977,
    kUSBUnknownInterfaceErr = -6978,
    kUSBPipeStalledError = -6979,
    kUSBPipeIdleError = -6980,
    kUSBNoBandwidthError = -6981,
    kUSBAbortedError = -6982,
    kUSBFlagsError = -6983,
    kUSBCompletionError = -6984,
    kUSBPBLengthError = -6985,
    kUSBPBVersionError = -6986,
    kUSBNotFound = -6987,
    kUSBOutOfMemoryErr = -6988,
    kUSBDeviceErr = -6989,
    kUSBNoDeviceErr = -6990,
    kUSBAlreadyOpenErr = -6991,
    kUSBTooManyTransactionsErr = -6992,
    kUSBUnknownRequestErr = -6993,
    kUSBRqErr = -6994,
    kUSBIncorrectTypeErr = -6995,
    kUSBTooManyPipesErr = -6996,
    kUSBUnknownPipeErr = -6997,
    kUSBUnknownDeviceErr = -6998,
    kUSBInternalErr = -6999,
};

pub const anon18871 = enum(i32) {
    dcmParamErr = -7100,
    dcmNotDictionaryErr = -7101,
    dcmBadDictionaryErr = -7102,
    dcmPermissionErr = -7103,
    dcmDictionaryNotOpenErr = -7104,
    dcmDictionaryBusyErr = -7105,
    dcmBlockFullErr = -7107,
    dcmNoRecordErr = -7108,
    dcmDupRecordErr = -7109,
    dcmNecessaryFieldErr = -7110,
    dcmBadFieldInfoErr = -7111,
    dcmBadFieldTypeErr = -7112,
    dcmNoFieldErr = -7113,
    dcmBadKeyErr = -7115,
    dcmTooManyKeyErr = -7116,
    dcmBadDataSizeErr = -7117,
    dcmBadFindMethodErr = -7118,
    dcmBadPropertyErr = -7119,
    dcmProtectedErr = -7121,
    dcmNoAccessMethodErr = -7122,
    dcmBadFeatureErr = -7124,
    dcmIterationCompleteErr = -7126,
    dcmBufferOverflowErr = -7127,
};

pub const anon19151 = enum(i32) {
    kRAInvalidParameter = -7100,
    kRAInvalidPort = -7101,
    kRAStartupFailed = -7102,
    kRAPortSetupFailed = -7103,
    kRAOutOfMemory = -7104,
    kRANotSupported = -7105,
    kRAMissingResources = -7106,
    kRAIncompatiblePrefs = -7107,
    kRANotConnected = -7108,
    kRAConnectionCanceled = -7109,
    kRAUnknownUser = -7110,
    kRAInvalidPassword = -7111,
    kRAInternalError = -7112,
    kRAInstallationDamaged = -7113,
    kRAPortBusy = -7114,
    kRAUnknownPortState = -7115,
    kRAInvalidPortState = -7116,
    kRAInvalidSerialProtocol = -7117,
    kRAUserLoginDisabled = -7118,
    kRAUserPwdChangeRequired = -7119,
    kRAUserPwdEntryRequired = -7120,
    kRAUserInteractionRequired = -7121,
    kRAInitOpenTransportFailed = -7122,
    kRARemoteAccessNotReady = -7123,
    kRATCPIPInactive = -7124,
    kRATCPIPNotConfigured = -7125,
    kRANotPrimaryInterface = -7126,
    kRAConfigurationDBInitErr = -7127,
    kRAPPPProtocolRejected = -7128,
    kRAPPPAuthenticationFailed = -7129,
    kRAPPPNegotiationFailed = -7130,
    kRAPPPUserDisconnected = -7131,
    kRAPPPPeerDisconnected = -7132,
    kRAPeerNotResponding = -7133,
    kRAATalkInactive = -7134,
    kRAExtAuthenticationFailed = -7135,
    kRANCPRejectedbyPeer = -7136,
    kRADuplicateIPAddr = -7137,
    kRACallBackFailed = -7138,
    kRANotEnabled = -7139,
};

pub const anon19661 = enum(i32) {
    kATSUInvalidTextLayoutErr = -8790,
    kATSUInvalidStyleErr = -8791,
    kATSUInvalidTextRangeErr = -8792,
    kATSUFontsMatched = -8793,
    kATSUFontsNotMatched = -8794,
    kATSUNoCorrespondingFontErr = -8795,
    kATSUInvalidFontErr = -8796,
    kATSUInvalidAttributeValueErr = -8797,
    kATSUInvalidAttributeSizeErr = -8798,
    kATSUInvalidAttributeTagErr = -8799,
    kATSUInvalidCacheErr = -8800,
    kATSUNotSetErr = -8801,
    kATSUNoStyleRunsAssignedErr = -8802,
    kATSUQuickDrawTextErr = -8803,
    kATSULowLevelErr = -8804,
    kATSUNoFontCmapAvailableErr = -8805,
    kATSUNoFontScalerAvailableErr = -8806,
    kATSUCoordinateOverflowErr = -8807,
    kATSULineBreakInWord = -8808,
    kATSUBusyObjectErr = -8809,
};

pub const anon20311 = enum(i32) {
    kTextUnsupportedEncodingErr = -8738,
    kTextMalformedInputErr = -8739,
    kTextUndefinedElementErr = -8740,
    kTECMissingTableErr = -8745,
    kTECTableChecksumErr = -8746,
    kTECTableFormatErr = -8747,
    kTECCorruptConverterErr = -8748,
    kTECNoConversionPathErr = -8749,
    kTECBufferBelowMinimumSizeErr = -8750,
    kTECArrayFullErr = -8751,
    kTECBadTextRunErr = -8752,
    kTECPartialCharErr = -8753,
    kTECUnmappableElementErr = -8754,
    kTECIncompleteElementErr = -8755,
    kTECDirectionErr = -8756,
    kTECGlobalsUnavailableErr = -8770,
    kTECItemUnavailableErr = -8771,
    kTECUsedFallbacksStatus = -8783,
    kTECNeedFlushStatus = -8784,
    kTECOutputBufferFullStatus = -8785,
    unicodeChecksumErr = -8769,
    unicodeNoTableErr = -8768,
    unicodeVariantErr = -8767,
    unicodeFallbacksErr = -8766,
    unicodePartConvertErr = -8765,
    unicodeBufErr = -8764,
    unicodeCharErr = -8763,
    unicodeElementErr = -8762,
    unicodeNotFoundErr = -8761,
    unicodeTableFormatErr = -8760,
    unicodeDirectionErr = -8759,
    unicodeContextualErr = -8758,
    unicodeTextEncodingDataErr = -8757,
};

pub const anon20721 = enum(i32) {
    kUTCUnderflowErr = -8850,
    kUTCOverflowErr = -8851,
    kIllegalClockValueErr = -8852,
};

pub const anon20821 = enum(i32) {
    kATSUInvalidFontFallbacksErr = -8900,
    kATSUUnsupportedStreamFormatErr = -8901,
    kATSUBadStreamErr = -8902,
    kATSUOutputBufferTooSmallErr = -8903,
    kATSUInvalidCallInsideCallbackErr = -8904,
    kATSUNoFontNameErr = -8905,
    kATSULastErr = -8959,
};

pub const anon21011 = enum(u32) {
    gestaltTE6 = 6,
};

pub const anon21421 = enum(i32) {
    kBadAdapterErr = -9050,
    kBadAttributeErr = -9051,
    kBadBaseErr = -9052,
    kBadEDCErr = -9053,
    kBadIRQErr = -9054,
    kBadOffsetErr = -9055,
    kBadPageErr = -9056,
    kBadSizeErr = -9057,
    kBadSocketErr = -9058,
    kBadTypeErr = -9059,
    kBadVccErr = -9060,
    kBadVppErr = -9061,
    kBadWindowErr = -9062,
    kBadArgLengthErr = -9063,
    kBadArgsErr = -9064,
    kBadHandleErr = -9065,
    kBadCISErr = -9066,
    kBadSpeedErr = -9067,
    kReadFailureErr = -9068,
    kWriteFailureErr = -9069,
    kGeneralFailureErr = -9070,
    kNoCardErr = -9071,
    kUnsupportedFunctionErr = -9072,
    kUnsupportedModeErr = -9073,
    kBusyErr = -9074,
    kWriteProtectedErr = -9075,
    kConfigurationLockedErr = -9076,
    kInUseErr = -9077,
    kNoMoreItemsErr = -9078,
    kOutOfResourceErr = -9079,
    kNoCardSevicesSocketsErr = -9080,
    kInvalidRegEntryErr = -9081,
    kBadLinkErr = -9082,
    kBadDeviceErr = -9083,
    k16BitCardErr = -9084,
    kCardBusCardErr = -9085,
    kPassCallToChainErr = -9086,
    kCantConfigureCardErr = -9087,
    kPostCardEventErr = -9088,
    kInvalidDeviceNumber = -9089,
    kUnsupportedVsErr = -9090,
    kInvalidCSClientErr = -9091,
    kBadTupleDataErr = -9092,
    kBadCustomIFIDErr = -9093,
    kNoIOWindowRequestedErr = -9094,
    kNoMoreTimerClientsErr = -9095,
    kNoMoreInterruptSlotsErr = -9096,
    kNoClientTableErr = -9097,
    kUnsupportedCardErr = -9098,
    kNoCardEnablersFoundErr = -9099,
    kNoEnablerForCardErr = -9100,
    kNoCompatibleNameErr = -9101,
    kClientRequestDenied = -9102,
    kNotReadyErr = -9103,
    kTooManyIOWindowsErr = -9104,
    kAlreadySavedStateErr = -9105,
    kAttemptDupCardEntryErr = -9106,
    kCardPowerOffErr = -9107,
    kNotZVCapableErr = -9108,
    kNoCardBusCISErr = -9109,
};

pub const anon22071 = enum(i32) {
    noDeviceForChannel = -9400,
    grabTimeComplete = -9401,
    cantDoThatInCurrentMode = -9402,
    notEnoughMemoryToGrab = -9403,
    notEnoughDiskSpaceToGrab = -9404,
    couldntGetRequiredComponent = -9405,
    badSGChannel = -9406,
    seqGrabInfoNotAvailable = -9407,
    deviceCantMeetRequest = -9408,
    badControllerHeight = -9994,
    editingNotAllowed = -9995,
    controllerBoundsNotExact = -9996,
    cannotSetWidthOfAttachedController = -9997,
    controllerHasFixedHeight = -9998,
    cannotMoveAttachedController = -9999,
};

pub const anon22261 = enum(u32) {
    gestaltATSUFeatures = 1969845094,
    gestaltATSUTrackingFeature = 1,
    gestaltATSUMemoryFeature = 1,
    gestaltATSUFallbacksFeature = 1,
    gestaltATSUGlyphBoundsFeature = 1,
    gestaltATSULineControlFeature = 1,
    gestaltATSULayoutCreateAndCopyFeature = 1,
    gestaltATSULayoutCacheClearFeature = 1,
    gestaltATSUTextLocatorUsageFeature = 2,
    gestaltATSULowLevelOrigFeatures = 4,
    gestaltATSUFallbacksObjFeatures = 8,
    gestaltATSUIgnoreLeadingFeature = 8,
    gestaltATSUByCharacterClusterFeature = 16,
    gestaltATSUAscentDescentControlsFeature = 16,
    gestaltATSUHighlightInactiveTextFeature = 16,
    gestaltATSUPositionToCursorFeature = 16,
    gestaltATSUBatchBreakLinesFeature = 16,
    gestaltATSUTabSupportFeature = 16,
    gestaltATSUDirectAccess = 16,
    gestaltATSUDecimalTabFeature = 32,
    gestaltATSUBiDiCursorPositionFeature = 32,
    gestaltATSUNearestCharLineBreakFeature = 32,
    gestaltATSUHighlightColorControlFeature = 32,
    gestaltATSUUnderlineOptionsStyleFeature = 32,
    gestaltATSUStrikeThroughStyleFeature = 32,
    gestaltATSUDropShadowStyleFeature = 32,
};

pub const anon22501 = enum(i32) {
    telGenericError = -1,
    telNoErr = 0,
    telNoTools = 8,
    telBadTermErr = -10001,
    telBadDNErr = -10002,
    telBadCAErr = -10003,
    telBadHandErr = -10004,
    telBadProcErr = -10005,
    telCAUnavail = -10006,
    telNoMemErr = -10007,
    telNoOpenErr = -10008,
    telBadHTypeErr = -10010,
    telHTypeNotSupp = -10011,
    telBadLevelErr = -10012,
    telBadVTypeErr = -10013,
    telVTypeNotSupp = -10014,
    telBadAPattErr = -10015,
    telAPattNotSupp = -10016,
    telBadIndex = -10017,
    telIndexNotSupp = -10018,
    telBadStateErr = -10019,
    telStateNotSupp = -10020,
    telBadIntExt = -10021,
    telIntExtNotSupp = -10022,
    telBadDNDType = -10023,
    telDNDTypeNotSupp = -10024,
    telFeatNotSub = -10030,
    telFeatNotAvail = -10031,
    telFeatActive = -10032,
    telFeatNotSupp = -10033,
    telConfLimitErr = -10040,
    telConfNoLimit = -10041,
    telConfErr = -10042,
    telConfRej = -10043,
    telTransferErr = -10044,
    telTransferRej = -10045,
    telCBErr = -10046,
    telConfLimitExceeded = -10047,
    telBadDNType = -10050,
    telBadPageID = -10051,
    telBadIntercomID = -10052,
    telBadFeatureID = -10053,
    telBadFwdType = -10054,
    telBadPickupGroupID = -10055,
    telBadParkID = -10056,
    telBadSelect = -10057,
    telBadBearerType = -10058,
    telBadRate = -10059,
    telDNTypeNotSupp = -10060,
    telFwdTypeNotSupp = -10061,
    telBadDisplayMode = -10062,
    telDisplayModeNotSupp = -10063,
    telNoCallbackRef = -10064,
    telAlreadyOpen = -10070,
    telStillNeeded = -10071,
    telTermNotOpen = -10072,
    telCANotAcceptable = -10080,
    telCANotRejectable = -10081,
    telCANotDeflectable = -10082,
    telPBErr = -10090,
    telBadFunction = -10091,
    telNoSuchTool = -10102,
    telUnknownErr = -10103,
    telNoCommFolder = -10106,
    telInitFailed = -10107,
    telBadCodeResource = -10108,
    telDeviceNotFound = -10109,
    telBadProcID = -10110,
    telValidateFailed = -10111,
    telAutoAnsNotOn = -10112,
    telDetAlreadyOn = -10113,
    telBadSWErr = -10114,
    telBadSampleRate = -10115,
    telNotEnoughdspBW = -10116,
};

pub const anon23281 = enum(i32) {
    errTaskNotFound = -10780,
};

pub const anon23361 = enum(i32) {
    pmBusyErr = -13000,
    pmReplyTOErr = -13001,
    pmSendStartErr = -13002,
    pmSendEndErr = -13003,
    pmRecvStartErr = -13004,
    pmRecvEndErr = -13005,
};

pub const anon23471 = enum(i32) {
    kPowerHandlerExistsForDeviceErr = -13006,
    kPowerHandlerNotFoundForDeviceErr = -13007,
    kPowerHandlerNotFoundForProcErr = -13008,
    kPowerMgtMessageNotHandled = -13009,
    kPowerMgtRequestDenied = -13010,
    kCantReportProcessorTemperatureErr = -13013,
    kProcessorTempRoutineRequiresMPLib2 = -13014,
    kNoSuchPowerSource = -13020,
    kBridgeSoftwareRunningCantSleep = -13038,
};

pub const anon23611 = enum(i32) {
    debuggingExecutionContextErr = -13880,
    debuggingDuplicateSignatureErr = -13881,
    debuggingDuplicateOptionErr = -13882,
    debuggingInvalidSignatureErr = -13883,
    debuggingInvalidOptionErr = -13884,
    debuggingInvalidNameErr = -13885,
    debuggingNoCallbackErr = -13886,
    debuggingNoMatchErr = -13887,
};

pub const anon23741 = enum(i32) {
    kHIDVersionIncompatibleErr = -13909,
    kHIDDeviceNotReady = -13910,
};

pub const anon23811 = enum(u32) {
    gestaltX86AdditionalFeatures = 2016949857,
    gestaltX86HasSSE3 = 0,
    gestaltX86HasMONITOR = 3,
    gestaltX86HasDSCPL = 4,
    gestaltX86HasVMX = 5,
    gestaltX86HasSMX = 6,
    gestaltX86HasEST = 7,
    gestaltX86HasTM2 = 8,
    gestaltX86HasSupplementalSSE3 = 9,
    gestaltX86HasCID = 10,
    gestaltX86HasCX16 = 13,
    gestaltX86HasxTPR = 14,
};

pub const anon24151 = enum(i32) {
    kModemOutOfMemory = -14000,
    kModemPreferencesMissing = -14001,
    kModemScriptMissing = -14002,
};

pub const anon24241 = enum(i32) {
    kTXNEndIterationErr = -22000,
    kTXNCannotAddFrameErr = -22001,
    kTXNInvalidFrameIDErr = -22002,
    kTXNIllegalToCrossDataBoundariesErr = -22003,
    kTXNUserCanceledOperationErr = -22004,
    kTXNBadDefaultFileTypeWarning = -22005,
    kTXNCannotSetAutoIndentErr = -22006,
    kTXNRunIndexOutofBoundsErr = -22007,
    kTXNNoMatchErr = -22008,
    kTXNAttributeTagInvalidForRunErr = -22009,
    kTXNSomeOrAllTagsInvalidForRunErr = -22010,
    kTXNInvalidRunIndex = -22011,
    kTXNAlreadyInitializedErr = -22012,
    kTXNCannotTurnTSMOffWhenUsingUnicodeErr = -22013,
    kTXNCopyNotAllowedInEchoModeErr = -22014,
    kTXNDataTypeNotAllowedErr = -22015,
    kTXNATSUIIsNotInstalledErr = -22016,
    kTXNOutsideOfLineErr = -22017,
    kTXNOutsideOfFrameErr = -22018,
};

pub const anon24501 = enum(i32) {
    printerStatusOpCodeNotSupportedErr = -25280,
};

pub const anon24561 = enum(i32) {
    errKCNotAvailable = -25291,
    errKCReadOnly = -25292,
    errKCAuthFailed = -25293,
    errKCNoSuchKeychain = -25294,
    errKCInvalidKeychain = -25295,
    errKCDuplicateKeychain = -25296,
    errKCDuplicateCallback = -25297,
    errKCInvalidCallback = -25298,
    errKCDuplicateItem = -25299,
    errKCItemNotFound = -25300,
    errKCBufferTooSmall = -25301,
    errKCDataTooLarge = -25302,
    errKCNoSuchAttr = -25303,
    errKCInvalidItemRef = -25304,
    errKCInvalidSearchRef = -25305,
    errKCNoSuchClass = -25306,
    errKCNoDefaultKeychain = -25307,
    errKCInteractionNotAllowed = -25308,
    errKCReadOnlyAttr = -25309,
    errKCWrongKCVersion = -25310,
    errKCKeySizeNotAllowed = -25311,
    errKCNoStorageModule = -25312,
    errKCNoCertificateModule = -25313,
    errKCNoPolicyModule = -25314,
    errKCInteractionRequired = -25315,
    errKCDataNotAvailable = -25316,
    errKCDataNotModifiable = -25317,
    errKCCreateChainFailed = -25318,
};

pub const anon24891 = enum(i32) {
    kUCOutputBufferTooSmall = -25340,
    kUCTextBreakLocatorMissingType = -25341,
};

pub const anon24941 = enum(i32) {
    kUCTSNoKeysAddedToObjectErr = -25342,
    kUCTSSearchListErr = -25343,
};

pub const anon24991 = enum(i32) {
    kUCTokenizerIterationFinished = -25344,
    kUCTokenizerUnknownLang = -25345,
    kUCTokenNotFound = -25346,
};

pub const anon25061 = enum(i32) {
    kMPIterationEndErr = -29275,
    kMPPrivilegedErr = -29276,
    kMPProcessCreatedErr = -29288,
    kMPProcessTerminatedErr = -29289,
    kMPTaskCreatedErr = -29290,
    kMPTaskBlockedErr = -29291,
    kMPTaskStoppedErr = -29292,
    kMPBlueBlockingErr = -29293,
    kMPDeletedErr = -29295,
    kMPTimeoutErr = -29296,
    kMPTaskAbortedErr = -29297,
    kMPInsufficientResourcesErr = -29298,
    kMPInvalidIDErr = -29299,
};

pub const anon25221 = enum(i32) {
    kMPNanokernelNeedsMemoryErr = -29294,
};

pub const anon25271 = enum(i32) {
    kCollateAttributesNotFoundErr = -29500,
    kCollateInvalidOptions = -29501,
    kCollateMissingUnicodeTableErr = -29502,
    kCollateUnicodeConvertFailedErr = -29503,
    kCollatePatternNotFoundErr = -29504,
    kCollateInvalidChar = -29505,
    kCollateBufferTooSmall = -29506,
    kCollateInvalidCollationRef = -29507,
};

pub const anon25401 = enum(i32) {
    kFNSInvalidReferenceErr = -29580,
    kFNSBadReferenceVersionErr = -29581,
    kFNSInvalidProfileErr = -29582,
    kFNSBadProfileVersionErr = -29583,
    kFNSDuplicateReferenceErr = -29584,
    kFNSMismatchErr = -29585,
    kFNSInsufficientDataErr = -29586,
    kFNSBadFlattenedSizeErr = -29587,
    kFNSNameNotFoundErr = -29589,
};

pub const anon25551 = enum(i32) {
    kLocalesBufferTooSmallErr = -30001,
    kLocalesTableFormatErr = -30002,
    kLocalesDefaultDisplayStatus = -30029,
};

pub const anon25631 = enum(i32) {
    kALMInternalErr = -30049,
    kALMGroupNotFoundErr = -30048,
    kALMNoSuchModuleErr = -30047,
    kALMModuleCommunicationErr = -30046,
    kALMDuplicateModuleErr = -30045,
    kALMInstallationErr = -30044,
    kALMDeferSwitchErr = -30043,
    kALMRebootFlagsLevelErr = -30042,
};

pub const anon25741 = enum(i32) {
    kALMLocationNotFoundErr = -30048,
};

pub const anon25801 = enum(i32) {
    kSSpInternalErr = -30340,
    kSSpVersionErr = -30341,
    kSSpCantInstallErr = -30342,
    kSSpParallelUpVectorErr = -30343,
    kSSpScaleToZeroErr = -30344,
};

pub const anon25901 = enum(i32) {
    kNSpInitializationFailedErr = -30360,
    kNSpAlreadyInitializedErr = -30361,
    kNSpTopologyNotSupportedErr = -30362,
    kNSpPipeFullErr = -30364,
    kNSpHostFailedErr = -30365,
    kNSpProtocolNotAvailableErr = -30366,
    kNSpInvalidGameRefErr = -30367,
    kNSpInvalidParameterErr = -30369,
    kNSpOTNotPresentErr = -30370,
    kNSpOTVersionTooOldErr = -30371,
    kNSpMemAllocationErr = -30373,
    kNSpAlreadyAdvertisingErr = -30374,
    kNSpNotAdvertisingErr = -30376,
    kNSpInvalidAddressErr = -30377,
    kNSpFreeQExhaustedErr = -30378,
    kNSpRemovePlayerFailedErr = -30379,
    kNSpAddressInUseErr = -30380,
    kNSpFeatureNotImplementedErr = -30381,
    kNSpNameRequiredErr = -30382,
    kNSpInvalidPlayerIDErr = -30383,
    kNSpInvalidGroupIDErr = -30384,
    kNSpNoPlayersErr = -30385,
    kNSpNoGroupsErr = -30386,
    kNSpNoHostVolunteersErr = -30387,
    kNSpCreateGroupFailedErr = -30388,
    kNSpAddPlayerFailedErr = -30389,
    kNSpInvalidDefinitionErr = -30390,
    kNSpInvalidProtocolRefErr = -30391,
    kNSpInvalidProtocolListErr = -30392,
    kNSpTimeoutErr = -30393,
    kNSpGameTerminatedErr = -30394,
    kNSpConnectFailedErr = -30395,
    kNSpSendFailedErr = -30396,
    kNSpMessageTooBigErr = -30397,
    kNSpCantBlockErr = -30398,
    kNSpJoinFailedErr = -30399,
};

pub const anon26311 = enum(i32) {
    kISpInternalErr = -30420,
    kISpSystemListErr = -30421,
    kISpBufferToSmallErr = -30422,
    kISpElementInListErr = -30423,
    kISpElementNotInListErr = -30424,
    kISpSystemInactiveErr = -30425,
    kISpDeviceInactiveErr = -30426,
    kISpSystemActiveErr = -30427,
    kISpDeviceActiveErr = -30428,
    kISpListBusyErr = -30429,
};

pub const anon26451 = enum(i32) {
    kDSpNotInitializedErr = -30440,
    kDSpSystemSWTooOldErr = -30441,
    kDSpInvalidContextErr = -30442,
    kDSpInvalidAttributesErr = -30443,
    kDSpContextAlreadyReservedErr = -30444,
    kDSpContextNotReservedErr = -30445,
    kDSpContextNotFoundErr = -30446,
    kDSpFrameRateNotReadyErr = -30447,
    kDSpConfirmSwitchWarning = -30448,
    kDSpInternalErr = -30449,
    kDSpStereoContextErr = -30450,
};

pub const anon26651 = enum(i32) {
    kFBCvTwinExceptionErr = -30500,
    kFBCnoIndexesFound = -30501,
    kFBCallocFailed = -30502,
    kFBCbadParam = -30503,
    kFBCfileNotIndexed = -30504,
    kFBCbadIndexFile = -30505,
    kFBCcompactionFailed = -30506,
    kFBCvalidationFailed = -30507,
    kFBCindexingFailed = -30508,
    kFBCcommitFailed = -30509,
    kFBCdeletionFailed = -30510,
    kFBCmoveFailed = -30511,
    kFBCtokenizationFailed = -30512,
    kFBCmergingFailed = -30513,
    kFBCindexCreationFailed = -30514,
    kFBCaccessorStoreFailed = -30515,
    kFBCaddDocFailed = -30516,
    kFBCflushFailed = -30517,
    kFBCindexNotFound = -30518,
    kFBCnoSearchSession = -30519,
    kFBCindexingCanceled = -30520,
    kFBCaccessCanceled = -30521,
    kFBCindexFileDestroyed = -30522,
    kFBCindexNotAvailable = -30523,
    kFBCsearchFailed = -30524,
    kFBCsomeFilesNotIndexed = -30525,
    kFBCillegalSessionChange = -30526,
    kFBCanalysisNotAvailable = -30527,
    kFBCbadIndexFileVersion = -30528,
    kFBCsummarizationCanceled = -30529,
    kFBCindexDiskIOFailed = -30530,
    kFBCbadSearchSession = -30531,
    kFBCnoSuchHit = -30532,
};

pub const anon27041 = enum(i32) {
    notAQTVRMovieErr = -30540,
    constraintReachedErr = -30541,
    callNotSupportedByNodeErr = -30542,
    selectorNotSupportedByNodeErr = -30543,
    invalidNodeIDErr = -30544,
    invalidViewStateErr = -30545,
    timeNotInViewErr = -30546,
    propertyNotSupportedByNodeErr = -30547,
    settingNotSupportedByNodeErr = -30548,
    limitReachedErr = -30549,
    invalidNodeFormatErr = -30550,
    invalidHotSpotIDErr = -30551,
    noMemoryNodeFailedInitialize = -30552,
    streamingNodeNotReadyErr = -30553,
    qtvrLibraryLoadErr = -30554,
    qtvrUninitialized = -30555,
};

pub const anon27251 = enum(i32) {
    themeInvalidBrushErr = -30560,
    themeProcessRegisteredErr = -30561,
    themeProcessNotRegisteredErr = -30562,
    themeBadTextColorErr = -30563,
    themeHasNoAccentsErr = -30564,
    themeBadCursorIndexErr = -30565,
    themeScriptFontNotFoundErr = -30566,
    themeMonitorDepthNotSupportedErr = -30567,
    themeNoAppropriateBrushErr = -30568,
};

pub const anon27431 = enum(i32) {
    errMessageNotSupported = -30580,
    errDataNotSupported = -30581,
    errControlDoesntSupportFocus = -30582,
    errUnknownControl = -30584,
    errCouldntSetFocus = -30585,
    errNoRootControl = -30586,
    errRootAlreadyExists = -30587,
    errInvalidPartCode = -30588,
    errControlsAlreadyExist = -30589,
    errControlIsNotEmbedder = -30590,
    errDataSizeMismatch = -30591,
    errControlHiddenOrDisabled = -30592,
    errCantEmbedIntoSelf = -30594,
    errCantEmbedRoot = -30595,
    errItemNotControl = -30596,
    controlInvalidDataVersionErr = -30597,
    controlPropertyInvalid = -5603,
    controlPropertyNotFoundErr = -5604,
    controlHandleInvalidErr = -30599,
};

pub const anon28871 = enum(i32) {
    kURLInvalidURLReferenceError = -30770,
    kURLProgressAlreadyDisplayedError = -30771,
    kURLDestinationExistsError = -30772,
    kURLInvalidURLError = -30773,
    kURLUnsupportedSchemeError = -30774,
    kURLServerBusyError = -30775,
    kURLAuthenticationError = -30776,
    kURLPropertyNotYetKnownError = -30777,
    kURLUnknownPropertyError = -30778,
    kURLPropertyBufferTooSmallError = -30779,
    kURLUnsettablePropertyError = -30780,
    kURLInvalidCallError = -30781,
    kURLFileEmptyError = -30783,
    kURLExtensionFailureError = -30785,
    kURLInvalidConfigurationError = -30786,
    kURLAccessNotAvailableError = -30787,
    kURL68kNotSupportedError = -30788,
};

pub const anon29161 = enum(i32) {
    errCppGeneral = -32000,
    errCppbad_alloc = -32001,
    errCppbad_cast = -32002,
    errCppbad_exception = -32003,
    errCppbad_typeid = -32004,
    errCpplogic_error = -32005,
    errCppdomain_error = -32006,
    errCppinvalid_argument = -32007,
    errCpplength_error = -32008,
    errCppout_of_range = -32009,
    errCppruntime_error = -32010,
    errCppoverflow_error = -32011,
    errCpprange_error = -32012,
    errCppunderflow_error = -32013,
    errCppios_base_failure = -32014,
    errCppLastSystemDefinedError = -32020,
    errCppLastUserDefinedError = -32049,
};

pub const anon29371 = enum(i32) {
    badComponentInstance = -2147450879,
    badComponentSelector = -2147450878,
};

pub const anon29441 = enum(u32) {
    dsBusError = 1,
    dsAddressErr = 2,
    dsIllInstErr = 3,
    dsZeroDivErr = 4,
    dsChkErr = 5,
    dsOvflowErr = 6,
    dsPrivErr = 7,
    dsTraceErr = 8,
    dsLineAErr = 9,
    dsLineFErr = 10,
    dsMiscErr = 11,
    dsCoreErr = 12,
    dsIrqErr = 13,
    dsIOCoreErr = 14,
    dsLoadErr = 15,
    dsFPErr = 16,
    dsNoPackErr = 17,
    dsNoPk1 = 18,
    dsNoPk2 = 19,
};

pub const anon29661 = enum(u32) {
    dsNoPk3 = 20,
    dsNoPk4 = 21,
    dsNoPk5 = 22,
    dsNoPk6 = 23,
    dsNoPk7 = 24,
    dsMemFullErr = 25,
    dsBadLaunch = 26,
    dsFSErr = 27,
    dsStknHeap = 28,
    negZcbFreeErr = 33,
    dsFinderErr = 41,
    dsBadSlotInt = 51,
    dsBadSANEOpcode = 81,
    dsBadPatchHeader = 83,
    menuPrgErr = 84,
    dsMBarNFnd = 85,
    dsHMenuFindErr = 86,
    dsWDEFNotFound = 87,
    dsCDEFNotFound = 88,
    dsMDEFNotFound = 89,
};

pub const anon29891 = enum(u32) {
    dsNoFPU = 90,
    dsNoPatch = 98,
    dsBadPatch = 99,
    dsParityErr = 101,
    dsOldSystem = 102,
    ds32BitMode = 103,
    dsNeedToWriteBootBlocks = 104,
    dsNotEnoughRAMToBoot = 105,
    dsBufPtrTooLow = 106,
    dsVMDeferredFuncTableFull = 112,
    dsVMBadBackingStore = 113,
    dsCantHoldSystemHeap = 114,
    dsSystemRequiresPowerPC = 116,
    dsGibblyMovedToDisabledFolder = 117,
    dsUnBootableSystem = 118,
    dsMustUseFCBAccessors = 119,
    dsMacOSROMVersionTooOld = 120,
    dsLostConnectionToNetworkDisk = 121,
    dsRAMDiskTooBig = 122,
    dsWriteToSupervisorStackGuardPage = 128,
    dsReinsert = 30,
    shutDownAlert = 42,
    dsShutDownOrRestart = 20000,
    dsSwitchOffOrRestart = 20001,
    dsForcedQuit = 20002,
    dsRemoveDisk = 20003,
    dsDirtyDisk = 20004,
    dsShutDownOrResume = 20109,
    dsSCSIWarn = 20010,
    dsMBSysError = 29200,
    dsMBFlpySysError = 29201,
    dsMBATASysError = 29202,
    dsMBATAPISysError = 29203,
    dsMBExternFlpySysError = 29204,
    dsPCCardATASysError = 29205,
};

pub const anon30321 = enum(i32) {
    dsNoExtsMacsBug = -1,
    dsNoExtsDisassembler = -2,
    dsMacsBugInstalled = -10,
    dsDisassemblerInstalled = -11,
    dsExtensionsDisabled = -13,
    dsGreeting = 40,
    dsSysErr = 32767,
    WDEFNFnd = 87,
};

pub const anon30441 = enum(i32) {
    CDEFNFnd = 88,
    dsNotThe1 = 31,
    dsBadStartupDisk = 42,
    dsSystemFileErr = 43,
    dsHD20Installed = -12,
    mBarNFnd = -126,
    fsDSIntErr = -127,
    hMenuFindErr = -127,
    userBreak = -490,
    strUserBreak = -491,
    exUserBreak = -492,
};

pub const anon30591 = enum(u32) {
    dsBadLibrary = 1010,
    dsMixedModeFailure = 1011,
};

pub const anon30721 = enum(u32) {
    kPOSIXErrorBase = 100000,
    kPOSIXErrorEPERM = 100001,
    kPOSIXErrorENOENT = 100002,
    kPOSIXErrorESRCH = 100003,
    kPOSIXErrorEINTR = 100004,
    kPOSIXErrorEIO = 100005,
    kPOSIXErrorENXIO = 100006,
    kPOSIXErrorE2BIG = 100007,
    kPOSIXErrorENOEXEC = 100008,
    kPOSIXErrorEBADF = 100009,
    kPOSIXErrorECHILD = 100010,
    kPOSIXErrorEDEADLK = 100011,
    kPOSIXErrorENOMEM = 100012,
    kPOSIXErrorEACCES = 100013,
    kPOSIXErrorEFAULT = 100014,
    kPOSIXErrorENOTBLK = 100015,
    kPOSIXErrorEBUSY = 100016,
    kPOSIXErrorEEXIST = 100017,
    kPOSIXErrorEXDEV = 100018,
    kPOSIXErrorENODEV = 100019,
    kPOSIXErrorENOTDIR = 100020,
    kPOSIXErrorEISDIR = 100021,
    kPOSIXErrorEINVAL = 100022,
    kPOSIXErrorENFILE = 100023,
    kPOSIXErrorEMFILE = 100024,
    kPOSIXErrorENOTTY = 100025,
    kPOSIXErrorETXTBSY = 100026,
    kPOSIXErrorEFBIG = 100027,
    kPOSIXErrorENOSPC = 100028,
    kPOSIXErrorESPIPE = 100029,
    kPOSIXErrorEROFS = 100030,
    kPOSIXErrorEMLINK = 100031,
    kPOSIXErrorEPIPE = 100032,
    kPOSIXErrorEDOM = 100033,
    kPOSIXErrorERANGE = 100034,
    kPOSIXErrorEAGAIN = 100035,
    kPOSIXErrorEINPROGRESS = 100036,
    kPOSIXErrorEALREADY = 100037,
    kPOSIXErrorENOTSOCK = 100038,
    kPOSIXErrorEDESTADDRREQ = 100039,
    kPOSIXErrorEMSGSIZE = 100040,
    kPOSIXErrorEPROTOTYPE = 100041,
    kPOSIXErrorENOPROTOOPT = 100042,
    kPOSIXErrorEPROTONOSUPPORT = 100043,
    kPOSIXErrorESOCKTNOSUPPORT = 100044,
    kPOSIXErrorENOTSUP = 100045,
    kPOSIXErrorEPFNOSUPPORT = 100046,
    kPOSIXErrorEAFNOSUPPORT = 100047,
    kPOSIXErrorEADDRINUSE = 100048,
    kPOSIXErrorEADDRNOTAVAIL = 100049,
    kPOSIXErrorENETDOWN = 100050,
    kPOSIXErrorENETUNREACH = 100051,
    kPOSIXErrorENETRESET = 100052,
    kPOSIXErrorECONNABORTED = 100053,
    kPOSIXErrorECONNRESET = 100054,
    kPOSIXErrorENOBUFS = 100055,
    kPOSIXErrorEISCONN = 100056,
    kPOSIXErrorENOTCONN = 100057,
    kPOSIXErrorESHUTDOWN = 100058,
    kPOSIXErrorETOOMANYREFS = 100059,
    kPOSIXErrorETIMEDOUT = 100060,
    kPOSIXErrorECONNREFUSED = 100061,
    kPOSIXErrorELOOP = 100062,
    kPOSIXErrorENAMETOOLONG = 100063,
    kPOSIXErrorEHOSTDOWN = 100064,
    kPOSIXErrorEHOSTUNREACH = 100065,
    kPOSIXErrorENOTEMPTY = 100066,
    kPOSIXErrorEPROCLIM = 100067,
    kPOSIXErrorEUSERS = 100068,
    kPOSIXErrorEDQUOT = 100069,
    kPOSIXErrorESTALE = 100070,
    kPOSIXErrorEREMOTE = 100071,
    kPOSIXErrorEBADRPC = 100072,
    kPOSIXErrorERPCMISMATCH = 100073,
    kPOSIXErrorEPROGUNAVAIL = 100074,
    kPOSIXErrorEPROGMISMATCH = 100075,
    kPOSIXErrorEPROCUNAVAIL = 100076,
    kPOSIXErrorENOLCK = 100077,
    kPOSIXErrorENOSYS = 100078,
    kPOSIXErrorEFTYPE = 100079,
    kPOSIXErrorEAUTH = 100080,
    kPOSIXErrorENEEDAUTH = 100081,
    kPOSIXErrorEPWROFF = 100082,
    kPOSIXErrorEDEVERR = 100083,
    kPOSIXErrorEOVERFLOW = 100084,
    kPOSIXErrorEBADEXEC = 100085,
    kPOSIXErrorEBADARCH = 100086,
    kPOSIXErrorESHLIBVERS = 100087,
    kPOSIXErrorEBADMACHO = 100088,
    kPOSIXErrorECANCELED = 100089,
    kPOSIXErrorEIDRM = 100090,
    kPOSIXErrorENOMSG = 100091,
    kPOSIXErrorEILSEQ = 100092,
    kPOSIXErrorENOATTR = 100093,
    kPOSIXErrorEBADMSG = 100094,
    kPOSIXErrorEMULTIHOP = 100095,
    kPOSIXErrorENODATA = 100096,
    kPOSIXErrorENOLINK = 100097,
    kPOSIXErrorENOSR = 100098,
    kPOSIXErrorENOSTR = 100099,
    kPOSIXErrorEPROTO = 100100,
    kPOSIXErrorETIME = 100101,
    kPOSIXErrorEOPNOTSUPP = 100102,
};

extern "CoreServices" fn SysError(errorCode: i16) callconv(.C) void;
pub const sysError = SysError;

pub const anon411 = enum(u32) {
    kAEAND = 1095648288,
    kAEOR = 1330782240,
    kAENOT = 1313821728,
    kAEFirst = 1718186611,
    kAELast = 1818325876,
    kAEMiddle = 1835623524,
    kAEAny = 1634629920,
    kAEAll = 1634495520,
    kAENext = 1852143732,
    kAEPrevious = 1886545270,
    keyAECompOperator = 1919249519,
    keyAELogicalTerms = 1952805485,
    keyAELogicalOperator = 1819240291,
    keyAEObject1 = 1868720689,
    keyAEObject2 = 1868720690,
    keyAEDesiredClass = 2002873972,
    keyAEContainer = 1718775661,
    keyAEKeyForm = 1718579821,
    keyAEKeyData = 1936026724,
};

pub const UTCDateTime = extern struct {
    highSeconds: objc.UInt16,
    lowSeconds: objc.UInt32,
    fraction: objc.UInt16,
};

pub const UTCDateTimePtr = ?*UTCDateTime;

pub const UTCDateTimeHandle = ?*UTCDateTimePtr;

pub const LocalDateTime = extern struct {
    highSeconds: objc.UInt16,
    lowSeconds: objc.UInt32,
    fraction: objc.UInt16,
};

pub const LocalDateTimePtr = ?*LocalDateTime;

pub const LocalDateTimeHandle = ?*LocalDateTimePtr;

pub const anon481 = enum(u32) {
    kSleepRequest = 1,
    kSleepDemand = 2,
    kSleepWakeUp = 3,
    kSleepRevoke = 4,
    kSleepUnlock = 4,
    kSleepDeny = 5,
    kSleepNow = 6,
    kDozeDemand = 7,
    kDozeWakeUp = 8,
    kDozeRequest = 9,
    kEnterStandby = 10,
    kEnterRun = 11,
    kSuspendRequest = 12,
    kSuspendDemand = 13,
    kSuspendRevoke = 14,
    kSuspendWakeUp = 15,
    kGetPowerLevel = 16,
    kSetPowerLevel = 17,
    kDeviceInitiatedWake = 18,
    kWakeToDoze = 19,
    kDozeToFullWakeUp = 20,
    kGetPowerInfo = 21,
    kGetWakeOnNetInfo = 22,
    kSuspendWakeToDoze = 23,
    kEnterIdle = 24,
    kStillIdle = 25,
    kExitIdle = 26,
};

pub const TextEncodingBase = objc.UInt32;

pub const anon1191 = enum(u32) {
    kTextEncodingMacTradChinese = 2,
    kTextEncodingMacRSymbol = 8,
    kTextEncodingMacSimpChinese = 25,
    kTextEncodingMacGeez = 28,
    kTextEncodingMacEastEurRoman = 29,
    kTextEncodingMacUninterp = 32,
};

pub const anon1431 = enum(u32) {
    kTextEncodingMacFarsi = 140,
    kTextEncodingMacUkrainian = 152,
    kTextEncodingMacInuit = 236,
    kTextEncodingMacVT100 = 252,
};

pub const anon1591 = enum(u32) {
    kPassSelector = 0,
    kDontPassSelector = 8,
};

pub const anon2411 = enum(u32) {
    kTextEncodingUS_ASCII = 1536,
    kTextEncodingANSEL = 1537,
    kTextEncodingJIS_X0201_76 = 1568,
    kTextEncodingJIS_X0208_83 = 1569,
    kTextEncodingJIS_X0208_90 = 1570,
    kTextEncodingJIS_X0212_90 = 1571,
    kTextEncodingJIS_C6226_78 = 1572,
    kTextEncodingShiftJIS_X0213 = 1576,
    kTextEncodingJIS_X0213_MenKuTen = 1577,
    kTextEncodingGB_2312_80 = 1584,
    kTextEncodingGBK_95 = 1585,
    kTextEncodingGB_18030_2000 = 1586,
    kTextEncodingGB_18030_2005 = 1586,
    kTextEncodingKSC_5601_87 = 1600,
    kTextEncodingKSC_5601_92_Johab = 1601,
    kTextEncodingCNS_11643_92_P1 = 1617,
    kTextEncodingCNS_11643_92_P2 = 1618,
    kTextEncodingCNS_11643_92_P3 = 1619,
};

pub const anon2631 = enum(u32) {
    kTextEncodingISO_2022_JP = 2080,
    kTextEncodingISO_2022_JP_2 = 2081,
    kTextEncodingISO_2022_JP_1 = 2082,
    kTextEncodingISO_2022_JP_3 = 2083,
    kTextEncodingISO_2022_CN = 2096,
    kTextEncodingISO_2022_CN_EXT = 2097,
    kTextEncodingISO_2022_KR = 2112,
};

pub const anon2741 = enum(objc.OSType) {
    kAEMouseClass = 1836021107,
    kAEDown = 1685026670,
    kAEUp = 1970282528,
    kAEMoved = 1836021349,
    kAEStoppedMoving = 1937010544,
    kAEWindowClass = 2003398244,
    kAEUpdate = 1970300020,
    kAEActivate = 1633907830,
    kAEDeactivate = 1684104052,
    kAECommandClass = 1668116068,
    kAEKeyClass = 1801812323,
    kAERawKey = 1919640953,
    kAEVirtualKey = 1801812323,
    kAENavigationKey = 1851881061,
    kAEAutoDown = 1635087471,
    kAEApplicationClass = 1634758764,
    kAESuspend = 1937077104,
    kAEResume = 1920167269,
    kAEDiskEvent = 1684632427,
    kAENullEvent = 1853189228,
    kAEWakeUpEvent = 2002873189,
    kAEScrapEvent = 1935897200,
    kAEHighLevel = 1751738216,
};

pub const anon2821 = enum(u32) {
    kTextEncodingShiftJIS = 2561,
    kTextEncodingKOI8_R = 2562,
    kTextEncodingBig5 = 2563,
    kTextEncodingMacRomanLatin1 = 2564,
    kTextEncodingHZ_GB_2312 = 2565,
    kTextEncodingBig5_HKSCS_1999 = 2566,
    kTextEncodingVISCII = 2567,
    kTextEncodingKOI8_U = 2568,
    kTextEncodingBig5_E = 2569,
};

pub const anon2951 = enum(u32) {
    kTextEncodingNextStepLatin = 2817,
    kTextEncodingNextStepJapanese = 2818,
};

pub const anon3011 = enum(u32) {
    kBlessedBusErrorBait = 1760651505,
};

pub const anon3071 = enum(u32) {
    kTextEncodingMultiRun = 4095,
    kTextEncodingUnknown = 65535,
};

pub const anon3131 = enum(u32) {
    kAESocks4Protocol = 4,
    kAESocks5Protocol = 5,
};

pub const TextEncodingVariant = objc.UInt32;

pub const anon3211 = enum(u32) {
    kTextEncodingDefaultVariant = 0,
};

pub const anon3261 = enum(u32) {
    kMacRomanDefaultVariant = 0,
    kMacRomanCurrencySignVariant = 1,
    kMacRomanEuroSignVariant = 2,
};

pub const anon3331 = enum(u32) {
    kMacCyrillicDefaultVariant = 0,
    kMacCyrillicCurrSignStdVariant = 1,
    kMacCyrillicCurrSignUkrVariant = 2,
    kMacCyrillicEuroSignVariant = 3,
};

pub const anon3531 = enum(u32) {
    kMacCroatianDefaultVariant = 0,
    kMacCroatianCurrencySignVariant = 1,
    kMacCroatianEuroSignVariant = 2,
};

pub const anon3691 = enum(u32) {
    kAppleLogoIcon = 1667330156,
    kAppleMenuIcon = 1935765612,
    kBackwardArrowIcon = 1650553455,
    kFavoriteItemsIcon = 1717663346,
    kForwardArrowIcon = 1717662319,
    kGridIcon = 1735551332,
    kHelpIcon = 1751477360,
    kKeepArrangedIcon = 1634889319,
    kLockedIcon = 1819239275,
    kNoFilesIcon = 1852205420,
    kNoFolderIcon = 1852206180,
    kNoWriteIcon = 1853321844,
    kProtectedApplicationFolderIcon = 1885433968,
    kProtectedSystemFolderIcon = 1886615923,
    kRecentItemsIcon = 1919118964,
    kShortcutIcon = 1936224884,
    kSortAscendingIcon = 1634954852,
    kSortDescendingIcon = 1685286500,
    kUnlockedIcon = 1970037611,
    kConnectToIcon = 1668178804,
    kGenericWindowIcon = 1735879022,
    kQuestionMarkIcon = 1903519091,
    kDeleteAliasIcon = 1684106345,
    kEjectMediaIcon = 1701471587,
    kBurningIcon = 1651864174,
    kRightContainerArrowIcon = 1919115634,
};

pub const anon3791 = enum(u32) {
    kAEDataArray = 0,
    kAEPackedArray = 1,
    kAEDescArray = 3,
    kAEKeyDescArray = 4,
};

pub const anon3871 = enum(u32) {
    kAEHandleArray = 2,
};

pub const anon3931 = enum(u32) {
    kMacHebrewStandardVariant = 0,
    kMacHebrewFigureSpaceVariant = 1,
};

pub const anon3991 = enum(u32) {
    kMacGreekDefaultVariant = 0,
    kMacGreekNoEuroSignVariant = 1,
    kMacGreekEuroSignVariant = 2,
};

pub const anon4061 = enum(u32) {
    kMacVT100DefaultVariant = 0,
    kMacVT100CurrencySignVariant = 1,
    kMacVT100EuroSignVariant = 2,
};

pub const anon4221 = enum(u32) {
    kISOLatin1StandardVariant = 0,
    kISOLatin1MusicCDVariant = 1,
};

pub const anon4461 = enum(u32) {
    kServicesFolderType = 1937138547,
};

pub const anon4591 = enum(u32) {
    kWindowsLatin1StandardVariant = 0,
    kWindowsLatin1PalmVariant = 1,
};

pub const anon4751 = enum(u32) {
    kEUC_CN_BasicVariant = 0,
    kEUC_CN_DOSVariant = 1,
};

pub const anon4851 = enum(u32) {
    kEUC_KR_BasicVariant = 0,
    kEUC_KR_DOSVariant = 1,
};

pub const anon5061 = enum(u32) {
    kBig5_BasicVariant = 0,
    kBig5_StandardVariant = 1,
    kBig5_ETenVariant = 2,
    kBig5_DOSVariant = 3,
};

pub const anon5141 = enum(u32) {
    kMacRomanLatin1DefaultVariant = 0,
    kMacRomanLatin1StandardVariant = 2,
    kMacRomanLatin1TurkishVariant = 6,
    kMacRomanLatin1CroatianVariant = 8,
    kMacRomanLatin1IcelandicVariant = 11,
    kMacRomanLatin1RomanianVariant = 14,
};

pub const anon5241 = enum(u32) {
    kUnicodeNoCompatibilityVariant = 1,
    kUnicodeNoCorporateVariant = 4,
};

pub const anon5301 = enum(u32) {
    kMacRomanStandardVariant = 0,
    kMacIcelandicStandardVariant = 0,
    kMacIcelandicTrueTypeVariant = 1,
    kJapaneseStandardVariant = 0,
    kJapaneseStdNoVerticalsVariant = 1,
    kJapaneseBasicVariant = 2,
    kJapanesePostScriptScrnVariant = 3,
    kJapanesePostScriptPrintVariant = 4,
    kJapaneseVertAtKuPlusTenVariant = 5,
    kTextEncodingShiftJIS_X0213_00 = 1576,
    kHebrewStandardVariant = 0,
    kHebrewFigureSpaceVariant = 1,
    kUnicodeCanonicalDecompVariant = 2,
    kUnicodeMaxDecomposedVariant = 2,
    kUnicodeCanonicalCompVariant = 3,
    kUnicodeNoComposedVariant = 3,
};

pub const TextEncodingFormat = objc.UInt32;

pub const anon5591 = enum(u32) {
    kTextEncodingDefaultFormat = 0,
    kUnicodeUTF16Format = 0,
    kUnicodeUTF7Format = 1,
    kUnicodeUTF8Format = 2,
    kUnicodeUTF32Format = 3,
    kUnicodeUTF16BEFormat = 4,
    kUnicodeUTF16LEFormat = 5,
    kUnicodeUTF32BEFormat = 6,
    kUnicodeUTF32LEFormat = 7,
    kUnicodeSCSUFormat = 8,
    kUnicode16BitFormat = 0,
    kUnicode32BitFormat = 3,
};

pub const TextEncoding = objc.UInt32;

pub const TextEncodingNameSelector = objc.UInt32;

pub const TextEncodingRun = extern struct {
    offset: objc.ByteOffset,
    textEncoding: TextEncoding,
};

pub const TextEncodingRunPtr = ?*TextEncodingRun;

pub const ConstTextEncodingRunPtr = ?*TextEncodingRun;

pub const ScriptCodeRun = extern struct {
    offset: objc.ByteOffset,
    script: objc.ScriptCode,
};

pub const ScriptCodeRunPtr = ?*ScriptCodeRun;

pub const ConstScriptCodeRunPtr = ?*ScriptCodeRun;

pub const TextPtr = ?*objc.UInt8;

pub const ConstTextPtr = ?*objc.UInt8;

pub const UniCharArrayPtr = ?*objc.UniChar;

pub const ConstUniCharArrayPtr = ?*objc.UniChar;

pub const UniCharArrayHandle = ?*UniCharArrayPtr;

pub const UniCharArrayOffset = u64;

pub const anon6261 = enum(i32) {
    kTextScriptDontCare = -128,
    kTextLanguageDontCare = -128,
    kTextRegionDontCare = -128,
};

pub const TECInfo = extern struct {
    format: objc.UInt16,
    tecVersion: objc.UInt16,
    tecTextConverterFeatures: objc.UInt32,
    tecUnicodeConverterFeatures: objc.UInt32,
    tecTextCommonFeatures: objc.UInt32,
    tecTextEncodingsFolderName: objc.Str31,
    tecExtensionFileName: objc.Str31,
    tecLowestTEFileVersion: objc.UInt16,
    tecHighestTEFileVersion: objc.UInt16,
};

pub const TECInfoPtr = ?*TECInfo;

pub const TECInfoHandle = ?*TECInfoPtr;

pub const anon6491 = enum(u32) {
    kTECInfoCurrentFormat = 2,
};

pub const anon6961 = enum(u32) {
    kTECKeepInfoFixBit = 0,
    kTECFallbackTextLengthFixBit = 1,
    kTECTextRunBitClearFixBit = 2,
    kTECTextToUnicodeScanFixBit = 3,
    kTECAddForceASCIIChangesBit = 4,
    kTECPreferredEncodingFixBit = 5,
    kTECAddTextRunHeuristicsBit = 6,
    kTECAddFallbackInterruptBit = 7,
};

pub const anon7071 = enum(u32) {
    kTECKeepInfoFixMask = 1,
    kTECFallbackTextLengthFixMask = 2,
    kTECTextRunBitClearFixMask = 4,
    kTECTextToUnicodeScanFixMask = 8,
    kTECAddForceASCIIChangesMask = 16,
    kTECPreferredEncodingFixMask = 32,
    kTECAddTextRunHeuristicsMask = 64,
    kTECAddFallbackInterruptMask = 128,
};

pub const anon7241 = enum(u32) {
    gestaltCRMAttr = 1668443424,
    gestaltCRMPresent = 0,
    gestaltCRMPersistentFix = 1,
    gestaltCRMToolRsrcCalls = 2,
};

pub const UCCharPropertyType = objc.SInt32;

pub const anon7401 = enum(u32) {
    kUCCharPropTypeGenlCategory = 1,
    kUCCharPropTypeCombiningClass = 2,
    kUCCharPropTypeBidiCategory = 3,
    kUCCharPropTypeDecimalDigitValue = 4,
};

pub const UCCharPropertyValue = objc.UInt32;

pub const anon7491 = enum(u32) {
    kUCGenlCatOtherNotAssigned = 0,
    kUCGenlCatOtherControl = 1,
    kUCGenlCatOtherFormat = 2,
    kUCGenlCatOtherSurrogate = 3,
    kUCGenlCatOtherPrivateUse = 4,
    kUCGenlCatMarkNonSpacing = 5,
    kUCGenlCatMarkSpacingCombining = 6,
    kUCGenlCatMarkEnclosing = 7,
    kUCGenlCatNumberDecimalDigit = 8,
    kUCGenlCatNumberLetter = 9,
    kUCGenlCatNumberOther = 10,
    kUCGenlCatSeparatorSpace = 11,
    kUCGenlCatSeparatorLine = 12,
    kUCGenlCatSeparatorParagraph = 13,
    kUCGenlCatLetterUppercase = 14,
    kUCGenlCatLetterLowercase = 15,
    kUCGenlCatLetterTitlecase = 16,
    kUCGenlCatLetterModifier = 17,
    kUCGenlCatLetterOther = 18,
    kUCGenlCatPunctConnector = 20,
    kUCGenlCatPunctDash = 21,
    kUCGenlCatPunctOpen = 22,
    kUCGenlCatPunctClose = 23,
    kUCGenlCatPunctInitialQuote = 24,
    kUCGenlCatPunctFinalQuote = 25,
    kUCGenlCatPunctOther = 26,
    kUCGenlCatSymbolMath = 28,
    kUCGenlCatSymbolCurrency = 29,
    kUCGenlCatSymbolModifier = 30,
    kUCGenlCatSymbolOther = 31,
};

pub const anon7851 = enum(u32) {
    gestaltDisplayMgrVers = 1685089398,
};

extern "CoreServices" fn CreateTextEncoding(encodingBase: TextEncodingBase, encodingVariant: TextEncodingVariant, encodingFormat: TextEncodingFormat) callconv(.C) TextEncoding;
pub const createTextEncoding = CreateTextEncoding;

extern "CoreServices" fn GetTextEncodingBase(encoding: TextEncoding) callconv(.C) TextEncodingBase;
pub const getTextEncodingBase = GetTextEncodingBase;

extern "CoreServices" fn GetTextEncodingVariant(encoding: TextEncoding) callconv(.C) TextEncodingVariant;
pub const getTextEncodingVariant = GetTextEncodingVariant;

extern "CoreServices" fn GetTextEncodingFormat(encoding: TextEncoding) callconv(.C) TextEncodingFormat;
pub const getTextEncodingFormat = GetTextEncodingFormat;

extern "CoreServices" fn ResolveDefaultTextEncoding(encoding: TextEncoding) callconv(.C) TextEncoding;
pub const resolveDefaultTextEncoding = ResolveDefaultTextEncoding;

extern "CoreServices" fn GetTextEncodingName(
    iEncoding: TextEncoding,
    iNamePartSelector: TextEncodingNameSelector,
    iPreferredRegion: objc.RegionCode,
    iPreferredEncoding: TextEncoding,
    iOutputBufLen: objc.ByteCount,
    oNameLength: ?*objc.ByteCount,
    oActualRegion: ?*objc.RegionCode,
    oActualEncoding: ?*TextEncoding,
    oEncodingName: TextPtr,
) callconv(.C) objc.OSStatus;
pub const getTextEncodingName = GetTextEncodingName;

extern "CoreServices" fn TECGetInfo(tecInfo: ?*TECInfoHandle) callconv(.C) objc.OSStatus;
pub const tecGetInfo = TECGetInfo;

extern "CoreServices" fn UpgradeScriptInfoToTextEncoding(
    iTextScriptID: objc.ScriptCode,
    iTextLanguageID: objc.LangCode,
    iRegionID: objc.RegionCode,
    iTextFontname: objc.ConstStr255Param,
    oEncoding: ?*TextEncoding,
) callconv(.C) objc.OSStatus;
pub const upgradeScriptInfoToTextEncoding = UpgradeScriptInfoToTextEncoding;

extern "CoreServices" fn RevertTextEncodingToScriptInfo(
    iEncoding: TextEncoding,
    oTextScriptID: ?*objc.ScriptCode,
    oTextLanguageID: ?*objc.LangCode,
    oTextFontname: objc.Str255,
) callconv(.C) objc.OSStatus;
pub const revertTextEncodingToScriptInfo = RevertTextEncodingToScriptInfo;

extern "CoreServices" fn GetTextEncodingFromScriptInfo(
    iTextScriptID: objc.ScriptCode,
    iTextLanguageID: objc.LangCode,
    iTextRegionID: objc.RegionCode,
    oEncoding: ?*TextEncoding,
) callconv(.C) objc.OSStatus;
pub const getTextEncodingFromScriptInfo = GetTextEncodingFromScriptInfo;

extern "CoreServices" fn GetScriptInfoFromTextEncoding(iEncoding: TextEncoding, oTextScriptID: ?*objc.ScriptCode, oTextLanguageID: ?*objc.LangCode) callconv(.C) objc.OSStatus;
pub const getScriptInfoFromTextEncoding = GetScriptInfoFromTextEncoding;

extern "CoreServices" fn NearestMacTextEncodings(generalEncoding: TextEncoding, bestMacEncoding: ?*TextEncoding, alternateMacEncoding: ?*TextEncoding) callconv(.C) objc.OSStatus;
pub const nearestMacTextEncodings = NearestMacTextEncodings;

extern "CoreServices" fn UCGetCharProperty(
    charPtr: ?*objc.UniChar,
    textLength: objc.UniCharCount,
    propType: UCCharPropertyType,
    propValue: ?*UCCharPropertyValue,
) callconv(.C) objc.OSStatus;
pub const ucGetCharProperty = UCGetCharProperty;

pub const anon11071 = enum(u32) {
    kUCHighSurrogateRangeStart = 55296,
    kUCHighSurrogateRangeEnd = 56319,
    kUCLowSurrogateRangeStart = 56320,
    kUCLowSurrogateRangeEnd = 57343,
};

extern "CoreServices" fn UCIsSurrogateHighCharacter(character: objc.UniChar) callconv(.C) objc.Boolean;
pub const ucIsSurrogateHighCharacter = UCIsSurrogateHighCharacter;

extern "CoreServices" fn UCIsSurrogateLowCharacter(character: objc.UniChar) callconv(.C) objc.Boolean;
pub const ucIsSurrogateLowCharacter = UCIsSurrogateLowCharacter;

extern "CoreServices" fn UCGetUnicodeScalarValueForSurrogatePair(surrogateHigh: objc.UniChar, surrogateLow: objc.UniChar) callconv(.C) objc.UnicodeScalarValue;
pub const ucGetUnicodeScalarValueForSurrogatePair = UCGetUnicodeScalarValueForSurrogatePair;

pub const anon461 = enum(u32) {
    kTECSignature = 1701733238,
    kTECUnicodePluginSignature = 1886744169,
    kTECJapanesePluginSignature = 1886023790,
    kTECChinesePluginSignature = 1887070319,
    kTECKoreanPluginSignature = 1886089074,
};

pub const anon511 = enum(u32) {
    kHuge1BitMask = 1768122403,
    kHuge4BitData = 1768122420,
    kHuge8BitData = 1768122424,
    kHuge32BitData = 1768436530,
    kHuge8BitMask = 1748528491,
};

pub const CallingConventionType = u16;

pub const anon571 = enum(u32) {
    kPascalStackBased = 0,
    kCStackBased = 1,
    kRegisterBased = 2,
    kD0DispatchedPascalStackBased = 8,
    kD1DispatchedPascalStackBased = 12,
    kD0DispatchedCStackBased = 9,
    kStackDispatchedPascalStackBased = 14,
    kThinkCStackBased = 5,
};

pub const ISAType = objc.SInt8;

pub const anon751 = enum(i32) {
    kClassicDomain = -32762,
};

pub const RTAType = objc.SInt8;

pub const anon871 = enum(i32) {
    genericDocumentIconResource = -4000,
    genericStationeryIconResource = -3985,
    genericEditionFileIconResource = -3989,
    genericApplicationIconResource = -3996,
    genericDeskAccessoryIconResource = -3991,
    genericFolderIconResource = -3999,
    privateFolderIconResource = -3994,
    floppyIconResource = -3998,
    trashIconResource = -3993,
    genericRAMDiskIconResource = -3988,
    genericCDROMIconResource = -3987,
    desktopIconResource = -3992,
    openFolderIconResource = -3997,
    genericHardDiskIconResource = -3995,
    genericFileServerIconResource = -3972,
    genericSuitcaseIconResource = -3970,
    genericMoverObjectIconResource = -3969,
    genericPreferencesIconResource = -3971,
    genericQueryDocumentIconResource = -16506,
    genericExtensionIconResource = -16415,
    systemFolderIconResource = -3983,
    appleMenuFolderIconResource = -3982,
};

pub const anon1081 = enum(u32) {
    kRegisterD0 = 0,
    kRegisterD1 = 1,
    kRegisterD2 = 2,
    kRegisterD3 = 3,
    kRegisterD4 = 8,
    kRegisterD5 = 9,
    kRegisterD6 = 10,
    kRegisterD7 = 11,
    kRegisterA0 = 4,
    kRegisterA1 = 5,
    kRegisterA2 = 6,
    kRegisterA3 = 7,
    kRegisterA4 = 12,
    kRegisterA5 = 13,
    kRegisterA6 = 14,
    kCCRegisterCBit = 16,
    kCCRegisterVBit = 17,
    kCCRegisterZBit = 18,
    kCCRegisterNBit = 19,
    kCCRegisterXBit = 20,
};

pub const registerSelectorType = u16;

pub const anon1331 = enum(u32) {
    kNoByteCode = 0,
    kOneByteCode = 1,
    kTwoByteCode = 2,
    kFourByteCode = 3,
};

pub const ProcInfoType = u64;

pub const RoutineFlagsType = u16;

pub const anon1441 = enum(u32) {
    kUnicodeMatchUnicodeBaseBit = 0,
    kUnicodeMatchUnicodeVariantBit = 1,
    kUnicodeMatchUnicodeFormatBit = 2,
    kUnicodeMatchOtherBaseBit = 3,
    kUnicodeMatchOtherVariantBit = 4,
    kUnicodeMatchOtherFormatBit = 5,
};

pub const anon1641 = enum(u32) {
    kSystemIconsCreator = 1835098995,
};

pub const anon1691 = enum(u32) {
    kProcDescriptorIsProcPtr = 0,
    kProcDescriptorIsIndex = 32,
};

pub const RoutineRecord = extern struct {
    procInfo: ProcInfoType,
    reserved1: objc.SInt8,
    ISA: ISAType,
    routineFlags: RoutineFlagsType,
    procDescriptor: objc.ProcPtr,
    reserved2: objc.UInt32,
    selector: objc.UInt32,
};

pub const RoutineRecordPtr = ?*RoutineRecord;

pub const RoutineRecordHandle = ?*RoutineRecordPtr;

pub const RDFlagsType = objc.UInt8;

pub const RoutineDescriptor = extern struct {
    goMixedModeTrap: objc.UInt16,
    version: objc.SInt8,
    routineDescriptorFlags: RDFlagsType,
    reserved1: objc.UInt32,
    reserved2: objc.UInt8,
    selectorInfo: objc.UInt8,
    routineCount: objc.UInt16,
    routineRecords: [1]RoutineRecord,
};

pub const RoutineDescriptorPtr = ?*RoutineDescriptor;

pub const RoutineDescriptorHandle = ?*RoutineDescriptorPtr;

pub const MixedModeStateRecord = extern struct {
    state1: objc.UInt32,
    state2: objc.UInt32,
    state3: objc.UInt32,
    state4: objc.UInt32,
};

pub const anon2581 = enum(u32) {
    kAnyPort = 0,
};

pub const anon2901 = enum(u32) {
    kSpecialCaseHighHook = 0,
    kSpecialCaseCaretHook = 0,
    kSpecialCaseEOLHook = 1,
    kSpecialCaseWidthHook = 2,
    kSpecialCaseTextWidthHook = 2,
    kSpecialCaseNWidthHook = 3,
    kSpecialCaseDrawHook = 4,
    kSpecialCaseHitTestHook = 5,
    kSpecialCaseTEFindWord = 6,
    kSpecialCaseProtocolHandler = 7,
    kSpecialCaseSocketListener = 8,
    kSpecialCaseTERecalc = 9,
    kSpecialCaseTEDoText = 10,
    kSpecialCaseGNEFilterProc = 11,
    kSpecialCaseMBarHook = 12,
};

pub const anon981 = enum(u32) {
    kCollectionUser0Mask = 1,
    kCollectionUser1Mask = 2,
    kCollectionUser2Mask = 4,
    kCollectionUser3Mask = 8,
    kCollectionUser4Mask = 16,
    kCollectionUser5Mask = 32,
    kCollectionUser6Mask = 64,
    kCollectionUser7Mask = 128,
    kCollectionUser8Mask = 256,
    kCollectionUser9Mask = 512,
    kCollectionUser10Mask = 1024,
    kCollectionUser11Mask = 2048,
    kCollectionUser12Mask = 4096,
    kCollectionUser13Mask = 8192,
    kCollectionUser14Mask = 16384,
    kCollectionUser15Mask = 32768,
    kCollectionReserved0Mask = 65536,
    kCollectionReserved1Mask = 131072,
    kCollectionReserved2Mask = 262144,
    kCollectionReserved3Mask = 524288,
    kCollectionReserved4Mask = 1048576,
    kCollectionReserved5Mask = 2097152,
    kCollectionReserved6Mask = 4194304,
    kCollectionReserved7Mask = 8388608,
    kCollectionReserved8Mask = 16777216,
    kCollectionReserved9Mask = 33554432,
    kCollectionReserved10Mask = 67108864,
    kCollectionReserved11Mask = 134217728,
    kCollectionReserved12Mask = 268435456,
    kCollectionReserved13Mask = 536870912,
    kCollectionPersistenceMask = 1073741824,
    kCollectionLockMask = -2147483648,
};

pub const OpaqueCollection = extern struct {};

pub const Collection = ?*OpaqueCollection;

pub const CollectionTag = objc.FourCharCode;

pub const CollectionFlattenProcPtr = ?*const fn (objc.SInt32, ?*anyopaque, ?*anyopaque) callconv(.C) objc.OSErr;

pub const CollectionExceptionProcPtr = ?*const fn (Collection, objc.OSErr) callconv(.C) objc.OSErr;

pub const CollectionFlattenUPP = CollectionFlattenProcPtr;

pub const CollectionExceptionUPP = CollectionExceptionProcPtr;

extern "CoreServices" fn NewCollectionFlattenUPP(userRoutine: CollectionFlattenProcPtr) callconv(.C) CollectionFlattenUPP;
pub const newCollectionFlattenUPP = NewCollectionFlattenUPP;

extern "CoreServices" fn NewCollectionExceptionUPP(userRoutine: CollectionExceptionProcPtr) callconv(.C) CollectionExceptionUPP;
pub const newCollectionExceptionUPP = NewCollectionExceptionUPP;

extern "CoreServices" fn DisposeCollectionFlattenUPP(userUPP: CollectionFlattenUPP) callconv(.C) void;
pub const disposeCollectionFlattenUPP = DisposeCollectionFlattenUPP;

extern "CoreServices" fn DisposeCollectionExceptionUPP(userUPP: CollectionExceptionUPP) callconv(.C) void;
pub const disposeCollectionExceptionUPP = DisposeCollectionExceptionUPP;

extern "CoreServices" fn InvokeCollectionFlattenUPP(
    size: objc.SInt32,
    data: ?*anyopaque,
    refCon: ?*anyopaque,
    userUPP: CollectionFlattenUPP,
) callconv(.C) objc.OSErr;
pub const invokeCollectionFlattenUPP = InvokeCollectionFlattenUPP;

extern "CoreServices" fn InvokeCollectionExceptionUPP(c: Collection, status: objc.OSErr, userUPP: CollectionExceptionUPP) callconv(.C) objc.OSErr;
pub const invokeCollectionExceptionUPP = InvokeCollectionExceptionUPP;

extern "CoreServices" fn NewCollection() callconv(.C) Collection;
pub const newCollection = NewCollection;

extern "CoreServices" fn DisposeCollection(c: Collection) callconv(.C) void;
pub const disposeCollection = DisposeCollection;

extern "CoreServices" fn CloneCollection(c: Collection) callconv(.C) Collection;
pub const cloneCollection = CloneCollection;

extern "CoreServices" fn CountCollectionOwners(c: Collection) callconv(.C) objc.SInt32;
pub const countCollectionOwners = CountCollectionOwners;

extern "CoreServices" fn RetainCollection(c: Collection) callconv(.C) objc.OSStatus;
pub const retainCollection = RetainCollection;

extern "CoreServices" fn ReleaseCollection(c: Collection) callconv(.C) objc.OSStatus;
pub const releaseCollection = ReleaseCollection;

extern "CoreServices" fn GetCollectionRetainCount(c: Collection) callconv(.C) objc.ItemCount;
pub const getCollectionRetainCount = GetCollectionRetainCount;

extern "CoreServices" fn CopyCollection(srcCollection: Collection, dstCollection: Collection) callconv(.C) Collection;
pub const copyCollection = CopyCollection;

extern "CoreServices" fn GetCollectionDefaultAttributes(c: Collection) callconv(.C) objc.SInt32;
pub const getCollectionDefaultAttributes = GetCollectionDefaultAttributes;

extern "CoreServices" fn SetCollectionDefaultAttributes(c: Collection, whichAttributes: objc.SInt32, newAttributes: objc.SInt32) callconv(.C) void;
pub const setCollectionDefaultAttributes = SetCollectionDefaultAttributes;

extern "CoreServices" fn CountCollectionItems(c: Collection) callconv(.C) objc.SInt32;
pub const countCollectionItems = CountCollectionItems;

extern "CoreServices" fn AddCollectionItem(
    c: Collection,
    tag: CollectionTag,
    id: objc.SInt32,
    itemSize: objc.SInt32,
    itemData: ?*anyopaque,
) callconv(.C) objc.OSErr;
pub const addCollectionItem = AddCollectionItem;

extern "CoreServices" fn GetCollectionItem(
    c: Collection,
    tag: CollectionTag,
    id: objc.SInt32,
    itemSize: ?*objc.SInt32,
    itemData: ?*anyopaque,
) callconv(.C) objc.OSErr;
pub const getCollectionItem = GetCollectionItem;

extern "CoreServices" fn RemoveCollectionItem(c: Collection, tag: CollectionTag, id: objc.SInt32) callconv(.C) objc.OSErr;
pub const removeCollectionItem = RemoveCollectionItem;

extern "CoreServices" fn SetCollectionItemInfo(
    c: Collection,
    tag: CollectionTag,
    id: objc.SInt32,
    whichAttributes: objc.SInt32,
    newAttributes: objc.SInt32,
) callconv(.C) objc.OSErr;
pub const setCollectionItemInfo = SetCollectionItemInfo;

extern "CoreServices" fn GetCollectionItemInfo(
    c: Collection,
    tag: CollectionTag,
    id: objc.SInt32,
    itemIndex: ?*objc.SInt32,
    itemSize: ?*objc.SInt32,
    attributes: ?*objc.SInt32,
) callconv(.C) objc.OSErr;
pub const getCollectionItemInfo = GetCollectionItemInfo;

extern "CoreServices" fn ReplaceIndexedCollectionItem(
    c: Collection,
    itemIndex: objc.SInt32,
    itemSize: objc.SInt32,
    itemData: ?*anyopaque,
) callconv(.C) objc.OSErr;
pub const replaceIndexedCollectionItem = ReplaceIndexedCollectionItem;

extern "CoreServices" fn GetIndexedCollectionItem(
    c: Collection,
    itemIndex: objc.SInt32,
    itemSize: ?*objc.SInt32,
    itemData: ?*anyopaque,
) callconv(.C) objc.OSErr;
pub const getIndexedCollectionItem = GetIndexedCollectionItem;

extern "CoreServices" fn RemoveIndexedCollectionItem(c: Collection, itemIndex: objc.SInt32) callconv(.C) objc.OSErr;
pub const removeIndexedCollectionItem = RemoveIndexedCollectionItem;

extern "CoreServices" fn SetIndexedCollectionItemInfo(
    c: Collection,
    itemIndex: objc.SInt32,
    whichAttributes: objc.SInt32,
    newAttributes: objc.SInt32,
) callconv(.C) objc.OSErr;
pub const setIndexedCollectionItemInfo = SetIndexedCollectionItemInfo;

extern "CoreServices" fn GetIndexedCollectionItemInfo(
    c: Collection,
    itemIndex: objc.SInt32,
    tag: ?*CollectionTag,
    id: ?*objc.SInt32,
    itemSize: ?*objc.SInt32,
    attributes: ?*objc.SInt32,
) callconv(.C) objc.OSErr;
pub const getIndexedCollectionItemInfo = GetIndexedCollectionItemInfo;

extern "CoreServices" fn CollectionTagExists(c: Collection, tag: CollectionTag) callconv(.C) objc.Boolean;
pub const collectionTagExists = CollectionTagExists;

extern "CoreServices" fn CountCollectionTags(c: Collection) callconv(.C) objc.SInt32;
pub const countCollectionTags = CountCollectionTags;

extern "CoreServices" fn GetIndexedCollectionTag(c: Collection, tagIndex: objc.SInt32, tag: ?*CollectionTag) callconv(.C) objc.OSErr;
pub const getIndexedCollectionTag = GetIndexedCollectionTag;

extern "CoreServices" fn CountTaggedCollectionItems(c: Collection, tag: CollectionTag) callconv(.C) objc.SInt32;
pub const countTaggedCollectionItems = CountTaggedCollectionItems;

extern "CoreServices" fn GetTaggedCollectionItem(
    c: Collection,
    tag: CollectionTag,
    whichItem: objc.SInt32,
    itemSize: ?*objc.SInt32,
    itemData: ?*anyopaque,
) callconv(.C) objc.OSErr;
pub const getTaggedCollectionItem = GetTaggedCollectionItem;

extern "CoreServices" fn GetTaggedCollectionItemInfo(
    c: Collection,
    tag: CollectionTag,
    whichItem: objc.SInt32,
    id: ?*objc.SInt32,
    itemIndex: ?*objc.SInt32,
    itemSize: ?*objc.SInt32,
    attributes: ?*objc.SInt32,
) callconv(.C) objc.OSErr;
pub const getTaggedCollectionItemInfo = GetTaggedCollectionItemInfo;

extern "CoreServices" fn PurgeCollection(c: Collection, whichAttributes: objc.SInt32, matchingAttributes: objc.SInt32) callconv(.C) void;
pub const purgeCollection = PurgeCollection;

extern "CoreServices" fn PurgeCollectionTag(c: Collection, tag: CollectionTag) callconv(.C) void;
pub const purgeCollectionTag = PurgeCollectionTag;

extern "CoreServices" fn EmptyCollection(c: Collection) callconv(.C) void;
pub const emptyCollection = EmptyCollection;

extern "CoreServices" fn FlattenCollection(c: Collection, flattenProc: CollectionFlattenUPP, refCon: ?*anyopaque) callconv(.C) objc.OSErr;
pub const flattenCollection = FlattenCollection;

extern "CoreServices" fn FlattenPartialCollection(
    c: Collection,
    flattenProc: CollectionFlattenUPP,
    refCon: ?*anyopaque,
    whichAttributes: objc.SInt32,
    matchingAttributes: objc.SInt32,
) callconv(.C) objc.OSErr;
pub const flattenPartialCollection = FlattenPartialCollection;

extern "CoreServices" fn UnflattenCollection(c: Collection, flattenProc: CollectionFlattenUPP, refCon: ?*anyopaque) callconv(.C) objc.OSErr;
pub const unflattenCollection = UnflattenCollection;

extern "CoreServices" fn GetCollectionExceptionProc(c: Collection) callconv(.C) CollectionExceptionUPP;
pub const getCollectionExceptionProc = GetCollectionExceptionProc;

extern "CoreServices" fn SetCollectionExceptionProc(c: Collection, exceptionProc: CollectionExceptionUPP) callconv(.C) void;
pub const setCollectionExceptionProc = SetCollectionExceptionProc;

extern "CoreServices" fn GetNewCollection(collectionID: objc.SInt16) callconv(.C) Collection;
pub const getNewCollection = GetNewCollection;

extern "CoreServices" fn AddCollectionItemHdl(
    aCollection: Collection,
    tag: CollectionTag,
    id: objc.SInt32,
    itemData: objc.Handle,
) callconv(.C) objc.OSErr;
pub const addCollectionItemHdl = AddCollectionItemHdl;

extern "CoreServices" fn GetCollectionItemHdl(
    aCollection: Collection,
    tag: CollectionTag,
    id: objc.SInt32,
    itemData: objc.Handle,
) callconv(.C) objc.OSErr;
pub const getCollectionItemHdl = GetCollectionItemHdl;

extern "CoreServices" fn ReplaceIndexedCollectionItemHdl(aCollection: Collection, itemIndex: objc.SInt32, itemData: objc.Handle) callconv(.C) objc.OSErr;
pub const replaceIndexedCollectionItemHdl = ReplaceIndexedCollectionItemHdl;

extern "CoreServices" fn GetIndexedCollectionItemHdl(aCollection: Collection, itemIndex: objc.SInt32, itemData: objc.Handle) callconv(.C) objc.OSErr;
pub const getIndexedCollectionItemHdl = GetIndexedCollectionItemHdl;

extern "CoreServices" fn FlattenCollectionToHdl(aCollection: Collection, flattened: objc.Handle) callconv(.C) objc.OSErr;
pub const flattenCollectionToHdl = FlattenCollectionToHdl;

extern "CoreServices" fn UnflattenCollectionFromHdl(aCollection: Collection, flattened: objc.Handle) callconv(.C) objc.OSErr;
pub const unflattenCollectionFromHdl = UnflattenCollectionFromHdl;

pub const BigEndianUInt32 = extern struct {
    bigEndianValue: objc.UInt32,
};

pub const BigEndianLong = extern struct {
    bigEndianValue: i64,
};

pub const BigEndianUnsignedLong = extern struct {
    bigEndianValue: u64,
};

pub const BigEndianShort = extern struct {
    bigEndianValue: i16,
};

pub const BigEndianUnsignedShort = extern struct {
    bigEndianValue: u16,
};

pub const BigEndianFixed = extern struct {
    bigEndianValue: objc.Fixed,
};

pub const BigEndianUnsignedFixed = extern struct {
    bigEndianValue: objc.UnsignedFixed,
};

pub const BigEndianOSType = extern struct {
    bigEndianValue: objc.OSType,
};

pub const anon3081 = enum(u32) {
    kCoreEndianResourceManagerDomain = 1920168547,
    kCoreEndianAppleEventManagerDomain = 1634039412,
};

pub const CoreEndianFlipProc = ?*const fn (
    objc.OSType,
    objc.OSType,
    objc.SInt16,
    ?*anyopaque,
    objc.ByteCount,
    objc.Boolean,
    ?*anyopaque,
) callconv(.C) objc.OSStatus;

extern "CoreServices" fn CoreEndianInstallFlipper(
    dataDomain: objc.OSType,
    dataType: objc.OSType,
    proc: CoreEndianFlipProc,
    refcon: ?*anyopaque,
) callconv(.C) objc.OSStatus;
pub const coreEndianInstallFlipper = CoreEndianInstallFlipper;

extern "CoreServices" fn CoreEndianGetFlipper(
    dataDomain: objc.OSType,
    dataType: objc.OSType,
    proc: ?*CoreEndianFlipProc,
    refcon: ?*?*anyopaque,
) callconv(.C) objc.OSStatus;
pub const coreEndianGetFlipper = CoreEndianGetFlipper;

extern "CoreServices" fn CoreEndianFlipData(
    dataDomain: objc.OSType,
    dataType: objc.OSType,
    id: objc.SInt16,
    data: ?*anyopaque,
    dataLen: objc.ByteCount,
    currentlyNative: objc.Boolean,
) callconv(.C) objc.OSStatus;
pub const coreEndianFlipData = CoreEndianFlipData;

pub const SelectorFunctionProcPtr = ?*const fn (objc.OSType, ?*objc.SInt32) callconv(.C) objc.OSErr;

pub const SelectorFunctionUPP = SelectorFunctionProcPtr;

extern "CoreServices" fn Gestalt(selector: objc.OSType, response: ?*objc.SInt32) callconv(.C) objc.OSErr;
pub const gestalt = Gestalt;

extern "CoreServices" fn NewGestaltValue(selector: objc.OSType, newValue: objc.SInt32) callconv(.C) objc.OSErr;
pub const newGestaltValue = NewGestaltValue;

extern "CoreServices" fn ReplaceGestaltValue(selector: objc.OSType, replacementValue: objc.SInt32) callconv(.C) objc.OSErr;
pub const replaceGestaltValue = ReplaceGestaltValue;

extern "CoreServices" fn SetGestaltValue(selector: objc.OSType, newValue: objc.SInt32) callconv(.C) objc.OSErr;
pub const setGestaltValue = SetGestaltValue;

extern "CoreServices" fn DeleteGestaltValue(selector: objc.OSType) callconv(.C) objc.OSErr;
pub const deleteGestaltValue = DeleteGestaltValue;

extern "CoreServices" fn NewSelectorFunctionUPP(userRoutine: SelectorFunctionProcPtr) callconv(.C) SelectorFunctionUPP;
pub const newSelectorFunctionUPP = NewSelectorFunctionUPP;

extern "CoreServices" fn DisposeSelectorFunctionUPP(userUPP: SelectorFunctionUPP) callconv(.C) void;
pub const disposeSelectorFunctionUPP = DisposeSelectorFunctionUPP;

extern "CoreServices" fn InvokeSelectorFunctionUPP(selector: objc.OSType, response: ?*objc.SInt32, userUPP: SelectorFunctionUPP) callconv(.C) objc.OSErr;
pub const invokeSelectorFunctionUPP = InvokeSelectorFunctionUPP;

pub const anon4421 = enum(u32) {
    kQuickLookFolderType = 1902928747,
};

pub const anon4491 = enum(i32) {
    gestaltAFPClient = 1634103411,
    gestaltAFPClientVersionMask = 65535,
    gestaltAFPClient3_5 = 1,
    gestaltAFPClient3_6 = 2,
    gestaltAFPClient3_6_1 = 3,
    gestaltAFPClient3_6_2 = 4,
    gestaltAFPClient3_6_3 = 5,
    gestaltAFPClient3_7 = 6,
    gestaltAFPClient3_7_2 = 7,
    gestaltAFPClient3_8 = 8,
    gestaltAFPClient3_8_1 = 9,
    gestaltAFPClient3_8_3 = 10,
    gestaltAFPClient3_8_4 = 11,
    gestaltAFPClientAttributeMask = -65536,
    gestaltAFPClientCfgRsrc = 16,
    gestaltAFPClientSupportsIP = 29,
    gestaltAFPClientVMUI = 30,
    gestaltAFPClientMultiReq = 31,
};

pub const anon4871 = enum(u32) {
    gestaltAppearanceAttr = 1634758770,
    gestaltAppearanceExists = 0,
    gestaltAppearanceCompatMode = 1,
};

pub const anon4991 = enum(u32) {
    gestaltAppearanceVersion = 1634760306,
};

pub const anon5081 = enum(u32) {
    gestaltAppleScriptVersion = 1634952054,
};

pub const anon5121 = enum(u32) {
    gestaltAppleScriptAttr = 1634952050,
    gestaltAppleScriptPresent = 0,
    gestaltAppleScriptPowerPCSupport = 1,
};

pub const anon5231 = enum(u32) {
    gestaltATalkVersion = 1635019638,
};

pub const anon5271 = enum(u32) {
    gestaltAppleTalkVersion = 1635019883,
};

pub const anon5531 = enum(u32) {
    gestaltAUXVersion = 1630500216,
};

pub const anon5641 = enum(u32) {
    gestaltBusClkSpeed = 1650682987,
};

pub const anon5681 = enum(u32) {
    gestaltBusClkSpeedMHz = 1650682989,
};

pub const anon5821 = enum(u32) {
    gestaltCFMAttr = 1667658343,
    gestaltCFMPresent = 0,
    gestaltCFMPresentMask = 1,
    gestaltCFM99Present = 2,
    gestaltCFM99PresentMask = 4,
};

pub const anon5901 = enum(u32) {
    gestaltProcessorCacheLineSize = 1668508026,
};

pub const anon5941 = enum(u32) {
    gestaltCollectionMgrVersion = 1668052078,
};

pub const anon5981 = enum(u32) {
    gestaltColorMatchingAttr = 1668117601,
    gestaltHighLevelMatching = 0,
    gestaltColorMatchingLibLoaded = 1,
};

pub const anon6041 = enum(i32) {
    errAEEventWouldRequireUserConsent = -1744,
};

pub const anon6251 = enum(u32) {
    gestaltControlMgrAttr = 1668183148,
    gestaltControlMgrPresent = 1,
    gestaltControlMgrPresentBit = 0,
    gestaltControlMsgPresentMask = 1,
};

pub const anon6341 = enum(u32) {
    kAEZoomIn = 7,
    kAEZoomOut = 8,
};

pub const anon6421 = enum(u32) {
    gestaltColorPickerVersion = 1668311922,
    gestaltColorPicker = 1668311922,
};

pub const anon6471 = enum(u32) {
    gestaltComponentMgr = 1668312692,
    gestaltComponentPlatform = 1668247660,
};

pub const anon6801 = enum(u32) {
    gestaltNativeCPUtype = 1668314484,
    gestaltNativeCPUfamily = 1668314470,
    gestaltCPU68000 = 0,
    gestaltCPU68010 = 1,
    gestaltCPU68020 = 2,
    gestaltCPU68030 = 3,
    gestaltCPU68040 = 4,
    gestaltCPU601 = 257,
    gestaltCPU603 = 259,
    gestaltCPU604 = 260,
    gestaltCPU603e = 262,
    gestaltCPU603ev = 263,
    gestaltCPU750 = 264,
    gestaltCPU604e = 265,
    gestaltCPU604ev = 266,
    gestaltCPUG4 = 268,
    gestaltCPUG47450 = 272,
};

pub const anon7001 = enum(u32) {
    gestaltCPUApollo = 273,
    gestaltCPUG47447 = 274,
    gestaltCPU750FX = 288,
    gestaltCPU970 = 313,
    gestaltCPU970FX = 316,
    gestaltCPU970MP = 324,
};

pub const anon7091 = enum(u32) {
    gestaltCPU486 = 1765029942,
    gestaltCPUPentium = 1765095478,
    gestaltCPUPentiumPro = 1765109874,
    gestaltCPUPentiumII = 1765108073,
    gestaltCPUX86 = 1769502840,
    gestaltCPUPentium4 = 1765108086,
};

pub const anon7191 = enum(u32) {
    gestaltCPUARMFamily = 1634888992,
    gestaltCPUARM64 = 1635268148,
};

pub const anon7351 = enum(u32) {
    gestaltCountOfCPUs = 1668314483,
};

pub const anon7391 = enum(u32) {
    gestaltCTBVersion = 1668571766,
};

pub const anon7431 = enum(u32) {
    gestaltDBAccessMgrAttr = 1684169059,
    gestaltDBAccessMgrPresent = 0,
};

pub const anon7481 = enum(u32) {
    gestaltDiskCacheSize = 1684239226,
};

pub const anon7521 = enum(u32) {
    gestaltSDPFindVersion = 1684434532,
};

pub const anon7561 = enum(u32) {
    gestaltDictionaryMgrAttr = 1684628340,
    gestaltDictionaryMgrPresent = 0,
};

pub const anon7671 = enum(u32) {
    gestaltDialogMgrAttr = 1684828007,
    gestaltDialogMgrPresent = 1,
    gestaltDialogMgrPresentBit = 0,
    gestaltDialogMgrHasAquaAlertBit = 2,
    gestaltDialogMgrPresentMask = 1,
    gestaltDialogMgrHasAquaAlertMask = 4,
    gestaltDialogMsgPresentMask = 1,
};

pub const anon8101 = enum(u32) {
    gestaltDrawSprocketVersion = 1685287030,
};

pub const anon8141 = enum(u32) {
    gestaltDigitalSignatureVersion = 1685285223,
};

pub const anon8221 = enum(u32) {
    gestaltDTPFeatures = 1685352550,
    kDTPThirdPartySupported = 4,
};

pub const anon8321 = enum(u32) {
    gestaltDTPInfo = 1685352568,
};

pub const anon8361 = enum(u32) {
    gestaltEasyAccessAttr = 1700885369,
    gestaltEasyAccessOff = 0,
    gestaltEasyAccessOn = 1,
    gestaltEasyAccessSticky = 2,
    gestaltEasyAccessLocked = 3,
};

pub const anon8441 = enum(u32) {
    gestaltEditionMgrAttr = 1701082222,
    gestaltEditionMgrPresent = 0,
    gestaltEditionMgrTranslationAware = 1,
};

pub const anon8501 = enum(u32) {
    gestaltAppleEventsAttr = 1702260340,
    gestaltAppleEventsPresent = 0,
    gestaltScriptingSupport = 1,
    gestaltOSLInSystem = 2,
    gestaltSupportsApplicationURL = 4,
};

pub const anon8691 = enum(u32) {
    gestaltFBCVersion = 1717724022,
    gestaltFBCCurrentVersion = 17,
    gestaltOSXFBCCurrentVersion = 256,
};

pub const anon8761 = enum(u32) {
    gestaltFileMappingAttr = 1718381936,
    gestaltFileMappingPresent = 0,
    gestaltFileMappingMultipleFilesFix = 1,
};

pub const anon8821 = enum(u32) {
    gestaltFloppyAttr = 1718382713,
    gestaltFloppyIsMFMOnly = 0,
    gestaltFloppyIsManualEject = 1,
    gestaltFloppyUsesDiskInPlace = 2,
};

pub const anon8891 = enum(u32) {
    gestaltFinderAttr = 1718510706,
    gestaltFinderDropEvent = 0,
    gestaltFinderMagicPlacement = 1,
    gestaltFinderCallsAEProcess = 2,
    gestaltOSLCompliantFinder = 3,
    gestaltFinderSupports4GBVolumes = 4,
    gestaltFinderHasClippings = 6,
    gestaltFinderFullDragManagerSupport = 7,
    gestaltFinderFloppyRootComments = 8,
    gestaltFinderLargeAndNotSavedFlavorsOK = 9,
    gestaltFinderUsesExtensibleFolderManager = 10,
    gestaltFinderUnderstandsRedirectedDesktopFolder = 11,
};

pub const anon9041 = enum(u32) {
    gestaltFindFolderAttr = 1718578276,
    gestaltFindFolderPresent = 0,
    gestaltFolderDescSupport = 1,
    gestaltFolderMgrFollowsAliasesWhenResolving = 2,
    gestaltFolderMgrSupportsExtendedCalls = 3,
    gestaltFolderMgrSupportsDomains = 4,
    gestaltFolderMgrSupportsFSCalls = 5,
};

pub const anon9141 = enum(u32) {
    gestaltFindFolderRedirectionAttr = 1718578277,
};

pub const anon9191 = enum(u32) {
    gestaltFontMgrAttr = 1718578804,
    gestaltOutlineFonts = 0,
};

pub const anon9241 = enum(u32) {
    gestaltFPUType = 1718646048,
    gestaltNoFPU = 0,
    gestalt68881 = 1,
    gestalt68882 = 2,
    gestalt68040FPU = 3,
};

pub const anon9321 = enum(u32) {
    gestaltFSAttr = 1718820896,
    gestaltFullExtFSDispatching = 0,
    gestaltHasFSSpecCalls = 1,
    gestaltHasFileSystemManager = 2,
    gestaltFSMDoesDynamicLoad = 3,
    gestaltFSSupports4GBVols = 4,
    gestaltFSSupports2TBVols = 5,
    gestaltHasExtendedDiskInit = 6,
    gestaltDTMgrSupportsFSM = 7,
    gestaltFSNoMFSVols = 8,
    gestaltFSSupportsHFSPlusVols = 9,
    gestaltFSIncompatibleDFA82 = 10,
};

pub const anon9471 = enum(u32) {
    gestaltFSSupportsDirectIO = 11,
};

pub const anon9511 = enum(u32) {
    gestaltHasHFSPlusAPIs = 12,
    gestaltMustUseFCBAccessors = 13,
    gestaltFSUsesPOSIXPathsForConversion = 14,
    gestaltFSSupportsExclusiveLocks = 15,
    gestaltFSSupportsHardLinkDetection = 16,
    gestaltFSAllowsConcurrentAsyncIO = 17,
};

pub const anon9601 = enum(u32) {
    gestaltAdminFeaturesFlagsAttr = 1718773092,
    gestaltFinderUsesSpecialOpenFoldersFile = 0,
};

pub const anon9651 = enum(u32) {
    gestaltFSMVersion = 1718840608,
};

pub const anon9691 = enum(u32) {
    gestaltFXfrMgrAttr = 1719166578,
    gestaltFXfrMgrPresent = 0,
    gestaltFXfrMgrMultiFile = 1,
    gestaltFXfrMgrErrorString = 2,
    gestaltFXfrMgrAsync = 3,
};

pub const anon9771 = enum(u32) {
    gestaltGraphicsAttr = 1734768737,
    gestaltGraphicsIsDebugging = 1,
    gestaltGraphicsIsLoaded = 2,
    gestaltGraphicsIsPowerPC = 4,
};

pub const anon9841 = enum(u32) {
    gestaltGraphicsVersion = 1735550584,
    gestaltCurrentGraphicsVersion = 66048,
};

pub const anon9891 = enum(u32) {
    gestaltHardwareAttr = 1751414642,
    gestaltHasVIA1 = 0,
    gestaltHasVIA2 = 1,
    gestaltHasASC = 3,
    gestaltHasSCC = 4,
    gestaltHasSCSI = 7,
    gestaltHasSoftPowerOff = 19,
    gestaltHasSCSI961 = 21,
    gestaltHasSCSI962 = 22,
    gestaltHasUniversalROM = 24,
    gestaltHasEnhancedLtalk = 30,
};

pub const anon10031 = enum(u32) {
    gestaltHelpMgrAttr = 1751477360,
    gestaltHelpMgrPresent = 0,
    gestaltHelpMgrExtensions = 1,
    gestaltAppleGuideIsDebug = 30,
    gestaltAppleGuidePresent = 31,
};

pub const anon10111 = enum(u32) {
    gestaltHardwareVendorCode = 1752326500,
    gestaltHardwareVendorApple = 1097887852,
};

pub const anon10161 = enum(u32) {
    gestaltCompressionMgr = 1768123760,
};

pub const anon10201 = enum(u32) {
    gestaltIconUtilitiesAttr = 1768124270,
    gestaltIconUtilitiesPresent = 0,
    gestaltIconUtilitiesHas48PixelIcons = 1,
    gestaltIconUtilitiesHas32BitIcons = 2,
    gestaltIconUtilitiesHas8BitDeepMasks = 3,
    gestaltIconUtilitiesHasIconServices = 4,
};

pub const anon10291 = enum(u32) {
    gestaltInternalDisplay = 1768190832,
};

pub const anon10371 = enum(u32) {
    gestaltKeyboardType = 1801610272,
    gestaltMacKbd = 1,
    gestaltMacAndPad = 2,
    gestaltMacPlusKbd = 3,
    gestaltUnknownThirdPartyKbd = 3,
    gestaltExtADBKbd = 4,
    gestaltStdADBKbd = 5,
    gestaltPrtblADBKbd = 6,
    gestaltPrtblISOKbd = 7,
    gestaltStdISOADBKbd = 8,
    gestaltExtISOADBKbd = 9,
    gestaltADBKbdII = 10,
    gestaltADBISOKbdII = 11,
    gestaltPwrBookADBKbd = 12,
    gestaltPwrBookISOADBKbd = 13,
    gestaltAppleAdjustKeypad = 14,
    gestaltAppleAdjustADBKbd = 15,
    gestaltAppleAdjustISOKbd = 16,
    gestaltJapanAdjustADBKbd = 17,
    gestaltPwrBkExtISOKbd = 20,
    gestaltPwrBkExtJISKbd = 21,
    gestaltPwrBkExtADBKbd = 24,
    gestaltPS2Keyboard = 27,
    gestaltPwrBkSubDomKbd = 28,
    gestaltPwrBkSubISOKbd = 29,
    gestaltPwrBkSubJISKbd = 30,
    gestaltPortableUSBANSIKbd = 37,
    gestaltPortableUSBISOKbd = 38,
    gestaltPortableUSBJISKbd = 39,
    gestaltThirdPartyANSIKbd = 40,
    gestaltThirdPartyISOKbd = 41,
    gestaltThirdPartyJISKbd = 42,
    gestaltPwrBkEKDomKbd = 195,
    gestaltPwrBkEKISOKbd = 196,
    gestaltPwrBkEKJISKbd = 197,
    gestaltUSBCosmoANSIKbd = 198,
    gestaltUSBCosmoISOKbd = 199,
    gestaltUSBCosmoJISKbd = 200,
    gestaltPwrBk99JISKbd = 201,
    gestaltUSBAndyANSIKbd = 204,
    gestaltUSBAndyISOKbd = 205,
    gestaltUSBAndyJISKbd = 206,
};

pub const anon10891 = enum(u32) {
    gestaltUSBProF16ANSIKbd = 34,
    gestaltUSBProF16ISOKbd = 35,
    gestaltUSBProF16JISKbd = 36,
    gestaltProF16ANSIKbd = 31,
    gestaltProF16ISOKbd = 32,
    gestaltProF16JISKbd = 33,
};

pub const anon11021 = enum(u32) {
    gestaltUDFSupport = 1802855526,
};

pub const anon11061 = enum(u32) {
    gestaltLowMemorySize = 1819108717,
};

pub const anon11101 = enum(u32) {
    gestaltLogicalRAMSize = 1819435373,
};

pub const anon12111 = enum(u32) {
    gestaltMachineType = 1835098984,
    gestaltClassic = 1,
    gestaltMacXL = 2,
    gestaltMac512KE = 3,
    gestaltMacPlus = 4,
    gestaltMacSE = 5,
    gestaltMacII = 6,
    gestaltMacIIx = 7,
    gestaltMacIIcx = 8,
    gestaltMacSE030 = 9,
    gestaltPortable = 10,
    gestaltMacIIci = 11,
    gestaltPowerMac8100_120 = 12,
    gestaltMacIIfx = 13,
    gestaltMacClassic = 17,
    gestaltMacIIsi = 18,
    gestaltMacLC = 19,
    gestaltMacQuadra900 = 20,
    gestaltPowerBook170 = 21,
    gestaltMacQuadra700 = 22,
    gestaltClassicII = 23,
    gestaltPowerBook100 = 24,
    gestaltPowerBook140 = 25,
    gestaltMacQuadra950 = 26,
    gestaltMacLCIII = 27,
    gestaltPerforma450 = 27,
    gestaltPowerBookDuo210 = 29,
    gestaltMacCentris650 = 30,
    gestaltPowerBookDuo230 = 32,
    gestaltPowerBook180 = 33,
    gestaltPowerBook160 = 34,
    gestaltMacQuadra800 = 35,
    gestaltMacQuadra650 = 36,
    gestaltMacLCII = 37,
    gestaltPowerBookDuo250 = 38,
    gestaltAWS9150_80 = 39,
    gestaltPowerMac8100_110 = 40,
    gestaltAWS8150_110 = 40,
    gestaltPowerMac5200 = 41,
    gestaltPowerMac5260 = 41,
    gestaltPerforma5300 = 41,
    gestaltPowerMac6200 = 42,
    gestaltPerforma6300 = 42,
    gestaltMacIIvi = 44,
    gestaltMacIIvm = 45,
    gestaltPerforma600 = 45,
    gestaltPowerMac7100_80 = 47,
    gestaltMacIIvx = 48,
    gestaltMacColorClassic = 49,
    gestaltPerforma250 = 49,
    gestaltPowerBook165c = 50,
    gestaltMacCentris610 = 52,
    gestaltMacQuadra610 = 53,
    gestaltPowerBook145 = 54,
    gestaltPowerMac8100_100 = 55,
    gestaltMacLC520 = 56,
    gestaltAWS9150_120 = 57,
    gestaltPowerMac6400 = 58,
    gestaltPerforma6400 = 58,
    gestaltPerforma6360 = 58,
    gestaltMacCentris660AV = 60,
    gestaltMacQuadra660AV = 60,
    gestaltPerforma46x = 62,
    gestaltPowerMac8100_80 = 65,
    gestaltAWS8150_80 = 65,
    gestaltPowerMac9500 = 67,
    gestaltPowerMac9600 = 67,
    gestaltPowerMac7500 = 68,
    gestaltPowerMac7600 = 68,
    gestaltPowerMac8500 = 69,
    gestaltPowerMac8600 = 69,
    gestaltAWS8550 = 68,
    gestaltPowerBook180c = 71,
    gestaltPowerBook520 = 72,
    gestaltPowerBook520c = 72,
    gestaltPowerBook540 = 72,
    gestaltPowerBook540c = 72,
    gestaltPowerMac5400 = 74,
    gestaltPowerMac6100_60 = 75,
    gestaltAWS6150_60 = 75,
    gestaltPowerBookDuo270c = 77,
    gestaltMacQuadra840AV = 78,
    gestaltPerforma550 = 80,
    gestaltPowerBook165 = 84,
    gestaltPowerBook190 = 85,
    gestaltMacTV = 88,
    gestaltMacLC475 = 89,
    gestaltPerforma47x = 89,
    gestaltMacLC575 = 92,
    gestaltMacQuadra605 = 94,
    gestaltMacQuadra630 = 98,
    gestaltMacLC580 = 99,
    gestaltPerforma580 = 99,
    gestaltPowerMac6100_66 = 100,
    gestaltAWS6150_66 = 100,
    gestaltPowerBookDuo280 = 102,
    gestaltPowerBookDuo280c = 103,
    gestaltPowerMacLC475 = 104,
    gestaltPowerMacPerforma47x = 104,
    gestaltPowerMacLC575 = 105,
    gestaltPowerMacPerforma57x = 105,
    gestaltPowerMacQuadra630 = 106,
    gestaltPowerMacLC630 = 106,
    gestaltPowerMacPerforma63x = 106,
    gestaltPowerMac7200 = 108,
    gestaltPowerMac7300 = 109,
    gestaltPowerMac7100_66 = 112,
    gestaltPowerBook150 = 115,
    gestaltPowerMacQuadra700 = 116,
    gestaltPowerMacQuadra900 = 117,
    gestaltPowerMacQuadra950 = 118,
    gestaltPowerMacCentris610 = 119,
    gestaltPowerMacCentris650 = 120,
    gestaltPowerMacQuadra610 = 121,
    gestaltPowerMacQuadra650 = 122,
    gestaltPowerMacQuadra800 = 123,
    gestaltPowerBookDuo2300 = 124,
    gestaltPowerBook500PPCUpgrade = 126,
    gestaltPowerBook5300 = 128,
    gestaltPowerBook1400 = 310,
    gestaltPowerBook3400 = 306,
    gestaltPowerBook2400 = 307,
    gestaltPowerBookG3Series = 312,
    gestaltPowerBookG3 = 313,
    gestaltPowerBookG3Series2 = 314,
    gestaltPowerMacNewWorld = 406,
    gestaltPowerMacG3 = 510,
    gestaltPowerMac5500 = 512,
    gestalt20thAnniversary = 512,
    gestaltPowerMac6500 = 513,
    gestaltPowerMac4400_160 = 514,
    gestaltPowerMac4400 = 515,
    gestaltMacOSCompatibility = 1206,
};

pub const anon13481 = enum(u32) {
    gestaltQuadra605 = 94,
    gestaltQuadra610 = 53,
    gestaltQuadra630 = 98,
    gestaltQuadra650 = 36,
    gestaltQuadra660AV = 60,
    gestaltQuadra700 = 22,
    gestaltQuadra800 = 35,
    gestaltQuadra840AV = 78,
    gestaltQuadra900 = 20,
    gestaltQuadra950 = 26,
};

pub const anon13611 = enum(i32) {
    kMachineNameStrID = -16395,
};

pub const anon13651 = enum(u32) {
    gestaltSMPMailerVersion = 1835101298,
};

pub const anon13691 = enum(u32) {
    gestaltMediaBay = 1835165032,
    gestaltMBLegacy = 0,
    gestaltMBSingleBay = 1,
    gestaltMBMultipleBays = 2,
};

pub const anon13761 = enum(u32) {
    gestaltMessageMgrVersion = 1835365235,
};

pub const anon13821 = enum(u32) {
    gestaltMenuMgrAttr = 1835363957,
    gestaltMenuMgrPresent = 1,
    gestaltMenuMgrPresentBit = 0,
    gestaltMenuMgrAquaLayoutBit = 1,
    gestaltMenuMgrMultipleItemsWithCommandIDBit = 2,
    gestaltMenuMgrRetainsIconRefBit = 3,
    gestaltMenuMgrSendsMenuBoundsToDefProcBit = 4,
    gestaltMenuMgrMoreThanFiveMenusDeepBit = 5,
    gestaltMenuMgrCGImageMenuTitleBit = 6,
    gestaltMenuMgrPresentMask = 1,
    gestaltMenuMgrAquaLayoutMask = 2,
    gestaltMenuMgrMultipleItemsWithCommandIDMask = 4,
    gestaltMenuMgrRetainsIconRefMask = 8,
    gestaltMenuMgrSendsMenuBoundsToDefProcMask = 16,
    gestaltMenuMgrMoreThanFiveMenusDeepMask = 32,
    gestaltMenuMgrCGImageMenuTitleMask = 64,
};

pub const anon14051 = enum(u32) {
    gestaltMultipleUsersState = 1835426930,
};

pub const anon14101 = enum(u32) {
    gestaltMachineIcon = 1835623278,
};

pub const anon14141 = enum(u32) {
    gestaltMiscAttr = 1835627363,
    gestaltScrollingThrottle = 0,
    gestaltSquareMenuBar = 2,
};

pub const anon14351 = enum(u32) {
    gestaltMixedModeVersion = 1835628644,
};

pub const anon14391 = enum(u32) {
    gestaltMixedModeAttr = 1835628644,
    gestaltMixedModePowerPC = 0,
    gestaltPowerPCAware = 0,
    gestaltMixedModeCFM68K = 1,
    gestaltMixedModeCFM68KHasTrap = 2,
    gestaltMixedModeCFM68KHasState = 3,
};

pub const anon14481 = enum(u32) {
    gestaltQuickTimeConferencing = 1836346475,
};

pub const anon14521 = enum(u32) {
    gestaltMemoryMapAttr = 1835884912,
    gestaltMemoryMapSparse = 0,
};

pub const anon14571 = enum(u32) {
    gestaltMMUType = 1835889952,
    gestaltNoMMU = 0,
    gestaltAMU = 1,
    gestalt68851 = 2,
    gestalt68030MMU = 3,
    gestalt68040MMU = 4,
    gestaltEMMU1 = 5,
};

pub const anon14671 = enum(u32) {
    gestaltUserVisibleMachineName = 1835950445,
};

pub const anon14741 = enum(u32) {
    gestaltMPCallableAPIsAttr = 1836086115,
    gestaltMPFileManager = 0,
    gestaltMPDeviceManager = 1,
    gestaltMPTrapCalls = 2,
};

pub const anon14811 = enum(u32) {
    gestaltStdNBPAttr = 1852601712,
    gestaltStdNBPPresent = 0,
    gestaltStdNBPSupportsAutoPosition = 1,
};

pub const anon14871 = enum(u32) {
    gestaltNotificationMgrAttr = 1852663666,
    gestaltNotificationPresent = 0,
};

pub const anon14921 = enum(u32) {
    gestaltNameRegistryVersion = 1852990823,
};

pub const anon14961 = enum(u32) {
    gestaltNuBusSlotCount = 1853186675,
};

pub const anon15001 = enum(u32) {
    gestaltOCEToolboxVersion = 1868785012,
    gestaltOCETB = 258,
    gestaltSFServer = 256,
};

pub const anon15061 = enum(u32) {
    gestaltOCEToolboxAttr = 1868785013,
    gestaltOCETBPresent = 1,
    gestaltOCETBAvailable = 2,
    gestaltOCESFServerAvailable = 4,
    gestaltOCETBNativeGlueAvailable = 16,
};

pub const anon15141 = enum(u32) {
    gestaltOpenFirmwareInfo = 1869637239,
};

pub const anon15181 = enum(u32) {
    gestaltOSAttr = 1869815840,
    gestaltSysZoneGrowable = 0,
    gestaltLaunchCanReturn = 1,
    gestaltLaunchFullFileSpec = 2,
    gestaltLaunchControl = 3,
    gestaltTempMemSupport = 4,
    gestaltRealTempMemory = 5,
    gestaltTempMemTracked = 6,
    gestaltIPCSupport = 7,
    gestaltSysDebuggerSupport = 8,
    gestaltNativeProcessMgrBit = 19,
    gestaltAltivecRegistersSwappedCorrectlyBit = 20,
};

pub const anon15331 = enum(u32) {
    gestaltOSTable = 1869837428,
};

pub const anon15441 = enum(u32) {
    gestaltOpenTptNetworkSetup = 1869898598,
    gestaltOpenTptNetworkSetupLegacyImport = 0,
    gestaltOpenTptNetworkSetupLegacyExport = 1,
    gestaltOpenTptNetworkSetupSupportsMultihoming = 2,
};

pub const anon15511 = enum(u32) {
    gestaltOpenTptNetworkSetupVersion = 1869898614,
};

pub const anon15611 = enum(u32) {
    gestaltOpenTptRemoteAccess = 1869902433,
    gestaltOpenTptRemoteAccessPresent = 0,
    gestaltOpenTptRemoteAccessLoaded = 1,
    gestaltOpenTptRemoteAccessClientOnly = 2,
    gestaltOpenTptRemoteAccessPServer = 3,
    gestaltOpenTptRemoteAccessMPServer = 4,
    gestaltOpenTptPPPPresent = 5,
    gestaltOpenTptARAPPresent = 6,
};

pub const anon15721 = enum(u32) {
    gestaltOpenTptRemoteAccessVersion = 1869902454,
};

pub const anon15801 = enum(u32) {
    gestaltOpenTptVersions = 1869903474,
};

pub const anon15841 = enum(u32) {
    gestaltOpenTpt = 1869898094,
    gestaltOpenTptPresentMask = 1,
    gestaltOpenTptLoadedMask = 2,
    gestaltOpenTptAppleTalkPresentMask = 4,
    gestaltOpenTptAppleTalkLoadedMask = 8,
    gestaltOpenTptTCPPresentMask = 16,
    gestaltOpenTptTCPLoadedMask = 32,
    gestaltOpenTptIPXSPXPresentMask = 64,
    gestaltOpenTptIPXSPXLoadedMask = 128,
    gestaltOpenTptPresentBit = 0,
    gestaltOpenTptLoadedBit = 1,
    gestaltOpenTptAppleTalkPresentBit = 2,
    gestaltOpenTptAppleTalkLoadedBit = 3,
    gestaltOpenTptTCPPresentBit = 4,
    gestaltOpenTptTCPLoadedBit = 5,
    gestaltOpenTptIPXSPXPresentBit = 6,
    gestaltOpenTptIPXSPXLoadedBit = 7,
};

pub const anon16051 = enum(u32) {
    gestaltPCCard = 1885561700,
    gestaltCardServicesPresent = 0,
    gestaltPCCardFamilyPresent = 1,
    gestaltPCCardHasPowerControl = 2,
    gestaltPCCardSupportsCardBus = 3,
};

pub const anon16171 = enum(u32) {
    gestaltProcClkSpeedMHz = 1835232363,
};

pub const anon16211 = enum(u32) {
    gestaltPCXAttr = 1885567079,
    gestaltPCXHas8and16BitFAT = 0,
    gestaltPCXHasProDOS = 1,
    gestaltPCXNewUI = 2,
    gestaltPCXUseICMapping = 3,
};

pub const anon16291 = enum(u32) {
    gestaltLogicalPageSize = 1885827962,
};

pub const anon16431 = enum(u32) {
    gestaltScreenCaptureMain = 1885954865,
    gestaltScreenCaptureDir = 1885954866,
};

pub const anon16481 = enum(u32) {
    gestaltGXPrintingMgrVersion = 1886218098,
};

pub const anon16571 = enum(u32) {
    gestaltPowerMgrAttr = 1886353266,
    gestaltPMgrExists = 0,
    gestaltPMgrCPUIdle = 1,
    gestaltPMgrSCC = 2,
    gestaltPMgrSound = 3,
    gestaltPMgrDispatchExists = 4,
    gestaltPMgrSupportsAVPowerStateAtSleepWake = 5,
};

pub const anon16671 = enum(u32) {
    gestaltPowerMgrVers = 1886876278,
};

pub const anon16771 = enum(u32) {
    gestaltPPCToolboxAttr = 1886413600,
    gestaltPPCToolboxPresent = 0,
    gestaltPPCSupportsRealTime = 4096,
    gestaltPPCSupportsIncoming = 1,
    gestaltPPCSupportsOutGoing = 2,
    gestaltPPCSupportsTCP_IP = 4,
    gestaltPPCSupportsIncomingAppleTalk = 16,
    gestaltPPCSupportsIncomingTCP_IP = 32,
    gestaltPPCSupportsOutgoingAppleTalk = 256,
    gestaltPPCSupportsOutgoingTCP_IP = 512,
};

pub const anon16951 = enum(u32) {
    gestaltPowerPCProcessorFeatures = 1886413670,
    gestaltPowerPCHasGraphicsInstructions = 0,
    gestaltPowerPCHasSTFIWXInstruction = 1,
    gestaltPowerPCHasSquareRootInstructions = 2,
    gestaltPowerPCHasDCBAInstruction = 3,
    gestaltPowerPCHasVectorInstructions = 4,
    gestaltPowerPCHasDataStreams = 5,
    gestaltPowerPCHas64BitSupport = 6,
    gestaltPowerPCHasDCBTStreams = 7,
    gestaltPowerPCASArchitecture = 8,
    gestaltPowerPCIgnoresDCBST = 9,
};

pub const anon17091 = enum(u32) {
    gestaltProcessorType = 1886547811,
    gestalt68000 = 1,
    gestalt68010 = 2,
    gestalt68020 = 3,
    gestalt68030 = 4,
    gestalt68040 = 5,
};

pub const anon17221 = enum(u32) {
    gestaltParityAttr = 1886549113,
    gestaltHasParityCapability = 0,
    gestaltParityEnabled = 1,
};

pub const anon17281 = enum(u32) {
    gestaltQD3DVersion = 1899197984,
};

pub const anon17451 = enum(u32) {
    gestaltQuickdrawVersion = 1902387232,
    gestaltOriginalQD = 0,
    gestalt8BitQD = 256,
    gestalt32BitQD = 512,
    gestalt32BitQD11 = 513,
    gestalt32BitQD12 = 544,
    gestalt32BitQD13 = 560,
    gestaltAllegroQD = 592,
    gestaltMacOSXQD = 768,
};

pub const anon17701 = enum(u32) {
    gestaltGXVersion = 1902405496,
};

pub const anon17741 = enum(u32) {
    gestaltQuickdrawFeatures = 1902408311,
    gestaltHasColor = 0,
    gestaltHasDeepGWorlds = 1,
    gestaltHasDirectPixMaps = 2,
    gestaltHasGrayishTextOr = 3,
    gestaltSupportsMirroring = 4,
    gestaltQDHasLongRowBytes = 5,
};

pub const anon17841 = enum(u32) {
    gestaltQDTextVersion = 1902408824,
    gestaltOriginalQDText = 0,
    gestaltAllegroQDText = 256,
    gestaltMacOSXQDText = 512,
};

pub const anon17911 = enum(u32) {
    gestaltQDTextFeatures = 1902408806,
    gestaltWSIISupport = 0,
    gestaltSbitFontSupport = 1,
    gestaltAntiAliasedTextAvailable = 2,
    gestaltOFA2available = 3,
    gestaltCreatesAliasFontRsrc = 4,
    gestaltNativeType1FontSupport = 5,
    gestaltCanUseCGTextRendering = 6,
};

pub const anon18031 = enum(u32) {
    gestaltQuickTimeConferencingInfo = 1903453033,
};

pub const anon18121 = enum(u32) {
    gestaltQuickTimeFeatures = 1903456883,
    gestaltPPCQuickTimeLibPresent = 0,
};

pub const anon18171 = enum(u32) {
    gestaltQuickTimeStreamingFeatures = 1903457126,
};

pub const anon18211 = enum(u32) {
    gestaltQuickTimeStreamingVersion = 1903457140,
};

pub const anon18251 = enum(u32) {
    gestaltQuickTimeThreadSafeFeaturesAttr = 1903457384,
    gestaltQuickTimeThreadSafeICM = 0,
    gestaltQuickTimeThreadSafeMovieToolbox = 1,
    gestaltQuickTimeThreadSafeMovieImport = 2,
    gestaltQuickTimeThreadSafeMovieExport = 3,
    gestaltQuickTimeThreadSafeGraphicsImport = 4,
    gestaltQuickTimeThreadSafeGraphicsExport = 5,
    gestaltQuickTimeThreadSafeMoviePlayback = 6,
};

pub const anon18361 = enum(u32) {
    gestaltQTVRMgrAttr = 1903457906,
    gestaltQTVRMgrPresent = 0,
    gestaltQTVRObjMoviesPresent = 1,
    gestaltQTVRCylinderPanosPresent = 2,
    gestaltQTVRCubicPanosPresent = 3,
};

pub const anon18441 = enum(u32) {
    gestaltQTVRMgrVers = 1903457910,
};

pub const anon18601 = enum(u32) {
    gestaltPhysicalRAMSize = 1918987552,
};

pub const anon18641 = enum(u32) {
    gestaltPhysicalRAMSizeInMegabytes = 1918987629,
};

pub const anon18681 = enum(u32) {
    gestaltRBVAddr = 1919055392,
};

pub const anon18721 = enum(u32) {
    gestaltROMSize = 1919905056,
};

pub const anon18761 = enum(u32) {
    gestaltROMVersion = 1919905142,
};

pub const anon18801 = enum(u32) {
    gestaltResourceMgrAttr = 1920168547,
    gestaltPartialRsrcs = 0,
    gestaltHasResourceOverrides = 1,
};

pub const anon18861 = enum(u32) {
    gestaltResourceMgrBugFixesAttrs = 1919771239,
    gestaltRMForceSysHeapRolledIn = 0,
    gestaltRMFakeAppleMenuItemsRolledIn = 1,
    gestaltSanityCheckResourceFiles = 2,
    gestaltSupportsFSpResourceFileAlreadyOpenBit = 3,
    gestaltRMSupportsFSCalls = 4,
    gestaltRMTypeIndexOrderingReverse = 8,
};

pub const anon18971 = enum(u32) {
    gestaltRealtimeMgrAttr = 1920232818,
    gestaltRealtimeMgrPresent = 0,
};

pub const anon19031 = enum(u32) {
    gestaltSafeOFAttr = 1935763045,
    gestaltVMZerosPagesBit = 0,
    gestaltInitHeapZerosOutHeapsBit = 1,
    gestaltNewHandleReturnsZeroedMemoryBit = 2,
    gestaltNewPtrReturnsZeroedMemoryBit = 3,
    gestaltFileAllocationZeroedBlocksBit = 4,
};

pub const anon19131 = enum(u32) {
    gestaltSCCReadAddr = 1935893362,
};

pub const anon19171 = enum(u32) {
    gestaltSCCWriteAddr = 1935893367,
};

pub const anon19211 = enum(u32) {
    gestaltScrapMgrAttr = 1935897185,
    gestaltScrapMgrTranslationAware = 0,
};

pub const anon19261 = enum(u32) {
    gestaltScriptMgrVersion = 1935897193,
};

pub const anon19341 = enum(u32) {
    gestaltSCSI = 1935897449,
    gestaltAsyncSCSI = 0,
    gestaltAsyncSCSIINROM = 1,
    gestaltSCSISlotBoot = 2,
    gestaltSCSIPollSIH = 3,
};

pub const anon19421 = enum(u32) {
    gestaltControlStripAttr = 1935959414,
    gestaltControlStripExists = 0,
    gestaltControlStripVersionFixed = 1,
    gestaltControlStripUserFont = 2,
    gestaltControlStripUserHotKey = 3,
};

pub const anon19501 = enum(u32) {
    gestaltSDPStandardDirectoryVersion = 1935963762,
};

pub const anon19651 = enum(u32) {
    gestaltShutdownAttributes = 1936225652,
    gestaltShutdownHassdOnBootVolUnmount = 0,
};

pub const anon19701 = enum(u32) {
    gestaltNuBusConnectors = 1936487523,
};

pub const anon19741 = enum(u32) {
    gestaltSlotAttr = 1936486260,
    gestaltSlotMgrExists = 0,
    gestaltNuBusPresent = 1,
    gestaltSESlotPresent = 2,
    gestaltSE30SlotPresent = 3,
    gestaltPortableSlotPresent = 4,
};

pub const anon19871 = enum(u32) {
    gestaltSoundAttr = 1936614432,
    gestaltStereoCapability = 0,
    gestaltStereoMixing = 1,
    gestaltSoundIOMgrPresent = 3,
    gestaltBuiltInSoundInput = 4,
    gestaltHasSoundInputDevice = 5,
    gestaltPlayAndRecord = 6,
    gestalt16BitSoundIO = 7,
    gestaltStereoInput = 8,
    gestaltLineLevelInput = 9,
    gestaltSndPlayDoubleBuffer = 10,
    gestaltMultiChannels = 11,
    gestalt16BitAudioSupport = 12,
};

pub const anon20041 = enum(u32) {
    gestaltSplitOSAttr = 1936748403,
    gestaltSplitOSBootDriveIsNetworkVolume = 0,
    gestaltSplitOSAware = 1,
    gestaltSplitOSEnablerVolumeIsDifferentFromBootVolume = 2,
    gestaltSplitOSMachineNameSetToNetworkNameTemp = 3,
    gestaltSplitOSMachineNameStartupDiskIsNonPersistent = 5,
};

pub const anon20131 = enum(u32) {
    gestaltSMPSPSendLetterVersion = 1936749420,
};

pub const anon20171 = enum(u32) {
    gestaltSpeechRecognitionAttr = 1936880737,
    gestaltDesktopSpeechRecognition = 1,
    gestaltTelephoneSpeechRecognition = 2,
};

pub const anon20231 = enum(u32) {
    gestaltSpeechRecognitionVersion = 1936880738,
};

pub const anon20271 = enum(u32) {
    gestaltSoftwareVendorCode = 1936875876,
    gestaltSoftwareVendorApple = 1097887852,
    gestaltSoftwareVendorLicensee = 1281584755,
};

pub const anon20421 = enum(u32) {
    gestaltSysArchitecture = 1937339233,
    gestalt68k = 1,
    gestaltPowerPC = 2,
    gestaltIntel = 10,
    gestaltArm = 20,
};

pub const anon20501 = enum(u32) {
    gestaltSystemUpdateVersion = 1937339253,
};

pub const anon20811 = enum(u32) {
    gestaltSystemVersion = 1937339254,
    gestaltSystemVersionMajor = 1937339185,
    gestaltSystemVersionMinor = 1937339186,
    gestaltSystemVersionBugFix = 1937339187,
};

pub const anon20881 = enum(u32) {
    gestaltToolboxTable = 1952609396,
};

pub const anon20921 = enum(u32) {
    gestaltTextEditVersion = 1952784416,
    gestaltTE1 = 1,
    gestaltTE2 = 2,
    gestaltTE3 = 3,
    gestaltTE4 = 4,
    gestaltTE5 = 5,
};

pub const anon21051 = enum(u32) {
    gestaltTEAttr = 1952801140,
    gestaltTEHasGetHiliteRgn = 0,
    gestaltTESupportsInlineInput = 1,
    gestaltTESupportsTextObjects = 2,
    gestaltTEHasWhiteBackground = 3,
};

pub const anon21131 = enum(u32) {
    gestaltTeleMgrAttr = 1952803941,
    gestaltTeleMgrPresent = 0,
    gestaltTeleMgrPowerPCSupport = 1,
    gestaltTeleMgrSoundStreams = 2,
    gestaltTeleMgrAutoAnswer = 3,
    gestaltTeleMgrIndHandset = 4,
    gestaltTeleMgrSilenceDetect = 5,
    gestaltTeleMgrNewTELNewSupport = 6,
};

pub const anon21241 = enum(u32) {
    gestaltTermMgrAttr = 1952805485,
    gestaltTermMgrPresent = 0,
    gestaltTermMgrErrorString = 2,
};

pub const anon21301 = enum(u32) {
    gestaltThreadMgrAttr = 1952998515,
    gestaltThreadMgrPresent = 0,
    gestaltSpecificMatchSupport = 1,
    gestaltThreadsLibraryPresent = 2,
};

pub const anon21371 = enum(u32) {
    gestaltTimeMgrVersion = 1953326962,
    gestaltStandardTimeMgr = 1,
    gestaltRevisedTimeMgr = 2,
    gestaltExtendedTimeMgr = 3,
    gestaltNativeTimeMgr = 4,
};

pub const anon21451 = enum(u32) {
    gestaltTSMTEVersion = 1953322070,
    gestaltTSMTE1 = 256,
    gestaltTSMTE15 = 336,
    gestaltTSMTE152 = 338,
};

pub const anon21521 = enum(u32) {
    gestaltTSMTEAttr = 1953322053,
    gestaltTSMTEPresent = 0,
    gestaltTSMTE = 0,
};

pub const anon21581 = enum(u32) {
    gestaltAVLTreeAttr = 1953654117,
    gestaltAVLTreePresentBit = 0,
    gestaltAVLTreeSupportsHandleBasedTreeBit = 1,
    gestaltAVLTreeSupportsTreeLockingBit = 2,
};

pub const anon21651 = enum(u32) {
    gestaltALMAttr = 1953655152,
    gestaltALMPresent = 0,
    gestaltALMHasSFGroup = 1,
    gestaltALMHasCFMSupport = 2,
    gestaltALMHasRescanNotifiers = 3,
};

pub const anon21731 = enum(u32) {
    gestaltALMHasSFLocation = 1,
};

pub const anon21771 = enum(u32) {
    gestaltTSMgrVersion = 1953721718,
    gestaltTSMgr15 = 336,
    gestaltTSMgr20 = 512,
    gestaltTSMgr22 = 544,
    gestaltTSMgr23 = 560,
};

pub const anon21851 = enum(u32) {
    gestaltTSMgrAttr = 1953721697,
    gestaltTSMDisplayMgrAwareBit = 0,
    gestaltTSMdoesTSMTEBit = 1,
};

pub const anon21911 = enum(u32) {
    gestaltSpeechAttr = 1953788771,
    gestaltSpeechMgrPresent = 0,
    gestaltSpeechHasPPCGlue = 1,
};

pub const anon21971 = enum(u32) {
    gestaltTVAttr = 1953898528,
    gestaltHasTVTuner = 0,
    gestaltHasSoundFader = 1,
    gestaltHasHWClosedCaptioning = 2,
    gestaltHasIRRemote = 3,
    gestaltHasVidDecoderScaler = 4,
    gestaltHasStereoDecoder = 5,
    gestaltHasSerialFader = 6,
    gestaltHasFMTuner = 7,
    gestaltHasSystemIRFunction = 8,
    gestaltIRDisabled = 9,
    gestaltINeedIRPowerOffConfirm = 10,
    gestaltHasZoomedVideo = 11,
};

pub const anon22141 = enum(u32) {
    gestaltATSUVersion = 1969845110,
    gestaltOriginalATSUVersion = 65536,
    gestaltATSUUpdate1 = 131072,
    gestaltATSUUpdate2 = 196608,
    gestaltATSUUpdate3 = 262144,
    gestaltATSUUpdate4 = 327680,
    gestaltATSUUpdate5 = 393216,
    gestaltATSUUpdate6 = 458752,
    gestaltATSUUpdate7 = 524288,
};

pub const anon22551 = enum(u32) {
    gestaltUSBAttr = 1970496032,
    gestaltUSBPresent = 0,
    gestaltUSBHasIsoch = 1,
};

pub const anon22611 = enum(u32) {
    gestaltUSBVersion = 1970496118,
};

pub const anon22651 = enum(u32) {
    gestaltVersion = 1986359923,
    gestaltValueImplementedVers = 5,
};

pub const anon22701 = enum(u32) {
    gestaltVIA1Addr = 1986617649,
};

pub const anon22741 = enum(u32) {
    gestaltVIA2Addr = 1986617650,
};

pub const anon22781 = enum(u32) {
    gestaltVMAttr = 1986863136,
    gestaltVMPresent = 0,
    gestaltVMHasLockMemoryForOutput = 1,
    gestaltVMFilemappingOn = 3,
    gestaltVMHasPagingControl = 4,
};

pub const anon22861 = enum(u32) {
    gestaltVMInfoType = 1986881902,
    gestaltVMInfoSizeStorageType = 0,
    gestaltVMInfoSizeType = 1,
    gestaltVMInfoSimpleType = 2,
    gestaltVMInfoNoneType = 3,
};

pub const anon22951 = enum(u32) {
    gestaltVMBackingStoreFileRefNum = 1986880115,
};

pub const anon23011 = enum(u32) {
    gestaltALMVers = 2002873451,
};

pub const anon23051 = enum(u32) {
    gestaltWindowMgrAttr = 2003398244,
    gestaltWindowMgrPresent = 1,
    gestaltWindowMgrPresentBit = 0,
    gestaltExtendedWindowAttributes = 1,
    gestaltExtendedWindowAttributesBit = 1,
    gestaltHasFloatingWindows = 2,
    gestaltHasFloatingWindowsBit = 2,
    gestaltHasWindowBuffering = 3,
    gestaltHasWindowBufferingBit = 3,
    gestaltWindowLiveResizeBit = 4,
    gestaltWindowMinimizeToDockBit = 5,
    gestaltHasWindowShadowsBit = 6,
    gestaltSheetsAreWindowModalBit = 7,
    gestaltFrontWindowMayBeHiddenBit = 8,
    gestaltWindowMgrPresentMask = 1,
    gestaltExtendedWindowAttributesMask = 2,
    gestaltHasFloatingWindowsMask = 4,
    gestaltHasWindowBufferingMask = 8,
    gestaltWindowLiveResizeMask = 16,
    gestaltWindowMinimizeToDockMask = 32,
    gestaltHasWindowShadowsMask = 64,
    gestaltSheetsAreWindowModalMask = 128,
    gestaltFrontWindowMayBeHiddenMask = 256,
};

pub const anon23341 = enum(u32) {
    gestaltHasSingleWindowModeBit = 8,
    gestaltHasSingleWindowModeMask = 256,
};

pub const anon23441 = enum(u32) {
    gestaltX86Features = 2016949862,
    gestaltX86HasFPU = 0,
    gestaltX86HasVME = 1,
    gestaltX86HasDE = 2,
    gestaltX86HasPSE = 3,
    gestaltX86HasTSC = 4,
    gestaltX86HasMSR = 5,
    gestaltX86HasPAE = 6,
    gestaltX86HasMCE = 7,
    gestaltX86HasCX8 = 8,
    gestaltX86HasAPIC = 9,
    gestaltX86HasSEP = 11,
    gestaltX86HasMTRR = 12,
    gestaltX86HasPGE = 13,
    gestaltX86HasMCA = 14,
    gestaltX86HasCMOV = 15,
    gestaltX86HasPAT = 16,
    gestaltX86HasPSE36 = 17,
    gestaltX86HasPSN = 18,
    gestaltX86HasCLFSH = 19,
    gestaltX86Serviced20 = 20,
    gestaltX86HasDS = 21,
    gestaltX86ResACPI = 22,
    gestaltX86HasMMX = 23,
    gestaltX86HasFXSR = 24,
    gestaltX86HasSSE = 25,
    gestaltX86HasSSE2 = 26,
    gestaltX86HasSS = 27,
    gestaltX86HasHTT = 28,
    gestaltX86HasTM = 29,
};

pub const anon23961 = enum(u32) {
    gestaltTranslationAttr = 2020368756,
    gestaltTranslationMgrExists = 0,
    gestaltTranslationMgrHintOrder = 1,
    gestaltTranslationPPCAvail = 2,
    gestaltTranslationGetPathAPIAvail = 3,
};

pub const anon24041 = enum(u32) {
    gestaltExtToolboxTable = 2020897908,
};

pub const anon24081 = enum(i32) {
    gestaltUSBPrinterSharingVersion = 2053204768,
    gestaltUSBPrinterSharingVersionMask = 65535,
    gestaltUSBPrinterSharingAttr = 2053204768,
    gestaltUSBPrinterSharingAttrMask = -65536,
    gestaltUSBPrinterSharingAttrRunning = -2147483648,
    gestaltUSBPrinterSharingAttrBooted = 1073741824,
};

pub const anon24181 = enum(u32) {
    gestaltWorldScriptIIVersion = 1685026146,
    gestaltWorldScriptIIAttr = 2004050292,
    gestaltWSIICanPrintWithoutPrGeneralBit = 0,
};

pub const anon601 = enum(objc.OSType) {
    cInsertionLoc = 1768846188,
    cInsertionPoint = 1667853939,
    cIntlText = 1769240692,
    cIntlWritingCode = 1768846444,
    cItem = 1667855469,
    cLine = 1668049262,
    cLongDateTime = 1818522656,
    cLongFixed = 1818654820,
    cLongFixedPoint = 1818652788,
    cLongFixedRectangle = 1818653283,
    cLongInteger = 1819242087,
    cLongPoint = 1819307636,
    cLongRectangle = 1819435892,
    cMachineLoc = 1833725795,
    cMenu = 1668116085,
    cMenuItem = 1668113774,
    cObject = 1668244074,
    cObjectSpecifier = 1868720672,
    cOpenableObject = 1668247394,
    cOval = 1668249196,
};

pub const anon641 = enum(u32) {
    aeBuildSyntaxNoErr = 0,
    aeBuildSyntaxBadToken = 1,
    aeBuildSyntaxBadEOF = 2,
    aeBuildSyntaxNoEOF = 3,
    aeBuildSyntaxBadNegative = 4,
    aeBuildSyntaxMissingQuote = 5,
    aeBuildSyntaxBadHex = 6,
    aeBuildSyntaxOddHex = 7,
    aeBuildSyntaxNoCloseHex = 8,
    aeBuildSyntaxUncoercedHex = 9,
    aeBuildSyntaxNoCloseString = 10,
    aeBuildSyntaxBadDesc = 11,
    aeBuildSyntaxBadData = 12,
    aeBuildSyntaxNoCloseParen = 13,
    aeBuildSyntaxNoCloseBracket = 14,
    aeBuildSyntaxNoCloseBrace = 15,
    aeBuildSyntaxNoKey = 16,
    aeBuildSyntaxNoColon = 17,
    aeBuildSyntaxCoercedList = 18,
    aeBuildSyntaxUncoercedDoubleAt = 19,
};

extern "CoreServices" fn MemError() callconv(.C) objc.OSErr;
pub const memError = MemError;

extern "CoreServices" fn LMGetMemErr() callconv(.C) objc.SInt16;
pub const lmGetMemErr = LMGetMemErr;

extern "CoreServices" fn LMSetMemErr(value: objc.SInt16) callconv(.C) void;
pub const lmSetMemErr = LMSetMemErr;

extern "CoreServices" fn NewHandle(byteCount: objc.Size) callconv(.C) objc.Handle;
pub const newHandle = NewHandle;

extern "CoreServices" fn NewHandleClear(byteCount: objc.Size) callconv(.C) objc.Handle;
pub const newHandleClear = NewHandleClear;

extern "CoreServices" fn RecoverHandle(p: objc.Ptr) callconv(.C) objc.Handle;
pub const recoverHandle = RecoverHandle;

extern "CoreServices" fn NewPtr(byteCount: objc.Size) callconv(.C) objc.Ptr;
pub const newPtr = NewPtr;

extern "CoreServices" fn NewPtrClear(byteCount: objc.Size) callconv(.C) objc.Ptr;
pub const newPtrClear = NewPtrClear;

extern "CoreServices" fn NewEmptyHandle() callconv(.C) objc.Handle;
pub const newEmptyHandle = NewEmptyHandle;

extern "CoreServices" fn HLock(h: objc.Handle) callconv(.C) void;
pub const hLock = HLock;

extern "CoreServices" fn HLockHi(h: objc.Handle) callconv(.C) void;
pub const hLockHi = HLockHi;

extern "CoreServices" fn HUnlock(h: objc.Handle) callconv(.C) void;
pub const hUnlock = HUnlock;

extern "CoreServices" fn TempNewHandle(logicalSize: objc.Size, resultCode: ?*objc.OSErr) callconv(.C) objc.Handle;
pub const tempNewHandle = TempNewHandle;

extern "CoreServices" fn DisposePtr(p: objc.Ptr) callconv(.C) void;
pub const disposePtr = DisposePtr;

extern "CoreServices" fn GetPtrSize(p: objc.Ptr) callconv(.C) objc.Size;
pub const getPtrSize = GetPtrSize;

extern "CoreServices" fn SetPtrSize(p: objc.Ptr, newSize: objc.Size) callconv(.C) void;
pub const setPtrSize = SetPtrSize;

extern "CoreServices" fn DisposeHandle(h: objc.Handle) callconv(.C) void;
pub const disposeHandle = DisposeHandle;

extern "CoreServices" fn SetHandleSize(h: objc.Handle, newSize: objc.Size) callconv(.C) void;
pub const setHandleSize = SetHandleSize;

extern "CoreServices" fn GetHandleSize(h: objc.Handle) callconv(.C) objc.Size;
pub const getHandleSize = GetHandleSize;

extern "CoreServices" fn ReallocateHandle(h: objc.Handle, byteCount: objc.Size) callconv(.C) void;
pub const reallocateHandle = ReallocateHandle;

extern "CoreServices" fn EmptyHandle(h: objc.Handle) callconv(.C) void;
pub const emptyHandle = EmptyHandle;

extern "CoreServices" fn HSetRBit(h: objc.Handle) callconv(.C) void;
pub const hSetRBit = HSetRBit;

extern "CoreServices" fn HClrRBit(h: objc.Handle) callconv(.C) void;
pub const hClrRBit = HClrRBit;

extern "CoreServices" fn HGetState(h: objc.Handle) callconv(.C) objc.SInt8;
pub const hGetState = HGetState;

extern "CoreServices" fn HSetState(h: objc.Handle, flags: objc.SInt8) callconv(.C) void;
pub const hSetState = HSetState;

extern "CoreServices" fn HandToHand(theHndl: ?*objc.Handle) callconv(.C) objc.OSErr;
pub const handToHand = HandToHand;

extern "CoreServices" fn PtrToXHand(srcPtr: ?*anyopaque, dstHndl: objc.Handle, size: i64) callconv(.C) objc.OSErr;
pub const ptrToXHand = PtrToXHand;

extern "CoreServices" fn PtrToHand(srcPtr: ?*anyopaque, dstHndl: ?*objc.Handle, size: i64) callconv(.C) objc.OSErr;
pub const ptrToHand = PtrToHand;

extern "CoreServices" fn HandAndHand(hand1: objc.Handle, hand2: objc.Handle) callconv(.C) objc.OSErr;
pub const handAndHand = HandAndHand;

extern "CoreServices" fn PtrAndHand(ptr1: ?*anyopaque, hand2: objc.Handle, size: i64) callconv(.C) objc.OSErr;
pub const ptrAndHand = PtrAndHand;

extern "CoreServices" fn IsHeapValid() callconv(.C) objc.Boolean;
pub const isHeapValid = IsHeapValid;

extern "CoreServices" fn IsHandleValid(h: objc.Handle) callconv(.C) objc.Boolean;
pub const isHandleValid = IsHandleValid;

extern "CoreServices" fn IsPointerValid(p: objc.Ptr) callconv(.C) objc.Boolean;
pub const isPointerValid = IsPointerValid;

extern "CoreServices" fn S64Max() callconv(.C) objc.SInt64;
pub const s64Max = S64Max;

extern "CoreServices" fn S64Min() callconv(.C) objc.SInt64;
pub const s64Min = S64Min;

extern "CoreServices" fn S64Add(left: objc.SInt64, right: objc.SInt64) callconv(.C) objc.SInt64;
pub const s64Add = S64Add;

extern "CoreServices" fn S64Subtract(left: objc.SInt64, right: objc.SInt64) callconv(.C) objc.SInt64;
pub const s64Subtract = S64Subtract;

extern "CoreServices" fn S64Negate(value: objc.SInt64) callconv(.C) objc.SInt64;
pub const s64Negate = S64Negate;

extern "CoreServices" fn S64Absolute(value: objc.SInt64) callconv(.C) objc.SInt64;
pub const s64Absolute = S64Absolute;

extern "CoreServices" fn S64Multiply(left: objc.SInt64, right: objc.SInt64) callconv(.C) objc.SInt64;
pub const s64Multiply = S64Multiply;

extern "CoreServices" fn S64Mod(dividend: objc.SInt64, divisor: objc.SInt64) callconv(.C) objc.SInt64;
pub const s64Mod = S64Mod;

extern "CoreServices" fn S64Divide(dividend: objc.SInt64, divisor: objc.SInt64, remainderP: ?*objc.SInt64) callconv(.C) objc.SInt64;
pub const s64Divide = S64Divide;

extern "CoreServices" fn S64Div(dividend: objc.SInt64, divisor: objc.SInt64) callconv(.C) objc.SInt64;
pub const s64Div = S64Div;

extern "CoreServices" fn S64Set(value: objc.SInt32) callconv(.C) objc.SInt64;
pub const s64Set = S64Set;

extern "CoreServices" fn S64SetU(value: objc.UInt32) callconv(.C) objc.SInt64;
pub const s64SetU = S64SetU;

extern "CoreServices" fn S32Set(value: objc.SInt64) callconv(.C) objc.SInt32;
pub const s32Set = S32Set;

extern "CoreServices" fn S64And(left: objc.SInt64, right: objc.SInt64) callconv(.C) objc.Boolean;
pub const s64And = S64And;

extern "CoreServices" fn S64Or(left: objc.SInt64, right: objc.SInt64) callconv(.C) objc.Boolean;
pub const s64Or = S64Or;

extern "CoreServices" fn S64Eor(left: objc.SInt64, right: objc.SInt64) callconv(.C) objc.Boolean;
pub const s64Eor = S64Eor;

extern "CoreServices" fn S64Not(value: objc.SInt64) callconv(.C) objc.Boolean;
pub const s64Not = S64Not;

extern "CoreServices" fn S64Compare(left: objc.SInt64, right: objc.SInt64) callconv(.C) objc.SInt32;
pub const s64Compare = S64Compare;

extern "CoreServices" fn S64BitwiseAnd(left: objc.SInt64, right: objc.SInt64) callconv(.C) objc.SInt64;
pub const s64BitwiseAnd = S64BitwiseAnd;

extern "CoreServices" fn S64BitwiseOr(left: objc.SInt64, right: objc.SInt64) callconv(.C) objc.SInt64;
pub const s64BitwiseOr = S64BitwiseOr;

extern "CoreServices" fn S64BitwiseEor(left: objc.SInt64, right: objc.SInt64) callconv(.C) objc.SInt64;
pub const s64BitwiseEor = S64BitwiseEor;

extern "CoreServices" fn S64BitwiseNot(value: objc.SInt64) callconv(.C) objc.SInt64;
pub const s64BitwiseNot = S64BitwiseNot;

extern "CoreServices" fn S64ShiftRight(value: objc.SInt64, shift: objc.UInt32) callconv(.C) objc.SInt64;
pub const s64ShiftRight = S64ShiftRight;

extern "CoreServices" fn S64ShiftLeft(value: objc.SInt64, shift: objc.UInt32) callconv(.C) objc.SInt64;
pub const s64ShiftLeft = S64ShiftLeft;

extern "CoreServices" fn SInt64ToLongDouble(value: objc.SInt64) callconv(.C) f64;
pub const sInt64ToLongDouble = SInt64ToLongDouble;

extern "CoreServices" fn LongDoubleToSInt64(value: f64) callconv(.C) objc.SInt64;
pub const longDoubleToSInt64 = LongDoubleToSInt64;

extern "CoreServices" fn U64Max() callconv(.C) objc.UInt64;
pub const u64Max = U64Max;

extern "CoreServices" fn U64Add(left: objc.UInt64, right: objc.UInt64) callconv(.C) objc.UInt64;
pub const u64Add = U64Add;

extern "CoreServices" fn U64Subtract(left: objc.UInt64, right: objc.UInt64) callconv(.C) objc.UInt64;
pub const u64Subtract = U64Subtract;

extern "CoreServices" fn U64Multiply(left: objc.UInt64, right: objc.UInt64) callconv(.C) objc.UInt64;
pub const u64Multiply = U64Multiply;

extern "CoreServices" fn U64Mod(dividend: objc.UInt64, divisor: objc.UInt64) callconv(.C) objc.UInt64;
pub const u64Mod = U64Mod;

extern "CoreServices" fn U64Divide(dividend: objc.UInt64, divisor: objc.UInt64, remainder: ?*objc.UInt64) callconv(.C) objc.UInt64;
pub const u64Divide = U64Divide;

extern "CoreServices" fn U64Div(dividend: objc.UInt64, divisor: objc.UInt64) callconv(.C) objc.UInt64;
pub const u64Div = U64Div;

extern "CoreServices" fn U64Set(value: objc.SInt32) callconv(.C) objc.UInt64;
pub const u64Set = U64Set;

extern "CoreServices" fn U64SetU(value: objc.UInt32) callconv(.C) objc.UInt64;
pub const u64SetU = U64SetU;

extern "CoreServices" fn U32SetU(value: objc.UInt64) callconv(.C) objc.UInt32;
pub const u32SetU = U32SetU;

extern "CoreServices" fn U64And(left: objc.UInt64, right: objc.UInt64) callconv(.C) objc.Boolean;
pub const u64And = U64And;

extern "CoreServices" fn U64Or(left: objc.UInt64, right: objc.UInt64) callconv(.C) objc.Boolean;
pub const u64Or = U64Or;

extern "CoreServices" fn U64Eor(left: objc.UInt64, right: objc.UInt64) callconv(.C) objc.Boolean;
pub const u64Eor = U64Eor;

extern "CoreServices" fn U64Not(value: objc.UInt64) callconv(.C) objc.Boolean;
pub const u64Not = U64Not;

extern "CoreServices" fn U64Compare(left: objc.UInt64, right: objc.UInt64) callconv(.C) objc.SInt32;
pub const u64Compare = U64Compare;

extern "CoreServices" fn U64BitwiseAnd(left: objc.UInt64, right: objc.UInt64) callconv(.C) objc.UInt64;
pub const u64BitwiseAnd = U64BitwiseAnd;

extern "CoreServices" fn U64BitwiseOr(left: objc.UInt64, right: objc.UInt64) callconv(.C) objc.UInt64;
pub const u64BitwiseOr = U64BitwiseOr;

extern "CoreServices" fn U64BitwiseEor(left: objc.UInt64, right: objc.UInt64) callconv(.C) objc.UInt64;
pub const u64BitwiseEor = U64BitwiseEor;

extern "CoreServices" fn U64BitwiseNot(value: objc.UInt64) callconv(.C) objc.UInt64;
pub const u64BitwiseNot = U64BitwiseNot;

extern "CoreServices" fn U64ShiftRight(value: objc.UInt64, shift: objc.UInt32) callconv(.C) objc.UInt64;
pub const u64ShiftRight = U64ShiftRight;

extern "CoreServices" fn U64ShiftLeft(value: objc.UInt64, shift: objc.UInt32) callconv(.C) objc.UInt64;
pub const u64ShiftLeft = U64ShiftLeft;

extern "CoreServices" fn UInt64ToLongDouble(value: objc.UInt64) callconv(.C) f64;
pub const uInt64ToLongDouble = UInt64ToLongDouble;

extern "CoreServices" fn LongDoubleToUInt64(value: f64) callconv(.C) objc.UInt64;
pub const longDoubleToUInt64 = LongDoubleToUInt64;

extern "CoreServices" fn UInt64ToSInt64(value: objc.UInt64) callconv(.C) objc.SInt64;
pub const uInt64ToSInt64 = UInt64ToSInt64;

extern "CoreServices" fn SInt64ToUInt64(value: objc.SInt64) callconv(.C) objc.UInt64;
pub const sInt64ToUInt64 = SInt64ToUInt64;

extern "CoreServices" fn SInt64ToWide(s: objc.SInt64) callconv(.C) objc.wide;
pub const sInt64ToWide = SInt64ToWide;

extern "CoreServices" fn WideToSInt64(w: objc.wide) callconv(.C) objc.SInt64;
pub const wideToSInt64 = WideToSInt64;

extern "CoreServices" fn UInt64ToUnsignedWide(u: objc.UInt64) callconv(.C) objc.UnsignedWide;
pub const uInt64ToUnsignedWide = UInt64ToUnsignedWide;

extern "CoreServices" fn UnsignedWideToUInt64(uw: objc.UnsignedWide) callconv(.C) objc.UInt64;
pub const unsignedWideToUInt64 = UnsignedWideToUInt64;

extern "CoreServices" fn CSBackupSetItemExcluded(item: core_foundation.URLRef, exclude: objc.Boolean, excludeByPath: objc.Boolean) callconv(.C) objc.OSStatus;
pub const csBackupSetItemExcluded = CSBackupSetItemExcluded;

extern "CoreServices" fn CSBackupIsItemExcluded(item: core_foundation.URLRef, excludeByPath: ?*objc.Boolean) callconv(.C) objc.Boolean;
pub const csBackupIsItemExcluded = CSBackupIsItemExcluded;

pub const anon451 = enum(u32) {
    NoLooping = 0,
    ForwardLooping = 1,
    ForwardBackwardLooping = 2,
};

pub const CSDiskSpaceRecoveryOptions = i32;

pub const CSDiskSpaceRecoveryCallback = *const fn (objc.Boolean, objc.UInt64, core_foundation.ErrorRef) callconv(.C) void;

extern "CoreServices" fn CSDiskSpaceStartRecovery(
    volumeURL: core_foundation.URLRef,
    bytesNeeded: objc.UInt64,
    options: CSDiskSpaceRecoveryOptions,
    outOperationUUID: ?*core_foundation.UUIDRef,
    callbackQueue: objc.dispatch_queue_t,
    callback: CSDiskSpaceRecoveryCallback,
) callconv(.C) void;
pub const csDiskSpaceStartRecovery = CSDiskSpaceStartRecovery;

extern "CoreServices" fn CSDiskSpaceCancelRecovery(operationUUID: core_foundation.UUIDRef) callconv(.C) void;
pub const csDiskSpaceCancelRecovery = CSDiskSpaceCancelRecovery;

extern "CoreServices" fn CSDiskSpaceGetRecoveryEstimate(volumeURL: core_foundation.URLRef) callconv(.C) objc.UInt64;
pub const csDiskSpaceGetRecoveryEstimate = CSDiskSpaceGetRecoveryEstimate;

pub const ToggleResults = objc.SInt16;

pub const anon1041 = enum(u32) {
    kUnlockStateKCStatus = 1,
    kRdPermKCStatus = 2,
    kWrPermKCStatus = 4,
};

pub const LongDateField = objc.SInt8;

pub const anon1201 = enum(u32) {
    kClassKCItemAttr = 1668047219,
    kCreationDateKCItemAttr = 1667522932,
    kModDateKCItemAttr = 1835295092,
    kDescriptionKCItemAttr = 1684370275,
    kCommentKCItemAttr = 1768123764,
    kCreatorKCItemAttr = 1668445298,
    kTypeKCItemAttr = 1954115685,
    kScriptCodeKCItemAttr = 1935897200,
    kLabelKCItemAttr = 1818321516,
    kInvisibleKCItemAttr = 1768846953,
    kNegativeKCItemAttr = 1852139361,
    kCustomIconKCItemAttr = 1668641641,
    kAccountKCItemAttr = 1633903476,
    kServiceKCItemAttr = 1937138533,
    kGenericKCItemAttr = 1734700641,
    kSecurityDomainKCItemAttr = 1935961454,
    kServerKCItemAttr = 1936881266,
    kAuthTypeKCItemAttr = 1635023216,
    kPortKCItemAttr = 1886351988,
    kPathKCItemAttr = 1885434984,
    kVolumeKCItemAttr = 1986817381,
    kAddressKCItemAttr = 1633969266,
    kSignatureKCItemAttr = 1936943463,
    kProtocolKCItemAttr = 1886675820,
    kSubjectKCItemAttr = 1937072746,
    kCommonNameKCItemAttr = 1668161568,
    kIssuerKCItemAttr = 1769173877,
    kSerialNumberKCItemAttr = 1936614002,
    kEMailKCItemAttr = 1835100524,
    kPublicKeyHashKCItemAttr = 1752198009,
    kIssuerURLKCItemAttr = 1769304684,
    kEncryptKCItemAttr = 1701733234,
    kDecryptKCItemAttr = 1684366194,
    kSignKCItemAttr = 1936287598,
    kVerifyKCItemAttr = 1986359913,
    kWrapKCItemAttr = 2003984752,
    kUnwrapKCItemAttr = 1970173810,
    kStartDateKCItemAttr = 1935958388,
    kEndDateKCItemAttr = 1701077364,
};

pub const DateForm = objc.SInt8;

pub const StringToDateStatus = i16;

pub const String2DateStatus = StringToDateStatus;

pub const DateCacheRecord = extern struct {
    hidden: [256]i16,
};

pub const DateCachePtr = ?*DateCacheRecord;

pub const DateTimeRec = extern struct {
    year: i16,
    month: i16,
    day: i16,
    hour: i16,
    minute: i16,
    second: i16,
    dayOfWeek: i16,
};

pub const LongDateTime = objc.SInt64;

pub const LongDateCvt = extern union {
    c: objc.SInt64,
    hl: anon1913,
};

pub const anon1913 = extern struct {
    lLow: objc.UInt32,
    lHigh: objc.UInt32,
};

pub const LongDateRec = extern union {
    ld: anon2003,
    list: [14]i16,
    od: anon2173,
};

pub const anon2003 = extern struct {
    era: i16,
    year: i16,
    month: i16,
    day: i16,
    hour: i16,
    minute: i16,
    second: i16,
    dayOfWeek: i16,
    dayOfYear: i16,
    weekOfYear: i16,
    pm: i16,
    res1: i16,
    res2: i16,
    res3: i16,
};

pub const anon2173 = extern struct {
    eraAlt: i16,
    oldDate: DateTimeRec,
};

pub const DateDelta = objc.SInt8;

pub const TogglePB = extern struct {
    togFlags: i64,
    amChars: objc.ResType,
    pmChars: objc.ResType,
    reserved: [4]i64,
};

extern "CoreServices" fn UCConvertUTCDateTimeToCFAbsoluteTime(iUTCDate: ?*UTCDateTime, oCFTime: ?*core_foundation.AbsoluteTime) callconv(.C) objc.OSStatus;
pub const ucConvertUTCDateTimeToCFAbsoluteTime = UCConvertUTCDateTimeToCFAbsoluteTime;

extern "CoreServices" fn UCConvertSecondsToCFAbsoluteTime(iSeconds: objc.UInt32, oCFTime: ?*core_foundation.AbsoluteTime) callconv(.C) objc.OSStatus;
pub const ucConvertSecondsToCFAbsoluteTime = UCConvertSecondsToCFAbsoluteTime;

extern "CoreServices" fn UCConvertLongDateTimeToCFAbsoluteTime(iLongTime: LongDateTime, oCFTime: ?*core_foundation.AbsoluteTime) callconv(.C) objc.OSStatus;
pub const ucConvertLongDateTimeToCFAbsoluteTime = UCConvertLongDateTimeToCFAbsoluteTime;

extern "CoreServices" fn UCConvertCFAbsoluteTimeToUTCDateTime(iCFTime: core_foundation.AbsoluteTime, oUTCDate: ?*UTCDateTime) callconv(.C) objc.OSStatus;
pub const ucConvertCFAbsoluteTimeToUTCDateTime = UCConvertCFAbsoluteTimeToUTCDateTime;

extern "CoreServices" fn UCConvertCFAbsoluteTimeToSeconds(iCFTime: core_foundation.AbsoluteTime, oSeconds: ?*objc.UInt32) callconv(.C) objc.OSStatus;
pub const ucConvertCFAbsoluteTimeToSeconds = UCConvertCFAbsoluteTimeToSeconds;

extern "CoreServices" fn UCConvertCFAbsoluteTimeToLongDateTime(iCFTime: core_foundation.AbsoluteTime, oLongDate: ?*LongDateTime) callconv(.C) objc.OSStatus;
pub const ucConvertCFAbsoluteTimeToLongDateTime = UCConvertCFAbsoluteTimeToLongDateTime;

pub const QTypes = objc.SignedByte;

pub const QElem = extern struct {
    qLink: ?*QElem,
    qType: i16,
    qData: [1]i16,
};

pub const QElemPtr = ?*QElem;

pub const QHdr = extern struct {
    qFlags: i16,
    qHead: QElemPtr,
    qTail: QElemPtr,
};

pub const QHdrPtr = ?*QHdr;

pub const MachineLocation = extern struct {
    latitude: objc.Fract,
    longitude: objc.Fract,
    u: anon1145,
};

pub const anon1145 = extern union {
    gmtDelta: i64,
    dls: anon1199,
};

pub const anon1199 = extern struct {
    pad: [3]objc.SInt8,
    Delta: objc.SInt8,
};

extern "CoreServices" fn IsMetric() callconv(.C) objc.Boolean;
pub const isMetric = IsMetric;

extern "CoreServices" fn Delay(numTicks: u64, finalTicks: ?*u64) callconv(.C) void;
pub const delay = Delay;

extern "CoreServices" fn Enqueue(qElement: QElemPtr, qHeader: QHdrPtr) callconv(.C) void;
pub const enqueue = Enqueue;

extern "CoreServices" fn Dequeue(qElement: QElemPtr, qHeader: QHdrPtr) callconv(.C) objc.OSErr;
pub const dequeue = Dequeue;

extern "CoreServices" fn ReadLocation(loc: ?*MachineLocation) callconv(.C) void;
pub const readLocation = ReadLocation;

extern "CoreServices" fn TickCount() callconv(.C) objc.UInt32;
pub const tickCount = TickCount;

extern "CoreServices" fn CSCopyUserName(useShortName: objc.Boolean) callconv(.C) core_foundation.StringRef;
pub const csCopyUserName = CSCopyUserName;

extern "CoreServices" fn CSCopyMachineName() callconv(.C) core_foundation.StringRef;
pub const csCopyMachineName = CSCopyMachineName;

pub const anon4481 = enum(u32) {
    useFree = 0,
    useATalk = 1,
    useAsync = 2,
    useExtClk = 3,
    useMIDI = 4,
};

pub const anon4561 = enum(u32) {
    false32b = 0,
    true32b = 1,
};

pub const SysPPtr = ?*anyopaque;

pub const DeferredTaskProcPtr = ?*const fn (i64) callconv(.C) void;

pub const DeferredTaskUPP = DeferredTaskProcPtr;

extern "CoreServices" fn NewDeferredTaskUPP(userRoutine: DeferredTaskProcPtr) callconv(.C) DeferredTaskUPP;
pub const newDeferredTaskUPP = NewDeferredTaskUPP;

extern "CoreServices" fn DisposeDeferredTaskUPP(userUPP: DeferredTaskUPP) callconv(.C) void;
pub const disposeDeferredTaskUPP = DisposeDeferredTaskUPP;

extern "CoreServices" fn InvokeDeferredTaskUPP(dtParam: i64, userUPP: DeferredTaskUPP) callconv(.C) void;
pub const invokeDeferredTaskUPP = InvokeDeferredTaskUPP;

pub const DeferredTask = extern struct {
    qLink: QElemPtr,
    qType: i16,
    dtFlags: i16,
    dtAddr: DeferredTaskUPP,
    dtParam: i64,
    dtReserved: i64,
};

pub const DeferredTaskPtr = ?*DeferredTask;

pub const anon671 = enum(DescType) {
    typeSInt16 = 1936224114,
    typeUInt16 = 1970497650,
    typeSInt32 = 1819242087,
    typeUInt32 = 1835100014,
    typeSInt64 = 1668246896,
    typeUInt64 = 1969450861,
    typeIEEE32BitFloatingPoint = 1936289383,
    typeIEEE64BitFloatingPoint = 1685026146,
    type128BitFloatingPoint = 1818518124,
    typeDecimalStruct = 1684366189,
};

pub const anon1161 = enum(u32) {
    kUnicodeDefaultDirectionMask = 0,
    kUnicodeLeftToRightMask = 4,
    kUnicodeRightToLeftMask = 8,
};

pub const anon6101 = enum(objc.OSType) {
    kAEQuitPreserveState = 1937006964,
    kAEQuitReason = 2003335487,
};

pub const anon10121 = enum(u32) {
    kMPMaxAllocSize = 1073741824,
};

pub const anon991 = enum(u32) {
    kCSIdentityQueryStringEquals = 1,
    kCSIdentityQueryStringBeginsWith = 2,
};

pub const anon1181 = enum(u32) {
    fsRdAccessPerm = 1,
    fsWrAccessPerm = 2,
    fsRdDenyPerm = 16,
    fsWrDenyPerm = 32,
};

pub const anon1251 = enum(i32) {
    kDurationImmediate = 0,
    kDurationForever = 2147483647,
    kDurationMillisecond = 1,
    kDurationMicrosecond = -1,
};

pub const anon1301 = enum(u32) {
    fsAtMark = 0,
    fsFromStart = 1,
    fsFromLEOF = 2,
    fsFromMark = 3,
};

pub const anon1551 = enum(u32) {
    fsSBPartialName = 1,
    fsSBFullName = 2,
    fsSBFlAttrib = 4,
    fsSBFlFndrInfo = 8,
    fsSBFlLgLen = 32,
    fsSBFlPyLen = 64,
    fsSBFlRLgLen = 128,
    fsSBFlRPyLen = 256,
    fsSBFlCrDat = 512,
    fsSBFlMdDat = 1024,
    fsSBFlBkDat = 2048,
    fsSBFlXFndrInfo = 4096,
    fsSBFlParID = 8192,
    fsSBNegate = 16384,
    fsSBDrUsrWds = 8,
    fsSBDrNmFls = 16,
    fsSBDrCrDat = 512,
    fsSBDrMdDat = 1024,
    fsSBDrBkDat = 2048,
    fsSBDrFndrInfo = 4096,
    fsSBDrParID = 8192,
    fsSBNodeID = 32768,
    fsSBAttributeModDate = 65536,
    fsSBAccessDate = 131072,
    fsSBPermissions = 262144,
    fsSBSkipPackageContents = 524288,
    fsSBSkipHiddenItems = 1048576,
    fsSBUserID = 2097152,
    fsSBGroupID = 4194304,
};

pub const anon1881 = enum(u32) {
    fsSBPartialNameBit = 0,
    fsSBFullNameBit = 1,
    fsSBFlAttribBit = 2,
    fsSBFlFndrInfoBit = 3,
    fsSBFlLgLenBit = 5,
    fsSBFlPyLenBit = 6,
    fsSBFlRLgLenBit = 7,
    fsSBFlRPyLenBit = 8,
    fsSBFlCrDatBit = 9,
    fsSBFlMdDatBit = 10,
    fsSBFlBkDatBit = 11,
    fsSBFlXFndrInfoBit = 12,
    fsSBFlParIDBit = 13,
    fsSBNegateBit = 14,
    fsSBDrUsrWdsBit = 3,
    fsSBDrNmFlsBit = 4,
    fsSBDrCrDatBit = 9,
    fsSBDrMdDatBit = 10,
    fsSBDrBkDatBit = 11,
    fsSBDrFndrInfoBit = 12,
    fsSBDrParIDBit = 13,
    fsSBNodeIDBit = 15,
    fsSBAttributeModDateBit = 16,
    fsSBAccessDateBit = 17,
    fsSBPermissionsBit = 18,
    fsSBSkipPackageContentsBit = 19,
    fsSBSkipHiddenItemsBit = 20,
    fsSBUserIDBit = 21,
    fsSBGroupIDBit = 22,
};

pub const anon2561 = enum(u32) {
    bIsEjectable = 0,
    bSupportsHFSPlusAPIs = 1,
    bSupportsFSCatalogSearch = 2,
    bSupportsFSExchangeObjects = 3,
    bSupports2TBFiles = 4,
    bSupportsLongNames = 5,
    bSupportsMultiScriptNames = 6,
    bSupportsNamedForks = 7,
    bSupportsSubtreeIterators = 8,
    bL2PCanMapFileBlocks = 9,
    bParentModDateChanges = 10,
    bAncestorModDateChanges = 11,
    bSupportsSymbolicLinks = 13,
    bIsAutoMounted = 14,
    bAllowCDiDataHandler = 17,
    bSupportsExclusiveLocks = 18,
    bSupportsJournaling = 19,
    bNoVolumeSizes = 20,
    bIsOnInternalBus = 21,
    bIsCaseSensitive = 22,
    bIsCasePreserving = 23,
    bDoNotDisplay = 24,
    bIsRemovable = 25,
    bNoRootTimes = 26,
    bIsOnExternalBus = 27,
    bSupportsExtendedFileSecurity = 28,
};

pub const anon2981 = enum(u32) {
    fsUnixPriv = 1,
};

pub const anon3031 = enum(u32) {
    kNoUserAuthentication = 1,
    kPassword = 2,
    kEncryptPassword = 3,
    kTwoWayEncryptPassword = 6,
};

pub const FSVolumeRefNum = objc.SInt16;

pub const FSIORefNum = i32;

pub const anon3301 = enum(u32) {
    kFSInvalidVolumeRefNum = 0,
};

pub const FSRefPtr = ?*FSRef;

pub const __FSFileSecurity = extern struct {};

pub const FSFileSecurityRef = ?*__FSFileSecurity;

pub const CatPositionRec = extern struct {
    initialize: objc.SInt32,
    priv: [6]objc.SInt16,
};

pub const FSSpec = extern struct {
    hidden: [70]objc.UInt8,
};

pub const FSSpecPtr = ?*FSSpec;

pub const FSSpecHandle = ?*FSSpecPtr;

pub const FSSpecArrayPtr = FSSpecPtr;

pub const ConstFSSpecPtr = ?*FSSpec;

pub const ParamBlockRec = extern union {};

pub const ParmBlkPtr = ?*anyopaque;

pub const IOCompletionProcPtr = ?*const fn (ParmBlkPtr) callconv(.C) void;

pub const IOCompletionUPP = IOCompletionProcPtr;

pub const FSPermissionInfo = extern struct {
    userID: objc.UInt32,
    groupID: objc.UInt32,
    reserved1: objc.UInt8,
    userAccess: objc.UInt8,
    mode: objc.UInt16,
    fileSec: FSFileSecurityRef,
};

pub const FSCatalogInfoBitmap = objc.UInt32;

pub const anon10821 = enum(i32) {
    kFSCatInfoNone = 0,
    kFSCatInfoTextEncoding = 1,
    kFSCatInfoNodeFlags = 2,
    kFSCatInfoVolume = 4,
    kFSCatInfoParentDirID = 8,
    kFSCatInfoNodeID = 16,
    kFSCatInfoCreateDate = 32,
    kFSCatInfoContentMod = 64,
    kFSCatInfoAttrMod = 128,
    kFSCatInfoAccessDate = 256,
    kFSCatInfoBackupDate = 512,
    kFSCatInfoPermissions = 1024,
    kFSCatInfoFinderInfo = 2048,
    kFSCatInfoFinderXInfo = 4096,
    kFSCatInfoValence = 8192,
    kFSCatInfoDataSizes = 16384,
    kFSCatInfoRsrcSizes = 32768,
    kFSCatInfoSharingFlags = 65536,
    kFSCatInfoUserPrivs = 131072,
    kFSCatInfoUserAccess = 524288,
    kFSCatInfoSetOwnership = 1048576,
    kFSCatInfoFSFileSecurityRef = 4194304,
    kFSCatInfoAllDates = 992,
    kFSCatInfoGettableInfo = 262143,
    kFSCatInfoSettableInfo = 8163,
    kFSCatInfoReserved = -262144,
};

pub const anon11121 = enum(u32) {
    kFSNodeLockedBit = 0,
    kFSNodeLockedMask = 1,
    kFSNodeResOpenBit = 2,
    kFSNodeResOpenMask = 4,
    kFSNodeDataOpenBit = 3,
    kFSNodeDataOpenMask = 8,
    kFSNodeIsDirectoryBit = 4,
    kFSNodeIsDirectoryMask = 16,
    kFSNodeCopyProtectBit = 6,
    kFSNodeCopyProtectMask = 64,
    kFSNodeForkOpenBit = 7,
    kFSNodeForkOpenMask = 128,
    kFSNodeHardLinkBit = 8,
    kFSNodeHardLinkMask = 256,
};

pub const anon11301 = enum(u32) {
    kFSNodeInSharedBit = 2,
    kFSNodeInSharedMask = 4,
    kFSNodeIsMountedBit = 3,
    kFSNodeIsMountedMask = 8,
    kFSNodeIsSharePointBit = 5,
    kFSNodeIsSharePointMask = 32,
};

pub const FSCatalogInfo = extern struct {
    nodeFlags: objc.UInt16,
    volume: FSVolumeRefNum,
    parentDirID: objc.UInt32,
    nodeID: objc.UInt32,
    sharingFlags: objc.UInt8,
    userPrivileges: objc.UInt8,
    reserved1: objc.UInt8,
    reserved2: objc.UInt8,
    createDate: UTCDateTime,
    contentModDate: UTCDateTime,
    attributeModDate: UTCDateTime,
    accessDate: UTCDateTime,
    backupDate: UTCDateTime,
    permissions: FSPermissionInfo,
    finderInfo: [16]objc.UInt8,
    extFinderInfo: [16]objc.UInt8,
    dataLogicalSize: objc.UInt64,
    dataPhysicalSize: objc.UInt64,
    rsrcLogicalSize: objc.UInt64,
    rsrcPhysicalSize: objc.UInt64,
    valence: objc.UInt32,
    textEncodingHint: TextEncoding,
};

pub const FSCatalogInfoPtr = ?*FSCatalogInfo;

pub const FSRefParam = extern struct {
    qLink: QElemPtr,
    qType: objc.SInt16,
    ioTrap: objc.SInt16,
    ioCmdAddr: objc.Ptr,
    ioCompletion: IOCompletionUPP,
    ioResult: objc.OSErr,
    ioNamePtr: objc.ConstStringPtr,
    ioVRefNum: FSVolumeRefNum,
    reserved1: objc.SInt16,
    reserved2: objc.UInt8,
    reserved3: objc.UInt8,
    ref: ?*FSRef,
    whichInfo: FSCatalogInfoBitmap,
    catInfo: ?*FSCatalogInfo,
    nameLength: objc.UniCharCount,
    name: ?*objc.UniChar,
    ioDirID: objc.UInt32,
    spec: FSSpecPtr,
    parentRef: ?*FSRef,
    newRef: ?*FSRef,
    textEncodingHint: TextEncoding,
    outName: ?*objc.HFSUniStr255,
};

pub const FSRefParamPtr = ?*FSRefParam;

pub const FSRefForkIOParam = extern struct {
    qLink: QElemPtr,
    qType: objc.SInt16,
    ioTrap: objc.SInt16,
    ioCmdAddr: objc.Ptr,
    ioCompletion: IOCompletionUPP,
    ioResult: objc.OSErr,
    parentRef: ?*FSRef,
    nameLength: objc.UniCharCount,
    name: ?*objc.UniChar,
    whichInfo: FSCatalogInfoBitmap,
    catInfo: ?*FSCatalogInfo,
    forkNameLength: objc.UniCharCount,
    forkName: ?*objc.UniChar,
    permissions: objc.SInt8,
    reserved1: objc.UInt8,
    forkRefNum: FSIORefNum,
    newRef: ?*FSRef,
};

pub const FSRefForkIOParamPtr = ?*FSRefForkIOParam;

pub const OpaqueFSIterator = extern struct {};

pub const FSIterator = ?*OpaqueFSIterator;

pub const anon13551 = enum(i32) {
    kFSIterateFlat = 0,
    kFSIterateSubtree = 1,
    kFSIterateDelete = 2,
    kFSIterateReserved = -4,
};

pub const FSIteratorFlags = objc.OptionBits;

pub const FSSearchParams = extern struct {
    searchTime: objc.Duration,
    searchBits: objc.OptionBits,
    searchNameLength: objc.UniCharCount,
    searchName: ?*objc.UniChar,
    searchInfo1: ?*FSCatalogInfo,
    searchInfo2: ?*FSCatalogInfo,
};

pub const FSSearchParamsPtr = ?*FSSearchParams;

pub const FSCatalogBulkParam = extern struct {
    qLink: QElemPtr,
    qType: objc.SInt16,
    ioTrap: objc.SInt16,
    ioCmdAddr: objc.Ptr,
    ioCompletion: IOCompletionUPP,
    ioResult: objc.OSErr,
    containerChanged: objc.Boolean,
    reserved: objc.UInt8,
    iteratorFlags: FSIteratorFlags,
    iterator: FSIterator,
    container: ?*FSRef,
    maximumItems: objc.ItemCount,
    actualItems: objc.ItemCount,
    whichInfo: FSCatalogInfoBitmap,
    catalogInfo: ?*FSCatalogInfo,
    refs: ?*FSRef,
    specs: FSSpecPtr,
    names: ?*objc.HFSUniStr255,
    searchParams: ?*FSSearchParams,
};

pub const FSCatalogBulkParamPtr = ?*FSCatalogBulkParam;

pub const FSAllocationFlags = objc.UInt16;

pub const anon13981 = enum(u32) {
    kFSAllocDefaultFlags = 0,
    kFSAllocAllOrNothingMask = 1,
    kFSAllocContiguousMask = 2,
    kFSAllocNoRoundUpMask = 4,
    kFSAllocReservedMask = 65528,
};

pub const FSForkIOParam = extern struct {
    qLink: QElemPtr,
    qType: objc.SInt16,
    ioTrap: objc.SInt16,
    ioCmdAddr: objc.Ptr,
    ioCompletion: IOCompletionUPP,
    ioResult: objc.OSErr,
    reserved1: ?*anyopaque,
    reserved2: objc.SInt16,
    forkRefNum: FSIORefNum,
    reserved3: objc.UInt8,
    permissions: objc.SInt8,
    ref: ?*FSRef,
    buffer: objc.Ptr,
    requestCount: objc.UInt32,
    actualCount: objc.UInt32,
    positionMode: objc.UInt16,
    positionOffset: objc.SInt64,
    allocationFlags: FSAllocationFlags,
    allocationAmount: objc.UInt64,
    forkNameLength: objc.UniCharCount,
    forkName: ?*objc.UniChar,
    forkIterator: CatPositionRec,
    outForkName: ?*objc.HFSUniStr255,
};

pub const FSForkIOParamPtr = ?*FSForkIOParam;

pub const FSForkInfoFlags = objc.UInt8;

pub const FSForkInfo = extern struct {
    flags: FSForkInfoFlags,
    permissions: objc.SInt8,
    volume: FSVolumeRefNum,
    reserved2: objc.UInt32,
    nodeID: objc.UInt32,
    forkID: objc.UInt32,
    currentPosition: objc.UInt64,
    logicalEOF: objc.UInt64,
    physicalEOF: objc.UInt64,
    process: objc.UInt64,
};

pub const FSForkInfoPtr = ?*FSForkInfo;

pub const FSForkCBInfoParam = extern struct {
    qLink: QElemPtr,
    qType: objc.SInt16,
    ioTrap: objc.SInt16,
    ioCmdAddr: objc.Ptr,
    ioCompletion: IOCompletionUPP,
    ioResult: objc.OSErr,
    desiredRefNum: FSIORefNum,
    volumeRefNum: FSVolumeRefNum,
    iterator: FSIORefNum,
    actualRefNum: FSVolumeRefNum,
    ref: ?*FSRef,
    forkInfo: ?*FSForkInfo,
    forkName: ?*objc.HFSUniStr255,
};

pub const FSForkCBInfoParamPtr = ?*FSForkCBInfoParam;

pub const FSRangeLockParam = extern struct {
    qLink: QElemPtr,
    qType: objc.SInt16,
    ioTrap: objc.SInt16,
    ioCmdAddr: objc.Ptr,
    ioCompletion: IOCompletionUPP,
    ioResult: objc.OSErr,
    forkRefNum: FSIORefNum,
    requestCount: objc.UInt64,
    positionMode: objc.UInt16,
    positionOffset: objc.SInt64,
    rangeStart: objc.UInt64,
};

pub const FSRangeLockParamPtr = ?*FSRangeLockParam;

pub const FSVolumeInfoBitmap = objc.UInt32;

pub const anon14891 = enum(u32) {
    kFSVolInfoNone = 0,
    kFSVolInfoCreateDate = 1,
    kFSVolInfoModDate = 2,
    kFSVolInfoBackupDate = 4,
    kFSVolInfoCheckedDate = 8,
    kFSVolInfoFileCount = 16,
    kFSVolInfoDirCount = 32,
    kFSVolInfoSizes = 64,
    kFSVolInfoBlocks = 128,
    kFSVolInfoNextAlloc = 256,
    kFSVolInfoRsrcClump = 512,
    kFSVolInfoDataClump = 1024,
    kFSVolInfoNextID = 2048,
    kFSVolInfoFinderInfo = 4096,
    kFSVolInfoFlags = 8192,
    kFSVolInfoFSInfo = 16384,
    kFSVolInfoDriveInfo = 32768,
    kFSVolInfoGettableInfo = 65535,
    kFSVolInfoSettableInfo = 12292,
};

pub const anon15121 = enum(u32) {
    kFSVolFlagDefaultVolumeBit = 5,
    kFSVolFlagDefaultVolumeMask = 32,
    kFSVolFlagFilesOpenBit = 6,
    kFSVolFlagFilesOpenMask = 64,
    kFSVolFlagHardwareLockedBit = 7,
    kFSVolFlagHardwareLockedMask = 128,
    kFSVolFlagJournalingActiveBit = 14,
    kFSVolFlagJournalingActiveMask = 16384,
    kFSVolFlagSoftwareLockedBit = 15,
    kFSVolFlagSoftwareLockedMask = 32768,
};

pub const FSVolumeInfo = extern struct {
    createDate: UTCDateTime,
    modifyDate: UTCDateTime,
    backupDate: UTCDateTime,
    checkedDate: UTCDateTime,
    fileCount: objc.UInt32,
    folderCount: objc.UInt32,
    totalBytes: objc.UInt64,
    freeBytes: objc.UInt64,
    blockSize: objc.UInt32,
    totalBlocks: objc.UInt32,
    freeBlocks: objc.UInt32,
    nextAllocation: objc.UInt32,
    rsrcClumpSize: objc.UInt32,
    dataClumpSize: objc.UInt32,
    nextCatalogID: objc.UInt32,
    finderInfo: [32]objc.UInt8,
    flags: objc.UInt16,
    filesystemID: objc.UInt16,
    signature: objc.UInt16,
    driveNumber: objc.UInt16,
    driverRefNum: FSIORefNum,
};

pub const FSVolumeInfoPtr = ?*FSVolumeInfo;

pub const FSVolumeInfoParam = extern struct {
    qLink: QElemPtr,
    qType: objc.SInt16,
    ioTrap: objc.SInt16,
    ioCmdAddr: objc.Ptr,
    ioCompletion: IOCompletionUPP,
    ioResult: objc.OSErr,
    ioNamePtr: objc.StringPtr,
    ioVRefNum: FSVolumeRefNum,
    volumeIndex: objc.UInt32,
    whichInfo: FSVolumeInfoBitmap,
    volumeInfo: ?*FSVolumeInfo,
    volumeName: ?*objc.HFSUniStr255,
    ref: ?*FSRef,
};

pub const FSVolumeInfoParamPtr = ?*FSVolumeInfoParam;

pub const GetVolParmsInfoBuffer = extern struct {
    vMVersion: objc.SInt16,
    vMAttrib: objc.SInt32,
    vMLocalHand: objc.Handle,
    vMServerAdr: objc.SInt32,
    vMVolumeGrade: objc.SInt32,
    vMForeignPrivID: objc.SInt16,
    vMExtendedAttributes: objc.SInt32,
    vMDeviceID: ?*anyopaque,
    vMMaxNameLength: objc.UniCharCount,
};

pub const VolumeType = objc.OSType;

pub const anon16021 = enum(u32) {
    AppleShareMediaType = 1634103405,
};

pub const VolMountInfoHeader = extern struct {
    length: objc.SInt16,
    media: VolumeType,
};

pub const VolMountInfoPtr = ?*VolMountInfoHeader;

pub const VolumeMountInfoHeader = extern struct {
    length: objc.SInt16,
    media: VolumeType,
    flags: objc.SInt16,
};

pub const VolumeMountInfoHeaderPtr = ?*VolumeMountInfoHeader;

pub const anon16281 = enum(u32) {
    volMountNoLoginMsgFlagBit = 0,
    volMountNoLoginMsgFlagMask = 1,
    volMountExtendedFlagsBit = 7,
    volMountExtendedFlagsMask = 128,
    volMountInteractBit = 15,
    volMountInteractMask = 32768,
    volMountChangedBit = 14,
    volMountChangedMask = 16384,
    volMountFSReservedMask = 255,
    volMountSysReservedMask = 65280,
};

pub const AFPVolMountInfo = extern struct {
    length: objc.SInt16,
    media: VolumeType,
    flags: objc.SInt16,
    nbpInterval: objc.SInt8,
    nbpCount: objc.SInt8,
    uamType: objc.SInt16,
    zoneNameOffset: objc.SInt16,
    serverNameOffset: objc.SInt16,
    volNameOffset: objc.SInt16,
    userNameOffset: objc.SInt16,
    userPasswordOffset: objc.SInt16,
    volPasswordOffset: objc.SInt16,
    AFPData: [144]i8,
};

pub const AFPVolMountInfoPtr = ?*AFPVolMountInfo;

pub const AFPXVolMountInfo = extern struct {
    length: objc.SInt16,
    media: VolumeType,
    flags: objc.SInt16,
    nbpInterval: objc.SInt8,
    nbpCount: objc.SInt8,
    uamType: objc.SInt16,
    zoneNameOffset: objc.SInt16,
    serverNameOffset: objc.SInt16,
    volNameOffset: objc.SInt16,
    userNameOffset: objc.SInt16,
    userPasswordOffset: objc.SInt16,
    volPasswordOffset: objc.SInt16,
    extendedFlags: objc.SInt16,
    uamNameOffset: objc.SInt16,
    alternateAddressOffset: objc.SInt16,
    AFPData: [176]i8,
};

pub const AFPXVolMountInfoPtr = ?*AFPXVolMountInfo;

pub const anon16831 = enum(u32) {
    kAFPExtendedFlagsAlternateAddressMask = 1,
};

pub const anon16881 = enum(u32) {
    kAFPTagTypeIP = 1,
    kAFPTagTypeIPPort = 2,
    kAFPTagTypeDDP = 3,
    kAFPTagTypeDNS = 4,
};

pub const anon16971 = enum(u32) {
    kAFPTagLengthIP = 6,
    kAFPTagLengthIPPort = 8,
    kAFPTagLengthDDP = 6,
};

pub const AFPTagData = extern struct {
    fLength: objc.UInt8,
    fType: objc.UInt8,
    fData: [1]objc.UInt8,
};

pub const AFPAlternateAddress = extern struct {
    fVersion: objc.UInt8,
    fAddressCount: objc.UInt8,
    fAddressList: [1]objc.UInt8,
};

pub const anon17171 = enum(u32) {
    kLargeIconSize = 256,
    kLarge4BitIconSize = 512,
    kLarge8BitIconSize = 1024,
    kSmallIconSize = 64,
    kSmall4BitIconSize = 128,
    kSmall8BitIconSize = 256,
};

extern "CoreServices" fn NewIOCompletionUPP(userRoutine: IOCompletionProcPtr) callconv(.C) IOCompletionUPP;
pub const newIOCompletionUPP = NewIOCompletionUPP;

extern "CoreServices" fn DisposeIOCompletionUPP(userUPP: IOCompletionUPP) callconv(.C) void;
pub const disposeIOCompletionUPP = DisposeIOCompletionUPP;

extern "CoreServices" fn InvokeIOCompletionUPP(paramBlock: ParmBlkPtr, userUPP: IOCompletionUPP) callconv(.C) void;
pub const invokeIOCompletionUPP = InvokeIOCompletionUPP;

extern "CoreServices" fn FSMakeFSRefUnicode(
    parentRef: ?*FSRef,
    nameLength: objc.UniCharCount,
    name: ?*objc.UniChar,
    textEncodingHint: TextEncoding,
    newRef: ?*FSRef,
) callconv(.C) objc.OSErr;
pub const fsMakeFSRefUnicode = FSMakeFSRefUnicode;

extern "CoreServices" fn PBMakeFSRefUnicodeSync(paramBlock: ?*FSRefParam) callconv(.C) objc.OSErr;
pub const pbMakeFSRefUnicodeSync = PBMakeFSRefUnicodeSync;

extern "CoreServices" fn PBMakeFSRefUnicodeAsync(paramBlock: ?*FSRefParam) callconv(.C) void;
pub const pbMakeFSRefUnicodeAsync = PBMakeFSRefUnicodeAsync;

extern "CoreServices" fn FSCompareFSRefs(ref1: ?*FSRef, ref2: ?*FSRef) callconv(.C) objc.OSErr;
pub const fsCompareFSRefs = FSCompareFSRefs;

extern "CoreServices" fn PBCompareFSRefsSync(paramBlock: ?*FSRefParam) callconv(.C) objc.OSErr;
pub const pbCompareFSRefsSync = PBCompareFSRefsSync;

extern "CoreServices" fn PBCompareFSRefsAsync(paramBlock: ?*FSRefParam) callconv(.C) void;
pub const pbCompareFSRefsAsync = PBCompareFSRefsAsync;

extern "CoreServices" fn FSCreateFileUnicode(
    parentRef: ?*FSRef,
    nameLength: objc.UniCharCount,
    name: ?*objc.UniChar,
    whichInfo: FSCatalogInfoBitmap,
    catalogInfo: ?*FSCatalogInfo,
    newRef: ?*FSRef,
    newSpec: FSSpecPtr,
) callconv(.C) objc.OSErr;
pub const fsCreateFileUnicode = FSCreateFileUnicode;

extern "CoreServices" fn PBCreateFileUnicodeSync(paramBlock: ?*FSRefParam) callconv(.C) objc.OSErr;
pub const pbCreateFileUnicodeSync = PBCreateFileUnicodeSync;

extern "CoreServices" fn PBCreateFileUnicodeAsync(paramBlock: ?*FSRefParam) callconv(.C) void;
pub const pbCreateFileUnicodeAsync = PBCreateFileUnicodeAsync;

extern "CoreServices" fn FSCreateDirectoryUnicode(
    parentRef: ?*FSRef,
    nameLength: objc.UniCharCount,
    name: ?*objc.UniChar,
    whichInfo: FSCatalogInfoBitmap,
    catalogInfo: ?*FSCatalogInfo,
    newRef: ?*FSRef,
    newSpec: FSSpecPtr,
    newDirID: ?*objc.UInt32,
) callconv(.C) objc.OSErr;
pub const fsCreateDirectoryUnicode = FSCreateDirectoryUnicode;

extern "CoreServices" fn PBCreateDirectoryUnicodeSync(paramBlock: ?*FSRefParam) callconv(.C) objc.OSErr;
pub const pbCreateDirectoryUnicodeSync = PBCreateDirectoryUnicodeSync;

extern "CoreServices" fn PBCreateDirectoryUnicodeAsync(paramBlock: ?*FSRefParam) callconv(.C) void;
pub const pbCreateDirectoryUnicodeAsync = PBCreateDirectoryUnicodeAsync;

extern "CoreServices" fn FSDeleteObject(ref: ?*FSRef) callconv(.C) objc.OSErr;
pub const fsDeleteObject = FSDeleteObject;

extern "CoreServices" fn PBDeleteObjectSync(paramBlock: ?*FSRefParam) callconv(.C) objc.OSErr;
pub const pbDeleteObjectSync = PBDeleteObjectSync;

extern "CoreServices" fn PBDeleteObjectAsync(paramBlock: ?*FSRefParam) callconv(.C) void;
pub const pbDeleteObjectAsync = PBDeleteObjectAsync;

extern "CoreServices" fn FSUnlinkObject(ref: ?*FSRef) callconv(.C) objc.OSErr;
pub const fsUnlinkObject = FSUnlinkObject;

extern "CoreServices" fn PBUnlinkObjectSync(paramBlock: ?*FSRefParam) callconv(.C) objc.OSErr;
pub const pbUnlinkObjectSync = PBUnlinkObjectSync;

extern "CoreServices" fn PBUnlinkObjectAsync(paramBlock: ?*FSRefParam) callconv(.C) void;
pub const pbUnlinkObjectAsync = PBUnlinkObjectAsync;

extern "CoreServices" fn FSMoveObject(ref: ?*FSRef, destDirectory: ?*FSRef, newRef: ?*FSRef) callconv(.C) objc.OSErr;
pub const fsMoveObject = FSMoveObject;

extern "CoreServices" fn PBMoveObjectSync(paramBlock: ?*FSRefParam) callconv(.C) objc.OSErr;
pub const pbMoveObjectSync = PBMoveObjectSync;

extern "CoreServices" fn PBMoveObjectAsync(paramBlock: ?*FSRefParam) callconv(.C) void;
pub const pbMoveObjectAsync = PBMoveObjectAsync;

extern "CoreServices" fn FSExchangeObjects(ref: ?*FSRef, destRef: ?*FSRef) callconv(.C) objc.OSErr;
pub const fsExchangeObjects = FSExchangeObjects;

extern "CoreServices" fn PBExchangeObjectsSync(paramBlock: ?*FSRefParam) callconv(.C) objc.OSErr;
pub const pbExchangeObjectsSync = PBExchangeObjectsSync;

extern "CoreServices" fn PBExchangeObjectsAsync(paramBlock: ?*FSRefParam) callconv(.C) void;
pub const pbExchangeObjectsAsync = PBExchangeObjectsAsync;

pub const anon23231 = enum(u32) {
    kFSReplaceObjectDefaultOptions = 0,
    kFSReplaceObjectReplaceMetadata = 1,
    kFSReplaceObjectSaveOriginalAsABackup = 2,
    kFSReplaceObjectReplacePermissionInfo = 4,
    kFSReplaceObjectPreservePermissionInfo = 8,
    kFSReplaceObjectDoNotCheckObjectWriteAccess = 16,
};

extern "CoreServices" fn FSReplaceObject(
    originalObject: ?*FSRef,
    replacementObject: ?*FSRef,
    newName: core_foundation.StringRef,
    temporaryName: core_foundation.StringRef,
    temporaryDirectory: ?*FSRef,
    flags: objc.OptionBits,
    resultObject: ?*FSRef,
) callconv(.C) objc.OSStatus;
pub const fsReplaceObject = FSReplaceObject;

extern "CoreServices" fn FSPathReplaceObject(
    originalObjectPath: ?*i8,
    replacementObjectPath: ?*i8,
    newName: core_foundation.StringRef,
    temporaryName: core_foundation.StringRef,
    temporaryDirectoryPath: ?*i8,
    flags: objc.OptionBits,
) callconv(.C) objc.OSStatus;
pub const fsPathReplaceObject = FSPathReplaceObject;

extern "CoreServices" fn FSGetTemporaryDirectoryForReplaceObject(originalObject: ?*FSRef, temporaryDirectory: ?*FSRef, flags: objc.OptionBits) callconv(.C) objc.OSStatus;
pub const fsGetTemporaryDirectoryForReplaceObject = FSGetTemporaryDirectoryForReplaceObject;

extern "CoreServices" fn FSPathGetTemporaryDirectoryForReplaceObject(
    originalObjectPath: ?*i8,
    temporaryDirectoryPath: ?*i8,
    maxPathSize: objc.UInt32,
    flags: objc.OptionBits,
) callconv(.C) objc.OSStatus;
pub const fsPathGetTemporaryDirectoryForReplaceObject = FSPathGetTemporaryDirectoryForReplaceObject;

extern "CoreServices" fn FSRenameUnicode(
    ref: ?*FSRef,
    nameLength: objc.UniCharCount,
    name: ?*objc.UniChar,
    textEncodingHint: TextEncoding,
    newRef: ?*FSRef,
) callconv(.C) objc.OSErr;
pub const fsRenameUnicode = FSRenameUnicode;

extern "CoreServices" fn PBRenameUnicodeSync(paramBlock: ?*FSRefParam) callconv(.C) objc.OSErr;
pub const pbRenameUnicodeSync = PBRenameUnicodeSync;

extern "CoreServices" fn PBRenameUnicodeAsync(paramBlock: ?*FSRefParam) callconv(.C) void;
pub const pbRenameUnicodeAsync = PBRenameUnicodeAsync;

extern "CoreServices" fn FSGetCatalogInfo(
    ref: ?*FSRef,
    whichInfo: FSCatalogInfoBitmap,
    catalogInfo: ?*FSCatalogInfo,
    outName: ?*objc.HFSUniStr255,
    fsSpec: FSSpecPtr,
    parentRef: ?*FSRef,
) callconv(.C) objc.OSErr;
pub const fsGetCatalogInfo = FSGetCatalogInfo;

extern "CoreServices" fn PBGetCatalogInfoSync(paramBlock: ?*FSRefParam) callconv(.C) objc.OSErr;
pub const pbGetCatalogInfoSync = PBGetCatalogInfoSync;

extern "CoreServices" fn PBGetCatalogInfoAsync(paramBlock: ?*FSRefParam) callconv(.C) void;
pub const pbGetCatalogInfoAsync = PBGetCatalogInfoAsync;

extern "CoreServices" fn FSSetCatalogInfo(ref: ?*FSRef, whichInfo: FSCatalogInfoBitmap, catalogInfo: ?*FSCatalogInfo) callconv(.C) objc.OSErr;
pub const fsSetCatalogInfo = FSSetCatalogInfo;

extern "CoreServices" fn PBSetCatalogInfoSync(paramBlock: ?*FSRefParam) callconv(.C) objc.OSErr;
pub const pbSetCatalogInfoSync = PBSetCatalogInfoSync;

extern "CoreServices" fn PBSetCatalogInfoAsync(paramBlock: ?*FSRefParam) callconv(.C) void;
pub const pbSetCatalogInfoAsync = PBSetCatalogInfoAsync;

extern "CoreServices" fn FSOpenIterator(container: ?*FSRef, iteratorFlags: FSIteratorFlags, iterator: ?*FSIterator) callconv(.C) objc.OSErr;
pub const fsOpenIterator = FSOpenIterator;

extern "CoreServices" fn PBOpenIteratorSync(paramBlock: ?*FSCatalogBulkParam) callconv(.C) objc.OSErr;
pub const pbOpenIteratorSync = PBOpenIteratorSync;

extern "CoreServices" fn PBOpenIteratorAsync(paramBlock: ?*FSCatalogBulkParam) callconv(.C) void;
pub const pbOpenIteratorAsync = PBOpenIteratorAsync;

extern "CoreServices" fn FSCloseIterator(iterator: FSIterator) callconv(.C) objc.OSErr;
pub const fsCloseIterator = FSCloseIterator;

extern "CoreServices" fn PBCloseIteratorSync(paramBlock: ?*FSCatalogBulkParam) callconv(.C) objc.OSErr;
pub const pbCloseIteratorSync = PBCloseIteratorSync;

extern "CoreServices" fn PBCloseIteratorAsync(paramBlock: ?*FSCatalogBulkParam) callconv(.C) void;
pub const pbCloseIteratorAsync = PBCloseIteratorAsync;

extern "CoreServices" fn FSGetCatalogInfoBulk(
    iterator: FSIterator,
    maximumObjects: objc.ItemCount,
    actualObjects: ?*objc.ItemCount,
    containerChanged: ?*objc.Boolean,
    whichInfo: FSCatalogInfoBitmap,
    catalogInfos: ?*FSCatalogInfo,
    refs: ?*FSRef,
    specs: FSSpecPtr,
    names: ?*objc.HFSUniStr255,
) callconv(.C) objc.OSErr;
pub const fsGetCatalogInfoBulk = FSGetCatalogInfoBulk;

extern "CoreServices" fn PBGetCatalogInfoBulkSync(paramBlock: ?*FSCatalogBulkParam) callconv(.C) objc.OSErr;
pub const pbGetCatalogInfoBulkSync = PBGetCatalogInfoBulkSync;

extern "CoreServices" fn PBGetCatalogInfoBulkAsync(paramBlock: ?*FSCatalogBulkParam) callconv(.C) void;
pub const pbGetCatalogInfoBulkAsync = PBGetCatalogInfoBulkAsync;

extern "CoreServices" fn FSCatalogSearch(
    iterator: FSIterator,
    searchCriteria: ?*FSSearchParams,
    maximumObjects: objc.ItemCount,
    actualObjects: ?*objc.ItemCount,
    containerChanged: ?*objc.Boolean,
    whichInfo: FSCatalogInfoBitmap,
    catalogInfos: ?*FSCatalogInfo,
    refs: ?*FSRef,
    specs: FSSpecPtr,
    names: ?*objc.HFSUniStr255,
) callconv(.C) objc.OSErr;
pub const fsCatalogSearch = FSCatalogSearch;

extern "CoreServices" fn PBCatalogSearchSync(paramBlock: ?*FSCatalogBulkParam) callconv(.C) objc.OSErr;
pub const pbCatalogSearchSync = PBCatalogSearchSync;

extern "CoreServices" fn PBCatalogSearchAsync(paramBlock: ?*FSCatalogBulkParam) callconv(.C) void;
pub const pbCatalogSearchAsync = PBCatalogSearchAsync;

extern "CoreServices" fn FSCreateFileAndOpenForkUnicode(
    parentRef: ?*FSRef,
    nameLength: objc.UniCharCount,
    name: ?*objc.UniChar,
    whichInfo: FSCatalogInfoBitmap,
    catalogInfo: ?*FSCatalogInfo,
    forkNameLength: objc.UniCharCount,
    forkName: ?*objc.UniChar,
    permissions: objc.SInt8,
    forkRefNum: ?*FSIORefNum,
    newRef: ?*FSRef,
) callconv(.C) objc.OSStatus;
pub const fsCreateFileAndOpenForkUnicode = FSCreateFileAndOpenForkUnicode;

extern "CoreServices" fn PBCreateFileAndOpenForkUnicodeSync(paramBlock: FSRefForkIOParamPtr) callconv(.C) objc.OSStatus;
pub const pbCreateFileAndOpenForkUnicodeSync = PBCreateFileAndOpenForkUnicodeSync;

extern "CoreServices" fn PBCreateFileAndOpenForkUnicodeAsync(paramBlock: FSRefForkIOParamPtr) callconv(.C) void;
pub const pbCreateFileAndOpenForkUnicodeAsync = PBCreateFileAndOpenForkUnicodeAsync;

extern "CoreServices" fn FSCreateFork(ref: ?*FSRef, forkNameLength: objc.UniCharCount, forkName: ?*objc.UniChar) callconv(.C) objc.OSErr;
pub const fsCreateFork = FSCreateFork;

extern "CoreServices" fn PBCreateForkSync(paramBlock: ?*FSForkIOParam) callconv(.C) objc.OSErr;
pub const pbCreateForkSync = PBCreateForkSync;

extern "CoreServices" fn PBCreateForkAsync(paramBlock: ?*FSForkIOParam) callconv(.C) void;
pub const pbCreateForkAsync = PBCreateForkAsync;

extern "CoreServices" fn FSDeleteFork(ref: ?*FSRef, forkNameLength: objc.UniCharCount, forkName: ?*objc.UniChar) callconv(.C) objc.OSErr;
pub const fsDeleteFork = FSDeleteFork;

extern "CoreServices" fn PBDeleteForkSync(paramBlock: ?*FSForkIOParam) callconv(.C) objc.OSErr;
pub const pbDeleteForkSync = PBDeleteForkSync;

extern "CoreServices" fn PBDeleteForkAsync(paramBlock: ?*FSForkIOParam) callconv(.C) void;
pub const pbDeleteForkAsync = PBDeleteForkAsync;

extern "CoreServices" fn FSIterateForks(
    ref: ?*FSRef,
    forkIterator: ?*CatPositionRec,
    forkName: ?*objc.HFSUniStr255,
    forkSize: ?*objc.SInt64,
    forkPhysicalSize: ?*objc.UInt64,
) callconv(.C) objc.OSErr;
pub const fsIterateForks = FSIterateForks;

extern "CoreServices" fn PBIterateForksSync(paramBlock: ?*FSForkIOParam) callconv(.C) objc.OSErr;
pub const pbIterateForksSync = PBIterateForksSync;

extern "CoreServices" fn PBIterateForksAsync(paramBlock: ?*FSForkIOParam) callconv(.C) void;
pub const pbIterateForksAsync = PBIterateForksAsync;

extern "CoreServices" fn FSOpenFork(
    ref: ?*FSRef,
    forkNameLength: objc.UniCharCount,
    forkName: ?*objc.UniChar,
    permissions: objc.SInt8,
    forkRefNum: ?*FSIORefNum,
) callconv(.C) objc.OSErr;
pub const fsOpenFork = FSOpenFork;

extern "CoreServices" fn PBOpenForkSync(paramBlock: ?*FSForkIOParam) callconv(.C) objc.OSErr;
pub const pbOpenForkSync = PBOpenForkSync;

extern "CoreServices" fn PBOpenForkAsync(paramBlock: ?*FSForkIOParam) callconv(.C) void;
pub const pbOpenForkAsync = PBOpenForkAsync;

extern "CoreServices" fn FSReadFork(
    forkRefNum: FSIORefNum,
    positionMode: objc.UInt16,
    positionOffset: objc.SInt64,
    requestCount: objc.ByteCount,
    buffer: ?*anyopaque,
    actualCount: ?*objc.ByteCount,
) callconv(.C) objc.OSErr;
pub const fsReadFork = FSReadFork;

extern "CoreServices" fn PBReadForkSync(paramBlock: ?*FSForkIOParam) callconv(.C) objc.OSErr;
pub const pbReadForkSync = PBReadForkSync;

extern "CoreServices" fn PBReadForkAsync(paramBlock: ?*FSForkIOParam) callconv(.C) void;
pub const pbReadForkAsync = PBReadForkAsync;

extern "CoreServices" fn FSWriteFork(
    forkRefNum: FSIORefNum,
    positionMode: objc.UInt16,
    positionOffset: objc.SInt64,
    requestCount: objc.ByteCount,
    buffer: ?*anyopaque,
    actualCount: ?*objc.ByteCount,
) callconv(.C) objc.OSErr;
pub const fsWriteFork = FSWriteFork;

extern "CoreServices" fn PBWriteForkSync(paramBlock: ?*FSForkIOParam) callconv(.C) objc.OSErr;
pub const pbWriteForkSync = PBWriteForkSync;

extern "CoreServices" fn PBWriteForkAsync(paramBlock: ?*FSForkIOParam) callconv(.C) void;
pub const pbWriteForkAsync = PBWriteForkAsync;

extern "CoreServices" fn FSGetForkPosition(forkRefNum: FSIORefNum, position: ?*objc.SInt64) callconv(.C) objc.OSErr;
pub const fsGetForkPosition = FSGetForkPosition;

extern "CoreServices" fn PBGetForkPositionSync(paramBlock: ?*FSForkIOParam) callconv(.C) objc.OSErr;
pub const pbGetForkPositionSync = PBGetForkPositionSync;

extern "CoreServices" fn PBGetForkPositionAsync(paramBlock: ?*FSForkIOParam) callconv(.C) void;
pub const pbGetForkPositionAsync = PBGetForkPositionAsync;

extern "CoreServices" fn FSSetForkPosition(forkRefNum: FSIORefNum, positionMode: objc.UInt16, positionOffset: objc.SInt64) callconv(.C) objc.OSErr;
pub const fsSetForkPosition = FSSetForkPosition;

extern "CoreServices" fn PBSetForkPositionSync(paramBlock: ?*FSForkIOParam) callconv(.C) objc.OSErr;
pub const pbSetForkPositionSync = PBSetForkPositionSync;

extern "CoreServices" fn PBSetForkPositionAsync(paramBlock: ?*FSForkIOParam) callconv(.C) void;
pub const pbSetForkPositionAsync = PBSetForkPositionAsync;

extern "CoreServices" fn FSGetForkSize(forkRefNum: FSIORefNum, forkSize: ?*objc.SInt64) callconv(.C) objc.OSErr;
pub const fsGetForkSize = FSGetForkSize;

extern "CoreServices" fn PBGetForkSizeSync(paramBlock: ?*FSForkIOParam) callconv(.C) objc.OSErr;
pub const pbGetForkSizeSync = PBGetForkSizeSync;

extern "CoreServices" fn PBGetForkSizeAsync(paramBlock: ?*FSForkIOParam) callconv(.C) void;
pub const pbGetForkSizeAsync = PBGetForkSizeAsync;

extern "CoreServices" fn FSSetForkSize(forkRefNum: FSIORefNum, positionMode: objc.UInt16, positionOffset: objc.SInt64) callconv(.C) objc.OSErr;
pub const fsSetForkSize = FSSetForkSize;

extern "CoreServices" fn PBSetForkSizeSync(paramBlock: ?*FSForkIOParam) callconv(.C) objc.OSErr;
pub const pbSetForkSizeSync = PBSetForkSizeSync;

extern "CoreServices" fn PBSetForkSizeAsync(paramBlock: ?*FSForkIOParam) callconv(.C) void;
pub const pbSetForkSizeAsync = PBSetForkSizeAsync;

extern "CoreServices" fn FSAllocateFork(
    forkRefNum: FSIORefNum,
    flags: FSAllocationFlags,
    positionMode: objc.UInt16,
    positionOffset: objc.SInt64,
    requestCount: objc.UInt64,
    actualCount: ?*objc.UInt64,
) callconv(.C) objc.OSErr;
pub const fsAllocateFork = FSAllocateFork;

extern "CoreServices" fn PBAllocateForkSync(paramBlock: ?*FSForkIOParam) callconv(.C) objc.OSErr;
pub const pbAllocateForkSync = PBAllocateForkSync;

extern "CoreServices" fn PBAllocateForkAsync(paramBlock: ?*FSForkIOParam) callconv(.C) void;
pub const pbAllocateForkAsync = PBAllocateForkAsync;

extern "CoreServices" fn FSFlushFork(forkRefNum: FSIORefNum) callconv(.C) objc.OSErr;
pub const fsFlushFork = FSFlushFork;

extern "CoreServices" fn PBFlushForkSync(paramBlock: ?*FSForkIOParam) callconv(.C) objc.OSErr;
pub const pbFlushForkSync = PBFlushForkSync;

extern "CoreServices" fn PBFlushForkAsync(paramBlock: ?*FSForkIOParam) callconv(.C) void;
pub const pbFlushForkAsync = PBFlushForkAsync;

extern "CoreServices" fn FSCloseFork(forkRefNum: FSIORefNum) callconv(.C) objc.OSErr;
pub const fsCloseFork = FSCloseFork;

extern "CoreServices" fn PBCloseForkSync(paramBlock: ?*FSForkIOParam) callconv(.C) objc.OSErr;
pub const pbCloseForkSync = PBCloseForkSync;

extern "CoreServices" fn PBCloseForkAsync(paramBlock: ?*FSForkIOParam) callconv(.C) void;
pub const pbCloseForkAsync = PBCloseForkAsync;

extern "CoreServices" fn FSGetForkCBInfo(
    desiredRefNum: FSIORefNum,
    volume: FSVolumeRefNum,
    iterator: ?*i16,
    actualRefNum: ?*FSIORefNum,
    forkInfo: ?*FSForkInfo,
    ref: ?*FSRef,
    outForkName: ?*objc.HFSUniStr255,
) callconv(.C) objc.OSErr;
pub const fsGetForkCBInfo = FSGetForkCBInfo;

extern "CoreServices" fn PBGetForkCBInfoSync(paramBlock: ?*FSForkCBInfoParam) callconv(.C) objc.OSErr;
pub const pbGetForkCBInfoSync = PBGetForkCBInfoSync;

extern "CoreServices" fn PBGetForkCBInfoAsync(paramBlock: ?*FSForkCBInfoParam) callconv(.C) void;
pub const pbGetForkCBInfoAsync = PBGetForkCBInfoAsync;

extern "CoreServices" fn FSLockRange(
    forkRefNum: FSIORefNum,
    positionMode: objc.UInt16,
    positionOffset: objc.SInt64,
    requestCount: objc.UInt64,
    rangeStart: ?*objc.UInt64,
) callconv(.C) objc.OSStatus;
pub const fsLockRange = FSLockRange;

extern "CoreServices" fn PBXLockRangeSync(paramBlock: FSRangeLockParamPtr) callconv(.C) objc.OSStatus;
pub const pbxLockRangeSync = PBXLockRangeSync;

extern "CoreServices" fn PBXLockRangeAsync(paramBlock: FSRangeLockParamPtr) callconv(.C) objc.OSStatus;
pub const pbxLockRangeAsync = PBXLockRangeAsync;

extern "CoreServices" fn FSUnlockRange(
    forkRefNum: FSIORefNum,
    positionMode: objc.UInt16,
    positionOffset: objc.SInt64,
    requestCount: objc.UInt64,
    rangeStart: ?*objc.UInt64,
) callconv(.C) objc.OSStatus;
pub const fsUnlockRange = FSUnlockRange;

extern "CoreServices" fn PBXUnlockRangeSync(paramBlock: FSRangeLockParamPtr) callconv(.C) objc.OSStatus;
pub const pbxUnlockRangeSync = PBXUnlockRangeSync;

extern "CoreServices" fn PBXUnlockRangeAsync(paramBlock: FSRangeLockParamPtr) callconv(.C) objc.OSStatus;
pub const pbxUnlockRangeAsync = PBXUnlockRangeAsync;

extern "CoreServices" fn FSGetVolumeInfo(
    volume: FSVolumeRefNum,
    volumeIndex: objc.ItemCount,
    actualVolume: ?*FSVolumeRefNum,
    whichInfo: FSVolumeInfoBitmap,
    info: ?*FSVolumeInfo,
    volumeName: ?*objc.HFSUniStr255,
    rootDirectory: ?*FSRef,
) callconv(.C) objc.OSErr;
pub const fsGetVolumeInfo = FSGetVolumeInfo;

extern "CoreServices" fn PBGetVolumeInfoSync(paramBlock: ?*FSVolumeInfoParam) callconv(.C) objc.OSErr;
pub const pbGetVolumeInfoSync = PBGetVolumeInfoSync;

extern "CoreServices" fn PBGetVolumeInfoAsync(paramBlock: ?*FSVolumeInfoParam) callconv(.C) void;
pub const pbGetVolumeInfoAsync = PBGetVolumeInfoAsync;

extern "CoreServices" fn FSSetVolumeInfo(volume: FSVolumeRefNum, whichInfo: FSVolumeInfoBitmap, info: ?*FSVolumeInfo) callconv(.C) objc.OSErr;
pub const fsSetVolumeInfo = FSSetVolumeInfo;

extern "CoreServices" fn PBSetVolumeInfoSync(paramBlock: ?*FSVolumeInfoParam) callconv(.C) objc.OSErr;
pub const pbSetVolumeInfoSync = PBSetVolumeInfoSync;

extern "CoreServices" fn PBSetVolumeInfoAsync(paramBlock: ?*FSVolumeInfoParam) callconv(.C) void;
pub const pbSetVolumeInfoAsync = PBSetVolumeInfoAsync;

extern "CoreServices" fn FSGetDataForkName(dataForkName: ?*objc.HFSUniStr255) callconv(.C) objc.OSErr;
pub const fsGetDataForkName = FSGetDataForkName;

extern "CoreServices" fn FSGetResourceForkName(resourceForkName: ?*objc.HFSUniStr255) callconv(.C) objc.OSErr;
pub const fsGetResourceForkName = FSGetResourceForkName;

extern "CoreServices" fn FSRefMakePath(ref: ?*FSRef, path: ?*objc.UInt8, pathBufferSize: objc.UInt32) callconv(.C) objc.OSStatus;
pub const fsRefMakePath = FSRefMakePath;

extern "CoreServices" fn FSPathMakeRef(path: ?*objc.UInt8, ref: ?*FSRef, isDirectory: ?*objc.Boolean) callconv(.C) objc.OSStatus;
pub const fsPathMakeRef = FSPathMakeRef;

pub const anon41251 = enum(u32) {
    kFSPathMakeRefDefaultOptions = 0,
    kFSPathMakeRefDoNotFollowLeafSymlink = 1,
};

extern "CoreServices" fn FSPathMakeRefWithOptions(
    path: ?*objc.UInt8,
    options: objc.OptionBits,
    ref: ?*FSRef,
    isDirectory: ?*objc.Boolean,
) callconv(.C) objc.OSStatus;
pub const fsPathMakeRefWithOptions = FSPathMakeRefWithOptions;

extern "CoreServices" fn FSIsFSRefValid(ref: ?*FSRef) callconv(.C) objc.Boolean;
pub const fsIsFSRefValid = FSIsFSRefValid;

pub const FNMessage = objc.UInt32;

pub const anon41981 = enum(u32) {
    kFNDirectoryModifiedMessage = 1,
};

extern "CoreServices" fn FNNotify(ref: ?*FSRef, message: FNMessage, flags: objc.OptionBits) callconv(.C) objc.OSStatus;
pub const fnNotify = FNNotify;

extern "CoreServices" fn FNNotifyByPath(path: ?*objc.UInt8, message: FNMessage, flags: objc.OptionBits) callconv(.C) objc.OSStatus;
pub const fnNotifyByPath = FNNotifyByPath;

extern "CoreServices" fn FNNotifyAll(message: FNMessage, flags: objc.OptionBits) callconv(.C) objc.OSStatus;
pub const fnNotifyAll = FNNotifyAll;

pub const OpaqueFNSubscriptionRef = extern struct {};

pub const FNSubscriptionRef = ?*OpaqueFNSubscriptionRef;

pub const anon43161 = enum(u32) {
    kFNNoImplicitAllSubscription = 1,
    kFNNotifyInBackground = 2,
};

pub const FNSubscriptionProcPtr = ?*const fn (
    FNMessage,
    objc.OptionBits,
    ?*anyopaque,
    FNSubscriptionRef,
) callconv(.C) void;

pub const FNSubscriptionUPP = FNSubscriptionProcPtr;

extern "CoreServices" fn NewFNSubscriptionUPP(userRoutine: FNSubscriptionProcPtr) callconv(.C) FNSubscriptionUPP;
pub const newFNSubscriptionUPP = NewFNSubscriptionUPP;

extern "CoreServices" fn DisposeFNSubscriptionUPP(userUPP: FNSubscriptionUPP) callconv(.C) void;
pub const disposeFNSubscriptionUPP = DisposeFNSubscriptionUPP;

extern "CoreServices" fn InvokeFNSubscriptionUPP(
    message: FNMessage,
    flags: objc.OptionBits,
    refcon: ?*anyopaque,
    subscription: FNSubscriptionRef,
    userUPP: FNSubscriptionUPP,
) callconv(.C) void;
pub const invokeFNSubscriptionUPP = InvokeFNSubscriptionUPP;

extern "CoreServices" fn FNSubscribe(
    directoryRef: ?*FSRef,
    callback: FNSubscriptionUPP,
    refcon: ?*anyopaque,
    flags: objc.OptionBits,
    subscription: ?*FNSubscriptionRef,
) callconv(.C) objc.OSStatus;
pub const fnSubscribe = FNSubscribe;

extern "CoreServices" fn FNSubscribeByPath(
    directoryPath: ?*objc.UInt8,
    callback: FNSubscriptionUPP,
    refcon: ?*anyopaque,
    flags: objc.OptionBits,
    subscription: ?*FNSubscriptionRef,
) callconv(.C) objc.OSStatus;
pub const fnSubscribeByPath = FNSubscribeByPath;

extern "CoreServices" fn FNUnsubscribe(subscription: FNSubscriptionRef) callconv(.C) objc.OSStatus;
pub const fnUnsubscribe = FNUnsubscribe;

extern "CoreServices" fn FNGetDirectoryForSubscription(subscription: FNSubscriptionRef, ref: ?*FSRef) callconv(.C) objc.OSStatus;
pub const fnGetDirectoryForSubscription = FNGetDirectoryForSubscription;

pub const anon45341 = enum(u32) {
    kAsyncMountInProgress = 1,
    kAsyncMountComplete = 2,
    kAsyncUnmountInProgress = 3,
    kAsyncUnmountComplete = 4,
    kAsyncEjectInProgress = 5,
    kAsyncEjectComplete = 6,
};

pub const FSMountStatus = objc.UInt32;

pub const FSEjectStatus = objc.UInt32;

pub const FSUnmountStatus = objc.UInt32;

pub const OpaqueFSVolumeOperation = extern struct {};

pub const FSVolumeOperation = ?*OpaqueFSVolumeOperation;

pub const FSVolumeMountProcPtr = ?*const fn (
    FSVolumeOperation,
    ?*anyopaque,
    objc.OSStatus,
    FSVolumeRefNum,
) callconv(.C) void;

pub const FSVolumeUnmountProcPtr = ?*const fn (
    FSVolumeOperation,
    ?*anyopaque,
    objc.OSStatus,
    FSVolumeRefNum,
    objc.pid_t,
) callconv(.C) void;

pub const FSVolumeEjectProcPtr = ?*const fn (
    FSVolumeOperation,
    ?*anyopaque,
    objc.OSStatus,
    FSVolumeRefNum,
    objc.pid_t,
) callconv(.C) void;

pub const FSVolumeMountUPP = FSVolumeMountProcPtr;

pub const FSVolumeUnmountUPP = FSVolumeUnmountProcPtr;

pub const FSVolumeEjectUPP = FSVolumeEjectProcPtr;

extern "CoreServices" fn NewFSVolumeMountUPP(userRoutine: FSVolumeMountProcPtr) callconv(.C) FSVolumeMountUPP;
pub const newFSVolumeMountUPP = NewFSVolumeMountUPP;

extern "CoreServices" fn NewFSVolumeUnmountUPP(userRoutine: FSVolumeUnmountProcPtr) callconv(.C) FSVolumeUnmountUPP;
pub const newFSVolumeUnmountUPP = NewFSVolumeUnmountUPP;

extern "CoreServices" fn NewFSVolumeEjectUPP(userRoutine: FSVolumeEjectProcPtr) callconv(.C) FSVolumeEjectUPP;
pub const newFSVolumeEjectUPP = NewFSVolumeEjectUPP;

extern "CoreServices" fn DisposeFSVolumeMountUPP(userUPP: FSVolumeMountUPP) callconv(.C) void;
pub const disposeFSVolumeMountUPP = DisposeFSVolumeMountUPP;

extern "CoreServices" fn DisposeFSVolumeUnmountUPP(userUPP: FSVolumeUnmountUPP) callconv(.C) void;
pub const disposeFSVolumeUnmountUPP = DisposeFSVolumeUnmountUPP;

extern "CoreServices" fn DisposeFSVolumeEjectUPP(userUPP: FSVolumeEjectUPP) callconv(.C) void;
pub const disposeFSVolumeEjectUPP = DisposeFSVolumeEjectUPP;

extern "CoreServices" fn InvokeFSVolumeMountUPP(
    volumeOp: FSVolumeOperation,
    clientData: ?*anyopaque,
    err: objc.OSStatus,
    mountedVolumeRefNum: FSVolumeRefNum,
    userUPP: FSVolumeMountUPP,
) callconv(.C) void;
pub const invokeFSVolumeMountUPP = InvokeFSVolumeMountUPP;

extern "CoreServices" fn InvokeFSVolumeUnmountUPP(
    volumeOp: FSVolumeOperation,
    clientData: ?*anyopaque,
    err: objc.OSStatus,
    volumeRefNum: FSVolumeRefNum,
    dissenter: objc.pid_t,
    userUPP: FSVolumeUnmountUPP,
) callconv(.C) void;
pub const invokeFSVolumeUnmountUPP = InvokeFSVolumeUnmountUPP;

extern "CoreServices" fn InvokeFSVolumeEjectUPP(
    volumeOp: FSVolumeOperation,
    clientData: ?*anyopaque,
    err: objc.OSStatus,
    volumeRefNum: FSVolumeRefNum,
    dissenter: objc.pid_t,
    userUPP: FSVolumeEjectUPP,
) callconv(.C) void;
pub const invokeFSVolumeEjectUPP = InvokeFSVolumeEjectUPP;

pub const anon47001 = enum(u32) {
    kFSMountServerMarkDoNotDisplay = 1,
    kFSMountServerMountOnMountDir = 4,
    kFSMountServerSuppressConnectionUI = 64,
};

pub const anon47281 = enum(u32) {
    kFSMountServerMountWithoutNotification = 2,
};

pub const anon47431 = enum(u32) {
    kFSEjectVolumeForceEject = 1,
};

pub const anon47611 = enum(u32) {
    kFSUnmountVolumeForceUnmount = 1,
};

extern "CoreServices" fn FSCreateVolumeOperation(volumeOp: ?*FSVolumeOperation) callconv(.C) objc.OSStatus;
pub const fsCreateVolumeOperation = FSCreateVolumeOperation;

extern "CoreServices" fn FSDisposeVolumeOperation(volumeOp: FSVolumeOperation) callconv(.C) objc.OSStatus;
pub const fsDisposeVolumeOperation = FSDisposeVolumeOperation;

extern "CoreServices" fn FSMountLocalVolumeSync(
    diskID: core_foundation.StringRef,
    mountDir: core_foundation.URLRef,
    mountedVolumeRefNum: ?*FSVolumeRefNum,
    flags: objc.OptionBits,
) callconv(.C) objc.OSStatus;
pub const fsMountLocalVolumeSync = FSMountLocalVolumeSync;

extern "CoreServices" fn FSMountLocalVolumeAsync(
    diskID: core_foundation.StringRef,
    mountDir: core_foundation.URLRef,
    volumeOp: FSVolumeOperation,
    clientData: ?*anyopaque,
    flags: objc.OptionBits,
    callback: FSVolumeMountUPP,
    runloop: core_foundation.RunLoopRef,
    runloopMode: core_foundation.StringRef,
) callconv(.C) objc.OSStatus;
pub const fsMountLocalVolumeAsync = FSMountLocalVolumeAsync;

extern "CoreServices" fn FSMountServerVolumeSync(
    url: core_foundation.URLRef,
    mountDir: core_foundation.URLRef,
    user: core_foundation.StringRef,
    password: core_foundation.StringRef,
    mountedVolumeRefNum: ?*FSVolumeRefNum,
    flags: objc.OptionBits,
) callconv(.C) objc.OSStatus;
pub const fsMountServerVolumeSync = FSMountServerVolumeSync;

extern "CoreServices" fn FSMountServerVolumeAsync(
    url: core_foundation.URLRef,
    mountDir: core_foundation.URLRef,
    user: core_foundation.StringRef,
    password: core_foundation.StringRef,
    volumeOp: FSVolumeOperation,
    clientData: ?*anyopaque,
    flags: objc.OptionBits,
    callback: FSVolumeMountUPP,
    runloop: core_foundation.RunLoopRef,
    runloopMode: core_foundation.StringRef,
) callconv(.C) objc.OSStatus;
pub const fsMountServerVolumeAsync = FSMountServerVolumeAsync;

extern "CoreServices" fn FSGetAsyncMountStatus(
    volumeOp: FSVolumeOperation,
    status: ?*FSMountStatus,
    volumeOpStatus: ?*objc.OSStatus,
    mountedVolumeRefNum: ?*FSVolumeRefNum,
    clientData: ?*?*anyopaque,
) callconv(.C) objc.OSStatus;
pub const fsGetAsyncMountStatus = FSGetAsyncMountStatus;

extern "CoreServices" fn FSUnmountVolumeSync(vRefNum: FSVolumeRefNum, flags: objc.OptionBits, dissenter: ?*objc.pid_t) callconv(.C) objc.OSStatus;
pub const fsUnmountVolumeSync = FSUnmountVolumeSync;

extern "CoreServices" fn FSUnmountVolumeAsync(
    vRefNum: FSVolumeRefNum,
    flags: objc.OptionBits,
    volumeOp: FSVolumeOperation,
    clientData: ?*anyopaque,
    callback: FSVolumeUnmountUPP,
    runloop: core_foundation.RunLoopRef,
    runloopMode: core_foundation.StringRef,
) callconv(.C) objc.OSStatus;
pub const fsUnmountVolumeAsync = FSUnmountVolumeAsync;

extern "CoreServices" fn FSGetAsyncUnmountStatus(
    volumeOp: FSVolumeOperation,
    status: ?*FSUnmountStatus,
    volumeOpStatus: ?*objc.OSStatus,
    volumeRefNum: ?*FSVolumeRefNum,
    dissenter: ?*objc.pid_t,
    clientData: ?*?*anyopaque,
) callconv(.C) objc.OSStatus;
pub const fsGetAsyncUnmountStatus = FSGetAsyncUnmountStatus;

extern "CoreServices" fn FSCancelVolumeOperation(volumeOp: FSVolumeOperation) callconv(.C) objc.OSStatus;
pub const fsCancelVolumeOperation = FSCancelVolumeOperation;

extern "CoreServices" fn FSEjectVolumeSync(vRefNum: FSVolumeRefNum, flags: objc.OptionBits, dissenter: ?*objc.pid_t) callconv(.C) objc.OSStatus;
pub const fsEjectVolumeSync = FSEjectVolumeSync;

extern "CoreServices" fn FSEjectVolumeAsync(
    vRefNum: FSVolumeRefNum,
    flags: objc.OptionBits,
    volumeOp: FSVolumeOperation,
    clientData: ?*anyopaque,
    callback: FSVolumeEjectUPP,
    runloop: core_foundation.RunLoopRef,
    runloopMode: core_foundation.StringRef,
) callconv(.C) objc.OSStatus;
pub const fsEjectVolumeAsync = FSEjectVolumeAsync;

extern "CoreServices" fn FSGetAsyncEjectStatus(
    volumeOp: FSVolumeOperation,
    status: ?*FSEjectStatus,
    volumeOpStatus: ?*objc.OSStatus,
    volumeRefNum: ?*FSVolumeRefNum,
    dissenter: ?*objc.pid_t,
    clientData: ?*?*anyopaque,
) callconv(.C) objc.OSStatus;
pub const fsGetAsyncEjectStatus = FSGetAsyncEjectStatus;

extern "CoreServices" fn FSCopyDiskIDForVolume(vRefNum: FSVolumeRefNum, diskID: ?*core_foundation.StringRef) callconv(.C) objc.OSStatus;
pub const fsCopyDiskIDForVolume = FSCopyDiskIDForVolume;

extern "CoreServices" fn FSCopyURLForVolume(vRefNum: FSVolumeRefNum, url: ?*core_foundation.URLRef) callconv(.C) objc.OSStatus;
pub const fsCopyURLForVolume = FSCopyURLForVolume;

extern "CoreServices" fn FSGetVolumeForDiskID(diskID: core_foundation.StringRef, vRefNum: ?*FSVolumeRefNum) callconv(.C) objc.OSStatus;
pub const fsGetVolumeForDiskID = FSGetVolumeForDiskID;

extern "CoreServices" fn FSCopyDADiskForVolume(vRefNum: FSVolumeRefNum, disk: ?*disk_arbitration.DiskRef) callconv(.C) objc.OSStatus;
pub const fsCopyDADiskForVolume = FSCopyDADiskForVolume;

extern "CoreServices" fn FSGetVolumeForDADisk(disk: disk_arbitration.DiskRef, vRefNum: ?*FSVolumeRefNum) callconv(.C) objc.OSStatus;
pub const fsGetVolumeForDADisk = FSGetVolumeForDADisk;

pub const __FSFileOperation = extern struct {};

pub const FSFileOperationRef = ?*__FSFileOperation;

pub const FSFileOperationStage = objc.UInt32;

pub const FSFileOperationClientContext = extern struct {
    version: core_foundation.Index,
    info: ?*anyopaque,
    retain: core_foundation.AllocatorRetainCallBack,
    release: core_foundation.AllocatorReleaseCallBack,
    copyDescription: core_foundation.AllocatorCopyDescriptionCallBack,
};

pub const FSFileOperationStatusProcPtr = ?*const fn (
    FSFileOperationRef,
    ?*FSRef,
    FSFileOperationStage,
    objc.OSStatus,
    core_foundation.DictionaryRef,
    ?*anyopaque,
) callconv(.C) void;

pub const FSPathFileOperationStatusProcPtr = ?*const fn (
    FSFileOperationRef,
    ?*i8,
    FSFileOperationStage,
    objc.OSStatus,
    core_foundation.DictionaryRef,
    ?*anyopaque,
) callconv(.C) void;

pub const anon55751 = enum(u32) {
    kFSFileOperationDefaultOptions = 0,
    kFSFileOperationOverwrite = 1,
    kFSFileOperationSkipSourcePermissionErrors = 2,
    kFSFileOperationDoNotMoveAcrossVolumes = 4,
    kFSFileOperationSkipPreflight = 8,
};

pub const anon56181 = enum(u32) {
    kFSOperationStageUndefined = 0,
    kFSOperationStagePreflighting = 1,
    kFSOperationStageRunning = 2,
    kFSOperationStageComplete = 3,
};

extern "CoreServices" fn FSCopyObjectSync(
    source: ?*FSRef,
    destDir: ?*FSRef,
    destName: core_foundation.StringRef,
    target: ?*FSRef,
    options: objc.OptionBits,
) callconv(.C) objc.OSStatus;
pub const fsCopyObjectSync = FSCopyObjectSync;

extern "CoreServices" fn FSMoveObjectSync(
    source: ?*FSRef,
    destDir: ?*FSRef,
    destName: core_foundation.StringRef,
    target: ?*FSRef,
    options: objc.OptionBits,
) callconv(.C) objc.OSStatus;
pub const fsMoveObjectSync = FSMoveObjectSync;

extern "CoreServices" fn FSMoveObjectToTrashSync(source: ?*FSRef, target: ?*FSRef, options: objc.OptionBits) callconv(.C) objc.OSStatus;
pub const fsMoveObjectToTrashSync = FSMoveObjectToTrashSync;

extern "CoreServices" fn FSPathCopyObjectSync(
    sourcePath: ?*i8,
    destDirPath: ?*i8,
    destName: core_foundation.StringRef,
    targetPath: ?*?*i8,
    options: objc.OptionBits,
) callconv(.C) objc.OSStatus;
pub const fsPathCopyObjectSync = FSPathCopyObjectSync;

extern "CoreServices" fn FSPathMoveObjectSync(
    sourcePath: ?*i8,
    destDirPath: ?*i8,
    destName: core_foundation.StringRef,
    targetPath: ?*?*i8,
    options: objc.OptionBits,
) callconv(.C) objc.OSStatus;
pub const fsPathMoveObjectSync = FSPathMoveObjectSync;

extern "CoreServices" fn FSPathMoveObjectToTrashSync(sourcePath: ?*i8, targetPath: ?*?*i8, options: objc.OptionBits) callconv(.C) objc.OSStatus;
pub const fsPathMoveObjectToTrashSync = FSPathMoveObjectToTrashSync;

extern "CoreServices" fn FSFileOperationGetTypeID() callconv(.C) core_foundation.TypeID;
pub const fsFileOperationGetTypeID = FSFileOperationGetTypeID;

extern "CoreServices" fn FSFileOperationCreate(alloc: core_foundation.AllocatorRef) callconv(.C) FSFileOperationRef;
pub const fsFileOperationCreate = FSFileOperationCreate;

extern "CoreServices" fn FSFileOperationScheduleWithRunLoop(fileOp: FSFileOperationRef, runLoop: core_foundation.RunLoopRef, runLoopMode: core_foundation.StringRef) callconv(.C) objc.OSStatus;
pub const fsFileOperationScheduleWithRunLoop = FSFileOperationScheduleWithRunLoop;

extern "CoreServices" fn FSFileOperationUnscheduleFromRunLoop(fileOp: FSFileOperationRef, runLoop: core_foundation.RunLoopRef, runLoopMode: core_foundation.StringRef) callconv(.C) objc.OSStatus;
pub const fsFileOperationUnscheduleFromRunLoop = FSFileOperationUnscheduleFromRunLoop;

extern "CoreServices" fn FSCopyObjectAsync(
    fileOp: FSFileOperationRef,
    source: ?*FSRef,
    destDir: ?*FSRef,
    destName: core_foundation.StringRef,
    flags: objc.OptionBits,
    callback: FSFileOperationStatusProcPtr,
    statusChangeInterval: core_foundation.TimeInterval,
    clientContext: ?*FSFileOperationClientContext,
) callconv(.C) objc.OSStatus;
pub const fsCopyObjectAsync = FSCopyObjectAsync;

extern "CoreServices" fn FSMoveObjectAsync(
    fileOp: FSFileOperationRef,
    source: ?*FSRef,
    destDir: ?*FSRef,
    destName: core_foundation.StringRef,
    flags: objc.OptionBits,
    callback: FSFileOperationStatusProcPtr,
    statusChangeInterval: core_foundation.TimeInterval,
    clientContext: ?*FSFileOperationClientContext,
) callconv(.C) objc.OSStatus;
pub const fsMoveObjectAsync = FSMoveObjectAsync;

extern "CoreServices" fn FSMoveObjectToTrashAsync(
    fileOp: FSFileOperationRef,
    source: ?*FSRef,
    flags: objc.OptionBits,
    callback: FSFileOperationStatusProcPtr,
    statusChangeInterval: core_foundation.TimeInterval,
    clientContext: ?*FSFileOperationClientContext,
) callconv(.C) objc.OSStatus;
pub const fsMoveObjectToTrashAsync = FSMoveObjectToTrashAsync;

extern "CoreServices" fn FSPathCopyObjectAsync(
    fileOp: FSFileOperationRef,
    sourcePath: ?*i8,
    destDirPath: ?*i8,
    destName: core_foundation.StringRef,
    flags: objc.OptionBits,
    callback: FSPathFileOperationStatusProcPtr,
    statusChangeInterval: core_foundation.TimeInterval,
    clientContext: ?*FSFileOperationClientContext,
) callconv(.C) objc.OSStatus;
pub const fsPathCopyObjectAsync = FSPathCopyObjectAsync;

extern "CoreServices" fn FSPathMoveObjectAsync(
    fileOp: FSFileOperationRef,
    sourcePath: ?*i8,
    destDirPath: ?*i8,
    destName: core_foundation.StringRef,
    flags: objc.OptionBits,
    callback: FSPathFileOperationStatusProcPtr,
    statusChangeInterval: core_foundation.TimeInterval,
    clientContext: ?*FSFileOperationClientContext,
) callconv(.C) objc.OSStatus;
pub const fsPathMoveObjectAsync = FSPathMoveObjectAsync;

extern "CoreServices" fn FSPathMoveObjectToTrashAsync(
    fileOp: FSFileOperationRef,
    sourcePath: ?*i8,
    flags: objc.OptionBits,
    callback: FSPathFileOperationStatusProcPtr,
    statusChangeInterval: core_foundation.TimeInterval,
    clientContext: ?*FSFileOperationClientContext,
) callconv(.C) objc.OSStatus;
pub const fsPathMoveObjectToTrashAsync = FSPathMoveObjectToTrashAsync;

extern "CoreServices" fn FSFileOperationCancel(fileOp: FSFileOperationRef) callconv(.C) objc.OSStatus;
pub const fsFileOperationCancel = FSFileOperationCancel;

extern "CoreServices" fn FSFileOperationCopyStatus(
    fileOp: FSFileOperationRef,
    currentItem: ?*FSRef,
    stage: ?*FSFileOperationStage,
    @"error": ?*objc.OSStatus,
    statusDictionary: ?*core_foundation.DictionaryRef,
    info: ?*?*anyopaque,
) callconv(.C) objc.OSStatus;
pub const fsFileOperationCopyStatus = FSFileOperationCopyStatus;

extern "CoreServices" fn FSPathFileOperationCopyStatus(
    fileOp: FSFileOperationRef,
    currentItem: ?*?*i8,
    stage: ?*FSFileOperationStage,
    @"error": ?*objc.OSStatus,
    statusDictionary: ?*core_foundation.DictionaryRef,
    info: ?*?*anyopaque,
) callconv(.C) objc.OSStatus;
pub const fsPathFileOperationCopyStatus = FSPathFileOperationCopyStatus;

extern "CoreServices" fn FSCreateStringFromHFSUniStr(alloc: core_foundation.AllocatorRef, uniStr: ?*objc.HFSUniStr255) callconv(.C) core_foundation.StringRef;
pub const fsCreateStringFromHFSUniStr = FSCreateStringFromHFSUniStr;

extern "CoreServices" fn FSGetHFSUniStrFromString(theString: core_foundation.StringRef, uniStr: ?*objc.HFSUniStr255) callconv(.C) objc.OSStatus;
pub const fsGetHFSUniStrFromString = FSGetHFSUniStrFromString;

extern "CoreServices" fn FSFileSecurityGetTypeID() callconv(.C) core_foundation.TypeID;
pub const fsFileSecurityGetTypeID = FSFileSecurityGetTypeID;

extern "CoreServices" fn FSFileSecurityCreate(alloc: core_foundation.AllocatorRef) callconv(.C) FSFileSecurityRef;
pub const fsFileSecurityCreate = FSFileSecurityCreate;

extern "CoreServices" fn FSFileSecurityCreateWithFSPermissionInfo(alloc: core_foundation.AllocatorRef, permissions: ?*FSPermissionInfo) callconv(.C) FSFileSecurityRef;
pub const fsFileSecurityCreateWithFSPermissionInfo = FSFileSecurityCreateWithFSPermissionInfo;

extern "CoreServices" fn FSFileSecurityRefCreateCopy(alloc: core_foundation.AllocatorRef, fileSec: FSFileSecurityRef) callconv(.C) FSFileSecurityRef;
pub const fsFileSecurityRefCreateCopy = FSFileSecurityRefCreateCopy;

extern "CoreServices" fn FSFileSecurityGetOwnerUUID(fileSec: FSFileSecurityRef, owner: ?*core_foundation.UUIDBytes) callconv(.C) objc.OSStatus;
pub const fsFileSecurityGetOwnerUUID = FSFileSecurityGetOwnerUUID;

extern "CoreServices" fn FSFileSecuritySetOwnerUUID(fileSec: FSFileSecurityRef, owner: ?*core_foundation.UUIDBytes) callconv(.C) objc.OSStatus;
pub const fsFileSecuritySetOwnerUUID = FSFileSecuritySetOwnerUUID;

extern "CoreServices" fn FSFileSecurityGetGroupUUID(fileSec: FSFileSecurityRef, group: ?*core_foundation.UUIDBytes) callconv(.C) objc.OSStatus;
pub const fsFileSecurityGetGroupUUID = FSFileSecurityGetGroupUUID;

extern "CoreServices" fn FSFileSecuritySetGroupUUID(fileSec: FSFileSecurityRef, group: ?*core_foundation.UUIDBytes) callconv(.C) objc.OSStatus;
pub const fsFileSecuritySetGroupUUID = FSFileSecuritySetGroupUUID;

extern "CoreServices" fn FSFileSecurityCopyAccessControlList(fileSec: FSFileSecurityRef, accessControlList: ?*objc.acl_t) callconv(.C) objc.OSStatus;
pub const fsFileSecurityCopyAccessControlList = FSFileSecurityCopyAccessControlList;

extern "CoreServices" fn FSFileSecuritySetAccessControlList(fileSec: FSFileSecurityRef, accessControlList: objc.acl_t) callconv(.C) objc.OSStatus;
pub const fsFileSecuritySetAccessControlList = FSFileSecuritySetAccessControlList;

extern "CoreServices" fn FSFileSecurityGetOwner(fileSec: FSFileSecurityRef, owner: ?*objc.UInt32) callconv(.C) objc.OSStatus;
pub const fsFileSecurityGetOwner = FSFileSecurityGetOwner;

extern "CoreServices" fn FSFileSecuritySetOwner(fileSec: FSFileSecurityRef, owner: objc.UInt32) callconv(.C) objc.OSStatus;
pub const fsFileSecuritySetOwner = FSFileSecuritySetOwner;

extern "CoreServices" fn FSFileSecurityGetGroup(fileSec: FSFileSecurityRef, group: ?*objc.UInt32) callconv(.C) objc.OSStatus;
pub const fsFileSecurityGetGroup = FSFileSecurityGetGroup;

extern "CoreServices" fn FSFileSecuritySetGroup(fileSec: FSFileSecurityRef, group: objc.UInt32) callconv(.C) objc.OSStatus;
pub const fsFileSecuritySetGroup = FSFileSecuritySetGroup;

extern "CoreServices" fn FSFileSecurityGetMode(fileSec: FSFileSecurityRef, mode: ?*objc.UInt16) callconv(.C) objc.OSStatus;
pub const fsFileSecurityGetMode = FSFileSecurityGetMode;

extern "CoreServices" fn FSFileSecuritySetMode(fileSec: FSFileSecurityRef, mode: objc.UInt16) callconv(.C) objc.OSStatus;
pub const fsFileSecuritySetMode = FSFileSecuritySetMode;

pub const anon70501 = enum(u32) {
    pleaseCacheBit = 4,
    pleaseCacheMask = 16,
    noCacheBit = 5,
    noCacheMask = 32,
    rdVerifyBit = 6,
    rdVerifyMask = 64,
    rdVerify = 64,
    forceReadBit = 6,
    forceReadMask = 64,
    newLineBit = 7,
    newLineMask = 128,
    newLineCharMask = 65280,
};

pub const anon70681 = enum(u32) {
    kOwnerID2Name = 1,
    kGroupID2Name = 2,
    kOwnerName2ID = 3,
    kGroupName2ID = 4,
    kReturnNextUser = 1,
    kReturnNextGroup = 2,
    kReturnNextUG = 3,
};

pub const anon70791 = enum(u32) {
    kVCBFlagsIdleFlushBit = 3,
    kVCBFlagsIdleFlushMask = 8,
    kVCBFlagsHFSPlusAPIsBit = 4,
    kVCBFlagsHFSPlusAPIsMask = 16,
    kVCBFlagsHardwareGoneBit = 5,
    kVCBFlagsHardwareGoneMask = 32,
    kVCBFlagsVolumeDirtyBit = 15,
    kVCBFlagsVolumeDirtyMask = 32768,
};

pub const anon70911 = enum(u32) {
    kioVAtrbDefaultVolumeBit = 5,
    kioVAtrbDefaultVolumeMask = 32,
    kioVAtrbFilesOpenBit = 6,
    kioVAtrbFilesOpenMask = 64,
    kioVAtrbHardwareLockedBit = 7,
    kioVAtrbHardwareLockedMask = 128,
    kioVAtrbSoftwareLockedBit = 15,
    kioVAtrbSoftwareLockedMask = 32768,
};

pub const anon71031 = enum(u32) {
    kioFlAttribLockedBit = 0,
    kioFlAttribLockedMask = 1,
    kioFlAttribResOpenBit = 2,
    kioFlAttribResOpenMask = 4,
    kioFlAttribDataOpenBit = 3,
    kioFlAttribDataOpenMask = 8,
    kioFlAttribDirBit = 4,
    kioFlAttribDirMask = 16,
    ioDirFlg = 4,
    ioDirMask = 16,
    kioFlAttribCopyProtBit = 6,
    kioFlAttribCopyProtMask = 64,
    kioFlAttribFileOpenBit = 7,
    kioFlAttribFileOpenMask = 128,
    kioFlAttribInSharedBit = 2,
    kioFlAttribInSharedMask = 4,
    kioFlAttribMountedBit = 3,
    kioFlAttribMountedMask = 8,
    kioFlAttribSharePointBit = 5,
    kioFlAttribSharePointMask = 32,
};

pub const anon71311 = enum(u32) {
    kioFCBWriteBit = 8,
    kioFCBWriteMask = 256,
    kioFCBResourceBit = 9,
    kioFCBResourceMask = 512,
    kioFCBWriteLockedBit = 10,
    kioFCBWriteLockedMask = 1024,
    kioFCBLargeFileBit = 11,
    kioFCBLargeFileMask = 2048,
    kioFCBSharedWriteBit = 12,
    kioFCBSharedWriteMask = 4096,
    kioFCBFileLockedBit = 13,
    kioFCBFileLockedMask = 8192,
    kioFCBOwnClumpBit = 14,
    kioFCBOwnClumpMask = 16384,
    kioFCBModifiedBit = 15,
    kioFCBModifiedMask = 32768,
};

pub const anon71531 = enum(u32) {
    kForkInfoFlagsWriteBit = 0,
    kForkInfoFlagsWriteMask = 1,
    kForkInfoFlagsResourceBit = 1,
    kForkInfoFlagsResourceMask = 2,
    kForkInfoFlagsWriteLockedBit = 2,
    kForkInfoFlagsWriteLockedMask = 4,
    kForkInfoFlagsLargeFileBit = 3,
    kForkInfoFlagsLargeFileMask = 8,
    kForkInfoFlagsSharedWriteBit = 4,
    kForkInfoFlagsSharedWriteMask = 16,
    kForkInfoFlagsFileLockedBit = 5,
    kForkInfoFlagsFileLockedMask = 32,
    kForkInfoFlagsOwnClumpBit = 6,
    kForkInfoFlagsOwnClumpMask = 64,
    kForkInfoFlagsModifiedBit = 7,
    kForkInfoFlagsModifiedMask = 128,
};

pub const anon71741 = enum(u32) {
    kioACUserNoSeeFolderBit = 0,
    kioACUserNoSeeFolderMask = 1,
    kioACUserNoSeeFilesBit = 1,
    kioACUserNoSeeFilesMask = 2,
    kioACUserNoMakeChangesBit = 2,
    kioACUserNoMakeChangesMask = 4,
    kioACUserNotOwnerBit = 7,
    kioACUserNotOwnerMask = 128,
};

pub const anon71861 = enum(i32) {
    kioACAccessOwnerBit = 31,
    kioACAccessOwnerMask = -2147483648,
    kioACAccessBlankAccessBit = 28,
    kioACAccessBlankAccessMask = 268435456,
    kioACAccessUserWriteBit = 26,
    kioACAccessUserWriteMask = 67108864,
    kioACAccessUserReadBit = 25,
    kioACAccessUserReadMask = 33554432,
    kioACAccessUserSearchBit = 24,
    kioACAccessUserSearchMask = 16777216,
    kioACAccessEveryoneWriteBit = 18,
    kioACAccessEveryoneWriteMask = 262144,
    kioACAccessEveryoneReadBit = 17,
    kioACAccessEveryoneReadMask = 131072,
    kioACAccessEveryoneSearchBit = 16,
    kioACAccessEveryoneSearchMask = 65536,
    kioACAccessGroupWriteBit = 10,
    kioACAccessGroupWriteMask = 1024,
    kioACAccessGroupReadBit = 9,
    kioACAccessGroupReadMask = 512,
    kioACAccessGroupSearchBit = 8,
    kioACAccessGroupSearchMask = 256,
    kioACAccessOwnerWriteBit = 2,
    kioACAccessOwnerWriteMask = 4,
    kioACAccessOwnerReadBit = 1,
    kioACAccessOwnerReadMask = 2,
    kioACAccessOwnerSearchBit = 0,
    kioACAccessOwnerSearchMask = 1,
    kfullPrivileges = 458759,
    kownerPrivileges = 7,
};

extern "CoreServices" fn FSGetVolumeParms(volume: FSVolumeRefNum, buffer: ?*GetVolParmsInfoBuffer, bufferSize: objc.ByteCount) callconv(.C) objc.OSStatus;
pub const fsGetVolumeParms = FSGetVolumeParms;

extern "CoreServices" fn FSGetVolumeMountInfoSize(volume: FSVolumeRefNum, size: ?*objc.ByteCount) callconv(.C) objc.OSStatus;
pub const fsGetVolumeMountInfoSize = FSGetVolumeMountInfoSize;

extern "CoreServices" fn FSGetVolumeMountInfo(
    volume: FSVolumeRefNum,
    buffer: objc.BytePtr,
    bufferSize: objc.ByteCount,
    actualSize: ?*objc.ByteCount,
) callconv(.C) objc.OSStatus;
pub const fsGetVolumeMountInfo = FSGetVolumeMountInfo;

extern "CoreServices" fn FSVolumeMount(buffer: objc.BytePtr, mountedVolume: ?*FSVolumeRefNum) callconv(.C) objc.OSStatus;
pub const fsVolumeMount = FSVolumeMount;

extern "CoreServices" fn FSFlushVolume(vRefNum: FSVolumeRefNum) callconv(.C) objc.OSStatus;
pub const fsFlushVolume = FSFlushVolume;

extern "CoreServices" fn PBFlushVolumeSync(paramBlock: FSRefParamPtr) callconv(.C) objc.OSStatus;
pub const pbFlushVolumeSync = PBFlushVolumeSync;

extern "CoreServices" fn PBFlushVolumeAsync(paramBlock: FSRefParamPtr) callconv(.C) objc.OSStatus;
pub const pbFlushVolumeAsync = PBFlushVolumeAsync;

extern "CoreServices" fn PBFSCopyFileSync(paramBlock: FSRefParamPtr) callconv(.C) objc.OSStatus;
pub const pbfsCopyFileSync = PBFSCopyFileSync;

extern "CoreServices" fn PBFSCopyFileAsync(paramBlock: FSRefParamPtr) callconv(.C) objc.OSStatus;
pub const pbfsCopyFileAsync = PBFSCopyFileAsync;

extern "CoreServices" fn FSResolveNodeID(volume: FSVolumeRefNum, nodeID: objc.UInt32, newRef: FSRefPtr) callconv(.C) objc.OSStatus;
pub const fsResolveNodeID = FSResolveNodeID;

extern "CoreServices" fn PBFSResolveNodeIDSync(paramBlock: FSRefParamPtr) callconv(.C) objc.OSStatus;
pub const pbfsResolveNodeIDSync = PBFSResolveNodeIDSync;

extern "CoreServices" fn PBFSResolveNodeIDAsync(paramBlock: FSRefParamPtr) callconv(.C) objc.OSStatus;
pub const pbfsResolveNodeIDAsync = PBFSResolveNodeIDAsync;

pub const ResID = objc.SInt16;

pub const ResAttributes = objc.SInt16;

pub const ResFileAttributes = objc.SInt16;

pub const ResourceCount = objc.SInt16;

pub const ResourceIndex = objc.SInt16;

pub const ResFileRefNum = FSIORefNum;

pub const anon721 = enum(u32) {
    kCSIdentityQueryGenerateUpdateEvents = 1,
    kCSIdentityQueryIncludeHiddenIdentities = 2,
};

pub const anon791 = enum(u32) {
    noCalls = 1,
    noRequest = 2,
    slpQType = 16,
    sleepQType = 16,
};

pub const ResErrProcPtr = ?*const fn (objc.OSErr) callconv(.C) void;

pub const ResErrUPP = ResErrProcPtr;

extern "CoreServices" fn NewResErrUPP(userRoutine: ResErrProcPtr) callconv(.C) ResErrUPP;
pub const newResErrUPP = NewResErrUPP;

extern "CoreServices" fn DisposeResErrUPP(userUPP: ResErrUPP) callconv(.C) void;
pub const disposeResErrUPP = DisposeResErrUPP;

extern "CoreServices" fn InvokeResErrUPP(thErr: objc.OSErr, userUPP: ResErrUPP) callconv(.C) void;
pub const invokeResErrUPP = InvokeResErrUPP;

pub const ResourceEndianFilterPtr = ?*const fn (objc.Handle, objc.Boolean) callconv(.C) objc.OSErr;

extern "CoreServices" fn CloseResFile(refNum: ResFileRefNum) callconv(.C) void;
pub const closeResFile = CloseResFile;

extern "CoreServices" fn ResError() callconv(.C) objc.OSErr;
pub const resError = ResError;

extern "CoreServices" fn CurResFile() callconv(.C) ResFileRefNum;
pub const curResFile = CurResFile;

extern "CoreServices" fn HomeResFile(theResource: objc.Handle) callconv(.C) ResFileRefNum;
pub const homeResFile = HomeResFile;

extern "CoreServices" fn UseResFile(refNum: ResFileRefNum) callconv(.C) void;
pub const useResFile = UseResFile;

extern "CoreServices" fn CountTypes() callconv(.C) ResourceCount;
pub const countTypes = CountTypes;

extern "CoreServices" fn Count1Types() callconv(.C) ResourceCount;
pub const count1Types = Count1Types;

extern "CoreServices" fn GetIndType(theType: ?*objc.ResType, itemIndex: ResourceIndex) callconv(.C) void;
pub const getIndType = GetIndType;

extern "CoreServices" fn Get1IndType(theType: ?*objc.ResType, itemIndex: ResourceIndex) callconv(.C) void;
pub const get1IndType = Get1IndType;

extern "CoreServices" fn SetResLoad(load: objc.Boolean) callconv(.C) void;
pub const setResLoad = SetResLoad;

extern "CoreServices" fn CountResources(theType: objc.ResType) callconv(.C) ResourceCount;
pub const countResources = CountResources;

extern "CoreServices" fn Count1Resources(theType: objc.ResType) callconv(.C) ResourceCount;
pub const count1Resources = Count1Resources;

extern "CoreServices" fn GetIndResource(theType: objc.ResType, itemIndex: ResourceIndex) callconv(.C) objc.Handle;
pub const getIndResource = GetIndResource;

extern "CoreServices" fn Get1IndResource(theType: objc.ResType, itemIndex: ResourceIndex) callconv(.C) objc.Handle;
pub const get1IndResource = Get1IndResource;

extern "CoreServices" fn GetResource(theType: objc.ResType, theID: ResID) callconv(.C) objc.Handle;
pub const getResource = GetResource;

extern "CoreServices" fn Get1Resource(theType: objc.ResType, theID: ResID) callconv(.C) objc.Handle;
pub const get1Resource = Get1Resource;

extern "CoreServices" fn GetNamedResource(theType: objc.ResType, name: objc.ConstStr255Param) callconv(.C) objc.Handle;
pub const getNamedResource = GetNamedResource;

extern "CoreServices" fn Get1NamedResource(theType: objc.ResType, name: objc.ConstStr255Param) callconv(.C) objc.Handle;
pub const get1NamedResource = Get1NamedResource;

extern "CoreServices" fn LoadResource(theResource: objc.Handle) callconv(.C) void;
pub const loadResource = LoadResource;

extern "CoreServices" fn ReleaseResource(theResource: objc.Handle) callconv(.C) void;
pub const releaseResource = ReleaseResource;

extern "CoreServices" fn DetachResource(theResource: objc.Handle) callconv(.C) void;
pub const detachResource = DetachResource;

extern "CoreServices" fn UniqueID(theType: objc.ResType) callconv(.C) ResID;
pub const uniqueID = UniqueID;

extern "CoreServices" fn Unique1ID(theType: objc.ResType) callconv(.C) ResID;
pub const unique1ID = Unique1ID;

extern "CoreServices" fn GetResAttrs(theResource: objc.Handle) callconv(.C) ResAttributes;
pub const getResAttrs = GetResAttrs;

extern "CoreServices" fn GetResInfo(
    theResource: objc.Handle,
    theID: ?*ResID,
    theType: ?*objc.ResType,
    name: objc.Str255,
) callconv(.C) void;
pub const getResInfo = GetResInfo;

extern "CoreServices" fn SetResInfo(theResource: objc.Handle, theID: ResID, name: objc.ConstStr255Param) callconv(.C) void;
pub const setResInfo = SetResInfo;

extern "CoreServices" fn AddResource(
    theData: objc.Handle,
    theType: objc.ResType,
    theID: ResID,
    name: objc.ConstStr255Param,
) callconv(.C) void;
pub const addResource = AddResource;

extern "CoreServices" fn GetResourceSizeOnDisk(theResource: objc.Handle) callconv(.C) i64;
pub const getResourceSizeOnDisk = GetResourceSizeOnDisk;

extern "CoreServices" fn GetMaxResourceSize(theResource: objc.Handle) callconv(.C) i64;
pub const getMaxResourceSize = GetMaxResourceSize;

extern "CoreServices" fn SetResAttrs(theResource: objc.Handle, attrs: ResAttributes) callconv(.C) void;
pub const setResAttrs = SetResAttrs;

extern "CoreServices" fn ChangedResource(theResource: objc.Handle) callconv(.C) void;
pub const changedResource = ChangedResource;

extern "CoreServices" fn RemoveResource(theResource: objc.Handle) callconv(.C) void;
pub const removeResource = RemoveResource;

extern "CoreServices" fn UpdateResFile(refNum: ResFileRefNum) callconv(.C) void;
pub const updateResFile = UpdateResFile;

extern "CoreServices" fn WriteResource(theResource: objc.Handle) callconv(.C) void;
pub const writeResource = WriteResource;

extern "CoreServices" fn SetResPurge(install: objc.Boolean) callconv(.C) void;
pub const setResPurge = SetResPurge;

extern "CoreServices" fn GetResFileAttrs(refNum: ResFileRefNum) callconv(.C) ResFileAttributes;
pub const getResFileAttrs = GetResFileAttrs;

extern "CoreServices" fn SetResFileAttrs(refNum: ResFileRefNum, attrs: ResFileAttributes) callconv(.C) void;
pub const setResFileAttrs = SetResFileAttrs;

extern "CoreServices" fn ReadPartialResource(
    theResource: objc.Handle,
    offset: i64,
    buffer: ?*anyopaque,
    count: i64,
) callconv(.C) void;
pub const readPartialResource = ReadPartialResource;

extern "CoreServices" fn WritePartialResource(
    theResource: objc.Handle,
    offset: i64,
    buffer: ?*anyopaque,
    count: i64,
) callconv(.C) void;
pub const writePartialResource = WritePartialResource;

extern "CoreServices" fn SetResourceSize(theResource: objc.Handle, newSize: i64) callconv(.C) void;
pub const setResourceSize = SetResourceSize;

extern "CoreServices" fn GetNextFOND(fondHandle: objc.Handle) callconv(.C) objc.Handle;
pub const getNextFOND = GetNextFOND;

pub const RsrcChainLocation = objc.SInt16;

pub const anon8151 = enum(u32) {
    kRsrcChainBelowSystemMap = 0,
    kRsrcChainBelowApplicationMap = 1,
    kRsrcChainAboveApplicationMap = 2,
    kRsrcChainAboveAllMaps = 4,
};

extern "CoreServices" fn InsertResourceFile(refNum: ResFileRefNum, where: RsrcChainLocation) callconv(.C) objc.OSErr;
pub const insertResourceFile = InsertResourceFile;

extern "CoreServices" fn DetachResourceFile(refNum: ResFileRefNum) callconv(.C) objc.OSErr;
pub const detachResourceFile = DetachResourceFile;

extern "CoreServices" fn GetTopResourceFile(refNum: ?*ResFileRefNum) callconv(.C) objc.OSErr;
pub const getTopResourceFile = GetTopResourceFile;

extern "CoreServices" fn GetNextResourceFile(curRefNum: ResFileRefNum, nextRefNum: ?*ResFileRefNum) callconv(.C) objc.OSErr;
pub const getNextResourceFile = GetNextResourceFile;

extern "CoreServices" fn FSOpenResFile(ref: ?*FSRef, permission: objc.SInt8) callconv(.C) ResFileRefNum;
pub const fsOpenResFile = FSOpenResFile;

extern "CoreServices" fn FSCreateResFile(
    parentRef: ?*FSRef,
    nameLength: objc.UniCharCount,
    name: ?*objc.UniChar,
    whichInfo: FSCatalogInfoBitmap,
    catalogInfo: ?*FSCatalogInfo,
    newRef: ?*FSRef,
    newSpec: FSSpecPtr,
) callconv(.C) void;
pub const fsCreateResFile = FSCreateResFile;

extern "CoreServices" fn FSResourceFileAlreadyOpen(resourceFileRef: ?*FSRef, inChain: ?*objc.Boolean, refNum: ?*ResFileRefNum) callconv(.C) objc.Boolean;
pub const fsResourceFileAlreadyOpen = FSResourceFileAlreadyOpen;

extern "CoreServices" fn FSOpenOrphanResFile(ref: ?*FSRef, permission: objc.SignedByte, refNum: ?*ResFileRefNum) callconv(.C) objc.OSErr;
pub const fsOpenOrphanResFile = FSOpenOrphanResFile;

extern "CoreServices" fn FSCreateResourceFile(
    parentRef: ?*FSRef,
    nameLength: objc.UniCharCount,
    name: ?*objc.UniChar,
    whichInfo: FSCatalogInfoBitmap,
    catalogInfo: ?*FSCatalogInfo,
    forkNameLength: objc.UniCharCount,
    forkName: ?*objc.UniChar,
    newRef: ?*FSRef,
    newSpec: FSSpecPtr,
) callconv(.C) objc.OSErr;
pub const fsCreateResourceFile = FSCreateResourceFile;

extern "CoreServices" fn FSCreateResourceFork(
    ref: ?*FSRef,
    forkNameLength: objc.UniCharCount,
    forkName: ?*objc.UniChar,
    flags: objc.UInt32,
) callconv(.C) objc.OSErr;
pub const fsCreateResourceFork = FSCreateResourceFork;

extern "CoreServices" fn FSOpenResourceFile(
    ref: ?*FSRef,
    forkNameLength: objc.UniCharCount,
    forkName: ?*objc.UniChar,
    permissions: objc.SInt8,
    refNum: ?*ResFileRefNum,
) callconv(.C) objc.OSErr;
pub const fsOpenResourceFile = FSOpenResourceFile;

pub const anon531 = enum(u32) {
    kAnyComponentType = 0,
    kAnyComponentSubType = 0,
    kAnyComponentManufacturer = 0,
    kAnyComponentFlagsMask = 0,
};

pub const anon661 = enum(i32) {
    kDesktopIconResource = -3992,
    kOpenFolderIconResource = -3997,
    kGenericHardDiskIconResource = -3995,
    kGenericFileServerIconResource = -3972,
    kGenericSuitcaseIconResource = -3970,
    kGenericMoverObjectIconResource = -3969,
};

pub const anon801 = enum(u32) {
    kIdleKCEventMask = 1,
    kLockKCEventMask = 2,
    kUnlockKCEventMask = 4,
    kAddKCEventMask = 8,
    kDeleteKCEventMask = 16,
    kUpdateKCEventMask = 32,
    kPasswordChangedKCEventMask = 64,
    kSystemEventKCEventMask = 256,
    kDefaultChangedKCEventMask = 512,
    kDataAccessKCEventMask = 1024,
    kEveryKCEventMask = 65535,
};

pub const anon911 = enum(u32) {
    kSKSearchOptionDefault = 0,
    kSKSearchOptionNoRelevanceScores = 1,
    kSKSearchOptionSpaceMeansOR = 2,
    kSKSearchOptionFindSimilar = 4,
};

pub const anon1011 = enum(i32) {
    kTEC_MIBEnumDontCare = -1,
};

pub const ComponentDescription = extern struct {
    componentType: objc.OSType,
    componentSubType: objc.OSType,
    componentManufacturer: objc.OSType,
    componentFlags: objc.UInt32,
    componentFlagsMask: objc.UInt32,
};

pub const ResourceSpec = extern struct {
    resType: objc.OSType,
    resID: objc.SInt16,
};

pub const ComponentResource = extern struct {
    cd: ComponentDescription,
    component: ResourceSpec,
    componentName: ResourceSpec,
    componentInfo: ResourceSpec,
    componentIcon: ResourceSpec,
};

pub const ComponentResourcePtr = ?*ComponentResource;

pub const ComponentResourceHandle = ?*ComponentResourcePtr;

pub const ComponentPlatformInfo = extern struct {
    componentFlags: objc.SInt32,
    component: ResourceSpec,
    platformType: objc.SInt16,
};

pub const ComponentResourceExtension = extern struct {
    componentVersion: objc.SInt32,
    componentRegisterFlags: objc.SInt32,
    componentIconFamily: objc.SInt16,
};

pub const ComponentPlatformInfoArray = extern struct {
    count: objc.SInt32,
    platformArray: [1]ComponentPlatformInfo,
};

pub const ExtComponentResource = extern struct {
    cd: ComponentDescription,
    component: ResourceSpec,
    componentName: ResourceSpec,
    componentInfo: ResourceSpec,
    componentIcon: ResourceSpec,
    componentVersion: objc.SInt32,
    componentRegisterFlags: objc.SInt32,
    componentIconFamily: objc.SInt16,
    count: objc.SInt32,
    platformArray: [1]ComponentPlatformInfo,
};

pub const ExtComponentResourcePtr = ?*ExtComponentResource;

pub const ExtComponentResourceHandle = ?*ExtComponentResourcePtr;

pub const ComponentAliasResource = extern struct {
    cr: ComponentResource,
    aliasCD: ComponentDescription,
};

pub const ComponentParameters = extern struct {
    flags: objc.UInt8,
    paramSize: objc.UInt8,
    what: objc.SInt16,
    padding: objc.UInt32,
    params: [1]i64,
};

pub const ComponentRecord = extern struct {
    data: [1]i64,
};

pub const Component = ?*ComponentRecord;

pub const ComponentInstanceRecord = extern struct {
    data: [1]i64,
};

pub const ComponentInstance = ?*ComponentInstanceRecord;

pub const RegisteredComponentRecord = extern struct {
    data: [1]i64,
};

pub const RegisteredComponentRecordPtr = ?*RegisteredComponentRecord;

pub const RegisteredComponentInstanceRecord = extern struct {
    data: [1]i64,
};

pub const RegisteredComponentInstanceRecordPtr = ?*RegisteredComponentInstanceRecord;

pub const ComponentResult = objc.SInt32;

pub const anon2391 = enum(u32) {
    cmpAliasNoFlags = 0,
    cmpAliasOnlyThisFile = 1,
};

pub const CSComponentsThreadMode = objc.UInt32;

pub const anon2451 = enum(u32) {
    kCSAcceptAllComponentsMode = 0,
    kCSAcceptThreadSafeComponentsOnlyMode = 1,
};

extern "CoreServices" fn CSSetComponentsThreadMode(mode: CSComponentsThreadMode) callconv(.C) void;
pub const csSetComponentsThreadMode = CSSetComponentsThreadMode;

extern "CoreServices" fn CSGetComponentsThreadMode() callconv(.C) CSComponentsThreadMode;
pub const csGetComponentsThreadMode = CSGetComponentsThreadMode;

pub const ComponentMPWorkFunctionHeaderRecord = extern struct {
    headerSize: objc.UInt32,
    recordSize: objc.UInt32,
    workFlags: objc.UInt32,
    processorCount: objc.UInt16,
    unused: objc.UInt8,
    isRunning: objc.UInt8,
};

pub const ComponentMPWorkFunctionHeaderRecordPtr = ?*ComponentMPWorkFunctionHeaderRecord;

pub const ComponentMPWorkFunctionProcPtr = ?*const fn (?*anyopaque, ComponentMPWorkFunctionHeaderRecordPtr) callconv(.C) ComponentResult;

pub const ComponentRoutineProcPtr = ?*const fn (?*ComponentParameters, objc.Handle) callconv(.C) ComponentResult;

pub const GetMissingComponentResourceProcPtr = ?*const fn (
    Component,
    objc.OSType,
    objc.SInt16,
    ?*anyopaque,
    ?*objc.Handle,
) callconv(.C) objc.OSErr;

pub const ComponentMPWorkFunctionUPP = ComponentMPWorkFunctionProcPtr;

pub const ComponentRoutineUPP = ComponentRoutineProcPtr;

pub const GetMissingComponentResourceUPP = GetMissingComponentResourceProcPtr;

pub const ComponentFunctionUPP = objc.UniversalProcPtr;

extern "CoreServices" fn NewComponentFunctionUPP(userRoutine: objc.ProcPtr, procInfo: ProcInfoType) callconv(.C) ComponentFunctionUPP;
pub const newComponentFunctionUPP = NewComponentFunctionUPP;

extern "CoreServices" fn DisposeComponentFunctionUPP(userUPP: ComponentFunctionUPP) callconv(.C) void;
pub const disposeComponentFunctionUPP = DisposeComponentFunctionUPP;

extern "CoreServices" fn RegisterComponent(
    cd: ?*ComponentDescription,
    componentEntryPoint: ComponentRoutineUPP,
    global: objc.SInt16,
    componentName: objc.Handle,
    componentInfo: objc.Handle,
    componentIcon: objc.Handle,
) callconv(.C) Component;
pub const registerComponent = RegisterComponent;

extern "CoreServices" fn RegisterComponentResource(cr: ComponentResourceHandle, global: objc.SInt16) callconv(.C) Component;
pub const registerComponentResource = RegisterComponentResource;

extern "CoreServices" fn UnregisterComponent(aComponent: Component) callconv(.C) objc.OSErr;
pub const unregisterComponent = UnregisterComponent;

extern "CoreServices" fn FindNextComponent(aComponent: Component, looking: ?*ComponentDescription) callconv(.C) Component;
pub const findNextComponent = FindNextComponent;

extern "CoreServices" fn CountComponents(looking: ?*ComponentDescription) callconv(.C) i64;
pub const countComponents = CountComponents;

extern "CoreServices" fn GetComponentInfo(
    aComponent: Component,
    cd: ?*ComponentDescription,
    componentName: objc.Handle,
    componentInfo: objc.Handle,
    componentIcon: objc.Handle,
) callconv(.C) objc.OSErr;
pub const getComponentInfo = GetComponentInfo;

extern "CoreServices" fn GetComponentListModSeed() callconv(.C) objc.SInt32;
pub const getComponentListModSeed = GetComponentListModSeed;

extern "CoreServices" fn GetComponentTypeModSeed(componentType: objc.OSType) callconv(.C) objc.SInt32;
pub const getComponentTypeModSeed = GetComponentTypeModSeed;

extern "CoreServices" fn OpenAComponent(aComponent: Component, ci: ?*ComponentInstance) callconv(.C) objc.OSErr;
pub const openAComponent = OpenAComponent;

extern "CoreServices" fn OpenComponent(aComponent: Component) callconv(.C) ComponentInstance;
pub const openComponent = OpenComponent;

extern "CoreServices" fn CloseComponent(aComponentInstance: ComponentInstance) callconv(.C) objc.OSErr;
pub const closeComponent = CloseComponent;

extern "CoreServices" fn GetComponentInstanceError(aComponentInstance: ComponentInstance) callconv(.C) objc.OSErr;
pub const getComponentInstanceError = GetComponentInstanceError;

extern "CoreServices" fn ResolveComponentAlias(aComponent: Component) callconv(.C) Component;
pub const resolveComponentAlias = ResolveComponentAlias;

extern "CoreServices" fn GetComponentPublicResource(
    aComponent: Component,
    resourceType: objc.OSType,
    resourceID: objc.SInt16,
    theResource: ?*objc.Handle,
) callconv(.C) objc.OSErr;
pub const getComponentPublicResource = GetComponentPublicResource;

extern "CoreServices" fn GetComponentPublicResourceList(
    resourceType: objc.OSType,
    resourceID: objc.SInt16,
    flags: objc.SInt32,
    cd: ?*ComponentDescription,
    missingProc: GetMissingComponentResourceUPP,
    refCon: ?*anyopaque,
    atomContainerPtr: ?*anyopaque,
) callconv(.C) objc.OSErr;
pub const getComponentPublicResourceList = GetComponentPublicResourceList;

extern "CoreServices" fn GetComponentPublicIndString(
    aComponent: Component,
    theString: objc.Str255,
    strListID: objc.SInt16,
    index: objc.SInt16,
) callconv(.C) objc.OSErr;
pub const getComponentPublicIndString = GetComponentPublicIndString;

extern "CoreServices" fn SetComponentInstanceError(aComponentInstance: ComponentInstance, theError: objc.OSErr) callconv(.C) void;
pub const setComponentInstanceError = SetComponentInstanceError;

extern "CoreServices" fn GetComponentRefcon(aComponent: Component) callconv(.C) i64;
pub const getComponentRefcon = GetComponentRefcon;

extern "CoreServices" fn SetComponentRefcon(aComponent: Component, theRefcon: i64) callconv(.C) void;
pub const setComponentRefcon = SetComponentRefcon;

extern "CoreServices" fn OpenComponentResFile(aComponent: Component) callconv(.C) ResFileRefNum;
pub const openComponentResFile = OpenComponentResFile;

extern "CoreServices" fn OpenAComponentResFile(aComponent: Component, resRef: ?*ResFileRefNum) callconv(.C) objc.OSErr;
pub const openAComponentResFile = OpenAComponentResFile;

extern "CoreServices" fn CloseComponentResFile(refnum: ResFileRefNum) callconv(.C) objc.OSErr;
pub const closeComponentResFile = CloseComponentResFile;

extern "CoreServices" fn GetComponentResource(
    aComponent: Component,
    resType: objc.OSType,
    resID: objc.SInt16,
    theResource: ?*objc.Handle,
) callconv(.C) objc.OSErr;
pub const getComponentResource = GetComponentResource;

extern "CoreServices" fn GetComponentIndString(
    aComponent: Component,
    theString: objc.Str255,
    strListID: objc.SInt16,
    index: objc.SInt16,
) callconv(.C) objc.OSErr;
pub const getComponentIndString = GetComponentIndString;

extern "CoreServices" fn GetComponentInstanceStorage(aComponentInstance: ComponentInstance) callconv(.C) objc.Handle;
pub const getComponentInstanceStorage = GetComponentInstanceStorage;

extern "CoreServices" fn SetComponentInstanceStorage(aComponentInstance: ComponentInstance, theStorage: objc.Handle) callconv(.C) void;
pub const setComponentInstanceStorage = SetComponentInstanceStorage;

extern "CoreServices" fn CountComponentInstances(aComponent: Component) callconv(.C) i64;
pub const countComponentInstances = CountComponentInstances;

extern "CoreServices" fn CallComponentFunction(params: ?*ComponentParameters, func: ComponentFunctionUPP) callconv(.C) ComponentResult;
pub const callComponentFunction = CallComponentFunction;

extern "CoreServices" fn CallComponentFunctionWithStorage(storage: objc.Handle, params: ?*ComponentParameters, func: ComponentFunctionUPP) callconv(.C) ComponentResult;
pub const callComponentFunctionWithStorage = CallComponentFunctionWithStorage;

extern "CoreServices" fn CallComponentFunctionWithStorageProcInfo(
    storage: objc.Handle,
    params: ?*ComponentParameters,
    func: objc.ProcPtr,
    funcProcInfo: ProcInfoType,
) callconv(.C) ComponentResult;
pub const callComponentFunctionWithStorageProcInfo = CallComponentFunctionWithStorageProcInfo;

extern "CoreServices" fn DelegateComponentCall(originalParams: ?*ComponentParameters, ci: ComponentInstance) callconv(.C) ComponentResult;
pub const delegateComponentCall = DelegateComponentCall;

extern "CoreServices" fn SetDefaultComponent(aComponent: Component, flags: objc.SInt16) callconv(.C) objc.OSErr;
pub const setDefaultComponent = SetDefaultComponent;

extern "CoreServices" fn OpenDefaultComponent(componentType: objc.OSType, componentSubType: objc.OSType) callconv(.C) ComponentInstance;
pub const openDefaultComponent = OpenDefaultComponent;

extern "CoreServices" fn OpenADefaultComponent(componentType: objc.OSType, componentSubType: objc.OSType, ci: ?*ComponentInstance) callconv(.C) objc.OSErr;
pub const openADefaultComponent = OpenADefaultComponent;

extern "CoreServices" fn CaptureComponent(capturedComponent: Component, capturingComponent: Component) callconv(.C) Component;
pub const captureComponent = CaptureComponent;

extern "CoreServices" fn UncaptureComponent(aComponent: Component) callconv(.C) objc.OSErr;
pub const uncaptureComponent = UncaptureComponent;

extern "CoreServices" fn RegisterComponentResourceFile(resRefNum: objc.SInt16, global: objc.SInt16) callconv(.C) objc.SInt32;
pub const registerComponentResourceFile = RegisterComponentResourceFile;

extern "CoreServices" fn RegisterComponentFileRef(ref: ?*FSRef, global: objc.SInt16) callconv(.C) objc.OSErr;
pub const registerComponentFileRef = RegisterComponentFileRef;

extern "CoreServices" fn RegisterComponentFileRefEntries(
    ref: ?*FSRef,
    global: objc.SInt16,
    toRegister: ?*ComponentDescription,
    registerCount: objc.UInt32,
) callconv(.C) objc.OSErr;
pub const registerComponentFileRefEntries = RegisterComponentFileRefEntries;

extern "CoreServices" fn CallComponentOpen(ci: ComponentInstance, self: ComponentInstance) callconv(.C) ComponentResult;
pub const callComponentOpen = CallComponentOpen;

extern "CoreServices" fn CallComponentClose(ci: ComponentInstance, self: ComponentInstance) callconv(.C) ComponentResult;
pub const callComponentClose = CallComponentClose;

extern "CoreServices" fn CallComponentCanDo(ci: ComponentInstance, ftnNumber: objc.SInt16) callconv(.C) ComponentResult;
pub const callComponentCanDo = CallComponentCanDo;

extern "CoreServices" fn CallComponentVersion(ci: ComponentInstance) callconv(.C) ComponentResult;
pub const callComponentVersion = CallComponentVersion;

extern "CoreServices" fn CallComponentRegister(ci: ComponentInstance) callconv(.C) ComponentResult;
pub const callComponentRegister = CallComponentRegister;

extern "CoreServices" fn CallComponentTarget(ci: ComponentInstance, target: ComponentInstance) callconv(.C) ComponentResult;
pub const callComponentTarget = CallComponentTarget;

extern "CoreServices" fn CallComponentUnregister(ci: ComponentInstance) callconv(.C) ComponentResult;
pub const callComponentUnregister = CallComponentUnregister;

extern "CoreServices" fn CallComponentGetMPWorkFunction(ci: ComponentInstance, workFunction: ?*ComponentMPWorkFunctionUPP, refCon: ?*?*anyopaque) callconv(.C) ComponentResult;
pub const callComponentGetMPWorkFunction = CallComponentGetMPWorkFunction;

extern "CoreServices" fn CallComponentGetPublicResource(
    ci: ComponentInstance,
    resourceType: objc.OSType,
    resourceID: objc.SInt16,
    resource: ?*objc.Handle,
) callconv(.C) ComponentResult;
pub const callComponentGetPublicResource = CallComponentGetPublicResource;

extern "CoreServices" fn CallComponentDispatch(cp: ?*ComponentParameters) callconv(.C) ComponentResult;
pub const callComponentDispatch = CallComponentDispatch;

extern "CoreServices" fn NewComponentMPWorkFunctionUPP(userRoutine: ComponentMPWorkFunctionProcPtr) callconv(.C) ComponentMPWorkFunctionUPP;
pub const newComponentMPWorkFunctionUPP = NewComponentMPWorkFunctionUPP;

extern "CoreServices" fn NewComponentRoutineUPP(userRoutine: ComponentRoutineProcPtr) callconv(.C) ComponentRoutineUPP;
pub const newComponentRoutineUPP = NewComponentRoutineUPP;

extern "CoreServices" fn NewGetMissingComponentResourceUPP(userRoutine: GetMissingComponentResourceProcPtr) callconv(.C) GetMissingComponentResourceUPP;
pub const newGetMissingComponentResourceUPP = NewGetMissingComponentResourceUPP;

extern "CoreServices" fn DisposeComponentMPWorkFunctionUPP(userUPP: ComponentMPWorkFunctionUPP) callconv(.C) void;
pub const disposeComponentMPWorkFunctionUPP = DisposeComponentMPWorkFunctionUPP;

extern "CoreServices" fn DisposeComponentRoutineUPP(userUPP: ComponentRoutineUPP) callconv(.C) void;
pub const disposeComponentRoutineUPP = DisposeComponentRoutineUPP;

extern "CoreServices" fn DisposeGetMissingComponentResourceUPP(userUPP: GetMissingComponentResourceUPP) callconv(.C) void;
pub const disposeGetMissingComponentResourceUPP = DisposeGetMissingComponentResourceUPP;

extern "CoreServices" fn InvokeComponentMPWorkFunctionUPP(globalRefCon: ?*anyopaque, header: ComponentMPWorkFunctionHeaderRecordPtr, userUPP: ComponentMPWorkFunctionUPP) callconv(.C) ComponentResult;
pub const invokeComponentMPWorkFunctionUPP = InvokeComponentMPWorkFunctionUPP;

extern "CoreServices" fn InvokeComponentRoutineUPP(cp: ?*ComponentParameters, componentStorage: objc.Handle, userUPP: ComponentRoutineUPP) callconv(.C) ComponentResult;
pub const invokeComponentRoutineUPP = InvokeComponentRoutineUPP;

extern "CoreServices" fn InvokeGetMissingComponentResourceUPP(
    c: Component,
    resType: objc.OSType,
    resID: objc.SInt16,
    refCon: ?*anyopaque,
    resource: ?*objc.Handle,
    userUPP: GetMissingComponentResourceUPP,
) callconv(.C) objc.OSErr;
pub const invokeGetMissingComponentResourceUPP = InvokeGetMissingComponentResourceUPP;

pub const anon15701 = enum(u32) {
    uppComponentFunctionImplementedProcInfo = 752,
    uppGetComponentVersionProcInfo = 240,
    uppComponentSetTargetProcInfo = 1008,
    uppCallComponentOpenProcInfo = 1008,
    uppCallComponentCloseProcInfo = 1008,
    uppCallComponentCanDoProcInfo = 752,
    uppCallComponentVersionProcInfo = 240,
    uppCallComponentRegisterProcInfo = 240,
    uppCallComponentTargetProcInfo = 1008,
    uppCallComponentUnregisterProcInfo = 240,
    uppCallComponentGetMPWorkFunctionProcInfo = 4080,
    uppCallComponentGetPublicResourceProcInfo = 15344,
};

pub const OpaqueMPProcessID = extern struct {};

pub const MPProcessID = ?*OpaqueMPProcessID;

pub const OpaqueMPTaskID = extern struct {};

pub const MPTaskID = ?*OpaqueMPTaskID;

pub const OpaqueMPQueueID = extern struct {};

pub const MPQueueID = ?*OpaqueMPQueueID;

pub const OpaqueMPSemaphoreID = extern struct {};

pub const MPSemaphoreID = ?*OpaqueMPSemaphoreID;

pub const OpaqueMPCriticalRegionID = extern struct {};

pub const MPCriticalRegionID = ?*OpaqueMPCriticalRegionID;

pub const OpaqueMPTimerID = extern struct {};

pub const MPTimerID = ?*OpaqueMPTimerID;

pub const OpaqueMPEventID = extern struct {};

pub const MPEventID = ?*OpaqueMPEventID;

pub const OpaqueMPAddressSpaceID = extern struct {};

pub const MPAddressSpaceID = ?*OpaqueMPAddressSpaceID;

pub const OpaqueMPNotificationID = extern struct {};

pub const MPNotificationID = ?*OpaqueMPNotificationID;

pub const OpaqueMPCoherenceID = extern struct {};

pub const MPCoherenceID = ?*OpaqueMPCoherenceID;

pub const OpaqueMPCpuID = extern struct {};

pub const MPCpuID = ?*OpaqueMPCpuID;

pub const OpaqueMPAreaID = extern struct {};

pub const MPAreaID = ?*OpaqueMPAreaID;

pub const OpaqueMPConsoleID = extern struct {};

pub const MPConsoleID = ?*OpaqueMPConsoleID;

pub const OpaqueMPOpaqueID = extern struct {};

pub const MPOpaqueID = ?*OpaqueMPOpaqueID;

pub const MPOpaqueIDClass = objc.UInt32;

pub const MPTaskOptions = objc.OptionBits;

pub const TaskStorageIndex = objc.ItemCount;

pub const TaskStorageValue = objc.LogicalAddress;

pub const MPSemaphoreCount = objc.ItemCount;

pub const MPTaskWeight = objc.UInt32;

pub const MPEventFlags = objc.UInt32;

pub const MPExceptionKind = objc.UInt32;

pub const MPTaskStateKind = objc.UInt32;

pub const MPPageSizeClass = objc.UInt32;

extern "CoreServices" fn MPProcessors() callconv(.C) objc.ItemCount;
pub const mpProcessors = MPProcessors;

extern "CoreServices" fn MPProcessorsScheduled() callconv(.C) objc.ItemCount;
pub const mpProcessorsScheduled = MPProcessorsScheduled;

pub const TaskProc = ?*const fn (?*anyopaque) callconv(.C) objc.OSStatus;

extern "CoreServices" fn MPCreateTask(
    entryPoint: TaskProc,
    parameter: ?*anyopaque,
    stackSize: objc.ByteCount,
    notifyQueue: MPQueueID,
    terminationParameter1: ?*anyopaque,
    terminationParameter2: ?*anyopaque,
    options: MPTaskOptions,
    task: ?*MPTaskID,
) callconv(.C) objc.OSStatus;
pub const mpCreateTask = MPCreateTask;

extern "CoreServices" fn MPTerminateTask(task: MPTaskID, terminationStatus: objc.OSStatus) callconv(.C) objc.OSStatus;
pub const mpTerminateTask = MPTerminateTask;

extern "CoreServices" fn MPSetTaskWeight(task: MPTaskID, weight: MPTaskWeight) callconv(.C) objc.OSStatus;
pub const mpSetTaskWeight = MPSetTaskWeight;

extern "CoreServices" fn MPTaskIsPreemptive(taskID: MPTaskID) callconv(.C) objc.Boolean;
pub const mpTaskIsPreemptive = MPTaskIsPreemptive;

extern "CoreServices" fn MPExit(status: objc.OSStatus) callconv(.C) void;
pub const mpExit = MPExit;

extern "CoreServices" fn MPYield() callconv(.C) void;
pub const mpYield = MPYield;

extern "CoreServices" fn MPCurrentTaskID() callconv(.C) MPTaskID;
pub const mpCurrentTaskID = MPCurrentTaskID;

extern "CoreServices" fn MPSetTaskType(task: MPTaskID, taskType: objc.OSType) callconv(.C) objc.OSStatus;
pub const mpSetTaskType = MPSetTaskType;

extern "CoreServices" fn MPAllocateTaskStorageIndex(taskIndex: ?*TaskStorageIndex) callconv(.C) objc.OSStatus;
pub const mpAllocateTaskStorageIndex = MPAllocateTaskStorageIndex;

extern "CoreServices" fn MPDeallocateTaskStorageIndex(taskIndex: TaskStorageIndex) callconv(.C) objc.OSStatus;
pub const mpDeallocateTaskStorageIndex = MPDeallocateTaskStorageIndex;

extern "CoreServices" fn MPSetTaskStorageValue(taskIndex: TaskStorageIndex, value: TaskStorageValue) callconv(.C) objc.OSStatus;
pub const mpSetTaskStorageValue = MPSetTaskStorageValue;

extern "CoreServices" fn MPGetTaskStorageValue(taskIndex: TaskStorageIndex) callconv(.C) TaskStorageValue;
pub const mpGetTaskStorageValue = MPGetTaskStorageValue;

extern "CoreServices" fn MPCreateQueue(queue: ?*MPQueueID) callconv(.C) objc.OSStatus;
pub const mpCreateQueue = MPCreateQueue;

extern "CoreServices" fn MPDeleteQueue(queue: MPQueueID) callconv(.C) objc.OSStatus;
pub const mpDeleteQueue = MPDeleteQueue;

extern "CoreServices" fn MPNotifyQueue(
    queue: MPQueueID,
    param1: ?*anyopaque,
    param2: ?*anyopaque,
    param3: ?*anyopaque,
) callconv(.C) objc.OSStatus;
pub const mpNotifyQueue = MPNotifyQueue;

extern "CoreServices" fn MPWaitOnQueue(
    queue: MPQueueID,
    param1: ?*?*anyopaque,
    param2: ?*?*anyopaque,
    param3: ?*?*anyopaque,
    timeout: objc.Duration,
) callconv(.C) objc.OSStatus;
pub const mpWaitOnQueue = MPWaitOnQueue;

extern "CoreServices" fn MPSetQueueReserve(queue: MPQueueID, count: objc.ItemCount) callconv(.C) objc.OSStatus;
pub const mpSetQueueReserve = MPSetQueueReserve;

extern "CoreServices" fn MPCreateSemaphore(maximumValue: MPSemaphoreCount, initialValue: MPSemaphoreCount, semaphore: ?*MPSemaphoreID) callconv(.C) objc.OSStatus;
pub const mpCreateSemaphore = MPCreateSemaphore;

extern "CoreServices" fn MPDeleteSemaphore(semaphore: MPSemaphoreID) callconv(.C) objc.OSStatus;
pub const mpDeleteSemaphore = MPDeleteSemaphore;

extern "CoreServices" fn MPSignalSemaphore(semaphore: MPSemaphoreID) callconv(.C) objc.OSStatus;
pub const mpSignalSemaphore = MPSignalSemaphore;

extern "CoreServices" fn MPWaitOnSemaphore(semaphore: MPSemaphoreID, timeout: objc.Duration) callconv(.C) objc.OSStatus;
pub const mpWaitOnSemaphore = MPWaitOnSemaphore;

extern "CoreServices" fn MPCreateCriticalRegion(criticalRegion: ?*MPCriticalRegionID) callconv(.C) objc.OSStatus;
pub const mpCreateCriticalRegion = MPCreateCriticalRegion;

extern "CoreServices" fn MPDeleteCriticalRegion(criticalRegion: MPCriticalRegionID) callconv(.C) objc.OSStatus;
pub const mpDeleteCriticalRegion = MPDeleteCriticalRegion;

extern "CoreServices" fn MPEnterCriticalRegion(criticalRegion: MPCriticalRegionID, timeout: objc.Duration) callconv(.C) objc.OSStatus;
pub const mpEnterCriticalRegion = MPEnterCriticalRegion;

extern "CoreServices" fn MPExitCriticalRegion(criticalRegion: MPCriticalRegionID) callconv(.C) objc.OSStatus;
pub const mpExitCriticalRegion = MPExitCriticalRegion;

extern "CoreServices" fn MPCreateEvent(event: ?*MPEventID) callconv(.C) objc.OSStatus;
pub const mpCreateEvent = MPCreateEvent;

extern "CoreServices" fn MPDeleteEvent(event: MPEventID) callconv(.C) objc.OSStatus;
pub const mpDeleteEvent = MPDeleteEvent;

extern "CoreServices" fn MPSetEvent(event: MPEventID, flags: MPEventFlags) callconv(.C) objc.OSStatus;
pub const mpSetEvent = MPSetEvent;

extern "CoreServices" fn MPWaitForEvent(event: MPEventID, flags: ?*MPEventFlags, timeout: objc.Duration) callconv(.C) objc.OSStatus;
pub const mpWaitForEvent = MPWaitForEvent;

extern "CoreServices" fn MPCreateNotification(notificationID: ?*MPNotificationID) callconv(.C) objc.OSStatus;
pub const mpCreateNotification = MPCreateNotification;

extern "CoreServices" fn MPDeleteNotification(notificationID: MPNotificationID) callconv(.C) objc.OSStatus;
pub const mpDeleteNotification = MPDeleteNotification;

extern "CoreServices" fn MPModifyNotification(
    notificationID: MPNotificationID,
    anID: MPOpaqueID,
    notifyParam1: ?*anyopaque,
    notifyParam2: ?*anyopaque,
    notifyParam3: ?*anyopaque,
) callconv(.C) objc.OSStatus;
pub const mpModifyNotification = MPModifyNotification;

extern "CoreServices" fn MPModifyNotificationParameters(
    notificationID: MPNotificationID,
    kind: MPOpaqueIDClass,
    notifyParam1: ?*anyopaque,
    notifyParam2: ?*anyopaque,
    notifyParam3: ?*anyopaque,
) callconv(.C) objc.OSStatus;
pub const mpModifyNotificationParameters = MPModifyNotificationParameters;

extern "CoreServices" fn MPCauseNotification(notificationID: MPNotificationID) callconv(.C) objc.OSStatus;
pub const mpCauseNotification = MPCauseNotification;

pub const anon8721 = enum(u32) {
    kMPPreserveTimerIDMask = 1,
    kMPTimeIsDeltaMask = 2,
    kMPTimeIsDurationMask = 4,
};

extern "CoreServices" fn MPDelayUntil(expirationTime: ?*objc.AbsoluteTime) callconv(.C) objc.OSStatus;
pub const mpDelayUntil = MPDelayUntil;

extern "CoreServices" fn MPCreateTimer(timerID: ?*MPTimerID) callconv(.C) objc.OSStatus;
pub const mpCreateTimer = MPCreateTimer;

extern "CoreServices" fn MPDeleteTimer(timerID: MPTimerID) callconv(.C) objc.OSStatus;
pub const mpDeleteTimer = MPDeleteTimer;

extern "CoreServices" fn MPSetTimerNotify(
    timerID: MPTimerID,
    anID: MPOpaqueID,
    notifyParam1: ?*anyopaque,
    notifyParam2: ?*anyopaque,
    notifyParam3: ?*anyopaque,
) callconv(.C) objc.OSStatus;
pub const mpSetTimerNotify = MPSetTimerNotify;

extern "CoreServices" fn MPArmTimer(timerID: MPTimerID, expirationTime: ?*objc.AbsoluteTime, options: objc.OptionBits) callconv(.C) objc.OSStatus;
pub const mpArmTimer = MPArmTimer;

extern "CoreServices" fn MPCancelTimer(timerID: MPTimerID, timeRemaining: ?*objc.AbsoluteTime) callconv(.C) objc.OSStatus;
pub const mpCancelTimer = MPCancelTimer;

pub const anon10171 = enum(u32) {
    kMPAllocateDefaultAligned = 0,
    kMPAllocate8ByteAligned = 3,
    kMPAllocate16ByteAligned = 4,
    kMPAllocate32ByteAligned = 5,
    kMPAllocate1024ByteAligned = 10,
    kMPAllocate4096ByteAligned = 12,
    kMPAllocateMaxAlignment = 16,
    kMPAllocateAltiVecAligned = 4,
    kMPAllocateVMXAligned = 4,
    kMPAllocateVMPageAligned = 254,
    kMPAllocateInterlockAligned = 255,
};

pub const anon10341 = enum(u32) {
    kMPAllocateClearMask = 1,
    kMPAllocateGloballyMask = 2,
    kMPAllocateResidentMask = 4,
    kMPAllocateNoGrowthMask = 16,
    kMPAllocateNoCreateMask = 32,
};

extern "CoreServices" fn MPAllocateAligned(size: objc.ByteCount, alignment: objc.UInt8, options: objc.OptionBits) callconv(.C) objc.LogicalAddress;
pub const mpAllocateAligned = MPAllocateAligned;

extern "CoreServices" fn MPAllocate(size: objc.ByteCount) callconv(.C) objc.LogicalAddress;
pub const mpAllocate = MPAllocate;

extern "CoreServices" fn MPFree(object: objc.LogicalAddress) callconv(.C) void;
pub const mpFree = MPFree;

extern "CoreServices" fn MPGetAllocatedBlockSize(object: objc.LogicalAddress) callconv(.C) objc.ByteCount;
pub const mpGetAllocatedBlockSize = MPGetAllocatedBlockSize;

extern "CoreServices" fn MPBlockCopy(source: objc.LogicalAddress, destination: objc.LogicalAddress, size: objc.ByteCount) callconv(.C) void;
pub const mpBlockCopy = MPBlockCopy;

extern "CoreServices" fn MPBlockClear(address: objc.LogicalAddress, size: objc.ByteCount) callconv(.C) void;
pub const mpBlockClear = MPBlockClear;

pub const anon12221 = enum(u32) {
    kMPTaskStateRegisters = 0,
    kMPTaskStateFPU = 1,
    kMPTaskStateVectors = 2,
    kMPTaskStateMachine = 3,
    kMPTaskState32BitMemoryException = 4,
    kMPTaskStateTaskInfo = 5,
};

pub const anon12341 = enum(u32) {
    kMPTaskPropagate = 0,
    kMPTaskResumeStep = 1,
    kMPTaskResumeBranch = 2,
    kMPTaskResumeMask = 0,
    kMPTaskPropagateMask = 1,
    kMPTaskResumeStepMask = 2,
    kMPTaskResumeBranchMask = 4,
};

pub const anon12471 = enum(u32) {
    kMPTaskBlocked = 0,
    kMPTaskReady = 1,
    kMPTaskRunning = 2,
};

pub const anon12541 = enum(u32) {
    kMPTaskInfoVersion = 3,
};

pub const MPTaskInfoVersion2 = extern struct {
    version: objc.PBVersion,
    name: objc.OSType,
    queueName: objc.OSType,
    runState: objc.UInt16,
    lastCPU: objc.UInt16,
    weight: objc.UInt32,
    processID: MPProcessID,
    cpuTime: objc.AbsoluteTime,
    schedTime: objc.AbsoluteTime,
    creationTime: objc.AbsoluteTime,
    codePageFaults: objc.ItemCount,
    dataPageFaults: objc.ItemCount,
    preemptions: objc.ItemCount,
    cpuID: MPCpuID,
};

pub const MPTaskInfo = extern struct {
    version: objc.PBVersion,
    name: objc.OSType,
    queueName: objc.OSType,
    runState: objc.UInt16,
    lastCPU: objc.UInt16,
    weight: objc.UInt32,
    processID: MPProcessID,
    cpuTime: objc.AbsoluteTime,
    schedTime: objc.AbsoluteTime,
    creationTime: objc.AbsoluteTime,
    codePageFaults: objc.ItemCount,
    dataPageFaults: objc.ItemCount,
    preemptions: objc.ItemCount,
    cpuID: MPCpuID,
    blockedObject: MPOpaqueID,
    spaceID: MPAddressSpaceID,
    stackBase: objc.LogicalAddress,
    stackLimit: objc.LogicalAddress,
    stackCurr: objc.LogicalAddress,
};

extern "CoreServices" fn MPSetExceptionHandler(task: MPTaskID, exceptionQ: MPQueueID) callconv(.C) objc.OSStatus;
pub const mpSetExceptionHandler = MPSetExceptionHandler;

extern "CoreServices" fn MPDisposeTaskException(task: MPTaskID, action: objc.OptionBits) callconv(.C) objc.OSStatus;
pub const mpDisposeTaskException = MPDisposeTaskException;

extern "CoreServices" fn MPExtractTaskState(task: MPTaskID, kind: MPTaskStateKind, info: ?*anyopaque) callconv(.C) objc.OSStatus;
pub const mpExtractTaskState = MPExtractTaskState;

extern "CoreServices" fn MPSetTaskState(task: MPTaskID, kind: MPTaskStateKind, info: ?*anyopaque) callconv(.C) objc.OSStatus;
pub const mpSetTaskState = MPSetTaskState;

extern "CoreServices" fn MPThrowException(task: MPTaskID, kind: MPExceptionKind) callconv(.C) objc.OSStatus;
pub const mpThrowException = MPThrowException;

pub const MPDebuggerLevel = objc.UInt32;

extern "CoreServices" fn MPRegisterDebugger(queue: MPQueueID, level: MPDebuggerLevel) callconv(.C) objc.OSStatus;
pub const mpRegisterDebugger = MPRegisterDebugger;

extern "CoreServices" fn MPUnregisterDebugger(queue: MPQueueID) callconv(.C) objc.OSStatus;
pub const mpUnregisterDebugger = MPUnregisterDebugger;

pub const MPRemoteProcedure = ?*const fn (?*anyopaque) callconv(.C) ?*anyopaque;

pub const MPRemoteContext = objc.UInt8;

pub const anon14821 = enum(u32) {
    kMPAnyRemoteContext = 0,
    kMPOwningProcessRemoteContext = 1,
    kMPInterruptRemoteContext = 2,
    kMPAsyncInterruptRemoteContext = 3,
};

extern "CoreServices" fn MPRemoteCall(remoteProc: MPRemoteProcedure, parameter: ?*anyopaque, context: MPRemoteContext) callconv(.C) ?*anyopaque;
pub const mpRemoteCall = MPRemoteCall;

extern "CoreServices" fn MPRemoteCallCFM(remoteProc: MPRemoteProcedure, parameter: ?*anyopaque, context: MPRemoteContext) callconv(.C) ?*anyopaque;
pub const mpRemoteCallCFM = MPRemoteCallCFM;

extern "CoreServices" fn _MPIsFullyInitialized() callconv(.C) objc.Boolean;
pub const _mpIsFullyInitialized = _MPIsFullyInitialized;

pub const MPIsFullyInitializedProc = ?*const fn () callconv(.C) objc.Boolean;

extern "CoreServices" fn _MPLibraryVersion(
    versionCString: ?*?*i8,
    major: ?*objc.UInt32,
    minor: ?*objc.UInt32,
    release: ?*objc.UInt32,
    revision: ?*objc.UInt32,
) callconv(.C) void;
pub const _mpLibraryVersion = _MPLibraryVersion;

extern "CoreServices" fn _MPLibraryIsCompatible(
    versionCString: ?*i8,
    major: objc.UInt32,
    minor: objc.UInt32,
    release: objc.UInt32,
    revision: objc.UInt32,
) callconv(.C) objc.Boolean;
pub const _mpLibraryIsCompatible = _MPLibraryIsCompatible;

pub const FSAliasInfoBitmap = objc.UInt32;

pub const anon631 = enum(objc.OSType) {
    kLSUnknownType = 0,
    kLSUnknownCreator = 0,
};

pub const AliasRecord = extern struct {
    hidden: [6]objc.UInt8,
};

pub const AliasPtr = ?*AliasRecord;

pub const AliasHandle = ?*AliasPtr;

pub const FSAliasInfo = extern struct {
    volumeCreateDate: UTCDateTime,
    targetCreateDate: UTCDateTime,
    fileType: objc.OSType,
    fileCreator: objc.OSType,
    parentDirID: objc.UInt32,
    nodeID: objc.UInt32,
    filesystemID: objc.UInt16,
    signature: objc.UInt16,
    volumeIsBootVolume: objc.Boolean,
    volumeIsAutomounted: objc.Boolean,
    volumeIsEjectable: objc.Boolean,
    volumeHasPersistentFileIDs: objc.Boolean,
    isDirectory: objc.Boolean,
};

pub const FSAliasInfoPtr = ?*FSAliasInfo;

pub const AliasInfoType = i16;

pub const FSAliasFilterProcPtr = ?*const fn (?*FSRef, ?*objc.Boolean, objc.Ptr) callconv(.C) objc.Boolean;

extern "CoreServices" fn FSNewAlias(fromFile: ?*FSRef, target: ?*FSRef, inAlias: ?*AliasHandle) callconv(.C) objc.OSErr;
pub const fsNewAlias = FSNewAlias;

extern "CoreServices" fn FSNewAliasMinimal(target: ?*FSRef, inAlias: ?*AliasHandle) callconv(.C) objc.OSErr;
pub const fsNewAliasMinimal = FSNewAliasMinimal;

extern "CoreServices" fn FSIsAliasFile(fileRef: ?*FSRef, aliasFileFlag: ?*objc.Boolean, folderFlag: ?*objc.Boolean) callconv(.C) objc.OSErr;
pub const fsIsAliasFile = FSIsAliasFile;

extern "CoreServices" fn FSResolveAliasWithMountFlags(
    fromFile: ?*FSRef,
    inAlias: AliasHandle,
    target: ?*FSRef,
    wasChanged: ?*objc.Boolean,
    mountFlags: u64,
) callconv(.C) objc.OSErr;
pub const fsResolveAliasWithMountFlags = FSResolveAliasWithMountFlags;

extern "CoreServices" fn FSResolveAlias(
    fromFile: ?*FSRef,
    alias: AliasHandle,
    target: ?*FSRef,
    wasChanged: ?*objc.Boolean,
) callconv(.C) objc.OSErr;
pub const fsResolveAlias = FSResolveAlias;

extern "CoreServices" fn FSResolveAliasFileWithMountFlags(
    theRef: ?*FSRef,
    resolveAliasChains: objc.Boolean,
    targetIsFolder: ?*objc.Boolean,
    wasAliased: ?*objc.Boolean,
    mountFlags: u64,
) callconv(.C) objc.OSErr;
pub const fsResolveAliasFileWithMountFlags = FSResolveAliasFileWithMountFlags;

extern "CoreServices" fn FSResolveAliasFile(
    theRef: ?*FSRef,
    resolveAliasChains: objc.Boolean,
    targetIsFolder: ?*objc.Boolean,
    wasAliased: ?*objc.Boolean,
) callconv(.C) objc.OSErr;
pub const fsResolveAliasFile = FSResolveAliasFile;

extern "CoreServices" fn FSFollowFinderAlias(
    fromFile: ?*FSRef,
    alias: AliasHandle,
    logon: objc.Boolean,
    target: ?*FSRef,
    wasChanged: ?*objc.Boolean,
) callconv(.C) objc.OSErr;
pub const fsFollowFinderAlias = FSFollowFinderAlias;

extern "CoreServices" fn FSUpdateAlias(
    fromFile: ?*FSRef,
    target: ?*FSRef,
    alias: AliasHandle,
    wasChanged: ?*objc.Boolean,
) callconv(.C) objc.OSErr;
pub const fsUpdateAlias = FSUpdateAlias;

extern "CoreServices" fn FSNewAliasUnicode(
    fromFile: ?*FSRef,
    targetParentRef: ?*FSRef,
    targetNameLength: objc.UniCharCount,
    targetName: ?*objc.UniChar,
    inAlias: ?*AliasHandle,
    isDirectory: ?*objc.Boolean,
) callconv(.C) objc.OSErr;
pub const fsNewAliasUnicode = FSNewAliasUnicode;

extern "CoreServices" fn FSNewAliasMinimalUnicode(
    targetParentRef: ?*FSRef,
    targetNameLength: objc.UniCharCount,
    targetName: ?*objc.UniChar,
    inAlias: ?*AliasHandle,
    isDirectory: ?*objc.Boolean,
) callconv(.C) objc.OSErr;
pub const fsNewAliasMinimalUnicode = FSNewAliasMinimalUnicode;

extern "CoreServices" fn FSNewAliasFromPath(
    fromFilePath: ?*i8,
    targetPath: ?*i8,
    flags: objc.OptionBits,
    inAlias: ?*AliasHandle,
    isDirectory: ?*objc.Boolean,
) callconv(.C) objc.OSStatus;
pub const fsNewAliasFromPath = FSNewAliasFromPath;

extern "CoreServices" fn FSMatchAliasBulk(
    fromFile: ?*FSRef,
    rulesMask: u64,
    inAlias: AliasHandle,
    aliasCount: ?*i16,
    aliasList: ?*FSRef,
    needsUpdate: ?*objc.Boolean,
    aliasFilter: FSAliasFilterProcPtr,
    yourDataPtr: ?*anyopaque,
) callconv(.C) objc.OSStatus;
pub const fsMatchAliasBulk = FSMatchAliasBulk;

extern "CoreServices" fn FSCopyAliasInfo(
    inAlias: AliasHandle,
    targetName: ?*objc.HFSUniStr255,
    volumeName: ?*objc.HFSUniStr255,
    pathString: ?*core_foundation.StringRef,
    whichInfo: ?*FSAliasInfoBitmap,
    info: ?*FSAliasInfo,
) callconv(.C) objc.OSStatus;
pub const fsCopyAliasInfo = FSCopyAliasInfo;

extern "CoreServices" fn GetAliasSize(alias: AliasHandle) callconv(.C) objc.Size;
pub const getAliasSize = GetAliasSize;

extern "CoreServices" fn GetAliasUserType(alias: AliasHandle) callconv(.C) objc.OSType;
pub const getAliasUserType = GetAliasUserType;

extern "CoreServices" fn SetAliasUserType(alias: AliasHandle, userType: objc.OSType) callconv(.C) void;
pub const setAliasUserType = SetAliasUserType;

extern "CoreServices" fn GetAliasSizeFromPtr(alias: ?*AliasRecord) callconv(.C) objc.Size;
pub const getAliasSizeFromPtr = GetAliasSizeFromPtr;

extern "CoreServices" fn GetAliasUserTypeFromPtr(alias: ?*AliasRecord) callconv(.C) objc.OSType;
pub const getAliasUserTypeFromPtr = GetAliasUserTypeFromPtr;

extern "CoreServices" fn SetAliasUserTypeWithPtr(alias: AliasPtr, userType: objc.OSType) callconv(.C) void;
pub const setAliasUserTypeWithPtr = SetAliasUserTypeWithPtr;

pub const OpaqueLocaleRef = extern struct {};

pub const LocaleRef = ?*OpaqueLocaleRef;

pub const LocalePartMask = objc.UInt32;

pub const LocaleOperationClass = objc.FourCharCode;

pub const LocaleOperationVariant = objc.FourCharCode;

pub const LocaleAndVariant = extern struct {
    locale: LocaleRef,
    opVariant: LocaleOperationVariant,
};

pub const LocaleNameMask = objc.UInt32;

pub const anon691 = enum(u32) {
    fVNumber = 0,
};

extern "CoreServices" fn LocaleRefFromLangOrRegionCode(lang: objc.LangCode, region: objc.RegionCode, locale: ?*LocaleRef) callconv(.C) objc.OSStatus;
pub const localeRefFromLangOrRegionCode = LocaleRefFromLangOrRegionCode;

extern "CoreServices" fn LocaleRefFromLocaleString(localeString: *i8, locale: ?*LocaleRef) callconv(.C) objc.OSStatus;
pub const localeRefFromLocaleString = LocaleRefFromLocaleString;

extern "CoreServices" fn LocaleRefGetPartString(
    locale: LocaleRef,
    partMask: LocalePartMask,
    maxStringLen: objc.ByteCount,
    partString: *i8,
) callconv(.C) objc.OSStatus;
pub const localeRefGetPartString = LocaleRefGetPartString;

extern "CoreServices" fn LocaleStringToLangAndRegionCodes(localeString: *i8, lang: ?*objc.LangCode, region: ?*objc.RegionCode) callconv(.C) objc.OSStatus;
pub const localeStringToLangAndRegionCodes = LocaleStringToLangAndRegionCodes;

extern "CoreServices" fn LocaleOperationCountLocales(opClass: LocaleOperationClass, localeCount: ?*objc.ItemCount) callconv(.C) objc.OSStatus;
pub const localeOperationCountLocales = LocaleOperationCountLocales;

extern "CoreServices" fn LocaleOperationGetLocales(
    opClass: LocaleOperationClass,
    maxLocaleCount: objc.ItemCount,
    actualLocaleCount: ?*objc.ItemCount,
    localeVariantList: *LocaleAndVariant,
) callconv(.C) objc.OSStatus;
pub const localeOperationGetLocales = LocaleOperationGetLocales;

extern "CoreServices" fn LocaleGetName(
    locale: LocaleRef,
    opVariant: LocaleOperationVariant,
    nameMask: LocaleNameMask,
    displayLocale: LocaleRef,
    maxNameLen: objc.UniCharCount,
    actualNameLen: ?*objc.UniCharCount,
    displayName: *objc.UniChar,
) callconv(.C) objc.OSStatus;
pub const localeGetName = LocaleGetName;

extern "CoreServices" fn LocaleCountNames(
    locale: LocaleRef,
    opVariant: LocaleOperationVariant,
    nameMask: LocaleNameMask,
    nameCount: ?*objc.ItemCount,
) callconv(.C) objc.OSStatus;
pub const localeCountNames = LocaleCountNames;

extern "CoreServices" fn LocaleGetIndName(
    locale: LocaleRef,
    opVariant: LocaleOperationVariant,
    nameMask: LocaleNameMask,
    nameIndex: objc.ItemCount,
    maxNameLen: objc.UniCharCount,
    actualNameLen: ?*objc.UniCharCount,
    displayName: *objc.UniChar,
    displayLocale: ?*LocaleRef,
) callconv(.C) objc.OSStatus;
pub const localeGetIndName = LocaleGetIndName;

extern "CoreServices" fn LocaleOperationGetName(
    opClass: LocaleOperationClass,
    displayLocale: LocaleRef,
    maxNameLen: objc.UniCharCount,
    actualNameLen: ?*objc.UniCharCount,
    displayName: *objc.UniChar,
) callconv(.C) objc.OSStatus;
pub const localeOperationGetName = LocaleOperationGetName;

extern "CoreServices" fn LocaleOperationCountNames(opClass: LocaleOperationClass, nameCount: ?*objc.ItemCount) callconv(.C) objc.OSStatus;
pub const localeOperationCountNames = LocaleOperationCountNames;

extern "CoreServices" fn LocaleOperationGetIndName(
    opClass: LocaleOperationClass,
    nameIndex: objc.ItemCount,
    maxNameLen: objc.UniCharCount,
    actualNameLen: ?*objc.UniCharCount,
    displayName: *objc.UniChar,
    displayLocale: ?*LocaleRef,
) callconv(.C) objc.OSStatus;
pub const localeOperationGetIndName = LocaleOperationGetIndName;

extern "CoreServices" fn DebugAssert(
    componentSignature: objc.OSType,
    options: objc.UInt32,
    assertionString: ?*i8,
    exceptionLabelString: ?*i8,
    errorString: ?*i8,
    fileName: ?*i8,
    lineNumber: i64,
    value: ?*anyopaque,
) callconv(.C) void;
pub const debugAssert = DebugAssert;

extern "CoreServices" fn TaskLevel() callconv(.C) objc.UInt32;
pub const taskLevel = TaskLevel;

pub const anon4041 = enum(u32) {
    kComponentDebugOption = 0,
};

pub const anon4081 = enum(u32) {
    kGetDebugOption = 1,
    kSetDebugOption = 2,
};

pub const DebugComponentCallbackProcPtr = ?*const fn (objc.SInt32, objc.UInt32, ?*objc.Boolean) callconv(.C) void;

pub const DebugComponentCallbackUPP = DebugComponentCallbackProcPtr;

extern "CoreServices" fn NewDebugComponent(componentSignature: objc.OSType, componentName: objc.ConstStr255Param, componentCallback: DebugComponentCallbackUPP) callconv(.C) objc.OSStatus;
pub const newDebugComponent = NewDebugComponent;

extern "CoreServices" fn NewDebugOption(componentSignature: objc.OSType, optionSelectorNum: objc.SInt32, optionName: objc.ConstStr255Param) callconv(.C) objc.OSStatus;
pub const newDebugOption = NewDebugOption;

extern "CoreServices" fn DisposeDebugComponent(componentSignature: objc.OSType) callconv(.C) objc.OSStatus;
pub const disposeDebugComponent = DisposeDebugComponent;

extern "CoreServices" fn GetDebugComponentInfo(itemIndex: objc.UInt32, componentSignature: ?*objc.OSType, componentName: objc.Str255) callconv(.C) objc.OSStatus;
pub const getDebugComponentInfo = GetDebugComponentInfo;

extern "CoreServices" fn GetDebugOptionInfo(
    itemIndex: objc.UInt32,
    componentSignature: objc.OSType,
    optionSelectorNum: ?*objc.SInt32,
    optionName: objc.Str255,
    optionSetting: ?*objc.Boolean,
) callconv(.C) objc.OSStatus;
pub const getDebugOptionInfo = GetDebugOptionInfo;

extern "CoreServices" fn SetDebugOptionValue(componentSignature: objc.OSType, optionSelectorNum: objc.SInt32, newOptionSetting: objc.Boolean) callconv(.C) objc.OSStatus;
pub const setDebugOptionValue = SetDebugOptionValue;

pub const DebugAssertOutputHandlerProcPtr = ?*const fn (
    objc.OSType,
    objc.UInt32,
    ?*i8,
    ?*i8,
    ?*i8,
    ?*i8,
    i64,
    ?*anyopaque,
    objc.ConstStr255Param,
) callconv(.C) void;

pub const DebugAssertOutputHandlerUPP = DebugAssertOutputHandlerProcPtr;

extern "CoreServices" fn InstallDebugAssertOutputHandler(handler: DebugAssertOutputHandlerUPP) callconv(.C) void;
pub const installDebugAssertOutputHandler = InstallDebugAssertOutputHandler;

extern "CoreServices" fn GetMacOSStatusErrorString(err: objc.OSStatus) callconv(.C) ?*i8;
pub const getMacOSStatusErrorString = GetMacOSStatusErrorString;

extern "CoreServices" fn GetMacOSStatusCommentString(err: objc.OSStatus) callconv(.C) ?*i8;
pub const getMacOSStatusCommentString = GetMacOSStatusCommentString;

extern "CoreServices" fn NewDebugComponentCallbackUPP(userRoutine: DebugComponentCallbackProcPtr) callconv(.C) DebugComponentCallbackUPP;
pub const newDebugComponentCallbackUPP = NewDebugComponentCallbackUPP;

extern "CoreServices" fn NewDebugAssertOutputHandlerUPP(userRoutine: DebugAssertOutputHandlerProcPtr) callconv(.C) DebugAssertOutputHandlerUPP;
pub const newDebugAssertOutputHandlerUPP = NewDebugAssertOutputHandlerUPP;

extern "CoreServices" fn DisposeDebugComponentCallbackUPP(userUPP: DebugComponentCallbackUPP) callconv(.C) void;
pub const disposeDebugComponentCallbackUPP = DisposeDebugComponentCallbackUPP;

extern "CoreServices" fn DisposeDebugAssertOutputHandlerUPP(userUPP: DebugAssertOutputHandlerUPP) callconv(.C) void;
pub const disposeDebugAssertOutputHandlerUPP = DisposeDebugAssertOutputHandlerUPP;

extern "CoreServices" fn InvokeDebugComponentCallbackUPP(
    optionSelectorNum: objc.SInt32,
    command: objc.UInt32,
    optionSetting: ?*objc.Boolean,
    userUPP: DebugComponentCallbackUPP,
) callconv(.C) void;
pub const invokeDebugComponentCallbackUPP = InvokeDebugComponentCallbackUPP;

extern "CoreServices" fn InvokeDebugAssertOutputHandlerUPP(
    componentSignature: objc.OSType,
    options: objc.UInt32,
    assertionString: ?*i8,
    exceptionLabelString: ?*i8,
    errorString: ?*i8,
    fileName: ?*i8,
    lineNumber: i64,
    value: ?*anyopaque,
    outputMsg: objc.ConstStr255Param,
    userUPP: DebugAssertOutputHandlerUPP,
) callconv(.C) void;
pub const invokeDebugAssertOutputHandlerUPP = InvokeDebugAssertOutputHandlerUPP;

extern "CoreServices" fn PLstrcmp(str1: objc.ConstStr255Param, str2: objc.ConstStr255Param) callconv(.C) i16;
pub const pLstrcmp = PLstrcmp;

extern "CoreServices" fn PLstrncmp(str1: objc.ConstStr255Param, str2: objc.ConstStr255Param, num: i16) callconv(.C) i16;
pub const pLstrncmp = PLstrncmp;

extern "CoreServices" fn PLstrcpy(dest: objc.StringPtr, source: objc.ConstStr255Param) callconv(.C) objc.StringPtr;
pub const pLstrcpy = PLstrcpy;

extern "CoreServices" fn PLstrncpy(dest: objc.StringPtr, source: objc.ConstStr255Param, num: i16) callconv(.C) objc.StringPtr;
pub const pLstrncpy = PLstrncpy;

extern "CoreServices" fn PLstrcat(str: objc.StringPtr, append: objc.ConstStr255Param) callconv(.C) objc.StringPtr;
pub const pLstrcat = PLstrcat;

extern "CoreServices" fn PLstrncat(str1: objc.StringPtr, append: objc.ConstStr255Param, num: i16) callconv(.C) objc.StringPtr;
pub const pLstrncat = PLstrncat;

extern "CoreServices" fn PLstrchr(str1: objc.ConstStr255Param, ch1: i16) callconv(.C) objc.Ptr;
pub const pLstrchr = PLstrchr;

extern "CoreServices" fn PLstrrchr(str1: objc.ConstStr255Param, ch1: i16) callconv(.C) objc.Ptr;
pub const pLstrrchr = PLstrrchr;

extern "CoreServices" fn PLstrpbrk(str1: objc.ConstStr255Param, charSet: objc.ConstStr255Param) callconv(.C) objc.Ptr;
pub const pLstrpbrk = PLstrpbrk;

extern "CoreServices" fn PLstrspn(str1: objc.ConstStr255Param, charSet: objc.ConstStr255Param) callconv(.C) i16;
pub const pLstrspn = PLstrspn;

extern "CoreServices" fn PLstrstr(str1: objc.ConstStr255Param, searchStr: objc.ConstStr255Param) callconv(.C) objc.Ptr;
pub const pLstrstr = PLstrstr;

extern "CoreServices" fn PLstrlen(str: objc.ConstStr255Param) callconv(.C) i16;
pub const pLstrlen = PLstrlen;

extern "CoreServices" fn PLpos(str1: objc.ConstStr255Param, searchStr: objc.ConstStr255Param) callconv(.C) i16;
pub const pLpos = PLpos;

extern "CoreServices" fn CompareAndSwap(oldValue: objc.UInt32, newValue: objc.UInt32, address: ?*objc.UInt32) callconv(.C) objc.Boolean;
pub const compareAndSwap = CompareAndSwap;

extern "CoreServices" fn TestAndClear(bit: objc.UInt32, address: ?*objc.UInt8) callconv(.C) objc.Boolean;
pub const testAndClear = TestAndClear;

extern "CoreServices" fn TestAndSet(bit: objc.UInt32, address: ?*objc.UInt8) callconv(.C) objc.Boolean;
pub const testAndSet = TestAndSet;

extern "CoreServices" fn IncrementAtomic8(address: ?*objc.SInt8) callconv(.C) objc.SInt8;
pub const incrementAtomic8 = IncrementAtomic8;

extern "CoreServices" fn DecrementAtomic8(address: ?*objc.SInt8) callconv(.C) objc.SInt8;
pub const decrementAtomic8 = DecrementAtomic8;

extern "CoreServices" fn AddAtomic8(amount: objc.SInt32, address: ?*objc.SInt8) callconv(.C) objc.SInt8;
pub const addAtomic8 = AddAtomic8;

extern "CoreServices" fn BitAndAtomic8(mask: objc.UInt32, address: ?*objc.UInt8) callconv(.C) objc.UInt8;
pub const bitAndAtomic8 = BitAndAtomic8;

extern "CoreServices" fn BitOrAtomic8(mask: objc.UInt32, address: ?*objc.UInt8) callconv(.C) objc.UInt8;
pub const bitOrAtomic8 = BitOrAtomic8;

extern "CoreServices" fn BitXorAtomic8(mask: objc.UInt32, address: ?*objc.UInt8) callconv(.C) objc.UInt8;
pub const bitXorAtomic8 = BitXorAtomic8;

extern "CoreServices" fn IncrementAtomic16(address: ?*objc.SInt16) callconv(.C) objc.SInt16;
pub const incrementAtomic16 = IncrementAtomic16;

extern "CoreServices" fn DecrementAtomic16(address: ?*objc.SInt16) callconv(.C) objc.SInt16;
pub const decrementAtomic16 = DecrementAtomic16;

extern "CoreServices" fn AddAtomic16(amount: objc.SInt32, address: ?*objc.SInt16) callconv(.C) objc.SInt16;
pub const addAtomic16 = AddAtomic16;

extern "CoreServices" fn BitAndAtomic16(mask: objc.UInt32, address: ?*objc.UInt16) callconv(.C) objc.UInt16;
pub const bitAndAtomic16 = BitAndAtomic16;

extern "CoreServices" fn BitOrAtomic16(mask: objc.UInt32, address: ?*objc.UInt16) callconv(.C) objc.UInt16;
pub const bitOrAtomic16 = BitOrAtomic16;

extern "CoreServices" fn BitXorAtomic16(mask: objc.UInt32, address: ?*objc.UInt16) callconv(.C) objc.UInt16;
pub const bitXorAtomic16 = BitXorAtomic16;

extern "CoreServices" fn IncrementAtomic(address: ?*objc.SInt32) callconv(.C) objc.SInt32;
pub const incrementAtomic = IncrementAtomic;

extern "CoreServices" fn DecrementAtomic(address: ?*objc.SInt32) callconv(.C) objc.SInt32;
pub const decrementAtomic = DecrementAtomic;

extern "CoreServices" fn AddAtomic(amount: objc.SInt32, address: ?*objc.SInt32) callconv(.C) objc.SInt32;
pub const addAtomic = AddAtomic;

extern "CoreServices" fn BitAndAtomic(mask: objc.UInt32, address: ?*objc.UInt32) callconv(.C) objc.UInt32;
pub const bitAndAtomic = BitAndAtomic;

extern "CoreServices" fn BitOrAtomic(mask: objc.UInt32, address: ?*objc.UInt32) callconv(.C) objc.UInt32;
pub const bitOrAtomic = BitOrAtomic;

extern "CoreServices" fn BitXorAtomic(mask: objc.UInt32, address: ?*objc.UInt32) callconv(.C) objc.UInt32;
pub const bitXorAtomic = BitXorAtomic;

pub const OpaqueAreaID = extern struct {};

pub const AreaID = ?*OpaqueAreaID;

pub const MachineInformationPowerPC = extern struct {
    CTR: objc.UnsignedWide,
    LR: objc.UnsignedWide,
    PC: objc.UnsignedWide,
    CRRegister: u64,
    XER: u64,
    MSR: u64,
    MQ: u64,
    ExceptKind: u64,
    DSISR: u64,
    DAR: objc.UnsignedWide,
    Reserved: objc.UnsignedWide,
};

pub const RegisterInformationPowerPC = extern struct {
    R0: objc.UnsignedWide,
    R1: objc.UnsignedWide,
    R2: objc.UnsignedWide,
    R3: objc.UnsignedWide,
    R4: objc.UnsignedWide,
    R5: objc.UnsignedWide,
    R6: objc.UnsignedWide,
    R7: objc.UnsignedWide,
    R8: objc.UnsignedWide,
    R9: objc.UnsignedWide,
    R10: objc.UnsignedWide,
    R11: objc.UnsignedWide,
    R12: objc.UnsignedWide,
    R13: objc.UnsignedWide,
    R14: objc.UnsignedWide,
    R15: objc.UnsignedWide,
    R16: objc.UnsignedWide,
    R17: objc.UnsignedWide,
    R18: objc.UnsignedWide,
    R19: objc.UnsignedWide,
    R20: objc.UnsignedWide,
    R21: objc.UnsignedWide,
    R22: objc.UnsignedWide,
    R23: objc.UnsignedWide,
    R24: objc.UnsignedWide,
    R25: objc.UnsignedWide,
    R26: objc.UnsignedWide,
    R27: objc.UnsignedWide,
    R28: objc.UnsignedWide,
    R29: objc.UnsignedWide,
    R30: objc.UnsignedWide,
    R31: objc.UnsignedWide,
};

pub const FPUInformationPowerPC = extern struct {
    Registers: [32]objc.UnsignedWide,
    FPSCR: u64,
    Reserved: u64,
};

pub const Vector128 = extern union {
    l: [4]u64,
    s: [8]u16,
    c: [16]u8,
};

pub const VectorInformationPowerPC = extern struct {
    Registers: [32]Vector128,
    VSCR: Vector128,
    VRsave: objc.UInt32,
};

pub const MemoryReferenceKind = u64;

pub const MemoryExceptionInformation = extern struct {
    theArea: AreaID,
    theAddress: objc.LogicalAddress,
    theError: objc.OSStatus,
    theReference: MemoryReferenceKind,
};

pub const anon1411 = enum(u32) {
    kUnknownException = 0,
    kIllegalInstructionException = 1,
    kTrapException = 2,
    kAccessException = 3,
    kUnmappedMemoryException = 4,
    kExcludedMemoryException = 5,
    kReadOnlyMemoryException = 6,
    kUnresolvablePageFaultException = 7,
    kPrivilegeViolationException = 8,
    kTraceException = 9,
    kInstructionBreakpointException = 10,
    kDataBreakpointException = 11,
    kIntegerException = 12,
    kFloatingPointException = 13,
    kStackOverflowException = 14,
    kTaskTerminationException = 15,
    kTaskCreationException = 16,
    kDataAlignmentException = 17,
};

pub const ExceptionKind = u64;

pub const ExceptionInfo = extern union {
    memoryInfo: ?*MemoryExceptionInformation,
};

pub const ExceptionInformationPowerPC = extern struct {
    theKind: ExceptionKind,
    machineState: ?*MachineInformationPowerPC,
    registerImage: ?*RegisterInformationPowerPC,
    FPUImage: ?*FPUInformationPowerPC,
    info: ExceptionInfo,
    vectorImage: ?*VectorInformationPowerPC,
};

pub const MachineInformation = extern struct {
    __unusedMachineInformationField: ?*anyopaque,
};

pub const RegisterInformation = extern struct {
    __unusedRegisterInformationField: ?*anyopaque,
};

pub const FPUInformation = extern struct {
    __unusedFPUInformationField: ?*anyopaque,
};

pub const VectorInformation = extern struct {
    __unusedVectorInformationField: ?*anyopaque,
};

pub const ExceptionInformation = extern struct {
    theKind: ExceptionKind,
    machineState: ?*MachineInformation,
    registerImage: ?*RegisterInformation,
    FPUImage: ?*FPUInformation,
    info: ExceptionInfo,
    vectorImage: ?*VectorInformation,
};

pub const ExceptionHandlerProcPtr = ?*const fn (?*ExceptionInformation) callconv(.C) objc.OSStatus;

pub const ExceptionHandlerUPP = ExceptionHandlerProcPtr;

extern "CoreServices" fn NewExceptionHandlerUPP(userRoutine: ExceptionHandlerProcPtr) callconv(.C) ExceptionHandlerUPP;
pub const newExceptionHandlerUPP = NewExceptionHandlerUPP;

extern "CoreServices" fn DisposeExceptionHandlerUPP(userUPP: ExceptionHandlerUPP) callconv(.C) void;
pub const disposeExceptionHandlerUPP = DisposeExceptionHandlerUPP;

extern "CoreServices" fn InvokeExceptionHandlerUPP(theException: ?*ExceptionInformation, userUPP: ExceptionHandlerUPP) callconv(.C) objc.OSStatus;
pub const invokeExceptionHandlerUPP = InvokeExceptionHandlerUPP;

pub const ExceptionHandlerTPP = ExceptionHandlerUPP;

pub const ExceptionHandler = ExceptionHandlerTPP;

extern "CoreServices" fn InstallExceptionHandler(theHandler: ExceptionHandlerTPP) callconv(.C) ExceptionHandlerTPP;
pub const installExceptionHandler = InstallExceptionHandler;

pub const Nanoseconds = objc.UnsignedWide;

extern "CoreServices" fn UpTime() callconv(.C) objc.AbsoluteTime;
pub const upTime = UpTime;

extern "CoreServices" fn AbsoluteToNanoseconds(absoluteTime: objc.AbsoluteTime) callconv(.C) Nanoseconds;
pub const absoluteToNanoseconds = AbsoluteToNanoseconds;

extern "CoreServices" fn AbsoluteToDuration(absoluteTime: objc.AbsoluteTime) callconv(.C) objc.Duration;
pub const absoluteToDuration = AbsoluteToDuration;

extern "CoreServices" fn NanosecondsToAbsolute(nanoseconds: Nanoseconds) callconv(.C) objc.AbsoluteTime;
pub const nanosecondsToAbsolute = NanosecondsToAbsolute;

extern "CoreServices" fn DurationToAbsolute(duration: objc.Duration) callconv(.C) objc.AbsoluteTime;
pub const durationToAbsolute = DurationToAbsolute;

extern "CoreServices" fn AddAbsoluteToAbsolute(absoluteTime1: objc.AbsoluteTime, absoluteTime2: objc.AbsoluteTime) callconv(.C) objc.AbsoluteTime;
pub const addAbsoluteToAbsolute = AddAbsoluteToAbsolute;

extern "CoreServices" fn SubAbsoluteFromAbsolute(leftAbsoluteTime: objc.AbsoluteTime, rightAbsoluteTime: objc.AbsoluteTime) callconv(.C) objc.AbsoluteTime;
pub const subAbsoluteFromAbsolute = SubAbsoluteFromAbsolute;

extern "CoreServices" fn AddNanosecondsToAbsolute(nanoseconds: Nanoseconds, absoluteTime: objc.AbsoluteTime) callconv(.C) objc.AbsoluteTime;
pub const addNanosecondsToAbsolute = AddNanosecondsToAbsolute;

extern "CoreServices" fn AddDurationToAbsolute(duration: objc.Duration, absoluteTime: objc.AbsoluteTime) callconv(.C) objc.AbsoluteTime;
pub const addDurationToAbsolute = AddDurationToAbsolute;

extern "CoreServices" fn SubNanosecondsFromAbsolute(nanoseconds: Nanoseconds, absoluteTime: objc.AbsoluteTime) callconv(.C) objc.AbsoluteTime;
pub const subNanosecondsFromAbsolute = SubNanosecondsFromAbsolute;

extern "CoreServices" fn SubDurationFromAbsolute(duration: objc.Duration, absoluteTime: objc.AbsoluteTime) callconv(.C) objc.AbsoluteTime;
pub const subDurationFromAbsolute = SubDurationFromAbsolute;

extern "CoreServices" fn AbsoluteDeltaToNanoseconds(leftAbsoluteTime: objc.AbsoluteTime, rightAbsoluteTime: objc.AbsoluteTime) callconv(.C) Nanoseconds;
pub const absoluteDeltaToNanoseconds = AbsoluteDeltaToNanoseconds;

extern "CoreServices" fn AbsoluteDeltaToDuration(leftAbsoluteTime: objc.AbsoluteTime, rightAbsoluteTime: objc.AbsoluteTime) callconv(.C) objc.Duration;
pub const absoluteDeltaToDuration = AbsoluteDeltaToDuration;

extern "CoreServices" fn DurationToNanoseconds(theDuration: objc.Duration) callconv(.C) Nanoseconds;
pub const durationToNanoseconds = DurationToNanoseconds;

extern "CoreServices" fn NanosecondsToDuration(theNanoseconds: Nanoseconds) callconv(.C) objc.Duration;
pub const nanosecondsToDuration = NanosecondsToDuration;

pub const NumFormatString = extern struct {
    fLength: objc.UInt8,
    fVersion: objc.UInt8,
    data: [254]i8,
};

pub const NumFormatStringRec = NumFormatString;

pub const FormatStatus = i16;

pub const FormatClass = objc.SInt8;

pub const FormatResultType = objc.SInt8;

pub const FVector = extern struct {
    start: i16,
    length: i16,
};

pub const TripleInt = [3]FVector;

extern "CoreServices" fn numtostring(theNum: i64, theString: ?*i8) callconv(.C) void;
pub const numtostring = numtostring;

extern "CoreServices" fn Munger(
    h: objc.Handle,
    offset: i64,
    ptr1: ?*anyopaque,
    len1: i64,
    ptr2: ?*anyopaque,
    len2: i64,
) callconv(.C) i64;
pub const munger = Munger;

extern "CoreServices" fn BitTst(bytePtr: ?*anyopaque, bitNum: i64) callconv(.C) objc.Boolean;
pub const bitTst = BitTst;

extern "CoreServices" fn BitSet(bytePtr: ?*anyopaque, bitNum: i64) callconv(.C) void;
pub const bitSet = BitSet;

extern "CoreServices" fn BitClr(bytePtr: ?*anyopaque, bitNum: i64) callconv(.C) void;
pub const bitClr = BitClr;

extern "CoreServices" fn BitAnd(value1: i64, value2: i64) callconv(.C) i64;
pub const bitAnd = BitAnd;

extern "CoreServices" fn BitOr(value1: i64, value2: i64) callconv(.C) i64;
pub const bitOr = BitOr;

extern "CoreServices" fn BitXor(value1: i64, value2: i64) callconv(.C) i64;
pub const bitXor = BitXor;

extern "CoreServices" fn BitNot(value: i64) callconv(.C) i64;
pub const bitNot = BitNot;

extern "CoreServices" fn BitShift(value: i64, count: i16) callconv(.C) i64;
pub const bitShift = BitShift;

pub const UCKeyOutput = objc.UInt16;

pub const UCKeyCharSeq = objc.UInt16;

pub const UCKeyStateRecord = extern struct {
    stateZeroCharData: UCKeyCharSeq,
    stateZeroNextState: objc.UInt16,
    stateEntryCount: objc.UInt16,
    stateEntryFormat: objc.UInt16,
    stateEntryData: [1]objc.UInt32,
};

pub const UCKeyStateEntryTerminal = extern struct {
    curState: objc.UInt16,
    charData: UCKeyCharSeq,
};

pub const UCKeyStateEntryRange = extern struct {
    curStateStart: objc.UInt16,
    curStateRange: objc.UInt8,
    deltaMultiplier: objc.UInt8,
    charData: UCKeyCharSeq,
    nextState: objc.UInt16,
};

pub const UCKeyboardTypeHeader = extern struct {
    keyboardTypeFirst: objc.UInt32,
    keyboardTypeLast: objc.UInt32,
    keyModifiersToTableNumOffset: objc.UInt32,
    keyToCharTableIndexOffset: objc.UInt32,
    keyStateRecordsIndexOffset: objc.UInt32,
    keyStateTerminatorsOffset: objc.UInt32,
    keySequenceDataIndexOffset: objc.UInt32,
};

pub const UCKeyboardLayout = extern struct {
    keyLayoutHeaderFormat: objc.UInt16,
    keyLayoutDataVersion: objc.UInt16,
    keyLayoutFeatureInfoOffset: objc.UInt32,
    keyboardTypeCount: objc.UInt32,
    keyboardTypeList: [1]UCKeyboardTypeHeader,
};

pub const UCKeyLayoutFeatureInfo = extern struct {
    keyLayoutFeatureInfoFormat: objc.UInt16,
    reserved: objc.UInt16,
    maxOutputStringLength: objc.UInt32,
};

pub const UCKeyModifiersToTableNum = extern struct {
    keyModifiersToTableNumFormat: objc.UInt16,
    defaultTableNum: objc.UInt16,
    modifiersCount: objc.UInt32,
    tableNum: [1]objc.UInt8,
};

pub const UCKeyToCharTableIndex = extern struct {
    keyToCharTableIndexFormat: objc.UInt16,
    keyToCharTableSize: objc.UInt16,
    keyToCharTableCount: objc.UInt32,
    keyToCharTableOffsets: [1]objc.UInt32,
};

pub const UCKeyStateRecordsIndex = extern struct {
    keyStateRecordsIndexFormat: objc.UInt16,
    keyStateRecordCount: objc.UInt16,
    keyStateRecordOffsets: [1]objc.UInt32,
};

pub const UCKeyStateTerminators = extern struct {
    keyStateTerminatorsFormat: objc.UInt16,
    keyStateTerminatorCount: objc.UInt16,
    keyStateTerminators: [1]UCKeyCharSeq,
};

pub const UCKeySequenceDataIndex = extern struct {
    keySequenceDataIndexFormat: objc.UInt16,
    charSequenceCount: objc.UInt16,
    charSequenceOffsets: [1]objc.UInt16,
};

pub const anon2421 = enum(u32) {
    kUCKeyLayoutHeaderFormat = 4098,
    kUCKeyLayoutFeatureInfoFormat = 8193,
    kUCKeyModifiersToTableNumFormat = 12289,
    kUCKeyToCharTableIndexFormat = 16385,
    kUCKeyStateRecordsIndexFormat = 20481,
    kUCKeyStateTerminatorsFormat = 24577,
    kUCKeySequenceDataIndexFormat = 28673,
};

pub const anon2591 = enum(u32) {
    kUCKeyActionDown = 0,
    kUCKeyActionUp = 1,
    kUCKeyActionAutoKey = 2,
    kUCKeyActionDisplay = 3,
};

pub const anon2721 = enum(u32) {
    kUCKeyTranslateNoDeadKeysBit = 0,
};

pub const anon2761 = enum(u32) {
    kUCKeyTranslateNoDeadKeysMask = 1,
};

pub const anon2871 = enum(u32) {
    kUnicodeCollationClass = 1969450860,
};

pub const OpaqueCollatorRef = extern struct {};

pub const CollatorRef = ?*OpaqueCollatorRef;

pub const UCCollateOptions = objc.UInt32;

pub const anon3041 = enum(u32) {
    kMPQueueInfoVersion = 262145,
    kMPSemaphoreInfoVersion = 327681,
    kMPEventInfoVersion = 589825,
    kMPCriticalRegionInfoVersion = 393217,
    kMPNotificationInfoVersion = 786433,
    kMPAddressSpaceInfoVersion = 524289,
};

pub const anon3121 = enum(u32) {
    kUCCollateTypeHFSExtended = 1,
};

pub const anon3221 = enum(u32) {
    kUCCollateTypeMask = -16777216,
};

pub const UCCollationValue = objc.UInt32;

pub const OpaqueUCTypeSelectRef = extern struct {};

pub const UCTypeSelectRef = ?*OpaqueUCTypeSelectRef;

pub const UCTypeSelectCompareResult = objc.SInt32;

pub const UCTSWalkDirection = objc.UInt16;

pub const UCTypeSelectOptions = objc.UInt16;

pub const anon3721 = enum(u32) {
    kFSEventStreamEventFlagNone = 0,
    kFSEventStreamEventFlagMustScanSubDirs = 1,
    kFSEventStreamEventFlagUserDropped = 2,
    kFSEventStreamEventFlagKernelDropped = 4,
    kFSEventStreamEventFlagEventIdsWrapped = 8,
    kFSEventStreamEventFlagHistoryDone = 16,
    kFSEventStreamEventFlagRootChanged = 32,
    kFSEventStreamEventFlagMount = 64,
    kFSEventStreamEventFlagUnmount = 128,
    kFSEventStreamEventFlagItemCreated = 256,
    kFSEventStreamEventFlagItemRemoved = 512,
    kFSEventStreamEventFlagItemInodeMetaMod = 1024,
    kFSEventStreamEventFlagItemRenamed = 2048,
    kFSEventStreamEventFlagItemModified = 4096,
    kFSEventStreamEventFlagItemFinderInfoMod = 8192,
    kFSEventStreamEventFlagItemChangeOwner = 16384,
    kFSEventStreamEventFlagItemXattrMod = 32768,
    kFSEventStreamEventFlagItemIsFile = 65536,
    kFSEventStreamEventFlagItemIsDir = 131072,
    kFSEventStreamEventFlagItemIsSymlink = 262144,
    kFSEventStreamEventFlagOwnEvent = 524288,
    kFSEventStreamEventFlagItemIsHardlink = 1048576,
    kFSEventStreamEventFlagItemIsLastHardlink = 2097152,
    kFSEventStreamEventFlagItemCloned = 4194304,
};

pub const IndexToUCStringProcPtr = ?*const fn (
    objc.UInt32,
    ?*anyopaque,
    ?*anyopaque,
    ?*core_foundation.StringRef,
    ?*UCTypeSelectOptions,
) callconv(.C) objc.Boolean;

pub const IndexToUCStringUPP = IndexToUCStringProcPtr;

extern "CoreServices" fn NewIndexToUCStringUPP(userRoutine: IndexToUCStringProcPtr) callconv(.C) IndexToUCStringUPP;
pub const newIndexToUCStringUPP = NewIndexToUCStringUPP;

extern "CoreServices" fn DisposeIndexToUCStringUPP(userUPP: IndexToUCStringUPP) callconv(.C) void;
pub const disposeIndexToUCStringUPP = DisposeIndexToUCStringUPP;

extern "CoreServices" fn InvokeIndexToUCStringUPP(
    index: objc.UInt32,
    listDataPtr: ?*anyopaque,
    refcon: ?*anyopaque,
    outString: ?*core_foundation.StringRef,
    tsOptions: ?*UCTypeSelectOptions,
    userUPP: IndexToUCStringUPP,
) callconv(.C) objc.Boolean;
pub const invokeIndexToUCStringUPP = InvokeIndexToUCStringUPP;

pub const anon4541 = enum(u32) {
    kUnicodeTextBreakClass = 1969386091,
};

pub const OpaqueTextBreakLocatorRef = extern struct {};

pub const TextBreakLocatorRef = ?*OpaqueTextBreakLocatorRef;

pub const UCTextBreakType = objc.UInt32;

pub const UCTextBreakOptions = objc.UInt32;

pub const anon5041 = enum(objc.OSType) {
    pTextStyles = 1954050932,
    pTransferMode = 1886418029,
    pTranslation = 1886679667,
    pUniformStyles = 1970500716,
    pUpdateOn = 1886744676,
    pUserSelection = 1886745452,
    pVersion = 1986359923,
    pVisible = 1886808435,
};

extern "CoreServices" fn UCKeyTranslate(
    keyLayoutPtr: ?*UCKeyboardLayout,
    virtualKeyCode: objc.UInt16,
    keyAction: objc.UInt16,
    modifierKeyState: objc.UInt32,
    keyboardType: objc.UInt32,
    keyTranslateOptions: objc.OptionBits,
    deadKeyState: ?*objc.UInt32,
    maxStringLength: objc.UniCharCount,
    actualStringLength: ?*objc.UniCharCount,
    unicodeString: *objc.UniChar,
) callconv(.C) objc.OSStatus;
pub const ucKeyTranslate = UCKeyTranslate;

extern "CoreServices" fn UCCreateCollator(
    locale: LocaleRef,
    opVariant: LocaleOperationVariant,
    options: UCCollateOptions,
    collatorRef: ?*CollatorRef,
) callconv(.C) objc.OSStatus;
pub const ucCreateCollator = UCCreateCollator;

extern "CoreServices" fn UCGetCollationKey(
    collatorRef: CollatorRef,
    textPtr: ?*objc.UniChar,
    textLength: objc.UniCharCount,
    maxKeySize: objc.ItemCount,
    actualKeySize: ?*objc.ItemCount,
    collationKey: *UCCollationValue,
) callconv(.C) objc.OSStatus;
pub const ucGetCollationKey = UCGetCollationKey;

extern "CoreServices" fn UCCompareCollationKeys(
    key1Ptr: ?*UCCollationValue,
    key1Length: objc.ItemCount,
    key2Ptr: ?*UCCollationValue,
    key2Length: objc.ItemCount,
    equivalent: ?*objc.Boolean,
    order: ?*objc.SInt32,
) callconv(.C) objc.OSStatus;
pub const ucCompareCollationKeys = UCCompareCollationKeys;

extern "CoreServices" fn UCCompareText(
    collatorRef: CollatorRef,
    text1Ptr: ?*objc.UniChar,
    text1Length: objc.UniCharCount,
    text2Ptr: ?*objc.UniChar,
    text2Length: objc.UniCharCount,
    equivalent: ?*objc.Boolean,
    order: ?*objc.SInt32,
) callconv(.C) objc.OSStatus;
pub const ucCompareText = UCCompareText;

extern "CoreServices" fn UCDisposeCollator(collatorRef: ?*CollatorRef) callconv(.C) objc.OSStatus;
pub const ucDisposeCollator = UCDisposeCollator;

extern "CoreServices" fn UCCompareTextDefault(
    options: UCCollateOptions,
    text1Ptr: ?*objc.UniChar,
    text1Length: objc.UniCharCount,
    text2Ptr: ?*objc.UniChar,
    text2Length: objc.UniCharCount,
    equivalent: ?*objc.Boolean,
    order: ?*objc.SInt32,
) callconv(.C) objc.OSStatus;
pub const ucCompareTextDefault = UCCompareTextDefault;

extern "CoreServices" fn UCCompareTextNoLocale(
    options: UCCollateOptions,
    text1Ptr: ?*objc.UniChar,
    text1Length: objc.UniCharCount,
    text2Ptr: ?*objc.UniChar,
    text2Length: objc.UniCharCount,
    equivalent: ?*objc.Boolean,
    order: ?*objc.SInt32,
) callconv(.C) objc.OSStatus;
pub const ucCompareTextNoLocale = UCCompareTextNoLocale;

extern "CoreServices" fn UCCreateTextBreakLocator(
    locale: LocaleRef,
    opVariant: LocaleOperationVariant,
    breakTypes: UCTextBreakType,
    breakRef: ?*TextBreakLocatorRef,
) callconv(.C) objc.OSStatus;
pub const ucCreateTextBreakLocator = UCCreateTextBreakLocator;

extern "CoreServices" fn UCFindTextBreak(
    breakRef: TextBreakLocatorRef,
    breakType: UCTextBreakType,
    options: UCTextBreakOptions,
    textPtr: ?*objc.UniChar,
    textLength: objc.UniCharCount,
    startOffset: UniCharArrayOffset,
    breakOffset: ?*UniCharArrayOffset,
) callconv(.C) objc.OSStatus;
pub const ucFindTextBreak = UCFindTextBreak;

extern "CoreServices" fn UCDisposeTextBreakLocator(breakRef: ?*TextBreakLocatorRef) callconv(.C) objc.OSStatus;
pub const ucDisposeTextBreakLocator = UCDisposeTextBreakLocator;

extern "CoreServices" fn UCTypeSelectCreateSelector(
    locale: LocaleRef,
    opVariant: LocaleOperationVariant,
    options: UCCollateOptions,
    newSelector: ?*UCTypeSelectRef,
) callconv(.C) objc.OSStatus;
pub const ucTypeSelectCreateSelector = UCTypeSelectCreateSelector;

extern "CoreServices" fn UCTypeSelectFlushSelectorData(ref: UCTypeSelectRef) callconv(.C) objc.OSStatus;
pub const ucTypeSelectFlushSelectorData = UCTypeSelectFlushSelectorData;

extern "CoreServices" fn UCTypeSelectReleaseSelector(ref: ?*UCTypeSelectRef) callconv(.C) objc.OSStatus;
pub const ucTypeSelectReleaseSelector = UCTypeSelectReleaseSelector;

extern "CoreServices" fn UCTypeSelectWouldResetBuffer(inRef: UCTypeSelectRef, inText: core_foundation.StringRef, inEventTime: f64) callconv(.C) objc.Boolean;
pub const ucTypeSelectWouldResetBuffer = UCTypeSelectWouldResetBuffer;

extern "CoreServices" fn UCTypeSelectAddKeyToSelector(
    inRef: UCTypeSelectRef,
    inText: core_foundation.StringRef,
    inEventTime: f64,
    updateFlag: ?*objc.Boolean,
) callconv(.C) objc.OSStatus;
pub const ucTypeSelectAddKeyToSelector = UCTypeSelectAddKeyToSelector;

extern "CoreServices" fn UCTypeSelectCompare(ref: UCTypeSelectRef, inText: core_foundation.StringRef, result: ?*UCTypeSelectCompareResult) callconv(.C) objc.OSStatus;
pub const ucTypeSelectCompare = UCTypeSelectCompare;

extern "CoreServices" fn UCTypeSelectFindItem(
    ref: UCTypeSelectRef,
    listSize: objc.UInt32,
    listDataPtr: ?*anyopaque,
    refcon: ?*anyopaque,
    userUPP: IndexToUCStringUPP,
    closestItem: ?*objc.UInt32,
) callconv(.C) objc.OSStatus;
pub const ucTypeSelectFindItem = UCTypeSelectFindItem;

extern "CoreServices" fn UCTypeSelectWalkList(
    ref: UCTypeSelectRef,
    currSelect: core_foundation.StringRef,
    direction: UCTSWalkDirection,
    listSize: objc.UInt32,
    listDataPtr: ?*anyopaque,
    refcon: ?*anyopaque,
    userUPP: IndexToUCStringUPP,
    closestItem: ?*objc.UInt32,
) callconv(.C) objc.OSStatus;
pub const ucTypeSelectWalkList = UCTypeSelectWalkList;

extern "CoreServices" fn compound(rate: f64, periods: f64) callconv(.C) f64;
pub const compound = compound;

extern "CoreServices" fn annuity(rate: f64, periods: f64) callconv(.C) f64;
pub const annuity = annuity;

extern "CoreServices" fn randomx(x: ?*objc.double_t) callconv(.C) objc.double_t;
pub const randomx = randomx;

pub const relop = i16;

pub const anon12621 = enum(u32) {
    GREATERTHAN = 0,
    LESSTHAN = 1,
    EQUALTO = 2,
    UNORDERED = 3,
};

extern "CoreServices" fn relation(x: objc.double_t, y: objc.double_t) callconv(.C) relop;
pub const relation = relation;

pub const decimal = extern struct {
    sgn: i8,
    unused: i8,
    exp: i16,
    sig: anon13205,
};

pub const anon13205 = extern struct {
    length: u8,
    text: [36]u8,
    unused: u8,
};

pub const decform = extern struct {
    style: i8,
    unused: i8,
    digits: i16,
};

extern "CoreServices" fn num2dec(f: ?*decform, x: objc.double_t, d: ?*decimal) callconv(.C) void;
pub const num2dec = num2dec;

extern "CoreServices" fn dec2num(d: ?*decimal) callconv(.C) objc.double_t;
pub const dec2num = dec2num;

extern "CoreServices" fn dec2str(f: ?*decform, d: ?*decimal, s: ?*i8) callconv(.C) void;
pub const dec2str = dec2str;

extern "CoreServices" fn str2dec(
    s: ?*i8,
    ix: ?*i16,
    d: ?*decimal,
    vp: ?*i16,
) callconv(.C) void;
pub const str2dec = str2dec;

extern "CoreServices" fn dec2f(d: ?*decimal) callconv(.C) f32;
pub const dec2f = dec2f;

extern "CoreServices" fn dec2s(d: ?*decimal) callconv(.C) i16;
pub const dec2s = dec2s;

extern "CoreServices" fn dec2l(d: ?*decimal) callconv(.C) i64;
pub const dec2l = dec2l;

extern "CoreServices" fn relationl(x: f64, y: f64) callconv(.C) relop;
pub const relationl = relationl;

extern "CoreServices" fn num2decl(f: ?*decform, x: f64, d: ?*decimal) callconv(.C) void;
pub const num2decl = num2decl;

extern "CoreServices" fn dec2numl(d: ?*decimal) callconv(.C) f64;
pub const dec2numl = dec2numl;

extern "CoreServices" fn x80tod(x80: ?*objc.extended80) callconv(.C) f64;
pub const x80tod = x80tod;

extern "CoreServices" fn dtox80(x: ?*f64, x80: ?*objc.extended80) callconv(.C) void;
pub const dtox80 = dtox80;

extern "CoreServices" fn x80told(x80: ?*objc.extended80, x: ?*f64) callconv(.C) void;
pub const x80told = x80told;

extern "CoreServices" fn ldtox80(x: ?*f64, x80: ?*objc.extended80) callconv(.C) void;
pub const ldtox80 = ldtox80;

pub const TECPluginSignature = objc.OSType;

pub const TECPluginVersion = objc.UInt32;

pub const OpaqueTECObjectRef = extern struct {};

pub const TECObjectRef = ?*OpaqueTECObjectRef;

pub const OpaqueTECSnifferObjectRef = extern struct {};

pub const TECSnifferObjectRef = ?*OpaqueTECSnifferObjectRef;

pub const TECPluginSig = objc.OSType;

pub const TECConversionInfo = extern struct {
    sourceEncoding: TextEncoding,
    destinationEncoding: TextEncoding,
    reserved1: objc.UInt16,
    reserved2: objc.UInt16,
};

pub const TECInternetNameUsageMask = objc.UInt32;

pub const anon1111 = enum(u32) {
    kCertificateKCItemClass = 1667592820,
    kAppleSharePasswordKCItemClass = 1634953328,
    kInternetPasswordKCItemClass = 1768842612,
    kGenericPasswordKCItemClass = 1734700656,
};

extern "CoreServices" fn TECCountAvailableTextEncodings(numberEncodings: ?*objc.ItemCount) callconv(.C) objc.OSStatus;
pub const tecCountAvailableTextEncodings = TECCountAvailableTextEncodings;

extern "CoreServices" fn TECGetAvailableTextEncodings(availableEncodings: *TextEncoding, maxAvailableEncodings: objc.ItemCount, actualAvailableEncodings: ?*objc.ItemCount) callconv(.C) objc.OSStatus;
pub const tecGetAvailableTextEncodings = TECGetAvailableTextEncodings;

extern "CoreServices" fn TECCountDirectTextEncodingConversions(numberOfEncodings: ?*objc.ItemCount) callconv(.C) objc.OSStatus;
pub const tecCountDirectTextEncodingConversions = TECCountDirectTextEncodingConversions;

extern "CoreServices" fn TECGetDirectTextEncodingConversions(availableConversions: *TECConversionInfo, maxAvailableConversions: objc.ItemCount, actualAvailableConversions: ?*objc.ItemCount) callconv(.C) objc.OSStatus;
pub const tecGetDirectTextEncodingConversions = TECGetDirectTextEncodingConversions;

extern "CoreServices" fn TECCountDestinationTextEncodings(inputEncoding: TextEncoding, numberOfEncodings: ?*objc.ItemCount) callconv(.C) objc.OSStatus;
pub const tecCountDestinationTextEncodings = TECCountDestinationTextEncodings;

extern "CoreServices" fn TECGetDestinationTextEncodings(
    inputEncoding: TextEncoding,
    destinationEncodings: *TextEncoding,
    maxDestinationEncodings: objc.ItemCount,
    actualDestinationEncodings: ?*objc.ItemCount,
) callconv(.C) objc.OSStatus;
pub const tecGetDestinationTextEncodings = TECGetDestinationTextEncodings;

extern "CoreServices" fn TECGetTextEncodingInternetName(textEncoding: TextEncoding, encodingName: objc.Str255) callconv(.C) objc.OSStatus;
pub const tecGetTextEncodingInternetName = TECGetTextEncodingInternetName;

extern "CoreServices" fn TECGetTextEncodingFromInternetName(textEncoding: ?*TextEncoding, encodingName: objc.ConstStr255Param) callconv(.C) objc.OSStatus;
pub const tecGetTextEncodingFromInternetName = TECGetTextEncodingFromInternetName;

extern "CoreServices" fn TECCreateConverter(newEncodingConverter: ?*TECObjectRef, inputEncoding: TextEncoding, outputEncoding: TextEncoding) callconv(.C) objc.OSStatus;
pub const tecCreateConverter = TECCreateConverter;

extern "CoreServices" fn TECCreateConverterFromPath(newEncodingConverter: ?*TECObjectRef, inPath: *TextEncoding, inEncodings: objc.ItemCount) callconv(.C) objc.OSStatus;
pub const tecCreateConverterFromPath = TECCreateConverterFromPath;

extern "CoreServices" fn TECDisposeConverter(newEncodingConverter: TECObjectRef) callconv(.C) objc.OSStatus;
pub const tecDisposeConverter = TECDisposeConverter;

extern "CoreServices" fn TECClearConverterContextInfo(encodingConverter: TECObjectRef) callconv(.C) objc.OSStatus;
pub const tecClearConverterContextInfo = TECClearConverterContextInfo;

extern "CoreServices" fn TECConvertText(
    encodingConverter: TECObjectRef,
    inputBuffer: ConstTextPtr,
    inputBufferLength: objc.ByteCount,
    actualInputLength: ?*objc.ByteCount,
    outputBuffer: TextPtr,
    outputBufferLength: objc.ByteCount,
    actualOutputLength: ?*objc.ByteCount,
) callconv(.C) objc.OSStatus;
pub const tecConvertText = TECConvertText;

extern "CoreServices" fn TECFlushText(
    encodingConverter: TECObjectRef,
    outputBuffer: TextPtr,
    outputBufferLength: objc.ByteCount,
    actualOutputLength: ?*objc.ByteCount,
) callconv(.C) objc.OSStatus;
pub const tecFlushText = TECFlushText;

extern "CoreServices" fn TECCountSubTextEncodings(inputEncoding: TextEncoding, numberOfEncodings: ?*objc.ItemCount) callconv(.C) objc.OSStatus;
pub const tecCountSubTextEncodings = TECCountSubTextEncodings;

extern "CoreServices" fn TECGetSubTextEncodings(
    inputEncoding: TextEncoding,
    subEncodings: *TextEncoding,
    maxSubEncodings: objc.ItemCount,
    actualSubEncodings: ?*objc.ItemCount,
) callconv(.C) objc.OSStatus;
pub const tecGetSubTextEncodings = TECGetSubTextEncodings;

extern "CoreServices" fn TECGetEncodingList(encodingConverter: TECObjectRef, numEncodings: ?*objc.ItemCount, encodingList: ?*objc.Handle) callconv(.C) objc.OSStatus;
pub const tecGetEncodingList = TECGetEncodingList;

extern "CoreServices" fn TECCreateOneToManyConverter(
    newEncodingConverter: ?*TECObjectRef,
    inputEncoding: TextEncoding,
    numOutputEncodings: objc.ItemCount,
    outputEncodings: *TextEncoding,
) callconv(.C) objc.OSStatus;
pub const tecCreateOneToManyConverter = TECCreateOneToManyConverter;

extern "CoreServices" fn TECConvertTextToMultipleEncodings(
    encodingConverter: TECObjectRef,
    inputBuffer: ConstTextPtr,
    inputBufferLength: objc.ByteCount,
    actualInputLength: ?*objc.ByteCount,
    outputBuffer: TextPtr,
    outputBufferLength: objc.ByteCount,
    actualOutputLength: ?*objc.ByteCount,
    outEncodingsBuffer: *TextEncodingRun,
    maxOutEncodingRuns: objc.ItemCount,
    actualOutEncodingRuns: ?*objc.ItemCount,
) callconv(.C) objc.OSStatus;
pub const tecConvertTextToMultipleEncodings = TECConvertTextToMultipleEncodings;

extern "CoreServices" fn TECFlushMultipleEncodings(
    encodingConverter: TECObjectRef,
    outputBuffer: TextPtr,
    outputBufferLength: objc.ByteCount,
    actualOutputLength: ?*objc.ByteCount,
    outEncodingsBuffer: *TextEncodingRun,
    maxOutEncodingRuns: objc.ItemCount,
    actualOutEncodingRuns: ?*objc.ItemCount,
) callconv(.C) objc.OSStatus;
pub const tecFlushMultipleEncodings = TECFlushMultipleEncodings;

extern "CoreServices" fn TECCountWebTextEncodings(locale: objc.RegionCode, numberEncodings: ?*objc.ItemCount) callconv(.C) objc.OSStatus;
pub const tecCountWebTextEncodings = TECCountWebTextEncodings;

extern "CoreServices" fn TECGetWebTextEncodings(
    locale: objc.RegionCode,
    availableEncodings: *TextEncoding,
    maxAvailableEncodings: objc.ItemCount,
    actualAvailableEncodings: ?*objc.ItemCount,
) callconv(.C) objc.OSStatus;
pub const tecGetWebTextEncodings = TECGetWebTextEncodings;

extern "CoreServices" fn TECCountMailTextEncodings(locale: objc.RegionCode, numberEncodings: ?*objc.ItemCount) callconv(.C) objc.OSStatus;
pub const tecCountMailTextEncodings = TECCountMailTextEncodings;

extern "CoreServices" fn TECGetMailTextEncodings(
    locale: objc.RegionCode,
    availableEncodings: *TextEncoding,
    maxAvailableEncodings: objc.ItemCount,
    actualAvailableEncodings: ?*objc.ItemCount,
) callconv(.C) objc.OSStatus;
pub const tecGetMailTextEncodings = TECGetMailTextEncodings;

extern "CoreServices" fn TECCountAvailableSniffers(numberOfEncodings: ?*objc.ItemCount) callconv(.C) objc.OSStatus;
pub const tecCountAvailableSniffers = TECCountAvailableSniffers;

extern "CoreServices" fn TECGetAvailableSniffers(availableSniffers: *TextEncoding, maxAvailableSniffers: objc.ItemCount, actualAvailableSniffers: ?*objc.ItemCount) callconv(.C) objc.OSStatus;
pub const tecGetAvailableSniffers = TECGetAvailableSniffers;

extern "CoreServices" fn TECCreateSniffer(encodingSniffer: ?*TECSnifferObjectRef, testEncodings: *TextEncoding, numTextEncodings: objc.ItemCount) callconv(.C) objc.OSStatus;
pub const tecCreateSniffer = TECCreateSniffer;

extern "CoreServices" fn TECSniffTextEncoding(
    encodingSniffer: TECSnifferObjectRef,
    inputBuffer: ConstTextPtr,
    inputBufferLength: objc.ByteCount,
    testEncodings: *TextEncoding,
    numTextEncodings: objc.ItemCount,
    numErrsArray: *objc.ItemCount,
    maxErrs: objc.ItemCount,
    numFeaturesArray: *objc.ItemCount,
    maxFeatures: objc.ItemCount,
) callconv(.C) objc.OSStatus;
pub const tecSniffTextEncoding = TECSniffTextEncoding;

extern "CoreServices" fn TECDisposeSniffer(encodingSniffer: TECSnifferObjectRef) callconv(.C) objc.OSStatus;
pub const tecDisposeSniffer = TECDisposeSniffer;

extern "CoreServices" fn TECClearSnifferContextInfo(encodingSniffer: TECSnifferObjectRef) callconv(.C) objc.OSStatus;
pub const tecClearSnifferContextInfo = TECClearSnifferContextInfo;

extern "CoreServices" fn TECSetBasicOptions(encodingConverter: TECObjectRef, controlFlags: objc.OptionBits) callconv(.C) objc.OSStatus;
pub const tecSetBasicOptions = TECSetBasicOptions;

extern "CoreServices" fn TECCopyTextEncodingInternetNameAndMIB(
    textEncoding: TextEncoding,
    usage: TECInternetNameUsageMask,
    encodingNamePtr: ?*core_foundation.StringRef,
    mibEnumPtr: ?*objc.SInt32,
) callconv(.C) objc.OSStatus;
pub const tecCopyTextEncodingInternetNameAndMIB = TECCopyTextEncodingInternetNameAndMIB;

extern "CoreServices" fn TECGetTextEncodingFromInternetNameOrMIB(
    textEncodingPtr: ?*TextEncoding,
    usage: TECInternetNameUsageMask,
    encodingName: core_foundation.StringRef,
    mibEnum: objc.SInt32,
) callconv(.C) objc.OSStatus;
pub const tecGetTextEncodingFromInternetNameOrMIB = TECGetTextEncodingFromInternetNameOrMIB;

pub const OpaqueTextToUnicodeInfo = extern struct {};

pub const TextToUnicodeInfo = ?*OpaqueTextToUnicodeInfo;

pub const OpaqueUnicodeToTextInfo = extern struct {};

pub const UnicodeToTextInfo = ?*OpaqueUnicodeToTextInfo;

pub const OpaqueUnicodeToTextRunInfo = extern struct {};

pub const UnicodeToTextRunInfo = ?*OpaqueUnicodeToTextRunInfo;

pub const ConstTextToUnicodeInfo = TextToUnicodeInfo;

pub const ConstUnicodeToTextInfo = UnicodeToTextInfo;

pub const UnicodeMapVersion = objc.SInt32;

pub const UnicodeMapping = extern struct {
    unicodeEncoding: TextEncoding,
    otherEncoding: TextEncoding,
    mappingVersion: UnicodeMapVersion,
};

pub const UnicodeMappingPtr = ?*UnicodeMapping;

pub const ConstUnicodeMappingPtr = ?*UnicodeMapping;

pub const anon1091 = enum(u32) {
    kUnicodeDefaultDirection = 0,
    kUnicodeLeftToRight = 1,
    kUnicodeRightToLeft = 2,
};

pub const anon1531 = enum(u32) {
    kUnicodeMatchUnicodeBaseMask = 1,
    kUnicodeMatchUnicodeVariantMask = 2,
    kUnicodeMatchUnicodeFormatMask = 4,
    kUnicodeMatchOtherBaseMask = 8,
    kUnicodeMatchOtherVariantMask = 16,
    kUnicodeMatchOtherFormatMask = 32,
};

pub const anon1731 = enum(u32) {
    kUnicodeFallbackDefaultOnly = 0,
    kUnicodeFallbackCustomOnly = 1,
    kUnicodeFallbackDefaultFirst = 2,
    kUnicodeFallbackCustomFirst = 3,
};

pub const UnicodeToTextFallbackProcPtr = ?*const fn (
    ?*objc.UniChar,
    objc.ByteCount,
    ?*objc.ByteCount,
    TextPtr,
    objc.ByteCount,
    ?*objc.ByteCount,
    objc.LogicalAddress,
    ConstUnicodeMappingPtr,
) callconv(.C) objc.OSStatus;

pub const UnicodeToTextFallbackUPP = UnicodeToTextFallbackProcPtr;

extern "CoreServices" fn NewUnicodeToTextFallbackUPP(userRoutine: UnicodeToTextFallbackProcPtr) callconv(.C) UnicodeToTextFallbackUPP;
pub const newUnicodeToTextFallbackUPP = NewUnicodeToTextFallbackUPP;

extern "CoreServices" fn DisposeUnicodeToTextFallbackUPP(userUPP: UnicodeToTextFallbackUPP) callconv(.C) void;
pub const disposeUnicodeToTextFallbackUPP = DisposeUnicodeToTextFallbackUPP;

extern "CoreServices" fn InvokeUnicodeToTextFallbackUPP(
    iSrcUniStr: ?*objc.UniChar,
    iSrcUniStrLen: objc.ByteCount,
    oSrcConvLen: ?*objc.ByteCount,
    oDestStr: TextPtr,
    iDestStrLen: objc.ByteCount,
    oDestConvLen: ?*objc.ByteCount,
    iInfoPtr: objc.LogicalAddress,
    iUnicodeMappingPtr: ConstUnicodeMappingPtr,
    userUPP: UnicodeToTextFallbackUPP,
) callconv(.C) objc.OSStatus;
pub const invokeUnicodeToTextFallbackUPP = InvokeUnicodeToTextFallbackUPP;

extern "CoreServices" fn CreateTextToUnicodeInfo(iUnicodeMapping: ConstUnicodeMappingPtr, oTextToUnicodeInfo: ?*TextToUnicodeInfo) callconv(.C) objc.OSStatus;
pub const createTextToUnicodeInfo = CreateTextToUnicodeInfo;

extern "CoreServices" fn CreateTextToUnicodeInfoByEncoding(iEncoding: TextEncoding, oTextToUnicodeInfo: ?*TextToUnicodeInfo) callconv(.C) objc.OSStatus;
pub const createTextToUnicodeInfoByEncoding = CreateTextToUnicodeInfoByEncoding;

extern "CoreServices" fn CreateUnicodeToTextInfo(iUnicodeMapping: ConstUnicodeMappingPtr, oUnicodeToTextInfo: ?*UnicodeToTextInfo) callconv(.C) objc.OSStatus;
pub const createUnicodeToTextInfo = CreateUnicodeToTextInfo;

extern "CoreServices" fn CreateUnicodeToTextInfoByEncoding(iEncoding: TextEncoding, oUnicodeToTextInfo: ?*UnicodeToTextInfo) callconv(.C) objc.OSStatus;
pub const createUnicodeToTextInfoByEncoding = CreateUnicodeToTextInfoByEncoding;

extern "CoreServices" fn CreateUnicodeToTextRunInfo(iNumberOfMappings: objc.ItemCount, iUnicodeMappings: *UnicodeMapping, oUnicodeToTextInfo: ?*UnicodeToTextRunInfo) callconv(.C) objc.OSStatus;
pub const createUnicodeToTextRunInfo = CreateUnicodeToTextRunInfo;

extern "CoreServices" fn CreateUnicodeToTextRunInfoByEncoding(iNumberOfEncodings: objc.ItemCount, iEncodings: *TextEncoding, oUnicodeToTextInfo: ?*UnicodeToTextRunInfo) callconv(.C) objc.OSStatus;
pub const createUnicodeToTextRunInfoByEncoding = CreateUnicodeToTextRunInfoByEncoding;

extern "CoreServices" fn CreateUnicodeToTextRunInfoByScriptCode(iNumberOfScriptCodes: objc.ItemCount, iScripts: *objc.ScriptCode, oUnicodeToTextInfo: ?*UnicodeToTextRunInfo) callconv(.C) objc.OSStatus;
pub const createUnicodeToTextRunInfoByScriptCode = CreateUnicodeToTextRunInfoByScriptCode;

extern "CoreServices" fn ChangeTextToUnicodeInfo(ioTextToUnicodeInfo: TextToUnicodeInfo, iUnicodeMapping: ConstUnicodeMappingPtr) callconv(.C) objc.OSStatus;
pub const changeTextToUnicodeInfo = ChangeTextToUnicodeInfo;

extern "CoreServices" fn ChangeUnicodeToTextInfo(ioUnicodeToTextInfo: UnicodeToTextInfo, iUnicodeMapping: ConstUnicodeMappingPtr) callconv(.C) objc.OSStatus;
pub const changeUnicodeToTextInfo = ChangeUnicodeToTextInfo;

extern "CoreServices" fn DisposeTextToUnicodeInfo(ioTextToUnicodeInfo: ?*TextToUnicodeInfo) callconv(.C) objc.OSStatus;
pub const disposeTextToUnicodeInfo = DisposeTextToUnicodeInfo;

extern "CoreServices" fn DisposeUnicodeToTextInfo(ioUnicodeToTextInfo: ?*UnicodeToTextInfo) callconv(.C) objc.OSStatus;
pub const disposeUnicodeToTextInfo = DisposeUnicodeToTextInfo;

extern "CoreServices" fn DisposeUnicodeToTextRunInfo(ioUnicodeToTextRunInfo: ?*UnicodeToTextRunInfo) callconv(.C) objc.OSStatus;
pub const disposeUnicodeToTextRunInfo = DisposeUnicodeToTextRunInfo;

extern "CoreServices" fn ConvertFromTextToUnicode(
    iTextToUnicodeInfo: TextToUnicodeInfo,
    iSourceLen: objc.ByteCount,
    iSourceStr: objc.ConstLogicalAddress,
    iControlFlags: objc.OptionBits,
    iOffsetCount: objc.ItemCount,
    iOffsetArray: *objc.ByteOffset,
    oOffsetCount: ?*objc.ItemCount,
    oOffsetArray: *objc.ByteOffset,
    iOutputBufLen: objc.ByteCount,
    oSourceRead: ?*objc.ByteCount,
    oUnicodeLen: ?*objc.ByteCount,
    oUnicodeStr: *objc.UniChar,
) callconv(.C) objc.OSStatus;
pub const convertFromTextToUnicode = ConvertFromTextToUnicode;

extern "CoreServices" fn ConvertFromUnicodeToText(
    iUnicodeToTextInfo: UnicodeToTextInfo,
    iUnicodeLen: objc.ByteCount,
    iUnicodeStr: *objc.UniChar,
    iControlFlags: objc.OptionBits,
    iOffsetCount: objc.ItemCount,
    iOffsetArray: *objc.ByteOffset,
    oOffsetCount: ?*objc.ItemCount,
    oOffsetArray: *objc.ByteOffset,
    iOutputBufLen: objc.ByteCount,
    oInputRead: ?*objc.ByteCount,
    oOutputLen: ?*objc.ByteCount,
    oOutputStr: objc.LogicalAddress,
) callconv(.C) objc.OSStatus;
pub const convertFromUnicodeToText = ConvertFromUnicodeToText;

extern "CoreServices" fn ConvertFromUnicodeToTextRun(
    iUnicodeToTextInfo: UnicodeToTextRunInfo,
    iUnicodeLen: objc.ByteCount,
    iUnicodeStr: *objc.UniChar,
    iControlFlags: objc.OptionBits,
    iOffsetCount: objc.ItemCount,
    iOffsetArray: *objc.ByteOffset,
    oOffsetCount: ?*objc.ItemCount,
    oOffsetArray: *objc.ByteOffset,
    iOutputBufLen: objc.ByteCount,
    oInputRead: ?*objc.ByteCount,
    oOutputLen: ?*objc.ByteCount,
    oOutputStr: objc.LogicalAddress,
    iEncodingRunBufLen: objc.ItemCount,
    oEncodingRunOutLen: ?*objc.ItemCount,
    oEncodingRuns: *TextEncodingRun,
) callconv(.C) objc.OSStatus;
pub const convertFromUnicodeToTextRun = ConvertFromUnicodeToTextRun;

extern "CoreServices" fn ConvertFromUnicodeToScriptCodeRun(
    iUnicodeToTextInfo: UnicodeToTextRunInfo,
    iUnicodeLen: objc.ByteCount,
    iUnicodeStr: *objc.UniChar,
    iControlFlags: objc.OptionBits,
    iOffsetCount: objc.ItemCount,
    iOffsetArray: *objc.ByteOffset,
    oOffsetCount: ?*objc.ItemCount,
    oOffsetArray: *objc.ByteOffset,
    iOutputBufLen: objc.ByteCount,
    oInputRead: ?*objc.ByteCount,
    oOutputLen: ?*objc.ByteCount,
    oOutputStr: objc.LogicalAddress,
    iScriptRunBufLen: objc.ItemCount,
    oScriptRunOutLen: ?*objc.ItemCount,
    oScriptCodeRuns: *ScriptCodeRun,
) callconv(.C) objc.OSStatus;
pub const convertFromUnicodeToScriptCodeRun = ConvertFromUnicodeToScriptCodeRun;

extern "CoreServices" fn TruncateForTextToUnicode(
    iTextToUnicodeInfo: ConstTextToUnicodeInfo,
    iSourceLen: objc.ByteCount,
    iSourceStr: objc.ConstLogicalAddress,
    iMaxLen: objc.ByteCount,
    oTruncatedLen: ?*objc.ByteCount,
) callconv(.C) objc.OSStatus;
pub const truncateForTextToUnicode = TruncateForTextToUnicode;

extern "CoreServices" fn TruncateForUnicodeToText(
    iUnicodeToTextInfo: ConstUnicodeToTextInfo,
    iSourceLen: objc.ByteCount,
    iSourceStr: *objc.UniChar,
    iControlFlags: objc.OptionBits,
    iMaxLen: objc.ByteCount,
    oTruncatedLen: ?*objc.ByteCount,
) callconv(.C) objc.OSStatus;
pub const truncateForUnicodeToText = TruncateForUnicodeToText;

extern "CoreServices" fn ConvertFromPStringToUnicode(
    iTextToUnicodeInfo: TextToUnicodeInfo,
    iPascalStr: objc.ConstStr255Param,
    iOutputBufLen: objc.ByteCount,
    oUnicodeLen: ?*objc.ByteCount,
    oUnicodeStr: *objc.UniChar,
) callconv(.C) objc.OSStatus;
pub const convertFromPStringToUnicode = ConvertFromPStringToUnicode;

extern "CoreServices" fn ConvertFromUnicodeToPString(
    iUnicodeToTextInfo: UnicodeToTextInfo,
    iUnicodeLen: objc.ByteCount,
    iUnicodeStr: *objc.UniChar,
    oPascalStr: objc.Str255,
) callconv(.C) objc.OSStatus;
pub const convertFromUnicodeToPString = ConvertFromUnicodeToPString;

extern "CoreServices" fn CountUnicodeMappings(iFilter: objc.OptionBits, iFindMapping: ConstUnicodeMappingPtr, oActualCount: ?*objc.ItemCount) callconv(.C) objc.OSStatus;
pub const countUnicodeMappings = CountUnicodeMappings;

extern "CoreServices" fn QueryUnicodeMappings(
    iFilter: objc.OptionBits,
    iFindMapping: ConstUnicodeMappingPtr,
    iMaxCount: objc.ItemCount,
    oActualCount: ?*objc.ItemCount,
    oReturnedMappings: *UnicodeMapping,
) callconv(.C) objc.OSStatus;
pub const queryUnicodeMappings = QueryUnicodeMappings;

extern "CoreServices" fn SetFallbackUnicodeToText(
    iUnicodeToTextInfo: UnicodeToTextInfo,
    iFallback: UnicodeToTextFallbackUPP,
    iControlFlags: objc.OptionBits,
    iInfoPtr: objc.LogicalAddress,
) callconv(.C) objc.OSStatus;
pub const setFallbackUnicodeToText = SetFallbackUnicodeToText;

extern "CoreServices" fn SetFallbackUnicodeToTextRun(
    iUnicodeToTextRunInfo: UnicodeToTextRunInfo,
    iFallback: UnicodeToTextFallbackUPP,
    iControlFlags: objc.OptionBits,
    iInfoPtr: objc.LogicalAddress,
) callconv(.C) objc.OSStatus;
pub const setFallbackUnicodeToTextRun = SetFallbackUnicodeToTextRun;

extern "CoreServices" fn ResetTextToUnicodeInfo(ioTextToUnicodeInfo: TextToUnicodeInfo) callconv(.C) objc.OSStatus;
pub const resetTextToUnicodeInfo = ResetTextToUnicodeInfo;

extern "CoreServices" fn ResetUnicodeToTextInfo(ioUnicodeToTextInfo: UnicodeToTextInfo) callconv(.C) objc.OSStatus;
pub const resetUnicodeToTextInfo = ResetUnicodeToTextInfo;

extern "CoreServices" fn ResetUnicodeToTextRunInfo(ioUnicodeToTextRunInfo: UnicodeToTextRunInfo) callconv(.C) objc.OSStatus;
pub const resetUnicodeToTextRunInfo = ResetUnicodeToTextRunInfo;

pub const ThreadState = objc.UInt16;

pub const ThreadTaskRef = ?*anyopaque;

pub const ThreadStyle = objc.UInt32;

pub const ThreadID = u64;

pub const ThreadOptions = objc.UInt32;

pub const SchedulerInfoRec = extern struct {
    InfoRecSize: objc.UInt32,
    CurrentThreadID: ThreadID,
    SuggestedThreadID: ThreadID,
    InterruptedCoopThreadID: ThreadID,
};

pub const SchedulerInfoRecPtr = ?*SchedulerInfoRec;

pub const voidPtr = ?*anyopaque;

pub const ThreadEntryProcPtr = ?*const fn (?*anyopaque) callconv(.C) voidPtr;

pub const ThreadSchedulerProcPtr = ?*const fn (SchedulerInfoRecPtr) callconv(.C) ThreadID;

pub const ThreadSwitchProcPtr = ?*const fn (ThreadID, ?*anyopaque) callconv(.C) void;

pub const ThreadTerminationProcPtr = ?*const fn (ThreadID, ?*anyopaque) callconv(.C) void;

pub const DebuggerNewThreadProcPtr = ?*const fn (ThreadID) callconv(.C) void;

pub const DebuggerDisposeThreadProcPtr = ?*const fn (ThreadID) callconv(.C) void;

pub const DebuggerThreadSchedulerProcPtr = ?*const fn (SchedulerInfoRecPtr) callconv(.C) ThreadID;

pub const ThreadEntryUPP = ThreadEntryProcPtr;

pub const ThreadSchedulerUPP = ThreadSchedulerProcPtr;

pub const ThreadSwitchUPP = ThreadSwitchProcPtr;

pub const ThreadTerminationUPP = ThreadTerminationProcPtr;

pub const DebuggerNewThreadUPP = DebuggerNewThreadProcPtr;

pub const DebuggerDisposeThreadUPP = DebuggerDisposeThreadProcPtr;

pub const DebuggerThreadSchedulerUPP = DebuggerThreadSchedulerProcPtr;

extern "CoreServices" fn NewThreadEntryUPP(userRoutine: ThreadEntryProcPtr) callconv(.C) ThreadEntryUPP;
pub const newThreadEntryUPP = NewThreadEntryUPP;

extern "CoreServices" fn NewThreadSchedulerUPP(userRoutine: ThreadSchedulerProcPtr) callconv(.C) ThreadSchedulerUPP;
pub const newThreadSchedulerUPP = NewThreadSchedulerUPP;

extern "CoreServices" fn NewThreadSwitchUPP(userRoutine: ThreadSwitchProcPtr) callconv(.C) ThreadSwitchUPP;
pub const newThreadSwitchUPP = NewThreadSwitchUPP;

extern "CoreServices" fn NewThreadTerminationUPP(userRoutine: ThreadTerminationProcPtr) callconv(.C) ThreadTerminationUPP;
pub const newThreadTerminationUPP = NewThreadTerminationUPP;

extern "CoreServices" fn NewDebuggerNewThreadUPP(userRoutine: DebuggerNewThreadProcPtr) callconv(.C) DebuggerNewThreadUPP;
pub const newDebuggerNewThreadUPP = NewDebuggerNewThreadUPP;

extern "CoreServices" fn NewDebuggerDisposeThreadUPP(userRoutine: DebuggerDisposeThreadProcPtr) callconv(.C) DebuggerDisposeThreadUPP;
pub const newDebuggerDisposeThreadUPP = NewDebuggerDisposeThreadUPP;

extern "CoreServices" fn NewDebuggerThreadSchedulerUPP(userRoutine: DebuggerThreadSchedulerProcPtr) callconv(.C) DebuggerThreadSchedulerUPP;
pub const newDebuggerThreadSchedulerUPP = NewDebuggerThreadSchedulerUPP;

extern "CoreServices" fn DisposeThreadEntryUPP(userUPP: ThreadEntryUPP) callconv(.C) void;
pub const disposeThreadEntryUPP = DisposeThreadEntryUPP;

extern "CoreServices" fn DisposeThreadSchedulerUPP(userUPP: ThreadSchedulerUPP) callconv(.C) void;
pub const disposeThreadSchedulerUPP = DisposeThreadSchedulerUPP;

extern "CoreServices" fn DisposeThreadSwitchUPP(userUPP: ThreadSwitchUPP) callconv(.C) void;
pub const disposeThreadSwitchUPP = DisposeThreadSwitchUPP;

extern "CoreServices" fn DisposeThreadTerminationUPP(userUPP: ThreadTerminationUPP) callconv(.C) void;
pub const disposeThreadTerminationUPP = DisposeThreadTerminationUPP;

extern "CoreServices" fn DisposeDebuggerNewThreadUPP(userUPP: DebuggerNewThreadUPP) callconv(.C) void;
pub const disposeDebuggerNewThreadUPP = DisposeDebuggerNewThreadUPP;

extern "CoreServices" fn DisposeDebuggerDisposeThreadUPP(userUPP: DebuggerDisposeThreadUPP) callconv(.C) void;
pub const disposeDebuggerDisposeThreadUPP = DisposeDebuggerDisposeThreadUPP;

extern "CoreServices" fn DisposeDebuggerThreadSchedulerUPP(userUPP: DebuggerThreadSchedulerUPP) callconv(.C) void;
pub const disposeDebuggerThreadSchedulerUPP = DisposeDebuggerThreadSchedulerUPP;

extern "CoreServices" fn InvokeThreadEntryUPP(threadParam: ?*anyopaque, userUPP: ThreadEntryUPP) callconv(.C) voidPtr;
pub const invokeThreadEntryUPP = InvokeThreadEntryUPP;

extern "CoreServices" fn InvokeThreadSchedulerUPP(schedulerInfo: SchedulerInfoRecPtr, userUPP: ThreadSchedulerUPP) callconv(.C) ThreadID;
pub const invokeThreadSchedulerUPP = InvokeThreadSchedulerUPP;

extern "CoreServices" fn InvokeThreadSwitchUPP(threadBeingSwitched: ThreadID, switchProcParam: ?*anyopaque, userUPP: ThreadSwitchUPP) callconv(.C) void;
pub const invokeThreadSwitchUPP = InvokeThreadSwitchUPP;

extern "CoreServices" fn InvokeThreadTerminationUPP(threadTerminated: ThreadID, terminationProcParam: ?*anyopaque, userUPP: ThreadTerminationUPP) callconv(.C) void;
pub const invokeThreadTerminationUPP = InvokeThreadTerminationUPP;

extern "CoreServices" fn InvokeDebuggerNewThreadUPP(threadCreated: ThreadID, userUPP: DebuggerNewThreadUPP) callconv(.C) void;
pub const invokeDebuggerNewThreadUPP = InvokeDebuggerNewThreadUPP;

extern "CoreServices" fn InvokeDebuggerDisposeThreadUPP(threadDeleted: ThreadID, userUPP: DebuggerDisposeThreadUPP) callconv(.C) void;
pub const invokeDebuggerDisposeThreadUPP = InvokeDebuggerDisposeThreadUPP;

extern "CoreServices" fn InvokeDebuggerThreadSchedulerUPP(schedulerInfo: SchedulerInfoRecPtr, userUPP: DebuggerThreadSchedulerUPP) callconv(.C) ThreadID;
pub const invokeDebuggerThreadSchedulerUPP = InvokeDebuggerThreadSchedulerUPP;

pub const ThreadEntryTPP = ThreadEntryUPP;

pub const ThreadSchedulerTPP = ThreadSchedulerUPP;

pub const ThreadSwitchTPP = ThreadSwitchUPP;

pub const ThreadTerminationTPP = ThreadTerminationUPP;

pub const DebuggerNewThreadTPP = DebuggerNewThreadUPP;

pub const DebuggerDisposeThreadTPP = DebuggerDisposeThreadUPP;

pub const DebuggerThreadSchedulerTPP = DebuggerThreadSchedulerUPP;

extern "CoreServices" fn NewThread(
    threadStyle: ThreadStyle,
    threadEntry: ThreadEntryTPP,
    threadParam: ?*anyopaque,
    stackSize: objc.Size,
    options: ThreadOptions,
    threadResult: ?*?*anyopaque,
    threadMade: ?*ThreadID,
) callconv(.C) objc.OSErr;
pub const newThread = NewThread;

extern "CoreServices" fn SetThreadScheduler(threadScheduler: ThreadSchedulerTPP) callconv(.C) objc.OSErr;
pub const setThreadScheduler = SetThreadScheduler;

extern "CoreServices" fn SetThreadSwitcher(
    thread: ThreadID,
    threadSwitcher: ThreadSwitchTPP,
    switchProcParam: ?*anyopaque,
    inOrOut: objc.Boolean,
) callconv(.C) objc.OSErr;
pub const setThreadSwitcher = SetThreadSwitcher;

extern "CoreServices" fn SetThreadTerminator(thread: ThreadID, threadTerminator: ThreadTerminationTPP, terminationProcParam: ?*anyopaque) callconv(.C) objc.OSErr;
pub const setThreadTerminator = SetThreadTerminator;

extern "CoreServices" fn SetDebuggerNotificationProcs(notifyNewThread: DebuggerNewThreadTPP, notifyDisposeThread: DebuggerDisposeThreadTPP, notifyThreadScheduler: DebuggerThreadSchedulerTPP) callconv(.C) objc.OSErr;
pub const setDebuggerNotificationProcs = SetDebuggerNotificationProcs;

extern "CoreServices" fn CreateThreadPool(threadStyle: ThreadStyle, numToCreate: objc.SInt16, stackSize: objc.Size) callconv(.C) objc.OSErr;
pub const createThreadPool = CreateThreadPool;

extern "CoreServices" fn GetDefaultThreadStackSize(threadStyle: ThreadStyle, stackSize: ?*objc.Size) callconv(.C) objc.OSErr;
pub const getDefaultThreadStackSize = GetDefaultThreadStackSize;

extern "CoreServices" fn ThreadCurrentStackSpace(thread: ThreadID, freeStack: ?*objc.ByteCount) callconv(.C) objc.OSErr;
pub const threadCurrentStackSpace = ThreadCurrentStackSpace;

extern "CoreServices" fn DisposeThread(threadToDump: ThreadID, threadResult: ?*anyopaque, recycleThread: objc.Boolean) callconv(.C) objc.OSErr;
pub const disposeThread = DisposeThread;

extern "CoreServices" fn YieldToThread(suggestedThread: ThreadID) callconv(.C) objc.OSErr;
pub const yieldToThread = YieldToThread;

extern "CoreServices" fn YieldToAnyThread() callconv(.C) objc.OSErr;
pub const yieldToAnyThread = YieldToAnyThread;

extern "CoreServices" fn GetCurrentThread(currentThreadID: ?*ThreadID) callconv(.C) objc.OSErr;
pub const getCurrentThread = GetCurrentThread;

extern "CoreServices" fn GetThreadState(threadToGet: ThreadID, threadState: ?*ThreadState) callconv(.C) objc.OSErr;
pub const getThreadState = GetThreadState;

extern "CoreServices" fn SetThreadState(threadToSet: ThreadID, newState: ThreadState, suggestedThread: ThreadID) callconv(.C) objc.OSErr;
pub const setThreadState = SetThreadState;

extern "CoreServices" fn SetThreadStateEndCritical(threadToSet: ThreadID, newState: ThreadState, suggestedThread: ThreadID) callconv(.C) objc.OSErr;
pub const setThreadStateEndCritical = SetThreadStateEndCritical;

extern "CoreServices" fn ThreadBeginCritical() callconv(.C) objc.OSErr;
pub const threadBeginCritical = ThreadBeginCritical;

extern "CoreServices" fn ThreadEndCritical() callconv(.C) objc.OSErr;
pub const threadEndCritical = ThreadEndCritical;

extern "CoreServices" fn GetThreadCurrentTaskRef(threadTRef: ?*ThreadTaskRef) callconv(.C) objc.OSErr;
pub const getThreadCurrentTaskRef = GetThreadCurrentTaskRef;

extern "CoreServices" fn GetThreadStateGivenTaskRef(threadTRef: ThreadTaskRef, threadToGet: ThreadID, threadState: ?*ThreadState) callconv(.C) objc.OSErr;
pub const getThreadStateGivenTaskRef = GetThreadStateGivenTaskRef;

extern "CoreServices" fn SetThreadReadyGivenTaskRef(threadTRef: ThreadTaskRef, threadToSet: ThreadID) callconv(.C) objc.OSErr;
pub const setThreadReadyGivenTaskRef = SetThreadReadyGivenTaskRef;

pub const anon831 = enum(u32) {
    kOSIZDontOpenResourceFile = 15,
    kOSIZdontAcceptRemoteEvents = 14,
    kOSIZOpenWithReadPermission = 13,
    kOSIZCodeInSharedLibraries = 11,
};

extern "CoreServices" fn FindFolder(
    vRefNum: FSVolumeRefNum,
    folderType: objc.OSType,
    createFolder: objc.Boolean,
    foundVRefNum: ?*FSVolumeRefNum,
    foundDirID: ?*objc.SInt32,
) callconv(.C) objc.OSErr;
pub const findFolder = FindFolder;

extern "CoreServices" fn ReleaseFolder(vRefNum: FSVolumeRefNum, folderType: objc.OSType) callconv(.C) objc.OSErr;
pub const releaseFolder = ReleaseFolder;

extern "CoreServices" fn FSFindFolder(
    vRefNum: FSVolumeRefNum,
    folderType: objc.OSType,
    createFolder: objc.Boolean,
    foundRef: ?*FSRef,
) callconv(.C) objc.OSErr;
pub const fsFindFolder = FSFindFolder;

pub const anon3021 = enum(u32) {
    kDesktopFolderType = 1684370283,
    kTrashFolderType = 1953657704,
    kWhereToEmptyTrashFolderType = 1701671028,
    kFontsFolderType = 1718578804,
    kPreferencesFolderType = 1886545254,
    kSystemPreferencesFolderType = 1936749158,
    kTemporaryFolderType = 1952804208,
    kChewableItemsFolderType = 1718382196,
    kTemporaryItemsInCacheDataFolderType = 1987341680,
    kApplicationsFolderType = 1634758771,
    kVolumeRootFolderType = 1919905652,
    kDomainTopLevelFolderType = 1685352304,
    kDomainLibraryFolderType = 1684826466,
    kUsersFolderType = 1970500211,
    kCurrentUserFolderType = 1668641650,
    kSharedUserDataFolderType = 1935958388,
};

pub const anon3511 = enum(AEKeyword) {
    keyAEKeyword = 1803122532,
    keyAELevel = 1818588780,
    keyAELineArrow = 1634890351,
    keyAEName = 1886282093,
    keyAENewElementLoc = 1886283116,
    keyAEObject = 1802461802,
    keyAEObjectClass = 1802462060,
    keyAEOffStyles = 1868985204,
    keyAEOnStyles = 1869509492,
    keyAEParameters = 1886547315,
    keyAEParamFlags = 1886217831,
    keyAEPenColor = 1886413676,
    keyAEPenPattern = 1886416993,
    keyAEPenWidth = 1886418788,
    keyAEPixelDepth = 1885630580,
    keyAEPixMapMinus = 1802530157,
    keyAEPMTable = 1802530164,
    keyAEPointList = 1886678132,
    keyAEPointSize = 1886679930,
    keyAEPosition = 1802530675,
};

pub const anon3551 = enum(u32) {
    kSharedLibrariesFolderType = -999528094,
    kVoicesFolderType = 1719037795,
    kUtilitiesFolderType = 1970563524,
    kThemesFolderType = 1953000805,
    kFavoritesFolderType = 1717663347,
    kInternetSearchSitesFolderType = 1769173862,
    kInstallerLogsFolderType = 1768712038,
    kScriptsFolderType = 1935897284,
    kFolderActionsFolderType = 1717662566,
    kSpeakableItemsFolderType = 1936747369,
    kKeychainFolderType = 1801676910,
};

pub const anon3711 = enum(u32) {
    kColorSyncFolderType = 1937337955,
    kColorSyncCMMFolderType = 1667460461,
    kColorSyncScriptingFolderType = 1668506482,
    kPrintersFolderType = 1768779890,
    kSpeechFolderType = 1936745320,
    kCarbonLibraryFolderType = 1667330658,
    kDocumentationFolderType = 1768842863,
    kISSDownloadsFolderType = 1769173860,
    kUserSpecificTmpFolderType = 1970564464,
    kCachedDataFolderType = 1667326824,
    kFrameworksFolderType = 1718772077,
    kPrivateFrameworksFolderType = 1885762157,
    kClassicDesktopFolderType = 1935962987,
    kSystemSoundsFolderType = 1936944740,
    kComponentsFolderType = 1668116580,
    kQuickTimeComponentsFolderType = 2003004784,
    kCoreServicesFolderType = 1668510326,
    kAudioSupportFolderType = 1633970543,
    kAudioPresetsFolderType = 1634759540,
    kAudioSoundsFolderType = 1634954852,
    kAudioSoundBanksFolderType = 1650552427,
    kAudioAlertSoundsFolderType = 1634497140,
    kAudioPlugInsFolderType = 1634757735,
    kAudioComponentsFolderType = 1633906032,
    kKernelExtensionsFolderType = 1801812084,
    kDirectoryServicesFolderType = 1685287542,
    kDirectoryServicesPlugInsFolderType = 1685089383,
    kInstallerReceiptsFolderType = 1919119476,
    kFileSystemSupportFolderType = 1718843763,
    kAppleShareSupportFolderType = 1936220530,
    kAppleShareAuthenticationFolderType = 1635087464,
    kMIDIDriversFolderType = 1835623529,
    kKeyboardLayoutsFolderType = 1802264953,
    kIndexFilesFolderType = 1768842360,
    kFindByContentIndexesFolderType = 1717724024,
    kManagedItemsFolderType = 1835101799,
    kBootTimeStartupItemsFolderType = 1701671034,
    kAutomatorWorkflowsFolderType = 1718382455,
    kAutosaveInformationFolderType = 1634951542,
    kSpotlightSavedSearchesFolderType = 1936748404,
    kSpotlightImportersFolderType = 1936289136,
    kSpotlightMetadataCacheFolderType = 1935893352,
    kInputManagersFolderType = 1768845428,
    kInputMethodsFolderType = 1768845414,
    kLibraryAssistantsFolderType = 1634956396,
    kAudioDigidesignFolderType = 1633970535,
    kAudioVSTFolderType = 1635152756,
    kColorPickersFolderType = 1668311922,
    kCompositionsFolderType = 1668116595,
    kFontCollectionsFolderType = 1718510444,
    kiMovieFolderType = 1768779638,
    kiMoviePlugInsFolderType = 1768779881,
    kiMovieSoundEffectsFolderType = 1768780645,
    kDownloadsFolderType = 1685026670,
};

pub const anon4291 = enum(u32) {
    kColorSyncProfilesFolderType = 1886547814,
    kApplicationSupportFolderType = 1634956656,
    kTextEncodingsFolderType = -999004808,
    kPrinterDescriptionFolderType = 1886413926,
    kPrinterDriverFolderType = -999263644,
    kScriptingAdditionsFolderType = -999070862,
};

pub const anon4381 = enum(u32) {
    kClassicPreferencesFolderType = 1668313702,
};

pub const anon4501 = enum(u32) {
    kSystemFolderType = 1835098995,
    kSystemDesktopFolderType = 1935962987,
    kSystemTrashFolderType = 1937011315,
    kPrintMonitorDocsFolderType = 1886547572,
    kALMModulesFolderType = 2002873451,
    kALMPreferencesFolderType = 1953655152,
    kALMLocationsFolderType = 1717660780,
    kAppleExtrasFolderType = 1634040004,
    kContextualMenuItemsFolderType = 1668116085,
    kMacOSReadMesFolderType = 1836020420,
    kStartupFolderType = 1937011316,
    kShutdownFolderType = 1936221286,
    kAppleMenuFolderType = 1634561653,
    kControlPanelFolderType = 1668575852,
    kSystemControlPanelFolderType = 1935897708,
    kExtensionFolderType = 1702392942,
    kExtensionDisabledFolderType = 1702392900,
    kControlPanelDisabledFolderType = 1668575812,
    kSystemExtensionDisabledFolderType = 1835098948,
    kStartupItemsDisabledFolderType = 1937011268,
    kShutdownItemsDisabledFolderType = 1936221252,
    kAssistantsFolderType = 1634956484,
    kStationeryFolderType = 1868854132,
    kOpenDocFolderType = 1868853092,
    kOpenDocShellPlugInsFolderType = 1868854128,
    kEditorsFolderType = 1868850532,
    kOpenDocEditorsFolderType = -999332762,
    kOpenDocLibrariesFolderType = 1868852322,
    kGenEditorsFolderType = -999988119,
    kHelpFolderType = -999789456,
    kInternetPlugInFolderType = -999398028,
    kModemScriptsFolderType = -999461020,
    kControlStripModulesFolderType = 1935959414,
    kInternetFolderType = 1768846532,
    kAppearanceFolderType = 1634758770,
    kSoundSetsFolderType = 1936614515,
    kDesktopPicturesFolderType = 1685352644,
    kFindSupportFolderType = 1718510707,
    kRecentApplicationsFolderType = 1918988400,
    kRecentDocumentsFolderType = 1919184739,
    kRecentServersFolderType = 1920169586,
    kLauncherItemsFolderType = 1818326382,
    kQuickTimeExtensionsFolderType = 1903453560,
    kDisplayExtensionsFolderType = 1685287020,
    kMultiprocessingFolderType = 1836087398,
    kPrintingPlugInsFolderType = 1886415975,
    kAppleshareAutomountServerAliasesFolderType = 1936881348,
    kVolumeSettingsFolderType = 1987274340,
    kPreMacOS91ApplicationsFolderType = -1938788237,
    kPreMacOS91InstallerLogsFolderType = -1804834970,
    kPreMacOS91AssistantsFolderType = -1938590524,
    kPreMacOS91UtilitiesFolderType = -1619760700,
    kPreMacOS91AppleExtrasFolderType = -1939507004,
    kPreMacOS91MacOSReadMesFolderType = -1250987324,
    kPreMacOS91InternetFolderType = -1804700476,
    kPreMacOS91AutomountedServersFolderType = -1485670716,
    kPreMacOS91StationeryFolderType = -1083935884,
    kLocalesFolderType = -999526557,
    kFindByContentPluginsFolderType = 1717724016,
    kFindByContentFolderType = 1717724006,
};

pub const anon5151 = enum(DescType) {
    typeAEText = 1951684692,
    typeArc = 1667330659,
    typeBest = 1650815860,
    typeCell = 1667458412,
    typeClassInfo = 1734569065,
    typeColorTable = 1668051572,
    typeColumn = 1667460972,
    typeDashStyle = 1952735603,
    typeData = 1952740449,
    typeDrawingArea = 1667527287,
    typeElemInfo = 1701603694,
    typeEnumeration = 1701737837,
    typeEPS = 1162892064,
    typeEventInfo = 1702259054,
};

pub const anon5341 = enum(u32) {
    kCreateFolderAtBoot = 2,
    kCreateFolderAtBootBit = 1,
    kFolderCreatedInvisible = 4,
    kFolderCreatedInvisibleBit = 2,
    kFolderCreatedNameLocked = 8,
    kFolderCreatedNameLockedBit = 3,
    kFolderCreatedAdminPrivs = 16,
    kFolderCreatedAdminPrivsBit = 4,
};

pub const anon5451 = enum(u32) {
    kFolderInUserFolder = 32,
    kFolderInUserFolderBit = 5,
    kFolderTrackedByAlias = 64,
    kFolderTrackedByAliasBit = 6,
    kFolderInRemoteUserFolderIfAvailable = 128,
    kFolderInRemoteUserFolderIfAvailableBit = 7,
    kFolderNeverMatchedInIdentifyFolder = 256,
    kFolderNeverMatchedInIdentifyFolderBit = 8,
    kFolderMustStayOnSameVolume = 512,
    kFolderMustStayOnSameVolumeBit = 9,
    kFolderManagerFolderInMacOS9FolderIfMacOSXIsInstalledMask = 1024,
    kFolderManagerFolderInMacOS9FolderIfMacOSXIsInstalledBit = 10,
    kFolderInLocalOrRemoteUserFolder = 160,
    kFolderManagerNotCreatedOnRemoteVolumesBit = 11,
    kFolderManagerNotCreatedOnRemoteVolumesMask = 2048,
    kFolderManagerNewlyCreatedFolderIsLocalizedBit = 12,
    kFolderManagerNewlyCreatedFolderShouldHaveDotLocalizedCreatedWithinMask = 4096,
};

pub const FolderDescFlags = objc.UInt32;

pub const FolderClass = objc.OSType;

pub const anon5851 = enum(u32) {
    kDictionariesFolderType = 1684628340,
    kLogsFolderType = 1819240307,
    kPreferencePanesFolderType = 1886413166,
};

pub const anon5921 = enum(u32) {
    kWidgetsFolderType = 2003068788,
    kScreenSaversFolderType = 1935897198,
};

pub const FolderType = objc.OSType;

pub const FolderLocation = objc.OSType;

pub const FolderDesc = extern struct {
    descSize: objc.Size,
    foldType: FolderType,
    flags: FolderDescFlags,
    foldClass: FolderClass,
    foldLocation: FolderType,
    badgeSignature: objc.OSType,
    badgeType: objc.OSType,
    reserved: objc.UInt32,
    name: objc.StrFileName,
};

pub const FolderDescPtr = ?*FolderDesc;

pub const RoutingFlags = objc.UInt32;

pub const FolderRouting = extern struct {
    descSize: objc.Size,
    fileType: objc.OSType,
    routeFromFolder: FolderType,
    routeToFolder: FolderType,
    flags: RoutingFlags,
};

pub const FolderRoutingPtr = ?*FolderRouting;

extern "CoreServices" fn AddFolderDescriptor(
    foldType: FolderType,
    flags: FolderDescFlags,
    foldClass: FolderClass,
    foldLocation: FolderLocation,
    badgeSignature: objc.OSType,
    badgeType: objc.OSType,
    name: objc.ConstStrFileNameParam,
    replaceFlag: objc.Boolean,
) callconv(.C) objc.OSErr;
pub const addFolderDescriptor = AddFolderDescriptor;

extern "CoreServices" fn GetFolderTypes(requestedTypeCount: objc.UInt32, totalTypeCount: ?*objc.UInt32, theTypes: ?*FolderType) callconv(.C) objc.OSErr;
pub const getFolderTypes = GetFolderTypes;

extern "CoreServices" fn RemoveFolderDescriptor(foldType: FolderType) callconv(.C) objc.OSErr;
pub const removeFolderDescriptor = RemoveFolderDescriptor;

extern "CoreServices" fn GetFolderNameUnicode(
    vRefNum: FSVolumeRefNum,
    foldType: objc.OSType,
    foundVRefNum: ?*FSVolumeRefNum,
    name: ?*objc.HFSUniStr255,
) callconv(.C) objc.OSStatus;
pub const getFolderNameUnicode = GetFolderNameUnicode;

extern "CoreServices" fn InvalidateFolderDescriptorCache(vRefNum: FSVolumeRefNum, dirID: objc.SInt32) callconv(.C) objc.OSErr;
pub const invalidateFolderDescriptorCache = InvalidateFolderDescriptorCache;

extern "CoreServices" fn IdentifyFolder(vRefNum: FSVolumeRefNum, dirID: objc.SInt32, foldType: ?*FolderType) callconv(.C) objc.OSErr;
pub const identifyFolder = IdentifyFolder;

extern "CoreServices" fn FSDetermineIfRefIsEnclosedByFolder(
    domainOrVRefNum: FSVolumeRefNum,
    folderType: objc.OSType,
    inRef: ?*FSRef,
    outResult: ?*objc.Boolean,
) callconv(.C) objc.OSErr;
pub const fsDetermineIfRefIsEnclosedByFolder = FSDetermineIfRefIsEnclosedByFolder;

extern "CoreServices" fn DetermineIfPathIsEnclosedByFolder(
    domainOrVRefNum: FSVolumeRefNum,
    folderType: objc.OSType,
    utf8Path: ?*objc.UInt8,
    pathIsRealPath: objc.Boolean,
    outResult: ?*objc.Boolean,
) callconv(.C) objc.OSErr;
pub const determineIfPathIsEnclosedByFolder = DetermineIfPathIsEnclosedByFolder;

pub const FolderManagerNotificationProcPtr = ?*const fn (objc.OSType, ?*anyopaque, ?*anyopaque) callconv(.C) objc.OSStatus;

pub const FolderManagerNotificationUPP = FolderManagerNotificationProcPtr;

extern "CoreServices" fn NewFolderManagerNotificationUPP(userRoutine: FolderManagerNotificationProcPtr) callconv(.C) FolderManagerNotificationUPP;
pub const newFolderManagerNotificationUPP = NewFolderManagerNotificationUPP;

extern "CoreServices" fn DisposeFolderManagerNotificationUPP(userUPP: FolderManagerNotificationUPP) callconv(.C) void;
pub const disposeFolderManagerNotificationUPP = DisposeFolderManagerNotificationUPP;

extern "CoreServices" fn InvokeFolderManagerNotificationUPP(
    message: objc.OSType,
    arg: ?*anyopaque,
    userRefCon: ?*anyopaque,
    userUPP: FolderManagerNotificationUPP,
) callconv(.C) objc.OSStatus;
pub const invokeFolderManagerNotificationUPP = InvokeFolderManagerNotificationUPP;

extern "CoreServices" fn Microseconds(microTickCount: ?*objc.UnsignedWide) callconv(.C) void;
pub const microseconds = Microseconds;

pub const anon1051 = enum(u32) {
    kTMTaskActive = 32768,
};

pub const TMTask = extern struct {
    qLink: QElemPtr,
    qType: i16,
    tmAddr: TimerUPP,
    tmCount: i64,
    tmWakeUp: i64,
    tmReserved: i64,
};

pub const TMTaskPtr = ?*TMTask;

pub const TimerProcPtr = ?*const fn (TMTaskPtr) callconv(.C) void;

pub const TimerUPP = TimerProcPtr;

extern "CoreServices" fn InsTime(tmTaskPtr: QElemPtr) callconv(.C) void;
pub const insTime = InsTime;

extern "CoreServices" fn InsXTime(tmTaskPtr: QElemPtr) callconv(.C) void;
pub const insXTime = InsXTime;

extern "CoreServices" fn PrimeTime(tmTaskPtr: QElemPtr, count: i64) callconv(.C) void;
pub const primeTime = PrimeTime;

extern "CoreServices" fn RmvTime(tmTaskPtr: QElemPtr) callconv(.C) void;
pub const rmvTime = RmvTime;

extern "CoreServices" fn InstallTimeTask(tmTaskPtr: QElemPtr) callconv(.C) objc.OSErr;
pub const installTimeTask = InstallTimeTask;

extern "CoreServices" fn InstallXTimeTask(tmTaskPtr: QElemPtr) callconv(.C) objc.OSErr;
pub const installXTimeTask = InstallXTimeTask;

extern "CoreServices" fn PrimeTimeTask(tmTaskPtr: QElemPtr, count: i64) callconv(.C) objc.OSErr;
pub const primeTimeTask = PrimeTimeTask;

extern "CoreServices" fn RemoveTimeTask(tmTaskPtr: QElemPtr) callconv(.C) objc.OSErr;
pub const removeTimeTask = RemoveTimeTask;

extern "CoreServices" fn NewTimerUPP(userRoutine: TimerProcPtr) callconv(.C) TimerUPP;
pub const newTimerUPP = NewTimerUPP;

extern "CoreServices" fn DisposeTimerUPP(userUPP: TimerUPP) callconv(.C) void;
pub const disposeTimerUPP = DisposeTimerUPP;

extern "CoreServices" fn InvokeTimerUPP(tmTaskPtr: TMTaskPtr, userUPP: TimerUPP) callconv(.C) void;
pub const invokeTimerUPP = InvokeTimerUPP;

extern "CoreServices" fn MPGetNextCpuID(owningCoherenceID: MPCoherenceID, cpuID: ?*MPCpuID) callconv(.C) objc.OSStatus;
pub const mpGetNextCpuID = MPGetNextCpuID;

extern "CoreServices" fn MPGetNextTaskID(owningProcessID: MPProcessID, taskID: ?*MPTaskID) callconv(.C) objc.OSStatus;
pub const mpGetNextTaskID = MPGetNextTaskID;

pub const MPQueueInfo = extern struct {
    version: objc.PBVersion,
    processID: MPProcessID,
    queueName: objc.OSType,
    nWaiting: objc.ItemCount,
    waitingTaskID: MPTaskID,
    nMessages: objc.ItemCount,
    nReserved: objc.ItemCount,
    p1: ?*anyopaque,
    p2: ?*anyopaque,
    p3: ?*anyopaque,
};

pub const MPSemaphoreInfo = extern struct {
    version: objc.PBVersion,
    processID: MPProcessID,
    semaphoreName: objc.OSType,
    nWaiting: objc.ItemCount,
    waitingTaskID: MPTaskID,
    maximum: objc.ItemCount,
    count: objc.ItemCount,
};

pub const MPEventInfo = extern struct {
    version: objc.PBVersion,
    processID: MPProcessID,
    eventName: objc.OSType,
    nWaiting: objc.ItemCount,
    waitingTaskID: MPTaskID,
    events: MPEventFlags,
};

pub const MPCriticalRegionInfo = extern struct {
    version: objc.PBVersion,
    processID: MPProcessID,
    regionName: objc.OSType,
    nWaiting: objc.ItemCount,
    waitingTaskID: MPTaskID,
    owningTask: MPTaskID,
    count: objc.ItemCount,
};

pub const MPNotificationInfo = extern struct {
    version: objc.PBVersion,
    processID: MPProcessID,
    notificationName: objc.OSType,
    queueID: MPQueueID,
    p1: ?*anyopaque,
    p2: ?*anyopaque,
    p3: ?*anyopaque,
    eventID: MPEventID,
    events: MPEventFlags,
    semaphoreID: MPSemaphoreID,
};

pub const MPAddressSpaceInfo = extern struct {
    version: objc.PBVersion,
    processID: MPProcessID,
    groupID: MPCoherenceID,
    nTasks: objc.ItemCount,
    vsid: [16]objc.UInt32,
};

extern "CoreServices" fn LMGetBootDrive() callconv(.C) objc.SInt16;
pub const lmGetBootDrive = LMGetBootDrive;

extern "CoreServices" fn LMSetBootDrive(value: objc.SInt16) callconv(.C) void;
pub const lmSetBootDrive = LMSetBootDrive;

extern "CoreServices" fn LMGetApFontID() callconv(.C) objc.SInt16;
pub const lmGetApFontID = LMGetApFontID;

extern "CoreServices" fn LMSetApFontID(value: objc.SInt16) callconv(.C) void;
pub const lmSetApFontID = LMSetApFontID;

extern "CoreServices" fn LMGetSysMap() callconv(.C) objc.SInt16;
pub const lmGetSysMap = LMGetSysMap;

extern "CoreServices" fn LMSetSysMap(value: objc.SInt16) callconv(.C) void;
pub const lmSetSysMap = LMSetSysMap;

extern "CoreServices" fn LMGetResLoad() callconv(.C) objc.UInt8;
pub const lmGetResLoad = LMGetResLoad;

extern "CoreServices" fn LMSetResLoad(value: objc.UInt8) callconv(.C) void;
pub const lmSetResLoad = LMSetResLoad;

extern "CoreServices" fn LMGetResErr() callconv(.C) objc.SInt16;
pub const lmGetResErr = LMGetResErr;

extern "CoreServices" fn LMSetResErr(value: objc.SInt16) callconv(.C) void;
pub const lmSetResErr = LMSetResErr;

extern "CoreServices" fn LMGetTmpResLoad() callconv(.C) objc.UInt8;
pub const lmGetTmpResLoad = LMGetTmpResLoad;

extern "CoreServices" fn LMSetTmpResLoad(value: objc.UInt8) callconv(.C) void;
pub const lmSetTmpResLoad = LMSetTmpResLoad;

extern "CoreServices" fn LMGetIntlSpec() callconv(.C) objc.Ptr;
pub const lmGetIntlSpec = LMGetIntlSpec;

extern "CoreServices" fn LMSetIntlSpec(value: objc.Ptr) callconv(.C) void;
pub const lmSetIntlSpec = LMSetIntlSpec;

extern "CoreServices" fn LMSetSysFontFam(value: objc.SInt16) callconv(.C) void;
pub const lmSetSysFontFam = LMSetSysFontFam;

extern "CoreServices" fn LMGetSysFontSize() callconv(.C) objc.SInt16;
pub const lmGetSysFontSize = LMGetSysFontSize;

extern "CoreServices" fn LMSetSysFontSize(value: objc.SInt16) callconv(.C) void;
pub const lmSetSysFontSize = LMSetSysFontSize;

pub const PEFContainerHeader = extern struct {
    tag1: objc.OSType,
    tag2: objc.OSType,
    architecture: objc.OSType,
    formatVersion: objc.UInt32,
    dateTimeStamp: objc.UInt32,
    oldDefVersion: objc.UInt32,
    oldImpVersion: objc.UInt32,
    currentVersion: objc.UInt32,
    sectionCount: objc.UInt16,
    instSectionCount: objc.UInt16,
    reservedA: objc.UInt32,
};

pub const anon1171 = enum(u32) {
    kPEFFirstSectionHeaderOffset = 40,
};

pub const PEFSectionHeader = extern struct {
    nameOffset: objc.SInt32,
    defaultAddress: objc.UInt32,
    totalLength: objc.UInt32,
    unpackedLength: objc.UInt32,
    containerLength: objc.UInt32,
    containerOffset: objc.UInt32,
    sectionKind: objc.UInt8,
    shareKind: objc.UInt8,
    alignment: objc.UInt8,
    reservedA: objc.UInt8,
};

pub const anon1451 = enum(u32) {
    kPEFCodeSection = 0,
    kPEFUnpackedDataSection = 1,
    kPEFPackedDataSection = 2,
    kPEFConstantSection = 3,
    kPEFExecDataSection = 6,
    kPEFLoaderSection = 4,
    kPEFDebugSection = 5,
    kPEFExceptionSection = 7,
    kPEFTracebackSection = 8,
};

pub const anon1611 = enum(u32) {
    kPEFProcessShare = 1,
    kPEFGlobalShare = 4,
    kPEFProtectedShare = 5,
};

pub const anon1911 = enum(AEKeyword) {
    keyTransactionIDAttr = 1953653102,
    keyReturnIDAttr = 1920231780,
    keyEventClassAttr = 1702257516,
    keyEventIDAttr = 1702259044,
    keyAddressAttr = 1633969266,
    keyOptionalKeywordAttr = 1869640811,
    keyTimeoutAttr = 1953066351,
    keyInteractLevelAttr = 1768846437,
    keyEventSourceAttr = 1702064739,
    keyMissedKeywordAttr = 1835627379,
    keyOriginalAddressAttr = 1718775661,
    keyAcceptTimeoutAttr = 1633907821,
    keyReplyRequestedAttr = 1919250545,
    keySenderEUIDAttr = 1936025956,
    keySenderEGIDAttr = 1936157028,
    keySenderUIDAttr = 1969841267,
    keySenderGIDAttr = 1734960243,
    keySenderPIDAttr = 1936746852,
    keySenderAuditTokenAttr = 1953459054,
    keySenderApplescriptEntitlementsAttr = 1701737580,
    keySenderApplicationIdentifierEntitlementAttr = 1634297185,
    keySenderApplicationSandboxed = 1936946018,
    keyActualSenderAuditToken = 1633902964,
    keyAppleEventAttributesAttr = 1635021938,
};

pub const anon2011 = enum(u32) {
    kPEFPkDataOpcodeShift = 5,
    kPEFPkDataCount5Mask = 31,
    kPEFPkDataMaxCount5 = 31,
    kPEFPkDataVCountShift = 7,
    kPEFPkDataVCountMask = 127,
    kPEFPkDataVCountEndMask = 128,
};

pub const PEFLoaderInfoHeader = extern struct {
    mainSection: objc.SInt32,
    mainOffset: objc.UInt32,
    initSection: objc.SInt32,
    initOffset: objc.UInt32,
    termSection: objc.SInt32,
    termOffset: objc.UInt32,
    importedLibraryCount: objc.UInt32,
    totalImportedSymbolCount: objc.UInt32,
    relocSectionCount: objc.UInt32,
    relocInstrOffset: objc.UInt32,
    loaderStringsOffset: objc.UInt32,
    exportHashOffset: objc.UInt32,
    exportHashTablePower: objc.UInt32,
    exportedSymbolCount: objc.UInt32,
};

pub const PEFImportedLibrary = extern struct {
    nameOffset: objc.UInt32,
    oldImpVersion: objc.UInt32,
    currentVersion: objc.UInt32,
    importedSymbolCount: objc.UInt32,
    firstImportedSymbol: objc.UInt32,
    options: objc.UInt8,
    reservedA: objc.UInt8,
    reservedB: objc.UInt16,
};

pub const anon3421 = enum(u32) {
    kPEFWeakImportLibMask = 64,
    kPEFInitLibBeforeMask = 128,
};

pub const PEFImportedSymbol = extern struct {
    classAndName: objc.UInt32,
};

pub const anon3731 = enum(u32) {
    kPEFImpSymClassShift = 24,
    kPEFImpSymNameOffsetMask = 16777215,
    kPEFImpSymMaxNameOffset = 16777215,
};

pub const anon3851 = enum(u32) {
    kPEFCodeSymbol = 0,
    kPEFDataSymbol = 1,
    kPEFTVectorSymbol = 2,
    kPEFTOCSymbol = 3,
    kPEFGlueSymbol = 4,
    kPEFUndefinedSymbol = 15,
    kPEFWeakImportSymMask = 128,
};

pub const PEFExportedSymbolHashSlot = extern struct {
    countAndStart: objc.UInt32,
};

pub const PEFSplitHashWord = extern struct {
    nameLength: objc.UInt16,
    hashValue: objc.UInt16,
};

pub const PEFExportedSymbolKey = extern struct {
    u: anon4973,
};

pub const anon4973 = extern union {
    fullHashWord: objc.UInt32,
    splitHashWord: PEFSplitHashWord,
};

pub const PEFExportedSymbol = extern struct {
    classAndName: objc.UInt32,
    symbolValue: objc.UInt32,
    sectionIndex: objc.SInt16,
};

pub const anon5841 = enum(i32) {
    kPEFAbsoluteExport = -2,
    kPEFReexportedImport = -3,
};

pub const PEFRelocChunk = objc.UInt16;

pub const PEFLoaderRelocationHeader = extern struct {
    sectionIndex: objc.UInt16,
    reservedA: objc.UInt16,
    relocCount: objc.UInt32,
    firstRelocOffset: objc.UInt32,
};

pub const anon6561 = enum(u32) {
    kPEFRelocBasicOpcodeRange = 128,
};

pub const anon6691 = enum(u32) {
    kPEFRelocBySectDWithSkip = 0,
    kPEFRelocBySectC = 32,
    kPEFRelocBySectD = 33,
    kPEFRelocTVector12 = 34,
    kPEFRelocTVector8 = 35,
    kPEFRelocVTable8 = 36,
    kPEFRelocImportRun = 37,
    kPEFRelocSmByImport = 48,
    kPEFRelocSmSetSectC = 49,
    kPEFRelocSmSetSectD = 50,
    kPEFRelocSmBySection = 51,
    kPEFRelocIncrPosition = 64,
    kPEFRelocSmRepeat = 72,
    kPEFRelocSetPosition = 80,
    kPEFRelocLgByImport = 82,
    kPEFRelocLgRepeat = 88,
    kPEFRelocLgSetOrBySection = 90,
    kPEFRelocUndefinedOpcode = 255,
};

pub const anon6981 = enum(u32) {
    kPEFRelocLgBySectionSubopcode = 0,
    kPEFRelocLgSetSectCSubopcode = 1,
    kPEFRelocLgSetSectDSubopcode = 2,
};

pub const anon7821 = enum(u32) {
    kPEFRelocWithSkipMaxSkipCount = 255,
    kPEFRelocWithSkipMaxRelocCount = 63,
};

pub const anon8161 = enum(u32) {
    kPEFRelocRunMaxRunLength = 512,
};

pub const anon8551 = enum(u32) {
    kPEFRelocSmIndexMaxIndex = 511,
};

pub const anon8911 = enum(u32) {
    kPEFRelocIncrPositionMaxOffset = 4096,
};

pub const anon9211 = enum(u32) {
    kPEFRelocSmRepeatMaxChunkCount = 16,
    kPEFRelocSmRepeatMaxRepeatCount = 256,
};

pub const anon9521 = enum(u32) {
    kPEFRelocSetPosMaxOffset = 67108863,
};

pub const anon9861 = enum(u32) {
    kPEFRelocLgByImportMaxIndex = 67108863,
};

pub const anon10211 = enum(u32) {
    kPEFRelocLgRepeatMaxChunkCount = 16,
    kPEFRelocLgRepeatMaxRepeatCount = 4194303,
};

pub const anon10591 = enum(u32) {
    kPEFRelocLgSetOrBySectionMaxIndex = 4194303,
};

pub const XLibContainerHeader = extern struct {
    tag1: objc.OSType,
    tag2: objc.OSType,
    currentFormat: objc.UInt32,
    containerStringsOffset: objc.UInt32,
    exportHashOffset: objc.UInt32,
    exportKeyOffset: objc.UInt32,
    exportSymbolOffset: objc.UInt32,
    exportNamesOffset: objc.UInt32,
    exportHashTablePower: objc.UInt32,
    exportedSymbolCount: objc.UInt32,
    fragNameOffset: objc.UInt32,
    fragNameLength: objc.UInt32,
    dylibPathOffset: objc.UInt32,
    dylibPathLength: objc.UInt32,
    cpuFamily: objc.OSType,
    cpuModel: objc.OSType,
    dateTimeStamp: objc.UInt32,
    currentVersion: objc.UInt32,
    oldDefVersion: objc.UInt32,
    oldImpVersion: objc.UInt32,
};

pub const anon11711 = enum(i32) {
    kXLibTag1 = -263364253,
    kVLibTag2 = 1447848290,
    kBLibTag2 = 1112303970,
    kXLibVersion = 1,
};

pub const XLibExportedSymbolHashSlot = PEFExportedSymbolHashSlot;

pub const XLibExportedSymbolKey = PEFExportedSymbolKey;

pub const XLibExportedSymbol = extern struct {
    classAndName: objc.UInt32,
    bpOffset: objc.UInt32,
};

pub const anon1291 = enum(u32) {
    kTileIconVariant = 1953066085,
    kRolloverIconVariant = 1870030194,
    kDropIconVariant = 1685221232,
    kOpenIconVariant = 1869636974,
    kOpenDropIconVariant = 1868853872,
};

pub const anon7691 = enum(DescType) {
    typeMeters = 1835365490,
    typeInches = 1768842088,
    typeFeet = 1717921140,
    typeYards = 2036429412,
    typeMiles = 1835625573,
    typeKilometers = 1802335346,
    typeCentimeters = 1668117618,
    typeSquareMeters = 1936814701,
    typeSquareFeet = 1936811636,
    typeSquareYards = 1936816484,
    typeSquareMiles = 1936813417,
    typeSquareKilometers = 1936812909,
    typeLiters = 1818850418,
    typeQuarts = 1903326323,
    typeGallons = 1734437998,
    typeCubicMeters = 1668113780,
    typeCubicFeet = 1667655028,
    typeCubicInches = 1668639086,
    typeCubicCentimeter = 1667460468,
    typeCubicYards = 1668903524,
    typeKilograms = 1801941613,
    typeGrams = 1735549293,
    typeOunces = 1870295840,
    typePounds = 1818391328,
    typeDegreesC = 1684367203,
    typeDegreesF = 1684367206,
    typeDegreesK = 1684367211,
};

pub const HFSCatalogNodeID = objc.UInt32;

pub const anon261 = enum(u32) {
    AIFFID = 1095321158,
    AIFCID = 1095321155,
    FormatVersionID = 1180058962,
    CommonID = 1129270605,
    FORMID = 1179603533,
    SoundDataID = 1397968452,
    MarkerID = 1296126539,
    InstrumentID = 1229869908,
    MIDIDataID = 1296647241,
    AudioRecordingID = 1095062340,
    ApplicationSpecificID = 1095782476,
    CommentID = 1129270612,
    NameID = 1312902469,
    AuthorID = 1096111176,
    CopyrightID = 677587232,
    AnnotationID = 1095650895,
};

pub const MarkerIdType = objc.SInt16;

pub const ChunkHeader = extern struct {
    ckID: objc.UInt32,
    ckSize: objc.SInt32,
};

pub const ContainerChunk = extern struct {
    ckID: objc.UInt32,
    ckSize: objc.SInt32,
    formType: objc.UInt32,
};

pub const FormatVersionChunk = extern struct {
    ckID: objc.UInt32,
    ckSize: objc.SInt32,
    timestamp: objc.UInt32,
};

pub const FormatVersionChunkPtr = ?*FormatVersionChunk;

pub const CommonChunk = extern struct {
    ckID: objc.UInt32,
    ckSize: objc.SInt32,
    numChannels: objc.SInt16,
    numSampleFrames: objc.UInt32,
    sampleSize: objc.SInt16,
    sampleRate: objc.extended80,
};

pub const CommonChunkPtr = ?*CommonChunk;

pub const ExtCommonChunk = extern struct {
    ckID: objc.UInt32,
    ckSize: objc.SInt32,
    numChannels: objc.SInt16,
    numSampleFrames: objc.UInt32,
    sampleSize: objc.SInt16,
    sampleRate: objc.extended80,
    compressionType: objc.UInt32,
    compressionName: [1]i8,
};

pub const ExtCommonChunkPtr = ?*ExtCommonChunk;

pub const SoundDataChunk = extern struct {
    ckID: objc.UInt32,
    ckSize: objc.SInt32,
    offset: objc.UInt32,
    blockSize: objc.UInt32,
};

pub const SoundDataChunkPtr = ?*SoundDataChunk;

pub const Marker = extern struct {
    id: MarkerIdType,
    position: objc.UInt32,
    markerName: objc.Str255,
};

pub const MarkerChunk = extern struct {
    ckID: objc.UInt32,
    ckSize: objc.SInt32,
    numMarkers: objc.UInt16,
    Markers: [1]Marker,
};

pub const MarkerChunkPtr = ?*MarkerChunk;

pub const AIFFLoop = extern struct {
    playMode: objc.SInt16,
    beginLoop: MarkerIdType,
    endLoop: MarkerIdType,
};

pub const InstrumentChunk = extern struct {
    ckID: objc.UInt32,
    ckSize: objc.SInt32,
    baseFrequency: objc.UInt8,
    detune: objc.UInt8,
    lowFrequency: objc.UInt8,
    highFrequency: objc.UInt8,
    lowVelocity: objc.UInt8,
    highVelocity: objc.UInt8,
    gain: objc.SInt16,
    sustainLoop: AIFFLoop,
    releaseLoop: AIFFLoop,
};

pub const InstrumentChunkPtr = ?*InstrumentChunk;

pub const MIDIDataChunk = extern struct {
    ckID: objc.UInt32,
    ckSize: objc.SInt32,
    MIDIdata: [1]objc.UInt8,
};

pub const MIDIDataChunkPtr = ?*MIDIDataChunk;

pub const AudioRecordingChunk = extern struct {
    ckID: objc.UInt32,
    ckSize: objc.SInt32,
    AESChannelStatus: [24]objc.UInt8,
};

pub const AudioRecordingChunkPtr = ?*AudioRecordingChunk;

pub const ApplicationSpecificChunk = extern struct {
    ckID: objc.UInt32,
    ckSize: objc.SInt32,
    applicationSignature: objc.OSType,
    data: [1]objc.UInt8,
};

pub const ApplicationSpecificChunkPtr = ?*ApplicationSpecificChunk;

pub const Comment = extern struct {
    timeStamp: objc.UInt32,
    marker: MarkerIdType,
    count: objc.UInt16,
    text: [1]i8,
};

pub const CommentsChunk = extern struct {
    ckID: objc.UInt32,
    ckSize: objc.SInt32,
    numComments: objc.UInt16,
    comments: [1]Comment,
};

pub const CommentsChunkPtr = ?*CommentsChunk;

pub const TextChunk = extern struct {
    ckID: objc.UInt32,
    ckSize: objc.SInt32,
    text: [1]i8,
};

pub const TextChunkPtr = ?*TextChunk;

pub const anon621 = enum(u32) {
    kTECPluginType = 1701015655,
    kTECPluginCreator = 1701733238,
    kTECPluginOneToOne = 1869901679,
    kTECPluginOneToMany = 1869901677,
    kTECPluginManyToOne = 1836347247,
    kTECPluginSniffObj = 1936615782,
};

pub const TextEncodingRec = extern struct {
    base: objc.UInt32,
    variant: objc.UInt32,
    format: objc.UInt32,
};

pub const TECEncodingsListRec = extern struct {
    count: objc.UInt32,
    encodings: TextEncodingRec,
};

pub const TECEncodingsListPtr = ?*TECEncodingsListRec;

pub const TECEncodingsListHandle = ?*TECEncodingsListPtr;

pub const TECSubTextEncodingRec = extern struct {
    offset: objc.UInt32,
    searchEncoding: TextEncodingRec,
    count: objc.UInt32,
    subEncodings: TextEncodingRec,
};

pub const TECSubTextEncodingsRec = extern struct {
    count: objc.UInt32,
    subTextEncodingRec: TECSubTextEncodingRec,
};

pub const TECSubTextEncodingsPtr = ?*TECSubTextEncodingsRec;

pub const TECSubTextEncodingsHandle = ?*TECSubTextEncodingsPtr;

pub const TECEncodingPairRec = extern struct {
    source: TextEncodingRec,
    dest: TextEncodingRec,
};

pub const TECEncodingPairs = extern struct {
    encodingPair: TECEncodingPairRec,
    flags: objc.UInt32,
    speed: objc.UInt32,
};

pub const TECEncodingPairsRec = extern struct {
    count: objc.UInt32,
    encodingPairs: TECEncodingPairs,
};

pub const TECEncodingPairsPtr = ?*TECEncodingPairsRec;

pub const TECEncodingPairsHandle = ?*TECEncodingPairsPtr;

pub const TECLocaleListToEncodingListRec = extern struct {
    offset: objc.UInt32,
    count: objc.UInt32,
    locales: objc.RegionCode,
};

pub const TECLocaleListToEncodingListPtr = ?*TECLocaleListToEncodingListRec;

pub const TECLocaleToEncodingsListRec = extern struct {
    count: objc.UInt32,
    localeListToEncodingList: TECLocaleListToEncodingListRec,
};

pub const TECLocaleToEncodingsListPtr = ?*TECLocaleToEncodingsListRec;

pub const TECLocaleToEncodingsListHandle = ?*TECLocaleToEncodingsListPtr;

pub const TECInternetNameRec = extern struct {
    offset: objc.UInt32,
    searchEncoding: TextEncodingRec,
    encodingNameLength: objc.UInt8,
    encodingName: [1]objc.UInt8,
};

pub const TECInternetNamesRec = extern struct {
    count: objc.UInt32,
    InternetNames: TECInternetNameRec,
};

pub const TECInternetNamesPtr = ?*TECInternetNamesRec;

pub const TECInternetNamesHandle = ?*TECInternetNamesPtr;

pub const TECBufferContextRec = extern struct {
    textInputBuffer: ConstTextPtr,
    textInputBufferEnd: ConstTextPtr,
    textOutputBuffer: TextPtr,
    textOutputBufferEnd: TextPtr,
    encodingInputBuffer: ConstTextEncodingRunPtr,
    encodingInputBufferEnd: ConstTextEncodingRunPtr,
    encodingOutputBuffer: TextEncodingRunPtr,
    encodingOutputBufferEnd: TextEncodingRunPtr,
};

pub const TECPluginStateRec = extern struct {
    state1: objc.UInt8,
    state2: objc.UInt8,
    state3: objc.UInt8,
    state4: objc.UInt8,
    longState1: objc.UInt32,
    longState2: objc.UInt32,
    longState3: objc.UInt32,
    longState4: objc.UInt32,
};

pub const TECConverterContextRec = extern struct {
    pluginRec: objc.Ptr,
    sourceEncoding: TextEncoding,
    destEncoding: TextEncoding,
    reserved1: objc.UInt32,
    reserved2: objc.UInt32,
    bufferContext: TECBufferContextRec,
    contextRefCon: objc.URefCon,
    conversionProc: objc.ProcPtr,
    flushProc: objc.ProcPtr,
    clearContextInfoProc: objc.ProcPtr,
    options1: objc.UInt32,
    options2: objc.UInt32,
    pluginState: TECPluginStateRec,
};

pub const TECSnifferContextRec = extern struct {
    pluginRec: objc.Ptr,
    encoding: TextEncoding,
    maxErrors: objc.ItemCount,
    maxFeatures: objc.ItemCount,
    textInputBuffer: ConstTextPtr,
    textInputBufferEnd: ConstTextPtr,
    numFeatures: objc.ItemCount,
    numErrors: objc.ItemCount,
    contextRefCon: objc.URefCon,
    sniffProc: objc.ProcPtr,
    clearContextInfoProc: objc.ProcPtr,
    pluginState: TECPluginStateRec,
};

pub const TECPluginNewEncodingConverterPtr = ?*const fn (
    ?*TECObjectRef,
    ?*TECConverterContextRec,
    TextEncoding,
    TextEncoding,
) callconv(.C) objc.OSStatus;

pub const TECPluginClearContextInfoPtr = ?*const fn (TECObjectRef, ?*TECConverterContextRec) callconv(.C) objc.OSStatus;

pub const TECPluginConvertTextEncodingPtr = ?*const fn (TECObjectRef, ?*TECConverterContextRec) callconv(.C) objc.OSStatus;

pub const TECPluginFlushConversionPtr = ?*const fn (TECObjectRef, ?*TECConverterContextRec) callconv(.C) objc.OSStatus;

pub const TECPluginDisposeEncodingConverterPtr = ?*const fn (TECObjectRef, ?*TECConverterContextRec) callconv(.C) objc.OSStatus;

pub const TECPluginNewEncodingSnifferPtr = ?*const fn (?*TECSnifferObjectRef, ?*TECSnifferContextRec, TextEncoding) callconv(.C) objc.OSStatus;

pub const TECPluginClearSnifferContextInfoPtr = ?*const fn (TECSnifferObjectRef, ?*TECSnifferContextRec) callconv(.C) objc.OSStatus;

pub const TECPluginSniffTextEncodingPtr = ?*const fn (TECSnifferObjectRef, ?*TECSnifferContextRec) callconv(.C) objc.OSStatus;

pub const TECPluginDisposeEncodingSnifferPtr = ?*const fn (TECSnifferObjectRef, ?*TECSnifferContextRec) callconv(.C) objc.OSStatus;

pub const TECPluginGetCountAvailableTextEncodingsPtr = ?*const fn (?*TextEncoding, objc.ItemCount, ?*objc.ItemCount) callconv(.C) objc.OSStatus;

pub const TECPluginGetCountAvailableTextEncodingPairsPtr = ?*const fn (?*TECConversionInfo, objc.ItemCount, ?*objc.ItemCount) callconv(.C) objc.OSStatus;

pub const TECPluginGetCountDestinationTextEncodingsPtr = ?*const fn (
    TextEncoding,
    ?*TextEncoding,
    objc.ItemCount,
    ?*objc.ItemCount,
) callconv(.C) objc.OSStatus;

pub const TECPluginGetCountSubTextEncodingsPtr = ?*const fn (
    TextEncoding,
    *TextEncoding,
    objc.ItemCount,
    ?*objc.ItemCount,
) callconv(.C) objc.OSStatus;

pub const TECPluginGetCountAvailableSniffersPtr = ?*const fn (?*TextEncoding, objc.ItemCount, ?*objc.ItemCount) callconv(.C) objc.OSStatus;

pub const TECPluginGetTextEncodingInternetNamePtr = ?*const fn (TextEncoding, objc.Str255) callconv(.C) objc.OSStatus;

pub const TECPluginGetTextEncodingFromInternetNamePtr = ?*const fn (?*TextEncoding, objc.ConstStr255Param) callconv(.C) objc.OSStatus;

pub const TECPluginGetCountWebEncodingsPtr = ?*const fn (?*TextEncoding, objc.ItemCount, ?*objc.ItemCount) callconv(.C) objc.OSStatus;

pub const TECPluginGetCountMailEncodingsPtr = ?*const fn (?*TextEncoding, objc.ItemCount, ?*objc.ItemCount) callconv(.C) objc.OSStatus;

pub const anon2551 = enum(u32) {
    kTECPluginDispatchTableVersion1 = 65536,
    kTECPluginDispatchTableVersion1_1 = 65537,
    kTECPluginDispatchTableVersion1_2 = 65538,
    kTECPluginDispatchTableCurrentVersion = 65538,
};

pub const TECPluginDispatchTable = extern struct {
    version: TECPluginVersion,
    compatibleVersion: TECPluginVersion,
    PluginID: TECPluginSignature,
    PluginNewEncodingConverter: TECPluginNewEncodingConverterPtr,
    PluginClearContextInfo: TECPluginClearContextInfoPtr,
    PluginConvertTextEncoding: TECPluginConvertTextEncodingPtr,
    PluginFlushConversion: TECPluginFlushConversionPtr,
    PluginDisposeEncodingConverter: TECPluginDisposeEncodingConverterPtr,
    PluginNewEncodingSniffer: TECPluginNewEncodingSnifferPtr,
    PluginClearSnifferContextInfo: TECPluginClearSnifferContextInfoPtr,
    PluginSniffTextEncoding: TECPluginSniffTextEncodingPtr,
    PluginDisposeEncodingSniffer: TECPluginDisposeEncodingSnifferPtr,
    PluginGetCountAvailableTextEncodings: TECPluginGetCountAvailableTextEncodingsPtr,
    PluginGetCountAvailableTextEncodingPairs: TECPluginGetCountAvailableTextEncodingPairsPtr,
    PluginGetCountDestinationTextEncodings: TECPluginGetCountDestinationTextEncodingsPtr,
    PluginGetCountSubTextEncodings: TECPluginGetCountSubTextEncodingsPtr,
    PluginGetCountAvailableSniffers: TECPluginGetCountAvailableSniffersPtr,
    PluginGetCountWebTextEncodings: TECPluginGetCountWebEncodingsPtr,
    PluginGetCountMailTextEncodings: TECPluginGetCountMailEncodingsPtr,
    PluginGetTextEncodingInternetName: TECPluginGetTextEncodingInternetNamePtr,
    PluginGetTextEncodingFromInternetName: TECPluginGetTextEncodingFromInternetNamePtr,
};

pub const TECPluginGetPluginDispatchTablePtr = ?*const fn () callconv(.C) ?*TECPluginDispatchTable;

pub const DescType = objc.ResType;

pub const AEKeyword = objc.FourCharCode;

pub const anon1221 = enum(DescType) {
    typeAEList = 1818850164,
    typeAERecord = 1919247215,
    typeAppleEvent = 1634039412,
    typeEventRecord = 1702261347,
    typeTrue = 1953658213,
    typeFalse = 1717660787,
    typeAlias = 1634494835,
    typeEnumerated = 1701737837,
    typeType = 1954115685,
    typeAppParameters = 1634758753,
    typeProperty = 1886547824,
    typeFSRef = 1718841958,
    typeFileURL = 1718973036,
    typeBookmarkData = 1651339883,
    typeKeyword = 1801812343,
    typeSectionH = 1936024436,
    typeWildCard = 707406378,
    typeApplSignature = 1936287598,
    typeQDRectangle = 1902408308,
    typeFixed = 1718188132,
    typeProcessSerialNumber = 1886613024,
    typeApplicationURL = 1634759276,
    typeNull = 1853189228,
};

pub const anon1601 = enum(DescType) {
    typeCFAttributedStringRef = 1667654003,
    typeCFMutableAttributedStringRef = 1667653985,
    typeCFStringRef = 1667658612,
    typeCFMutableStringRef = 1667657075,
    typeCFArrayRef = 1667654002,
    typeCFMutableArrayRef = 1667657057,
    typeCFDictionaryRef = 1667654755,
    typeCFMutableDictionaryRef = 1667657060,
    typeCFNumberRef = 1667657314,
    typeCFBooleanRef = 1667658854,
    typeCFTypeRef = 1667658873,
};

pub const anon1811 = enum(DescType) {
    typeAuditToken = 1953459054,
};

pub const anon1861 = enum(DescType) {
    typeApplicationBundleID = 1651863140,
};

pub const anon2261 = enum(i32) {
    kAEDebugPOSTHeader = 1,
    kAEDebugReplyHeader = 2,
    kAEDebugXMLRequest = 4,
    kAEDebugXMLResponse = 8,
    kAEDebugXMLDebugAll = -1,
};

pub const anon2381 = enum(u32) {
    kSOAP1999Schema = 1936931129,
    kSOAP2001Schema = 1936928817,
};

pub const anon2431 = enum(AEKeyword) {
    keyUserNameAttr = 1970168173,
    keyUserPasswordAttr = 1885434739,
    keyDisableAuthenticationAttr = 1635087464,
    keyXMLDebuggingAttr = 2019844711,
    kAERPCClass = 1919968032,
    kAEXMLRPCScheme = 1380991794,
    kAESOAPScheme = 1397702992,
    kAESharedScriptHandler = 2004050800,
    keyRPCMethodName = 1835365480,
    keyRPCMethodParam = 1885434477,
    keyRPCMethodParamOrder = 795832932,
    keyAEPOSTHeaderData = 1885889892,
    keyAEReplyHeaderData = 1919444324,
    keyAEXMLRequestData = 2020762993,
    keyAEXMLReplyData = 2020762992,
    keyAdditionalHTTPHeaders = 1634231652,
    keySOAPAction = 1935762292,
    keySOAPMethodNameSpace = 1836281955,
    keySOAPMethodNameSpaceURI = 1836281973,
    keySOAPSchemaVersion = 1936941928,
};

pub const anon2881 = enum(AEKeyword) {
    keySOAPStructureMetaData = 796093796,
    keySOAPSMDNamespace = 1936944755,
    keySOAPSMDNamespaceURI = 1936944757,
    keySOAPSMDType = 1936946288,
};

pub const anon3001 = enum(AEKeyword) {
    keyAEAngle = 1801547367,
    keyAEArcAngle = 1885434467,
};

pub const anon3321 = enum(u32) {
    kAEDescListFactorNone = 0,
    kAEDescListFactorType = 4,
    kAEDescListFactorTypeAndSize = 8,
};

pub const anon3391 = enum(i32) {
    kAutoGenerateReturnID = -1,
    kAnyTransactionID = 0,
};

pub const OpaqueAEDataStorageType = extern struct {};

pub const AEDataStorageType = ?*OpaqueAEDataStorageType;

pub const AEDataStorage = ?*AEDataStorageType;

pub const AEDesc = extern struct {
    descriptorType: DescType,
    dataHandle: AEDataStorage,
};

pub const AEDescPtr = ?*AEDesc;

pub const AEKeyDesc = extern struct {
    descKey: AEKeyword,
    descContent: AEDesc,
};

pub const AEDescList = AEDesc;

pub const AERecord = AEDescList;

pub const AEAddressDesc = AEDesc;

pub const AppleEvent = AERecord;

pub const AppleEventPtr = ?*AppleEvent;

pub const AEReturnID = objc.SInt16;

pub const AETransactionID = objc.SInt32;

pub const AEEventClass = objc.FourCharCode;

pub const AEEventID = objc.FourCharCode;

pub const AEArrayType = objc.SInt8;

pub const AEArrayData = extern union {
    kAEDataArray: [1]objc.SInt16,
    kAEPackedArray: [1]i8,
    kAEHandleArray: [1]objc.Handle,
    kAEDescArray: [1]AEDesc,
    kAEKeyDescArray: [1]AEKeyDesc,
};

pub const AEArrayDataPointer = ?*AEArrayData;

pub const AESendPriority = objc.SInt16;

pub const anon4051 = enum(u32) {
    kAENormalPriority = 0,
    kAEHighPriority = 1,
};

pub const AESendMode = objc.SInt32;

pub const anon4121 = enum(u32) {
    kAENoReply = 1,
    kAEQueueReply = 2,
    kAEWaitReply = 3,
    kAEDontReconnect = 128,
    kAEWantReceipt = 512,
    kAENeverInteract = 16,
    kAECanInteract = 32,
    kAEAlwaysInteract = 48,
    kAECanSwitchLayer = 64,
    kAEDontRecord = 4096,
    kAEDontExecute = 8192,
    kAEProcessNonReplyEvents = 32768,
    kAEDoNotAutomaticallyAddAnnotationsToEvent = 65536,
};

pub const anon4301 = enum(i32) {
    kAEDefaultTimeout = -1,
    kNoTimeOut = -2,
};

pub const AECoerceDescProcPtr = ?*const fn (
    ?*AEDesc,
    DescType,
    objc.SRefCon,
    ?*AEDesc,
) callconv(.C) objc.OSErr;

pub const AECoercePtrProcPtr = ?*const fn (
    DescType,
    ?*anyopaque,
    objc.Size,
    DescType,
    objc.SRefCon,
    ?*AEDesc,
) callconv(.C) objc.OSErr;

pub const AECoerceDescUPP = AECoerceDescProcPtr;

pub const AECoercePtrUPP = AECoercePtrProcPtr;

extern "CoreServices" fn NewAECoerceDescUPP(userRoutine: AECoerceDescProcPtr) callconv(.C) AECoerceDescUPP;
pub const newAECoerceDescUPP = NewAECoerceDescUPP;

extern "CoreServices" fn NewAECoercePtrUPP(userRoutine: AECoercePtrProcPtr) callconv(.C) AECoercePtrUPP;
pub const newAECoercePtrUPP = NewAECoercePtrUPP;

extern "CoreServices" fn DisposeAECoerceDescUPP(userUPP: AECoerceDescUPP) callconv(.C) void;
pub const disposeAECoerceDescUPP = DisposeAECoerceDescUPP;

extern "CoreServices" fn DisposeAECoercePtrUPP(userUPP: AECoercePtrUPP) callconv(.C) void;
pub const disposeAECoercePtrUPP = DisposeAECoercePtrUPP;

extern "CoreServices" fn InvokeAECoerceDescUPP(
    fromDesc: ?*AEDesc,
    toType: DescType,
    handlerRefcon: objc.SRefCon,
    toDesc: ?*AEDesc,
    userUPP: AECoerceDescUPP,
) callconv(.C) objc.OSErr;
pub const invokeAECoerceDescUPP = InvokeAECoerceDescUPP;

extern "CoreServices" fn InvokeAECoercePtrUPP(
    typeCode: DescType,
    dataPtr: ?*anyopaque,
    dataSize: objc.Size,
    toType: DescType,
    handlerRefcon: objc.SRefCon,
    result: ?*AEDesc,
    userUPP: AECoercePtrUPP,
) callconv(.C) objc.OSErr;
pub const invokeAECoercePtrUPP = InvokeAECoercePtrUPP;

pub const AECoercionHandlerUPP = AECoerceDescUPP;

extern "CoreServices" fn AEInstallCoercionHandler(
    fromType: DescType,
    toType: DescType,
    handler: AECoercionHandlerUPP,
    handlerRefcon: objc.SRefCon,
    fromTypeIsDesc: objc.Boolean,
    isSysHandler: objc.Boolean,
) callconv(.C) objc.OSErr;
pub const aeInstallCoercionHandler = AEInstallCoercionHandler;

extern "CoreServices" fn AERemoveCoercionHandler(
    fromType: DescType,
    toType: DescType,
    handler: AECoercionHandlerUPP,
    isSysHandler: objc.Boolean,
) callconv(.C) objc.OSErr;
pub const aeRemoveCoercionHandler = AERemoveCoercionHandler;

extern "CoreServices" fn AEGetCoercionHandler(
    fromType: DescType,
    toType: DescType,
    handler: ?*AECoercionHandlerUPP,
    handlerRefcon: ?*objc.SRefCon,
    fromTypeIsDesc: ?*objc.Boolean,
    isSysHandler: objc.Boolean,
) callconv(.C) objc.OSErr;
pub const aeGetCoercionHandler = AEGetCoercionHandler;

extern "CoreServices" fn AECoercePtr(
    typeCode: DescType,
    dataPtr: ?*anyopaque,
    dataSize: objc.Size,
    toType: DescType,
    result: ?*AEDesc,
) callconv(.C) objc.OSErr;
pub const aeCoercePtr = AECoercePtr;

extern "CoreServices" fn AECoerceDesc(theAEDesc: ?*AEDesc, toType: DescType, result: ?*AEDesc) callconv(.C) objc.OSErr;
pub const aeCoerceDesc = AECoerceDesc;

extern "CoreServices" fn AEInitializeDesc(desc: ?*AEDesc) callconv(.C) void;
pub const aeInitializeDesc = AEInitializeDesc;

extern "CoreServices" fn AECreateDesc(
    typeCode: DescType,
    dataPtr: ?*anyopaque,
    dataSize: objc.Size,
    result: ?*AEDesc,
) callconv(.C) objc.OSErr;
pub const aeCreateDesc = AECreateDesc;

extern "CoreServices" fn AEDisposeDesc(theAEDesc: ?*AEDesc) callconv(.C) objc.OSErr;
pub const aeDisposeDesc = AEDisposeDesc;

extern "CoreServices" fn AEDuplicateDesc(theAEDesc: ?*AEDesc, result: ?*AEDesc) callconv(.C) objc.OSErr;
pub const aeDuplicateDesc = AEDuplicateDesc;

pub const AEDisposeExternalProcPtr = ?*const fn (?*anyopaque, objc.Size, objc.SRefCon) callconv(.C) void;

pub const AEDisposeExternalUPP = AEDisposeExternalProcPtr;

extern "CoreServices" fn AECreateDescFromExternalPtr(
    descriptorType: objc.OSType,
    dataPtr: ?*anyopaque,
    dataLength: objc.Size,
    disposeCallback: AEDisposeExternalUPP,
    disposeRefcon: objc.SRefCon,
    theDesc: ?*AEDesc,
) callconv(.C) objc.OSStatus;
pub const aeCreateDescFromExternalPtr = AECreateDescFromExternalPtr;

extern "CoreServices" fn AECompareDesc(desc1: ?*AEDesc, desc2: ?*AEDesc, resultP: ?*objc.Boolean) callconv(.C) objc.OSStatus;
pub const aeCompareDesc = AECompareDesc;

extern "CoreServices" fn AECreateList(
    factoringPtr: ?*anyopaque,
    factoredSize: objc.Size,
    isRecord: objc.Boolean,
    resultList: ?*AEDescList,
) callconv(.C) objc.OSErr;
pub const aeCreateList = AECreateList;

extern "CoreServices" fn AECountItems(theAEDescList: ?*AEDescList, theCount: ?*i64) callconv(.C) objc.OSErr;
pub const aeCountItems = AECountItems;

extern "CoreServices" fn AEPutPtr(
    theAEDescList: ?*AEDescList,
    index: i64,
    typeCode: DescType,
    dataPtr: ?*anyopaque,
    dataSize: objc.Size,
) callconv(.C) objc.OSErr;
pub const aePutPtr = AEPutPtr;

extern "CoreServices" fn AEPutDesc(theAEDescList: ?*AEDescList, index: i64, theAEDesc: ?*AEDesc) callconv(.C) objc.OSErr;
pub const aePutDesc = AEPutDesc;

extern "CoreServices" fn AEGetNthPtr(
    theAEDescList: ?*AEDescList,
    index: i64,
    desiredType: DescType,
    theAEKeyword: ?*AEKeyword,
    typeCode: ?*DescType,
    dataPtr: ?*anyopaque,
    maximumSize: objc.Size,
    actualSize: ?*objc.Size,
) callconv(.C) objc.OSErr;
pub const aeGetNthPtr = AEGetNthPtr;

extern "CoreServices" fn AEGetNthDesc(
    theAEDescList: ?*AEDescList,
    index: i64,
    desiredType: DescType,
    theAEKeyword: ?*AEKeyword,
    result: ?*AEDesc,
) callconv(.C) objc.OSErr;
pub const aeGetNthDesc = AEGetNthDesc;

extern "CoreServices" fn AESizeOfNthItem(
    theAEDescList: ?*AEDescList,
    index: i64,
    typeCode: ?*DescType,
    dataSize: ?*objc.Size,
) callconv(.C) objc.OSErr;
pub const aeSizeOfNthItem = AESizeOfNthItem;

extern "CoreServices" fn AEGetArray(
    theAEDescList: ?*AEDescList,
    arrayType: AEArrayType,
    arrayPtr: AEArrayDataPointer,
    maximumSize: objc.Size,
    itemType: ?*DescType,
    itemSize: ?*objc.Size,
    itemCount: ?*i64,
) callconv(.C) objc.OSErr;
pub const aeGetArray = AEGetArray;

extern "CoreServices" fn AEPutArray(
    theAEDescList: ?*AEDescList,
    arrayType: AEArrayType,
    arrayPtr: ?*AEArrayData,
    itemType: DescType,
    itemSize: objc.Size,
    itemCount: i64,
) callconv(.C) objc.OSErr;
pub const aePutArray = AEPutArray;

extern "CoreServices" fn AEDeleteItem(theAEDescList: ?*AEDescList, index: i64) callconv(.C) objc.OSErr;
pub const aeDeleteItem = AEDeleteItem;

extern "CoreServices" fn AECheckIsRecord(theDesc: ?*AEDesc) callconv(.C) objc.Boolean;
pub const aeCheckIsRecord = AECheckIsRecord;

extern "CoreServices" fn AECreateAppleEvent(
    theAEEventClass: AEEventClass,
    theAEEventID: AEEventID,
    target: ?*AEAddressDesc,
    returnID: AEReturnID,
    transactionID: AETransactionID,
    result: ?*AppleEvent,
) callconv(.C) objc.OSErr;
pub const aeCreateAppleEvent = AECreateAppleEvent;

extern "CoreServices" fn AEPutParamPtr(
    theAppleEvent: ?*AppleEvent,
    theAEKeyword: AEKeyword,
    typeCode: DescType,
    dataPtr: ?*anyopaque,
    dataSize: objc.Size,
) callconv(.C) objc.OSErr;
pub const aePutParamPtr = AEPutParamPtr;

extern "CoreServices" fn AEPutParamDesc(theAppleEvent: ?*AppleEvent, theAEKeyword: AEKeyword, theAEDesc: ?*AEDesc) callconv(.C) objc.OSErr;
pub const aePutParamDesc = AEPutParamDesc;

extern "CoreServices" fn AEGetParamPtr(
    theAppleEvent: ?*AppleEvent,
    theAEKeyword: AEKeyword,
    desiredType: DescType,
    actualType: ?*DescType,
    dataPtr: ?*anyopaque,
    maximumSize: objc.Size,
    actualSize: ?*objc.Size,
) callconv(.C) objc.OSErr;
pub const aeGetParamPtr = AEGetParamPtr;

extern "CoreServices" fn AEGetParamDesc(
    theAppleEvent: ?*AppleEvent,
    theAEKeyword: AEKeyword,
    desiredType: DescType,
    result: ?*AEDesc,
) callconv(.C) objc.OSErr;
pub const aeGetParamDesc = AEGetParamDesc;

extern "CoreServices" fn AESizeOfParam(
    theAppleEvent: ?*AppleEvent,
    theAEKeyword: AEKeyword,
    typeCode: ?*DescType,
    dataSize: ?*objc.Size,
) callconv(.C) objc.OSErr;
pub const aeSizeOfParam = AESizeOfParam;

extern "CoreServices" fn AEDeleteParam(theAppleEvent: ?*AppleEvent, theAEKeyword: AEKeyword) callconv(.C) objc.OSErr;
pub const aeDeleteParam = AEDeleteParam;

extern "CoreServices" fn AEGetAttributePtr(
    theAppleEvent: ?*AppleEvent,
    theAEKeyword: AEKeyword,
    desiredType: DescType,
    typeCode: ?*DescType,
    dataPtr: ?*anyopaque,
    maximumSize: objc.Size,
    actualSize: ?*objc.Size,
) callconv(.C) objc.OSErr;
pub const aeGetAttributePtr = AEGetAttributePtr;

extern "CoreServices" fn AEGetAttributeDesc(
    theAppleEvent: ?*AppleEvent,
    theAEKeyword: AEKeyword,
    desiredType: DescType,
    result: ?*AEDesc,
) callconv(.C) objc.OSErr;
pub const aeGetAttributeDesc = AEGetAttributeDesc;

extern "CoreServices" fn AESizeOfAttribute(
    theAppleEvent: ?*AppleEvent,
    theAEKeyword: AEKeyword,
    typeCode: ?*DescType,
    dataSize: ?*objc.Size,
) callconv(.C) objc.OSErr;
pub const aeSizeOfAttribute = AESizeOfAttribute;

extern "CoreServices" fn AEPutAttributePtr(
    theAppleEvent: ?*AppleEvent,
    theAEKeyword: AEKeyword,
    typeCode: DescType,
    dataPtr: ?*anyopaque,
    dataSize: objc.Size,
) callconv(.C) objc.OSErr;
pub const aePutAttributePtr = AEPutAttributePtr;

extern "CoreServices" fn AEPutAttributeDesc(theAppleEvent: ?*AppleEvent, theAEKeyword: AEKeyword, theAEDesc: ?*AEDesc) callconv(.C) objc.OSErr;
pub const aePutAttributeDesc = AEPutAttributeDesc;

extern "CoreServices" fn AESizeOfFlattenedDesc(theAEDesc: ?*AEDesc) callconv(.C) objc.Size;
pub const aeSizeOfFlattenedDesc = AESizeOfFlattenedDesc;

extern "CoreServices" fn AEFlattenDesc(
    theAEDesc: ?*AEDesc,
    buffer: objc.Ptr,
    bufferSize: objc.Size,
    actualSize: ?*objc.Size,
) callconv(.C) objc.OSStatus;
pub const aeFlattenDesc = AEFlattenDesc;

extern "CoreServices" fn AEUnflattenDesc(buffer: ?*anyopaque, result: ?*AEDesc) callconv(.C) objc.OSStatus;
pub const aeUnflattenDesc = AEUnflattenDesc;

extern "CoreServices" fn AEUnflattenDescFromBytes(buffer: ?*anyopaque, bufferLen: objc.size_t, result: ?*AEDesc) callconv(.C) objc.OSStatus;
pub const aeUnflattenDescFromBytes = AEUnflattenDescFromBytes;

extern "CoreServices" fn AEGetDescData(theAEDesc: ?*AEDesc, dataPtr: ?*anyopaque, maximumSize: objc.Size) callconv(.C) objc.OSErr;
pub const aeGetDescData = AEGetDescData;

extern "CoreServices" fn AEGetDescDataSize(theAEDesc: ?*AEDesc) callconv(.C) objc.Size;
pub const aeGetDescDataSize = AEGetDescDataSize;

extern "CoreServices" fn AEReplaceDescData(
    typeCode: DescType,
    dataPtr: ?*anyopaque,
    dataSize: objc.Size,
    theAEDesc: ?*AEDesc,
) callconv(.C) objc.OSErr;
pub const aeReplaceDescData = AEReplaceDescData;

extern "CoreServices" fn AEGetDescDataRange(
    dataDesc: ?*AEDesc,
    buffer: ?*anyopaque,
    offset: objc.Size,
    length: objc.Size,
) callconv(.C) objc.OSStatus;
pub const aeGetDescDataRange = AEGetDescDataRange;

pub const AEEventHandlerProcPtr = ?*const fn (?*AppleEvent, ?*AppleEvent, objc.SRefCon) callconv(.C) objc.OSErr;

pub const AEEventHandlerUPP = AEEventHandlerProcPtr;

extern "CoreServices" fn NewAEDisposeExternalUPP(userRoutine: AEDisposeExternalProcPtr) callconv(.C) AEDisposeExternalUPP;
pub const newAEDisposeExternalUPP = NewAEDisposeExternalUPP;

extern "CoreServices" fn NewAEEventHandlerUPP(userRoutine: AEEventHandlerProcPtr) callconv(.C) AEEventHandlerUPP;
pub const newAEEventHandlerUPP = NewAEEventHandlerUPP;

extern "CoreServices" fn DisposeAEDisposeExternalUPP(userUPP: AEDisposeExternalUPP) callconv(.C) void;
pub const disposeAEDisposeExternalUPP = DisposeAEDisposeExternalUPP;

extern "CoreServices" fn DisposeAEEventHandlerUPP(userUPP: AEEventHandlerUPP) callconv(.C) void;
pub const disposeAEEventHandlerUPP = DisposeAEEventHandlerUPP;

extern "CoreServices" fn InvokeAEDisposeExternalUPP(
    dataPtr: ?*anyopaque,
    dataLength: objc.Size,
    refcon: objc.SRefCon,
    userUPP: AEDisposeExternalUPP,
) callconv(.C) void;
pub const invokeAEDisposeExternalUPP = InvokeAEDisposeExternalUPP;

extern "CoreServices" fn InvokeAEEventHandlerUPP(
    theAppleEvent: ?*AppleEvent,
    reply: ?*AppleEvent,
    handlerRefcon: objc.SRefCon,
    userUPP: AEEventHandlerUPP,
) callconv(.C) objc.OSErr;
pub const invokeAEEventHandlerUPP = InvokeAEEventHandlerUPP;

pub const anon761 = enum(AEEventID) {
    kAEOpenApplication = 1868656752,
    kAEOpenDocuments = 1868853091,
    kAEPrintDocuments = 1885630307,
    kAEOpenContents = 1868787566,
    kAEQuitApplication = 1903520116,
    kAEAnswer = 1634628466,
    kAEApplicationDied = 1868720500,
    kAEShowPreferences = 1886545254,
};

pub const AEEventSource = objc.SInt8;

pub const anon1202 = enum(i32) {
    errAETargetAddressNotPermitted = -1742,
    errAEEventNotPermitted = -1743,
};

extern "CoreServices" fn AEInstallEventHandler(
    theAEEventClass: AEEventClass,
    theAEEventID: AEEventID,
    handler: AEEventHandlerUPP,
    handlerRefcon: objc.SRefCon,
    isSysHandler: objc.Boolean,
) callconv(.C) objc.OSErr;
pub const aeInstallEventHandler = AEInstallEventHandler;

extern "CoreServices" fn AERemoveEventHandler(
    theAEEventClass: AEEventClass,
    theAEEventID: AEEventID,
    handler: AEEventHandlerUPP,
    isSysHandler: objc.Boolean,
) callconv(.C) objc.OSErr;
pub const aeRemoveEventHandler = AERemoveEventHandler;

extern "CoreServices" fn AEGetEventHandler(
    theAEEventClass: AEEventClass,
    theAEEventID: AEEventID,
    handler: ?*AEEventHandlerUPP,
    handlerRefcon: ?*objc.SRefCon,
    isSysHandler: objc.Boolean,
) callconv(.C) objc.OSErr;
pub const aeGetEventHandler = AEGetEventHandler;

extern "CoreServices" fn AEInstallSpecialHandler(functionClass: AEKeyword, handler: AEEventHandlerUPP, isSysHandler: objc.Boolean) callconv(.C) objc.OSErr;
pub const aeInstallSpecialHandler = AEInstallSpecialHandler;

extern "CoreServices" fn AERemoveSpecialHandler(functionClass: AEKeyword, handler: AEEventHandlerUPP, isSysHandler: objc.Boolean) callconv(.C) objc.OSErr;
pub const aeRemoveSpecialHandler = AERemoveSpecialHandler;

extern "CoreServices" fn AEGetSpecialHandler(functionClass: AEKeyword, handler: ?*AEEventHandlerUPP, isSysHandler: objc.Boolean) callconv(.C) objc.OSErr;
pub const aeGetSpecialHandler = AEGetSpecialHandler;

extern "CoreServices" fn AEManagerInfo(keyWord: AEKeyword, result: ?*i64) callconv(.C) objc.OSErr;
pub const aeManagerInfo = AEManagerInfo;

pub const AERemoteProcessResolverContext = extern struct {
    version: core_foundation.Index,
    info: ?*anyopaque,
    retain: core_foundation.AllocatorRetainCallBack,
    release: core_foundation.AllocatorReleaseCallBack,
    copyDescription: core_foundation.AllocatorCopyDescriptionCallBack,
};

pub const AERemoteProcessResolver = extern struct {};

pub const AERemoteProcessResolverRef = ?*AERemoteProcessResolver;

extern "CoreServices" fn AECreateRemoteProcessResolver(allocator: core_foundation.AllocatorRef, url: core_foundation.URLRef) callconv(.C) AERemoteProcessResolverRef;
pub const aeCreateRemoteProcessResolver = AECreateRemoteProcessResolver;

extern "CoreServices" fn AEDisposeRemoteProcessResolver(ref: AERemoteProcessResolverRef) callconv(.C) void;
pub const aeDisposeRemoteProcessResolver = AEDisposeRemoteProcessResolver;

extern "CoreServices" fn AERemoteProcessResolverGetProcesses(ref: AERemoteProcessResolverRef, outError: ?*core_foundation.StreamError) callconv(.C) core_foundation.ArrayRef;
pub const aeRemoteProcessResolverGetProcesses = AERemoteProcessResolverGetProcesses;

pub const AERemoteProcessResolverCallback = ?*const fn (AERemoteProcessResolverRef, ?*anyopaque) callconv(.C) void;

extern "CoreServices" fn AERemoteProcessResolverScheduleWithRunLoop(
    ref: AERemoteProcessResolverRef,
    runLoop: core_foundation.RunLoopRef,
    runLoopMode: core_foundation.StringRef,
    callback: AERemoteProcessResolverCallback,
    ctx: ?*AERemoteProcessResolverContext,
) callconv(.C) void;
pub const aeRemoteProcessResolverScheduleWithRunLoop = AERemoteProcessResolverScheduleWithRunLoop;

extern "CoreServices" fn AEDeterminePermissionToAutomateTarget(
    target: ?*AEAddressDesc,
    theAEEventClass: AEEventClass,
    theAEEventID: AEEventID,
    askUserIfNeeded: objc.Boolean,
) callconv(.C) objc.OSStatus;
pub const aeDeterminePermissionToAutomateTarget = AEDeterminePermissionToAutomateTarget;

pub const anon6151 = enum(u32) {
    kAEDoNotPromptForUserConsent = 131072,
};

extern "CoreServices" fn CreateOffsetDescriptor(theOffset: i64, theDescriptor: ?*AEDesc) callconv(.C) objc.OSErr;
pub const createOffsetDescriptor = CreateOffsetDescriptor;

extern "CoreServices" fn CreateCompDescriptor(
    comparisonOperator: DescType,
    operand1: ?*AEDesc,
    operand2: ?*AEDesc,
    disposeInputs: objc.Boolean,
    theDescriptor: ?*AEDesc,
) callconv(.C) objc.OSErr;
pub const createCompDescriptor = CreateCompDescriptor;

extern "CoreServices" fn CreateLogicalDescriptor(
    theLogicalTerms: ?*AEDescList,
    theLogicOperator: DescType,
    disposeInputs: objc.Boolean,
    theDescriptor: ?*AEDesc,
) callconv(.C) objc.OSErr;
pub const createLogicalDescriptor = CreateLogicalDescriptor;

extern "CoreServices" fn CreateObjSpecifier(
    desiredClass: DescType,
    theContainer: ?*AEDesc,
    keyForm: DescType,
    keyData: ?*AEDesc,
    disposeInputs: objc.Boolean,
    objSpecifier: ?*AEDesc,
) callconv(.C) objc.OSErr;
pub const createObjSpecifier = CreateObjSpecifier;

extern "CoreServices" fn CreateRangeDescriptor(
    rangeStart: ?*AEDesc,
    rangeStop: ?*AEDesc,
    disposeInputs: objc.Boolean,
    theDescriptor: ?*AEDesc,
) callconv(.C) objc.OSErr;
pub const createRangeDescriptor = CreateRangeDescriptor;

pub const anon681 = enum(AEKeyword) {
    keyAERangeStart = 1937006962,
    keyAERangeStop = 1937010544,
    keyDisposeTokenProc = 2020896619,
    keyAECompareProc = 1668116594,
    keyAECountProc = 1668247156,
    keyAEMarkTokenProc = 1835755876,
    keyAEMarkProc = 1835102827,
    keyAEAdjustMarksProc = 1633970797,
    keyAEGetErrDescProc = 1768842339,
};

pub const ccntTokenRecord = extern struct {
    tokenClass: DescType,
    token: AEDesc,
};

pub const ccntTokenRecPtr = ?*ccntTokenRecord;

pub const ccntTokenRecHandle = ?*ccntTokenRecPtr;

pub const OSLAccessorProcPtr = ?*const fn (
    DescType,
    ?*AEDesc,
    DescType,
    DescType,
    ?*AEDesc,
    ?*AEDesc,
    objc.SRefCon,
) callconv(.C) objc.OSErr;

pub const OSLCompareProcPtr = ?*const fn (
    DescType,
    ?*AEDesc,
    ?*AEDesc,
    ?*objc.Boolean,
) callconv(.C) objc.OSErr;

pub const OSLCountProcPtr = ?*const fn (
    DescType,
    DescType,
    ?*AEDesc,
    ?*i64,
) callconv(.C) objc.OSErr;

pub const OSLDisposeTokenProcPtr = ?*const fn (?*AEDesc) callconv(.C) objc.OSErr;

pub const OSLGetMarkTokenProcPtr = ?*const fn (?*AEDesc, DescType, ?*AEDesc) callconv(.C) objc.OSErr;

pub const OSLGetErrDescProcPtr = ?*const fn (?*?*AEDesc) callconv(.C) objc.OSErr;

pub const OSLMarkProcPtr = ?*const fn (?*AEDesc, ?*AEDesc, i64) callconv(.C) objc.OSErr;

pub const OSLAdjustMarksProcPtr = ?*const fn (i64, i64, ?*AEDesc) callconv(.C) objc.OSErr;

pub const OSLAccessorUPP = OSLAccessorProcPtr;

pub const OSLCompareUPP = OSLCompareProcPtr;

pub const OSLCountUPP = OSLCountProcPtr;

pub const OSLDisposeTokenUPP = OSLDisposeTokenProcPtr;

pub const OSLGetMarkTokenUPP = OSLGetMarkTokenProcPtr;

pub const OSLGetErrDescUPP = OSLGetErrDescProcPtr;

pub const OSLMarkUPP = OSLMarkProcPtr;

pub const OSLAdjustMarksUPP = OSLAdjustMarksProcPtr;

extern "CoreServices" fn NewOSLAccessorUPP(userRoutine: OSLAccessorProcPtr) callconv(.C) OSLAccessorUPP;
pub const newOSLAccessorUPP = NewOSLAccessorUPP;

extern "CoreServices" fn NewOSLCompareUPP(userRoutine: OSLCompareProcPtr) callconv(.C) OSLCompareUPP;
pub const newOSLCompareUPP = NewOSLCompareUPP;

extern "CoreServices" fn NewOSLCountUPP(userRoutine: OSLCountProcPtr) callconv(.C) OSLCountUPP;
pub const newOSLCountUPP = NewOSLCountUPP;

extern "CoreServices" fn NewOSLDisposeTokenUPP(userRoutine: OSLDisposeTokenProcPtr) callconv(.C) OSLDisposeTokenUPP;
pub const newOSLDisposeTokenUPP = NewOSLDisposeTokenUPP;

extern "CoreServices" fn NewOSLGetMarkTokenUPP(userRoutine: OSLGetMarkTokenProcPtr) callconv(.C) OSLGetMarkTokenUPP;
pub const newOSLGetMarkTokenUPP = NewOSLGetMarkTokenUPP;

extern "CoreServices" fn NewOSLGetErrDescUPP(userRoutine: OSLGetErrDescProcPtr) callconv(.C) OSLGetErrDescUPP;
pub const newOSLGetErrDescUPP = NewOSLGetErrDescUPP;

extern "CoreServices" fn NewOSLMarkUPP(userRoutine: OSLMarkProcPtr) callconv(.C) OSLMarkUPP;
pub const newOSLMarkUPP = NewOSLMarkUPP;

extern "CoreServices" fn NewOSLAdjustMarksUPP(userRoutine: OSLAdjustMarksProcPtr) callconv(.C) OSLAdjustMarksUPP;
pub const newOSLAdjustMarksUPP = NewOSLAdjustMarksUPP;

extern "CoreServices" fn DisposeOSLAccessorUPP(userUPP: OSLAccessorUPP) callconv(.C) void;
pub const disposeOSLAccessorUPP = DisposeOSLAccessorUPP;

extern "CoreServices" fn DisposeOSLCompareUPP(userUPP: OSLCompareUPP) callconv(.C) void;
pub const disposeOSLCompareUPP = DisposeOSLCompareUPP;

extern "CoreServices" fn DisposeOSLCountUPP(userUPP: OSLCountUPP) callconv(.C) void;
pub const disposeOSLCountUPP = DisposeOSLCountUPP;

extern "CoreServices" fn DisposeOSLDisposeTokenUPP(userUPP: OSLDisposeTokenUPP) callconv(.C) void;
pub const disposeOSLDisposeTokenUPP = DisposeOSLDisposeTokenUPP;

extern "CoreServices" fn DisposeOSLGetMarkTokenUPP(userUPP: OSLGetMarkTokenUPP) callconv(.C) void;
pub const disposeOSLGetMarkTokenUPP = DisposeOSLGetMarkTokenUPP;

extern "CoreServices" fn DisposeOSLGetErrDescUPP(userUPP: OSLGetErrDescUPP) callconv(.C) void;
pub const disposeOSLGetErrDescUPP = DisposeOSLGetErrDescUPP;

extern "CoreServices" fn DisposeOSLMarkUPP(userUPP: OSLMarkUPP) callconv(.C) void;
pub const disposeOSLMarkUPP = DisposeOSLMarkUPP;

extern "CoreServices" fn DisposeOSLAdjustMarksUPP(userUPP: OSLAdjustMarksUPP) callconv(.C) void;
pub const disposeOSLAdjustMarksUPP = DisposeOSLAdjustMarksUPP;

extern "CoreServices" fn InvokeOSLAccessorUPP(
    desiredClass: DescType,
    container: ?*AEDesc,
    containerClass: DescType,
    form: DescType,
    selectionData: ?*AEDesc,
    value: ?*AEDesc,
    accessorRefcon: objc.SRefCon,
    userUPP: OSLAccessorUPP,
) callconv(.C) objc.OSErr;
pub const invokeOSLAccessorUPP = InvokeOSLAccessorUPP;

extern "CoreServices" fn InvokeOSLCompareUPP(
    oper: DescType,
    obj1: ?*AEDesc,
    obj2: ?*AEDesc,
    result: ?*objc.Boolean,
    userUPP: OSLCompareUPP,
) callconv(.C) objc.OSErr;
pub const invokeOSLCompareUPP = InvokeOSLCompareUPP;

extern "CoreServices" fn InvokeOSLCountUPP(
    desiredType: DescType,
    containerClass: DescType,
    container: ?*AEDesc,
    result: ?*i64,
    userUPP: OSLCountUPP,
) callconv(.C) objc.OSErr;
pub const invokeOSLCountUPP = InvokeOSLCountUPP;

extern "CoreServices" fn InvokeOSLDisposeTokenUPP(unneededToken: ?*AEDesc, userUPP: OSLDisposeTokenUPP) callconv(.C) objc.OSErr;
pub const invokeOSLDisposeTokenUPP = InvokeOSLDisposeTokenUPP;

extern "CoreServices" fn InvokeOSLGetMarkTokenUPP(
    dContainerToken: ?*AEDesc,
    containerClass: DescType,
    result: ?*AEDesc,
    userUPP: OSLGetMarkTokenUPP,
) callconv(.C) objc.OSErr;
pub const invokeOSLGetMarkTokenUPP = InvokeOSLGetMarkTokenUPP;

extern "CoreServices" fn InvokeOSLGetErrDescUPP(appDescPtr: ?*?*AEDesc, userUPP: OSLGetErrDescUPP) callconv(.C) objc.OSErr;
pub const invokeOSLGetErrDescUPP = InvokeOSLGetErrDescUPP;

extern "CoreServices" fn InvokeOSLMarkUPP(
    dToken: ?*AEDesc,
    markToken: ?*AEDesc,
    index: i64,
    userUPP: OSLMarkUPP,
) callconv(.C) objc.OSErr;
pub const invokeOSLMarkUPP = InvokeOSLMarkUPP;

extern "CoreServices" fn InvokeOSLAdjustMarksUPP(
    newStart: i64,
    newStop: i64,
    markToken: ?*AEDesc,
    userUPP: OSLAdjustMarksUPP,
) callconv(.C) objc.OSErr;
pub const invokeOSLAdjustMarksUPP = InvokeOSLAdjustMarksUPP;

extern "CoreServices" fn AEObjectInit() callconv(.C) objc.OSErr;
pub const aeObjectInit = AEObjectInit;

extern "CoreServices" fn AESetObjectCallbacks(
    myCompareProc: OSLCompareUPP,
    myCountProc: OSLCountUPP,
    myDisposeTokenProc: OSLDisposeTokenUPP,
    myGetMarkTokenProc: OSLGetMarkTokenUPP,
    myMarkProc: OSLMarkUPP,
    myAdjustMarksProc: OSLAdjustMarksUPP,
    myGetErrDescProcPtr: OSLGetErrDescUPP,
) callconv(.C) objc.OSErr;
pub const aeSetObjectCallbacks = AESetObjectCallbacks;

extern "CoreServices" fn AEResolve(objectSpecifier: ?*AEDesc, callbackFlags: i16, theToken: ?*AEDesc) callconv(.C) objc.OSErr;
pub const aeResolve = AEResolve;

extern "CoreServices" fn AEInstallObjectAccessor(
    desiredClass: DescType,
    containerType: DescType,
    theAccessor: OSLAccessorUPP,
    accessorRefcon: objc.SRefCon,
    isSysHandler: objc.Boolean,
) callconv(.C) objc.OSErr;
pub const aeInstallObjectAccessor = AEInstallObjectAccessor;

extern "CoreServices" fn AERemoveObjectAccessor(
    desiredClass: DescType,
    containerType: DescType,
    theAccessor: OSLAccessorUPP,
    isSysHandler: objc.Boolean,
) callconv(.C) objc.OSErr;
pub const aeRemoveObjectAccessor = AERemoveObjectAccessor;

extern "CoreServices" fn AEGetObjectAccessor(
    desiredClass: DescType,
    containerType: DescType,
    accessor: ?*OSLAccessorUPP,
    accessorRefcon: ?*objc.SRefCon,
    isSysHandler: objc.Boolean,
) callconv(.C) objc.OSErr;
pub const aeGetObjectAccessor = AEGetObjectAccessor;

extern "CoreServices" fn AEDisposeToken(theToken: ?*AEDesc) callconv(.C) objc.OSErr;
pub const aeDisposeToken = AEDisposeToken;

extern "CoreServices" fn AECallObjectAccessor(
    desiredClass: DescType,
    containerToken: ?*AEDesc,
    containerClass: DescType,
    keyForm: DescType,
    keyData: ?*AEDesc,
    token: ?*AEDesc,
) callconv(.C) objc.OSErr;
pub const aeCallObjectAccessor = AECallObjectAccessor;

pub const anon1281 = enum(i32) {
    startupFolderIconResource = -3981,
    ownedFolderIconResource = -3980,
    dropFolderIconResource = -3979,
    sharedFolderIconResource = -3978,
    mountedFolderIconResource = -3977,
    controlPanelFolderIconResource = -3976,
    printMonitorFolderIconResource = -3975,
    preferencesFolderIconResource = -3974,
    extensionsFolderIconResource = -3973,
    fontsFolderIconResource = -3968,
    fullTrashIconResource = -3984,
};

pub const anon1511 = enum(objc.OSType) {
    kAEDoObjectsExist = 1685022072,
    kAEDoScript = 1685025635,
    kAEDrag = 1685217639,
    kAEDuplicateSelection = 1935963504,
    kAEEditGraphic = 1701079412,
    kAEEmptyTrash = 1701671028,
    kAEEnd = 1701733408,
    kAEEndsWith = 1701733491,
    kAEEndTransaction = 1701733492,
    kAEEquals = 1025515552,
    kAEExpanded = 1885698160,
    kAEFast = 1717662580,
    kAEFinderEvents = 1179534418,
    kAEFormulaProtect = 1718645359,
    kAEFullyJustified = 1718971500,
    kAEGetClassInfo = 1903125098,
    kAEGetData = 1734702180,
    kAEGetDataSize = 1685285242,
    kAEGetEventInfo = 1735681385,
    kAEGetInfoSelection = 1936289382,
};

pub const anon1971 = enum(objc.OSType) {
    kAENonmodifiable = 1852665700,
    kAEOpen = 1868853091,
    kAEOpenSelection = 1936683109,
    kAEOutline = 1869968492,
    kAEPageSetup = 1885827957,
    kAEPaste = 1885434740,
    kAEPlain = 1886151022,
    kAEPrint = 1885630307,
    kAEPrintSelection = 1936749161,
    kAEPrintWindow = 1886873966,
    kAEPutAwaySelection = 1936749940,
    kAEQDAddOver = 1633969263,
    kAEQDAddPin = 1633969264,
    kAEQDAdMax = 1633971576,
    kAEQDAdMin = 1633971566,
    kAEQDBic = 1651073824,
    kAEQDBlend = 1651273316,
    kAEQDCopy = 1668315424,
    kAEQDNotBic = 1851943267,
    kAEQDNotCopy = 1852010617,
};

pub const anon2201 = enum(objc.OSType) {
    kAEQDNotOr = 1853124466,
    kAEQDNotXor = 1853386610,
    kAEQDOr = 1869750304,
    kAEQDSubOver = 1937072751,
    kAEQDSubPin = 1937072752,
    kAEQDSupplementalSuite = 1902408560,
    kAEQDXor = 2020569632,
    kAEQuickdrawSuite = 1902408311,
    kAEQuitAll = 1903520097,
    kAERedo = 1919247471,
    kAERegular = 1919248236,
    kAEReopenApplication = 1918988400,
    kAEReplace = 1919970403,
    kAERequiredSuite = 1919250788,
    kAERestart = 1919251316,
    kAERevealSelection = 1936876918,
    kAERevert = 1920365172,
    kAERightJustified = 1919379572,
    kAESave = 1935767141,
    kAESelect = 1936483188,
    kAESetData = 1936028772,
};

pub const anon3051 = enum(AEKeyword) {
    keyAEBaseAddr = 1650549860,
    keyAEBestType = 1885500276,
    keyAEBgndColor = 1801610092,
    keyAEBgndPattern = 1801613428,
    keyAEBounds = 1885498980,
    keyAECellList = 1801677940,
    keyAEClassID = 1668041028,
    keyAEColor = 1668246642,
    keyAEColorTable = 1668052066,
    keyAECurveHeight = 1801676900,
    keyAECurveWidth = 1801680740,
    keyAEDashStyle = 1885631348,
    keyAEData = 1684108385,
    keyAEDefaultType = 1684366964,
    keyAEDefinitionRect = 1885631092,
    keyAEDescType = 1685288048,
    keyAEDestination = 1684370292,
    keyAEDoAntiAlias = 1634628705,
    keyAEDoDithered = 1734633844,
    keyAEDoRotate = 1801745012,
};

pub const anon3281 = enum(AEKeyword) {
    keyAEDoScale = 1802724193,
    keyAEDoTranslate = 1802793569,
    keyAEEditionFileLoc = 1701605219,
    keyAEElements = 1701604723,
    keyAEEndPoint = 1885695588,
    keyAEEventClass = 1702257516,
    keyAEEventID = 1702261865,
    keyAEFile = 1801873772,
    keyAEFileType = 1718383728,
    keyAEFillColor = 1718379372,
    keyAEFillPattern = 1718382708,
    keyAEFlipHorizontal = 1801873519,
    keyAEFlipVertical = 1801877108,
    keyAEFont = 1718578804,
    keyAEFormula = 1885761394,
    keyAEGraphicObjects = 1735352947,
    keyAEID = 1229201440,
    keyAEImageQuality = 1735488865,
    keyAEInsertHere = 1768846184,
    keyAEKeyForms = 1801812326,
};

pub const anon3741 = enum(AEKeyword) {
    keyAEPropData = 1886545012,
    keyAEProperties = 1903194735,
    keyAEProperty = 1802531440,
    keyAEPropFlags = 1886545511,
    keyAEPropID = 1886547824,
    keyAEProtection = 1886417519,
    keyAERenderAs = 1802659182,
    keyAERequestedType = 1920235888,
    keyAEResult = 757935405,
    keyAEResultInfo = 1920166254,
    keyAERotation = 1886547828,
    keyAERotPoint = 1802663024,
    keyAERowList = 1802660979,
    keyAESaveOptions = 1935767151,
    keyAEScale = 1886610284,
    keyAEScriptTag = 1886610292,
    keyAESearchText = 1937012852,
    keyAEShowWhere = 1936224119,
    keyAEStartAngle = 1885433447,
    keyAEStartPoint = 1886614640,
    keyAEStyles = 1802728569,
};

pub const anon3981 = enum(AEKeyword) {
    keyAESuiteID = 1937074548,
    keyAEText = 1802795124,
    keyAETextColor = 1886681187,
    keyAETextFont = 1886681190,
    keyAETextPointSize = 1886679155,
    keyAETextStyles = 1954050932,
    keyAETextLineHeight = 1802792040,
    keyAETextLineAscent = 1802789235,
    keyAETheText = 1953002616,
    keyAETransferMode = 1886418029,
    keyAETranslation = 1886679667,
    keyAETryAsStructGraf = 1953460071,
    keyAEUniformStyles = 1970500716,
    keyAEUpdateOn = 1886744676,
    keyAEUserTerm = 1970565741,
    keyAEWindow = 2003723383,
    keyAEWritingCode = 2003985252,
};

pub const anon4181 = enum(AEKeyword) {
    keyMiscellaneous = 1718448995,
    keySelection = 1718838636,
    keyWindow = 1802989156,
    keyWhen = 2003330414,
    keyWhere = 2003330418,
    keyModifiers = 1836016755,
    keyKey = 1801812256,
    keyKeyCode = 1668244581,
    keyKeyboard = 1801812322,
    keyDriveNumber = 1685222947,
    keyErrorCode = 1701999139,
    keyHighLevelClass = 1751346291,
    keyHighLevelID = 1751737376,
};

pub const anon4351 = enum(objc.OSType) {
    pArcAngle = 1885434467,
    pBackgroundColor = 1885496172,
    pBackgroundPattern = 1885499508,
    pBestType = 1885500276,
    pBounds = 1885498980,
    pClass = 1885564019,
    pClipboard = 1885564009,
    pColor = 1668246642,
    pColorTable = 1668052066,
    pContents = 1885564532,
    pCornerCurveHeight = 1885562980,
    pCornerCurveWidth = 1885566820,
    pDashStyle = 1885631348,
    pDefaultType = 1684366964,
    pDefinitionRect = 1885631092,
    pEnabled = 1701732972,
    pEndPoint = 1885695588,
    pFillColor = 1718379372,
    pFillPattern = 1718382708,
    pFont = 1718578804,
};

pub const anon4581 = enum(objc.OSType) {
    pFormula = 1885761394,
    pGraphicObjects = 1735352947,
    pHasCloseBox = 1751346274,
    pHasTitleBar = 1886677364,
    pID = 1229201440,
    pIndex = 1885955192,
    pInsertionLoc = 1885957747,
    pIsFloating = 1769170540,
    pIsFrontProcess = 1885959014,
    pIsModal = 1886220132,
    pIsModified = 1768779620,
    pIsResizable = 1886548858,
    pIsStationeryPad = 1886613604,
    pIsZoomable = 1769175661,
    pIsZoomed = 1887073645,
    pItemNumber = 1769237870,
    pJustification = 1886024564,
    pLineArrow = 1634890351,
    pMenuID = 1835952484,
    pName = 1886282093,
};

pub const anon5321 = enum(DescType) {
    typeFinderWindow = 1719101806,
    typeFixedPoint = 1718644340,
    typeFixedRectangle = 1718772596,
    typeGraphicLine = 1735158126,
    typeGraphicText = 1667724408,
    typeGroupedGraphic = 1668311395,
    typeInsertionLoc = 1768846188,
    typeIntlText = 1769240692,
    typeIntlWritingCode = 1768846444,
    typeLongDateTime = 1818522656,
    typeCFAbsoluteTime = 1667654004,
    typeISO8601DateTime = 1769172852,
    typeLongFixed = 1818654820,
    typeLongFixedPoint = 1818652788,
    typeLongFixedRectangle = 1818653283,
    typeLongPoint = 1819307636,
    typeLongRectangle = 1819435892,
    typeMachineLoc = 1833725795,
    typeOval = 1668249196,
    typeParamInfo = 1886218606,
    typePict = 1346978644,
};

pub const anon5561 = enum(DescType) {
    typePixelMap = 1668311416,
    typePixMapMinus = 1953525101,
    typePolygon = 1668310894,
    typePropInfo = 1885957734,
    typePtr = 1886679584,
    typeQDPoint = 1363439732,
    typeQDRegion = 1366452078,
    typeRectangle = 1668441443,
    typeRGB16 = 1953640758,
    typeRGB96 = 1953642806,
    typeRGBColor = 1666336578,
    typeRotation = 1953656692,
    typeRoundedRectangle = 1668444771,
    typeRow = 1668444023,
    typeScrapStyles = 1937013100,
    typeScript = 1935896692,
    typeStyledText = 1398036564,
    typeSuiteInfo = 1937074542,
    typeTable = 1668571756,
    typeTextStyles = 1953723513,
};

pub const anon5791 = enum(DescType) {
    typeTIFF = 1414088262,
    typeJPEG = 1246774599,
    typeGIF = 1195984486,
    typeVersion = 1986359923,
};

pub const anon5861 = enum(objc.OSType) {
    kAEMenuClass = 1835363957,
    kAEMenuSelect = 1835559284,
    kAEMouseDown = 1835300718,
    kAEMouseDownInBack = 1835295339,
    kAEKeyDown = 1801746286,
    kAEResized = 1920166266,
    kAEPromise = 1886547821,
};

pub const anon6051 = enum(DescType) {
    typeHIMenu = 1836016234,
    typeHIWindow = 2003788394,
};

pub const anon6161 = enum(u32) {
    kBySmallIcon = 0,
    kByIconView = 1,
    kByNameView = 2,
    kByDateView = 3,
    kBySizeView = 4,
    kByKindView = 5,
    kByCommentView = 6,
    kByLabelView = 7,
    kByVersionView = 8,
};

pub const anon6281 = enum(u32) {
    kAEInfo = 11,
    kAEMain = 0,
    kAESharing = 13,
};

pub const anon6771 = enum(u32) {
    kTSMOutsideOfBody = 1,
    kTSMInsideOfBody = 2,
    kTSMInsideOfActiveInputArea = 3,
};

pub const TextRange = extern struct {
    fStart: objc.SInt32,
    fEnd: objc.SInt32,
    fHiliteStyle: objc.SInt16,
};

pub const TextRangePtr = ?*TextRange;

pub const TextRangeHandle = ?*TextRangePtr;

pub const TextRangeArray = extern struct {
    fNumOfRanges: objc.SInt16,
    fRange: [1]TextRange,
};

pub const TextRangeArrayPtr = ?*TextRangeArray;

pub const TextRangeArrayHandle = ?*TextRangeArrayPtr;

pub const OffsetArray = extern struct {
    fNumOfOffsets: objc.SInt16,
    fOffset: [1]objc.SInt32,
};

pub const OffsetArrayPtr = ?*OffsetArray;

pub const OffsetArrayHandle = ?*OffsetArrayPtr;

pub const WritingCode = extern struct {
    theScriptCode: objc.ScriptCode,
    theLangCode: objc.LangCode,
};

pub const IntlText = extern struct {
    theScriptCode: objc.ScriptCode,
    theLangCode: objc.LangCode,
    theText: [1]i8,
};

pub const anon7231 = enum(u32) {
    kTSMHiliteCaretPosition = 1,
    kTSMHiliteRawText = 2,
    kTSMHiliteSelectedRawText = 3,
    kTSMHiliteConvertedText = 4,
    kTSMHiliteSelectedConvertedText = 5,
    kTSMHiliteBlockFillText = 6,
    kTSMHiliteOutlineText = 7,
    kTSMHiliteSelectedText = 8,
    kTSMHiliteNoHilite = 9,
};

pub const anon7501 = enum(AEKeyword) {
    keyAEHiliteRange = 1752329831,
    keyAEPinRange = 1886286439,
    keyAEClauseOffsets = 1668047221,
    keyAEOffset = 1868985204,
    keyAEPoint = 1735421811,
    keyAELeftSide = 1802265958,
    keyAERegionClass = 1919381091,
    keyAEDragging = 1651470188,
};

pub const anon8271 = enum(objc.OSType) {
    kAEISGetURL = 1735750252,
    KAEISHandleCGI = 1935961955,
};

pub const anon8331 = enum(objc.OSType) {
    cURL = 1970433056,
    cInternetAddress = 1229996356,
    cHTML = 1752460652,
    cFTPItem = 1718906912,
};

pub const anon8411 = enum(objc.OSType) {
    kAEISHTTPSearchArgs = 1801875314,
    kAEISPostArgs = 1886352244,
    kAEISMethod = 1835365480,
    kAEISClientAddress = 1633969266,
    kAEISUserName = 1970496882,
    kAEISPassword = 1885434739,
    kAEISFromUser = 1718775157,
    kAEISServerName = 1937141357,
    kAEISServerPort = 1937141876,
    kAEISScriptName = 1935896173,
    kAEISContentType = 1668577648,
    kAEISReferrer = 1919247986,
    kAEISUserAgent = 1097297524,
    kAEISAction = 1264673652,
    kAEISActionPath = 1264676980,
    kAEISClientIP = 1264806256,
    kAEISFullRequest = 1265005169,
};

pub const anon8621 = enum(objc.OSType) {
    pScheme = 1886745443,
    pHost = 1213158228,
    pPath = 1179930723,
    pUserName = 1380021614,
    pUserPassword = 1380020343,
    pDNSForm = 1883524691,
    pURL = 1884639820,
    pTextEncoding = 1886681189,
    pFTPKind = 1802071652,
};

pub const anon8751 = enum(objc.OSType) {
    eScheme = 1702060904,
    eurlHTTP = 1752462448,
    eurlHTTPS = 1752461427,
    eurlFTP = 1718906912,
    eurlMail = 1835100524,
    eurlFile = 1718185061,
    eurlGopher = 1735420018,
    eurlTelnet = 1953263220,
    eurlNews = 1852143475,
    eurlSNews = 1936619379,
    eurlNNTP = 1852732528,
    eurlMessage = 1835365235,
    eurlMailbox = 1835167608,
    eurlMulti = 1836412020,
    eurlLaunch = 1818326382,
    eurlAFP = 1634103328,
    eurlAT = 1635000352,
    eurlEPPC = 1701867619,
    eurlRTSP = 1920234352,
    eurlIMAP = 1768776048,
    eurlNFS = 1970169459,
    eurlPOP = 1970302832,
    eurlLDAP = 1970037872,
    eurlUnknown = 1970433087,
};

pub const anon9031 = enum(objc.OSType) {
    kConnSuite = 1835098979,
    cDevSpec = 1667523958,
    cAddressSpec = 1667327090,
    cADBAddress = 1667327074,
    cAppleTalkAddress = 1667331104,
    cBusAddress = 1667396979,
    cEthernetAddress = 1667591712,
    cFireWireAddress = 1667659552,
    cIPAddress = 1667854368,
    cLocalTalkAddress = 1668052000,
    cSCSIAddress = 1668506483,
    cTokenRingAddress = 1668575083,
    cUSBAddress = 1668641634,
    pDeviceType = 1885632116,
    pDeviceAddress = 1885632097,
    pConduit = 1885564782,
    pProtocol = 1886417524,
    pATMachine = 1885434989,
    pATZone = 1885435002,
    pATType = 1885434996,
    pDottedDecimal = 1885958244,
    pDNS = 1885630067,
    pPort = 1886416754,
    pNetwork = 1886283124,
    pNode = 1886285668,
    pSocket = 1886613347,
    pSCSIBus = 1886610274,
    pSCSILUN = 1886612597,
    eDeviceType = 1701082740,
    eAddressSpec = 1700881523,
    eConduit = 1701015406,
    eProtocol = 1701868143,
    eADB = 1700881506,
    eAnalogAudio = 1701863797,
    eAppleTalk = 1701863796,
    eAudioLineIn = 1701011817,
    eAudioLineOut = 1701011820,
    eAudioOut = 1701011823,
    eBus = 1700951411,
    eCDROM = 1701012512,
    eCommSlot = 1701012333,
    eDigitalAudio = 1701864545,
    eDisplay = 1701078131,
    eDVD = 1701082724,
    eEthernet = 1701012846,
    eFireWire = 1701013111,
    eFloppy = 1701209120,
    eHD = 1701340192,
    eInfrared = 1701013874,
    eIP = 1701865840,
    eIrDA = 1701865842,
    eIRTalk = 1701865844,
    eKeyboard = 1701536356,
    eLCD = 1701080163,
    eLocalTalk = 1701014644,
    eMacIP = 1701866857,
    eMacVideo = 1701866870,
    eMicrophone = 1701014889,
    eModemPort = 1701014896,
    eModemPrinterPort = 1701671024,
    eModem = 1701080429,
    eMonitorOut = 1701014894,
    eMouse = 1701670773,
    eNuBusCard = 1701080674,
    eNuBus = 1701737826,
    ePCcard = 1701015651,
    ePCIbus = 1701015657,
    ePCIcard = 1701081193,
    ePDSslot = 1701015652,
    ePDScard = 1701864563,
    ePointingDevice = 1701081188,
    ePostScript = 1701867635,
    ePPP = 1701867632,
    ePrinterPort = 1701015664,
    ePrinter = 1701081202,
    eSvideo = 1701868406,
    eSCSI = 1701016419,
    eSerial = 1701868402,
    eSpeakers = 1701081968,
    eStorageDevice = 1701081972,
    eSVGA = 1701868391,
    eTokenRing = 1702129515,
    eTrackball = 1702130283,
    eTrackpad = 1701082224,
    eUSB = 1701016947,
    eVideoIn = 1701017193,
    eVideoMonitor = 1701082733,
    eVideoOut = 1701017199,
};

pub const anon9971 = enum(objc.OSType) {
    cKeystroke = 1802531443,
    pKeystrokeKey = 1800237927,
    pModifiers = 1800236900,
    pKeyKind = 1802202724,
    eModifiers = 1699570803,
    eOptionDown = 1265594484,
    eCommandDown = 1264807268,
    eControlDown = 1264809068,
    eShiftDown = 1265854068,
    eCapsLockDown = 1264807019,
    eKeyKind = 1701540724,
    eEscapeKey = 1802712320,
    eDeleteKey = 1802711808,
    eTabKey = 1802711040,
    eReturnKey = 1802707968,
    eClearKey = 1802716928,
    eEnterKey = 1802718208,
    eUpArrowKey = 1802731008,
    eDownArrowKey = 1802730752,
    eLeftArrowKey = 1802730240,
    eRightArrowKey = 1802730496,
    eHelpKey = 1802727936,
    eHomeKey = 1802728192,
    ePageUpKey = 1802728448,
    ePageDownKey = 1802729728,
    eForwardDelKey = 1802728704,
    eEndKey = 1802729216,
    eF1Key = 1802729984,
    eF2Key = 1802729472,
    eF3Key = 1802724096,
    eF4Key = 1802728960,
    eF5Key = 1802723328,
    eF6Key = 1802723584,
    eF7Key = 1802723840,
    eF8Key = 1802724352,
    eF9Key = 1802724608,
    eF10Key = 1802726656,
    eF11Key = 1802725120,
    eF12Key = 1802727168,
    eF13Key = 1802725632,
    eF14Key = 1802726144,
    eF15Key = 1802727680,
};

pub const anon10441 = enum(AEKeyword) {
    keyAELaunchedAsLogInItem = 1818716532,
    keyAELaunchedAsServiceItem = 1937140084,
};

pub const anon321 = enum(objc.OSType) {
    kAEUserTerminology = 1634039156,
    kAETerminologyExtension = 1634038885,
    kAEScriptingSizeResource = 1935897466,
    kAEOSAXSizeResource = 1869834618,
};

pub const TScriptingSizeResource = extern struct {
    scriptingSizeFlags: objc.SInt16,
    minStackSize: objc.UInt32,
    preferredStackSize: objc.UInt32,
    maxStackSize: objc.UInt32,
    minHeapSize: objc.UInt32,
    preferredHeapSize: objc.UInt32,
    maxHeapSize: objc.UInt32,
};

pub const AEBuildErrorCode = objc.UInt32;

pub const AEBuildError = extern struct {
    fError: AEBuildErrorCode,
    fErrorPos: objc.UInt32,
};

extern "CoreServices" fn AEBuildDesc(dst: ?*AEDesc, @"error": ?*AEBuildError, src: ?*i8) callconv(.C) objc.OSStatus;
pub const aeBuildDesc = AEBuildDesc;

extern "CoreServices" fn vAEBuildDesc(
    dst: ?*AEDesc,
    @"error": ?*AEBuildError,
    src: ?*i8,
    args: objc.va_list,
) callconv(.C) objc.OSStatus;
pub const vaeBuildDesc = vAEBuildDesc;

extern "CoreServices" fn AEBuildParameters(event: ?*AppleEvent, @"error": ?*AEBuildError, format: ?*i8) callconv(.C) objc.OSStatus;
pub const aeBuildParameters = AEBuildParameters;

extern "CoreServices" fn vAEBuildParameters(
    event: ?*AppleEvent,
    @"error": ?*AEBuildError,
    format: ?*i8,
    args: objc.va_list,
) callconv(.C) objc.OSStatus;
pub const vaeBuildParameters = vAEBuildParameters;

extern "CoreServices" fn AEBuildAppleEvent(
    theClass: AEEventClass,
    theID: AEEventID,
    addressType: DescType,
    addressData: ?*anyopaque,
    addressLength: objc.Size,
    returnID: objc.SInt16,
    transactionID: objc.SInt32,
    result: ?*AppleEvent,
    @"error": ?*AEBuildError,
    paramsFmt: ?*i8,
) callconv(.C) objc.OSStatus;
pub const aeBuildAppleEvent = AEBuildAppleEvent;

extern "CoreServices" fn vAEBuildAppleEvent(
    theClass: AEEventClass,
    theID: AEEventID,
    addressType: DescType,
    addressData: ?*anyopaque,
    addressLength: objc.Size,
    returnID: objc.SInt16,
    transactionID: objc.SInt32,
    resultEvt: ?*AppleEvent,
    @"error": ?*AEBuildError,
    paramsFmt: ?*i8,
    args: objc.va_list,
) callconv(.C) objc.OSStatus;
pub const vaeBuildAppleEvent = vAEBuildAppleEvent;

extern "CoreServices" fn AEPrintDescToHandle(desc: ?*AEDesc, result: ?*objc.Handle) callconv(.C) objc.OSStatus;
pub const aePrintDescToHandle = AEPrintDescToHandle;

pub const OpaqueAEStreamRef = extern struct {};

pub const AEStreamRef = ?*OpaqueAEStreamRef;

extern "CoreServices" fn AEStreamOpen() callconv(.C) AEStreamRef;
pub const aeStreamOpen = AEStreamOpen;

extern "CoreServices" fn AEStreamClose(ref: AEStreamRef, desc: ?*AEDesc) callconv(.C) objc.OSStatus;
pub const aeStreamClose = AEStreamClose;

extern "CoreServices" fn AEStreamOpenDesc(ref: AEStreamRef, newType: DescType) callconv(.C) objc.OSStatus;
pub const aeStreamOpenDesc = AEStreamOpenDesc;

extern "CoreServices" fn AEStreamWriteData(ref: AEStreamRef, data: ?*anyopaque, length: objc.Size) callconv(.C) objc.OSStatus;
pub const aeStreamWriteData = AEStreamWriteData;

extern "CoreServices" fn AEStreamCloseDesc(ref: AEStreamRef) callconv(.C) objc.OSStatus;
pub const aeStreamCloseDesc = AEStreamCloseDesc;

extern "CoreServices" fn AEStreamWriteDesc(
    ref: AEStreamRef,
    newType: DescType,
    data: ?*anyopaque,
    length: objc.Size,
) callconv(.C) objc.OSStatus;
pub const aeStreamWriteDesc = AEStreamWriteDesc;

extern "CoreServices" fn AEStreamWriteAEDesc(ref: AEStreamRef, desc: ?*AEDesc) callconv(.C) objc.OSStatus;
pub const aeStreamWriteAEDesc = AEStreamWriteAEDesc;

extern "CoreServices" fn AEStreamOpenList(ref: AEStreamRef) callconv(.C) objc.OSStatus;
pub const aeStreamOpenList = AEStreamOpenList;

extern "CoreServices" fn AEStreamCloseList(ref: AEStreamRef) callconv(.C) objc.OSStatus;
pub const aeStreamCloseList = AEStreamCloseList;

extern "CoreServices" fn AEStreamOpenRecord(ref: AEStreamRef, newType: DescType) callconv(.C) objc.OSStatus;
pub const aeStreamOpenRecord = AEStreamOpenRecord;

extern "CoreServices" fn AEStreamSetRecordType(ref: AEStreamRef, newType: DescType) callconv(.C) objc.OSStatus;
pub const aeStreamSetRecordType = AEStreamSetRecordType;

extern "CoreServices" fn AEStreamCloseRecord(ref: AEStreamRef) callconv(.C) objc.OSStatus;
pub const aeStreamCloseRecord = AEStreamCloseRecord;

extern "CoreServices" fn AEStreamWriteKeyDesc(
    ref: AEStreamRef,
    key: AEKeyword,
    newType: DescType,
    data: ?*anyopaque,
    length: objc.Size,
) callconv(.C) objc.OSStatus;
pub const aeStreamWriteKeyDesc = AEStreamWriteKeyDesc;

extern "CoreServices" fn AEStreamOpenKeyDesc(ref: AEStreamRef, key: AEKeyword, newType: DescType) callconv(.C) objc.OSStatus;
pub const aeStreamOpenKeyDesc = AEStreamOpenKeyDesc;

extern "CoreServices" fn AEStreamWriteKey(ref: AEStreamRef, key: AEKeyword) callconv(.C) objc.OSStatus;
pub const aeStreamWriteKey = AEStreamWriteKey;

extern "CoreServices" fn AEStreamCreateEvent(
    clazz: AEEventClass,
    id: AEEventID,
    targetType: DescType,
    targetData: ?*anyopaque,
    targetLength: objc.Size,
    returnID: objc.SInt16,
    transactionID: objc.SInt32,
) callconv(.C) AEStreamRef;
pub const aeStreamCreateEvent = AEStreamCreateEvent;

extern "CoreServices" fn AEStreamOpenEvent(event: ?*AppleEvent) callconv(.C) AEStreamRef;
pub const aeStreamOpenEvent = AEStreamOpenEvent;

extern "CoreServices" fn AEStreamOptionalParam(ref: AEStreamRef, key: AEKeyword) callconv(.C) objc.OSStatus;
pub const aeStreamOptionalParam = AEStreamOptionalParam;

pub const anon841 = enum(DescType) {
    typeReplyPortAttr = 1919250544,
};

extern "CoreServices" fn AEGetRegisteredMachPort() callconv(.C) objc.mach_port_t;
pub const aeGetRegisteredMachPort = AEGetRegisteredMachPort;

extern "CoreServices" fn AEDecodeMessage(header: ?*objc.mach_msg_header_t, event: ?*AppleEvent, reply: ?*AppleEvent) callconv(.C) objc.OSStatus;
pub const aeDecodeMessage = AEDecodeMessage;

extern "CoreServices" fn AEProcessMessage(header: ?*objc.mach_msg_header_t) callconv(.C) objc.OSStatus;
pub const aeProcessMessage = AEProcessMessage;

extern "CoreServices" fn AESendMessage(
    event: ?*AppleEvent,
    reply: ?*AppleEvent,
    sendMode: AESendMode,
    timeOutInTicks: i64,
) callconv(.C) objc.OSStatus;
pub const aeSendMessage = AESendMessage;

pub const __DCSDictionary = extern struct {};

pub const DCSDictionaryRef = ?*__DCSDictionary;

extern "CoreServices" fn DCSGetTermRangeInString(dictionary: DCSDictionaryRef, textString: core_foundation.StringRef, offset: core_foundation.Index) callconv(.C) core_foundation.Range;
pub const dcsGetTermRangeInString = DCSGetTermRangeInString;

extern "CoreServices" fn DCSCopyTextDefinition(dictionary: DCSDictionaryRef, textString: core_foundation.StringRef, range: core_foundation.Range) callconv(.C) core_foundation.StringRef;
pub const dcsCopyTextDefinition = DCSCopyTextDefinition;

pub const anon591 = enum(i32) {
    kCSIdentityUnknownAuthorityErr = -1,
    kCSIdentityAuthorityNotAccessibleErr = -2,
    kCSIdentityPermissionErr = -3,
    kCSIdentityDeletedErr = -4,
    kCSIdentityInvalidFullNameErr = -5,
    kCSIdentityDuplicateFullNameErr = -6,
    kCSIdentityInvalidPosixNameErr = -7,
    kCSIdentityDuplicatePosixNameErr = -8,
};

pub const __CSIdentityAuthority = extern struct {};

pub const CSIdentityAuthorityRef = ?*__CSIdentityAuthority;

extern "CoreServices" fn CSIdentityAuthorityGetTypeID() callconv(.C) core_foundation.TypeID;
pub const csIdentityAuthorityGetTypeID = CSIdentityAuthorityGetTypeID;

extern "CoreServices" fn CSGetDefaultIdentityAuthority() callconv(.C) CSIdentityAuthorityRef;
pub const csGetDefaultIdentityAuthority = CSGetDefaultIdentityAuthority;

extern "CoreServices" fn CSGetLocalIdentityAuthority() callconv(.C) CSIdentityAuthorityRef;
pub const csGetLocalIdentityAuthority = CSGetLocalIdentityAuthority;

extern "CoreServices" fn CSGetManagedIdentityAuthority() callconv(.C) CSIdentityAuthorityRef;
pub const csGetManagedIdentityAuthority = CSGetManagedIdentityAuthority;

extern "CoreServices" fn CSIdentityAuthorityCopyLocalizedName(authority: CSIdentityAuthorityRef) callconv(.C) core_foundation.StringRef;
pub const csIdentityAuthorityCopyLocalizedName = CSIdentityAuthorityCopyLocalizedName;

pub const anon1131 = enum(i32) {
    kStartupFolderIconResource = -3981,
    kOwnedFolderIconResource = -3980,
    kDropFolderIconResource = -3979,
    kSharedFolderIconResource = -3978,
    kMountedFolderIconResource = -3977,
    kControlPanelFolderIconResource = -3976,
    kPrintMonitorFolderIconResource = -3975,
    kPreferencesFolderIconResource = -3974,
    kExtensionsFolderIconResource = -3973,
    kFontsFolderIconResource = -3968,
    kFullTrashIconResource = -3984,
};

pub const anon1701 = enum(u32) {
    kKCAuthTypeNTLM = 1853123693,
    kKCAuthTypeMSN = 1836281441,
    kKCAuthTypeDPA = 1685086561,
    kKCAuthTypeRPA = 1919967585,
    kKCAuthTypeHTTPDigest = 1752462436,
    kKCAuthTypeDefault = 1684434036,
};

pub const __CSIdentity = extern struct {};

pub const CSIdentityRef = ?*__CSIdentity;

pub const __CSIdentityQuery = extern struct {};

pub const CSIdentityQueryRef = ?*__CSIdentityQuery;

pub const CSIdentityClass = core_foundation.Index;

pub const CSIdentityFlags = core_foundation.OptionFlags;

extern "CoreServices" fn CSIdentityGetTypeID() callconv(.C) core_foundation.TypeID;
pub const csIdentityGetTypeID = CSIdentityGetTypeID;

extern "CoreServices" fn CSIdentityCreate(
    allocator: core_foundation.AllocatorRef,
    identityClass: CSIdentityClass,
    fullName: core_foundation.StringRef,
    posixName: core_foundation.StringRef,
    flags: CSIdentityFlags,
    authority: CSIdentityAuthorityRef,
) callconv(.C) CSIdentityRef;
pub const csIdentityCreate = CSIdentityCreate;

extern "CoreServices" fn CSIdentityCreateCopy(allocator: core_foundation.AllocatorRef, identity: CSIdentityRef) callconv(.C) CSIdentityRef;
pub const csIdentityCreateCopy = CSIdentityCreateCopy;

extern "CoreServices" fn CSIdentityGetClass(identity: CSIdentityRef) callconv(.C) CSIdentityClass;
pub const csIdentityGetClass = CSIdentityGetClass;

extern "CoreServices" fn CSIdentityGetAuthority(identity: CSIdentityRef) callconv(.C) CSIdentityAuthorityRef;
pub const csIdentityGetAuthority = CSIdentityGetAuthority;

extern "CoreServices" fn CSIdentityGetUUID(identity: CSIdentityRef) callconv(.C) core_foundation.UUIDRef;
pub const csIdentityGetUUID = CSIdentityGetUUID;

extern "CoreServices" fn CSIdentityGetFullName(identity: CSIdentityRef) callconv(.C) core_foundation.StringRef;
pub const csIdentityGetFullName = CSIdentityGetFullName;

extern "CoreServices" fn CSIdentityGetPosixID(identity: CSIdentityRef) callconv(.C) objc.id_t;
pub const csIdentityGetPosixID = CSIdentityGetPosixID;

extern "CoreServices" fn CSIdentityGetPosixName(identity: CSIdentityRef) callconv(.C) core_foundation.StringRef;
pub const csIdentityGetPosixName = CSIdentityGetPosixName;

extern "CoreServices" fn CSIdentityGetEmailAddress(identity: CSIdentityRef) callconv(.C) core_foundation.StringRef;
pub const csIdentityGetEmailAddress = CSIdentityGetEmailAddress;

extern "CoreServices" fn CSIdentityGetImageURL(identity: CSIdentityRef) callconv(.C) core_foundation.URLRef;
pub const csIdentityGetImageURL = CSIdentityGetImageURL;

extern "CoreServices" fn CSIdentityGetImageData(identity: CSIdentityRef) callconv(.C) core_foundation.DataRef;
pub const csIdentityGetImageData = CSIdentityGetImageData;

extern "CoreServices" fn CSIdentityGetImageDataType(identity: CSIdentityRef) callconv(.C) core_foundation.StringRef;
pub const csIdentityGetImageDataType = CSIdentityGetImageDataType;

extern "CoreServices" fn CSIdentityGetAliases(identity: CSIdentityRef) callconv(.C) core_foundation.ArrayRef;
pub const csIdentityGetAliases = CSIdentityGetAliases;

extern "CoreServices" fn CSIdentityIsMemberOfGroup(identity: CSIdentityRef, group: CSIdentityRef) callconv(.C) objc.Boolean;
pub const csIdentityIsMemberOfGroup = CSIdentityIsMemberOfGroup;

extern "CoreServices" fn CSIdentityIsHidden(identity: CSIdentityRef) callconv(.C) objc.Boolean;
pub const csIdentityIsHidden = CSIdentityIsHidden;

extern "CoreServices" fn CSIdentityCreatePersistentReference(allocator: core_foundation.AllocatorRef, identity: CSIdentityRef) callconv(.C) core_foundation.DataRef;
pub const csIdentityCreatePersistentReference = CSIdentityCreatePersistentReference;

extern "CoreServices" fn CSIdentityIsEnabled(user: CSIdentityRef) callconv(.C) objc.Boolean;
pub const csIdentityIsEnabled = CSIdentityIsEnabled;

extern "CoreServices" fn CSIdentityAuthenticateUsingPassword(user: CSIdentityRef, password: core_foundation.StringRef) callconv(.C) objc.Boolean;
pub const csIdentityAuthenticateUsingPassword = CSIdentityAuthenticateUsingPassword;

extern "CoreServices" fn CSIdentityGetCertificate(user: CSIdentityRef) callconv(.C) security.CertificateRef;
pub const csIdentityGetCertificate = CSIdentityGetCertificate;

extern "CoreServices" fn CSIdentityCreateGroupMembershipQuery(allocator: core_foundation.AllocatorRef, group: CSIdentityRef) callconv(.C) CSIdentityQueryRef;
pub const csIdentityCreateGroupMembershipQuery = CSIdentityCreateGroupMembershipQuery;

extern "CoreServices" fn CSIdentitySetFullName(identity: CSIdentityRef, fullName: core_foundation.StringRef) callconv(.C) void;
pub const csIdentitySetFullName = CSIdentitySetFullName;

extern "CoreServices" fn CSIdentitySetEmailAddress(identity: CSIdentityRef, emailAddress: core_foundation.StringRef) callconv(.C) void;
pub const csIdentitySetEmailAddress = CSIdentitySetEmailAddress;

extern "CoreServices" fn CSIdentitySetImageURL(identity: CSIdentityRef, url: core_foundation.URLRef) callconv(.C) void;
pub const csIdentitySetImageURL = CSIdentitySetImageURL;

extern "CoreServices" fn CSIdentitySetImageData(identity: CSIdentityRef, imageData: core_foundation.DataRef, imageDataType: core_foundation.StringRef) callconv(.C) void;
pub const csIdentitySetImageData = CSIdentitySetImageData;

extern "CoreServices" fn CSIdentityAddAlias(identity: CSIdentityRef, alias: core_foundation.StringRef) callconv(.C) void;
pub const csIdentityAddAlias = CSIdentityAddAlias;

extern "CoreServices" fn CSIdentityRemoveAlias(identity: CSIdentityRef, alias: core_foundation.StringRef) callconv(.C) void;
pub const csIdentityRemoveAlias = CSIdentityRemoveAlias;

extern "CoreServices" fn CSIdentityAddMember(group: CSIdentityRef, member: CSIdentityRef) callconv(.C) void;
pub const csIdentityAddMember = CSIdentityAddMember;

extern "CoreServices" fn CSIdentityRemoveMember(group: CSIdentityRef, member: CSIdentityRef) callconv(.C) void;
pub const csIdentityRemoveMember = CSIdentityRemoveMember;

extern "CoreServices" fn CSIdentitySetIsEnabled(user: CSIdentityRef, isEnabled: objc.Boolean) callconv(.C) void;
pub const csIdentitySetIsEnabled = CSIdentitySetIsEnabled;

extern "CoreServices" fn CSIdentitySetPassword(user: CSIdentityRef, password: core_foundation.StringRef) callconv(.C) void;
pub const csIdentitySetPassword = CSIdentitySetPassword;

extern "CoreServices" fn CSIdentitySetCertificate(user: CSIdentityRef, certificate: security.CertificateRef) callconv(.C) void;
pub const csIdentitySetCertificate = CSIdentitySetCertificate;

extern "CoreServices" fn CSIdentityDelete(identity: CSIdentityRef) callconv(.C) void;
pub const csIdentityDelete = CSIdentityDelete;

extern "CoreServices" fn CSIdentityCommit(identity: CSIdentityRef, authorization: security.AuthorizationRef, @"error": ?*core_foundation.ErrorRef) callconv(.C) objc.Boolean;
pub const csIdentityCommit = CSIdentityCommit;

pub const anon13521 = enum(u32) {
    kCSIdentityCommitCompleted = 1,
};

pub const CSIdentityStatusUpdatedCallback = ?*const fn (
    CSIdentityRef,
    core_foundation.Index,
    core_foundation.ErrorRef,
    ?*anyopaque,
) callconv(.C) void;

pub const CSIdentityClientContext = extern struct {
    version: core_foundation.Index,
    info: ?*anyopaque,
    retain: core_foundation.AllocatorRetainCallBack,
    release: core_foundation.AllocatorReleaseCallBack,
    copyDescription: core_foundation.AllocatorCopyDescriptionCallBack,
    statusUpdated: CSIdentityStatusUpdatedCallback,
};

extern "CoreServices" fn CSIdentityCommitAsynchronously(
    identity: CSIdentityRef,
    clientContext: ?*CSIdentityClientContext,
    runLoop: core_foundation.RunLoopRef,
    runLoopMode: core_foundation.StringRef,
    authorization: security.AuthorizationRef,
) callconv(.C) objc.Boolean;
pub const csIdentityCommitAsynchronously = CSIdentityCommitAsynchronously;

extern "CoreServices" fn CSIdentityIsCommitting(identity: CSIdentityRef) callconv(.C) objc.Boolean;
pub const csIdentityIsCommitting = CSIdentityIsCommitting;

extern "CoreServices" fn CSIdentityRemoveClient(identity: CSIdentityRef) callconv(.C) void;
pub const csIdentityRemoveClient = CSIdentityRemoveClient;

extern "CoreServices" fn CSIdentityQueryGetTypeID() callconv(.C) core_foundation.TypeID;
pub const csIdentityQueryGetTypeID = CSIdentityQueryGetTypeID;

pub const CSIdentityQueryFlags = core_foundation.OptionFlags;

pub const CSIdentityQueryStringComparisonMethod = core_foundation.Index;

extern "CoreServices" fn CSIdentityQueryCreate(allocator: core_foundation.AllocatorRef, identityClass: CSIdentityClass, authority: CSIdentityAuthorityRef) callconv(.C) CSIdentityQueryRef;
pub const csIdentityQueryCreate = CSIdentityQueryCreate;

extern "CoreServices" fn CSIdentityQueryCreateForName(
    allocator: core_foundation.AllocatorRef,
    name: core_foundation.StringRef,
    comparisonMethod: CSIdentityQueryStringComparisonMethod,
    identityClass: CSIdentityClass,
    authority: CSIdentityAuthorityRef,
) callconv(.C) CSIdentityQueryRef;
pub const csIdentityQueryCreateForName = CSIdentityQueryCreateForName;

extern "CoreServices" fn CSIdentityQueryCreateForUUID(allocator: core_foundation.AllocatorRef, uuid: core_foundation.UUIDRef, authority: CSIdentityAuthorityRef) callconv(.C) CSIdentityQueryRef;
pub const csIdentityQueryCreateForUUID = CSIdentityQueryCreateForUUID;

extern "CoreServices" fn CSIdentityQueryCreateForPosixID(
    allocator: core_foundation.AllocatorRef,
    posixID: objc.id_t,
    identityClass: CSIdentityClass,
    authority: CSIdentityAuthorityRef,
) callconv(.C) CSIdentityQueryRef;
pub const csIdentityQueryCreateForPosixID = CSIdentityQueryCreateForPosixID;

extern "CoreServices" fn CSIdentityQueryCreateForPersistentReference(allocator: core_foundation.AllocatorRef, referenceData: core_foundation.DataRef) callconv(.C) CSIdentityQueryRef;
pub const csIdentityQueryCreateForPersistentReference = CSIdentityQueryCreateForPersistentReference;

extern "CoreServices" fn CSIdentityQueryCreateForCurrentUser(allocator: core_foundation.AllocatorRef) callconv(.C) CSIdentityQueryRef;
pub const csIdentityQueryCreateForCurrentUser = CSIdentityQueryCreateForCurrentUser;

extern "CoreServices" fn CSIdentityQueryCopyResults(query: CSIdentityQueryRef) callconv(.C) core_foundation.ArrayRef;
pub const csIdentityQueryCopyResults = CSIdentityQueryCopyResults;

extern "CoreServices" fn CSIdentityQueryExecute(query: CSIdentityQueryRef, flags: CSIdentityQueryFlags, @"error": ?*core_foundation.ErrorRef) callconv(.C) objc.Boolean;
pub const csIdentityQueryExecute = CSIdentityQueryExecute;

pub const CSIdentityQueryEvent = core_foundation.Index;

pub const CSIdentityQueryReceiveEventCallback = ?*const fn (
    CSIdentityQueryRef,
    CSIdentityQueryEvent,
    core_foundation.ArrayRef,
    core_foundation.ErrorRef,
    ?*anyopaque,
) callconv(.C) void;

pub const CSIdentityQueryClientContext = extern struct {
    version: core_foundation.Index,
    info: ?*anyopaque,
    retainInfo: core_foundation.AllocatorRetainCallBack,
    releaseInfo: core_foundation.AllocatorReleaseCallBack,
    copyInfoDescription: core_foundation.AllocatorCopyDescriptionCallBack,
    receiveEvent: CSIdentityQueryReceiveEventCallback,
};

extern "CoreServices" fn CSIdentityQueryExecuteAsynchronously(
    query: CSIdentityQueryRef,
    flags: CSIdentityQueryFlags,
    clientContext: ?*CSIdentityQueryClientContext,
    runLoop: core_foundation.RunLoopRef,
    runLoopMode: core_foundation.StringRef,
) callconv(.C) objc.Boolean;
pub const csIdentityQueryExecuteAsynchronously = CSIdentityQueryExecuteAsynchronously;

extern "CoreServices" fn CSIdentityQueryStop(query: CSIdentityQueryRef) callconv(.C) void;
pub const csIdentityQueryStop = CSIdentityQueryStop;

pub const anon431 = enum(u32) {
    kIconServices256PixelDataARGB = 1768108088,
    kIconServices512PixelDataARGB = 1768108089,
    kIconServices1024PixelDataARGB = 1768108336,
    kThumbnail32BitData = 1769222962,
    kThumbnail8BitMask = 1949855083,
};

pub const IconFamilyElement = extern struct {
    elementType: objc.OSType,
    elementSize: objc.SInt32,
    elementData: [1]u8,
};

pub const IconFamilyResource = extern struct {
    resourceType: objc.OSType,
    resourceSize: objc.SInt32,
    elements: [1]IconFamilyElement,
};

pub const IconFamilyPtr = ?*IconFamilyResource;

pub const IconFamilyHandle = ?*IconFamilyPtr;

pub const SleepQRec = extern struct {
    sleepQLink: SleepQRecPtr,
    sleepQType: i16,
    sleepQProc: SleepQUPP,
    sleepQFlags: i16,
};

pub const SleepQRecPtr = ?*SleepQRec;

pub const SleepQProcPtr = ?*const fn (i64, SleepQRecPtr) callconv(.C) i64;

pub const SleepQUPP = SleepQProcPtr;

extern "CoreServices" fn NewSleepQUPP(userRoutine: SleepQProcPtr) callconv(.C) SleepQUPP;
pub const newSleepQUPP = NewSleepQUPP;

extern "CoreServices" fn DisposeSleepQUPP(userUPP: SleepQUPP) callconv(.C) void;
pub const disposeSleepQUPP = DisposeSleepQUPP;

extern "CoreServices" fn InvokeSleepQUPP(message: i64, qRecPtr: SleepQRecPtr, userUPP: SleepQUPP) callconv(.C) i64;
pub const invokeSleepQUPP = InvokeSleepQUPP;

extern "CoreServices" fn GetCPUSpeed() callconv(.C) i64;
pub const getCPUSpeed = GetCPUSpeed;

extern "CoreServices" fn SleepQInstall(qRecPtr: SleepQRecPtr) callconv(.C) void;
pub const sleepQInstall = SleepQInstall;

extern "CoreServices" fn SleepQRemove(qRecPtr: SleepQRecPtr) callconv(.C) void;
pub const sleepQRemove = SleepQRemove;

extern "CoreServices" fn MaximumProcessorSpeed() callconv(.C) i16;
pub const maximumProcessorSpeed = MaximumProcessorSpeed;

extern "CoreServices" fn MinimumProcessorSpeed() callconv(.C) i16;
pub const minimumProcessorSpeed = MinimumProcessorSpeed;

extern "CoreServices" fn CurrentProcessorSpeed() callconv(.C) i16;
pub const currentProcessorSpeed = CurrentProcessorSpeed;

extern "CoreServices" fn BatteryCount() callconv(.C) i16;
pub const batteryCount = BatteryCount;

extern "CoreServices" fn UpdateSystemActivity(activity: objc.UInt8) callconv(.C) objc.OSErr;
pub const updateSystemActivity = UpdateSystemActivity;

pub const KCRef = security.KeychainRef;

pub const KCItemRef = security.KeychainItemRef;

pub const KCSearchRef = security.KeychainSearchRef;

pub const KCAttribute = security.KeychainAttribute;

pub const KCAttributeList = security.KeychainAttributeList;

pub const KCAttrType = security.KeychainAttrType;

pub const KCStatus = security.KeychainStatus;

pub const KCEvent = objc.UInt16;

pub const KCEventMask = objc.UInt16;

pub const AFPServerSignature = [16]objc.UInt8;

pub const KCPublicKeyHash = [20]objc.UInt8;

pub const KCCallbackInfo = extern struct {
    version: objc.UInt32,
    item: KCItemRef,
    processID: [2]objc.SInt32,
    event: [4]objc.SInt32,
    keychain: KCRef,
};

pub const KCItemClass = objc.FourCharCode;

pub const KCItemAttr = objc.FourCharCode;

pub const KCAuthType = objc.FourCharCode;

pub const anon1801 = enum(u32) {
    kKCProtocolTypeFTP = 1718906912,
    kKCProtocolTypeFTPAccount = 1718906977,
    kKCProtocolTypeHTTP = 1752462448,
    kKCProtocolTypeIRC = 1769104160,
    kKCProtocolTypeNNTP = 1852732528,
    kKCProtocolTypePOP3 = 1886351411,
    kKCProtocolTypeSMTP = 1936553072,
    kKCProtocolTypeSOCKS = 1936685088,
    kKCProtocolTypeIMAP = 1768776048,
    kKCProtocolTypeLDAP = 1818517872,
    kKCProtocolTypeAppleTalk = 1635019883,
    kKCProtocolTypeAFP = 1634103328,
    kKCProtocolTypeTelnet = 1952803950,
};

pub const KCProtocolType = objc.FourCharCode;

pub const KCCertAddOptions = objc.UInt32;

pub const KCVerifyStopOn = objc.UInt16;

pub const anon2191 = enum(u32) {
    kPolicyKCStopOn = 0,
    kNoneKCStopOn = 1,
    kFirstPassKCStopOn = 2,
    kFirstFailKCStopOn = 3,
};

pub const KCCertSearchOptions = objc.UInt32;

pub const anon2271 = enum(u32) {
    kInternetLocationHTTPIcon = 1768712308,
    kInternetLocationFTPIcon = 1768711796,
    kInternetLocationAppleShareIcon = 1768710502,
    kInternetLocationAppleTalkZoneIcon = 1768710516,
    kInternetLocationFileIcon = 1768711785,
    kInternetLocationMailIcon = 1768713569,
    kInternetLocationNewsIcon = 1768713847,
    kInternetLocationNSLNeighborhoodIcon = 1768713843,
    kInternetLocationGenericIcon = 1768712037,
};

pub const anon2621 = enum(u32) {
    kAnyProtocol = 0,
    kAnyAuthType = 0,
};

extern "CoreServices" fn KCGetKeychainManagerVersion(returnVers: ?*objc.UInt32) callconv(.C) objc.OSStatus;
pub const kcGetKeychainManagerVersion = KCGetKeychainManagerVersion;

extern "CoreServices" fn KCSetInteractionAllowed(state: objc.Boolean) callconv(.C) objc.OSStatus;
pub const kcSetInteractionAllowed = KCSetInteractionAllowed;

extern "CoreServices" fn KCIsInteractionAllowed() callconv(.C) objc.Boolean;
pub const kcIsInteractionAllowed = KCIsInteractionAllowed;

extern "CoreServices" fn KCMakeKCRefFromFSRef(keychainFSRef: ?*FSRef, keychain: ?*KCRef) callconv(.C) objc.OSStatus;
pub const kcMakeKCRefFromFSRef = KCMakeKCRefFromFSRef;

extern "CoreServices" fn KCMakeKCRefFromAlias(keychainAlias: AliasHandle, keychain: ?*KCRef) callconv(.C) objc.OSStatus;
pub const kcMakeKCRefFromAlias = KCMakeKCRefFromAlias;

extern "CoreServices" fn KCMakeAliasFromKCRef(keychain: KCRef, keychainAlias: ?*AliasHandle) callconv(.C) objc.OSStatus;
pub const kcMakeAliasFromKCRef = KCMakeAliasFromKCRef;

extern "CoreServices" fn KCReleaseKeychain(keychain: ?*KCRef) callconv(.C) objc.OSStatus;
pub const kcReleaseKeychain = KCReleaseKeychain;

extern "CoreServices" fn KCGetDefaultKeychain(keychain: ?*KCRef) callconv(.C) objc.OSStatus;
pub const kcGetDefaultKeychain = KCGetDefaultKeychain;

extern "CoreServices" fn KCSetDefaultKeychain(keychain: KCRef) callconv(.C) objc.OSStatus;
pub const kcSetDefaultKeychain = KCSetDefaultKeychain;

extern "CoreServices" fn KCGetStatus(keychain: KCRef, keychainStatus: ?*objc.UInt32) callconv(.C) objc.OSStatus;
pub const kcGetStatus = KCGetStatus;

extern "CoreServices" fn KCGetKeychain(item: KCItemRef, keychain: ?*KCRef) callconv(.C) objc.OSStatus;
pub const kcGetKeychain = KCGetKeychain;

extern "CoreServices" fn KCGetKeychainName(keychain: KCRef, keychainName: objc.StringPtr) callconv(.C) objc.OSStatus;
pub const kcGetKeychainName = KCGetKeychainName;

extern "CoreServices" fn KCCountKeychains() callconv(.C) objc.UInt16;
pub const kcCountKeychains = KCCountKeychains;

extern "CoreServices" fn KCGetIndKeychain(index: objc.UInt16, keychain: ?*KCRef) callconv(.C) objc.OSStatus;
pub const kcGetIndKeychain = KCGetIndKeychain;

pub const KCCallbackProcPtr = ?*const fn (KCEvent, ?*KCCallbackInfo, ?*anyopaque) callconv(.C) objc.OSStatus;

pub const KCCallbackUPP = KCCallbackProcPtr;

extern "CoreServices" fn NewKCCallbackUPP(userRoutine: KCCallbackProcPtr) callconv(.C) KCCallbackUPP;
pub const newKCCallbackUPP = NewKCCallbackUPP;

extern "CoreServices" fn DisposeKCCallbackUPP(userUPP: KCCallbackUPP) callconv(.C) void;
pub const disposeKCCallbackUPP = DisposeKCCallbackUPP;

extern "CoreServices" fn InvokeKCCallbackUPP(
    keychainEvent: KCEvent,
    info: ?*KCCallbackInfo,
    userContext: ?*anyopaque,
    userUPP: KCCallbackUPP,
) callconv(.C) objc.OSStatus;
pub const invokeKCCallbackUPP = InvokeKCCallbackUPP;

extern "CoreServices" fn KCFindAppleSharePassword(
    serverSignature: ?*AFPServerSignature,
    serverAddress: objc.ConstStringPtr,
    serverName: objc.ConstStringPtr,
    volumeName: objc.ConstStringPtr,
    accountName: objc.ConstStringPtr,
    maxLength: objc.UInt32,
    passwordData: ?*anyopaque,
    actualLength: ?*objc.UInt32,
    item: ?*KCItemRef,
) callconv(.C) objc.OSStatus;
pub const kcFindAppleSharePassword = KCFindAppleSharePassword;

extern "CoreServices" fn KCFindInternetPassword(
    serverName: objc.ConstStringPtr,
    securityDomain: objc.ConstStringPtr,
    accountName: objc.ConstStringPtr,
    port: objc.UInt16,
    protocol: objc.OSType,
    authType: objc.OSType,
    maxLength: objc.UInt32,
    passwordData: ?*anyopaque,
    actualLength: ?*objc.UInt32,
    item: ?*KCItemRef,
) callconv(.C) objc.OSStatus;
pub const kcFindInternetPassword = KCFindInternetPassword;

extern "CoreServices" fn KCFindInternetPasswordWithPath(
    serverName: objc.ConstStringPtr,
    securityDomain: objc.ConstStringPtr,
    accountName: objc.ConstStringPtr,
    path: objc.ConstStringPtr,
    port: objc.UInt16,
    protocol: objc.OSType,
    authType: objc.OSType,
    maxLength: objc.UInt32,
    passwordData: ?*anyopaque,
    actualLength: ?*objc.UInt32,
    item: ?*KCItemRef,
) callconv(.C) objc.OSStatus;
pub const kcFindInternetPasswordWithPath = KCFindInternetPasswordWithPath;

extern "CoreServices" fn KCFindGenericPassword(
    serviceName: objc.ConstStringPtr,
    accountName: objc.ConstStringPtr,
    maxLength: objc.UInt32,
    passwordData: ?*anyopaque,
    actualLength: ?*objc.UInt32,
    item: ?*KCItemRef,
) callconv(.C) objc.OSStatus;
pub const kcFindGenericPassword = KCFindGenericPassword;

extern "CoreServices" fn KCAddCallback(callbackProc: KCCallbackUPP, eventMask: KCEventMask, userContext: ?*anyopaque) callconv(.C) objc.OSStatus;
pub const kcAddCallback = KCAddCallback;

extern "CoreServices" fn KCRemoveCallback(callbackProc: KCCallbackUPP) callconv(.C) objc.OSStatus;
pub const kcRemoveCallback = KCRemoveCallback;

extern "CoreServices" fn KCNewItem(
    itemClass: KCItemClass,
    itemCreator: objc.OSType,
    length: objc.UInt32,
    data: ?*anyopaque,
    item: ?*KCItemRef,
) callconv(.C) objc.OSStatus;
pub const kcNewItem = KCNewItem;

extern "CoreServices" fn KCSetAttribute(item: KCItemRef, attr: ?*KCAttribute) callconv(.C) objc.OSStatus;
pub const kcSetAttribute = KCSetAttribute;

extern "CoreServices" fn KCGetAttribute(item: KCItemRef, attr: ?*KCAttribute, actualLength: ?*objc.UInt32) callconv(.C) objc.OSStatus;
pub const kcGetAttribute = KCGetAttribute;

extern "CoreServices" fn KCSetData(item: KCItemRef, length: objc.UInt32, data: ?*anyopaque) callconv(.C) objc.OSStatus;
pub const kcSetData = KCSetData;

extern "CoreServices" fn KCUpdateItem(item: KCItemRef) callconv(.C) objc.OSStatus;
pub const kcUpdateItem = KCUpdateItem;

extern "CoreServices" fn KCReleaseItem(item: ?*KCItemRef) callconv(.C) objc.OSStatus;
pub const kcReleaseItem = KCReleaseItem;

extern "CoreServices" fn KCCopyItem(item: KCItemRef, destKeychain: KCRef, copy: ?*KCItemRef) callconv(.C) objc.OSStatus;
pub const kcCopyItem = KCCopyItem;

extern "CoreServices" fn KCFindFirstItem(
    keychain: KCRef,
    attrList: ?*KCAttributeList,
    search: ?*KCSearchRef,
    item: ?*KCItemRef,
) callconv(.C) objc.OSStatus;
pub const kcFindFirstItem = KCFindFirstItem;

extern "CoreServices" fn KCFindNextItem(search: KCSearchRef, item: ?*KCItemRef) callconv(.C) objc.OSStatus;
pub const kcFindNextItem = KCFindNextItem;

extern "CoreServices" fn KCReleaseSearch(search: ?*KCSearchRef) callconv(.C) objc.OSStatus;
pub const kcReleaseSearch = KCReleaseSearch;

extern "CoreServices" fn KCDeleteItem(item: KCItemRef) callconv(.C) objc.OSStatus;
pub const kcDeleteItem = KCDeleteItem;

extern "CoreServices" fn KCGetData(
    item: KCItemRef,
    maxLength: objc.UInt32,
    data: ?*anyopaque,
    actualLength: ?*objc.UInt32,
) callconv(.C) objc.OSStatus;
pub const kcGetData = KCGetData;

extern "CoreServices" fn KCLock(keychain: KCRef) callconv(.C) objc.OSStatus;
pub const kcLock = KCLock;

extern "CoreServices" fn kcgetkeychainname(keychain: KCRef, keychainName: ?*i8) callconv(.C) objc.OSStatus;
pub const kcgetkeychainname = kcgetkeychainname;

extern "CoreServices" fn kcfindapplesharepassword(
    serverSignature: ?*AFPServerSignature,
    serverAddress: ?*i8,
    serverName: ?*i8,
    volumeName: ?*i8,
    accountName: ?*i8,
    maxLength: objc.UInt32,
    passwordData: ?*anyopaque,
    actualLength: ?*objc.UInt32,
    item: ?*KCItemRef,
) callconv(.C) objc.OSStatus;
pub const kcfindapplesharepassword = kcfindapplesharepassword;

extern "CoreServices" fn kcfindinternetpassword(
    serverName: ?*i8,
    securityDomain: ?*i8,
    accountName: ?*i8,
    port: objc.UInt16,
    protocol: objc.OSType,
    authType: objc.OSType,
    maxLength: objc.UInt32,
    passwordData: ?*anyopaque,
    actualLength: ?*objc.UInt32,
    item: ?*KCItemRef,
) callconv(.C) objc.OSStatus;
pub const kcfindinternetpassword = kcfindinternetpassword;

extern "CoreServices" fn kcfindinternetpasswordwithpath(
    serverName: ?*i8,
    securityDomain: ?*i8,
    accountName: ?*i8,
    path: ?*i8,
    port: objc.UInt16,
    protocol: objc.OSType,
    authType: objc.OSType,
    maxLength: objc.UInt32,
    passwordData: ?*anyopaque,
    actualLength: ?*objc.UInt32,
    item: ?*KCItemRef,
) callconv(.C) objc.OSStatus;
pub const kcfindinternetpasswordwithpath = kcfindinternetpasswordwithpath;

extern "CoreServices" fn kcfindgenericpassword(
    serviceName: ?*i8,
    accountName: ?*i8,
    maxLength: objc.UInt32,
    passwordData: ?*anyopaque,
    actualLength: ?*objc.UInt32,
    item: ?*KCItemRef,
) callconv(.C) objc.OSStatus;
pub const kcfindgenericpassword = kcfindgenericpassword;

pub const WSTypeID = enum(u32) {
    eWSUnknownType = 0,
    eWSNullType = 1,
    eWSBooleanType = 2,
    eWSIntegerType = 3,
    eWSDoubleType = 4,
    eWSStringType = 5,
    eWSDateType = 6,
    eWSDataType = 7,
    eWSArrayType = 8,
    eWSDictionaryType = 9,
};

pub const WSClientContextRetainCallBackProcPtr = ?*const fn (?*anyopaque) callconv(.C) ?*anyopaque;

pub const WSClientContextReleaseCallBackProcPtr = ?*const fn (?*anyopaque) callconv(.C) void;

pub const WSClientContextCopyDescriptionCallBackProcPtr = ?*const fn (?*anyopaque) callconv(.C) core_foundation.StringRef;

pub const WSClientContext = extern struct {
    version: core_foundation.Index,
    info: ?*anyopaque,
    retain: WSClientContextRetainCallBackProcPtr,
    release: WSClientContextReleaseCallBackProcPtr,
    copyDescription: WSClientContextCopyDescriptionCallBackProcPtr,
};

extern "CoreServices" fn WSGetWSTypeIDFromCFType(ref: core_foundation.TypeRef) callconv(.C) WSTypeID;
pub const wsGetWSTypeIDFromCFType = WSGetWSTypeIDFromCFType;

extern "CoreServices" fn WSGetCFTypeIDFromWSTypeID(typeID: WSTypeID) callconv(.C) core_foundation.TypeID;
pub const wsGetCFTypeIDFromWSTypeID = WSGetCFTypeIDFromWSTypeID;

pub const OpaqueWSMethodInvocationRef = extern struct {};

pub const WSMethodInvocationRef = ?*OpaqueWSMethodInvocationRef;

extern "CoreServices" fn WSMethodInvocationGetTypeID() callconv(.C) core_foundation.TypeID;
pub const wsMethodInvocationGetTypeID = WSMethodInvocationGetTypeID;

extern "CoreServices" fn WSMethodInvocationCreate(url: core_foundation.URLRef, methodName: core_foundation.StringRef, protocol: core_foundation.StringRef) callconv(.C) WSMethodInvocationRef;
pub const wsMethodInvocationCreate = WSMethodInvocationCreate;

extern "CoreServices" fn WSMethodInvocationCreateFromSerialization(contract: core_foundation.DataRef) callconv(.C) WSMethodInvocationRef;
pub const wsMethodInvocationCreateFromSerialization = WSMethodInvocationCreateFromSerialization;

extern "CoreServices" fn WSMethodInvocationCopySerialization(invocation: WSMethodInvocationRef) callconv(.C) core_foundation.DataRef;
pub const wsMethodInvocationCopySerialization = WSMethodInvocationCopySerialization;

extern "CoreServices" fn WSMethodInvocationSetParameters(invocation: WSMethodInvocationRef, parameters: core_foundation.DictionaryRef, parameterOrder: core_foundation.ArrayRef) callconv(.C) void;
pub const wsMethodInvocationSetParameters = WSMethodInvocationSetParameters;

extern "CoreServices" fn WSMethodInvocationCopyParameters(invocation: WSMethodInvocationRef, parameterOrder: ?*core_foundation.ArrayRef) callconv(.C) core_foundation.DictionaryRef;
pub const wsMethodInvocationCopyParameters = WSMethodInvocationCopyParameters;

extern "CoreServices" fn WSMethodInvocationSetProperty(invocation: WSMethodInvocationRef, propertyName: core_foundation.StringRef, propertyValue: core_foundation.TypeRef) callconv(.C) void;
pub const wsMethodInvocationSetProperty = WSMethodInvocationSetProperty;

extern "CoreServices" fn WSMethodInvocationCopyProperty(invocation: WSMethodInvocationRef, propertyName: core_foundation.StringRef) callconv(.C) core_foundation.TypeRef;
pub const wsMethodInvocationCopyProperty = WSMethodInvocationCopyProperty;

extern "CoreServices" fn WSMethodInvocationInvoke(invocation: WSMethodInvocationRef) callconv(.C) core_foundation.DictionaryRef;
pub const wsMethodInvocationInvoke = WSMethodInvocationInvoke;

pub const WSMethodInvocationCallBackProcPtr = ?*const fn (WSMethodInvocationRef, ?*anyopaque, core_foundation.DictionaryRef) callconv(.C) void;

extern "CoreServices" fn WSMethodInvocationSetCallBack(invocation: WSMethodInvocationRef, clientCB: WSMethodInvocationCallBackProcPtr, context: ?*WSClientContext) callconv(.C) void;
pub const wsMethodInvocationSetCallBack = WSMethodInvocationSetCallBack;

extern "CoreServices" fn WSMethodInvocationScheduleWithRunLoop(invocation: WSMethodInvocationRef, runLoop: core_foundation.RunLoopRef, runLoopMode: core_foundation.StringRef) callconv(.C) void;
pub const wsMethodInvocationScheduleWithRunLoop = WSMethodInvocationScheduleWithRunLoop;

extern "CoreServices" fn WSMethodInvocationUnscheduleFromRunLoop(invocation: WSMethodInvocationRef, runLoop: core_foundation.RunLoopRef, runLoopMode: core_foundation.StringRef) callconv(.C) void;
pub const wsMethodInvocationUnscheduleFromRunLoop = WSMethodInvocationUnscheduleFromRunLoop;

extern "CoreServices" fn WSMethodResultIsFault(methodResult: core_foundation.DictionaryRef) callconv(.C) objc.Boolean;
pub const wsMethodResultIsFault = WSMethodResultIsFault;

pub const WSMethodInvocationSerializationProcPtr = ?*const fn (WSMethodInvocationRef, core_foundation.TypeRef, ?*anyopaque) callconv(.C) core_foundation.StringRef;

extern "CoreServices" fn WSMethodInvocationAddSerializationOverride(
    invocation: WSMethodInvocationRef,
    objType: core_foundation.TypeID,
    serializationProc: WSMethodInvocationSerializationProcPtr,
    context: ?*WSClientContext,
) callconv(.C) void;
pub const wsMethodInvocationAddSerializationOverride = WSMethodInvocationAddSerializationOverride;

pub const WSMethodInvocationDeserializationProcPtr = ?*const fn (
    WSMethodInvocationRef,
    core_foundation.XMLTreeRef,
    core_foundation.XMLTreeRef,
    ?*anyopaque,
) callconv(.C) core_foundation.TypeRef;

extern "CoreServices" fn WSMethodInvocationAddDeserializationOverride(
    invocation: WSMethodInvocationRef,
    typeNamespace: core_foundation.StringRef,
    typeName: core_foundation.StringRef,
    deserializationProc: WSMethodInvocationDeserializationProcPtr,
    context: ?*WSClientContext,
) callconv(.C) void;
pub const wsMethodInvocationAddDeserializationOverride = WSMethodInvocationAddDeserializationOverride;

pub const OpaqueWSProtocolHandlerRef = extern struct {};

pub const WSProtocolHandlerRef = ?*OpaqueWSProtocolHandlerRef;

extern "CoreServices" fn WSProtocolHandlerGetTypeID() callconv(.C) core_foundation.TypeID;
pub const wsProtocolHandlerGetTypeID = WSProtocolHandlerGetTypeID;

extern "CoreServices" fn WSProtocolHandlerCreate(allocator: core_foundation.AllocatorRef, protocol: core_foundation.StringRef) callconv(.C) WSProtocolHandlerRef;
pub const wsProtocolHandlerCreate = WSProtocolHandlerCreate;

extern "CoreServices" fn WSProtocolHandlerCopyRequestDictionary(ref: WSProtocolHandlerRef, data: core_foundation.DataRef) callconv(.C) core_foundation.DictionaryRef;
pub const wsProtocolHandlerCopyRequestDictionary = WSProtocolHandlerCopyRequestDictionary;

extern "CoreServices" fn WSProtocolHandlerCopyReplyDictionary(ref: WSProtocolHandlerRef, methodName: core_foundation.StringRef, data: core_foundation.DataRef) callconv(.C) core_foundation.DictionaryRef;
pub const wsProtocolHandlerCopyReplyDictionary = WSProtocolHandlerCopyReplyDictionary;

extern "CoreServices" fn WSProtocolHandlerCopyReplyDocument(ref: WSProtocolHandlerRef, methodContext: core_foundation.DictionaryRef, resultValue: core_foundation.TypeRef) callconv(.C) core_foundation.DataRef;
pub const wsProtocolHandlerCopyReplyDocument = WSProtocolHandlerCopyReplyDocument;

extern "CoreServices" fn WSProtocolHandlerCopyFaultDocument(ref: WSProtocolHandlerRef, methodContext: core_foundation.DictionaryRef, faultDict: core_foundation.DictionaryRef) callconv(.C) core_foundation.DataRef;
pub const wsProtocolHandlerCopyFaultDocument = WSProtocolHandlerCopyFaultDocument;

extern "CoreServices" fn WSProtocolHandlerCopyRequestDocument(
    ref: WSProtocolHandlerRef,
    methodName: core_foundation.StringRef,
    methodParams: core_foundation.DictionaryRef,
    methodParamOrder: core_foundation.ArrayRef,
    methodExtras: core_foundation.DictionaryRef,
) callconv(.C) core_foundation.DataRef;
pub const wsProtocolHandlerCopyRequestDocument = WSProtocolHandlerCopyRequestDocument;

extern "CoreServices" fn WSProtocolHandlerCopyProperty(ref: WSProtocolHandlerRef, propertyName: core_foundation.StringRef) callconv(.C) core_foundation.TypeRef;
pub const wsProtocolHandlerCopyProperty = WSProtocolHandlerCopyProperty;

extern "CoreServices" fn WSProtocolHandlerSetProperty(ref: WSProtocolHandlerRef, propertyName: core_foundation.StringRef, propertyValue: core_foundation.TypeRef) callconv(.C) void;
pub const wsProtocolHandlerSetProperty = WSProtocolHandlerSetProperty;

pub const WSProtocolHandlerSerializationProcPtr = ?*const fn (WSProtocolHandlerRef, core_foundation.TypeRef, ?*anyopaque) callconv(.C) core_foundation.StringRef;

extern "CoreServices" fn WSProtocolHandlerSetSerializationOverride(
    protocol: WSProtocolHandlerRef,
    objType: core_foundation.TypeID,
    serializationProc: WSProtocolHandlerSerializationProcPtr,
    context: ?*WSClientContext,
) callconv(.C) void;
pub const wsProtocolHandlerSetSerializationOverride = WSProtocolHandlerSetSerializationOverride;

pub const WSProtocolHandlerDeserializationProcPtr = ?*const fn (
    WSProtocolHandlerRef,
    core_foundation.XMLTreeRef,
    core_foundation.XMLTreeRef,
    ?*anyopaque,
) callconv(.C) core_foundation.TypeRef;

extern "CoreServices" fn WSProtocolHandlerSetDeserializationOverride(
    protocol: WSProtocolHandlerRef,
    typeNamespace: core_foundation.StringRef,
    typeName: core_foundation.StringRef,
    deserializationProc: WSProtocolHandlerDeserializationProcPtr,
    context: ?*WSClientContext,
) callconv(.C) void;
pub const wsProtocolHandlerSetDeserializationOverride = WSProtocolHandlerSetDeserializationOverride;

pub const anon771 = enum(i32) {
    kGenericPreferencesIconResource = -3971,
    kGenericQueryDocumentIconResource = -16506,
    kGenericExtensionIconResource = -16415,
    kSystemFolderIconResource = -3983,
    kHelpIconResource = -20271,
    kAppleMenuFolderIconResource = -3982,
};

pub const OpaqueIconRef = extern struct {};

pub const IconRef = ?*OpaqueIconRef;

pub const anon3361 = enum(u32) {
    kAppleTalkIcon = 1635019883,
    kAppleTalkZoneIcon = 1635023470,
    kAFPServerIcon = 1634103411,
    kFTPServerIcon = 1718906995,
    kHTTPServerIcon = 1752461427,
    kGenericNetworkIcon = 1735288180,
    kIPFileServerIcon = 1769173622,
};

pub const anon3471 = enum(u32) {
    kToolbarCustomizeIcon = 1952675187,
    kToolbarDeleteIcon = 1952736620,
    kToolbarFavoritesIcon = 1952866678,
    kToolbarHomeIcon = 1953001325,
    kToolbarAdvancedIcon = 1952604534,
    kToolbarInfoIcon = 1952606574,
    kToolbarLabelsIcon = 1952607330,
    kToolbarApplicationsFolderIcon = 1950445683,
    kToolbarDocumentsFolderIcon = 1950642019,
    kToolbarMovieFolderIcon = 1951231862,
    kToolbarMusicFolderIcon = 1951233395,
    kToolbarPicturesFolderIcon = 1951426915,
    kToolbarPublicFolderIcon = 1951429986,
    kToolbarDesktopFolderIcon = 1950643051,
    kToolbarDownloadsFolderIcon = 1950644078,
    kToolbarLibraryFolderIcon = 1951164770,
    kToolbarUtilitiesFolderIcon = 1951757420,
    kToolbarSitesFolderIcon = 1951626355,
};

pub const IconServicesUsageFlags = objc.UInt32;

pub const anon4151 = enum(u32) {
    kIconServicesCatalogInfoMask = 531550,
};

extern "CoreServices" fn GetIconRefOwners(theIconRef: IconRef, owners: ?*objc.UInt16) callconv(.C) objc.OSErr;
pub const getIconRefOwners = GetIconRefOwners;

extern "CoreServices" fn AcquireIconRef(theIconRef: IconRef) callconv(.C) objc.OSErr;
pub const acquireIconRef = AcquireIconRef;

extern "CoreServices" fn ReleaseIconRef(theIconRef: IconRef) callconv(.C) objc.OSErr;
pub const releaseIconRef = ReleaseIconRef;

extern "CoreServices" fn GetIconRef(
    vRefNum: objc.SInt16,
    creator: objc.OSType,
    iconType: objc.OSType,
    theIconRef: ?*IconRef,
) callconv(.C) objc.OSErr;
pub const getIconRef = GetIconRef;

extern "CoreServices" fn GetIconRefFromFolder(
    vRefNum: objc.SInt16,
    parentFolderID: objc.SInt32,
    folderID: objc.SInt32,
    attributes: objc.SInt8,
    accessPrivileges: objc.SInt8,
    theIconRef: ?*IconRef,
) callconv(.C) objc.OSErr;
pub const getIconRefFromFolder = GetIconRefFromFolder;

extern "CoreServices" fn GetIconRefFromFileInfo(
    inRef: ?*FSRef,
    inFileNameLength: objc.UniCharCount,
    inFileName: ?*objc.UniChar,
    inWhichInfo: FSCatalogInfoBitmap,
    inCatalogInfo: ?*FSCatalogInfo,
    inUsageFlags: IconServicesUsageFlags,
    outIconRef: ?*IconRef,
    outLabel: ?*objc.SInt16,
) callconv(.C) objc.OSStatus;
pub const getIconRefFromFileInfo = GetIconRefFromFileInfo;

extern "CoreServices" fn GetIconRefFromTypeInfo(
    inCreator: objc.OSType,
    inType: objc.OSType,
    inExtension: core_foundation.StringRef,
    inMIMEType: core_foundation.StringRef,
    inUsageFlags: IconServicesUsageFlags,
    outIconRef: ?*IconRef,
) callconv(.C) objc.OSErr;
pub const getIconRefFromTypeInfo = GetIconRefFromTypeInfo;

extern "CoreServices" fn GetIconRefFromIconFamilyPtr(inIconFamilyPtr: ?*IconFamilyResource, inSize: objc.Size, outIconRef: ?*IconRef) callconv(.C) objc.OSStatus;
pub const getIconRefFromIconFamilyPtr = GetIconRefFromIconFamilyPtr;

extern "CoreServices" fn GetIconRefFromComponent(inComponent: Component, outIconRef: ?*IconRef) callconv(.C) objc.OSStatus;
pub const getIconRefFromComponent = GetIconRefFromComponent;

extern "CoreServices" fn RegisterIconRefFromIconFamily(
    creator: objc.OSType,
    iconType: objc.OSType,
    iconFamily: IconFamilyHandle,
    theIconRef: ?*IconRef,
) callconv(.C) objc.OSErr;
pub const registerIconRefFromIconFamily = RegisterIconRefFromIconFamily;

extern "CoreServices" fn RegisterIconRefFromFSRef(
    creator: objc.OSType,
    iconType: objc.OSType,
    iconFile: ?*FSRef,
    theIconRef: ?*IconRef,
) callconv(.C) objc.OSStatus;
pub const registerIconRefFromFSRef = RegisterIconRefFromFSRef;

extern "CoreServices" fn UnregisterIconRef(creator: objc.OSType, iconType: objc.OSType) callconv(.C) objc.OSErr;
pub const unregisterIconRef = UnregisterIconRef;

extern "CoreServices" fn UpdateIconRef(theIconRef: IconRef) callconv(.C) objc.OSErr;
pub const updateIconRef = UpdateIconRef;

extern "CoreServices" fn OverrideIconRef(oldIconRef: IconRef, newIconRef: IconRef) callconv(.C) objc.OSErr;
pub const overrideIconRef = OverrideIconRef;

extern "CoreServices" fn RemoveIconRefOverride(theIconRef: IconRef) callconv(.C) objc.OSErr;
pub const removeIconRefOverride = RemoveIconRefOverride;

extern "CoreServices" fn CompositeIconRef(backgroundIconRef: IconRef, foregroundIconRef: IconRef, compositeIconRef: ?*IconRef) callconv(.C) objc.OSErr;
pub const compositeIconRef = CompositeIconRef;

extern "CoreServices" fn IsIconRefComposite(compositeIconRef: IconRef, backgroundIconRef: ?*IconRef, foregroundIconRef: ?*IconRef) callconv(.C) objc.OSErr;
pub const isIconRefComposite = IsIconRefComposite;

extern "CoreServices" fn IsValidIconRef(theIconRef: IconRef) callconv(.C) objc.Boolean;
pub const isValidIconRef = IsValidIconRef;

extern "CoreServices" fn IsDataAvailableInIconRef(inIconKind: objc.OSType, inIconRef: IconRef) callconv(.C) objc.Boolean;
pub const isDataAvailableInIconRef = IsDataAvailableInIconRef;

extern "CoreServices" fn SetCustomIconsEnabled(vRefNum: objc.SInt16, enableCustomIcons: objc.Boolean) callconv(.C) objc.OSErr;
pub const setCustomIconsEnabled = SetCustomIconsEnabled;

extern "CoreServices" fn GetCustomIconsEnabled(vRefNum: objc.SInt16, customIconsEnabled: ?*objc.Boolean) callconv(.C) objc.OSErr;
pub const getCustomIconsEnabled = GetCustomIconsEnabled;

extern "CoreServices" fn ReadIconFromFSRef(ref: ?*FSRef, iconFamily: ?*IconFamilyHandle) callconv(.C) objc.OSStatus;
pub const readIconFromFSRef = ReadIconFromFSRef;

pub const LSRolesMask = enum(objc.OptionBits) {
    kLSRolesNone = 1,
    kLSRolesViewer = 2,
    kLSRolesEditor = 4,
    kLSRolesShell = 8,
    kLSRolesAll = -1,
};

pub const LSAcceptanceFlags = enum(objc.OptionBits) {
    kLSAcceptDefault = 1,
    kLSAcceptAllowLoginUI = 2,
};

extern "CoreServices" fn LSCopyDefaultApplicationURLForURL(inURL: core_foundation.URLRef, inRoleMask: LSRolesMask, outError: ?*core_foundation.ErrorRef) callconv(.C) core_foundation.URLRef;
pub const lsCopyDefaultApplicationURLForURL = LSCopyDefaultApplicationURLForURL;

extern "CoreServices" fn LSCopyDefaultApplicationURLForContentType(inContentType: core_foundation.StringRef, inRoleMask: LSRolesMask, outError: ?*core_foundation.ErrorRef) callconv(.C) core_foundation.URLRef;
pub const lsCopyDefaultApplicationURLForContentType = LSCopyDefaultApplicationURLForContentType;

extern "CoreServices" fn LSCopyApplicationURLsForBundleIdentifier(inBundleIdentifier: core_foundation.StringRef, outError: ?*core_foundation.ErrorRef) callconv(.C) core_foundation.ArrayRef;
pub const lsCopyApplicationURLsForBundleIdentifier = LSCopyApplicationURLsForBundleIdentifier;

extern "CoreServices" fn LSCopyApplicationURLsForURL(inURL: core_foundation.URLRef, inRoleMask: LSRolesMask) callconv(.C) core_foundation.ArrayRef;
pub const lsCopyApplicationURLsForURL = LSCopyApplicationURLsForURL;

extern "CoreServices" fn LSCanURLAcceptURL(
    inItemURL: core_foundation.URLRef,
    inTargetURL: core_foundation.URLRef,
    inRoleMask: LSRolesMask,
    inFlags: LSAcceptanceFlags,
    outAcceptsItem: ?*objc.Boolean,
) callconv(.C) objc.OSStatus;
pub const lsCanURLAcceptURL = LSCanURLAcceptURL;

extern "CoreServices" fn LSRegisterURL(inURL: core_foundation.URLRef, inUpdate: objc.Boolean) callconv(.C) objc.OSStatus;
pub const lsRegisterURL = LSRegisterURL;

extern "CoreServices" fn LSCopyDefaultRoleHandlerForContentType(inContentType: core_foundation.StringRef, inRole: LSRolesMask) callconv(.C) core_foundation.StringRef;
pub const lsCopyDefaultRoleHandlerForContentType = LSCopyDefaultRoleHandlerForContentType;

extern "CoreServices" fn LSCopyAllRoleHandlersForContentType(inContentType: core_foundation.StringRef, inRole: LSRolesMask) callconv(.C) core_foundation.ArrayRef;
pub const lsCopyAllRoleHandlersForContentType = LSCopyAllRoleHandlersForContentType;

extern "CoreServices" fn LSSetDefaultRoleHandlerForContentType(inContentType: core_foundation.StringRef, inRole: LSRolesMask, inHandlerBundleID: core_foundation.StringRef) callconv(.C) objc.OSStatus;
pub const lsSetDefaultRoleHandlerForContentType = LSSetDefaultRoleHandlerForContentType;

extern "CoreServices" fn LSCopyDefaultHandlerForURLScheme(inURLScheme: core_foundation.StringRef) callconv(.C) core_foundation.StringRef;
pub const lsCopyDefaultHandlerForURLScheme = LSCopyDefaultHandlerForURLScheme;

extern "CoreServices" fn LSCopyAllHandlersForURLScheme(inURLScheme: core_foundation.StringRef) callconv(.C) core_foundation.ArrayRef;
pub const lsCopyAllHandlersForURLScheme = LSCopyAllHandlersForURLScheme;

extern "CoreServices" fn LSSetDefaultHandlerForURLScheme(inURLScheme: core_foundation.StringRef, inHandlerBundleID: core_foundation.StringRef) callconv(.C) objc.OSStatus;
pub const lsSetDefaultHandlerForURLScheme = LSSetDefaultHandlerForURLScheme;

pub const LSRequestedInfo = enum(objc.OptionBits) {
    kLSRequestExtension = 1,
    kLSRequestTypeCreator = 2,
    kLSRequestBasicFlagsOnly = 4,
    kLSRequestAppTypeFlags = 8,
    kLSRequestAllFlags = 16,
    kLSRequestIconAndKind = 32,
    kLSRequestExtensionFlagsOnly = 64,
    kLSRequestAllInfo = -1,
};

pub const LSItemInfoFlags = enum(objc.OptionBits) {
    kLSItemInfoIsPlainFile = 1,
    kLSItemInfoIsPackage = 2,
    kLSItemInfoIsApplication = 4,
    kLSItemInfoIsContainer = 8,
    kLSItemInfoIsAliasFile = 16,
    kLSItemInfoIsSymlink = 32,
    kLSItemInfoIsInvisible = 64,
    kLSItemInfoIsNativeApp = 128,
    kLSItemInfoIsClassicApp = 256,
    kLSItemInfoAppPrefersNative = 512,
    kLSItemInfoAppPrefersClassic = 1024,
    kLSItemInfoAppIsScriptable = 2048,
    kLSItemInfoIsVolume = 4096,
    kLSItemInfoExtensionIsHidden = 1048576,
};

pub const LSItemInfoRecord = extern struct {
    flags: LSItemInfoFlags,
    filetype: objc.OSType,
    creator: objc.OSType,
    extension: core_foundation.StringRef,
};

extern "CoreServices" fn LSCopyItemInfoForURL(inURL: core_foundation.URLRef, inWhichInfo: LSRequestedInfo, outItemInfo: ?*LSItemInfoRecord) callconv(.C) objc.OSStatus;
pub const lsCopyItemInfoForURL = LSCopyItemInfoForURL;

extern "CoreServices" fn LSCopyItemInfoForRef(inItemRef: ?*FSRef, inWhichInfo: LSRequestedInfo, outItemInfo: ?*LSItemInfoRecord) callconv(.C) objc.OSStatus;
pub const lsCopyItemInfoForRef = LSCopyItemInfoForRef;

extern "CoreServices" fn LSGetExtensionInfo(inNameLen: objc.UniCharCount, inNameBuffer: *objc.UniChar, outExtStartIndex: ?*objc.UniCharCount) callconv(.C) objc.OSStatus;
pub const lsGetExtensionInfo = LSGetExtensionInfo;

extern "CoreServices" fn LSCopyDisplayNameForRef(inRef: ?*FSRef, outDisplayName: ?*core_foundation.StringRef) callconv(.C) objc.OSStatus;
pub const lsCopyDisplayNameForRef = LSCopyDisplayNameForRef;

extern "CoreServices" fn LSCopyDisplayNameForURL(inURL: core_foundation.URLRef, outDisplayName: ?*core_foundation.StringRef) callconv(.C) objc.OSStatus;
pub const lsCopyDisplayNameForURL = LSCopyDisplayNameForURL;

extern "CoreServices" fn LSSetExtensionHiddenForRef(inRef: ?*FSRef, inHide: objc.Boolean) callconv(.C) objc.OSStatus;
pub const lsSetExtensionHiddenForRef = LSSetExtensionHiddenForRef;

extern "CoreServices" fn LSSetExtensionHiddenForURL(inURL: core_foundation.URLRef, inHide: objc.Boolean) callconv(.C) objc.OSStatus;
pub const lsSetExtensionHiddenForURL = LSSetExtensionHiddenForURL;

extern "CoreServices" fn LSCopyKindStringForRef(inFSRef: ?*FSRef, outKindString: ?*core_foundation.StringRef) callconv(.C) objc.OSStatus;
pub const lsCopyKindStringForRef = LSCopyKindStringForRef;

extern "CoreServices" fn LSCopyKindStringForURL(inURL: core_foundation.URLRef, outKindString: ?*core_foundation.StringRef) callconv(.C) objc.OSStatus;
pub const lsCopyKindStringForURL = LSCopyKindStringForURL;

extern "CoreServices" fn LSCopyKindStringForTypeInfo(
    inType: objc.OSType,
    inCreator: objc.OSType,
    inExtension: core_foundation.StringRef,
    outKindString: ?*core_foundation.StringRef,
) callconv(.C) objc.OSStatus;
pub const lsCopyKindStringForTypeInfo = LSCopyKindStringForTypeInfo;

extern "CoreServices" fn LSCopyKindStringForMIMEType(inMIMEType: core_foundation.StringRef, outKindString: ?*core_foundation.StringRef) callconv(.C) objc.OSStatus;
pub const lsCopyKindStringForMIMEType = LSCopyKindStringForMIMEType;

extern "CoreServices" fn LSGetApplicationForItem(
    inItemRef: ?*FSRef,
    inRoleMask: LSRolesMask,
    outAppRef: ?*FSRef,
    outAppURL: ?*core_foundation.URLRef,
) callconv(.C) objc.OSStatus;
pub const lsGetApplicationForItem = LSGetApplicationForItem;

extern "CoreServices" fn LSGetApplicationForInfo(
    inType: objc.OSType,
    inCreator: objc.OSType,
    inExtension: core_foundation.StringRef,
    inRoleMask: LSRolesMask,
    outAppRef: ?*FSRef,
    outAppURL: ?*core_foundation.URLRef,
) callconv(.C) objc.OSStatus;
pub const lsGetApplicationForInfo = LSGetApplicationForInfo;

extern "CoreServices" fn LSCopyApplicationForMIMEType(inMIMEType: core_foundation.StringRef, inRoleMask: LSRolesMask, outAppURL: ?*core_foundation.URLRef) callconv(.C) objc.OSStatus;
pub const lsCopyApplicationForMIMEType = LSCopyApplicationForMIMEType;

extern "CoreServices" fn LSGetApplicationForURL(
    inURL: core_foundation.URLRef,
    inRoleMask: LSRolesMask,
    outAppRef: ?*FSRef,
    outAppURL: ?*core_foundation.URLRef,
) callconv(.C) objc.OSStatus;
pub const lsGetApplicationForURL = LSGetApplicationForURL;

extern "CoreServices" fn LSFindApplicationForInfo(
    inCreator: objc.OSType,
    inBundleID: core_foundation.StringRef,
    inName: core_foundation.StringRef,
    outAppRef: ?*FSRef,
    outAppURL: ?*core_foundation.URLRef,
) callconv(.C) objc.OSStatus;
pub const lsFindApplicationForInfo = LSFindApplicationForInfo;

extern "CoreServices" fn LSCanRefAcceptItem(
    inItemFSRef: ?*FSRef,
    inTargetRef: ?*FSRef,
    inRoleMask: LSRolesMask,
    inFlags: LSAcceptanceFlags,
    outAcceptsItem: ?*objc.Boolean,
) callconv(.C) objc.OSStatus;
pub const lsCanRefAcceptItem = LSCanRefAcceptItem;

extern "CoreServices" fn LSRegisterFSRef(inRef: ?*FSRef, inUpdate: objc.Boolean) callconv(.C) objc.OSStatus;
pub const lsRegisterFSRef = LSRegisterFSRef;

extern "CoreServices" fn LSCopyItemAttribute(
    inItem: ?*FSRef,
    inRoles: LSRolesMask,
    inAttributeName: core_foundation.StringRef,
    outValue: ?*core_foundation.TypeRef,
) callconv(.C) objc.OSStatus;
pub const lsCopyItemAttribute = LSCopyItemAttribute;

extern "CoreServices" fn LSCopyItemAttributes(
    inItem: ?*FSRef,
    inRoles: LSRolesMask,
    inAttributeNames: core_foundation.ArrayRef,
    outValues: ?*core_foundation.DictionaryRef,
) callconv(.C) objc.OSStatus;
pub const lsCopyItemAttributes = LSCopyItemAttributes;

extern "CoreServices" fn LSSetItemAttribute(
    inItem: ?*FSRef,
    inRoles: LSRolesMask,
    inAttributeName: core_foundation.StringRef,
    inValue: core_foundation.TypeRef,
) callconv(.C) objc.OSStatus;
pub const lsSetItemAttribute = LSSetItemAttribute;

pub const LSHandlerOptions = enum(objc.OptionBits) {
    kLSHandlerOptionsDefault = 0,
    kLSHandlerOptionsIgnoreCreator = 1,
};

extern "CoreServices" fn LSGetHandlerOptionsForContentType(inContentType: core_foundation.StringRef) callconv(.C) LSHandlerOptions;
pub const lsGetHandlerOptionsForContentType = LSGetHandlerOptionsForContentType;

extern "CoreServices" fn LSSetHandlerOptionsForContentType(inContentType: core_foundation.StringRef, inOptions: LSHandlerOptions) callconv(.C) objc.OSStatus;
pub const lsSetHandlerOptionsForContentType = LSSetHandlerOptionsForContentType;

pub const LSLaunchFlags = enum(objc.OptionBits) {
    kLSLaunchDefaults = 1,
    kLSLaunchAndPrint = 2,
    kLSLaunchAndDisplayErrors = 64,
    kLSLaunchDontAddToRecents = 256,
    kLSLaunchDontSwitch = 512,
    kLSLaunchAsync = 65536,
    kLSLaunchNewInstance = 524288,
    kLSLaunchAndHide = 1048576,
    kLSLaunchAndHideOthers = 2097152,
};

pub const LSLaunchURLSpec = extern struct {
    appURL: core_foundation.URLRef,
    itemURLs: core_foundation.ArrayRef,
    passThruParams: ?*AEDesc,
    launchFlags: LSLaunchFlags,
    asyncRefCon: ?*anyopaque,
};

extern "CoreServices" fn LSOpenCFURLRef(inURL: core_foundation.URLRef, outLaunchedURL: ?*core_foundation.URLRef) callconv(.C) objc.OSStatus;
pub const lsOpenCFURLRef = LSOpenCFURLRef;

extern "CoreServices" fn LSOpenFromURLSpec(inLaunchSpec: ?*LSLaunchURLSpec, outLaunchedURL: ?*core_foundation.URLRef) callconv(.C) objc.OSStatus;
pub const lsOpenFromURLSpec = LSOpenFromURLSpec;

pub const anon281 = enum(u32) {
    kLSLaunchInhibitBGOnly = 128,
    kLSLaunchNoParams = 2048,
    kLSLaunchStartClassic = 131072,
    kLSLaunchInClassic = 262144,
    kLSLaunchHasUntrustedContents = 4194304,
};

pub const LSLaunchFSRefSpec = extern struct {
    appRef: ?*FSRef,
    numDocs: objc.ItemCount,
    itemRefs: ?*FSRef,
    passThruParams: ?*AEDesc,
    launchFlags: LSLaunchFlags,
    asyncRefCon: ?*anyopaque,
};

extern "CoreServices" fn LSOpenFSRef(inRef: ?*FSRef, outLaunchedRef: ?*FSRef) callconv(.C) objc.OSStatus;
pub const lsOpenFSRef = LSOpenFSRef;

extern "CoreServices" fn LSOpenFromRefSpec(inLaunchSpec: ?*LSLaunchFSRefSpec, outLaunchedRef: ?*FSRef) callconv(.C) objc.OSStatus;
pub const lsOpenFromRefSpec = LSOpenFromRefSpec;

pub const LSApplicationParameters = extern struct {
    version: core_foundation.Index,
    flags: LSLaunchFlags,
    application: ?*FSRef,
    asyncLaunchRefCon: ?*anyopaque,
    environment: core_foundation.DictionaryRef,
    argv: core_foundation.ArrayRef,
    initialEvent: ?*AppleEvent,
};

extern "CoreServices" fn LSOpenApplication(appParams: ?*LSApplicationParameters, outPSN: ?*objc.ProcessSerialNumber) callconv(.C) objc.OSStatus;
pub const lsOpenApplication = LSOpenApplication;

extern "CoreServices" fn LSOpenItemsWithRole(
    inItems: ?*FSRef,
    inItemCount: core_foundation.Index,
    inRole: LSRolesMask,
    inAEParam: ?*AEKeyDesc,
    inAppParams: ?*LSApplicationParameters,
    outPSNs: ?*objc.ProcessSerialNumber,
    inMaxPSNCount: core_foundation.Index,
) callconv(.C) objc.OSStatus;
pub const lsOpenItemsWithRole = LSOpenItemsWithRole;

extern "CoreServices" fn LSOpenURLsWithRole(
    inURLs: core_foundation.ArrayRef,
    inRole: LSRolesMask,
    inAEParam: ?*AEKeyDesc,
    inAppParams: ?*LSApplicationParameters,
    outPSNs: ?*objc.ProcessSerialNumber,
    inMaxPSNCount: core_foundation.Index,
) callconv(.C) objc.OSStatus;
pub const lsOpenURLsWithRole = LSOpenURLsWithRole;

extern "CoreServices" fn UTTypeCreatePreferredIdentifierForTag(inTagClass: core_foundation.StringRef, inTag: core_foundation.StringRef, inConformingToUTI: core_foundation.StringRef) callconv(.C) core_foundation.StringRef;
pub const utTypeCreatePreferredIdentifierForTag = UTTypeCreatePreferredIdentifierForTag;

extern "CoreServices" fn UTTypeCreateAllIdentifiersForTag(inTagClass: core_foundation.StringRef, inTag: core_foundation.StringRef, inConformingToUTI: core_foundation.StringRef) callconv(.C) core_foundation.ArrayRef;
pub const utTypeCreateAllIdentifiersForTag = UTTypeCreateAllIdentifiersForTag;

extern "CoreServices" fn UTTypeCopyPreferredTagWithClass(inUTI: core_foundation.StringRef, inTagClass: core_foundation.StringRef) callconv(.C) core_foundation.StringRef;
pub const utTypeCopyPreferredTagWithClass = UTTypeCopyPreferredTagWithClass;

extern "CoreServices" fn UTTypeCopyAllTagsWithClass(inUTI: core_foundation.StringRef, inTagClass: core_foundation.StringRef) callconv(.C) core_foundation.ArrayRef;
pub const utTypeCopyAllTagsWithClass = UTTypeCopyAllTagsWithClass;

extern "CoreServices" fn UTTypeEqual(inUTI1: core_foundation.StringRef, inUTI2: core_foundation.StringRef) callconv(.C) objc.Boolean;
pub const utTypeEqual = UTTypeEqual;

extern "CoreServices" fn UTTypeConformsTo(inUTI: core_foundation.StringRef, inConformsToUTI: core_foundation.StringRef) callconv(.C) objc.Boolean;
pub const utTypeConformsTo = UTTypeConformsTo;

extern "CoreServices" fn UTTypeCopyDescription(inUTI: core_foundation.StringRef) callconv(.C) core_foundation.StringRef;
pub const utTypeCopyDescription = UTTypeCopyDescription;

extern "CoreServices" fn UTTypeIsDeclared(inUTI: core_foundation.StringRef) callconv(.C) objc.Boolean;
pub const utTypeIsDeclared = UTTypeIsDeclared;

extern "CoreServices" fn UTTypeIsDynamic(inUTI: core_foundation.StringRef) callconv(.C) objc.Boolean;
pub const utTypeIsDynamic = UTTypeIsDynamic;

extern "CoreServices" fn UTTypeCopyDeclaration(inUTI: core_foundation.StringRef) callconv(.C) core_foundation.DictionaryRef;
pub const utTypeCopyDeclaration = UTTypeCopyDeclaration;

extern "CoreServices" fn UTTypeCopyDeclaringBundleURL(inUTI: core_foundation.StringRef) callconv(.C) core_foundation.URLRef;
pub const utTypeCopyDeclaringBundleURL = UTTypeCopyDeclaringBundleURL;

extern "CoreServices" fn UTCreateStringForOSType(inOSType: objc.OSType) callconv(.C) core_foundation.StringRef;
pub const utCreateStringForOSType = UTCreateStringForOSType;

extern "CoreServices" fn UTGetOSTypeFromString(inString: core_foundation.StringRef) callconv(.C) objc.OSType;
pub const utGetOSTypeFromString = UTGetOSTypeFromString;

pub const __MDItem = extern struct {};

pub const MDItemRef = ?*__MDItem;

extern "CoreServices" fn MDItemGetTypeID() callconv(.C) core_foundation.TypeID;
pub const mdItemGetTypeID = MDItemGetTypeID;

extern "CoreServices" fn MDItemCreate(allocator: core_foundation.AllocatorRef, path: core_foundation.StringRef) callconv(.C) MDItemRef;
pub const mdItemCreate = MDItemCreate;

extern "CoreServices" fn MDItemCreateWithURL(allocator: core_foundation.AllocatorRef, url: core_foundation.URLRef) callconv(.C) MDItemRef;
pub const mdItemCreateWithURL = MDItemCreateWithURL;

extern "CoreServices" fn MDItemsCreateWithURLs(allocator: core_foundation.AllocatorRef, urls: core_foundation.ArrayRef) callconv(.C) core_foundation.ArrayRef;
pub const mdItemsCreateWithURLs = MDItemsCreateWithURLs;

extern "CoreServices" fn MDItemCopyAttribute(item: MDItemRef, name: core_foundation.StringRef) callconv(.C) core_foundation.TypeRef;
pub const mdItemCopyAttribute = MDItemCopyAttribute;

extern "CoreServices" fn MDItemCopyAttributes(item: MDItemRef, names: core_foundation.ArrayRef) callconv(.C) core_foundation.DictionaryRef;
pub const mdItemCopyAttributes = MDItemCopyAttributes;

extern "CoreServices" fn MDItemCopyAttributeList(item: MDItemRef) callconv(.C) core_foundation.DictionaryRef;
pub const mdItemCopyAttributeList = MDItemCopyAttributeList;

extern "CoreServices" fn MDItemCopyAttributeNames(item: MDItemRef) callconv(.C) core_foundation.ArrayRef;
pub const mdItemCopyAttributeNames = MDItemCopyAttributeNames;

extern "CoreServices" fn MDItemsCopyAttributes(items: core_foundation.ArrayRef, names: core_foundation.ArrayRef) callconv(.C) core_foundation.ArrayRef;
pub const mdItemsCopyAttributes = MDItemsCopyAttributes;

extern "CoreServices" fn __MDItemCopyAttributesEllipsis1(item: MDItemRef) callconv(.C) core_foundation.DictionaryRef;
pub const __mdItemCopyAttributesEllipsis1 = __MDItemCopyAttributesEllipsis1;

pub const __MDQuery = extern struct {};

pub const MDQueryRef = ?*__MDQuery;

pub const MDQueryOptionFlags = enum(u32) {
    kMDQuerySynchronous = 1,
    kMDQueryWantsUpdates = 4,
    kMDQueryAllowFSTranslation = 8,
};

extern "CoreServices" fn MDQueryGetTypeID() callconv(.C) core_foundation.TypeID;
pub const mdQueryGetTypeID = MDQueryGetTypeID;

extern "CoreServices" fn MDQueryCreate(
    allocator: core_foundation.AllocatorRef,
    queryString: core_foundation.StringRef,
    valueListAttrs: core_foundation.ArrayRef,
    sortingAttrs: core_foundation.ArrayRef,
) callconv(.C) MDQueryRef;
pub const mdQueryCreate = MDQueryCreate;

extern "CoreServices" fn MDQueryCreateSubset(
    allocator: core_foundation.AllocatorRef,
    query: MDQueryRef,
    queryString: core_foundation.StringRef,
    valueListAttrs: core_foundation.ArrayRef,
    sortingAttrs: core_foundation.ArrayRef,
) callconv(.C) MDQueryRef;
pub const mdQueryCreateSubset = MDQueryCreateSubset;

extern "CoreServices" fn MDQueryCreateForItems(
    allocator: core_foundation.AllocatorRef,
    queryString: core_foundation.StringRef,
    valueListAttrs: core_foundation.ArrayRef,
    sortingAttrs: core_foundation.ArrayRef,
    items: core_foundation.ArrayRef,
) callconv(.C) MDQueryRef;
pub const mdQueryCreateForItems = MDQueryCreateForItems;

extern "CoreServices" fn MDQueryCopyQueryString(query: MDQueryRef) callconv(.C) core_foundation.StringRef;
pub const mdQueryCopyQueryString = MDQueryCopyQueryString;

extern "CoreServices" fn MDQueryCopyValueListAttributes(query: MDQueryRef) callconv(.C) core_foundation.ArrayRef;
pub const mdQueryCopyValueListAttributes = MDQueryCopyValueListAttributes;

extern "CoreServices" fn MDQueryCopySortingAttributes(query: MDQueryRef) callconv(.C) core_foundation.ArrayRef;
pub const mdQueryCopySortingAttributes = MDQueryCopySortingAttributes;

pub const MDQueryBatchingParams = extern struct {
    first_max_num: objc.size_t,
    first_max_ms: objc.size_t,
    progress_max_num: objc.size_t,
    progress_max_ms: objc.size_t,
    update_max_num: objc.size_t,
    update_max_ms: objc.size_t,
};

extern "CoreServices" fn MDQueryGetBatchingParameters(query: MDQueryRef) callconv(.C) MDQueryBatchingParams;
pub const mdQueryGetBatchingParameters = MDQueryGetBatchingParameters;

extern "CoreServices" fn MDQuerySetBatchingParameters(query: MDQueryRef, params: MDQueryBatchingParams) callconv(.C) void;
pub const mdQuerySetBatchingParameters = MDQuerySetBatchingParameters;

pub const MDQueryCreateResultFunction = ?*const fn (MDQueryRef, MDItemRef, ?*anyopaque) callconv(.C) ?*anyopaque;

extern "CoreServices" fn MDQuerySetCreateResultFunction(
    query: MDQueryRef,
    func: MDQueryCreateResultFunction,
    context: ?*anyopaque,
    cb: ?*core_foundation.ArrayCallBacks,
) callconv(.C) void;
pub const mdQuerySetCreateResultFunction = MDQuerySetCreateResultFunction;

pub const MDQueryCreateValueFunction = ?*const fn (
    MDQueryRef,
    core_foundation.StringRef,
    core_foundation.TypeRef,
    ?*anyopaque,
) callconv(.C) ?*anyopaque;

extern "CoreServices" fn MDQuerySetCreateValueFunction(
    query: MDQueryRef,
    func: MDQueryCreateValueFunction,
    context: ?*anyopaque,
    cb: ?*core_foundation.ArrayCallBacks,
) callconv(.C) void;
pub const mdQuerySetCreateValueFunction = MDQuerySetCreateValueFunction;

extern "CoreServices" fn MDQuerySetDispatchQueue(query: MDQueryRef, queue: objc.dispatch_queue_t) callconv(.C) void;
pub const mdQuerySetDispatchQueue = MDQuerySetDispatchQueue;

extern "CoreServices" fn MDQueryExecute(query: MDQueryRef, optionFlags: core_foundation.OptionFlags) callconv(.C) objc.Boolean;
pub const mdQueryExecute = MDQueryExecute;

extern "CoreServices" fn MDQueryStop(query: MDQueryRef) callconv(.C) void;
pub const mdQueryStop = MDQueryStop;

extern "CoreServices" fn MDQueryDisableUpdates(query: MDQueryRef) callconv(.C) void;
pub const mdQueryDisableUpdates = MDQueryDisableUpdates;

extern "CoreServices" fn MDQueryEnableUpdates(query: MDQueryRef) callconv(.C) void;
pub const mdQueryEnableUpdates = MDQueryEnableUpdates;

extern "CoreServices" fn MDQueryIsGatheringComplete(query: MDQueryRef) callconv(.C) objc.Boolean;
pub const mdQueryIsGatheringComplete = MDQueryIsGatheringComplete;

extern "CoreServices" fn MDQueryGetResultCount(query: MDQueryRef) callconv(.C) core_foundation.Index;
pub const mdQueryGetResultCount = MDQueryGetResultCount;

extern "CoreServices" fn MDQueryGetResultAtIndex(query: MDQueryRef, idx: core_foundation.Index) callconv(.C) ?*anyopaque;
pub const mdQueryGetResultAtIndex = MDQueryGetResultAtIndex;

extern "CoreServices" fn MDQueryGetIndexOfResult(query: MDQueryRef, result: ?*anyopaque) callconv(.C) core_foundation.Index;
pub const mdQueryGetIndexOfResult = MDQueryGetIndexOfResult;

extern "CoreServices" fn MDQueryGetAttributeValueOfResultAtIndex(query: MDQueryRef, name: core_foundation.StringRef, idx: core_foundation.Index) callconv(.C) ?*anyopaque;
pub const mdQueryGetAttributeValueOfResultAtIndex = MDQueryGetAttributeValueOfResultAtIndex;

extern "CoreServices" fn MDQueryCopyValuesOfAttribute(query: MDQueryRef, name: core_foundation.StringRef) callconv(.C) core_foundation.ArrayRef;
pub const mdQueryCopyValuesOfAttribute = MDQueryCopyValuesOfAttribute;

extern "CoreServices" fn MDQueryGetCountOfResultsWithAttributeValue(query: MDQueryRef, name: core_foundation.StringRef, value: core_foundation.TypeRef) callconv(.C) core_foundation.Index;
pub const mdQueryGetCountOfResultsWithAttributeValue = MDQueryGetCountOfResultsWithAttributeValue;

extern "CoreServices" fn MDQuerySetSortOrder(query: MDQueryRef, sortingAttrs: core_foundation.ArrayRef) callconv(.C) objc.Boolean;
pub const mdQuerySetSortOrder = MDQuerySetSortOrder;

pub const MDQuerySortOptionFlags = enum(u32) {
    kMDQueryReverseSortOrderFlag = 1,
};

extern "CoreServices" fn MDQuerySetSortOptionFlagsForAttribute(query: MDQueryRef, fieldName: core_foundation.StringRef, flags: objc.uint32_t) callconv(.C) objc.Boolean;
pub const mdQuerySetSortOptionFlagsForAttribute = MDQuerySetSortOptionFlagsForAttribute;

extern "CoreServices" fn MDQueryGetSortOptionFlagsForAttribute(query: MDQueryRef, fieldName: core_foundation.StringRef) callconv(.C) objc.uint32_t;
pub const mdQueryGetSortOptionFlagsForAttribute = MDQueryGetSortOptionFlagsForAttribute;

pub const MDQuerySortComparatorFunction = ?*const fn (*core_foundation.TypeRef, *core_foundation.TypeRef, ?*anyopaque) callconv(.C) core_foundation.ComparisonResult;

extern "CoreServices" fn MDQuerySetSortComparator(query: MDQueryRef, comparator: MDQuerySortComparatorFunction, context: ?*anyopaque) callconv(.C) void;
pub const mdQuerySetSortComparator = MDQuerySetSortComparator;

extern "CoreServices" fn MDQuerySetSortComparatorBlock(query: MDQueryRef, comparator: *const fn (*core_foundation.TypeRef, *core_foundation.TypeRef) callconv(.C) core_foundation.ComparisonResult) callconv(.C) void;
pub const mdQuerySetSortComparatorBlock = MDQuerySetSortComparatorBlock;

extern "CoreServices" fn MDQuerySetSearchScope(query: MDQueryRef, scopeDirectories: core_foundation.ArrayRef, scopeOptions: objc.OptionBits) callconv(.C) void;
pub const mdQuerySetSearchScope = MDQuerySetSearchScope;

extern "CoreServices" fn MDQuerySetMaxCount(query: MDQueryRef, size: core_foundation.Index) callconv(.C) void;
pub const mdQuerySetMaxCount = MDQuerySetMaxCount;

pub const __MDLabel = extern struct {};

pub const MDLabelRef = ?*__MDLabel;

extern "CoreServices" fn MDLabelGetTypeID() callconv(.C) core_foundation.TypeID;
pub const mdLabelGetTypeID = MDLabelGetTypeID;

extern "CoreServices" fn MDItemCopyLabels(item: MDItemRef) callconv(.C) core_foundation.ArrayRef;
pub const mdItemCopyLabels = MDItemCopyLabels;

extern "CoreServices" fn MDItemSetLabel(item: MDItemRef, label: MDLabelRef) callconv(.C) objc.Boolean;
pub const mdItemSetLabel = MDItemSetLabel;

extern "CoreServices" fn MDItemRemoveLabel(item: MDItemRef, label: MDLabelRef) callconv(.C) objc.Boolean;
pub const mdItemRemoveLabel = MDItemRemoveLabel;

pub const MDLabelDomain = enum(u32) {
    kMDLabelUserDomain = 0,
    kMDLabelLocalDomain = 1,
};

extern "CoreServices" fn MDLabelCreate(
    allocator: core_foundation.AllocatorRef,
    displayName: core_foundation.StringRef,
    kind: core_foundation.StringRef,
    domain: MDLabelDomain,
) callconv(.C) MDLabelRef;
pub const mdLabelCreate = MDLabelCreate;

extern "CoreServices" fn MDLabelCopyAttribute(label: MDLabelRef, name: core_foundation.StringRef) callconv(.C) core_foundation.TypeRef;
pub const mdLabelCopyAttribute = MDLabelCopyAttribute;

extern "CoreServices" fn MDLabelCopyAttributeName(label: MDLabelRef) callconv(.C) core_foundation.StringRef;
pub const mdLabelCopyAttributeName = MDLabelCopyAttributeName;

extern "CoreServices" fn MDLabelDelete(label: MDLabelRef) callconv(.C) objc.Boolean;
pub const mdLabelDelete = MDLabelDelete;

extern "CoreServices" fn MDLabelSetAttributes(label: MDLabelRef, attrs: core_foundation.DictionaryRef) callconv(.C) objc.Boolean;
pub const mdLabelSetAttributes = MDLabelSetAttributes;

extern "CoreServices" fn MDCopyLabelKinds() callconv(.C) core_foundation.ArrayRef;
pub const mdCopyLabelKinds = MDCopyLabelKinds;

extern "CoreServices" fn MDCopyLabelsMatchingExpression(simpleQueryString: core_foundation.StringRef) callconv(.C) core_foundation.ArrayRef;
pub const mdCopyLabelsMatchingExpression = MDCopyLabelsMatchingExpression;

extern "CoreServices" fn MDCopyLabelsWithKind(kind: core_foundation.StringRef) callconv(.C) core_foundation.ArrayRef;
pub const mdCopyLabelsWithKind = MDCopyLabelsWithKind;

extern "CoreServices" fn MDCopyLabelWithUUID(labelUUID: core_foundation.UUIDRef) callconv(.C) MDLabelRef;
pub const mdCopyLabelWithUUID = MDCopyLabelWithUUID;

extern "CoreServices" fn MDSchemaCopyAttributesForContentType(contentTypeUTI: core_foundation.StringRef) callconv(.C) core_foundation.DictionaryRef;
pub const mdSchemaCopyAttributesForContentType = MDSchemaCopyAttributesForContentType;

extern "CoreServices" fn MDSchemaCopyMetaAttributesForAttribute(name: core_foundation.StringRef) callconv(.C) core_foundation.DictionaryRef;
pub const mdSchemaCopyMetaAttributesForAttribute = MDSchemaCopyMetaAttributesForAttribute;

extern "CoreServices" fn MDSchemaCopyAllAttributes() callconv(.C) core_foundation.ArrayRef;
pub const mdSchemaCopyAllAttributes = MDSchemaCopyAllAttributes;

extern "CoreServices" fn MDSchemaCopyDisplayNameForAttribute(name: core_foundation.StringRef) callconv(.C) core_foundation.StringRef;
pub const mdSchemaCopyDisplayNameForAttribute = MDSchemaCopyDisplayNameForAttribute;

extern "CoreServices" fn MDSchemaCopyDisplayDescriptionForAttribute(name: core_foundation.StringRef) callconv(.C) core_foundation.StringRef;
pub const mdSchemaCopyDisplayDescriptionForAttribute = MDSchemaCopyDisplayDescriptionForAttribute;

pub const SKDocumentRef = core_foundation.TypeRef;

extern "CoreServices" fn SKDocumentGetTypeID() callconv(.C) core_foundation.TypeID;
pub const skDocumentGetTypeID = SKDocumentGetTypeID;

extern "CoreServices" fn SKDocumentCreateWithURL(inURL: core_foundation.URLRef) callconv(.C) SKDocumentRef;
pub const skDocumentCreateWithURL = SKDocumentCreateWithURL;

extern "CoreServices" fn SKDocumentCopyURL(inDocument: SKDocumentRef) callconv(.C) core_foundation.URLRef;
pub const skDocumentCopyURL = SKDocumentCopyURL;

extern "CoreServices" fn SKDocumentCreate(inScheme: core_foundation.StringRef, inParent: SKDocumentRef, inName: core_foundation.StringRef) callconv(.C) SKDocumentRef;
pub const skDocumentCreate = SKDocumentCreate;

extern "CoreServices" fn SKDocumentGetSchemeName(inDocument: SKDocumentRef) callconv(.C) core_foundation.StringRef;
pub const skDocumentGetSchemeName = SKDocumentGetSchemeName;

extern "CoreServices" fn SKDocumentGetName(inDocument: SKDocumentRef) callconv(.C) core_foundation.StringRef;
pub const skDocumentGetName = SKDocumentGetName;

extern "CoreServices" fn SKDocumentGetParent(inDocument: SKDocumentRef) callconv(.C) SKDocumentRef;
pub const skDocumentGetParent = SKDocumentGetParent;

pub const __SKIndex = extern struct {};

pub const SKIndexRef = ?*__SKIndex;

extern "CoreServices" fn SKIndexGetTypeID() callconv(.C) core_foundation.TypeID;
pub const skIndexGetTypeID = SKIndexGetTypeID;

pub const __SKIndexDocumentIterator = extern struct {};

pub const SKIndexDocumentIteratorRef = ?*__SKIndexDocumentIterator;

extern "CoreServices" fn SKIndexDocumentIteratorGetTypeID() callconv(.C) core_foundation.TypeID;
pub const skIndexDocumentIteratorGetTypeID = SKIndexDocumentIteratorGetTypeID;

pub const SKIndexType = enum(u32) {
    kSKIndexUnknown = 0,
    kSKIndexInverted = 1,
    kSKIndexVector = 2,
    kSKIndexInvertedVector = 3,
};

pub const SKDocumentIndexState = enum(u32) {
    kSKDocumentStateNotIndexed = 0,
    kSKDocumentStateIndexed = 1,
    kSKDocumentStateAddPending = 2,
    kSKDocumentStateDeletePending = 3,
};

extern "CoreServices" fn SKIndexCreateWithURL(
    inURL: core_foundation.URLRef,
    inIndexName: core_foundation.StringRef,
    inIndexType: SKIndexType,
    inAnalysisProperties: core_foundation.DictionaryRef,
) callconv(.C) SKIndexRef;
pub const skIndexCreateWithURL = SKIndexCreateWithURL;

extern "CoreServices" fn SKIndexOpenWithURL(inURL: core_foundation.URLRef, inIndexName: core_foundation.StringRef, inWriteAccess: objc.Boolean) callconv(.C) SKIndexRef;
pub const skIndexOpenWithURL = SKIndexOpenWithURL;

extern "CoreServices" fn SKIndexCreateWithMutableData(
    inData: core_foundation.MutableDataRef,
    inIndexName: core_foundation.StringRef,
    inIndexType: SKIndexType,
    inAnalysisProperties: core_foundation.DictionaryRef,
) callconv(.C) SKIndexRef;
pub const skIndexCreateWithMutableData = SKIndexCreateWithMutableData;

extern "CoreServices" fn SKIndexOpenWithData(inData: core_foundation.DataRef, inIndexName: core_foundation.StringRef) callconv(.C) SKIndexRef;
pub const skIndexOpenWithData = SKIndexOpenWithData;

extern "CoreServices" fn SKIndexOpenWithMutableData(inData: core_foundation.MutableDataRef, inIndexName: core_foundation.StringRef) callconv(.C) SKIndexRef;
pub const skIndexOpenWithMutableData = SKIndexOpenWithMutableData;

extern "CoreServices" fn SKIndexFlush(inIndex: SKIndexRef) callconv(.C) objc.Boolean;
pub const skIndexFlush = SKIndexFlush;

extern "CoreServices" fn SKIndexSetMaximumBytesBeforeFlush(inIndex: SKIndexRef, inBytesForUpdate: core_foundation.Index) callconv(.C) void;
pub const skIndexSetMaximumBytesBeforeFlush = SKIndexSetMaximumBytesBeforeFlush;

extern "CoreServices" fn SKIndexGetMaximumBytesBeforeFlush(inIndex: SKIndexRef) callconv(.C) core_foundation.Index;
pub const skIndexGetMaximumBytesBeforeFlush = SKIndexGetMaximumBytesBeforeFlush;

extern "CoreServices" fn SKIndexCompact(inIndex: SKIndexRef) callconv(.C) objc.Boolean;
pub const skIndexCompact = SKIndexCompact;

extern "CoreServices" fn SKIndexGetIndexType(inIndex: SKIndexRef) callconv(.C) SKIndexType;
pub const skIndexGetIndexType = SKIndexGetIndexType;

extern "CoreServices" fn SKIndexGetAnalysisProperties(inIndex: SKIndexRef) callconv(.C) core_foundation.DictionaryRef;
pub const skIndexGetAnalysisProperties = SKIndexGetAnalysisProperties;

extern "CoreServices" fn SKIndexGetDocumentCount(inIndex: SKIndexRef) callconv(.C) core_foundation.Index;
pub const skIndexGetDocumentCount = SKIndexGetDocumentCount;

extern "CoreServices" fn SKIndexClose(inIndex: SKIndexRef) callconv(.C) void;
pub const skIndexClose = SKIndexClose;

pub const SKDocumentID = core_foundation.Index;

extern "CoreServices" fn SKIndexAddDocumentWithText(
    inIndex: SKIndexRef,
    inDocument: SKDocumentRef,
    inDocumentText: core_foundation.StringRef,
    inCanReplace: objc.Boolean,
) callconv(.C) objc.Boolean;
pub const skIndexAddDocumentWithText = SKIndexAddDocumentWithText;

extern "CoreServices" fn SKIndexAddDocument(
    inIndex: SKIndexRef,
    inDocument: SKDocumentRef,
    inMIMETypeHint: core_foundation.StringRef,
    inCanReplace: objc.Boolean,
) callconv(.C) objc.Boolean;
pub const skIndexAddDocument = SKIndexAddDocument;

extern "CoreServices" fn SKIndexRemoveDocument(inIndex: SKIndexRef, inDocument: SKDocumentRef) callconv(.C) objc.Boolean;
pub const skIndexRemoveDocument = SKIndexRemoveDocument;

extern "CoreServices" fn SKIndexCopyDocumentProperties(inIndex: SKIndexRef, inDocument: SKDocumentRef) callconv(.C) core_foundation.DictionaryRef;
pub const skIndexCopyDocumentProperties = SKIndexCopyDocumentProperties;

extern "CoreServices" fn SKIndexSetDocumentProperties(inIndex: SKIndexRef, inDocument: SKDocumentRef, inProperties: core_foundation.DictionaryRef) callconv(.C) void;
pub const skIndexSetDocumentProperties = SKIndexSetDocumentProperties;

extern "CoreServices" fn SKIndexGetDocumentState(inIndex: SKIndexRef, inDocument: SKDocumentRef) callconv(.C) SKDocumentIndexState;
pub const skIndexGetDocumentState = SKIndexGetDocumentState;

extern "CoreServices" fn SKIndexGetDocumentID(inIndex: SKIndexRef, inDocument: SKDocumentRef) callconv(.C) SKDocumentID;
pub const skIndexGetDocumentID = SKIndexGetDocumentID;

extern "CoreServices" fn SKIndexCopyDocumentForDocumentID(inIndex: SKIndexRef, inDocumentID: SKDocumentID) callconv(.C) SKDocumentRef;
pub const skIndexCopyDocumentForDocumentID = SKIndexCopyDocumentForDocumentID;

extern "CoreServices" fn SKIndexRenameDocument(inIndex: SKIndexRef, inDocument: SKDocumentRef, inNewName: core_foundation.StringRef) callconv(.C) objc.Boolean;
pub const skIndexRenameDocument = SKIndexRenameDocument;

extern "CoreServices" fn SKIndexMoveDocument(inIndex: SKIndexRef, inDocument: SKDocumentRef, inNewParent: SKDocumentRef) callconv(.C) objc.Boolean;
pub const skIndexMoveDocument = SKIndexMoveDocument;

extern "CoreServices" fn SKIndexDocumentIteratorCreate(inIndex: SKIndexRef, inParentDocument: SKDocumentRef) callconv(.C) SKIndexDocumentIteratorRef;
pub const skIndexDocumentIteratorCreate = SKIndexDocumentIteratorCreate;

extern "CoreServices" fn SKIndexDocumentIteratorCopyNext(inIterator: SKIndexDocumentIteratorRef) callconv(.C) SKDocumentRef;
pub const skIndexDocumentIteratorCopyNext = SKIndexDocumentIteratorCopyNext;

extern "CoreServices" fn SKIndexGetMaximumDocumentID(inIndex: SKIndexRef) callconv(.C) SKDocumentID;
pub const skIndexGetMaximumDocumentID = SKIndexGetMaximumDocumentID;

extern "CoreServices" fn SKIndexGetDocumentTermCount(inIndex: SKIndexRef, inDocumentID: SKDocumentID) callconv(.C) core_foundation.Index;
pub const skIndexGetDocumentTermCount = SKIndexGetDocumentTermCount;

extern "CoreServices" fn SKIndexCopyTermIDArrayForDocumentID(inIndex: SKIndexRef, inDocumentID: SKDocumentID) callconv(.C) core_foundation.ArrayRef;
pub const skIndexCopyTermIDArrayForDocumentID = SKIndexCopyTermIDArrayForDocumentID;

extern "CoreServices" fn SKIndexGetDocumentTermFrequency(inIndex: SKIndexRef, inDocumentID: SKDocumentID, inTermID: core_foundation.Index) callconv(.C) core_foundation.Index;
pub const skIndexGetDocumentTermFrequency = SKIndexGetDocumentTermFrequency;

extern "CoreServices" fn SKIndexGetMaximumTermID(inIndex: SKIndexRef) callconv(.C) core_foundation.Index;
pub const skIndexGetMaximumTermID = SKIndexGetMaximumTermID;

extern "CoreServices" fn SKIndexGetTermDocumentCount(inIndex: SKIndexRef, inTermID: core_foundation.Index) callconv(.C) core_foundation.Index;
pub const skIndexGetTermDocumentCount = SKIndexGetTermDocumentCount;

extern "CoreServices" fn SKIndexCopyDocumentIDArrayForTermID(inIndex: SKIndexRef, inTermID: core_foundation.Index) callconv(.C) core_foundation.ArrayRef;
pub const skIndexCopyDocumentIDArrayForTermID = SKIndexCopyDocumentIDArrayForTermID;

extern "CoreServices" fn SKIndexCopyTermStringForTermID(inIndex: SKIndexRef, inTermID: core_foundation.Index) callconv(.C) core_foundation.StringRef;
pub const skIndexCopyTermStringForTermID = SKIndexCopyTermStringForTermID;

extern "CoreServices" fn SKIndexGetTermIDForTermString(inIndex: SKIndexRef, inTermString: core_foundation.StringRef) callconv(.C) core_foundation.Index;
pub const skIndexGetTermIDForTermString = SKIndexGetTermIDForTermString;

extern "CoreServices" fn SKLoadDefaultExtractorPlugIns() callconv(.C) void;
pub const skLoadDefaultExtractorPlugIns = SKLoadDefaultExtractorPlugIns;

pub const __SKSearch = extern struct {};

pub const SKSearchRef = ?*__SKSearch;

extern "CoreServices" fn SKSearchGetTypeID() callconv(.C) core_foundation.TypeID;
pub const skSearchGetTypeID = SKSearchGetTypeID;

pub const SKSearchOptions = objc.UInt32;

extern "CoreServices" fn SKSearchCreate(inIndex: SKIndexRef, inQuery: core_foundation.StringRef, inSearchOptions: SKSearchOptions) callconv(.C) SKSearchRef;
pub const skSearchCreate = SKSearchCreate;

extern "CoreServices" fn SKSearchCancel(inSearch: SKSearchRef) callconv(.C) void;
pub const skSearchCancel = SKSearchCancel;

extern "CoreServices" fn SKSearchFindMatches(
    inSearch: SKSearchRef,
    inMaximumCount: core_foundation.Index,
    outDocumentIDsArray: ?*SKDocumentID,
    outScoresArray: ?*f32,
    maximumTime: core_foundation.TimeInterval,
    outFoundCount: ?*core_foundation.Index,
) callconv(.C) objc.Boolean;
pub const skSearchFindMatches = SKSearchFindMatches;

extern "CoreServices" fn SKIndexCopyInfoForDocumentIDs(
    inIndex: SKIndexRef,
    inCount: core_foundation.Index,
    inDocumentIDsArray: ?*SKDocumentID,
    outNamesArray: ?*core_foundation.StringRef,
    outParentIDsArray: ?*SKDocumentID,
) callconv(.C) void;
pub const skIndexCopyInfoForDocumentIDs = SKIndexCopyInfoForDocumentIDs;

extern "CoreServices" fn SKIndexCopyDocumentRefsForDocumentIDs(
    inIndex: SKIndexRef,
    inCount: core_foundation.Index,
    inDocumentIDsArray: ?*SKDocumentID,
    outDocumentRefsArray: ?*SKDocumentRef,
) callconv(.C) void;
pub const skIndexCopyDocumentRefsForDocumentIDs = SKIndexCopyDocumentRefsForDocumentIDs;

extern "CoreServices" fn SKIndexCopyDocumentURLsForDocumentIDs(
    inIndex: SKIndexRef,
    inCount: core_foundation.Index,
    inDocumentIDsArray: ?*SKDocumentID,
    outDocumentURLsArray: ?*core_foundation.URLRef,
) callconv(.C) void;
pub const skIndexCopyDocumentURLsForDocumentIDs = SKIndexCopyDocumentURLsForDocumentIDs;

pub const __SKSearchGroup = extern struct {};

pub const SKSearchGroupRef = ?*__SKSearchGroup;

extern "CoreServices" fn SKSearchGroupGetTypeID() callconv(.C) core_foundation.TypeID;
pub const skSearchGroupGetTypeID = SKSearchGroupGetTypeID;

pub const __SKSearchResults = extern struct {};

pub const SKSearchResultsRef = ?*__SKSearchResults;

extern "CoreServices" fn SKSearchResultsGetTypeID() callconv(.C) core_foundation.TypeID;
pub const skSearchResultsGetTypeID = SKSearchResultsGetTypeID;

pub const SKSearchType = enum(u32) {
    kSKSearchRanked = 0,
    kSKSearchBooleanRanked = 1,
    kSKSearchRequiredRanked = 2,
    kSKSearchPrefixRanked = 3,
};

pub const SKSearchResultsFilterCallBack = ?*const fn (SKIndexRef, SKDocumentRef, ?*anyopaque) callconv(.C) objc.Boolean;

extern "CoreServices" fn SKSearchGroupCreate(inArrayOfInIndexes: core_foundation.ArrayRef) callconv(.C) SKSearchGroupRef;
pub const skSearchGroupCreate = SKSearchGroupCreate;

extern "CoreServices" fn SKSearchGroupCopyIndexes(inSearchGroup: SKSearchGroupRef) callconv(.C) core_foundation.ArrayRef;
pub const skSearchGroupCopyIndexes = SKSearchGroupCopyIndexes;

extern "CoreServices" fn SKSearchResultsCreateWithQuery(
    inSearchGroup: SKSearchGroupRef,
    inQuery: core_foundation.StringRef,
    inSearchType: SKSearchType,
    inMaxFoundDocuments: core_foundation.Index,
    inContext: ?*anyopaque,
    inFilterCallBack: SKSearchResultsFilterCallBack,
) callconv(.C) SKSearchResultsRef;
pub const skSearchResultsCreateWithQuery = SKSearchResultsCreateWithQuery;

extern "CoreServices" fn SKSearchResultsCreateWithDocuments(
    inSearchGroup: SKSearchGroupRef,
    inExampleDocuments: core_foundation.ArrayRef,
    inMaxFoundDocuments: core_foundation.Index,
    inContext: ?*anyopaque,
    inFilterCallBack: SKSearchResultsFilterCallBack,
) callconv(.C) SKSearchResultsRef;
pub const skSearchResultsCreateWithDocuments = SKSearchResultsCreateWithDocuments;

extern "CoreServices" fn SKSearchResultsGetCount(inSearchResults: SKSearchResultsRef) callconv(.C) core_foundation.Index;
pub const skSearchResultsGetCount = SKSearchResultsGetCount;

extern "CoreServices" fn SKSearchResultsGetInfoInRange(
    inSearchResults: SKSearchResultsRef,
    inRange: core_foundation.Range,
    outDocumentsArray: ?*SKDocumentRef,
    outIndexesArray: ?*SKIndexRef,
    outScoresArray: ?*f32,
) callconv(.C) core_foundation.Index;
pub const skSearchResultsGetInfoInRange = SKSearchResultsGetInfoInRange;

extern "CoreServices" fn SKSearchResultsCopyMatchingTerms(inSearchResults: SKSearchResultsRef, inItem: core_foundation.Index) callconv(.C) core_foundation.ArrayRef;
pub const skSearchResultsCopyMatchingTerms = SKSearchResultsCopyMatchingTerms;

pub const __SKSummary = extern struct {};

pub const SKSummaryRef = ?*__SKSummary;

extern "CoreServices" fn SKSummaryGetTypeID() callconv(.C) core_foundation.TypeID;
pub const skSummaryGetTypeID = SKSummaryGetTypeID;

extern "CoreServices" fn SKSummaryCreateWithString(inString: core_foundation.StringRef) callconv(.C) SKSummaryRef;
pub const skSummaryCreateWithString = SKSummaryCreateWithString;

extern "CoreServices" fn SKSummaryGetSentenceCount(summary: SKSummaryRef) callconv(.C) core_foundation.Index;
pub const skSummaryGetSentenceCount = SKSummaryGetSentenceCount;

extern "CoreServices" fn SKSummaryGetParagraphCount(summary: SKSummaryRef) callconv(.C) core_foundation.Index;
pub const skSummaryGetParagraphCount = SKSummaryGetParagraphCount;

extern "CoreServices" fn SKSummaryCopySentenceAtIndex(summary: SKSummaryRef, i: core_foundation.Index) callconv(.C) core_foundation.StringRef;
pub const skSummaryCopySentenceAtIndex = SKSummaryCopySentenceAtIndex;

extern "CoreServices" fn SKSummaryCopyParagraphAtIndex(summary: SKSummaryRef, i: core_foundation.Index) callconv(.C) core_foundation.StringRef;
pub const skSummaryCopyParagraphAtIndex = SKSummaryCopyParagraphAtIndex;

extern "CoreServices" fn SKSummaryCopySentenceSummaryString(summary: SKSummaryRef, numSentences: core_foundation.Index) callconv(.C) core_foundation.StringRef;
pub const skSummaryCopySentenceSummaryString = SKSummaryCopySentenceSummaryString;

extern "CoreServices" fn SKSummaryCopyParagraphSummaryString(summary: SKSummaryRef, numParagraphs: core_foundation.Index) callconv(.C) core_foundation.StringRef;
pub const skSummaryCopyParagraphSummaryString = SKSummaryCopyParagraphSummaryString;

extern "CoreServices" fn SKSummaryGetSentenceSummaryInfo(
    summary: SKSummaryRef,
    numSentencesInSummary: core_foundation.Index,
    outRankOrderOfSentences: ?*core_foundation.Index,
    outSentenceIndexOfSentences: ?*core_foundation.Index,
    outParagraphIndexOfSentences: ?*core_foundation.Index,
) callconv(.C) core_foundation.Index;
pub const skSummaryGetSentenceSummaryInfo = SKSummaryGetSentenceSummaryInfo;

extern "CoreServices" fn SKSummaryGetParagraphSummaryInfo(
    summary: SKSummaryRef,
    numParagraphsInSummary: core_foundation.Index,
    outRankOrderOfParagraphs: ?*core_foundation.Index,
    outParagraphIndexOfParagraphs: ?*core_foundation.Index,
) callconv(.C) core_foundation.Index;
pub const skSummaryGetParagraphSummaryInfo = SKSummaryGetParagraphSummaryInfo;

pub const FSEventStreamCreateFlags = objc.UInt32;

pub const anon2061 = enum(u32) {
    kFSEventStreamCreateFlagNone = 0,
    kFSEventStreamCreateFlagUseCFTypes = 1,
    kFSEventStreamCreateFlagNoDefer = 2,
    kFSEventStreamCreateFlagWatchRoot = 4,
    kFSEventStreamCreateFlagIgnoreSelf = 8,
    kFSEventStreamCreateFlagFileEvents = 16,
    kFSEventStreamCreateFlagMarkSelf = 32,
    kFSEventStreamCreateFlagUseExtendedData = 64,
    kFSEventStreamCreateFlagFullHistory = 128,
    kFSEventStreamCreateWithDocID = 256,
};

pub const FSEventStreamEventFlags = objc.UInt32;

pub const FSEventStreamEventId = objc.UInt64;

pub const anon5761 = enum(u64) {
    kFSEventStreamEventIdSinceNow = -1,
};

pub const __FSEventStream = extern struct {};

pub const FSEventStreamRef = ?*__FSEventStream;

pub const ConstFSEventStreamRef = ?*__FSEventStream;

pub const FSEventStreamContext = extern struct {
    version: core_foundation.Index,
    info: ?*anyopaque,
    retain: core_foundation.AllocatorRetainCallBack,
    release: core_foundation.AllocatorReleaseCallBack,
    copyDescription: core_foundation.AllocatorCopyDescriptionCallBack,
};

pub const FSEventStreamCallback = ?*const fn (
    ConstFSEventStreamRef,
    ?*anyopaque,
    objc.size_t,
    ?*anyopaque,
    ?*FSEventStreamEventFlags,
    ?*FSEventStreamEventId,
) callconv(.C) void;

extern "CoreServices" fn FSEventStreamCreate(
    allocator: core_foundation.AllocatorRef,
    callback: FSEventStreamCallback,
    context: ?*FSEventStreamContext,
    pathsToWatch: core_foundation.ArrayRef,
    sinceWhen: FSEventStreamEventId,
    latency: core_foundation.TimeInterval,
    flags: FSEventStreamCreateFlags,
) callconv(.C) FSEventStreamRef;
pub const fsEventStreamCreate = FSEventStreamCreate;

extern "CoreServices" fn FSEventStreamCreateRelativeToDevice(
    allocator: core_foundation.AllocatorRef,
    callback: FSEventStreamCallback,
    context: ?*FSEventStreamContext,
    deviceToWatch: objc.dev_t,
    pathsToWatchRelativeToDevice: core_foundation.ArrayRef,
    sinceWhen: FSEventStreamEventId,
    latency: core_foundation.TimeInterval,
    flags: FSEventStreamCreateFlags,
) callconv(.C) FSEventStreamRef;
pub const fsEventStreamCreateRelativeToDevice = FSEventStreamCreateRelativeToDevice;

extern "CoreServices" fn FSEventStreamGetLatestEventId(streamRef: ConstFSEventStreamRef) callconv(.C) FSEventStreamEventId;
pub const fsEventStreamGetLatestEventId = FSEventStreamGetLatestEventId;

extern "CoreServices" fn FSEventStreamGetDeviceBeingWatched(streamRef: ConstFSEventStreamRef) callconv(.C) objc.dev_t;
pub const fsEventStreamGetDeviceBeingWatched = FSEventStreamGetDeviceBeingWatched;

extern "CoreServices" fn FSEventStreamCopyPathsBeingWatched(streamRef: ConstFSEventStreamRef) callconv(.C) core_foundation.ArrayRef;
pub const fsEventStreamCopyPathsBeingWatched = FSEventStreamCopyPathsBeingWatched;

extern "CoreServices" fn FSEventsGetCurrentEventId() callconv(.C) FSEventStreamEventId;
pub const fsEventsGetCurrentEventId = FSEventsGetCurrentEventId;

extern "CoreServices" fn FSEventsCopyUUIDForDevice(dev: objc.dev_t) callconv(.C) core_foundation.UUIDRef;
pub const fsEventsCopyUUIDForDevice = FSEventsCopyUUIDForDevice;

extern "CoreServices" fn FSEventsGetLastEventIdForDeviceBeforeTime(dev: objc.dev_t, time: core_foundation.AbsoluteTime) callconv(.C) FSEventStreamEventId;
pub const fsEventsGetLastEventIdForDeviceBeforeTime = FSEventsGetLastEventIdForDeviceBeforeTime;

extern "CoreServices" fn FSEventsPurgeEventsForDeviceUpToEventId(dev: objc.dev_t, eventId: FSEventStreamEventId) callconv(.C) objc.Boolean;
pub const fsEventsPurgeEventsForDeviceUpToEventId = FSEventsPurgeEventsForDeviceUpToEventId;

extern "CoreServices" fn FSEventStreamRetain(streamRef: FSEventStreamRef) callconv(.C) void;
pub const fsEventStreamRetain = FSEventStreamRetain;

extern "CoreServices" fn FSEventStreamRelease(streamRef: FSEventStreamRef) callconv(.C) void;
pub const fsEventStreamRelease = FSEventStreamRelease;

extern "CoreServices" fn FSEventStreamScheduleWithRunLoop(streamRef: FSEventStreamRef, runLoop: core_foundation.RunLoopRef, runLoopMode: core_foundation.StringRef) callconv(.C) void;
pub const fsEventStreamScheduleWithRunLoop = FSEventStreamScheduleWithRunLoop;

extern "CoreServices" fn FSEventStreamUnscheduleFromRunLoop(streamRef: FSEventStreamRef, runLoop: core_foundation.RunLoopRef, runLoopMode: core_foundation.StringRef) callconv(.C) void;
pub const fsEventStreamUnscheduleFromRunLoop = FSEventStreamUnscheduleFromRunLoop;

extern "CoreServices" fn FSEventStreamSetDispatchQueue(streamRef: FSEventStreamRef, q: objc.dispatch_queue_t) callconv(.C) void;
pub const fsEventStreamSetDispatchQueue = FSEventStreamSetDispatchQueue;

extern "CoreServices" fn FSEventStreamInvalidate(streamRef: FSEventStreamRef) callconv(.C) void;
pub const fsEventStreamInvalidate = FSEventStreamInvalidate;

extern "CoreServices" fn FSEventStreamStart(streamRef: FSEventStreamRef) callconv(.C) objc.Boolean;
pub const fsEventStreamStart = FSEventStreamStart;

extern "CoreServices" fn FSEventStreamFlushAsync(streamRef: FSEventStreamRef) callconv(.C) FSEventStreamEventId;
pub const fsEventStreamFlushAsync = FSEventStreamFlushAsync;

extern "CoreServices" fn FSEventStreamFlushSync(streamRef: FSEventStreamRef) callconv(.C) void;
pub const fsEventStreamFlushSync = FSEventStreamFlushSync;

extern "CoreServices" fn FSEventStreamStop(streamRef: FSEventStreamRef) callconv(.C) void;
pub const fsEventStreamStop = FSEventStreamStop;

extern "CoreServices" fn FSEventStreamShow(streamRef: ConstFSEventStreamRef) callconv(.C) void;
pub const fsEventStreamShow = FSEventStreamShow;

extern "CoreServices" fn FSEventStreamCopyDescription(streamRef: ConstFSEventStreamRef) callconv(.C) core_foundation.StringRef;
pub const fsEventStreamCopyDescription = FSEventStreamCopyDescription;

extern "CoreServices" fn FSEventStreamSetExclusionPaths(streamRef: FSEventStreamRef, pathsToExclude: core_foundation.ArrayRef) callconv(.C) objc.Boolean;
pub const fsEventStreamSetExclusionPaths = FSEventStreamSetExclusionPaths;

pub const OpaqueLSSharedFileListRef = extern struct {};

pub const LSSharedFileListRef = ?*OpaqueLSSharedFileListRef;

pub const OpaqueLSSharedFileListItemRef = extern struct {};

pub const LSSharedFileListItemRef = ?*OpaqueLSSharedFileListItemRef;

pub const LSSharedFileListResolutionFlags = objc.UInt32;

pub const LSSharedFileListChangedProcPtr = ?*const fn (LSSharedFileListRef, ?*anyopaque) callconv(.C) void;

extern "CoreServices" fn LSSharedFileListGetTypeID() callconv(.C) core_foundation.TypeID;
pub const lsSharedFileListGetTypeID = LSSharedFileListGetTypeID;

extern "CoreServices" fn LSSharedFileListItemGetTypeID() callconv(.C) core_foundation.TypeID;
pub const lsSharedFileListItemGetTypeID = LSSharedFileListItemGetTypeID;

extern "CoreServices" fn LSSharedFileListCreate(inAllocator: core_foundation.AllocatorRef, inListType: core_foundation.StringRef, listOptions: core_foundation.TypeRef) callconv(.C) LSSharedFileListRef;
pub const lsSharedFileListCreate = LSSharedFileListCreate;

extern "CoreServices" fn LSSharedFileListSetAuthorization(inList: LSSharedFileListRef, inAuthorization: security.AuthorizationRef) callconv(.C) objc.OSStatus;
pub const lsSharedFileListSetAuthorization = LSSharedFileListSetAuthorization;

extern "CoreServices" fn LSSharedFileListAddObserver(
    inList: LSSharedFileListRef,
    inRunloop: core_foundation.RunLoopRef,
    inRunloopMode: core_foundation.StringRef,
    callback: LSSharedFileListChangedProcPtr,
    context: ?*anyopaque,
) callconv(.C) void;
pub const lsSharedFileListAddObserver = LSSharedFileListAddObserver;

extern "CoreServices" fn LSSharedFileListRemoveObserver(
    inList: LSSharedFileListRef,
    inRunloop: core_foundation.RunLoopRef,
    inRunloopMode: core_foundation.StringRef,
    callback: LSSharedFileListChangedProcPtr,
    context: ?*anyopaque,
) callconv(.C) void;
pub const lsSharedFileListRemoveObserver = LSSharedFileListRemoveObserver;

extern "CoreServices" fn LSSharedFileListGetSeedValue(inList: LSSharedFileListRef) callconv(.C) objc.UInt32;
pub const lsSharedFileListGetSeedValue = LSSharedFileListGetSeedValue;

extern "CoreServices" fn LSSharedFileListCopyProperty(inList: LSSharedFileListRef, inPropertyName: core_foundation.StringRef) callconv(.C) core_foundation.TypeRef;
pub const lsSharedFileListCopyProperty = LSSharedFileListCopyProperty;

extern "CoreServices" fn LSSharedFileListSetProperty(inList: LSSharedFileListRef, inPropertyName: core_foundation.StringRef, inPropertyData: core_foundation.TypeRef) callconv(.C) objc.OSStatus;
pub const lsSharedFileListSetProperty = LSSharedFileListSetProperty;

extern "CoreServices" fn LSSharedFileListCopySnapshot(inList: LSSharedFileListRef, outSnapshotSeed: ?*objc.UInt32) callconv(.C) core_foundation.ArrayRef;
pub const lsSharedFileListCopySnapshot = LSSharedFileListCopySnapshot;

extern "CoreServices" fn LSSharedFileListInsertItemURL(
    inList: LSSharedFileListRef,
    insertAfterThisItem: LSSharedFileListItemRef,
    inDisplayName: core_foundation.StringRef,
    inIconRef: IconRef,
    inURL: core_foundation.URLRef,
    inPropertiesToSet: core_foundation.DictionaryRef,
    inPropertiesToClear: core_foundation.ArrayRef,
) callconv(.C) LSSharedFileListItemRef;
pub const lsSharedFileListInsertItemURL = LSSharedFileListInsertItemURL;

extern "CoreServices" fn LSSharedFileListInsertItemFSRef(
    inList: LSSharedFileListRef,
    insertAfterThisItem: LSSharedFileListItemRef,
    inDisplayName: core_foundation.StringRef,
    inIconRef: IconRef,
    inFSRef: ?*FSRef,
    inPropertiesToSet: core_foundation.DictionaryRef,
    inPropertiesToClear: core_foundation.ArrayRef,
) callconv(.C) LSSharedFileListItemRef;
pub const lsSharedFileListInsertItemFSRef = LSSharedFileListInsertItemFSRef;

extern "CoreServices" fn LSSharedFileListItemMove(inList: LSSharedFileListRef, inItem: LSSharedFileListItemRef, inMoveAfterItem: LSSharedFileListItemRef) callconv(.C) objc.OSStatus;
pub const lsSharedFileListItemMove = LSSharedFileListItemMove;

extern "CoreServices" fn LSSharedFileListItemRemove(inList: LSSharedFileListRef, inItem: LSSharedFileListItemRef) callconv(.C) objc.OSStatus;
pub const lsSharedFileListItemRemove = LSSharedFileListItemRemove;

extern "CoreServices" fn LSSharedFileListRemoveAllItems(inList: LSSharedFileListRef) callconv(.C) objc.OSStatus;
pub const lsSharedFileListRemoveAllItems = LSSharedFileListRemoveAllItems;

extern "CoreServices" fn LSSharedFileListItemGetID(inItem: LSSharedFileListItemRef) callconv(.C) objc.UInt32;
pub const lsSharedFileListItemGetID = LSSharedFileListItemGetID;

extern "CoreServices" fn LSSharedFileListItemCopyIconRef(inItem: LSSharedFileListItemRef) callconv(.C) IconRef;
pub const lsSharedFileListItemCopyIconRef = LSSharedFileListItemCopyIconRef;

extern "CoreServices" fn LSSharedFileListItemCopyDisplayName(inItem: LSSharedFileListItemRef) callconv(.C) core_foundation.StringRef;
pub const lsSharedFileListItemCopyDisplayName = LSSharedFileListItemCopyDisplayName;

extern "CoreServices" fn LSSharedFileListItemResolve(
    inItem: LSSharedFileListItemRef,
    inFlags: LSSharedFileListResolutionFlags,
    outURL: ?*core_foundation.URLRef,
    outRef: ?*FSRef,
) callconv(.C) objc.OSStatus;
pub const lsSharedFileListItemResolve = LSSharedFileListItemResolve;

extern "CoreServices" fn LSSharedFileListItemCopyResolvedURL(inItem: LSSharedFileListItemRef, inFlags: LSSharedFileListResolutionFlags, outError: ?*core_foundation.ErrorRef) callconv(.C) core_foundation.URLRef;
pub const lsSharedFileListItemCopyResolvedURL = LSSharedFileListItemCopyResolvedURL;

extern "CoreServices" fn LSSharedFileListItemCopyProperty(inItem: LSSharedFileListItemRef, inPropertyName: core_foundation.StringRef) callconv(.C) core_foundation.TypeRef;
pub const lsSharedFileListItemCopyProperty = LSSharedFileListItemCopyProperty;

extern "CoreServices" fn LSSharedFileListItemSetProperty(inItem: LSSharedFileListItemRef, inPropertyName: core_foundation.StringRef, inPropertyData: core_foundation.TypeRef) callconv(.C) objc.OSStatus;
pub const lsSharedFileListItemSetProperty = LSSharedFileListItemSetProperty;
