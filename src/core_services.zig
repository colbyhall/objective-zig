// THIS FILE IS AUTOGENERATED. MODIFICATIONS WILL NOT BE MAINTAINED.

const std = @import("std");
const objc = @import("objc.zig"); // Objective-C Runtime in zig.
const core_foundation = @import("core_foundation.zig"); // Framework dependency CoreFoundation.
const disk_arbitration = @import("disk_arbitration.zig"); // Framework dependency DiskArbitration.
const security = @import("security.zig"); // Framework dependency Security.

pub const anon271 = u32;
pub const anon271_ClippingCreator: u32 = 1685217639;
pub const anon271_ClippingPictureType: u32 = 1668051056;
pub const anon271_ClippingTextType: u32 = 1668051060;
pub const anon271_ClippingSoundType: u32 = 1668051059;
pub const anon271_ClippingUnknownType: u32 = 1668051061;
pub const anon271_paramErr: u32 = -50;
pub const anon271_noHardwareErr: u32 = -200;
pub const anon271_notEnoughHardwareErr: u32 = -201;
pub const anon271_userCanceledErr: u32 = -128;
pub const anon271_qErr: u32 = -1;
pub const anon271_vTypErr: u32 = -2;
pub const anon271_corErr: u32 = -3;
pub const anon271_unimpErr: u32 = -4;
pub const anon271_SlpTypeErr: u32 = -5;
pub const anon271_seNoDB: u32 = -8;
pub const anon271_controlErr: u32 = -17;
pub const anon271_statusErr: u32 = -18;
pub const anon271_readErr: u32 = -19;
pub const anon271_writErr: u32 = -20;
pub const anon271_badUnitErr: u32 = -21;
pub const anon271_unitEmptyErr: u32 = -22;
pub const anon271_openErr: u32 = -23;
pub const anon271_closErr: u32 = -24;
pub const anon271_dRemovErr: u32 = -25;
pub const anon271_dInstErr: u32 = -26;

pub const anon371 = u32;
pub const anon371_InternetLocationCreator: u32 = 1685217639;
pub const anon371_InternetLocationHTTP: u32 = 1768712308;
pub const anon371_InternetLocationFTP: u32 = 1768711796;
pub const anon371_InternetLocationFile: u32 = 1768711785;
pub const anon371_InternetLocationMail: u32 = 1768713569;
pub const anon371_InternetLocationNNTP: u32 = 1768713847;
pub const anon371_InternetLocationAFP: u32 = 1768710502;
pub const anon371_InternetLocationAppleTalk: u32 = 1768710516;
pub const anon371_InternetLocationNSL: u32 = 1768713843;
pub const anon371_InternetLocationGeneric: u32 = 1768712037;
pub const anon371_CollectionDontWantTag: u32 = 0;
pub const anon371_CollectionDontWantId: u32 = 0;
pub const anon371_CollectionDontWantSize: u32 = 0;
pub const anon371_CollectionDontWantAttributes: u32 = 0;
pub const anon371_CollectionDontWantIndex: u32 = 0;
pub const anon371_CollectionDontWantData: u32 = 0;
pub const anon371_MacMemoryMaximumMemoryManagerBlockSize: u32 = 2147483632;
pub const anon371_IODefaultCache: u32 = 0;
pub const anon371_IOInhibitCache: u32 = 1;
pub const anon371_IOWriteThruCache: u32 = 2;
pub const anon371_IOCopybackCache: u32 = 3;
pub const anon371_IOWriteCombineCache: u32 = 4;
pub const anon371_IOCopybackInnerCache: u32 = 5;
pub const anon371_IOPostedWrite: u32 = 6;
pub const anon371_IORealTimeCache: u32 = 7;
pub const anon371_IOPostedReordered: u32 = 8;
pub const anon371_IOPostedCombinedReordered: u32 = 9;
pub const anon371_FSAliasInfoNone: u32 = 0;
pub const anon371_FSAliasInfoVolumeCreateDate: u32 = 1;
pub const anon371_FSAliasInfoTargetCreateDate: u32 = 2;
pub const anon371_FSAliasInfoFinderInfo: u32 = 4;
pub const anon371_FSAliasInfoIsDirectory: u32 = 8;
pub const anon371_FSAliasInfoIDs: u32 = 16;
pub const anon371_FSAliasInfoFSInfo: u32 = 32;
pub const anon371_FSAliasInfoVolumeFlags: u32 = 64;
pub const anon371_cAEList: u32 = 1818850164;
pub const anon371_cApplication: u32 = 1667330160;
pub const anon371_cArc: u32 = 1667330659;
pub const anon371_cBoolean: u32 = 1651470188;
pub const anon371_cCell: u32 = 1667458412;
pub const anon371_cChar: u32 = 1667784992;
pub const anon371_cColorTable: u32 = 1668051572;
pub const anon371_cColumn: u32 = 1667460972;
pub const anon371_cDocument: u32 = 1685021557;
pub const anon371_cDrawingArea: u32 = 1667527287;
pub const anon371_cEnumeration: u32 = 1701737837;
pub const anon371_cFile: u32 = 1718185061;
pub const anon371_cFixed: u32 = 1718188132;
pub const anon371_cFixedPoint: u32 = 1718644340;
pub const anon371_cFixedRectangle: u32 = 1718772596;
pub const anon371_cGraphicLine: u32 = 1735158126;
pub const anon371_cGraphicObject: u32 = 1667723106;
pub const anon371_cGraphicShape: u32 = 1667724136;
pub const anon371_cGraphicText: u32 = 1667724408;
pub const anon371_cGroupedGraphic: u32 = 1668311395;

pub const anon521 = i32;
pub const anon521_CustomIconResource: i32 = -16455;
pub const anon521_smRoman: i32 = 0;
pub const anon521_smJapanese: i32 = 1;
pub const anon521_smTradChinese: i32 = 2;
pub const anon521_smKorean: i32 = 3;
pub const anon521_smArabic: i32 = 4;
pub const anon521_smHebrew: i32 = 5;
pub const anon521_smGreek: i32 = 6;
pub const anon521_smCyrillic: i32 = 7;
pub const anon521_smRSymbol: i32 = 8;
pub const anon521_smDevanagari: i32 = 9;
pub const anon521_smGurmukhi: i32 = 10;
pub const anon521_smGujarati: i32 = 11;
pub const anon521_smOriya: i32 = 12;
pub const anon521_smBengali: i32 = 13;
pub const anon521_smTamil: i32 = 14;
pub const anon521_smTelugu: i32 = 15;
pub const anon521_smKannada: i32 = 16;
pub const anon521_smMalayalam: i32 = 17;
pub const anon521_smSinhalese: i32 = 18;
pub const anon521_smBurmese: i32 = 19;
pub const anon521_smKhmer: i32 = 20;
pub const anon521_smThai: i32 = 21;
pub const anon521_smLao: i32 = 22;
pub const anon521_smGeorgian: i32 = 23;
pub const anon521_smArmenian: i32 = 24;
pub const anon521_smSimpChinese: i32 = 25;
pub const anon521_smTibetan: i32 = 26;
pub const anon521_smMongolian: i32 = 27;
pub const anon521_smEthiopic: i32 = 28;
pub const anon521_smGeez: i32 = 28;
pub const anon521_smCentralEuroRoman: i32 = 29;
pub const anon521_smVietnamese: i32 = 30;
pub const anon521_smExtArabic: i32 = 31;
pub const anon521_smUninterp: i32 = 32;
pub const anon521_ARMMountVol: i32 = 1;
pub const anon521_ARMNoUI: i32 = 2;
pub const anon521_ARMMultVols: i32 = 8;
pub const anon521_ARMSearch: i32 = 256;
pub const anon521_ARMSearchMore: i32 = 512;
pub const anon521_ARMSearchRelFirst: i32 = 1024;
pub const anon521_ARMTryFileIDFirst: i32 = 2048;
pub const anon521_ReadyThreadState: i32 = 0;
pub const anon521_StoppedThreadState: i32 = 1;
pub const anon521_RunningThreadState: i32 = 2;
pub const anon521_AIFCVersion1: i32 = -1568648896;
pub const anon521_TECAvailableEncodingsResType: i32 = 1668703598;
pub const anon521_TECAvailableSniffersResType: i32 = 1668707174;
pub const anon521_TECSubTextEncodingsResType: i32 = 1668707170;
pub const anon521_TECConversionInfoResType: i32 = 1668704614;
pub const anon521_TECMailEncodingsResType: i32 = 1668705644;
pub const anon521_TECWebEncodingsResType: i32 = 1668708194;
pub const anon521_TECInternetNamesResType: i32 = 1668705645;

pub const anon611 = i32;
pub const anon611_CustomBadgeResourceType: i32 = 1650549863;
pub const anon611_CustomBadgeResourceID: i32 = -16455;
pub const anon611_CustomBadgeResourceVersion: i32 = 0;
pub const anon611_CollectionUser0Bit: i32 = 0;
pub const anon611_CollectionUser1Bit: i32 = 1;
pub const anon611_CollectionUser2Bit: i32 = 2;
pub const anon611_CollectionUser3Bit: i32 = 3;
pub const anon611_CollectionUser4Bit: i32 = 4;
pub const anon611_CollectionUser5Bit: i32 = 5;
pub const anon611_CollectionUser6Bit: i32 = 6;
pub const anon611_CollectionUser7Bit: i32 = 7;
pub const anon611_CollectionUser8Bit: i32 = 8;
pub const anon611_CollectionUser9Bit: i32 = 9;
pub const anon611_CollectionUser10Bit: i32 = 10;
pub const anon611_CollectionUser11Bit: i32 = 11;
pub const anon611_CollectionUser12Bit: i32 = 12;
pub const anon611_CollectionUser13Bit: i32 = 13;
pub const anon611_CollectionUser14Bit: i32 = 14;
pub const anon611_CollectionUser15Bit: i32 = 15;
pub const anon611_CollectionReserved0Bit: i32 = 16;
pub const anon611_CollectionReserved1Bit: i32 = 17;
pub const anon611_CollectionReserved2Bit: i32 = 18;
pub const anon611_CollectionReserved3Bit: i32 = 19;
pub const anon611_CollectionReserved4Bit: i32 = 20;
pub const anon611_CollectionReserved5Bit: i32 = 21;
pub const anon611_CollectionReserved6Bit: i32 = 22;
pub const anon611_CollectionReserved7Bit: i32 = 23;
pub const anon611_CollectionReserved8Bit: i32 = 24;
pub const anon611_CollectionReserved9Bit: i32 = 25;
pub const anon611_CollectionReserved10Bit: i32 = 26;
pub const anon611_CollectionReserved11Bit: i32 = 27;
pub const anon611_CollectionReserved12Bit: i32 = 28;
pub const anon611_CollectionReserved13Bit: i32 = 29;
pub const anon611_CollectionPersistenceBit: i32 = 30;
pub const anon611_CollectionLockBit: i32 = 31;
pub const anon611_OSNotificationMessageID: i32 = 53;
pub const anon611_OSAsyncCompleteMessageID: i32 = 57;
pub const anon611_MaxAsyncArgs: i32 = 16;
pub const anon611_typeUTF16ExternalRepresentation: i32 = 1970549046;
pub const anon611_typeUTF8Text: i32 = 1970562616;
pub const anon611_Large1BitMask: i32 = 1229147683;
pub const anon611_Large4BitData: i32 = 1768123444;
pub const anon611_Large8BitData: i32 = 1768123448;
pub const anon611_Large32BitData: i32 = 1768698674;
pub const anon611_Large8BitMask: i32 = 1815637355;
pub const anon611_Small1BitMask: i32 = 1768125219;
pub const anon611_Small4BitData: i32 = 1768125236;
pub const anon611_Small8BitData: i32 = 1768125240;
pub const anon611_Small32BitData: i32 = 1769157426;
pub const anon611_Small8BitMask: i32 = 1933077867;
pub const anon611_Mini1BitMask: i32 = 1768123683;
pub const anon611_Mini4BitData: i32 = 1768123700;
pub const anon611_Mini8BitData: i32 = 1768123704;

pub const CustomBadgeResource = extern struct {
    version: objc.SInt16,
    customBadgeResourceID: objc.SInt16,
    customBadgeType: objc.OSType,
    customBadgeCreator: objc.OSType,
    windowBadgeType: objc.OSType,
    windowBadgeCreator: objc.OSType,
    overrideType: objc.OSType,
    overrideCreator: objc.OSType,
};

pub const CustomBadgeResourcePtr = CustomBadgeResource;

pub const CustomBadgeResourceHandle = CustomBadgeResourcePtr;

pub const anon931 = u32;
pub const anon931_RoutingResourceType: u32 = 1919907188;
pub const anon931_RoutingResourceID: u32 = 0;
pub const anon931_smallDateBit: u32 = 31;
pub const anon931_togChar12HourBit: u32 = 30;
pub const anon931_togCharZCycleBit: u32 = 29;
pub const anon931_togDelta12HourBit: u32 = 28;
pub const anon931_genCdevRangeBit: u32 = 27;
pub const anon931_validDateFields: u32 = -1;
pub const anon931_maxDateField: u32 = 10;
pub const anon931_OverallAct: u32 = 0;
pub const anon931_UsrActivity: u32 = 1;
pub const anon931_NetActivity: u32 = 2;
pub const anon931_HDActivity: u32 = 3;
pub const anon931_IdleActivity: u32 = 4;

pub const RoutingResourceEntry = extern struct {
    creator: objc.OSType,
    fileType: objc.OSType,
    targetFolder: objc.OSType,
    destinationFolder: objc.OSType,
    reservedField: objc.OSType,
};

pub const RoutingResourcePtr = RoutingResourceEntry;

pub const RoutingResourceHandle = RoutingResourcePtr;

pub const anon1101 = u32;
pub const anon1101_ContainerFolderAliasType: u32 = 1717858928;
pub const anon1101_ContainerTrashAliasType: u32 = 1953657704;
pub const anon1101_ContainerHardDiskAliasType: u32 = 1751413611;
pub const anon1101_ContainerFloppyAliasType: u32 = 1718382713;
pub const anon1101_ContainerServerAliasType: u32 = 1936881266;
pub const anon1101_ApplicationAliasType: u32 = 1633972848;
pub const anon1101_ContainerAliasType: u32 = 1685221232;
pub const anon1101_DesktopPrinterAliasType: u32 = 1685352545;
pub const anon1101_ContainerCDROMAliasType: u32 = 1667523698;
pub const anon1101_ApplicationCPAliasType: u32 = 1633903728;
pub const anon1101_ApplicationDAAliasType: u32 = 1633969264;
pub const anon1101_PackageAliasType: u32 = 1718643553;
pub const anon1101_AppPackageAliasType: u32 = 1717661793;
pub const anon1101_MPNoID: u32 = 0;
pub const anon1101_PEFTag1: u32 = 1248819489;
pub const anon1101_PEFTag2: u32 = 1885693542;
pub const anon1101_PEFVersion: u32 = 1;
pub const anon1101_AEUnknownSource: u32 = 0;
pub const anon1101_AEDirectCall: u32 = 1;
pub const anon1101_AESameProcess: u32 = 2;
pub const anon1101_AELocalProcess: u32 = 3;
pub const anon1101_AERemoteProcess: u32 = 4;
pub const anon1101_AEIDoMinimum: u32 = 0;
pub const anon1101_AEIDoWhose: u32 = 1;
pub const anon1101_AEIDoMarking: u32 = 4;
pub const anon1101_AEPassSubDescs: u32 = 8;
pub const anon1101_AEResolveNestedLists: u32 = 16;
pub const anon1101_AEHandleSimpleRanges: u32 = 32;
pub const anon1101_AEUseRelativeIterators: u32 = 64;
pub const anon1101_CSSM_ERRCODE_OPERATION_AUTH_DENIED: u32 = 32;
pub const anon1101_CSSM_ERRCODE_OBJECT_USE_AUTH_DENIED: u32 = 33;
pub const anon1101_CSSM_ERRCODE_OBJECT_MANIP_AUTH_DENIED: u32 = 34;
pub const anon1101_CSSM_ERRCODE_OBJECT_ACL_NOT_SUPPORTED: u32 = 35;
pub const anon1101_CSSM_ERRCODE_OBJECT_ACL_REQUIRED: u32 = 36;
pub const anon1101_CSSM_ERRCODE_INVALID_ACCESS_CREDENTIALS: u32 = 37;
pub const anon1101_CSSM_ERRCODE_INVALID_ACL_BASE_CERTS: u32 = 38;
pub const anon1101_CSSM_ERRCODE_ACL_BASE_CERTS_NOT_SUPPORTED: u32 = 39;
pub const anon1101_CSSM_ERRCODE_INVALID_SAMPLE_VALUE: u32 = 40;
pub const anon1101_CSSM_ERRCODE_SAMPLE_VALUE_NOT_SUPPORTED: u32 = 41;
pub const anon1101_CSSM_ERRCODE_INVALID_ACL_SUBJECT_VALUE: u32 = 42;
pub const anon1101_CSSM_ERRCODE_ACL_SUBJECT_TYPE_NOT_SUPPORTED: u32 = 43;
pub const anon1101_CSSM_ERRCODE_INVALID_ACL_CHALLENGE_CALLBACK: u32 = 44;
pub const anon1101_CSSM_ERRCODE_ACL_CHALLENGE_CALLBACK_FAILED: u32 = 45;
pub const anon1101_CSSM_ERRCODE_INVALID_ACL_ENTRY_TAG: u32 = 46;
pub const anon1101_CSSM_ERRCODE_ACL_ENTRY_TAG_NOT_FOUND: u32 = 47;
pub const anon1101_CSSM_ERRCODE_INVALID_ACL_EDIT_MODE: u32 = 48;
pub const anon1101_CSSM_ERRCODE_ACL_CHANGE_FAILED: u32 = 49;
pub const anon1101_CSSM_ERRCODE_INVALID_NEW_ACL_ENTRY: u32 = 50;
pub const anon1101_CSSM_ERRCODE_INVALID_NEW_ACL_OWNER: u32 = 51;
pub const anon1101_CSSM_ERRCODE_ACL_DELETE_FAILED: u32 = 52;
pub const anon1101_CSSM_ERRCODE_ACL_REPLACE_FAILED: u32 = 53;
pub const anon1101_CSSM_ERRCODE_ACL_ADD_FAILED: u32 = 54;

pub const anon1271 = u32;
pub const anon1271_SystemFolderAliasType: u32 = 1717662585;
pub const anon1271_AppleMenuFolderAliasType: u32 = 1717657965;
pub const anon1271_StartupFolderAliasType: u32 = 1717662580;
pub const anon1271_PrintMonitorDocsFolderAliasType: u32 = 1717661806;
pub const anon1271_PreferencesFolderAliasType: u32 = 1717661798;
pub const anon1271_ControlPanelFolderAliasType: u32 = 1717658484;
pub const anon1271_ExtensionFolderAliasType: u32 = 1717659000;

pub const anon1381 = u32;
pub const anon1381_ExportedFolderAliasType: u32 = 1717658996;
pub const anon1381_DropFolderAliasType: u32 = 1717658738;
pub const anon1381_SharedFolderAliasType: u32 = 1717662568;
pub const anon1381_MountedFolderAliasType: u32 = 1717661038;
pub const anon1381_TextEncodingMacUnicode: u32 = 126;
pub const anon1381_shortDate: u32 = 0;
pub const anon1381_longDate: u32 = 1;
pub const anon1381_abbrevDate: u32 = 2;

pub const anon1491 = u32;
pub const anon1491_IsOnDesk: u32 = 1;
pub const anon1491_Color: u32 = 14;
pub const anon1491_IsShared: u32 = 64;
pub const anon1491_HasNoINITs: u32 = 128;
pub const anon1491_HasBeenInited: u32 = 256;
pub const anon1491_HasCustomIcon: u32 = 1024;
pub const anon1491_IsStationery: u32 = 2048;
pub const anon1491_NameLocked: u32 = 4096;
pub const anon1491_HasBundle: u32 = 8192;
pub const anon1491_IsInvisible: u32 = 16384;
pub const anon1491_IsAlias: u32 = 32768;
pub const anon1491_FragmentIsPrepared: u32 = 0;
pub const anon1491_FragmentNeedsPreparing: u32 = 2;
pub const anon1491_CSIdentityFlagNone: u32 = 0;
pub const anon1491_CSIdentityFlagHidden: u32 = 1;

pub const anon1761 = u32;
pub const anon1761_fOnDesk: u32 = 1;
pub const anon1761_fHasBundle: u32 = 8192;
pub const anon1761_fInvisible: u32 = 16384;
pub const anon1761_ClipboardIcon: u32 = 1129072976;
pub const anon1761_ClippingUnknownTypeIcon: u32 = 1668051061;
pub const anon1761_ClippingPictureTypeIcon: u32 = 1668051056;
pub const anon1761_ClippingTextTypeIcon: u32 = 1668051060;
pub const anon1761_ClippingSoundTypeIcon: u32 = 1668051059;
pub const anon1761_DesktopIcon: u32 = 1684370283;
pub const anon1761_FinderIcon: u32 = 1179534418;
pub const anon1761_ComputerIcon: u32 = 1919905652;
pub const anon1761_FontSuitcaseIcon: u32 = 1179011404;
pub const anon1761_FullTrashIcon: u32 = 1718907496;
pub const anon1761_GenericApplicationIcon: u32 = 1095782476;
pub const anon1761_GenericCDROMIcon: u32 = 1667523698;
pub const anon1761_GenericControlPanelIcon: u32 = 1095782467;
pub const anon1761_GenericControlStripModuleIcon: u32 = 1935959414;
pub const anon1761_GenericComponentIcon: u32 = 1953001063;
pub const anon1761_GenericDeskAccessoryIcon: u32 = 1095782468;
pub const anon1761_GenericDocumentIcon: u32 = 1685021557;
pub const anon1761_GenericEditionFileIcon: u32 = 1701082214;
pub const anon1761_GenericExtensionIcon: u32 = 1229867348;
pub const anon1761_GenericFileServerIcon: u32 = 1936881266;
pub const anon1761_GenericFontIcon: u32 = 1717987692;
pub const anon1761_GenericFontScalerIcon: u32 = 1935895666;
pub const anon1761_GenericFloppyIcon: u32 = 1718382713;
pub const anon1761_GenericHardDiskIcon: u32 = 1751413611;
pub const anon1761_GenericIDiskIcon: u32 = 1768190827;
pub const anon1761_GenericRemovableMediaIcon: u32 = 1919774582;
pub const anon1761_GenericMoverObjectIcon: u32 = 1836021362;
pub const anon1761_GenericPCCardIcon: u32 = 1885564259;
pub const anon1761_GenericPreferencesIcon: u32 = 1886545254;
pub const anon1761_GenericQueryDocumentIcon: u32 = 1902473849;
pub const anon1761_GenericRAMDiskIcon: u32 = 1918987620;
pub const anon1761_GenericSharedLibaryIcon: u32 = 1936223330;
pub const anon1761_GenericStationeryIcon: u32 = 1935961955;
pub const anon1761_GenericSuitcaseIcon: u32 = 1937074548;
pub const anon1761_GenericURLIcon: u32 = 1735750252;
pub const anon1761_GenericWORMIcon: u32 = 2003792493;
pub const anon1761_InternationalResourcesIcon: u32 = 1768319340;
pub const anon1761_KeyboardLayoutIcon: u32 = 1801873772;
pub const anon1761_SoundFileIcon: u32 = 1936091500;
pub const anon1761_SystemSuitcaseIcon: u32 = 2054388083;
pub const anon1761_TrashIcon: u32 = 1953657704;
pub const anon1761_TrueTypeFontIcon: u32 = 1952868716;
pub const anon1761_TrueTypeFlatFontIcon: u32 = 1936092788;
pub const anon1761_TrueTypeMultiFlatFontIcon: u32 = 1953784678;
pub const anon1761_UserIDiskIcon: u32 = 1969517419;
pub const anon1761_UnknownFSObjectIcon: u32 = 1970169459;
pub const anon1761_InternationResourcesIcon: u32 = 1768319340;

pub const anon1831 = i32;
pub const anon1831_fTrash: i32 = -3;
pub const anon1831_fDesktop: i32 = -2;
pub const anon1831_fDisk: i32 = 0;
pub const anon1831_eLenErr: i32 = -92;
pub const anon1831_eMultiErr: i32 = -91;
pub const anon1831_CSSM_ACL_KEYCHAIN_PROMPT_CURRENT_VERSION: i32 = 257;

pub const anon1981 = u32;
pub const anon1981_ExtendedFlagsAreInvalid: u32 = 32768;
pub const anon1981_ExtendedFlagHasCustomBadge: u32 = 256;
pub const anon1981_ExtendedFlagObjectIsBusy: u32 = 128;
pub const anon1981_ExtendedFlagHasRoutingInfo: u32 = 4;
pub const anon1981_SecOptionReserved: u32 = 255;
pub const anon1981_CertUsageShift: u32 = 8;
pub const anon1981_CertUsageSigningAdd: u32 = 256;
pub const anon1981_CertUsageSigningAskAndAdd: u32 = 512;
pub const anon1981_CertUsageVerifyAdd: u32 = 1024;
pub const anon1981_CertUsageVerifyAskAndAdd: u32 = 2048;
pub const anon1981_CertUsageEncryptAdd: u32 = 4096;
pub const anon1981_CertUsageEncryptAskAndAdd: u32 = 8192;
pub const anon1981_CertUsageDecryptAdd: u32 = 16384;
pub const anon1981_CertUsageDecryptAskAndAdd: u32 = 32768;
pub const anon1981_CertUsageKeyExchAdd: u32 = 65536;
pub const anon1981_CertUsageKeyExchAskAndAdd: u32 = 131072;
pub const anon1981_CertUsageRootAdd: u32 = 262144;
pub const anon1981_CertUsageRootAskAndAdd: u32 = 524288;
pub const anon1981_CertUsageSSLAdd: u32 = 1048576;
pub const anon1981_CertUsageSSLAskAndAdd: u32 = 2097152;
pub const anon1981_CertUsageAllAdd: u32 = 2147483392;

pub const anon2131 = u32;
pub const anon2131_FirstMagicBusyFiletype: u32 = 1652193568;
pub const anon2131_LastMagicBusyFiletype: u32 = 1652193599;

pub const anon2231 = u32;
pub const anon2231_MagicBusyCreationDate: u32 = 1329266096;
pub const anon2231_langWelsh: u32 = 128;
pub const anon2231_langBasque: u32 = 129;
pub const anon2231_langCatalan: u32 = 130;
pub const anon2231_langLatin: u32 = 131;
pub const anon2231_langQuechua: u32 = 132;
pub const anon2231_langGuarani: u32 = 133;
pub const anon2231_langAymara: u32 = 134;
pub const anon2231_langTatar: u32 = 135;
pub const anon2231_langUighur: u32 = 136;
pub const anon2231_langDzongkha: u32 = 137;
pub const anon2231_langJavaneseRom: u32 = 138;
pub const anon2231_langSundaneseRom: u32 = 139;
pub const anon2231_langGalician: u32 = 140;
pub const anon2231_langAfrikaans: u32 = 141;
pub const anon2231_IOMaxBusStall40usec: u32 = 40000;
pub const anon2231_IOMaxBusStall30usec: u32 = 30000;
pub const anon2231_IOMaxBusStall25usec: u32 = 25000;
pub const anon2231_IOMaxBusStall20usec: u32 = 20000;
pub const anon2231_IOMaxBusStall10usec: u32 = 10000;
pub const anon2231_IOMaxBusStall5usec: u32 = 5000;
pub const anon2231_IOMaxBusStallNone: u32 = 0;

pub const FileInfo = extern struct {
    fileType: objc.OSType,
    fileCreator: objc.OSType,
    finderFlags: objc.UInt16,
    location: objc.Point,
    reservedField: objc.UInt16,
};

pub const FolderInfo = extern struct {
    windowBounds: objc.Rect,
    finderFlags: objc.UInt16,
    location: objc.Point,
    reservedField: objc.UInt16,
};

pub const ExtendedFileInfo = extern struct {
    reserved1: [4]objc.SInt16,
    extendedFinderFlags: objc.UInt16,
    reserved2: objc.SInt16,
    putAwayFolderID: objc.SInt32,
};

pub const ExtendedFolderInfo = extern struct {
    scrollPosition: objc.Point,
    reserved1: objc.SInt32,
    extendedFinderFlags: objc.UInt16,
    reserved2: objc.SInt16,
    putAwayFolderID: objc.SInt32,
};

pub const FInfo = extern struct {
    fdType: objc.OSType,
    fdCreator: objc.OSType,
    fdFlags: objc.UInt16,
    fdLocation: objc.Point,
    fdFldr: objc.SInt16,
};

pub const FXInfo = extern struct {
    fdIconID: objc.SInt16,
    fdReserved: [3]objc.SInt16,
    fdScript: objc.SInt8,
    fdXFlags: objc.SInt8,
    fdComment: objc.SInt16,
    fdPutAway: objc.SInt32,
};

pub const DInfo = extern struct {
    frRect: objc.Rect,
    frFlags: objc.UInt16,
    frLocation: objc.Point,
    frView: objc.SInt16,
};

pub const DXInfo = extern struct {
    frScroll: objc.Point,
    frOpenChain: objc.SInt32,
    frScript: objc.SInt8,
    frXFlags: objc.SInt8,
    frComment: objc.SInt16,
    frPutAway: objc.SInt32,
};

pub extern "CoreServices" fn FixRatio(numer: i16, denom: i16) callconv(.C) objc.Fixed;

pub extern "CoreServices" fn FixMul(a: objc.Fixed, b: objc.Fixed) callconv(.C) objc.Fixed;

pub extern "CoreServices" fn FixRound(x: objc.Fixed) callconv(.C) i16;

pub extern "CoreServices" fn Fix2Frac(x: objc.Fixed) callconv(.C) objc.Fract;

pub extern "CoreServices" fn Fix2Long(x: objc.Fixed) callconv(.C) objc.SInt32;

pub extern "CoreServices" fn Long2Fix(x: objc.SInt32) callconv(.C) objc.Fixed;

pub extern "CoreServices" fn Frac2Fix(x: objc.Fract) callconv(.C) objc.Fixed;

pub extern "CoreServices" fn FracMul(x: objc.Fract, y: objc.Fract) callconv(.C) objc.Fract;

pub extern "CoreServices" fn FixDiv(x: objc.Fixed, y: objc.Fixed) callconv(.C) objc.Fixed;

pub extern "CoreServices" fn FracDiv(x: objc.Fract, y: objc.Fract) callconv(.C) objc.Fract;

pub extern "CoreServices" fn FracSqrt(x: objc.Fract) callconv(.C) objc.Fract;

pub extern "CoreServices" fn FracSin(x: objc.Fixed) callconv(.C) objc.Fract;

pub extern "CoreServices" fn FracCos(x: objc.Fixed) callconv(.C) objc.Fract;

pub extern "CoreServices" fn FixATan2(x: objc.SInt32, y: objc.SInt32) callconv(.C) objc.Fixed;

pub extern "CoreServices" fn Frac2X(x: objc.Fract) callconv(.C) f64;

pub extern "CoreServices" fn Fix2X(x: objc.Fixed) callconv(.C) f64;

pub extern "CoreServices" fn X2Fix(x: f64) callconv(.C) objc.Fixed;

pub extern "CoreServices" fn X2Frac(x: f64) callconv(.C) objc.Fract;

pub extern "CoreServices" fn WideCompare(target: ?*objc.wide, source: ?*objc.wide) callconv(.C) i16;

pub extern "CoreServices" fn WideAdd(target: ?*objc.wide, source: ?*objc.wide) callconv(.C) ?*objc.wide;

pub extern "CoreServices" fn WideSubtract(target: ?*objc.wide, source: ?*objc.wide) callconv(.C) ?*objc.wide;

pub extern "CoreServices" fn WideNegate(target: ?*objc.wide) callconv(.C) ?*objc.wide;

pub extern "CoreServices" fn WideShift(target: ?*objc.wide, shift: objc.SInt32) callconv(.C) ?*objc.wide;

pub extern "CoreServices" fn WideSquareRoot(source: ?*objc.wide) callconv(.C) objc.UInt32;

pub extern "CoreServices" fn WideMultiply(multiplicand: objc.SInt32, multiplier: objc.SInt32, target: ?*objc.wide) callconv(.C) ?*objc.wide;

pub extern "CoreServices" fn WideDivide(dividend: ?*objc.wide, divisor: objc.SInt32, remainder: ?*objc.SInt32) callconv(.C) objc.SInt32;

pub extern "CoreServices" fn WideWideDivide(dividend: ?*objc.wide, divisor: objc.SInt32, remainder: ?*objc.SInt32) callconv(.C) ?*objc.wide;

pub extern "CoreServices" fn WideBitShift(target: ?*objc.wide, shift: objc.SInt32) callconv(.C) ?*objc.wide;

pub extern "CoreServices" fn UnsignedFixedMulDiv(value: objc.UnsignedFixed, multiplier: objc.UnsignedFixed, divisor: objc.UnsignedFixed) callconv(.C) objc.UnsignedFixed;

pub const anon311 = u32;
pub const anon311_itlcShowIcon: u32 = 7;
pub const anon311_itlcDualCaret: u32 = 6;
pub const anon311_itlcSysDirection: u32 = 15;

pub const anon391 = u32;
pub const anon391_itlcDisableKeyScriptSync: u32 = 3;
pub const anon391_AEUTHasReturningParam: u32 = 31;
pub const anon391_AEUTOptional: u32 = 15;
pub const anon391_AEUTlistOfItems: u32 = 14;
pub const anon391_AEUTEnumerated: u32 = 13;
pub const anon391_AEUTReadWrite: u32 = 12;
pub const anon391_AEUTChangesState: u32 = 12;
pub const anon391_AEUTTightBindingFunction: u32 = 12;
pub const anon391_AEUTEnumsAreTypes: u32 = 11;
pub const anon391_AEUTEnumListIsExclusive: u32 = 10;
pub const anon391_AEUTReplyIsReference: u32 = 9;
pub const anon391_AEUTDirectParamIsReference: u32 = 9;
pub const anon391_AEUTParamIsReference: u32 = 9;
pub const anon391_AEUTPropertyIsReference: u32 = 9;
pub const anon391_AEUTNotDirectParamIsTarget: u32 = 8;
pub const anon391_AEUTParamIsTarget: u32 = 8;
pub const anon391_AEUTApostrophe: u32 = 3;
pub const anon391_AEUTFeminine: u32 = 2;
pub const anon391_AEUTMasculine: u32 = 1;
pub const anon391_AEUTPlural: u32 = 0;

pub const anon441 = u32;
pub const anon441_itlcDisableKeyScriptSyncMask: u32 = 8;
pub const anon441_resSysRefBit: u32 = 7;
pub const anon441_resSysHeapBit: u32 = 6;
pub const anon441_resPurgeableBit: u32 = 5;
pub const anon441_resLockedBit: u32 = 4;
pub const anon441_resProtectedBit: u32 = 3;
pub const anon441_resPreloadBit: u32 = 2;
pub const anon441_resChangedBit: u32 = 1;

pub const anon501 = u32;
pub const anon501_tokLeftQuote: u32 = 1;
pub const anon501_tokRightQuote: u32 = 2;
pub const anon501_tokLeadPlacer: u32 = 3;
pub const anon501_tokLeader: u32 = 4;
pub const anon501_tokNonLeader: u32 = 5;
pub const anon501_tokZeroLead: u32 = 6;
pub const anon501_tokPercent: u32 = 7;
pub const anon501_tokPlusSign: u32 = 8;
pub const anon501_tokMinusSign: u32 = 9;
pub const anon501_tokThousands: u32 = 10;
pub const anon501_tokReserved: u32 = 11;
pub const anon501_tokSeparator: u32 = 12;
pub const anon501_tokEscape: u32 = 13;
pub const anon501_tokDecPoint: u32 = 14;
pub const anon501_tokEPlus: u32 = 15;
pub const anon501_tokEMinus: u32 = 16;
pub const anon501_tokMaxSymbols: u32 = 31;
pub const anon501_curNumberPartsVersion: u32 = 1;
pub const anon501_abortErr: u32 = -27;
pub const anon501_iIOAbortErr: u32 = -27;
pub const anon501_notOpenErr: u32 = -28;
pub const anon501_unitTblFullErr: u32 = -29;
pub const anon501_dceExtErr: u32 = -30;
pub const anon501_slotNumErr: u32 = -360;
pub const anon501_gcrOnMFMErr: u32 = -400;
pub const anon501_dirFulErr: u32 = -33;
pub const anon501_dskFulErr: u32 = -34;
pub const anon501_nsvErr: u32 = -35;
pub const anon501_ioErr: u32 = -36;
pub const anon501_bdNamErr: u32 = -37;
pub const anon501_fnOpnErr: u32 = -38;
pub const anon501_eofErr: u32 = -39;
pub const anon501_posErr: u32 = -40;
pub const anon501_mFulErr: u32 = -41;
pub const anon501_tmfoErr: u32 = -42;
pub const anon501_fnfErr: u32 = -43;
pub const anon501_wPrErr: u32 = -44;
pub const anon501_fLckdErr: u32 = -45;
pub const anon501_typeStyledUnicodeText: u32 = 1937077368;
pub const anon501_typeEncodedString: u32 = 1701733235;
pub const anon501_typeUnicodeText: u32 = 1970567284;
pub const anon501_typeCString: u32 = 1668510834;
pub const anon501_typePString: u32 = 1886614642;
pub const anon501_errWSInternalError: u32 = -65793;
pub const anon501_errWSTransportError: u32 = -65794;
pub const anon501_errWSParseError: u32 = -65795;
pub const anon501_errWSTimeoutError: u32 = -65796;
pub const anon501_GenericDocumentIconResource: u32 = -4000;
pub const anon501_GenericStationeryIconResource: u32 = -3985;
pub const anon501_GenericEditionFileIconResource: u32 = -3989;
pub const anon501_GenericApplicationIconResource: u32 = -3996;
pub const anon501_GenericDeskAccessoryIconResource: u32 = -3991;
pub const anon501_GenericFolderIconResource: u32 = -3999;
pub const anon501_PrivateFolderIconResource: u32 = -3994;
pub const anon501_FloppyIconResource: u32 = -3998;
pub const anon501_TrashIconResource: u32 = -3993;
pub const anon501_GenericRAMDiskIconResource: u32 = -3988;
pub const anon501_GenericCDROMIconResource: u32 = -3987;

pub const anon711 = u32;
pub const anon711_currSymLead: u32 = 16;
pub const anon711_currNegSym: u32 = 32;
pub const anon711_currTrailingZ: u32 = 64;
pub const anon711_currLeadingZ: u32 = 128;
pub const anon711_32BitHeap: u32 = 1;
pub const anon711_NewStyleHeap: u32 = 2;
pub const anon711_NewDebugHeap: u32 = 4;
pub const anon711_NoThreadID: u32 = 0;
pub const anon711_CurrentThreadID: u32 = 1;
pub const anon711_ApplicationThreadID: u32 = 2;
pub const anon711_verUnspecified: u32 = 32767;
pub const anon711_TECResourceID: u32 = 128;
pub const anon711_CoreEventClass: u32 = 1634039412;

pub const anon781 = u32;
pub const anon781_mdy: u32 = 0;
pub const anon781_dmy: u32 = 1;
pub const anon781_ymd: u32 = 2;
pub const anon781_myd: u32 = 3;
pub const anon781_dym: u32 = 4;
pub const anon781_ydm: u32 = 5;
pub const anon781_toggleUndefined: u32 = 0;
pub const anon781_toggleOK: u32 = 1;
pub const anon781_toggleBadField: u32 = 2;
pub const anon781_toggleBadDelta: u32 = 3;
pub const anon781_toggleBadChar: u32 = 4;
pub const anon781_toggleUnknown: u32 = 5;
pub const anon781_toggleBadNum: u32 = 6;
pub const anon781_toggleOutOfRange: u32 = 7;
pub const anon781_toggleErr3: u32 = 7;
pub const anon781_toggleErr4: u32 = 8;
pub const anon781_toggleErr5: u32 = 9;
pub const anon781_CSSM_FALSE: u32 = 0;
pub const anon781_CSSM_TRUE: u32 = 1;
pub const anon781_large1BitMask: u32 = 1229147683;
pub const anon781_large4BitData: u32 = 1768123444;
pub const anon781_large8BitData: u32 = 1768123448;
pub const anon781_small1BitMask: u32 = 1768125219;
pub const anon781_small4BitData: u32 = 1768125236;
pub const anon781_small8BitData: u32 = 1768125240;
pub const anon781_mini1BitMask: u32 = 1768123683;
pub const anon781_mini4BitData: u32 = 1768123700;
pub const anon781_mini8BitData: u32 = 1768123704;

pub const DateOrders = objc.SInt8;

pub const anon881 = u32;
pub const anon881_timeCycle24: u32 = 0;
pub const anon881_timeCycleZero: u32 = 1;
pub const anon881_timeCycle12: u32 = 255;
pub const anon881_zeroCycle: u32 = 1;
pub const anon881_longDay: u32 = 0;
pub const anon881_longWeek: u32 = 1;
pub const anon881_longMonth: u32 = 2;
pub const anon881_longYear: u32 = 3;
pub const anon881_supDay: u32 = 1;
pub const anon881_supWeek: u32 = 2;
pub const anon881_supMonth: u32 = 4;
pub const anon881_supYear: u32 = 8;
pub const anon881_dayLdingZ: u32 = 32;
pub const anon881_mntLdingZ: u32 = 64;
pub const anon881_century: u32 = 128;
pub const anon881_secLeadingZ: u32 = 32;
pub const anon881_minLeadingZ: u32 = 64;
pub const anon881_hrLeadingZ: u32 = 128;
pub const anon881_OSAsyncRef64Count: u32 = 8;
pub const anon881_OSAsyncRef64Size: u32 = 64;
pub const anon881_eyAERestoreAppState: u32 = 1920169071;

pub const OffPair = extern struct {
    offFirst: i16,
    offSecond: i16,
};

pub const OffsetTable = OffPair;

pub const Intl0Rec = extern struct {
    decimalPt: i8,
    thousSep: i8,
    listSep: i8,
    currSym1: i8,
    currSym2: i8,
    currSym3: i8,
    currFmt: objc.UInt8,
    dateOrder: objc.UInt8,
    shrtDateFmt: objc.UInt8,
    dateSep: i8,
    timeCycle: objc.UInt8,
    timeFmt: objc.UInt8,
    mornStr: [4]i8,
    eveStr: [4]i8,
    timeSep: i8,
    time1Suff: i8,
    time2Suff: i8,
    time3Suff: i8,
    time4Suff: i8,
    time5Suff: i8,
    time6Suff: i8,
    time7Suff: i8,
    time8Suff: i8,
    metricSys: objc.UInt8,
    intl0Vers: i16,
};

pub const Intl0Ptr = Intl0Rec;

pub const Intl0Hndl = Intl0Ptr;

pub const Intl1Rec = extern struct {
    days: [7]objc.Str15,
    months: [12]objc.Str15,
    suppressDay: objc.UInt8,
    lngDateFmt: objc.UInt8,
    dayLeading0: objc.UInt8,
    abbrLen: objc.UInt8,
    st0: [4]i8,
    st1: [4]i8,
    st2: [4]i8,
    st3: [4]i8,
    st4: [4]i8,
    intl1Vers: i16,
    localRtn: [1]i16,
};

pub const Intl1Ptr = Intl1Rec;

pub const Intl1Hndl = Intl1Ptr;

pub const Itl1ExtRec = extern struct {
    base: Intl1Rec,
    version: i16,
    format: i16,
    calendarCode: i16,
    extraDaysTableOffset: objc.SInt32,
    extraDaysTableLength: objc.SInt32,
    extraMonthsTableOffset: objc.SInt32,
    extraMonthsTableLength: objc.SInt32,
    abbrevDaysTableOffset: objc.SInt32,
    abbrevDaysTableLength: objc.SInt32,
    abbrevMonthsTableOffset: objc.SInt32,
    abbrevMonthsTableLength: objc.SInt32,
    extraSepsTableOffset: objc.SInt32,
    extraSepsTableLength: objc.SInt32,
    tables: [1]i16,
};

pub const UntokenTable = extern struct {
    len: i16,
    lastToken: i16,
    index: [256]i16,
};

pub const UntokenTablePtr = UntokenTable;

pub const UntokenTableHandle = UntokenTablePtr;

pub const WideChar = extern union {
    pub const anon2083 = extern struct {
        lo: i8,
        hi: i8,
    };

    a: WideChar.anon2083,
    b: i16,
};

pub const WideCharArr = extern struct {
    size: i16,
    data: [10]WideChar,
};

pub const NumberParts = extern struct {
    version: i16,
    data: [31]WideChar,
    pePlus: WideCharArr,
    peMinus: WideCharArr,
    peMinusPlus: WideCharArr,
    altNumTable: WideCharArr,
    reserved: [20]i8,
};

pub const NumberPartsPtr = NumberParts;

pub const Itl4Rec = extern struct {
    flags: i16,
    resourceType: objc.SInt32,
    resourceNum: i16,
    version: i16,
    resHeader1: objc.SInt32,
    resHeader2: objc.SInt32,
    numTables: i16,
    mapOffset: objc.SInt32,
    strOffset: objc.SInt32,
    fetchOffset: objc.SInt32,
    unTokenOffset: objc.SInt32,
    defPartsOffset: objc.SInt32,
    resOffset6: objc.SInt32,
    resOffset7: objc.SInt32,
    resOffset8: objc.SInt32,
};

pub const Itl4Ptr = Itl4Rec;

pub const Itl4Handle = Itl4Ptr;

pub const NItl4Rec = extern struct {
    flags: i16,
    resourceType: objc.SInt32,
    resourceNum: i16,
    version: i16,
    format: i16,
    resHeader: i16,
    resHeader2: objc.SInt32,
    numTables: i16,
    mapOffset: objc.SInt32,
    strOffset: objc.SInt32,
    fetchOffset: objc.SInt32,
    unTokenOffset: objc.SInt32,
    defPartsOffset: objc.SInt32,
    whtSpListOffset: objc.SInt32,
    resOffset7: objc.SInt32,
    resOffset8: objc.SInt32,
    resLength1: i16,
    resLength2: i16,
    resLength3: i16,
    unTokenLength: i16,
    defPartsLength: i16,
    whtSpListLength: i16,
    resLength7: i16,
    resLength8: i16,
};

pub const NItl4Ptr = NItl4Rec;

pub const NItl4Handle = NItl4Ptr;

pub const TableDirectoryRecord = extern struct {
    tableSignature: objc.OSType,
    reserved: objc.UInt32,
    tableStartOffset: objc.UInt32,
    tableSize: objc.UInt32,
};

pub const Itl5Record = extern struct {
    versionNumber: objc.Fixed,
    numberOfTables: u16,
    reserved: [3]u16,
    tableDirectory: [1]TableDirectoryRecord,
};

pub const RuleBasedTrslRecord = extern struct {
    sourceType: i16,
    targetType: i16,
    formatNumber: i16,
    propertyFlag: i16,
    numberOfRules: i16,
};

pub const ItlcRecord = extern struct {
    itlcSystem: i16,
    itlcReserved: i16,
    itlcFontForce: objc.SInt8,
    itlcIntlForce: objc.SInt8,
    itlcOldKybd: objc.SInt8,
    itlcFlags: objc.SInt8,
    itlcIconOffset: i16,
    itlcIconSide: objc.SInt8,
    itlcIconRsvd: objc.SInt8,
    itlcRegionCode: i16,
    itlcSysFlags: i16,
    itlcReserved4: [32]objc.SInt8,
};

pub const ItlbRecord = extern struct {
    itlbNumber: i16,
    itlbDate: i16,
    itlbSort: i16,
    itlbFlags: i16,
    itlbToken: i16,
    itlbEncoding: i16,
    itlbLang: i16,
    itlbNumRep: objc.SInt8,
    itlbDateRep: objc.SInt8,
    itlbKeys: i16,
    itlbIcon: i16,
};

pub const ItlbExtRecord = extern struct {
    base: ItlbRecord,
    itlbLocalSize: objc.SInt32,
    itlbMonoFond: i16,
    itlbMonoSize: i16,
    itlbPrefFond: i16,
    itlbPrefSize: i16,
    itlbSmallFond: i16,
    itlbSmallSize: i16,
    itlbSysFond: i16,
    itlbSysSize: i16,
    itlbAppFond: i16,
    itlbAppSize: i16,
    itlbHelpFond: i16,
    itlbHelpSize: i16,
    itlbValidStyles: objc.Style,
    itlbAliasStyle: objc.Style,
};

pub const anon341 = i32;
pub const anon341_smSystemScript: i32 = -1;
pub const anon341_smCurrentScript: i32 = -2;
pub const anon341_smAllScripts: i32 = -3;
pub const anon341_IconServices16PixelDataARGB: i32 = 1768108084;
pub const anon341_IconServices32PixelDataARGB: i32 = 1768108085;
pub const anon341_IconServices48PixelDataARGB: i32 = 1768108086;
pub const anon341_IconServices128PixelDataARGB: i32 = 1768108087;

pub const anon901 = u32;
pub const anon901_smUnicodeScript: u32 = 126;
pub const anon901_OpaqueAnyID: u32 = 0;
pub const anon901_OpaqueProcessID: u32 = 1;
pub const anon901_OpaqueTaskID: u32 = 2;
pub const anon901_OpaqueTimerID: u32 = 3;
pub const anon901_OpaqueQueueID: u32 = 4;
pub const anon901_OpaqueSemaphoreID: u32 = 5;
pub const anon901_OpaqueCriticalRegionID: u32 = 6;
pub const anon901_OpaqueCpuID: u32 = 7;
pub const anon901_OpaqueAddressSpaceID: u32 = 8;
pub const anon901_OpaqueEventID: u32 = 9;
pub const anon901_OpaqueCoherenceID: u32 = 10;
pub const anon901_OpaqueAreaID: u32 = 11;
pub const anon901_OpaqueNotificationID: u32 = 12;
pub const anon901_OpaqueConsoleID: u32 = 13;

pub const anon951 = u32;
pub const anon951_smChinese: u32 = 2;
pub const anon951_smRussian: u32 = 7;
pub const anon951_smLaotian: u32 = 22;
pub const anon951_smAmharic: u32 = 28;
pub const anon951_smSlavic: u32 = 29;
pub const anon951_smEastEurRoman: u32 = 29;
pub const anon951_smSindhi: u32 = 31;
pub const anon951_smKlingon: u32 = 32;

pub const anon1121 = u32;
pub const anon1121_langEnglish: u32 = 0;
pub const anon1121_langFrench: u32 = 1;
pub const anon1121_langGerman: u32 = 2;
pub const anon1121_langItalian: u32 = 3;
pub const anon1121_langDutch: u32 = 4;
pub const anon1121_langSwedish: u32 = 5;
pub const anon1121_langSpanish: u32 = 6;
pub const anon1121_langDanish: u32 = 7;
pub const anon1121_langPortuguese: u32 = 8;
pub const anon1121_langNorwegian: u32 = 9;
pub const anon1121_langHebrew: u32 = 10;
pub const anon1121_langJapanese: u32 = 11;
pub const anon1121_langArabic: u32 = 12;
pub const anon1121_langFinnish: u32 = 13;
pub const anon1121_langGreek: u32 = 14;
pub const anon1121_langIcelandic: u32 = 15;
pub const anon1121_langMaltese: u32 = 16;
pub const anon1121_langTurkish: u32 = 17;
pub const anon1121_langCroatian: u32 = 18;
pub const anon1121_langTradChinese: u32 = 19;
pub const anon1121_langUrdu: u32 = 20;
pub const anon1121_langHindi: u32 = 21;
pub const anon1121_langThai: u32 = 22;
pub const anon1121_langKorean: u32 = 23;

pub const anon1391 = u32;
pub const anon1391_langLithuanian: u32 = 24;
pub const anon1391_langPolish: u32 = 25;
pub const anon1391_langHungarian: u32 = 26;
pub const anon1391_langEstonian: u32 = 27;
pub const anon1391_langLatvian: u32 = 28;
pub const anon1391_langSami: u32 = 29;
pub const anon1391_langFaroese: u32 = 30;
pub const anon1391_langFarsi: u32 = 31;
pub const anon1391_langPersian: u32 = 31;
pub const anon1391_langRussian: u32 = 32;
pub const anon1391_langSimpChinese: u32 = 33;
pub const anon1391_langFlemish: u32 = 34;
pub const anon1391_langIrishGaelic: u32 = 35;
pub const anon1391_langAlbanian: u32 = 36;
pub const anon1391_langRomanian: u32 = 37;
pub const anon1391_langCzech: u32 = 38;
pub const anon1391_langSlovak: u32 = 39;
pub const anon1391_langSlovenian: u32 = 40;
pub const anon1391_langYiddish: u32 = 41;
pub const anon1391_langSerbian: u32 = 42;
pub const anon1391_langMacedonian: u32 = 43;
pub const anon1391_langBulgarian: u32 = 44;
pub const anon1391_langUkrainian: u32 = 45;
pub const anon1391_langByelorussian: u32 = 46;
pub const anon1391_langBelorussian: u32 = 46;

pub const anon1671 = u32;
pub const anon1671_langUzbek: u32 = 47;
pub const anon1671_langKazakh: u32 = 48;
pub const anon1671_langAzerbaijani: u32 = 49;
pub const anon1671_langAzerbaijanAr: u32 = 50;
pub const anon1671_langArmenian: u32 = 51;
pub const anon1671_langGeorgian: u32 = 52;
pub const anon1671_langMoldavian: u32 = 53;
pub const anon1671_langKirghiz: u32 = 54;
pub const anon1671_langTajiki: u32 = 55;
pub const anon1671_langTurkmen: u32 = 56;
pub const anon1671_langMongolian: u32 = 57;
pub const anon1671_langMongolianCyr: u32 = 58;
pub const anon1671_langPashto: u32 = 59;
pub const anon1671_langKurdish: u32 = 60;
pub const anon1671_langKashmiri: u32 = 61;
pub const anon1671_langSindhi: u32 = 62;
pub const anon1671_langTibetan: u32 = 63;
pub const anon1671_langNepali: u32 = 64;
pub const anon1671_langSanskrit: u32 = 65;
pub const anon1671_langMarathi: u32 = 66;
pub const anon1671_langBengali: u32 = 67;
pub const anon1671_langAssamese: u32 = 68;
pub const anon1671_langGujarati: u32 = 69;
pub const anon1671_langPunjabi: u32 = 70;
pub const anon1671_UnicodeFallbackSequencingMask: u32 = 3;
pub const anon1671_UnicodeFallbackInterruptSafeMask: u32 = 4;

pub const anon1941 = u32;
pub const anon1941_langOriya: u32 = 71;
pub const anon1941_langMalayalam: u32 = 72;
pub const anon1941_langKannada: u32 = 73;
pub const anon1941_langTamil: u32 = 74;
pub const anon1941_langTelugu: u32 = 75;
pub const anon1941_langSinhalese: u32 = 76;
pub const anon1941_langBurmese: u32 = 77;
pub const anon1941_langKhmer: u32 = 78;
pub const anon1941_langLao: u32 = 79;
pub const anon1941_langVietnamese: u32 = 80;
pub const anon1941_langIndonesian: u32 = 81;
pub const anon1941_langTagalog: u32 = 82;
pub const anon1941_langMalayRoman: u32 = 83;
pub const anon1941_langMalayArabic: u32 = 84;
pub const anon1941_langAmharic: u32 = 85;
pub const anon1941_langTigrinya: u32 = 86;
pub const anon1941_langOromo: u32 = 87;
pub const anon1941_langSomali: u32 = 88;
pub const anon1941_langSwahili: u32 = 89;
pub const anon1941_langKinyarwanda: u32 = 90;
pub const anon1941_langRuanda: u32 = 90;
pub const anon1941_langRundi: u32 = 91;
pub const anon1941_langNyanja: u32 = 92;
pub const anon1941_langChewa: u32 = 92;
pub const anon1941_langMalagasy: u32 = 93;
pub const anon1941_langEsperanto: u32 = 94;

pub const anon2401 = u32;
pub const anon2401_langBreton: u32 = 142;
pub const anon2401_langInuktitut: u32 = 143;
pub const anon2401_langScottishGaelic: u32 = 144;
pub const anon2401_langManxGaelic: u32 = 145;
pub const anon2401_langIrishGaelicScript: u32 = 146;
pub const anon2401_langTongan: u32 = 147;
pub const anon2401_langGreekAncient: u32 = 148;
pub const anon2401_langGreenlandic: u32 = 149;
pub const anon2401_langAzerbaijanRoman: u32 = 150;
pub const anon2401_langNynorsk: u32 = 151;
pub const anon2401_GenericFolderIcon: u32 = 1718379634;
pub const anon2401_DropFolderIcon: u32 = 1684172664;
pub const anon2401_MountedFolderIcon: u32 = 1835955300;
pub const anon2401_OpenFolderIcon: u32 = 1868983396;
pub const anon2401_OwnedFolderIcon: u32 = 1870098020;
pub const anon2401_PrivateFolderIcon: u32 = 1886549606;
pub const anon2401_SharedFolderIcon: u32 = 1936221804;

pub const anon2531 = u32;
pub const anon2531_langUnspecified: u32 = 32767;

pub const anon2611 = u32;
pub const anon2611_langPortugese: u32 = 8;
pub const anon2611_langMalta: u32 = 16;
pub const anon2611_langYugoslavian: u32 = 18;
pub const anon2611_langChinese: u32 = 19;
pub const anon2611_langLettish: u32 = 28;
pub const anon2611_langLapponian: u32 = 29;
pub const anon2611_langLappish: u32 = 29;
pub const anon2611_langSaamisk: u32 = 29;
pub const anon2611_langFaeroese: u32 = 30;
pub const anon2611_langIrish: u32 = 35;
pub const anon2611_langGalla: u32 = 87;
pub const anon2611_langAfricaans: u32 = 141;
pub const anon2611_langGreekPoly: u32 = 148;
pub const anon2611_UserFolderIcon: u32 = 1969646692;
pub const anon2611_WorkgroupFolderIcon: u32 = 2003201124;
pub const anon2611_GuestUserIcon: u32 = 1735750514;
pub const anon2611_UserIcon: u32 = 1970496882;
pub const anon2611_OwnerIcon: u32 = 1937077106;
pub const anon2611_GroupIcon: u32 = 1735554416;

pub const anon2891 = u32;
pub const anon2891_verUS: u32 = 0;
pub const anon2891_verFrance: u32 = 1;
pub const anon2891_verBritain: u32 = 2;
pub const anon2891_verGermany: u32 = 3;
pub const anon2891_verItaly: u32 = 4;
pub const anon2891_verNetherlands: u32 = 5;
pub const anon2891_verFlemish: u32 = 6;
pub const anon2891_verSweden: u32 = 7;
pub const anon2891_verSpain: u32 = 8;
pub const anon2891_verDenmark: u32 = 9;
pub const anon2891_verPortugal: u32 = 10;
pub const anon2891_verFrCanada: u32 = 11;
pub const anon2891_verNorway: u32 = 12;
pub const anon2891_verIsrael: u32 = 13;
pub const anon2891_verJapan: u32 = 14;
pub const anon2891_verAustralia: u32 = 15;
pub const anon2891_verArabic: u32 = 16;
pub const anon2891_verFinland: u32 = 17;
pub const anon2891_verFrSwiss: u32 = 18;
pub const anon2891_verGrSwiss: u32 = 19;
pub const anon2891_verGreece: u32 = 20;
pub const anon2891_verIceland: u32 = 21;
pub const anon2891_verMalta: u32 = 22;
pub const anon2891_verCyprus: u32 = 23;
pub const anon2891_verTurkey: u32 = 24;
pub const anon2891_verYugoCroatian: u32 = 25;

pub const anon3191 = u32;
pub const anon3191_verNetherlandsComma: u32 = 26;
pub const anon3191_verFlemishPoint: u32 = 27;
pub const anon3191_verCanadaComma: u32 = 28;
pub const anon3191_verCanadaPoint: u32 = 29;
pub const anon3191_vervariantPortugal: u32 = 30;
pub const anon3191_vervariantNorway: u32 = 31;
pub const anon3191_vervariantDenmark: u32 = 32;
pub const anon3191_AppleScriptBadgeIcon: u32 = 1935897200;
pub const anon3191_LockedBadgeIcon: u32 = 1818387559;
pub const anon3191_MountedBadgeIcon: u32 = 1835164775;
pub const anon3191_SharedBadgeIcon: u32 = 1935828071;
pub const anon3191_AliasBadgeIcon: u32 = 1633838183;
pub const anon3191_AlertCautionBadgeIcon: u32 = 1667392615;

pub const anon3291 = u32;
pub const anon3291_verIndiaHindi: u32 = 33;
pub const anon3291_verPakistanUrdu: u32 = 34;
pub const anon3291_verTurkishModified: u32 = 35;
pub const anon3291_verItalianSwiss: u32 = 36;
pub const anon3291_verInternational: u32 = 37;
pub const anon3291_verRomania: u32 = 39;
pub const anon3291_verGreekAncient: u32 = 40;
pub const anon3291_verLithuania: u32 = 41;
pub const anon3291_verPoland: u32 = 42;
pub const anon3291_verHungary: u32 = 43;
pub const anon3291_verEstonia: u32 = 44;
pub const anon3291_verLatvia: u32 = 45;
pub const anon3291_verSami: u32 = 46;
pub const anon3291_verFaroeIsl: u32 = 47;
pub const anon3291_verIran: u32 = 48;
pub const anon3291_verRussia: u32 = 49;
pub const anon3291_verIreland: u32 = 50;
pub const anon3291_verKorea: u32 = 51;
pub const anon3291_verChina: u32 = 52;
pub const anon3291_verTaiwan: u32 = 53;
pub const anon3291_verThailand: u32 = 54;
pub const anon3291_verScriptGeneric: u32 = 55;
pub const anon3291_verCzech: u32 = 56;
pub const anon3291_verSlovak: u32 = 57;
pub const anon3291_verEastAsiaGeneric: u32 = 58;
pub const anon3291_verMagyar: u32 = 59;
pub const anon3291_verBengali: u32 = 60;
pub const anon3291_verBelarus: u32 = 61;
pub const anon3291_midiNoClientErr: u32 = -250;
pub const anon3291_midiNoPortErr: u32 = -251;
pub const anon3291_midiTooManyPortsErr: u32 = -252;
pub const anon3291_midiTooManyConsErr: u32 = -253;
pub const anon3291_midiVConnectErr: u32 = -254;
pub const anon3291_midiVConnectMade: u32 = -255;
pub const anon3291_midiVConnectRmvd: u32 = -256;
pub const anon3291_midiNoConErr: u32 = -257;
pub const anon3291_midiWriteErr: u32 = -258;
pub const anon3291_midiNameLenErr: u32 = -259;
pub const anon3291_midiDupIDErr: u32 = -260;
pub const anon3291_midiInvalidCmdErr: u32 = -261;
pub const anon3291_AlertNoteIcon: u32 = 1852798053;
pub const anon3291_AlertCautionIcon: u32 = 1667331444;
pub const anon3291_AlertStopIcon: u32 = 1937010544;

pub const anon3611 = u32;
pub const anon3611_verUkraine: u32 = 62;
pub const anon3611_verGreeceAlt: u32 = 64;
pub const anon3611_verSerbian: u32 = 65;
pub const anon3611_verSlovenian: u32 = 66;
pub const anon3611_verMacedonian: u32 = 67;
pub const anon3611_verCroatia: u32 = 68;
pub const anon3611_verGermanReformed: u32 = 70;
pub const anon3611_verBrazil: u32 = 71;
pub const anon3611_verBulgaria: u32 = 72;
pub const anon3611_verCatalonia: u32 = 73;
pub const anon3611_verMultilingual: u32 = 74;
pub const anon3611_verScottishGaelic: u32 = 75;
pub const anon3611_verManxGaelic: u32 = 76;
pub const anon3611_verBreton: u32 = 77;
pub const anon3611_verNunavut: u32 = 78;
pub const anon3611_verWelsh: u32 = 79;
pub const anon3611_verIrishGaelicScript: u32 = 81;
pub const anon3611_verEngCanada: u32 = 82;
pub const anon3611_verBhutan: u32 = 83;
pub const anon3611_verArmenian: u32 = 84;
pub const anon3611_verGeorgian: u32 = 85;
pub const anon3611_verSpLatinAmerica: u32 = 86;
pub const anon3611_verTonga: u32 = 88;
pub const anon3611_verFrenchUniversal: u32 = 91;
pub const anon3611_verAustria: u32 = 92;
pub const anon3611_verGujarati: u32 = 94;
pub const anon3611_verPunjabi: u32 = 95;
pub const anon3611_verIndiaUrdu: u32 = 96;
pub const anon3611_verVietnam: u32 = 97;
pub const anon3611_smSDMInitErr: u32 = -290;
pub const anon3611_smSRTInitErr: u32 = -291;
pub const anon3611_smPRAMInitErr: u32 = -292;
pub const anon3611_smPriInitErr: u32 = -293;
pub const anon3611_smEmptySlot: u32 = -300;
pub const anon3611_smCRCFail: u32 = -301;
pub const anon3611_smFormatErr: u32 = -302;
pub const anon3611_smRevisionErr: u32 = -303;
pub const anon3611_smNoDir: u32 = -304;
pub const anon3611_smDisabledSlot: u32 = -305;
pub const anon3611_smNosInfoArray: u32 = -306;
pub const anon3611_MacRomanianDefaultVariant: u32 = 0;
pub const anon3611_MacRomanianCurrencySignVariant: u32 = 1;
pub const anon3611_MacRomanianEuroSignVariant: u32 = 2;

pub const anon4001 = u32;
pub const anon4001_verFrBelgium: u32 = 98;
pub const anon4001_verUzbek: u32 = 99;
pub const anon4001_verSingapore: u32 = 100;
pub const anon4001_verNynorsk: u32 = 101;
pub const anon4001_verAfrikaans: u32 = 102;
pub const anon4001_verEsperanto: u32 = 103;
pub const anon4001_verMarathi: u32 = 104;
pub const anon4001_verTibetan: u32 = 105;
pub const anon4001_verNepal: u32 = 106;
pub const anon4001_verGreenland: u32 = 107;
pub const anon4001_verIrelandEnglish: u32 = 108;

pub const anon4271 = u32;
pub const anon4271_verFrBelgiumLux: u32 = 6;
pub const anon4271_verBelgiumLux: u32 = 6;
pub const anon4271_verArabia: u32 = 16;
pub const anon4271_verYugoslavia: u32 = 25;
pub const anon4271_verBelgiumLuxPoint: u32 = 27;
pub const anon4271_verIndia: u32 = 33;
pub const anon4271_verPakistan: u32 = 34;
pub const anon4271_verRumania: u32 = 39;
pub const anon4271_verGreecePoly: u32 = 40;
pub const anon4271_verLapland: u32 = 46;
pub const anon4271_verFaeroeIsl: u32 = 47;
pub const anon4271_verGenericFE: u32 = 58;
pub const anon4271_verFarEastGeneric: u32 = 58;
pub const anon4271_verByeloRussian: u32 = 61;
pub const anon4271_verUkrania: u32 = 62;
pub const anon4271_verAlternateGr: u32 = 64;
pub const anon4271_verSerbia: u32 = 65;
pub const anon4271_verSlovenia: u32 = 66;
pub const anon4271_verMacedonia: u32 = 67;
pub const anon4271_verBrittany: u32 = 77;
pub const anon4271_verWales: u32 = 79;
pub const anon4271_verArmenia: u32 = 84;
pub const anon4271_verGeorgia: u32 = 85;
pub const anon4271_verAustriaGerman: u32 = 92;
pub const anon4271_verTibet: u32 = 105;
pub const anon4271_CSIdentityQueryEventSearchPhaseFinished: u32 = 1;
pub const anon4271_CSIdentityQueryEventResultsAdded: u32 = 2;
pub const anon4271_CSIdentityQueryEventResultsChanged: u32 = 3;
pub const anon4271_CSIdentityQueryEventResultsRemoved: u32 = 4;
pub const anon4271_CSIdentityQueryEventErrorOccurred: u32 = 5;

pub const anon4551 = u32;
pub const anon4551_minCountry: u32 = 0;
pub const anon4551_maxCountry: u32 = 108;

pub const anon4601 = u32;
pub const anon4601_calGregorian: u32 = 0;
pub const anon4601_calArabicCivil: u32 = 1;
pub const anon4601_calArabicLunar: u32 = 2;
pub const anon4601_calJapanese: u32 = 3;
pub const anon4601_calJewish: u32 = 4;
pub const anon4601_calCoptic: u32 = 5;
pub const anon4601_calPersian: u32 = 6;

pub const anon4711 = u32;
pub const anon4711_intWestern: u32 = 0;
pub const anon4711_intArabic: u32 = 1;
pub const anon4711_intRoman: u32 = 2;
pub const anon4711_intJapanese: u32 = 3;
pub const anon4711_intEuropean: u32 = 4;
pub const anon4711_intOutputMask: u32 = 32768;
pub const anon4711_procNotFound: u32 = -600;
pub const anon4711_memFragErr: u32 = -601;
pub const anon4711_appModeErr: u32 = -602;
pub const anon4711_protocolErr: u32 = -603;
pub const anon4711_hardwareConfigErr: u32 = -604;
pub const anon4711_appMemFullErr: u32 = -605;
pub const anon4711_appIsDaemon: u32 = -606;
pub const anon4711_bufferIsSmall: u32 = -607;
pub const anon4711_noOutstandingHLE: u32 = -608;
pub const anon4711_connectionInvalid: u32 = -609;
pub const anon4711_noUserInteractionAllowed: u32 = -610;

pub const anon4811 = i32;
pub const anon4811_smSingleByte: i32 = 0;
pub const anon4811_smFirstByte: i32 = -1;
pub const anon4811_smLastByte: i32 = 1;
pub const anon4811_smMiddleByte: i32 = 2;
pub const anon4811_pNewElementLoc: i32 = 1886283116;
pub const anon4811_pPenColor: i32 = 1886413676;
pub const anon4811_pPenPattern: i32 = 1886416993;
pub const anon4811_pPenWidth: i32 = 1886418788;
pub const anon4811_pPixelDepth: i32 = 1885630580;
pub const anon4811_pPointList: i32 = 1886678132;
pub const anon4811_pPointSize: i32 = 1886679930;
pub const anon4811_pProtection: i32 = 1886417519;
pub const anon4811_pRotation: i32 = 1886547828;
pub const anon4811_pScale: i32 = 1886610284;
pub const anon4811_pScript: i32 = 1935896692;
pub const anon4811_pScriptTag: i32 = 1886610292;
pub const anon4811_pSelected: i32 = 1936026723;
pub const anon4811_pSelection: i32 = 1936026725;
pub const anon4811_pStartAngle: i32 = 1885433447;
pub const anon4811_pStartPoint: i32 = 1886614640;
pub const anon4811_pTextColor: i32 = 1886681187;
pub const anon4811_pTextFont: i32 = 1886681190;
pub const anon4811_pTextItemDelimiters: i32 = 1954047084;
pub const anon4811_pTextPointSize: i32 = 1886679155;

pub const anon4891 = u32;
pub const anon4891_smcTypeMask: u32 = 15;
pub const anon4891_smcReserved: u32 = 240;
pub const anon4891_smcClassMask: u32 = 3840;
pub const anon4891_smcOrientationMask: u32 = 4096;
pub const anon4891_smcRightMask: u32 = 8192;
pub const anon4891_smcUpperMask: u32 = 16384;
pub const anon4891_smcDoubleMask: u32 = 32768;
pub const anon4891_HFSPlusAttrInlineData: u32 = 16;
pub const anon4891_HFSPlusAttrForkData: u32 = 32;
pub const anon4891_HFSPlusAttrExtents: u32 = 48;

pub const anon5001 = u32;
pub const anon5001_smCharPunct: u32 = 0;
pub const anon5001_smCharAscii: u32 = 1;
pub const anon5001_smCharEuro: u32 = 7;
pub const anon5001_smCharExtAscii: u32 = 7;
pub const anon5001_smCharKatakana: u32 = 2;
pub const anon5001_smCharHiragana: u32 = 3;
pub const anon5001_smCharIdeographic: u32 = 4;
pub const anon5001_smCharTwoByteGreek: u32 = 5;
pub const anon5001_smCharTwoByteRussian: u32 = 6;
pub const anon5001_smCharBidirect: u32 = 8;
pub const anon5001_smCharContextualLR: u32 = 9;
pub const anon5001_smCharNonContextualLR: u32 = 10;
pub const anon5001_smCharHangul: u32 = 12;
pub const anon5001_smCharJamo: u32 = 13;
pub const anon5001_smCharBopomofo: u32 = 14;
pub const anon5001_smCharGanaKana: u32 = 15;
pub const anon5001_smCharFISKana: u32 = 2;
pub const anon5001_smCharFISGana: u32 = 3;
pub const anon5001_smCharFISIdeo: u32 = 4;
pub const anon5001_threadBadAppContextErr: u32 = -616;

pub const anon5251 = u32;
pub const anon5251_smCharFISGreek: u32 = 5;
pub const anon5251_smCharFISRussian: u32 = 6;
pub const anon5251_smPunctNormal: u32 = 0;
pub const anon5251_smPunctNumber: u32 = 256;
pub const anon5251_smPunctSymbol: u32 = 512;
pub const anon5251_smPunctBlank: u32 = 768;
pub const anon5251_smPunctRepeat: u32 = 1024;
pub const anon5251_smPunctGraphic: u32 = 1280;
pub const anon5251_smKanaSmall: u32 = 256;
pub const anon5251_smKanaHardOK: u32 = 512;
pub const anon5251_smKanaSoftOK: u32 = 768;
pub const anon5251_smIdeographicLevel1: u32 = 0;
pub const anon5251_smIdeographicLevel2: u32 = 256;
pub const anon5251_smIdeographicUser: u32 = 512;
pub const anon5251_smFISClassLvl1: u32 = 0;
pub const anon5251_smFISClassLvl2: u32 = 256;
pub const anon5251_smFISClassUser: u32 = 512;
pub const anon5251_smJamoJaeum: u32 = 0;
pub const anon5251_smJamoBogJaeum: u32 = 256;
pub const anon5251_smJamoMoeum: u32 = 512;
pub const anon5251_smJamoBogMoeum: u32 = 768;

pub const anon5541 = u32;
pub const anon5541_smCharHorizontal: u32 = 0;
pub const anon5541_smCharVertical: u32 = 4096;
pub const anon5541_smCharLeft: u32 = 0;
pub const anon5541_smCharRight: u32 = 8192;
pub const anon5541_smCharLower: u32 = 0;
pub const anon5541_smCharUpper: u32 = 16384;
pub const anon5541_smChar1byte: u32 = 0;
pub const anon5541_smChar2byte: u32 = 32768;

pub const anon5671 = u32;
pub const anon5671_smTransAscii: u32 = 0;
pub const anon5671_smTransNative: u32 = 1;
pub const anon5671_smTransCase: u32 = 254;
pub const anon5671_smTransSystem: u32 = 255;
pub const anon5671_smTransAscii1: u32 = 2;
pub const anon5671_smTransAscii2: u32 = 3;
pub const anon5671_smTransKana1: u32 = 4;
pub const anon5671_smTransKana2: u32 = 5;
pub const anon5671_RelativeFolder: u32 = 1919249510;
pub const anon5671_RedirectedRelativeFolder: u32 = 1920099692;
pub const anon5671_SpecialFolder: u32 = 1936745318;

pub const anon5801 = u32;
pub const anon5801_smTransGana2: u32 = 7;
pub const anon5801_smTransHangul2: u32 = 8;
pub const anon5801_smTransJamo2: u32 = 9;
pub const anon5801_smTransBopomofo2: u32 = 10;
pub const anon5801_smTransLower: u32 = 16384;
pub const anon5801_smTransUpper: u32 = 32768;
pub const anon5801_smTransRuleBaseFormat: u32 = 1;
pub const anon5801_smTransHangulFormat: u32 = 2;
pub const anon5801_smTransPreDoubleByting: u32 = 1;
pub const anon5801_smTransPreLowerCasing: u32 = 2;
pub const anon5801_CurrentUserFolderLocation: u32 = 1668641638;

pub const anon5961 = i32;
pub const anon5961_smMaskAll: i32 = -1;
pub const anon5961_smMaskAscii: i32 = 1;
pub const anon5961_smMaskNative: i32 = 2;
pub const anon5961_smMaskAscii1: i32 = 4;
pub const anon5961_smMaskAscii2: i32 = 8;
pub const anon5961_smMaskKana1: i32 = 16;
pub const anon5961_smMaskKana2: i32 = 32;
pub const anon5961_smMaskGana2: i32 = 128;
pub const anon5961_smMaskHangul2: i32 = 256;
pub const anon5961_smMaskJamo2: i32 = 512;
pub const anon5961_smMaskBopomofo2: i32 = 1024;
pub const anon5961_eyMenuID: i32 = 1835623456;
pub const anon5961_eyMenuItem: i32 = 1835627629;
pub const anon5961_eyCloseAllWindows: i32 = 1667331872;
pub const anon5961_eyOriginalBounds: i32 = 1868721764;
pub const anon5961_eyNewBounds: i32 = 1851944548;
pub const anon5961_eyLocalWhere: i32 = 1819764850;

pub const anon6131 = i32;
pub const anon6131_iuSystemScript: i32 = -1;
pub const anon6131_iuCurrentScript: i32 = -2;

pub const anon6191 = i32;
pub const anon6191_smKeyNextScript: i32 = -1;
pub const anon6191_smKeySysScript: i32 = -2;
pub const anon6191_smKeySwapScript: i32 = -3;
pub const anon6191_smKeyNextKybd: i32 = -4;
pub const anon6191_smKeySwapKybd: i32 = -5;
pub const anon6191_smKeyDisableKybds: i32 = -6;
pub const anon6191_smKeyEnableKybds: i32 = -7;
pub const anon6191_smKeyToggleInline: i32 = -8;
pub const anon6191_smKeyToggleDirection: i32 = -9;
pub const anon6191_smKeyNextInputMethod: i32 = -10;
pub const anon6191_smKeySwapInputMethod: i32 = -11;
pub const anon6191_smKeyDisableKybdSwitch: i32 = -12;
pub const anon6191_smKeySetDirLeftRight: i32 = -15;
pub const anon6191_smKeySetDirRightLeft: i32 = -16;
pub const anon6191_smKeyRoman: i32 = -17;

pub const anon6391 = u32;
pub const anon6391_smKeyForceKeyScriptBit: u32 = 7;
pub const anon6391_smKeyForceKeyScriptMask: u32 = 128;
pub const anon6391_TextServiceClass: u32 = 1953724003;
pub const anon6391_UpdateActiveInputArea: u32 = 1970300020;
pub const anon6391_ShowHideInputWindow: u32 = 1936222583;
pub const anon6391_Pos2Offset: u32 = 1882354548;
pub const anon6391_Offset2Pos: u32 = 1936994928;
pub const anon6391_UnicodeNotFromInputMethod: u32 = 1970170221;
pub const anon6391_GetSelectedText: u32 = 1735686260;
pub const anon6391_eyAETSMDocumentRefcon: u32 = 1919247971;
pub const anon6391_eyAEServerInstance: u32 = 1936881257;
pub const anon6391_eyAETheData: u32 = 1801740660;
pub const anon6391_eyAEFixLength: u32 = 1718188140;
pub const anon6391_eyAEUpdateRange: u32 = 1969516135;
pub const anon6391_eyAECurrentPoint: u32 = 1668312947;
pub const anon6391_eyAEBufferSize: u32 = 1651861094;
pub const anon6391_eyAEMoveView: u32 = 1836480119;
pub const anon6391_eyAENextBody: u32 = 1853383268;
pub const anon6391_eyAETSMScriptTag: u32 = 1935895655;
pub const anon6391_eyAETSMTextFont: u32 = 1802795110;
pub const anon6391_eyAETSMTextFMFont: u32 = 1802795117;
pub const anon6391_eyAETSMTextPointSize: u32 = 1802793075;
pub const anon6391_eyAETSMEventRecord: u32 = 1952806516;
pub const anon6391_eyAETSMEventRef: u32 = 1952806514;
pub const anon6391_eyAETextServiceEncoding: u32 = 1953719662;
pub const anon6391_eyAETextServiceMacEncoding: u32 = 1953326446;
pub const anon6391_eyAETSMGlyphInfoArray: u32 = 1952934241;
pub const anon6391_typeTextRange: u32 = 1954050670;
pub const anon6391_typeComponentInstance: u32 = 1668116585;
pub const anon6391_typeOffsetArray: u32 = 1868980601;
pub const anon6391_typeTextRangeArray: u32 = 1953653113;
pub const anon6391_typeLowLevelEventRecord: u32 = 1702261874;
pub const anon6391_typeGlyphInfoArray: u32 = 1735158113;
pub const anon6391_typeEventRef: u32 = 1702261350;
pub const anon6391_typeText: u32 = 1413830740;

pub const anon6451 = u32;
pub const anon6451_romanSysFond: u32 = 16383;
pub const anon6451_romanAppFond: u32 = 3;
pub const anon6451_romanFlags: u32 = 7;
pub const anon6451_smFondStart: u32 = 16384;
pub const anon6451_smFondEnd: u32 = 49152;
pub const anon6451_smUprHalfCharSet: u32 = 128;
pub const anon6451_CSSM_APPLECSPDL_DB_LOCK: u32 = 0;
pub const anon6451_CSSM_APPLECSPDL_DB_UNLOCK: u32 = 1;
pub const anon6451_CSSM_APPLECSPDL_DB_GET_SETTINGS: u32 = 2;
pub const anon6451_CSSM_APPLECSPDL_DB_SET_SETTINGS: u32 = 3;
pub const anon6451_CSSM_APPLECSPDL_DB_IS_LOCKED: u32 = 4;
pub const anon6451_CSSM_APPLECSPDL_DB_CHANGE_PASSWORD: u32 = 5;
pub const anon6451_CSSM_APPLECSPDL_DB_GET_HANDLE: u32 = 6;
pub const anon6451_CSSM_APPLESCPDL_CSP_GET_KEYHANDLE: u32 = 7;
pub const anon6451_CSSM_APPLE_PRIVATE_CSPDL_CODE_8: u32 = 8;
pub const anon6451_CSSM_APPLE_PRIVATE_CSPDL_CODE_9: u32 = 9;
pub const anon6451_CSSM_APPLE_PRIVATE_CSPDL_CODE_10: u32 = 10;
pub const anon6451_CSSM_APPLE_PRIVATE_CSPDL_CODE_11: u32 = 11;
pub const anon6451_CSSM_APPLE_PRIVATE_CSPDL_CODE_12: u32 = 12;
pub const anon6451_CSSM_APPLE_PRIVATE_CSPDL_CODE_13: u32 = 13;
pub const anon6451_CSSM_APPLE_PRIVATE_CSPDL_CODE_14: u32 = 14;
pub const anon6451_CSSM_APPLE_PRIVATE_CSPDL_CODE_15: u32 = 15;
pub const anon6451_CSSM_APPLE_PRIVATE_CSPDL_CODE_16: u32 = 16;
pub const anon6451_CSSM_APPLE_PRIVATE_CSPDL_CODE_17: u32 = 17;
pub const anon6451_CSSM_APPLE_PRIVATE_CSPDL_CODE_18: u32 = 18;
pub const anon6451_CSSM_APPLE_PRIVATE_CSPDL_CODE_19: u32 = 19;
pub const anon6451_CSSM_APPLE_PRIVATE_CSPDL_CODE_20: u32 = 20;
pub const anon6451_CSSM_APPLE_PRIVATE_CSPDL_CODE_21: u32 = 21;
pub const anon6451_CSSM_APPLE_PRIVATE_CSPDL_CODE_22: u32 = 22;
pub const anon6451_CSSM_APPLE_PRIVATE_CSPDL_CODE_23: u32 = 23;
pub const anon6451_CSSM_APPLE_PRIVATE_CSPDL_CODE_24: u32 = 24;
pub const anon6451_CSSM_APPLE_PRIVATE_CSPDL_CODE_25: u32 = 25;
pub const anon6451_CSSM_APPLE_PRIVATE_CSPDL_CODE_26: u32 = 26;
pub const anon6451_CSSM_APPLE_PRIVATE_CSPDL_CODE_27: u32 = 27;
pub const anon6451_CSSM_APPLECSP_KEYDIGEST: u32 = 256;
pub const anon6451_CSSM_APPLECSP_PUBKEY: u32 = 257;

pub const anon6591 = u32;
pub const anon6591_diaeresisUprY: u32 = 217;
pub const anon6591_fraction: u32 = 218;
pub const anon6591_intlCurrency: u32 = 219;
pub const anon6591_leftSingGuillemet: u32 = 220;
pub const anon6591_rightSingGuillemet: u32 = 221;
pub const anon6591_fiLigature: u32 = 222;
pub const anon6591_flLigature: u32 = 223;
pub const anon6591_dblDagger: u32 = 224;
pub const anon6591_centeredDot: u32 = 225;
pub const anon6591_baseSingQuote: u32 = 226;
pub const anon6591_baseDblQuote: u32 = 227;
pub const anon6591_perThousand: u32 = 228;
pub const anon6591_circumflexUprA: u32 = 229;
pub const anon6591_circumflexUprE: u32 = 230;
pub const anon6591_acuteUprA: u32 = 231;
pub const anon6591_diaeresisUprE: u32 = 232;
pub const anon6591_graveUprE: u32 = 233;
pub const anon6591_acuteUprI: u32 = 234;
pub const anon6591_circumflexUprI: u32 = 235;
pub const anon6591_diaeresisUprI: u32 = 236;
pub const anon6591_graveUprI: u32 = 237;
pub const anon6591_acuteUprO: u32 = 238;
pub const anon6591_circumflexUprO: u32 = 239;
pub const anon6591_appleLogo: u32 = 240;
pub const anon6591_graveUprO: u32 = 241;
pub const anon6591_acuteUprU: u32 = 242;
pub const anon6591_circumflexUprU: u32 = 243;
pub const anon6591_graveUprU: u32 = 244;
pub const anon6591_dotlessLwrI: u32 = 245;
pub const anon6591_circumflex: u32 = 246;
pub const anon6591_tilde: u32 = 247;
pub const anon6591_macron: u32 = 248;
pub const anon6591_breveMark: u32 = 249;
pub const anon6591_overDot: u32 = 250;
pub const anon6591_ringMark: u32 = 251;
pub const anon6591_cedilla: u32 = 252;
pub const anon6591_doubleAcute: u32 = 253;
pub const anon6591_ogonek: u32 = 254;
pub const anon6591_hachek: u32 = 255;

pub const anon7021 = i32;
pub const anon7021_tokenIntl: i32 = 4;
pub const anon7021_tokenEmpty: i32 = -1;

pub const anon7081 = u32;
pub const anon7081_tokenUnknown: u32 = 0;
pub const anon7081_tokenWhite: u32 = 1;
pub const anon7081_tokenLeftLit: u32 = 2;
pub const anon7081_tokenRightLit: u32 = 3;
pub const anon7081_tokenAlpha: u32 = 4;
pub const anon7081_tokenNumeric: u32 = 5;
pub const anon7081_tokenNewLine: u32 = 6;
pub const anon7081_tokenLeftComment: u32 = 7;
pub const anon7081_tokenRightComment: u32 = 8;
pub const anon7081_tokenLiteral: u32 = 9;
pub const anon7081_tokenEscape: u32 = 10;
pub const anon7081_tokenAltNum: u32 = 11;
pub const anon7081_tokenRealNum: u32 = 12;
pub const anon7081_tokenAltReal: u32 = 13;
pub const anon7081_tokenReserve1: u32 = 14;
pub const anon7081_tokenReserve2: u32 = 15;
pub const anon7081_tokenLeftParen: u32 = 16;
pub const anon7081_tokenRightParen: u32 = 17;
pub const anon7081_tokenLeftBracket: u32 = 18;
pub const anon7081_tokenRightBracket: u32 = 19;

pub const anon7311 = u32;
pub const anon7311_tokenLeftCurly: u32 = 20;
pub const anon7311_tokenRightCurly: u32 = 21;
pub const anon7311_tokenLeftEnclose: u32 = 22;
pub const anon7311_tokenRightEnclose: u32 = 23;
pub const anon7311_tokenPlus: u32 = 24;
pub const anon7311_tokenMinus: u32 = 25;
pub const anon7311_tokenAsterisk: u32 = 26;
pub const anon7311_tokenDivide: u32 = 27;
pub const anon7311_tokenPlusMinus: u32 = 28;
pub const anon7311_tokenSlash: u32 = 29;
pub const anon7311_tokenBackSlash: u32 = 30;
pub const anon7311_tokenLess: u32 = 31;
pub const anon7311_tokenGreat: u32 = 32;
pub const anon7311_tokenEqual: u32 = 33;
pub const anon7311_tokenLessEqual2: u32 = 34;
pub const anon7311_tokenLessEqual1: u32 = 35;
pub const anon7311_tokenGreatEqual2: u32 = 36;
pub const anon7311_tokenGreatEqual1: u32 = 37;
pub const anon7311_token2Equal: u32 = 38;
pub const anon7311_tokenColonEqual: u32 = 39;
pub const anon7311_gestaltControlStripVersion: u32 = 1668511346;

pub const anon7541 = u32;
pub const anon7541_tokenNotEqual: u32 = 40;
pub const anon7541_tokenLessGreat: u32 = 41;
pub const anon7541_tokenExclamEqual: u32 = 42;
pub const anon7541_tokenExclam: u32 = 43;
pub const anon7541_tokenTilde: u32 = 44;
pub const anon7541_tokenComma: u32 = 45;
pub const anon7541_tokenPeriod: u32 = 46;
pub const anon7541_tokenLeft2Quote: u32 = 47;
pub const anon7541_tokenRight2Quote: u32 = 48;
pub const anon7541_tokenLeft1Quote: u32 = 49;
pub const anon7541_tokenRight1Quote: u32 = 50;
pub const anon7541_token2Quote: u32 = 51;
pub const anon7541_token1Quote: u32 = 52;
pub const anon7541_tokenSemicolon: u32 = 53;
pub const anon7541_tokenPercent: u32 = 54;
pub const anon7541_tokenCaret: u32 = 55;
pub const anon7541_tokenUnderline: u32 = 56;
pub const anon7541_tokenAmpersand: u32 = 57;
pub const anon7541_tokenAtSign: u32 = 58;
pub const anon7541_tokenBar: u32 = 59;

pub const anon7771 = u32;
pub const anon7771_tokenQuestion: u32 = 60;
pub const anon7771_tokenPi: u32 = 61;
pub const anon7771_tokenRoot: u32 = 62;
pub const anon7771_tokenSigma: u32 = 63;
pub const anon7771_tokenIntegral: u32 = 64;
pub const anon7771_tokenMicro: u32 = 65;
pub const anon7771_tokenCapPi: u32 = 66;
pub const anon7771_tokenInfinity: u32 = 67;
pub const anon7771_tokenColon: u32 = 68;
pub const anon7771_tokenHash: u32 = 69;
pub const anon7771_tokenDollar: u32 = 70;
pub const anon7771_tokenNoBreakSpace: u32 = 71;
pub const anon7771_tokenFraction: u32 = 72;
pub const anon7771_tokenIntlCurrency: u32 = 73;
pub const anon7771_tokenLeftSingGuillemet: u32 = 74;
pub const anon7771_tokenRightSingGuillemet: u32 = 75;
pub const anon7771_tokenPerThousand: u32 = 76;
pub const anon7771_tokenEllipsis: u32 = 77;
pub const anon7771_tokenCenterDot: u32 = 78;
pub const anon7771_tokenNil: u32 = 127;
pub const anon7771_HFSCaseFolding: u32 = 207;
pub const anon7771_HFSBinaryCompare: u32 = 188;

pub const anon8001 = i32;
pub const anon8001_delimPad: i32 = -2;
pub const anon8001_tokenTilda: i32 = 44;
pub const anon8001_tokenCarat: i32 = 55;
pub const anon8001_gestaltDragMgrAttr: i32 = 1685217639;
pub const anon8001_gestaltDragMgrPresent: i32 = 0;
pub const anon8001_gestaltDragMgrFloatingWind: i32 = 1;
pub const anon8001_gestaltPPCDragLibPresent: i32 = 2;
pub const anon8001_gestaltDragMgrHasImageSupport: i32 = 3;
pub const anon8001_gestaltCanStartDragInFloatWindow: i32 = 4;
pub const anon8001_gestaltSetDragImageUpdates: i32 = 5;
pub const anon8001_FAServerApp: i32 = 1936945782;
pub const anon8001_DoFolderActionEvent: i32 = 1718578273;
pub const anon8001_FolderActionCode: i32 = 1633907822;
pub const anon8001_FolderOpenedEvent: i32 = 1718579310;
pub const anon8001_FolderClosedEvent: i32 = 1717791855;
pub const anon8001_FolderWindowMovedEvent: i32 = 1718839674;
pub const anon8001_FolderItemsAddedEvent: i32 = 1718052212;
pub const anon8001_FolderItemsRemovedEvent: i32 = 1718382451;
pub const anon8001_ItemList: i32 = 1718383476;
pub const anon8001_NewSizeParameter: i32 = 1718514554;
pub const anon8001_FASuiteCode: i32 = 1717658479;
pub const anon8001_FAAttachCommand: i32 = 1635018337;
pub const anon8001_FARemoveCommand: i32 = 1919772257;
pub const anon8001_FAEditCommand: i32 = 1701078625;
pub const anon8001_FAFileParam: i32 = 1717657964;
pub const anon8001_FAIndexParam: i32 = 1768842360;

pub const anon8061 = u32;
pub const anon8061_smWordSelectTable: u32 = 0;
pub const anon8061_smWordWrapTable: u32 = 1;
pub const anon8061_smNumberPartsTable: u32 = 2;
pub const anon8061_smUnTokenTable: u32 = 3;
pub const anon8061_smWhiteSpaceList: u32 = 4;
pub const anon8061_iuWordSelectTable: u32 = 0;
pub const anon8061_iuWordWrapTable: u32 = 1;
pub const anon8061_iuNumberPartsTable: u32 = 2;
pub const anon8061_iuUnTokenTable: u32 = 3;
pub const anon8061_iuWhiteSpaceList: u32 = 4;

pub const anon8211 = u32;
pub const anon8211_tokenOK: u32 = 0;
pub const anon8211_tokenOverflow: u32 = 1;
pub const anon8211_stringOverflow: u32 = 2;
pub const anon8211_badDelim: u32 = 3;
pub const anon8211_badEnding: u32 = 4;
pub const anon8211_crash: u32 = 5;
pub const anon8211_AEInternetSuite: u32 = 1735750252;
pub const anon8211_AEISWebStarSuite: u32 = 1465341885;
pub const anon8211_CSSM_ALGID_NONE: u32 = 0;
pub const anon8211_CSSM_ALGID_CUSTOM: u32 = 1;
pub const anon8211_CSSM_ALGID_DH: u32 = 2;
pub const anon8211_CSSM_ALGID_PH: u32 = 3;
pub const anon8211_CSSM_ALGID_KEA: u32 = 4;
pub const anon8211_CSSM_ALGID_MD2: u32 = 5;
pub const anon8211_CSSM_ALGID_MD4: u32 = 6;
pub const anon8211_CSSM_ALGID_MD5: u32 = 7;
pub const anon8211_CSSM_ALGID_SHA1: u32 = 8;
pub const anon8211_CSSM_ALGID_NHASH: u32 = 9;
pub const anon8211_CSSM_ALGID_HAVAL: u32 = 10;
pub const anon8211_CSSM_ALGID_RIPEMD: u32 = 11;
pub const anon8211_CSSM_ALGID_IBCHASH: u32 = 12;
pub const anon8211_CSSM_ALGID_RIPEMAC: u32 = 13;
pub const anon8211_CSSM_ALGID_DES: u32 = 14;
pub const anon8211_CSSM_ALGID_DESX: u32 = 15;
pub const anon8211_CSSM_ALGID_RDES: u32 = 16;
pub const anon8211_CSSM_ALGID_3DES_3KEY_EDE: u32 = 17;
pub const anon8211_CSSM_ALGID_3DES_2KEY_EDE: u32 = 18;
pub const anon8211_CSSM_ALGID_3DES_1KEY_EEE: u32 = 19;
pub const anon8211_CSSM_ALGID_3DES_3KEY: u32 = 17;
pub const anon8211_CSSM_ALGID_3DES_3KEY_EEE: u32 = 20;
pub const anon8211_CSSM_ALGID_3DES_2KEY: u32 = 18;
pub const anon8211_CSSM_ALGID_3DES_2KEY_EEE: u32 = 21;
pub const anon8211_CSSM_ALGID_3DES_1KEY: u32 = 20;
pub const anon8211_CSSM_ALGID_IDEA: u32 = 22;
pub const anon8211_CSSM_ALGID_RC2: u32 = 23;
pub const anon8211_CSSM_ALGID_RC5: u32 = 24;
pub const anon8211_CSSM_ALGID_RC4: u32 = 25;
pub const anon8211_CSSM_ALGID_SEAL: u32 = 26;
pub const anon8211_CSSM_ALGID_CAST: u32 = 27;
pub const anon8211_CSSM_ALGID_BLOWFISH: u32 = 28;
pub const anon8211_CSSM_ALGID_SKIPJACK: u32 = 29;
pub const anon8211_CSSM_ALGID_LUCIFER: u32 = 30;
pub const anon8211_CSSM_ALGID_MADRYGA: u32 = 31;
pub const anon8211_CSSM_ALGID_FEAL: u32 = 32;
pub const anon8211_CSSM_ALGID_REDOC: u32 = 33;
pub const anon8211_CSSM_ALGID_REDOC3: u32 = 34;
pub const anon8211_CSSM_ALGID_LOKI: u32 = 35;
pub const anon8211_CSSM_ALGID_KHUFU: u32 = 36;
pub const anon8211_CSSM_ALGID_KHAFRE: u32 = 37;
pub const anon8211_CSSM_ALGID_MMB: u32 = 38;
pub const anon8211_CSSM_ALGID_GOST: u32 = 39;
pub const anon8211_CSSM_ALGID_SAFER: u32 = 40;
pub const anon8211_CSSM_ALGID_CRAB: u32 = 41;
pub const anon8211_CSSM_ALGID_RSA: u32 = 42;
pub const anon8211_CSSM_ALGID_DSA: u32 = 43;
pub const anon8211_CSSM_ALGID_MD5WithRSA: u32 = 44;
pub const anon8211_CSSM_ALGID_MD2WithRSA: u32 = 45;
pub const anon8211_CSSM_ALGID_ElGamal: u32 = 46;
pub const anon8211_CSSM_ALGID_MD2Random: u32 = 47;
pub const anon8211_CSSM_ALGID_MD5Random: u32 = 48;
pub const anon8211_CSSM_ALGID_SHARandom: u32 = 49;
pub const anon8211_CSSM_ALGID_DESRandom: u32 = 50;
pub const anon8211_CSSM_ALGID_SHA1WithRSA: u32 = 51;
pub const anon8211_CSSM_ALGID_CDMF: u32 = 52;
pub const anon8211_CSSM_ALGID_CAST3: u32 = 53;
pub const anon8211_CSSM_ALGID_CAST5: u32 = 54;
pub const anon8211_CSSM_ALGID_GenericSecret: u32 = 55;
pub const anon8211_CSSM_ALGID_ConcatBaseAndKey: u32 = 56;
pub const anon8211_CSSM_ALGID_ConcatKeyAndBase: u32 = 57;
pub const anon8211_CSSM_ALGID_ConcatBaseAndData: u32 = 58;
pub const anon8211_CSSM_ALGID_ConcatDataAndBase: u32 = 59;
pub const anon8211_CSSM_ALGID_XORBaseAndData: u32 = 60;
pub const anon8211_CSSM_ALGID_ExtractFromKey: u32 = 61;
pub const anon8211_CSSM_ALGID_SSL3PrePrimaryGen: u32 = 62;
pub const anon8211_CSSM_ALGID_SSL3PreMasterGen: u32 = 62;
pub const anon8211_CSSM_ALGID_SSL3PrimaryDerive: u32 = 63;
pub const anon8211_CSSM_ALGID_SSL3MasterDerive: u32 = 63;
pub const anon8211_CSSM_ALGID_SSL3KeyAndMacDerive: u32 = 64;
pub const anon8211_CSSM_ALGID_SSL3MD5_MAC: u32 = 65;
pub const anon8211_CSSM_ALGID_SSL3SHA1_MAC: u32 = 66;
pub const anon8211_CSSM_ALGID_PKCS5_PBKDF1_MD5: u32 = 67;
pub const anon8211_CSSM_ALGID_PKCS5_PBKDF1_MD2: u32 = 68;
pub const anon8211_CSSM_ALGID_PKCS5_PBKDF1_SHA1: u32 = 69;
pub const anon8211_CSSM_ALGID_WrapLynks: u32 = 70;
pub const anon8211_CSSM_ALGID_WrapSET_OAEP: u32 = 71;
pub const anon8211_CSSM_ALGID_BATON: u32 = 72;
pub const anon8211_CSSM_ALGID_ECDSA: u32 = 73;
pub const anon8211_CSSM_ALGID_MAYFLY: u32 = 74;
pub const anon8211_CSSM_ALGID_JUNIPER: u32 = 75;
pub const anon8211_CSSM_ALGID_FASTHASH: u32 = 76;
pub const anon8211_CSSM_ALGID_3DES: u32 = 77;
pub const anon8211_CSSM_ALGID_SSL3MD5: u32 = 78;
pub const anon8211_CSSM_ALGID_SSL3SHA1: u32 = 79;
pub const anon8211_CSSM_ALGID_FortezzaTimestamp: u32 = 80;
pub const anon8211_CSSM_ALGID_SHA1WithDSA: u32 = 81;
pub const anon8211_CSSM_ALGID_SHA1WithECDSA: u32 = 82;
pub const anon8211_CSSM_ALGID_DSA_BSAFE: u32 = 83;
pub const anon8211_CSSM_ALGID_ECDH: u32 = 84;
pub const anon8211_CSSM_ALGID_ECMQV: u32 = 85;
pub const anon8211_CSSM_ALGID_PKCS12_SHA1_PBE: u32 = 86;
pub const anon8211_CSSM_ALGID_ECNRA: u32 = 87;
pub const anon8211_CSSM_ALGID_SHA1WithECNRA: u32 = 88;
pub const anon8211_CSSM_ALGID_ECES: u32 = 89;
pub const anon8211_CSSM_ALGID_ECAES: u32 = 90;
pub const anon8211_CSSM_ALGID_SHA1HMAC: u32 = 91;
pub const anon8211_CSSM_ALGID_FIPS186Random: u32 = 92;
pub const anon8211_CSSM_ALGID_ECC: u32 = 93;
pub const anon8211_CSSM_ALGID_MQV: u32 = 94;
pub const anon8211_CSSM_ALGID_NRA: u32 = 95;
pub const anon8211_CSSM_ALGID_IntelPlatformRandom: u32 = 96;
pub const anon8211_CSSM_ALGID_UTC: u32 = 97;
pub const anon8211_CSSM_ALGID_HAVAL3: u32 = 98;
pub const anon8211_CSSM_ALGID_HAVAL4: u32 = 99;
pub const anon8211_CSSM_ALGID_HAVAL5: u32 = 100;
pub const anon8211_CSSM_ALGID_TIGER: u32 = 101;
pub const anon8211_CSSM_ALGID_MD5HMAC: u32 = 102;
pub const anon8211_CSSM_ALGID_PKCS5_PBKDF2: u32 = 103;
pub const anon8211_CSSM_ALGID_RUNNING_COUNTER: u32 = 104;
pub const anon8211_CSSM_ALGID_LAST: u32 = 2147483647;
pub const anon8211_CSSM_ALGID_VENDOR_DEFINED: u32 = -2147483648;

pub const TokenResults = objc.SInt8;

pub const CharByteTable = [256]i8;

pub const ScriptTokenType = i16;

pub const DelimType = ScriptTokenType;

pub const CommentType = ScriptTokenType;

pub const TokenRec = extern struct {
    theToken: ScriptTokenType,
    position: objc.Ptr,
    length: i64,
    stringPosition: objc.StringPtr,
};

pub const TokenRecPtr = TokenRec;

pub const TokenBlock = extern struct {
    source: objc.Ptr,
    sourceLength: i64,
    tokenList: objc.Ptr,
    tokenLength: i64,
    tokenCount: i64,
    stringList: objc.Ptr,
    stringLength: i64,
    stringCount: i64,
    doString: objc.Boolean,
    doAppend: objc.Boolean,
    doAlphanumeric: objc.Boolean,
    doNest: objc.Boolean,
    leftDelims: [2]ScriptTokenType,
    rightDelims: [2]ScriptTokenType,
    leftComment: [4]ScriptTokenType,
    rightComment: [4]ScriptTokenType,
    escapeCode: ScriptTokenType,
    decimalCode: ScriptTokenType,
    itlResource: objc.Handle,
    reserved: [8]i64,
};

pub const TokenBlockPtr = TokenBlock;

pub const anon8701 = i32;
pub const anon8701_smNotInstalled: i32 = 0;
pub const anon8701_smBadVerb: i32 = -1;
pub const anon8701_smBadScript: i32 = -2;

pub const anon8781 = u32;
pub const anon8781_smfShowIcon: u32 = 31;
pub const anon8781_smfDualCaret: u32 = 30;
pub const anon8781_smfNameTagEnab: u32 = 29;
pub const anon8781_smfUseAssocFontInfo: u32 = 28;
pub const anon8781_smfDisableKeyScriptSync: u32 = 27;

pub const anon8871 = u32;
pub const anon8871_smfDisableKeyScriptSyncMask: u32 = 134217728;

pub const anon8921 = u32;
pub const anon8921_smSysScript: u32 = 18;
pub const anon8921_smKeyScript: u32 = 22;
pub const anon8921_smKCHRCache: u32 = 38;
pub const anon8921_smRegionCode: u32 = 40;

pub extern "CoreServices" fn GetScriptManagerVariable(selector: i16) callconv(.C) i64;

pub extern "CoreServices" fn SetScriptManagerVariable(selector: i16, param: i64) callconv(.C) objc.OSErr;

pub const anon10241 = u32;
pub const anon10241_smsfIntellCP: u32 = 0;
pub const anon10241_smsfSingByte: u32 = 1;
pub const anon10241_smsfNatCase: u32 = 2;
pub const anon10241_smsfContext: u32 = 3;
pub const anon10241_smsfNoForceFont: u32 = 4;
pub const anon10241_smsfB0Digits: u32 = 5;
pub const anon10241_smsfAutoInit: u32 = 6;
pub const anon10241_smsfUnivExt: u32 = 7;
pub const anon10241_smsfSynchUnstyledTE: u32 = 8;
pub const anon10241_smsfForms: u32 = 13;
pub const anon10241_smsfLigatures: u32 = 14;
pub const anon10241_smsfReverse: u32 = 15;

pub const anon731 = i32;
pub const anon731_vLckdErr: i32 = -46;
pub const anon731_fBsyErr: i32 = -47;
pub const anon731_dupFNErr: i32 = -48;
pub const anon731_opWrErr: i32 = -49;
pub const anon731_rfNumErr: i32 = -51;
pub const anon731_gfpErr: i32 = -52;
pub const anon731_volOffLinErr: i32 = -53;
pub const anon731_permErr: i32 = -54;
pub const anon731_volOnLinErr: i32 = -55;
pub const anon731_nsDrvErr: i32 = -56;
pub const anon731_noMacDskErr: i32 = -57;
pub const anon731_extFSErr: i32 = -58;
pub const anon731_fsRnErr: i32 = -59;
pub const anon731_badMDBErr: i32 = -60;
pub const anon731_wrPermErr: i32 = -61;
pub const anon731_dirNFErr: i32 = -120;
pub const anon731_tmwdoErr: i32 = -121;
pub const anon731_badMovErr: i32 = -122;
pub const anon731_wrgVolTypErr: i32 = -123;
pub const anon731_volGoneErr: i32 = -124;
pub const anon731_ResolveAliasFileNoUI: i32 = 1;
pub const anon731_ResolveAliasTryFileIDFirst: i32 = 2;

pub const anon961 = i32;
pub const anon961_fidNotFound: i32 = -1300;
pub const anon961_fidExists: i32 = -1301;
pub const anon961_notAFileErr: i32 = -1302;
pub const anon961_diffVolErr: i32 = -1303;
pub const anon961_catChangedErr: i32 = -1304;
pub const anon961_desktopDamagedErr: i32 = -1305;
pub const anon961_sameFileErr: i32 = -1306;
pub const anon961_badFidErr: i32 = -1307;
pub const anon961_notARemountErr: i32 = -1308;
pub const anon961_fileBoundsErr: i32 = -1309;
pub const anon961_fsDataTooBigErr: i32 = -1310;
pub const anon961_volVMBusyErr: i32 = -1311;
pub const anon961_badFCBErr: i32 = -1327;
pub const anon961_errFSUnknownCall: i32 = -1400;
pub const anon961_errFSBadFSRef: i32 = -1401;
pub const anon961_errFSBadForkName: i32 = -1402;
pub const anon961_errFSBadBuffer: i32 = -1403;
pub const anon961_errFSBadForkRef: i32 = -1404;
pub const anon961_errFSBadInfoBitmap: i32 = -1405;
pub const anon961_errFSMissingCatInfo: i32 = -1406;
pub const anon961_errFSNotAFolder: i32 = -1407;
pub const anon961_errFSForkNotFound: i32 = -1409;
pub const anon961_errFSNameTooLong: i32 = -1410;
pub const anon961_errFSMissingName: i32 = -1411;
pub const anon961_errFSBadPosMode: i32 = -1412;
pub const anon961_errFSBadAllocFlags: i32 = -1413;
pub const anon961_errFSNoMoreItems: i32 = -1417;
pub const anon961_errFSBadItemCount: i32 = -1418;
pub const anon961_errFSBadSearchParams: i32 = -1419;
pub const anon961_errFSRefsDifferent: i32 = -1420;
pub const anon961_errFSForkExists: i32 = -1421;
pub const anon961_errFSBadIteratorFlags: i32 = -1422;
pub const anon961_errFSIteratorNotFound: i32 = -1423;
pub const anon961_errFSIteratorNotSupported: i32 = -1424;
pub const anon961_errFSQuotaExceeded: i32 = -1425;
pub const anon961_errFSOperationNotSupported: i32 = -1426;
pub const anon961_errFSAttributeNotFound: i32 = -1427;
pub const anon961_errFSPropertyNotValid: i32 = -1428;
pub const anon961_errFSNotEnoughSpaceForOperation: i32 = -1429;
pub const anon961_envNotPresent: i32 = -5500;
pub const anon961_envBadVers: i32 = -5501;
pub const anon961_envVersTooBig: i32 = -5502;
pub const anon961_fontDecError: i32 = -64;
pub const anon961_fontNotDeclared: i32 = -65;
pub const anon961_fontSubErr: i32 = -66;
pub const anon961_fontNotOutlineErr: i32 = -32615;
pub const anon961_firstDskErr: i32 = -84;
pub const anon961_lastDskErr: i32 = -64;
pub const anon961_noDriveErr: i32 = -64;
pub const anon961_offLinErr: i32 = -65;
pub const anon961_noNybErr: i32 = -66;

pub const anon1501 = i32;
pub const anon1501_noAdrMkErr: i32 = -67;
pub const anon1501_dataVerErr: i32 = -68;
pub const anon1501_badCksmErr: i32 = -69;
pub const anon1501_badBtSlpErr: i32 = -70;
pub const anon1501_noDtaMkErr: i32 = -71;
pub const anon1501_badDCksum: i32 = -72;
pub const anon1501_badDBtSlp: i32 = -73;
pub const anon1501_wrUnderrun: i32 = -74;
pub const anon1501_cantStepErr: i32 = -75;
pub const anon1501_tk0BadErr: i32 = -76;
pub const anon1501_initIWMErr: i32 = -77;
pub const anon1501_twoSideErr: i32 = -78;
pub const anon1501_spdAdjErr: i32 = -79;
pub const anon1501_seekErr: i32 = -80;
pub const anon1501_sectNFErr: i32 = -81;
pub const anon1501_fmt1Err: i32 = -82;
pub const anon1501_fmt2Err: i32 = -83;
pub const anon1501_verErr: i32 = -84;
pub const anon1501_clkRdErr: i32 = -85;
pub const anon1501_clkWrErr: i32 = -86;
pub const anon1501_prWrErr: i32 = -87;
pub const anon1501_prInitErr: i32 = -88;
pub const anon1501_rcvrErr: i32 = -89;
pub const anon1501_breakRecd: i32 = -90;

pub const anon1771 = i32;
pub const anon1771_noScrapErr: i32 = -100;
pub const anon1771_noTypeErr: i32 = -102;

pub const anon1891 = i32;
pub const anon1891_ddpSktErr: i32 = -91;
pub const anon1891_ddpLenErr: i32 = -92;
pub const anon1891_noBridgeErr: i32 = -93;
pub const anon1891_lapProtErr: i32 = -94;
pub const anon1891_excessCollsns: i32 = -95;
pub const anon1891_portNotPwr: i32 = -96;
pub const anon1891_portInUse: i32 = -97;
pub const anon1891_portNotCf: i32 = -98;
pub const anon1891_SelectorsAreNotIndexable: i32 = 0;
pub const anon1891_SelectorsAreIndexable: i32 = 1;
pub const anon1891_CSSM_CSSM_BASE_CSSM_ERROR: i32 = -2147417840;
pub const anon1891_CSSMERR_CSSM_SCOPE_NOT_SUPPORTED: i32 = -2147417839;
pub const anon1891_CSSMERR_CSSM_PVC_ALREADY_CONFIGURED: i32 = -2147417838;
pub const anon1891_CSSMERR_CSSM_INVALID_PVC: i32 = -2147417837;
pub const anon1891_CSSMERR_CSSM_EMM_LOAD_FAILED: i32 = -2147417836;
pub const anon1891_CSSMERR_CSSM_EMM_UNLOAD_FAILED: i32 = -2147417835;
pub const anon1891_CSSMERR_CSSM_ADDIN_LOAD_FAILED: i32 = -2147417834;
pub const anon1891_CSSMERR_CSSM_INVALID_KEY_HIERARCHY: i32 = -2147417833;
pub const anon1891_CSSMERR_CSSM_ADDIN_UNLOAD_FAILED: i32 = -2147417832;
pub const anon1891_CSSMERR_CSSM_LIB_REF_NOT_FOUND: i32 = -2147417831;
pub const anon1891_CSSMERR_CSSM_INVALID_ADDIN_FUNCTION_TABLE: i32 = -2147417830;
pub const anon1891_CSSMERR_CSSM_EMM_AUTHENTICATE_FAILED: i32 = -2147417829;
pub const anon1891_CSSMERR_CSSM_ADDIN_AUTHENTICATE_FAILED: i32 = -2147417828;
pub const anon1891_CSSMERR_CSSM_INVALID_SERVICE_MASK: i32 = -2147417827;
pub const anon1891_CSSMERR_CSSM_MODULE_NOT_LOADED: i32 = -2147417826;
pub const anon1891_CSSMERR_CSSM_INVALID_SUBSERVICEID: i32 = -2147417825;
pub const anon1891_CSSMERR_CSSM_BUFFER_TOO_SMALL: i32 = -2147417824;
pub const anon1891_CSSMERR_CSSM_INVALID_ATTRIBUTE: i32 = -2147417823;
pub const anon1891_CSSMERR_CSSM_ATTRIBUTE_NOT_IN_CONTEXT: i32 = -2147417822;
pub const anon1891_CSSMERR_CSSM_MODULE_MANAGER_INITIALIZE_FAIL: i32 = -2147417821;
pub const anon1891_CSSMERR_CSSM_MODULE_MANAGER_NOT_FOUND: i32 = -2147417820;
pub const anon1891_CSSMERR_CSSM_EVENT_NOTIFICATION_CALLBACK_NOT_FOUND: i32 = -2147417819;

pub const anon2001 = i32;
pub const anon2001_memROZWarn: i32 = -99;
pub const anon2001_memROZError: i32 = -99;
pub const anon2001_memROZErr: i32 = -99;
pub const anon2001_memFullErr: i32 = -108;
pub const anon2001_nilHandleErr: i32 = -109;
pub const anon2001_memWZErr: i32 = -111;
pub const anon2001_memPurErr: i32 = -112;
pub const anon2001_memAdrErr: i32 = -110;
pub const anon2001_memAZErr: i32 = -113;
pub const anon2001_memPCErr: i32 = -114;
pub const anon2001_memBCErr: i32 = -115;
pub const anon2001_memSCErr: i32 = -116;
pub const anon2001_memLockedErr: i32 = -117;
pub const anon2001_NanosecondScale: i32 = 1;
pub const anon2001_MicrosecondScale: i32 = 1000;
pub const anon2001_MillisecondScale: i32 = 1000000;
pub const anon2001_SecondScale: i32 = 1000000000;
pub const anon2001_TickScale: i32 = 10000000;

pub const anon2171 = i32;
pub const anon2171_iMemFullErr: i32 = -108;
pub const anon2171_iIOAbort: i32 = -27;

pub const anon2241 = i32;
pub const anon2241_resourceInMemory: i32 = -188;
pub const anon2241_writingPastEnd: i32 = -189;
pub const anon2241_inputOutOfBounds: i32 = -190;
pub const anon2241_resNotFound: i32 = -192;
pub const anon2241_resFNotFound: i32 = -193;
pub const anon2241_addResFailed: i32 = -194;
pub const anon2241_addRefFailed: i32 = -195;
pub const anon2241_rmvResFailed: i32 = -196;
pub const anon2241_rmvRefFailed: i32 = -197;
pub const anon2241_resAttrErr: i32 = -198;
pub const anon2241_mapReadErr: i32 = -199;
pub const anon2241_CantDecompress: i32 = -186;
pub const anon2241_badExtResource: i32 = -185;
pub const anon2241_noMemForPictPlaybackErr: i32 = -145;
pub const anon2241_rgnOverflowErr: i32 = -147;
pub const anon2241_rgnTooBigError: i32 = -147;
pub const anon2241_pixMapTooDeepErr: i32 = -148;
pub const anon2241_insufficientStackErr: i32 = -149;
pub const anon2241_nsStackErr: i32 = -149;

pub const anon2461 = u32;
pub const anon2461_evtNotEnb: u32 = 1;

pub const anon2511 = i32;
pub const anon2511_cMatchErr: i32 = -150;
pub const anon2511_cTempMemErr: i32 = -151;
pub const anon2511_cNoMemErr: i32 = -152;
pub const anon2511_cRangeErr: i32 = -153;
pub const anon2511_cProtectErr: i32 = -154;
pub const anon2511_cDevErr: i32 = -155;
pub const anon2511_cResErr: i32 = -156;
pub const anon2511_cDepthErr: i32 = -157;
pub const anon2511_rgnTooBigErr: i32 = -500;
pub const anon2511_updPixMemErr: i32 = -125;
pub const anon2511_pictInfoVersionErr: i32 = -11000;
pub const anon2511_pictInfoIDErr: i32 = -11001;
pub const anon2511_pictInfoVerbErr: i32 = -11002;
pub const anon2511_cantLoadPickMethodErr: i32 = -11003;
pub const anon2511_colorsRequestedErr: i32 = -11004;
pub const anon2511_pictureDataErr: i32 = -11005;
pub const anon2511_bHasDirectIO: i32 = 1;
pub const anon2511_SharingPrivsNotApplicableIcon: i32 = 1936223841;
pub const anon2511_SharingPrivsReadOnlyIcon: i32 = 1936224879;
pub const anon2511_SharingPrivsReadWriteIcon: i32 = 1936224887;
pub const anon2511_SharingPrivsUnknownIcon: i32 = 1936225643;
pub const anon2511_SharingPrivsWritableIcon: i32 = 2003986804;

pub const anon2711 = i32;
pub const anon2711_cmProfileError: i32 = -170;
pub const anon2711_cmMethodError: i32 = -171;
pub const anon2711_cmMethodNotFound: i32 = -175;
pub const anon2711_cmProfileNotFound: i32 = -176;
pub const anon2711_cmProfilesIdentical: i32 = -177;
pub const anon2711_cmCantConcatenateError: i32 = -178;
pub const anon2711_cmCantXYZ: i32 = -179;
pub const anon2711_cmCantDeleteProfile: i32 = -180;
pub const anon2711_cmUnsupportedDataType: i32 = -181;
pub const anon2711_cmNoCurrentProfile: i32 = -182;
pub const anon2711_AppearanceFolderIcon: i32 = 1634758770;
pub const anon2711_AppleExtrasFolderIcon: i32 = 1634040004;
pub const anon2711_AppleMenuFolderIcon: i32 = 1634561653;
pub const anon2711_ApplicationsFolderIcon: i32 = 1634758771;
pub const anon2711_ApplicationSupportFolderIcon: i32 = 1634956656;
pub const anon2711_AssistantsFolderIcon: i32 = 1634956484;
pub const anon2711_ColorSyncFolderIcon: i32 = 1886547814;
pub const anon2711_ContextualMenuItemsFolderIcon: i32 = 1668116085;
pub const anon2711_ControlPanelDisabledFolderIcon: i32 = 1668575812;
pub const anon2711_ControlPanelFolderIcon: i32 = 1668575852;
pub const anon2711_ControlStripModulesFolderIcon: i32 = 1935963844;
pub const anon2711_DocumentsFolderIcon: i32 = 1685021555;
pub const anon2711_ExtensionsDisabledFolderIcon: i32 = 1702392900;
pub const anon2711_ExtensionsFolderIcon: i32 = 1702392942;
pub const anon2711_FavoritesFolderIcon: i32 = 1717663347;
pub const anon2711_FontsFolderIcon: i32 = 1718578804;
pub const anon2711_HelpFolderIcon: i32 = -999789456;
pub const anon2711_InternetFolderIcon: i32 = 1768846532;
pub const anon2711_InternetPlugInFolderIcon: i32 = -999398028;
pub const anon2711_InternetSearchSitesFolderIcon: i32 = 1769173862;
pub const anon2711_LocalesFolderIcon: i32 = -999526557;
pub const anon2711_MacOSReadMeFolderIcon: i32 = 1836020420;
pub const anon2711_PublicFolderIcon: i32 = 1886741094;
pub const anon2711_PreferencesFolderIcon: i32 = 1886545604;
pub const anon2711_PrinterDescriptionFolderIcon: i32 = 1886413926;
pub const anon2711_PrinterDriverFolderIcon: i32 = -999263644;
pub const anon2711_PrintMonitorFolderIcon: i32 = 1886547572;
pub const anon2711_RecentApplicationsFolderIcon: i32 = 1918988400;
pub const anon2711_RecentDocumentsFolderIcon: i32 = 1919184739;
pub const anon2711_RecentServersFolderIcon: i32 = 1920168566;
pub const anon2711_ScriptingAdditionsFolderIcon: i32 = -999070862;
pub const anon2711_SharedLibrariesFolderIcon: i32 = -999528094;
pub const anon2711_ScriptsFolderIcon: i32 = 1935897284;
pub const anon2711_ShutdownItemsDisabledFolderIcon: i32 = 1936221252;
pub const anon2711_ShutdownItemsFolderIcon: i32 = 1936221286;
pub const anon2711_SpeakableItemsFolder: i32 = 1936747369;
pub const anon2711_StartupItemsDisabledFolderIcon: i32 = 1937011268;
pub const anon2711_StartupItemsFolderIcon: i32 = 1937011316;
pub const anon2711_SystemExtensionDisabledFolderIcon: i32 = 1835098948;
pub const anon2711_SystemFolderIcon: i32 = 1835098995;
pub const anon2711_TextEncodingsFolderIcon: i32 = -999004808;
pub const anon2711_UsersFolderIcon: i32 = 1970500292;
pub const anon2711_UtilitiesFolderIcon: i32 = 1970563524;
pub const anon2711_VoicesFolderIcon: i32 = 1719037795;
pub const anon2711_LSSharedFileListNoUserInteraction: i32 = 1;
pub const anon2711_LSSharedFileListDoNotMountVolumes: i32 = 2;

pub const anon2861 = i32;
pub const anon2861_noHardware: i32 = -200;
pub const anon2861_notEnoughHardware: i32 = -201;
pub const anon2861_queueFull: i32 = -203;
pub const anon2861_resProblem: i32 = -204;
pub const anon2861_badChannel: i32 = -205;
pub const anon2861_badFormat: i32 = -206;
pub const anon2861_notEnoughBufferSpace: i32 = -207;
pub const anon2861_badFileFormat: i32 = -208;
pub const anon2861_channelBusy: i32 = -209;
pub const anon2861_buffersTooSmall: i32 = -210;
pub const anon2861_channelNotBusy: i32 = -211;
pub const anon2861_noMoreRealTime: i32 = -212;
pub const anon2861_siVBRCompressionNotSupported: i32 = -213;
pub const anon2861_siNoSoundInHardware: i32 = -220;
pub const anon2861_siBadSoundInDevice: i32 = -221;
pub const anon2861_siNoBufferSpecified: i32 = -222;
pub const anon2861_siInvalidCompression: i32 = -223;
pub const anon2861_siHardDriveTooSlow: i32 = -224;
pub const anon2861_siInvalidSampleRate: i32 = -225;
pub const anon2861_siInvalidSampleSize: i32 = -226;
pub const anon2861_siDeviceBusyErr: i32 = -227;
pub const anon2861_siBadDeviceName: i32 = -228;
pub const anon2861_siBadRefNum: i32 = -229;
pub const anon2861_siInputDeviceErr: i32 = -230;
pub const anon2861_siUnknownInfoType: i32 = -231;
pub const anon2861_siUnknownQuality: i32 = -232;
pub const anon2861_SpecialCase: i32 = 15;

pub const anon3171 = i32;
pub const anon3171_noSynthFound: i32 = -240;
pub const anon3171_synthOpenFailed: i32 = -241;
pub const anon3171_synthNotReady: i32 = -242;
pub const anon3171_bufTooSmall: i32 = -243;
pub const anon3171_voiceNotFound: i32 = -244;
pub const anon3171_incompatibleVoice: i32 = -245;
pub const anon3171_badDictFormat: i32 = -246;
pub const anon3171_badInputText: i32 = -247;
pub const anon3171_UCCollateTypeSourceMask: i32 = 255;
pub const anon3171_UCCollateTypeShiftBits: i32 = 24;

pub const anon3451 = i32;
pub const anon3451_nmTypErr: i32 = -299;
pub const anon3451_CSSMERR_CSP_APPLE_ADD_APPLICATION_ACL_SUBJECT: i32 = -2147415040;
pub const anon3451_CSSMERR_CSP_APPLE_PUBLIC_KEY_INCOMPLETE: i32 = -2147415039;
pub const anon3451_CSSMERR_CSP_APPLE_SIGNATURE_MISMATCH: i32 = -2147415038;
pub const anon3451_CSSMERR_CSP_APPLE_INVALID_KEY_START_DATE: i32 = -2147415037;
pub const anon3451_CSSMERR_CSP_APPLE_INVALID_KEY_END_DATE: i32 = -2147415036;
pub const anon3451_CSSMERR_CSPDL_APPLE_DL_CONVERSION_ERROR: i32 = -2147415035;
pub const anon3451_CSSMERR_CSP_APPLE_SSLv2_ROLLBACK: i32 = -2147415034;

pub const anon3501 = u32;
pub const anon3501_siInitSDTblErr: u32 = 1;
pub const anon3501_siInitVBLQsErr: u32 = 2;
pub const anon3501_siInitSPTblErr: u32 = 3;
pub const anon3501_sdmJTInitErr: u32 = 10;
pub const anon3501_sdmInitErr: u32 = 11;
pub const anon3501_sdmSRTInitErr: u32 = 12;
pub const anon3501_sdmPRAMInitErr: u32 = 13;
pub const anon3501_sdmPriInitErr: u32 = 14;
pub const anon3501_UCTSDirectionNext: u32 = 0;
pub const anon3501_UCTSDirectionPrevious: u32 = 1;

pub const anon3761 = i32;
pub const anon3761_smResrvErr: i32 = -307;
pub const anon3761_smUnExBusErr: i32 = -308;
pub const anon3761_smBLFieldBad: i32 = -309;
pub const anon3761_smFHBlockRdErr: i32 = -310;
pub const anon3761_smFHBlkDispErr: i32 = -311;
pub const anon3761_smDisposePErr: i32 = -312;
pub const anon3761_smNoBoardSRsrc: i32 = -313;
pub const anon3761_smGetPRErr: i32 = -314;
pub const anon3761_smNoBoardId: i32 = -315;
pub const anon3761_smInitStatVErr: i32 = -316;
pub const anon3761_smInitTblVErr: i32 = -317;
pub const anon3761_smNoJmpTbl: i32 = -318;
pub const anon3761_smReservedSlot: i32 = -318;
pub const anon3761_smBadBoardId: i32 = -319;
pub const anon3761_smBusErrTO: i32 = -320;
pub const anon3761_svTempDisable: i32 = -32768;
pub const anon3761_svDisabled: i32 = -32640;
pub const anon3761_smBadRefId: i32 = -330;
pub const anon3761_smBadsList: i32 = -331;
pub const anon3761_smReservedErr: i32 = -332;
pub const anon3761_smCodeRevErr: i32 = -333;

pub const anon4011 = i32;
pub const anon4011_smCPUErr: i32 = -334;
pub const anon4011_smsPointerNil: i32 = -335;
pub const anon4011_smNilsBlockErr: i32 = -336;
pub const anon4011_smSlotOOBErr: i32 = -337;
pub const anon4011_smSelOOBErr: i32 = -338;
pub const anon4011_smNewPErr: i32 = -339;
pub const anon4011_smBlkMoveErr: i32 = -340;
pub const anon4011_smCkStatusErr: i32 = -341;
pub const anon4011_smGetDrvrNamErr: i32 = -342;
pub const anon4011_smDisDrvrNamErr: i32 = -343;
pub const anon4011_smNoMoresRsrcs: i32 = -344;
pub const anon4011_smsGetDrvrErr: i32 = -345;
pub const anon4011_smBadsPtrErr: i32 = -346;
pub const anon4011_smByteLanesErr: i32 = -347;
pub const anon4011_smOffsetErr: i32 = -348;
pub const anon4011_smNoGoodOpens: i32 = -349;
pub const anon4011_smSRTOvrFlErr: i32 = -350;
pub const anon4011_smRecNotFnd: i32 = -351;
pub const anon4011_IconServicesNormalUsageFlag: i32 = 0;
pub const anon4011_IconServicesNoBadgeFlag: i32 = 1;
pub const anon4011_IconServicesUpdateIfNeededFlag: i32 = 2;

pub const anon4231 = i32;
pub const anon4231_notBTree: i32 = -410;
pub const anon4231_btNoSpace: i32 = -413;
pub const anon4231_btDupRecErr: i32 = -414;
pub const anon4231_btRecNotFnd: i32 = -415;
pub const anon4231_btKeyLenErr: i32 = -416;
pub const anon4231_btKeyAttrErr: i32 = -417;
pub const anon4231_unknownInsertModeErr: i32 = -20000;
pub const anon4231_recordDataTooBigErr: i32 = -20001;
pub const anon4231_invalidIndexErr: i32 = -20002;

pub const anon4401 = i32;
pub const anon4401_fsmFFSNotFoundErr: i32 = -431;
pub const anon4401_fsmBusyFFSErr: i32 = -432;
pub const anon4401_fsmBadFFSNameErr: i32 = -433;
pub const anon4401_fsmBadFSDLenErr: i32 = -434;
pub const anon4401_fsmDuplicateFSIDErr: i32 = -435;
pub const anon4401_fsmBadFSDVersionErr: i32 = -436;
pub const anon4401_fsmNoAlternateStackErr: i32 = -437;
pub const anon4401_fsmUnknownFSMMessageErr: i32 = -438;

pub const anon4521 = i32;
pub const anon4521_editionMgrInitErr: i32 = -450;
pub const anon4521_badSectionErr: i32 = -451;
pub const anon4521_notRegisteredSectionErr: i32 = -452;
pub const anon4521_badEditionFileErr: i32 = -453;
pub const anon4521_badSubPartErr: i32 = -454;
pub const anon4521_multiplePublisherWrn: i32 = -460;
pub const anon4521_containerNotFoundWrn: i32 = -461;
pub const anon4521_containerAlreadyOpenWrn: i32 = -462;
pub const anon4521_notThePublisherWrn: i32 = -463;
pub const anon4521_ISOLatinHebrewImplicitOrderVariant: i32 = 0;
pub const anon4521_ISOLatinHebrewVisualOrderVariant: i32 = 1;
pub const anon4521_ISOLatinHebrewExplicitOrderVariant: i32 = 2;

pub const anon4651 = i32;
pub const anon4651_teScrapSizeErr: i32 = -501;
pub const anon4651_hwParamErr: i32 = -502;
pub const anon4651_driverHardwareGoneErr: i32 = -503;
pub const anon4651_DOSJapaneseStandardVariant: i32 = 0;
pub const anon4651_DOSJapanesePalmVariant: i32 = 1;

pub const anon4861 = i32;
pub const anon4861_wrongApplicationPlatform: i32 = -875;
pub const anon4861_appVersionTooOld: i32 = -876;
pub const anon4861_notAppropriateForClassic: i32 = -877;

pub const anon4941 = i32;
pub const anon4941_threadTooManyReqsErr: i32 = -617;
pub const anon4941_threadNotFoundErr: i32 = -618;
pub const anon4941_threadProtocolErr: i32 = -619;

pub const anon5051 = i32;
pub const anon5051_notEnoughMemoryErr: i32 = -620;
pub const anon5051_notHeldErr: i32 = -621;
pub const anon5051_cannotMakeContiguousErr: i32 = -622;
pub const anon5051_notLockedErr: i32 = -623;
pub const anon5051_interruptsMaskedErr: i32 = -624;
pub const anon5051_cannotDeferErr: i32 = -625;
pub const anon5051_noMMUErr: i32 = -626;

pub const anon5161 = i32;
pub const anon5161_vmMorePhysicalThanVirtualErr: i32 = -628;
pub const anon5161_vmKernelMMUInitErr: i32 = -629;
pub const anon5161_vmOffErr: i32 = -630;
pub const anon5161_vmMemLckdErr: i32 = -631;
pub const anon5161_vmBadDriver: i32 = -632;
pub const anon5161_vmNoVectorErr: i32 = -633;

pub const anon5261 = i32;
pub const anon5261_vmInvalidBackingFileIDErr: i32 = -640;
pub const anon5261_vmMappingPrivilegesErr: i32 = -641;
pub const anon5261_vmBusyBackingFileErr: i32 = -642;
pub const anon5261_vmNoMoreBackingFilesErr: i32 = -643;
pub const anon5261_vmInvalidFileViewIDErr: i32 = -644;
pub const anon5261_vmFileViewAccessErr: i32 = -645;
pub const anon5261_vmNoMoreFileViewsErr: i32 = -646;
pub const anon5261_vmAddressNotInFileViewErr: i32 = -647;
pub const anon5261_vmInvalidOwningProcessErr: i32 = -648;
pub const anon5261_DeveloperDocsFolderType: i32 = 1684303715;
pub const anon5261_DeveloperHelpFolderType: i32 = 1684371048;
pub const anon5261_DeveloperFolderType: i32 = 1684371046;
pub const anon5261_DeveloperApplicationsFolderType: i32 = 1684107376;

pub const anon5391 = i32;
pub const anon5391_rcDBNull: i32 = -800;
pub const anon5391_rcDBValue: i32 = -801;
pub const anon5391_rcDBError: i32 = -802;
pub const anon5391_rcDBBadType: i32 = -803;
pub const anon5391_rcDBBreak: i32 = -804;
pub const anon5391_rcDBExec: i32 = -805;
pub const anon5391_rcDBBadSessID: i32 = -806;
pub const anon5391_rcDBBadSessNum: i32 = -807;
pub const anon5391_rcDBBadDDEV: i32 = -808;
pub const anon5391_rcDBAsyncNotSupp: i32 = -809;
pub const anon5391_rcDBBadAsyncPB: i32 = -810;
pub const anon5391_rcDBNoHandler: i32 = -811;
pub const anon5391_rcDBWrongVersion: i32 = -812;
pub const anon5391_rcDBPackNotInited: i32 = -813;

pub const anon5581 = i32;
pub const anon5581_hmHelpDisabled: i32 = -850;
pub const anon5581_hmBalloonAborted: i32 = -853;
pub const anon5581_hmSameAsLastBalloon: i32 = -854;
pub const anon5581_hmHelpManagerNotInited: i32 = -855;
pub const anon5581_hmSkippedBalloon: i32 = -857;
pub const anon5581_hmWrongVersion: i32 = -858;
pub const anon5581_hmUnknownHelpType: i32 = -859;
pub const anon5581_hmOperationUnsupported: i32 = -861;
pub const anon5581_hmNoBalloonUp: i32 = -862;
pub const anon5581_hmCloseViewActive: i32 = -863;

pub const anon5731 = i32;
pub const anon5731_notInitErr: i32 = -900;
pub const anon5731_nameTypeErr: i32 = -902;
pub const anon5731_noPortErr: i32 = -903;
pub const anon5731_noGlobalsErr: i32 = -904;
pub const anon5731_localOnlyErr: i32 = -905;
pub const anon5731_destPortErr: i32 = -906;
pub const anon5731_sessTableErr: i32 = -907;
pub const anon5731_noSessionErr: i32 = -908;
pub const anon5731_badReqErr: i32 = -909;
pub const anon5731_portNameExistsErr: i32 = -910;
pub const anon5731_noUserNameErr: i32 = -911;
pub const anon5731_userRejectErr: i32 = -912;
pub const anon5731_noMachineNameErr: i32 = -913;
pub const anon5731_noToolboxNameErr: i32 = -914;
pub const anon5731_noResponseErr: i32 = -915;
pub const anon5731_portClosedErr: i32 = -916;
pub const anon5731_sessClosedErr: i32 = -917;
pub const anon5731_badPortNameErr: i32 = -919;
pub const anon5731_noDefaultUserErr: i32 = -922;
pub const anon5731_notLoggedInErr: i32 = -923;
pub const anon5731_noUserRefErr: i32 = -924;
pub const anon5731_networkErr: i32 = -925;
pub const anon5731_noInformErr: i32 = -926;
pub const anon5731_authFailErr: i32 = -927;
pub const anon5731_noUserRecErr: i32 = -928;
pub const anon5731_badServiceMethodErr: i32 = -930;
pub const anon5731_badLocNameErr: i32 = -931;
pub const anon5731_guestNotAllowedErr: i32 = -932;

pub const anon6081 = i32;
pub const anon6081_FMIterationCompleted: i32 = -980;
pub const anon6081_FMInvalidFontFamilyErr: i32 = -981;
pub const anon6081_FMInvalidFontErr: i32 = -982;
pub const anon6081_FMIterationScopeModifiedErr: i32 = -983;
pub const anon6081_FMFontTableAccessErr: i32 = -984;
pub const anon6081_FMFontContainerAccessErr: i32 = -985;
pub const anon6081_CSSM_APPLEDL_OPEN_PARAMETERS_VERSION: i32 = 1;

pub const anon6171 = i32;
pub const anon6171_noMaskFoundErr: i32 = -1000;

pub const anon6211 = i32;
pub const anon6211_nbpBuffOvr: i32 = -1024;
pub const anon6211_nbpNoConfirm: i32 = -1025;
pub const anon6211_nbpConfDiff: i32 = -1026;
pub const anon6211_nbpDuplicate: i32 = -1027;
pub const anon6211_nbpNotFound: i32 = -1028;
pub const anon6211_nbpNISErr: i32 = -1029;
pub const anon6211_gestaltControlMgrVersion: i32 = 1668118130;

pub const anon6301 = i32;
pub const anon6301_aspBadVersNum: i32 = -1066;
pub const anon6301_aspBufTooSmall: i32 = -1067;
pub const anon6301_aspNoMoreSess: i32 = -1068;
pub const anon6301_aspNoServers: i32 = -1069;
pub const anon6301_aspParamErr: i32 = -1070;
pub const anon6301_aspServerBusy: i32 = -1071;
pub const anon6301_aspSessClosed: i32 = -1072;
pub const anon6301_aspSizeErr: i32 = -1073;
pub const anon6301_aspTooMany: i32 = -1074;
pub const anon6301_aspNoAck: i32 = -1075;

pub const anon6431 = i32;
pub const anon6431_reqFailed: i32 = -1096;
pub const anon6431_tooManyReqs: i32 = -1097;
pub const anon6431_tooManySkts: i32 = -1098;
pub const anon6431_badATPSkt: i32 = -1099;
pub const anon6431_badBuffNum: i32 = -1100;
pub const anon6431_noRelErr: i32 = -1101;
pub const anon6431_cbNotFound: i32 = -1102;
pub const anon6431_noSendResp: i32 = -1103;
pub const anon6431_noDataArea: i32 = -1104;
pub const anon6431_reqAborted: i32 = -1105;

pub const anon6571 = i32;
pub const anon6571_errRefNum: i32 = -1280;
pub const anon6571_errAborted: i32 = -1279;
pub const anon6571_errState: i32 = -1278;
pub const anon6571_errOpening: i32 = -1277;
pub const anon6571_errAttention: i32 = -1276;
pub const anon6571_errFwdReset: i32 = -1275;
pub const anon6571_errDSPQueueSize: i32 = -1274;
pub const anon6571_errOpenDenied: i32 = -1273;

pub const anon6741 = i32;
pub const anon6741_errAECoercionFail: i32 = -1700;
pub const anon6741_errAEDescNotFound: i32 = -1701;
pub const anon6741_errAECorruptData: i32 = -1702;
pub const anon6741_errAEWrongDataType: i32 = -1703;
pub const anon6741_errAENotAEDesc: i32 = -1704;
pub const anon6741_errAEBadListItem: i32 = -1705;
pub const anon6741_errAENewerVersion: i32 = -1706;
pub const anon6741_errAENotAppleEvent: i32 = -1707;
pub const anon6741_errAEEventNotHandled: i32 = -1708;
pub const anon6741_errAEReplyNotValid: i32 = -1709;
pub const anon6741_errAEUnknownSendMode: i32 = -1710;
pub const anon6741_errAEWaitCanceled: i32 = -1711;
pub const anon6741_errAETimeout: i32 = -1712;
pub const anon6741_errAENoUserInteraction: i32 = -1713;
pub const anon6741_errAENotASpecialFunction: i32 = -1714;
pub const anon6741_errAEParamMissed: i32 = -1715;
pub const anon6741_errAEUnknownAddressType: i32 = -1716;
pub const anon6741_errAEHandlerNotFound: i32 = -1717;
pub const anon6741_errAEReplyNotArrived: i32 = -1718;
pub const anon6741_errAEIllegalIndex: i32 = -1719;
pub const anon6741_errAEImpossibleRange: i32 = -1720;
pub const anon6741_errAEWrongNumberArgs: i32 = -1721;
pub const anon6741_errAEAccessorNotFound: i32 = -1723;
pub const anon6741_errAENoSuchLogical: i32 = -1725;
pub const anon6741_errAEBadTestKey: i32 = -1726;
pub const anon6741_errAENotAnObjSpec: i32 = -1727;
pub const anon6741_errAENoSuchObject: i32 = -1728;
pub const anon6741_errAENegativeCount: i32 = -1729;
pub const anon6741_errAEEmptyListContainer: i32 = -1730;
pub const anon6741_errAEUnknownObjectType: i32 = -1731;
pub const anon6741_errAERecordingIsAlreadyOn: i32 = -1732;
pub const anon6741_errAEReceiveTerminate: i32 = -1733;
pub const anon6741_errAEReceiveEscapeCurrent: i32 = -1734;
pub const anon6741_errAEEventFiltered: i32 = -1735;
pub const anon6741_errAEDuplicateHandler: i32 = -1736;
pub const anon6741_errAEStreamBadNesting: i32 = -1737;
pub const anon6741_errAEStreamAlreadyConverted: i32 = -1738;
pub const anon6741_errAEDescIsNull: i32 = -1739;
pub const anon6741_errAEBuildSyntaxError: i32 = -1740;
pub const anon6741_errAEBufferTooSmall: i32 = -1741;

pub const anon7171 = i32;
pub const anon7171_errOSASystemError: i32 = -1750;
pub const anon7171_errOSAInvalidID: i32 = -1751;
pub const anon7171_errOSABadStorageType: i32 = -1752;
pub const anon7171_errOSAScriptError: i32 = -1753;
pub const anon7171_errOSABadSelector: i32 = -1754;
pub const anon7171_errOSASourceNotAvailable: i32 = -1756;
pub const anon7171_errOSANoSuchDialect: i32 = -1757;
pub const anon7171_errOSADataFormatObsolete: i32 = -1758;
pub const anon7171_errOSADataFormatTooNew: i32 = -1759;
pub const anon7171_errOSACorruptData: i32 = -1702;
pub const anon7171_errOSARecordingIsAlreadyOn: i32 = -1732;
pub const anon7171_errOSAComponentMismatch: i32 = -1761;
pub const anon7171_errOSACantOpenComponent: i32 = -1762;
pub const anon7171_errOSACantStorePointers: i32 = -1763;

pub const anon7371 = i32;
pub const anon7371_errOffsetInvalid: i32 = -1800;
pub const anon7371_errOffsetIsOutsideOfView: i32 = -1801;
pub const anon7371_errTopOfDocument: i32 = -1810;
pub const anon7371_errTopOfBody: i32 = -1811;
pub const anon7371_errEndOfDocument: i32 = -1812;
pub const anon7371_errEndOfBody: i32 = -1813;
pub const anon7371_CSSM_KEYBLOB_RAW: i32 = 0;
pub const anon7371_CSSM_KEYBLOB_REFERENCE: i32 = 2;
pub const anon7371_CSSM_KEYBLOB_WRAPPED: i32 = 3;
pub const anon7371_CSSM_KEYBLOB_OTHER: i32 = -1;

pub const anon7471 = i32;
pub const anon7471_badDragRefErr: i32 = -1850;
pub const anon7471_badDragItemErr: i32 = -1851;
pub const anon7471_badDragFlavorErr: i32 = -1852;
pub const anon7471_duplicateFlavorErr: i32 = -1853;
pub const anon7471_cantGetFlavorErr: i32 = -1854;
pub const anon7471_duplicateHandlerErr: i32 = -1855;
pub const anon7471_handlerNotFoundErr: i32 = -1856;
pub const anon7471_dragNotAcceptedErr: i32 = -1857;
pub const anon7471_unsupportedForPlatformErr: i32 = -1858;
pub const anon7471_noSuitableDisplaysErr: i32 = -1859;
pub const anon7471_badImageRgnErr: i32 = -1860;
pub const anon7471_badImageErr: i32 = -1861;
pub const anon7471_nonDragOriginatorErr: i32 = -1862;

pub const anon7661 = i32;
pub const anon7661_couldNotResolveDataRef: i32 = -2000;
pub const anon7661_badImageDescription: i32 = -2001;
pub const anon7661_badPublicMovieAtom: i32 = -2002;
pub const anon7661_cantFindHandler: i32 = -2003;
pub const anon7661_cantOpenHandler: i32 = -2004;
pub const anon7661_badComponentType: i32 = -2005;
pub const anon7661_noMediaHandler: i32 = -2006;
pub const anon7661_noDataHandler: i32 = -2007;
pub const anon7661_invalidMedia: i32 = -2008;
pub const anon7661_invalidTrack: i32 = -2009;
pub const anon7661_invalidMovie: i32 = -2010;
pub const anon7661_invalidSampleTable: i32 = -2011;
pub const anon7661_invalidDataRef: i32 = -2012;
pub const anon7661_invalidHandler: i32 = -2013;
pub const anon7661_invalidDuration: i32 = -2014;
pub const anon7661_invalidTime: i32 = -2015;
pub const anon7661_cantPutPublicMovieAtom: i32 = -2016;
pub const anon7661_badEditList: i32 = -2017;
pub const anon7661_mediaTypesDontMatch: i32 = -2018;
pub const anon7661_progressProcAborted: i32 = -2019;
pub const anon7661_movieToolboxUninitialized: i32 = -2020;
pub const anon7661_noRecordOfApp: i32 = -2020;
pub const anon7661_wfFileNotFound: i32 = -2021;
pub const anon7661_cantCreateSingleForkFile: i32 = -2022;
pub const anon7661_invalidEditState: i32 = -2023;
pub const anon7661_nonMatchingEditState: i32 = -2024;
pub const anon7661_staleEditState: i32 = -2025;
pub const anon7661_userDataItemNotFound: i32 = -2026;
pub const anon7661_maxSizeToGrowTooSmall: i32 = -2027;
pub const anon7661_badTrackIndex: i32 = -2028;
pub const anon7661_trackIDNotFound: i32 = -2029;
pub const anon7661_trackNotInMovie: i32 = -2030;
pub const anon7661_timeNotInTrack: i32 = -2031;
pub const anon7661_timeNotInMedia: i32 = -2032;
pub const anon7661_badEditIndex: i32 = -2033;
pub const anon7661_internalQuickTimeError: i32 = -2034;
pub const anon7661_cantEnableTrack: i32 = -2035;
pub const anon7661_invalidRect: i32 = -2036;
pub const anon7661_invalidSampleNum: i32 = -2037;
pub const anon7661_invalidChunkNum: i32 = -2038;
pub const anon7661_invalidSampleDescIndex: i32 = -2039;
pub const anon7661_invalidChunkCache: i32 = -2040;
pub const anon7661_invalidSampleDescription: i32 = -2041;
pub const anon7661_dataNotOpenForRead: i32 = -2042;
pub const anon7661_dataNotOpenForWrite: i32 = -2043;
pub const anon7661_dataAlreadyOpenForWrite: i32 = -2044;
pub const anon7661_dataAlreadyClosed: i32 = -2045;
pub const anon7661_endOfDataReached: i32 = -2046;
pub const anon7661_dataNoDataRef: i32 = -2047;
pub const anon7661_noMovieFound: i32 = -2048;
pub const anon7661_invalidDataRefContainer: i32 = -2049;
pub const anon7661_badDataRefIndex: i32 = -2050;
pub const anon7661_noDefaultDataRef: i32 = -2051;
pub const anon7661_couldNotUseAnExistingSample: i32 = -2052;
pub const anon7661_featureUnsupported: i32 = -2053;
pub const anon7661_noVideoTrackInMovieErr: i32 = -2054;
pub const anon7661_noSoundTrackInMovieErr: i32 = -2055;
pub const anon7661_soundSupportNotAvailableErr: i32 = -2056;
pub const anon7661_unsupportedAuxiliaryImportData: i32 = -2057;
pub const anon7661_auxiliaryExportDataUnavailable: i32 = -2058;
pub const anon7661_samplesAlreadyInMediaErr: i32 = -2059;
pub const anon7661_noSourceTreeFoundErr: i32 = -2060;
pub const anon7661_sourceNotFoundErr: i32 = -2061;
pub const anon7661_movieTextNotFoundErr: i32 = -2062;
pub const anon7661_missingRequiredParameterErr: i32 = -2063;
pub const anon7661_invalidSpriteWorldPropertyErr: i32 = -2064;
pub const anon7661_invalidSpritePropertyErr: i32 = -2065;
pub const anon7661_gWorldsNotSameDepthAndSizeErr: i32 = -2066;
pub const anon7661_invalidSpriteIndexErr: i32 = -2067;
pub const anon7661_invalidImageIndexErr: i32 = -2068;
pub const anon7661_invalidSpriteIDErr: i32 = -2069;

pub const anon8401 = i32;
pub const anon8401_internalComponentErr: i32 = -2070;
pub const anon8401_notImplementedMusicOSErr: i32 = -2071;
pub const anon8401_cantSendToSynthesizerOSErr: i32 = -2072;
pub const anon8401_cantReceiveFromSynthesizerOSErr: i32 = -2073;
pub const anon8401_illegalVoiceAllocationOSErr: i32 = -2074;
pub const anon8401_illegalPartOSErr: i32 = -2075;
pub const anon8401_illegalChannelOSErr: i32 = -2076;
pub const anon8401_illegalKnobOSErr: i32 = -2077;
pub const anon8401_illegalKnobValueOSErr: i32 = -2078;
pub const anon8401_illegalInstrumentOSErr: i32 = -2079;
pub const anon8401_illegalControllerOSErr: i32 = -2080;
pub const anon8401_midiManagerAbsentOSErr: i32 = -2081;
pub const anon8401_synthesizerNotRespondingOSErr: i32 = -2082;
pub const anon8401_synthesizerOSErr: i32 = -2083;
pub const anon8401_illegalNoteChannelOSErr: i32 = -2084;
pub const anon8401_noteChannelNotAllocatedOSErr: i32 = -2085;
pub const anon8401_tunePlayerFullOSErr: i32 = -2086;
pub const anon8401_tuneParseOSErr: i32 = -2087;
pub const anon8401_noExportProcAvailableErr: i32 = -2089;
pub const anon8401_videoOutputInUseErr: i32 = -2090;

pub const anon8631 = i32;
pub const anon8631_componentDllLoadErr: i32 = -2091;
pub const anon8631_componentDllEntryNotFoundErr: i32 = -2092;
pub const anon8631_qtmlDllLoadErr: i32 = -2093;
pub const anon8631_qtmlDllEntryNotFoundErr: i32 = -2094;
pub const anon8631_qtmlUninitialized: i32 = -2095;
pub const anon8631_unsupportedOSErr: i32 = -2096;
pub const anon8631_unsupportedProcessorErr: i32 = -2097;
pub const anon8631_componentNotThreadSafeErr: i32 = -2098;
pub const anon8631_gestaltFBCIndexingState: i32 = 1717724009;
pub const anon8631_gestaltFBCindexingSafe: i32 = 0;
pub const anon8631_gestaltFBCindexingCritical: i32 = 1;

pub const anon8741 = i32;
pub const anon8741_cannotFindAtomErr: i32 = -2101;
pub const anon8741_notLeafAtomErr: i32 = -2102;
pub const anon8741_atomsNotOfSameTypeErr: i32 = -2103;
pub const anon8741_atomIndexInvalidErr: i32 = -2104;
pub const anon8741_duplicateAtomTypeAndIDErr: i32 = -2105;
pub const anon8741_invalidAtomErr: i32 = -2106;
pub const anon8741_invalidAtomContainerErr: i32 = -2107;
pub const anon8741_invalidAtomTypeErr: i32 = -2108;
pub const anon8741_cannotBeLeafAtomErr: i32 = -2109;
pub const anon8741_pathTooLongErr: i32 = -2110;
pub const anon8741_emptyPathErr: i32 = -2111;
pub const anon8741_noPathMappingErr: i32 = -2112;
pub const anon8741_pathNotVerifiedErr: i32 = -2113;
pub const anon8741_unknownFormatErr: i32 = -2114;
pub const anon8741_wackBadFileErr: i32 = -2115;
pub const anon8741_wackForkNotFoundErr: i32 = -2116;
pub const anon8741_wackBadMetaDataErr: i32 = -2117;
pub const anon8741_qfcbNotFoundErr: i32 = -2118;
pub const anon8741_qfcbNotCreatedErr: i32 = -2119;
pub const anon8741_AAPNotCreatedErr: i32 = -2120;
pub const anon8741_AAPNotFoundErr: i32 = -2121;
pub const anon8741_ASDBadHeaderErr: i32 = -2122;
pub const anon8741_ASDBadForkErr: i32 = -2123;
pub const anon8741_ASDEntryNotFoundErr: i32 = -2124;
pub const anon8741_fileOffsetTooBigErr: i32 = -2125;
pub const anon8741_notAllowedToSaveMovieErr: i32 = -2126;
pub const anon8741_qtNetworkAlreadyAllocatedErr: i32 = -2127;
pub const anon8741_urlDataHHTTPProtocolErr: i32 = -2129;
pub const anon8741_urlDataHHTTPNoNetDriverErr: i32 = -2130;
pub const anon8741_urlDataHHTTPURLErr: i32 = -2131;
pub const anon8741_urlDataHHTTPRedirectErr: i32 = -2132;
pub const anon8741_urlDataHFTPProtocolErr: i32 = -2133;
pub const anon8741_urlDataHFTPShutdownErr: i32 = -2134;
pub const anon8741_urlDataHFTPBadUserErr: i32 = -2135;
pub const anon8741_urlDataHFTPBadPasswordErr: i32 = -2136;
pub const anon8741_urlDataHFTPServerErr: i32 = -2137;
pub const anon8741_urlDataHFTPDataConnectionErr: i32 = -2138;
pub const anon8741_urlDataHFTPNoDirectoryErr: i32 = -2139;
pub const anon8741_urlDataHFTPQuotaErr: i32 = -2140;
pub const anon8741_urlDataHFTPPermissionsErr: i32 = -2141;
pub const anon8741_urlDataHFTPFilenameErr: i32 = -2142;
pub const anon8741_urlDataHFTPNoNetDriverErr: i32 = -2143;
pub const anon8741_urlDataHFTPBadNameListErr: i32 = -2144;
pub const anon8741_urlDataHFTPNeedPasswordErr: i32 = -2145;
pub const anon8741_urlDataHFTPNoPasswordErr: i32 = -2146;
pub const anon8741_urlDataHFTPServerDisconnectedErr: i32 = -2147;
pub const anon8741_urlDataHFTPURLErr: i32 = -2148;
pub const anon8741_notEnoughDataErr: i32 = -2149;
pub const anon8741_qtActionNotHandledErr: i32 = -2157;
pub const anon8741_qtXMLParseErr: i32 = -2158;
pub const anon8741_qtXMLApplicationErr: i32 = -2159;

pub const anon9291 = i32;
pub const anon9291_digiUnimpErr: i32 = -2201;
pub const anon9291_qtParamErr: i32 = -2202;
pub const anon9291_matrixErr: i32 = -2203;
pub const anon9291_notExactMatrixErr: i32 = -2204;
pub const anon9291_noMoreKeyColorsErr: i32 = -2205;
pub const anon9291_notExactSizeErr: i32 = -2206;
pub const anon9291_badDepthErr: i32 = -2207;
pub const anon9291_noDMAErr: i32 = -2208;
pub const anon9291_badCallOrderErr: i32 = -2209;

pub const anon9431 = i32;
pub const anon9431_ernelIncompleteErr: i32 = -2401;
pub const anon9431_ernelCanceledErr: i32 = -2402;
pub const anon9431_ernelOptionsErr: i32 = -2403;
pub const anon9431_ernelPrivilegeErr: i32 = -2404;
pub const anon9431_ernelUnsupportedErr: i32 = -2405;
pub const anon9431_ernelObjectExistsErr: i32 = -2406;
pub const anon9431_ernelWritePermissionErr: i32 = -2407;
pub const anon9431_ernelReadPermissionErr: i32 = -2408;
pub const anon9431_ernelExecutePermissionErr: i32 = -2409;
pub const anon9431_ernelDeletePermissionErr: i32 = -2410;
pub const anon9431_ernelExecutionLevelErr: i32 = -2411;
pub const anon9431_ernelAttributeErr: i32 = -2412;
pub const anon9431_ernelAsyncSendLimitErr: i32 = -2413;
pub const anon9431_ernelAsyncReceiveLimitErr: i32 = -2414;
pub const anon9431_ernelTimeoutErr: i32 = -2415;
pub const anon9431_ernelInUseErr: i32 = -2416;
pub const anon9431_ernelTerminatedErr: i32 = -2417;
pub const anon9431_ernelExceptionErr: i32 = -2418;
pub const anon9431_ernelIDErr: i32 = -2419;
pub const anon9431_ernelAlreadyFreeErr: i32 = -2421;
pub const anon9431_ernelReturnValueErr: i32 = -2422;
pub const anon9431_ernelUnrecoverableErr: i32 = -2499;

pub const anon9701 = i32;
pub const anon9701_tsmComponentNoErr: i32 = 0;
pub const anon9701_tsmUnsupScriptLanguageErr: i32 = -2500;
pub const anon9701_tsmInputMethodNotFoundErr: i32 = -2501;
pub const anon9701_tsmNotAnAppErr: i32 = -2502;
pub const anon9701_tsmAlreadyRegisteredErr: i32 = -2503;
pub const anon9701_tsmNeverRegisteredErr: i32 = -2504;
pub const anon9701_tsmInvalidDocIDErr: i32 = -2505;
pub const anon9701_tsmTSMDocBusyErr: i32 = -2506;
pub const anon9701_tsmDocNotActiveErr: i32 = -2507;
pub const anon9701_tsmNoOpenTSErr: i32 = -2508;
pub const anon9701_tsmCantOpenComponentErr: i32 = -2509;
pub const anon9701_tsmTextServiceNotFoundErr: i32 = -2510;
pub const anon9701_tsmDocumentOpenErr: i32 = -2511;
pub const anon9701_tsmUseInputWindowErr: i32 = -2512;
pub const anon9701_tsmTSHasNoMenuErr: i32 = -2513;
pub const anon9701_tsmTSNotOpenErr: i32 = -2514;
pub const anon9701_tsmComponentAlreadyOpenErr: i32 = -2515;
pub const anon9701_tsmInputMethodIsOldErr: i32 = -2516;
pub const anon9701_tsmScriptHasNoIMErr: i32 = -2517;
pub const anon9701_tsmUnsupportedTypeErr: i32 = -2518;
pub const anon9701_tsmUnknownErr: i32 = -2519;
pub const anon9701_tsmInvalidContext: i32 = -2520;
pub const anon9701_tsmNoHandler: i32 = -2521;
pub const anon9701_tsmNoMoreTokens: i32 = -2522;
pub const anon9701_tsmNoStem: i32 = -2523;
pub const anon9701_tsmDefaultIsNotInputMethodErr: i32 = -2524;
pub const anon9701_tsmDocPropertyNotFoundErr: i32 = -2528;
pub const anon9701_tsmDocPropertyBufferTooSmallErr: i32 = -2529;
pub const anon9701_tsmCantChangeForcedClassStateErr: i32 = -2530;
pub const anon9701_tsmComponentPropertyUnsupportedErr: i32 = -2531;
pub const anon9701_tsmComponentPropertyNotFoundErr: i32 = -2532;
pub const anon9701_tsmInputModeChangeFailedErr: i32 = -2533;

pub const anon10071 = i32;
pub const anon10071_mmInternalError: i32 = -2526;

pub const anon10131 = i32;
pub const anon10131_nrLockedErr: i32 = -2536;
pub const anon10131_nrNotEnoughMemoryErr: i32 = -2537;
pub const anon10131_nrInvalidNodeErr: i32 = -2538;
pub const anon10131_nrNotFoundErr: i32 = -2539;
pub const anon10131_nrNotCreatedErr: i32 = -2540;
pub const anon10131_nrNameErr: i32 = -2541;
pub const anon10131_nrNotSlotDeviceErr: i32 = -2542;
pub const anon10131_nrDataTruncatedErr: i32 = -2543;
pub const anon10131_nrPowerErr: i32 = -2544;
pub const anon10131_nrPowerSwitchAbortErr: i32 = -2545;
pub const anon10131_nrTypeMismatchErr: i32 = -2546;
pub const anon10131_nrNotModifiedErr: i32 = -2547;
pub const anon10131_nrOverrunErr: i32 = -2548;
pub const anon10131_nrResultCodeBase: i32 = -2549;
pub const anon10131_nrPathNotFound: i32 = -2550;
pub const anon10131_nrPathBufferTooSmall: i32 = -2551;
pub const anon10131_nrInvalidEntryIterationOp: i32 = -2552;
pub const anon10131_nrPropertyAlreadyExists: i32 = -2553;
pub const anon10131_nrIterationDone: i32 = -2554;
pub const anon10131_nrExitedIteratorScope: i32 = -2555;
pub const anon10131_nrTransactionAborted: i32 = -2556;
pub const anon10131_nrCallNotSupported: i32 = -2557;

pub const anon10391 = i32;
pub const anon10391_invalidIconRefErr: i32 = -2580;
pub const anon10391_noSuchIconErr: i32 = -2581;
pub const anon10391_noIconDataAvailableErr: i32 = -2582;

pub const anon10521 = i32;
pub const anon10521_errOSACantCoerce: i32 = -1700;
pub const anon10521_errOSACantAccess: i32 = -1728;
pub const anon10521_errOSACantAssign: i32 = -10006;
pub const anon10521_errOSAGeneralError: i32 = -2700;
pub const anon10521_errOSADivideByZero: i32 = -2701;
pub const anon10521_errOSANumericOverflow: i32 = -2702;
pub const anon10521_errOSACantLaunch: i32 = -2703;
pub const anon10521_errOSAAppNotHighLevelEventAware: i32 = -2704;
pub const anon10521_errOSACorruptTerminology: i32 = -2705;
pub const anon10521_errOSAStackOverflow: i32 = -2706;
pub const anon10521_errOSAInternalTableOverflow: i32 = -2707;
pub const anon10521_errOSADataBlockTooLarge: i32 = -2708;
pub const anon10521_errOSACantGetTerminology: i32 = -2709;
pub const anon10521_errOSACantCreate: i32 = -2710;

pub const anon10831 = i32;
pub const anon10831_errOSATypeError: i32 = -1703;
pub const anon10831_OSAMessageNotUnderstood: i32 = -1708;
pub const anon10831_OSAUndefinedHandler: i32 = -1717;
pub const anon10831_OSAIllegalAccess: i32 = -1723;
pub const anon10831_OSAIllegalIndex: i32 = -1719;
pub const anon10831_OSAIllegalRange: i32 = -1720;
pub const anon10831_OSAIllegalAssign: i32 = -10003;
pub const anon10831_OSASyntaxError: i32 = -2740;
pub const anon10831_OSASyntaxTypeError: i32 = -2741;
pub const anon10831_OSATokenTooLong: i32 = -2742;
pub const anon10831_OSAMissingParameter: i32 = -1701;
pub const anon10831_OSAParameterMismatch: i32 = -1721;
pub const anon10831_OSADuplicateParameter: i32 = -2750;
pub const anon10831_OSADuplicateProperty: i32 = -2751;
pub const anon10831_OSADuplicateHandler: i32 = -2752;
pub const anon10831_OSAUndefinedVariable: i32 = -2753;
pub const anon10831_OSAInconsistentDeclarations: i32 = -2754;
pub const anon10831_OSAControlFlowError: i32 = -2755;
pub const anon10831_gestaltPortable2001ANSIKbd: i32 = 202;
pub const anon10831_gestaltPortable2001ISOKbd: i32 = 203;
pub const anon10831_gestaltPortable2001JISKbd: i32 = 207;

pub const anon11241 = i32;
pub const anon11241_errASCantConsiderAndIgnore: i32 = -2720;
pub const anon11241_errASCantCompareMoreThan32k: i32 = -2721;
pub const anon11241_errASTerminologyNestingTooDeep: i32 = -2760;
pub const anon11241_errASIllegalFormalParameter: i32 = -2761;
pub const anon11241_errASParameterNotForEvent: i32 = -2762;
pub const anon11241_errASNoResultReturned: i32 = -2763;
pub const anon11241_errASInconsistentNames: i32 = -2780;

pub const anon11361 = i32;
pub const anon11361_cfragFirstErrCode: i32 = -2800;
pub const anon11361_cfragContextIDErr: i32 = -2800;
pub const anon11361_cfragConnectionIDErr: i32 = -2801;
pub const anon11361_cfragNoSymbolErr: i32 = -2802;
pub const anon11361_cfragNoSectionErr: i32 = -2803;
pub const anon11361_cfragNoLibraryErr: i32 = -2804;
pub const anon11361_cfragDupRegistrationErr: i32 = -2805;
pub const anon11361_cfragFragmentFormatErr: i32 = -2806;
pub const anon11361_cfragUnresolvedErr: i32 = -2807;
pub const anon11361_cfragNoPositionErr: i32 = -2808;
pub const anon11361_cfragNoPrivateMemErr: i32 = -2809;
pub const anon11361_cfragNoClientMemErr: i32 = -2810;
pub const anon11361_cfragNoIDsErr: i32 = -2811;
pub const anon11361_cfragInitOrderErr: i32 = -2812;
pub const anon11361_cfragImportTooOldErr: i32 = -2813;
pub const anon11361_cfragImportTooNewErr: i32 = -2814;
pub const anon11361_cfragInitLoopErr: i32 = -2815;
pub const anon11361_cfragInitAtBootErr: i32 = -2816;
pub const anon11361_cfragLibConnErr: i32 = -2817;
pub const anon11361_cfragCFMStartupErr: i32 = -2818;
pub const anon11361_cfragCFMInternalErr: i32 = -2819;
pub const anon11361_cfragFragmentCorruptErr: i32 = -2820;
pub const anon11361_cfragInitFunctionErr: i32 = -2821;
pub const anon11361_cfragNoApplicationErr: i32 = -2822;
pub const anon11361_cfragArchitectureErr: i32 = -2823;
pub const anon11361_cfragFragmentUsageErr: i32 = -2824;
pub const anon11361_cfragFileSizeErr: i32 = -2825;
pub const anon11361_cfragNotClosureErr: i32 = -2826;
pub const anon11361_cfragNoRegistrationErr: i32 = -2827;
pub const anon11361_cfragContainerIDErr: i32 = -2828;
pub const anon11361_cfragClosureIDErr: i32 = -2829;
pub const anon11361_cfragAbortClosureErr: i32 = -2830;
pub const anon11361_cfragOutputLengthErr: i32 = -2831;
pub const anon11361_cfragMapFileErr: i32 = -2851;
pub const anon11361_cfragExecFileRefErr: i32 = -2854;
pub const anon11361_cfragStdFolderErr: i32 = -2855;
pub const anon11361_cfragRsrcForkErr: i32 = -2856;
pub const anon11361_cfragCFragRsrcErr: i32 = -2857;
pub const anon11361_cfragLastErrCode: i32 = -2899;

pub const anon11781 = i32;
pub const anon11781_cfragFirstReservedCode: i32 = -2897;
pub const anon11781_cfragReservedCode_3: i32 = -2897;
pub const anon11781_cfragReservedCode_2: i32 = -2898;
pub const anon11781_cfragReservedCode_1: i32 = -2899;

pub const anon12191 = i32;
pub const anon12191_invalidComponentID: i32 = -3000;
pub const anon12191_validInstancesExist: i32 = -3001;
pub const anon12191_componentNotCaptured: i32 = -3002;
pub const anon12191_componentDontRegister: i32 = -3003;
pub const anon12191_unresolvedComponentDLLErr: i32 = -3004;
pub const anon12191_retryComponentRegistrationErr: i32 = -3005;

pub const anon12291 = i32;
pub const anon12291_invalidTranslationPathErr: i32 = -3025;
pub const anon12291_couldNotParseSourceFileErr: i32 = -3026;
pub const anon12291_noTranslationPathErr: i32 = -3030;
pub const anon12291_badTranslationSpecErr: i32 = -3031;
pub const anon12291_noPrefAppErr: i32 = -3032;

pub const anon12371 = i32;
pub const anon12371_buf2SmallErr: i32 = -3101;
pub const anon12371_noMPPErr: i32 = -3102;
pub const anon12371_ckSumErr: i32 = -3103;
pub const anon12371_extractErr: i32 = -3104;
pub const anon12371_readQErr: i32 = -3105;
pub const anon12371_atpLenErr: i32 = -3106;
pub const anon12371_atpBadRsp: i32 = -3107;
pub const anon12371_recNotFnd: i32 = -3108;
pub const anon12371_sktClosedErr: i32 = -3109;

pub const anon12511 = i32;
pub const anon12511_OTNoError: i32 = 0;
pub const anon12511_OTOutOfMemoryErr: i32 = -3211;
pub const anon12511_OTNotFoundErr: i32 = -3201;
pub const anon12511_OTDuplicateFoundErr: i32 = -3216;
pub const anon12511_OTBadAddressErr: i32 = -3150;
pub const anon12511_OTBadOptionErr: i32 = -3151;
pub const anon12511_OTAccessErr: i32 = -3152;
pub const anon12511_OTBadReferenceErr: i32 = -3153;
pub const anon12511_OTNoAddressErr: i32 = -3154;
pub const anon12511_OTOutStateErr: i32 = -3155;
pub const anon12511_OTBadSequenceErr: i32 = -3156;
pub const anon12511_OTSysErrorErr: i32 = -3157;
pub const anon12511_OTLookErr: i32 = -3158;
pub const anon12511_OTBadDataErr: i32 = -3159;
pub const anon12511_OTBufferOverflowErr: i32 = -3160;
pub const anon12511_OTFlowErr: i32 = -3161;
pub const anon12511_OTNoDataErr: i32 = -3162;
pub const anon12511_OTNoDisconnectErr: i32 = -3163;
pub const anon12511_OTNoUDErrErr: i32 = -3164;
pub const anon12511_OTBadFlagErr: i32 = -3165;
pub const anon12511_OTNoReleaseErr: i32 = -3166;
pub const anon12511_OTNotSupportedErr: i32 = -3167;
pub const anon12511_OTStateChangeErr: i32 = -3168;
pub const anon12511_OTNoStructureTypeErr: i32 = -3169;
pub const anon12511_OTBadNameErr: i32 = -3170;
pub const anon12511_OTBadQLenErr: i32 = -3171;
pub const anon12511_OTAddressBusyErr: i32 = -3172;
pub const anon12511_OTIndOutErr: i32 = -3173;
pub const anon12511_OTProviderMismatchErr: i32 = -3174;
pub const anon12511_OTResQLenErr: i32 = -3175;
pub const anon12511_OTResAddressErr: i32 = -3176;
pub const anon12511_OTQFullErr: i32 = -3177;
pub const anon12511_OTProtocolErr: i32 = -3178;
pub const anon12511_OTBadSyncErr: i32 = -3179;
pub const anon12511_OTCanceledErr: i32 = -3180;
pub const anon12511_EPERMErr: i32 = -3200;
pub const anon12511_ENOENTErr: i32 = -3201;
pub const anon12511_ENORSRCErr: i32 = -3202;
pub const anon12511_EINTRErr: i32 = -3203;
pub const anon12511_EIOErr: i32 = -3204;
pub const anon12511_ENXIOErr: i32 = -3205;
pub const anon12511_EBADFErr: i32 = -3208;
pub const anon12511_EAGAINErr: i32 = -3210;
pub const anon12511_ENOMEMErr: i32 = -3211;
pub const anon12511_EACCESErr: i32 = -3212;
pub const anon12511_EFAULTErr: i32 = -3213;
pub const anon12511_EBUSYErr: i32 = -3215;
pub const anon12511_EEXISTErr: i32 = -3216;
pub const anon12511_ENODEVErr: i32 = -3218;
pub const anon12511_EINVALErr: i32 = -3221;
pub const anon12511_ENOTTYErr: i32 = -3224;
pub const anon12511_EPIPEErr: i32 = -3231;
pub const anon12511_ERANGEErr: i32 = -3233;
pub const anon12511_EWOULDBLOCKErr: i32 = -3234;
pub const anon12511_EDEADLKErr: i32 = -3234;
pub const anon12511_EALREADYErr: i32 = -3236;
pub const anon12511_ENOTSOCKErr: i32 = -3237;
pub const anon12511_EDESTADDRREQErr: i32 = -3238;
pub const anon12511_EMSGSIZEErr: i32 = -3239;
pub const anon12511_EPROTOTYPEErr: i32 = -3240;
pub const anon12511_ENOPROTOOPTErr: i32 = -3241;
pub const anon12511_EPROTONOSUPPORTErr: i32 = -3242;
pub const anon12511_ESOCKTNOSUPPORTErr: i32 = -3243;
pub const anon12511_EOPNOTSUPPErr: i32 = -3244;
pub const anon12511_EADDRINUSEErr: i32 = -3247;
pub const anon12511_EADDRNOTAVAILErr: i32 = -3248;
pub const anon12511_ENETDOWNErr: i32 = -3249;
pub const anon12511_ENETUNREACHErr: i32 = -3250;
pub const anon12511_ENETRESETErr: i32 = -3251;
pub const anon12511_ECONNABORTEDErr: i32 = -3252;
pub const anon12511_ECONNRESETErr: i32 = -3253;
pub const anon12511_ENOBUFSErr: i32 = -3254;
pub const anon12511_EISCONNErr: i32 = -3255;
pub const anon12511_ENOTCONNErr: i32 = -3256;
pub const anon12511_ESHUTDOWNErr: i32 = -3257;
pub const anon12511_ETOOMANYREFSErr: i32 = -3258;
pub const anon12511_ETIMEDOUTErr: i32 = -3259;
pub const anon12511_ECONNREFUSEDErr: i32 = -3260;
pub const anon12511_EHOSTDOWNErr: i32 = -3263;
pub const anon12511_EHOSTUNREACHErr: i32 = -3264;
pub const anon12511_EPROTOErr: i32 = -3269;
pub const anon12511_ETIMEErr: i32 = -3270;
pub const anon12511_ENOSRErr: i32 = -3271;
pub const anon12511_EBADMSGErr: i32 = -3272;
pub const anon12511_ECANCELErr: i32 = -3273;
pub const anon12511_ENOSTRErr: i32 = -3274;
pub const anon12511_ENODATAErr: i32 = -3275;
pub const anon12511_EINPROGRESSErr: i32 = -3276;
pub const anon12511_ESRCHErr: i32 = -3277;
pub const anon12511_ENOMSGErr: i32 = -3278;
pub const anon12511_OTClientNotInittedErr: i32 = -3279;
pub const anon12511_OTPortHasDiedErr: i32 = -3280;
pub const anon12511_OTPortWasEjectedErr: i32 = -3281;
pub const anon12511_OTBadConfigurationErr: i32 = -3282;
pub const anon12511_OTConfigurationChangedErr: i32 = -3283;
pub const anon12511_OTUserRequestedErr: i32 = -3284;
pub const anon12511_OTPortLostConnection: i32 = -3285;

pub const anon13531 = i32;
pub const anon13531_QDNoPalette: i32 = -3950;
pub const anon13531_QDNoColorHWCursorSupport: i32 = -3951;
pub const anon13531_QDCursorAlreadyRegistered: i32 = -3952;
pub const anon13531_QDCursorNotRegistered: i32 = -3953;
pub const anon13531_QDCorruptPICTDataErr: i32 = -3954;

pub const anon13641 = i32;
pub const anon13641_firstPickerError: i32 = -4000;
pub const anon13641_invalidPickerType: i32 = -4000;
pub const anon13641_requiredFlagsDontMatch: i32 = -4001;
pub const anon13641_pickerResourceError: i32 = -4002;
pub const anon13641_cantLoadPicker: i32 = -4003;
pub const anon13641_cantCreatePickerWindow: i32 = -4004;
pub const anon13641_cantLoadPackage: i32 = -4005;
pub const anon13641_pickerCantLive: i32 = -4006;
pub const anon13641_colorSyncNotInstalled: i32 = -4007;
pub const anon13641_badProfileError: i32 = -4008;
pub const anon13641_noHelpForItem: i32 = -4009;

pub const anon13811 = i32;
pub const anon13811_NSL68kContextNotSupported: i32 = -4170;
pub const anon13811_NSLSchedulerError: i32 = -4171;
pub const anon13811_NSLBadURLSyntax: i32 = -4172;
pub const anon13811_NSLNoCarbonLib: i32 = -4173;
pub const anon13811_NSLUILibraryNotAvailable: i32 = -4174;
pub const anon13811_NSLNotImplementedYet: i32 = -4175;
pub const anon13811_NSLErrNullPtrError: i32 = -4176;
pub const anon13811_NSLSomePluginsFailedToLoad: i32 = -4177;
pub const anon13811_NSLNullNeighborhoodPtr: i32 = -4178;
pub const anon13811_NSLNoPluginsForSearch: i32 = -4179;
pub const anon13811_NSLSearchAlreadyInProgress: i32 = -4180;
pub const anon13811_NSLNoPluginsFound: i32 = -4181;
pub const anon13811_NSLPluginLoadFailed: i32 = -4182;
pub const anon13811_NSLBadProtocolTypeErr: i32 = -4183;
pub const anon13811_NSLNullListPtr: i32 = -4184;
pub const anon13811_NSLBadClientInfoPtr: i32 = -4185;
pub const anon13811_NSLCannotContinueLookup: i32 = -4186;
pub const anon13811_NSLBufferTooSmallForData: i32 = -4187;
pub const anon13811_NSLNoContextAvailable: i32 = -4188;
pub const anon13811_NSLRequestBufferAlreadyInList: i32 = -4189;
pub const anon13811_NSLInvalidPluginSpec: i32 = -4190;
pub const anon13811_NSLNoSupportForService: i32 = -4191;
pub const anon13811_NSLBadNetConnection: i32 = -4192;
pub const anon13811_NSLBadDataTypeErr: i32 = -4193;
pub const anon13811_NSLBadServiceTypeErr: i32 = -4194;
pub const anon13811_NSLBadReferenceErr: i32 = -4195;
pub const anon13811_NSLNoElementsInList: i32 = -4196;
pub const anon13811_NSLInsufficientOTVer: i32 = -4197;
pub const anon13811_NSLInsufficientSysVer: i32 = -4198;
pub const anon13811_NSLNotInitialized: i32 = -4199;
pub const anon13811_NSLInitializationFailed: i32 = -4200;

pub const anon14181 = i32;
pub const anon14181_DTPHoldJobErr: i32 = -4200;
pub const anon14181_DTPStopQueueErr: i32 = -4201;
pub const anon14181_DTPTryAgainErr: i32 = -4202;
pub const anon14181_DTPAbortJobErr: i32 = 128;

pub const anon14271 = i32;
pub const anon14271_cmElementTagNotFound: i32 = -4200;
pub const anon14271_cmIndexRangeErr: i32 = -4201;
pub const anon14271_cmCantDeleteElement: i32 = -4202;
pub const anon14271_cmFatalProfileErr: i32 = -4203;
pub const anon14271_cmInvalidProfile: i32 = -4204;
pub const anon14271_cmInvalidProfileLocation: i32 = -4205;
pub const anon14271_cmCantCopyModifiedV1Profile: i32 = -4215;
pub const anon14271_cmInvalidSearch: i32 = -4206;
pub const anon14271_cmSearchError: i32 = -4207;
pub const anon14271_cmErrIncompatibleProfile: i32 = -4208;
pub const anon14271_cmInvalidColorSpace: i32 = -4209;
pub const anon14271_cmInvalidSrcMap: i32 = -4210;
pub const anon14271_cmInvalidDstMap: i32 = -4211;
pub const anon14271_cmNoGDevicesError: i32 = -4212;
pub const anon14271_cmInvalidProfileComment: i32 = -4213;
pub const anon14271_cmRangeOverFlow: i32 = -4214;
pub const anon14271_cmNamedColorNotFound: i32 = -4216;
pub const anon14271_cmCantGamutCheckError: i32 = -4217;
pub const anon14271_MPLowLevelDebugger: i32 = 0;
pub const anon14271_MPMidLevelDebugger: i32 = 268435456;
pub const anon14271_MPHighLevelDebugger: i32 = 536870912;

pub const anon14511 = i32;
pub const anon14511_badFolderDescErr: i32 = -4270;
pub const anon14511_duplicateFolderDescErr: i32 = -4271;
pub const anon14511_noMoreFolderDescErr: i32 = -4272;
pub const anon14511_invalidFolderTypeErr: i32 = -4273;
pub const anon14511_duplicateRoutingErr: i32 = -4274;
pub const anon14511_routingNotFoundErr: i32 = -4275;
pub const anon14511_badRoutingSizeErr: i32 = -4276;

pub const anon14631 = i32;
pub const anon14631_coreFoundationUnknownErr: i32 = -4960;

pub const anon14681 = i32;
pub const anon14681_errCoreEndianDataTooShortForFormat: i32 = -4940;
pub const anon14681_errCoreEndianDataTooLongForFormat: i32 = -4941;
pub const anon14681_errCoreEndianDataDoesNotMatchFormat: i32 = -4942;

pub const anon14761 = i32;
pub const anon14761_internalScrapErr: i32 = -4988;
pub const anon14761_duplicateScrapFlavorErr: i32 = -4989;
pub const anon14761_badScrapRefErr: i32 = -4990;
pub const anon14761_processStateIncorrectErr: i32 = -4991;
pub const anon14761_scrapPromiseNotKeptErr: i32 = -4992;
pub const anon14761_noScrapPromiseKeeperErr: i32 = -4993;
pub const anon14761_nilScrapFlavorDataErr: i32 = -4994;
pub const anon14761_scrapFlavorFlagsMismatchErr: i32 = -4995;
pub const anon14761_scrapFlavorSizeMismatchErr: i32 = -4996;
pub const anon14761_illegalScrapFlavorFlagsErr: i32 = -4997;
pub const anon14761_illegalScrapFlavorTypeErr: i32 = -4998;
pub const anon14761_illegalScrapFlavorSizeErr: i32 = -4999;
pub const anon14761_scrapFlavorNotFoundErr: i32 = -102;
pub const anon14761_needClearScrapErr: i32 = -100;
pub const anon14761_CSSM_ESTIMATED_TIME_UNKNOWN: i32 = -1;

pub const anon14941 = i32;
pub const anon14941_afpAccessDenied: i32 = -5000;
pub const anon14941_afpAuthContinue: i32 = -5001;
pub const anon14941_afpBadUAM: i32 = -5002;
pub const anon14941_afpBadVersNum: i32 = -5003;
pub const anon14941_afpBitmapErr: i32 = -5004;
pub const anon14941_afpCantMove: i32 = -5005;
pub const anon14941_afpDenyConflict: i32 = -5006;
pub const anon14941_afpDirNotEmpty: i32 = -5007;
pub const anon14941_afpDiskFull: i32 = -5008;
pub const anon14941_afpEofError: i32 = -5009;
pub const anon14941_afpFileBusy: i32 = -5010;
pub const anon14941_afpFlatVol: i32 = -5011;
pub const anon14941_afpItemNotFound: i32 = -5012;
pub const anon14941_afpLockErr: i32 = -5013;
pub const anon14941_afpMiscErr: i32 = -5014;
pub const anon14941_afpNoMoreLocks: i32 = -5015;
pub const anon14941_afpNoServer: i32 = -5016;
pub const anon14941_afpObjectExists: i32 = -5017;
pub const anon14941_afpObjectNotFound: i32 = -5018;
pub const anon14941_afpParmErr: i32 = -5019;
pub const anon14941_afpRangeNotLocked: i32 = -5020;
pub const anon14941_afpRangeOverlap: i32 = -5021;
pub const anon14941_afpSessClosed: i32 = -5022;
pub const anon14941_afpUserNotAuth: i32 = -5023;
pub const anon14941_afpCallNotSupported: i32 = -5024;
pub const anon14941_afpObjectTypeErr: i32 = -5025;
pub const anon14941_afpTooManyFilesOpen: i32 = -5026;
pub const anon14941_afpServerGoingDown: i32 = -5027;
pub const anon14941_afpCantRename: i32 = -5028;
pub const anon14941_afpDirNotFound: i32 = -5029;
pub const anon14941_afpIconTypeError: i32 = -5030;
pub const anon14941_afpVolLocked: i32 = -5031;
pub const anon14941_afpObjectLocked: i32 = -5032;
pub const anon14941_afpContainsSharedErr: i32 = -5033;
pub const anon14941_afpIDNotFound: i32 = -5034;
pub const anon14941_afpIDExists: i32 = -5035;
pub const anon14941_afpDiffVolErr: i32 = -5036;
pub const anon14941_afpCatalogChanged: i32 = -5037;
pub const anon14941_afpSameObjectErr: i32 = -5038;
pub const anon14941_afpBadIDErr: i32 = -5039;
pub const anon14941_afpPwdSameErr: i32 = -5040;
pub const anon14941_afpPwdTooShortErr: i32 = -5041;
pub const anon14941_afpPwdExpiredErr: i32 = -5042;
pub const anon14941_afpInsideSharedErr: i32 = -5043;
pub const anon14941_afpInsideTrashErr: i32 = -5044;
pub const anon14941_afpPwdNeedsChangeErr: i32 = -5045;
pub const anon14941_afpPwdPolicyErr: i32 = -5046;
pub const anon14941_afpAlreadyLoggedInErr: i32 = -5047;
pub const anon14941_afpCallNotAllowed: i32 = -5048;

pub const anon15491 = i32;
pub const anon15491_afpBadDirIDType: i32 = -5060;
pub const anon15491_afpCantMountMoreSrvre: i32 = -5061;
pub const anon15491_afpAlreadyMounted: i32 = -5062;
pub const anon15491_afpSameNodeErr: i32 = -5063;

pub const anon15621 = i32;
pub const anon15621_numberFormattingNotANumberErr: i32 = -5200;
pub const anon15621_numberFormattingOverflowInDestinationErr: i32 = -5201;
pub const anon15621_numberFormattingBadNumberFormattingObjectErr: i32 = -5202;
pub const anon15621_numberFormattingSpuriousCharErr: i32 = -5203;
pub const anon15621_numberFormattingLiteralMissingErr: i32 = -5204;
pub const anon15621_numberFormattingDelimiterMissingErr: i32 = -5205;
pub const anon15621_numberFormattingEmptyFormatErr: i32 = -5206;
pub const anon15621_numberFormattingBadFormatErr: i32 = -5207;
pub const anon15621_numberFormattingBadOptionsErr: i32 = -5208;
pub const anon15621_numberFormattingBadTokenErr: i32 = -5209;
pub const anon15621_numberFormattingUnOrderedCurrencyRangeErr: i32 = -5210;
pub const anon15621_numberFormattingBadCurrencyPositionErr: i32 = -5211;
pub const anon15621_numberFormattingNotADigitErr: i32 = -5212;
pub const anon15621_numberFormattingUnOrdredCurrencyRangeErr: i32 = -5210;
pub const anon15621_numberFortmattingNotADigitErr: i32 = -5212;

pub const anon15811 = i32;
pub const anon15811_textParserBadParamErr: i32 = -5220;
pub const anon15811_textParserObjectNotFoundErr: i32 = -5221;
pub const anon15811_textParserBadTokenValueErr: i32 = -5222;
pub const anon15811_textParserBadParserObjectErr: i32 = -5223;
pub const anon15811_textParserParamErr: i32 = -5224;
pub const anon15811_textParserNoMoreTextErr: i32 = -5225;
pub const anon15811_textParserBadTextLanguageErr: i32 = -5226;
pub const anon15811_textParserBadTextEncodingErr: i32 = -5227;
pub const anon15811_textParserNoSuchTokenFoundErr: i32 = -5228;
pub const anon15811_textParserNoMoreTokensErr: i32 = -5229;

pub const anon15941 = i32;
pub const anon15941_errUnknownAttributeTag: i32 = -5240;
pub const anon15941_errMarginWilllNotFit: i32 = -5241;
pub const anon15941_errNotInImagingMode: i32 = -5242;
pub const anon15941_errAlreadyInImagingMode: i32 = -5243;
pub const anon15941_errEngineNotFound: i32 = -5244;
pub const anon15941_errIteratorReachedEnd: i32 = -5245;
pub const anon15941_errInvalidRange: i32 = -5246;
pub const anon15941_errOffsetNotOnElementBounday: i32 = -5247;
pub const anon15941_errNoHiliteText: i32 = -5248;
pub const anon15941_errEmptyScrap: i32 = -5249;
pub const anon15941_errReadOnlyText: i32 = -5250;
pub const anon15941_errUnknownElement: i32 = -5251;
pub const anon15941_errNonContiuousAttribute: i32 = -5252;
pub const anon15941_errCannotUndo: i32 = -5253;

pub const anon16131 = i32;
pub const anon16131_hrHTMLRenderingLibNotInstalledErr: i32 = -5360;
pub const anon16131_hrMiscellaneousExceptionErr: i32 = -5361;
pub const anon16131_hrUnableToResizeHandleErr: i32 = -5362;
pub const anon16131_hrURLNotHandledErr: i32 = -5363;
pub const anon16131_gestaltProcClkSpeed: i32 = 1885564011;

pub const anon16221 = i32;
pub const anon16221_errIANoErr: i32 = 0;
pub const anon16221_errIAUnknownErr: i32 = -5380;
pub const anon16221_errIAAllocationErr: i32 = -5381;
pub const anon16221_errIAParamErr: i32 = -5382;
pub const anon16221_errIANoMoreItems: i32 = -5383;
pub const anon16221_errIABufferTooSmall: i32 = -5384;
pub const anon16221_errIACanceled: i32 = -5385;
pub const anon16221_errIAInvalidDocument: i32 = -5386;
pub const anon16221_errIATextExtractionErr: i32 = -5387;
pub const anon16221_errIAEndOfTextRun: i32 = -5388;
pub const anon16221_CSSM_TP_CERTVERIFY_UNKNOWN: i32 = 0;
pub const anon16221_CSSM_TP_CERTVERIFY_VALID: i32 = 1;
pub const anon16221_CSSM_TP_CERTVERIFY_INVALID: i32 = 2;
pub const anon16221_CSSM_TP_CERTVERIFY_REVOKED: i32 = 3;
pub const anon16221_CSSM_TP_CERTVERIFY_SUSPENDED: i32 = 4;
pub const anon16221_CSSM_TP_CERTVERIFY_EXPIRED: i32 = 5;
pub const anon16221_CSSM_TP_CERTVERIFY_NOT_VALID_YET: i32 = 6;
pub const anon16221_CSSM_TP_CERTVERIFY_INVALID_AUTHORITY: i32 = 7;
pub const anon16221_CSSM_TP_CERTVERIFY_INVALID_SIGNATURE: i32 = 8;
pub const anon16221_CSSM_TP_CERTVERIFY_INVALID_CERT_VALUE: i32 = 9;
pub const anon16221_CSSM_TP_CERTVERIFY_INVALID_CERTGROUP: i32 = 10;
pub const anon16221_CSSM_TP_CERTVERIFY_INVALID_POLICY: i32 = 11;
pub const anon16221_CSSM_TP_CERTVERIFY_INVALID_POLICY_IDS: i32 = 12;
pub const anon16221_CSSM_TP_CERTVERIFY_INVALID_BASIC_CONSTRAINTS: i32 = 13;
pub const anon16221_CSSM_TP_CERTVERIFY_INVALID_CRL_DIST_PT: i32 = 14;
pub const anon16221_CSSM_TP_CERTVERIFY_INVALID_NAME_TREE: i32 = 15;
pub const anon16221_CSSM_TP_CERTVERIFY_UNKNOWN_CRITICAL_EXT: i32 = 16;

pub const anon16371 = i32;
pub const anon16371_qtsBadSelectorErr: i32 = -5400;
pub const anon16371_qtsBadStateErr: i32 = -5401;
pub const anon16371_qtsBadDataErr: i32 = -5402;
pub const anon16371_qtsUnsupportedDataTypeErr: i32 = -5403;
pub const anon16371_qtsUnsupportedRateErr: i32 = -5404;
pub const anon16371_qtsUnsupportedFeatureErr: i32 = -5405;
pub const anon16371_qtsTooMuchDataErr: i32 = -5406;
pub const anon16371_qtsUnknownValueErr: i32 = -5407;
pub const anon16371_qtsTimeoutErr: i32 = -5408;
pub const anon16371_qtsConnectionFailedErr: i32 = -5420;
pub const anon16371_qtsAddressBusyErr: i32 = -5421;

pub const anon16521 = i32;
pub const anon16521_gestaltUnknownErr: i32 = -5550;
pub const anon16521_gestaltUndefSelectorErr: i32 = -5551;
pub const anon16521_gestaltDupSelectorErr: i32 = -5552;
pub const anon16521_gestaltLocationErr: i32 = -5553;
pub const anon16521_gestaltPopupAttr: i32 = 1886351393;
pub const anon16521_gestaltPopupPresent: i32 = 0;

pub const anon16621 = i32;
pub const anon16621_menuPropertyInvalidErr: i32 = -5603;
pub const anon16621_menuPropertyInvalid: i32 = -5603;
pub const anon16621_menuPropertyNotFoundErr: i32 = -5604;
pub const anon16621_menuNotFoundErr: i32 = -5620;
pub const anon16621_menuUsesSystemDefErr: i32 = -5621;
pub const anon16621_menuItemNotFoundErr: i32 = -5622;
pub const anon16621_menuInvalidErr: i32 = -5623;

pub const anon16741 = i32;
pub const anon16741_errInvalidWindowPtr: i32 = -5600;
pub const anon16741_errInvalidWindowRef: i32 = -5600;
pub const anon16741_errUnsupportedWindowAttributesForClass: i32 = -5601;
pub const anon16741_errWindowDoesNotHaveProxy: i32 = -5602;
pub const anon16741_errInvalidWindowProperty: i32 = -5603;
pub const anon16741_errWindowPropertyNotFound: i32 = -5604;
pub const anon16741_errUnrecognizedWindowClass: i32 = -5605;
pub const anon16741_errCorruptWindowDescription: i32 = -5606;
pub const anon16741_errUserWantsToDragWindow: i32 = -5607;
pub const anon16741_errWindowsAlreadyInitialized: i32 = -5608;
pub const anon16741_errFloatingWindowsNotInitialized: i32 = -5609;
pub const anon16741_errWindowNotFound: i32 = -5610;
pub const anon16741_errWindowDoesNotFitOnscreen: i32 = -5611;
pub const anon16741_windowAttributeImmutableErr: i32 = -5612;
pub const anon16741_windowAttributesConflictErr: i32 = -5613;
pub const anon16741_windowManagerInternalErr: i32 = -5614;
pub const anon16741_windowWrongStateErr: i32 = -5615;
pub const anon16741_windowGroupInvalidErr: i32 = -5616;
pub const anon16741_windowAppModalStateAlreadyExistsErr: i32 = -5617;
pub const anon16741_windowNoAppModalStateErr: i32 = -5618;
pub const anon16741_errWindowDoesntSupportFocus: i32 = -30583;
pub const anon16741_errWindowRegionCodeInvalid: i32 = -30593;

pub const anon17011 = i32;
pub const anon17011_dialogNoTimeoutErr: i32 = -5640;

pub const anon17071 = i32;
pub const anon17071_NavWrongDialogStateErr: i32 = -5694;
pub const anon17071_NavWrongDialogClassErr: i32 = -5695;
pub const anon17071_NavInvalidSystemConfigErr: i32 = -5696;
pub const anon17071_NavCustomControlMessageFailedErr: i32 = -5697;
pub const anon17071_NavInvalidCustomControlMessageErr: i32 = -5698;
pub const anon17071_NavMissingKindStringErr: i32 = -5699;

pub const anon17181 = i32;
pub const anon17181_collectionItemLockedErr: i32 = -5750;
pub const anon17181_collectionItemNotFoundErr: i32 = -5751;
pub const anon17181_collectionIndexRangeErr: i32 = -5752;
pub const anon17181_collectionVersionErr: i32 = -5753;
pub const anon17181_gestaltSDPPromptVersion: i32 = 1886548086;

pub const anon17271 = i32;
pub const anon17271_QTSSUnknownErr: i32 = -6150;

pub const anon17321 = i32;
pub const anon17321_DMGenErr: i32 = -6220;
pub const anon17321_DMMirroringOnAlready: i32 = -6221;
pub const anon17321_DMWrongNumberOfDisplays: i32 = -6222;
pub const anon17321_DMMirroringBlocked: i32 = -6223;
pub const anon17321_DMCantBlock: i32 = -6224;
pub const anon17321_DMMirroringNotOn: i32 = -6225;
pub const anon17321_SysSWTooOld: i32 = -6226;
pub const anon17321_DMSWNotInitializedErr: i32 = -6227;
pub const anon17321_DMDriverNotDisplayMgrAwareErr: i32 = -6228;
pub const anon17321_DMDisplayNotFoundErr: i32 = -6229;
pub const anon17321_DMNotFoundErr: i32 = -6229;
pub const anon17321_DMDisplayAlreadyInstalledErr: i32 = -6230;
pub const anon17321_DMMainDisplayCannotMoveErr: i32 = -6231;
pub const anon17321_DMNoDeviceTableclothErr: i32 = -6231;
pub const anon17321_DMFoundErr: i32 = -6232;
pub const anon17321_gestaltQD3DViewer: i32 = 1899198051;
pub const anon17321_gestaltQD3DViewerPresent: i32 = 0;

pub const anon17571 = i32;
pub const anon17571_laTooSmallBufferErr: i32 = -6984;
pub const anon17571_laEnvironmentBusyErr: i32 = -6985;
pub const anon17571_laEnvironmentNotFoundErr: i32 = -6986;
pub const anon17571_laEnvironmentExistErr: i32 = -6987;
pub const anon17571_laInvalidPathErr: i32 = -6988;
pub const anon17571_laNoMoreMorphemeErr: i32 = -6989;
pub const anon17571_laFailAnalysisErr: i32 = -6990;
pub const anon17571_laTextOverFlowErr: i32 = -6991;
pub const anon17571_laDictionaryNotOpenedErr: i32 = -6992;
pub const anon17571_laDictionaryUnknownErr: i32 = -6993;
pub const anon17571_laDictionaryTooManyErr: i32 = -6994;
pub const anon17571_laPropertyValueErr: i32 = -6995;
pub const anon17571_laPropertyUnknownErr: i32 = -6996;
pub const anon17571_laPropertyIsReadOnlyErr: i32 = -6997;
pub const anon17571_laPropertyNotFoundErr: i32 = -6998;
pub const anon17571_laPropertyErr: i32 = -6999;
pub const anon17571_laEngineNotFoundErr: i32 = -7000;
pub const anon17571_gestaltQD3D: i32 = 1902392164;
pub const anon17571_gestaltQD3DPresent: i32 = 0;

pub const anon17781 = u32;
pub const anon17781_USBNoErr: u32 = 0;
pub const anon17781_USBNoTran: u32 = 0;
pub const anon17781_USBNoDelay: u32 = 0;
pub const anon17781_USBPending: u32 = 1;

pub const anon17981 = i32;
pub const anon17981_USBNotSent2Err: i32 = -6901;
pub const anon17981_USBNotSent1Err: i32 = -6902;
pub const anon17981_USBBufUnderRunErr: i32 = -6903;
pub const anon17981_USBBufOvrRunErr: i32 = -6904;
pub const anon17981_USBRes2Err: i32 = -6905;
pub const anon17981_USBRes1Err: i32 = -6906;
pub const anon17981_USBUnderRunErr: i32 = -6907;
pub const anon17981_USBOverRunErr: i32 = -6908;
pub const anon17981_USBWrongPIDErr: i32 = -6909;
pub const anon17981_USBPIDCheckErr: i32 = -6910;
pub const anon17981_USBNotRespondingErr: i32 = -6911;
pub const anon17981_USBEndpointStallErr: i32 = -6912;
pub const anon17981_USBDataToggleErr: i32 = -6913;
pub const anon17981_USBBitstufErr: i32 = -6914;
pub const anon17981_USBCRCErr: i32 = -6915;
pub const anon17981_USBLinkErr: i32 = -6916;

pub const anon18221 = i32;
pub const anon18221_USBQueueFull: i32 = -6948;
pub const anon18221_USBNotHandled: i32 = -6987;
pub const anon18221_USBUnknownNotification: i32 = -6949;
pub const anon18221_USBBadDispatchTable: i32 = -6950;

pub const anon18351 = i32;
pub const anon18351_USBInternalReserved10: i32 = -6951;
pub const anon18351_USBInternalReserved9: i32 = -6952;
pub const anon18351_USBInternalReserved8: i32 = -6953;
pub const anon18351_USBInternalReserved7: i32 = -6954;
pub const anon18351_USBInternalReserved6: i32 = -6955;
pub const anon18351_USBInternalReserved5: i32 = -6956;
pub const anon18351_USBInternalReserved4: i32 = -6957;
pub const anon18351_USBInternalReserved3: i32 = -6958;
pub const anon18351_USBInternalReserved2: i32 = -6959;
pub const anon18351_USBInternalReserved1: i32 = -6960;

pub const anon18491 = i32;
pub const anon18491_USBPortDisabled: i32 = -6969;
pub const anon18491_USBQueueAborted: i32 = -6970;
pub const anon18491_USBTimedOut: i32 = -6971;
pub const anon18491_USBDeviceDisconnected: i32 = -6972;
pub const anon18491_USBDeviceNotSuspended: i32 = -6973;
pub const anon18491_USBDeviceSuspended: i32 = -6974;
pub const anon18491_USBInvalidBuffer: i32 = -6975;
pub const anon18491_USBDevicePowerProblem: i32 = -6976;
pub const anon18491_USBDeviceBusy: i32 = -6977;
pub const anon18491_USBUnknownInterfaceErr: i32 = -6978;
pub const anon18491_USBPipeStalledError: i32 = -6979;
pub const anon18491_USBPipeIdleError: i32 = -6980;
pub const anon18491_USBNoBandwidthError: i32 = -6981;
pub const anon18491_USBAbortedError: i32 = -6982;
pub const anon18491_USBFlagsError: i32 = -6983;
pub const anon18491_USBCompletionError: i32 = -6984;
pub const anon18491_USBPBLengthError: i32 = -6985;
pub const anon18491_USBPBVersionError: i32 = -6986;
pub const anon18491_USBNotFound: i32 = -6987;
pub const anon18491_USBOutOfMemoryErr: i32 = -6988;
pub const anon18491_USBDeviceErr: i32 = -6989;
pub const anon18491_USBNoDeviceErr: i32 = -6990;
pub const anon18491_USBAlreadyOpenErr: i32 = -6991;
pub const anon18491_USBTooManyTransactionsErr: i32 = -6992;
pub const anon18491_USBUnknownRequestErr: i32 = -6993;
pub const anon18491_USBRqErr: i32 = -6994;
pub const anon18491_USBIncorrectTypeErr: i32 = -6995;
pub const anon18491_USBTooManyPipesErr: i32 = -6996;
pub const anon18491_USBUnknownPipeErr: i32 = -6997;
pub const anon18491_USBUnknownDeviceErr: i32 = -6998;
pub const anon18491_USBInternalErr: i32 = -6999;

pub const anon18871 = i32;
pub const anon18871_dcmParamErr: i32 = -7100;
pub const anon18871_dcmNotDictionaryErr: i32 = -7101;
pub const anon18871_dcmBadDictionaryErr: i32 = -7102;
pub const anon18871_dcmPermissionErr: i32 = -7103;
pub const anon18871_dcmDictionaryNotOpenErr: i32 = -7104;
pub const anon18871_dcmDictionaryBusyErr: i32 = -7105;
pub const anon18871_dcmBlockFullErr: i32 = -7107;
pub const anon18871_dcmNoRecordErr: i32 = -7108;
pub const anon18871_dcmDupRecordErr: i32 = -7109;
pub const anon18871_dcmNecessaryFieldErr: i32 = -7110;
pub const anon18871_dcmBadFieldInfoErr: i32 = -7111;
pub const anon18871_dcmBadFieldTypeErr: i32 = -7112;
pub const anon18871_dcmNoFieldErr: i32 = -7113;
pub const anon18871_dcmBadKeyErr: i32 = -7115;
pub const anon18871_dcmTooManyKeyErr: i32 = -7116;
pub const anon18871_dcmBadDataSizeErr: i32 = -7117;
pub const anon18871_dcmBadFindMethodErr: i32 = -7118;
pub const anon18871_dcmBadPropertyErr: i32 = -7119;
pub const anon18871_dcmProtectedErr: i32 = -7121;
pub const anon18871_dcmNoAccessMethodErr: i32 = -7122;
pub const anon18871_dcmBadFeatureErr: i32 = -7124;
pub const anon18871_dcmIterationCompleteErr: i32 = -7126;
pub const anon18871_dcmBufferOverflowErr: i32 = -7127;

pub const anon19151 = i32;
pub const anon19151_RAInvalidParameter: i32 = -7100;
pub const anon19151_RAInvalidPort: i32 = -7101;
pub const anon19151_RAStartupFailed: i32 = -7102;
pub const anon19151_RAPortSetupFailed: i32 = -7103;
pub const anon19151_RAOutOfMemory: i32 = -7104;
pub const anon19151_RANotSupported: i32 = -7105;
pub const anon19151_RAMissingResources: i32 = -7106;
pub const anon19151_RAIncompatiblePrefs: i32 = -7107;
pub const anon19151_RANotConnected: i32 = -7108;
pub const anon19151_RAConnectionCanceled: i32 = -7109;
pub const anon19151_RAUnknownUser: i32 = -7110;
pub const anon19151_RAInvalidPassword: i32 = -7111;
pub const anon19151_RAInternalError: i32 = -7112;
pub const anon19151_RAInstallationDamaged: i32 = -7113;
pub const anon19151_RAPortBusy: i32 = -7114;
pub const anon19151_RAUnknownPortState: i32 = -7115;
pub const anon19151_RAInvalidPortState: i32 = -7116;
pub const anon19151_RAInvalidSerialProtocol: i32 = -7117;
pub const anon19151_RAUserLoginDisabled: i32 = -7118;
pub const anon19151_RAUserPwdChangeRequired: i32 = -7119;
pub const anon19151_RAUserPwdEntryRequired: i32 = -7120;
pub const anon19151_RAUserInteractionRequired: i32 = -7121;
pub const anon19151_RAInitOpenTransportFailed: i32 = -7122;
pub const anon19151_RARemoteAccessNotReady: i32 = -7123;
pub const anon19151_RATCPIPInactive: i32 = -7124;
pub const anon19151_RATCPIPNotConfigured: i32 = -7125;
pub const anon19151_RANotPrimaryInterface: i32 = -7126;
pub const anon19151_RAConfigurationDBInitErr: i32 = -7127;
pub const anon19151_RAPPPProtocolRejected: i32 = -7128;
pub const anon19151_RAPPPAuthenticationFailed: i32 = -7129;
pub const anon19151_RAPPPNegotiationFailed: i32 = -7130;
pub const anon19151_RAPPPUserDisconnected: i32 = -7131;
pub const anon19151_RAPPPPeerDisconnected: i32 = -7132;
pub const anon19151_RAPeerNotResponding: i32 = -7133;
pub const anon19151_RAATalkInactive: i32 = -7134;
pub const anon19151_RAExtAuthenticationFailed: i32 = -7135;
pub const anon19151_RANCPRejectedbyPeer: i32 = -7136;
pub const anon19151_RADuplicateIPAddr: i32 = -7137;
pub const anon19151_RACallBackFailed: i32 = -7138;
pub const anon19151_RANotEnabled: i32 = -7139;

pub const anon19661 = i32;
pub const anon19661_ATSUInvalidTextLayoutErr: i32 = -8790;
pub const anon19661_ATSUInvalidStyleErr: i32 = -8791;
pub const anon19661_ATSUInvalidTextRangeErr: i32 = -8792;
pub const anon19661_ATSUFontsMatched: i32 = -8793;
pub const anon19661_ATSUFontsNotMatched: i32 = -8794;
pub const anon19661_ATSUNoCorrespondingFontErr: i32 = -8795;
pub const anon19661_ATSUInvalidFontErr: i32 = -8796;
pub const anon19661_ATSUInvalidAttributeValueErr: i32 = -8797;
pub const anon19661_ATSUInvalidAttributeSizeErr: i32 = -8798;
pub const anon19661_ATSUInvalidAttributeTagErr: i32 = -8799;
pub const anon19661_ATSUInvalidCacheErr: i32 = -8800;
pub const anon19661_ATSUNotSetErr: i32 = -8801;
pub const anon19661_ATSUNoStyleRunsAssignedErr: i32 = -8802;
pub const anon19661_ATSUQuickDrawTextErr: i32 = -8803;
pub const anon19661_ATSULowLevelErr: i32 = -8804;
pub const anon19661_ATSUNoFontCmapAvailableErr: i32 = -8805;
pub const anon19661_ATSUNoFontScalerAvailableErr: i32 = -8806;
pub const anon19661_ATSUCoordinateOverflowErr: i32 = -8807;
pub const anon19661_ATSULineBreakInWord: i32 = -8808;
pub const anon19661_ATSUBusyObjectErr: i32 = -8809;

pub const anon20311 = i32;
pub const anon20311_TextUnsupportedEncodingErr: i32 = -8738;
pub const anon20311_TextMalformedInputErr: i32 = -8739;
pub const anon20311_TextUndefinedElementErr: i32 = -8740;
pub const anon20311_TECMissingTableErr: i32 = -8745;
pub const anon20311_TECTableChecksumErr: i32 = -8746;
pub const anon20311_TECTableFormatErr: i32 = -8747;
pub const anon20311_TECCorruptConverterErr: i32 = -8748;
pub const anon20311_TECNoConversionPathErr: i32 = -8749;
pub const anon20311_TECBufferBelowMinimumSizeErr: i32 = -8750;
pub const anon20311_TECArrayFullErr: i32 = -8751;
pub const anon20311_TECBadTextRunErr: i32 = -8752;
pub const anon20311_TECPartialCharErr: i32 = -8753;
pub const anon20311_TECUnmappableElementErr: i32 = -8754;
pub const anon20311_TECIncompleteElementErr: i32 = -8755;
pub const anon20311_TECDirectionErr: i32 = -8756;
pub const anon20311_TECGlobalsUnavailableErr: i32 = -8770;
pub const anon20311_TECItemUnavailableErr: i32 = -8771;
pub const anon20311_TECUsedFallbacksStatus: i32 = -8783;
pub const anon20311_TECNeedFlushStatus: i32 = -8784;
pub const anon20311_TECOutputBufferFullStatus: i32 = -8785;
pub const anon20311_unicodeChecksumErr: i32 = -8769;
pub const anon20311_unicodeNoTableErr: i32 = -8768;
pub const anon20311_unicodeVariantErr: i32 = -8767;
pub const anon20311_unicodeFallbacksErr: i32 = -8766;
pub const anon20311_unicodePartConvertErr: i32 = -8765;
pub const anon20311_unicodeBufErr: i32 = -8764;
pub const anon20311_unicodeCharErr: i32 = -8763;
pub const anon20311_unicodeElementErr: i32 = -8762;
pub const anon20311_unicodeNotFoundErr: i32 = -8761;
pub const anon20311_unicodeTableFormatErr: i32 = -8760;
pub const anon20311_unicodeDirectionErr: i32 = -8759;
pub const anon20311_unicodeContextualErr: i32 = -8758;
pub const anon20311_unicodeTextEncodingDataErr: i32 = -8757;

pub const anon20721 = i32;
pub const anon20721_UTCUnderflowErr: i32 = -8850;
pub const anon20721_UTCOverflowErr: i32 = -8851;
pub const anon20721_IllegalClockValueErr: i32 = -8852;

pub const anon20821 = i32;
pub const anon20821_ATSUInvalidFontFallbacksErr: i32 = -8900;
pub const anon20821_ATSUUnsupportedStreamFormatErr: i32 = -8901;
pub const anon20821_ATSUBadStreamErr: i32 = -8902;
pub const anon20821_ATSUOutputBufferTooSmallErr: i32 = -8903;
pub const anon20821_ATSUInvalidCallInsideCallbackErr: i32 = -8904;
pub const anon20821_ATSUNoFontNameErr: i32 = -8905;
pub const anon20821_ATSULastErr: i32 = -8959;

pub const anon21011 = i32;
pub const anon21011_codecErr: i32 = -8960;
pub const anon21011_noCodecErr: i32 = -8961;
pub const anon21011_codecUnimpErr: i32 = -8962;
pub const anon21011_codecSizeErr: i32 = -8963;
pub const anon21011_codecScreenBufErr: i32 = -8964;
pub const anon21011_codecImageBufErr: i32 = -8965;
pub const anon21011_codecSpoolErr: i32 = -8966;
pub const anon21011_codecAbortErr: i32 = -8967;
pub const anon21011_codecWouldOffscreenErr: i32 = -8968;
pub const anon21011_codecBadDataErr: i32 = -8969;
pub const anon21011_codecDataVersErr: i32 = -8970;
pub const anon21011_codecExtensionNotFoundErr: i32 = -8971;
pub const anon21011_scTypeNotFoundErr: i32 = -8971;
pub const anon21011_codecConditionErr: i32 = -8972;
pub const anon21011_codecOpenErr: i32 = -8973;
pub const anon21011_codecCantWhenErr: i32 = -8974;
pub const anon21011_codecCantQueueErr: i32 = -8975;
pub const anon21011_codecNothingToBlitErr: i32 = -8976;
pub const anon21011_codecNoMemoryPleaseWaitErr: i32 = -8977;
pub const anon21011_codecDisabledErr: i32 = -8978;
pub const anon21011_codecNeedToFlushChainErr: i32 = -8979;
pub const anon21011_lockPortBitsBadSurfaceErr: i32 = -8980;
pub const anon21011_lockPortBitsWindowMovedErr: i32 = -8981;
pub const anon21011_lockPortBitsWindowResizedErr: i32 = -8982;
pub const anon21011_lockPortBitsWindowClippedErr: i32 = -8983;
pub const anon21011_lockPortBitsBadPortErr: i32 = -8984;
pub const anon21011_lockPortBitsSurfaceLostErr: i32 = -8985;
pub const anon21011_codecParameterDialogConfirm: i32 = -8986;
pub const anon21011_codecNeedAccessKeyErr: i32 = -8987;
pub const anon21011_codecOffscreenFailedErr: i32 = -8988;
pub const anon21011_codecDroppedFrameErr: i32 = -8989;
pub const anon21011_directXObjectAlreadyExists: i32 = -8990;
pub const anon21011_lockPortBitsWrongGDeviceErr: i32 = -8991;
pub const anon21011_codecOffscreenFailedPleaseRetryErr: i32 = -8992;
pub const anon21011_badCodecCharacterizationErr: i32 = -8993;
pub const anon21011_noThumbnailFoundErr: i32 = -8994;
pub const anon21011_gestaltTE6: i32 = 6;

pub const anon21421 = i32;
pub const anon21421_BadAdapterErr: i32 = -9050;
pub const anon21421_BadAttributeErr: i32 = -9051;
pub const anon21421_BadBaseErr: i32 = -9052;
pub const anon21421_BadEDCErr: i32 = -9053;
pub const anon21421_BadIRQErr: i32 = -9054;
pub const anon21421_BadOffsetErr: i32 = -9055;
pub const anon21421_BadPageErr: i32 = -9056;
pub const anon21421_BadSizeErr: i32 = -9057;
pub const anon21421_BadSocketErr: i32 = -9058;
pub const anon21421_BadTypeErr: i32 = -9059;
pub const anon21421_BadVccErr: i32 = -9060;
pub const anon21421_BadVppErr: i32 = -9061;
pub const anon21421_BadWindowErr: i32 = -9062;
pub const anon21421_BadArgLengthErr: i32 = -9063;
pub const anon21421_BadArgsErr: i32 = -9064;
pub const anon21421_BadHandleErr: i32 = -9065;
pub const anon21421_BadCISErr: i32 = -9066;
pub const anon21421_BadSpeedErr: i32 = -9067;
pub const anon21421_ReadFailureErr: i32 = -9068;
pub const anon21421_WriteFailureErr: i32 = -9069;
pub const anon21421_GeneralFailureErr: i32 = -9070;
pub const anon21421_NoCardErr: i32 = -9071;
pub const anon21421_UnsupportedFunctionErr: i32 = -9072;
pub const anon21421_UnsupportedModeErr: i32 = -9073;
pub const anon21421_BusyErr: i32 = -9074;
pub const anon21421_WriteProtectedErr: i32 = -9075;
pub const anon21421_ConfigurationLockedErr: i32 = -9076;
pub const anon21421_InUseErr: i32 = -9077;
pub const anon21421_NoMoreItemsErr: i32 = -9078;
pub const anon21421_OutOfResourceErr: i32 = -9079;
pub const anon21421_NoCardSevicesSocketsErr: i32 = -9080;
pub const anon21421_InvalidRegEntryErr: i32 = -9081;
pub const anon21421_BadLinkErr: i32 = -9082;
pub const anon21421_BadDeviceErr: i32 = -9083;
pub const anon21421_16BitCardErr: i32 = -9084;
pub const anon21421_CardBusCardErr: i32 = -9085;
pub const anon21421_PassCallToChainErr: i32 = -9086;
pub const anon21421_CantConfigureCardErr: i32 = -9087;
pub const anon21421_PostCardEventErr: i32 = -9088;
pub const anon21421_InvalidDeviceNumber: i32 = -9089;
pub const anon21421_UnsupportedVsErr: i32 = -9090;
pub const anon21421_InvalidCSClientErr: i32 = -9091;
pub const anon21421_BadTupleDataErr: i32 = -9092;
pub const anon21421_BadCustomIFIDErr: i32 = -9093;
pub const anon21421_NoIOWindowRequestedErr: i32 = -9094;
pub const anon21421_NoMoreTimerClientsErr: i32 = -9095;
pub const anon21421_NoMoreInterruptSlotsErr: i32 = -9096;
pub const anon21421_NoClientTableErr: i32 = -9097;
pub const anon21421_UnsupportedCardErr: i32 = -9098;
pub const anon21421_NoCardEnablersFoundErr: i32 = -9099;
pub const anon21421_NoEnablerForCardErr: i32 = -9100;
pub const anon21421_NoCompatibleNameErr: i32 = -9101;
pub const anon21421_ClientRequestDenied: i32 = -9102;
pub const anon21421_NotReadyErr: i32 = -9103;
pub const anon21421_TooManyIOWindowsErr: i32 = -9104;
pub const anon21421_AlreadySavedStateErr: i32 = -9105;
pub const anon21421_AttemptDupCardEntryErr: i32 = -9106;
pub const anon21421_CardPowerOffErr: i32 = -9107;
pub const anon21421_NotZVCapableErr: i32 = -9108;
pub const anon21421_NoCardBusCISErr: i32 = -9109;

pub const anon22071 = i32;
pub const anon22071_noDeviceForChannel: i32 = -9400;
pub const anon22071_grabTimeComplete: i32 = -9401;
pub const anon22071_cantDoThatInCurrentMode: i32 = -9402;
pub const anon22071_notEnoughMemoryToGrab: i32 = -9403;
pub const anon22071_notEnoughDiskSpaceToGrab: i32 = -9404;
pub const anon22071_couldntGetRequiredComponent: i32 = -9405;
pub const anon22071_badSGChannel: i32 = -9406;
pub const anon22071_seqGrabInfoNotAvailable: i32 = -9407;
pub const anon22071_deviceCantMeetRequest: i32 = -9408;
pub const anon22071_badControllerHeight: i32 = -9994;
pub const anon22071_editingNotAllowed: i32 = -9995;
pub const anon22071_controllerBoundsNotExact: i32 = -9996;
pub const anon22071_cannotSetWidthOfAttachedController: i32 = -9997;
pub const anon22071_controllerHasFixedHeight: i32 = -9998;
pub const anon22071_cannotMoveAttachedController: i32 = -9999;

pub const anon22261 = i32;
pub const anon22261_errAEBadKeyForm: i32 = -10002;
pub const anon22261_errAECantHandleClass: i32 = -10010;
pub const anon22261_errAECantSupplyType: i32 = -10009;
pub const anon22261_errAECantUndo: i32 = -10015;
pub const anon22261_errAEEventFailed: i32 = -10000;
pub const anon22261_errAEIndexTooLarge: i32 = -10007;
pub const anon22261_errAEInTransaction: i32 = -10011;
pub const anon22261_errAELocalOnly: i32 = -10016;
pub const anon22261_errAENoSuchTransaction: i32 = -10012;
pub const anon22261_errAENotAnElement: i32 = -10008;
pub const anon22261_errAENotASingleObject: i32 = -10014;
pub const anon22261_errAENotModifiable: i32 = -10003;
pub const anon22261_errAENoUserSelection: i32 = -10013;
pub const anon22261_errAEPrivilegeError: i32 = -10004;
pub const anon22261_errAEReadDenied: i32 = -10005;
pub const anon22261_errAETypeError: i32 = -10001;
pub const anon22261_errAEWriteDenied: i32 = -10006;
pub const anon22261_errAENotAnEnumMember: i32 = -10023;
pub const anon22261_errAECantPutThatThere: i32 = -10024;
pub const anon22261_errAEPropertiesClash: i32 = -10025;
pub const anon22261_gestaltATSUFeatures: i32 = 1969845094;
pub const anon22261_gestaltATSUTrackingFeature: i32 = 1;
pub const anon22261_gestaltATSUMemoryFeature: i32 = 1;
pub const anon22261_gestaltATSUFallbacksFeature: i32 = 1;
pub const anon22261_gestaltATSUGlyphBoundsFeature: i32 = 1;
pub const anon22261_gestaltATSULineControlFeature: i32 = 1;
pub const anon22261_gestaltATSULayoutCreateAndCopyFeature: i32 = 1;
pub const anon22261_gestaltATSULayoutCacheClearFeature: i32 = 1;
pub const anon22261_gestaltATSUTextLocatorUsageFeature: i32 = 2;
pub const anon22261_gestaltATSULowLevelOrigFeatures: i32 = 4;
pub const anon22261_gestaltATSUFallbacksObjFeatures: i32 = 8;
pub const anon22261_gestaltATSUIgnoreLeadingFeature: i32 = 8;
pub const anon22261_gestaltATSUByCharacterClusterFeature: i32 = 16;
pub const anon22261_gestaltATSUAscentDescentControlsFeature: i32 = 16;
pub const anon22261_gestaltATSUHighlightInactiveTextFeature: i32 = 16;
pub const anon22261_gestaltATSUPositionToCursorFeature: i32 = 16;
pub const anon22261_gestaltATSUBatchBreakLinesFeature: i32 = 16;
pub const anon22261_gestaltATSUTabSupportFeature: i32 = 16;
pub const anon22261_gestaltATSUDirectAccess: i32 = 16;
pub const anon22261_gestaltATSUDecimalTabFeature: i32 = 32;
pub const anon22261_gestaltATSUBiDiCursorPositionFeature: i32 = 32;
pub const anon22261_gestaltATSUNearestCharLineBreakFeature: i32 = 32;
pub const anon22261_gestaltATSUHighlightColorControlFeature: i32 = 32;
pub const anon22261_gestaltATSUUnderlineOptionsStyleFeature: i32 = 32;
pub const anon22261_gestaltATSUStrikeThroughStyleFeature: i32 = 32;
pub const anon22261_gestaltATSUDropShadowStyleFeature: i32 = 32;

pub const anon22501 = i32;
pub const anon22501_telGenericError: i32 = -1;
pub const anon22501_telNoErr: i32 = 0;
pub const anon22501_telNoTools: i32 = 8;
pub const anon22501_telBadTermErr: i32 = -10001;
pub const anon22501_telBadDNErr: i32 = -10002;
pub const anon22501_telBadCAErr: i32 = -10003;
pub const anon22501_telBadHandErr: i32 = -10004;
pub const anon22501_telBadProcErr: i32 = -10005;
pub const anon22501_telCAUnavail: i32 = -10006;
pub const anon22501_telNoMemErr: i32 = -10007;
pub const anon22501_telNoOpenErr: i32 = -10008;
pub const anon22501_telBadHTypeErr: i32 = -10010;
pub const anon22501_telHTypeNotSupp: i32 = -10011;
pub const anon22501_telBadLevelErr: i32 = -10012;
pub const anon22501_telBadVTypeErr: i32 = -10013;
pub const anon22501_telVTypeNotSupp: i32 = -10014;
pub const anon22501_telBadAPattErr: i32 = -10015;
pub const anon22501_telAPattNotSupp: i32 = -10016;
pub const anon22501_telBadIndex: i32 = -10017;
pub const anon22501_telIndexNotSupp: i32 = -10018;
pub const anon22501_telBadStateErr: i32 = -10019;
pub const anon22501_telStateNotSupp: i32 = -10020;
pub const anon22501_telBadIntExt: i32 = -10021;
pub const anon22501_telIntExtNotSupp: i32 = -10022;
pub const anon22501_telBadDNDType: i32 = -10023;
pub const anon22501_telDNDTypeNotSupp: i32 = -10024;
pub const anon22501_telFeatNotSub: i32 = -10030;
pub const anon22501_telFeatNotAvail: i32 = -10031;
pub const anon22501_telFeatActive: i32 = -10032;
pub const anon22501_telFeatNotSupp: i32 = -10033;
pub const anon22501_telConfLimitErr: i32 = -10040;
pub const anon22501_telConfNoLimit: i32 = -10041;
pub const anon22501_telConfErr: i32 = -10042;
pub const anon22501_telConfRej: i32 = -10043;
pub const anon22501_telTransferErr: i32 = -10044;
pub const anon22501_telTransferRej: i32 = -10045;
pub const anon22501_telCBErr: i32 = -10046;
pub const anon22501_telConfLimitExceeded: i32 = -10047;
pub const anon22501_telBadDNType: i32 = -10050;
pub const anon22501_telBadPageID: i32 = -10051;
pub const anon22501_telBadIntercomID: i32 = -10052;
pub const anon22501_telBadFeatureID: i32 = -10053;
pub const anon22501_telBadFwdType: i32 = -10054;
pub const anon22501_telBadPickupGroupID: i32 = -10055;
pub const anon22501_telBadParkID: i32 = -10056;
pub const anon22501_telBadSelect: i32 = -10057;
pub const anon22501_telBadBearerType: i32 = -10058;
pub const anon22501_telBadRate: i32 = -10059;
pub const anon22501_telDNTypeNotSupp: i32 = -10060;
pub const anon22501_telFwdTypeNotSupp: i32 = -10061;
pub const anon22501_telBadDisplayMode: i32 = -10062;
pub const anon22501_telDisplayModeNotSupp: i32 = -10063;
pub const anon22501_telNoCallbackRef: i32 = -10064;
pub const anon22501_telAlreadyOpen: i32 = -10070;
pub const anon22501_telStillNeeded: i32 = -10071;
pub const anon22501_telTermNotOpen: i32 = -10072;
pub const anon22501_telCANotAcceptable: i32 = -10080;
pub const anon22501_telCANotRejectable: i32 = -10081;
pub const anon22501_telCANotDeflectable: i32 = -10082;
pub const anon22501_telPBErr: i32 = -10090;
pub const anon22501_telBadFunction: i32 = -10091;
pub const anon22501_telNoSuchTool: i32 = -10102;
pub const anon22501_telUnknownErr: i32 = -10103;
pub const anon22501_telNoCommFolder: i32 = -10106;
pub const anon22501_telInitFailed: i32 = -10107;
pub const anon22501_telBadCodeResource: i32 = -10108;
pub const anon22501_telDeviceNotFound: i32 = -10109;
pub const anon22501_telBadProcID: i32 = -10110;
pub const anon22501_telValidateFailed: i32 = -10111;
pub const anon22501_telAutoAnsNotOn: i32 = -10112;
pub const anon22501_telDetAlreadyOn: i32 = -10113;
pub const anon22501_telBadSWErr: i32 = -10114;
pub const anon22501_telBadSampleRate: i32 = -10115;
pub const anon22501_telNotEnoughdspBW: i32 = -10116;

pub const anon23281 = i32;
pub const anon23281_errTaskNotFound: i32 = -10780;

pub const anon23361 = i32;
pub const anon23361_pmBusyErr: i32 = -13000;
pub const anon23361_pmReplyTOErr: i32 = -13001;
pub const anon23361_pmSendStartErr: i32 = -13002;
pub const anon23361_pmSendEndErr: i32 = -13003;
pub const anon23361_pmRecvStartErr: i32 = -13004;
pub const anon23361_pmRecvEndErr: i32 = -13005;

pub const anon23471 = i32;
pub const anon23471_PowerHandlerExistsForDeviceErr: i32 = -13006;
pub const anon23471_PowerHandlerNotFoundForDeviceErr: i32 = -13007;
pub const anon23471_PowerHandlerNotFoundForProcErr: i32 = -13008;
pub const anon23471_PowerMgtMessageNotHandled: i32 = -13009;
pub const anon23471_PowerMgtRequestDenied: i32 = -13010;
pub const anon23471_CantReportProcessorTemperatureErr: i32 = -13013;
pub const anon23471_ProcessorTempRoutineRequiresMPLib2: i32 = -13014;
pub const anon23471_NoSuchPowerSource: i32 = -13020;
pub const anon23471_BridgeSoftwareRunningCantSleep: i32 = -13038;

pub const anon23611 = i32;
pub const anon23611_debuggingExecutionContextErr: i32 = -13880;
pub const anon23611_debuggingDuplicateSignatureErr: i32 = -13881;
pub const anon23611_debuggingDuplicateOptionErr: i32 = -13882;
pub const anon23611_debuggingInvalidSignatureErr: i32 = -13883;
pub const anon23611_debuggingInvalidOptionErr: i32 = -13884;
pub const anon23611_debuggingInvalidNameErr: i32 = -13885;
pub const anon23611_debuggingNoCallbackErr: i32 = -13886;
pub const anon23611_debuggingNoMatchErr: i32 = -13887;

pub const anon23741 = i32;
pub const anon23741_HIDVersionIncompatibleErr: i32 = -13909;
pub const anon23741_HIDDeviceNotReady: i32 = -13910;

pub const anon23811 = i32;
pub const anon23811_HIDSuccess: i32 = 0;
pub const anon23811_HIDInvalidRangePageErr: i32 = -13923;
pub const anon23811_HIDReportIDZeroErr: i32 = -13924;
pub const anon23811_HIDReportCountZeroErr: i32 = -13925;
pub const anon23811_HIDReportSizeZeroErr: i32 = -13926;
pub const anon23811_HIDUnmatchedDesignatorRangeErr: i32 = -13927;
pub const anon23811_HIDUnmatchedStringRangeErr: i32 = -13928;
pub const anon23811_HIDInvertedUsageRangeErr: i32 = -13929;
pub const anon23811_HIDUnmatchedUsageRangeErr: i32 = -13930;
pub const anon23811_HIDInvertedPhysicalRangeErr: i32 = -13931;
pub const anon23811_HIDInvertedLogicalRangeErr: i32 = -13932;
pub const anon23811_HIDBadLogicalMaximumErr: i32 = -13933;
pub const anon23811_HIDBadLogicalMinimumErr: i32 = -13934;
pub const anon23811_HIDUsagePageZeroErr: i32 = -13935;
pub const anon23811_HIDEndOfDescriptorErr: i32 = -13936;
pub const anon23811_HIDNotEnoughMemoryErr: i32 = -13937;
pub const anon23811_HIDBadParameterErr: i32 = -13938;
pub const anon23811_HIDNullPointerErr: i32 = -13939;
pub const anon23811_HIDInvalidReportLengthErr: i32 = -13940;
pub const anon23811_HIDInvalidReportTypeErr: i32 = -13941;
pub const anon23811_HIDBadLogPhysValuesErr: i32 = -13942;
pub const anon23811_HIDIncompatibleReportErr: i32 = -13943;
pub const anon23811_HIDInvalidPreparsedDataErr: i32 = -13944;
pub const anon23811_HIDNotValueArrayErr: i32 = -13945;
pub const anon23811_HIDUsageNotFoundErr: i32 = -13946;
pub const anon23811_HIDValueOutOfRangeErr: i32 = -13947;
pub const anon23811_HIDBufferTooSmallErr: i32 = -13948;
pub const anon23811_HIDNullStateErr: i32 = -13949;
pub const anon23811_HIDBaseError: i32 = -13950;
pub const anon23811_gestaltX86AdditionalFeatures: i32 = 2016949857;
pub const anon23811_gestaltX86HasSSE3: i32 = 0;
pub const anon23811_gestaltX86HasMONITOR: i32 = 3;
pub const anon23811_gestaltX86HasDSCPL: i32 = 4;
pub const anon23811_gestaltX86HasVMX: i32 = 5;
pub const anon23811_gestaltX86HasSMX: i32 = 6;
pub const anon23811_gestaltX86HasEST: i32 = 7;
pub const anon23811_gestaltX86HasTM2: i32 = 8;
pub const anon23811_gestaltX86HasSupplementalSSE3: i32 = 9;
pub const anon23811_gestaltX86HasCID: i32 = 10;
pub const anon23811_gestaltX86HasCX16: i32 = 13;
pub const anon23811_gestaltX86HasxTPR: i32 = 14;

pub const anon24151 = i32;
pub const anon24151_ModemOutOfMemory: i32 = -14000;
pub const anon24151_ModemPreferencesMissing: i32 = -14001;
pub const anon24151_ModemScriptMissing: i32 = -14002;

pub const anon24241 = i32;
pub const anon24241_TXNEndIterationErr: i32 = -22000;
pub const anon24241_TXNCannotAddFrameErr: i32 = -22001;
pub const anon24241_TXNInvalidFrameIDErr: i32 = -22002;
pub const anon24241_TXNIllegalToCrossDataBoundariesErr: i32 = -22003;
pub const anon24241_TXNUserCanceledOperationErr: i32 = -22004;
pub const anon24241_TXNBadDefaultFileTypeWarning: i32 = -22005;
pub const anon24241_TXNCannotSetAutoIndentErr: i32 = -22006;
pub const anon24241_TXNRunIndexOutofBoundsErr: i32 = -22007;
pub const anon24241_TXNNoMatchErr: i32 = -22008;
pub const anon24241_TXNAttributeTagInvalidForRunErr: i32 = -22009;
pub const anon24241_TXNSomeOrAllTagsInvalidForRunErr: i32 = -22010;
pub const anon24241_TXNInvalidRunIndex: i32 = -22011;
pub const anon24241_TXNAlreadyInitializedErr: i32 = -22012;
pub const anon24241_TXNCannotTurnTSMOffWhenUsingUnicodeErr: i32 = -22013;
pub const anon24241_TXNCopyNotAllowedInEchoModeErr: i32 = -22014;
pub const anon24241_TXNDataTypeNotAllowedErr: i32 = -22015;
pub const anon24241_TXNATSUIIsNotInstalledErr: i32 = -22016;
pub const anon24241_TXNOutsideOfLineErr: i32 = -22017;
pub const anon24241_TXNOutsideOfFrameErr: i32 = -22018;

pub const anon24501 = i32;
pub const anon24501_printerStatusOpCodeNotSupportedErr: i32 = -25280;

pub const anon24561 = i32;
pub const anon24561_errKCNotAvailable: i32 = -25291;
pub const anon24561_errKCReadOnly: i32 = -25292;
pub const anon24561_errKCAuthFailed: i32 = -25293;
pub const anon24561_errKCNoSuchKeychain: i32 = -25294;
pub const anon24561_errKCInvalidKeychain: i32 = -25295;
pub const anon24561_errKCDuplicateKeychain: i32 = -25296;
pub const anon24561_errKCDuplicateCallback: i32 = -25297;
pub const anon24561_errKCInvalidCallback: i32 = -25298;
pub const anon24561_errKCDuplicateItem: i32 = -25299;
pub const anon24561_errKCItemNotFound: i32 = -25300;
pub const anon24561_errKCBufferTooSmall: i32 = -25301;
pub const anon24561_errKCDataTooLarge: i32 = -25302;
pub const anon24561_errKCNoSuchAttr: i32 = -25303;
pub const anon24561_errKCInvalidItemRef: i32 = -25304;
pub const anon24561_errKCInvalidSearchRef: i32 = -25305;
pub const anon24561_errKCNoSuchClass: i32 = -25306;
pub const anon24561_errKCNoDefaultKeychain: i32 = -25307;
pub const anon24561_errKCInteractionNotAllowed: i32 = -25308;
pub const anon24561_errKCReadOnlyAttr: i32 = -25309;
pub const anon24561_errKCWrongKCVersion: i32 = -25310;
pub const anon24561_errKCKeySizeNotAllowed: i32 = -25311;
pub const anon24561_errKCNoStorageModule: i32 = -25312;
pub const anon24561_errKCNoCertificateModule: i32 = -25313;
pub const anon24561_errKCNoPolicyModule: i32 = -25314;
pub const anon24561_errKCInteractionRequired: i32 = -25315;
pub const anon24561_errKCDataNotAvailable: i32 = -25316;
pub const anon24561_errKCDataNotModifiable: i32 = -25317;
pub const anon24561_errKCCreateChainFailed: i32 = -25318;

pub const anon24891 = i32;
pub const anon24891_UCOutputBufferTooSmall: i32 = -25340;
pub const anon24891_UCTextBreakLocatorMissingType: i32 = -25341;

pub const anon24941 = i32;
pub const anon24941_UCTSNoKeysAddedToObjectErr: i32 = -25342;
pub const anon24941_UCTSSearchListErr: i32 = -25343;

pub const anon24991 = i32;
pub const anon24991_UCTokenizerIterationFinished: i32 = -25344;
pub const anon24991_UCTokenizerUnknownLang: i32 = -25345;
pub const anon24991_UCTokenNotFound: i32 = -25346;

pub const anon25061 = i32;
pub const anon25061_MPIterationEndErr: i32 = -29275;
pub const anon25061_MPPrivilegedErr: i32 = -29276;
pub const anon25061_MPProcessCreatedErr: i32 = -29288;
pub const anon25061_MPProcessTerminatedErr: i32 = -29289;
pub const anon25061_MPTaskCreatedErr: i32 = -29290;
pub const anon25061_MPTaskBlockedErr: i32 = -29291;
pub const anon25061_MPTaskStoppedErr: i32 = -29292;
pub const anon25061_MPBlueBlockingErr: i32 = -29293;
pub const anon25061_MPDeletedErr: i32 = -29295;
pub const anon25061_MPTimeoutErr: i32 = -29296;
pub const anon25061_MPTaskAbortedErr: i32 = -29297;
pub const anon25061_MPInsufficientResourcesErr: i32 = -29298;
pub const anon25061_MPInvalidIDErr: i32 = -29299;

pub const anon25221 = i32;
pub const anon25221_MPNanokernelNeedsMemoryErr: i32 = -29294;

pub const anon25271 = i32;
pub const anon25271_CollateAttributesNotFoundErr: i32 = -29500;
pub const anon25271_CollateInvalidOptions: i32 = -29501;
pub const anon25271_CollateMissingUnicodeTableErr: i32 = -29502;
pub const anon25271_CollateUnicodeConvertFailedErr: i32 = -29503;
pub const anon25271_CollatePatternNotFoundErr: i32 = -29504;
pub const anon25271_CollateInvalidChar: i32 = -29505;
pub const anon25271_CollateBufferTooSmall: i32 = -29506;
pub const anon25271_CollateInvalidCollationRef: i32 = -29507;

pub const anon25401 = i32;
pub const anon25401_FNSInvalidReferenceErr: i32 = -29580;
pub const anon25401_FNSBadReferenceVersionErr: i32 = -29581;
pub const anon25401_FNSInvalidProfileErr: i32 = -29582;
pub const anon25401_FNSBadProfileVersionErr: i32 = -29583;
pub const anon25401_FNSDuplicateReferenceErr: i32 = -29584;
pub const anon25401_FNSMismatchErr: i32 = -29585;
pub const anon25401_FNSInsufficientDataErr: i32 = -29586;
pub const anon25401_FNSBadFlattenedSizeErr: i32 = -29587;
pub const anon25401_FNSNameNotFoundErr: i32 = -29589;

pub const anon25551 = i32;
pub const anon25551_LocalesBufferTooSmallErr: i32 = -30001;
pub const anon25551_LocalesTableFormatErr: i32 = -30002;
pub const anon25551_LocalesDefaultDisplayStatus: i32 = -30029;

pub const anon25631 = i32;
pub const anon25631_ALMInternalErr: i32 = -30049;
pub const anon25631_ALMGroupNotFoundErr: i32 = -30048;
pub const anon25631_ALMNoSuchModuleErr: i32 = -30047;
pub const anon25631_ALMModuleCommunicationErr: i32 = -30046;
pub const anon25631_ALMDuplicateModuleErr: i32 = -30045;
pub const anon25631_ALMInstallationErr: i32 = -30044;
pub const anon25631_ALMDeferSwitchErr: i32 = -30043;
pub const anon25631_ALMRebootFlagsLevelErr: i32 = -30042;

pub const anon25741 = i32;
pub const anon25741_ALMLocationNotFoundErr: i32 = -30048;

pub const anon25801 = i32;
pub const anon25801_SSpInternalErr: i32 = -30340;
pub const anon25801_SSpVersionErr: i32 = -30341;
pub const anon25801_SSpCantInstallErr: i32 = -30342;
pub const anon25801_SSpParallelUpVectorErr: i32 = -30343;
pub const anon25801_SSpScaleToZeroErr: i32 = -30344;

pub const anon25901 = i32;
pub const anon25901_NSpInitializationFailedErr: i32 = -30360;
pub const anon25901_NSpAlreadyInitializedErr: i32 = -30361;
pub const anon25901_NSpTopologyNotSupportedErr: i32 = -30362;
pub const anon25901_NSpPipeFullErr: i32 = -30364;
pub const anon25901_NSpHostFailedErr: i32 = -30365;
pub const anon25901_NSpProtocolNotAvailableErr: i32 = -30366;
pub const anon25901_NSpInvalidGameRefErr: i32 = -30367;
pub const anon25901_NSpInvalidParameterErr: i32 = -30369;
pub const anon25901_NSpOTNotPresentErr: i32 = -30370;
pub const anon25901_NSpOTVersionTooOldErr: i32 = -30371;
pub const anon25901_NSpMemAllocationErr: i32 = -30373;
pub const anon25901_NSpAlreadyAdvertisingErr: i32 = -30374;
pub const anon25901_NSpNotAdvertisingErr: i32 = -30376;
pub const anon25901_NSpInvalidAddressErr: i32 = -30377;
pub const anon25901_NSpFreeQExhaustedErr: i32 = -30378;
pub const anon25901_NSpRemovePlayerFailedErr: i32 = -30379;
pub const anon25901_NSpAddressInUseErr: i32 = -30380;
pub const anon25901_NSpFeatureNotImplementedErr: i32 = -30381;
pub const anon25901_NSpNameRequiredErr: i32 = -30382;
pub const anon25901_NSpInvalidPlayerIDErr: i32 = -30383;
pub const anon25901_NSpInvalidGroupIDErr: i32 = -30384;
pub const anon25901_NSpNoPlayersErr: i32 = -30385;
pub const anon25901_NSpNoGroupsErr: i32 = -30386;
pub const anon25901_NSpNoHostVolunteersErr: i32 = -30387;
pub const anon25901_NSpCreateGroupFailedErr: i32 = -30388;
pub const anon25901_NSpAddPlayerFailedErr: i32 = -30389;
pub const anon25901_NSpInvalidDefinitionErr: i32 = -30390;
pub const anon25901_NSpInvalidProtocolRefErr: i32 = -30391;
pub const anon25901_NSpInvalidProtocolListErr: i32 = -30392;
pub const anon25901_NSpTimeoutErr: i32 = -30393;
pub const anon25901_NSpGameTerminatedErr: i32 = -30394;
pub const anon25901_NSpConnectFailedErr: i32 = -30395;
pub const anon25901_NSpSendFailedErr: i32 = -30396;
pub const anon25901_NSpMessageTooBigErr: i32 = -30397;
pub const anon25901_NSpCantBlockErr: i32 = -30398;
pub const anon25901_NSpJoinFailedErr: i32 = -30399;

pub const anon26311 = i32;
pub const anon26311_ISpInternalErr: i32 = -30420;
pub const anon26311_ISpSystemListErr: i32 = -30421;
pub const anon26311_ISpBufferToSmallErr: i32 = -30422;
pub const anon26311_ISpElementInListErr: i32 = -30423;
pub const anon26311_ISpElementNotInListErr: i32 = -30424;
pub const anon26311_ISpSystemInactiveErr: i32 = -30425;
pub const anon26311_ISpDeviceInactiveErr: i32 = -30426;
pub const anon26311_ISpSystemActiveErr: i32 = -30427;
pub const anon26311_ISpDeviceActiveErr: i32 = -30428;
pub const anon26311_ISpListBusyErr: i32 = -30429;

pub const anon26451 = i32;
pub const anon26451_DSpNotInitializedErr: i32 = -30440;
pub const anon26451_DSpSystemSWTooOldErr: i32 = -30441;
pub const anon26451_DSpInvalidContextErr: i32 = -30442;
pub const anon26451_DSpInvalidAttributesErr: i32 = -30443;
pub const anon26451_DSpContextAlreadyReservedErr: i32 = -30444;
pub const anon26451_DSpContextNotReservedErr: i32 = -30445;
pub const anon26451_DSpContextNotFoundErr: i32 = -30446;
pub const anon26451_DSpFrameRateNotReadyErr: i32 = -30447;
pub const anon26451_DSpConfirmSwitchWarning: i32 = -30448;
pub const anon26451_DSpInternalErr: i32 = -30449;
pub const anon26451_DSpStereoContextErr: i32 = -30450;

pub const anon26651 = i32;
pub const anon26651_FBCvTwinExceptionErr: i32 = -30500;
pub const anon26651_FBCnoIndexesFound: i32 = -30501;
pub const anon26651_FBCallocFailed: i32 = -30502;
pub const anon26651_FBCbadParam: i32 = -30503;
pub const anon26651_FBCfileNotIndexed: i32 = -30504;
pub const anon26651_FBCbadIndexFile: i32 = -30505;
pub const anon26651_FBCcompactionFailed: i32 = -30506;
pub const anon26651_FBCvalidationFailed: i32 = -30507;
pub const anon26651_FBCindexingFailed: i32 = -30508;
pub const anon26651_FBCcommitFailed: i32 = -30509;
pub const anon26651_FBCdeletionFailed: i32 = -30510;
pub const anon26651_FBCmoveFailed: i32 = -30511;
pub const anon26651_FBCtokenizationFailed: i32 = -30512;
pub const anon26651_FBCmergingFailed: i32 = -30513;
pub const anon26651_FBCindexCreationFailed: i32 = -30514;
pub const anon26651_FBCaccessorStoreFailed: i32 = -30515;
pub const anon26651_FBCaddDocFailed: i32 = -30516;
pub const anon26651_FBCflushFailed: i32 = -30517;
pub const anon26651_FBCindexNotFound: i32 = -30518;
pub const anon26651_FBCnoSearchSession: i32 = -30519;
pub const anon26651_FBCindexingCanceled: i32 = -30520;
pub const anon26651_FBCaccessCanceled: i32 = -30521;
pub const anon26651_FBCindexFileDestroyed: i32 = -30522;
pub const anon26651_FBCindexNotAvailable: i32 = -30523;
pub const anon26651_FBCsearchFailed: i32 = -30524;
pub const anon26651_FBCsomeFilesNotIndexed: i32 = -30525;
pub const anon26651_FBCillegalSessionChange: i32 = -30526;
pub const anon26651_FBCanalysisNotAvailable: i32 = -30527;
pub const anon26651_FBCbadIndexFileVersion: i32 = -30528;
pub const anon26651_FBCsummarizationCanceled: i32 = -30529;
pub const anon26651_FBCindexDiskIOFailed: i32 = -30530;
pub const anon26651_FBCbadSearchSession: i32 = -30531;
pub const anon26651_FBCnoSuchHit: i32 = -30532;

pub const anon27041 = i32;
pub const anon27041_notAQTVRMovieErr: i32 = -30540;
pub const anon27041_constraintReachedErr: i32 = -30541;
pub const anon27041_callNotSupportedByNodeErr: i32 = -30542;
pub const anon27041_selectorNotSupportedByNodeErr: i32 = -30543;
pub const anon27041_invalidNodeIDErr: i32 = -30544;
pub const anon27041_invalidViewStateErr: i32 = -30545;
pub const anon27041_timeNotInViewErr: i32 = -30546;
pub const anon27041_propertyNotSupportedByNodeErr: i32 = -30547;
pub const anon27041_settingNotSupportedByNodeErr: i32 = -30548;
pub const anon27041_limitReachedErr: i32 = -30549;
pub const anon27041_invalidNodeFormatErr: i32 = -30550;
pub const anon27041_invalidHotSpotIDErr: i32 = -30551;
pub const anon27041_noMemoryNodeFailedInitialize: i32 = -30552;
pub const anon27041_streamingNodeNotReadyErr: i32 = -30553;
pub const anon27041_qtvrLibraryLoadErr: i32 = -30554;
pub const anon27041_qtvrUninitialized: i32 = -30555;

pub const anon27251 = i32;
pub const anon27251_themeInvalidBrushErr: i32 = -30560;
pub const anon27251_themeProcessRegisteredErr: i32 = -30561;
pub const anon27251_themeProcessNotRegisteredErr: i32 = -30562;
pub const anon27251_themeBadTextColorErr: i32 = -30563;
pub const anon27251_themeHasNoAccentsErr: i32 = -30564;
pub const anon27251_themeBadCursorIndexErr: i32 = -30565;
pub const anon27251_themeScriptFontNotFoundErr: i32 = -30566;
pub const anon27251_themeMonitorDepthNotSupportedErr: i32 = -30567;
pub const anon27251_themeNoAppropriateBrushErr: i32 = -30568;

pub const anon27431 = i32;
pub const anon27431_errMessageNotSupported: i32 = -30580;
pub const anon27431_errDataNotSupported: i32 = -30581;
pub const anon27431_errControlDoesntSupportFocus: i32 = -30582;
pub const anon27431_errUnknownControl: i32 = -30584;
pub const anon27431_errCouldntSetFocus: i32 = -30585;
pub const anon27431_errNoRootControl: i32 = -30586;
pub const anon27431_errRootAlreadyExists: i32 = -30587;
pub const anon27431_errInvalidPartCode: i32 = -30588;
pub const anon27431_errControlsAlreadyExist: i32 = -30589;
pub const anon27431_errControlIsNotEmbedder: i32 = -30590;
pub const anon27431_errDataSizeMismatch: i32 = -30591;
pub const anon27431_errControlHiddenOrDisabled: i32 = -30592;
pub const anon27431_errCantEmbedIntoSelf: i32 = -30594;
pub const anon27431_errCantEmbedRoot: i32 = -30595;
pub const anon27431_errItemNotControl: i32 = -30596;
pub const anon27431_controlInvalidDataVersionErr: i32 = -30597;
pub const anon27431_controlPropertyInvalid: i32 = -5603;
pub const anon27431_controlPropertyNotFoundErr: i32 = -5604;
pub const anon27431_controlHandleInvalidErr: i32 = -30599;

pub const anon28871 = i32;
pub const anon28871_URLInvalidURLReferenceError: i32 = -30770;
pub const anon28871_URLProgressAlreadyDisplayedError: i32 = -30771;
pub const anon28871_URLDestinationExistsError: i32 = -30772;
pub const anon28871_URLInvalidURLError: i32 = -30773;
pub const anon28871_URLUnsupportedSchemeError: i32 = -30774;
pub const anon28871_URLServerBusyError: i32 = -30775;
pub const anon28871_URLAuthenticationError: i32 = -30776;
pub const anon28871_URLPropertyNotYetKnownError: i32 = -30777;
pub const anon28871_URLUnknownPropertyError: i32 = -30778;
pub const anon28871_URLPropertyBufferTooSmallError: i32 = -30779;
pub const anon28871_URLUnsettablePropertyError: i32 = -30780;
pub const anon28871_URLInvalidCallError: i32 = -30781;
pub const anon28871_URLFileEmptyError: i32 = -30783;
pub const anon28871_URLExtensionFailureError: i32 = -30785;
pub const anon28871_URLInvalidConfigurationError: i32 = -30786;
pub const anon28871_URLAccessNotAvailableError: i32 = -30787;
pub const anon28871_URL68kNotSupportedError: i32 = -30788;

pub const anon29161 = i32;
pub const anon29161_errCppGeneral: i32 = -32000;
pub const anon29161_errCppbad_alloc: i32 = -32001;
pub const anon29161_errCppbad_cast: i32 = -32002;
pub const anon29161_errCppbad_exception: i32 = -32003;
pub const anon29161_errCppbad_typeid: i32 = -32004;
pub const anon29161_errCpplogic_error: i32 = -32005;
pub const anon29161_errCppdomain_error: i32 = -32006;
pub const anon29161_errCppinvalid_argument: i32 = -32007;
pub const anon29161_errCpplength_error: i32 = -32008;
pub const anon29161_errCppout_of_range: i32 = -32009;
pub const anon29161_errCppruntime_error: i32 = -32010;
pub const anon29161_errCppoverflow_error: i32 = -32011;
pub const anon29161_errCpprange_error: i32 = -32012;
pub const anon29161_errCppunderflow_error: i32 = -32013;
pub const anon29161_errCppios_base_failure: i32 = -32014;
pub const anon29161_errCppLastSystemDefinedError: i32 = -32020;
pub const anon29161_errCppLastUserDefinedError: i32 = -32049;

pub const anon29371 = i32;
pub const anon29371_badComponentInstance: i32 = -2147450879;
pub const anon29371_badComponentSelector: i32 = -2147450878;

pub const anon29441 = u32;
pub const anon29441_dsBusError: u32 = 1;
pub const anon29441_dsAddressErr: u32 = 2;
pub const anon29441_dsIllInstErr: u32 = 3;
pub const anon29441_dsZeroDivErr: u32 = 4;
pub const anon29441_dsChkErr: u32 = 5;
pub const anon29441_dsOvflowErr: u32 = 6;
pub const anon29441_dsPrivErr: u32 = 7;
pub const anon29441_dsTraceErr: u32 = 8;
pub const anon29441_dsLineAErr: u32 = 9;
pub const anon29441_dsLineFErr: u32 = 10;
pub const anon29441_dsMiscErr: u32 = 11;
pub const anon29441_dsCoreErr: u32 = 12;
pub const anon29441_dsIrqErr: u32 = 13;
pub const anon29441_dsIOCoreErr: u32 = 14;
pub const anon29441_dsLoadErr: u32 = 15;
pub const anon29441_dsFPErr: u32 = 16;
pub const anon29441_dsNoPackErr: u32 = 17;
pub const anon29441_dsNoPk1: u32 = 18;
pub const anon29441_dsNoPk2: u32 = 19;

pub const anon29661 = u32;
pub const anon29661_dsNoPk3: u32 = 20;
pub const anon29661_dsNoPk4: u32 = 21;
pub const anon29661_dsNoPk5: u32 = 22;
pub const anon29661_dsNoPk6: u32 = 23;
pub const anon29661_dsNoPk7: u32 = 24;
pub const anon29661_dsMemFullErr: u32 = 25;
pub const anon29661_dsBadLaunch: u32 = 26;
pub const anon29661_dsFSErr: u32 = 27;
pub const anon29661_dsStknHeap: u32 = 28;
pub const anon29661_negZcbFreeErr: u32 = 33;
pub const anon29661_dsFinderErr: u32 = 41;
pub const anon29661_dsBadSlotInt: u32 = 51;
pub const anon29661_dsBadSANEOpcode: u32 = 81;
pub const anon29661_dsBadPatchHeader: u32 = 83;
pub const anon29661_menuPrgErr: u32 = 84;
pub const anon29661_dsMBarNFnd: u32 = 85;
pub const anon29661_dsHMenuFindErr: u32 = 86;
pub const anon29661_dsWDEFNotFound: u32 = 87;
pub const anon29661_dsCDEFNotFound: u32 = 88;
pub const anon29661_dsMDEFNotFound: u32 = 89;

pub const anon29891 = u32;
pub const anon29891_dsNoFPU: u32 = 90;
pub const anon29891_dsNoPatch: u32 = 98;
pub const anon29891_dsBadPatch: u32 = 99;
pub const anon29891_dsParityErr: u32 = 101;
pub const anon29891_dsOldSystem: u32 = 102;
pub const anon29891_ds32BitMode: u32 = 103;
pub const anon29891_dsNeedToWriteBootBlocks: u32 = 104;
pub const anon29891_dsNotEnoughRAMToBoot: u32 = 105;
pub const anon29891_dsBufPtrTooLow: u32 = 106;
pub const anon29891_dsVMDeferredFuncTableFull: u32 = 112;
pub const anon29891_dsVMBadBackingStore: u32 = 113;
pub const anon29891_dsCantHoldSystemHeap: u32 = 114;
pub const anon29891_dsSystemRequiresPowerPC: u32 = 116;
pub const anon29891_dsGibblyMovedToDisabledFolder: u32 = 117;
pub const anon29891_dsUnBootableSystem: u32 = 118;
pub const anon29891_dsMustUseFCBAccessors: u32 = 119;
pub const anon29891_dsMacOSROMVersionTooOld: u32 = 120;
pub const anon29891_dsLostConnectionToNetworkDisk: u32 = 121;
pub const anon29891_dsRAMDiskTooBig: u32 = 122;
pub const anon29891_dsWriteToSupervisorStackGuardPage: u32 = 128;
pub const anon29891_dsReinsert: u32 = 30;
pub const anon29891_shutDownAlert: u32 = 42;
pub const anon29891_dsShutDownOrRestart: u32 = 20000;
pub const anon29891_dsSwitchOffOrRestart: u32 = 20001;
pub const anon29891_dsForcedQuit: u32 = 20002;
pub const anon29891_dsRemoveDisk: u32 = 20003;
pub const anon29891_dsDirtyDisk: u32 = 20004;
pub const anon29891_dsShutDownOrResume: u32 = 20109;
pub const anon29891_dsSCSIWarn: u32 = 20010;
pub const anon29891_dsMBSysError: u32 = 29200;
pub const anon29891_dsMBFlpySysError: u32 = 29201;
pub const anon29891_dsMBATASysError: u32 = 29202;
pub const anon29891_dsMBATAPISysError: u32 = 29203;
pub const anon29891_dsMBExternFlpySysError: u32 = 29204;
pub const anon29891_dsPCCardATASysError: u32 = 29205;

pub const anon30321 = i32;
pub const anon30321_dsNoExtsMacsBug: i32 = -1;
pub const anon30321_dsNoExtsDisassembler: i32 = -2;
pub const anon30321_dsMacsBugInstalled: i32 = -10;
pub const anon30321_dsDisassemblerInstalled: i32 = -11;
pub const anon30321_dsExtensionsDisabled: i32 = -13;
pub const anon30321_dsGreeting: i32 = 40;
pub const anon30321_dsSysErr: i32 = 32767;
pub const anon30321_WDEFNFnd: i32 = 87;

pub const anon30441 = i32;
pub const anon30441_CDEFNFnd: i32 = 88;
pub const anon30441_dsNotThe1: i32 = 31;
pub const anon30441_dsBadStartupDisk: i32 = 42;
pub const anon30441_dsSystemFileErr: i32 = 43;
pub const anon30441_dsHD20Installed: i32 = -12;
pub const anon30441_mBarNFnd: i32 = -126;
pub const anon30441_fsDSIntErr: i32 = -127;
pub const anon30441_hMenuFindErr: i32 = -127;
pub const anon30441_userBreak: i32 = -490;
pub const anon30441_strUserBreak: i32 = -491;
pub const anon30441_exUserBreak: i32 = -492;

pub const anon30591 = u32;
pub const anon30591_dsBadLibrary: u32 = 1010;
pub const anon30591_dsMixedModeFailure: u32 = 1011;

pub const anon30721 = u32;
pub const anon30721_POSIXErrorBase: u32 = 100000;
pub const anon30721_POSIXErrorEPERM: u32 = 100001;
pub const anon30721_POSIXErrorENOENT: u32 = 100002;
pub const anon30721_POSIXErrorESRCH: u32 = 100003;
pub const anon30721_POSIXErrorEINTR: u32 = 100004;
pub const anon30721_POSIXErrorEIO: u32 = 100005;
pub const anon30721_POSIXErrorENXIO: u32 = 100006;
pub const anon30721_POSIXErrorE2BIG: u32 = 100007;
pub const anon30721_POSIXErrorENOEXEC: u32 = 100008;
pub const anon30721_POSIXErrorEBADF: u32 = 100009;
pub const anon30721_POSIXErrorECHILD: u32 = 100010;
pub const anon30721_POSIXErrorEDEADLK: u32 = 100011;
pub const anon30721_POSIXErrorENOMEM: u32 = 100012;
pub const anon30721_POSIXErrorEACCES: u32 = 100013;
pub const anon30721_POSIXErrorEFAULT: u32 = 100014;
pub const anon30721_POSIXErrorENOTBLK: u32 = 100015;
pub const anon30721_POSIXErrorEBUSY: u32 = 100016;
pub const anon30721_POSIXErrorEEXIST: u32 = 100017;
pub const anon30721_POSIXErrorEXDEV: u32 = 100018;
pub const anon30721_POSIXErrorENODEV: u32 = 100019;
pub const anon30721_POSIXErrorENOTDIR: u32 = 100020;
pub const anon30721_POSIXErrorEISDIR: u32 = 100021;
pub const anon30721_POSIXErrorEINVAL: u32 = 100022;
pub const anon30721_POSIXErrorENFILE: u32 = 100023;
pub const anon30721_POSIXErrorEMFILE: u32 = 100024;
pub const anon30721_POSIXErrorENOTTY: u32 = 100025;
pub const anon30721_POSIXErrorETXTBSY: u32 = 100026;
pub const anon30721_POSIXErrorEFBIG: u32 = 100027;
pub const anon30721_POSIXErrorENOSPC: u32 = 100028;
pub const anon30721_POSIXErrorESPIPE: u32 = 100029;
pub const anon30721_POSIXErrorEROFS: u32 = 100030;
pub const anon30721_POSIXErrorEMLINK: u32 = 100031;
pub const anon30721_POSIXErrorEPIPE: u32 = 100032;
pub const anon30721_POSIXErrorEDOM: u32 = 100033;
pub const anon30721_POSIXErrorERANGE: u32 = 100034;
pub const anon30721_POSIXErrorEAGAIN: u32 = 100035;
pub const anon30721_POSIXErrorEINPROGRESS: u32 = 100036;
pub const anon30721_POSIXErrorEALREADY: u32 = 100037;
pub const anon30721_POSIXErrorENOTSOCK: u32 = 100038;
pub const anon30721_POSIXErrorEDESTADDRREQ: u32 = 100039;
pub const anon30721_POSIXErrorEMSGSIZE: u32 = 100040;
pub const anon30721_POSIXErrorEPROTOTYPE: u32 = 100041;
pub const anon30721_POSIXErrorENOPROTOOPT: u32 = 100042;
pub const anon30721_POSIXErrorEPROTONOSUPPORT: u32 = 100043;
pub const anon30721_POSIXErrorESOCKTNOSUPPORT: u32 = 100044;
pub const anon30721_POSIXErrorENOTSUP: u32 = 100045;
pub const anon30721_POSIXErrorEPFNOSUPPORT: u32 = 100046;
pub const anon30721_POSIXErrorEAFNOSUPPORT: u32 = 100047;
pub const anon30721_POSIXErrorEADDRINUSE: u32 = 100048;
pub const anon30721_POSIXErrorEADDRNOTAVAIL: u32 = 100049;
pub const anon30721_POSIXErrorENETDOWN: u32 = 100050;
pub const anon30721_POSIXErrorENETUNREACH: u32 = 100051;
pub const anon30721_POSIXErrorENETRESET: u32 = 100052;
pub const anon30721_POSIXErrorECONNABORTED: u32 = 100053;
pub const anon30721_POSIXErrorECONNRESET: u32 = 100054;
pub const anon30721_POSIXErrorENOBUFS: u32 = 100055;
pub const anon30721_POSIXErrorEISCONN: u32 = 100056;
pub const anon30721_POSIXErrorENOTCONN: u32 = 100057;
pub const anon30721_POSIXErrorESHUTDOWN: u32 = 100058;
pub const anon30721_POSIXErrorETOOMANYREFS: u32 = 100059;
pub const anon30721_POSIXErrorETIMEDOUT: u32 = 100060;
pub const anon30721_POSIXErrorECONNREFUSED: u32 = 100061;
pub const anon30721_POSIXErrorELOOP: u32 = 100062;
pub const anon30721_POSIXErrorENAMETOOLONG: u32 = 100063;
pub const anon30721_POSIXErrorEHOSTDOWN: u32 = 100064;
pub const anon30721_POSIXErrorEHOSTUNREACH: u32 = 100065;
pub const anon30721_POSIXErrorENOTEMPTY: u32 = 100066;
pub const anon30721_POSIXErrorEPROCLIM: u32 = 100067;
pub const anon30721_POSIXErrorEUSERS: u32 = 100068;
pub const anon30721_POSIXErrorEDQUOT: u32 = 100069;
pub const anon30721_POSIXErrorESTALE: u32 = 100070;
pub const anon30721_POSIXErrorEREMOTE: u32 = 100071;
pub const anon30721_POSIXErrorEBADRPC: u32 = 100072;
pub const anon30721_POSIXErrorERPCMISMATCH: u32 = 100073;
pub const anon30721_POSIXErrorEPROGUNAVAIL: u32 = 100074;
pub const anon30721_POSIXErrorEPROGMISMATCH: u32 = 100075;
pub const anon30721_POSIXErrorEPROCUNAVAIL: u32 = 100076;
pub const anon30721_POSIXErrorENOLCK: u32 = 100077;
pub const anon30721_POSIXErrorENOSYS: u32 = 100078;
pub const anon30721_POSIXErrorEFTYPE: u32 = 100079;
pub const anon30721_POSIXErrorEAUTH: u32 = 100080;
pub const anon30721_POSIXErrorENEEDAUTH: u32 = 100081;
pub const anon30721_POSIXErrorEPWROFF: u32 = 100082;
pub const anon30721_POSIXErrorEDEVERR: u32 = 100083;
pub const anon30721_POSIXErrorEOVERFLOW: u32 = 100084;
pub const anon30721_POSIXErrorEBADEXEC: u32 = 100085;
pub const anon30721_POSIXErrorEBADARCH: u32 = 100086;
pub const anon30721_POSIXErrorESHLIBVERS: u32 = 100087;
pub const anon30721_POSIXErrorEBADMACHO: u32 = 100088;
pub const anon30721_POSIXErrorECANCELED: u32 = 100089;
pub const anon30721_POSIXErrorEIDRM: u32 = 100090;
pub const anon30721_POSIXErrorENOMSG: u32 = 100091;
pub const anon30721_POSIXErrorEILSEQ: u32 = 100092;
pub const anon30721_POSIXErrorENOATTR: u32 = 100093;
pub const anon30721_POSIXErrorEBADMSG: u32 = 100094;
pub const anon30721_POSIXErrorEMULTIHOP: u32 = 100095;
pub const anon30721_POSIXErrorENODATA: u32 = 100096;
pub const anon30721_POSIXErrorENOLINK: u32 = 100097;
pub const anon30721_POSIXErrorENOSR: u32 = 100098;
pub const anon30721_POSIXErrorENOSTR: u32 = 100099;
pub const anon30721_POSIXErrorEPROTO: u32 = 100100;
pub const anon30721_POSIXErrorETIME: u32 = 100101;
pub const anon30721_POSIXErrorEOPNOTSUPP: u32 = 100102;

pub extern "CoreServices" fn SysError(errorCode: i16) callconv(.C) void;

pub const anon411 = u32;
pub const anon411_UTCDefaultOptions: u32 = 0;
pub const anon411_RoutineDescriptorVersion: u32 = 7;
pub const anon411_typeBoolean: u32 = 1651470188;
pub const anon411_typeChar: u32 = 1413830740;
pub const anon411_AEAND: u32 = 1095648288;
pub const anon411_AEOR: u32 = 1330782240;
pub const anon411_AENOT: u32 = 1313821728;
pub const anon411_AEFirst: u32 = 1718186611;
pub const anon411_AELast: u32 = 1818325876;
pub const anon411_AEMiddle: u32 = 1835623524;
pub const anon411_AEAny: u32 = 1634629920;
pub const anon411_AEAll: u32 = 1634495520;
pub const anon411_AENext: u32 = 1852143732;
pub const anon411_AEPrevious: u32 = 1886545270;
pub const anon411_eyAECompOperator: u32 = 1919249519;
pub const anon411_eyAELogicalTerms: u32 = 1952805485;
pub const anon411_eyAELogicalOperator: u32 = 1819240291;
pub const anon411_eyAEObject1: u32 = 1868720689;
pub const anon411_eyAEObject2: u32 = 1868720690;
pub const anon411_eyAEDesiredClass: u32 = 2002873972;
pub const anon411_eyAEContainer: u32 = 1718775661;
pub const anon411_eyAEKeyForm: u32 = 1718579821;
pub const anon411_eyAEKeyData: u32 = 1936026724;

pub const UTCDateTime = extern struct {
    highSeconds: objc.UInt16,
    lowSeconds: objc.UInt32,
    fraction: objc.UInt16,
};

pub const UTCDateTimePtr = UTCDateTime;

pub const UTCDateTimeHandle = UTCDateTimePtr;

pub const LocalDateTime = extern struct {
    highSeconds: objc.UInt16,
    lowSeconds: objc.UInt32,
    fraction: objc.UInt16,
};

pub const LocalDateTimePtr = LocalDateTime;

pub const LocalDateTimeHandle = LocalDateTimePtr;

pub const anon481 = i32;
pub const anon481_TextFlushDefault: i32 = 0;
pub const anon481_TextCenter: i32 = 1;
pub const anon481_TextFlushRight: i32 = -1;
pub const anon481_TextFlushLeft: i32 = -2;
pub const anon481_CollectionNoAttributes: i32 = 0;
pub const anon481_CollectionAllAttributes: i32 = -1;
pub const anon481_CollectionUserAttributes: i32 = 65535;
pub const anon481_CollectionDefaultAttributes: i32 = 1073741824;
pub const anon481_sortsBefore: i32 = -1;
pub const anon481_sortsEqual: i32 = 0;
pub const anon481_sortsAfter: i32 = 1;
pub const anon481_rAliasType: i32 = 1634494835;
pub const anon481_LocaleLanguageMask: i32 = 1;
pub const anon481_LocaleLanguageVariantMask: i32 = 2;
pub const anon481_LocaleScriptMask: i32 = 4;
pub const anon481_LocaleScriptVariantMask: i32 = 8;
pub const anon481_LocaleRegionMask: i32 = 16;
pub const anon481_LocaleRegionVariantMask: i32 = 32;
pub const anon481_LocaleAllPartsMask: i32 = 63;
pub const anon481_SleepRequest: i32 = 1;
pub const anon481_SleepDemand: i32 = 2;
pub const anon481_SleepWakeUp: i32 = 3;
pub const anon481_SleepRevoke: i32 = 4;
pub const anon481_SleepUnlock: i32 = 4;
pub const anon481_SleepDeny: i32 = 5;
pub const anon481_SleepNow: i32 = 6;
pub const anon481_DozeDemand: i32 = 7;
pub const anon481_DozeWakeUp: i32 = 8;
pub const anon481_DozeRequest: i32 = 9;
pub const anon481_EnterStandby: i32 = 10;
pub const anon481_EnterRun: i32 = 11;
pub const anon481_SuspendRequest: i32 = 12;
pub const anon481_SuspendDemand: i32 = 13;
pub const anon481_SuspendRevoke: i32 = 14;
pub const anon481_SuspendWakeUp: i32 = 15;
pub const anon481_GetPowerLevel: i32 = 16;
pub const anon481_SetPowerLevel: i32 = 17;
pub const anon481_DeviceInitiatedWake: i32 = 18;
pub const anon481_WakeToDoze: i32 = 19;
pub const anon481_DozeToFullWakeUp: i32 = 20;
pub const anon481_GetPowerInfo: i32 = 21;
pub const anon481_GetWakeOnNetInfo: i32 = 22;
pub const anon481_SuspendWakeToDoze: i32 = 23;
pub const anon481_EnterIdle: i32 = 24;
pub const anon481_StillIdle: i32 = 25;
pub const anon481_ExitIdle: i32 = 26;

pub const TextEncodingBase = objc.UInt32;

pub const anon1191 = u32;
pub const anon1191_TextEncodingMacTradChinese: u32 = 2;
pub const anon1191_TextEncodingMacRSymbol: u32 = 8;
pub const anon1191_TextEncodingMacSimpChinese: u32 = 25;
pub const anon1191_TextEncodingMacGeez: u32 = 28;
pub const anon1191_TextEncodingMacEastEurRoman: u32 = 29;
pub const anon1191_TextEncodingMacUninterp: u32 = 32;

pub const anon1431 = u32;
pub const anon1431_TextEncodingMacFarsi: u32 = 140;
pub const anon1431_TextEncodingMacUkrainian: u32 = 152;
pub const anon1431_TextEncodingMacInuit: u32 = 236;
pub const anon1431_TextEncodingMacVT100: u32 = 252;

pub const anon1541 = u32;
pub const anon1541_TextEncodingMacHFS: u32 = 255;
pub const anon1541_UseCurrentISA: u32 = 0;
pub const anon1541_UseNativeISA: u32 = 4;
pub const anon1541___fpcr_trap_invalid: u32 = 256;
pub const anon1541___fpcr_trap_divbyzero: u32 = 512;
pub const anon1541___fpcr_trap_overflow: u32 = 1024;
pub const anon1541___fpcr_trap_underflow: u32 = 2048;
pub const anon1541___fpcr_trap_inexact: u32 = 4096;
pub const anon1541___fpcr_trap_denormal: u32 = 32768;
pub const anon1541___fpcr_flush_to_zero: u32 = 16777216;

pub const anon1591 = u32;
pub const anon1591_TextEncodingUnicodeDefault: u32 = 256;
pub const anon1591_TextEncodingUnicodeV1_1: u32 = 257;
pub const anon1591_TextEncodingISO10646_1993: u32 = 257;
pub const anon1591_TextEncodingUnicodeV2_0: u32 = 259;
pub const anon1591_TextEncodingUnicodeV2_1: u32 = 259;
pub const anon1591_TextEncodingUnicodeV3_0: u32 = 260;
pub const anon1591_TextEncodingUnicodeV3_1: u32 = 261;
pub const anon1591_TextEncodingUnicodeV3_2: u32 = 262;
pub const anon1591_TextEncodingUnicodeV4_0: u32 = 264;
pub const anon1591_TextEncodingUnicodeV5_0: u32 = 266;
pub const anon1591_TextEncodingUnicodeV5_1: u32 = 267;
pub const anon1591_TextEncodingUnicodeV6_0: u32 = 269;
pub const anon1591_TextEncodingUnicodeV6_1: u32 = 270;
pub const anon1591_TextEncodingUnicodeV6_3: u32 = 272;
pub const anon1591_TextEncodingUnicodeV7_0: u32 = 273;
pub const anon1591_TextEncodingUnicodeV8_0: u32 = 274;
pub const anon1591_TextEncodingUnicodeV9_0: u32 = 275;
pub const anon1591_TextEncodingUnicodeV10_0: u32 = 276;
pub const anon1591_TextEncodingUnicodeV11_0: u32 = 277;
pub const anon1591_TextEncodingUnicodeV12_1: u32 = 278;
pub const anon1591_TextEncodingUnicodeV13_0: u32 = 279;
pub const anon1591_TextEncodingUnicodeV14_0: u32 = 280;
pub const anon1591_TextEncodingUnicodeV15_0: u32 = 281;
pub const anon1591_TextEncodingUnicodeV15_1: u32 = 282;
pub const anon1591_PassSelector: u32 = 0;
pub const anon1591_DontPassSelector: u32 = 8;

pub const anon1871 = u32;
pub const anon1871_TextEncodingISOLatin1: u32 = 513;
pub const anon1871_TextEncodingISOLatin2: u32 = 514;
pub const anon1871_TextEncodingISOLatin3: u32 = 515;
pub const anon1871_TextEncodingISOLatin4: u32 = 516;
pub const anon1871_TextEncodingISOLatinCyrillic: u32 = 517;
pub const anon1871_TextEncodingISOLatinArabic: u32 = 518;
pub const anon1871_TextEncodingISOLatinGreek: u32 = 519;
pub const anon1871_TextEncodingISOLatinHebrew: u32 = 520;
pub const anon1871_TextEncodingISOLatin5: u32 = 521;
pub const anon1871_TextEncodingISOLatin6: u32 = 522;
pub const anon1871_TextEncodingISOLatin7: u32 = 525;
pub const anon1871_TextEncodingISOLatin8: u32 = 526;
pub const anon1871_TextEncodingISOLatin9: u32 = 527;
pub const anon1871_TextEncodingISOLatin10: u32 = 528;
pub const anon1871_CSSM_ACL_KEYCHAIN_PROMPT_REQUIRE_PASSPHRASE: u32 = 1;
pub const anon1871_CSSM_ACL_KEYCHAIN_PROMPT_UNSIGNED: u32 = 16;
pub const anon1871_CSSM_ACL_KEYCHAIN_PROMPT_UNSIGNED_ACT: u32 = 32;
pub const anon1871_CSSM_ACL_KEYCHAIN_PROMPT_INVALID: u32 = 64;
pub const anon1871_CSSM_ACL_KEYCHAIN_PROMPT_INVALID_ACT: u32 = 128;

pub const anon2051 = u32;
pub const anon2051_TextEncodingDOSLatinUS: u32 = 1024;
pub const anon2051_TextEncodingDOSGreek: u32 = 1029;
pub const anon2051_TextEncodingDOSBalticRim: u32 = 1030;
pub const anon2051_TextEncodingDOSLatin1: u32 = 1040;
pub const anon2051_TextEncodingDOSGreek1: u32 = 1041;
pub const anon2051_TextEncodingDOSLatin2: u32 = 1042;
pub const anon2051_TextEncodingDOSCyrillic: u32 = 1043;
pub const anon2051_TextEncodingDOSTurkish: u32 = 1044;
pub const anon2051_TextEncodingDOSPortuguese: u32 = 1045;
pub const anon2051_TextEncodingDOSIcelandic: u32 = 1046;
pub const anon2051_TextEncodingDOSHebrew: u32 = 1047;
pub const anon2051_TextEncodingDOSCanadianFrench: u32 = 1048;
pub const anon2051_TextEncodingDOSArabic: u32 = 1049;
pub const anon2051_TextEncodingDOSNordic: u32 = 1050;
pub const anon2051_TextEncodingDOSRussian: u32 = 1051;
pub const anon2051_TextEncodingDOSGreek2: u32 = 1052;
pub const anon2051_TextEncodingDOSThai: u32 = 1053;
pub const anon2051_TextEncodingDOSJapanese: u32 = 1056;
pub const anon2051_TextEncodingDOSChineseSimplif: u32 = 1057;
pub const anon2051_TextEncodingDOSKorean: u32 = 1058;
pub const anon2051_TextEncodingDOSChineseTrad: u32 = 1059;
pub const anon2051_TextEncodingWindowsLatin1: u32 = 1280;
pub const anon2051_TextEncodingWindowsANSI: u32 = 1280;
pub const anon2051_TextEncodingWindowsLatin2: u32 = 1281;
pub const anon2051_TextEncodingWindowsCyrillic: u32 = 1282;
pub const anon2051_TextEncodingWindowsGreek: u32 = 1283;
pub const anon2051_TextEncodingWindowsLatin5: u32 = 1284;
pub const anon2051_TextEncodingWindowsHebrew: u32 = 1285;
pub const anon2051_TextEncodingWindowsArabic: u32 = 1286;
pub const anon2051_TextEncodingWindowsBalticRim: u32 = 1287;
pub const anon2051_TextEncodingWindowsVietnamese: u32 = 1288;
pub const anon2051_TextEncodingWindowsKoreanJohab: u32 = 1296;
pub const anon2051_SecNoGuest: u32 = 0;

pub const anon2411 = u32;
pub const anon2411_TextEncodingUS_ASCII: u32 = 1536;
pub const anon2411_TextEncodingANSEL: u32 = 1537;
pub const anon2411_TextEncodingJIS_X0201_76: u32 = 1568;
pub const anon2411_TextEncodingJIS_X0208_83: u32 = 1569;
pub const anon2411_TextEncodingJIS_X0208_90: u32 = 1570;
pub const anon2411_TextEncodingJIS_X0212_90: u32 = 1571;
pub const anon2411_TextEncodingJIS_C6226_78: u32 = 1572;
pub const anon2411_TextEncodingShiftJIS_X0213: u32 = 1576;
pub const anon2411_TextEncodingJIS_X0213_MenKuTen: u32 = 1577;
pub const anon2411_TextEncodingGB_2312_80: u32 = 1584;
pub const anon2411_TextEncodingGBK_95: u32 = 1585;
pub const anon2411_TextEncodingGB_18030_2000: u32 = 1586;
pub const anon2411_TextEncodingGB_18030_2005: u32 = 1586;
pub const anon2411_TextEncodingKSC_5601_87: u32 = 1600;
pub const anon2411_TextEncodingKSC_5601_92_Johab: u32 = 1601;
pub const anon2411_TextEncodingCNS_11643_92_P1: u32 = 1617;
pub const anon2411_TextEncodingCNS_11643_92_P2: u32 = 1618;
pub const anon2411_TextEncodingCNS_11643_92_P3: u32 = 1619;

pub const anon2631 = u32;
pub const anon2631_TextEncodingISO_2022_JP: u32 = 2080;
pub const anon2631_TextEncodingISO_2022_JP_2: u32 = 2081;
pub const anon2631_TextEncodingISO_2022_JP_1: u32 = 2082;
pub const anon2631_TextEncodingISO_2022_JP_3: u32 = 2083;
pub const anon2631_TextEncodingISO_2022_CN: u32 = 2096;
pub const anon2631_TextEncodingISO_2022_CN_EXT: u32 = 2097;
pub const anon2631_TextEncodingISO_2022_KR: u32 = 2112;

pub const anon2741 = u32;
pub const anon2741_TextEncodingEUC_JP: u32 = 2336;
pub const anon2741_TextEncodingEUC_CN: u32 = 2352;
pub const anon2741_TextEncodingEUC_TW: u32 = 2353;
pub const anon2741_TextEncodingEUC_KR: u32 = 2368;
pub const anon2741_AEMouseClass: u32 = 1836021107;
pub const anon2741_AEDown: u32 = 1685026670;
pub const anon2741_AEUp: u32 = 1970282528;
pub const anon2741_AEMoved: u32 = 1836021349;
pub const anon2741_AEStoppedMoving: u32 = 1937010544;
pub const anon2741_AEWindowClass: u32 = 2003398244;
pub const anon2741_AEUpdate: u32 = 1970300020;
pub const anon2741_AEActivate: u32 = 1633907830;
pub const anon2741_AEDeactivate: u32 = 1684104052;
pub const anon2741_AECommandClass: u32 = 1668116068;
pub const anon2741_AEKeyClass: u32 = 1801812323;
pub const anon2741_AERawKey: u32 = 1919640953;
pub const anon2741_AEVirtualKey: u32 = 1801812323;
pub const anon2741_AENavigationKey: u32 = 1851881061;
pub const anon2741_AEAutoDown: u32 = 1635087471;
pub const anon2741_AEApplicationClass: u32 = 1634758764;
pub const anon2741_AESuspend: u32 = 1937077104;
pub const anon2741_AEResume: u32 = 1920167269;
pub const anon2741_AEDiskEvent: u32 = 1684632427;
pub const anon2741_AENullEvent: u32 = 1853189228;
pub const anon2741_AEWakeUpEvent: u32 = 2002873189;
pub const anon2741_AEScrapEvent: u32 = 1935897200;
pub const anon2741_AEHighLevel: u32 = 1751738216;

pub const anon2821 = u32;
pub const anon2821_TextEncodingShiftJIS: u32 = 2561;
pub const anon2821_TextEncodingKOI8_R: u32 = 2562;
pub const anon2821_TextEncodingBig5: u32 = 2563;
pub const anon2821_TextEncodingMacRomanLatin1: u32 = 2564;
pub const anon2821_TextEncodingHZ_GB_2312: u32 = 2565;
pub const anon2821_TextEncodingBig5_HKSCS_1999: u32 = 2566;
pub const anon2821_TextEncodingVISCII: u32 = 2567;
pub const anon2821_TextEncodingKOI8_U: u32 = 2568;
pub const anon2821_TextEncodingBig5_E: u32 = 2569;

pub const anon2951 = u32;
pub const anon2951_TextEncodingNextStepLatin: u32 = 2817;
pub const anon2951_TextEncodingNextStepJapanese: u32 = 2818;

pub const anon3011 = u32;
pub const anon3011_TextEncodingEBCDIC_LatinCore: u32 = 3073;
pub const anon3011_TextEncodingEBCDIC_CP037: u32 = 3074;
pub const anon3011_BlessedBusErrorBait: u32 = 1760651505;

pub const anon3071 = u32;
pub const anon3071_TextEncodingMultiRun: u32 = 4095;
pub const anon3071_TextEncodingUnknown: u32 = 65535;

pub const anon3131 = u32;
pub const anon3131_TextEncodingEBCDIC_US: u32 = 3073;
pub const anon3131_noUser: u32 = 0;
pub const anon3131_administratorUser: u32 = 1;
pub const anon3131_AESocks4Protocol: u32 = 4;
pub const anon3131_AESocks5Protocol: u32 = 5;

pub const TextEncodingVariant = objc.UInt32;

pub const anon3211 = u32;
pub const anon3211_TextEncodingDefaultVariant: u32 = 0;

pub const anon3261 = u32;
pub const anon3261_MacRomanDefaultVariant: u32 = 0;
pub const anon3261_MacRomanCurrencySignVariant: u32 = 1;
pub const anon3261_MacRomanEuroSignVariant: u32 = 2;

pub const anon3331 = u32;
pub const anon3331_MacCyrillicDefaultVariant: u32 = 0;
pub const anon3331_MacCyrillicCurrSignStdVariant: u32 = 1;
pub const anon3331_MacCyrillicCurrSignUkrVariant: u32 = 2;
pub const anon3331_MacCyrillicEuroSignVariant: u32 = 3;

pub const anon3411 = u32;
pub const anon3411_MacIcelandicStdDefaultVariant: u32 = 0;
pub const anon3411_MacIcelandicTTDefaultVariant: u32 = 1;
pub const anon3411_MacIcelandicStdCurrSignVariant: u32 = 2;
pub const anon3411_MacIcelandicTTCurrSignVariant: u32 = 3;
pub const anon3411_MacIcelandicStdEuroSignVariant: u32 = 4;
pub const anon3411_MacIcelandicTTEuroSignVariant: u32 = 5;
pub const anon3411_DocumentsFolderType: u32 = 1685021555;
pub const anon3411_PictureDocumentsFolderType: u32 = 1885630307;
pub const anon3411_MovieDocumentsFolderType: u32 = 1835298659;
pub const anon3411_MusicDocumentsFolderType: u32 = -1251709085;
pub const anon3411_InternetSitesFolderType: u32 = 1936290917;
pub const anon3411_PublicFolderType: u32 = 1886741090;
pub const anon3411_HFSFileLockedBit: u32 = 0;
pub const anon3411_HFSFileLockedMask: u32 = 1;
pub const anon3411_HFSThreadExistsBit: u32 = 1;
pub const anon3411_HFSThreadExistsMask: u32 = 2;
pub const anon3411_HFSHasAttributesBit: u32 = 2;
pub const anon3411_HFSHasAttributesMask: u32 = 4;
pub const anon3411_HFSHasSecurityBit: u32 = 3;
pub const anon3411_HFSHasSecurityMask: u32 = 8;
pub const anon3411_HFSHasFolderCountBit: u32 = 4;
pub const anon3411_HFSHasFolderCountMask: u32 = 16;
pub const anon3411_HFSHasLinkChainBit: u32 = 5;
pub const anon3411_HFSHasLinkChainMask: u32 = 32;
pub const anon3411_HFSHasChildLinkBit: u32 = 6;
pub const anon3411_HFSHasChildLinkMask: u32 = 64;
pub const anon3411_HFSHasDateAddedBit: u32 = 7;
pub const anon3411_HFSHasDateAddedMask: u32 = 128;
pub const anon3411_HFSFastDevPinnedBit: u32 = 8;
pub const anon3411_HFSFastDevPinnedMask: u32 = 256;
pub const anon3411_HFSDoNotFastDevPinBit: u32 = 9;
pub const anon3411_HFSDoNotFastDevPinMask: u32 = 512;
pub const anon3411_HFSFastDevCandidateBit: u32 = 10;
pub const anon3411_HFSFastDevCandidateMask: u32 = 1024;
pub const anon3411_HFSAutoCandidateBit: u32 = 11;
pub const anon3411_HFSAutoCandidateMask: u32 = 2048;
pub const anon3411_HFSCatExpandedTimesBit: u32 = 12;
pub const anon3411_HFSCatExpandedTimesMask: u32 = 4096;

pub const anon3531 = u32;
pub const anon3531_MacCroatianDefaultVariant: u32 = 0;
pub const anon3531_MacCroatianCurrencySignVariant: u32 = 1;
pub const anon3531_MacCroatianEuroSignVariant: u32 = 2;

pub const anon3691 = u32;
pub const anon3691_MacJapaneseStandardVariant: u32 = 0;
pub const anon3691_MacJapaneseStdNoVerticalsVariant: u32 = 1;
pub const anon3691_MacJapaneseBasicVariant: u32 = 2;
pub const anon3691_MacJapanesePostScriptScrnVariant: u32 = 3;
pub const anon3691_MacJapanesePostScriptPrintVariant: u32 = 4;
pub const anon3691_MacJapaneseVertAtKuPlusTenVariant: u32 = 5;
pub const anon3691_AppleLogoIcon: u32 = 1667330156;
pub const anon3691_AppleMenuIcon: u32 = 1935765612;
pub const anon3691_BackwardArrowIcon: u32 = 1650553455;
pub const anon3691_FavoriteItemsIcon: u32 = 1717663346;
pub const anon3691_ForwardArrowIcon: u32 = 1717662319;
pub const anon3691_GridIcon: u32 = 1735551332;
pub const anon3691_HelpIcon: u32 = 1751477360;
pub const anon3691_KeepArrangedIcon: u32 = 1634889319;
pub const anon3691_LockedIcon: u32 = 1819239275;
pub const anon3691_NoFilesIcon: u32 = 1852205420;
pub const anon3691_NoFolderIcon: u32 = 1852206180;
pub const anon3691_NoWriteIcon: u32 = 1853321844;
pub const anon3691_ProtectedApplicationFolderIcon: u32 = 1885433968;
pub const anon3691_ProtectedSystemFolderIcon: u32 = 1886615923;
pub const anon3691_RecentItemsIcon: u32 = 1919118964;
pub const anon3691_ShortcutIcon: u32 = 1936224884;
pub const anon3691_SortAscendingIcon: u32 = 1634954852;
pub const anon3691_SortDescendingIcon: u32 = 1685286500;
pub const anon3691_UnlockedIcon: u32 = 1970037611;
pub const anon3691_ConnectToIcon: u32 = 1668178804;
pub const anon3691_GenericWindowIcon: u32 = 1735879022;
pub const anon3691_QuestionMarkIcon: u32 = 1903519091;
pub const anon3691_DeleteAliasIcon: u32 = 1684106345;
pub const anon3691_EjectMediaIcon: u32 = 1701471587;
pub const anon3691_BurningIcon: u32 = 1651864174;
pub const anon3691_RightContainerArrowIcon: u32 = 1919115634;

pub const anon3791 = u32;
pub const anon3791_MacArabicStandardVariant: u32 = 0;
pub const anon3791_MacArabicTrueTypeVariant: u32 = 1;
pub const anon3791_MacArabicThuluthVariant: u32 = 2;
pub const anon3791_MacArabicAlBayanVariant: u32 = 3;
pub const anon3791_AEDataArray: u32 = 0;
pub const anon3791_AEPackedArray: u32 = 1;
pub const anon3791_AEDescArray: u32 = 3;
pub const anon3791_AEKeyDescArray: u32 = 4;

pub const anon3871 = u32;
pub const anon3871_MacFarsiStandardVariant: u32 = 0;
pub const anon3871_MacFarsiTrueTypeVariant: u32 = 1;
pub const anon3871_AEHandleArray: u32 = 2;

pub const anon3931 = u32;
pub const anon3931_MacHebrewStandardVariant: u32 = 0;
pub const anon3931_MacHebrewFigureSpaceVariant: u32 = 1;

pub const anon3991 = u32;
pub const anon3991_MacGreekDefaultVariant: u32 = 0;
pub const anon3991_MacGreekNoEuroSignVariant: u32 = 1;
pub const anon3991_MacGreekEuroSignVariant: u32 = 2;

pub const anon4061 = u32;
pub const anon4061_MacVT100DefaultVariant: u32 = 0;
pub const anon4061_MacVT100CurrencySignVariant: u32 = 1;
pub const anon4061_MacVT100EuroSignVariant: u32 = 2;

pub const anon4131 = u32;
pub const anon4131_UnicodeNoSubset: u32 = 0;
pub const anon4131_UnicodeNormalizationFormD: u32 = 5;
pub const anon4131_UnicodeNormalizationFormC: u32 = 3;
pub const anon4131_UnicodeHFSPlusDecompVariant: u32 = 8;
pub const anon4131_UnicodeHFSPlusCompVariant: u32 = 9;
pub const anon4131_CSSM_TP_BASE_TP_ERROR: u32 = -2147409664;
pub const anon4131_CSSMERR_TP_INVALID_CALLERAUTH_CONTEXT_POINTER: u32 = -2147409663;
pub const anon4131_CSSMERR_TP_INVALID_IDENTIFIER_POINTER: u32 = -2147409662;
pub const anon4131_CSSMERR_TP_INVALID_KEYCACHE_HANDLE: u32 = -2147409661;
pub const anon4131_CSSMERR_TP_INVALID_CERTGROUP: u32 = -2147409660;
pub const anon4131_CSSMERR_TP_INVALID_CRLGROUP: u32 = -2147409659;
pub const anon4131_CSSMERR_TP_INVALID_CRLGROUP_POINTER: u32 = -2147409658;
pub const anon4131_CSSMERR_TP_AUTHENTICATION_FAILED: u32 = -2147409657;
pub const anon4131_CSSMERR_TP_CERTGROUP_INCOMPLETE: u32 = -2147409656;
pub const anon4131_CSSMERR_TP_CERTIFICATE_CANT_OPERATE: u32 = -2147409655;
pub const anon4131_CSSMERR_TP_CERT_EXPIRED: u32 = -2147409654;
pub const anon4131_CSSMERR_TP_CERT_NOT_VALID_YET: u32 = -2147409653;
pub const anon4131_CSSMERR_TP_CERT_REVOKED: u32 = -2147409652;
pub const anon4131_CSSMERR_TP_CERT_SUSPENDED: u32 = -2147409651;
pub const anon4131_CSSMERR_TP_INSUFFICIENT_CREDENTIALS: u32 = -2147409650;
pub const anon4131_CSSMERR_TP_INVALID_ACTION: u32 = -2147409649;
pub const anon4131_CSSMERR_TP_INVALID_ACTION_DATA: u32 = -2147409648;
pub const anon4131_CSSMERR_TP_INVALID_ANCHOR_CERT: u32 = -2147409646;
pub const anon4131_CSSMERR_TP_INVALID_AUTHORITY: u32 = -2147409645;
pub const anon4131_CSSMERR_TP_VERIFY_ACTION_FAILED: u32 = -2147409644;
pub const anon4131_CSSMERR_TP_INVALID_CERTIFICATE: u32 = -2147409643;
pub const anon4131_CSSMERR_TP_INVALID_CERT_AUTHORITY: u32 = -2147409642;
pub const anon4131_CSSMERR_TP_INVALID_CRL_AUTHORITY: u32 = -2147409641;
pub const anon4131_CSSMERR_TP_INVALID_CRL_ENCODING: u32 = -2147409640;
pub const anon4131_CSSMERR_TP_INVALID_CRL_TYPE: u32 = -2147409639;
pub const anon4131_CSSMERR_TP_INVALID_CRL: u32 = -2147409638;
pub const anon4131_CSSMERR_TP_INVALID_FORM_TYPE: u32 = -2147409637;
pub const anon4131_CSSMERR_TP_INVALID_ID: u32 = -2147409636;
pub const anon4131_CSSMERR_TP_INVALID_IDENTIFIER: u32 = -2147409635;
pub const anon4131_CSSMERR_TP_INVALID_INDEX: u32 = -2147409634;
pub const anon4131_CSSMERR_TP_INVALID_NAME: u32 = -2147409633;
pub const anon4131_CSSMERR_TP_INVALID_POLICY_IDENTIFIERS: u32 = -2147409632;
pub const anon4131_CSSMERR_TP_INVALID_TIMESTRING: u32 = -2147409631;
pub const anon4131_CSSMERR_TP_INVALID_REASON: u32 = -2147409630;
pub const anon4131_CSSMERR_TP_INVALID_REQUEST_INPUTS: u32 = -2147409629;
pub const anon4131_CSSMERR_TP_INVALID_RESPONSE_VECTOR: u32 = -2147409628;
pub const anon4131_CSSMERR_TP_INVALID_SIGNATURE: u32 = -2147409627;
pub const anon4131_CSSMERR_TP_INVALID_STOP_ON_POLICY: u32 = -2147409626;
pub const anon4131_CSSMERR_TP_INVALID_CALLBACK: u32 = -2147409625;
pub const anon4131_CSSMERR_TP_INVALID_TUPLE: u32 = -2147409624;
pub const anon4131_CSSMERR_TP_NOT_SIGNER: u32 = -2147409623;
pub const anon4131_CSSMERR_TP_NOT_TRUSTED: u32 = -2147409622;
pub const anon4131_CSSMERR_TP_NO_DEFAULT_AUTHORITY: u32 = -2147409621;
pub const anon4131_CSSMERR_TP_REJECTED_FORM: u32 = -2147409620;
pub const anon4131_CSSMERR_TP_REQUEST_LOST: u32 = -2147409619;
pub const anon4131_CSSMERR_TP_REQUEST_REJECTED: u32 = -2147409618;
pub const anon4131_CSSMERR_TP_UNSUPPORTED_ADDR_TYPE: u32 = -2147409617;
pub const anon4131_CSSMERR_TP_UNSUPPORTED_SERVICE: u32 = -2147409616;
pub const anon4131_CSSMERR_TP_INVALID_TUPLEGROUP_POINTER: u32 = -2147409615;
pub const anon4131_CSSMERR_TP_INVALID_TUPLEGROUP: u32 = -2147409614;

pub const anon4221 = u32;
pub const anon4221_ISOLatin1StandardVariant: u32 = 0;
pub const anon4221_ISOLatin1MusicCDVariant: u32 = 1;

pub const anon4461 = u32;
pub const anon4461_ISOLatinArabicImplicitOrderVariant: u32 = 0;
pub const anon4461_ISOLatinArabicVisualOrderVariant: u32 = 1;
pub const anon4461_ISOLatinArabicExplicitOrderVariant: u32 = 2;
pub const anon4461_ServicesFolderType: u32 = 1937138547;

pub const anon4591 = u32;
pub const anon4591_WindowsLatin1StandardVariant: u32 = 0;
pub const anon4591_WindowsLatin1PalmVariant: u32 = 1;

pub const anon4751 = u32;
pub const anon4751_EUC_CN_BasicVariant: u32 = 0;
pub const anon4751_EUC_CN_DOSVariant: u32 = 1;

pub const anon4851 = u32;
pub const anon4851_EUC_KR_BasicVariant: u32 = 0;
pub const anon4851_EUC_KR_DOSVariant: u32 = 1;

pub const anon4951 = u32;
pub const anon4951_ShiftJIS_BasicVariant: u32 = 0;
pub const anon4951_ShiftJIS_DOSVariant: u32 = 1;
pub const anon4951_ShiftJIS_MusicCDVariant: u32 = 2;
pub const anon4951_CSSM_CERT_ENCODING_UNKNOWN: u32 = 0;
pub const anon4951_CSSM_CERT_ENCODING_CUSTOM: u32 = 1;
pub const anon4951_CSSM_CERT_ENCODING_BER: u32 = 2;
pub const anon4951_CSSM_CERT_ENCODING_DER: u32 = 3;
pub const anon4951_CSSM_CERT_ENCODING_NDR: u32 = 4;
pub const anon4951_CSSM_CERT_ENCODING_SEXPR: u32 = 5;
pub const anon4951_CSSM_CERT_ENCODING_PGP: u32 = 6;
pub const anon4951_CSSM_CERT_ENCODING_MULTIPLE: u32 = 32766;
pub const anon4951_CSSM_CERT_ENCODING_LAST: u32 = 32767;
pub const anon4951_CSSM_CL_CUSTOM_CERT_ENCODING: u32 = 32768;

pub const anon5061 = u32;
pub const anon5061_Big5_BasicVariant: u32 = 0;
pub const anon5061_Big5_StandardVariant: u32 = 1;
pub const anon5061_Big5_ETenVariant: u32 = 2;
pub const anon5061_Big5_DOSVariant: u32 = 3;

pub const anon5141 = u32;
pub const anon5141_MacRomanLatin1DefaultVariant: u32 = 0;
pub const anon5141_MacRomanLatin1StandardVariant: u32 = 2;
pub const anon5141_MacRomanLatin1TurkishVariant: u32 = 6;
pub const anon5141_MacRomanLatin1CroatianVariant: u32 = 8;
pub const anon5141_MacRomanLatin1IcelandicVariant: u32 = 11;
pub const anon5141_MacRomanLatin1RomanianVariant: u32 = 14;

pub const anon5241 = u32;
pub const anon5241_UnicodeNoCompatibilityVariant: u32 = 1;
pub const anon5241_UnicodeNoCorporateVariant: u32 = 4;

pub const anon5301 = u32;
pub const anon5301_MacRomanStandardVariant: u32 = 0;
pub const anon5301_MacIcelandicStandardVariant: u32 = 0;
pub const anon5301_MacIcelandicTrueTypeVariant: u32 = 1;
pub const anon5301_JapaneseStandardVariant: u32 = 0;
pub const anon5301_JapaneseStdNoVerticalsVariant: u32 = 1;
pub const anon5301_JapaneseBasicVariant: u32 = 2;
pub const anon5301_JapanesePostScriptScrnVariant: u32 = 3;
pub const anon5301_JapanesePostScriptPrintVariant: u32 = 4;
pub const anon5301_JapaneseVertAtKuPlusTenVariant: u32 = 5;
pub const anon5301_TextEncodingShiftJIS_X0213_00: u32 = 1576;
pub const anon5301_HebrewStandardVariant: u32 = 0;
pub const anon5301_HebrewFigureSpaceVariant: u32 = 1;
pub const anon5301_UnicodeCanonicalDecompVariant: u32 = 2;
pub const anon5301_UnicodeMaxDecomposedVariant: u32 = 2;
pub const anon5301_UnicodeCanonicalCompVariant: u32 = 3;
pub const anon5301_UnicodeNoComposedVariant: u32 = 3;

pub const TextEncodingFormat = objc.UInt32;

pub const anon5591 = u32;
pub const anon5591_TextEncodingDefaultFormat: u32 = 0;
pub const anon5591_UnicodeUTF16Format: u32 = 0;
pub const anon5591_UnicodeUTF7Format: u32 = 1;
pub const anon5591_UnicodeUTF8Format: u32 = 2;
pub const anon5591_UnicodeUTF32Format: u32 = 3;
pub const anon5591_UnicodeUTF16BEFormat: u32 = 4;
pub const anon5591_UnicodeUTF16LEFormat: u32 = 5;
pub const anon5591_UnicodeUTF32BEFormat: u32 = 6;
pub const anon5591_UnicodeUTF32LEFormat: u32 = 7;
pub const anon5591_UnicodeSCSUFormat: u32 = 8;
pub const anon5591_Unicode16BitFormat: u32 = 0;
pub const anon5591_Unicode32BitFormat: u32 = 3;

pub const TextEncoding = objc.UInt32;

pub const TextEncodingNameSelector = objc.UInt32;

pub const anon5881 = u32;
pub const anon5881_TextEncodingFullName: u32 = 0;
pub const anon5881_TextEncodingBaseName: u32 = 1;
pub const anon5881_TextEncodingVariantName: u32 = 2;
pub const anon5881_TextEncodingFormatName: u32 = 3;
pub const anon5881_HFSVolumeHardwareLockBit: u32 = 7;
pub const anon5881_HFSVolumeUnmountedBit: u32 = 8;
pub const anon5881_HFSVolumeSparedBlocksBit: u32 = 9;
pub const anon5881_HFSVolumeNoCacheRequiredBit: u32 = 10;
pub const anon5881_HFSBootVolumeInconsistentBit: u32 = 11;
pub const anon5881_HFSCatalogNodeIDsReusedBit: u32 = 12;
pub const anon5881_HFSVolumeJournaledBit: u32 = 13;
pub const anon5881_HFSVolumeInconsistentBit: u32 = 14;
pub const anon5881_HFSVolumeSoftwareLockBit: u32 = 15;
pub const anon5881_HFSUnusedNodeFixBit: u32 = 31;
pub const anon5881_HFSContentProtectionBit: u32 = 30;
pub const anon5881_HFSExpandedTimesBit: u32 = 29;
pub const anon5881_HFSVolumeHardwareLockMask: u32 = 128;
pub const anon5881_HFSVolumeUnmountedMask: u32 = 256;
pub const anon5881_HFSVolumeSparedBlocksMask: u32 = 512;
pub const anon5881_HFSVolumeNoCacheRequiredMask: u32 = 1024;
pub const anon5881_HFSBootVolumeInconsistentMask: u32 = 2048;
pub const anon5881_HFSCatalogNodeIDsReusedMask: u32 = 4096;
pub const anon5881_HFSVolumeJournaledMask: u32 = 8192;
pub const anon5881_HFSVolumeInconsistentMask: u32 = 16384;
pub const anon5881_HFSVolumeSoftwareLockMask: u32 = 32768;
pub const anon5881_HFSExpandedTimesMask: u32 = 536870912;
pub const anon5881_HFSContentProtectionMask: u32 = 1073741824;
pub const anon5881_HFSUnusedNodeFixMask: u32 = -2147483648;
pub const anon5881_HFSMDBAttributesMask: u32 = 33664;
pub const anon5881_CSSMERR_DL_INVALID_DB_HANDLE: u32 = -2147413942;
pub const anon5881_CSSMERR_DL_INVALID_PASSTHROUGH_ID: u32 = -2147413930;
pub const anon5881_CSSMERR_DL_INVALID_NETWORK_ADDR: u32 = -2147413929;

pub const TextEncodingRun = extern struct {
    offset: objc.ByteOffset,
    textEncoding: TextEncoding,
};

pub const TextEncodingRunPtr = TextEncodingRun;

pub const ConstTextEncodingRunPtr = TextEncodingRun;

pub const ScriptCodeRun = extern struct {
    offset: objc.ByteOffset,
    script: objc.ScriptCode,
};

pub const ScriptCodeRunPtr = ScriptCodeRun;

pub const ConstScriptCodeRunPtr = ScriptCodeRun;

pub const TextPtr = objc.UInt8;

pub const ConstTextPtr = objc.UInt8;

pub const UniCharArrayPtr = objc.UniChar;

pub const ConstUniCharArrayPtr = objc.UniChar;

pub const UniCharArrayHandle = UniCharArrayPtr;

pub const UniCharArrayOffset = u64;

pub const anon6261 = i32;
pub const anon6261_TextScriptDontCare: i32 = -128;
pub const anon6261_TextLanguageDontCare: i32 = -128;
pub const anon6261_TextRegionDontCare: i32 = -128;

pub const TECInfo = extern struct {
    format: objc.UInt16,
    tecVersion: objc.UInt16,
    tecTextConverterFeatures: objc.UInt32,
    tecUnicodeConverterFeatures: objc.UInt32,
    tecTextCommonFeatures: objc.UInt32,
    tecTextEncodingsFolderName: objc.Str31,
    tecExtensionFileName: objc.Str31,
    tecLowestTEFileVersion: objc.UInt16,
    tecHighestTEFileVersion: objc.UInt16,
};

pub const TECInfoPtr = TECInfo;

pub const TECInfoHandle = TECInfoPtr;

pub const anon6491 = u32;
pub const anon6491_TECInfoCurrentFormat: u32 = 2;

pub const anon6961 = u32;
pub const anon6961_TECKeepInfoFixBit: u32 = 0;
pub const anon6961_TECFallbackTextLengthFixBit: u32 = 1;
pub const anon6961_TECTextRunBitClearFixBit: u32 = 2;
pub const anon6961_TECTextToUnicodeScanFixBit: u32 = 3;
pub const anon6961_TECAddForceASCIIChangesBit: u32 = 4;
pub const anon6961_TECPreferredEncodingFixBit: u32 = 5;
pub const anon6961_TECAddTextRunHeuristicsBit: u32 = 6;
pub const anon6961_TECAddFallbackInterruptBit: u32 = 7;

pub const anon7071 = u32;
pub const anon7071_TECKeepInfoFixMask: u32 = 1;
pub const anon7071_TECFallbackTextLengthFixMask: u32 = 2;
pub const anon7071_TECTextRunBitClearFixMask: u32 = 4;
pub const anon7071_TECTextToUnicodeScanFixMask: u32 = 8;
pub const anon7071_TECAddForceASCIIChangesMask: u32 = 16;
pub const anon7071_TECPreferredEncodingFixMask: u32 = 32;
pub const anon7071_TECAddTextRunHeuristicsMask: u32 = 64;
pub const anon7071_TECAddFallbackInterruptMask: u32 = 128;

pub const anon7241 = u32;
pub const anon7241_UnicodeByteOrderMark: u32 = 65279;
pub const anon7241_UnicodeObjectReplacement: u32 = 65532;
pub const anon7241_UnicodeReplacementChar: u32 = 65533;
pub const anon7241_UnicodeSwappedByteOrderMark: u32 = 65534;
pub const anon7241_UnicodeNotAChar: u32 = 65535;
pub const anon7241_gestaltCRMAttr: u32 = 1668443424;
pub const anon7241_gestaltCRMPresent: u32 = 0;
pub const anon7241_gestaltCRMPersistentFix: u32 = 1;
pub const anon7241_gestaltCRMToolRsrcCalls: u32 = 2;

pub const UCCharPropertyType = objc.SInt32;

pub const anon7401 = u32;
pub const anon7401_UCCharPropTypeGenlCategory: u32 = 1;
pub const anon7401_UCCharPropTypeCombiningClass: u32 = 2;
pub const anon7401_UCCharPropTypeBidiCategory: u32 = 3;
pub const anon7401_UCCharPropTypeDecimalDigitValue: u32 = 4;

pub const UCCharPropertyValue = objc.UInt32;

pub const anon7491 = u32;
pub const anon7491_UCGenlCatOtherNotAssigned: u32 = 0;
pub const anon7491_UCGenlCatOtherControl: u32 = 1;
pub const anon7491_UCGenlCatOtherFormat: u32 = 2;
pub const anon7491_UCGenlCatOtherSurrogate: u32 = 3;
pub const anon7491_UCGenlCatOtherPrivateUse: u32 = 4;
pub const anon7491_UCGenlCatMarkNonSpacing: u32 = 5;
pub const anon7491_UCGenlCatMarkSpacingCombining: u32 = 6;
pub const anon7491_UCGenlCatMarkEnclosing: u32 = 7;
pub const anon7491_UCGenlCatNumberDecimalDigit: u32 = 8;
pub const anon7491_UCGenlCatNumberLetter: u32 = 9;
pub const anon7491_UCGenlCatNumberOther: u32 = 10;
pub const anon7491_UCGenlCatSeparatorSpace: u32 = 11;
pub const anon7491_UCGenlCatSeparatorLine: u32 = 12;
pub const anon7491_UCGenlCatSeparatorParagraph: u32 = 13;
pub const anon7491_UCGenlCatLetterUppercase: u32 = 14;
pub const anon7491_UCGenlCatLetterLowercase: u32 = 15;
pub const anon7491_UCGenlCatLetterTitlecase: u32 = 16;
pub const anon7491_UCGenlCatLetterModifier: u32 = 17;
pub const anon7491_UCGenlCatLetterOther: u32 = 18;
pub const anon7491_UCGenlCatPunctConnector: u32 = 20;
pub const anon7491_UCGenlCatPunctDash: u32 = 21;
pub const anon7491_UCGenlCatPunctOpen: u32 = 22;
pub const anon7491_UCGenlCatPunctClose: u32 = 23;
pub const anon7491_UCGenlCatPunctInitialQuote: u32 = 24;
pub const anon7491_UCGenlCatPunctFinalQuote: u32 = 25;
pub const anon7491_UCGenlCatPunctOther: u32 = 26;
pub const anon7491_UCGenlCatSymbolMath: u32 = 28;
pub const anon7491_UCGenlCatSymbolCurrency: u32 = 29;
pub const anon7491_UCGenlCatSymbolModifier: u32 = 30;
pub const anon7491_UCGenlCatSymbolOther: u32 = 31;

pub const anon7851 = u32;
pub const anon7851_UCBidiCatNotApplicable: u32 = 0;
pub const anon7851_UCBidiCatLeftRight: u32 = 1;
pub const anon7851_UCBidiCatRightLeft: u32 = 2;
pub const anon7851_UCBidiCatEuroNumber: u32 = 3;
pub const anon7851_UCBidiCatEuroNumberSeparator: u32 = 4;
pub const anon7851_UCBidiCatEuroNumberTerminator: u32 = 5;
pub const anon7851_UCBidiCatArabicNumber: u32 = 6;
pub const anon7851_UCBidiCatCommonNumberSeparator: u32 = 7;
pub const anon7851_UCBidiCatBlockSeparator: u32 = 8;
pub const anon7851_UCBidiCatSegmentSeparator: u32 = 9;
pub const anon7851_UCBidiCatWhitespace: u32 = 10;
pub const anon7851_UCBidiCatOtherNeutral: u32 = 11;
pub const anon7851_UCBidiCatRightLeftArabic: u32 = 12;
pub const anon7851_UCBidiCatLeftRightEmbedding: u32 = 13;
pub const anon7851_UCBidiCatRightLeftEmbedding: u32 = 14;
pub const anon7851_UCBidiCatLeftRightOverride: u32 = 15;
pub const anon7851_UCBidiCatRightLeftOverride: u32 = 16;
pub const anon7851_UCBidiCatPopDirectionalFormat: u32 = 17;
pub const anon7851_UCBidiCatNonSpacingMark: u32 = 18;
pub const anon7851_UCBidiCatBoundaryNeutral: u32 = 19;
pub const anon7851_UCBidiCatLeftRightIsolate: u32 = 20;
pub const anon7851_UCBidiCatRightLeftIsolate: u32 = 21;
pub const anon7851_UCBidiCatFirstStrongIsolate: u32 = 22;
pub const anon7851_UCBidiCatPopDirectionalIsolate: u32 = 23;
pub const anon7851_gestaltDisplayMgrVers: u32 = 1685089398;

pub extern "CoreServices" fn CreateTextEncoding(encodingBase: TextEncodingBase, encodingVariant: TextEncodingVariant, encodingFormat: TextEncodingFormat) callconv(.C) TextEncoding;

pub extern "CoreServices" fn GetTextEncodingBase(encoding: TextEncoding) callconv(.C) TextEncodingBase;

pub extern "CoreServices" fn GetTextEncodingVariant(encoding: TextEncoding) callconv(.C) TextEncodingVariant;

pub extern "CoreServices" fn GetTextEncodingFormat(encoding: TextEncoding) callconv(.C) TextEncodingFormat;

pub extern "CoreServices" fn ResolveDefaultTextEncoding(encoding: TextEncoding) callconv(.C) TextEncoding;

pub extern "CoreServices" fn GetTextEncodingName(
    iEncoding: TextEncoding,
    iNamePartSelector: TextEncodingNameSelector,
    iPreferredRegion: objc.RegionCode,
    iPreferredEncoding: TextEncoding,
    iOutputBufLen: objc.ByteCount,
    oNameLength: ?*objc.ByteCount,
    oActualRegion: ?*objc.RegionCode,
    oActualEncoding: ?*TextEncoding,
    oEncodingName: TextPtr,
) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn TECGetInfo(tecInfo: ?*TECInfoHandle) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn UpgradeScriptInfoToTextEncoding(
    iTextScriptID: objc.ScriptCode,
    iTextLanguageID: objc.LangCode,
    iRegionID: objc.RegionCode,
    iTextFontname: objc.ConstStr255Param,
    oEncoding: ?*TextEncoding,
) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn RevertTextEncodingToScriptInfo(
    iEncoding: TextEncoding,
    oTextScriptID: ?*objc.ScriptCode,
    oTextLanguageID: ?*objc.LangCode,
    oTextFontname: objc.Str255,
) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn GetTextEncodingFromScriptInfo(
    iTextScriptID: objc.ScriptCode,
    iTextLanguageID: objc.LangCode,
    iTextRegionID: objc.RegionCode,
    oEncoding: ?*TextEncoding,
) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn GetScriptInfoFromTextEncoding(iEncoding: TextEncoding, oTextScriptID: ?*objc.ScriptCode, oTextLanguageID: ?*objc.LangCode) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn NearestMacTextEncodings(generalEncoding: TextEncoding, bestMacEncoding: ?*TextEncoding, alternateMacEncoding: ?*TextEncoding) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn UCGetCharProperty(
    charPtr: ?*objc.UniChar,
    textLength: objc.UniCharCount,
    propType: UCCharPropertyType,
    propValue: ?*UCCharPropertyValue,
) callconv(.C) objc.OSStatus;

pub const anon11071 = u32;
pub const anon11071_UCHighSurrogateRangeStart: u32 = 55296;
pub const anon11071_UCHighSurrogateRangeEnd: u32 = 56319;
pub const anon11071_UCLowSurrogateRangeStart: u32 = 56320;
pub const anon11071_UCLowSurrogateRangeEnd: u32 = 57343;

pub const anon461 = u32;
pub const anon461__MixedModeMagic: u32 = 43774;
pub const anon461_FirstIOKitNotificationType: u32 = 100;
pub const anon461_IOServicePublishNotificationType: u32 = 100;
pub const anon461_IOServiceMatchedNotificationType: u32 = 101;
pub const anon461_IOServiceTerminatedNotificationType: u32 = 102;
pub const anon461_IOAsyncCompletionNotificationType: u32 = 150;
pub const anon461_IOServiceMessageNotificationType: u32 = 160;
pub const anon461_LastIOKitNotificationType: u32 = 199;
pub const anon461_IOKitNoticationTypeMask: u32 = 4095;
pub const anon461_IOKitNoticationTypeSizeAdjShift: u32 = 30;
pub const anon461_IOKitNoticationMsgSizeMask: u32 = 3;
pub const anon461_TECSignature: u32 = 1701733238;
pub const anon461_TECUnicodePluginSignature: u32 = 1886744169;
pub const anon461_TECJapanesePluginSignature: u32 = 1886023790;
pub const anon461_TECChinesePluginSignature: u32 = 1887070319;
pub const anon461_TECKoreanPluginSignature: u32 = 1886089074;

pub const anon511 = u32;
pub const anon511_CurrentMixedModeStateRecord: u32 = 1;
pub const anon511_IOMapAnywhere: u32 = 1;
pub const anon511_IOMapCacheMask: u32 = 3840;
pub const anon511_IOMapCacheShift: u32 = 8;
pub const anon511_IOMapDefaultCache: u32 = 0;
pub const anon511_IOMapInhibitCache: u32 = 256;
pub const anon511_IOMapWriteThruCache: u32 = 512;
pub const anon511_IOMapCopybackCache: u32 = 768;
pub const anon511_IOMapWriteCombineCache: u32 = 1024;
pub const anon511_IOMapCopybackInnerCache: u32 = 1280;
pub const anon511_IOMapPostedWrite: u32 = 1536;
pub const anon511_IOMapRealTimeCache: u32 = 1792;
pub const anon511_IOMapPostedReordered: u32 = 2048;
pub const anon511_IOMapPostedCombinedReordered: u32 = 2304;
pub const anon511_IOMapUserOptionsMask: u32 = 4095;
pub const anon511_IOMapReadOnly: u32 = 4096;
pub const anon511_IOMapStatic: u32 = 16777216;
pub const anon511_IOMapReference: u32 = 33554432;
pub const anon511_IOMapUnique: u32 = 67108864;
pub const anon511_IOMapPrefault: u32 = 268435456;
pub const anon511_IOMapOverwrite: u32 = 536870912;
pub const anon511_IOMapGuardedMask: u32 = -1073741824;
pub const anon511_IOMapGuardedSmall: u32 = 1073741824;
pub const anon511_IOMapGuardedLarge: u32 = -2147483648;
pub const anon511_UnicodeUseLatestMapping: u32 = -1;
pub const anon511_UnicodeUseHFSPlusMapping: u32 = 4;
pub const anon511_HFSSigWord: u32 = 16964;
pub const anon511_HFSPlusSigWord: u32 = 18475;
pub const anon511_HFSXSigWord: u32 = 18520;
pub const anon511_HFSPlusVersion: u32 = 4;
pub const anon511_HFSXVersion: u32 = 5;
pub const anon511_HFSPlusMountVersion: u32 = 825241136;
pub const anon511_HFSJMountVersion: u32 = 1212568394;
pub const anon511_FSKMountVersion: u32 = 1179863841;
pub const anon511_Huge1BitMask: u32 = 1768122403;
pub const anon511_Huge4BitData: u32 = 1768122420;
pub const anon511_Huge8BitData: u32 = 1768122424;
pub const anon511_Huge32BitData: u32 = 1768436530;
pub const anon511_Huge8BitMask: u32 = 1748528491;

pub const CallingConventionType = u16;

pub const anon571 = u32;
pub const anon571_PascalStackBased: u32 = 0;
pub const anon571_CStackBased: u32 = 1;
pub const anon571_RegisterBased: u32 = 2;
pub const anon571_D0DispatchedPascalStackBased: u32 = 8;
pub const anon571_D1DispatchedPascalStackBased: u32 = 12;
pub const anon571_D0DispatchedCStackBased: u32 = 9;
pub const anon571_StackDispatchedPascalStackBased: u32 = 14;
pub const anon571_ThinkCStackBased: u32 = 5;

pub const ISAType = objc.SInt8;

pub const anon751 = u32;
pub const anon751_X86ISA: u32 = 2;
pub const anon751_TECInternetNameDefaultUsageMask: u32 = 0;
pub const anon751_TECInternetNameStrictUsageMask: u32 = 1;
pub const anon751_TECInternetNameTolerantUsageMask: u32 = 2;
pub const anon751_ClassicDomain: u32 = -32762;

pub const RTAType = objc.SInt8;

pub const anon811 = u32;
pub const anon811_Old68kRTA: u32 = 0;
pub const anon811_PowerPCRTA: u32 = 0;
pub const anon811_CFM68kRTA: u32 = 16;
pub const anon811_fFormatOK: u32 = 0;
pub const anon811_fBestGuess: u32 = 1;
pub const anon811_fOutOfSynch: u32 = 2;
pub const anon811_fSpuriousChars: u32 = 3;
pub const anon811_fMissingDelimiter: u32 = 4;
pub const anon811_fExtraDecimal: u32 = 5;
pub const anon811_fMissingLiteral: u32 = 6;
pub const anon811_fExtraExp: u32 = 7;
pub const anon811_fFormatOverflow: u32 = 8;
pub const anon811_fFormStrIsNAN: u32 = 9;
pub const anon811_fBadPartsTable: u32 = 10;
pub const anon811_fExtraPercent: u32 = 11;
pub const anon811_fExtraSeparator: u32 = 12;
pub const anon811_fEmptyFormatString: u32 = 13;
pub const anon811_iuSystemCurLang: u32 = -2;
pub const anon811_iuSystemDefLang: u32 = -3;
pub const anon811_iuCurrentCurLang: u32 = -4;
pub const anon811_iuCurrentDefLang: u32 = -5;
pub const anon811_iuScriptCurLang: u32 = -6;
pub const anon811_iuScriptDefLang: u32 = -7;
pub const anon811_noSecuritySession: u32 = 0;
pub const anon811_callerSecuritySession: u32 = -1;

pub const anon871 = u32;
pub const anon871_X86RTA: u32 = 32;
pub const anon871_UnicodeUseFallbacksMask: u32 = 1;
pub const anon871_UnicodeKeepInfoMask: u32 = 2;
pub const anon871_UnicodeDirectionalityMask: u32 = 12;
pub const anon871_UnicodeVerticalFormMask: u32 = 16;
pub const anon871_UnicodeLooseMappingsMask: u32 = 32;
pub const anon871_UnicodeStringUnterminatedMask: u32 = 64;
pub const anon871_UnicodeTextRunMask: u32 = 128;
pub const anon871_UnicodeKeepSameEncodingMask: u32 = 256;
pub const anon871_UnicodeForceASCIIRangeMask: u32 = 512;
pub const anon871_UnicodeNoHalfwidthCharsMask: u32 = 1024;
pub const anon871_UnicodeTextRunHeuristicsMask: u32 = 2048;
pub const anon871_UnicodeMapLineFeedToReturnMask: u32 = 4096;
pub const anon871_UnicodeUseExternalEncodingFormMask: u32 = 8192;
pub const anon871_CreateFolder: u32 = 0;
pub const anon871_DontCreateFolder: u32 = 1;
pub const anon871_errAuthorizationSuccess: u32 = 0;
pub const anon871_errAuthorizationInvalidSet: u32 = -60001;
pub const anon871_errAuthorizationInvalidRef: u32 = -60002;
pub const anon871_errAuthorizationInvalidTag: u32 = -60003;
pub const anon871_errAuthorizationInvalidPointer: u32 = -60004;
pub const anon871_errAuthorizationDenied: u32 = -60005;
pub const anon871_errAuthorizationCanceled: u32 = -60006;
pub const anon871_errAuthorizationInteractionNotAllowed: u32 = -60007;
pub const anon871_errAuthorizationInternal: u32 = -60008;
pub const anon871_errAuthorizationExternalizeNotAllowed: u32 = -60009;
pub const anon871_errAuthorizationInternalizeNotAllowed: u32 = -60010;
pub const anon871_errAuthorizationInvalidFlags: u32 = -60011;
pub const anon871_errAuthorizationToolExecuteFailure: u32 = -60031;
pub const anon871_errAuthorizationToolEnvironmentError: u32 = -60032;
pub const anon871_errAuthorizationBadAddress: u32 = -60033;
pub const anon871_genericDocumentIconResource: u32 = -4000;
pub const anon871_genericStationeryIconResource: u32 = -3985;
pub const anon871_genericEditionFileIconResource: u32 = -3989;
pub const anon871_genericApplicationIconResource: u32 = -3996;
pub const anon871_genericDeskAccessoryIconResource: u32 = -3991;
pub const anon871_genericFolderIconResource: u32 = -3999;
pub const anon871_privateFolderIconResource: u32 = -3994;
pub const anon871_floppyIconResource: u32 = -3998;
pub const anon871_trashIconResource: u32 = -3993;
pub const anon871_genericRAMDiskIconResource: u32 = -3988;
pub const anon871_genericCDROMIconResource: u32 = -3987;
pub const anon871_desktopIconResource: u32 = -3992;
pub const anon871_openFolderIconResource: u32 = -3997;
pub const anon871_genericHardDiskIconResource: u32 = -3995;
pub const anon871_genericFileServerIconResource: u32 = -3972;
pub const anon871_genericSuitcaseIconResource: u32 = -3970;
pub const anon871_genericMoverObjectIconResource: u32 = -3969;
pub const anon871_genericPreferencesIconResource: u32 = -3971;
pub const anon871_genericQueryDocumentIconResource: u32 = -16506;
pub const anon871_genericExtensionIconResource: u32 = -16415;
pub const anon871_systemFolderIconResource: u32 = -3983;
pub const anon871_appleMenuFolderIconResource: u32 = -3982;

pub const anon1081 = u32;
pub const anon1081_RegisterD0: u32 = 0;
pub const anon1081_RegisterD1: u32 = 1;
pub const anon1081_RegisterD2: u32 = 2;
pub const anon1081_RegisterD3: u32 = 3;
pub const anon1081_RegisterD4: u32 = 8;
pub const anon1081_RegisterD5: u32 = 9;
pub const anon1081_RegisterD6: u32 = 10;
pub const anon1081_RegisterD7: u32 = 11;
pub const anon1081_RegisterA0: u32 = 4;
pub const anon1081_RegisterA1: u32 = 5;
pub const anon1081_RegisterA2: u32 = 6;
pub const anon1081_RegisterA3: u32 = 7;
pub const anon1081_RegisterA4: u32 = 12;
pub const anon1081_RegisterA5: u32 = 13;
pub const anon1081_RegisterA6: u32 = 14;
pub const anon1081_CCRegisterCBit: u32 = 16;
pub const anon1081_CCRegisterVBit: u32 = 17;
pub const anon1081_CCRegisterZBit: u32 = 18;
pub const anon1081_CCRegisterNBit: u32 = 19;
pub const anon1081_CCRegisterXBit: u32 = 20;

pub const registerSelectorType = u16;

pub const anon1331 = u32;
pub const anon1331_NoByteCode: u32 = 0;
pub const anon1331_OneByteCode: u32 = 1;
pub const anon1331_TwoByteCode: u32 = 2;
pub const anon1331_FourByteCode: u32 = 3;

pub const ProcInfoType = u64;

pub const RoutineFlagsType = u16;

pub const anon1441 = u32;
pub const anon1441_ProcDescriptorIsAbsolute: u32 = 0;
pub const anon1441_ProcDescriptorIsRelative: u32 = 1;
pub const anon1441_fatalDateTime: u32 = 32768;
pub const anon1441_longDateFound: u32 = 1;
pub const anon1441_leftOverChars: u32 = 2;
pub const anon1441_sepNotIntlSep: u32 = 4;
pub const anon1441_fieldOrderNotIntl: u32 = 8;
pub const anon1441_extraneousStrings: u32 = 16;
pub const anon1441_tooManySeps: u32 = 32;
pub const anon1441_sepNotConsistent: u32 = 64;
pub const anon1441_tokenErr: u32 = 33024;
pub const anon1441_cantReadUtilities: u32 = 33280;
pub const anon1441_dateTimeNotFound: u32 = 33792;
pub const anon1441_dateTimeInvalid: u32 = 34816;
pub const anon1441_UnicodeMatchUnicodeBaseBit: u32 = 0;
pub const anon1441_UnicodeMatchUnicodeVariantBit: u32 = 1;
pub const anon1441_UnicodeMatchUnicodeFormatBit: u32 = 2;
pub const anon1441_UnicodeMatchOtherBaseBit: u32 = 3;
pub const anon1441_UnicodeMatchOtherVariantBit: u32 = 4;
pub const anon1441_UnicodeMatchOtherFormatBit: u32 = 5;

pub const anon1641 = u32;
pub const anon1641_RoutineIsNotDispatchedDefaultRoutine: u32 = 0;
pub const anon1641_RoutineIsDispatchedDefaultRoutine: u32 = 16;
pub const anon1641_HFSExtentDensity: u32 = 3;
pub const anon1641_HFSPlusExtentDensity: u32 = 8;
pub const anon1641_SystemIconsCreator: u32 = 1835098995;

pub const anon1691 = u32;
pub const anon1691_ProcDescriptorIsProcPtr: u32 = 0;
pub const anon1691_ProcDescriptorIsIndex: u32 = 32;

pub const RoutineRecord = extern struct {
    procInfo: ProcInfoType,
    reserved1: objc.SInt8,
    ISA: ISAType,
    routineFlags: RoutineFlagsType,
    procDescriptor: objc.ProcPtr,
    reserved2: objc.UInt32,
    selector: objc.UInt32,
};

pub const RoutineRecordPtr = RoutineRecord;

pub const RoutineRecordHandle = RoutineRecordPtr;

pub const RDFlagsType = objc.UInt8;

pub const RoutineDescriptor = extern struct {
    goMixedModeTrap: objc.UInt16,
    version: objc.SInt8,
    routineDescriptorFlags: RDFlagsType,
    reserved1: objc.UInt32,
    reserved2: objc.UInt8,
    selectorInfo: objc.UInt8,
    routineCount: objc.UInt16,
    routineRecords: [1]RoutineRecord,
};

pub const RoutineDescriptorPtr = RoutineDescriptor;

pub const RoutineDescriptorHandle = RoutineDescriptorPtr;

pub const MixedModeStateRecord = extern struct {
    state1: objc.UInt32,
    state2: objc.UInt32,
    state3: objc.UInt32,
    state4: objc.UInt32,
};

pub const anon2581 = i32;
pub const anon2581_CallingConventionWidth: i32 = 4;
pub const anon2581_CallingConventionPhase: i32 = 0;
pub const anon2581_CallingConventionMask: i32 = 15;
pub const anon2581_ResultSizeWidth: i32 = 2;
pub const anon2581_ResultSizePhase: i32 = 4;
pub const anon2581_ResultSizeMask: i32 = 48;
pub const anon2581_StackParameterWidth: i32 = 2;
pub const anon2581_StackParameterPhase: i32 = 6;
pub const anon2581_StackParameterMask: i32 = -64;
pub const anon2581_RegisterResultLocationWidth: i32 = 5;
pub const anon2581_RegisterResultLocationPhase: i32 = 6;
pub const anon2581_RegisterParameterWidth: i32 = 5;
pub const anon2581_RegisterParameterPhase: i32 = 11;
pub const anon2581_RegisterParameterMask: i32 = 2147481600;
pub const anon2581_RegisterParameterSizePhase: i32 = 0;
pub const anon2581_RegisterParameterSizeWidth: i32 = 2;
pub const anon2581_RegisterParameterWhichPhase: i32 = 2;
pub const anon2581_RegisterParameterWhichWidth: i32 = 3;
pub const anon2581_DispatchedSelectorSizeWidth: i32 = 2;
pub const anon2581_DispatchedSelectorSizePhase: i32 = 6;
pub const anon2581_DispatchedParameterPhase: i32 = 8;
pub const anon2581_SpecialCaseSelectorWidth: i32 = 6;
pub const anon2581_SpecialCaseSelectorPhase: i32 = 4;
pub const anon2581_SpecialCaseSelectorMask: i32 = 1008;
pub const anon2581_AnyPort: i32 = 0;

pub const anon2901 = u32;
pub const anon2901_SpecialCaseHighHook: u32 = 0;
pub const anon2901_SpecialCaseCaretHook: u32 = 0;
pub const anon2901_SpecialCaseEOLHook: u32 = 1;
pub const anon2901_SpecialCaseWidthHook: u32 = 2;
pub const anon2901_SpecialCaseTextWidthHook: u32 = 2;
pub const anon2901_SpecialCaseNWidthHook: u32 = 3;
pub const anon2901_SpecialCaseDrawHook: u32 = 4;
pub const anon2901_SpecialCaseHitTestHook: u32 = 5;
pub const anon2901_SpecialCaseTEFindWord: u32 = 6;
pub const anon2901_SpecialCaseProtocolHandler: u32 = 7;
pub const anon2901_SpecialCaseSocketListener: u32 = 8;
pub const anon2901_SpecialCaseTERecalc: u32 = 9;
pub const anon2901_SpecialCaseTEDoText: u32 = 10;
pub const anon2901_SpecialCaseGNEFilterProc: u32 = 11;
pub const anon2901_SpecialCaseMBarHook: u32 = 12;

pub const anon981 = u32;
pub const anon981_CollectionUser0Mask: u32 = 1;
pub const anon981_CollectionUser1Mask: u32 = 2;
pub const anon981_CollectionUser2Mask: u32 = 4;
pub const anon981_CollectionUser3Mask: u32 = 8;
pub const anon981_CollectionUser4Mask: u32 = 16;
pub const anon981_CollectionUser5Mask: u32 = 32;
pub const anon981_CollectionUser6Mask: u32 = 64;
pub const anon981_CollectionUser7Mask: u32 = 128;
pub const anon981_CollectionUser8Mask: u32 = 256;
pub const anon981_CollectionUser9Mask: u32 = 512;
pub const anon981_CollectionUser10Mask: u32 = 1024;
pub const anon981_CollectionUser11Mask: u32 = 2048;
pub const anon981_CollectionUser12Mask: u32 = 4096;
pub const anon981_CollectionUser13Mask: u32 = 8192;
pub const anon981_CollectionUser14Mask: u32 = 16384;
pub const anon981_CollectionUser15Mask: u32 = 32768;
pub const anon981_CollectionReserved0Mask: u32 = 65536;
pub const anon981_CollectionReserved1Mask: u32 = 131072;
pub const anon981_CollectionReserved2Mask: u32 = 262144;
pub const anon981_CollectionReserved3Mask: u32 = 524288;
pub const anon981_CollectionReserved4Mask: u32 = 1048576;
pub const anon981_CollectionReserved5Mask: u32 = 2097152;
pub const anon981_CollectionReserved6Mask: u32 = 4194304;
pub const anon981_CollectionReserved7Mask: u32 = 8388608;
pub const anon981_CollectionReserved8Mask: u32 = 16777216;
pub const anon981_CollectionReserved9Mask: u32 = 33554432;
pub const anon981_CollectionReserved10Mask: u32 = 67108864;
pub const anon981_CollectionReserved11Mask: u32 = 134217728;
pub const anon981_CollectionReserved12Mask: u32 = 268435456;
pub const anon981_CollectionReserved13Mask: u32 = 536870912;
pub const anon981_CollectionPersistenceMask: u32 = 1073741824;
pub const anon981_CollectionLockMask: u32 = -2147483648;

pub const OpaqueCollection = extern struct {};

pub const Collection = OpaqueCollection;

pub const CollectionTag = objc.FourCharCode;

pub const CollectionFlattenProcPtr = objc.OSErr;

pub const CollectionExceptionProcPtr = objc.OSErr;

pub const CollectionFlattenUPP = CollectionFlattenProcPtr;

pub const CollectionExceptionUPP = CollectionExceptionProcPtr;

pub extern "CoreServices" fn NewCollectionFlattenUPP(userRoutine: CollectionFlattenProcPtr) callconv(.C) CollectionFlattenUPP;

pub extern "CoreServices" fn NewCollectionExceptionUPP(userRoutine: CollectionExceptionProcPtr) callconv(.C) CollectionExceptionUPP;

pub extern "CoreServices" fn DisposeCollectionFlattenUPP(userUPP: CollectionFlattenUPP) callconv(.C) void;

pub extern "CoreServices" fn DisposeCollectionExceptionUPP(userUPP: CollectionExceptionUPP) callconv(.C) void;

pub extern "CoreServices" fn InvokeCollectionFlattenUPP(
    size: objc.SInt32,
    data: ?*anyopaque,
    refCon: ?*anyopaque,
    userUPP: CollectionFlattenUPP,
) callconv(.C) objc.OSErr;

pub extern "CoreServices" fn InvokeCollectionExceptionUPP(c: Collection, status: objc.OSErr, userUPP: CollectionExceptionUPP) callconv(.C) objc.OSErr;

pub extern "CoreServices" fn NewCollection() callconv(.C) Collection;

pub extern "CoreServices" fn DisposeCollection(c: Collection) callconv(.C) void;

pub extern "CoreServices" fn CloneCollection(c: Collection) callconv(.C) Collection;

pub extern "CoreServices" fn CountCollectionOwners(c: Collection) callconv(.C) objc.SInt32;

pub extern "CoreServices" fn RetainCollection(c: Collection) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn ReleaseCollection(c: Collection) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn GetCollectionRetainCount(c: Collection) callconv(.C) objc.ItemCount;

pub extern "CoreServices" fn CopyCollection(srcCollection: Collection, dstCollection: Collection) callconv(.C) Collection;

pub extern "CoreServices" fn GetCollectionDefaultAttributes(c: Collection) callconv(.C) objc.SInt32;

pub extern "CoreServices" fn SetCollectionDefaultAttributes(c: Collection, whichAttributes: objc.SInt32, newAttributes: objc.SInt32) callconv(.C) void;

pub extern "CoreServices" fn CountCollectionItems(c: Collection) callconv(.C) objc.SInt32;

pub extern "CoreServices" fn AddCollectionItem(
    c: Collection,
    tag: CollectionTag,
    id: objc.SInt32,
    itemSize: objc.SInt32,
    itemData: ?*anyopaque,
) callconv(.C) objc.OSErr;

pub extern "CoreServices" fn GetCollectionItem(
    c: Collection,
    tag: CollectionTag,
    id: objc.SInt32,
    itemSize: ?*objc.SInt32,
    itemData: ?*anyopaque,
) callconv(.C) objc.OSErr;

pub extern "CoreServices" fn RemoveCollectionItem(c: Collection, tag: CollectionTag, id: objc.SInt32) callconv(.C) objc.OSErr;

pub extern "CoreServices" fn SetCollectionItemInfo(
    c: Collection,
    tag: CollectionTag,
    id: objc.SInt32,
    whichAttributes: objc.SInt32,
    newAttributes: objc.SInt32,
) callconv(.C) objc.OSErr;

pub extern "CoreServices" fn GetCollectionItemInfo(
    c: Collection,
    tag: CollectionTag,
    id: objc.SInt32,
    itemIndex: ?*objc.SInt32,
    itemSize: ?*objc.SInt32,
    attributes: ?*objc.SInt32,
) callconv(.C) objc.OSErr;

pub extern "CoreServices" fn ReplaceIndexedCollectionItem(
    c: Collection,
    itemIndex: objc.SInt32,
    itemSize: objc.SInt32,
    itemData: ?*anyopaque,
) callconv(.C) objc.OSErr;

pub extern "CoreServices" fn GetIndexedCollectionItem(
    c: Collection,
    itemIndex: objc.SInt32,
    itemSize: ?*objc.SInt32,
    itemData: ?*anyopaque,
) callconv(.C) objc.OSErr;

pub extern "CoreServices" fn RemoveIndexedCollectionItem(c: Collection, itemIndex: objc.SInt32) callconv(.C) objc.OSErr;

pub extern "CoreServices" fn SetIndexedCollectionItemInfo(
    c: Collection,
    itemIndex: objc.SInt32,
    whichAttributes: objc.SInt32,
    newAttributes: objc.SInt32,
) callconv(.C) objc.OSErr;

pub extern "CoreServices" fn GetIndexedCollectionItemInfo(
    c: Collection,
    itemIndex: objc.SInt32,
    tag: ?*CollectionTag,
    id: ?*objc.SInt32,
    itemSize: ?*objc.SInt32,
    attributes: ?*objc.SInt32,
) callconv(.C) objc.OSErr;

pub extern "CoreServices" fn CollectionTagExists(c: Collection, tag: CollectionTag) callconv(.C) objc.Boolean;

pub extern "CoreServices" fn CountCollectionTags(c: Collection) callconv(.C) objc.SInt32;

pub extern "CoreServices" fn GetIndexedCollectionTag(c: Collection, tagIndex: objc.SInt32, tag: ?*CollectionTag) callconv(.C) objc.OSErr;

pub extern "CoreServices" fn CountTaggedCollectionItems(c: Collection, tag: CollectionTag) callconv(.C) objc.SInt32;

pub extern "CoreServices" fn GetTaggedCollectionItem(
    c: Collection,
    tag: CollectionTag,
    whichItem: objc.SInt32,
    itemSize: ?*objc.SInt32,
    itemData: ?*anyopaque,
) callconv(.C) objc.OSErr;

pub extern "CoreServices" fn GetTaggedCollectionItemInfo(
    c: Collection,
    tag: CollectionTag,
    whichItem: objc.SInt32,
    id: ?*objc.SInt32,
    itemIndex: ?*objc.SInt32,
    itemSize: ?*objc.SInt32,
    attributes: ?*objc.SInt32,
) callconv(.C) objc.OSErr;

pub extern "CoreServices" fn PurgeCollection(c: Collection, whichAttributes: objc.SInt32, matchingAttributes: objc.SInt32) callconv(.C) void;

pub extern "CoreServices" fn PurgeCollectionTag(c: Collection, tag: CollectionTag) callconv(.C) void;

pub extern "CoreServices" fn EmptyCollection(c: Collection) callconv(.C) void;

pub extern "CoreServices" fn FlattenCollection(c: Collection, flattenProc: CollectionFlattenUPP, refCon: ?*anyopaque) callconv(.C) objc.OSErr;

pub extern "CoreServices" fn FlattenPartialCollection(
    c: Collection,
    flattenProc: CollectionFlattenUPP,
    refCon: ?*anyopaque,
    whichAttributes: objc.SInt32,
    matchingAttributes: objc.SInt32,
) callconv(.C) objc.OSErr;

pub extern "CoreServices" fn UnflattenCollection(c: Collection, flattenProc: CollectionFlattenUPP, refCon: ?*anyopaque) callconv(.C) objc.OSErr;

pub extern "CoreServices" fn GetCollectionExceptionProc(c: Collection) callconv(.C) CollectionExceptionUPP;

pub extern "CoreServices" fn SetCollectionExceptionProc(c: Collection, exceptionProc: CollectionExceptionUPP) callconv(.C) void;

pub extern "CoreServices" fn GetNewCollection(collectionID: objc.SInt16) callconv(.C) Collection;

pub extern "CoreServices" fn AddCollectionItemHdl(
    aCollection: Collection,
    tag: CollectionTag,
    id: objc.SInt32,
    itemData: objc.Handle,
) callconv(.C) objc.OSErr;

pub extern "CoreServices" fn GetCollectionItemHdl(
    aCollection: Collection,
    tag: CollectionTag,
    id: objc.SInt32,
    itemData: objc.Handle,
) callconv(.C) objc.OSErr;

pub extern "CoreServices" fn ReplaceIndexedCollectionItemHdl(aCollection: Collection, itemIndex: objc.SInt32, itemData: objc.Handle) callconv(.C) objc.OSErr;

pub extern "CoreServices" fn GetIndexedCollectionItemHdl(aCollection: Collection, itemIndex: objc.SInt32, itemData: objc.Handle) callconv(.C) objc.OSErr;

pub extern "CoreServices" fn FlattenCollectionToHdl(aCollection: Collection, flattened: objc.Handle) callconv(.C) objc.OSErr;

pub extern "CoreServices" fn UnflattenCollectionFromHdl(aCollection: Collection, flattened: objc.Handle) callconv(.C) objc.OSErr;

pub const BigEndianUInt32 = extern struct {
    bigEndianValue: objc.UInt32,
};

pub const BigEndianLong = extern struct {
    bigEndianValue: i64,
};

pub const BigEndianUnsignedLong = extern struct {
    bigEndianValue: u64,
};

pub const BigEndianShort = extern struct {
    bigEndianValue: i16,
};

pub const BigEndianUnsignedShort = extern struct {
    bigEndianValue: u16,
};

pub const BigEndianFixed = extern struct {
    bigEndianValue: objc.Fixed,
};

pub const BigEndianUnsignedFixed = extern struct {
    bigEndianValue: objc.UnsignedFixed,
};

pub const BigEndianOSType = extern struct {
    bigEndianValue: objc.OSType,
};

pub const anon3081 = u32;
pub const anon3081_CoreEndianResourceManagerDomain: u32 = 1920168547;
pub const anon3081_CoreEndianAppleEventManagerDomain: u32 = 1634039412;

pub const CoreEndianFlipProc = objc.OSStatus;

pub extern "CoreServices" fn CoreEndianInstallFlipper(
    dataDomain: objc.OSType,
    dataType: objc.OSType,
    proc: CoreEndianFlipProc,
    refcon: ?*anyopaque,
) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn CoreEndianGetFlipper(
    dataDomain: objc.OSType,
    dataType: objc.OSType,
    proc: ?*CoreEndianFlipProc,
    refcon: ?*?*anyopaque,
) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn CoreEndianFlipData(
    dataDomain: objc.OSType,
    dataType: objc.OSType,
    id: objc.SInt16,
    data: ?*anyopaque,
    dataLen: objc.ByteCount,
    currentlyNative: objc.Boolean,
) callconv(.C) objc.OSStatus;

pub const SelectorFunctionProcPtr = objc.OSErr;

pub const SelectorFunctionUPP = SelectorFunctionProcPtr;

pub extern "CoreServices" fn Gestalt(selector: objc.OSType, response: ?*objc.SInt32) callconv(.C) objc.OSErr;

pub extern "CoreServices" fn NewGestaltValue(selector: objc.OSType, newValue: objc.SInt32) callconv(.C) objc.OSErr;

pub extern "CoreServices" fn ReplaceGestaltValue(selector: objc.OSType, replacementValue: objc.SInt32) callconv(.C) objc.OSErr;

pub extern "CoreServices" fn SetGestaltValue(selector: objc.OSType, newValue: objc.SInt32) callconv(.C) objc.OSErr;

pub extern "CoreServices" fn DeleteGestaltValue(selector: objc.OSType) callconv(.C) objc.OSErr;

pub extern "CoreServices" fn NewSelectorFunctionUPP(userRoutine: SelectorFunctionProcPtr) callconv(.C) SelectorFunctionUPP;

pub extern "CoreServices" fn DisposeSelectorFunctionUPP(userUPP: SelectorFunctionUPP) callconv(.C) void;

pub extern "CoreServices" fn InvokeSelectorFunctionUPP(selector: objc.OSType, response: ?*objc.SInt32, userUPP: SelectorFunctionUPP) callconv(.C) objc.OSErr;

pub const anon4421 = u32;
pub const anon4421_gestaltAddressingModeAttr: u32 = 1633969266;
pub const anon4421_gestalt32BitAddressing: u32 = 0;
pub const anon4421_gestalt32BitSysZone: u32 = 1;
pub const anon4421_gestalt32BitCapable: u32 = 2;
pub const anon4421_UCTypeSelectMaxListSize: u32 = -1;
pub const anon4421_QuickLookFolderType: u32 = 1902928747;

pub const anon4491 = i32;
pub const anon4491_gestaltAFPClient: i32 = 1634103411;
pub const anon4491_gestaltAFPClientVersionMask: i32 = 65535;
pub const anon4491_gestaltAFPClient3_5: i32 = 1;
pub const anon4491_gestaltAFPClient3_6: i32 = 2;
pub const anon4491_gestaltAFPClient3_6_1: i32 = 3;
pub const anon4491_gestaltAFPClient3_6_2: i32 = 4;
pub const anon4491_gestaltAFPClient3_6_3: i32 = 5;
pub const anon4491_gestaltAFPClient3_7: i32 = 6;
pub const anon4491_gestaltAFPClient3_7_2: i32 = 7;
pub const anon4491_gestaltAFPClient3_8: i32 = 8;
pub const anon4491_gestaltAFPClient3_8_1: i32 = 9;
pub const anon4491_gestaltAFPClient3_8_3: i32 = 10;
pub const anon4491_gestaltAFPClient3_8_4: i32 = 11;
pub const anon4491_gestaltAFPClientAttributeMask: i32 = -65536;
pub const anon4491_gestaltAFPClientCfgRsrc: i32 = 16;
pub const anon4491_gestaltAFPClientSupportsIP: i32 = 29;
pub const anon4491_gestaltAFPClientVMUI: i32 = 30;
pub const anon4491_gestaltAFPClientMultiReq: i32 = 31;

pub const anon4731 = u32;
pub const anon4731_gestaltAliasMgrAttr: u32 = 1634494835;
pub const anon4731_gestaltAliasMgrPresent: u32 = 0;
pub const anon4731_gestaltAliasMgrSupportsRemoteAppletalk: u32 = 1;
pub const anon4731_gestaltAliasMgrSupportsAOCEKeychain: u32 = 2;
pub const anon4731_gestaltAliasMgrResolveAliasFileWithMountOptions: u32 = 3;
pub const anon4731_gestaltAliasMgrFollowsAliasesWhenResolving: u32 = 4;
pub const anon4731_gestaltAliasMgrSupportsExtendedCalls: u32 = 5;
pub const anon4731_gestaltAliasMgrSupportsFSCalls: u32 = 6;
pub const anon4731_gestaltAliasMgrPrefersPath: u32 = 7;
pub const anon4731_gestaltAliasMgrRequiresAccessors: u32 = 8;
pub const anon4731_CSSM_CERT_UNKNOWN: u32 = 0;
pub const anon4731_CSSM_CERT_X_509v1: u32 = 1;
pub const anon4731_CSSM_CERT_X_509v2: u32 = 2;
pub const anon4731_CSSM_CERT_X_509v3: u32 = 3;
pub const anon4731_CSSM_CERT_PGP: u32 = 4;
pub const anon4731_CSSM_CERT_SPKI: u32 = 5;
pub const anon4731_CSSM_CERT_SDSIv1: u32 = 6;
pub const anon4731_CSSM_CERT_Intel: u32 = 8;
pub const anon4731_CSSM_CERT_X_509_ATTRIBUTE: u32 = 9;
pub const anon4731_CSSM_CERT_X9_ATTRIBUTE: u32 = 10;
pub const anon4731_CSSM_CERT_TUPLE: u32 = 11;
pub const anon4731_CSSM_CERT_ACL_ENTRY: u32 = 12;
pub const anon4731_CSSM_CERT_MULTIPLE: u32 = 32766;
pub const anon4731_CSSM_CERT_LAST: u32 = 32767;
pub const anon4731_CSSM_CL_CUSTOM_CERT_TYPE: u32 = 32768;

pub const anon4871 = u32;
pub const anon4871_gestaltAppearanceAttr: u32 = 1634758770;
pub const anon4871_gestaltAppearanceExists: u32 = 0;
pub const anon4871_gestaltAppearanceCompatMode: u32 = 1;

pub const anon4991 = u32;
pub const anon4991_gestaltAppearanceVersion: u32 = 1634760306;

pub const anon5031 = u32;
pub const anon5031_gestaltArbitorAttr: u32 = 1634886176;
pub const anon5031_gestaltSerialArbitrationExists: u32 = 0;
pub const anon5031_PEFHashLengthShift: u32 = 16;
pub const anon5031_PEFHashValueMask: u32 = 65535;
pub const anon5031_PEFHashMaxLength: u32 = 65535;
pub const anon5031_CSSMERR_CL_INTERNAL_ERROR: u32 = -2147411967;
pub const anon5031_CSSMERR_CL_MEMORY_ERROR: u32 = -2147411966;
pub const anon5031_CSSMERR_CL_MDS_ERROR: u32 = -2147411965;
pub const anon5031_CSSMERR_CL_INVALID_POINTER: u32 = -2147411964;
pub const anon5031_CSSMERR_CL_INVALID_INPUT_POINTER: u32 = -2147411963;
pub const anon5031_CSSMERR_CL_INVALID_OUTPUT_POINTER: u32 = -2147411962;
pub const anon5031_CSSMERR_CL_FUNCTION_NOT_IMPLEMENTED: u32 = -2147411961;
pub const anon5031_CSSMERR_CL_SELF_CHECK_FAILED: u32 = -2147411960;
pub const anon5031_CSSMERR_CL_OS_ACCESS_DENIED: u32 = -2147411959;
pub const anon5031_CSSMERR_CL_FUNCTION_FAILED: u32 = -2147411958;
pub const anon5031_CSSMERR_CL_INVALID_CONTEXT_HANDLE: u32 = -2147411904;
pub const anon5031_CSSMERR_CL_INVALID_CERTGROUP_POINTER: u32 = -2147411902;
pub const anon5031_CSSMERR_CL_INVALID_CERT_POINTER: u32 = -2147411901;
pub const anon5031_CSSMERR_CL_INVALID_CRL_POINTER: u32 = -2147411900;
pub const anon5031_CSSMERR_CL_INVALID_FIELD_POINTER: u32 = -2147411899;
pub const anon5031_CSSMERR_CL_INVALID_DATA: u32 = -2147411898;
pub const anon5031_CSSMERR_CL_CRL_ALREADY_SIGNED: u32 = -2147411897;
pub const anon5031_CSSMERR_CL_INVALID_NUMBER_OF_FIELDS: u32 = -2147411896;
pub const anon5031_CSSMERR_CL_VERIFICATION_FAILURE: u32 = -2147411895;
pub const anon5031_CSSMERR_CL_UNKNOWN_FORMAT: u32 = -2147411890;
pub const anon5031_CSSMERR_CL_UNKNOWN_TAG: u32 = -2147411889;
pub const anon5031_CSSMERR_CL_INVALID_PASSTHROUGH_ID: u32 = -2147411882;

pub const anon5081 = u32;
pub const anon5081_gestaltAppleScriptVersion: u32 = 1634952054;

pub const anon5121 = u32;
pub const anon5121_gestaltAppleScriptAttr: u32 = 1634952050;
pub const anon5121_gestaltAppleScriptPresent: u32 = 0;
pub const anon5121_gestaltAppleScriptPowerPCSupport: u32 = 1;

pub const anon5181 = u32;
pub const anon5181_gestaltATAAttr: u32 = 1635016992;
pub const anon5181_gestaltATAPresent: u32 = 0;
pub const anon5181_CSSM_CERT_PARSE_FORMAT_NONE: u32 = 0;
pub const anon5181_CSSM_CERT_PARSE_FORMAT_CUSTOM: u32 = 1;
pub const anon5181_CSSM_CERT_PARSE_FORMAT_SEXPR: u32 = 2;
pub const anon5181_CSSM_CERT_PARSE_FORMAT_COMPLEX: u32 = 3;
pub const anon5181_CSSM_CERT_PARSE_FORMAT_OID_NAMED: u32 = 4;
pub const anon5181_CSSM_CERT_PARSE_FORMAT_TUPLE: u32 = 5;
pub const anon5181_CSSM_CERT_PARSE_FORMAT_MULTIPLE: u32 = 32766;
pub const anon5181_CSSM_CERT_PARSE_FORMAT_LAST: u32 = 32767;
pub const anon5181_CSSM_CL_CUSTOM_CERT_PARSE_FORMAT: u32 = 32768;

pub const anon5231 = u32;
pub const anon5231_gestaltATalkVersion: u32 = 1635019638;

pub const anon5271 = u32;
pub const anon5271_gestaltAppleTalkVersion: u32 = 1635019883;

pub const anon5531 = u32;
pub const anon5531_gestaltAUXVersion: u32 = 1630500216;

pub const anon5571 = u32;
pub const anon5571_gestaltMacOSCompatibilityBoxAttr: u32 = 1650618232;
pub const anon5571_gestaltMacOSCompatibilityBoxPresent: u32 = 0;
pub const anon5571_gestaltMacOSCompatibilityBoxHasSerial: u32 = 1;
pub const anon5571_gestaltMacOSCompatibilityBoxless: u32 = 2;
pub const anon5571_HFSMaxAttrNameLen: u32 = 127;

pub const anon5641 = u32;
pub const anon5641_gestaltBusClkSpeed: u32 = 1650682987;

pub const anon5681 = u32;
pub const anon5681_gestaltBusClkSpeedMHz: u32 = 1650682989;

pub const anon5781 = u32;
pub const anon5781_gestaltCarbonVersion: u32 = 1667395438;
pub const anon5781_CSSMERR_APPLE_DOTMAC_REQ_QUEUED: u32 = -2147408796;
pub const anon5781_CSSMERR_APPLE_DOTMAC_REQ_REDIRECT: u32 = -2147408795;
pub const anon5781_CSSMERR_APPLE_DOTMAC_REQ_SERVER_ERR: u32 = -2147408794;
pub const anon5781_CSSMERR_APPLE_DOTMAC_REQ_SERVER_PARAM: u32 = -2147408793;
pub const anon5781_CSSMERR_APPLE_DOTMAC_REQ_SERVER_AUTH: u32 = -2147408792;
pub const anon5781_CSSMERR_APPLE_DOTMAC_REQ_SERVER_UNIMPL: u32 = -2147408791;
pub const anon5781_CSSMERR_APPLE_DOTMAC_REQ_SERVER_NOT_AVAIL: u32 = -2147408790;
pub const anon5781_CSSMERR_APPLE_DOTMAC_REQ_SERVER_ALREADY_EXIST: u32 = -2147408789;
pub const anon5781_CSSMERR_APPLE_DOTMAC_REQ_SERVER_SERVICE_ERROR: u32 = -2147408788;
pub const anon5781_CSSMERR_APPLE_DOTMAC_REQ_IS_PENDING: u32 = -2147408787;
pub const anon5781_CSSMERR_APPLE_DOTMAC_NO_REQ_PENDING: u32 = -2147408786;
pub const anon5781_CSSMERR_APPLE_DOTMAC_CSR_VERIFY_FAIL: u32 = -2147408785;
pub const anon5781_CSSMERR_APPLE_DOTMAC_FAILED_CONSISTENCY_CHECK: u32 = -2147408784;

pub const anon5821 = u32;
pub const anon5821_gestaltCFMAttr: u32 = 1667658343;
pub const anon5821_gestaltCFMPresent: u32 = 0;
pub const anon5821_gestaltCFMPresentMask: u32 = 1;
pub const anon5821_gestaltCFM99Present: u32 = 2;
pub const anon5821_gestaltCFM99PresentMask: u32 = 4;

pub const anon5901 = u32;
pub const anon5901_gestaltProcessorCacheLineSize: u32 = 1668508026;

pub const anon5941 = u32;
pub const anon5941_gestaltCollectionMgrVersion: u32 = 1668052078;

pub const anon5981 = u32;
pub const anon5981_gestaltColorMatchingAttr: u32 = 1668117601;
pub const anon5981_gestaltHighLevelMatching: u32 = 0;
pub const anon5981_gestaltColorMatchingLibLoaded: u32 = 1;

pub const anon6041 = u32;
pub const anon6041_gestaltColorMatchingVersion: u32 = 1668117603;
pub const anon6041_gestaltColorSync10: u32 = 256;
pub const anon6041_gestaltColorSync11: u32 = 272;
pub const anon6041_gestaltColorSync104: u32 = 260;
pub const anon6041_gestaltColorSync105: u32 = 261;
pub const anon6041_gestaltColorSync20: u32 = 512;
pub const anon6041_gestaltColorSync21: u32 = 528;
pub const anon6041_gestaltColorSync211: u32 = 529;
pub const anon6041_gestaltColorSync212: u32 = 530;
pub const anon6041_gestaltColorSync213: u32 = 531;
pub const anon6041_gestaltColorSync25: u32 = 592;
pub const anon6041_gestaltColorSync26: u32 = 608;
pub const anon6041_gestaltColorSync261: u32 = 609;
pub const anon6041_gestaltColorSync30: u32 = 768;
pub const anon6041_errAEEventWouldRequireUserConsent: u32 = -1744;

pub const anon6251 = u32;
pub const anon6251_gestaltControlMgrAttr: u32 = 1668183148;
pub const anon6251_gestaltControlMgrPresent: u32 = 1;
pub const anon6251_gestaltControlMgrPresentBit: u32 = 0;
pub const anon6251_gestaltControlMsgPresentMask: u32 = 1;

pub const anon6341 = u32;
pub const anon6341_gestaltConnMgrAttr: u32 = 1668247150;
pub const anon6341_gestaltConnMgrPresent: u32 = 0;
pub const anon6341_gestaltConnMgrCMSearchFix: u32 = 1;
pub const anon6341_gestaltConnMgrErrorString: u32 = 2;
pub const anon6341_gestaltConnMgrMultiAsyncIO: u32 = 3;
pub const anon6341_AEZoomIn: u32 = 7;
pub const anon6341_AEZoomOut: u32 = 8;

pub const anon6421 = u32;
pub const anon6421_gestaltColorPickerVersion: u32 = 1668311922;
pub const anon6421_gestaltColorPicker: u32 = 1668311922;

pub const anon6471 = u32;
pub const anon6471_gestaltComponentMgr: u32 = 1668312692;
pub const anon6471_gestaltComponentPlatform: u32 = 1668247660;

pub const anon6801 = u32;
pub const anon6801_gestaltNativeCPUtype: u32 = 1668314484;
pub const anon6801_gestaltNativeCPUfamily: u32 = 1668314470;
pub const anon6801_gestaltCPU68000: u32 = 0;
pub const anon6801_gestaltCPU68010: u32 = 1;
pub const anon6801_gestaltCPU68020: u32 = 2;
pub const anon6801_gestaltCPU68030: u32 = 3;
pub const anon6801_gestaltCPU68040: u32 = 4;
pub const anon6801_gestaltCPU601: u32 = 257;
pub const anon6801_gestaltCPU603: u32 = 259;
pub const anon6801_gestaltCPU604: u32 = 260;
pub const anon6801_gestaltCPU603e: u32 = 262;
pub const anon6801_gestaltCPU603ev: u32 = 263;
pub const anon6801_gestaltCPU750: u32 = 264;
pub const anon6801_gestaltCPU604e: u32 = 265;
pub const anon6801_gestaltCPU604ev: u32 = 266;
pub const anon6801_gestaltCPUG4: u32 = 268;
pub const anon6801_gestaltCPUG47450: u32 = 272;

pub const anon7001 = u32;
pub const anon7001_gestaltCPUApollo: u32 = 273;
pub const anon7001_gestaltCPUG47447: u32 = 274;
pub const anon7001_gestaltCPU750FX: u32 = 288;
pub const anon7001_gestaltCPU970: u32 = 313;
pub const anon7001_gestaltCPU970FX: u32 = 316;
pub const anon7001_gestaltCPU970MP: u32 = 324;

pub const anon7091 = u32;
pub const anon7091_gestaltCPU486: u32 = 1765029942;
pub const anon7091_gestaltCPUPentium: u32 = 1765095478;
pub const anon7091_gestaltCPUPentiumPro: u32 = 1765109874;
pub const anon7091_gestaltCPUPentiumII: u32 = 1765108073;
pub const anon7091_gestaltCPUX86: u32 = 1769502840;
pub const anon7091_gestaltCPUPentium4: u32 = 1765108086;

pub const anon7191 = u32;
pub const anon7191_gestaltCPUARMFamily: u32 = 1634888992;
pub const anon7191_gestaltCPUARM64: u32 = 1635268148;

pub const anon7351 = u32;
pub const anon7351_gestaltCountOfCPUs: u32 = 1668314483;

pub const anon7391 = u32;
pub const anon7391_gestaltCTBVersion: u32 = 1668571766;

pub const anon7431 = u32;
pub const anon7431_gestaltDBAccessMgrAttr: u32 = 1684169059;
pub const anon7431_gestaltDBAccessMgrPresent: u32 = 0;

pub const anon7481 = u32;
pub const anon7481_gestaltDiskCacheSize: u32 = 1684239226;

pub const anon7521 = u32;
pub const anon7521_gestaltSDPFindVersion: u32 = 1684434532;

pub const anon7561 = u32;
pub const anon7561_gestaltDictionaryMgrAttr: u32 = 1684628340;
pub const anon7561_gestaltDictionaryMgrPresent: u32 = 0;

pub const anon7611 = u32;
pub const anon7611_gestaltDITLExtAttr: u32 = 1684632684;
pub const anon7611_gestaltDITLExtPresent: u32 = 0;
pub const anon7611_gestaltDITLExtSupportsIctb: u32 = 1;
pub const anon7611_CSSM_KEYBLOB_WRAPPED_FORMAT_NONE: u32 = 0;
pub const anon7611_CSSM_KEYBLOB_WRAPPED_FORMAT_PKCS8: u32 = 1;
pub const anon7611_CSSM_KEYBLOB_WRAPPED_FORMAT_PKCS7: u32 = 2;
pub const anon7611_CSSM_KEYBLOB_WRAPPED_FORMAT_MSCAPI: u32 = 3;
pub const anon7611_CSSM_KEYBLOB_WRAPPED_FORMAT_OTHER: u32 = -1;

pub const anon7671 = u32;
pub const anon7671_gestaltDialogMgrAttr: u32 = 1684828007;
pub const anon7671_gestaltDialogMgrPresent: u32 = 1;
pub const anon7671_gestaltDialogMgrPresentBit: u32 = 0;
pub const anon7671_gestaltDialogMgrHasAquaAlertBit: u32 = 2;
pub const anon7671_gestaltDialogMgrPresentMask: u32 = 1;
pub const anon7671_gestaltDialogMgrHasAquaAlertMask: u32 = 4;
pub const anon7671_gestaltDialogMsgPresentMask: u32 = 1;

pub const anon7791 = u32;
pub const anon7791_gestaltDesktopPicturesAttr: u32 = 1684762744;
pub const anon7791_gestaltDesktopPicturesInstalled: u32 = 0;
pub const anon7791_gestaltDesktopPicturesDisplayed: u32 = 1;
pub const anon7791_CSSM_ATTRIBUTE_VENDOR_DEFINED: u32 = 8388608;

pub const anon7891 = u32;
pub const anon7891_gestaltDisplayMgrAttr: u32 = 1685089401;
pub const anon7891_gestaltDisplayMgrPresent: u32 = 0;
pub const anon7891_gestaltDisplayMgrCanSwitchMirrored: u32 = 2;
pub const anon7891_gestaltDisplayMgrSetDepthNotifies: u32 = 3;
pub const anon7891_gestaltDisplayMgrCanConfirm: u32 = 4;
pub const anon7891_gestaltDisplayMgrColorSyncAware: u32 = 5;
pub const anon7891_gestaltDisplayMgrGeneratesProfiles: u32 = 6;
pub const anon7891_gestaltDisplayMgrSleepNotifies: u32 = 7;
pub const anon7891_CSSM_KEYATTR_RETURN_DEFAULT: u32 = 0;
pub const anon7891_CSSM_KEYATTR_RETURN_DATA: u32 = 268435456;
pub const anon7891_CSSM_KEYATTR_RETURN_REF: u32 = 536870912;
pub const anon7891_CSSM_KEYATTR_RETURN_NONE: u32 = 1073741824;
pub const anon7891_CSSM_KEYATTR_PERMANENT: u32 = 1;
pub const anon7891_CSSM_KEYATTR_PRIVATE: u32 = 2;
pub const anon7891_CSSM_KEYATTR_MODIFIABLE: u32 = 4;
pub const anon7891_CSSM_KEYATTR_SENSITIVE: u32 = 8;
pub const anon7891_CSSM_KEYATTR_EXTRACTABLE: u32 = 32;
pub const anon7891_CSSM_KEYATTR_ALWAYS_SENSITIVE: u32 = 16;
pub const anon7891_CSSM_KEYATTR_NEVER_EXTRACTABLE: u32 = 64;

pub const anon8101 = u32;
pub const anon8101_gestaltDrawSprocketVersion: u32 = 1685287030;

pub const anon8141 = u32;
pub const anon8141_gestaltDigitalSignatureVersion: u32 = 1685285223;

pub const anon8221 = u32;
pub const anon8221_gestaltDTPFeatures: u32 = 1685352550;
pub const anon8221_DTPThirdPartySupported: u32 = 4;

pub const anon8321 = u32;
pub const anon8321_gestaltDTPInfo: u32 = 1685352568;

pub const anon8361 = u32;
pub const anon8361_gestaltEasyAccessAttr: u32 = 1700885369;
pub const anon8361_gestaltEasyAccessOff: u32 = 0;
pub const anon8361_gestaltEasyAccessOn: u32 = 1;
pub const anon8361_gestaltEasyAccessSticky: u32 = 2;
pub const anon8361_gestaltEasyAccessLocked: u32 = 3;

pub const anon8441 = u32;
pub const anon8441_gestaltEditionMgrAttr: u32 = 1701082222;
pub const anon8441_gestaltEditionMgrPresent: u32 = 0;
pub const anon8441_gestaltEditionMgrTranslationAware: u32 = 1;

pub const anon8501 = u32;
pub const anon8501_gestaltAppleEventsAttr: u32 = 1702260340;
pub const anon8501_gestaltAppleEventsPresent: u32 = 0;
pub const anon8501_gestaltScriptingSupport: u32 = 1;
pub const anon8501_gestaltOSLInSystem: u32 = 2;
pub const anon8501_gestaltSupportsApplicationURL: u32 = 4;

pub const anon8581 = u32;
pub const anon8581_gestaltExtensionTableVersion: u32 = 1702126188;
pub const anon8581_CSSM_FEE_CURVE_TYPE_DEFAULT: u32 = 0;
pub const anon8581_CSSM_FEE_CURVE_TYPE_MONTGOMERY: u32 = 1;
pub const anon8581_CSSM_FEE_CURVE_TYPE_WEIERSTRASS: u32 = 2;
pub const anon8581_CSSM_FEE_CURVE_TYPE_ANSI_X9_62: u32 = 3;

pub const anon8691 = u32;
pub const anon8691_gestaltFBCVersion: u32 = 1717724022;
pub const anon8691_gestaltFBCCurrentVersion: u32 = 17;
pub const anon8691_gestaltOSXFBCCurrentVersion: u32 = 256;

pub const anon8761 = u32;
pub const anon8761_gestaltFileMappingAttr: u32 = 1718381936;
pub const anon8761_gestaltFileMappingPresent: u32 = 0;
pub const anon8761_gestaltFileMappingMultipleFilesFix: u32 = 1;

pub const anon8821 = u32;
pub const anon8821_gestaltFloppyAttr: u32 = 1718382713;
pub const anon8821_gestaltFloppyIsMFMOnly: u32 = 0;
pub const anon8821_gestaltFloppyIsManualEject: u32 = 1;
pub const anon8821_gestaltFloppyUsesDiskInPlace: u32 = 2;

pub const anon8891 = u32;
pub const anon8891_gestaltFinderAttr: u32 = 1718510706;
pub const anon8891_gestaltFinderDropEvent: u32 = 0;
pub const anon8891_gestaltFinderMagicPlacement: u32 = 1;
pub const anon8891_gestaltFinderCallsAEProcess: u32 = 2;
pub const anon8891_gestaltOSLCompliantFinder: u32 = 3;
pub const anon8891_gestaltFinderSupports4GBVolumes: u32 = 4;
pub const anon8891_gestaltFinderHasClippings: u32 = 6;
pub const anon8891_gestaltFinderFullDragManagerSupport: u32 = 7;
pub const anon8891_gestaltFinderFloppyRootComments: u32 = 8;
pub const anon8891_gestaltFinderLargeAndNotSavedFlavorsOK: u32 = 9;
pub const anon8891_gestaltFinderUsesExtensibleFolderManager: u32 = 10;
pub const anon8891_gestaltFinderUnderstandsRedirectedDesktopFolder: u32 = 11;

pub const anon9041 = u32;
pub const anon9041_gestaltFindFolderAttr: u32 = 1718578276;
pub const anon9041_gestaltFindFolderPresent: u32 = 0;
pub const anon9041_gestaltFolderDescSupport: u32 = 1;
pub const anon9041_gestaltFolderMgrFollowsAliasesWhenResolving: u32 = 2;
pub const anon9041_gestaltFolderMgrSupportsExtendedCalls: u32 = 3;
pub const anon9041_gestaltFolderMgrSupportsDomains: u32 = 4;
pub const anon9041_gestaltFolderMgrSupportsFSCalls: u32 = 5;

pub const anon9141 = u32;
pub const anon9141_gestaltFindFolderRedirectionAttr: u32 = 1718578277;

pub const anon9191 = u32;
pub const anon9191_gestaltFontMgrAttr: u32 = 1718578804;
pub const anon9191_gestaltOutlineFonts: u32 = 0;

pub const anon9241 = u32;
pub const anon9241_gestaltFPUType: u32 = 1718646048;
pub const anon9241_gestaltNoFPU: u32 = 0;
pub const anon9241_gestalt68881: u32 = 1;
pub const anon9241_gestalt68882: u32 = 2;
pub const anon9241_gestalt68040FPU: u32 = 3;

pub const anon9321 = u32;
pub const anon9321_gestaltFSAttr: u32 = 1718820896;
pub const anon9321_gestaltFullExtFSDispatching: u32 = 0;
pub const anon9321_gestaltHasFSSpecCalls: u32 = 1;
pub const anon9321_gestaltHasFileSystemManager: u32 = 2;
pub const anon9321_gestaltFSMDoesDynamicLoad: u32 = 3;
pub const anon9321_gestaltFSSupports4GBVols: u32 = 4;
pub const anon9321_gestaltFSSupports2TBVols: u32 = 5;
pub const anon9321_gestaltHasExtendedDiskInit: u32 = 6;
pub const anon9321_gestaltDTMgrSupportsFSM: u32 = 7;
pub const anon9321_gestaltFSNoMFSVols: u32 = 8;
pub const anon9321_gestaltFSSupportsHFSPlusVols: u32 = 9;
pub const anon9321_gestaltFSIncompatibleDFA82: u32 = 10;

pub const anon9471 = u32;
pub const anon9471_gestaltFSSupportsDirectIO: u32 = 11;

pub const anon9511 = u32;
pub const anon9511_gestaltHasHFSPlusAPIs: u32 = 12;
pub const anon9511_gestaltMustUseFCBAccessors: u32 = 13;
pub const anon9511_gestaltFSUsesPOSIXPathsForConversion: u32 = 14;
pub const anon9511_gestaltFSSupportsExclusiveLocks: u32 = 15;
pub const anon9511_gestaltFSSupportsHardLinkDetection: u32 = 16;
pub const anon9511_gestaltFSAllowsConcurrentAsyncIO: u32 = 17;

pub const anon9601 = u32;
pub const anon9601_gestaltAdminFeaturesFlagsAttr: u32 = 1718773092;
pub const anon9601_gestaltFinderUsesSpecialOpenFoldersFile: u32 = 0;

pub const anon9651 = u32;
pub const anon9651_gestaltFSMVersion: u32 = 1718840608;

pub const anon9691 = u32;
pub const anon9691_gestaltFXfrMgrAttr: u32 = 1719166578;
pub const anon9691_gestaltFXfrMgrPresent: u32 = 0;
pub const anon9691_gestaltFXfrMgrMultiFile: u32 = 1;
pub const anon9691_gestaltFXfrMgrErrorString: u32 = 2;
pub const anon9691_gestaltFXfrMgrAsync: u32 = 3;

pub const anon9771 = u32;
pub const anon9771_gestaltGraphicsAttr: u32 = 1734768737;
pub const anon9771_gestaltGraphicsIsDebugging: u32 = 1;
pub const anon9771_gestaltGraphicsIsLoaded: u32 = 2;
pub const anon9771_gestaltGraphicsIsPowerPC: u32 = 4;

pub const anon9841 = u32;
pub const anon9841_gestaltGraphicsVersion: u32 = 1735550584;
pub const anon9841_gestaltCurrentGraphicsVersion: u32 = 66048;

pub const anon9891 = u32;
pub const anon9891_gestaltHardwareAttr: u32 = 1751414642;
pub const anon9891_gestaltHasVIA1: u32 = 0;
pub const anon9891_gestaltHasVIA2: u32 = 1;
pub const anon9891_gestaltHasASC: u32 = 3;
pub const anon9891_gestaltHasSCC: u32 = 4;
pub const anon9891_gestaltHasSCSI: u32 = 7;
pub const anon9891_gestaltHasSoftPowerOff: u32 = 19;
pub const anon9891_gestaltHasSCSI961: u32 = 21;
pub const anon9891_gestaltHasSCSI962: u32 = 22;
pub const anon9891_gestaltHasUniversalROM: u32 = 24;
pub const anon9891_gestaltHasEnhancedLtalk: u32 = 30;

pub const anon10031 = u32;
pub const anon10031_gestaltHelpMgrAttr: u32 = 1751477360;
pub const anon10031_gestaltHelpMgrPresent: u32 = 0;
pub const anon10031_gestaltHelpMgrExtensions: u32 = 1;
pub const anon10031_gestaltAppleGuideIsDebug: u32 = 30;
pub const anon10031_gestaltAppleGuidePresent: u32 = 31;

pub const anon10111 = u32;
pub const anon10111_gestaltHardwareVendorCode: u32 = 1752326500;
pub const anon10111_gestaltHardwareVendorApple: u32 = 1097887852;

pub const anon10161 = u32;
pub const anon10161_gestaltCompressionMgr: u32 = 1768123760;

pub const anon10201 = u32;
pub const anon10201_gestaltIconUtilitiesAttr: u32 = 1768124270;
pub const anon10201_gestaltIconUtilitiesPresent: u32 = 0;
pub const anon10201_gestaltIconUtilitiesHas48PixelIcons: u32 = 1;
pub const anon10201_gestaltIconUtilitiesHas32BitIcons: u32 = 2;
pub const anon10201_gestaltIconUtilitiesHas8BitDeepMasks: u32 = 3;
pub const anon10201_gestaltIconUtilitiesHasIconServices: u32 = 4;

pub const anon10291 = u32;
pub const anon10291_gestaltInternalDisplay: u32 = 1768190832;

pub const anon10371 = u32;
pub const anon10371_gestaltKeyboardType: u32 = 1801610272;
pub const anon10371_gestaltMacKbd: u32 = 1;
pub const anon10371_gestaltMacAndPad: u32 = 2;
pub const anon10371_gestaltMacPlusKbd: u32 = 3;
pub const anon10371_gestaltUnknownThirdPartyKbd: u32 = 3;
pub const anon10371_gestaltExtADBKbd: u32 = 4;
pub const anon10371_gestaltStdADBKbd: u32 = 5;
pub const anon10371_gestaltPrtblADBKbd: u32 = 6;
pub const anon10371_gestaltPrtblISOKbd: u32 = 7;
pub const anon10371_gestaltStdISOADBKbd: u32 = 8;
pub const anon10371_gestaltExtISOADBKbd: u32 = 9;
pub const anon10371_gestaltADBKbdII: u32 = 10;
pub const anon10371_gestaltADBISOKbdII: u32 = 11;
pub const anon10371_gestaltPwrBookADBKbd: u32 = 12;
pub const anon10371_gestaltPwrBookISOADBKbd: u32 = 13;
pub const anon10371_gestaltAppleAdjustKeypad: u32 = 14;
pub const anon10371_gestaltAppleAdjustADBKbd: u32 = 15;
pub const anon10371_gestaltAppleAdjustISOKbd: u32 = 16;
pub const anon10371_gestaltJapanAdjustADBKbd: u32 = 17;
pub const anon10371_gestaltPwrBkExtISOKbd: u32 = 20;
pub const anon10371_gestaltPwrBkExtJISKbd: u32 = 21;
pub const anon10371_gestaltPwrBkExtADBKbd: u32 = 24;
pub const anon10371_gestaltPS2Keyboard: u32 = 27;
pub const anon10371_gestaltPwrBkSubDomKbd: u32 = 28;
pub const anon10371_gestaltPwrBkSubISOKbd: u32 = 29;
pub const anon10371_gestaltPwrBkSubJISKbd: u32 = 30;
pub const anon10371_gestaltPortableUSBANSIKbd: u32 = 37;
pub const anon10371_gestaltPortableUSBISOKbd: u32 = 38;
pub const anon10371_gestaltPortableUSBJISKbd: u32 = 39;
pub const anon10371_gestaltThirdPartyANSIKbd: u32 = 40;
pub const anon10371_gestaltThirdPartyISOKbd: u32 = 41;
pub const anon10371_gestaltThirdPartyJISKbd: u32 = 42;
pub const anon10371_gestaltPwrBkEKDomKbd: u32 = 195;
pub const anon10371_gestaltPwrBkEKISOKbd: u32 = 196;
pub const anon10371_gestaltPwrBkEKJISKbd: u32 = 197;
pub const anon10371_gestaltUSBCosmoANSIKbd: u32 = 198;
pub const anon10371_gestaltUSBCosmoISOKbd: u32 = 199;
pub const anon10371_gestaltUSBCosmoJISKbd: u32 = 200;
pub const anon10371_gestaltPwrBk99JISKbd: u32 = 201;
pub const anon10371_gestaltUSBAndyANSIKbd: u32 = 204;
pub const anon10371_gestaltUSBAndyISOKbd: u32 = 205;
pub const anon10371_gestaltUSBAndyJISKbd: u32 = 206;

pub const anon10891 = u32;
pub const anon10891_gestaltUSBProF16ANSIKbd: u32 = 34;
pub const anon10891_gestaltUSBProF16ISOKbd: u32 = 35;
pub const anon10891_gestaltUSBProF16JISKbd: u32 = 36;
pub const anon10891_gestaltProF16ANSIKbd: u32 = 31;
pub const anon10891_gestaltProF16ISOKbd: u32 = 32;
pub const anon10891_gestaltProF16JISKbd: u32 = 33;

pub const anon11021 = u32;
pub const anon11021_gestaltUDFSupport: u32 = 1802855526;

pub const anon11061 = u32;
pub const anon11061_gestaltLowMemorySize: u32 = 1819108717;

pub const anon11101 = u32;
pub const anon11101_gestaltLogicalRAMSize: u32 = 1819435373;

pub const anon12111 = u32;
pub const anon12111_gestaltMachineType: u32 = 1835098984;
pub const anon12111_gestaltClassic: u32 = 1;
pub const anon12111_gestaltMacXL: u32 = 2;
pub const anon12111_gestaltMac512KE: u32 = 3;
pub const anon12111_gestaltMacPlus: u32 = 4;
pub const anon12111_gestaltMacSE: u32 = 5;
pub const anon12111_gestaltMacII: u32 = 6;
pub const anon12111_gestaltMacIIx: u32 = 7;
pub const anon12111_gestaltMacIIcx: u32 = 8;
pub const anon12111_gestaltMacSE030: u32 = 9;
pub const anon12111_gestaltPortable: u32 = 10;
pub const anon12111_gestaltMacIIci: u32 = 11;
pub const anon12111_gestaltPowerMac8100_120: u32 = 12;
pub const anon12111_gestaltMacIIfx: u32 = 13;
pub const anon12111_gestaltMacClassic: u32 = 17;
pub const anon12111_gestaltMacIIsi: u32 = 18;
pub const anon12111_gestaltMacLC: u32 = 19;
pub const anon12111_gestaltMacQuadra900: u32 = 20;
pub const anon12111_gestaltPowerBook170: u32 = 21;
pub const anon12111_gestaltMacQuadra700: u32 = 22;
pub const anon12111_gestaltClassicII: u32 = 23;
pub const anon12111_gestaltPowerBook100: u32 = 24;
pub const anon12111_gestaltPowerBook140: u32 = 25;
pub const anon12111_gestaltMacQuadra950: u32 = 26;
pub const anon12111_gestaltMacLCIII: u32 = 27;
pub const anon12111_gestaltPerforma450: u32 = 27;
pub const anon12111_gestaltPowerBookDuo210: u32 = 29;
pub const anon12111_gestaltMacCentris650: u32 = 30;
pub const anon12111_gestaltPowerBookDuo230: u32 = 32;
pub const anon12111_gestaltPowerBook180: u32 = 33;
pub const anon12111_gestaltPowerBook160: u32 = 34;
pub const anon12111_gestaltMacQuadra800: u32 = 35;
pub const anon12111_gestaltMacQuadra650: u32 = 36;
pub const anon12111_gestaltMacLCII: u32 = 37;
pub const anon12111_gestaltPowerBookDuo250: u32 = 38;
pub const anon12111_gestaltAWS9150_80: u32 = 39;
pub const anon12111_gestaltPowerMac8100_110: u32 = 40;
pub const anon12111_gestaltAWS8150_110: u32 = 40;
pub const anon12111_gestaltPowerMac5200: u32 = 41;
pub const anon12111_gestaltPowerMac5260: u32 = 41;
pub const anon12111_gestaltPerforma5300: u32 = 41;
pub const anon12111_gestaltPowerMac6200: u32 = 42;
pub const anon12111_gestaltPerforma6300: u32 = 42;
pub const anon12111_gestaltMacIIvi: u32 = 44;
pub const anon12111_gestaltMacIIvm: u32 = 45;
pub const anon12111_gestaltPerforma600: u32 = 45;
pub const anon12111_gestaltPowerMac7100_80: u32 = 47;
pub const anon12111_gestaltMacIIvx: u32 = 48;
pub const anon12111_gestaltMacColorClassic: u32 = 49;
pub const anon12111_gestaltPerforma250: u32 = 49;
pub const anon12111_gestaltPowerBook165c: u32 = 50;
pub const anon12111_gestaltMacCentris610: u32 = 52;
pub const anon12111_gestaltMacQuadra610: u32 = 53;
pub const anon12111_gestaltPowerBook145: u32 = 54;
pub const anon12111_gestaltPowerMac8100_100: u32 = 55;
pub const anon12111_gestaltMacLC520: u32 = 56;
pub const anon12111_gestaltAWS9150_120: u32 = 57;
pub const anon12111_gestaltPowerMac6400: u32 = 58;
pub const anon12111_gestaltPerforma6400: u32 = 58;
pub const anon12111_gestaltPerforma6360: u32 = 58;
pub const anon12111_gestaltMacCentris660AV: u32 = 60;
pub const anon12111_gestaltMacQuadra660AV: u32 = 60;
pub const anon12111_gestaltPerforma46x: u32 = 62;
pub const anon12111_gestaltPowerMac8100_80: u32 = 65;
pub const anon12111_gestaltAWS8150_80: u32 = 65;
pub const anon12111_gestaltPowerMac9500: u32 = 67;
pub const anon12111_gestaltPowerMac9600: u32 = 67;
pub const anon12111_gestaltPowerMac7500: u32 = 68;
pub const anon12111_gestaltPowerMac7600: u32 = 68;
pub const anon12111_gestaltPowerMac8500: u32 = 69;
pub const anon12111_gestaltPowerMac8600: u32 = 69;
pub const anon12111_gestaltAWS8550: u32 = 68;
pub const anon12111_gestaltPowerBook180c: u32 = 71;
pub const anon12111_gestaltPowerBook520: u32 = 72;
pub const anon12111_gestaltPowerBook520c: u32 = 72;
pub const anon12111_gestaltPowerBook540: u32 = 72;
pub const anon12111_gestaltPowerBook540c: u32 = 72;
pub const anon12111_gestaltPowerMac5400: u32 = 74;
pub const anon12111_gestaltPowerMac6100_60: u32 = 75;
pub const anon12111_gestaltAWS6150_60: u32 = 75;
pub const anon12111_gestaltPowerBookDuo270c: u32 = 77;
pub const anon12111_gestaltMacQuadra840AV: u32 = 78;
pub const anon12111_gestaltPerforma550: u32 = 80;
pub const anon12111_gestaltPowerBook165: u32 = 84;
pub const anon12111_gestaltPowerBook190: u32 = 85;
pub const anon12111_gestaltMacTV: u32 = 88;
pub const anon12111_gestaltMacLC475: u32 = 89;
pub const anon12111_gestaltPerforma47x: u32 = 89;
pub const anon12111_gestaltMacLC575: u32 = 92;
pub const anon12111_gestaltMacQuadra605: u32 = 94;
pub const anon12111_gestaltMacQuadra630: u32 = 98;
pub const anon12111_gestaltMacLC580: u32 = 99;
pub const anon12111_gestaltPerforma580: u32 = 99;
pub const anon12111_gestaltPowerMac6100_66: u32 = 100;
pub const anon12111_gestaltAWS6150_66: u32 = 100;
pub const anon12111_gestaltPowerBookDuo280: u32 = 102;
pub const anon12111_gestaltPowerBookDuo280c: u32 = 103;
pub const anon12111_gestaltPowerMacLC475: u32 = 104;
pub const anon12111_gestaltPowerMacPerforma47x: u32 = 104;
pub const anon12111_gestaltPowerMacLC575: u32 = 105;
pub const anon12111_gestaltPowerMacPerforma57x: u32 = 105;
pub const anon12111_gestaltPowerMacQuadra630: u32 = 106;
pub const anon12111_gestaltPowerMacLC630: u32 = 106;
pub const anon12111_gestaltPowerMacPerforma63x: u32 = 106;
pub const anon12111_gestaltPowerMac7200: u32 = 108;
pub const anon12111_gestaltPowerMac7300: u32 = 109;
pub const anon12111_gestaltPowerMac7100_66: u32 = 112;
pub const anon12111_gestaltPowerBook150: u32 = 115;
pub const anon12111_gestaltPowerMacQuadra700: u32 = 116;
pub const anon12111_gestaltPowerMacQuadra900: u32 = 117;
pub const anon12111_gestaltPowerMacQuadra950: u32 = 118;
pub const anon12111_gestaltPowerMacCentris610: u32 = 119;
pub const anon12111_gestaltPowerMacCentris650: u32 = 120;
pub const anon12111_gestaltPowerMacQuadra610: u32 = 121;
pub const anon12111_gestaltPowerMacQuadra650: u32 = 122;
pub const anon12111_gestaltPowerMacQuadra800: u32 = 123;
pub const anon12111_gestaltPowerBookDuo2300: u32 = 124;
pub const anon12111_gestaltPowerBook500PPCUpgrade: u32 = 126;
pub const anon12111_gestaltPowerBook5300: u32 = 128;
pub const anon12111_gestaltPowerBook1400: u32 = 310;
pub const anon12111_gestaltPowerBook3400: u32 = 306;
pub const anon12111_gestaltPowerBook2400: u32 = 307;
pub const anon12111_gestaltPowerBookG3Series: u32 = 312;
pub const anon12111_gestaltPowerBookG3: u32 = 313;
pub const anon12111_gestaltPowerBookG3Series2: u32 = 314;
pub const anon12111_gestaltPowerMacNewWorld: u32 = 406;
pub const anon12111_gestaltPowerMacG3: u32 = 510;
pub const anon12111_gestaltPowerMac5500: u32 = 512;
pub const anon12111_gestalt20thAnniversary: u32 = 512;
pub const anon12111_gestaltPowerMac6500: u32 = 513;
pub const anon12111_gestaltPowerMac4400_160: u32 = 514;
pub const anon12111_gestaltPowerMac4400: u32 = 515;
pub const anon12111_gestaltMacOSCompatibility: u32 = 1206;

pub const anon13481 = u32;
pub const anon13481_gestaltQuadra605: u32 = 94;
pub const anon13481_gestaltQuadra610: u32 = 53;
pub const anon13481_gestaltQuadra630: u32 = 98;
pub const anon13481_gestaltQuadra650: u32 = 36;
pub const anon13481_gestaltQuadra660AV: u32 = 60;
pub const anon13481_gestaltQuadra700: u32 = 22;
pub const anon13481_gestaltQuadra800: u32 = 35;
pub const anon13481_gestaltQuadra840AV: u32 = 78;
pub const anon13481_gestaltQuadra900: u32 = 20;
pub const anon13481_gestaltQuadra950: u32 = 26;

pub const anon13611 = i32;
pub const anon13611_MachineNameStrID: i32 = -16395;

pub const anon13651 = u32;
pub const anon13651_gestaltSMPMailerVersion: u32 = 1835101298;

pub const anon13691 = u32;
pub const anon13691_gestaltMediaBay: u32 = 1835165032;
pub const anon13691_gestaltMBLegacy: u32 = 0;
pub const anon13691_gestaltMBSingleBay: u32 = 1;
pub const anon13691_gestaltMBMultipleBays: u32 = 2;

pub const anon13761 = u32;
pub const anon13761_gestaltMessageMgrVersion: u32 = 1835365235;

pub const anon13821 = u32;
pub const anon13821_gestaltMenuMgrAttr: u32 = 1835363957;
pub const anon13821_gestaltMenuMgrPresent: u32 = 1;
pub const anon13821_gestaltMenuMgrPresentBit: u32 = 0;
pub const anon13821_gestaltMenuMgrAquaLayoutBit: u32 = 1;
pub const anon13821_gestaltMenuMgrMultipleItemsWithCommandIDBit: u32 = 2;
pub const anon13821_gestaltMenuMgrRetainsIconRefBit: u32 = 3;
pub const anon13821_gestaltMenuMgrSendsMenuBoundsToDefProcBit: u32 = 4;
pub const anon13821_gestaltMenuMgrMoreThanFiveMenusDeepBit: u32 = 5;
pub const anon13821_gestaltMenuMgrCGImageMenuTitleBit: u32 = 6;
pub const anon13821_gestaltMenuMgrPresentMask: u32 = 1;
pub const anon13821_gestaltMenuMgrAquaLayoutMask: u32 = 2;
pub const anon13821_gestaltMenuMgrMultipleItemsWithCommandIDMask: u32 = 4;
pub const anon13821_gestaltMenuMgrRetainsIconRefMask: u32 = 8;
pub const anon13821_gestaltMenuMgrSendsMenuBoundsToDefProcMask: u32 = 16;
pub const anon13821_gestaltMenuMgrMoreThanFiveMenusDeepMask: u32 = 32;
pub const anon13821_gestaltMenuMgrCGImageMenuTitleMask: u32 = 64;

pub const anon14051 = u32;
pub const anon14051_gestaltMultipleUsersState: u32 = 1835426930;

pub const anon14101 = u32;
pub const anon14101_gestaltMachineIcon: u32 = 1835623278;

pub const anon14141 = u32;
pub const anon14141_gestaltMiscAttr: u32 = 1835627363;
pub const anon14141_gestaltScrollingThrottle: u32 = 0;
pub const anon14141_gestaltSquareMenuBar: u32 = 2;

pub const anon14351 = u32;
pub const anon14351_gestaltMixedModeVersion: u32 = 1835628644;

pub const anon14391 = u32;
pub const anon14391_gestaltMixedModeAttr: u32 = 1835628644;
pub const anon14391_gestaltMixedModePowerPC: u32 = 0;
pub const anon14391_gestaltPowerPCAware: u32 = 0;
pub const anon14391_gestaltMixedModeCFM68K: u32 = 1;
pub const anon14391_gestaltMixedModeCFM68KHasTrap: u32 = 2;
pub const anon14391_gestaltMixedModeCFM68KHasState: u32 = 3;

pub const anon14481 = u32;
pub const anon14481_gestaltQuickTimeConferencing: u32 = 1836346475;

pub const anon14521 = u32;
pub const anon14521_gestaltMemoryMapAttr: u32 = 1835884912;
pub const anon14521_gestaltMemoryMapSparse: u32 = 0;

pub const anon14571 = u32;
pub const anon14571_gestaltMMUType: u32 = 1835889952;
pub const anon14571_gestaltNoMMU: u32 = 0;
pub const anon14571_gestaltAMU: u32 = 1;
pub const anon14571_gestalt68851: u32 = 2;
pub const anon14571_gestalt68030MMU: u32 = 3;
pub const anon14571_gestalt68040MMU: u32 = 4;
pub const anon14571_gestaltEMMU1: u32 = 5;

pub const anon14671 = u32;
pub const anon14671_gestaltUserVisibleMachineName: u32 = 1835950445;

pub const anon14741 = u32;
pub const anon14741_gestaltMPCallableAPIsAttr: u32 = 1836086115;
pub const anon14741_gestaltMPFileManager: u32 = 0;
pub const anon14741_gestaltMPDeviceManager: u32 = 1;
pub const anon14741_gestaltMPTrapCalls: u32 = 2;

pub const anon14811 = u32;
pub const anon14811_gestaltStdNBPAttr: u32 = 1852601712;
pub const anon14811_gestaltStdNBPPresent: u32 = 0;
pub const anon14811_gestaltStdNBPSupportsAutoPosition: u32 = 1;

pub const anon14871 = u32;
pub const anon14871_gestaltNotificationMgrAttr: u32 = 1852663666;
pub const anon14871_gestaltNotificationPresent: u32 = 0;

pub const anon14921 = u32;
pub const anon14921_gestaltNameRegistryVersion: u32 = 1852990823;

pub const anon14961 = u32;
pub const anon14961_gestaltNuBusSlotCount: u32 = 1853186675;

pub const anon15001 = u32;
pub const anon15001_gestaltOCEToolboxVersion: u32 = 1868785012;
pub const anon15001_gestaltOCETB: u32 = 258;
pub const anon15001_gestaltSFServer: u32 = 256;

pub const anon15061 = u32;
pub const anon15061_gestaltOCEToolboxAttr: u32 = 1868785013;
pub const anon15061_gestaltOCETBPresent: u32 = 1;
pub const anon15061_gestaltOCETBAvailable: u32 = 2;
pub const anon15061_gestaltOCESFServerAvailable: u32 = 4;
pub const anon15061_gestaltOCETBNativeGlueAvailable: u32 = 16;

pub const anon15141 = u32;
pub const anon15141_gestaltOpenFirmwareInfo: u32 = 1869637239;

pub const anon15181 = u32;
pub const anon15181_gestaltOSAttr: u32 = 1869815840;
pub const anon15181_gestaltSysZoneGrowable: u32 = 0;
pub const anon15181_gestaltLaunchCanReturn: u32 = 1;
pub const anon15181_gestaltLaunchFullFileSpec: u32 = 2;
pub const anon15181_gestaltLaunchControl: u32 = 3;
pub const anon15181_gestaltTempMemSupport: u32 = 4;
pub const anon15181_gestaltRealTempMemory: u32 = 5;
pub const anon15181_gestaltTempMemTracked: u32 = 6;
pub const anon15181_gestaltIPCSupport: u32 = 7;
pub const anon15181_gestaltSysDebuggerSupport: u32 = 8;
pub const anon15181_gestaltNativeProcessMgrBit: u32 = 19;
pub const anon15181_gestaltAltivecRegistersSwappedCorrectlyBit: u32 = 20;

pub const anon15331 = u32;
pub const anon15331_gestaltOSTable: u32 = 1869837428;

pub const anon15441 = u32;
pub const anon15441_gestaltOpenTptNetworkSetup: u32 = 1869898598;
pub const anon15441_gestaltOpenTptNetworkSetupLegacyImport: u32 = 0;
pub const anon15441_gestaltOpenTptNetworkSetupLegacyExport: u32 = 1;
pub const anon15441_gestaltOpenTptNetworkSetupSupportsMultihoming: u32 = 2;

pub const anon15511 = u32;
pub const anon15511_gestaltOpenTptNetworkSetupVersion: u32 = 1869898614;

pub const anon15611 = u32;
pub const anon15611_gestaltOpenTptRemoteAccess: u32 = 1869902433;
pub const anon15611_gestaltOpenTptRemoteAccessPresent: u32 = 0;
pub const anon15611_gestaltOpenTptRemoteAccessLoaded: u32 = 1;
pub const anon15611_gestaltOpenTptRemoteAccessClientOnly: u32 = 2;
pub const anon15611_gestaltOpenTptRemoteAccessPServer: u32 = 3;
pub const anon15611_gestaltOpenTptRemoteAccessMPServer: u32 = 4;
pub const anon15611_gestaltOpenTptPPPPresent: u32 = 5;
pub const anon15611_gestaltOpenTptARAPPresent: u32 = 6;

pub const anon15721 = u32;
pub const anon15721_gestaltOpenTptRemoteAccessVersion: u32 = 1869902454;

pub const anon15801 = u32;
pub const anon15801_gestaltOpenTptVersions: u32 = 1869903474;

pub const anon15841 = u32;
pub const anon15841_gestaltOpenTpt: u32 = 1869898094;
pub const anon15841_gestaltOpenTptPresentMask: u32 = 1;
pub const anon15841_gestaltOpenTptLoadedMask: u32 = 2;
pub const anon15841_gestaltOpenTptAppleTalkPresentMask: u32 = 4;
pub const anon15841_gestaltOpenTptAppleTalkLoadedMask: u32 = 8;
pub const anon15841_gestaltOpenTptTCPPresentMask: u32 = 16;
pub const anon15841_gestaltOpenTptTCPLoadedMask: u32 = 32;
pub const anon15841_gestaltOpenTptIPXSPXPresentMask: u32 = 64;
pub const anon15841_gestaltOpenTptIPXSPXLoadedMask: u32 = 128;
pub const anon15841_gestaltOpenTptPresentBit: u32 = 0;
pub const anon15841_gestaltOpenTptLoadedBit: u32 = 1;
pub const anon15841_gestaltOpenTptAppleTalkPresentBit: u32 = 2;
pub const anon15841_gestaltOpenTptAppleTalkLoadedBit: u32 = 3;
pub const anon15841_gestaltOpenTptTCPPresentBit: u32 = 4;
pub const anon15841_gestaltOpenTptTCPLoadedBit: u32 = 5;
pub const anon15841_gestaltOpenTptIPXSPXPresentBit: u32 = 6;
pub const anon15841_gestaltOpenTptIPXSPXLoadedBit: u32 = 7;

pub const anon16051 = u32;
pub const anon16051_gestaltPCCard: u32 = 1885561700;
pub const anon16051_gestaltCardServicesPresent: u32 = 0;
pub const anon16051_gestaltPCCardFamilyPresent: u32 = 1;
pub const anon16051_gestaltPCCardHasPowerControl: u32 = 2;
pub const anon16051_gestaltPCCardSupportsCardBus: u32 = 3;

pub const anon16171 = u32;
pub const anon16171_gestaltProcClkSpeedMHz: u32 = 1835232363;

pub const anon16211 = u32;
pub const anon16211_gestaltPCXAttr: u32 = 1885567079;
pub const anon16211_gestaltPCXHas8and16BitFAT: u32 = 0;
pub const anon16211_gestaltPCXHasProDOS: u32 = 1;
pub const anon16211_gestaltPCXNewUI: u32 = 2;
pub const anon16211_gestaltPCXUseICMapping: u32 = 3;

pub const anon16291 = u32;
pub const anon16291_gestaltLogicalPageSize: u32 = 1885827962;

pub const anon16431 = u32;
pub const anon16431_gestaltScreenCaptureMain: u32 = 1885954865;
pub const anon16431_gestaltScreenCaptureDir: u32 = 1885954866;

pub const anon16481 = u32;
pub const anon16481_gestaltGXPrintingMgrVersion: u32 = 1886218098;

pub const anon16571 = u32;
pub const anon16571_gestaltPowerMgrAttr: u32 = 1886353266;
pub const anon16571_gestaltPMgrExists: u32 = 0;
pub const anon16571_gestaltPMgrCPUIdle: u32 = 1;
pub const anon16571_gestaltPMgrSCC: u32 = 2;
pub const anon16571_gestaltPMgrSound: u32 = 3;
pub const anon16571_gestaltPMgrDispatchExists: u32 = 4;
pub const anon16571_gestaltPMgrSupportsAVPowerStateAtSleepWake: u32 = 5;

pub const anon16671 = u32;
pub const anon16671_gestaltPowerMgrVers: u32 = 1886876278;

pub const anon16771 = u32;
pub const anon16771_gestaltPPCToolboxAttr: u32 = 1886413600;
pub const anon16771_gestaltPPCToolboxPresent: u32 = 0;
pub const anon16771_gestaltPPCSupportsRealTime: u32 = 4096;
pub const anon16771_gestaltPPCSupportsIncoming: u32 = 1;
pub const anon16771_gestaltPPCSupportsOutGoing: u32 = 2;
pub const anon16771_gestaltPPCSupportsTCP_IP: u32 = 4;
pub const anon16771_gestaltPPCSupportsIncomingAppleTalk: u32 = 16;
pub const anon16771_gestaltPPCSupportsIncomingTCP_IP: u32 = 32;
pub const anon16771_gestaltPPCSupportsOutgoingAppleTalk: u32 = 256;
pub const anon16771_gestaltPPCSupportsOutgoingTCP_IP: u32 = 512;

pub const anon16951 = u32;
pub const anon16951_gestaltPowerPCProcessorFeatures: u32 = 1886413670;
pub const anon16951_gestaltPowerPCHasGraphicsInstructions: u32 = 0;
pub const anon16951_gestaltPowerPCHasSTFIWXInstruction: u32 = 1;
pub const anon16951_gestaltPowerPCHasSquareRootInstructions: u32 = 2;
pub const anon16951_gestaltPowerPCHasDCBAInstruction: u32 = 3;
pub const anon16951_gestaltPowerPCHasVectorInstructions: u32 = 4;
pub const anon16951_gestaltPowerPCHasDataStreams: u32 = 5;
pub const anon16951_gestaltPowerPCHas64BitSupport: u32 = 6;
pub const anon16951_gestaltPowerPCHasDCBTStreams: u32 = 7;
pub const anon16951_gestaltPowerPCASArchitecture: u32 = 8;
pub const anon16951_gestaltPowerPCIgnoresDCBST: u32 = 9;

pub const anon17091 = u32;
pub const anon17091_gestaltProcessorType: u32 = 1886547811;
pub const anon17091_gestalt68000: u32 = 1;
pub const anon17091_gestalt68010: u32 = 2;
pub const anon17091_gestalt68020: u32 = 3;
pub const anon17091_gestalt68030: u32 = 4;
pub const anon17091_gestalt68040: u32 = 5;

pub const anon17221 = u32;
pub const anon17221_gestaltParityAttr: u32 = 1886549113;
pub const anon17221_gestaltHasParityCapability: u32 = 0;
pub const anon17221_gestaltParityEnabled: u32 = 1;

pub const anon17281 = u32;
pub const anon17281_gestaltQD3DVersion: u32 = 1899197984;

pub const anon17451 = u32;
pub const anon17451_gestaltQuickdrawVersion: u32 = 1902387232;
pub const anon17451_gestaltOriginalQD: u32 = 0;
pub const anon17451_gestalt8BitQD: u32 = 256;
pub const anon17451_gestalt32BitQD: u32 = 512;
pub const anon17451_gestalt32BitQD11: u32 = 513;
pub const anon17451_gestalt32BitQD12: u32 = 544;
pub const anon17451_gestalt32BitQD13: u32 = 560;
pub const anon17451_gestaltAllegroQD: u32 = 592;
pub const anon17451_gestaltMacOSXQD: u32 = 768;

pub const anon17701 = u32;
pub const anon17701_gestaltGXVersion: u32 = 1902405496;

pub const anon17741 = u32;
pub const anon17741_gestaltQuickdrawFeatures: u32 = 1902408311;
pub const anon17741_gestaltHasColor: u32 = 0;
pub const anon17741_gestaltHasDeepGWorlds: u32 = 1;
pub const anon17741_gestaltHasDirectPixMaps: u32 = 2;
pub const anon17741_gestaltHasGrayishTextOr: u32 = 3;
pub const anon17741_gestaltSupportsMirroring: u32 = 4;
pub const anon17741_gestaltQDHasLongRowBytes: u32 = 5;

pub const anon17841 = u32;
pub const anon17841_gestaltQDTextVersion: u32 = 1902408824;
pub const anon17841_gestaltOriginalQDText: u32 = 0;
pub const anon17841_gestaltAllegroQDText: u32 = 256;
pub const anon17841_gestaltMacOSXQDText: u32 = 512;

pub const anon17911 = u32;
pub const anon17911_gestaltQDTextFeatures: u32 = 1902408806;
pub const anon17911_gestaltWSIISupport: u32 = 0;
pub const anon17911_gestaltSbitFontSupport: u32 = 1;
pub const anon17911_gestaltAntiAliasedTextAvailable: u32 = 2;
pub const anon17911_gestaltOFA2available: u32 = 3;
pub const anon17911_gestaltCreatesAliasFontRsrc: u32 = 4;
pub const anon17911_gestaltNativeType1FontSupport: u32 = 5;
pub const anon17911_gestaltCanUseCGTextRendering: u32 = 6;

pub const anon18031 = u32;
pub const anon18031_gestaltQuickTimeConferencingInfo: u32 = 1903453033;

pub const anon18071 = u32;
pub const anon18071_gestaltQuickTimeVersion: u32 = 1903454573;
pub const anon18071_gestaltQuickTime: u32 = 1903454573;
pub const anon18071_CSSM_CERT_BUNDLE_ENCODING_UNKNOWN: u32 = 0;
pub const anon18071_CSSM_CERT_BUNDLE_ENCODING_CUSTOM: u32 = 1;
pub const anon18071_CSSM_CERT_BUNDLE_ENCODING_BER: u32 = 2;
pub const anon18071_CSSM_CERT_BUNDLE_ENCODING_DER: u32 = 3;
pub const anon18071_CSSM_CERT_BUNDLE_ENCODING_SEXPR: u32 = 4;
pub const anon18071_CSSM_CERT_BUNDLE_ENCODING_PGP: u32 = 5;

pub const anon18121 = u32;
pub const anon18121_gestaltQuickTimeFeatures: u32 = 1903456883;
pub const anon18121_gestaltPPCQuickTimeLibPresent: u32 = 0;

pub const anon18171 = u32;
pub const anon18171_gestaltQuickTimeStreamingFeatures: u32 = 1903457126;

pub const anon18211 = u32;
pub const anon18211_gestaltQuickTimeStreamingVersion: u32 = 1903457140;

pub const anon18251 = u32;
pub const anon18251_gestaltQuickTimeThreadSafeFeaturesAttr: u32 = 1903457384;
pub const anon18251_gestaltQuickTimeThreadSafeICM: u32 = 0;
pub const anon18251_gestaltQuickTimeThreadSafeMovieToolbox: u32 = 1;
pub const anon18251_gestaltQuickTimeThreadSafeMovieImport: u32 = 2;
pub const anon18251_gestaltQuickTimeThreadSafeMovieExport: u32 = 3;
pub const anon18251_gestaltQuickTimeThreadSafeGraphicsImport: u32 = 4;
pub const anon18251_gestaltQuickTimeThreadSafeGraphicsExport: u32 = 5;
pub const anon18251_gestaltQuickTimeThreadSafeMoviePlayback: u32 = 6;

pub const anon18361 = u32;
pub const anon18361_gestaltQTVRMgrAttr: u32 = 1903457906;
pub const anon18361_gestaltQTVRMgrPresent: u32 = 0;
pub const anon18361_gestaltQTVRObjMoviesPresent: u32 = 1;
pub const anon18361_gestaltQTVRCylinderPanosPresent: u32 = 2;
pub const anon18361_gestaltQTVRCubicPanosPresent: u32 = 3;

pub const anon18441 = u32;
pub const anon18441_gestaltQTVRMgrVers: u32 = 1903457910;

pub const anon18601 = u32;
pub const anon18601_gestaltPhysicalRAMSize: u32 = 1918987552;

pub const anon18641 = u32;
pub const anon18641_gestaltPhysicalRAMSizeInMegabytes: u32 = 1918987629;

pub const anon18681 = u32;
pub const anon18681_gestaltRBVAddr: u32 = 1919055392;

pub const anon18721 = u32;
pub const anon18721_gestaltROMSize: u32 = 1919905056;

pub const anon18761 = u32;
pub const anon18761_gestaltROMVersion: u32 = 1919905142;

pub const anon18801 = u32;
pub const anon18801_gestaltResourceMgrAttr: u32 = 1920168547;
pub const anon18801_gestaltPartialRsrcs: u32 = 0;
pub const anon18801_gestaltHasResourceOverrides: u32 = 1;

pub const anon18861 = u32;
pub const anon18861_gestaltResourceMgrBugFixesAttrs: u32 = 1919771239;
pub const anon18861_gestaltRMForceSysHeapRolledIn: u32 = 0;
pub const anon18861_gestaltRMFakeAppleMenuItemsRolledIn: u32 = 1;
pub const anon18861_gestaltSanityCheckResourceFiles: u32 = 2;
pub const anon18861_gestaltSupportsFSpResourceFileAlreadyOpenBit: u32 = 3;
pub const anon18861_gestaltRMSupportsFSCalls: u32 = 4;
pub const anon18861_gestaltRMTypeIndexOrderingReverse: u32 = 8;

pub const anon18971 = u32;
pub const anon18971_gestaltRealtimeMgrAttr: u32 = 1920232818;
pub const anon18971_gestaltRealtimeMgrPresent: u32 = 0;

pub const anon19031 = u32;
pub const anon19031_gestaltSafeOFAttr: u32 = 1935763045;
pub const anon19031_gestaltVMZerosPagesBit: u32 = 0;
pub const anon19031_gestaltInitHeapZerosOutHeapsBit: u32 = 1;
pub const anon19031_gestaltNewHandleReturnsZeroedMemoryBit: u32 = 2;
pub const anon19031_gestaltNewPtrReturnsZeroedMemoryBit: u32 = 3;
pub const anon19031_gestaltFileAllocationZeroedBlocksBit: u32 = 4;

pub const anon19131 = u32;
pub const anon19131_gestaltSCCReadAddr: u32 = 1935893362;

pub const anon19171 = u32;
pub const anon19171_gestaltSCCWriteAddr: u32 = 1935893367;

pub const anon19211 = u32;
pub const anon19211_gestaltScrapMgrAttr: u32 = 1935897185;
pub const anon19211_gestaltScrapMgrTranslationAware: u32 = 0;

pub const anon19261 = u32;
pub const anon19261_gestaltScriptMgrVersion: u32 = 1935897193;

pub const anon19301 = u32;
pub const anon19301_gestaltScriptCount: u32 = 1935897123;
pub const anon19301_CSSM_DB_INDEX_ON_UNKNOWN: u32 = 0;
pub const anon19301_CSSM_DB_INDEX_ON_ATTRIBUTE: u32 = 1;
pub const anon19301_CSSM_DB_INDEX_ON_RECORD: u32 = 2;

pub const anon19341 = u32;
pub const anon19341_gestaltSCSI: u32 = 1935897449;
pub const anon19341_gestaltAsyncSCSI: u32 = 0;
pub const anon19341_gestaltAsyncSCSIINROM: u32 = 1;
pub const anon19341_gestaltSCSISlotBoot: u32 = 2;
pub const anon19341_gestaltSCSIPollSIH: u32 = 3;

pub const anon19421 = u32;
pub const anon19421_gestaltControlStripAttr: u32 = 1935959414;
pub const anon19421_gestaltControlStripExists: u32 = 0;
pub const anon19421_gestaltControlStripVersionFixed: u32 = 1;
pub const anon19421_gestaltControlStripUserFont: u32 = 2;
pub const anon19421_gestaltControlStripUserHotKey: u32 = 3;

pub const anon19501 = u32;
pub const anon19501_gestaltSDPStandardDirectoryVersion: u32 = 1935963762;

pub const anon19541 = u32;
pub const anon19541_gestaltSerialAttr: u32 = 1936028192;
pub const anon19541_gestaltHasGPIaToDCDa: u32 = 0;
pub const anon19541_gestaltHasGPIaToRTxCa: u32 = 1;
pub const anon19541_gestaltHasGPIbToDCDb: u32 = 2;
pub const anon19541_gestaltHidePortA: u32 = 3;
pub const anon19541_gestaltHidePortB: u32 = 4;
pub const anon19541_gestaltPortADisabled: u32 = 5;
pub const anon19541_gestaltPortBDisabled: u32 = 6;
pub const anon19541_CSSM_DB_ACCESS_READ: u32 = 1;
pub const anon19541_CSSM_DB_ACCESS_WRITE: u32 = 2;
pub const anon19541_CSSM_DB_ACCESS_PRIVILEGED: u32 = 4;

pub const anon19651 = u32;
pub const anon19651_gestaltShutdownAttributes: u32 = 1936225652;
pub const anon19651_gestaltShutdownHassdOnBootVolUnmount: u32 = 0;

pub const anon19701 = u32;
pub const anon19701_gestaltNuBusConnectors: u32 = 1936487523;

pub const anon19741 = u32;
pub const anon19741_gestaltSlotAttr: u32 = 1936486260;
pub const anon19741_gestaltSlotMgrExists: u32 = 0;
pub const anon19741_gestaltNuBusPresent: u32 = 1;
pub const anon19741_gestaltSESlotPresent: u32 = 2;
pub const anon19741_gestaltSE30SlotPresent: u32 = 3;
pub const anon19741_gestaltPortableSlotPresent: u32 = 4;

pub const anon19831 = u32;
pub const anon19831_gestaltFirstSlotNumber: u32 = 1936487473;
pub const anon19831_CSSM_DB_EQUAL: u32 = 0;
pub const anon19831_CSSM_DB_NOT_EQUAL: u32 = 1;
pub const anon19831_CSSM_DB_LESS_THAN: u32 = 2;
pub const anon19831_CSSM_DB_GREATER_THAN: u32 = 3;
pub const anon19831_CSSM_DB_CONTAINS: u32 = 4;
pub const anon19831_CSSM_DB_CONTAINS_INITIAL_SUBSTRING: u32 = 5;
pub const anon19831_CSSM_DB_CONTAINS_FINAL_SUBSTRING: u32 = 6;

pub const anon19871 = u32;
pub const anon19871_gestaltSoundAttr: u32 = 1936614432;
pub const anon19871_gestaltStereoCapability: u32 = 0;
pub const anon19871_gestaltStereoMixing: u32 = 1;
pub const anon19871_gestaltSoundIOMgrPresent: u32 = 3;
pub const anon19871_gestaltBuiltInSoundInput: u32 = 4;
pub const anon19871_gestaltHasSoundInputDevice: u32 = 5;
pub const anon19871_gestaltPlayAndRecord: u32 = 6;
pub const anon19871_gestalt16BitSoundIO: u32 = 7;
pub const anon19871_gestaltStereoInput: u32 = 8;
pub const anon19871_gestaltLineLevelInput: u32 = 9;
pub const anon19871_gestaltSndPlayDoubleBuffer: u32 = 10;
pub const anon19871_gestaltMultiChannels: u32 = 11;
pub const anon19871_gestalt16BitAudioSupport: u32 = 12;

pub const anon20041 = u32;
pub const anon20041_gestaltSplitOSAttr: u32 = 1936748403;
pub const anon20041_gestaltSplitOSBootDriveIsNetworkVolume: u32 = 0;
pub const anon20041_gestaltSplitOSAware: u32 = 1;
pub const anon20041_gestaltSplitOSEnablerVolumeIsDifferentFromBootVolume: u32 = 2;
pub const anon20041_gestaltSplitOSMachineNameSetToNetworkNameTemp: u32 = 3;
pub const anon20041_gestaltSplitOSMachineNameStartupDiskIsNonPersistent: u32 = 5;

pub const anon20131 = u32;
pub const anon20131_gestaltSMPSPSendLetterVersion: u32 = 1936749420;

pub const anon20171 = u32;
pub const anon20171_gestaltSpeechRecognitionAttr: u32 = 1936880737;
pub const anon20171_gestaltDesktopSpeechRecognition: u32 = 1;
pub const anon20171_gestaltTelephoneSpeechRecognition: u32 = 2;

pub const anon20231 = u32;
pub const anon20231_gestaltSpeechRecognitionVersion: u32 = 1936880738;

pub const anon20271 = u32;
pub const anon20271_gestaltSoftwareVendorCode: u32 = 1936875876;
pub const anon20271_gestaltSoftwareVendorApple: u32 = 1097887852;
pub const anon20271_gestaltSoftwareVendorLicensee: u32 = 1281584755;

pub const anon20331 = u32;
pub const anon20331_gestaltStandardFileAttr: u32 = 1937007718;
pub const anon20331_gestaltStandardFile58: u32 = 0;
pub const anon20331_gestaltStandardFileTranslationAware: u32 = 1;
pub const anon20331_gestaltStandardFileHasColorIcons: u32 = 2;
pub const anon20331_gestaltStandardFileUseGenericIcons: u32 = 3;
pub const anon20331_gestaltStandardFileHasDynamicVolumeAllocation: u32 = 4;
pub const anon20331_CSSM_DL_UNKNOWN: u32 = 0;
pub const anon20331_CSSM_DL_CUSTOM: u32 = 1;
pub const anon20331_CSSM_DL_LDAP: u32 = 2;
pub const anon20331_CSSM_DL_ODBC: u32 = 3;
pub const anon20331_CSSM_DL_PKCS11: u32 = 4;
pub const anon20331_CSSM_DL_FFS: u32 = 5;
pub const anon20331_CSSM_DL_MEMORY: u32 = 6;
pub const anon20331_CSSM_DL_REMOTEDIR: u32 = 7;

pub const anon20421 = u32;
pub const anon20421_gestaltSysArchitecture: u32 = 1937339233;
pub const anon20421_gestalt68k: u32 = 1;
pub const anon20421_gestaltPowerPC: u32 = 2;
pub const anon20421_gestaltIntel: u32 = 10;
pub const anon20421_gestaltArm: u32 = 20;

pub const anon20501 = u32;
pub const anon20501_gestaltSystemUpdateVersion: u32 = 1937339253;

pub const anon20811 = u32;
pub const anon20811_gestaltSystemVersion: u32 = 1937339254;
pub const anon20811_gestaltSystemVersionMajor: u32 = 1937339185;
pub const anon20811_gestaltSystemVersionMinor: u32 = 1937339186;
pub const anon20811_gestaltSystemVersionBugFix: u32 = 1937339187;

pub const anon20881 = u32;
pub const anon20881_gestaltToolboxTable: u32 = 1952609396;

pub const anon20921 = u32;
pub const anon20921_gestaltTextEditVersion: u32 = 1952784416;
pub const anon20921_gestaltTE1: u32 = 1;
pub const anon20921_gestaltTE2: u32 = 2;
pub const anon20921_gestaltTE3: u32 = 3;
pub const anon20921_gestaltTE4: u32 = 4;
pub const anon20921_gestaltTE5: u32 = 5;

pub const anon21051 = u32;
pub const anon21051_gestaltTEAttr: u32 = 1952801140;
pub const anon21051_gestaltTEHasGetHiliteRgn: u32 = 0;
pub const anon21051_gestaltTESupportsInlineInput: u32 = 1;
pub const anon21051_gestaltTESupportsTextObjects: u32 = 2;
pub const anon21051_gestaltTEHasWhiteBackground: u32 = 3;

pub const anon21131 = u32;
pub const anon21131_gestaltTeleMgrAttr: u32 = 1952803941;
pub const anon21131_gestaltTeleMgrPresent: u32 = 0;
pub const anon21131_gestaltTeleMgrPowerPCSupport: u32 = 1;
pub const anon21131_gestaltTeleMgrSoundStreams: u32 = 2;
pub const anon21131_gestaltTeleMgrAutoAnswer: u32 = 3;
pub const anon21131_gestaltTeleMgrIndHandset: u32 = 4;
pub const anon21131_gestaltTeleMgrSilenceDetect: u32 = 5;
pub const anon21131_gestaltTeleMgrNewTELNewSupport: u32 = 6;

pub const anon21241 = u32;
pub const anon21241_gestaltTermMgrAttr: u32 = 1952805485;
pub const anon21241_gestaltTermMgrPresent: u32 = 0;
pub const anon21241_gestaltTermMgrErrorString: u32 = 2;

pub const anon21301 = u32;
pub const anon21301_gestaltThreadMgrAttr: u32 = 1952998515;
pub const anon21301_gestaltThreadMgrPresent: u32 = 0;
pub const anon21301_gestaltSpecificMatchSupport: u32 = 1;
pub const anon21301_gestaltThreadsLibraryPresent: u32 = 2;

pub const anon21371 = u32;
pub const anon21371_gestaltTimeMgrVersion: u32 = 1953326962;
pub const anon21371_gestaltStandardTimeMgr: u32 = 1;
pub const anon21371_gestaltRevisedTimeMgr: u32 = 2;
pub const anon21371_gestaltExtendedTimeMgr: u32 = 3;
pub const anon21371_gestaltNativeTimeMgr: u32 = 4;

pub const anon21451 = u32;
pub const anon21451_gestaltTSMTEVersion: u32 = 1953322070;
pub const anon21451_gestaltTSMTE1: u32 = 256;
pub const anon21451_gestaltTSMTE15: u32 = 336;
pub const anon21451_gestaltTSMTE152: u32 = 338;

pub const anon21521 = u32;
pub const anon21521_gestaltTSMTEAttr: u32 = 1953322053;
pub const anon21521_gestaltTSMTEPresent: u32 = 0;
pub const anon21521_gestaltTSMTE: u32 = 0;

pub const anon21581 = u32;
pub const anon21581_gestaltAVLTreeAttr: u32 = 1953654117;
pub const anon21581_gestaltAVLTreePresentBit: u32 = 0;
pub const anon21581_gestaltAVLTreeSupportsHandleBasedTreeBit: u32 = 1;
pub const anon21581_gestaltAVLTreeSupportsTreeLockingBit: u32 = 2;

pub const anon21651 = u32;
pub const anon21651_gestaltALMAttr: u32 = 1953655152;
pub const anon21651_gestaltALMPresent: u32 = 0;
pub const anon21651_gestaltALMHasSFGroup: u32 = 1;
pub const anon21651_gestaltALMHasCFMSupport: u32 = 2;
pub const anon21651_gestaltALMHasRescanNotifiers: u32 = 3;

pub const anon21731 = u32;
pub const anon21731_gestaltALMHasSFLocation: u32 = 1;

pub const anon21771 = u32;
pub const anon21771_gestaltTSMgrVersion: u32 = 1953721718;
pub const anon21771_gestaltTSMgr15: u32 = 336;
pub const anon21771_gestaltTSMgr20: u32 = 512;
pub const anon21771_gestaltTSMgr22: u32 = 544;
pub const anon21771_gestaltTSMgr23: u32 = 560;

pub const anon21851 = u32;
pub const anon21851_gestaltTSMgrAttr: u32 = 1953721697;
pub const anon21851_gestaltTSMDisplayMgrAwareBit: u32 = 0;
pub const anon21851_gestaltTSMdoesTSMTEBit: u32 = 1;

pub const anon21911 = u32;
pub const anon21911_gestaltSpeechAttr: u32 = 1953788771;
pub const anon21911_gestaltSpeechMgrPresent: u32 = 0;
pub const anon21911_gestaltSpeechHasPPCGlue: u32 = 1;

pub const anon21971 = u32;
pub const anon21971_gestaltTVAttr: u32 = 1953898528;
pub const anon21971_gestaltHasTVTuner: u32 = 0;
pub const anon21971_gestaltHasSoundFader: u32 = 1;
pub const anon21971_gestaltHasHWClosedCaptioning: u32 = 2;
pub const anon21971_gestaltHasIRRemote: u32 = 3;
pub const anon21971_gestaltHasVidDecoderScaler: u32 = 4;
pub const anon21971_gestaltHasStereoDecoder: u32 = 5;
pub const anon21971_gestaltHasSerialFader: u32 = 6;
pub const anon21971_gestaltHasFMTuner: u32 = 7;
pub const anon21971_gestaltHasSystemIRFunction: u32 = 8;
pub const anon21971_gestaltIRDisabled: u32 = 9;
pub const anon21971_gestaltINeedIRPowerOffConfirm: u32 = 10;
pub const anon21971_gestaltHasZoomedVideo: u32 = 11;

pub const anon22141 = u32;
pub const anon22141_gestaltATSUVersion: u32 = 1969845110;
pub const anon22141_gestaltOriginalATSUVersion: u32 = 65536;
pub const anon22141_gestaltATSUUpdate1: u32 = 131072;
pub const anon22141_gestaltATSUUpdate2: u32 = 196608;
pub const anon22141_gestaltATSUUpdate3: u32 = 262144;
pub const anon22141_gestaltATSUUpdate4: u32 = 327680;
pub const anon22141_gestaltATSUUpdate5: u32 = 393216;
pub const anon22141_gestaltATSUUpdate6: u32 = 458752;
pub const anon22141_gestaltATSUUpdate7: u32 = 524288;

pub const anon22551 = u32;
pub const anon22551_gestaltUSBAttr: u32 = 1970496032;
pub const anon22551_gestaltUSBPresent: u32 = 0;
pub const anon22551_gestaltUSBHasIsoch: u32 = 1;

pub const anon22611 = u32;
pub const anon22611_gestaltUSBVersion: u32 = 1970496118;

pub const anon22651 = u32;
pub const anon22651_gestaltVersion: u32 = 1986359923;
pub const anon22651_gestaltValueImplementedVers: u32 = 5;

pub const anon22701 = u32;
pub const anon22701_gestaltVIA1Addr: u32 = 1986617649;

pub const anon22741 = u32;
pub const anon22741_gestaltVIA2Addr: u32 = 1986617650;

pub const anon22781 = u32;
pub const anon22781_gestaltVMAttr: u32 = 1986863136;
pub const anon22781_gestaltVMPresent: u32 = 0;
pub const anon22781_gestaltVMHasLockMemoryForOutput: u32 = 1;
pub const anon22781_gestaltVMFilemappingOn: u32 = 3;
pub const anon22781_gestaltVMHasPagingControl: u32 = 4;

pub const anon22861 = u32;
pub const anon22861_gestaltVMInfoType: u32 = 1986881902;
pub const anon22861_gestaltVMInfoSizeStorageType: u32 = 0;
pub const anon22861_gestaltVMInfoSizeType: u32 = 1;
pub const anon22861_gestaltVMInfoSimpleType: u32 = 2;
pub const anon22861_gestaltVMInfoNoneType: u32 = 3;

pub const anon22951 = u32;
pub const anon22951_gestaltVMBackingStoreFileRefNum: u32 = 1986880115;

pub const anon23011 = u32;
pub const anon23011_gestaltALMVers: u32 = 2002873451;

pub const anon23051 = u32;
pub const anon23051_gestaltWindowMgrAttr: u32 = 2003398244;
pub const anon23051_gestaltWindowMgrPresent: u32 = 1;
pub const anon23051_gestaltWindowMgrPresentBit: u32 = 0;
pub const anon23051_gestaltExtendedWindowAttributes: u32 = 1;
pub const anon23051_gestaltExtendedWindowAttributesBit: u32 = 1;
pub const anon23051_gestaltHasFloatingWindows: u32 = 2;
pub const anon23051_gestaltHasFloatingWindowsBit: u32 = 2;
pub const anon23051_gestaltHasWindowBuffering: u32 = 3;
pub const anon23051_gestaltHasWindowBufferingBit: u32 = 3;
pub const anon23051_gestaltWindowLiveResizeBit: u32 = 4;
pub const anon23051_gestaltWindowMinimizeToDockBit: u32 = 5;
pub const anon23051_gestaltHasWindowShadowsBit: u32 = 6;
pub const anon23051_gestaltSheetsAreWindowModalBit: u32 = 7;
pub const anon23051_gestaltFrontWindowMayBeHiddenBit: u32 = 8;
pub const anon23051_gestaltWindowMgrPresentMask: u32 = 1;
pub const anon23051_gestaltExtendedWindowAttributesMask: u32 = 2;
pub const anon23051_gestaltHasFloatingWindowsMask: u32 = 4;
pub const anon23051_gestaltHasWindowBufferingMask: u32 = 8;
pub const anon23051_gestaltWindowLiveResizeMask: u32 = 16;
pub const anon23051_gestaltWindowMinimizeToDockMask: u32 = 32;
pub const anon23051_gestaltHasWindowShadowsMask: u32 = 64;
pub const anon23051_gestaltSheetsAreWindowModalMask: u32 = 128;
pub const anon23051_gestaltFrontWindowMayBeHiddenMask: u32 = 256;

pub const anon23341 = u32;
pub const anon23341_gestaltHasSingleWindowModeBit: u32 = 8;
pub const anon23341_gestaltHasSingleWindowModeMask: u32 = 256;

pub const anon23441 = u32;
pub const anon23441_gestaltX86Features: u32 = 2016949862;
pub const anon23441_gestaltX86HasFPU: u32 = 0;
pub const anon23441_gestaltX86HasVME: u32 = 1;
pub const anon23441_gestaltX86HasDE: u32 = 2;
pub const anon23441_gestaltX86HasPSE: u32 = 3;
pub const anon23441_gestaltX86HasTSC: u32 = 4;
pub const anon23441_gestaltX86HasMSR: u32 = 5;
pub const anon23441_gestaltX86HasPAE: u32 = 6;
pub const anon23441_gestaltX86HasMCE: u32 = 7;
pub const anon23441_gestaltX86HasCX8: u32 = 8;
pub const anon23441_gestaltX86HasAPIC: u32 = 9;
pub const anon23441_gestaltX86HasSEP: u32 = 11;
pub const anon23441_gestaltX86HasMTRR: u32 = 12;
pub const anon23441_gestaltX86HasPGE: u32 = 13;
pub const anon23441_gestaltX86HasMCA: u32 = 14;
pub const anon23441_gestaltX86HasCMOV: u32 = 15;
pub const anon23441_gestaltX86HasPAT: u32 = 16;
pub const anon23441_gestaltX86HasPSE36: u32 = 17;
pub const anon23441_gestaltX86HasPSN: u32 = 18;
pub const anon23441_gestaltX86HasCLFSH: u32 = 19;
pub const anon23441_gestaltX86Serviced20: u32 = 20;
pub const anon23441_gestaltX86HasDS: u32 = 21;
pub const anon23441_gestaltX86ResACPI: u32 = 22;
pub const anon23441_gestaltX86HasMMX: u32 = 23;
pub const anon23441_gestaltX86HasFXSR: u32 = 24;
pub const anon23441_gestaltX86HasSSE: u32 = 25;
pub const anon23441_gestaltX86HasSSE2: u32 = 26;
pub const anon23441_gestaltX86HasSS: u32 = 27;
pub const anon23441_gestaltX86HasHTT: u32 = 28;
pub const anon23441_gestaltX86HasTM: u32 = 29;

pub const anon23961 = u32;
pub const anon23961_gestaltTranslationAttr: u32 = 2020368756;
pub const anon23961_gestaltTranslationMgrExists: u32 = 0;
pub const anon23961_gestaltTranslationMgrHintOrder: u32 = 1;
pub const anon23961_gestaltTranslationPPCAvail: u32 = 2;
pub const anon23961_gestaltTranslationGetPathAPIAvail: u32 = 3;

pub const anon24041 = u32;
pub const anon24041_gestaltExtToolboxTable: u32 = 2020897908;

pub const anon24081 = i32;
pub const anon24081_gestaltUSBPrinterSharingVersion: i32 = 2053204768;
pub const anon24081_gestaltUSBPrinterSharingVersionMask: i32 = 65535;
pub const anon24081_gestaltUSBPrinterSharingAttr: i32 = 2053204768;
pub const anon24081_gestaltUSBPrinterSharingAttrMask: i32 = -65536;
pub const anon24081_gestaltUSBPrinterSharingAttrRunning: i32 = -2147483648;
pub const anon24081_gestaltUSBPrinterSharingAttrBooted: i32 = 1073741824;

pub const anon24181 = u32;
pub const anon24181_gestaltWorldScriptIIVersion: u32 = 1685026146;
pub const anon24181_gestaltWorldScriptIIAttr: u32 = 2004050292;
pub const anon24181_gestaltWSIICanPrintWithoutPrGeneralBit: u32 = 0;

pub const anon601 = u32;
pub const anon601_defaultPhysicalEntryCount: u32 = 8;
pub const anon601_cmpThreadSafe: u32 = 268435456;
pub const anon601_cmpIsMissing: u32 = 536870912;
pub const anon601_cmpWantsRegisterMessage: u32 = -2147483648;
pub const anon601_cInsertionLoc: u32 = 1768846188;
pub const anon601_cInsertionPoint: u32 = 1667853939;
pub const anon601_cIntlText: u32 = 1769240692;
pub const anon601_cIntlWritingCode: u32 = 1768846444;
pub const anon601_cItem: u32 = 1667855469;
pub const anon601_cLine: u32 = 1668049262;
pub const anon601_cLongDateTime: u32 = 1818522656;
pub const anon601_cLongFixed: u32 = 1818654820;
pub const anon601_cLongFixedPoint: u32 = 1818652788;
pub const anon601_cLongFixedRectangle: u32 = 1818653283;
pub const anon601_cLongInteger: u32 = 1819242087;
pub const anon601_cLongPoint: u32 = 1819307636;
pub const anon601_cLongRectangle: u32 = 1819435892;
pub const anon601_cMachineLoc: u32 = 1833725795;
pub const anon601_cMenu: u32 = 1668116085;
pub const anon601_cMenuItem: u32 = 1668113774;
pub const anon601_cObject: u32 = 1668244074;
pub const anon601_cObjectSpecifier: u32 = 1868720672;
pub const anon601_cOpenableObject: u32 = 1668247394;
pub const anon601_cOval: u32 = 1668249196;

pub const anon641 = u32;
pub const anon641_PageInMemory: u32 = 0;
pub const anon641_PageOnDisk: u32 = 1;
pub const anon641_NotPaged: u32 = 2;
pub const anon641_CooperativeThread: u32 = 1;
pub const anon641_PreemptiveThread: u32 = 2;
pub const anon641_aeBuildSyntaxNoErr: u32 = 0;
pub const anon641_aeBuildSyntaxBadToken: u32 = 1;
pub const anon641_aeBuildSyntaxBadEOF: u32 = 2;
pub const anon641_aeBuildSyntaxNoEOF: u32 = 3;
pub const anon641_aeBuildSyntaxBadNegative: u32 = 4;
pub const anon641_aeBuildSyntaxMissingQuote: u32 = 5;
pub const anon641_aeBuildSyntaxBadHex: u32 = 6;
pub const anon641_aeBuildSyntaxOddHex: u32 = 7;
pub const anon641_aeBuildSyntaxNoCloseHex: u32 = 8;
pub const anon641_aeBuildSyntaxUncoercedHex: u32 = 9;
pub const anon641_aeBuildSyntaxNoCloseString: u32 = 10;
pub const anon641_aeBuildSyntaxBadDesc: u32 = 11;
pub const anon641_aeBuildSyntaxBadData: u32 = 12;
pub const anon641_aeBuildSyntaxNoCloseParen: u32 = 13;
pub const anon641_aeBuildSyntaxNoCloseBracket: u32 = 14;
pub const anon641_aeBuildSyntaxNoCloseBrace: u32 = 15;
pub const anon641_aeBuildSyntaxNoKey: u32 = 16;
pub const anon641_aeBuildSyntaxNoColon: u32 = 17;
pub const anon641_aeBuildSyntaxCoercedList: u32 = 18;
pub const anon641_aeBuildSyntaxUncoercedDoubleAt: u32 = 19;

pub const anon821 = u32;
pub const anon821_HandleIsResourceBit: u32 = 5;
pub const anon821_HandlePurgeableBit: u32 = 6;
pub const anon821_HandleLockedBit: u32 = 7;
pub const anon821_CSSM_WORDID_KEYCHAIN_PROMPT: u32 = 65536;
pub const anon821_CSSM_WORDID_KEYCHAIN_LOCK: u32 = 65537;
pub const anon821_CSSM_WORDID_KEYCHAIN_CHANGE_LOCK: u32 = 65538;
pub const anon821_CSSM_WORDID_PROCESS: u32 = 65539;
pub const anon821_CSSM_WORDID__RESERVED_1: u32 = 65540;
pub const anon821_CSSM_WORDID_SYMMETRIC_KEY: u32 = 65541;
pub const anon821_CSSM_WORDID_SYSTEM: u32 = 65542;
pub const anon821_CSSM_WORDID_KEY: u32 = 65543;
pub const anon821_CSSM_WORDID_PIN: u32 = 65544;
pub const anon821_CSSM_WORDID_PREAUTH: u32 = 65545;
pub const anon821_CSSM_WORDID_PREAUTH_SOURCE: u32 = 65546;
pub const anon821_CSSM_WORDID_ASYMMETRIC_KEY: u32 = 65547;
pub const anon821_CSSM_WORDID_PARTITION: u32 = 65548;
pub const anon821_CSSM_WORDID_KEYBAG_KEY: u32 = 65549;
pub const anon821_CSSM_WORDID__FIRST_UNUSED: u32 = 65550;
pub const anon821_CSSM_HINT_NONE: u32 = 0;
pub const anon821_CSSM_HINT_ADDRESS_APP: u32 = 1;
pub const anon821_CSSM_HINT_ADDRESS_SP: u32 = 2;

pub const anon891 = u32;
pub const anon891_HandleIsResourceMask: u32 = 32;
pub const anon891_HandlePurgeableMask: u32 = 64;
pub const anon891_HandleLockedMask: u32 = 128;
pub const anon891_CSSM_MODULE_STRING_SIZE: u32 = 64;

pub extern "CoreServices" fn MemError() callconv(.C) objc.OSErr;

pub extern "CoreServices" fn LMGetMemErr() callconv(.C) objc.SInt16;

pub extern "CoreServices" fn LMSetMemErr(value: objc.SInt16) callconv(.C) void;

pub extern "CoreServices" fn NewHandle(byteCount: objc.Size) callconv(.C) objc.Handle;

pub extern "CoreServices" fn NewHandleClear(byteCount: objc.Size) callconv(.C) objc.Handle;

pub extern "CoreServices" fn RecoverHandle(p: objc.Ptr) callconv(.C) objc.Handle;

pub extern "CoreServices" fn NewPtr(byteCount: objc.Size) callconv(.C) objc.Ptr;

pub extern "CoreServices" fn NewPtrClear(byteCount: objc.Size) callconv(.C) objc.Ptr;

pub extern "CoreServices" fn NewEmptyHandle() callconv(.C) objc.Handle;

pub extern "CoreServices" fn HLock(h: objc.Handle) callconv(.C) void;

pub extern "CoreServices" fn HLockHi(h: objc.Handle) callconv(.C) void;

pub extern "CoreServices" fn HUnlock(h: objc.Handle) callconv(.C) void;

pub extern "CoreServices" fn TempNewHandle(logicalSize: objc.Size, resultCode: ?*objc.OSErr) callconv(.C) objc.Handle;

pub extern "CoreServices" fn DisposePtr(p: objc.Ptr) callconv(.C) void;

pub extern "CoreServices" fn GetPtrSize(p: objc.Ptr) callconv(.C) objc.Size;

pub extern "CoreServices" fn SetPtrSize(p: objc.Ptr, newSize: objc.Size) callconv(.C) void;

pub extern "CoreServices" fn DisposeHandle(h: objc.Handle) callconv(.C) void;

pub extern "CoreServices" fn SetHandleSize(h: objc.Handle, newSize: objc.Size) callconv(.C) void;

pub extern "CoreServices" fn GetHandleSize(h: objc.Handle) callconv(.C) objc.Size;

pub extern "CoreServices" fn ReallocateHandle(h: objc.Handle, byteCount: objc.Size) callconv(.C) void;

pub extern "CoreServices" fn EmptyHandle(h: objc.Handle) callconv(.C) void;

pub extern "CoreServices" fn HSetRBit(h: objc.Handle) callconv(.C) void;

pub extern "CoreServices" fn HClrRBit(h: objc.Handle) callconv(.C) void;

pub extern "CoreServices" fn HGetState(h: objc.Handle) callconv(.C) objc.SInt8;

pub extern "CoreServices" fn HSetState(h: objc.Handle, flags: objc.SInt8) callconv(.C) void;

pub extern "CoreServices" fn HandToHand(theHndl: ?*objc.Handle) callconv(.C) objc.OSErr;

pub extern "CoreServices" fn PtrToXHand(srcPtr: ?*anyopaque, dstHndl: objc.Handle, size: i64) callconv(.C) objc.OSErr;

pub extern "CoreServices" fn PtrToHand(srcPtr: ?*anyopaque, dstHndl: ?*objc.Handle, size: i64) callconv(.C) objc.OSErr;

pub extern "CoreServices" fn HandAndHand(hand1: objc.Handle, hand2: objc.Handle) callconv(.C) objc.OSErr;

pub extern "CoreServices" fn PtrAndHand(ptr1: ?*anyopaque, hand2: objc.Handle, size: i64) callconv(.C) objc.OSErr;

pub extern "CoreServices" fn IsHeapValid() callconv(.C) objc.Boolean;

pub extern "CoreServices" fn IsHandleValid(h: objc.Handle) callconv(.C) objc.Boolean;

pub extern "CoreServices" fn IsPointerValid(p: objc.Ptr) callconv(.C) objc.Boolean;

pub extern "CoreServices" fn S64Absolute(value: objc.SInt64) callconv(.C) objc.SInt64;

pub extern "CoreServices" fn U64Compare(left: objc.UInt64, right: objc.UInt64) callconv(.C) objc.SInt32;

pub extern "CoreServices" fn CSBackupSetItemExcluded(item: core_foundation.URLRef, exclude: objc.Boolean, excludeByPath: objc.Boolean) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn CSBackupIsItemExcluded(item: core_foundation.URLRef, excludeByPath: ?*objc.Boolean) callconv(.C) objc.Boolean;

pub const anon451 = u32;
pub const anon451_CSDiskSpaceRecoveryOptionNoUI: u32 = 1;
pub const anon451_NoLooping: u32 = 0;
pub const anon451_ForwardLooping: u32 = 1;
pub const anon451_ForwardBackwardLooping: u32 = 2;

pub const CSDiskSpaceRecoveryOptions = i32;

pub const CSDiskSpaceRecoveryCallback = *const fn (objc.Boolean, objc.UInt64, core_foundation.ErrorRef) callconv(.C) void;

pub extern "CoreServices" fn CSDiskSpaceStartRecovery(
    volumeURL: core_foundation.URLRef,
    bytesNeeded: objc.UInt64,
    options: CSDiskSpaceRecoveryOptions,
    outOperationUUID: ?*core_foundation.UUIDRef,
    callbackQueue: objc.dispatch_queue_t,
    callback: CSDiskSpaceRecoveryCallback,
) callconv(.C) void;

pub extern "CoreServices" fn CSDiskSpaceCancelRecovery(operationUUID: core_foundation.UUIDRef) callconv(.C) void;

pub extern "CoreServices" fn CSDiskSpaceGetRecoveryEstimate(volumeURL: core_foundation.URLRef) callconv(.C) objc.UInt64;

pub const ToggleResults = objc.SInt16;

pub const anon1041 = u32;
pub const anon1041_eraMask: u32 = 1;
pub const anon1041_yearMask: u32 = 2;
pub const anon1041_monthMask: u32 = 4;
pub const anon1041_dayMask: u32 = 8;
pub const anon1041_hourMask: u32 = 16;
pub const anon1041_minuteMask: u32 = 32;
pub const anon1041_secondMask: u32 = 64;
pub const anon1041_dayOfWeekMask: u32 = 128;
pub const anon1041_dayOfYearMask: u32 = 256;
pub const anon1041_weekOfYearMask: u32 = 512;
pub const anon1041_pmMask: u32 = 1024;
pub const anon1041_dateStdMask: u32 = 127;
pub const anon1041_UnlockStateKCStatus: u32 = 1;
pub const anon1041_RdPermKCStatus: u32 = 2;
pub const anon1041_WrPermKCStatus: u32 = 4;

pub const LongDateField = objc.SInt8;

pub const anon1201 = u32;
pub const anon1201_eraField: u32 = 0;
pub const anon1201_yearField: u32 = 1;
pub const anon1201_monthField: u32 = 2;
pub const anon1201_dayField: u32 = 3;
pub const anon1201_hourField: u32 = 4;
pub const anon1201_minuteField: u32 = 5;
pub const anon1201_secondField: u32 = 6;
pub const anon1201_dayOfWeekField: u32 = 7;
pub const anon1201_dayOfYearField: u32 = 8;
pub const anon1201_weekOfYearField: u32 = 9;
pub const anon1201_pmField: u32 = 10;
pub const anon1201_res1Field: u32 = 11;
pub const anon1201_res2Field: u32 = 12;
pub const anon1201_res3Field: u32 = 13;
pub const anon1201_HardLinkFileType: u32 = 1751936619;
pub const anon1201_HFSPlusCreator: u32 = 1751544619;
pub const anon1201_CSSM_PRIVILEGE_SCOPE_NONE: u32 = 0;
pub const anon1201_CSSM_PRIVILEGE_SCOPE_PROCESS: u32 = 1;
pub const anon1201_CSSM_PRIVILEGE_SCOPE_THREAD: u32 = 2;
pub const anon1201_ClassKCItemAttr: u32 = 1668047219;
pub const anon1201_CreationDateKCItemAttr: u32 = 1667522932;
pub const anon1201_ModDateKCItemAttr: u32 = 1835295092;
pub const anon1201_DescriptionKCItemAttr: u32 = 1684370275;
pub const anon1201_CommentKCItemAttr: u32 = 1768123764;
pub const anon1201_CreatorKCItemAttr: u32 = 1668445298;
pub const anon1201_TypeKCItemAttr: u32 = 1954115685;
pub const anon1201_ScriptCodeKCItemAttr: u32 = 1935897200;
pub const anon1201_LabelKCItemAttr: u32 = 1818321516;
pub const anon1201_InvisibleKCItemAttr: u32 = 1768846953;
pub const anon1201_NegativeKCItemAttr: u32 = 1852139361;
pub const anon1201_CustomIconKCItemAttr: u32 = 1668641641;
pub const anon1201_AccountKCItemAttr: u32 = 1633903476;
pub const anon1201_ServiceKCItemAttr: u32 = 1937138533;
pub const anon1201_GenericKCItemAttr: u32 = 1734700641;
pub const anon1201_SecurityDomainKCItemAttr: u32 = 1935961454;
pub const anon1201_ServerKCItemAttr: u32 = 1936881266;
pub const anon1201_AuthTypeKCItemAttr: u32 = 1635023216;
pub const anon1201_PortKCItemAttr: u32 = 1886351988;
pub const anon1201_PathKCItemAttr: u32 = 1885434984;
pub const anon1201_VolumeKCItemAttr: u32 = 1986817381;
pub const anon1201_AddressKCItemAttr: u32 = 1633969266;
pub const anon1201_SignatureKCItemAttr: u32 = 1936943463;
pub const anon1201_ProtocolKCItemAttr: u32 = 1886675820;
pub const anon1201_SubjectKCItemAttr: u32 = 1937072746;
pub const anon1201_CommonNameKCItemAttr: u32 = 1668161568;
pub const anon1201_IssuerKCItemAttr: u32 = 1769173877;
pub const anon1201_SerialNumberKCItemAttr: u32 = 1936614002;
pub const anon1201_EMailKCItemAttr: u32 = 1835100524;
pub const anon1201_PublicKeyHashKCItemAttr: u32 = 1752198009;
pub const anon1201_IssuerURLKCItemAttr: u32 = 1769304684;
pub const anon1201_EncryptKCItemAttr: u32 = 1701733234;
pub const anon1201_DecryptKCItemAttr: u32 = 1684366194;
pub const anon1201_SignKCItemAttr: u32 = 1936287598;
pub const anon1201_VerifyKCItemAttr: u32 = 1986359913;
pub const anon1201_WrapKCItemAttr: u32 = 2003984752;
pub const anon1201_UnwrapKCItemAttr: u32 = 1970173810;
pub const anon1201_StartDateKCItemAttr: u32 = 1935958388;
pub const anon1201_EndDateKCItemAttr: u32 = 1701077364;

pub const DateForm = objc.SInt8;

pub const StringToDateStatus = i16;

pub const String2DateStatus = StringToDateStatus;

pub const DateCacheRecord = extern struct {
    hidden: [256]i16,
};

pub const DateCachePtr = DateCacheRecord;

pub const DateTimeRec = extern struct {
    year: i16,
    month: i16,
    day: i16,
    hour: i16,
    minute: i16,
    second: i16,
    dayOfWeek: i16,
};

pub const LongDateTime = objc.SInt64;

pub const LongDateCvt = extern union {
    pub const anon1913 = extern struct {
        lLow: objc.UInt32,
        lHigh: objc.UInt32,
    };

    c: objc.SInt64,
    hl: LongDateCvt.anon1913,
};

pub const LongDateRec = extern union {
    pub const anon2003 = extern struct {
        era: i16,
        year: i16,
        month: i16,
        day: i16,
        hour: i16,
        minute: i16,
        second: i16,
        dayOfWeek: i16,
        dayOfYear: i16,
        weekOfYear: i16,
        pm: i16,
        res1: i16,
        res2: i16,
        res3: i16,
    };

    pub const anon2173 = extern struct {
        eraAlt: i16,
        oldDate: DateTimeRec,
    };

    ld: LongDateRec.anon2003,
    list: [14]i16,
    od: LongDateRec.anon2173,
};

pub const DateDelta = objc.SInt8;

pub const TogglePB = extern struct {
    togFlags: i64,
    amChars: objc.ResType,
    pmChars: objc.ResType,
    reserved: [4]i64,
};

pub extern "CoreServices" fn UCConvertUTCDateTimeToCFAbsoluteTime(iUTCDate: ?*UTCDateTime, oCFTime: ?*core_foundation.AbsoluteTime) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn UCConvertSecondsToCFAbsoluteTime(iSeconds: objc.UInt32, oCFTime: ?*core_foundation.AbsoluteTime) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn UCConvertLongDateTimeToCFAbsoluteTime(iLongTime: LongDateTime, oCFTime: ?*core_foundation.AbsoluteTime) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn UCConvertCFAbsoluteTimeToUTCDateTime(iCFTime: core_foundation.AbsoluteTime, oUTCDate: ?*UTCDateTime) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn UCConvertCFAbsoluteTimeToSeconds(iCFTime: core_foundation.AbsoluteTime, oSeconds: ?*objc.UInt32) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn UCConvertCFAbsoluteTimeToLongDateTime(iCFTime: core_foundation.AbsoluteTime, oLongDate: ?*LongDateTime) callconv(.C) objc.OSStatus;

pub const anon551 = u32;
pub const anon551_dummyType: u32 = 0;
pub const anon551_vType: u32 = 1;
pub const anon551_ioQType: u32 = 2;
pub const anon551_drvQType: u32 = 3;
pub const anon551_evType: u32 = 4;
pub const anon551_fsQType: u32 = 5;
pub const anon551_sIQType: u32 = 6;
pub const anon551_dtQType: u32 = 7;
pub const anon551_nmType: u32 = 8;
pub const anon551_resSysHeap: u32 = 64;
pub const anon551_resPurgeable: u32 = 32;
pub const anon551_resLocked: u32 = 16;
pub const anon551_resProtected: u32 = 8;
pub const anon551_resPreload: u32 = 4;
pub const anon551_resChanged: u32 = 2;
pub const anon551_CSSM_BASE_ERROR: u32 = -2147418112;
pub const anon551_CSSM_ERRORCODE_MODULE_EXTENT: u32 = 2048;
pub const anon551_CSSM_ERRORCODE_CUSTOM_OFFSET: u32 = 1024;
pub const anon551_CSSM_ERRORCODE_COMMON_EXTENT: u32 = 256;
pub const anon551_CSSM_CSSM_BASE_ERROR: u32 = -2147418112;
pub const anon551_CSSM_CSSM_PRIVATE_ERROR: u32 = -2147417088;
pub const anon551_CSSM_CSP_BASE_ERROR: u32 = -2147416064;
pub const anon551_CSSM_CSP_PRIVATE_ERROR: u32 = -2147415040;
pub const anon551_CSSM_DL_BASE_ERROR: u32 = -2147414016;
pub const anon551_CSSM_DL_PRIVATE_ERROR: u32 = -2147412992;
pub const anon551_CSSM_CL_BASE_ERROR: u32 = -2147411968;
pub const anon551_CSSM_CL_PRIVATE_ERROR: u32 = -2147410944;
pub const anon551_CSSM_TP_BASE_ERROR: u32 = -2147409920;
pub const anon551_CSSM_TP_PRIVATE_ERROR: u32 = -2147408896;
pub const anon551_CSSM_KR_BASE_ERROR: u32 = -2147407872;
pub const anon551_CSSM_KR_PRIVATE_ERROR: u32 = -2147406848;
pub const anon551_CSSM_AC_BASE_ERROR: u32 = -2147405824;
pub const anon551_CSSM_AC_PRIVATE_ERROR: u32 = -2147404800;

pub const QTypes = objc.SignedByte;

pub const QElem = extern struct {
    qLink: ?*QElem,
    qType: i16,
    qData: [1]i16,
};

pub const QElemPtr = QElem;

pub const QHdr = extern struct {
    qFlags: i16,
    qHead: QElemPtr,
    qTail: QElemPtr,
};

pub const QHdrPtr = QHdr;

pub const MachineLocation = extern struct {
    pub const anon1145 = extern union {
        pub const anon1199 = extern struct {
            pad: [3]objc.SInt8,
            Delta: objc.SInt8,
        };

        gmtDelta: i64,
        dls: MachineLocation.anon1145.anon1199,
    };

    latitude: objc.Fract,
    longitude: objc.Fract,
    u: MachineLocation.anon1145,
};

pub extern "CoreServices" fn IsMetric() callconv(.C) objc.Boolean;

pub extern "CoreServices" fn Delay(numTicks: u64, finalTicks: ?*u64) callconv(.C) void;

pub extern "CoreServices" fn Enqueue(qElement: QElemPtr, qHeader: QHdrPtr) callconv(.C) void;

pub extern "CoreServices" fn Dequeue(qElement: QElemPtr, qHeader: QHdrPtr) callconv(.C) objc.OSErr;

pub extern "CoreServices" fn ReadLocation(loc: ?*MachineLocation) callconv(.C) void;

pub extern "CoreServices" fn TickCount() callconv(.C) objc.UInt32;

pub extern "CoreServices" fn CSCopyUserName(useShortName: objc.Boolean) callconv(.C) core_foundation.StringRef;

pub extern "CoreServices" fn CSCopyMachineName() callconv(.C) core_foundation.StringRef;

pub const anon4481 = u32;
pub const anon4481_useFree: u32 = 0;
pub const anon4481_useATalk: u32 = 1;
pub const anon4481_useAsync: u32 = 2;
pub const anon4481_useExtClk: u32 = 3;
pub const anon4481_useMIDI: u32 = 4;

pub const anon4561 = u32;
pub const anon4561_false32b: u32 = 0;
pub const anon4561_true32b: u32 = 1;

pub const SysPPtr = ?*anyopaque;

pub const DeferredTaskProcPtr = ?*const fn (i64) callconv(.C) void;

pub const DeferredTaskUPP = DeferredTaskProcPtr;

pub extern "CoreServices" fn NewDeferredTaskUPP(userRoutine: DeferredTaskProcPtr) callconv(.C) DeferredTaskUPP;

pub extern "CoreServices" fn DisposeDeferredTaskUPP(userUPP: DeferredTaskUPP) callconv(.C) void;

pub extern "CoreServices" fn InvokeDeferredTaskUPP(dtParam: i64, userUPP: DeferredTaskUPP) callconv(.C) void;

pub const DeferredTask = extern struct {
    qLink: QElemPtr,
    qType: i16,
    dtFlags: i16,
    dtAddr: DeferredTaskUPP,
    dtParam: i64,
    dtReserved: i64,
};

pub const DeferredTaskPtr = DeferredTask;

pub const anon991 = u32;
pub const anon991_fsCurPerm: u32 = 0;
pub const anon991_fsRdPerm: u32 = 1;
pub const anon991_fsWrPerm: u32 = 2;
pub const anon991_fsRdWrPerm: u32 = 3;
pub const anon991_fsRdWrShPerm: u32 = 4;
pub const anon991_SecCSUseAllArchitectures: u32 = 1;
pub const anon991_CSIdentityQueryStringEquals: u32 = 1;
pub const anon991_CSIdentityQueryStringBeginsWith: u32 = 2;

pub const anon1181 = u32;
pub const anon1181_fsRdAccessPerm: u32 = 1;
pub const anon1181_fsWrAccessPerm: u32 = 2;
pub const anon1181_fsRdDenyPerm: u32 = 16;
pub const anon1181_fsWrDenyPerm: u32 = 32;

pub const anon1251 = u32;
pub const anon1251_fsRtParID: u32 = 1;
pub const anon1251_fsRtDirID: u32 = 2;
pub const anon1251_DurationImmediate: u32 = 0;
pub const anon1251_DurationForever: u32 = 2147483647;
pub const anon1251_DurationMillisecond: u32 = 1;
pub const anon1251_DurationMicrosecond: u32 = -1;

pub const anon1301 = u32;
pub const anon1301_fsAtMark: u32 = 0;
pub const anon1301_fsFromStart: u32 = 1;
pub const anon1301_fsFromLEOF: u32 = 2;
pub const anon1301_fsFromMark: u32 = 3;

pub const anon1371 = u32;
pub const anon1371_FSAllowConcurrentAsyncIOBit: u32 = 3;
pub const anon1371_FSAllowConcurrentAsyncIOMask: u32 = 8;
pub const anon1371_FSPleaseCacheBit: u32 = 4;
pub const anon1371_FSPleaseCacheMask: u32 = 16;
pub const anon1371_FSNoCacheBit: u32 = 5;
pub const anon1371_FSNoCacheMask: u32 = 32;
pub const anon1371_FSRdVerifyBit: u32 = 6;
pub const anon1371_FSRdVerifyMask: u32 = 64;
pub const anon1371_FSForceReadBit: u32 = 6;
pub const anon1371_FSForceReadMask: u32 = 64;
pub const anon1371_FSNewLineBit: u32 = 7;
pub const anon1371_FSNewLineMask: u32 = 128;
pub const anon1371_FSNewLineCharMask: u32 = 65280;
pub const anon1371_CSSM_ERRCODE_INVALID_CONTEXT_HANDLE: u32 = 64;
pub const anon1371_CSSM_ERRCODE_INCOMPATIBLE_VERSION: u32 = 65;
pub const anon1371_CSSM_ERRCODE_INVALID_CERTGROUP_POINTER: u32 = 66;
pub const anon1371_CSSM_ERRCODE_INVALID_CERT_POINTER: u32 = 67;
pub const anon1371_CSSM_ERRCODE_INVALID_CRL_POINTER: u32 = 68;
pub const anon1371_CSSM_ERRCODE_INVALID_FIELD_POINTER: u32 = 69;
pub const anon1371_CSSM_ERRCODE_INVALID_DATA: u32 = 70;
pub const anon1371_CSSM_ERRCODE_CRL_ALREADY_SIGNED: u32 = 71;
pub const anon1371_CSSM_ERRCODE_INVALID_NUMBER_OF_FIELDS: u32 = 72;
pub const anon1371_CSSM_ERRCODE_VERIFICATION_FAILURE: u32 = 73;
pub const anon1371_CSSM_ERRCODE_INVALID_DB_HANDLE: u32 = 74;
pub const anon1371_CSSM_ERRCODE_PRIVILEGE_NOT_GRANTED: u32 = 75;
pub const anon1371_CSSM_ERRCODE_INVALID_DB_LIST: u32 = 76;
pub const anon1371_CSSM_ERRCODE_INVALID_DB_LIST_POINTER: u32 = 77;
pub const anon1371_CSSM_ERRCODE_UNKNOWN_FORMAT: u32 = 78;
pub const anon1371_CSSM_ERRCODE_UNKNOWN_TAG: u32 = 79;
pub const anon1371_CSSM_ERRCODE_INVALID_CSP_HANDLE: u32 = 80;
pub const anon1371_CSSM_ERRCODE_INVALID_DL_HANDLE: u32 = 81;
pub const anon1371_CSSM_ERRCODE_INVALID_CL_HANDLE: u32 = 82;
pub const anon1371_CSSM_ERRCODE_INVALID_TP_HANDLE: u32 = 83;
pub const anon1371_CSSM_ERRCODE_INVALID_KR_HANDLE: u32 = 84;
pub const anon1371_CSSM_ERRCODE_INVALID_AC_HANDLE: u32 = 85;
pub const anon1371_CSSM_ERRCODE_INVALID_PASSTHROUGH_ID: u32 = 86;
pub const anon1371_CSSM_ERRCODE_INVALID_NETWORK_ADDR: u32 = 87;
pub const anon1371_CSSM_ERRCODE_INVALID_CRYPTO_DATA: u32 = 88;

pub const anon1551 = u32;
pub const anon1551_fsSBPartialName: u32 = 1;
pub const anon1551_fsSBFullName: u32 = 2;
pub const anon1551_fsSBFlAttrib: u32 = 4;
pub const anon1551_fsSBFlFndrInfo: u32 = 8;
pub const anon1551_fsSBFlLgLen: u32 = 32;
pub const anon1551_fsSBFlPyLen: u32 = 64;
pub const anon1551_fsSBFlRLgLen: u32 = 128;
pub const anon1551_fsSBFlRPyLen: u32 = 256;
pub const anon1551_fsSBFlCrDat: u32 = 512;
pub const anon1551_fsSBFlMdDat: u32 = 1024;
pub const anon1551_fsSBFlBkDat: u32 = 2048;
pub const anon1551_fsSBFlXFndrInfo: u32 = 4096;
pub const anon1551_fsSBFlParID: u32 = 8192;
pub const anon1551_fsSBNegate: u32 = 16384;
pub const anon1551_fsSBDrUsrWds: u32 = 8;
pub const anon1551_fsSBDrNmFls: u32 = 16;
pub const anon1551_fsSBDrCrDat: u32 = 512;
pub const anon1551_fsSBDrMdDat: u32 = 1024;
pub const anon1551_fsSBDrBkDat: u32 = 2048;
pub const anon1551_fsSBDrFndrInfo: u32 = 4096;
pub const anon1551_fsSBDrParID: u32 = 8192;
pub const anon1551_fsSBNodeID: u32 = 32768;
pub const anon1551_fsSBAttributeModDate: u32 = 65536;
pub const anon1551_fsSBAccessDate: u32 = 131072;
pub const anon1551_fsSBPermissions: u32 = 262144;
pub const anon1551_fsSBSkipPackageContents: u32 = 524288;
pub const anon1551_fsSBSkipHiddenItems: u32 = 1048576;
pub const anon1551_fsSBUserID: u32 = 2097152;
pub const anon1551_fsSBGroupID: u32 = 4194304;

pub const anon1881 = u32;
pub const anon1881_fsSBPartialNameBit: u32 = 0;
pub const anon1881_fsSBFullNameBit: u32 = 1;
pub const anon1881_fsSBFlAttribBit: u32 = 2;
pub const anon1881_fsSBFlFndrInfoBit: u32 = 3;
pub const anon1881_fsSBFlLgLenBit: u32 = 5;
pub const anon1881_fsSBFlPyLenBit: u32 = 6;
pub const anon1881_fsSBFlRLgLenBit: u32 = 7;
pub const anon1881_fsSBFlRPyLenBit: u32 = 8;
pub const anon1881_fsSBFlCrDatBit: u32 = 9;
pub const anon1881_fsSBFlMdDatBit: u32 = 10;
pub const anon1881_fsSBFlBkDatBit: u32 = 11;
pub const anon1881_fsSBFlXFndrInfoBit: u32 = 12;
pub const anon1881_fsSBFlParIDBit: u32 = 13;
pub const anon1881_fsSBNegateBit: u32 = 14;
pub const anon1881_fsSBDrUsrWdsBit: u32 = 3;
pub const anon1881_fsSBDrNmFlsBit: u32 = 4;
pub const anon1881_fsSBDrCrDatBit: u32 = 9;
pub const anon1881_fsSBDrMdDatBit: u32 = 10;
pub const anon1881_fsSBDrBkDatBit: u32 = 11;
pub const anon1881_fsSBDrFndrInfoBit: u32 = 12;
pub const anon1881_fsSBDrParIDBit: u32 = 13;
pub const anon1881_fsSBNodeIDBit: u32 = 15;
pub const anon1881_fsSBAttributeModDateBit: u32 = 16;
pub const anon1881_fsSBAccessDateBit: u32 = 17;
pub const anon1881_fsSBPermissionsBit: u32 = 18;
pub const anon1881_fsSBSkipPackageContentsBit: u32 = 19;
pub const anon1881_fsSBSkipHiddenItemsBit: u32 = 20;
pub const anon1881_fsSBUserIDBit: u32 = 21;
pub const anon1881_fsSBGroupIDBit: u32 = 22;

pub const anon2211 = u32;
pub const anon2211_bLimitFCBs: u32 = 31;
pub const anon2211_bLocalWList: u32 = 30;
pub const anon2211_bNoMiniFndr: u32 = 29;
pub const anon2211_bNoVNEdit: u32 = 28;
pub const anon2211_bNoLclSync: u32 = 27;
pub const anon2211_bTrshOffLine: u32 = 26;
pub const anon2211_bNoSwitchTo: u32 = 25;
pub const anon2211_bNoDeskItems: u32 = 20;
pub const anon2211_bNoBootBlks: u32 = 19;
pub const anon2211_bAccessCntl: u32 = 18;
pub const anon2211_bNoSysDir: u32 = 17;
pub const anon2211_bHasExtFSVol: u32 = 16;
pub const anon2211_bHasOpenDeny: u32 = 15;
pub const anon2211_bHasCopyFile: u32 = 14;
pub const anon2211_bHasMoveRename: u32 = 13;
pub const anon2211_bHasDesktopMgr: u32 = 12;
pub const anon2211_bHasShortName: u32 = 11;
pub const anon2211_bHasFolderLock: u32 = 10;
pub const anon2211_bHasPersonalAccessPrivileges: u32 = 9;
pub const anon2211_bHasUserGroupList: u32 = 8;
pub const anon2211_bHasCatSearch: u32 = 7;
pub const anon2211_bHasFileIDs: u32 = 6;
pub const anon2211_bHasBTreeMgr: u32 = 5;
pub const anon2211_bHasBlankAccessPrivileges: u32 = 4;
pub const anon2211_bSupportsAsyncRequests: u32 = 3;
pub const anon2211_bSupportsTrashVolumeCache: u32 = 2;
pub const anon2211_CSSM_ALGID_APPLE_YARROW: u32 = -2147483648;
pub const anon2211_CSSM_ALGID_AES: u32 = -2147483647;
pub const anon2211_CSSM_ALGID_FEE: u32 = -2147483646;
pub const anon2211_CSSM_ALGID_FEE_MD5: u32 = -2147483645;
pub const anon2211_CSSM_ALGID_FEE_SHA1: u32 = -2147483644;
pub const anon2211_CSSM_ALGID_FEED: u32 = -2147483643;
pub const anon2211_CSSM_ALGID_FEEDEXP: u32 = -2147483642;
pub const anon2211_CSSM_ALGID_ASC: u32 = -2147483641;
pub const anon2211_CSSM_ALGID_SHA1HMAC_LEGACY: u32 = -2147483640;
pub const anon2211_CSSM_ALGID_KEYCHAIN_KEY: u32 = -2147483639;
pub const anon2211_CSSM_ALGID_PKCS12_PBE_ENCR: u32 = -2147483638;
pub const anon2211_CSSM_ALGID_PKCS12_PBE_MAC: u32 = -2147483637;
pub const anon2211_CSSM_ALGID_SECURE_PASSPHRASE: u32 = -2147483636;
pub const anon2211_CSSM_ALGID_PBE_OPENSSL_MD5: u32 = -2147483635;
pub const anon2211_CSSM_ALGID_SHA256: u32 = -2147483634;
pub const anon2211_CSSM_ALGID_SHA384: u32 = -2147483633;
pub const anon2211_CSSM_ALGID_SHA512: u32 = -2147483632;
pub const anon2211_CSSM_ALGID_ENTROPY_DEFAULT: u32 = -2147483631;
pub const anon2211_CSSM_ALGID_SHA224: u32 = -2147483630;
pub const anon2211_CSSM_ALGID_SHA224WithRSA: u32 = -2147483629;
pub const anon2211_CSSM_ALGID_SHA256WithRSA: u32 = -2147483628;
pub const anon2211_CSSM_ALGID_SHA384WithRSA: u32 = -2147483627;
pub const anon2211_CSSM_ALGID_SHA512WithRSA: u32 = -2147483626;
pub const anon2211_CSSM_ALGID_OPENSSH1: u32 = -2147483625;
pub const anon2211_CSSM_ALGID_SHA224WithECDSA: u32 = -2147483624;
pub const anon2211_CSSM_ALGID_SHA256WithECDSA: u32 = -2147483623;
pub const anon2211_CSSM_ALGID_SHA384WithECDSA: u32 = -2147483622;
pub const anon2211_CSSM_ALGID_SHA512WithECDSA: u32 = -2147483621;
pub const anon2211_CSSM_ALGID_ECDSA_SPECIFIED: u32 = -2147483620;
pub const anon2211_CSSM_ALGID_ECDH_X963_KDF: u32 = -2147483619;
pub const anon2211_CSSM_ALGID__FIRST_UNUSED: u32 = -2147483618;

pub const anon2561 = u32;
pub const anon2561_bIsEjectable: u32 = 0;
pub const anon2561_bSupportsHFSPlusAPIs: u32 = 1;
pub const anon2561_bSupportsFSCatalogSearch: u32 = 2;
pub const anon2561_bSupportsFSExchangeObjects: u32 = 3;
pub const anon2561_bSupports2TBFiles: u32 = 4;
pub const anon2561_bSupportsLongNames: u32 = 5;
pub const anon2561_bSupportsMultiScriptNames: u32 = 6;
pub const anon2561_bSupportsNamedForks: u32 = 7;
pub const anon2561_bSupportsSubtreeIterators: u32 = 8;
pub const anon2561_bL2PCanMapFileBlocks: u32 = 9;
pub const anon2561_bParentModDateChanges: u32 = 10;
pub const anon2561_bAncestorModDateChanges: u32 = 11;
pub const anon2561_bSupportsSymbolicLinks: u32 = 13;
pub const anon2561_bIsAutoMounted: u32 = 14;
pub const anon2561_bAllowCDiDataHandler: u32 = 17;
pub const anon2561_bSupportsExclusiveLocks: u32 = 18;
pub const anon2561_bSupportsJournaling: u32 = 19;
pub const anon2561_bNoVolumeSizes: u32 = 20;
pub const anon2561_bIsOnInternalBus: u32 = 21;
pub const anon2561_bIsCaseSensitive: u32 = 22;
pub const anon2561_bIsCasePreserving: u32 = 23;
pub const anon2561_bDoNotDisplay: u32 = 24;
pub const anon2561_bIsRemovable: u32 = 25;
pub const anon2561_bNoRootTimes: u32 = 26;
pub const anon2561_bIsOnExternalBus: u32 = 27;
pub const anon2561_bSupportsExtendedFileSecurity: u32 = 28;

pub const anon2911 = u32;
pub const anon2911_WidePosOffsetBit: u32 = 8;
pub const anon2911_UseWidePositioning: u32 = 256;
pub const anon2911_MaximumBlocksIn4GB: u32 = 8388607;
pub const anon2911_HFSRootParentID: u32 = 1;
pub const anon2911_HFSRootFolderID: u32 = 2;
pub const anon2911_HFSExtentsFileID: u32 = 3;
pub const anon2911_HFSCatalogFileID: u32 = 4;
pub const anon2911_HFSBadBlockFileID: u32 = 5;
pub const anon2911_HFSAllocationFileID: u32 = 6;
pub const anon2911_HFSStartupFileID: u32 = 7;
pub const anon2911_HFSAttributesFileID: u32 = 8;
pub const anon2911_HFSAttributeDataFileID: u32 = 13;
pub const anon2911_HFSRepairCatalogFileID: u32 = 14;
pub const anon2911_HFSBogusExtentFileID: u32 = 15;
pub const anon2911_HFSFirstUserCatalogNodeID: u32 = 16;

pub const anon2981 = u32;
pub const anon2981_fsUnixPriv: u32 = 1;

pub const anon3031 = u32;
pub const anon3031_NoUserAuthentication: u32 = 1;
pub const anon3031_Password: u32 = 2;
pub const anon3031_EncryptPassword: u32 = 3;
pub const anon3031_TwoWayEncryptPassword: u32 = 6;

pub const anon3181 = u32;
pub const anon3181_noGroup: u32 = 0;
pub const anon3181_AEUseSocksAttr: u32 = 2020828019;
pub const anon3181_AESocksProxyAttr: u32 = 2020831083;
pub const anon3181_AESocksHostAttr: u32 = 2020829299;
pub const anon3181_AESocksPortAttr: u32 = 2020829296;
pub const anon3181_AESocksUserAttr: u32 = 2020829301;
pub const anon3181_AESocksPasswordAttr: u32 = 2020829303;
pub const anon3181_errSecSuccess: u32 = 0;
pub const anon3181_errSecUnimplemented: u32 = -4;
pub const anon3181_errSecDiskFull: u32 = -34;
pub const anon3181_errSecDskFull: u32 = -34;
pub const anon3181_errSecIO: u32 = -36;
pub const anon3181_errSecOpWr: u32 = -49;
pub const anon3181_errSecParam: u32 = -50;
pub const anon3181_errSecWrPerm: u32 = -61;
pub const anon3181_errSecAllocate: u32 = -108;
pub const anon3181_errSecUserCanceled: u32 = -128;
pub const anon3181_errSecBadReq: u32 = -909;
pub const anon3181_errSecInternalComponent: u32 = -2070;
pub const anon3181_errSecCoreFoundationUnknown: u32 = -4960;
pub const anon3181_errSecMissingEntitlement: u32 = -34018;
pub const anon3181_errSecRestrictedAPI: u32 = -34020;
pub const anon3181_errSecNotAvailable: u32 = -25291;
pub const anon3181_errSecReadOnly: u32 = -25292;
pub const anon3181_errSecAuthFailed: u32 = -25293;
pub const anon3181_errSecNoSuchKeychain: u32 = -25294;
pub const anon3181_errSecInvalidKeychain: u32 = -25295;
pub const anon3181_errSecDuplicateKeychain: u32 = -25296;
pub const anon3181_errSecDuplicateCallback: u32 = -25297;
pub const anon3181_errSecInvalidCallback: u32 = -25298;
pub const anon3181_errSecDuplicateItem: u32 = -25299;
pub const anon3181_errSecItemNotFound: u32 = -25300;
pub const anon3181_errSecBufferTooSmall: u32 = -25301;
pub const anon3181_errSecDataTooLarge: u32 = -25302;
pub const anon3181_errSecNoSuchAttr: u32 = -25303;
pub const anon3181_errSecInvalidItemRef: u32 = -25304;
pub const anon3181_errSecInvalidSearchRef: u32 = -25305;
pub const anon3181_errSecNoSuchClass: u32 = -25306;
pub const anon3181_errSecNoDefaultKeychain: u32 = -25307;
pub const anon3181_errSecInteractionNotAllowed: u32 = -25308;
pub const anon3181_errSecReadOnlyAttr: u32 = -25309;
pub const anon3181_errSecWrongSecVersion: u32 = -25310;
pub const anon3181_errSecKeySizeNotAllowed: u32 = -25311;
pub const anon3181_errSecNoStorageModule: u32 = -25312;
pub const anon3181_errSecNoCertificateModule: u32 = -25313;
pub const anon3181_errSecNoPolicyModule: u32 = -25314;
pub const anon3181_errSecInteractionRequired: u32 = -25315;
pub const anon3181_errSecDataNotAvailable: u32 = -25316;
pub const anon3181_errSecDataNotModifiable: u32 = -25317;
pub const anon3181_errSecCreateChainFailed: u32 = -25318;
pub const anon3181_errSecInvalidPrefsDomain: u32 = -25319;
pub const anon3181_errSecInDarkWake: u32 = -25320;
pub const anon3181_errSecACLNotSimple: u32 = -25240;
pub const anon3181_errSecPolicyNotFound: u32 = -25241;
pub const anon3181_errSecInvalidTrustSetting: u32 = -25242;
pub const anon3181_errSecNoAccessForItem: u32 = -25243;
pub const anon3181_errSecInvalidOwnerEdit: u32 = -25244;
pub const anon3181_errSecTrustNotAvailable: u32 = -25245;
pub const anon3181_errSecUnsupportedFormat: u32 = -25256;
pub const anon3181_errSecUnknownFormat: u32 = -25257;
pub const anon3181_errSecKeyIsSensitive: u32 = -25258;
pub const anon3181_errSecMultiplePrivKeys: u32 = -25259;
pub const anon3181_errSecPassphraseRequired: u32 = -25260;
pub const anon3181_errSecInvalidPasswordRef: u32 = -25261;
pub const anon3181_errSecInvalidTrustSettings: u32 = -25262;
pub const anon3181_errSecNoTrustSettings: u32 = -25263;
pub const anon3181_errSecPkcs12VerifyFailure: u32 = -25264;
pub const anon3181_errSecNotSigner: u32 = -26267;
pub const anon3181_errSecDecode: u32 = -26275;
pub const anon3181_errSecServiceNotAvailable: u32 = -67585;
pub const anon3181_errSecInsufficientClientID: u32 = -67586;
pub const anon3181_errSecDeviceReset: u32 = -67587;
pub const anon3181_errSecDeviceFailed: u32 = -67588;
pub const anon3181_errSecAppleAddAppACLSubject: u32 = -67589;
pub const anon3181_errSecApplePublicKeyIncomplete: u32 = -67590;
pub const anon3181_errSecAppleSignatureMismatch: u32 = -67591;
pub const anon3181_errSecAppleInvalidKeyStartDate: u32 = -67592;
pub const anon3181_errSecAppleInvalidKeyEndDate: u32 = -67593;
pub const anon3181_errSecConversionError: u32 = -67594;
pub const anon3181_errSecAppleSSLv2Rollback: u32 = -67595;
pub const anon3181_errSecQuotaExceeded: u32 = -67596;
pub const anon3181_errSecFileTooBig: u32 = -67597;
pub const anon3181_errSecInvalidDatabaseBlob: u32 = -67598;
pub const anon3181_errSecInvalidKeyBlob: u32 = -67599;
pub const anon3181_errSecIncompatibleDatabaseBlob: u32 = -67600;
pub const anon3181_errSecIncompatibleKeyBlob: u32 = -67601;
pub const anon3181_errSecHostNameMismatch: u32 = -67602;
pub const anon3181_errSecUnknownCriticalExtensionFlag: u32 = -67603;
pub const anon3181_errSecNoBasicConstraints: u32 = -67604;
pub const anon3181_errSecNoBasicConstraintsCA: u32 = -67605;
pub const anon3181_errSecInvalidAuthorityKeyID: u32 = -67606;
pub const anon3181_errSecInvalidSubjectKeyID: u32 = -67607;
pub const anon3181_errSecInvalidKeyUsageForPolicy: u32 = -67608;
pub const anon3181_errSecInvalidExtendedKeyUsage: u32 = -67609;
pub const anon3181_errSecInvalidIDLinkage: u32 = -67610;
pub const anon3181_errSecPathLengthConstraintExceeded: u32 = -67611;
pub const anon3181_errSecInvalidRoot: u32 = -67612;
pub const anon3181_errSecCRLExpired: u32 = -67613;
pub const anon3181_errSecCRLNotValidYet: u32 = -67614;
pub const anon3181_errSecCRLNotFound: u32 = -67615;
pub const anon3181_errSecCRLServerDown: u32 = -67616;
pub const anon3181_errSecCRLBadURI: u32 = -67617;
pub const anon3181_errSecUnknownCertExtension: u32 = -67618;
pub const anon3181_errSecUnknownCRLExtension: u32 = -67619;
pub const anon3181_errSecCRLNotTrusted: u32 = -67620;
pub const anon3181_errSecCRLPolicyFailed: u32 = -67621;
pub const anon3181_errSecIDPFailure: u32 = -67622;
pub const anon3181_errSecSMIMEEmailAddressesNotFound: u32 = -67623;
pub const anon3181_errSecSMIMEBadExtendedKeyUsage: u32 = -67624;
pub const anon3181_errSecSMIMEBadKeyUsage: u32 = -67625;
pub const anon3181_errSecSMIMEKeyUsageNotCritical: u32 = -67626;
pub const anon3181_errSecSMIMENoEmailAddress: u32 = -67627;
pub const anon3181_errSecSMIMESubjAltNameNotCritical: u32 = -67628;
pub const anon3181_errSecSSLBadExtendedKeyUsage: u32 = -67629;
pub const anon3181_errSecOCSPBadResponse: u32 = -67630;
pub const anon3181_errSecOCSPBadRequest: u32 = -67631;
pub const anon3181_errSecOCSPUnavailable: u32 = -67632;
pub const anon3181_errSecOCSPStatusUnrecognized: u32 = -67633;
pub const anon3181_errSecEndOfData: u32 = -67634;
pub const anon3181_errSecIncompleteCertRevocationCheck: u32 = -67635;
pub const anon3181_errSecNetworkFailure: u32 = -67636;
pub const anon3181_errSecOCSPNotTrustedToAnchor: u32 = -67637;
pub const anon3181_errSecRecordModified: u32 = -67638;
pub const anon3181_errSecOCSPSignatureError: u32 = -67639;
pub const anon3181_errSecOCSPNoSigner: u32 = -67640;
pub const anon3181_errSecOCSPResponderMalformedReq: u32 = -67641;
pub const anon3181_errSecOCSPResponderInternalError: u32 = -67642;
pub const anon3181_errSecOCSPResponderTryLater: u32 = -67643;
pub const anon3181_errSecOCSPResponderSignatureRequired: u32 = -67644;
pub const anon3181_errSecOCSPResponderUnauthorized: u32 = -67645;
pub const anon3181_errSecOCSPResponseNonceMismatch: u32 = -67646;
pub const anon3181_errSecCodeSigningBadCertChainLength: u32 = -67647;
pub const anon3181_errSecCodeSigningNoBasicConstraints: u32 = -67648;
pub const anon3181_errSecCodeSigningBadPathLengthConstraint: u32 = -67649;
pub const anon3181_errSecCodeSigningNoExtendedKeyUsage: u32 = -67650;
pub const anon3181_errSecCodeSigningDevelopment: u32 = -67651;
pub const anon3181_errSecResourceSignBadCertChainLength: u32 = -67652;
pub const anon3181_errSecResourceSignBadExtKeyUsage: u32 = -67653;
pub const anon3181_errSecTrustSettingDeny: u32 = -67654;
pub const anon3181_errSecInvalidSubjectName: u32 = -67655;
pub const anon3181_errSecUnknownQualifiedCertStatement: u32 = -67656;
pub const anon3181_errSecMobileMeRequestQueued: u32 = -67657;
pub const anon3181_errSecMobileMeRequestRedirected: u32 = -67658;
pub const anon3181_errSecMobileMeServerError: u32 = -67659;
pub const anon3181_errSecMobileMeServerNotAvailable: u32 = -67660;
pub const anon3181_errSecMobileMeServerAlreadyExists: u32 = -67661;
pub const anon3181_errSecMobileMeServerServiceErr: u32 = -67662;
pub const anon3181_errSecMobileMeRequestAlreadyPending: u32 = -67663;
pub const anon3181_errSecMobileMeNoRequestPending: u32 = -67664;
pub const anon3181_errSecMobileMeCSRVerifyFailure: u32 = -67665;
pub const anon3181_errSecMobileMeFailedConsistencyCheck: u32 = -67666;
pub const anon3181_errSecNotInitialized: u32 = -67667;
pub const anon3181_errSecInvalidHandleUsage: u32 = -67668;
pub const anon3181_errSecPVCReferentNotFound: u32 = -67669;
pub const anon3181_errSecFunctionIntegrityFail: u32 = -67670;
pub const anon3181_errSecInternalError: u32 = -67671;
pub const anon3181_errSecMemoryError: u32 = -67672;
pub const anon3181_errSecInvalidData: u32 = -67673;
pub const anon3181_errSecMDSError: u32 = -67674;
pub const anon3181_errSecInvalidPointer: u32 = -67675;
pub const anon3181_errSecSelfCheckFailed: u32 = -67676;
pub const anon3181_errSecFunctionFailed: u32 = -67677;
pub const anon3181_errSecModuleManifestVerifyFailed: u32 = -67678;
pub const anon3181_errSecInvalidGUID: u32 = -67679;
pub const anon3181_errSecInvalidHandle: u32 = -67680;
pub const anon3181_errSecInvalidDBList: u32 = -67681;
pub const anon3181_errSecInvalidPassthroughID: u32 = -67682;
pub const anon3181_errSecInvalidNetworkAddress: u32 = -67683;
pub const anon3181_errSecCRLAlreadySigned: u32 = -67684;
pub const anon3181_errSecInvalidNumberOfFields: u32 = -67685;
pub const anon3181_errSecVerificationFailure: u32 = -67686;
pub const anon3181_errSecUnknownTag: u32 = -67687;
pub const anon3181_errSecInvalidSignature: u32 = -67688;
pub const anon3181_errSecInvalidName: u32 = -67689;
pub const anon3181_errSecInvalidCertificateRef: u32 = -67690;
pub const anon3181_errSecInvalidCertificateGroup: u32 = -67691;
pub const anon3181_errSecTagNotFound: u32 = -67692;
pub const anon3181_errSecInvalidQuery: u32 = -67693;
pub const anon3181_errSecInvalidValue: u32 = -67694;
pub const anon3181_errSecCallbackFailed: u32 = -67695;
pub const anon3181_errSecACLDeleteFailed: u32 = -67696;
pub const anon3181_errSecACLReplaceFailed: u32 = -67697;
pub const anon3181_errSecACLAddFailed: u32 = -67698;
pub const anon3181_errSecACLChangeFailed: u32 = -67699;
pub const anon3181_errSecInvalidAccessCredentials: u32 = -67700;
pub const anon3181_errSecInvalidRecord: u32 = -67701;
pub const anon3181_errSecInvalidACL: u32 = -67702;
pub const anon3181_errSecInvalidSampleValue: u32 = -67703;
pub const anon3181_errSecIncompatibleVersion: u32 = -67704;
pub const anon3181_errSecPrivilegeNotGranted: u32 = -67705;
pub const anon3181_errSecInvalidScope: u32 = -67706;
pub const anon3181_errSecPVCAlreadyConfigured: u32 = -67707;
pub const anon3181_errSecInvalidPVC: u32 = -67708;
pub const anon3181_errSecEMMLoadFailed: u32 = -67709;
pub const anon3181_errSecEMMUnloadFailed: u32 = -67710;
pub const anon3181_errSecAddinLoadFailed: u32 = -67711;
pub const anon3181_errSecInvalidKeyRef: u32 = -67712;
pub const anon3181_errSecInvalidKeyHierarchy: u32 = -67713;
pub const anon3181_errSecAddinUnloadFailed: u32 = -67714;
pub const anon3181_errSecLibraryReferenceNotFound: u32 = -67715;
pub const anon3181_errSecInvalidAddinFunctionTable: u32 = -67716;
pub const anon3181_errSecInvalidServiceMask: u32 = -67717;
pub const anon3181_errSecModuleNotLoaded: u32 = -67718;
pub const anon3181_errSecInvalidSubServiceID: u32 = -67719;
pub const anon3181_errSecAttributeNotInContext: u32 = -67720;
pub const anon3181_errSecModuleManagerInitializeFailed: u32 = -67721;
pub const anon3181_errSecModuleManagerNotFound: u32 = -67722;
pub const anon3181_errSecEventNotificationCallbackNotFound: u32 = -67723;
pub const anon3181_errSecInputLengthError: u32 = -67724;
pub const anon3181_errSecOutputLengthError: u32 = -67725;
pub const anon3181_errSecPrivilegeNotSupported: u32 = -67726;
pub const anon3181_errSecDeviceError: u32 = -67727;
pub const anon3181_errSecAttachHandleBusy: u32 = -67728;
pub const anon3181_errSecNotLoggedIn: u32 = -67729;
pub const anon3181_errSecAlgorithmMismatch: u32 = -67730;
pub const anon3181_errSecKeyUsageIncorrect: u32 = -67731;
pub const anon3181_errSecKeyBlobTypeIncorrect: u32 = -67732;
pub const anon3181_errSecKeyHeaderInconsistent: u32 = -67733;
pub const anon3181_errSecUnsupportedKeyFormat: u32 = -67734;
pub const anon3181_errSecUnsupportedKeySize: u32 = -67735;
pub const anon3181_errSecInvalidKeyUsageMask: u32 = -67736;
pub const anon3181_errSecUnsupportedKeyUsageMask: u32 = -67737;
pub const anon3181_errSecInvalidKeyAttributeMask: u32 = -67738;
pub const anon3181_errSecUnsupportedKeyAttributeMask: u32 = -67739;
pub const anon3181_errSecInvalidKeyLabel: u32 = -67740;
pub const anon3181_errSecUnsupportedKeyLabel: u32 = -67741;
pub const anon3181_errSecInvalidKeyFormat: u32 = -67742;
pub const anon3181_errSecUnsupportedVectorOfBuffers: u32 = -67743;
pub const anon3181_errSecInvalidInputVector: u32 = -67744;
pub const anon3181_errSecInvalidOutputVector: u32 = -67745;
pub const anon3181_errSecInvalidContext: u32 = -67746;
pub const anon3181_errSecInvalidAlgorithm: u32 = -67747;
pub const anon3181_errSecInvalidAttributeKey: u32 = -67748;
pub const anon3181_errSecMissingAttributeKey: u32 = -67749;
pub const anon3181_errSecInvalidAttributeInitVector: u32 = -67750;
pub const anon3181_errSecMissingAttributeInitVector: u32 = -67751;
pub const anon3181_errSecInvalidAttributeSalt: u32 = -67752;
pub const anon3181_errSecMissingAttributeSalt: u32 = -67753;
pub const anon3181_errSecInvalidAttributePadding: u32 = -67754;
pub const anon3181_errSecMissingAttributePadding: u32 = -67755;
pub const anon3181_errSecInvalidAttributeRandom: u32 = -67756;
pub const anon3181_errSecMissingAttributeRandom: u32 = -67757;
pub const anon3181_errSecInvalidAttributeSeed: u32 = -67758;
pub const anon3181_errSecMissingAttributeSeed: u32 = -67759;
pub const anon3181_errSecInvalidAttributePassphrase: u32 = -67760;
pub const anon3181_errSecMissingAttributePassphrase: u32 = -67761;
pub const anon3181_errSecInvalidAttributeKeyLength: u32 = -67762;
pub const anon3181_errSecMissingAttributeKeyLength: u32 = -67763;
pub const anon3181_errSecInvalidAttributeBlockSize: u32 = -67764;
pub const anon3181_errSecMissingAttributeBlockSize: u32 = -67765;
pub const anon3181_errSecInvalidAttributeOutputSize: u32 = -67766;
pub const anon3181_errSecMissingAttributeOutputSize: u32 = -67767;
pub const anon3181_errSecInvalidAttributeRounds: u32 = -67768;
pub const anon3181_errSecMissingAttributeRounds: u32 = -67769;
pub const anon3181_errSecInvalidAlgorithmParms: u32 = -67770;
pub const anon3181_errSecMissingAlgorithmParms: u32 = -67771;
pub const anon3181_errSecInvalidAttributeLabel: u32 = -67772;
pub const anon3181_errSecMissingAttributeLabel: u32 = -67773;
pub const anon3181_errSecInvalidAttributeKeyType: u32 = -67774;
pub const anon3181_errSecMissingAttributeKeyType: u32 = -67775;
pub const anon3181_errSecInvalidAttributeMode: u32 = -67776;
pub const anon3181_errSecMissingAttributeMode: u32 = -67777;
pub const anon3181_errSecInvalidAttributeEffectiveBits: u32 = -67778;
pub const anon3181_errSecMissingAttributeEffectiveBits: u32 = -67779;
pub const anon3181_errSecInvalidAttributeStartDate: u32 = -67780;
pub const anon3181_errSecMissingAttributeStartDate: u32 = -67781;
pub const anon3181_errSecInvalidAttributeEndDate: u32 = -67782;
pub const anon3181_errSecMissingAttributeEndDate: u32 = -67783;
pub const anon3181_errSecInvalidAttributeVersion: u32 = -67784;
pub const anon3181_errSecMissingAttributeVersion: u32 = -67785;
pub const anon3181_errSecInvalidAttributePrime: u32 = -67786;
pub const anon3181_errSecMissingAttributePrime: u32 = -67787;
pub const anon3181_errSecInvalidAttributeBase: u32 = -67788;
pub const anon3181_errSecMissingAttributeBase: u32 = -67789;
pub const anon3181_errSecInvalidAttributeSubprime: u32 = -67790;
pub const anon3181_errSecMissingAttributeSubprime: u32 = -67791;
pub const anon3181_errSecInvalidAttributeIterationCount: u32 = -67792;
pub const anon3181_errSecMissingAttributeIterationCount: u32 = -67793;
pub const anon3181_errSecInvalidAttributeDLDBHandle: u32 = -67794;
pub const anon3181_errSecMissingAttributeDLDBHandle: u32 = -67795;
pub const anon3181_errSecInvalidAttributeAccessCredentials: u32 = -67796;
pub const anon3181_errSecMissingAttributeAccessCredentials: u32 = -67797;
pub const anon3181_errSecInvalidAttributePublicKeyFormat: u32 = -67798;
pub const anon3181_errSecMissingAttributePublicKeyFormat: u32 = -67799;
pub const anon3181_errSecInvalidAttributePrivateKeyFormat: u32 = -67800;
pub const anon3181_errSecMissingAttributePrivateKeyFormat: u32 = -67801;
pub const anon3181_errSecInvalidAttributeSymmetricKeyFormat: u32 = -67802;
pub const anon3181_errSecMissingAttributeSymmetricKeyFormat: u32 = -67803;
pub const anon3181_errSecInvalidAttributeWrappedKeyFormat: u32 = -67804;
pub const anon3181_errSecMissingAttributeWrappedKeyFormat: u32 = -67805;
pub const anon3181_errSecStagedOperationInProgress: u32 = -67806;
pub const anon3181_errSecStagedOperationNotStarted: u32 = -67807;
pub const anon3181_errSecVerifyFailed: u32 = -67808;
pub const anon3181_errSecQuerySizeUnknown: u32 = -67809;
pub const anon3181_errSecBlockSizeMismatch: u32 = -67810;
pub const anon3181_errSecPublicKeyInconsistent: u32 = -67811;
pub const anon3181_errSecDeviceVerifyFailed: u32 = -67812;
pub const anon3181_errSecInvalidLoginName: u32 = -67813;
pub const anon3181_errSecAlreadyLoggedIn: u32 = -67814;
pub const anon3181_errSecInvalidDigestAlgorithm: u32 = -67815;
pub const anon3181_errSecInvalidCRLGroup: u32 = -67816;
pub const anon3181_errSecCertificateCannotOperate: u32 = -67817;
pub const anon3181_errSecCertificateExpired: u32 = -67818;
pub const anon3181_errSecCertificateNotValidYet: u32 = -67819;
pub const anon3181_errSecCertificateRevoked: u32 = -67820;
pub const anon3181_errSecCertificateSuspended: u32 = -67821;
pub const anon3181_errSecInsufficientCredentials: u32 = -67822;
pub const anon3181_errSecInvalidAction: u32 = -67823;
pub const anon3181_errSecInvalidAuthority: u32 = -67824;
pub const anon3181_errSecVerifyActionFailed: u32 = -67825;
pub const anon3181_errSecInvalidCertAuthority: u32 = -67826;
pub const anon3181_errSecInvalidCRLAuthority: u32 = -67827;
pub const anon3181_errSecInvaldCRLAuthority: u32 = -67827;
pub const anon3181_errSecInvalidCRLEncoding: u32 = -67828;
pub const anon3181_errSecInvalidCRLType: u32 = -67829;
pub const anon3181_errSecInvalidCRL: u32 = -67830;
pub const anon3181_errSecInvalidFormType: u32 = -67831;
pub const anon3181_errSecInvalidID: u32 = -67832;
pub const anon3181_errSecInvalidIdentifier: u32 = -67833;
pub const anon3181_errSecInvalidIndex: u32 = -67834;
pub const anon3181_errSecInvalidPolicyIdentifiers: u32 = -67835;
pub const anon3181_errSecInvalidTimeString: u32 = -67836;
pub const anon3181_errSecInvalidReason: u32 = -67837;
pub const anon3181_errSecInvalidRequestInputs: u32 = -67838;
pub const anon3181_errSecInvalidResponseVector: u32 = -67839;
pub const anon3181_errSecInvalidStopOnPolicy: u32 = -67840;
pub const anon3181_errSecInvalidTuple: u32 = -67841;
pub const anon3181_errSecMultipleValuesUnsupported: u32 = -67842;
pub const anon3181_errSecNotTrusted: u32 = -67843;
pub const anon3181_errSecNoDefaultAuthority: u32 = -67844;
pub const anon3181_errSecRejectedForm: u32 = -67845;
pub const anon3181_errSecRequestLost: u32 = -67846;
pub const anon3181_errSecRequestRejected: u32 = -67847;
pub const anon3181_errSecUnsupportedAddressType: u32 = -67848;
pub const anon3181_errSecUnsupportedService: u32 = -67849;
pub const anon3181_errSecInvalidTupleGroup: u32 = -67850;
pub const anon3181_errSecInvalidBaseACLs: u32 = -67851;
pub const anon3181_errSecInvalidTupleCredentials: u32 = -67852;
pub const anon3181_errSecInvalidTupleCredendtials: u32 = -67852;
pub const anon3181_errSecInvalidEncoding: u32 = -67853;
pub const anon3181_errSecInvalidValidityPeriod: u32 = -67854;
pub const anon3181_errSecInvalidRequestor: u32 = -67855;
pub const anon3181_errSecRequestDescriptor: u32 = -67856;
pub const anon3181_errSecInvalidBundleInfo: u32 = -67857;
pub const anon3181_errSecInvalidCRLIndex: u32 = -67858;
pub const anon3181_errSecNoFieldValues: u32 = -67859;
pub const anon3181_errSecUnsupportedFieldFormat: u32 = -67860;
pub const anon3181_errSecUnsupportedIndexInfo: u32 = -67861;
pub const anon3181_errSecUnsupportedLocality: u32 = -67862;
pub const anon3181_errSecUnsupportedNumAttributes: u32 = -67863;
pub const anon3181_errSecUnsupportedNumIndexes: u32 = -67864;
pub const anon3181_errSecUnsupportedNumRecordTypes: u32 = -67865;
pub const anon3181_errSecFieldSpecifiedMultiple: u32 = -67866;
pub const anon3181_errSecIncompatibleFieldFormat: u32 = -67867;
pub const anon3181_errSecInvalidParsingModule: u32 = -67868;
pub const anon3181_errSecDatabaseLocked: u32 = -67869;
pub const anon3181_errSecDatastoreIsOpen: u32 = -67870;
pub const anon3181_errSecMissingValue: u32 = -67871;
pub const anon3181_errSecUnsupportedQueryLimits: u32 = -67872;
pub const anon3181_errSecUnsupportedNumSelectionPreds: u32 = -67873;
pub const anon3181_errSecUnsupportedOperator: u32 = -67874;
pub const anon3181_errSecInvalidDBLocation: u32 = -67875;
pub const anon3181_errSecInvalidAccessRequest: u32 = -67876;
pub const anon3181_errSecInvalidIndexInfo: u32 = -67877;
pub const anon3181_errSecInvalidNewOwner: u32 = -67878;
pub const anon3181_errSecInvalidModifyMode: u32 = -67879;
pub const anon3181_errSecMissingRequiredExtension: u32 = -67880;
pub const anon3181_errSecExtendedKeyUsageNotCritical: u32 = -67881;
pub const anon3181_errSecTimestampMissing: u32 = -67882;
pub const anon3181_errSecTimestampInvalid: u32 = -67883;
pub const anon3181_errSecTimestampNotTrusted: u32 = -67884;
pub const anon3181_errSecTimestampServiceNotAvailable: u32 = -67885;
pub const anon3181_errSecTimestampBadAlg: u32 = -67886;
pub const anon3181_errSecTimestampBadRequest: u32 = -67887;
pub const anon3181_errSecTimestampBadDataFormat: u32 = -67888;
pub const anon3181_errSecTimestampTimeNotAvailable: u32 = -67889;
pub const anon3181_errSecTimestampUnacceptedPolicy: u32 = -67890;
pub const anon3181_errSecTimestampUnacceptedExtension: u32 = -67891;
pub const anon3181_errSecTimestampAddInfoNotAvailable: u32 = -67892;
pub const anon3181_errSecTimestampSystemFailure: u32 = -67893;
pub const anon3181_errSecSigningTimeMissing: u32 = -67894;
pub const anon3181_errSecTimestampRejection: u32 = -67895;
pub const anon3181_errSecTimestampWaiting: u32 = -67896;
pub const anon3181_errSecTimestampRevocationWarning: u32 = -67897;
pub const anon3181_errSecTimestampRevocationNotification: u32 = -67898;
pub const anon3181_errSecCertificatePolicyNotAllowed: u32 = -67899;
pub const anon3181_errSecCertificateNameNotAllowed: u32 = -67900;
pub const anon3181_errSecCertificateValidityPeriodTooLong: u32 = -67901;
pub const anon3181_errSecCertificateIsCA: u32 = -67902;
pub const anon3181_errSecCertificateDuplicateExtension: u32 = -67903;

pub const FSVolumeRefNum = objc.SInt16;

pub const FSIORefNum = i32;

pub const anon3301 = u32;
pub const anon3301_FSInvalidVolumeRefNum: u32 = 0;

pub const FSRef = core_foundation.FSRef;

pub const FSRefPtr = FSRef;

pub const __FSFileSecurity = extern struct {};

pub const FSFileSecurityRef = __FSFileSecurity;

pub const CatPositionRec = extern struct {
    initialize: objc.SInt32,
    priv: [6]objc.SInt16,
};

pub const FSSpec = extern struct {
    hidden: [70]objc.UInt8,
};

pub const FSSpecPtr = FSSpec;

pub const FSSpecHandle = FSSpecPtr;

pub const FSSpecArrayPtr = FSSpecPtr;

pub const ConstFSSpecPtr = FSSpec;

pub const ParamBlockRec = extern union {};

pub const ParmBlkPtr = ?*anyopaque;

pub const IOCompletionProcPtr = ?*const fn (ParmBlkPtr) callconv(.C) void;

pub const IOCompletionUPP = IOCompletionProcPtr;

pub const FSPermissionInfo = extern struct {
    userID: objc.UInt32,
    groupID: objc.UInt32,
    reserved1: objc.UInt8,
    userAccess: objc.UInt8,
    mode: objc.UInt16,
    fileSec: FSFileSecurityRef,
};

pub const FSCatalogInfoBitmap = objc.UInt32;

pub const anon10821 = i32;
pub const anon10821_FSCatInfoNone: i32 = 0;
pub const anon10821_FSCatInfoTextEncoding: i32 = 1;
pub const anon10821_FSCatInfoNodeFlags: i32 = 2;
pub const anon10821_FSCatInfoVolume: i32 = 4;
pub const anon10821_FSCatInfoParentDirID: i32 = 8;
pub const anon10821_FSCatInfoNodeID: i32 = 16;
pub const anon10821_FSCatInfoCreateDate: i32 = 32;
pub const anon10821_FSCatInfoContentMod: i32 = 64;
pub const anon10821_FSCatInfoAttrMod: i32 = 128;
pub const anon10821_FSCatInfoAccessDate: i32 = 256;
pub const anon10821_FSCatInfoBackupDate: i32 = 512;
pub const anon10821_FSCatInfoPermissions: i32 = 1024;
pub const anon10821_FSCatInfoFinderInfo: i32 = 2048;
pub const anon10821_FSCatInfoFinderXInfo: i32 = 4096;
pub const anon10821_FSCatInfoValence: i32 = 8192;
pub const anon10821_FSCatInfoDataSizes: i32 = 16384;
pub const anon10821_FSCatInfoRsrcSizes: i32 = 32768;
pub const anon10821_FSCatInfoSharingFlags: i32 = 65536;
pub const anon10821_FSCatInfoUserPrivs: i32 = 131072;
pub const anon10821_FSCatInfoUserAccess: i32 = 524288;
pub const anon10821_FSCatInfoSetOwnership: i32 = 1048576;
pub const anon10821_FSCatInfoFSFileSecurityRef: i32 = 4194304;
pub const anon10821_FSCatInfoAllDates: i32 = 992;
pub const anon10821_FSCatInfoGettableInfo: i32 = 262143;
pub const anon10821_FSCatInfoSettableInfo: i32 = 8163;
pub const anon10821_FSCatInfoReserved: i32 = -262144;

pub const anon11121 = u32;
pub const anon11121_FSNodeLockedBit: u32 = 0;
pub const anon11121_FSNodeLockedMask: u32 = 1;
pub const anon11121_FSNodeResOpenBit: u32 = 2;
pub const anon11121_FSNodeResOpenMask: u32 = 4;
pub const anon11121_FSNodeDataOpenBit: u32 = 3;
pub const anon11121_FSNodeDataOpenMask: u32 = 8;
pub const anon11121_FSNodeIsDirectoryBit: u32 = 4;
pub const anon11121_FSNodeIsDirectoryMask: u32 = 16;
pub const anon11121_FSNodeCopyProtectBit: u32 = 6;
pub const anon11121_FSNodeCopyProtectMask: u32 = 64;
pub const anon11121_FSNodeForkOpenBit: u32 = 7;
pub const anon11121_FSNodeForkOpenMask: u32 = 128;
pub const anon11121_FSNodeHardLinkBit: u32 = 8;
pub const anon11121_FSNodeHardLinkMask: u32 = 256;

pub const anon11301 = u32;
pub const anon11301_FSNodeInSharedBit: u32 = 2;
pub const anon11301_FSNodeInSharedMask: u32 = 4;
pub const anon11301_FSNodeIsMountedBit: u32 = 3;
pub const anon11301_FSNodeIsMountedMask: u32 = 8;
pub const anon11301_FSNodeIsSharePointBit: u32 = 5;
pub const anon11301_FSNodeIsSharePointMask: u32 = 32;

pub const FSCatalogInfo = extern struct {
    nodeFlags: objc.UInt16,
    volume: FSVolumeRefNum,
    parentDirID: objc.UInt32,
    nodeID: objc.UInt32,
    sharingFlags: objc.UInt8,
    userPrivileges: objc.UInt8,
    reserved1: objc.UInt8,
    reserved2: objc.UInt8,
    createDate: UTCDateTime,
    contentModDate: UTCDateTime,
    attributeModDate: UTCDateTime,
    accessDate: UTCDateTime,
    backupDate: UTCDateTime,
    permissions: FSPermissionInfo,
    finderInfo: [16]objc.UInt8,
    extFinderInfo: [16]objc.UInt8,
    dataLogicalSize: objc.UInt64,
    dataPhysicalSize: objc.UInt64,
    rsrcLogicalSize: objc.UInt64,
    rsrcPhysicalSize: objc.UInt64,
    valence: objc.UInt32,
    textEncodingHint: TextEncoding,
};

pub const FSCatalogInfoPtr = FSCatalogInfo;

pub const FSRefParam = extern struct {
    qLink: QElemPtr,
    qType: objc.SInt16,
    ioTrap: objc.SInt16,
    ioCmdAddr: objc.Ptr,
    ioCompletion: IOCompletionUPP,
    ioResult: objc.OSErr,
    ioNamePtr: objc.ConstStringPtr,
    ioVRefNum: FSVolumeRefNum,
    reserved1: objc.SInt16,
    reserved2: objc.UInt8,
    reserved3: objc.UInt8,
    ref: ?*FSRef,
    whichInfo: FSCatalogInfoBitmap,
    catInfo: ?*FSCatalogInfo,
    nameLength: objc.UniCharCount,
    name: ?*objc.UniChar,
    ioDirID: objc.UInt32,
    spec: FSSpecPtr,
    parentRef: ?*FSRef,
    newRef: ?*FSRef,
    textEncodingHint: TextEncoding,
    outName: ?*objc.HFSUniStr255,
};

pub const FSRefParamPtr = FSRefParam;

pub const FSRefForkIOParam = extern struct {
    qLink: QElemPtr,
    qType: objc.SInt16,
    ioTrap: objc.SInt16,
    ioCmdAddr: objc.Ptr,
    ioCompletion: IOCompletionUPP,
    ioResult: objc.OSErr,
    parentRef: ?*FSRef,
    nameLength: objc.UniCharCount,
    name: ?*objc.UniChar,
    whichInfo: FSCatalogInfoBitmap,
    catInfo: ?*FSCatalogInfo,
    forkNameLength: objc.UniCharCount,
    forkName: ?*objc.UniChar,
    permissions: objc.SInt8,
    reserved1: objc.UInt8,
    forkRefNum: FSIORefNum,
    newRef: ?*FSRef,
};

pub const FSRefForkIOParamPtr = FSRefForkIOParam;

pub const OpaqueFSIterator = extern struct {};

pub const FSIterator = OpaqueFSIterator;

pub const anon13551 = i32;
pub const anon13551_FSIterateFlat: i32 = 0;
pub const anon13551_FSIterateSubtree: i32 = 1;
pub const anon13551_FSIterateDelete: i32 = 2;
pub const anon13551_FSIterateReserved: i32 = -4;

pub const FSIteratorFlags = objc.OptionBits;

pub const FSSearchParams = extern struct {
    searchTime: objc.Duration,
    searchBits: objc.OptionBits,
    searchNameLength: objc.UniCharCount,
    searchName: ?*objc.UniChar,
    searchInfo1: ?*FSCatalogInfo,
    searchInfo2: ?*FSCatalogInfo,
};

pub const FSSearchParamsPtr = FSSearchParams;

pub const FSCatalogBulkParam = extern struct {
    qLink: QElemPtr,
    qType: objc.SInt16,
    ioTrap: objc.SInt16,
    ioCmdAddr: objc.Ptr,
    ioCompletion: IOCompletionUPP,
    ioResult: objc.OSErr,
    containerChanged: objc.Boolean,
    reserved: objc.UInt8,
    iteratorFlags: FSIteratorFlags,
    iterator: FSIterator,
    container: ?*FSRef,
    maximumItems: objc.ItemCount,
    actualItems: objc.ItemCount,
    whichInfo: FSCatalogInfoBitmap,
    catalogInfo: ?*FSCatalogInfo,
    refs: ?*FSRef,
    specs: FSSpecPtr,
    names: ?*objc.HFSUniStr255,
    searchParams: ?*FSSearchParams,
};

pub const FSCatalogBulkParamPtr = FSCatalogBulkParam;

pub const FSAllocationFlags = objc.UInt16;

pub const anon13981 = u32;
pub const anon13981_FSAllocDefaultFlags: u32 = 0;
pub const anon13981_FSAllocAllOrNothingMask: u32 = 1;
pub const anon13981_FSAllocContiguousMask: u32 = 2;
pub const anon13981_FSAllocNoRoundUpMask: u32 = 4;
pub const anon13981_FSAllocReservedMask: u32 = 65528;

pub const FSForkIOParam = extern struct {
    qLink: QElemPtr,
    qType: objc.SInt16,
    ioTrap: objc.SInt16,
    ioCmdAddr: objc.Ptr,
    ioCompletion: IOCompletionUPP,
    ioResult: objc.OSErr,
    reserved1: ?*anyopaque,
    reserved2: objc.SInt16,
    forkRefNum: FSIORefNum,
    reserved3: objc.UInt8,
    permissions: objc.SInt8,
    ref: ?*FSRef,
    buffer: objc.Ptr,
    requestCount: objc.UInt32,
    actualCount: objc.UInt32,
    positionMode: objc.UInt16,
    positionOffset: objc.SInt64,
    allocationFlags: FSAllocationFlags,
    allocationAmount: objc.UInt64,
    forkNameLength: objc.UniCharCount,
    forkName: ?*objc.UniChar,
    forkIterator: CatPositionRec,
    outForkName: ?*objc.HFSUniStr255,
};

pub const FSForkIOParamPtr = FSForkIOParam;

pub const FSForkInfoFlags = objc.UInt8;

pub const FSForkInfo = extern struct {
    flags: FSForkInfoFlags,
    permissions: objc.SInt8,
    volume: FSVolumeRefNum,
    reserved2: objc.UInt32,
    nodeID: objc.UInt32,
    forkID: objc.UInt32,
    currentPosition: objc.UInt64,
    logicalEOF: objc.UInt64,
    physicalEOF: objc.UInt64,
    process: objc.UInt64,
};

pub const FSForkInfoPtr = FSForkInfo;

pub const FSForkCBInfoParam = extern struct {
    qLink: QElemPtr,
    qType: objc.SInt16,
    ioTrap: objc.SInt16,
    ioCmdAddr: objc.Ptr,
    ioCompletion: IOCompletionUPP,
    ioResult: objc.OSErr,
    desiredRefNum: FSIORefNum,
    volumeRefNum: FSVolumeRefNum,
    iterator: FSIORefNum,
    actualRefNum: FSVolumeRefNum,
    ref: ?*FSRef,
    forkInfo: ?*FSForkInfo,
    forkName: ?*objc.HFSUniStr255,
};

pub const FSForkCBInfoParamPtr = FSForkCBInfoParam;

pub const FSRangeLockParam = extern struct {
    qLink: QElemPtr,
    qType: objc.SInt16,
    ioTrap: objc.SInt16,
    ioCmdAddr: objc.Ptr,
    ioCompletion: IOCompletionUPP,
    ioResult: objc.OSErr,
    forkRefNum: FSIORefNum,
    requestCount: objc.UInt64,
    positionMode: objc.UInt16,
    positionOffset: objc.SInt64,
    rangeStart: objc.UInt64,
};

pub const FSRangeLockParamPtr = FSRangeLockParam;

pub const FSVolumeInfoBitmap = objc.UInt32;

pub const anon14891 = u32;
pub const anon14891_FSVolInfoNone: u32 = 0;
pub const anon14891_FSVolInfoCreateDate: u32 = 1;
pub const anon14891_FSVolInfoModDate: u32 = 2;
pub const anon14891_FSVolInfoBackupDate: u32 = 4;
pub const anon14891_FSVolInfoCheckedDate: u32 = 8;
pub const anon14891_FSVolInfoFileCount: u32 = 16;
pub const anon14891_FSVolInfoDirCount: u32 = 32;
pub const anon14891_FSVolInfoSizes: u32 = 64;
pub const anon14891_FSVolInfoBlocks: u32 = 128;
pub const anon14891_FSVolInfoNextAlloc: u32 = 256;
pub const anon14891_FSVolInfoRsrcClump: u32 = 512;
pub const anon14891_FSVolInfoDataClump: u32 = 1024;
pub const anon14891_FSVolInfoNextID: u32 = 2048;
pub const anon14891_FSVolInfoFinderInfo: u32 = 4096;
pub const anon14891_FSVolInfoFlags: u32 = 8192;
pub const anon14891_FSVolInfoFSInfo: u32 = 16384;
pub const anon14891_FSVolInfoDriveInfo: u32 = 32768;
pub const anon14891_FSVolInfoGettableInfo: u32 = 65535;
pub const anon14891_FSVolInfoSettableInfo: u32 = 12292;

pub const anon15121 = u32;
pub const anon15121_FSVolFlagDefaultVolumeBit: u32 = 5;
pub const anon15121_FSVolFlagDefaultVolumeMask: u32 = 32;
pub const anon15121_FSVolFlagFilesOpenBit: u32 = 6;
pub const anon15121_FSVolFlagFilesOpenMask: u32 = 64;
pub const anon15121_FSVolFlagHardwareLockedBit: u32 = 7;
pub const anon15121_FSVolFlagHardwareLockedMask: u32 = 128;
pub const anon15121_FSVolFlagJournalingActiveBit: u32 = 14;
pub const anon15121_FSVolFlagJournalingActiveMask: u32 = 16384;
pub const anon15121_FSVolFlagSoftwareLockedBit: u32 = 15;
pub const anon15121_FSVolFlagSoftwareLockedMask: u32 = 32768;

pub const FSVolumeInfo = extern struct {
    createDate: UTCDateTime,
    modifyDate: UTCDateTime,
    backupDate: UTCDateTime,
    checkedDate: UTCDateTime,
    fileCount: objc.UInt32,
    folderCount: objc.UInt32,
    totalBytes: objc.UInt64,
    freeBytes: objc.UInt64,
    blockSize: objc.UInt32,
    totalBlocks: objc.UInt32,
    freeBlocks: objc.UInt32,
    nextAllocation: objc.UInt32,
    rsrcClumpSize: objc.UInt32,
    dataClumpSize: objc.UInt32,
    nextCatalogID: objc.UInt32,
    finderInfo: [32]objc.UInt8,
    flags: objc.UInt16,
    filesystemID: objc.UInt16,
    signature: objc.UInt16,
    driveNumber: objc.UInt16,
    driverRefNum: FSIORefNum,
};

pub const FSVolumeInfoPtr = FSVolumeInfo;

pub const FSVolumeInfoParam = extern struct {
    qLink: QElemPtr,
    qType: objc.SInt16,
    ioTrap: objc.SInt16,
    ioCmdAddr: objc.Ptr,
    ioCompletion: IOCompletionUPP,
    ioResult: objc.OSErr,
    ioNamePtr: objc.StringPtr,
    ioVRefNum: FSVolumeRefNum,
    volumeIndex: objc.UInt32,
    whichInfo: FSVolumeInfoBitmap,
    volumeInfo: ?*FSVolumeInfo,
    volumeName: ?*objc.HFSUniStr255,
    ref: ?*FSRef,
};

pub const FSVolumeInfoParamPtr = FSVolumeInfoParam;

pub const GetVolParmsInfoBuffer = extern struct {
    vMVersion: objc.SInt16,
    vMAttrib: objc.SInt32,
    vMLocalHand: objc.Handle,
    vMServerAdr: objc.SInt32,
    vMVolumeGrade: objc.SInt32,
    vMForeignPrivID: objc.SInt16,
    vMExtendedAttributes: objc.SInt32,
    vMDeviceID: ?*anyopaque,
    vMMaxNameLength: objc.UniCharCount,
};

pub const VolumeType = objc.OSType;

pub const anon16021 = u32;
pub const anon16021_AppleShareMediaType: u32 = 1634103405;

pub const VolMountInfoHeader = extern struct {
    length: objc.SInt16,
    media: VolumeType,
};

pub const VolMountInfoPtr = VolMountInfoHeader;

pub const VolumeMountInfoHeader = extern struct {
    length: objc.SInt16,
    media: VolumeType,
    flags: objc.SInt16,
};

pub const VolumeMountInfoHeaderPtr = VolumeMountInfoHeader;

pub const anon16281 = u32;
pub const anon16281_volMountNoLoginMsgFlagBit: u32 = 0;
pub const anon16281_volMountNoLoginMsgFlagMask: u32 = 1;
pub const anon16281_volMountExtendedFlagsBit: u32 = 7;
pub const anon16281_volMountExtendedFlagsMask: u32 = 128;
pub const anon16281_volMountInteractBit: u32 = 15;
pub const anon16281_volMountInteractMask: u32 = 32768;
pub const anon16281_volMountChangedBit: u32 = 14;
pub const anon16281_volMountChangedMask: u32 = 16384;
pub const anon16281_volMountFSReservedMask: u32 = 255;
pub const anon16281_volMountSysReservedMask: u32 = 65280;

pub const AFPVolMountInfo = extern struct {
    length: objc.SInt16,
    media: VolumeType,
    flags: objc.SInt16,
    nbpInterval: objc.SInt8,
    nbpCount: objc.SInt8,
    uamType: objc.SInt16,
    zoneNameOffset: objc.SInt16,
    serverNameOffset: objc.SInt16,
    volNameOffset: objc.SInt16,
    userNameOffset: objc.SInt16,
    userPasswordOffset: objc.SInt16,
    volPasswordOffset: objc.SInt16,
    AFPData: [144]i8,
};

pub const AFPVolMountInfoPtr = AFPVolMountInfo;

pub const AFPXVolMountInfo = extern struct {
    length: objc.SInt16,
    media: VolumeType,
    flags: objc.SInt16,
    nbpInterval: objc.SInt8,
    nbpCount: objc.SInt8,
    uamType: objc.SInt16,
    zoneNameOffset: objc.SInt16,
    serverNameOffset: objc.SInt16,
    volNameOffset: objc.SInt16,
    userNameOffset: objc.SInt16,
    userPasswordOffset: objc.SInt16,
    volPasswordOffset: objc.SInt16,
    extendedFlags: objc.SInt16,
    uamNameOffset: objc.SInt16,
    alternateAddressOffset: objc.SInt16,
    AFPData: [176]i8,
};

pub const AFPXVolMountInfoPtr = AFPXVolMountInfo;

pub const anon16831 = u32;
pub const anon16831_AFPExtendedFlagsAlternateAddressMask: u32 = 1;

pub const anon16881 = u32;
pub const anon16881_AFPTagTypeIP: u32 = 1;
pub const anon16881_AFPTagTypeIPPort: u32 = 2;
pub const anon16881_AFPTagTypeDDP: u32 = 3;
pub const anon16881_AFPTagTypeDNS: u32 = 4;

pub const anon16971 = u32;
pub const anon16971_AFPTagLengthIP: u32 = 6;
pub const anon16971_AFPTagLengthIPPort: u32 = 8;
pub const anon16971_AFPTagLengthDDP: u32 = 6;

pub const AFPTagData = extern struct {
    fLength: objc.UInt8,
    fType: objc.UInt8,
    fData: [1]objc.UInt8,
};

pub const AFPAlternateAddress = extern struct {
    fVersion: objc.UInt8,
    fAddressCount: objc.UInt8,
    fAddressList: [1]objc.UInt8,
};

pub const anon17171 = u32;
pub const anon17171_LargeIconSize: u32 = 256;
pub const anon17171_Large4BitIconSize: u32 = 512;
pub const anon17171_Large8BitIconSize: u32 = 1024;
pub const anon17171_SmallIconSize: u32 = 64;
pub const anon17171_Small4BitIconSize: u32 = 128;
pub const anon17171_Small8BitIconSize: u32 = 256;

pub extern "CoreServices" fn NewIOCompletionUPP(userRoutine: IOCompletionProcPtr) callconv(.C) IOCompletionUPP;

pub extern "CoreServices" fn DisposeIOCompletionUPP(userUPP: IOCompletionUPP) callconv(.C) void;

pub extern "CoreServices" fn InvokeIOCompletionUPP(paramBlock: ParmBlkPtr, userUPP: IOCompletionUPP) callconv(.C) void;

pub extern "CoreServices" fn FSMakeFSRefUnicode(
    parentRef: ?*FSRef,
    nameLength: objc.UniCharCount,
    name: ?*objc.UniChar,
    textEncodingHint: TextEncoding,
    newRef: ?*FSRef,
) callconv(.C) objc.OSErr;

pub extern "CoreServices" fn PBMakeFSRefUnicodeSync(paramBlock: ?*FSRefParam) callconv(.C) objc.OSErr;

pub extern "CoreServices" fn PBMakeFSRefUnicodeAsync(paramBlock: ?*FSRefParam) callconv(.C) void;

pub extern "CoreServices" fn FSCompareFSRefs(ref1: ?*FSRef, ref2: ?*FSRef) callconv(.C) objc.OSErr;

pub extern "CoreServices" fn PBCompareFSRefsSync(paramBlock: ?*FSRefParam) callconv(.C) objc.OSErr;

pub extern "CoreServices" fn PBCompareFSRefsAsync(paramBlock: ?*FSRefParam) callconv(.C) void;

pub extern "CoreServices" fn FSCreateFileUnicode(
    parentRef: ?*FSRef,
    nameLength: objc.UniCharCount,
    name: ?*objc.UniChar,
    whichInfo: FSCatalogInfoBitmap,
    catalogInfo: ?*FSCatalogInfo,
    newRef: ?*FSRef,
    newSpec: FSSpecPtr,
) callconv(.C) objc.OSErr;

pub extern "CoreServices" fn PBCreateFileUnicodeSync(paramBlock: ?*FSRefParam) callconv(.C) objc.OSErr;

pub extern "CoreServices" fn PBCreateFileUnicodeAsync(paramBlock: ?*FSRefParam) callconv(.C) void;

pub extern "CoreServices" fn FSCreateDirectoryUnicode(
    parentRef: ?*FSRef,
    nameLength: objc.UniCharCount,
    name: ?*objc.UniChar,
    whichInfo: FSCatalogInfoBitmap,
    catalogInfo: ?*FSCatalogInfo,
    newRef: ?*FSRef,
    newSpec: FSSpecPtr,
    newDirID: ?*objc.UInt32,
) callconv(.C) objc.OSErr;

pub extern "CoreServices" fn PBCreateDirectoryUnicodeSync(paramBlock: ?*FSRefParam) callconv(.C) objc.OSErr;

pub extern "CoreServices" fn PBCreateDirectoryUnicodeAsync(paramBlock: ?*FSRefParam) callconv(.C) void;

pub extern "CoreServices" fn FSDeleteObject(ref: ?*FSRef) callconv(.C) objc.OSErr;

pub extern "CoreServices" fn PBDeleteObjectSync(paramBlock: ?*FSRefParam) callconv(.C) objc.OSErr;

pub extern "CoreServices" fn PBDeleteObjectAsync(paramBlock: ?*FSRefParam) callconv(.C) void;

pub extern "CoreServices" fn FSUnlinkObject(ref: ?*FSRef) callconv(.C) objc.OSErr;

pub extern "CoreServices" fn PBUnlinkObjectSync(paramBlock: ?*FSRefParam) callconv(.C) objc.OSErr;

pub extern "CoreServices" fn PBUnlinkObjectAsync(paramBlock: ?*FSRefParam) callconv(.C) void;

pub extern "CoreServices" fn FSMoveObject(ref: ?*FSRef, destDirectory: ?*FSRef, newRef: ?*FSRef) callconv(.C) objc.OSErr;

pub extern "CoreServices" fn PBMoveObjectSync(paramBlock: ?*FSRefParam) callconv(.C) objc.OSErr;

pub extern "CoreServices" fn PBMoveObjectAsync(paramBlock: ?*FSRefParam) callconv(.C) void;

pub extern "CoreServices" fn FSExchangeObjects(ref: ?*FSRef, destRef: ?*FSRef) callconv(.C) objc.OSErr;

pub extern "CoreServices" fn PBExchangeObjectsSync(paramBlock: ?*FSRefParam) callconv(.C) objc.OSErr;

pub extern "CoreServices" fn PBExchangeObjectsAsync(paramBlock: ?*FSRefParam) callconv(.C) void;

pub const anon23231 = u32;
pub const anon23231_FSReplaceObjectDefaultOptions: u32 = 0;
pub const anon23231_FSReplaceObjectReplaceMetadata: u32 = 1;
pub const anon23231_FSReplaceObjectSaveOriginalAsABackup: u32 = 2;
pub const anon23231_FSReplaceObjectReplacePermissionInfo: u32 = 4;
pub const anon23231_FSReplaceObjectPreservePermissionInfo: u32 = 8;
pub const anon23231_FSReplaceObjectDoNotCheckObjectWriteAccess: u32 = 16;

pub extern "CoreServices" fn FSReplaceObject(
    originalObject: ?*FSRef,
    replacementObject: ?*FSRef,
    newName: core_foundation.StringRef,
    temporaryName: core_foundation.StringRef,
    temporaryDirectory: ?*FSRef,
    flags: objc.OptionBits,
    resultObject: ?*FSRef,
) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn FSPathReplaceObject(
    originalObjectPath: ?*i8,
    replacementObjectPath: ?*i8,
    newName: core_foundation.StringRef,
    temporaryName: core_foundation.StringRef,
    temporaryDirectoryPath: ?*i8,
    flags: objc.OptionBits,
) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn FSGetTemporaryDirectoryForReplaceObject(originalObject: ?*FSRef, temporaryDirectory: ?*FSRef, flags: objc.OptionBits) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn FSPathGetTemporaryDirectoryForReplaceObject(
    originalObjectPath: ?*i8,
    temporaryDirectoryPath: ?*i8,
    maxPathSize: objc.UInt32,
    flags: objc.OptionBits,
) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn FSRenameUnicode(
    ref: ?*FSRef,
    nameLength: objc.UniCharCount,
    name: ?*objc.UniChar,
    textEncodingHint: TextEncoding,
    newRef: ?*FSRef,
) callconv(.C) objc.OSErr;

pub extern "CoreServices" fn PBRenameUnicodeSync(paramBlock: ?*FSRefParam) callconv(.C) objc.OSErr;

pub extern "CoreServices" fn PBRenameUnicodeAsync(paramBlock: ?*FSRefParam) callconv(.C) void;

pub extern "CoreServices" fn FSGetCatalogInfo(
    ref: ?*FSRef,
    whichInfo: FSCatalogInfoBitmap,
    catalogInfo: ?*FSCatalogInfo,
    outName: ?*objc.HFSUniStr255,
    fsSpec: FSSpecPtr,
    parentRef: ?*FSRef,
) callconv(.C) objc.OSErr;

pub extern "CoreServices" fn PBGetCatalogInfoSync(paramBlock: ?*FSRefParam) callconv(.C) objc.OSErr;

pub extern "CoreServices" fn PBGetCatalogInfoAsync(paramBlock: ?*FSRefParam) callconv(.C) void;

pub extern "CoreServices" fn FSSetCatalogInfo(ref: ?*FSRef, whichInfo: FSCatalogInfoBitmap, catalogInfo: ?*FSCatalogInfo) callconv(.C) objc.OSErr;

pub extern "CoreServices" fn PBSetCatalogInfoSync(paramBlock: ?*FSRefParam) callconv(.C) objc.OSErr;

pub extern "CoreServices" fn PBSetCatalogInfoAsync(paramBlock: ?*FSRefParam) callconv(.C) void;

pub extern "CoreServices" fn FSOpenIterator(container: ?*FSRef, iteratorFlags: FSIteratorFlags, iterator: ?*FSIterator) callconv(.C) objc.OSErr;

pub extern "CoreServices" fn PBOpenIteratorSync(paramBlock: ?*FSCatalogBulkParam) callconv(.C) objc.OSErr;

pub extern "CoreServices" fn PBOpenIteratorAsync(paramBlock: ?*FSCatalogBulkParam) callconv(.C) void;

pub extern "CoreServices" fn FSCloseIterator(iterator: FSIterator) callconv(.C) objc.OSErr;

pub extern "CoreServices" fn PBCloseIteratorSync(paramBlock: ?*FSCatalogBulkParam) callconv(.C) objc.OSErr;

pub extern "CoreServices" fn PBCloseIteratorAsync(paramBlock: ?*FSCatalogBulkParam) callconv(.C) void;

pub extern "CoreServices" fn FSGetCatalogInfoBulk(
    iterator: FSIterator,
    maximumObjects: objc.ItemCount,
    actualObjects: ?*objc.ItemCount,
    containerChanged: ?*objc.Boolean,
    whichInfo: FSCatalogInfoBitmap,
    catalogInfos: ?*FSCatalogInfo,
    refs: ?*FSRef,
    specs: FSSpecPtr,
    names: ?*objc.HFSUniStr255,
) callconv(.C) objc.OSErr;

pub extern "CoreServices" fn PBGetCatalogInfoBulkSync(paramBlock: ?*FSCatalogBulkParam) callconv(.C) objc.OSErr;

pub extern "CoreServices" fn PBGetCatalogInfoBulkAsync(paramBlock: ?*FSCatalogBulkParam) callconv(.C) void;

pub extern "CoreServices" fn FSCatalogSearch(
    iterator: FSIterator,
    searchCriteria: ?*FSSearchParams,
    maximumObjects: objc.ItemCount,
    actualObjects: ?*objc.ItemCount,
    containerChanged: ?*objc.Boolean,
    whichInfo: FSCatalogInfoBitmap,
    catalogInfos: ?*FSCatalogInfo,
    refs: ?*FSRef,
    specs: FSSpecPtr,
    names: ?*objc.HFSUniStr255,
) callconv(.C) objc.OSErr;

pub extern "CoreServices" fn PBCatalogSearchSync(paramBlock: ?*FSCatalogBulkParam) callconv(.C) objc.OSErr;

pub extern "CoreServices" fn PBCatalogSearchAsync(paramBlock: ?*FSCatalogBulkParam) callconv(.C) void;

pub extern "CoreServices" fn FSCreateFileAndOpenForkUnicode(
    parentRef: ?*FSRef,
    nameLength: objc.UniCharCount,
    name: ?*objc.UniChar,
    whichInfo: FSCatalogInfoBitmap,
    catalogInfo: ?*FSCatalogInfo,
    forkNameLength: objc.UniCharCount,
    forkName: ?*objc.UniChar,
    permissions: objc.SInt8,
    forkRefNum: ?*FSIORefNum,
    newRef: ?*FSRef,
) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn PBCreateFileAndOpenForkUnicodeSync(paramBlock: FSRefForkIOParamPtr) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn PBCreateFileAndOpenForkUnicodeAsync(paramBlock: FSRefForkIOParamPtr) callconv(.C) void;

pub extern "CoreServices" fn FSCreateFork(ref: ?*FSRef, forkNameLength: objc.UniCharCount, forkName: ?*objc.UniChar) callconv(.C) objc.OSErr;

pub extern "CoreServices" fn PBCreateForkSync(paramBlock: ?*FSForkIOParam) callconv(.C) objc.OSErr;

pub extern "CoreServices" fn PBCreateForkAsync(paramBlock: ?*FSForkIOParam) callconv(.C) void;

pub extern "CoreServices" fn FSDeleteFork(ref: ?*FSRef, forkNameLength: objc.UniCharCount, forkName: ?*objc.UniChar) callconv(.C) objc.OSErr;

pub extern "CoreServices" fn PBDeleteForkSync(paramBlock: ?*FSForkIOParam) callconv(.C) objc.OSErr;

pub extern "CoreServices" fn PBDeleteForkAsync(paramBlock: ?*FSForkIOParam) callconv(.C) void;

pub extern "CoreServices" fn FSIterateForks(
    ref: ?*FSRef,
    forkIterator: ?*CatPositionRec,
    forkName: ?*objc.HFSUniStr255,
    forkSize: ?*objc.SInt64,
    forkPhysicalSize: ?*objc.UInt64,
) callconv(.C) objc.OSErr;

pub extern "CoreServices" fn PBIterateForksSync(paramBlock: ?*FSForkIOParam) callconv(.C) objc.OSErr;

pub extern "CoreServices" fn PBIterateForksAsync(paramBlock: ?*FSForkIOParam) callconv(.C) void;

pub extern "CoreServices" fn FSOpenFork(
    ref: ?*FSRef,
    forkNameLength: objc.UniCharCount,
    forkName: ?*objc.UniChar,
    permissions: objc.SInt8,
    forkRefNum: ?*FSIORefNum,
) callconv(.C) objc.OSErr;

pub extern "CoreServices" fn PBOpenForkSync(paramBlock: ?*FSForkIOParam) callconv(.C) objc.OSErr;

pub extern "CoreServices" fn PBOpenForkAsync(paramBlock: ?*FSForkIOParam) callconv(.C) void;

pub extern "CoreServices" fn FSReadFork(
    forkRefNum: FSIORefNum,
    positionMode: objc.UInt16,
    positionOffset: objc.SInt64,
    requestCount: objc.ByteCount,
    buffer: ?*anyopaque,
    actualCount: ?*objc.ByteCount,
) callconv(.C) objc.OSErr;

pub extern "CoreServices" fn PBReadForkSync(paramBlock: ?*FSForkIOParam) callconv(.C) objc.OSErr;

pub extern "CoreServices" fn PBReadForkAsync(paramBlock: ?*FSForkIOParam) callconv(.C) void;

pub extern "CoreServices" fn FSWriteFork(
    forkRefNum: FSIORefNum,
    positionMode: objc.UInt16,
    positionOffset: objc.SInt64,
    requestCount: objc.ByteCount,
    buffer: ?*anyopaque,
    actualCount: ?*objc.ByteCount,
) callconv(.C) objc.OSErr;

pub extern "CoreServices" fn PBWriteForkSync(paramBlock: ?*FSForkIOParam) callconv(.C) objc.OSErr;

pub extern "CoreServices" fn PBWriteForkAsync(paramBlock: ?*FSForkIOParam) callconv(.C) void;

pub extern "CoreServices" fn FSGetForkPosition(forkRefNum: FSIORefNum, position: ?*objc.SInt64) callconv(.C) objc.OSErr;

pub extern "CoreServices" fn PBGetForkPositionSync(paramBlock: ?*FSForkIOParam) callconv(.C) objc.OSErr;

pub extern "CoreServices" fn PBGetForkPositionAsync(paramBlock: ?*FSForkIOParam) callconv(.C) void;

pub extern "CoreServices" fn FSSetForkPosition(forkRefNum: FSIORefNum, positionMode: objc.UInt16, positionOffset: objc.SInt64) callconv(.C) objc.OSErr;

pub extern "CoreServices" fn PBSetForkPositionSync(paramBlock: ?*FSForkIOParam) callconv(.C) objc.OSErr;

pub extern "CoreServices" fn PBSetForkPositionAsync(paramBlock: ?*FSForkIOParam) callconv(.C) void;

pub extern "CoreServices" fn FSGetForkSize(forkRefNum: FSIORefNum, forkSize: ?*objc.SInt64) callconv(.C) objc.OSErr;

pub extern "CoreServices" fn PBGetForkSizeSync(paramBlock: ?*FSForkIOParam) callconv(.C) objc.OSErr;

pub extern "CoreServices" fn PBGetForkSizeAsync(paramBlock: ?*FSForkIOParam) callconv(.C) void;

pub extern "CoreServices" fn FSSetForkSize(forkRefNum: FSIORefNum, positionMode: objc.UInt16, positionOffset: objc.SInt64) callconv(.C) objc.OSErr;

pub extern "CoreServices" fn PBSetForkSizeSync(paramBlock: ?*FSForkIOParam) callconv(.C) objc.OSErr;

pub extern "CoreServices" fn PBSetForkSizeAsync(paramBlock: ?*FSForkIOParam) callconv(.C) void;

pub extern "CoreServices" fn FSAllocateFork(
    forkRefNum: FSIORefNum,
    flags: FSAllocationFlags,
    positionMode: objc.UInt16,
    positionOffset: objc.SInt64,
    requestCount: objc.UInt64,
    actualCount: ?*objc.UInt64,
) callconv(.C) objc.OSErr;

pub extern "CoreServices" fn PBAllocateForkSync(paramBlock: ?*FSForkIOParam) callconv(.C) objc.OSErr;

pub extern "CoreServices" fn PBAllocateForkAsync(paramBlock: ?*FSForkIOParam) callconv(.C) void;

pub extern "CoreServices" fn FSFlushFork(forkRefNum: FSIORefNum) callconv(.C) objc.OSErr;

pub extern "CoreServices" fn PBFlushForkSync(paramBlock: ?*FSForkIOParam) callconv(.C) objc.OSErr;

pub extern "CoreServices" fn PBFlushForkAsync(paramBlock: ?*FSForkIOParam) callconv(.C) void;

pub extern "CoreServices" fn FSCloseFork(forkRefNum: FSIORefNum) callconv(.C) objc.OSErr;

pub extern "CoreServices" fn PBCloseForkSync(paramBlock: ?*FSForkIOParam) callconv(.C) objc.OSErr;

pub extern "CoreServices" fn PBCloseForkAsync(paramBlock: ?*FSForkIOParam) callconv(.C) void;

pub extern "CoreServices" fn FSGetForkCBInfo(
    desiredRefNum: FSIORefNum,
    volume: FSVolumeRefNum,
    iterator: ?*i16,
    actualRefNum: ?*FSIORefNum,
    forkInfo: ?*FSForkInfo,
    ref: ?*FSRef,
    outForkName: ?*objc.HFSUniStr255,
) callconv(.C) objc.OSErr;

pub extern "CoreServices" fn PBGetForkCBInfoSync(paramBlock: ?*FSForkCBInfoParam) callconv(.C) objc.OSErr;

pub extern "CoreServices" fn PBGetForkCBInfoAsync(paramBlock: ?*FSForkCBInfoParam) callconv(.C) void;

pub extern "CoreServices" fn FSLockRange(
    forkRefNum: FSIORefNum,
    positionMode: objc.UInt16,
    positionOffset: objc.SInt64,
    requestCount: objc.UInt64,
    rangeStart: ?*objc.UInt64,
) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn PBXLockRangeSync(paramBlock: FSRangeLockParamPtr) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn PBXLockRangeAsync(paramBlock: FSRangeLockParamPtr) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn FSUnlockRange(
    forkRefNum: FSIORefNum,
    positionMode: objc.UInt16,
    positionOffset: objc.SInt64,
    requestCount: objc.UInt64,
    rangeStart: ?*objc.UInt64,
) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn PBXUnlockRangeSync(paramBlock: FSRangeLockParamPtr) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn PBXUnlockRangeAsync(paramBlock: FSRangeLockParamPtr) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn FSGetVolumeInfo(
    volume: FSVolumeRefNum,
    volumeIndex: objc.ItemCount,
    actualVolume: ?*FSVolumeRefNum,
    whichInfo: FSVolumeInfoBitmap,
    info: ?*FSVolumeInfo,
    volumeName: ?*objc.HFSUniStr255,
    rootDirectory: ?*FSRef,
) callconv(.C) objc.OSErr;

pub extern "CoreServices" fn PBGetVolumeInfoSync(paramBlock: ?*FSVolumeInfoParam) callconv(.C) objc.OSErr;

pub extern "CoreServices" fn PBGetVolumeInfoAsync(paramBlock: ?*FSVolumeInfoParam) callconv(.C) void;

pub extern "CoreServices" fn FSSetVolumeInfo(volume: FSVolumeRefNum, whichInfo: FSVolumeInfoBitmap, info: ?*FSVolumeInfo) callconv(.C) objc.OSErr;

pub extern "CoreServices" fn PBSetVolumeInfoSync(paramBlock: ?*FSVolumeInfoParam) callconv(.C) objc.OSErr;

pub extern "CoreServices" fn PBSetVolumeInfoAsync(paramBlock: ?*FSVolumeInfoParam) callconv(.C) void;

pub extern "CoreServices" fn FSGetDataForkName(dataForkName: ?*objc.HFSUniStr255) callconv(.C) objc.OSErr;

pub extern "CoreServices" fn FSGetResourceForkName(resourceForkName: ?*objc.HFSUniStr255) callconv(.C) objc.OSErr;

pub extern "CoreServices" fn FSRefMakePath(ref: ?*FSRef, path: ?*objc.UInt8, pathBufferSize: objc.UInt32) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn FSPathMakeRef(path: ?*objc.UInt8, ref: ?*FSRef, isDirectory: ?*objc.Boolean) callconv(.C) objc.OSStatus;

pub const anon41251 = u32;
pub const anon41251_FSPathMakeRefDefaultOptions: u32 = 0;
pub const anon41251_FSPathMakeRefDoNotFollowLeafSymlink: u32 = 1;

pub extern "CoreServices" fn FSPathMakeRefWithOptions(
    path: ?*objc.UInt8,
    options: objc.OptionBits,
    ref: ?*FSRef,
    isDirectory: ?*objc.Boolean,
) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn FSIsFSRefValid(ref: ?*FSRef) callconv(.C) objc.Boolean;

pub const FNMessage = objc.UInt32;

pub const anon41981 = u32;
pub const anon41981_FNDirectoryModifiedMessage: u32 = 1;

pub extern "CoreServices" fn FNNotify(ref: ?*FSRef, message: FNMessage, flags: objc.OptionBits) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn FNNotifyByPath(path: ?*objc.UInt8, message: FNMessage, flags: objc.OptionBits) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn FNNotifyAll(message: FNMessage, flags: objc.OptionBits) callconv(.C) objc.OSStatus;

pub const OpaqueFNSubscriptionRef = extern struct {};

pub const FNSubscriptionRef = OpaqueFNSubscriptionRef;

pub const anon43161 = u32;
pub const anon43161_FNNoImplicitAllSubscription: u32 = 1;
pub const anon43161_FNNotifyInBackground: u32 = 2;

pub const FNSubscriptionProcPtr = ?*const fn (
    FNMessage,
    objc.OptionBits,
    ?*anyopaque,
    FNSubscriptionRef,
) callconv(.C) void;

pub const FNSubscriptionUPP = FNSubscriptionProcPtr;

pub extern "CoreServices" fn NewFNSubscriptionUPP(userRoutine: FNSubscriptionProcPtr) callconv(.C) FNSubscriptionUPP;

pub extern "CoreServices" fn DisposeFNSubscriptionUPP(userUPP: FNSubscriptionUPP) callconv(.C) void;

pub extern "CoreServices" fn InvokeFNSubscriptionUPP(
    message: FNMessage,
    flags: objc.OptionBits,
    refcon: ?*anyopaque,
    subscription: FNSubscriptionRef,
    userUPP: FNSubscriptionUPP,
) callconv(.C) void;

pub extern "CoreServices" fn FNSubscribe(
    directoryRef: ?*FSRef,
    callback: FNSubscriptionUPP,
    refcon: ?*anyopaque,
    flags: objc.OptionBits,
    subscription: ?*FNSubscriptionRef,
) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn FNSubscribeByPath(
    directoryPath: ?*objc.UInt8,
    callback: FNSubscriptionUPP,
    refcon: ?*anyopaque,
    flags: objc.OptionBits,
    subscription: ?*FNSubscriptionRef,
) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn FNUnsubscribe(subscription: FNSubscriptionRef) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn FNGetDirectoryForSubscription(subscription: FNSubscriptionRef, ref: ?*FSRef) callconv(.C) objc.OSStatus;

pub const anon45341 = u32;
pub const anon45341_AsyncMountInProgress: u32 = 1;
pub const anon45341_AsyncMountComplete: u32 = 2;
pub const anon45341_AsyncUnmountInProgress: u32 = 3;
pub const anon45341_AsyncUnmountComplete: u32 = 4;
pub const anon45341_AsyncEjectInProgress: u32 = 5;
pub const anon45341_AsyncEjectComplete: u32 = 6;

pub const FSMountStatus = objc.UInt32;

pub const FSEjectStatus = objc.UInt32;

pub const FSUnmountStatus = objc.UInt32;

pub const OpaqueFSVolumeOperation = extern struct {};

pub const FSVolumeOperation = OpaqueFSVolumeOperation;

pub const FSVolumeMountProcPtr = ?*const fn (
    FSVolumeOperation,
    ?*anyopaque,
    objc.OSStatus,
    FSVolumeRefNum,
) callconv(.C) void;

pub const FSVolumeUnmountProcPtr = ?*const fn (
    FSVolumeOperation,
    ?*anyopaque,
    objc.OSStatus,
    FSVolumeRefNum,
    objc.pid_t,
) callconv(.C) void;

pub const FSVolumeEjectProcPtr = ?*const fn (
    FSVolumeOperation,
    ?*anyopaque,
    objc.OSStatus,
    FSVolumeRefNum,
    objc.pid_t,
) callconv(.C) void;

pub const FSVolumeMountUPP = FSVolumeMountProcPtr;

pub const FSVolumeUnmountUPP = FSVolumeUnmountProcPtr;

pub const FSVolumeEjectUPP = FSVolumeEjectProcPtr;

pub extern "CoreServices" fn NewFSVolumeMountUPP(userRoutine: FSVolumeMountProcPtr) callconv(.C) FSVolumeMountUPP;

pub extern "CoreServices" fn NewFSVolumeUnmountUPP(userRoutine: FSVolumeUnmountProcPtr) callconv(.C) FSVolumeUnmountUPP;

pub extern "CoreServices" fn NewFSVolumeEjectUPP(userRoutine: FSVolumeEjectProcPtr) callconv(.C) FSVolumeEjectUPP;

pub extern "CoreServices" fn DisposeFSVolumeMountUPP(userUPP: FSVolumeMountUPP) callconv(.C) void;

pub extern "CoreServices" fn DisposeFSVolumeUnmountUPP(userUPP: FSVolumeUnmountUPP) callconv(.C) void;

pub extern "CoreServices" fn DisposeFSVolumeEjectUPP(userUPP: FSVolumeEjectUPP) callconv(.C) void;

pub extern "CoreServices" fn InvokeFSVolumeMountUPP(
    volumeOp: FSVolumeOperation,
    clientData: ?*anyopaque,
    err: objc.OSStatus,
    mountedVolumeRefNum: FSVolumeRefNum,
    userUPP: FSVolumeMountUPP,
) callconv(.C) void;

pub extern "CoreServices" fn InvokeFSVolumeUnmountUPP(
    volumeOp: FSVolumeOperation,
    clientData: ?*anyopaque,
    err: objc.OSStatus,
    volumeRefNum: FSVolumeRefNum,
    dissenter: objc.pid_t,
    userUPP: FSVolumeUnmountUPP,
) callconv(.C) void;

pub extern "CoreServices" fn InvokeFSVolumeEjectUPP(
    volumeOp: FSVolumeOperation,
    clientData: ?*anyopaque,
    err: objc.OSStatus,
    volumeRefNum: FSVolumeRefNum,
    dissenter: objc.pid_t,
    userUPP: FSVolumeEjectUPP,
) callconv(.C) void;

pub const anon47001 = u32;
pub const anon47001_FSMountServerMarkDoNotDisplay: u32 = 1;
pub const anon47001_FSMountServerMountOnMountDir: u32 = 4;
pub const anon47001_FSMountServerSuppressConnectionUI: u32 = 64;

pub const anon47281 = u32;
pub const anon47281_FSMountServerMountWithoutNotification: u32 = 2;

pub const anon47431 = u32;
pub const anon47431_FSEjectVolumeForceEject: u32 = 1;

pub const anon47611 = u32;
pub const anon47611_FSUnmountVolumeForceUnmount: u32 = 1;

pub extern "CoreServices" fn FSCreateVolumeOperation(volumeOp: ?*FSVolumeOperation) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn FSDisposeVolumeOperation(volumeOp: FSVolumeOperation) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn FSMountLocalVolumeSync(
    diskID: core_foundation.StringRef,
    mountDir: core_foundation.URLRef,
    mountedVolumeRefNum: ?*FSVolumeRefNum,
    flags: objc.OptionBits,
) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn FSMountLocalVolumeAsync(
    diskID: core_foundation.StringRef,
    mountDir: core_foundation.URLRef,
    volumeOp: FSVolumeOperation,
    clientData: ?*anyopaque,
    flags: objc.OptionBits,
    callback: FSVolumeMountUPP,
    runloop: core_foundation.RunLoopRef,
    runloopMode: core_foundation.StringRef,
) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn FSMountServerVolumeSync(
    url: core_foundation.URLRef,
    mountDir: core_foundation.URLRef,
    user: core_foundation.StringRef,
    password: core_foundation.StringRef,
    mountedVolumeRefNum: ?*FSVolumeRefNum,
    flags: objc.OptionBits,
) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn FSMountServerVolumeAsync(
    url: core_foundation.URLRef,
    mountDir: core_foundation.URLRef,
    user: core_foundation.StringRef,
    password: core_foundation.StringRef,
    volumeOp: FSVolumeOperation,
    clientData: ?*anyopaque,
    flags: objc.OptionBits,
    callback: FSVolumeMountUPP,
    runloop: core_foundation.RunLoopRef,
    runloopMode: core_foundation.StringRef,
) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn FSGetAsyncMountStatus(
    volumeOp: FSVolumeOperation,
    status: ?*FSMountStatus,
    volumeOpStatus: ?*objc.OSStatus,
    mountedVolumeRefNum: ?*FSVolumeRefNum,
    clientData: ?*?*anyopaque,
) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn FSUnmountVolumeSync(vRefNum: FSVolumeRefNum, flags: objc.OptionBits, dissenter: ?*objc.pid_t) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn FSUnmountVolumeAsync(
    vRefNum: FSVolumeRefNum,
    flags: objc.OptionBits,
    volumeOp: FSVolumeOperation,
    clientData: ?*anyopaque,
    callback: FSVolumeUnmountUPP,
    runloop: core_foundation.RunLoopRef,
    runloopMode: core_foundation.StringRef,
) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn FSGetAsyncUnmountStatus(
    volumeOp: FSVolumeOperation,
    status: ?*FSUnmountStatus,
    volumeOpStatus: ?*objc.OSStatus,
    volumeRefNum: ?*FSVolumeRefNum,
    dissenter: ?*objc.pid_t,
    clientData: ?*?*anyopaque,
) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn FSCancelVolumeOperation(volumeOp: FSVolumeOperation) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn FSEjectVolumeSync(vRefNum: FSVolumeRefNum, flags: objc.OptionBits, dissenter: ?*objc.pid_t) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn FSEjectVolumeAsync(
    vRefNum: FSVolumeRefNum,
    flags: objc.OptionBits,
    volumeOp: FSVolumeOperation,
    clientData: ?*anyopaque,
    callback: FSVolumeEjectUPP,
    runloop: core_foundation.RunLoopRef,
    runloopMode: core_foundation.StringRef,
) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn FSGetAsyncEjectStatus(
    volumeOp: FSVolumeOperation,
    status: ?*FSEjectStatus,
    volumeOpStatus: ?*objc.OSStatus,
    volumeRefNum: ?*FSVolumeRefNum,
    dissenter: ?*objc.pid_t,
    clientData: ?*?*anyopaque,
) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn FSCopyDiskIDForVolume(vRefNum: FSVolumeRefNum, diskID: ?*core_foundation.StringRef) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn FSCopyURLForVolume(vRefNum: FSVolumeRefNum, url: ?*core_foundation.URLRef) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn FSGetVolumeForDiskID(diskID: core_foundation.StringRef, vRefNum: ?*FSVolumeRefNum) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn FSCopyDADiskForVolume(vRefNum: FSVolumeRefNum, disk: ?*disk_arbitration.DiskRef) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn FSGetVolumeForDADisk(disk: disk_arbitration.DiskRef, vRefNum: ?*FSVolumeRefNum) callconv(.C) objc.OSStatus;

pub const __FSFileOperation = extern struct {};

pub const FSFileOperationRef = __FSFileOperation;

pub const FSFileOperationStage = objc.UInt32;

pub const FSFileOperationClientContext = extern struct {
    version: core_foundation.Index,
    info: ?*anyopaque,
    retain: core_foundation.AllocatorRetainCallBack,
    release: core_foundation.AllocatorReleaseCallBack,
    copyDescription: core_foundation.AllocatorCopyDescriptionCallBack,
};

pub const FSFileOperationStatusProcPtr = ?*const fn (
    FSFileOperationRef,
    ?*FSRef,
    FSFileOperationStage,
    objc.OSStatus,
    core_foundation.DictionaryRef,
    ?*anyopaque,
) callconv(.C) void;

pub const FSPathFileOperationStatusProcPtr = ?*const fn (
    FSFileOperationRef,
    ?*i8,
    FSFileOperationStage,
    objc.OSStatus,
    core_foundation.DictionaryRef,
    ?*anyopaque,
) callconv(.C) void;

pub const anon55751 = u32;
pub const anon55751_FSFileOperationDefaultOptions: u32 = 0;
pub const anon55751_FSFileOperationOverwrite: u32 = 1;
pub const anon55751_FSFileOperationSkipSourcePermissionErrors: u32 = 2;
pub const anon55751_FSFileOperationDoNotMoveAcrossVolumes: u32 = 4;
pub const anon55751_FSFileOperationSkipPreflight: u32 = 8;

pub const anon56181 = u32;
pub const anon56181_FSOperationStageUndefined: u32 = 0;
pub const anon56181_FSOperationStagePreflighting: u32 = 1;
pub const anon56181_FSOperationStageRunning: u32 = 2;
pub const anon56181_FSOperationStageComplete: u32 = 3;

pub extern "CoreServices" fn FSCopyObjectSync(
    source: ?*FSRef,
    destDir: ?*FSRef,
    destName: core_foundation.StringRef,
    target: ?*FSRef,
    options: objc.OptionBits,
) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn FSMoveObjectSync(
    source: ?*FSRef,
    destDir: ?*FSRef,
    destName: core_foundation.StringRef,
    target: ?*FSRef,
    options: objc.OptionBits,
) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn FSMoveObjectToTrashSync(source: ?*FSRef, target: ?*FSRef, options: objc.OptionBits) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn FSPathCopyObjectSync(
    sourcePath: ?*i8,
    destDirPath: ?*i8,
    destName: core_foundation.StringRef,
    targetPath: ?*?*i8,
    options: objc.OptionBits,
) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn FSPathMoveObjectSync(
    sourcePath: ?*i8,
    destDirPath: ?*i8,
    destName: core_foundation.StringRef,
    targetPath: ?*?*i8,
    options: objc.OptionBits,
) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn FSPathMoveObjectToTrashSync(sourcePath: ?*i8, targetPath: ?*?*i8, options: objc.OptionBits) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn FSFileOperationGetTypeID() callconv(.C) core_foundation.TypeID;

pub extern "CoreServices" fn FSFileOperationCreate(alloc: core_foundation.AllocatorRef) callconv(.C) FSFileOperationRef;

pub extern "CoreServices" fn FSFileOperationScheduleWithRunLoop(fileOp: FSFileOperationRef, runLoop: core_foundation.RunLoopRef, runLoopMode: core_foundation.StringRef) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn FSFileOperationUnscheduleFromRunLoop(fileOp: FSFileOperationRef, runLoop: core_foundation.RunLoopRef, runLoopMode: core_foundation.StringRef) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn FSCopyObjectAsync(
    fileOp: FSFileOperationRef,
    source: ?*FSRef,
    destDir: ?*FSRef,
    destName: core_foundation.StringRef,
    flags: objc.OptionBits,
    callback: FSFileOperationStatusProcPtr,
    statusChangeInterval: core_foundation.TimeInterval,
    clientContext: ?*FSFileOperationClientContext,
) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn FSMoveObjectAsync(
    fileOp: FSFileOperationRef,
    source: ?*FSRef,
    destDir: ?*FSRef,
    destName: core_foundation.StringRef,
    flags: objc.OptionBits,
    callback: FSFileOperationStatusProcPtr,
    statusChangeInterval: core_foundation.TimeInterval,
    clientContext: ?*FSFileOperationClientContext,
) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn FSMoveObjectToTrashAsync(
    fileOp: FSFileOperationRef,
    source: ?*FSRef,
    flags: objc.OptionBits,
    callback: FSFileOperationStatusProcPtr,
    statusChangeInterval: core_foundation.TimeInterval,
    clientContext: ?*FSFileOperationClientContext,
) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn FSPathCopyObjectAsync(
    fileOp: FSFileOperationRef,
    sourcePath: ?*i8,
    destDirPath: ?*i8,
    destName: core_foundation.StringRef,
    flags: objc.OptionBits,
    callback: FSPathFileOperationStatusProcPtr,
    statusChangeInterval: core_foundation.TimeInterval,
    clientContext: ?*FSFileOperationClientContext,
) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn FSPathMoveObjectAsync(
    fileOp: FSFileOperationRef,
    sourcePath: ?*i8,
    destDirPath: ?*i8,
    destName: core_foundation.StringRef,
    flags: objc.OptionBits,
    callback: FSPathFileOperationStatusProcPtr,
    statusChangeInterval: core_foundation.TimeInterval,
    clientContext: ?*FSFileOperationClientContext,
) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn FSPathMoveObjectToTrashAsync(
    fileOp: FSFileOperationRef,
    sourcePath: ?*i8,
    flags: objc.OptionBits,
    callback: FSPathFileOperationStatusProcPtr,
    statusChangeInterval: core_foundation.TimeInterval,
    clientContext: ?*FSFileOperationClientContext,
) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn FSFileOperationCancel(fileOp: FSFileOperationRef) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn FSFileOperationCopyStatus(
    fileOp: FSFileOperationRef,
    currentItem: ?*FSRef,
    stage: ?*FSFileOperationStage,
    @"error": ?*objc.OSStatus,
    statusDictionary: ?*core_foundation.DictionaryRef,
    info: ?*?*anyopaque,
) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn FSPathFileOperationCopyStatus(
    fileOp: FSFileOperationRef,
    currentItem: ?*?*i8,
    stage: ?*FSFileOperationStage,
    @"error": ?*objc.OSStatus,
    statusDictionary: ?*core_foundation.DictionaryRef,
    info: ?*?*anyopaque,
) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn FSCreateStringFromHFSUniStr(alloc: core_foundation.AllocatorRef, uniStr: ?*objc.HFSUniStr255) callconv(.C) core_foundation.StringRef;

pub extern "CoreServices" fn FSGetHFSUniStrFromString(theString: core_foundation.StringRef, uniStr: ?*objc.HFSUniStr255) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn FSFileSecurityGetTypeID() callconv(.C) core_foundation.TypeID;

pub extern "CoreServices" fn FSFileSecurityCreate(alloc: core_foundation.AllocatorRef) callconv(.C) FSFileSecurityRef;

pub extern "CoreServices" fn FSFileSecurityCreateWithFSPermissionInfo(alloc: core_foundation.AllocatorRef, permissions: ?*FSPermissionInfo) callconv(.C) FSFileSecurityRef;

pub extern "CoreServices" fn FSFileSecurityRefCreateCopy(alloc: core_foundation.AllocatorRef, fileSec: FSFileSecurityRef) callconv(.C) FSFileSecurityRef;

pub extern "CoreServices" fn FSFileSecurityGetOwnerUUID(fileSec: FSFileSecurityRef, owner: ?*core_foundation.UUIDBytes) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn FSFileSecuritySetOwnerUUID(fileSec: FSFileSecurityRef, owner: ?*core_foundation.UUIDBytes) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn FSFileSecurityGetGroupUUID(fileSec: FSFileSecurityRef, group: ?*core_foundation.UUIDBytes) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn FSFileSecuritySetGroupUUID(fileSec: FSFileSecurityRef, group: ?*core_foundation.UUIDBytes) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn FSFileSecurityCopyAccessControlList(fileSec: FSFileSecurityRef, accessControlList: ?*objc.acl_t) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn FSFileSecuritySetAccessControlList(fileSec: FSFileSecurityRef, accessControlList: objc.acl_t) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn FSFileSecurityGetOwner(fileSec: FSFileSecurityRef, owner: ?*objc.UInt32) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn FSFileSecuritySetOwner(fileSec: FSFileSecurityRef, owner: objc.UInt32) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn FSFileSecurityGetGroup(fileSec: FSFileSecurityRef, group: ?*objc.UInt32) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn FSFileSecuritySetGroup(fileSec: FSFileSecurityRef, group: objc.UInt32) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn FSFileSecurityGetMode(fileSec: FSFileSecurityRef, mode: ?*objc.UInt16) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn FSFileSecuritySetMode(fileSec: FSFileSecurityRef, mode: objc.UInt16) callconv(.C) objc.OSStatus;

pub const anon70501 = u32;
pub const anon70501_pleaseCacheBit: u32 = 4;
pub const anon70501_pleaseCacheMask: u32 = 16;
pub const anon70501_noCacheBit: u32 = 5;
pub const anon70501_noCacheMask: u32 = 32;
pub const anon70501_rdVerifyBit: u32 = 6;
pub const anon70501_rdVerifyMask: u32 = 64;
pub const anon70501_rdVerify: u32 = 64;
pub const anon70501_forceReadBit: u32 = 6;
pub const anon70501_forceReadMask: u32 = 64;
pub const anon70501_newLineBit: u32 = 7;
pub const anon70501_newLineMask: u32 = 128;
pub const anon70501_newLineCharMask: u32 = 65280;

pub const anon70681 = u32;
pub const anon70681_OwnerID2Name: u32 = 1;
pub const anon70681_GroupID2Name: u32 = 2;
pub const anon70681_OwnerName2ID: u32 = 3;
pub const anon70681_GroupName2ID: u32 = 4;
pub const anon70681_ReturnNextUser: u32 = 1;
pub const anon70681_ReturnNextGroup: u32 = 2;
pub const anon70681_ReturnNextUG: u32 = 3;

pub const anon70791 = u32;
pub const anon70791_VCBFlagsIdleFlushBit: u32 = 3;
pub const anon70791_VCBFlagsIdleFlushMask: u32 = 8;
pub const anon70791_VCBFlagsHFSPlusAPIsBit: u32 = 4;
pub const anon70791_VCBFlagsHFSPlusAPIsMask: u32 = 16;
pub const anon70791_VCBFlagsHardwareGoneBit: u32 = 5;
pub const anon70791_VCBFlagsHardwareGoneMask: u32 = 32;
pub const anon70791_VCBFlagsVolumeDirtyBit: u32 = 15;
pub const anon70791_VCBFlagsVolumeDirtyMask: u32 = 32768;

pub const anon70911 = u32;
pub const anon70911_ioVAtrbDefaultVolumeBit: u32 = 5;
pub const anon70911_ioVAtrbDefaultVolumeMask: u32 = 32;
pub const anon70911_ioVAtrbFilesOpenBit: u32 = 6;
pub const anon70911_ioVAtrbFilesOpenMask: u32 = 64;
pub const anon70911_ioVAtrbHardwareLockedBit: u32 = 7;
pub const anon70911_ioVAtrbHardwareLockedMask: u32 = 128;
pub const anon70911_ioVAtrbSoftwareLockedBit: u32 = 15;
pub const anon70911_ioVAtrbSoftwareLockedMask: u32 = 32768;

pub const anon71031 = u32;
pub const anon71031_ioFlAttribLockedBit: u32 = 0;
pub const anon71031_ioFlAttribLockedMask: u32 = 1;
pub const anon71031_ioFlAttribResOpenBit: u32 = 2;
pub const anon71031_ioFlAttribResOpenMask: u32 = 4;
pub const anon71031_ioFlAttribDataOpenBit: u32 = 3;
pub const anon71031_ioFlAttribDataOpenMask: u32 = 8;
pub const anon71031_ioFlAttribDirBit: u32 = 4;
pub const anon71031_ioFlAttribDirMask: u32 = 16;
pub const anon71031_ioDirFlg: u32 = 4;
pub const anon71031_ioDirMask: u32 = 16;
pub const anon71031_ioFlAttribCopyProtBit: u32 = 6;
pub const anon71031_ioFlAttribCopyProtMask: u32 = 64;
pub const anon71031_ioFlAttribFileOpenBit: u32 = 7;
pub const anon71031_ioFlAttribFileOpenMask: u32 = 128;
pub const anon71031_ioFlAttribInSharedBit: u32 = 2;
pub const anon71031_ioFlAttribInSharedMask: u32 = 4;
pub const anon71031_ioFlAttribMountedBit: u32 = 3;
pub const anon71031_ioFlAttribMountedMask: u32 = 8;
pub const anon71031_ioFlAttribSharePointBit: u32 = 5;
pub const anon71031_ioFlAttribSharePointMask: u32 = 32;

pub const anon71311 = u32;
pub const anon71311_ioFCBWriteBit: u32 = 8;
pub const anon71311_ioFCBWriteMask: u32 = 256;
pub const anon71311_ioFCBResourceBit: u32 = 9;
pub const anon71311_ioFCBResourceMask: u32 = 512;
pub const anon71311_ioFCBWriteLockedBit: u32 = 10;
pub const anon71311_ioFCBWriteLockedMask: u32 = 1024;
pub const anon71311_ioFCBLargeFileBit: u32 = 11;
pub const anon71311_ioFCBLargeFileMask: u32 = 2048;
pub const anon71311_ioFCBSharedWriteBit: u32 = 12;
pub const anon71311_ioFCBSharedWriteMask: u32 = 4096;
pub const anon71311_ioFCBFileLockedBit: u32 = 13;
pub const anon71311_ioFCBFileLockedMask: u32 = 8192;
pub const anon71311_ioFCBOwnClumpBit: u32 = 14;
pub const anon71311_ioFCBOwnClumpMask: u32 = 16384;
pub const anon71311_ioFCBModifiedBit: u32 = 15;
pub const anon71311_ioFCBModifiedMask: u32 = 32768;

pub const anon71531 = u32;
pub const anon71531_ForkInfoFlagsWriteBit: u32 = 0;
pub const anon71531_ForkInfoFlagsWriteMask: u32 = 1;
pub const anon71531_ForkInfoFlagsResourceBit: u32 = 1;
pub const anon71531_ForkInfoFlagsResourceMask: u32 = 2;
pub const anon71531_ForkInfoFlagsWriteLockedBit: u32 = 2;
pub const anon71531_ForkInfoFlagsWriteLockedMask: u32 = 4;
pub const anon71531_ForkInfoFlagsLargeFileBit: u32 = 3;
pub const anon71531_ForkInfoFlagsLargeFileMask: u32 = 8;
pub const anon71531_ForkInfoFlagsSharedWriteBit: u32 = 4;
pub const anon71531_ForkInfoFlagsSharedWriteMask: u32 = 16;
pub const anon71531_ForkInfoFlagsFileLockedBit: u32 = 5;
pub const anon71531_ForkInfoFlagsFileLockedMask: u32 = 32;
pub const anon71531_ForkInfoFlagsOwnClumpBit: u32 = 6;
pub const anon71531_ForkInfoFlagsOwnClumpMask: u32 = 64;
pub const anon71531_ForkInfoFlagsModifiedBit: u32 = 7;
pub const anon71531_ForkInfoFlagsModifiedMask: u32 = 128;

pub const anon71741 = u32;
pub const anon71741_ioACUserNoSeeFolderBit: u32 = 0;
pub const anon71741_ioACUserNoSeeFolderMask: u32 = 1;
pub const anon71741_ioACUserNoSeeFilesBit: u32 = 1;
pub const anon71741_ioACUserNoSeeFilesMask: u32 = 2;
pub const anon71741_ioACUserNoMakeChangesBit: u32 = 2;
pub const anon71741_ioACUserNoMakeChangesMask: u32 = 4;
pub const anon71741_ioACUserNotOwnerBit: u32 = 7;
pub const anon71741_ioACUserNotOwnerMask: u32 = 128;

pub const anon71861 = i32;
pub const anon71861_ioACAccessOwnerBit: i32 = 31;
pub const anon71861_ioACAccessOwnerMask: i32 = -2147483648;
pub const anon71861_ioACAccessBlankAccessBit: i32 = 28;
pub const anon71861_ioACAccessBlankAccessMask: i32 = 268435456;
pub const anon71861_ioACAccessUserWriteBit: i32 = 26;
pub const anon71861_ioACAccessUserWriteMask: i32 = 67108864;
pub const anon71861_ioACAccessUserReadBit: i32 = 25;
pub const anon71861_ioACAccessUserReadMask: i32 = 33554432;
pub const anon71861_ioACAccessUserSearchBit: i32 = 24;
pub const anon71861_ioACAccessUserSearchMask: i32 = 16777216;
pub const anon71861_ioACAccessEveryoneWriteBit: i32 = 18;
pub const anon71861_ioACAccessEveryoneWriteMask: i32 = 262144;
pub const anon71861_ioACAccessEveryoneReadBit: i32 = 17;
pub const anon71861_ioACAccessEveryoneReadMask: i32 = 131072;
pub const anon71861_ioACAccessEveryoneSearchBit: i32 = 16;
pub const anon71861_ioACAccessEveryoneSearchMask: i32 = 65536;
pub const anon71861_ioACAccessGroupWriteBit: i32 = 10;
pub const anon71861_ioACAccessGroupWriteMask: i32 = 1024;
pub const anon71861_ioACAccessGroupReadBit: i32 = 9;
pub const anon71861_ioACAccessGroupReadMask: i32 = 512;
pub const anon71861_ioACAccessGroupSearchBit: i32 = 8;
pub const anon71861_ioACAccessGroupSearchMask: i32 = 256;
pub const anon71861_ioACAccessOwnerWriteBit: i32 = 2;
pub const anon71861_ioACAccessOwnerWriteMask: i32 = 4;
pub const anon71861_ioACAccessOwnerReadBit: i32 = 1;
pub const anon71861_ioACAccessOwnerReadMask: i32 = 2;
pub const anon71861_ioACAccessOwnerSearchBit: i32 = 0;
pub const anon71861_ioACAccessOwnerSearchMask: i32 = 1;
pub const anon71861_fullPrivileges: i32 = 458759;
pub const anon71861_ownerPrivileges: i32 = 7;

pub extern "CoreServices" fn FSGetVolumeParms(volume: FSVolumeRefNum, buffer: ?*GetVolParmsInfoBuffer, bufferSize: objc.ByteCount) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn FSGetVolumeMountInfoSize(volume: FSVolumeRefNum, size: ?*objc.ByteCount) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn FSGetVolumeMountInfo(
    volume: FSVolumeRefNum,
    buffer: objc.BytePtr,
    bufferSize: objc.ByteCount,
    actualSize: ?*objc.ByteCount,
) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn FSVolumeMount(buffer: objc.BytePtr, mountedVolume: ?*FSVolumeRefNum) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn FSFlushVolume(vRefNum: FSVolumeRefNum) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn PBFlushVolumeSync(paramBlock: FSRefParamPtr) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn PBFlushVolumeAsync(paramBlock: FSRefParamPtr) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn PBFSCopyFileSync(paramBlock: FSRefParamPtr) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn PBFSCopyFileAsync(paramBlock: FSRefParamPtr) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn FSResolveNodeID(volume: FSVolumeRefNum, nodeID: objc.UInt32, newRef: FSRefPtr) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn PBFSResolveNodeIDSync(paramBlock: FSRefParamPtr) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn PBFSResolveNodeIDAsync(paramBlock: FSRefParamPtr) callconv(.C) objc.OSStatus;

pub const ResID = objc.SInt16;

pub const ResAttributes = objc.SInt16;

pub const ResFileAttributes = objc.SInt16;

pub const ResourceCount = objc.SInt16;

pub const ResourceIndex = objc.SInt16;

pub const ResFileRefNum = FSIORefNum;

pub const anon721 = u32;
pub const anon721_mapReadOnly: u32 = 128;
pub const anon721_mapCompact: u32 = 64;
pub const anon721_mapChanged: u32 = 32;
pub const anon721_LaunchToGetTerminology: u32 = 32768;
pub const anon721_DontFindAppBySignature: u32 = 16384;
pub const anon721_AlwaysSendSubject: u32 = 8192;
pub const anon721_CSIdentityQueryGenerateUpdateEvents: u32 = 1;
pub const anon721_CSIdentityQueryIncludeHiddenIdentities: u32 = 2;

pub const anon791 = i32;
pub const anon791_ResFileNotOpened: i32 = -1;
pub const anon791_SystemResFile: i32 = 0;
pub const anon791_NewSuspend: i32 = 1;
pub const anon791_UsePremadeThread: i32 = 2;
pub const anon791_CreateIfNeeded: i32 = 4;
pub const anon791_FPUNotNeeded: i32 = 8;
pub const anon791_ExactMatchThread: i32 = 16;
pub const anon791_ReadExtensionTermsMask: i32 = 32768;
pub const anon791_eyReplyPortAttr: i32 = 1919250544;
pub const anon791_CSSM_MDS_BASE_ERROR: i32 = -2147414016;
pub const anon791_CSSM_MDS_PRIVATE_ERROR: i32 = -2147412992;
pub const anon791_noCalls: i32 = 1;
pub const anon791_noRequest: i32 = 2;
pub const anon791_slpQType: i32 = 16;
pub const anon791_sleepQType: i32 = 16;

pub const ResErrProcPtr = ?*const fn (objc.OSErr) callconv(.C) void;

pub const ResErrUPP = ResErrProcPtr;

pub extern "CoreServices" fn NewResErrUPP(userRoutine: ResErrProcPtr) callconv(.C) ResErrUPP;

pub extern "CoreServices" fn DisposeResErrUPP(userUPP: ResErrUPP) callconv(.C) void;

pub extern "CoreServices" fn InvokeResErrUPP(thErr: objc.OSErr, userUPP: ResErrUPP) callconv(.C) void;

pub const ResourceEndianFilterPtr = objc.OSErr;

pub extern "CoreServices" fn CloseResFile(refNum: ResFileRefNum) callconv(.C) void;

pub extern "CoreServices" fn ResError() callconv(.C) objc.OSErr;

pub extern "CoreServices" fn CurResFile() callconv(.C) ResFileRefNum;

pub extern "CoreServices" fn HomeResFile(theResource: objc.Handle) callconv(.C) ResFileRefNum;

pub extern "CoreServices" fn UseResFile(refNum: ResFileRefNum) callconv(.C) void;

pub extern "CoreServices" fn CountTypes() callconv(.C) ResourceCount;

pub extern "CoreServices" fn Count1Types() callconv(.C) ResourceCount;

pub extern "CoreServices" fn GetIndType(theType: ?*objc.ResType, itemIndex: ResourceIndex) callconv(.C) void;

pub extern "CoreServices" fn Get1IndType(theType: ?*objc.ResType, itemIndex: ResourceIndex) callconv(.C) void;

pub extern "CoreServices" fn SetResLoad(load: objc.Boolean) callconv(.C) void;

pub extern "CoreServices" fn CountResources(theType: objc.ResType) callconv(.C) ResourceCount;

pub extern "CoreServices" fn Count1Resources(theType: objc.ResType) callconv(.C) ResourceCount;

pub extern "CoreServices" fn GetIndResource(theType: objc.ResType, itemIndex: ResourceIndex) callconv(.C) objc.Handle;

pub extern "CoreServices" fn Get1IndResource(theType: objc.ResType, itemIndex: ResourceIndex) callconv(.C) objc.Handle;

pub extern "CoreServices" fn GetResource(theType: objc.ResType, theID: ResID) callconv(.C) objc.Handle;

pub extern "CoreServices" fn Get1Resource(theType: objc.ResType, theID: ResID) callconv(.C) objc.Handle;

pub extern "CoreServices" fn GetNamedResource(theType: objc.ResType, name: objc.ConstStr255Param) callconv(.C) objc.Handle;

pub extern "CoreServices" fn Get1NamedResource(theType: objc.ResType, name: objc.ConstStr255Param) callconv(.C) objc.Handle;

pub extern "CoreServices" fn LoadResource(theResource: objc.Handle) callconv(.C) void;

pub extern "CoreServices" fn ReleaseResource(theResource: objc.Handle) callconv(.C) void;

pub extern "CoreServices" fn DetachResource(theResource: objc.Handle) callconv(.C) void;

pub extern "CoreServices" fn UniqueID(theType: objc.ResType) callconv(.C) ResID;

pub extern "CoreServices" fn Unique1ID(theType: objc.ResType) callconv(.C) ResID;

pub extern "CoreServices" fn GetResAttrs(theResource: objc.Handle) callconv(.C) ResAttributes;

pub extern "CoreServices" fn GetResInfo(
    theResource: objc.Handle,
    theID: ?*ResID,
    theType: ?*objc.ResType,
    name: objc.Str255,
) callconv(.C) void;

pub extern "CoreServices" fn SetResInfo(theResource: objc.Handle, theID: ResID, name: objc.ConstStr255Param) callconv(.C) void;

pub extern "CoreServices" fn AddResource(
    theData: objc.Handle,
    theType: objc.ResType,
    theID: ResID,
    name: objc.ConstStr255Param,
) callconv(.C) void;

pub extern "CoreServices" fn GetResourceSizeOnDisk(theResource: objc.Handle) callconv(.C) i64;

pub extern "CoreServices" fn GetMaxResourceSize(theResource: objc.Handle) callconv(.C) i64;

pub extern "CoreServices" fn SetResAttrs(theResource: objc.Handle, attrs: ResAttributes) callconv(.C) void;

pub extern "CoreServices" fn ChangedResource(theResource: objc.Handle) callconv(.C) void;

pub extern "CoreServices" fn RemoveResource(theResource: objc.Handle) callconv(.C) void;

pub extern "CoreServices" fn UpdateResFile(refNum: ResFileRefNum) callconv(.C) void;

pub extern "CoreServices" fn WriteResource(theResource: objc.Handle) callconv(.C) void;

pub extern "CoreServices" fn SetResPurge(install: objc.Boolean) callconv(.C) void;

pub extern "CoreServices" fn GetResFileAttrs(refNum: ResFileRefNum) callconv(.C) ResFileAttributes;

pub extern "CoreServices" fn SetResFileAttrs(refNum: ResFileRefNum, attrs: ResFileAttributes) callconv(.C) void;

pub extern "CoreServices" fn ReadPartialResource(
    theResource: objc.Handle,
    offset: i64,
    buffer: ?*anyopaque,
    count: i64,
) callconv(.C) void;

pub extern "CoreServices" fn WritePartialResource(
    theResource: objc.Handle,
    offset: i64,
    buffer: ?*anyopaque,
    count: i64,
) callconv(.C) void;

pub extern "CoreServices" fn SetResourceSize(theResource: objc.Handle, newSize: i64) callconv(.C) void;

pub extern "CoreServices" fn GetNextFOND(fondHandle: objc.Handle) callconv(.C) objc.Handle;

pub const RsrcChainLocation = objc.SInt16;

pub const anon8151 = u32;
pub const anon8151_RsrcChainBelowSystemMap: u32 = 0;
pub const anon8151_RsrcChainBelowApplicationMap: u32 = 1;
pub const anon8151_RsrcChainAboveApplicationMap: u32 = 2;
pub const anon8151_RsrcChainAboveAllMaps: u32 = 4;

pub extern "CoreServices" fn InsertResourceFile(refNum: ResFileRefNum, where: RsrcChainLocation) callconv(.C) objc.OSErr;

pub extern "CoreServices" fn DetachResourceFile(refNum: ResFileRefNum) callconv(.C) objc.OSErr;

pub extern "CoreServices" fn GetTopResourceFile(refNum: ?*ResFileRefNum) callconv(.C) objc.OSErr;

pub extern "CoreServices" fn GetNextResourceFile(curRefNum: ResFileRefNum, nextRefNum: ?*ResFileRefNum) callconv(.C) objc.OSErr;

pub extern "CoreServices" fn FSOpenResFile(ref: ?*FSRef, permission: objc.SInt8) callconv(.C) ResFileRefNum;

pub extern "CoreServices" fn FSCreateResFile(
    parentRef: ?*FSRef,
    nameLength: objc.UniCharCount,
    name: ?*objc.UniChar,
    whichInfo: FSCatalogInfoBitmap,
    catalogInfo: ?*FSCatalogInfo,
    newRef: ?*FSRef,
    newSpec: FSSpecPtr,
) callconv(.C) void;

pub extern "CoreServices" fn FSResourceFileAlreadyOpen(resourceFileRef: ?*FSRef, inChain: ?*objc.Boolean, refNum: ?*ResFileRefNum) callconv(.C) objc.Boolean;

pub extern "CoreServices" fn FSOpenOrphanResFile(ref: ?*FSRef, permission: objc.SignedByte, refNum: ?*ResFileRefNum) callconv(.C) objc.OSErr;

pub extern "CoreServices" fn FSCreateResourceFile(
    parentRef: ?*FSRef,
    nameLength: objc.UniCharCount,
    name: ?*objc.UniChar,
    whichInfo: FSCatalogInfoBitmap,
    catalogInfo: ?*FSCatalogInfo,
    forkNameLength: objc.UniCharCount,
    forkName: ?*objc.UniChar,
    newRef: ?*FSRef,
    newSpec: FSSpecPtr,
) callconv(.C) objc.OSErr;

pub extern "CoreServices" fn FSCreateResourceFork(
    ref: ?*FSRef,
    forkNameLength: objc.UniCharCount,
    forkName: ?*objc.UniChar,
    flags: objc.UInt32,
) callconv(.C) objc.OSErr;

pub extern "CoreServices" fn FSOpenResourceFile(
    ref: ?*FSRef,
    forkNameLength: objc.UniCharCount,
    forkName: ?*objc.UniChar,
    permissions: objc.SInt8,
    refNum: ?*ResFileRefNum,
) callconv(.C) objc.OSErr;

pub const anon471 = u32;
pub const anon471_AppleManufacturer: u32 = 1634758764;
pub const anon471_ComponentResourceType: u32 = 1953001063;
pub const anon471_ComponentAliasResourceType: u32 = 1952999265;
pub const anon471_SSL_NULL_WITH_NULL_NULL: u32 = 0;
pub const anon471_SSL_RSA_WITH_NULL_MD5: u32 = 1;
pub const anon471_SSL_RSA_WITH_NULL_SHA: u32 = 2;
pub const anon471_SSL_RSA_EXPORT_WITH_RC4_40_MD5: u32 = 3;
pub const anon471_SSL_RSA_WITH_RC4_128_MD5: u32 = 4;
pub const anon471_SSL_RSA_WITH_RC4_128_SHA: u32 = 5;
pub const anon471_SSL_RSA_EXPORT_WITH_RC2_CBC_40_MD5: u32 = 6;
pub const anon471_SSL_RSA_WITH_IDEA_CBC_SHA: u32 = 7;
pub const anon471_SSL_RSA_EXPORT_WITH_DES40_CBC_SHA: u32 = 8;
pub const anon471_SSL_RSA_WITH_DES_CBC_SHA: u32 = 9;
pub const anon471_SSL_RSA_WITH_3DES_EDE_CBC_SHA: u32 = 10;
pub const anon471_SSL_DH_DSS_EXPORT_WITH_DES40_CBC_SHA: u32 = 11;
pub const anon471_SSL_DH_DSS_WITH_DES_CBC_SHA: u32 = 12;
pub const anon471_SSL_DH_DSS_WITH_3DES_EDE_CBC_SHA: u32 = 13;
pub const anon471_SSL_DH_RSA_EXPORT_WITH_DES40_CBC_SHA: u32 = 14;
pub const anon471_SSL_DH_RSA_WITH_DES_CBC_SHA: u32 = 15;
pub const anon471_SSL_DH_RSA_WITH_3DES_EDE_CBC_SHA: u32 = 16;
pub const anon471_SSL_DHE_DSS_EXPORT_WITH_DES40_CBC_SHA: u32 = 17;
pub const anon471_SSL_DHE_DSS_WITH_DES_CBC_SHA: u32 = 18;
pub const anon471_SSL_DHE_DSS_WITH_3DES_EDE_CBC_SHA: u32 = 19;
pub const anon471_SSL_DHE_RSA_EXPORT_WITH_DES40_CBC_SHA: u32 = 20;
pub const anon471_SSL_DHE_RSA_WITH_DES_CBC_SHA: u32 = 21;
pub const anon471_SSL_DHE_RSA_WITH_3DES_EDE_CBC_SHA: u32 = 22;
pub const anon471_SSL_DH_anon_EXPORT_WITH_RC4_40_MD5: u32 = 23;
pub const anon471_SSL_DH_anon_WITH_RC4_128_MD5: u32 = 24;
pub const anon471_SSL_DH_anon_EXPORT_WITH_DES40_CBC_SHA: u32 = 25;
pub const anon471_SSL_DH_anon_WITH_DES_CBC_SHA: u32 = 26;
pub const anon471_SSL_DH_anon_WITH_3DES_EDE_CBC_SHA: u32 = 27;
pub const anon471_SSL_FORTEZZA_DMS_WITH_NULL_SHA: u32 = 28;
pub const anon471_SSL_FORTEZZA_DMS_WITH_FORTEZZA_CBC_SHA: u32 = 29;
pub const anon471_TLS_RSA_WITH_AES_128_CBC_SHA: u32 = 47;
pub const anon471_TLS_DH_DSS_WITH_AES_128_CBC_SHA: u32 = 48;
pub const anon471_TLS_DH_RSA_WITH_AES_128_CBC_SHA: u32 = 49;
pub const anon471_TLS_DHE_DSS_WITH_AES_128_CBC_SHA: u32 = 50;
pub const anon471_TLS_DHE_RSA_WITH_AES_128_CBC_SHA: u32 = 51;
pub const anon471_TLS_DH_anon_WITH_AES_128_CBC_SHA: u32 = 52;
pub const anon471_TLS_RSA_WITH_AES_256_CBC_SHA: u32 = 53;
pub const anon471_TLS_DH_DSS_WITH_AES_256_CBC_SHA: u32 = 54;
pub const anon471_TLS_DH_RSA_WITH_AES_256_CBC_SHA: u32 = 55;
pub const anon471_TLS_DHE_DSS_WITH_AES_256_CBC_SHA: u32 = 56;
pub const anon471_TLS_DHE_RSA_WITH_AES_256_CBC_SHA: u32 = 57;
pub const anon471_TLS_DH_anon_WITH_AES_256_CBC_SHA: u32 = 58;
pub const anon471_TLS_ECDH_ECDSA_WITH_NULL_SHA: u32 = -16383;
pub const anon471_TLS_ECDH_ECDSA_WITH_RC4_128_SHA: u32 = -16382;
pub const anon471_TLS_ECDH_ECDSA_WITH_3DES_EDE_CBC_SHA: u32 = -16381;
pub const anon471_TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA: u32 = -16380;
pub const anon471_TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA: u32 = -16379;
pub const anon471_TLS_ECDHE_ECDSA_WITH_NULL_SHA: u32 = -16378;
pub const anon471_TLS_ECDHE_ECDSA_WITH_RC4_128_SHA: u32 = -16377;
pub const anon471_TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA: u32 = -16376;
pub const anon471_TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA: u32 = -16375;
pub const anon471_TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA: u32 = -16374;
pub const anon471_TLS_ECDH_RSA_WITH_NULL_SHA: u32 = -16373;
pub const anon471_TLS_ECDH_RSA_WITH_RC4_128_SHA: u32 = -16372;
pub const anon471_TLS_ECDH_RSA_WITH_3DES_EDE_CBC_SHA: u32 = -16371;
pub const anon471_TLS_ECDH_RSA_WITH_AES_128_CBC_SHA: u32 = -16370;
pub const anon471_TLS_ECDH_RSA_WITH_AES_256_CBC_SHA: u32 = -16369;
pub const anon471_TLS_ECDHE_RSA_WITH_NULL_SHA: u32 = -16368;
pub const anon471_TLS_ECDHE_RSA_WITH_RC4_128_SHA: u32 = -16367;
pub const anon471_TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA: u32 = -16366;
pub const anon471_TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA: u32 = -16365;
pub const anon471_TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA: u32 = -16364;
pub const anon471_TLS_ECDH_anon_WITH_NULL_SHA: u32 = -16363;
pub const anon471_TLS_ECDH_anon_WITH_RC4_128_SHA: u32 = -16362;
pub const anon471_TLS_ECDH_anon_WITH_3DES_EDE_CBC_SHA: u32 = -16361;
pub const anon471_TLS_ECDH_anon_WITH_AES_128_CBC_SHA: u32 = -16360;
pub const anon471_TLS_ECDH_anon_WITH_AES_256_CBC_SHA: u32 = -16359;
pub const anon471_TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA: u32 = -16331;
pub const anon471_TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA: u32 = -16330;
pub const anon471_TLS_PSK_WITH_CHACHA20_POLY1305_SHA256: u32 = -13141;
pub const anon471_TLS_NULL_WITH_NULL_NULL: u32 = 0;
pub const anon471_TLS_RSA_WITH_NULL_MD5: u32 = 1;
pub const anon471_TLS_RSA_WITH_NULL_SHA: u32 = 2;
pub const anon471_TLS_RSA_WITH_RC4_128_MD5: u32 = 4;
pub const anon471_TLS_RSA_WITH_RC4_128_SHA: u32 = 5;
pub const anon471_TLS_RSA_WITH_3DES_EDE_CBC_SHA: u32 = 10;
pub const anon471_TLS_RSA_WITH_NULL_SHA256: u32 = 59;
pub const anon471_TLS_RSA_WITH_AES_128_CBC_SHA256: u32 = 60;
pub const anon471_TLS_RSA_WITH_AES_256_CBC_SHA256: u32 = 61;
pub const anon471_TLS_DH_DSS_WITH_3DES_EDE_CBC_SHA: u32 = 13;
pub const anon471_TLS_DH_RSA_WITH_3DES_EDE_CBC_SHA: u32 = 16;
pub const anon471_TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA: u32 = 19;
pub const anon471_TLS_DHE_RSA_WITH_3DES_EDE_CBC_SHA: u32 = 22;
pub const anon471_TLS_DH_DSS_WITH_AES_128_CBC_SHA256: u32 = 62;
pub const anon471_TLS_DH_RSA_WITH_AES_128_CBC_SHA256: u32 = 63;
pub const anon471_TLS_DHE_DSS_WITH_AES_128_CBC_SHA256: u32 = 64;
pub const anon471_TLS_DHE_RSA_WITH_AES_128_CBC_SHA256: u32 = 103;
pub const anon471_TLS_DH_DSS_WITH_AES_256_CBC_SHA256: u32 = 104;
pub const anon471_TLS_DH_RSA_WITH_AES_256_CBC_SHA256: u32 = 105;
pub const anon471_TLS_DHE_DSS_WITH_AES_256_CBC_SHA256: u32 = 106;
pub const anon471_TLS_DHE_RSA_WITH_AES_256_CBC_SHA256: u32 = 107;
pub const anon471_TLS_DH_anon_WITH_RC4_128_MD5: u32 = 24;
pub const anon471_TLS_DH_anon_WITH_3DES_EDE_CBC_SHA: u32 = 27;
pub const anon471_TLS_DH_anon_WITH_AES_128_CBC_SHA256: u32 = 108;
pub const anon471_TLS_DH_anon_WITH_AES_256_CBC_SHA256: u32 = 109;
pub const anon471_TLS_PSK_WITH_RC4_128_SHA: u32 = 138;
pub const anon471_TLS_PSK_WITH_3DES_EDE_CBC_SHA: u32 = 139;
pub const anon471_TLS_PSK_WITH_AES_128_CBC_SHA: u32 = 140;
pub const anon471_TLS_PSK_WITH_AES_256_CBC_SHA: u32 = 141;
pub const anon471_TLS_DHE_PSK_WITH_RC4_128_SHA: u32 = 142;
pub const anon471_TLS_DHE_PSK_WITH_3DES_EDE_CBC_SHA: u32 = 143;
pub const anon471_TLS_DHE_PSK_WITH_AES_128_CBC_SHA: u32 = 144;
pub const anon471_TLS_DHE_PSK_WITH_AES_256_CBC_SHA: u32 = 145;
pub const anon471_TLS_RSA_PSK_WITH_RC4_128_SHA: u32 = 146;
pub const anon471_TLS_RSA_PSK_WITH_3DES_EDE_CBC_SHA: u32 = 147;
pub const anon471_TLS_RSA_PSK_WITH_AES_128_CBC_SHA: u32 = 148;
pub const anon471_TLS_RSA_PSK_WITH_AES_256_CBC_SHA: u32 = 149;
pub const anon471_TLS_PSK_WITH_NULL_SHA: u32 = 44;
pub const anon471_TLS_DHE_PSK_WITH_NULL_SHA: u32 = 45;
pub const anon471_TLS_RSA_PSK_WITH_NULL_SHA: u32 = 46;
pub const anon471_TLS_RSA_WITH_AES_128_GCM_SHA256: u32 = 156;
pub const anon471_TLS_RSA_WITH_AES_256_GCM_SHA384: u32 = 157;
pub const anon471_TLS_DHE_RSA_WITH_AES_128_GCM_SHA256: u32 = 158;
pub const anon471_TLS_DHE_RSA_WITH_AES_256_GCM_SHA384: u32 = 159;
pub const anon471_TLS_DH_RSA_WITH_AES_128_GCM_SHA256: u32 = 160;
pub const anon471_TLS_DH_RSA_WITH_AES_256_GCM_SHA384: u32 = 161;
pub const anon471_TLS_DHE_DSS_WITH_AES_128_GCM_SHA256: u32 = 162;
pub const anon471_TLS_DHE_DSS_WITH_AES_256_GCM_SHA384: u32 = 163;
pub const anon471_TLS_DH_DSS_WITH_AES_128_GCM_SHA256: u32 = 164;
pub const anon471_TLS_DH_DSS_WITH_AES_256_GCM_SHA384: u32 = 165;
pub const anon471_TLS_DH_anon_WITH_AES_128_GCM_SHA256: u32 = 166;
pub const anon471_TLS_DH_anon_WITH_AES_256_GCM_SHA384: u32 = 167;
pub const anon471_TLS_PSK_WITH_AES_128_GCM_SHA256: u32 = 168;
pub const anon471_TLS_PSK_WITH_AES_256_GCM_SHA384: u32 = 169;
pub const anon471_TLS_DHE_PSK_WITH_AES_128_GCM_SHA256: u32 = 170;
pub const anon471_TLS_DHE_PSK_WITH_AES_256_GCM_SHA384: u32 = 171;
pub const anon471_TLS_RSA_PSK_WITH_AES_128_GCM_SHA256: u32 = 172;
pub const anon471_TLS_RSA_PSK_WITH_AES_256_GCM_SHA384: u32 = 173;
pub const anon471_TLS_PSK_WITH_AES_128_CBC_SHA256: u32 = 174;
pub const anon471_TLS_PSK_WITH_AES_256_CBC_SHA384: u32 = 175;
pub const anon471_TLS_PSK_WITH_NULL_SHA256: u32 = 176;
pub const anon471_TLS_PSK_WITH_NULL_SHA384: u32 = 177;
pub const anon471_TLS_DHE_PSK_WITH_AES_128_CBC_SHA256: u32 = 178;
pub const anon471_TLS_DHE_PSK_WITH_AES_256_CBC_SHA384: u32 = 179;
pub const anon471_TLS_DHE_PSK_WITH_NULL_SHA256: u32 = 180;
pub const anon471_TLS_DHE_PSK_WITH_NULL_SHA384: u32 = 181;
pub const anon471_TLS_RSA_PSK_WITH_AES_128_CBC_SHA256: u32 = 182;
pub const anon471_TLS_RSA_PSK_WITH_AES_256_CBC_SHA384: u32 = 183;
pub const anon471_TLS_RSA_PSK_WITH_NULL_SHA256: u32 = 184;
pub const anon471_TLS_RSA_PSK_WITH_NULL_SHA384: u32 = 185;
pub const anon471_TLS_AES_128_GCM_SHA256: u32 = 4865;
pub const anon471_TLS_AES_256_GCM_SHA384: u32 = 4866;
pub const anon471_TLS_CHACHA20_POLY1305_SHA256: u32 = 4867;
pub const anon471_TLS_AES_128_CCM_SHA256: u32 = 4868;
pub const anon471_TLS_AES_128_CCM_8_SHA256: u32 = 4869;
pub const anon471_TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256: u32 = -16349;
pub const anon471_TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384: u32 = -16348;
pub const anon471_TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256: u32 = -16347;
pub const anon471_TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384: u32 = -16346;
pub const anon471_TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256: u32 = -16345;
pub const anon471_TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384: u32 = -16344;
pub const anon471_TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256: u32 = -16343;
pub const anon471_TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384: u32 = -16342;
pub const anon471_TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256: u32 = -16341;
pub const anon471_TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384: u32 = -16340;
pub const anon471_TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256: u32 = -16339;
pub const anon471_TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384: u32 = -16338;
pub const anon471_TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256: u32 = -16337;
pub const anon471_TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384: u32 = -16336;
pub const anon471_TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256: u32 = -16335;
pub const anon471_TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384: u32 = -16334;
pub const anon471_TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256: u32 = -13144;
pub const anon471_TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256: u32 = -13143;
pub const anon471_TLS_EMPTY_RENEGOTIATION_INFO_SCSV: u32 = 255;
pub const anon471_SSL_RSA_WITH_RC2_CBC_MD5: u32 = -128;
pub const anon471_SSL_RSA_WITH_IDEA_CBC_MD5: u32 = -127;
pub const anon471_SSL_RSA_WITH_DES_CBC_MD5: u32 = -126;
pub const anon471_SSL_RSA_WITH_3DES_EDE_CBC_MD5: u32 = -125;
pub const anon471_SSL_NO_SUCH_CIPHERSUITE: u32 = -1;
pub const anon471_CSSM_CONTEXT_EVENT_CREATE: u32 = 1;
pub const anon471_CSSM_CONTEXT_EVENT_DELETE: u32 = 2;
pub const anon471_CSSM_CONTEXT_EVENT_UPDATE: u32 = 3;

pub const anon531 = u32;
pub const anon531_AnyComponentType: u32 = 0;
pub const anon531_AnyComponentSubType: u32 = 0;
pub const anon531_AnyComponentManufacturer: u32 = 0;
pub const anon531_AnyComponentFlagsMask: u32 = 0;

pub const anon661 = i32;
pub const anon661_ComponentOpenSelect: i32 = -1;
pub const anon661_ComponentCloseSelect: i32 = -2;
pub const anon661_ComponentCanDoSelect: i32 = -3;
pub const anon661_ComponentVersionSelect: i32 = -4;
pub const anon661_ComponentRegisterSelect: i32 = -5;
pub const anon661_ComponentTargetSelect: i32 = -6;
pub const anon661_ComponentUnregisterSelect: i32 = -7;
pub const anon661_ComponentGetMPWorkFunctionSelect: i32 = -8;
pub const anon661_ComponentExecuteWiredActionSelect: i32 = -9;
pub const anon661_ComponentGetPublicResourceSelect: i32 = -10;
pub const anon661_UnicodeUseFallbacksBit: i32 = 0;
pub const anon661_UnicodeKeepInfoBit: i32 = 1;
pub const anon661_UnicodeDirectionalityBits: i32 = 2;
pub const anon661_UnicodeVerticalFormBit: i32 = 4;
pub const anon661_UnicodeLooseMappingsBit: i32 = 5;
pub const anon661_UnicodeStringUnterminatedBit: i32 = 6;
pub const anon661_UnicodeTextRunBit: i32 = 7;
pub const anon661_UnicodeKeepSameEncodingBit: i32 = 8;
pub const anon661_UnicodeForceASCIIRangeBit: i32 = 9;
pub const anon661_UnicodeNoHalfwidthCharsBit: i32 = 10;
pub const anon661_UnicodeTextRunHeuristicsBit: i32 = 11;
pub const anon661_UnicodeMapLineFeedToReturnBit: i32 = 12;
pub const anon661_UnicodeUseExternalEncodingFormBit: i32 = 13;
pub const anon661_DesktopIconResource: i32 = -3992;
pub const anon661_OpenFolderIconResource: i32 = -3997;
pub const anon661_GenericHardDiskIconResource: i32 = -3995;
pub const anon661_GenericFileServerIconResource: i32 = -3972;
pub const anon661_GenericSuitcaseIconResource: i32 = -3970;
pub const anon661_GenericMoverObjectIconResource: i32 = -3969;

pub const anon801 = u32;
pub const anon801_componentDoAutoVersion: u32 = 1;
pub const anon801_componentWantsUnregister: u32 = 2;
pub const anon801_componentAutoVersionIncludeFlags: u32 = 4;
pub const anon801_componentHasMultiplePlatforms: u32 = 8;
pub const anon801_componentLoadResident: u32 = 16;
pub const anon801_UCKeyOutputStateIndexMask: u32 = 16384;
pub const anon801_UCKeyOutputSequenceIndexMask: u32 = 32768;
pub const anon801_UCKeyOutputTestForIndexMask: u32 = 49152;
pub const anon801_UCKeyOutputGetIndexMask: u32 = 16383;
pub const anon801_IdleKCEventMask: u32 = 1;
pub const anon801_LockKCEventMask: u32 = 2;
pub const anon801_UnlockKCEventMask: u32 = 4;
pub const anon801_AddKCEventMask: u32 = 8;
pub const anon801_DeleteKCEventMask: u32 = 16;
pub const anon801_UpdateKCEventMask: u32 = 32;
pub const anon801_PasswordChangedKCEventMask: u32 = 64;
pub const anon801_SystemEventKCEventMask: u32 = 256;
pub const anon801_DefaultChangedKCEventMask: u32 = 512;
pub const anon801_DataAccessKCEventMask: u32 = 1024;
pub const anon801_EveryKCEventMask: u32 = 65535;

pub const anon911 = u32;
pub const anon911_defaultComponentIdentical: u32 = 0;
pub const anon911_defaultComponentAnyFlags: u32 = 1;
pub const anon911_defaultComponentAnyManufacturer: u32 = 2;
pub const anon911_defaultComponentAnySubType: u32 = 4;
pub const anon911_defaultComponentAnyFlagsAnyManufacturer: u32 = 3;
pub const anon911_defaultComponentAnyFlagsAnyManufacturerAnySubType: u32 = 7;
pub const anon911_SKSearchOptionDefault: u32 = 0;
pub const anon911_SKSearchOptionNoRelevanceScores: u32 = 1;
pub const anon911_SKSearchOptionSpaceMeansOR: u32 = 2;
pub const anon911_SKSearchOptionFindSimilar: u32 = 4;

pub const anon1011 = u32;
pub const anon1011_registerComponentGlobal: u32 = 1;
pub const anon1011_registerComponentNoDuplicates: u32 = 2;
pub const anon1011_registerComponentAfterExisting: u32 = 4;
pub const anon1011_registerComponentAliasesOnly: u32 = 8;
pub const anon1011_TEC_MIBEnumDontCare: u32 = -1;

pub const ComponentDescription = extern struct {
    componentType: objc.OSType,
    componentSubType: objc.OSType,
    componentManufacturer: objc.OSType,
    componentFlags: objc.UInt32,
    componentFlagsMask: objc.UInt32,
};

pub const ResourceSpec = extern struct {
    resType: objc.OSType,
    resID: objc.SInt16,
};

pub const ComponentResource = extern struct {
    cd: ComponentDescription,
    component: ResourceSpec,
    componentName: ResourceSpec,
    componentInfo: ResourceSpec,
    componentIcon: ResourceSpec,
};

pub const ComponentResourcePtr = ComponentResource;

pub const ComponentResourceHandle = ComponentResourcePtr;

pub const ComponentPlatformInfo = extern struct {
    componentFlags: objc.SInt32,
    component: ResourceSpec,
    platformType: objc.SInt16,
};

pub const ComponentResourceExtension = extern struct {
    componentVersion: objc.SInt32,
    componentRegisterFlags: objc.SInt32,
    componentIconFamily: objc.SInt16,
};

pub const ComponentPlatformInfoArray = extern struct {
    count: objc.SInt32,
    platformArray: [1]ComponentPlatformInfo,
};

pub const ExtComponentResource = extern struct {
    cd: ComponentDescription,
    component: ResourceSpec,
    componentName: ResourceSpec,
    componentInfo: ResourceSpec,
    componentIcon: ResourceSpec,
    componentVersion: objc.SInt32,
    componentRegisterFlags: objc.SInt32,
    componentIconFamily: objc.SInt16,
    count: objc.SInt32,
    platformArray: [1]ComponentPlatformInfo,
};

pub const ExtComponentResourcePtr = ExtComponentResource;

pub const ExtComponentResourceHandle = ExtComponentResourcePtr;

pub const ComponentAliasResource = extern struct {
    cr: ComponentResource,
    aliasCD: ComponentDescription,
};

pub const ComponentParameters = extern struct {
    flags: objc.UInt8,
    paramSize: objc.UInt8,
    what: objc.SInt16,
    padding: objc.UInt32,
    params: [1]i64,
};

pub const ComponentRecord = extern struct {
    data: [1]i64,
};

pub const Component = ComponentRecord;

pub const ComponentInstanceRecord = extern struct {
    data: [1]i64,
};

pub const ComponentInstance = ComponentInstanceRecord;

pub const RegisteredComponentRecord = extern struct {
    data: [1]i64,
};

pub const RegisteredComponentRecordPtr = RegisteredComponentRecord;

pub const RegisteredComponentInstanceRecord = extern struct {
    data: [1]i64,
};

pub const RegisteredComponentInstanceRecordPtr = RegisteredComponentInstanceRecord;

pub const ComponentResult = objc.SInt32;

pub const anon2041 = u32;
pub const anon2041_platform68k: u32 = 1;
pub const anon2041_platformPowerPC: u32 = 2;
pub const anon2041_platformInterpreted: u32 = 3;
pub const anon2041_platformWin32: u32 = 4;
pub const anon2041_platformPowerPCNativeEntryPoint: u32 = 5;
pub const anon2041_platformIA32NativeEntryPoint: u32 = 6;
pub const anon2041_platformPowerPC64NativeEntryPoint: u32 = 7;
pub const anon2041_platformX86_64NativeEntryPoint: u32 = 8;
pub const anon2041_platformArm64NativeEntryPoint: u32 = 9;
pub const anon2041_CSSM_NET_PROTO_NONE: u32 = 0;
pub const anon2041_CSSM_NET_PROTO_CUSTOM: u32 = 1;
pub const anon2041_CSSM_NET_PROTO_UNSPECIFIED: u32 = 2;
pub const anon2041_CSSM_NET_PROTO_LDAP: u32 = 3;
pub const anon2041_CSSM_NET_PROTO_LDAPS: u32 = 4;
pub const anon2041_CSSM_NET_PROTO_LDAPNS: u32 = 5;
pub const anon2041_CSSM_NET_PROTO_X500DAP: u32 = 6;
pub const anon2041_CSSM_NET_PROTO_FTP: u32 = 7;
pub const anon2041_CSSM_NET_PROTO_FTPS: u32 = 8;
pub const anon2041_CSSM_NET_PROTO_OCSP: u32 = 9;
pub const anon2041_CSSM_NET_PROTO_CMP: u32 = 10;
pub const anon2041_CSSM_NET_PROTO_CMPS: u32 = 11;

pub const anon2161 = u32;
pub const anon2161_platformIRIXmips: u32 = 1000;
pub const anon2161_platformSunOSsparc: u32 = 1100;
pub const anon2161_platformSunOSintel: u32 = 1101;
pub const anon2161_platformLinuxppc: u32 = 1200;
pub const anon2161_platformLinuxintel: u32 = 1201;
pub const anon2161_platformAIXppc: u32 = 1300;
pub const anon2161_platformNeXTIntel: u32 = 1400;
pub const anon2161_platformNeXTppc: u32 = 1401;
pub const anon2161_platformNeXTsparc: u32 = 1402;
pub const anon2161_platformNeXT68k: u32 = 1403;
pub const anon2161_platformMacOSx86: u32 = 1500;
pub const anon2161_CSSMERR_CSP_INTERNAL_ERROR: u32 = -2147416063;
pub const anon2161_CSSMERR_CSP_MEMORY_ERROR: u32 = -2147416062;
pub const anon2161_CSSMERR_CSP_MDS_ERROR: u32 = -2147416061;
pub const anon2161_CSSMERR_CSP_INVALID_POINTER: u32 = -2147416060;
pub const anon2161_CSSMERR_CSP_INVALID_INPUT_POINTER: u32 = -2147416059;
pub const anon2161_CSSMERR_CSP_INVALID_OUTPUT_POINTER: u32 = -2147416058;
pub const anon2161_CSSMERR_CSP_FUNCTION_NOT_IMPLEMENTED: u32 = -2147416057;
pub const anon2161_CSSMERR_CSP_SELF_CHECK_FAILED: u32 = -2147416056;
pub const anon2161_CSSMERR_CSP_OS_ACCESS_DENIED: u32 = -2147416055;
pub const anon2161_CSSMERR_CSP_FUNCTION_FAILED: u32 = -2147416054;

pub const anon2301 = u32;
pub const anon2301_mpWorkFlagDoWork: u32 = 1;
pub const anon2301_mpWorkFlagDoCompletion: u32 = 2;
pub const anon2301_mpWorkFlagCopyWorkBlock: u32 = 4;
pub const anon2301_mpWorkFlagDontBlock: u32 = 8;
pub const anon2301_mpWorkFlagGetProcessorCount: u32 = 16;
pub const anon2301_mpWorkFlagGetIsRunning: u32 = 64;
pub const anon2301_CSSMERR_CSP_OPERATION_AUTH_DENIED: u32 = -2147416032;
pub const anon2301_CSSMERR_CSP_OBJECT_USE_AUTH_DENIED: u32 = -2147416031;
pub const anon2301_CSSMERR_CSP_OBJECT_MANIP_AUTH_DENIED: u32 = -2147416030;
pub const anon2301_CSSMERR_CSP_OBJECT_ACL_NOT_SUPPORTED: u32 = -2147416029;
pub const anon2301_CSSMERR_CSP_OBJECT_ACL_REQUIRED: u32 = -2147416028;
pub const anon2301_CSSMERR_CSP_INVALID_ACCESS_CREDENTIALS: u32 = -2147416027;
pub const anon2301_CSSMERR_CSP_INVALID_ACL_BASE_CERTS: u32 = -2147416026;
pub const anon2301_CSSMERR_CSP_ACL_BASE_CERTS_NOT_SUPPORTED: u32 = -2147416025;
pub const anon2301_CSSMERR_CSP_INVALID_SAMPLE_VALUE: u32 = -2147416024;
pub const anon2301_CSSMERR_CSP_SAMPLE_VALUE_NOT_SUPPORTED: u32 = -2147416023;
pub const anon2301_CSSMERR_CSP_INVALID_ACL_SUBJECT_VALUE: u32 = -2147416022;
pub const anon2301_CSSMERR_CSP_ACL_SUBJECT_TYPE_NOT_SUPPORTED: u32 = -2147416021;
pub const anon2301_CSSMERR_CSP_INVALID_ACL_CHALLENGE_CALLBACK: u32 = -2147416020;
pub const anon2301_CSSMERR_CSP_ACL_CHALLENGE_CALLBACK_FAILED: u32 = -2147416019;
pub const anon2301_CSSMERR_CSP_INVALID_ACL_ENTRY_TAG: u32 = -2147416018;
pub const anon2301_CSSMERR_CSP_ACL_ENTRY_TAG_NOT_FOUND: u32 = -2147416017;
pub const anon2301_CSSMERR_CSP_INVALID_ACL_EDIT_MODE: u32 = -2147416016;
pub const anon2301_CSSMERR_CSP_ACL_CHANGE_FAILED: u32 = -2147416015;
pub const anon2301_CSSMERR_CSP_INVALID_NEW_ACL_ENTRY: u32 = -2147416014;
pub const anon2301_CSSMERR_CSP_INVALID_NEW_ACL_OWNER: u32 = -2147416013;
pub const anon2301_CSSMERR_CSP_ACL_DELETE_FAILED: u32 = -2147416012;
pub const anon2301_CSSMERR_CSP_ACL_REPLACE_FAILED: u32 = -2147416011;
pub const anon2301_CSSMERR_CSP_ACL_ADD_FAILED: u32 = -2147416010;

pub const anon2391 = u32;
pub const anon2391_cmpAliasNoFlags: u32 = 0;
pub const anon2391_cmpAliasOnlyThisFile: u32 = 1;

pub const CSComponentsThreadMode = objc.UInt32;

pub const anon2451 = u32;
pub const anon2451_CSAcceptAllComponentsMode: u32 = 0;
pub const anon2451_CSAcceptThreadSafeComponentsOnlyMode: u32 = 1;

pub extern "CoreServices" fn CSSetComponentsThreadMode(mode: CSComponentsThreadMode) callconv(.C) void;

pub extern "CoreServices" fn CSGetComponentsThreadMode() callconv(.C) CSComponentsThreadMode;

pub const ComponentMPWorkFunctionHeaderRecord = extern struct {
    headerSize: objc.UInt32,
    recordSize: objc.UInt32,
    workFlags: objc.UInt32,
    processorCount: objc.UInt16,
    unused: objc.UInt8,
    isRunning: objc.UInt8,
};

pub const ComponentMPWorkFunctionHeaderRecordPtr = ComponentMPWorkFunctionHeaderRecord;

pub const ComponentMPWorkFunctionProcPtr = ComponentResult;

pub const ComponentRoutineProcPtr = ComponentResult;

pub const GetMissingComponentResourceProcPtr = objc.OSErr;

pub const ComponentMPWorkFunctionUPP = ComponentMPWorkFunctionProcPtr;

pub const ComponentRoutineUPP = ComponentRoutineProcPtr;

pub const GetMissingComponentResourceUPP = GetMissingComponentResourceProcPtr;

pub const ComponentFunctionUPP = objc.UniversalProcPtr;

pub extern "CoreServices" fn NewComponentFunctionUPP(userRoutine: objc.ProcPtr, procInfo: ProcInfoType) callconv(.C) ComponentFunctionUPP;

pub extern "CoreServices" fn DisposeComponentFunctionUPP(userUPP: ComponentFunctionUPP) callconv(.C) void;

pub extern "CoreServices" fn RegisterComponent(
    cd: ?*ComponentDescription,
    componentEntryPoint: ComponentRoutineUPP,
    global: objc.SInt16,
    componentName: objc.Handle,
    componentInfo: objc.Handle,
    componentIcon: objc.Handle,
) callconv(.C) Component;

pub extern "CoreServices" fn RegisterComponentResource(cr: ComponentResourceHandle, global: objc.SInt16) callconv(.C) Component;

pub extern "CoreServices" fn UnregisterComponent(aComponent: Component) callconv(.C) objc.OSErr;

pub extern "CoreServices" fn FindNextComponent(aComponent: Component, looking: ?*ComponentDescription) callconv(.C) Component;

pub extern "CoreServices" fn CountComponents(looking: ?*ComponentDescription) callconv(.C) i64;

pub extern "CoreServices" fn GetComponentInfo(
    aComponent: Component,
    cd: ?*ComponentDescription,
    componentName: objc.Handle,
    componentInfo: objc.Handle,
    componentIcon: objc.Handle,
) callconv(.C) objc.OSErr;

pub extern "CoreServices" fn GetComponentListModSeed() callconv(.C) objc.SInt32;

pub extern "CoreServices" fn GetComponentTypeModSeed(componentType: objc.OSType) callconv(.C) objc.SInt32;

pub extern "CoreServices" fn OpenAComponent(aComponent: Component, ci: ?*ComponentInstance) callconv(.C) objc.OSErr;

pub extern "CoreServices" fn OpenComponent(aComponent: Component) callconv(.C) ComponentInstance;

pub extern "CoreServices" fn CloseComponent(aComponentInstance: ComponentInstance) callconv(.C) objc.OSErr;

pub extern "CoreServices" fn GetComponentInstanceError(aComponentInstance: ComponentInstance) callconv(.C) objc.OSErr;

pub extern "CoreServices" fn ResolveComponentAlias(aComponent: Component) callconv(.C) Component;

pub extern "CoreServices" fn GetComponentPublicResource(
    aComponent: Component,
    resourceType: objc.OSType,
    resourceID: objc.SInt16,
    theResource: ?*objc.Handle,
) callconv(.C) objc.OSErr;

pub extern "CoreServices" fn GetComponentPublicResourceList(
    resourceType: objc.OSType,
    resourceID: objc.SInt16,
    flags: objc.SInt32,
    cd: ?*ComponentDescription,
    missingProc: GetMissingComponentResourceUPP,
    refCon: ?*anyopaque,
    atomContainerPtr: ?*anyopaque,
) callconv(.C) objc.OSErr;

pub extern "CoreServices" fn GetComponentPublicIndString(
    aComponent: Component,
    theString: objc.Str255,
    strListID: objc.SInt16,
    index: objc.SInt16,
) callconv(.C) objc.OSErr;

pub extern "CoreServices" fn SetComponentInstanceError(aComponentInstance: ComponentInstance, theError: objc.OSErr) callconv(.C) void;

pub extern "CoreServices" fn GetComponentRefcon(aComponent: Component) callconv(.C) i64;

pub extern "CoreServices" fn SetComponentRefcon(aComponent: Component, theRefcon: i64) callconv(.C) void;

pub extern "CoreServices" fn OpenComponentResFile(aComponent: Component) callconv(.C) ResFileRefNum;

pub extern "CoreServices" fn OpenAComponentResFile(aComponent: Component, resRef: ?*ResFileRefNum) callconv(.C) objc.OSErr;

pub extern "CoreServices" fn CloseComponentResFile(refnum: ResFileRefNum) callconv(.C) objc.OSErr;

pub extern "CoreServices" fn GetComponentResource(
    aComponent: Component,
    resType: objc.OSType,
    resID: objc.SInt16,
    theResource: ?*objc.Handle,
) callconv(.C) objc.OSErr;

pub extern "CoreServices" fn GetComponentIndString(
    aComponent: Component,
    theString: objc.Str255,
    strListID: objc.SInt16,
    index: objc.SInt16,
) callconv(.C) objc.OSErr;

pub extern "CoreServices" fn GetComponentInstanceStorage(aComponentInstance: ComponentInstance) callconv(.C) objc.Handle;

pub extern "CoreServices" fn SetComponentInstanceStorage(aComponentInstance: ComponentInstance, theStorage: objc.Handle) callconv(.C) void;

pub extern "CoreServices" fn CountComponentInstances(aComponent: Component) callconv(.C) i64;

pub extern "CoreServices" fn CallComponentFunction(params: ?*ComponentParameters, func: ComponentFunctionUPP) callconv(.C) ComponentResult;

pub extern "CoreServices" fn CallComponentFunctionWithStorage(storage: objc.Handle, params: ?*ComponentParameters, func: ComponentFunctionUPP) callconv(.C) ComponentResult;

pub extern "CoreServices" fn CallComponentFunctionWithStorageProcInfo(
    storage: objc.Handle,
    params: ?*ComponentParameters,
    func: objc.ProcPtr,
    funcProcInfo: ProcInfoType,
) callconv(.C) ComponentResult;

pub extern "CoreServices" fn DelegateComponentCall(originalParams: ?*ComponentParameters, ci: ComponentInstance) callconv(.C) ComponentResult;

pub extern "CoreServices" fn SetDefaultComponent(aComponent: Component, flags: objc.SInt16) callconv(.C) objc.OSErr;

pub extern "CoreServices" fn OpenDefaultComponent(componentType: objc.OSType, componentSubType: objc.OSType) callconv(.C) ComponentInstance;

pub extern "CoreServices" fn OpenADefaultComponent(componentType: objc.OSType, componentSubType: objc.OSType, ci: ?*ComponentInstance) callconv(.C) objc.OSErr;

pub extern "CoreServices" fn CaptureComponent(capturedComponent: Component, capturingComponent: Component) callconv(.C) Component;

pub extern "CoreServices" fn UncaptureComponent(aComponent: Component) callconv(.C) objc.OSErr;

pub extern "CoreServices" fn RegisterComponentResourceFile(resRefNum: objc.SInt16, global: objc.SInt16) callconv(.C) objc.SInt32;

pub extern "CoreServices" fn RegisterComponentFileRef(ref: ?*FSRef, global: objc.SInt16) callconv(.C) objc.OSErr;

pub extern "CoreServices" fn RegisterComponentFileRefEntries(
    ref: ?*FSRef,
    global: objc.SInt16,
    toRegister: ?*ComponentDescription,
    registerCount: objc.UInt32,
) callconv(.C) objc.OSErr;

pub extern "CoreServices" fn CallComponentOpen(ci: ComponentInstance, self: ComponentInstance) callconv(.C) ComponentResult;

pub extern "CoreServices" fn CallComponentClose(ci: ComponentInstance, self: ComponentInstance) callconv(.C) ComponentResult;

pub extern "CoreServices" fn CallComponentCanDo(ci: ComponentInstance, ftnNumber: objc.SInt16) callconv(.C) ComponentResult;

pub extern "CoreServices" fn CallComponentVersion(ci: ComponentInstance) callconv(.C) ComponentResult;

pub extern "CoreServices" fn CallComponentRegister(ci: ComponentInstance) callconv(.C) ComponentResult;

pub extern "CoreServices" fn CallComponentTarget(ci: ComponentInstance, target: ComponentInstance) callconv(.C) ComponentResult;

pub extern "CoreServices" fn CallComponentUnregister(ci: ComponentInstance) callconv(.C) ComponentResult;

pub extern "CoreServices" fn CallComponentGetMPWorkFunction(ci: ComponentInstance, workFunction: ?*ComponentMPWorkFunctionUPP, refCon: ?*?*anyopaque) callconv(.C) ComponentResult;

pub extern "CoreServices" fn CallComponentGetPublicResource(
    ci: ComponentInstance,
    resourceType: objc.OSType,
    resourceID: objc.SInt16,
    resource: ?*objc.Handle,
) callconv(.C) ComponentResult;

pub extern "CoreServices" fn CallComponentDispatch(cp: ?*ComponentParameters) callconv(.C) ComponentResult;

pub extern "CoreServices" fn NewComponentMPWorkFunctionUPP(userRoutine: ComponentMPWorkFunctionProcPtr) callconv(.C) ComponentMPWorkFunctionUPP;

pub extern "CoreServices" fn NewComponentRoutineUPP(userRoutine: ComponentRoutineProcPtr) callconv(.C) ComponentRoutineUPP;

pub extern "CoreServices" fn NewGetMissingComponentResourceUPP(userRoutine: GetMissingComponentResourceProcPtr) callconv(.C) GetMissingComponentResourceUPP;

pub extern "CoreServices" fn DisposeComponentMPWorkFunctionUPP(userUPP: ComponentMPWorkFunctionUPP) callconv(.C) void;

pub extern "CoreServices" fn DisposeComponentRoutineUPP(userUPP: ComponentRoutineUPP) callconv(.C) void;

pub extern "CoreServices" fn DisposeGetMissingComponentResourceUPP(userUPP: GetMissingComponentResourceUPP) callconv(.C) void;

pub extern "CoreServices" fn InvokeComponentMPWorkFunctionUPP(globalRefCon: ?*anyopaque, header: ComponentMPWorkFunctionHeaderRecordPtr, userUPP: ComponentMPWorkFunctionUPP) callconv(.C) ComponentResult;

pub extern "CoreServices" fn InvokeComponentRoutineUPP(cp: ?*ComponentParameters, componentStorage: objc.Handle, userUPP: ComponentRoutineUPP) callconv(.C) ComponentResult;

pub extern "CoreServices" fn InvokeGetMissingComponentResourceUPP(
    c: Component,
    resType: objc.OSType,
    resID: objc.SInt16,
    refCon: ?*anyopaque,
    resource: ?*objc.Handle,
    userUPP: GetMissingComponentResourceUPP,
) callconv(.C) objc.OSErr;

pub const anon15701 = u32;
pub const anon15701_uppComponentFunctionImplementedProcInfo: u32 = 752;
pub const anon15701_uppGetComponentVersionProcInfo: u32 = 240;
pub const anon15701_uppComponentSetTargetProcInfo: u32 = 1008;
pub const anon15701_uppCallComponentOpenProcInfo: u32 = 1008;
pub const anon15701_uppCallComponentCloseProcInfo: u32 = 1008;
pub const anon15701_uppCallComponentCanDoProcInfo: u32 = 752;
pub const anon15701_uppCallComponentVersionProcInfo: u32 = 240;
pub const anon15701_uppCallComponentRegisterProcInfo: u32 = 240;
pub const anon15701_uppCallComponentTargetProcInfo: u32 = 1008;
pub const anon15701_uppCallComponentUnregisterProcInfo: u32 = 240;
pub const anon15701_uppCallComponentGetMPWorkFunctionProcInfo: u32 = 4080;
pub const anon15701_uppCallComponentGetPublicResourceProcInfo: u32 = 15344;

pub const OpaqueMPProcessID = extern struct {};

pub const MPProcessID = OpaqueMPProcessID;

pub const OpaqueMPTaskID = extern struct {};

pub const MPTaskID = OpaqueMPTaskID;

pub const OpaqueMPQueueID = extern struct {};

pub const MPQueueID = OpaqueMPQueueID;

pub const OpaqueMPSemaphoreID = extern struct {};

pub const MPSemaphoreID = OpaqueMPSemaphoreID;

pub const OpaqueMPCriticalRegionID = extern struct {};

pub const MPCriticalRegionID = OpaqueMPCriticalRegionID;

pub const OpaqueMPTimerID = extern struct {};

pub const MPTimerID = OpaqueMPTimerID;

pub const OpaqueMPEventID = extern struct {};

pub const MPEventID = OpaqueMPEventID;

pub const OpaqueMPAddressSpaceID = extern struct {};

pub const MPAddressSpaceID = OpaqueMPAddressSpaceID;

pub const OpaqueMPNotificationID = extern struct {};

pub const MPNotificationID = OpaqueMPNotificationID;

pub const OpaqueMPCoherenceID = extern struct {};

pub const MPCoherenceID = OpaqueMPCoherenceID;

pub const OpaqueMPCpuID = extern struct {};

pub const MPCpuID = OpaqueMPCpuID;

pub const OpaqueMPAreaID = extern struct {};

pub const MPAreaID = OpaqueMPAreaID;

pub const OpaqueMPConsoleID = extern struct {};

pub const MPConsoleID = OpaqueMPConsoleID;

pub const OpaqueMPOpaqueID = extern struct {};

pub const MPOpaqueID = OpaqueMPOpaqueID;

pub const MPOpaqueIDClass = objc.UInt32;

pub const MPTaskOptions = objc.OptionBits;

pub const TaskStorageIndex = objc.ItemCount;

pub const TaskStorageValue = objc.LogicalAddress;

pub const MPSemaphoreCount = objc.ItemCount;

pub const MPTaskWeight = objc.UInt32;

pub const MPEventFlags = objc.UInt32;

pub const MPExceptionKind = objc.UInt32;

pub const MPTaskStateKind = objc.UInt32;

pub const MPPageSizeClass = objc.UInt32;

pub extern "CoreServices" fn MPProcessors() callconv(.C) objc.ItemCount;

pub extern "CoreServices" fn MPProcessorsScheduled() callconv(.C) objc.ItemCount;

pub const anon1821 = u32;
pub const anon1821_MPCreateTaskSuspendedMask: u32 = 1;
pub const anon1821_MPCreateTaskTakesAllExceptionsMask: u32 = 2;
pub const anon1821_MPCreateTaskNotDebuggableMask: u32 = 4;
pub const anon1821_MPCreateTaskValidOptionsMask: u32 = 7;
pub const anon1821_CSSMERR_CSSM_INVALID_CONTEXT_HANDLE: u32 = -2147418048;
pub const anon1821_CSSMERR_CSSM_INCOMPATIBLE_VERSION: u32 = -2147418047;
pub const anon1821_CSSMERR_CSSM_PRIVILEGE_NOT_GRANTED: u32 = -2147418037;

pub const TaskProc = objc.OSStatus;

pub extern "CoreServices" fn MPCreateTask(
    entryPoint: TaskProc,
    parameter: ?*anyopaque,
    stackSize: objc.ByteCount,
    notifyQueue: MPQueueID,
    terminationParameter1: ?*anyopaque,
    terminationParameter2: ?*anyopaque,
    options: MPTaskOptions,
    task: ?*MPTaskID,
) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn MPTerminateTask(task: MPTaskID, terminationStatus: objc.OSStatus) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn MPSetTaskWeight(task: MPTaskID, weight: MPTaskWeight) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn MPTaskIsPreemptive(taskID: MPTaskID) callconv(.C) objc.Boolean;

pub extern "CoreServices" fn MPExit(status: objc.OSStatus) callconv(.C) void;

pub extern "CoreServices" fn MPYield() callconv(.C) void;

pub extern "CoreServices" fn MPCurrentTaskID() callconv(.C) MPTaskID;

pub extern "CoreServices" fn MPSetTaskType(task: MPTaskID, taskType: objc.OSType) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn MPAllocateTaskStorageIndex(taskIndex: ?*TaskStorageIndex) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn MPDeallocateTaskStorageIndex(taskIndex: TaskStorageIndex) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn MPSetTaskStorageValue(taskIndex: TaskStorageIndex, value: TaskStorageValue) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn MPGetTaskStorageValue(taskIndex: TaskStorageIndex) callconv(.C) TaskStorageValue;

pub extern "CoreServices" fn MPCreateQueue(queue: ?*MPQueueID) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn MPDeleteQueue(queue: MPQueueID) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn MPNotifyQueue(
    queue: MPQueueID,
    param1: ?*anyopaque,
    param2: ?*anyopaque,
    param3: ?*anyopaque,
) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn MPWaitOnQueue(
    queue: MPQueueID,
    param1: ?*?*anyopaque,
    param2: ?*?*anyopaque,
    param3: ?*?*anyopaque,
    timeout: objc.Duration,
) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn MPSetQueueReserve(queue: MPQueueID, count: objc.ItemCount) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn MPCreateSemaphore(maximumValue: MPSemaphoreCount, initialValue: MPSemaphoreCount, semaphore: ?*MPSemaphoreID) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn MPDeleteSemaphore(semaphore: MPSemaphoreID) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn MPSignalSemaphore(semaphore: MPSemaphoreID) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn MPWaitOnSemaphore(semaphore: MPSemaphoreID, timeout: objc.Duration) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn MPCreateCriticalRegion(criticalRegion: ?*MPCriticalRegionID) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn MPDeleteCriticalRegion(criticalRegion: MPCriticalRegionID) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn MPEnterCriticalRegion(criticalRegion: MPCriticalRegionID, timeout: objc.Duration) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn MPExitCriticalRegion(criticalRegion: MPCriticalRegionID) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn MPCreateEvent(event: ?*MPEventID) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn MPDeleteEvent(event: MPEventID) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn MPSetEvent(event: MPEventID, flags: MPEventFlags) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn MPWaitForEvent(event: MPEventID, flags: ?*MPEventFlags, timeout: objc.Duration) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn MPCreateNotification(notificationID: ?*MPNotificationID) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn MPDeleteNotification(notificationID: MPNotificationID) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn MPModifyNotification(
    notificationID: MPNotificationID,
    anID: MPOpaqueID,
    notifyParam1: ?*anyopaque,
    notifyParam2: ?*anyopaque,
    notifyParam3: ?*anyopaque,
) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn MPModifyNotificationParameters(
    notificationID: MPNotificationID,
    kind: MPOpaqueIDClass,
    notifyParam1: ?*anyopaque,
    notifyParam2: ?*anyopaque,
    notifyParam3: ?*anyopaque,
) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn MPCauseNotification(notificationID: MPNotificationID) callconv(.C) objc.OSStatus;

pub const anon8721 = u32;
pub const anon8721_MPPreserveTimerIDMask: u32 = 1;
pub const anon8721_MPTimeIsDeltaMask: u32 = 2;
pub const anon8721_MPTimeIsDurationMask: u32 = 4;

pub extern "CoreServices" fn MPDelayUntil(expirationTime: ?*objc.AbsoluteTime) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn MPCreateTimer(timerID: ?*MPTimerID) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn MPDeleteTimer(timerID: MPTimerID) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn MPSetTimerNotify(
    timerID: MPTimerID,
    anID: MPOpaqueID,
    notifyParam1: ?*anyopaque,
    notifyParam2: ?*anyopaque,
    notifyParam3: ?*anyopaque,
) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn MPArmTimer(timerID: MPTimerID, expirationTime: ?*objc.AbsoluteTime, options: objc.OptionBits) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn MPCancelTimer(timerID: MPTimerID, timeRemaining: ?*objc.AbsoluteTime) callconv(.C) objc.OSStatus;

pub const anon10171 = u32;
pub const anon10171_MPAllocateDefaultAligned: u32 = 0;
pub const anon10171_MPAllocate8ByteAligned: u32 = 3;
pub const anon10171_MPAllocate16ByteAligned: u32 = 4;
pub const anon10171_MPAllocate32ByteAligned: u32 = 5;
pub const anon10171_MPAllocate1024ByteAligned: u32 = 10;
pub const anon10171_MPAllocate4096ByteAligned: u32 = 12;
pub const anon10171_MPAllocateMaxAlignment: u32 = 16;
pub const anon10171_MPAllocateAltiVecAligned: u32 = 4;
pub const anon10171_MPAllocateVMXAligned: u32 = 4;
pub const anon10171_MPAllocateVMPageAligned: u32 = 254;
pub const anon10171_MPAllocateInterlockAligned: u32 = 255;

pub const anon10341 = u32;
pub const anon10341_MPAllocateClearMask: u32 = 1;
pub const anon10341_MPAllocateGloballyMask: u32 = 2;
pub const anon10341_MPAllocateResidentMask: u32 = 4;
pub const anon10341_MPAllocateNoGrowthMask: u32 = 16;
pub const anon10341_MPAllocateNoCreateMask: u32 = 32;

pub extern "CoreServices" fn MPAllocateAligned(size: objc.ByteCount, alignment: objc.UInt8, options: objc.OptionBits) callconv(.C) objc.LogicalAddress;

pub extern "CoreServices" fn MPAllocate(size: objc.ByteCount) callconv(.C) objc.LogicalAddress;

pub extern "CoreServices" fn MPFree(object: objc.LogicalAddress) callconv(.C) void;

pub extern "CoreServices" fn MPGetAllocatedBlockSize(object: objc.LogicalAddress) callconv(.C) objc.ByteCount;

pub extern "CoreServices" fn MPBlockCopy(source: objc.LogicalAddress, destination: objc.LogicalAddress, size: objc.ByteCount) callconv(.C) void;

pub extern "CoreServices" fn MPBlockClear(address: objc.LogicalAddress, size: objc.ByteCount) callconv(.C) void;

pub const anon12221 = u32;
pub const anon12221_MPTaskStateRegisters: u32 = 0;
pub const anon12221_MPTaskStateFPU: u32 = 1;
pub const anon12221_MPTaskStateVectors: u32 = 2;
pub const anon12221_MPTaskStateMachine: u32 = 3;
pub const anon12221_MPTaskState32BitMemoryException: u32 = 4;
pub const anon12221_MPTaskStateTaskInfo: u32 = 5;

pub const anon12341 = u32;
pub const anon12341_MPTaskPropagate: u32 = 0;
pub const anon12341_MPTaskResumeStep: u32 = 1;
pub const anon12341_MPTaskResumeBranch: u32 = 2;
pub const anon12341_MPTaskResumeMask: u32 = 0;
pub const anon12341_MPTaskPropagateMask: u32 = 1;
pub const anon12341_MPTaskResumeStepMask: u32 = 2;
pub const anon12341_MPTaskResumeBranchMask: u32 = 4;

pub const anon12471 = u32;
pub const anon12471_MPTaskBlocked: u32 = 0;
pub const anon12471_MPTaskReady: u32 = 1;
pub const anon12471_MPTaskRunning: u32 = 2;

pub const anon12541 = u32;
pub const anon12541_MPTaskInfoVersion: u32 = 3;

pub const MPTaskInfoVersion2 = extern struct {
    version: objc.PBVersion,
    name: objc.OSType,
    queueName: objc.OSType,
    runState: objc.UInt16,
    lastCPU: objc.UInt16,
    weight: objc.UInt32,
    processID: MPProcessID,
    cpuTime: objc.AbsoluteTime,
    schedTime: objc.AbsoluteTime,
    creationTime: objc.AbsoluteTime,
    codePageFaults: objc.ItemCount,
    dataPageFaults: objc.ItemCount,
    preemptions: objc.ItemCount,
    cpuID: MPCpuID,
};

pub const MPTaskInfo = extern struct {
    version: objc.PBVersion,
    name: objc.OSType,
    queueName: objc.OSType,
    runState: objc.UInt16,
    lastCPU: objc.UInt16,
    weight: objc.UInt32,
    processID: MPProcessID,
    cpuTime: objc.AbsoluteTime,
    schedTime: objc.AbsoluteTime,
    creationTime: objc.AbsoluteTime,
    codePageFaults: objc.ItemCount,
    dataPageFaults: objc.ItemCount,
    preemptions: objc.ItemCount,
    cpuID: MPCpuID,
    blockedObject: MPOpaqueID,
    spaceID: MPAddressSpaceID,
    stackBase: objc.LogicalAddress,
    stackLimit: objc.LogicalAddress,
    stackCurr: objc.LogicalAddress,
};

pub extern "CoreServices" fn MPSetExceptionHandler(task: MPTaskID, exceptionQ: MPQueueID) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn MPDisposeTaskException(task: MPTaskID, action: objc.OptionBits) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn MPExtractTaskState(task: MPTaskID, kind: MPTaskStateKind, info: ?*anyopaque) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn MPSetTaskState(task: MPTaskID, kind: MPTaskStateKind, info: ?*anyopaque) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn MPThrowException(task: MPTaskID, kind: MPExceptionKind) callconv(.C) objc.OSStatus;

pub const MPDebuggerLevel = objc.UInt32;

pub extern "CoreServices" fn MPRegisterDebugger(queue: MPQueueID, level: MPDebuggerLevel) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn MPUnregisterDebugger(queue: MPQueueID) callconv(.C) objc.OSStatus;

pub const MPRemoteProcedure = ?*const fn (?*anyopaque) callconv(.C) ?*anyopaque;

pub const MPRemoteContext = objc.UInt8;

pub const anon14821 = u32;
pub const anon14821_MPAnyRemoteContext: u32 = 0;
pub const anon14821_MPOwningProcessRemoteContext: u32 = 1;
pub const anon14821_MPInterruptRemoteContext: u32 = 2;
pub const anon14821_MPAsyncInterruptRemoteContext: u32 = 3;

pub extern "CoreServices" fn MPRemoteCall(remoteProc: MPRemoteProcedure, parameter: ?*anyopaque, context: MPRemoteContext) callconv(.C) ?*anyopaque;

pub extern "CoreServices" fn MPRemoteCallCFM(remoteProc: MPRemoteProcedure, parameter: ?*anyopaque, context: MPRemoteContext) callconv(.C) ?*anyopaque;

pub extern "CoreServices" fn _MPIsFullyInitialized() callconv(.C) objc.Boolean;

pub const MPIsFullyInitializedProc = objc.Boolean;

pub extern "CoreServices" fn _MPLibraryVersion(
    versionCString: ?*?*i8,
    major: ?*objc.UInt32,
    minor: ?*objc.UInt32,
    release: ?*objc.UInt32,
    revision: ?*objc.UInt32,
) callconv(.C) void;

pub extern "CoreServices" fn _MPLibraryIsCompatible(
    versionCString: ?*i8,
    major: objc.UInt32,
    minor: objc.UInt32,
    release: objc.UInt32,
    revision: objc.UInt32,
) callconv(.C) objc.Boolean;

pub const FSAliasInfoBitmap = objc.UInt32;

pub const anon631 = i32;
pub const anon631_asiZoneName: i32 = -3;
pub const anon631_asiServerName: i32 = -2;
pub const anon631_asiVolumeName: i32 = -1;
pub const anon631_asiAliasName: i32 = 0;
pub const anon631_asiParentName: i32 = 1;
pub const anon631_OnSystemDisk: i32 = -32768;
pub const anon631_OnAppropriateDisk: i32 = -32767;
pub const anon631_SystemDomain: i32 = -32766;
pub const anon631_LocalDomain: i32 = -32765;
pub const anon631_NetworkDomain: i32 = -32764;
pub const anon631_UserDomain: i32 = -32763;
pub const anon631_FolderManagerLastDomain: i32 = -32760;
pub const anon631_NoneType: i32 = 1313820229;
pub const anon631_ACE2Type: i32 = 1094927666;
pub const anon631_ACE8Type: i32 = 1094927672;
pub const anon631_MACE3Type: i32 = 1296122675;
pub const anon631_MACE6Type: i32 = 1296122678;
pub const anon631_AEApplicationActivationExpected: i32 = 1633775716;
pub const anon631_errSecCSUnimplemented: i32 = -67072;
pub const anon631_errSecCSInvalidObjectRef: i32 = -67071;
pub const anon631_errSecCSInvalidFlags: i32 = -67070;
pub const anon631_errSecCSObjectRequired: i32 = -67069;
pub const anon631_errSecCSStaticCodeNotFound: i32 = -67068;
pub const anon631_errSecCSUnsupportedGuestAttributes: i32 = -67067;
pub const anon631_errSecCSInvalidAttributeValues: i32 = -67066;
pub const anon631_errSecCSNoSuchCode: i32 = -67065;
pub const anon631_errSecCSMultipleGuests: i32 = -67064;
pub const anon631_errSecCSGuestInvalid: i32 = -67063;
pub const anon631_errSecCSUnsigned: i32 = -67062;
pub const anon631_errSecCSSignatureFailed: i32 = -67061;
pub const anon631_errSecCSSignatureNotVerifiable: i32 = -67060;
pub const anon631_errSecCSSignatureUnsupported: i32 = -67059;
pub const anon631_errSecCSBadDictionaryFormat: i32 = -67058;
pub const anon631_errSecCSResourcesNotSealed: i32 = -67057;
pub const anon631_errSecCSResourcesNotFound: i32 = -67056;
pub const anon631_errSecCSResourcesInvalid: i32 = -67055;
pub const anon631_errSecCSBadResource: i32 = -67054;
pub const anon631_errSecCSResourceRulesInvalid: i32 = -67053;
pub const anon631_errSecCSReqInvalid: i32 = -67052;
pub const anon631_errSecCSReqUnsupported: i32 = -67051;
pub const anon631_errSecCSReqFailed: i32 = -67050;
pub const anon631_errSecCSBadObjectFormat: i32 = -67049;
pub const anon631_errSecCSInternalError: i32 = -67048;
pub const anon631_errSecCSHostReject: i32 = -67047;
pub const anon631_errSecCSNotAHost: i32 = -67046;
pub const anon631_errSecCSSignatureInvalid: i32 = -67045;
pub const anon631_errSecCSHostProtocolRelativePath: i32 = -67044;
pub const anon631_errSecCSHostProtocolContradiction: i32 = -67043;
pub const anon631_errSecCSHostProtocolDedicationError: i32 = -67042;
pub const anon631_errSecCSHostProtocolNotProxy: i32 = -67041;
pub const anon631_errSecCSHostProtocolStateError: i32 = -67040;
pub const anon631_errSecCSHostProtocolUnrelated: i32 = -67039;
pub const anon631_errSecCSNotSupported: i32 = -67037;
pub const anon631_errSecCSCMSTooLarge: i32 = -67036;
pub const anon631_errSecCSHostProtocolInvalidHash: i32 = -67035;
pub const anon631_errSecCSStaticCodeChanged: i32 = -67034;
pub const anon631_errSecCSDBDenied: i32 = -67033;
pub const anon631_errSecCSDBAccess: i32 = -67032;
pub const anon631_errSecCSSigDBDenied: i32 = -67033;
pub const anon631_errSecCSSigDBAccess: i32 = -67032;
pub const anon631_errSecCSHostProtocolInvalidAttribute: i32 = -67031;
pub const anon631_errSecCSInfoPlistFailed: i32 = -67030;
pub const anon631_errSecCSNoMainExecutable: i32 = -67029;
pub const anon631_errSecCSBadBundleFormat: i32 = -67028;
pub const anon631_errSecCSNoMatches: i32 = -67027;
pub const anon631_errSecCSFileHardQuarantined: i32 = -67026;
pub const anon631_errSecCSOutdated: i32 = -67025;
pub const anon631_errSecCSDbCorrupt: i32 = -67024;
pub const anon631_errSecCSResourceDirectoryFailed: i32 = -67023;
pub const anon631_errSecCSUnsignedNestedCode: i32 = -67022;
pub const anon631_errSecCSBadNestedCode: i32 = -67021;
pub const anon631_errSecCSBadCallbackValue: i32 = -67020;
pub const anon631_errSecCSHelperFailed: i32 = -67019;
pub const anon631_errSecCSVetoed: i32 = -67018;
pub const anon631_errSecCSBadLVArch: i32 = -67017;
pub const anon631_errSecCSResourceNotSupported: i32 = -67016;
pub const anon631_errSecCSRegularFile: i32 = -67015;
pub const anon631_errSecCSUnsealedAppRoot: i32 = -67014;
pub const anon631_errSecCSWeakResourceRules: i32 = -67013;
pub const anon631_errSecCSDSStoreSymlink: i32 = -67012;
pub const anon631_errSecCSAmbiguousBundleFormat: i32 = -67011;
pub const anon631_errSecCSBadMainExecutable: i32 = -67010;
pub const anon631_errSecCSBadFrameworkVersion: i32 = -67009;
pub const anon631_errSecCSUnsealedFrameworkRoot: i32 = -67008;
pub const anon631_errSecCSWeakResourceEnvelope: i32 = -67007;
pub const anon631_errSecCSCancelled: i32 = -67006;
pub const anon631_errSecCSInvalidPlatform: i32 = -67005;
pub const anon631_errSecCSTooBig: i32 = -67004;
pub const anon631_errSecCSInvalidSymlink: i32 = -67003;
pub const anon631_errSecCSNotAppLike: i32 = -67002;
pub const anon631_errSecCSBadDiskImageFormat: i32 = -67001;
pub const anon631_errSecCSUnsupportedDigestAlgorithm: i32 = -67000;
pub const anon631_errSecCSInvalidAssociatedFileData: i32 = -66999;
pub const anon631_errSecCSInvalidTeamIdentifier: i32 = -66998;
pub const anon631_errSecCSBadTeamIdentifier: i32 = -66997;
pub const anon631_errSecCSSignatureUntrusted: i32 = -66996;
pub const anon631_errSecMultipleExecSegments: i32 = -66995;
pub const anon631_errSecCSInvalidEntitlements: i32 = -66994;
pub const anon631_errSecCSInvalidRuntimeVersion: i32 = -66993;
pub const anon631_errSecCSRevokedNotarization: i32 = -66992;
pub const anon631_errSecCSCMSConstructionFailed: i32 = -66991;
pub const anon631_errSecCSRemoteSignerFailed: i32 = -66990;
pub const anon631_LSUnknownType: i32 = 0;
pub const anon631_LSUnknownCreator: i32 = 0;

pub const AliasRecord = extern struct {
    hidden: [6]objc.UInt8,
};

pub const AliasPtr = AliasRecord;

pub const AliasHandle = AliasPtr;

pub const FSAliasInfo = extern struct {
    volumeCreateDate: UTCDateTime,
    targetCreateDate: UTCDateTime,
    fileType: objc.OSType,
    fileCreator: objc.OSType,
    parentDirID: objc.UInt32,
    nodeID: objc.UInt32,
    filesystemID: objc.UInt16,
    signature: objc.UInt16,
    volumeIsBootVolume: objc.Boolean,
    volumeIsAutomounted: objc.Boolean,
    volumeIsEjectable: objc.Boolean,
    volumeHasPersistentFileIDs: objc.Boolean,
    isDirectory: objc.Boolean,
};

pub const FSAliasInfoPtr = FSAliasInfo;

pub const AliasInfoType = i16;

pub const FSAliasFilterProcPtr = objc.Boolean;

pub extern "CoreServices" fn FSNewAlias(fromFile: ?*FSRef, target: ?*FSRef, inAlias: ?*AliasHandle) callconv(.C) objc.OSErr;

pub extern "CoreServices" fn FSNewAliasMinimal(target: ?*FSRef, inAlias: ?*AliasHandle) callconv(.C) objc.OSErr;

pub extern "CoreServices" fn FSIsAliasFile(fileRef: ?*FSRef, aliasFileFlag: ?*objc.Boolean, folderFlag: ?*objc.Boolean) callconv(.C) objc.OSErr;

pub extern "CoreServices" fn FSResolveAliasWithMountFlags(
    fromFile: ?*FSRef,
    inAlias: AliasHandle,
    target: ?*FSRef,
    wasChanged: ?*objc.Boolean,
    mountFlags: u64,
) callconv(.C) objc.OSErr;

pub extern "CoreServices" fn FSResolveAlias(
    fromFile: ?*FSRef,
    alias: AliasHandle,
    target: ?*FSRef,
    wasChanged: ?*objc.Boolean,
) callconv(.C) objc.OSErr;

pub extern "CoreServices" fn FSResolveAliasFileWithMountFlags(
    theRef: ?*FSRef,
    resolveAliasChains: objc.Boolean,
    targetIsFolder: ?*objc.Boolean,
    wasAliased: ?*objc.Boolean,
    mountFlags: u64,
) callconv(.C) objc.OSErr;

pub extern "CoreServices" fn FSResolveAliasFile(
    theRef: ?*FSRef,
    resolveAliasChains: objc.Boolean,
    targetIsFolder: ?*objc.Boolean,
    wasAliased: ?*objc.Boolean,
) callconv(.C) objc.OSErr;

pub extern "CoreServices" fn FSFollowFinderAlias(
    fromFile: ?*FSRef,
    alias: AliasHandle,
    logon: objc.Boolean,
    target: ?*FSRef,
    wasChanged: ?*objc.Boolean,
) callconv(.C) objc.OSErr;

pub extern "CoreServices" fn FSUpdateAlias(
    fromFile: ?*FSRef,
    target: ?*FSRef,
    alias: AliasHandle,
    wasChanged: ?*objc.Boolean,
) callconv(.C) objc.OSErr;

pub extern "CoreServices" fn FSNewAliasUnicode(
    fromFile: ?*FSRef,
    targetParentRef: ?*FSRef,
    targetNameLength: objc.UniCharCount,
    targetName: ?*objc.UniChar,
    inAlias: ?*AliasHandle,
    isDirectory: ?*objc.Boolean,
) callconv(.C) objc.OSErr;

pub extern "CoreServices" fn FSNewAliasMinimalUnicode(
    targetParentRef: ?*FSRef,
    targetNameLength: objc.UniCharCount,
    targetName: ?*objc.UniChar,
    inAlias: ?*AliasHandle,
    isDirectory: ?*objc.Boolean,
) callconv(.C) objc.OSErr;

pub extern "CoreServices" fn FSNewAliasFromPath(
    fromFilePath: ?*i8,
    targetPath: ?*i8,
    flags: objc.OptionBits,
    inAlias: ?*AliasHandle,
    isDirectory: ?*objc.Boolean,
) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn FSMatchAliasBulk(
    fromFile: ?*FSRef,
    rulesMask: u64,
    inAlias: AliasHandle,
    aliasCount: ?*i16,
    aliasList: ?*FSRef,
    needsUpdate: ?*objc.Boolean,
    aliasFilter: FSAliasFilterProcPtr,
    yourDataPtr: ?*anyopaque,
) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn FSCopyAliasInfo(
    inAlias: AliasHandle,
    targetName: ?*objc.HFSUniStr255,
    volumeName: ?*objc.HFSUniStr255,
    pathString: ?*core_foundation.StringRef,
    whichInfo: ?*FSAliasInfoBitmap,
    info: ?*FSAliasInfo,
) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn GetAliasSize(alias: AliasHandle) callconv(.C) objc.Size;

pub extern "CoreServices" fn GetAliasUserType(alias: AliasHandle) callconv(.C) objc.OSType;

pub extern "CoreServices" fn SetAliasUserType(alias: AliasHandle, userType: objc.OSType) callconv(.C) void;

pub extern "CoreServices" fn GetAliasSizeFromPtr(alias: ?*AliasRecord) callconv(.C) objc.Size;

pub extern "CoreServices" fn GetAliasUserTypeFromPtr(alias: ?*AliasRecord) callconv(.C) objc.OSType;

pub extern "CoreServices" fn SetAliasUserTypeWithPtr(alias: AliasPtr, userType: objc.OSType) callconv(.C) void;

pub const OpaqueLocaleRef = extern struct {};

pub const LocaleRef = OpaqueLocaleRef;

pub const LocalePartMask = objc.UInt32;

pub const LocaleOperationClass = objc.FourCharCode;

pub const LocaleOperationVariant = objc.FourCharCode;

pub const LocaleAndVariant = extern struct {
    locale: LocaleRef,
    opVariant: LocaleOperationVariant,
};

pub const LocaleNameMask = objc.UInt32;

pub const anon691 = u32;
pub const anon691_LocaleNameMask: u32 = 1;
pub const anon691_LocaleOperationVariantNameMask: u32 = 2;
pub const anon691_LocaleAndVariantNameMask: u32 = 3;
pub const anon691_fVNumber: u32 = 0;

pub extern "CoreServices" fn LocaleRefFromLangOrRegionCode(lang: objc.LangCode, region: objc.RegionCode, locale: ?*LocaleRef) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn LocaleRefFromLocaleString(localeString: *i8, locale: ?*LocaleRef) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn LocaleRefGetPartString(
    locale: LocaleRef,
    partMask: LocalePartMask,
    maxStringLen: objc.ByteCount,
    partString: *i8,
) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn LocaleStringToLangAndRegionCodes(localeString: *i8, lang: ?*objc.LangCode, region: ?*objc.RegionCode) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn LocaleOperationCountLocales(opClass: LocaleOperationClass, localeCount: ?*objc.ItemCount) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn LocaleOperationGetLocales(
    opClass: LocaleOperationClass,
    maxLocaleCount: objc.ItemCount,
    actualLocaleCount: ?*objc.ItemCount,
    localeVariantList: *LocaleAndVariant,
) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn LocaleGetName(
    locale: LocaleRef,
    opVariant: LocaleOperationVariant,
    nameMask: LocaleNameMask,
    displayLocale: LocaleRef,
    maxNameLen: objc.UniCharCount,
    actualNameLen: ?*objc.UniCharCount,
    displayName: *objc.UniChar,
) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn LocaleCountNames(
    locale: LocaleRef,
    opVariant: LocaleOperationVariant,
    nameMask: LocaleNameMask,
    nameCount: ?*objc.ItemCount,
) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn LocaleGetIndName(
    locale: LocaleRef,
    opVariant: LocaleOperationVariant,
    nameMask: LocaleNameMask,
    nameIndex: objc.ItemCount,
    maxNameLen: objc.UniCharCount,
    actualNameLen: ?*objc.UniCharCount,
    displayName: *objc.UniChar,
    displayLocale: ?*LocaleRef,
) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn LocaleOperationGetName(
    opClass: LocaleOperationClass,
    displayLocale: LocaleRef,
    maxNameLen: objc.UniCharCount,
    actualNameLen: ?*objc.UniCharCount,
    displayName: *objc.UniChar,
) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn LocaleOperationCountNames(opClass: LocaleOperationClass, nameCount: ?*objc.ItemCount) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn LocaleOperationGetIndName(
    opClass: LocaleOperationClass,
    nameIndex: objc.ItemCount,
    maxNameLen: objc.UniCharCount,
    actualNameLen: ?*objc.UniCharCount,
    displayName: *objc.UniChar,
    displayLocale: ?*LocaleRef,
) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn DebugAssert(
    componentSignature: objc.OSType,
    options: objc.UInt32,
    assertionString: ?*i8,
    exceptionLabelString: ?*i8,
    errorString: ?*i8,
    fileName: ?*i8,
    lineNumber: i64,
    value: ?*anyopaque,
) callconv(.C) void;

pub const anon3681 = u32;
pub const anon3681_68kInterruptLevelMask: u32 = 7;
pub const anon3681_InVBLTaskMask: u32 = 16;
pub const anon3681_InDeferredTaskMask: u32 = 32;
pub const anon3681_InSecondaryIntHandlerMask: u32 = 64;
pub const anon3681_InNestedInterruptMask: u32 = 128;
pub const anon3681_CSSM_LIST_ELEMENT_DATUM: u32 = 0;
pub const anon3681_CSSM_LIST_ELEMENT_SUBLIST: u32 = 1;
pub const anon3681_CSSM_LIST_ELEMENT_WORDID: u32 = 2;
pub const anon3681_CSSM_DL_DB_RECORD_GENERIC_PASSWORD: u32 = -2147483648;
pub const anon3681_CSSM_DL_DB_RECORD_INTERNET_PASSWORD: u32 = -2147483647;
pub const anon3681_CSSM_DL_DB_RECORD_APPLESHARE_PASSWORD: u32 = -2147483646;
pub const anon3681_CSSM_DL_DB_RECORD_X509_CERTIFICATE: u32 = -2147479552;
pub const anon3681_CSSM_DL_DB_RECORD_USER_TRUST: u32 = -2147479551;
pub const anon3681_CSSM_DL_DB_RECORD_X509_CRL: u32 = -2147479550;
pub const anon3681_CSSM_DL_DB_RECORD_UNLOCK_REFERRAL: u32 = -2147479549;
pub const anon3681_CSSM_DL_DB_RECORD_EXTENDED_ATTRIBUTE: u32 = -2147479548;
pub const anon3681_CSSM_DL_DB_RECORD_METADATA: u32 = -2147450880;

pub extern "CoreServices" fn TaskLevel() callconv(.C) objc.UInt32;

pub const anon4041 = u32;
pub const anon4041_ComponentDebugOption: u32 = 0;

pub const anon4081 = u32;
pub const anon4081_GetDebugOption: u32 = 1;
pub const anon4081_SetDebugOption: u32 = 2;

pub const DebugComponentCallbackProcPtr = ?*const fn (objc.SInt32, objc.UInt32, ?*objc.Boolean) callconv(.C) void;

pub const DebugComponentCallbackUPP = DebugComponentCallbackProcPtr;

pub extern "CoreServices" fn NewDebugComponent(componentSignature: objc.OSType, componentName: objc.ConstStr255Param, componentCallback: DebugComponentCallbackUPP) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn NewDebugOption(componentSignature: objc.OSType, optionSelectorNum: objc.SInt32, optionName: objc.ConstStr255Param) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn DisposeDebugComponent(componentSignature: objc.OSType) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn GetDebugComponentInfo(itemIndex: objc.UInt32, componentSignature: ?*objc.OSType, componentName: objc.Str255) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn GetDebugOptionInfo(
    itemIndex: objc.UInt32,
    componentSignature: objc.OSType,
    optionSelectorNum: ?*objc.SInt32,
    optionName: objc.Str255,
    optionSetting: ?*objc.Boolean,
) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn SetDebugOptionValue(componentSignature: objc.OSType, optionSelectorNum: objc.SInt32, newOptionSetting: objc.Boolean) callconv(.C) objc.OSStatus;

pub const DebugAssertOutputHandlerProcPtr = ?*const fn (
    objc.OSType,
    objc.UInt32,
    ?*i8,
    ?*i8,
    ?*i8,
    ?*i8,
    i64,
    ?*anyopaque,
    objc.ConstStr255Param,
) callconv(.C) void;

pub const DebugAssertOutputHandlerUPP = DebugAssertOutputHandlerProcPtr;

pub extern "CoreServices" fn InstallDebugAssertOutputHandler(handler: DebugAssertOutputHandlerUPP) callconv(.C) void;

pub extern "CoreServices" fn GetMacOSStatusErrorString(err: objc.OSStatus) callconv(.C) ?*i8;

pub extern "CoreServices" fn GetMacOSStatusCommentString(err: objc.OSStatus) callconv(.C) ?*i8;

pub extern "CoreServices" fn NewDebugComponentCallbackUPP(userRoutine: DebugComponentCallbackProcPtr) callconv(.C) DebugComponentCallbackUPP;

pub extern "CoreServices" fn NewDebugAssertOutputHandlerUPP(userRoutine: DebugAssertOutputHandlerProcPtr) callconv(.C) DebugAssertOutputHandlerUPP;

pub extern "CoreServices" fn DisposeDebugComponentCallbackUPP(userUPP: DebugComponentCallbackUPP) callconv(.C) void;

pub extern "CoreServices" fn DisposeDebugAssertOutputHandlerUPP(userUPP: DebugAssertOutputHandlerUPP) callconv(.C) void;

pub extern "CoreServices" fn InvokeDebugComponentCallbackUPP(
    optionSelectorNum: objc.SInt32,
    command: objc.UInt32,
    optionSetting: ?*objc.Boolean,
    userUPP: DebugComponentCallbackUPP,
) callconv(.C) void;

pub extern "CoreServices" fn InvokeDebugAssertOutputHandlerUPP(
    componentSignature: objc.OSType,
    options: objc.UInt32,
    assertionString: ?*i8,
    exceptionLabelString: ?*i8,
    errorString: ?*i8,
    fileName: ?*i8,
    lineNumber: i64,
    value: ?*anyopaque,
    outputMsg: objc.ConstStr255Param,
    userUPP: DebugAssertOutputHandlerUPP,
) callconv(.C) void;

pub extern "CoreServices" fn PLstrcmp(str1: objc.ConstStr255Param, str2: objc.ConstStr255Param) callconv(.C) i16;

pub extern "CoreServices" fn PLstrncmp(str1: objc.ConstStr255Param, str2: objc.ConstStr255Param, num: i16) callconv(.C) i16;

pub extern "CoreServices" fn PLstrcpy(dest: objc.StringPtr, source: objc.ConstStr255Param) callconv(.C) objc.StringPtr;

pub extern "CoreServices" fn PLstrncpy(dest: objc.StringPtr, source: objc.ConstStr255Param, num: i16) callconv(.C) objc.StringPtr;

pub extern "CoreServices" fn PLstrcat(str: objc.StringPtr, append: objc.ConstStr255Param) callconv(.C) objc.StringPtr;

pub extern "CoreServices" fn PLstrncat(str1: objc.StringPtr, append: objc.ConstStr255Param, num: i16) callconv(.C) objc.StringPtr;

pub extern "CoreServices" fn PLstrchr(str1: objc.ConstStr255Param, ch1: i16) callconv(.C) objc.Ptr;

pub extern "CoreServices" fn PLstrrchr(str1: objc.ConstStr255Param, ch1: i16) callconv(.C) objc.Ptr;

pub extern "CoreServices" fn PLstrpbrk(str1: objc.ConstStr255Param, charSet: objc.ConstStr255Param) callconv(.C) objc.Ptr;

pub extern "CoreServices" fn PLstrspn(str1: objc.ConstStr255Param, charSet: objc.ConstStr255Param) callconv(.C) i16;

pub extern "CoreServices" fn PLstrstr(str1: objc.ConstStr255Param, searchStr: objc.ConstStr255Param) callconv(.C) objc.Ptr;

pub extern "CoreServices" fn PLstrlen(str: objc.ConstStr255Param) callconv(.C) i16;

pub extern "CoreServices" fn PLpos(str1: objc.ConstStr255Param, searchStr: objc.ConstStr255Param) callconv(.C) i16;

pub extern "CoreServices" fn CompareAndSwap(oldValue: objc.UInt32, newValue: objc.UInt32, address: ?*objc.UInt32) callconv(.C) objc.Boolean;

pub extern "CoreServices" fn TestAndClear(bit: objc.UInt32, address: ?*objc.UInt8) callconv(.C) objc.Boolean;

pub extern "CoreServices" fn TestAndSet(bit: objc.UInt32, address: ?*objc.UInt8) callconv(.C) objc.Boolean;

pub extern "CoreServices" fn IncrementAtomic8(address: ?*objc.SInt8) callconv(.C) objc.SInt8;

pub extern "CoreServices" fn DecrementAtomic8(address: ?*objc.SInt8) callconv(.C) objc.SInt8;

pub extern "CoreServices" fn AddAtomic8(amount: objc.SInt32, address: ?*objc.SInt8) callconv(.C) objc.SInt8;

pub extern "CoreServices" fn BitAndAtomic8(mask: objc.UInt32, address: ?*objc.UInt8) callconv(.C) objc.UInt8;

pub extern "CoreServices" fn BitOrAtomic8(mask: objc.UInt32, address: ?*objc.UInt8) callconv(.C) objc.UInt8;

pub extern "CoreServices" fn BitXorAtomic8(mask: objc.UInt32, address: ?*objc.UInt8) callconv(.C) objc.UInt8;

pub extern "CoreServices" fn IncrementAtomic16(address: ?*objc.SInt16) callconv(.C) objc.SInt16;

pub extern "CoreServices" fn DecrementAtomic16(address: ?*objc.SInt16) callconv(.C) objc.SInt16;

pub extern "CoreServices" fn AddAtomic16(amount: objc.SInt32, address: ?*objc.SInt16) callconv(.C) objc.SInt16;

pub extern "CoreServices" fn BitAndAtomic16(mask: objc.UInt32, address: ?*objc.UInt16) callconv(.C) objc.UInt16;

pub extern "CoreServices" fn BitOrAtomic16(mask: objc.UInt32, address: ?*objc.UInt16) callconv(.C) objc.UInt16;

pub extern "CoreServices" fn BitXorAtomic16(mask: objc.UInt32, address: ?*objc.UInt16) callconv(.C) objc.UInt16;

pub extern "CoreServices" fn IncrementAtomic(address: ?*objc.SInt32) callconv(.C) objc.SInt32;

pub extern "CoreServices" fn DecrementAtomic(address: ?*objc.SInt32) callconv(.C) objc.SInt32;

pub extern "CoreServices" fn AddAtomic(amount: objc.SInt32, address: ?*objc.SInt32) callconv(.C) objc.SInt32;

pub extern "CoreServices" fn BitAndAtomic(mask: objc.UInt32, address: ?*objc.UInt32) callconv(.C) objc.UInt32;

pub extern "CoreServices" fn BitOrAtomic(mask: objc.UInt32, address: ?*objc.UInt32) callconv(.C) objc.UInt32;

pub extern "CoreServices" fn BitXorAtomic(mask: objc.UInt32, address: ?*objc.UInt32) callconv(.C) objc.UInt32;

pub const OpaqueAreaID = extern struct {};

pub const AreaID = OpaqueAreaID;

pub const MachineInformationPowerPC = extern struct {
    CTR: objc.UnsignedWide,
    LR: objc.UnsignedWide,
    PC: objc.UnsignedWide,
    CRRegister: u64,
    XER: u64,
    MSR: u64,
    MQ: u64,
    ExceptKind: u64,
    DSISR: u64,
    DAR: objc.UnsignedWide,
    Reserved: objc.UnsignedWide,
};

pub const RegisterInformationPowerPC = extern struct {
    R0: objc.UnsignedWide,
    R1: objc.UnsignedWide,
    R2: objc.UnsignedWide,
    R3: objc.UnsignedWide,
    R4: objc.UnsignedWide,
    R5: objc.UnsignedWide,
    R6: objc.UnsignedWide,
    R7: objc.UnsignedWide,
    R8: objc.UnsignedWide,
    R9: objc.UnsignedWide,
    R10: objc.UnsignedWide,
    R11: objc.UnsignedWide,
    R12: objc.UnsignedWide,
    R13: objc.UnsignedWide,
    R14: objc.UnsignedWide,
    R15: objc.UnsignedWide,
    R16: objc.UnsignedWide,
    R17: objc.UnsignedWide,
    R18: objc.UnsignedWide,
    R19: objc.UnsignedWide,
    R20: objc.UnsignedWide,
    R21: objc.UnsignedWide,
    R22: objc.UnsignedWide,
    R23: objc.UnsignedWide,
    R24: objc.UnsignedWide,
    R25: objc.UnsignedWide,
    R26: objc.UnsignedWide,
    R27: objc.UnsignedWide,
    R28: objc.UnsignedWide,
    R29: objc.UnsignedWide,
    R30: objc.UnsignedWide,
    R31: objc.UnsignedWide,
};

pub const FPUInformationPowerPC = extern struct {
    Registers: [32]objc.UnsignedWide,
    FPSCR: u64,
    Reserved: u64,
};

pub const Vector128 = extern union {
    l: [4]u64,
    s: [8]u16,
    c: [16]u8,
};

pub const VectorInformationPowerPC = extern struct {
    Registers: [32]Vector128,
    VSCR: Vector128,
    VRsave: objc.UInt32,
};

pub const MemoryReferenceKind = u64;

pub const MemoryExceptionInformation = extern struct {
    theArea: AreaID,
    theAddress: objc.LogicalAddress,
    theError: objc.OSStatus,
    theReference: MemoryReferenceKind,
};

pub const anon1411 = u32;
pub const anon1411_UnknownException: u32 = 0;
pub const anon1411_IllegalInstructionException: u32 = 1;
pub const anon1411_TrapException: u32 = 2;
pub const anon1411_AccessException: u32 = 3;
pub const anon1411_UnmappedMemoryException: u32 = 4;
pub const anon1411_ExcludedMemoryException: u32 = 5;
pub const anon1411_ReadOnlyMemoryException: u32 = 6;
pub const anon1411_UnresolvablePageFaultException: u32 = 7;
pub const anon1411_PrivilegeViolationException: u32 = 8;
pub const anon1411_TraceException: u32 = 9;
pub const anon1411_InstructionBreakpointException: u32 = 10;
pub const anon1411_DataBreakpointException: u32 = 11;
pub const anon1411_IntegerException: u32 = 12;
pub const anon1411_FloatingPointException: u32 = 13;
pub const anon1411_StackOverflowException: u32 = 14;
pub const anon1411_TaskTerminationException: u32 = 15;
pub const anon1411_TaskCreationException: u32 = 16;
pub const anon1411_DataAlignmentException: u32 = 17;

pub const ExceptionKind = u64;

pub const ExceptionInfo = extern union {
    memoryInfo: ?*MemoryExceptionInformation,
};

pub const ExceptionInformationPowerPC = extern struct {
    theKind: ExceptionKind,
    machineState: ?*MachineInformationPowerPC,
    registerImage: ?*RegisterInformationPowerPC,
    FPUImage: ?*FPUInformationPowerPC,
    info: ExceptionInfo,
    vectorImage: ?*VectorInformationPowerPC,
};

pub const MachineInformation = extern struct {
    __unusedMachineInformationField: ?*anyopaque,
};

pub const RegisterInformation = extern struct {
    __unusedRegisterInformationField: ?*anyopaque,
};

pub const FPUInformation = extern struct {
    __unusedFPUInformationField: ?*anyopaque,
};

pub const VectorInformation = extern struct {
    __unusedVectorInformationField: ?*anyopaque,
};

pub const ExceptionInformation = extern struct {
    theKind: ExceptionKind,
    machineState: ?*MachineInformation,
    registerImage: ?*RegisterInformation,
    FPUImage: ?*FPUInformation,
    info: ExceptionInfo,
    vectorImage: ?*VectorInformation,
};

pub const ExceptionHandlerProcPtr = objc.OSStatus;

pub const ExceptionHandlerUPP = ExceptionHandlerProcPtr;

pub extern "CoreServices" fn NewExceptionHandlerUPP(userRoutine: ExceptionHandlerProcPtr) callconv(.C) ExceptionHandlerUPP;

pub extern "CoreServices" fn DisposeExceptionHandlerUPP(userUPP: ExceptionHandlerUPP) callconv(.C) void;

pub extern "CoreServices" fn InvokeExceptionHandlerUPP(theException: ?*ExceptionInformation, userUPP: ExceptionHandlerUPP) callconv(.C) objc.OSStatus;

pub const ExceptionHandlerTPP = ExceptionHandlerUPP;

pub const ExceptionHandler = ExceptionHandlerTPP;

pub extern "CoreServices" fn InstallExceptionHandler(theHandler: ExceptionHandlerTPP) callconv(.C) ExceptionHandlerTPP;

pub const anon491 = i32;
pub const anon491_durationMicrosecond: i32 = -1;
pub const anon491_durationMillisecond: i32 = 1;
pub const anon491_durationSecond: i32 = 1000;
pub const anon491_durationMinute: i32 = 60000;
pub const anon491_durationHour: i32 = 3600000;
pub const anon491_durationDay: i32 = 86400000;
pub const anon491_durationNoWait: i32 = 0;
pub const anon491_durationForever: i32 = 2147483647;
pub const anon491_eyDirectObject: i32 = 757935405;
pub const anon491_eyErrorNumber: i32 = 1701999214;
pub const anon491_eyErrorString: i32 = 1701999219;
pub const anon491_eyProcessSerialNumber: i32 = 1886613024;
pub const anon491_eyPreDispatch: i32 = 1885888867;
pub const anon491_eySelectProc: i32 = 1936026728;
pub const anon491_eyAERecorderCount: i32 = 1919247218;
pub const anon491_eyAEVersion: i32 = 1986359923;
pub const anon491_SecUseOnlyUID: i32 = 1;
pub const anon491_SecUseOnlyGID: i32 = 2;
pub const anon491_SecHonorRoot: i32 = 256;
pub const anon491_SecMatchBits: i32 = 3;

pub const Nanoseconds = objc.UnsignedWide;

pub extern "CoreServices" fn UpTime() callconv(.C) objc.AbsoluteTime;

pub extern "CoreServices" fn AbsoluteToNanoseconds(absoluteTime: objc.AbsoluteTime) callconv(.C) Nanoseconds;

pub extern "CoreServices" fn AbsoluteToDuration(absoluteTime: objc.AbsoluteTime) callconv(.C) objc.Duration;

pub extern "CoreServices" fn NanosecondsToAbsolute(nanoseconds: Nanoseconds) callconv(.C) objc.AbsoluteTime;

pub extern "CoreServices" fn DurationToAbsolute(duration: objc.Duration) callconv(.C) objc.AbsoluteTime;

pub extern "CoreServices" fn AddAbsoluteToAbsolute(absoluteTime1: objc.AbsoluteTime, absoluteTime2: objc.AbsoluteTime) callconv(.C) objc.AbsoluteTime;

pub extern "CoreServices" fn SubAbsoluteFromAbsolute(leftAbsoluteTime: objc.AbsoluteTime, rightAbsoluteTime: objc.AbsoluteTime) callconv(.C) objc.AbsoluteTime;

pub extern "CoreServices" fn AddNanosecondsToAbsolute(nanoseconds: Nanoseconds, absoluteTime: objc.AbsoluteTime) callconv(.C) objc.AbsoluteTime;

pub extern "CoreServices" fn AddDurationToAbsolute(duration: objc.Duration, absoluteTime: objc.AbsoluteTime) callconv(.C) objc.AbsoluteTime;

pub extern "CoreServices" fn SubNanosecondsFromAbsolute(nanoseconds: Nanoseconds, absoluteTime: objc.AbsoluteTime) callconv(.C) objc.AbsoluteTime;

pub extern "CoreServices" fn SubDurationFromAbsolute(duration: objc.Duration, absoluteTime: objc.AbsoluteTime) callconv(.C) objc.AbsoluteTime;

pub extern "CoreServices" fn AbsoluteDeltaToNanoseconds(leftAbsoluteTime: objc.AbsoluteTime, rightAbsoluteTime: objc.AbsoluteTime) callconv(.C) Nanoseconds;

pub extern "CoreServices" fn AbsoluteDeltaToDuration(leftAbsoluteTime: objc.AbsoluteTime, rightAbsoluteTime: objc.AbsoluteTime) callconv(.C) objc.Duration;

pub extern "CoreServices" fn DurationToNanoseconds(theDuration: objc.Duration) callconv(.C) Nanoseconds;

pub extern "CoreServices" fn NanosecondsToDuration(theNanoseconds: Nanoseconds) callconv(.C) objc.Duration;

pub const NumFormatString = extern struct {
    fLength: objc.UInt8,
    fVersion: objc.UInt8,
    data: [254]i8,
};

pub const NumFormatStringRec = NumFormatString;

pub const FormatStatus = i16;

pub const FormatClass = objc.SInt8;

pub const FormatResultType = objc.SInt8;

pub const FVector = extern struct {
    start: i16,
    length: i16,
};

pub const TripleInt = FVector;

pub extern "CoreServices" fn numtostring(theNum: i64, theString: ?*i8) callconv(.C) void;

pub extern "CoreServices" fn Munger(
    h: objc.Handle,
    offset: i64,
    ptr1: ?*anyopaque,
    len1: i64,
    ptr2: ?*anyopaque,
    len2: i64,
) callconv(.C) i64;

pub extern "CoreServices" fn BitTst(bytePtr: ?*anyopaque, bitNum: i64) callconv(.C) objc.Boolean;

pub extern "CoreServices" fn BitSet(bytePtr: ?*anyopaque, bitNum: i64) callconv(.C) void;

pub extern "CoreServices" fn BitClr(bytePtr: ?*anyopaque, bitNum: i64) callconv(.C) void;

pub extern "CoreServices" fn BitAnd(value1: i64, value2: i64) callconv(.C) i64;

pub extern "CoreServices" fn BitOr(value1: i64, value2: i64) callconv(.C) i64;

pub extern "CoreServices" fn BitXor(value1: i64, value2: i64) callconv(.C) i64;

pub extern "CoreServices" fn BitNot(value: i64) callconv(.C) i64;

pub extern "CoreServices" fn BitShift(value: i64, count: i16) callconv(.C) i64;

pub const UCKeyOutput = objc.UInt16;

pub const UCKeyCharSeq = objc.UInt16;

pub const UCKeyStateRecord = extern struct {
    stateZeroCharData: UCKeyCharSeq,
    stateZeroNextState: objc.UInt16,
    stateEntryCount: objc.UInt16,
    stateEntryFormat: objc.UInt16,
    stateEntryData: [1]objc.UInt32,
};

pub const UCKeyStateEntryTerminal = extern struct {
    curState: objc.UInt16,
    charData: UCKeyCharSeq,
};

pub const UCKeyStateEntryRange = extern struct {
    curStateStart: objc.UInt16,
    curStateRange: objc.UInt8,
    deltaMultiplier: objc.UInt8,
    charData: UCKeyCharSeq,
    nextState: objc.UInt16,
};

pub const UCKeyboardTypeHeader = extern struct {
    keyboardTypeFirst: objc.UInt32,
    keyboardTypeLast: objc.UInt32,
    keyModifiersToTableNumOffset: objc.UInt32,
    keyToCharTableIndexOffset: objc.UInt32,
    keyStateRecordsIndexOffset: objc.UInt32,
    keyStateTerminatorsOffset: objc.UInt32,
    keySequenceDataIndexOffset: objc.UInt32,
};

pub const UCKeyboardLayout = extern struct {
    keyLayoutHeaderFormat: objc.UInt16,
    keyLayoutDataVersion: objc.UInt16,
    keyLayoutFeatureInfoOffset: objc.UInt32,
    keyboardTypeCount: objc.UInt32,
    keyboardTypeList: [1]UCKeyboardTypeHeader,
};

pub const UCKeyLayoutFeatureInfo = extern struct {
    keyLayoutFeatureInfoFormat: objc.UInt16,
    reserved: objc.UInt16,
    maxOutputStringLength: objc.UInt32,
};

pub const UCKeyModifiersToTableNum = extern struct {
    keyModifiersToTableNumFormat: objc.UInt16,
    defaultTableNum: objc.UInt16,
    modifiersCount: objc.UInt32,
    tableNum: [1]objc.UInt8,
};

pub const UCKeyToCharTableIndex = extern struct {
    keyToCharTableIndexFormat: objc.UInt16,
    keyToCharTableSize: objc.UInt16,
    keyToCharTableCount: objc.UInt32,
    keyToCharTableOffsets: [1]objc.UInt32,
};

pub const UCKeyStateRecordsIndex = extern struct {
    keyStateRecordsIndexFormat: objc.UInt16,
    keyStateRecordCount: objc.UInt16,
    keyStateRecordOffsets: [1]objc.UInt32,
};

pub const UCKeyStateTerminators = extern struct {
    keyStateTerminatorsFormat: objc.UInt16,
    keyStateTerminatorCount: objc.UInt16,
    keyStateTerminators: [1]UCKeyCharSeq,
};

pub const UCKeySequenceDataIndex = extern struct {
    keySequenceDataIndexFormat: objc.UInt16,
    charSequenceCount: objc.UInt16,
    charSequenceOffsets: [1]objc.UInt16,
};

pub const anon2421 = u32;
pub const anon2421_UCKeyLayoutHeaderFormat: u32 = 4098;
pub const anon2421_UCKeyLayoutFeatureInfoFormat: u32 = 8193;
pub const anon2421_UCKeyModifiersToTableNumFormat: u32 = 12289;
pub const anon2421_UCKeyToCharTableIndexFormat: u32 = 16385;
pub const anon2421_UCKeyStateRecordsIndexFormat: u32 = 20481;
pub const anon2421_UCKeyStateTerminatorsFormat: u32 = 24577;
pub const anon2421_UCKeySequenceDataIndexFormat: u32 = 28673;

pub const anon2591 = u32;
pub const anon2591_UCKeyActionDown: u32 = 0;
pub const anon2591_UCKeyActionUp: u32 = 1;
pub const anon2591_UCKeyActionAutoKey: u32 = 2;
pub const anon2591_UCKeyActionDisplay: u32 = 3;

pub const anon2721 = u32;
pub const anon2721_UCKeyTranslateNoDeadKeysBit: u32 = 0;

pub const anon2761 = u32;
pub const anon2761_UCKeyTranslateNoDeadKeysMask: u32 = 1;

pub const anon2871 = u32;
pub const anon2871_UnicodeCollationClass: u32 = 1969450860;

pub const OpaqueCollatorRef = extern struct {};

pub const CollatorRef = OpaqueCollatorRef;

pub const UCCollateOptions = objc.UInt32;

pub const anon3041 = u32;
pub const anon3041_UCCollateStandardOptions: u32 = 6;
pub const anon3041_MPQueueInfoVersion: u32 = 262145;
pub const anon3041_MPSemaphoreInfoVersion: u32 = 327681;
pub const anon3041_MPEventInfoVersion: u32 = 589825;
pub const anon3041_MPCriticalRegionInfoVersion: u32 = 393217;
pub const anon3041_MPNotificationInfoVersion: u32 = 786433;
pub const anon3041_MPAddressSpaceInfoVersion: u32 = 524289;

pub const anon3121 = u32;
pub const anon3121_UCCollateTypeHFSExtended: u32 = 1;

pub const anon3221 = u32;
pub const anon3221_UCCollateTypeMask: u32 = -16777216;

pub const UCCollationValue = objc.UInt32;

pub const OpaqueUCTypeSelectRef = extern struct {};

pub const UCTypeSelectRef = OpaqueUCTypeSelectRef;

pub const UCTypeSelectCompareResult = objc.SInt32;

pub const UCTSWalkDirection = objc.UInt16;

pub const UCTypeSelectOptions = objc.UInt16;

pub const anon3721 = u32;
pub const anon3721_UCTSOptionsNoneMask: u32 = 0;
pub const anon3721_UCTSOptionsReleaseStringMask: u32 = 1;
pub const anon3721_UCTSOptionsDataIsOrderedMask: u32 = 2;
pub const anon3721_FSEventStreamEventFlagNone: u32 = 0;
pub const anon3721_FSEventStreamEventFlagMustScanSubDirs: u32 = 1;
pub const anon3721_FSEventStreamEventFlagUserDropped: u32 = 2;
pub const anon3721_FSEventStreamEventFlagKernelDropped: u32 = 4;
pub const anon3721_FSEventStreamEventFlagEventIdsWrapped: u32 = 8;
pub const anon3721_FSEventStreamEventFlagHistoryDone: u32 = 16;
pub const anon3721_FSEventStreamEventFlagRootChanged: u32 = 32;
pub const anon3721_FSEventStreamEventFlagMount: u32 = 64;
pub const anon3721_FSEventStreamEventFlagUnmount: u32 = 128;
pub const anon3721_FSEventStreamEventFlagItemCreated: u32 = 256;
pub const anon3721_FSEventStreamEventFlagItemRemoved: u32 = 512;
pub const anon3721_FSEventStreamEventFlagItemInodeMetaMod: u32 = 1024;
pub const anon3721_FSEventStreamEventFlagItemRenamed: u32 = 2048;
pub const anon3721_FSEventStreamEventFlagItemModified: u32 = 4096;
pub const anon3721_FSEventStreamEventFlagItemFinderInfoMod: u32 = 8192;
pub const anon3721_FSEventStreamEventFlagItemChangeOwner: u32 = 16384;
pub const anon3721_FSEventStreamEventFlagItemXattrMod: u32 = 32768;
pub const anon3721_FSEventStreamEventFlagItemIsFile: u32 = 65536;
pub const anon3721_FSEventStreamEventFlagItemIsDir: u32 = 131072;
pub const anon3721_FSEventStreamEventFlagItemIsSymlink: u32 = 262144;
pub const anon3721_FSEventStreamEventFlagOwnEvent: u32 = 524288;
pub const anon3721_FSEventStreamEventFlagItemIsHardlink: u32 = 1048576;
pub const anon3721_FSEventStreamEventFlagItemIsLastHardlink: u32 = 2097152;
pub const anon3721_FSEventStreamEventFlagItemCloned: u32 = 4194304;

pub const IndexToUCStringProcPtr = objc.Boolean;

pub const IndexToUCStringUPP = IndexToUCStringProcPtr;

pub extern "CoreServices" fn NewIndexToUCStringUPP(userRoutine: IndexToUCStringProcPtr) callconv(.C) IndexToUCStringUPP;

pub extern "CoreServices" fn DisposeIndexToUCStringUPP(userUPP: IndexToUCStringUPP) callconv(.C) void;

pub extern "CoreServices" fn InvokeIndexToUCStringUPP(
    index: objc.UInt32,
    listDataPtr: ?*anyopaque,
    refcon: ?*anyopaque,
    outString: ?*core_foundation.StringRef,
    tsOptions: ?*UCTypeSelectOptions,
    userUPP: IndexToUCStringUPP,
) callconv(.C) objc.Boolean;

pub const anon4541 = u32;
pub const anon4541_UnicodeTextBreakClass: u32 = 1969386091;

pub const OpaqueTextBreakLocatorRef = extern struct {};

pub const TextBreakLocatorRef = OpaqueTextBreakLocatorRef;

pub const UCTextBreakType = objc.UInt32;

pub const anon4671 = u32;
pub const anon4671_UCTextBreakCharMask: u32 = 1;
pub const anon4671_UCTextBreakClusterMask: u32 = 4;
pub const anon4671_UCTextBreakWordMask: u32 = 16;
pub const anon4671_UCTextBreakLineMask: u32 = 64;
pub const anon4671_UCTextBreakParagraphMask: u32 = 256;
pub const anon4671_PEFHashSlotSymCountShift: u32 = 18;
pub const anon4671_PEFHashSlotFirstKeyMask: u32 = 262143;
pub const anon4671_PEFHashSlotMaxSymbolCount: u32 = 16383;
pub const anon4671_PEFHashSlotMaxKeyIndex: u32 = 262143;
pub const anon4671_SecCSInternalInformation: u32 = 1;
pub const anon4671_SecCSSigningInformation: u32 = 2;
pub const anon4671_SecCSRequirementInformation: u32 = 4;
pub const anon4671_SecCSDynamicInformation: u32 = 8;
pub const anon4671_SecCSContentInformation: u32 = 16;
pub const anon4671_SecCSSkipResourceDirectory: u32 = 32;
pub const anon4671_SecCSCalculateCMSDigest: u32 = 64;

pub const UCTextBreakOptions = objc.UInt32;

pub const anon5041 = u32;
pub const anon5041_UCTextBreakLeadingEdgeMask: u32 = 1;
pub const anon5041_UCTextBreakGoBackwardsMask: u32 = 2;
pub const anon5041_UCTextBreakIterateMask: u32 = 4;
pub const anon5041_pTextStyles: u32 = 1954050932;
pub const anon5041_pTransferMode: u32 = 1886418029;
pub const anon5041_pTranslation: u32 = 1886679667;
pub const anon5041_pUniformStyles: u32 = 1970500716;
pub const anon5041_pUpdateOn: u32 = 1886744676;
pub const anon5041_pUserSelection: u32 = 1886745452;
pub const anon5041_pVersion: u32 = 1986359923;
pub const anon5041_pVisible: u32 = 1886808435;

pub extern "CoreServices" fn UCKeyTranslate(
    keyLayoutPtr: ?*UCKeyboardLayout,
    virtualKeyCode: objc.UInt16,
    keyAction: objc.UInt16,
    modifierKeyState: objc.UInt32,
    keyboardType: objc.UInt32,
    keyTranslateOptions: objc.OptionBits,
    deadKeyState: ?*objc.UInt32,
    maxStringLength: objc.UniCharCount,
    actualStringLength: ?*objc.UniCharCount,
    unicodeString: *objc.UniChar,
) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn UCCreateCollator(
    locale: LocaleRef,
    opVariant: LocaleOperationVariant,
    options: UCCollateOptions,
    collatorRef: ?*CollatorRef,
) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn UCGetCollationKey(
    collatorRef: CollatorRef,
    textPtr: ?*objc.UniChar,
    textLength: objc.UniCharCount,
    maxKeySize: objc.ItemCount,
    actualKeySize: ?*objc.ItemCount,
    collationKey: *UCCollationValue,
) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn UCCompareCollationKeys(
    key1Ptr: ?*UCCollationValue,
    key1Length: objc.ItemCount,
    key2Ptr: ?*UCCollationValue,
    key2Length: objc.ItemCount,
    equivalent: ?*objc.Boolean,
    order: ?*objc.SInt32,
) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn UCCompareText(
    collatorRef: CollatorRef,
    text1Ptr: ?*objc.UniChar,
    text1Length: objc.UniCharCount,
    text2Ptr: ?*objc.UniChar,
    text2Length: objc.UniCharCount,
    equivalent: ?*objc.Boolean,
    order: ?*objc.SInt32,
) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn UCDisposeCollator(collatorRef: ?*CollatorRef) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn UCCompareTextDefault(
    options: UCCollateOptions,
    text1Ptr: ?*objc.UniChar,
    text1Length: objc.UniCharCount,
    text2Ptr: ?*objc.UniChar,
    text2Length: objc.UniCharCount,
    equivalent: ?*objc.Boolean,
    order: ?*objc.SInt32,
) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn UCCompareTextNoLocale(
    options: UCCollateOptions,
    text1Ptr: ?*objc.UniChar,
    text1Length: objc.UniCharCount,
    text2Ptr: ?*objc.UniChar,
    text2Length: objc.UniCharCount,
    equivalent: ?*objc.Boolean,
    order: ?*objc.SInt32,
) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn UCCreateTextBreakLocator(
    locale: LocaleRef,
    opVariant: LocaleOperationVariant,
    breakTypes: UCTextBreakType,
    breakRef: ?*TextBreakLocatorRef,
) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn UCFindTextBreak(
    breakRef: TextBreakLocatorRef,
    breakType: UCTextBreakType,
    options: UCTextBreakOptions,
    textPtr: ?*objc.UniChar,
    textLength: objc.UniCharCount,
    startOffset: UniCharArrayOffset,
    breakOffset: ?*UniCharArrayOffset,
) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn UCDisposeTextBreakLocator(breakRef: ?*TextBreakLocatorRef) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn UCTypeSelectCreateSelector(
    locale: LocaleRef,
    opVariant: LocaleOperationVariant,
    options: UCCollateOptions,
    newSelector: ?*UCTypeSelectRef,
) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn UCTypeSelectFlushSelectorData(ref: UCTypeSelectRef) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn UCTypeSelectReleaseSelector(ref: ?*UCTypeSelectRef) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn UCTypeSelectWouldResetBuffer(inRef: UCTypeSelectRef, inText: core_foundation.StringRef, inEventTime: f64) callconv(.C) objc.Boolean;

pub extern "CoreServices" fn UCTypeSelectAddKeyToSelector(
    inRef: UCTypeSelectRef,
    inText: core_foundation.StringRef,
    inEventTime: f64,
    updateFlag: ?*objc.Boolean,
) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn UCTypeSelectCompare(ref: UCTypeSelectRef, inText: core_foundation.StringRef, result: ?*UCTypeSelectCompareResult) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn UCTypeSelectFindItem(
    ref: UCTypeSelectRef,
    listSize: objc.UInt32,
    listDataPtr: ?*anyopaque,
    refcon: ?*anyopaque,
    userUPP: IndexToUCStringUPP,
    closestItem: ?*objc.UInt32,
) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn UCTypeSelectWalkList(
    ref: UCTypeSelectRef,
    currSelect: core_foundation.StringRef,
    direction: UCTSWalkDirection,
    listSize: objc.UInt32,
    listDataPtr: ?*anyopaque,
    refcon: ?*anyopaque,
    userUPP: IndexToUCStringUPP,
    closestItem: ?*objc.UInt32,
) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn compound(rate: f64, periods: f64) callconv(.C) f64;

pub extern "CoreServices" fn annuity(rate: f64, periods: f64) callconv(.C) f64;

pub extern "CoreServices" fn randomx(x: ?*objc.double_t) callconv(.C) objc.double_t;

pub const relop = i16;

pub const anon12621 = u32;
pub const anon12621_GREATERTHAN: u32 = 0;
pub const anon12621_LESSTHAN: u32 = 1;
pub const anon12621_EQUALTO: u32 = 2;
pub const anon12621_UNORDERED: u32 = 3;

pub extern "CoreServices" fn relation(x: objc.double_t, y: objc.double_t) callconv(.C) relop;

pub const decimal = extern struct {
    pub const anon13205 = extern struct {
        length: u8,
        text: [36]u8,
        unused: u8,
    };

    sgn: i8,
    unused: i8,
    exp: i16,
    sig: decimal.anon13205,
};

pub const decform = extern struct {
    style: i8,
    unused: i8,
    digits: i16,
};

pub extern "CoreServices" fn num2dec(f: ?*decform, x: objc.double_t, d: ?*decimal) callconv(.C) void;

pub extern "CoreServices" fn dec2num(d: ?*decimal) callconv(.C) objc.double_t;

pub extern "CoreServices" fn dec2str(f: ?*decform, d: ?*decimal, s: ?*i8) callconv(.C) void;

pub extern "CoreServices" fn str2dec(
    s: ?*i8,
    ix: ?*i16,
    d: ?*decimal,
    vp: ?*i16,
) callconv(.C) void;

pub extern "CoreServices" fn dec2f(d: ?*decimal) callconv(.C) f32;

pub extern "CoreServices" fn dec2s(d: ?*decimal) callconv(.C) i16;

pub extern "CoreServices" fn dec2l(d: ?*decimal) callconv(.C) i64;

pub extern "CoreServices" fn relationl(x: f64, y: f64) callconv(.C) relop;

pub extern "CoreServices" fn num2decl(f: ?*decform, x: f64, d: ?*decimal) callconv(.C) void;

pub extern "CoreServices" fn dec2numl(d: ?*decimal) callconv(.C) f64;

pub extern "CoreServices" fn x80tod(x80: ?*objc.extended80) callconv(.C) f64;

pub extern "CoreServices" fn dtox80(x: ?*f64, x80: ?*objc.extended80) callconv(.C) void;

pub extern "CoreServices" fn x80told(x80: ?*objc.extended80, x: ?*f64) callconv(.C) void;

pub extern "CoreServices" fn ldtox80(x: ?*f64, x80: ?*objc.extended80) callconv(.C) void;

pub const TECPluginSignature = objc.OSType;

pub const TECPluginVersion = objc.UInt32;

pub const OpaqueTECObjectRef = extern struct {};

pub const TECObjectRef = OpaqueTECObjectRef;

pub const OpaqueTECSnifferObjectRef = extern struct {};

pub const TECSnifferObjectRef = OpaqueTECSnifferObjectRef;

pub const TECPluginSig = objc.OSType;

pub const TECConversionInfo = extern struct {
    sourceEncoding: TextEncoding,
    destinationEncoding: TextEncoding,
    reserved1: objc.UInt16,
    reserved2: objc.UInt16,
};

pub const TECInternetNameUsageMask = objc.UInt32;

pub const anon1111 = u32;
pub const anon1111_TECDisableFallbacksMask: u32 = 65536;
pub const anon1111_TECDisableLooseMappingsMask: u32 = 131072;
pub const anon1111_CertificateKCItemClass: u32 = 1667592820;
pub const anon1111_AppleSharePasswordKCItemClass: u32 = 1634953328;
pub const anon1111_InternetPasswordKCItemClass: u32 = 1768842612;
pub const anon1111_GenericPasswordKCItemClass: u32 = 1734700656;

pub extern "CoreServices" fn TECCountAvailableTextEncodings(numberEncodings: ?*objc.ItemCount) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn TECGetAvailableTextEncodings(availableEncodings: *TextEncoding, maxAvailableEncodings: objc.ItemCount, actualAvailableEncodings: ?*objc.ItemCount) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn TECCountDirectTextEncodingConversions(numberOfEncodings: ?*objc.ItemCount) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn TECGetDirectTextEncodingConversions(availableConversions: *TECConversionInfo, maxAvailableConversions: objc.ItemCount, actualAvailableConversions: ?*objc.ItemCount) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn TECCountDestinationTextEncodings(inputEncoding: TextEncoding, numberOfEncodings: ?*objc.ItemCount) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn TECGetDestinationTextEncodings(
    inputEncoding: TextEncoding,
    destinationEncodings: *TextEncoding,
    maxDestinationEncodings: objc.ItemCount,
    actualDestinationEncodings: ?*objc.ItemCount,
) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn TECGetTextEncodingInternetName(textEncoding: TextEncoding, encodingName: objc.Str255) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn TECGetTextEncodingFromInternetName(textEncoding: ?*TextEncoding, encodingName: objc.ConstStr255Param) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn TECCreateConverter(newEncodingConverter: ?*TECObjectRef, inputEncoding: TextEncoding, outputEncoding: TextEncoding) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn TECCreateConverterFromPath(newEncodingConverter: ?*TECObjectRef, inPath: *TextEncoding, inEncodings: objc.ItemCount) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn TECDisposeConverter(newEncodingConverter: TECObjectRef) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn TECClearConverterContextInfo(encodingConverter: TECObjectRef) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn TECConvertText(
    encodingConverter: TECObjectRef,
    inputBuffer: ConstTextPtr,
    inputBufferLength: objc.ByteCount,
    actualInputLength: ?*objc.ByteCount,
    outputBuffer: TextPtr,
    outputBufferLength: objc.ByteCount,
    actualOutputLength: ?*objc.ByteCount,
) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn TECFlushText(
    encodingConverter: TECObjectRef,
    outputBuffer: TextPtr,
    outputBufferLength: objc.ByteCount,
    actualOutputLength: ?*objc.ByteCount,
) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn TECCountSubTextEncodings(inputEncoding: TextEncoding, numberOfEncodings: ?*objc.ItemCount) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn TECGetSubTextEncodings(
    inputEncoding: TextEncoding,
    subEncodings: *TextEncoding,
    maxSubEncodings: objc.ItemCount,
    actualSubEncodings: ?*objc.ItemCount,
) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn TECGetEncodingList(encodingConverter: TECObjectRef, numEncodings: ?*objc.ItemCount, encodingList: ?*objc.Handle) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn TECCreateOneToManyConverter(
    newEncodingConverter: ?*TECObjectRef,
    inputEncoding: TextEncoding,
    numOutputEncodings: objc.ItemCount,
    outputEncodings: *TextEncoding,
) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn TECConvertTextToMultipleEncodings(
    encodingConverter: TECObjectRef,
    inputBuffer: ConstTextPtr,
    inputBufferLength: objc.ByteCount,
    actualInputLength: ?*objc.ByteCount,
    outputBuffer: TextPtr,
    outputBufferLength: objc.ByteCount,
    actualOutputLength: ?*objc.ByteCount,
    outEncodingsBuffer: *TextEncodingRun,
    maxOutEncodingRuns: objc.ItemCount,
    actualOutEncodingRuns: ?*objc.ItemCount,
) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn TECFlushMultipleEncodings(
    encodingConverter: TECObjectRef,
    outputBuffer: TextPtr,
    outputBufferLength: objc.ByteCount,
    actualOutputLength: ?*objc.ByteCount,
    outEncodingsBuffer: *TextEncodingRun,
    maxOutEncodingRuns: objc.ItemCount,
    actualOutEncodingRuns: ?*objc.ItemCount,
) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn TECCountWebTextEncodings(locale: objc.RegionCode, numberEncodings: ?*objc.ItemCount) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn TECGetWebTextEncodings(
    locale: objc.RegionCode,
    availableEncodings: *TextEncoding,
    maxAvailableEncodings: objc.ItemCount,
    actualAvailableEncodings: ?*objc.ItemCount,
) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn TECCountMailTextEncodings(locale: objc.RegionCode, numberEncodings: ?*objc.ItemCount) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn TECGetMailTextEncodings(
    locale: objc.RegionCode,
    availableEncodings: *TextEncoding,
    maxAvailableEncodings: objc.ItemCount,
    actualAvailableEncodings: ?*objc.ItemCount,
) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn TECCountAvailableSniffers(numberOfEncodings: ?*objc.ItemCount) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn TECGetAvailableSniffers(availableSniffers: *TextEncoding, maxAvailableSniffers: objc.ItemCount, actualAvailableSniffers: ?*objc.ItemCount) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn TECCreateSniffer(encodingSniffer: ?*TECSnifferObjectRef, testEncodings: *TextEncoding, numTextEncodings: objc.ItemCount) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn TECSniffTextEncoding(
    encodingSniffer: TECSnifferObjectRef,
    inputBuffer: ConstTextPtr,
    inputBufferLength: objc.ByteCount,
    testEncodings: *TextEncoding,
    numTextEncodings: objc.ItemCount,
    numErrsArray: *objc.ItemCount,
    maxErrs: objc.ItemCount,
    numFeaturesArray: *objc.ItemCount,
    maxFeatures: objc.ItemCount,
) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn TECDisposeSniffer(encodingSniffer: TECSnifferObjectRef) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn TECClearSnifferContextInfo(encodingSniffer: TECSnifferObjectRef) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn TECSetBasicOptions(encodingConverter: TECObjectRef, controlFlags: objc.OptionBits) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn TECCopyTextEncodingInternetNameAndMIB(
    textEncoding: TextEncoding,
    usage: TECInternetNameUsageMask,
    encodingNamePtr: ?*core_foundation.StringRef,
    mibEnumPtr: ?*objc.SInt32,
) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn TECGetTextEncodingFromInternetNameOrMIB(
    textEncodingPtr: ?*TextEncoding,
    usage: TECInternetNameUsageMask,
    encodingName: core_foundation.StringRef,
    mibEnum: objc.SInt32,
) callconv(.C) objc.OSStatus;

pub const OpaqueTextToUnicodeInfo = extern struct {};

pub const TextToUnicodeInfo = OpaqueTextToUnicodeInfo;

pub const OpaqueUnicodeToTextInfo = extern struct {};

pub const UnicodeToTextInfo = OpaqueUnicodeToTextInfo;

pub const OpaqueUnicodeToTextRunInfo = extern struct {};

pub const UnicodeToTextRunInfo = OpaqueUnicodeToTextRunInfo;

pub const ConstTextToUnicodeInfo = TextToUnicodeInfo;

pub const ConstUnicodeToTextInfo = UnicodeToTextInfo;

pub const UnicodeMapVersion = objc.SInt32;

pub const UnicodeMapping = extern struct {
    unicodeEncoding: TextEncoding,
    otherEncoding: TextEncoding,
    mappingVersion: UnicodeMapVersion,
};

pub const UnicodeMappingPtr = UnicodeMapping;

pub const ConstUnicodeMappingPtr = UnicodeMapping;

pub const anon1091 = u32;
pub const anon1091_UnicodeDefaultDirection: u32 = 0;
pub const anon1091_UnicodeLeftToRight: u32 = 1;
pub const anon1091_UnicodeRightToLeft: u32 = 2;

pub const anon1531 = u32;
pub const anon1531_UnicodeMatchUnicodeBaseMask: u32 = 1;
pub const anon1531_UnicodeMatchUnicodeVariantMask: u32 = 2;
pub const anon1531_UnicodeMatchUnicodeFormatMask: u32 = 4;
pub const anon1531_UnicodeMatchOtherBaseMask: u32 = 8;
pub const anon1531_UnicodeMatchOtherVariantMask: u32 = 16;
pub const anon1531_UnicodeMatchOtherFormatMask: u32 = 32;

pub const anon1631 = u32;
pub const anon1631_UnicodeFallbackSequencingBits: u32 = 0;
pub const anon1631_CSSM_ACL_MATCH_UID: u32 = 1;
pub const anon1631_CSSM_ACL_MATCH_GID: u32 = 2;
pub const anon1631_CSSM_ACL_MATCH_HONOR_ROOT: u32 = 256;
pub const anon1631_CSSM_ACL_MATCH_BITS: u32 = 3;

pub const anon1731 = u32;
pub const anon1731_UnicodeFallbackDefaultOnly: u32 = 0;
pub const anon1731_UnicodeFallbackCustomOnly: u32 = 1;
pub const anon1731_UnicodeFallbackDefaultFirst: u32 = 2;
pub const anon1731_UnicodeFallbackCustomFirst: u32 = 3;

pub const UnicodeToTextFallbackProcPtr = objc.OSStatus;

pub const UnicodeToTextFallbackUPP = UnicodeToTextFallbackProcPtr;

pub extern "CoreServices" fn NewUnicodeToTextFallbackUPP(userRoutine: UnicodeToTextFallbackProcPtr) callconv(.C) UnicodeToTextFallbackUPP;

pub extern "CoreServices" fn DisposeUnicodeToTextFallbackUPP(userUPP: UnicodeToTextFallbackUPP) callconv(.C) void;

pub extern "CoreServices" fn InvokeUnicodeToTextFallbackUPP(
    iSrcUniStr: ?*objc.UniChar,
    iSrcUniStrLen: objc.ByteCount,
    oSrcConvLen: ?*objc.ByteCount,
    oDestStr: TextPtr,
    iDestStrLen: objc.ByteCount,
    oDestConvLen: ?*objc.ByteCount,
    iInfoPtr: objc.LogicalAddress,
    iUnicodeMappingPtr: ConstUnicodeMappingPtr,
    userUPP: UnicodeToTextFallbackUPP,
) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn CreateTextToUnicodeInfo(iUnicodeMapping: ConstUnicodeMappingPtr, oTextToUnicodeInfo: ?*TextToUnicodeInfo) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn CreateTextToUnicodeInfoByEncoding(iEncoding: TextEncoding, oTextToUnicodeInfo: ?*TextToUnicodeInfo) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn CreateUnicodeToTextInfo(iUnicodeMapping: ConstUnicodeMappingPtr, oUnicodeToTextInfo: ?*UnicodeToTextInfo) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn CreateUnicodeToTextInfoByEncoding(iEncoding: TextEncoding, oUnicodeToTextInfo: ?*UnicodeToTextInfo) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn CreateUnicodeToTextRunInfo(iNumberOfMappings: objc.ItemCount, iUnicodeMappings: *UnicodeMapping, oUnicodeToTextInfo: ?*UnicodeToTextRunInfo) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn CreateUnicodeToTextRunInfoByEncoding(iNumberOfEncodings: objc.ItemCount, iEncodings: *TextEncoding, oUnicodeToTextInfo: ?*UnicodeToTextRunInfo) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn CreateUnicodeToTextRunInfoByScriptCode(iNumberOfScriptCodes: objc.ItemCount, iScripts: *objc.ScriptCode, oUnicodeToTextInfo: ?*UnicodeToTextRunInfo) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn ChangeTextToUnicodeInfo(ioTextToUnicodeInfo: TextToUnicodeInfo, iUnicodeMapping: ConstUnicodeMappingPtr) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn ChangeUnicodeToTextInfo(ioUnicodeToTextInfo: UnicodeToTextInfo, iUnicodeMapping: ConstUnicodeMappingPtr) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn DisposeTextToUnicodeInfo(ioTextToUnicodeInfo: ?*TextToUnicodeInfo) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn DisposeUnicodeToTextInfo(ioUnicodeToTextInfo: ?*UnicodeToTextInfo) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn DisposeUnicodeToTextRunInfo(ioUnicodeToTextRunInfo: ?*UnicodeToTextRunInfo) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn ConvertFromTextToUnicode(
    iTextToUnicodeInfo: TextToUnicodeInfo,
    iSourceLen: objc.ByteCount,
    iSourceStr: objc.ConstLogicalAddress,
    iControlFlags: objc.OptionBits,
    iOffsetCount: objc.ItemCount,
    iOffsetArray: *objc.ByteOffset,
    oOffsetCount: ?*objc.ItemCount,
    oOffsetArray: *objc.ByteOffset,
    iOutputBufLen: objc.ByteCount,
    oSourceRead: ?*objc.ByteCount,
    oUnicodeLen: ?*objc.ByteCount,
    oUnicodeStr: *objc.UniChar,
) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn ConvertFromUnicodeToText(
    iUnicodeToTextInfo: UnicodeToTextInfo,
    iUnicodeLen: objc.ByteCount,
    iUnicodeStr: *objc.UniChar,
    iControlFlags: objc.OptionBits,
    iOffsetCount: objc.ItemCount,
    iOffsetArray: *objc.ByteOffset,
    oOffsetCount: ?*objc.ItemCount,
    oOffsetArray: *objc.ByteOffset,
    iOutputBufLen: objc.ByteCount,
    oInputRead: ?*objc.ByteCount,
    oOutputLen: ?*objc.ByteCount,
    oOutputStr: objc.LogicalAddress,
) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn ConvertFromUnicodeToTextRun(
    iUnicodeToTextInfo: UnicodeToTextRunInfo,
    iUnicodeLen: objc.ByteCount,
    iUnicodeStr: *objc.UniChar,
    iControlFlags: objc.OptionBits,
    iOffsetCount: objc.ItemCount,
    iOffsetArray: *objc.ByteOffset,
    oOffsetCount: ?*objc.ItemCount,
    oOffsetArray: *objc.ByteOffset,
    iOutputBufLen: objc.ByteCount,
    oInputRead: ?*objc.ByteCount,
    oOutputLen: ?*objc.ByteCount,
    oOutputStr: objc.LogicalAddress,
    iEncodingRunBufLen: objc.ItemCount,
    oEncodingRunOutLen: ?*objc.ItemCount,
    oEncodingRuns: *TextEncodingRun,
) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn ConvertFromUnicodeToScriptCodeRun(
    iUnicodeToTextInfo: UnicodeToTextRunInfo,
    iUnicodeLen: objc.ByteCount,
    iUnicodeStr: *objc.UniChar,
    iControlFlags: objc.OptionBits,
    iOffsetCount: objc.ItemCount,
    iOffsetArray: *objc.ByteOffset,
    oOffsetCount: ?*objc.ItemCount,
    oOffsetArray: *objc.ByteOffset,
    iOutputBufLen: objc.ByteCount,
    oInputRead: ?*objc.ByteCount,
    oOutputLen: ?*objc.ByteCount,
    oOutputStr: objc.LogicalAddress,
    iScriptRunBufLen: objc.ItemCount,
    oScriptRunOutLen: ?*objc.ItemCount,
    oScriptCodeRuns: *ScriptCodeRun,
) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn TruncateForTextToUnicode(
    iTextToUnicodeInfo: ConstTextToUnicodeInfo,
    iSourceLen: objc.ByteCount,
    iSourceStr: objc.ConstLogicalAddress,
    iMaxLen: objc.ByteCount,
    oTruncatedLen: ?*objc.ByteCount,
) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn TruncateForUnicodeToText(
    iUnicodeToTextInfo: ConstUnicodeToTextInfo,
    iSourceLen: objc.ByteCount,
    iSourceStr: *objc.UniChar,
    iControlFlags: objc.OptionBits,
    iMaxLen: objc.ByteCount,
    oTruncatedLen: ?*objc.ByteCount,
) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn ConvertFromPStringToUnicode(
    iTextToUnicodeInfo: TextToUnicodeInfo,
    iPascalStr: objc.ConstStr255Param,
    iOutputBufLen: objc.ByteCount,
    oUnicodeLen: ?*objc.ByteCount,
    oUnicodeStr: *objc.UniChar,
) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn ConvertFromUnicodeToPString(
    iUnicodeToTextInfo: UnicodeToTextInfo,
    iUnicodeLen: objc.ByteCount,
    iUnicodeStr: *objc.UniChar,
    oPascalStr: objc.Str255,
) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn CountUnicodeMappings(iFilter: objc.OptionBits, iFindMapping: ConstUnicodeMappingPtr, oActualCount: ?*objc.ItemCount) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn QueryUnicodeMappings(
    iFilter: objc.OptionBits,
    iFindMapping: ConstUnicodeMappingPtr,
    iMaxCount: objc.ItemCount,
    oActualCount: ?*objc.ItemCount,
    oReturnedMappings: *UnicodeMapping,
) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn SetFallbackUnicodeToText(
    iUnicodeToTextInfo: UnicodeToTextInfo,
    iFallback: UnicodeToTextFallbackUPP,
    iControlFlags: objc.OptionBits,
    iInfoPtr: objc.LogicalAddress,
) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn SetFallbackUnicodeToTextRun(
    iUnicodeToTextRunInfo: UnicodeToTextRunInfo,
    iFallback: UnicodeToTextFallbackUPP,
    iControlFlags: objc.OptionBits,
    iInfoPtr: objc.LogicalAddress,
) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn ResetTextToUnicodeInfo(ioTextToUnicodeInfo: TextToUnicodeInfo) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn ResetUnicodeToTextInfo(ioUnicodeToTextInfo: UnicodeToTextInfo) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn ResetUnicodeToTextRunInfo(ioUnicodeToTextRunInfo: UnicodeToTextRunInfo) callconv(.C) objc.OSStatus;

pub const ThreadState = objc.UInt16;

pub const ThreadTaskRef = ?*anyopaque;

pub const ThreadStyle = objc.UInt32;

pub const ThreadID = u64;

pub const ThreadOptions = objc.UInt32;

pub const SchedulerInfoRec = extern struct {
    InfoRecSize: objc.UInt32,
    CurrentThreadID: ThreadID,
    SuggestedThreadID: ThreadID,
    InterruptedCoopThreadID: ThreadID,
};

pub const SchedulerInfoRecPtr = SchedulerInfoRec;

pub const voidPtr = ?*anyopaque;

pub const ThreadEntryProcPtr = voidPtr;

pub const ThreadSchedulerProcPtr = ThreadID;

pub const ThreadSwitchProcPtr = ?*const fn (ThreadID, ?*anyopaque) callconv(.C) void;

pub const ThreadTerminationProcPtr = ?*const fn (ThreadID, ?*anyopaque) callconv(.C) void;

pub const DebuggerNewThreadProcPtr = ?*const fn (ThreadID) callconv(.C) void;

pub const DebuggerDisposeThreadProcPtr = ?*const fn (ThreadID) callconv(.C) void;

pub const DebuggerThreadSchedulerProcPtr = ThreadID;

pub const ThreadEntryUPP = ThreadEntryProcPtr;

pub const ThreadSchedulerUPP = ThreadSchedulerProcPtr;

pub const ThreadSwitchUPP = ThreadSwitchProcPtr;

pub const ThreadTerminationUPP = ThreadTerminationProcPtr;

pub const DebuggerNewThreadUPP = DebuggerNewThreadProcPtr;

pub const DebuggerDisposeThreadUPP = DebuggerDisposeThreadProcPtr;

pub const DebuggerThreadSchedulerUPP = DebuggerThreadSchedulerProcPtr;

pub extern "CoreServices" fn NewThreadEntryUPP(userRoutine: ThreadEntryProcPtr) callconv(.C) ThreadEntryUPP;

pub extern "CoreServices" fn NewThreadSchedulerUPP(userRoutine: ThreadSchedulerProcPtr) callconv(.C) ThreadSchedulerUPP;

pub extern "CoreServices" fn NewThreadSwitchUPP(userRoutine: ThreadSwitchProcPtr) callconv(.C) ThreadSwitchUPP;

pub extern "CoreServices" fn NewThreadTerminationUPP(userRoutine: ThreadTerminationProcPtr) callconv(.C) ThreadTerminationUPP;

pub extern "CoreServices" fn NewDebuggerNewThreadUPP(userRoutine: DebuggerNewThreadProcPtr) callconv(.C) DebuggerNewThreadUPP;

pub extern "CoreServices" fn NewDebuggerDisposeThreadUPP(userRoutine: DebuggerDisposeThreadProcPtr) callconv(.C) DebuggerDisposeThreadUPP;

pub extern "CoreServices" fn NewDebuggerThreadSchedulerUPP(userRoutine: DebuggerThreadSchedulerProcPtr) callconv(.C) DebuggerThreadSchedulerUPP;

pub extern "CoreServices" fn DisposeThreadEntryUPP(userUPP: ThreadEntryUPP) callconv(.C) void;

pub extern "CoreServices" fn DisposeThreadSchedulerUPP(userUPP: ThreadSchedulerUPP) callconv(.C) void;

pub extern "CoreServices" fn DisposeThreadSwitchUPP(userUPP: ThreadSwitchUPP) callconv(.C) void;

pub extern "CoreServices" fn DisposeThreadTerminationUPP(userUPP: ThreadTerminationUPP) callconv(.C) void;

pub extern "CoreServices" fn DisposeDebuggerNewThreadUPP(userUPP: DebuggerNewThreadUPP) callconv(.C) void;

pub extern "CoreServices" fn DisposeDebuggerDisposeThreadUPP(userUPP: DebuggerDisposeThreadUPP) callconv(.C) void;

pub extern "CoreServices" fn DisposeDebuggerThreadSchedulerUPP(userUPP: DebuggerThreadSchedulerUPP) callconv(.C) void;

pub extern "CoreServices" fn InvokeThreadEntryUPP(threadParam: ?*anyopaque, userUPP: ThreadEntryUPP) callconv(.C) voidPtr;

pub extern "CoreServices" fn InvokeThreadSchedulerUPP(schedulerInfo: SchedulerInfoRecPtr, userUPP: ThreadSchedulerUPP) callconv(.C) ThreadID;

pub extern "CoreServices" fn InvokeThreadSwitchUPP(threadBeingSwitched: ThreadID, switchProcParam: ?*anyopaque, userUPP: ThreadSwitchUPP) callconv(.C) void;

pub extern "CoreServices" fn InvokeThreadTerminationUPP(threadTerminated: ThreadID, terminationProcParam: ?*anyopaque, userUPP: ThreadTerminationUPP) callconv(.C) void;

pub extern "CoreServices" fn InvokeDebuggerNewThreadUPP(threadCreated: ThreadID, userUPP: DebuggerNewThreadUPP) callconv(.C) void;

pub extern "CoreServices" fn InvokeDebuggerDisposeThreadUPP(threadDeleted: ThreadID, userUPP: DebuggerDisposeThreadUPP) callconv(.C) void;

pub extern "CoreServices" fn InvokeDebuggerThreadSchedulerUPP(schedulerInfo: SchedulerInfoRecPtr, userUPP: DebuggerThreadSchedulerUPP) callconv(.C) ThreadID;

pub const ThreadEntryTPP = ThreadEntryUPP;

pub const ThreadSchedulerTPP = ThreadSchedulerUPP;

pub const ThreadSwitchTPP = ThreadSwitchUPP;

pub const ThreadTerminationTPP = ThreadTerminationUPP;

pub const DebuggerNewThreadTPP = DebuggerNewThreadUPP;

pub const DebuggerDisposeThreadTPP = DebuggerDisposeThreadUPP;

pub const DebuggerThreadSchedulerTPP = DebuggerThreadSchedulerUPP;

pub extern "CoreServices" fn NewThread(
    threadStyle: ThreadStyle,
    threadEntry: ThreadEntryTPP,
    threadParam: ?*anyopaque,
    stackSize: objc.Size,
    options: ThreadOptions,
    threadResult: ?*?*anyopaque,
    threadMade: ?*ThreadID,
) callconv(.C) objc.OSErr;

pub extern "CoreServices" fn SetThreadScheduler(threadScheduler: ThreadSchedulerTPP) callconv(.C) objc.OSErr;

pub extern "CoreServices" fn SetThreadSwitcher(
    thread: ThreadID,
    threadSwitcher: ThreadSwitchTPP,
    switchProcParam: ?*anyopaque,
    inOrOut: objc.Boolean,
) callconv(.C) objc.OSErr;

pub extern "CoreServices" fn SetThreadTerminator(thread: ThreadID, threadTerminator: ThreadTerminationTPP, terminationProcParam: ?*anyopaque) callconv(.C) objc.OSErr;

pub extern "CoreServices" fn SetDebuggerNotificationProcs(notifyNewThread: DebuggerNewThreadTPP, notifyDisposeThread: DebuggerDisposeThreadTPP, notifyThreadScheduler: DebuggerThreadSchedulerTPP) callconv(.C) objc.OSErr;

pub extern "CoreServices" fn CreateThreadPool(threadStyle: ThreadStyle, numToCreate: objc.SInt16, stackSize: objc.Size) callconv(.C) objc.OSErr;

pub extern "CoreServices" fn GetDefaultThreadStackSize(threadStyle: ThreadStyle, stackSize: ?*objc.Size) callconv(.C) objc.OSErr;

pub extern "CoreServices" fn ThreadCurrentStackSpace(thread: ThreadID, freeStack: ?*objc.ByteCount) callconv(.C) objc.OSErr;

pub extern "CoreServices" fn DisposeThread(threadToDump: ThreadID, threadResult: ?*anyopaque, recycleThread: objc.Boolean) callconv(.C) objc.OSErr;

pub extern "CoreServices" fn YieldToThread(suggestedThread: ThreadID) callconv(.C) objc.OSErr;

pub extern "CoreServices" fn YieldToAnyThread() callconv(.C) objc.OSErr;

pub extern "CoreServices" fn GetCurrentThread(currentThreadID: ?*ThreadID) callconv(.C) objc.OSErr;

pub extern "CoreServices" fn GetThreadState(threadToGet: ThreadID, threadState: ?*ThreadState) callconv(.C) objc.OSErr;

pub extern "CoreServices" fn SetThreadState(threadToSet: ThreadID, newState: ThreadState, suggestedThread: ThreadID) callconv(.C) objc.OSErr;

pub extern "CoreServices" fn SetThreadStateEndCritical(threadToSet: ThreadID, newState: ThreadState, suggestedThread: ThreadID) callconv(.C) objc.OSErr;

pub extern "CoreServices" fn ThreadBeginCritical() callconv(.C) objc.OSErr;

pub extern "CoreServices" fn ThreadEndCritical() callconv(.C) objc.OSErr;

pub extern "CoreServices" fn GetThreadCurrentTaskRef(threadTRef: ?*ThreadTaskRef) callconv(.C) objc.OSErr;

pub extern "CoreServices" fn GetThreadStateGivenTaskRef(threadTRef: ThreadTaskRef, threadToGet: ThreadID, threadState: ?*ThreadState) callconv(.C) objc.OSErr;

pub extern "CoreServices" fn SetThreadReadyGivenTaskRef(threadTRef: ThreadTaskRef, threadToSet: ThreadID) callconv(.C) objc.OSErr;

pub const anon831 = i32;
pub const anon831_LastDomainConstant: i32 = -32760;
pub const anon831_formAbsolutePosition: i32 = 1768842360;
pub const anon831_formRelativePosition: i32 = 1919249509;
pub const anon831_formTest: i32 = 1952805748;
pub const anon831_formRange: i32 = 1918987879;
pub const anon831_formPropertyID: i32 = 1886547824;
pub const anon831_formName: i32 = 1851878757;
pub const anon831_formUniqueID: i32 = 1229201440;
pub const anon831_cParagraph: i32 = 1668309362;
pub const anon831_cPICT: i32 = 1346978644;
pub const anon831_cPixel: i32 = 1668315244;
pub const anon831_cPixelMap: i32 = 1668311416;
pub const anon831_cPolygon: i32 = 1668310894;
pub const anon831_cProperty: i32 = 1886547824;
pub const anon831_cQDPoint: i32 = 1363439732;
pub const anon831_cQDRectangle: i32 = 1902408308;
pub const anon831_cRectangle: i32 = 1668441443;
pub const anon831_cRGBColor: i32 = 1666336578;
pub const anon831_cRotation: i32 = 1953656692;
pub const anon831_cRoundedRectangle: i32 = 1668444771;
pub const anon831_cRow: i32 = 1668444023;
pub const anon831_cSelection: i32 = 1668506988;
pub const anon831_cShortInteger: i32 = 1936224114;
pub const anon831_cTable: i32 = 1668571756;
pub const anon831_cText: i32 = 1668577396;
pub const anon831_cTextFlow: i32 = 1667656815;
pub const anon831_cTextStyles: i32 = 1953723513;
pub const anon831_cType: i32 = 1954115685;
pub const anon831_OSIZDontOpenResourceFile: i32 = 15;
pub const anon831_OSIZdontAcceptRemoteEvents: i32 = 14;
pub const anon831_OSIZOpenWithReadPermission: i32 = 13;
pub const anon831_OSIZCodeInSharedLibraries: i32 = 11;

pub extern "CoreServices" fn FindFolder(
    vRefNum: FSVolumeRefNum,
    folderType: objc.OSType,
    createFolder: objc.Boolean,
    foundVRefNum: ?*FSVolumeRefNum,
    foundDirID: ?*objc.SInt32,
) callconv(.C) objc.OSErr;

pub extern "CoreServices" fn ReleaseFolder(vRefNum: FSVolumeRefNum, folderType: objc.OSType) callconv(.C) objc.OSErr;

pub extern "CoreServices" fn FSFindFolder(
    vRefNum: FSVolumeRefNum,
    folderType: objc.OSType,
    createFolder: objc.Boolean,
    foundRef: ?*FSRef,
) callconv(.C) objc.OSErr;

pub const anon3021 = u32;
pub const anon3021_DesktopFolderType: u32 = 1684370283;
pub const anon3021_TrashFolderType: u32 = 1953657704;
pub const anon3021_WhereToEmptyTrashFolderType: u32 = 1701671028;
pub const anon3021_FontsFolderType: u32 = 1718578804;
pub const anon3021_PreferencesFolderType: u32 = 1886545254;
pub const anon3021_SystemPreferencesFolderType: u32 = 1936749158;
pub const anon3021_TemporaryFolderType: u32 = 1952804208;
pub const anon3021_ChewableItemsFolderType: u32 = 1718382196;
pub const anon3021_TemporaryItemsInCacheDataFolderType: u32 = 1987341680;
pub const anon3021_ApplicationsFolderType: u32 = 1634758771;
pub const anon3021_VolumeRootFolderType: u32 = 1919905652;
pub const anon3021_DomainTopLevelFolderType: u32 = 1685352304;
pub const anon3021_DomainLibraryFolderType: u32 = 1684826466;
pub const anon3021_UsersFolderType: u32 = 1970500211;
pub const anon3021_CurrentUserFolderType: u32 = 1668641650;
pub const anon3021_SharedUserDataFolderType: u32 = 1935958388;

pub const anon3511 = u32;
pub const anon3511_DropBoxFolderType: u32 = 1685221232;
pub const anon3511_eyAEKeyword: u32 = 1803122532;
pub const anon3511_eyAELevel: u32 = 1818588780;
pub const anon3511_eyAELineArrow: u32 = 1634890351;
pub const anon3511_eyAEName: u32 = 1886282093;
pub const anon3511_eyAENewElementLoc: u32 = 1886283116;
pub const anon3511_eyAEObject: u32 = 1802461802;
pub const anon3511_eyAEObjectClass: u32 = 1802462060;
pub const anon3511_eyAEOffStyles: u32 = 1868985204;
pub const anon3511_eyAEOnStyles: u32 = 1869509492;
pub const anon3511_eyAEParameters: u32 = 1886547315;
pub const anon3511_eyAEParamFlags: u32 = 1886217831;
pub const anon3511_eyAEPenColor: u32 = 1886413676;
pub const anon3511_eyAEPenPattern: u32 = 1886416993;
pub const anon3511_eyAEPenWidth: u32 = 1886418788;
pub const anon3511_eyAEPixelDepth: u32 = 1885630580;
pub const anon3511_eyAEPixMapMinus: u32 = 1802530157;
pub const anon3511_eyAEPMTable: u32 = 1802530164;
pub const anon3511_eyAEPointList: u32 = 1886678132;
pub const anon3511_eyAEPointSize: u32 = 1886679930;
pub const anon3511_eyAEPosition: u32 = 1802530675;

pub const anon3551 = u32;
pub const anon3551_SharedLibrariesFolderType: u32 = -999528094;
pub const anon3551_VoicesFolderType: u32 = 1719037795;
pub const anon3551_UtilitiesFolderType: u32 = 1970563524;
pub const anon3551_ThemesFolderType: u32 = 1953000805;
pub const anon3551_FavoritesFolderType: u32 = 1717663347;
pub const anon3551_InternetSearchSitesFolderType: u32 = 1769173862;
pub const anon3551_InstallerLogsFolderType: u32 = 1768712038;
pub const anon3551_ScriptsFolderType: u32 = 1935897284;
pub const anon3551_FolderActionsFolderType: u32 = 1717662566;
pub const anon3551_SpeakableItemsFolderType: u32 = 1936747369;
pub const anon3551_KeychainFolderType: u32 = 1801676910;

pub const anon3711 = u32;
pub const anon3711_ColorSyncFolderType: u32 = 1937337955;
pub const anon3711_ColorSyncCMMFolderType: u32 = 1667460461;
pub const anon3711_ColorSyncScriptingFolderType: u32 = 1668506482;
pub const anon3711_PrintersFolderType: u32 = 1768779890;
pub const anon3711_SpeechFolderType: u32 = 1936745320;
pub const anon3711_CarbonLibraryFolderType: u32 = 1667330658;
pub const anon3711_DocumentationFolderType: u32 = 1768842863;
pub const anon3711_ISSDownloadsFolderType: u32 = 1769173860;
pub const anon3711_UserSpecificTmpFolderType: u32 = 1970564464;
pub const anon3711_CachedDataFolderType: u32 = 1667326824;
pub const anon3711_FrameworksFolderType: u32 = 1718772077;
pub const anon3711_PrivateFrameworksFolderType: u32 = 1885762157;
pub const anon3711_ClassicDesktopFolderType: u32 = 1935962987;
pub const anon3711_SystemSoundsFolderType: u32 = 1936944740;
pub const anon3711_ComponentsFolderType: u32 = 1668116580;
pub const anon3711_QuickTimeComponentsFolderType: u32 = 2003004784;
pub const anon3711_CoreServicesFolderType: u32 = 1668510326;
pub const anon3711_AudioSupportFolderType: u32 = 1633970543;
pub const anon3711_AudioPresetsFolderType: u32 = 1634759540;
pub const anon3711_AudioSoundsFolderType: u32 = 1634954852;
pub const anon3711_AudioSoundBanksFolderType: u32 = 1650552427;
pub const anon3711_AudioAlertSoundsFolderType: u32 = 1634497140;
pub const anon3711_AudioPlugInsFolderType: u32 = 1634757735;
pub const anon3711_AudioComponentsFolderType: u32 = 1633906032;
pub const anon3711_KernelExtensionsFolderType: u32 = 1801812084;
pub const anon3711_DirectoryServicesFolderType: u32 = 1685287542;
pub const anon3711_DirectoryServicesPlugInsFolderType: u32 = 1685089383;
pub const anon3711_InstallerReceiptsFolderType: u32 = 1919119476;
pub const anon3711_FileSystemSupportFolderType: u32 = 1718843763;
pub const anon3711_AppleShareSupportFolderType: u32 = 1936220530;
pub const anon3711_AppleShareAuthenticationFolderType: u32 = 1635087464;
pub const anon3711_MIDIDriversFolderType: u32 = 1835623529;
pub const anon3711_KeyboardLayoutsFolderType: u32 = 1802264953;
pub const anon3711_IndexFilesFolderType: u32 = 1768842360;
pub const anon3711_FindByContentIndexesFolderType: u32 = 1717724024;
pub const anon3711_ManagedItemsFolderType: u32 = 1835101799;
pub const anon3711_BootTimeStartupItemsFolderType: u32 = 1701671034;
pub const anon3711_AutomatorWorkflowsFolderType: u32 = 1718382455;
pub const anon3711_AutosaveInformationFolderType: u32 = 1634951542;
pub const anon3711_SpotlightSavedSearchesFolderType: u32 = 1936748404;
pub const anon3711_SpotlightImportersFolderType: u32 = 1936289136;
pub const anon3711_SpotlightMetadataCacheFolderType: u32 = 1935893352;
pub const anon3711_InputManagersFolderType: u32 = 1768845428;
pub const anon3711_InputMethodsFolderType: u32 = 1768845414;
pub const anon3711_LibraryAssistantsFolderType: u32 = 1634956396;
pub const anon3711_AudioDigidesignFolderType: u32 = 1633970535;
pub const anon3711_AudioVSTFolderType: u32 = 1635152756;
pub const anon3711_ColorPickersFolderType: u32 = 1668311922;
pub const anon3711_CompositionsFolderType: u32 = 1668116595;
pub const anon3711_FontCollectionsFolderType: u32 = 1718510444;
pub const anon3711_iMovieFolderType: u32 = 1768779638;
pub const anon3711_iMoviePlugInsFolderType: u32 = 1768779881;
pub const anon3711_iMovieSoundEffectsFolderType: u32 = 1768780645;
pub const anon3711_DownloadsFolderType: u32 = 1685026670;

pub const anon4291 = u32;
pub const anon4291_ColorSyncProfilesFolderType: u32 = 1886547814;
pub const anon4291_ApplicationSupportFolderType: u32 = 1634956656;
pub const anon4291_TextEncodingsFolderType: u32 = -999004808;
pub const anon4291_PrinterDescriptionFolderType: u32 = 1886413926;
pub const anon4291_PrinterDriverFolderType: u32 = -999263644;
pub const anon4291_ScriptingAdditionsFolderType: u32 = -999070862;

pub const anon4381 = u32;
pub const anon4381_ClassicPreferencesFolderType: u32 = 1668313702;

pub const anon4501 = u32;
pub const anon4501_SystemFolderType: u32 = 1835098995;
pub const anon4501_SystemDesktopFolderType: u32 = 1935962987;
pub const anon4501_SystemTrashFolderType: u32 = 1937011315;
pub const anon4501_PrintMonitorDocsFolderType: u32 = 1886547572;
pub const anon4501_ALMModulesFolderType: u32 = 2002873451;
pub const anon4501_ALMPreferencesFolderType: u32 = 1953655152;
pub const anon4501_ALMLocationsFolderType: u32 = 1717660780;
pub const anon4501_AppleExtrasFolderType: u32 = 1634040004;
pub const anon4501_ContextualMenuItemsFolderType: u32 = 1668116085;
pub const anon4501_MacOSReadMesFolderType: u32 = 1836020420;
pub const anon4501_StartupFolderType: u32 = 1937011316;
pub const anon4501_ShutdownFolderType: u32 = 1936221286;
pub const anon4501_AppleMenuFolderType: u32 = 1634561653;
pub const anon4501_ControlPanelFolderType: u32 = 1668575852;
pub const anon4501_SystemControlPanelFolderType: u32 = 1935897708;
pub const anon4501_ExtensionFolderType: u32 = 1702392942;
pub const anon4501_ExtensionDisabledFolderType: u32 = 1702392900;
pub const anon4501_ControlPanelDisabledFolderType: u32 = 1668575812;
pub const anon4501_SystemExtensionDisabledFolderType: u32 = 1835098948;
pub const anon4501_StartupItemsDisabledFolderType: u32 = 1937011268;
pub const anon4501_ShutdownItemsDisabledFolderType: u32 = 1936221252;
pub const anon4501_AssistantsFolderType: u32 = 1634956484;
pub const anon4501_StationeryFolderType: u32 = 1868854132;
pub const anon4501_OpenDocFolderType: u32 = 1868853092;
pub const anon4501_OpenDocShellPlugInsFolderType: u32 = 1868854128;
pub const anon4501_EditorsFolderType: u32 = 1868850532;
pub const anon4501_OpenDocEditorsFolderType: u32 = -999332762;
pub const anon4501_OpenDocLibrariesFolderType: u32 = 1868852322;
pub const anon4501_GenEditorsFolderType: u32 = -999988119;
pub const anon4501_HelpFolderType: u32 = -999789456;
pub const anon4501_InternetPlugInFolderType: u32 = -999398028;
pub const anon4501_ModemScriptsFolderType: u32 = -999461020;
pub const anon4501_ControlStripModulesFolderType: u32 = 1935959414;
pub const anon4501_InternetFolderType: u32 = 1768846532;
pub const anon4501_AppearanceFolderType: u32 = 1634758770;
pub const anon4501_SoundSetsFolderType: u32 = 1936614515;
pub const anon4501_DesktopPicturesFolderType: u32 = 1685352644;
pub const anon4501_FindSupportFolderType: u32 = 1718510707;
pub const anon4501_RecentApplicationsFolderType: u32 = 1918988400;
pub const anon4501_RecentDocumentsFolderType: u32 = 1919184739;
pub const anon4501_RecentServersFolderType: u32 = 1920169586;
pub const anon4501_LauncherItemsFolderType: u32 = 1818326382;
pub const anon4501_QuickTimeExtensionsFolderType: u32 = 1903453560;
pub const anon4501_DisplayExtensionsFolderType: u32 = 1685287020;
pub const anon4501_MultiprocessingFolderType: u32 = 1836087398;
pub const anon4501_PrintingPlugInsFolderType: u32 = 1886415975;
pub const anon4501_AppleshareAutomountServerAliasesFolderType: u32 = 1936881348;
pub const anon4501_VolumeSettingsFolderType: u32 = 1987274340;
pub const anon4501_PreMacOS91ApplicationsFolderType: u32 = -1938788237;
pub const anon4501_PreMacOS91InstallerLogsFolderType: u32 = -1804834970;
pub const anon4501_PreMacOS91AssistantsFolderType: u32 = -1938590524;
pub const anon4501_PreMacOS91UtilitiesFolderType: u32 = -1619760700;
pub const anon4501_PreMacOS91AppleExtrasFolderType: u32 = -1939507004;
pub const anon4501_PreMacOS91MacOSReadMesFolderType: u32 = -1250987324;
pub const anon4501_PreMacOS91InternetFolderType: u32 = -1804700476;
pub const anon4501_PreMacOS91AutomountedServersFolderType: u32 = -1485670716;
pub const anon4501_PreMacOS91StationeryFolderType: u32 = -1083935884;
pub const anon4501_LocalesFolderType: u32 = -999526557;
pub const anon4501_FindByContentPluginsFolderType: u32 = 1717724016;
pub const anon4501_FindByContentFolderType: u32 = 1717724006;

pub const anon5151 = u32;
pub const anon5151_MagicTemporaryItemsFolderType: u32 = 1836346736;
pub const anon5151_TemporaryItemsInUserDomainFolderType: u32 = 1952804209;
pub const anon5151_CurrentUserRemoteFolderLocation: u32 = 1920299878;
pub const anon5151_CurrentUserRemoteFolderType: u32 = 1920299890;
pub const anon5151_typeAEText: u32 = 1951684692;
pub const anon5151_typeArc: u32 = 1667330659;
pub const anon5151_typeBest: u32 = 1650815860;
pub const anon5151_typeCell: u32 = 1667458412;
pub const anon5151_typeClassInfo: u32 = 1734569065;
pub const anon5151_typeColorTable: u32 = 1668051572;
pub const anon5151_typeColumn: u32 = 1667460972;
pub const anon5151_typeDashStyle: u32 = 1952735603;
pub const anon5151_typeData: u32 = 1952740449;
pub const anon5151_typeDrawingArea: u32 = 1667527287;
pub const anon5151_typeElemInfo: u32 = 1701603694;
pub const anon5151_typeEnumeration: u32 = 1701737837;
pub const anon5151_typeEPS: u32 = 1162892064;
pub const anon5151_typeEventInfo: u32 = 1702259054;

pub const anon5341 = u32;
pub const anon5341_CreateFolderAtBoot: u32 = 2;
pub const anon5341_CreateFolderAtBootBit: u32 = 1;
pub const anon5341_FolderCreatedInvisible: u32 = 4;
pub const anon5341_FolderCreatedInvisibleBit: u32 = 2;
pub const anon5341_FolderCreatedNameLocked: u32 = 8;
pub const anon5341_FolderCreatedNameLockedBit: u32 = 3;
pub const anon5341_FolderCreatedAdminPrivs: u32 = 16;
pub const anon5341_FolderCreatedAdminPrivsBit: u32 = 4;

pub const anon5451 = u32;
pub const anon5451_FolderInUserFolder: u32 = 32;
pub const anon5451_FolderInUserFolderBit: u32 = 5;
pub const anon5451_FolderTrackedByAlias: u32 = 64;
pub const anon5451_FolderTrackedByAliasBit: u32 = 6;
pub const anon5451_FolderInRemoteUserFolderIfAvailable: u32 = 128;
pub const anon5451_FolderInRemoteUserFolderIfAvailableBit: u32 = 7;
pub const anon5451_FolderNeverMatchedInIdentifyFolder: u32 = 256;
pub const anon5451_FolderNeverMatchedInIdentifyFolderBit: u32 = 8;
pub const anon5451_FolderMustStayOnSameVolume: u32 = 512;
pub const anon5451_FolderMustStayOnSameVolumeBit: u32 = 9;
pub const anon5451_FolderManagerFolderInMacOS9FolderIfMacOSXIsInstalledMask: u32 = 1024;
pub const anon5451_FolderManagerFolderInMacOS9FolderIfMacOSXIsInstalledBit: u32 = 10;
pub const anon5451_FolderInLocalOrRemoteUserFolder: u32 = 160;
pub const anon5451_FolderManagerNotCreatedOnRemoteVolumesBit: u32 = 11;
pub const anon5451_FolderManagerNotCreatedOnRemoteVolumesMask: u32 = 2048;
pub const anon5451_FolderManagerNewlyCreatedFolderIsLocalizedBit: u32 = 12;
pub const anon5451_FolderManagerNewlyCreatedFolderShouldHaveDotLocalizedCreatedWithinMask: u32 = 4096;

pub const FolderDescFlags = objc.UInt32;

pub const FolderClass = objc.OSType;

pub const anon5751 = u32;
pub const anon5751_BlessedFolder: u32 = 1651274598;
pub const anon5751_RootFolder: u32 = 1919906918;
pub const anon5751_HFSPlusExtentKeyMaximumLength: u32 = 10;
pub const anon5751_HFSExtentKeyMaximumLength: u32 = 7;
pub const anon5751_HFSPlusCatalogKeyMaximumLength: u32 = 516;
pub const anon5751_HFSPlusCatalogKeyMinimumLength: u32 = 6;
pub const anon5751_HFSCatalogKeyMaximumLength: u32 = 37;
pub const anon5751_HFSCatalogKeyMinimumLength: u32 = 6;
pub const anon5751_HFSPlusCatalogMinNodeSize: u32 = 4096;
pub const anon5751_HFSPlusExtentMinNodeSize: u32 = 512;
pub const anon5751_HFSPlusAttrMinNodeSize: u32 = 4096;

pub const anon5851 = u32;
pub const anon5851_DictionariesFolderType: u32 = 1684628340;
pub const anon5851_LogsFolderType: u32 = 1819240307;
pub const anon5851_PreferencePanesFolderType: u32 = 1886413166;

pub const anon5921 = u32;
pub const anon5921_WidgetsFolderType: u32 = 2003068788;
pub const anon5921_ScreenSaversFolderType: u32 = 1935897198;

pub const FolderType = objc.OSType;

pub const FolderLocation = objc.OSType;

pub const FolderDesc = extern struct {
    descSize: objc.Size,
    foldType: FolderType,
    flags: FolderDescFlags,
    foldClass: FolderClass,
    foldLocation: FolderType,
    badgeSignature: objc.OSType,
    badgeType: objc.OSType,
    reserved: objc.UInt32,
    name: objc.StrFileName,
};

pub const FolderDescPtr = FolderDesc;

pub const RoutingFlags = objc.UInt32;

pub const FolderRouting = extern struct {
    descSize: objc.Size,
    fileType: objc.OSType,
    routeFromFolder: FolderType,
    routeToFolder: FolderType,
    flags: RoutingFlags,
};

pub const FolderRoutingPtr = FolderRouting;

pub extern "CoreServices" fn AddFolderDescriptor(
    foldType: FolderType,
    flags: FolderDescFlags,
    foldClass: FolderClass,
    foldLocation: FolderLocation,
    badgeSignature: objc.OSType,
    badgeType: objc.OSType,
    name: objc.ConstStrFileNameParam,
    replaceFlag: objc.Boolean,
) callconv(.C) objc.OSErr;

pub extern "CoreServices" fn GetFolderTypes(requestedTypeCount: objc.UInt32, totalTypeCount: ?*objc.UInt32, theTypes: ?*FolderType) callconv(.C) objc.OSErr;

pub extern "CoreServices" fn RemoveFolderDescriptor(foldType: FolderType) callconv(.C) objc.OSErr;

pub extern "CoreServices" fn GetFolderNameUnicode(
    vRefNum: FSVolumeRefNum,
    foldType: objc.OSType,
    foundVRefNum: ?*FSVolumeRefNum,
    name: ?*objc.HFSUniStr255,
) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn InvalidateFolderDescriptorCache(vRefNum: FSVolumeRefNum, dirID: objc.SInt32) callconv(.C) objc.OSErr;

pub extern "CoreServices" fn IdentifyFolder(vRefNum: FSVolumeRefNum, dirID: objc.SInt32, foldType: ?*FolderType) callconv(.C) objc.OSErr;

pub extern "CoreServices" fn FSDetermineIfRefIsEnclosedByFolder(
    domainOrVRefNum: FSVolumeRefNum,
    folderType: objc.OSType,
    inRef: ?*FSRef,
    outResult: ?*objc.Boolean,
) callconv(.C) objc.OSErr;

pub extern "CoreServices" fn DetermineIfPathIsEnclosedByFolder(
    domainOrVRefNum: FSVolumeRefNum,
    folderType: objc.OSType,
    utf8Path: ?*objc.UInt8,
    pathIsRealPath: objc.Boolean,
    outResult: ?*objc.Boolean,
) callconv(.C) objc.OSErr;

pub const FolderManagerNotificationProcPtr = objc.OSStatus;

pub const FolderManagerNotificationUPP = FolderManagerNotificationProcPtr;

pub extern "CoreServices" fn NewFolderManagerNotificationUPP(userRoutine: FolderManagerNotificationProcPtr) callconv(.C) FolderManagerNotificationUPP;

pub extern "CoreServices" fn DisposeFolderManagerNotificationUPP(userUPP: FolderManagerNotificationUPP) callconv(.C) void;

pub extern "CoreServices" fn InvokeFolderManagerNotificationUPP(
    message: objc.OSType,
    arg: ?*anyopaque,
    userRefCon: ?*anyopaque,
    userUPP: FolderManagerNotificationUPP,
) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn Microseconds(microTickCount: ?*objc.UnsignedWide) callconv(.C) void;

pub const anon1051 = u32;
pub const anon1051_TMTaskActive: u32 = 32768;

pub const TMTask = extern struct {
    qLink: QElemPtr,
    qType: i16,
    tmAddr: TimerUPP,
    tmCount: i64,
    tmWakeUp: i64,
    tmReserved: i64,
};

pub const TMTaskPtr = TMTask;

pub const TimerProcPtr = ?*const fn (TMTaskPtr) callconv(.C) void;

pub const TimerUPP = TimerProcPtr;

pub extern "CoreServices" fn InsTime(tmTaskPtr: QElemPtr) callconv(.C) void;

pub extern "CoreServices" fn InsXTime(tmTaskPtr: QElemPtr) callconv(.C) void;

pub extern "CoreServices" fn PrimeTime(tmTaskPtr: QElemPtr, count: i64) callconv(.C) void;

pub extern "CoreServices" fn RmvTime(tmTaskPtr: QElemPtr) callconv(.C) void;

pub extern "CoreServices" fn InstallTimeTask(tmTaskPtr: QElemPtr) callconv(.C) objc.OSErr;

pub extern "CoreServices" fn InstallXTimeTask(tmTaskPtr: QElemPtr) callconv(.C) objc.OSErr;

pub extern "CoreServices" fn PrimeTimeTask(tmTaskPtr: QElemPtr, count: i64) callconv(.C) objc.OSErr;

pub extern "CoreServices" fn RemoveTimeTask(tmTaskPtr: QElemPtr) callconv(.C) objc.OSErr;

pub extern "CoreServices" fn NewTimerUPP(userRoutine: TimerProcPtr) callconv(.C) TimerUPP;

pub extern "CoreServices" fn DisposeTimerUPP(userUPP: TimerUPP) callconv(.C) void;

pub extern "CoreServices" fn InvokeTimerUPP(tmTaskPtr: TMTaskPtr, userUPP: TimerUPP) callconv(.C) void;

pub extern "CoreServices" fn MPGetNextCpuID(owningCoherenceID: MPCoherenceID, cpuID: ?*MPCpuID) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn MPGetNextTaskID(owningProcessID: MPProcessID, taskID: ?*MPTaskID) callconv(.C) objc.OSStatus;

pub const MPQueueInfo = extern struct {
    version: objc.PBVersion,
    processID: MPProcessID,
    queueName: objc.OSType,
    nWaiting: objc.ItemCount,
    waitingTaskID: MPTaskID,
    nMessages: objc.ItemCount,
    nReserved: objc.ItemCount,
    p1: ?*anyopaque,
    p2: ?*anyopaque,
    p3: ?*anyopaque,
};

pub const MPSemaphoreInfo = extern struct {
    version: objc.PBVersion,
    processID: MPProcessID,
    semaphoreName: objc.OSType,
    nWaiting: objc.ItemCount,
    waitingTaskID: MPTaskID,
    maximum: objc.ItemCount,
    count: objc.ItemCount,
};

pub const MPEventInfo = extern struct {
    version: objc.PBVersion,
    processID: MPProcessID,
    eventName: objc.OSType,
    nWaiting: objc.ItemCount,
    waitingTaskID: MPTaskID,
    events: MPEventFlags,
};

pub const MPCriticalRegionInfo = extern struct {
    version: objc.PBVersion,
    processID: MPProcessID,
    regionName: objc.OSType,
    nWaiting: objc.ItemCount,
    waitingTaskID: MPTaskID,
    owningTask: MPTaskID,
    count: objc.ItemCount,
};

pub const MPNotificationInfo = extern struct {
    version: objc.PBVersion,
    processID: MPProcessID,
    notificationName: objc.OSType,
    queueID: MPQueueID,
    p1: ?*anyopaque,
    p2: ?*anyopaque,
    p3: ?*anyopaque,
    eventID: MPEventID,
    events: MPEventFlags,
    semaphoreID: MPSemaphoreID,
};

pub const MPAddressSpaceInfo = extern struct {
    version: objc.PBVersion,
    processID: MPProcessID,
    groupID: MPCoherenceID,
    nTasks: objc.ItemCount,
    vsid: [16]objc.UInt32,
};

pub extern "CoreServices" fn LMGetBootDrive() callconv(.C) objc.SInt16;

pub extern "CoreServices" fn LMSetBootDrive(value: objc.SInt16) callconv(.C) void;

pub extern "CoreServices" fn LMGetApFontID() callconv(.C) objc.SInt16;

pub extern "CoreServices" fn LMSetApFontID(value: objc.SInt16) callconv(.C) void;

pub extern "CoreServices" fn LMGetSysMap() callconv(.C) objc.SInt16;

pub extern "CoreServices" fn LMSetSysMap(value: objc.SInt16) callconv(.C) void;

pub extern "CoreServices" fn LMGetResLoad() callconv(.C) objc.UInt8;

pub extern "CoreServices" fn LMSetResLoad(value: objc.UInt8) callconv(.C) void;

pub extern "CoreServices" fn LMGetResErr() callconv(.C) objc.SInt16;

pub extern "CoreServices" fn LMSetResErr(value: objc.SInt16) callconv(.C) void;

pub extern "CoreServices" fn LMGetTmpResLoad() callconv(.C) objc.UInt8;

pub extern "CoreServices" fn LMSetTmpResLoad(value: objc.UInt8) callconv(.C) void;

pub extern "CoreServices" fn LMGetIntlSpec() callconv(.C) objc.Ptr;

pub extern "CoreServices" fn LMSetIntlSpec(value: objc.Ptr) callconv(.C) void;

pub extern "CoreServices" fn LMSetSysFontFam(value: objc.SInt16) callconv(.C) void;

pub extern "CoreServices" fn LMGetSysFontSize() callconv(.C) objc.SInt16;

pub extern "CoreServices" fn LMSetSysFontSize(value: objc.SInt16) callconv(.C) void;

pub const PEFContainerHeader = extern struct {
    tag1: objc.OSType,
    tag2: objc.OSType,
    architecture: objc.OSType,
    formatVersion: objc.UInt32,
    dateTimeStamp: objc.UInt32,
    oldDefVersion: objc.UInt32,
    oldImpVersion: objc.UInt32,
    currentVersion: objc.UInt32,
    sectionCount: objc.UInt16,
    instSectionCount: objc.UInt16,
    reservedA: objc.UInt32,
};

pub const anon1171 = u32;
pub const anon1171_PEFFirstSectionHeaderOffset: u32 = 40;

pub const PEFSectionHeader = extern struct {
    nameOffset: objc.SInt32,
    defaultAddress: objc.UInt32,
    totalLength: objc.UInt32,
    unpackedLength: objc.UInt32,
    containerLength: objc.UInt32,
    containerOffset: objc.UInt32,
    sectionKind: objc.UInt8,
    shareKind: objc.UInt8,
    alignment: objc.UInt8,
    reservedA: objc.UInt8,
};

pub const anon1451 = u32;
pub const anon1451_PEFCodeSection: u32 = 0;
pub const anon1451_PEFUnpackedDataSection: u32 = 1;
pub const anon1451_PEFPackedDataSection: u32 = 2;
pub const anon1451_PEFConstantSection: u32 = 3;
pub const anon1451_PEFExecDataSection: u32 = 6;
pub const anon1451_PEFLoaderSection: u32 = 4;
pub const anon1451_PEFDebugSection: u32 = 5;
pub const anon1451_PEFExceptionSection: u32 = 7;
pub const anon1451_PEFTracebackSection: u32 = 8;

pub const anon1611 = u32;
pub const anon1611_PEFProcessShare: u32 = 1;
pub const anon1611_PEFGlobalShare: u32 = 4;
pub const anon1611_PEFProtectedShare: u32 = 5;

pub const anon1911 = u32;
pub const anon1911_PEFPkDataZero: u32 = 0;
pub const anon1911_PEFPkDataBlock: u32 = 1;
pub const anon1911_PEFPkDataRepeat: u32 = 2;
pub const anon1911_PEFPkDataRepeatBlock: u32 = 3;
pub const anon1911_PEFPkDataRepeatZero: u32 = 4;
pub const anon1911_eyTransactionIDAttr: u32 = 1953653102;
pub const anon1911_eyReturnIDAttr: u32 = 1920231780;
pub const anon1911_eyEventClassAttr: u32 = 1702257516;
pub const anon1911_eyEventIDAttr: u32 = 1702259044;
pub const anon1911_eyAddressAttr: u32 = 1633969266;
pub const anon1911_eyOptionalKeywordAttr: u32 = 1869640811;
pub const anon1911_eyTimeoutAttr: u32 = 1953066351;
pub const anon1911_eyInteractLevelAttr: u32 = 1768846437;
pub const anon1911_eyEventSourceAttr: u32 = 1702064739;
pub const anon1911_eyMissedKeywordAttr: u32 = 1835627379;
pub const anon1911_eyOriginalAddressAttr: u32 = 1718775661;
pub const anon1911_eyAcceptTimeoutAttr: u32 = 1633907821;
pub const anon1911_eyReplyRequestedAttr: u32 = 1919250545;
pub const anon1911_eySenderEUIDAttr: u32 = 1936025956;
pub const anon1911_eySenderEGIDAttr: u32 = 1936157028;
pub const anon1911_eySenderUIDAttr: u32 = 1969841267;
pub const anon1911_eySenderGIDAttr: u32 = 1734960243;
pub const anon1911_eySenderPIDAttr: u32 = 1936746852;
pub const anon1911_eySenderAuditTokenAttr: u32 = 1953459054;
pub const anon1911_eySenderApplescriptEntitlementsAttr: u32 = 1701737580;
pub const anon1911_eySenderApplicationIdentifierEntitlementAttr: u32 = 1634297185;
pub const anon1911_eySenderApplicationSandboxed: u32 = 1936946018;
pub const anon1911_eyActualSenderAuditToken: u32 = 1633902964;
pub const anon1911_eyAppleEventAttributesAttr: u32 = 1635021938;

pub const anon2011 = u32;
pub const anon2011_PEFPkDataOpcodeShift: u32 = 5;
pub const anon2011_PEFPkDataCount5Mask: u32 = 31;
pub const anon2011_PEFPkDataMaxCount5: u32 = 31;
pub const anon2011_PEFPkDataVCountShift: u32 = 7;
pub const anon2011_PEFPkDataVCountMask: u32 = 127;
pub const anon2011_PEFPkDataVCountEndMask: u32 = 128;

pub const PEFLoaderInfoHeader = extern struct {
    mainSection: objc.SInt32,
    mainOffset: objc.UInt32,
    initSection: objc.SInt32,
    initOffset: objc.UInt32,
    termSection: objc.SInt32,
    termOffset: objc.UInt32,
    importedLibraryCount: objc.UInt32,
    totalImportedSymbolCount: objc.UInt32,
    relocSectionCount: objc.UInt32,
    relocInstrOffset: objc.UInt32,
    loaderStringsOffset: objc.UInt32,
    exportHashOffset: objc.UInt32,
    exportHashTablePower: objc.UInt32,
    exportedSymbolCount: objc.UInt32,
};

pub const PEFImportedLibrary = extern struct {
    nameOffset: objc.UInt32,
    oldImpVersion: objc.UInt32,
    currentVersion: objc.UInt32,
    importedSymbolCount: objc.UInt32,
    firstImportedSymbol: objc.UInt32,
    options: objc.UInt8,
    reservedA: objc.UInt8,
    reservedB: objc.UInt16,
};

pub const anon3421 = u32;
pub const anon3421_PEFWeakImportLibMask: u32 = 64;
pub const anon3421_PEFInitLibBeforeMask: u32 = 128;

pub const PEFImportedSymbol = extern struct {
    classAndName: objc.UInt32,
};

pub const anon3731 = u32;
pub const anon3731_PEFImpSymClassShift: u32 = 24;
pub const anon3731_PEFImpSymNameOffsetMask: u32 = 16777215;
pub const anon3731_PEFImpSymMaxNameOffset: u32 = 16777215;

pub const anon3851 = u32;
pub const anon3851_PEFCodeSymbol: u32 = 0;
pub const anon3851_PEFDataSymbol: u32 = 1;
pub const anon3851_PEFTVectorSymbol: u32 = 2;
pub const anon3851_PEFTOCSymbol: u32 = 3;
pub const anon3851_PEFGlueSymbol: u32 = 4;
pub const anon3851_PEFUndefinedSymbol: u32 = 15;
pub const anon3851_PEFWeakImportSymMask: u32 = 128;

pub const PEFExportedSymbolHashSlot = extern struct {
    countAndStart: objc.UInt32,
};

pub const PEFSplitHashWord = extern struct {
    nameLength: objc.UInt16,
    hashValue: objc.UInt16,
};

pub const PEFExportedSymbolKey = extern struct {
    pub const anon4973 = extern union {
        fullHashWord: objc.UInt32,
        splitHashWord: PEFSplitHashWord,
    };

    u: PEFExportedSymbolKey.anon4973,
};

pub const PEFExportedSymbol = extern struct {
    classAndName: objc.UInt32,
    symbolValue: objc.UInt32,
    sectionIndex: objc.SInt16,
};

pub const anon5841 = i32;
pub const anon5841_PEFAbsoluteExport: i32 = -2;
pub const anon5841_PEFReexportedImport: i32 = -3;

pub const PEFRelocChunk = objc.UInt16;

pub const PEFLoaderRelocationHeader = extern struct {
    sectionIndex: objc.UInt16,
    reservedA: objc.UInt16,
    relocCount: objc.UInt32,
    firstRelocOffset: objc.UInt32,
};

pub const anon6561 = u32;
pub const anon6561_PEFRelocBasicOpcodeRange: u32 = 128;

pub const anon6691 = u32;
pub const anon6691_PEFRelocBySectDWithSkip: u32 = 0;
pub const anon6691_PEFRelocBySectC: u32 = 32;
pub const anon6691_PEFRelocBySectD: u32 = 33;
pub const anon6691_PEFRelocTVector12: u32 = 34;
pub const anon6691_PEFRelocTVector8: u32 = 35;
pub const anon6691_PEFRelocVTable8: u32 = 36;
pub const anon6691_PEFRelocImportRun: u32 = 37;
pub const anon6691_PEFRelocSmByImport: u32 = 48;
pub const anon6691_PEFRelocSmSetSectC: u32 = 49;
pub const anon6691_PEFRelocSmSetSectD: u32 = 50;
pub const anon6691_PEFRelocSmBySection: u32 = 51;
pub const anon6691_PEFRelocIncrPosition: u32 = 64;
pub const anon6691_PEFRelocSmRepeat: u32 = 72;
pub const anon6691_PEFRelocSetPosition: u32 = 80;
pub const anon6691_PEFRelocLgByImport: u32 = 82;
pub const anon6691_PEFRelocLgRepeat: u32 = 88;
pub const anon6691_PEFRelocLgSetOrBySection: u32 = 90;
pub const anon6691_PEFRelocUndefinedOpcode: u32 = 255;

pub const anon6981 = u32;
pub const anon6981_PEFRelocLgBySectionSubopcode: u32 = 0;
pub const anon6981_PEFRelocLgSetSectCSubopcode: u32 = 1;
pub const anon6981_PEFRelocLgSetSectDSubopcode: u32 = 2;

pub const anon7821 = u32;
pub const anon7821_PEFRelocWithSkipMaxSkipCount: u32 = 255;
pub const anon7821_PEFRelocWithSkipMaxRelocCount: u32 = 63;

pub const anon8161 = u32;
pub const anon8161_PEFRelocRunMaxRunLength: u32 = 512;

pub const anon8551 = u32;
pub const anon8551_PEFRelocSmIndexMaxIndex: u32 = 511;

pub const anon8911 = u32;
pub const anon8911_PEFRelocIncrPositionMaxOffset: u32 = 4096;

pub const anon9211 = u32;
pub const anon9211_PEFRelocSmRepeatMaxChunkCount: u32 = 16;
pub const anon9211_PEFRelocSmRepeatMaxRepeatCount: u32 = 256;

pub const anon9521 = u32;
pub const anon9521_PEFRelocSetPosMaxOffset: u32 = 67108863;

pub const anon9861 = u32;
pub const anon9861_PEFRelocLgByImportMaxIndex: u32 = 67108863;

pub const anon10211 = u32;
pub const anon10211_PEFRelocLgRepeatMaxChunkCount: u32 = 16;
pub const anon10211_PEFRelocLgRepeatMaxRepeatCount: u32 = 4194303;

pub const anon10591 = u32;
pub const anon10591_PEFRelocLgSetOrBySectionMaxIndex: u32 = 4194303;

pub const XLibContainerHeader = extern struct {
    tag1: objc.OSType,
    tag2: objc.OSType,
    currentFormat: objc.UInt32,
    containerStringsOffset: objc.UInt32,
    exportHashOffset: objc.UInt32,
    exportKeyOffset: objc.UInt32,
    exportSymbolOffset: objc.UInt32,
    exportNamesOffset: objc.UInt32,
    exportHashTablePower: objc.UInt32,
    exportedSymbolCount: objc.UInt32,
    fragNameOffset: objc.UInt32,
    fragNameLength: objc.UInt32,
    dylibPathOffset: objc.UInt32,
    dylibPathLength: objc.UInt32,
    cpuFamily: objc.OSType,
    cpuModel: objc.OSType,
    dateTimeStamp: objc.UInt32,
    currentVersion: objc.UInt32,
    oldDefVersion: objc.UInt32,
    oldImpVersion: objc.UInt32,
};

pub const anon11711 = i32;
pub const anon11711_XLibTag1: i32 = -263364253;
pub const anon11711_VLibTag2: i32 = 1447848290;
pub const anon11711_BLibTag2: i32 = 1112303970;
pub const anon11711_XLibVersion: i32 = 1;

pub const XLibExportedSymbolHashSlot = PEFExportedSymbolHashSlot;

pub const XLibExportedSymbolKey = PEFExportedSymbolKey;

pub const XLibExportedSymbol = extern struct {
    classAndName: objc.UInt32,
    bpOffset: objc.UInt32,
};

pub const HFSCatalogNodeID = objc.UInt32;

pub const anon261 = u32;
pub const anon261_AIFFID: u32 = 1095321158;
pub const anon261_AIFCID: u32 = 1095321155;
pub const anon261_FormatVersionID: u32 = 1180058962;
pub const anon261_CommonID: u32 = 1129270605;
pub const anon261_FORMID: u32 = 1179603533;
pub const anon261_SoundDataID: u32 = 1397968452;
pub const anon261_MarkerID: u32 = 1296126539;
pub const anon261_InstrumentID: u32 = 1229869908;
pub const anon261_MIDIDataID: u32 = 1296647241;
pub const anon261_AudioRecordingID: u32 = 1095062340;
pub const anon261_ApplicationSpecificID: u32 = 1095782476;
pub const anon261_CommentID: u32 = 1129270612;
pub const anon261_NameID: u32 = 1312902469;
pub const anon261_AuthorID: u32 = 1096111176;
pub const anon261_CopyrightID: u32 = 677587232;
pub const anon261_AnnotationID: u32 = 1095650895;

pub const MarkerIdType = objc.SInt16;

pub const ChunkHeader = extern struct {
    ckID: objc.UInt32,
    ckSize: objc.SInt32,
};

pub const ContainerChunk = extern struct {
    ckID: objc.UInt32,
    ckSize: objc.SInt32,
    formType: objc.UInt32,
};

pub const FormatVersionChunk = extern struct {
    ckID: objc.UInt32,
    ckSize: objc.SInt32,
    timestamp: objc.UInt32,
};

pub const FormatVersionChunkPtr = FormatVersionChunk;

pub const CommonChunk = extern struct {
    ckID: objc.UInt32,
    ckSize: objc.SInt32,
    numChannels: objc.SInt16,
    numSampleFrames: objc.UInt32,
    sampleSize: objc.SInt16,
    sampleRate: objc.extended80,
};

pub const CommonChunkPtr = CommonChunk;

pub const ExtCommonChunk = extern struct {
    ckID: objc.UInt32,
    ckSize: objc.SInt32,
    numChannels: objc.SInt16,
    numSampleFrames: objc.UInt32,
    sampleSize: objc.SInt16,
    sampleRate: objc.extended80,
    compressionType: objc.UInt32,
    compressionName: [1]i8,
};

pub const ExtCommonChunkPtr = ExtCommonChunk;

pub const SoundDataChunk = extern struct {
    ckID: objc.UInt32,
    ckSize: objc.SInt32,
    offset: objc.UInt32,
    blockSize: objc.UInt32,
};

pub const SoundDataChunkPtr = SoundDataChunk;

pub const Marker = extern struct {
    id: MarkerIdType,
    position: objc.UInt32,
    markerName: objc.Str255,
};

pub const MarkerChunk = extern struct {
    ckID: objc.UInt32,
    ckSize: objc.SInt32,
    numMarkers: objc.UInt16,
    Markers: [1]Marker,
};

pub const MarkerChunkPtr = MarkerChunk;

pub const AIFFLoop = extern struct {
    playMode: objc.SInt16,
    beginLoop: MarkerIdType,
    endLoop: MarkerIdType,
};

pub const InstrumentChunk = extern struct {
    ckID: objc.UInt32,
    ckSize: objc.SInt32,
    baseFrequency: objc.UInt8,
    detune: objc.UInt8,
    lowFrequency: objc.UInt8,
    highFrequency: objc.UInt8,
    lowVelocity: objc.UInt8,
    highVelocity: objc.UInt8,
    gain: objc.SInt16,
    sustainLoop: AIFFLoop,
    releaseLoop: AIFFLoop,
};

pub const InstrumentChunkPtr = InstrumentChunk;

pub const MIDIDataChunk = extern struct {
    ckID: objc.UInt32,
    ckSize: objc.SInt32,
    MIDIdata: [1]objc.UInt8,
};

pub const MIDIDataChunkPtr = MIDIDataChunk;

pub const AudioRecordingChunk = extern struct {
    ckID: objc.UInt32,
    ckSize: objc.SInt32,
    AESChannelStatus: [24]objc.UInt8,
};

pub const AudioRecordingChunkPtr = AudioRecordingChunk;

pub const ApplicationSpecificChunk = extern struct {
    ckID: objc.UInt32,
    ckSize: objc.SInt32,
    applicationSignature: objc.OSType,
    data: [1]objc.UInt8,
};

pub const ApplicationSpecificChunkPtr = ApplicationSpecificChunk;

pub const Comment = extern struct {
    timeStamp: objc.UInt32,
    marker: MarkerIdType,
    count: objc.UInt16,
    text: [1]i8,
};

pub const CommentsChunk = extern struct {
    ckID: objc.UInt32,
    ckSize: objc.SInt32,
    numComments: objc.UInt16,
    comments: [1]Comment,
};

pub const CommentsChunkPtr = CommentsChunk;

pub const TextChunk = extern struct {
    ckID: objc.UInt32,
    ckSize: objc.SInt32,
    text: [1]i8,
};

pub const TextChunkPtr = TextChunk;

pub const anon621 = u32;
pub const anon621_TECPluginType: u32 = 1701015655;
pub const anon621_TECPluginCreator: u32 = 1701733238;
pub const anon621_TECPluginOneToOne: u32 = 1869901679;
pub const anon621_TECPluginOneToMany: u32 = 1869901677;
pub const anon621_TECPluginManyToOne: u32 = 1836347247;
pub const anon621_TECPluginSniffObj: u32 = 1936615782;

pub const TextEncodingRec = extern struct {
    base: objc.UInt32,
    variant: objc.UInt32,
    format: objc.UInt32,
};

pub const TECEncodingsListRec = extern struct {
    count: objc.UInt32,
    encodings: TextEncodingRec,
};

pub const TECEncodingsListPtr = TECEncodingsListRec;

pub const TECEncodingsListHandle = TECEncodingsListPtr;

pub const TECSubTextEncodingRec = extern struct {
    offset: objc.UInt32,
    searchEncoding: TextEncodingRec,
    count: objc.UInt32,
    subEncodings: TextEncodingRec,
};

pub const TECSubTextEncodingsRec = extern struct {
    count: objc.UInt32,
    subTextEncodingRec: TECSubTextEncodingRec,
};

pub const TECSubTextEncodingsPtr = TECSubTextEncodingsRec;

pub const TECSubTextEncodingsHandle = TECSubTextEncodingsPtr;

pub const TECEncodingPairRec = extern struct {
    source: TextEncodingRec,
    dest: TextEncodingRec,
};

pub const TECEncodingPairs = extern struct {
    encodingPair: TECEncodingPairRec,
    flags: objc.UInt32,
    speed: objc.UInt32,
};

pub const TECEncodingPairsRec = extern struct {
    count: objc.UInt32,
    encodingPairs: TECEncodingPairs,
};

pub const TECEncodingPairsPtr = TECEncodingPairsRec;

pub const TECEncodingPairsHandle = TECEncodingPairsPtr;

pub const TECLocaleListToEncodingListRec = extern struct {
    offset: objc.UInt32,
    count: objc.UInt32,
    locales: objc.RegionCode,
};

pub const TECLocaleListToEncodingListPtr = TECLocaleListToEncodingListRec;

pub const TECLocaleToEncodingsListRec = extern struct {
    count: objc.UInt32,
    localeListToEncodingList: TECLocaleListToEncodingListRec,
};

pub const TECLocaleToEncodingsListPtr = TECLocaleToEncodingsListRec;

pub const TECLocaleToEncodingsListHandle = TECLocaleToEncodingsListPtr;

pub const TECInternetNameRec = extern struct {
    offset: objc.UInt32,
    searchEncoding: TextEncodingRec,
    encodingNameLength: objc.UInt8,
    encodingName: [1]objc.UInt8,
};

pub const TECInternetNamesRec = extern struct {
    count: objc.UInt32,
    InternetNames: TECInternetNameRec,
};

pub const TECInternetNamesPtr = TECInternetNamesRec;

pub const TECInternetNamesHandle = TECInternetNamesPtr;

pub const TECBufferContextRec = extern struct {
    textInputBuffer: ConstTextPtr,
    textInputBufferEnd: ConstTextPtr,
    textOutputBuffer: TextPtr,
    textOutputBufferEnd: TextPtr,
    encodingInputBuffer: ConstTextEncodingRunPtr,
    encodingInputBufferEnd: ConstTextEncodingRunPtr,
    encodingOutputBuffer: TextEncodingRunPtr,
    encodingOutputBufferEnd: TextEncodingRunPtr,
};

pub const TECPluginStateRec = extern struct {
    state1: objc.UInt8,
    state2: objc.UInt8,
    state3: objc.UInt8,
    state4: objc.UInt8,
    longState1: objc.UInt32,
    longState2: objc.UInt32,
    longState3: objc.UInt32,
    longState4: objc.UInt32,
};

pub const TECConverterContextRec = extern struct {
    pluginRec: objc.Ptr,
    sourceEncoding: TextEncoding,
    destEncoding: TextEncoding,
    reserved1: objc.UInt32,
    reserved2: objc.UInt32,
    bufferContext: TECBufferContextRec,
    contextRefCon: objc.URefCon,
    conversionProc: objc.ProcPtr,
    flushProc: objc.ProcPtr,
    clearContextInfoProc: objc.ProcPtr,
    options1: objc.UInt32,
    options2: objc.UInt32,
    pluginState: TECPluginStateRec,
};

pub const TECSnifferContextRec = extern struct {
    pluginRec: objc.Ptr,
    encoding: TextEncoding,
    maxErrors: objc.ItemCount,
    maxFeatures: objc.ItemCount,
    textInputBuffer: ConstTextPtr,
    textInputBufferEnd: ConstTextPtr,
    numFeatures: objc.ItemCount,
    numErrors: objc.ItemCount,
    contextRefCon: objc.URefCon,
    sniffProc: objc.ProcPtr,
    clearContextInfoProc: objc.ProcPtr,
    pluginState: TECPluginStateRec,
};

pub const TECPluginNewEncodingConverterPtr = objc.OSStatus;

pub const TECPluginClearContextInfoPtr = objc.OSStatus;

pub const TECPluginConvertTextEncodingPtr = objc.OSStatus;

pub const TECPluginFlushConversionPtr = objc.OSStatus;

pub const TECPluginDisposeEncodingConverterPtr = objc.OSStatus;

pub const TECPluginNewEncodingSnifferPtr = objc.OSStatus;

pub const TECPluginClearSnifferContextInfoPtr = objc.OSStatus;

pub const TECPluginSniffTextEncodingPtr = objc.OSStatus;

pub const TECPluginDisposeEncodingSnifferPtr = objc.OSStatus;

pub const TECPluginGetCountAvailableTextEncodingsPtr = objc.OSStatus;

pub const TECPluginGetCountAvailableTextEncodingPairsPtr = objc.OSStatus;

pub const TECPluginGetCountDestinationTextEncodingsPtr = objc.OSStatus;

pub const TECPluginGetCountSubTextEncodingsPtr = objc.OSStatus;

pub const TECPluginGetCountAvailableSniffersPtr = objc.OSStatus;

pub const TECPluginGetTextEncodingInternetNamePtr = objc.OSStatus;

pub const TECPluginGetTextEncodingFromInternetNamePtr = objc.OSStatus;

pub const TECPluginGetCountWebEncodingsPtr = objc.OSStatus;

pub const TECPluginGetCountMailEncodingsPtr = objc.OSStatus;

pub const anon2551 = u32;
pub const anon2551_TECPluginDispatchTableVersion1: u32 = 65536;
pub const anon2551_TECPluginDispatchTableVersion1_1: u32 = 65537;
pub const anon2551_TECPluginDispatchTableVersion1_2: u32 = 65538;
pub const anon2551_TECPluginDispatchTableCurrentVersion: u32 = 65538;

pub const TECPluginDispatchTable = extern struct {
    version: TECPluginVersion,
    compatibleVersion: TECPluginVersion,
    PluginID: TECPluginSignature,
    PluginNewEncodingConverter: TECPluginNewEncodingConverterPtr,
    PluginClearContextInfo: TECPluginClearContextInfoPtr,
    PluginConvertTextEncoding: TECPluginConvertTextEncodingPtr,
    PluginFlushConversion: TECPluginFlushConversionPtr,
    PluginDisposeEncodingConverter: TECPluginDisposeEncodingConverterPtr,
    PluginNewEncodingSniffer: TECPluginNewEncodingSnifferPtr,
    PluginClearSnifferContextInfo: TECPluginClearSnifferContextInfoPtr,
    PluginSniffTextEncoding: TECPluginSniffTextEncodingPtr,
    PluginDisposeEncodingSniffer: TECPluginDisposeEncodingSnifferPtr,
    PluginGetCountAvailableTextEncodings: TECPluginGetCountAvailableTextEncodingsPtr,
    PluginGetCountAvailableTextEncodingPairs: TECPluginGetCountAvailableTextEncodingPairsPtr,
    PluginGetCountDestinationTextEncodings: TECPluginGetCountDestinationTextEncodingsPtr,
    PluginGetCountSubTextEncodings: TECPluginGetCountSubTextEncodingsPtr,
    PluginGetCountAvailableSniffers: TECPluginGetCountAvailableSniffersPtr,
    PluginGetCountWebTextEncodings: TECPluginGetCountWebEncodingsPtr,
    PluginGetCountMailTextEncodings: TECPluginGetCountMailEncodingsPtr,
    PluginGetTextEncodingInternetName: TECPluginGetTextEncodingInternetNamePtr,
    PluginGetTextEncodingFromInternetName: TECPluginGetTextEncodingFromInternetNamePtr,
};

pub const TECPluginGetPluginDispatchTablePtr = TECPluginDispatchTable;

pub const DescType = objc.ResType;

pub const AEKeyword = objc.FourCharCode;

pub const anon1221 = DescType;
pub const anon1221_typeAEList: DescType = 1818850164;
pub const anon1221_typeAERecord: DescType = 1919247215;
pub const anon1221_typeAppleEvent: DescType = 1634039412;
pub const anon1221_typeEventRecord: DescType = 1702261347;
pub const anon1221_typeTrue: DescType = 1953658213;
pub const anon1221_typeFalse: DescType = 1717660787;
pub const anon1221_typeAlias: DescType = 1634494835;
pub const anon1221_typeEnumerated: DescType = 1701737837;
pub const anon1221_typeType: DescType = 1954115685;
pub const anon1221_typeAppParameters: DescType = 1634758753;
pub const anon1221_typeProperty: DescType = 1886547824;
pub const anon1221_typeFSRef: DescType = 1718841958;
pub const anon1221_typeFileURL: DescType = 1718973036;
pub const anon1221_typeBookmarkData: DescType = 1651339883;
pub const anon1221_typeKeyword: DescType = 1801812343;
pub const anon1221_typeSectionH: DescType = 1936024436;
pub const anon1221_typeWildCard: DescType = 707406378;
pub const anon1221_typeApplSignature: DescType = 1936287598;
pub const anon1221_typeQDRectangle: DescType = 1902408308;
pub const anon1221_typeFixed: DescType = 1718188132;
pub const anon1221_typeProcessSerialNumber: DescType = 1886613024;
pub const anon1221_typeApplicationURL: DescType = 1634759276;
pub const anon1221_typeNull: DescType = 1853189228;

pub const anon1601 = DescType;
pub const anon1601_typeCFAttributedStringRef: DescType = 1667654003;
pub const anon1601_typeCFMutableAttributedStringRef: DescType = 1667653985;
pub const anon1601_typeCFStringRef: DescType = 1667658612;
pub const anon1601_typeCFMutableStringRef: DescType = 1667657075;
pub const anon1601_typeCFArrayRef: DescType = 1667654002;
pub const anon1601_typeCFMutableArrayRef: DescType = 1667657057;
pub const anon1601_typeCFDictionaryRef: DescType = 1667654755;
pub const anon1601_typeCFMutableDictionaryRef: DescType = 1667657060;
pub const anon1601_typeCFNumberRef: DescType = 1667657314;
pub const anon1601_typeCFBooleanRef: DescType = 1667658854;
pub const anon1601_typeCFTypeRef: DescType = 1667658873;

pub const anon1751 = DescType;
pub const anon1751_typeKernelProcessID: DescType = 1802529124;
pub const anon1751_typeMachPort: DescType = 1886351988;
pub const anon1751_SecCSCheckAllArchitectures: DescType = 1;
pub const anon1751_SecCSDoNotValidateExecutable: DescType = 2;
pub const anon1751_SecCSDoNotValidateResources: DescType = 4;
pub const anon1751_SecCSBasicValidateOnly: DescType = 6;
pub const anon1751_SecCSCheckNestedCode: DescType = 8;
pub const anon1751_SecCSStrictValidate: DescType = 16;
pub const anon1751_SecCSFullReport: DescType = 32;
pub const anon1751_SecCSCheckGatekeeperArchitectures: DescType = 65;
pub const anon1751_SecCSRestrictSymlinks: DescType = 128;
pub const anon1751_SecCSRestrictToAppLike: DescType = 256;
pub const anon1751_SecCSRestrictSidebandData: DescType = 512;
pub const anon1751_SecCSUseSoftwareSigningCert: DescType = 1024;
pub const anon1751_SecCSValidatePEH: DescType = 2048;
pub const anon1751_SecCSSingleThreaded: DescType = 4096;
pub const anon1751_SecCSAllowNetworkAccess: DescType = 65536;
pub const anon1751_SecCSFastExecutableValidation: DescType = 131072;

pub const anon1811 = DescType;
pub const anon1811_typeAuditToken: DescType = 1953459054;

pub const anon1861 = DescType;
pub const anon1861_typeApplicationBundleID: DescType = 1651863140;

pub const anon2261 = i32;
pub const anon2261_AEDebugPOSTHeader: i32 = 1;
pub const anon2261_AEDebugReplyHeader: i32 = 2;
pub const anon2261_AEDebugXMLRequest: i32 = 4;
pub const anon2261_AEDebugXMLResponse: i32 = 8;
pub const anon2261_AEDebugXMLDebugAll: i32 = -1;

pub const anon2381 = u32;
pub const anon2381_SOAP1999Schema: u32 = 1936931129;
pub const anon2381_SOAP2001Schema: u32 = 1936928817;

pub const anon2431 = AEKeyword;
pub const anon2431_eyUserNameAttr: AEKeyword = 1970168173;
pub const anon2431_eyUserPasswordAttr: AEKeyword = 1885434739;
pub const anon2431_eyDisableAuthenticationAttr: AEKeyword = 1635087464;
pub const anon2431_eyXMLDebuggingAttr: AEKeyword = 2019844711;
pub const anon2431_AERPCClass: AEKeyword = 1919968032;
pub const anon2431_AEXMLRPCScheme: AEKeyword = 1380991794;
pub const anon2431_AESOAPScheme: AEKeyword = 1397702992;
pub const anon2431_AESharedScriptHandler: AEKeyword = 2004050800;
pub const anon2431_eyRPCMethodName: AEKeyword = 1835365480;
pub const anon2431_eyRPCMethodParam: AEKeyword = 1885434477;
pub const anon2431_eyRPCMethodParamOrder: AEKeyword = 795832932;
pub const anon2431_eyAEPOSTHeaderData: AEKeyword = 1885889892;
pub const anon2431_eyAEReplyHeaderData: AEKeyword = 1919444324;
pub const anon2431_eyAEXMLRequestData: AEKeyword = 2020762993;
pub const anon2431_eyAEXMLReplyData: AEKeyword = 2020762992;
pub const anon2431_eyAdditionalHTTPHeaders: AEKeyword = 1634231652;
pub const anon2431_eySOAPAction: AEKeyword = 1935762292;
pub const anon2431_eySOAPMethodNameSpace: AEKeyword = 1836281955;
pub const anon2431_eySOAPMethodNameSpaceURI: AEKeyword = 1836281973;
pub const anon2431_eySOAPSchemaVersion: AEKeyword = 1936941928;

pub const anon2881 = AEKeyword;
pub const anon2881_eySOAPStructureMetaData: AEKeyword = 796093796;
pub const anon2881_eySOAPSMDNamespace: AEKeyword = 1936944755;
pub const anon2881_eySOAPSMDNamespaceURI: AEKeyword = 1936944757;
pub const anon2881_eySOAPSMDType: AEKeyword = 1936946288;

pub const anon3001 = u32;
pub const anon3001_AEUseHTTPProxyAttr: u32 = 2020962418;
pub const anon3001_AEHTTPProxyPortAttr: u32 = 2020111472;
pub const anon3001_AEHTTPProxyHostAttr: u32 = 2020111464;
pub const anon3001_eyAEAngle: u32 = 1801547367;
pub const anon3001_eyAEArcAngle: u32 = 1885434467;

pub const anon3321 = u32;
pub const anon3321_AEDescListFactorNone: u32 = 0;
pub const anon3321_AEDescListFactorType: u32 = 4;
pub const anon3321_AEDescListFactorTypeAndSize: u32 = 8;

pub const anon3391 = i32;
pub const anon3391_AutoGenerateReturnID: i32 = -1;
pub const anon3391_AnyTransactionID: i32 = 0;

pub const OpaqueAEDataStorageType = extern struct {};

pub const AEDataStorageType = OpaqueAEDataStorageType;

pub const AEDataStorage = AEDataStorageType;

pub const AEDesc = extern struct {
    descriptorType: DescType,
    dataHandle: AEDataStorage,
};

pub const AEDescPtr = AEDesc;

pub const AEKeyDesc = extern struct {
    descKey: AEKeyword,
    descContent: AEDesc,
};

pub const AEDescList = AEDesc;

pub const AERecord = AEDescList;

pub const AEAddressDesc = AEDesc;

pub const AppleEvent = AERecord;

pub const AppleEventPtr = AppleEvent;

pub const AEReturnID = objc.SInt16;

pub const AETransactionID = objc.SInt32;

pub const AEEventClass = objc.FourCharCode;

pub const AEEventID = objc.FourCharCode;

pub const AEArrayType = objc.SInt8;

pub const AEArrayData = extern union {
    kAEDataArray: [1]objc.SInt16,
    kAEPackedArray: [1]i8,
    kAEHandleArray: [1]objc.Handle,
    kAEDescArray: [1]AEDesc,
    kAEKeyDescArray: [1]AEKeyDesc,
};

pub const AEArrayDataPointer = AEArrayData;

pub const AESendPriority = objc.SInt16;

pub const anon4051 = u32;
pub const anon4051_AENormalPriority: u32 = 0;
pub const anon4051_AEHighPriority: u32 = 1;

pub const AESendMode = objc.SInt32;

pub const anon4121 = u32;
pub const anon4121_AENoReply: u32 = 1;
pub const anon4121_AEQueueReply: u32 = 2;
pub const anon4121_AEWaitReply: u32 = 3;
pub const anon4121_AEDontReconnect: u32 = 128;
pub const anon4121_AEWantReceipt: u32 = 512;
pub const anon4121_AENeverInteract: u32 = 16;
pub const anon4121_AECanInteract: u32 = 32;
pub const anon4121_AEAlwaysInteract: u32 = 48;
pub const anon4121_AECanSwitchLayer: u32 = 64;
pub const anon4121_AEDontRecord: u32 = 4096;
pub const anon4121_AEDontExecute: u32 = 8192;
pub const anon4121_AEProcessNonReplyEvents: u32 = 32768;
pub const anon4121_AEDoNotAutomaticallyAddAnnotationsToEvent: u32 = 65536;

pub const anon4301 = i32;
pub const anon4301_AEDefaultTimeout: i32 = -1;
pub const anon4301_NoTimeOut: i32 = -2;

pub const AECoerceDescProcPtr = objc.OSErr;

pub const AECoercePtrProcPtr = objc.OSErr;

pub const AECoerceDescUPP = AECoerceDescProcPtr;

pub const AECoercePtrUPP = AECoercePtrProcPtr;

pub extern "CoreServices" fn NewAECoerceDescUPP(userRoutine: AECoerceDescProcPtr) callconv(.C) AECoerceDescUPP;

pub extern "CoreServices" fn NewAECoercePtrUPP(userRoutine: AECoercePtrProcPtr) callconv(.C) AECoercePtrUPP;

pub extern "CoreServices" fn DisposeAECoerceDescUPP(userUPP: AECoerceDescUPP) callconv(.C) void;

pub extern "CoreServices" fn DisposeAECoercePtrUPP(userUPP: AECoercePtrUPP) callconv(.C) void;

pub extern "CoreServices" fn InvokeAECoerceDescUPP(
    fromDesc: ?*AEDesc,
    toType: DescType,
    handlerRefcon: objc.SRefCon,
    toDesc: ?*AEDesc,
    userUPP: AECoerceDescUPP,
) callconv(.C) objc.OSErr;

pub extern "CoreServices" fn InvokeAECoercePtrUPP(
    typeCode: DescType,
    dataPtr: ?*anyopaque,
    dataSize: objc.Size,
    toType: DescType,
    handlerRefcon: objc.SRefCon,
    result: ?*AEDesc,
    userUPP: AECoercePtrUPP,
) callconv(.C) objc.OSErr;

pub const AECoercionHandlerUPP = AECoerceDescUPP;

pub extern "CoreServices" fn AEInstallCoercionHandler(
    fromType: DescType,
    toType: DescType,
    handler: AECoercionHandlerUPP,
    handlerRefcon: objc.SRefCon,
    fromTypeIsDesc: objc.Boolean,
    isSysHandler: objc.Boolean,
) callconv(.C) objc.OSErr;

pub extern "CoreServices" fn AERemoveCoercionHandler(
    fromType: DescType,
    toType: DescType,
    handler: AECoercionHandlerUPP,
    isSysHandler: objc.Boolean,
) callconv(.C) objc.OSErr;

pub extern "CoreServices" fn AEGetCoercionHandler(
    fromType: DescType,
    toType: DescType,
    handler: ?*AECoercionHandlerUPP,
    handlerRefcon: ?*objc.SRefCon,
    fromTypeIsDesc: ?*objc.Boolean,
    isSysHandler: objc.Boolean,
) callconv(.C) objc.OSErr;

pub extern "CoreServices" fn AECoercePtr(
    typeCode: DescType,
    dataPtr: ?*anyopaque,
    dataSize: objc.Size,
    toType: DescType,
    result: ?*AEDesc,
) callconv(.C) objc.OSErr;

pub extern "CoreServices" fn AECoerceDesc(theAEDesc: ?*AEDesc, toType: DescType, result: ?*AEDesc) callconv(.C) objc.OSErr;

pub extern "CoreServices" fn AEInitializeDesc(desc: ?*AEDesc) callconv(.C) void;

pub extern "CoreServices" fn AECreateDesc(
    typeCode: DescType,
    dataPtr: ?*anyopaque,
    dataSize: objc.Size,
    result: ?*AEDesc,
) callconv(.C) objc.OSErr;

pub extern "CoreServices" fn AEDisposeDesc(theAEDesc: ?*AEDesc) callconv(.C) objc.OSErr;

pub extern "CoreServices" fn AEDuplicateDesc(theAEDesc: ?*AEDesc, result: ?*AEDesc) callconv(.C) objc.OSErr;

pub const AEDisposeExternalProcPtr = ?*const fn (?*anyopaque, objc.Size, objc.SRefCon) callconv(.C) void;

pub const AEDisposeExternalUPP = AEDisposeExternalProcPtr;

pub extern "CoreServices" fn AECreateDescFromExternalPtr(
    descriptorType: objc.OSType,
    dataPtr: ?*anyopaque,
    dataLength: objc.Size,
    disposeCallback: AEDisposeExternalUPP,
    disposeRefcon: objc.SRefCon,
    theDesc: ?*AEDesc,
) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn AECompareDesc(desc1: ?*AEDesc, desc2: ?*AEDesc, resultP: ?*objc.Boolean) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn AECreateList(
    factoringPtr: ?*anyopaque,
    factoredSize: objc.Size,
    isRecord: objc.Boolean,
    resultList: ?*AEDescList,
) callconv(.C) objc.OSErr;

pub extern "CoreServices" fn AECountItems(theAEDescList: ?*AEDescList, theCount: ?*i64) callconv(.C) objc.OSErr;

pub extern "CoreServices" fn AEPutPtr(
    theAEDescList: ?*AEDescList,
    index: i64,
    typeCode: DescType,
    dataPtr: ?*anyopaque,
    dataSize: objc.Size,
) callconv(.C) objc.OSErr;

pub extern "CoreServices" fn AEPutDesc(theAEDescList: ?*AEDescList, index: i64, theAEDesc: ?*AEDesc) callconv(.C) objc.OSErr;

pub extern "CoreServices" fn AEGetNthPtr(
    theAEDescList: ?*AEDescList,
    index: i64,
    desiredType: DescType,
    theAEKeyword: ?*AEKeyword,
    typeCode: ?*DescType,
    dataPtr: ?*anyopaque,
    maximumSize: objc.Size,
    actualSize: ?*objc.Size,
) callconv(.C) objc.OSErr;

pub extern "CoreServices" fn AEGetNthDesc(
    theAEDescList: ?*AEDescList,
    index: i64,
    desiredType: DescType,
    theAEKeyword: ?*AEKeyword,
    result: ?*AEDesc,
) callconv(.C) objc.OSErr;

pub extern "CoreServices" fn AESizeOfNthItem(
    theAEDescList: ?*AEDescList,
    index: i64,
    typeCode: ?*DescType,
    dataSize: ?*objc.Size,
) callconv(.C) objc.OSErr;

pub extern "CoreServices" fn AEGetArray(
    theAEDescList: ?*AEDescList,
    arrayType: AEArrayType,
    arrayPtr: AEArrayDataPointer,
    maximumSize: objc.Size,
    itemType: ?*DescType,
    itemSize: ?*objc.Size,
    itemCount: ?*i64,
) callconv(.C) objc.OSErr;

pub extern "CoreServices" fn AEPutArray(
    theAEDescList: ?*AEDescList,
    arrayType: AEArrayType,
    arrayPtr: ?*AEArrayData,
    itemType: DescType,
    itemSize: objc.Size,
    itemCount: i64,
) callconv(.C) objc.OSErr;

pub extern "CoreServices" fn AEDeleteItem(theAEDescList: ?*AEDescList, index: i64) callconv(.C) objc.OSErr;

pub extern "CoreServices" fn AECheckIsRecord(theDesc: ?*AEDesc) callconv(.C) objc.Boolean;

pub extern "CoreServices" fn AECreateAppleEvent(
    theAEEventClass: AEEventClass,
    theAEEventID: AEEventID,
    target: ?*AEAddressDesc,
    returnID: AEReturnID,
    transactionID: AETransactionID,
    result: ?*AppleEvent,
) callconv(.C) objc.OSErr;

pub extern "CoreServices" fn AEPutParamPtr(
    theAppleEvent: ?*AppleEvent,
    theAEKeyword: AEKeyword,
    typeCode: DescType,
    dataPtr: ?*anyopaque,
    dataSize: objc.Size,
) callconv(.C) objc.OSErr;

pub extern "CoreServices" fn AEPutParamDesc(theAppleEvent: ?*AppleEvent, theAEKeyword: AEKeyword, theAEDesc: ?*AEDesc) callconv(.C) objc.OSErr;

pub extern "CoreServices" fn AEGetParamPtr(
    theAppleEvent: ?*AppleEvent,
    theAEKeyword: AEKeyword,
    desiredType: DescType,
    actualType: ?*DescType,
    dataPtr: ?*anyopaque,
    maximumSize: objc.Size,
    actualSize: ?*objc.Size,
) callconv(.C) objc.OSErr;

pub extern "CoreServices" fn AEGetParamDesc(
    theAppleEvent: ?*AppleEvent,
    theAEKeyword: AEKeyword,
    desiredType: DescType,
    result: ?*AEDesc,
) callconv(.C) objc.OSErr;

pub extern "CoreServices" fn AESizeOfParam(
    theAppleEvent: ?*AppleEvent,
    theAEKeyword: AEKeyword,
    typeCode: ?*DescType,
    dataSize: ?*objc.Size,
) callconv(.C) objc.OSErr;

pub extern "CoreServices" fn AEDeleteParam(theAppleEvent: ?*AppleEvent, theAEKeyword: AEKeyword) callconv(.C) objc.OSErr;

pub extern "CoreServices" fn AEGetAttributePtr(
    theAppleEvent: ?*AppleEvent,
    theAEKeyword: AEKeyword,
    desiredType: DescType,
    typeCode: ?*DescType,
    dataPtr: ?*anyopaque,
    maximumSize: objc.Size,
    actualSize: ?*objc.Size,
) callconv(.C) objc.OSErr;

pub extern "CoreServices" fn AEGetAttributeDesc(
    theAppleEvent: ?*AppleEvent,
    theAEKeyword: AEKeyword,
    desiredType: DescType,
    result: ?*AEDesc,
) callconv(.C) objc.OSErr;

pub extern "CoreServices" fn AESizeOfAttribute(
    theAppleEvent: ?*AppleEvent,
    theAEKeyword: AEKeyword,
    typeCode: ?*DescType,
    dataSize: ?*objc.Size,
) callconv(.C) objc.OSErr;

pub extern "CoreServices" fn AEPutAttributePtr(
    theAppleEvent: ?*AppleEvent,
    theAEKeyword: AEKeyword,
    typeCode: DescType,
    dataPtr: ?*anyopaque,
    dataSize: objc.Size,
) callconv(.C) objc.OSErr;

pub extern "CoreServices" fn AEPutAttributeDesc(theAppleEvent: ?*AppleEvent, theAEKeyword: AEKeyword, theAEDesc: ?*AEDesc) callconv(.C) objc.OSErr;

pub extern "CoreServices" fn AESizeOfFlattenedDesc(theAEDesc: ?*AEDesc) callconv(.C) objc.Size;

pub extern "CoreServices" fn AEFlattenDesc(
    theAEDesc: ?*AEDesc,
    buffer: objc.Ptr,
    bufferSize: objc.Size,
    actualSize: ?*objc.Size,
) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn AEUnflattenDesc(buffer: ?*anyopaque, result: ?*AEDesc) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn AEUnflattenDescFromBytes(buffer: ?*anyopaque, bufferLen: objc.size_t, result: ?*AEDesc) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn AEGetDescData(theAEDesc: ?*AEDesc, dataPtr: ?*anyopaque, maximumSize: objc.Size) callconv(.C) objc.OSErr;

pub extern "CoreServices" fn AEGetDescDataSize(theAEDesc: ?*AEDesc) callconv(.C) objc.Size;

pub extern "CoreServices" fn AEReplaceDescData(
    typeCode: DescType,
    dataPtr: ?*anyopaque,
    dataSize: objc.Size,
    theAEDesc: ?*AEDesc,
) callconv(.C) objc.OSErr;

pub extern "CoreServices" fn AEGetDescDataRange(
    dataDesc: ?*AEDesc,
    buffer: ?*anyopaque,
    offset: objc.Size,
    length: objc.Size,
) callconv(.C) objc.OSStatus;

pub const AEEventHandlerProcPtr = objc.OSErr;

pub const AEEventHandlerUPP = AEEventHandlerProcPtr;

pub extern "CoreServices" fn NewAEDisposeExternalUPP(userRoutine: AEDisposeExternalProcPtr) callconv(.C) AEDisposeExternalUPP;

pub extern "CoreServices" fn NewAEEventHandlerUPP(userRoutine: AEEventHandlerProcPtr) callconv(.C) AEEventHandlerUPP;

pub extern "CoreServices" fn DisposeAEDisposeExternalUPP(userUPP: AEDisposeExternalUPP) callconv(.C) void;

pub extern "CoreServices" fn DisposeAEEventHandlerUPP(userUPP: AEEventHandlerUPP) callconv(.C) void;

pub extern "CoreServices" fn InvokeAEDisposeExternalUPP(
    dataPtr: ?*anyopaque,
    dataLength: objc.Size,
    refcon: objc.SRefCon,
    userUPP: AEDisposeExternalUPP,
) callconv(.C) void;

pub extern "CoreServices" fn InvokeAEEventHandlerUPP(
    theAppleEvent: ?*AppleEvent,
    reply: ?*AppleEvent,
    handlerRefcon: objc.SRefCon,
    userUPP: AEEventHandlerUPP,
) callconv(.C) objc.OSErr;

pub const anon761 = AEEventID;
pub const anon761_AEOpenApplication: AEEventID = 1868656752;
pub const anon761_AEOpenDocuments: AEEventID = 1868853091;
pub const anon761_AEPrintDocuments: AEEventID = 1885630307;
pub const anon761_AEOpenContents: AEEventID = 1868787566;
pub const anon761_AEQuitApplication: AEEventID = 1903520116;
pub const anon761_AEAnswer: AEEventID = 1634628466;
pub const anon761_AEApplicationDied: AEEventID = 1868720500;
pub const anon761_AEShowPreferences: AEEventID = 1886545254;

pub const anon941 = AEEventID;
pub const anon941_AEStartRecording: AEEventID = 1919247201;
pub const anon941_AEStopRecording: AEEventID = 1919247203;
pub const anon941_AENotifyStartRecording: AEEventID = 1919247153;
pub const anon941_AENotifyStopRecording: AEEventID = 1919247152;
pub const anon941_AENotifyRecording: AEEventID = 1919247218;
pub const anon941_typeObjectSpecifier: AEEventID = 1868720672;
pub const anon941_typeObjectBeingExamined: AEEventID = 1702391150;
pub const anon941_typeCurrentContainer: AEEventID = 1667460724;
pub const anon941_typeToken: AEEventID = 1953459045;
pub const anon941_typeRelativeDescriptor: AEEventID = 1919249440;
pub const anon941_typeAbsoluteOrdinal: AEEventID = 1633842031;
pub const anon941_typeIndexDescriptor: AEEventID = 1768842341;
pub const anon941_typeRangeDescriptor: AEEventID = 1918987879;
pub const anon941_typeLogicalDescriptor: AEEventID = 1819240297;
pub const anon941_typeCompDescriptor: AEEventID = 1668116580;
pub const anon941_typeOSLTokenList: AEEventID = 1869837420;
pub const anon941_CSSM_ERRCODE_INTERNAL_ERROR: AEEventID = 1;
pub const anon941_CSSM_ERRCODE_MEMORY_ERROR: AEEventID = 2;
pub const anon941_CSSM_ERRCODE_MDS_ERROR: AEEventID = 3;
pub const anon941_CSSM_ERRCODE_INVALID_POINTER: AEEventID = 4;
pub const anon941_CSSM_ERRCODE_INVALID_INPUT_POINTER: AEEventID = 5;
pub const anon941_CSSM_ERRCODE_INVALID_OUTPUT_POINTER: AEEventID = 6;
pub const anon941_CSSM_ERRCODE_FUNCTION_NOT_IMPLEMENTED: AEEventID = 7;
pub const anon941_CSSM_ERRCODE_SELF_CHECK_FAILED: AEEventID = 8;
pub const anon941_CSSM_ERRCODE_OS_ACCESS_DENIED: AEEventID = 9;
pub const anon941_CSSM_ERRCODE_FUNCTION_FAILED: AEEventID = 10;
pub const anon941_CSSM_ERRCODE_MODULE_MANIFEST_VERIFY_FAILED: AEEventID = 11;
pub const anon941_CSSM_ERRCODE_INVALID_GUID: AEEventID = 12;

pub const AEEventSource = objc.SInt8;

pub const anon1202 = i32;
pub const anon1202_errAETargetAddressNotPermitted: i32 = -1742;
pub const anon1202_errAEEventNotPermitted: i32 = -1743;

pub extern "CoreServices" fn AEInstallEventHandler(
    theAEEventClass: AEEventClass,
    theAEEventID: AEEventID,
    handler: AEEventHandlerUPP,
    handlerRefcon: objc.SRefCon,
    isSysHandler: objc.Boolean,
) callconv(.C) objc.OSErr;

pub extern "CoreServices" fn AERemoveEventHandler(
    theAEEventClass: AEEventClass,
    theAEEventID: AEEventID,
    handler: AEEventHandlerUPP,
    isSysHandler: objc.Boolean,
) callconv(.C) objc.OSErr;

pub extern "CoreServices" fn AEGetEventHandler(
    theAEEventClass: AEEventClass,
    theAEEventID: AEEventID,
    handler: ?*AEEventHandlerUPP,
    handlerRefcon: ?*objc.SRefCon,
    isSysHandler: objc.Boolean,
) callconv(.C) objc.OSErr;

pub extern "CoreServices" fn AEInstallSpecialHandler(functionClass: AEKeyword, handler: AEEventHandlerUPP, isSysHandler: objc.Boolean) callconv(.C) objc.OSErr;

pub extern "CoreServices" fn AERemoveSpecialHandler(functionClass: AEKeyword, handler: AEEventHandlerUPP, isSysHandler: objc.Boolean) callconv(.C) objc.OSErr;

pub extern "CoreServices" fn AEGetSpecialHandler(functionClass: AEKeyword, handler: ?*AEEventHandlerUPP, isSysHandler: objc.Boolean) callconv(.C) objc.OSErr;

pub extern "CoreServices" fn AEManagerInfo(keyWord: AEKeyword, result: ?*i64) callconv(.C) objc.OSErr;

pub const AERemoteProcessResolverContext = extern struct {
    version: core_foundation.Index,
    info: ?*anyopaque,
    retain: core_foundation.AllocatorRetainCallBack,
    release: core_foundation.AllocatorReleaseCallBack,
    copyDescription: core_foundation.AllocatorCopyDescriptionCallBack,
};

pub const AERemoteProcessResolver = extern struct {};

pub const AERemoteProcessResolverRef = AERemoteProcessResolver;

pub extern "CoreServices" fn AECreateRemoteProcessResolver(allocator: core_foundation.AllocatorRef, url: core_foundation.URLRef) callconv(.C) AERemoteProcessResolverRef;

pub extern "CoreServices" fn AEDisposeRemoteProcessResolver(ref: AERemoteProcessResolverRef) callconv(.C) void;

pub extern "CoreServices" fn AERemoteProcessResolverGetProcesses(ref: AERemoteProcessResolverRef, outError: ?*core_foundation.StreamError) callconv(.C) core_foundation.ArrayRef;

pub const AERemoteProcessResolverCallback = ?*const fn (AERemoteProcessResolverRef, ?*anyopaque) callconv(.C) void;

pub extern "CoreServices" fn AERemoteProcessResolverScheduleWithRunLoop(
    ref: AERemoteProcessResolverRef,
    runLoop: core_foundation.RunLoopRef,
    runLoopMode: core_foundation.StringRef,
    callback: AERemoteProcessResolverCallback,
    ctx: ?*AERemoteProcessResolverContext,
) callconv(.C) void;

pub extern "CoreServices" fn AEDeterminePermissionToAutomateTarget(
    target: ?*AEAddressDesc,
    theAEEventClass: AEEventClass,
    theAEEventID: AEEventID,
    askUserIfNeeded: objc.Boolean,
) callconv(.C) objc.OSStatus;

pub const anon6151 = u32;
pub const anon6151_AEDoNotPromptForUserConsent: u32 = 131072;

pub extern "CoreServices" fn CreateOffsetDescriptor(theOffset: i64, theDescriptor: ?*AEDesc) callconv(.C) objc.OSErr;

pub extern "CoreServices" fn CreateCompDescriptor(
    comparisonOperator: DescType,
    operand1: ?*AEDesc,
    operand2: ?*AEDesc,
    disposeInputs: objc.Boolean,
    theDescriptor: ?*AEDesc,
) callconv(.C) objc.OSErr;

pub extern "CoreServices" fn CreateLogicalDescriptor(
    theLogicalTerms: ?*AEDescList,
    theLogicOperator: DescType,
    disposeInputs: objc.Boolean,
    theDescriptor: ?*AEDesc,
) callconv(.C) objc.OSErr;

pub extern "CoreServices" fn CreateObjSpecifier(
    desiredClass: DescType,
    theContainer: ?*AEDesc,
    keyForm: DescType,
    keyData: ?*AEDesc,
    disposeInputs: objc.Boolean,
    objSpecifier: ?*AEDesc,
) callconv(.C) objc.OSErr;

pub extern "CoreServices" fn CreateRangeDescriptor(
    rangeStart: ?*AEDesc,
    rangeStop: ?*AEDesc,
    disposeInputs: objc.Boolean,
    theDescriptor: ?*AEDesc,
) callconv(.C) objc.OSErr;

pub const anon681 = AEKeyword;
pub const anon681_eyAERangeStart: AEKeyword = 1937006962;
pub const anon681_eyAERangeStop: AEKeyword = 1937010544;
pub const anon681_eyDisposeTokenProc: AEKeyword = 2020896619;
pub const anon681_eyAECompareProc: AEKeyword = 1668116594;
pub const anon681_eyAECountProc: AEKeyword = 1668247156;
pub const anon681_eyAEMarkTokenProc: AEKeyword = 1835755876;
pub const anon681_eyAEMarkProc: AEKeyword = 1835102827;
pub const anon681_eyAEAdjustMarksProc: AEKeyword = 1633970797;
pub const anon681_eyAEGetErrDescProc: AEKeyword = 1768842339;

pub const ccntTokenRecord = extern struct {
    tokenClass: DescType,
    token: AEDesc,
};

pub const ccntTokenRecPtr = ccntTokenRecord;

pub const ccntTokenRecHandle = ccntTokenRecPtr;

pub const OSLAccessorProcPtr = objc.OSErr;

pub const OSLCompareProcPtr = objc.OSErr;

pub const OSLCountProcPtr = objc.OSErr;

pub const OSLDisposeTokenProcPtr = objc.OSErr;

pub const OSLGetMarkTokenProcPtr = objc.OSErr;

pub const OSLGetErrDescProcPtr = objc.OSErr;

pub const OSLMarkProcPtr = objc.OSErr;

pub const OSLAdjustMarksProcPtr = objc.OSErr;

pub const OSLAccessorUPP = OSLAccessorProcPtr;

pub const OSLCompareUPP = OSLCompareProcPtr;

pub const OSLCountUPP = OSLCountProcPtr;

pub const OSLDisposeTokenUPP = OSLDisposeTokenProcPtr;

pub const OSLGetMarkTokenUPP = OSLGetMarkTokenProcPtr;

pub const OSLGetErrDescUPP = OSLGetErrDescProcPtr;

pub const OSLMarkUPP = OSLMarkProcPtr;

pub const OSLAdjustMarksUPP = OSLAdjustMarksProcPtr;

pub extern "CoreServices" fn NewOSLAccessorUPP(userRoutine: OSLAccessorProcPtr) callconv(.C) OSLAccessorUPP;

pub extern "CoreServices" fn NewOSLCompareUPP(userRoutine: OSLCompareProcPtr) callconv(.C) OSLCompareUPP;

pub extern "CoreServices" fn NewOSLCountUPP(userRoutine: OSLCountProcPtr) callconv(.C) OSLCountUPP;

pub extern "CoreServices" fn NewOSLDisposeTokenUPP(userRoutine: OSLDisposeTokenProcPtr) callconv(.C) OSLDisposeTokenUPP;

pub extern "CoreServices" fn NewOSLGetMarkTokenUPP(userRoutine: OSLGetMarkTokenProcPtr) callconv(.C) OSLGetMarkTokenUPP;

pub extern "CoreServices" fn NewOSLGetErrDescUPP(userRoutine: OSLGetErrDescProcPtr) callconv(.C) OSLGetErrDescUPP;

pub extern "CoreServices" fn NewOSLMarkUPP(userRoutine: OSLMarkProcPtr) callconv(.C) OSLMarkUPP;

pub extern "CoreServices" fn NewOSLAdjustMarksUPP(userRoutine: OSLAdjustMarksProcPtr) callconv(.C) OSLAdjustMarksUPP;

pub extern "CoreServices" fn DisposeOSLAccessorUPP(userUPP: OSLAccessorUPP) callconv(.C) void;

pub extern "CoreServices" fn DisposeOSLCompareUPP(userUPP: OSLCompareUPP) callconv(.C) void;

pub extern "CoreServices" fn DisposeOSLCountUPP(userUPP: OSLCountUPP) callconv(.C) void;

pub extern "CoreServices" fn DisposeOSLDisposeTokenUPP(userUPP: OSLDisposeTokenUPP) callconv(.C) void;

pub extern "CoreServices" fn DisposeOSLGetMarkTokenUPP(userUPP: OSLGetMarkTokenUPP) callconv(.C) void;

pub extern "CoreServices" fn DisposeOSLGetErrDescUPP(userUPP: OSLGetErrDescUPP) callconv(.C) void;

pub extern "CoreServices" fn DisposeOSLMarkUPP(userUPP: OSLMarkUPP) callconv(.C) void;

pub extern "CoreServices" fn DisposeOSLAdjustMarksUPP(userUPP: OSLAdjustMarksUPP) callconv(.C) void;

pub extern "CoreServices" fn InvokeOSLAccessorUPP(
    desiredClass: DescType,
    container: ?*AEDesc,
    containerClass: DescType,
    form: DescType,
    selectionData: ?*AEDesc,
    value: ?*AEDesc,
    accessorRefcon: objc.SRefCon,
    userUPP: OSLAccessorUPP,
) callconv(.C) objc.OSErr;

pub extern "CoreServices" fn InvokeOSLCompareUPP(
    oper: DescType,
    obj1: ?*AEDesc,
    obj2: ?*AEDesc,
    result: ?*objc.Boolean,
    userUPP: OSLCompareUPP,
) callconv(.C) objc.OSErr;

pub extern "CoreServices" fn InvokeOSLCountUPP(
    desiredType: DescType,
    containerClass: DescType,
    container: ?*AEDesc,
    result: ?*i64,
    userUPP: OSLCountUPP,
) callconv(.C) objc.OSErr;

pub extern "CoreServices" fn InvokeOSLDisposeTokenUPP(unneededToken: ?*AEDesc, userUPP: OSLDisposeTokenUPP) callconv(.C) objc.OSErr;

pub extern "CoreServices" fn InvokeOSLGetMarkTokenUPP(
    dContainerToken: ?*AEDesc,
    containerClass: DescType,
    result: ?*AEDesc,
    userUPP: OSLGetMarkTokenUPP,
) callconv(.C) objc.OSErr;

pub extern "CoreServices" fn InvokeOSLGetErrDescUPP(appDescPtr: ?*?*AEDesc, userUPP: OSLGetErrDescUPP) callconv(.C) objc.OSErr;

pub extern "CoreServices" fn InvokeOSLMarkUPP(
    dToken: ?*AEDesc,
    markToken: ?*AEDesc,
    index: i64,
    userUPP: OSLMarkUPP,
) callconv(.C) objc.OSErr;

pub extern "CoreServices" fn InvokeOSLAdjustMarksUPP(
    newStart: i64,
    newStop: i64,
    markToken: ?*AEDesc,
    userUPP: OSLAdjustMarksUPP,
) callconv(.C) objc.OSErr;

pub extern "CoreServices" fn AEObjectInit() callconv(.C) objc.OSErr;

pub extern "CoreServices" fn AESetObjectCallbacks(
    myCompareProc: OSLCompareUPP,
    myCountProc: OSLCountUPP,
    myDisposeTokenProc: OSLDisposeTokenUPP,
    myGetMarkTokenProc: OSLGetMarkTokenUPP,
    myMarkProc: OSLMarkUPP,
    myAdjustMarksProc: OSLAdjustMarksUPP,
    myGetErrDescProcPtr: OSLGetErrDescUPP,
) callconv(.C) objc.OSErr;

pub extern "CoreServices" fn AEResolve(objectSpecifier: ?*AEDesc, callbackFlags: i16, theToken: ?*AEDesc) callconv(.C) objc.OSErr;

pub extern "CoreServices" fn AEInstallObjectAccessor(
    desiredClass: DescType,
    containerType: DescType,
    theAccessor: OSLAccessorUPP,
    accessorRefcon: objc.SRefCon,
    isSysHandler: objc.Boolean,
) callconv(.C) objc.OSErr;

pub extern "CoreServices" fn AERemoveObjectAccessor(
    desiredClass: DescType,
    containerType: DescType,
    theAccessor: OSLAccessorUPP,
    isSysHandler: objc.Boolean,
) callconv(.C) objc.OSErr;

pub extern "CoreServices" fn AEGetObjectAccessor(
    desiredClass: DescType,
    containerType: DescType,
    accessor: ?*OSLAccessorUPP,
    accessorRefcon: ?*objc.SRefCon,
    isSysHandler: objc.Boolean,
) callconv(.C) objc.OSErr;

pub extern "CoreServices" fn AEDisposeToken(theToken: ?*AEDesc) callconv(.C) objc.OSErr;

pub extern "CoreServices" fn AECallObjectAccessor(
    desiredClass: DescType,
    containerToken: ?*AEDesc,
    containerClass: DescType,
    keyForm: DescType,
    keyData: ?*AEDesc,
    token: ?*AEDesc,
) callconv(.C) objc.OSErr;

pub const anon1281 = objc.OSType;
pub const anon1281_AEAsk: objc.OSType = 1634954016;
pub const anon1281_AEBefore: objc.OSType = 1650812527;
pub const anon1281_AEBeginning: objc.OSType = 1650945639;
pub const anon1281_AEBeginsWith: objc.OSType = 1650947956;
pub const anon1281_AEBeginTransaction: objc.OSType = 1650812777;
pub const anon1281_AEBold: objc.OSType = 1651469412;
pub const anon1281_AECaseSensEquals: objc.OSType = 1668506993;
pub const anon1281_AECentered: objc.OSType = 1667591796;
pub const anon1281_AEChangeView: objc.OSType = 1986618743;
pub const anon1281_AEClone: objc.OSType = 1668050798;
pub const anon1281_AEClose: objc.OSType = 1668050803;
pub const anon1281_AECondensed: objc.OSType = 1668247140;
pub const anon1281_AEContains: objc.OSType = 1668247156;
pub const anon1281_AECopy: objc.OSType = 1668247673;
pub const anon1281_AECoreSuite: objc.OSType = 1668248165;
pub const anon1281_AECountElements: objc.OSType = 1668183141;
pub const anon1281_AECreateElement: objc.OSType = 1668441452;
pub const anon1281_AECreatePublisher: objc.OSType = 1668314466;
pub const anon1281_AECut: objc.OSType = 1668641824;
pub const anon1281_AEDelete: objc.OSType = 1684368495;
pub const anon1281_CSIdentityClassUser: objc.OSType = 1;
pub const anon1281_CSIdentityClassGroup: objc.OSType = 2;
pub const anon1281_startupFolderIconResource: objc.OSType = -3981;
pub const anon1281_ownedFolderIconResource: objc.OSType = -3980;
pub const anon1281_dropFolderIconResource: objc.OSType = -3979;
pub const anon1281_sharedFolderIconResource: objc.OSType = -3978;
pub const anon1281_mountedFolderIconResource: objc.OSType = -3977;
pub const anon1281_controlPanelFolderIconResource: objc.OSType = -3976;
pub const anon1281_printMonitorFolderIconResource: objc.OSType = -3975;
pub const anon1281_preferencesFolderIconResource: objc.OSType = -3974;
pub const anon1281_extensionsFolderIconResource: objc.OSType = -3973;
pub const anon1281_fontsFolderIconResource: objc.OSType = -3968;
pub const anon1281_fullTrashIconResource: objc.OSType = -3984;

pub const anon1511 = objc.OSType;
pub const anon1511_AEDoObjectsExist: objc.OSType = 1685022072;
pub const anon1511_AEDoScript: objc.OSType = 1685025635;
pub const anon1511_AEDrag: objc.OSType = 1685217639;
pub const anon1511_AEDuplicateSelection: objc.OSType = 1935963504;
pub const anon1511_AEEditGraphic: objc.OSType = 1701079412;
pub const anon1511_AEEmptyTrash: objc.OSType = 1701671028;
pub const anon1511_AEEnd: objc.OSType = 1701733408;
pub const anon1511_AEEndsWith: objc.OSType = 1701733491;
pub const anon1511_AEEndTransaction: objc.OSType = 1701733492;
pub const anon1511_AEEquals: objc.OSType = 1025515552;
pub const anon1511_AEExpanded: objc.OSType = 1885698160;
pub const anon1511_AEFast: objc.OSType = 1717662580;
pub const anon1511_AEFinderEvents: objc.OSType = 1179534418;
pub const anon1511_AEFormulaProtect: objc.OSType = 1718645359;
pub const anon1511_AEFullyJustified: objc.OSType = 1718971500;
pub const anon1511_AEGetClassInfo: objc.OSType = 1903125098;
pub const anon1511_AEGetData: objc.OSType = 1734702180;
pub const anon1511_AEGetDataSize: objc.OSType = 1685285242;
pub const anon1511_AEGetEventInfo: objc.OSType = 1735681385;
pub const anon1511_AEGetInfoSelection: objc.OSType = 1936289382;

pub const anon1741 = objc.OSType;
pub const anon1741_AEGetPrivilegeSelection: objc.OSType = 1936749174;
pub const anon1741_AEGetSuiteInfo: objc.OSType = 1735684969;
pub const anon1741_AEGreaterThan: objc.OSType = 1042292768;
pub const anon1741_AEGreaterThanEquals: objc.OSType = 1044193312;
pub const anon1741_AEGrow: objc.OSType = 1735552887;
pub const anon1741_AEHidden: objc.OSType = 1751737454;
pub const anon1741_AEHiQuality: objc.OSType = 1751740789;
pub const anon1741_AEImageGraphic: objc.OSType = 1768777586;
pub const anon1741_AEIsUniform: objc.OSType = 1769174382;
pub const anon1741_AEItalic: objc.OSType = 1769234796;
pub const anon1741_AELeftJustified: objc.OSType = 1818584692;
pub const anon1741_AELessThan: objc.OSType = 1008738336;
pub const anon1741_AELessThanEquals: objc.OSType = 1010638880;
pub const anon1741_AELowercase: objc.OSType = 1819244387;
pub const anon1741_AEMakeObjectsVisible: objc.OSType = 1836476787;
pub const anon1741_AEMiscStandards: objc.OSType = 1835627363;
pub const anon1741_AEModifiable: objc.OSType = 1836016742;
pub const anon1741_AEMove: objc.OSType = 1836021349;
pub const anon1741_AENo: objc.OSType = 1852776480;
pub const anon1741_AENoArrow: objc.OSType = 1634889327;
pub const anon1741_CSSM_USEE_LAST: objc.OSType = 255;
pub const anon1741_CSSM_USEE_NONE: objc.OSType = 0;
pub const anon1741_CSSM_USEE_DOMESTIC: objc.OSType = 1;
pub const anon1741_CSSM_USEE_FINANCIAL: objc.OSType = 2;
pub const anon1741_CSSM_USEE_KRLE: objc.OSType = 3;
pub const anon1741_CSSM_USEE_KRENT: objc.OSType = 4;
pub const anon1741_CSSM_USEE_SSL: objc.OSType = 5;
pub const anon1741_CSSM_USEE_AUTHENTICATION: objc.OSType = 6;
pub const anon1741_CSSM_USEE_KEYEXCH: objc.OSType = 7;
pub const anon1741_CSSM_USEE_MEDICAL: objc.OSType = 8;
pub const anon1741_CSSM_USEE_INSURANCE: objc.OSType = 9;
pub const anon1741_CSSM_USEE_WEAK: objc.OSType = 10;

pub const anon1971 = objc.OSType;
pub const anon1971_AENonmodifiable: objc.OSType = 1852665700;
pub const anon1971_AEOpen: objc.OSType = 1868853091;
pub const anon1971_AEOpenSelection: objc.OSType = 1936683109;
pub const anon1971_AEOutline: objc.OSType = 1869968492;
pub const anon1971_AEPageSetup: objc.OSType = 1885827957;
pub const anon1971_AEPaste: objc.OSType = 1885434740;
pub const anon1971_AEPlain: objc.OSType = 1886151022;
pub const anon1971_AEPrint: objc.OSType = 1885630307;
pub const anon1971_AEPrintSelection: objc.OSType = 1936749161;
pub const anon1971_AEPrintWindow: objc.OSType = 1886873966;
pub const anon1971_AEPutAwaySelection: objc.OSType = 1936749940;
pub const anon1971_AEQDAddOver: objc.OSType = 1633969263;
pub const anon1971_AEQDAddPin: objc.OSType = 1633969264;
pub const anon1971_AEQDAdMax: objc.OSType = 1633971576;
pub const anon1971_AEQDAdMin: objc.OSType = 1633971566;
pub const anon1971_AEQDBic: objc.OSType = 1651073824;
pub const anon1971_AEQDBlend: objc.OSType = 1651273316;
pub const anon1971_AEQDCopy: objc.OSType = 1668315424;
pub const anon1971_AEQDNotBic: objc.OSType = 1851943267;
pub const anon1971_AEQDNotCopy: objc.OSType = 1852010617;

pub const anon2201 = objc.OSType;
pub const anon2201_AEQDNotOr: objc.OSType = 1853124466;
pub const anon2201_AEQDNotXor: objc.OSType = 1853386610;
pub const anon2201_AEQDOr: objc.OSType = 1869750304;
pub const anon2201_AEQDSubOver: objc.OSType = 1937072751;
pub const anon2201_AEQDSubPin: objc.OSType = 1937072752;
pub const anon2201_AEQDSupplementalSuite: objc.OSType = 1902408560;
pub const anon2201_AEQDXor: objc.OSType = 2020569632;
pub const anon2201_AEQuickdrawSuite: objc.OSType = 1902408311;
pub const anon2201_AEQuitAll: objc.OSType = 1903520097;
pub const anon2201_AERedo: objc.OSType = 1919247471;
pub const anon2201_AERegular: objc.OSType = 1919248236;
pub const anon2201_AEReopenApplication: objc.OSType = 1918988400;
pub const anon2201_AEReplace: objc.OSType = 1919970403;
pub const anon2201_AERequiredSuite: objc.OSType = 1919250788;
pub const anon2201_AERestart: objc.OSType = 1919251316;
pub const anon2201_AERevealSelection: objc.OSType = 1936876918;
pub const anon2201_AERevert: objc.OSType = 1920365172;
pub const anon2201_AERightJustified: objc.OSType = 1919379572;
pub const anon2201_AESave: objc.OSType = 1935767141;
pub const anon2201_AESelect: objc.OSType = 1936483188;
pub const anon2201_AESetData: objc.OSType = 1936028772;

pub const anon2661 = objc.OSType;
pub const anon2661_AELogOut: objc.OSType = 1819240303;
pub const anon2661_AEReallyLogOut: objc.OSType = 1919706991;
pub const anon2661_AEShowRestartDialog: objc.OSType = 1920103284;
pub const anon2661_AEShowShutdownDialog: objc.OSType = 1920164974;
pub const anon2661_CSSM_CSP_BASE_CSP_ERROR: objc.OSType = -2147415808;
pub const anon2661_CSSMERR_CSP_INPUT_LENGTH_ERROR: objc.OSType = -2147415807;
pub const anon2661_CSSMERR_CSP_OUTPUT_LENGTH_ERROR: objc.OSType = -2147415806;
pub const anon2661_CSSMERR_CSP_PRIVILEGE_NOT_SUPPORTED: objc.OSType = -2147415805;
pub const anon2661_CSSMERR_CSP_DEVICE_ERROR: objc.OSType = -2147415804;
pub const anon2661_CSSMERR_CSP_DEVICE_MEMORY_ERROR: objc.OSType = -2147415803;
pub const anon2661_CSSMERR_CSP_ATTACH_HANDLE_BUSY: objc.OSType = -2147415802;
pub const anon2661_CSSMERR_CSP_NOT_LOGGED_IN: objc.OSType = -2147415801;
pub const anon2661_CSSMERR_CSP_INVALID_KEY: objc.OSType = -2147415792;
pub const anon2661_CSSMERR_CSP_INVALID_KEY_REFERENCE: objc.OSType = -2147415791;
pub const anon2661_CSSMERR_CSP_INVALID_KEY_CLASS: objc.OSType = -2147415790;
pub const anon2661_CSSMERR_CSP_ALGID_MISMATCH: objc.OSType = -2147415789;
pub const anon2661_CSSMERR_CSP_KEY_USAGE_INCORRECT: objc.OSType = -2147415788;
pub const anon2661_CSSMERR_CSP_KEY_BLOB_TYPE_INCORRECT: objc.OSType = -2147415787;
pub const anon2661_CSSMERR_CSP_KEY_HEADER_INCONSISTENT: objc.OSType = -2147415786;
pub const anon2661_CSSMERR_CSP_UNSUPPORTED_KEY_FORMAT: objc.OSType = -2147415785;
pub const anon2661_CSSMERR_CSP_UNSUPPORTED_KEY_SIZE: objc.OSType = -2147415784;
pub const anon2661_CSSMERR_CSP_INVALID_KEY_POINTER: objc.OSType = -2147415783;
pub const anon2661_CSSMERR_CSP_INVALID_KEYUSAGE_MASK: objc.OSType = -2147415782;
pub const anon2661_CSSMERR_CSP_UNSUPPORTED_KEYUSAGE_MASK: objc.OSType = -2147415781;
pub const anon2661_CSSMERR_CSP_INVALID_KEYATTR_MASK: objc.OSType = -2147415780;
pub const anon2661_CSSMERR_CSP_UNSUPPORTED_KEYATTR_MASK: objc.OSType = -2147415779;
pub const anon2661_CSSMERR_CSP_INVALID_KEY_LABEL: objc.OSType = -2147415778;
pub const anon2661_CSSMERR_CSP_UNSUPPORTED_KEY_LABEL: objc.OSType = -2147415777;
pub const anon2661_CSSMERR_CSP_INVALID_KEY_FORMAT: objc.OSType = -2147415776;
pub const anon2661_CSSMERR_CSP_INVALID_DATA_COUNT: objc.OSType = -2147415768;
pub const anon2661_CSSMERR_CSP_VECTOR_OF_BUFS_UNSUPPORTED: objc.OSType = -2147415767;
pub const anon2661_CSSMERR_CSP_INVALID_INPUT_VECTOR: objc.OSType = -2147415766;
pub const anon2661_CSSMERR_CSP_INVALID_OUTPUT_VECTOR: objc.OSType = -2147415765;
pub const anon2661_CSSMERR_CSP_INVALID_CONTEXT: objc.OSType = -2147415760;
pub const anon2661_CSSMERR_CSP_INVALID_ALGORITHM: objc.OSType = -2147415759;
pub const anon2661_CSSMERR_CSP_INVALID_ATTR_KEY: objc.OSType = -2147415754;
pub const anon2661_CSSMERR_CSP_MISSING_ATTR_KEY: objc.OSType = -2147415753;
pub const anon2661_CSSMERR_CSP_INVALID_ATTR_INIT_VECTOR: objc.OSType = -2147415752;
pub const anon2661_CSSMERR_CSP_MISSING_ATTR_INIT_VECTOR: objc.OSType = -2147415751;
pub const anon2661_CSSMERR_CSP_INVALID_ATTR_SALT: objc.OSType = -2147415750;
pub const anon2661_CSSMERR_CSP_MISSING_ATTR_SALT: objc.OSType = -2147415749;
pub const anon2661_CSSMERR_CSP_INVALID_ATTR_PADDING: objc.OSType = -2147415748;
pub const anon2661_CSSMERR_CSP_MISSING_ATTR_PADDING: objc.OSType = -2147415747;
pub const anon2661_CSSMERR_CSP_INVALID_ATTR_RANDOM: objc.OSType = -2147415746;
pub const anon2661_CSSMERR_CSP_MISSING_ATTR_RANDOM: objc.OSType = -2147415745;
pub const anon2661_CSSMERR_CSP_INVALID_ATTR_SEED: objc.OSType = -2147415744;
pub const anon2661_CSSMERR_CSP_MISSING_ATTR_SEED: objc.OSType = -2147415743;
pub const anon2661_CSSMERR_CSP_INVALID_ATTR_PASSPHRASE: objc.OSType = -2147415742;
pub const anon2661_CSSMERR_CSP_MISSING_ATTR_PASSPHRASE: objc.OSType = -2147415741;
pub const anon2661_CSSMERR_CSP_INVALID_ATTR_KEY_LENGTH: objc.OSType = -2147415740;
pub const anon2661_CSSMERR_CSP_MISSING_ATTR_KEY_LENGTH: objc.OSType = -2147415739;
pub const anon2661_CSSMERR_CSP_INVALID_ATTR_BLOCK_SIZE: objc.OSType = -2147415738;
pub const anon2661_CSSMERR_CSP_MISSING_ATTR_BLOCK_SIZE: objc.OSType = -2147415737;
pub const anon2661_CSSMERR_CSP_INVALID_ATTR_OUTPUT_SIZE: objc.OSType = -2147415708;
pub const anon2661_CSSMERR_CSP_MISSING_ATTR_OUTPUT_SIZE: objc.OSType = -2147415707;
pub const anon2661_CSSMERR_CSP_INVALID_ATTR_ROUNDS: objc.OSType = -2147415706;
pub const anon2661_CSSMERR_CSP_MISSING_ATTR_ROUNDS: objc.OSType = -2147415705;
pub const anon2661_CSSMERR_CSP_INVALID_ATTR_ALG_PARAMS: objc.OSType = -2147415704;
pub const anon2661_CSSMERR_CSP_MISSING_ATTR_ALG_PARAMS: objc.OSType = -2147415703;
pub const anon2661_CSSMERR_CSP_INVALID_ATTR_LABEL: objc.OSType = -2147415702;
pub const anon2661_CSSMERR_CSP_MISSING_ATTR_LABEL: objc.OSType = -2147415701;
pub const anon2661_CSSMERR_CSP_INVALID_ATTR_KEY_TYPE: objc.OSType = -2147415700;
pub const anon2661_CSSMERR_CSP_MISSING_ATTR_KEY_TYPE: objc.OSType = -2147415699;
pub const anon2661_CSSMERR_CSP_INVALID_ATTR_MODE: objc.OSType = -2147415698;
pub const anon2661_CSSMERR_CSP_MISSING_ATTR_MODE: objc.OSType = -2147415697;
pub const anon2661_CSSMERR_CSP_INVALID_ATTR_EFFECTIVE_BITS: objc.OSType = -2147415696;
pub const anon2661_CSSMERR_CSP_MISSING_ATTR_EFFECTIVE_BITS: objc.OSType = -2147415695;
pub const anon2661_CSSMERR_CSP_INVALID_ATTR_START_DATE: objc.OSType = -2147415694;
pub const anon2661_CSSMERR_CSP_MISSING_ATTR_START_DATE: objc.OSType = -2147415693;
pub const anon2661_CSSMERR_CSP_INVALID_ATTR_END_DATE: objc.OSType = -2147415692;
pub const anon2661_CSSMERR_CSP_MISSING_ATTR_END_DATE: objc.OSType = -2147415691;
pub const anon2661_CSSMERR_CSP_INVALID_ATTR_VERSION: objc.OSType = -2147415690;
pub const anon2661_CSSMERR_CSP_MISSING_ATTR_VERSION: objc.OSType = -2147415689;
pub const anon2661_CSSMERR_CSP_INVALID_ATTR_PRIME: objc.OSType = -2147415688;
pub const anon2661_CSSMERR_CSP_MISSING_ATTR_PRIME: objc.OSType = -2147415687;
pub const anon2661_CSSMERR_CSP_INVALID_ATTR_BASE: objc.OSType = -2147415686;
pub const anon2661_CSSMERR_CSP_MISSING_ATTR_BASE: objc.OSType = -2147415685;
pub const anon2661_CSSMERR_CSP_INVALID_ATTR_SUBPRIME: objc.OSType = -2147415684;
pub const anon2661_CSSMERR_CSP_MISSING_ATTR_SUBPRIME: objc.OSType = -2147415683;
pub const anon2661_CSSMERR_CSP_INVALID_ATTR_ITERATION_COUNT: objc.OSType = -2147415682;
pub const anon2661_CSSMERR_CSP_MISSING_ATTR_ITERATION_COUNT: objc.OSType = -2147415681;
pub const anon2661_CSSMERR_CSP_INVALID_ATTR_DL_DB_HANDLE: objc.OSType = -2147415680;
pub const anon2661_CSSMERR_CSP_MISSING_ATTR_DL_DB_HANDLE: objc.OSType = -2147415679;
pub const anon2661_CSSMERR_CSP_INVALID_ATTR_ACCESS_CREDENTIALS: objc.OSType = -2147415678;
pub const anon2661_CSSMERR_CSP_MISSING_ATTR_ACCESS_CREDENTIALS: objc.OSType = -2147415677;
pub const anon2661_CSSMERR_CSP_INVALID_ATTR_PUBLIC_KEY_FORMAT: objc.OSType = -2147415676;
pub const anon2661_CSSMERR_CSP_MISSING_ATTR_PUBLIC_KEY_FORMAT: objc.OSType = -2147415675;
pub const anon2661_CSSMERR_CSP_INVALID_ATTR_PRIVATE_KEY_FORMAT: objc.OSType = -2147415674;
pub const anon2661_CSSMERR_CSP_MISSING_ATTR_PRIVATE_KEY_FORMAT: objc.OSType = -2147415673;
pub const anon2661_CSSMERR_CSP_INVALID_ATTR_SYMMETRIC_KEY_FORMAT: objc.OSType = -2147415672;
pub const anon2661_CSSMERR_CSP_MISSING_ATTR_SYMMETRIC_KEY_FORMAT: objc.OSType = -2147415671;
pub const anon2661_CSSMERR_CSP_INVALID_ATTR_WRAPPED_KEY_FORMAT: objc.OSType = -2147415670;
pub const anon2661_CSSMERR_CSP_MISSING_ATTR_WRAPPED_KEY_FORMAT: objc.OSType = -2147415669;
pub const anon2661_CSSMERR_CSP_STAGED_OPERATION_IN_PROGRESS: objc.OSType = -2147415736;
pub const anon2661_CSSMERR_CSP_STAGED_OPERATION_NOT_STARTED: objc.OSType = -2147415735;
pub const anon2661_CSSMERR_CSP_VERIFY_FAILED: objc.OSType = -2147415734;
pub const anon2661_CSSMERR_CSP_INVALID_SIGNATURE: objc.OSType = -2147415733;
pub const anon2661_CSSMERR_CSP_QUERY_SIZE_UNKNOWN: objc.OSType = -2147415732;
pub const anon2661_CSSMERR_CSP_BLOCK_SIZE_MISMATCH: objc.OSType = -2147415731;
pub const anon2661_CSSMERR_CSP_PRIVATE_KEY_NOT_FOUND: objc.OSType = -2147415730;
pub const anon2661_CSSMERR_CSP_PUBLIC_KEY_INCONSISTENT: objc.OSType = -2147415729;
pub const anon2661_CSSMERR_CSP_DEVICE_VERIFY_FAILED: objc.OSType = -2147415728;
pub const anon2661_CSSMERR_CSP_INVALID_LOGIN_NAME: objc.OSType = -2147415727;
pub const anon2661_CSSMERR_CSP_ALREADY_LOGGED_IN: objc.OSType = -2147415726;
pub const anon2661_CSSMERR_CSP_PRIVATE_KEY_ALREADY_EXISTS: objc.OSType = -2147415725;
pub const anon2661_CSSMERR_CSP_KEY_LABEL_ALREADY_EXISTS: objc.OSType = -2147415724;
pub const anon2661_CSSMERR_CSP_INVALID_DIGEST_ALGORITHM: objc.OSType = -2147415723;
pub const anon2661_CSSMERR_CSP_CRYPTO_DATA_CALLBACK_FAILED: objc.OSType = -2147415722;

pub const anon3051 = AEKeyword;
pub const anon3051_eyAEBaseAddr: AEKeyword = 1650549860;
pub const anon3051_eyAEBestType: AEKeyword = 1885500276;
pub const anon3051_eyAEBgndColor: AEKeyword = 1801610092;
pub const anon3051_eyAEBgndPattern: AEKeyword = 1801613428;
pub const anon3051_eyAEBounds: AEKeyword = 1885498980;
pub const anon3051_eyAECellList: AEKeyword = 1801677940;
pub const anon3051_eyAEClassID: AEKeyword = 1668041028;
pub const anon3051_eyAEColor: AEKeyword = 1668246642;
pub const anon3051_eyAEColorTable: AEKeyword = 1668052066;
pub const anon3051_eyAECurveHeight: AEKeyword = 1801676900;
pub const anon3051_eyAECurveWidth: AEKeyword = 1801680740;
pub const anon3051_eyAEDashStyle: AEKeyword = 1885631348;
pub const anon3051_eyAEData: AEKeyword = 1684108385;
pub const anon3051_eyAEDefaultType: AEKeyword = 1684366964;
pub const anon3051_eyAEDefinitionRect: AEKeyword = 1885631092;
pub const anon3051_eyAEDescType: AEKeyword = 1685288048;
pub const anon3051_eyAEDestination: AEKeyword = 1684370292;
pub const anon3051_eyAEDoAntiAlias: AEKeyword = 1634628705;
pub const anon3051_eyAEDoDithered: AEKeyword = 1734633844;
pub const anon3051_eyAEDoRotate: AEKeyword = 1801745012;

pub const anon3281 = AEKeyword;
pub const anon3281_eyAEDoScale: AEKeyword = 1802724193;
pub const anon3281_eyAEDoTranslate: AEKeyword = 1802793569;
pub const anon3281_eyAEEditionFileLoc: AEKeyword = 1701605219;
pub const anon3281_eyAEElements: AEKeyword = 1701604723;
pub const anon3281_eyAEEndPoint: AEKeyword = 1885695588;
pub const anon3281_eyAEEventClass: AEKeyword = 1702257516;
pub const anon3281_eyAEEventID: AEKeyword = 1702261865;
pub const anon3281_eyAEFile: AEKeyword = 1801873772;
pub const anon3281_eyAEFileType: AEKeyword = 1718383728;
pub const anon3281_eyAEFillColor: AEKeyword = 1718379372;
pub const anon3281_eyAEFillPattern: AEKeyword = 1718382708;
pub const anon3281_eyAEFlipHorizontal: AEKeyword = 1801873519;
pub const anon3281_eyAEFlipVertical: AEKeyword = 1801877108;
pub const anon3281_eyAEFont: AEKeyword = 1718578804;
pub const anon3281_eyAEFormula: AEKeyword = 1885761394;
pub const anon3281_eyAEGraphicObjects: AEKeyword = 1735352947;
pub const anon3281_eyAEID: AEKeyword = 1229201440;
pub const anon3281_eyAEImageQuality: AEKeyword = 1735488865;
pub const anon3281_eyAEInsertHere: AEKeyword = 1768846184;
pub const anon3281_eyAEKeyForms: AEKeyword = 1801812326;

pub const anon3741 = AEKeyword;
pub const anon3741_eyAEPropData: AEKeyword = 1886545012;
pub const anon3741_eyAEProperties: AEKeyword = 1903194735;
pub const anon3741_eyAEProperty: AEKeyword = 1802531440;
pub const anon3741_eyAEPropFlags: AEKeyword = 1886545511;
pub const anon3741_eyAEPropID: AEKeyword = 1886547824;
pub const anon3741_eyAEProtection: AEKeyword = 1886417519;
pub const anon3741_eyAERenderAs: AEKeyword = 1802659182;
pub const anon3741_eyAERequestedType: AEKeyword = 1920235888;
pub const anon3741_eyAEResult: AEKeyword = 757935405;
pub const anon3741_eyAEResultInfo: AEKeyword = 1920166254;
pub const anon3741_eyAERotation: AEKeyword = 1886547828;
pub const anon3741_eyAERotPoint: AEKeyword = 1802663024;
pub const anon3741_eyAERowList: AEKeyword = 1802660979;
pub const anon3741_eyAESaveOptions: AEKeyword = 1935767151;
pub const anon3741_eyAEScale: AEKeyword = 1886610284;
pub const anon3741_eyAEScriptTag: AEKeyword = 1886610292;
pub const anon3741_eyAESearchText: AEKeyword = 1937012852;
pub const anon3741_eyAEShowWhere: AEKeyword = 1936224119;
pub const anon3741_eyAEStartAngle: AEKeyword = 1885433447;
pub const anon3741_eyAEStartPoint: AEKeyword = 1886614640;
pub const anon3741_eyAEStyles: AEKeyword = 1802728569;

pub const anon3981 = AEKeyword;
pub const anon3981_eyAESuiteID: AEKeyword = 1937074548;
pub const anon3981_eyAEText: AEKeyword = 1802795124;
pub const anon3981_eyAETextColor: AEKeyword = 1886681187;
pub const anon3981_eyAETextFont: AEKeyword = 1886681190;
pub const anon3981_eyAETextPointSize: AEKeyword = 1886679155;
pub const anon3981_eyAETextStyles: AEKeyword = 1954050932;
pub const anon3981_eyAETextLineHeight: AEKeyword = 1802792040;
pub const anon3981_eyAETextLineAscent: AEKeyword = 1802789235;
pub const anon3981_eyAETheText: AEKeyword = 1953002616;
pub const anon3981_eyAETransferMode: AEKeyword = 1886418029;
pub const anon3981_eyAETranslation: AEKeyword = 1886679667;
pub const anon3981_eyAETryAsStructGraf: AEKeyword = 1953460071;
pub const anon3981_eyAEUniformStyles: AEKeyword = 1970500716;
pub const anon3981_eyAEUpdateOn: AEKeyword = 1886744676;
pub const anon3981_eyAEUserTerm: AEKeyword = 1970565741;
pub const anon3981_eyAEWindow: AEKeyword = 2003723383;
pub const anon3981_eyAEWritingCode: AEKeyword = 2003985252;

pub const anon4181 = AEKeyword;
pub const anon4181_eyMiscellaneous: AEKeyword = 1718448995;
pub const anon4181_eySelection: AEKeyword = 1718838636;
pub const anon4181_eyWindow: AEKeyword = 1802989156;
pub const anon4181_eyWhen: AEKeyword = 2003330414;
pub const anon4181_eyWhere: AEKeyword = 2003330418;
pub const anon4181_eyModifiers: AEKeyword = 1836016755;
pub const anon4181_eyKey: AEKeyword = 1801812256;
pub const anon4181_eyKeyCode: AEKeyword = 1668244581;
pub const anon4181_eyKeyboard: AEKeyword = 1801812322;
pub const anon4181_eyDriveNumber: AEKeyword = 1685222947;
pub const anon4181_eyErrorCode: AEKeyword = 1701999139;
pub const anon4181_eyHighLevelClass: AEKeyword = 1751346291;
pub const anon4181_eyHighLevelID: AEKeyword = 1751737376;

pub const anon4351 = objc.OSType;
pub const anon4351_pArcAngle: objc.OSType = 1885434467;
pub const anon4351_pBackgroundColor: objc.OSType = 1885496172;
pub const anon4351_pBackgroundPattern: objc.OSType = 1885499508;
pub const anon4351_pBestType: objc.OSType = 1885500276;
pub const anon4351_pBounds: objc.OSType = 1885498980;
pub const anon4351_pClass: objc.OSType = 1885564019;
pub const anon4351_pClipboard: objc.OSType = 1885564009;
pub const anon4351_pColor: objc.OSType = 1668246642;
pub const anon4351_pColorTable: objc.OSType = 1668052066;
pub const anon4351_pContents: objc.OSType = 1885564532;
pub const anon4351_pCornerCurveHeight: objc.OSType = 1885562980;
pub const anon4351_pCornerCurveWidth: objc.OSType = 1885566820;
pub const anon4351_pDashStyle: objc.OSType = 1885631348;
pub const anon4351_pDefaultType: objc.OSType = 1684366964;
pub const anon4351_pDefinitionRect: objc.OSType = 1885631092;
pub const anon4351_pEnabled: objc.OSType = 1701732972;
pub const anon4351_pEndPoint: objc.OSType = 1885695588;
pub const anon4351_pFillColor: objc.OSType = 1718379372;
pub const anon4351_pFillPattern: objc.OSType = 1718382708;
pub const anon4351_pFont: objc.OSType = 1718578804;

pub const anon4581 = objc.OSType;
pub const anon4581_pFormula: objc.OSType = 1885761394;
pub const anon4581_pGraphicObjects: objc.OSType = 1735352947;
pub const anon4581_pHasCloseBox: objc.OSType = 1751346274;
pub const anon4581_pHasTitleBar: objc.OSType = 1886677364;
pub const anon4581_pID: objc.OSType = 1229201440;
pub const anon4581_pIndex: objc.OSType = 1885955192;
pub const anon4581_pInsertionLoc: objc.OSType = 1885957747;
pub const anon4581_pIsFloating: objc.OSType = 1769170540;
pub const anon4581_pIsFrontProcess: objc.OSType = 1885959014;
pub const anon4581_pIsModal: objc.OSType = 1886220132;
pub const anon4581_pIsModified: objc.OSType = 1768779620;
pub const anon4581_pIsResizable: objc.OSType = 1886548858;
pub const anon4581_pIsStationeryPad: objc.OSType = 1886613604;
pub const anon4581_pIsZoomable: objc.OSType = 1769175661;
pub const anon4581_pIsZoomed: objc.OSType = 1887073645;
pub const anon4581_pItemNumber: objc.OSType = 1769237870;
pub const anon4581_pJustification: objc.OSType = 1886024564;
pub const anon4581_pLineArrow: objc.OSType = 1634890351;
pub const anon4581_pMenuID: objc.OSType = 1835952484;
pub const anon4581_pName: objc.OSType = 1886282093;

pub const anon5321 = DescType;
pub const anon5321_typeFinderWindow: DescType = 1719101806;
pub const anon5321_typeFixedPoint: DescType = 1718644340;
pub const anon5321_typeFixedRectangle: DescType = 1718772596;
pub const anon5321_typeGraphicLine: DescType = 1735158126;
pub const anon5321_typeGraphicText: DescType = 1667724408;
pub const anon5321_typeGroupedGraphic: DescType = 1668311395;
pub const anon5321_typeInsertionLoc: DescType = 1768846188;
pub const anon5321_typeIntlText: DescType = 1769240692;
pub const anon5321_typeIntlWritingCode: DescType = 1768846444;
pub const anon5321_typeLongDateTime: DescType = 1818522656;
pub const anon5321_typeCFAbsoluteTime: DescType = 1667654004;
pub const anon5321_typeISO8601DateTime: DescType = 1769172852;
pub const anon5321_typeLongFixed: DescType = 1818654820;
pub const anon5321_typeLongFixedPoint: DescType = 1818652788;
pub const anon5321_typeLongFixedRectangle: DescType = 1818653283;
pub const anon5321_typeLongPoint: DescType = 1819307636;
pub const anon5321_typeLongRectangle: DescType = 1819435892;
pub const anon5321_typeMachineLoc: DescType = 1833725795;
pub const anon5321_typeOval: DescType = 1668249196;
pub const anon5321_typeParamInfo: DescType = 1886218606;
pub const anon5321_typePict: DescType = 1346978644;

pub const anon5561 = DescType;
pub const anon5561_typePixelMap: DescType = 1668311416;
pub const anon5561_typePixMapMinus: DescType = 1953525101;
pub const anon5561_typePolygon: DescType = 1668310894;
pub const anon5561_typePropInfo: DescType = 1885957734;
pub const anon5561_typePtr: DescType = 1886679584;
pub const anon5561_typeQDPoint: DescType = 1363439732;
pub const anon5561_typeQDRegion: DescType = 1366452078;
pub const anon5561_typeRectangle: DescType = 1668441443;
pub const anon5561_typeRGB16: DescType = 1953640758;
pub const anon5561_typeRGB96: DescType = 1953642806;
pub const anon5561_typeRGBColor: DescType = 1666336578;
pub const anon5561_typeRotation: DescType = 1953656692;
pub const anon5561_typeRoundedRectangle: DescType = 1668444771;
pub const anon5561_typeRow: DescType = 1668444023;
pub const anon5561_typeScrapStyles: DescType = 1937013100;
pub const anon5561_typeScript: DescType = 1935896692;
pub const anon5561_typeStyledText: DescType = 1398036564;
pub const anon5561_typeSuiteInfo: DescType = 1937074542;
pub const anon5561_typeTable: DescType = 1668571756;
pub const anon5561_typeTextStyles: DescType = 1953723513;

pub const anon5791 = DescType;
pub const anon5791_typeTIFF: DescType = 1414088262;
pub const anon5791_typeJPEG: DescType = 1246774599;
pub const anon5791_typeGIF: DescType = 1195984486;
pub const anon5791_typeVersion: DescType = 1986359923;

pub const anon5861 = objc.OSType;
pub const anon5861_AEMenuClass: objc.OSType = 1835363957;
pub const anon5861_AEMenuSelect: objc.OSType = 1835559284;
pub const anon5861_AEMouseDown: objc.OSType = 1835300718;
pub const anon5861_AEMouseDownInBack: objc.OSType = 1835295339;
pub const anon5861_AEKeyDown: objc.OSType = 1801746286;
pub const anon5861_AEResized: objc.OSType = 1920166266;
pub const anon5861_AEPromise: objc.OSType = 1886547821;

pub const anon6051 = DescType;
pub const anon6051_typeHIMenu: DescType = 1836016234;
pub const anon6051_typeHIWindow: DescType = 2003788394;

pub const anon6161 = u32;
pub const anon6161_BySmallIcon: u32 = 0;
pub const anon6161_ByIconView: u32 = 1;
pub const anon6161_ByNameView: u32 = 2;
pub const anon6161_ByDateView: u32 = 3;
pub const anon6161_BySizeView: u32 = 4;
pub const anon6161_ByKindView: u32 = 5;
pub const anon6161_ByCommentView: u32 = 6;
pub const anon6161_ByLabelView: u32 = 7;
pub const anon6161_ByVersionView: u32 = 8;

pub const anon6281 = u32;
pub const anon6281_AEInfo: u32 = 11;
pub const anon6281_AEMain: u32 = 0;
pub const anon6281_AESharing: u32 = 13;

pub const anon6771 = u32;
pub const anon6771_TSMOutsideOfBody: u32 = 1;
pub const anon6771_TSMInsideOfBody: u32 = 2;
pub const anon6771_TSMInsideOfActiveInputArea: u32 = 3;

pub const anon6831 = u32;
pub const anon6831_NextBody: u32 = 1;
pub const anon6831_PreviousBody: u32 = 2;
pub const anon6831_CSSM_ACL_EDIT_MODE_ADD: u32 = 1;
pub const anon6831_CSSM_ACL_EDIT_MODE_DELETE: u32 = 2;
pub const anon6831_CSSM_ACL_EDIT_MODE_REPLACE: u32 = 3;

pub const TextRange = extern struct {
    fStart: objc.SInt32,
    fEnd: objc.SInt32,
    fHiliteStyle: objc.SInt16,
};

pub const TextRangePtr = TextRange;

pub const TextRangeHandle = TextRangePtr;

pub const TextRangeArray = extern struct {
    fNumOfRanges: objc.SInt16,
    fRange: [1]TextRange,
};

pub const TextRangeArrayPtr = TextRangeArray;

pub const TextRangeArrayHandle = TextRangeArrayPtr;

pub const OffsetArray = extern struct {
    fNumOfOffsets: objc.SInt16,
    fOffset: [1]objc.SInt32,
};

pub const OffsetArrayPtr = OffsetArray;

pub const OffsetArrayHandle = OffsetArrayPtr;

pub const WritingCode = extern struct {
    theScriptCode: objc.ScriptCode,
    theLangCode: objc.LangCode,
};

pub const IntlText = extern struct {
    theScriptCode: objc.ScriptCode,
    theLangCode: objc.LangCode,
    theText: [1]i8,
};

pub const anon7231 = u32;
pub const anon7231_TSMHiliteCaretPosition: u32 = 1;
pub const anon7231_TSMHiliteRawText: u32 = 2;
pub const anon7231_TSMHiliteSelectedRawText: u32 = 3;
pub const anon7231_TSMHiliteConvertedText: u32 = 4;
pub const anon7231_TSMHiliteSelectedConvertedText: u32 = 5;
pub const anon7231_TSMHiliteBlockFillText: u32 = 6;
pub const anon7231_TSMHiliteOutlineText: u32 = 7;
pub const anon7231_TSMHiliteSelectedText: u32 = 8;
pub const anon7231_TSMHiliteNoHilite: u32 = 9;

pub const anon7501 = AEKeyword;
pub const anon7501_eyAEHiliteRange: AEKeyword = 1752329831;
pub const anon7501_eyAEPinRange: AEKeyword = 1886286439;
pub const anon7501_eyAEClauseOffsets: AEKeyword = 1668047221;
pub const anon7501_eyAEOffset: AEKeyword = 1868985204;
pub const anon7501_eyAEPoint: AEKeyword = 1735421811;
pub const anon7501_eyAELeftSide: AEKeyword = 1802265958;
pub const anon7501_eyAERegionClass: AEKeyword = 1919381091;
pub const anon7501_eyAEDragging: AEKeyword = 1651470188;

pub const anon8271 = objc.OSType;
pub const anon8271_AEISGetURL: objc.OSType = 1735750252;
pub const anon8271_KAEISHandleCGI: objc.OSType = 1935961955;

pub const anon8331 = objc.OSType;
pub const anon8331_cURL: objc.OSType = 1970433056;
pub const anon8331_cInternetAddress: objc.OSType = 1229996356;
pub const anon8331_cHTML: objc.OSType = 1752460652;
pub const anon8331_cFTPItem: objc.OSType = 1718906912;

pub const anon8411 = objc.OSType;
pub const anon8411_AEISHTTPSearchArgs: objc.OSType = 1801875314;
pub const anon8411_AEISPostArgs: objc.OSType = 1886352244;
pub const anon8411_AEISMethod: objc.OSType = 1835365480;
pub const anon8411_AEISClientAddress: objc.OSType = 1633969266;
pub const anon8411_AEISUserName: objc.OSType = 1970496882;
pub const anon8411_AEISPassword: objc.OSType = 1885434739;
pub const anon8411_AEISFromUser: objc.OSType = 1718775157;
pub const anon8411_AEISServerName: objc.OSType = 1937141357;
pub const anon8411_AEISServerPort: objc.OSType = 1937141876;
pub const anon8411_AEISScriptName: objc.OSType = 1935896173;
pub const anon8411_AEISContentType: objc.OSType = 1668577648;
pub const anon8411_AEISReferrer: objc.OSType = 1919247986;
pub const anon8411_AEISUserAgent: objc.OSType = 1097297524;
pub const anon8411_AEISAction: objc.OSType = 1264673652;
pub const anon8411_AEISActionPath: objc.OSType = 1264676980;
pub const anon8411_AEISClientIP: objc.OSType = 1264806256;
pub const anon8411_AEISFullRequest: objc.OSType = 1265005169;

pub const anon8621 = objc.OSType;
pub const anon8621_pScheme: objc.OSType = 1886745443;
pub const anon8621_pHost: objc.OSType = 1213158228;
pub const anon8621_pPath: objc.OSType = 1179930723;
pub const anon8621_pUserName: objc.OSType = 1380021614;
pub const anon8621_pUserPassword: objc.OSType = 1380020343;
pub const anon8621_pDNSForm: objc.OSType = 1883524691;
pub const anon8621_pURL: objc.OSType = 1884639820;
pub const anon8621_pTextEncoding: objc.OSType = 1886681189;
pub const anon8621_pFTPKind: objc.OSType = 1802071652;

pub const anon8751 = objc.OSType;
pub const anon8751_eScheme: objc.OSType = 1702060904;
pub const anon8751_eurlHTTP: objc.OSType = 1752462448;
pub const anon8751_eurlHTTPS: objc.OSType = 1752461427;
pub const anon8751_eurlFTP: objc.OSType = 1718906912;
pub const anon8751_eurlMail: objc.OSType = 1835100524;
pub const anon8751_eurlFile: objc.OSType = 1718185061;
pub const anon8751_eurlGopher: objc.OSType = 1735420018;
pub const anon8751_eurlTelnet: objc.OSType = 1953263220;
pub const anon8751_eurlNews: objc.OSType = 1852143475;
pub const anon8751_eurlSNews: objc.OSType = 1936619379;
pub const anon8751_eurlNNTP: objc.OSType = 1852732528;
pub const anon8751_eurlMessage: objc.OSType = 1835365235;
pub const anon8751_eurlMailbox: objc.OSType = 1835167608;
pub const anon8751_eurlMulti: objc.OSType = 1836412020;
pub const anon8751_eurlLaunch: objc.OSType = 1818326382;
pub const anon8751_eurlAFP: objc.OSType = 1634103328;
pub const anon8751_eurlAT: objc.OSType = 1635000352;
pub const anon8751_eurlEPPC: objc.OSType = 1701867619;
pub const anon8751_eurlRTSP: objc.OSType = 1920234352;
pub const anon8751_eurlIMAP: objc.OSType = 1768776048;
pub const anon8751_eurlNFS: objc.OSType = 1970169459;
pub const anon8751_eurlPOP: objc.OSType = 1970302832;
pub const anon8751_eurlLDAP: objc.OSType = 1970037872;
pub const anon8751_eurlUnknown: objc.OSType = 1970433087;

pub const anon9031 = objc.OSType;
pub const anon9031_ConnSuite: objc.OSType = 1835098979;
pub const anon9031_cDevSpec: objc.OSType = 1667523958;
pub const anon9031_cAddressSpec: objc.OSType = 1667327090;
pub const anon9031_cADBAddress: objc.OSType = 1667327074;
pub const anon9031_cAppleTalkAddress: objc.OSType = 1667331104;
pub const anon9031_cBusAddress: objc.OSType = 1667396979;
pub const anon9031_cEthernetAddress: objc.OSType = 1667591712;
pub const anon9031_cFireWireAddress: objc.OSType = 1667659552;
pub const anon9031_cIPAddress: objc.OSType = 1667854368;
pub const anon9031_cLocalTalkAddress: objc.OSType = 1668052000;
pub const anon9031_cSCSIAddress: objc.OSType = 1668506483;
pub const anon9031_cTokenRingAddress: objc.OSType = 1668575083;
pub const anon9031_cUSBAddress: objc.OSType = 1668641634;
pub const anon9031_pDeviceType: objc.OSType = 1885632116;
pub const anon9031_pDeviceAddress: objc.OSType = 1885632097;
pub const anon9031_pConduit: objc.OSType = 1885564782;
pub const anon9031_pProtocol: objc.OSType = 1886417524;
pub const anon9031_pATMachine: objc.OSType = 1885434989;
pub const anon9031_pATZone: objc.OSType = 1885435002;
pub const anon9031_pATType: objc.OSType = 1885434996;
pub const anon9031_pDottedDecimal: objc.OSType = 1885958244;
pub const anon9031_pDNS: objc.OSType = 1885630067;
pub const anon9031_pPort: objc.OSType = 1886416754;
pub const anon9031_pNetwork: objc.OSType = 1886283124;
pub const anon9031_pNode: objc.OSType = 1886285668;
pub const anon9031_pSocket: objc.OSType = 1886613347;
pub const anon9031_pSCSIBus: objc.OSType = 1886610274;
pub const anon9031_pSCSILUN: objc.OSType = 1886612597;
pub const anon9031_eDeviceType: objc.OSType = 1701082740;
pub const anon9031_eAddressSpec: objc.OSType = 1700881523;
pub const anon9031_eConduit: objc.OSType = 1701015406;
pub const anon9031_eProtocol: objc.OSType = 1701868143;
pub const anon9031_eADB: objc.OSType = 1700881506;
pub const anon9031_eAnalogAudio: objc.OSType = 1701863797;
pub const anon9031_eAppleTalk: objc.OSType = 1701863796;
pub const anon9031_eAudioLineIn: objc.OSType = 1701011817;
pub const anon9031_eAudioLineOut: objc.OSType = 1701011820;
pub const anon9031_eAudioOut: objc.OSType = 1701011823;
pub const anon9031_eBus: objc.OSType = 1700951411;
pub const anon9031_eCDROM: objc.OSType = 1701012512;
pub const anon9031_eCommSlot: objc.OSType = 1701012333;
pub const anon9031_eDigitalAudio: objc.OSType = 1701864545;
pub const anon9031_eDisplay: objc.OSType = 1701078131;
pub const anon9031_eDVD: objc.OSType = 1701082724;
pub const anon9031_eEthernet: objc.OSType = 1701012846;
pub const anon9031_eFireWire: objc.OSType = 1701013111;
pub const anon9031_eFloppy: objc.OSType = 1701209120;
pub const anon9031_eHD: objc.OSType = 1701340192;
pub const anon9031_eInfrared: objc.OSType = 1701013874;
pub const anon9031_eIP: objc.OSType = 1701865840;
pub const anon9031_eIrDA: objc.OSType = 1701865842;
pub const anon9031_eIRTalk: objc.OSType = 1701865844;
pub const anon9031_eKeyboard: objc.OSType = 1701536356;
pub const anon9031_eLCD: objc.OSType = 1701080163;
pub const anon9031_eLocalTalk: objc.OSType = 1701014644;
pub const anon9031_eMacIP: objc.OSType = 1701866857;
pub const anon9031_eMacVideo: objc.OSType = 1701866870;
pub const anon9031_eMicrophone: objc.OSType = 1701014889;
pub const anon9031_eModemPort: objc.OSType = 1701014896;
pub const anon9031_eModemPrinterPort: objc.OSType = 1701671024;
pub const anon9031_eModem: objc.OSType = 1701080429;
pub const anon9031_eMonitorOut: objc.OSType = 1701014894;
pub const anon9031_eMouse: objc.OSType = 1701670773;
pub const anon9031_eNuBusCard: objc.OSType = 1701080674;
pub const anon9031_eNuBus: objc.OSType = 1701737826;
pub const anon9031_ePCcard: objc.OSType = 1701015651;
pub const anon9031_ePCIbus: objc.OSType = 1701015657;
pub const anon9031_ePCIcard: objc.OSType = 1701081193;
pub const anon9031_ePDSslot: objc.OSType = 1701015652;
pub const anon9031_ePDScard: objc.OSType = 1701864563;
pub const anon9031_ePointingDevice: objc.OSType = 1701081188;
pub const anon9031_ePostScript: objc.OSType = 1701867635;
pub const anon9031_ePPP: objc.OSType = 1701867632;
pub const anon9031_ePrinterPort: objc.OSType = 1701015664;
pub const anon9031_ePrinter: objc.OSType = 1701081202;
pub const anon9031_eSvideo: objc.OSType = 1701868406;
pub const anon9031_eSCSI: objc.OSType = 1701016419;
pub const anon9031_eSerial: objc.OSType = 1701868402;
pub const anon9031_eSpeakers: objc.OSType = 1701081968;
pub const anon9031_eStorageDevice: objc.OSType = 1701081972;
pub const anon9031_eSVGA: objc.OSType = 1701868391;
pub const anon9031_eTokenRing: objc.OSType = 1702129515;
pub const anon9031_eTrackball: objc.OSType = 1702130283;
pub const anon9031_eTrackpad: objc.OSType = 1701082224;
pub const anon9031_eUSB: objc.OSType = 1701016947;
pub const anon9031_eVideoIn: objc.OSType = 1701017193;
pub const anon9031_eVideoMonitor: objc.OSType = 1701082733;
pub const anon9031_eVideoOut: objc.OSType = 1701017199;

pub const anon9971 = objc.OSType;
pub const anon9971_cKeystroke: objc.OSType = 1802531443;
pub const anon9971_pKeystrokeKey: objc.OSType = 1800237927;
pub const anon9971_pModifiers: objc.OSType = 1800236900;
pub const anon9971_pKeyKind: objc.OSType = 1802202724;
pub const anon9971_eModifiers: objc.OSType = 1699570803;
pub const anon9971_eOptionDown: objc.OSType = 1265594484;
pub const anon9971_eCommandDown: objc.OSType = 1264807268;
pub const anon9971_eControlDown: objc.OSType = 1264809068;
pub const anon9971_eShiftDown: objc.OSType = 1265854068;
pub const anon9971_eCapsLockDown: objc.OSType = 1264807019;
pub const anon9971_eKeyKind: objc.OSType = 1701540724;
pub const anon9971_eEscapeKey: objc.OSType = 1802712320;
pub const anon9971_eDeleteKey: objc.OSType = 1802711808;
pub const anon9971_eTabKey: objc.OSType = 1802711040;
pub const anon9971_eReturnKey: objc.OSType = 1802707968;
pub const anon9971_eClearKey: objc.OSType = 1802716928;
pub const anon9971_eEnterKey: objc.OSType = 1802718208;
pub const anon9971_eUpArrowKey: objc.OSType = 1802731008;
pub const anon9971_eDownArrowKey: objc.OSType = 1802730752;
pub const anon9971_eLeftArrowKey: objc.OSType = 1802730240;
pub const anon9971_eRightArrowKey: objc.OSType = 1802730496;
pub const anon9971_eHelpKey: objc.OSType = 1802727936;
pub const anon9971_eHomeKey: objc.OSType = 1802728192;
pub const anon9971_ePageUpKey: objc.OSType = 1802728448;
pub const anon9971_ePageDownKey: objc.OSType = 1802729728;
pub const anon9971_eForwardDelKey: objc.OSType = 1802728704;
pub const anon9971_eEndKey: objc.OSType = 1802729216;
pub const anon9971_eF1Key: objc.OSType = 1802729984;
pub const anon9971_eF2Key: objc.OSType = 1802729472;
pub const anon9971_eF3Key: objc.OSType = 1802724096;
pub const anon9971_eF4Key: objc.OSType = 1802728960;
pub const anon9971_eF5Key: objc.OSType = 1802723328;
pub const anon9971_eF6Key: objc.OSType = 1802723584;
pub const anon9971_eF7Key: objc.OSType = 1802723840;
pub const anon9971_eF8Key: objc.OSType = 1802724352;
pub const anon9971_eF9Key: objc.OSType = 1802724608;
pub const anon9971_eF10Key: objc.OSType = 1802726656;
pub const anon9971_eF11Key: objc.OSType = 1802725120;
pub const anon9971_eF12Key: objc.OSType = 1802727168;
pub const anon9971_eF13Key: objc.OSType = 1802725632;
pub const anon9971_eF14Key: objc.OSType = 1802726144;
pub const anon9971_eF15Key: objc.OSType = 1802727680;

pub const anon10441 = AEKeyword;
pub const anon10441_eyAELaunchedAsLogInItem: AEKeyword = 1818716532;
pub const anon10441_eyAELaunchedAsServiceItem: AEKeyword = 1937140084;

pub const anon321 = objc.OSType;
pub const anon321_AEUserTerminology: objc.OSType = 1634039156;
pub const anon321_AETerminologyExtension: objc.OSType = 1634038885;
pub const anon321_AEScriptingSizeResource: objc.OSType = 1935897466;
pub const anon321_AEOSAXSizeResource: objc.OSType = 1869834618;

pub const TScriptingSizeResource = extern struct {
    scriptingSizeFlags: objc.SInt16,
    minStackSize: objc.UInt32,
    preferredStackSize: objc.UInt32,
    maxStackSize: objc.UInt32,
    minHeapSize: objc.UInt32,
    preferredHeapSize: objc.UInt32,
    maxHeapSize: objc.UInt32,
};

pub const AEBuildErrorCode = objc.UInt32;

pub const AEBuildError = extern struct {
    fError: AEBuildErrorCode,
    fErrorPos: objc.UInt32,
};

pub extern "CoreServices" fn AEBuildDesc(dst: ?*AEDesc, @"error": ?*AEBuildError, src: ?*i8) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn vAEBuildDesc(
    dst: ?*AEDesc,
    @"error": ?*AEBuildError,
    src: ?*i8,
    args: objc.va_list,
) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn AEBuildParameters(event: ?*AppleEvent, @"error": ?*AEBuildError, format: ?*i8) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn vAEBuildParameters(
    event: ?*AppleEvent,
    @"error": ?*AEBuildError,
    format: ?*i8,
    args: objc.va_list,
) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn AEBuildAppleEvent(
    theClass: AEEventClass,
    theID: AEEventID,
    addressType: DescType,
    addressData: ?*anyopaque,
    addressLength: objc.Size,
    returnID: objc.SInt16,
    transactionID: objc.SInt32,
    result: ?*AppleEvent,
    @"error": ?*AEBuildError,
    paramsFmt: ?*i8,
) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn vAEBuildAppleEvent(
    theClass: AEEventClass,
    theID: AEEventID,
    addressType: DescType,
    addressData: ?*anyopaque,
    addressLength: objc.Size,
    returnID: objc.SInt16,
    transactionID: objc.SInt32,
    resultEvt: ?*AppleEvent,
    @"error": ?*AEBuildError,
    paramsFmt: ?*i8,
    args: objc.va_list,
) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn AEPrintDescToHandle(desc: ?*AEDesc, result: ?*objc.Handle) callconv(.C) objc.OSStatus;

pub const OpaqueAEStreamRef = extern struct {};

pub const AEStreamRef = OpaqueAEStreamRef;

pub extern "CoreServices" fn AEStreamOpen() callconv(.C) AEStreamRef;

pub extern "CoreServices" fn AEStreamClose(ref: AEStreamRef, desc: ?*AEDesc) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn AEStreamOpenDesc(ref: AEStreamRef, newType: DescType) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn AEStreamWriteData(ref: AEStreamRef, data: ?*anyopaque, length: objc.Size) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn AEStreamCloseDesc(ref: AEStreamRef) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn AEStreamWriteDesc(
    ref: AEStreamRef,
    newType: DescType,
    data: ?*anyopaque,
    length: objc.Size,
) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn AEStreamWriteAEDesc(ref: AEStreamRef, desc: ?*AEDesc) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn AEStreamOpenList(ref: AEStreamRef) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn AEStreamCloseList(ref: AEStreamRef) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn AEStreamOpenRecord(ref: AEStreamRef, newType: DescType) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn AEStreamSetRecordType(ref: AEStreamRef, newType: DescType) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn AEStreamCloseRecord(ref: AEStreamRef) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn AEStreamWriteKeyDesc(
    ref: AEStreamRef,
    key: AEKeyword,
    newType: DescType,
    data: ?*anyopaque,
    length: objc.Size,
) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn AEStreamOpenKeyDesc(ref: AEStreamRef, key: AEKeyword, newType: DescType) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn AEStreamWriteKey(ref: AEStreamRef, key: AEKeyword) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn AEStreamCreateEvent(
    clazz: AEEventClass,
    id: AEEventID,
    targetType: DescType,
    targetData: ?*anyopaque,
    targetLength: objc.Size,
    returnID: objc.SInt16,
    transactionID: objc.SInt32,
) callconv(.C) AEStreamRef;

pub extern "CoreServices" fn AEStreamOpenEvent(event: ?*AppleEvent) callconv(.C) AEStreamRef;

pub extern "CoreServices" fn AEStreamOptionalParam(ref: AEStreamRef, key: AEKeyword) callconv(.C) objc.OSStatus;

pub const anon841 = DescType;
pub const anon841_typeReplyPortAttr: DescType = 1919250544;

pub extern "CoreServices" fn AEGetRegisteredMachPort() callconv(.C) objc.mach_port_t;

pub extern "CoreServices" fn AEDecodeMessage(header: ?*objc.mach_msg_header_t, event: ?*AppleEvent, reply: ?*AppleEvent) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn AEProcessMessage(header: ?*objc.mach_msg_header_t) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn AESendMessage(
    event: ?*AppleEvent,
    reply: ?*AppleEvent,
    sendMode: AESendMode,
    timeOutInTicks: i64,
) callconv(.C) objc.OSStatus;

pub const __DCSDictionary = extern struct {};

pub const DCSDictionaryRef = __DCSDictionary;

pub extern "CoreServices" fn DCSGetTermRangeInString(dictionary: DCSDictionaryRef, textString: core_foundation.StringRef, offset: core_foundation.Index) callconv(.C) core_foundation.Range;

pub extern "CoreServices" fn DCSCopyTextDefinition(dictionary: DCSDictionaryRef, textString: core_foundation.StringRef, range: core_foundation.Range) callconv(.C) core_foundation.StringRef;

pub const anon591 = i32;
pub const anon591_CSIdentityUnknownAuthorityErr: i32 = -1;
pub const anon591_CSIdentityAuthorityNotAccessibleErr: i32 = -2;
pub const anon591_CSIdentityPermissionErr: i32 = -3;
pub const anon591_CSIdentityDeletedErr: i32 = -4;
pub const anon591_CSIdentityInvalidFullNameErr: i32 = -5;
pub const anon591_CSIdentityDuplicateFullNameErr: i32 = -6;
pub const anon591_CSIdentityInvalidPosixNameErr: i32 = -7;
pub const anon591_CSIdentityDuplicatePosixNameErr: i32 = -8;

pub const __CSIdentityAuthority = extern struct {};

pub const CSIdentityAuthorityRef = __CSIdentityAuthority;

pub extern "CoreServices" fn CSIdentityAuthorityGetTypeID() callconv(.C) core_foundation.TypeID;

pub extern "CoreServices" fn CSGetDefaultIdentityAuthority() callconv(.C) CSIdentityAuthorityRef;

pub extern "CoreServices" fn CSGetLocalIdentityAuthority() callconv(.C) CSIdentityAuthorityRef;

pub extern "CoreServices" fn CSGetManagedIdentityAuthority() callconv(.C) CSIdentityAuthorityRef;

pub extern "CoreServices" fn CSIdentityAuthorityCopyLocalizedName(authority: CSIdentityAuthorityRef) callconv(.C) core_foundation.StringRef;

pub const __CSIdentity = extern struct {};

pub const CSIdentityRef = __CSIdentity;

pub const __CSIdentityQuery = extern struct {};

pub const CSIdentityQueryRef = __CSIdentityQuery;

pub const CSIdentityClass = core_foundation.Index;

pub const CSIdentityFlags = core_foundation.OptionFlags;

pub extern "CoreServices" fn CSIdentityGetTypeID() callconv(.C) core_foundation.TypeID;

pub extern "CoreServices" fn CSIdentityCreate(
    allocator: core_foundation.AllocatorRef,
    identityClass: CSIdentityClass,
    fullName: core_foundation.StringRef,
    posixName: core_foundation.StringRef,
    flags: CSIdentityFlags,
    authority: CSIdentityAuthorityRef,
) callconv(.C) CSIdentityRef;

pub extern "CoreServices" fn CSIdentityCreateCopy(allocator: core_foundation.AllocatorRef, identity: CSIdentityRef) callconv(.C) CSIdentityRef;

pub extern "CoreServices" fn CSIdentityGetClass(identity: CSIdentityRef) callconv(.C) CSIdentityClass;

pub extern "CoreServices" fn CSIdentityGetAuthority(identity: CSIdentityRef) callconv(.C) CSIdentityAuthorityRef;

pub extern "CoreServices" fn CSIdentityGetUUID(identity: CSIdentityRef) callconv(.C) core_foundation.UUIDRef;

pub extern "CoreServices" fn CSIdentityGetFullName(identity: CSIdentityRef) callconv(.C) core_foundation.StringRef;

pub extern "CoreServices" fn CSIdentityGetPosixID(identity: CSIdentityRef) callconv(.C) objc.id_t;

pub extern "CoreServices" fn CSIdentityGetPosixName(identity: CSIdentityRef) callconv(.C) core_foundation.StringRef;

pub extern "CoreServices" fn CSIdentityGetEmailAddress(identity: CSIdentityRef) callconv(.C) core_foundation.StringRef;

pub extern "CoreServices" fn CSIdentityGetImageURL(identity: CSIdentityRef) callconv(.C) core_foundation.URLRef;

pub extern "CoreServices" fn CSIdentityGetImageData(identity: CSIdentityRef) callconv(.C) core_foundation.DataRef;

pub extern "CoreServices" fn CSIdentityGetImageDataType(identity: CSIdentityRef) callconv(.C) core_foundation.StringRef;

pub extern "CoreServices" fn CSIdentityGetAliases(identity: CSIdentityRef) callconv(.C) core_foundation.ArrayRef;

pub extern "CoreServices" fn CSIdentityIsMemberOfGroup(identity: CSIdentityRef, group: CSIdentityRef) callconv(.C) objc.Boolean;

pub extern "CoreServices" fn CSIdentityIsHidden(identity: CSIdentityRef) callconv(.C) objc.Boolean;

pub extern "CoreServices" fn CSIdentityCreatePersistentReference(allocator: core_foundation.AllocatorRef, identity: CSIdentityRef) callconv(.C) core_foundation.DataRef;

pub extern "CoreServices" fn CSIdentityIsEnabled(user: CSIdentityRef) callconv(.C) objc.Boolean;

pub extern "CoreServices" fn CSIdentityAuthenticateUsingPassword(user: CSIdentityRef, password: core_foundation.StringRef) callconv(.C) objc.Boolean;

pub extern "CoreServices" fn CSIdentityGetCertificate(user: CSIdentityRef) callconv(.C) security.CertificateRef;

pub extern "CoreServices" fn CSIdentityCreateGroupMembershipQuery(allocator: core_foundation.AllocatorRef, group: CSIdentityRef) callconv(.C) CSIdentityQueryRef;

pub extern "CoreServices" fn CSIdentitySetFullName(identity: CSIdentityRef, fullName: core_foundation.StringRef) callconv(.C) void;

pub extern "CoreServices" fn CSIdentitySetEmailAddress(identity: CSIdentityRef, emailAddress: core_foundation.StringRef) callconv(.C) void;

pub extern "CoreServices" fn CSIdentitySetImageURL(identity: CSIdentityRef, url: core_foundation.URLRef) callconv(.C) void;

pub extern "CoreServices" fn CSIdentitySetImageData(identity: CSIdentityRef, imageData: core_foundation.DataRef, imageDataType: core_foundation.StringRef) callconv(.C) void;

pub extern "CoreServices" fn CSIdentityAddAlias(identity: CSIdentityRef, alias: core_foundation.StringRef) callconv(.C) void;

pub extern "CoreServices" fn CSIdentityRemoveAlias(identity: CSIdentityRef, alias: core_foundation.StringRef) callconv(.C) void;

pub extern "CoreServices" fn CSIdentityAddMember(group: CSIdentityRef, member: CSIdentityRef) callconv(.C) void;

pub extern "CoreServices" fn CSIdentityRemoveMember(group: CSIdentityRef, member: CSIdentityRef) callconv(.C) void;

pub extern "CoreServices" fn CSIdentitySetIsEnabled(user: CSIdentityRef, isEnabled: objc.Boolean) callconv(.C) void;

pub extern "CoreServices" fn CSIdentitySetPassword(user: CSIdentityRef, password: core_foundation.StringRef) callconv(.C) void;

pub extern "CoreServices" fn CSIdentitySetCertificate(user: CSIdentityRef, certificate: security.CertificateRef) callconv(.C) void;

pub extern "CoreServices" fn CSIdentityDelete(identity: CSIdentityRef) callconv(.C) void;

pub extern "CoreServices" fn CSIdentityCommit(identity: CSIdentityRef, authorization: security.AuthorizationRef, @"error": ?*core_foundation.ErrorRef) callconv(.C) objc.Boolean;

pub const anon13521 = u32;
pub const anon13521_CSIdentityCommitCompleted: u32 = 1;

pub const CSIdentityStatusUpdatedCallback = ?*const fn (
    CSIdentityRef,
    core_foundation.Index,
    core_foundation.ErrorRef,
    ?*anyopaque,
) callconv(.C) void;

pub const CSIdentityClientContext = extern struct {
    version: core_foundation.Index,
    info: ?*anyopaque,
    retain: core_foundation.AllocatorRetainCallBack,
    release: core_foundation.AllocatorReleaseCallBack,
    copyDescription: core_foundation.AllocatorCopyDescriptionCallBack,
    statusUpdated: CSIdentityStatusUpdatedCallback,
};

pub extern "CoreServices" fn CSIdentityCommitAsynchronously(
    identity: CSIdentityRef,
    clientContext: ?*CSIdentityClientContext,
    runLoop: core_foundation.RunLoopRef,
    runLoopMode: core_foundation.StringRef,
    authorization: security.AuthorizationRef,
) callconv(.C) objc.Boolean;

pub extern "CoreServices" fn CSIdentityIsCommitting(identity: CSIdentityRef) callconv(.C) objc.Boolean;

pub extern "CoreServices" fn CSIdentityRemoveClient(identity: CSIdentityRef) callconv(.C) void;

pub extern "CoreServices" fn CSIdentityQueryGetTypeID() callconv(.C) core_foundation.TypeID;

pub const CSIdentityQueryFlags = core_foundation.OptionFlags;

pub const CSIdentityQueryStringComparisonMethod = core_foundation.Index;

pub extern "CoreServices" fn CSIdentityQueryCreate(allocator: core_foundation.AllocatorRef, identityClass: CSIdentityClass, authority: CSIdentityAuthorityRef) callconv(.C) CSIdentityQueryRef;

pub extern "CoreServices" fn CSIdentityQueryCreateForName(
    allocator: core_foundation.AllocatorRef,
    name: core_foundation.StringRef,
    comparisonMethod: CSIdentityQueryStringComparisonMethod,
    identityClass: CSIdentityClass,
    authority: CSIdentityAuthorityRef,
) callconv(.C) CSIdentityQueryRef;

pub extern "CoreServices" fn CSIdentityQueryCreateForUUID(allocator: core_foundation.AllocatorRef, uuid: core_foundation.UUIDRef, authority: CSIdentityAuthorityRef) callconv(.C) CSIdentityQueryRef;

pub extern "CoreServices" fn CSIdentityQueryCreateForPosixID(
    allocator: core_foundation.AllocatorRef,
    posixID: objc.id_t,
    identityClass: CSIdentityClass,
    authority: CSIdentityAuthorityRef,
) callconv(.C) CSIdentityQueryRef;

pub extern "CoreServices" fn CSIdentityQueryCreateForPersistentReference(allocator: core_foundation.AllocatorRef, referenceData: core_foundation.DataRef) callconv(.C) CSIdentityQueryRef;

pub extern "CoreServices" fn CSIdentityQueryCreateForCurrentUser(allocator: core_foundation.AllocatorRef) callconv(.C) CSIdentityQueryRef;

pub extern "CoreServices" fn CSIdentityQueryCopyResults(query: CSIdentityQueryRef) callconv(.C) core_foundation.ArrayRef;

pub extern "CoreServices" fn CSIdentityQueryExecute(query: CSIdentityQueryRef, flags: CSIdentityQueryFlags, @"error": ?*core_foundation.ErrorRef) callconv(.C) objc.Boolean;

pub const CSIdentityQueryEvent = core_foundation.Index;

pub const CSIdentityQueryReceiveEventCallback = ?*const fn (
    CSIdentityQueryRef,
    CSIdentityQueryEvent,
    core_foundation.ArrayRef,
    core_foundation.ErrorRef,
    ?*anyopaque,
) callconv(.C) void;

pub const CSIdentityQueryClientContext = extern struct {
    version: core_foundation.Index,
    info: ?*anyopaque,
    retainInfo: core_foundation.AllocatorRetainCallBack,
    releaseInfo: core_foundation.AllocatorReleaseCallBack,
    copyInfoDescription: core_foundation.AllocatorCopyDescriptionCallBack,
    receiveEvent: CSIdentityQueryReceiveEventCallback,
};

pub extern "CoreServices" fn CSIdentityQueryExecuteAsynchronously(
    query: CSIdentityQueryRef,
    flags: CSIdentityQueryFlags,
    clientContext: ?*CSIdentityQueryClientContext,
    runLoop: core_foundation.RunLoopRef,
    runLoopMode: core_foundation.StringRef,
) callconv(.C) objc.Boolean;

pub extern "CoreServices" fn CSIdentityQueryStop(query: CSIdentityQueryRef) callconv(.C) void;

pub const anon431 = u32;
pub const anon431_IconServices256PixelDataARGB: u32 = 1768108088;
pub const anon431_IconServices512PixelDataARGB: u32 = 1768108089;
pub const anon431_IconServices1024PixelDataARGB: u32 = 1768108336;
pub const anon431_Thumbnail32BitData: u32 = 1769222962;
pub const anon431_Thumbnail8BitMask: u32 = 1949855083;

pub const IconFamilyElement = extern struct {
    elementType: objc.OSType,
    elementSize: objc.SInt32,
    elementData: [1]u8,
};

pub const IconFamilyResource = extern struct {
    resourceType: objc.OSType,
    resourceSize: objc.SInt32,
    elements: [1]IconFamilyElement,
};

pub const IconFamilyPtr = IconFamilyResource;

pub const IconFamilyHandle = IconFamilyPtr;

pub const SleepQRec = extern struct {
    sleepQLink: SleepQRecPtr,
    sleepQType: i16,
    sleepQProc: SleepQUPP,
    sleepQFlags: i16,
};

pub const SleepQRecPtr = SleepQRec;

pub const SleepQProcPtr = ?*const fn (i64, SleepQRecPtr) callconv(.C) i64;

pub const SleepQUPP = SleepQProcPtr;

pub extern "CoreServices" fn NewSleepQUPP(userRoutine: SleepQProcPtr) callconv(.C) SleepQUPP;

pub extern "CoreServices" fn DisposeSleepQUPP(userUPP: SleepQUPP) callconv(.C) void;

pub extern "CoreServices" fn InvokeSleepQUPP(message: i64, qRecPtr: SleepQRecPtr, userUPP: SleepQUPP) callconv(.C) i64;

pub extern "CoreServices" fn GetCPUSpeed() callconv(.C) i64;

pub extern "CoreServices" fn SleepQInstall(qRecPtr: SleepQRecPtr) callconv(.C) void;

pub extern "CoreServices" fn SleepQRemove(qRecPtr: SleepQRecPtr) callconv(.C) void;

pub extern "CoreServices" fn MaximumProcessorSpeed() callconv(.C) i16;

pub extern "CoreServices" fn MinimumProcessorSpeed() callconv(.C) i16;

pub extern "CoreServices" fn CurrentProcessorSpeed() callconv(.C) i16;

pub extern "CoreServices" fn BatteryCount() callconv(.C) i16;

pub extern "CoreServices" fn UpdateSystemActivity(activity: objc.UInt8) callconv(.C) objc.OSErr;

pub const KCRef = security.KeychainRef;

pub const KCItemRef = security.KeychainItemRef;

pub const KCSearchRef = security.KeychainSearchRef;

pub const KCAttribute = security.KeychainAttribute;

pub const KCAttributeList = security.KeychainAttributeList;

pub const KCAttrType = security.KeychainAttrType;

pub const KCStatus = security.KeychainStatus;

pub const KCEvent = objc.UInt16;

pub const KCEventMask = objc.UInt16;

pub const AFPServerSignature = objc.UInt8;

pub const KCPublicKeyHash = objc.UInt8;

pub const KCCallbackInfo = extern struct {
    version: objc.UInt32,
    item: KCItemRef,
    processID: [2]objc.SInt32,
    event: [4]objc.SInt32,
    keychain: KCRef,
};

pub const KCItemClass = objc.FourCharCode;

pub const KCItemAttr = objc.FourCharCode;

pub const KCAuthType = objc.FourCharCode;

pub const anon1801 = u32;
pub const anon1801_KCProtocolTypeFTP: u32 = 1718906912;
pub const anon1801_KCProtocolTypeFTPAccount: u32 = 1718906977;
pub const anon1801_KCProtocolTypeHTTP: u32 = 1752462448;
pub const anon1801_KCProtocolTypeIRC: u32 = 1769104160;
pub const anon1801_KCProtocolTypeNNTP: u32 = 1852732528;
pub const anon1801_KCProtocolTypePOP3: u32 = 1886351411;
pub const anon1801_KCProtocolTypeSMTP: u32 = 1936553072;
pub const anon1801_KCProtocolTypeSOCKS: u32 = 1936685088;
pub const anon1801_KCProtocolTypeIMAP: u32 = 1768776048;
pub const anon1801_KCProtocolTypeLDAP: u32 = 1818517872;
pub const anon1801_KCProtocolTypeAppleTalk: u32 = 1635019883;
pub const anon1801_KCProtocolTypeAFP: u32 = 1634103328;
pub const anon1801_KCProtocolTypeTelnet: u32 = 1952803950;

pub const KCProtocolType = objc.FourCharCode;

pub const KCCertAddOptions = objc.UInt32;

pub const KCVerifyStopOn = objc.UInt16;

pub const anon2191 = u32;
pub const anon2191_PolicyKCStopOn: u32 = 0;
pub const anon2191_NoneKCStopOn: u32 = 1;
pub const anon2191_FirstPassKCStopOn: u32 = 2;
pub const anon2191_FirstFailKCStopOn: u32 = 3;

pub const KCCertSearchOptions = objc.UInt32;

pub const anon2271 = u32;
pub const anon2271_CertSearchShift: u32 = 0;
pub const anon2271_CertSearchSigningIgnored: u32 = 0;
pub const anon2271_CertSearchSigningAllowed: u32 = 1;
pub const anon2271_CertSearchSigningDisallowed: u32 = 2;
pub const anon2271_CertSearchSigningMask: u32 = 3;
pub const anon2271_CertSearchVerifyIgnored: u32 = 0;
pub const anon2271_CertSearchVerifyAllowed: u32 = 4;
pub const anon2271_CertSearchVerifyDisallowed: u32 = 8;
pub const anon2271_CertSearchVerifyMask: u32 = 12;
pub const anon2271_CertSearchEncryptIgnored: u32 = 0;
pub const anon2271_CertSearchEncryptAllowed: u32 = 16;
pub const anon2271_CertSearchEncryptDisallowed: u32 = 32;
pub const anon2271_CertSearchEncryptMask: u32 = 48;
pub const anon2271_CertSearchDecryptIgnored: u32 = 0;
pub const anon2271_CertSearchDecryptAllowed: u32 = 64;
pub const anon2271_CertSearchDecryptDisallowed: u32 = 128;
pub const anon2271_CertSearchDecryptMask: u32 = 192;
pub const anon2271_CertSearchWrapIgnored: u32 = 0;
pub const anon2271_CertSearchWrapAllowed: u32 = 256;
pub const anon2271_CertSearchWrapDisallowed: u32 = 512;
pub const anon2271_CertSearchWrapMask: u32 = 768;
pub const anon2271_CertSearchUnwrapIgnored: u32 = 0;
pub const anon2271_CertSearchUnwrapAllowed: u32 = 1024;
pub const anon2271_CertSearchUnwrapDisallowed: u32 = 2048;
pub const anon2271_CertSearchUnwrapMask: u32 = 3072;
pub const anon2271_CertSearchPrivKeyRequired: u32 = 4096;
pub const anon2271_CertSearchAny: u32 = 0;
pub const anon2271_InternetLocationHTTPIcon: u32 = 1768712308;
pub const anon2271_InternetLocationFTPIcon: u32 = 1768711796;
pub const anon2271_InternetLocationAppleShareIcon: u32 = 1768710502;
pub const anon2271_InternetLocationAppleTalkZoneIcon: u32 = 1768710516;
pub const anon2271_InternetLocationFileIcon: u32 = 1768711785;
pub const anon2271_InternetLocationMailIcon: u32 = 1768713569;
pub const anon2271_InternetLocationNewsIcon: u32 = 1768713847;
pub const anon2271_InternetLocationNSLNeighborhoodIcon: u32 = 1768713843;
pub const anon2271_InternetLocationGenericIcon: u32 = 1768712037;

pub const anon2621 = u32;
pub const anon2621_AnyProtocol: u32 = 0;
pub const anon2621_AnyAuthType: u32 = 0;

pub extern "CoreServices" fn KCGetKeychainManagerVersion(returnVers: ?*objc.UInt32) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn KCSetInteractionAllowed(state: objc.Boolean) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn KCIsInteractionAllowed() callconv(.C) objc.Boolean;

pub extern "CoreServices" fn KCMakeKCRefFromFSRef(keychainFSRef: ?*FSRef, keychain: ?*KCRef) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn KCMakeKCRefFromAlias(keychainAlias: AliasHandle, keychain: ?*KCRef) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn KCMakeAliasFromKCRef(keychain: KCRef, keychainAlias: ?*AliasHandle) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn KCReleaseKeychain(keychain: ?*KCRef) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn KCGetDefaultKeychain(keychain: ?*KCRef) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn KCSetDefaultKeychain(keychain: KCRef) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn KCGetStatus(keychain: KCRef, keychainStatus: ?*objc.UInt32) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn KCGetKeychain(item: KCItemRef, keychain: ?*KCRef) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn KCGetKeychainName(keychain: KCRef, keychainName: objc.StringPtr) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn KCCountKeychains() callconv(.C) objc.UInt16;

pub extern "CoreServices" fn KCGetIndKeychain(index: objc.UInt16, keychain: ?*KCRef) callconv(.C) objc.OSStatus;

pub const KCCallbackProcPtr = objc.OSStatus;

pub const KCCallbackUPP = KCCallbackProcPtr;

pub extern "CoreServices" fn NewKCCallbackUPP(userRoutine: KCCallbackProcPtr) callconv(.C) KCCallbackUPP;

pub extern "CoreServices" fn DisposeKCCallbackUPP(userUPP: KCCallbackUPP) callconv(.C) void;

pub extern "CoreServices" fn InvokeKCCallbackUPP(
    keychainEvent: KCEvent,
    info: ?*KCCallbackInfo,
    userContext: ?*anyopaque,
    userUPP: KCCallbackUPP,
) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn KCFindAppleSharePassword(
    serverSignature: ?*AFPServerSignature,
    serverAddress: objc.ConstStringPtr,
    serverName: objc.ConstStringPtr,
    volumeName: objc.ConstStringPtr,
    accountName: objc.ConstStringPtr,
    maxLength: objc.UInt32,
    passwordData: ?*anyopaque,
    actualLength: ?*objc.UInt32,
    item: ?*KCItemRef,
) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn KCFindInternetPassword(
    serverName: objc.ConstStringPtr,
    securityDomain: objc.ConstStringPtr,
    accountName: objc.ConstStringPtr,
    port: objc.UInt16,
    protocol: objc.OSType,
    authType: objc.OSType,
    maxLength: objc.UInt32,
    passwordData: ?*anyopaque,
    actualLength: ?*objc.UInt32,
    item: ?*KCItemRef,
) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn KCFindInternetPasswordWithPath(
    serverName: objc.ConstStringPtr,
    securityDomain: objc.ConstStringPtr,
    accountName: objc.ConstStringPtr,
    path: objc.ConstStringPtr,
    port: objc.UInt16,
    protocol: objc.OSType,
    authType: objc.OSType,
    maxLength: objc.UInt32,
    passwordData: ?*anyopaque,
    actualLength: ?*objc.UInt32,
    item: ?*KCItemRef,
) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn KCFindGenericPassword(
    serviceName: objc.ConstStringPtr,
    accountName: objc.ConstStringPtr,
    maxLength: objc.UInt32,
    passwordData: ?*anyopaque,
    actualLength: ?*objc.UInt32,
    item: ?*KCItemRef,
) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn KCAddCallback(callbackProc: KCCallbackUPP, eventMask: KCEventMask, userContext: ?*anyopaque) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn KCRemoveCallback(callbackProc: KCCallbackUPP) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn KCNewItem(
    itemClass: KCItemClass,
    itemCreator: objc.OSType,
    length: objc.UInt32,
    data: ?*anyopaque,
    item: ?*KCItemRef,
) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn KCSetAttribute(item: KCItemRef, attr: ?*KCAttribute) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn KCGetAttribute(item: KCItemRef, attr: ?*KCAttribute, actualLength: ?*objc.UInt32) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn KCSetData(item: KCItemRef, length: objc.UInt32, data: ?*anyopaque) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn KCUpdateItem(item: KCItemRef) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn KCReleaseItem(item: ?*KCItemRef) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn KCCopyItem(item: KCItemRef, destKeychain: KCRef, copy: ?*KCItemRef) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn KCFindFirstItem(
    keychain: KCRef,
    attrList: ?*KCAttributeList,
    search: ?*KCSearchRef,
    item: ?*KCItemRef,
) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn KCFindNextItem(search: KCSearchRef, item: ?*KCItemRef) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn KCReleaseSearch(search: ?*KCSearchRef) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn KCDeleteItem(item: KCItemRef) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn KCGetData(
    item: KCItemRef,
    maxLength: objc.UInt32,
    data: ?*anyopaque,
    actualLength: ?*objc.UInt32,
) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn KCLock(keychain: KCRef) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn kcgetkeychainname(keychain: KCRef, keychainName: ?*i8) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn kcfindapplesharepassword(
    serverSignature: ?*AFPServerSignature,
    serverAddress: ?*i8,
    serverName: ?*i8,
    volumeName: ?*i8,
    accountName: ?*i8,
    maxLength: objc.UInt32,
    passwordData: ?*anyopaque,
    actualLength: ?*objc.UInt32,
    item: ?*KCItemRef,
) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn kcfindinternetpassword(
    serverName: ?*i8,
    securityDomain: ?*i8,
    accountName: ?*i8,
    port: objc.UInt16,
    protocol: objc.OSType,
    authType: objc.OSType,
    maxLength: objc.UInt32,
    passwordData: ?*anyopaque,
    actualLength: ?*objc.UInt32,
    item: ?*KCItemRef,
) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn kcfindinternetpasswordwithpath(
    serverName: ?*i8,
    securityDomain: ?*i8,
    accountName: ?*i8,
    path: ?*i8,
    port: objc.UInt16,
    protocol: objc.OSType,
    authType: objc.OSType,
    maxLength: objc.UInt32,
    passwordData: ?*anyopaque,
    actualLength: ?*objc.UInt32,
    item: ?*KCItemRef,
) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn kcfindgenericpassword(
    serviceName: ?*i8,
    accountName: ?*i8,
    maxLength: objc.UInt32,
    passwordData: ?*anyopaque,
    actualLength: ?*objc.UInt32,
    item: ?*KCItemRef,
) callconv(.C) objc.OSStatus;

pub const WSTypeID = u32;
pub const WSTypeID_eWSUnknownType: u32 = 0;
pub const WSTypeID_eWSNullType: u32 = 1;
pub const WSTypeID_eWSBooleanType: u32 = 2;
pub const WSTypeID_eWSIntegerType: u32 = 3;
pub const WSTypeID_eWSDoubleType: u32 = 4;
pub const WSTypeID_eWSStringType: u32 = 5;
pub const WSTypeID_eWSDateType: u32 = 6;
pub const WSTypeID_eWSDataType: u32 = 7;
pub const WSTypeID_eWSArrayType: u32 = 8;
pub const WSTypeID_eWSDictionaryType: u32 = 9;

pub const WSClientContextRetainCallBackProcPtr = ?*const fn (?*anyopaque) callconv(.C) ?*anyopaque;

pub const WSClientContextReleaseCallBackProcPtr = ?*const fn (?*anyopaque) callconv(.C) void;

pub const WSClientContextCopyDescriptionCallBackProcPtr = core_foundation.StringRef;

pub const WSClientContext = extern struct {
    version: core_foundation.Index,
    info: ?*anyopaque,
    retain: WSClientContextRetainCallBackProcPtr,
    release: WSClientContextReleaseCallBackProcPtr,
    copyDescription: WSClientContextCopyDescriptionCallBackProcPtr,
};

pub extern "CoreServices" fn WSGetWSTypeIDFromCFType(ref: core_foundation.TypeRef) callconv(.C) WSTypeID;

pub extern "CoreServices" fn WSGetCFTypeIDFromWSTypeID(typeID: WSTypeID) callconv(.C) core_foundation.TypeID;

pub const OpaqueWSMethodInvocationRef = extern struct {};

pub const WSMethodInvocationRef = OpaqueWSMethodInvocationRef;

pub extern "CoreServices" fn WSMethodInvocationGetTypeID() callconv(.C) core_foundation.TypeID;

pub extern "CoreServices" fn WSMethodInvocationCreate(url: core_foundation.URLRef, methodName: core_foundation.StringRef, protocol: core_foundation.StringRef) callconv(.C) WSMethodInvocationRef;

pub extern "CoreServices" fn WSMethodInvocationCreateFromSerialization(contract: core_foundation.DataRef) callconv(.C) WSMethodInvocationRef;

pub extern "CoreServices" fn WSMethodInvocationCopySerialization(invocation: WSMethodInvocationRef) callconv(.C) core_foundation.DataRef;

pub extern "CoreServices" fn WSMethodInvocationSetParameters(invocation: WSMethodInvocationRef, parameters: core_foundation.DictionaryRef, parameterOrder: core_foundation.ArrayRef) callconv(.C) void;

pub extern "CoreServices" fn WSMethodInvocationCopyParameters(invocation: WSMethodInvocationRef, parameterOrder: ?*core_foundation.ArrayRef) callconv(.C) core_foundation.DictionaryRef;

pub extern "CoreServices" fn WSMethodInvocationSetProperty(invocation: WSMethodInvocationRef, propertyName: core_foundation.StringRef, propertyValue: core_foundation.TypeRef) callconv(.C) void;

pub extern "CoreServices" fn WSMethodInvocationCopyProperty(invocation: WSMethodInvocationRef, propertyName: core_foundation.StringRef) callconv(.C) core_foundation.TypeRef;

pub extern "CoreServices" fn WSMethodInvocationInvoke(invocation: WSMethodInvocationRef) callconv(.C) core_foundation.DictionaryRef;

pub const WSMethodInvocationCallBackProcPtr = ?*const fn (WSMethodInvocationRef, ?*anyopaque, core_foundation.DictionaryRef) callconv(.C) void;

pub extern "CoreServices" fn WSMethodInvocationSetCallBack(invocation: WSMethodInvocationRef, clientCB: WSMethodInvocationCallBackProcPtr, context: ?*WSClientContext) callconv(.C) void;

pub extern "CoreServices" fn WSMethodInvocationScheduleWithRunLoop(invocation: WSMethodInvocationRef, runLoop: core_foundation.RunLoopRef, runLoopMode: core_foundation.StringRef) callconv(.C) void;

pub extern "CoreServices" fn WSMethodInvocationUnscheduleFromRunLoop(invocation: WSMethodInvocationRef, runLoop: core_foundation.RunLoopRef, runLoopMode: core_foundation.StringRef) callconv(.C) void;

pub extern "CoreServices" fn WSMethodResultIsFault(methodResult: core_foundation.DictionaryRef) callconv(.C) objc.Boolean;

pub const WSMethodInvocationSerializationProcPtr = core_foundation.StringRef;

pub extern "CoreServices" fn WSMethodInvocationAddSerializationOverride(
    invocation: WSMethodInvocationRef,
    objType: core_foundation.TypeID,
    serializationProc: WSMethodInvocationSerializationProcPtr,
    context: ?*WSClientContext,
) callconv(.C) void;

pub const WSMethodInvocationDeserializationProcPtr = core_foundation.TypeRef;

pub extern "CoreServices" fn WSMethodInvocationAddDeserializationOverride(
    invocation: WSMethodInvocationRef,
    typeNamespace: core_foundation.StringRef,
    typeName: core_foundation.StringRef,
    deserializationProc: WSMethodInvocationDeserializationProcPtr,
    context: ?*WSClientContext,
) callconv(.C) void;

pub const OpaqueWSProtocolHandlerRef = extern struct {};

pub const WSProtocolHandlerRef = OpaqueWSProtocolHandlerRef;

pub extern "CoreServices" fn WSProtocolHandlerGetTypeID() callconv(.C) core_foundation.TypeID;

pub extern "CoreServices" fn WSProtocolHandlerCreate(allocator: core_foundation.AllocatorRef, protocol: core_foundation.StringRef) callconv(.C) WSProtocolHandlerRef;

pub extern "CoreServices" fn WSProtocolHandlerCopyRequestDictionary(ref: WSProtocolHandlerRef, data: core_foundation.DataRef) callconv(.C) core_foundation.DictionaryRef;

pub extern "CoreServices" fn WSProtocolHandlerCopyReplyDictionary(ref: WSProtocolHandlerRef, methodName: core_foundation.StringRef, data: core_foundation.DataRef) callconv(.C) core_foundation.DictionaryRef;

pub extern "CoreServices" fn WSProtocolHandlerCopyReplyDocument(ref: WSProtocolHandlerRef, methodContext: core_foundation.DictionaryRef, resultValue: core_foundation.TypeRef) callconv(.C) core_foundation.DataRef;

pub extern "CoreServices" fn WSProtocolHandlerCopyFaultDocument(ref: WSProtocolHandlerRef, methodContext: core_foundation.DictionaryRef, faultDict: core_foundation.DictionaryRef) callconv(.C) core_foundation.DataRef;

pub extern "CoreServices" fn WSProtocolHandlerCopyRequestDocument(
    ref: WSProtocolHandlerRef,
    methodName: core_foundation.StringRef,
    methodParams: core_foundation.DictionaryRef,
    methodParamOrder: core_foundation.ArrayRef,
    methodExtras: core_foundation.DictionaryRef,
) callconv(.C) core_foundation.DataRef;

pub extern "CoreServices" fn WSProtocolHandlerCopyProperty(ref: WSProtocolHandlerRef, propertyName: core_foundation.StringRef) callconv(.C) core_foundation.TypeRef;

pub extern "CoreServices" fn WSProtocolHandlerSetProperty(ref: WSProtocolHandlerRef, propertyName: core_foundation.StringRef, propertyValue: core_foundation.TypeRef) callconv(.C) void;

pub const WSProtocolHandlerSerializationProcPtr = core_foundation.StringRef;

pub extern "CoreServices" fn WSProtocolHandlerSetSerializationOverride(
    protocol: WSProtocolHandlerRef,
    objType: core_foundation.TypeID,
    serializationProc: WSProtocolHandlerSerializationProcPtr,
    context: ?*WSClientContext,
) callconv(.C) void;

pub const WSProtocolHandlerDeserializationProcPtr = core_foundation.TypeRef;

pub extern "CoreServices" fn WSProtocolHandlerSetDeserializationOverride(
    protocol: WSProtocolHandlerRef,
    typeNamespace: core_foundation.StringRef,
    typeName: core_foundation.StringRef,
    deserializationProc: WSProtocolHandlerDeserializationProcPtr,
    context: ?*WSClientContext,
) callconv(.C) void;

pub const anon771 = i32;
pub const anon771_GenericPreferencesIconResource: i32 = -3971;
pub const anon771_GenericQueryDocumentIconResource: i32 = -16506;
pub const anon771_GenericExtensionIconResource: i32 = -16415;
pub const anon771_SystemFolderIconResource: i32 = -3983;
pub const anon771_HelpIconResource: i32 = -20271;
pub const anon771_AppleMenuFolderIconResource: i32 = -3982;

pub const OpaqueIconRef = extern struct {};

pub const IconRef = OpaqueIconRef;

pub const anon3361 = u32;
pub const anon3361_AppleTalkIcon: u32 = 1635019883;
pub const anon3361_AppleTalkZoneIcon: u32 = 1635023470;
pub const anon3361_AFPServerIcon: u32 = 1634103411;
pub const anon3361_FTPServerIcon: u32 = 1718906995;
pub const anon3361_HTTPServerIcon: u32 = 1752461427;
pub const anon3361_GenericNetworkIcon: u32 = 1735288180;
pub const anon3361_IPFileServerIcon: u32 = 1769173622;

pub const anon3471 = u32;
pub const anon3471_ToolbarCustomizeIcon: u32 = 1952675187;
pub const anon3471_ToolbarDeleteIcon: u32 = 1952736620;
pub const anon3471_ToolbarFavoritesIcon: u32 = 1952866678;
pub const anon3471_ToolbarHomeIcon: u32 = 1953001325;
pub const anon3471_ToolbarAdvancedIcon: u32 = 1952604534;
pub const anon3471_ToolbarInfoIcon: u32 = 1952606574;
pub const anon3471_ToolbarLabelsIcon: u32 = 1952607330;
pub const anon3471_ToolbarApplicationsFolderIcon: u32 = 1950445683;
pub const anon3471_ToolbarDocumentsFolderIcon: u32 = 1950642019;
pub const anon3471_ToolbarMovieFolderIcon: u32 = 1951231862;
pub const anon3471_ToolbarMusicFolderIcon: u32 = 1951233395;
pub const anon3471_ToolbarPicturesFolderIcon: u32 = 1951426915;
pub const anon3471_ToolbarPublicFolderIcon: u32 = 1951429986;
pub const anon3471_ToolbarDesktopFolderIcon: u32 = 1950643051;
pub const anon3471_ToolbarDownloadsFolderIcon: u32 = 1950644078;
pub const anon3471_ToolbarLibraryFolderIcon: u32 = 1951164770;
pub const anon3471_ToolbarUtilitiesFolderIcon: u32 = 1951757420;
pub const anon3471_ToolbarSitesFolderIcon: u32 = 1951626355;

pub const IconServicesUsageFlags = objc.UInt32;

pub const anon4151 = u32;
pub const anon4151_IconServicesCatalogInfoMask: u32 = 531550;

pub extern "CoreServices" fn GetIconRefOwners(theIconRef: IconRef, owners: ?*objc.UInt16) callconv(.C) objc.OSErr;

pub extern "CoreServices" fn AcquireIconRef(theIconRef: IconRef) callconv(.C) objc.OSErr;

pub extern "CoreServices" fn ReleaseIconRef(theIconRef: IconRef) callconv(.C) objc.OSErr;

pub extern "CoreServices" fn GetIconRef(
    vRefNum: objc.SInt16,
    creator: objc.OSType,
    iconType: objc.OSType,
    theIconRef: ?*IconRef,
) callconv(.C) objc.OSErr;

pub extern "CoreServices" fn GetIconRefFromFolder(
    vRefNum: objc.SInt16,
    parentFolderID: objc.SInt32,
    folderID: objc.SInt32,
    attributes: objc.SInt8,
    accessPrivileges: objc.SInt8,
    theIconRef: ?*IconRef,
) callconv(.C) objc.OSErr;

pub extern "CoreServices" fn GetIconRefFromFileInfo(
    inRef: ?*FSRef,
    inFileNameLength: objc.UniCharCount,
    inFileName: ?*objc.UniChar,
    inWhichInfo: FSCatalogInfoBitmap,
    inCatalogInfo: ?*FSCatalogInfo,
    inUsageFlags: IconServicesUsageFlags,
    outIconRef: ?*IconRef,
    outLabel: ?*objc.SInt16,
) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn GetIconRefFromTypeInfo(
    inCreator: objc.OSType,
    inType: objc.OSType,
    inExtension: core_foundation.StringRef,
    inMIMEType: core_foundation.StringRef,
    inUsageFlags: IconServicesUsageFlags,
    outIconRef: ?*IconRef,
) callconv(.C) objc.OSErr;

pub extern "CoreServices" fn GetIconRefFromIconFamilyPtr(inIconFamilyPtr: ?*IconFamilyResource, inSize: objc.Size, outIconRef: ?*IconRef) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn GetIconRefFromComponent(inComponent: Component, outIconRef: ?*IconRef) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn RegisterIconRefFromIconFamily(
    creator: objc.OSType,
    iconType: objc.OSType,
    iconFamily: IconFamilyHandle,
    theIconRef: ?*IconRef,
) callconv(.C) objc.OSErr;

pub extern "CoreServices" fn RegisterIconRefFromFSRef(
    creator: objc.OSType,
    iconType: objc.OSType,
    iconFile: ?*FSRef,
    theIconRef: ?*IconRef,
) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn UnregisterIconRef(creator: objc.OSType, iconType: objc.OSType) callconv(.C) objc.OSErr;

pub extern "CoreServices" fn UpdateIconRef(theIconRef: IconRef) callconv(.C) objc.OSErr;

pub extern "CoreServices" fn OverrideIconRef(oldIconRef: IconRef, newIconRef: IconRef) callconv(.C) objc.OSErr;

pub extern "CoreServices" fn RemoveIconRefOverride(theIconRef: IconRef) callconv(.C) objc.OSErr;

pub extern "CoreServices" fn CompositeIconRef(backgroundIconRef: IconRef, foregroundIconRef: IconRef, compositeIconRef: ?*IconRef) callconv(.C) objc.OSErr;

pub extern "CoreServices" fn IsIconRefComposite(compositeIconRef: IconRef, backgroundIconRef: ?*IconRef, foregroundIconRef: ?*IconRef) callconv(.C) objc.OSErr;

pub extern "CoreServices" fn IsValidIconRef(theIconRef: IconRef) callconv(.C) objc.Boolean;

pub extern "CoreServices" fn IsDataAvailableInIconRef(inIconKind: objc.OSType, inIconRef: IconRef) callconv(.C) objc.Boolean;

pub extern "CoreServices" fn SetCustomIconsEnabled(vRefNum: objc.SInt16, enableCustomIcons: objc.Boolean) callconv(.C) objc.OSErr;

pub extern "CoreServices" fn GetCustomIconsEnabled(vRefNum: objc.SInt16, customIconsEnabled: ?*objc.Boolean) callconv(.C) objc.OSErr;

pub extern "CoreServices" fn ReadIconFromFSRef(ref: ?*FSRef, iconFamily: ?*IconFamilyHandle) callconv(.C) objc.OSStatus;

pub const LSRolesMask = objc.OptionBits;
pub const LSRolesMask_None: objc.OptionBits = 1;
pub const LSRolesMask_Viewer: objc.OptionBits = 2;
pub const LSRolesMask_Editor: objc.OptionBits = 4;
pub const LSRolesMask_Shell: objc.OptionBits = 8;
pub const LSRolesMask_All: objc.OptionBits = -1;

pub const LSAcceptanceFlags = objc.OptionBits;
pub const LSAcceptanceFlags_Default: objc.OptionBits = 1;
pub const LSAcceptanceFlags_AllowLoginUI: objc.OptionBits = 2;

pub extern "CoreServices" fn LSCopyDefaultApplicationURLForURL(inURL: core_foundation.URLRef, inRoleMask: LSRolesMask, outError: ?*core_foundation.ErrorRef) callconv(.C) core_foundation.URLRef;

pub extern "CoreServices" fn LSCopyDefaultApplicationURLForContentType(inContentType: core_foundation.StringRef, inRoleMask: LSRolesMask, outError: ?*core_foundation.ErrorRef) callconv(.C) core_foundation.URLRef;

pub extern "CoreServices" fn LSCopyApplicationURLsForBundleIdentifier(inBundleIdentifier: core_foundation.StringRef, outError: ?*core_foundation.ErrorRef) callconv(.C) core_foundation.ArrayRef;

pub extern "CoreServices" fn LSCopyApplicationURLsForURL(inURL: core_foundation.URLRef, inRoleMask: LSRolesMask) callconv(.C) core_foundation.ArrayRef;

pub extern "CoreServices" fn LSCanURLAcceptURL(
    inItemURL: core_foundation.URLRef,
    inTargetURL: core_foundation.URLRef,
    inRoleMask: LSRolesMask,
    inFlags: LSAcceptanceFlags,
    outAcceptsItem: ?*objc.Boolean,
) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn LSRegisterURL(inURL: core_foundation.URLRef, inUpdate: objc.Boolean) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn LSCopyDefaultRoleHandlerForContentType(inContentType: core_foundation.StringRef, inRole: LSRolesMask) callconv(.C) core_foundation.StringRef;

pub extern "CoreServices" fn LSCopyAllRoleHandlersForContentType(inContentType: core_foundation.StringRef, inRole: LSRolesMask) callconv(.C) core_foundation.ArrayRef;

pub extern "CoreServices" fn LSSetDefaultRoleHandlerForContentType(inContentType: core_foundation.StringRef, inRole: LSRolesMask, inHandlerBundleID: core_foundation.StringRef) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn LSCopyDefaultHandlerForURLScheme(inURLScheme: core_foundation.StringRef) callconv(.C) core_foundation.StringRef;

pub extern "CoreServices" fn LSCopyAllHandlersForURLScheme(inURLScheme: core_foundation.StringRef) callconv(.C) core_foundation.ArrayRef;

pub extern "CoreServices" fn LSSetDefaultHandlerForURLScheme(inURLScheme: core_foundation.StringRef, inHandlerBundleID: core_foundation.StringRef) callconv(.C) objc.OSStatus;

pub const LSRequestedInfo = objc.OptionBits;
pub const LSRequestedInfo_Extension: objc.OptionBits = 1;
pub const LSRequestedInfo_TypeCreator: objc.OptionBits = 2;
pub const LSRequestedInfo_BasicFlagsOnly: objc.OptionBits = 4;
pub const LSRequestedInfo_AppTypeFlags: objc.OptionBits = 8;
pub const LSRequestedInfo_AllFlags: objc.OptionBits = 16;
pub const LSRequestedInfo_IconAndKind: objc.OptionBits = 32;
pub const LSRequestedInfo_ExtensionFlagsOnly: objc.OptionBits = 64;
pub const LSRequestedInfo_AllInfo: objc.OptionBits = -1;

pub const LSItemInfoFlags = objc.OptionBits;
pub const LSItemInfoFlags_IsPlainFile: objc.OptionBits = 1;
pub const LSItemInfoFlags_IsPackage: objc.OptionBits = 2;
pub const LSItemInfoFlags_IsApplication: objc.OptionBits = 4;
pub const LSItemInfoFlags_IsContainer: objc.OptionBits = 8;
pub const LSItemInfoFlags_IsAliasFile: objc.OptionBits = 16;
pub const LSItemInfoFlags_IsSymlink: objc.OptionBits = 32;
pub const LSItemInfoFlags_IsInvisible: objc.OptionBits = 64;
pub const LSItemInfoFlags_IsNativeApp: objc.OptionBits = 128;
pub const LSItemInfoFlags_IsClassicApp: objc.OptionBits = 256;
pub const LSItemInfoFlags_AppPrefersNative: objc.OptionBits = 512;
pub const LSItemInfoFlags_AppPrefersClassic: objc.OptionBits = 1024;
pub const LSItemInfoFlags_AppIsScriptable: objc.OptionBits = 2048;
pub const LSItemInfoFlags_IsVolume: objc.OptionBits = 4096;
pub const LSItemInfoFlags_ExtensionIsHidden: objc.OptionBits = 1048576;

pub const LSItemInfoRecord = extern struct {
    flags: LSItemInfoFlags,
    filetype: objc.OSType,
    creator: objc.OSType,
    extension: core_foundation.StringRef,
};

pub extern "CoreServices" fn LSCopyItemInfoForURL(inURL: core_foundation.URLRef, inWhichInfo: LSRequestedInfo, outItemInfo: ?*LSItemInfoRecord) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn LSCopyItemInfoForRef(inItemRef: ?*FSRef, inWhichInfo: LSRequestedInfo, outItemInfo: ?*LSItemInfoRecord) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn LSGetExtensionInfo(inNameLen: objc.UniCharCount, inNameBuffer: *objc.UniChar, outExtStartIndex: ?*objc.UniCharCount) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn LSCopyDisplayNameForRef(inRef: ?*FSRef, outDisplayName: ?*core_foundation.StringRef) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn LSCopyDisplayNameForURL(inURL: core_foundation.URLRef, outDisplayName: ?*core_foundation.StringRef) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn LSSetExtensionHiddenForRef(inRef: ?*FSRef, inHide: objc.Boolean) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn LSSetExtensionHiddenForURL(inURL: core_foundation.URLRef, inHide: objc.Boolean) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn LSCopyKindStringForRef(inFSRef: ?*FSRef, outKindString: ?*core_foundation.StringRef) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn LSCopyKindStringForURL(inURL: core_foundation.URLRef, outKindString: ?*core_foundation.StringRef) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn LSCopyKindStringForTypeInfo(
    inType: objc.OSType,
    inCreator: objc.OSType,
    inExtension: core_foundation.StringRef,
    outKindString: ?*core_foundation.StringRef,
) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn LSCopyKindStringForMIMEType(inMIMEType: core_foundation.StringRef, outKindString: ?*core_foundation.StringRef) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn LSGetApplicationForItem(
    inItemRef: ?*FSRef,
    inRoleMask: LSRolesMask,
    outAppRef: ?*FSRef,
    outAppURL: ?*core_foundation.URLRef,
) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn LSGetApplicationForInfo(
    inType: objc.OSType,
    inCreator: objc.OSType,
    inExtension: core_foundation.StringRef,
    inRoleMask: LSRolesMask,
    outAppRef: ?*FSRef,
    outAppURL: ?*core_foundation.URLRef,
) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn LSCopyApplicationForMIMEType(inMIMEType: core_foundation.StringRef, inRoleMask: LSRolesMask, outAppURL: ?*core_foundation.URLRef) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn LSGetApplicationForURL(
    inURL: core_foundation.URLRef,
    inRoleMask: LSRolesMask,
    outAppRef: ?*FSRef,
    outAppURL: ?*core_foundation.URLRef,
) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn LSFindApplicationForInfo(
    inCreator: objc.OSType,
    inBundleID: core_foundation.StringRef,
    inName: core_foundation.StringRef,
    outAppRef: ?*FSRef,
    outAppURL: ?*core_foundation.URLRef,
) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn LSCanRefAcceptItem(
    inItemFSRef: ?*FSRef,
    inTargetRef: ?*FSRef,
    inRoleMask: LSRolesMask,
    inFlags: LSAcceptanceFlags,
    outAcceptsItem: ?*objc.Boolean,
) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn LSRegisterFSRef(inRef: ?*FSRef, inUpdate: objc.Boolean) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn LSCopyItemAttribute(
    inItem: ?*FSRef,
    inRoles: LSRolesMask,
    inAttributeName: core_foundation.StringRef,
    outValue: ?*core_foundation.TypeRef,
) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn LSCopyItemAttributes(
    inItem: ?*FSRef,
    inRoles: LSRolesMask,
    inAttributeNames: core_foundation.ArrayRef,
    outValues: ?*core_foundation.DictionaryRef,
) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn LSSetItemAttribute(
    inItem: ?*FSRef,
    inRoles: LSRolesMask,
    inAttributeName: core_foundation.StringRef,
    inValue: core_foundation.TypeRef,
) callconv(.C) objc.OSStatus;

pub const LSHandlerOptions = objc.OptionBits;
pub const LSHandlerOptions_Default: objc.OptionBits = 0;
pub const LSHandlerOptions_IgnoreCreator: objc.OptionBits = 1;

pub extern "CoreServices" fn LSGetHandlerOptionsForContentType(inContentType: core_foundation.StringRef) callconv(.C) LSHandlerOptions;

pub extern "CoreServices" fn LSSetHandlerOptionsForContentType(inContentType: core_foundation.StringRef, inOptions: LSHandlerOptions) callconv(.C) objc.OSStatus;

pub const LSLaunchFlags = objc.OptionBits;
pub const LSLaunchFlags_Defaults: objc.OptionBits = 1;
pub const LSLaunchFlags_AndPrint: objc.OptionBits = 2;
pub const LSLaunchFlags_AndDisplayErrors: objc.OptionBits = 64;
pub const LSLaunchFlags_DontAddToRecents: objc.OptionBits = 256;
pub const LSLaunchFlags_DontSwitch: objc.OptionBits = 512;
pub const LSLaunchFlags_Async: objc.OptionBits = 65536;
pub const LSLaunchFlags_NewInstance: objc.OptionBits = 524288;
pub const LSLaunchFlags_AndHide: objc.OptionBits = 1048576;
pub const LSLaunchFlags_AndHideOthers: objc.OptionBits = 2097152;

pub const LSLaunchURLSpec = extern struct {
    appURL: core_foundation.URLRef,
    itemURLs: core_foundation.ArrayRef,
    passThruParams: ?*AEDesc,
    launchFlags: LSLaunchFlags,
    asyncRefCon: ?*anyopaque,
};

pub extern "CoreServices" fn LSOpenCFURLRef(inURL: core_foundation.URLRef, outLaunchedURL: ?*core_foundation.URLRef) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn LSOpenFromURLSpec(inLaunchSpec: ?*LSLaunchURLSpec, outLaunchedURL: ?*core_foundation.URLRef) callconv(.C) objc.OSStatus;

pub const anon281 = u32;
pub const anon281_LSLaunchInhibitBGOnly: u32 = 128;
pub const anon281_LSLaunchNoParams: u32 = 2048;
pub const anon281_LSLaunchStartClassic: u32 = 131072;
pub const anon281_LSLaunchInClassic: u32 = 262144;
pub const anon281_LSLaunchHasUntrustedContents: u32 = 4194304;

pub const LSLaunchFSRefSpec = extern struct {
    appRef: ?*FSRef,
    numDocs: objc.ItemCount,
    itemRefs: ?*FSRef,
    passThruParams: ?*AEDesc,
    launchFlags: LSLaunchFlags,
    asyncRefCon: ?*anyopaque,
};

pub extern "CoreServices" fn LSOpenFSRef(inRef: ?*FSRef, outLaunchedRef: ?*FSRef) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn LSOpenFromRefSpec(inLaunchSpec: ?*LSLaunchFSRefSpec, outLaunchedRef: ?*FSRef) callconv(.C) objc.OSStatus;

pub const LSApplicationParameters = extern struct {
    version: core_foundation.Index,
    flags: LSLaunchFlags,
    application: ?*FSRef,
    asyncLaunchRefCon: ?*anyopaque,
    environment: core_foundation.DictionaryRef,
    argv: core_foundation.ArrayRef,
    initialEvent: ?*AppleEvent,
};

pub extern "CoreServices" fn LSOpenApplication(appParams: ?*LSApplicationParameters, outPSN: ?*objc.ProcessSerialNumber) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn LSOpenItemsWithRole(
    inItems: ?*FSRef,
    inItemCount: core_foundation.Index,
    inRole: LSRolesMask,
    inAEParam: ?*AEKeyDesc,
    inAppParams: ?*LSApplicationParameters,
    outPSNs: ?*objc.ProcessSerialNumber,
    inMaxPSNCount: core_foundation.Index,
) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn LSOpenURLsWithRole(
    inURLs: core_foundation.ArrayRef,
    inRole: LSRolesMask,
    inAEParam: ?*AEKeyDesc,
    inAppParams: ?*LSApplicationParameters,
    outPSNs: ?*objc.ProcessSerialNumber,
    inMaxPSNCount: core_foundation.Index,
) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn UTTypeCreatePreferredIdentifierForTag(inTagClass: core_foundation.StringRef, inTag: core_foundation.StringRef, inConformingToUTI: core_foundation.StringRef) callconv(.C) core_foundation.StringRef;

pub extern "CoreServices" fn UTTypeCreateAllIdentifiersForTag(inTagClass: core_foundation.StringRef, inTag: core_foundation.StringRef, inConformingToUTI: core_foundation.StringRef) callconv(.C) core_foundation.ArrayRef;

pub extern "CoreServices" fn UTTypeCopyPreferredTagWithClass(inUTI: core_foundation.StringRef, inTagClass: core_foundation.StringRef) callconv(.C) core_foundation.StringRef;

pub extern "CoreServices" fn UTTypeCopyAllTagsWithClass(inUTI: core_foundation.StringRef, inTagClass: core_foundation.StringRef) callconv(.C) core_foundation.ArrayRef;

pub extern "CoreServices" fn UTTypeEqual(inUTI1: core_foundation.StringRef, inUTI2: core_foundation.StringRef) callconv(.C) objc.Boolean;

pub extern "CoreServices" fn UTTypeConformsTo(inUTI: core_foundation.StringRef, inConformsToUTI: core_foundation.StringRef) callconv(.C) objc.Boolean;

pub extern "CoreServices" fn UTTypeCopyDescription(inUTI: core_foundation.StringRef) callconv(.C) core_foundation.StringRef;

pub extern "CoreServices" fn UTTypeIsDeclared(inUTI: core_foundation.StringRef) callconv(.C) objc.Boolean;

pub extern "CoreServices" fn UTTypeIsDynamic(inUTI: core_foundation.StringRef) callconv(.C) objc.Boolean;

pub extern "CoreServices" fn UTTypeCopyDeclaration(inUTI: core_foundation.StringRef) callconv(.C) core_foundation.DictionaryRef;

pub extern "CoreServices" fn UTTypeCopyDeclaringBundleURL(inUTI: core_foundation.StringRef) callconv(.C) core_foundation.URLRef;

pub extern "CoreServices" fn UTCreateStringForOSType(inOSType: objc.OSType) callconv(.C) core_foundation.StringRef;

pub extern "CoreServices" fn UTGetOSTypeFromString(inString: core_foundation.StringRef) callconv(.C) objc.OSType;

pub const __MDItem = extern struct {};

pub const MDItemRef = __MDItem;

pub extern "CoreServices" fn MDItemGetTypeID() callconv(.C) core_foundation.TypeID;

pub extern "CoreServices" fn MDItemCreate(allocator: core_foundation.AllocatorRef, path: core_foundation.StringRef) callconv(.C) MDItemRef;

pub extern "CoreServices" fn MDItemCreateWithURL(allocator: core_foundation.AllocatorRef, url: core_foundation.URLRef) callconv(.C) MDItemRef;

pub extern "CoreServices" fn MDItemsCreateWithURLs(allocator: core_foundation.AllocatorRef, urls: core_foundation.ArrayRef) callconv(.C) core_foundation.ArrayRef;

pub extern "CoreServices" fn MDItemCopyAttribute(item: MDItemRef, name: core_foundation.StringRef) callconv(.C) core_foundation.TypeRef;

pub extern "CoreServices" fn MDItemCopyAttributes(item: MDItemRef, names: core_foundation.ArrayRef) callconv(.C) core_foundation.DictionaryRef;

pub extern "CoreServices" fn MDItemCopyAttributeList(item: MDItemRef) callconv(.C) core_foundation.DictionaryRef;

pub extern "CoreServices" fn MDItemCopyAttributeNames(item: MDItemRef) callconv(.C) core_foundation.ArrayRef;

pub extern "CoreServices" fn MDItemsCopyAttributes(items: core_foundation.ArrayRef, names: core_foundation.ArrayRef) callconv(.C) core_foundation.ArrayRef;

pub extern "CoreServices" fn __MDItemCopyAttributesEllipsis1(item: MDItemRef) callconv(.C) core_foundation.DictionaryRef;

pub const __MDQuery = extern struct {};

pub const MDQueryRef = __MDQuery;

pub const MDQueryOptionFlags = u32;
pub const MDQueryOptionFlags_Synchronous: u32 = 1;
pub const MDQueryOptionFlags_WantsUpdates: u32 = 4;
pub const MDQueryOptionFlags_AllowFSTranslation: u32 = 8;

pub extern "CoreServices" fn MDQueryGetTypeID() callconv(.C) core_foundation.TypeID;

pub extern "CoreServices" fn MDQueryCreate(
    allocator: core_foundation.AllocatorRef,
    queryString: core_foundation.StringRef,
    valueListAttrs: core_foundation.ArrayRef,
    sortingAttrs: core_foundation.ArrayRef,
) callconv(.C) MDQueryRef;

pub extern "CoreServices" fn MDQueryCreateSubset(
    allocator: core_foundation.AllocatorRef,
    query: MDQueryRef,
    queryString: core_foundation.StringRef,
    valueListAttrs: core_foundation.ArrayRef,
    sortingAttrs: core_foundation.ArrayRef,
) callconv(.C) MDQueryRef;

pub extern "CoreServices" fn MDQueryCreateForItems(
    allocator: core_foundation.AllocatorRef,
    queryString: core_foundation.StringRef,
    valueListAttrs: core_foundation.ArrayRef,
    sortingAttrs: core_foundation.ArrayRef,
    items: core_foundation.ArrayRef,
) callconv(.C) MDQueryRef;

pub extern "CoreServices" fn MDQueryCopyQueryString(query: MDQueryRef) callconv(.C) core_foundation.StringRef;

pub extern "CoreServices" fn MDQueryCopyValueListAttributes(query: MDQueryRef) callconv(.C) core_foundation.ArrayRef;

pub extern "CoreServices" fn MDQueryCopySortingAttributes(query: MDQueryRef) callconv(.C) core_foundation.ArrayRef;

pub const MDQueryBatchingParams = extern struct {
    first_max_num: objc.size_t,
    first_max_ms: objc.size_t,
    progress_max_num: objc.size_t,
    progress_max_ms: objc.size_t,
    update_max_num: objc.size_t,
    update_max_ms: objc.size_t,
};

pub extern "CoreServices" fn MDQueryGetBatchingParameters(query: MDQueryRef) callconv(.C) MDQueryBatchingParams;

pub extern "CoreServices" fn MDQuerySetBatchingParameters(query: MDQueryRef, params: MDQueryBatchingParams) callconv(.C) void;

pub const MDQueryCreateResultFunction = ?*const fn (MDQueryRef, MDItemRef, ?*anyopaque) callconv(.C) ?*anyopaque;

pub extern "CoreServices" fn MDQuerySetCreateResultFunction(
    query: MDQueryRef,
    func: MDQueryCreateResultFunction,
    context: ?*anyopaque,
    cb: ?*core_foundation.ArrayCallBacks,
) callconv(.C) void;

pub const MDQueryCreateValueFunction = ?*const fn (
    MDQueryRef,
    core_foundation.StringRef,
    core_foundation.TypeRef,
    ?*anyopaque,
) callconv(.C) ?*anyopaque;

pub extern "CoreServices" fn MDQuerySetCreateValueFunction(
    query: MDQueryRef,
    func: MDQueryCreateValueFunction,
    context: ?*anyopaque,
    cb: ?*core_foundation.ArrayCallBacks,
) callconv(.C) void;

pub extern "CoreServices" fn MDQuerySetDispatchQueue(query: MDQueryRef, queue: objc.dispatch_queue_t) callconv(.C) void;

pub extern "CoreServices" fn MDQueryExecute(query: MDQueryRef, optionFlags: core_foundation.OptionFlags) callconv(.C) objc.Boolean;

pub extern "CoreServices" fn MDQueryStop(query: MDQueryRef) callconv(.C) void;

pub extern "CoreServices" fn MDQueryDisableUpdates(query: MDQueryRef) callconv(.C) void;

pub extern "CoreServices" fn MDQueryEnableUpdates(query: MDQueryRef) callconv(.C) void;

pub extern "CoreServices" fn MDQueryIsGatheringComplete(query: MDQueryRef) callconv(.C) objc.Boolean;

pub extern "CoreServices" fn MDQueryGetResultCount(query: MDQueryRef) callconv(.C) core_foundation.Index;

pub extern "CoreServices" fn MDQueryGetResultAtIndex(query: MDQueryRef, idx: core_foundation.Index) callconv(.C) ?*anyopaque;

pub extern "CoreServices" fn MDQueryGetIndexOfResult(query: MDQueryRef, result: ?*anyopaque) callconv(.C) core_foundation.Index;

pub extern "CoreServices" fn MDQueryGetAttributeValueOfResultAtIndex(query: MDQueryRef, name: core_foundation.StringRef, idx: core_foundation.Index) callconv(.C) ?*anyopaque;

pub extern "CoreServices" fn MDQueryCopyValuesOfAttribute(query: MDQueryRef, name: core_foundation.StringRef) callconv(.C) core_foundation.ArrayRef;

pub extern "CoreServices" fn MDQueryGetCountOfResultsWithAttributeValue(query: MDQueryRef, name: core_foundation.StringRef, value: core_foundation.TypeRef) callconv(.C) core_foundation.Index;

pub extern "CoreServices" fn MDQuerySetSortOrder(query: MDQueryRef, sortingAttrs: core_foundation.ArrayRef) callconv(.C) objc.Boolean;

pub const MDQuerySortOptionFlags = u32;
pub const MDQuerySortOptionFlags_ReverseSortOrderFlag: u32 = 1;

pub extern "CoreServices" fn MDQuerySetSortOptionFlagsForAttribute(query: MDQueryRef, fieldName: core_foundation.StringRef, flags: objc.uint32_t) callconv(.C) objc.Boolean;

pub extern "CoreServices" fn MDQueryGetSortOptionFlagsForAttribute(query: MDQueryRef, fieldName: core_foundation.StringRef) callconv(.C) objc.uint32_t;

pub const MDQuerySortComparatorFunction = core_foundation.ComparisonResult;

pub extern "CoreServices" fn MDQuerySetSortComparator(query: MDQueryRef, comparator: MDQuerySortComparatorFunction, context: ?*anyopaque) callconv(.C) void;

pub extern "CoreServices" fn MDQuerySetSortComparatorBlock(query: MDQueryRef, comparator: *const fn (*core_foundation.TypeRef, *core_foundation.TypeRef) callconv(.C) core_foundation.ComparisonResult) callconv(.C) void;

pub extern "CoreServices" fn MDQuerySetSearchScope(query: MDQueryRef, scopeDirectories: core_foundation.ArrayRef, scopeOptions: objc.OptionBits) callconv(.C) void;

pub extern "CoreServices" fn MDQuerySetMaxCount(query: MDQueryRef, size: core_foundation.Index) callconv(.C) void;

pub const __MDLabel = extern struct {};

pub const MDLabelRef = __MDLabel;

pub extern "CoreServices" fn MDLabelGetTypeID() callconv(.C) core_foundation.TypeID;

pub extern "CoreServices" fn MDItemCopyLabels(item: MDItemRef) callconv(.C) core_foundation.ArrayRef;

pub extern "CoreServices" fn MDItemSetLabel(item: MDItemRef, label: MDLabelRef) callconv(.C) objc.Boolean;

pub extern "CoreServices" fn MDItemRemoveLabel(item: MDItemRef, label: MDLabelRef) callconv(.C) objc.Boolean;

pub const MDLabelDomain = u32;
pub const MDLabelDomain_UserDomain: u32 = 0;
pub const MDLabelDomain_LocalDomain: u32 = 1;

pub extern "CoreServices" fn MDLabelCreate(
    allocator: core_foundation.AllocatorRef,
    displayName: core_foundation.StringRef,
    kind: core_foundation.StringRef,
    domain: MDLabelDomain,
) callconv(.C) MDLabelRef;

pub extern "CoreServices" fn MDLabelCopyAttribute(label: MDLabelRef, name: core_foundation.StringRef) callconv(.C) core_foundation.TypeRef;

pub extern "CoreServices" fn MDLabelCopyAttributeName(label: MDLabelRef) callconv(.C) core_foundation.StringRef;

pub extern "CoreServices" fn MDLabelDelete(label: MDLabelRef) callconv(.C) objc.Boolean;

pub extern "CoreServices" fn MDLabelSetAttributes(label: MDLabelRef, attrs: core_foundation.DictionaryRef) callconv(.C) objc.Boolean;

pub extern "CoreServices" fn MDCopyLabelKinds() callconv(.C) core_foundation.ArrayRef;

pub extern "CoreServices" fn MDCopyLabelsMatchingExpression(simpleQueryString: core_foundation.StringRef) callconv(.C) core_foundation.ArrayRef;

pub extern "CoreServices" fn MDCopyLabelsWithKind(kind: core_foundation.StringRef) callconv(.C) core_foundation.ArrayRef;

pub extern "CoreServices" fn MDCopyLabelWithUUID(labelUUID: core_foundation.UUIDRef) callconv(.C) MDLabelRef;

pub extern "CoreServices" fn MDSchemaCopyAttributesForContentType(contentTypeUTI: core_foundation.StringRef) callconv(.C) core_foundation.DictionaryRef;

pub extern "CoreServices" fn MDSchemaCopyMetaAttributesForAttribute(name: core_foundation.StringRef) callconv(.C) core_foundation.DictionaryRef;

pub extern "CoreServices" fn MDSchemaCopyAllAttributes() callconv(.C) core_foundation.ArrayRef;

pub extern "CoreServices" fn MDSchemaCopyDisplayNameForAttribute(name: core_foundation.StringRef) callconv(.C) core_foundation.StringRef;

pub extern "CoreServices" fn MDSchemaCopyDisplayDescriptionForAttribute(name: core_foundation.StringRef) callconv(.C) core_foundation.StringRef;

pub const SKDocumentRef = core_foundation.TypeRef;

pub extern "CoreServices" fn SKDocumentGetTypeID() callconv(.C) core_foundation.TypeID;

pub extern "CoreServices" fn SKDocumentCreateWithURL(inURL: core_foundation.URLRef) callconv(.C) SKDocumentRef;

pub extern "CoreServices" fn SKDocumentCopyURL(inDocument: SKDocumentRef) callconv(.C) core_foundation.URLRef;

pub extern "CoreServices" fn SKDocumentCreate(inScheme: core_foundation.StringRef, inParent: SKDocumentRef, inName: core_foundation.StringRef) callconv(.C) SKDocumentRef;

pub extern "CoreServices" fn SKDocumentGetSchemeName(inDocument: SKDocumentRef) callconv(.C) core_foundation.StringRef;

pub extern "CoreServices" fn SKDocumentGetName(inDocument: SKDocumentRef) callconv(.C) core_foundation.StringRef;

pub extern "CoreServices" fn SKDocumentGetParent(inDocument: SKDocumentRef) callconv(.C) SKDocumentRef;

pub const __SKIndex = extern struct {};

pub const SKIndexRef = __SKIndex;

pub extern "CoreServices" fn SKIndexGetTypeID() callconv(.C) core_foundation.TypeID;

pub const __SKIndexDocumentIterator = extern struct {};

pub const SKIndexDocumentIteratorRef = __SKIndexDocumentIterator;

pub extern "CoreServices" fn SKIndexDocumentIteratorGetTypeID() callconv(.C) core_foundation.TypeID;

pub const SKIndexType = u32;
pub const SKIndexType_Unknown: u32 = 0;
pub const SKIndexType_Inverted: u32 = 1;
pub const SKIndexType_Vector: u32 = 2;
pub const SKIndexType_InvertedVector: u32 = 3;

pub const SKDocumentIndexState = u32;
pub const SKDocumentIndexState_StateNotIndexed: u32 = 0;
pub const SKDocumentIndexState_StateIndexed: u32 = 1;
pub const SKDocumentIndexState_StateAddPending: u32 = 2;
pub const SKDocumentIndexState_StateDeletePending: u32 = 3;

pub extern "CoreServices" fn SKIndexCreateWithURL(
    inURL: core_foundation.URLRef,
    inIndexName: core_foundation.StringRef,
    inIndexType: SKIndexType,
    inAnalysisProperties: core_foundation.DictionaryRef,
) callconv(.C) SKIndexRef;

pub extern "CoreServices" fn SKIndexOpenWithURL(inURL: core_foundation.URLRef, inIndexName: core_foundation.StringRef, inWriteAccess: objc.Boolean) callconv(.C) SKIndexRef;

pub extern "CoreServices" fn SKIndexCreateWithMutableData(
    inData: core_foundation.MutableDataRef,
    inIndexName: core_foundation.StringRef,
    inIndexType: SKIndexType,
    inAnalysisProperties: core_foundation.DictionaryRef,
) callconv(.C) SKIndexRef;

pub extern "CoreServices" fn SKIndexOpenWithData(inData: core_foundation.DataRef, inIndexName: core_foundation.StringRef) callconv(.C) SKIndexRef;

pub extern "CoreServices" fn SKIndexOpenWithMutableData(inData: core_foundation.MutableDataRef, inIndexName: core_foundation.StringRef) callconv(.C) SKIndexRef;

pub extern "CoreServices" fn SKIndexFlush(inIndex: SKIndexRef) callconv(.C) objc.Boolean;

pub extern "CoreServices" fn SKIndexSetMaximumBytesBeforeFlush(inIndex: SKIndexRef, inBytesForUpdate: core_foundation.Index) callconv(.C) void;

pub extern "CoreServices" fn SKIndexGetMaximumBytesBeforeFlush(inIndex: SKIndexRef) callconv(.C) core_foundation.Index;

pub extern "CoreServices" fn SKIndexCompact(inIndex: SKIndexRef) callconv(.C) objc.Boolean;

pub extern "CoreServices" fn SKIndexGetIndexType(inIndex: SKIndexRef) callconv(.C) SKIndexType;

pub extern "CoreServices" fn SKIndexGetAnalysisProperties(inIndex: SKIndexRef) callconv(.C) core_foundation.DictionaryRef;

pub extern "CoreServices" fn SKIndexGetDocumentCount(inIndex: SKIndexRef) callconv(.C) core_foundation.Index;

pub extern "CoreServices" fn SKIndexClose(inIndex: SKIndexRef) callconv(.C) void;

pub const SKDocumentID = core_foundation.Index;

pub extern "CoreServices" fn SKIndexAddDocumentWithText(
    inIndex: SKIndexRef,
    inDocument: SKDocumentRef,
    inDocumentText: core_foundation.StringRef,
    inCanReplace: objc.Boolean,
) callconv(.C) objc.Boolean;

pub extern "CoreServices" fn SKIndexAddDocument(
    inIndex: SKIndexRef,
    inDocument: SKDocumentRef,
    inMIMETypeHint: core_foundation.StringRef,
    inCanReplace: objc.Boolean,
) callconv(.C) objc.Boolean;

pub extern "CoreServices" fn SKIndexRemoveDocument(inIndex: SKIndexRef, inDocument: SKDocumentRef) callconv(.C) objc.Boolean;

pub extern "CoreServices" fn SKIndexCopyDocumentProperties(inIndex: SKIndexRef, inDocument: SKDocumentRef) callconv(.C) core_foundation.DictionaryRef;

pub extern "CoreServices" fn SKIndexSetDocumentProperties(inIndex: SKIndexRef, inDocument: SKDocumentRef, inProperties: core_foundation.DictionaryRef) callconv(.C) void;

pub extern "CoreServices" fn SKIndexGetDocumentState(inIndex: SKIndexRef, inDocument: SKDocumentRef) callconv(.C) SKDocumentIndexState;

pub extern "CoreServices" fn SKIndexGetDocumentID(inIndex: SKIndexRef, inDocument: SKDocumentRef) callconv(.C) SKDocumentID;

pub extern "CoreServices" fn SKIndexCopyDocumentForDocumentID(inIndex: SKIndexRef, inDocumentID: SKDocumentID) callconv(.C) SKDocumentRef;

pub extern "CoreServices" fn SKIndexRenameDocument(inIndex: SKIndexRef, inDocument: SKDocumentRef, inNewName: core_foundation.StringRef) callconv(.C) objc.Boolean;

pub extern "CoreServices" fn SKIndexMoveDocument(inIndex: SKIndexRef, inDocument: SKDocumentRef, inNewParent: SKDocumentRef) callconv(.C) objc.Boolean;

pub extern "CoreServices" fn SKIndexDocumentIteratorCreate(inIndex: SKIndexRef, inParentDocument: SKDocumentRef) callconv(.C) SKIndexDocumentIteratorRef;

pub extern "CoreServices" fn SKIndexDocumentIteratorCopyNext(inIterator: SKIndexDocumentIteratorRef) callconv(.C) SKDocumentRef;

pub extern "CoreServices" fn SKIndexGetMaximumDocumentID(inIndex: SKIndexRef) callconv(.C) SKDocumentID;

pub extern "CoreServices" fn SKIndexGetDocumentTermCount(inIndex: SKIndexRef, inDocumentID: SKDocumentID) callconv(.C) core_foundation.Index;

pub extern "CoreServices" fn SKIndexCopyTermIDArrayForDocumentID(inIndex: SKIndexRef, inDocumentID: SKDocumentID) callconv(.C) core_foundation.ArrayRef;

pub extern "CoreServices" fn SKIndexGetDocumentTermFrequency(inIndex: SKIndexRef, inDocumentID: SKDocumentID, inTermID: core_foundation.Index) callconv(.C) core_foundation.Index;

pub extern "CoreServices" fn SKIndexGetMaximumTermID(inIndex: SKIndexRef) callconv(.C) core_foundation.Index;

pub extern "CoreServices" fn SKIndexGetTermDocumentCount(inIndex: SKIndexRef, inTermID: core_foundation.Index) callconv(.C) core_foundation.Index;

pub extern "CoreServices" fn SKIndexCopyDocumentIDArrayForTermID(inIndex: SKIndexRef, inTermID: core_foundation.Index) callconv(.C) core_foundation.ArrayRef;

pub extern "CoreServices" fn SKIndexCopyTermStringForTermID(inIndex: SKIndexRef, inTermID: core_foundation.Index) callconv(.C) core_foundation.StringRef;

pub extern "CoreServices" fn SKIndexGetTermIDForTermString(inIndex: SKIndexRef, inTermString: core_foundation.StringRef) callconv(.C) core_foundation.Index;

pub extern "CoreServices" fn SKLoadDefaultExtractorPlugIns() callconv(.C) void;

pub const __SKSearch = extern struct {};

pub const SKSearchRef = __SKSearch;

pub extern "CoreServices" fn SKSearchGetTypeID() callconv(.C) core_foundation.TypeID;

pub const SKSearchOptions = objc.UInt32;

pub extern "CoreServices" fn SKSearchCreate(inIndex: SKIndexRef, inQuery: core_foundation.StringRef, inSearchOptions: SKSearchOptions) callconv(.C) SKSearchRef;

pub extern "CoreServices" fn SKSearchCancel(inSearch: SKSearchRef) callconv(.C) void;

pub extern "CoreServices" fn SKSearchFindMatches(
    inSearch: SKSearchRef,
    inMaximumCount: core_foundation.Index,
    outDocumentIDsArray: ?*SKDocumentID,
    outScoresArray: ?*f32,
    maximumTime: core_foundation.TimeInterval,
    outFoundCount: ?*core_foundation.Index,
) callconv(.C) objc.Boolean;

pub extern "CoreServices" fn SKIndexCopyInfoForDocumentIDs(
    inIndex: SKIndexRef,
    inCount: core_foundation.Index,
    inDocumentIDsArray: ?*SKDocumentID,
    outNamesArray: ?*core_foundation.StringRef,
    outParentIDsArray: ?*SKDocumentID,
) callconv(.C) void;

pub extern "CoreServices" fn SKIndexCopyDocumentRefsForDocumentIDs(
    inIndex: SKIndexRef,
    inCount: core_foundation.Index,
    inDocumentIDsArray: ?*SKDocumentID,
    outDocumentRefsArray: ?*SKDocumentRef,
) callconv(.C) void;

pub extern "CoreServices" fn SKIndexCopyDocumentURLsForDocumentIDs(
    inIndex: SKIndexRef,
    inCount: core_foundation.Index,
    inDocumentIDsArray: ?*SKDocumentID,
    outDocumentURLsArray: ?*core_foundation.URLRef,
) callconv(.C) void;

pub const __SKSearchGroup = extern struct {};

pub const SKSearchGroupRef = __SKSearchGroup;

pub extern "CoreServices" fn SKSearchGroupGetTypeID() callconv(.C) core_foundation.TypeID;

pub const __SKSearchResults = extern struct {};

pub const SKSearchResultsRef = __SKSearchResults;

pub extern "CoreServices" fn SKSearchResultsGetTypeID() callconv(.C) core_foundation.TypeID;

pub const SKSearchType = u32;
pub const SKSearchType_Ranked: u32 = 0;
pub const SKSearchType_BooleanRanked: u32 = 1;
pub const SKSearchType_RequiredRanked: u32 = 2;
pub const SKSearchType_PrefixRanked: u32 = 3;

pub const SKSearchResultsFilterCallBack = objc.Boolean;

pub extern "CoreServices" fn SKSearchGroupCreate(inArrayOfInIndexes: core_foundation.ArrayRef) callconv(.C) SKSearchGroupRef;

pub extern "CoreServices" fn SKSearchGroupCopyIndexes(inSearchGroup: SKSearchGroupRef) callconv(.C) core_foundation.ArrayRef;

pub extern "CoreServices" fn SKSearchResultsCreateWithQuery(
    inSearchGroup: SKSearchGroupRef,
    inQuery: core_foundation.StringRef,
    inSearchType: SKSearchType,
    inMaxFoundDocuments: core_foundation.Index,
    inContext: ?*anyopaque,
    inFilterCallBack: SKSearchResultsFilterCallBack,
) callconv(.C) SKSearchResultsRef;

pub extern "CoreServices" fn SKSearchResultsCreateWithDocuments(
    inSearchGroup: SKSearchGroupRef,
    inExampleDocuments: core_foundation.ArrayRef,
    inMaxFoundDocuments: core_foundation.Index,
    inContext: ?*anyopaque,
    inFilterCallBack: SKSearchResultsFilterCallBack,
) callconv(.C) SKSearchResultsRef;

pub extern "CoreServices" fn SKSearchResultsGetCount(inSearchResults: SKSearchResultsRef) callconv(.C) core_foundation.Index;

pub extern "CoreServices" fn SKSearchResultsGetInfoInRange(
    inSearchResults: SKSearchResultsRef,
    inRange: core_foundation.Range,
    outDocumentsArray: ?*SKDocumentRef,
    outIndexesArray: ?*SKIndexRef,
    outScoresArray: ?*f32,
) callconv(.C) core_foundation.Index;

pub extern "CoreServices" fn SKSearchResultsCopyMatchingTerms(inSearchResults: SKSearchResultsRef, inItem: core_foundation.Index) callconv(.C) core_foundation.ArrayRef;

pub const __SKSummary = extern struct {};

pub const SKSummaryRef = __SKSummary;

pub extern "CoreServices" fn SKSummaryGetTypeID() callconv(.C) core_foundation.TypeID;

pub extern "CoreServices" fn SKSummaryCreateWithString(inString: core_foundation.StringRef) callconv(.C) SKSummaryRef;

pub extern "CoreServices" fn SKSummaryGetSentenceCount(summary: SKSummaryRef) callconv(.C) core_foundation.Index;

pub extern "CoreServices" fn SKSummaryGetParagraphCount(summary: SKSummaryRef) callconv(.C) core_foundation.Index;

pub extern "CoreServices" fn SKSummaryCopySentenceAtIndex(summary: SKSummaryRef, i: core_foundation.Index) callconv(.C) core_foundation.StringRef;

pub extern "CoreServices" fn SKSummaryCopyParagraphAtIndex(summary: SKSummaryRef, i: core_foundation.Index) callconv(.C) core_foundation.StringRef;

pub extern "CoreServices" fn SKSummaryCopySentenceSummaryString(summary: SKSummaryRef, numSentences: core_foundation.Index) callconv(.C) core_foundation.StringRef;

pub extern "CoreServices" fn SKSummaryCopyParagraphSummaryString(summary: SKSummaryRef, numParagraphs: core_foundation.Index) callconv(.C) core_foundation.StringRef;

pub extern "CoreServices" fn SKSummaryGetSentenceSummaryInfo(
    summary: SKSummaryRef,
    numSentencesInSummary: core_foundation.Index,
    outRankOrderOfSentences: ?*core_foundation.Index,
    outSentenceIndexOfSentences: ?*core_foundation.Index,
    outParagraphIndexOfSentences: ?*core_foundation.Index,
) callconv(.C) core_foundation.Index;

pub extern "CoreServices" fn SKSummaryGetParagraphSummaryInfo(
    summary: SKSummaryRef,
    numParagraphsInSummary: core_foundation.Index,
    outRankOrderOfParagraphs: ?*core_foundation.Index,
    outParagraphIndexOfParagraphs: ?*core_foundation.Index,
) callconv(.C) core_foundation.Index;

pub const FSEventStreamCreateFlags = objc.UInt32;

pub const anon2061 = u32;
pub const anon2061_FSEventStreamCreateFlagNone: u32 = 0;
pub const anon2061_FSEventStreamCreateFlagUseCFTypes: u32 = 1;
pub const anon2061_FSEventStreamCreateFlagNoDefer: u32 = 2;
pub const anon2061_FSEventStreamCreateFlagWatchRoot: u32 = 4;
pub const anon2061_FSEventStreamCreateFlagIgnoreSelf: u32 = 8;
pub const anon2061_FSEventStreamCreateFlagFileEvents: u32 = 16;
pub const anon2061_FSEventStreamCreateFlagMarkSelf: u32 = 32;
pub const anon2061_FSEventStreamCreateFlagUseExtendedData: u32 = 64;
pub const anon2061_FSEventStreamCreateFlagFullHistory: u32 = 128;
pub const anon2061_FSEventStreamCreateWithDocID: u32 = 256;

pub const FSEventStreamEventFlags = objc.UInt32;

pub const FSEventStreamEventId = objc.UInt64;

pub const anon5761 = u64;
pub const anon5761_FSEventStreamEventIdSinceNow: u64 = -1;

pub const __FSEventStream = extern struct {};

pub const FSEventStreamRef = __FSEventStream;

pub const ConstFSEventStreamRef = __FSEventStream;

pub const FSEventStreamContext = extern struct {
    version: core_foundation.Index,
    info: ?*anyopaque,
    retain: core_foundation.AllocatorRetainCallBack,
    release: core_foundation.AllocatorReleaseCallBack,
    copyDescription: core_foundation.AllocatorCopyDescriptionCallBack,
};

pub const FSEventStreamCallback = ?*const fn (
    ConstFSEventStreamRef,
    ?*anyopaque,
    objc.size_t,
    ?*anyopaque,
    ?*FSEventStreamEventFlags,
    ?*FSEventStreamEventId,
) callconv(.C) void;

pub extern "CoreServices" fn FSEventStreamCreate(
    allocator: core_foundation.AllocatorRef,
    callback: FSEventStreamCallback,
    context: ?*FSEventStreamContext,
    pathsToWatch: core_foundation.ArrayRef,
    sinceWhen: FSEventStreamEventId,
    latency: core_foundation.TimeInterval,
    flags: FSEventStreamCreateFlags,
) callconv(.C) FSEventStreamRef;

pub extern "CoreServices" fn FSEventStreamCreateRelativeToDevice(
    allocator: core_foundation.AllocatorRef,
    callback: FSEventStreamCallback,
    context: ?*FSEventStreamContext,
    deviceToWatch: objc.dev_t,
    pathsToWatchRelativeToDevice: core_foundation.ArrayRef,
    sinceWhen: FSEventStreamEventId,
    latency: core_foundation.TimeInterval,
    flags: FSEventStreamCreateFlags,
) callconv(.C) FSEventStreamRef;

pub extern "CoreServices" fn FSEventStreamGetLatestEventId(streamRef: ConstFSEventStreamRef) callconv(.C) FSEventStreamEventId;

pub extern "CoreServices" fn FSEventStreamGetDeviceBeingWatched(streamRef: ConstFSEventStreamRef) callconv(.C) objc.dev_t;

pub extern "CoreServices" fn FSEventStreamCopyPathsBeingWatched(streamRef: ConstFSEventStreamRef) callconv(.C) core_foundation.ArrayRef;

pub extern "CoreServices" fn FSEventsGetCurrentEventId() callconv(.C) FSEventStreamEventId;

pub extern "CoreServices" fn FSEventsCopyUUIDForDevice(dev: objc.dev_t) callconv(.C) core_foundation.UUIDRef;

pub extern "CoreServices" fn FSEventsGetLastEventIdForDeviceBeforeTime(dev: objc.dev_t, time: core_foundation.AbsoluteTime) callconv(.C) FSEventStreamEventId;

pub extern "CoreServices" fn FSEventsPurgeEventsForDeviceUpToEventId(dev: objc.dev_t, eventId: FSEventStreamEventId) callconv(.C) objc.Boolean;

pub extern "CoreServices" fn FSEventStreamRetain(streamRef: FSEventStreamRef) callconv(.C) void;

pub extern "CoreServices" fn FSEventStreamRelease(streamRef: FSEventStreamRef) callconv(.C) void;

pub extern "CoreServices" fn FSEventStreamScheduleWithRunLoop(streamRef: FSEventStreamRef, runLoop: core_foundation.RunLoopRef, runLoopMode: core_foundation.StringRef) callconv(.C) void;

pub extern "CoreServices" fn FSEventStreamUnscheduleFromRunLoop(streamRef: FSEventStreamRef, runLoop: core_foundation.RunLoopRef, runLoopMode: core_foundation.StringRef) callconv(.C) void;

pub extern "CoreServices" fn FSEventStreamSetDispatchQueue(streamRef: FSEventStreamRef, q: objc.dispatch_queue_t) callconv(.C) void;

pub extern "CoreServices" fn FSEventStreamInvalidate(streamRef: FSEventStreamRef) callconv(.C) void;

pub extern "CoreServices" fn FSEventStreamStart(streamRef: FSEventStreamRef) callconv(.C) objc.Boolean;

pub extern "CoreServices" fn FSEventStreamFlushAsync(streamRef: FSEventStreamRef) callconv(.C) FSEventStreamEventId;

pub extern "CoreServices" fn FSEventStreamFlushSync(streamRef: FSEventStreamRef) callconv(.C) void;

pub extern "CoreServices" fn FSEventStreamStop(streamRef: FSEventStreamRef) callconv(.C) void;

pub extern "CoreServices" fn FSEventStreamShow(streamRef: ConstFSEventStreamRef) callconv(.C) void;

pub extern "CoreServices" fn FSEventStreamCopyDescription(streamRef: ConstFSEventStreamRef) callconv(.C) core_foundation.StringRef;

pub extern "CoreServices" fn FSEventStreamSetExclusionPaths(streamRef: FSEventStreamRef, pathsToExclude: core_foundation.ArrayRef) callconv(.C) objc.Boolean;

pub const OpaqueLSSharedFileListRef = extern struct {};

pub const LSSharedFileListRef = OpaqueLSSharedFileListRef;

pub const OpaqueLSSharedFileListItemRef = extern struct {};

pub const LSSharedFileListItemRef = OpaqueLSSharedFileListItemRef;

pub const LSSharedFileListResolutionFlags = objc.UInt32;

pub const LSSharedFileListChangedProcPtr = ?*const fn (LSSharedFileListRef, ?*anyopaque) callconv(.C) void;

pub extern "CoreServices" fn LSSharedFileListGetTypeID() callconv(.C) core_foundation.TypeID;

pub extern "CoreServices" fn LSSharedFileListItemGetTypeID() callconv(.C) core_foundation.TypeID;

pub extern "CoreServices" fn LSSharedFileListCreate(inAllocator: core_foundation.AllocatorRef, inListType: core_foundation.StringRef, listOptions: core_foundation.TypeRef) callconv(.C) LSSharedFileListRef;

pub extern "CoreServices" fn LSSharedFileListSetAuthorization(inList: LSSharedFileListRef, inAuthorization: security.AuthorizationRef) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn LSSharedFileListAddObserver(
    inList: LSSharedFileListRef,
    inRunloop: core_foundation.RunLoopRef,
    inRunloopMode: core_foundation.StringRef,
    callback: LSSharedFileListChangedProcPtr,
    context: ?*anyopaque,
) callconv(.C) void;

pub extern "CoreServices" fn LSSharedFileListRemoveObserver(
    inList: LSSharedFileListRef,
    inRunloop: core_foundation.RunLoopRef,
    inRunloopMode: core_foundation.StringRef,
    callback: LSSharedFileListChangedProcPtr,
    context: ?*anyopaque,
) callconv(.C) void;

pub extern "CoreServices" fn LSSharedFileListGetSeedValue(inList: LSSharedFileListRef) callconv(.C) objc.UInt32;

pub extern "CoreServices" fn LSSharedFileListCopyProperty(inList: LSSharedFileListRef, inPropertyName: core_foundation.StringRef) callconv(.C) core_foundation.TypeRef;

pub extern "CoreServices" fn LSSharedFileListSetProperty(inList: LSSharedFileListRef, inPropertyName: core_foundation.StringRef, inPropertyData: core_foundation.TypeRef) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn LSSharedFileListCopySnapshot(inList: LSSharedFileListRef, outSnapshotSeed: ?*objc.UInt32) callconv(.C) core_foundation.ArrayRef;

pub extern "CoreServices" fn LSSharedFileListInsertItemURL(
    inList: LSSharedFileListRef,
    insertAfterThisItem: LSSharedFileListItemRef,
    inDisplayName: core_foundation.StringRef,
    inIconRef: IconRef,
    inURL: core_foundation.URLRef,
    inPropertiesToSet: core_foundation.DictionaryRef,
    inPropertiesToClear: core_foundation.ArrayRef,
) callconv(.C) LSSharedFileListItemRef;

pub extern "CoreServices" fn LSSharedFileListInsertItemFSRef(
    inList: LSSharedFileListRef,
    insertAfterThisItem: LSSharedFileListItemRef,
    inDisplayName: core_foundation.StringRef,
    inIconRef: IconRef,
    inFSRef: ?*FSRef,
    inPropertiesToSet: core_foundation.DictionaryRef,
    inPropertiesToClear: core_foundation.ArrayRef,
) callconv(.C) LSSharedFileListItemRef;

pub extern "CoreServices" fn LSSharedFileListItemMove(inList: LSSharedFileListRef, inItem: LSSharedFileListItemRef, inMoveAfterItem: LSSharedFileListItemRef) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn LSSharedFileListItemRemove(inList: LSSharedFileListRef, inItem: LSSharedFileListItemRef) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn LSSharedFileListRemoveAllItems(inList: LSSharedFileListRef) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn LSSharedFileListItemGetID(inItem: LSSharedFileListItemRef) callconv(.C) objc.UInt32;

pub extern "CoreServices" fn LSSharedFileListItemCopyIconRef(inItem: LSSharedFileListItemRef) callconv(.C) IconRef;

pub extern "CoreServices" fn LSSharedFileListItemCopyDisplayName(inItem: LSSharedFileListItemRef) callconv(.C) core_foundation.StringRef;

pub extern "CoreServices" fn LSSharedFileListItemResolve(
    inItem: LSSharedFileListItemRef,
    inFlags: LSSharedFileListResolutionFlags,
    outURL: ?*core_foundation.URLRef,
    outRef: ?*FSRef,
) callconv(.C) objc.OSStatus;

pub extern "CoreServices" fn LSSharedFileListItemCopyResolvedURL(inItem: LSSharedFileListItemRef, inFlags: LSSharedFileListResolutionFlags, outError: ?*core_foundation.ErrorRef) callconv(.C) core_foundation.URLRef;

pub extern "CoreServices" fn LSSharedFileListItemCopyProperty(inItem: LSSharedFileListItemRef, inPropertyName: core_foundation.StringRef) callconv(.C) core_foundation.TypeRef;

pub extern "CoreServices" fn LSSharedFileListItemSetProperty(inItem: LSSharedFileListItemRef, inPropertyName: core_foundation.StringRef, inPropertyData: core_foundation.TypeRef) callconv(.C) objc.OSStatus;
