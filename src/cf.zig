// THIS FILE IS AUTOGENERATED. MODIFICATIONS WILL NOT BE MAINTAINED.

const std = @import("std");
const objc = @import("objc.zig"); // Objective-C Runtime in zig.

pub const __CFString = extern struct {};

pub const Range = extern struct {
    location: Index,
    length: Index,
};

pub const __CFNull = extern struct {};

pub const __CFAllocator = extern struct {};

pub const AllocatorContext = extern struct {
    version: Index,
    info: ?*anyopaque,
    retain: AllocatorRetainCallBack,
    release: AllocatorReleaseCallBack,
    copyDescription: AllocatorCopyDescriptionCallBack,
    allocate: AllocatorAllocateCallBack,
    reallocate: AllocatorReallocateCallBack,
    deallocate: AllocatorDeallocateCallBack,
    preferredSize: AllocatorPreferredSizeCallBack,
};

pub const ArrayCallBacks = extern struct {
    version: Index,
    retain: ArrayRetainCallBack,
    release: ArrayReleaseCallBack,
    copyDescription: ArrayCopyDescriptionCallBack,
    equal: ArrayEqualCallBack,
};

pub const __CFArray = extern struct {};

pub const BagCallBacks = extern struct {
    version: Index,
    retain: BagRetainCallBack,
    release: BagReleaseCallBack,
    copyDescription: BagCopyDescriptionCallBack,
    equal: BagEqualCallBack,
    hash: BagHashCallBack,
};

pub const __CFBag = extern struct {};

pub const BinaryHeapCompareContext = extern struct {
    version: Index,
    info: ?*anyopaque,
    retain: ?*const fn(?*anyopaque) callconv(.C) ?*anyopaque,
    release: ?*const fn(?*anyopaque) callconv(.C) void,
    copyDescription: ?*const fn(?*anyopaque) callconv(.C) StringRef,
};

pub const BinaryHeapCallBacks = extern struct {
    version: Index,
    retain: ?*const fn(AllocatorRef, ?*anyopaque) callconv(.C) ?*anyopaque,
    release: ?*const fn(AllocatorRef, ?*anyopaque) callconv(.C) void,
    copyDescription: ?*const fn(?*anyopaque) callconv(.C) StringRef,
    compare: ?*const fn(?*anyopaque, ?*anyopaque, ?*anyopaque) callconv(.C) ComparisonResult,
};

pub const __CFBinaryHeap = extern struct {};

pub const __CFBitVector = extern struct {};

pub const SwappedFloat32 = extern struct {
    v: objc.uint32_t,
};

pub const SwappedFloat64 = extern struct {
    v: objc.uint64_t,
};

pub const DictionaryKeyCallBacks = extern struct {
    version: Index,
    retain: DictionaryRetainCallBack,
    release: DictionaryReleaseCallBack,
    copyDescription: DictionaryCopyDescriptionCallBack,
    equal: DictionaryEqualCallBack,
    hash: DictionaryHashCallBack,
};

pub const DictionaryValueCallBacks = extern struct {
    version: Index,
    retain: DictionaryRetainCallBack,
    release: DictionaryReleaseCallBack,
    copyDescription: DictionaryCopyDescriptionCallBack,
    equal: DictionaryEqualCallBack,
};

pub const __CFDictionary = extern struct {};

pub const __CFNotificationCenter = extern struct {};

pub const __CFLocale = extern struct {};

pub const __CFDate = extern struct {};

pub const __CFTimeZone = extern struct {};

pub const GregorianDate = extern struct {
    year: objc.SInt32,
    month: objc.SInt8,
    day: objc.SInt8,
    hour: objc.SInt8,
    minute: objc.SInt8,
    second: f64,
};

pub const GregorianUnits = extern struct {
    years: objc.SInt32,
    months: objc.SInt32,
    days: objc.SInt32,
    hours: objc.SInt32,
    minutes: objc.SInt32,
    seconds: f64,
};

pub const __CFData = extern struct {};

pub const __CFCharacterSet = extern struct {};

pub const __CFError = extern struct {};

pub const StringInlineBuffer = extern struct {
    buffer: [64] objc.UniChar,
    theString: StringRef,
    directUniCharBuffer: ?*objc.UniChar,
    directCStringBuffer: ?*i8,
    rangeToBuffer: Range,
    bufferedRangeStart: Index,
    bufferedRangeEnd: Index,
};

pub const __CFCalendar = extern struct {};

pub const CGPoint = extern struct {};

pub const CGSize = extern struct {};

pub const CGVector = extern struct {};

pub const CGRect = extern struct {};

pub const CGAffineTransform = extern struct {
    a: CGFloat,
    b: CGFloat,
    c: CGFloat,
    d: CGFloat,
    tx: CGFloat,
    ty: CGFloat,
};

pub const CGAffineTransformComponents = extern struct {
    scale: CGSize,
    horizontalShear: CGFloat,
    rotation: CGFloat,
    translation: CGVector,
};

pub const __CFDateFormatter = extern struct {};

pub const __CFBoolean = extern struct {};

pub const __CFNumber = extern struct {};

pub const __CFNumberFormatter = extern struct {};

pub const __CFURL = extern struct {};

pub const FSRef = extern struct {};

pub const __CFRunLoop = extern struct {};

pub const __CFRunLoopSource = extern struct {};

pub const __CFRunLoopObserver = extern struct {};

pub const __CFRunLoopTimer = extern struct {};

pub const RunLoopSourceContext = extern struct {
    version: Index,
    info: ?*anyopaque,
    retain: ?*const fn(?*anyopaque) callconv(.C) ?*anyopaque,
    release: ?*const fn(?*anyopaque) callconv(.C) void,
    copyDescription: ?*const fn(?*anyopaque) callconv(.C) StringRef,
    equal: ?*const fn(?*anyopaque, ?*anyopaque) callconv(.C) objc.Boolean,
    hash: ?*const fn(?*anyopaque) callconv(.C) HashCode,
    schedule: ?*const fn(?*anyopaque, RunLoopRef, RunLoopMode) callconv(.C) void,
    cancel: ?*const fn(?*anyopaque, RunLoopRef, RunLoopMode) callconv(.C) void,
    perform: ?*const fn(?*anyopaque) callconv(.C) void,
};

pub const RunLoopSourceContext1 = extern struct {
    version: Index,
    info: ?*anyopaque,
    retain: ?*const fn(?*anyopaque) callconv(.C) ?*anyopaque,
    release: ?*const fn(?*anyopaque) callconv(.C) void,
    copyDescription: ?*const fn(?*anyopaque) callconv(.C) StringRef,
    equal: ?*const fn(?*anyopaque, ?*anyopaque) callconv(.C) objc.Boolean,
    hash: ?*const fn(?*anyopaque) callconv(.C) HashCode,
    getPort: ?*const fn(?*anyopaque) callconv(.C) objc.mach_port_t,
    perform: ?*const fn(?*anyopaque, Index, AllocatorRef, ?*anyopaque, ) callconv(.C) ?*anyopaque,
};

pub const RunLoopObserverContext = extern struct {
    version: Index,
    info: ?*anyopaque,
    retain: ?*const fn(?*anyopaque) callconv(.C) ?*anyopaque,
    release: ?*const fn(?*anyopaque) callconv(.C) void,
    copyDescription: ?*const fn(?*anyopaque) callconv(.C) StringRef,
};

pub const RunLoopTimerContext = extern struct {
    version: Index,
    info: ?*anyopaque,
    retain: ?*const fn(?*anyopaque) callconv(.C) ?*anyopaque,
    release: ?*const fn(?*anyopaque) callconv(.C) void,
    copyDescription: ?*const fn(?*anyopaque) callconv(.C) StringRef,
};

pub const __CFSocket = extern struct {};

pub const SocketSignature = extern struct {
    protocolFamily: objc.SInt32,
    socketType: objc.SInt32,
    protocol: objc.SInt32,
    address: DataRef,
};

pub const SocketContext = extern struct {
    version: Index,
    info: ?*anyopaque,
    retain: ?*const fn(?*anyopaque) callconv(.C) ?*anyopaque,
    release: ?*const fn(?*anyopaque) callconv(.C) void,
    copyDescription: ?*const fn(?*anyopaque) callconv(.C) StringRef,
};

pub const StreamError = extern struct {
    domain: Index,
    @"error": objc.SInt32,
};

pub const StreamClientContext = extern struct {
    version: Index,
    info: ?*anyopaque,
    retain: ?*const fn(?*anyopaque) callconv(.C) ?*anyopaque,
    release: ?*const fn(?*anyopaque) callconv(.C) void,
    copyDescription: ?*const fn(?*anyopaque) callconv(.C) StringRef,
};

pub const __CFReadStream = extern struct {};

pub const __CFWriteStream = extern struct {};

pub const SetCallBacks = extern struct {
    version: Index,
    retain: SetRetainCallBack,
    release: SetReleaseCallBack,
    copyDescription: SetCopyDescriptionCallBack,
    equal: SetEqualCallBack,
    hash: SetHashCallBack,
};

pub const __CFSet = extern struct {};

pub const TreeContext = extern struct {
    version: Index,
    info: ?*anyopaque,
    retain: TreeRetainCallBack,
    release: TreeReleaseCallBack,
    copyDescription: TreeCopyDescriptionCallBack,
};

pub const __CFTree = extern struct {};

pub const __CFUUID = extern struct {};

pub const UUIDBytes = extern struct {
    byte0: objc.UInt8,
    byte1: objc.UInt8,
    byte2: objc.UInt8,
    byte3: objc.UInt8,
    byte4: objc.UInt8,
    byte5: objc.UInt8,
    byte6: objc.UInt8,
    byte7: objc.UInt8,
    byte8: objc.UInt8,
    byte9: objc.UInt8,
    byte10: objc.UInt8,
    byte11: objc.UInt8,
    byte12: objc.UInt8,
    byte13: objc.UInt8,
    byte14: objc.UInt8,
    byte15: objc.UInt8,
};

pub const __CFBundle = extern struct {};

pub const __CFMessagePort = extern struct {};

pub const MessagePortContext = extern struct {
    version: Index,
    info: ?*anyopaque,
    retain: ?*const fn(?*anyopaque) callconv(.C) ?*anyopaque,
    release: ?*const fn(?*anyopaque) callconv(.C) void,
    copyDescription: ?*const fn(?*anyopaque) callconv(.C) StringRef,
};

pub const __CFPlugInInstance = extern struct {};

pub const __CFMachPort = extern struct {};

pub const MachPortContext = extern struct {
    version: Index,
    info: ?*anyopaque,
    retain: ?*const fn(?*anyopaque) callconv(.C) ?*anyopaque,
    release: ?*const fn(?*anyopaque) callconv(.C) void,
    copyDescription: ?*const fn(?*anyopaque) callconv(.C) StringRef,
};

pub const __CFAttributedString = extern struct {};

pub const __CFURLEnumerator = extern struct {};

pub const __CFFileSecurity = extern struct {};

pub const __CFStringTokenizer = extern struct {};

pub const __CFFileDescriptor = extern struct {};

pub const FileDescriptorContext = extern struct {
    version: Index,
    info: ?*anyopaque,
    retain: ?*const fn(?*anyopaque) callconv(.C) ?*anyopaque,
    release: ?*const fn(?*anyopaque) callconv(.C) void,
    copyDescription: ?*const fn(?*anyopaque) callconv(.C) StringRef,
};

pub const __CFUserNotification = extern struct {};

pub const __CFXMLNode = extern struct {};

pub const XMLElementInfo = extern struct {
    attributes: DictionaryRef,
    attributeOrder: ArrayRef,
    isEmpty: objc.Boolean,
    _reserved: [3] i8,
};

pub const XMLProcessingInstructionInfo = extern struct {
    dataString: StringRef,
};

pub const XMLDocumentInfo = extern struct {
    sourceURL: URLRef,
    encoding: StringEncoding,
};

pub const XMLExternalID = extern struct {
    systemID: URLRef,
    publicID: StringRef,
};

pub const XMLDocumentTypeInfo = extern struct {
    externalID: XMLExternalID,
};

pub const XMLNotationInfo = extern struct {
    externalID: XMLExternalID,
};

pub const XMLElementTypeDeclarationInfo = extern struct {
    contentDescription: StringRef,
};

pub const XMLAttributeDeclarationInfo = extern struct {
    attributeName: StringRef,
    typeString: StringRef,
    defaultString: StringRef,
};

pub const XMLAttributeListDeclarationInfo = extern struct {
    numberOfAttributes: Index,
    attributes: ?*XMLAttributeDeclarationInfo,
};

pub const XMLEntityInfo = extern struct {
    entityType: XMLEntityTypeCode,
    replacementText: StringRef,
    entityID: XMLExternalID,
    notationName: StringRef,
};

pub const XMLEntityReferenceInfo = extern struct {
    entityType: XMLEntityTypeCode,
};

pub const __CFXMLParser = extern struct {};

pub const XMLParserCallBacks = extern struct {
    version: Index,
    createXMLStructure: XMLParserCreateXMLStructureCallBack,
    addChild: XMLParserAddChildCallBack,
    endXMLStructure: XMLParserEndXMLStructureCallBack,
    resolveExternalEntity: XMLParserResolveExternalEntityCallBack,
    handleError: XMLParserHandleErrorCallBack,
};

pub const XMLParserContext = extern struct {
    version: Index,
    info: ?*anyopaque,
    retain: XMLParserRetainCallBack,
    release: XMLParserReleaseCallBack,
    copyDescription: XMLParserCopyDescriptionCallBack,
};

pub const ComparisonResult = enum(Index) {
    kCFCompareLessThan = -1,
    kCFCompareEqualTo = 0,
    kCFCompareGreaterThan = 1,
};

pub const anon701 = enum(OptionFlags) {
    kCFNotificationDeliverImmediately = 1,
    kCFNotificationPostToAllSessions = 2,
};

pub const __CFByteOrder = enum(u32) {
    CFByteOrderUnknown = 0,
    CFByteOrderLittleEndian = 1,
    CFByteOrderBigEndian = 2,
};

pub const NotificationSuspensionBehavior = enum(Index) {
    Drop = 1,
    Coalesce = 2,
    Hold = 3,
    DeliverImmediately = 4,
};

pub const LocaleLanguageDirection = enum(Index) {
    kCFLocaleLanguageDirectionUnknown = 0,
    kCFLocaleLanguageDirectionLeftToRight = 1,
    kCFLocaleLanguageDirectionRightToLeft = 2,
    kCFLocaleLanguageDirectionTopToBottom = 3,
    kCFLocaleLanguageDirectionBottomToTop = 4,
};

pub const GregorianUnitFlags = enum(OptionFlags) {
    kCFGregorianUnitsYears = 1,
    kCFGregorianUnitsMonths = 2,
    kCFGregorianUnitsDays = 4,
    kCFGregorianUnitsHours = 8,
    kCFGregorianUnitsMinutes = 16,
    kCFGregorianUnitsSeconds = 32,
    kCFGregorianAllUnits = 16777215,
};

pub const DataSearchFlags = enum(OptionFlags) {
    kCFDataSearchBackwards = 1,
    kCFDataSearchAnchored = 2,
};

pub const CharacterSetPredefinedSet = enum(Index) {
    kCFCharacterSetControl = 1,
    kCFCharacterSetWhitespace = 2,
    kCFCharacterSetWhitespaceAndNewline = 3,
    kCFCharacterSetDecimalDigit = 4,
    kCFCharacterSetLetter = 5,
    kCFCharacterSetLowercaseLetter = 6,
    kCFCharacterSetUppercaseLetter = 7,
    kCFCharacterSetNonBase = 8,
    kCFCharacterSetDecomposable = 9,
    kCFCharacterSetAlphaNumeric = 10,
    kCFCharacterSetPunctuation = 11,
    kCFCharacterSetCapitalizedLetter = 13,
    kCFCharacterSetSymbol = 14,
    kCFCharacterSetNewline = 15,
    kCFCharacterSetIllegal = 12,
};

pub const StringBuiltInEncodings = enum(StringEncoding) {
    kCFStringEncodingMacRoman = 0,
    kCFStringEncodingWindowsLatin1 = 1280,
    kCFStringEncodingISOLatin1 = 513,
    kCFStringEncodingNextStepLatin = 2817,
    kCFStringEncodingASCII = 1536,
    kCFStringEncodingUnicode = 256,
    kCFStringEncodingUTF8 = 134217984,
    kCFStringEncodingNonLossyASCII = 3071,
    kCFStringEncodingUTF16 = 256,
    kCFStringEncodingUTF16BE = 268435712,
    kCFStringEncodingUTF16LE = 335544576,
    kCFStringEncodingUTF32 = 201326848,
    kCFStringEncodingUTF32BE = 402653440,
    kCFStringEncodingUTF32LE = 469762304,
};

pub const StringCompareFlags = enum(OptionFlags) {
    kCFCompareCaseInsensitive = 1,
    kCFCompareBackwards = 4,
    kCFCompareAnchored = 8,
    kCFCompareNonliteral = 16,
    kCFCompareLocalized = 32,
    kCFCompareNumerically = 64,
    kCFCompareDiacriticInsensitive = 128,
    kCFCompareWidthInsensitive = 256,
    kCFCompareForcedOrdering = 512,
};

pub const StringNormalizationForm = enum(Index) {
    kCFStringNormalizationFormD = 0,
    kCFStringNormalizationFormKD = 1,
    kCFStringNormalizationFormC = 2,
    kCFStringNormalizationFormKC = 3,
};

pub const TimeZoneNameStyle = enum(Index) {
    kCFTimeZoneNameStyleStandard = 0,
    kCFTimeZoneNameStyleShortStandard = 1,
    kCFTimeZoneNameStyleDaylightSaving = 2,
    kCFTimeZoneNameStyleShortDaylightSaving = 3,
    kCFTimeZoneNameStyleGeneric = 4,
    kCFTimeZoneNameStyleShortGeneric = 5,
};

pub const CalendarUnit = enum(OptionFlags) {
    kCFCalendarUnitEra = 2,
    kCFCalendarUnitYear = 4,
    kCFCalendarUnitMonth = 8,
    kCFCalendarUnitDay = 16,
    kCFCalendarUnitHour = 32,
    kCFCalendarUnitMinute = 64,
    kCFCalendarUnitSecond = 128,
    kCFCalendarUnitWeek = 256,
    kCFCalendarUnitWeekday = 512,
    kCFCalendarUnitWeekdayOrdinal = 1024,
    kCFCalendarUnitQuarter = 2048,
    kCFCalendarUnitWeekOfMonth = 4096,
    kCFCalendarUnitWeekOfYear = 8192,
    kCFCalendarUnitYearForWeekOfYear = 16384,
    kCFCalendarUnitDayOfYear = 65536,
};

pub const anon1061 = enum(OptionFlags) {
    kCFCalendarComponentsWrap = 1,
};

pub const CGRectEdge = enum(objc.uint32_t) {
    MinXEdge = 0,
    MinYEdge = 1,
    MaxXEdge = 2,
    MaxYEdge = 3,
};

pub const DateFormatterStyle = enum(Index) {
    kCFDateFormatterNoStyle = 0,
    kCFDateFormatterShortStyle = 1,
    kCFDateFormatterMediumStyle = 2,
    kCFDateFormatterLongStyle = 3,
    kCFDateFormatterFullStyle = 4,
};

pub const ISO8601DateFormatOptions = enum(OptionFlags) {
    kCFISO8601DateFormatWithYear = 1,
    kCFISO8601DateFormatWithMonth = 2,
    kCFISO8601DateFormatWithWeekOfYear = 4,
    kCFISO8601DateFormatWithDay = 16,
    kCFISO8601DateFormatWithTime = 32,
    kCFISO8601DateFormatWithTimeZone = 64,
    kCFISO8601DateFormatWithSpaceBetweenDateAndTime = 128,
    kCFISO8601DateFormatWithDashSeparatorInDate = 256,
    kCFISO8601DateFormatWithColonSeparatorInTime = 512,
    kCFISO8601DateFormatWithColonSeparatorInTimeZone = 1024,
    kCFISO8601DateFormatWithFractionalSeconds = 2048,
    kCFISO8601DateFormatWithFullDate = 275,
    kCFISO8601DateFormatWithFullTime = 1632,
    kCFISO8601DateFormatWithInternetDateTime = 1907,
};

pub const NumberType = enum(Index) {
    kCFNumberSInt8Type = 1,
    kCFNumberSInt16Type = 2,
    kCFNumberSInt32Type = 3,
    kCFNumberSInt64Type = 4,
    kCFNumberFloat32Type = 5,
    kCFNumberFloat64Type = 6,
    kCFNumberCharType = 7,
    kCFNumberShortType = 8,
    kCFNumberIntType = 9,
    kCFNumberLongType = 10,
    kCFNumberLongLongType = 11,
    kCFNumberFloatType = 12,
    kCFNumberDoubleType = 13,
    kCFNumberCFIndexType = 14,
    kCFNumberNSIntegerType = 15,
    kCFNumberCGFloatType = 16,
    kCFNumberMaxType = 16,
};

pub const NumberFormatterStyle = enum(Index) {
    kCFNumberFormatterNoStyle = 0,
    kCFNumberFormatterDecimalStyle = 1,
    kCFNumberFormatterCurrencyStyle = 2,
    kCFNumberFormatterPercentStyle = 3,
    kCFNumberFormatterScientificStyle = 4,
    kCFNumberFormatterSpellOutStyle = 5,
    kCFNumberFormatterOrdinalStyle = 6,
    kCFNumberFormatterCurrencyISOCodeStyle = 8,
    kCFNumberFormatterCurrencyPluralStyle = 9,
    kCFNumberFormatterCurrencyAccountingStyle = 10,
};

pub const NumberFormatterOptionFlags = enum(OptionFlags) {
    kCFNumberFormatterParseIntegersOnly = 1,
};

pub const NumberFormatterRoundingMode = enum(Index) {
    kCFNumberFormatterRoundCeiling = 0,
    kCFNumberFormatterRoundFloor = 1,
    kCFNumberFormatterRoundDown = 2,
    kCFNumberFormatterRoundUp = 3,
    kCFNumberFormatterRoundHalfEven = 4,
    kCFNumberFormatterRoundHalfDown = 5,
    kCFNumberFormatterRoundHalfUp = 6,
};

pub const NumberFormatterPadPosition = enum(Index) {
    kCFNumberFormatterPadBeforePrefix = 0,
    kCFNumberFormatterPadAfterPrefix = 1,
    kCFNumberFormatterPadBeforeSuffix = 2,
    kCFNumberFormatterPadAfterSuffix = 3,
};

pub const URLPathStyle = enum(Index) {
    kCFURLPOSIXPathStyle = 0,
    kCFURLHFSPathStyle = 1,
    kCFURLWindowsPathStyle = 2,
};

pub const URLComponentType = enum(Index) {
    kCFURLComponentScheme = 1,
    kCFURLComponentNetLocation = 2,
    kCFURLComponentPath = 3,
    kCFURLComponentResourceSpecifier = 4,
    kCFURLComponentUser = 5,
    kCFURLComponentPassword = 6,
    kCFURLComponentUserInfo = 7,
    kCFURLComponentHost = 8,
    kCFURLComponentPort = 9,
    kCFURLComponentParameterString = 10,
    kCFURLComponentQuery = 11,
    kCFURLComponentFragment = 12,
};

pub const URLBookmarkCreationOptions = enum(OptionFlags) {
    kCFURLBookmarkCreationMinimalBookmarkMask = 512,
    kCFURLBookmarkCreationSuitableForBookmarkFile = 1024,
    kCFURLBookmarkCreationWithSecurityScope = 2048,
    kCFURLBookmarkCreationSecurityScopeAllowOnlyReadAccess = 4096,
    kCFURLBookmarkCreationWithoutImplicitSecurityScope = 536870912,
    kCFURLBookmarkCreationPreferFileIDResolutionMask = 256,
};

pub const URLBookmarkResolutionOptions = enum(OptionFlags) {
    kCFURLBookmarkResolutionWithoutUIMask = 256,
    kCFURLBookmarkResolutionWithoutMountingMask = 512,
    kCFURLBookmarkResolutionWithSecurityScope = 1024,
    kCFURLBookmarkResolutionWithoutImplicitStartAccessing = 32768,
    kCFBookmarkResolutionWithoutUIMask = 256,
    kCFBookmarkResolutionWithoutMountingMask = 512,
};

pub const RunLoopRunResult = enum(objc.SInt32) {
    kCFRunLoopRunFinished = 1,
    kCFRunLoopRunStopped = 2,
    kCFRunLoopRunTimedOut = 3,
    kCFRunLoopRunHandledSource = 4,
};

pub const RunLoopActivity = enum(OptionFlags) {
    kCFRunLoopEntry = 1,
    kCFRunLoopBeforeTimers = 2,
    kCFRunLoopBeforeSources = 4,
    kCFRunLoopBeforeWaiting = 32,
    kCFRunLoopAfterWaiting = 64,
    kCFRunLoopExit = 128,
    kCFRunLoopAllActivities = 268435455,
};

pub const SocketError = enum(Index) {
    kCFSocketSuccess = 0,
    kCFSocketError = -1,
    kCFSocketTimeout = -2,
};

pub const SocketCallBackType = enum(OptionFlags) {
    kCFSocketNoCallBack = 0,
    kCFSocketReadCallBack = 1,
    kCFSocketAcceptCallBack = 2,
    kCFSocketDataCallBack = 3,
    kCFSocketConnectCallBack = 4,
    kCFSocketWriteCallBack = 8,
};

pub const anon1231 = enum(OptionFlags) {
    kCFSocketAutomaticallyReenableReadCallBack = 1,
    kCFSocketAutomaticallyReenableAcceptCallBack = 2,
    kCFSocketAutomaticallyReenableDataCallBack = 3,
    kCFSocketAutomaticallyReenableWriteCallBack = 8,
    kCFSocketLeaveErrors = 64,
    kCFSocketCloseOnInvalidate = 128,
};

pub const StreamStatus = enum(Index) {
    kCFStreamStatusNotOpen = 0,
    kCFStreamStatusOpening = 1,
    kCFStreamStatusOpen = 2,
    kCFStreamStatusReading = 3,
    kCFStreamStatusWriting = 4,
    kCFStreamStatusAtEnd = 5,
    kCFStreamStatusClosed = 6,
    kCFStreamStatusError = 7,
};

pub const StreamEventType = enum(OptionFlags) {
    kCFStreamEventNone = 0,
    kCFStreamEventOpenCompleted = 1,
    kCFStreamEventHasBytesAvailable = 2,
    kCFStreamEventCanAcceptBytes = 4,
    kCFStreamEventErrorOccurred = 8,
    kCFStreamEventEndEncountered = 16,
};

pub const StreamErrorDomain = enum(Index) {
    kCFStreamErrorDomainCustom = -1,
    kCFStreamErrorDomainPOSIX = 1,
    kCFStreamErrorDomainMacOSStatus = 2,
};

pub const PropertyListMutabilityOptions = enum(OptionFlags) {
    kCFPropertyListImmutable = 0,
    kCFPropertyListMutableContainers = 1,
    kCFPropertyListMutableContainersAndLeaves = 2,
};

pub const PropertyListFormat = enum(Index) {
    kCFPropertyListOpenStepFormat = 1,
    kCFPropertyListXMLFormat_v1_0 = 100,
    kCFPropertyListBinaryFormat_v1_0 = 200,
};

pub const anon1211 = enum(OptionFlags) {
    kCFUserNotificationNoDefaultButtonFlag = 32,
    kCFUserNotificationUseRadioButtonsFlag = 64,
};

pub const StringEncodings = enum(Index) {
    kCFStringEncodingMacJapanese = 1,
    kCFStringEncodingMacChineseTrad = 2,
    kCFStringEncodingMacKorean = 3,
    kCFStringEncodingMacArabic = 4,
    kCFStringEncodingMacHebrew = 5,
    kCFStringEncodingMacGreek = 6,
    kCFStringEncodingMacCyrillic = 7,
    kCFStringEncodingMacDevanagari = 9,
    kCFStringEncodingMacGurmukhi = 10,
    kCFStringEncodingMacGujarati = 11,
    kCFStringEncodingMacOriya = 12,
    kCFStringEncodingMacBengali = 13,
    kCFStringEncodingMacTamil = 14,
    kCFStringEncodingMacTelugu = 15,
    kCFStringEncodingMacKannada = 16,
    kCFStringEncodingMacMalayalam = 17,
    kCFStringEncodingMacSinhalese = 18,
    kCFStringEncodingMacBurmese = 19,
    kCFStringEncodingMacKhmer = 20,
    kCFStringEncodingMacThai = 21,
    kCFStringEncodingMacLaotian = 22,
    kCFStringEncodingMacGeorgian = 23,
    kCFStringEncodingMacArmenian = 24,
    kCFStringEncodingMacChineseSimp = 25,
    kCFStringEncodingMacTibetan = 26,
    kCFStringEncodingMacMongolian = 27,
    kCFStringEncodingMacEthiopic = 28,
    kCFStringEncodingMacCentralEurRoman = 29,
    kCFStringEncodingMacVietnamese = 30,
    kCFStringEncodingMacExtArabic = 31,
    kCFStringEncodingMacSymbol = 33,
    kCFStringEncodingMacDingbats = 34,
    kCFStringEncodingMacTurkish = 35,
    kCFStringEncodingMacCroatian = 36,
    kCFStringEncodingMacIcelandic = 37,
    kCFStringEncodingMacRomanian = 38,
    kCFStringEncodingMacCeltic = 39,
    kCFStringEncodingMacGaelic = 40,
    kCFStringEncodingMacFarsi = 140,
    kCFStringEncodingMacUkrainian = 152,
    kCFStringEncodingMacInuit = 236,
    kCFStringEncodingMacVT100 = 252,
    kCFStringEncodingMacHFS = 255,
    kCFStringEncodingISOLatin2 = 514,
    kCFStringEncodingISOLatin3 = 515,
    kCFStringEncodingISOLatin4 = 516,
    kCFStringEncodingISOLatinCyrillic = 517,
    kCFStringEncodingISOLatinArabic = 518,
    kCFStringEncodingISOLatinGreek = 519,
    kCFStringEncodingISOLatinHebrew = 520,
    kCFStringEncodingISOLatin5 = 521,
    kCFStringEncodingISOLatin6 = 522,
    kCFStringEncodingISOLatinThai = 523,
    kCFStringEncodingISOLatin7 = 525,
    kCFStringEncodingISOLatin8 = 526,
    kCFStringEncodingISOLatin9 = 527,
    kCFStringEncodingISOLatin10 = 528,
    kCFStringEncodingDOSLatinUS = 1024,
    kCFStringEncodingDOSGreek = 1029,
    kCFStringEncodingDOSBalticRim = 1030,
    kCFStringEncodingDOSLatin1 = 1040,
    kCFStringEncodingDOSGreek1 = 1041,
    kCFStringEncodingDOSLatin2 = 1042,
    kCFStringEncodingDOSCyrillic = 1043,
    kCFStringEncodingDOSTurkish = 1044,
    kCFStringEncodingDOSPortuguese = 1045,
    kCFStringEncodingDOSIcelandic = 1046,
    kCFStringEncodingDOSHebrew = 1047,
    kCFStringEncodingDOSCanadianFrench = 1048,
    kCFStringEncodingDOSArabic = 1049,
    kCFStringEncodingDOSNordic = 1050,
    kCFStringEncodingDOSRussian = 1051,
    kCFStringEncodingDOSGreek2 = 1052,
    kCFStringEncodingDOSThai = 1053,
    kCFStringEncodingDOSJapanese = 1056,
    kCFStringEncodingDOSChineseSimplif = 1057,
    kCFStringEncodingDOSKorean = 1058,
    kCFStringEncodingDOSChineseTrad = 1059,
    kCFStringEncodingWindowsLatin2 = 1281,
    kCFStringEncodingWindowsCyrillic = 1282,
    kCFStringEncodingWindowsGreek = 1283,
    kCFStringEncodingWindowsLatin5 = 1284,
    kCFStringEncodingWindowsHebrew = 1285,
    kCFStringEncodingWindowsArabic = 1286,
    kCFStringEncodingWindowsBalticRim = 1287,
    kCFStringEncodingWindowsVietnamese = 1288,
    kCFStringEncodingWindowsKoreanJohab = 1296,
    kCFStringEncodingANSEL = 1537,
    kCFStringEncodingJIS_X0201_76 = 1568,
    kCFStringEncodingJIS_X0208_83 = 1569,
    kCFStringEncodingJIS_X0208_90 = 1570,
    kCFStringEncodingJIS_X0212_90 = 1571,
    kCFStringEncodingJIS_C6226_78 = 1572,
    kCFStringEncodingShiftJIS_X0213 = 1576,
    kCFStringEncodingShiftJIS_X0213_MenKuTen = 1577,
    kCFStringEncodingGB_2312_80 = 1584,
    kCFStringEncodingGBK_95 = 1585,
    kCFStringEncodingGB_18030_2000 = 1586,
    kCFStringEncodingKSC_5601_87 = 1600,
    kCFStringEncodingKSC_5601_92_Johab = 1601,
    kCFStringEncodingCNS_11643_92_P1 = 1617,
    kCFStringEncodingCNS_11643_92_P2 = 1618,
    kCFStringEncodingCNS_11643_92_P3 = 1619,
    kCFStringEncodingISO_2022_JP = 2080,
    kCFStringEncodingISO_2022_JP_2 = 2081,
    kCFStringEncodingISO_2022_JP_1 = 2082,
    kCFStringEncodingISO_2022_JP_3 = 2083,
    kCFStringEncodingISO_2022_CN = 2096,
    kCFStringEncodingISO_2022_CN_EXT = 2097,
    kCFStringEncodingISO_2022_KR = 2112,
    kCFStringEncodingEUC_JP = 2336,
    kCFStringEncodingEUC_CN = 2352,
    kCFStringEncodingEUC_TW = 2353,
    kCFStringEncodingEUC_KR = 2368,
    kCFStringEncodingShiftJIS = 2561,
    kCFStringEncodingKOI8_R = 2562,
    kCFStringEncodingBig5 = 2563,
    kCFStringEncodingMacRomanLatin1 = 2564,
    kCFStringEncodingHZ_GB_2312 = 2565,
    kCFStringEncodingBig5_HKSCS_1999 = 2566,
    kCFStringEncodingVISCII = 2567,
    kCFStringEncodingKOI8_U = 2568,
    kCFStringEncodingBig5_E = 2569,
    kCFStringEncodingNextStepJapanese = 2818,
    kCFStringEncodingEBCDIC_US = 3073,
    kCFStringEncodingEBCDIC_CP037 = 3074,
    kCFStringEncodingUTF7 = 67109120,
    kCFStringEncodingUTF7_IMAP = 2576,
    kCFStringEncodingShiftJIS_X0213_00 = 1576,
};

pub const URLError = enum(Index) {
    kCFURLUnknownError = -10,
    kCFURLUnknownSchemeError = -11,
    kCFURLResourceNotFoundError = -12,
    kCFURLResourceAccessViolationError = -13,
    kCFURLRemoteHostUnavailableError = -14,
    kCFURLImproperArgumentsError = -15,
    kCFURLUnknownPropertyKeyError = -16,
    kCFURLPropertyKeyUnavailableError = -17,
    kCFURLTimeoutError = -18,
};

pub const anon2441 = enum(u32) {
    kCFBundleExecutableArchitectureI386 = 7,
    kCFBundleExecutableArchitecturePPC = 18,
    kCFBundleExecutableArchitectureX86_64 = 16777223,
    kCFBundleExecutableArchitecturePPC64 = 16777234,
    kCFBundleExecutableArchitectureARM64 = 16777228,
};

pub const anon231 = enum(objc.SInt32) {
    kCFMessagePortSuccess = 0,
    kCFMessagePortSendTimeout = -1,
    kCFMessagePortReceiveTimeout = -2,
    kCFMessagePortIsInvalid = -3,
    kCFMessagePortTransportError = -4,
    kCFMessagePortBecameInvalidError = -5,
};

pub const URLEnumeratorOptions = enum(OptionFlags) {
    kCFURLEnumeratorDefaultBehavior = 0,
    kCFURLEnumeratorDescendRecursively = 1,
    kCFURLEnumeratorSkipInvisibles = 2,
    kCFURLEnumeratorGenerateFileReferenceURLs = 4,
    kCFURLEnumeratorSkipPackageContents = 8,
    kCFURLEnumeratorIncludeDirectoriesPreOrder = 16,
    kCFURLEnumeratorIncludeDirectoriesPostOrder = 32,
    kCFURLEnumeratorGenerateRelativePathURLs = 64,
};

pub const URLEnumeratorResult = enum(Index) {
    kCFURLEnumeratorSuccess = 1,
    kCFURLEnumeratorEnd = 2,
    kCFURLEnumeratorError = 3,
    kCFURLEnumeratorDirectoryPostOrderSuccess = 4,
};

pub const FileSecurityClearOptions = enum(OptionFlags) {
    kCFFileSecurityClearOwner = 1,
    kCFFileSecurityClearGroup = 2,
    kCFFileSecurityClearMode = 4,
    kCFFileSecurityClearOwnerUUID = 8,
    kCFFileSecurityClearGroupUUID = 16,
    kCFFileSecurityClearAccessControlList = 32,
};

pub const anon651 = enum(OptionFlags) {
    kCFStringTokenizerUnitWord = 0,
    kCFStringTokenizerUnitSentence = 1,
    kCFStringTokenizerUnitParagraph = 2,
    kCFStringTokenizerUnitLineBreak = 3,
    kCFStringTokenizerUnitWordBoundary = 4,
    kCFStringTokenizerAttributeLatinTranscription = 65536,
    kCFStringTokenizerAttributeLanguage = 131072,
};

pub const StringTokenizerTokenType = enum(OptionFlags) {
    kCFStringTokenizerTokenNone = 0,
    kCFStringTokenizerTokenNormal = 1,
    kCFStringTokenizerTokenHasSubTokensMask = 2,
    kCFStringTokenizerTokenHasDerivedSubTokensMask = 4,
    kCFStringTokenizerTokenHasHasNumbersMask = 8,
    kCFStringTokenizerTokenHasNonLettersMask = 16,
    kCFStringTokenizerTokenIsCJWordMask = 32,
};

pub const anon181 = enum(OptionFlags) {
    kCFFileDescriptorReadCallBack = 1,
    kCFFileDescriptorWriteCallBack = 2,
};

pub const anon1071 = enum(OptionFlags) {
    kCFUserNotificationStopAlertLevel = 0,
    kCFUserNotificationNoteAlertLevel = 1,
    kCFUserNotificationCautionAlertLevel = 2,
    kCFUserNotificationPlainAlertLevel = 3,
};

pub const anon1141 = enum(OptionFlags) {
    kCFUserNotificationDefaultResponse = 0,
    kCFUserNotificationAlternateResponse = 1,
    kCFUserNotificationOtherResponse = 2,
    kCFUserNotificationCancelResponse = 3,
};

pub const anon301 = enum(Index) {
    kCFXMLNodeCurrentVersion = 1,
};

pub const XMLNodeTypeCode = enum(Index) {
    kCFXMLNodeTypeDocument = 1,
    kCFXMLNodeTypeElement = 2,
    kCFXMLNodeTypeAttribute = 3,
    kCFXMLNodeTypeProcessingInstruction = 4,
    kCFXMLNodeTypeComment = 5,
    kCFXMLNodeTypeText = 6,
    kCFXMLNodeTypeCDATASection = 7,
    kCFXMLNodeTypeDocumentFragment = 8,
    kCFXMLNodeTypeEntity = 9,
    kCFXMLNodeTypeEntityReference = 10,
    kCFXMLNodeTypeDocumentType = 11,
    kCFXMLNodeTypeWhitespace = 12,
    kCFXMLNodeTypeNotation = 13,
    kCFXMLNodeTypeElementTypeDeclaration = 14,
    kCFXMLNodeTypeAttributeListDeclaration = 15,
};

pub const XMLEntityTypeCode = enum(Index) {
    kCFXMLEntityTypeParameter = 0,
    kCFXMLEntityTypeParsedInternal = 1,
    kCFXMLEntityTypeParsedExternal = 2,
    kCFXMLEntityTypeUnparsed = 3,
    kCFXMLEntityTypeCharacter = 4,
};

pub const XMLParserOptions = enum(OptionFlags) {
    kCFXMLParserValidateDocument = 1,
    kCFXMLParserSkipMetaData = 2,
    kCFXMLParserReplacePhysicalEntities = 4,
    kCFXMLParserSkipWhitespace = 8,
    kCFXMLParserResolveExternalEntities = 16,
    kCFXMLParserAddImpliedAttributes = 32,
    kCFXMLParserAllOptions = 16777215,
    kCFXMLParserNoOptions = 0,
};

pub const XMLParserStatusCode = enum(Index) {
    kCFXMLStatusParseNotBegun = -2,
    kCFXMLStatusParseInProgress = -1,
    kCFXMLStatusParseSuccessful = 0,
    kCFXMLErrorUnexpectedEOF = 1,
    kCFXMLErrorUnknownEncoding = 2,
    kCFXMLErrorEncodingConversionFailure = 3,
    kCFXMLErrorMalformedProcessingInstruction = 4,
    kCFXMLErrorMalformedDTD = 5,
    kCFXMLErrorMalformedName = 6,
    kCFXMLErrorMalformedCDSect = 7,
    kCFXMLErrorMalformedCloseTag = 8,
    kCFXMLErrorMalformedStartTag = 9,
    kCFXMLErrorMalformedDocument = 10,
    kCFXMLErrorElementlessDocument = 11,
    kCFXMLErrorMalformedComment = 12,
    kCFXMLErrorMalformedCharacterReference = 13,
    kCFXMLErrorMalformedParsedCharacterData = 14,
    kCFXMLErrorNoData = 15,
};

pub const AllocatorTypeID = u64;

pub const TypeID = u64;

pub const OptionFlags = u64;

pub const HashCode = u64;

pub const Index = i64;

pub const TypeRef = ?*anyopaque;

pub const StringRef = ?*__CFString;

pub const MutableStringRef = ?*__CFString;

pub const PropertyListRef = TypeRef;

pub const ComparatorFunction = ?*const fn(?*anyopaque, ?*anyopaque, ?*anyopaque) callconv(.C) ComparisonResult;

pub const NullRef = ?*__CFNull;

pub const AllocatorRef = ?*__CFAllocator;

pub const AllocatorRetainCallBack = ?*const fn(?*anyopaque) callconv(.C) ?*anyopaque;

pub const AllocatorReleaseCallBack = ?*const fn(?*anyopaque) callconv(.C) void;

pub const AllocatorCopyDescriptionCallBack = ?*const fn(?*anyopaque) callconv(.C) StringRef;

pub const AllocatorAllocateCallBack = ?*const fn(Index, OptionFlags, ?*anyopaque) callconv(.C) ?*anyopaque;

pub const AllocatorReallocateCallBack = ?*const fn(?*anyopaque, Index, OptionFlags, ?*anyopaque, ) callconv(.C) ?*anyopaque;

pub const AllocatorDeallocateCallBack = ?*const fn(?*anyopaque, ?*anyopaque) callconv(.C) void;

pub const AllocatorPreferredSizeCallBack = ?*const fn(Index, OptionFlags, ?*anyopaque) callconv(.C) Index;

pub const ArrayRetainCallBack = ?*const fn(AllocatorRef, ?*anyopaque) callconv(.C) ?*anyopaque;

pub const ArrayReleaseCallBack = ?*const fn(AllocatorRef, ?*anyopaque) callconv(.C) void;

pub const ArrayCopyDescriptionCallBack = ?*const fn(?*anyopaque) callconv(.C) StringRef;

pub const ArrayEqualCallBack = ?*const fn(?*anyopaque, ?*anyopaque) callconv(.C) objc.Boolean;

pub const ArrayApplierFunction = ?*const fn(?*anyopaque, ?*anyopaque) callconv(.C) void;

pub const ArrayRef = ?*__CFArray;

pub const MutableArrayRef = ?*__CFArray;

pub const BagRetainCallBack = ?*const fn(AllocatorRef, ?*anyopaque) callconv(.C) ?*anyopaque;

pub const BagReleaseCallBack = ?*const fn(AllocatorRef, ?*anyopaque) callconv(.C) void;

pub const BagCopyDescriptionCallBack = ?*const fn(?*anyopaque) callconv(.C) StringRef;

pub const BagEqualCallBack = ?*const fn(?*anyopaque, ?*anyopaque) callconv(.C) objc.Boolean;

pub const BagHashCallBack = ?*const fn(?*anyopaque) callconv(.C) HashCode;

pub const BagApplierFunction = ?*const fn(?*anyopaque, ?*anyopaque) callconv(.C) void;

pub const BagRef = ?*__CFBag;

pub const MutableBagRef = ?*__CFBag;

pub const BinaryHeapApplierFunction = ?*const fn(?*anyopaque, ?*anyopaque) callconv(.C) void;

pub const BinaryHeapRef = ?*__CFBinaryHeap;

pub const Bit = objc.UInt32;

pub const BitVectorRef = ?*__CFBitVector;

pub const MutableBitVectorRef = ?*__CFBitVector;

pub const ByteOrder = Index;

pub const DictionaryRetainCallBack = ?*const fn(AllocatorRef, ?*anyopaque) callconv(.C) ?*anyopaque;

pub const DictionaryReleaseCallBack = ?*const fn(AllocatorRef, ?*anyopaque) callconv(.C) void;

pub const DictionaryCopyDescriptionCallBack = ?*const fn(?*anyopaque) callconv(.C) StringRef;

pub const DictionaryEqualCallBack = ?*const fn(?*anyopaque, ?*anyopaque) callconv(.C) objc.Boolean;

pub const DictionaryHashCallBack = ?*const fn(?*anyopaque) callconv(.C) HashCode;

pub const DictionaryApplierFunction = ?*const fn(?*anyopaque, ?*anyopaque, ?*anyopaque) callconv(.C) void;

pub const DictionaryRef = ?*__CFDictionary;

pub const MutableDictionaryRef = ?*__CFDictionary;

pub const NotificationName = StringRef;

pub const NotificationCenterRef = ?*__CFNotificationCenter;

pub const NotificationCallback = ?*const fn(NotificationCenterRef, ?*anyopaque, NotificationName, ?*anyopaque, DictionaryRef, ) callconv(.C) void;

pub const LocaleIdentifier = StringRef;

pub const LocaleKey = StringRef;

pub const LocaleRef = ?*__CFLocale;

pub const CalendarIdentifier = StringRef;

pub const TimeInterval = f64;

pub const AbsoluteTime = TimeInterval;

pub const DateRef = ?*__CFDate;

pub const TimeZoneRef = ?*__CFTimeZone;

pub const DataRef = ?*__CFData;

pub const MutableDataRef = ?*__CFData;

pub const CharacterSetRef = ?*__CFCharacterSet;

pub const MutableCharacterSetRef = ?*__CFCharacterSet;

pub const ErrorDomain = StringRef;

pub const ErrorRef = ?*__CFError;

pub const StringEncoding = objc.UInt32;

pub const CalendarRef = ?*__CFCalendar;

pub const CGFloat = f64;

pub const DateFormatterKey = StringRef;

pub const DateFormatterRef = ?*__CFDateFormatter;

pub const BooleanRef = ?*__CFBoolean;

pub const NumberRef = ?*__CFNumber;

pub const NumberFormatterKey = StringRef;

pub const NumberFormatterRef = ?*__CFNumberFormatter;

pub const URLRef = ?*__CFURL;

pub const URLBookmarkFileCreationOptions = OptionFlags;

pub const RunLoopMode = StringRef;

pub const RunLoopRef = ?*__CFRunLoop;

pub const RunLoopSourceRef = ?*__CFRunLoopSource;

pub const RunLoopObserverRef = ?*__CFRunLoopObserver;

pub const RunLoopTimerRef = ?*__CFRunLoopTimer;

pub const RunLoopObserverCallBack = ?*const fn(RunLoopObserverRef, RunLoopActivity, ?*anyopaque) callconv(.C) void;

pub const RunLoopTimerCallBack = ?*const fn(RunLoopTimerRef, ?*anyopaque) callconv(.C) void;

pub const SocketRef = ?*__CFSocket;

pub const SocketCallBack = ?*const fn(SocketRef, SocketCallBackType, DataRef, ?*anyopaque, ?*anyopaque, ) callconv(.C) void;

pub const SocketNativeHandle = i32;

pub const StreamPropertyKey = StringRef;

pub const ReadStreamRef = ?*__CFReadStream;

pub const WriteStreamRef = ?*__CFWriteStream;

pub const ReadStreamClientCallBack = ?*const fn(ReadStreamRef, StreamEventType, ?*anyopaque) callconv(.C) void;

pub const WriteStreamClientCallBack = ?*const fn(WriteStreamRef, StreamEventType, ?*anyopaque) callconv(.C) void;

pub const SetRetainCallBack = ?*const fn(AllocatorRef, ?*anyopaque) callconv(.C) ?*anyopaque;

pub const SetReleaseCallBack = ?*const fn(AllocatorRef, ?*anyopaque) callconv(.C) void;

pub const SetCopyDescriptionCallBack = ?*const fn(?*anyopaque) callconv(.C) StringRef;

pub const SetEqualCallBack = ?*const fn(?*anyopaque, ?*anyopaque) callconv(.C) objc.Boolean;

pub const SetHashCallBack = ?*const fn(?*anyopaque) callconv(.C) HashCode;

pub const SetApplierFunction = ?*const fn(?*anyopaque, ?*anyopaque) callconv(.C) void;

pub const SetRef = ?*__CFSet;

pub const MutableSetRef = ?*__CFSet;

pub const TreeRetainCallBack = ?*const fn(?*anyopaque) callconv(.C) ?*anyopaque;

pub const TreeReleaseCallBack = ?*const fn(?*anyopaque) callconv(.C) void;

pub const TreeCopyDescriptionCallBack = ?*const fn(?*anyopaque) callconv(.C) StringRef;

pub const TreeApplierFunction = ?*const fn(?*anyopaque, ?*anyopaque) callconv(.C) void;

pub const TreeRef = ?*__CFTree;

pub const UUIDRef = ?*__CFUUID;

pub const BundleRef = ?*__CFBundle;

pub const PlugInRef = ?*__CFBundle;

pub const BundleRefNum = i32;

pub const MessagePortRef = ?*__CFMessagePort;

pub const MessagePortCallBack = ?*const fn(MessagePortRef, objc.SInt32, DataRef, ?*anyopaque, ) callconv(.C) DataRef;

pub const MessagePortInvalidationCallBack = ?*const fn(MessagePortRef, ?*anyopaque) callconv(.C) void;

pub const PlugInDynamicRegisterFunction = ?*const fn(PlugInRef) callconv(.C) void;

pub const PlugInUnloadFunction = ?*const fn(PlugInRef) callconv(.C) void;

pub const PlugInFactoryFunction = ?*const fn(AllocatorRef, UUIDRef) callconv(.C) ?*anyopaque;

pub const PlugInInstanceRef = ?*__CFPlugInInstance;

pub const PlugInInstanceGetInterfaceFunction = ?*const fn(PlugInInstanceRef, StringRef, ?*?*anyopaque) callconv(.C) objc.Boolean;

pub const PlugInInstanceDeallocateInstanceDataFunction = ?*const fn(?*anyopaque) callconv(.C) void;

pub const MachPortRef = ?*__CFMachPort;

pub const MachPortCallBack = ?*const fn(MachPortRef, ?*anyopaque, Index, ?*anyopaque, ) callconv(.C) void;

pub const MachPortInvalidationCallBack = ?*const fn(MachPortRef, ?*anyopaque) callconv(.C) void;

pub const AttributedStringRef = ?*__CFAttributedString;

pub const MutableAttributedStringRef = ?*__CFAttributedString;

pub const URLEnumeratorRef = ?*__CFURLEnumerator;

pub const FileSecurityRef = ?*__CFFileSecurity;

pub const StringTokenizerRef = ?*__CFStringTokenizer;

pub const FileDescriptorNativeDescriptor = i32;

pub const FileDescriptorRef = ?*__CFFileDescriptor;

pub const FileDescriptorCallBack = ?*const fn(FileDescriptorRef, OptionFlags, ?*anyopaque) callconv(.C) void;

pub const UserNotificationRef = ?*__CFUserNotification;

pub const UserNotificationCallBack = ?*const fn(UserNotificationRef, OptionFlags) callconv(.C) void;

pub const XMLNodeRef = ?*__CFXMLNode;

pub const XMLTreeRef = TreeRef;

pub const XMLParserRef = ?*__CFXMLParser;

pub const XMLParserCreateXMLStructureCallBack = ?*const fn(XMLParserRef, XMLNodeRef, ?*anyopaque) callconv(.C) ?*anyopaque;

pub const XMLParserAddChildCallBack = ?*const fn(XMLParserRef, ?*anyopaque, ?*anyopaque, ?*anyopaque, ) callconv(.C) void;

pub const XMLParserEndXMLStructureCallBack = ?*const fn(XMLParserRef, ?*anyopaque, ?*anyopaque) callconv(.C) void;

pub const XMLParserResolveExternalEntityCallBack = ?*const fn(XMLParserRef, ?*XMLExternalID, ?*anyopaque) callconv(.C) DataRef;

pub const XMLParserHandleErrorCallBack = ?*const fn(XMLParserRef, XMLParserStatusCode, ?*anyopaque) callconv(.C) objc.Boolean;

pub const XMLParserRetainCallBack = ?*const fn(?*anyopaque) callconv(.C) ?*anyopaque;

pub const XMLParserReleaseCallBack = ?*const fn(?*anyopaque) callconv(.C) void;

pub const XMLParserCopyDescriptionCallBack = ?*const fn(?*anyopaque) callconv(.C) StringRef;

