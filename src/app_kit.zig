// THIS FILE IS AUTOGENERATED. MODIFICATIONS WILL NOT BE MAINTAINED.

const std = @import("std");
const objc = @import("objc.zig"); // Objective-C Runtime in zig.
const core_foundation = @import("core_foundation.zig"); // Framework dependency CoreFoundation.
const foundation = @import("foundation.zig"); // Framework dependency Foundation.
const core_graphics = @import("core_graphics.zig"); // Framework dependency CoreGraphics.
const application_services = @import("application_services.zig"); // Framework dependency ApplicationServices.
const core_text = @import("core_text.zig"); // Framework dependency CoreText.
const core_image = @import("core_image.zig"); // Framework dependency CoreImage.
const opengl = @import("opengl.zig"); // Framework dependency OpenGL.
const core_video = @import("core_video.zig"); // Framework dependency CoreVideo.
const quartz_core = @import("quartz_core.zig"); // Framework dependency QuartzCore.
const core_data = @import("core_data.zig"); // Framework dependency CoreData.

pub const anon651 = enum(u32) {
    NSFontPanelFaceModeMask = 1,
    NSFontPanelSizeModeMask = 2,
    NSFontPanelCollectionModeMask = 4,
    NSFontPanelUnderlineEffectModeMask = 256,
    NSFontPanelStrikethroughEffectModeMask = 512,
    NSFontPanelTextColorEffectModeMask = 1024,
    NSFontPanelDocumentColorEffectModeMask = 2048,
    NSFontPanelShadowEffectModeMask = 4096,
    NSFontPanelAllEffectsModeMask = 1048320,
    NSFontPanelStandardModesMask = 65535,
    NSFontPanelAllModesMask = -1,
};

pub const anon181 = enum(u32) {
    NSAttachmentCharacter = 65532,
};

pub const anon2041 = enum(u32) {
    NSTextWritingDirectionEmbedding = 0,
    NSTextWritingDirectionOverride = 2,
};

pub const anon821 = enum(u32) {
    NSFPPreviewButton = 131,
    NSFPRevertButton = 130,
    NSFPSetButton = 132,
    NSFPPreviewField = 128,
    NSFPSizeField = 129,
    NSFPSizeTitle = 133,
    NSFPCurrentField = 134,
};

pub const anon271 = enum(i32) {
    NSOutlineViewDropOnItemIndex = -1,
};

pub const anon1271 = enum(u32) {
    NSUpdateWindowsRunLoopOrdering = 500000,
};

pub const anon441 = enum(i32) {
    NSAlertDefaultReturn = 1,
    NSAlertAlternateReturn = 0,
    NSAlertOtherReturn = -1,
    NSAlertErrorReturn = -2,
};

pub const anon501 = enum(u32) {
    NSOKButton = 1,
    NSCancelButton = 0,
};

pub const anon2891 = enum(u32) {
    NSFileHandlingPanelCancelButton = 0,
    NSFileHandlingPanelOKButton = 1,
};

pub const anon3611 = enum(u32) {
    NSAnyType = 0,
    NSIntType = 1,
    NSPositiveIntType = 2,
    NSFloatType = 3,
    NSPositiveFloatType = 4,
    NSDoubleType = 6,
    NSPositiveDoubleType = 7,
};

pub const anon2241 = enum(u32) {
    NSFontItalicTrait = 1,
    NSFontBoldTrait = 2,
    NSFontExpandedTrait = 32,
    NSFontCondensedTrait = 64,
    NSFontMonoSpaceTrait = 1024,
    NSFontVerticalTrait = 2048,
    NSFontUIOptimizedTrait = 4096,
};

pub const anon3761 = enum(u32) {
    NSNoUnderlineStyle = 0,
    NSSingleUnderlineStyle = 1,
};

pub const anon751 = enum(u32) {
    NSDisplayWindowRunLoopOrdering = 600000,
    NSResetCursorRectsRunLoopOrdering = 700000,
};

pub const anon1441 = enum(u32) {
    NSEnterCharacter = 3,
    NSBackspaceCharacter = 8,
    NSTabCharacter = 9,
    NSNewlineCharacter = 10,
    NSFormFeedCharacter = 12,
    NSCarriageReturnCharacter = 13,
    NSBackTabCharacter = 25,
    NSDeleteCharacter = 127,
    NSLineSeparatorCharacter = 8232,
    NSParagraphSeparatorCharacter = 8233,
};

pub const anon5531 = enum(u32) {
    NSUpArrowFunctionKey = 63232,
    NSDownArrowFunctionKey = 63233,
    NSLeftArrowFunctionKey = 63234,
    NSRightArrowFunctionKey = 63235,
    NSF1FunctionKey = 63236,
    NSF2FunctionKey = 63237,
    NSF3FunctionKey = 63238,
    NSF4FunctionKey = 63239,
    NSF5FunctionKey = 63240,
    NSF6FunctionKey = 63241,
    NSF7FunctionKey = 63242,
    NSF8FunctionKey = 63243,
    NSF9FunctionKey = 63244,
    NSF10FunctionKey = 63245,
    NSF11FunctionKey = 63246,
    NSF12FunctionKey = 63247,
    NSF13FunctionKey = 63248,
    NSF14FunctionKey = 63249,
    NSF15FunctionKey = 63250,
    NSF16FunctionKey = 63251,
    NSF17FunctionKey = 63252,
    NSF18FunctionKey = 63253,
    NSF19FunctionKey = 63254,
    NSF20FunctionKey = 63255,
    NSF21FunctionKey = 63256,
    NSF22FunctionKey = 63257,
    NSF23FunctionKey = 63258,
    NSF24FunctionKey = 63259,
    NSF25FunctionKey = 63260,
    NSF26FunctionKey = 63261,
    NSF27FunctionKey = 63262,
    NSF28FunctionKey = 63263,
    NSF29FunctionKey = 63264,
    NSF30FunctionKey = 63265,
    NSF31FunctionKey = 63266,
    NSF32FunctionKey = 63267,
    NSF33FunctionKey = 63268,
    NSF34FunctionKey = 63269,
    NSF35FunctionKey = 63270,
    NSInsertFunctionKey = 63271,
    NSDeleteFunctionKey = 63272,
    NSHomeFunctionKey = 63273,
    NSBeginFunctionKey = 63274,
    NSEndFunctionKey = 63275,
    NSPageUpFunctionKey = 63276,
    NSPageDownFunctionKey = 63277,
    NSPrintScreenFunctionKey = 63278,
    NSScrollLockFunctionKey = 63279,
    NSPauseFunctionKey = 63280,
    NSSysReqFunctionKey = 63281,
    NSBreakFunctionKey = 63282,
    NSResetFunctionKey = 63283,
    NSStopFunctionKey = 63284,
    NSMenuFunctionKey = 63285,
    NSUserFunctionKey = 63286,
    NSSystemFunctionKey = 63287,
    NSPrintFunctionKey = 63288,
    NSClearLineFunctionKey = 63289,
    NSClearDisplayFunctionKey = 63290,
    NSInsertLineFunctionKey = 63291,
    NSDeleteLineFunctionKey = 63292,
    NSInsertCharFunctionKey = 63293,
    NSDeleteCharFunctionKey = 63294,
    NSPrevFunctionKey = 63295,
    NSNextFunctionKey = 63296,
    NSSelectFunctionKey = 63297,
    NSExecuteFunctionKey = 63298,
    NSUndoFunctionKey = 63299,
    NSRedoFunctionKey = 63300,
    NSFindFunctionKey = 63301,
    NSHelpFunctionKey = 63302,
    NSModeSwitchFunctionKey = 63303,
};

pub const anon1041 = enum(u32) {
    NSOpenGLProfileVersionLegacy = 4096,
    NSOpenGLProfileVersion3_2Core = 12800,
    NSOpenGLProfileVersion4_1Core = 16640,
};

pub const anon4381 = enum(u32) {
    NSGlyphAttributeSoft = 0,
    NSGlyphAttributeElastic = 1,
    NSGlyphAttributeBidiLevel = 2,
    NSGlyphAttributeInscribe = 5,
};

pub const anon1811 = enum(u32) {
    NSIllegalTextMovement = 0,
    NSReturnTextMovement = 16,
    NSTabTextMovement = 17,
    NSBacktabTextMovement = 18,
    NSLeftTextMovement = 19,
    NSRightTextMovement = 20,
    NSUpTextMovement = 21,
    NSDownTextMovement = 22,
    NSCancelTextMovement = 23,
    NSOtherTextMovement = 0,
};

pub const anon2201 = enum(u32) {
    NSFontFamilyClassMask = -268435456,
};

pub const anon591 = enum(u32) {
    NSOpenGLPFAAllRenderers = 1,
    NSOpenGLPFATripleBuffer = 3,
    NSOpenGLPFADoubleBuffer = 5,
    NSOpenGLPFAAuxBuffers = 7,
    NSOpenGLPFAColorSize = 8,
    NSOpenGLPFAAlphaSize = 11,
    NSOpenGLPFADepthSize = 12,
    NSOpenGLPFAStencilSize = 13,
    NSOpenGLPFAAccumSize = 14,
    NSOpenGLPFAMinimumPolicy = 51,
    NSOpenGLPFAMaximumPolicy = 52,
    NSOpenGLPFASampleBuffers = 55,
    NSOpenGLPFASamples = 56,
    NSOpenGLPFAAuxDepthStencil = 57,
    NSOpenGLPFAColorFloat = 58,
    NSOpenGLPFAMultisample = 59,
    NSOpenGLPFASupersample = 60,
    NSOpenGLPFASampleAlpha = 61,
    NSOpenGLPFARendererID = 70,
    NSOpenGLPFANoRecovery = 72,
    NSOpenGLPFAAccelerated = 73,
    NSOpenGLPFAClosestPolicy = 74,
    NSOpenGLPFABackingStore = 76,
    NSOpenGLPFAScreenMask = 84,
    NSOpenGLPFAAllowOfflineRenderers = 96,
    NSOpenGLPFAAcceleratedCompute = 97,
    NSOpenGLPFAOpenGLProfile = 99,
    NSOpenGLPFAVirtualScreenCount = 128,
    NSOpenGLPFAStereo = 6,
    NSOpenGLPFAOffScreen = 53,
    NSOpenGLPFAFullScreen = 54,
    NSOpenGLPFASingleRenderer = 71,
    NSOpenGLPFARobust = 75,
    NSOpenGLPFAMPSafe = 78,
    NSOpenGLPFAWindow = 80,
    NSOpenGLPFAMultiScreen = 81,
    NSOpenGLPFACompliant = 83,
    NSOpenGLPFAPixelBuffer = 90,
    NSOpenGLPFARemotePixelBuffer = 91,
};

pub const anon2061 = enum(i32) {
    NSFontUnknownClass = 0,
    NSFontOldStyleSerifsClass = 268435456,
    NSFontTransitionalSerifsClass = 536870912,
    NSFontModernSerifsClass = 805306368,
    NSFontClarendonSerifsClass = 1073741824,
    NSFontSlabSerifsClass = 1342177280,
    NSFontFreeformSerifsClass = 1879048192,
    NSFontSansSerifClass = -2147483648,
    NSFontOrnamentalsClass = -1879048192,
    NSFontScriptsClass = -1610612736,
    NSFontSymbolicClass = -1073741824,
};

pub const anon131 = enum(u32) {
    NSNoInterfaceStyle = 0,
    NSNextStepInterfaceStyle = 1,
    NSWindows95InterfaceStyle = 2,
    NSMacintoshInterfaceStyle = 3,
};

pub const anon151 = enum(u32) {
    NSTextReadInapplicableDocumentTypeError = 65806,
    NSTextWriteInapplicableDocumentTypeError = 66062,
    NSTextReadWriteErrorMinimum = 65792,
    NSTextReadWriteErrorMaximum = 66303,
    NSFontAssetDownloadError = 66304,
    NSFontErrorMinimum = 66304,
    NSFontErrorMaximum = 66335,
    NSServiceApplicationNotFoundError = 66560,
    NSServiceApplicationLaunchFailedError = 66561,
    NSServiceRequestTimedOutError = 66562,
    NSServiceInvalidPasteboardDataError = 66563,
    NSServiceMalformedServiceDictionaryError = 66564,
    NSServiceMiscellaneousError = 66800,
    NSServiceErrorMinimum = 66560,
    NSServiceErrorMaximum = 66817,
    NSSharingServiceNotConfiguredError = 67072,
    NSSharingServiceErrorMinimum = 67072,
    NSSharingServiceErrorMaximum = 67327,
    NSWorkspaceAuthorizationInvalidError = 67328,
    NSWorkspaceErrorMinimum = 67328,
    NSWorkspaceErrorMaximum = 67455,
    NSWindowSharingRequestAlreadyRequested = 67456,
    NSWindowSharingRequestNoEligibleSession = 67457,
    NSWindowSharingRequestUnspecifiedError = 67458,
    NSWindowSharingErrorMinimum = 67456,
    NSWindowSharingErrorMaximum = 67466,
};

pub const CompositingOperation = enum(objc.NSUInteger) {
    Clear = 0,
    Copy = 1,
    SourceOver = 2,
    SourceIn = 3,
    SourceOut = 4,
    SourceAtop = 5,
    DestinationOver = 6,
    DestinationIn = 7,
    DestinationOut = 8,
    DestinationAtop = 9,
    XOR = 10,
    PlusDarker = 11,
    Highlight = 12,
    PlusLighter = 13,
    Multiply = 14,
    Screen = 15,
    Overlay = 16,
    Darken = 17,
    Lighten = 18,
    ColorDodge = 19,
    ColorBurn = 20,
    SoftLight = 21,
    HardLight = 22,
    Difference = 23,
    Exclusion = 24,
    Hue = 25,
    Saturation = 26,
    Color = 27,
    Luminosity = 28,
};

pub const BackingStoreType = enum(objc.NSUInteger) {
    Retained = 0,
    Nonretained = 1,
    Buffered = 2,
};

pub const WindowOrderingMode = enum(objc.NSInteger) {
    Above = 1,
    Below = -1,
    Out = 0,
};

pub const FocusRingPlacement = enum(objc.NSUInteger) {
    Only = 0,
    Below = 1,
    Above = 2,
};

pub const FocusRingType = enum(objc.NSUInteger) {
    Default = 0,
    None = 1,
    Exterior = 2,
};

pub const ColorRenderingIntent = enum(objc.NSInteger) {
    Default = 0,
    AbsoluteColorimetric = 1,
    RelativeColorimetric = 2,
    Perceptual = 3,
    Saturation = 4,
};

pub const ColorSpaceName = ?*foundation.String;

pub const WindowDepth = enum(objc.int32_t) {
    TwentyfourBitRGB = 520,
    SixtyfourBitRGB = 528,
    OnehundredtwentyeightBitRGB = 544,
};

pub extern "AppKit" fn BestDepth(colorSpace: ColorSpaceName, bps: objc.NSInteger, bpp: objc.NSInteger, planar: objc.BOOL, exactMatch: ?*objc.BOOL, ) callconv(.C) WindowDepth;

pub extern "AppKit" fn PlanarFromDepth(depth: WindowDepth) callconv(.C) objc.BOOL;

pub extern "AppKit" fn ColorSpaceFromDepth(depth: WindowDepth) callconv(.C) ColorSpaceName;

pub extern "AppKit" fn BitsPerSampleFromDepth(depth: WindowDepth) callconv(.C) objc.NSInteger;

pub extern "AppKit" fn BitsPerPixelFromDepth(depth: WindowDepth) callconv(.C) objc.NSInteger;

pub extern "AppKit" fn NumberOfColorComponents(colorSpaceName: ColorSpaceName) callconv(.C) objc.NSInteger;

pub extern "AppKit" fn AvailableWindowDepths() callconv(.C) ?*WindowDepth;

pub const DisplayGamut = enum(objc.NSInteger) {
    SRGB = 1,
    P3 = 2,
};

pub const DeviceDescriptionKey = ?*foundation.String;

pub extern "AppKit" fn RectFill(rect: foundation.Rect) callconv(.C) void;

pub extern "AppKit" fn RectFillList(rects: ?*foundation.Rect, count: objc.NSInteger) callconv(.C) void;

pub extern "AppKit" fn RectFillListWithGrays(rects: ?*foundation.Rect, grays: ?*core_foundation.CGFloat, num: objc.NSInteger) callconv(.C) void;

pub extern "AppKit" fn RectFillListWithColors(rects: ?*foundation.Rect, colors: ?*?*const Color, num: objc.NSInteger) callconv(.C) void;

pub extern "AppKit" fn RectFillUsingOperation(rect: foundation.Rect, op: CompositingOperation) callconv(.C) void;

pub extern "AppKit" fn RectFillListUsingOperation(rects: ?*foundation.Rect, count: objc.NSInteger, op: CompositingOperation) callconv(.C) void;

pub extern "AppKit" fn RectFillListWithColorsUsingOperation(rects: ?*foundation.Rect, colors: ?*?*const Color, num: objc.NSInteger, op: CompositingOperation, ) callconv(.C) void;

pub extern "AppKit" fn FrameRect(rect: foundation.Rect) callconv(.C) void;

pub extern "AppKit" fn FrameRectWithWidth(rect: foundation.Rect, frameWidth: core_foundation.CGFloat) callconv(.C) void;

pub extern "AppKit" fn FrameRectWithWidthUsingOperation(rect: foundation.Rect, frameWidth: core_foundation.CGFloat, op: CompositingOperation) callconv(.C) void;

pub extern "AppKit" fn RectClip(rect: foundation.Rect) callconv(.C) void;

pub extern "AppKit" fn RectClipList(rects: ?*foundation.Rect, count: objc.NSInteger) callconv(.C) void;

pub extern "AppKit" fn DrawTiledRects(boundsRect: foundation.Rect, clipRect: foundation.Rect, sides: ?*foundation.RectEdge, grays: ?*core_foundation.CGFloat, count: objc.NSInteger, ) callconv(.C) foundation.Rect;

pub extern "AppKit" fn DrawGrayBezel(rect: foundation.Rect, clipRect: foundation.Rect) callconv(.C) void;

pub extern "AppKit" fn DrawGroove(rect: foundation.Rect, clipRect: foundation.Rect) callconv(.C) void;

pub extern "AppKit" fn DrawWhiteBezel(rect: foundation.Rect, clipRect: foundation.Rect) callconv(.C) void;

pub extern "AppKit" fn DrawButton(rect: foundation.Rect, clipRect: foundation.Rect) callconv(.C) void;

pub extern "AppKit" fn EraseRect(rect: foundation.Rect) callconv(.C) void;

pub extern "AppKit" fn ReadPixel(passedPoint: foundation.Point) callconv(.C) ?*Color;

pub extern "AppKit" fn DrawBitmap(rect: foundation.Rect, width: objc.NSInteger, height: objc.NSInteger, bps: objc.NSInteger, spp: objc.NSInteger, bpp: objc.NSInteger, bpr: objc.NSInteger, isPlanar: objc.BOOL, hasAlpha: objc.BOOL, colorSpaceName: ColorSpaceName, data: ?*?*const u8, ) callconv(.C) void;

pub extern "AppKit" fn HighlightRect(rect: foundation.Rect) callconv(.C) void;

pub extern "AppKit" fn Beep() callconv(.C) void;

pub extern "AppKit" fn GetWindowServerMemory(context: objc.NSInteger, virtualMemory: ?*objc.NSInteger, windowBackingMemory: ?*objc.NSInteger, windowDumpString: ?*?*foundation.String, ) callconv(.C) objc.NSInteger;

pub extern "AppKit" fn DrawColorTiledRects(boundsRect: foundation.Rect, clipRect: foundation.Rect, sides: ?*foundation.RectEdge, colors: ?*?*Color, count: objc.NSInteger, ) callconv(.C) foundation.Rect;

pub extern "AppKit" fn DrawDarkBezel(rect: foundation.Rect, clipRect: foundation.Rect) callconv(.C) void;

pub extern "AppKit" fn DrawLightBezel(rect: foundation.Rect, clipRect: foundation.Rect) callconv(.C) void;

pub extern "AppKit" fn DottedFrameRect(rect: foundation.Rect) callconv(.C) void;

pub extern "AppKit" fn DrawWindowBackground(rect: foundation.Rect) callconv(.C) void;

pub extern "AppKit" fn SetFocusRingStyle(placement: FocusRingPlacement) callconv(.C) void;

pub extern "AppKit" fn DisableScreenUpdates() callconv(.C) void;

pub extern "AppKit" fn EnableScreenUpdates() callconv(.C) void;

pub const AnimationEffect = enum(objc.NSUInteger) {
    DisappearingItemDefault = 0,
    Poof = 10,
};

pub extern "AppKit" fn ShowAnimationEffect(animationEffect: AnimationEffect, centerLocation: foundation.Point, size: foundation.Size, animationDelegate: *objc.Id, didEndSelector: *objc.SEL, contextInfo: ?*anyopaque, ) callconv(.C) void;

pub extern "AppKit" fn CountWindows(count: ?*objc.NSInteger) callconv(.C) void;

pub extern "AppKit" fn WindowList(size: objc.NSInteger, list: ?*objc.NSInteger) callconv(.C) void;

pub extern "AppKit" fn CountWindowsForContext(context: objc.NSInteger, count: ?*objc.NSInteger) callconv(.C) void;

pub extern "AppKit" fn WindowListForContext(context: objc.NSInteger, size: objc.NSInteger, list: ?*objc.NSInteger) callconv(.C) void;

pub extern "AppKit" fn CopyBits(srcGState: objc.NSInteger, srcRect: foundation.Rect, destPoint: foundation.Point) callconv(.C) void;

pub const GraphicsContextAttributeKey = ?*String;

pub const GraphicsContextRepresentationFormatName = ?*String;

pub const ImageInterpolation = enum(objc.NSUInteger) {
    Default = 0,
    None = 1,
    Low = 2,
    Medium = 4,
    High = 3,
};

/// https://developer.apple.com/documentation/AppKit/NSGraphicsContext?language=objc
pub const GraphicsContext = opaque {
    pub const InternalInfo = objc.ExternalClass("NSGraphicsContext", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn graphicsContextWithAttributes(self: *@This(), attributes: ?*anyopaque) ?*GraphicsContext {
        return objc.msgSend(self, "graphicsContextWithAttributes:", ?*GraphicsContext, .{attributes});
    }

    pub fn graphicsContextWithBitmapImageRep(self: *@This(), bitmapRep: ?*BitmapImageRep) ?*GraphicsContext {
        return objc.msgSend(self, "graphicsContextWithBitmapImageRep:", ?*GraphicsContext, .{bitmapRep});
    }

    pub fn graphicsContextWithCGContextFlipped(self: *@This(), graphicsPort: core_graphics.ContextRef, initialFlippedState: objc.BOOL) ?*GraphicsContext {
        return objc.msgSend(self, "graphicsContextWithCGContext:flipped:", ?*GraphicsContext, .{graphicsPort, initialFlippedState});
    }

    pub fn currentContextDrawingToScreen(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "currentContextDrawingToScreen", objc.BOOL, .{});
    }

    pub fn saveGraphicsState(self: *@This()) void {
        return objc.msgSend(self, "saveGraphicsState", void, .{});
    }

    pub fn restoreGraphicsState(self: *@This()) void {
        return objc.msgSend(self, "restoreGraphicsState", void, .{});
    }

    pub fn saveGraphicsState(self: *@This()) void {
        return objc.msgSend(self, "saveGraphicsState", void, .{});
    }

    pub fn restoreGraphicsState(self: *@This()) void {
        return objc.msgSend(self, "restoreGraphicsState", void, .{});
    }

    pub fn flushGraphics(self: *@This()) void {
        return objc.msgSend(self, "flushGraphics", void, .{});
    }

    pub fn currentContext(self: *@This()) ?*GraphicsContext {
        return objc.msgSend(self, "currentContext", ?*GraphicsContext, .{});
    }

    pub fn setCurrentContext(self: *@This(), currentContext: ?*GraphicsContext) void {
        return objc.msgSend(self, "setCurrentContext:", void, .{currentContext});
    }

    pub fn attributes(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "attributes", ?*anyopaque, .{});
    }

    pub fn isDrawingToScreen(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isDrawingToScreen", objc.BOOL, .{});
    }

    pub fn CGContext(self: *@This()) core_graphics.ContextRef {
        return objc.msgSend(self, "CGContext", core_graphics.ContextRef, .{});
    }

    pub fn isFlipped(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isFlipped", objc.BOOL, .{});
    }

};

pub const AccessibilityAttributeName = ?*String;

pub const AccessibilityParameterizedAttributeName = ?*String;

pub const AccessibilityAnnotationAttributeKey = ?*String;

pub const AccessibilityAnnotationPosition = enum(objc.NSInteger) {
    FullRange = 0,
    Start = 1,
    End = 2,
};

pub const AccessibilityFontAttributeKey = ?*String;

pub const AccessibilityOrientation = enum(objc.NSInteger) {
    Unknown = 0,
    Vertical = 1,
    Horizontal = 2,
};

pub const AccessibilityOrientationValue = ?*String;

pub const AccessibilitySortDirectionValue = ?*String;

pub const AccessibilitySortDirection = enum(objc.NSInteger) {
    Unknown = 0,
    Ascending = 1,
    Descending = 2,
};

pub const AccessibilityRulerMarkerTypeValue = ?*String;

pub const AccessibilityRulerMarkerType = enum(objc.NSInteger) {
    Unknown = 0,
    TabStopLeft = 1,
    TabStopRight = 2,
    TabStopCenter = 3,
    TabStopDecimal = 4,
    IndentHead = 5,
    IndentTail = 6,
    IndentFirstLine = 7,
};

pub const AccessibilityRulerUnitValue = ?*String;

pub const AccessibilityUnits = enum(objc.NSInteger) {
    Unknown = 0,
    Inches = 1,
    Centimeters = 2,
    Points = 3,
    Picas = 4,
};

pub const AccessibilityActionName = ?*String;

pub const AccessibilityNotificationName = ?*String;

pub const AccessibilityRole = ?*String;

pub const AccessibilitySubrole = ?*String;

pub const AccessibilityNotificationUserInfoKey = ?*String;

pub extern "AppKit" fn AccessibilityPostNotificationWithUserInfo(element: *objc.Id, notification: AccessibilityNotificationName, userInfo: ?*anyopaque) callconv(.C) void;

pub const AccessibilityPriorityLevel = enum(objc.NSInteger) {
    Low = 10,
    Medium = 50,
    High = 90,
};

pub const AccessibilityLoadingToken = ?*anyopaque;

/// https://developer.apple.com/documentation/AppKit/NSAccessibilityCustomAction?language=objc
pub const AccessibilityCustomAction = opaque {
    pub const InternalInfo = objc.ExternalClass("NSAccessibilityCustomAction", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn initWithNameHandler(self: *@This(), name: ?*String, handler: *const fn() callconv(.C) objc.BOOL) *@This() {
        return objc.msgSend(self, "initWithName:handler:", *@This(), .{name, handler});
    }

    pub fn initWithNameTargetSelector(self: *@This(), name: ?*String, target: ?*anyopaque, selector: *objc.SEL) *@This() {
        return objc.msgSend(self, "initWithName:target:selector:", *@This(), .{name, target, selector});
    }

    pub fn name(self: *@This()) ?*String {
        return objc.msgSend(self, "name", ?*String, .{});
    }

    pub fn setName(self: *@This(), name: ?*String) void {
        return objc.msgSend(self, "setName:", void, .{name});
    }

    pub fn handler(self: *@This()) *const fn() callconv(.C) objc.BOOL {
        return objc.msgSend(self, "handler", *const fn() callconv(.C) objc.BOOL, .{});
    }

    pub fn setHandler(self: *@This(), handler: *const fn() callconv(.C) objc.BOOL) void {
        return objc.msgSend(self, "setHandler:", void, .{handler});
    }

    pub fn target(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "target", ?*anyopaque, .{});
    }

    pub fn setTarget(self: *@This(), target: ?*anyopaque) void {
        return objc.msgSend(self, "setTarget:", void, .{target});
    }

    pub fn selector(self: *@This()) *objc.SEL {
        return objc.msgSend(self, "selector", *objc.SEL, .{});
    }

    pub fn setSelector(self: *@This(), selector: *objc.SEL) void {
        return objc.msgSend(self, "setSelector:", void, .{selector});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSAccessibilityElement?language=objc
pub const AccessibilityElement = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{objc.NSObject, });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn accessibilityFrame(self: *@This()) foundation.Rect {
        return objc.msgSend(self, "accessibilityFrame", foundation.Rect, .{});
    }

    pub fn accessibilityParent(self: *@This()) *objc.Id {
        return objc.msgSend(self, "accessibilityParent", *objc.Id, .{});
    }

    pub fn isAccessibilityFocused(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isAccessibilityFocused", objc.BOOL, .{});
    }

    pub fn accessibilityIdentifier(self: *@This()) ?*String {
        return objc.msgSend(self, "accessibilityIdentifier", ?*String, .{});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSAccessibilityGroup?language=objc
pub const AccessibilityGroup = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{AccessibilityElement, });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
};

/// https://developer.apple.com/documentation/AppKit/NSAccessibilityButton?language=objc
pub const AccessibilityButton = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{AccessibilityElement, });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn accessibilityLabel(self: *@This()) ?*String {
        return objc.msgSend(self, "accessibilityLabel", ?*String, .{});
    }

    pub fn accessibilityPerformPress(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "accessibilityPerformPress", objc.BOOL, .{});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSAccessibilitySwitch?language=objc
pub const AccessibilitySwitch = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{AccessibilityButton, });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn accessibilityValue(self: *@This()) ?*String {
        return objc.msgSend(self, "accessibilityValue", ?*String, .{});
    }

    pub fn accessibilityPerformIncrement(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "accessibilityPerformIncrement", objc.BOOL, .{});
    }

    pub fn accessibilityPerformDecrement(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "accessibilityPerformDecrement", objc.BOOL, .{});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSAccessibilityRadioButton?language=objc
pub const AccessibilityRadioButton = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{AccessibilityButton, });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn accessibilityValue(self: *@This()) ?*foundation.Number {
        return objc.msgSend(self, "accessibilityValue", ?*foundation.Number, .{});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSAccessibilityCheckBox?language=objc
pub const AccessibilityCheckBox = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{AccessibilityButton, });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn accessibilityValue(self: *@This()) ?*Number {
        return objc.msgSend(self, "accessibilityValue", ?*Number, .{});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSAccessibilityStaticText?language=objc
pub const AccessibilityStaticText = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{AccessibilityElement, });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn accessibilityValue(self: *@This()) ?*String {
        return objc.msgSend(self, "accessibilityValue", ?*String, .{});
    }

    pub fn accessibilityAttributedStringForRange(self: *@This(), range: foundation.Range) ?*foundation.AttributedString {
        return objc.msgSend(self, "accessibilityAttributedStringForRange:", ?*foundation.AttributedString, .{range});
    }

    pub fn accessibilityVisibleCharacterRange(self: *@This()) foundation.Range {
        return objc.msgSend(self, "accessibilityVisibleCharacterRange", foundation.Range, .{});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSAccessibilityNavigableStaticText?language=objc
pub const AccessibilityNavigableStaticText = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{AccessibilityStaticText, });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn accessibilityStringForRange(self: *@This(), range: foundation.Range) ?*String {
        return objc.msgSend(self, "accessibilityStringForRange:", ?*String, .{range});
    }

    pub fn accessibilityLineForIndex(self: *@This(), index: objc.NSInteger) objc.NSInteger {
        return objc.msgSend(self, "accessibilityLineForIndex:", objc.NSInteger, .{index});
    }

    pub fn accessibilityRangeForLine(self: *@This(), lineNumber: objc.NSInteger) foundation.Range {
        return objc.msgSend(self, "accessibilityRangeForLine:", foundation.Range, .{lineNumber});
    }

    pub fn accessibilityFrameForRange(self: *@This(), range: foundation.Range) foundation.Rect {
        return objc.msgSend(self, "accessibilityFrameForRange:", foundation.Rect, .{range});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSAccessibilityProgressIndicator?language=objc
pub const AccessibilityProgressIndicator = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{AccessibilityGroup, });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn accessibilityValue(self: *@This()) ?*Number {
        return objc.msgSend(self, "accessibilityValue", ?*Number, .{});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSAccessibilityStepper?language=objc
pub const AccessibilityStepper = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{AccessibilityElement, });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn accessibilityLabel(self: *@This()) ?*String {
        return objc.msgSend(self, "accessibilityLabel", ?*String, .{});
    }

    pub fn accessibilityPerformIncrement(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "accessibilityPerformIncrement", objc.BOOL, .{});
    }

    pub fn accessibilityPerformDecrement(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "accessibilityPerformDecrement", objc.BOOL, .{});
    }

    pub fn accessibilityValue(self: *@This()) *objc.Id {
        return objc.msgSend(self, "accessibilityValue", *objc.Id, .{});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSAccessibilitySlider?language=objc
pub const AccessibilitySlider = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{AccessibilityElement, });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn accessibilityLabel(self: *@This()) ?*String {
        return objc.msgSend(self, "accessibilityLabel", ?*String, .{});
    }

    pub fn accessibilityValue(self: *@This()) *objc.Id {
        return objc.msgSend(self, "accessibilityValue", *objc.Id, .{});
    }

    pub fn accessibilityPerformIncrement(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "accessibilityPerformIncrement", objc.BOOL, .{});
    }

    pub fn accessibilityPerformDecrement(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "accessibilityPerformDecrement", objc.BOOL, .{});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSAccessibilityImage?language=objc
pub const AccessibilityImage = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{AccessibilityElement, });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn accessibilityLabel(self: *@This()) ?*String {
        return objc.msgSend(self, "accessibilityLabel", ?*String, .{});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSAccessibilityContainsTransientUI?language=objc
pub const AccessibilityContainsTransientUI = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{AccessibilityElement, });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn accessibilityPerformShowAlternateUI(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "accessibilityPerformShowAlternateUI", objc.BOOL, .{});
    }

    pub fn accessibilityPerformShowDefaultUI(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "accessibilityPerformShowDefaultUI", objc.BOOL, .{});
    }

    pub fn isAccessibilityAlternateUIVisible(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isAccessibilityAlternateUIVisible", objc.BOOL, .{});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSAccessibilityTable?language=objc
pub const AccessibilityTable = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{AccessibilityGroup, });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn accessibilityLabel(self: *@This()) ?*String {
        return objc.msgSend(self, "accessibilityLabel", ?*String, .{});
    }

    pub fn accessibilityRows(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "accessibilityRows", ?*anyopaque, .{});
    }

    pub fn accessibilitySelectedRows(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "accessibilitySelectedRows", ?*anyopaque, .{});
    }

    pub fn setAccessibilitySelectedRows(self: *@This(), selectedRows: ?*anyopaque) void {
        return objc.msgSend(self, "setAccessibilitySelectedRows:", void, .{selectedRows});
    }

    pub fn accessibilityVisibleRows(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "accessibilityVisibleRows", ?*anyopaque, .{});
    }

    pub fn accessibilityColumns(self: *@This()) ?*Array {
        return objc.msgSend(self, "accessibilityColumns", ?*Array, .{});
    }

    pub fn accessibilityVisibleColumns(self: *@This()) ?*Array {
        return objc.msgSend(self, "accessibilityVisibleColumns", ?*Array, .{});
    }

    pub fn accessibilitySelectedColumns(self: *@This()) ?*Array {
        return objc.msgSend(self, "accessibilitySelectedColumns", ?*Array, .{});
    }

    pub fn accessibilityHeaderGroup(self: *@This()) ?*String {
        return objc.msgSend(self, "accessibilityHeaderGroup", ?*String, .{});
    }

    pub fn accessibilitySelectedCells(self: *@This()) ?*Array {
        return objc.msgSend(self, "accessibilitySelectedCells", ?*Array, .{});
    }

    pub fn accessibilityVisibleCells(self: *@This()) ?*Array {
        return objc.msgSend(self, "accessibilityVisibleCells", ?*Array, .{});
    }

    pub fn accessibilityRowHeaderUIElements(self: *@This()) ?*Array {
        return objc.msgSend(self, "accessibilityRowHeaderUIElements", ?*Array, .{});
    }

    pub fn accessibilityColumnHeaderUIElements(self: *@This()) ?*Array {
        return objc.msgSend(self, "accessibilityColumnHeaderUIElements", ?*Array, .{});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSAccessibilityOutline?language=objc
pub const AccessibilityOutline = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{AccessibilityTable, });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
};

/// https://developer.apple.com/documentation/AppKit/NSAccessibilityList?language=objc
pub const AccessibilityList = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{AccessibilityTable, });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
};

/// https://developer.apple.com/documentation/AppKit/NSAccessibilityRow?language=objc
pub const AccessibilityRow = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{AccessibilityGroup, });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn accessibilityIndex(self: *@This()) objc.NSInteger {
        return objc.msgSend(self, "accessibilityIndex", objc.NSInteger, .{});
    }

    pub fn accessibilityDisclosureLevel(self: *@This()) objc.NSInteger {
        return objc.msgSend(self, "accessibilityDisclosureLevel", objc.NSInteger, .{});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSAccessibilityLayoutArea?language=objc
pub const AccessibilityLayoutArea = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{AccessibilityGroup, });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn accessibilityLabel(self: *@This()) ?*String {
        return objc.msgSend(self, "accessibilityLabel", ?*String, .{});
    }

    pub fn accessibilityChildren(self: *@This()) ?*Array {
        return objc.msgSend(self, "accessibilityChildren", ?*Array, .{});
    }

    pub fn accessibilitySelectedChildren(self: *@This()) ?*Array {
        return objc.msgSend(self, "accessibilitySelectedChildren", ?*Array, .{});
    }

    pub fn accessibilityFocusedUIElement(self: *@This()) *objc.Id {
        return objc.msgSend(self, "accessibilityFocusedUIElement", *objc.Id, .{});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSAccessibilityLayoutItem?language=objc
pub const AccessibilityLayoutItem = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{AccessibilityGroup, });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn setAccessibilityFrame(self: *@This(), frame: foundation.Rect) void {
        return objc.msgSend(self, "setAccessibilityFrame:", void, .{frame});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSAccessibilityElementLoading?language=objc
pub const AccessibilityElementLoading = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{objc.NSObject, });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn accessibilityElementWithToken(self: *@This(), token: AccessibilityLoadingToken) ?*anyopaque {
        return objc.msgSend(self, "accessibilityElementWithToken:", ?*anyopaque, .{token});
    }

    pub fn accessibilityRangeInTargetElementWithToken(self: *@This(), token: AccessibilityLoadingToken) foundation.Range {
        return objc.msgSend(self, "accessibilityRangeInTargetElementWithToken:", foundation.Range, .{token});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSAccessibility?language=objc
pub const Accessibility = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{objc.NSObject, });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn accessibilityLayoutPointForScreenPoint(self: *@This(), point: foundation.Point) foundation.Point {
        return objc.msgSend(self, "accessibilityLayoutPointForScreenPoint:", foundation.Point, .{point});
    }

    pub fn accessibilityLayoutSizeForScreenSize(self: *@This(), size: foundation.Size) foundation.Size {
        return objc.msgSend(self, "accessibilityLayoutSizeForScreenSize:", foundation.Size, .{size});
    }

    pub fn accessibilityScreenPointForLayoutPoint(self: *@This(), point: foundation.Point) foundation.Point {
        return objc.msgSend(self, "accessibilityScreenPointForLayoutPoint:", foundation.Point, .{point});
    }

    pub fn accessibilityScreenSizeForLayoutSize(self: *@This(), size: foundation.Size) foundation.Size {
        return objc.msgSend(self, "accessibilityScreenSizeForLayoutSize:", foundation.Size, .{size});
    }

    pub fn accessibilityCellForColumnRow(self: *@This(), column: objc.NSInteger, row: objc.NSInteger) *objc.Id {
        return objc.msgSend(self, "accessibilityCellForColumn:row:", *objc.Id, .{column, row});
    }

    pub fn accessibilityAttributedStringForRange(self: *@This(), range: foundation.Range) ?*AttributedString {
        return objc.msgSend(self, "accessibilityAttributedStringForRange:", ?*AttributedString, .{range});
    }

    pub fn accessibilityRangeForLine(self: *@This(), line: objc.NSInteger) foundation.Range {
        return objc.msgSend(self, "accessibilityRangeForLine:", foundation.Range, .{line});
    }

    pub fn accessibilityStringForRange(self: *@This(), range: foundation.Range) ?*String {
        return objc.msgSend(self, "accessibilityStringForRange:", ?*String, .{range});
    }

    pub fn accessibilityRangeForPosition(self: *@This(), point: foundation.Point) foundation.Range {
        return objc.msgSend(self, "accessibilityRangeForPosition:", foundation.Range, .{point});
    }

    pub fn accessibilityRangeForIndex(self: *@This(), index: objc.NSInteger) foundation.Range {
        return objc.msgSend(self, "accessibilityRangeForIndex:", foundation.Range, .{index});
    }

    pub fn accessibilityFrameForRange(self: *@This(), range: foundation.Range) foundation.Rect {
        return objc.msgSend(self, "accessibilityFrameForRange:", foundation.Rect, .{range});
    }

    pub fn accessibilityRTFForRange(self: *@This(), range: foundation.Range) ?*foundation.Data {
        return objc.msgSend(self, "accessibilityRTFForRange:", ?*foundation.Data, .{range});
    }

    pub fn accessibilityStyleRangeForIndex(self: *@This(), index: objc.NSInteger) foundation.Range {
        return objc.msgSend(self, "accessibilityStyleRangeForIndex:", foundation.Range, .{index});
    }

    pub fn accessibilityLineForIndex(self: *@This(), index: objc.NSInteger) objc.NSInteger {
        return objc.msgSend(self, "accessibilityLineForIndex:", objc.NSInteger, .{index});
    }

    pub fn accessibilityPerformCancel(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "accessibilityPerformCancel", objc.BOOL, .{});
    }

    pub fn accessibilityPerformConfirm(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "accessibilityPerformConfirm", objc.BOOL, .{});
    }

    pub fn accessibilityPerformDecrement(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "accessibilityPerformDecrement", objc.BOOL, .{});
    }

    pub fn accessibilityPerformDelete(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "accessibilityPerformDelete", objc.BOOL, .{});
    }

    pub fn accessibilityPerformIncrement(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "accessibilityPerformIncrement", objc.BOOL, .{});
    }

    pub fn accessibilityPerformPick(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "accessibilityPerformPick", objc.BOOL, .{});
    }

    pub fn accessibilityPerformPress(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "accessibilityPerformPress", objc.BOOL, .{});
    }

    pub fn accessibilityPerformRaise(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "accessibilityPerformRaise", objc.BOOL, .{});
    }

    pub fn accessibilityPerformShowAlternateUI(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "accessibilityPerformShowAlternateUI", objc.BOOL, .{});
    }

    pub fn accessibilityPerformShowDefaultUI(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "accessibilityPerformShowDefaultUI", objc.BOOL, .{});
    }

    pub fn accessibilityPerformShowMenu(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "accessibilityPerformShowMenu", objc.BOOL, .{});
    }

    pub fn isAccessibilitySelectorAllowed(self: *@This(), selector: *objc.SEL) objc.BOOL {
        return objc.msgSend(self, "isAccessibilitySelectorAllowed:", objc.BOOL, .{selector});
    }

    pub fn isAccessibilityElement(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isAccessibilityElement", objc.BOOL, .{});
    }

    pub fn setAccessibilityElement(self: *@This(), accessibilityElement: objc.BOOL) void {
        return objc.msgSend(self, "setAccessibilityElement:", void, .{accessibilityElement});
    }

    pub fn accessibilityFrame(self: *@This()) foundation.Rect {
        return objc.msgSend(self, "accessibilityFrame", foundation.Rect, .{});
    }

    pub fn setAccessibilityFrame(self: *@This(), accessibilityFrame: foundation.Rect) void {
        return objc.msgSend(self, "setAccessibilityFrame:", void, .{accessibilityFrame});
    }

    pub fn isAccessibilityFocused(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isAccessibilityFocused", objc.BOOL, .{});
    }

    pub fn setAccessibilityFocused(self: *@This(), accessibilityFocused: objc.BOOL) void {
        return objc.msgSend(self, "setAccessibilityFocused:", void, .{accessibilityFocused});
    }

    pub fn accessibilityActivationPoint(self: *@This()) foundation.Point {
        return objc.msgSend(self, "accessibilityActivationPoint", foundation.Point, .{});
    }

    pub fn setAccessibilityActivationPoint(self: *@This(), accessibilityActivationPoint: foundation.Point) void {
        return objc.msgSend(self, "setAccessibilityActivationPoint:", void, .{accessibilityActivationPoint});
    }

    pub fn accessibilityTopLevelUIElement(self: *@This()) *objc.Id {
        return objc.msgSend(self, "accessibilityTopLevelUIElement", *objc.Id, .{});
    }

    pub fn setAccessibilityTopLevelUIElement(self: *@This(), accessibilityTopLevelUIElement: *objc.Id) void {
        return objc.msgSend(self, "setAccessibilityTopLevelUIElement:", void, .{accessibilityTopLevelUIElement});
    }

    pub fn accessibilityURL(self: *@This()) ?*foundation.URL {
        return objc.msgSend(self, "accessibilityURL", ?*foundation.URL, .{});
    }

    pub fn setAccessibilityURL(self: *@This(), accessibilityURL: ?*foundation.URL) void {
        return objc.msgSend(self, "setAccessibilityURL:", void, .{accessibilityURL});
    }

    pub fn accessibilityValue(self: *@This()) *objc.Id {
        return objc.msgSend(self, "accessibilityValue", *objc.Id, .{});
    }

    pub fn setAccessibilityValue(self: *@This(), accessibilityValue: *objc.Id) void {
        return objc.msgSend(self, "setAccessibilityValue:", void, .{accessibilityValue});
    }

    pub fn accessibilityValueDescription(self: *@This()) ?*String {
        return objc.msgSend(self, "accessibilityValueDescription", ?*String, .{});
    }

    pub fn setAccessibilityValueDescription(self: *@This(), accessibilityValueDescription: ?*String) void {
        return objc.msgSend(self, "setAccessibilityValueDescription:", void, .{accessibilityValueDescription});
    }

    pub fn accessibilityVisibleChildren(self: *@This()) ?*Array {
        return objc.msgSend(self, "accessibilityVisibleChildren", ?*Array, .{});
    }

    pub fn setAccessibilityVisibleChildren(self: *@This(), accessibilityVisibleChildren: ?*Array) void {
        return objc.msgSend(self, "setAccessibilityVisibleChildren:", void, .{accessibilityVisibleChildren});
    }

    pub fn accessibilitySubrole(self: *@This()) AccessibilitySubrole {
        return objc.msgSend(self, "accessibilitySubrole", AccessibilitySubrole, .{});
    }

    pub fn setAccessibilitySubrole(self: *@This(), accessibilitySubrole: AccessibilitySubrole) void {
        return objc.msgSend(self, "setAccessibilitySubrole:", void, .{accessibilitySubrole});
    }

    pub fn accessibilityTitle(self: *@This()) ?*String {
        return objc.msgSend(self, "accessibilityTitle", ?*String, .{});
    }

    pub fn setAccessibilityTitle(self: *@This(), accessibilityTitle: ?*String) void {
        return objc.msgSend(self, "setAccessibilityTitle:", void, .{accessibilityTitle});
    }

    pub fn accessibilityTitleUIElement(self: *@This()) *objc.Id {
        return objc.msgSend(self, "accessibilityTitleUIElement", *objc.Id, .{});
    }

    pub fn setAccessibilityTitleUIElement(self: *@This(), accessibilityTitleUIElement: *objc.Id) void {
        return objc.msgSend(self, "setAccessibilityTitleUIElement:", void, .{accessibilityTitleUIElement});
    }

    pub fn accessibilityNextContents(self: *@This()) ?*Array {
        return objc.msgSend(self, "accessibilityNextContents", ?*Array, .{});
    }

    pub fn setAccessibilityNextContents(self: *@This(), accessibilityNextContents: ?*Array) void {
        return objc.msgSend(self, "setAccessibilityNextContents:", void, .{accessibilityNextContents});
    }

    pub fn accessibilityOrientation(self: *@This()) AccessibilityOrientation {
        return objc.msgSend(self, "accessibilityOrientation", AccessibilityOrientation, .{});
    }

    pub fn setAccessibilityOrientation(self: *@This(), accessibilityOrientation: AccessibilityOrientation) void {
        return objc.msgSend(self, "setAccessibilityOrientation:", void, .{accessibilityOrientation});
    }

    pub fn accessibilityOverflowButton(self: *@This()) *objc.Id {
        return objc.msgSend(self, "accessibilityOverflowButton", *objc.Id, .{});
    }

    pub fn setAccessibilityOverflowButton(self: *@This(), accessibilityOverflowButton: *objc.Id) void {
        return objc.msgSend(self, "setAccessibilityOverflowButton:", void, .{accessibilityOverflowButton});
    }

    pub fn accessibilityParent(self: *@This()) *objc.Id {
        return objc.msgSend(self, "accessibilityParent", *objc.Id, .{});
    }

    pub fn setAccessibilityParent(self: *@This(), accessibilityParent: *objc.Id) void {
        return objc.msgSend(self, "setAccessibilityParent:", void, .{accessibilityParent});
    }

    pub fn accessibilityPlaceholderValue(self: *@This()) ?*String {
        return objc.msgSend(self, "accessibilityPlaceholderValue", ?*String, .{});
    }

    pub fn setAccessibilityPlaceholderValue(self: *@This(), accessibilityPlaceholderValue: ?*String) void {
        return objc.msgSend(self, "setAccessibilityPlaceholderValue:", void, .{accessibilityPlaceholderValue});
    }

    pub fn accessibilityPreviousContents(self: *@This()) ?*Array {
        return objc.msgSend(self, "accessibilityPreviousContents", ?*Array, .{});
    }

    pub fn setAccessibilityPreviousContents(self: *@This(), accessibilityPreviousContents: ?*Array) void {
        return objc.msgSend(self, "setAccessibilityPreviousContents:", void, .{accessibilityPreviousContents});
    }

    pub fn accessibilityRole(self: *@This()) AccessibilityRole {
        return objc.msgSend(self, "accessibilityRole", AccessibilityRole, .{});
    }

    pub fn setAccessibilityRole(self: *@This(), accessibilityRole: AccessibilityRole) void {
        return objc.msgSend(self, "setAccessibilityRole:", void, .{accessibilityRole});
    }

    pub fn accessibilityRoleDescription(self: *@This()) ?*String {
        return objc.msgSend(self, "accessibilityRoleDescription", ?*String, .{});
    }

    pub fn setAccessibilityRoleDescription(self: *@This(), accessibilityRoleDescription: ?*String) void {
        return objc.msgSend(self, "setAccessibilityRoleDescription:", void, .{accessibilityRoleDescription});
    }

    pub fn accessibilitySearchButton(self: *@This()) *objc.Id {
        return objc.msgSend(self, "accessibilitySearchButton", *objc.Id, .{});
    }

    pub fn setAccessibilitySearchButton(self: *@This(), accessibilitySearchButton: *objc.Id) void {
        return objc.msgSend(self, "setAccessibilitySearchButton:", void, .{accessibilitySearchButton});
    }

    pub fn accessibilitySearchMenu(self: *@This()) *objc.Id {
        return objc.msgSend(self, "accessibilitySearchMenu", *objc.Id, .{});
    }

    pub fn setAccessibilitySearchMenu(self: *@This(), accessibilitySearchMenu: *objc.Id) void {
        return objc.msgSend(self, "setAccessibilitySearchMenu:", void, .{accessibilitySearchMenu});
    }

    pub fn isAccessibilitySelected(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isAccessibilitySelected", objc.BOOL, .{});
    }

    pub fn setAccessibilitySelected(self: *@This(), accessibilitySelected: objc.BOOL) void {
        return objc.msgSend(self, "setAccessibilitySelected:", void, .{accessibilitySelected});
    }

    pub fn accessibilitySelectedChildren(self: *@This()) ?*Array {
        return objc.msgSend(self, "accessibilitySelectedChildren", ?*Array, .{});
    }

    pub fn setAccessibilitySelectedChildren(self: *@This(), accessibilitySelectedChildren: ?*Array) void {
        return objc.msgSend(self, "setAccessibilitySelectedChildren:", void, .{accessibilitySelectedChildren});
    }

    pub fn accessibilityServesAsTitleForUIElements(self: *@This()) ?*Array {
        return objc.msgSend(self, "accessibilityServesAsTitleForUIElements", ?*Array, .{});
    }

    pub fn setAccessibilityServesAsTitleForUIElements(self: *@This(), accessibilityServesAsTitleForUIElements: ?*Array) void {
        return objc.msgSend(self, "setAccessibilityServesAsTitleForUIElements:", void, .{accessibilityServesAsTitleForUIElements});
    }

    pub fn accessibilityShownMenu(self: *@This()) *objc.Id {
        return objc.msgSend(self, "accessibilityShownMenu", *objc.Id, .{});
    }

    pub fn setAccessibilityShownMenu(self: *@This(), accessibilityShownMenu: *objc.Id) void {
        return objc.msgSend(self, "setAccessibilityShownMenu:", void, .{accessibilityShownMenu});
    }

    pub fn accessibilityMinValue(self: *@This()) *objc.Id {
        return objc.msgSend(self, "accessibilityMinValue", *objc.Id, .{});
    }

    pub fn setAccessibilityMinValue(self: *@This(), accessibilityMinValue: *objc.Id) void {
        return objc.msgSend(self, "setAccessibilityMinValue:", void, .{accessibilityMinValue});
    }

    pub fn accessibilityMaxValue(self: *@This()) *objc.Id {
        return objc.msgSend(self, "accessibilityMaxValue", *objc.Id, .{});
    }

    pub fn setAccessibilityMaxValue(self: *@This(), accessibilityMaxValue: *objc.Id) void {
        return objc.msgSend(self, "setAccessibilityMaxValue:", void, .{accessibilityMaxValue});
    }

    pub fn accessibilityLinkedUIElements(self: *@This()) ?*Array {
        return objc.msgSend(self, "accessibilityLinkedUIElements", ?*Array, .{});
    }

    pub fn setAccessibilityLinkedUIElements(self: *@This(), accessibilityLinkedUIElements: ?*Array) void {
        return objc.msgSend(self, "setAccessibilityLinkedUIElements:", void, .{accessibilityLinkedUIElements});
    }

    pub fn accessibilityWindow(self: *@This()) *objc.Id {
        return objc.msgSend(self, "accessibilityWindow", *objc.Id, .{});
    }

    pub fn setAccessibilityWindow(self: *@This(), accessibilityWindow: *objc.Id) void {
        return objc.msgSend(self, "setAccessibilityWindow:", void, .{accessibilityWindow});
    }

    pub fn accessibilityIdentifier(self: *@This()) ?*String {
        return objc.msgSend(self, "accessibilityIdentifier", ?*String, .{});
    }

    pub fn setAccessibilityIdentifier(self: *@This(), accessibilityIdentifier: ?*String) void {
        return objc.msgSend(self, "setAccessibilityIdentifier:", void, .{accessibilityIdentifier});
    }

    pub fn accessibilityHelp(self: *@This()) ?*String {
        return objc.msgSend(self, "accessibilityHelp", ?*String, .{});
    }

    pub fn setAccessibilityHelp(self: *@This(), accessibilityHelp: ?*String) void {
        return objc.msgSend(self, "setAccessibilityHelp:", void, .{accessibilityHelp});
    }

    pub fn accessibilityFilename(self: *@This()) ?*String {
        return objc.msgSend(self, "accessibilityFilename", ?*String, .{});
    }

    pub fn setAccessibilityFilename(self: *@This(), accessibilityFilename: ?*String) void {
        return objc.msgSend(self, "setAccessibilityFilename:", void, .{accessibilityFilename});
    }

    pub fn isAccessibilityExpanded(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isAccessibilityExpanded", objc.BOOL, .{});
    }

    pub fn setAccessibilityExpanded(self: *@This(), accessibilityExpanded: objc.BOOL) void {
        return objc.msgSend(self, "setAccessibilityExpanded:", void, .{accessibilityExpanded});
    }

    pub fn isAccessibilityEdited(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isAccessibilityEdited", objc.BOOL, .{});
    }

    pub fn setAccessibilityEdited(self: *@This(), accessibilityEdited: objc.BOOL) void {
        return objc.msgSend(self, "setAccessibilityEdited:", void, .{accessibilityEdited});
    }

    pub fn isAccessibilityEnabled(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isAccessibilityEnabled", objc.BOOL, .{});
    }

    pub fn setAccessibilityEnabled(self: *@This(), accessibilityEnabled: objc.BOOL) void {
        return objc.msgSend(self, "setAccessibilityEnabled:", void, .{accessibilityEnabled});
    }

    pub fn accessibilityChildren(self: *@This()) ?*Array {
        return objc.msgSend(self, "accessibilityChildren", ?*Array, .{});
    }

    pub fn setAccessibilityChildren(self: *@This(), accessibilityChildren: ?*Array) void {
        return objc.msgSend(self, "setAccessibilityChildren:", void, .{accessibilityChildren});
    }

    pub fn accessibilityChildrenInNavigationOrder(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "accessibilityChildrenInNavigationOrder", ?*anyopaque, .{});
    }

    pub fn setAccessibilityChildrenInNavigationOrder(self: *@This(), accessibilityChildrenInNavigationOrder: ?*anyopaque) void {
        return objc.msgSend(self, "setAccessibilityChildrenInNavigationOrder:", void, .{accessibilityChildrenInNavigationOrder});
    }

    pub fn accessibilityClearButton(self: *@This()) *objc.Id {
        return objc.msgSend(self, "accessibilityClearButton", *objc.Id, .{});
    }

    pub fn setAccessibilityClearButton(self: *@This(), accessibilityClearButton: *objc.Id) void {
        return objc.msgSend(self, "setAccessibilityClearButton:", void, .{accessibilityClearButton});
    }

    pub fn accessibilityCancelButton(self: *@This()) *objc.Id {
        return objc.msgSend(self, "accessibilityCancelButton", *objc.Id, .{});
    }

    pub fn setAccessibilityCancelButton(self: *@This(), accessibilityCancelButton: *objc.Id) void {
        return objc.msgSend(self, "setAccessibilityCancelButton:", void, .{accessibilityCancelButton});
    }

    pub fn isAccessibilityProtectedContent(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isAccessibilityProtectedContent", objc.BOOL, .{});
    }

    pub fn setAccessibilityProtectedContent(self: *@This(), accessibilityProtectedContent: objc.BOOL) void {
        return objc.msgSend(self, "setAccessibilityProtectedContent:", void, .{accessibilityProtectedContent});
    }

    pub fn accessibilityContents(self: *@This()) ?*Array {
        return objc.msgSend(self, "accessibilityContents", ?*Array, .{});
    }

    pub fn setAccessibilityContents(self: *@This(), accessibilityContents: ?*Array) void {
        return objc.msgSend(self, "setAccessibilityContents:", void, .{accessibilityContents});
    }

    pub fn accessibilityLabel(self: *@This()) ?*String {
        return objc.msgSend(self, "accessibilityLabel", ?*String, .{});
    }

    pub fn setAccessibilityLabel(self: *@This(), accessibilityLabel: ?*String) void {
        return objc.msgSend(self, "setAccessibilityLabel:", void, .{accessibilityLabel});
    }

    pub fn isAccessibilityAlternateUIVisible(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isAccessibilityAlternateUIVisible", objc.BOOL, .{});
    }

    pub fn setAccessibilityAlternateUIVisible(self: *@This(), accessibilityAlternateUIVisible: objc.BOOL) void {
        return objc.msgSend(self, "setAccessibilityAlternateUIVisible:", void, .{accessibilityAlternateUIVisible});
    }

    pub fn accessibilitySharedFocusElements(self: *@This()) ?*Array {
        return objc.msgSend(self, "accessibilitySharedFocusElements", ?*Array, .{});
    }

    pub fn setAccessibilitySharedFocusElements(self: *@This(), accessibilitySharedFocusElements: ?*Array) void {
        return objc.msgSend(self, "setAccessibilitySharedFocusElements:", void, .{accessibilitySharedFocusElements});
    }

    pub fn isAccessibilityRequired(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isAccessibilityRequired", objc.BOOL, .{});
    }

    pub fn setAccessibilityRequired(self: *@This(), accessibilityRequired: objc.BOOL) void {
        return objc.msgSend(self, "setAccessibilityRequired:", void, .{accessibilityRequired});
    }

    pub fn accessibilityCustomRotors(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "accessibilityCustomRotors", ?*anyopaque, .{});
    }

    pub fn setAccessibilityCustomRotors(self: *@This(), accessibilityCustomRotors: ?*anyopaque) void {
        return objc.msgSend(self, "setAccessibilityCustomRotors:", void, .{accessibilityCustomRotors});
    }

    pub fn accessibilityUserInputLabels(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "accessibilityUserInputLabels", ?*anyopaque, .{});
    }

    pub fn setAccessibilityUserInputLabels(self: *@This(), accessibilityUserInputLabels: ?*anyopaque) void {
        return objc.msgSend(self, "setAccessibilityUserInputLabels:", void, .{accessibilityUserInputLabels});
    }

    pub fn accessibilityAttributedUserInputLabels(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "accessibilityAttributedUserInputLabels", ?*anyopaque, .{});
    }

    pub fn setAccessibilityAttributedUserInputLabels(self: *@This(), accessibilityAttributedUserInputLabels: ?*anyopaque) void {
        return objc.msgSend(self, "setAccessibilityAttributedUserInputLabels:", void, .{accessibilityAttributedUserInputLabels});
    }

    pub fn accessibilityApplicationFocusedUIElement(self: *@This()) *objc.Id {
        return objc.msgSend(self, "accessibilityApplicationFocusedUIElement", *objc.Id, .{});
    }

    pub fn setAccessibilityApplicationFocusedUIElement(self: *@This(), accessibilityApplicationFocusedUIElement: *objc.Id) void {
        return objc.msgSend(self, "setAccessibilityApplicationFocusedUIElement:", void, .{accessibilityApplicationFocusedUIElement});
    }

    pub fn accessibilityMainWindow(self: *@This()) *objc.Id {
        return objc.msgSend(self, "accessibilityMainWindow", *objc.Id, .{});
    }

    pub fn setAccessibilityMainWindow(self: *@This(), accessibilityMainWindow: *objc.Id) void {
        return objc.msgSend(self, "setAccessibilityMainWindow:", void, .{accessibilityMainWindow});
    }

    pub fn isAccessibilityHidden(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isAccessibilityHidden", objc.BOOL, .{});
    }

    pub fn setAccessibilityHidden(self: *@This(), accessibilityHidden: objc.BOOL) void {
        return objc.msgSend(self, "setAccessibilityHidden:", void, .{accessibilityHidden});
    }

    pub fn isAccessibilityFrontmost(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isAccessibilityFrontmost", objc.BOOL, .{});
    }

    pub fn setAccessibilityFrontmost(self: *@This(), accessibilityFrontmost: objc.BOOL) void {
        return objc.msgSend(self, "setAccessibilityFrontmost:", void, .{accessibilityFrontmost});
    }

    pub fn accessibilityFocusedWindow(self: *@This()) *objc.Id {
        return objc.msgSend(self, "accessibilityFocusedWindow", *objc.Id, .{});
    }

    pub fn setAccessibilityFocusedWindow(self: *@This(), accessibilityFocusedWindow: *objc.Id) void {
        return objc.msgSend(self, "setAccessibilityFocusedWindow:", void, .{accessibilityFocusedWindow});
    }

    pub fn accessibilityWindows(self: *@This()) ?*Array {
        return objc.msgSend(self, "accessibilityWindows", ?*Array, .{});
    }

    pub fn setAccessibilityWindows(self: *@This(), accessibilityWindows: ?*Array) void {
        return objc.msgSend(self, "setAccessibilityWindows:", void, .{accessibilityWindows});
    }

    pub fn accessibilityExtrasMenuBar(self: *@This()) *objc.Id {
        return objc.msgSend(self, "accessibilityExtrasMenuBar", *objc.Id, .{});
    }

    pub fn setAccessibilityExtrasMenuBar(self: *@This(), accessibilityExtrasMenuBar: *objc.Id) void {
        return objc.msgSend(self, "setAccessibilityExtrasMenuBar:", void, .{accessibilityExtrasMenuBar});
    }

    pub fn accessibilityMenuBar(self: *@This()) *objc.Id {
        return objc.msgSend(self, "accessibilityMenuBar", *objc.Id, .{});
    }

    pub fn setAccessibilityMenuBar(self: *@This(), accessibilityMenuBar: *objc.Id) void {
        return objc.msgSend(self, "setAccessibilityMenuBar:", void, .{accessibilityMenuBar});
    }

    pub fn accessibilityColumnTitles(self: *@This()) ?*Array {
        return objc.msgSend(self, "accessibilityColumnTitles", ?*Array, .{});
    }

    pub fn setAccessibilityColumnTitles(self: *@This(), accessibilityColumnTitles: ?*Array) void {
        return objc.msgSend(self, "setAccessibilityColumnTitles:", void, .{accessibilityColumnTitles});
    }

    pub fn isAccessibilityOrderedByRow(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isAccessibilityOrderedByRow", objc.BOOL, .{});
    }

    pub fn setAccessibilityOrderedByRow(self: *@This(), accessibilityOrderedByRow: objc.BOOL) void {
        return objc.msgSend(self, "setAccessibilityOrderedByRow:", void, .{accessibilityOrderedByRow});
    }

    pub fn accessibilityHorizontalUnits(self: *@This()) AccessibilityUnits {
        return objc.msgSend(self, "accessibilityHorizontalUnits", AccessibilityUnits, .{});
    }

    pub fn setAccessibilityHorizontalUnits(self: *@This(), accessibilityHorizontalUnits: AccessibilityUnits) void {
        return objc.msgSend(self, "setAccessibilityHorizontalUnits:", void, .{accessibilityHorizontalUnits});
    }

    pub fn accessibilityVerticalUnits(self: *@This()) AccessibilityUnits {
        return objc.msgSend(self, "accessibilityVerticalUnits", AccessibilityUnits, .{});
    }

    pub fn setAccessibilityVerticalUnits(self: *@This(), accessibilityVerticalUnits: AccessibilityUnits) void {
        return objc.msgSend(self, "setAccessibilityVerticalUnits:", void, .{accessibilityVerticalUnits});
    }

    pub fn accessibilityHorizontalUnitDescription(self: *@This()) ?*String {
        return objc.msgSend(self, "accessibilityHorizontalUnitDescription", ?*String, .{});
    }

    pub fn setAccessibilityHorizontalUnitDescription(self: *@This(), accessibilityHorizontalUnitDescription: ?*String) void {
        return objc.msgSend(self, "setAccessibilityHorizontalUnitDescription:", void, .{accessibilityHorizontalUnitDescription});
    }

    pub fn accessibilityVerticalUnitDescription(self: *@This()) ?*String {
        return objc.msgSend(self, "accessibilityVerticalUnitDescription", ?*String, .{});
    }

    pub fn setAccessibilityVerticalUnitDescription(self: *@This(), accessibilityVerticalUnitDescription: ?*String) void {
        return objc.msgSend(self, "setAccessibilityVerticalUnitDescription:", void, .{accessibilityVerticalUnitDescription});
    }

    pub fn accessibilityHandles(self: *@This()) ?*Array {
        return objc.msgSend(self, "accessibilityHandles", ?*Array, .{});
    }

    pub fn setAccessibilityHandles(self: *@This(), accessibilityHandles: ?*Array) void {
        return objc.msgSend(self, "setAccessibilityHandles:", void, .{accessibilityHandles});
    }

    pub fn accessibilityWarningValue(self: *@This()) *objc.Id {
        return objc.msgSend(self, "accessibilityWarningValue", *objc.Id, .{});
    }

    pub fn setAccessibilityWarningValue(self: *@This(), accessibilityWarningValue: *objc.Id) void {
        return objc.msgSend(self, "setAccessibilityWarningValue:", void, .{accessibilityWarningValue});
    }

    pub fn accessibilityCriticalValue(self: *@This()) *objc.Id {
        return objc.msgSend(self, "accessibilityCriticalValue", *objc.Id, .{});
    }

    pub fn setAccessibilityCriticalValue(self: *@This(), accessibilityCriticalValue: *objc.Id) void {
        return objc.msgSend(self, "setAccessibilityCriticalValue:", void, .{accessibilityCriticalValue});
    }

    pub fn isAccessibilityDisclosed(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isAccessibilityDisclosed", objc.BOOL, .{});
    }

    pub fn setAccessibilityDisclosed(self: *@This(), accessibilityDisclosed: objc.BOOL) void {
        return objc.msgSend(self, "setAccessibilityDisclosed:", void, .{accessibilityDisclosed});
    }

    pub fn accessibilityDisclosedByRow(self: *@This()) *objc.Id {
        return objc.msgSend(self, "accessibilityDisclosedByRow", *objc.Id, .{});
    }

    pub fn setAccessibilityDisclosedByRow(self: *@This(), accessibilityDisclosedByRow: *objc.Id) void {
        return objc.msgSend(self, "setAccessibilityDisclosedByRow:", void, .{accessibilityDisclosedByRow});
    }

    pub fn accessibilityDisclosedRows(self: *@This()) *objc.Id {
        return objc.msgSend(self, "accessibilityDisclosedRows", *objc.Id, .{});
    }

    pub fn setAccessibilityDisclosedRows(self: *@This(), accessibilityDisclosedRows: *objc.Id) void {
        return objc.msgSend(self, "setAccessibilityDisclosedRows:", void, .{accessibilityDisclosedRows});
    }

    pub fn accessibilityDisclosureLevel(self: *@This()) objc.NSInteger {
        return objc.msgSend(self, "accessibilityDisclosureLevel", objc.NSInteger, .{});
    }

    pub fn setAccessibilityDisclosureLevel(self: *@This(), accessibilityDisclosureLevel: objc.NSInteger) void {
        return objc.msgSend(self, "setAccessibilityDisclosureLevel:", void, .{accessibilityDisclosureLevel});
    }

    pub fn accessibilityMarkerUIElements(self: *@This()) ?*Array {
        return objc.msgSend(self, "accessibilityMarkerUIElements", ?*Array, .{});
    }

    pub fn setAccessibilityMarkerUIElements(self: *@This(), accessibilityMarkerUIElements: ?*Array) void {
        return objc.msgSend(self, "setAccessibilityMarkerUIElements:", void, .{accessibilityMarkerUIElements});
    }

    pub fn accessibilityMarkerValues(self: *@This()) *objc.Id {
        return objc.msgSend(self, "accessibilityMarkerValues", *objc.Id, .{});
    }

    pub fn setAccessibilityMarkerValues(self: *@This(), accessibilityMarkerValues: *objc.Id) void {
        return objc.msgSend(self, "setAccessibilityMarkerValues:", void, .{accessibilityMarkerValues});
    }

    pub fn accessibilityMarkerGroupUIElement(self: *@This()) *objc.Id {
        return objc.msgSend(self, "accessibilityMarkerGroupUIElement", *objc.Id, .{});
    }

    pub fn setAccessibilityMarkerGroupUIElement(self: *@This(), accessibilityMarkerGroupUIElement: *objc.Id) void {
        return objc.msgSend(self, "setAccessibilityMarkerGroupUIElement:", void, .{accessibilityMarkerGroupUIElement});
    }

    pub fn accessibilityUnits(self: *@This()) AccessibilityUnits {
        return objc.msgSend(self, "accessibilityUnits", AccessibilityUnits, .{});
    }

    pub fn setAccessibilityUnits(self: *@This(), accessibilityUnits: AccessibilityUnits) void {
        return objc.msgSend(self, "setAccessibilityUnits:", void, .{accessibilityUnits});
    }

    pub fn accessibilityUnitDescription(self: *@This()) ?*String {
        return objc.msgSend(self, "accessibilityUnitDescription", ?*String, .{});
    }

    pub fn setAccessibilityUnitDescription(self: *@This(), accessibilityUnitDescription: ?*String) void {
        return objc.msgSend(self, "setAccessibilityUnitDescription:", void, .{accessibilityUnitDescription});
    }

    pub fn accessibilityRulerMarkerType(self: *@This()) AccessibilityRulerMarkerType {
        return objc.msgSend(self, "accessibilityRulerMarkerType", AccessibilityRulerMarkerType, .{});
    }

    pub fn setAccessibilityRulerMarkerType(self: *@This(), accessibilityRulerMarkerType: AccessibilityRulerMarkerType) void {
        return objc.msgSend(self, "setAccessibilityRulerMarkerType:", void, .{accessibilityRulerMarkerType});
    }

    pub fn accessibilityMarkerTypeDescription(self: *@This()) ?*String {
        return objc.msgSend(self, "accessibilityMarkerTypeDescription", ?*String, .{});
    }

    pub fn setAccessibilityMarkerTypeDescription(self: *@This(), accessibilityMarkerTypeDescription: ?*String) void {
        return objc.msgSend(self, "setAccessibilityMarkerTypeDescription:", void, .{accessibilityMarkerTypeDescription});
    }

    pub fn accessibilityHorizontalScrollBar(self: *@This()) *objc.Id {
        return objc.msgSend(self, "accessibilityHorizontalScrollBar", *objc.Id, .{});
    }

    pub fn setAccessibilityHorizontalScrollBar(self: *@This(), accessibilityHorizontalScrollBar: *objc.Id) void {
        return objc.msgSend(self, "setAccessibilityHorizontalScrollBar:", void, .{accessibilityHorizontalScrollBar});
    }

    pub fn accessibilityVerticalScrollBar(self: *@This()) *objc.Id {
        return objc.msgSend(self, "accessibilityVerticalScrollBar", *objc.Id, .{});
    }

    pub fn setAccessibilityVerticalScrollBar(self: *@This(), accessibilityVerticalScrollBar: *objc.Id) void {
        return objc.msgSend(self, "setAccessibilityVerticalScrollBar:", void, .{accessibilityVerticalScrollBar});
    }

    pub fn accessibilityAllowedValues(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "accessibilityAllowedValues", ?*anyopaque, .{});
    }

    pub fn setAccessibilityAllowedValues(self: *@This(), accessibilityAllowedValues: ?*anyopaque) void {
        return objc.msgSend(self, "setAccessibilityAllowedValues:", void, .{accessibilityAllowedValues});
    }

    pub fn accessibilityLabelUIElements(self: *@This()) ?*Array {
        return objc.msgSend(self, "accessibilityLabelUIElements", ?*Array, .{});
    }

    pub fn setAccessibilityLabelUIElements(self: *@This(), accessibilityLabelUIElements: ?*Array) void {
        return objc.msgSend(self, "setAccessibilityLabelUIElements:", void, .{accessibilityLabelUIElements});
    }

    pub fn accessibilityLabelValue(self: *@This()) f32 {
        return objc.msgSend(self, "accessibilityLabelValue", f32, .{});
    }

    pub fn setAccessibilityLabelValue(self: *@This(), accessibilityLabelValue: f32) void {
        return objc.msgSend(self, "setAccessibilityLabelValue:", void, .{accessibilityLabelValue});
    }

    pub fn accessibilitySplitters(self: *@This()) ?*Array {
        return objc.msgSend(self, "accessibilitySplitters", ?*Array, .{});
    }

    pub fn setAccessibilitySplitters(self: *@This(), accessibilitySplitters: ?*Array) void {
        return objc.msgSend(self, "setAccessibilitySplitters:", void, .{accessibilitySplitters});
    }

    pub fn accessibilityDecrementButton(self: *@This()) *objc.Id {
        return objc.msgSend(self, "accessibilityDecrementButton", *objc.Id, .{});
    }

    pub fn setAccessibilityDecrementButton(self: *@This(), accessibilityDecrementButton: *objc.Id) void {
        return objc.msgSend(self, "setAccessibilityDecrementButton:", void, .{accessibilityDecrementButton});
    }

    pub fn accessibilityIncrementButton(self: *@This()) *objc.Id {
        return objc.msgSend(self, "accessibilityIncrementButton", *objc.Id, .{});
    }

    pub fn setAccessibilityIncrementButton(self: *@This(), accessibilityIncrementButton: *objc.Id) void {
        return objc.msgSend(self, "setAccessibilityIncrementButton:", void, .{accessibilityIncrementButton});
    }

    pub fn accessibilityTabs(self: *@This()) ?*Array {
        return objc.msgSend(self, "accessibilityTabs", ?*Array, .{});
    }

    pub fn setAccessibilityTabs(self: *@This(), accessibilityTabs: ?*Array) void {
        return objc.msgSend(self, "setAccessibilityTabs:", void, .{accessibilityTabs});
    }

    pub fn accessibilityHeader(self: *@This()) *objc.Id {
        return objc.msgSend(self, "accessibilityHeader", *objc.Id, .{});
    }

    pub fn setAccessibilityHeader(self: *@This(), accessibilityHeader: *objc.Id) void {
        return objc.msgSend(self, "setAccessibilityHeader:", void, .{accessibilityHeader});
    }

    pub fn accessibilityColumnCount(self: *@This()) objc.NSInteger {
        return objc.msgSend(self, "accessibilityColumnCount", objc.NSInteger, .{});
    }

    pub fn setAccessibilityColumnCount(self: *@This(), accessibilityColumnCount: objc.NSInteger) void {
        return objc.msgSend(self, "setAccessibilityColumnCount:", void, .{accessibilityColumnCount});
    }

    pub fn accessibilityRowCount(self: *@This()) objc.NSInteger {
        return objc.msgSend(self, "accessibilityRowCount", objc.NSInteger, .{});
    }

    pub fn setAccessibilityRowCount(self: *@This(), accessibilityRowCount: objc.NSInteger) void {
        return objc.msgSend(self, "setAccessibilityRowCount:", void, .{accessibilityRowCount});
    }

    pub fn accessibilityIndex(self: *@This()) objc.NSInteger {
        return objc.msgSend(self, "accessibilityIndex", objc.NSInteger, .{});
    }

    pub fn setAccessibilityIndex(self: *@This(), accessibilityIndex: objc.NSInteger) void {
        return objc.msgSend(self, "setAccessibilityIndex:", void, .{accessibilityIndex});
    }

    pub fn accessibilityColumns(self: *@This()) ?*Array {
        return objc.msgSend(self, "accessibilityColumns", ?*Array, .{});
    }

    pub fn setAccessibilityColumns(self: *@This(), accessibilityColumns: ?*Array) void {
        return objc.msgSend(self, "setAccessibilityColumns:", void, .{accessibilityColumns});
    }

    pub fn accessibilityRows(self: *@This()) ?*Array {
        return objc.msgSend(self, "accessibilityRows", ?*Array, .{});
    }

    pub fn setAccessibilityRows(self: *@This(), accessibilityRows: ?*Array) void {
        return objc.msgSend(self, "setAccessibilityRows:", void, .{accessibilityRows});
    }

    pub fn accessibilityVisibleRows(self: *@This()) ?*Array {
        return objc.msgSend(self, "accessibilityVisibleRows", ?*Array, .{});
    }

    pub fn setAccessibilityVisibleRows(self: *@This(), accessibilityVisibleRows: ?*Array) void {
        return objc.msgSend(self, "setAccessibilityVisibleRows:", void, .{accessibilityVisibleRows});
    }

    pub fn accessibilitySelectedRows(self: *@This()) ?*Array {
        return objc.msgSend(self, "accessibilitySelectedRows", ?*Array, .{});
    }

    pub fn setAccessibilitySelectedRows(self: *@This(), accessibilitySelectedRows: ?*Array) void {
        return objc.msgSend(self, "setAccessibilitySelectedRows:", void, .{accessibilitySelectedRows});
    }

    pub fn accessibilityVisibleColumns(self: *@This()) ?*Array {
        return objc.msgSend(self, "accessibilityVisibleColumns", ?*Array, .{});
    }

    pub fn setAccessibilityVisibleColumns(self: *@This(), accessibilityVisibleColumns: ?*Array) void {
        return objc.msgSend(self, "setAccessibilityVisibleColumns:", void, .{accessibilityVisibleColumns});
    }

    pub fn accessibilitySelectedColumns(self: *@This()) ?*Array {
        return objc.msgSend(self, "accessibilitySelectedColumns", ?*Array, .{});
    }

    pub fn setAccessibilitySelectedColumns(self: *@This(), accessibilitySelectedColumns: ?*Array) void {
        return objc.msgSend(self, "setAccessibilitySelectedColumns:", void, .{accessibilitySelectedColumns});
    }

    pub fn accessibilitySortDirection(self: *@This()) AccessibilitySortDirection {
        return objc.msgSend(self, "accessibilitySortDirection", AccessibilitySortDirection, .{});
    }

    pub fn setAccessibilitySortDirection(self: *@This(), accessibilitySortDirection: AccessibilitySortDirection) void {
        return objc.msgSend(self, "setAccessibilitySortDirection:", void, .{accessibilitySortDirection});
    }

    pub fn accessibilityRowHeaderUIElements(self: *@This()) ?*Array {
        return objc.msgSend(self, "accessibilityRowHeaderUIElements", ?*Array, .{});
    }

    pub fn setAccessibilityRowHeaderUIElements(self: *@This(), accessibilityRowHeaderUIElements: ?*Array) void {
        return objc.msgSend(self, "setAccessibilityRowHeaderUIElements:", void, .{accessibilityRowHeaderUIElements});
    }

    pub fn accessibilitySelectedCells(self: *@This()) ?*Array {
        return objc.msgSend(self, "accessibilitySelectedCells", ?*Array, .{});
    }

    pub fn setAccessibilitySelectedCells(self: *@This(), accessibilitySelectedCells: ?*Array) void {
        return objc.msgSend(self, "setAccessibilitySelectedCells:", void, .{accessibilitySelectedCells});
    }

    pub fn accessibilityVisibleCells(self: *@This()) ?*Array {
        return objc.msgSend(self, "accessibilityVisibleCells", ?*Array, .{});
    }

    pub fn setAccessibilityVisibleCells(self: *@This(), accessibilityVisibleCells: ?*Array) void {
        return objc.msgSend(self, "setAccessibilityVisibleCells:", void, .{accessibilityVisibleCells});
    }

    pub fn accessibilityColumnHeaderUIElements(self: *@This()) ?*Array {
        return objc.msgSend(self, "accessibilityColumnHeaderUIElements", ?*Array, .{});
    }

    pub fn setAccessibilityColumnHeaderUIElements(self: *@This(), accessibilityColumnHeaderUIElements: ?*Array) void {
        return objc.msgSend(self, "setAccessibilityColumnHeaderUIElements:", void, .{accessibilityColumnHeaderUIElements});
    }

    pub fn accessibilityRowIndexRange(self: *@This()) foundation.Range {
        return objc.msgSend(self, "accessibilityRowIndexRange", foundation.Range, .{});
    }

    pub fn setAccessibilityRowIndexRange(self: *@This(), accessibilityRowIndexRange: foundation.Range) void {
        return objc.msgSend(self, "setAccessibilityRowIndexRange:", void, .{accessibilityRowIndexRange});
    }

    pub fn accessibilityColumnIndexRange(self: *@This()) foundation.Range {
        return objc.msgSend(self, "accessibilityColumnIndexRange", foundation.Range, .{});
    }

    pub fn setAccessibilityColumnIndexRange(self: *@This(), accessibilityColumnIndexRange: foundation.Range) void {
        return objc.msgSend(self, "setAccessibilityColumnIndexRange:", void, .{accessibilityColumnIndexRange});
    }

    pub fn accessibilityInsertionPointLineNumber(self: *@This()) objc.NSInteger {
        return objc.msgSend(self, "accessibilityInsertionPointLineNumber", objc.NSInteger, .{});
    }

    pub fn setAccessibilityInsertionPointLineNumber(self: *@This(), accessibilityInsertionPointLineNumber: objc.NSInteger) void {
        return objc.msgSend(self, "setAccessibilityInsertionPointLineNumber:", void, .{accessibilityInsertionPointLineNumber});
    }

    pub fn accessibilitySharedCharacterRange(self: *@This()) foundation.Range {
        return objc.msgSend(self, "accessibilitySharedCharacterRange", foundation.Range, .{});
    }

    pub fn setAccessibilitySharedCharacterRange(self: *@This(), accessibilitySharedCharacterRange: foundation.Range) void {
        return objc.msgSend(self, "setAccessibilitySharedCharacterRange:", void, .{accessibilitySharedCharacterRange});
    }

    pub fn accessibilitySharedTextUIElements(self: *@This()) ?*Array {
        return objc.msgSend(self, "accessibilitySharedTextUIElements", ?*Array, .{});
    }

    pub fn setAccessibilitySharedTextUIElements(self: *@This(), accessibilitySharedTextUIElements: ?*Array) void {
        return objc.msgSend(self, "setAccessibilitySharedTextUIElements:", void, .{accessibilitySharedTextUIElements});
    }

    pub fn accessibilityVisibleCharacterRange(self: *@This()) foundation.Range {
        return objc.msgSend(self, "accessibilityVisibleCharacterRange", foundation.Range, .{});
    }

    pub fn setAccessibilityVisibleCharacterRange(self: *@This(), accessibilityVisibleCharacterRange: foundation.Range) void {
        return objc.msgSend(self, "setAccessibilityVisibleCharacterRange:", void, .{accessibilityVisibleCharacterRange});
    }

    pub fn accessibilityNumberOfCharacters(self: *@This()) objc.NSInteger {
        return objc.msgSend(self, "accessibilityNumberOfCharacters", objc.NSInteger, .{});
    }

    pub fn setAccessibilityNumberOfCharacters(self: *@This(), accessibilityNumberOfCharacters: objc.NSInteger) void {
        return objc.msgSend(self, "setAccessibilityNumberOfCharacters:", void, .{accessibilityNumberOfCharacters});
    }

    pub fn accessibilitySelectedText(self: *@This()) ?*String {
        return objc.msgSend(self, "accessibilitySelectedText", ?*String, .{});
    }

    pub fn setAccessibilitySelectedText(self: *@This(), accessibilitySelectedText: ?*String) void {
        return objc.msgSend(self, "setAccessibilitySelectedText:", void, .{accessibilitySelectedText});
    }

    pub fn accessibilitySelectedTextRange(self: *@This()) foundation.Range {
        return objc.msgSend(self, "accessibilitySelectedTextRange", foundation.Range, .{});
    }

    pub fn setAccessibilitySelectedTextRange(self: *@This(), accessibilitySelectedTextRange: foundation.Range) void {
        return objc.msgSend(self, "setAccessibilitySelectedTextRange:", void, .{accessibilitySelectedTextRange});
    }

    pub fn accessibilitySelectedTextRanges(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "accessibilitySelectedTextRanges", ?*anyopaque, .{});
    }

    pub fn setAccessibilitySelectedTextRanges(self: *@This(), accessibilitySelectedTextRanges: ?*anyopaque) void {
        return objc.msgSend(self, "setAccessibilitySelectedTextRanges:", void, .{accessibilitySelectedTextRanges});
    }

    pub fn accessibilityToolbarButton(self: *@This()) *objc.Id {
        return objc.msgSend(self, "accessibilityToolbarButton", *objc.Id, .{});
    }

    pub fn setAccessibilityToolbarButton(self: *@This(), accessibilityToolbarButton: *objc.Id) void {
        return objc.msgSend(self, "setAccessibilityToolbarButton:", void, .{accessibilityToolbarButton});
    }

    pub fn isAccessibilityModal(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isAccessibilityModal", objc.BOOL, .{});
    }

    pub fn setAccessibilityModal(self: *@This(), accessibilityModal: objc.BOOL) void {
        return objc.msgSend(self, "setAccessibilityModal:", void, .{accessibilityModal});
    }

    pub fn accessibilityProxy(self: *@This()) *objc.Id {
        return objc.msgSend(self, "accessibilityProxy", *objc.Id, .{});
    }

    pub fn setAccessibilityProxy(self: *@This(), accessibilityProxy: *objc.Id) void {
        return objc.msgSend(self, "setAccessibilityProxy:", void, .{accessibilityProxy});
    }

    pub fn isAccessibilityMain(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isAccessibilityMain", objc.BOOL, .{});
    }

    pub fn setAccessibilityMain(self: *@This(), accessibilityMain: objc.BOOL) void {
        return objc.msgSend(self, "setAccessibilityMain:", void, .{accessibilityMain});
    }

    pub fn accessibilityFullScreenButton(self: *@This()) *objc.Id {
        return objc.msgSend(self, "accessibilityFullScreenButton", *objc.Id, .{});
    }

    pub fn setAccessibilityFullScreenButton(self: *@This(), accessibilityFullScreenButton: *objc.Id) void {
        return objc.msgSend(self, "setAccessibilityFullScreenButton:", void, .{accessibilityFullScreenButton});
    }

    pub fn accessibilityGrowArea(self: *@This()) *objc.Id {
        return objc.msgSend(self, "accessibilityGrowArea", *objc.Id, .{});
    }

    pub fn setAccessibilityGrowArea(self: *@This(), accessibilityGrowArea: *objc.Id) void {
        return objc.msgSend(self, "setAccessibilityGrowArea:", void, .{accessibilityGrowArea});
    }

    pub fn accessibilityDocument(self: *@This()) ?*String {
        return objc.msgSend(self, "accessibilityDocument", ?*String, .{});
    }

    pub fn setAccessibilityDocument(self: *@This(), accessibilityDocument: ?*String) void {
        return objc.msgSend(self, "setAccessibilityDocument:", void, .{accessibilityDocument});
    }

    pub fn accessibilityDefaultButton(self: *@This()) *objc.Id {
        return objc.msgSend(self, "accessibilityDefaultButton", *objc.Id, .{});
    }

    pub fn setAccessibilityDefaultButton(self: *@This(), accessibilityDefaultButton: *objc.Id) void {
        return objc.msgSend(self, "setAccessibilityDefaultButton:", void, .{accessibilityDefaultButton});
    }

    pub fn accessibilityCloseButton(self: *@This()) *objc.Id {
        return objc.msgSend(self, "accessibilityCloseButton", *objc.Id, .{});
    }

    pub fn setAccessibilityCloseButton(self: *@This(), accessibilityCloseButton: *objc.Id) void {
        return objc.msgSend(self, "setAccessibilityCloseButton:", void, .{accessibilityCloseButton});
    }

    pub fn accessibilityZoomButton(self: *@This()) *objc.Id {
        return objc.msgSend(self, "accessibilityZoomButton", *objc.Id, .{});
    }

    pub fn setAccessibilityZoomButton(self: *@This(), accessibilityZoomButton: *objc.Id) void {
        return objc.msgSend(self, "setAccessibilityZoomButton:", void, .{accessibilityZoomButton});
    }

    pub fn accessibilityMinimizeButton(self: *@This()) *objc.Id {
        return objc.msgSend(self, "accessibilityMinimizeButton", *objc.Id, .{});
    }

    pub fn setAccessibilityMinimizeButton(self: *@This(), accessibilityMinimizeButton: *objc.Id) void {
        return objc.msgSend(self, "setAccessibilityMinimizeButton:", void, .{accessibilityMinimizeButton});
    }

    pub fn isAccessibilityMinimized(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isAccessibilityMinimized", objc.BOOL, .{});
    }

    pub fn setAccessibilityMinimized(self: *@This(), accessibilityMinimized: objc.BOOL) void {
        return objc.msgSend(self, "setAccessibilityMinimized:", void, .{accessibilityMinimized});
    }

    pub fn accessibilityCustomActions(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "accessibilityCustomActions", ?*anyopaque, .{});
    }

    pub fn setAccessibilityCustomActions(self: *@This(), accessibilityCustomActions: ?*anyopaque) void {
        return objc.msgSend(self, "setAccessibilityCustomActions:", void, .{accessibilityCustomActions});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSAccessibilityElement?language=objc
pub const AccessibilityElement = opaque {
    pub const InternalInfo = objc.ExternalClass("NSAccessibilityElement", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn accessibilityElementWithRoleFrameLabelParent(self: *@This(), role: AccessibilityRole, frame: foundation.Rect, label: ?*String, parent: *objc.Id, ) *objc.Id {
        return objc.msgSend(self, "accessibilityElementWithRole:frame:label:parent:", *objc.Id, .{role, frame, label, parent, });
    }

    pub fn accessibilityAddChildElement(self: *@This(), childElement: ?*AccessibilityElement) void {
        return objc.msgSend(self, "accessibilityAddChildElement:", void, .{childElement});
    }

    pub fn accessibilityFrameInParentSpace(self: *@This()) foundation.Rect {
        return objc.msgSend(self, "accessibilityFrameInParentSpace", foundation.Rect, .{});
    }

    pub fn setAccessibilityFrameInParentSpace(self: *@This(), accessibilityFrameInParentSpace: foundation.Rect) void {
        return objc.msgSend(self, "setAccessibilityFrameInParentSpace:", void, .{accessibilityFrameInParentSpace});
    }

};

pub const AccessibilityCustomRotorSearchDirection = enum(objc.NSInteger) {
    Previous = 0,
    Next = 1,
};

pub const AccessibilityCustomRotorType = enum(objc.NSInteger) {
    Custom = 0,
    Any = 1,
    Annotation = 2,
    BoldText = 3,
    Heading = 4,
    HeadingLevel1 = 5,
    HeadingLevel2 = 6,
    HeadingLevel3 = 7,
    HeadingLevel4 = 8,
    HeadingLevel5 = 9,
    HeadingLevel6 = 10,
    Image = 11,
    ItalicText = 12,
    Landmark = 13,
    Link = 14,
    List = 15,
    MisspelledWord = 16,
    Table = 17,
    TextField = 18,
    UnderlinedText = 19,
    VisitedLink = 20,
    Audiograph = 21,
};

/// https://developer.apple.com/documentation/AppKit/NSAccessibilityCustomRotor?language=objc
pub const AccessibilityCustomRotor = opaque {
    pub const InternalInfo = objc.ExternalClass("NSAccessibilityCustomRotor", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn initWithLabelItemSearchDelegate(self: *@This(), label: ?*String, itemSearchDelegate: ?*anyopaque) *@This() {
        return objc.msgSend(self, "initWithLabel:itemSearchDelegate:", *@This(), .{label, itemSearchDelegate});
    }

    pub fn initWithRotorTypeItemSearchDelegate(self: *@This(), rotorType: AccessibilityCustomRotorType, itemSearchDelegate: ?*anyopaque) *@This() {
        return objc.msgSend(self, "initWithRotorType:itemSearchDelegate:", *@This(), .{rotorType, itemSearchDelegate});
    }

    pub fn @"type"(self: *@This()) AccessibilityCustomRotorType {
        return objc.msgSend(self, "type", AccessibilityCustomRotorType, .{});
    }

    pub fn setType(self: *@This(), @"type": AccessibilityCustomRotorType) void {
        return objc.msgSend(self, "setType:", void, .{@"type"});
    }

    pub fn label(self: *@This()) ?*String {
        return objc.msgSend(self, "label", ?*String, .{});
    }

    pub fn setLabel(self: *@This(), label: ?*String) void {
        return objc.msgSend(self, "setLabel:", void, .{label});
    }

    pub fn itemSearchDelegate(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "itemSearchDelegate", ?*anyopaque, .{});
    }

    pub fn setItemSearchDelegate(self: *@This(), itemSearchDelegate: ?*anyopaque) void {
        return objc.msgSend(self, "setItemSearchDelegate:", void, .{itemSearchDelegate});
    }

    pub fn itemLoadingDelegate(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "itemLoadingDelegate", ?*anyopaque, .{});
    }

    pub fn setItemLoadingDelegate(self: *@This(), itemLoadingDelegate: ?*anyopaque) void {
        return objc.msgSend(self, "setItemLoadingDelegate:", void, .{itemLoadingDelegate});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSAccessibilityCustomRotorSearchParameters?language=objc
pub const AccessibilityCustomRotorSearchParameters = opaque {
    pub const InternalInfo = objc.ExternalClass("NSAccessibilityCustomRotorSearchParameters", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn currentItem(self: *@This()) ?*AccessibilityCustomRotorItemResult {
        return objc.msgSend(self, "currentItem", ?*AccessibilityCustomRotorItemResult, .{});
    }

    pub fn setCurrentItem(self: *@This(), currentItem: ?*AccessibilityCustomRotorItemResult) void {
        return objc.msgSend(self, "setCurrentItem:", void, .{currentItem});
    }

    pub fn searchDirection(self: *@This()) AccessibilityCustomRotorSearchDirection {
        return objc.msgSend(self, "searchDirection", AccessibilityCustomRotorSearchDirection, .{});
    }

    pub fn setSearchDirection(self: *@This(), searchDirection: AccessibilityCustomRotorSearchDirection) void {
        return objc.msgSend(self, "setSearchDirection:", void, .{searchDirection});
    }

    pub fn filterString(self: *@This()) ?*String {
        return objc.msgSend(self, "filterString", ?*String, .{});
    }

    pub fn setFilterString(self: *@This(), filterString: ?*String) void {
        return objc.msgSend(self, "setFilterString:", void, .{filterString});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSAccessibilityCustomRotorItemResult?language=objc
pub const AccessibilityCustomRotorItemResult = opaque {
    pub const InternalInfo = objc.ExternalClass("NSAccessibilityCustomRotorItemResult", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn new(self: *@This()) *@This() {
        return objc.msgSend(self, "new", *@This(), .{});
    }

    pub fn init(self: *@This()) *@This() {
        return objc.msgSend(self, "init", *@This(), .{});
    }

    pub fn initWithTargetElement(self: *@This(), targetElement: ?*anyopaque) *@This() {
        return objc.msgSend(self, "initWithTargetElement:", *@This(), .{targetElement});
    }

    pub fn initWithItemLoadingTokenCustomLabel(self: *@This(), itemLoadingToken: AccessibilityLoadingToken, customLabel: ?*String) *@This() {
        return objc.msgSend(self, "initWithItemLoadingToken:customLabel:", *@This(), .{itemLoadingToken, customLabel});
    }

    pub fn targetElement(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "targetElement", ?*anyopaque, .{});
    }

    pub fn itemLoadingToken(self: *@This()) AccessibilityLoadingToken {
        return objc.msgSend(self, "itemLoadingToken", AccessibilityLoadingToken, .{});
    }

    pub fn targetRange(self: *@This()) foundation.Range {
        return objc.msgSend(self, "targetRange", foundation.Range, .{});
    }

    pub fn setTargetRange(self: *@This(), targetRange: foundation.Range) void {
        return objc.msgSend(self, "setTargetRange:", void, .{targetRange});
    }

    pub fn customLabel(self: *@This()) ?*String {
        return objc.msgSend(self, "customLabel", ?*String, .{});
    }

    pub fn setCustomLabel(self: *@This(), customLabel: ?*String) void {
        return objc.msgSend(self, "setCustomLabel:", void, .{customLabel});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSAccessibilityCustomRotorItemSearchDelegate?language=objc
pub const AccessibilityCustomRotorItemSearchDelegate = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{objc.NSObject, });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn rotorResultForSearchParameters(self: *@This(), rotor: ?*AccessibilityCustomRotor, searchParameters: ?*AccessibilityCustomRotorSearchParameters) ?*AccessibilityCustomRotorItemResult {
        return objc.msgSend(self, "rotor:resultForSearchParameters:", ?*AccessibilityCustomRotorItemResult, .{rotor, searchParameters});
    }

};

pub const WorkspaceIconCreationOptions = enum(objc.NSUInteger) {
    ExcludeQuickDrawElementsIconCreationOption = 2,
    Exclude10_4ElementsIconCreationOption = 4,
};

/// https://developer.apple.com/documentation/AppKit/NSWorkspace?language=objc
pub const Workspace = opaque {
    pub const InternalInfo = objc.ExternalClass("NSWorkspace", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn openURL(self: *@This(), url: ?*URL) objc.BOOL {
        return objc.msgSend(self, "openURL:", objc.BOOL, .{url});
    }

    pub fn openURLConfigurationCompletionHandler(self: *@This(), url: ?*URL, configuration: ?*WorkspaceOpenConfiguration, completionHandler: *const fn(?*RunningApplication, ?*Error) callconv(.C) void) void {
        return objc.msgSend(self, "openURL:configuration:completionHandler:", void, .{url, configuration, completionHandler});
    }

    pub fn openURLsWithApplicationAtURLConfigurationCompletionHandler(self: *@This(), urls: ?*anyopaque, applicationURL: ?*URL, configuration: ?*WorkspaceOpenConfiguration, completionHandler: *const fn(?*RunningApplication, ?*Error) callconv(.C) void, ) void {
        return objc.msgSend(self, "openURLs:withApplicationAtURL:configuration:completionHandler:", void, .{urls, applicationURL, configuration, completionHandler, });
    }

    pub fn openApplicationAtURLConfigurationCompletionHandler(self: *@This(), applicationURL: ?*URL, configuration: ?*WorkspaceOpenConfiguration, completionHandler: *const fn(?*RunningApplication, ?*Error) callconv(.C) void) void {
        return objc.msgSend(self, "openApplicationAtURL:configuration:completionHandler:", void, .{applicationURL, configuration, completionHandler});
    }

    pub fn selectFileInFileViewerRootedAtPath(self: *@This(), fullPath: ?*String, rootFullPath: ?*String) objc.BOOL {
        return objc.msgSend(self, "selectFile:inFileViewerRootedAtPath:", objc.BOOL, .{fullPath, rootFullPath});
    }

    pub fn activateFileViewerSelectingURLs(self: *@This(), fileURLs: ?*anyopaque) void {
        return objc.msgSend(self, "activateFileViewerSelectingURLs:", void, .{fileURLs});
    }

    pub fn showSearchResultsForQueryString(self: *@This(), queryString: ?*String) objc.BOOL {
        return objc.msgSend(self, "showSearchResultsForQueryString:", objc.BOOL, .{queryString});
    }

    pub fn noteFileSystemChanged(self: *@This(), path: ?*String) void {
        return objc.msgSend(self, "noteFileSystemChanged:", void, .{path});
    }

    pub fn isFilePackageAtPath(self: *@This(), fullPath: ?*String) objc.BOOL {
        return objc.msgSend(self, "isFilePackageAtPath:", objc.BOOL, .{fullPath});
    }

    pub fn iconForFile(self: *@This(), fullPath: ?*String) ?*Image {
        return objc.msgSend(self, "iconForFile:", ?*Image, .{fullPath});
    }

    pub fn iconForFiles(self: *@This(), fullPaths: ?*anyopaque) ?*Image {
        return objc.msgSend(self, "iconForFiles:", ?*Image, .{fullPaths});
    }

    pub fn iconForContentType(self: *@This(), contentType: ?*UTType) ?*Image {
        return objc.msgSend(self, "iconForContentType:", ?*Image, .{contentType});
    }

    pub fn setIconForFileOptions(self: *@This(), image: ?*Image, fullPath: ?*String, options: WorkspaceIconCreationOptions) objc.BOOL {
        return objc.msgSend(self, "setIcon:forFile:options:", objc.BOOL, .{image, fullPath, options});
    }

    pub fn recycleURLsCompletionHandler(self: *@This(), URLs: ?*anyopaque, handler: *const fn(?*anyopaque, ?*Error) callconv(.C) void) void {
        return objc.msgSend(self, "recycleURLs:completionHandler:", void, .{URLs, handler});
    }

    pub fn duplicateURLsCompletionHandler(self: *@This(), URLs: ?*anyopaque, handler: *const fn(?*anyopaque, ?*Error) callconv(.C) void) void {
        return objc.msgSend(self, "duplicateURLs:completionHandler:", void, .{URLs, handler});
    }

    pub fn getFileSystemInfoForPathIsRemovableIsWritableIsUnmountableDescriptionType(self: *@This(), fullPath: ?*String, removableFlag: ?*objc.BOOL, writableFlag: ?*objc.BOOL, unmountableFlag: ?*objc.BOOL, description: ?*?*String, fileSystemType: ?*?*String, ) objc.BOOL {
        return objc.msgSend(self, "getFileSystemInfoForPath:isRemovable:isWritable:isUnmountable:description:type:", objc.BOOL, .{fullPath, removableFlag, writableFlag, unmountableFlag, description, fileSystemType, });
    }

    pub fn unmountAndEjectDeviceAtPath(self: *@This(), path: ?*String) objc.BOOL {
        return objc.msgSend(self, "unmountAndEjectDeviceAtPath:", objc.BOOL, .{path});
    }

    pub fn unmountAndEjectDeviceAtURLError(self: *@This(), url: ?*URL, @"error": ?*?*Error) objc.BOOL {
        return objc.msgSend(self, "unmountAndEjectDeviceAtURL:error:", objc.BOOL, .{url, @"error"});
    }

    pub fn extendPowerOffBy(self: *@This(), requested: objc.NSInteger) objc.NSInteger {
        return objc.msgSend(self, "extendPowerOffBy:", objc.NSInteger, .{requested});
    }

    pub fn hideOtherApplications(self: *@This()) void {
        return objc.msgSend(self, "hideOtherApplications", void, .{});
    }

    pub fn URLForApplicationWithBundleIdentifier(self: *@This(), bundleIdentifier: ?*String) ?*URL {
        return objc.msgSend(self, "URLForApplicationWithBundleIdentifier:", ?*URL, .{bundleIdentifier});
    }

    pub fn URLsForApplicationsWithBundleIdentifier(self: *@This(), bundleIdentifier: ?*String) ?*anyopaque {
        return objc.msgSend(self, "URLsForApplicationsWithBundleIdentifier:", ?*anyopaque, .{bundleIdentifier});
    }

    pub fn URLForApplicationToOpenURL(self: *@This(), url: ?*URL) ?*URL {
        return objc.msgSend(self, "URLForApplicationToOpenURL:", ?*URL, .{url});
    }

    pub fn URLsForApplicationsToOpenURL(self: *@This(), url: ?*URL) ?*anyopaque {
        return objc.msgSend(self, "URLsForApplicationsToOpenURL:", ?*anyopaque, .{url});
    }

    pub fn setDefaultApplicationAtURLToOpenContentTypeOfFileAtURLCompletionHandler(self: *@This(), applicationURL: ?*URL, url: ?*URL, completionHandler: *const fn(?*Error) callconv(.C) void) void {
        return objc.msgSend(self, "setDefaultApplicationAtURL:toOpenContentTypeOfFileAtURL:completionHandler:", void, .{applicationURL, url, completionHandler});
    }

    pub fn setDefaultApplicationAtURLToOpenURLsWithSchemeCompletionHandler(self: *@This(), applicationURL: ?*URL, urlScheme: ?*String, completionHandler: *const fn(?*Error) callconv(.C) void) void {
        return objc.msgSend(self, "setDefaultApplicationAtURL:toOpenURLsWithScheme:completionHandler:", void, .{applicationURL, urlScheme, completionHandler});
    }

    pub fn setDefaultApplicationAtURLToOpenFileAtURLCompletionHandler(self: *@This(), applicationURL: ?*URL, url: ?*URL, completionHandler: *const fn(?*Error) callconv(.C) void) void {
        return objc.msgSend(self, "setDefaultApplicationAtURL:toOpenFileAtURL:completionHandler:", void, .{applicationURL, url, completionHandler});
    }

    pub fn URLForApplicationToOpenContentType(self: *@This(), contentType: ?*UTType) ?*URL {
        return objc.msgSend(self, "URLForApplicationToOpenContentType:", ?*URL, .{contentType});
    }

    pub fn URLsForApplicationsToOpenContentType(self: *@This(), contentType: ?*UTType) ?*anyopaque {
        return objc.msgSend(self, "URLsForApplicationsToOpenContentType:", ?*anyopaque, .{contentType});
    }

    pub fn setDefaultApplicationAtURLToOpenContentTypeCompletionHandler(self: *@This(), applicationURL: ?*URL, contentType: ?*UTType, completionHandler: *const fn(?*Error) callconv(.C) void) void {
        return objc.msgSend(self, "setDefaultApplicationAtURL:toOpenContentType:completionHandler:", void, .{applicationURL, contentType, completionHandler});
    }

    pub fn sharedWorkspace(self: *@This()) ?*Workspace {
        return objc.msgSend(self, "sharedWorkspace", ?*Workspace, .{});
    }

    pub fn notificationCenter(self: *@This()) ?*NotificationCenter {
        return objc.msgSend(self, "notificationCenter", ?*NotificationCenter, .{});
    }

    pub fn fileLabels(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "fileLabels", ?*anyopaque, .{});
    }

    pub fn fileLabelColors(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "fileLabelColors", ?*anyopaque, .{});
    }

    pub fn frontmostApplication(self: *@This()) ?*RunningApplication {
        return objc.msgSend(self, "frontmostApplication", ?*RunningApplication, .{});
    }

    pub fn menuBarOwningApplication(self: *@This()) ?*RunningApplication {
        return objc.msgSend(self, "menuBarOwningApplication", ?*RunningApplication, .{});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSWorkspaceOpenConfiguration?language=objc
pub const WorkspaceOpenConfiguration = opaque {
    pub const InternalInfo = objc.ExternalClass("NSWorkspaceOpenConfiguration", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn configuration(self: *@This()) *@This() {
        return objc.msgSend(self, "configuration", *@This(), .{});
    }

    pub fn promptsUserIfNeeded(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "promptsUserIfNeeded", objc.BOOL, .{});
    }

    pub fn setPromptsUserIfNeeded(self: *@This(), promptsUserIfNeeded: objc.BOOL) void {
        return objc.msgSend(self, "setPromptsUserIfNeeded:", void, .{promptsUserIfNeeded});
    }

    pub fn addsToRecentItems(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "addsToRecentItems", objc.BOOL, .{});
    }

    pub fn setAddsToRecentItems(self: *@This(), addsToRecentItems: objc.BOOL) void {
        return objc.msgSend(self, "setAddsToRecentItems:", void, .{addsToRecentItems});
    }

    pub fn activates(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "activates", objc.BOOL, .{});
    }

    pub fn setActivates(self: *@This(), activates: objc.BOOL) void {
        return objc.msgSend(self, "setActivates:", void, .{activates});
    }

    pub fn hides(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "hides", objc.BOOL, .{});
    }

    pub fn setHides(self: *@This(), hides: objc.BOOL) void {
        return objc.msgSend(self, "setHides:", void, .{hides});
    }

    pub fn hidesOthers(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "hidesOthers", objc.BOOL, .{});
    }

    pub fn setHidesOthers(self: *@This(), hidesOthers: objc.BOOL) void {
        return objc.msgSend(self, "setHidesOthers:", void, .{hidesOthers});
    }

    pub fn isForPrinting(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isForPrinting", objc.BOOL, .{});
    }

    pub fn setForPrinting(self: *@This(), forPrinting: objc.BOOL) void {
        return objc.msgSend(self, "setForPrinting:", void, .{forPrinting});
    }

    pub fn createsNewApplicationInstance(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "createsNewApplicationInstance", objc.BOOL, .{});
    }

    pub fn setCreatesNewApplicationInstance(self: *@This(), createsNewApplicationInstance: objc.BOOL) void {
        return objc.msgSend(self, "setCreatesNewApplicationInstance:", void, .{createsNewApplicationInstance});
    }

    pub fn allowsRunningApplicationSubstitution(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "allowsRunningApplicationSubstitution", objc.BOOL, .{});
    }

    pub fn setAllowsRunningApplicationSubstitution(self: *@This(), allowsRunningApplicationSubstitution: objc.BOOL) void {
        return objc.msgSend(self, "setAllowsRunningApplicationSubstitution:", void, .{allowsRunningApplicationSubstitution});
    }

    pub fn arguments(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "arguments", ?*anyopaque, .{});
    }

    pub fn setArguments(self: *@This(), arguments: ?*anyopaque) void {
        return objc.msgSend(self, "setArguments:", void, .{arguments});
    }

    pub fn environment(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "environment", ?*anyopaque, .{});
    }

    pub fn setEnvironment(self: *@This(), environment: ?*anyopaque) void {
        return objc.msgSend(self, "setEnvironment:", void, .{environment});
    }

    pub fn appleEvent(self: *@This()) ?*AppleEventDescriptor {
        return objc.msgSend(self, "appleEvent", ?*AppleEventDescriptor, .{});
    }

    pub fn setAppleEvent(self: *@This(), appleEvent: ?*AppleEventDescriptor) void {
        return objc.msgSend(self, "setAppleEvent:", void, .{appleEvent});
    }

    pub fn architecture(self: *@This()) objc.cpu_type_t {
        return objc.msgSend(self, "architecture", objc.cpu_type_t, .{});
    }

    pub fn setArchitecture(self: *@This(), architecture: objc.cpu_type_t) void {
        return objc.msgSend(self, "setArchitecture:", void, .{architecture});
    }

    pub fn requiresUniversalLinks(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "requiresUniversalLinks", objc.BOOL, .{});
    }

    pub fn setRequiresUniversalLinks(self: *@This(), requiresUniversalLinks: objc.BOOL) void {
        return objc.msgSend(self, "setRequiresUniversalLinks:", void, .{requiresUniversalLinks});
    }

};

pub const WorkspaceDesktopImageOptionKey = ?*String;

pub const WorkspaceAuthorizationType = enum(objc.NSInteger) {
    CreateSymbolicLink = 0,
    SetAttributes = 1,
    ReplaceFile = 2,
};

/// https://developer.apple.com/documentation/AppKit/NSWorkspaceAuthorization?language=objc
pub const WorkspaceAuthorization = opaque {
    pub const InternalInfo = objc.ExternalClass("NSWorkspaceAuthorization", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;
};

pub const WorkspaceFileOperationName = ?*String;

pub const WorkspaceLaunchOptions = enum(objc.NSUInteger) {
    AndPrint = 2,
    WithErrorPresentation = 64,
    InhibitingBackgroundOnly = 128,
    WithoutAddingToRecents = 256,
    WithoutActivation = 512,
    Async = 65536,
    NewInstance = 524288,
    AndHide = 1048576,
    AndHideOthers = 2097152,
    Default = 65536,
    AllowingClassicStartup = 131072,
    PreferringClassic = 262144,
};

pub const WorkspaceLaunchConfigurationKey = ?*String;

pub extern "AppKit" fn AccessibilityFrameInView(parentView: ?*View, frame: foundation.Rect) callconv(.C) foundation.Rect;

pub extern "AppKit" fn AccessibilityPointInView(parentView: ?*View, point: foundation.Point) callconv(.C) foundation.Point;

pub extern "AppKit" fn AccessibilitySetMayContainProtectedContent(flag: objc.BOOL) callconv(.C) objc.BOOL;

pub extern "AppKit" fn AccessibilityRoleDescription(role: AccessibilityRole, subrole: AccessibilitySubrole) callconv(.C) ?*String;

pub extern "AppKit" fn AccessibilityRoleDescriptionForUIElement(element: *objc.Id) callconv(.C) ?*String;

pub extern "AppKit" fn AccessibilityActionDescription(action: AccessibilityActionName) callconv(.C) ?*String;

pub extern "AppKit" fn AccessibilityRaiseBadArgumentException(element: *objc.Id, attribute: AccessibilityAttributeName, value: *objc.Id) callconv(.C) void;

pub extern "AppKit" fn AccessibilityUnignoredAncestor(element: *objc.Id) callconv(.C) *objc.Id;

pub extern "AppKit" fn AccessibilityUnignoredDescendant(element: *objc.Id) callconv(.C) *objc.Id;

pub extern "AppKit" fn AccessibilityUnignoredChildren(originalChildren: ?*Array) callconv(.C) ?*Array;

pub extern "AppKit" fn AccessibilityUnignoredChildrenForOnlyChild(originalChild: *objc.Id) callconv(.C) ?*Array;

pub extern "AppKit" fn AccessibilityPostNotification(element: *objc.Id, notification: AccessibilityNotificationName) callconv(.C) void;

pub const TouchPhase = enum(objc.NSUInteger) {
    Began = 1,
    Moved = 2,
    Stationary = 4,
    Ended = 8,
    Cancelled = 16,
    Touching = 7,
    Any = -1,
};

pub const TouchType = enum(objc.NSInteger) {
    Direct = 0,
    Indirect = 1,
};

pub const TouchTypeMask = enum(objc.NSUInteger) {
    Direct = 1,
    Indirect = 2,
};

pub extern "AppKit" fn TouchTypeMaskFromType(@"type": TouchType) callconv(.C) TouchTypeMask;

/// https://developer.apple.com/documentation/AppKit/NSTouch?language=objc
pub const Touch = opaque {
    pub const InternalInfo = objc.ExternalClass("NSTouch", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn identity(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "identity", ?*anyopaque, .{});
    }

    pub fn phase(self: *@This()) TouchPhase {
        return objc.msgSend(self, "phase", TouchPhase, .{});
    }

    pub fn normalizedPosition(self: *@This()) foundation.Point {
        return objc.msgSend(self, "normalizedPosition", foundation.Point, .{});
    }

    pub fn isResting(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isResting", objc.BOOL, .{});
    }

    pub fn device(self: *@This()) *objc.Id {
        return objc.msgSend(self, "device", *objc.Id, .{});
    }

    pub fn deviceSize(self: *@This()) foundation.Size {
        return objc.msgSend(self, "deviceSize", foundation.Size, .{});
    }

};

pub const anon1471 = enum(u32) {
    NSControlGlyph = 16777215,
    NSNullGlyph = 0,
};

pub const EventType = enum(objc.NSUInteger) {
    LeftMouseDown = 1,
    LeftMouseUp = 2,
    RightMouseDown = 3,
    RightMouseUp = 4,
    MouseMoved = 5,
    LeftMouseDragged = 6,
    RightMouseDragged = 7,
    MouseEntered = 8,
    MouseExited = 9,
    KeyDown = 10,
    KeyUp = 11,
    FlagsChanged = 12,
    AppKitDefined = 13,
    SystemDefined = 14,
    ApplicationDefined = 15,
    Periodic = 16,
    CursorUpdate = 17,
    ScrollWheel = 22,
    TabletPoint = 23,
    TabletProximity = 24,
    OtherMouseDown = 25,
    OtherMouseUp = 26,
    OtherMouseDragged = 27,
    Gesture = 29,
    Magnify = 30,
    Swipe = 31,
    Rotate = 18,
    BeginGesture = 19,
    EndGesture = 20,
    SmartMagnify = 32,
    QuickLook = 33,
    Pressure = 34,
    DirectTouch = 37,
    ChangeMode = 38,
};

pub const EventMask = enum(u64) {
    LeftMouseDown = 2,
    LeftMouseUp = 4,
    RightMouseDown = 8,
    RightMouseUp = 16,
    MouseMoved = 32,
    LeftMouseDragged = 64,
    RightMouseDragged = 128,
    MouseEntered = 256,
    MouseExited = 512,
    KeyDown = 1024,
    KeyUp = 2048,
    FlagsChanged = 4096,
    AppKitDefined = 8192,
    SystemDefined = 16384,
    ApplicationDefined = 32768,
    Periodic = 65536,
    CursorUpdate = 131072,
    ScrollWheel = 4194304,
    TabletPoint = 8388608,
    TabletProximity = 16777216,
    OtherMouseDown = 33554432,
    OtherMouseUp = 67108864,
    OtherMouseDragged = 134217728,
    Gesture = 536870912,
    Magnify = 1073741824,
    Swipe = 2147483648,
    Rotate = 262144,
    BeginGesture = 524288,
    EndGesture = 1048576,
    SmartMagnify = 4294967296,
    Pressure = 17179869184,
    DirectTouch = 137438953472,
    ChangeMode = 274877906944,
    Any = -1,
};

pub extern "AppKit" fn EventMaskFromType(@"type": EventType) callconv(.C) EventMask;

pub const EventModifierFlags = enum(objc.NSUInteger) {
    CapsLock = 65536,
    Shift = 131072,
    Control = 262144,
    Option = 524288,
    Command = 1048576,
    NumericPad = 2097152,
    Help = 4194304,
    Function = 8388608,
    DeviceIndependentFlagsMask = 4294901760,
};

pub const PointingDeviceType = enum(objc.NSUInteger) {
    Unknown = 0,
    Pen = 1,
    Cursor = 2,
    Eraser = 3,
};

pub const EventButtonMask = enum(objc.NSUInteger) {
    PenTip = 1,
    PenLowerSide = 2,
    PenUpperSide = 4,
};

pub const EventPhase = enum(objc.NSUInteger) {
    None = 0,
    Began = 1,
    Stationary = 2,
    Changed = 4,
    Ended = 8,
    Cancelled = 16,
    MayBegin = 32,
};

pub const EventGestureAxis = enum(objc.NSInteger) {
    None = 0,
    Horizontal = 1,
    Vertical = 2,
};

pub const EventSwipeTrackingOptions = enum(objc.NSUInteger) {
    LockDirection = 1,
    ClampGestureAmount = 2,
};

pub const EventSubtype = enum(i16) {
    WindowExposed = 0,
    ApplicationActivated = 1,
    ApplicationDeactivated = 2,
    WindowMoved = 4,
    ScreenChanged = 8,
    PowerOff = 1,
    MouseEvent = 0,
    TabletPoint = 1,
    TabletProximity = 2,
    Touch = 3,
};

pub const PressureBehavior = enum(objc.NSInteger) {
    Unknown = -1,
    PrimaryDefault = 0,
    PrimaryClick = 1,
    PrimaryGeneric = 2,
    PrimaryAccelerator = 3,
    PrimaryDeepClick = 5,
    PrimaryDeepDrag = 6,
};

/// https://developer.apple.com/documentation/AppKit/NSEvent?language=objc
pub const Event = opaque {
    pub const InternalInfo = objc.ExternalClass("NSEvent", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn charactersByApplyingModifiers(self: *@This(), modifiers: EventModifierFlags) ?*application_services.NSString {
        return objc.msgSend(self, "charactersByApplyingModifiers:", ?*application_services.NSString, .{modifiers});
    }

    pub fn eventWithEventRef(self: *@This(), eventRef: ?*anyopaque) ?*Event {
        return objc.msgSend(self, "eventWithEventRef:", ?*Event, .{eventRef});
    }

    pub fn eventWithCGEvent(self: *@This(), cgEvent: core_graphics.EventRef) ?*Event {
        return objc.msgSend(self, "eventWithCGEvent:", ?*Event, .{cgEvent});
    }

    pub fn touchesMatchingPhaseInView(self: *@This(), phase: TouchPhase, view: ?*application_services.NSView) ?*anyopaque {
        return objc.msgSend(self, "touchesMatchingPhase:inView:", ?*anyopaque, .{phase, view});
    }

    pub fn allTouches(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "allTouches", ?*anyopaque, .{});
    }

    pub fn touchesForView(self: *@This(), view: ?*application_services.NSView) ?*anyopaque {
        return objc.msgSend(self, "touchesForView:", ?*anyopaque, .{view});
    }

    pub fn coalescedTouchesForTouch(self: *@This(), touch: ?*Touch) ?*anyopaque {
        return objc.msgSend(self, "coalescedTouchesForTouch:", ?*anyopaque, .{touch});
    }

    pub fn trackSwipeEventWithOptionsDampenAmountThresholdMinMaxUsingHandler(self: *@This(), options: EventSwipeTrackingOptions, minDampenThreshold: core_foundation.CGFloat, maxDampenThreshold: core_foundation.CGFloat, trackingHandler: *const fn(core_foundation.CGFloat, EventPhase, objc.BOOL, ?*objc.BOOL, ) callconv(.C) void, ) void {
        return objc.msgSend(self, "trackSwipeEventWithOptions:dampenAmountThresholdMin:max:usingHandler:", void, .{options, minDampenThreshold, maxDampenThreshold, trackingHandler, });
    }

    pub fn startPeriodicEventsAfterDelayWithPeriod(self: *@This(), delay: foundation.TimeInterval, period: foundation.TimeInterval) void {
        return objc.msgSend(self, "startPeriodicEventsAfterDelay:withPeriod:", void, .{delay, period});
    }

    pub fn stopPeriodicEvents(self: *@This()) void {
        return objc.msgSend(self, "stopPeriodicEvents", void, .{});
    }

    pub fn mouseEventWithTypeLocationModifierFlagsTimestampWindowNumberContextEventNumberClickCountPressure(self: *@This(), @"type": EventType, location: foundation.Point, flags: EventModifierFlags, time: foundation.TimeInterval, wNum: objc.NSInteger, unusedPassNil: ?*GraphicsContext, eNum: objc.NSInteger, cNum: objc.NSInteger, pressure: f32, ) ?*Event {
        return objc.msgSend(self, "mouseEventWithType:location:modifierFlags:timestamp:windowNumber:context:eventNumber:clickCount:pressure:", ?*Event, .{@"type", location, flags, time, wNum, unusedPassNil, eNum, cNum, pressure, });
    }

    pub fn keyEventWithTypeLocationModifierFlagsTimestampWindowNumberContextCharactersCharactersIgnoringModifiersIsARepeatKeyCode(self: *@This(), @"type": EventType, location: foundation.Point, flags: EventModifierFlags, time: foundation.TimeInterval, wNum: objc.NSInteger, unusedPassNil: ?*GraphicsContext, keys: ?*String, ukeys: ?*String, flag: objc.BOOL, code: u16, ) ?*Event {
        return objc.msgSend(self, "keyEventWithType:location:modifierFlags:timestamp:windowNumber:context:characters:charactersIgnoringModifiers:isARepeat:keyCode:", ?*Event, .{@"type", location, flags, time, wNum, unusedPassNil, keys, ukeys, flag, code, });
    }

    pub fn enterExitEventWithTypeLocationModifierFlagsTimestampWindowNumberContextEventNumberTrackingNumberUserData(self: *@This(), @"type": EventType, location: foundation.Point, flags: EventModifierFlags, time: foundation.TimeInterval, wNum: objc.NSInteger, unusedPassNil: ?*GraphicsContext, eNum: objc.NSInteger, tNum: objc.NSInteger, data: ?*anyopaque, ) ?*Event {
        return objc.msgSend(self, "enterExitEventWithType:location:modifierFlags:timestamp:windowNumber:context:eventNumber:trackingNumber:userData:", ?*Event, .{@"type", location, flags, time, wNum, unusedPassNil, eNum, tNum, data, });
    }

    pub fn otherEventWithTypeLocationModifierFlagsTimestampWindowNumberContextSubtypeData1Data2(self: *@This(), @"type": EventType, location: foundation.Point, flags: EventModifierFlags, time: foundation.TimeInterval, wNum: objc.NSInteger, unusedPassNil: ?*GraphicsContext, subtype: i16, d1: objc.NSInteger, d2: objc.NSInteger, ) ?*Event {
        return objc.msgSend(self, "otherEventWithType:location:modifierFlags:timestamp:windowNumber:context:subtype:data1:data2:", ?*Event, .{@"type", location, flags, time, wNum, unusedPassNil, subtype, d1, d2, });
    }

    pub fn addGlobalMonitorForEventsMatchingMaskHandler(self: *@This(), mask: EventMask, block: *const fn(?*Event) callconv(.C) void) *objc.Id {
        return objc.msgSend(self, "addGlobalMonitorForEventsMatchingMask:handler:", *objc.Id, .{mask, block});
    }

    pub fn addLocalMonitorForEventsMatchingMaskHandler(self: *@This(), mask: EventMask, block: *const fn(?*Event) callconv(.C) ?*Event) *objc.Id {
        return objc.msgSend(self, "addLocalMonitorForEventsMatchingMask:handler:", *objc.Id, .{mask, block});
    }

    pub fn removeMonitor(self: *@This(), eventMonitor: *objc.Id) void {
        return objc.msgSend(self, "removeMonitor:", void, .{eventMonitor});
    }

    pub fn @"type"(self: *@This()) EventType {
        return objc.msgSend(self, "type", EventType, .{});
    }

    pub fn modifierFlags(self: *@This()) EventModifierFlags {
        return objc.msgSend(self, "modifierFlags", EventModifierFlags, .{});
    }

    pub fn timestamp(self: *@This()) foundation.TimeInterval {
        return objc.msgSend(self, "timestamp", foundation.TimeInterval, .{});
    }

    pub fn window(self: *@This()) ?*Window {
        return objc.msgSend(self, "window", ?*Window, .{});
    }

    pub fn windowNumber(self: *@This()) objc.NSInteger {
        return objc.msgSend(self, "windowNumber", objc.NSInteger, .{});
    }

    pub fn context(self: *@This()) ?*GraphicsContext {
        return objc.msgSend(self, "context", ?*GraphicsContext, .{});
    }

    pub fn clickCount(self: *@This()) objc.NSInteger {
        return objc.msgSend(self, "clickCount", objc.NSInteger, .{});
    }

    pub fn buttonNumber(self: *@This()) objc.NSInteger {
        return objc.msgSend(self, "buttonNumber", objc.NSInteger, .{});
    }

    pub fn eventNumber(self: *@This()) objc.NSInteger {
        return objc.msgSend(self, "eventNumber", objc.NSInteger, .{});
    }

    pub fn pressure(self: *@This()) f32 {
        return objc.msgSend(self, "pressure", f32, .{});
    }

    pub fn locationInWindow(self: *@This()) foundation.Point {
        return objc.msgSend(self, "locationInWindow", foundation.Point, .{});
    }

    pub fn deltaX(self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(self, "deltaX", core_foundation.CGFloat, .{});
    }

    pub fn deltaY(self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(self, "deltaY", core_foundation.CGFloat, .{});
    }

    pub fn deltaZ(self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(self, "deltaZ", core_foundation.CGFloat, .{});
    }

    pub fn hasPreciseScrollingDeltas(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "hasPreciseScrollingDeltas", objc.BOOL, .{});
    }

    pub fn scrollingDeltaX(self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(self, "scrollingDeltaX", core_foundation.CGFloat, .{});
    }

    pub fn scrollingDeltaY(self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(self, "scrollingDeltaY", core_foundation.CGFloat, .{});
    }

    pub fn momentumPhase(self: *@This()) EventPhase {
        return objc.msgSend(self, "momentumPhase", EventPhase, .{});
    }

    pub fn isDirectionInvertedFromDevice(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isDirectionInvertedFromDevice", objc.BOOL, .{});
    }

    pub fn characters(self: *@This()) ?*String {
        return objc.msgSend(self, "characters", ?*String, .{});
    }

    pub fn charactersIgnoringModifiers(self: *@This()) ?*String {
        return objc.msgSend(self, "charactersIgnoringModifiers", ?*String, .{});
    }

    pub fn isARepeat(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isARepeat", objc.BOOL, .{});
    }

    pub fn keyCode(self: *@This()) u16 {
        return objc.msgSend(self, "keyCode", u16, .{});
    }

    pub fn trackingNumber(self: *@This()) objc.NSInteger {
        return objc.msgSend(self, "trackingNumber", objc.NSInteger, .{});
    }

    pub fn userData(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "userData", ?*anyopaque, .{});
    }

    pub fn trackingArea(self: *@This()) ?*TrackingArea {
        return objc.msgSend(self, "trackingArea", ?*TrackingArea, .{});
    }

    pub fn subtype(self: *@This()) EventSubtype {
        return objc.msgSend(self, "subtype", EventSubtype, .{});
    }

    pub fn data1(self: *@This()) objc.NSInteger {
        return objc.msgSend(self, "data1", objc.NSInteger, .{});
    }

    pub fn data2(self: *@This()) objc.NSInteger {
        return objc.msgSend(self, "data2", objc.NSInteger, .{});
    }

    pub fn eventRef(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "eventRef", ?*anyopaque, .{});
    }

    pub fn CGEvent(self: *@This()) core_graphics.EventRef {
        return objc.msgSend(self, "CGEvent", core_graphics.EventRef, .{});
    }

    pub fn isMouseCoalescingEnabled(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isMouseCoalescingEnabled", objc.BOOL, .{});
    }

    pub fn setMouseCoalescingEnabled(self: *@This(), mouseCoalescingEnabled: objc.BOOL) void {
        return objc.msgSend(self, "setMouseCoalescingEnabled:", void, .{mouseCoalescingEnabled});
    }

    pub fn magnification(self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(self, "magnification", core_foundation.CGFloat, .{});
    }

    pub fn deviceID(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "deviceID", objc.NSUInteger, .{});
    }

    pub fn rotation(self: *@This()) f32 {
        return objc.msgSend(self, "rotation", f32, .{});
    }

    pub fn absoluteX(self: *@This()) objc.NSInteger {
        return objc.msgSend(self, "absoluteX", objc.NSInteger, .{});
    }

    pub fn absoluteY(self: *@This()) objc.NSInteger {
        return objc.msgSend(self, "absoluteY", objc.NSInteger, .{});
    }

    pub fn absoluteZ(self: *@This()) objc.NSInteger {
        return objc.msgSend(self, "absoluteZ", objc.NSInteger, .{});
    }

    pub fn buttonMask(self: *@This()) EventButtonMask {
        return objc.msgSend(self, "buttonMask", EventButtonMask, .{});
    }

    pub fn tilt(self: *@This()) foundation.Point {
        return objc.msgSend(self, "tilt", foundation.Point, .{});
    }

    pub fn tangentialPressure(self: *@This()) f32 {
        return objc.msgSend(self, "tangentialPressure", f32, .{});
    }

    pub fn vendorDefined(self: *@This()) *objc.Id {
        return objc.msgSend(self, "vendorDefined", *objc.Id, .{});
    }

    pub fn vendorID(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "vendorID", objc.NSUInteger, .{});
    }

    pub fn tabletID(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "tabletID", objc.NSUInteger, .{});
    }

    pub fn pointingDeviceID(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "pointingDeviceID", objc.NSUInteger, .{});
    }

    pub fn systemTabletID(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "systemTabletID", objc.NSUInteger, .{});
    }

    pub fn vendorPointingDeviceType(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "vendorPointingDeviceType", objc.NSUInteger, .{});
    }

    pub fn pointingDeviceSerialNumber(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "pointingDeviceSerialNumber", objc.NSUInteger, .{});
    }

    pub fn uniqueID(self: *@This()) u64 {
        return objc.msgSend(self, "uniqueID", u64, .{});
    }

    pub fn capabilityMask(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "capabilityMask", objc.NSUInteger, .{});
    }

    pub fn pointingDeviceType(self: *@This()) PointingDeviceType {
        return objc.msgSend(self, "pointingDeviceType", PointingDeviceType, .{});
    }

    pub fn isEnteringProximity(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isEnteringProximity", objc.BOOL, .{});
    }

    pub fn phase(self: *@This()) EventPhase {
        return objc.msgSend(self, "phase", EventPhase, .{});
    }

    pub fn stage(self: *@This()) objc.NSInteger {
        return objc.msgSend(self, "stage", objc.NSInteger, .{});
    }

    pub fn stageTransition(self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(self, "stageTransition", core_foundation.CGFloat, .{});
    }

    pub fn associatedEventsMask(self: *@This()) EventMask {
        return objc.msgSend(self, "associatedEventsMask", EventMask, .{});
    }

    pub fn pressureBehavior(self: *@This()) PressureBehavior {
        return objc.msgSend(self, "pressureBehavior", PressureBehavior, .{});
    }

    pub fn isSwipeTrackingFromScrollEventsEnabled(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isSwipeTrackingFromScrollEventsEnabled", objc.BOOL, .{});
    }

    pub fn mouseLocation(self: *@This()) foundation.Point {
        return objc.msgSend(self, "mouseLocation", foundation.Point, .{});
    }

    pub fn modifierFlags(self: *@This()) EventModifierFlags {
        return objc.msgSend(self, "modifierFlags", EventModifierFlags, .{});
    }

    pub fn pressedMouseButtons(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "pressedMouseButtons", objc.NSUInteger, .{});
    }

    pub fn doubleClickInterval(self: *@This()) foundation.TimeInterval {
        return objc.msgSend(self, "doubleClickInterval", foundation.TimeInterval, .{});
    }

    pub fn keyRepeatDelay(self: *@This()) foundation.TimeInterval {
        return objc.msgSend(self, "keyRepeatDelay", foundation.TimeInterval, .{});
    }

    pub fn keyRepeatInterval(self: *@This()) foundation.TimeInterval {
        return objc.msgSend(self, "keyRepeatInterval", foundation.TimeInterval, .{});
    }

};

pub const PasteboardType = ?*String;

pub const PasteboardName = ?*String;

pub const PasteboardContentsOptions = enum(objc.NSUInteger) {
    CurrentHostOnly = 1,
};

pub const PasteboardReadingOptionKey = ?*String;

/// https://developer.apple.com/documentation/AppKit/NSPasteboard?language=objc
pub const Pasteboard = opaque {
    pub const InternalInfo = objc.ExternalClass("NSPasteboard", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn pasteboardWithName(self: *@This(), name: PasteboardName) ?*Pasteboard {
        return objc.msgSend(self, "pasteboardWithName:", ?*Pasteboard, .{name});
    }

    pub fn pasteboardWithUniqueName(self: *@This()) ?*Pasteboard {
        return objc.msgSend(self, "pasteboardWithUniqueName", ?*Pasteboard, .{});
    }

    pub fn releaseGlobally(self: *@This()) void {
        return objc.msgSend(self, "releaseGlobally", void, .{});
    }

    pub fn prepareForNewContentsWithOptions(self: *@This(), options: PasteboardContentsOptions) objc.NSInteger {
        return objc.msgSend(self, "prepareForNewContentsWithOptions:", objc.NSInteger, .{options});
    }

    pub fn clearContents(self: *@This()) objc.NSInteger {
        return objc.msgSend(self, "clearContents", objc.NSInteger, .{});
    }

    pub fn writeObjects(self: *@This(), objects: ?*anyopaque) objc.BOOL {
        return objc.msgSend(self, "writeObjects:", objc.BOOL, .{objects});
    }

    pub fn readObjectsForClassesOptions(self: *@This(), classArray: ?*anyopaque, options: ?*anyopaque) ?*Array {
        return objc.msgSend(self, "readObjectsForClasses:options:", ?*Array, .{classArray, options});
    }

    pub fn indexOfPasteboardItem(self: *@This(), pasteboardItem: ?*PasteboardItem) objc.NSUInteger {
        return objc.msgSend(self, "indexOfPasteboardItem:", objc.NSUInteger, .{pasteboardItem});
    }

    pub fn canReadItemWithDataConformingToTypes(self: *@This(), types: ?*anyopaque) objc.BOOL {
        return objc.msgSend(self, "canReadItemWithDataConformingToTypes:", objc.BOOL, .{types});
    }

    pub fn canReadObjectForClassesOptions(self: *@This(), classArray: ?*anyopaque, options: ?*anyopaque) objc.BOOL {
        return objc.msgSend(self, "canReadObjectForClasses:options:", objc.BOOL, .{classArray, options});
    }

    pub fn declareTypesOwner(self: *@This(), newTypes: ?*anyopaque, newOwner: *objc.Id) objc.NSInteger {
        return objc.msgSend(self, "declareTypes:owner:", objc.NSInteger, .{newTypes, newOwner});
    }

    pub fn addTypesOwner(self: *@This(), newTypes: ?*anyopaque, newOwner: *objc.Id) objc.NSInteger {
        return objc.msgSend(self, "addTypes:owner:", objc.NSInteger, .{newTypes, newOwner});
    }

    pub fn availableTypeFromArray(self: *@This(), types: ?*anyopaque) PasteboardType {
        return objc.msgSend(self, "availableTypeFromArray:", PasteboardType, .{types});
    }

    pub fn setDataForType(self: *@This(), data: ?*Data, dataType: PasteboardType) objc.BOOL {
        return objc.msgSend(self, "setData:forType:", objc.BOOL, .{data, dataType});
    }

    pub fn setPropertyListForType(self: *@This(), plist: *objc.Id, dataType: PasteboardType) objc.BOOL {
        return objc.msgSend(self, "setPropertyList:forType:", objc.BOOL, .{plist, dataType});
    }

    pub fn setStringForType(self: *@This(), string: ?*String, dataType: PasteboardType) objc.BOOL {
        return objc.msgSend(self, "setString:forType:", objc.BOOL, .{string, dataType});
    }

    pub fn dataForType(self: *@This(), dataType: PasteboardType) ?*Data {
        return objc.msgSend(self, "dataForType:", ?*Data, .{dataType});
    }

    pub fn propertyListForType(self: *@This(), dataType: PasteboardType) *objc.Id {
        return objc.msgSend(self, "propertyListForType:", *objc.Id, .{dataType});
    }

    pub fn stringForType(self: *@This(), dataType: PasteboardType) ?*String {
        return objc.msgSend(self, "stringForType:", ?*String, .{dataType});
    }

    pub fn generalPasteboard(self: *@This()) ?*Pasteboard {
        return objc.msgSend(self, "generalPasteboard", ?*Pasteboard, .{});
    }

    pub fn name(self: *@This()) PasteboardName {
        return objc.msgSend(self, "name", PasteboardName, .{});
    }

    pub fn changeCount(self: *@This()) objc.NSInteger {
        return objc.msgSend(self, "changeCount", objc.NSInteger, .{});
    }

    pub fn pasteboardItems(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "pasteboardItems", ?*anyopaque, .{});
    }

    pub fn types(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "types", ?*anyopaque, .{});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSPasteboardTypeOwner?language=objc
pub const PasteboardTypeOwner = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{objc.NSObject, });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn pasteboardProvideDataForType(self: *@This(), sender: ?*Pasteboard, @"type": PasteboardType) void {
        return objc.msgSend(self, "pasteboard:provideDataForType:", void, .{sender, @"type"});
    }

    pub fn pasteboardChangedOwner(self: *@This(), sender: ?*Pasteboard) void {
        return objc.msgSend(self, "pasteboardChangedOwner:", void, .{sender});
    }

};

pub const PasteboardWritingOptions = enum(objc.NSUInteger) {
    Promised = 512,
};

/// https://developer.apple.com/documentation/AppKit/NSPasteboardWriting?language=objc
pub const PasteboardWriting = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{objc.NSObject, });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn writableTypesForPasteboard(self: *@This(), pasteboard: ?*Pasteboard) ?*anyopaque {
        return objc.msgSend(self, "writableTypesForPasteboard:", ?*anyopaque, .{pasteboard});
    }

    pub fn writingOptionsForTypePasteboard(self: *@This(), @"type": PasteboardType, pasteboard: ?*Pasteboard) PasteboardWritingOptions {
        return objc.msgSend(self, "writingOptionsForType:pasteboard:", PasteboardWritingOptions, .{@"type", pasteboard});
    }

    pub fn pasteboardPropertyListForType(self: *@This(), @"type": PasteboardType) *objc.Id {
        return objc.msgSend(self, "pasteboardPropertyListForType:", *objc.Id, .{@"type"});
    }

};

pub const PasteboardReadingOptions = enum(objc.NSUInteger) {
    AsData = 0,
    AsString = 1,
    AsPropertyList = 2,
    AsKeyedArchive = 4,
};

/// https://developer.apple.com/documentation/AppKit/NSPasteboardReading?language=objc
pub const PasteboardReading = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{objc.NSObject, });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn readableTypesForPasteboard(self: *@This(), pasteboard: ?*Pasteboard) ?*anyopaque {
        return objc.msgSend(self, "readableTypesForPasteboard:", ?*anyopaque, .{pasteboard});
    }

    pub fn readingOptionsForTypePasteboard(self: *@This(), @"type": PasteboardType, pasteboard: ?*Pasteboard) PasteboardReadingOptions {
        return objc.msgSend(self, "readingOptionsForType:pasteboard:", PasteboardReadingOptions, .{@"type", pasteboard});
    }

    pub fn initWithPasteboardPropertyListOfType(self: *@This(), propertyList: *objc.Id, @"type": PasteboardType) *objc.Id {
        return objc.msgSend(self, "initWithPasteboardPropertyList:ofType:", *objc.Id, .{propertyList, @"type"});
    }

};

pub extern "AppKit" fn CreateFilenamePboardType(fileType: ?*String) callconv(.C) PasteboardType;

pub extern "AppKit" fn CreateFileContentsPboardType(fileType: ?*String) callconv(.C) PasteboardType;

pub extern "AppKit" fn GetFileType(pboardType: PasteboardType) callconv(.C) ?*String;

pub extern "AppKit" fn GetFileTypes(pboardTypes: ?*anyopaque) callconv(.C) ?*anyopaque;

/// https://developer.apple.com/documentation/AppKit/NSResponder?language=objc
pub const Responder = opaque {
    pub const InternalInfo = objc.ExternalClass("NSResponder", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn init(self: *@This()) *@This() {
        return objc.msgSend(self, "init", *@This(), .{});
    }

    pub fn initWithCoder(self: *@This(), coder: ?*foundation.Coder) *@This() {
        return objc.msgSend(self, "initWithCoder:", *@This(), .{coder});
    }

    pub fn tryToPerformWith(self: *@This(), action: *objc.SEL, object: *objc.Id) objc.BOOL {
        return objc.msgSend(self, "tryToPerform:with:", objc.BOOL, .{action, object});
    }

    pub fn performKeyEquivalent(self: *@This(), event: ?*Event) objc.BOOL {
        return objc.msgSend(self, "performKeyEquivalent:", objc.BOOL, .{event});
    }

    pub fn validRequestorForSendTypeReturnType(self: *@This(), sendType: PasteboardType, returnType: PasteboardType) *objc.Id {
        return objc.msgSend(self, "validRequestorForSendType:returnType:", *objc.Id, .{sendType, returnType});
    }

    pub fn mouseDown(self: *@This(), event: ?*Event) void {
        return objc.msgSend(self, "mouseDown:", void, .{event});
    }

    pub fn rightMouseDown(self: *@This(), event: ?*Event) void {
        return objc.msgSend(self, "rightMouseDown:", void, .{event});
    }

    pub fn otherMouseDown(self: *@This(), event: ?*Event) void {
        return objc.msgSend(self, "otherMouseDown:", void, .{event});
    }

    pub fn mouseUp(self: *@This(), event: ?*Event) void {
        return objc.msgSend(self, "mouseUp:", void, .{event});
    }

    pub fn rightMouseUp(self: *@This(), event: ?*Event) void {
        return objc.msgSend(self, "rightMouseUp:", void, .{event});
    }

    pub fn otherMouseUp(self: *@This(), event: ?*Event) void {
        return objc.msgSend(self, "otherMouseUp:", void, .{event});
    }

    pub fn mouseMoved(self: *@This(), event: ?*Event) void {
        return objc.msgSend(self, "mouseMoved:", void, .{event});
    }

    pub fn mouseDragged(self: *@This(), event: ?*Event) void {
        return objc.msgSend(self, "mouseDragged:", void, .{event});
    }

    pub fn scrollWheel(self: *@This(), event: ?*Event) void {
        return objc.msgSend(self, "scrollWheel:", void, .{event});
    }

    pub fn rightMouseDragged(self: *@This(), event: ?*Event) void {
        return objc.msgSend(self, "rightMouseDragged:", void, .{event});
    }

    pub fn otherMouseDragged(self: *@This(), event: ?*Event) void {
        return objc.msgSend(self, "otherMouseDragged:", void, .{event});
    }

    pub fn mouseEntered(self: *@This(), event: ?*Event) void {
        return objc.msgSend(self, "mouseEntered:", void, .{event});
    }

    pub fn mouseExited(self: *@This(), event: ?*Event) void {
        return objc.msgSend(self, "mouseExited:", void, .{event});
    }

    pub fn keyDown(self: *@This(), event: ?*Event) void {
        return objc.msgSend(self, "keyDown:", void, .{event});
    }

    pub fn keyUp(self: *@This(), event: ?*Event) void {
        return objc.msgSend(self, "keyUp:", void, .{event});
    }

    pub fn flagsChanged(self: *@This(), event: ?*Event) void {
        return objc.msgSend(self, "flagsChanged:", void, .{event});
    }

    pub fn tabletPoint(self: *@This(), event: ?*Event) void {
        return objc.msgSend(self, "tabletPoint:", void, .{event});
    }

    pub fn tabletProximity(self: *@This(), event: ?*Event) void {
        return objc.msgSend(self, "tabletProximity:", void, .{event});
    }

    pub fn cursorUpdate(self: *@This(), event: ?*Event) void {
        return objc.msgSend(self, "cursorUpdate:", void, .{event});
    }

    pub fn magnifyWithEvent(self: *@This(), event: ?*Event) void {
        return objc.msgSend(self, "magnifyWithEvent:", void, .{event});
    }

    pub fn rotateWithEvent(self: *@This(), event: ?*Event) void {
        return objc.msgSend(self, "rotateWithEvent:", void, .{event});
    }

    pub fn swipeWithEvent(self: *@This(), event: ?*Event) void {
        return objc.msgSend(self, "swipeWithEvent:", void, .{event});
    }

    pub fn beginGestureWithEvent(self: *@This(), event: ?*Event) void {
        return objc.msgSend(self, "beginGestureWithEvent:", void, .{event});
    }

    pub fn endGestureWithEvent(self: *@This(), event: ?*Event) void {
        return objc.msgSend(self, "endGestureWithEvent:", void, .{event});
    }

    pub fn smartMagnifyWithEvent(self: *@This(), event: ?*Event) void {
        return objc.msgSend(self, "smartMagnifyWithEvent:", void, .{event});
    }

    pub fn changeModeWithEvent(self: *@This(), event: ?*Event) void {
        return objc.msgSend(self, "changeModeWithEvent:", void, .{event});
    }

    pub fn touchesBeganWithEvent(self: *@This(), event: ?*Event) void {
        return objc.msgSend(self, "touchesBeganWithEvent:", void, .{event});
    }

    pub fn touchesMovedWithEvent(self: *@This(), event: ?*Event) void {
        return objc.msgSend(self, "touchesMovedWithEvent:", void, .{event});
    }

    pub fn touchesEndedWithEvent(self: *@This(), event: ?*Event) void {
        return objc.msgSend(self, "touchesEndedWithEvent:", void, .{event});
    }

    pub fn touchesCancelledWithEvent(self: *@This(), event: ?*Event) void {
        return objc.msgSend(self, "touchesCancelledWithEvent:", void, .{event});
    }

    pub fn quickLookWithEvent(self: *@This(), event: ?*Event) void {
        return objc.msgSend(self, "quickLookWithEvent:", void, .{event});
    }

    pub fn pressureChangeWithEvent(self: *@This(), event: ?*Event) void {
        return objc.msgSend(self, "pressureChangeWithEvent:", void, .{event});
    }

    pub fn contextMenuKeyDown(self: *@This(), event: ?*Event) void {
        return objc.msgSend(self, "contextMenuKeyDown:", void, .{event});
    }

    pub fn noResponderFor(self: *@This(), eventSelector: *objc.SEL) void {
        return objc.msgSend(self, "noResponderFor:", void, .{eventSelector});
    }

    pub fn becomeFirstResponder(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "becomeFirstResponder", objc.BOOL, .{});
    }

    pub fn resignFirstResponder(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "resignFirstResponder", objc.BOOL, .{});
    }

    pub fn interpretKeyEvents(self: *@This(), eventArray: ?*anyopaque) void {
        return objc.msgSend(self, "interpretKeyEvents:", void, .{eventArray});
    }

    pub fn flushBufferedKeyEvents(self: *@This()) void {
        return objc.msgSend(self, "flushBufferedKeyEvents", void, .{});
    }

    pub fn showContextHelp(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "showContextHelp:", void, .{sender});
    }

    pub fn helpRequested(self: *@This(), eventPtr: ?*Event) void {
        return objc.msgSend(self, "helpRequested:", void, .{eventPtr});
    }

    pub fn shouldBeTreatedAsInkEvent(self: *@This(), event: ?*Event) objc.BOOL {
        return objc.msgSend(self, "shouldBeTreatedAsInkEvent:", objc.BOOL, .{event});
    }

    pub fn wantsScrollEventsForSwipeTrackingOnAxis(self: *@This(), axis: EventGestureAxis) objc.BOOL {
        return objc.msgSend(self, "wantsScrollEventsForSwipeTrackingOnAxis:", objc.BOOL, .{axis});
    }

    pub fn wantsForwardedScrollEventsForAxis(self: *@This(), axis: EventGestureAxis) objc.BOOL {
        return objc.msgSend(self, "wantsForwardedScrollEventsForAxis:", objc.BOOL, .{axis});
    }

    pub fn supplementalTargetForActionSender(self: *@This(), action: *objc.SEL, sender: *objc.Id) *objc.Id {
        return objc.msgSend(self, "supplementalTargetForAction:sender:", *objc.Id, .{action, sender});
    }

    pub fn nextResponder(self: *@This()) ?*Responder {
        return objc.msgSend(self, "nextResponder", ?*Responder, .{});
    }

    pub fn setNextResponder(self: *@This(), nextResponder: ?*Responder) void {
        return objc.msgSend(self, "setNextResponder:", void, .{nextResponder});
    }

    pub fn acceptsFirstResponder(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "acceptsFirstResponder", objc.BOOL, .{});
    }

    pub fn menu(self: *@This()) ?*Menu {
        return objc.msgSend(self, "menu", ?*Menu, .{});
    }

    pub fn setMenu(self: *@This(), menu: ?*Menu) void {
        return objc.msgSend(self, "setMenu:", void, .{menu});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSStandardKeyBindingResponding?language=objc
pub const StandardKeyBindingResponding = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{objc.NSObject, });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn insertText(self: *@This(), insertString: *objc.Id) void {
        return objc.msgSend(self, "insertText:", void, .{insertString});
    }

    pub fn doCommandBySelector(self: *@This(), selector: *objc.SEL) void {
        return objc.msgSend(self, "doCommandBySelector:", void, .{selector});
    }

    pub fn moveForward(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "moveForward:", void, .{sender});
    }

    pub fn moveRight(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "moveRight:", void, .{sender});
    }

    pub fn moveBackward(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "moveBackward:", void, .{sender});
    }

    pub fn moveLeft(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "moveLeft:", void, .{sender});
    }

    pub fn moveUp(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "moveUp:", void, .{sender});
    }

    pub fn moveDown(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "moveDown:", void, .{sender});
    }

    pub fn moveWordForward(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "moveWordForward:", void, .{sender});
    }

    pub fn moveWordBackward(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "moveWordBackward:", void, .{sender});
    }

    pub fn moveToBeginningOfLine(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "moveToBeginningOfLine:", void, .{sender});
    }

    pub fn moveToEndOfLine(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "moveToEndOfLine:", void, .{sender});
    }

    pub fn moveToBeginningOfParagraph(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "moveToBeginningOfParagraph:", void, .{sender});
    }

    pub fn moveToEndOfParagraph(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "moveToEndOfParagraph:", void, .{sender});
    }

    pub fn moveToEndOfDocument(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "moveToEndOfDocument:", void, .{sender});
    }

    pub fn moveToBeginningOfDocument(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "moveToBeginningOfDocument:", void, .{sender});
    }

    pub fn pageDown(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "pageDown:", void, .{sender});
    }

    pub fn pageUp(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "pageUp:", void, .{sender});
    }

    pub fn centerSelectionInVisibleArea(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "centerSelectionInVisibleArea:", void, .{sender});
    }

    pub fn moveBackwardAndModifySelection(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "moveBackwardAndModifySelection:", void, .{sender});
    }

    pub fn moveForwardAndModifySelection(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "moveForwardAndModifySelection:", void, .{sender});
    }

    pub fn moveWordForwardAndModifySelection(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "moveWordForwardAndModifySelection:", void, .{sender});
    }

    pub fn moveWordBackwardAndModifySelection(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "moveWordBackwardAndModifySelection:", void, .{sender});
    }

    pub fn moveUpAndModifySelection(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "moveUpAndModifySelection:", void, .{sender});
    }

    pub fn moveDownAndModifySelection(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "moveDownAndModifySelection:", void, .{sender});
    }

    pub fn moveToBeginningOfLineAndModifySelection(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "moveToBeginningOfLineAndModifySelection:", void, .{sender});
    }

    pub fn moveToEndOfLineAndModifySelection(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "moveToEndOfLineAndModifySelection:", void, .{sender});
    }

    pub fn moveToBeginningOfParagraphAndModifySelection(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "moveToBeginningOfParagraphAndModifySelection:", void, .{sender});
    }

    pub fn moveToEndOfParagraphAndModifySelection(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "moveToEndOfParagraphAndModifySelection:", void, .{sender});
    }

    pub fn moveToEndOfDocumentAndModifySelection(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "moveToEndOfDocumentAndModifySelection:", void, .{sender});
    }

    pub fn moveToBeginningOfDocumentAndModifySelection(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "moveToBeginningOfDocumentAndModifySelection:", void, .{sender});
    }

    pub fn pageDownAndModifySelection(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "pageDownAndModifySelection:", void, .{sender});
    }

    pub fn pageUpAndModifySelection(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "pageUpAndModifySelection:", void, .{sender});
    }

    pub fn moveParagraphForwardAndModifySelection(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "moveParagraphForwardAndModifySelection:", void, .{sender});
    }

    pub fn moveParagraphBackwardAndModifySelection(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "moveParagraphBackwardAndModifySelection:", void, .{sender});
    }

    pub fn moveWordRight(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "moveWordRight:", void, .{sender});
    }

    pub fn moveWordLeft(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "moveWordLeft:", void, .{sender});
    }

    pub fn moveRightAndModifySelection(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "moveRightAndModifySelection:", void, .{sender});
    }

    pub fn moveLeftAndModifySelection(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "moveLeftAndModifySelection:", void, .{sender});
    }

    pub fn moveWordRightAndModifySelection(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "moveWordRightAndModifySelection:", void, .{sender});
    }

    pub fn moveWordLeftAndModifySelection(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "moveWordLeftAndModifySelection:", void, .{sender});
    }

    pub fn moveToLeftEndOfLine(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "moveToLeftEndOfLine:", void, .{sender});
    }

    pub fn moveToRightEndOfLine(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "moveToRightEndOfLine:", void, .{sender});
    }

    pub fn moveToLeftEndOfLineAndModifySelection(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "moveToLeftEndOfLineAndModifySelection:", void, .{sender});
    }

    pub fn moveToRightEndOfLineAndModifySelection(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "moveToRightEndOfLineAndModifySelection:", void, .{sender});
    }

    pub fn scrollPageUp(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "scrollPageUp:", void, .{sender});
    }

    pub fn scrollPageDown(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "scrollPageDown:", void, .{sender});
    }

    pub fn scrollLineUp(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "scrollLineUp:", void, .{sender});
    }

    pub fn scrollLineDown(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "scrollLineDown:", void, .{sender});
    }

    pub fn scrollToBeginningOfDocument(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "scrollToBeginningOfDocument:", void, .{sender});
    }

    pub fn scrollToEndOfDocument(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "scrollToEndOfDocument:", void, .{sender});
    }

    pub fn transpose(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "transpose:", void, .{sender});
    }

    pub fn transposeWords(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "transposeWords:", void, .{sender});
    }

    pub fn selectAll(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "selectAll:", void, .{sender});
    }

    pub fn selectParagraph(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "selectParagraph:", void, .{sender});
    }

    pub fn selectLine(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "selectLine:", void, .{sender});
    }

    pub fn selectWord(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "selectWord:", void, .{sender});
    }

    pub fn indent(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "indent:", void, .{sender});
    }

    pub fn insertTab(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "insertTab:", void, .{sender});
    }

    pub fn insertBacktab(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "insertBacktab:", void, .{sender});
    }

    pub fn insertNewline(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "insertNewline:", void, .{sender});
    }

    pub fn insertParagraphSeparator(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "insertParagraphSeparator:", void, .{sender});
    }

    pub fn insertNewlineIgnoringFieldEditor(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "insertNewlineIgnoringFieldEditor:", void, .{sender});
    }

    pub fn insertTabIgnoringFieldEditor(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "insertTabIgnoringFieldEditor:", void, .{sender});
    }

    pub fn insertLineBreak(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "insertLineBreak:", void, .{sender});
    }

    pub fn insertContainerBreak(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "insertContainerBreak:", void, .{sender});
    }

    pub fn insertSingleQuoteIgnoringSubstitution(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "insertSingleQuoteIgnoringSubstitution:", void, .{sender});
    }

    pub fn insertDoubleQuoteIgnoringSubstitution(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "insertDoubleQuoteIgnoringSubstitution:", void, .{sender});
    }

    pub fn changeCaseOfLetter(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "changeCaseOfLetter:", void, .{sender});
    }

    pub fn uppercaseWord(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "uppercaseWord:", void, .{sender});
    }

    pub fn lowercaseWord(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "lowercaseWord:", void, .{sender});
    }

    pub fn capitalizeWord(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "capitalizeWord:", void, .{sender});
    }

    pub fn deleteForward(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "deleteForward:", void, .{sender});
    }

    pub fn deleteBackward(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "deleteBackward:", void, .{sender});
    }

    pub fn deleteBackwardByDecomposingPreviousCharacter(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "deleteBackwardByDecomposingPreviousCharacter:", void, .{sender});
    }

    pub fn deleteWordForward(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "deleteWordForward:", void, .{sender});
    }

    pub fn deleteWordBackward(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "deleteWordBackward:", void, .{sender});
    }

    pub fn deleteToBeginningOfLine(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "deleteToBeginningOfLine:", void, .{sender});
    }

    pub fn deleteToEndOfLine(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "deleteToEndOfLine:", void, .{sender});
    }

    pub fn deleteToBeginningOfParagraph(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "deleteToBeginningOfParagraph:", void, .{sender});
    }

    pub fn deleteToEndOfParagraph(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "deleteToEndOfParagraph:", void, .{sender});
    }

    pub fn yank(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "yank:", void, .{sender});
    }

    pub fn complete(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "complete:", void, .{sender});
    }

    pub fn setMark(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "setMark:", void, .{sender});
    }

    pub fn deleteToMark(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "deleteToMark:", void, .{sender});
    }

    pub fn selectToMark(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "selectToMark:", void, .{sender});
    }

    pub fn swapWithMark(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "swapWithMark:", void, .{sender});
    }

    pub fn cancelOperation(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "cancelOperation:", void, .{sender});
    }

    pub fn makeBaseWritingDirectionNatural(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "makeBaseWritingDirectionNatural:", void, .{sender});
    }

    pub fn makeBaseWritingDirectionLeftToRight(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "makeBaseWritingDirectionLeftToRight:", void, .{sender});
    }

    pub fn makeBaseWritingDirectionRightToLeft(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "makeBaseWritingDirectionRightToLeft:", void, .{sender});
    }

    pub fn makeTextWritingDirectionNatural(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "makeTextWritingDirectionNatural:", void, .{sender});
    }

    pub fn makeTextWritingDirectionLeftToRight(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "makeTextWritingDirectionLeftToRight:", void, .{sender});
    }

    pub fn makeTextWritingDirectionRightToLeft(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "makeTextWritingDirectionRightToLeft:", void, .{sender});
    }

    pub fn quickLookPreviewItems(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "quickLookPreviewItems:", void, .{sender});
    }

    pub fn showContextMenuForSelection(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "showContextMenuForSelection:", void, .{sender});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSValidatedUserInterfaceItem?language=objc
pub const ValidatedUserInterfaceItem = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn action(self: *@This()) *objc.SEL {
        return objc.msgSend(self, "action", *objc.SEL, .{});
    }

    pub fn tag(self: *@This()) objc.NSInteger {
        return objc.msgSend(self, "tag", objc.NSInteger, .{});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSUserInterfaceValidations?language=objc
pub const UserInterfaceValidations = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn validateUserInterfaceItem(self: *@This(), item: ?*anyopaque) objc.BOOL {
        return objc.msgSend(self, "validateUserInterfaceItem:", objc.BOOL, .{item});
    }

};

pub const ApplicationActivationOptions = enum(objc.NSUInteger) {
    ActivateAllWindows = 1,
    ActivateIgnoringOtherApps = 2,
};

pub const ApplicationActivationPolicy = enum(objc.NSInteger) {
    Regular = 0,
    Accessory = 1,
    Prohibited = 2,
};

/// https://developer.apple.com/documentation/AppKit/NSRunningApplication?language=objc
pub const RunningApplication = opaque {
    pub const InternalInfo = objc.ExternalClass("NSRunningApplication", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn hide(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "hide", objc.BOOL, .{});
    }

    pub fn unhide(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "unhide", objc.BOOL, .{});
    }

    pub fn activateFromApplicationOptions(self: *@This(), application: ?*RunningApplication, options: ApplicationActivationOptions) objc.BOOL {
        return objc.msgSend(self, "activateFromApplication:options:", objc.BOOL, .{application, options});
    }

    pub fn activateWithOptions(self: *@This(), options: ApplicationActivationOptions) objc.BOOL {
        return objc.msgSend(self, "activateWithOptions:", objc.BOOL, .{options});
    }

    pub fn terminate(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "terminate", objc.BOOL, .{});
    }

    pub fn forceTerminate(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "forceTerminate", objc.BOOL, .{});
    }

    pub fn runningApplicationsWithBundleIdentifier(self: *@This(), bundleIdentifier: ?*String) ?*anyopaque {
        return objc.msgSend(self, "runningApplicationsWithBundleIdentifier:", ?*anyopaque, .{bundleIdentifier});
    }

    pub fn runningApplicationWithProcessIdentifier(self: *@This(), pid: objc.pid_t) *@This() {
        return objc.msgSend(self, "runningApplicationWithProcessIdentifier:", *@This(), .{pid});
    }

    pub fn terminateAutomaticallyTerminableApplications(self: *@This()) void {
        return objc.msgSend(self, "terminateAutomaticallyTerminableApplications", void, .{});
    }

    pub fn isTerminated(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isTerminated", objc.BOOL, .{});
    }

    pub fn isFinishedLaunching(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isFinishedLaunching", objc.BOOL, .{});
    }

    pub fn isHidden(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isHidden", objc.BOOL, .{});
    }

    pub fn isActive(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isActive", objc.BOOL, .{});
    }

    pub fn ownsMenuBar(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "ownsMenuBar", objc.BOOL, .{});
    }

    pub fn activationPolicy(self: *@This()) ApplicationActivationPolicy {
        return objc.msgSend(self, "activationPolicy", ApplicationActivationPolicy, .{});
    }

    pub fn localizedName(self: *@This()) ?*String {
        return objc.msgSend(self, "localizedName", ?*String, .{});
    }

    pub fn bundleIdentifier(self: *@This()) ?*String {
        return objc.msgSend(self, "bundleIdentifier", ?*String, .{});
    }

    pub fn bundleURL(self: *@This()) ?*URL {
        return objc.msgSend(self, "bundleURL", ?*URL, .{});
    }

    pub fn executableURL(self: *@This()) ?*URL {
        return objc.msgSend(self, "executableURL", ?*URL, .{});
    }

    pub fn processIdentifier(self: *@This()) objc.pid_t {
        return objc.msgSend(self, "processIdentifier", objc.pid_t, .{});
    }

    pub fn launchDate(self: *@This()) ?*Date {
        return objc.msgSend(self, "launchDate", ?*Date, .{});
    }

    pub fn icon(self: *@This()) ?*Image {
        return objc.msgSend(self, "icon", ?*Image, .{});
    }

    pub fn executableArchitecture(self: *@This()) objc.NSInteger {
        return objc.msgSend(self, "executableArchitecture", objc.NSInteger, .{});
    }

    pub fn currentApplication(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "currentApplication", ?*anyopaque, .{});
    }

};

pub const NibName = ?*String;

/// https://developer.apple.com/documentation/AppKit/NSNib?language=objc
pub const Nib = opaque {
    pub const InternalInfo = objc.ExternalClass("NSNib", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn initWithNibNamedBundle(self: *@This(), nibName: NibName, bundle: ?*foundation.Bundle) *@This() {
        return objc.msgSend(self, "initWithNibNamed:bundle:", *@This(), .{nibName, bundle});
    }

    pub fn initWithNibDataBundle(self: *@This(), nibData: ?*Data, bundle: ?*foundation.Bundle) *@This() {
        return objc.msgSend(self, "initWithNibData:bundle:", *@This(), .{nibData, bundle});
    }

    pub fn instantiateWithOwnerTopLevelObjects(self: *@This(), owner: *objc.Id, topLevelObjects: ?*?*Array) objc.BOOL {
        return objc.msgSend(self, "instantiateWithOwner:topLevelObjects:", objc.BOOL, .{owner, topLevelObjects});
    }

};

pub const UserInterfaceItemIdentifier = ?*String;

/// https://developer.apple.com/documentation/AppKit/NSUserInterfaceItemIdentification?language=objc
pub const UserInterfaceItemIdentification = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn identifier(self: *@This()) UserInterfaceItemIdentifier {
        return objc.msgSend(self, "identifier", UserInterfaceItemIdentifier, .{});
    }

    pub fn setIdentifier(self: *@This(), identifier: UserInterfaceItemIdentifier) void {
        return objc.msgSend(self, "setIdentifier:", void, .{identifier});
    }

};

pub const AnimationCurve = enum(objc.NSUInteger) {
    EaseInOut = 0,
    EaseIn = 1,
    EaseOut = 2,
    Linear = 3,
};

pub const AnimationBlockingMode = enum(objc.NSUInteger) {
    Blocking = 0,
    Nonblocking = 1,
    NonblockingThreaded = 2,
};

pub const AnimationProgress = f32;

/// https://developer.apple.com/documentation/AppKit/NSAnimation?language=objc
pub const Animation = opaque {
    pub const InternalInfo = objc.ExternalClass("NSAnimation", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn initWithDurationAnimationCurve(self: *@This(), duration: foundation.TimeInterval, animationCurve: AnimationCurve) *@This() {
        return objc.msgSend(self, "initWithDuration:animationCurve:", *@This(), .{duration, animationCurve});
    }

    pub fn initWithCoder(self: *@This(), coder: ?*foundation.Coder) *@This() {
        return objc.msgSend(self, "initWithCoder:", *@This(), .{coder});
    }

    pub fn startAnimation(self: *@This()) void {
        return objc.msgSend(self, "startAnimation", void, .{});
    }

    pub fn stopAnimation(self: *@This()) void {
        return objc.msgSend(self, "stopAnimation", void, .{});
    }

    pub fn addProgressMark(self: *@This(), progressMark: AnimationProgress) void {
        return objc.msgSend(self, "addProgressMark:", void, .{progressMark});
    }

    pub fn removeProgressMark(self: *@This(), progressMark: AnimationProgress) void {
        return objc.msgSend(self, "removeProgressMark:", void, .{progressMark});
    }

    pub fn startWhenAnimationReachesProgress(self: *@This(), animation: ?*Animation, startProgress: AnimationProgress) void {
        return objc.msgSend(self, "startWhenAnimation:reachesProgress:", void, .{animation, startProgress});
    }

    pub fn stopWhenAnimationReachesProgress(self: *@This(), animation: ?*Animation, stopProgress: AnimationProgress) void {
        return objc.msgSend(self, "stopWhenAnimation:reachesProgress:", void, .{animation, stopProgress});
    }

    pub fn clearStartAnimation(self: *@This()) void {
        return objc.msgSend(self, "clearStartAnimation", void, .{});
    }

    pub fn clearStopAnimation(self: *@This()) void {
        return objc.msgSend(self, "clearStopAnimation", void, .{});
    }

    pub fn isAnimating(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isAnimating", objc.BOOL, .{});
    }

    pub fn currentProgress(self: *@This()) AnimationProgress {
        return objc.msgSend(self, "currentProgress", AnimationProgress, .{});
    }

    pub fn setCurrentProgress(self: *@This(), currentProgress: AnimationProgress) void {
        return objc.msgSend(self, "setCurrentProgress:", void, .{currentProgress});
    }

    pub fn duration(self: *@This()) foundation.TimeInterval {
        return objc.msgSend(self, "duration", foundation.TimeInterval, .{});
    }

    pub fn setDuration(self: *@This(), duration: foundation.TimeInterval) void {
        return objc.msgSend(self, "setDuration:", void, .{duration});
    }

    pub fn animationBlockingMode(self: *@This()) AnimationBlockingMode {
        return objc.msgSend(self, "animationBlockingMode", AnimationBlockingMode, .{});
    }

    pub fn setAnimationBlockingMode(self: *@This(), animationBlockingMode: AnimationBlockingMode) void {
        return objc.msgSend(self, "setAnimationBlockingMode:", void, .{animationBlockingMode});
    }

    pub fn frameRate(self: *@This()) f32 {
        return objc.msgSend(self, "frameRate", f32, .{});
    }

    pub fn setFrameRate(self: *@This(), frameRate: f32) void {
        return objc.msgSend(self, "setFrameRate:", void, .{frameRate});
    }

    pub fn animationCurve(self: *@This()) AnimationCurve {
        return objc.msgSend(self, "animationCurve", AnimationCurve, .{});
    }

    pub fn setAnimationCurve(self: *@This(), animationCurve: AnimationCurve) void {
        return objc.msgSend(self, "setAnimationCurve:", void, .{animationCurve});
    }

    pub fn currentValue(self: *@This()) f32 {
        return objc.msgSend(self, "currentValue", f32, .{});
    }

    pub fn delegate(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "delegate", ?*anyopaque, .{});
    }

    pub fn setDelegate(self: *@This(), delegate: ?*anyopaque) void {
        return objc.msgSend(self, "setDelegate:", void, .{delegate});
    }

    pub fn progressMarks(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "progressMarks", ?*anyopaque, .{});
    }

    pub fn setProgressMarks(self: *@This(), progressMarks: ?*anyopaque) void {
        return objc.msgSend(self, "setProgressMarks:", void, .{progressMarks});
    }

    pub fn runLoopModesForAnimating(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "runLoopModesForAnimating", ?*anyopaque, .{});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSAnimationDelegate?language=objc
pub const AnimationDelegate = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{objc.NSObject, });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn animationShouldStart(self: *@This(), animation: ?*Animation) objc.BOOL {
        return objc.msgSend(self, "animationShouldStart:", objc.BOOL, .{animation});
    }

    pub fn animationDidStop(self: *@This(), animation: ?*Animation) void {
        return objc.msgSend(self, "animationDidStop:", void, .{animation});
    }

    pub fn animationDidEnd(self: *@This(), animation: ?*Animation) void {
        return objc.msgSend(self, "animationDidEnd:", void, .{animation});
    }

    pub fn animationValueForProgress(self: *@This(), animation: ?*Animation, progress: AnimationProgress) f32 {
        return objc.msgSend(self, "animation:valueForProgress:", f32, .{animation, progress});
    }

    pub fn animationDidReachProgressMark(self: *@This(), animation: ?*Animation, progress: AnimationProgress) void {
        return objc.msgSend(self, "animation:didReachProgressMark:", void, .{animation, progress});
    }

};

pub const ViewAnimationKey = ?*String;

pub const ViewAnimationEffectName = ?*String;

/// https://developer.apple.com/documentation/AppKit/NSViewAnimation?language=objc
pub const ViewAnimation = opaque {
    pub const InternalInfo = objc.ExternalClass("NSViewAnimation", @This(), Animation, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn initWithViewAnimations(self: *@This(), viewAnimations: ?*anyopaque) *@This() {
        return objc.msgSend(self, "initWithViewAnimations:", *@This(), .{viewAnimations});
    }

    pub fn viewAnimations(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "viewAnimations", ?*anyopaque, .{});
    }

    pub fn setViewAnimations(self: *@This(), viewAnimations: ?*anyopaque) void {
        return objc.msgSend(self, "setViewAnimations:", void, .{viewAnimations});
    }

};

pub const AnimatablePropertyKey = ?*String;

/// https://developer.apple.com/documentation/AppKit/NSAnimatablePropertyContainer?language=objc
pub const AnimatablePropertyContainer = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn animator(self: *@This()) *@This() {
        return objc.msgSend(self, "animator", *@This(), .{});
    }

    pub fn animationForKey(self: *@This(), key: AnimatablePropertyKey) *objc.Id {
        return objc.msgSend(self, "animationForKey:", *objc.Id, .{key});
    }

    pub fn defaultAnimationForKey(self: *@This(), key: AnimatablePropertyKey) *objc.Id {
        return objc.msgSend(self, "defaultAnimationForKey:", *objc.Id, .{key});
    }

    pub fn animations(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "animations", ?*anyopaque, .{});
    }

    pub fn setAnimations(self: *@This(), animations: ?*anyopaque) void {
        return objc.msgSend(self, "setAnimations:", void, .{animations});
    }

};

pub const AppearanceName = ?*String;

/// https://developer.apple.com/documentation/AppKit/NSAppearance?language=objc
pub const Appearance = opaque {
    pub const InternalInfo = objc.ExternalClass("NSAppearance", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn performAsCurrentDrawingAppearance(self: *@This(), block: *const fn() callconv(.C) void) void {
        return objc.msgSend(self, "performAsCurrentDrawingAppearance:", void, .{block});
    }

    pub fn appearanceNamed(self: *@This(), name: AppearanceName) ?*Appearance {
        return objc.msgSend(self, "appearanceNamed:", ?*Appearance, .{name});
    }

    pub fn initWithAppearanceNamedBundle(self: *@This(), name: AppearanceName, bundle: ?*Bundle) *@This() {
        return objc.msgSend(self, "initWithAppearanceNamed:bundle:", *@This(), .{name, bundle});
    }

    pub fn initWithCoder(self: *@This(), coder: ?*foundation.Coder) *@This() {
        return objc.msgSend(self, "initWithCoder:", *@This(), .{coder});
    }

    pub fn bestMatchFromAppearancesWithNames(self: *@This(), appearances: ?*anyopaque) AppearanceName {
        return objc.msgSend(self, "bestMatchFromAppearancesWithNames:", AppearanceName, .{appearances});
    }

    pub fn name(self: *@This()) AppearanceName {
        return objc.msgSend(self, "name", AppearanceName, .{});
    }

    pub fn currentAppearance(self: *@This()) ?*Appearance {
        return objc.msgSend(self, "currentAppearance", ?*Appearance, .{});
    }

    pub fn setCurrentAppearance(self: *@This(), currentAppearance: ?*Appearance) void {
        return objc.msgSend(self, "setCurrentAppearance:", void, .{currentAppearance});
    }

    pub fn currentDrawingAppearance(self: *@This()) ?*Appearance {
        return objc.msgSend(self, "currentDrawingAppearance", ?*Appearance, .{});
    }

    pub fn allowsVibrancy(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "allowsVibrancy", objc.BOOL, .{});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSAppearanceCustomization?language=objc
pub const AppearanceCustomization = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{objc.NSObject, });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn appearance(self: *@This()) ?*Appearance {
        return objc.msgSend(self, "appearance", ?*Appearance, .{});
    }

    pub fn setAppearance(self: *@This(), appearance: ?*Appearance) void {
        return objc.msgSend(self, "setAppearance:", void, .{appearance});
    }

    pub fn effectiveAppearance(self: *@This()) ?*Appearance {
        return objc.msgSend(self, "effectiveAppearance", ?*Appearance, .{});
    }

};

pub const DragOperation = enum(objc.NSUInteger) {
    None = 0,
    Copy = 1,
    Link = 2,
    Generic = 4,
    Private = 8,
    Move = 16,
    Delete = 32,
    Every = -1,
    All_Obsolete = 15,
    All = 15,
};

pub const DraggingFormation = enum(objc.NSInteger) {
    Default = 0,
    None = 1,
    Pile = 2,
    List = 3,
    Stack = 4,
};

pub const DraggingContext = enum(objc.NSInteger) {
    OutsideApplication = 0,
    WithinApplication = 1,
};

pub const DraggingItemEnumerationOptions = enum(objc.NSUInteger) {
    Concurrent = 1,
    ClearNonenumeratedImages = 65536,
};

pub const SpringLoadingHighlight = enum(objc.NSInteger) {
    None = 0,
    Standard = 1,
    Emphasized = 2,
};

/// https://developer.apple.com/documentation/AppKit/NSDraggingInfo?language=objc
pub const DraggingInfo = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{objc.NSObject, });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn slideDraggedImageTo(self: *@This(), screenPoint: foundation.Point) void {
        return objc.msgSend(self, "slideDraggedImageTo:", void, .{screenPoint});
    }

    pub fn namesOfPromisedFilesDroppedAtDestination(self: *@This(), dropDestination: ?*URL) ?*anyopaque {
        return objc.msgSend(self, "namesOfPromisedFilesDroppedAtDestination:", ?*anyopaque, .{dropDestination});
    }

    pub fn enumerateDraggingItemsWithOptionsForViewClassesSearchOptionsUsingBlock(self: *@This(), enumOpts: DraggingItemEnumerationOptions, view: ?*View, classArray: ?*anyopaque, searchOptions: ?*anyopaque, block: *const fn(?*DraggingItem, objc.NSInteger, ?*objc.BOOL) callconv(.C) void, ) void {
        return objc.msgSend(self, "enumerateDraggingItemsWithOptions:forView:classes:searchOptions:usingBlock:", void, .{enumOpts, view, classArray, searchOptions, block, });
    }

    pub fn resetSpringLoading(self: *@This()) void {
        return objc.msgSend(self, "resetSpringLoading", void, .{});
    }

    pub fn draggingDestinationWindow(self: *@This()) ?*Window {
        return objc.msgSend(self, "draggingDestinationWindow", ?*Window, .{});
    }

    pub fn draggingSourceOperationMask(self: *@This()) DragOperation {
        return objc.msgSend(self, "draggingSourceOperationMask", DragOperation, .{});
    }

    pub fn draggingLocation(self: *@This()) foundation.Point {
        return objc.msgSend(self, "draggingLocation", foundation.Point, .{});
    }

    pub fn draggedImageLocation(self: *@This()) foundation.Point {
        return objc.msgSend(self, "draggedImageLocation", foundation.Point, .{});
    }

    pub fn draggedImage(self: *@This()) ?*Image {
        return objc.msgSend(self, "draggedImage", ?*Image, .{});
    }

    pub fn draggingPasteboard(self: *@This()) ?*Pasteboard {
        return objc.msgSend(self, "draggingPasteboard", ?*Pasteboard, .{});
    }

    pub fn draggingSource(self: *@This()) *objc.Id {
        return objc.msgSend(self, "draggingSource", *objc.Id, .{});
    }

    pub fn draggingSequenceNumber(self: *@This()) objc.NSInteger {
        return objc.msgSend(self, "draggingSequenceNumber", objc.NSInteger, .{});
    }

    pub fn draggingFormation(self: *@This()) DraggingFormation {
        return objc.msgSend(self, "draggingFormation", DraggingFormation, .{});
    }

    pub fn setDraggingFormation(self: *@This(), draggingFormation: DraggingFormation) void {
        return objc.msgSend(self, "setDraggingFormation:", void, .{draggingFormation});
    }

    pub fn animatesToDestination(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "animatesToDestination", objc.BOOL, .{});
    }

    pub fn setAnimatesToDestination(self: *@This(), animatesToDestination: objc.BOOL) void {
        return objc.msgSend(self, "setAnimatesToDestination:", void, .{animatesToDestination});
    }

    pub fn numberOfValidItemsForDrop(self: *@This()) objc.NSInteger {
        return objc.msgSend(self, "numberOfValidItemsForDrop", objc.NSInteger, .{});
    }

    pub fn setNumberOfValidItemsForDrop(self: *@This(), numberOfValidItemsForDrop: objc.NSInteger) void {
        return objc.msgSend(self, "setNumberOfValidItemsForDrop:", void, .{numberOfValidItemsForDrop});
    }

    pub fn springLoadingHighlight(self: *@This()) SpringLoadingHighlight {
        return objc.msgSend(self, "springLoadingHighlight", SpringLoadingHighlight, .{});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSDraggingDestination?language=objc
pub const DraggingDestination = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{objc.NSObject, });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn draggingEntered(self: *@This(), sender: ?*anyopaque) DragOperation {
        return objc.msgSend(self, "draggingEntered:", DragOperation, .{sender});
    }

    pub fn draggingUpdated(self: *@This(), sender: ?*anyopaque) DragOperation {
        return objc.msgSend(self, "draggingUpdated:", DragOperation, .{sender});
    }

    pub fn draggingExited(self: *@This(), sender: ?*anyopaque) void {
        return objc.msgSend(self, "draggingExited:", void, .{sender});
    }

    pub fn prepareForDragOperation(self: *@This(), sender: ?*anyopaque) objc.BOOL {
        return objc.msgSend(self, "prepareForDragOperation:", objc.BOOL, .{sender});
    }

    pub fn performDragOperation(self: *@This(), sender: ?*anyopaque) objc.BOOL {
        return objc.msgSend(self, "performDragOperation:", objc.BOOL, .{sender});
    }

    pub fn concludeDragOperation(self: *@This(), sender: ?*anyopaque) void {
        return objc.msgSend(self, "concludeDragOperation:", void, .{sender});
    }

    pub fn draggingEnded(self: *@This(), sender: ?*anyopaque) void {
        return objc.msgSend(self, "draggingEnded:", void, .{sender});
    }

    pub fn wantsPeriodicDraggingUpdates(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "wantsPeriodicDraggingUpdates", objc.BOOL, .{});
    }

    pub fn updateDraggingItemsForDrag(self: *@This(), sender: ?*anyopaque) void {
        return objc.msgSend(self, "updateDraggingItemsForDrag:", void, .{sender});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSDraggingSource?language=objc
pub const DraggingSource = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{objc.NSObject, });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn draggingSessionSourceOperationMaskForDraggingContext(self: *@This(), session: ?*DraggingSession, context: DraggingContext) DragOperation {
        return objc.msgSend(self, "draggingSession:sourceOperationMaskForDraggingContext:", DragOperation, .{session, context});
    }

    pub fn draggingSessionWillBeginAtPoint(self: *@This(), session: ?*DraggingSession, screenPoint: foundation.Point) void {
        return objc.msgSend(self, "draggingSession:willBeginAtPoint:", void, .{session, screenPoint});
    }

    pub fn draggingSessionMovedToPoint(self: *@This(), session: ?*DraggingSession, screenPoint: foundation.Point) void {
        return objc.msgSend(self, "draggingSession:movedToPoint:", void, .{session, screenPoint});
    }

    pub fn draggingSessionEndedAtPointOperation(self: *@This(), session: ?*DraggingSession, screenPoint: foundation.Point, operation: DragOperation) void {
        return objc.msgSend(self, "draggingSession:endedAtPoint:operation:", void, .{session, screenPoint, operation});
    }

    pub fn ignoreModifierKeysForDraggingSession(self: *@This(), session: ?*DraggingSession) objc.BOOL {
        return objc.msgSend(self, "ignoreModifierKeysForDraggingSession:", objc.BOOL, .{session});
    }

};

pub const SpringLoadingOptions = enum(objc.NSUInteger) {
    Disabled = 0,
    Enabled = 1,
    ContinuousActivation = 2,
    NoHover = 8,
};

/// https://developer.apple.com/documentation/AppKit/NSSpringLoadingDestination?language=objc
pub const SpringLoadingDestination = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{objc.NSObject, });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn springLoadingActivatedDraggingInfo(self: *@This(), activated: objc.BOOL, draggingInfo: ?*anyopaque) void {
        return objc.msgSend(self, "springLoadingActivated:draggingInfo:", void, .{activated, draggingInfo});
    }

    pub fn springLoadingHighlightChanged(self: *@This(), draggingInfo: ?*anyopaque) void {
        return objc.msgSend(self, "springLoadingHighlightChanged:", void, .{draggingInfo});
    }

    pub fn springLoadingEntered(self: *@This(), draggingInfo: ?*anyopaque) SpringLoadingOptions {
        return objc.msgSend(self, "springLoadingEntered:", SpringLoadingOptions, .{draggingInfo});
    }

    pub fn springLoadingUpdated(self: *@This(), draggingInfo: ?*anyopaque) SpringLoadingOptions {
        return objc.msgSend(self, "springLoadingUpdated:", SpringLoadingOptions, .{draggingInfo});
    }

    pub fn springLoadingExited(self: *@This(), draggingInfo: ?*anyopaque) void {
        return objc.msgSend(self, "springLoadingExited:", void, .{draggingInfo});
    }

    pub fn draggingEnded(self: *@This(), draggingInfo: ?*anyopaque) void {
        return objc.msgSend(self, "draggingEnded:", void, .{draggingInfo});
    }

};

pub const UserInterfaceLayoutDirection = enum(objc.NSInteger) {
    LeftToRight = 0,
    RightToLeft = 1,
};

pub const UserInterfaceLayoutOrientation = enum(objc.NSInteger) {
    Horizontal = 0,
    Vertical = 1,
};

pub const AutoresizingMaskOptions = enum(objc.NSUInteger) {
    ViewNotSizable = 0,
    ViewMinXMargin = 1,
    ViewWidthSizable = 2,
    ViewMaxXMargin = 4,
    ViewMinYMargin = 8,
    ViewHeightSizable = 16,
    ViewMaxYMargin = 32,
};

pub const BorderType = enum(objc.NSUInteger) {
    NoBorder = 0,
    LineBorder = 1,
    BezelBorder = 2,
    GrooveBorder = 3,
};

pub const ViewLayerContentsRedrawPolicy = enum(objc.NSInteger) {
    Never = 0,
    OnSetNeedsDisplay = 1,
    DuringViewResize = 2,
    BeforeViewResize = 3,
    Crossfade = 4,
};

pub const ViewLayerContentsPlacement = enum(objc.NSInteger) {
    ScaleAxesIndependently = 0,
    ScaleProportionallyToFit = 1,
    ScaleProportionallyToFill = 2,
    Center = 3,
    Top = 4,
    TopRight = 5,
    Right = 6,
    BottomRight = 7,
    Bottom = 8,
    BottomLeft = 9,
    Left = 10,
    TopLeft = 11,
};

pub const TrackingRectTag = objc.NSInteger;

pub const ToolTipTag = objc.NSInteger;

/// https://developer.apple.com/documentation/AppKit/NSView?language=objc
pub const View = opaque {
    pub const InternalInfo = objc.ExternalClass("NSView", @This(), Responder, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn initWithFrame(self: *@This(), frameRect: foundation.Rect) *@This() {
        return objc.msgSend(self, "initWithFrame:", *@This(), .{frameRect});
    }

    pub fn initWithCoder(self: *@This(), coder: ?*foundation.Coder) *@This() {
        return objc.msgSend(self, "initWithCoder:", *@This(), .{coder});
    }

    pub fn isDescendantOf(self: *@This(), view: ?*View) objc.BOOL {
        return objc.msgSend(self, "isDescendantOf:", objc.BOOL, .{view});
    }

    pub fn ancestorSharedWithView(self: *@This(), view: ?*View) ?*View {
        return objc.msgSend(self, "ancestorSharedWithView:", ?*View, .{view});
    }

    pub fn getRectsBeingDrawnCount(self: *@This(), rects: ?*?*foundation.Rect, count: ?*objc.NSInteger) void {
        return objc.msgSend(self, "getRectsBeingDrawn:count:", void, .{rects, count});
    }

    pub fn needsToDrawRect(self: *@This(), rect: foundation.Rect) objc.BOOL {
        return objc.msgSend(self, "needsToDrawRect:", objc.BOOL, .{rect});
    }

    pub fn viewDidHide(self: *@This()) void {
        return objc.msgSend(self, "viewDidHide", void, .{});
    }

    pub fn viewDidUnhide(self: *@This()) void {
        return objc.msgSend(self, "viewDidUnhide", void, .{});
    }

    pub fn addSubview(self: *@This(), view: ?*View) void {
        return objc.msgSend(self, "addSubview:", void, .{view});
    }

    pub fn addSubviewPositionedRelativeTo(self: *@This(), view: ?*View, place: WindowOrderingMode, otherView: ?*View) void {
        return objc.msgSend(self, "addSubview:positioned:relativeTo:", void, .{view, place, otherView});
    }

    pub fn sortSubviewsUsingFunctionContext(self: *@This(), compare: ?*const fn(?*anyopaque, ?*anyopaque, ?*anyopaque) callconv(.C) foundation.ComparisonResult, context: ?*anyopaque) void {
        return objc.msgSend(self, "sortSubviewsUsingFunction:context:", void, .{compare, context});
    }

    pub fn viewWillMoveToWindow(self: *@This(), newWindow: ?*Window) void {
        return objc.msgSend(self, "viewWillMoveToWindow:", void, .{newWindow});
    }

    pub fn viewDidMoveToWindow(self: *@This()) void {
        return objc.msgSend(self, "viewDidMoveToWindow", void, .{});
    }

    pub fn viewWillMoveToSuperview(self: *@This(), newSuperview: ?*View) void {
        return objc.msgSend(self, "viewWillMoveToSuperview:", void, .{newSuperview});
    }

    pub fn viewDidMoveToSuperview(self: *@This()) void {
        return objc.msgSend(self, "viewDidMoveToSuperview", void, .{});
    }

    pub fn didAddSubview(self: *@This(), subview: ?*View) void {
        return objc.msgSend(self, "didAddSubview:", void, .{subview});
    }

    pub fn willRemoveSubview(self: *@This(), subview: ?*View) void {
        return objc.msgSend(self, "willRemoveSubview:", void, .{subview});
    }

    pub fn removeFromSuperview(self: *@This()) void {
        return objc.msgSend(self, "removeFromSuperview", void, .{});
    }

    pub fn replaceSubviewWith(self: *@This(), oldView: ?*View, newView: ?*View) void {
        return objc.msgSend(self, "replaceSubview:with:", void, .{oldView, newView});
    }

    pub fn removeFromSuperviewWithoutNeedingDisplay(self: *@This()) void {
        return objc.msgSend(self, "removeFromSuperviewWithoutNeedingDisplay", void, .{});
    }

    pub fn viewDidChangeBackingProperties(self: *@This()) void {
        return objc.msgSend(self, "viewDidChangeBackingProperties", void, .{});
    }

    pub fn resizeSubviewsWithOldSize(self: *@This(), oldSize: foundation.Size) void {
        return objc.msgSend(self, "resizeSubviewsWithOldSize:", void, .{oldSize});
    }

    pub fn resizeWithOldSuperviewSize(self: *@This(), oldSize: foundation.Size) void {
        return objc.msgSend(self, "resizeWithOldSuperviewSize:", void, .{oldSize});
    }

    pub fn setFrameOrigin(self: *@This(), newOrigin: foundation.Point) void {
        return objc.msgSend(self, "setFrameOrigin:", void, .{newOrigin});
    }

    pub fn setFrameSize(self: *@This(), newSize: foundation.Size) void {
        return objc.msgSend(self, "setFrameSize:", void, .{newSize});
    }

    pub fn setBoundsOrigin(self: *@This(), newOrigin: foundation.Point) void {
        return objc.msgSend(self, "setBoundsOrigin:", void, .{newOrigin});
    }

    pub fn setBoundsSize(self: *@This(), newSize: foundation.Size) void {
        return objc.msgSend(self, "setBoundsSize:", void, .{newSize});
    }

    pub fn translateOriginToPoint(self: *@This(), translation: foundation.Point) void {
        return objc.msgSend(self, "translateOriginToPoint:", void, .{translation});
    }

    pub fn scaleUnitSquareToSize(self: *@This(), newUnitSize: foundation.Size) void {
        return objc.msgSend(self, "scaleUnitSquareToSize:", void, .{newUnitSize});
    }

    pub fn rotateByAngle(self: *@This(), angle: core_foundation.CGFloat) void {
        return objc.msgSend(self, "rotateByAngle:", void, .{angle});
    }

    pub fn convertPointFromView(self: *@This(), point: foundation.Point, view: ?*View) foundation.Point {
        return objc.msgSend(self, "convertPoint:fromView:", foundation.Point, .{point, view});
    }

    pub fn convertPointToView(self: *@This(), point: foundation.Point, view: ?*View) foundation.Point {
        return objc.msgSend(self, "convertPoint:toView:", foundation.Point, .{point, view});
    }

    pub fn convertSizeFromView(self: *@This(), size: foundation.Size, view: ?*View) foundation.Size {
        return objc.msgSend(self, "convertSize:fromView:", foundation.Size, .{size, view});
    }

    pub fn convertSizeToView(self: *@This(), size: foundation.Size, view: ?*View) foundation.Size {
        return objc.msgSend(self, "convertSize:toView:", foundation.Size, .{size, view});
    }

    pub fn convertRectFromView(self: *@This(), rect: foundation.Rect, view: ?*View) foundation.Rect {
        return objc.msgSend(self, "convertRect:fromView:", foundation.Rect, .{rect, view});
    }

    pub fn convertRectToView(self: *@This(), rect: foundation.Rect, view: ?*View) foundation.Rect {
        return objc.msgSend(self, "convertRect:toView:", foundation.Rect, .{rect, view});
    }

    pub fn backingAlignedRectOptions(self: *@This(), rect: foundation.Rect, options: foundation.AlignmentOptions) foundation.Rect {
        return objc.msgSend(self, "backingAlignedRect:options:", foundation.Rect, .{rect, options});
    }

    pub fn centerScanRect(self: *@This(), rect: foundation.Rect) foundation.Rect {
        return objc.msgSend(self, "centerScanRect:", foundation.Rect, .{rect});
    }

    pub fn convertPointToBacking(self: *@This(), point: foundation.Point) foundation.Point {
        return objc.msgSend(self, "convertPointToBacking:", foundation.Point, .{point});
    }

    pub fn convertPointFromBacking(self: *@This(), point: foundation.Point) foundation.Point {
        return objc.msgSend(self, "convertPointFromBacking:", foundation.Point, .{point});
    }

    pub fn convertSizeToBacking(self: *@This(), size: foundation.Size) foundation.Size {
        return objc.msgSend(self, "convertSizeToBacking:", foundation.Size, .{size});
    }

    pub fn convertSizeFromBacking(self: *@This(), size: foundation.Size) foundation.Size {
        return objc.msgSend(self, "convertSizeFromBacking:", foundation.Size, .{size});
    }

    pub fn convertRectToBacking(self: *@This(), rect: foundation.Rect) foundation.Rect {
        return objc.msgSend(self, "convertRectToBacking:", foundation.Rect, .{rect});
    }

    pub fn convertRectFromBacking(self: *@This(), rect: foundation.Rect) foundation.Rect {
        return objc.msgSend(self, "convertRectFromBacking:", foundation.Rect, .{rect});
    }

    pub fn convertPointToLayer(self: *@This(), point: foundation.Point) foundation.Point {
        return objc.msgSend(self, "convertPointToLayer:", foundation.Point, .{point});
    }

    pub fn convertPointFromLayer(self: *@This(), point: foundation.Point) foundation.Point {
        return objc.msgSend(self, "convertPointFromLayer:", foundation.Point, .{point});
    }

    pub fn convertSizeToLayer(self: *@This(), size: foundation.Size) foundation.Size {
        return objc.msgSend(self, "convertSizeToLayer:", foundation.Size, .{size});
    }

    pub fn convertSizeFromLayer(self: *@This(), size: foundation.Size) foundation.Size {
        return objc.msgSend(self, "convertSizeFromLayer:", foundation.Size, .{size});
    }

    pub fn convertRectToLayer(self: *@This(), rect: foundation.Rect) foundation.Rect {
        return objc.msgSend(self, "convertRectToLayer:", foundation.Rect, .{rect});
    }

    pub fn convertRectFromLayer(self: *@This(), rect: foundation.Rect) foundation.Rect {
        return objc.msgSend(self, "convertRectFromLayer:", foundation.Rect, .{rect});
    }

    pub fn setNeedsDisplayInRect(self: *@This(), invalidRect: foundation.Rect) void {
        return objc.msgSend(self, "setNeedsDisplayInRect:", void, .{invalidRect});
    }

    pub fn lockFocus(self: *@This()) void {
        return objc.msgSend(self, "lockFocus", void, .{});
    }

    pub fn unlockFocus(self: *@This()) void {
        return objc.msgSend(self, "unlockFocus", void, .{});
    }

    pub fn lockFocusIfCanDraw(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "lockFocusIfCanDraw", objc.BOOL, .{});
    }

    pub fn lockFocusIfCanDrawInContext(self: *@This(), context: ?*GraphicsContext) objc.BOOL {
        return objc.msgSend(self, "lockFocusIfCanDrawInContext:", objc.BOOL, .{context});
    }

    pub fn display(self: *@This()) void {
        return objc.msgSend(self, "display", void, .{});
    }

    pub fn displayIfNeeded(self: *@This()) void {
        return objc.msgSend(self, "displayIfNeeded", void, .{});
    }

    pub fn displayIfNeededIgnoringOpacity(self: *@This()) void {
        return objc.msgSend(self, "displayIfNeededIgnoringOpacity", void, .{});
    }

    pub fn displayRect(self: *@This(), rect: foundation.Rect) void {
        return objc.msgSend(self, "displayRect:", void, .{rect});
    }

    pub fn displayIfNeededInRect(self: *@This(), rect: foundation.Rect) void {
        return objc.msgSend(self, "displayIfNeededInRect:", void, .{rect});
    }

    pub fn displayRectIgnoringOpacity(self: *@This(), rect: foundation.Rect) void {
        return objc.msgSend(self, "displayRectIgnoringOpacity:", void, .{rect});
    }

    pub fn displayIfNeededInRectIgnoringOpacity(self: *@This(), rect: foundation.Rect) void {
        return objc.msgSend(self, "displayIfNeededInRectIgnoringOpacity:", void, .{rect});
    }

    pub fn drawRect(self: *@This(), dirtyRect: foundation.Rect) void {
        return objc.msgSend(self, "drawRect:", void, .{dirtyRect});
    }

    pub fn displayRectIgnoringOpacityInContext(self: *@This(), rect: foundation.Rect, context: ?*GraphicsContext) void {
        return objc.msgSend(self, "displayRectIgnoringOpacity:inContext:", void, .{rect, context});
    }

    pub fn bitmapImageRepForCachingDisplayInRect(self: *@This(), rect: foundation.Rect) ?*BitmapImageRep {
        return objc.msgSend(self, "bitmapImageRepForCachingDisplayInRect:", ?*BitmapImageRep, .{rect});
    }

    pub fn cacheDisplayInRectToBitmapImageRep(self: *@This(), rect: foundation.Rect, bitmapImageRep: ?*BitmapImageRep) void {
        return objc.msgSend(self, "cacheDisplayInRect:toBitmapImageRep:", void, .{rect, bitmapImageRep});
    }

    pub fn viewWillDraw(self: *@This()) void {
        return objc.msgSend(self, "viewWillDraw", void, .{});
    }

    pub fn scrollPoint(self: *@This(), point: foundation.Point) void {
        return objc.msgSend(self, "scrollPoint:", void, .{point});
    }

    pub fn scrollRectToVisible(self: *@This(), rect: foundation.Rect) objc.BOOL {
        return objc.msgSend(self, "scrollRectToVisible:", objc.BOOL, .{rect});
    }

    pub fn autoscroll(self: *@This(), event: ?*Event) objc.BOOL {
        return objc.msgSend(self, "autoscroll:", objc.BOOL, .{event});
    }

    pub fn adjustScroll(self: *@This(), newVisible: foundation.Rect) foundation.Rect {
        return objc.msgSend(self, "adjustScroll:", foundation.Rect, .{newVisible});
    }

    pub fn scrollRectBy(self: *@This(), rect: foundation.Rect, delta: foundation.Size) void {
        return objc.msgSend(self, "scrollRect:by:", void, .{rect, delta});
    }

    pub fn translateRectsNeedingDisplayInRectBy(self: *@This(), clipRect: foundation.Rect, delta: foundation.Size) void {
        return objc.msgSend(self, "translateRectsNeedingDisplayInRect:by:", void, .{clipRect, delta});
    }

    pub fn hitTest(self: *@This(), point: foundation.Point) ?*View {
        return objc.msgSend(self, "hitTest:", ?*View, .{point});
    }

    pub fn mouseInRect(self: *@This(), point: foundation.Point, rect: foundation.Rect) objc.BOOL {
        return objc.msgSend(self, "mouse:inRect:", objc.BOOL, .{point, rect});
    }

    pub fn viewWithTag(self: *@This(), tag: objc.NSInteger) ?*anyopaque {
        return objc.msgSend(self, "viewWithTag:", ?*anyopaque, .{tag});
    }

    pub fn performKeyEquivalent(self: *@This(), event: ?*Event) objc.BOOL {
        return objc.msgSend(self, "performKeyEquivalent:", objc.BOOL, .{event});
    }

    pub fn acceptsFirstMouse(self: *@This(), event: ?*Event) objc.BOOL {
        return objc.msgSend(self, "acceptsFirstMouse:", objc.BOOL, .{event});
    }

    pub fn shouldDelayWindowOrderingForEvent(self: *@This(), event: ?*Event) objc.BOOL {
        return objc.msgSend(self, "shouldDelayWindowOrderingForEvent:", objc.BOOL, .{event});
    }

    pub fn makeBackingLayer(self: *@This()) ?*CALayer {
        return objc.msgSend(self, "makeBackingLayer", ?*CALayer, .{});
    }

    pub fn updateLayer(self: *@This()) void {
        return objc.msgSend(self, "updateLayer", void, .{});
    }

    pub fn layoutSubtreeIfNeeded(self: *@This()) void {
        return objc.msgSend(self, "layoutSubtreeIfNeeded", void, .{});
    }

    pub fn layout(self: *@This()) void {
        return objc.msgSend(self, "layout", void, .{});
    }

    pub fn menuForEvent(self: *@This(), event: ?*Event) ?*Menu {
        return objc.msgSend(self, "menuForEvent:", ?*Menu, .{event});
    }

    pub fn willOpenMenuWithEvent(self: *@This(), menu: ?*Menu, event: ?*Event) void {
        return objc.msgSend(self, "willOpenMenu:withEvent:", void, .{menu, event});
    }

    pub fn didCloseMenuWithEvent(self: *@This(), menu: ?*Menu, event: ?*Event) void {
        return objc.msgSend(self, "didCloseMenu:withEvent:", void, .{menu, event});
    }

    pub fn addToolTipRectOwnerUserData(self: *@This(), rect: foundation.Rect, owner: *objc.Id, data: ?*anyopaque) ToolTipTag {
        return objc.msgSend(self, "addToolTipRect:owner:userData:", ToolTipTag, .{rect, owner, data});
    }

    pub fn removeToolTip(self: *@This(), tag: ToolTipTag) void {
        return objc.msgSend(self, "removeToolTip:", void, .{tag});
    }

    pub fn removeAllToolTips(self: *@This()) void {
        return objc.msgSend(self, "removeAllToolTips", void, .{});
    }

    pub fn viewWillStartLiveResize(self: *@This()) void {
        return objc.msgSend(self, "viewWillStartLiveResize", void, .{});
    }

    pub fn viewDidEndLiveResize(self: *@This()) void {
        return objc.msgSend(self, "viewDidEndLiveResize", void, .{});
    }

    pub fn getRectsExposedDuringLiveResizeCount(self: *@This(), exposedRects: ?*foundation.Rect, count: ?*objc.NSInteger) void {
        return objc.msgSend(self, "getRectsExposedDuringLiveResize:count:", void, .{exposedRects, count});
    }

    pub fn rectForSmartMagnificationAtPointInRect(self: *@This(), location: foundation.Point, visibleRect: foundation.Rect) foundation.Rect {
        return objc.msgSend(self, "rectForSmartMagnificationAtPoint:inRect:", foundation.Rect, .{location, visibleRect});
    }

    pub fn prepareForReuse(self: *@This()) void {
        return objc.msgSend(self, "prepareForReuse", void, .{});
    }

    pub fn prepareContentInRect(self: *@This(), rect: foundation.Rect) void {
        return objc.msgSend(self, "prepareContentInRect:", void, .{rect});
    }

    pub fn viewDidChangeEffectiveAppearance(self: *@This()) void {
        return objc.msgSend(self, "viewDidChangeEffectiveAppearance", void, .{});
    }

    pub fn window(self: *@This()) ?*Window {
        return objc.msgSend(self, "window", ?*Window, .{});
    }

    pub fn superview(self: *@This()) ?*View {
        return objc.msgSend(self, "superview", ?*View, .{});
    }

    pub fn subviews(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "subviews", ?*anyopaque, .{});
    }

    pub fn setSubviews(self: *@This(), subviews: ?*anyopaque) void {
        return objc.msgSend(self, "setSubviews:", void, .{subviews});
    }

    pub fn opaqueAncestor(self: *@This()) ?*View {
        return objc.msgSend(self, "opaqueAncestor", ?*View, .{});
    }

    pub fn isHidden(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isHidden", objc.BOOL, .{});
    }

    pub fn setHidden(self: *@This(), hidden: objc.BOOL) void {
        return objc.msgSend(self, "setHidden:", void, .{hidden});
    }

    pub fn isHiddenOrHasHiddenAncestor(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isHiddenOrHasHiddenAncestor", objc.BOOL, .{});
    }

    pub fn wantsDefaultClipping(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "wantsDefaultClipping", objc.BOOL, .{});
    }

    pub fn postsFrameChangedNotifications(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "postsFrameChangedNotifications", objc.BOOL, .{});
    }

    pub fn setPostsFrameChangedNotifications(self: *@This(), postsFrameChangedNotifications: objc.BOOL) void {
        return objc.msgSend(self, "setPostsFrameChangedNotifications:", void, .{postsFrameChangedNotifications});
    }

    pub fn autoresizesSubviews(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "autoresizesSubviews", objc.BOOL, .{});
    }

    pub fn setAutoresizesSubviews(self: *@This(), autoresizesSubviews: objc.BOOL) void {
        return objc.msgSend(self, "setAutoresizesSubviews:", void, .{autoresizesSubviews});
    }

    pub fn autoresizingMask(self: *@This()) AutoresizingMaskOptions {
        return objc.msgSend(self, "autoresizingMask", AutoresizingMaskOptions, .{});
    }

    pub fn setAutoresizingMask(self: *@This(), autoresizingMask: AutoresizingMaskOptions) void {
        return objc.msgSend(self, "setAutoresizingMask:", void, .{autoresizingMask});
    }

    pub fn frame(self: *@This()) foundation.Rect {
        return objc.msgSend(self, "frame", foundation.Rect, .{});
    }

    pub fn setFrame(self: *@This(), frame: foundation.Rect) void {
        return objc.msgSend(self, "setFrame:", void, .{frame});
    }

    pub fn frameRotation(self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(self, "frameRotation", core_foundation.CGFloat, .{});
    }

    pub fn setFrameRotation(self: *@This(), frameRotation: core_foundation.CGFloat) void {
        return objc.msgSend(self, "setFrameRotation:", void, .{frameRotation});
    }

    pub fn frameCenterRotation(self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(self, "frameCenterRotation", core_foundation.CGFloat, .{});
    }

    pub fn setFrameCenterRotation(self: *@This(), frameCenterRotation: core_foundation.CGFloat) void {
        return objc.msgSend(self, "setFrameCenterRotation:", void, .{frameCenterRotation});
    }

    pub fn boundsRotation(self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(self, "boundsRotation", core_foundation.CGFloat, .{});
    }

    pub fn setBoundsRotation(self: *@This(), boundsRotation: core_foundation.CGFloat) void {
        return objc.msgSend(self, "setBoundsRotation:", void, .{boundsRotation});
    }

    pub fn bounds(self: *@This()) foundation.Rect {
        return objc.msgSend(self, "bounds", foundation.Rect, .{});
    }

    pub fn setBounds(self: *@This(), bounds: foundation.Rect) void {
        return objc.msgSend(self, "setBounds:", void, .{bounds});
    }

    pub fn isFlipped(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isFlipped", objc.BOOL, .{});
    }

    pub fn isRotatedFromBase(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isRotatedFromBase", objc.BOOL, .{});
    }

    pub fn isRotatedOrScaledFromBase(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isRotatedOrScaledFromBase", objc.BOOL, .{});
    }

    pub fn isOpaque(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isOpaque", objc.BOOL, .{});
    }

    pub fn canDrawConcurrently(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "canDrawConcurrently", objc.BOOL, .{});
    }

    pub fn setCanDrawConcurrently(self: *@This(), canDrawConcurrently: objc.BOOL) void {
        return objc.msgSend(self, "setCanDrawConcurrently:", void, .{canDrawConcurrently});
    }

    pub fn canDraw(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "canDraw", objc.BOOL, .{});
    }

    pub fn needsDisplay(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "needsDisplay", objc.BOOL, .{});
    }

    pub fn setNeedsDisplay(self: *@This(), needsDisplay: objc.BOOL) void {
        return objc.msgSend(self, "setNeedsDisplay:", void, .{needsDisplay});
    }

    pub fn focusView(self: *@This()) ?*View {
        return objc.msgSend(self, "focusView", ?*View, .{});
    }

    pub fn visibleRect(self: *@This()) foundation.Rect {
        return objc.msgSend(self, "visibleRect", foundation.Rect, .{});
    }

    pub fn tag(self: *@This()) objc.NSInteger {
        return objc.msgSend(self, "tag", objc.NSInteger, .{});
    }

    pub fn needsPanelToBecomeKey(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "needsPanelToBecomeKey", objc.BOOL, .{});
    }

    pub fn mouseDownCanMoveWindow(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "mouseDownCanMoveWindow", objc.BOOL, .{});
    }

    pub fn acceptsTouchEvents(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "acceptsTouchEvents", objc.BOOL, .{});
    }

    pub fn setAcceptsTouchEvents(self: *@This(), acceptsTouchEvents: objc.BOOL) void {
        return objc.msgSend(self, "setAcceptsTouchEvents:", void, .{acceptsTouchEvents});
    }

    pub fn wantsRestingTouches(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "wantsRestingTouches", objc.BOOL, .{});
    }

    pub fn setWantsRestingTouches(self: *@This(), wantsRestingTouches: objc.BOOL) void {
        return objc.msgSend(self, "setWantsRestingTouches:", void, .{wantsRestingTouches});
    }

    pub fn layerContentsRedrawPolicy(self: *@This()) ViewLayerContentsRedrawPolicy {
        return objc.msgSend(self, "layerContentsRedrawPolicy", ViewLayerContentsRedrawPolicy, .{});
    }

    pub fn setLayerContentsRedrawPolicy(self: *@This(), layerContentsRedrawPolicy: ViewLayerContentsRedrawPolicy) void {
        return objc.msgSend(self, "setLayerContentsRedrawPolicy:", void, .{layerContentsRedrawPolicy});
    }

    pub fn layerContentsPlacement(self: *@This()) ViewLayerContentsPlacement {
        return objc.msgSend(self, "layerContentsPlacement", ViewLayerContentsPlacement, .{});
    }

    pub fn setLayerContentsPlacement(self: *@This(), layerContentsPlacement: ViewLayerContentsPlacement) void {
        return objc.msgSend(self, "setLayerContentsPlacement:", void, .{layerContentsPlacement});
    }

    pub fn wantsLayer(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "wantsLayer", objc.BOOL, .{});
    }

    pub fn setWantsLayer(self: *@This(), wantsLayer: objc.BOOL) void {
        return objc.msgSend(self, "setWantsLayer:", void, .{wantsLayer});
    }

    pub fn layer(self: *@This()) ?*CALayer {
        return objc.msgSend(self, "layer", ?*CALayer, .{});
    }

    pub fn setLayer(self: *@This(), layer: ?*CALayer) void {
        return objc.msgSend(self, "setLayer:", void, .{layer});
    }

    pub fn wantsUpdateLayer(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "wantsUpdateLayer", objc.BOOL, .{});
    }

    pub fn canDrawSubviewsIntoLayer(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "canDrawSubviewsIntoLayer", objc.BOOL, .{});
    }

    pub fn setCanDrawSubviewsIntoLayer(self: *@This(), canDrawSubviewsIntoLayer: objc.BOOL) void {
        return objc.msgSend(self, "setCanDrawSubviewsIntoLayer:", void, .{canDrawSubviewsIntoLayer});
    }

    pub fn needsLayout(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "needsLayout", objc.BOOL, .{});
    }

    pub fn setNeedsLayout(self: *@This(), needsLayout: objc.BOOL) void {
        return objc.msgSend(self, "setNeedsLayout:", void, .{needsLayout});
    }

    pub fn alphaValue(self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(self, "alphaValue", core_foundation.CGFloat, .{});
    }

    pub fn setAlphaValue(self: *@This(), alphaValue: core_foundation.CGFloat) void {
        return objc.msgSend(self, "setAlphaValue:", void, .{alphaValue});
    }

    pub fn layerUsesCoreImageFilters(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "layerUsesCoreImageFilters", objc.BOOL, .{});
    }

    pub fn setLayerUsesCoreImageFilters(self: *@This(), layerUsesCoreImageFilters: objc.BOOL) void {
        return objc.msgSend(self, "setLayerUsesCoreImageFilters:", void, .{layerUsesCoreImageFilters});
    }

    pub fn backgroundFilters(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "backgroundFilters", ?*anyopaque, .{});
    }

    pub fn setBackgroundFilters(self: *@This(), backgroundFilters: ?*anyopaque) void {
        return objc.msgSend(self, "setBackgroundFilters:", void, .{backgroundFilters});
    }

    pub fn compositingFilter(self: *@This()) ?*CIFilter {
        return objc.msgSend(self, "compositingFilter", ?*CIFilter, .{});
    }

    pub fn setCompositingFilter(self: *@This(), compositingFilter: ?*CIFilter) void {
        return objc.msgSend(self, "setCompositingFilter:", void, .{compositingFilter});
    }

    pub fn contentFilters(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "contentFilters", ?*anyopaque, .{});
    }

    pub fn setContentFilters(self: *@This(), contentFilters: ?*anyopaque) void {
        return objc.msgSend(self, "setContentFilters:", void, .{contentFilters});
    }

    pub fn shadow(self: *@This()) ?*Shadow {
        return objc.msgSend(self, "shadow", ?*Shadow, .{});
    }

    pub fn setShadow(self: *@This(), shadow: ?*Shadow) void {
        return objc.msgSend(self, "setShadow:", void, .{shadow});
    }

    pub fn clipsToBounds(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "clipsToBounds", objc.BOOL, .{});
    }

    pub fn setClipsToBounds(self: *@This(), clipsToBounds: objc.BOOL) void {
        return objc.msgSend(self, "setClipsToBounds:", void, .{clipsToBounds});
    }

    pub fn postsBoundsChangedNotifications(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "postsBoundsChangedNotifications", objc.BOOL, .{});
    }

    pub fn setPostsBoundsChangedNotifications(self: *@This(), postsBoundsChangedNotifications: objc.BOOL) void {
        return objc.msgSend(self, "setPostsBoundsChangedNotifications:", void, .{postsBoundsChangedNotifications});
    }

    pub fn enclosingScrollView(self: *@This()) ?*ScrollView {
        return objc.msgSend(self, "enclosingScrollView", ?*ScrollView, .{});
    }

    pub fn defaultMenu(self: *@This()) ?*Menu {
        return objc.msgSend(self, "defaultMenu", ?*Menu, .{});
    }

    pub fn toolTip(self: *@This()) ?*String {
        return objc.msgSend(self, "toolTip", ?*String, .{});
    }

    pub fn setToolTip(self: *@This(), toolTip: ?*String) void {
        return objc.msgSend(self, "setToolTip:", void, .{toolTip});
    }

    pub fn inLiveResize(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "inLiveResize", objc.BOOL, .{});
    }

    pub fn preservesContentDuringLiveResize(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "preservesContentDuringLiveResize", objc.BOOL, .{});
    }

    pub fn rectPreservedDuringLiveResize(self: *@This()) foundation.Rect {
        return objc.msgSend(self, "rectPreservedDuringLiveResize", foundation.Rect, .{});
    }

    pub fn inputContext(self: *@This()) ?*TextInputContext {
        return objc.msgSend(self, "inputContext", ?*TextInputContext, .{});
    }

    pub fn userInterfaceLayoutDirection(self: *@This()) UserInterfaceLayoutDirection {
        return objc.msgSend(self, "userInterfaceLayoutDirection", UserInterfaceLayoutDirection, .{});
    }

    pub fn setUserInterfaceLayoutDirection(self: *@This(), userInterfaceLayoutDirection: UserInterfaceLayoutDirection) void {
        return objc.msgSend(self, "setUserInterfaceLayoutDirection:", void, .{userInterfaceLayoutDirection});
    }

    pub fn isCompatibleWithResponsiveScrolling(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isCompatibleWithResponsiveScrolling", objc.BOOL, .{});
    }

    pub fn preparedContentRect(self: *@This()) foundation.Rect {
        return objc.msgSend(self, "preparedContentRect", foundation.Rect, .{});
    }

    pub fn setPreparedContentRect(self: *@This(), preparedContentRect: foundation.Rect) void {
        return objc.msgSend(self, "setPreparedContentRect:", void, .{preparedContentRect});
    }

    pub fn allowsVibrancy(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "allowsVibrancy", objc.BOOL, .{});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSViewLayerContentScaleDelegate?language=objc
pub const ViewLayerContentScaleDelegate = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{objc.NSObject, });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn layerShouldInheritContentsScaleFromWindow(self: *@This(), layer: ?*CALayer, newScale: core_foundation.CGFloat, window: ?*Window) objc.BOOL {
        return objc.msgSend(self, "layer:shouldInheritContentsScale:fromWindow:", objc.BOOL, .{layer, newScale, window});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSViewToolTipOwner?language=objc
pub const ViewToolTipOwner = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{objc.NSObject, });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn viewStringForToolTipPointUserData(self: *@This(), view: ?*View, tag: ToolTipTag, point: foundation.Point, data: ?*anyopaque, ) ?*String {
        return objc.msgSend(self, "view:stringForToolTip:point:userData:", ?*String, .{view, tag, point, data, });
    }

};

/// https://developer.apple.com/documentation/AppKit/NSViewContentSelectionInfo?language=objc
pub const ViewContentSelectionInfo = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{objc.NSObject, });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn selectionAnchorRect(self: *@This()) foundation.Rect {
        return objc.msgSend(self, "selectionAnchorRect", foundation.Rect, .{});
    }

};

pub const ViewFullScreenModeOptionKey = ?*String;

pub const DefinitionOptionKey = ?*String;

pub const DefinitionPresentationType = ?*String;

pub const WritingDirection = enum(objc.NSInteger) {
    Natural = -1,
    LeftToRight = 0,
    RightToLeft = 1,
};

/// https://developer.apple.com/documentation/AppKit/NSChangeSpelling?language=objc
pub const ChangeSpelling = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn changeSpelling(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "changeSpelling:", void, .{sender});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSIgnoreMisspelledWords?language=objc
pub const IgnoreMisspelledWords = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn ignoreSpelling(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "ignoreSpelling:", void, .{sender});
    }

};

pub const TextAlignment = enum(objc.NSInteger) {
    Left = 0,
    Center = 1,
    Right = 2,
    Justified = 3,
    Natural = 4,
};

/// https://developer.apple.com/documentation/AppKit/NSText?language=objc
pub const Text = opaque {
    pub const InternalInfo = objc.ExternalClass("NSText", @This(), View, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn initWithFrame(self: *@This(), frameRect: foundation.Rect) *@This() {
        return objc.msgSend(self, "initWithFrame:", *@This(), .{frameRect});
    }

    pub fn initWithCoder(self: *@This(), coder: ?*foundation.Coder) *@This() {
        return objc.msgSend(self, "initWithCoder:", *@This(), .{coder});
    }

    pub fn replaceCharactersInRangeWithString(self: *@This(), range: foundation.Range, string: ?*String) void {
        return objc.msgSend(self, "replaceCharactersInRange:withString:", void, .{range, string});
    }

    pub fn replaceCharactersInRangeWithRTF(self: *@This(), range: foundation.Range, rtfData: ?*Data) void {
        return objc.msgSend(self, "replaceCharactersInRange:withRTF:", void, .{range, rtfData});
    }

    pub fn replaceCharactersInRangeWithRTFD(self: *@This(), range: foundation.Range, rtfdData: ?*Data) void {
        return objc.msgSend(self, "replaceCharactersInRange:withRTFD:", void, .{range, rtfdData});
    }

    pub fn RTFFromRange(self: *@This(), range: foundation.Range) ?*Data {
        return objc.msgSend(self, "RTFFromRange:", ?*Data, .{range});
    }

    pub fn RTFDFromRange(self: *@This(), range: foundation.Range) ?*Data {
        return objc.msgSend(self, "RTFDFromRange:", ?*Data, .{range});
    }

    pub fn writeRTFDToFileAtomically(self: *@This(), path: ?*String, flag: objc.BOOL) objc.BOOL {
        return objc.msgSend(self, "writeRTFDToFile:atomically:", objc.BOOL, .{path, flag});
    }

    pub fn readRTFDFromFile(self: *@This(), path: ?*String) objc.BOOL {
        return objc.msgSend(self, "readRTFDFromFile:", objc.BOOL, .{path});
    }

    pub fn scrollRangeToVisible(self: *@This(), range: foundation.Range) void {
        return objc.msgSend(self, "scrollRangeToVisible:", void, .{range});
    }

    pub fn setTextColorRange(self: *@This(), color: ?*Color, range: foundation.Range) void {
        return objc.msgSend(self, "setTextColor:range:", void, .{color, range});
    }

    pub fn setFontRange(self: *@This(), font: ?*Font, range: foundation.Range) void {
        return objc.msgSend(self, "setFont:range:", void, .{font, range});
    }

    pub fn sizeToFit(self: *@This()) void {
        return objc.msgSend(self, "sizeToFit", void, .{});
    }

    pub fn copy(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "copy:", void, .{sender});
    }

    pub fn copyFont(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "copyFont:", void, .{sender});
    }

    pub fn copyRuler(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "copyRuler:", void, .{sender});
    }

    pub fn cut(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "cut:", void, .{sender});
    }

    pub fn delete(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "delete:", void, .{sender});
    }

    pub fn paste(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "paste:", void, .{sender});
    }

    pub fn pasteFont(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "pasteFont:", void, .{sender});
    }

    pub fn pasteRuler(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "pasteRuler:", void, .{sender});
    }

    pub fn selectAll(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "selectAll:", void, .{sender});
    }

    pub fn changeFont(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "changeFont:", void, .{sender});
    }

    pub fn alignLeft(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "alignLeft:", void, .{sender});
    }

    pub fn alignRight(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "alignRight:", void, .{sender});
    }

    pub fn alignCenter(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "alignCenter:", void, .{sender});
    }

    pub fn subscript(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "subscript:", void, .{sender});
    }

    pub fn superscript(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "superscript:", void, .{sender});
    }

    pub fn underline(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "underline:", void, .{sender});
    }

    pub fn unscript(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "unscript:", void, .{sender});
    }

    pub fn showGuessPanel(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "showGuessPanel:", void, .{sender});
    }

    pub fn checkSpelling(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "checkSpelling:", void, .{sender});
    }

    pub fn toggleRuler(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "toggleRuler:", void, .{sender});
    }

    pub fn string(self: *@This()) ?*String {
        return objc.msgSend(self, "string", ?*String, .{});
    }

    pub fn setString(self: *@This(), string: ?*String) void {
        return objc.msgSend(self, "setString:", void, .{string});
    }

    pub fn delegate(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "delegate", ?*anyopaque, .{});
    }

    pub fn setDelegate(self: *@This(), delegate: ?*anyopaque) void {
        return objc.msgSend(self, "setDelegate:", void, .{delegate});
    }

    pub fn isEditable(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isEditable", objc.BOOL, .{});
    }

    pub fn setEditable(self: *@This(), editable: objc.BOOL) void {
        return objc.msgSend(self, "setEditable:", void, .{editable});
    }

    pub fn isSelectable(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isSelectable", objc.BOOL, .{});
    }

    pub fn setSelectable(self: *@This(), selectable: objc.BOOL) void {
        return objc.msgSend(self, "setSelectable:", void, .{selectable});
    }

    pub fn isRichText(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isRichText", objc.BOOL, .{});
    }

    pub fn setRichText(self: *@This(), richText: objc.BOOL) void {
        return objc.msgSend(self, "setRichText:", void, .{richText});
    }

    pub fn importsGraphics(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "importsGraphics", objc.BOOL, .{});
    }

    pub fn setImportsGraphics(self: *@This(), importsGraphics: objc.BOOL) void {
        return objc.msgSend(self, "setImportsGraphics:", void, .{importsGraphics});
    }

    pub fn isFieldEditor(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isFieldEditor", objc.BOOL, .{});
    }

    pub fn setFieldEditor(self: *@This(), fieldEditor: objc.BOOL) void {
        return objc.msgSend(self, "setFieldEditor:", void, .{fieldEditor});
    }

    pub fn usesFontPanel(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "usesFontPanel", objc.BOOL, .{});
    }

    pub fn setUsesFontPanel(self: *@This(), usesFontPanel: objc.BOOL) void {
        return objc.msgSend(self, "setUsesFontPanel:", void, .{usesFontPanel});
    }

    pub fn drawsBackground(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "drawsBackground", objc.BOOL, .{});
    }

    pub fn setDrawsBackground(self: *@This(), drawsBackground: objc.BOOL) void {
        return objc.msgSend(self, "setDrawsBackground:", void, .{drawsBackground});
    }

    pub fn backgroundColor(self: *@This()) ?*Color {
        return objc.msgSend(self, "backgroundColor", ?*Color, .{});
    }

    pub fn setBackgroundColor(self: *@This(), backgroundColor: ?*Color) void {
        return objc.msgSend(self, "setBackgroundColor:", void, .{backgroundColor});
    }

    pub fn isRulerVisible(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isRulerVisible", objc.BOOL, .{});
    }

    pub fn selectedRange(self: *@This()) foundation.Range {
        return objc.msgSend(self, "selectedRange", foundation.Range, .{});
    }

    pub fn setSelectedRange(self: *@This(), selectedRange: foundation.Range) void {
        return objc.msgSend(self, "setSelectedRange:", void, .{selectedRange});
    }

    pub fn font(self: *@This()) ?*Font {
        return objc.msgSend(self, "font", ?*Font, .{});
    }

    pub fn setFont(self: *@This(), font: ?*Font) void {
        return objc.msgSend(self, "setFont:", void, .{font});
    }

    pub fn textColor(self: *@This()) ?*Color {
        return objc.msgSend(self, "textColor", ?*Color, .{});
    }

    pub fn setTextColor(self: *@This(), textColor: ?*Color) void {
        return objc.msgSend(self, "setTextColor:", void, .{textColor});
    }

    pub fn alignment(self: *@This()) TextAlignment {
        return objc.msgSend(self, "alignment", TextAlignment, .{});
    }

    pub fn setAlignment(self: *@This(), alignment: TextAlignment) void {
        return objc.msgSend(self, "setAlignment:", void, .{alignment});
    }

    pub fn baseWritingDirection(self: *@This()) WritingDirection {
        return objc.msgSend(self, "baseWritingDirection", WritingDirection, .{});
    }

    pub fn setBaseWritingDirection(self: *@This(), baseWritingDirection: WritingDirection) void {
        return objc.msgSend(self, "setBaseWritingDirection:", void, .{baseWritingDirection});
    }

    pub fn maxSize(self: *@This()) foundation.Size {
        return objc.msgSend(self, "maxSize", foundation.Size, .{});
    }

    pub fn setMaxSize(self: *@This(), maxSize: foundation.Size) void {
        return objc.msgSend(self, "setMaxSize:", void, .{maxSize});
    }

    pub fn minSize(self: *@This()) foundation.Size {
        return objc.msgSend(self, "minSize", foundation.Size, .{});
    }

    pub fn setMinSize(self: *@This(), minSize: foundation.Size) void {
        return objc.msgSend(self, "setMinSize:", void, .{minSize});
    }

    pub fn isHorizontallyResizable(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isHorizontallyResizable", objc.BOOL, .{});
    }

    pub fn setHorizontallyResizable(self: *@This(), horizontallyResizable: objc.BOOL) void {
        return objc.msgSend(self, "setHorizontallyResizable:", void, .{horizontallyResizable});
    }

    pub fn isVerticallyResizable(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isVerticallyResizable", objc.BOOL, .{});
    }

    pub fn setVerticallyResizable(self: *@This(), verticallyResizable: objc.BOOL) void {
        return objc.msgSend(self, "setVerticallyResizable:", void, .{verticallyResizable});
    }

};

pub const TextMovement = enum(objc.NSInteger) {
    Return = 16,
    Tab = 17,
    Backtab = 18,
    Left = 19,
    Right = 20,
    Up = 21,
    Down = 22,
    Cancel = 23,
    Other = 0,
};

/// https://developer.apple.com/documentation/AppKit/NSTextDelegate?language=objc
pub const TextDelegate = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{objc.NSObject, });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn textShouldBeginEditing(self: *@This(), textObject: ?*Text) objc.BOOL {
        return objc.msgSend(self, "textShouldBeginEditing:", objc.BOOL, .{textObject});
    }

    pub fn textShouldEndEditing(self: *@This(), textObject: ?*Text) objc.BOOL {
        return objc.msgSend(self, "textShouldEndEditing:", objc.BOOL, .{textObject});
    }

    pub fn textDidBeginEditing(self: *@This(), notification: ?*Notification) void {
        return objc.msgSend(self, "textDidBeginEditing:", void, .{notification});
    }

    pub fn textDidEndEditing(self: *@This(), notification: ?*Notification) void {
        return objc.msgSend(self, "textDidEndEditing:", void, .{notification});
    }

    pub fn textDidChange(self: *@This(), notification: ?*Notification) void {
        return objc.msgSend(self, "textDidChange:", void, .{notification});
    }

};

pub const LineBreakMode = enum(objc.NSUInteger) {
    ByWordWrapping = 0,
    ByCharWrapping = 1,
    ByClipping = 2,
    ByTruncatingHead = 3,
    ByTruncatingTail = 4,
    ByTruncatingMiddle = 5,
};

pub const LineBreakStrategy = enum(objc.NSUInteger) {
    None = 0,
    PushOut = 1,
    HangulWordPriority = 2,
    Standard = 65535,
};

pub const TextTabOptionKey = ?*String;

/// https://developer.apple.com/documentation/AppKit/NSTextTab?language=objc
pub const TextTab = opaque {
    pub const InternalInfo = objc.ExternalClass("NSTextTab", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn columnTerminatorsForLocale(self: *@This(), aLocale: ?*foundation.Locale) ?*foundation.CharacterSet {
        return objc.msgSend(self, "columnTerminatorsForLocale:", ?*foundation.CharacterSet, .{aLocale});
    }

    pub fn location(self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(self, "location", core_foundation.CGFloat, .{});
    }

    pub fn options(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "options", ?*anyopaque, .{});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSParagraphStyle?language=objc
pub const ParagraphStyle = opaque {
    pub const InternalInfo = objc.ExternalClass("NSParagraphStyle", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn defaultWritingDirectionForLanguage(self: *@This(), languageName: ?*String) WritingDirection {
        return objc.msgSend(self, "defaultWritingDirectionForLanguage:", WritingDirection, .{languageName});
    }

    pub fn defaultParagraphStyle(self: *@This()) ?*core_text.NSParagraphStyle {
        return objc.msgSend(self, "defaultParagraphStyle", ?*core_text.NSParagraphStyle, .{});
    }

    pub fn lineSpacing(self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(self, "lineSpacing", core_foundation.CGFloat, .{});
    }

    pub fn paragraphSpacing(self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(self, "paragraphSpacing", core_foundation.CGFloat, .{});
    }

    pub fn headIndent(self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(self, "headIndent", core_foundation.CGFloat, .{});
    }

    pub fn tailIndent(self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(self, "tailIndent", core_foundation.CGFloat, .{});
    }

    pub fn firstLineHeadIndent(self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(self, "firstLineHeadIndent", core_foundation.CGFloat, .{});
    }

    pub fn minimumLineHeight(self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(self, "minimumLineHeight", core_foundation.CGFloat, .{});
    }

    pub fn maximumLineHeight(self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(self, "maximumLineHeight", core_foundation.CGFloat, .{});
    }

    pub fn lineBreakMode(self: *@This()) LineBreakMode {
        return objc.msgSend(self, "lineBreakMode", LineBreakMode, .{});
    }

    pub fn baseWritingDirection(self: *@This()) WritingDirection {
        return objc.msgSend(self, "baseWritingDirection", WritingDirection, .{});
    }

    pub fn lineHeightMultiple(self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(self, "lineHeightMultiple", core_foundation.CGFloat, .{});
    }

    pub fn paragraphSpacingBefore(self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(self, "paragraphSpacingBefore", core_foundation.CGFloat, .{});
    }

    pub fn hyphenationFactor(self: *@This()) f32 {
        return objc.msgSend(self, "hyphenationFactor", f32, .{});
    }

    pub fn usesDefaultHyphenation(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "usesDefaultHyphenation", objc.BOOL, .{});
    }

    pub fn tabStops(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "tabStops", ?*anyopaque, .{});
    }

    pub fn defaultTabInterval(self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(self, "defaultTabInterval", core_foundation.CGFloat, .{});
    }

    pub fn textLists(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "textLists", ?*anyopaque, .{});
    }

    pub fn allowsDefaultTighteningForTruncation(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "allowsDefaultTighteningForTruncation", objc.BOOL, .{});
    }

    pub fn lineBreakStrategy(self: *@This()) LineBreakStrategy {
        return objc.msgSend(self, "lineBreakStrategy", LineBreakStrategy, .{});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSMutableParagraphStyle?language=objc
pub const MutableParagraphStyle = opaque {
    pub const InternalInfo = objc.ExternalClass("NSMutableParagraphStyle", @This(), ParagraphStyle, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn addTabStop(self: *@This(), anObject: ?*core_text.NSTextTab) void {
        return objc.msgSend(self, "addTabStop:", void, .{anObject});
    }

    pub fn removeTabStop(self: *@This(), anObject: ?*core_text.NSTextTab) void {
        return objc.msgSend(self, "removeTabStop:", void, .{anObject});
    }

    pub fn setParagraphStyle(self: *@This(), obj: ?*ParagraphStyle) void {
        return objc.msgSend(self, "setParagraphStyle:", void, .{obj});
    }

    pub fn lineSpacing(self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(self, "lineSpacing", core_foundation.CGFloat, .{});
    }

    pub fn setLineSpacing(self: *@This(), lineSpacing: core_foundation.CGFloat) void {
        return objc.msgSend(self, "setLineSpacing:", void, .{lineSpacing});
    }

    pub fn paragraphSpacing(self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(self, "paragraphSpacing", core_foundation.CGFloat, .{});
    }

    pub fn setParagraphSpacing(self: *@This(), paragraphSpacing: core_foundation.CGFloat) void {
        return objc.msgSend(self, "setParagraphSpacing:", void, .{paragraphSpacing});
    }

    pub fn firstLineHeadIndent(self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(self, "firstLineHeadIndent", core_foundation.CGFloat, .{});
    }

    pub fn setFirstLineHeadIndent(self: *@This(), firstLineHeadIndent: core_foundation.CGFloat) void {
        return objc.msgSend(self, "setFirstLineHeadIndent:", void, .{firstLineHeadIndent});
    }

    pub fn headIndent(self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(self, "headIndent", core_foundation.CGFloat, .{});
    }

    pub fn setHeadIndent(self: *@This(), headIndent: core_foundation.CGFloat) void {
        return objc.msgSend(self, "setHeadIndent:", void, .{headIndent});
    }

    pub fn tailIndent(self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(self, "tailIndent", core_foundation.CGFloat, .{});
    }

    pub fn setTailIndent(self: *@This(), tailIndent: core_foundation.CGFloat) void {
        return objc.msgSend(self, "setTailIndent:", void, .{tailIndent});
    }

    pub fn lineBreakMode(self: *@This()) LineBreakMode {
        return objc.msgSend(self, "lineBreakMode", LineBreakMode, .{});
    }

    pub fn setLineBreakMode(self: *@This(), lineBreakMode: LineBreakMode) void {
        return objc.msgSend(self, "setLineBreakMode:", void, .{lineBreakMode});
    }

    pub fn minimumLineHeight(self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(self, "minimumLineHeight", core_foundation.CGFloat, .{});
    }

    pub fn setMinimumLineHeight(self: *@This(), minimumLineHeight: core_foundation.CGFloat) void {
        return objc.msgSend(self, "setMinimumLineHeight:", void, .{minimumLineHeight});
    }

    pub fn maximumLineHeight(self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(self, "maximumLineHeight", core_foundation.CGFloat, .{});
    }

    pub fn setMaximumLineHeight(self: *@This(), maximumLineHeight: core_foundation.CGFloat) void {
        return objc.msgSend(self, "setMaximumLineHeight:", void, .{maximumLineHeight});
    }

    pub fn baseWritingDirection(self: *@This()) WritingDirection {
        return objc.msgSend(self, "baseWritingDirection", WritingDirection, .{});
    }

    pub fn setBaseWritingDirection(self: *@This(), baseWritingDirection: WritingDirection) void {
        return objc.msgSend(self, "setBaseWritingDirection:", void, .{baseWritingDirection});
    }

    pub fn lineHeightMultiple(self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(self, "lineHeightMultiple", core_foundation.CGFloat, .{});
    }

    pub fn setLineHeightMultiple(self: *@This(), lineHeightMultiple: core_foundation.CGFloat) void {
        return objc.msgSend(self, "setLineHeightMultiple:", void, .{lineHeightMultiple});
    }

    pub fn paragraphSpacingBefore(self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(self, "paragraphSpacingBefore", core_foundation.CGFloat, .{});
    }

    pub fn setParagraphSpacingBefore(self: *@This(), paragraphSpacingBefore: core_foundation.CGFloat) void {
        return objc.msgSend(self, "setParagraphSpacingBefore:", void, .{paragraphSpacingBefore});
    }

    pub fn hyphenationFactor(self: *@This()) f32 {
        return objc.msgSend(self, "hyphenationFactor", f32, .{});
    }

    pub fn setHyphenationFactor(self: *@This(), hyphenationFactor: f32) void {
        return objc.msgSend(self, "setHyphenationFactor:", void, .{hyphenationFactor});
    }

    pub fn usesDefaultHyphenation(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "usesDefaultHyphenation", objc.BOOL, .{});
    }

    pub fn setUsesDefaultHyphenation(self: *@This(), usesDefaultHyphenation: objc.BOOL) void {
        return objc.msgSend(self, "setUsesDefaultHyphenation:", void, .{usesDefaultHyphenation});
    }

    pub fn tabStops(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "tabStops", ?*anyopaque, .{});
    }

    pub fn setTabStops(self: *@This(), tabStops: ?*anyopaque) void {
        return objc.msgSend(self, "setTabStops:", void, .{tabStops});
    }

    pub fn defaultTabInterval(self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(self, "defaultTabInterval", core_foundation.CGFloat, .{});
    }

    pub fn setDefaultTabInterval(self: *@This(), defaultTabInterval: core_foundation.CGFloat) void {
        return objc.msgSend(self, "setDefaultTabInterval:", void, .{defaultTabInterval});
    }

    pub fn allowsDefaultTighteningForTruncation(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "allowsDefaultTighteningForTruncation", objc.BOOL, .{});
    }

    pub fn setAllowsDefaultTighteningForTruncation(self: *@This(), allowsDefaultTighteningForTruncation: objc.BOOL) void {
        return objc.msgSend(self, "setAllowsDefaultTighteningForTruncation:", void, .{allowsDefaultTighteningForTruncation});
    }

    pub fn lineBreakStrategy(self: *@This()) LineBreakStrategy {
        return objc.msgSend(self, "lineBreakStrategy", LineBreakStrategy, .{});
    }

    pub fn setLineBreakStrategy(self: *@This(), lineBreakStrategy: LineBreakStrategy) void {
        return objc.msgSend(self, "setLineBreakStrategy:", void, .{lineBreakStrategy});
    }

    pub fn textLists(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "textLists", ?*anyopaque, .{});
    }

    pub fn setTextLists(self: *@This(), textLists: ?*anyopaque) void {
        return objc.msgSend(self, "setTextLists:", void, .{textLists});
    }

};

pub const TextTabType = enum(objc.NSUInteger) {
    LeftTabStopType = 0,
    RightTabStopType = 1,
    CenterTabStopType = 2,
    DecimalTabStopType = 3,
};

pub const CellType = enum(objc.NSUInteger) {
    NullCellType = 0,
    TextCellType = 1,
    ImageCellType = 2,
};

pub const CellAttribute = enum(objc.NSUInteger) {
    Disabled = 0,
    State = 1,
    PushInCell = 2,
    Editable = 3,
    ChangeGrayCell = 4,
    Highlighted = 5,
    LightsByContents = 6,
    LightsByGray = 7,
    ChangeBackgroundCell = 8,
    LightsByBackground = 9,
    IsBordered = 10,
    HasOverlappingImage = 11,
    HasImageHorizontal = 12,
    HasImageOnLeftOrBottom = 13,
    ChangesContents = 14,
    IsInsetButton = 15,
    AllowsMixedState = 16,
};

pub const CellImagePosition = enum(objc.NSUInteger) {
    NoImage = 0,
    ImageOnly = 1,
    ImageLeft = 2,
    ImageRight = 3,
    ImageBelow = 4,
    ImageAbove = 5,
    ImageOverlaps = 6,
    ImageLeading = 7,
    ImageTrailing = 8,
};

pub const ImageScaling = enum(objc.NSUInteger) {
    ScaleProportionallyDown = 0,
    ScaleAxesIndependently = 1,
    ScaleNone = 2,
    ScaleProportionallyUpOrDown = 3,
    ScaleProportionally = 0,
    ScaleToFit = 1,
    ScaleNone = 2,
};

pub const ControlStateValue = objc.NSInteger;

pub const CellStyleMask = enum(objc.NSUInteger) {
    NoCellMask = 0,
    ContentsCellMask = 1,
    PushInCellMask = 2,
    ChangeGrayCellMask = 4,
    ChangeBackgroundCellMask = 8,
};

pub const ControlTint = enum(objc.NSUInteger) {
    DefaultControlTint = 0,
    BlueControlTint = 1,
    GraphiteControlTint = 6,
    ClearControlTint = 7,
};

pub const ControlSize = enum(objc.NSUInteger) {
    Regular = 0,
    Small = 1,
    Mini = 2,
    Large = 3,
};

/// https://developer.apple.com/documentation/AppKit/NSCell?language=objc
pub const Cell = opaque {
    pub const InternalInfo = objc.ExternalClass("NSCell", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn init(self: *@This()) *@This() {
        return objc.msgSend(self, "init", *@This(), .{});
    }

    pub fn initTextCell(self: *@This(), string: ?*String) *@This() {
        return objc.msgSend(self, "initTextCell:", *@This(), .{string});
    }

    pub fn initImageCell(self: *@This(), image: ?*Image) *@This() {
        return objc.msgSend(self, "initImageCell:", *@This(), .{image});
    }

    pub fn initWithCoder(self: *@This(), coder: ?*foundation.Coder) *@This() {
        return objc.msgSend(self, "initWithCoder:", *@This(), .{coder});
    }

    pub fn sendActionOn(self: *@This(), mask: EventMask) objc.NSInteger {
        return objc.msgSend(self, "sendActionOn:", objc.NSInteger, .{mask});
    }

    pub fn compare(self: *@This(), otherCell: *objc.Id) foundation.ComparisonResult {
        return objc.msgSend(self, "compare:", foundation.ComparisonResult, .{otherCell});
    }

    pub fn takeIntValueFrom(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "takeIntValueFrom:", void, .{sender});
    }

    pub fn takeFloatValueFrom(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "takeFloatValueFrom:", void, .{sender});
    }

    pub fn takeDoubleValueFrom(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "takeDoubleValueFrom:", void, .{sender});
    }

    pub fn takeStringValueFrom(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "takeStringValueFrom:", void, .{sender});
    }

    pub fn takeObjectValueFrom(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "takeObjectValueFrom:", void, .{sender});
    }

    pub fn takeIntegerValueFrom(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "takeIntegerValueFrom:", void, .{sender});
    }

    pub fn cellAttribute(self: *@This(), parameter: CellAttribute) objc.NSInteger {
        return objc.msgSend(self, "cellAttribute:", objc.NSInteger, .{parameter});
    }

    pub fn setCellAttributeTo(self: *@This(), parameter: CellAttribute, value: objc.NSInteger) void {
        return objc.msgSend(self, "setCellAttribute:to:", void, .{parameter, value});
    }

    pub fn imageRectForBounds(self: *@This(), rect: foundation.Rect) foundation.Rect {
        return objc.msgSend(self, "imageRectForBounds:", foundation.Rect, .{rect});
    }

    pub fn titleRectForBounds(self: *@This(), rect: foundation.Rect) foundation.Rect {
        return objc.msgSend(self, "titleRectForBounds:", foundation.Rect, .{rect});
    }

    pub fn drawingRectForBounds(self: *@This(), rect: foundation.Rect) foundation.Rect {
        return objc.msgSend(self, "drawingRectForBounds:", foundation.Rect, .{rect});
    }

    pub fn cellSizeForBounds(self: *@This(), rect: foundation.Rect) foundation.Size {
        return objc.msgSend(self, "cellSizeForBounds:", foundation.Size, .{rect});
    }

    pub fn highlightColorWithFrameInView(self: *@This(), cellFrame: foundation.Rect, controlView: ?*View) ?*Color {
        return objc.msgSend(self, "highlightColorWithFrame:inView:", ?*Color, .{cellFrame, controlView});
    }

    pub fn calcDrawInfo(self: *@This(), rect: foundation.Rect) void {
        return objc.msgSend(self, "calcDrawInfo:", void, .{rect});
    }

    pub fn setUpFieldEditorAttributes(self: *@This(), textObj: ?*Text) ?*Text {
        return objc.msgSend(self, "setUpFieldEditorAttributes:", ?*Text, .{textObj});
    }

    pub fn drawInteriorWithFrameInView(self: *@This(), cellFrame: foundation.Rect, controlView: ?*View) void {
        return objc.msgSend(self, "drawInteriorWithFrame:inView:", void, .{cellFrame, controlView});
    }

    pub fn drawWithFrameInView(self: *@This(), cellFrame: foundation.Rect, controlView: ?*View) void {
        return objc.msgSend(self, "drawWithFrame:inView:", void, .{cellFrame, controlView});
    }

    pub fn highlightWithFrameInView(self: *@This(), flag: objc.BOOL, cellFrame: foundation.Rect, controlView: ?*View) void {
        return objc.msgSend(self, "highlight:withFrame:inView:", void, .{flag, cellFrame, controlView});
    }

    pub fn getPeriodicDelayInterval(self: *@This(), delay: ?*f32, interval: ?*f32) void {
        return objc.msgSend(self, "getPeriodicDelay:interval:", void, .{delay, interval});
    }

    pub fn startTrackingAtInView(self: *@This(), startPoint: foundation.Point, controlView: ?*View) objc.BOOL {
        return objc.msgSend(self, "startTrackingAt:inView:", objc.BOOL, .{startPoint, controlView});
    }

    pub fn continueTrackingAtInView(self: *@This(), lastPoint: foundation.Point, currentPoint: foundation.Point, controlView: ?*View) objc.BOOL {
        return objc.msgSend(self, "continueTracking:at:inView:", objc.BOOL, .{lastPoint, currentPoint, controlView});
    }

    pub fn stopTrackingAtInViewMouseIsUp(self: *@This(), lastPoint: foundation.Point, stopPoint: foundation.Point, controlView: ?*View, flag: objc.BOOL, ) void {
        return objc.msgSend(self, "stopTracking:at:inView:mouseIsUp:", void, .{lastPoint, stopPoint, controlView, flag, });
    }

    pub fn trackMouseInRectOfViewUntilMouseUp(self: *@This(), event: ?*Event, cellFrame: foundation.Rect, controlView: ?*View, flag: objc.BOOL, ) objc.BOOL {
        return objc.msgSend(self, "trackMouse:inRect:ofView:untilMouseUp:", objc.BOOL, .{event, cellFrame, controlView, flag, });
    }

    pub fn editWithFrameInViewEditorDelegateEvent(self: *@This(), rect: foundation.Rect, controlView: ?*View, textObj: ?*Text, delegate: *objc.Id, event: ?*Event, ) void {
        return objc.msgSend(self, "editWithFrame:inView:editor:delegate:event:", void, .{rect, controlView, textObj, delegate, event, });
    }

    pub fn selectWithFrameInViewEditorDelegateStartLength(self: *@This(), rect: foundation.Rect, controlView: ?*View, textObj: ?*Text, delegate: *objc.Id, selStart: objc.NSInteger, selLength: objc.NSInteger, ) void {
        return objc.msgSend(self, "selectWithFrame:inView:editor:delegate:start:length:", void, .{rect, controlView, textObj, delegate, selStart, selLength, });
    }

    pub fn endEditing(self: *@This(), textObj: ?*Text) void {
        return objc.msgSend(self, "endEditing:", void, .{textObj});
    }

    pub fn resetCursorRectInView(self: *@This(), cellFrame: foundation.Rect, controlView: ?*View) void {
        return objc.msgSend(self, "resetCursorRect:inView:", void, .{cellFrame, controlView});
    }

    pub fn menuForEventInRectOfView(self: *@This(), event: ?*Event, cellFrame: foundation.Rect, view: ?*View) ?*Menu {
        return objc.msgSend(self, "menuForEvent:inRect:ofView:", ?*Menu, .{event, cellFrame, view});
    }

    pub fn fieldEditorForView(self: *@This(), controlView: ?*View) ?*TextView {
        return objc.msgSend(self, "fieldEditorForView:", ?*TextView, .{controlView});
    }

    pub fn draggingImageComponentsWithFrameInView(self: *@This(), frame: foundation.Rect, view: ?*View) ?*anyopaque {
        return objc.msgSend(self, "draggingImageComponentsWithFrame:inView:", ?*anyopaque, .{frame, view});
    }

    pub fn prefersTrackingUntilMouseUp(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "prefersTrackingUntilMouseUp", objc.BOOL, .{});
    }

    pub fn controlView(self: *@This()) ?*View {
        return objc.msgSend(self, "controlView", ?*View, .{});
    }

    pub fn setControlView(self: *@This(), controlView: ?*View) void {
        return objc.msgSend(self, "setControlView:", void, .{controlView});
    }

    pub fn @"type"(self: *@This()) CellType {
        return objc.msgSend(self, "type", CellType, .{});
    }

    pub fn setType(self: *@This(), @"type": CellType) void {
        return objc.msgSend(self, "setType:", void, .{@"type"});
    }

    pub fn state(self: *@This()) ControlStateValue {
        return objc.msgSend(self, "state", ControlStateValue, .{});
    }

    pub fn setState(self: *@This(), state: ControlStateValue) void {
        return objc.msgSend(self, "setState:", void, .{state});
    }

    pub fn target(self: *@This()) *objc.Id {
        return objc.msgSend(self, "target", *objc.Id, .{});
    }

    pub fn setTarget(self: *@This(), target: *objc.Id) void {
        return objc.msgSend(self, "setTarget:", void, .{target});
    }

    pub fn action(self: *@This()) *objc.SEL {
        return objc.msgSend(self, "action", *objc.SEL, .{});
    }

    pub fn setAction(self: *@This(), action: *objc.SEL) void {
        return objc.msgSend(self, "setAction:", void, .{action});
    }

    pub fn tag(self: *@This()) objc.NSInteger {
        return objc.msgSend(self, "tag", objc.NSInteger, .{});
    }

    pub fn setTag(self: *@This(), tag: objc.NSInteger) void {
        return objc.msgSend(self, "setTag:", void, .{tag});
    }

    pub fn title(self: *@This()) ?*String {
        return objc.msgSend(self, "title", ?*String, .{});
    }

    pub fn setTitle(self: *@This(), title: ?*String) void {
        return objc.msgSend(self, "setTitle:", void, .{title});
    }

    pub fn isOpaque(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isOpaque", objc.BOOL, .{});
    }

    pub fn isEnabled(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isEnabled", objc.BOOL, .{});
    }

    pub fn setEnabled(self: *@This(), enabled: objc.BOOL) void {
        return objc.msgSend(self, "setEnabled:", void, .{enabled});
    }

    pub fn isContinuous(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isContinuous", objc.BOOL, .{});
    }

    pub fn setContinuous(self: *@This(), continuous: objc.BOOL) void {
        return objc.msgSend(self, "setContinuous:", void, .{continuous});
    }

    pub fn isEditable(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isEditable", objc.BOOL, .{});
    }

    pub fn setEditable(self: *@This(), editable: objc.BOOL) void {
        return objc.msgSend(self, "setEditable:", void, .{editable});
    }

    pub fn isSelectable(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isSelectable", objc.BOOL, .{});
    }

    pub fn setSelectable(self: *@This(), selectable: objc.BOOL) void {
        return objc.msgSend(self, "setSelectable:", void, .{selectable});
    }

    pub fn isBordered(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isBordered", objc.BOOL, .{});
    }

    pub fn setBordered(self: *@This(), bordered: objc.BOOL) void {
        return objc.msgSend(self, "setBordered:", void, .{bordered});
    }

    pub fn isBezeled(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isBezeled", objc.BOOL, .{});
    }

    pub fn setBezeled(self: *@This(), bezeled: objc.BOOL) void {
        return objc.msgSend(self, "setBezeled:", void, .{bezeled});
    }

    pub fn isScrollable(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isScrollable", objc.BOOL, .{});
    }

    pub fn setScrollable(self: *@This(), scrollable: objc.BOOL) void {
        return objc.msgSend(self, "setScrollable:", void, .{scrollable});
    }

    pub fn isHighlighted(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isHighlighted", objc.BOOL, .{});
    }

    pub fn setHighlighted(self: *@This(), highlighted: objc.BOOL) void {
        return objc.msgSend(self, "setHighlighted:", void, .{highlighted});
    }

    pub fn alignment(self: *@This()) TextAlignment {
        return objc.msgSend(self, "alignment", TextAlignment, .{});
    }

    pub fn setAlignment(self: *@This(), alignment: TextAlignment) void {
        return objc.msgSend(self, "setAlignment:", void, .{alignment});
    }

    pub fn wraps(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "wraps", objc.BOOL, .{});
    }

    pub fn setWraps(self: *@This(), wraps: objc.BOOL) void {
        return objc.msgSend(self, "setWraps:", void, .{wraps});
    }

    pub fn font(self: *@This()) ?*Font {
        return objc.msgSend(self, "font", ?*Font, .{});
    }

    pub fn setFont(self: *@This(), font: ?*Font) void {
        return objc.msgSend(self, "setFont:", void, .{font});
    }

    pub fn keyEquivalent(self: *@This()) ?*String {
        return objc.msgSend(self, "keyEquivalent", ?*String, .{});
    }

    pub fn formatter(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "formatter", ?*anyopaque, .{});
    }

    pub fn setFormatter(self: *@This(), formatter: ?*anyopaque) void {
        return objc.msgSend(self, "setFormatter:", void, .{formatter});
    }

    pub fn objectValue(self: *@This()) *objc.Id {
        return objc.msgSend(self, "objectValue", *objc.Id, .{});
    }

    pub fn setObjectValue(self: *@This(), objectValue: *objc.Id) void {
        return objc.msgSend(self, "setObjectValue:", void, .{objectValue});
    }

    pub fn hasValidObjectValue(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "hasValidObjectValue", objc.BOOL, .{});
    }

    pub fn stringValue(self: *@This()) ?*String {
        return objc.msgSend(self, "stringValue", ?*String, .{});
    }

    pub fn setStringValue(self: *@This(), stringValue: ?*String) void {
        return objc.msgSend(self, "setStringValue:", void, .{stringValue});
    }

    pub fn intValue(self: *@This()) i32 {
        return objc.msgSend(self, "intValue", i32, .{});
    }

    pub fn setIntValue(self: *@This(), intValue: i32) void {
        return objc.msgSend(self, "setIntValue:", void, .{intValue});
    }

    pub fn floatValue(self: *@This()) f32 {
        return objc.msgSend(self, "floatValue", f32, .{});
    }

    pub fn setFloatValue(self: *@This(), floatValue: f32) void {
        return objc.msgSend(self, "setFloatValue:", void, .{floatValue});
    }

    pub fn doubleValue(self: *@This()) f64 {
        return objc.msgSend(self, "doubleValue", f64, .{});
    }

    pub fn setDoubleValue(self: *@This(), doubleValue: f64) void {
        return objc.msgSend(self, "setDoubleValue:", void, .{doubleValue});
    }

    pub fn integerValue(self: *@This()) objc.NSInteger {
        return objc.msgSend(self, "integerValue", objc.NSInteger, .{});
    }

    pub fn setIntegerValue(self: *@This(), integerValue: objc.NSInteger) void {
        return objc.msgSend(self, "setIntegerValue:", void, .{integerValue});
    }

    pub fn image(self: *@This()) ?*Image {
        return objc.msgSend(self, "image", ?*Image, .{});
    }

    pub fn setImage(self: *@This(), image: ?*Image) void {
        return objc.msgSend(self, "setImage:", void, .{image});
    }

    pub fn controlSize(self: *@This()) ControlSize {
        return objc.msgSend(self, "controlSize", ControlSize, .{});
    }

    pub fn setControlSize(self: *@This(), controlSize: ControlSize) void {
        return objc.msgSend(self, "setControlSize:", void, .{controlSize});
    }

    pub fn representedObject(self: *@This()) *objc.Id {
        return objc.msgSend(self, "representedObject", *objc.Id, .{});
    }

    pub fn setRepresentedObject(self: *@This(), representedObject: *objc.Id) void {
        return objc.msgSend(self, "setRepresentedObject:", void, .{representedObject});
    }

    pub fn cellSize(self: *@This()) foundation.Size {
        return objc.msgSend(self, "cellSize", foundation.Size, .{});
    }

    pub fn mouseDownFlags(self: *@This()) objc.NSInteger {
        return objc.msgSend(self, "mouseDownFlags", objc.NSInteger, .{});
    }

    pub fn menu(self: *@This()) ?*Menu {
        return objc.msgSend(self, "menu", ?*Menu, .{});
    }

    pub fn setMenu(self: *@This(), menu: ?*Menu) void {
        return objc.msgSend(self, "setMenu:", void, .{menu});
    }

    pub fn defaultMenu(self: *@This()) ?*Menu {
        return objc.msgSend(self, "defaultMenu", ?*Menu, .{});
    }

    pub fn sendsActionOnEndEditing(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "sendsActionOnEndEditing", objc.BOOL, .{});
    }

    pub fn setSendsActionOnEndEditing(self: *@This(), sendsActionOnEndEditing: objc.BOOL) void {
        return objc.msgSend(self, "setSendsActionOnEndEditing:", void, .{sendsActionOnEndEditing});
    }

    pub fn baseWritingDirection(self: *@This()) WritingDirection {
        return objc.msgSend(self, "baseWritingDirection", WritingDirection, .{});
    }

    pub fn setBaseWritingDirection(self: *@This(), baseWritingDirection: WritingDirection) void {
        return objc.msgSend(self, "setBaseWritingDirection:", void, .{baseWritingDirection});
    }

    pub fn lineBreakMode(self: *@This()) LineBreakMode {
        return objc.msgSend(self, "lineBreakMode", LineBreakMode, .{});
    }

    pub fn setLineBreakMode(self: *@This(), lineBreakMode: LineBreakMode) void {
        return objc.msgSend(self, "setLineBreakMode:", void, .{lineBreakMode});
    }

    pub fn allowsUndo(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "allowsUndo", objc.BOOL, .{});
    }

    pub fn setAllowsUndo(self: *@This(), allowsUndo: objc.BOOL) void {
        return objc.msgSend(self, "setAllowsUndo:", void, .{allowsUndo});
    }

    pub fn truncatesLastVisibleLine(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "truncatesLastVisibleLine", objc.BOOL, .{});
    }

    pub fn setTruncatesLastVisibleLine(self: *@This(), truncatesLastVisibleLine: objc.BOOL) void {
        return objc.msgSend(self, "setTruncatesLastVisibleLine:", void, .{truncatesLastVisibleLine});
    }

    pub fn userInterfaceLayoutDirection(self: *@This()) UserInterfaceLayoutDirection {
        return objc.msgSend(self, "userInterfaceLayoutDirection", UserInterfaceLayoutDirection, .{});
    }

    pub fn setUserInterfaceLayoutDirection(self: *@This(), userInterfaceLayoutDirection: UserInterfaceLayoutDirection) void {
        return objc.msgSend(self, "setUserInterfaceLayoutDirection:", void, .{userInterfaceLayoutDirection});
    }

    pub fn usesSingleLineMode(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "usesSingleLineMode", objc.BOOL, .{});
    }

    pub fn setUsesSingleLineMode(self: *@This(), usesSingleLineMode: objc.BOOL) void {
        return objc.msgSend(self, "setUsesSingleLineMode:", void, .{usesSingleLineMode});
    }

};

pub const CellHitResult = enum(objc.NSUInteger) {
    None = 0,
    ContentArea = 1,
    EditableTextArea = 2,
    TrackableArea = 4,
};

pub const BackgroundStyle = enum(objc.NSInteger) {
    Normal = 0,
    Emphasized = 1,
    Raised = 2,
    Lowered = 3,
};

pub extern "AppKit" fn DrawThreePartImage(frame: foundation.Rect, startCap: ?*Image, centerFill: ?*Image, endCap: ?*Image, vertical: objc.BOOL, op: CompositingOperation, alphaFraction: core_foundation.CGFloat, flipped: objc.BOOL, ) callconv(.C) void;

pub extern "AppKit" fn DrawNinePartImage(frame: foundation.Rect, topLeftCorner: ?*Image, topEdgeFill: ?*Image, topRightCorner: ?*Image, leftEdgeFill: ?*Image, centerFill: ?*Image, rightEdgeFill: ?*Image, bottomLeftCorner: ?*Image, bottomEdgeFill: ?*Image, bottomRightCorner: ?*Image, op: CompositingOperation, alphaFraction: core_foundation.CGFloat, flipped: objc.BOOL, ) callconv(.C) void;

pub const CellStateValue = ControlStateValue;

/// https://developer.apple.com/documentation/AppKit/NSMenuItem?language=objc
pub const MenuItem = opaque {
    pub const InternalInfo = objc.ExternalClass("NSMenuItem", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn separatorItem(self: *@This()) ?*MenuItem {
        return objc.msgSend(self, "separatorItem", ?*MenuItem, .{});
    }

    pub fn sectionHeaderWithTitle(self: *@This(), title: ?*String) *@This() {
        return objc.msgSend(self, "sectionHeaderWithTitle:", *@This(), .{title});
    }

    pub fn initWithTitleActionKeyEquivalent(self: *@This(), string: ?*String, selector: *objc.SEL, charCode: ?*String) *@This() {
        return objc.msgSend(self, "initWithTitle:action:keyEquivalent:", *@This(), .{string, selector, charCode});
    }

    pub fn initWithCoder(self: *@This(), coder: ?*foundation.Coder) *@This() {
        return objc.msgSend(self, "initWithCoder:", *@This(), .{coder});
    }

    pub fn usesUserKeyEquivalents(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "usesUserKeyEquivalents", objc.BOOL, .{});
    }

    pub fn setUsesUserKeyEquivalents(self: *@This(), usesUserKeyEquivalents: objc.BOOL) void {
        return objc.msgSend(self, "setUsesUserKeyEquivalents:", void, .{usesUserKeyEquivalents});
    }

    pub fn menu(self: *@This()) ?*Menu {
        return objc.msgSend(self, "menu", ?*Menu, .{});
    }

    pub fn setMenu(self: *@This(), menu: ?*Menu) void {
        return objc.msgSend(self, "setMenu:", void, .{menu});
    }

    pub fn hasSubmenu(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "hasSubmenu", objc.BOOL, .{});
    }

    pub fn submenu(self: *@This()) ?*Menu {
        return objc.msgSend(self, "submenu", ?*Menu, .{});
    }

    pub fn setSubmenu(self: *@This(), submenu: ?*Menu) void {
        return objc.msgSend(self, "setSubmenu:", void, .{submenu});
    }

    pub fn parentItem(self: *@This()) ?*MenuItem {
        return objc.msgSend(self, "parentItem", ?*MenuItem, .{});
    }

    pub fn title(self: *@This()) ?*String {
        return objc.msgSend(self, "title", ?*String, .{});
    }

    pub fn setTitle(self: *@This(), title: ?*String) void {
        return objc.msgSend(self, "setTitle:", void, .{title});
    }

    pub fn attributedTitle(self: *@This()) ?*AttributedString {
        return objc.msgSend(self, "attributedTitle", ?*AttributedString, .{});
    }

    pub fn setAttributedTitle(self: *@This(), attributedTitle: ?*AttributedString) void {
        return objc.msgSend(self, "setAttributedTitle:", void, .{attributedTitle});
    }

    pub fn subtitle(self: *@This()) ?*String {
        return objc.msgSend(self, "subtitle", ?*String, .{});
    }

    pub fn setSubtitle(self: *@This(), subtitle: ?*String) void {
        return objc.msgSend(self, "setSubtitle:", void, .{subtitle});
    }

    pub fn isSeparatorItem(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isSeparatorItem", objc.BOOL, .{});
    }

    pub fn isSectionHeader(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isSectionHeader", objc.BOOL, .{});
    }

    pub fn keyEquivalent(self: *@This()) ?*String {
        return objc.msgSend(self, "keyEquivalent", ?*String, .{});
    }

    pub fn setKeyEquivalent(self: *@This(), keyEquivalent: ?*String) void {
        return objc.msgSend(self, "setKeyEquivalent:", void, .{keyEquivalent});
    }

    pub fn keyEquivalentModifierMask(self: *@This()) EventModifierFlags {
        return objc.msgSend(self, "keyEquivalentModifierMask", EventModifierFlags, .{});
    }

    pub fn setKeyEquivalentModifierMask(self: *@This(), keyEquivalentModifierMask: EventModifierFlags) void {
        return objc.msgSend(self, "setKeyEquivalentModifierMask:", void, .{keyEquivalentModifierMask});
    }

    pub fn userKeyEquivalent(self: *@This()) ?*String {
        return objc.msgSend(self, "userKeyEquivalent", ?*String, .{});
    }

    pub fn allowsKeyEquivalentWhenHidden(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "allowsKeyEquivalentWhenHidden", objc.BOOL, .{});
    }

    pub fn setAllowsKeyEquivalentWhenHidden(self: *@This(), allowsKeyEquivalentWhenHidden: objc.BOOL) void {
        return objc.msgSend(self, "setAllowsKeyEquivalentWhenHidden:", void, .{allowsKeyEquivalentWhenHidden});
    }

    pub fn allowsAutomaticKeyEquivalentLocalization(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "allowsAutomaticKeyEquivalentLocalization", objc.BOOL, .{});
    }

    pub fn setAllowsAutomaticKeyEquivalentLocalization(self: *@This(), allowsAutomaticKeyEquivalentLocalization: objc.BOOL) void {
        return objc.msgSend(self, "setAllowsAutomaticKeyEquivalentLocalization:", void, .{allowsAutomaticKeyEquivalentLocalization});
    }

    pub fn allowsAutomaticKeyEquivalentMirroring(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "allowsAutomaticKeyEquivalentMirroring", objc.BOOL, .{});
    }

    pub fn setAllowsAutomaticKeyEquivalentMirroring(self: *@This(), allowsAutomaticKeyEquivalentMirroring: objc.BOOL) void {
        return objc.msgSend(self, "setAllowsAutomaticKeyEquivalentMirroring:", void, .{allowsAutomaticKeyEquivalentMirroring});
    }

    pub fn image(self: *@This()) ?*Image {
        return objc.msgSend(self, "image", ?*Image, .{});
    }

    pub fn setImage(self: *@This(), image: ?*Image) void {
        return objc.msgSend(self, "setImage:", void, .{image});
    }

    pub fn state(self: *@This()) ControlStateValue {
        return objc.msgSend(self, "state", ControlStateValue, .{});
    }

    pub fn setState(self: *@This(), state: ControlStateValue) void {
        return objc.msgSend(self, "setState:", void, .{state});
    }

    pub fn onStateImage(self: *@This()) ?*Image {
        return objc.msgSend(self, "onStateImage", ?*Image, .{});
    }

    pub fn setOnStateImage(self: *@This(), onStateImage: ?*Image) void {
        return objc.msgSend(self, "setOnStateImage:", void, .{onStateImage});
    }

    pub fn offStateImage(self: *@This()) ?*Image {
        return objc.msgSend(self, "offStateImage", ?*Image, .{});
    }

    pub fn setOffStateImage(self: *@This(), offStateImage: ?*Image) void {
        return objc.msgSend(self, "setOffStateImage:", void, .{offStateImage});
    }

    pub fn mixedStateImage(self: *@This()) ?*Image {
        return objc.msgSend(self, "mixedStateImage", ?*Image, .{});
    }

    pub fn setMixedStateImage(self: *@This(), mixedStateImage: ?*Image) void {
        return objc.msgSend(self, "setMixedStateImage:", void, .{mixedStateImage});
    }

    pub fn isEnabled(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isEnabled", objc.BOOL, .{});
    }

    pub fn setEnabled(self: *@This(), enabled: objc.BOOL) void {
        return objc.msgSend(self, "setEnabled:", void, .{enabled});
    }

    pub fn isAlternate(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isAlternate", objc.BOOL, .{});
    }

    pub fn setAlternate(self: *@This(), alternate: objc.BOOL) void {
        return objc.msgSend(self, "setAlternate:", void, .{alternate});
    }

    pub fn indentationLevel(self: *@This()) objc.NSInteger {
        return objc.msgSend(self, "indentationLevel", objc.NSInteger, .{});
    }

    pub fn setIndentationLevel(self: *@This(), indentationLevel: objc.NSInteger) void {
        return objc.msgSend(self, "setIndentationLevel:", void, .{indentationLevel});
    }

    pub fn target(self: *@This()) *objc.Id {
        return objc.msgSend(self, "target", *objc.Id, .{});
    }

    pub fn setTarget(self: *@This(), target: *objc.Id) void {
        return objc.msgSend(self, "setTarget:", void, .{target});
    }

    pub fn action(self: *@This()) *objc.SEL {
        return objc.msgSend(self, "action", *objc.SEL, .{});
    }

    pub fn setAction(self: *@This(), action: *objc.SEL) void {
        return objc.msgSend(self, "setAction:", void, .{action});
    }

    pub fn tag(self: *@This()) objc.NSInteger {
        return objc.msgSend(self, "tag", objc.NSInteger, .{});
    }

    pub fn setTag(self: *@This(), tag: objc.NSInteger) void {
        return objc.msgSend(self, "setTag:", void, .{tag});
    }

    pub fn representedObject(self: *@This()) *objc.Id {
        return objc.msgSend(self, "representedObject", *objc.Id, .{});
    }

    pub fn setRepresentedObject(self: *@This(), representedObject: *objc.Id) void {
        return objc.msgSend(self, "setRepresentedObject:", void, .{representedObject});
    }

    pub fn view(self: *@This()) ?*View {
        return objc.msgSend(self, "view", ?*View, .{});
    }

    pub fn setView(self: *@This(), view: ?*View) void {
        return objc.msgSend(self, "setView:", void, .{view});
    }

    pub fn isHighlighted(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isHighlighted", objc.BOOL, .{});
    }

    pub fn isHidden(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isHidden", objc.BOOL, .{});
    }

    pub fn setHidden(self: *@This(), hidden: objc.BOOL) void {
        return objc.msgSend(self, "setHidden:", void, .{hidden});
    }

    pub fn isHiddenOrHasHiddenAncestor(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isHiddenOrHasHiddenAncestor", objc.BOOL, .{});
    }

    pub fn toolTip(self: *@This()) ?*String {
        return objc.msgSend(self, "toolTip", ?*String, .{});
    }

    pub fn setToolTip(self: *@This(), toolTip: ?*String) void {
        return objc.msgSend(self, "setToolTip:", void, .{toolTip});
    }

    pub fn badge(self: *@This()) ?*MenuItemBadge {
        return objc.msgSend(self, "badge", ?*MenuItemBadge, .{});
    }

    pub fn setBadge(self: *@This(), badge: ?*MenuItemBadge) void {
        return objc.msgSend(self, "setBadge:", void, .{badge});
    }

};

pub const MenuPresentationStyle = enum(objc.NSInteger) {
    Regular = 0,
    Palette = 1,
};

pub const MenuSelectionMode = enum(objc.NSInteger) {
    Automatic = 0,
    SelectOne = 1,
    SelectAny = 2,
};

/// https://developer.apple.com/documentation/AppKit/NSMenu?language=objc
pub const Menu = opaque {
    pub const InternalInfo = objc.ExternalClass("NSMenu", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn initWithTitle(self: *@This(), title: ?*String) *@This() {
        return objc.msgSend(self, "initWithTitle:", *@This(), .{title});
    }

    pub fn initWithCoder(self: *@This(), coder: ?*foundation.Coder) *@This() {
        return objc.msgSend(self, "initWithCoder:", *@This(), .{coder});
    }

    pub fn popUpContextMenuWithEventForView(self: *@This(), menu: ?*Menu, event: ?*Event, view: ?*View) void {
        return objc.msgSend(self, "popUpContextMenu:withEvent:forView:", void, .{menu, event, view});
    }

    pub fn popUpContextMenuWithEventForViewWithFont(self: *@This(), menu: ?*Menu, event: ?*Event, view: ?*View, font: ?*Font, ) void {
        return objc.msgSend(self, "popUpContextMenu:withEvent:forView:withFont:", void, .{menu, event, view, font, });
    }

    pub fn popUpMenuPositioningItemAtLocationInView(self: *@This(), item: ?*MenuItem, location: foundation.Point, view: ?*View) objc.BOOL {
        return objc.msgSend(self, "popUpMenuPositioningItem:atLocation:inView:", objc.BOOL, .{item, location, view});
    }

    pub fn setMenuBarVisible(self: *@This(), visible: objc.BOOL) void {
        return objc.msgSend(self, "setMenuBarVisible:", void, .{visible});
    }

    pub fn menuBarVisible(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "menuBarVisible", objc.BOOL, .{});
    }

    pub fn insertItemAtIndex(self: *@This(), newItem: ?*MenuItem, index: objc.NSInteger) void {
        return objc.msgSend(self, "insertItem:atIndex:", void, .{newItem, index});
    }

    pub fn addItem(self: *@This(), newItem: ?*MenuItem) void {
        return objc.msgSend(self, "addItem:", void, .{newItem});
    }

    pub fn insertItemWithTitleActionKeyEquivalentAtIndex(self: *@This(), string: ?*String, selector: *objc.SEL, charCode: ?*String, index: objc.NSInteger, ) ?*MenuItem {
        return objc.msgSend(self, "insertItemWithTitle:action:keyEquivalent:atIndex:", ?*MenuItem, .{string, selector, charCode, index, });
    }

    pub fn addItemWithTitleActionKeyEquivalent(self: *@This(), string: ?*String, selector: *objc.SEL, charCode: ?*String) ?*MenuItem {
        return objc.msgSend(self, "addItemWithTitle:action:keyEquivalent:", ?*MenuItem, .{string, selector, charCode});
    }

    pub fn removeItemAtIndex(self: *@This(), index: objc.NSInteger) void {
        return objc.msgSend(self, "removeItemAtIndex:", void, .{index});
    }

    pub fn removeItem(self: *@This(), item: ?*MenuItem) void {
        return objc.msgSend(self, "removeItem:", void, .{item});
    }

    pub fn setSubmenuForItem(self: *@This(), menu: ?*Menu, item: ?*MenuItem) void {
        return objc.msgSend(self, "setSubmenu:forItem:", void, .{menu, item});
    }

    pub fn removeAllItems(self: *@This()) void {
        return objc.msgSend(self, "removeAllItems", void, .{});
    }

    pub fn itemAtIndex(self: *@This(), index: objc.NSInteger) ?*MenuItem {
        return objc.msgSend(self, "itemAtIndex:", ?*MenuItem, .{index});
    }

    pub fn indexOfItem(self: *@This(), item: ?*MenuItem) objc.NSInteger {
        return objc.msgSend(self, "indexOfItem:", objc.NSInteger, .{item});
    }

    pub fn indexOfItemWithTitle(self: *@This(), title: ?*String) objc.NSInteger {
        return objc.msgSend(self, "indexOfItemWithTitle:", objc.NSInteger, .{title});
    }

    pub fn indexOfItemWithTag(self: *@This(), tag: objc.NSInteger) objc.NSInteger {
        return objc.msgSend(self, "indexOfItemWithTag:", objc.NSInteger, .{tag});
    }

    pub fn indexOfItemWithRepresentedObject(self: *@This(), object: *objc.Id) objc.NSInteger {
        return objc.msgSend(self, "indexOfItemWithRepresentedObject:", objc.NSInteger, .{object});
    }

    pub fn indexOfItemWithSubmenu(self: *@This(), submenu: ?*Menu) objc.NSInteger {
        return objc.msgSend(self, "indexOfItemWithSubmenu:", objc.NSInteger, .{submenu});
    }

    pub fn indexOfItemWithTargetAndAction(self: *@This(), target: *objc.Id, actionSelector: *objc.SEL) objc.NSInteger {
        return objc.msgSend(self, "indexOfItemWithTarget:andAction:", objc.NSInteger, .{target, actionSelector});
    }

    pub fn itemWithTitle(self: *@This(), title: ?*String) ?*MenuItem {
        return objc.msgSend(self, "itemWithTitle:", ?*MenuItem, .{title});
    }

    pub fn itemWithTag(self: *@This(), tag: objc.NSInteger) ?*MenuItem {
        return objc.msgSend(self, "itemWithTag:", ?*MenuItem, .{tag});
    }

    pub fn update(self: *@This()) void {
        return objc.msgSend(self, "update", void, .{});
    }

    pub fn performKeyEquivalent(self: *@This(), event: ?*Event) objc.BOOL {
        return objc.msgSend(self, "performKeyEquivalent:", objc.BOOL, .{event});
    }

    pub fn itemChanged(self: *@This(), item: ?*MenuItem) void {
        return objc.msgSend(self, "itemChanged:", void, .{item});
    }

    pub fn performActionForItemAtIndex(self: *@This(), index: objc.NSInteger) void {
        return objc.msgSend(self, "performActionForItemAtIndex:", void, .{index});
    }

    pub fn cancelTracking(self: *@This()) void {
        return objc.msgSend(self, "cancelTracking", void, .{});
    }

    pub fn cancelTrackingWithoutAnimation(self: *@This()) void {
        return objc.msgSend(self, "cancelTrackingWithoutAnimation", void, .{});
    }

    pub fn title(self: *@This()) ?*String {
        return objc.msgSend(self, "title", ?*String, .{});
    }

    pub fn setTitle(self: *@This(), title: ?*String) void {
        return objc.msgSend(self, "setTitle:", void, .{title});
    }

    pub fn supermenu(self: *@This()) ?*Menu {
        return objc.msgSend(self, "supermenu", ?*Menu, .{});
    }

    pub fn setSupermenu(self: *@This(), supermenu: ?*Menu) void {
        return objc.msgSend(self, "setSupermenu:", void, .{supermenu});
    }

    pub fn itemArray(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "itemArray", ?*anyopaque, .{});
    }

    pub fn setItemArray(self: *@This(), itemArray: ?*anyopaque) void {
        return objc.msgSend(self, "setItemArray:", void, .{itemArray});
    }

    pub fn numberOfItems(self: *@This()) objc.NSInteger {
        return objc.msgSend(self, "numberOfItems", objc.NSInteger, .{});
    }

    pub fn autoenablesItems(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "autoenablesItems", objc.BOOL, .{});
    }

    pub fn setAutoenablesItems(self: *@This(), autoenablesItems: objc.BOOL) void {
        return objc.msgSend(self, "setAutoenablesItems:", void, .{autoenablesItems});
    }

    pub fn delegate(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "delegate", ?*anyopaque, .{});
    }

    pub fn setDelegate(self: *@This(), delegate: ?*anyopaque) void {
        return objc.msgSend(self, "setDelegate:", void, .{delegate});
    }

    pub fn menuBarHeight(self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(self, "menuBarHeight", core_foundation.CGFloat, .{});
    }

    pub fn highlightedItem(self: *@This()) ?*MenuItem {
        return objc.msgSend(self, "highlightedItem", ?*MenuItem, .{});
    }

    pub fn minimumWidth(self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(self, "minimumWidth", core_foundation.CGFloat, .{});
    }

    pub fn setMinimumWidth(self: *@This(), minimumWidth: core_foundation.CGFloat) void {
        return objc.msgSend(self, "setMinimumWidth:", void, .{minimumWidth});
    }

    pub fn size(self: *@This()) foundation.Size {
        return objc.msgSend(self, "size", foundation.Size, .{});
    }

    pub fn font(self: *@This()) ?*Font {
        return objc.msgSend(self, "font", ?*Font, .{});
    }

    pub fn setFont(self: *@This(), font: ?*Font) void {
        return objc.msgSend(self, "setFont:", void, .{font});
    }

    pub fn allowsContextMenuPlugIns(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "allowsContextMenuPlugIns", objc.BOOL, .{});
    }

    pub fn setAllowsContextMenuPlugIns(self: *@This(), allowsContextMenuPlugIns: objc.BOOL) void {
        return objc.msgSend(self, "setAllowsContextMenuPlugIns:", void, .{allowsContextMenuPlugIns});
    }

    pub fn showsStateColumn(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "showsStateColumn", objc.BOOL, .{});
    }

    pub fn setShowsStateColumn(self: *@This(), showsStateColumn: objc.BOOL) void {
        return objc.msgSend(self, "setShowsStateColumn:", void, .{showsStateColumn});
    }

    pub fn userInterfaceLayoutDirection(self: *@This()) UserInterfaceLayoutDirection {
        return objc.msgSend(self, "userInterfaceLayoutDirection", UserInterfaceLayoutDirection, .{});
    }

    pub fn setUserInterfaceLayoutDirection(self: *@This(), userInterfaceLayoutDirection: UserInterfaceLayoutDirection) void {
        return objc.msgSend(self, "setUserInterfaceLayoutDirection:", void, .{userInterfaceLayoutDirection});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSMenuItemValidation?language=objc
pub const MenuItemValidation = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{objc.NSObject, });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn validateMenuItem(self: *@This(), menuItem: ?*MenuItem) objc.BOOL {
        return objc.msgSend(self, "validateMenuItem:", objc.BOOL, .{menuItem});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSMenuDelegate?language=objc
pub const MenuDelegate = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{objc.NSObject, });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn menuNeedsUpdate(self: *@This(), menu: ?*Menu) void {
        return objc.msgSend(self, "menuNeedsUpdate:", void, .{menu});
    }

    pub fn numberOfItemsInMenu(self: *@This(), menu: ?*Menu) objc.NSInteger {
        return objc.msgSend(self, "numberOfItemsInMenu:", objc.NSInteger, .{menu});
    }

    pub fn menuUpdateItemAtIndexShouldCancel(self: *@This(), menu: ?*Menu, item: ?*MenuItem, index: objc.NSInteger, shouldCancel: objc.BOOL, ) objc.BOOL {
        return objc.msgSend(self, "menu:updateItem:atIndex:shouldCancel:", objc.BOOL, .{menu, item, index, shouldCancel, });
    }

    pub fn menuHasKeyEquivalentForEventTargetAction(self: *@This(), menu: ?*Menu, event: ?*Event, target: ?**objc.Id, action: ?**objc.SEL, ) objc.BOOL {
        return objc.msgSend(self, "menuHasKeyEquivalent:forEvent:target:action:", objc.BOOL, .{menu, event, target, action, });
    }

    pub fn menuWillOpen(self: *@This(), menu: ?*Menu) void {
        return objc.msgSend(self, "menuWillOpen:", void, .{menu});
    }

    pub fn menuDidClose(self: *@This(), menu: ?*Menu) void {
        return objc.msgSend(self, "menuDidClose:", void, .{menu});
    }

    pub fn menuWillHighlightItem(self: *@This(), menu: ?*Menu, item: ?*MenuItem) void {
        return objc.msgSend(self, "menu:willHighlightItem:", void, .{menu, item});
    }

    pub fn confinementRectForMenuOnScreen(self: *@This(), menu: ?*Menu, screen: ?*Screen) foundation.Rect {
        return objc.msgSend(self, "confinementRectForMenu:onScreen:", foundation.Rect, .{menu, screen});
    }

};

pub const MenuProperties = enum(objc.NSUInteger) {
    PropertyItemTitle = 1,
    PropertyItemAttributedTitle = 2,
    PropertyItemKeyEquivalent = 4,
    PropertyItemImage = 8,
    PropertyItemEnabled = 16,
    PropertyItemAccessibilityDescription = 32,
};

pub const PrinterTableStatus = enum(objc.NSUInteger) {
    OK = 0,
    NotFound = 1,
    Error = 2,
};

pub const PrinterTypeName = ?*String;

pub const PrinterPaperName = ?*String;

/// https://developer.apple.com/documentation/AppKit/NSPrinter?language=objc
pub const Printer = opaque {
    pub const InternalInfo = objc.ExternalClass("NSPrinter", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn printerWithName(self: *@This(), name: ?*String) ?*Printer {
        return objc.msgSend(self, "printerWithName:", ?*Printer, .{name});
    }

    pub fn printerWithType(self: *@This(), @"type": PrinterTypeName) ?*Printer {
        return objc.msgSend(self, "printerWithType:", ?*Printer, .{@"type"});
    }

    pub fn pageSizeForPaper(self: *@This(), paperName: PrinterPaperName) foundation.Size {
        return objc.msgSend(self, "pageSizeForPaper:", foundation.Size, .{paperName});
    }

    pub fn printerNames(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "printerNames", ?*anyopaque, .{});
    }

    pub fn printerTypes(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "printerTypes", ?*anyopaque, .{});
    }

    pub fn name(self: *@This()) ?*String {
        return objc.msgSend(self, "name", ?*String, .{});
    }

    pub fn @"type"(self: *@This()) PrinterTypeName {
        return objc.msgSend(self, "type", PrinterTypeName, .{});
    }

    pub fn languageLevel(self: *@This()) objc.NSInteger {
        return objc.msgSend(self, "languageLevel", objc.NSInteger, .{});
    }

    pub fn deviceDescription(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "deviceDescription", ?*anyopaque, .{});
    }

};

pub const PaperOrientation = enum(objc.NSInteger) {
    Portrait = 0,
    Landscape = 1,
};

pub const PrintingPaginationMode = enum(objc.NSUInteger) {
    Automatic = 0,
    Fit = 1,
    Clip = 2,
};

pub const PrintInfoAttributeKey = ?*String;

pub const PrintJobDispositionValue = ?*String;

pub const PrintInfoSettingKey = ?*String;

/// https://developer.apple.com/documentation/AppKit/NSPrintInfo?language=objc
pub const PrintInfo = opaque {
    pub const InternalInfo = objc.ExternalClass("NSPrintInfo", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn initWithDictionary(self: *@This(), attributes: ?*anyopaque) *@This() {
        return objc.msgSend(self, "initWithDictionary:", *@This(), .{attributes});
    }

    pub fn initWithCoder(self: *@This(), coder: ?*foundation.Coder) *@This() {
        return objc.msgSend(self, "initWithCoder:", *@This(), .{coder});
    }

    pub fn init(self: *@This()) *@This() {
        return objc.msgSend(self, "init", *@This(), .{});
    }

    pub fn dictionary(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "dictionary", ?*anyopaque, .{});
    }

    pub fn setUpPrintOperationDefaultValues(self: *@This()) void {
        return objc.msgSend(self, "setUpPrintOperationDefaultValues", void, .{});
    }

    pub fn PMPrintSession(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "PMPrintSession", ?*anyopaque, .{});
    }

    pub fn PMPageFormat(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "PMPageFormat", ?*anyopaque, .{});
    }

    pub fn PMPrintSettings(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "PMPrintSettings", ?*anyopaque, .{});
    }

    pub fn updateFromPMPageFormat(self: *@This()) void {
        return objc.msgSend(self, "updateFromPMPageFormat", void, .{});
    }

    pub fn updateFromPMPrintSettings(self: *@This()) void {
        return objc.msgSend(self, "updateFromPMPrintSettings", void, .{});
    }

    pub fn takeSettingsFromPDFInfo(self: *@This(), inPDFInfo: ?*PDFInfo) void {
        return objc.msgSend(self, "takeSettingsFromPDFInfo:", void, .{inPDFInfo});
    }

    pub fn sharedPrintInfo(self: *@This()) ?*PrintInfo {
        return objc.msgSend(self, "sharedPrintInfo", ?*PrintInfo, .{});
    }

    pub fn setSharedPrintInfo(self: *@This(), sharedPrintInfo: ?*PrintInfo) void {
        return objc.msgSend(self, "setSharedPrintInfo:", void, .{sharedPrintInfo});
    }

    pub fn paperName(self: *@This()) PrinterPaperName {
        return objc.msgSend(self, "paperName", PrinterPaperName, .{});
    }

    pub fn setPaperName(self: *@This(), paperName: PrinterPaperName) void {
        return objc.msgSend(self, "setPaperName:", void, .{paperName});
    }

    pub fn paperSize(self: *@This()) foundation.Size {
        return objc.msgSend(self, "paperSize", foundation.Size, .{});
    }

    pub fn setPaperSize(self: *@This(), paperSize: foundation.Size) void {
        return objc.msgSend(self, "setPaperSize:", void, .{paperSize});
    }

    pub fn orientation(self: *@This()) PaperOrientation {
        return objc.msgSend(self, "orientation", PaperOrientation, .{});
    }

    pub fn setOrientation(self: *@This(), orientation: PaperOrientation) void {
        return objc.msgSend(self, "setOrientation:", void, .{orientation});
    }

    pub fn scalingFactor(self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(self, "scalingFactor", core_foundation.CGFloat, .{});
    }

    pub fn setScalingFactor(self: *@This(), scalingFactor: core_foundation.CGFloat) void {
        return objc.msgSend(self, "setScalingFactor:", void, .{scalingFactor});
    }

    pub fn leftMargin(self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(self, "leftMargin", core_foundation.CGFloat, .{});
    }

    pub fn setLeftMargin(self: *@This(), leftMargin: core_foundation.CGFloat) void {
        return objc.msgSend(self, "setLeftMargin:", void, .{leftMargin});
    }

    pub fn rightMargin(self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(self, "rightMargin", core_foundation.CGFloat, .{});
    }

    pub fn setRightMargin(self: *@This(), rightMargin: core_foundation.CGFloat) void {
        return objc.msgSend(self, "setRightMargin:", void, .{rightMargin});
    }

    pub fn topMargin(self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(self, "topMargin", core_foundation.CGFloat, .{});
    }

    pub fn setTopMargin(self: *@This(), topMargin: core_foundation.CGFloat) void {
        return objc.msgSend(self, "setTopMargin:", void, .{topMargin});
    }

    pub fn bottomMargin(self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(self, "bottomMargin", core_foundation.CGFloat, .{});
    }

    pub fn setBottomMargin(self: *@This(), bottomMargin: core_foundation.CGFloat) void {
        return objc.msgSend(self, "setBottomMargin:", void, .{bottomMargin});
    }

    pub fn isHorizontallyCentered(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isHorizontallyCentered", objc.BOOL, .{});
    }

    pub fn setHorizontallyCentered(self: *@This(), horizontallyCentered: objc.BOOL) void {
        return objc.msgSend(self, "setHorizontallyCentered:", void, .{horizontallyCentered});
    }

    pub fn isVerticallyCentered(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isVerticallyCentered", objc.BOOL, .{});
    }

    pub fn setVerticallyCentered(self: *@This(), verticallyCentered: objc.BOOL) void {
        return objc.msgSend(self, "setVerticallyCentered:", void, .{verticallyCentered});
    }

    pub fn horizontalPagination(self: *@This()) PrintingPaginationMode {
        return objc.msgSend(self, "horizontalPagination", PrintingPaginationMode, .{});
    }

    pub fn setHorizontalPagination(self: *@This(), horizontalPagination: PrintingPaginationMode) void {
        return objc.msgSend(self, "setHorizontalPagination:", void, .{horizontalPagination});
    }

    pub fn verticalPagination(self: *@This()) PrintingPaginationMode {
        return objc.msgSend(self, "verticalPagination", PrintingPaginationMode, .{});
    }

    pub fn setVerticalPagination(self: *@This(), verticalPagination: PrintingPaginationMode) void {
        return objc.msgSend(self, "setVerticalPagination:", void, .{verticalPagination});
    }

    pub fn jobDisposition(self: *@This()) PrintJobDispositionValue {
        return objc.msgSend(self, "jobDisposition", PrintJobDispositionValue, .{});
    }

    pub fn setJobDisposition(self: *@This(), jobDisposition: PrintJobDispositionValue) void {
        return objc.msgSend(self, "setJobDisposition:", void, .{jobDisposition});
    }

    pub fn printer(self: *@This()) ?*Printer {
        return objc.msgSend(self, "printer", ?*Printer, .{});
    }

    pub fn setPrinter(self: *@This(), printer: ?*Printer) void {
        return objc.msgSend(self, "setPrinter:", void, .{printer});
    }

    pub fn imageablePageBounds(self: *@This()) foundation.Rect {
        return objc.msgSend(self, "imageablePageBounds", foundation.Rect, .{});
    }

    pub fn localizedPaperName(self: *@This()) ?*String {
        return objc.msgSend(self, "localizedPaperName", ?*String, .{});
    }

    pub fn defaultPrinter(self: *@This()) ?*Printer {
        return objc.msgSend(self, "defaultPrinter", ?*Printer, .{});
    }

    pub fn printSettings(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "printSettings", ?*anyopaque, .{});
    }

    pub fn isSelectionOnly(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isSelectionOnly", objc.BOOL, .{});
    }

    pub fn setSelectionOnly(self: *@This(), selectionOnly: objc.BOOL) void {
        return objc.msgSend(self, "setSelectionOnly:", void, .{selectionOnly});
    }

};

pub const PrintingOrientation = enum(objc.NSUInteger) {
    PortraitOrientation = 0,
    LandscapeOrientation = 1,
};

pub const BindingName = ?*String;

pub const BindingOption = ?*String;

/// https://developer.apple.com/documentation/AppKit/NSBindingSelectionMarker?language=objc
pub const BindingSelectionMarker = opaque {
    pub const InternalInfo = objc.ExternalClass("NSBindingSelectionMarker", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn init(self: *@This()) *@This() {
        return objc.msgSend(self, "init", *@This(), .{});
    }

    pub fn setDefaultPlaceholderForMarkerOnClassWithBinding(self: *@This(), placeholder: *objc.Id, marker: ?*BindingSelectionMarker, objectClass: *objc.Class, binding: BindingName, ) void {
        return objc.msgSend(self, "setDefaultPlaceholder:forMarker:onClass:withBinding:", void, .{placeholder, marker, objectClass, binding, });
    }

    pub fn defaultPlaceholderForMarkerOnClassWithBinding(self: *@This(), marker: ?*BindingSelectionMarker, objectClass: *objc.Class, binding: BindingName) *objc.Id {
        return objc.msgSend(self, "defaultPlaceholderForMarker:onClass:withBinding:", *objc.Id, .{marker, objectClass, binding});
    }

    pub fn multipleValuesSelectionMarker(self: *@This()) ?*BindingSelectionMarker {
        return objc.msgSend(self, "multipleValuesSelectionMarker", ?*BindingSelectionMarker, .{});
    }

    pub fn noSelectionMarker(self: *@This()) ?*BindingSelectionMarker {
        return objc.msgSend(self, "noSelectionMarker", ?*BindingSelectionMarker, .{});
    }

    pub fn notApplicableSelectionMarker(self: *@This()) ?*BindingSelectionMarker {
        return objc.msgSend(self, "notApplicableSelectionMarker", ?*BindingSelectionMarker, .{});
    }

};

pub extern "AppKit" fn IsControllerMarker(object: *objc.Id) callconv(.C) objc.BOOL;

pub const BindingInfoKey = ?*String;

/// https://developer.apple.com/documentation/AppKit/NSEditor?language=objc
pub const Editor = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{objc.NSObject, });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn discardEditing(self: *@This()) void {
        return objc.msgSend(self, "discardEditing", void, .{});
    }

    pub fn commitEditing(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "commitEditing", objc.BOOL, .{});
    }

    pub fn commitEditingWithDelegateDidCommitSelectorContextInfo(self: *@This(), delegate: *objc.Id, didCommitSelector: *objc.SEL, contextInfo: ?*anyopaque) void {
        return objc.msgSend(self, "commitEditingWithDelegate:didCommitSelector:contextInfo:", void, .{delegate, didCommitSelector, contextInfo});
    }

    pub fn commitEditingAndReturnError(self: *@This(), @"error": ?*?*Error) objc.BOOL {
        return objc.msgSend(self, "commitEditingAndReturnError:", objc.BOOL, .{@"error"});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSEditorRegistration?language=objc
pub const EditorRegistration = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{objc.NSObject, });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn objectDidBeginEditing(self: *@This(), editor: ?*anyopaque) void {
        return objc.msgSend(self, "objectDidBeginEditing:", void, .{editor});
    }

    pub fn objectDidEndEditing(self: *@This(), editor: ?*anyopaque) void {
        return objc.msgSend(self, "objectDidEndEditing:", void, .{editor});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSPreviewRepresentableActivityItem?language=objc
pub const PreviewRepresentableActivityItem = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{objc.NSObject, });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn item(self: *@This()) *objc.Id {
        return objc.msgSend(self, "item", *objc.Id, .{});
    }

    pub fn title(self: *@This()) ?*String {
        return objc.msgSend(self, "title", ?*String, .{});
    }

    pub fn imageProvider(self: *@This()) ?*ItemProvider {
        return objc.msgSend(self, "imageProvider", ?*ItemProvider, .{});
    }

    pub fn iconProvider(self: *@This()) ?*ItemProvider {
        return objc.msgSend(self, "iconProvider", ?*ItemProvider, .{});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSPreviewRepresentingActivityItem?language=objc
pub const PreviewRepresentingActivityItem = opaque {
    pub const InternalInfo = objc.ExternalClass("NSPreviewRepresentingActivityItem", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn initWithItemTitleImageIcon(self: *@This(), item: *objc.Id, title: ?*String, image: ?*Image, icon: ?*Image, ) *@This() {
        return objc.msgSend(self, "initWithItem:title:image:icon:", *@This(), .{item, title, image, icon, });
    }

    pub fn initWithItemTitleImageProviderIconProvider(self: *@This(), item: *objc.Id, title: ?*String, imageProvider: ?*ItemProvider, iconProvider: ?*ItemProvider, ) *@This() {
        return objc.msgSend(self, "initWithItem:title:imageProvider:iconProvider:", *@This(), .{item, title, imageProvider, iconProvider, });
    }

    pub fn init(self: *@This()) *@This() {
        return objc.msgSend(self, "init", *@This(), .{});
    }

    pub fn new(self: *@This()) *@This() {
        return objc.msgSend(self, "new", *@This(), .{});
    }

};

pub const DocumentChangeType = enum(objc.NSUInteger) {
    ChangeDone = 0,
    ChangeUndone = 1,
    ChangeRedone = 5,
    ChangeCleared = 2,
    ChangeReadOtherContents = 3,
    ChangeAutosaved = 4,
    ChangeDiscardable = 256,
};

pub const SaveOperationType = enum(objc.NSUInteger) {
    Operation = 0,
    AsOperation = 1,
    ToOperation = 2,
    AutosaveInPlaceOperation = 4,
    AutosaveElsewhereOperation = 3,
    AutosaveAsOperation = 5,
    AutosaveOperation = 3,
};

/// https://developer.apple.com/documentation/AppKit/NSDocument?language=objc
pub const Document = opaque {
    pub const InternalInfo = objc.ExternalClass("NSDocument", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn init(self: *@This()) *@This() {
        return objc.msgSend(self, "init", *@This(), .{});
    }

    pub fn initWithTypeError(self: *@This(), typeName: ?*String, outError: ?*?*Error) *@This() {
        return objc.msgSend(self, "initWithType:error:", *@This(), .{typeName, outError});
    }

    pub fn canConcurrentlyReadDocumentsOfType(self: *@This(), typeName: ?*String) objc.BOOL {
        return objc.msgSend(self, "canConcurrentlyReadDocumentsOfType:", objc.BOOL, .{typeName});
    }

    pub fn initWithContentsOfURLOfTypeError(self: *@This(), url: ?*URL, typeName: ?*String, outError: ?*?*Error) *@This() {
        return objc.msgSend(self, "initWithContentsOfURL:ofType:error:", *@This(), .{url, typeName, outError});
    }

    pub fn initForURLWithContentsOfURLOfTypeError(self: *@This(), urlOrNil: ?*URL, contentsURL: ?*URL, typeName: ?*String, outError: ?*?*Error, ) *@This() {
        return objc.msgSend(self, "initForURL:withContentsOfURL:ofType:error:", *@This(), .{urlOrNil, contentsURL, typeName, outError, });
    }

    pub fn performActivityWithSynchronousWaitingUsingBlock(self: *@This(), waitSynchronously: objc.BOOL, block: *const fn(*const fn() callconv(.C) void) callconv(.C) void) void {
        return objc.msgSend(self, "performActivityWithSynchronousWaiting:usingBlock:", void, .{waitSynchronously, block});
    }

    pub fn continueActivityUsingBlock(self: *@This(), block: *const fn() callconv(.C) void) void {
        return objc.msgSend(self, "continueActivityUsingBlock:", void, .{block});
    }

    pub fn continueAsynchronousWorkOnMainThreadUsingBlock(self: *@This(), block: *const fn() callconv(.C) void) void {
        return objc.msgSend(self, "continueAsynchronousWorkOnMainThreadUsingBlock:", void, .{block});
    }

    pub fn performSynchronousFileAccessUsingBlock(self: *@This(), block: *const fn() callconv(.C) void) void {
        return objc.msgSend(self, "performSynchronousFileAccessUsingBlock:", void, .{block});
    }

    pub fn performAsynchronousFileAccessUsingBlock(self: *@This(), block: *const fn(*const fn() callconv(.C) void) callconv(.C) void) void {
        return objc.msgSend(self, "performAsynchronousFileAccessUsingBlock:", void, .{block});
    }

    pub fn revertDocumentToSaved(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "revertDocumentToSaved:", void, .{sender});
    }

    pub fn revertToContentsOfURLOfTypeError(self: *@This(), url: ?*URL, typeName: ?*String, outError: ?*?*Error) objc.BOOL {
        return objc.msgSend(self, "revertToContentsOfURL:ofType:error:", objc.BOOL, .{url, typeName, outError});
    }

    pub fn readFromURLOfTypeError(self: *@This(), url: ?*URL, typeName: ?*String, outError: ?*?*Error) objc.BOOL {
        return objc.msgSend(self, "readFromURL:ofType:error:", objc.BOOL, .{url, typeName, outError});
    }

    pub fn readFromFileWrapperOfTypeError(self: *@This(), fileWrapper: ?*FileWrapper, typeName: ?*String, outError: ?*?*Error) objc.BOOL {
        return objc.msgSend(self, "readFromFileWrapper:ofType:error:", objc.BOOL, .{fileWrapper, typeName, outError});
    }

    pub fn readFromDataOfTypeError(self: *@This(), data: ?*Data, typeName: ?*String, outError: ?*?*Error) objc.BOOL {
        return objc.msgSend(self, "readFromData:ofType:error:", objc.BOOL, .{data, typeName, outError});
    }

    pub fn writeToURLOfTypeError(self: *@This(), url: ?*URL, typeName: ?*String, outError: ?*?*Error) objc.BOOL {
        return objc.msgSend(self, "writeToURL:ofType:error:", objc.BOOL, .{url, typeName, outError});
    }

    pub fn fileWrapperOfTypeError(self: *@This(), typeName: ?*String, outError: ?*?*Error) ?*FileWrapper {
        return objc.msgSend(self, "fileWrapperOfType:error:", ?*FileWrapper, .{typeName, outError});
    }

    pub fn dataOfTypeError(self: *@This(), typeName: ?*String, outError: ?*?*Error) ?*Data {
        return objc.msgSend(self, "dataOfType:error:", ?*Data, .{typeName, outError});
    }

    pub fn unblockUserInteraction(self: *@This()) void {
        return objc.msgSend(self, "unblockUserInteraction", void, .{});
    }

    pub fn writeSafelyToURLOfTypeForSaveOperationError(self: *@This(), url: ?*URL, typeName: ?*String, saveOperation: SaveOperationType, outError: ?*?*Error, ) objc.BOOL {
        return objc.msgSend(self, "writeSafelyToURL:ofType:forSaveOperation:error:", objc.BOOL, .{url, typeName, saveOperation, outError, });
    }

    pub fn writeToURLOfTypeForSaveOperationOriginalContentsURLError(self: *@This(), url: ?*URL, typeName: ?*String, saveOperation: SaveOperationType, absoluteOriginalContentsURL: ?*URL, outError: ?*?*Error, ) objc.BOOL {
        return objc.msgSend(self, "writeToURL:ofType:forSaveOperation:originalContentsURL:error:", objc.BOOL, .{url, typeName, saveOperation, absoluteOriginalContentsURL, outError, });
    }

    pub fn fileAttributesToWriteToURLOfTypeForSaveOperationOriginalContentsURLError(self: *@This(), url: ?*URL, typeName: ?*String, saveOperation: SaveOperationType, absoluteOriginalContentsURL: ?*URL, outError: ?*?*Error, ) ?*anyopaque {
        return objc.msgSend(self, "fileAttributesToWriteToURL:ofType:forSaveOperation:originalContentsURL:error:", ?*anyopaque, .{url, typeName, saveOperation, absoluteOriginalContentsURL, outError, });
    }

    pub fn saveDocument(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "saveDocument:", void, .{sender});
    }

    pub fn saveDocumentAs(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "saveDocumentAs:", void, .{sender});
    }

    pub fn saveDocumentTo(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "saveDocumentTo:", void, .{sender});
    }

    pub fn saveDocumentWithDelegateDidSaveSelectorContextInfo(self: *@This(), delegate: *objc.Id, didSaveSelector: *objc.SEL, contextInfo: ?*anyopaque) void {
        return objc.msgSend(self, "saveDocumentWithDelegate:didSaveSelector:contextInfo:", void, .{delegate, didSaveSelector, contextInfo});
    }

    pub fn runModalSavePanelForSaveOperationDelegateDidSaveSelectorContextInfo(self: *@This(), saveOperation: SaveOperationType, delegate: *objc.Id, didSaveSelector: *objc.SEL, contextInfo: ?*anyopaque, ) void {
        return objc.msgSend(self, "runModalSavePanelForSaveOperation:delegate:didSaveSelector:contextInfo:", void, .{saveOperation, delegate, didSaveSelector, contextInfo, });
    }

    pub fn prepareSavePanel(self: *@This(), savePanel: ?*SavePanel) objc.BOOL {
        return objc.msgSend(self, "prepareSavePanel:", objc.BOOL, .{savePanel});
    }

    pub fn saveToURLOfTypeForSaveOperationDelegateDidSaveSelectorContextInfo(self: *@This(), url: ?*URL, typeName: ?*String, saveOperation: SaveOperationType, delegate: *objc.Id, didSaveSelector: *objc.SEL, contextInfo: ?*anyopaque, ) void {
        return objc.msgSend(self, "saveToURL:ofType:forSaveOperation:delegate:didSaveSelector:contextInfo:", void, .{url, typeName, saveOperation, delegate, didSaveSelector, contextInfo, });
    }

    pub fn saveToURLOfTypeForSaveOperationCompletionHandler(self: *@This(), url: ?*URL, typeName: ?*String, saveOperation: SaveOperationType, completionHandler: *const fn(?*Error) callconv(.C) void, ) void {
        return objc.msgSend(self, "saveToURL:ofType:forSaveOperation:completionHandler:", void, .{url, typeName, saveOperation, completionHandler, });
    }

    pub fn canAsynchronouslyWriteToURLOfTypeForSaveOperation(self: *@This(), url: ?*URL, typeName: ?*String, saveOperation: SaveOperationType) objc.BOOL {
        return objc.msgSend(self, "canAsynchronouslyWriteToURL:ofType:forSaveOperation:", objc.BOOL, .{url, typeName, saveOperation});
    }

    pub fn checkAutosavingSafetyAndReturnError(self: *@This(), outError: ?*?*Error) objc.BOOL {
        return objc.msgSend(self, "checkAutosavingSafetyAndReturnError:", objc.BOOL, .{outError});
    }

    pub fn scheduleAutosaving(self: *@This()) void {
        return objc.msgSend(self, "scheduleAutosaving", void, .{});
    }

    pub fn autosaveDocumentWithDelegateDidAutosaveSelectorContextInfo(self: *@This(), delegate: *objc.Id, didAutosaveSelector: *objc.SEL, contextInfo: ?*anyopaque) void {
        return objc.msgSend(self, "autosaveDocumentWithDelegate:didAutosaveSelector:contextInfo:", void, .{delegate, didAutosaveSelector, contextInfo});
    }

    pub fn autosaveWithImplicitCancellabilityCompletionHandler(self: *@This(), autosavingIsImplicitlyCancellable: objc.BOOL, completionHandler: *const fn(?*Error) callconv(.C) void) void {
        return objc.msgSend(self, "autosaveWithImplicitCancellability:completionHandler:", void, .{autosavingIsImplicitlyCancellable, completionHandler});
    }

    pub fn browseDocumentVersions(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "browseDocumentVersions:", void, .{sender});
    }

    pub fn stopBrowsingVersionsWithCompletionHandler(self: *@This(), completionHandler: *const fn() callconv(.C) void) void {
        return objc.msgSend(self, "stopBrowsingVersionsWithCompletionHandler:", void, .{completionHandler});
    }

    pub fn canCloseDocumentWithDelegateShouldCloseSelectorContextInfo(self: *@This(), delegate: *objc.Id, shouldCloseSelector: *objc.SEL, contextInfo: ?*anyopaque) void {
        return objc.msgSend(self, "canCloseDocumentWithDelegate:shouldCloseSelector:contextInfo:", void, .{delegate, shouldCloseSelector, contextInfo});
    }

    pub fn close(self: *@This()) void {
        return objc.msgSend(self, "close", void, .{});
    }

    pub fn duplicateDocument(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "duplicateDocument:", void, .{sender});
    }

    pub fn duplicateDocumentWithDelegateDidDuplicateSelectorContextInfo(self: *@This(), delegate: *objc.Id, didDuplicateSelector: *objc.SEL, contextInfo: ?*anyopaque) void {
        return objc.msgSend(self, "duplicateDocumentWithDelegate:didDuplicateSelector:contextInfo:", void, .{delegate, didDuplicateSelector, contextInfo});
    }

    pub fn duplicateAndReturnError(self: *@This(), outError: ?*?*Error) ?*anyopaque {
        return objc.msgSend(self, "duplicateAndReturnError:", ?*anyopaque, .{outError});
    }

    pub fn renameDocument(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "renameDocument:", void, .{sender});
    }

    pub fn moveDocumentToUbiquityContainer(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "moveDocumentToUbiquityContainer:", void, .{sender});
    }

    pub fn moveDocument(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "moveDocument:", void, .{sender});
    }

    pub fn moveDocumentWithCompletionHandler(self: *@This(), completionHandler: *const fn(objc.BOOL) callconv(.C) void) void {
        return objc.msgSend(self, "moveDocumentWithCompletionHandler:", void, .{completionHandler});
    }

    pub fn moveToURLCompletionHandler(self: *@This(), url: ?*URL, completionHandler: *const fn(?*Error) callconv(.C) void) void {
        return objc.msgSend(self, "moveToURL:completionHandler:", void, .{url, completionHandler});
    }

    pub fn lockDocument(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "lockDocument:", void, .{sender});
    }

    pub fn unlockDocument(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "unlockDocument:", void, .{sender});
    }

    pub fn lockDocumentWithCompletionHandler(self: *@This(), completionHandler: *const fn(objc.BOOL) callconv(.C) void) void {
        return objc.msgSend(self, "lockDocumentWithCompletionHandler:", void, .{completionHandler});
    }

    pub fn lockWithCompletionHandler(self: *@This(), completionHandler: *const fn(?*Error) callconv(.C) void) void {
        return objc.msgSend(self, "lockWithCompletionHandler:", void, .{completionHandler});
    }

    pub fn unlockDocumentWithCompletionHandler(self: *@This(), completionHandler: *const fn(objc.BOOL) callconv(.C) void) void {
        return objc.msgSend(self, "unlockDocumentWithCompletionHandler:", void, .{completionHandler});
    }

    pub fn unlockWithCompletionHandler(self: *@This(), completionHandler: *const fn(?*Error) callconv(.C) void) void {
        return objc.msgSend(self, "unlockWithCompletionHandler:", void, .{completionHandler});
    }

    pub fn runPageLayout(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "runPageLayout:", void, .{sender});
    }

    pub fn runModalPageLayoutWithPrintInfoDelegateDidRunSelectorContextInfo(self: *@This(), printInfo: ?*PrintInfo, delegate: *objc.Id, didRunSelector: *objc.SEL, contextInfo: ?*anyopaque, ) void {
        return objc.msgSend(self, "runModalPageLayoutWithPrintInfo:delegate:didRunSelector:contextInfo:", void, .{printInfo, delegate, didRunSelector, contextInfo, });
    }

    pub fn preparePageLayout(self: *@This(), pageLayout: ?*PageLayout) objc.BOOL {
        return objc.msgSend(self, "preparePageLayout:", objc.BOOL, .{pageLayout});
    }

    pub fn shouldChangePrintInfo(self: *@This(), newPrintInfo: ?*PrintInfo) objc.BOOL {
        return objc.msgSend(self, "shouldChangePrintInfo:", objc.BOOL, .{newPrintInfo});
    }

    pub fn printDocument(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "printDocument:", void, .{sender});
    }

    pub fn printDocumentWithSettingsShowPrintPanelDelegateDidPrintSelectorContextInfo(self: *@This(), printSettings: ?*anyopaque, showPrintPanel: objc.BOOL, delegate: *objc.Id, didPrintSelector: *objc.SEL, contextInfo: ?*anyopaque, ) void {
        return objc.msgSend(self, "printDocumentWithSettings:showPrintPanel:delegate:didPrintSelector:contextInfo:", void, .{printSettings, showPrintPanel, delegate, didPrintSelector, contextInfo, });
    }

    pub fn printOperationWithSettingsError(self: *@This(), printSettings: ?*anyopaque, outError: ?*?*Error) ?*PrintOperation {
        return objc.msgSend(self, "printOperationWithSettings:error:", ?*PrintOperation, .{printSettings, outError});
    }

    pub fn runModalPrintOperationDelegateDidRunSelectorContextInfo(self: *@This(), printOperation: ?*PrintOperation, delegate: *objc.Id, didRunSelector: *objc.SEL, contextInfo: ?*anyopaque, ) void {
        return objc.msgSend(self, "runModalPrintOperation:delegate:didRunSelector:contextInfo:", void, .{printOperation, delegate, didRunSelector, contextInfo, });
    }

    pub fn saveDocumentToPDF(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "saveDocumentToPDF:", void, .{sender});
    }

    pub fn shareDocumentWithSharingServiceCompletionHandler(self: *@This(), sharingService: ?*SharingService, completionHandler: *const fn(objc.BOOL) callconv(.C) void) void {
        return objc.msgSend(self, "shareDocumentWithSharingService:completionHandler:", void, .{sharingService, completionHandler});
    }

    pub fn prepareSharingServicePicker(self: *@This(), sharingServicePicker: ?*SharingServicePicker) void {
        return objc.msgSend(self, "prepareSharingServicePicker:", void, .{sharingServicePicker});
    }

    pub fn updateChangeCount(self: *@This(), change: DocumentChangeType) void {
        return objc.msgSend(self, "updateChangeCount:", void, .{change});
    }

    pub fn changeCountTokenForSaveOperation(self: *@This(), saveOperation: SaveOperationType) *objc.Id {
        return objc.msgSend(self, "changeCountTokenForSaveOperation:", *objc.Id, .{saveOperation});
    }

    pub fn updateChangeCountWithTokenForSaveOperation(self: *@This(), changeCountToken: *objc.Id, saveOperation: SaveOperationType) void {
        return objc.msgSend(self, "updateChangeCountWithToken:forSaveOperation:", void, .{changeCountToken, saveOperation});
    }

    pub fn presentErrorModalForWindowDelegateDidPresentSelectorContextInfo(self: *@This(), @"error": ?*Error, window: ?*Window, delegate: *objc.Id, didPresentSelector: *objc.SEL, contextInfo: ?*anyopaque, ) void {
        return objc.msgSend(self, "presentError:modalForWindow:delegate:didPresentSelector:contextInfo:", void, .{@"error", window, delegate, didPresentSelector, contextInfo, });
    }

    pub fn presentError(self: *@This(), @"error": ?*Error) objc.BOOL {
        return objc.msgSend(self, "presentError:", objc.BOOL, .{@"error"});
    }

    pub fn willPresentError(self: *@This(), @"error": ?*Error) ?*Error {
        return objc.msgSend(self, "willPresentError:", ?*Error, .{@"error"});
    }

    pub fn willNotPresentError(self: *@This(), @"error": ?*Error) void {
        return objc.msgSend(self, "willNotPresentError:", void, .{@"error"});
    }

    pub fn makeWindowControllers(self: *@This()) void {
        return objc.msgSend(self, "makeWindowControllers", void, .{});
    }

    pub fn windowControllerWillLoadNib(self: *@This(), windowController: ?*WindowController) void {
        return objc.msgSend(self, "windowControllerWillLoadNib:", void, .{windowController});
    }

    pub fn windowControllerDidLoadNib(self: *@This(), windowController: ?*WindowController) void {
        return objc.msgSend(self, "windowControllerDidLoadNib:", void, .{windowController});
    }

    pub fn setWindow(self: *@This(), window: ?*Window) void {
        return objc.msgSend(self, "setWindow:", void, .{window});
    }

    pub fn addWindowController(self: *@This(), windowController: ?*WindowController) void {
        return objc.msgSend(self, "addWindowController:", void, .{windowController});
    }

    pub fn removeWindowController(self: *@This(), windowController: ?*WindowController) void {
        return objc.msgSend(self, "removeWindowController:", void, .{windowController});
    }

    pub fn showWindows(self: *@This()) void {
        return objc.msgSend(self, "showWindows", void, .{});
    }

    pub fn shouldCloseWindowControllerDelegateShouldCloseSelectorContextInfo(self: *@This(), windowController: ?*WindowController, delegate: *objc.Id, shouldCloseSelector: *objc.SEL, contextInfo: ?*anyopaque, ) void {
        return objc.msgSend(self, "shouldCloseWindowController:delegate:shouldCloseSelector:contextInfo:", void, .{windowController, delegate, shouldCloseSelector, contextInfo, });
    }

    pub fn setDisplayName(self: *@This(), displayNameOrNil: ?*String) void {
        return objc.msgSend(self, "setDisplayName:", void, .{displayNameOrNil});
    }

    pub fn defaultDraftName(self: *@This()) ?*String {
        return objc.msgSend(self, "defaultDraftName", ?*String, .{});
    }

    pub fn isNativeType(self: *@This(), @"type": ?*String) objc.BOOL {
        return objc.msgSend(self, "isNativeType:", objc.BOOL, .{@"type"});
    }

    pub fn writableTypesForSaveOperation(self: *@This(), saveOperation: SaveOperationType) ?*anyopaque {
        return objc.msgSend(self, "writableTypesForSaveOperation:", ?*anyopaque, .{saveOperation});
    }

    pub fn fileNameExtensionForTypeSaveOperation(self: *@This(), typeName: ?*String, saveOperation: SaveOperationType) ?*String {
        return objc.msgSend(self, "fileNameExtensionForType:saveOperation:", ?*String, .{typeName, saveOperation});
    }

    pub fn validateUserInterfaceItem(self: *@This(), item: ?*anyopaque) objc.BOOL {
        return objc.msgSend(self, "validateUserInterfaceItem:", objc.BOOL, .{item});
    }

    pub fn relinquishPresentedItemToReader(self: *@This(), reader: *const fn(*const fn() callconv(.C) void) callconv(.C) void) void {
        return objc.msgSend(self, "relinquishPresentedItemToReader:", void, .{reader});
    }

    pub fn relinquishPresentedItemToWriter(self: *@This(), writer: *const fn(*const fn() callconv(.C) void) callconv(.C) void) void {
        return objc.msgSend(self, "relinquishPresentedItemToWriter:", void, .{writer});
    }

    pub fn savePresentedItemChangesWithCompletionHandler(self: *@This(), completionHandler: *const fn(?*Error) callconv(.C) void) void {
        return objc.msgSend(self, "savePresentedItemChangesWithCompletionHandler:", void, .{completionHandler});
    }

    pub fn accommodatePresentedItemDeletionWithCompletionHandler(self: *@This(), completionHandler: *const fn(?*Error) callconv(.C) void) void {
        return objc.msgSend(self, "accommodatePresentedItemDeletionWithCompletionHandler:", void, .{completionHandler});
    }

    pub fn presentedItemDidMoveToURL(self: *@This(), newURL: ?*URL) void {
        return objc.msgSend(self, "presentedItemDidMoveToURL:", void, .{newURL});
    }

    pub fn presentedItemDidChange(self: *@This()) void {
        return objc.msgSend(self, "presentedItemDidChange", void, .{});
    }

    pub fn presentedItemDidChangeUbiquityAttributes(self: *@This(), attributes: ?*anyopaque) void {
        return objc.msgSend(self, "presentedItemDidChangeUbiquityAttributes:", void, .{attributes});
    }

    pub fn presentedItemDidGainVersion(self: *@This(), version: ?*foundation.FileVersion) void {
        return objc.msgSend(self, "presentedItemDidGainVersion:", void, .{version});
    }

    pub fn presentedItemDidLoseVersion(self: *@This(), version: ?*foundation.FileVersion) void {
        return objc.msgSend(self, "presentedItemDidLoseVersion:", void, .{version});
    }

    pub fn presentedItemDidResolveConflictVersion(self: *@This(), version: ?*foundation.FileVersion) void {
        return objc.msgSend(self, "presentedItemDidResolveConflictVersion:", void, .{version});
    }

    pub fn fileType(self: *@This()) ?*String {
        return objc.msgSend(self, "fileType", ?*String, .{});
    }

    pub fn setFileType(self: *@This(), fileType: ?*String) void {
        return objc.msgSend(self, "setFileType:", void, .{fileType});
    }

    pub fn fileURL(self: *@This()) ?*URL {
        return objc.msgSend(self, "fileURL", ?*URL, .{});
    }

    pub fn setFileURL(self: *@This(), fileURL: ?*URL) void {
        return objc.msgSend(self, "setFileURL:", void, .{fileURL});
    }

    pub fn fileModificationDate(self: *@This()) ?*Date {
        return objc.msgSend(self, "fileModificationDate", ?*Date, .{});
    }

    pub fn setFileModificationDate(self: *@This(), fileModificationDate: ?*Date) void {
        return objc.msgSend(self, "setFileModificationDate:", void, .{fileModificationDate});
    }

    pub fn isDraft(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isDraft", objc.BOOL, .{});
    }

    pub fn setDraft(self: *@This(), draft: objc.BOOL) void {
        return objc.msgSend(self, "setDraft:", void, .{draft});
    }

    pub fn isEntireFileLoaded(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isEntireFileLoaded", objc.BOOL, .{});
    }

    pub fn autosavingIsImplicitlyCancellable(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "autosavingIsImplicitlyCancellable", objc.BOOL, .{});
    }

    pub fn keepBackupFile(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "keepBackupFile", objc.BOOL, .{});
    }

    pub fn backupFileURL(self: *@This()) ?*URL {
        return objc.msgSend(self, "backupFileURL", ?*URL, .{});
    }

    pub fn savePanelShowsFileFormatsControl(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "savePanelShowsFileFormatsControl", objc.BOOL, .{});
    }

    pub fn fileNameExtensionWasHiddenInLastRunSavePanel(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "fileNameExtensionWasHiddenInLastRunSavePanel", objc.BOOL, .{});
    }

    pub fn fileTypeFromLastRunSavePanel(self: *@This()) ?*String {
        return objc.msgSend(self, "fileTypeFromLastRunSavePanel", ?*String, .{});
    }

    pub fn hasUnautosavedChanges(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "hasUnautosavedChanges", objc.BOOL, .{});
    }

    pub fn autosavesInPlace(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "autosavesInPlace", objc.BOOL, .{});
    }

    pub fn preservesVersions(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "preservesVersions", objc.BOOL, .{});
    }

    pub fn isBrowsingVersions(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isBrowsingVersions", objc.BOOL, .{});
    }

    pub fn autosavesDrafts(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "autosavesDrafts", objc.BOOL, .{});
    }

    pub fn autosavingFileType(self: *@This()) ?*String {
        return objc.msgSend(self, "autosavingFileType", ?*String, .{});
    }

    pub fn autosavedContentsFileURL(self: *@This()) ?*URL {
        return objc.msgSend(self, "autosavedContentsFileURL", ?*URL, .{});
    }

    pub fn setAutosavedContentsFileURL(self: *@This(), autosavedContentsFileURL: ?*URL) void {
        return objc.msgSend(self, "setAutosavedContentsFileURL:", void, .{autosavedContentsFileURL});
    }

    pub fn isLocked(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isLocked", objc.BOOL, .{});
    }

    pub fn printInfo(self: *@This()) ?*PrintInfo {
        return objc.msgSend(self, "printInfo", ?*PrintInfo, .{});
    }

    pub fn setPrintInfo(self: *@This(), printInfo: ?*PrintInfo) void {
        return objc.msgSend(self, "setPrintInfo:", void, .{printInfo});
    }

    pub fn PDFPrintOperation(self: *@This()) ?*PrintOperation {
        return objc.msgSend(self, "PDFPrintOperation", ?*PrintOperation, .{});
    }

    pub fn allowsDocumentSharing(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "allowsDocumentSharing", objc.BOOL, .{});
    }

    pub fn previewRepresentableActivityItems(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "previewRepresentableActivityItems", ?*anyopaque, .{});
    }

    pub fn setPreviewRepresentableActivityItems(self: *@This(), previewRepresentableActivityItems: ?*anyopaque) void {
        return objc.msgSend(self, "setPreviewRepresentableActivityItems:", void, .{previewRepresentableActivityItems});
    }

    pub fn isDocumentEdited(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isDocumentEdited", objc.BOOL, .{});
    }

    pub fn isInViewingMode(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isInViewingMode", objc.BOOL, .{});
    }

    pub fn undoManager(self: *@This()) ?*UndoManager {
        return objc.msgSend(self, "undoManager", ?*UndoManager, .{});
    }

    pub fn setUndoManager(self: *@This(), undoManager: ?*UndoManager) void {
        return objc.msgSend(self, "setUndoManager:", void, .{undoManager});
    }

    pub fn hasUndoManager(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "hasUndoManager", objc.BOOL, .{});
    }

    pub fn setHasUndoManager(self: *@This(), hasUndoManager: objc.BOOL) void {
        return objc.msgSend(self, "setHasUndoManager:", void, .{hasUndoManager});
    }

    pub fn windowNibName(self: *@This()) NibName {
        return objc.msgSend(self, "windowNibName", NibName, .{});
    }

    pub fn windowControllers(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "windowControllers", ?*anyopaque, .{});
    }

    pub fn displayName(self: *@This()) ?*String {
        return objc.msgSend(self, "displayName", ?*String, .{});
    }

    pub fn windowForSheet(self: *@This()) ?*Window {
        return objc.msgSend(self, "windowForSheet", ?*Window, .{});
    }

    pub fn readableTypes(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "readableTypes", ?*anyopaque, .{});
    }

    pub fn writableTypes(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "writableTypes", ?*anyopaque, .{});
    }

    pub fn usesUbiquitousStorage(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "usesUbiquitousStorage", objc.BOOL, .{});
    }

    pub fn presentedItemURL(self: *@This()) ?*URL {
        return objc.msgSend(self, "presentedItemURL", ?*URL, .{});
    }

    pub fn observedPresentedItemUbiquityAttributes(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "observedPresentedItemUbiquityAttributes", ?*anyopaque, .{});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSUserActivityRestoring?language=objc
pub const UserActivityRestoring = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{objc.NSObject, });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn restoreUserActivityState(self: *@This(), userActivity: ?*foundation.UserActivity) void {
        return objc.msgSend(self, "restoreUserActivityState:", void, .{userActivity});
    }

};

pub const AppKitVersion = f64;

pub const ModalResponse = objc.NSInteger;

pub const ApplicationPresentationOptions = enum(objc.NSUInteger) {
    Default = 0,
    AutoHideDock = 1,
    HideDock = 2,
    AutoHideMenuBar = 4,
    HideMenuBar = 8,
    DisableAppleMenu = 16,
    DisableProcessSwitching = 32,
    DisableForceQuit = 64,
    DisableSessionTermination = 128,
    DisableHideApplication = 256,
    DisableMenuBarTransparency = 512,
    FullScreen = 1024,
    AutoHideToolbar = 2048,
    DisableCursorLocationAssistance = 4096,
};

pub const ApplicationOcclusionState = enum(objc.NSUInteger) {
    Visible = 2,
};

pub const WindowListOptions = enum(objc.NSInteger) {
    OrderedFrontToBack = 1,
};

pub const _NSModalSession = extern struct {};

pub const ModalSession = ?*_NSModalSession;

/// https://developer.apple.com/documentation/AppKit/NSApplication?language=objc
pub const Application = opaque {
    pub const InternalInfo = objc.ExternalClass("NSApplication", @This(), Responder, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn sharedApplication(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "sharedApplication", ?*anyopaque, .{});
    }

    pub fn delegate(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "delegate", ?*anyopaque, .{});
    }

    pub fn setDelegate(self: *@This(), delegate: ?*anyopaque) void {
        return objc.msgSend(self, "setDelegate:", void, .{delegate});
    }

    pub fn hide(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "hide:", void, .{sender});
    }

    pub fn unhide(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "unhide:", void, .{sender});
    }

    pub fn unhideWithoutActivation(self: *@This()) void {
        return objc.msgSend(self, "unhideWithoutActivation", void, .{});
    }

    pub fn windowWithWindowNumber(self: *@This(), windowNum: objc.NSInteger) ?*Window {
        return objc.msgSend(self, "windowWithWindowNumber:", ?*Window, .{windowNum});
    }

    pub fn mainWindow(self: *@This()) ?*Window {
        return objc.msgSend(self, "mainWindow", ?*Window, .{});
    }

    pub fn keyWindow(self: *@This()) ?*Window {
        return objc.msgSend(self, "keyWindow", ?*Window, .{});
    }

    pub fn isActive(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isActive", objc.BOOL, .{});
    }

    pub fn isHidden(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isHidden", objc.BOOL, .{});
    }

    pub fn isRunning(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isRunning", objc.BOOL, .{});
    }

    pub fn deactivate(self: *@This()) void {
        return objc.msgSend(self, "deactivate", void, .{});
    }

    pub fn activateIgnoringOtherApps(self: *@This(), ignoreOtherApps: objc.BOOL) void {
        return objc.msgSend(self, "activateIgnoringOtherApps:", void, .{ignoreOtherApps});
    }

    pub fn activate(self: *@This()) void {
        return objc.msgSend(self, "activate", void, .{});
    }

    pub fn yieldActivationToApplication(self: *@This(), application: ?*RunningApplication) void {
        return objc.msgSend(self, "yieldActivationToApplication:", void, .{application});
    }

    pub fn yieldActivationToApplicationWithBundleIdentifier(self: *@This(), bundleIdentifier: ?*String) void {
        return objc.msgSend(self, "yieldActivationToApplicationWithBundleIdentifier:", void, .{bundleIdentifier});
    }

    pub fn hideOtherApplications(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "hideOtherApplications:", void, .{sender});
    }

    pub fn unhideAllApplications(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "unhideAllApplications:", void, .{sender});
    }

    pub fn finishLaunching(self: *@This()) void {
        return objc.msgSend(self, "finishLaunching", void, .{});
    }

    pub fn run(self: *@This()) void {
        return objc.msgSend(self, "run", void, .{});
    }

    pub fn runModalForWindow(self: *@This(), window: ?*Window) ModalResponse {
        return objc.msgSend(self, "runModalForWindow:", ModalResponse, .{window});
    }

    pub fn stop(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "stop:", void, .{sender});
    }

    pub fn stopModal(self: *@This()) void {
        return objc.msgSend(self, "stopModal", void, .{});
    }

    pub fn stopModalWithCode(self: *@This(), returnCode: ModalResponse) void {
        return objc.msgSend(self, "stopModalWithCode:", void, .{returnCode});
    }

    pub fn abortModal(self: *@This()) void {
        return objc.msgSend(self, "abortModal", void, .{});
    }

    pub fn modalWindow(self: *@This()) ?*Window {
        return objc.msgSend(self, "modalWindow", ?*Window, .{});
    }

    pub fn beginModalSessionForWindow(self: *@This(), window: ?*Window) ModalSession {
        return objc.msgSend(self, "beginModalSessionForWindow:", ModalSession, .{window});
    }

    pub fn runModalSession(self: *@This(), session: ModalSession) ModalResponse {
        return objc.msgSend(self, "runModalSession:", ModalResponse, .{session});
    }

    pub fn endModalSession(self: *@This(), session: ModalSession) void {
        return objc.msgSend(self, "endModalSession:", void, .{session});
    }

    pub fn terminate(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "terminate:", void, .{sender});
    }

    pub fn requestUserAttention(self: *@This(), requestType: RequestUserAttentionType) objc.NSInteger {
        return objc.msgSend(self, "requestUserAttention:", objc.NSInteger, .{requestType});
    }

    pub fn cancelUserAttentionRequest(self: *@This(), request: objc.NSInteger) void {
        return objc.msgSend(self, "cancelUserAttentionRequest:", void, .{request});
    }

    pub fn enumerateWindowsWithOptionsUsingBlock(self: *@This(), options: WindowListOptions, block: *const fn(?*Window, ?*objc.BOOL) callconv(.C) void) void {
        return objc.msgSend(self, "enumerateWindowsWithOptions:usingBlock:", void, .{options, block});
    }

    pub fn preventWindowOrdering(self: *@This()) void {
        return objc.msgSend(self, "preventWindowOrdering", void, .{});
    }

    pub fn windows(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "windows", ?*anyopaque, .{});
    }

    pub fn setWindowsNeedUpdate(self: *@This(), needUpdate: objc.BOOL) void {
        return objc.msgSend(self, "setWindowsNeedUpdate:", void, .{needUpdate});
    }

    pub fn updateWindows(self: *@This()) void {
        return objc.msgSend(self, "updateWindows", void, .{});
    }

    pub fn setMainMenu(self: *@This(), mainMenu: ?*Menu) void {
        return objc.msgSend(self, "setMainMenu:", void, .{mainMenu});
    }

    pub fn mainMenu(self: *@This()) ?*Menu {
        return objc.msgSend(self, "mainMenu", ?*Menu, .{});
    }

    pub fn setHelpMenu(self: *@This(), helpMenu: ?*Menu) void {
        return objc.msgSend(self, "setHelpMenu:", void, .{helpMenu});
    }

    pub fn helpMenu(self: *@This()) ?*Menu {
        return objc.msgSend(self, "helpMenu", ?*Menu, .{});
    }

    pub fn setApplicationIconImage(self: *@This(), applicationIconImage: ?*Image) void {
        return objc.msgSend(self, "setApplicationIconImage:", void, .{applicationIconImage});
    }

    pub fn applicationIconImage(self: *@This()) ?*Image {
        return objc.msgSend(self, "applicationIconImage", ?*Image, .{});
    }

    pub fn activationPolicy(self: *@This()) ApplicationActivationPolicy {
        return objc.msgSend(self, "activationPolicy", ApplicationActivationPolicy, .{});
    }

    pub fn setActivationPolicy(self: *@This(), activationPolicy: ApplicationActivationPolicy) objc.BOOL {
        return objc.msgSend(self, "setActivationPolicy:", objc.BOOL, .{activationPolicy});
    }

    pub fn dockTile(self: *@This()) ?*DockTile {
        return objc.msgSend(self, "dockTile", ?*DockTile, .{});
    }

    pub fn reportException(self: *@This(), exception: ?*Exception) void {
        return objc.msgSend(self, "reportException:", void, .{exception});
    }

    pub fn detachDrawingThreadToTargetWithObject(self: *@This(), selector: *objc.SEL, target: *objc.Id, argument: *objc.Id) void {
        return objc.msgSend(self, "detachDrawingThread:toTarget:withObject:", void, .{selector, target, argument});
    }

    pub fn replyToApplicationShouldTerminate(self: *@This(), shouldTerminate: objc.BOOL) void {
        return objc.msgSend(self, "replyToApplicationShouldTerminate:", void, .{shouldTerminate});
    }

    pub fn replyToOpenOrPrint(self: *@This(), reply: ApplicationDelegateReply) void {
        return objc.msgSend(self, "replyToOpenOrPrint:", void, .{reply});
    }

    pub fn orderFrontCharacterPalette(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "orderFrontCharacterPalette:", void, .{sender});
    }

    pub fn presentationOptions(self: *@This()) ApplicationPresentationOptions {
        return objc.msgSend(self, "presentationOptions", ApplicationPresentationOptions, .{});
    }

    pub fn setPresentationOptions(self: *@This(), presentationOptions: ApplicationPresentationOptions) void {
        return objc.msgSend(self, "setPresentationOptions:", void, .{presentationOptions});
    }

    pub fn currentSystemPresentationOptions(self: *@This()) ApplicationPresentationOptions {
        return objc.msgSend(self, "currentSystemPresentationOptions", ApplicationPresentationOptions, .{});
    }

    pub fn occlusionState(self: *@This()) ApplicationOcclusionState {
        return objc.msgSend(self, "occlusionState", ApplicationOcclusionState, .{});
    }

    pub fn isProtectedDataAvailable(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isProtectedDataAvailable", objc.BOOL, .{});
    }

};

pub const RequestUserAttentionType = RequestUserAttentionType;

pub const RequestUserAttentionType = enum(objc.NSUInteger) {
    CriticalRequest = 0,
    InformationalRequest = 10,
};

pub const ApplicationDelegateReply = ApplicationDelegateReply;

pub const ApplicationDelegateReply = enum(objc.NSUInteger) {
    Success = 0,
    Cancel = 1,
    Failure = 2,
};

pub const ApplicationTerminateReply = enum(objc.NSUInteger) {
    TerminateCancel = 0,
    TerminateNow = 1,
    TerminateLater = 2,
};

pub const ApplicationPrintReply = enum(objc.NSUInteger) {
    PrintingCancelled = 0,
    PrintingSuccess = 1,
    PrintingReplyLater = 2,
    PrintingFailure = 3,
};

/// https://developer.apple.com/documentation/AppKit/NSApplicationDelegate?language=objc
pub const ApplicationDelegate = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{objc.NSObject, });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn applicationShouldTerminate(self: *@This(), sender: ?*Application) ApplicationTerminateReply {
        return objc.msgSend(self, "applicationShouldTerminate:", ApplicationTerminateReply, .{sender});
    }

    pub fn applicationOpenURLs(self: *@This(), application: ?*Application, urls: ?*anyopaque) void {
        return objc.msgSend(self, "application:openURLs:", void, .{application, urls});
    }

    pub fn applicationOpenFile(self: *@This(), sender: ?*Application, filename: ?*String) objc.BOOL {
        return objc.msgSend(self, "application:openFile:", objc.BOOL, .{sender, filename});
    }

    pub fn applicationOpenFiles(self: *@This(), sender: ?*Application, filenames: ?*anyopaque) void {
        return objc.msgSend(self, "application:openFiles:", void, .{sender, filenames});
    }

    pub fn applicationOpenTempFile(self: *@This(), sender: ?*Application, filename: ?*String) objc.BOOL {
        return objc.msgSend(self, "application:openTempFile:", objc.BOOL, .{sender, filename});
    }

    pub fn applicationShouldOpenUntitledFile(self: *@This(), sender: ?*Application) objc.BOOL {
        return objc.msgSend(self, "applicationShouldOpenUntitledFile:", objc.BOOL, .{sender});
    }

    pub fn applicationOpenUntitledFile(self: *@This(), sender: ?*Application) objc.BOOL {
        return objc.msgSend(self, "applicationOpenUntitledFile:", objc.BOOL, .{sender});
    }

    pub fn applicationOpenFileWithoutUI(self: *@This(), sender: *objc.Id, filename: ?*String) objc.BOOL {
        return objc.msgSend(self, "application:openFileWithoutUI:", objc.BOOL, .{sender, filename});
    }

    pub fn applicationPrintFile(self: *@This(), sender: ?*Application, filename: ?*String) objc.BOOL {
        return objc.msgSend(self, "application:printFile:", objc.BOOL, .{sender, filename});
    }

    pub fn applicationPrintFilesWithSettingsShowPrintPanels(self: *@This(), application: ?*Application, fileNames: ?*anyopaque, printSettings: ?*anyopaque, showPrintPanels: objc.BOOL, ) ApplicationPrintReply {
        return objc.msgSend(self, "application:printFiles:withSettings:showPrintPanels:", ApplicationPrintReply, .{application, fileNames, printSettings, showPrintPanels, });
    }

    pub fn applicationShouldTerminateAfterLastWindowClosed(self: *@This(), sender: ?*Application) objc.BOOL {
        return objc.msgSend(self, "applicationShouldTerminateAfterLastWindowClosed:", objc.BOOL, .{sender});
    }

    pub fn applicationShouldHandleReopenHasVisibleWindows(self: *@This(), sender: ?*Application, hasVisibleWindows: objc.BOOL) objc.BOOL {
        return objc.msgSend(self, "applicationShouldHandleReopen:hasVisibleWindows:", objc.BOOL, .{sender, hasVisibleWindows});
    }

    pub fn applicationDockMenu(self: *@This(), sender: ?*Application) ?*Menu {
        return objc.msgSend(self, "applicationDockMenu:", ?*Menu, .{sender});
    }

    pub fn applicationWillPresentError(self: *@This(), application: ?*Application, @"error": ?*Error) ?*Error {
        return objc.msgSend(self, "application:willPresentError:", ?*Error, .{application, @"error"});
    }

    pub fn applicationDidRegisterForRemoteNotificationsWithDeviceToken(self: *@This(), application: ?*Application, deviceToken: ?*Data) void {
        return objc.msgSend(self, "application:didRegisterForRemoteNotificationsWithDeviceToken:", void, .{application, deviceToken});
    }

    pub fn applicationDidFailToRegisterForRemoteNotificationsWithError(self: *@This(), application: ?*Application, @"error": ?*Error) void {
        return objc.msgSend(self, "application:didFailToRegisterForRemoteNotificationsWithError:", void, .{application, @"error"});
    }

    pub fn applicationDidReceiveRemoteNotification(self: *@This(), application: ?*Application, userInfo: ?*anyopaque) void {
        return objc.msgSend(self, "application:didReceiveRemoteNotification:", void, .{application, userInfo});
    }

    pub fn applicationSupportsSecureRestorableState(self: *@This(), app: ?*Application) objc.BOOL {
        return objc.msgSend(self, "applicationSupportsSecureRestorableState:", objc.BOOL, .{app});
    }

    pub fn applicationHandlerForIntent(self: *@This(), application: ?*Application, intent: ?*INIntent) *objc.Id {
        return objc.msgSend(self, "application:handlerForIntent:", *objc.Id, .{application, intent});
    }

    pub fn applicationWillEncodeRestorableState(self: *@This(), app: ?*Application, coder: ?*foundation.Coder) void {
        return objc.msgSend(self, "application:willEncodeRestorableState:", void, .{app, coder});
    }

    pub fn applicationDidDecodeRestorableState(self: *@This(), app: ?*Application, coder: ?*foundation.Coder) void {
        return objc.msgSend(self, "application:didDecodeRestorableState:", void, .{app, coder});
    }

    pub fn applicationWillContinueUserActivityWithType(self: *@This(), application: ?*Application, userActivityType: ?*String) objc.BOOL {
        return objc.msgSend(self, "application:willContinueUserActivityWithType:", objc.BOOL, .{application, userActivityType});
    }

    pub fn applicationContinueUserActivityRestorationHandler(self: *@This(), application: ?*Application, userActivity: ?*UserActivity, restorationHandler: *const fn(?*anyopaque) callconv(.C) void) objc.BOOL {
        return objc.msgSend(self, "application:continueUserActivity:restorationHandler:", objc.BOOL, .{application, userActivity, restorationHandler});
    }

    pub fn applicationDidFailToContinueUserActivityWithTypeError(self: *@This(), application: ?*Application, userActivityType: ?*String, @"error": ?*Error) void {
        return objc.msgSend(self, "application:didFailToContinueUserActivityWithType:error:", void, .{application, userActivityType, @"error"});
    }

    pub fn applicationDidUpdateUserActivity(self: *@This(), application: ?*Application, userActivity: ?*UserActivity) void {
        return objc.msgSend(self, "application:didUpdateUserActivity:", void, .{application, userActivity});
    }

    pub fn applicationUserDidAcceptCloudKitShareWithMetadata(self: *@This(), application: ?*Application, metadata: ?*CKShareMetadata) void {
        return objc.msgSend(self, "application:userDidAcceptCloudKitShareWithMetadata:", void, .{application, metadata});
    }

    pub fn applicationDelegateHandlesKey(self: *@This(), sender: ?*Application, key: ?*String) objc.BOOL {
        return objc.msgSend(self, "application:delegateHandlesKey:", objc.BOOL, .{sender, key});
    }

    pub fn applicationShouldAutomaticallyLocalizeKeyEquivalents(self: *@This(), application: ?*Application) objc.BOOL {
        return objc.msgSend(self, "applicationShouldAutomaticallyLocalizeKeyEquivalents:", objc.BOOL, .{application});
    }

    pub fn applicationWillFinishLaunching(self: *@This(), notification: ?*Notification) void {
        return objc.msgSend(self, "applicationWillFinishLaunching:", void, .{notification});
    }

    pub fn applicationDidFinishLaunching(self: *@This(), notification: ?*Notification) void {
        return objc.msgSend(self, "applicationDidFinishLaunching:", void, .{notification});
    }

    pub fn applicationWillHide(self: *@This(), notification: ?*Notification) void {
        return objc.msgSend(self, "applicationWillHide:", void, .{notification});
    }

    pub fn applicationDidHide(self: *@This(), notification: ?*Notification) void {
        return objc.msgSend(self, "applicationDidHide:", void, .{notification});
    }

    pub fn applicationWillUnhide(self: *@This(), notification: ?*Notification) void {
        return objc.msgSend(self, "applicationWillUnhide:", void, .{notification});
    }

    pub fn applicationDidUnhide(self: *@This(), notification: ?*Notification) void {
        return objc.msgSend(self, "applicationDidUnhide:", void, .{notification});
    }

    pub fn applicationWillBecomeActive(self: *@This(), notification: ?*Notification) void {
        return objc.msgSend(self, "applicationWillBecomeActive:", void, .{notification});
    }

    pub fn applicationDidBecomeActive(self: *@This(), notification: ?*Notification) void {
        return objc.msgSend(self, "applicationDidBecomeActive:", void, .{notification});
    }

    pub fn applicationWillResignActive(self: *@This(), notification: ?*Notification) void {
        return objc.msgSend(self, "applicationWillResignActive:", void, .{notification});
    }

    pub fn applicationDidResignActive(self: *@This(), notification: ?*Notification) void {
        return objc.msgSend(self, "applicationDidResignActive:", void, .{notification});
    }

    pub fn applicationWillUpdate(self: *@This(), notification: ?*Notification) void {
        return objc.msgSend(self, "applicationWillUpdate:", void, .{notification});
    }

    pub fn applicationDidUpdate(self: *@This(), notification: ?*Notification) void {
        return objc.msgSend(self, "applicationDidUpdate:", void, .{notification});
    }

    pub fn applicationWillTerminate(self: *@This(), notification: ?*Notification) void {
        return objc.msgSend(self, "applicationWillTerminate:", void, .{notification});
    }

    pub fn applicationDidChangeScreenParameters(self: *@This(), notification: ?*Notification) void {
        return objc.msgSend(self, "applicationDidChangeScreenParameters:", void, .{notification});
    }

    pub fn applicationDidChangeOcclusionState(self: *@This(), notification: ?*Notification) void {
        return objc.msgSend(self, "applicationDidChangeOcclusionState:", void, .{notification});
    }

    pub fn applicationProtectedDataWillBecomeUnavailable(self: *@This(), notification: ?*Notification) void {
        return objc.msgSend(self, "applicationProtectedDataWillBecomeUnavailable:", void, .{notification});
    }

    pub fn applicationProtectedDataDidBecomeAvailable(self: *@This(), notification: ?*Notification) void {
        return objc.msgSend(self, "applicationProtectedDataDidBecomeAvailable:", void, .{notification});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSServicesMenuRequestor?language=objc
pub const ServicesMenuRequestor = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{objc.NSObject, });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn writeSelectionToPasteboardTypes(self: *@This(), pboard: ?*Pasteboard, types: ?*anyopaque) objc.BOOL {
        return objc.msgSend(self, "writeSelectionToPasteboard:types:", objc.BOOL, .{pboard, types});
    }

    pub fn readSelectionFromPasteboard(self: *@This(), pboard: ?*Pasteboard) objc.BOOL {
        return objc.msgSend(self, "readSelectionFromPasteboard:", objc.BOOL, .{pboard});
    }

};

pub const AboutPanelOptionKey = ?*String;

pub const RemoteNotificationType = enum(objc.NSUInteger) {
    None = 0,
    Badge = 1,
    Sound = 2,
    Alert = 4,
};

pub extern "AppKit" fn ApplicationMain(argc: i32, argv: ?*?*i8) callconv(.C) i32;

pub extern "AppKit" fn ApplicationLoad() callconv(.C) objc.BOOL;

pub extern "AppKit" fn ShowsServicesMenuItem(itemName: ?*String) callconv(.C) objc.BOOL;

pub extern "AppKit" fn SetShowsServicesMenuItem(itemName: ?*String, enabled: objc.BOOL) callconv(.C) objc.NSInteger;

pub extern "AppKit" fn UpdateDynamicServices() callconv(.C) void;

pub extern "AppKit" fn PerformService(itemName: ?*String, pboard: ?*Pasteboard) callconv(.C) objc.BOOL;

pub const ServiceProviderName = ?*String;

pub extern "AppKit" fn RegisterServicesProvider(provider: *objc.Id, name: ServiceProviderName) callconv(.C) void;

pub extern "AppKit" fn UnregisterServicesProvider(name: ServiceProviderName) callconv(.C) void;

pub const anon6911 = enum(i32) {
    NSRunStoppedResponse = -1000,
    NSRunAbortedResponse = -1001,
    NSRunContinuesResponse = -1002,
};

pub const ColorListName = ?*String;

pub const ColorName = ?*String;

/// https://developer.apple.com/documentation/AppKit/NSColorList?language=objc
pub const ColorList = opaque {
    pub const InternalInfo = objc.ExternalClass("NSColorList", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn colorListNamed(self: *@This(), name: ColorListName) ?*ColorList {
        return objc.msgSend(self, "colorListNamed:", ?*ColorList, .{name});
    }

    pub fn initWithName(self: *@This(), name: ColorListName) *@This() {
        return objc.msgSend(self, "initWithName:", *@This(), .{name});
    }

    pub fn initWithNameFromFile(self: *@This(), name: ColorListName, path: ?*String) *@This() {
        return objc.msgSend(self, "initWithName:fromFile:", *@This(), .{name, path});
    }

    pub fn setColorForKey(self: *@This(), color: ?*Color, key: ColorName) void {
        return objc.msgSend(self, "setColor:forKey:", void, .{color, key});
    }

    pub fn insertColorKeyAtIndex(self: *@This(), color: ?*Color, key: ColorName, loc: objc.NSUInteger) void {
        return objc.msgSend(self, "insertColor:key:atIndex:", void, .{color, key, loc});
    }

    pub fn removeColorWithKey(self: *@This(), key: ColorName) void {
        return objc.msgSend(self, "removeColorWithKey:", void, .{key});
    }

    pub fn colorWithKey(self: *@This(), key: ColorName) ?*Color {
        return objc.msgSend(self, "colorWithKey:", ?*Color, .{key});
    }

    pub fn writeToURLError(self: *@This(), url: ?*URL, errPtr: ?*?*Error) objc.BOOL {
        return objc.msgSend(self, "writeToURL:error:", objc.BOOL, .{url, errPtr});
    }

    pub fn writeToFile(self: *@This(), path: ?*String) objc.BOOL {
        return objc.msgSend(self, "writeToFile:", objc.BOOL, .{path});
    }

    pub fn removeFile(self: *@This()) void {
        return objc.msgSend(self, "removeFile", void, .{});
    }

    pub fn availableColorLists(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "availableColorLists", ?*anyopaque, .{});
    }

    pub fn name(self: *@This()) ColorListName {
        return objc.msgSend(self, "name", ColorListName, .{});
    }

    pub fn allKeys(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "allKeys", ?*anyopaque, .{});
    }

    pub fn isEditable(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isEditable", objc.BOOL, .{});
    }

};

pub const ColorType = enum(objc.NSInteger) {
    ComponentBased = 0,
    Pattern = 1,
    Catalog = 2,
};

pub const ColorSystemEffect = enum(objc.NSInteger) {
    None = 0,
    Pressed = 1,
    DeepPressed = 2,
    Disabled = 3,
    Rollover = 4,
};

/// https://developer.apple.com/documentation/AppKit/NSColor?language=objc
pub const Color = opaque {
    pub const InternalInfo = objc.ExternalClass("NSColor", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn init(self: *@This()) *@This() {
        return objc.msgSend(self, "init", *@This(), .{});
    }

    pub fn initWithCoder(self: *@This(), coder: ?*foundation.Coder) *@This() {
        return objc.msgSend(self, "initWithCoder:", *@This(), .{coder});
    }

    pub fn colorWithColorSpaceComponentsCount(self: *@This(), space: ?*ColorSpace, components: ?*core_foundation.CGFloat, numberOfComponents: objc.NSInteger) ?*Color {
        return objc.msgSend(self, "colorWithColorSpace:components:count:", ?*Color, .{space, components, numberOfComponents});
    }

    pub fn colorWithSRGBRedGreenBlueAlpha(self: *@This(), red: core_foundation.CGFloat, green: core_foundation.CGFloat, blue: core_foundation.CGFloat, alpha: core_foundation.CGFloat, ) ?*Color {
        return objc.msgSend(self, "colorWithSRGBRed:green:blue:alpha:", ?*Color, .{red, green, blue, alpha, });
    }

    pub fn colorWithGenericGamma22WhiteAlpha(self: *@This(), white: core_foundation.CGFloat, alpha: core_foundation.CGFloat) ?*Color {
        return objc.msgSend(self, "colorWithGenericGamma22White:alpha:", ?*Color, .{white, alpha});
    }

    pub fn colorWithDisplayP3RedGreenBlueAlpha(self: *@This(), red: core_foundation.CGFloat, green: core_foundation.CGFloat, blue: core_foundation.CGFloat, alpha: core_foundation.CGFloat, ) ?*Color {
        return objc.msgSend(self, "colorWithDisplayP3Red:green:blue:alpha:", ?*Color, .{red, green, blue, alpha, });
    }

    pub fn colorWithWhiteAlpha(self: *@This(), white: core_foundation.CGFloat, alpha: core_foundation.CGFloat) ?*Color {
        return objc.msgSend(self, "colorWithWhite:alpha:", ?*Color, .{white, alpha});
    }

    pub fn colorWithRedGreenBlueAlpha(self: *@This(), red: core_foundation.CGFloat, green: core_foundation.CGFloat, blue: core_foundation.CGFloat, alpha: core_foundation.CGFloat, ) ?*Color {
        return objc.msgSend(self, "colorWithRed:green:blue:alpha:", ?*Color, .{red, green, blue, alpha, });
    }

    pub fn colorWithHueSaturationBrightnessAlpha(self: *@This(), hue: core_foundation.CGFloat, saturation: core_foundation.CGFloat, brightness: core_foundation.CGFloat, alpha: core_foundation.CGFloat, ) ?*Color {
        return objc.msgSend(self, "colorWithHue:saturation:brightness:alpha:", ?*Color, .{hue, saturation, brightness, alpha, });
    }

    pub fn colorWithColorSpaceHueSaturationBrightnessAlpha(self: *@This(), space: ?*ColorSpace, hue: core_foundation.CGFloat, saturation: core_foundation.CGFloat, brightness: core_foundation.CGFloat, alpha: core_foundation.CGFloat, ) ?*Color {
        return objc.msgSend(self, "colorWithColorSpace:hue:saturation:brightness:alpha:", ?*Color, .{space, hue, saturation, brightness, alpha, });
    }

    pub fn colorWithCatalogNameColorName(self: *@This(), listName: ColorListName, colorName: ColorName) ?*Color {
        return objc.msgSend(self, "colorWithCatalogName:colorName:", ?*Color, .{listName, colorName});
    }

    pub fn colorNamedBundle(self: *@This(), name: ColorName, bundle: ?*Bundle) ?*Color {
        return objc.msgSend(self, "colorNamed:bundle:", ?*Color, .{name, bundle});
    }

    pub fn colorNamed(self: *@This(), name: ColorName) ?*Color {
        return objc.msgSend(self, "colorNamed:", ?*Color, .{name});
    }

    pub fn colorWithNameDynamicProvider(self: *@This(), colorName: ColorName, dynamicProvider: *const fn(?*Appearance) callconv(.C) ?*Color) ?*Color {
        return objc.msgSend(self, "colorWithName:dynamicProvider:", ?*Color, .{colorName, dynamicProvider});
    }

    pub fn colorWithDeviceWhiteAlpha(self: *@This(), white: core_foundation.CGFloat, alpha: core_foundation.CGFloat) ?*Color {
        return objc.msgSend(self, "colorWithDeviceWhite:alpha:", ?*Color, .{white, alpha});
    }

    pub fn colorWithDeviceRedGreenBlueAlpha(self: *@This(), red: core_foundation.CGFloat, green: core_foundation.CGFloat, blue: core_foundation.CGFloat, alpha: core_foundation.CGFloat, ) ?*Color {
        return objc.msgSend(self, "colorWithDeviceRed:green:blue:alpha:", ?*Color, .{red, green, blue, alpha, });
    }

    pub fn colorWithDeviceHueSaturationBrightnessAlpha(self: *@This(), hue: core_foundation.CGFloat, saturation: core_foundation.CGFloat, brightness: core_foundation.CGFloat, alpha: core_foundation.CGFloat, ) ?*Color {
        return objc.msgSend(self, "colorWithDeviceHue:saturation:brightness:alpha:", ?*Color, .{hue, saturation, brightness, alpha, });
    }

    pub fn colorWithDeviceCyanMagentaYellowBlackAlpha(self: *@This(), cyan: core_foundation.CGFloat, magenta: core_foundation.CGFloat, yellow: core_foundation.CGFloat, black: core_foundation.CGFloat, alpha: core_foundation.CGFloat, ) ?*Color {
        return objc.msgSend(self, "colorWithDeviceCyan:magenta:yellow:black:alpha:", ?*Color, .{cyan, magenta, yellow, black, alpha, });
    }

    pub fn colorWithCalibratedWhiteAlpha(self: *@This(), white: core_foundation.CGFloat, alpha: core_foundation.CGFloat) ?*Color {
        return objc.msgSend(self, "colorWithCalibratedWhite:alpha:", ?*Color, .{white, alpha});
    }

    pub fn colorWithCalibratedRedGreenBlueAlpha(self: *@This(), red: core_foundation.CGFloat, green: core_foundation.CGFloat, blue: core_foundation.CGFloat, alpha: core_foundation.CGFloat, ) ?*Color {
        return objc.msgSend(self, "colorWithCalibratedRed:green:blue:alpha:", ?*Color, .{red, green, blue, alpha, });
    }

    pub fn colorWithCalibratedHueSaturationBrightnessAlpha(self: *@This(), hue: core_foundation.CGFloat, saturation: core_foundation.CGFloat, brightness: core_foundation.CGFloat, alpha: core_foundation.CGFloat, ) ?*Color {
        return objc.msgSend(self, "colorWithCalibratedHue:saturation:brightness:alpha:", ?*Color, .{hue, saturation, brightness, alpha, });
    }

    pub fn colorWithPatternImage(self: *@This(), image: ?*Image) ?*Color {
        return objc.msgSend(self, "colorWithPatternImage:", ?*Color, .{image});
    }

    pub fn colorUsingType(self: *@This(), @"type": ColorType) ?*Color {
        return objc.msgSend(self, "colorUsingType:", ?*Color, .{@"type"});
    }

    pub fn colorUsingColorSpace(self: *@This(), space: ?*ColorSpace) ?*Color {
        return objc.msgSend(self, "colorUsingColorSpace:", ?*Color, .{space});
    }

    pub fn colorForControlTint(self: *@This(), controlTint: ControlTint) ?*Color {
        return objc.msgSend(self, "colorForControlTint:", ?*Color, .{controlTint});
    }

    pub fn highlightWithLevel(self: *@This(), val: core_foundation.CGFloat) ?*Color {
        return objc.msgSend(self, "highlightWithLevel:", ?*Color, .{val});
    }

    pub fn shadowWithLevel(self: *@This(), val: core_foundation.CGFloat) ?*Color {
        return objc.msgSend(self, "shadowWithLevel:", ?*Color, .{val});
    }

    pub fn colorWithSystemEffect(self: *@This(), systemEffect: ColorSystemEffect) ?*Color {
        return objc.msgSend(self, "colorWithSystemEffect:", ?*Color, .{systemEffect});
    }

    pub fn set(self: *@This()) void {
        return objc.msgSend(self, "set", void, .{});
    }

    pub fn setFill(self: *@This()) void {
        return objc.msgSend(self, "setFill", void, .{});
    }

    pub fn setStroke(self: *@This()) void {
        return objc.msgSend(self, "setStroke", void, .{});
    }

    pub fn blendedColorWithFractionOfColor(self: *@This(), fraction: core_foundation.CGFloat, color: ?*Color) ?*Color {
        return objc.msgSend(self, "blendedColorWithFraction:ofColor:", ?*Color, .{fraction, color});
    }

    pub fn colorWithAlphaComponent(self: *@This(), alpha: core_foundation.CGFloat) ?*Color {
        return objc.msgSend(self, "colorWithAlphaComponent:", ?*Color, .{alpha});
    }

    pub fn getRedGreenBlueAlpha(self: *@This(), red: ?*core_foundation.CGFloat, green: ?*core_foundation.CGFloat, blue: ?*core_foundation.CGFloat, alpha: ?*core_foundation.CGFloat, ) void {
        return objc.msgSend(self, "getRed:green:blue:alpha:", void, .{red, green, blue, alpha, });
    }

    pub fn getHueSaturationBrightnessAlpha(self: *@This(), hue: ?*core_foundation.CGFloat, saturation: ?*core_foundation.CGFloat, brightness: ?*core_foundation.CGFloat, alpha: ?*core_foundation.CGFloat, ) void {
        return objc.msgSend(self, "getHue:saturation:brightness:alpha:", void, .{hue, saturation, brightness, alpha, });
    }

    pub fn getWhiteAlpha(self: *@This(), white: ?*core_foundation.CGFloat, alpha: ?*core_foundation.CGFloat) void {
        return objc.msgSend(self, "getWhite:alpha:", void, .{white, alpha});
    }

    pub fn getCyanMagentaYellowBlackAlpha(self: *@This(), cyan: ?*core_foundation.CGFloat, magenta: ?*core_foundation.CGFloat, yellow: ?*core_foundation.CGFloat, black: ?*core_foundation.CGFloat, alpha: ?*core_foundation.CGFloat, ) void {
        return objc.msgSend(self, "getCyan:magenta:yellow:black:alpha:", void, .{cyan, magenta, yellow, black, alpha, });
    }

    pub fn getComponents(self: *@This(), components: ?*core_foundation.CGFloat) void {
        return objc.msgSend(self, "getComponents:", void, .{components});
    }

    pub fn colorFromPasteboard(self: *@This(), pasteBoard: ?*Pasteboard) ?*Color {
        return objc.msgSend(self, "colorFromPasteboard:", ?*Color, .{pasteBoard});
    }

    pub fn writeToPasteboard(self: *@This(), pasteBoard: ?*Pasteboard) void {
        return objc.msgSend(self, "writeToPasteboard:", void, .{pasteBoard});
    }

    pub fn drawSwatchInRect(self: *@This(), rect: foundation.Rect) void {
        return objc.msgSend(self, "drawSwatchInRect:", void, .{rect});
    }

    pub fn colorWithCGColor(self: *@This(), cgColor: core_graphics.ColorRef) ?*Color {
        return objc.msgSend(self, "colorWithCGColor:", ?*Color, .{cgColor});
    }

    pub fn @"type"(self: *@This()) ColorType {
        return objc.msgSend(self, "type", ColorType, .{});
    }

    pub fn blackColor(self: *@This()) ?*Color {
        return objc.msgSend(self, "blackColor", ?*Color, .{});
    }

    pub fn darkGrayColor(self: *@This()) ?*Color {
        return objc.msgSend(self, "darkGrayColor", ?*Color, .{});
    }

    pub fn lightGrayColor(self: *@This()) ?*Color {
        return objc.msgSend(self, "lightGrayColor", ?*Color, .{});
    }

    pub fn whiteColor(self: *@This()) ?*Color {
        return objc.msgSend(self, "whiteColor", ?*Color, .{});
    }

    pub fn grayColor(self: *@This()) ?*Color {
        return objc.msgSend(self, "grayColor", ?*Color, .{});
    }

    pub fn redColor(self: *@This()) ?*Color {
        return objc.msgSend(self, "redColor", ?*Color, .{});
    }

    pub fn greenColor(self: *@This()) ?*Color {
        return objc.msgSend(self, "greenColor", ?*Color, .{});
    }

    pub fn blueColor(self: *@This()) ?*Color {
        return objc.msgSend(self, "blueColor", ?*Color, .{});
    }

    pub fn cyanColor(self: *@This()) ?*Color {
        return objc.msgSend(self, "cyanColor", ?*Color, .{});
    }

    pub fn yellowColor(self: *@This()) ?*Color {
        return objc.msgSend(self, "yellowColor", ?*Color, .{});
    }

    pub fn magentaColor(self: *@This()) ?*Color {
        return objc.msgSend(self, "magentaColor", ?*Color, .{});
    }

    pub fn orangeColor(self: *@This()) ?*Color {
        return objc.msgSend(self, "orangeColor", ?*Color, .{});
    }

    pub fn purpleColor(self: *@This()) ?*Color {
        return objc.msgSend(self, "purpleColor", ?*Color, .{});
    }

    pub fn brownColor(self: *@This()) ?*Color {
        return objc.msgSend(self, "brownColor", ?*Color, .{});
    }

    pub fn clearColor(self: *@This()) ?*Color {
        return objc.msgSend(self, "clearColor", ?*Color, .{});
    }

    pub fn labelColor(self: *@This()) ?*Color {
        return objc.msgSend(self, "labelColor", ?*Color, .{});
    }

    pub fn secondaryLabelColor(self: *@This()) ?*Color {
        return objc.msgSend(self, "secondaryLabelColor", ?*Color, .{});
    }

    pub fn tertiaryLabelColor(self: *@This()) ?*Color {
        return objc.msgSend(self, "tertiaryLabelColor", ?*Color, .{});
    }

    pub fn quaternaryLabelColor(self: *@This()) ?*Color {
        return objc.msgSend(self, "quaternaryLabelColor", ?*Color, .{});
    }

    pub fn quinaryLabelColor(self: *@This()) ?*Color {
        return objc.msgSend(self, "quinaryLabelColor", ?*Color, .{});
    }

    pub fn linkColor(self: *@This()) ?*Color {
        return objc.msgSend(self, "linkColor", ?*Color, .{});
    }

    pub fn placeholderTextColor(self: *@This()) ?*Color {
        return objc.msgSend(self, "placeholderTextColor", ?*Color, .{});
    }

    pub fn windowFrameTextColor(self: *@This()) ?*Color {
        return objc.msgSend(self, "windowFrameTextColor", ?*Color, .{});
    }

    pub fn selectedMenuItemTextColor(self: *@This()) ?*Color {
        return objc.msgSend(self, "selectedMenuItemTextColor", ?*Color, .{});
    }

    pub fn alternateSelectedControlTextColor(self: *@This()) ?*Color {
        return objc.msgSend(self, "alternateSelectedControlTextColor", ?*Color, .{});
    }

    pub fn headerTextColor(self: *@This()) ?*Color {
        return objc.msgSend(self, "headerTextColor", ?*Color, .{});
    }

    pub fn separatorColor(self: *@This()) ?*Color {
        return objc.msgSend(self, "separatorColor", ?*Color, .{});
    }

    pub fn gridColor(self: *@This()) ?*Color {
        return objc.msgSend(self, "gridColor", ?*Color, .{});
    }

    pub fn windowBackgroundColor(self: *@This()) ?*Color {
        return objc.msgSend(self, "windowBackgroundColor", ?*Color, .{});
    }

    pub fn underPageBackgroundColor(self: *@This()) ?*Color {
        return objc.msgSend(self, "underPageBackgroundColor", ?*Color, .{});
    }

    pub fn controlBackgroundColor(self: *@This()) ?*Color {
        return objc.msgSend(self, "controlBackgroundColor", ?*Color, .{});
    }

    pub fn selectedContentBackgroundColor(self: *@This()) ?*Color {
        return objc.msgSend(self, "selectedContentBackgroundColor", ?*Color, .{});
    }

    pub fn unemphasizedSelectedContentBackgroundColor(self: *@This()) ?*Color {
        return objc.msgSend(self, "unemphasizedSelectedContentBackgroundColor", ?*Color, .{});
    }

    pub fn alternatingContentBackgroundColors(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "alternatingContentBackgroundColors", ?*anyopaque, .{});
    }

    pub fn findHighlightColor(self: *@This()) ?*Color {
        return objc.msgSend(self, "findHighlightColor", ?*Color, .{});
    }

    pub fn textColor(self: *@This()) ?*Color {
        return objc.msgSend(self, "textColor", ?*Color, .{});
    }

    pub fn textBackgroundColor(self: *@This()) ?*Color {
        return objc.msgSend(self, "textBackgroundColor", ?*Color, .{});
    }

    pub fn textInsertionPointColor(self: *@This()) ?*Color {
        return objc.msgSend(self, "textInsertionPointColor", ?*Color, .{});
    }

    pub fn selectedTextColor(self: *@This()) ?*Color {
        return objc.msgSend(self, "selectedTextColor", ?*Color, .{});
    }

    pub fn selectedTextBackgroundColor(self: *@This()) ?*Color {
        return objc.msgSend(self, "selectedTextBackgroundColor", ?*Color, .{});
    }

    pub fn unemphasizedSelectedTextBackgroundColor(self: *@This()) ?*Color {
        return objc.msgSend(self, "unemphasizedSelectedTextBackgroundColor", ?*Color, .{});
    }

    pub fn unemphasizedSelectedTextColor(self: *@This()) ?*Color {
        return objc.msgSend(self, "unemphasizedSelectedTextColor", ?*Color, .{});
    }

    pub fn controlColor(self: *@This()) ?*Color {
        return objc.msgSend(self, "controlColor", ?*Color, .{});
    }

    pub fn controlTextColor(self: *@This()) ?*Color {
        return objc.msgSend(self, "controlTextColor", ?*Color, .{});
    }

    pub fn selectedControlColor(self: *@This()) ?*Color {
        return objc.msgSend(self, "selectedControlColor", ?*Color, .{});
    }

    pub fn selectedControlTextColor(self: *@This()) ?*Color {
        return objc.msgSend(self, "selectedControlTextColor", ?*Color, .{});
    }

    pub fn disabledControlTextColor(self: *@This()) ?*Color {
        return objc.msgSend(self, "disabledControlTextColor", ?*Color, .{});
    }

    pub fn keyboardFocusIndicatorColor(self: *@This()) ?*Color {
        return objc.msgSend(self, "keyboardFocusIndicatorColor", ?*Color, .{});
    }

    pub fn scrubberTexturedBackgroundColor(self: *@This()) ?*Color {
        return objc.msgSend(self, "scrubberTexturedBackgroundColor", ?*Color, .{});
    }

    pub fn systemRedColor(self: *@This()) ?*Color {
        return objc.msgSend(self, "systemRedColor", ?*Color, .{});
    }

    pub fn systemGreenColor(self: *@This()) ?*Color {
        return objc.msgSend(self, "systemGreenColor", ?*Color, .{});
    }

    pub fn systemBlueColor(self: *@This()) ?*Color {
        return objc.msgSend(self, "systemBlueColor", ?*Color, .{});
    }

    pub fn systemOrangeColor(self: *@This()) ?*Color {
        return objc.msgSend(self, "systemOrangeColor", ?*Color, .{});
    }

    pub fn systemYellowColor(self: *@This()) ?*Color {
        return objc.msgSend(self, "systemYellowColor", ?*Color, .{});
    }

    pub fn systemBrownColor(self: *@This()) ?*Color {
        return objc.msgSend(self, "systemBrownColor", ?*Color, .{});
    }

    pub fn systemPinkColor(self: *@This()) ?*Color {
        return objc.msgSend(self, "systemPinkColor", ?*Color, .{});
    }

    pub fn systemPurpleColor(self: *@This()) ?*Color {
        return objc.msgSend(self, "systemPurpleColor", ?*Color, .{});
    }

    pub fn systemGrayColor(self: *@This()) ?*Color {
        return objc.msgSend(self, "systemGrayColor", ?*Color, .{});
    }

    pub fn systemTealColor(self: *@This()) ?*Color {
        return objc.msgSend(self, "systemTealColor", ?*Color, .{});
    }

    pub fn systemIndigoColor(self: *@This()) ?*Color {
        return objc.msgSend(self, "systemIndigoColor", ?*Color, .{});
    }

    pub fn systemMintColor(self: *@This()) ?*Color {
        return objc.msgSend(self, "systemMintColor", ?*Color, .{});
    }

    pub fn systemCyanColor(self: *@This()) ?*Color {
        return objc.msgSend(self, "systemCyanColor", ?*Color, .{});
    }

    pub fn systemFillColor(self: *@This()) ?*Color {
        return objc.msgSend(self, "systemFillColor", ?*Color, .{});
    }

    pub fn secondarySystemFillColor(self: *@This()) ?*Color {
        return objc.msgSend(self, "secondarySystemFillColor", ?*Color, .{});
    }

    pub fn tertiarySystemFillColor(self: *@This()) ?*Color {
        return objc.msgSend(self, "tertiarySystemFillColor", ?*Color, .{});
    }

    pub fn quaternarySystemFillColor(self: *@This()) ?*Color {
        return objc.msgSend(self, "quaternarySystemFillColor", ?*Color, .{});
    }

    pub fn quinarySystemFillColor(self: *@This()) ?*Color {
        return objc.msgSend(self, "quinarySystemFillColor", ?*Color, .{});
    }

    pub fn controlAccentColor(self: *@This()) ?*Color {
        return objc.msgSend(self, "controlAccentColor", ?*Color, .{});
    }

    pub fn currentControlTint(self: *@This()) ControlTint {
        return objc.msgSend(self, "currentControlTint", ControlTint, .{});
    }

    pub fn highlightColor(self: *@This()) ?*Color {
        return objc.msgSend(self, "highlightColor", ?*Color, .{});
    }

    pub fn shadowColor(self: *@This()) ?*Color {
        return objc.msgSend(self, "shadowColor", ?*Color, .{});
    }

    pub fn catalogNameComponent(self: *@This()) ColorListName {
        return objc.msgSend(self, "catalogNameComponent", ColorListName, .{});
    }

    pub fn colorNameComponent(self: *@This()) ColorName {
        return objc.msgSend(self, "colorNameComponent", ColorName, .{});
    }

    pub fn localizedCatalogNameComponent(self: *@This()) ?*String {
        return objc.msgSend(self, "localizedCatalogNameComponent", ?*String, .{});
    }

    pub fn localizedColorNameComponent(self: *@This()) ?*String {
        return objc.msgSend(self, "localizedColorNameComponent", ?*String, .{});
    }

    pub fn redComponent(self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(self, "redComponent", core_foundation.CGFloat, .{});
    }

    pub fn greenComponent(self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(self, "greenComponent", core_foundation.CGFloat, .{});
    }

    pub fn blueComponent(self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(self, "blueComponent", core_foundation.CGFloat, .{});
    }

    pub fn hueComponent(self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(self, "hueComponent", core_foundation.CGFloat, .{});
    }

    pub fn saturationComponent(self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(self, "saturationComponent", core_foundation.CGFloat, .{});
    }

    pub fn brightnessComponent(self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(self, "brightnessComponent", core_foundation.CGFloat, .{});
    }

    pub fn whiteComponent(self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(self, "whiteComponent", core_foundation.CGFloat, .{});
    }

    pub fn cyanComponent(self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(self, "cyanComponent", core_foundation.CGFloat, .{});
    }

    pub fn magentaComponent(self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(self, "magentaComponent", core_foundation.CGFloat, .{});
    }

    pub fn yellowComponent(self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(self, "yellowComponent", core_foundation.CGFloat, .{});
    }

    pub fn blackComponent(self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(self, "blackComponent", core_foundation.CGFloat, .{});
    }

    pub fn colorSpace(self: *@This()) ?*ColorSpace {
        return objc.msgSend(self, "colorSpace", ?*ColorSpace, .{});
    }

    pub fn numberOfComponents(self: *@This()) objc.NSInteger {
        return objc.msgSend(self, "numberOfComponents", objc.NSInteger, .{});
    }

    pub fn patternImage(self: *@This()) ?*Image {
        return objc.msgSend(self, "patternImage", ?*Image, .{});
    }

    pub fn alphaComponent(self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(self, "alphaComponent", core_foundation.CGFloat, .{});
    }

    pub fn CGColor(self: *@This()) core_graphics.ColorRef {
        return objc.msgSend(self, "CGColor", core_graphics.ColorRef, .{});
    }

    pub fn ignoresAlpha(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "ignoresAlpha", objc.BOOL, .{});
    }

    pub fn setIgnoresAlpha(self: *@This(), ignoresAlpha: objc.BOOL) void {
        return objc.msgSend(self, "setIgnoresAlpha:", void, .{ignoresAlpha});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSAccessibilityColor?language=objc
pub const AccessibilityColor = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn accessibilityName(self: *@This()) ?*String {
        return objc.msgSend(self, "accessibilityName", ?*String, .{});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSActionCell?language=objc
pub const ActionCell = opaque {
    pub const InternalInfo = objc.ExternalClass("NSActionCell", @This(), Cell, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn target(self: *@This()) *objc.Id {
        return objc.msgSend(self, "target", *objc.Id, .{});
    }

    pub fn setTarget(self: *@This(), target: *objc.Id) void {
        return objc.msgSend(self, "setTarget:", void, .{target});
    }

    pub fn action(self: *@This()) *objc.SEL {
        return objc.msgSend(self, "action", *objc.SEL, .{});
    }

    pub fn setAction(self: *@This(), action: *objc.SEL) void {
        return objc.msgSend(self, "setAction:", void, .{action});
    }

    pub fn tag(self: *@This()) objc.NSInteger {
        return objc.msgSend(self, "tag", objc.NSInteger, .{});
    }

    pub fn setTag(self: *@This(), tag: objc.NSInteger) void {
        return objc.msgSend(self, "setTag:", void, .{tag});
    }

};

pub const HelpBookName = ?*String;

pub const HelpAnchorName = ?*String;

pub const HelpManagerContextHelpKey = ?*String;

/// https://developer.apple.com/documentation/AppKit/NSHelpManager?language=objc
pub const HelpManager = opaque {
    pub const InternalInfo = objc.ExternalClass("NSHelpManager", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn setContextHelpForObject(self: *@This(), attrString: ?*AttributedString, object: *objc.Id) void {
        return objc.msgSend(self, "setContextHelp:forObject:", void, .{attrString, object});
    }

    pub fn removeContextHelpForObject(self: *@This(), object: *objc.Id) void {
        return objc.msgSend(self, "removeContextHelpForObject:", void, .{object});
    }

    pub fn contextHelpForObject(self: *@This(), object: *objc.Id) ?*AttributedString {
        return objc.msgSend(self, "contextHelpForObject:", ?*AttributedString, .{object});
    }

    pub fn showContextHelpForObjectLocationHint(self: *@This(), object: *objc.Id, pt: foundation.Point) objc.BOOL {
        return objc.msgSend(self, "showContextHelpForObject:locationHint:", objc.BOOL, .{object, pt});
    }

    pub fn openHelpAnchorInBook(self: *@This(), anchor: HelpAnchorName, book: HelpBookName) void {
        return objc.msgSend(self, "openHelpAnchor:inBook:", void, .{anchor, book});
    }

    pub fn findStringInBook(self: *@This(), query: ?*String, book: HelpBookName) void {
        return objc.msgSend(self, "findString:inBook:", void, .{query, book});
    }

    pub fn registerBooksInBundle(self: *@This(), bundle: ?*Bundle) objc.BOOL {
        return objc.msgSend(self, "registerBooksInBundle:", objc.BOOL, .{bundle});
    }

    pub fn sharedHelpManager(self: *@This()) ?*HelpManager {
        return objc.msgSend(self, "sharedHelpManager", ?*HelpManager, .{});
    }

    pub fn isContextHelpModeActive(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isContextHelpModeActive", objc.BOOL, .{});
    }

    pub fn setContextHelpModeActive(self: *@This(), contextHelpModeActive: objc.BOOL) void {
        return objc.msgSend(self, "setContextHelpModeActive:", void, .{contextHelpModeActive});
    }

};

pub const AlertStyle = enum(objc.NSUInteger) {
    Warning = 0,
    Informational = 1,
    Critical = 2,
};

/// https://developer.apple.com/documentation/AppKit/NSAlert?language=objc
pub const Alert = opaque {
    pub const InternalInfo = objc.ExternalClass("NSAlert", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn alertWithError(self: *@This(), @"error": ?*Error) ?*Alert {
        return objc.msgSend(self, "alertWithError:", ?*Alert, .{@"error"});
    }

    pub fn addButtonWithTitle(self: *@This(), title: ?*String) ?*Button {
        return objc.msgSend(self, "addButtonWithTitle:", ?*Button, .{title});
    }

    pub fn layout(self: *@This()) void {
        return objc.msgSend(self, "layout", void, .{});
    }

    pub fn runModal(self: *@This()) ModalResponse {
        return objc.msgSend(self, "runModal", ModalResponse, .{});
    }

    pub fn beginSheetModalForWindowCompletionHandler(self: *@This(), sheetWindow: ?*Window, handler: *const fn(ModalResponse) callconv(.C) void) void {
        return objc.msgSend(self, "beginSheetModalForWindow:completionHandler:", void, .{sheetWindow, handler});
    }

    pub fn messageText(self: *@This()) ?*String {
        return objc.msgSend(self, "messageText", ?*String, .{});
    }

    pub fn setMessageText(self: *@This(), messageText: ?*String) void {
        return objc.msgSend(self, "setMessageText:", void, .{messageText});
    }

    pub fn informativeText(self: *@This()) ?*String {
        return objc.msgSend(self, "informativeText", ?*String, .{});
    }

    pub fn setInformativeText(self: *@This(), informativeText: ?*String) void {
        return objc.msgSend(self, "setInformativeText:", void, .{informativeText});
    }

    pub fn icon(self: *@This()) ?*Image {
        return objc.msgSend(self, "icon", ?*Image, .{});
    }

    pub fn setIcon(self: *@This(), icon: ?*Image) void {
        return objc.msgSend(self, "setIcon:", void, .{icon});
    }

    pub fn buttons(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "buttons", ?*anyopaque, .{});
    }

    pub fn alertStyle(self: *@This()) AlertStyle {
        return objc.msgSend(self, "alertStyle", AlertStyle, .{});
    }

    pub fn setAlertStyle(self: *@This(), alertStyle: AlertStyle) void {
        return objc.msgSend(self, "setAlertStyle:", void, .{alertStyle});
    }

    pub fn showsHelp(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "showsHelp", objc.BOOL, .{});
    }

    pub fn setShowsHelp(self: *@This(), showsHelp: objc.BOOL) void {
        return objc.msgSend(self, "setShowsHelp:", void, .{showsHelp});
    }

    pub fn helpAnchor(self: *@This()) HelpAnchorName {
        return objc.msgSend(self, "helpAnchor", HelpAnchorName, .{});
    }

    pub fn setHelpAnchor(self: *@This(), helpAnchor: HelpAnchorName) void {
        return objc.msgSend(self, "setHelpAnchor:", void, .{helpAnchor});
    }

    pub fn delegate(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "delegate", ?*anyopaque, .{});
    }

    pub fn setDelegate(self: *@This(), delegate: ?*anyopaque) void {
        return objc.msgSend(self, "setDelegate:", void, .{delegate});
    }

    pub fn accessoryView(self: *@This()) ?*View {
        return objc.msgSend(self, "accessoryView", ?*View, .{});
    }

    pub fn setAccessoryView(self: *@This(), accessoryView: ?*View) void {
        return objc.msgSend(self, "setAccessoryView:", void, .{accessoryView});
    }

    pub fn showsSuppressionButton(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "showsSuppressionButton", objc.BOOL, .{});
    }

    pub fn setShowsSuppressionButton(self: *@This(), showsSuppressionButton: objc.BOOL) void {
        return objc.msgSend(self, "setShowsSuppressionButton:", void, .{showsSuppressionButton});
    }

    pub fn suppressionButton(self: *@This()) ?*Button {
        return objc.msgSend(self, "suppressionButton", ?*Button, .{});
    }

    pub fn window(self: *@This()) ?*Window {
        return objc.msgSend(self, "window", ?*Window, .{});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSAlertDelegate?language=objc
pub const AlertDelegate = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{objc.NSObject, });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn alertShowHelp(self: *@This(), alert: ?*Alert) objc.BOOL {
        return objc.msgSend(self, "alertShowHelp:", objc.BOOL, .{alert});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSAnimationContext?language=objc
pub const AnimationContext = opaque {
    pub const InternalInfo = objc.ExternalClass("NSAnimationContext", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn runAnimationGroupCompletionHandler(self: *@This(), changes: *const fn(?*AnimationContext) callconv(.C) void, completionHandler: *const fn() callconv(.C) void) void {
        return objc.msgSend(self, "runAnimationGroup:completionHandler:", void, .{changes, completionHandler});
    }

    pub fn runAnimationGroup(self: *@This(), changes: *const fn(?*AnimationContext) callconv(.C) void) void {
        return objc.msgSend(self, "runAnimationGroup:", void, .{changes});
    }

    pub fn beginGrouping(self: *@This()) void {
        return objc.msgSend(self, "beginGrouping", void, .{});
    }

    pub fn endGrouping(self: *@This()) void {
        return objc.msgSend(self, "endGrouping", void, .{});
    }

    pub fn currentContext(self: *@This()) ?*AnimationContext {
        return objc.msgSend(self, "currentContext", ?*AnimationContext, .{});
    }

    pub fn duration(self: *@This()) foundation.TimeInterval {
        return objc.msgSend(self, "duration", foundation.TimeInterval, .{});
    }

    pub fn setDuration(self: *@This(), duration: foundation.TimeInterval) void {
        return objc.msgSend(self, "setDuration:", void, .{duration});
    }

    pub fn timingFunction(self: *@This()) ?*CAMediaTimingFunction {
        return objc.msgSend(self, "timingFunction", ?*CAMediaTimingFunction, .{});
    }

    pub fn setTimingFunction(self: *@This(), timingFunction: ?*CAMediaTimingFunction) void {
        return objc.msgSend(self, "setTimingFunction:", void, .{timingFunction});
    }

    pub fn completionHandler(self: *@This()) *const fn() callconv(.C) void {
        return objc.msgSend(self, "completionHandler", *const fn() callconv(.C) void, .{});
    }

    pub fn setCompletionHandler(self: *@This(), completionHandler: *const fn() callconv(.C) void) void {
        return objc.msgSend(self, "setCompletionHandler:", void, .{completionHandler});
    }

    pub fn allowsImplicitAnimation(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "allowsImplicitAnimation", objc.BOOL, .{});
    }

    pub fn setAllowsImplicitAnimation(self: *@This(), allowsImplicitAnimation: objc.BOOL) void {
        return objc.msgSend(self, "setAllowsImplicitAnimation:", void, .{allowsImplicitAnimation});
    }

};

pub const TitlePosition = enum(objc.NSUInteger) {
    NoTitle = 0,
    AboveTop = 1,
    AtTop = 2,
    BelowTop = 3,
    AboveBottom = 4,
    AtBottom = 5,
    BelowBottom = 6,
};

pub const BoxType = enum(objc.NSUInteger) {
    Primary = 0,
    Separator = 2,
    Custom = 4,
};

/// https://developer.apple.com/documentation/AppKit/NSBox?language=objc
pub const Box = opaque {
    pub const InternalInfo = objc.ExternalClass("NSBox", @This(), View, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn sizeToFit(self: *@This()) void {
        return objc.msgSend(self, "sizeToFit", void, .{});
    }

    pub fn setFrameFromContentFrame(self: *@This(), contentFrame: foundation.Rect) void {
        return objc.msgSend(self, "setFrameFromContentFrame:", void, .{contentFrame});
    }

    pub fn boxType(self: *@This()) BoxType {
        return objc.msgSend(self, "boxType", BoxType, .{});
    }

    pub fn setBoxType(self: *@This(), boxType: BoxType) void {
        return objc.msgSend(self, "setBoxType:", void, .{boxType});
    }

    pub fn titlePosition(self: *@This()) TitlePosition {
        return objc.msgSend(self, "titlePosition", TitlePosition, .{});
    }

    pub fn setTitlePosition(self: *@This(), titlePosition: TitlePosition) void {
        return objc.msgSend(self, "setTitlePosition:", void, .{titlePosition});
    }

    pub fn title(self: *@This()) ?*String {
        return objc.msgSend(self, "title", ?*String, .{});
    }

    pub fn setTitle(self: *@This(), title: ?*String) void {
        return objc.msgSend(self, "setTitle:", void, .{title});
    }

    pub fn titleFont(self: *@This()) ?*Font {
        return objc.msgSend(self, "titleFont", ?*Font, .{});
    }

    pub fn setTitleFont(self: *@This(), titleFont: ?*Font) void {
        return objc.msgSend(self, "setTitleFont:", void, .{titleFont});
    }

    pub fn borderRect(self: *@This()) foundation.Rect {
        return objc.msgSend(self, "borderRect", foundation.Rect, .{});
    }

    pub fn titleRect(self: *@This()) foundation.Rect {
        return objc.msgSend(self, "titleRect", foundation.Rect, .{});
    }

    pub fn titleCell(self: *@This()) *objc.Id {
        return objc.msgSend(self, "titleCell", *objc.Id, .{});
    }

    pub fn contentViewMargins(self: *@This()) foundation.Size {
        return objc.msgSend(self, "contentViewMargins", foundation.Size, .{});
    }

    pub fn setContentViewMargins(self: *@This(), contentViewMargins: foundation.Size) void {
        return objc.msgSend(self, "setContentViewMargins:", void, .{contentViewMargins});
    }

    pub fn contentView(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "contentView", ?*anyopaque, .{});
    }

    pub fn setContentView(self: *@This(), contentView: ?*anyopaque) void {
        return objc.msgSend(self, "setContentView:", void, .{contentView});
    }

    pub fn isTransparent(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isTransparent", objc.BOOL, .{});
    }

    pub fn setTransparent(self: *@This(), transparent: objc.BOOL) void {
        return objc.msgSend(self, "setTransparent:", void, .{transparent});
    }

    pub fn borderWidth(self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(self, "borderWidth", core_foundation.CGFloat, .{});
    }

    pub fn setBorderWidth(self: *@This(), borderWidth: core_foundation.CGFloat) void {
        return objc.msgSend(self, "setBorderWidth:", void, .{borderWidth});
    }

    pub fn cornerRadius(self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(self, "cornerRadius", core_foundation.CGFloat, .{});
    }

    pub fn setCornerRadius(self: *@This(), cornerRadius: core_foundation.CGFloat) void {
        return objc.msgSend(self, "setCornerRadius:", void, .{cornerRadius});
    }

    pub fn borderColor(self: *@This()) ?*Color {
        return objc.msgSend(self, "borderColor", ?*Color, .{});
    }

    pub fn setBorderColor(self: *@This(), borderColor: ?*Color) void {
        return objc.msgSend(self, "setBorderColor:", void, .{borderColor});
    }

    pub fn fillColor(self: *@This()) ?*Color {
        return objc.msgSend(self, "fillColor", ?*Color, .{});
    }

    pub fn setFillColor(self: *@This(), fillColor: ?*Color) void {
        return objc.msgSend(self, "setFillColor:", void, .{fillColor});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSControl?language=objc
pub const Control = opaque {
    pub const InternalInfo = objc.ExternalClass("NSControl", @This(), View, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn initWithFrame(self: *@This(), frameRect: foundation.Rect) *@This() {
        return objc.msgSend(self, "initWithFrame:", *@This(), .{frameRect});
    }

    pub fn initWithCoder(self: *@This(), coder: ?*foundation.Coder) *@This() {
        return objc.msgSend(self, "initWithCoder:", *@This(), .{coder});
    }

    pub fn sizeThatFits(self: *@This(), size: foundation.Size) foundation.Size {
        return objc.msgSend(self, "sizeThatFits:", foundation.Size, .{size});
    }

    pub fn sizeToFit(self: *@This()) void {
        return objc.msgSend(self, "sizeToFit", void, .{});
    }

    pub fn sendActionOn(self: *@This(), mask: EventMask) objc.NSInteger {
        return objc.msgSend(self, "sendActionOn:", objc.NSInteger, .{mask});
    }

    pub fn sendActionTo(self: *@This(), action: *objc.SEL, target: *objc.Id) objc.BOOL {
        return objc.msgSend(self, "sendAction:to:", objc.BOOL, .{action, target});
    }

    pub fn takeIntValueFrom(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "takeIntValueFrom:", void, .{sender});
    }

    pub fn takeFloatValueFrom(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "takeFloatValueFrom:", void, .{sender});
    }

    pub fn takeDoubleValueFrom(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "takeDoubleValueFrom:", void, .{sender});
    }

    pub fn takeStringValueFrom(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "takeStringValueFrom:", void, .{sender});
    }

    pub fn takeObjectValueFrom(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "takeObjectValueFrom:", void, .{sender});
    }

    pub fn takeIntegerValueFrom(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "takeIntegerValueFrom:", void, .{sender});
    }

    pub fn mouseDown(self: *@This(), event: ?*Event) void {
        return objc.msgSend(self, "mouseDown:", void, .{event});
    }

    pub fn performClick(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "performClick:", void, .{sender});
    }

    pub fn expansionFrameWithFrame(self: *@This(), contentFrame: foundation.Rect) foundation.Rect {
        return objc.msgSend(self, "expansionFrameWithFrame:", foundation.Rect, .{contentFrame});
    }

    pub fn drawWithExpansionFrameInView(self: *@This(), contentFrame: foundation.Rect, view: ?*View) void {
        return objc.msgSend(self, "drawWithExpansionFrame:inView:", void, .{contentFrame, view});
    }

    pub fn target(self: *@This()) *objc.Id {
        return objc.msgSend(self, "target", *objc.Id, .{});
    }

    pub fn setTarget(self: *@This(), target: *objc.Id) void {
        return objc.msgSend(self, "setTarget:", void, .{target});
    }

    pub fn action(self: *@This()) *objc.SEL {
        return objc.msgSend(self, "action", *objc.SEL, .{});
    }

    pub fn setAction(self: *@This(), action: *objc.SEL) void {
        return objc.msgSend(self, "setAction:", void, .{action});
    }

    pub fn tag(self: *@This()) objc.NSInteger {
        return objc.msgSend(self, "tag", objc.NSInteger, .{});
    }

    pub fn setTag(self: *@This(), tag: objc.NSInteger) void {
        return objc.msgSend(self, "setTag:", void, .{tag});
    }

    pub fn ignoresMultiClick(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "ignoresMultiClick", objc.BOOL, .{});
    }

    pub fn setIgnoresMultiClick(self: *@This(), ignoresMultiClick: objc.BOOL) void {
        return objc.msgSend(self, "setIgnoresMultiClick:", void, .{ignoresMultiClick});
    }

    pub fn isContinuous(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isContinuous", objc.BOOL, .{});
    }

    pub fn setContinuous(self: *@This(), continuous: objc.BOOL) void {
        return objc.msgSend(self, "setContinuous:", void, .{continuous});
    }

    pub fn isEnabled(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isEnabled", objc.BOOL, .{});
    }

    pub fn setEnabled(self: *@This(), enabled: objc.BOOL) void {
        return objc.msgSend(self, "setEnabled:", void, .{enabled});
    }

    pub fn refusesFirstResponder(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "refusesFirstResponder", objc.BOOL, .{});
    }

    pub fn setRefusesFirstResponder(self: *@This(), refusesFirstResponder: objc.BOOL) void {
        return objc.msgSend(self, "setRefusesFirstResponder:", void, .{refusesFirstResponder});
    }

    pub fn isHighlighted(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isHighlighted", objc.BOOL, .{});
    }

    pub fn setHighlighted(self: *@This(), highlighted: objc.BOOL) void {
        return objc.msgSend(self, "setHighlighted:", void, .{highlighted});
    }

    pub fn controlSize(self: *@This()) ControlSize {
        return objc.msgSend(self, "controlSize", ControlSize, .{});
    }

    pub fn setControlSize(self: *@This(), controlSize: ControlSize) void {
        return objc.msgSend(self, "setControlSize:", void, .{controlSize});
    }

    pub fn formatter(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "formatter", ?*anyopaque, .{});
    }

    pub fn setFormatter(self: *@This(), formatter: ?*anyopaque) void {
        return objc.msgSend(self, "setFormatter:", void, .{formatter});
    }

    pub fn objectValue(self: *@This()) *objc.Id {
        return objc.msgSend(self, "objectValue", *objc.Id, .{});
    }

    pub fn setObjectValue(self: *@This(), objectValue: *objc.Id) void {
        return objc.msgSend(self, "setObjectValue:", void, .{objectValue});
    }

    pub fn stringValue(self: *@This()) ?*String {
        return objc.msgSend(self, "stringValue", ?*String, .{});
    }

    pub fn setStringValue(self: *@This(), stringValue: ?*String) void {
        return objc.msgSend(self, "setStringValue:", void, .{stringValue});
    }

    pub fn attributedStringValue(self: *@This()) ?*AttributedString {
        return objc.msgSend(self, "attributedStringValue", ?*AttributedString, .{});
    }

    pub fn setAttributedStringValue(self: *@This(), attributedStringValue: ?*AttributedString) void {
        return objc.msgSend(self, "setAttributedStringValue:", void, .{attributedStringValue});
    }

    pub fn intValue(self: *@This()) i32 {
        return objc.msgSend(self, "intValue", i32, .{});
    }

    pub fn setIntValue(self: *@This(), intValue: i32) void {
        return objc.msgSend(self, "setIntValue:", void, .{intValue});
    }

    pub fn integerValue(self: *@This()) objc.NSInteger {
        return objc.msgSend(self, "integerValue", objc.NSInteger, .{});
    }

    pub fn setIntegerValue(self: *@This(), integerValue: objc.NSInteger) void {
        return objc.msgSend(self, "setIntegerValue:", void, .{integerValue});
    }

    pub fn floatValue(self: *@This()) f32 {
        return objc.msgSend(self, "floatValue", f32, .{});
    }

    pub fn setFloatValue(self: *@This(), floatValue: f32) void {
        return objc.msgSend(self, "setFloatValue:", void, .{floatValue});
    }

    pub fn doubleValue(self: *@This()) f64 {
        return objc.msgSend(self, "doubleValue", f64, .{});
    }

    pub fn setDoubleValue(self: *@This(), doubleValue: f64) void {
        return objc.msgSend(self, "setDoubleValue:", void, .{doubleValue});
    }

    pub fn font(self: *@This()) ?*Font {
        return objc.msgSend(self, "font", ?*Font, .{});
    }

    pub fn setFont(self: *@This(), font: ?*Font) void {
        return objc.msgSend(self, "setFont:", void, .{font});
    }

    pub fn usesSingleLineMode(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "usesSingleLineMode", objc.BOOL, .{});
    }

    pub fn setUsesSingleLineMode(self: *@This(), usesSingleLineMode: objc.BOOL) void {
        return objc.msgSend(self, "setUsesSingleLineMode:", void, .{usesSingleLineMode});
    }

    pub fn lineBreakMode(self: *@This()) LineBreakMode {
        return objc.msgSend(self, "lineBreakMode", LineBreakMode, .{});
    }

    pub fn setLineBreakMode(self: *@This(), lineBreakMode: LineBreakMode) void {
        return objc.msgSend(self, "setLineBreakMode:", void, .{lineBreakMode});
    }

    pub fn alignment(self: *@This()) TextAlignment {
        return objc.msgSend(self, "alignment", TextAlignment, .{});
    }

    pub fn setAlignment(self: *@This(), alignment: TextAlignment) void {
        return objc.msgSend(self, "setAlignment:", void, .{alignment});
    }

    pub fn baseWritingDirection(self: *@This()) WritingDirection {
        return objc.msgSend(self, "baseWritingDirection", WritingDirection, .{});
    }

    pub fn setBaseWritingDirection(self: *@This(), baseWritingDirection: WritingDirection) void {
        return objc.msgSend(self, "setBaseWritingDirection:", void, .{baseWritingDirection});
    }

    pub fn allowsExpansionToolTips(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "allowsExpansionToolTips", objc.BOOL, .{});
    }

    pub fn setAllowsExpansionToolTips(self: *@This(), allowsExpansionToolTips: objc.BOOL) void {
        return objc.msgSend(self, "setAllowsExpansionToolTips:", void, .{allowsExpansionToolTips});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSControlTextEditingDelegate?language=objc
pub const ControlTextEditingDelegate = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{objc.NSObject, });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn controlTextDidBeginEditing(self: *@This(), obj: ?*Notification) void {
        return objc.msgSend(self, "controlTextDidBeginEditing:", void, .{obj});
    }

    pub fn controlTextDidEndEditing(self: *@This(), obj: ?*Notification) void {
        return objc.msgSend(self, "controlTextDidEndEditing:", void, .{obj});
    }

    pub fn controlTextDidChange(self: *@This(), obj: ?*Notification) void {
        return objc.msgSend(self, "controlTextDidChange:", void, .{obj});
    }

    pub fn controlTextShouldBeginEditing(self: *@This(), control: ?*Control, fieldEditor: ?*Text) objc.BOOL {
        return objc.msgSend(self, "control:textShouldBeginEditing:", objc.BOOL, .{control, fieldEditor});
    }

    pub fn controlTextShouldEndEditing(self: *@This(), control: ?*Control, fieldEditor: ?*Text) objc.BOOL {
        return objc.msgSend(self, "control:textShouldEndEditing:", objc.BOOL, .{control, fieldEditor});
    }

    pub fn controlDidFailToFormatStringErrorDescription(self: *@This(), control: ?*Control, string: ?*String, @"error": ?*String) objc.BOOL {
        return objc.msgSend(self, "control:didFailToFormatString:errorDescription:", objc.BOOL, .{control, string, @"error"});
    }

    pub fn controlDidFailToValidatePartialStringErrorDescription(self: *@This(), control: ?*Control, string: ?*String, @"error": ?*String) void {
        return objc.msgSend(self, "control:didFailToValidatePartialString:errorDescription:", void, .{control, string, @"error"});
    }

    pub fn controlIsValidObject(self: *@This(), control: ?*Control, obj: *objc.Id) objc.BOOL {
        return objc.msgSend(self, "control:isValidObject:", objc.BOOL, .{control, obj});
    }

    pub fn controlTextViewDoCommandBySelector(self: *@This(), control: ?*Control, textView: ?*TextView, commandSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(self, "control:textView:doCommandBySelector:", objc.BOOL, .{control, textView, commandSelector});
    }

    pub fn controlTextViewCompletionsForPartialWordRangeIndexOfSelectedItem(self: *@This(), control: ?*Control, textView: ?*TextView, words: ?*anyopaque, charRange: foundation.Range, index: ?*objc.NSInteger, ) ?*anyopaque {
        return objc.msgSend(self, "control:textView:completions:forPartialWordRange:indexOfSelectedItem:", ?*anyopaque, .{control, textView, words, charRange, index, });
    }

};

pub const ButtonType = enum(objc.NSUInteger) {
    MomentaryLight = 0,
    PushOnPushOff = 1,
    Toggle = 2,
    Switch = 3,
    Radio = 4,
    MomentaryChange = 5,
    OnOff = 6,
    MomentaryPushIn = 7,
    Accelerator = 8,
    MultiLevelAccelerator = 9,
};

pub const BezelStyle = enum(objc.NSUInteger) {
    Automatic = 0,
    Push = 1,
    FlexiblePush = 2,
    Disclosure = 5,
    Circular = 7,
    HelpButton = 9,
    SmallSquare = 10,
    Toolbar = 11,
    AccessoryBarAction = 12,
    AccessoryBar = 13,
    PushDisclosure = 14,
    Badge = 15,
    ShadowlessSquare = 6,
    TexturedSquare = 8,
    Rounded = 1,
    RegularSquare = 2,
    TexturedRounded = 11,
    RoundRect = 12,
    Recessed = 13,
    RoundedDisclosure = 14,
    Inline = 15,
};

/// https://developer.apple.com/documentation/AppKit/NSButtonCell?language=objc
pub const ButtonCell = opaque {
    pub const InternalInfo = objc.ExternalClass("NSButtonCell", @This(), ActionCell, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn initTextCell(self: *@This(), string: ?*String) *@This() {
        return objc.msgSend(self, "initTextCell:", *@This(), .{string});
    }

    pub fn initImageCell(self: *@This(), image: ?*Image) *@This() {
        return objc.msgSend(self, "initImageCell:", *@This(), .{image});
    }

    pub fn initWithCoder(self: *@This(), coder: ?*foundation.Coder) *@This() {
        return objc.msgSend(self, "initWithCoder:", *@This(), .{coder});
    }

    pub fn setButtonType(self: *@This(), @"type": ButtonType) void {
        return objc.msgSend(self, "setButtonType:", void, .{@"type"});
    }

    pub fn setPeriodicDelayInterval(self: *@This(), delay: f32, interval: f32) void {
        return objc.msgSend(self, "setPeriodicDelay:interval:", void, .{delay, interval});
    }

    pub fn getPeriodicDelayInterval(self: *@This(), delay: ?*f32, interval: ?*f32) void {
        return objc.msgSend(self, "getPeriodicDelay:interval:", void, .{delay, interval});
    }

    pub fn performClick(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "performClick:", void, .{sender});
    }

    pub fn mouseEntered(self: *@This(), event: ?*Event) void {
        return objc.msgSend(self, "mouseEntered:", void, .{event});
    }

    pub fn mouseExited(self: *@This(), event: ?*Event) void {
        return objc.msgSend(self, "mouseExited:", void, .{event});
    }

    pub fn drawBezelWithFrameInView(self: *@This(), frame: foundation.Rect, controlView: ?*View) void {
        return objc.msgSend(self, "drawBezelWithFrame:inView:", void, .{frame, controlView});
    }

    pub fn drawImageWithFrameInView(self: *@This(), image: ?*Image, frame: foundation.Rect, controlView: ?*View) void {
        return objc.msgSend(self, "drawImage:withFrame:inView:", void, .{image, frame, controlView});
    }

    pub fn drawTitleWithFrameInView(self: *@This(), title: ?*AttributedString, frame: foundation.Rect, controlView: ?*View) foundation.Rect {
        return objc.msgSend(self, "drawTitle:withFrame:inView:", foundation.Rect, .{title, frame, controlView});
    }

    pub fn bezelStyle(self: *@This()) BezelStyle {
        return objc.msgSend(self, "bezelStyle", BezelStyle, .{});
    }

    pub fn setBezelStyle(self: *@This(), bezelStyle: BezelStyle) void {
        return objc.msgSend(self, "setBezelStyle:", void, .{bezelStyle});
    }

    pub fn highlightsBy(self: *@This()) CellStyleMask {
        return objc.msgSend(self, "highlightsBy", CellStyleMask, .{});
    }

    pub fn setHighlightsBy(self: *@This(), highlightsBy: CellStyleMask) void {
        return objc.msgSend(self, "setHighlightsBy:", void, .{highlightsBy});
    }

    pub fn showsStateBy(self: *@This()) CellStyleMask {
        return objc.msgSend(self, "showsStateBy", CellStyleMask, .{});
    }

    pub fn setShowsStateBy(self: *@This(), showsStateBy: CellStyleMask) void {
        return objc.msgSend(self, "setShowsStateBy:", void, .{showsStateBy});
    }

    pub fn title(self: *@This()) ?*String {
        return objc.msgSend(self, "title", ?*String, .{});
    }

    pub fn setTitle(self: *@This(), title: ?*String) void {
        return objc.msgSend(self, "setTitle:", void, .{title});
    }

    pub fn attributedTitle(self: *@This()) ?*AttributedString {
        return objc.msgSend(self, "attributedTitle", ?*AttributedString, .{});
    }

    pub fn setAttributedTitle(self: *@This(), attributedTitle: ?*AttributedString) void {
        return objc.msgSend(self, "setAttributedTitle:", void, .{attributedTitle});
    }

    pub fn alternateTitle(self: *@This()) ?*String {
        return objc.msgSend(self, "alternateTitle", ?*String, .{});
    }

    pub fn setAlternateTitle(self: *@This(), alternateTitle: ?*String) void {
        return objc.msgSend(self, "setAlternateTitle:", void, .{alternateTitle});
    }

    pub fn attributedAlternateTitle(self: *@This()) ?*AttributedString {
        return objc.msgSend(self, "attributedAlternateTitle", ?*AttributedString, .{});
    }

    pub fn setAttributedAlternateTitle(self: *@This(), attributedAlternateTitle: ?*AttributedString) void {
        return objc.msgSend(self, "setAttributedAlternateTitle:", void, .{attributedAlternateTitle});
    }

    pub fn alternateImage(self: *@This()) ?*Image {
        return objc.msgSend(self, "alternateImage", ?*Image, .{});
    }

    pub fn setAlternateImage(self: *@This(), alternateImage: ?*Image) void {
        return objc.msgSend(self, "setAlternateImage:", void, .{alternateImage});
    }

    pub fn imagePosition(self: *@This()) CellImagePosition {
        return objc.msgSend(self, "imagePosition", CellImagePosition, .{});
    }

    pub fn setImagePosition(self: *@This(), imagePosition: CellImagePosition) void {
        return objc.msgSend(self, "setImagePosition:", void, .{imagePosition});
    }

    pub fn imageScaling(self: *@This()) ImageScaling {
        return objc.msgSend(self, "imageScaling", ImageScaling, .{});
    }

    pub fn setImageScaling(self: *@This(), imageScaling: ImageScaling) void {
        return objc.msgSend(self, "setImageScaling:", void, .{imageScaling});
    }

    pub fn keyEquivalent(self: *@This()) ?*String {
        return objc.msgSend(self, "keyEquivalent", ?*String, .{});
    }

    pub fn setKeyEquivalent(self: *@This(), keyEquivalent: ?*String) void {
        return objc.msgSend(self, "setKeyEquivalent:", void, .{keyEquivalent});
    }

    pub fn keyEquivalentModifierMask(self: *@This()) EventModifierFlags {
        return objc.msgSend(self, "keyEquivalentModifierMask", EventModifierFlags, .{});
    }

    pub fn setKeyEquivalentModifierMask(self: *@This(), keyEquivalentModifierMask: EventModifierFlags) void {
        return objc.msgSend(self, "setKeyEquivalentModifierMask:", void, .{keyEquivalentModifierMask});
    }

    pub fn isTransparent(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isTransparent", objc.BOOL, .{});
    }

    pub fn setTransparent(self: *@This(), transparent: objc.BOOL) void {
        return objc.msgSend(self, "setTransparent:", void, .{transparent});
    }

    pub fn isOpaque(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isOpaque", objc.BOOL, .{});
    }

    pub fn imageDimsWhenDisabled(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "imageDimsWhenDisabled", objc.BOOL, .{});
    }

    pub fn setImageDimsWhenDisabled(self: *@This(), imageDimsWhenDisabled: objc.BOOL) void {
        return objc.msgSend(self, "setImageDimsWhenDisabled:", void, .{imageDimsWhenDisabled});
    }

    pub fn showsBorderOnlyWhileMouseInside(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "showsBorderOnlyWhileMouseInside", objc.BOOL, .{});
    }

    pub fn setShowsBorderOnlyWhileMouseInside(self: *@This(), showsBorderOnlyWhileMouseInside: objc.BOOL) void {
        return objc.msgSend(self, "setShowsBorderOnlyWhileMouseInside:", void, .{showsBorderOnlyWhileMouseInside});
    }

    pub fn sound(self: *@This()) ?*Sound {
        return objc.msgSend(self, "sound", ?*Sound, .{});
    }

    pub fn setSound(self: *@This(), sound: ?*Sound) void {
        return objc.msgSend(self, "setSound:", void, .{sound});
    }

    pub fn backgroundColor(self: *@This()) ?*Color {
        return objc.msgSend(self, "backgroundColor", ?*Color, .{});
    }

    pub fn setBackgroundColor(self: *@This(), backgroundColor: ?*Color) void {
        return objc.msgSend(self, "setBackgroundColor:", void, .{backgroundColor});
    }

};

pub const GradientType = enum(objc.NSUInteger) {
    None = 0,
    ConcaveWeak = 1,
    ConcaveStrong = 2,
    ConvexWeak = 3,
    ConvexStrong = 4,
};

/// https://developer.apple.com/documentation/AppKit/NSUserInterfaceCompressionOptions?language=objc
pub const UserInterfaceCompressionOptions = opaque {
    pub const InternalInfo = objc.ExternalClass("NSUserInterfaceCompressionOptions", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn init(self: *@This()) *@This() {
        return objc.msgSend(self, "init", *@This(), .{});
    }

    pub fn initWithCoder(self: *@This(), coder: ?*foundation.Coder) *@This() {
        return objc.msgSend(self, "initWithCoder:", *@This(), .{coder});
    }

    pub fn initWithIdentifier(self: *@This(), identifier: ?*String) *@This() {
        return objc.msgSend(self, "initWithIdentifier:", *@This(), .{identifier});
    }

    pub fn initWithCompressionOptions(self: *@This(), options: ?*anyopaque) *@This() {
        return objc.msgSend(self, "initWithCompressionOptions:", *@This(), .{options});
    }

    pub fn containsOptions(self: *@This(), options: ?*UserInterfaceCompressionOptions) objc.BOOL {
        return objc.msgSend(self, "containsOptions:", objc.BOOL, .{options});
    }

    pub fn intersectsOptions(self: *@This(), options: ?*UserInterfaceCompressionOptions) objc.BOOL {
        return objc.msgSend(self, "intersectsOptions:", objc.BOOL, .{options});
    }

    pub fn optionsByAddingOptions(self: *@This(), options: ?*UserInterfaceCompressionOptions) ?*UserInterfaceCompressionOptions {
        return objc.msgSend(self, "optionsByAddingOptions:", ?*UserInterfaceCompressionOptions, .{options});
    }

    pub fn optionsByRemovingOptions(self: *@This(), options: ?*UserInterfaceCompressionOptions) ?*UserInterfaceCompressionOptions {
        return objc.msgSend(self, "optionsByRemovingOptions:", ?*UserInterfaceCompressionOptions, .{options});
    }

    pub fn isEmpty(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isEmpty", objc.BOOL, .{});
    }

    pub fn hideImagesOption(self: *@This()) ?*UserInterfaceCompressionOptions {
        return objc.msgSend(self, "hideImagesOption", ?*UserInterfaceCompressionOptions, .{});
    }

    pub fn hideTextOption(self: *@This()) ?*UserInterfaceCompressionOptions {
        return objc.msgSend(self, "hideTextOption", ?*UserInterfaceCompressionOptions, .{});
    }

    pub fn reduceMetricsOption(self: *@This()) ?*UserInterfaceCompressionOptions {
        return objc.msgSend(self, "reduceMetricsOption", ?*UserInterfaceCompressionOptions, .{});
    }

    pub fn breakEqualWidthsOption(self: *@This()) ?*UserInterfaceCompressionOptions {
        return objc.msgSend(self, "breakEqualWidthsOption", ?*UserInterfaceCompressionOptions, .{});
    }

    pub fn standardOptions(self: *@This()) ?*UserInterfaceCompressionOptions {
        return objc.msgSend(self, "standardOptions", ?*UserInterfaceCompressionOptions, .{});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSUserInterfaceCompression?language=objc
pub const UserInterfaceCompression = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn compressWithPrioritizedCompressionOptions(self: *@This(), prioritizedOptions: ?*anyopaque) void {
        return objc.msgSend(self, "compressWithPrioritizedCompressionOptions:", void, .{prioritizedOptions});
    }

    pub fn minimumSizeWithPrioritizedCompressionOptions(self: *@This(), prioritizedOptions: ?*anyopaque) foundation.Size {
        return objc.msgSend(self, "minimumSizeWithPrioritizedCompressionOptions:", foundation.Size, .{prioritizedOptions});
    }

    pub fn activeCompressionOptions(self: *@This()) ?*UserInterfaceCompressionOptions {
        return objc.msgSend(self, "activeCompressionOptions", ?*UserInterfaceCompressionOptions, .{});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSButton?language=objc
pub const Button = opaque {
    pub const InternalInfo = objc.ExternalClass("NSButton", @This(), Control, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn buttonWithTitleImageTargetAction(self: *@This(), title: ?*String, image: ?*Image, target: *objc.Id, action: *objc.SEL, ) *@This() {
        return objc.msgSend(self, "buttonWithTitle:image:target:action:", *@This(), .{title, image, target, action, });
    }

    pub fn buttonWithTitleTargetAction(self: *@This(), title: ?*String, target: *objc.Id, action: *objc.SEL) *@This() {
        return objc.msgSend(self, "buttonWithTitle:target:action:", *@This(), .{title, target, action});
    }

    pub fn buttonWithImageTargetAction(self: *@This(), image: ?*Image, target: *objc.Id, action: *objc.SEL) *@This() {
        return objc.msgSend(self, "buttonWithImage:target:action:", *@This(), .{image, target, action});
    }

    pub fn checkboxWithTitleTargetAction(self: *@This(), title: ?*String, target: *objc.Id, action: *objc.SEL) *@This() {
        return objc.msgSend(self, "checkboxWithTitle:target:action:", *@This(), .{title, target, action});
    }

    pub fn radioButtonWithTitleTargetAction(self: *@This(), title: ?*String, target: *objc.Id, action: *objc.SEL) *@This() {
        return objc.msgSend(self, "radioButtonWithTitle:target:action:", *@This(), .{title, target, action});
    }

    pub fn setButtonType(self: *@This(), @"type": ButtonType) void {
        return objc.msgSend(self, "setButtonType:", void, .{@"type"});
    }

    pub fn setPeriodicDelayInterval(self: *@This(), delay: f32, interval: f32) void {
        return objc.msgSend(self, "setPeriodicDelay:interval:", void, .{delay, interval});
    }

    pub fn getPeriodicDelayInterval(self: *@This(), delay: ?*f32, interval: ?*f32) void {
        return objc.msgSend(self, "getPeriodicDelay:interval:", void, .{delay, interval});
    }

    pub fn setNextState(self: *@This()) void {
        return objc.msgSend(self, "setNextState", void, .{});
    }

    pub fn highlight(self: *@This(), flag: objc.BOOL) void {
        return objc.msgSend(self, "highlight:", void, .{flag});
    }

    pub fn performKeyEquivalent(self: *@This(), key: ?*Event) objc.BOOL {
        return objc.msgSend(self, "performKeyEquivalent:", objc.BOOL, .{key});
    }

    pub fn compressWithPrioritizedCompressionOptions(self: *@This(), prioritizedOptions: ?*anyopaque) void {
        return objc.msgSend(self, "compressWithPrioritizedCompressionOptions:", void, .{prioritizedOptions});
    }

    pub fn minimumSizeWithPrioritizedCompressionOptions(self: *@This(), prioritizedOptions: ?*anyopaque) foundation.Size {
        return objc.msgSend(self, "minimumSizeWithPrioritizedCompressionOptions:", foundation.Size, .{prioritizedOptions});
    }

    pub fn title(self: *@This()) ?*String {
        return objc.msgSend(self, "title", ?*String, .{});
    }

    pub fn setTitle(self: *@This(), title: ?*String) void {
        return objc.msgSend(self, "setTitle:", void, .{title});
    }

    pub fn attributedTitle(self: *@This()) ?*AttributedString {
        return objc.msgSend(self, "attributedTitle", ?*AttributedString, .{});
    }

    pub fn setAttributedTitle(self: *@This(), attributedTitle: ?*AttributedString) void {
        return objc.msgSend(self, "setAttributedTitle:", void, .{attributedTitle});
    }

    pub fn alternateTitle(self: *@This()) ?*String {
        return objc.msgSend(self, "alternateTitle", ?*String, .{});
    }

    pub fn setAlternateTitle(self: *@This(), alternateTitle: ?*String) void {
        return objc.msgSend(self, "setAlternateTitle:", void, .{alternateTitle});
    }

    pub fn attributedAlternateTitle(self: *@This()) ?*AttributedString {
        return objc.msgSend(self, "attributedAlternateTitle", ?*AttributedString, .{});
    }

    pub fn setAttributedAlternateTitle(self: *@This(), attributedAlternateTitle: ?*AttributedString) void {
        return objc.msgSend(self, "setAttributedAlternateTitle:", void, .{attributedAlternateTitle});
    }

    pub fn hasDestructiveAction(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "hasDestructiveAction", objc.BOOL, .{});
    }

    pub fn setHasDestructiveAction(self: *@This(), hasDestructiveAction: objc.BOOL) void {
        return objc.msgSend(self, "setHasDestructiveAction:", void, .{hasDestructiveAction});
    }

    pub fn sound(self: *@This()) ?*Sound {
        return objc.msgSend(self, "sound", ?*Sound, .{});
    }

    pub fn setSound(self: *@This(), sound: ?*Sound) void {
        return objc.msgSend(self, "setSound:", void, .{sound});
    }

    pub fn isSpringLoaded(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isSpringLoaded", objc.BOOL, .{});
    }

    pub fn setSpringLoaded(self: *@This(), springLoaded: objc.BOOL) void {
        return objc.msgSend(self, "setSpringLoaded:", void, .{springLoaded});
    }

    pub fn maxAcceleratorLevel(self: *@This()) objc.NSInteger {
        return objc.msgSend(self, "maxAcceleratorLevel", objc.NSInteger, .{});
    }

    pub fn setMaxAcceleratorLevel(self: *@This(), maxAcceleratorLevel: objc.NSInteger) void {
        return objc.msgSend(self, "setMaxAcceleratorLevel:", void, .{maxAcceleratorLevel});
    }

    pub fn bezelStyle(self: *@This()) BezelStyle {
        return objc.msgSend(self, "bezelStyle", BezelStyle, .{});
    }

    pub fn setBezelStyle(self: *@This(), bezelStyle: BezelStyle) void {
        return objc.msgSend(self, "setBezelStyle:", void, .{bezelStyle});
    }

    pub fn isBordered(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isBordered", objc.BOOL, .{});
    }

    pub fn setBordered(self: *@This(), bordered: objc.BOOL) void {
        return objc.msgSend(self, "setBordered:", void, .{bordered});
    }

    pub fn isTransparent(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isTransparent", objc.BOOL, .{});
    }

    pub fn setTransparent(self: *@This(), transparent: objc.BOOL) void {
        return objc.msgSend(self, "setTransparent:", void, .{transparent});
    }

    pub fn showsBorderOnlyWhileMouseInside(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "showsBorderOnlyWhileMouseInside", objc.BOOL, .{});
    }

    pub fn setShowsBorderOnlyWhileMouseInside(self: *@This(), showsBorderOnlyWhileMouseInside: objc.BOOL) void {
        return objc.msgSend(self, "setShowsBorderOnlyWhileMouseInside:", void, .{showsBorderOnlyWhileMouseInside});
    }

    pub fn bezelColor(self: *@This()) ?*Color {
        return objc.msgSend(self, "bezelColor", ?*Color, .{});
    }

    pub fn setBezelColor(self: *@This(), bezelColor: ?*Color) void {
        return objc.msgSend(self, "setBezelColor:", void, .{bezelColor});
    }

    pub fn contentTintColor(self: *@This()) ?*Color {
        return objc.msgSend(self, "contentTintColor", ?*Color, .{});
    }

    pub fn setContentTintColor(self: *@This(), contentTintColor: ?*Color) void {
        return objc.msgSend(self, "setContentTintColor:", void, .{contentTintColor});
    }

    pub fn image(self: *@This()) ?*Image {
        return objc.msgSend(self, "image", ?*Image, .{});
    }

    pub fn setImage(self: *@This(), image: ?*Image) void {
        return objc.msgSend(self, "setImage:", void, .{image});
    }

    pub fn alternateImage(self: *@This()) ?*Image {
        return objc.msgSend(self, "alternateImage", ?*Image, .{});
    }

    pub fn setAlternateImage(self: *@This(), alternateImage: ?*Image) void {
        return objc.msgSend(self, "setAlternateImage:", void, .{alternateImage});
    }

    pub fn imagePosition(self: *@This()) CellImagePosition {
        return objc.msgSend(self, "imagePosition", CellImagePosition, .{});
    }

    pub fn setImagePosition(self: *@This(), imagePosition: CellImagePosition) void {
        return objc.msgSend(self, "setImagePosition:", void, .{imagePosition});
    }

    pub fn imageScaling(self: *@This()) ImageScaling {
        return objc.msgSend(self, "imageScaling", ImageScaling, .{});
    }

    pub fn setImageScaling(self: *@This(), imageScaling: ImageScaling) void {
        return objc.msgSend(self, "setImageScaling:", void, .{imageScaling});
    }

    pub fn imageHugsTitle(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "imageHugsTitle", objc.BOOL, .{});
    }

    pub fn setImageHugsTitle(self: *@This(), imageHugsTitle: objc.BOOL) void {
        return objc.msgSend(self, "setImageHugsTitle:", void, .{imageHugsTitle});
    }

    pub fn symbolConfiguration(self: *@This()) ?*ImageSymbolConfiguration {
        return objc.msgSend(self, "symbolConfiguration", ?*ImageSymbolConfiguration, .{});
    }

    pub fn setSymbolConfiguration(self: *@This(), symbolConfiguration: ?*ImageSymbolConfiguration) void {
        return objc.msgSend(self, "setSymbolConfiguration:", void, .{symbolConfiguration});
    }

    pub fn state(self: *@This()) ControlStateValue {
        return objc.msgSend(self, "state", ControlStateValue, .{});
    }

    pub fn setState(self: *@This(), state: ControlStateValue) void {
        return objc.msgSend(self, "setState:", void, .{state});
    }

    pub fn allowsMixedState(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "allowsMixedState", objc.BOOL, .{});
    }

    pub fn setAllowsMixedState(self: *@This(), allowsMixedState: objc.BOOL) void {
        return objc.msgSend(self, "setAllowsMixedState:", void, .{allowsMixedState});
    }

    pub fn keyEquivalent(self: *@This()) ?*String {
        return objc.msgSend(self, "keyEquivalent", ?*String, .{});
    }

    pub fn setKeyEquivalent(self: *@This(), keyEquivalent: ?*String) void {
        return objc.msgSend(self, "setKeyEquivalent:", void, .{keyEquivalent});
    }

    pub fn keyEquivalentModifierMask(self: *@This()) EventModifierFlags {
        return objc.msgSend(self, "keyEquivalentModifierMask", EventModifierFlags, .{});
    }

    pub fn setKeyEquivalentModifierMask(self: *@This(), keyEquivalentModifierMask: EventModifierFlags) void {
        return objc.msgSend(self, "setKeyEquivalentModifierMask:", void, .{keyEquivalentModifierMask});
    }

    pub fn activeCompressionOptions(self: *@This()) ?*UserInterfaceCompressionOptions {
        return objc.msgSend(self, "activeCompressionOptions", ?*UserInterfaceCompressionOptions, .{});
    }

};

pub const TouchBarItemIdentifier = ?*String;

pub const TouchBarItemPriority = f32;

/// https://developer.apple.com/documentation/AppKit/NSTouchBarItem?language=objc
pub const TouchBarItem = opaque {
    pub const InternalInfo = objc.ExternalClass("NSTouchBarItem", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn initWithIdentifier(self: *@This(), identifier: TouchBarItemIdentifier) *@This() {
        return objc.msgSend(self, "initWithIdentifier:", *@This(), .{identifier});
    }

    pub fn initWithCoder(self: *@This(), coder: ?*foundation.Coder) *@This() {
        return objc.msgSend(self, "initWithCoder:", *@This(), .{coder});
    }

    pub fn init(self: *@This()) *@This() {
        return objc.msgSend(self, "init", *@This(), .{});
    }

    pub fn identifier(self: *@This()) TouchBarItemIdentifier {
        return objc.msgSend(self, "identifier", TouchBarItemIdentifier, .{});
    }

    pub fn visibilityPriority(self: *@This()) TouchBarItemPriority {
        return objc.msgSend(self, "visibilityPriority", TouchBarItemPriority, .{});
    }

    pub fn setVisibilityPriority(self: *@This(), visibilityPriority: TouchBarItemPriority) void {
        return objc.msgSend(self, "setVisibilityPriority:", void, .{visibilityPriority});
    }

    pub fn view(self: *@This()) ?*View {
        return objc.msgSend(self, "view", ?*View, .{});
    }

    pub fn viewController(self: *@This()) ?*ViewController {
        return objc.msgSend(self, "viewController", ?*ViewController, .{});
    }

    pub fn customizationLabel(self: *@This()) ?*String {
        return objc.msgSend(self, "customizationLabel", ?*String, .{});
    }

    pub fn isVisible(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isVisible", objc.BOOL, .{});
    }

};

pub const TouchBarCustomizationIdentifier = ?*String;

/// https://developer.apple.com/documentation/AppKit/NSTouchBar?language=objc
pub const TouchBar = opaque {
    pub const InternalInfo = objc.ExternalClass("NSTouchBar", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn init(self: *@This()) *@This() {
        return objc.msgSend(self, "init", *@This(), .{});
    }

    pub fn initWithCoder(self: *@This(), coder: ?*foundation.Coder) *@This() {
        return objc.msgSend(self, "initWithCoder:", *@This(), .{coder});
    }

    pub fn itemForIdentifier(self: *@This(), identifier: TouchBarItemIdentifier) ?*anyopaque {
        return objc.msgSend(self, "itemForIdentifier:", ?*anyopaque, .{identifier});
    }

    pub fn customizationIdentifier(self: *@This()) TouchBarCustomizationIdentifier {
        return objc.msgSend(self, "customizationIdentifier", TouchBarCustomizationIdentifier, .{});
    }

    pub fn setCustomizationIdentifier(self: *@This(), customizationIdentifier: TouchBarCustomizationIdentifier) void {
        return objc.msgSend(self, "setCustomizationIdentifier:", void, .{customizationIdentifier});
    }

    pub fn customizationAllowedItemIdentifiers(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "customizationAllowedItemIdentifiers", ?*anyopaque, .{});
    }

    pub fn setCustomizationAllowedItemIdentifiers(self: *@This(), customizationAllowedItemIdentifiers: ?*anyopaque) void {
        return objc.msgSend(self, "setCustomizationAllowedItemIdentifiers:", void, .{customizationAllowedItemIdentifiers});
    }

    pub fn customizationRequiredItemIdentifiers(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "customizationRequiredItemIdentifiers", ?*anyopaque, .{});
    }

    pub fn setCustomizationRequiredItemIdentifiers(self: *@This(), customizationRequiredItemIdentifiers: ?*anyopaque) void {
        return objc.msgSend(self, "setCustomizationRequiredItemIdentifiers:", void, .{customizationRequiredItemIdentifiers});
    }

    pub fn defaultItemIdentifiers(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "defaultItemIdentifiers", ?*anyopaque, .{});
    }

    pub fn setDefaultItemIdentifiers(self: *@This(), defaultItemIdentifiers: ?*anyopaque) void {
        return objc.msgSend(self, "setDefaultItemIdentifiers:", void, .{defaultItemIdentifiers});
    }

    pub fn itemIdentifiers(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "itemIdentifiers", ?*anyopaque, .{});
    }

    pub fn principalItemIdentifier(self: *@This()) TouchBarItemIdentifier {
        return objc.msgSend(self, "principalItemIdentifier", TouchBarItemIdentifier, .{});
    }

    pub fn setPrincipalItemIdentifier(self: *@This(), principalItemIdentifier: TouchBarItemIdentifier) void {
        return objc.msgSend(self, "setPrincipalItemIdentifier:", void, .{principalItemIdentifier});
    }

    pub fn escapeKeyReplacementItemIdentifier(self: *@This()) TouchBarItemIdentifier {
        return objc.msgSend(self, "escapeKeyReplacementItemIdentifier", TouchBarItemIdentifier, .{});
    }

    pub fn setEscapeKeyReplacementItemIdentifier(self: *@This(), escapeKeyReplacementItemIdentifier: TouchBarItemIdentifier) void {
        return objc.msgSend(self, "setEscapeKeyReplacementItemIdentifier:", void, .{escapeKeyReplacementItemIdentifier});
    }

    pub fn templateItems(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "templateItems", ?*anyopaque, .{});
    }

    pub fn setTemplateItems(self: *@This(), templateItems: ?*anyopaque) void {
        return objc.msgSend(self, "setTemplateItems:", void, .{templateItems});
    }

    pub fn delegate(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "delegate", ?*anyopaque, .{});
    }

    pub fn setDelegate(self: *@This(), delegate: ?*anyopaque) void {
        return objc.msgSend(self, "setDelegate:", void, .{delegate});
    }

    pub fn isVisible(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isVisible", objc.BOOL, .{});
    }

    pub fn isAutomaticCustomizeTouchBarMenuItemEnabled(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isAutomaticCustomizeTouchBarMenuItemEnabled", objc.BOOL, .{});
    }

    pub fn setAutomaticCustomizeTouchBarMenuItemEnabled(self: *@This(), automaticCustomizeTouchBarMenuItemEnabled: objc.BOOL) void {
        return objc.msgSend(self, "setAutomaticCustomizeTouchBarMenuItemEnabled:", void, .{automaticCustomizeTouchBarMenuItemEnabled});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSTouchBarDelegate?language=objc
pub const TouchBarDelegate = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{objc.NSObject, });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn touchBarMakeItemForIdentifier(self: *@This(), touchBar: ?*TouchBar, identifier: TouchBarItemIdentifier) ?*TouchBarItem {
        return objc.msgSend(self, "touchBar:makeItemForIdentifier:", ?*TouchBarItem, .{touchBar, identifier});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSTouchBarProvider?language=objc
pub const TouchBarProvider = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{objc.NSObject, });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn touchBar(self: *@This()) ?*TouchBar {
        return objc.msgSend(self, "touchBar", ?*TouchBar, .{});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSCandidateListTouchBarItem?language=objc
pub const CandidateListTouchBarItem = opaque {
    pub const InternalInfo = objc.ExternalClass("NSCandidateListTouchBarItem", @This(), TouchBarItem, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn updateWithInsertionPointVisibility(self: *@This(), isVisible: objc.BOOL) void {
        return objc.msgSend(self, "updateWithInsertionPointVisibility:", void, .{isVisible});
    }

    pub fn setCandidatesForSelectedRangeInString(self: *@This(), candidates: ?*anyopaque, selectedRange: foundation.Range, originalString: ?*String) void {
        return objc.msgSend(self, "setCandidates:forSelectedRange:inString:", void, .{candidates, selectedRange, originalString});
    }

    pub fn client(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "client", ?*anyopaque, .{});
    }

    pub fn setClient(self: *@This(), client: ?*anyopaque) void {
        return objc.msgSend(self, "setClient:", void, .{client});
    }

    pub fn delegate(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "delegate", ?*anyopaque, .{});
    }

    pub fn setDelegate(self: *@This(), delegate: ?*anyopaque) void {
        return objc.msgSend(self, "setDelegate:", void, .{delegate});
    }

    pub fn isCollapsed(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isCollapsed", objc.BOOL, .{});
    }

    pub fn setCollapsed(self: *@This(), collapsed: objc.BOOL) void {
        return objc.msgSend(self, "setCollapsed:", void, .{collapsed});
    }

    pub fn allowsCollapsing(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "allowsCollapsing", objc.BOOL, .{});
    }

    pub fn setAllowsCollapsing(self: *@This(), allowsCollapsing: objc.BOOL) void {
        return objc.msgSend(self, "setAllowsCollapsing:", void, .{allowsCollapsing});
    }

    pub fn isCandidateListVisible(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isCandidateListVisible", objc.BOOL, .{});
    }

    pub fn allowsTextInputContextCandidates(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "allowsTextInputContextCandidates", objc.BOOL, .{});
    }

    pub fn setAllowsTextInputContextCandidates(self: *@This(), allowsTextInputContextCandidates: objc.BOOL) void {
        return objc.msgSend(self, "setAllowsTextInputContextCandidates:", void, .{allowsTextInputContextCandidates});
    }

    pub fn attributedStringForCandidate(self: *@This()) *const fn(void, objc.NSInteger) callconv(.C) ?*AttributedString {
        return objc.msgSend(self, "attributedStringForCandidate", *const fn(void, objc.NSInteger) callconv(.C) ?*AttributedString, .{});
    }

    pub fn setAttributedStringForCandidate(self: *@This(), attributedStringForCandidate: *const fn(void, objc.NSInteger) callconv(.C) ?*AttributedString) void {
        return objc.msgSend(self, "setAttributedStringForCandidate:", void, .{attributedStringForCandidate});
    }

    pub fn candidates(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "candidates", ?*anyopaque, .{});
    }

    pub fn customizationLabel(self: *@This()) ?*String {
        return objc.msgSend(self, "customizationLabel", ?*String, .{});
    }

    pub fn setCustomizationLabel(self: *@This(), customizationLabel: ?*String) void {
        return objc.msgSend(self, "setCustomizationLabel:", void, .{customizationLabel});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSCandidateListTouchBarItemDelegate?language=objc
pub const CandidateListTouchBarItemDelegate = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{objc.NSObject, });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn candidateListTouchBarItemBeginSelectingCandidateAtIndex(self: *@This(), anItem: ?*CandidateListTouchBarItem, index: objc.NSInteger) void {
        return objc.msgSend(self, "candidateListTouchBarItem:beginSelectingCandidateAtIndex:", void, .{anItem, index});
    }

    pub fn candidateListTouchBarItemChangeSelectionFromCandidateAtIndexToIndex(self: *@This(), anItem: ?*CandidateListTouchBarItem, previousIndex: objc.NSInteger, index: objc.NSInteger) void {
        return objc.msgSend(self, "candidateListTouchBarItem:changeSelectionFromCandidateAtIndex:toIndex:", void, .{anItem, previousIndex, index});
    }

    pub fn candidateListTouchBarItemEndSelectingCandidateAtIndex(self: *@This(), anItem: ?*CandidateListTouchBarItem, index: objc.NSInteger) void {
        return objc.msgSend(self, "candidateListTouchBarItem:endSelectingCandidateAtIndex:", void, .{anItem, index});
    }

    pub fn candidateListTouchBarItemChangedCandidateListVisibility(self: *@This(), anItem: ?*CandidateListTouchBarItem, isVisible: objc.BOOL) void {
        return objc.msgSend(self, "candidateListTouchBarItem:changedCandidateListVisibility:", void, .{anItem, isVisible});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSClipView?language=objc
pub const ClipView = opaque {
    pub const InternalInfo = objc.ExternalClass("NSClipView", @This(), View, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn viewFrameChanged(self: *@This(), notification: ?*Notification) void {
        return objc.msgSend(self, "viewFrameChanged:", void, .{notification});
    }

    pub fn viewBoundsChanged(self: *@This(), notification: ?*Notification) void {
        return objc.msgSend(self, "viewBoundsChanged:", void, .{notification});
    }

    pub fn autoscroll(self: *@This(), event: ?*Event) objc.BOOL {
        return objc.msgSend(self, "autoscroll:", objc.BOOL, .{event});
    }

    pub fn scrollToPoint(self: *@This(), newOrigin: foundation.Point) void {
        return objc.msgSend(self, "scrollToPoint:", void, .{newOrigin});
    }

    pub fn constrainBoundsRect(self: *@This(), proposedBounds: foundation.Rect) foundation.Rect {
        return objc.msgSend(self, "constrainBoundsRect:", foundation.Rect, .{proposedBounds});
    }

    pub fn backgroundColor(self: *@This()) ?*Color {
        return objc.msgSend(self, "backgroundColor", ?*Color, .{});
    }

    pub fn setBackgroundColor(self: *@This(), backgroundColor: ?*Color) void {
        return objc.msgSend(self, "setBackgroundColor:", void, .{backgroundColor});
    }

    pub fn drawsBackground(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "drawsBackground", objc.BOOL, .{});
    }

    pub fn setDrawsBackground(self: *@This(), drawsBackground: objc.BOOL) void {
        return objc.msgSend(self, "setDrawsBackground:", void, .{drawsBackground});
    }

    pub fn documentView(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "documentView", ?*anyopaque, .{});
    }

    pub fn setDocumentView(self: *@This(), documentView: ?*anyopaque) void {
        return objc.msgSend(self, "setDocumentView:", void, .{documentView});
    }

    pub fn documentRect(self: *@This()) foundation.Rect {
        return objc.msgSend(self, "documentRect", foundation.Rect, .{});
    }

    pub fn documentCursor(self: *@This()) ?*Cursor {
        return objc.msgSend(self, "documentCursor", ?*Cursor, .{});
    }

    pub fn setDocumentCursor(self: *@This(), documentCursor: ?*Cursor) void {
        return objc.msgSend(self, "setDocumentCursor:", void, .{documentCursor});
    }

    pub fn documentVisibleRect(self: *@This()) foundation.Rect {
        return objc.msgSend(self, "documentVisibleRect", foundation.Rect, .{});
    }

    pub fn contentInsets(self: *@This()) foundation.EdgeInsets {
        return objc.msgSend(self, "contentInsets", foundation.EdgeInsets, .{});
    }

    pub fn setContentInsets(self: *@This(), contentInsets: foundation.EdgeInsets) void {
        return objc.msgSend(self, "setContentInsets:", void, .{contentInsets});
    }

    pub fn automaticallyAdjustsContentInsets(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "automaticallyAdjustsContentInsets", objc.BOOL, .{});
    }

    pub fn setAutomaticallyAdjustsContentInsets(self: *@This(), automaticallyAdjustsContentInsets: objc.BOOL) void {
        return objc.msgSend(self, "setAutomaticallyAdjustsContentInsets:", void, .{automaticallyAdjustsContentInsets});
    }

};

pub const PopoverAppearance = enum(objc.NSInteger) {
    Minimal = 0,
    HUD = 1,
};

pub const PopoverBehavior = enum(objc.NSInteger) {
    ApplicationDefined = 0,
    Transient = 1,
    Semitransient = 2,
};

/// https://developer.apple.com/documentation/AppKit/NSPopover?language=objc
pub const Popover = opaque {
    pub const InternalInfo = objc.ExternalClass("NSPopover", @This(), Responder, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn init(self: *@This()) *@This() {
        return objc.msgSend(self, "init", *@This(), .{});
    }

    pub fn initWithCoder(self: *@This(), coder: ?*foundation.Coder) *@This() {
        return objc.msgSend(self, "initWithCoder:", *@This(), .{coder});
    }

    pub fn showRelativeToRectOfViewPreferredEdge(self: *@This(), positioningRect: foundation.Rect, positioningView: ?*View, preferredEdge: foundation.RectEdge) void {
        return objc.msgSend(self, "showRelativeToRect:ofView:preferredEdge:", void, .{positioningRect, positioningView, preferredEdge});
    }

    pub fn showRelativeToToolbarItem(self: *@This(), toolbarItem: ?*ToolbarItem) void {
        return objc.msgSend(self, "showRelativeToToolbarItem:", void, .{toolbarItem});
    }

    pub fn performClose(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "performClose:", void, .{sender});
    }

    pub fn close(self: *@This()) void {
        return objc.msgSend(self, "close", void, .{});
    }

    pub fn delegate(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "delegate", ?*anyopaque, .{});
    }

    pub fn setDelegate(self: *@This(), delegate: ?*anyopaque) void {
        return objc.msgSend(self, "setDelegate:", void, .{delegate});
    }

    pub fn appearance(self: *@This()) ?*Appearance {
        return objc.msgSend(self, "appearance", ?*Appearance, .{});
    }

    pub fn setAppearance(self: *@This(), appearance: ?*Appearance) void {
        return objc.msgSend(self, "setAppearance:", void, .{appearance});
    }

    pub fn effectiveAppearance(self: *@This()) ?*Appearance {
        return objc.msgSend(self, "effectiveAppearance", ?*Appearance, .{});
    }

    pub fn behavior(self: *@This()) PopoverBehavior {
        return objc.msgSend(self, "behavior", PopoverBehavior, .{});
    }

    pub fn setBehavior(self: *@This(), behavior: PopoverBehavior) void {
        return objc.msgSend(self, "setBehavior:", void, .{behavior});
    }

    pub fn animates(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "animates", objc.BOOL, .{});
    }

    pub fn setAnimates(self: *@This(), animates: objc.BOOL) void {
        return objc.msgSend(self, "setAnimates:", void, .{animates});
    }

    pub fn contentViewController(self: *@This()) ?*ViewController {
        return objc.msgSend(self, "contentViewController", ?*ViewController, .{});
    }

    pub fn setContentViewController(self: *@This(), contentViewController: ?*ViewController) void {
        return objc.msgSend(self, "setContentViewController:", void, .{contentViewController});
    }

    pub fn contentSize(self: *@This()) foundation.Size {
        return objc.msgSend(self, "contentSize", foundation.Size, .{});
    }

    pub fn setContentSize(self: *@This(), contentSize: foundation.Size) void {
        return objc.msgSend(self, "setContentSize:", void, .{contentSize});
    }

    pub fn isShown(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isShown", objc.BOOL, .{});
    }

    pub fn isDetached(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isDetached", objc.BOOL, .{});
    }

    pub fn positioningRect(self: *@This()) foundation.Rect {
        return objc.msgSend(self, "positioningRect", foundation.Rect, .{});
    }

    pub fn setPositioningRect(self: *@This(), positioningRect: foundation.Rect) void {
        return objc.msgSend(self, "setPositioningRect:", void, .{positioningRect});
    }

    pub fn hasFullSizeContent(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "hasFullSizeContent", objc.BOOL, .{});
    }

    pub fn setHasFullSizeContent(self: *@This(), hasFullSizeContent: objc.BOOL) void {
        return objc.msgSend(self, "setHasFullSizeContent:", void, .{hasFullSizeContent});
    }

};

pub const PopoverCloseReasonValue = ?*String;

/// https://developer.apple.com/documentation/AppKit/NSPopoverDelegate?language=objc
pub const PopoverDelegate = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{objc.NSObject, });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn popoverShouldClose(self: *@This(), popover: ?*Popover) objc.BOOL {
        return objc.msgSend(self, "popoverShouldClose:", objc.BOOL, .{popover});
    }

    pub fn popoverShouldDetach(self: *@This(), popover: ?*Popover) objc.BOOL {
        return objc.msgSend(self, "popoverShouldDetach:", objc.BOOL, .{popover});
    }

    pub fn popoverDidDetach(self: *@This(), popover: ?*Popover) void {
        return objc.msgSend(self, "popoverDidDetach:", void, .{popover});
    }

    pub fn detachableWindowForPopover(self: *@This(), popover: ?*Popover) ?*Window {
        return objc.msgSend(self, "detachableWindowForPopover:", ?*Window, .{popover});
    }

    pub fn popoverWillShow(self: *@This(), notification: ?*Notification) void {
        return objc.msgSend(self, "popoverWillShow:", void, .{notification});
    }

    pub fn popoverDidShow(self: *@This(), notification: ?*Notification) void {
        return objc.msgSend(self, "popoverDidShow:", void, .{notification});
    }

    pub fn popoverWillClose(self: *@This(), notification: ?*Notification) void {
        return objc.msgSend(self, "popoverWillClose:", void, .{notification});
    }

    pub fn popoverDidClose(self: *@This(), notification: ?*Notification) void {
        return objc.msgSend(self, "popoverDidClose:", void, .{notification});
    }

};

pub const StoryboardName = ?*String;

pub const StoryboardSceneIdentifier = ?*String;

pub const StoryboardControllerCreator = *const fn(?*foundation.Coder) callconv(.C) *objc.Id;

/// https://developer.apple.com/documentation/AppKit/NSStoryboard?language=objc
pub const Storyboard = opaque {
    pub const InternalInfo = objc.ExternalClass("NSStoryboard", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn storyboardWithNameBundle(self: *@This(), name: StoryboardName, storyboardBundleOrNil: ?*Bundle) *@This() {
        return objc.msgSend(self, "storyboardWithName:bundle:", *@This(), .{name, storyboardBundleOrNil});
    }

    pub fn instantiateInitialController(self: *@This()) *objc.Id {
        return objc.msgSend(self, "instantiateInitialController", *objc.Id, .{});
    }

    pub fn instantiateInitialControllerWithCreator(self: *@This(), block: StoryboardControllerCreator) *objc.Id {
        return objc.msgSend(self, "instantiateInitialControllerWithCreator:", *objc.Id, .{block});
    }

    pub fn instantiateControllerWithIdentifier(self: *@This(), identifier: StoryboardSceneIdentifier) *objc.Id {
        return objc.msgSend(self, "instantiateControllerWithIdentifier:", *objc.Id, .{identifier});
    }

    pub fn instantiateControllerWithIdentifierCreator(self: *@This(), identifier: StoryboardSceneIdentifier, block: StoryboardControllerCreator) *objc.Id {
        return objc.msgSend(self, "instantiateControllerWithIdentifier:creator:", *objc.Id, .{identifier, block});
    }

    pub fn mainStoryboard(self: *@This()) ?*Storyboard {
        return objc.msgSend(self, "mainStoryboard", ?*Storyboard, .{});
    }

};

pub const StoryboardSegueIdentifier = ?*String;

/// https://developer.apple.com/documentation/AppKit/NSStoryboardSegue?language=objc
pub const StoryboardSegue = opaque {
    pub const InternalInfo = objc.ExternalClass("NSStoryboardSegue", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn segueWithIdentifierSourceDestinationPerformHandler(self: *@This(), identifier: StoryboardSegueIdentifier, sourceController: *objc.Id, destinationController: *objc.Id, performHandler: *const fn() callconv(.C) void, ) *@This() {
        return objc.msgSend(self, "segueWithIdentifier:source:destination:performHandler:", *@This(), .{identifier, sourceController, destinationController, performHandler, });
    }

    pub fn initWithIdentifierSourceDestination(self: *@This(), identifier: StoryboardSegueIdentifier, sourceController: *objc.Id, destinationController: *objc.Id) *@This() {
        return objc.msgSend(self, "initWithIdentifier:source:destination:", *@This(), .{identifier, sourceController, destinationController});
    }

    pub fn perform(self: *@This()) void {
        return objc.msgSend(self, "perform", void, .{});
    }

    pub fn identifier(self: *@This()) StoryboardSegueIdentifier {
        return objc.msgSend(self, "identifier", StoryboardSegueIdentifier, .{});
    }

    pub fn sourceController(self: *@This()) *objc.Id {
        return objc.msgSend(self, "sourceController", *objc.Id, .{});
    }

    pub fn destinationController(self: *@This()) *objc.Id {
        return objc.msgSend(self, "destinationController", *objc.Id, .{});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSSeguePerforming?language=objc
pub const SeguePerforming = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{objc.NSObject, });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn prepareForSegueSender(self: *@This(), segue: ?*StoryboardSegue, sender: *objc.Id) void {
        return objc.msgSend(self, "prepareForSegue:sender:", void, .{segue, sender});
    }

    pub fn performSegueWithIdentifierSender(self: *@This(), identifier: StoryboardSegueIdentifier, sender: *objc.Id) void {
        return objc.msgSend(self, "performSegueWithIdentifier:sender:", void, .{identifier, sender});
    }

    pub fn shouldPerformSegueWithIdentifierSender(self: *@This(), identifier: StoryboardSegueIdentifier, sender: *objc.Id) objc.BOOL {
        return objc.msgSend(self, "shouldPerformSegueWithIdentifier:sender:", objc.BOOL, .{identifier, sender});
    }

};

pub const ViewControllerTransitionOptions = enum(objc.NSUInteger) {
    None = 0,
    Crossfade = 1,
    SlideUp = 16,
    SlideDown = 32,
    SlideLeft = 64,
    SlideRight = 128,
    SlideForward = 320,
    SlideBackward = 384,
    AllowUserInteraction = 4096,
};

/// https://developer.apple.com/documentation/AppKit/NSViewController?language=objc
pub const ViewController = opaque {
    pub const InternalInfo = objc.ExternalClass("NSViewController", @This(), Responder, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn initWithNibNameBundle(self: *@This(), nibNameOrNil: NibName, nibBundleOrNil: ?*Bundle) *@This() {
        return objc.msgSend(self, "initWithNibName:bundle:", *@This(), .{nibNameOrNil, nibBundleOrNil});
    }

    pub fn initWithCoder(self: *@This(), coder: ?*foundation.Coder) *@This() {
        return objc.msgSend(self, "initWithCoder:", *@This(), .{coder});
    }

    pub fn loadView(self: *@This()) void {
        return objc.msgSend(self, "loadView", void, .{});
    }

    pub fn loadViewIfNeeded(self: *@This()) void {
        return objc.msgSend(self, "loadViewIfNeeded", void, .{});
    }

    pub fn commitEditingWithDelegateDidCommitSelectorContextInfo(self: *@This(), delegate: *objc.Id, didCommitSelector: *objc.SEL, contextInfo: ?*anyopaque) void {
        return objc.msgSend(self, "commitEditingWithDelegate:didCommitSelector:contextInfo:", void, .{delegate, didCommitSelector, contextInfo});
    }

    pub fn commitEditing(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "commitEditing", objc.BOOL, .{});
    }

    pub fn discardEditing(self: *@This()) void {
        return objc.msgSend(self, "discardEditing", void, .{});
    }

    pub fn viewDidLoad(self: *@This()) void {
        return objc.msgSend(self, "viewDidLoad", void, .{});
    }

    pub fn viewWillAppear(self: *@This()) void {
        return objc.msgSend(self, "viewWillAppear", void, .{});
    }

    pub fn viewDidAppear(self: *@This()) void {
        return objc.msgSend(self, "viewDidAppear", void, .{});
    }

    pub fn viewWillDisappear(self: *@This()) void {
        return objc.msgSend(self, "viewWillDisappear", void, .{});
    }

    pub fn viewDidDisappear(self: *@This()) void {
        return objc.msgSend(self, "viewDidDisappear", void, .{});
    }

    pub fn updateViewConstraints(self: *@This()) void {
        return objc.msgSend(self, "updateViewConstraints", void, .{});
    }

    pub fn viewWillLayout(self: *@This()) void {
        return objc.msgSend(self, "viewWillLayout", void, .{});
    }

    pub fn viewDidLayout(self: *@This()) void {
        return objc.msgSend(self, "viewDidLayout", void, .{});
    }

    pub fn nibName(self: *@This()) NibName {
        return objc.msgSend(self, "nibName", NibName, .{});
    }

    pub fn nibBundle(self: *@This()) ?*Bundle {
        return objc.msgSend(self, "nibBundle", ?*Bundle, .{});
    }

    pub fn representedObject(self: *@This()) *objc.Id {
        return objc.msgSend(self, "representedObject", *objc.Id, .{});
    }

    pub fn setRepresentedObject(self: *@This(), representedObject: *objc.Id) void {
        return objc.msgSend(self, "setRepresentedObject:", void, .{representedObject});
    }

    pub fn title(self: *@This()) ?*String {
        return objc.msgSend(self, "title", ?*String, .{});
    }

    pub fn setTitle(self: *@This(), title: ?*String) void {
        return objc.msgSend(self, "setTitle:", void, .{title});
    }

    pub fn view(self: *@This()) ?*View {
        return objc.msgSend(self, "view", ?*View, .{});
    }

    pub fn setView(self: *@This(), view: ?*View) void {
        return objc.msgSend(self, "setView:", void, .{view});
    }

    pub fn viewIfLoaded(self: *@This()) ?*View {
        return objc.msgSend(self, "viewIfLoaded", ?*View, .{});
    }

    pub fn isViewLoaded(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isViewLoaded", objc.BOOL, .{});
    }

    pub fn preferredContentSize(self: *@This()) foundation.Size {
        return objc.msgSend(self, "preferredContentSize", foundation.Size, .{});
    }

    pub fn setPreferredContentSize(self: *@This(), preferredContentSize: foundation.Size) void {
        return objc.msgSend(self, "setPreferredContentSize:", void, .{preferredContentSize});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSViewControllerPresentationAnimator?language=objc
pub const ViewControllerPresentationAnimator = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{objc.NSObject, });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn animatePresentationOfViewControllerFromViewController(self: *@This(), viewController: ?*ViewController, fromViewController: ?*ViewController) void {
        return objc.msgSend(self, "animatePresentationOfViewController:fromViewController:", void, .{viewController, fromViewController});
    }

    pub fn animateDismissalOfViewControllerFromViewController(self: *@This(), viewController: ?*ViewController, fromViewController: ?*ViewController) void {
        return objc.msgSend(self, "animateDismissalOfViewController:fromViewController:", void, .{viewController, fromViewController});
    }

};

pub const CollectionViewDropOperation = enum(objc.NSInteger) {
    On = 0,
    Before = 1,
};

pub const CollectionViewItemHighlightState = enum(objc.NSInteger) {
    None = 0,
    ForSelection = 1,
    ForDeselection = 2,
    AsDropTarget = 3,
};

pub const CollectionViewScrollPosition = enum(objc.NSUInteger) {
    None = 0,
    Top = 1,
    CenteredVertically = 2,
    Bottom = 4,
    NearestHorizontalEdge = 512,
    Left = 8,
    CenteredHorizontally = 16,
    Right = 32,
    LeadingEdge = 64,
    TrailingEdge = 128,
    NearestVerticalEdge = 256,
};

pub const CollectionViewSupplementaryElementKind = ?*String;

/// https://developer.apple.com/documentation/AppKit/NSCollectionViewElement?language=objc
pub const CollectionViewElement = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{objc.NSObject, UserInterfaceItemIdentification, });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn prepareForReuse(self: *@This()) void {
        return objc.msgSend(self, "prepareForReuse", void, .{});
    }

    pub fn applyLayoutAttributes(self: *@This(), layoutAttributes: ?*CollectionViewLayoutAttributes) void {
        return objc.msgSend(self, "applyLayoutAttributes:", void, .{layoutAttributes});
    }

    pub fn willTransitionFromLayoutToLayout(self: *@This(), oldLayout: ?*CollectionViewLayout, newLayout: ?*CollectionViewLayout) void {
        return objc.msgSend(self, "willTransitionFromLayout:toLayout:", void, .{oldLayout, newLayout});
    }

    pub fn didTransitionFromLayoutToLayout(self: *@This(), oldLayout: ?*CollectionViewLayout, newLayout: ?*CollectionViewLayout) void {
        return objc.msgSend(self, "didTransitionFromLayout:toLayout:", void, .{oldLayout, newLayout});
    }

    pub fn preferredLayoutAttributesFittingAttributes(self: *@This(), layoutAttributes: ?*CollectionViewLayoutAttributes) ?*CollectionViewLayoutAttributes {
        return objc.msgSend(self, "preferredLayoutAttributesFittingAttributes:", ?*CollectionViewLayoutAttributes, .{layoutAttributes});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSCollectionViewSectionHeaderView?language=objc
pub const CollectionViewSectionHeaderView = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{CollectionViewElement, });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn sectionCollapseButton(self: *@This()) ?*Button {
        return objc.msgSend(self, "sectionCollapseButton", ?*Button, .{});
    }

    pub fn setSectionCollapseButton(self: *@This(), sectionCollapseButton: ?*Button) void {
        return objc.msgSend(self, "setSectionCollapseButton:", void, .{sectionCollapseButton});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSCollectionViewItem?language=objc
pub const CollectionViewItem = opaque {
    pub const InternalInfo = objc.ExternalClass("NSCollectionViewItem", @This(), ViewController, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn collectionView(self: *@This()) ?*CollectionView {
        return objc.msgSend(self, "collectionView", ?*CollectionView, .{});
    }

    pub fn isSelected(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isSelected", objc.BOOL, .{});
    }

    pub fn setSelected(self: *@This(), selected: objc.BOOL) void {
        return objc.msgSend(self, "setSelected:", void, .{selected});
    }

    pub fn highlightState(self: *@This()) CollectionViewItemHighlightState {
        return objc.msgSend(self, "highlightState", CollectionViewItemHighlightState, .{});
    }

    pub fn setHighlightState(self: *@This(), highlightState: CollectionViewItemHighlightState) void {
        return objc.msgSend(self, "setHighlightState:", void, .{highlightState});
    }

    pub fn imageView(self: *@This()) ?*ImageView {
        return objc.msgSend(self, "imageView", ?*ImageView, .{});
    }

    pub fn setImageView(self: *@This(), imageView: ?*ImageView) void {
        return objc.msgSend(self, "setImageView:", void, .{imageView});
    }

    pub fn textField(self: *@This()) ?*TextField {
        return objc.msgSend(self, "textField", ?*TextField, .{});
    }

    pub fn setTextField(self: *@This(), textField: ?*TextField) void {
        return objc.msgSend(self, "setTextField:", void, .{textField});
    }

    pub fn draggingImageComponents(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "draggingImageComponents", ?*anyopaque, .{});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSCollectionView?language=objc
pub const CollectionView = opaque {
    pub const InternalInfo = objc.ExternalClass("NSCollectionView", @This(), View, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn reloadData(self: *@This()) void {
        return objc.msgSend(self, "reloadData", void, .{});
    }

    pub fn layoutAttributesForItemAtIndexPath(self: *@This(), indexPath: ?*foundation.IndexPath) ?*CollectionViewLayoutAttributes {
        return objc.msgSend(self, "layoutAttributesForItemAtIndexPath:", ?*CollectionViewLayoutAttributes, .{indexPath});
    }

    pub fn layoutAttributesForSupplementaryElementOfKindAtIndexPath(self: *@This(), kind: CollectionViewSupplementaryElementKind, indexPath: ?*foundation.IndexPath) ?*CollectionViewLayoutAttributes {
        return objc.msgSend(self, "layoutAttributesForSupplementaryElementOfKind:atIndexPath:", ?*CollectionViewLayoutAttributes, .{kind, indexPath});
    }

    pub fn frameForItemAtIndex(self: *@This(), index: objc.NSUInteger) foundation.Rect {
        return objc.msgSend(self, "frameForItemAtIndex:", foundation.Rect, .{index});
    }

    pub fn frameForItemAtIndexWithNumberOfItems(self: *@This(), index: objc.NSUInteger, numberOfItems: objc.NSUInteger) foundation.Rect {
        return objc.msgSend(self, "frameForItemAtIndex:withNumberOfItems:", foundation.Rect, .{index, numberOfItems});
    }

    pub fn numberOfItemsInSection(self: *@This(), section: objc.NSInteger) objc.NSInteger {
        return objc.msgSend(self, "numberOfItemsInSection:", objc.NSInteger, .{section});
    }

    pub fn selectItemsAtIndexPathsScrollPosition(self: *@This(), indexPaths: ?*anyopaque, scrollPosition: CollectionViewScrollPosition) void {
        return objc.msgSend(self, "selectItemsAtIndexPaths:scrollPosition:", void, .{indexPaths, scrollPosition});
    }

    pub fn deselectItemsAtIndexPaths(self: *@This(), indexPaths: ?*anyopaque) void {
        return objc.msgSend(self, "deselectItemsAtIndexPaths:", void, .{indexPaths});
    }

    pub fn selectAll(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "selectAll:", void, .{sender});
    }

    pub fn deselectAll(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "deselectAll:", void, .{sender});
    }

    pub fn registerClassForItemWithIdentifier(self: *@This(), itemClass: *objc.Class, identifier: UserInterfaceItemIdentifier) void {
        return objc.msgSend(self, "registerClass:forItemWithIdentifier:", void, .{itemClass, identifier});
    }

    pub fn registerNibForItemWithIdentifier(self: *@This(), nib: ?*Nib, identifier: UserInterfaceItemIdentifier) void {
        return objc.msgSend(self, "registerNib:forItemWithIdentifier:", void, .{nib, identifier});
    }

    pub fn registerClassForSupplementaryViewOfKindWithIdentifier(self: *@This(), viewClass: *objc.Class, kind: CollectionViewSupplementaryElementKind, identifier: UserInterfaceItemIdentifier) void {
        return objc.msgSend(self, "registerClass:forSupplementaryViewOfKind:withIdentifier:", void, .{viewClass, kind, identifier});
    }

    pub fn registerNibForSupplementaryViewOfKindWithIdentifier(self: *@This(), nib: ?*Nib, kind: CollectionViewSupplementaryElementKind, identifier: UserInterfaceItemIdentifier) void {
        return objc.msgSend(self, "registerNib:forSupplementaryViewOfKind:withIdentifier:", void, .{nib, kind, identifier});
    }

    pub fn makeItemWithIdentifierForIndexPath(self: *@This(), identifier: UserInterfaceItemIdentifier, indexPath: ?*foundation.IndexPath) ?*anyopaque {
        return objc.msgSend(self, "makeItemWithIdentifier:forIndexPath:", ?*anyopaque, .{identifier, indexPath});
    }

    pub fn makeSupplementaryViewOfKindWithIdentifierForIndexPath(self: *@This(), elementKind: CollectionViewSupplementaryElementKind, identifier: UserInterfaceItemIdentifier, indexPath: ?*foundation.IndexPath) ?*anyopaque {
        return objc.msgSend(self, "makeSupplementaryViewOfKind:withIdentifier:forIndexPath:", ?*anyopaque, .{elementKind, identifier, indexPath});
    }

    pub fn itemAtIndex(self: *@This(), index: objc.NSUInteger) ?*CollectionViewItem {
        return objc.msgSend(self, "itemAtIndex:", ?*CollectionViewItem, .{index});
    }

    pub fn itemAtIndexPath(self: *@This(), indexPath: ?*foundation.IndexPath) ?*CollectionViewItem {
        return objc.msgSend(self, "itemAtIndexPath:", ?*CollectionViewItem, .{indexPath});
    }

    pub fn visibleItems(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "visibleItems", ?*anyopaque, .{});
    }

    pub fn indexPathsForVisibleItems(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "indexPathsForVisibleItems", ?*anyopaque, .{});
    }

    pub fn indexPathForItem(self: *@This(), item: ?*CollectionViewItem) ?*IndexPath {
        return objc.msgSend(self, "indexPathForItem:", ?*IndexPath, .{item});
    }

    pub fn indexPathForItemAtPoint(self: *@This(), point: foundation.Point) ?*IndexPath {
        return objc.msgSend(self, "indexPathForItemAtPoint:", ?*IndexPath, .{point});
    }

    pub fn supplementaryViewForElementKindAtIndexPath(self: *@This(), elementKind: CollectionViewSupplementaryElementKind, indexPath: ?*IndexPath) ?*anyopaque {
        return objc.msgSend(self, "supplementaryViewForElementKind:atIndexPath:", ?*anyopaque, .{elementKind, indexPath});
    }

    pub fn visibleSupplementaryViewsOfKind(self: *@This(), elementKind: CollectionViewSupplementaryElementKind) ?*anyopaque {
        return objc.msgSend(self, "visibleSupplementaryViewsOfKind:", ?*anyopaque, .{elementKind});
    }

    pub fn indexPathsForVisibleSupplementaryElementsOfKind(self: *@This(), elementKind: CollectionViewSupplementaryElementKind) ?*anyopaque {
        return objc.msgSend(self, "indexPathsForVisibleSupplementaryElementsOfKind:", ?*anyopaque, .{elementKind});
    }

    pub fn insertSections(self: *@This(), sections: ?*IndexSet) void {
        return objc.msgSend(self, "insertSections:", void, .{sections});
    }

    pub fn deleteSections(self: *@This(), sections: ?*IndexSet) void {
        return objc.msgSend(self, "deleteSections:", void, .{sections});
    }

    pub fn reloadSections(self: *@This(), sections: ?*IndexSet) void {
        return objc.msgSend(self, "reloadSections:", void, .{sections});
    }

    pub fn moveSectionToSection(self: *@This(), section: objc.NSInteger, newSection: objc.NSInteger) void {
        return objc.msgSend(self, "moveSection:toSection:", void, .{section, newSection});
    }

    pub fn insertItemsAtIndexPaths(self: *@This(), indexPaths: ?*anyopaque) void {
        return objc.msgSend(self, "insertItemsAtIndexPaths:", void, .{indexPaths});
    }

    pub fn deleteItemsAtIndexPaths(self: *@This(), indexPaths: ?*anyopaque) void {
        return objc.msgSend(self, "deleteItemsAtIndexPaths:", void, .{indexPaths});
    }

    pub fn reloadItemsAtIndexPaths(self: *@This(), indexPaths: ?*anyopaque) void {
        return objc.msgSend(self, "reloadItemsAtIndexPaths:", void, .{indexPaths});
    }

    pub fn moveItemAtIndexPathToIndexPath(self: *@This(), indexPath: ?*IndexPath, newIndexPath: ?*IndexPath) void {
        return objc.msgSend(self, "moveItemAtIndexPath:toIndexPath:", void, .{indexPath, newIndexPath});
    }

    pub fn performBatchUpdatesCompletionHandler(self: *@This(), updates: *const fn() callconv(.C) void, completionHandler: *const fn(objc.BOOL) callconv(.C) void) void {
        return objc.msgSend(self, "performBatchUpdates:completionHandler:", void, .{updates, completionHandler});
    }

    pub fn toggleSectionCollapse(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "toggleSectionCollapse:", void, .{sender});
    }

    pub fn scrollToItemsAtIndexPathsScrollPosition(self: *@This(), indexPaths: ?*anyopaque, scrollPosition: CollectionViewScrollPosition) void {
        return objc.msgSend(self, "scrollToItemsAtIndexPaths:scrollPosition:", void, .{indexPaths, scrollPosition});
    }

    pub fn setDraggingSourceOperationMaskForLocal(self: *@This(), dragOperationMask: DragOperation, localDestination: objc.BOOL) void {
        return objc.msgSend(self, "setDraggingSourceOperationMask:forLocal:", void, .{dragOperationMask, localDestination});
    }

    pub fn draggingImageForItemsAtIndexPathsWithEventOffset(self: *@This(), indexPaths: ?*anyopaque, event: ?*Event, dragImageOffset: foundation.PointPointer) ?*Image {
        return objc.msgSend(self, "draggingImageForItemsAtIndexPaths:withEvent:offset:", ?*Image, .{indexPaths, event, dragImageOffset});
    }

    pub fn draggingImageForItemsAtIndexesWithEventOffset(self: *@This(), indexes: ?*IndexSet, event: ?*Event, dragImageOffset: foundation.PointPointer) ?*Image {
        return objc.msgSend(self, "draggingImageForItemsAtIndexes:withEvent:offset:", ?*Image, .{indexes, event, dragImageOffset});
    }

    pub fn dataSource(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "dataSource", ?*anyopaque, .{});
    }

    pub fn setDataSource(self: *@This(), dataSource: ?*anyopaque) void {
        return objc.msgSend(self, "setDataSource:", void, .{dataSource});
    }

    pub fn prefetchDataSource(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "prefetchDataSource", ?*anyopaque, .{});
    }

    pub fn setPrefetchDataSource(self: *@This(), prefetchDataSource: ?*anyopaque) void {
        return objc.msgSend(self, "setPrefetchDataSource:", void, .{prefetchDataSource});
    }

    pub fn content(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "content", ?*anyopaque, .{});
    }

    pub fn setContent(self: *@This(), content: ?*anyopaque) void {
        return objc.msgSend(self, "setContent:", void, .{content});
    }

    pub fn delegate(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "delegate", ?*anyopaque, .{});
    }

    pub fn setDelegate(self: *@This(), delegate: ?*anyopaque) void {
        return objc.msgSend(self, "setDelegate:", void, .{delegate});
    }

    pub fn backgroundView(self: *@This()) ?*View {
        return objc.msgSend(self, "backgroundView", ?*View, .{});
    }

    pub fn setBackgroundView(self: *@This(), backgroundView: ?*View) void {
        return objc.msgSend(self, "setBackgroundView:", void, .{backgroundView});
    }

    pub fn backgroundViewScrollsWithContent(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "backgroundViewScrollsWithContent", objc.BOOL, .{});
    }

    pub fn setBackgroundViewScrollsWithContent(self: *@This(), backgroundViewScrollsWithContent: objc.BOOL) void {
        return objc.msgSend(self, "setBackgroundViewScrollsWithContent:", void, .{backgroundViewScrollsWithContent});
    }

    pub fn collectionViewLayout(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "collectionViewLayout", ?*anyopaque, .{});
    }

    pub fn setCollectionViewLayout(self: *@This(), collectionViewLayout: ?*anyopaque) void {
        return objc.msgSend(self, "setCollectionViewLayout:", void, .{collectionViewLayout});
    }

    pub fn backgroundColors(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "backgroundColors", ?*anyopaque, .{});
    }

    pub fn setBackgroundColors(self: *@This(), backgroundColors: ?*anyopaque) void {
        return objc.msgSend(self, "setBackgroundColors:", void, .{backgroundColors});
    }

    pub fn numberOfSections(self: *@This()) objc.NSInteger {
        return objc.msgSend(self, "numberOfSections", objc.NSInteger, .{});
    }

    pub fn isFirstResponder(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isFirstResponder", objc.BOOL, .{});
    }

    pub fn isSelectable(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isSelectable", objc.BOOL, .{});
    }

    pub fn setSelectable(self: *@This(), selectable: objc.BOOL) void {
        return objc.msgSend(self, "setSelectable:", void, .{selectable});
    }

    pub fn allowsEmptySelection(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "allowsEmptySelection", objc.BOOL, .{});
    }

    pub fn setAllowsEmptySelection(self: *@This(), allowsEmptySelection: objc.BOOL) void {
        return objc.msgSend(self, "setAllowsEmptySelection:", void, .{allowsEmptySelection});
    }

    pub fn allowsMultipleSelection(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "allowsMultipleSelection", objc.BOOL, .{});
    }

    pub fn setAllowsMultipleSelection(self: *@This(), allowsMultipleSelection: objc.BOOL) void {
        return objc.msgSend(self, "setAllowsMultipleSelection:", void, .{allowsMultipleSelection});
    }

    pub fn selectionIndexes(self: *@This()) ?*IndexSet {
        return objc.msgSend(self, "selectionIndexes", ?*IndexSet, .{});
    }

    pub fn setSelectionIndexes(self: *@This(), selectionIndexes: ?*IndexSet) void {
        return objc.msgSend(self, "setSelectionIndexes:", void, .{selectionIndexes});
    }

    pub fn selectionIndexPaths(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "selectionIndexPaths", ?*anyopaque, .{});
    }

    pub fn setSelectionIndexPaths(self: *@This(), selectionIndexPaths: ?*anyopaque) void {
        return objc.msgSend(self, "setSelectionIndexPaths:", void, .{selectionIndexPaths});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSCollectionViewDataSource?language=objc
pub const CollectionViewDataSource = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{objc.NSObject, });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn collectionViewNumberOfItemsInSection(self: *@This(), collectionView: ?*CollectionView, section: objc.NSInteger) objc.NSInteger {
        return objc.msgSend(self, "collectionView:numberOfItemsInSection:", objc.NSInteger, .{collectionView, section});
    }

    pub fn collectionViewItemForRepresentedObjectAtIndexPath(self: *@This(), collectionView: ?*CollectionView, indexPath: ?*IndexPath) ?*CollectionViewItem {
        return objc.msgSend(self, "collectionView:itemForRepresentedObjectAtIndexPath:", ?*CollectionViewItem, .{collectionView, indexPath});
    }

    pub fn numberOfSectionsInCollectionView(self: *@This(), collectionView: ?*CollectionView) objc.NSInteger {
        return objc.msgSend(self, "numberOfSectionsInCollectionView:", objc.NSInteger, .{collectionView});
    }

    pub fn collectionViewViewForSupplementaryElementOfKindAtIndexPath(self: *@This(), collectionView: ?*CollectionView, kind: CollectionViewSupplementaryElementKind, indexPath: ?*IndexPath) ?*View {
        return objc.msgSend(self, "collectionView:viewForSupplementaryElementOfKind:atIndexPath:", ?*View, .{collectionView, kind, indexPath});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSCollectionViewPrefetching?language=objc
pub const CollectionViewPrefetching = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{objc.NSObject, });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn collectionViewPrefetchItemsAtIndexPaths(self: *@This(), collectionView: ?*CollectionView, indexPaths: ?*anyopaque) void {
        return objc.msgSend(self, "collectionView:prefetchItemsAtIndexPaths:", void, .{collectionView, indexPaths});
    }

    pub fn collectionViewCancelPrefetchingForItemsAtIndexPaths(self: *@This(), collectionView: ?*CollectionView, indexPaths: ?*anyopaque) void {
        return objc.msgSend(self, "collectionView:cancelPrefetchingForItemsAtIndexPaths:", void, .{collectionView, indexPaths});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSCollectionViewDelegate?language=objc
pub const CollectionViewDelegate = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{objc.NSObject, });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn collectionViewCanDragItemsAtIndexPathsWithEvent(self: *@This(), collectionView: ?*CollectionView, indexPaths: ?*anyopaque, event: ?*Event) objc.BOOL {
        return objc.msgSend(self, "collectionView:canDragItemsAtIndexPaths:withEvent:", objc.BOOL, .{collectionView, indexPaths, event});
    }

    pub fn collectionViewCanDragItemsAtIndexesWithEvent(self: *@This(), collectionView: ?*CollectionView, indexes: ?*IndexSet, event: ?*Event) objc.BOOL {
        return objc.msgSend(self, "collectionView:canDragItemsAtIndexes:withEvent:", objc.BOOL, .{collectionView, indexes, event});
    }

    pub fn collectionViewWriteItemsAtIndexPathsToPasteboard(self: *@This(), collectionView: ?*CollectionView, indexPaths: ?*anyopaque, pasteboard: ?*Pasteboard) objc.BOOL {
        return objc.msgSend(self, "collectionView:writeItemsAtIndexPaths:toPasteboard:", objc.BOOL, .{collectionView, indexPaths, pasteboard});
    }

    pub fn collectionViewWriteItemsAtIndexesToPasteboard(self: *@This(), collectionView: ?*CollectionView, indexes: ?*IndexSet, pasteboard: ?*Pasteboard) objc.BOOL {
        return objc.msgSend(self, "collectionView:writeItemsAtIndexes:toPasteboard:", objc.BOOL, .{collectionView, indexes, pasteboard});
    }

    pub fn collectionViewNamesOfPromisedFilesDroppedAtDestinationForDraggedItemsAtIndexPaths(self: *@This(), collectionView: ?*CollectionView, dropURL: ?*URL, indexPaths: ?*anyopaque) ?*anyopaque {
        return objc.msgSend(self, "collectionView:namesOfPromisedFilesDroppedAtDestination:forDraggedItemsAtIndexPaths:", ?*anyopaque, .{collectionView, dropURL, indexPaths});
    }

    pub fn collectionViewNamesOfPromisedFilesDroppedAtDestinationForDraggedItemsAtIndexes(self: *@This(), collectionView: ?*CollectionView, dropURL: ?*URL, indexes: ?*IndexSet) ?*anyopaque {
        return objc.msgSend(self, "collectionView:namesOfPromisedFilesDroppedAtDestination:forDraggedItemsAtIndexes:", ?*anyopaque, .{collectionView, dropURL, indexes});
    }

    pub fn collectionViewDraggingImageForItemsAtIndexPathsWithEventOffset(self: *@This(), collectionView: ?*CollectionView, indexPaths: ?*anyopaque, event: ?*Event, dragImageOffset: foundation.PointPointer, ) ?*Image {
        return objc.msgSend(self, "collectionView:draggingImageForItemsAtIndexPaths:withEvent:offset:", ?*Image, .{collectionView, indexPaths, event, dragImageOffset, });
    }

    pub fn collectionViewDraggingImageForItemsAtIndexesWithEventOffset(self: *@This(), collectionView: ?*CollectionView, indexes: ?*IndexSet, event: ?*Event, dragImageOffset: foundation.PointPointer, ) ?*Image {
        return objc.msgSend(self, "collectionView:draggingImageForItemsAtIndexes:withEvent:offset:", ?*Image, .{collectionView, indexes, event, dragImageOffset, });
    }

    pub fn collectionViewValidateDropProposedIndexPathDropOperation(self: *@This(), collectionView: ?*CollectionView, draggingInfo: ?*anyopaque, proposedDropIndexPath: ?*?*IndexPath, proposedDropOperation: ?*CollectionViewDropOperation, ) DragOperation {
        return objc.msgSend(self, "collectionView:validateDrop:proposedIndexPath:dropOperation:", DragOperation, .{collectionView, draggingInfo, proposedDropIndexPath, proposedDropOperation, });
    }

    pub fn collectionViewValidateDropProposedIndexDropOperation(self: *@This(), collectionView: ?*CollectionView, draggingInfo: ?*anyopaque, proposedDropIndex: ?*objc.NSInteger, proposedDropOperation: ?*CollectionViewDropOperation, ) DragOperation {
        return objc.msgSend(self, "collectionView:validateDrop:proposedIndex:dropOperation:", DragOperation, .{collectionView, draggingInfo, proposedDropIndex, proposedDropOperation, });
    }

    pub fn collectionViewAcceptDropIndexPathDropOperation(self: *@This(), collectionView: ?*CollectionView, draggingInfo: ?*anyopaque, indexPath: ?*IndexPath, dropOperation: CollectionViewDropOperation, ) objc.BOOL {
        return objc.msgSend(self, "collectionView:acceptDrop:indexPath:dropOperation:", objc.BOOL, .{collectionView, draggingInfo, indexPath, dropOperation, });
    }

    pub fn collectionViewAcceptDropIndexDropOperation(self: *@This(), collectionView: ?*CollectionView, draggingInfo: ?*anyopaque, index: objc.NSInteger, dropOperation: CollectionViewDropOperation, ) objc.BOOL {
        return objc.msgSend(self, "collectionView:acceptDrop:index:dropOperation:", objc.BOOL, .{collectionView, draggingInfo, index, dropOperation, });
    }

    pub fn collectionViewPasteboardWriterForItemAtIndexPath(self: *@This(), collectionView: ?*CollectionView, indexPath: ?*IndexPath) ?*anyopaque {
        return objc.msgSend(self, "collectionView:pasteboardWriterForItemAtIndexPath:", ?*anyopaque, .{collectionView, indexPath});
    }

    pub fn collectionViewPasteboardWriterForItemAtIndex(self: *@This(), collectionView: ?*CollectionView, index: objc.NSUInteger) ?*anyopaque {
        return objc.msgSend(self, "collectionView:pasteboardWriterForItemAtIndex:", ?*anyopaque, .{collectionView, index});
    }

    pub fn collectionViewDraggingSessionWillBeginAtPointForItemsAtIndexPaths(self: *@This(), collectionView: ?*CollectionView, session: ?*DraggingSession, screenPoint: foundation.Point, indexPaths: ?*anyopaque, ) void {
        return objc.msgSend(self, "collectionView:draggingSession:willBeginAtPoint:forItemsAtIndexPaths:", void, .{collectionView, session, screenPoint, indexPaths, });
    }

    pub fn collectionViewDraggingSessionWillBeginAtPointForItemsAtIndexes(self: *@This(), collectionView: ?*CollectionView, session: ?*DraggingSession, screenPoint: foundation.Point, indexes: ?*IndexSet, ) void {
        return objc.msgSend(self, "collectionView:draggingSession:willBeginAtPoint:forItemsAtIndexes:", void, .{collectionView, session, screenPoint, indexes, });
    }

    pub fn collectionViewDraggingSessionEndedAtPointDragOperation(self: *@This(), collectionView: ?*CollectionView, session: ?*DraggingSession, screenPoint: foundation.Point, operation: DragOperation, ) void {
        return objc.msgSend(self, "collectionView:draggingSession:endedAtPoint:dragOperation:", void, .{collectionView, session, screenPoint, operation, });
    }

    pub fn collectionViewUpdateDraggingItemsForDrag(self: *@This(), collectionView: ?*CollectionView, draggingInfo: ?*anyopaque) void {
        return objc.msgSend(self, "collectionView:updateDraggingItemsForDrag:", void, .{collectionView, draggingInfo});
    }

    pub fn collectionViewShouldChangeItemsAtIndexPathsToHighlightState(self: *@This(), collectionView: ?*CollectionView, indexPaths: ?*anyopaque, highlightState: CollectionViewItemHighlightState) ?*anyopaque {
        return objc.msgSend(self, "collectionView:shouldChangeItemsAtIndexPaths:toHighlightState:", ?*anyopaque, .{collectionView, indexPaths, highlightState});
    }

    pub fn collectionViewDidChangeItemsAtIndexPathsToHighlightState(self: *@This(), collectionView: ?*CollectionView, indexPaths: ?*anyopaque, highlightState: CollectionViewItemHighlightState) void {
        return objc.msgSend(self, "collectionView:didChangeItemsAtIndexPaths:toHighlightState:", void, .{collectionView, indexPaths, highlightState});
    }

    pub fn collectionViewShouldSelectItemsAtIndexPaths(self: *@This(), collectionView: ?*CollectionView, indexPaths: ?*anyopaque) ?*anyopaque {
        return objc.msgSend(self, "collectionView:shouldSelectItemsAtIndexPaths:", ?*anyopaque, .{collectionView, indexPaths});
    }

    pub fn collectionViewShouldDeselectItemsAtIndexPaths(self: *@This(), collectionView: ?*CollectionView, indexPaths: ?*anyopaque) ?*anyopaque {
        return objc.msgSend(self, "collectionView:shouldDeselectItemsAtIndexPaths:", ?*anyopaque, .{collectionView, indexPaths});
    }

    pub fn collectionViewDidSelectItemsAtIndexPaths(self: *@This(), collectionView: ?*CollectionView, indexPaths: ?*anyopaque) void {
        return objc.msgSend(self, "collectionView:didSelectItemsAtIndexPaths:", void, .{collectionView, indexPaths});
    }

    pub fn collectionViewDidDeselectItemsAtIndexPaths(self: *@This(), collectionView: ?*CollectionView, indexPaths: ?*anyopaque) void {
        return objc.msgSend(self, "collectionView:didDeselectItemsAtIndexPaths:", void, .{collectionView, indexPaths});
    }

    pub fn collectionViewWillDisplayItemForRepresentedObjectAtIndexPath(self: *@This(), collectionView: ?*CollectionView, item: ?*CollectionViewItem, indexPath: ?*IndexPath) void {
        return objc.msgSend(self, "collectionView:willDisplayItem:forRepresentedObjectAtIndexPath:", void, .{collectionView, item, indexPath});
    }

    pub fn collectionViewWillDisplaySupplementaryViewForElementKindAtIndexPath(self: *@This(), collectionView: ?*CollectionView, view: ?*View, elementKind: CollectionViewSupplementaryElementKind, indexPath: ?*IndexPath, ) void {
        return objc.msgSend(self, "collectionView:willDisplaySupplementaryView:forElementKind:atIndexPath:", void, .{collectionView, view, elementKind, indexPath, });
    }

    pub fn collectionViewDidEndDisplayingItemForRepresentedObjectAtIndexPath(self: *@This(), collectionView: ?*CollectionView, item: ?*CollectionViewItem, indexPath: ?*IndexPath) void {
        return objc.msgSend(self, "collectionView:didEndDisplayingItem:forRepresentedObjectAtIndexPath:", void, .{collectionView, item, indexPath});
    }

    pub fn collectionViewDidEndDisplayingSupplementaryViewForElementOfKindAtIndexPath(self: *@This(), collectionView: ?*CollectionView, view: ?*View, elementKind: CollectionViewSupplementaryElementKind, indexPath: ?*IndexPath, ) void {
        return objc.msgSend(self, "collectionView:didEndDisplayingSupplementaryView:forElementOfKind:atIndexPath:", void, .{collectionView, view, elementKind, indexPath, });
    }

    pub fn collectionViewTransitionLayoutForOldLayoutNewLayout(self: *@This(), collectionView: ?*CollectionView, fromLayout: ?*CollectionViewLayout, toLayout: ?*CollectionViewLayout) ?*CollectionViewTransitionLayout {
        return objc.msgSend(self, "collectionView:transitionLayoutForOldLayout:newLayout:", ?*CollectionViewTransitionLayout, .{collectionView, fromLayout, toLayout});
    }

};

pub const CollectionElementCategory = enum(objc.NSInteger) {
    Item = 0,
    SupplementaryView = 1,
    DecorationView = 2,
    InterItemGap = 3,
};

pub const CollectionViewDecorationElementKind = ?*String;

/// https://developer.apple.com/documentation/AppKit/NSCollectionViewLayoutAttributes?language=objc
pub const CollectionViewLayoutAttributes = opaque {
    pub const InternalInfo = objc.ExternalClass("NSCollectionViewLayoutAttributes", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn layoutAttributesForItemWithIndexPath(self: *@This(), indexPath: ?*IndexPath) *@This() {
        return objc.msgSend(self, "layoutAttributesForItemWithIndexPath:", *@This(), .{indexPath});
    }

    pub fn layoutAttributesForInterItemGapBeforeIndexPath(self: *@This(), indexPath: ?*IndexPath) *@This() {
        return objc.msgSend(self, "layoutAttributesForInterItemGapBeforeIndexPath:", *@This(), .{indexPath});
    }

    pub fn layoutAttributesForSupplementaryViewOfKindWithIndexPath(self: *@This(), elementKind: CollectionViewSupplementaryElementKind, indexPath: ?*IndexPath) *@This() {
        return objc.msgSend(self, "layoutAttributesForSupplementaryViewOfKind:withIndexPath:", *@This(), .{elementKind, indexPath});
    }

    pub fn layoutAttributesForDecorationViewOfKindWithIndexPath(self: *@This(), decorationViewKind: CollectionViewDecorationElementKind, indexPath: ?*IndexPath) *@This() {
        return objc.msgSend(self, "layoutAttributesForDecorationViewOfKind:withIndexPath:", *@This(), .{decorationViewKind, indexPath});
    }

    pub fn frame(self: *@This()) foundation.Rect {
        return objc.msgSend(self, "frame", foundation.Rect, .{});
    }

    pub fn setFrame(self: *@This(), frame: foundation.Rect) void {
        return objc.msgSend(self, "setFrame:", void, .{frame});
    }

    pub fn size(self: *@This()) foundation.Size {
        return objc.msgSend(self, "size", foundation.Size, .{});
    }

    pub fn setSize(self: *@This(), size: foundation.Size) void {
        return objc.msgSend(self, "setSize:", void, .{size});
    }

    pub fn alpha(self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(self, "alpha", core_foundation.CGFloat, .{});
    }

    pub fn setAlpha(self: *@This(), alpha: core_foundation.CGFloat) void {
        return objc.msgSend(self, "setAlpha:", void, .{alpha});
    }

    pub fn zIndex(self: *@This()) objc.NSInteger {
        return objc.msgSend(self, "zIndex", objc.NSInteger, .{});
    }

    pub fn setZIndex(self: *@This(), zIndex: objc.NSInteger) void {
        return objc.msgSend(self, "setZIndex:", void, .{zIndex});
    }

    pub fn isHidden(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isHidden", objc.BOOL, .{});
    }

    pub fn setHidden(self: *@This(), hidden: objc.BOOL) void {
        return objc.msgSend(self, "setHidden:", void, .{hidden});
    }

    pub fn indexPath(self: *@This()) ?*IndexPath {
        return objc.msgSend(self, "indexPath", ?*IndexPath, .{});
    }

    pub fn setIndexPath(self: *@This(), indexPath: ?*IndexPath) void {
        return objc.msgSend(self, "setIndexPath:", void, .{indexPath});
    }

    pub fn representedElementCategory(self: *@This()) CollectionElementCategory {
        return objc.msgSend(self, "representedElementCategory", CollectionElementCategory, .{});
    }

    pub fn representedElementKind(self: *@This()) ?*String {
        return objc.msgSend(self, "representedElementKind", ?*String, .{});
    }

};

pub const CollectionUpdateAction = enum(objc.NSInteger) {
    Insert = 0,
    Delete = 1,
    Reload = 2,
    Move = 3,
    None = 4,
};

/// https://developer.apple.com/documentation/AppKit/NSCollectionViewUpdateItem?language=objc
pub const CollectionViewUpdateItem = opaque {
    pub const InternalInfo = objc.ExternalClass("NSCollectionViewUpdateItem", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn indexPathBeforeUpdate(self: *@This()) ?*IndexPath {
        return objc.msgSend(self, "indexPathBeforeUpdate", ?*IndexPath, .{});
    }

    pub fn indexPathAfterUpdate(self: *@This()) ?*IndexPath {
        return objc.msgSend(self, "indexPathAfterUpdate", ?*IndexPath, .{});
    }

    pub fn updateAction(self: *@This()) CollectionUpdateAction {
        return objc.msgSend(self, "updateAction", CollectionUpdateAction, .{});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSCollectionViewLayoutInvalidationContext?language=objc
pub const CollectionViewLayoutInvalidationContext = opaque {
    pub const InternalInfo = objc.ExternalClass("NSCollectionViewLayoutInvalidationContext", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn invalidateItemsAtIndexPaths(self: *@This(), indexPaths: ?*anyopaque) void {
        return objc.msgSend(self, "invalidateItemsAtIndexPaths:", void, .{indexPaths});
    }

    pub fn invalidateSupplementaryElementsOfKindAtIndexPaths(self: *@This(), elementKind: CollectionViewSupplementaryElementKind, indexPaths: ?*anyopaque) void {
        return objc.msgSend(self, "invalidateSupplementaryElementsOfKind:atIndexPaths:", void, .{elementKind, indexPaths});
    }

    pub fn invalidateDecorationElementsOfKindAtIndexPaths(self: *@This(), elementKind: CollectionViewDecorationElementKind, indexPaths: ?*anyopaque) void {
        return objc.msgSend(self, "invalidateDecorationElementsOfKind:atIndexPaths:", void, .{elementKind, indexPaths});
    }

    pub fn invalidateEverything(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "invalidateEverything", objc.BOOL, .{});
    }

    pub fn invalidateDataSourceCounts(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "invalidateDataSourceCounts", objc.BOOL, .{});
    }

    pub fn invalidatedItemIndexPaths(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "invalidatedItemIndexPaths", ?*anyopaque, .{});
    }

    pub fn invalidatedSupplementaryIndexPaths(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "invalidatedSupplementaryIndexPaths", ?*anyopaque, .{});
    }

    pub fn invalidatedDecorationIndexPaths(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "invalidatedDecorationIndexPaths", ?*anyopaque, .{});
    }

    pub fn contentOffsetAdjustment(self: *@This()) foundation.Point {
        return objc.msgSend(self, "contentOffsetAdjustment", foundation.Point, .{});
    }

    pub fn setContentOffsetAdjustment(self: *@This(), contentOffsetAdjustment: foundation.Point) void {
        return objc.msgSend(self, "setContentOffsetAdjustment:", void, .{contentOffsetAdjustment});
    }

    pub fn contentSizeAdjustment(self: *@This()) foundation.Size {
        return objc.msgSend(self, "contentSizeAdjustment", foundation.Size, .{});
    }

    pub fn setContentSizeAdjustment(self: *@This(), contentSizeAdjustment: foundation.Size) void {
        return objc.msgSend(self, "setContentSizeAdjustment:", void, .{contentSizeAdjustment});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSCollectionViewLayout?language=objc
pub const CollectionViewLayout = opaque {
    pub const InternalInfo = objc.ExternalClass("NSCollectionViewLayout", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn invalidateLayout(self: *@This()) void {
        return objc.msgSend(self, "invalidateLayout", void, .{});
    }

    pub fn invalidateLayoutWithContext(self: *@This(), context: ?*CollectionViewLayoutInvalidationContext) void {
        return objc.msgSend(self, "invalidateLayoutWithContext:", void, .{context});
    }

    pub fn registerClassForDecorationViewOfKind(self: *@This(), viewClass: *objc.Class, elementKind: CollectionViewDecorationElementKind) void {
        return objc.msgSend(self, "registerClass:forDecorationViewOfKind:", void, .{viewClass, elementKind});
    }

    pub fn registerNibForDecorationViewOfKind(self: *@This(), nib: ?*Nib, elementKind: CollectionViewDecorationElementKind) void {
        return objc.msgSend(self, "registerNib:forDecorationViewOfKind:", void, .{nib, elementKind});
    }

    pub fn collectionView(self: *@This()) ?*CollectionView {
        return objc.msgSend(self, "collectionView", ?*CollectionView, .{});
    }

};

pub const CollectionViewScrollDirection = enum(objc.NSInteger) {
    Vertical = 0,
    Horizontal = 1,
};

/// https://developer.apple.com/documentation/AppKit/NSCollectionViewFlowLayoutInvalidationContext?language=objc
pub const CollectionViewFlowLayoutInvalidationContext = opaque {
    pub const InternalInfo = objc.ExternalClass("NSCollectionViewFlowLayoutInvalidationContext", @This(), CollectionViewLayoutInvalidationContext, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn invalidateFlowLayoutDelegateMetrics(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "invalidateFlowLayoutDelegateMetrics", objc.BOOL, .{});
    }

    pub fn setInvalidateFlowLayoutDelegateMetrics(self: *@This(), invalidateFlowLayoutDelegateMetrics: objc.BOOL) void {
        return objc.msgSend(self, "setInvalidateFlowLayoutDelegateMetrics:", void, .{invalidateFlowLayoutDelegateMetrics});
    }

    pub fn invalidateFlowLayoutAttributes(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "invalidateFlowLayoutAttributes", objc.BOOL, .{});
    }

    pub fn setInvalidateFlowLayoutAttributes(self: *@This(), invalidateFlowLayoutAttributes: objc.BOOL) void {
        return objc.msgSend(self, "setInvalidateFlowLayoutAttributes:", void, .{invalidateFlowLayoutAttributes});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSCollectionViewDelegateFlowLayout?language=objc
pub const CollectionViewDelegateFlowLayout = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{CollectionViewDelegate, });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn collectionViewLayoutSizeForItemAtIndexPath(self: *@This(), collectionView: ?*CollectionView, collectionViewLayout: ?*CollectionViewLayout, indexPath: ?*IndexPath) foundation.Size {
        return objc.msgSend(self, "collectionView:layout:sizeForItemAtIndexPath:", foundation.Size, .{collectionView, collectionViewLayout, indexPath});
    }

    pub fn collectionViewLayoutInsetForSectionAtIndex(self: *@This(), collectionView: ?*CollectionView, collectionViewLayout: ?*CollectionViewLayout, section: objc.NSInteger) foundation.EdgeInsets {
        return objc.msgSend(self, "collectionView:layout:insetForSectionAtIndex:", foundation.EdgeInsets, .{collectionView, collectionViewLayout, section});
    }

    pub fn collectionViewLayoutMinimumLineSpacingForSectionAtIndex(self: *@This(), collectionView: ?*CollectionView, collectionViewLayout: ?*CollectionViewLayout, section: objc.NSInteger) core_foundation.CGFloat {
        return objc.msgSend(self, "collectionView:layout:minimumLineSpacingForSectionAtIndex:", core_foundation.CGFloat, .{collectionView, collectionViewLayout, section});
    }

    pub fn collectionViewLayoutMinimumInteritemSpacingForSectionAtIndex(self: *@This(), collectionView: ?*CollectionView, collectionViewLayout: ?*CollectionViewLayout, section: objc.NSInteger) core_foundation.CGFloat {
        return objc.msgSend(self, "collectionView:layout:minimumInteritemSpacingForSectionAtIndex:", core_foundation.CGFloat, .{collectionView, collectionViewLayout, section});
    }

    pub fn collectionViewLayoutReferenceSizeForHeaderInSection(self: *@This(), collectionView: ?*CollectionView, collectionViewLayout: ?*CollectionViewLayout, section: objc.NSInteger) foundation.Size {
        return objc.msgSend(self, "collectionView:layout:referenceSizeForHeaderInSection:", foundation.Size, .{collectionView, collectionViewLayout, section});
    }

    pub fn collectionViewLayoutReferenceSizeForFooterInSection(self: *@This(), collectionView: ?*CollectionView, collectionViewLayout: ?*CollectionViewLayout, section: objc.NSInteger) foundation.Size {
        return objc.msgSend(self, "collectionView:layout:referenceSizeForFooterInSection:", foundation.Size, .{collectionView, collectionViewLayout, section});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSCollectionViewFlowLayout?language=objc
pub const CollectionViewFlowLayout = opaque {
    pub const InternalInfo = objc.ExternalClass("NSCollectionViewFlowLayout", @This(), CollectionViewLayout, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn sectionAtIndexIsCollapsed(self: *@This(), sectionIndex: objc.NSUInteger) objc.BOOL {
        return objc.msgSend(self, "sectionAtIndexIsCollapsed:", objc.BOOL, .{sectionIndex});
    }

    pub fn collapseSectionAtIndex(self: *@This(), sectionIndex: objc.NSUInteger) void {
        return objc.msgSend(self, "collapseSectionAtIndex:", void, .{sectionIndex});
    }

    pub fn expandSectionAtIndex(self: *@This(), sectionIndex: objc.NSUInteger) void {
        return objc.msgSend(self, "expandSectionAtIndex:", void, .{sectionIndex});
    }

    pub fn minimumLineSpacing(self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(self, "minimumLineSpacing", core_foundation.CGFloat, .{});
    }

    pub fn setMinimumLineSpacing(self: *@This(), minimumLineSpacing: core_foundation.CGFloat) void {
        return objc.msgSend(self, "setMinimumLineSpacing:", void, .{minimumLineSpacing});
    }

    pub fn minimumInteritemSpacing(self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(self, "minimumInteritemSpacing", core_foundation.CGFloat, .{});
    }

    pub fn setMinimumInteritemSpacing(self: *@This(), minimumInteritemSpacing: core_foundation.CGFloat) void {
        return objc.msgSend(self, "setMinimumInteritemSpacing:", void, .{minimumInteritemSpacing});
    }

    pub fn itemSize(self: *@This()) foundation.Size {
        return objc.msgSend(self, "itemSize", foundation.Size, .{});
    }

    pub fn setItemSize(self: *@This(), itemSize: foundation.Size) void {
        return objc.msgSend(self, "setItemSize:", void, .{itemSize});
    }

    pub fn estimatedItemSize(self: *@This()) foundation.Size {
        return objc.msgSend(self, "estimatedItemSize", foundation.Size, .{});
    }

    pub fn setEstimatedItemSize(self: *@This(), estimatedItemSize: foundation.Size) void {
        return objc.msgSend(self, "setEstimatedItemSize:", void, .{estimatedItemSize});
    }

    pub fn scrollDirection(self: *@This()) CollectionViewScrollDirection {
        return objc.msgSend(self, "scrollDirection", CollectionViewScrollDirection, .{});
    }

    pub fn setScrollDirection(self: *@This(), scrollDirection: CollectionViewScrollDirection) void {
        return objc.msgSend(self, "setScrollDirection:", void, .{scrollDirection});
    }

    pub fn headerReferenceSize(self: *@This()) foundation.Size {
        return objc.msgSend(self, "headerReferenceSize", foundation.Size, .{});
    }

    pub fn setHeaderReferenceSize(self: *@This(), headerReferenceSize: foundation.Size) void {
        return objc.msgSend(self, "setHeaderReferenceSize:", void, .{headerReferenceSize});
    }

    pub fn footerReferenceSize(self: *@This()) foundation.Size {
        return objc.msgSend(self, "footerReferenceSize", foundation.Size, .{});
    }

    pub fn setFooterReferenceSize(self: *@This(), footerReferenceSize: foundation.Size) void {
        return objc.msgSend(self, "setFooterReferenceSize:", void, .{footerReferenceSize});
    }

    pub fn sectionInset(self: *@This()) foundation.EdgeInsets {
        return objc.msgSend(self, "sectionInset", foundation.EdgeInsets, .{});
    }

    pub fn setSectionInset(self: *@This(), sectionInset: foundation.EdgeInsets) void {
        return objc.msgSend(self, "setSectionInset:", void, .{sectionInset});
    }

    pub fn sectionHeadersPinToVisibleBounds(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "sectionHeadersPinToVisibleBounds", objc.BOOL, .{});
    }

    pub fn setSectionHeadersPinToVisibleBounds(self: *@This(), sectionHeadersPinToVisibleBounds: objc.BOOL) void {
        return objc.msgSend(self, "setSectionHeadersPinToVisibleBounds:", void, .{sectionHeadersPinToVisibleBounds});
    }

    pub fn sectionFootersPinToVisibleBounds(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "sectionFootersPinToVisibleBounds", objc.BOOL, .{});
    }

    pub fn setSectionFootersPinToVisibleBounds(self: *@This(), sectionFootersPinToVisibleBounds: objc.BOOL) void {
        return objc.msgSend(self, "setSectionFootersPinToVisibleBounds:", void, .{sectionFootersPinToVisibleBounds});
    }

};

pub const DirectionalRectEdge = enum(objc.NSUInteger) {
    None = 0,
    Top = 1,
    Leading = 2,
    Bottom = 4,
    Trailing = 8,
    All = 15,
};

pub const DirectionalEdgeInsets = extern struct {
    top: core_foundation.CGFloat,
    leading: core_foundation.CGFloat,
    bottom: core_foundation.CGFloat,
    trailing: core_foundation.CGFloat,
};

pub const RectAlignment = enum(objc.NSInteger) {
    None = 0,
    Top = 1,
    TopLeading = 2,
    Leading = 3,
    BottomLeading = 4,
    Bottom = 5,
    BottomTrailing = 6,
    Trailing = 7,
    TopTrailing = 8,
};

pub extern "AppKit" fn DirectionalEdgeInsetsMake(top: core_foundation.CGFloat, leading: core_foundation.CGFloat, bottom: core_foundation.CGFloat, trailing: core_foundation.CGFloat, ) callconv(.C) DirectionalEdgeInsets;

/// https://developer.apple.com/documentation/AppKit/NSCollectionViewCompositionalLayoutConfiguration?language=objc
pub const CollectionViewCompositionalLayoutConfiguration = opaque {
    pub const InternalInfo = objc.ExternalClass("NSCollectionViewCompositionalLayoutConfiguration", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn scrollDirection(self: *@This()) CollectionViewScrollDirection {
        return objc.msgSend(self, "scrollDirection", CollectionViewScrollDirection, .{});
    }

    pub fn setScrollDirection(self: *@This(), scrollDirection: CollectionViewScrollDirection) void {
        return objc.msgSend(self, "setScrollDirection:", void, .{scrollDirection});
    }

    pub fn interSectionSpacing(self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(self, "interSectionSpacing", core_foundation.CGFloat, .{});
    }

    pub fn setInterSectionSpacing(self: *@This(), interSectionSpacing: core_foundation.CGFloat) void {
        return objc.msgSend(self, "setInterSectionSpacing:", void, .{interSectionSpacing});
    }

    pub fn boundarySupplementaryItems(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "boundarySupplementaryItems", ?*anyopaque, .{});
    }

    pub fn setBoundarySupplementaryItems(self: *@This(), boundarySupplementaryItems: ?*anyopaque) void {
        return objc.msgSend(self, "setBoundarySupplementaryItems:", void, .{boundarySupplementaryItems});
    }

};

pub const CollectionViewCompositionalLayoutSectionProvider = *const fn(objc.NSInteger, ?*anyopaque) callconv(.C) ?*CollectionLayoutSection;

/// https://developer.apple.com/documentation/AppKit/NSCollectionViewCompositionalLayout?language=objc
pub const CollectionViewCompositionalLayout = opaque {
    pub const InternalInfo = objc.ExternalClass("NSCollectionViewCompositionalLayout", @This(), CollectionViewLayout, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn initWithSection(self: *@This(), section: ?*CollectionLayoutSection) *@This() {
        return objc.msgSend(self, "initWithSection:", *@This(), .{section});
    }

    pub fn initWithSectionConfiguration(self: *@This(), section: ?*CollectionLayoutSection, configuration: ?*CollectionViewCompositionalLayoutConfiguration) *@This() {
        return objc.msgSend(self, "initWithSection:configuration:", *@This(), .{section, configuration});
    }

    pub fn initWithSectionProvider(self: *@This(), sectionProvider: CollectionViewCompositionalLayoutSectionProvider) *@This() {
        return objc.msgSend(self, "initWithSectionProvider:", *@This(), .{sectionProvider});
    }

    pub fn initWithSectionProviderConfiguration(self: *@This(), sectionProvider: CollectionViewCompositionalLayoutSectionProvider, configuration: ?*CollectionViewCompositionalLayoutConfiguration) *@This() {
        return objc.msgSend(self, "initWithSectionProvider:configuration:", *@This(), .{sectionProvider, configuration});
    }

    pub fn init(self: *@This()) *@This() {
        return objc.msgSend(self, "init", *@This(), .{});
    }

    pub fn new(self: *@This()) *@This() {
        return objc.msgSend(self, "new", *@This(), .{});
    }

    pub fn configuration(self: *@This()) ?*CollectionViewCompositionalLayoutConfiguration {
        return objc.msgSend(self, "configuration", ?*CollectionViewCompositionalLayoutConfiguration, .{});
    }

    pub fn setConfiguration(self: *@This(), configuration: ?*CollectionViewCompositionalLayoutConfiguration) void {
        return objc.msgSend(self, "setConfiguration:", void, .{configuration});
    }

};

pub const CollectionLayoutSectionOrthogonalScrollingBehavior = enum(objc.NSInteger) {
    None = 0,
    Continuous = 1,
    ContinuousGroupLeadingBoundary = 2,
    Paging = 3,
    GroupPaging = 4,
    GroupPagingCentered = 5,
};

pub const CollectionLayoutSectionVisibleItemsInvalidationHandler = *const fn(?*anyopaque, foundation.Point, ?*anyopaque) callconv(.C) void;

/// https://developer.apple.com/documentation/AppKit/NSCollectionLayoutSection?language=objc
pub const CollectionLayoutSection = opaque {
    pub const InternalInfo = objc.ExternalClass("NSCollectionLayoutSection", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn sectionWithGroup(self: *@This(), group: ?*CollectionLayoutGroup) *@This() {
        return objc.msgSend(self, "sectionWithGroup:", *@This(), .{group});
    }

    pub fn init(self: *@This()) *@This() {
        return objc.msgSend(self, "init", *@This(), .{});
    }

    pub fn new(self: *@This()) *@This() {
        return objc.msgSend(self, "new", *@This(), .{});
    }

    pub fn contentInsets(self: *@This()) DirectionalEdgeInsets {
        return objc.msgSend(self, "contentInsets", DirectionalEdgeInsets, .{});
    }

    pub fn setContentInsets(self: *@This(), contentInsets: DirectionalEdgeInsets) void {
        return objc.msgSend(self, "setContentInsets:", void, .{contentInsets});
    }

    pub fn interGroupSpacing(self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(self, "interGroupSpacing", core_foundation.CGFloat, .{});
    }

    pub fn setInterGroupSpacing(self: *@This(), interGroupSpacing: core_foundation.CGFloat) void {
        return objc.msgSend(self, "setInterGroupSpacing:", void, .{interGroupSpacing});
    }

    pub fn orthogonalScrollingBehavior(self: *@This()) CollectionLayoutSectionOrthogonalScrollingBehavior {
        return objc.msgSend(self, "orthogonalScrollingBehavior", CollectionLayoutSectionOrthogonalScrollingBehavior, .{});
    }

    pub fn setOrthogonalScrollingBehavior(self: *@This(), orthogonalScrollingBehavior: CollectionLayoutSectionOrthogonalScrollingBehavior) void {
        return objc.msgSend(self, "setOrthogonalScrollingBehavior:", void, .{orthogonalScrollingBehavior});
    }

    pub fn boundarySupplementaryItems(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "boundarySupplementaryItems", ?*anyopaque, .{});
    }

    pub fn setBoundarySupplementaryItems(self: *@This(), boundarySupplementaryItems: ?*anyopaque) void {
        return objc.msgSend(self, "setBoundarySupplementaryItems:", void, .{boundarySupplementaryItems});
    }

    pub fn supplementariesFollowContentInsets(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "supplementariesFollowContentInsets", objc.BOOL, .{});
    }

    pub fn setSupplementariesFollowContentInsets(self: *@This(), supplementariesFollowContentInsets: objc.BOOL) void {
        return objc.msgSend(self, "setSupplementariesFollowContentInsets:", void, .{supplementariesFollowContentInsets});
    }

    pub fn visibleItemsInvalidationHandler(self: *@This()) CollectionLayoutSectionVisibleItemsInvalidationHandler {
        return objc.msgSend(self, "visibleItemsInvalidationHandler", CollectionLayoutSectionVisibleItemsInvalidationHandler, .{});
    }

    pub fn setVisibleItemsInvalidationHandler(self: *@This(), visibleItemsInvalidationHandler: CollectionLayoutSectionVisibleItemsInvalidationHandler) void {
        return objc.msgSend(self, "setVisibleItemsInvalidationHandler:", void, .{visibleItemsInvalidationHandler});
    }

    pub fn decorationItems(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "decorationItems", ?*anyopaque, .{});
    }

    pub fn setDecorationItems(self: *@This(), decorationItems: ?*anyopaque) void {
        return objc.msgSend(self, "setDecorationItems:", void, .{decorationItems});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSCollectionLayoutItem?language=objc
pub const CollectionLayoutItem = opaque {
    pub const InternalInfo = objc.ExternalClass("NSCollectionLayoutItem", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn itemWithLayoutSize(self: *@This(), layoutSize: ?*CollectionLayoutSize) *@This() {
        return objc.msgSend(self, "itemWithLayoutSize:", *@This(), .{layoutSize});
    }

    pub fn itemWithLayoutSizeSupplementaryItems(self: *@This(), layoutSize: ?*CollectionLayoutSize, supplementaryItems: ?*anyopaque) *@This() {
        return objc.msgSend(self, "itemWithLayoutSize:supplementaryItems:", *@This(), .{layoutSize, supplementaryItems});
    }

    pub fn init(self: *@This()) *@This() {
        return objc.msgSend(self, "init", *@This(), .{});
    }

    pub fn new(self: *@This()) *@This() {
        return objc.msgSend(self, "new", *@This(), .{});
    }

    pub fn contentInsets(self: *@This()) DirectionalEdgeInsets {
        return objc.msgSend(self, "contentInsets", DirectionalEdgeInsets, .{});
    }

    pub fn setContentInsets(self: *@This(), contentInsets: DirectionalEdgeInsets) void {
        return objc.msgSend(self, "setContentInsets:", void, .{contentInsets});
    }

    pub fn edgeSpacing(self: *@This()) ?*CollectionLayoutEdgeSpacing {
        return objc.msgSend(self, "edgeSpacing", ?*CollectionLayoutEdgeSpacing, .{});
    }

    pub fn setEdgeSpacing(self: *@This(), edgeSpacing: ?*CollectionLayoutEdgeSpacing) void {
        return objc.msgSend(self, "setEdgeSpacing:", void, .{edgeSpacing});
    }

    pub fn layoutSize(self: *@This()) ?*CollectionLayoutSize {
        return objc.msgSend(self, "layoutSize", ?*CollectionLayoutSize, .{});
    }

    pub fn supplementaryItems(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "supplementaryItems", ?*anyopaque, .{});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSCollectionLayoutGroupCustomItem?language=objc
pub const CollectionLayoutGroupCustomItem = opaque {
    pub const InternalInfo = objc.ExternalClass("NSCollectionLayoutGroupCustomItem", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn customItemWithFrame(self: *@This(), frame: foundation.Rect) *@This() {
        return objc.msgSend(self, "customItemWithFrame:", *@This(), .{frame});
    }

    pub fn customItemWithFrameZIndex(self: *@This(), frame: foundation.Rect, zIndex: objc.NSInteger) *@This() {
        return objc.msgSend(self, "customItemWithFrame:zIndex:", *@This(), .{frame, zIndex});
    }

    pub fn init(self: *@This()) *@This() {
        return objc.msgSend(self, "init", *@This(), .{});
    }

    pub fn new(self: *@This()) *@This() {
        return objc.msgSend(self, "new", *@This(), .{});
    }

    pub fn frame(self: *@This()) foundation.Rect {
        return objc.msgSend(self, "frame", foundation.Rect, .{});
    }

    pub fn zIndex(self: *@This()) objc.NSInteger {
        return objc.msgSend(self, "zIndex", objc.NSInteger, .{});
    }

};

pub const CollectionLayoutGroupCustomItemProvider = *const fn(?*anyopaque) callconv(.C) ?*anyopaque;

/// https://developer.apple.com/documentation/AppKit/NSCollectionLayoutGroup?language=objc
pub const CollectionLayoutGroup = opaque {
    pub const InternalInfo = objc.ExternalClass("NSCollectionLayoutGroup", @This(), CollectionLayoutItem, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn horizontalGroupWithLayoutSizeSubitemCount(self: *@This(), layoutSize: ?*CollectionLayoutSize, subitem: ?*CollectionLayoutItem, count: objc.NSInteger) *@This() {
        return objc.msgSend(self, "horizontalGroupWithLayoutSize:subitem:count:", *@This(), .{layoutSize, subitem, count});
    }

    pub fn horizontalGroupWithLayoutSizeSubitems(self: *@This(), layoutSize: ?*CollectionLayoutSize, subitems: ?*anyopaque) *@This() {
        return objc.msgSend(self, "horizontalGroupWithLayoutSize:subitems:", *@This(), .{layoutSize, subitems});
    }

    pub fn verticalGroupWithLayoutSizeSubitemCount(self: *@This(), layoutSize: ?*CollectionLayoutSize, subitem: ?*CollectionLayoutItem, count: objc.NSInteger) *@This() {
        return objc.msgSend(self, "verticalGroupWithLayoutSize:subitem:count:", *@This(), .{layoutSize, subitem, count});
    }

    pub fn verticalGroupWithLayoutSizeSubitems(self: *@This(), layoutSize: ?*CollectionLayoutSize, subitems: ?*anyopaque) *@This() {
        return objc.msgSend(self, "verticalGroupWithLayoutSize:subitems:", *@This(), .{layoutSize, subitems});
    }

    pub fn customGroupWithLayoutSizeItemProvider(self: *@This(), layoutSize: ?*CollectionLayoutSize, itemProvider: CollectionLayoutGroupCustomItemProvider) *@This() {
        return objc.msgSend(self, "customGroupWithLayoutSize:itemProvider:", *@This(), .{layoutSize, itemProvider});
    }

    pub fn init(self: *@This()) *@This() {
        return objc.msgSend(self, "init", *@This(), .{});
    }

    pub fn new(self: *@This()) *@This() {
        return objc.msgSend(self, "new", *@This(), .{});
    }

    pub fn visualDescription(self: *@This()) ?*String {
        return objc.msgSend(self, "visualDescription", ?*String, .{});
    }

    pub fn supplementaryItems(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "supplementaryItems", ?*anyopaque, .{});
    }

    pub fn setSupplementaryItems(self: *@This(), supplementaryItems: ?*anyopaque) void {
        return objc.msgSend(self, "setSupplementaryItems:", void, .{supplementaryItems});
    }

    pub fn interItemSpacing(self: *@This()) ?*CollectionLayoutSpacing {
        return objc.msgSend(self, "interItemSpacing", ?*CollectionLayoutSpacing, .{});
    }

    pub fn setInterItemSpacing(self: *@This(), interItemSpacing: ?*CollectionLayoutSpacing) void {
        return objc.msgSend(self, "setInterItemSpacing:", void, .{interItemSpacing});
    }

    pub fn subitems(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "subitems", ?*anyopaque, .{});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSCollectionLayoutDimension?language=objc
pub const CollectionLayoutDimension = opaque {
    pub const InternalInfo = objc.ExternalClass("NSCollectionLayoutDimension", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn fractionalWidthDimension(self: *@This(), fractionalWidth: core_foundation.CGFloat) *@This() {
        return objc.msgSend(self, "fractionalWidthDimension:", *@This(), .{fractionalWidth});
    }

    pub fn fractionalHeightDimension(self: *@This(), fractionalHeight: core_foundation.CGFloat) *@This() {
        return objc.msgSend(self, "fractionalHeightDimension:", *@This(), .{fractionalHeight});
    }

    pub fn absoluteDimension(self: *@This(), absoluteDimension: core_foundation.CGFloat) *@This() {
        return objc.msgSend(self, "absoluteDimension:", *@This(), .{absoluteDimension});
    }

    pub fn estimatedDimension(self: *@This(), estimatedDimension: core_foundation.CGFloat) *@This() {
        return objc.msgSend(self, "estimatedDimension:", *@This(), .{estimatedDimension});
    }

    pub fn init(self: *@This()) *@This() {
        return objc.msgSend(self, "init", *@This(), .{});
    }

    pub fn new(self: *@This()) *@This() {
        return objc.msgSend(self, "new", *@This(), .{});
    }

    pub fn isFractionalWidth(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isFractionalWidth", objc.BOOL, .{});
    }

    pub fn isFractionalHeight(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isFractionalHeight", objc.BOOL, .{});
    }

    pub fn isAbsolute(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isAbsolute", objc.BOOL, .{});
    }

    pub fn isEstimated(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isEstimated", objc.BOOL, .{});
    }

    pub fn dimension(self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(self, "dimension", core_foundation.CGFloat, .{});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSCollectionLayoutSize?language=objc
pub const CollectionLayoutSize = opaque {
    pub const InternalInfo = objc.ExternalClass("NSCollectionLayoutSize", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn sizeWithWidthDimensionHeightDimension(self: *@This(), width: ?*CollectionLayoutDimension, height: ?*CollectionLayoutDimension) *@This() {
        return objc.msgSend(self, "sizeWithWidthDimension:heightDimension:", *@This(), .{width, height});
    }

    pub fn init(self: *@This()) *@This() {
        return objc.msgSend(self, "init", *@This(), .{});
    }

    pub fn new(self: *@This()) *@This() {
        return objc.msgSend(self, "new", *@This(), .{});
    }

    pub fn widthDimension(self: *@This()) ?*CollectionLayoutDimension {
        return objc.msgSend(self, "widthDimension", ?*CollectionLayoutDimension, .{});
    }

    pub fn heightDimension(self: *@This()) ?*CollectionLayoutDimension {
        return objc.msgSend(self, "heightDimension", ?*CollectionLayoutDimension, .{});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSCollectionLayoutSpacing?language=objc
pub const CollectionLayoutSpacing = opaque {
    pub const InternalInfo = objc.ExternalClass("NSCollectionLayoutSpacing", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn flexibleSpacing(self: *@This(), flexibleSpacing: core_foundation.CGFloat) *@This() {
        return objc.msgSend(self, "flexibleSpacing:", *@This(), .{flexibleSpacing});
    }

    pub fn fixedSpacing(self: *@This(), fixedSpacing: core_foundation.CGFloat) *@This() {
        return objc.msgSend(self, "fixedSpacing:", *@This(), .{fixedSpacing});
    }

    pub fn init(self: *@This()) *@This() {
        return objc.msgSend(self, "init", *@This(), .{});
    }

    pub fn new(self: *@This()) *@This() {
        return objc.msgSend(self, "new", *@This(), .{});
    }

    pub fn spacing(self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(self, "spacing", core_foundation.CGFloat, .{});
    }

    pub fn isFlexibleSpacing(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isFlexibleSpacing", objc.BOOL, .{});
    }

    pub fn isFixedSpacing(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isFixedSpacing", objc.BOOL, .{});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSCollectionLayoutEdgeSpacing?language=objc
pub const CollectionLayoutEdgeSpacing = opaque {
    pub const InternalInfo = objc.ExternalClass("NSCollectionLayoutEdgeSpacing", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn spacingForLeadingTopTrailingBottom(self: *@This(), leading: ?*CollectionLayoutSpacing, top: ?*CollectionLayoutSpacing, trailing: ?*CollectionLayoutSpacing, bottom: ?*CollectionLayoutSpacing, ) *@This() {
        return objc.msgSend(self, "spacingForLeading:top:trailing:bottom:", *@This(), .{leading, top, trailing, bottom, });
    }

    pub fn init(self: *@This()) *@This() {
        return objc.msgSend(self, "init", *@This(), .{});
    }

    pub fn new(self: *@This()) *@This() {
        return objc.msgSend(self, "new", *@This(), .{});
    }

    pub fn leading(self: *@This()) ?*CollectionLayoutSpacing {
        return objc.msgSend(self, "leading", ?*CollectionLayoutSpacing, .{});
    }

    pub fn top(self: *@This()) ?*CollectionLayoutSpacing {
        return objc.msgSend(self, "top", ?*CollectionLayoutSpacing, .{});
    }

    pub fn trailing(self: *@This()) ?*CollectionLayoutSpacing {
        return objc.msgSend(self, "trailing", ?*CollectionLayoutSpacing, .{});
    }

    pub fn bottom(self: *@This()) ?*CollectionLayoutSpacing {
        return objc.msgSend(self, "bottom", ?*CollectionLayoutSpacing, .{});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSCollectionLayoutSupplementaryItem?language=objc
pub const CollectionLayoutSupplementaryItem = opaque {
    pub const InternalInfo = objc.ExternalClass("NSCollectionLayoutSupplementaryItem", @This(), CollectionLayoutItem, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn supplementaryItemWithLayoutSizeElementKindContainerAnchor(self: *@This(), layoutSize: ?*CollectionLayoutSize, elementKind: ?*String, containerAnchor: ?*CollectionLayoutAnchor) *@This() {
        return objc.msgSend(self, "supplementaryItemWithLayoutSize:elementKind:containerAnchor:", *@This(), .{layoutSize, elementKind, containerAnchor});
    }

    pub fn supplementaryItemWithLayoutSizeElementKindContainerAnchorItemAnchor(self: *@This(), layoutSize: ?*CollectionLayoutSize, elementKind: ?*String, containerAnchor: ?*CollectionLayoutAnchor, itemAnchor: ?*CollectionLayoutAnchor, ) *@This() {
        return objc.msgSend(self, "supplementaryItemWithLayoutSize:elementKind:containerAnchor:itemAnchor:", *@This(), .{layoutSize, elementKind, containerAnchor, itemAnchor, });
    }

    pub fn init(self: *@This()) *@This() {
        return objc.msgSend(self, "init", *@This(), .{});
    }

    pub fn new(self: *@This()) *@This() {
        return objc.msgSend(self, "new", *@This(), .{});
    }

    pub fn zIndex(self: *@This()) objc.NSInteger {
        return objc.msgSend(self, "zIndex", objc.NSInteger, .{});
    }

    pub fn setZIndex(self: *@This(), zIndex: objc.NSInteger) void {
        return objc.msgSend(self, "setZIndex:", void, .{zIndex});
    }

    pub fn elementKind(self: *@This()) ?*String {
        return objc.msgSend(self, "elementKind", ?*String, .{});
    }

    pub fn containerAnchor(self: *@This()) ?*CollectionLayoutAnchor {
        return objc.msgSend(self, "containerAnchor", ?*CollectionLayoutAnchor, .{});
    }

    pub fn itemAnchor(self: *@This()) ?*CollectionLayoutAnchor {
        return objc.msgSend(self, "itemAnchor", ?*CollectionLayoutAnchor, .{});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSCollectionLayoutBoundarySupplementaryItem?language=objc
pub const CollectionLayoutBoundarySupplementaryItem = opaque {
    pub const InternalInfo = objc.ExternalClass("NSCollectionLayoutBoundarySupplementaryItem", @This(), CollectionLayoutSupplementaryItem, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn boundarySupplementaryItemWithLayoutSizeElementKindAlignment(self: *@This(), layoutSize: ?*CollectionLayoutSize, elementKind: ?*String, alignment: RectAlignment) *@This() {
        return objc.msgSend(self, "boundarySupplementaryItemWithLayoutSize:elementKind:alignment:", *@This(), .{layoutSize, elementKind, alignment});
    }

    pub fn boundarySupplementaryItemWithLayoutSizeElementKindAlignmentAbsoluteOffset(self: *@This(), layoutSize: ?*CollectionLayoutSize, elementKind: ?*String, alignment: RectAlignment, absoluteOffset: foundation.Point, ) *@This() {
        return objc.msgSend(self, "boundarySupplementaryItemWithLayoutSize:elementKind:alignment:absoluteOffset:", *@This(), .{layoutSize, elementKind, alignment, absoluteOffset, });
    }

    pub fn init(self: *@This()) *@This() {
        return objc.msgSend(self, "init", *@This(), .{});
    }

    pub fn new(self: *@This()) *@This() {
        return objc.msgSend(self, "new", *@This(), .{});
    }

    pub fn extendsBoundary(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "extendsBoundary", objc.BOOL, .{});
    }

    pub fn setExtendsBoundary(self: *@This(), extendsBoundary: objc.BOOL) void {
        return objc.msgSend(self, "setExtendsBoundary:", void, .{extendsBoundary});
    }

    pub fn pinToVisibleBounds(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "pinToVisibleBounds", objc.BOOL, .{});
    }

    pub fn setPinToVisibleBounds(self: *@This(), pinToVisibleBounds: objc.BOOL) void {
        return objc.msgSend(self, "setPinToVisibleBounds:", void, .{pinToVisibleBounds});
    }

    pub fn alignment(self: *@This()) RectAlignment {
        return objc.msgSend(self, "alignment", RectAlignment, .{});
    }

    pub fn offset(self: *@This()) foundation.Point {
        return objc.msgSend(self, "offset", foundation.Point, .{});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSCollectionLayoutDecorationItem?language=objc
pub const CollectionLayoutDecorationItem = opaque {
    pub const InternalInfo = objc.ExternalClass("NSCollectionLayoutDecorationItem", @This(), CollectionLayoutItem, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn backgroundDecorationItemWithElementKind(self: *@This(), elementKind: ?*String) *@This() {
        return objc.msgSend(self, "backgroundDecorationItemWithElementKind:", *@This(), .{elementKind});
    }

    pub fn init(self: *@This()) *@This() {
        return objc.msgSend(self, "init", *@This(), .{});
    }

    pub fn new(self: *@This()) *@This() {
        return objc.msgSend(self, "new", *@This(), .{});
    }

    pub fn zIndex(self: *@This()) objc.NSInteger {
        return objc.msgSend(self, "zIndex", objc.NSInteger, .{});
    }

    pub fn setZIndex(self: *@This(), zIndex: objc.NSInteger) void {
        return objc.msgSend(self, "setZIndex:", void, .{zIndex});
    }

    pub fn elementKind(self: *@This()) ?*String {
        return objc.msgSend(self, "elementKind", ?*String, .{});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSCollectionLayoutAnchor?language=objc
pub const CollectionLayoutAnchor = opaque {
    pub const InternalInfo = objc.ExternalClass("NSCollectionLayoutAnchor", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn layoutAnchorWithEdges(self: *@This(), edges: DirectionalRectEdge) *@This() {
        return objc.msgSend(self, "layoutAnchorWithEdges:", *@This(), .{edges});
    }

    pub fn layoutAnchorWithEdgesAbsoluteOffset(self: *@This(), edges: DirectionalRectEdge, absoluteOffset: foundation.Point) *@This() {
        return objc.msgSend(self, "layoutAnchorWithEdges:absoluteOffset:", *@This(), .{edges, absoluteOffset});
    }

    pub fn layoutAnchorWithEdgesFractionalOffset(self: *@This(), edges: DirectionalRectEdge, fractionalOffset: foundation.Point) *@This() {
        return objc.msgSend(self, "layoutAnchorWithEdges:fractionalOffset:", *@This(), .{edges, fractionalOffset});
    }

    pub fn init(self: *@This()) *@This() {
        return objc.msgSend(self, "init", *@This(), .{});
    }

    pub fn new(self: *@This()) *@This() {
        return objc.msgSend(self, "new", *@This(), .{});
    }

    pub fn edges(self: *@This()) DirectionalRectEdge {
        return objc.msgSend(self, "edges", DirectionalRectEdge, .{});
    }

    pub fn offset(self: *@This()) foundation.Point {
        return objc.msgSend(self, "offset", foundation.Point, .{});
    }

    pub fn isAbsoluteOffset(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isAbsoluteOffset", objc.BOOL, .{});
    }

    pub fn isFractionalOffset(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isFractionalOffset", objc.BOOL, .{});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSCollectionLayoutContainer?language=objc
pub const CollectionLayoutContainer = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{objc.NSObject, });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn contentSize(self: *@This()) foundation.Size {
        return objc.msgSend(self, "contentSize", foundation.Size, .{});
    }

    pub fn effectiveContentSize(self: *@This()) foundation.Size {
        return objc.msgSend(self, "effectiveContentSize", foundation.Size, .{});
    }

    pub fn contentInsets(self: *@This()) DirectionalEdgeInsets {
        return objc.msgSend(self, "contentInsets", DirectionalEdgeInsets, .{});
    }

    pub fn effectiveContentInsets(self: *@This()) DirectionalEdgeInsets {
        return objc.msgSend(self, "effectiveContentInsets", DirectionalEdgeInsets, .{});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSCollectionLayoutEnvironment?language=objc
pub const CollectionLayoutEnvironment = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{objc.NSObject, });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn container(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "container", ?*anyopaque, .{});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSCollectionLayoutVisibleItem?language=objc
pub const CollectionLayoutVisibleItem = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{objc.NSObject, });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn alpha(self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(self, "alpha", core_foundation.CGFloat, .{});
    }

    pub fn setAlpha(self: *@This(), alpha: core_foundation.CGFloat) void {
        return objc.msgSend(self, "setAlpha:", void, .{alpha});
    }

    pub fn zIndex(self: *@This()) objc.NSInteger {
        return objc.msgSend(self, "zIndex", objc.NSInteger, .{});
    }

    pub fn setZIndex(self: *@This(), zIndex: objc.NSInteger) void {
        return objc.msgSend(self, "setZIndex:", void, .{zIndex});
    }

    pub fn isHidden(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isHidden", objc.BOOL, .{});
    }

    pub fn setHidden(self: *@This(), hidden: objc.BOOL) void {
        return objc.msgSend(self, "setHidden:", void, .{hidden});
    }

    pub fn center(self: *@This()) foundation.Point {
        return objc.msgSend(self, "center", foundation.Point, .{});
    }

    pub fn setCenter(self: *@This(), center: foundation.Point) void {
        return objc.msgSend(self, "setCenter:", void, .{center});
    }

    pub fn name(self: *@This()) ?*String {
        return objc.msgSend(self, "name", ?*String, .{});
    }

    pub fn indexPath(self: *@This()) ?*IndexPath {
        return objc.msgSend(self, "indexPath", ?*IndexPath, .{});
    }

    pub fn frame(self: *@This()) foundation.Rect {
        return objc.msgSend(self, "frame", foundation.Rect, .{});
    }

    pub fn bounds(self: *@This()) foundation.Rect {
        return objc.msgSend(self, "bounds", foundation.Rect, .{});
    }

    pub fn representedElementCategory(self: *@This()) CollectionElementCategory {
        return objc.msgSend(self, "representedElementCategory", CollectionElementCategory, .{});
    }

    pub fn representedElementKind(self: *@This()) ?*String {
        return objc.msgSend(self, "representedElementKind", ?*String, .{});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSCollectionViewGridLayout?language=objc
pub const CollectionViewGridLayout = opaque {
    pub const InternalInfo = objc.ExternalClass("NSCollectionViewGridLayout", @This(), CollectionViewLayout, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn margins(self: *@This()) foundation.EdgeInsets {
        return objc.msgSend(self, "margins", foundation.EdgeInsets, .{});
    }

    pub fn setMargins(self: *@This(), margins: foundation.EdgeInsets) void {
        return objc.msgSend(self, "setMargins:", void, .{margins});
    }

    pub fn minimumInteritemSpacing(self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(self, "minimumInteritemSpacing", core_foundation.CGFloat, .{});
    }

    pub fn setMinimumInteritemSpacing(self: *@This(), minimumInteritemSpacing: core_foundation.CGFloat) void {
        return objc.msgSend(self, "setMinimumInteritemSpacing:", void, .{minimumInteritemSpacing});
    }

    pub fn minimumLineSpacing(self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(self, "minimumLineSpacing", core_foundation.CGFloat, .{});
    }

    pub fn setMinimumLineSpacing(self: *@This(), minimumLineSpacing: core_foundation.CGFloat) void {
        return objc.msgSend(self, "setMinimumLineSpacing:", void, .{minimumLineSpacing});
    }

    pub fn maximumNumberOfRows(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "maximumNumberOfRows", objc.NSUInteger, .{});
    }

    pub fn setMaximumNumberOfRows(self: *@This(), maximumNumberOfRows: objc.NSUInteger) void {
        return objc.msgSend(self, "setMaximumNumberOfRows:", void, .{maximumNumberOfRows});
    }

    pub fn maximumNumberOfColumns(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "maximumNumberOfColumns", objc.NSUInteger, .{});
    }

    pub fn setMaximumNumberOfColumns(self: *@This(), maximumNumberOfColumns: objc.NSUInteger) void {
        return objc.msgSend(self, "setMaximumNumberOfColumns:", void, .{maximumNumberOfColumns});
    }

    pub fn minimumItemSize(self: *@This()) foundation.Size {
        return objc.msgSend(self, "minimumItemSize", foundation.Size, .{});
    }

    pub fn setMinimumItemSize(self: *@This(), minimumItemSize: foundation.Size) void {
        return objc.msgSend(self, "setMinimumItemSize:", void, .{minimumItemSize});
    }

    pub fn maximumItemSize(self: *@This()) foundation.Size {
        return objc.msgSend(self, "maximumItemSize", foundation.Size, .{});
    }

    pub fn setMaximumItemSize(self: *@This(), maximumItemSize: foundation.Size) void {
        return objc.msgSend(self, "setMaximumItemSize:", void, .{maximumItemSize});
    }

    pub fn backgroundColors(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "backgroundColors", ?*anyopaque, .{});
    }

    pub fn setBackgroundColors(self: *@This(), backgroundColors: ?*anyopaque) void {
        return objc.msgSend(self, "setBackgroundColors:", void, .{backgroundColors});
    }

};

pub const CollectionViewTransitionLayoutAnimatedKey = ?*String;

/// https://developer.apple.com/documentation/AppKit/NSCollectionViewTransitionLayout?language=objc
pub const CollectionViewTransitionLayout = opaque {
    pub const InternalInfo = objc.ExternalClass("NSCollectionViewTransitionLayout", @This(), CollectionViewLayout, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn initWithCurrentLayoutNextLayout(self: *@This(), currentLayout: ?*CollectionViewLayout, newLayout: ?*CollectionViewLayout) *@This() {
        return objc.msgSend(self, "initWithCurrentLayout:nextLayout:", *@This(), .{currentLayout, newLayout});
    }

    pub fn updateValueForAnimatedKey(self: *@This(), value: core_foundation.CGFloat, key: CollectionViewTransitionLayoutAnimatedKey) void {
        return objc.msgSend(self, "updateValue:forAnimatedKey:", void, .{value, key});
    }

    pub fn valueForAnimatedKey(self: *@This(), key: CollectionViewTransitionLayoutAnimatedKey) core_foundation.CGFloat {
        return objc.msgSend(self, "valueForAnimatedKey:", core_foundation.CGFloat, .{key});
    }

    pub fn transitionProgress(self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(self, "transitionProgress", core_foundation.CGFloat, .{});
    }

    pub fn setTransitionProgress(self: *@This(), transitionProgress: core_foundation.CGFloat) void {
        return objc.msgSend(self, "setTransitionProgress:", void, .{transitionProgress});
    }

    pub fn currentLayout(self: *@This()) ?*CollectionViewLayout {
        return objc.msgSend(self, "currentLayout", ?*CollectionViewLayout, .{});
    }

    pub fn nextLayout(self: *@This()) ?*CollectionViewLayout {
        return objc.msgSend(self, "nextLayout", ?*CollectionViewLayout, .{});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSColorSampler?language=objc
pub const ColorSampler = opaque {
    pub const InternalInfo = objc.ExternalClass("NSColorSampler", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn showSamplerWithSelectionHandler(self: *@This(), selectionHandler: *const fn(?*Color) callconv(.C) void) void {
        return objc.msgSend(self, "showSamplerWithSelectionHandler:", void, .{selectionHandler});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSDiffableDataSourceSnapshot?language=objc
pub const DiffableDataSourceSnapshot = opaque {
    pub const InternalInfo = objc.ExternalClass("NSDiffableDataSourceSnapshot", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn numberOfItemsInSection(self: *@This(), sectionIdentifier: void) objc.NSInteger {
        return objc.msgSend(self, "numberOfItemsInSection:", objc.NSInteger, .{sectionIdentifier});
    }

    pub fn itemIdentifiersInSectionWithIdentifier(self: *@This(), sectionIdentifier: void) ?*anyopaque {
        return objc.msgSend(self, "itemIdentifiersInSectionWithIdentifier:", ?*anyopaque, .{sectionIdentifier});
    }

    pub fn sectionIdentifierForSectionContainingItemIdentifier(self: *@This(), itemIdentifier: void) void {
        return objc.msgSend(self, "sectionIdentifierForSectionContainingItemIdentifier:", void, .{itemIdentifier});
    }

    pub fn indexOfItemIdentifier(self: *@This(), itemIdentifier: void) objc.NSInteger {
        return objc.msgSend(self, "indexOfItemIdentifier:", objc.NSInteger, .{itemIdentifier});
    }

    pub fn indexOfSectionIdentifier(self: *@This(), sectionIdentifier: void) objc.NSInteger {
        return objc.msgSend(self, "indexOfSectionIdentifier:", objc.NSInteger, .{sectionIdentifier});
    }

    pub fn appendItemsWithIdentifiers(self: *@This(), identifiers: ?*anyopaque) void {
        return objc.msgSend(self, "appendItemsWithIdentifiers:", void, .{identifiers});
    }

    pub fn appendItemsWithIdentifiersIntoSectionWithIdentifier(self: *@This(), identifiers: ?*anyopaque, sectionIdentifier: void) void {
        return objc.msgSend(self, "appendItemsWithIdentifiers:intoSectionWithIdentifier:", void, .{identifiers, sectionIdentifier});
    }

    pub fn insertItemsWithIdentifiersBeforeItemWithIdentifier(self: *@This(), identifiers: ?*anyopaque, itemIdentifier: void) void {
        return objc.msgSend(self, "insertItemsWithIdentifiers:beforeItemWithIdentifier:", void, .{identifiers, itemIdentifier});
    }

    pub fn insertItemsWithIdentifiersAfterItemWithIdentifier(self: *@This(), identifiers: ?*anyopaque, itemIdentifier: void) void {
        return objc.msgSend(self, "insertItemsWithIdentifiers:afterItemWithIdentifier:", void, .{identifiers, itemIdentifier});
    }

    pub fn deleteItemsWithIdentifiers(self: *@This(), identifiers: ?*anyopaque) void {
        return objc.msgSend(self, "deleteItemsWithIdentifiers:", void, .{identifiers});
    }

    pub fn deleteAllItems(self: *@This()) void {
        return objc.msgSend(self, "deleteAllItems", void, .{});
    }

    pub fn moveItemWithIdentifierBeforeItemWithIdentifier(self: *@This(), fromIdentifier: void, toIdentifier: void) void {
        return objc.msgSend(self, "moveItemWithIdentifier:beforeItemWithIdentifier:", void, .{fromIdentifier, toIdentifier});
    }

    pub fn moveItemWithIdentifierAfterItemWithIdentifier(self: *@This(), fromIdentifier: void, toIdentifier: void) void {
        return objc.msgSend(self, "moveItemWithIdentifier:afterItemWithIdentifier:", void, .{fromIdentifier, toIdentifier});
    }

    pub fn reloadItemsWithIdentifiers(self: *@This(), identifiers: ?*anyopaque) void {
        return objc.msgSend(self, "reloadItemsWithIdentifiers:", void, .{identifiers});
    }

    pub fn appendSectionsWithIdentifiers(self: *@This(), sectionIdentifiers: ?*anyopaque) void {
        return objc.msgSend(self, "appendSectionsWithIdentifiers:", void, .{sectionIdentifiers});
    }

    pub fn insertSectionsWithIdentifiersBeforeSectionWithIdentifier(self: *@This(), sectionIdentifiers: ?*anyopaque, toSectionIdentifier: void) void {
        return objc.msgSend(self, "insertSectionsWithIdentifiers:beforeSectionWithIdentifier:", void, .{sectionIdentifiers, toSectionIdentifier});
    }

    pub fn insertSectionsWithIdentifiersAfterSectionWithIdentifier(self: *@This(), sectionIdentifiers: ?*anyopaque, toSectionIdentifier: void) void {
        return objc.msgSend(self, "insertSectionsWithIdentifiers:afterSectionWithIdentifier:", void, .{sectionIdentifiers, toSectionIdentifier});
    }

    pub fn deleteSectionsWithIdentifiers(self: *@This(), sectionIdentifiers: ?*anyopaque) void {
        return objc.msgSend(self, "deleteSectionsWithIdentifiers:", void, .{sectionIdentifiers});
    }

    pub fn moveSectionWithIdentifierBeforeSectionWithIdentifier(self: *@This(), fromSectionIdentifier: void, toSectionIdentifier: void) void {
        return objc.msgSend(self, "moveSectionWithIdentifier:beforeSectionWithIdentifier:", void, .{fromSectionIdentifier, toSectionIdentifier});
    }

    pub fn moveSectionWithIdentifierAfterSectionWithIdentifier(self: *@This(), fromSectionIdentifier: void, toSectionIdentifier: void) void {
        return objc.msgSend(self, "moveSectionWithIdentifier:afterSectionWithIdentifier:", void, .{fromSectionIdentifier, toSectionIdentifier});
    }

    pub fn reloadSectionsWithIdentifiers(self: *@This(), sectionIdentifiers: ?*anyopaque) void {
        return objc.msgSend(self, "reloadSectionsWithIdentifiers:", void, .{sectionIdentifiers});
    }

    pub fn numberOfItems(self: *@This()) objc.NSInteger {
        return objc.msgSend(self, "numberOfItems", objc.NSInteger, .{});
    }

    pub fn numberOfSections(self: *@This()) objc.NSInteger {
        return objc.msgSend(self, "numberOfSections", objc.NSInteger, .{});
    }

    pub fn sectionIdentifiers(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "sectionIdentifiers", ?*anyopaque, .{});
    }

    pub fn itemIdentifiers(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "itemIdentifiers", ?*anyopaque, .{});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSCollectionViewDiffableDataSource?language=objc
pub const CollectionViewDiffableDataSource = opaque {
    pub const InternalInfo = objc.ExternalClass("NSCollectionViewDiffableDataSource", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn initWithCollectionViewItemProvider(self: *@This(), collectionView: ?*CollectionView, itemProvider: CollectionViewDiffableDataSourceItemProvider) *@This() {
        return objc.msgSend(self, "initWithCollectionView:itemProvider:", *@This(), .{collectionView, itemProvider});
    }

    pub fn init(self: *@This()) *@This() {
        return objc.msgSend(self, "init", *@This(), .{});
    }

    pub fn new(self: *@This()) *@This() {
        return objc.msgSend(self, "new", *@This(), .{});
    }

    pub fn snapshot(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "snapshot", ?*anyopaque, .{});
    }

    pub fn applySnapshotAnimatingDifferences(self: *@This(), snapshot: ?*anyopaque, animatingDifferences: objc.BOOL) void {
        return objc.msgSend(self, "applySnapshot:animatingDifferences:", void, .{snapshot, animatingDifferences});
    }

    pub fn itemIdentifierForIndexPath(self: *@This(), indexPath: ?*IndexPath) void {
        return objc.msgSend(self, "itemIdentifierForIndexPath:", void, .{indexPath});
    }

    pub fn indexPathForItemIdentifier(self: *@This(), identifier: void) ?*IndexPath {
        return objc.msgSend(self, "indexPathForItemIdentifier:", ?*IndexPath, .{identifier});
    }

    pub fn supplementaryViewProvider(self: *@This()) CollectionViewDiffableDataSourceSupplementaryViewProvider {
        return objc.msgSend(self, "supplementaryViewProvider", CollectionViewDiffableDataSourceSupplementaryViewProvider, .{});
    }

    pub fn setSupplementaryViewProvider(self: *@This(), supplementaryViewProvider: CollectionViewDiffableDataSourceSupplementaryViewProvider) void {
        return objc.msgSend(self, "setSupplementaryViewProvider:", void, .{supplementaryViewProvider});
    }

};

pub const CollectionViewDiffableDataSourceItemProvider = *const fn(?*CollectionView, ?*IndexPath, void) callconv(.C) ?*CollectionViewItem;

pub const CollectionViewDiffableDataSourceSupplementaryViewProvider = *const fn(?*CollectionView, ?*String, ?*IndexPath) callconv(.C) ?*View;

pub const HorizontalDirections = enum(objc.NSUInteger) {
    Left = 1,
    Right = 2,
    All = 3,
};

pub const VerticalDirections = enum(objc.NSUInteger) {
    Up = 1,
    Down = 2,
    All = 3,
};

/// https://developer.apple.com/documentation/AppKit/NSDockTile?language=objc
pub const DockTile = opaque {
    pub const InternalInfo = objc.ExternalClass("NSDockTile", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn display(self: *@This()) void {
        return objc.msgSend(self, "display", void, .{});
    }

    pub fn size(self: *@This()) foundation.Size {
        return objc.msgSend(self, "size", foundation.Size, .{});
    }

    pub fn contentView(self: *@This()) ?*View {
        return objc.msgSend(self, "contentView", ?*View, .{});
    }

    pub fn setContentView(self: *@This(), contentView: ?*View) void {
        return objc.msgSend(self, "setContentView:", void, .{contentView});
    }

    pub fn showsApplicationBadge(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "showsApplicationBadge", objc.BOOL, .{});
    }

    pub fn setShowsApplicationBadge(self: *@This(), showsApplicationBadge: objc.BOOL) void {
        return objc.msgSend(self, "setShowsApplicationBadge:", void, .{showsApplicationBadge});
    }

    pub fn badgeLabel(self: *@This()) ?*String {
        return objc.msgSend(self, "badgeLabel", ?*String, .{});
    }

    pub fn setBadgeLabel(self: *@This(), badgeLabel: ?*String) void {
        return objc.msgSend(self, "setBadgeLabel:", void, .{badgeLabel});
    }

    pub fn owner(self: *@This()) *objc.Id {
        return objc.msgSend(self, "owner", *objc.Id, .{});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSDockTilePlugIn?language=objc
pub const DockTilePlugIn = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{objc.NSObject, });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn setDockTile(self: *@This(), dockTile: ?*DockTile) void {
        return objc.msgSend(self, "setDockTile:", void, .{dockTile});
    }

    pub fn dockMenu(self: *@This()) ?*Menu {
        return objc.msgSend(self, "dockMenu", ?*Menu, .{});
    }

};

pub const FontSymbolicTraits = objc.uint32_t;

pub const FontDescriptorSymbolicTraits = enum(objc.uint32_t) {
    TraitItalic = 1,
    TraitBold = 2,
    TraitExpanded = 32,
    TraitCondensed = 64,
    TraitMonoSpace = 1024,
    TraitVertical = 2048,
    TraitUIOptimized = 4096,
    TraitTightLeading = 32768,
    TraitLooseLeading = 65536,
    TraitEmphasized = 2,
    ClassMask = -268435456,
    ClassUnknown = 0,
    ClassOldStyleSerifs = 268435456,
    ClassTransitionalSerifs = 536870912,
    ClassModernSerifs = 805306368,
    ClassClarendonSerifs = 1073741824,
    ClassSlabSerifs = 1342177280,
    ClassFreeformSerifs = 1879048192,
    ClassSansSerif = -2147483648,
    ClassOrnamentals = -1879048192,
    ClassScripts = -1610612736,
    ClassSymbolic = -1073741824,
};

pub const FontDescriptorAttributeName = ?*String;

pub const FontDescriptorTraitKey = ?*String;

pub const FontDescriptorVariationKey = ?*String;

pub const FontDescriptorFeatureKey = ?*String;

pub const FontWeight = core_foundation.CGFloat;

pub const FontWidth = core_foundation.CGFloat;

pub const FontDescriptorSystemDesign = ?*String;

pub const FontTextStyle = ?*String;

pub const FontTextStyleOptionKey = ?*String;

/// https://developer.apple.com/documentation/AppKit/NSFontDescriptor?language=objc
pub const FontDescriptor = opaque {
    pub const InternalInfo = objc.ExternalClass("NSFontDescriptor", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn objectForKey(self: *@This(), attribute: FontDescriptorAttributeName) *objc.Id {
        return objc.msgSend(self, "objectForKey:", *objc.Id, .{attribute});
    }

    pub fn fontDescriptorWithFontAttributes(self: *@This(), attributes: ?*anyopaque) ?*core_text.NSFontDescriptor {
        return objc.msgSend(self, "fontDescriptorWithFontAttributes:", ?*core_text.NSFontDescriptor, .{attributes});
    }

    pub fn fontDescriptorWithNameSize(self: *@This(), fontName: ?*String, size: core_foundation.CGFloat) ?*FontDescriptor {
        return objc.msgSend(self, "fontDescriptorWithName:size:", ?*FontDescriptor, .{fontName, size});
    }

    pub fn fontDescriptorWithNameMatrix(self: *@This(), fontName: ?*String, matrix: ?*AffineTransform) ?*FontDescriptor {
        return objc.msgSend(self, "fontDescriptorWithName:matrix:", ?*FontDescriptor, .{fontName, matrix});
    }

    pub fn initWithFontAttributes(self: *@This(), attributes: ?*anyopaque) *@This() {
        return objc.msgSend(self, "initWithFontAttributes:", *@This(), .{attributes});
    }

    pub fn matchingFontDescriptorsWithMandatoryKeys(self: *@This(), mandatoryKeys: ?*anyopaque) ?*anyopaque {
        return objc.msgSend(self, "matchingFontDescriptorsWithMandatoryKeys:", ?*anyopaque, .{mandatoryKeys});
    }

    pub fn matchingFontDescriptorWithMandatoryKeys(self: *@This(), mandatoryKeys: ?*anyopaque) ?*FontDescriptor {
        return objc.msgSend(self, "matchingFontDescriptorWithMandatoryKeys:", ?*FontDescriptor, .{mandatoryKeys});
    }

    pub fn fontDescriptorByAddingAttributes(self: *@This(), attributes: ?*anyopaque) ?*FontDescriptor {
        return objc.msgSend(self, "fontDescriptorByAddingAttributes:", ?*FontDescriptor, .{attributes});
    }

    pub fn fontDescriptorWithSymbolicTraits(self: *@This(), symbolicTraits: FontDescriptorSymbolicTraits) ?*FontDescriptor {
        return objc.msgSend(self, "fontDescriptorWithSymbolicTraits:", ?*FontDescriptor, .{symbolicTraits});
    }

    pub fn fontDescriptorWithSize(self: *@This(), newPointSize: core_foundation.CGFloat) ?*FontDescriptor {
        return objc.msgSend(self, "fontDescriptorWithSize:", ?*FontDescriptor, .{newPointSize});
    }

    pub fn fontDescriptorWithMatrix(self: *@This(), matrix: ?*AffineTransform) ?*FontDescriptor {
        return objc.msgSend(self, "fontDescriptorWithMatrix:", ?*FontDescriptor, .{matrix});
    }

    pub fn fontDescriptorWithFace(self: *@This(), newFace: ?*String) ?*FontDescriptor {
        return objc.msgSend(self, "fontDescriptorWithFace:", ?*FontDescriptor, .{newFace});
    }

    pub fn fontDescriptorWithFamily(self: *@This(), newFamily: ?*String) ?*FontDescriptor {
        return objc.msgSend(self, "fontDescriptorWithFamily:", ?*FontDescriptor, .{newFamily});
    }

    pub fn fontDescriptorWithDesign(self: *@This(), design: FontDescriptorSystemDesign) *@This() {
        return objc.msgSend(self, "fontDescriptorWithDesign:", *@This(), .{design});
    }

    pub fn postscriptName(self: *@This()) ?*String {
        return objc.msgSend(self, "postscriptName", ?*String, .{});
    }

    pub fn pointSize(self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(self, "pointSize", core_foundation.CGFloat, .{});
    }

    pub fn matrix(self: *@This()) ?*AffineTransform {
        return objc.msgSend(self, "matrix", ?*AffineTransform, .{});
    }

    pub fn symbolicTraits(self: *@This()) FontDescriptorSymbolicTraits {
        return objc.msgSend(self, "symbolicTraits", FontDescriptorSymbolicTraits, .{});
    }

    pub fn requiresFontAssetRequest(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "requiresFontAssetRequest", objc.BOOL, .{});
    }

    pub fn fontAttributes(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "fontAttributes", ?*anyopaque, .{});
    }

};

pub const FontFamilyClass = objc.uint32_t;

/// https://developer.apple.com/documentation/AppKit/NSFont?language=objc
pub const Font = opaque {
    pub const InternalInfo = objc.ExternalClass("NSFont", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn fontWithNameSize(self: *@This(), fontName: ?*String, fontSize: core_foundation.CGFloat) ?*Font {
        return objc.msgSend(self, "fontWithName:size:", ?*Font, .{fontName, fontSize});
    }

    pub fn fontWithNameMatrix(self: *@This(), fontName: ?*String, fontMatrix: ?*core_foundation.CGFloat) ?*Font {
        return objc.msgSend(self, "fontWithName:matrix:", ?*Font, .{fontName, fontMatrix});
    }

    pub fn fontWithDescriptorSize(self: *@This(), fontDescriptor: ?*FontDescriptor, fontSize: core_foundation.CGFloat) ?*Font {
        return objc.msgSend(self, "fontWithDescriptor:size:", ?*Font, .{fontDescriptor, fontSize});
    }

    pub fn fontWithDescriptorTextTransform(self: *@This(), fontDescriptor: ?*FontDescriptor, textTransform: ?*AffineTransform) ?*Font {
        return objc.msgSend(self, "fontWithDescriptor:textTransform:", ?*Font, .{fontDescriptor, textTransform});
    }

    pub fn userFontOfSize(self: *@This(), fontSize: core_foundation.CGFloat) ?*Font {
        return objc.msgSend(self, "userFontOfSize:", ?*Font, .{fontSize});
    }

    pub fn userFixedPitchFontOfSize(self: *@This(), fontSize: core_foundation.CGFloat) ?*Font {
        return objc.msgSend(self, "userFixedPitchFontOfSize:", ?*Font, .{fontSize});
    }

    pub fn setUserFont(self: *@This(), font: ?*Font) void {
        return objc.msgSend(self, "setUserFont:", void, .{font});
    }

    pub fn setUserFixedPitchFont(self: *@This(), font: ?*Font) void {
        return objc.msgSend(self, "setUserFixedPitchFont:", void, .{font});
    }

    pub fn systemFontOfSize(self: *@This(), fontSize: core_foundation.CGFloat) ?*Font {
        return objc.msgSend(self, "systemFontOfSize:", ?*Font, .{fontSize});
    }

    pub fn boldSystemFontOfSize(self: *@This(), fontSize: core_foundation.CGFloat) ?*Font {
        return objc.msgSend(self, "boldSystemFontOfSize:", ?*Font, .{fontSize});
    }

    pub fn labelFontOfSize(self: *@This(), fontSize: core_foundation.CGFloat) ?*Font {
        return objc.msgSend(self, "labelFontOfSize:", ?*Font, .{fontSize});
    }

    pub fn titleBarFontOfSize(self: *@This(), fontSize: core_foundation.CGFloat) ?*Font {
        return objc.msgSend(self, "titleBarFontOfSize:", ?*Font, .{fontSize});
    }

    pub fn menuFontOfSize(self: *@This(), fontSize: core_foundation.CGFloat) ?*Font {
        return objc.msgSend(self, "menuFontOfSize:", ?*Font, .{fontSize});
    }

    pub fn menuBarFontOfSize(self: *@This(), fontSize: core_foundation.CGFloat) ?*Font {
        return objc.msgSend(self, "menuBarFontOfSize:", ?*Font, .{fontSize});
    }

    pub fn messageFontOfSize(self: *@This(), fontSize: core_foundation.CGFloat) ?*Font {
        return objc.msgSend(self, "messageFontOfSize:", ?*Font, .{fontSize});
    }

    pub fn paletteFontOfSize(self: *@This(), fontSize: core_foundation.CGFloat) ?*Font {
        return objc.msgSend(self, "paletteFontOfSize:", ?*Font, .{fontSize});
    }

    pub fn toolTipsFontOfSize(self: *@This(), fontSize: core_foundation.CGFloat) ?*Font {
        return objc.msgSend(self, "toolTipsFontOfSize:", ?*Font, .{fontSize});
    }

    pub fn controlContentFontOfSize(self: *@This(), fontSize: core_foundation.CGFloat) ?*Font {
        return objc.msgSend(self, "controlContentFontOfSize:", ?*Font, .{fontSize});
    }

    pub fn systemFontOfSizeWeight(self: *@This(), fontSize: core_foundation.CGFloat, weight: FontWeight) ?*Font {
        return objc.msgSend(self, "systemFontOfSize:weight:", ?*Font, .{fontSize, weight});
    }

    pub fn monospacedDigitSystemFontOfSizeWeight(self: *@This(), fontSize: core_foundation.CGFloat, weight: FontWeight) ?*Font {
        return objc.msgSend(self, "monospacedDigitSystemFontOfSize:weight:", ?*Font, .{fontSize, weight});
    }

    pub fn systemFontOfSizeWeightWidth(self: *@This(), fontSize: core_foundation.CGFloat, weight: FontWeight, width: FontWidth) ?*Font {
        return objc.msgSend(self, "systemFontOfSize:weight:width:", ?*Font, .{fontSize, weight, width});
    }

    pub fn monospacedSystemFontOfSizeWeight(self: *@This(), fontSize: core_foundation.CGFloat, weight: FontWeight) ?*Font {
        return objc.msgSend(self, "monospacedSystemFontOfSize:weight:", ?*Font, .{fontSize, weight});
    }

    pub fn fontWithSize(self: *@This(), fontSize: core_foundation.CGFloat) ?*Font {
        return objc.msgSend(self, "fontWithSize:", ?*Font, .{fontSize});
    }

    pub fn systemFontSizeForControlSize(self: *@This(), controlSize: ControlSize) core_foundation.CGFloat {
        return objc.msgSend(self, "systemFontSizeForControlSize:", core_foundation.CGFloat, .{controlSize});
    }

    pub fn boundingRectForCGGlyph(self: *@This(), glyph: core_graphics.Glyph) foundation.Rect {
        return objc.msgSend(self, "boundingRectForCGGlyph:", foundation.Rect, .{glyph});
    }

    pub fn advancementForCGGlyph(self: *@This(), glyph: core_graphics.Glyph) foundation.Size {
        return objc.msgSend(self, "advancementForCGGlyph:", foundation.Size, .{glyph});
    }

    pub fn getBoundingRectsForCGGlyphsCount(self: *@This(), bounds: foundation.RectArray, glyphs: ?*core_graphics.Glyph, glyphCount: objc.NSUInteger) void {
        return objc.msgSend(self, "getBoundingRects:forCGGlyphs:count:", void, .{bounds, glyphs, glyphCount});
    }

    pub fn getAdvancementsForCGGlyphsCount(self: *@This(), advancements: foundation.SizeArray, glyphs: ?*core_graphics.Glyph, glyphCount: objc.NSUInteger) void {
        return objc.msgSend(self, "getAdvancements:forCGGlyphs:count:", void, .{advancements, glyphs, glyphCount});
    }

    pub fn set(self: *@This()) void {
        return objc.msgSend(self, "set", void, .{});
    }

    pub fn setInContext(self: *@This(), graphicsContext: ?*GraphicsContext) void {
        return objc.msgSend(self, "setInContext:", void, .{graphicsContext});
    }

    pub fn systemFontSize(self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(self, "systemFontSize", core_foundation.CGFloat, .{});
    }

    pub fn smallSystemFontSize(self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(self, "smallSystemFontSize", core_foundation.CGFloat, .{});
    }

    pub fn labelFontSize(self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(self, "labelFontSize", core_foundation.CGFloat, .{});
    }

    pub fn fontName(self: *@This()) ?*String {
        return objc.msgSend(self, "fontName", ?*String, .{});
    }

    pub fn pointSize(self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(self, "pointSize", core_foundation.CGFloat, .{});
    }

    pub fn matrix(self: *@This()) ?*core_foundation.CGFloat {
        return objc.msgSend(self, "matrix", ?*core_foundation.CGFloat, .{});
    }

    pub fn familyName(self: *@This()) ?*String {
        return objc.msgSend(self, "familyName", ?*String, .{});
    }

    pub fn displayName(self: *@This()) ?*String {
        return objc.msgSend(self, "displayName", ?*String, .{});
    }

    pub fn fontDescriptor(self: *@This()) ?*FontDescriptor {
        return objc.msgSend(self, "fontDescriptor", ?*FontDescriptor, .{});
    }

    pub fn textTransform(self: *@This()) ?*AffineTransform {
        return objc.msgSend(self, "textTransform", ?*AffineTransform, .{});
    }

    pub fn numberOfGlyphs(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "numberOfGlyphs", objc.NSUInteger, .{});
    }

    pub fn mostCompatibleStringEncoding(self: *@This()) foundation.StringEncoding {
        return objc.msgSend(self, "mostCompatibleStringEncoding", foundation.StringEncoding, .{});
    }

    pub fn coveredCharacterSet(self: *@This()) ?*CharacterSet {
        return objc.msgSend(self, "coveredCharacterSet", ?*CharacterSet, .{});
    }

    pub fn boundingRectForFont(self: *@This()) foundation.Rect {
        return objc.msgSend(self, "boundingRectForFont", foundation.Rect, .{});
    }

    pub fn maximumAdvancement(self: *@This()) foundation.Size {
        return objc.msgSend(self, "maximumAdvancement", foundation.Size, .{});
    }

    pub fn ascender(self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(self, "ascender", core_foundation.CGFloat, .{});
    }

    pub fn descender(self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(self, "descender", core_foundation.CGFloat, .{});
    }

    pub fn leading(self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(self, "leading", core_foundation.CGFloat, .{});
    }

    pub fn underlinePosition(self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(self, "underlinePosition", core_foundation.CGFloat, .{});
    }

    pub fn underlineThickness(self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(self, "underlineThickness", core_foundation.CGFloat, .{});
    }

    pub fn italicAngle(self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(self, "italicAngle", core_foundation.CGFloat, .{});
    }

    pub fn capHeight(self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(self, "capHeight", core_foundation.CGFloat, .{});
    }

    pub fn xHeight(self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(self, "xHeight", core_foundation.CGFloat, .{});
    }

    pub fn isFixedPitch(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isFixedPitch", objc.BOOL, .{});
    }

    pub fn verticalFont(self: *@This()) ?*Font {
        return objc.msgSend(self, "verticalFont", ?*Font, .{});
    }

    pub fn isVertical(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isVertical", objc.BOOL, .{});
    }

};

pub const Glyph = u32;

pub const FontRenderingMode = enum(objc.NSUInteger) {
    DefaultRenderingMode = 0,
    AntialiasedRenderingMode = 1,
    IntegerAdvancementsRenderingMode = 2,
    AntialiasedIntegerAdvancementsRenderingMode = 3,
};

pub const MultibyteGlyphPacking = enum(objc.NSUInteger) {
    NativeShortGlyphPacking = 5,
};

pub extern "AppKit" fn ConvertGlyphsToPackedGlyphs(glBuf: ?*Glyph, count: objc.NSInteger, packing: MultibyteGlyphPacking, packedGlyphs: ?*i8, ) callconv(.C) objc.NSInteger;

pub const FontAssetRequestOptions = enum(objc.NSUInteger) {
    UsesStandardUI = 1,
};

/// https://developer.apple.com/documentation/AppKit/NSFontAssetRequest?language=objc
pub const FontAssetRequest = opaque {
    pub const InternalInfo = objc.ExternalClass("NSFontAssetRequest", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn init(self: *@This()) *@This() {
        return objc.msgSend(self, "init", *@This(), .{});
    }

    pub fn initWithFontDescriptorsOptions(self: *@This(), fontDescriptors: ?*anyopaque, options: FontAssetRequestOptions) *@This() {
        return objc.msgSend(self, "initWithFontDescriptors:options:", *@This(), .{fontDescriptors, options});
    }

    pub fn downloadFontAssetsWithCompletionHandler(self: *@This(), completionHandler: *const fn(?*Error) callconv(.C) objc.BOOL) void {
        return objc.msgSend(self, "downloadFontAssetsWithCompletionHandler:", void, .{completionHandler});
    }

    pub fn downloadedFontDescriptors(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "downloadedFontDescriptors", ?*anyopaque, .{});
    }

    pub fn progress(self: *@This()) ?*foundation.Progress {
        return objc.msgSend(self, "progress", ?*foundation.Progress, .{});
    }

};

pub const FontCollectionVisibility = enum(objc.NSUInteger) {
    Process = 1,
    User = 2,
    Computer = 4,
};

pub const FontCollectionMatchingOptionKey = ?*String;

pub const FontCollectionName = ?*String;

/// https://developer.apple.com/documentation/AppKit/NSFontCollection?language=objc
pub const FontCollection = opaque {
    pub const InternalInfo = objc.ExternalClass("NSFontCollection", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn fontCollectionWithDescriptors(self: *@This(), queryDescriptors: ?*anyopaque) ?*core_text.NSFontCollection {
        return objc.msgSend(self, "fontCollectionWithDescriptors:", ?*core_text.NSFontCollection, .{queryDescriptors});
    }

    pub fn fontCollectionWithLocale(self: *@This(), locale: ?*foundation.Locale) ?*FontCollection {
        return objc.msgSend(self, "fontCollectionWithLocale:", ?*FontCollection, .{locale});
    }

    pub fn showFontCollectionWithNameVisibilityError(self: *@This(), collection: ?*FontCollection, name: FontCollectionName, visibility: FontCollectionVisibility, @"error": ?*?*Error, ) objc.BOOL {
        return objc.msgSend(self, "showFontCollection:withName:visibility:error:", objc.BOOL, .{collection, name, visibility, @"error", });
    }

    pub fn hideFontCollectionWithNameVisibilityError(self: *@This(), name: FontCollectionName, visibility: FontCollectionVisibility, @"error": ?*?*Error) objc.BOOL {
        return objc.msgSend(self, "hideFontCollectionWithName:visibility:error:", objc.BOOL, .{name, visibility, @"error"});
    }

    pub fn renameFontCollectionWithNameVisibilityToNameError(self: *@This(), oldName: FontCollectionName, visibility: FontCollectionVisibility, newName: FontCollectionName, outError: ?*?*Error, ) objc.BOOL {
        return objc.msgSend(self, "renameFontCollectionWithName:visibility:toName:error:", objc.BOOL, .{oldName, visibility, newName, outError, });
    }

    pub fn fontCollectionWithName(self: *@This(), name: FontCollectionName) ?*FontCollection {
        return objc.msgSend(self, "fontCollectionWithName:", ?*FontCollection, .{name});
    }

    pub fn fontCollectionWithNameVisibility(self: *@This(), name: FontCollectionName, visibility: FontCollectionVisibility) ?*FontCollection {
        return objc.msgSend(self, "fontCollectionWithName:visibility:", ?*FontCollection, .{name, visibility});
    }

    pub fn matchingDescriptorsWithOptions(self: *@This(), options: ?*anyopaque) ?*anyopaque {
        return objc.msgSend(self, "matchingDescriptorsWithOptions:", ?*anyopaque, .{options});
    }

    pub fn matchingDescriptorsForFamily(self: *@This(), family: ?*String) ?*anyopaque {
        return objc.msgSend(self, "matchingDescriptorsForFamily:", ?*anyopaque, .{family});
    }

    pub fn matchingDescriptorsForFamilyOptions(self: *@This(), family: ?*String, options: ?*anyopaque) ?*anyopaque {
        return objc.msgSend(self, "matchingDescriptorsForFamily:options:", ?*anyopaque, .{family, options});
    }

    pub fn fontCollectionWithAllAvailableDescriptors(self: *@This()) ?*FontCollection {
        return objc.msgSend(self, "fontCollectionWithAllAvailableDescriptors", ?*FontCollection, .{});
    }

    pub fn allFontCollectionNames(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "allFontCollectionNames", ?*anyopaque, .{});
    }

    pub fn queryDescriptors(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "queryDescriptors", ?*anyopaque, .{});
    }

    pub fn exclusionDescriptors(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "exclusionDescriptors", ?*anyopaque, .{});
    }

    pub fn matchingDescriptors(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "matchingDescriptors", ?*anyopaque, .{});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSMutableFontCollection?language=objc
pub const MutableFontCollection = opaque {
    pub const InternalInfo = objc.ExternalClass("NSMutableFontCollection", @This(), FontCollection, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn fontCollectionWithDescriptors(self: *@This(), queryDescriptors: ?*anyopaque) ?*core_text.NSMutableFontCollection {
        return objc.msgSend(self, "fontCollectionWithDescriptors:", ?*core_text.NSMutableFontCollection, .{queryDescriptors});
    }

    pub fn fontCollectionWithLocale(self: *@This(), locale: ?*foundation.Locale) ?*MutableFontCollection {
        return objc.msgSend(self, "fontCollectionWithLocale:", ?*MutableFontCollection, .{locale});
    }

    pub fn fontCollectionWithName(self: *@This(), name: FontCollectionName) ?*MutableFontCollection {
        return objc.msgSend(self, "fontCollectionWithName:", ?*MutableFontCollection, .{name});
    }

    pub fn fontCollectionWithNameVisibility(self: *@This(), name: FontCollectionName, visibility: FontCollectionVisibility) ?*MutableFontCollection {
        return objc.msgSend(self, "fontCollectionWithName:visibility:", ?*MutableFontCollection, .{name, visibility});
    }

    pub fn addQueryForDescriptors(self: *@This(), descriptors: ?*anyopaque) void {
        return objc.msgSend(self, "addQueryForDescriptors:", void, .{descriptors});
    }

    pub fn removeQueryForDescriptors(self: *@This(), descriptors: ?*anyopaque) void {
        return objc.msgSend(self, "removeQueryForDescriptors:", void, .{descriptors});
    }

    pub fn fontCollectionWithAllAvailableDescriptors(self: *@This()) ?*MutableFontCollection {
        return objc.msgSend(self, "fontCollectionWithAllAvailableDescriptors", ?*MutableFontCollection, .{});
    }

    pub fn queryDescriptors(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "queryDescriptors", ?*anyopaque, .{});
    }

    pub fn setQueryDescriptors(self: *@This(), queryDescriptors: ?*anyopaque) void {
        return objc.msgSend(self, "setQueryDescriptors:", void, .{queryDescriptors});
    }

    pub fn exclusionDescriptors(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "exclusionDescriptors", ?*anyopaque, .{});
    }

    pub fn setExclusionDescriptors(self: *@This(), exclusionDescriptors: ?*anyopaque) void {
        return objc.msgSend(self, "setExclusionDescriptors:", void, .{exclusionDescriptors});
    }

};

pub const FontCollectionUserInfoKey = ?*String;

pub const FontCollectionActionTypeKey = ?*String;

pub const FontTraitMask = enum(objc.NSUInteger) {
    ItalicFontMask = 1,
    BoldFontMask = 2,
    UnboldFontMask = 4,
    NonStandardCharacterSetFontMask = 8,
    NarrowFontMask = 16,
    ExpandedFontMask = 32,
    CondensedFontMask = 64,
    SmallCapsFontMask = 128,
    PosterFontMask = 256,
    CompressedFontMask = 512,
    FixedPitchFontMask = 1024,
    UnitalicFontMask = 16777216,
};

pub const FontCollectionOptions = enum(objc.NSUInteger) {
    ApplicationOnlyMask = 1,
};

pub const FontAction = enum(objc.NSUInteger) {
    NoFontChangeAction = 0,
    ViaPanelFontAction = 1,
    AddTraitFontAction = 2,
    SizeUpFontAction = 3,
    SizeDownFontAction = 4,
    HeavierFontAction = 5,
    LighterFontAction = 6,
    RemoveTraitFontAction = 7,
};

/// https://developer.apple.com/documentation/AppKit/NSFontManager?language=objc
pub const FontManager = opaque {
    pub const InternalInfo = objc.ExternalClass("NSFontManager", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn setFontPanelFactory(self: *@This(), factoryId: *objc.Class) void {
        return objc.msgSend(self, "setFontPanelFactory:", void, .{factoryId});
    }

    pub fn setFontManagerFactory(self: *@This(), factoryId: *objc.Class) void {
        return objc.msgSend(self, "setFontManagerFactory:", void, .{factoryId});
    }

    pub fn setSelectedFontIsMultiple(self: *@This(), fontObj: ?*Font, flag: objc.BOOL) void {
        return objc.msgSend(self, "setSelectedFont:isMultiple:", void, .{fontObj, flag});
    }

    pub fn setFontMenu(self: *@This(), newMenu: ?*Menu) void {
        return objc.msgSend(self, "setFontMenu:", void, .{newMenu});
    }

    pub fn fontMenu(self: *@This(), create: objc.BOOL) ?*Menu {
        return objc.msgSend(self, "fontMenu:", ?*Menu, .{create});
    }

    pub fn fontPanel(self: *@This(), create: objc.BOOL) ?*FontPanel {
        return objc.msgSend(self, "fontPanel:", ?*FontPanel, .{create});
    }

    pub fn fontWithFamilyTraitsWeightSize(self: *@This(), family: ?*String, traits: FontTraitMask, weight: objc.NSInteger, size: core_foundation.CGFloat, ) ?*Font {
        return objc.msgSend(self, "fontWithFamily:traits:weight:size:", ?*Font, .{family, traits, weight, size, });
    }

    pub fn traitsOfFont(self: *@This(), fontObj: ?*Font) FontTraitMask {
        return objc.msgSend(self, "traitsOfFont:", FontTraitMask, .{fontObj});
    }

    pub fn weightOfFont(self: *@This(), fontObj: ?*Font) objc.NSInteger {
        return objc.msgSend(self, "weightOfFont:", objc.NSInteger, .{fontObj});
    }

    pub fn availableMembersOfFontFamily(self: *@This(), fam: ?*String) ?*anyopaque {
        return objc.msgSend(self, "availableMembersOfFontFamily:", ?*anyopaque, .{fam});
    }

    pub fn convertFont(self: *@This(), fontObj: ?*Font) ?*Font {
        return objc.msgSend(self, "convertFont:", ?*Font, .{fontObj});
    }

    pub fn convertFontToSize(self: *@This(), fontObj: ?*Font, size: core_foundation.CGFloat) ?*Font {
        return objc.msgSend(self, "convertFont:toSize:", ?*Font, .{fontObj, size});
    }

    pub fn convertFontToFace(self: *@This(), fontObj: ?*Font, typeface: ?*String) ?*Font {
        return objc.msgSend(self, "convertFont:toFace:", ?*Font, .{fontObj, typeface});
    }

    pub fn convertFontToFamily(self: *@This(), fontObj: ?*Font, family: ?*String) ?*Font {
        return objc.msgSend(self, "convertFont:toFamily:", ?*Font, .{fontObj, family});
    }

    pub fn convertFontToHaveTrait(self: *@This(), fontObj: ?*Font, trait: FontTraitMask) ?*Font {
        return objc.msgSend(self, "convertFont:toHaveTrait:", ?*Font, .{fontObj, trait});
    }

    pub fn convertFontToNotHaveTrait(self: *@This(), fontObj: ?*Font, trait: FontTraitMask) ?*Font {
        return objc.msgSend(self, "convertFont:toNotHaveTrait:", ?*Font, .{fontObj, trait});
    }

    pub fn convertWeightOfFont(self: *@This(), upFlag: objc.BOOL, fontObj: ?*Font) ?*Font {
        return objc.msgSend(self, "convertWeight:ofFont:", ?*Font, .{upFlag, fontObj});
    }

    pub fn sendAction(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "sendAction", objc.BOOL, .{});
    }

    pub fn localizedNameForFamilyFace(self: *@This(), family: ?*String, faceKey: ?*String) ?*String {
        return objc.msgSend(self, "localizedNameForFamily:face:", ?*String, .{family, faceKey});
    }

    pub fn setSelectedAttributesIsMultiple(self: *@This(), attributes: ?*anyopaque, flag: objc.BOOL) void {
        return objc.msgSend(self, "setSelectedAttributes:isMultiple:", void, .{attributes, flag});
    }

    pub fn convertAttributes(self: *@This(), attributes: ?*anyopaque) ?*anyopaque {
        return objc.msgSend(self, "convertAttributes:", ?*anyopaque, .{attributes});
    }

    pub fn availableFontNamesMatchingFontDescriptor(self: *@This(), descriptor: ?*FontDescriptor) ?*Array {
        return objc.msgSend(self, "availableFontNamesMatchingFontDescriptor:", ?*Array, .{descriptor});
    }

    pub fn fontDescriptorsInCollection(self: *@This(), collectionNames: ?*String) ?*Array {
        return objc.msgSend(self, "fontDescriptorsInCollection:", ?*Array, .{collectionNames});
    }

    pub fn addCollectionOptions(self: *@This(), collectionName: ?*String, collectionOptions: FontCollectionOptions) objc.BOOL {
        return objc.msgSend(self, "addCollection:options:", objc.BOOL, .{collectionName, collectionOptions});
    }

    pub fn removeCollection(self: *@This(), collectionName: ?*String) objc.BOOL {
        return objc.msgSend(self, "removeCollection:", objc.BOOL, .{collectionName});
    }

    pub fn addFontDescriptorsToCollection(self: *@This(), descriptors: ?*Array, collectionName: ?*String) void {
        return objc.msgSend(self, "addFontDescriptors:toCollection:", void, .{descriptors, collectionName});
    }

    pub fn removeFontDescriptorFromCollection(self: *@This(), descriptor: ?*FontDescriptor, collection: ?*String) void {
        return objc.msgSend(self, "removeFontDescriptor:fromCollection:", void, .{descriptor, collection});
    }

    pub fn convertFontTraits(self: *@This(), traits: FontTraitMask) FontTraitMask {
        return objc.msgSend(self, "convertFontTraits:", FontTraitMask, .{traits});
    }

    pub fn sharedFontManager(self: *@This()) ?*FontManager {
        return objc.msgSend(self, "sharedFontManager", ?*FontManager, .{});
    }

    pub fn isMultiple(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isMultiple", objc.BOOL, .{});
    }

    pub fn selectedFont(self: *@This()) ?*Font {
        return objc.msgSend(self, "selectedFont", ?*Font, .{});
    }

    pub fn availableFonts(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "availableFonts", ?*anyopaque, .{});
    }

    pub fn availableFontFamilies(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "availableFontFamilies", ?*anyopaque, .{});
    }

    pub fn isEnabled(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isEnabled", objc.BOOL, .{});
    }

    pub fn setEnabled(self: *@This(), enabled: objc.BOOL) void {
        return objc.msgSend(self, "setEnabled:", void, .{enabled});
    }

    pub fn action(self: *@This()) *objc.SEL {
        return objc.msgSend(self, "action", *objc.SEL, .{});
    }

    pub fn setAction(self: *@This(), action: *objc.SEL) void {
        return objc.msgSend(self, "setAction:", void, .{action});
    }

    pub fn delegate(self: *@This()) *objc.Id {
        return objc.msgSend(self, "delegate", *objc.Id, .{});
    }

    pub fn setDelegate(self: *@This(), delegate: *objc.Id) void {
        return objc.msgSend(self, "setDelegate:", void, .{delegate});
    }

    pub fn collectionNames(self: *@This()) ?*Array {
        return objc.msgSend(self, "collectionNames", ?*Array, .{});
    }

    pub fn currentFontAction(self: *@This()) FontAction {
        return objc.msgSend(self, "currentFontAction", FontAction, .{});
    }

    pub fn target(self: *@This()) *objc.Id {
        return objc.msgSend(self, "target", *objc.Id, .{});
    }

    pub fn setTarget(self: *@This(), target: *objc.Id) void {
        return objc.msgSend(self, "setTarget:", void, .{target});
    }

};

pub const WindowStyleMask = enum(objc.NSUInteger) {
    Borderless = 0,
    Titled = 1,
    Closable = 2,
    Miniaturizable = 4,
    Resizable = 8,
    TexturedBackground = 256,
    UnifiedTitleAndToolbar = 4096,
    FullScreen = 16384,
    FullSizeContentView = 32768,
    UtilityWindow = 16,
    DocModalWindow = 64,
    NonactivatingPanel = 128,
    HUDWindow = 8192,
};

pub const WindowSharingType = enum(objc.NSUInteger) {
    None = 0,
    ReadOnly = 1,
};

pub const WindowCollectionBehavior = enum(objc.NSUInteger) {
    Default = 0,
    CanJoinAllSpaces = 1,
    MoveToActiveSpace = 2,
    Managed = 4,
    Transient = 8,
    Stationary = 16,
    ParticipatesInCycle = 32,
    IgnoresCycle = 64,
    FullScreenPrimary = 128,
    FullScreenAuxiliary = 256,
    FullScreenNone = 512,
    FullScreenAllowsTiling = 2048,
    FullScreenDisallowsTiling = 4096,
    Primary = 65536,
    Auxiliary = 131072,
    CanJoinAllApplications = 262144,
};

pub const WindowAnimationBehavior = enum(objc.NSInteger) {
    Default = 0,
    None = 2,
    DocumentWindow = 3,
    UtilityWindow = 4,
    AlertPanel = 5,
};

pub const WindowNumberListOptions = enum(objc.NSUInteger) {
    AllApplications = 1,
    AllSpaces = 16,
};

pub const WindowOcclusionState = enum(objc.NSUInteger) {
    Visible = 2,
};

pub const WindowLevel = objc.NSInteger;

pub const SelectionDirection = enum(objc.NSUInteger) {
    DirectSelection = 0,
    SelectingNext = 1,
    SelectingPrevious = 2,
};

pub const WindowButton = enum(objc.NSUInteger) {
    CloseButton = 0,
    MiniaturizeButton = 1,
    ZoomButton = 2,
    ToolbarButton = 3,
    DocumentIconButton = 4,
    DocumentVersionsButton = 6,
};

pub const WindowTitleVisibility = enum(objc.NSInteger) {
    Visible = 0,
    Hidden = 1,
};

pub const WindowToolbarStyle = enum(objc.NSInteger) {
    Automatic = 0,
    Expanded = 1,
    Preference = 2,
    Unified = 3,
    UnifiedCompact = 4,
};

pub const WindowUserTabbingPreference = enum(objc.NSInteger) {
    Manual = 0,
    Always = 1,
    InFullScreen = 2,
};

pub const WindowTabbingMode = enum(objc.NSInteger) {
    Automatic = 0,
    Preferred = 1,
    Disallowed = 2,
};

pub const TitlebarSeparatorStyle = enum(objc.NSInteger) {
    Automatic = 0,
    None = 1,
    Line = 2,
    Shadow = 3,
};

pub const WindowFrameAutosaveName = ?*String;

pub const WindowPersistableFrameDescriptor = ?*String;

pub const WindowTabbingIdentifier = ?*String;

/// https://developer.apple.com/documentation/AppKit/NSWindow?language=objc
pub const Window = opaque {
    pub const InternalInfo = objc.ExternalClass("NSWindow", @This(), Responder, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn frameRectForContentRectStyleMask(self: *@This(), cRect: foundation.Rect, style: WindowStyleMask) foundation.Rect {
        return objc.msgSend(self, "frameRectForContentRect:styleMask:", foundation.Rect, .{cRect, style});
    }

    pub fn contentRectForFrameRectStyleMask(self: *@This(), fRect: foundation.Rect, style: WindowStyleMask) foundation.Rect {
        return objc.msgSend(self, "contentRectForFrameRect:styleMask:", foundation.Rect, .{fRect, style});
    }

    pub fn minFrameWidthWithTitleStyleMask(self: *@This(), title: ?*String, style: WindowStyleMask) core_foundation.CGFloat {
        return objc.msgSend(self, "minFrameWidthWithTitle:styleMask:", core_foundation.CGFloat, .{title, style});
    }

    pub fn frameRectForContentRect(self: *@This(), contentRect: foundation.Rect) foundation.Rect {
        return objc.msgSend(self, "frameRectForContentRect:", foundation.Rect, .{contentRect});
    }

    pub fn contentRectForFrameRect(self: *@This(), frameRect: foundation.Rect) foundation.Rect {
        return objc.msgSend(self, "contentRectForFrameRect:", foundation.Rect, .{frameRect});
    }

    pub fn initWithContentRectStyleMaskBackingDefer(self: *@This(), contentRect: foundation.Rect, style: WindowStyleMask, backingStoreType: BackingStoreType, flag: objc.BOOL, ) *@This() {
        return objc.msgSend(self, "initWithContentRect:styleMask:backing:defer:", *@This(), .{contentRect, style, backingStoreType, flag, });
    }

    pub fn initWithContentRectStyleMaskBackingDeferScreen(self: *@This(), contentRect: foundation.Rect, style: WindowStyleMask, backingStoreType: BackingStoreType, flag: objc.BOOL, screen: ?*Screen, ) *@This() {
        return objc.msgSend(self, "initWithContentRect:styleMask:backing:defer:screen:", *@This(), .{contentRect, style, backingStoreType, flag, screen, });
    }

    pub fn initWithCoder(self: *@This(), coder: ?*foundation.Coder) *@This() {
        return objc.msgSend(self, "initWithCoder:", *@This(), .{coder});
    }

    pub fn addTitlebarAccessoryViewController(self: *@This(), childViewController: ?*TitlebarAccessoryViewController) void {
        return objc.msgSend(self, "addTitlebarAccessoryViewController:", void, .{childViewController});
    }

    pub fn insertTitlebarAccessoryViewControllerAtIndex(self: *@This(), childViewController: ?*TitlebarAccessoryViewController, index: objc.NSInteger) void {
        return objc.msgSend(self, "insertTitlebarAccessoryViewController:atIndex:", void, .{childViewController, index});
    }

    pub fn removeTitlebarAccessoryViewControllerAtIndex(self: *@This(), index: objc.NSInteger) void {
        return objc.msgSend(self, "removeTitlebarAccessoryViewControllerAtIndex:", void, .{index});
    }

    pub fn setTitleWithRepresentedFilename(self: *@This(), filename: ?*String) void {
        return objc.msgSend(self, "setTitleWithRepresentedFilename:", void, .{filename});
    }

    pub fn fieldEditorForObject(self: *@This(), createFlag: objc.BOOL, object: *objc.Id) ?*Text {
        return objc.msgSend(self, "fieldEditor:forObject:", ?*Text, .{createFlag, object});
    }

    pub fn endEditingFor(self: *@This(), object: *objc.Id) void {
        return objc.msgSend(self, "endEditingFor:", void, .{object});
    }

    pub fn constrainFrameRectToScreen(self: *@This(), frameRect: foundation.Rect, screen: ?*Screen) foundation.Rect {
        return objc.msgSend(self, "constrainFrameRect:toScreen:", foundation.Rect, .{frameRect, screen});
    }

    pub fn setFrameDisplay(self: *@This(), frameRect: foundation.Rect, flag: objc.BOOL) void {
        return objc.msgSend(self, "setFrame:display:", void, .{frameRect, flag});
    }

    pub fn setContentSize(self: *@This(), size: foundation.Size) void {
        return objc.msgSend(self, "setContentSize:", void, .{size});
    }

    pub fn setFrameOrigin(self: *@This(), point: foundation.Point) void {
        return objc.msgSend(self, "setFrameOrigin:", void, .{point});
    }

    pub fn setFrameTopLeftPoint(self: *@This(), point: foundation.Point) void {
        return objc.msgSend(self, "setFrameTopLeftPoint:", void, .{point});
    }

    pub fn cascadeTopLeftFromPoint(self: *@This(), topLeftPoint: foundation.Point) foundation.Point {
        return objc.msgSend(self, "cascadeTopLeftFromPoint:", foundation.Point, .{topLeftPoint});
    }

    pub fn animationResizeTime(self: *@This(), newFrame: foundation.Rect) foundation.TimeInterval {
        return objc.msgSend(self, "animationResizeTime:", foundation.TimeInterval, .{newFrame});
    }

    pub fn setFrameDisplayAnimate(self: *@This(), frameRect: foundation.Rect, displayFlag: objc.BOOL, animateFlag: objc.BOOL) void {
        return objc.msgSend(self, "setFrame:display:animate:", void, .{frameRect, displayFlag, animateFlag});
    }

    pub fn displayIfNeeded(self: *@This()) void {
        return objc.msgSend(self, "displayIfNeeded", void, .{});
    }

    pub fn display(self: *@This()) void {
        return objc.msgSend(self, "display", void, .{});
    }

    pub fn update(self: *@This()) void {
        return objc.msgSend(self, "update", void, .{});
    }

    pub fn makeFirstResponder(self: *@This(), responder: ?*Responder) objc.BOOL {
        return objc.msgSend(self, "makeFirstResponder:", objc.BOOL, .{responder});
    }

    pub fn close(self: *@This()) void {
        return objc.msgSend(self, "close", void, .{});
    }

    pub fn miniaturize(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "miniaturize:", void, .{sender});
    }

    pub fn deminiaturize(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "deminiaturize:", void, .{sender});
    }

    pub fn zoom(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "zoom:", void, .{sender});
    }

    pub fn tryToPerformWith(self: *@This(), action: *objc.SEL, object: *objc.Id) objc.BOOL {
        return objc.msgSend(self, "tryToPerform:with:", objc.BOOL, .{action, object});
    }

    pub fn validRequestorForSendTypeReturnType(self: *@This(), sendType: PasteboardType, returnType: PasteboardType) *objc.Id {
        return objc.msgSend(self, "validRequestorForSendType:returnType:", *objc.Id, .{sendType, returnType});
    }

    pub fn setContentBorderThicknessForEdge(self: *@This(), thickness: core_foundation.CGFloat, edge: foundation.RectEdge) void {
        return objc.msgSend(self, "setContentBorderThickness:forEdge:", void, .{thickness, edge});
    }

    pub fn contentBorderThicknessForEdge(self: *@This(), edge: foundation.RectEdge) core_foundation.CGFloat {
        return objc.msgSend(self, "contentBorderThicknessForEdge:", core_foundation.CGFloat, .{edge});
    }

    pub fn setAutorecalculatesContentBorderThicknessForEdge(self: *@This(), flag: objc.BOOL, edge: foundation.RectEdge) void {
        return objc.msgSend(self, "setAutorecalculatesContentBorderThickness:forEdge:", void, .{flag, edge});
    }

    pub fn autorecalculatesContentBorderThicknessForEdge(self: *@This(), edge: foundation.RectEdge) objc.BOOL {
        return objc.msgSend(self, "autorecalculatesContentBorderThicknessForEdge:", objc.BOOL, .{edge});
    }

    pub fn center(self: *@This()) void {
        return objc.msgSend(self, "center", void, .{});
    }

    pub fn makeKeyAndOrderFront(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "makeKeyAndOrderFront:", void, .{sender});
    }

    pub fn orderFront(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "orderFront:", void, .{sender});
    }

    pub fn orderBack(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "orderBack:", void, .{sender});
    }

    pub fn orderOut(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "orderOut:", void, .{sender});
    }

    pub fn orderWindowRelativeTo(self: *@This(), place: WindowOrderingMode, otherWin: objc.NSInteger) void {
        return objc.msgSend(self, "orderWindow:relativeTo:", void, .{place, otherWin});
    }

    pub fn orderFrontRegardless(self: *@This()) void {
        return objc.msgSend(self, "orderFrontRegardless", void, .{});
    }

    pub fn makeKeyWindow(self: *@This()) void {
        return objc.msgSend(self, "makeKeyWindow", void, .{});
    }

    pub fn makeMainWindow(self: *@This()) void {
        return objc.msgSend(self, "makeMainWindow", void, .{});
    }

    pub fn becomeKeyWindow(self: *@This()) void {
        return objc.msgSend(self, "becomeKeyWindow", void, .{});
    }

    pub fn resignKeyWindow(self: *@This()) void {
        return objc.msgSend(self, "resignKeyWindow", void, .{});
    }

    pub fn becomeMainWindow(self: *@This()) void {
        return objc.msgSend(self, "becomeMainWindow", void, .{});
    }

    pub fn resignMainWindow(self: *@This()) void {
        return objc.msgSend(self, "resignMainWindow", void, .{});
    }

    pub fn convertRectToScreen(self: *@This(), rect: foundation.Rect) foundation.Rect {
        return objc.msgSend(self, "convertRectToScreen:", foundation.Rect, .{rect});
    }

    pub fn convertRectFromScreen(self: *@This(), rect: foundation.Rect) foundation.Rect {
        return objc.msgSend(self, "convertRectFromScreen:", foundation.Rect, .{rect});
    }

    pub fn convertPointToScreen(self: *@This(), point: foundation.Point) foundation.Point {
        return objc.msgSend(self, "convertPointToScreen:", foundation.Point, .{point});
    }

    pub fn convertPointFromScreen(self: *@This(), point: foundation.Point) foundation.Point {
        return objc.msgSend(self, "convertPointFromScreen:", foundation.Point, .{point});
    }

    pub fn convertRectToBacking(self: *@This(), rect: foundation.Rect) foundation.Rect {
        return objc.msgSend(self, "convertRectToBacking:", foundation.Rect, .{rect});
    }

    pub fn convertRectFromBacking(self: *@This(), rect: foundation.Rect) foundation.Rect {
        return objc.msgSend(self, "convertRectFromBacking:", foundation.Rect, .{rect});
    }

    pub fn convertPointToBacking(self: *@This(), point: foundation.Point) foundation.Point {
        return objc.msgSend(self, "convertPointToBacking:", foundation.Point, .{point});
    }

    pub fn convertPointFromBacking(self: *@This(), point: foundation.Point) foundation.Point {
        return objc.msgSend(self, "convertPointFromBacking:", foundation.Point, .{point});
    }

    pub fn backingAlignedRectOptions(self: *@This(), rect: foundation.Rect, options: foundation.AlignmentOptions) foundation.Rect {
        return objc.msgSend(self, "backingAlignedRect:options:", foundation.Rect, .{rect, options});
    }

    pub fn performClose(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "performClose:", void, .{sender});
    }

    pub fn performMiniaturize(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "performMiniaturize:", void, .{sender});
    }

    pub fn performZoom(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "performZoom:", void, .{sender});
    }

    pub fn dataWithEPSInsideRect(self: *@This(), rect: foundation.Rect) ?*Data {
        return objc.msgSend(self, "dataWithEPSInsideRect:", ?*Data, .{rect});
    }

    pub fn dataWithPDFInsideRect(self: *@This(), rect: foundation.Rect) ?*Data {
        return objc.msgSend(self, "dataWithPDFInsideRect:", ?*Data, .{rect});
    }

    pub fn print(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "print:", void, .{sender});
    }

    pub fn setDynamicDepthLimit(self: *@This(), flag: objc.BOOL) void {
        return objc.msgSend(self, "setDynamicDepthLimit:", void, .{flag});
    }

    pub fn invalidateShadow(self: *@This()) void {
        return objc.msgSend(self, "invalidateShadow", void, .{});
    }

    pub fn toggleFullScreen(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "toggleFullScreen:", void, .{sender});
    }

    pub fn setFrameFromString(self: *@This(), string: WindowPersistableFrameDescriptor) void {
        return objc.msgSend(self, "setFrameFromString:", void, .{string});
    }

    pub fn saveFrameUsingName(self: *@This(), name: WindowFrameAutosaveName) void {
        return objc.msgSend(self, "saveFrameUsingName:", void, .{name});
    }

    pub fn setFrameUsingNameForce(self: *@This(), name: WindowFrameAutosaveName, force: objc.BOOL) objc.BOOL {
        return objc.msgSend(self, "setFrameUsingName:force:", objc.BOOL, .{name, force});
    }

    pub fn setFrameUsingName(self: *@This(), name: WindowFrameAutosaveName) objc.BOOL {
        return objc.msgSend(self, "setFrameUsingName:", objc.BOOL, .{name});
    }

    pub fn setFrameAutosaveName(self: *@This(), name: WindowFrameAutosaveName) objc.BOOL {
        return objc.msgSend(self, "setFrameAutosaveName:", objc.BOOL, .{name});
    }

    pub fn removeFrameUsingName(self: *@This(), name: WindowFrameAutosaveName) void {
        return objc.msgSend(self, "removeFrameUsingName:", void, .{name});
    }

    pub fn beginSheetCompletionHandler(self: *@This(), sheetWindow: ?*Window, handler: *const fn(ModalResponse) callconv(.C) void) void {
        return objc.msgSend(self, "beginSheet:completionHandler:", void, .{sheetWindow, handler});
    }

    pub fn beginCriticalSheetCompletionHandler(self: *@This(), sheetWindow: ?*Window, handler: *const fn(ModalResponse) callconv(.C) void) void {
        return objc.msgSend(self, "beginCriticalSheet:completionHandler:", void, .{sheetWindow, handler});
    }

    pub fn endSheet(self: *@This(), sheetWindow: ?*Window) void {
        return objc.msgSend(self, "endSheet:", void, .{sheetWindow});
    }

    pub fn endSheetReturnCode(self: *@This(), sheetWindow: ?*Window, returnCode: ModalResponse) void {
        return objc.msgSend(self, "endSheet:returnCode:", void, .{sheetWindow, returnCode});
    }

    pub fn standardWindowButtonForStyleMask(self: *@This(), b: WindowButton, styleMask: WindowStyleMask) ?*Button {
        return objc.msgSend(self, "standardWindowButton:forStyleMask:", ?*Button, .{b, styleMask});
    }

    pub fn standardWindowButton(self: *@This(), b: WindowButton) ?*Button {
        return objc.msgSend(self, "standardWindowButton:", ?*Button, .{b});
    }

    pub fn addChildWindowOrdered(self: *@This(), childWin: ?*Window, place: WindowOrderingMode) void {
        return objc.msgSend(self, "addChildWindow:ordered:", void, .{childWin, place});
    }

    pub fn removeChildWindow(self: *@This(), childWin: ?*Window) void {
        return objc.msgSend(self, "removeChildWindow:", void, .{childWin});
    }

    pub fn canRepresentDisplayGamut(self: *@This(), displayGamut: DisplayGamut) objc.BOOL {
        return objc.msgSend(self, "canRepresentDisplayGamut:", objc.BOOL, .{displayGamut});
    }

    pub fn windowNumbersWithOptions(self: *@This(), options: WindowNumberListOptions) ?*anyopaque {
        return objc.msgSend(self, "windowNumbersWithOptions:", ?*anyopaque, .{options});
    }

    pub fn windowNumberAtPointBelowWindowWithWindowNumber(self: *@This(), point: foundation.Point, windowNumber: objc.NSInteger) objc.NSInteger {
        return objc.msgSend(self, "windowNumberAtPoint:belowWindowWithWindowNumber:", objc.NSInteger, .{point, windowNumber});
    }

    pub fn windowWithContentViewController(self: *@This(), contentViewController: ?*ViewController) *@This() {
        return objc.msgSend(self, "windowWithContentViewController:", *@This(), .{contentViewController});
    }

    pub fn performWindowDragWithEvent(self: *@This(), event: ?*Event) void {
        return objc.msgSend(self, "performWindowDragWithEvent:", void, .{event});
    }

    pub fn selectNextKeyView(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "selectNextKeyView:", void, .{sender});
    }

    pub fn selectPreviousKeyView(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "selectPreviousKeyView:", void, .{sender});
    }

    pub fn selectKeyViewFollowingView(self: *@This(), view: ?*View) void {
        return objc.msgSend(self, "selectKeyViewFollowingView:", void, .{view});
    }

    pub fn selectKeyViewPrecedingView(self: *@This(), view: ?*View) void {
        return objc.msgSend(self, "selectKeyViewPrecedingView:", void, .{view});
    }

    pub fn disableKeyEquivalentForDefaultButtonCell(self: *@This()) void {
        return objc.msgSend(self, "disableKeyEquivalentForDefaultButtonCell", void, .{});
    }

    pub fn enableKeyEquivalentForDefaultButtonCell(self: *@This()) void {
        return objc.msgSend(self, "enableKeyEquivalentForDefaultButtonCell", void, .{});
    }

    pub fn recalculateKeyViewLoop(self: *@This()) void {
        return objc.msgSend(self, "recalculateKeyViewLoop", void, .{});
    }

    pub fn toggleToolbarShown(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "toggleToolbarShown:", void, .{sender});
    }

    pub fn runToolbarCustomizationPalette(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "runToolbarCustomizationPalette:", void, .{sender});
    }

    pub fn selectNextTab(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "selectNextTab:", void, .{sender});
    }

    pub fn selectPreviousTab(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "selectPreviousTab:", void, .{sender});
    }

    pub fn moveTabToNewWindow(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "moveTabToNewWindow:", void, .{sender});
    }

    pub fn mergeAllWindows(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "mergeAllWindows:", void, .{sender});
    }

    pub fn toggleTabBar(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "toggleTabBar:", void, .{sender});
    }

    pub fn toggleTabOverview(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "toggleTabOverview:", void, .{sender});
    }

    pub fn addTabbedWindowOrdered(self: *@This(), window: ?*Window, ordered: WindowOrderingMode) void {
        return objc.msgSend(self, "addTabbedWindow:ordered:", void, .{window, ordered});
    }

    pub fn transferWindowSharingToWindowCompletionHandler(self: *@This(), window: ?*Window, completionHandler: *const fn(?*Error) callconv(.C) void) void {
        return objc.msgSend(self, "transferWindowSharingToWindow:completionHandler:", void, .{window, completionHandler});
    }

    pub fn requestSharingOfWindowCompletionHandler(self: *@This(), window: ?*Window, completionHandler: *const fn(?*Error) callconv(.C) void) void {
        return objc.msgSend(self, "requestSharingOfWindow:completionHandler:", void, .{window, completionHandler});
    }

    pub fn requestSharingOfWindowUsingPreviewTitleCompletionHandler(self: *@This(), image: ?*Image, title: ?*String, completionHandler: *const fn(?*Error) callconv(.C) void) void {
        return objc.msgSend(self, "requestSharingOfWindowUsingPreview:title:completionHandler:", void, .{image, title, completionHandler});
    }

    pub fn defaultDepthLimit(self: *@This()) WindowDepth {
        return objc.msgSend(self, "defaultDepthLimit", WindowDepth, .{});
    }

    pub fn title(self: *@This()) ?*String {
        return objc.msgSend(self, "title", ?*String, .{});
    }

    pub fn setTitle(self: *@This(), title: ?*String) void {
        return objc.msgSend(self, "setTitle:", void, .{title});
    }

    pub fn subtitle(self: *@This()) ?*String {
        return objc.msgSend(self, "subtitle", ?*String, .{});
    }

    pub fn setSubtitle(self: *@This(), subtitle: ?*String) void {
        return objc.msgSend(self, "setSubtitle:", void, .{subtitle});
    }

    pub fn titleVisibility(self: *@This()) WindowTitleVisibility {
        return objc.msgSend(self, "titleVisibility", WindowTitleVisibility, .{});
    }

    pub fn setTitleVisibility(self: *@This(), titleVisibility: WindowTitleVisibility) void {
        return objc.msgSend(self, "setTitleVisibility:", void, .{titleVisibility});
    }

    pub fn titlebarAppearsTransparent(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "titlebarAppearsTransparent", objc.BOOL, .{});
    }

    pub fn setTitlebarAppearsTransparent(self: *@This(), titlebarAppearsTransparent: objc.BOOL) void {
        return objc.msgSend(self, "setTitlebarAppearsTransparent:", void, .{titlebarAppearsTransparent});
    }

    pub fn toolbarStyle(self: *@This()) WindowToolbarStyle {
        return objc.msgSend(self, "toolbarStyle", WindowToolbarStyle, .{});
    }

    pub fn setToolbarStyle(self: *@This(), toolbarStyle: WindowToolbarStyle) void {
        return objc.msgSend(self, "setToolbarStyle:", void, .{toolbarStyle});
    }

    pub fn contentLayoutRect(self: *@This()) foundation.Rect {
        return objc.msgSend(self, "contentLayoutRect", foundation.Rect, .{});
    }

    pub fn contentLayoutGuide(self: *@This()) *objc.Id {
        return objc.msgSend(self, "contentLayoutGuide", *objc.Id, .{});
    }

    pub fn titlebarAccessoryViewControllers(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "titlebarAccessoryViewControllers", ?*anyopaque, .{});
    }

    pub fn setTitlebarAccessoryViewControllers(self: *@This(), titlebarAccessoryViewControllers: ?*anyopaque) void {
        return objc.msgSend(self, "setTitlebarAccessoryViewControllers:", void, .{titlebarAccessoryViewControllers});
    }

    pub fn representedURL(self: *@This()) ?*URL {
        return objc.msgSend(self, "representedURL", ?*URL, .{});
    }

    pub fn setRepresentedURL(self: *@This(), representedURL: ?*URL) void {
        return objc.msgSend(self, "setRepresentedURL:", void, .{representedURL});
    }

    pub fn representedFilename(self: *@This()) ?*String {
        return objc.msgSend(self, "representedFilename", ?*String, .{});
    }

    pub fn setRepresentedFilename(self: *@This(), representedFilename: ?*String) void {
        return objc.msgSend(self, "setRepresentedFilename:", void, .{representedFilename});
    }

    pub fn isExcludedFromWindowsMenu(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isExcludedFromWindowsMenu", objc.BOOL, .{});
    }

    pub fn setExcludedFromWindowsMenu(self: *@This(), excludedFromWindowsMenu: objc.BOOL) void {
        return objc.msgSend(self, "setExcludedFromWindowsMenu:", void, .{excludedFromWindowsMenu});
    }

    pub fn contentView(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "contentView", ?*anyopaque, .{});
    }

    pub fn setContentView(self: *@This(), contentView: ?*anyopaque) void {
        return objc.msgSend(self, "setContentView:", void, .{contentView});
    }

    pub fn delegate(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "delegate", ?*anyopaque, .{});
    }

    pub fn setDelegate(self: *@This(), delegate: ?*anyopaque) void {
        return objc.msgSend(self, "setDelegate:", void, .{delegate});
    }

    pub fn windowNumber(self: *@This()) objc.NSInteger {
        return objc.msgSend(self, "windowNumber", objc.NSInteger, .{});
    }

    pub fn styleMask(self: *@This()) WindowStyleMask {
        return objc.msgSend(self, "styleMask", WindowStyleMask, .{});
    }

    pub fn setStyleMask(self: *@This(), styleMask: WindowStyleMask) void {
        return objc.msgSend(self, "setStyleMask:", void, .{styleMask});
    }

    pub fn cascadingReferenceFrame(self: *@This()) foundation.Rect {
        return objc.msgSend(self, "cascadingReferenceFrame", foundation.Rect, .{});
    }

    pub fn frame(self: *@This()) foundation.Rect {
        return objc.msgSend(self, "frame", foundation.Rect, .{});
    }

    pub fn inLiveResize(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "inLiveResize", objc.BOOL, .{});
    }

    pub fn resizeIncrements(self: *@This()) foundation.Size {
        return objc.msgSend(self, "resizeIncrements", foundation.Size, .{});
    }

    pub fn setResizeIncrements(self: *@This(), resizeIncrements: foundation.Size) void {
        return objc.msgSend(self, "setResizeIncrements:", void, .{resizeIncrements});
    }

    pub fn aspectRatio(self: *@This()) foundation.Size {
        return objc.msgSend(self, "aspectRatio", foundation.Size, .{});
    }

    pub fn setAspectRatio(self: *@This(), aspectRatio: foundation.Size) void {
        return objc.msgSend(self, "setAspectRatio:", void, .{aspectRatio});
    }

    pub fn contentResizeIncrements(self: *@This()) foundation.Size {
        return objc.msgSend(self, "contentResizeIncrements", foundation.Size, .{});
    }

    pub fn setContentResizeIncrements(self: *@This(), contentResizeIncrements: foundation.Size) void {
        return objc.msgSend(self, "setContentResizeIncrements:", void, .{contentResizeIncrements});
    }

    pub fn contentAspectRatio(self: *@This()) foundation.Size {
        return objc.msgSend(self, "contentAspectRatio", foundation.Size, .{});
    }

    pub fn setContentAspectRatio(self: *@This(), contentAspectRatio: foundation.Size) void {
        return objc.msgSend(self, "setContentAspectRatio:", void, .{contentAspectRatio});
    }

    pub fn viewsNeedDisplay(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "viewsNeedDisplay", objc.BOOL, .{});
    }

    pub fn setViewsNeedDisplay(self: *@This(), viewsNeedDisplay: objc.BOOL) void {
        return objc.msgSend(self, "setViewsNeedDisplay:", void, .{viewsNeedDisplay});
    }

    pub fn preservesContentDuringLiveResize(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "preservesContentDuringLiveResize", objc.BOOL, .{});
    }

    pub fn setPreservesContentDuringLiveResize(self: *@This(), preservesContentDuringLiveResize: objc.BOOL) void {
        return objc.msgSend(self, "setPreservesContentDuringLiveResize:", void, .{preservesContentDuringLiveResize});
    }

    pub fn firstResponder(self: *@This()) ?*Responder {
        return objc.msgSend(self, "firstResponder", ?*Responder, .{});
    }

    pub fn resizeFlags(self: *@This()) EventModifierFlags {
        return objc.msgSend(self, "resizeFlags", EventModifierFlags, .{});
    }

    pub fn isReleasedWhenClosed(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isReleasedWhenClosed", objc.BOOL, .{});
    }

    pub fn setReleasedWhenClosed(self: *@This(), releasedWhenClosed: objc.BOOL) void {
        return objc.msgSend(self, "setReleasedWhenClosed:", void, .{releasedWhenClosed});
    }

    pub fn isZoomed(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isZoomed", objc.BOOL, .{});
    }

    pub fn isMiniaturized(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isMiniaturized", objc.BOOL, .{});
    }

    pub fn backgroundColor(self: *@This()) ?*Color {
        return objc.msgSend(self, "backgroundColor", ?*Color, .{});
    }

    pub fn setBackgroundColor(self: *@This(), backgroundColor: ?*Color) void {
        return objc.msgSend(self, "setBackgroundColor:", void, .{backgroundColor});
    }

    pub fn isMovable(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isMovable", objc.BOOL, .{});
    }

    pub fn setMovable(self: *@This(), movable: objc.BOOL) void {
        return objc.msgSend(self, "setMovable:", void, .{movable});
    }

    pub fn isMovableByWindowBackground(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isMovableByWindowBackground", objc.BOOL, .{});
    }

    pub fn setMovableByWindowBackground(self: *@This(), movableByWindowBackground: objc.BOOL) void {
        return objc.msgSend(self, "setMovableByWindowBackground:", void, .{movableByWindowBackground});
    }

    pub fn hidesOnDeactivate(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "hidesOnDeactivate", objc.BOOL, .{});
    }

    pub fn setHidesOnDeactivate(self: *@This(), hidesOnDeactivate: objc.BOOL) void {
        return objc.msgSend(self, "setHidesOnDeactivate:", void, .{hidesOnDeactivate});
    }

    pub fn canHide(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "canHide", objc.BOOL, .{});
    }

    pub fn setCanHide(self: *@This(), canHide: objc.BOOL) void {
        return objc.msgSend(self, "setCanHide:", void, .{canHide});
    }

    pub fn miniwindowImage(self: *@This()) ?*Image {
        return objc.msgSend(self, "miniwindowImage", ?*Image, .{});
    }

    pub fn setMiniwindowImage(self: *@This(), miniwindowImage: ?*Image) void {
        return objc.msgSend(self, "setMiniwindowImage:", void, .{miniwindowImage});
    }

    pub fn miniwindowTitle(self: *@This()) ?*String {
        return objc.msgSend(self, "miniwindowTitle", ?*String, .{});
    }

    pub fn setMiniwindowTitle(self: *@This(), miniwindowTitle: ?*String) void {
        return objc.msgSend(self, "setMiniwindowTitle:", void, .{miniwindowTitle});
    }

    pub fn dockTile(self: *@This()) ?*DockTile {
        return objc.msgSend(self, "dockTile", ?*DockTile, .{});
    }

    pub fn isDocumentEdited(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isDocumentEdited", objc.BOOL, .{});
    }

    pub fn setDocumentEdited(self: *@This(), documentEdited: objc.BOOL) void {
        return objc.msgSend(self, "setDocumentEdited:", void, .{documentEdited});
    }

    pub fn isVisible(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isVisible", objc.BOOL, .{});
    }

    pub fn isKeyWindow(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isKeyWindow", objc.BOOL, .{});
    }

    pub fn isMainWindow(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isMainWindow", objc.BOOL, .{});
    }

    pub fn canBecomeKeyWindow(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "canBecomeKeyWindow", objc.BOOL, .{});
    }

    pub fn canBecomeMainWindow(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "canBecomeMainWindow", objc.BOOL, .{});
    }

    pub fn worksWhenModal(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "worksWhenModal", objc.BOOL, .{});
    }

    pub fn preventsApplicationTerminationWhenModal(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "preventsApplicationTerminationWhenModal", objc.BOOL, .{});
    }

    pub fn setPreventsApplicationTerminationWhenModal(self: *@This(), preventsApplicationTerminationWhenModal: objc.BOOL) void {
        return objc.msgSend(self, "setPreventsApplicationTerminationWhenModal:", void, .{preventsApplicationTerminationWhenModal});
    }

    pub fn backingScaleFactor(self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(self, "backingScaleFactor", core_foundation.CGFloat, .{});
    }

    pub fn allowsToolTipsWhenApplicationIsInactive(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "allowsToolTipsWhenApplicationIsInactive", objc.BOOL, .{});
    }

    pub fn setAllowsToolTipsWhenApplicationIsInactive(self: *@This(), allowsToolTipsWhenApplicationIsInactive: objc.BOOL) void {
        return objc.msgSend(self, "setAllowsToolTipsWhenApplicationIsInactive:", void, .{allowsToolTipsWhenApplicationIsInactive});
    }

    pub fn backingType(self: *@This()) BackingStoreType {
        return objc.msgSend(self, "backingType", BackingStoreType, .{});
    }

    pub fn setBackingType(self: *@This(), backingType: BackingStoreType) void {
        return objc.msgSend(self, "setBackingType:", void, .{backingType});
    }

    pub fn level(self: *@This()) WindowLevel {
        return objc.msgSend(self, "level", WindowLevel, .{});
    }

    pub fn setLevel(self: *@This(), level: WindowLevel) void {
        return objc.msgSend(self, "setLevel:", void, .{level});
    }

    pub fn depthLimit(self: *@This()) WindowDepth {
        return objc.msgSend(self, "depthLimit", WindowDepth, .{});
    }

    pub fn setDepthLimit(self: *@This(), depthLimit: WindowDepth) void {
        return objc.msgSend(self, "setDepthLimit:", void, .{depthLimit});
    }

    pub fn hasDynamicDepthLimit(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "hasDynamicDepthLimit", objc.BOOL, .{});
    }

    pub fn screen(self: *@This()) ?*Screen {
        return objc.msgSend(self, "screen", ?*Screen, .{});
    }

    pub fn deepestScreen(self: *@This()) ?*Screen {
        return objc.msgSend(self, "deepestScreen", ?*Screen, .{});
    }

    pub fn hasShadow(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "hasShadow", objc.BOOL, .{});
    }

    pub fn setHasShadow(self: *@This(), hasShadow: objc.BOOL) void {
        return objc.msgSend(self, "setHasShadow:", void, .{hasShadow});
    }

    pub fn alphaValue(self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(self, "alphaValue", core_foundation.CGFloat, .{});
    }

    pub fn setAlphaValue(self: *@This(), alphaValue: core_foundation.CGFloat) void {
        return objc.msgSend(self, "setAlphaValue:", void, .{alphaValue});
    }

    pub fn isOpaque(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isOpaque", objc.BOOL, .{});
    }

    pub fn setOpaque(self: *@This(), opaque: objc.BOOL) void {
        return objc.msgSend(self, "setOpaque:", void, .{opaque});
    }

    pub fn sharingType(self: *@This()) WindowSharingType {
        return objc.msgSend(self, "sharingType", WindowSharingType, .{});
    }

    pub fn setSharingType(self: *@This(), sharingType: WindowSharingType) void {
        return objc.msgSend(self, "setSharingType:", void, .{sharingType});
    }

    pub fn allowsConcurrentViewDrawing(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "allowsConcurrentViewDrawing", objc.BOOL, .{});
    }

    pub fn setAllowsConcurrentViewDrawing(self: *@This(), allowsConcurrentViewDrawing: objc.BOOL) void {
        return objc.msgSend(self, "setAllowsConcurrentViewDrawing:", void, .{allowsConcurrentViewDrawing});
    }

    pub fn displaysWhenScreenProfileChanges(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "displaysWhenScreenProfileChanges", objc.BOOL, .{});
    }

    pub fn setDisplaysWhenScreenProfileChanges(self: *@This(), displaysWhenScreenProfileChanges: objc.BOOL) void {
        return objc.msgSend(self, "setDisplaysWhenScreenProfileChanges:", void, .{displaysWhenScreenProfileChanges});
    }

    pub fn canBecomeVisibleWithoutLogin(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "canBecomeVisibleWithoutLogin", objc.BOOL, .{});
    }

    pub fn setCanBecomeVisibleWithoutLogin(self: *@This(), canBecomeVisibleWithoutLogin: objc.BOOL) void {
        return objc.msgSend(self, "setCanBecomeVisibleWithoutLogin:", void, .{canBecomeVisibleWithoutLogin});
    }

    pub fn collectionBehavior(self: *@This()) WindowCollectionBehavior {
        return objc.msgSend(self, "collectionBehavior", WindowCollectionBehavior, .{});
    }

    pub fn setCollectionBehavior(self: *@This(), collectionBehavior: WindowCollectionBehavior) void {
        return objc.msgSend(self, "setCollectionBehavior:", void, .{collectionBehavior});
    }

    pub fn animationBehavior(self: *@This()) WindowAnimationBehavior {
        return objc.msgSend(self, "animationBehavior", WindowAnimationBehavior, .{});
    }

    pub fn setAnimationBehavior(self: *@This(), animationBehavior: WindowAnimationBehavior) void {
        return objc.msgSend(self, "setAnimationBehavior:", void, .{animationBehavior});
    }

    pub fn isOnActiveSpace(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isOnActiveSpace", objc.BOOL, .{});
    }

    pub fn stringWithSavedFrame(self: *@This()) WindowPersistableFrameDescriptor {
        return objc.msgSend(self, "stringWithSavedFrame", WindowPersistableFrameDescriptor, .{});
    }

    pub fn frameAutosaveName(self: *@This()) WindowFrameAutosaveName {
        return objc.msgSend(self, "frameAutosaveName", WindowFrameAutosaveName, .{});
    }

    pub fn minSize(self: *@This()) foundation.Size {
        return objc.msgSend(self, "minSize", foundation.Size, .{});
    }

    pub fn setMinSize(self: *@This(), minSize: foundation.Size) void {
        return objc.msgSend(self, "setMinSize:", void, .{minSize});
    }

    pub fn maxSize(self: *@This()) foundation.Size {
        return objc.msgSend(self, "maxSize", foundation.Size, .{});
    }

    pub fn setMaxSize(self: *@This(), maxSize: foundation.Size) void {
        return objc.msgSend(self, "setMaxSize:", void, .{maxSize});
    }

    pub fn contentMinSize(self: *@This()) foundation.Size {
        return objc.msgSend(self, "contentMinSize", foundation.Size, .{});
    }

    pub fn setContentMinSize(self: *@This(), contentMinSize: foundation.Size) void {
        return objc.msgSend(self, "setContentMinSize:", void, .{contentMinSize});
    }

    pub fn contentMaxSize(self: *@This()) foundation.Size {
        return objc.msgSend(self, "contentMaxSize", foundation.Size, .{});
    }

    pub fn setContentMaxSize(self: *@This(), contentMaxSize: foundation.Size) void {
        return objc.msgSend(self, "setContentMaxSize:", void, .{contentMaxSize});
    }

    pub fn minFullScreenContentSize(self: *@This()) foundation.Size {
        return objc.msgSend(self, "minFullScreenContentSize", foundation.Size, .{});
    }

    pub fn setMinFullScreenContentSize(self: *@This(), minFullScreenContentSize: foundation.Size) void {
        return objc.msgSend(self, "setMinFullScreenContentSize:", void, .{minFullScreenContentSize});
    }

    pub fn maxFullScreenContentSize(self: *@This()) foundation.Size {
        return objc.msgSend(self, "maxFullScreenContentSize", foundation.Size, .{});
    }

    pub fn setMaxFullScreenContentSize(self: *@This(), maxFullScreenContentSize: foundation.Size) void {
        return objc.msgSend(self, "setMaxFullScreenContentSize:", void, .{maxFullScreenContentSize});
    }

    pub fn deviceDescription(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "deviceDescription", ?*anyopaque, .{});
    }

    pub fn windowController(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "windowController", ?*anyopaque, .{});
    }

    pub fn setWindowController(self: *@This(), windowController: ?*anyopaque) void {
        return objc.msgSend(self, "setWindowController:", void, .{windowController});
    }

    pub fn sheets(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "sheets", ?*anyopaque, .{});
    }

    pub fn attachedSheet(self: *@This()) ?*Window {
        return objc.msgSend(self, "attachedSheet", ?*Window, .{});
    }

    pub fn isSheet(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isSheet", objc.BOOL, .{});
    }

    pub fn sheetParent(self: *@This()) ?*Window {
        return objc.msgSend(self, "sheetParent", ?*Window, .{});
    }

    pub fn childWindows(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "childWindows", ?*anyopaque, .{});
    }

    pub fn parentWindow(self: *@This()) ?*Window {
        return objc.msgSend(self, "parentWindow", ?*Window, .{});
    }

    pub fn setParentWindow(self: *@This(), parentWindow: ?*Window) void {
        return objc.msgSend(self, "setParentWindow:", void, .{parentWindow});
    }

    pub fn appearanceSource(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "appearanceSource", ?*anyopaque, .{});
    }

    pub fn setAppearanceSource(self: *@This(), appearanceSource: ?*anyopaque) void {
        return objc.msgSend(self, "setAppearanceSource:", void, .{appearanceSource});
    }

    pub fn colorSpace(self: *@This()) ?*ColorSpace {
        return objc.msgSend(self, "colorSpace", ?*ColorSpace, .{});
    }

    pub fn setColorSpace(self: *@This(), colorSpace: ?*ColorSpace) void {
        return objc.msgSend(self, "setColorSpace:", void, .{colorSpace});
    }

    pub fn occlusionState(self: *@This()) WindowOcclusionState {
        return objc.msgSend(self, "occlusionState", WindowOcclusionState, .{});
    }

    pub fn titlebarSeparatorStyle(self: *@This()) TitlebarSeparatorStyle {
        return objc.msgSend(self, "titlebarSeparatorStyle", TitlebarSeparatorStyle, .{});
    }

    pub fn setTitlebarSeparatorStyle(self: *@This(), titlebarSeparatorStyle: TitlebarSeparatorStyle) void {
        return objc.msgSend(self, "setTitlebarSeparatorStyle:", void, .{titlebarSeparatorStyle});
    }

    pub fn contentViewController(self: *@This()) ?*ViewController {
        return objc.msgSend(self, "contentViewController", ?*ViewController, .{});
    }

    pub fn setContentViewController(self: *@This(), contentViewController: ?*ViewController) void {
        return objc.msgSend(self, "setContentViewController:", void, .{contentViewController});
    }

    pub fn initialFirstResponder(self: *@This()) ?*View {
        return objc.msgSend(self, "initialFirstResponder", ?*View, .{});
    }

    pub fn setInitialFirstResponder(self: *@This(), initialFirstResponder: ?*View) void {
        return objc.msgSend(self, "setInitialFirstResponder:", void, .{initialFirstResponder});
    }

    pub fn keyViewSelectionDirection(self: *@This()) SelectionDirection {
        return objc.msgSend(self, "keyViewSelectionDirection", SelectionDirection, .{});
    }

    pub fn defaultButtonCell(self: *@This()) ?*ButtonCell {
        return objc.msgSend(self, "defaultButtonCell", ?*ButtonCell, .{});
    }

    pub fn setDefaultButtonCell(self: *@This(), defaultButtonCell: ?*ButtonCell) void {
        return objc.msgSend(self, "setDefaultButtonCell:", void, .{defaultButtonCell});
    }

    pub fn autorecalculatesKeyViewLoop(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "autorecalculatesKeyViewLoop", objc.BOOL, .{});
    }

    pub fn setAutorecalculatesKeyViewLoop(self: *@This(), autorecalculatesKeyViewLoop: objc.BOOL) void {
        return objc.msgSend(self, "setAutorecalculatesKeyViewLoop:", void, .{autorecalculatesKeyViewLoop});
    }

    pub fn toolbar(self: *@This()) ?*Toolbar {
        return objc.msgSend(self, "toolbar", ?*Toolbar, .{});
    }

    pub fn setToolbar(self: *@This(), toolbar: ?*Toolbar) void {
        return objc.msgSend(self, "setToolbar:", void, .{toolbar});
    }

    pub fn showsToolbarButton(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "showsToolbarButton", objc.BOOL, .{});
    }

    pub fn setShowsToolbarButton(self: *@This(), showsToolbarButton: objc.BOOL) void {
        return objc.msgSend(self, "setShowsToolbarButton:", void, .{showsToolbarButton});
    }

    pub fn allowsAutomaticWindowTabbing(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "allowsAutomaticWindowTabbing", objc.BOOL, .{});
    }

    pub fn setAllowsAutomaticWindowTabbing(self: *@This(), allowsAutomaticWindowTabbing: objc.BOOL) void {
        return objc.msgSend(self, "setAllowsAutomaticWindowTabbing:", void, .{allowsAutomaticWindowTabbing});
    }

    pub fn userTabbingPreference(self: *@This()) WindowUserTabbingPreference {
        return objc.msgSend(self, "userTabbingPreference", WindowUserTabbingPreference, .{});
    }

    pub fn tabbingMode(self: *@This()) WindowTabbingMode {
        return objc.msgSend(self, "tabbingMode", WindowTabbingMode, .{});
    }

    pub fn setTabbingMode(self: *@This(), tabbingMode: WindowTabbingMode) void {
        return objc.msgSend(self, "setTabbingMode:", void, .{tabbingMode});
    }

    pub fn tabbingIdentifier(self: *@This()) WindowTabbingIdentifier {
        return objc.msgSend(self, "tabbingIdentifier", WindowTabbingIdentifier, .{});
    }

    pub fn setTabbingIdentifier(self: *@This(), tabbingIdentifier: WindowTabbingIdentifier) void {
        return objc.msgSend(self, "setTabbingIdentifier:", void, .{tabbingIdentifier});
    }

    pub fn tabbedWindows(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "tabbedWindows", ?*anyopaque, .{});
    }

    pub fn tab(self: *@This()) ?*WindowTab {
        return objc.msgSend(self, "tab", ?*WindowTab, .{});
    }

    pub fn tabGroup(self: *@This()) ?*WindowTabGroup {
        return objc.msgSend(self, "tabGroup", ?*WindowTabGroup, .{});
    }

    pub fn hasActiveWindowSharingSession(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "hasActiveWindowSharingSession", objc.BOOL, .{});
    }

    pub fn windowTitlebarLayoutDirection(self: *@This()) UserInterfaceLayoutDirection {
        return objc.msgSend(self, "windowTitlebarLayoutDirection", UserInterfaceLayoutDirection, .{});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSWindowDelegate?language=objc
pub const WindowDelegate = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{objc.NSObject, });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn windowShouldClose(self: *@This(), sender: ?*Window) objc.BOOL {
        return objc.msgSend(self, "windowShouldClose:", objc.BOOL, .{sender});
    }

    pub fn windowWillReturnFieldEditorToObject(self: *@This(), sender: ?*Window, client: *objc.Id) *objc.Id {
        return objc.msgSend(self, "windowWillReturnFieldEditor:toObject:", *objc.Id, .{sender, client});
    }

    pub fn windowWillResizeToSize(self: *@This(), sender: ?*Window, frameSize: foundation.Size) foundation.Size {
        return objc.msgSend(self, "windowWillResize:toSize:", foundation.Size, .{sender, frameSize});
    }

    pub fn windowWillUseStandardFrameDefaultFrame(self: *@This(), window: ?*Window, newFrame: foundation.Rect) foundation.Rect {
        return objc.msgSend(self, "windowWillUseStandardFrame:defaultFrame:", foundation.Rect, .{window, newFrame});
    }

    pub fn windowShouldZoomToFrame(self: *@This(), window: ?*Window, newFrame: foundation.Rect) objc.BOOL {
        return objc.msgSend(self, "windowShouldZoom:toFrame:", objc.BOOL, .{window, newFrame});
    }

    pub fn windowWillReturnUndoManager(self: *@This(), window: ?*Window) ?*UndoManager {
        return objc.msgSend(self, "windowWillReturnUndoManager:", ?*UndoManager, .{window});
    }

    pub fn windowWillPositionSheetUsingRect(self: *@This(), window: ?*Window, sheet: ?*Window, rect: foundation.Rect) foundation.Rect {
        return objc.msgSend(self, "window:willPositionSheet:usingRect:", foundation.Rect, .{window, sheet, rect});
    }

    pub fn windowShouldPopUpDocumentPathMenu(self: *@This(), window: ?*Window, menu: ?*Menu) objc.BOOL {
        return objc.msgSend(self, "window:shouldPopUpDocumentPathMenu:", objc.BOOL, .{window, menu});
    }

    pub fn windowShouldDragDocumentWithEventFromWithPasteboard(self: *@This(), window: ?*Window, event: ?*Event, dragImageLocation: foundation.Point, pasteboard: ?*Pasteboard, ) objc.BOOL {
        return objc.msgSend(self, "window:shouldDragDocumentWithEvent:from:withPasteboard:", objc.BOOL, .{window, event, dragImageLocation, pasteboard, });
    }

    pub fn windowWillUseFullScreenContentSize(self: *@This(), window: ?*Window, proposedSize: foundation.Size) foundation.Size {
        return objc.msgSend(self, "window:willUseFullScreenContentSize:", foundation.Size, .{window, proposedSize});
    }

    pub fn windowWillUseFullScreenPresentationOptions(self: *@This(), window: ?*Window, proposedOptions: ApplicationPresentationOptions) ApplicationPresentationOptions {
        return objc.msgSend(self, "window:willUseFullScreenPresentationOptions:", ApplicationPresentationOptions, .{window, proposedOptions});
    }

    pub fn customWindowsToEnterFullScreenForWindow(self: *@This(), window: ?*Window) ?*anyopaque {
        return objc.msgSend(self, "customWindowsToEnterFullScreenForWindow:", ?*anyopaque, .{window});
    }

    pub fn windowStartCustomAnimationToEnterFullScreenWithDuration(self: *@This(), window: ?*Window, duration: foundation.TimeInterval) void {
        return objc.msgSend(self, "window:startCustomAnimationToEnterFullScreenWithDuration:", void, .{window, duration});
    }

    pub fn windowDidFailToEnterFullScreen(self: *@This(), window: ?*Window) void {
        return objc.msgSend(self, "windowDidFailToEnterFullScreen:", void, .{window});
    }

    pub fn customWindowsToExitFullScreenForWindow(self: *@This(), window: ?*Window) ?*anyopaque {
        return objc.msgSend(self, "customWindowsToExitFullScreenForWindow:", ?*anyopaque, .{window});
    }

    pub fn windowStartCustomAnimationToExitFullScreenWithDuration(self: *@This(), window: ?*Window, duration: foundation.TimeInterval) void {
        return objc.msgSend(self, "window:startCustomAnimationToExitFullScreenWithDuration:", void, .{window, duration});
    }

    pub fn customWindowsToEnterFullScreenForWindowOnScreen(self: *@This(), window: ?*Window, screen: ?*Screen) ?*anyopaque {
        return objc.msgSend(self, "customWindowsToEnterFullScreenForWindow:onScreen:", ?*anyopaque, .{window, screen});
    }

    pub fn windowStartCustomAnimationToEnterFullScreenOnScreenWithDuration(self: *@This(), window: ?*Window, screen: ?*Screen, duration: foundation.TimeInterval) void {
        return objc.msgSend(self, "window:startCustomAnimationToEnterFullScreenOnScreen:withDuration:", void, .{window, screen, duration});
    }

    pub fn windowDidFailToExitFullScreen(self: *@This(), window: ?*Window) void {
        return objc.msgSend(self, "windowDidFailToExitFullScreen:", void, .{window});
    }

    pub fn windowWillResizeForVersionBrowserWithMaxPreferredSizeMaxAllowedSize(self: *@This(), window: ?*Window, maxPreferredFrameSize: foundation.Size, maxAllowedFrameSize: foundation.Size) foundation.Size {
        return objc.msgSend(self, "window:willResizeForVersionBrowserWithMaxPreferredSize:maxAllowedSize:", foundation.Size, .{window, maxPreferredFrameSize, maxAllowedFrameSize});
    }

    pub fn windowWillEncodeRestorableState(self: *@This(), window: ?*Window, state: ?*foundation.Coder) void {
        return objc.msgSend(self, "window:willEncodeRestorableState:", void, .{window, state});
    }

    pub fn windowDidDecodeRestorableState(self: *@This(), window: ?*Window, state: ?*foundation.Coder) void {
        return objc.msgSend(self, "window:didDecodeRestorableState:", void, .{window, state});
    }

    pub fn previewRepresentableActivityItemsForWindow(self: *@This(), window: ?*Window) ?*anyopaque {
        return objc.msgSend(self, "previewRepresentableActivityItemsForWindow:", ?*anyopaque, .{window});
    }

    pub fn windowForSharingRequestFromWindow(self: *@This(), window: ?*Window) ?*Window {
        return objc.msgSend(self, "windowForSharingRequestFromWindow:", ?*Window, .{window});
    }

    pub fn windowDidResize(self: *@This(), notification: ?*Notification) void {
        return objc.msgSend(self, "windowDidResize:", void, .{notification});
    }

    pub fn windowDidExpose(self: *@This(), notification: ?*Notification) void {
        return objc.msgSend(self, "windowDidExpose:", void, .{notification});
    }

    pub fn windowWillMove(self: *@This(), notification: ?*Notification) void {
        return objc.msgSend(self, "windowWillMove:", void, .{notification});
    }

    pub fn windowDidMove(self: *@This(), notification: ?*Notification) void {
        return objc.msgSend(self, "windowDidMove:", void, .{notification});
    }

    pub fn windowDidBecomeKey(self: *@This(), notification: ?*Notification) void {
        return objc.msgSend(self, "windowDidBecomeKey:", void, .{notification});
    }

    pub fn windowDidResignKey(self: *@This(), notification: ?*Notification) void {
        return objc.msgSend(self, "windowDidResignKey:", void, .{notification});
    }

    pub fn windowDidBecomeMain(self: *@This(), notification: ?*Notification) void {
        return objc.msgSend(self, "windowDidBecomeMain:", void, .{notification});
    }

    pub fn windowDidResignMain(self: *@This(), notification: ?*Notification) void {
        return objc.msgSend(self, "windowDidResignMain:", void, .{notification});
    }

    pub fn windowWillClose(self: *@This(), notification: ?*Notification) void {
        return objc.msgSend(self, "windowWillClose:", void, .{notification});
    }

    pub fn windowWillMiniaturize(self: *@This(), notification: ?*Notification) void {
        return objc.msgSend(self, "windowWillMiniaturize:", void, .{notification});
    }

    pub fn windowDidMiniaturize(self: *@This(), notification: ?*Notification) void {
        return objc.msgSend(self, "windowDidMiniaturize:", void, .{notification});
    }

    pub fn windowDidDeminiaturize(self: *@This(), notification: ?*Notification) void {
        return objc.msgSend(self, "windowDidDeminiaturize:", void, .{notification});
    }

    pub fn windowDidUpdate(self: *@This(), notification: ?*Notification) void {
        return objc.msgSend(self, "windowDidUpdate:", void, .{notification});
    }

    pub fn windowDidChangeScreen(self: *@This(), notification: ?*Notification) void {
        return objc.msgSend(self, "windowDidChangeScreen:", void, .{notification});
    }

    pub fn windowDidChangeScreenProfile(self: *@This(), notification: ?*Notification) void {
        return objc.msgSend(self, "windowDidChangeScreenProfile:", void, .{notification});
    }

    pub fn windowDidChangeBackingProperties(self: *@This(), notification: ?*Notification) void {
        return objc.msgSend(self, "windowDidChangeBackingProperties:", void, .{notification});
    }

    pub fn windowWillBeginSheet(self: *@This(), notification: ?*Notification) void {
        return objc.msgSend(self, "windowWillBeginSheet:", void, .{notification});
    }

    pub fn windowDidEndSheet(self: *@This(), notification: ?*Notification) void {
        return objc.msgSend(self, "windowDidEndSheet:", void, .{notification});
    }

    pub fn windowWillStartLiveResize(self: *@This(), notification: ?*Notification) void {
        return objc.msgSend(self, "windowWillStartLiveResize:", void, .{notification});
    }

    pub fn windowDidEndLiveResize(self: *@This(), notification: ?*Notification) void {
        return objc.msgSend(self, "windowDidEndLiveResize:", void, .{notification});
    }

    pub fn windowWillEnterFullScreen(self: *@This(), notification: ?*Notification) void {
        return objc.msgSend(self, "windowWillEnterFullScreen:", void, .{notification});
    }

    pub fn windowDidEnterFullScreen(self: *@This(), notification: ?*Notification) void {
        return objc.msgSend(self, "windowDidEnterFullScreen:", void, .{notification});
    }

    pub fn windowWillExitFullScreen(self: *@This(), notification: ?*Notification) void {
        return objc.msgSend(self, "windowWillExitFullScreen:", void, .{notification});
    }

    pub fn windowDidExitFullScreen(self: *@This(), notification: ?*Notification) void {
        return objc.msgSend(self, "windowDidExitFullScreen:", void, .{notification});
    }

    pub fn windowWillEnterVersionBrowser(self: *@This(), notification: ?*Notification) void {
        return objc.msgSend(self, "windowWillEnterVersionBrowser:", void, .{notification});
    }

    pub fn windowDidEnterVersionBrowser(self: *@This(), notification: ?*Notification) void {
        return objc.msgSend(self, "windowDidEnterVersionBrowser:", void, .{notification});
    }

    pub fn windowWillExitVersionBrowser(self: *@This(), notification: ?*Notification) void {
        return objc.msgSend(self, "windowWillExitVersionBrowser:", void, .{notification});
    }

    pub fn windowDidExitVersionBrowser(self: *@This(), notification: ?*Notification) void {
        return objc.msgSend(self, "windowDidExitVersionBrowser:", void, .{notification});
    }

    pub fn windowDidChangeOcclusionState(self: *@This(), notification: ?*Notification) void {
        return objc.msgSend(self, "windowDidChangeOcclusionState:", void, .{notification});
    }

};

pub const WindowBackingLocation = enum(objc.NSUInteger) {
    Default = 0,
    VideoMemory = 1,
    MainMemory = 2,
};

/// https://developer.apple.com/documentation/AppKit/NSPanel?language=objc
pub const Panel = opaque {
    pub const InternalInfo = objc.ExternalClass("NSPanel", @This(), Window, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn isFloatingPanel(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isFloatingPanel", objc.BOOL, .{});
    }

    pub fn setFloatingPanel(self: *@This(), floatingPanel: objc.BOOL) void {
        return objc.msgSend(self, "setFloatingPanel:", void, .{floatingPanel});
    }

    pub fn becomesKeyOnlyIfNeeded(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "becomesKeyOnlyIfNeeded", objc.BOOL, .{});
    }

    pub fn setBecomesKeyOnlyIfNeeded(self: *@This(), becomesKeyOnlyIfNeeded: objc.BOOL) void {
        return objc.msgSend(self, "setBecomesKeyOnlyIfNeeded:", void, .{becomesKeyOnlyIfNeeded});
    }

    pub fn worksWhenModal(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "worksWhenModal", objc.BOOL, .{});
    }

    pub fn setWorksWhenModal(self: *@This(), worksWhenModal: objc.BOOL) void {
        return objc.msgSend(self, "setWorksWhenModal:", void, .{worksWhenModal});
    }

};

pub extern "AppKit" fn RunAlertPanelRelativeToWindow(title: ?*String, msgFormat: ?*String, defaultButton: ?*String, alternateButton: ?*String, otherButton: ?*String, docWindow: ?*Window, ) callconv(.C) objc.NSInteger;

pub extern "AppKit" fn RunInformationalAlertPanelRelativeToWindow(title: ?*String, msgFormat: ?*String, defaultButton: ?*String, alternateButton: ?*String, otherButton: ?*String, docWindow: ?*Window, ) callconv(.C) objc.NSInteger;

pub extern "AppKit" fn RunCriticalAlertPanelRelativeToWindow(title: ?*String, msgFormat: ?*String, defaultButton: ?*String, alternateButton: ?*String, otherButton: ?*String, docWindow: ?*Window, ) callconv(.C) objc.NSInteger;

pub extern "AppKit" fn RunAlertPanel(title: ?*String, msgFormat: ?*String, defaultButton: ?*String, alternateButton: ?*String, otherButton: ?*String, ) callconv(.C) objc.NSInteger;

pub extern "AppKit" fn RunInformationalAlertPanel(title: ?*String, msgFormat: ?*String, defaultButton: ?*String, alternateButton: ?*String, otherButton: ?*String, ) callconv(.C) objc.NSInteger;

pub extern "AppKit" fn RunCriticalAlertPanel(title: ?*String, msgFormat: ?*String, defaultButton: ?*String, alternateButton: ?*String, otherButton: ?*String, ) callconv(.C) objc.NSInteger;

pub extern "AppKit" fn BeginAlertSheet(title: ?*String, defaultButton: ?*String, alternateButton: ?*String, otherButton: ?*String, docWindow: ?*Window, modalDelegate: *objc.Id, didEndSelector: *objc.SEL, didDismissSelector: *objc.SEL, contextInfo: ?*anyopaque, msgFormat: ?*String, ) callconv(.C) void;

pub extern "AppKit" fn BeginInformationalAlertSheet(title: ?*String, defaultButton: ?*String, alternateButton: ?*String, otherButton: ?*String, docWindow: ?*Window, modalDelegate: *objc.Id, didEndSelector: *objc.SEL, didDismissSelector: *objc.SEL, contextInfo: ?*anyopaque, msgFormat: ?*String, ) callconv(.C) void;

pub extern "AppKit" fn BeginCriticalAlertSheet(title: ?*String, defaultButton: ?*String, alternateButton: ?*String, otherButton: ?*String, docWindow: ?*Window, modalDelegate: *objc.Id, didEndSelector: *objc.SEL, didDismissSelector: *objc.SEL, contextInfo: ?*anyopaque, msgFormat: ?*String, ) callconv(.C) void;

pub extern "AppKit" fn GetAlertPanel(title: ?*String, msgFormat: ?*String, defaultButton: ?*String, alternateButton: ?*String, otherButton: ?*String, ) callconv(.C) *objc.Id;

pub extern "AppKit" fn GetInformationalAlertPanel(title: ?*String, msgFormat: ?*String, defaultButton: ?*String, alternateButton: ?*String, otherButton: ?*String, ) callconv(.C) *objc.Id;

pub extern "AppKit" fn GetCriticalAlertPanel(title: ?*String, msgFormat: ?*String, defaultButton: ?*String, alternateButton: ?*String, otherButton: ?*String, ) callconv(.C) *objc.Id;

pub extern "AppKit" fn ReleaseAlertPanel(panel: *objc.Id) callconv(.C) void;

pub const FontPanelModeMask = enum(objc.NSUInteger) {
    Face = 1,
    Size = 2,
    Collection = 4,
    UnderlineEffect = 256,
    StrikethroughEffect = 512,
    TextColorEffect = 1024,
    DocumentColorEffect = 2048,
    ShadowEffect = 4096,
    AllEffects = 1048320,
    ModesMaskStandardModes = 65535,
    ModesMaskAllModes = 4294967295,
};

/// https://developer.apple.com/documentation/AppKit/NSFontChanging?language=objc
pub const FontChanging = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{objc.NSObject, });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn changeFont(self: *@This(), sender: ?*FontManager) void {
        return objc.msgSend(self, "changeFont:", void, .{sender});
    }

    pub fn validModesForFontPanel(self: *@This(), fontPanel: ?*FontPanel) FontPanelModeMask {
        return objc.msgSend(self, "validModesForFontPanel:", FontPanelModeMask, .{fontPanel});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSFontPanel?language=objc
pub const FontPanel = opaque {
    pub const InternalInfo = objc.ExternalClass("NSFontPanel", @This(), Panel, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn setPanelFontIsMultiple(self: *@This(), fontObj: ?*Font, flag: objc.BOOL) void {
        return objc.msgSend(self, "setPanelFont:isMultiple:", void, .{fontObj, flag});
    }

    pub fn panelConvertFont(self: *@This(), fontObj: ?*Font) ?*Font {
        return objc.msgSend(self, "panelConvertFont:", ?*Font, .{fontObj});
    }

    pub fn reloadDefaultFontFamilies(self: *@This()) void {
        return objc.msgSend(self, "reloadDefaultFontFamilies", void, .{});
    }

    pub fn sharedFontPanel(self: *@This()) ?*FontPanel {
        return objc.msgSend(self, "sharedFontPanel", ?*FontPanel, .{});
    }

    pub fn sharedFontPanelExists(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "sharedFontPanelExists", objc.BOOL, .{});
    }

    pub fn accessoryView(self: *@This()) ?*View {
        return objc.msgSend(self, "accessoryView", ?*View, .{});
    }

    pub fn setAccessoryView(self: *@This(), accessoryView: ?*View) void {
        return objc.msgSend(self, "setAccessoryView:", void, .{accessoryView});
    }

    pub fn worksWhenModal(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "worksWhenModal", objc.BOOL, .{});
    }

    pub fn setWorksWhenModal(self: *@This(), worksWhenModal: objc.BOOL) void {
        return objc.msgSend(self, "setWorksWhenModal:", void, .{worksWhenModal});
    }

    pub fn isEnabled(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isEnabled", objc.BOOL, .{});
    }

    pub fn setEnabled(self: *@This(), enabled: objc.BOOL) void {
        return objc.msgSend(self, "setEnabled:", void, .{enabled});
    }

};

pub const MatrixMode = enum(objc.NSUInteger) {
    RadioModeMatrix = 0,
    HighlightModeMatrix = 1,
    ListModeMatrix = 2,
    TrackModeMatrix = 3,
};

/// https://developer.apple.com/documentation/AppKit/NSMatrix?language=objc
pub const Matrix = opaque {
    pub const InternalInfo = objc.ExternalClass("NSMatrix", @This(), Control, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn initWithFrame(self: *@This(), frameRect: foundation.Rect) *@This() {
        return objc.msgSend(self, "initWithFrame:", *@This(), .{frameRect});
    }

    pub fn initWithFrameModePrototypeNumberOfRowsNumberOfColumns(self: *@This(), frameRect: foundation.Rect, mode: MatrixMode, cell: ?*Cell, rowsHigh: objc.NSInteger, colsWide: objc.NSInteger, ) *@This() {
        return objc.msgSend(self, "initWithFrame:mode:prototype:numberOfRows:numberOfColumns:", *@This(), .{frameRect, mode, cell, rowsHigh, colsWide, });
    }

    pub fn initWithFrameModeCellClassNumberOfRowsNumberOfColumns(self: *@This(), frameRect: foundation.Rect, mode: MatrixMode, factoryId: *objc.Class, rowsHigh: objc.NSInteger, colsWide: objc.NSInteger, ) *@This() {
        return objc.msgSend(self, "initWithFrame:mode:cellClass:numberOfRows:numberOfColumns:", *@This(), .{frameRect, mode, factoryId, rowsHigh, colsWide, });
    }

    pub fn makeCellAtRowColumn(self: *@This(), row: objc.NSInteger, col: objc.NSInteger) ?*Cell {
        return objc.msgSend(self, "makeCellAtRow:column:", ?*Cell, .{row, col});
    }

    pub fn sendActionToForAllCells(self: *@This(), selector: *objc.SEL, object: *objc.Id, flag: objc.BOOL) void {
        return objc.msgSend(self, "sendAction:to:forAllCells:", void, .{selector, object, flag});
    }

    pub fn sortUsingSelector(self: *@This(), comparator: *objc.SEL) void {
        return objc.msgSend(self, "sortUsingSelector:", void, .{comparator});
    }

    pub fn sortUsingFunctionContext(self: *@This(), compare: ?*const fn(*objc.Id, *objc.Id, ?*anyopaque) callconv(.C) objc.NSInteger, context: ?*anyopaque) void {
        return objc.msgSend(self, "sortUsingFunction:context:", void, .{compare, context});
    }

    pub fn setSelectionFromToAnchorHighlight(self: *@This(), startPos: objc.NSInteger, endPos: objc.NSInteger, anchorPos: objc.NSInteger, lit: objc.BOOL, ) void {
        return objc.msgSend(self, "setSelectionFrom:to:anchor:highlight:", void, .{startPos, endPos, anchorPos, lit, });
    }

    pub fn deselectSelectedCell(self: *@This()) void {
        return objc.msgSend(self, "deselectSelectedCell", void, .{});
    }

    pub fn deselectAllCells(self: *@This()) void {
        return objc.msgSend(self, "deselectAllCells", void, .{});
    }

    pub fn selectCellAtRowColumn(self: *@This(), row: objc.NSInteger, col: objc.NSInteger) void {
        return objc.msgSend(self, "selectCellAtRow:column:", void, .{row, col});
    }

    pub fn selectAll(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "selectAll:", void, .{sender});
    }

    pub fn selectCellWithTag(self: *@This(), tag: objc.NSInteger) objc.BOOL {
        return objc.msgSend(self, "selectCellWithTag:", objc.BOOL, .{tag});
    }

    pub fn setScrollable(self: *@This(), flag: objc.BOOL) void {
        return objc.msgSend(self, "setScrollable:", void, .{flag});
    }

    pub fn setStateAtRowColumn(self: *@This(), value: objc.NSInteger, row: objc.NSInteger, col: objc.NSInteger) void {
        return objc.msgSend(self, "setState:atRow:column:", void, .{value, row, col});
    }

    pub fn getNumberOfRowsColumns(self: *@This(), rowCount: ?*objc.NSInteger, colCount: ?*objc.NSInteger) void {
        return objc.msgSend(self, "getNumberOfRows:columns:", void, .{rowCount, colCount});
    }

    pub fn cellAtRowColumn(self: *@This(), row: objc.NSInteger, col: objc.NSInteger) ?*anyopaque {
        return objc.msgSend(self, "cellAtRow:column:", ?*anyopaque, .{row, col});
    }

    pub fn cellFrameAtRowColumn(self: *@This(), row: objc.NSInteger, col: objc.NSInteger) foundation.Rect {
        return objc.msgSend(self, "cellFrameAtRow:column:", foundation.Rect, .{row, col});
    }

    pub fn getRowColumnOfCell(self: *@This(), row: ?*objc.NSInteger, col: ?*objc.NSInteger, cell: ?*Cell) objc.BOOL {
        return objc.msgSend(self, "getRow:column:ofCell:", objc.BOOL, .{row, col, cell});
    }

    pub fn getRowColumnForPoint(self: *@This(), row: ?*objc.NSInteger, col: ?*objc.NSInteger, point: foundation.Point) objc.BOOL {
        return objc.msgSend(self, "getRow:column:forPoint:", objc.BOOL, .{row, col, point});
    }

    pub fn renewRowsColumns(self: *@This(), newRows: objc.NSInteger, newCols: objc.NSInteger) void {
        return objc.msgSend(self, "renewRows:columns:", void, .{newRows, newCols});
    }

    pub fn putCellAtRowColumn(self: *@This(), newCell: ?*Cell, row: objc.NSInteger, col: objc.NSInteger) void {
        return objc.msgSend(self, "putCell:atRow:column:", void, .{newCell, row, col});
    }

    pub fn addRow(self: *@This()) void {
        return objc.msgSend(self, "addRow", void, .{});
    }

    pub fn addRowWithCells(self: *@This(), newCells: ?*anyopaque) void {
        return objc.msgSend(self, "addRowWithCells:", void, .{newCells});
    }

    pub fn insertRow(self: *@This(), row: objc.NSInteger) void {
        return objc.msgSend(self, "insertRow:", void, .{row});
    }

    pub fn insertRowWithCells(self: *@This(), row: objc.NSInteger, newCells: ?*anyopaque) void {
        return objc.msgSend(self, "insertRow:withCells:", void, .{row, newCells});
    }

    pub fn removeRow(self: *@This(), row: objc.NSInteger) void {
        return objc.msgSend(self, "removeRow:", void, .{row});
    }

    pub fn addColumn(self: *@This()) void {
        return objc.msgSend(self, "addColumn", void, .{});
    }

    pub fn addColumnWithCells(self: *@This(), newCells: ?*anyopaque) void {
        return objc.msgSend(self, "addColumnWithCells:", void, .{newCells});
    }

    pub fn insertColumn(self: *@This(), column: objc.NSInteger) void {
        return objc.msgSend(self, "insertColumn:", void, .{column});
    }

    pub fn insertColumnWithCells(self: *@This(), column: objc.NSInteger, newCells: ?*anyopaque) void {
        return objc.msgSend(self, "insertColumn:withCells:", void, .{column, newCells});
    }

    pub fn removeColumn(self: *@This(), col: objc.NSInteger) void {
        return objc.msgSend(self, "removeColumn:", void, .{col});
    }

    pub fn cellWithTag(self: *@This(), tag: objc.NSInteger) ?*anyopaque {
        return objc.msgSend(self, "cellWithTag:", ?*anyopaque, .{tag});
    }

    pub fn sizeToCells(self: *@This()) void {
        return objc.msgSend(self, "sizeToCells", void, .{});
    }

    pub fn setValidateSize(self: *@This(), flag: objc.BOOL) void {
        return objc.msgSend(self, "setValidateSize:", void, .{flag});
    }

    pub fn drawCellAtRowColumn(self: *@This(), row: objc.NSInteger, col: objc.NSInteger) void {
        return objc.msgSend(self, "drawCellAtRow:column:", void, .{row, col});
    }

    pub fn highlightCellAtRowColumn(self: *@This(), flag: objc.BOOL, row: objc.NSInteger, col: objc.NSInteger) void {
        return objc.msgSend(self, "highlightCell:atRow:column:", void, .{flag, row, col});
    }

    pub fn scrollCellToVisibleAtRowColumn(self: *@This(), row: objc.NSInteger, col: objc.NSInteger) void {
        return objc.msgSend(self, "scrollCellToVisibleAtRow:column:", void, .{row, col});
    }

    pub fn mouseDown(self: *@This(), event: ?*Event) void {
        return objc.msgSend(self, "mouseDown:", void, .{event});
    }

    pub fn performKeyEquivalent(self: *@This(), event: ?*Event) objc.BOOL {
        return objc.msgSend(self, "performKeyEquivalent:", objc.BOOL, .{event});
    }

    pub fn sendAction(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "sendAction", objc.BOOL, .{});
    }

    pub fn sendDoubleAction(self: *@This()) void {
        return objc.msgSend(self, "sendDoubleAction", void, .{});
    }

    pub fn textShouldBeginEditing(self: *@This(), textObject: ?*Text) objc.BOOL {
        return objc.msgSend(self, "textShouldBeginEditing:", objc.BOOL, .{textObject});
    }

    pub fn textShouldEndEditing(self: *@This(), textObject: ?*Text) objc.BOOL {
        return objc.msgSend(self, "textShouldEndEditing:", objc.BOOL, .{textObject});
    }

    pub fn textDidBeginEditing(self: *@This(), notification: ?*Notification) void {
        return objc.msgSend(self, "textDidBeginEditing:", void, .{notification});
    }

    pub fn textDidEndEditing(self: *@This(), notification: ?*Notification) void {
        return objc.msgSend(self, "textDidEndEditing:", void, .{notification});
    }

    pub fn textDidChange(self: *@This(), notification: ?*Notification) void {
        return objc.msgSend(self, "textDidChange:", void, .{notification});
    }

    pub fn selectText(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "selectText:", void, .{sender});
    }

    pub fn selectTextAtRowColumn(self: *@This(), row: objc.NSInteger, col: objc.NSInteger) ?*anyopaque {
        return objc.msgSend(self, "selectTextAtRow:column:", ?*anyopaque, .{row, col});
    }

    pub fn acceptsFirstMouse(self: *@This(), event: ?*Event) objc.BOOL {
        return objc.msgSend(self, "acceptsFirstMouse:", objc.BOOL, .{event});
    }

    pub fn resetCursorRects(self: *@This()) void {
        return objc.msgSend(self, "resetCursorRects", void, .{});
    }

    pub fn setToolTipForCell(self: *@This(), toolTipString: ?*String, cell: ?*Cell) void {
        return objc.msgSend(self, "setToolTip:forCell:", void, .{toolTipString, cell});
    }

    pub fn toolTipForCell(self: *@This(), cell: ?*Cell) ?*String {
        return objc.msgSend(self, "toolTipForCell:", ?*String, .{cell});
    }

    pub fn cellClass(self: *@This()) *objc.Class {
        return objc.msgSend(self, "cellClass", *objc.Class, .{});
    }

    pub fn setCellClass(self: *@This(), cellClass: *objc.Class) void {
        return objc.msgSend(self, "setCellClass:", void, .{cellClass});
    }

    pub fn prototype(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "prototype", ?*anyopaque, .{});
    }

    pub fn setPrototype(self: *@This(), prototype: ?*anyopaque) void {
        return objc.msgSend(self, "setPrototype:", void, .{prototype});
    }

    pub fn mode(self: *@This()) MatrixMode {
        return objc.msgSend(self, "mode", MatrixMode, .{});
    }

    pub fn setMode(self: *@This(), mode: MatrixMode) void {
        return objc.msgSend(self, "setMode:", void, .{mode});
    }

    pub fn allowsEmptySelection(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "allowsEmptySelection", objc.BOOL, .{});
    }

    pub fn setAllowsEmptySelection(self: *@This(), allowsEmptySelection: objc.BOOL) void {
        return objc.msgSend(self, "setAllowsEmptySelection:", void, .{allowsEmptySelection});
    }

    pub fn cells(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "cells", ?*anyopaque, .{});
    }

    pub fn selectedCell(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "selectedCell", ?*anyopaque, .{});
    }

    pub fn selectedCells(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "selectedCells", ?*anyopaque, .{});
    }

    pub fn selectedRow(self: *@This()) objc.NSInteger {
        return objc.msgSend(self, "selectedRow", objc.NSInteger, .{});
    }

    pub fn selectedColumn(self: *@This()) objc.NSInteger {
        return objc.msgSend(self, "selectedColumn", objc.NSInteger, .{});
    }

    pub fn isSelectionByRect(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isSelectionByRect", objc.BOOL, .{});
    }

    pub fn setSelectionByRect(self: *@This(), selectionByRect: objc.BOOL) void {
        return objc.msgSend(self, "setSelectionByRect:", void, .{selectionByRect});
    }

    pub fn cellSize(self: *@This()) foundation.Size {
        return objc.msgSend(self, "cellSize", foundation.Size, .{});
    }

    pub fn setCellSize(self: *@This(), cellSize: foundation.Size) void {
        return objc.msgSend(self, "setCellSize:", void, .{cellSize});
    }

    pub fn intercellSpacing(self: *@This()) foundation.Size {
        return objc.msgSend(self, "intercellSpacing", foundation.Size, .{});
    }

    pub fn setIntercellSpacing(self: *@This(), intercellSpacing: foundation.Size) void {
        return objc.msgSend(self, "setIntercellSpacing:", void, .{intercellSpacing});
    }

    pub fn backgroundColor(self: *@This()) ?*Color {
        return objc.msgSend(self, "backgroundColor", ?*Color, .{});
    }

    pub fn setBackgroundColor(self: *@This(), backgroundColor: ?*Color) void {
        return objc.msgSend(self, "setBackgroundColor:", void, .{backgroundColor});
    }

    pub fn cellBackgroundColor(self: *@This()) ?*Color {
        return objc.msgSend(self, "cellBackgroundColor", ?*Color, .{});
    }

    pub fn setCellBackgroundColor(self: *@This(), cellBackgroundColor: ?*Color) void {
        return objc.msgSend(self, "setCellBackgroundColor:", void, .{cellBackgroundColor});
    }

    pub fn drawsCellBackground(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "drawsCellBackground", objc.BOOL, .{});
    }

    pub fn setDrawsCellBackground(self: *@This(), drawsCellBackground: objc.BOOL) void {
        return objc.msgSend(self, "setDrawsCellBackground:", void, .{drawsCellBackground});
    }

    pub fn drawsBackground(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "drawsBackground", objc.BOOL, .{});
    }

    pub fn setDrawsBackground(self: *@This(), drawsBackground: objc.BOOL) void {
        return objc.msgSend(self, "setDrawsBackground:", void, .{drawsBackground});
    }

    pub fn numberOfRows(self: *@This()) objc.NSInteger {
        return objc.msgSend(self, "numberOfRows", objc.NSInteger, .{});
    }

    pub fn numberOfColumns(self: *@This()) objc.NSInteger {
        return objc.msgSend(self, "numberOfColumns", objc.NSInteger, .{});
    }

    pub fn doubleAction(self: *@This()) *objc.SEL {
        return objc.msgSend(self, "doubleAction", *objc.SEL, .{});
    }

    pub fn setDoubleAction(self: *@This(), doubleAction: *objc.SEL) void {
        return objc.msgSend(self, "setDoubleAction:", void, .{doubleAction});
    }

    pub fn autosizesCells(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "autosizesCells", objc.BOOL, .{});
    }

    pub fn setAutosizesCells(self: *@This(), autosizesCells: objc.BOOL) void {
        return objc.msgSend(self, "setAutosizesCells:", void, .{autosizesCells});
    }

    pub fn isAutoscroll(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isAutoscroll", objc.BOOL, .{});
    }

    pub fn setAutoscroll(self: *@This(), autoscroll: objc.BOOL) void {
        return objc.msgSend(self, "setAutoscroll:", void, .{autoscroll});
    }

    pub fn mouseDownFlags(self: *@This()) objc.NSInteger {
        return objc.msgSend(self, "mouseDownFlags", objc.NSInteger, .{});
    }

    pub fn delegate(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "delegate", ?*anyopaque, .{});
    }

    pub fn setDelegate(self: *@This(), delegate: ?*anyopaque) void {
        return objc.msgSend(self, "setDelegate:", void, .{delegate});
    }

    pub fn autorecalculatesCellSize(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "autorecalculatesCellSize", objc.BOOL, .{});
    }

    pub fn setAutorecalculatesCellSize(self: *@This(), autorecalculatesCellSize: objc.BOOL) void {
        return objc.msgSend(self, "setAutorecalculatesCellSize:", void, .{autorecalculatesCellSize});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSMatrixDelegate?language=objc
pub const MatrixDelegate = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{ControlTextEditingDelegate, });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
};

/// https://developer.apple.com/documentation/AppKit/NSForm?language=objc
pub const Form = opaque {
    pub const InternalInfo = objc.ExternalClass("NSForm", @This(), Matrix, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn indexOfSelectedItem(self: *@This()) objc.NSInteger {
        return objc.msgSend(self, "indexOfSelectedItem", objc.NSInteger, .{});
    }

    pub fn setEntryWidth(self: *@This(), width: core_foundation.CGFloat) void {
        return objc.msgSend(self, "setEntryWidth:", void, .{width});
    }

    pub fn setInterlineSpacing(self: *@This(), spacing: core_foundation.CGFloat) void {
        return objc.msgSend(self, "setInterlineSpacing:", void, .{spacing});
    }

    pub fn setBordered(self: *@This(), flag: objc.BOOL) void {
        return objc.msgSend(self, "setBordered:", void, .{flag});
    }

    pub fn setBezeled(self: *@This(), flag: objc.BOOL) void {
        return objc.msgSend(self, "setBezeled:", void, .{flag});
    }

    pub fn setTitleAlignment(self: *@This(), mode: TextAlignment) void {
        return objc.msgSend(self, "setTitleAlignment:", void, .{mode});
    }

    pub fn setTextAlignment(self: *@This(), mode: TextAlignment) void {
        return objc.msgSend(self, "setTextAlignment:", void, .{mode});
    }

    pub fn setTitleFont(self: *@This(), fontObj: ?*Font) void {
        return objc.msgSend(self, "setTitleFont:", void, .{fontObj});
    }

    pub fn setTextFont(self: *@This(), fontObj: ?*Font) void {
        return objc.msgSend(self, "setTextFont:", void, .{fontObj});
    }

    pub fn cellAtIndex(self: *@This(), index: objc.NSInteger) *objc.Id {
        return objc.msgSend(self, "cellAtIndex:", *objc.Id, .{index});
    }

    pub fn drawCellAtIndex(self: *@This(), index: objc.NSInteger) void {
        return objc.msgSend(self, "drawCellAtIndex:", void, .{index});
    }

    pub fn addEntry(self: *@This(), title: ?*String) ?*FormCell {
        return objc.msgSend(self, "addEntry:", ?*FormCell, .{title});
    }

    pub fn insertEntryAtIndex(self: *@This(), title: ?*String, index: objc.NSInteger) ?*FormCell {
        return objc.msgSend(self, "insertEntry:atIndex:", ?*FormCell, .{title, index});
    }

    pub fn removeEntryAtIndex(self: *@This(), index: objc.NSInteger) void {
        return objc.msgSend(self, "removeEntryAtIndex:", void, .{index});
    }

    pub fn indexOfCellWithTag(self: *@This(), tag: objc.NSInteger) objc.NSInteger {
        return objc.msgSend(self, "indexOfCellWithTag:", objc.NSInteger, .{tag});
    }

    pub fn selectTextAtIndex(self: *@This(), index: objc.NSInteger) void {
        return objc.msgSend(self, "selectTextAtIndex:", void, .{index});
    }

    pub fn setFrameSize(self: *@This(), newSize: foundation.Size) void {
        return objc.msgSend(self, "setFrameSize:", void, .{newSize});
    }

    pub fn setTitleBaseWritingDirection(self: *@This(), writingDirection: WritingDirection) void {
        return objc.msgSend(self, "setTitleBaseWritingDirection:", void, .{writingDirection});
    }

    pub fn setTextBaseWritingDirection(self: *@This(), writingDirection: WritingDirection) void {
        return objc.msgSend(self, "setTextBaseWritingDirection:", void, .{writingDirection});
    }

    pub fn setPreferredTextFieldWidth(self: *@This(), preferredWidth: core_foundation.CGFloat) void {
        return objc.msgSend(self, "setPreferredTextFieldWidth:", void, .{preferredWidth});
    }

    pub fn preferredTextFieldWidth(self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(self, "preferredTextFieldWidth", core_foundation.CGFloat, .{});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSFormCell?language=objc
pub const FormCell = opaque {
    pub const InternalInfo = objc.ExternalClass("NSFormCell", @This(), ActionCell, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn initTextCell(self: *@This(), string: ?*String) *@This() {
        return objc.msgSend(self, "initTextCell:", *@This(), .{string});
    }

    pub fn initWithCoder(self: *@This(), coder: ?*foundation.Coder) *@This() {
        return objc.msgSend(self, "initWithCoder:", *@This(), .{coder});
    }

    pub fn initImageCell(self: *@This(), image: ?*Image) *@This() {
        return objc.msgSend(self, "initImageCell:", *@This(), .{image});
    }

    pub fn titleWidth(self: *@This(), size: foundation.Size) core_foundation.CGFloat {
        return objc.msgSend(self, "titleWidth:", core_foundation.CGFloat, .{size});
    }

    pub fn titleWidth(self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(self, "titleWidth", core_foundation.CGFloat, .{});
    }

    pub fn setTitleWidth(self: *@This(), titleWidth: core_foundation.CGFloat) void {
        return objc.msgSend(self, "setTitleWidth:", void, .{titleWidth});
    }

    pub fn title(self: *@This()) ?*String {
        return objc.msgSend(self, "title", ?*String, .{});
    }

    pub fn setTitle(self: *@This(), title: ?*String) void {
        return objc.msgSend(self, "setTitle:", void, .{title});
    }

    pub fn titleFont(self: *@This()) ?*Font {
        return objc.msgSend(self, "titleFont", ?*Font, .{});
    }

    pub fn setTitleFont(self: *@This(), titleFont: ?*Font) void {
        return objc.msgSend(self, "setTitleFont:", void, .{titleFont});
    }

    pub fn isOpaque(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isOpaque", objc.BOOL, .{});
    }

    pub fn placeholderString(self: *@This()) ?*String {
        return objc.msgSend(self, "placeholderString", ?*String, .{});
    }

    pub fn setPlaceholderString(self: *@This(), placeholderString: ?*String) void {
        return objc.msgSend(self, "setPlaceholderString:", void, .{placeholderString});
    }

    pub fn placeholderAttributedString(self: *@This()) ?*AttributedString {
        return objc.msgSend(self, "placeholderAttributedString", ?*AttributedString, .{});
    }

    pub fn setPlaceholderAttributedString(self: *@This(), placeholderAttributedString: ?*AttributedString) void {
        return objc.msgSend(self, "setPlaceholderAttributedString:", void, .{placeholderAttributedString});
    }

    pub fn titleAlignment(self: *@This()) TextAlignment {
        return objc.msgSend(self, "titleAlignment", TextAlignment, .{});
    }

    pub fn setTitleAlignment(self: *@This(), titleAlignment: TextAlignment) void {
        return objc.msgSend(self, "setTitleAlignment:", void, .{titleAlignment});
    }

    pub fn titleBaseWritingDirection(self: *@This()) WritingDirection {
        return objc.msgSend(self, "titleBaseWritingDirection", WritingDirection, .{});
    }

    pub fn setTitleBaseWritingDirection(self: *@This(), titleBaseWritingDirection: WritingDirection) void {
        return objc.msgSend(self, "setTitleBaseWritingDirection:", void, .{titleBaseWritingDirection});
    }

    pub fn preferredTextFieldWidth(self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(self, "preferredTextFieldWidth", core_foundation.CGFloat, .{});
    }

    pub fn setPreferredTextFieldWidth(self: *@This(), preferredTextFieldWidth: core_foundation.CGFloat) void {
        return objc.msgSend(self, "setPreferredTextFieldWidth:", void, .{preferredTextFieldWidth});
    }

};

pub const MenuItemBadgeType = enum(objc.NSInteger) {
    None = 0,
    Updates = 1,
    NewItems = 2,
    Alerts = 3,
};

/// https://developer.apple.com/documentation/AppKit/NSMenuItemBadge?language=objc
pub const MenuItemBadge = opaque {
    pub const InternalInfo = objc.ExternalClass("NSMenuItemBadge", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn updatesWithCount(self: *@This(), itemCount: objc.NSInteger) *@This() {
        return objc.msgSend(self, "updatesWithCount:", *@This(), .{itemCount});
    }

    pub fn newItemsWithCount(self: *@This(), itemCount: objc.NSInteger) *@This() {
        return objc.msgSend(self, "newItemsWithCount:", *@This(), .{itemCount});
    }

    pub fn alertsWithCount(self: *@This(), itemCount: objc.NSInteger) *@This() {
        return objc.msgSend(self, "alertsWithCount:", *@This(), .{itemCount});
    }

    pub fn initWithCountType(self: *@This(), itemCount: objc.NSInteger, @"type": MenuItemBadgeType) *@This() {
        return objc.msgSend(self, "initWithCount:type:", *@This(), .{itemCount, @"type"});
    }

    pub fn initWithCount(self: *@This(), itemCount: objc.NSInteger) *@This() {
        return objc.msgSend(self, "initWithCount:", *@This(), .{itemCount});
    }

    pub fn initWithString(self: *@This(), string: ?*String) *@This() {
        return objc.msgSend(self, "initWithString:", *@This(), .{string});
    }

    pub fn init(self: *@This()) *@This() {
        return objc.msgSend(self, "init", *@This(), .{});
    }

    pub fn itemCount(self: *@This()) objc.NSInteger {
        return objc.msgSend(self, "itemCount", objc.NSInteger, .{});
    }

    pub fn @"type"(self: *@This()) MenuItemBadgeType {
        return objc.msgSend(self, "type", MenuItemBadgeType, .{});
    }

    pub fn stringValue(self: *@This()) ?*String {
        return objc.msgSend(self, "stringValue", ?*String, .{});
    }

};

pub const ColorSpaceModel = enum(objc.NSInteger) {
    Unknown = -1,
    Gray = 0,
    RGB = 1,
    CMYK = 2,
    LAB = 3,
    DeviceN = 4,
    Indexed = 5,
    Patterned = 6,
};

/// https://developer.apple.com/documentation/AppKit/NSColorSpace?language=objc
pub const ColorSpace = opaque {
    pub const InternalInfo = objc.ExternalClass("NSColorSpace", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn initWithICCProfileData(self: *@This(), iccData: ?*Data) *@This() {
        return objc.msgSend(self, "initWithICCProfileData:", *@This(), .{iccData});
    }

    pub fn initWithColorSyncProfile(self: *@This(), prof: ?*anyopaque) *@This() {
        return objc.msgSend(self, "initWithColorSyncProfile:", *@This(), .{prof});
    }

    pub fn initWithCGColorSpace(self: *@This(), cgColorSpace: core_graphics.ColorSpaceRef) *@This() {
        return objc.msgSend(self, "initWithCGColorSpace:", *@This(), .{cgColorSpace});
    }

    pub fn availableColorSpacesWithModel(self: *@This(), model: ColorSpaceModel) ?*anyopaque {
        return objc.msgSend(self, "availableColorSpacesWithModel:", ?*anyopaque, .{model});
    }

    pub fn ICCProfileData(self: *@This()) ?*Data {
        return objc.msgSend(self, "ICCProfileData", ?*Data, .{});
    }

    pub fn colorSyncProfile(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "colorSyncProfile", ?*anyopaque, .{});
    }

    pub fn CGColorSpace(self: *@This()) core_graphics.ColorSpaceRef {
        return objc.msgSend(self, "CGColorSpace", core_graphics.ColorSpaceRef, .{});
    }

    pub fn numberOfColorComponents(self: *@This()) objc.NSInteger {
        return objc.msgSend(self, "numberOfColorComponents", objc.NSInteger, .{});
    }

    pub fn colorSpaceModel(self: *@This()) ColorSpaceModel {
        return objc.msgSend(self, "colorSpaceModel", ColorSpaceModel, .{});
    }

    pub fn localizedName(self: *@This()) ?*String {
        return objc.msgSend(self, "localizedName", ?*String, .{});
    }

    pub fn sRGBColorSpace(self: *@This()) ?*ColorSpace {
        return objc.msgSend(self, "sRGBColorSpace", ?*ColorSpace, .{});
    }

    pub fn genericGamma22GrayColorSpace(self: *@This()) ?*ColorSpace {
        return objc.msgSend(self, "genericGamma22GrayColorSpace", ?*ColorSpace, .{});
    }

    pub fn extendedSRGBColorSpace(self: *@This()) ?*ColorSpace {
        return objc.msgSend(self, "extendedSRGBColorSpace", ?*ColorSpace, .{});
    }

    pub fn extendedGenericGamma22GrayColorSpace(self: *@This()) ?*ColorSpace {
        return objc.msgSend(self, "extendedGenericGamma22GrayColorSpace", ?*ColorSpace, .{});
    }

    pub fn displayP3ColorSpace(self: *@This()) ?*ColorSpace {
        return objc.msgSend(self, "displayP3ColorSpace", ?*ColorSpace, .{});
    }

    pub fn adobeRGB1998ColorSpace(self: *@This()) ?*ColorSpace {
        return objc.msgSend(self, "adobeRGB1998ColorSpace", ?*ColorSpace, .{});
    }

    pub fn genericRGBColorSpace(self: *@This()) ?*ColorSpace {
        return objc.msgSend(self, "genericRGBColorSpace", ?*ColorSpace, .{});
    }

    pub fn genericGrayColorSpace(self: *@This()) ?*ColorSpace {
        return objc.msgSend(self, "genericGrayColorSpace", ?*ColorSpace, .{});
    }

    pub fn genericCMYKColorSpace(self: *@This()) ?*ColorSpace {
        return objc.msgSend(self, "genericCMYKColorSpace", ?*ColorSpace, .{});
    }

    pub fn deviceRGBColorSpace(self: *@This()) ?*ColorSpace {
        return objc.msgSend(self, "deviceRGBColorSpace", ?*ColorSpace, .{});
    }

    pub fn deviceGrayColorSpace(self: *@This()) ?*ColorSpace {
        return objc.msgSend(self, "deviceGrayColorSpace", ?*ColorSpace, .{});
    }

    pub fn deviceCMYKColorSpace(self: *@This()) ?*ColorSpace {
        return objc.msgSend(self, "deviceCMYKColorSpace", ?*ColorSpace, .{});
    }

};

pub const ImageHintKey = ?*String;

pub const anon291 = enum(u32) {
    NSImageRepMatchesDevice = 0,
};

pub const ImageLayoutDirection = enum(objc.NSInteger) {
    Unspecified = -1,
    LeftToRight = 2,
    RightToLeft = 3,
};

/// https://developer.apple.com/documentation/AppKit/NSImageRep?language=objc
pub const ImageRep = opaque {
    pub const InternalInfo = objc.ExternalClass("NSImageRep", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn init(self: *@This()) *@This() {
        return objc.msgSend(self, "init", *@This(), .{});
    }

    pub fn initWithCoder(self: *@This(), coder: ?*foundation.Coder) *@This() {
        return objc.msgSend(self, "initWithCoder:", *@This(), .{coder});
    }

    pub fn draw(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "draw", objc.BOOL, .{});
    }

    pub fn drawAtPoint(self: *@This(), point: foundation.Point) objc.BOOL {
        return objc.msgSend(self, "drawAtPoint:", objc.BOOL, .{point});
    }

    pub fn drawInRect(self: *@This(), rect: foundation.Rect) objc.BOOL {
        return objc.msgSend(self, "drawInRect:", objc.BOOL, .{rect});
    }

    pub fn drawInRectFromRectOperationFractionRespectFlippedHints(self: *@This(), dstSpacePortionRect: foundation.Rect, srcSpacePortionRect: foundation.Rect, op: CompositingOperation, requestedAlpha: core_foundation.CGFloat, respectContextIsFlipped: objc.BOOL, hints: ?*anyopaque, ) objc.BOOL {
        return objc.msgSend(self, "drawInRect:fromRect:operation:fraction:respectFlipped:hints:", objc.BOOL, .{dstSpacePortionRect, srcSpacePortionRect, op, requestedAlpha, respectContextIsFlipped, hints, });
    }

    pub fn registerImageRepClass(self: *@This(), imageRepClass: *objc.Class) void {
        return objc.msgSend(self, "registerImageRepClass:", void, .{imageRepClass});
    }

    pub fn unregisterImageRepClass(self: *@This(), imageRepClass: *objc.Class) void {
        return objc.msgSend(self, "unregisterImageRepClass:", void, .{imageRepClass});
    }

    pub fn imageRepClassForFileType(self: *@This(), @"type": ?*String) *objc.Class {
        return objc.msgSend(self, "imageRepClassForFileType:", *objc.Class, .{@"type"});
    }

    pub fn imageRepClassForPasteboardType(self: *@This(), @"type": PasteboardType) *objc.Class {
        return objc.msgSend(self, "imageRepClassForPasteboardType:", *objc.Class, .{@"type"});
    }

    pub fn imageRepClassForType(self: *@This(), @"type": ?*String) *objc.Class {
        return objc.msgSend(self, "imageRepClassForType:", *objc.Class, .{@"type"});
    }

    pub fn imageRepClassForData(self: *@This(), data: ?*Data) *objc.Class {
        return objc.msgSend(self, "imageRepClassForData:", *objc.Class, .{data});
    }

    pub fn canInitWithData(self: *@This(), data: ?*Data) objc.BOOL {
        return objc.msgSend(self, "canInitWithData:", objc.BOOL, .{data});
    }

    pub fn imageUnfilteredFileTypes(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "imageUnfilteredFileTypes", ?*anyopaque, .{});
    }

    pub fn imageUnfilteredPasteboardTypes(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "imageUnfilteredPasteboardTypes", ?*anyopaque, .{});
    }

    pub fn imageFileTypes(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "imageFileTypes", ?*anyopaque, .{});
    }

    pub fn imagePasteboardTypes(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "imagePasteboardTypes", ?*anyopaque, .{});
    }

    pub fn canInitWithPasteboard(self: *@This(), pasteboard: ?*Pasteboard) objc.BOOL {
        return objc.msgSend(self, "canInitWithPasteboard:", objc.BOOL, .{pasteboard});
    }

    pub fn imageRepsWithContentsOfFile(self: *@This(), filename: ?*String) ?*anyopaque {
        return objc.msgSend(self, "imageRepsWithContentsOfFile:", ?*anyopaque, .{filename});
    }

    pub fn imageRepWithContentsOfFile(self: *@This(), filename: ?*String) ?*ImageRep {
        return objc.msgSend(self, "imageRepWithContentsOfFile:", ?*ImageRep, .{filename});
    }

    pub fn imageRepsWithContentsOfURL(self: *@This(), url: ?*URL) ?*anyopaque {
        return objc.msgSend(self, "imageRepsWithContentsOfURL:", ?*anyopaque, .{url});
    }

    pub fn imageRepWithContentsOfURL(self: *@This(), url: ?*URL) ?*ImageRep {
        return objc.msgSend(self, "imageRepWithContentsOfURL:", ?*ImageRep, .{url});
    }

    pub fn imageRepsWithPasteboard(self: *@This(), pasteboard: ?*Pasteboard) ?*anyopaque {
        return objc.msgSend(self, "imageRepsWithPasteboard:", ?*anyopaque, .{pasteboard});
    }

    pub fn imageRepWithPasteboard(self: *@This(), pasteboard: ?*Pasteboard) ?*ImageRep {
        return objc.msgSend(self, "imageRepWithPasteboard:", ?*ImageRep, .{pasteboard});
    }

    pub fn CGImageForProposedRectContextHints(self: *@This(), proposedDestRect: ?*foundation.Rect, context: ?*GraphicsContext, hints: ?*anyopaque) core_graphics.ImageRef {
        return objc.msgSend(self, "CGImageForProposedRect:context:hints:", core_graphics.ImageRef, .{proposedDestRect, context, hints});
    }

    pub fn size(self: *@This()) foundation.Size {
        return objc.msgSend(self, "size", foundation.Size, .{});
    }

    pub fn setSize(self: *@This(), size: foundation.Size) void {
        return objc.msgSend(self, "setSize:", void, .{size});
    }

    pub fn hasAlpha(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "hasAlpha", objc.BOOL, .{});
    }

    pub fn setAlpha(self: *@This(), alpha: objc.BOOL) void {
        return objc.msgSend(self, "setAlpha:", void, .{alpha});
    }

    pub fn isOpaque(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isOpaque", objc.BOOL, .{});
    }

    pub fn setOpaque(self: *@This(), opaque: objc.BOOL) void {
        return objc.msgSend(self, "setOpaque:", void, .{opaque});
    }

    pub fn colorSpaceName(self: *@This()) ColorSpaceName {
        return objc.msgSend(self, "colorSpaceName", ColorSpaceName, .{});
    }

    pub fn setColorSpaceName(self: *@This(), colorSpaceName: ColorSpaceName) void {
        return objc.msgSend(self, "setColorSpaceName:", void, .{colorSpaceName});
    }

    pub fn bitsPerSample(self: *@This()) objc.NSInteger {
        return objc.msgSend(self, "bitsPerSample", objc.NSInteger, .{});
    }

    pub fn setBitsPerSample(self: *@This(), bitsPerSample: objc.NSInteger) void {
        return objc.msgSend(self, "setBitsPerSample:", void, .{bitsPerSample});
    }

    pub fn pixelsWide(self: *@This()) objc.NSInteger {
        return objc.msgSend(self, "pixelsWide", objc.NSInteger, .{});
    }

    pub fn setPixelsWide(self: *@This(), pixelsWide: objc.NSInteger) void {
        return objc.msgSend(self, "setPixelsWide:", void, .{pixelsWide});
    }

    pub fn pixelsHigh(self: *@This()) objc.NSInteger {
        return objc.msgSend(self, "pixelsHigh", objc.NSInteger, .{});
    }

    pub fn setPixelsHigh(self: *@This(), pixelsHigh: objc.NSInteger) void {
        return objc.msgSend(self, "setPixelsHigh:", void, .{pixelsHigh});
    }

    pub fn layoutDirection(self: *@This()) ImageLayoutDirection {
        return objc.msgSend(self, "layoutDirection", ImageLayoutDirection, .{});
    }

    pub fn setLayoutDirection(self: *@This(), layoutDirection: ImageLayoutDirection) void {
        return objc.msgSend(self, "setLayoutDirection:", void, .{layoutDirection});
    }

    pub fn registeredImageRepClasses(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "registeredImageRepClasses", ?*anyopaque, .{});
    }

    pub fn imageUnfilteredTypes(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "imageUnfilteredTypes", ?*anyopaque, .{});
    }

    pub fn imageTypes(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "imageTypes", ?*anyopaque, .{});
    }

};

pub const TIFFCompression = enum(objc.NSUInteger) {
    None = 1,
    CCITTFAX3 = 3,
    CCITTFAX4 = 4,
    LZW = 5,
    JPEG = 6,
    NEXT = 32766,
    PackBits = 32773,
    OldJPEG = 32865,
};

pub const BitmapImageFileType = enum(objc.NSUInteger) {
    TIFF = 0,
    BMP = 1,
    GIF = 2,
    JPEG = 3,
    PNG = 4,
    JPEG2000 = 5,
};

pub const ImageRepLoadStatus = enum(objc.NSInteger) {
    UnknownType = -1,
    ReadingHeader = -2,
    WillNeedAllData = -3,
    InvalidData = -4,
    UnexpectedEOF = -5,
    Completed = -6,
};

pub const BitmapFormat = enum(objc.NSUInteger) {
    AlphaFirst = 1,
    AlphaNonpremultiplied = 2,
    FloatingPointSamples = 4,
    SixteenBitLittleEndian = 256,
    ThirtyTwoBitLittleEndian = 512,
    SixteenBitBigEndian = 1024,
    ThirtyTwoBitBigEndian = 2048,
};

pub const BitmapImageRepPropertyKey = ?*String;

/// https://developer.apple.com/documentation/AppKit/NSBitmapImageRep?language=objc
pub const BitmapImageRep = opaque {
    pub const InternalInfo = objc.ExternalClass("NSBitmapImageRep", @This(), ImageRep, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn initWithFocusedViewRect(self: *@This(), rect: foundation.Rect) *@This() {
        return objc.msgSend(self, "initWithFocusedViewRect:", *@This(), .{rect});
    }

    pub fn initWithBitmapDataPlanesPixelsWidePixelsHighBitsPerSampleSamplesPerPixelHasAlphaIsPlanarColorSpaceNameBytesPerRowBitsPerPixel(self: *@This(), planes: ?*?*u8, width: objc.NSInteger, height: objc.NSInteger, bps: objc.NSInteger, spp: objc.NSInteger, alpha: objc.BOOL, isPlanar: objc.BOOL, colorSpaceName: ColorSpaceName, rBytes: objc.NSInteger, pBits: objc.NSInteger, ) *@This() {
        return objc.msgSend(self, "initWithBitmapDataPlanes:pixelsWide:pixelsHigh:bitsPerSample:samplesPerPixel:hasAlpha:isPlanar:colorSpaceName:bytesPerRow:bitsPerPixel:", *@This(), .{planes, width, height, bps, spp, alpha, isPlanar, colorSpaceName, rBytes, pBits, });
    }

    pub fn initWithBitmapDataPlanesPixelsWidePixelsHighBitsPerSampleSamplesPerPixelHasAlphaIsPlanarColorSpaceNameBitmapFormatBytesPerRowBitsPerPixel(self: *@This(), planes: ?*?*u8, width: objc.NSInteger, height: objc.NSInteger, bps: objc.NSInteger, spp: objc.NSInteger, alpha: objc.BOOL, isPlanar: objc.BOOL, colorSpaceName: ColorSpaceName, bitmapFormat: BitmapFormat, rBytes: objc.NSInteger, pBits: objc.NSInteger, ) *@This() {
        return objc.msgSend(self, "initWithBitmapDataPlanes:pixelsWide:pixelsHigh:bitsPerSample:samplesPerPixel:hasAlpha:isPlanar:colorSpaceName:bitmapFormat:bytesPerRow:bitsPerPixel:", *@This(), .{planes, width, height, bps, spp, alpha, isPlanar, colorSpaceName, bitmapFormat, rBytes, pBits, });
    }

    pub fn initWithCGImage(self: *@This(), cgImage: core_graphics.ImageRef) *@This() {
        return objc.msgSend(self, "initWithCGImage:", *@This(), .{cgImage});
    }

    pub fn initWithCIImage(self: *@This(), ciImage: ?*CIImage) *@This() {
        return objc.msgSend(self, "initWithCIImage:", *@This(), .{ciImage});
    }

    pub fn imageRepsWithData(self: *@This(), data: ?*Data) ?*anyopaque {
        return objc.msgSend(self, "imageRepsWithData:", ?*anyopaque, .{data});
    }

    pub fn imageRepWithData(self: *@This(), data: ?*Data) *@This() {
        return objc.msgSend(self, "imageRepWithData:", *@This(), .{data});
    }

    pub fn initWithData(self: *@This(), data: ?*Data) *@This() {
        return objc.msgSend(self, "initWithData:", *@This(), .{data});
    }

    pub fn getBitmapDataPlanes(self: *@This(), data: ?*?*u8) void {
        return objc.msgSend(self, "getBitmapDataPlanes:", void, .{data});
    }

    pub fn getCompressionFactor(self: *@This(), compression: ?*TIFFCompression, factor: ?*f32) void {
        return objc.msgSend(self, "getCompression:factor:", void, .{compression, factor});
    }

    pub fn setCompressionFactor(self: *@This(), compression: TIFFCompression, factor: f32) void {
        return objc.msgSend(self, "setCompression:factor:", void, .{compression, factor});
    }

    pub fn TIFFRepresentationUsingCompressionFactor(self: *@This(), comp: TIFFCompression, factor: f32) ?*Data {
        return objc.msgSend(self, "TIFFRepresentationUsingCompression:factor:", ?*Data, .{comp, factor});
    }

    pub fn TIFFRepresentationOfImageRepsInArray(self: *@This(), array: ?*anyopaque) ?*Data {
        return objc.msgSend(self, "TIFFRepresentationOfImageRepsInArray:", ?*Data, .{array});
    }

    pub fn TIFFRepresentationOfImageRepsInArrayUsingCompressionFactor(self: *@This(), array: ?*anyopaque, comp: TIFFCompression, factor: f32) ?*Data {
        return objc.msgSend(self, "TIFFRepresentationOfImageRepsInArray:usingCompression:factor:", ?*Data, .{array, comp, factor});
    }

    pub fn getTIFFCompressionTypesCount(self: *@This(), list: ?*?*TIFFCompression, numTypes: ?*objc.NSInteger) void {
        return objc.msgSend(self, "getTIFFCompressionTypes:count:", void, .{list, numTypes});
    }

    pub fn localizedNameForTIFFCompressionType(self: *@This(), compression: TIFFCompression) ?*String {
        return objc.msgSend(self, "localizedNameForTIFFCompressionType:", ?*String, .{compression});
    }

    pub fn canBeCompressedUsing(self: *@This(), compression: TIFFCompression) objc.BOOL {
        return objc.msgSend(self, "canBeCompressedUsing:", objc.BOOL, .{compression});
    }

    pub fn colorizeByMappingGrayToColorBlackMappingWhiteMapping(self: *@This(), midPoint: core_foundation.CGFloat, midPointColor: ?*Color, shadowColor: ?*Color, lightColor: ?*Color, ) void {
        return objc.msgSend(self, "colorizeByMappingGray:toColor:blackMapping:whiteMapping:", void, .{midPoint, midPointColor, shadowColor, lightColor, });
    }

    pub fn initForIncrementalLoad(self: *@This()) *@This() {
        return objc.msgSend(self, "initForIncrementalLoad", *@This(), .{});
    }

    pub fn incrementalLoadFromDataComplete(self: *@This(), data: ?*Data, complete: objc.BOOL) objc.NSInteger {
        return objc.msgSend(self, "incrementalLoadFromData:complete:", objc.NSInteger, .{data, complete});
    }

    pub fn setColorAtXY(self: *@This(), color: ?*Color, x: objc.NSInteger, y: objc.NSInteger) void {
        return objc.msgSend(self, "setColor:atX:y:", void, .{color, x, y});
    }

    pub fn colorAtXY(self: *@This(), x: objc.NSInteger, y: objc.NSInteger) ?*Color {
        return objc.msgSend(self, "colorAtX:y:", ?*Color, .{x, y});
    }

    pub fn getPixelAtXY(self: *@This(), p: ?*objc.NSUInteger, x: objc.NSInteger, y: objc.NSInteger) void {
        return objc.msgSend(self, "getPixel:atX:y:", void, .{p, x, y});
    }

    pub fn setPixelAtXY(self: *@This(), p: ?*objc.NSUInteger, x: objc.NSInteger, y: objc.NSInteger) void {
        return objc.msgSend(self, "setPixel:atX:y:", void, .{p, x, y});
    }

    pub fn bitmapImageRepByConvertingToColorSpaceRenderingIntent(self: *@This(), targetSpace: ?*ColorSpace, renderingIntent: ColorRenderingIntent) ?*BitmapImageRep {
        return objc.msgSend(self, "bitmapImageRepByConvertingToColorSpace:renderingIntent:", ?*BitmapImageRep, .{targetSpace, renderingIntent});
    }

    pub fn bitmapImageRepByRetaggingWithColorSpace(self: *@This(), newSpace: ?*ColorSpace) ?*BitmapImageRep {
        return objc.msgSend(self, "bitmapImageRepByRetaggingWithColorSpace:", ?*BitmapImageRep, .{newSpace});
    }

    pub fn bitmapData(self: *@This()) ?*u8 {
        return objc.msgSend(self, "bitmapData", ?*u8, .{});
    }

    pub fn isPlanar(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isPlanar", objc.BOOL, .{});
    }

    pub fn samplesPerPixel(self: *@This()) objc.NSInteger {
        return objc.msgSend(self, "samplesPerPixel", objc.NSInteger, .{});
    }

    pub fn bitsPerPixel(self: *@This()) objc.NSInteger {
        return objc.msgSend(self, "bitsPerPixel", objc.NSInteger, .{});
    }

    pub fn bytesPerRow(self: *@This()) objc.NSInteger {
        return objc.msgSend(self, "bytesPerRow", objc.NSInteger, .{});
    }

    pub fn bytesPerPlane(self: *@This()) objc.NSInteger {
        return objc.msgSend(self, "bytesPerPlane", objc.NSInteger, .{});
    }

    pub fn numberOfPlanes(self: *@This()) objc.NSInteger {
        return objc.msgSend(self, "numberOfPlanes", objc.NSInteger, .{});
    }

    pub fn bitmapFormat(self: *@This()) BitmapFormat {
        return objc.msgSend(self, "bitmapFormat", BitmapFormat, .{});
    }

    pub fn TIFFRepresentation(self: *@This()) ?*Data {
        return objc.msgSend(self, "TIFFRepresentation", ?*Data, .{});
    }

    pub fn CGImage(self: *@This()) core_graphics.ImageRef {
        return objc.msgSend(self, "CGImage", core_graphics.ImageRef, .{});
    }

    pub fn colorSpace(self: *@This()) ?*ColorSpace {
        return objc.msgSend(self, "colorSpace", ?*ColorSpace, .{});
    }

};

pub const BrowserColumnsAutosaveName = ?*String;

pub const BrowserColumnResizingType = enum(objc.NSUInteger) {
    NoColumnResizing = 0,
    AutoColumnResizing = 1,
    UserColumnResizing = 2,
};

pub const BrowserDropOperation = enum(objc.NSUInteger) {
    On = 0,
    Above = 1,
};

/// https://developer.apple.com/documentation/AppKit/NSBrowser?language=objc
pub const Browser = opaque {
    pub const InternalInfo = objc.ExternalClass("NSBrowser", @This(), Control, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn loadColumnZero(self: *@This()) void {
        return objc.msgSend(self, "loadColumnZero", void, .{});
    }

    pub fn setCellClass(self: *@This(), factoryId: *objc.Class) void {
        return objc.msgSend(self, "setCellClass:", void, .{factoryId});
    }

    pub fn itemAtIndexPath(self: *@This(), indexPath: ?*IndexPath) *objc.Id {
        return objc.msgSend(self, "itemAtIndexPath:", *objc.Id, .{indexPath});
    }

    pub fn itemAtRowInColumn(self: *@This(), row: objc.NSInteger, column: objc.NSInteger) *objc.Id {
        return objc.msgSend(self, "itemAtRow:inColumn:", *objc.Id, .{row, column});
    }

    pub fn indexPathForColumn(self: *@This(), column: objc.NSInteger) ?*IndexPath {
        return objc.msgSend(self, "indexPathForColumn:", ?*IndexPath, .{column});
    }

    pub fn isLeafItem(self: *@This(), item: *objc.Id) objc.BOOL {
        return objc.msgSend(self, "isLeafItem:", objc.BOOL, .{item});
    }

    pub fn reloadDataForRowIndexesInColumn(self: *@This(), rowIndexes: ?*IndexSet, column: objc.NSInteger) void {
        return objc.msgSend(self, "reloadDataForRowIndexes:inColumn:", void, .{rowIndexes, column});
    }

    pub fn parentForItemsInColumn(self: *@This(), column: objc.NSInteger) *objc.Id {
        return objc.msgSend(self, "parentForItemsInColumn:", *objc.Id, .{column});
    }

    pub fn scrollRowToVisibleInColumn(self: *@This(), row: objc.NSInteger, column: objc.NSInteger) void {
        return objc.msgSend(self, "scrollRowToVisible:inColumn:", void, .{row, column});
    }

    pub fn setTitleOfColumn(self: *@This(), string: ?*String, column: objc.NSInteger) void {
        return objc.msgSend(self, "setTitle:ofColumn:", void, .{string, column});
    }

    pub fn titleOfColumn(self: *@This(), column: objc.NSInteger) ?*String {
        return objc.msgSend(self, "titleOfColumn:", ?*String, .{column});
    }

    pub fn setPath(self: *@This(), path: ?*String) objc.BOOL {
        return objc.msgSend(self, "setPath:", objc.BOOL, .{path});
    }

    pub fn path(self: *@This()) ?*String {
        return objc.msgSend(self, "path", ?*String, .{});
    }

    pub fn pathToColumn(self: *@This(), column: objc.NSInteger) ?*String {
        return objc.msgSend(self, "pathToColumn:", ?*String, .{column});
    }

    pub fn selectedCellInColumn(self: *@This(), column: objc.NSInteger) *objc.Id {
        return objc.msgSend(self, "selectedCellInColumn:", *objc.Id, .{column});
    }

    pub fn selectRowInColumn(self: *@This(), row: objc.NSInteger, column: objc.NSInteger) void {
        return objc.msgSend(self, "selectRow:inColumn:", void, .{row, column});
    }

    pub fn selectedRowInColumn(self: *@This(), column: objc.NSInteger) objc.NSInteger {
        return objc.msgSend(self, "selectedRowInColumn:", objc.NSInteger, .{column});
    }

    pub fn selectRowIndexesInColumn(self: *@This(), indexes: ?*IndexSet, column: objc.NSInteger) void {
        return objc.msgSend(self, "selectRowIndexes:inColumn:", void, .{indexes, column});
    }

    pub fn selectedRowIndexesInColumn(self: *@This(), column: objc.NSInteger) ?*IndexSet {
        return objc.msgSend(self, "selectedRowIndexesInColumn:", ?*IndexSet, .{column});
    }

    pub fn reloadColumn(self: *@This(), column: objc.NSInteger) void {
        return objc.msgSend(self, "reloadColumn:", void, .{column});
    }

    pub fn validateVisibleColumns(self: *@This()) void {
        return objc.msgSend(self, "validateVisibleColumns", void, .{});
    }

    pub fn scrollColumnsRightBy(self: *@This(), shiftAmount: objc.NSInteger) void {
        return objc.msgSend(self, "scrollColumnsRightBy:", void, .{shiftAmount});
    }

    pub fn scrollColumnsLeftBy(self: *@This(), shiftAmount: objc.NSInteger) void {
        return objc.msgSend(self, "scrollColumnsLeftBy:", void, .{shiftAmount});
    }

    pub fn scrollColumnToVisible(self: *@This(), column: objc.NSInteger) void {
        return objc.msgSend(self, "scrollColumnToVisible:", void, .{column});
    }

    pub fn addColumn(self: *@This()) void {
        return objc.msgSend(self, "addColumn", void, .{});
    }

    pub fn loadedCellAtRowColumn(self: *@This(), row: objc.NSInteger, col: objc.NSInteger) *objc.Id {
        return objc.msgSend(self, "loadedCellAtRow:column:", *objc.Id, .{row, col});
    }

    pub fn selectAll(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "selectAll:", void, .{sender});
    }

    pub fn tile(self: *@This()) void {
        return objc.msgSend(self, "tile", void, .{});
    }

    pub fn doClick(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "doClick:", void, .{sender});
    }

    pub fn doDoubleClick(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "doDoubleClick:", void, .{sender});
    }

    pub fn sendAction(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "sendAction", objc.BOOL, .{});
    }

    pub fn titleFrameOfColumn(self: *@This(), column: objc.NSInteger) foundation.Rect {
        return objc.msgSend(self, "titleFrameOfColumn:", foundation.Rect, .{column});
    }

    pub fn drawTitleOfColumnInRect(self: *@This(), column: objc.NSInteger, rect: foundation.Rect) void {
        return objc.msgSend(self, "drawTitleOfColumn:inRect:", void, .{column, rect});
    }

    pub fn frameOfColumn(self: *@This(), column: objc.NSInteger) foundation.Rect {
        return objc.msgSend(self, "frameOfColumn:", foundation.Rect, .{column});
    }

    pub fn frameOfInsideOfColumn(self: *@This(), column: objc.NSInteger) foundation.Rect {
        return objc.msgSend(self, "frameOfInsideOfColumn:", foundation.Rect, .{column});
    }

    pub fn frameOfRowInColumn(self: *@This(), row: objc.NSInteger, column: objc.NSInteger) foundation.Rect {
        return objc.msgSend(self, "frameOfRow:inColumn:", foundation.Rect, .{row, column});
    }

    pub fn getRowColumnForPoint(self: *@This(), row: ?*objc.NSInteger, column: ?*objc.NSInteger, point: foundation.Point) objc.BOOL {
        return objc.msgSend(self, "getRow:column:forPoint:", objc.BOOL, .{row, column, point});
    }

    pub fn columnWidthForColumnContentWidth(self: *@This(), columnContentWidth: core_foundation.CGFloat) core_foundation.CGFloat {
        return objc.msgSend(self, "columnWidthForColumnContentWidth:", core_foundation.CGFloat, .{columnContentWidth});
    }

    pub fn columnContentWidthForColumnWidth(self: *@This(), columnWidth: core_foundation.CGFloat) core_foundation.CGFloat {
        return objc.msgSend(self, "columnContentWidthForColumnWidth:", core_foundation.CGFloat, .{columnWidth});
    }

    pub fn setWidthOfColumn(self: *@This(), columnWidth: core_foundation.CGFloat, columnIndex: objc.NSInteger) void {
        return objc.msgSend(self, "setWidth:ofColumn:", void, .{columnWidth, columnIndex});
    }

    pub fn widthOfColumn(self: *@This(), column: objc.NSInteger) core_foundation.CGFloat {
        return objc.msgSend(self, "widthOfColumn:", core_foundation.CGFloat, .{column});
    }

    pub fn noteHeightOfRowsWithIndexesChangedInColumn(self: *@This(), indexSet: ?*IndexSet, columnIndex: objc.NSInteger) void {
        return objc.msgSend(self, "noteHeightOfRowsWithIndexesChanged:inColumn:", void, .{indexSet, columnIndex});
    }

    pub fn setDefaultColumnWidth(self: *@This(), columnWidth: core_foundation.CGFloat) void {
        return objc.msgSend(self, "setDefaultColumnWidth:", void, .{columnWidth});
    }

    pub fn defaultColumnWidth(self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(self, "defaultColumnWidth", core_foundation.CGFloat, .{});
    }

    pub fn removeSavedColumnsWithAutosaveName(self: *@This(), name: BrowserColumnsAutosaveName) void {
        return objc.msgSend(self, "removeSavedColumnsWithAutosaveName:", void, .{name});
    }

    pub fn canDragRowsWithIndexesInColumnWithEvent(self: *@This(), rowIndexes: ?*IndexSet, column: objc.NSInteger, event: ?*Event) objc.BOOL {
        return objc.msgSend(self, "canDragRowsWithIndexes:inColumn:withEvent:", objc.BOOL, .{rowIndexes, column, event});
    }

    pub fn draggingImageForRowsWithIndexesInColumnWithEventOffset(self: *@This(), rowIndexes: ?*IndexSet, column: objc.NSInteger, event: ?*Event, dragImageOffset: foundation.PointPointer, ) ?*Image {
        return objc.msgSend(self, "draggingImageForRowsWithIndexes:inColumn:withEvent:offset:", ?*Image, .{rowIndexes, column, event, dragImageOffset, });
    }

    pub fn setDraggingSourceOperationMaskForLocal(self: *@This(), mask: DragOperation, isLocal: objc.BOOL) void {
        return objc.msgSend(self, "setDraggingSourceOperationMask:forLocal:", void, .{mask, isLocal});
    }

    pub fn editItemAtIndexPathWithEventSelect(self: *@This(), indexPath: ?*IndexPath, event: ?*Event, select: objc.BOOL) void {
        return objc.msgSend(self, "editItemAtIndexPath:withEvent:select:", void, .{indexPath, event, select});
    }

    pub fn cellClass(self: *@This()) *objc.Class {
        return objc.msgSend(self, "cellClass", *objc.Class, .{});
    }

    pub fn isLoaded(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isLoaded", objc.BOOL, .{});
    }

    pub fn doubleAction(self: *@This()) *objc.SEL {
        return objc.msgSend(self, "doubleAction", *objc.SEL, .{});
    }

    pub fn setDoubleAction(self: *@This(), doubleAction: *objc.SEL) void {
        return objc.msgSend(self, "setDoubleAction:", void, .{doubleAction});
    }

    pub fn cellPrototype(self: *@This()) *objc.Id {
        return objc.msgSend(self, "cellPrototype", *objc.Id, .{});
    }

    pub fn setCellPrototype(self: *@This(), cellPrototype: *objc.Id) void {
        return objc.msgSend(self, "setCellPrototype:", void, .{cellPrototype});
    }

    pub fn delegate(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "delegate", ?*anyopaque, .{});
    }

    pub fn setDelegate(self: *@This(), delegate: ?*anyopaque) void {
        return objc.msgSend(self, "setDelegate:", void, .{delegate});
    }

    pub fn reusesColumns(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "reusesColumns", objc.BOOL, .{});
    }

    pub fn setReusesColumns(self: *@This(), reusesColumns: objc.BOOL) void {
        return objc.msgSend(self, "setReusesColumns:", void, .{reusesColumns});
    }

    pub fn hasHorizontalScroller(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "hasHorizontalScroller", objc.BOOL, .{});
    }

    pub fn setHasHorizontalScroller(self: *@This(), hasHorizontalScroller: objc.BOOL) void {
        return objc.msgSend(self, "setHasHorizontalScroller:", void, .{hasHorizontalScroller});
    }

    pub fn autohidesScroller(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "autohidesScroller", objc.BOOL, .{});
    }

    pub fn setAutohidesScroller(self: *@This(), autohidesScroller: objc.BOOL) void {
        return objc.msgSend(self, "setAutohidesScroller:", void, .{autohidesScroller});
    }

    pub fn separatesColumns(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "separatesColumns", objc.BOOL, .{});
    }

    pub fn setSeparatesColumns(self: *@This(), separatesColumns: objc.BOOL) void {
        return objc.msgSend(self, "setSeparatesColumns:", void, .{separatesColumns});
    }

    pub fn isTitled(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isTitled", objc.BOOL, .{});
    }

    pub fn setTitled(self: *@This(), titled: objc.BOOL) void {
        return objc.msgSend(self, "setTitled:", void, .{titled});
    }

    pub fn minColumnWidth(self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(self, "minColumnWidth", core_foundation.CGFloat, .{});
    }

    pub fn setMinColumnWidth(self: *@This(), minColumnWidth: core_foundation.CGFloat) void {
        return objc.msgSend(self, "setMinColumnWidth:", void, .{minColumnWidth});
    }

    pub fn maxVisibleColumns(self: *@This()) objc.NSInteger {
        return objc.msgSend(self, "maxVisibleColumns", objc.NSInteger, .{});
    }

    pub fn setMaxVisibleColumns(self: *@This(), maxVisibleColumns: objc.NSInteger) void {
        return objc.msgSend(self, "setMaxVisibleColumns:", void, .{maxVisibleColumns});
    }

    pub fn allowsMultipleSelection(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "allowsMultipleSelection", objc.BOOL, .{});
    }

    pub fn setAllowsMultipleSelection(self: *@This(), allowsMultipleSelection: objc.BOOL) void {
        return objc.msgSend(self, "setAllowsMultipleSelection:", void, .{allowsMultipleSelection});
    }

    pub fn allowsBranchSelection(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "allowsBranchSelection", objc.BOOL, .{});
    }

    pub fn setAllowsBranchSelection(self: *@This(), allowsBranchSelection: objc.BOOL) void {
        return objc.msgSend(self, "setAllowsBranchSelection:", void, .{allowsBranchSelection});
    }

    pub fn allowsEmptySelection(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "allowsEmptySelection", objc.BOOL, .{});
    }

    pub fn setAllowsEmptySelection(self: *@This(), allowsEmptySelection: objc.BOOL) void {
        return objc.msgSend(self, "setAllowsEmptySelection:", void, .{allowsEmptySelection});
    }

    pub fn takesTitleFromPreviousColumn(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "takesTitleFromPreviousColumn", objc.BOOL, .{});
    }

    pub fn setTakesTitleFromPreviousColumn(self: *@This(), takesTitleFromPreviousColumn: objc.BOOL) void {
        return objc.msgSend(self, "setTakesTitleFromPreviousColumn:", void, .{takesTitleFromPreviousColumn});
    }

    pub fn sendsActionOnArrowKeys(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "sendsActionOnArrowKeys", objc.BOOL, .{});
    }

    pub fn setSendsActionOnArrowKeys(self: *@This(), sendsActionOnArrowKeys: objc.BOOL) void {
        return objc.msgSend(self, "setSendsActionOnArrowKeys:", void, .{sendsActionOnArrowKeys});
    }

    pub fn pathSeparator(self: *@This()) ?*String {
        return objc.msgSend(self, "pathSeparator", ?*String, .{});
    }

    pub fn setPathSeparator(self: *@This(), pathSeparator: ?*String) void {
        return objc.msgSend(self, "setPathSeparator:", void, .{pathSeparator});
    }

    pub fn clickedColumn(self: *@This()) objc.NSInteger {
        return objc.msgSend(self, "clickedColumn", objc.NSInteger, .{});
    }

    pub fn clickedRow(self: *@This()) objc.NSInteger {
        return objc.msgSend(self, "clickedRow", objc.NSInteger, .{});
    }

    pub fn selectedColumn(self: *@This()) objc.NSInteger {
        return objc.msgSend(self, "selectedColumn", objc.NSInteger, .{});
    }

    pub fn selectedCell(self: *@This()) *objc.Id {
        return objc.msgSend(self, "selectedCell", *objc.Id, .{});
    }

    pub fn selectedCells(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "selectedCells", ?*anyopaque, .{});
    }

    pub fn selectionIndexPath(self: *@This()) ?*IndexPath {
        return objc.msgSend(self, "selectionIndexPath", ?*IndexPath, .{});
    }

    pub fn setSelectionIndexPath(self: *@This(), selectionIndexPath: ?*IndexPath) void {
        return objc.msgSend(self, "setSelectionIndexPath:", void, .{selectionIndexPath});
    }

    pub fn selectionIndexPaths(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "selectionIndexPaths", ?*anyopaque, .{});
    }

    pub fn setSelectionIndexPaths(self: *@This(), selectionIndexPaths: ?*anyopaque) void {
        return objc.msgSend(self, "setSelectionIndexPaths:", void, .{selectionIndexPaths});
    }

    pub fn lastColumn(self: *@This()) objc.NSInteger {
        return objc.msgSend(self, "lastColumn", objc.NSInteger, .{});
    }

    pub fn setLastColumn(self: *@This(), lastColumn: objc.NSInteger) void {
        return objc.msgSend(self, "setLastColumn:", void, .{lastColumn});
    }

    pub fn numberOfVisibleColumns(self: *@This()) objc.NSInteger {
        return objc.msgSend(self, "numberOfVisibleColumns", objc.NSInteger, .{});
    }

    pub fn firstVisibleColumn(self: *@This()) objc.NSInteger {
        return objc.msgSend(self, "firstVisibleColumn", objc.NSInteger, .{});
    }

    pub fn lastVisibleColumn(self: *@This()) objc.NSInteger {
        return objc.msgSend(self, "lastVisibleColumn", objc.NSInteger, .{});
    }

    pub fn titleHeight(self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(self, "titleHeight", core_foundation.CGFloat, .{});
    }

    pub fn columnResizingType(self: *@This()) BrowserColumnResizingType {
        return objc.msgSend(self, "columnResizingType", BrowserColumnResizingType, .{});
    }

    pub fn setColumnResizingType(self: *@This(), columnResizingType: BrowserColumnResizingType) void {
        return objc.msgSend(self, "setColumnResizingType:", void, .{columnResizingType});
    }

    pub fn prefersAllColumnUserResizing(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "prefersAllColumnUserResizing", objc.BOOL, .{});
    }

    pub fn setPrefersAllColumnUserResizing(self: *@This(), prefersAllColumnUserResizing: objc.BOOL) void {
        return objc.msgSend(self, "setPrefersAllColumnUserResizing:", void, .{prefersAllColumnUserResizing});
    }

    pub fn rowHeight(self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(self, "rowHeight", core_foundation.CGFloat, .{});
    }

    pub fn setRowHeight(self: *@This(), rowHeight: core_foundation.CGFloat) void {
        return objc.msgSend(self, "setRowHeight:", void, .{rowHeight});
    }

    pub fn columnsAutosaveName(self: *@This()) BrowserColumnsAutosaveName {
        return objc.msgSend(self, "columnsAutosaveName", BrowserColumnsAutosaveName, .{});
    }

    pub fn setColumnsAutosaveName(self: *@This(), columnsAutosaveName: BrowserColumnsAutosaveName) void {
        return objc.msgSend(self, "setColumnsAutosaveName:", void, .{columnsAutosaveName});
    }

    pub fn allowsTypeSelect(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "allowsTypeSelect", objc.BOOL, .{});
    }

    pub fn setAllowsTypeSelect(self: *@This(), allowsTypeSelect: objc.BOOL) void {
        return objc.msgSend(self, "setAllowsTypeSelect:", void, .{allowsTypeSelect});
    }

    pub fn backgroundColor(self: *@This()) ?*Color {
        return objc.msgSend(self, "backgroundColor", ?*Color, .{});
    }

    pub fn setBackgroundColor(self: *@This(), backgroundColor: ?*Color) void {
        return objc.msgSend(self, "setBackgroundColor:", void, .{backgroundColor});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSBrowserDelegate?language=objc
pub const BrowserDelegate = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{objc.NSObject, });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn browserNumberOfRowsInColumn(self: *@This(), sender: ?*Browser, column: objc.NSInteger) objc.NSInteger {
        return objc.msgSend(self, "browser:numberOfRowsInColumn:", objc.NSInteger, .{sender, column});
    }

    pub fn browserCreateRowsForColumnInMatrix(self: *@This(), sender: ?*Browser, column: objc.NSInteger, matrix: ?*Matrix) void {
        return objc.msgSend(self, "browser:createRowsForColumn:inMatrix:", void, .{sender, column, matrix});
    }

    pub fn browserNumberOfChildrenOfItem(self: *@This(), browser: ?*Browser, item: *objc.Id) objc.NSInteger {
        return objc.msgSend(self, "browser:numberOfChildrenOfItem:", objc.NSInteger, .{browser, item});
    }

    pub fn browserChildOfItem(self: *@This(), browser: ?*Browser, index: objc.NSInteger, item: *objc.Id) *objc.Id {
        return objc.msgSend(self, "browser:child:ofItem:", *objc.Id, .{browser, index, item});
    }

    pub fn browserIsLeafItem(self: *@This(), browser: ?*Browser, item: *objc.Id) objc.BOOL {
        return objc.msgSend(self, "browser:isLeafItem:", objc.BOOL, .{browser, item});
    }

    pub fn browserObjectValueForItem(self: *@This(), browser: ?*Browser, item: *objc.Id) *objc.Id {
        return objc.msgSend(self, "browser:objectValueForItem:", *objc.Id, .{browser, item});
    }

    pub fn browserHeightOfRowInColumn(self: *@This(), browser: ?*Browser, row: objc.NSInteger, columnIndex: objc.NSInteger) core_foundation.CGFloat {
        return objc.msgSend(self, "browser:heightOfRow:inColumn:", core_foundation.CGFloat, .{browser, row, columnIndex});
    }

    pub fn rootItemForBrowser(self: *@This(), browser: ?*Browser) *objc.Id {
        return objc.msgSend(self, "rootItemForBrowser:", *objc.Id, .{browser});
    }

    pub fn browserSetObjectValueForItem(self: *@This(), browser: ?*Browser, object: *objc.Id, item: *objc.Id) void {
        return objc.msgSend(self, "browser:setObjectValue:forItem:", void, .{browser, object, item});
    }

    pub fn browserShouldEditItem(self: *@This(), browser: ?*Browser, item: *objc.Id) objc.BOOL {
        return objc.msgSend(self, "browser:shouldEditItem:", objc.BOOL, .{browser, item});
    }

    pub fn browserWillDisplayCellAtRowColumn(self: *@This(), sender: ?*Browser, cell: *objc.Id, row: objc.NSInteger, column: objc.NSInteger, ) void {
        return objc.msgSend(self, "browser:willDisplayCell:atRow:column:", void, .{sender, cell, row, column, });
    }

    pub fn browserTitleOfColumn(self: *@This(), sender: ?*Browser, column: objc.NSInteger) ?*String {
        return objc.msgSend(self, "browser:titleOfColumn:", ?*String, .{sender, column});
    }

    pub fn browserSelectCellWithStringInColumn(self: *@This(), sender: ?*Browser, title: ?*String, column: objc.NSInteger) objc.BOOL {
        return objc.msgSend(self, "browser:selectCellWithString:inColumn:", objc.BOOL, .{sender, title, column});
    }

    pub fn browserSelectRowInColumn(self: *@This(), sender: ?*Browser, row: objc.NSInteger, column: objc.NSInteger) objc.BOOL {
        return objc.msgSend(self, "browser:selectRow:inColumn:", objc.BOOL, .{sender, row, column});
    }

    pub fn browserIsColumnValid(self: *@This(), sender: ?*Browser, column: objc.NSInteger) objc.BOOL {
        return objc.msgSend(self, "browser:isColumnValid:", objc.BOOL, .{sender, column});
    }

    pub fn browserWillScroll(self: *@This(), sender: ?*Browser) void {
        return objc.msgSend(self, "browserWillScroll:", void, .{sender});
    }

    pub fn browserDidScroll(self: *@This(), sender: ?*Browser) void {
        return objc.msgSend(self, "browserDidScroll:", void, .{sender});
    }

    pub fn browserShouldSizeColumnForUserResizeToWidth(self: *@This(), browser: ?*Browser, columnIndex: objc.NSInteger, forUserResize: objc.BOOL, suggestedWidth: core_foundation.CGFloat, ) core_foundation.CGFloat {
        return objc.msgSend(self, "browser:shouldSizeColumn:forUserResize:toWidth:", core_foundation.CGFloat, .{browser, columnIndex, forUserResize, suggestedWidth, });
    }

    pub fn browserSizeToFitWidthOfColumn(self: *@This(), browser: ?*Browser, columnIndex: objc.NSInteger) core_foundation.CGFloat {
        return objc.msgSend(self, "browser:sizeToFitWidthOfColumn:", core_foundation.CGFloat, .{browser, columnIndex});
    }

    pub fn browserColumnConfigurationDidChange(self: *@This(), notification: ?*Notification) void {
        return objc.msgSend(self, "browserColumnConfigurationDidChange:", void, .{notification});
    }

    pub fn browserShouldShowCellExpansionForRowColumn(self: *@This(), browser: ?*Browser, row: objc.NSInteger, column: objc.NSInteger) objc.BOOL {
        return objc.msgSend(self, "browser:shouldShowCellExpansionForRow:column:", objc.BOOL, .{browser, row, column});
    }

    pub fn browserWriteRowsWithIndexesInColumnToPasteboard(self: *@This(), browser: ?*Browser, rowIndexes: ?*IndexSet, column: objc.NSInteger, pasteboard: ?*Pasteboard, ) objc.BOOL {
        return objc.msgSend(self, "browser:writeRowsWithIndexes:inColumn:toPasteboard:", objc.BOOL, .{browser, rowIndexes, column, pasteboard, });
    }

    pub fn browserNamesOfPromisedFilesDroppedAtDestinationForDraggedRowsWithIndexesInColumn(self: *@This(), browser: ?*Browser, dropDestination: ?*URL, rowIndexes: ?*IndexSet, column: objc.NSInteger, ) ?*anyopaque {
        return objc.msgSend(self, "browser:namesOfPromisedFilesDroppedAtDestination:forDraggedRowsWithIndexes:inColumn:", ?*anyopaque, .{browser, dropDestination, rowIndexes, column, });
    }

    pub fn browserCanDragRowsWithIndexesInColumnWithEvent(self: *@This(), browser: ?*Browser, rowIndexes: ?*IndexSet, column: objc.NSInteger, event: ?*Event, ) objc.BOOL {
        return objc.msgSend(self, "browser:canDragRowsWithIndexes:inColumn:withEvent:", objc.BOOL, .{browser, rowIndexes, column, event, });
    }

    pub fn browserDraggingImageForRowsWithIndexesInColumnWithEventOffset(self: *@This(), browser: ?*Browser, rowIndexes: ?*IndexSet, column: objc.NSInteger, event: ?*Event, dragImageOffset: foundation.PointPointer, ) ?*Image {
        return objc.msgSend(self, "browser:draggingImageForRowsWithIndexes:inColumn:withEvent:offset:", ?*Image, .{browser, rowIndexes, column, event, dragImageOffset, });
    }

    pub fn browserValidateDropProposedRowColumnDropOperation(self: *@This(), browser: ?*Browser, info: ?*anyopaque, row: ?*objc.NSInteger, column: ?*objc.NSInteger, dropOperation: ?*BrowserDropOperation, ) DragOperation {
        return objc.msgSend(self, "browser:validateDrop:proposedRow:column:dropOperation:", DragOperation, .{browser, info, row, column, dropOperation, });
    }

    pub fn browserAcceptDropAtRowColumnDropOperation(self: *@This(), browser: ?*Browser, info: ?*anyopaque, row: objc.NSInteger, column: objc.NSInteger, dropOperation: BrowserDropOperation, ) objc.BOOL {
        return objc.msgSend(self, "browser:acceptDrop:atRow:column:dropOperation:", objc.BOOL, .{browser, info, row, column, dropOperation, });
    }

    pub fn browserTypeSelectStringForRowInColumn(self: *@This(), browser: ?*Browser, row: objc.NSInteger, column: objc.NSInteger) ?*String {
        return objc.msgSend(self, "browser:typeSelectStringForRow:inColumn:", ?*String, .{browser, row, column});
    }

    pub fn browserShouldTypeSelectForEventWithCurrentSearchString(self: *@This(), browser: ?*Browser, event: ?*Event, searchString: ?*String) objc.BOOL {
        return objc.msgSend(self, "browser:shouldTypeSelectForEvent:withCurrentSearchString:", objc.BOOL, .{browser, event, searchString});
    }

    pub fn browserNextTypeSelectMatchFromRowToRowInColumnForString(self: *@This(), browser: ?*Browser, startRow: objc.NSInteger, endRow: objc.NSInteger, column: objc.NSInteger, searchString: ?*String, ) objc.NSInteger {
        return objc.msgSend(self, "browser:nextTypeSelectMatchFromRow:toRow:inColumn:forString:", objc.NSInteger, .{browser, startRow, endRow, column, searchString, });
    }

    pub fn browserPreviewViewControllerForLeafItem(self: *@This(), browser: ?*Browser, item: *objc.Id) ?*ViewController {
        return objc.msgSend(self, "browser:previewViewControllerForLeafItem:", ?*ViewController, .{browser, item});
    }

    pub fn browserHeaderViewControllerForItem(self: *@This(), browser: ?*Browser, item: *objc.Id) ?*ViewController {
        return objc.msgSend(self, "browser:headerViewControllerForItem:", ?*ViewController, .{browser, item});
    }

    pub fn browserDidChangeLastColumnToColumn(self: *@This(), browser: ?*Browser, oldLastColumn: objc.NSInteger, column: objc.NSInteger) void {
        return objc.msgSend(self, "browser:didChangeLastColumn:toColumn:", void, .{browser, oldLastColumn, column});
    }

    pub fn browserSelectionIndexesForProposedSelectionInColumn(self: *@This(), browser: ?*Browser, proposedSelectionIndexes: ?*IndexSet, column: objc.NSInteger) ?*IndexSet {
        return objc.msgSend(self, "browser:selectionIndexesForProposedSelection:inColumn:", ?*IndexSet, .{browser, proposedSelectionIndexes, column});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSBrowserCell?language=objc
pub const BrowserCell = opaque {
    pub const InternalInfo = objc.ExternalClass("NSBrowserCell", @This(), Cell, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn initTextCell(self: *@This(), string: ?*String) *@This() {
        return objc.msgSend(self, "initTextCell:", *@This(), .{string});
    }

    pub fn initImageCell(self: *@This(), image: ?*Image) *@This() {
        return objc.msgSend(self, "initImageCell:", *@This(), .{image});
    }

    pub fn initWithCoder(self: *@This(), coder: ?*foundation.Coder) *@This() {
        return objc.msgSend(self, "initWithCoder:", *@This(), .{coder});
    }

    pub fn highlightColorInView(self: *@This(), controlView: ?*View) ?*Color {
        return objc.msgSend(self, "highlightColorInView:", ?*Color, .{controlView});
    }

    pub fn reset(self: *@This()) void {
        return objc.msgSend(self, "reset", void, .{});
    }

    pub fn set(self: *@This()) void {
        return objc.msgSend(self, "set", void, .{});
    }

    pub fn branchImage(self: *@This()) ?*Image {
        return objc.msgSend(self, "branchImage", ?*Image, .{});
    }

    pub fn highlightedBranchImage(self: *@This()) ?*Image {
        return objc.msgSend(self, "highlightedBranchImage", ?*Image, .{});
    }

    pub fn isLeaf(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isLeaf", objc.BOOL, .{});
    }

    pub fn setLeaf(self: *@This(), leaf: objc.BOOL) void {
        return objc.msgSend(self, "setLeaf:", void, .{leaf});
    }

    pub fn isLoaded(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isLoaded", objc.BOOL, .{});
    }

    pub fn setLoaded(self: *@This(), loaded: objc.BOOL) void {
        return objc.msgSend(self, "setLoaded:", void, .{loaded});
    }

    pub fn image(self: *@This()) ?*Image {
        return objc.msgSend(self, "image", ?*Image, .{});
    }

    pub fn setImage(self: *@This(), image: ?*Image) void {
        return objc.msgSend(self, "setImage:", void, .{image});
    }

    pub fn alternateImage(self: *@This()) ?*Image {
        return objc.msgSend(self, "alternateImage", ?*Image, .{});
    }

    pub fn setAlternateImage(self: *@This(), alternateImage: ?*Image) void {
        return objc.msgSend(self, "setAlternateImage:", void, .{alternateImage});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSCachedImageRep?language=objc
pub const CachedImageRep = opaque {
    pub const InternalInfo = objc.ExternalClass("NSCachedImageRep", @This(), ImageRep, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn initWithWindowRect(self: *@This(), win: ?*Window, rect: foundation.Rect) *objc.Id {
        return objc.msgSend(self, "initWithWindow:rect:", *objc.Id, .{win, rect});
    }

    pub fn initWithSizeDepthSeparateAlpha(self: *@This(), size: foundation.Size, depth: WindowDepth, flag: objc.BOOL, alpha: objc.BOOL, ) *objc.Id {
        return objc.msgSend(self, "initWithSize:depth:separate:alpha:", *objc.Id, .{size, depth, flag, alpha, });
    }

    pub fn window(self: *@This()) ?*Window {
        return objc.msgSend(self, "window", ?*Window, .{});
    }

    pub fn rect(self: *@This()) foundation.Rect {
        return objc.msgSend(self, "rect", foundation.Rect, .{});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSCIImageRep?language=objc
pub const CIImageRep = opaque {
    pub const InternalInfo = objc.ExternalClass("NSCIImageRep", @This(), ImageRep, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn imageRepWithCIImage(self: *@This(), image: ?*core_image.Image) *@This() {
        return objc.msgSend(self, "imageRepWithCIImage:", *@This(), .{image});
    }

    pub fn initWithCIImage(self: *@This(), image: ?*core_image.Image) *@This() {
        return objc.msgSend(self, "initWithCIImage:", *@This(), .{image});
    }

    pub fn CIImage(self: *@This()) ?*core_image.Image {
        return objc.msgSend(self, "CIImage", ?*core_image.Image, .{});
    }

};

pub const ColorPanelMode = enum(objc.NSInteger) {
    None = -1,
    Gray = 0,
    RGB = 1,
    CMYK = 2,
    HSB = 3,
    CustomPalette = 4,
    ColorList = 5,
    Wheel = 6,
    Crayon = 7,
};

pub const ColorPanelOptions = enum(objc.NSUInteger) {
    GrayModeMask = 1,
    RGBModeMask = 2,
    CMYKModeMask = 4,
    HSBModeMask = 8,
    CustomPaletteModeMask = 16,
    ColorListModeMask = 32,
    WheelModeMask = 64,
    CrayonModeMask = 128,
    AllModesMask = 65535,
};

/// https://developer.apple.com/documentation/AppKit/NSColorPanel?language=objc
pub const ColorPanel = opaque {
    pub const InternalInfo = objc.ExternalClass("NSColorPanel", @This(), Panel, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn dragColorWithEventFromView(self: *@This(), color: ?*Color, event: ?*Event, sourceView: ?*View) objc.BOOL {
        return objc.msgSend(self, "dragColor:withEvent:fromView:", objc.BOOL, .{color, event, sourceView});
    }

    pub fn setPickerMask(self: *@This(), mask: ColorPanelOptions) void {
        return objc.msgSend(self, "setPickerMask:", void, .{mask});
    }

    pub fn setPickerMode(self: *@This(), mode: ColorPanelMode) void {
        return objc.msgSend(self, "setPickerMode:", void, .{mode});
    }

    pub fn setAction(self: *@This(), selector: *objc.SEL) void {
        return objc.msgSend(self, "setAction:", void, .{selector});
    }

    pub fn setTarget(self: *@This(), target: *objc.Id) void {
        return objc.msgSend(self, "setTarget:", void, .{target});
    }

    pub fn attachColorList(self: *@This(), colorList: ?*ColorList) void {
        return objc.msgSend(self, "attachColorList:", void, .{colorList});
    }

    pub fn detachColorList(self: *@This(), colorList: ?*ColorList) void {
        return objc.msgSend(self, "detachColorList:", void, .{colorList});
    }

    pub fn sharedColorPanel(self: *@This()) ?*ColorPanel {
        return objc.msgSend(self, "sharedColorPanel", ?*ColorPanel, .{});
    }

    pub fn sharedColorPanelExists(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "sharedColorPanelExists", objc.BOOL, .{});
    }

    pub fn accessoryView(self: *@This()) ?*View {
        return objc.msgSend(self, "accessoryView", ?*View, .{});
    }

    pub fn setAccessoryView(self: *@This(), accessoryView: ?*View) void {
        return objc.msgSend(self, "setAccessoryView:", void, .{accessoryView});
    }

    pub fn isContinuous(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isContinuous", objc.BOOL, .{});
    }

    pub fn setContinuous(self: *@This(), continuous: objc.BOOL) void {
        return objc.msgSend(self, "setContinuous:", void, .{continuous});
    }

    pub fn showsAlpha(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "showsAlpha", objc.BOOL, .{});
    }

    pub fn setShowsAlpha(self: *@This(), showsAlpha: objc.BOOL) void {
        return objc.msgSend(self, "setShowsAlpha:", void, .{showsAlpha});
    }

    pub fn mode(self: *@This()) ColorPanelMode {
        return objc.msgSend(self, "mode", ColorPanelMode, .{});
    }

    pub fn setMode(self: *@This(), mode: ColorPanelMode) void {
        return objc.msgSend(self, "setMode:", void, .{mode});
    }

    pub fn color(self: *@This()) ?*Color {
        return objc.msgSend(self, "color", ?*Color, .{});
    }

    pub fn setColor(self: *@This(), color: ?*Color) void {
        return objc.msgSend(self, "setColor:", void, .{color});
    }

    pub fn alpha(self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(self, "alpha", core_foundation.CGFloat, .{});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSColorChanging?language=objc
pub const ColorChanging = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{objc.NSObject, });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn changeColor(self: *@This(), sender: ?*ColorPanel) void {
        return objc.msgSend(self, "changeColor:", void, .{sender});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSColorPickingDefault?language=objc
pub const ColorPickingDefault = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn initWithPickerMaskColorPanel(self: *@This(), mask: objc.NSUInteger, owningColorPanel: ?*ColorPanel) *@This() {
        return objc.msgSend(self, "initWithPickerMask:colorPanel:", *@This(), .{mask, owningColorPanel});
    }

    pub fn provideNewButtonImage(self: *@This()) ?*Image {
        return objc.msgSend(self, "provideNewButtonImage", ?*Image, .{});
    }

    pub fn insertNewButtonImageIn(self: *@This(), newButtonImage: ?*Image, buttonCell: ?*ButtonCell) void {
        return objc.msgSend(self, "insertNewButtonImage:in:", void, .{newButtonImage, buttonCell});
    }

    pub fn viewSizeChanged(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "viewSizeChanged:", void, .{sender});
    }

    pub fn alphaControlAddedOrRemoved(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "alphaControlAddedOrRemoved:", void, .{sender});
    }

    pub fn attachColorList(self: *@This(), colorList: ?*ColorList) void {
        return objc.msgSend(self, "attachColorList:", void, .{colorList});
    }

    pub fn detachColorList(self: *@This(), colorList: ?*ColorList) void {
        return objc.msgSend(self, "detachColorList:", void, .{colorList});
    }

    pub fn setMode(self: *@This(), mode: ColorPanelMode) void {
        return objc.msgSend(self, "setMode:", void, .{mode});
    }

    pub fn buttonToolTip(self: *@This()) ?*String {
        return objc.msgSend(self, "buttonToolTip", ?*String, .{});
    }

    pub fn minContentSize(self: *@This()) foundation.Size {
        return objc.msgSend(self, "minContentSize", foundation.Size, .{});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSColorPickingCustom?language=objc
pub const ColorPickingCustom = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{ColorPickingDefault, });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn supportsMode(self: *@This(), mode: ColorPanelMode) objc.BOOL {
        return objc.msgSend(self, "supportsMode:", objc.BOOL, .{mode});
    }

    pub fn currentMode(self: *@This()) ColorPanelMode {
        return objc.msgSend(self, "currentMode", ColorPanelMode, .{});
    }

    pub fn provideNewView(self: *@This(), initialRequest: objc.BOOL) ?*View {
        return objc.msgSend(self, "provideNewView:", ?*View, .{initialRequest});
    }

    pub fn setColor(self: *@This(), newColor: ?*Color) void {
        return objc.msgSend(self, "setColor:", void, .{newColor});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSColorPicker?language=objc
pub const ColorPicker = opaque {
    pub const InternalInfo = objc.ExternalClass("NSColorPicker", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn initWithPickerMaskColorPanel(self: *@This(), mask: objc.NSUInteger, owningColorPanel: ?*ColorPanel) *@This() {
        return objc.msgSend(self, "initWithPickerMask:colorPanel:", *@This(), .{mask, owningColorPanel});
    }

    pub fn insertNewButtonImageIn(self: *@This(), newButtonImage: ?*Image, buttonCell: ?*ButtonCell) void {
        return objc.msgSend(self, "insertNewButtonImage:in:", void, .{newButtonImage, buttonCell});
    }

    pub fn viewSizeChanged(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "viewSizeChanged:", void, .{sender});
    }

    pub fn attachColorList(self: *@This(), colorList: ?*ColorList) void {
        return objc.msgSend(self, "attachColorList:", void, .{colorList});
    }

    pub fn detachColorList(self: *@This(), colorList: ?*ColorList) void {
        return objc.msgSend(self, "detachColorList:", void, .{colorList});
    }

    pub fn setMode(self: *@This(), mode: ColorPanelMode) void {
        return objc.msgSend(self, "setMode:", void, .{mode});
    }

    pub fn colorPanel(self: *@This()) ?*ColorPanel {
        return objc.msgSend(self, "colorPanel", ?*ColorPanel, .{});
    }

    pub fn provideNewButtonImage(self: *@This()) ?*Image {
        return objc.msgSend(self, "provideNewButtonImage", ?*Image, .{});
    }

    pub fn buttonToolTip(self: *@This()) ?*String {
        return objc.msgSend(self, "buttonToolTip", ?*String, .{});
    }

    pub fn minContentSize(self: *@This()) foundation.Size {
        return objc.msgSend(self, "minContentSize", foundation.Size, .{});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSColorPickerTouchBarItem?language=objc
pub const ColorPickerTouchBarItem = opaque {
    pub const InternalInfo = objc.ExternalClass("NSColorPickerTouchBarItem", @This(), TouchBarItem, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn colorPickerWithIdentifier(self: *@This(), identifier: TouchBarItemIdentifier) *@This() {
        return objc.msgSend(self, "colorPickerWithIdentifier:", *@This(), .{identifier});
    }

    pub fn textColorPickerWithIdentifier(self: *@This(), identifier: TouchBarItemIdentifier) *@This() {
        return objc.msgSend(self, "textColorPickerWithIdentifier:", *@This(), .{identifier});
    }

    pub fn strokeColorPickerWithIdentifier(self: *@This(), identifier: TouchBarItemIdentifier) *@This() {
        return objc.msgSend(self, "strokeColorPickerWithIdentifier:", *@This(), .{identifier});
    }

    pub fn colorPickerWithIdentifierButtonImage(self: *@This(), identifier: TouchBarItemIdentifier, image: ?*Image) *@This() {
        return objc.msgSend(self, "colorPickerWithIdentifier:buttonImage:", *@This(), .{identifier, image});
    }

    pub fn color(self: *@This()) ?*Color {
        return objc.msgSend(self, "color", ?*Color, .{});
    }

    pub fn setColor(self: *@This(), color: ?*Color) void {
        return objc.msgSend(self, "setColor:", void, .{color});
    }

    pub fn showsAlpha(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "showsAlpha", objc.BOOL, .{});
    }

    pub fn setShowsAlpha(self: *@This(), showsAlpha: objc.BOOL) void {
        return objc.msgSend(self, "setShowsAlpha:", void, .{showsAlpha});
    }

    pub fn allowedColorSpaces(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "allowedColorSpaces", ?*anyopaque, .{});
    }

    pub fn setAllowedColorSpaces(self: *@This(), allowedColorSpaces: ?*anyopaque) void {
        return objc.msgSend(self, "setAllowedColorSpaces:", void, .{allowedColorSpaces});
    }

    pub fn colorList(self: *@This()) ?*ColorList {
        return objc.msgSend(self, "colorList", ?*ColorList, .{});
    }

    pub fn setColorList(self: *@This(), colorList: ?*ColorList) void {
        return objc.msgSend(self, "setColorList:", void, .{colorList});
    }

    pub fn customizationLabel(self: *@This()) ?*String {
        return objc.msgSend(self, "customizationLabel", ?*String, .{});
    }

    pub fn setCustomizationLabel(self: *@This(), customizationLabel: ?*String) void {
        return objc.msgSend(self, "setCustomizationLabel:", void, .{customizationLabel});
    }

    pub fn target(self: *@This()) *objc.Id {
        return objc.msgSend(self, "target", *objc.Id, .{});
    }

    pub fn setTarget(self: *@This(), target: *objc.Id) void {
        return objc.msgSend(self, "setTarget:", void, .{target});
    }

    pub fn action(self: *@This()) *objc.SEL {
        return objc.msgSend(self, "action", *objc.SEL, .{});
    }

    pub fn setAction(self: *@This(), action: *objc.SEL) void {
        return objc.msgSend(self, "setAction:", void, .{action});
    }

    pub fn isEnabled(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isEnabled", objc.BOOL, .{});
    }

    pub fn setEnabled(self: *@This(), enabled: objc.BOOL) void {
        return objc.msgSend(self, "setEnabled:", void, .{enabled});
    }

};

pub const ColorWellStyle = enum(objc.NSInteger) {
    Default = 0,
    Minimal = 1,
    Expanded = 2,
};

/// https://developer.apple.com/documentation/AppKit/NSColorWell?language=objc
pub const ColorWell = opaque {
    pub const InternalInfo = objc.ExternalClass("NSColorWell", @This(), Control, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn colorWellWithStyle(self: *@This(), style: ColorWellStyle) *@This() {
        return objc.msgSend(self, "colorWellWithStyle:", *@This(), .{style});
    }

    pub fn deactivate(self: *@This()) void {
        return objc.msgSend(self, "deactivate", void, .{});
    }

    pub fn activate(self: *@This(), exclusive: objc.BOOL) void {
        return objc.msgSend(self, "activate:", void, .{exclusive});
    }

    pub fn drawWellInside(self: *@This(), insideRect: foundation.Rect) void {
        return objc.msgSend(self, "drawWellInside:", void, .{insideRect});
    }

    pub fn takeColorFrom(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "takeColorFrom:", void, .{sender});
    }

    pub fn isActive(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isActive", objc.BOOL, .{});
    }

    pub fn isBordered(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isBordered", objc.BOOL, .{});
    }

    pub fn setBordered(self: *@This(), bordered: objc.BOOL) void {
        return objc.msgSend(self, "setBordered:", void, .{bordered});
    }

    pub fn color(self: *@This()) ?*Color {
        return objc.msgSend(self, "color", ?*Color, .{});
    }

    pub fn setColor(self: *@This(), color: ?*Color) void {
        return objc.msgSend(self, "setColor:", void, .{color});
    }

    pub fn colorWellStyle(self: *@This()) ColorWellStyle {
        return objc.msgSend(self, "colorWellStyle", ColorWellStyle, .{});
    }

    pub fn setColorWellStyle(self: *@This(), colorWellStyle: ColorWellStyle) void {
        return objc.msgSend(self, "setColorWellStyle:", void, .{colorWellStyle});
    }

    pub fn image(self: *@This()) ?*Image {
        return objc.msgSend(self, "image", ?*Image, .{});
    }

    pub fn setImage(self: *@This(), image: ?*Image) void {
        return objc.msgSend(self, "setImage:", void, .{image});
    }

    pub fn pulldownTarget(self: *@This()) *objc.Id {
        return objc.msgSend(self, "pulldownTarget", *objc.Id, .{});
    }

    pub fn setPulldownTarget(self: *@This(), pulldownTarget: *objc.Id) void {
        return objc.msgSend(self, "setPulldownTarget:", void, .{pulldownTarget});
    }

    pub fn pulldownAction(self: *@This()) *objc.SEL {
        return objc.msgSend(self, "pulldownAction", *objc.SEL, .{});
    }

    pub fn setPulldownAction(self: *@This(), pulldownAction: *objc.SEL) void {
        return objc.msgSend(self, "setPulldownAction:", void, .{pulldownAction});
    }

    pub fn supportsAlpha(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "supportsAlpha", objc.BOOL, .{});
    }

    pub fn setSupportsAlpha(self: *@This(), supportsAlpha: objc.BOOL) void {
        return objc.msgSend(self, "setSupportsAlpha:", void, .{supportsAlpha});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSCursor?language=objc
pub const Cursor = opaque {
    pub const InternalInfo = objc.ExternalClass("NSCursor", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn initWithImageHotSpot(self: *@This(), newImage: ?*Image, point: foundation.Point) *@This() {
        return objc.msgSend(self, "initWithImage:hotSpot:", *@This(), .{newImage, point});
    }

    pub fn initWithCoder(self: *@This(), coder: ?*foundation.Coder) *@This() {
        return objc.msgSend(self, "initWithCoder:", *@This(), .{coder});
    }

    pub fn image(self: *@This()) ?*Image {
        return objc.msgSend(self, "image", ?*Image, .{});
    }

    pub fn hotSpot(self: *@This()) foundation.Point {
        return objc.msgSend(self, "hotSpot", foundation.Point, .{});
    }

    pub fn hide(self: *@This()) void {
        return objc.msgSend(self, "hide", void, .{});
    }

    pub fn unhide(self: *@This()) void {
        return objc.msgSend(self, "unhide", void, .{});
    }

    pub fn setHiddenUntilMouseMoves(self: *@This(), flag: objc.BOOL) void {
        return objc.msgSend(self, "setHiddenUntilMouseMoves:", void, .{flag});
    }

    pub fn pop(self: *@This()) void {
        return objc.msgSend(self, "pop", void, .{});
    }

    pub fn pop(self: *@This()) void {
        return objc.msgSend(self, "pop", void, .{});
    }

    pub fn push(self: *@This()) void {
        return objc.msgSend(self, "push", void, .{});
    }

    pub fn set(self: *@This()) void {
        return objc.msgSend(self, "set", void, .{});
    }

    pub fn currentCursor(self: *@This()) ?*Cursor {
        return objc.msgSend(self, "currentCursor", ?*Cursor, .{});
    }

    pub fn arrowCursor(self: *@This()) ?*Cursor {
        return objc.msgSend(self, "arrowCursor", ?*Cursor, .{});
    }

    pub fn crosshairCursor(self: *@This()) ?*Cursor {
        return objc.msgSend(self, "crosshairCursor", ?*Cursor, .{});
    }

    pub fn disappearingItemCursor(self: *@This()) ?*Cursor {
        return objc.msgSend(self, "disappearingItemCursor", ?*Cursor, .{});
    }

    pub fn operationNotAllowedCursor(self: *@This()) ?*Cursor {
        return objc.msgSend(self, "operationNotAllowedCursor", ?*Cursor, .{});
    }

    pub fn dragLinkCursor(self: *@This()) ?*Cursor {
        return objc.msgSend(self, "dragLinkCursor", ?*Cursor, .{});
    }

    pub fn dragCopyCursor(self: *@This()) ?*Cursor {
        return objc.msgSend(self, "dragCopyCursor", ?*Cursor, .{});
    }

    pub fn contextualMenuCursor(self: *@This()) ?*Cursor {
        return objc.msgSend(self, "contextualMenuCursor", ?*Cursor, .{});
    }

    pub fn pointingHandCursor(self: *@This()) ?*Cursor {
        return objc.msgSend(self, "pointingHandCursor", ?*Cursor, .{});
    }

    pub fn closedHandCursor(self: *@This()) ?*Cursor {
        return objc.msgSend(self, "closedHandCursor", ?*Cursor, .{});
    }

    pub fn openHandCursor(self: *@This()) ?*Cursor {
        return objc.msgSend(self, "openHandCursor", ?*Cursor, .{});
    }

    pub fn IBeamCursor(self: *@This()) ?*Cursor {
        return objc.msgSend(self, "IBeamCursor", ?*Cursor, .{});
    }

    pub fn IBeamCursorForVerticalLayout(self: *@This()) ?*Cursor {
        return objc.msgSend(self, "IBeamCursorForVerticalLayout", ?*Cursor, .{});
    }

    pub fn zoomInCursor(self: *@This()) ?*Cursor {
        return objc.msgSend(self, "zoomInCursor", ?*Cursor, .{});
    }

    pub fn zoomOutCursor(self: *@This()) ?*Cursor {
        return objc.msgSend(self, "zoomOutCursor", ?*Cursor, .{});
    }

    pub fn columnResizeCursor(self: *@This()) ?*Cursor {
        return objc.msgSend(self, "columnResizeCursor", ?*Cursor, .{});
    }

    pub fn columnResizeCursorInDirections(self: *@This(), directions: HorizontalDirections) ?*Cursor {
        return objc.msgSend(self, "columnResizeCursorInDirections:", ?*Cursor, .{directions});
    }

    pub fn rowResizeCursor(self: *@This()) ?*Cursor {
        return objc.msgSend(self, "rowResizeCursor", ?*Cursor, .{});
    }

    pub fn rowResizeCursorInDirections(self: *@This(), directions: VerticalDirections) ?*Cursor {
        return objc.msgSend(self, "rowResizeCursorInDirections:", ?*Cursor, .{directions});
    }

    pub fn frameResizeCursorFromPositionInDirections(self: *@This(), position: CursorFrameResizePosition, directions: CursorFrameResizeDirections) ?*Cursor {
        return objc.msgSend(self, "frameResizeCursorFromPosition:inDirections:", ?*Cursor, .{position, directions});
    }

};

pub const CursorFrameResizePosition = CursorFrameResizePosition;

pub const CursorFrameResizePosition = enum(objc.NSUInteger) {
    Top = 1,
    Left = 2,
    Bottom = 4,
    Right = 8,
    TopLeft = 3,
    TopRight = 9,
    BottomLeft = 6,
    BottomRight = 12,
};

pub const CursorFrameResizeDirections = CursorFrameResizeDirections;

pub const CursorFrameResizeDirections = enum(objc.NSUInteger) {
    Inward = 1,
    Outward = 2,
    All = 3,
};

/// https://developer.apple.com/documentation/AppKit/NSCustomImageRep?language=objc
pub const CustomImageRep = opaque {
    pub const InternalInfo = objc.ExternalClass("NSCustomImageRep", @This(), ImageRep, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn initWithSizeFlippedDrawingHandler(self: *@This(), size: foundation.Size, drawingHandlerShouldBeCalledWithFlippedContext: objc.BOOL, drawingHandler: *const fn(foundation.Rect) callconv(.C) objc.BOOL) *@This() {
        return objc.msgSend(self, "initWithSize:flipped:drawingHandler:", *@This(), .{size, drawingHandlerShouldBeCalledWithFlippedContext, drawingHandler});
    }

    pub fn initWithDrawSelectorDelegate(self: *@This(), selector: *objc.SEL, delegate: *objc.Id) *@This() {
        return objc.msgSend(self, "initWithDrawSelector:delegate:", *@This(), .{selector, delegate});
    }

    pub fn drawingHandler(self: *@This()) *const fn(foundation.Rect) callconv(.C) objc.BOOL {
        return objc.msgSend(self, "drawingHandler", *const fn(foundation.Rect) callconv(.C) objc.BOOL, .{});
    }

    pub fn drawSelector(self: *@This()) *objc.SEL {
        return objc.msgSend(self, "drawSelector", *objc.SEL, .{});
    }

    pub fn delegate(self: *@This()) *objc.Id {
        return objc.msgSend(self, "delegate", *objc.Id, .{});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSCustomTouchBarItem?language=objc
pub const CustomTouchBarItem = opaque {
    pub const InternalInfo = objc.ExternalClass("NSCustomTouchBarItem", @This(), TouchBarItem, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn view(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "view", ?*anyopaque, .{});
    }

    pub fn setView(self: *@This(), view: ?*anyopaque) void {
        return objc.msgSend(self, "setView:", void, .{view});
    }

    pub fn viewController(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "viewController", ?*anyopaque, .{});
    }

    pub fn setViewController(self: *@This(), viewController: ?*anyopaque) void {
        return objc.msgSend(self, "setViewController:", void, .{viewController});
    }

    pub fn customizationLabel(self: *@This()) ?*String {
        return objc.msgSend(self, "customizationLabel", ?*String, .{});
    }

    pub fn setCustomizationLabel(self: *@This(), customizationLabel: ?*String) void {
        return objc.msgSend(self, "setCustomizationLabel:", void, .{customizationLabel});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSDocumentController?language=objc
pub const DocumentController = opaque {
    pub const InternalInfo = objc.ExternalClass("NSDocumentController", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn init(self: *@This()) *@This() {
        return objc.msgSend(self, "init", *@This(), .{});
    }

    pub fn initWithCoder(self: *@This(), coder: ?*foundation.Coder) *@This() {
        return objc.msgSend(self, "initWithCoder:", *@This(), .{coder});
    }

    pub fn documentForURL(self: *@This(), url: ?*URL) ?*anyopaque {
        return objc.msgSend(self, "documentForURL:", ?*anyopaque, .{url});
    }

    pub fn documentForWindow(self: *@This(), window: ?*Window) ?*anyopaque {
        return objc.msgSend(self, "documentForWindow:", ?*anyopaque, .{window});
    }

    pub fn addDocument(self: *@This(), document: ?*Document) void {
        return objc.msgSend(self, "addDocument:", void, .{document});
    }

    pub fn removeDocument(self: *@This(), document: ?*Document) void {
        return objc.msgSend(self, "removeDocument:", void, .{document});
    }

    pub fn newDocument(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "newDocument:", void, .{sender});
    }

    pub fn openUntitledDocumentAndDisplayError(self: *@This(), displayDocument: objc.BOOL, outError: ?*?*Error) ?*anyopaque {
        return objc.msgSend(self, "openUntitledDocumentAndDisplay:error:", ?*anyopaque, .{displayDocument, outError});
    }

    pub fn makeUntitledDocumentOfTypeError(self: *@This(), typeName: ?*String, outError: ?*?*Error) ?*anyopaque {
        return objc.msgSend(self, "makeUntitledDocumentOfType:error:", ?*anyopaque, .{typeName, outError});
    }

    pub fn openDocument(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "openDocument:", void, .{sender});
    }

    pub fn URLsFromRunningOpenPanel(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "URLsFromRunningOpenPanel", ?*anyopaque, .{});
    }

    pub fn runModalOpenPanelForTypes(self: *@This(), openPanel: ?*OpenPanel, types: ?*anyopaque) objc.NSInteger {
        return objc.msgSend(self, "runModalOpenPanel:forTypes:", objc.NSInteger, .{openPanel, types});
    }

    pub fn beginOpenPanelWithCompletionHandler(self: *@This(), completionHandler: *const fn(?*anyopaque) callconv(.C) void) void {
        return objc.msgSend(self, "beginOpenPanelWithCompletionHandler:", void, .{completionHandler});
    }

    pub fn beginOpenPanelForTypesCompletionHandler(self: *@This(), openPanel: ?*OpenPanel, inTypes: ?*anyopaque, completionHandler: *const fn(objc.NSInteger) callconv(.C) void) void {
        return objc.msgSend(self, "beginOpenPanel:forTypes:completionHandler:", void, .{openPanel, inTypes, completionHandler});
    }

    pub fn openDocumentWithContentsOfURLDisplayCompletionHandler(self: *@This(), url: ?*URL, displayDocument: objc.BOOL, completionHandler: *const fn(?*Document, objc.BOOL, ?*Error) callconv(.C) void) void {
        return objc.msgSend(self, "openDocumentWithContentsOfURL:display:completionHandler:", void, .{url, displayDocument, completionHandler});
    }

    pub fn makeDocumentWithContentsOfURLOfTypeError(self: *@This(), url: ?*URL, typeName: ?*String, outError: ?*?*Error) ?*anyopaque {
        return objc.msgSend(self, "makeDocumentWithContentsOfURL:ofType:error:", ?*anyopaque, .{url, typeName, outError});
    }

    pub fn reopenDocumentForURLWithContentsOfURLDisplayCompletionHandler(self: *@This(), urlOrNil: ?*URL, contentsURL: ?*URL, displayDocument: objc.BOOL, completionHandler: *const fn(?*Document, objc.BOOL, ?*Error) callconv(.C) void, ) void {
        return objc.msgSend(self, "reopenDocumentForURL:withContentsOfURL:display:completionHandler:", void, .{urlOrNil, contentsURL, displayDocument, completionHandler, });
    }

    pub fn makeDocumentForURLWithContentsOfURLOfTypeError(self: *@This(), urlOrNil: ?*URL, contentsURL: ?*URL, typeName: ?*String, outError: ?*?*Error, ) ?*anyopaque {
        return objc.msgSend(self, "makeDocumentForURL:withContentsOfURL:ofType:error:", ?*anyopaque, .{urlOrNil, contentsURL, typeName, outError, });
    }

    pub fn saveAllDocuments(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "saveAllDocuments:", void, .{sender});
    }

    pub fn reviewUnsavedDocumentsWithAlertTitleCancellableDelegateDidReviewAllSelectorContextInfo(self: *@This(), title: ?*String, cancellable: objc.BOOL, delegate: *objc.Id, didReviewAllSelector: *objc.SEL, contextInfo: ?*anyopaque, ) void {
        return objc.msgSend(self, "reviewUnsavedDocumentsWithAlertTitle:cancellable:delegate:didReviewAllSelector:contextInfo:", void, .{title, cancellable, delegate, didReviewAllSelector, contextInfo, });
    }

    pub fn closeAllDocumentsWithDelegateDidCloseAllSelectorContextInfo(self: *@This(), delegate: *objc.Id, didCloseAllSelector: *objc.SEL, contextInfo: ?*anyopaque) void {
        return objc.msgSend(self, "closeAllDocumentsWithDelegate:didCloseAllSelector:contextInfo:", void, .{delegate, didCloseAllSelector, contextInfo});
    }

    pub fn duplicateDocumentWithContentsOfURLCopyingDisplayNameError(self: *@This(), url: ?*URL, duplicateByCopying: objc.BOOL, displayNameOrNil: ?*String, outError: ?*?*Error, ) ?*anyopaque {
        return objc.msgSend(self, "duplicateDocumentWithContentsOfURL:copying:displayName:error:", ?*anyopaque, .{url, duplicateByCopying, displayNameOrNil, outError, });
    }

    pub fn standardShareMenuItem(self: *@This()) ?*MenuItem {
        return objc.msgSend(self, "standardShareMenuItem", ?*MenuItem, .{});
    }

    pub fn presentErrorModalForWindowDelegateDidPresentSelectorContextInfo(self: *@This(), @"error": ?*Error, window: ?*Window, delegate: *objc.Id, didPresentSelector: *objc.SEL, contextInfo: ?*anyopaque, ) void {
        return objc.msgSend(self, "presentError:modalForWindow:delegate:didPresentSelector:contextInfo:", void, .{@"error", window, delegate, didPresentSelector, contextInfo, });
    }

    pub fn presentError(self: *@This(), @"error": ?*Error) objc.BOOL {
        return objc.msgSend(self, "presentError:", objc.BOOL, .{@"error"});
    }

    pub fn willPresentError(self: *@This(), @"error": ?*Error) ?*Error {
        return objc.msgSend(self, "willPresentError:", ?*Error, .{@"error"});
    }

    pub fn clearRecentDocuments(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "clearRecentDocuments:", void, .{sender});
    }

    pub fn noteNewRecentDocument(self: *@This(), document: ?*Document) void {
        return objc.msgSend(self, "noteNewRecentDocument:", void, .{document});
    }

    pub fn noteNewRecentDocumentURL(self: *@This(), url: ?*URL) void {
        return objc.msgSend(self, "noteNewRecentDocumentURL:", void, .{url});
    }

    pub fn typeForContentsOfURLError(self: *@This(), url: ?*URL, outError: ?*?*Error) ?*String {
        return objc.msgSend(self, "typeForContentsOfURL:error:", ?*String, .{url, outError});
    }

    pub fn documentClassForType(self: *@This(), typeName: ?*String) *objc.Class {
        return objc.msgSend(self, "documentClassForType:", *objc.Class, .{typeName});
    }

    pub fn displayNameForType(self: *@This(), typeName: ?*String) ?*String {
        return objc.msgSend(self, "displayNameForType:", ?*String, .{typeName});
    }

    pub fn validateUserInterfaceItem(self: *@This(), item: ?*anyopaque) objc.BOOL {
        return objc.msgSend(self, "validateUserInterfaceItem:", objc.BOOL, .{item});
    }

    pub fn sharedDocumentController(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "sharedDocumentController", ?*anyopaque, .{});
    }

    pub fn documents(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "documents", ?*anyopaque, .{});
    }

    pub fn currentDocument(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "currentDocument", ?*anyopaque, .{});
    }

    pub fn currentDirectory(self: *@This()) ?*String {
        return objc.msgSend(self, "currentDirectory", ?*String, .{});
    }

    pub fn autosavingDelay(self: *@This()) foundation.TimeInterval {
        return objc.msgSend(self, "autosavingDelay", foundation.TimeInterval, .{});
    }

    pub fn setAutosavingDelay(self: *@This(), autosavingDelay: foundation.TimeInterval) void {
        return objc.msgSend(self, "setAutosavingDelay:", void, .{autosavingDelay});
    }

    pub fn hasEditedDocuments(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "hasEditedDocuments", objc.BOOL, .{});
    }

    pub fn allowsAutomaticShareMenu(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "allowsAutomaticShareMenu", objc.BOOL, .{});
    }

    pub fn maximumRecentDocumentCount(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "maximumRecentDocumentCount", objc.NSUInteger, .{});
    }

    pub fn recentDocumentURLs(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "recentDocumentURLs", ?*anyopaque, .{});
    }

    pub fn defaultType(self: *@This()) ?*String {
        return objc.msgSend(self, "defaultType", ?*String, .{});
    }

    pub fn documentClassNames(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "documentClassNames", ?*anyopaque, .{});
    }

};

pub const DraggingImageComponentKey = ?*String;

/// https://developer.apple.com/documentation/AppKit/NSDraggingImageComponent?language=objc
pub const DraggingImageComponent = opaque {
    pub const InternalInfo = objc.ExternalClass("NSDraggingImageComponent", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn draggingImageComponentWithKey(self: *@This(), key: DraggingImageComponentKey) ?*DraggingImageComponent {
        return objc.msgSend(self, "draggingImageComponentWithKey:", ?*DraggingImageComponent, .{key});
    }

    pub fn initWithKey(self: *@This(), key: DraggingImageComponentKey) *@This() {
        return objc.msgSend(self, "initWithKey:", *@This(), .{key});
    }

    pub fn init(self: *@This()) *@This() {
        return objc.msgSend(self, "init", *@This(), .{});
    }

    pub fn key(self: *@This()) DraggingImageComponentKey {
        return objc.msgSend(self, "key", DraggingImageComponentKey, .{});
    }

    pub fn setKey(self: *@This(), key: DraggingImageComponentKey) void {
        return objc.msgSend(self, "setKey:", void, .{key});
    }

    pub fn contents(self: *@This()) *objc.Id {
        return objc.msgSend(self, "contents", *objc.Id, .{});
    }

    pub fn setContents(self: *@This(), contents: *objc.Id) void {
        return objc.msgSend(self, "setContents:", void, .{contents});
    }

    pub fn frame(self: *@This()) foundation.Rect {
        return objc.msgSend(self, "frame", foundation.Rect, .{});
    }

    pub fn setFrame(self: *@This(), frame: foundation.Rect) void {
        return objc.msgSend(self, "setFrame:", void, .{frame});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSDraggingItem?language=objc
pub const DraggingItem = opaque {
    pub const InternalInfo = objc.ExternalClass("NSDraggingItem", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn initWithPasteboardWriter(self: *@This(), pasteboardWriter: ?*anyopaque) *@This() {
        return objc.msgSend(self, "initWithPasteboardWriter:", *@This(), .{pasteboardWriter});
    }

    pub fn init(self: *@This()) *@This() {
        return objc.msgSend(self, "init", *@This(), .{});
    }

    pub fn setDraggingFrameContents(self: *@This(), frame: foundation.Rect, contents: *objc.Id) void {
        return objc.msgSend(self, "setDraggingFrame:contents:", void, .{frame, contents});
    }

    pub fn item(self: *@This()) *objc.Id {
        return objc.msgSend(self, "item", *objc.Id, .{});
    }

    pub fn draggingFrame(self: *@This()) foundation.Rect {
        return objc.msgSend(self, "draggingFrame", foundation.Rect, .{});
    }

    pub fn setDraggingFrame(self: *@This(), draggingFrame: foundation.Rect) void {
        return objc.msgSend(self, "setDraggingFrame:", void, .{draggingFrame});
    }

    pub fn imageComponentsProvider(self: *@This()) *const fn() callconv(.C) ?*anyopaque {
        return objc.msgSend(self, "imageComponentsProvider", *const fn() callconv(.C) ?*anyopaque, .{});
    }

    pub fn setImageComponentsProvider(self: *@This(), imageComponentsProvider: *const fn() callconv(.C) ?*anyopaque) void {
        return objc.msgSend(self, "setImageComponentsProvider:", void, .{imageComponentsProvider});
    }

    pub fn imageComponents(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "imageComponents", ?*anyopaque, .{});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSDraggingSession?language=objc
pub const DraggingSession = opaque {
    pub const InternalInfo = objc.ExternalClass("NSDraggingSession", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn enumerateDraggingItemsWithOptionsForViewClassesSearchOptionsUsingBlock(self: *@This(), enumOpts: DraggingItemEnumerationOptions, view: ?*View, classArray: ?*anyopaque, searchOptions: ?*anyopaque, block: *const fn(?*DraggingItem, objc.NSInteger, ?*objc.BOOL) callconv(.C) void, ) void {
        return objc.msgSend(self, "enumerateDraggingItemsWithOptions:forView:classes:searchOptions:usingBlock:", void, .{enumOpts, view, classArray, searchOptions, block, });
    }

    pub fn draggingFormation(self: *@This()) DraggingFormation {
        return objc.msgSend(self, "draggingFormation", DraggingFormation, .{});
    }

    pub fn setDraggingFormation(self: *@This(), draggingFormation: DraggingFormation) void {
        return objc.msgSend(self, "setDraggingFormation:", void, .{draggingFormation});
    }

    pub fn animatesToStartingPositionsOnCancelOrFail(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "animatesToStartingPositionsOnCancelOrFail", objc.BOOL, .{});
    }

    pub fn setAnimatesToStartingPositionsOnCancelOrFail(self: *@This(), animatesToStartingPositionsOnCancelOrFail: objc.BOOL) void {
        return objc.msgSend(self, "setAnimatesToStartingPositionsOnCancelOrFail:", void, .{animatesToStartingPositionsOnCancelOrFail});
    }

    pub fn draggingLeaderIndex(self: *@This()) objc.NSInteger {
        return objc.msgSend(self, "draggingLeaderIndex", objc.NSInteger, .{});
    }

    pub fn setDraggingLeaderIndex(self: *@This(), draggingLeaderIndex: objc.NSInteger) void {
        return objc.msgSend(self, "setDraggingLeaderIndex:", void, .{draggingLeaderIndex});
    }

    pub fn draggingPasteboard(self: *@This()) ?*Pasteboard {
        return objc.msgSend(self, "draggingPasteboard", ?*Pasteboard, .{});
    }

    pub fn draggingSequenceNumber(self: *@This()) objc.NSInteger {
        return objc.msgSend(self, "draggingSequenceNumber", objc.NSInteger, .{});
    }

    pub fn draggingLocation(self: *@This()) foundation.Point {
        return objc.msgSend(self, "draggingLocation", foundation.Point, .{});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSFilePromiseProvider?language=objc
pub const FilePromiseProvider = opaque {
    pub const InternalInfo = objc.ExternalClass("NSFilePromiseProvider", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn initWithFileTypeDelegate(self: *@This(), fileType: ?*String, delegate: ?*anyopaque) *@This() {
        return objc.msgSend(self, "initWithFileType:delegate:", *@This(), .{fileType, delegate});
    }

    pub fn init(self: *@This()) *@This() {
        return objc.msgSend(self, "init", *@This(), .{});
    }

    pub fn fileType(self: *@This()) ?*String {
        return objc.msgSend(self, "fileType", ?*String, .{});
    }

    pub fn setFileType(self: *@This(), fileType: ?*String) void {
        return objc.msgSend(self, "setFileType:", void, .{fileType});
    }

    pub fn delegate(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "delegate", ?*anyopaque, .{});
    }

    pub fn setDelegate(self: *@This(), delegate: ?*anyopaque) void {
        return objc.msgSend(self, "setDelegate:", void, .{delegate});
    }

    pub fn userInfo(self: *@This()) *objc.Id {
        return objc.msgSend(self, "userInfo", *objc.Id, .{});
    }

    pub fn setUserInfo(self: *@This(), userInfo: *objc.Id) void {
        return objc.msgSend(self, "setUserInfo:", void, .{userInfo});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSFilePromiseProviderDelegate?language=objc
pub const FilePromiseProviderDelegate = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{objc.NSObject, });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn filePromiseProviderFileNameForType(self: *@This(), filePromiseProvider: ?*FilePromiseProvider, fileType: ?*String) ?*String {
        return objc.msgSend(self, "filePromiseProvider:fileNameForType:", ?*String, .{filePromiseProvider, fileType});
    }

    pub fn filePromiseProviderWritePromiseToURLCompletionHandler(self: *@This(), filePromiseProvider: ?*FilePromiseProvider, url: ?*URL, completionHandler: *const fn(?*Error) callconv(.C) void) void {
        return objc.msgSend(self, "filePromiseProvider:writePromiseToURL:completionHandler:", void, .{filePromiseProvider, url, completionHandler});
    }

    pub fn operationQueueForFilePromiseProvider(self: *@This(), filePromiseProvider: ?*FilePromiseProvider) ?*OperationQueue {
        return objc.msgSend(self, "operationQueueForFilePromiseProvider:", ?*OperationQueue, .{filePromiseProvider});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSFilePromiseReceiver?language=objc
pub const FilePromiseReceiver = opaque {
    pub const InternalInfo = objc.ExternalClass("NSFilePromiseReceiver", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn receivePromisedFilesAtDestinationOptionsOperationQueueReader(self: *@This(), destinationDir: ?*URL, options: ?*Dictionary, operationQueue: ?*OperationQueue, reader: *const fn(?*URL, ?*Error) callconv(.C) void, ) void {
        return objc.msgSend(self, "receivePromisedFilesAtDestination:options:operationQueue:reader:", void, .{destinationDir, options, operationQueue, reader, });
    }

    pub fn readableDraggedTypes(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "readableDraggedTypes", ?*anyopaque, .{});
    }

    pub fn fileTypes(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "fileTypes", ?*anyopaque, .{});
    }

    pub fn fileNames(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "fileNames", ?*anyopaque, .{});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSEPSImageRep?language=objc
pub const EPSImageRep = opaque {
    pub const InternalInfo = objc.ExternalClass("NSEPSImageRep", @This(), ImageRep, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn imageRepWithData(self: *@This(), epsData: ?*Data) *@This() {
        return objc.msgSend(self, "imageRepWithData:", *@This(), .{epsData});
    }

    pub fn initWithData(self: *@This(), epsData: ?*Data) *@This() {
        return objc.msgSend(self, "initWithData:", *@This(), .{epsData});
    }

    pub fn prepareGState(self: *@This()) void {
        return objc.msgSend(self, "prepareGState", void, .{});
    }

    pub fn boundingBox(self: *@This()) foundation.Rect {
        return objc.msgSend(self, "boundingBox", foundation.Rect, .{});
    }

    pub fn EPSRepresentation(self: *@This()) ?*Data {
        return objc.msgSend(self, "EPSRepresentation", ?*Data, .{});
    }

};

pub const GradientDrawingOptions = enum(objc.NSUInteger) {
    DrawsBeforeStartingLocation = 1,
    DrawsAfterEndingLocation = 2,
};

/// https://developer.apple.com/documentation/AppKit/NSGradient?language=objc
pub const Gradient = opaque {
    pub const InternalInfo = objc.ExternalClass("NSGradient", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn initWithStartingColorEndingColor(self: *@This(), startingColor: ?*Color, endingColor: ?*Color) *@This() {
        return objc.msgSend(self, "initWithStartingColor:endingColor:", *@This(), .{startingColor, endingColor});
    }

    pub fn initWithColors(self: *@This(), colorArray: ?*anyopaque) *@This() {
        return objc.msgSend(self, "initWithColors:", *@This(), .{colorArray});
    }

    pub fn initWithColorsAndLocations(self: *@This(), firstColor: ?*Color) *@This() {
        return objc.msgSend(self, "initWithColorsAndLocations:", *@This(), .{firstColor});
    }

    pub fn initWithColorsAtLocationsColorSpace(self: *@This(), colorArray: ?*anyopaque, locations: ?*core_foundation.CGFloat, colorSpace: ?*ColorSpace) *@This() {
        return objc.msgSend(self, "initWithColors:atLocations:colorSpace:", *@This(), .{colorArray, locations, colorSpace});
    }

    pub fn initWithCoder(self: *@This(), coder: ?*foundation.Coder) *@This() {
        return objc.msgSend(self, "initWithCoder:", *@This(), .{coder});
    }

    pub fn drawFromPointToPointOptions(self: *@This(), startingPoint: foundation.Point, endingPoint: foundation.Point, options: GradientDrawingOptions) void {
        return objc.msgSend(self, "drawFromPoint:toPoint:options:", void, .{startingPoint, endingPoint, options});
    }

    pub fn drawInRectAngle(self: *@This(), rect: foundation.Rect, angle: core_foundation.CGFloat) void {
        return objc.msgSend(self, "drawInRect:angle:", void, .{rect, angle});
    }

    pub fn drawInBezierPathAngle(self: *@This(), path: ?*BezierPath, angle: core_foundation.CGFloat) void {
        return objc.msgSend(self, "drawInBezierPath:angle:", void, .{path, angle});
    }

    pub fn drawFromCenterRadiusToCenterRadiusOptions(self: *@This(), startCenter: foundation.Point, startRadius: core_foundation.CGFloat, endCenter: foundation.Point, endRadius: core_foundation.CGFloat, options: GradientDrawingOptions, ) void {
        return objc.msgSend(self, "drawFromCenter:radius:toCenter:radius:options:", void, .{startCenter, startRadius, endCenter, endRadius, options, });
    }

    pub fn drawInRectRelativeCenterPosition(self: *@This(), rect: foundation.Rect, relativeCenterPosition: foundation.Point) void {
        return objc.msgSend(self, "drawInRect:relativeCenterPosition:", void, .{rect, relativeCenterPosition});
    }

    pub fn drawInBezierPathRelativeCenterPosition(self: *@This(), path: ?*BezierPath, relativeCenterPosition: foundation.Point) void {
        return objc.msgSend(self, "drawInBezierPath:relativeCenterPosition:", void, .{path, relativeCenterPosition});
    }

    pub fn getColorLocationAtIndex(self: *@This(), color: ?*?*Color, location: ?*core_foundation.CGFloat, index: objc.NSInteger) void {
        return objc.msgSend(self, "getColor:location:atIndex:", void, .{color, location, index});
    }

    pub fn interpolatedColorAtLocation(self: *@This(), location: core_foundation.CGFloat) ?*Color {
        return objc.msgSend(self, "interpolatedColorAtLocation:", ?*Color, .{location});
    }

    pub fn colorSpace(self: *@This()) ?*ColorSpace {
        return objc.msgSend(self, "colorSpace", ?*ColorSpace, .{});
    }

    pub fn numberOfColorStops(self: *@This()) objc.NSInteger {
        return objc.msgSend(self, "numberOfColorStops", objc.NSInteger, .{});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSGroupTouchBarItem?language=objc
pub const GroupTouchBarItem = opaque {
    pub const InternalInfo = objc.ExternalClass("NSGroupTouchBarItem", @This(), TouchBarItem, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn groupItemWithIdentifierItems(self: *@This(), identifier: TouchBarItemIdentifier, items: ?*anyopaque) *@This() {
        return objc.msgSend(self, "groupItemWithIdentifier:items:", *@This(), .{identifier, items});
    }

    pub fn groupItemWithIdentifierItemsAllowedCompressionOptions(self: *@This(), identifier: TouchBarItemIdentifier, items: ?*anyopaque, allowedCompressionOptions: ?*UserInterfaceCompressionOptions) *@This() {
        return objc.msgSend(self, "groupItemWithIdentifier:items:allowedCompressionOptions:", *@This(), .{identifier, items, allowedCompressionOptions});
    }

    pub fn alertStyleGroupItemWithIdentifier(self: *@This(), identifier: TouchBarItemIdentifier) *@This() {
        return objc.msgSend(self, "alertStyleGroupItemWithIdentifier:", *@This(), .{identifier});
    }

    pub fn groupTouchBar(self: *@This()) ?*TouchBar {
        return objc.msgSend(self, "groupTouchBar", ?*TouchBar, .{});
    }

    pub fn setGroupTouchBar(self: *@This(), groupTouchBar: ?*TouchBar) void {
        return objc.msgSend(self, "setGroupTouchBar:", void, .{groupTouchBar});
    }

    pub fn customizationLabel(self: *@This()) ?*String {
        return objc.msgSend(self, "customizationLabel", ?*String, .{});
    }

    pub fn setCustomizationLabel(self: *@This(), customizationLabel: ?*String) void {
        return objc.msgSend(self, "setCustomizationLabel:", void, .{customizationLabel});
    }

    pub fn groupUserInterfaceLayoutDirection(self: *@This()) UserInterfaceLayoutDirection {
        return objc.msgSend(self, "groupUserInterfaceLayoutDirection", UserInterfaceLayoutDirection, .{});
    }

    pub fn setGroupUserInterfaceLayoutDirection(self: *@This(), groupUserInterfaceLayoutDirection: UserInterfaceLayoutDirection) void {
        return objc.msgSend(self, "setGroupUserInterfaceLayoutDirection:", void, .{groupUserInterfaceLayoutDirection});
    }

    pub fn prefersEqualWidths(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "prefersEqualWidths", objc.BOOL, .{});
    }

    pub fn setPrefersEqualWidths(self: *@This(), prefersEqualWidths: objc.BOOL) void {
        return objc.msgSend(self, "setPrefersEqualWidths:", void, .{prefersEqualWidths});
    }

    pub fn preferredItemWidth(self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(self, "preferredItemWidth", core_foundation.CGFloat, .{});
    }

    pub fn setPreferredItemWidth(self: *@This(), preferredItemWidth: core_foundation.CGFloat) void {
        return objc.msgSend(self, "setPreferredItemWidth:", void, .{preferredItemWidth});
    }

    pub fn effectiveCompressionOptions(self: *@This()) ?*UserInterfaceCompressionOptions {
        return objc.msgSend(self, "effectiveCompressionOptions", ?*UserInterfaceCompressionOptions, .{});
    }

    pub fn prioritizedCompressionOptions(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "prioritizedCompressionOptions", ?*anyopaque, .{});
    }

    pub fn setPrioritizedCompressionOptions(self: *@This(), prioritizedCompressionOptions: ?*anyopaque) void {
        return objc.msgSend(self, "setPrioritizedCompressionOptions:", void, .{prioritizedCompressionOptions});
    }

};

pub const GestureRecognizerState = enum(objc.NSInteger) {
    Possible = 0,
    Began = 1,
    Changed = 2,
    Ended = 3,
    Cancelled = 4,
    Failed = 5,
    Recognized = 3,
};

/// https://developer.apple.com/documentation/AppKit/NSGestureRecognizer?language=objc
pub const GestureRecognizer = opaque {
    pub const InternalInfo = objc.ExternalClass("NSGestureRecognizer", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn initWithTargetAction(self: *@This(), target: *objc.Id, action: *objc.SEL) *@This() {
        return objc.msgSend(self, "initWithTarget:action:", *@This(), .{target, action});
    }

    pub fn initWithCoder(self: *@This(), coder: ?*foundation.Coder) *@This() {
        return objc.msgSend(self, "initWithCoder:", *@This(), .{coder});
    }

    pub fn locationInView(self: *@This(), view: ?*View) foundation.Point {
        return objc.msgSend(self, "locationInView:", foundation.Point, .{view});
    }

    pub fn target(self: *@This()) *objc.Id {
        return objc.msgSend(self, "target", *objc.Id, .{});
    }

    pub fn setTarget(self: *@This(), target: *objc.Id) void {
        return objc.msgSend(self, "setTarget:", void, .{target});
    }

    pub fn action(self: *@This()) *objc.SEL {
        return objc.msgSend(self, "action", *objc.SEL, .{});
    }

    pub fn setAction(self: *@This(), action: *objc.SEL) void {
        return objc.msgSend(self, "setAction:", void, .{action});
    }

    pub fn state(self: *@This()) GestureRecognizerState {
        return objc.msgSend(self, "state", GestureRecognizerState, .{});
    }

    pub fn delegate(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "delegate", ?*anyopaque, .{});
    }

    pub fn setDelegate(self: *@This(), delegate: ?*anyopaque) void {
        return objc.msgSend(self, "setDelegate:", void, .{delegate});
    }

    pub fn isEnabled(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isEnabled", objc.BOOL, .{});
    }

    pub fn setEnabled(self: *@This(), enabled: objc.BOOL) void {
        return objc.msgSend(self, "setEnabled:", void, .{enabled});
    }

    pub fn view(self: *@This()) ?*View {
        return objc.msgSend(self, "view", ?*View, .{});
    }

    pub fn pressureConfiguration(self: *@This()) ?*PressureConfiguration {
        return objc.msgSend(self, "pressureConfiguration", ?*PressureConfiguration, .{});
    }

    pub fn setPressureConfiguration(self: *@This(), pressureConfiguration: ?*PressureConfiguration) void {
        return objc.msgSend(self, "setPressureConfiguration:", void, .{pressureConfiguration});
    }

    pub fn delaysPrimaryMouseButtonEvents(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "delaysPrimaryMouseButtonEvents", objc.BOOL, .{});
    }

    pub fn setDelaysPrimaryMouseButtonEvents(self: *@This(), delaysPrimaryMouseButtonEvents: objc.BOOL) void {
        return objc.msgSend(self, "setDelaysPrimaryMouseButtonEvents:", void, .{delaysPrimaryMouseButtonEvents});
    }

    pub fn delaysSecondaryMouseButtonEvents(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "delaysSecondaryMouseButtonEvents", objc.BOOL, .{});
    }

    pub fn setDelaysSecondaryMouseButtonEvents(self: *@This(), delaysSecondaryMouseButtonEvents: objc.BOOL) void {
        return objc.msgSend(self, "setDelaysSecondaryMouseButtonEvents:", void, .{delaysSecondaryMouseButtonEvents});
    }

    pub fn delaysOtherMouseButtonEvents(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "delaysOtherMouseButtonEvents", objc.BOOL, .{});
    }

    pub fn setDelaysOtherMouseButtonEvents(self: *@This(), delaysOtherMouseButtonEvents: objc.BOOL) void {
        return objc.msgSend(self, "setDelaysOtherMouseButtonEvents:", void, .{delaysOtherMouseButtonEvents});
    }

    pub fn delaysKeyEvents(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "delaysKeyEvents", objc.BOOL, .{});
    }

    pub fn setDelaysKeyEvents(self: *@This(), delaysKeyEvents: objc.BOOL) void {
        return objc.msgSend(self, "setDelaysKeyEvents:", void, .{delaysKeyEvents});
    }

    pub fn delaysMagnificationEvents(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "delaysMagnificationEvents", objc.BOOL, .{});
    }

    pub fn setDelaysMagnificationEvents(self: *@This(), delaysMagnificationEvents: objc.BOOL) void {
        return objc.msgSend(self, "setDelaysMagnificationEvents:", void, .{delaysMagnificationEvents});
    }

    pub fn delaysRotationEvents(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "delaysRotationEvents", objc.BOOL, .{});
    }

    pub fn setDelaysRotationEvents(self: *@This(), delaysRotationEvents: objc.BOOL) void {
        return objc.msgSend(self, "setDelaysRotationEvents:", void, .{delaysRotationEvents});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSGestureRecognizerDelegate?language=objc
pub const GestureRecognizerDelegate = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{objc.NSObject, });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn gestureRecognizerShouldAttemptToRecognizeWithEvent(self: *@This(), gestureRecognizer: ?*GestureRecognizer, event: ?*Event) objc.BOOL {
        return objc.msgSend(self, "gestureRecognizer:shouldAttemptToRecognizeWithEvent:", objc.BOOL, .{gestureRecognizer, event});
    }

    pub fn gestureRecognizerShouldBegin(self: *@This(), gestureRecognizer: ?*GestureRecognizer) objc.BOOL {
        return objc.msgSend(self, "gestureRecognizerShouldBegin:", objc.BOOL, .{gestureRecognizer});
    }

    pub fn gestureRecognizerShouldRecognizeSimultaneouslyWithGestureRecognizer(self: *@This(), gestureRecognizer: ?*GestureRecognizer, otherGestureRecognizer: ?*GestureRecognizer) objc.BOOL {
        return objc.msgSend(self, "gestureRecognizer:shouldRecognizeSimultaneouslyWithGestureRecognizer:", objc.BOOL, .{gestureRecognizer, otherGestureRecognizer});
    }

    pub fn gestureRecognizerShouldRequireFailureOfGestureRecognizer(self: *@This(), gestureRecognizer: ?*GestureRecognizer, otherGestureRecognizer: ?*GestureRecognizer) objc.BOOL {
        return objc.msgSend(self, "gestureRecognizer:shouldRequireFailureOfGestureRecognizer:", objc.BOOL, .{gestureRecognizer, otherGestureRecognizer});
    }

    pub fn gestureRecognizerShouldBeRequiredToFailByGestureRecognizer(self: *@This(), gestureRecognizer: ?*GestureRecognizer, otherGestureRecognizer: ?*GestureRecognizer) objc.BOOL {
        return objc.msgSend(self, "gestureRecognizer:shouldBeRequiredToFailByGestureRecognizer:", objc.BOOL, .{gestureRecognizer, otherGestureRecognizer});
    }

    pub fn gestureRecognizerShouldReceiveTouch(self: *@This(), gestureRecognizer: ?*GestureRecognizer, touch: ?*Touch) objc.BOOL {
        return objc.msgSend(self, "gestureRecognizer:shouldReceiveTouch:", objc.BOOL, .{gestureRecognizer, touch});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSClickGestureRecognizer?language=objc
pub const ClickGestureRecognizer = opaque {
    pub const InternalInfo = objc.ExternalClass("NSClickGestureRecognizer", @This(), GestureRecognizer, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn buttonMask(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "buttonMask", objc.NSUInteger, .{});
    }

    pub fn setButtonMask(self: *@This(), buttonMask: objc.NSUInteger) void {
        return objc.msgSend(self, "setButtonMask:", void, .{buttonMask});
    }

    pub fn numberOfClicksRequired(self: *@This()) objc.NSInteger {
        return objc.msgSend(self, "numberOfClicksRequired", objc.NSInteger, .{});
    }

    pub fn setNumberOfClicksRequired(self: *@This(), numberOfClicksRequired: objc.NSInteger) void {
        return objc.msgSend(self, "setNumberOfClicksRequired:", void, .{numberOfClicksRequired});
    }

    pub fn numberOfTouchesRequired(self: *@This()) objc.NSInteger {
        return objc.msgSend(self, "numberOfTouchesRequired", objc.NSInteger, .{});
    }

    pub fn setNumberOfTouchesRequired(self: *@This(), numberOfTouchesRequired: objc.NSInteger) void {
        return objc.msgSend(self, "setNumberOfTouchesRequired:", void, .{numberOfTouchesRequired});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSPanGestureRecognizer?language=objc
pub const PanGestureRecognizer = opaque {
    pub const InternalInfo = objc.ExternalClass("NSPanGestureRecognizer", @This(), GestureRecognizer, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn translationInView(self: *@This(), view: ?*View) foundation.Point {
        return objc.msgSend(self, "translationInView:", foundation.Point, .{view});
    }

    pub fn setTranslationInView(self: *@This(), translation: foundation.Point, view: ?*View) void {
        return objc.msgSend(self, "setTranslation:inView:", void, .{translation, view});
    }

    pub fn velocityInView(self: *@This(), view: ?*View) foundation.Point {
        return objc.msgSend(self, "velocityInView:", foundation.Point, .{view});
    }

    pub fn buttonMask(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "buttonMask", objc.NSUInteger, .{});
    }

    pub fn setButtonMask(self: *@This(), buttonMask: objc.NSUInteger) void {
        return objc.msgSend(self, "setButtonMask:", void, .{buttonMask});
    }

    pub fn numberOfTouchesRequired(self: *@This()) objc.NSInteger {
        return objc.msgSend(self, "numberOfTouchesRequired", objc.NSInteger, .{});
    }

    pub fn setNumberOfTouchesRequired(self: *@This(), numberOfTouchesRequired: objc.NSInteger) void {
        return objc.msgSend(self, "setNumberOfTouchesRequired:", void, .{numberOfTouchesRequired});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSPressGestureRecognizer?language=objc
pub const PressGestureRecognizer = opaque {
    pub const InternalInfo = objc.ExternalClass("NSPressGestureRecognizer", @This(), GestureRecognizer, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn buttonMask(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "buttonMask", objc.NSUInteger, .{});
    }

    pub fn setButtonMask(self: *@This(), buttonMask: objc.NSUInteger) void {
        return objc.msgSend(self, "setButtonMask:", void, .{buttonMask});
    }

    pub fn minimumPressDuration(self: *@This()) foundation.TimeInterval {
        return objc.msgSend(self, "minimumPressDuration", foundation.TimeInterval, .{});
    }

    pub fn setMinimumPressDuration(self: *@This(), minimumPressDuration: foundation.TimeInterval) void {
        return objc.msgSend(self, "setMinimumPressDuration:", void, .{minimumPressDuration});
    }

    pub fn allowableMovement(self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(self, "allowableMovement", core_foundation.CGFloat, .{});
    }

    pub fn setAllowableMovement(self: *@This(), allowableMovement: core_foundation.CGFloat) void {
        return objc.msgSend(self, "setAllowableMovement:", void, .{allowableMovement});
    }

    pub fn numberOfTouchesRequired(self: *@This()) objc.NSInteger {
        return objc.msgSend(self, "numberOfTouchesRequired", objc.NSInteger, .{});
    }

    pub fn setNumberOfTouchesRequired(self: *@This(), numberOfTouchesRequired: objc.NSInteger) void {
        return objc.msgSend(self, "setNumberOfTouchesRequired:", void, .{numberOfTouchesRequired});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSMagnificationGestureRecognizer?language=objc
pub const MagnificationGestureRecognizer = opaque {
    pub const InternalInfo = objc.ExternalClass("NSMagnificationGestureRecognizer", @This(), GestureRecognizer, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn magnification(self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(self, "magnification", core_foundation.CGFloat, .{});
    }

    pub fn setMagnification(self: *@This(), magnification: core_foundation.CGFloat) void {
        return objc.msgSend(self, "setMagnification:", void, .{magnification});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSRotationGestureRecognizer?language=objc
pub const RotationGestureRecognizer = opaque {
    pub const InternalInfo = objc.ExternalClass("NSRotationGestureRecognizer", @This(), GestureRecognizer, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn rotation(self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(self, "rotation", core_foundation.CGFloat, .{});
    }

    pub fn setRotation(self: *@This(), rotation: core_foundation.CGFloat) void {
        return objc.msgSend(self, "setRotation:", void, .{rotation});
    }

    pub fn rotationInDegrees(self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(self, "rotationInDegrees", core_foundation.CGFloat, .{});
    }

    pub fn setRotationInDegrees(self: *@This(), rotationInDegrees: core_foundation.CGFloat) void {
        return objc.msgSend(self, "setRotationInDegrees:", void, .{rotationInDegrees});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSLayoutAnchor?language=objc
pub const LayoutAnchor = opaque {
    pub const InternalInfo = objc.ExternalClass("NSLayoutAnchor", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn constraintEqualToAnchor(self: *@This(), anchor: ?*anyopaque) ?*LayoutConstraint {
        return objc.msgSend(self, "constraintEqualToAnchor:", ?*LayoutConstraint, .{anchor});
    }

    pub fn constraintGreaterThanOrEqualToAnchor(self: *@This(), anchor: ?*anyopaque) ?*LayoutConstraint {
        return objc.msgSend(self, "constraintGreaterThanOrEqualToAnchor:", ?*LayoutConstraint, .{anchor});
    }

    pub fn constraintLessThanOrEqualToAnchor(self: *@This(), anchor: ?*anyopaque) ?*LayoutConstraint {
        return objc.msgSend(self, "constraintLessThanOrEqualToAnchor:", ?*LayoutConstraint, .{anchor});
    }

    pub fn constraintEqualToAnchorConstant(self: *@This(), anchor: ?*anyopaque, c: core_foundation.CGFloat) ?*LayoutConstraint {
        return objc.msgSend(self, "constraintEqualToAnchor:constant:", ?*LayoutConstraint, .{anchor, c});
    }

    pub fn constraintGreaterThanOrEqualToAnchorConstant(self: *@This(), anchor: ?*anyopaque, c: core_foundation.CGFloat) ?*LayoutConstraint {
        return objc.msgSend(self, "constraintGreaterThanOrEqualToAnchor:constant:", ?*LayoutConstraint, .{anchor, c});
    }

    pub fn constraintLessThanOrEqualToAnchorConstant(self: *@This(), anchor: ?*anyopaque, c: core_foundation.CGFloat) ?*LayoutConstraint {
        return objc.msgSend(self, "constraintLessThanOrEqualToAnchor:constant:", ?*LayoutConstraint, .{anchor, c});
    }

    pub fn name(self: *@This()) ?*String {
        return objc.msgSend(self, "name", ?*String, .{});
    }

    pub fn item(self: *@This()) *objc.Id {
        return objc.msgSend(self, "item", *objc.Id, .{});
    }

    pub fn hasAmbiguousLayout(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "hasAmbiguousLayout", objc.BOOL, .{});
    }

    pub fn constraintsAffectingLayout(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "constraintsAffectingLayout", ?*anyopaque, .{});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSLayoutXAxisAnchor?language=objc
pub const LayoutXAxisAnchor = opaque {
    pub const InternalInfo = objc.ExternalClass("NSLayoutXAxisAnchor", @This(), LayoutAnchor, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn anchorWithOffsetToAnchor(self: *@This(), otherAnchor: ?*LayoutXAxisAnchor) ?*LayoutDimension {
        return objc.msgSend(self, "anchorWithOffsetToAnchor:", ?*LayoutDimension, .{otherAnchor});
    }

    pub fn constraintEqualToSystemSpacingAfterAnchorMultiplier(self: *@This(), anchor: ?*LayoutXAxisAnchor, multiplier: core_foundation.CGFloat) ?*LayoutConstraint {
        return objc.msgSend(self, "constraintEqualToSystemSpacingAfterAnchor:multiplier:", ?*LayoutConstraint, .{anchor, multiplier});
    }

    pub fn constraintGreaterThanOrEqualToSystemSpacingAfterAnchorMultiplier(self: *@This(), anchor: ?*LayoutXAxisAnchor, multiplier: core_foundation.CGFloat) ?*LayoutConstraint {
        return objc.msgSend(self, "constraintGreaterThanOrEqualToSystemSpacingAfterAnchor:multiplier:", ?*LayoutConstraint, .{anchor, multiplier});
    }

    pub fn constraintLessThanOrEqualToSystemSpacingAfterAnchorMultiplier(self: *@This(), anchor: ?*LayoutXAxisAnchor, multiplier: core_foundation.CGFloat) ?*LayoutConstraint {
        return objc.msgSend(self, "constraintLessThanOrEqualToSystemSpacingAfterAnchor:multiplier:", ?*LayoutConstraint, .{anchor, multiplier});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSLayoutYAxisAnchor?language=objc
pub const LayoutYAxisAnchor = opaque {
    pub const InternalInfo = objc.ExternalClass("NSLayoutYAxisAnchor", @This(), LayoutAnchor, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn anchorWithOffsetToAnchor(self: *@This(), otherAnchor: ?*LayoutYAxisAnchor) ?*LayoutDimension {
        return objc.msgSend(self, "anchorWithOffsetToAnchor:", ?*LayoutDimension, .{otherAnchor});
    }

    pub fn constraintEqualToSystemSpacingBelowAnchorMultiplier(self: *@This(), anchor: ?*LayoutYAxisAnchor, multiplier: core_foundation.CGFloat) ?*LayoutConstraint {
        return objc.msgSend(self, "constraintEqualToSystemSpacingBelowAnchor:multiplier:", ?*LayoutConstraint, .{anchor, multiplier});
    }

    pub fn constraintGreaterThanOrEqualToSystemSpacingBelowAnchorMultiplier(self: *@This(), anchor: ?*LayoutYAxisAnchor, multiplier: core_foundation.CGFloat) ?*LayoutConstraint {
        return objc.msgSend(self, "constraintGreaterThanOrEqualToSystemSpacingBelowAnchor:multiplier:", ?*LayoutConstraint, .{anchor, multiplier});
    }

    pub fn constraintLessThanOrEqualToSystemSpacingBelowAnchorMultiplier(self: *@This(), anchor: ?*LayoutYAxisAnchor, multiplier: core_foundation.CGFloat) ?*LayoutConstraint {
        return objc.msgSend(self, "constraintLessThanOrEqualToSystemSpacingBelowAnchor:multiplier:", ?*LayoutConstraint, .{anchor, multiplier});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSLayoutDimension?language=objc
pub const LayoutDimension = opaque {
    pub const InternalInfo = objc.ExternalClass("NSLayoutDimension", @This(), LayoutAnchor, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn constraintEqualToConstant(self: *@This(), c: core_foundation.CGFloat) ?*LayoutConstraint {
        return objc.msgSend(self, "constraintEqualToConstant:", ?*LayoutConstraint, .{c});
    }

    pub fn constraintGreaterThanOrEqualToConstant(self: *@This(), c: core_foundation.CGFloat) ?*LayoutConstraint {
        return objc.msgSend(self, "constraintGreaterThanOrEqualToConstant:", ?*LayoutConstraint, .{c});
    }

    pub fn constraintLessThanOrEqualToConstant(self: *@This(), c: core_foundation.CGFloat) ?*LayoutConstraint {
        return objc.msgSend(self, "constraintLessThanOrEqualToConstant:", ?*LayoutConstraint, .{c});
    }

    pub fn constraintEqualToAnchorMultiplier(self: *@This(), anchor: ?*LayoutDimension, m: core_foundation.CGFloat) ?*LayoutConstraint {
        return objc.msgSend(self, "constraintEqualToAnchor:multiplier:", ?*LayoutConstraint, .{anchor, m});
    }

    pub fn constraintGreaterThanOrEqualToAnchorMultiplier(self: *@This(), anchor: ?*LayoutDimension, m: core_foundation.CGFloat) ?*LayoutConstraint {
        return objc.msgSend(self, "constraintGreaterThanOrEqualToAnchor:multiplier:", ?*LayoutConstraint, .{anchor, m});
    }

    pub fn constraintLessThanOrEqualToAnchorMultiplier(self: *@This(), anchor: ?*LayoutDimension, m: core_foundation.CGFloat) ?*LayoutConstraint {
        return objc.msgSend(self, "constraintLessThanOrEqualToAnchor:multiplier:", ?*LayoutConstraint, .{anchor, m});
    }

    pub fn constraintEqualToAnchorMultiplierConstant(self: *@This(), anchor: ?*LayoutDimension, m: core_foundation.CGFloat, c: core_foundation.CGFloat) ?*LayoutConstraint {
        return objc.msgSend(self, "constraintEqualToAnchor:multiplier:constant:", ?*LayoutConstraint, .{anchor, m, c});
    }

    pub fn constraintGreaterThanOrEqualToAnchorMultiplierConstant(self: *@This(), anchor: ?*LayoutDimension, m: core_foundation.CGFloat, c: core_foundation.CGFloat) ?*LayoutConstraint {
        return objc.msgSend(self, "constraintGreaterThanOrEqualToAnchor:multiplier:constant:", ?*LayoutConstraint, .{anchor, m, c});
    }

    pub fn constraintLessThanOrEqualToAnchorMultiplierConstant(self: *@This(), anchor: ?*LayoutDimension, m: core_foundation.CGFloat, c: core_foundation.CGFloat) ?*LayoutConstraint {
        return objc.msgSend(self, "constraintLessThanOrEqualToAnchor:multiplier:constant:", ?*LayoutConstraint, .{anchor, m, c});
    }

};

pub const LayoutPriority = f32;

pub const LayoutConstraintOrientation = enum(objc.NSInteger) {
    Horizontal = 0,
    Vertical = 1,
};

pub const LayoutRelation = enum(objc.NSInteger) {
    LessThanOrEqual = -1,
    Equal = 0,
    GreaterThanOrEqual = 1,
};

pub const LayoutAttribute = enum(objc.NSInteger) {
    Left = 1,
    Right = 2,
    Top = 3,
    Bottom = 4,
    Leading = 5,
    Trailing = 6,
    Width = 7,
    Height = 8,
    CenterX = 9,
    CenterY = 10,
    LastBaseline = 11,
    Baseline = 11,
    FirstBaseline = 12,
    NotAnAttribute = 0,
};

pub const LayoutFormatOptions = enum(objc.NSUInteger) {
    AlignAllLeft = 2,
    AlignAllRight = 4,
    AlignAllTop = 8,
    AlignAllBottom = 16,
    AlignAllLeading = 32,
    AlignAllTrailing = 64,
    AlignAllCenterX = 512,
    AlignAllCenterY = 1024,
    AlignAllLastBaseline = 2048,
    AlignAllFirstBaseline = 4096,
    AlignAllBaseline = 2048,
    AlignmentMask = 65535,
    DirectionLeadingToTrailing = 0,
    DirectionLeftToRight = 65536,
    DirectionRightToLeft = 131072,
    DirectionMask = 196608,
};

/// https://developer.apple.com/documentation/AppKit/NSLayoutConstraint?language=objc
pub const LayoutConstraint = opaque {
    pub const InternalInfo = objc.ExternalClass("NSLayoutConstraint", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn constraintsWithVisualFormatOptionsMetricsViews(self: *@This(), format: ?*String, opts: LayoutFormatOptions, metrics: ?*anyopaque, views: ?*anyopaque, ) ?*anyopaque {
        return objc.msgSend(self, "constraintsWithVisualFormat:options:metrics:views:", ?*anyopaque, .{format, opts, metrics, views, });
    }

    pub fn constraintWithItemAttributeRelatedByToItemAttributeMultiplierConstant(self: *@This(), view1: *objc.Id, attr1: LayoutAttribute, relation: LayoutRelation, view2: *objc.Id, attr2: LayoutAttribute, multiplier: core_foundation.CGFloat, c: core_foundation.CGFloat, ) *@This() {
        return objc.msgSend(self, "constraintWithItem:attribute:relatedBy:toItem:attribute:multiplier:constant:", *@This(), .{view1, attr1, relation, view2, attr2, multiplier, c, });
    }

    pub fn priority(self: *@This()) LayoutPriority {
        return objc.msgSend(self, "priority", LayoutPriority, .{});
    }

    pub fn setPriority(self: *@This(), priority: LayoutPriority) void {
        return objc.msgSend(self, "setPriority:", void, .{priority});
    }

    pub fn setShouldBeArchived(self: *@This(), shouldBeArchived: objc.BOOL) void {
        return objc.msgSend(self, "setShouldBeArchived:", void, .{shouldBeArchived});
    }

    pub fn shouldBeArchived(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "shouldBeArchived", objc.BOOL, .{});
    }

    pub fn firstItem(self: *@This()) *objc.Id {
        return objc.msgSend(self, "firstItem", *objc.Id, .{});
    }

    pub fn secondItem(self: *@This()) *objc.Id {
        return objc.msgSend(self, "secondItem", *objc.Id, .{});
    }

    pub fn firstAttribute(self: *@This()) LayoutAttribute {
        return objc.msgSend(self, "firstAttribute", LayoutAttribute, .{});
    }

    pub fn secondAttribute(self: *@This()) LayoutAttribute {
        return objc.msgSend(self, "secondAttribute", LayoutAttribute, .{});
    }

    pub fn firstAnchor(self: *@This()) ?*LayoutAnchor {
        return objc.msgSend(self, "firstAnchor", ?*LayoutAnchor, .{});
    }

    pub fn secondAnchor(self: *@This()) ?*LayoutAnchor {
        return objc.msgSend(self, "secondAnchor", ?*LayoutAnchor, .{});
    }

    pub fn relation(self: *@This()) LayoutRelation {
        return objc.msgSend(self, "relation", LayoutRelation, .{});
    }

    pub fn multiplier(self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(self, "multiplier", core_foundation.CGFloat, .{});
    }

    pub fn constant(self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(self, "constant", core_foundation.CGFloat, .{});
    }

    pub fn setConstant(self: *@This(), constant: core_foundation.CGFloat) void {
        return objc.msgSend(self, "setConstant:", void, .{constant});
    }

    pub fn setActive(self: *@This(), active: objc.BOOL) void {
        return objc.msgSend(self, "setActive:", void, .{active});
    }

    pub fn isActive(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isActive", objc.BOOL, .{});
    }

    pub fn activateConstraints(self: *@This(), constraints: ?*anyopaque) void {
        return objc.msgSend(self, "activateConstraints:", void, .{constraints});
    }

    pub fn deactivateConstraints(self: *@This(), constraints: ?*anyopaque) void {
        return objc.msgSend(self, "deactivateConstraints:", void, .{constraints});
    }

};

pub extern "AppKit" fn _NSDictionaryOfVariableBindings(commaSeparatedKeysString: ?*String, firstValue: *objc.Id) callconv(.C) ?*anyopaque;

/// https://developer.apple.com/documentation/AppKit/NSLayoutGuide?language=objc
pub const LayoutGuide = opaque {
    pub const InternalInfo = objc.ExternalClass("NSLayoutGuide", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn constraintsAffectingLayoutForOrientation(self: *@This(), orientation: LayoutConstraintOrientation) ?*anyopaque {
        return objc.msgSend(self, "constraintsAffectingLayoutForOrientation:", ?*anyopaque, .{orientation});
    }

    pub fn frame(self: *@This()) foundation.Rect {
        return objc.msgSend(self, "frame", foundation.Rect, .{});
    }

    pub fn owningView(self: *@This()) ?*View {
        return objc.msgSend(self, "owningView", ?*View, .{});
    }

    pub fn setOwningView(self: *@This(), owningView: ?*View) void {
        return objc.msgSend(self, "setOwningView:", void, .{owningView});
    }

    pub fn identifier(self: *@This()) UserInterfaceItemIdentifier {
        return objc.msgSend(self, "identifier", UserInterfaceItemIdentifier, .{});
    }

    pub fn setIdentifier(self: *@This(), identifier: UserInterfaceItemIdentifier) void {
        return objc.msgSend(self, "setIdentifier:", void, .{identifier});
    }

    pub fn leadingAnchor(self: *@This()) ?*LayoutXAxisAnchor {
        return objc.msgSend(self, "leadingAnchor", ?*LayoutXAxisAnchor, .{});
    }

    pub fn trailingAnchor(self: *@This()) ?*LayoutXAxisAnchor {
        return objc.msgSend(self, "trailingAnchor", ?*LayoutXAxisAnchor, .{});
    }

    pub fn leftAnchor(self: *@This()) ?*LayoutXAxisAnchor {
        return objc.msgSend(self, "leftAnchor", ?*LayoutXAxisAnchor, .{});
    }

    pub fn rightAnchor(self: *@This()) ?*LayoutXAxisAnchor {
        return objc.msgSend(self, "rightAnchor", ?*LayoutXAxisAnchor, .{});
    }

    pub fn topAnchor(self: *@This()) ?*LayoutYAxisAnchor {
        return objc.msgSend(self, "topAnchor", ?*LayoutYAxisAnchor, .{});
    }

    pub fn bottomAnchor(self: *@This()) ?*LayoutYAxisAnchor {
        return objc.msgSend(self, "bottomAnchor", ?*LayoutYAxisAnchor, .{});
    }

    pub fn widthAnchor(self: *@This()) ?*LayoutDimension {
        return objc.msgSend(self, "widthAnchor", ?*LayoutDimension, .{});
    }

    pub fn heightAnchor(self: *@This()) ?*LayoutDimension {
        return objc.msgSend(self, "heightAnchor", ?*LayoutDimension, .{});
    }

    pub fn centerXAnchor(self: *@This()) ?*LayoutXAxisAnchor {
        return objc.msgSend(self, "centerXAnchor", ?*LayoutXAxisAnchor, .{});
    }

    pub fn centerYAnchor(self: *@This()) ?*LayoutYAxisAnchor {
        return objc.msgSend(self, "centerYAnchor", ?*LayoutYAxisAnchor, .{});
    }

    pub fn hasAmbiguousLayout(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "hasAmbiguousLayout", objc.BOOL, .{});
    }

};

pub const ImageName = ?*String;

pub const ImageLoadStatus = enum(objc.NSUInteger) {
    Completed = 0,
    Cancelled = 1,
    InvalidData = 2,
    UnexpectedEOF = 3,
    ReadError = 4,
};

pub const ImageCacheMode = enum(objc.NSUInteger) {
    Default = 0,
    Always = 1,
    BySize = 2,
    Never = 3,
};

pub const ImageResizingMode = enum(objc.NSInteger) {
    Tile = 0,
    Stretch = 1,
};

/// https://developer.apple.com/documentation/AppKit/NSImage?language=objc
pub const Image = opaque {
    pub const InternalInfo = objc.ExternalClass("NSImage", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn imageNamed(self: *@This(), name: ImageName) ?*Image {
        return objc.msgSend(self, "imageNamed:", ?*Image, .{name});
    }

    pub fn imageWithSystemSymbolNameAccessibilityDescription(self: *@This(), name: ?*String, description: ?*String) *@This() {
        return objc.msgSend(self, "imageWithSystemSymbolName:accessibilityDescription:", *@This(), .{name, description});
    }

    pub fn imageWithSystemSymbolNameVariableValueAccessibilityDescription(self: *@This(), name: ?*String, value: f64, description: ?*String) *@This() {
        return objc.msgSend(self, "imageWithSystemSymbolName:variableValue:accessibilityDescription:", *@This(), .{name, value, description});
    }

    pub fn imageWithSymbolNameVariableValue(self: *@This(), name: ?*String, value: f64) *@This() {
        return objc.msgSend(self, "imageWithSymbolName:variableValue:", *@This(), .{name, value});
    }

    pub fn imageWithSymbolNameBundleVariableValue(self: *@This(), name: ?*String, bundle: ?*Bundle, value: f64) *@This() {
        return objc.msgSend(self, "imageWithSymbolName:bundle:variableValue:", *@This(), .{name, bundle, value});
    }

    pub fn initWithSize(self: *@This(), size: foundation.Size) *@This() {
        return objc.msgSend(self, "initWithSize:", *@This(), .{size});
    }

    pub fn initWithCoder(self: *@This(), coder: ?*foundation.Coder) *@This() {
        return objc.msgSend(self, "initWithCoder:", *@This(), .{coder});
    }

    pub fn initWithData(self: *@This(), data: ?*Data) *@This() {
        return objc.msgSend(self, "initWithData:", *@This(), .{data});
    }

    pub fn initWithContentsOfFile(self: *@This(), fileName: ?*String) *@This() {
        return objc.msgSend(self, "initWithContentsOfFile:", *@This(), .{fileName});
    }

    pub fn initWithContentsOfURL(self: *@This(), url: ?*URL) *@This() {
        return objc.msgSend(self, "initWithContentsOfURL:", *@This(), .{url});
    }

    pub fn initByReferencingFile(self: *@This(), fileName: ?*String) *@This() {
        return objc.msgSend(self, "initByReferencingFile:", *@This(), .{fileName});
    }

    pub fn initByReferencingURL(self: *@This(), url: ?*URL) *@This() {
        return objc.msgSend(self, "initByReferencingURL:", *@This(), .{url});
    }

    pub fn initWithPasteboard(self: *@This(), pasteboard: ?*Pasteboard) *@This() {
        return objc.msgSend(self, "initWithPasteboard:", *@This(), .{pasteboard});
    }

    pub fn initWithDataIgnoringOrientation(self: *@This(), data: ?*Data) *@This() {
        return objc.msgSend(self, "initWithDataIgnoringOrientation:", *@This(), .{data});
    }

    pub fn imageWithSizeFlippedDrawingHandler(self: *@This(), size: foundation.Size, drawingHandlerShouldBeCalledWithFlippedContext: objc.BOOL, drawingHandler: *const fn(foundation.Rect) callconv(.C) objc.BOOL) *@This() {
        return objc.msgSend(self, "imageWithSize:flipped:drawingHandler:", *@This(), .{size, drawingHandlerShouldBeCalledWithFlippedContext, drawingHandler});
    }

    pub fn setName(self: *@This(), string: ImageName) objc.BOOL {
        return objc.msgSend(self, "setName:", objc.BOOL, .{string});
    }

    pub fn name(self: *@This()) ImageName {
        return objc.msgSend(self, "name", ImageName, .{});
    }

    pub fn drawAtPointFromRectOperationFraction(self: *@This(), point: foundation.Point, fromRect: foundation.Rect, op: CompositingOperation, delta: core_foundation.CGFloat, ) void {
        return objc.msgSend(self, "drawAtPoint:fromRect:operation:fraction:", void, .{point, fromRect, op, delta, });
    }

    pub fn drawInRectFromRectOperationFraction(self: *@This(), rect: foundation.Rect, fromRect: foundation.Rect, op: CompositingOperation, delta: core_foundation.CGFloat, ) void {
        return objc.msgSend(self, "drawInRect:fromRect:operation:fraction:", void, .{rect, fromRect, op, delta, });
    }

    pub fn drawInRectFromRectOperationFractionRespectFlippedHints(self: *@This(), dstSpacePortionRect: foundation.Rect, srcSpacePortionRect: foundation.Rect, op: CompositingOperation, requestedAlpha: core_foundation.CGFloat, respectContextIsFlipped: objc.BOOL, hints: ?*anyopaque, ) void {
        return objc.msgSend(self, "drawInRect:fromRect:operation:fraction:respectFlipped:hints:", void, .{dstSpacePortionRect, srcSpacePortionRect, op, requestedAlpha, respectContextIsFlipped, hints, });
    }

    pub fn drawRepresentationInRect(self: *@This(), imageRep: ?*ImageRep, rect: foundation.Rect) objc.BOOL {
        return objc.msgSend(self, "drawRepresentation:inRect:", objc.BOOL, .{imageRep, rect});
    }

    pub fn drawInRect(self: *@This(), rect: foundation.Rect) void {
        return objc.msgSend(self, "drawInRect:", void, .{rect});
    }

    pub fn recache(self: *@This()) void {
        return objc.msgSend(self, "recache", void, .{});
    }

    pub fn TIFFRepresentationUsingCompressionFactor(self: *@This(), comp: TIFFCompression, factor: f32) ?*Data {
        return objc.msgSend(self, "TIFFRepresentationUsingCompression:factor:", ?*Data, .{comp, factor});
    }

    pub fn addRepresentations(self: *@This(), imageReps: ?*anyopaque) void {
        return objc.msgSend(self, "addRepresentations:", void, .{imageReps});
    }

    pub fn addRepresentation(self: *@This(), imageRep: ?*ImageRep) void {
        return objc.msgSend(self, "addRepresentation:", void, .{imageRep});
    }

    pub fn removeRepresentation(self: *@This(), imageRep: ?*ImageRep) void {
        return objc.msgSend(self, "removeRepresentation:", void, .{imageRep});
    }

    pub fn canInitWithPasteboard(self: *@This(), pasteboard: ?*Pasteboard) objc.BOOL {
        return objc.msgSend(self, "canInitWithPasteboard:", objc.BOOL, .{pasteboard});
    }

    pub fn initWithCGImageSize(self: *@This(), cgImage: core_graphics.ImageRef, size: foundation.Size) *@This() {
        return objc.msgSend(self, "initWithCGImage:size:", *@This(), .{cgImage, size});
    }

    pub fn CGImageForProposedRectContextHints(self: *@This(), proposedDestRect: ?*foundation.Rect, referenceContext: ?*GraphicsContext, hints: ?*anyopaque) core_graphics.ImageRef {
        return objc.msgSend(self, "CGImageForProposedRect:context:hints:", core_graphics.ImageRef, .{proposedDestRect, referenceContext, hints});
    }

    pub fn bestRepresentationForRectContextHints(self: *@This(), rect: foundation.Rect, referenceContext: ?*GraphicsContext, hints: ?*anyopaque) ?*ImageRep {
        return objc.msgSend(self, "bestRepresentationForRect:context:hints:", ?*ImageRep, .{rect, referenceContext, hints});
    }

    pub fn hitTestRectWithImageDestinationRectContextHintsFlipped(self: *@This(), testRectDestSpace: foundation.Rect, imageRectDestSpace: foundation.Rect, context: ?*GraphicsContext, hints: ?*anyopaque, flipped: objc.BOOL, ) objc.BOOL {
        return objc.msgSend(self, "hitTestRect:withImageDestinationRect:context:hints:flipped:", objc.BOOL, .{testRectDestSpace, imageRectDestSpace, context, hints, flipped, });
    }

    pub fn recommendedLayerContentsScale(self: *@This(), preferredContentsScale: core_foundation.CGFloat) core_foundation.CGFloat {
        return objc.msgSend(self, "recommendedLayerContentsScale:", core_foundation.CGFloat, .{preferredContentsScale});
    }

    pub fn layerContentsForContentsScale(self: *@This(), layerContentsScale: core_foundation.CGFloat) *objc.Id {
        return objc.msgSend(self, "layerContentsForContentsScale:", *objc.Id, .{layerContentsScale});
    }

    pub fn imageWithSymbolConfiguration(self: *@This(), configuration: ?*ImageSymbolConfiguration) ?*Image {
        return objc.msgSend(self, "imageWithSymbolConfiguration:", ?*Image, .{configuration});
    }

    pub fn imageWithLocale(self: *@This(), locale: ?*foundation.Locale) ?*Image {
        return objc.msgSend(self, "imageWithLocale:", ?*Image, .{locale});
    }

    pub fn size(self: *@This()) foundation.Size {
        return objc.msgSend(self, "size", foundation.Size, .{});
    }

    pub fn setSize(self: *@This(), size: foundation.Size) void {
        return objc.msgSend(self, "setSize:", void, .{size});
    }

    pub fn backgroundColor(self: *@This()) ?*Color {
        return objc.msgSend(self, "backgroundColor", ?*Color, .{});
    }

    pub fn setBackgroundColor(self: *@This(), backgroundColor: ?*Color) void {
        return objc.msgSend(self, "setBackgroundColor:", void, .{backgroundColor});
    }

    pub fn usesEPSOnResolutionMismatch(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "usesEPSOnResolutionMismatch", objc.BOOL, .{});
    }

    pub fn setUsesEPSOnResolutionMismatch(self: *@This(), usesEPSOnResolutionMismatch: objc.BOOL) void {
        return objc.msgSend(self, "setUsesEPSOnResolutionMismatch:", void, .{usesEPSOnResolutionMismatch});
    }

    pub fn prefersColorMatch(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "prefersColorMatch", objc.BOOL, .{});
    }

    pub fn setPrefersColorMatch(self: *@This(), prefersColorMatch: objc.BOOL) void {
        return objc.msgSend(self, "setPrefersColorMatch:", void, .{prefersColorMatch});
    }

    pub fn matchesOnMultipleResolution(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "matchesOnMultipleResolution", objc.BOOL, .{});
    }

    pub fn setMatchesOnMultipleResolution(self: *@This(), matchesOnMultipleResolution: objc.BOOL) void {
        return objc.msgSend(self, "setMatchesOnMultipleResolution:", void, .{matchesOnMultipleResolution});
    }

    pub fn matchesOnlyOnBestFittingAxis(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "matchesOnlyOnBestFittingAxis", objc.BOOL, .{});
    }

    pub fn setMatchesOnlyOnBestFittingAxis(self: *@This(), matchesOnlyOnBestFittingAxis: objc.BOOL) void {
        return objc.msgSend(self, "setMatchesOnlyOnBestFittingAxis:", void, .{matchesOnlyOnBestFittingAxis});
    }

    pub fn TIFFRepresentation(self: *@This()) ?*Data {
        return objc.msgSend(self, "TIFFRepresentation", ?*Data, .{});
    }

    pub fn representations(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "representations", ?*anyopaque, .{});
    }

    pub fn isValid(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isValid", objc.BOOL, .{});
    }

    pub fn delegate(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "delegate", ?*anyopaque, .{});
    }

    pub fn setDelegate(self: *@This(), delegate: ?*anyopaque) void {
        return objc.msgSend(self, "setDelegate:", void, .{delegate});
    }

    pub fn imageTypes(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "imageTypes", ?*anyopaque, .{});
    }

    pub fn imageUnfilteredTypes(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "imageUnfilteredTypes", ?*anyopaque, .{});
    }

    pub fn cacheMode(self: *@This()) ImageCacheMode {
        return objc.msgSend(self, "cacheMode", ImageCacheMode, .{});
    }

    pub fn setCacheMode(self: *@This(), cacheMode: ImageCacheMode) void {
        return objc.msgSend(self, "setCacheMode:", void, .{cacheMode});
    }

    pub fn alignmentRect(self: *@This()) foundation.Rect {
        return objc.msgSend(self, "alignmentRect", foundation.Rect, .{});
    }

    pub fn setAlignmentRect(self: *@This(), alignmentRect: foundation.Rect) void {
        return objc.msgSend(self, "setAlignmentRect:", void, .{alignmentRect});
    }

    pub fn isTemplate(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isTemplate", objc.BOOL, .{});
    }

    pub fn setTemplate(self: *@This(), template: objc.BOOL) void {
        return objc.msgSend(self, "setTemplate:", void, .{template});
    }

    pub fn accessibilityDescription(self: *@This()) ?*String {
        return objc.msgSend(self, "accessibilityDescription", ?*String, .{});
    }

    pub fn setAccessibilityDescription(self: *@This(), accessibilityDescription: ?*String) void {
        return objc.msgSend(self, "setAccessibilityDescription:", void, .{accessibilityDescription});
    }

    pub fn capInsets(self: *@This()) foundation.EdgeInsets {
        return objc.msgSend(self, "capInsets", foundation.EdgeInsets, .{});
    }

    pub fn setCapInsets(self: *@This(), capInsets: foundation.EdgeInsets) void {
        return objc.msgSend(self, "setCapInsets:", void, .{capInsets});
    }

    pub fn resizingMode(self: *@This()) ImageResizingMode {
        return objc.msgSend(self, "resizingMode", ImageResizingMode, .{});
    }

    pub fn setResizingMode(self: *@This(), resizingMode: ImageResizingMode) void {
        return objc.msgSend(self, "setResizingMode:", void, .{resizingMode});
    }

    pub fn symbolConfiguration(self: *@This()) ?*ImageSymbolConfiguration {
        return objc.msgSend(self, "symbolConfiguration", ?*ImageSymbolConfiguration, .{});
    }

    pub fn locale(self: *@This()) ?*foundation.Locale {
        return objc.msgSend(self, "locale", ?*foundation.Locale, .{});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSImageDelegate?language=objc
pub const ImageDelegate = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{objc.NSObject, });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn imageDidNotDrawInRect(self: *@This(), sender: ?*Image, rect: foundation.Rect) ?*Image {
        return objc.msgSend(self, "imageDidNotDraw:inRect:", ?*Image, .{sender, rect});
    }

    pub fn imageWillLoadRepresentation(self: *@This(), image: ?*Image, rep: ?*ImageRep) void {
        return objc.msgSend(self, "image:willLoadRepresentation:", void, .{image, rep});
    }

    pub fn imageDidLoadRepresentationHeader(self: *@This(), image: ?*Image, rep: ?*ImageRep) void {
        return objc.msgSend(self, "image:didLoadRepresentationHeader:", void, .{image, rep});
    }

    pub fn imageDidLoadPartOfRepresentationWithValidRows(self: *@This(), image: ?*Image, rep: ?*ImageRep, rows: objc.NSInteger) void {
        return objc.msgSend(self, "image:didLoadPartOfRepresentation:withValidRows:", void, .{image, rep, rows});
    }

    pub fn imageDidLoadRepresentationWithStatus(self: *@This(), image: ?*Image, rep: ?*ImageRep, status: ImageLoadStatus) void {
        return objc.msgSend(self, "image:didLoadRepresentation:withStatus:", void, .{image, rep, status});
    }

};

pub const ImageSymbolScale = enum(objc.NSInteger) {
    Small = 1,
    Medium = 2,
    Large = 3,
};

/// https://developer.apple.com/documentation/AppKit/NSImageSymbolConfiguration?language=objc
pub const ImageSymbolConfiguration = opaque {
    pub const InternalInfo = objc.ExternalClass("NSImageSymbolConfiguration", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn configurationWithPointSizeWeightScale(self: *@This(), pointSize: core_foundation.CGFloat, weight: FontWeight, scale: ImageSymbolScale) *@This() {
        return objc.msgSend(self, "configurationWithPointSize:weight:scale:", *@This(), .{pointSize, weight, scale});
    }

    pub fn configurationWithPointSizeWeight(self: *@This(), pointSize: core_foundation.CGFloat, weight: FontWeight) *@This() {
        return objc.msgSend(self, "configurationWithPointSize:weight:", *@This(), .{pointSize, weight});
    }

    pub fn configurationWithTextStyleScale(self: *@This(), style: FontTextStyle, scale: ImageSymbolScale) *@This() {
        return objc.msgSend(self, "configurationWithTextStyle:scale:", *@This(), .{style, scale});
    }

    pub fn configurationWithTextStyle(self: *@This(), style: FontTextStyle) *@This() {
        return objc.msgSend(self, "configurationWithTextStyle:", *@This(), .{style});
    }

    pub fn configurationWithScale(self: *@This(), scale: ImageSymbolScale) *@This() {
        return objc.msgSend(self, "configurationWithScale:", *@This(), .{scale});
    }

    pub fn configurationPreferringMonochrome(self: *@This()) *@This() {
        return objc.msgSend(self, "configurationPreferringMonochrome", *@This(), .{});
    }

    pub fn configurationPreferringHierarchical(self: *@This()) *@This() {
        return objc.msgSend(self, "configurationPreferringHierarchical", *@This(), .{});
    }

    pub fn configurationWithHierarchicalColor(self: *@This(), hierarchicalColor: ?*Color) *@This() {
        return objc.msgSend(self, "configurationWithHierarchicalColor:", *@This(), .{hierarchicalColor});
    }

    pub fn configurationWithPaletteColors(self: *@This(), paletteColors: ?*anyopaque) *@This() {
        return objc.msgSend(self, "configurationWithPaletteColors:", *@This(), .{paletteColors});
    }

    pub fn configurationPreferringMulticolor(self: *@This()) *@This() {
        return objc.msgSend(self, "configurationPreferringMulticolor", *@This(), .{});
    }

    pub fn configurationByApplyingConfiguration(self: *@This(), configuration: ?*ImageSymbolConfiguration) *@This() {
        return objc.msgSend(self, "configurationByApplyingConfiguration:", *@This(), .{configuration});
    }

};

pub const ImageAlignment = enum(objc.NSUInteger) {
    Center = 0,
    Top = 1,
    TopLeft = 2,
    TopRight = 3,
    Left = 4,
    Bottom = 5,
    BottomLeft = 6,
    BottomRight = 7,
    Right = 8,
};

pub const ImageFrameStyle = enum(objc.NSUInteger) {
    None = 0,
    Photo = 1,
    GrayBezel = 2,
    Groove = 3,
    Button = 4,
};

/// https://developer.apple.com/documentation/AppKit/NSImageCell?language=objc
pub const ImageCell = opaque {
    pub const InternalInfo = objc.ExternalClass("NSImageCell", @This(), Cell, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn imageAlignment(self: *@This()) ImageAlignment {
        return objc.msgSend(self, "imageAlignment", ImageAlignment, .{});
    }

    pub fn setImageAlignment(self: *@This(), imageAlignment: ImageAlignment) void {
        return objc.msgSend(self, "setImageAlignment:", void, .{imageAlignment});
    }

    pub fn imageScaling(self: *@This()) ImageScaling {
        return objc.msgSend(self, "imageScaling", ImageScaling, .{});
    }

    pub fn setImageScaling(self: *@This(), imageScaling: ImageScaling) void {
        return objc.msgSend(self, "setImageScaling:", void, .{imageScaling});
    }

    pub fn imageFrameStyle(self: *@This()) ImageFrameStyle {
        return objc.msgSend(self, "imageFrameStyle", ImageFrameStyle, .{});
    }

    pub fn setImageFrameStyle(self: *@This(), imageFrameStyle: ImageFrameStyle) void {
        return objc.msgSend(self, "setImageFrameStyle:", void, .{imageFrameStyle});
    }

};

pub const ImageDynamicRange = enum(objc.NSInteger) {
    Unspecified = -1,
    Standard = 0,
    ConstrainedHigh = 1,
    High = 2,
};

/// https://developer.apple.com/documentation/AppKit/NSImageView?language=objc
pub const ImageView = opaque {
    pub const InternalInfo = objc.ExternalClass("NSImageView", @This(), Control, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn imageViewWithImage(self: *@This(), image: ?*Image) *@This() {
        return objc.msgSend(self, "imageViewWithImage:", *@This(), .{image});
    }

    pub fn image(self: *@This()) ?*Image {
        return objc.msgSend(self, "image", ?*Image, .{});
    }

    pub fn setImage(self: *@This(), image: ?*Image) void {
        return objc.msgSend(self, "setImage:", void, .{image});
    }

    pub fn isEditable(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isEditable", objc.BOOL, .{});
    }

    pub fn setEditable(self: *@This(), editable: objc.BOOL) void {
        return objc.msgSend(self, "setEditable:", void, .{editable});
    }

    pub fn imageAlignment(self: *@This()) ImageAlignment {
        return objc.msgSend(self, "imageAlignment", ImageAlignment, .{});
    }

    pub fn setImageAlignment(self: *@This(), imageAlignment: ImageAlignment) void {
        return objc.msgSend(self, "setImageAlignment:", void, .{imageAlignment});
    }

    pub fn imageScaling(self: *@This()) ImageScaling {
        return objc.msgSend(self, "imageScaling", ImageScaling, .{});
    }

    pub fn setImageScaling(self: *@This(), imageScaling: ImageScaling) void {
        return objc.msgSend(self, "setImageScaling:", void, .{imageScaling});
    }

    pub fn imageFrameStyle(self: *@This()) ImageFrameStyle {
        return objc.msgSend(self, "imageFrameStyle", ImageFrameStyle, .{});
    }

    pub fn setImageFrameStyle(self: *@This(), imageFrameStyle: ImageFrameStyle) void {
        return objc.msgSend(self, "setImageFrameStyle:", void, .{imageFrameStyle});
    }

    pub fn symbolConfiguration(self: *@This()) ?*ImageSymbolConfiguration {
        return objc.msgSend(self, "symbolConfiguration", ?*ImageSymbolConfiguration, .{});
    }

    pub fn setSymbolConfiguration(self: *@This(), symbolConfiguration: ?*ImageSymbolConfiguration) void {
        return objc.msgSend(self, "setSymbolConfiguration:", void, .{symbolConfiguration});
    }

    pub fn contentTintColor(self: *@This()) ?*Color {
        return objc.msgSend(self, "contentTintColor", ?*Color, .{});
    }

    pub fn setContentTintColor(self: *@This(), contentTintColor: ?*Color) void {
        return objc.msgSend(self, "setContentTintColor:", void, .{contentTintColor});
    }

    pub fn animates(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "animates", objc.BOOL, .{});
    }

    pub fn setAnimates(self: *@This(), animates: objc.BOOL) void {
        return objc.msgSend(self, "setAnimates:", void, .{animates});
    }

    pub fn allowsCutCopyPaste(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "allowsCutCopyPaste", objc.BOOL, .{});
    }

    pub fn setAllowsCutCopyPaste(self: *@This(), allowsCutCopyPaste: objc.BOOL) void {
        return objc.msgSend(self, "setAllowsCutCopyPaste:", void, .{allowsCutCopyPaste});
    }

    pub fn defaultPreferredImageDynamicRange(self: *@This()) ImageDynamicRange {
        return objc.msgSend(self, "defaultPreferredImageDynamicRange", ImageDynamicRange, .{});
    }

    pub fn setDefaultPreferredImageDynamicRange(self: *@This(), defaultPreferredImageDynamicRange: ImageDynamicRange) void {
        return objc.msgSend(self, "setDefaultPreferredImageDynamicRange:", void, .{defaultPreferredImageDynamicRange});
    }

    pub fn preferredImageDynamicRange(self: *@This()) ImageDynamicRange {
        return objc.msgSend(self, "preferredImageDynamicRange", ImageDynamicRange, .{});
    }

    pub fn setPreferredImageDynamicRange(self: *@This(), preferredImageDynamicRange: ImageDynamicRange) void {
        return objc.msgSend(self, "setPreferredImageDynamicRange:", void, .{preferredImageDynamicRange});
    }

    pub fn imageDynamicRange(self: *@This()) ImageDynamicRange {
        return objc.msgSend(self, "imageDynamicRange", ImageDynamicRange, .{});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSScrubberDataSource?language=objc
pub const ScrubberDataSource = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{objc.NSObject, });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn numberOfItemsForScrubber(self: *@This(), scrubber: ?*Scrubber) objc.NSInteger {
        return objc.msgSend(self, "numberOfItemsForScrubber:", objc.NSInteger, .{scrubber});
    }

    pub fn scrubberViewForItemAtIndex(self: *@This(), scrubber: ?*Scrubber, index: objc.NSInteger) ?*anyopaque {
        return objc.msgSend(self, "scrubber:viewForItemAtIndex:", ?*anyopaque, .{scrubber, index});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSScrubberDelegate?language=objc
pub const ScrubberDelegate = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{objc.NSObject, });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn scrubberDidSelectItemAtIndex(self: *@This(), scrubber: ?*Scrubber, selectedIndex: objc.NSInteger) void {
        return objc.msgSend(self, "scrubber:didSelectItemAtIndex:", void, .{scrubber, selectedIndex});
    }

    pub fn scrubberDidHighlightItemAtIndex(self: *@This(), scrubber: ?*Scrubber, highlightedIndex: objc.NSInteger) void {
        return objc.msgSend(self, "scrubber:didHighlightItemAtIndex:", void, .{scrubber, highlightedIndex});
    }

    pub fn scrubberDidChangeVisibleRange(self: *@This(), scrubber: ?*Scrubber, visibleRange: foundation.Range) void {
        return objc.msgSend(self, "scrubber:didChangeVisibleRange:", void, .{scrubber, visibleRange});
    }

    pub fn didBeginInteractingWithScrubber(self: *@This(), scrubber: ?*Scrubber) void {
        return objc.msgSend(self, "didBeginInteractingWithScrubber:", void, .{scrubber});
    }

    pub fn didFinishInteractingWithScrubber(self: *@This(), scrubber: ?*Scrubber) void {
        return objc.msgSend(self, "didFinishInteractingWithScrubber:", void, .{scrubber});
    }

    pub fn didCancelInteractingWithScrubber(self: *@This(), scrubber: ?*Scrubber) void {
        return objc.msgSend(self, "didCancelInteractingWithScrubber:", void, .{scrubber});
    }

};

pub const ScrubberMode = enum(objc.NSInteger) {
    Fixed = 0,
    Free = 1,
};

pub const ScrubberAlignment = enum(objc.NSInteger) {
    None = 0,
    Leading = 1,
    Trailing = 2,
    Center = 3,
};

/// https://developer.apple.com/documentation/AppKit/NSScrubberSelectionStyle?language=objc
pub const ScrubberSelectionStyle = opaque {
    pub const InternalInfo = objc.ExternalClass("NSScrubberSelectionStyle", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn init(self: *@This()) *@This() {
        return objc.msgSend(self, "init", *@This(), .{});
    }

    pub fn initWithCoder(self: *@This(), coder: ?*foundation.Coder) *@This() {
        return objc.msgSend(self, "initWithCoder:", *@This(), .{coder});
    }

    pub fn makeSelectionView(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "makeSelectionView", ?*anyopaque, .{});
    }

    pub fn outlineOverlayStyle(self: *@This()) ?*ScrubberSelectionStyle {
        return objc.msgSend(self, "outlineOverlayStyle", ?*ScrubberSelectionStyle, .{});
    }

    pub fn roundedBackgroundStyle(self: *@This()) ?*ScrubberSelectionStyle {
        return objc.msgSend(self, "roundedBackgroundStyle", ?*ScrubberSelectionStyle, .{});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSScrubber?language=objc
pub const Scrubber = opaque {
    pub const InternalInfo = objc.ExternalClass("NSScrubber", @This(), View, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn initWithFrame(self: *@This(), frameRect: foundation.Rect) *@This() {
        return objc.msgSend(self, "initWithFrame:", *@This(), .{frameRect});
    }

    pub fn initWithCoder(self: *@This(), coder: ?*foundation.Coder) *@This() {
        return objc.msgSend(self, "initWithCoder:", *@This(), .{coder});
    }

    pub fn reloadData(self: *@This()) void {
        return objc.msgSend(self, "reloadData", void, .{});
    }

    pub fn performSequentialBatchUpdates(self: *@This(), updateBlock: *const fn() callconv(.C) void) void {
        return objc.msgSend(self, "performSequentialBatchUpdates:", void, .{updateBlock});
    }

    pub fn insertItemsAtIndexes(self: *@This(), indexes: ?*IndexSet) void {
        return objc.msgSend(self, "insertItemsAtIndexes:", void, .{indexes});
    }

    pub fn removeItemsAtIndexes(self: *@This(), indexes: ?*IndexSet) void {
        return objc.msgSend(self, "removeItemsAtIndexes:", void, .{indexes});
    }

    pub fn reloadItemsAtIndexes(self: *@This(), indexes: ?*IndexSet) void {
        return objc.msgSend(self, "reloadItemsAtIndexes:", void, .{indexes});
    }

    pub fn moveItemAtIndexToIndex(self: *@This(), oldIndex: objc.NSInteger, newIndex: objc.NSInteger) void {
        return objc.msgSend(self, "moveItemAtIndex:toIndex:", void, .{oldIndex, newIndex});
    }

    pub fn scrollItemAtIndexToAlignment(self: *@This(), index: objc.NSInteger, alignment: ScrubberAlignment) void {
        return objc.msgSend(self, "scrollItemAtIndex:toAlignment:", void, .{index, alignment});
    }

    pub fn itemViewForItemAtIndex(self: *@This(), index: objc.NSInteger) ?*anyopaque {
        return objc.msgSend(self, "itemViewForItemAtIndex:", ?*anyopaque, .{index});
    }

    pub fn registerClassForItemIdentifier(self: *@This(), itemViewClass: *objc.Class, itemIdentifier: UserInterfaceItemIdentifier) void {
        return objc.msgSend(self, "registerClass:forItemIdentifier:", void, .{itemViewClass, itemIdentifier});
    }

    pub fn registerNibForItemIdentifier(self: *@This(), nib: ?*Nib, itemIdentifier: UserInterfaceItemIdentifier) void {
        return objc.msgSend(self, "registerNib:forItemIdentifier:", void, .{nib, itemIdentifier});
    }

    pub fn makeItemWithIdentifierOwner(self: *@This(), itemIdentifier: UserInterfaceItemIdentifier, owner: *objc.Id) ?*anyopaque {
        return objc.msgSend(self, "makeItemWithIdentifier:owner:", ?*anyopaque, .{itemIdentifier, owner});
    }

    pub fn dataSource(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "dataSource", ?*anyopaque, .{});
    }

    pub fn setDataSource(self: *@This(), dataSource: ?*anyopaque) void {
        return objc.msgSend(self, "setDataSource:", void, .{dataSource});
    }

    pub fn delegate(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "delegate", ?*anyopaque, .{});
    }

    pub fn setDelegate(self: *@This(), delegate: ?*anyopaque) void {
        return objc.msgSend(self, "setDelegate:", void, .{delegate});
    }

    pub fn scrubberLayout(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "scrubberLayout", ?*anyopaque, .{});
    }

    pub fn setScrubberLayout(self: *@This(), scrubberLayout: ?*anyopaque) void {
        return objc.msgSend(self, "setScrubberLayout:", void, .{scrubberLayout});
    }

    pub fn numberOfItems(self: *@This()) objc.NSInteger {
        return objc.msgSend(self, "numberOfItems", objc.NSInteger, .{});
    }

    pub fn highlightedIndex(self: *@This()) objc.NSInteger {
        return objc.msgSend(self, "highlightedIndex", objc.NSInteger, .{});
    }

    pub fn selectedIndex(self: *@This()) objc.NSInteger {
        return objc.msgSend(self, "selectedIndex", objc.NSInteger, .{});
    }

    pub fn setSelectedIndex(self: *@This(), selectedIndex: objc.NSInteger) void {
        return objc.msgSend(self, "setSelectedIndex:", void, .{selectedIndex});
    }

    pub fn mode(self: *@This()) ScrubberMode {
        return objc.msgSend(self, "mode", ScrubberMode, .{});
    }

    pub fn setMode(self: *@This(), mode: ScrubberMode) void {
        return objc.msgSend(self, "setMode:", void, .{mode});
    }

    pub fn itemAlignment(self: *@This()) ScrubberAlignment {
        return objc.msgSend(self, "itemAlignment", ScrubberAlignment, .{});
    }

    pub fn setItemAlignment(self: *@This(), itemAlignment: ScrubberAlignment) void {
        return objc.msgSend(self, "setItemAlignment:", void, .{itemAlignment});
    }

    pub fn isContinuous(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isContinuous", objc.BOOL, .{});
    }

    pub fn setContinuous(self: *@This(), continuous: objc.BOOL) void {
        return objc.msgSend(self, "setContinuous:", void, .{continuous});
    }

    pub fn floatsSelectionViews(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "floatsSelectionViews", objc.BOOL, .{});
    }

    pub fn setFloatsSelectionViews(self: *@This(), floatsSelectionViews: objc.BOOL) void {
        return objc.msgSend(self, "setFloatsSelectionViews:", void, .{floatsSelectionViews});
    }

    pub fn selectionBackgroundStyle(self: *@This()) ?*ScrubberSelectionStyle {
        return objc.msgSend(self, "selectionBackgroundStyle", ?*ScrubberSelectionStyle, .{});
    }

    pub fn setSelectionBackgroundStyle(self: *@This(), selectionBackgroundStyle: ?*ScrubberSelectionStyle) void {
        return objc.msgSend(self, "setSelectionBackgroundStyle:", void, .{selectionBackgroundStyle});
    }

    pub fn selectionOverlayStyle(self: *@This()) ?*ScrubberSelectionStyle {
        return objc.msgSend(self, "selectionOverlayStyle", ?*ScrubberSelectionStyle, .{});
    }

    pub fn setSelectionOverlayStyle(self: *@This(), selectionOverlayStyle: ?*ScrubberSelectionStyle) void {
        return objc.msgSend(self, "setSelectionOverlayStyle:", void, .{selectionOverlayStyle});
    }

    pub fn showsArrowButtons(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "showsArrowButtons", objc.BOOL, .{});
    }

    pub fn setShowsArrowButtons(self: *@This(), showsArrowButtons: objc.BOOL) void {
        return objc.msgSend(self, "setShowsArrowButtons:", void, .{showsArrowButtons});
    }

    pub fn showsAdditionalContentIndicators(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "showsAdditionalContentIndicators", objc.BOOL, .{});
    }

    pub fn setShowsAdditionalContentIndicators(self: *@This(), showsAdditionalContentIndicators: objc.BOOL) void {
        return objc.msgSend(self, "setShowsAdditionalContentIndicators:", void, .{showsAdditionalContentIndicators});
    }

    pub fn backgroundColor(self: *@This()) ?*Color {
        return objc.msgSend(self, "backgroundColor", ?*Color, .{});
    }

    pub fn setBackgroundColor(self: *@This(), backgroundColor: ?*Color) void {
        return objc.msgSend(self, "setBackgroundColor:", void, .{backgroundColor});
    }

    pub fn backgroundView(self: *@This()) ?*View {
        return objc.msgSend(self, "backgroundView", ?*View, .{});
    }

    pub fn setBackgroundView(self: *@This(), backgroundView: ?*View) void {
        return objc.msgSend(self, "setBackgroundView:", void, .{backgroundView});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSScrubberArrangedView?language=objc
pub const ScrubberArrangedView = opaque {
    pub const InternalInfo = objc.ExternalClass("NSScrubberArrangedView", @This(), View, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn applyLayoutAttributes(self: *@This(), layoutAttributes: ?*anyopaque) void {
        return objc.msgSend(self, "applyLayoutAttributes:", void, .{layoutAttributes});
    }

    pub fn isSelected(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isSelected", objc.BOOL, .{});
    }

    pub fn setSelected(self: *@This(), selected: objc.BOOL) void {
        return objc.msgSend(self, "setSelected:", void, .{selected});
    }

    pub fn isHighlighted(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isHighlighted", objc.BOOL, .{});
    }

    pub fn setHighlighted(self: *@This(), highlighted: objc.BOOL) void {
        return objc.msgSend(self, "setHighlighted:", void, .{highlighted});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSScrubberSelectionView?language=objc
pub const ScrubberSelectionView = opaque {
    pub const InternalInfo = objc.ExternalClass("NSScrubberSelectionView", @This(), ScrubberArrangedView, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;
};

/// https://developer.apple.com/documentation/AppKit/NSScrubberItemView?language=objc
pub const ScrubberItemView = opaque {
    pub const InternalInfo = objc.ExternalClass("NSScrubberItemView", @This(), ScrubberArrangedView, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;
};

/// https://developer.apple.com/documentation/AppKit/NSScrubberTextItemView?language=objc
pub const ScrubberTextItemView = opaque {
    pub const InternalInfo = objc.ExternalClass("NSScrubberTextItemView", @This(), ScrubberItemView, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn textField(self: *@This()) ?*TextField {
        return objc.msgSend(self, "textField", ?*TextField, .{});
    }

    pub fn title(self: *@This()) ?*String {
        return objc.msgSend(self, "title", ?*String, .{});
    }

    pub fn setTitle(self: *@This(), title: ?*String) void {
        return objc.msgSend(self, "setTitle:", void, .{title});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSScrubberImageItemView?language=objc
pub const ScrubberImageItemView = opaque {
    pub const InternalInfo = objc.ExternalClass("NSScrubberImageItemView", @This(), ScrubberItemView, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn imageView(self: *@This()) ?*ImageView {
        return objc.msgSend(self, "imageView", ?*ImageView, .{});
    }

    pub fn image(self: *@This()) ?*Image {
        return objc.msgSend(self, "image", ?*Image, .{});
    }

    pub fn setImage(self: *@This(), image: ?*Image) void {
        return objc.msgSend(self, "setImage:", void, .{image});
    }

    pub fn imageAlignment(self: *@This()) ImageAlignment {
        return objc.msgSend(self, "imageAlignment", ImageAlignment, .{});
    }

    pub fn setImageAlignment(self: *@This(), imageAlignment: ImageAlignment) void {
        return objc.msgSend(self, "setImageAlignment:", void, .{imageAlignment});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSScrubberLayoutAttributes?language=objc
pub const ScrubberLayoutAttributes = opaque {
    pub const InternalInfo = objc.ExternalClass("NSScrubberLayoutAttributes", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn layoutAttributesForItemAtIndex(self: *@This(), index: objc.NSInteger) *@This() {
        return objc.msgSend(self, "layoutAttributesForItemAtIndex:", *@This(), .{index});
    }

    pub fn itemIndex(self: *@This()) objc.NSInteger {
        return objc.msgSend(self, "itemIndex", objc.NSInteger, .{});
    }

    pub fn setItemIndex(self: *@This(), itemIndex: objc.NSInteger) void {
        return objc.msgSend(self, "setItemIndex:", void, .{itemIndex});
    }

    pub fn frame(self: *@This()) foundation.Rect {
        return objc.msgSend(self, "frame", foundation.Rect, .{});
    }

    pub fn setFrame(self: *@This(), frame: foundation.Rect) void {
        return objc.msgSend(self, "setFrame:", void, .{frame});
    }

    pub fn alpha(self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(self, "alpha", core_foundation.CGFloat, .{});
    }

    pub fn setAlpha(self: *@This(), alpha: core_foundation.CGFloat) void {
        return objc.msgSend(self, "setAlpha:", void, .{alpha});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSScrubberLayout?language=objc
pub const ScrubberLayout = opaque {
    pub const InternalInfo = objc.ExternalClass("NSScrubberLayout", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn init(self: *@This()) *@This() {
        return objc.msgSend(self, "init", *@This(), .{});
    }

    pub fn initWithCoder(self: *@This(), coder: ?*foundation.Coder) *@This() {
        return objc.msgSend(self, "initWithCoder:", *@This(), .{coder});
    }

    pub fn invalidateLayout(self: *@This()) void {
        return objc.msgSend(self, "invalidateLayout", void, .{});
    }

    pub fn prepareLayout(self: *@This()) void {
        return objc.msgSend(self, "prepareLayout", void, .{});
    }

    pub fn layoutAttributesForItemAtIndex(self: *@This(), index: objc.NSInteger) ?*anyopaque {
        return objc.msgSend(self, "layoutAttributesForItemAtIndex:", ?*anyopaque, .{index});
    }

    pub fn layoutAttributesForItemsInRect(self: *@This(), rect: foundation.Rect) ?*anyopaque {
        return objc.msgSend(self, "layoutAttributesForItemsInRect:", ?*anyopaque, .{rect});
    }

    pub fn shouldInvalidateLayoutForChangeFromVisibleRectToVisibleRect(self: *@This(), fromVisibleRect: foundation.Rect, toVisibleRect: foundation.Rect) objc.BOOL {
        return objc.msgSend(self, "shouldInvalidateLayoutForChangeFromVisibleRect:toVisibleRect:", objc.BOOL, .{fromVisibleRect, toVisibleRect});
    }

    pub fn layoutAttributesClass(self: *@This()) *objc.Class {
        return objc.msgSend(self, "layoutAttributesClass", *objc.Class, .{});
    }

    pub fn scrubber(self: *@This()) ?*Scrubber {
        return objc.msgSend(self, "scrubber", ?*Scrubber, .{});
    }

    pub fn visibleRect(self: *@This()) foundation.Rect {
        return objc.msgSend(self, "visibleRect", foundation.Rect, .{});
    }

    pub fn scrubberContentSize(self: *@This()) foundation.Size {
        return objc.msgSend(self, "scrubberContentSize", foundation.Size, .{});
    }

    pub fn shouldInvalidateLayoutForSelectionChange(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "shouldInvalidateLayoutForSelectionChange", objc.BOOL, .{});
    }

    pub fn shouldInvalidateLayoutForHighlightChange(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "shouldInvalidateLayoutForHighlightChange", objc.BOOL, .{});
    }

    pub fn automaticallyMirrorsInRightToLeftLayout(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "automaticallyMirrorsInRightToLeftLayout", objc.BOOL, .{});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSScrubberFlowLayoutDelegate?language=objc
pub const ScrubberFlowLayoutDelegate = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{ScrubberDelegate, });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn scrubberLayoutSizeForItemAtIndex(self: *@This(), scrubber: ?*Scrubber, layout: ?*ScrubberFlowLayout, itemIndex: objc.NSInteger) foundation.Size {
        return objc.msgSend(self, "scrubber:layout:sizeForItemAtIndex:", foundation.Size, .{scrubber, layout, itemIndex});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSScrubberFlowLayout?language=objc
pub const ScrubberFlowLayout = opaque {
    pub const InternalInfo = objc.ExternalClass("NSScrubberFlowLayout", @This(), ScrubberLayout, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn invalidateLayoutForItemsAtIndexes(self: *@This(), invalidItemIndexes: ?*IndexSet) void {
        return objc.msgSend(self, "invalidateLayoutForItemsAtIndexes:", void, .{invalidItemIndexes});
    }

    pub fn itemSpacing(self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(self, "itemSpacing", core_foundation.CGFloat, .{});
    }

    pub fn setItemSpacing(self: *@This(), itemSpacing: core_foundation.CGFloat) void {
        return objc.msgSend(self, "setItemSpacing:", void, .{itemSpacing});
    }

    pub fn itemSize(self: *@This()) foundation.Size {
        return objc.msgSend(self, "itemSize", foundation.Size, .{});
    }

    pub fn setItemSize(self: *@This(), itemSize: foundation.Size) void {
        return objc.msgSend(self, "setItemSize:", void, .{itemSize});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSScrubberProportionalLayout?language=objc
pub const ScrubberProportionalLayout = opaque {
    pub const InternalInfo = objc.ExternalClass("NSScrubberProportionalLayout", @This(), ScrubberLayout, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn initWithNumberOfVisibleItems(self: *@This(), numberOfVisibleItems: objc.NSInteger) *@This() {
        return objc.msgSend(self, "initWithNumberOfVisibleItems:", *@This(), .{numberOfVisibleItems});
    }

    pub fn initWithCoder(self: *@This(), coder: ?*foundation.Coder) *@This() {
        return objc.msgSend(self, "initWithCoder:", *@This(), .{coder});
    }

    pub fn numberOfVisibleItems(self: *@This()) objc.NSInteger {
        return objc.msgSend(self, "numberOfVisibleItems", objc.NSInteger, .{});
    }

    pub fn setNumberOfVisibleItems(self: *@This(), numberOfVisibleItems: objc.NSInteger) void {
        return objc.msgSend(self, "setNumberOfVisibleItems:", void, .{numberOfVisibleItems});
    }

};

pub const SharingServiceName = ?*String;

/// https://developer.apple.com/documentation/AppKit/NSSharingService?language=objc
pub const SharingService = opaque {
    pub const InternalInfo = objc.ExternalClass("NSSharingService", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn sharingServicesForItems(self: *@This(), items: ?*Array) ?*anyopaque {
        return objc.msgSend(self, "sharingServicesForItems:", ?*anyopaque, .{items});
    }

    pub fn sharingServiceNamed(self: *@This(), serviceName: SharingServiceName) ?*SharingService {
        return objc.msgSend(self, "sharingServiceNamed:", ?*SharingService, .{serviceName});
    }

    pub fn initWithTitleImageAlternateImageHandler(self: *@This(), title: ?*String, image: ?*Image, alternateImage: ?*Image, block: *const fn() callconv(.C) void, ) *@This() {
        return objc.msgSend(self, "initWithTitle:image:alternateImage:handler:", *@This(), .{title, image, alternateImage, block, });
    }

    pub fn init(self: *@This()) *@This() {
        return objc.msgSend(self, "init", *@This(), .{});
    }

    pub fn canPerformWithItems(self: *@This(), items: ?*Array) objc.BOOL {
        return objc.msgSend(self, "canPerformWithItems:", objc.BOOL, .{items});
    }

    pub fn performWithItems(self: *@This(), items: ?*Array) void {
        return objc.msgSend(self, "performWithItems:", void, .{items});
    }

    pub fn delegate(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "delegate", ?*anyopaque, .{});
    }

    pub fn setDelegate(self: *@This(), delegate: ?*anyopaque) void {
        return objc.msgSend(self, "setDelegate:", void, .{delegate});
    }

    pub fn title(self: *@This()) ?*String {
        return objc.msgSend(self, "title", ?*String, .{});
    }

    pub fn image(self: *@This()) ?*Image {
        return objc.msgSend(self, "image", ?*Image, .{});
    }

    pub fn alternateImage(self: *@This()) ?*Image {
        return objc.msgSend(self, "alternateImage", ?*Image, .{});
    }

    pub fn menuItemTitle(self: *@This()) ?*String {
        return objc.msgSend(self, "menuItemTitle", ?*String, .{});
    }

    pub fn setMenuItemTitle(self: *@This(), menuItemTitle: ?*String) void {
        return objc.msgSend(self, "setMenuItemTitle:", void, .{menuItemTitle});
    }

    pub fn recipients(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "recipients", ?*anyopaque, .{});
    }

    pub fn setRecipients(self: *@This(), recipients: ?*anyopaque) void {
        return objc.msgSend(self, "setRecipients:", void, .{recipients});
    }

    pub fn subject(self: *@This()) ?*String {
        return objc.msgSend(self, "subject", ?*String, .{});
    }

    pub fn setSubject(self: *@This(), subject: ?*String) void {
        return objc.msgSend(self, "setSubject:", void, .{subject});
    }

    pub fn messageBody(self: *@This()) ?*String {
        return objc.msgSend(self, "messageBody", ?*String, .{});
    }

    pub fn permanentLink(self: *@This()) ?*URL {
        return objc.msgSend(self, "permanentLink", ?*URL, .{});
    }

    pub fn accountName(self: *@This()) ?*String {
        return objc.msgSend(self, "accountName", ?*String, .{});
    }

    pub fn attachmentFileURLs(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "attachmentFileURLs", ?*anyopaque, .{});
    }

};

pub const SharingContentScope = enum(objc.NSInteger) {
    Item = 0,
    Partial = 1,
    Full = 2,
};

/// https://developer.apple.com/documentation/AppKit/NSSharingServiceDelegate?language=objc
pub const SharingServiceDelegate = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{objc.NSObject, });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn sharingServiceWillShareItems(self: *@This(), sharingService: ?*SharingService, items: ?*Array) void {
        return objc.msgSend(self, "sharingService:willShareItems:", void, .{sharingService, items});
    }

    pub fn sharingServiceDidFailToShareItemsError(self: *@This(), sharingService: ?*SharingService, items: ?*Array, @"error": ?*Error) void {
        return objc.msgSend(self, "sharingService:didFailToShareItems:error:", void, .{sharingService, items, @"error"});
    }

    pub fn sharingServiceDidShareItems(self: *@This(), sharingService: ?*SharingService, items: ?*Array) void {
        return objc.msgSend(self, "sharingService:didShareItems:", void, .{sharingService, items});
    }

    pub fn sharingServiceSourceFrameOnScreenForShareItem(self: *@This(), sharingService: ?*SharingService, item: *objc.Id) foundation.Rect {
        return objc.msgSend(self, "sharingService:sourceFrameOnScreenForShareItem:", foundation.Rect, .{sharingService, item});
    }

    pub fn sharingServiceTransitionImageForShareItemContentRect(self: *@This(), sharingService: ?*SharingService, item: *objc.Id, contentRect: ?*foundation.Rect) ?*Image {
        return objc.msgSend(self, "sharingService:transitionImageForShareItem:contentRect:", ?*Image, .{sharingService, item, contentRect});
    }

    pub fn sharingServiceSourceWindowForShareItemsSharingContentScope(self: *@This(), sharingService: ?*SharingService, items: ?*Array, sharingContentScope: ?*SharingContentScope) ?*Window {
        return objc.msgSend(self, "sharingService:sourceWindowForShareItems:sharingContentScope:", ?*Window, .{sharingService, items, sharingContentScope});
    }

    pub fn anchoringViewForSharingServiceShowRelativeToRectPreferredEdge(self: *@This(), sharingService: ?*SharingService, positioningRect: ?*foundation.Rect, preferredEdge: ?*foundation.RectEdge) ?*View {
        return objc.msgSend(self, "anchoringViewForSharingService:showRelativeToRect:preferredEdge:", ?*View, .{sharingService, positioningRect, preferredEdge});
    }

};

pub const CloudKitSharingServiceOptions = enum(objc.NSUInteger) {
    Standard = 0,
    AllowPublic = 1,
    AllowPrivate = 2,
    AllowReadOnly = 16,
    AllowReadWrite = 32,
};

/// https://developer.apple.com/documentation/AppKit/NSCloudSharingServiceDelegate?language=objc
pub const CloudSharingServiceDelegate = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{SharingServiceDelegate, });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn sharingServiceDidCompleteForItemsError(self: *@This(), sharingService: ?*SharingService, items: ?*Array, @"error": ?*Error) void {
        return objc.msgSend(self, "sharingService:didCompleteForItems:error:", void, .{sharingService, items, @"error"});
    }

    pub fn optionsForSharingServiceShareProvider(self: *@This(), cloudKitSharingService: ?*SharingService, provider: ?*ItemProvider) CloudKitSharingServiceOptions {
        return objc.msgSend(self, "optionsForSharingService:shareProvider:", CloudKitSharingServiceOptions, .{cloudKitSharingService, provider});
    }

    pub fn sharingServiceDidSaveShare(self: *@This(), sharingService: ?*SharingService, share: ?*CKShare) void {
        return objc.msgSend(self, "sharingService:didSaveShare:", void, .{sharingService, share});
    }

    pub fn sharingServiceDidStopSharing(self: *@This(), sharingService: ?*SharingService, share: ?*CKShare) void {
        return objc.msgSend(self, "sharingService:didStopSharing:", void, .{sharingService, share});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSSharingServicePicker?language=objc
pub const SharingServicePicker = opaque {
    pub const InternalInfo = objc.ExternalClass("NSSharingServicePicker", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn initWithItems(self: *@This(), items: ?*Array) *@This() {
        return objc.msgSend(self, "initWithItems:", *@This(), .{items});
    }

    pub fn init(self: *@This()) *@This() {
        return objc.msgSend(self, "init", *@This(), .{});
    }

    pub fn showRelativeToRectOfViewPreferredEdge(self: *@This(), rect: foundation.Rect, view: ?*View, preferredEdge: foundation.RectEdge) void {
        return objc.msgSend(self, "showRelativeToRect:ofView:preferredEdge:", void, .{rect, view, preferredEdge});
    }

    pub fn close(self: *@This()) void {
        return objc.msgSend(self, "close", void, .{});
    }

    pub fn delegate(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "delegate", ?*anyopaque, .{});
    }

    pub fn setDelegate(self: *@This(), delegate: ?*anyopaque) void {
        return objc.msgSend(self, "setDelegate:", void, .{delegate});
    }

    pub fn standardShareMenuItem(self: *@This()) ?*MenuItem {
        return objc.msgSend(self, "standardShareMenuItem", ?*MenuItem, .{});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSSharingServicePickerDelegate?language=objc
pub const SharingServicePickerDelegate = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{objc.NSObject, });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn sharingServicePickerSharingServicesForItemsProposedSharingServices(self: *@This(), sharingServicePicker: ?*SharingServicePicker, items: ?*Array, proposedServices: ?*anyopaque) ?*anyopaque {
        return objc.msgSend(self, "sharingServicePicker:sharingServicesForItems:proposedSharingServices:", ?*anyopaque, .{sharingServicePicker, items, proposedServices});
    }

    pub fn sharingServicePickerDelegateForSharingService(self: *@This(), sharingServicePicker: ?*SharingServicePicker, sharingService: ?*SharingService) ?*anyopaque {
        return objc.msgSend(self, "sharingServicePicker:delegateForSharingService:", ?*anyopaque, .{sharingServicePicker, sharingService});
    }

    pub fn sharingServicePickerDidChooseSharingService(self: *@This(), sharingServicePicker: ?*SharingServicePicker, service: ?*SharingService) void {
        return objc.msgSend(self, "sharingServicePicker:didChooseSharingService:", void, .{sharingServicePicker, service});
    }

    pub fn sharingServicePickerCollaborationModeRestrictions(self: *@This(), sharingServicePicker: ?*SharingServicePicker) ?*anyopaque {
        return objc.msgSend(self, "sharingServicePickerCollaborationModeRestrictions:", ?*anyopaque, .{sharingServicePicker});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSSharingServicePickerTouchBarItem?language=objc
pub const SharingServicePickerTouchBarItem = opaque {
    pub const InternalInfo = objc.ExternalClass("NSSharingServicePickerTouchBarItem", @This(), TouchBarItem, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn delegate(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "delegate", ?*anyopaque, .{});
    }

    pub fn setDelegate(self: *@This(), delegate: ?*anyopaque) void {
        return objc.msgSend(self, "setDelegate:", void, .{delegate});
    }

    pub fn isEnabled(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isEnabled", objc.BOOL, .{});
    }

    pub fn setEnabled(self: *@This(), enabled: objc.BOOL) void {
        return objc.msgSend(self, "setEnabled:", void, .{enabled});
    }

    pub fn buttonTitle(self: *@This()) ?*String {
        return objc.msgSend(self, "buttonTitle", ?*String, .{});
    }

    pub fn setButtonTitle(self: *@This(), buttonTitle: ?*String) void {
        return objc.msgSend(self, "setButtonTitle:", void, .{buttonTitle});
    }

    pub fn buttonImage(self: *@This()) ?*Image {
        return objc.msgSend(self, "buttonImage", ?*Image, .{});
    }

    pub fn setButtonImage(self: *@This(), buttonImage: ?*Image) void {
        return objc.msgSend(self, "setButtonImage:", void, .{buttonImage});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSSharingServicePickerTouchBarItemDelegate?language=objc
pub const SharingServicePickerTouchBarItemDelegate = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{SharingServicePickerDelegate, });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn itemsForSharingServicePickerTouchBarItem(self: *@This(), pickerTouchBarItem: ?*SharingServicePickerTouchBarItem) ?*Array {
        return objc.msgSend(self, "itemsForSharingServicePickerTouchBarItem:", ?*Array, .{pickerTouchBarItem});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSSliderAccessory?language=objc
pub const SliderAccessory = opaque {
    pub const InternalInfo = objc.ExternalClass("NSSliderAccessory", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn accessoryWithImage(self: *@This(), image: ?*Image) ?*SliderAccessory {
        return objc.msgSend(self, "accessoryWithImage:", ?*SliderAccessory, .{image});
    }

    pub fn behavior(self: *@This()) ?*SliderAccessoryBehavior {
        return objc.msgSend(self, "behavior", ?*SliderAccessoryBehavior, .{});
    }

    pub fn setBehavior(self: *@This(), behavior: ?*SliderAccessoryBehavior) void {
        return objc.msgSend(self, "setBehavior:", void, .{behavior});
    }

    pub fn isEnabled(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isEnabled", objc.BOOL, .{});
    }

    pub fn setEnabled(self: *@This(), enabled: objc.BOOL) void {
        return objc.msgSend(self, "setEnabled:", void, .{enabled});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSSliderAccessoryBehavior?language=objc
pub const SliderAccessoryBehavior = opaque {
    pub const InternalInfo = objc.ExternalClass("NSSliderAccessoryBehavior", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn behaviorWithTargetAction(self: *@This(), target: *objc.Id, action: *objc.SEL) ?*SliderAccessoryBehavior {
        return objc.msgSend(self, "behaviorWithTarget:action:", ?*SliderAccessoryBehavior, .{target, action});
    }

    pub fn behaviorWithHandler(self: *@This(), handler: *const fn(?*SliderAccessory) callconv(.C) void) ?*SliderAccessoryBehavior {
        return objc.msgSend(self, "behaviorWithHandler:", ?*SliderAccessoryBehavior, .{handler});
    }

    pub fn handleAction(self: *@This(), sender: ?*SliderAccessory) void {
        return objc.msgSend(self, "handleAction:", void, .{sender});
    }

    pub fn automaticBehavior(self: *@This()) ?*SliderAccessoryBehavior {
        return objc.msgSend(self, "automaticBehavior", ?*SliderAccessoryBehavior, .{});
    }

    pub fn valueStepBehavior(self: *@This()) ?*SliderAccessoryBehavior {
        return objc.msgSend(self, "valueStepBehavior", ?*SliderAccessoryBehavior, .{});
    }

    pub fn valueResetBehavior(self: *@This()) ?*SliderAccessoryBehavior {
        return objc.msgSend(self, "valueResetBehavior", ?*SliderAccessoryBehavior, .{});
    }

};

pub const SliderAccessoryWidth = core_foundation.CGFloat;

/// https://developer.apple.com/documentation/AppKit/NSSliderTouchBarItem?language=objc
pub const SliderTouchBarItem = opaque {
    pub const InternalInfo = objc.ExternalClass("NSSliderTouchBarItem", @This(), TouchBarItem, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn view(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "view", ?*anyopaque, .{});
    }

    pub fn slider(self: *@This()) ?*Slider {
        return objc.msgSend(self, "slider", ?*Slider, .{});
    }

    pub fn setSlider(self: *@This(), slider: ?*Slider) void {
        return objc.msgSend(self, "setSlider:", void, .{slider});
    }

    pub fn doubleValue(self: *@This()) f64 {
        return objc.msgSend(self, "doubleValue", f64, .{});
    }

    pub fn setDoubleValue(self: *@This(), doubleValue: f64) void {
        return objc.msgSend(self, "setDoubleValue:", void, .{doubleValue});
    }

    pub fn minimumSliderWidth(self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(self, "minimumSliderWidth", core_foundation.CGFloat, .{});
    }

    pub fn setMinimumSliderWidth(self: *@This(), minimumSliderWidth: core_foundation.CGFloat) void {
        return objc.msgSend(self, "setMinimumSliderWidth:", void, .{minimumSliderWidth});
    }

    pub fn maximumSliderWidth(self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(self, "maximumSliderWidth", core_foundation.CGFloat, .{});
    }

    pub fn setMaximumSliderWidth(self: *@This(), maximumSliderWidth: core_foundation.CGFloat) void {
        return objc.msgSend(self, "setMaximumSliderWidth:", void, .{maximumSliderWidth});
    }

    pub fn label(self: *@This()) ?*String {
        return objc.msgSend(self, "label", ?*String, .{});
    }

    pub fn setLabel(self: *@This(), label: ?*String) void {
        return objc.msgSend(self, "setLabel:", void, .{label});
    }

    pub fn minimumValueAccessory(self: *@This()) ?*SliderAccessory {
        return objc.msgSend(self, "minimumValueAccessory", ?*SliderAccessory, .{});
    }

    pub fn setMinimumValueAccessory(self: *@This(), minimumValueAccessory: ?*SliderAccessory) void {
        return objc.msgSend(self, "setMinimumValueAccessory:", void, .{minimumValueAccessory});
    }

    pub fn maximumValueAccessory(self: *@This()) ?*SliderAccessory {
        return objc.msgSend(self, "maximumValueAccessory", ?*SliderAccessory, .{});
    }

    pub fn setMaximumValueAccessory(self: *@This(), maximumValueAccessory: ?*SliderAccessory) void {
        return objc.msgSend(self, "setMaximumValueAccessory:", void, .{maximumValueAccessory});
    }

    pub fn valueAccessoryWidth(self: *@This()) SliderAccessoryWidth {
        return objc.msgSend(self, "valueAccessoryWidth", SliderAccessoryWidth, .{});
    }

    pub fn setValueAccessoryWidth(self: *@This(), valueAccessoryWidth: SliderAccessoryWidth) void {
        return objc.msgSend(self, "setValueAccessoryWidth:", void, .{valueAccessoryWidth});
    }

    pub fn target(self: *@This()) *objc.Id {
        return objc.msgSend(self, "target", *objc.Id, .{});
    }

    pub fn setTarget(self: *@This(), target: *objc.Id) void {
        return objc.msgSend(self, "setTarget:", void, .{target});
    }

    pub fn action(self: *@This()) *objc.SEL {
        return objc.msgSend(self, "action", *objc.SEL, .{});
    }

    pub fn setAction(self: *@This(), action: *objc.SEL) void {
        return objc.msgSend(self, "setAction:", void, .{action});
    }

    pub fn customizationLabel(self: *@This()) ?*String {
        return objc.msgSend(self, "customizationLabel", ?*String, .{});
    }

    pub fn setCustomizationLabel(self: *@This(), customizationLabel: ?*String) void {
        return objc.msgSend(self, "setCustomizationLabel:", void, .{customizationLabel});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSSpeechRecognizer?language=objc
pub const SpeechRecognizer = opaque {
    pub const InternalInfo = objc.ExternalClass("NSSpeechRecognizer", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn init(self: *@This()) *@This() {
        return objc.msgSend(self, "init", *@This(), .{});
    }

    pub fn startListening(self: *@This()) void {
        return objc.msgSend(self, "startListening", void, .{});
    }

    pub fn stopListening(self: *@This()) void {
        return objc.msgSend(self, "stopListening", void, .{});
    }

    pub fn delegate(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "delegate", ?*anyopaque, .{});
    }

    pub fn setDelegate(self: *@This(), delegate: ?*anyopaque) void {
        return objc.msgSend(self, "setDelegate:", void, .{delegate});
    }

    pub fn commands(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "commands", ?*anyopaque, .{});
    }

    pub fn setCommands(self: *@This(), commands: ?*anyopaque) void {
        return objc.msgSend(self, "setCommands:", void, .{commands});
    }

    pub fn displayedCommandsTitle(self: *@This()) ?*String {
        return objc.msgSend(self, "displayedCommandsTitle", ?*String, .{});
    }

    pub fn setDisplayedCommandsTitle(self: *@This(), displayedCommandsTitle: ?*String) void {
        return objc.msgSend(self, "setDisplayedCommandsTitle:", void, .{displayedCommandsTitle});
    }

    pub fn listensInForegroundOnly(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "listensInForegroundOnly", objc.BOOL, .{});
    }

    pub fn setListensInForegroundOnly(self: *@This(), listensInForegroundOnly: objc.BOOL) void {
        return objc.msgSend(self, "setListensInForegroundOnly:", void, .{listensInForegroundOnly});
    }

    pub fn blocksOtherRecognizers(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "blocksOtherRecognizers", objc.BOOL, .{});
    }

    pub fn setBlocksOtherRecognizers(self: *@This(), blocksOtherRecognizers: objc.BOOL) void {
        return objc.msgSend(self, "setBlocksOtherRecognizers:", void, .{blocksOtherRecognizers});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSSpeechRecognizerDelegate?language=objc
pub const SpeechRecognizerDelegate = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{objc.NSObject, });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn speechRecognizerDidRecognizeCommand(self: *@This(), sender: ?*SpeechRecognizer, command: ?*String) void {
        return objc.msgSend(self, "speechRecognizer:didRecognizeCommand:", void, .{sender, command});
    }

};

pub const SpeechSynthesizerVoiceName = ?*String;

pub const VoiceAttributeKey = ?*String;

pub const SpeechDictionaryKey = ?*String;

pub const VoiceGenderName = ?*String;

pub const SpeechPropertyKey = ?*String;

pub const SpeechBoundary = enum(objc.NSUInteger) {
    ImmediateBoundary = 0,
    WordBoundary = 1,
    SentenceBoundary = 2,
};

/// https://developer.apple.com/documentation/AppKit/NSSpeechSynthesizer?language=objc
pub const SpeechSynthesizer = opaque {
    pub const InternalInfo = objc.ExternalClass("NSSpeechSynthesizer", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn initWithVoice(self: *@This(), voice: SpeechSynthesizerVoiceName) *@This() {
        return objc.msgSend(self, "initWithVoice:", *@This(), .{voice});
    }

    pub fn startSpeakingString(self: *@This(), string: ?*String) objc.BOOL {
        return objc.msgSend(self, "startSpeakingString:", objc.BOOL, .{string});
    }

    pub fn startSpeakingStringToURL(self: *@This(), string: ?*String, url: ?*URL) objc.BOOL {
        return objc.msgSend(self, "startSpeakingString:toURL:", objc.BOOL, .{string, url});
    }

    pub fn stopSpeaking(self: *@This()) void {
        return objc.msgSend(self, "stopSpeaking", void, .{});
    }

    pub fn stopSpeakingAtBoundary(self: *@This(), boundary: SpeechBoundary) void {
        return objc.msgSend(self, "stopSpeakingAtBoundary:", void, .{boundary});
    }

    pub fn pauseSpeakingAtBoundary(self: *@This(), boundary: SpeechBoundary) void {
        return objc.msgSend(self, "pauseSpeakingAtBoundary:", void, .{boundary});
    }

    pub fn continueSpeaking(self: *@This()) void {
        return objc.msgSend(self, "continueSpeaking", void, .{});
    }

    pub fn voice(self: *@This()) SpeechSynthesizerVoiceName {
        return objc.msgSend(self, "voice", SpeechSynthesizerVoiceName, .{});
    }

    pub fn setVoice(self: *@This(), voice: SpeechSynthesizerVoiceName) objc.BOOL {
        return objc.msgSend(self, "setVoice:", objc.BOOL, .{voice});
    }

    pub fn addSpeechDictionary(self: *@This(), speechDictionary: ?*anyopaque) void {
        return objc.msgSend(self, "addSpeechDictionary:", void, .{speechDictionary});
    }

    pub fn phonemesFromText(self: *@This(), text: ?*String) ?*String {
        return objc.msgSend(self, "phonemesFromText:", ?*String, .{text});
    }

    pub fn objectForPropertyError(self: *@This(), property: SpeechPropertyKey, outError: ?*?*Error) *objc.Id {
        return objc.msgSend(self, "objectForProperty:error:", *objc.Id, .{property, outError});
    }

    pub fn setObjectForPropertyError(self: *@This(), object: *objc.Id, property: SpeechPropertyKey, outError: ?*?*Error) objc.BOOL {
        return objc.msgSend(self, "setObject:forProperty:error:", objc.BOOL, .{object, property, outError});
    }

    pub fn attributesForVoice(self: *@This(), voice: SpeechSynthesizerVoiceName) ?*anyopaque {
        return objc.msgSend(self, "attributesForVoice:", ?*anyopaque, .{voice});
    }

    pub fn isSpeaking(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isSpeaking", objc.BOOL, .{});
    }

    pub fn delegate(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "delegate", ?*anyopaque, .{});
    }

    pub fn setDelegate(self: *@This(), delegate: ?*anyopaque) void {
        return objc.msgSend(self, "setDelegate:", void, .{delegate});
    }

    pub fn rate(self: *@This()) f32 {
        return objc.msgSend(self, "rate", f32, .{});
    }

    pub fn setRate(self: *@This(), rate: f32) void {
        return objc.msgSend(self, "setRate:", void, .{rate});
    }

    pub fn volume(self: *@This()) f32 {
        return objc.msgSend(self, "volume", f32, .{});
    }

    pub fn setVolume(self: *@This(), volume: f32) void {
        return objc.msgSend(self, "setVolume:", void, .{volume});
    }

    pub fn usesFeedbackWindow(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "usesFeedbackWindow", objc.BOOL, .{});
    }

    pub fn setUsesFeedbackWindow(self: *@This(), usesFeedbackWindow: objc.BOOL) void {
        return objc.msgSend(self, "setUsesFeedbackWindow:", void, .{usesFeedbackWindow});
    }

    pub fn isAnyApplicationSpeaking(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isAnyApplicationSpeaking", objc.BOOL, .{});
    }

    pub fn defaultVoice(self: *@This()) SpeechSynthesizerVoiceName {
        return objc.msgSend(self, "defaultVoice", SpeechSynthesizerVoiceName, .{});
    }

    pub fn availableVoices(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "availableVoices", ?*anyopaque, .{});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSSpeechSynthesizerDelegate?language=objc
pub const SpeechSynthesizerDelegate = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{objc.NSObject, });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn speechSynthesizerDidFinishSpeaking(self: *@This(), sender: ?*SpeechSynthesizer, finishedSpeaking: objc.BOOL) void {
        return objc.msgSend(self, "speechSynthesizer:didFinishSpeaking:", void, .{sender, finishedSpeaking});
    }

    pub fn speechSynthesizerWillSpeakWordOfString(self: *@This(), sender: ?*SpeechSynthesizer, characterRange: foundation.Range, string: ?*String) void {
        return objc.msgSend(self, "speechSynthesizer:willSpeakWord:ofString:", void, .{sender, characterRange, string});
    }

    pub fn speechSynthesizerWillSpeakPhoneme(self: *@This(), sender: ?*SpeechSynthesizer, phonemeOpcode: i16) void {
        return objc.msgSend(self, "speechSynthesizer:willSpeakPhoneme:", void, .{sender, phonemeOpcode});
    }

    pub fn speechSynthesizerDidEncounterErrorAtIndexOfStringMessage(self: *@This(), sender: ?*SpeechSynthesizer, characterIndex: objc.NSUInteger, string: ?*String, message: ?*String, ) void {
        return objc.msgSend(self, "speechSynthesizer:didEncounterErrorAtIndex:ofString:message:", void, .{sender, characterIndex, string, message, });
    }

    pub fn speechSynthesizerDidEncounterSyncMessage(self: *@This(), sender: ?*SpeechSynthesizer, message: ?*String) void {
        return objc.msgSend(self, "speechSynthesizer:didEncounterSyncMessage:", void, .{sender, message});
    }

};

pub const SpeechMode = ?*String;

pub const SpeechStatusKey = ?*String;

pub const SpeechErrorKey = ?*String;

pub const SpeechSynthesizerInfoKey = ?*String;

pub const SpeechPhonemeInfoKey = ?*String;

pub const SpeechCommandDelimiterKey = ?*String;

pub const TextCheckingOptionKey = ?*String;

/// https://developer.apple.com/documentation/AppKit/NSSpellChecker?language=objc
pub const SpellChecker = opaque {
    pub const InternalInfo = objc.ExternalClass("NSSpellChecker", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn sharedSpellChecker(self: *@This()) ?*SpellChecker {
        return objc.msgSend(self, "sharedSpellChecker", ?*SpellChecker, .{});
    }

    pub fn sharedSpellCheckerExists(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "sharedSpellCheckerExists", objc.BOOL, .{});
    }

    pub fn uniqueSpellDocumentTag(self: *@This()) objc.NSInteger {
        return objc.msgSend(self, "uniqueSpellDocumentTag", objc.NSInteger, .{});
    }

    pub fn checkSpellingOfStringStartingAtLanguageWrapInSpellDocumentWithTagWordCount(self: *@This(), stringToCheck: ?*String, startingOffset: objc.NSInteger, language: ?*String, wrapFlag: objc.BOOL, tag: objc.NSInteger, wordCount: ?*objc.NSInteger, ) foundation.Range {
        return objc.msgSend(self, "checkSpellingOfString:startingAt:language:wrap:inSpellDocumentWithTag:wordCount:", foundation.Range, .{stringToCheck, startingOffset, language, wrapFlag, tag, wordCount, });
    }

    pub fn checkSpellingOfStringStartingAt(self: *@This(), stringToCheck: ?*String, startingOffset: objc.NSInteger) foundation.Range {
        return objc.msgSend(self, "checkSpellingOfString:startingAt:", foundation.Range, .{stringToCheck, startingOffset});
    }

    pub fn countWordsInStringLanguage(self: *@This(), stringToCount: ?*String, language: ?*String) objc.NSInteger {
        return objc.msgSend(self, "countWordsInString:language:", objc.NSInteger, .{stringToCount, language});
    }

    pub fn checkGrammarOfStringStartingAtLanguageWrapInSpellDocumentWithTagDetails(self: *@This(), stringToCheck: ?*String, startingOffset: objc.NSInteger, language: ?*String, wrapFlag: objc.BOOL, tag: objc.NSInteger, details: ?*?*anyopaque, ) foundation.Range {
        return objc.msgSend(self, "checkGrammarOfString:startingAt:language:wrap:inSpellDocumentWithTag:details:", foundation.Range, .{stringToCheck, startingOffset, language, wrapFlag, tag, details, });
    }

    pub fn checkStringRangeTypesOptionsInSpellDocumentWithTagOrthographyWordCount(self: *@This(), stringToCheck: ?*String, range: foundation.Range, checkingTypes: foundation.TextCheckingTypes, options: ?*anyopaque, tag: objc.NSInteger, orthography: ?*?*Orthography, wordCount: ?*objc.NSInteger, ) ?*anyopaque {
        return objc.msgSend(self, "checkString:range:types:options:inSpellDocumentWithTag:orthography:wordCount:", ?*anyopaque, .{stringToCheck, range, checkingTypes, options, tag, orthography, wordCount, });
    }

    pub fn requestCheckingOfStringRangeTypesOptionsInSpellDocumentWithTagCompletionHandler(self: *@This(), stringToCheck: ?*String, range: foundation.Range, checkingTypes: foundation.TextCheckingTypes, options: ?*anyopaque, tag: objc.NSInteger, completionHandler: *const fn(objc.NSInteger, ?*anyopaque, ?*Orthography, objc.NSInteger, ) callconv(.C) void, ) objc.NSInteger {
        return objc.msgSend(self, "requestCheckingOfString:range:types:options:inSpellDocumentWithTag:completionHandler:", objc.NSInteger, .{stringToCheck, range, checkingTypes, options, tag, completionHandler, });
    }

    pub fn requestCandidatesForSelectedRangeInStringTypesOptionsInSpellDocumentWithTagCompletionHandler(self: *@This(), selectedRange: foundation.Range, stringToCheck: ?*String, checkingTypes: foundation.TextCheckingTypes, options: ?*anyopaque, tag: objc.NSInteger, completionHandler: *const fn(objc.NSInteger, ?*anyopaque) callconv(.C) void, ) objc.NSInteger {
        return objc.msgSend(self, "requestCandidatesForSelectedRange:inString:types:options:inSpellDocumentWithTag:completionHandler:", objc.NSInteger, .{selectedRange, stringToCheck, checkingTypes, options, tag, completionHandler, });
    }

    pub fn menuForResultStringOptionsAtLocationInView(self: *@This(), result: ?*TextCheckingResult, checkedString: ?*String, options: ?*anyopaque, location: foundation.Point, view: ?*View, ) ?*Menu {
        return objc.msgSend(self, "menuForResult:string:options:atLocation:inView:", ?*Menu, .{result, checkedString, options, location, view, });
    }

    pub fn userQuotesArrayForLanguage(self: *@This(), language: ?*String) ?*anyopaque {
        return objc.msgSend(self, "userQuotesArrayForLanguage:", ?*anyopaque, .{language});
    }

    pub fn userReplacementsDictionary(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "userReplacementsDictionary", ?*anyopaque, .{});
    }

    pub fn updateSpellingPanelWithMisspelledWord(self: *@This(), word: ?*String) void {
        return objc.msgSend(self, "updateSpellingPanelWithMisspelledWord:", void, .{word});
    }

    pub fn updateSpellingPanelWithGrammarStringDetail(self: *@This(), string: ?*String, detail: ?*anyopaque) void {
        return objc.msgSend(self, "updateSpellingPanelWithGrammarString:detail:", void, .{string, detail});
    }

    pub fn spellingPanel(self: *@This()) ?*Panel {
        return objc.msgSend(self, "spellingPanel", ?*Panel, .{});
    }

    pub fn accessoryView(self: *@This()) ?*View {
        return objc.msgSend(self, "accessoryView", ?*View, .{});
    }

    pub fn setAccessoryView(self: *@This(), accessoryView: ?*View) void {
        return objc.msgSend(self, "setAccessoryView:", void, .{accessoryView});
    }

    pub fn substitutionsPanel(self: *@This()) ?*Panel {
        return objc.msgSend(self, "substitutionsPanel", ?*Panel, .{});
    }

    pub fn setSubstitutionsPanelAccessoryViewController(self: *@This(), substitutionsPanelAccessoryViewController: ?*ViewController) void {
        return objc.msgSend(self, "setSubstitutionsPanelAccessoryViewController:", void, .{substitutionsPanelAccessoryViewController});
    }

    pub fn substitutionsPanelAccessoryViewController(self: *@This()) ?*ViewController {
        return objc.msgSend(self, "substitutionsPanelAccessoryViewController", ?*ViewController, .{});
    }

    pub fn updatePanels(self: *@This()) void {
        return objc.msgSend(self, "updatePanels", void, .{});
    }

    pub fn ignoreWordInSpellDocumentWithTag(self: *@This(), wordToIgnore: ?*String, tag: objc.NSInteger) void {
        return objc.msgSend(self, "ignoreWord:inSpellDocumentWithTag:", void, .{wordToIgnore, tag});
    }

    pub fn ignoredWordsInSpellDocumentWithTag(self: *@This(), tag: objc.NSInteger) ?*anyopaque {
        return objc.msgSend(self, "ignoredWordsInSpellDocumentWithTag:", ?*anyopaque, .{tag});
    }

    pub fn setIgnoredWordsInSpellDocumentWithTag(self: *@This(), words: ?*anyopaque, tag: objc.NSInteger) void {
        return objc.msgSend(self, "setIgnoredWords:inSpellDocumentWithTag:", void, .{words, tag});
    }

    pub fn guessesForWordRangeInStringLanguageInSpellDocumentWithTag(self: *@This(), range: foundation.Range, string: ?*String, language: ?*String, tag: objc.NSInteger, ) ?*anyopaque {
        return objc.msgSend(self, "guessesForWordRange:inString:language:inSpellDocumentWithTag:", ?*anyopaque, .{range, string, language, tag, });
    }

    pub fn correctionForWordRangeInStringLanguageInSpellDocumentWithTag(self: *@This(), range: foundation.Range, string: ?*String, language: ?*String, tag: objc.NSInteger, ) ?*String {
        return objc.msgSend(self, "correctionForWordRange:inString:language:inSpellDocumentWithTag:", ?*String, .{range, string, language, tag, });
    }

    pub fn completionsForPartialWordRangeInStringLanguageInSpellDocumentWithTag(self: *@This(), range: foundation.Range, string: ?*String, language: ?*String, tag: objc.NSInteger, ) ?*anyopaque {
        return objc.msgSend(self, "completionsForPartialWordRange:inString:language:inSpellDocumentWithTag:", ?*anyopaque, .{range, string, language, tag, });
    }

    pub fn languageForWordRangeInStringOrthography(self: *@This(), range: foundation.Range, string: ?*String, orthography: ?*Orthography) ?*String {
        return objc.msgSend(self, "languageForWordRange:inString:orthography:", ?*String, .{range, string, orthography});
    }

    pub fn closeSpellDocumentWithTag(self: *@This(), tag: objc.NSInteger) void {
        return objc.msgSend(self, "closeSpellDocumentWithTag:", void, .{tag});
    }

    pub fn recordResponseToCorrectionForWordLanguageInSpellDocumentWithTag(self: *@This(), response: CorrectionResponse, correction: ?*String, word: ?*String, language: ?*String, tag: objc.NSInteger, ) void {
        return objc.msgSend(self, "recordResponse:toCorrection:forWord:language:inSpellDocumentWithTag:", void, .{response, correction, word, language, tag, });
    }

    pub fn showCorrectionIndicatorOfTypePrimaryStringAlternativeStringsForStringInRectViewCompletionHandler(self: *@This(), @"type": CorrectionIndicatorType, primaryString: ?*String, alternativeStrings: ?*anyopaque, rectOfTypedString: foundation.Rect, view: ?*View, completionBlock: *const fn(?*String) callconv(.C) void, ) void {
        return objc.msgSend(self, "showCorrectionIndicatorOfType:primaryString:alternativeStrings:forStringInRect:view:completionHandler:", void, .{@"type", primaryString, alternativeStrings, rectOfTypedString, view, completionBlock, });
    }

    pub fn dismissCorrectionIndicatorForView(self: *@This(), view: ?*View) void {
        return objc.msgSend(self, "dismissCorrectionIndicatorForView:", void, .{view});
    }

    pub fn showInlinePredictionForCandidatesClient(self: *@This(), candidates: ?*anyopaque, client: ?*anyopaque) void {
        return objc.msgSend(self, "showInlinePredictionForCandidates:client:", void, .{candidates, client});
    }

    pub fn preventsAutocorrectionBeforeStringLanguage(self: *@This(), string: ?*String, language: ?*String) objc.BOOL {
        return objc.msgSend(self, "preventsAutocorrectionBeforeString:language:", objc.BOOL, .{string, language});
    }

    pub fn deletesAutospaceBetweenStringAndStringLanguage(self: *@This(), precedingString: ?*String, followingString: ?*String, language: ?*String) objc.BOOL {
        return objc.msgSend(self, "deletesAutospaceBetweenString:andString:language:", objc.BOOL, .{precedingString, followingString, language});
    }

    pub fn availableLanguages(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "availableLanguages", ?*anyopaque, .{});
    }

    pub fn userPreferredLanguages(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "userPreferredLanguages", ?*anyopaque, .{});
    }

    pub fn setAutomaticallyIdentifiesLanguages(self: *@This(), automaticallyIdentifiesLanguages: objc.BOOL) void {
        return objc.msgSend(self, "setAutomaticallyIdentifiesLanguages:", void, .{automaticallyIdentifiesLanguages});
    }

    pub fn automaticallyIdentifiesLanguages(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "automaticallyIdentifiesLanguages", objc.BOOL, .{});
    }

    pub fn setWordFieldStringValue(self: *@This(), string: ?*String) void {
        return objc.msgSend(self, "setWordFieldStringValue:", void, .{string});
    }

    pub fn learnWord(self: *@This(), word: ?*String) void {
        return objc.msgSend(self, "learnWord:", void, .{word});
    }

    pub fn hasLearnedWord(self: *@This(), word: ?*String) objc.BOOL {
        return objc.msgSend(self, "hasLearnedWord:", objc.BOOL, .{word});
    }

    pub fn unlearnWord(self: *@This(), word: ?*String) void {
        return objc.msgSend(self, "unlearnWord:", void, .{word});
    }

    pub fn isAutomaticTextReplacementEnabled(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isAutomaticTextReplacementEnabled", objc.BOOL, .{});
    }

    pub fn isAutomaticSpellingCorrectionEnabled(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isAutomaticSpellingCorrectionEnabled", objc.BOOL, .{});
    }

    pub fn isAutomaticQuoteSubstitutionEnabled(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isAutomaticQuoteSubstitutionEnabled", objc.BOOL, .{});
    }

    pub fn isAutomaticDashSubstitutionEnabled(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isAutomaticDashSubstitutionEnabled", objc.BOOL, .{});
    }

    pub fn isAutomaticCapitalizationEnabled(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isAutomaticCapitalizationEnabled", objc.BOOL, .{});
    }

    pub fn isAutomaticPeriodSubstitutionEnabled(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isAutomaticPeriodSubstitutionEnabled", objc.BOOL, .{});
    }

    pub fn isAutomaticTextCompletionEnabled(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isAutomaticTextCompletionEnabled", objc.BOOL, .{});
    }

    pub fn isAutomaticInlinePredictionEnabled(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isAutomaticInlinePredictionEnabled", objc.BOOL, .{});
    }

    pub fn language(self: *@This()) ?*String {
        return objc.msgSend(self, "language", ?*String, .{});
    }

    pub fn setLanguage(self: *@This(), language: ?*String) objc.BOOL {
        return objc.msgSend(self, "setLanguage:", objc.BOOL, .{language});
    }

};

pub const CorrectionResponse = CorrectionResponse;

pub const CorrectionResponse = enum(objc.NSInteger) {
    None = 0,
    Accepted = 1,
    Rejected = 2,
    Ignored = 3,
    Edited = 4,
    Reverted = 5,
};

pub const CorrectionIndicatorType = CorrectionIndicatorType;

pub const CorrectionIndicatorType = enum(objc.NSInteger) {
    Default = 0,
    Reversion = 1,
    Guesses = 2,
};

pub const SplitViewAutosaveName = ?*String;

pub const SplitViewDividerStyle = enum(objc.NSInteger) {
    Thick = 1,
    Thin = 2,
    PaneSplitter = 3,
};

/// https://developer.apple.com/documentation/AppKit/NSSplitView?language=objc
pub const SplitView = opaque {
    pub const InternalInfo = objc.ExternalClass("NSSplitView", @This(), View, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn drawDividerInRect(self: *@This(), rect: foundation.Rect) void {
        return objc.msgSend(self, "drawDividerInRect:", void, .{rect});
    }

    pub fn adjustSubviews(self: *@This()) void {
        return objc.msgSend(self, "adjustSubviews", void, .{});
    }

    pub fn isSubviewCollapsed(self: *@This(), subview: ?*View) objc.BOOL {
        return objc.msgSend(self, "isSubviewCollapsed:", objc.BOOL, .{subview});
    }

    pub fn minPossiblePositionOfDividerAtIndex(self: *@This(), dividerIndex: objc.NSInteger) core_foundation.CGFloat {
        return objc.msgSend(self, "minPossiblePositionOfDividerAtIndex:", core_foundation.CGFloat, .{dividerIndex});
    }

    pub fn maxPossiblePositionOfDividerAtIndex(self: *@This(), dividerIndex: objc.NSInteger) core_foundation.CGFloat {
        return objc.msgSend(self, "maxPossiblePositionOfDividerAtIndex:", core_foundation.CGFloat, .{dividerIndex});
    }

    pub fn setPositionOfDividerAtIndex(self: *@This(), position: core_foundation.CGFloat, dividerIndex: objc.NSInteger) void {
        return objc.msgSend(self, "setPosition:ofDividerAtIndex:", void, .{position, dividerIndex});
    }

    pub fn holdingPriorityForSubviewAtIndex(self: *@This(), subviewIndex: objc.NSInteger) LayoutPriority {
        return objc.msgSend(self, "holdingPriorityForSubviewAtIndex:", LayoutPriority, .{subviewIndex});
    }

    pub fn setHoldingPriorityForSubviewAtIndex(self: *@This(), priority: LayoutPriority, subviewIndex: objc.NSInteger) void {
        return objc.msgSend(self, "setHoldingPriority:forSubviewAtIndex:", void, .{priority, subviewIndex});
    }

    pub fn isVertical(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isVertical", objc.BOOL, .{});
    }

    pub fn setVertical(self: *@This(), vertical: objc.BOOL) void {
        return objc.msgSend(self, "setVertical:", void, .{vertical});
    }

    pub fn dividerStyle(self: *@This()) SplitViewDividerStyle {
        return objc.msgSend(self, "dividerStyle", SplitViewDividerStyle, .{});
    }

    pub fn setDividerStyle(self: *@This(), dividerStyle: SplitViewDividerStyle) void {
        return objc.msgSend(self, "setDividerStyle:", void, .{dividerStyle});
    }

    pub fn autosaveName(self: *@This()) SplitViewAutosaveName {
        return objc.msgSend(self, "autosaveName", SplitViewAutosaveName, .{});
    }

    pub fn setAutosaveName(self: *@This(), autosaveName: SplitViewAutosaveName) void {
        return objc.msgSend(self, "setAutosaveName:", void, .{autosaveName});
    }

    pub fn delegate(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "delegate", ?*anyopaque, .{});
    }

    pub fn setDelegate(self: *@This(), delegate: ?*anyopaque) void {
        return objc.msgSend(self, "setDelegate:", void, .{delegate});
    }

    pub fn dividerColor(self: *@This()) ?*Color {
        return objc.msgSend(self, "dividerColor", ?*Color, .{});
    }

    pub fn dividerThickness(self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(self, "dividerThickness", core_foundation.CGFloat, .{});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSSplitViewDelegate?language=objc
pub const SplitViewDelegate = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{objc.NSObject, });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn splitViewCanCollapseSubview(self: *@This(), splitView: ?*SplitView, subview: ?*View) objc.BOOL {
        return objc.msgSend(self, "splitView:canCollapseSubview:", objc.BOOL, .{splitView, subview});
    }

    pub fn splitViewShouldCollapseSubviewForDoubleClickOnDividerAtIndex(self: *@This(), splitView: ?*SplitView, subview: ?*View, dividerIndex: objc.NSInteger) objc.BOOL {
        return objc.msgSend(self, "splitView:shouldCollapseSubview:forDoubleClickOnDividerAtIndex:", objc.BOOL, .{splitView, subview, dividerIndex});
    }

    pub fn splitViewConstrainMinCoordinateOfSubviewAt(self: *@This(), splitView: ?*SplitView, proposedMinimumPosition: core_foundation.CGFloat, dividerIndex: objc.NSInteger) core_foundation.CGFloat {
        return objc.msgSend(self, "splitView:constrainMinCoordinate:ofSubviewAt:", core_foundation.CGFloat, .{splitView, proposedMinimumPosition, dividerIndex});
    }

    pub fn splitViewConstrainMaxCoordinateOfSubviewAt(self: *@This(), splitView: ?*SplitView, proposedMaximumPosition: core_foundation.CGFloat, dividerIndex: objc.NSInteger) core_foundation.CGFloat {
        return objc.msgSend(self, "splitView:constrainMaxCoordinate:ofSubviewAt:", core_foundation.CGFloat, .{splitView, proposedMaximumPosition, dividerIndex});
    }

    pub fn splitViewConstrainSplitPositionOfSubviewAt(self: *@This(), splitView: ?*SplitView, proposedPosition: core_foundation.CGFloat, dividerIndex: objc.NSInteger) core_foundation.CGFloat {
        return objc.msgSend(self, "splitView:constrainSplitPosition:ofSubviewAt:", core_foundation.CGFloat, .{splitView, proposedPosition, dividerIndex});
    }

    pub fn splitViewResizeSubviewsWithOldSize(self: *@This(), splitView: ?*SplitView, oldSize: foundation.Size) void {
        return objc.msgSend(self, "splitView:resizeSubviewsWithOldSize:", void, .{splitView, oldSize});
    }

    pub fn splitViewShouldAdjustSizeOfSubview(self: *@This(), splitView: ?*SplitView, view: ?*View) objc.BOOL {
        return objc.msgSend(self, "splitView:shouldAdjustSizeOfSubview:", objc.BOOL, .{splitView, view});
    }

    pub fn splitViewShouldHideDividerAtIndex(self: *@This(), splitView: ?*SplitView, dividerIndex: objc.NSInteger) objc.BOOL {
        return objc.msgSend(self, "splitView:shouldHideDividerAtIndex:", objc.BOOL, .{splitView, dividerIndex});
    }

    pub fn splitViewEffectiveRectForDrawnRectOfDividerAtIndex(self: *@This(), splitView: ?*SplitView, proposedEffectiveRect: foundation.Rect, drawnRect: foundation.Rect, dividerIndex: objc.NSInteger, ) foundation.Rect {
        return objc.msgSend(self, "splitView:effectiveRect:forDrawnRect:ofDividerAtIndex:", foundation.Rect, .{splitView, proposedEffectiveRect, drawnRect, dividerIndex, });
    }

    pub fn splitViewAdditionalEffectiveRectOfDividerAtIndex(self: *@This(), splitView: ?*SplitView, dividerIndex: objc.NSInteger) foundation.Rect {
        return objc.msgSend(self, "splitView:additionalEffectiveRectOfDividerAtIndex:", foundation.Rect, .{splitView, dividerIndex});
    }

    pub fn splitViewWillResizeSubviews(self: *@This(), notification: ?*Notification) void {
        return objc.msgSend(self, "splitViewWillResizeSubviews:", void, .{notification});
    }

    pub fn splitViewDidResizeSubviews(self: *@This(), notification: ?*Notification) void {
        return objc.msgSend(self, "splitViewDidResizeSubviews:", void, .{notification});
    }

};

pub const SplitViewItemBehavior = enum(objc.NSInteger) {
    Default = 0,
    Sidebar = 1,
    ContentList = 2,
    Inspector = 3,
};

pub const SplitViewItemCollapseBehavior = enum(objc.NSInteger) {
    Default = 0,
    PreferResizingSplitViewWithFixedSiblings = 1,
    PreferResizingSiblingsWithFixedSplitView = 2,
    UseConstraints = 3,
};

/// https://developer.apple.com/documentation/AppKit/NSSplitViewItem?language=objc
pub const SplitViewItem = opaque {
    pub const InternalInfo = objc.ExternalClass("NSSplitViewItem", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn splitViewItemWithViewController(self: *@This(), viewController: ?*ViewController) *@This() {
        return objc.msgSend(self, "splitViewItemWithViewController:", *@This(), .{viewController});
    }

    pub fn sidebarWithViewController(self: *@This(), viewController: ?*ViewController) *@This() {
        return objc.msgSend(self, "sidebarWithViewController:", *@This(), .{viewController});
    }

    pub fn contentListWithViewController(self: *@This(), viewController: ?*ViewController) *@This() {
        return objc.msgSend(self, "contentListWithViewController:", *@This(), .{viewController});
    }

    pub fn inspectorWithViewController(self: *@This(), viewController: ?*ViewController) *@This() {
        return objc.msgSend(self, "inspectorWithViewController:", *@This(), .{viewController});
    }

    pub fn behavior(self: *@This()) SplitViewItemBehavior {
        return objc.msgSend(self, "behavior", SplitViewItemBehavior, .{});
    }

    pub fn viewController(self: *@This()) ?*ViewController {
        return objc.msgSend(self, "viewController", ?*ViewController, .{});
    }

    pub fn setViewController(self: *@This(), viewController: ?*ViewController) void {
        return objc.msgSend(self, "setViewController:", void, .{viewController});
    }

    pub fn isCollapsed(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isCollapsed", objc.BOOL, .{});
    }

    pub fn setCollapsed(self: *@This(), collapsed: objc.BOOL) void {
        return objc.msgSend(self, "setCollapsed:", void, .{collapsed});
    }

    pub fn canCollapse(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "canCollapse", objc.BOOL, .{});
    }

    pub fn setCanCollapse(self: *@This(), canCollapse: objc.BOOL) void {
        return objc.msgSend(self, "setCanCollapse:", void, .{canCollapse});
    }

    pub fn collapseBehavior(self: *@This()) SplitViewItemCollapseBehavior {
        return objc.msgSend(self, "collapseBehavior", SplitViewItemCollapseBehavior, .{});
    }

    pub fn setCollapseBehavior(self: *@This(), collapseBehavior: SplitViewItemCollapseBehavior) void {
        return objc.msgSend(self, "setCollapseBehavior:", void, .{collapseBehavior});
    }

    pub fn minimumThickness(self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(self, "minimumThickness", core_foundation.CGFloat, .{});
    }

    pub fn setMinimumThickness(self: *@This(), minimumThickness: core_foundation.CGFloat) void {
        return objc.msgSend(self, "setMinimumThickness:", void, .{minimumThickness});
    }

    pub fn maximumThickness(self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(self, "maximumThickness", core_foundation.CGFloat, .{});
    }

    pub fn setMaximumThickness(self: *@This(), maximumThickness: core_foundation.CGFloat) void {
        return objc.msgSend(self, "setMaximumThickness:", void, .{maximumThickness});
    }

    pub fn preferredThicknessFraction(self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(self, "preferredThicknessFraction", core_foundation.CGFloat, .{});
    }

    pub fn setPreferredThicknessFraction(self: *@This(), preferredThicknessFraction: core_foundation.CGFloat) void {
        return objc.msgSend(self, "setPreferredThicknessFraction:", void, .{preferredThicknessFraction});
    }

    pub fn holdingPriority(self: *@This()) LayoutPriority {
        return objc.msgSend(self, "holdingPriority", LayoutPriority, .{});
    }

    pub fn setHoldingPriority(self: *@This(), holdingPriority: LayoutPriority) void {
        return objc.msgSend(self, "setHoldingPriority:", void, .{holdingPriority});
    }

    pub fn automaticMaximumThickness(self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(self, "automaticMaximumThickness", core_foundation.CGFloat, .{});
    }

    pub fn setAutomaticMaximumThickness(self: *@This(), automaticMaximumThickness: core_foundation.CGFloat) void {
        return objc.msgSend(self, "setAutomaticMaximumThickness:", void, .{automaticMaximumThickness});
    }

    pub fn isSpringLoaded(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isSpringLoaded", objc.BOOL, .{});
    }

    pub fn setSpringLoaded(self: *@This(), springLoaded: objc.BOOL) void {
        return objc.msgSend(self, "setSpringLoaded:", void, .{springLoaded});
    }

    pub fn canCollapseFromWindowResize(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "canCollapseFromWindowResize", objc.BOOL, .{});
    }

    pub fn setCanCollapseFromWindowResize(self: *@This(), canCollapseFromWindowResize: objc.BOOL) void {
        return objc.msgSend(self, "setCanCollapseFromWindowResize:", void, .{canCollapseFromWindowResize});
    }

    pub fn allowsFullHeightLayout(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "allowsFullHeightLayout", objc.BOOL, .{});
    }

    pub fn setAllowsFullHeightLayout(self: *@This(), allowsFullHeightLayout: objc.BOOL) void {
        return objc.msgSend(self, "setAllowsFullHeightLayout:", void, .{allowsFullHeightLayout});
    }

    pub fn titlebarSeparatorStyle(self: *@This()) TitlebarSeparatorStyle {
        return objc.msgSend(self, "titlebarSeparatorStyle", TitlebarSeparatorStyle, .{});
    }

    pub fn setTitlebarSeparatorStyle(self: *@This(), titlebarSeparatorStyle: TitlebarSeparatorStyle) void {
        return objc.msgSend(self, "setTitlebarSeparatorStyle:", void, .{titlebarSeparatorStyle});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSSplitViewController?language=objc
pub const SplitViewController = opaque {
    pub const InternalInfo = objc.ExternalClass("NSSplitViewController", @This(), ViewController, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn addSplitViewItem(self: *@This(), splitViewItem: ?*SplitViewItem) void {
        return objc.msgSend(self, "addSplitViewItem:", void, .{splitViewItem});
    }

    pub fn insertSplitViewItemAtIndex(self: *@This(), splitViewItem: ?*SplitViewItem, index: objc.NSInteger) void {
        return objc.msgSend(self, "insertSplitViewItem:atIndex:", void, .{splitViewItem, index});
    }

    pub fn removeSplitViewItem(self: *@This(), splitViewItem: ?*SplitViewItem) void {
        return objc.msgSend(self, "removeSplitViewItem:", void, .{splitViewItem});
    }

    pub fn splitViewItemForViewController(self: *@This(), viewController: ?*ViewController) ?*SplitViewItem {
        return objc.msgSend(self, "splitViewItemForViewController:", ?*SplitViewItem, .{viewController});
    }

    pub fn validateUserInterfaceItem(self: *@This(), item: ?*anyopaque) objc.BOOL {
        return objc.msgSend(self, "validateUserInterfaceItem:", objc.BOOL, .{item});
    }

    pub fn viewDidLoad(self: *@This()) void {
        return objc.msgSend(self, "viewDidLoad", void, .{});
    }

    pub fn splitViewCanCollapseSubview(self: *@This(), splitView: ?*SplitView, subview: ?*View) objc.BOOL {
        return objc.msgSend(self, "splitView:canCollapseSubview:", objc.BOOL, .{splitView, subview});
    }

    pub fn splitViewShouldCollapseSubviewForDoubleClickOnDividerAtIndex(self: *@This(), splitView: ?*SplitView, subview: ?*View, dividerIndex: objc.NSInteger) objc.BOOL {
        return objc.msgSend(self, "splitView:shouldCollapseSubview:forDoubleClickOnDividerAtIndex:", objc.BOOL, .{splitView, subview, dividerIndex});
    }

    pub fn splitViewShouldHideDividerAtIndex(self: *@This(), splitView: ?*SplitView, dividerIndex: objc.NSInteger) objc.BOOL {
        return objc.msgSend(self, "splitView:shouldHideDividerAtIndex:", objc.BOOL, .{splitView, dividerIndex});
    }

    pub fn splitViewEffectiveRectForDrawnRectOfDividerAtIndex(self: *@This(), splitView: ?*SplitView, proposedEffectiveRect: foundation.Rect, drawnRect: foundation.Rect, dividerIndex: objc.NSInteger, ) foundation.Rect {
        return objc.msgSend(self, "splitView:effectiveRect:forDrawnRect:ofDividerAtIndex:", foundation.Rect, .{splitView, proposedEffectiveRect, drawnRect, dividerIndex, });
    }

    pub fn splitViewAdditionalEffectiveRectOfDividerAtIndex(self: *@This(), splitView: ?*SplitView, dividerIndex: objc.NSInteger) foundation.Rect {
        return objc.msgSend(self, "splitView:additionalEffectiveRectOfDividerAtIndex:", foundation.Rect, .{splitView, dividerIndex});
    }

    pub fn splitView(self: *@This()) ?*SplitView {
        return objc.msgSend(self, "splitView", ?*SplitView, .{});
    }

    pub fn setSplitView(self: *@This(), splitView: ?*SplitView) void {
        return objc.msgSend(self, "setSplitView:", void, .{splitView});
    }

    pub fn splitViewItems(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "splitViewItems", ?*anyopaque, .{});
    }

    pub fn setSplitViewItems(self: *@This(), splitViewItems: ?*anyopaque) void {
        return objc.msgSend(self, "setSplitViewItems:", void, .{splitViewItems});
    }

    pub fn minimumThicknessForInlineSidebars(self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(self, "minimumThicknessForInlineSidebars", core_foundation.CGFloat, .{});
    }

    pub fn setMinimumThicknessForInlineSidebars(self: *@This(), minimumThicknessForInlineSidebars: core_foundation.CGFloat) void {
        return objc.msgSend(self, "setMinimumThicknessForInlineSidebars:", void, .{minimumThicknessForInlineSidebars});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSSavePanel?language=objc
pub const SavePanel = opaque {
    pub const InternalInfo = objc.ExternalClass("NSSavePanel", @This(), Panel, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn savePanel(self: *@This()) ?*SavePanel {
        return objc.msgSend(self, "savePanel", ?*SavePanel, .{});
    }

    pub fn validateVisibleColumns(self: *@This()) void {
        return objc.msgSend(self, "validateVisibleColumns", void, .{});
    }

    pub fn ok(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "ok:", void, .{sender});
    }

    pub fn cancel(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "cancel:", void, .{sender});
    }

    pub fn beginSheetModalForWindowCompletionHandler(self: *@This(), window: ?*Window, handler: *const fn(ModalResponse) callconv(.C) void) void {
        return objc.msgSend(self, "beginSheetModalForWindow:completionHandler:", void, .{window, handler});
    }

    pub fn beginWithCompletionHandler(self: *@This(), handler: *const fn(ModalResponse) callconv(.C) void) void {
        return objc.msgSend(self, "beginWithCompletionHandler:", void, .{handler});
    }

    pub fn runModal(self: *@This()) ModalResponse {
        return objc.msgSend(self, "runModal", ModalResponse, .{});
    }

    pub fn URL(self: *@This()) ?*URL {
        return objc.msgSend(self, "URL", ?*URL, .{});
    }

    pub fn identifier(self: *@This()) UserInterfaceItemIdentifier {
        return objc.msgSend(self, "identifier", UserInterfaceItemIdentifier, .{});
    }

    pub fn setIdentifier(self: *@This(), identifier: UserInterfaceItemIdentifier) void {
        return objc.msgSend(self, "setIdentifier:", void, .{identifier});
    }

    pub fn directoryURL(self: *@This()) ?*URL {
        return objc.msgSend(self, "directoryURL", ?*URL, .{});
    }

    pub fn setDirectoryURL(self: *@This(), directoryURL: ?*URL) void {
        return objc.msgSend(self, "setDirectoryURL:", void, .{directoryURL});
    }

    pub fn allowedContentTypes(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "allowedContentTypes", ?*anyopaque, .{});
    }

    pub fn setAllowedContentTypes(self: *@This(), allowedContentTypes: ?*anyopaque) void {
        return objc.msgSend(self, "setAllowedContentTypes:", void, .{allowedContentTypes});
    }

    pub fn allowsOtherFileTypes(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "allowsOtherFileTypes", objc.BOOL, .{});
    }

    pub fn setAllowsOtherFileTypes(self: *@This(), allowsOtherFileTypes: objc.BOOL) void {
        return objc.msgSend(self, "setAllowsOtherFileTypes:", void, .{allowsOtherFileTypes});
    }

    pub fn currentContentType(self: *@This()) ?*UTType {
        return objc.msgSend(self, "currentContentType", ?*UTType, .{});
    }

    pub fn setCurrentContentType(self: *@This(), currentContentType: ?*UTType) void {
        return objc.msgSend(self, "setCurrentContentType:", void, .{currentContentType});
    }

    pub fn accessoryView(self: *@This()) ?*View {
        return objc.msgSend(self, "accessoryView", ?*View, .{});
    }

    pub fn setAccessoryView(self: *@This(), accessoryView: ?*View) void {
        return objc.msgSend(self, "setAccessoryView:", void, .{accessoryView});
    }

    pub fn delegate(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "delegate", ?*anyopaque, .{});
    }

    pub fn setDelegate(self: *@This(), delegate: ?*anyopaque) void {
        return objc.msgSend(self, "setDelegate:", void, .{delegate});
    }

    pub fn isExpanded(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isExpanded", objc.BOOL, .{});
    }

    pub fn canCreateDirectories(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "canCreateDirectories", objc.BOOL, .{});
    }

    pub fn setCanCreateDirectories(self: *@This(), canCreateDirectories: objc.BOOL) void {
        return objc.msgSend(self, "setCanCreateDirectories:", void, .{canCreateDirectories});
    }

    pub fn canSelectHiddenExtension(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "canSelectHiddenExtension", objc.BOOL, .{});
    }

    pub fn setCanSelectHiddenExtension(self: *@This(), canSelectHiddenExtension: objc.BOOL) void {
        return objc.msgSend(self, "setCanSelectHiddenExtension:", void, .{canSelectHiddenExtension});
    }

    pub fn isExtensionHidden(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isExtensionHidden", objc.BOOL, .{});
    }

    pub fn setExtensionHidden(self: *@This(), extensionHidden: objc.BOOL) void {
        return objc.msgSend(self, "setExtensionHidden:", void, .{extensionHidden});
    }

    pub fn treatsFilePackagesAsDirectories(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "treatsFilePackagesAsDirectories", objc.BOOL, .{});
    }

    pub fn setTreatsFilePackagesAsDirectories(self: *@This(), treatsFilePackagesAsDirectories: objc.BOOL) void {
        return objc.msgSend(self, "setTreatsFilePackagesAsDirectories:", void, .{treatsFilePackagesAsDirectories});
    }

    pub fn prompt(self: *@This()) ?*String {
        return objc.msgSend(self, "prompt", ?*String, .{});
    }

    pub fn setPrompt(self: *@This(), prompt: ?*String) void {
        return objc.msgSend(self, "setPrompt:", void, .{prompt});
    }

    pub fn title(self: *@This()) ?*String {
        return objc.msgSend(self, "title", ?*String, .{});
    }

    pub fn setTitle(self: *@This(), title: ?*String) void {
        return objc.msgSend(self, "setTitle:", void, .{title});
    }

    pub fn nameFieldLabel(self: *@This()) ?*String {
        return objc.msgSend(self, "nameFieldLabel", ?*String, .{});
    }

    pub fn setNameFieldLabel(self: *@This(), nameFieldLabel: ?*String) void {
        return objc.msgSend(self, "setNameFieldLabel:", void, .{nameFieldLabel});
    }

    pub fn nameFieldStringValue(self: *@This()) ?*String {
        return objc.msgSend(self, "nameFieldStringValue", ?*String, .{});
    }

    pub fn setNameFieldStringValue(self: *@This(), nameFieldStringValue: ?*String) void {
        return objc.msgSend(self, "setNameFieldStringValue:", void, .{nameFieldStringValue});
    }

    pub fn message(self: *@This()) ?*String {
        return objc.msgSend(self, "message", ?*String, .{});
    }

    pub fn setMessage(self: *@This(), message: ?*String) void {
        return objc.msgSend(self, "setMessage:", void, .{message});
    }

    pub fn showsHiddenFiles(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "showsHiddenFiles", objc.BOOL, .{});
    }

    pub fn setShowsHiddenFiles(self: *@This(), showsHiddenFiles: objc.BOOL) void {
        return objc.msgSend(self, "setShowsHiddenFiles:", void, .{showsHiddenFiles});
    }

    pub fn showsTagField(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "showsTagField", objc.BOOL, .{});
    }

    pub fn setShowsTagField(self: *@This(), showsTagField: objc.BOOL) void {
        return objc.msgSend(self, "setShowsTagField:", void, .{showsTagField});
    }

    pub fn tagNames(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "tagNames", ?*anyopaque, .{});
    }

    pub fn setTagNames(self: *@This(), tagNames: ?*anyopaque) void {
        return objc.msgSend(self, "setTagNames:", void, .{tagNames});
    }

    pub fn showsContentTypes(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "showsContentTypes", objc.BOOL, .{});
    }

    pub fn setShowsContentTypes(self: *@This(), showsContentTypes: objc.BOOL) void {
        return objc.msgSend(self, "setShowsContentTypes:", void, .{showsContentTypes});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSOpenSavePanelDelegate?language=objc
pub const OpenSavePanelDelegate = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{objc.NSObject, });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn panelShouldEnableURL(self: *@This(), sender: *objc.Id, url: ?*URL) objc.BOOL {
        return objc.msgSend(self, "panel:shouldEnableURL:", objc.BOOL, .{sender, url});
    }

    pub fn panelValidateURLError(self: *@This(), sender: *objc.Id, url: ?*URL, outError: ?*?*Error) objc.BOOL {
        return objc.msgSend(self, "panel:validateURL:error:", objc.BOOL, .{sender, url, outError});
    }

    pub fn panelDidChangeToDirectoryURL(self: *@This(), sender: *objc.Id, url: ?*URL) void {
        return objc.msgSend(self, "panel:didChangeToDirectoryURL:", void, .{sender, url});
    }

    pub fn panelUserEnteredFilenameConfirmed(self: *@This(), sender: *objc.Id, filename: ?*String, okFlag: objc.BOOL) ?*String {
        return objc.msgSend(self, "panel:userEnteredFilename:confirmed:", ?*String, .{sender, filename, okFlag});
    }

    pub fn panelWillExpand(self: *@This(), sender: *objc.Id, expanding: objc.BOOL) void {
        return objc.msgSend(self, "panel:willExpand:", void, .{sender, expanding});
    }

    pub fn panelSelectionDidChange(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "panelSelectionDidChange:", void, .{sender});
    }

    pub fn panelDisplayNameForType(self: *@This(), sender: *objc.Id, @"type": ?*UTType) ?*String {
        return objc.msgSend(self, "panel:displayNameForType:", ?*String, .{sender, @"type"});
    }

    pub fn panelDidSelectType(self: *@This(), sender: *objc.Id, @"type": ?*UTType) void {
        return objc.msgSend(self, "panel:didSelectType:", void, .{sender, @"type"});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSOpenPanel?language=objc
pub const OpenPanel = opaque {
    pub const InternalInfo = objc.ExternalClass("NSOpenPanel", @This(), SavePanel, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn openPanel(self: *@This()) ?*OpenPanel {
        return objc.msgSend(self, "openPanel", ?*OpenPanel, .{});
    }

    pub fn URLs(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "URLs", ?*anyopaque, .{});
    }

    pub fn resolvesAliases(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "resolvesAliases", objc.BOOL, .{});
    }

    pub fn setResolvesAliases(self: *@This(), resolvesAliases: objc.BOOL) void {
        return objc.msgSend(self, "setResolvesAliases:", void, .{resolvesAliases});
    }

    pub fn canChooseDirectories(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "canChooseDirectories", objc.BOOL, .{});
    }

    pub fn setCanChooseDirectories(self: *@This(), canChooseDirectories: objc.BOOL) void {
        return objc.msgSend(self, "setCanChooseDirectories:", void, .{canChooseDirectories});
    }

    pub fn allowsMultipleSelection(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "allowsMultipleSelection", objc.BOOL, .{});
    }

    pub fn setAllowsMultipleSelection(self: *@This(), allowsMultipleSelection: objc.BOOL) void {
        return objc.msgSend(self, "setAllowsMultipleSelection:", void, .{allowsMultipleSelection});
    }

    pub fn canChooseFiles(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "canChooseFiles", objc.BOOL, .{});
    }

    pub fn setCanChooseFiles(self: *@This(), canChooseFiles: objc.BOOL) void {
        return objc.msgSend(self, "setCanChooseFiles:", void, .{canChooseFiles});
    }

    pub fn canResolveUbiquitousConflicts(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "canResolveUbiquitousConflicts", objc.BOOL, .{});
    }

    pub fn setCanResolveUbiquitousConflicts(self: *@This(), canResolveUbiquitousConflicts: objc.BOOL) void {
        return objc.msgSend(self, "setCanResolveUbiquitousConflicts:", void, .{canResolveUbiquitousConflicts});
    }

    pub fn canDownloadUbiquitousContents(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "canDownloadUbiquitousContents", objc.BOOL, .{});
    }

    pub fn setCanDownloadUbiquitousContents(self: *@This(), canDownloadUbiquitousContents: objc.BOOL) void {
        return objc.msgSend(self, "setCanDownloadUbiquitousContents:", void, .{canDownloadUbiquitousContents});
    }

    pub fn isAccessoryViewDisclosed(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isAccessoryViewDisclosed", objc.BOOL, .{});
    }

    pub fn setAccessoryViewDisclosed(self: *@This(), accessoryViewDisclosed: objc.BOOL) void {
        return objc.msgSend(self, "setAccessoryViewDisclosed:", void, .{accessoryViewDisclosed});
    }

};

pub const PageLayoutResult = enum(objc.NSInteger) {
    Cancelled = 0,
    Changed = 1,
};

/// https://developer.apple.com/documentation/AppKit/NSPageLayout?language=objc
pub const PageLayout = opaque {
    pub const InternalInfo = objc.ExternalClass("NSPageLayout", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn pageLayout(self: *@This()) ?*PageLayout {
        return objc.msgSend(self, "pageLayout", ?*PageLayout, .{});
    }

    pub fn addAccessoryController(self: *@This(), accessoryController: ?*ViewController) void {
        return objc.msgSend(self, "addAccessoryController:", void, .{accessoryController});
    }

    pub fn removeAccessoryController(self: *@This(), accessoryController: ?*ViewController) void {
        return objc.msgSend(self, "removeAccessoryController:", void, .{accessoryController});
    }

    pub fn beginSheetUsingPrintInfoOnWindowCompletionHandler(self: *@This(), printInfo: ?*PrintInfo, parentWindow: ?*Window, handler: *const fn(PageLayoutResult) callconv(.C) void) void {
        return objc.msgSend(self, "beginSheetUsingPrintInfo:onWindow:completionHandler:", void, .{printInfo, parentWindow, handler});
    }

    pub fn beginSheetWithPrintInfoModalForWindowDelegateDidEndSelectorContextInfo(self: *@This(), printInfo: ?*PrintInfo, docWindow: ?*Window, delegate: *objc.Id, didEndSelector: *objc.SEL, contextInfo: ?*anyopaque, ) void {
        return objc.msgSend(self, "beginSheetWithPrintInfo:modalForWindow:delegate:didEndSelector:contextInfo:", void, .{printInfo, docWindow, delegate, didEndSelector, contextInfo, });
    }

    pub fn runModalWithPrintInfo(self: *@This(), printInfo: ?*PrintInfo) objc.NSInteger {
        return objc.msgSend(self, "runModalWithPrintInfo:", objc.NSInteger, .{printInfo});
    }

    pub fn runModal(self: *@This()) objc.NSInteger {
        return objc.msgSend(self, "runModal", objc.NSInteger, .{});
    }

    pub fn accessoryControllers(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "accessoryControllers", ?*anyopaque, .{});
    }

    pub fn printInfo(self: *@This()) ?*PrintInfo {
        return objc.msgSend(self, "printInfo", ?*PrintInfo, .{});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSPasteboardItem?language=objc
pub const PasteboardItem = opaque {
    pub const InternalInfo = objc.ExternalClass("NSPasteboardItem", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn availableTypeFromArray(self: *@This(), types: ?*anyopaque) PasteboardType {
        return objc.msgSend(self, "availableTypeFromArray:", PasteboardType, .{types});
    }

    pub fn setDataProviderForTypes(self: *@This(), dataProvider: ?*anyopaque, types: ?*anyopaque) objc.BOOL {
        return objc.msgSend(self, "setDataProvider:forTypes:", objc.BOOL, .{dataProvider, types});
    }

    pub fn setDataForType(self: *@This(), data: ?*Data, @"type": PasteboardType) objc.BOOL {
        return objc.msgSend(self, "setData:forType:", objc.BOOL, .{data, @"type"});
    }

    pub fn setStringForType(self: *@This(), string: ?*String, @"type": PasteboardType) objc.BOOL {
        return objc.msgSend(self, "setString:forType:", objc.BOOL, .{string, @"type"});
    }

    pub fn setPropertyListForType(self: *@This(), propertyList: *objc.Id, @"type": PasteboardType) objc.BOOL {
        return objc.msgSend(self, "setPropertyList:forType:", objc.BOOL, .{propertyList, @"type"});
    }

    pub fn dataForType(self: *@This(), @"type": PasteboardType) ?*Data {
        return objc.msgSend(self, "dataForType:", ?*Data, .{@"type"});
    }

    pub fn stringForType(self: *@This(), @"type": PasteboardType) ?*String {
        return objc.msgSend(self, "stringForType:", ?*String, .{@"type"});
    }

    pub fn propertyListForType(self: *@This(), @"type": PasteboardType) *objc.Id {
        return objc.msgSend(self, "propertyListForType:", *objc.Id, .{@"type"});
    }

    pub fn types(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "types", ?*anyopaque, .{});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSPasteboardItemDataProvider?language=objc
pub const PasteboardItemDataProvider = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{objc.NSObject, });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn pasteboardItemProvideDataForType(self: *@This(), pasteboard: ?*Pasteboard, item: ?*PasteboardItem, @"type": PasteboardType) void {
        return objc.msgSend(self, "pasteboard:item:provideDataForType:", void, .{pasteboard, item, @"type"});
    }

    pub fn pasteboardFinishedWithDataProvider(self: *@This(), pasteboard: ?*Pasteboard) void {
        return objc.msgSend(self, "pasteboardFinishedWithDataProvider:", void, .{pasteboard});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSPopoverTouchBarItem?language=objc
pub const PopoverTouchBarItem = opaque {
    pub const InternalInfo = objc.ExternalClass("NSPopoverTouchBarItem", @This(), TouchBarItem, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn showPopover(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "showPopover:", void, .{sender});
    }

    pub fn dismissPopover(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "dismissPopover:", void, .{sender});
    }

    pub fn makeStandardActivatePopoverGestureRecognizer(self: *@This()) ?*GestureRecognizer {
        return objc.msgSend(self, "makeStandardActivatePopoverGestureRecognizer", ?*GestureRecognizer, .{});
    }

    pub fn popoverTouchBar(self: *@This()) ?*TouchBar {
        return objc.msgSend(self, "popoverTouchBar", ?*TouchBar, .{});
    }

    pub fn setPopoverTouchBar(self: *@This(), popoverTouchBar: ?*TouchBar) void {
        return objc.msgSend(self, "setPopoverTouchBar:", void, .{popoverTouchBar});
    }

    pub fn customizationLabel(self: *@This()) ?*String {
        return objc.msgSend(self, "customizationLabel", ?*String, .{});
    }

    pub fn setCustomizationLabel(self: *@This(), customizationLabel: ?*String) void {
        return objc.msgSend(self, "setCustomizationLabel:", void, .{customizationLabel});
    }

    pub fn collapsedRepresentation(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "collapsedRepresentation", ?*anyopaque, .{});
    }

    pub fn setCollapsedRepresentation(self: *@This(), collapsedRepresentation: ?*anyopaque) void {
        return objc.msgSend(self, "setCollapsedRepresentation:", void, .{collapsedRepresentation});
    }

    pub fn collapsedRepresentationImage(self: *@This()) ?*Image {
        return objc.msgSend(self, "collapsedRepresentationImage", ?*Image, .{});
    }

    pub fn setCollapsedRepresentationImage(self: *@This(), collapsedRepresentationImage: ?*Image) void {
        return objc.msgSend(self, "setCollapsedRepresentationImage:", void, .{collapsedRepresentationImage});
    }

    pub fn collapsedRepresentationLabel(self: *@This()) ?*String {
        return objc.msgSend(self, "collapsedRepresentationLabel", ?*String, .{});
    }

    pub fn setCollapsedRepresentationLabel(self: *@This(), collapsedRepresentationLabel: ?*String) void {
        return objc.msgSend(self, "setCollapsedRepresentationLabel:", void, .{collapsedRepresentationLabel});
    }

    pub fn pressAndHoldTouchBar(self: *@This()) ?*TouchBar {
        return objc.msgSend(self, "pressAndHoldTouchBar", ?*TouchBar, .{});
    }

    pub fn setPressAndHoldTouchBar(self: *@This(), pressAndHoldTouchBar: ?*TouchBar) void {
        return objc.msgSend(self, "setPressAndHoldTouchBar:", void, .{pressAndHoldTouchBar});
    }

    pub fn showsCloseButton(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "showsCloseButton", objc.BOOL, .{});
    }

    pub fn setShowsCloseButton(self: *@This(), showsCloseButton: objc.BOOL) void {
        return objc.msgSend(self, "setShowsCloseButton:", void, .{showsCloseButton});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSMenuItemCell?language=objc
pub const MenuItemCell = opaque {
    pub const InternalInfo = objc.ExternalClass("NSMenuItemCell", @This(), ButtonCell, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn initTextCell(self: *@This(), string: ?*String) *@This() {
        return objc.msgSend(self, "initTextCell:", *@This(), .{string});
    }

    pub fn initWithCoder(self: *@This(), coder: ?*foundation.Coder) *@This() {
        return objc.msgSend(self, "initWithCoder:", *@This(), .{coder});
    }

    pub fn calcSize(self: *@This()) void {
        return objc.msgSend(self, "calcSize", void, .{});
    }

    pub fn stateImageRectForBounds(self: *@This(), cellFrame: foundation.Rect) foundation.Rect {
        return objc.msgSend(self, "stateImageRectForBounds:", foundation.Rect, .{cellFrame});
    }

    pub fn titleRectForBounds(self: *@This(), cellFrame: foundation.Rect) foundation.Rect {
        return objc.msgSend(self, "titleRectForBounds:", foundation.Rect, .{cellFrame});
    }

    pub fn keyEquivalentRectForBounds(self: *@This(), cellFrame: foundation.Rect) foundation.Rect {
        return objc.msgSend(self, "keyEquivalentRectForBounds:", foundation.Rect, .{cellFrame});
    }

    pub fn drawSeparatorItemWithFrameInView(self: *@This(), cellFrame: foundation.Rect, controlView: ?*View) void {
        return objc.msgSend(self, "drawSeparatorItemWithFrame:inView:", void, .{cellFrame, controlView});
    }

    pub fn drawStateImageWithFrameInView(self: *@This(), cellFrame: foundation.Rect, controlView: ?*View) void {
        return objc.msgSend(self, "drawStateImageWithFrame:inView:", void, .{cellFrame, controlView});
    }

    pub fn drawImageWithFrameInView(self: *@This(), cellFrame: foundation.Rect, controlView: ?*View) void {
        return objc.msgSend(self, "drawImageWithFrame:inView:", void, .{cellFrame, controlView});
    }

    pub fn drawTitleWithFrameInView(self: *@This(), cellFrame: foundation.Rect, controlView: ?*View) void {
        return objc.msgSend(self, "drawTitleWithFrame:inView:", void, .{cellFrame, controlView});
    }

    pub fn drawKeyEquivalentWithFrameInView(self: *@This(), cellFrame: foundation.Rect, controlView: ?*View) void {
        return objc.msgSend(self, "drawKeyEquivalentWithFrame:inView:", void, .{cellFrame, controlView});
    }

    pub fn drawBorderAndBackgroundWithFrameInView(self: *@This(), cellFrame: foundation.Rect, controlView: ?*View) void {
        return objc.msgSend(self, "drawBorderAndBackgroundWithFrame:inView:", void, .{cellFrame, controlView});
    }

    pub fn menuItem(self: *@This()) ?*MenuItem {
        return objc.msgSend(self, "menuItem", ?*MenuItem, .{});
    }

    pub fn setMenuItem(self: *@This(), menuItem: ?*MenuItem) void {
        return objc.msgSend(self, "setMenuItem:", void, .{menuItem});
    }

    pub fn needsSizing(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "needsSizing", objc.BOOL, .{});
    }

    pub fn setNeedsSizing(self: *@This(), needsSizing: objc.BOOL) void {
        return objc.msgSend(self, "setNeedsSizing:", void, .{needsSizing});
    }

    pub fn needsDisplay(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "needsDisplay", objc.BOOL, .{});
    }

    pub fn setNeedsDisplay(self: *@This(), needsDisplay: objc.BOOL) void {
        return objc.msgSend(self, "setNeedsDisplay:", void, .{needsDisplay});
    }

    pub fn stateImageWidth(self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(self, "stateImageWidth", core_foundation.CGFloat, .{});
    }

    pub fn imageWidth(self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(self, "imageWidth", core_foundation.CGFloat, .{});
    }

    pub fn titleWidth(self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(self, "titleWidth", core_foundation.CGFloat, .{});
    }

    pub fn keyEquivalentWidth(self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(self, "keyEquivalentWidth", core_foundation.CGFloat, .{});
    }

    pub fn tag(self: *@This()) objc.NSInteger {
        return objc.msgSend(self, "tag", objc.NSInteger, .{});
    }

    pub fn setTag(self: *@This(), tag: objc.NSInteger) void {
        return objc.msgSend(self, "setTag:", void, .{tag});
    }

};

pub const PopUpArrowPosition = enum(objc.NSUInteger) {
    NoArrow = 0,
    AtCenter = 1,
    AtBottom = 2,
};

/// https://developer.apple.com/documentation/AppKit/NSPopUpButtonCell?language=objc
pub const PopUpButtonCell = opaque {
    pub const InternalInfo = objc.ExternalClass("NSPopUpButtonCell", @This(), MenuItemCell, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn initTextCellPullsDown(self: *@This(), stringValue: ?*String, pullDown: objc.BOOL) *@This() {
        return objc.msgSend(self, "initTextCell:pullsDown:", *@This(), .{stringValue, pullDown});
    }

    pub fn initWithCoder(self: *@This(), coder: ?*foundation.Coder) *@This() {
        return objc.msgSend(self, "initWithCoder:", *@This(), .{coder});
    }

    pub fn addItemWithTitle(self: *@This(), title: ?*String) void {
        return objc.msgSend(self, "addItemWithTitle:", void, .{title});
    }

    pub fn addItemsWithTitles(self: *@This(), itemTitles: ?*anyopaque) void {
        return objc.msgSend(self, "addItemsWithTitles:", void, .{itemTitles});
    }

    pub fn insertItemWithTitleAtIndex(self: *@This(), title: ?*String, index: objc.NSInteger) void {
        return objc.msgSend(self, "insertItemWithTitle:atIndex:", void, .{title, index});
    }

    pub fn removeItemWithTitle(self: *@This(), title: ?*String) void {
        return objc.msgSend(self, "removeItemWithTitle:", void, .{title});
    }

    pub fn removeItemAtIndex(self: *@This(), index: objc.NSInteger) void {
        return objc.msgSend(self, "removeItemAtIndex:", void, .{index});
    }

    pub fn removeAllItems(self: *@This()) void {
        return objc.msgSend(self, "removeAllItems", void, .{});
    }

    pub fn indexOfItem(self: *@This(), item: ?*MenuItem) objc.NSInteger {
        return objc.msgSend(self, "indexOfItem:", objc.NSInteger, .{item});
    }

    pub fn indexOfItemWithTitle(self: *@This(), title: ?*String) objc.NSInteger {
        return objc.msgSend(self, "indexOfItemWithTitle:", objc.NSInteger, .{title});
    }

    pub fn indexOfItemWithTag(self: *@This(), tag: objc.NSInteger) objc.NSInteger {
        return objc.msgSend(self, "indexOfItemWithTag:", objc.NSInteger, .{tag});
    }

    pub fn indexOfItemWithRepresentedObject(self: *@This(), obj: *objc.Id) objc.NSInteger {
        return objc.msgSend(self, "indexOfItemWithRepresentedObject:", objc.NSInteger, .{obj});
    }

    pub fn indexOfItemWithTargetAndAction(self: *@This(), target: *objc.Id, actionSelector: *objc.SEL) objc.NSInteger {
        return objc.msgSend(self, "indexOfItemWithTarget:andAction:", objc.NSInteger, .{target, actionSelector});
    }

    pub fn itemAtIndex(self: *@This(), index: objc.NSInteger) ?*MenuItem {
        return objc.msgSend(self, "itemAtIndex:", ?*MenuItem, .{index});
    }

    pub fn itemWithTitle(self: *@This(), title: ?*String) ?*MenuItem {
        return objc.msgSend(self, "itemWithTitle:", ?*MenuItem, .{title});
    }

    pub fn selectItem(self: *@This(), item: ?*MenuItem) void {
        return objc.msgSend(self, "selectItem:", void, .{item});
    }

    pub fn selectItemAtIndex(self: *@This(), index: objc.NSInteger) void {
        return objc.msgSend(self, "selectItemAtIndex:", void, .{index});
    }

    pub fn selectItemWithTitle(self: *@This(), title: ?*String) void {
        return objc.msgSend(self, "selectItemWithTitle:", void, .{title});
    }

    pub fn selectItemWithTag(self: *@This(), tag: objc.NSInteger) objc.BOOL {
        return objc.msgSend(self, "selectItemWithTag:", objc.BOOL, .{tag});
    }

    pub fn setTitle(self: *@This(), string: ?*String) void {
        return objc.msgSend(self, "setTitle:", void, .{string});
    }

    pub fn synchronizeTitleAndSelectedItem(self: *@This()) void {
        return objc.msgSend(self, "synchronizeTitleAndSelectedItem", void, .{});
    }

    pub fn itemTitleAtIndex(self: *@This(), index: objc.NSInteger) ?*String {
        return objc.msgSend(self, "itemTitleAtIndex:", ?*String, .{index});
    }

    pub fn attachPopUpWithFrameInView(self: *@This(), cellFrame: foundation.Rect, controlView: ?*View) void {
        return objc.msgSend(self, "attachPopUpWithFrame:inView:", void, .{cellFrame, controlView});
    }

    pub fn dismissPopUp(self: *@This()) void {
        return objc.msgSend(self, "dismissPopUp", void, .{});
    }

    pub fn performClickWithFrameInView(self: *@This(), frame: foundation.Rect, controlView: ?*View) void {
        return objc.msgSend(self, "performClickWithFrame:inView:", void, .{frame, controlView});
    }

    pub fn menu(self: *@This()) ?*Menu {
        return objc.msgSend(self, "menu", ?*Menu, .{});
    }

    pub fn setMenu(self: *@This(), menu: ?*Menu) void {
        return objc.msgSend(self, "setMenu:", void, .{menu});
    }

    pub fn pullsDown(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "pullsDown", objc.BOOL, .{});
    }

    pub fn setPullsDown(self: *@This(), pullsDown: objc.BOOL) void {
        return objc.msgSend(self, "setPullsDown:", void, .{pullsDown});
    }

    pub fn autoenablesItems(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "autoenablesItems", objc.BOOL, .{});
    }

    pub fn setAutoenablesItems(self: *@This(), autoenablesItems: objc.BOOL) void {
        return objc.msgSend(self, "setAutoenablesItems:", void, .{autoenablesItems});
    }

    pub fn preferredEdge(self: *@This()) foundation.RectEdge {
        return objc.msgSend(self, "preferredEdge", foundation.RectEdge, .{});
    }

    pub fn setPreferredEdge(self: *@This(), preferredEdge: foundation.RectEdge) void {
        return objc.msgSend(self, "setPreferredEdge:", void, .{preferredEdge});
    }

    pub fn usesItemFromMenu(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "usesItemFromMenu", objc.BOOL, .{});
    }

    pub fn setUsesItemFromMenu(self: *@This(), usesItemFromMenu: objc.BOOL) void {
        return objc.msgSend(self, "setUsesItemFromMenu:", void, .{usesItemFromMenu});
    }

    pub fn altersStateOfSelectedItem(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "altersStateOfSelectedItem", objc.BOOL, .{});
    }

    pub fn setAltersStateOfSelectedItem(self: *@This(), altersStateOfSelectedItem: objc.BOOL) void {
        return objc.msgSend(self, "setAltersStateOfSelectedItem:", void, .{altersStateOfSelectedItem});
    }

    pub fn itemArray(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "itemArray", ?*anyopaque, .{});
    }

    pub fn numberOfItems(self: *@This()) objc.NSInteger {
        return objc.msgSend(self, "numberOfItems", objc.NSInteger, .{});
    }

    pub fn lastItem(self: *@This()) ?*MenuItem {
        return objc.msgSend(self, "lastItem", ?*MenuItem, .{});
    }

    pub fn selectedItem(self: *@This()) ?*MenuItem {
        return objc.msgSend(self, "selectedItem", ?*MenuItem, .{});
    }

    pub fn indexOfSelectedItem(self: *@This()) objc.NSInteger {
        return objc.msgSend(self, "indexOfSelectedItem", objc.NSInteger, .{});
    }

    pub fn itemTitles(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "itemTitles", ?*anyopaque, .{});
    }

    pub fn titleOfSelectedItem(self: *@This()) ?*String {
        return objc.msgSend(self, "titleOfSelectedItem", ?*String, .{});
    }

    pub fn arrowPosition(self: *@This()) PopUpArrowPosition {
        return objc.msgSend(self, "arrowPosition", PopUpArrowPosition, .{});
    }

    pub fn setArrowPosition(self: *@This(), arrowPosition: PopUpArrowPosition) void {
        return objc.msgSend(self, "setArrowPosition:", void, .{arrowPosition});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSPopUpButton?language=objc
pub const PopUpButton = opaque {
    pub const InternalInfo = objc.ExternalClass("NSPopUpButton", @This(), Button, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn popUpButtonWithMenuTargetAction(self: *@This(), menu: ?*Menu, target: *objc.Id, action: *objc.SEL) *@This() {
        return objc.msgSend(self, "popUpButtonWithMenu:target:action:", *@This(), .{menu, target, action});
    }

    pub fn pullDownButtonWithTitleMenu(self: *@This(), title: ?*String, menu: ?*Menu) *@This() {
        return objc.msgSend(self, "pullDownButtonWithTitle:menu:", *@This(), .{title, menu});
    }

    pub fn pullDownButtonWithImageMenu(self: *@This(), image: ?*Image, menu: ?*Menu) *@This() {
        return objc.msgSend(self, "pullDownButtonWithImage:menu:", *@This(), .{image, menu});
    }

    pub fn pullDownButtonWithTitleImageMenu(self: *@This(), title: ?*String, image: ?*Image, menu: ?*Menu) *@This() {
        return objc.msgSend(self, "pullDownButtonWithTitle:image:menu:", *@This(), .{title, image, menu});
    }

    pub fn initWithFramePullsDown(self: *@This(), buttonFrame: foundation.Rect, flag: objc.BOOL) *@This() {
        return objc.msgSend(self, "initWithFrame:pullsDown:", *@This(), .{buttonFrame, flag});
    }

    pub fn addItemWithTitle(self: *@This(), title: ?*String) void {
        return objc.msgSend(self, "addItemWithTitle:", void, .{title});
    }

    pub fn addItemsWithTitles(self: *@This(), itemTitles: ?*anyopaque) void {
        return objc.msgSend(self, "addItemsWithTitles:", void, .{itemTitles});
    }

    pub fn insertItemWithTitleAtIndex(self: *@This(), title: ?*String, index: objc.NSInteger) void {
        return objc.msgSend(self, "insertItemWithTitle:atIndex:", void, .{title, index});
    }

    pub fn removeItemWithTitle(self: *@This(), title: ?*String) void {
        return objc.msgSend(self, "removeItemWithTitle:", void, .{title});
    }

    pub fn removeItemAtIndex(self: *@This(), index: objc.NSInteger) void {
        return objc.msgSend(self, "removeItemAtIndex:", void, .{index});
    }

    pub fn removeAllItems(self: *@This()) void {
        return objc.msgSend(self, "removeAllItems", void, .{});
    }

    pub fn indexOfItem(self: *@This(), item: ?*MenuItem) objc.NSInteger {
        return objc.msgSend(self, "indexOfItem:", objc.NSInteger, .{item});
    }

    pub fn indexOfItemWithTitle(self: *@This(), title: ?*String) objc.NSInteger {
        return objc.msgSend(self, "indexOfItemWithTitle:", objc.NSInteger, .{title});
    }

    pub fn indexOfItemWithTag(self: *@This(), tag: objc.NSInteger) objc.NSInteger {
        return objc.msgSend(self, "indexOfItemWithTag:", objc.NSInteger, .{tag});
    }

    pub fn indexOfItemWithRepresentedObject(self: *@This(), obj: *objc.Id) objc.NSInteger {
        return objc.msgSend(self, "indexOfItemWithRepresentedObject:", objc.NSInteger, .{obj});
    }

    pub fn indexOfItemWithTargetAndAction(self: *@This(), target: *objc.Id, actionSelector: *objc.SEL) objc.NSInteger {
        return objc.msgSend(self, "indexOfItemWithTarget:andAction:", objc.NSInteger, .{target, actionSelector});
    }

    pub fn itemAtIndex(self: *@This(), index: objc.NSInteger) ?*MenuItem {
        return objc.msgSend(self, "itemAtIndex:", ?*MenuItem, .{index});
    }

    pub fn itemWithTitle(self: *@This(), title: ?*String) ?*MenuItem {
        return objc.msgSend(self, "itemWithTitle:", ?*MenuItem, .{title});
    }

    pub fn selectItem(self: *@This(), item: ?*MenuItem) void {
        return objc.msgSend(self, "selectItem:", void, .{item});
    }

    pub fn selectItemAtIndex(self: *@This(), index: objc.NSInteger) void {
        return objc.msgSend(self, "selectItemAtIndex:", void, .{index});
    }

    pub fn selectItemWithTitle(self: *@This(), title: ?*String) void {
        return objc.msgSend(self, "selectItemWithTitle:", void, .{title});
    }

    pub fn selectItemWithTag(self: *@This(), tag: objc.NSInteger) objc.BOOL {
        return objc.msgSend(self, "selectItemWithTag:", objc.BOOL, .{tag});
    }

    pub fn setTitle(self: *@This(), string: ?*String) void {
        return objc.msgSend(self, "setTitle:", void, .{string});
    }

    pub fn synchronizeTitleAndSelectedItem(self: *@This()) void {
        return objc.msgSend(self, "synchronizeTitleAndSelectedItem", void, .{});
    }

    pub fn itemTitleAtIndex(self: *@This(), index: objc.NSInteger) ?*String {
        return objc.msgSend(self, "itemTitleAtIndex:", ?*String, .{index});
    }

    pub fn menu(self: *@This()) ?*Menu {
        return objc.msgSend(self, "menu", ?*Menu, .{});
    }

    pub fn setMenu(self: *@This(), menu: ?*Menu) void {
        return objc.msgSend(self, "setMenu:", void, .{menu});
    }

    pub fn pullsDown(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "pullsDown", objc.BOOL, .{});
    }

    pub fn setPullsDown(self: *@This(), pullsDown: objc.BOOL) void {
        return objc.msgSend(self, "setPullsDown:", void, .{pullsDown});
    }

    pub fn autoenablesItems(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "autoenablesItems", objc.BOOL, .{});
    }

    pub fn setAutoenablesItems(self: *@This(), autoenablesItems: objc.BOOL) void {
        return objc.msgSend(self, "setAutoenablesItems:", void, .{autoenablesItems});
    }

    pub fn preferredEdge(self: *@This()) foundation.RectEdge {
        return objc.msgSend(self, "preferredEdge", foundation.RectEdge, .{});
    }

    pub fn setPreferredEdge(self: *@This(), preferredEdge: foundation.RectEdge) void {
        return objc.msgSend(self, "setPreferredEdge:", void, .{preferredEdge});
    }

    pub fn usesItemFromMenu(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "usesItemFromMenu", objc.BOOL, .{});
    }

    pub fn setUsesItemFromMenu(self: *@This(), usesItemFromMenu: objc.BOOL) void {
        return objc.msgSend(self, "setUsesItemFromMenu:", void, .{usesItemFromMenu});
    }

    pub fn altersStateOfSelectedItem(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "altersStateOfSelectedItem", objc.BOOL, .{});
    }

    pub fn setAltersStateOfSelectedItem(self: *@This(), altersStateOfSelectedItem: objc.BOOL) void {
        return objc.msgSend(self, "setAltersStateOfSelectedItem:", void, .{altersStateOfSelectedItem});
    }

    pub fn itemArray(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "itemArray", ?*anyopaque, .{});
    }

    pub fn numberOfItems(self: *@This()) objc.NSInteger {
        return objc.msgSend(self, "numberOfItems", objc.NSInteger, .{});
    }

    pub fn lastItem(self: *@This()) ?*MenuItem {
        return objc.msgSend(self, "lastItem", ?*MenuItem, .{});
    }

    pub fn selectedItem(self: *@This()) ?*MenuItem {
        return objc.msgSend(self, "selectedItem", ?*MenuItem, .{});
    }

    pub fn indexOfSelectedItem(self: *@This()) objc.NSInteger {
        return objc.msgSend(self, "indexOfSelectedItem", objc.NSInteger, .{});
    }

    pub fn selectedTag(self: *@This()) objc.NSInteger {
        return objc.msgSend(self, "selectedTag", objc.NSInteger, .{});
    }

    pub fn itemTitles(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "itemTitles", ?*anyopaque, .{});
    }

    pub fn titleOfSelectedItem(self: *@This()) ?*String {
        return objc.msgSend(self, "titleOfSelectedItem", ?*String, .{});
    }

};

pub const PrintingPageOrder = enum(objc.NSInteger) {
    DescendingPageOrder = -1,
    SpecialPageOrder = 0,
    AscendingPageOrder = 1,
    UnknownPageOrder = 2,
};

pub const PrintRenderingQuality = enum(objc.NSInteger) {
    Best = 0,
    Responsive = 1,
};

/// https://developer.apple.com/documentation/AppKit/NSPrintOperation?language=objc
pub const PrintOperation = opaque {
    pub const InternalInfo = objc.ExternalClass("NSPrintOperation", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn printOperationWithViewPrintInfo(self: *@This(), view: ?*View, printInfo: ?*PrintInfo) ?*PrintOperation {
        return objc.msgSend(self, "printOperationWithView:printInfo:", ?*PrintOperation, .{view, printInfo});
    }

    pub fn PDFOperationWithViewInsideRectToDataPrintInfo(self: *@This(), view: ?*View, rect: foundation.Rect, data: ?*MutableData, printInfo: ?*PrintInfo, ) ?*PrintOperation {
        return objc.msgSend(self, "PDFOperationWithView:insideRect:toData:printInfo:", ?*PrintOperation, .{view, rect, data, printInfo, });
    }

    pub fn PDFOperationWithViewInsideRectToPathPrintInfo(self: *@This(), view: ?*View, rect: foundation.Rect, path: ?*String, printInfo: ?*PrintInfo, ) ?*PrintOperation {
        return objc.msgSend(self, "PDFOperationWithView:insideRect:toPath:printInfo:", ?*PrintOperation, .{view, rect, path, printInfo, });
    }

    pub fn EPSOperationWithViewInsideRectToDataPrintInfo(self: *@This(), view: ?*View, rect: foundation.Rect, data: ?*MutableData, printInfo: ?*PrintInfo, ) ?*PrintOperation {
        return objc.msgSend(self, "EPSOperationWithView:insideRect:toData:printInfo:", ?*PrintOperation, .{view, rect, data, printInfo, });
    }

    pub fn EPSOperationWithViewInsideRectToPathPrintInfo(self: *@This(), view: ?*View, rect: foundation.Rect, path: ?*String, printInfo: ?*PrintInfo, ) ?*PrintOperation {
        return objc.msgSend(self, "EPSOperationWithView:insideRect:toPath:printInfo:", ?*PrintOperation, .{view, rect, path, printInfo, });
    }

    pub fn printOperationWithView(self: *@This(), view: ?*View) ?*PrintOperation {
        return objc.msgSend(self, "printOperationWithView:", ?*PrintOperation, .{view});
    }

    pub fn PDFOperationWithViewInsideRectToData(self: *@This(), view: ?*View, rect: foundation.Rect, data: ?*MutableData) ?*PrintOperation {
        return objc.msgSend(self, "PDFOperationWithView:insideRect:toData:", ?*PrintOperation, .{view, rect, data});
    }

    pub fn EPSOperationWithViewInsideRectToData(self: *@This(), view: ?*View, rect: foundation.Rect, data: ?*MutableData) ?*PrintOperation {
        return objc.msgSend(self, "EPSOperationWithView:insideRect:toData:", ?*PrintOperation, .{view, rect, data});
    }

    pub fn runOperationModalForWindowDelegateDidRunSelectorContextInfo(self: *@This(), docWindow: ?*Window, delegate: *objc.Id, didRunSelector: *objc.SEL, contextInfo: ?*anyopaque, ) void {
        return objc.msgSend(self, "runOperationModalForWindow:delegate:didRunSelector:contextInfo:", void, .{docWindow, delegate, didRunSelector, contextInfo, });
    }

    pub fn runOperation(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "runOperation", objc.BOOL, .{});
    }

    pub fn createContext(self: *@This()) ?*GraphicsContext {
        return objc.msgSend(self, "createContext", ?*GraphicsContext, .{});
    }

    pub fn destroyContext(self: *@This()) void {
        return objc.msgSend(self, "destroyContext", void, .{});
    }

    pub fn deliverResult(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "deliverResult", objc.BOOL, .{});
    }

    pub fn cleanUpOperation(self: *@This()) void {
        return objc.msgSend(self, "cleanUpOperation", void, .{});
    }

    pub fn currentOperation(self: *@This()) ?*PrintOperation {
        return objc.msgSend(self, "currentOperation", ?*PrintOperation, .{});
    }

    pub fn setCurrentOperation(self: *@This(), currentOperation: ?*PrintOperation) void {
        return objc.msgSend(self, "setCurrentOperation:", void, .{currentOperation});
    }

    pub fn isCopyingOperation(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isCopyingOperation", objc.BOOL, .{});
    }

    pub fn preferredRenderingQuality(self: *@This()) PrintRenderingQuality {
        return objc.msgSend(self, "preferredRenderingQuality", PrintRenderingQuality, .{});
    }

    pub fn jobTitle(self: *@This()) ?*String {
        return objc.msgSend(self, "jobTitle", ?*String, .{});
    }

    pub fn setJobTitle(self: *@This(), jobTitle: ?*String) void {
        return objc.msgSend(self, "setJobTitle:", void, .{jobTitle});
    }

    pub fn showsPrintPanel(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "showsPrintPanel", objc.BOOL, .{});
    }

    pub fn setShowsPrintPanel(self: *@This(), showsPrintPanel: objc.BOOL) void {
        return objc.msgSend(self, "setShowsPrintPanel:", void, .{showsPrintPanel});
    }

    pub fn showsProgressPanel(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "showsProgressPanel", objc.BOOL, .{});
    }

    pub fn setShowsProgressPanel(self: *@This(), showsProgressPanel: objc.BOOL) void {
        return objc.msgSend(self, "setShowsProgressPanel:", void, .{showsProgressPanel});
    }

    pub fn printPanel(self: *@This()) ?*PrintPanel {
        return objc.msgSend(self, "printPanel", ?*PrintPanel, .{});
    }

    pub fn setPrintPanel(self: *@This(), printPanel: ?*PrintPanel) void {
        return objc.msgSend(self, "setPrintPanel:", void, .{printPanel});
    }

    pub fn PDFPanel(self: *@This()) ?*PDFPanel {
        return objc.msgSend(self, "PDFPanel", ?*PDFPanel, .{});
    }

    pub fn setPDFPanel(self: *@This(), PDFPanel: ?*PDFPanel) void {
        return objc.msgSend(self, "setPDFPanel:", void, .{PDFPanel});
    }

    pub fn canSpawnSeparateThread(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "canSpawnSeparateThread", objc.BOOL, .{});
    }

    pub fn setCanSpawnSeparateThread(self: *@This(), canSpawnSeparateThread: objc.BOOL) void {
        return objc.msgSend(self, "setCanSpawnSeparateThread:", void, .{canSpawnSeparateThread});
    }

    pub fn pageOrder(self: *@This()) PrintingPageOrder {
        return objc.msgSend(self, "pageOrder", PrintingPageOrder, .{});
    }

    pub fn setPageOrder(self: *@This(), pageOrder: PrintingPageOrder) void {
        return objc.msgSend(self, "setPageOrder:", void, .{pageOrder});
    }

    pub fn view(self: *@This()) ?*View {
        return objc.msgSend(self, "view", ?*View, .{});
    }

    pub fn printInfo(self: *@This()) ?*PrintInfo {
        return objc.msgSend(self, "printInfo", ?*PrintInfo, .{});
    }

    pub fn setPrintInfo(self: *@This(), printInfo: ?*PrintInfo) void {
        return objc.msgSend(self, "setPrintInfo:", void, .{printInfo});
    }

    pub fn context(self: *@This()) ?*GraphicsContext {
        return objc.msgSend(self, "context", ?*GraphicsContext, .{});
    }

    pub fn pageRange(self: *@This()) foundation.Range {
        return objc.msgSend(self, "pageRange", foundation.Range, .{});
    }

    pub fn currentPage(self: *@This()) objc.NSInteger {
        return objc.msgSend(self, "currentPage", objc.NSInteger, .{});
    }

};

pub const PrintPanelResult = enum(objc.NSInteger) {
    Cancelled = 0,
    Printed = 1,
};

pub const PrintPanelOptions = enum(objc.NSUInteger) {
    ShowsCopies = 1,
    ShowsPageRange = 2,
    ShowsPaperSize = 4,
    ShowsOrientation = 8,
    ShowsScaling = 16,
    ShowsPrintSelection = 32,
    ShowsPageSetupAccessory = 256,
    ShowsPreview = 131072,
};

pub const PrintPanelJobStyleHint = ?*String;

pub const PrintPanelAccessorySummaryKey = ?*String;

/// https://developer.apple.com/documentation/AppKit/NSPrintPanelAccessorizing?language=objc
pub const PrintPanelAccessorizing = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn localizedSummaryItems(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "localizedSummaryItems", ?*anyopaque, .{});
    }

    pub fn keyPathsForValuesAffectingPreview(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "keyPathsForValuesAffectingPreview", ?*anyopaque, .{});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSPrintPanel?language=objc
pub const PrintPanel = opaque {
    pub const InternalInfo = objc.ExternalClass("NSPrintPanel", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn printPanel(self: *@This()) ?*PrintPanel {
        return objc.msgSend(self, "printPanel", ?*PrintPanel, .{});
    }

    pub fn addAccessoryController(self: *@This(), accessoryController: ?*anyopaque) void {
        return objc.msgSend(self, "addAccessoryController:", void, .{accessoryController});
    }

    pub fn removeAccessoryController(self: *@This(), accessoryController: ?*anyopaque) void {
        return objc.msgSend(self, "removeAccessoryController:", void, .{accessoryController});
    }

    pub fn setDefaultButtonTitle(self: *@This(), defaultButtonTitle: ?*String) void {
        return objc.msgSend(self, "setDefaultButtonTitle:", void, .{defaultButtonTitle});
    }

    pub fn defaultButtonTitle(self: *@This()) ?*String {
        return objc.msgSend(self, "defaultButtonTitle", ?*String, .{});
    }

    pub fn beginSheetUsingPrintInfoOnWindowCompletionHandler(self: *@This(), printInfo: ?*PrintInfo, parentWindow: ?*Window, handler: *const fn(PrintPanelResult) callconv(.C) void) void {
        return objc.msgSend(self, "beginSheetUsingPrintInfo:onWindow:completionHandler:", void, .{printInfo, parentWindow, handler});
    }

    pub fn beginSheetWithPrintInfoModalForWindowDelegateDidEndSelectorContextInfo(self: *@This(), printInfo: ?*PrintInfo, docWindow: ?*Window, delegate: *objc.Id, didEndSelector: *objc.SEL, contextInfo: ?*anyopaque, ) void {
        return objc.msgSend(self, "beginSheetWithPrintInfo:modalForWindow:delegate:didEndSelector:contextInfo:", void, .{printInfo, docWindow, delegate, didEndSelector, contextInfo, });
    }

    pub fn runModalWithPrintInfo(self: *@This(), printInfo: ?*PrintInfo) objc.NSInteger {
        return objc.msgSend(self, "runModalWithPrintInfo:", objc.NSInteger, .{printInfo});
    }

    pub fn runModal(self: *@This()) objc.NSInteger {
        return objc.msgSend(self, "runModal", objc.NSInteger, .{});
    }

    pub fn accessoryControllers(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "accessoryControllers", ?*anyopaque, .{});
    }

    pub fn options(self: *@This()) PrintPanelOptions {
        return objc.msgSend(self, "options", PrintPanelOptions, .{});
    }

    pub fn setOptions(self: *@This(), options: PrintPanelOptions) void {
        return objc.msgSend(self, "setOptions:", void, .{options});
    }

    pub fn helpAnchor(self: *@This()) HelpAnchorName {
        return objc.msgSend(self, "helpAnchor", HelpAnchorName, .{});
    }

    pub fn setHelpAnchor(self: *@This(), helpAnchor: HelpAnchorName) void {
        return objc.msgSend(self, "setHelpAnchor:", void, .{helpAnchor});
    }

    pub fn jobStyleHint(self: *@This()) PrintPanelJobStyleHint {
        return objc.msgSend(self, "jobStyleHint", PrintPanelJobStyleHint, .{});
    }

    pub fn setJobStyleHint(self: *@This(), jobStyleHint: PrintPanelJobStyleHint) void {
        return objc.msgSend(self, "setJobStyleHint:", void, .{jobStyleHint});
    }

    pub fn printInfo(self: *@This()) ?*PrintInfo {
        return objc.msgSend(self, "printInfo", ?*PrintInfo, .{});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSPDFInfo?language=objc
pub const PDFInfo = opaque {
    pub const InternalInfo = objc.ExternalClass("NSPDFInfo", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn URL(self: *@This()) ?*URL {
        return objc.msgSend(self, "URL", ?*URL, .{});
    }

    pub fn setURL(self: *@This(), URL: ?*URL) void {
        return objc.msgSend(self, "setURL:", void, .{URL});
    }

    pub fn isFileExtensionHidden(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isFileExtensionHidden", objc.BOOL, .{});
    }

    pub fn setFileExtensionHidden(self: *@This(), fileExtensionHidden: objc.BOOL) void {
        return objc.msgSend(self, "setFileExtensionHidden:", void, .{fileExtensionHidden});
    }

    pub fn tagNames(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "tagNames", ?*anyopaque, .{});
    }

    pub fn setTagNames(self: *@This(), tagNames: ?*anyopaque) void {
        return objc.msgSend(self, "setTagNames:", void, .{tagNames});
    }

    pub fn orientation(self: *@This()) PaperOrientation {
        return objc.msgSend(self, "orientation", PaperOrientation, .{});
    }

    pub fn setOrientation(self: *@This(), orientation: PaperOrientation) void {
        return objc.msgSend(self, "setOrientation:", void, .{orientation});
    }

    pub fn paperSize(self: *@This()) foundation.Size {
        return objc.msgSend(self, "paperSize", foundation.Size, .{});
    }

    pub fn setPaperSize(self: *@This(), paperSize: foundation.Size) void {
        return objc.msgSend(self, "setPaperSize:", void, .{paperSize});
    }

    pub fn attributes(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "attributes", ?*anyopaque, .{});
    }

};

pub const PDFPanelOptions = enum(objc.NSInteger) {
    ShowsPaperSize = 4,
    ShowsOrientation = 8,
    RequestsParentDirectory = 16777216,
};

/// https://developer.apple.com/documentation/AppKit/NSPDFPanel?language=objc
pub const PDFPanel = opaque {
    pub const InternalInfo = objc.ExternalClass("NSPDFPanel", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn panel(self: *@This()) ?*PDFPanel {
        return objc.msgSend(self, "panel", ?*PDFPanel, .{});
    }

    pub fn beginSheetWithPDFInfoModalForWindowCompletionHandler(self: *@This(), pdfInfo: ?*PDFInfo, docWindow: ?*Window, completionHandler: *const fn(objc.NSInteger) callconv(.C) void) void {
        return objc.msgSend(self, "beginSheetWithPDFInfo:modalForWindow:completionHandler:", void, .{pdfInfo, docWindow, completionHandler});
    }

    pub fn accessoryController(self: *@This()) ?*ViewController {
        return objc.msgSend(self, "accessoryController", ?*ViewController, .{});
    }

    pub fn setAccessoryController(self: *@This(), accessoryController: ?*ViewController) void {
        return objc.msgSend(self, "setAccessoryController:", void, .{accessoryController});
    }

    pub fn options(self: *@This()) PDFPanelOptions {
        return objc.msgSend(self, "options", PDFPanelOptions, .{});
    }

    pub fn setOptions(self: *@This(), options: PDFPanelOptions) void {
        return objc.msgSend(self, "setOptions:", void, .{options});
    }

    pub fn defaultFileName(self: *@This()) ?*String {
        return objc.msgSend(self, "defaultFileName", ?*String, .{});
    }

    pub fn setDefaultFileName(self: *@This(), defaultFileName: ?*String) void {
        return objc.msgSend(self, "setDefaultFileName:", void, .{defaultFileName});
    }

};

pub const MediaLibrary = enum(objc.NSUInteger) {
    Audio = 1,
    Image = 2,
    Movie = 4,
};

/// https://developer.apple.com/documentation/AppKit/NSMediaLibraryBrowserController?language=objc
pub const MediaLibraryBrowserController = opaque {
    pub const InternalInfo = objc.ExternalClass("NSMediaLibraryBrowserController", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn togglePanel(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "togglePanel:", void, .{sender});
    }

    pub fn sharedMediaLibraryBrowserController(self: *@This()) ?*MediaLibraryBrowserController {
        return objc.msgSend(self, "sharedMediaLibraryBrowserController", ?*MediaLibraryBrowserController, .{});
    }

    pub fn isVisible(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isVisible", objc.BOOL, .{});
    }

    pub fn setVisible(self: *@This(), visible: objc.BOOL) void {
        return objc.msgSend(self, "setVisible:", void, .{visible});
    }

    pub fn frame(self: *@This()) foundation.Rect {
        return objc.msgSend(self, "frame", foundation.Rect, .{});
    }

    pub fn setFrame(self: *@This(), frame: foundation.Rect) void {
        return objc.msgSend(self, "setFrame:", void, .{frame});
    }

    pub fn mediaLibraries(self: *@This()) MediaLibrary {
        return objc.msgSend(self, "mediaLibraries", MediaLibrary, .{});
    }

    pub fn setMediaLibraries(self: *@This(), mediaLibraries: MediaLibrary) void {
        return objc.msgSend(self, "setMediaLibraries:", void, .{mediaLibraries});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSScreen?language=objc
pub const Screen = opaque {
    pub const InternalInfo = objc.ExternalClass("NSScreen", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn canRepresentDisplayGamut(self: *@This(), displayGamut: DisplayGamut) objc.BOOL {
        return objc.msgSend(self, "canRepresentDisplayGamut:", objc.BOOL, .{displayGamut});
    }

    pub fn convertRectToBacking(self: *@This(), rect: foundation.Rect) foundation.Rect {
        return objc.msgSend(self, "convertRectToBacking:", foundation.Rect, .{rect});
    }

    pub fn convertRectFromBacking(self: *@This(), rect: foundation.Rect) foundation.Rect {
        return objc.msgSend(self, "convertRectFromBacking:", foundation.Rect, .{rect});
    }

    pub fn backingAlignedRectOptions(self: *@This(), rect: foundation.Rect, options: foundation.AlignmentOptions) foundation.Rect {
        return objc.msgSend(self, "backingAlignedRect:options:", foundation.Rect, .{rect, options});
    }

    pub fn screens(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "screens", ?*anyopaque, .{});
    }

    pub fn mainScreen(self: *@This()) ?*Screen {
        return objc.msgSend(self, "mainScreen", ?*Screen, .{});
    }

    pub fn deepestScreen(self: *@This()) ?*Screen {
        return objc.msgSend(self, "deepestScreen", ?*Screen, .{});
    }

    pub fn screensHaveSeparateSpaces(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "screensHaveSeparateSpaces", objc.BOOL, .{});
    }

    pub fn depth(self: *@This()) WindowDepth {
        return objc.msgSend(self, "depth", WindowDepth, .{});
    }

    pub fn frame(self: *@This()) foundation.Rect {
        return objc.msgSend(self, "frame", foundation.Rect, .{});
    }

    pub fn visibleFrame(self: *@This()) foundation.Rect {
        return objc.msgSend(self, "visibleFrame", foundation.Rect, .{});
    }

    pub fn deviceDescription(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "deviceDescription", ?*anyopaque, .{});
    }

    pub fn colorSpace(self: *@This()) ?*ColorSpace {
        return objc.msgSend(self, "colorSpace", ?*ColorSpace, .{});
    }

    pub fn supportedWindowDepths(self: *@This()) ?*WindowDepth {
        return objc.msgSend(self, "supportedWindowDepths", ?*WindowDepth, .{});
    }

    pub fn backingScaleFactor(self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(self, "backingScaleFactor", core_foundation.CGFloat, .{});
    }

    pub fn localizedName(self: *@This()) ?*String {
        return objc.msgSend(self, "localizedName", ?*String, .{});
    }

    pub fn safeAreaInsets(self: *@This()) foundation.EdgeInsets {
        return objc.msgSend(self, "safeAreaInsets", foundation.EdgeInsets, .{});
    }

    pub fn auxiliaryTopLeftArea(self: *@This()) foundation.Rect {
        return objc.msgSend(self, "auxiliaryTopLeftArea", foundation.Rect, .{});
    }

    pub fn auxiliaryTopRightArea(self: *@This()) foundation.Rect {
        return objc.msgSend(self, "auxiliaryTopRightArea", foundation.Rect, .{});
    }

};

pub const UsableScrollerParts = enum(objc.NSUInteger) {
    NoScrollerParts = 0,
    OnlyScrollerArrows = 1,
    AllScrollerParts = 2,
};

pub const ScrollerPart = enum(objc.NSUInteger) {
    NoPart = 0,
    DecrementPage = 1,
    Knob = 2,
    IncrementPage = 3,
    DecrementLine = 4,
    IncrementLine = 5,
    KnobSlot = 6,
};

pub const ScrollerStyle = enum(objc.NSInteger) {
    Legacy = 0,
    Overlay = 1,
};

pub const ScrollerKnobStyle = enum(objc.NSInteger) {
    Default = 0,
    Dark = 1,
    Light = 2,
};

/// https://developer.apple.com/documentation/AppKit/NSScroller?language=objc
pub const Scroller = opaque {
    pub const InternalInfo = objc.ExternalClass("NSScroller", @This(), Control, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn scrollerWidthForControlSizeScrollerStyle(self: *@This(), controlSize: ControlSize, scrollerStyle: ScrollerStyle) core_foundation.CGFloat {
        return objc.msgSend(self, "scrollerWidthForControlSize:scrollerStyle:", core_foundation.CGFloat, .{controlSize, scrollerStyle});
    }

    pub fn rectForPart(self: *@This(), partCode: ScrollerPart) foundation.Rect {
        return objc.msgSend(self, "rectForPart:", foundation.Rect, .{partCode});
    }

    pub fn checkSpaceForParts(self: *@This()) void {
        return objc.msgSend(self, "checkSpaceForParts", void, .{});
    }

    pub fn drawKnob(self: *@This()) void {
        return objc.msgSend(self, "drawKnob", void, .{});
    }

    pub fn drawKnobSlotInRectHighlight(self: *@This(), slotRect: foundation.Rect, flag: objc.BOOL) void {
        return objc.msgSend(self, "drawKnobSlotInRect:highlight:", void, .{slotRect, flag});
    }

    pub fn testPart(self: *@This(), point: foundation.Point) ScrollerPart {
        return objc.msgSend(self, "testPart:", ScrollerPart, .{point});
    }

    pub fn trackKnob(self: *@This(), event: ?*Event) void {
        return objc.msgSend(self, "trackKnob:", void, .{event});
    }

    pub fn setKnobProportion(self: *@This(), proportion: core_foundation.CGFloat) void {
        return objc.msgSend(self, "setKnobProportion:", void, .{proportion});
    }

    pub fn isCompatibleWithOverlayScrollers(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isCompatibleWithOverlayScrollers", objc.BOOL, .{});
    }

    pub fn preferredScrollerStyle(self: *@This()) ScrollerStyle {
        return objc.msgSend(self, "preferredScrollerStyle", ScrollerStyle, .{});
    }

    pub fn scrollerStyle(self: *@This()) ScrollerStyle {
        return objc.msgSend(self, "scrollerStyle", ScrollerStyle, .{});
    }

    pub fn setScrollerStyle(self: *@This(), scrollerStyle: ScrollerStyle) void {
        return objc.msgSend(self, "setScrollerStyle:", void, .{scrollerStyle});
    }

    pub fn knobStyle(self: *@This()) ScrollerKnobStyle {
        return objc.msgSend(self, "knobStyle", ScrollerKnobStyle, .{});
    }

    pub fn setKnobStyle(self: *@This(), knobStyle: ScrollerKnobStyle) void {
        return objc.msgSend(self, "setKnobStyle:", void, .{knobStyle});
    }

    pub fn usableParts(self: *@This()) UsableScrollerParts {
        return objc.msgSend(self, "usableParts", UsableScrollerParts, .{});
    }

    pub fn controlSize(self: *@This()) ControlSize {
        return objc.msgSend(self, "controlSize", ControlSize, .{});
    }

    pub fn setControlSize(self: *@This(), controlSize: ControlSize) void {
        return objc.msgSend(self, "setControlSize:", void, .{controlSize});
    }

    pub fn hitPart(self: *@This()) ScrollerPart {
        return objc.msgSend(self, "hitPart", ScrollerPart, .{});
    }

    pub fn knobProportion(self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(self, "knobProportion", core_foundation.CGFloat, .{});
    }

};

pub const ScrollArrowPosition = enum(objc.NSUInteger) {
    ScrollerArrowsMaxEnd = 0,
    ScrollerArrowsMinEnd = 1,
    ScrollerArrowsDefaultSetting = 0,
    ScrollerArrowsNone = 2,
};

pub const ScrollerArrow = enum(objc.NSUInteger) {
    IncrementArrow = 0,
    DecrementArrow = 1,
};

pub const TextFinderAction = enum(objc.NSInteger) {
    ShowFindInterface = 1,
    NextMatch = 2,
    PreviousMatch = 3,
    ReplaceAll = 4,
    Replace = 5,
    ReplaceAndFind = 6,
    SetSearchString = 7,
    ReplaceAllInSelection = 8,
    SelectAll = 9,
    SelectAllInSelection = 10,
    HideFindInterface = 11,
    ShowReplaceInterface = 12,
    HideReplaceInterface = 13,
};

pub const PasteboardTypeTextFinderOptionKey = ?*String;

pub const TextFinderMatchingType = enum(objc.NSInteger) {
    Contains = 0,
    StartsWith = 1,
    FullWord = 2,
    EndsWith = 3,
};

/// https://developer.apple.com/documentation/AppKit/NSTextFinder?language=objc
pub const TextFinder = opaque {
    pub const InternalInfo = objc.ExternalClass("NSTextFinder", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn init(self: *@This()) *@This() {
        return objc.msgSend(self, "init", *@This(), .{});
    }

    pub fn initWithCoder(self: *@This(), coder: ?*foundation.Coder) *@This() {
        return objc.msgSend(self, "initWithCoder:", *@This(), .{coder});
    }

    pub fn performAction(self: *@This(), op: TextFinderAction) void {
        return objc.msgSend(self, "performAction:", void, .{op});
    }

    pub fn validateAction(self: *@This(), op: TextFinderAction) objc.BOOL {
        return objc.msgSend(self, "validateAction:", objc.BOOL, .{op});
    }

    pub fn cancelFindIndicator(self: *@This()) void {
        return objc.msgSend(self, "cancelFindIndicator", void, .{});
    }

    pub fn drawIncrementalMatchHighlightInRect(self: *@This(), rect: foundation.Rect) void {
        return objc.msgSend(self, "drawIncrementalMatchHighlightInRect:", void, .{rect});
    }

    pub fn noteClientStringWillChange(self: *@This()) void {
        return objc.msgSend(self, "noteClientStringWillChange", void, .{});
    }

    pub fn client(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "client", ?*anyopaque, .{});
    }

    pub fn setClient(self: *@This(), client: ?*anyopaque) void {
        return objc.msgSend(self, "setClient:", void, .{client});
    }

    pub fn findBarContainer(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "findBarContainer", ?*anyopaque, .{});
    }

    pub fn setFindBarContainer(self: *@This(), findBarContainer: ?*anyopaque) void {
        return objc.msgSend(self, "setFindBarContainer:", void, .{findBarContainer});
    }

    pub fn findIndicatorNeedsUpdate(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "findIndicatorNeedsUpdate", objc.BOOL, .{});
    }

    pub fn setFindIndicatorNeedsUpdate(self: *@This(), findIndicatorNeedsUpdate: objc.BOOL) void {
        return objc.msgSend(self, "setFindIndicatorNeedsUpdate:", void, .{findIndicatorNeedsUpdate});
    }

    pub fn isIncrementalSearchingEnabled(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isIncrementalSearchingEnabled", objc.BOOL, .{});
    }

    pub fn setIncrementalSearchingEnabled(self: *@This(), incrementalSearchingEnabled: objc.BOOL) void {
        return objc.msgSend(self, "setIncrementalSearchingEnabled:", void, .{incrementalSearchingEnabled});
    }

    pub fn incrementalSearchingShouldDimContentView(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "incrementalSearchingShouldDimContentView", objc.BOOL, .{});
    }

    pub fn setIncrementalSearchingShouldDimContentView(self: *@This(), incrementalSearchingShouldDimContentView: objc.BOOL) void {
        return objc.msgSend(self, "setIncrementalSearchingShouldDimContentView:", void, .{incrementalSearchingShouldDimContentView});
    }

    pub fn incrementalMatchRanges(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "incrementalMatchRanges", ?*anyopaque, .{});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSTextFinderClient?language=objc
pub const TextFinderClient = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{objc.NSObject, });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn stringAtIndexEffectiveRangeEndsWithSearchBoundary(self: *@This(), characterIndex: objc.NSUInteger, outRange: foundation.RangePointer, outFlag: ?*objc.BOOL) ?*String {
        return objc.msgSend(self, "stringAtIndex:effectiveRange:endsWithSearchBoundary:", ?*String, .{characterIndex, outRange, outFlag});
    }

    pub fn stringLength(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "stringLength", objc.NSUInteger, .{});
    }

    pub fn scrollRangeToVisible(self: *@This(), range: foundation.Range) void {
        return objc.msgSend(self, "scrollRangeToVisible:", void, .{range});
    }

    pub fn shouldReplaceCharactersInRangesWithStrings(self: *@This(), ranges: ?*anyopaque, strings: ?*anyopaque) objc.BOOL {
        return objc.msgSend(self, "shouldReplaceCharactersInRanges:withStrings:", objc.BOOL, .{ranges, strings});
    }

    pub fn replaceCharactersInRangeWithString(self: *@This(), range: foundation.Range, string: ?*String) void {
        return objc.msgSend(self, "replaceCharactersInRange:withString:", void, .{range, string});
    }

    pub fn didReplaceCharacters(self: *@This()) void {
        return objc.msgSend(self, "didReplaceCharacters", void, .{});
    }

    pub fn contentViewAtIndexEffectiveCharacterRange(self: *@This(), index: objc.NSUInteger, outRange: foundation.RangePointer) ?*View {
        return objc.msgSend(self, "contentViewAtIndex:effectiveCharacterRange:", ?*View, .{index, outRange});
    }

    pub fn rectsForCharacterRange(self: *@This(), range: foundation.Range) ?*anyopaque {
        return objc.msgSend(self, "rectsForCharacterRange:", ?*anyopaque, .{range});
    }

    pub fn drawCharactersInRangeForContentView(self: *@This(), range: foundation.Range, view: ?*View) void {
        return objc.msgSend(self, "drawCharactersInRange:forContentView:", void, .{range, view});
    }

    pub fn isSelectable(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isSelectable", objc.BOOL, .{});
    }

    pub fn allowsMultipleSelection(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "allowsMultipleSelection", objc.BOOL, .{});
    }

    pub fn isEditable(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isEditable", objc.BOOL, .{});
    }

    pub fn string(self: *@This()) ?*String {
        return objc.msgSend(self, "string", ?*String, .{});
    }

    pub fn firstSelectedRange(self: *@This()) foundation.Range {
        return objc.msgSend(self, "firstSelectedRange", foundation.Range, .{});
    }

    pub fn selectedRanges(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "selectedRanges", ?*anyopaque, .{});
    }

    pub fn setSelectedRanges(self: *@This(), selectedRanges: ?*anyopaque) void {
        return objc.msgSend(self, "setSelectedRanges:", void, .{selectedRanges});
    }

    pub fn visibleCharacterRanges(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "visibleCharacterRanges", ?*anyopaque, .{});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSTextFinderBarContainer?language=objc
pub const TextFinderBarContainer = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{objc.NSObject, });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn findBarViewDidChangeHeight(self: *@This()) void {
        return objc.msgSend(self, "findBarViewDidChangeHeight", void, .{});
    }

    pub fn contentView(self: *@This()) ?*View {
        return objc.msgSend(self, "contentView", ?*View, .{});
    }

    pub fn findBarView(self: *@This()) ?*View {
        return objc.msgSend(self, "findBarView", ?*View, .{});
    }

    pub fn setFindBarView(self: *@This(), findBarView: ?*View) void {
        return objc.msgSend(self, "setFindBarView:", void, .{findBarView});
    }

    pub fn isFindBarVisible(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isFindBarVisible", objc.BOOL, .{});
    }

    pub fn setFindBarVisible(self: *@This(), findBarVisible: objc.BOOL) void {
        return objc.msgSend(self, "setFindBarVisible:", void, .{findBarVisible});
    }

};

pub const ScrollElasticity = enum(objc.NSInteger) {
    Automatic = 0,
    None = 1,
    Allowed = 2,
};

/// https://developer.apple.com/documentation/AppKit/NSScrollView?language=objc
pub const ScrollView = opaque {
    pub const InternalInfo = objc.ExternalClass("NSScrollView", @This(), View, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn initWithFrame(self: *@This(), frameRect: foundation.Rect) *@This() {
        return objc.msgSend(self, "initWithFrame:", *@This(), .{frameRect});
    }

    pub fn initWithCoder(self: *@This(), coder: ?*foundation.Coder) *@This() {
        return objc.msgSend(self, "initWithCoder:", *@This(), .{coder});
    }

    pub fn frameSizeForContentSizeHorizontalScrollerClassVerticalScrollerClassBorderTypeControlSizeScrollerStyle(self: *@This(), cSize: foundation.Size, horizontalScrollerClass: *objc.Class, verticalScrollerClass: *objc.Class, @"type": BorderType, controlSize: ControlSize, scrollerStyle: ScrollerStyle, ) foundation.Size {
        return objc.msgSend(self, "frameSizeForContentSize:horizontalScrollerClass:verticalScrollerClass:borderType:controlSize:scrollerStyle:", foundation.Size, .{cSize, horizontalScrollerClass, verticalScrollerClass, @"type", controlSize, scrollerStyle, });
    }

    pub fn contentSizeForFrameSizeHorizontalScrollerClassVerticalScrollerClassBorderTypeControlSizeScrollerStyle(self: *@This(), fSize: foundation.Size, horizontalScrollerClass: *objc.Class, verticalScrollerClass: *objc.Class, @"type": BorderType, controlSize: ControlSize, scrollerStyle: ScrollerStyle, ) foundation.Size {
        return objc.msgSend(self, "contentSizeForFrameSize:horizontalScrollerClass:verticalScrollerClass:borderType:controlSize:scrollerStyle:", foundation.Size, .{fSize, horizontalScrollerClass, verticalScrollerClass, @"type", controlSize, scrollerStyle, });
    }

    pub fn frameSizeForContentSizeHasHorizontalScrollerHasVerticalScrollerBorderType(self: *@This(), cSize: foundation.Size, hFlag: objc.BOOL, vFlag: objc.BOOL, @"type": BorderType, ) foundation.Size {
        return objc.msgSend(self, "frameSizeForContentSize:hasHorizontalScroller:hasVerticalScroller:borderType:", foundation.Size, .{cSize, hFlag, vFlag, @"type", });
    }

    pub fn contentSizeForFrameSizeHasHorizontalScrollerHasVerticalScrollerBorderType(self: *@This(), fSize: foundation.Size, hFlag: objc.BOOL, vFlag: objc.BOOL, @"type": BorderType, ) foundation.Size {
        return objc.msgSend(self, "contentSizeForFrameSize:hasHorizontalScroller:hasVerticalScroller:borderType:", foundation.Size, .{fSize, hFlag, vFlag, @"type", });
    }

    pub fn tile(self: *@This()) void {
        return objc.msgSend(self, "tile", void, .{});
    }

    pub fn reflectScrolledClipView(self: *@This(), cView: ?*ClipView) void {
        return objc.msgSend(self, "reflectScrolledClipView:", void, .{cView});
    }

    pub fn scrollWheel(self: *@This(), event: ?*Event) void {
        return objc.msgSend(self, "scrollWheel:", void, .{event});
    }

    pub fn flashScrollers(self: *@This()) void {
        return objc.msgSend(self, "flashScrollers", void, .{});
    }

    pub fn magnifyToFitRect(self: *@This(), rect: foundation.Rect) void {
        return objc.msgSend(self, "magnifyToFitRect:", void, .{rect});
    }

    pub fn setMagnificationCenteredAtPoint(self: *@This(), magnification: core_foundation.CGFloat, point: foundation.Point) void {
        return objc.msgSend(self, "setMagnification:centeredAtPoint:", void, .{magnification, point});
    }

    pub fn addFloatingSubviewForAxis(self: *@This(), view: ?*View, axis: EventGestureAxis) void {
        return objc.msgSend(self, "addFloatingSubview:forAxis:", void, .{view, axis});
    }

    pub fn documentVisibleRect(self: *@This()) foundation.Rect {
        return objc.msgSend(self, "documentVisibleRect", foundation.Rect, .{});
    }

    pub fn contentSize(self: *@This()) foundation.Size {
        return objc.msgSend(self, "contentSize", foundation.Size, .{});
    }

    pub fn documentView(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "documentView", ?*anyopaque, .{});
    }

    pub fn setDocumentView(self: *@This(), documentView: ?*anyopaque) void {
        return objc.msgSend(self, "setDocumentView:", void, .{documentView});
    }

    pub fn contentView(self: *@This()) ?*ClipView {
        return objc.msgSend(self, "contentView", ?*ClipView, .{});
    }

    pub fn setContentView(self: *@This(), contentView: ?*ClipView) void {
        return objc.msgSend(self, "setContentView:", void, .{contentView});
    }

    pub fn documentCursor(self: *@This()) ?*Cursor {
        return objc.msgSend(self, "documentCursor", ?*Cursor, .{});
    }

    pub fn setDocumentCursor(self: *@This(), documentCursor: ?*Cursor) void {
        return objc.msgSend(self, "setDocumentCursor:", void, .{documentCursor});
    }

    pub fn borderType(self: *@This()) BorderType {
        return objc.msgSend(self, "borderType", BorderType, .{});
    }

    pub fn setBorderType(self: *@This(), borderType: BorderType) void {
        return objc.msgSend(self, "setBorderType:", void, .{borderType});
    }

    pub fn backgroundColor(self: *@This()) ?*Color {
        return objc.msgSend(self, "backgroundColor", ?*Color, .{});
    }

    pub fn setBackgroundColor(self: *@This(), backgroundColor: ?*Color) void {
        return objc.msgSend(self, "setBackgroundColor:", void, .{backgroundColor});
    }

    pub fn drawsBackground(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "drawsBackground", objc.BOOL, .{});
    }

    pub fn setDrawsBackground(self: *@This(), drawsBackground: objc.BOOL) void {
        return objc.msgSend(self, "setDrawsBackground:", void, .{drawsBackground});
    }

    pub fn hasVerticalScroller(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "hasVerticalScroller", objc.BOOL, .{});
    }

    pub fn setHasVerticalScroller(self: *@This(), hasVerticalScroller: objc.BOOL) void {
        return objc.msgSend(self, "setHasVerticalScroller:", void, .{hasVerticalScroller});
    }

    pub fn hasHorizontalScroller(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "hasHorizontalScroller", objc.BOOL, .{});
    }

    pub fn setHasHorizontalScroller(self: *@This(), hasHorizontalScroller: objc.BOOL) void {
        return objc.msgSend(self, "setHasHorizontalScroller:", void, .{hasHorizontalScroller});
    }

    pub fn verticalScroller(self: *@This()) ?*Scroller {
        return objc.msgSend(self, "verticalScroller", ?*Scroller, .{});
    }

    pub fn setVerticalScroller(self: *@This(), verticalScroller: ?*Scroller) void {
        return objc.msgSend(self, "setVerticalScroller:", void, .{verticalScroller});
    }

    pub fn horizontalScroller(self: *@This()) ?*Scroller {
        return objc.msgSend(self, "horizontalScroller", ?*Scroller, .{});
    }

    pub fn setHorizontalScroller(self: *@This(), horizontalScroller: ?*Scroller) void {
        return objc.msgSend(self, "setHorizontalScroller:", void, .{horizontalScroller});
    }

    pub fn autohidesScrollers(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "autohidesScrollers", objc.BOOL, .{});
    }

    pub fn setAutohidesScrollers(self: *@This(), autohidesScrollers: objc.BOOL) void {
        return objc.msgSend(self, "setAutohidesScrollers:", void, .{autohidesScrollers});
    }

    pub fn horizontalLineScroll(self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(self, "horizontalLineScroll", core_foundation.CGFloat, .{});
    }

    pub fn setHorizontalLineScroll(self: *@This(), horizontalLineScroll: core_foundation.CGFloat) void {
        return objc.msgSend(self, "setHorizontalLineScroll:", void, .{horizontalLineScroll});
    }

    pub fn verticalLineScroll(self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(self, "verticalLineScroll", core_foundation.CGFloat, .{});
    }

    pub fn setVerticalLineScroll(self: *@This(), verticalLineScroll: core_foundation.CGFloat) void {
        return objc.msgSend(self, "setVerticalLineScroll:", void, .{verticalLineScroll});
    }

    pub fn lineScroll(self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(self, "lineScroll", core_foundation.CGFloat, .{});
    }

    pub fn setLineScroll(self: *@This(), lineScroll: core_foundation.CGFloat) void {
        return objc.msgSend(self, "setLineScroll:", void, .{lineScroll});
    }

    pub fn horizontalPageScroll(self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(self, "horizontalPageScroll", core_foundation.CGFloat, .{});
    }

    pub fn setHorizontalPageScroll(self: *@This(), horizontalPageScroll: core_foundation.CGFloat) void {
        return objc.msgSend(self, "setHorizontalPageScroll:", void, .{horizontalPageScroll});
    }

    pub fn verticalPageScroll(self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(self, "verticalPageScroll", core_foundation.CGFloat, .{});
    }

    pub fn setVerticalPageScroll(self: *@This(), verticalPageScroll: core_foundation.CGFloat) void {
        return objc.msgSend(self, "setVerticalPageScroll:", void, .{verticalPageScroll});
    }

    pub fn pageScroll(self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(self, "pageScroll", core_foundation.CGFloat, .{});
    }

    pub fn setPageScroll(self: *@This(), pageScroll: core_foundation.CGFloat) void {
        return objc.msgSend(self, "setPageScroll:", void, .{pageScroll});
    }

    pub fn scrollsDynamically(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "scrollsDynamically", objc.BOOL, .{});
    }

    pub fn setScrollsDynamically(self: *@This(), scrollsDynamically: objc.BOOL) void {
        return objc.msgSend(self, "setScrollsDynamically:", void, .{scrollsDynamically});
    }

    pub fn scrollerStyle(self: *@This()) ScrollerStyle {
        return objc.msgSend(self, "scrollerStyle", ScrollerStyle, .{});
    }

    pub fn setScrollerStyle(self: *@This(), scrollerStyle: ScrollerStyle) void {
        return objc.msgSend(self, "setScrollerStyle:", void, .{scrollerStyle});
    }

    pub fn scrollerKnobStyle(self: *@This()) ScrollerKnobStyle {
        return objc.msgSend(self, "scrollerKnobStyle", ScrollerKnobStyle, .{});
    }

    pub fn setScrollerKnobStyle(self: *@This(), scrollerKnobStyle: ScrollerKnobStyle) void {
        return objc.msgSend(self, "setScrollerKnobStyle:", void, .{scrollerKnobStyle});
    }

    pub fn horizontalScrollElasticity(self: *@This()) ScrollElasticity {
        return objc.msgSend(self, "horizontalScrollElasticity", ScrollElasticity, .{});
    }

    pub fn setHorizontalScrollElasticity(self: *@This(), horizontalScrollElasticity: ScrollElasticity) void {
        return objc.msgSend(self, "setHorizontalScrollElasticity:", void, .{horizontalScrollElasticity});
    }

    pub fn verticalScrollElasticity(self: *@This()) ScrollElasticity {
        return objc.msgSend(self, "verticalScrollElasticity", ScrollElasticity, .{});
    }

    pub fn setVerticalScrollElasticity(self: *@This(), verticalScrollElasticity: ScrollElasticity) void {
        return objc.msgSend(self, "setVerticalScrollElasticity:", void, .{verticalScrollElasticity});
    }

    pub fn usesPredominantAxisScrolling(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "usesPredominantAxisScrolling", objc.BOOL, .{});
    }

    pub fn setUsesPredominantAxisScrolling(self: *@This(), usesPredominantAxisScrolling: objc.BOOL) void {
        return objc.msgSend(self, "setUsesPredominantAxisScrolling:", void, .{usesPredominantAxisScrolling});
    }

    pub fn allowsMagnification(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "allowsMagnification", objc.BOOL, .{});
    }

    pub fn setAllowsMagnification(self: *@This(), allowsMagnification: objc.BOOL) void {
        return objc.msgSend(self, "setAllowsMagnification:", void, .{allowsMagnification});
    }

    pub fn magnification(self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(self, "magnification", core_foundation.CGFloat, .{});
    }

    pub fn setMagnification(self: *@This(), magnification: core_foundation.CGFloat) void {
        return objc.msgSend(self, "setMagnification:", void, .{magnification});
    }

    pub fn maxMagnification(self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(self, "maxMagnification", core_foundation.CGFloat, .{});
    }

    pub fn setMaxMagnification(self: *@This(), maxMagnification: core_foundation.CGFloat) void {
        return objc.msgSend(self, "setMaxMagnification:", void, .{maxMagnification});
    }

    pub fn minMagnification(self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(self, "minMagnification", core_foundation.CGFloat, .{});
    }

    pub fn setMinMagnification(self: *@This(), minMagnification: core_foundation.CGFloat) void {
        return objc.msgSend(self, "setMinMagnification:", void, .{minMagnification});
    }

    pub fn automaticallyAdjustsContentInsets(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "automaticallyAdjustsContentInsets", objc.BOOL, .{});
    }

    pub fn setAutomaticallyAdjustsContentInsets(self: *@This(), automaticallyAdjustsContentInsets: objc.BOOL) void {
        return objc.msgSend(self, "setAutomaticallyAdjustsContentInsets:", void, .{automaticallyAdjustsContentInsets});
    }

    pub fn contentInsets(self: *@This()) foundation.EdgeInsets {
        return objc.msgSend(self, "contentInsets", foundation.EdgeInsets, .{});
    }

    pub fn setContentInsets(self: *@This(), contentInsets: foundation.EdgeInsets) void {
        return objc.msgSend(self, "setContentInsets:", void, .{contentInsets});
    }

    pub fn scrollerInsets(self: *@This()) foundation.EdgeInsets {
        return objc.msgSend(self, "scrollerInsets", foundation.EdgeInsets, .{});
    }

    pub fn setScrollerInsets(self: *@This(), scrollerInsets: foundation.EdgeInsets) void {
        return objc.msgSend(self, "setScrollerInsets:", void, .{scrollerInsets});
    }

};

pub const ScrollViewFindBarPosition = enum(objc.NSInteger) {
    AboveHorizontalRuler = 0,
    AboveContent = 1,
    BelowContent = 2,
};

pub const SegmentSwitchTracking = enum(objc.NSUInteger) {
    SelectOne = 0,
    SelectAny = 1,
    Momentary = 2,
    MomentaryAccelerator = 3,
};

pub const SegmentStyle = enum(objc.NSInteger) {
    Automatic = 0,
    Rounded = 1,
    RoundRect = 3,
    TexturedSquare = 4,
    SmallSquare = 6,
    Separated = 8,
    TexturedRounded = 2,
    Capsule = 5,
};

pub const SegmentDistribution = enum(objc.NSInteger) {
    Fit = 0,
    Fill = 1,
    FillEqually = 2,
    FillProportionally = 3,
};

/// https://developer.apple.com/documentation/AppKit/NSSegmentedControl?language=objc
pub const SegmentedControl = opaque {
    pub const InternalInfo = objc.ExternalClass("NSSegmentedControl", @This(), Control, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn selectSegmentWithTag(self: *@This(), tag: objc.NSInteger) objc.BOOL {
        return objc.msgSend(self, "selectSegmentWithTag:", objc.BOOL, .{tag});
    }

    pub fn setWidthForSegment(self: *@This(), width: core_foundation.CGFloat, segment: objc.NSInteger) void {
        return objc.msgSend(self, "setWidth:forSegment:", void, .{width, segment});
    }

    pub fn widthForSegment(self: *@This(), segment: objc.NSInteger) core_foundation.CGFloat {
        return objc.msgSend(self, "widthForSegment:", core_foundation.CGFloat, .{segment});
    }

    pub fn setImageForSegment(self: *@This(), image: ?*Image, segment: objc.NSInteger) void {
        return objc.msgSend(self, "setImage:forSegment:", void, .{image, segment});
    }

    pub fn imageForSegment(self: *@This(), segment: objc.NSInteger) ?*Image {
        return objc.msgSend(self, "imageForSegment:", ?*Image, .{segment});
    }

    pub fn setImageScalingForSegment(self: *@This(), scaling: ImageScaling, segment: objc.NSInteger) void {
        return objc.msgSend(self, "setImageScaling:forSegment:", void, .{scaling, segment});
    }

    pub fn imageScalingForSegment(self: *@This(), segment: objc.NSInteger) ImageScaling {
        return objc.msgSend(self, "imageScalingForSegment:", ImageScaling, .{segment});
    }

    pub fn setLabelForSegment(self: *@This(), label: ?*String, segment: objc.NSInteger) void {
        return objc.msgSend(self, "setLabel:forSegment:", void, .{label, segment});
    }

    pub fn labelForSegment(self: *@This(), segment: objc.NSInteger) ?*String {
        return objc.msgSend(self, "labelForSegment:", ?*String, .{segment});
    }

    pub fn setMenuForSegment(self: *@This(), menu: ?*Menu, segment: objc.NSInteger) void {
        return objc.msgSend(self, "setMenu:forSegment:", void, .{menu, segment});
    }

    pub fn menuForSegment(self: *@This(), segment: objc.NSInteger) ?*Menu {
        return objc.msgSend(self, "menuForSegment:", ?*Menu, .{segment});
    }

    pub fn setSelectedForSegment(self: *@This(), selected: objc.BOOL, segment: objc.NSInteger) void {
        return objc.msgSend(self, "setSelected:forSegment:", void, .{selected, segment});
    }

    pub fn isSelectedForSegment(self: *@This(), segment: objc.NSInteger) objc.BOOL {
        return objc.msgSend(self, "isSelectedForSegment:", objc.BOOL, .{segment});
    }

    pub fn setEnabledForSegment(self: *@This(), enabled: objc.BOOL, segment: objc.NSInteger) void {
        return objc.msgSend(self, "setEnabled:forSegment:", void, .{enabled, segment});
    }

    pub fn isEnabledForSegment(self: *@This(), segment: objc.NSInteger) objc.BOOL {
        return objc.msgSend(self, "isEnabledForSegment:", objc.BOOL, .{segment});
    }

    pub fn setToolTipForSegment(self: *@This(), toolTip: ?*String, segment: objc.NSInteger) void {
        return objc.msgSend(self, "setToolTip:forSegment:", void, .{toolTip, segment});
    }

    pub fn toolTipForSegment(self: *@This(), segment: objc.NSInteger) ?*String {
        return objc.msgSend(self, "toolTipForSegment:", ?*String, .{segment});
    }

    pub fn setTagForSegment(self: *@This(), tag: objc.NSInteger, segment: objc.NSInteger) void {
        return objc.msgSend(self, "setTag:forSegment:", void, .{tag, segment});
    }

    pub fn tagForSegment(self: *@This(), segment: objc.NSInteger) objc.NSInteger {
        return objc.msgSend(self, "tagForSegment:", objc.NSInteger, .{segment});
    }

    pub fn setShowsMenuIndicatorForSegment(self: *@This(), showsMenuIndicator: objc.BOOL, segment: objc.NSInteger) void {
        return objc.msgSend(self, "setShowsMenuIndicator:forSegment:", void, .{showsMenuIndicator, segment});
    }

    pub fn showsMenuIndicatorForSegment(self: *@This(), segment: objc.NSInteger) objc.BOOL {
        return objc.msgSend(self, "showsMenuIndicatorForSegment:", objc.BOOL, .{segment});
    }

    pub fn setAlignmentForSegment(self: *@This(), alignment: TextAlignment, segment: objc.NSInteger) void {
        return objc.msgSend(self, "setAlignment:forSegment:", void, .{alignment, segment});
    }

    pub fn alignmentForSegment(self: *@This(), segment: objc.NSInteger) TextAlignment {
        return objc.msgSend(self, "alignmentForSegment:", TextAlignment, .{segment});
    }

    pub fn compressWithPrioritizedCompressionOptions(self: *@This(), prioritizedOptions: ?*anyopaque) void {
        return objc.msgSend(self, "compressWithPrioritizedCompressionOptions:", void, .{prioritizedOptions});
    }

    pub fn minimumSizeWithPrioritizedCompressionOptions(self: *@This(), prioritizedOptions: ?*anyopaque) foundation.Size {
        return objc.msgSend(self, "minimumSizeWithPrioritizedCompressionOptions:", foundation.Size, .{prioritizedOptions});
    }

    pub fn segmentCount(self: *@This()) objc.NSInteger {
        return objc.msgSend(self, "segmentCount", objc.NSInteger, .{});
    }

    pub fn setSegmentCount(self: *@This(), segmentCount: objc.NSInteger) void {
        return objc.msgSend(self, "setSegmentCount:", void, .{segmentCount});
    }

    pub fn selectedSegment(self: *@This()) objc.NSInteger {
        return objc.msgSend(self, "selectedSegment", objc.NSInteger, .{});
    }

    pub fn setSelectedSegment(self: *@This(), selectedSegment: objc.NSInteger) void {
        return objc.msgSend(self, "setSelectedSegment:", void, .{selectedSegment});
    }

    pub fn segmentStyle(self: *@This()) SegmentStyle {
        return objc.msgSend(self, "segmentStyle", SegmentStyle, .{});
    }

    pub fn setSegmentStyle(self: *@This(), segmentStyle: SegmentStyle) void {
        return objc.msgSend(self, "setSegmentStyle:", void, .{segmentStyle});
    }

    pub fn isSpringLoaded(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isSpringLoaded", objc.BOOL, .{});
    }

    pub fn setSpringLoaded(self: *@This(), springLoaded: objc.BOOL) void {
        return objc.msgSend(self, "setSpringLoaded:", void, .{springLoaded});
    }

    pub fn trackingMode(self: *@This()) SegmentSwitchTracking {
        return objc.msgSend(self, "trackingMode", SegmentSwitchTracking, .{});
    }

    pub fn setTrackingMode(self: *@This(), trackingMode: SegmentSwitchTracking) void {
        return objc.msgSend(self, "setTrackingMode:", void, .{trackingMode});
    }

    pub fn doubleValueForSelectedSegment(self: *@This()) f64 {
        return objc.msgSend(self, "doubleValueForSelectedSegment", f64, .{});
    }

    pub fn selectedSegmentBezelColor(self: *@This()) ?*Color {
        return objc.msgSend(self, "selectedSegmentBezelColor", ?*Color, .{});
    }

    pub fn setSelectedSegmentBezelColor(self: *@This(), selectedSegmentBezelColor: ?*Color) void {
        return objc.msgSend(self, "setSelectedSegmentBezelColor:", void, .{selectedSegmentBezelColor});
    }

    pub fn indexOfSelectedItem(self: *@This()) objc.NSInteger {
        return objc.msgSend(self, "indexOfSelectedItem", objc.NSInteger, .{});
    }

    pub fn segmentDistribution(self: *@This()) SegmentDistribution {
        return objc.msgSend(self, "segmentDistribution", SegmentDistribution, .{});
    }

    pub fn setSegmentDistribution(self: *@This(), segmentDistribution: SegmentDistribution) void {
        return objc.msgSend(self, "setSegmentDistribution:", void, .{segmentDistribution});
    }

    pub fn activeCompressionOptions(self: *@This()) ?*UserInterfaceCompressionOptions {
        return objc.msgSend(self, "activeCompressionOptions", ?*UserInterfaceCompressionOptions, .{});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSSegmentedCell?language=objc
pub const SegmentedCell = opaque {
    pub const InternalInfo = objc.ExternalClass("NSSegmentedCell", @This(), ActionCell, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn selectSegmentWithTag(self: *@This(), tag: objc.NSInteger) objc.BOOL {
        return objc.msgSend(self, "selectSegmentWithTag:", objc.BOOL, .{tag});
    }

    pub fn makeNextSegmentKey(self: *@This()) void {
        return objc.msgSend(self, "makeNextSegmentKey", void, .{});
    }

    pub fn makePreviousSegmentKey(self: *@This()) void {
        return objc.msgSend(self, "makePreviousSegmentKey", void, .{});
    }

    pub fn setWidthForSegment(self: *@This(), width: core_foundation.CGFloat, segment: objc.NSInteger) void {
        return objc.msgSend(self, "setWidth:forSegment:", void, .{width, segment});
    }

    pub fn widthForSegment(self: *@This(), segment: objc.NSInteger) core_foundation.CGFloat {
        return objc.msgSend(self, "widthForSegment:", core_foundation.CGFloat, .{segment});
    }

    pub fn setImageForSegment(self: *@This(), image: ?*Image, segment: objc.NSInteger) void {
        return objc.msgSend(self, "setImage:forSegment:", void, .{image, segment});
    }

    pub fn imageForSegment(self: *@This(), segment: objc.NSInteger) ?*Image {
        return objc.msgSend(self, "imageForSegment:", ?*Image, .{segment});
    }

    pub fn setImageScalingForSegment(self: *@This(), scaling: ImageScaling, segment: objc.NSInteger) void {
        return objc.msgSend(self, "setImageScaling:forSegment:", void, .{scaling, segment});
    }

    pub fn imageScalingForSegment(self: *@This(), segment: objc.NSInteger) ImageScaling {
        return objc.msgSend(self, "imageScalingForSegment:", ImageScaling, .{segment});
    }

    pub fn setLabelForSegment(self: *@This(), label: ?*String, segment: objc.NSInteger) void {
        return objc.msgSend(self, "setLabel:forSegment:", void, .{label, segment});
    }

    pub fn labelForSegment(self: *@This(), segment: objc.NSInteger) ?*String {
        return objc.msgSend(self, "labelForSegment:", ?*String, .{segment});
    }

    pub fn setSelectedForSegment(self: *@This(), selected: objc.BOOL, segment: objc.NSInteger) void {
        return objc.msgSend(self, "setSelected:forSegment:", void, .{selected, segment});
    }

    pub fn isSelectedForSegment(self: *@This(), segment: objc.NSInteger) objc.BOOL {
        return objc.msgSend(self, "isSelectedForSegment:", objc.BOOL, .{segment});
    }

    pub fn setEnabledForSegment(self: *@This(), enabled: objc.BOOL, segment: objc.NSInteger) void {
        return objc.msgSend(self, "setEnabled:forSegment:", void, .{enabled, segment});
    }

    pub fn isEnabledForSegment(self: *@This(), segment: objc.NSInteger) objc.BOOL {
        return objc.msgSend(self, "isEnabledForSegment:", objc.BOOL, .{segment});
    }

    pub fn setMenuForSegment(self: *@This(), menu: ?*Menu, segment: objc.NSInteger) void {
        return objc.msgSend(self, "setMenu:forSegment:", void, .{menu, segment});
    }

    pub fn menuForSegment(self: *@This(), segment: objc.NSInteger) ?*Menu {
        return objc.msgSend(self, "menuForSegment:", ?*Menu, .{segment});
    }

    pub fn setToolTipForSegment(self: *@This(), toolTip: ?*String, segment: objc.NSInteger) void {
        return objc.msgSend(self, "setToolTip:forSegment:", void, .{toolTip, segment});
    }

    pub fn toolTipForSegment(self: *@This(), segment: objc.NSInteger) ?*String {
        return objc.msgSend(self, "toolTipForSegment:", ?*String, .{segment});
    }

    pub fn setTagForSegment(self: *@This(), tag: objc.NSInteger, segment: objc.NSInteger) void {
        return objc.msgSend(self, "setTag:forSegment:", void, .{tag, segment});
    }

    pub fn tagForSegment(self: *@This(), segment: objc.NSInteger) objc.NSInteger {
        return objc.msgSend(self, "tagForSegment:", objc.NSInteger, .{segment});
    }

    pub fn drawSegmentInFrameWithView(self: *@This(), segment: objc.NSInteger, frame: foundation.Rect, controlView: ?*View) void {
        return objc.msgSend(self, "drawSegment:inFrame:withView:", void, .{segment, frame, controlView});
    }

    pub fn segmentCount(self: *@This()) objc.NSInteger {
        return objc.msgSend(self, "segmentCount", objc.NSInteger, .{});
    }

    pub fn setSegmentCount(self: *@This(), segmentCount: objc.NSInteger) void {
        return objc.msgSend(self, "setSegmentCount:", void, .{segmentCount});
    }

    pub fn selectedSegment(self: *@This()) objc.NSInteger {
        return objc.msgSend(self, "selectedSegment", objc.NSInteger, .{});
    }

    pub fn setSelectedSegment(self: *@This(), selectedSegment: objc.NSInteger) void {
        return objc.msgSend(self, "setSelectedSegment:", void, .{selectedSegment});
    }

    pub fn trackingMode(self: *@This()) SegmentSwitchTracking {
        return objc.msgSend(self, "trackingMode", SegmentSwitchTracking, .{});
    }

    pub fn setTrackingMode(self: *@This(), trackingMode: SegmentSwitchTracking) void {
        return objc.msgSend(self, "setTrackingMode:", void, .{trackingMode});
    }

    pub fn segmentStyle(self: *@This()) SegmentStyle {
        return objc.msgSend(self, "segmentStyle", SegmentStyle, .{});
    }

    pub fn setSegmentStyle(self: *@This(), segmentStyle: SegmentStyle) void {
        return objc.msgSend(self, "setSegmentStyle:", void, .{segmentStyle});
    }

};

pub const SharingCollaborationMode = enum(objc.NSInteger) {
    SendCopy = 0,
    Collaborate = 1,
};

/// https://developer.apple.com/documentation/AppKit/NSSharingCollaborationModeRestriction?language=objc
pub const SharingCollaborationModeRestriction = opaque {
    pub const InternalInfo = objc.ExternalClass("NSSharingCollaborationModeRestriction", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn initWithDisabledMode(self: *@This(), disabledMode: SharingCollaborationMode) *@This() {
        return objc.msgSend(self, "initWithDisabledMode:", *@This(), .{disabledMode});
    }

    pub fn initWithDisabledModeAlertTitleAlertMessage(self: *@This(), disabledMode: SharingCollaborationMode, alertTitle: ?*String, alertMessage: ?*String) *@This() {
        return objc.msgSend(self, "initWithDisabledMode:alertTitle:alertMessage:", *@This(), .{disabledMode, alertTitle, alertMessage});
    }

    pub fn initWithDisabledModeAlertTitleAlertMessageAlertDismissButtonTitle(self: *@This(), disabledMode: SharingCollaborationMode, alertTitle: ?*String, alertMessage: ?*String, alertDismissButtonTitle: ?*String, ) *@This() {
        return objc.msgSend(self, "initWithDisabledMode:alertTitle:alertMessage:alertDismissButtonTitle:", *@This(), .{disabledMode, alertTitle, alertMessage, alertDismissButtonTitle, });
    }

    pub fn initWithDisabledModeAlertTitleAlertMessageAlertDismissButtonTitleAlertRecoverySuggestionButtonTitleAlertRecoverySuggestionButtonLaunchURL(self: *@This(), disabledMode: SharingCollaborationMode, alertTitle: ?*String, alertMessage: ?*String, alertDismissButtonTitle: ?*String, alertRecoverySuggestionButtonTitle: ?*String, alertRecoverySuggestionButtonLaunchURL: ?*URL, ) *@This() {
        return objc.msgSend(self, "initWithDisabledMode:alertTitle:alertMessage:alertDismissButtonTitle:alertRecoverySuggestionButtonTitle:alertRecoverySuggestionButtonLaunchURL:", *@This(), .{disabledMode, alertTitle, alertMessage, alertDismissButtonTitle, alertRecoverySuggestionButtonTitle, alertRecoverySuggestionButtonLaunchURL, });
    }

    pub fn init(self: *@This()) *@This() {
        return objc.msgSend(self, "init", *@This(), .{});
    }

    pub fn new(self: *@This()) *@This() {
        return objc.msgSend(self, "new", *@This(), .{});
    }

    pub fn disabledMode(self: *@This()) SharingCollaborationMode {
        return objc.msgSend(self, "disabledMode", SharingCollaborationMode, .{});
    }

    pub fn alertTitle(self: *@This()) ?*String {
        return objc.msgSend(self, "alertTitle", ?*String, .{});
    }

    pub fn alertMessage(self: *@This()) ?*String {
        return objc.msgSend(self, "alertMessage", ?*String, .{});
    }

    pub fn alertDismissButtonTitle(self: *@This()) ?*String {
        return objc.msgSend(self, "alertDismissButtonTitle", ?*String, .{});
    }

    pub fn alertRecoverySuggestionButtonTitle(self: *@This()) ?*String {
        return objc.msgSend(self, "alertRecoverySuggestionButtonTitle", ?*String, .{});
    }

    pub fn alertRecoverySuggestionButtonLaunchURL(self: *@This()) ?*URL {
        return objc.msgSend(self, "alertRecoverySuggestionButtonLaunchURL", ?*URL, .{});
    }

};

pub const TickMarkPosition = enum(objc.NSUInteger) {
    Below = 0,
    Above = 1,
    Leading = 1,
    Trailing = 0,
};

pub const SliderType = enum(objc.NSUInteger) {
    Linear = 0,
    Circular = 1,
};

/// https://developer.apple.com/documentation/AppKit/NSSliderCell?language=objc
pub const SliderCell = opaque {
    pub const InternalInfo = objc.ExternalClass("NSSliderCell", @This(), ActionCell, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn knobRectFlipped(self: *@This(), flipped: objc.BOOL) foundation.Rect {
        return objc.msgSend(self, "knobRectFlipped:", foundation.Rect, .{flipped});
    }

    pub fn barRectFlipped(self: *@This(), flipped: objc.BOOL) foundation.Rect {
        return objc.msgSend(self, "barRectFlipped:", foundation.Rect, .{flipped});
    }

    pub fn drawKnob(self: *@This(), knobRect: foundation.Rect) void {
        return objc.msgSend(self, "drawKnob:", void, .{knobRect});
    }

    pub fn drawKnob(self: *@This()) void {
        return objc.msgSend(self, "drawKnob", void, .{});
    }

    pub fn drawBarInsideFlipped(self: *@This(), rect: foundation.Rect, flipped: objc.BOOL) void {
        return objc.msgSend(self, "drawBarInside:flipped:", void, .{rect, flipped});
    }

    pub fn prefersTrackingUntilMouseUp(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "prefersTrackingUntilMouseUp", objc.BOOL, .{});
    }

    pub fn minValue(self: *@This()) f64 {
        return objc.msgSend(self, "minValue", f64, .{});
    }

    pub fn setMinValue(self: *@This(), minValue: f64) void {
        return objc.msgSend(self, "setMinValue:", void, .{minValue});
    }

    pub fn maxValue(self: *@This()) f64 {
        return objc.msgSend(self, "maxValue", f64, .{});
    }

    pub fn setMaxValue(self: *@This(), maxValue: f64) void {
        return objc.msgSend(self, "setMaxValue:", void, .{maxValue});
    }

    pub fn altIncrementValue(self: *@This()) f64 {
        return objc.msgSend(self, "altIncrementValue", f64, .{});
    }

    pub fn setAltIncrementValue(self: *@This(), altIncrementValue: f64) void {
        return objc.msgSend(self, "setAltIncrementValue:", void, .{altIncrementValue});
    }

    pub fn sliderType(self: *@This()) SliderType {
        return objc.msgSend(self, "sliderType", SliderType, .{});
    }

    pub fn setSliderType(self: *@This(), sliderType: SliderType) void {
        return objc.msgSend(self, "setSliderType:", void, .{sliderType});
    }

    pub fn isVertical(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isVertical", objc.BOOL, .{});
    }

    pub fn setVertical(self: *@This(), vertical: objc.BOOL) void {
        return objc.msgSend(self, "setVertical:", void, .{vertical});
    }

    pub fn trackRect(self: *@This()) foundation.Rect {
        return objc.msgSend(self, "trackRect", foundation.Rect, .{});
    }

    pub fn knobThickness(self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(self, "knobThickness", core_foundation.CGFloat, .{});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSSlider?language=objc
pub const Slider = opaque {
    pub const InternalInfo = objc.ExternalClass("NSSlider", @This(), Control, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn acceptsFirstMouse(self: *@This(), event: ?*Event) objc.BOOL {
        return objc.msgSend(self, "acceptsFirstMouse:", objc.BOOL, .{event});
    }

    pub fn sliderType(self: *@This()) SliderType {
        return objc.msgSend(self, "sliderType", SliderType, .{});
    }

    pub fn setSliderType(self: *@This(), sliderType: SliderType) void {
        return objc.msgSend(self, "setSliderType:", void, .{sliderType});
    }

    pub fn minValue(self: *@This()) f64 {
        return objc.msgSend(self, "minValue", f64, .{});
    }

    pub fn setMinValue(self: *@This(), minValue: f64) void {
        return objc.msgSend(self, "setMinValue:", void, .{minValue});
    }

    pub fn maxValue(self: *@This()) f64 {
        return objc.msgSend(self, "maxValue", f64, .{});
    }

    pub fn setMaxValue(self: *@This(), maxValue: f64) void {
        return objc.msgSend(self, "setMaxValue:", void, .{maxValue});
    }

    pub fn altIncrementValue(self: *@This()) f64 {
        return objc.msgSend(self, "altIncrementValue", f64, .{});
    }

    pub fn setAltIncrementValue(self: *@This(), altIncrementValue: f64) void {
        return objc.msgSend(self, "setAltIncrementValue:", void, .{altIncrementValue});
    }

    pub fn knobThickness(self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(self, "knobThickness", core_foundation.CGFloat, .{});
    }

    pub fn isVertical(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isVertical", objc.BOOL, .{});
    }

    pub fn setVertical(self: *@This(), vertical: objc.BOOL) void {
        return objc.msgSend(self, "setVertical:", void, .{vertical});
    }

    pub fn trackFillColor(self: *@This()) ?*Color {
        return objc.msgSend(self, "trackFillColor", ?*Color, .{});
    }

    pub fn setTrackFillColor(self: *@This(), trackFillColor: ?*Color) void {
        return objc.msgSend(self, "setTrackFillColor:", void, .{trackFillColor});
    }

};

pub const StackViewGravity = enum(objc.NSInteger) {
    Top = 1,
    Leading = 1,
    Center = 2,
    Bottom = 3,
    Trailing = 3,
};

pub const StackViewDistribution = enum(objc.NSInteger) {
    GravityAreas = -1,
    Fill = 0,
    FillEqually = 1,
    FillProportionally = 2,
    EqualSpacing = 3,
    EqualCentering = 4,
};

pub const StackViewVisibilityPriority = f32;

/// https://developer.apple.com/documentation/AppKit/NSStackView?language=objc
pub const StackView = opaque {
    pub const InternalInfo = objc.ExternalClass("NSStackView", @This(), View, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn stackViewWithViews(self: *@This(), views: ?*anyopaque) *@This() {
        return objc.msgSend(self, "stackViewWithViews:", *@This(), .{views});
    }

    pub fn setCustomSpacingAfterView(self: *@This(), spacing: core_foundation.CGFloat, view: ?*View) void {
        return objc.msgSend(self, "setCustomSpacing:afterView:", void, .{spacing, view});
    }

    pub fn customSpacingAfterView(self: *@This(), view: ?*View) core_foundation.CGFloat {
        return objc.msgSend(self, "customSpacingAfterView:", core_foundation.CGFloat, .{view});
    }

    pub fn addArrangedSubview(self: *@This(), view: ?*View) void {
        return objc.msgSend(self, "addArrangedSubview:", void, .{view});
    }

    pub fn insertArrangedSubviewAtIndex(self: *@This(), view: ?*View, index: objc.NSInteger) void {
        return objc.msgSend(self, "insertArrangedSubview:atIndex:", void, .{view, index});
    }

    pub fn removeArrangedSubview(self: *@This(), view: ?*View) void {
        return objc.msgSend(self, "removeArrangedSubview:", void, .{view});
    }

    pub fn setVisibilityPriorityForView(self: *@This(), priority: StackViewVisibilityPriority, view: ?*View) void {
        return objc.msgSend(self, "setVisibilityPriority:forView:", void, .{priority, view});
    }

    pub fn visibilityPriorityForView(self: *@This(), view: ?*View) StackViewVisibilityPriority {
        return objc.msgSend(self, "visibilityPriorityForView:", StackViewVisibilityPriority, .{view});
    }

    pub fn clippingResistancePriorityForOrientation(self: *@This(), orientation: LayoutConstraintOrientation) LayoutPriority {
        return objc.msgSend(self, "clippingResistancePriorityForOrientation:", LayoutPriority, .{orientation});
    }

    pub fn setClippingResistancePriorityForOrientation(self: *@This(), clippingResistancePriority: LayoutPriority, orientation: LayoutConstraintOrientation) void {
        return objc.msgSend(self, "setClippingResistancePriority:forOrientation:", void, .{clippingResistancePriority, orientation});
    }

    pub fn huggingPriorityForOrientation(self: *@This(), orientation: LayoutConstraintOrientation) LayoutPriority {
        return objc.msgSend(self, "huggingPriorityForOrientation:", LayoutPriority, .{orientation});
    }

    pub fn setHuggingPriorityForOrientation(self: *@This(), huggingPriority: LayoutPriority, orientation: LayoutConstraintOrientation) void {
        return objc.msgSend(self, "setHuggingPriority:forOrientation:", void, .{huggingPriority, orientation});
    }

    pub fn delegate(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "delegate", ?*anyopaque, .{});
    }

    pub fn setDelegate(self: *@This(), delegate: ?*anyopaque) void {
        return objc.msgSend(self, "setDelegate:", void, .{delegate});
    }

    pub fn orientation(self: *@This()) UserInterfaceLayoutOrientation {
        return objc.msgSend(self, "orientation", UserInterfaceLayoutOrientation, .{});
    }

    pub fn setOrientation(self: *@This(), orientation: UserInterfaceLayoutOrientation) void {
        return objc.msgSend(self, "setOrientation:", void, .{orientation});
    }

    pub fn alignment(self: *@This()) LayoutAttribute {
        return objc.msgSend(self, "alignment", LayoutAttribute, .{});
    }

    pub fn setAlignment(self: *@This(), alignment: LayoutAttribute) void {
        return objc.msgSend(self, "setAlignment:", void, .{alignment});
    }

    pub fn edgeInsets(self: *@This()) foundation.EdgeInsets {
        return objc.msgSend(self, "edgeInsets", foundation.EdgeInsets, .{});
    }

    pub fn setEdgeInsets(self: *@This(), edgeInsets: foundation.EdgeInsets) void {
        return objc.msgSend(self, "setEdgeInsets:", void, .{edgeInsets});
    }

    pub fn distribution(self: *@This()) StackViewDistribution {
        return objc.msgSend(self, "distribution", StackViewDistribution, .{});
    }

    pub fn setDistribution(self: *@This(), distribution: StackViewDistribution) void {
        return objc.msgSend(self, "setDistribution:", void, .{distribution});
    }

    pub fn spacing(self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(self, "spacing", core_foundation.CGFloat, .{});
    }

    pub fn setSpacing(self: *@This(), spacing: core_foundation.CGFloat) void {
        return objc.msgSend(self, "setSpacing:", void, .{spacing});
    }

    pub fn detachesHiddenViews(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "detachesHiddenViews", objc.BOOL, .{});
    }

    pub fn setDetachesHiddenViews(self: *@This(), detachesHiddenViews: objc.BOOL) void {
        return objc.msgSend(self, "setDetachesHiddenViews:", void, .{detachesHiddenViews});
    }

    pub fn arrangedSubviews(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "arrangedSubviews", ?*anyopaque, .{});
    }

    pub fn detachedViews(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "detachedViews", ?*anyopaque, .{});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSStackViewDelegate?language=objc
pub const StackViewDelegate = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{objc.NSObject, });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn stackViewWillDetachViews(self: *@This(), stackView: ?*StackView, views: ?*anyopaque) void {
        return objc.msgSend(self, "stackView:willDetachViews:", void, .{stackView, views});
    }

    pub fn stackViewDidReattachViews(self: *@This(), stackView: ?*StackView, views: ?*anyopaque) void {
        return objc.msgSend(self, "stackView:didReattachViews:", void, .{stackView, views});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSSwitch?language=objc
pub const Switch = opaque {
    pub const InternalInfo = objc.ExternalClass("NSSwitch", @This(), Control, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn state(self: *@This()) ControlStateValue {
        return objc.msgSend(self, "state", ControlStateValue, .{});
    }

    pub fn setState(self: *@This(), state: ControlStateValue) void {
        return objc.msgSend(self, "setState:", void, .{state});
    }

};

pub const GridCellPlacement = enum(objc.NSInteger) {
    Inherited = 0,
    None = 1,
    Leading = 2,
    Top = 2,
    Trailing = 3,
    Bottom = 3,
    Center = 4,
    Fill = 5,
};

pub const GridRowAlignment = enum(objc.NSInteger) {
    Inherited = 0,
    None = 1,
    FirstBaseline = 2,
    LastBaseline = 3,
};

/// https://developer.apple.com/documentation/AppKit/NSGridView?language=objc
pub const GridView = opaque {
    pub const InternalInfo = objc.ExternalClass("NSGridView", @This(), View, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn initWithFrame(self: *@This(), frameRect: foundation.Rect) *@This() {
        return objc.msgSend(self, "initWithFrame:", *@This(), .{frameRect});
    }

    pub fn initWithCoder(self: *@This(), coder: ?*foundation.Coder) *@This() {
        return objc.msgSend(self, "initWithCoder:", *@This(), .{coder});
    }

    pub fn gridViewWithNumberOfColumnsRows(self: *@This(), columnCount: objc.NSInteger, rowCount: objc.NSInteger) *@This() {
        return objc.msgSend(self, "gridViewWithNumberOfColumns:rows:", *@This(), .{columnCount, rowCount});
    }

    pub fn gridViewWithViews(self: *@This(), rows: ?*anyopaque) *@This() {
        return objc.msgSend(self, "gridViewWithViews:", *@This(), .{rows});
    }

    pub fn rowAtIndex(self: *@This(), index: objc.NSInteger) ?*GridRow {
        return objc.msgSend(self, "rowAtIndex:", ?*GridRow, .{index});
    }

    pub fn indexOfRow(self: *@This(), row: ?*GridRow) objc.NSInteger {
        return objc.msgSend(self, "indexOfRow:", objc.NSInteger, .{row});
    }

    pub fn columnAtIndex(self: *@This(), index: objc.NSInteger) ?*GridColumn {
        return objc.msgSend(self, "columnAtIndex:", ?*GridColumn, .{index});
    }

    pub fn indexOfColumn(self: *@This(), column: ?*GridColumn) objc.NSInteger {
        return objc.msgSend(self, "indexOfColumn:", objc.NSInteger, .{column});
    }

    pub fn cellAtColumnIndexRowIndex(self: *@This(), columnIndex: objc.NSInteger, rowIndex: objc.NSInteger) ?*GridCell {
        return objc.msgSend(self, "cellAtColumnIndex:rowIndex:", ?*GridCell, .{columnIndex, rowIndex});
    }

    pub fn cellForView(self: *@This(), view: ?*View) ?*GridCell {
        return objc.msgSend(self, "cellForView:", ?*GridCell, .{view});
    }

    pub fn addRowWithViews(self: *@This(), views: ?*anyopaque) ?*GridRow {
        return objc.msgSend(self, "addRowWithViews:", ?*GridRow, .{views});
    }

    pub fn insertRowAtIndexWithViews(self: *@This(), index: objc.NSInteger, views: ?*anyopaque) ?*GridRow {
        return objc.msgSend(self, "insertRowAtIndex:withViews:", ?*GridRow, .{index, views});
    }

    pub fn moveRowAtIndexToIndex(self: *@This(), fromIndex: objc.NSInteger, toIndex: objc.NSInteger) void {
        return objc.msgSend(self, "moveRowAtIndex:toIndex:", void, .{fromIndex, toIndex});
    }

    pub fn removeRowAtIndex(self: *@This(), index: objc.NSInteger) void {
        return objc.msgSend(self, "removeRowAtIndex:", void, .{index});
    }

    pub fn addColumnWithViews(self: *@This(), views: ?*anyopaque) ?*GridColumn {
        return objc.msgSend(self, "addColumnWithViews:", ?*GridColumn, .{views});
    }

    pub fn insertColumnAtIndexWithViews(self: *@This(), index: objc.NSInteger, views: ?*anyopaque) ?*GridColumn {
        return objc.msgSend(self, "insertColumnAtIndex:withViews:", ?*GridColumn, .{index, views});
    }

    pub fn moveColumnAtIndexToIndex(self: *@This(), fromIndex: objc.NSInteger, toIndex: objc.NSInteger) void {
        return objc.msgSend(self, "moveColumnAtIndex:toIndex:", void, .{fromIndex, toIndex});
    }

    pub fn removeColumnAtIndex(self: *@This(), index: objc.NSInteger) void {
        return objc.msgSend(self, "removeColumnAtIndex:", void, .{index});
    }

    pub fn mergeCellsInHorizontalRangeVerticalRange(self: *@This(), hRange: foundation.Range, vRange: foundation.Range) void {
        return objc.msgSend(self, "mergeCellsInHorizontalRange:verticalRange:", void, .{hRange, vRange});
    }

    pub fn numberOfRows(self: *@This()) objc.NSInteger {
        return objc.msgSend(self, "numberOfRows", objc.NSInteger, .{});
    }

    pub fn numberOfColumns(self: *@This()) objc.NSInteger {
        return objc.msgSend(self, "numberOfColumns", objc.NSInteger, .{});
    }

    pub fn xPlacement(self: *@This()) GridCellPlacement {
        return objc.msgSend(self, "xPlacement", GridCellPlacement, .{});
    }

    pub fn setXPlacement(self: *@This(), xPlacement: GridCellPlacement) void {
        return objc.msgSend(self, "setXPlacement:", void, .{xPlacement});
    }

    pub fn yPlacement(self: *@This()) GridCellPlacement {
        return objc.msgSend(self, "yPlacement", GridCellPlacement, .{});
    }

    pub fn setYPlacement(self: *@This(), yPlacement: GridCellPlacement) void {
        return objc.msgSend(self, "setYPlacement:", void, .{yPlacement});
    }

    pub fn rowAlignment(self: *@This()) GridRowAlignment {
        return objc.msgSend(self, "rowAlignment", GridRowAlignment, .{});
    }

    pub fn setRowAlignment(self: *@This(), rowAlignment: GridRowAlignment) void {
        return objc.msgSend(self, "setRowAlignment:", void, .{rowAlignment});
    }

    pub fn rowSpacing(self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(self, "rowSpacing", core_foundation.CGFloat, .{});
    }

    pub fn setRowSpacing(self: *@This(), rowSpacing: core_foundation.CGFloat) void {
        return objc.msgSend(self, "setRowSpacing:", void, .{rowSpacing});
    }

    pub fn columnSpacing(self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(self, "columnSpacing", core_foundation.CGFloat, .{});
    }

    pub fn setColumnSpacing(self: *@This(), columnSpacing: core_foundation.CGFloat) void {
        return objc.msgSend(self, "setColumnSpacing:", void, .{columnSpacing});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSGridRow?language=objc
pub const GridRow = opaque {
    pub const InternalInfo = objc.ExternalClass("NSGridRow", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn cellAtIndex(self: *@This(), index: objc.NSInteger) ?*GridCell {
        return objc.msgSend(self, "cellAtIndex:", ?*GridCell, .{index});
    }

    pub fn mergeCellsInRange(self: *@This(), range: foundation.Range) void {
        return objc.msgSend(self, "mergeCellsInRange:", void, .{range});
    }

    pub fn gridView(self: *@This()) ?*GridView {
        return objc.msgSend(self, "gridView", ?*GridView, .{});
    }

    pub fn numberOfCells(self: *@This()) objc.NSInteger {
        return objc.msgSend(self, "numberOfCells", objc.NSInteger, .{});
    }

    pub fn yPlacement(self: *@This()) GridCellPlacement {
        return objc.msgSend(self, "yPlacement", GridCellPlacement, .{});
    }

    pub fn setYPlacement(self: *@This(), yPlacement: GridCellPlacement) void {
        return objc.msgSend(self, "setYPlacement:", void, .{yPlacement});
    }

    pub fn rowAlignment(self: *@This()) GridRowAlignment {
        return objc.msgSend(self, "rowAlignment", GridRowAlignment, .{});
    }

    pub fn setRowAlignment(self: *@This(), rowAlignment: GridRowAlignment) void {
        return objc.msgSend(self, "setRowAlignment:", void, .{rowAlignment});
    }

    pub fn height(self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(self, "height", core_foundation.CGFloat, .{});
    }

    pub fn setHeight(self: *@This(), height: core_foundation.CGFloat) void {
        return objc.msgSend(self, "setHeight:", void, .{height});
    }

    pub fn topPadding(self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(self, "topPadding", core_foundation.CGFloat, .{});
    }

    pub fn setTopPadding(self: *@This(), topPadding: core_foundation.CGFloat) void {
        return objc.msgSend(self, "setTopPadding:", void, .{topPadding});
    }

    pub fn bottomPadding(self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(self, "bottomPadding", core_foundation.CGFloat, .{});
    }

    pub fn setBottomPadding(self: *@This(), bottomPadding: core_foundation.CGFloat) void {
        return objc.msgSend(self, "setBottomPadding:", void, .{bottomPadding});
    }

    pub fn isHidden(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isHidden", objc.BOOL, .{});
    }

    pub fn setHidden(self: *@This(), hidden: objc.BOOL) void {
        return objc.msgSend(self, "setHidden:", void, .{hidden});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSGridColumn?language=objc
pub const GridColumn = opaque {
    pub const InternalInfo = objc.ExternalClass("NSGridColumn", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn cellAtIndex(self: *@This(), index: objc.NSInteger) ?*GridCell {
        return objc.msgSend(self, "cellAtIndex:", ?*GridCell, .{index});
    }

    pub fn mergeCellsInRange(self: *@This(), range: foundation.Range) void {
        return objc.msgSend(self, "mergeCellsInRange:", void, .{range});
    }

    pub fn gridView(self: *@This()) ?*GridView {
        return objc.msgSend(self, "gridView", ?*GridView, .{});
    }

    pub fn numberOfCells(self: *@This()) objc.NSInteger {
        return objc.msgSend(self, "numberOfCells", objc.NSInteger, .{});
    }

    pub fn xPlacement(self: *@This()) GridCellPlacement {
        return objc.msgSend(self, "xPlacement", GridCellPlacement, .{});
    }

    pub fn setXPlacement(self: *@This(), xPlacement: GridCellPlacement) void {
        return objc.msgSend(self, "setXPlacement:", void, .{xPlacement});
    }

    pub fn width(self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(self, "width", core_foundation.CGFloat, .{});
    }

    pub fn setWidth(self: *@This(), width: core_foundation.CGFloat) void {
        return objc.msgSend(self, "setWidth:", void, .{width});
    }

    pub fn leadingPadding(self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(self, "leadingPadding", core_foundation.CGFloat, .{});
    }

    pub fn setLeadingPadding(self: *@This(), leadingPadding: core_foundation.CGFloat) void {
        return objc.msgSend(self, "setLeadingPadding:", void, .{leadingPadding});
    }

    pub fn trailingPadding(self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(self, "trailingPadding", core_foundation.CGFloat, .{});
    }

    pub fn setTrailingPadding(self: *@This(), trailingPadding: core_foundation.CGFloat) void {
        return objc.msgSend(self, "setTrailingPadding:", void, .{trailingPadding});
    }

    pub fn isHidden(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isHidden", objc.BOOL, .{});
    }

    pub fn setHidden(self: *@This(), hidden: objc.BOOL) void {
        return objc.msgSend(self, "setHidden:", void, .{hidden});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSGridCell?language=objc
pub const GridCell = opaque {
    pub const InternalInfo = objc.ExternalClass("NSGridCell", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn contentView(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "contentView", ?*anyopaque, .{});
    }

    pub fn setContentView(self: *@This(), contentView: ?*anyopaque) void {
        return objc.msgSend(self, "setContentView:", void, .{contentView});
    }

    pub fn emptyContentView(self: *@This()) ?*View {
        return objc.msgSend(self, "emptyContentView", ?*View, .{});
    }

    pub fn row(self: *@This()) ?*GridRow {
        return objc.msgSend(self, "row", ?*GridRow, .{});
    }

    pub fn column(self: *@This()) ?*GridColumn {
        return objc.msgSend(self, "column", ?*GridColumn, .{});
    }

    pub fn xPlacement(self: *@This()) GridCellPlacement {
        return objc.msgSend(self, "xPlacement", GridCellPlacement, .{});
    }

    pub fn setXPlacement(self: *@This(), xPlacement: GridCellPlacement) void {
        return objc.msgSend(self, "setXPlacement:", void, .{xPlacement});
    }

    pub fn yPlacement(self: *@This()) GridCellPlacement {
        return objc.msgSend(self, "yPlacement", GridCellPlacement, .{});
    }

    pub fn setYPlacement(self: *@This(), yPlacement: GridCellPlacement) void {
        return objc.msgSend(self, "setYPlacement:", void, .{yPlacement});
    }

    pub fn rowAlignment(self: *@This()) GridRowAlignment {
        return objc.msgSend(self, "rowAlignment", GridRowAlignment, .{});
    }

    pub fn setRowAlignment(self: *@This(), rowAlignment: GridRowAlignment) void {
        return objc.msgSend(self, "setRowAlignment:", void, .{rowAlignment});
    }

    pub fn customPlacementConstraints(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "customPlacementConstraints", ?*anyopaque, .{});
    }

    pub fn setCustomPlacementConstraints(self: *@This(), customPlacementConstraints: ?*anyopaque) void {
        return objc.msgSend(self, "setCustomPlacementConstraints:", void, .{customPlacementConstraints});
    }

};

pub const TextCursorAccessoryPlacement = enum(objc.NSInteger) {
    Unspecified = 0,
    Backward = 1,
    Forward = 2,
    Invisible = 3,
    Center = 4,
    OffscreenLeft = 5,
    OffscreenTop = 6,
    OffscreenRight = 7,
    OffscreenBottom = 8,
};

/// https://developer.apple.com/documentation/AppKit/NSTextInputClient?language=objc
pub const TextInputClient = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn insertTextReplacementRange(self: *@This(), string: *objc.Id, replacementRange: foundation.Range) void {
        return objc.msgSend(self, "insertText:replacementRange:", void, .{string, replacementRange});
    }

    pub fn doCommandBySelector(self: *@This(), selector: *objc.SEL) void {
        return objc.msgSend(self, "doCommandBySelector:", void, .{selector});
    }

    pub fn setMarkedTextSelectedRangeReplacementRange(self: *@This(), string: *objc.Id, selectedRange: foundation.Range, replacementRange: foundation.Range) void {
        return objc.msgSend(self, "setMarkedText:selectedRange:replacementRange:", void, .{string, selectedRange, replacementRange});
    }

    pub fn unmarkText(self: *@This()) void {
        return objc.msgSend(self, "unmarkText", void, .{});
    }

    pub fn selectedRange(self: *@This()) foundation.Range {
        return objc.msgSend(self, "selectedRange", foundation.Range, .{});
    }

    pub fn markedRange(self: *@This()) foundation.Range {
        return objc.msgSend(self, "markedRange", foundation.Range, .{});
    }

    pub fn hasMarkedText(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "hasMarkedText", objc.BOOL, .{});
    }

    pub fn attributedSubstringForProposedRangeActualRange(self: *@This(), range: foundation.Range, actualRange: foundation.RangePointer) ?*AttributedString {
        return objc.msgSend(self, "attributedSubstringForProposedRange:actualRange:", ?*AttributedString, .{range, actualRange});
    }

    pub fn validAttributesForMarkedText(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "validAttributesForMarkedText", ?*anyopaque, .{});
    }

    pub fn firstRectForCharacterRangeActualRange(self: *@This(), range: foundation.Range, actualRange: foundation.RangePointer) foundation.Rect {
        return objc.msgSend(self, "firstRectForCharacterRange:actualRange:", foundation.Rect, .{range, actualRange});
    }

    pub fn characterIndexForPoint(self: *@This(), point: foundation.Point) objc.NSUInteger {
        return objc.msgSend(self, "characterIndexForPoint:", objc.NSUInteger, .{point});
    }

    pub fn attributedString(self: *@This()) ?*AttributedString {
        return objc.msgSend(self, "attributedString", ?*AttributedString, .{});
    }

    pub fn fractionOfDistanceThroughGlyphForPoint(self: *@This(), point: foundation.Point) core_foundation.CGFloat {
        return objc.msgSend(self, "fractionOfDistanceThroughGlyphForPoint:", core_foundation.CGFloat, .{point});
    }

    pub fn baselineDeltaForCharacterAtIndex(self: *@This(), anIndex: objc.NSUInteger) core_foundation.CGFloat {
        return objc.msgSend(self, "baselineDeltaForCharacterAtIndex:", core_foundation.CGFloat, .{anIndex});
    }

    pub fn windowLevel(self: *@This()) objc.NSInteger {
        return objc.msgSend(self, "windowLevel", objc.NSInteger, .{});
    }

    pub fn drawsVerticallyForCharacterAtIndex(self: *@This(), charIndex: objc.NSUInteger) objc.BOOL {
        return objc.msgSend(self, "drawsVerticallyForCharacterAtIndex:", objc.BOOL, .{charIndex});
    }

    pub fn preferredTextAccessoryPlacement(self: *@This()) TextCursorAccessoryPlacement {
        return objc.msgSend(self, "preferredTextAccessoryPlacement", TextCursorAccessoryPlacement, .{});
    }

    pub fn insertAdaptiveImageGlyphReplacementRange(self: *@This(), adaptiveImageGlyph: ?*AdaptiveImageGlyph, replacementRange: foundation.Range) void {
        return objc.msgSend(self, "insertAdaptiveImageGlyph:replacementRange:", void, .{adaptiveImageGlyph, replacementRange});
    }

    pub fn unionRectInVisibleSelectedRange(self: *@This()) foundation.Rect {
        return objc.msgSend(self, "unionRectInVisibleSelectedRange", foundation.Rect, .{});
    }

    pub fn documentVisibleRect(self: *@This()) foundation.Rect {
        return objc.msgSend(self, "documentVisibleRect", foundation.Rect, .{});
    }

    pub fn supportsAdaptiveImageGlyph(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "supportsAdaptiveImageGlyph", objc.BOOL, .{});
    }

};

pub const TextInputTraitType = enum(objc.NSInteger) {
    Default = 0,
    No = 1,
    Yes = 2,
};

pub const WritingToolsBehavior = enum(objc.NSInteger) {
    None = -1,
    Default = 0,
    Complete = 1,
    Limited = 2,
};

pub const WritingToolsResultOptions = enum(objc.NSUInteger) {
    Default = 0,
    PlainText = 1,
    RichText = 2,
    List = 4,
    Table = 8,
};

pub const WritingToolsAllowedInputOptions = enum(objc.NSUInteger) {
    Default = 0,
    PlainText = 1,
    RichText = 2,
    List = 4,
    Table = 8,
};

/// https://developer.apple.com/documentation/AppKit/NSTextInputTraits?language=objc
pub const TextInputTraits = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn autocorrectionType(self: *@This()) TextInputTraitType {
        return objc.msgSend(self, "autocorrectionType", TextInputTraitType, .{});
    }

    pub fn setAutocorrectionType(self: *@This(), autocorrectionType: TextInputTraitType) void {
        return objc.msgSend(self, "setAutocorrectionType:", void, .{autocorrectionType});
    }

    pub fn spellCheckingType(self: *@This()) TextInputTraitType {
        return objc.msgSend(self, "spellCheckingType", TextInputTraitType, .{});
    }

    pub fn setSpellCheckingType(self: *@This(), spellCheckingType: TextInputTraitType) void {
        return objc.msgSend(self, "setSpellCheckingType:", void, .{spellCheckingType});
    }

    pub fn grammarCheckingType(self: *@This()) TextInputTraitType {
        return objc.msgSend(self, "grammarCheckingType", TextInputTraitType, .{});
    }

    pub fn setGrammarCheckingType(self: *@This(), grammarCheckingType: TextInputTraitType) void {
        return objc.msgSend(self, "setGrammarCheckingType:", void, .{grammarCheckingType});
    }

    pub fn smartQuotesType(self: *@This()) TextInputTraitType {
        return objc.msgSend(self, "smartQuotesType", TextInputTraitType, .{});
    }

    pub fn setSmartQuotesType(self: *@This(), smartQuotesType: TextInputTraitType) void {
        return objc.msgSend(self, "setSmartQuotesType:", void, .{smartQuotesType});
    }

    pub fn smartDashesType(self: *@This()) TextInputTraitType {
        return objc.msgSend(self, "smartDashesType", TextInputTraitType, .{});
    }

    pub fn setSmartDashesType(self: *@This(), smartDashesType: TextInputTraitType) void {
        return objc.msgSend(self, "setSmartDashesType:", void, .{smartDashesType});
    }

    pub fn smartInsertDeleteType(self: *@This()) TextInputTraitType {
        return objc.msgSend(self, "smartInsertDeleteType", TextInputTraitType, .{});
    }

    pub fn setSmartInsertDeleteType(self: *@This(), smartInsertDeleteType: TextInputTraitType) void {
        return objc.msgSend(self, "setSmartInsertDeleteType:", void, .{smartInsertDeleteType});
    }

    pub fn textReplacementType(self: *@This()) TextInputTraitType {
        return objc.msgSend(self, "textReplacementType", TextInputTraitType, .{});
    }

    pub fn setTextReplacementType(self: *@This(), textReplacementType: TextInputTraitType) void {
        return objc.msgSend(self, "setTextReplacementType:", void, .{textReplacementType});
    }

    pub fn dataDetectionType(self: *@This()) TextInputTraitType {
        return objc.msgSend(self, "dataDetectionType", TextInputTraitType, .{});
    }

    pub fn setDataDetectionType(self: *@This(), dataDetectionType: TextInputTraitType) void {
        return objc.msgSend(self, "setDataDetectionType:", void, .{dataDetectionType});
    }

    pub fn linkDetectionType(self: *@This()) TextInputTraitType {
        return objc.msgSend(self, "linkDetectionType", TextInputTraitType, .{});
    }

    pub fn setLinkDetectionType(self: *@This(), linkDetectionType: TextInputTraitType) void {
        return objc.msgSend(self, "setLinkDetectionType:", void, .{linkDetectionType});
    }

    pub fn textCompletionType(self: *@This()) TextInputTraitType {
        return objc.msgSend(self, "textCompletionType", TextInputTraitType, .{});
    }

    pub fn setTextCompletionType(self: *@This(), textCompletionType: TextInputTraitType) void {
        return objc.msgSend(self, "setTextCompletionType:", void, .{textCompletionType});
    }

    pub fn inlinePredictionType(self: *@This()) TextInputTraitType {
        return objc.msgSend(self, "inlinePredictionType", TextInputTraitType, .{});
    }

    pub fn setInlinePredictionType(self: *@This(), inlinePredictionType: TextInputTraitType) void {
        return objc.msgSend(self, "setInlinePredictionType:", void, .{inlinePredictionType});
    }

    pub fn mathExpressionCompletionType(self: *@This()) TextInputTraitType {
        return objc.msgSend(self, "mathExpressionCompletionType", TextInputTraitType, .{});
    }

    pub fn setMathExpressionCompletionType(self: *@This(), mathExpressionCompletionType: TextInputTraitType) void {
        return objc.msgSend(self, "setMathExpressionCompletionType:", void, .{mathExpressionCompletionType});
    }

    pub fn writingToolsBehavior(self: *@This()) WritingToolsBehavior {
        return objc.msgSend(self, "writingToolsBehavior", WritingToolsBehavior, .{});
    }

    pub fn setWritingToolsBehavior(self: *@This(), writingToolsBehavior: WritingToolsBehavior) void {
        return objc.msgSend(self, "setWritingToolsBehavior:", void, .{writingToolsBehavior});
    }

    pub fn allowedWritingToolsResultOptions(self: *@This()) WritingToolsResultOptions {
        return objc.msgSend(self, "allowedWritingToolsResultOptions", WritingToolsResultOptions, .{});
    }

    pub fn setAllowedWritingToolsResultOptions(self: *@This(), allowedWritingToolsResultOptions: WritingToolsResultOptions) void {
        return objc.msgSend(self, "setAllowedWritingToolsResultOptions:", void, .{allowedWritingToolsResultOptions});
    }

    pub fn writingToolsAllowedInputOptions(self: *@This()) WritingToolsAllowedInputOptions {
        return objc.msgSend(self, "writingToolsAllowedInputOptions", WritingToolsAllowedInputOptions, .{});
    }

    pub fn setWritingToolsAllowedInputOptions(self: *@This(), writingToolsAllowedInputOptions: WritingToolsAllowedInputOptions) void {
        return objc.msgSend(self, "setWritingToolsAllowedInputOptions:", void, .{writingToolsAllowedInputOptions});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSTextCheckingClient?language=objc
pub const TextCheckingClient = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{TextInputClient, TextInputTraits, });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn annotatedSubstringForProposedRangeActualRange(self: *@This(), range: foundation.Range, actualRange: foundation.RangePointer) ?*AttributedString {
        return objc.msgSend(self, "annotatedSubstringForProposedRange:actualRange:", ?*AttributedString, .{range, actualRange});
    }

    pub fn setAnnotationsRange(self: *@This(), annotations: ?*anyopaque, range: foundation.Range) void {
        return objc.msgSend(self, "setAnnotations:range:", void, .{annotations, range});
    }

    pub fn addAnnotationsRange(self: *@This(), annotations: ?*anyopaque, range: foundation.Range) void {
        return objc.msgSend(self, "addAnnotations:range:", void, .{annotations, range});
    }

    pub fn removeAnnotationRange(self: *@This(), annotationName: foundation.AttributedStringKey, range: foundation.Range) void {
        return objc.msgSend(self, "removeAnnotation:range:", void, .{annotationName, range});
    }

    pub fn replaceCharactersInRangeWithAnnotatedString(self: *@This(), range: foundation.Range, annotatedString: ?*AttributedString) void {
        return objc.msgSend(self, "replaceCharactersInRange:withAnnotatedString:", void, .{range, annotatedString});
    }

    pub fn selectAndShowRange(self: *@This(), range: foundation.Range) void {
        return objc.msgSend(self, "selectAndShowRange:", void, .{range});
    }

    pub fn viewForRangeFirstRectActualRange(self: *@This(), range: foundation.Range, firstRect: foundation.RectPointer, actualRange: foundation.RangePointer) ?*View {
        return objc.msgSend(self, "viewForRange:firstRect:actualRange:", ?*View, .{range, firstRect, actualRange});
    }

    pub fn candidateListTouchBarItem(self: *@This()) ?*CandidateListTouchBarItem {
        return objc.msgSend(self, "candidateListTouchBarItem", ?*CandidateListTouchBarItem, .{});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSTextCheckingController?language=objc
pub const TextCheckingController = opaque {
    pub const InternalInfo = objc.ExternalClass("NSTextCheckingController", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn initWithClient(self: *@This(), client: ?*anyopaque) *@This() {
        return objc.msgSend(self, "initWithClient:", *@This(), .{client});
    }

    pub fn init(self: *@This()) *@This() {
        return objc.msgSend(self, "init", *@This(), .{});
    }

    pub fn invalidate(self: *@This()) void {
        return objc.msgSend(self, "invalidate", void, .{});
    }

    pub fn didChangeTextInRange(self: *@This(), range: foundation.Range) void {
        return objc.msgSend(self, "didChangeTextInRange:", void, .{range});
    }

    pub fn insertedTextInRange(self: *@This(), range: foundation.Range) void {
        return objc.msgSend(self, "insertedTextInRange:", void, .{range});
    }

    pub fn didChangeSelectedRange(self: *@This()) void {
        return objc.msgSend(self, "didChangeSelectedRange", void, .{});
    }

    pub fn considerTextCheckingForRange(self: *@This(), range: foundation.Range) void {
        return objc.msgSend(self, "considerTextCheckingForRange:", void, .{range});
    }

    pub fn checkTextInRangeTypesOptions(self: *@This(), range: foundation.Range, checkingTypes: foundation.TextCheckingTypes, options: ?*anyopaque) void {
        return objc.msgSend(self, "checkTextInRange:types:options:", void, .{range, checkingTypes, options});
    }

    pub fn checkTextInSelection(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "checkTextInSelection:", void, .{sender});
    }

    pub fn checkTextInDocument(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "checkTextInDocument:", void, .{sender});
    }

    pub fn orderFrontSubstitutionsPanel(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "orderFrontSubstitutionsPanel:", void, .{sender});
    }

    pub fn checkSpelling(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "checkSpelling:", void, .{sender});
    }

    pub fn showGuessPanel(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "showGuessPanel:", void, .{sender});
    }

    pub fn changeSpelling(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "changeSpelling:", void, .{sender});
    }

    pub fn ignoreSpelling(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "ignoreSpelling:", void, .{sender});
    }

    pub fn updateCandidates(self: *@This()) void {
        return objc.msgSend(self, "updateCandidates", void, .{});
    }

    pub fn validAnnotations(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "validAnnotations", ?*anyopaque, .{});
    }

    pub fn menuAtIndexClickedOnSelectionEffectiveRange(self: *@This(), location: objc.NSUInteger, clickedOnSelection: objc.BOOL, effectiveRange: foundation.RangePointer) ?*Menu {
        return objc.msgSend(self, "menuAtIndex:clickedOnSelection:effectiveRange:", ?*Menu, .{location, clickedOnSelection, effectiveRange});
    }

    pub fn client(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "client", ?*anyopaque, .{});
    }

    pub fn spellCheckerDocumentTag(self: *@This()) objc.NSInteger {
        return objc.msgSend(self, "spellCheckerDocumentTag", objc.NSInteger, .{});
    }

    pub fn setSpellCheckerDocumentTag(self: *@This(), spellCheckerDocumentTag: objc.NSInteger) void {
        return objc.msgSend(self, "setSpellCheckerDocumentTag:", void, .{spellCheckerDocumentTag});
    }

};

pub const TextFieldBezelStyle = enum(objc.NSUInteger) {
    SquareBezel = 0,
    RoundedBezel = 1,
};

/// https://developer.apple.com/documentation/AppKit/NSTextFieldCell?language=objc
pub const TextFieldCell = opaque {
    pub const InternalInfo = objc.ExternalClass("NSTextFieldCell", @This(), ActionCell, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn initTextCell(self: *@This(), string: ?*String) *@This() {
        return objc.msgSend(self, "initTextCell:", *@This(), .{string});
    }

    pub fn initWithCoder(self: *@This(), coder: ?*foundation.Coder) *@This() {
        return objc.msgSend(self, "initWithCoder:", *@This(), .{coder});
    }

    pub fn initImageCell(self: *@This(), image: ?*Image) *@This() {
        return objc.msgSend(self, "initImageCell:", *@This(), .{image});
    }

    pub fn setUpFieldEditorAttributes(self: *@This(), textObj: ?*Text) ?*Text {
        return objc.msgSend(self, "setUpFieldEditorAttributes:", ?*Text, .{textObj});
    }

    pub fn setWantsNotificationForMarkedText(self: *@This(), flag: objc.BOOL) void {
        return objc.msgSend(self, "setWantsNotificationForMarkedText:", void, .{flag});
    }

    pub fn backgroundColor(self: *@This()) ?*Color {
        return objc.msgSend(self, "backgroundColor", ?*Color, .{});
    }

    pub fn setBackgroundColor(self: *@This(), backgroundColor: ?*Color) void {
        return objc.msgSend(self, "setBackgroundColor:", void, .{backgroundColor});
    }

    pub fn drawsBackground(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "drawsBackground", objc.BOOL, .{});
    }

    pub fn setDrawsBackground(self: *@This(), drawsBackground: objc.BOOL) void {
        return objc.msgSend(self, "setDrawsBackground:", void, .{drawsBackground});
    }

    pub fn textColor(self: *@This()) ?*Color {
        return objc.msgSend(self, "textColor", ?*Color, .{});
    }

    pub fn setTextColor(self: *@This(), textColor: ?*Color) void {
        return objc.msgSend(self, "setTextColor:", void, .{textColor});
    }

    pub fn bezelStyle(self: *@This()) TextFieldBezelStyle {
        return objc.msgSend(self, "bezelStyle", TextFieldBezelStyle, .{});
    }

    pub fn setBezelStyle(self: *@This(), bezelStyle: TextFieldBezelStyle) void {
        return objc.msgSend(self, "setBezelStyle:", void, .{bezelStyle});
    }

    pub fn placeholderString(self: *@This()) ?*String {
        return objc.msgSend(self, "placeholderString", ?*String, .{});
    }

    pub fn setPlaceholderString(self: *@This(), placeholderString: ?*String) void {
        return objc.msgSend(self, "setPlaceholderString:", void, .{placeholderString});
    }

    pub fn placeholderAttributedString(self: *@This()) ?*AttributedString {
        return objc.msgSend(self, "placeholderAttributedString", ?*AttributedString, .{});
    }

    pub fn setPlaceholderAttributedString(self: *@This(), placeholderAttributedString: ?*AttributedString) void {
        return objc.msgSend(self, "setPlaceholderAttributedString:", void, .{placeholderAttributedString});
    }

    pub fn allowedInputSourceLocales(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "allowedInputSourceLocales", ?*anyopaque, .{});
    }

    pub fn setAllowedInputSourceLocales(self: *@This(), allowedInputSourceLocales: ?*anyopaque) void {
        return objc.msgSend(self, "setAllowedInputSourceLocales:", void, .{allowedInputSourceLocales});
    }

};

pub const TextContentType = ?*String;

/// https://developer.apple.com/documentation/AppKit/NSTextContent?language=objc
pub const TextContent = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn contentType(self: *@This()) TextContentType {
        return objc.msgSend(self, "contentType", TextContentType, .{});
    }

    pub fn setContentType(self: *@This(), contentType: TextContentType) void {
        return objc.msgSend(self, "setContentType:", void, .{contentType});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSTextField?language=objc
pub const TextField = opaque {
    pub const InternalInfo = objc.ExternalClass("NSTextField", @This(), Control, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn selectText(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "selectText:", void, .{sender});
    }

    pub fn textShouldBeginEditing(self: *@This(), textObject: ?*Text) objc.BOOL {
        return objc.msgSend(self, "textShouldBeginEditing:", objc.BOOL, .{textObject});
    }

    pub fn textShouldEndEditing(self: *@This(), textObject: ?*Text) objc.BOOL {
        return objc.msgSend(self, "textShouldEndEditing:", objc.BOOL, .{textObject});
    }

    pub fn textDidBeginEditing(self: *@This(), notification: ?*Notification) void {
        return objc.msgSend(self, "textDidBeginEditing:", void, .{notification});
    }

    pub fn textDidEndEditing(self: *@This(), notification: ?*Notification) void {
        return objc.msgSend(self, "textDidEndEditing:", void, .{notification});
    }

    pub fn textDidChange(self: *@This(), notification: ?*Notification) void {
        return objc.msgSend(self, "textDidChange:", void, .{notification});
    }

    pub fn placeholderString(self: *@This()) ?*String {
        return objc.msgSend(self, "placeholderString", ?*String, .{});
    }

    pub fn setPlaceholderString(self: *@This(), placeholderString: ?*String) void {
        return objc.msgSend(self, "setPlaceholderString:", void, .{placeholderString});
    }

    pub fn placeholderAttributedString(self: *@This()) ?*AttributedString {
        return objc.msgSend(self, "placeholderAttributedString", ?*AttributedString, .{});
    }

    pub fn setPlaceholderAttributedString(self: *@This(), placeholderAttributedString: ?*AttributedString) void {
        return objc.msgSend(self, "setPlaceholderAttributedString:", void, .{placeholderAttributedString});
    }

    pub fn backgroundColor(self: *@This()) ?*Color {
        return objc.msgSend(self, "backgroundColor", ?*Color, .{});
    }

    pub fn setBackgroundColor(self: *@This(), backgroundColor: ?*Color) void {
        return objc.msgSend(self, "setBackgroundColor:", void, .{backgroundColor});
    }

    pub fn drawsBackground(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "drawsBackground", objc.BOOL, .{});
    }

    pub fn setDrawsBackground(self: *@This(), drawsBackground: objc.BOOL) void {
        return objc.msgSend(self, "setDrawsBackground:", void, .{drawsBackground});
    }

    pub fn textColor(self: *@This()) ?*Color {
        return objc.msgSend(self, "textColor", ?*Color, .{});
    }

    pub fn setTextColor(self: *@This(), textColor: ?*Color) void {
        return objc.msgSend(self, "setTextColor:", void, .{textColor});
    }

    pub fn isBordered(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isBordered", objc.BOOL, .{});
    }

    pub fn setBordered(self: *@This(), bordered: objc.BOOL) void {
        return objc.msgSend(self, "setBordered:", void, .{bordered});
    }

    pub fn isBezeled(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isBezeled", objc.BOOL, .{});
    }

    pub fn setBezeled(self: *@This(), bezeled: objc.BOOL) void {
        return objc.msgSend(self, "setBezeled:", void, .{bezeled});
    }

    pub fn isEditable(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isEditable", objc.BOOL, .{});
    }

    pub fn setEditable(self: *@This(), editable: objc.BOOL) void {
        return objc.msgSend(self, "setEditable:", void, .{editable});
    }

    pub fn isSelectable(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isSelectable", objc.BOOL, .{});
    }

    pub fn setSelectable(self: *@This(), selectable: objc.BOOL) void {
        return objc.msgSend(self, "setSelectable:", void, .{selectable});
    }

    pub fn delegate(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "delegate", ?*anyopaque, .{});
    }

    pub fn setDelegate(self: *@This(), delegate: ?*anyopaque) void {
        return objc.msgSend(self, "setDelegate:", void, .{delegate});
    }

    pub fn acceptsFirstResponder(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "acceptsFirstResponder", objc.BOOL, .{});
    }

    pub fn bezelStyle(self: *@This()) TextFieldBezelStyle {
        return objc.msgSend(self, "bezelStyle", TextFieldBezelStyle, .{});
    }

    pub fn setBezelStyle(self: *@This(), bezelStyle: TextFieldBezelStyle) void {
        return objc.msgSend(self, "setBezelStyle:", void, .{bezelStyle});
    }

    pub fn preferredMaxLayoutWidth(self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(self, "preferredMaxLayoutWidth", core_foundation.CGFloat, .{});
    }

    pub fn setPreferredMaxLayoutWidth(self: *@This(), preferredMaxLayoutWidth: core_foundation.CGFloat) void {
        return objc.msgSend(self, "setPreferredMaxLayoutWidth:", void, .{preferredMaxLayoutWidth});
    }

    pub fn maximumNumberOfLines(self: *@This()) objc.NSInteger {
        return objc.msgSend(self, "maximumNumberOfLines", objc.NSInteger, .{});
    }

    pub fn setMaximumNumberOfLines(self: *@This(), maximumNumberOfLines: objc.NSInteger) void {
        return objc.msgSend(self, "setMaximumNumberOfLines:", void, .{maximumNumberOfLines});
    }

    pub fn allowsDefaultTighteningForTruncation(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "allowsDefaultTighteningForTruncation", objc.BOOL, .{});
    }

    pub fn setAllowsDefaultTighteningForTruncation(self: *@This(), allowsDefaultTighteningForTruncation: objc.BOOL) void {
        return objc.msgSend(self, "setAllowsDefaultTighteningForTruncation:", void, .{allowsDefaultTighteningForTruncation});
    }

    pub fn lineBreakStrategy(self: *@This()) LineBreakStrategy {
        return objc.msgSend(self, "lineBreakStrategy", LineBreakStrategy, .{});
    }

    pub fn setLineBreakStrategy(self: *@This(), lineBreakStrategy: LineBreakStrategy) void {
        return objc.msgSend(self, "setLineBreakStrategy:", void, .{lineBreakStrategy});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSTextFieldDelegate?language=objc
pub const TextFieldDelegate = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{ControlTextEditingDelegate, });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn textFieldTextViewCandidatesForSelectedRange(self: *@This(), textField: ?*TextField, textView: ?*TextView, selectedRange: foundation.Range) ?*Array {
        return objc.msgSend(self, "textField:textView:candidatesForSelectedRange:", ?*Array, .{textField, textView, selectedRange});
    }

    pub fn textFieldTextViewCandidatesForSelectedRange(self: *@This(), textField: ?*TextField, textView: ?*TextView, candidates: ?*anyopaque, selectedRange: foundation.Range, ) ?*anyopaque {
        return objc.msgSend(self, "textField:textView:candidates:forSelectedRange:", ?*anyopaque, .{textField, textView, candidates, selectedRange, });
    }

    pub fn textFieldTextViewShouldSelectCandidateAtIndex(self: *@This(), textField: ?*TextField, textView: ?*TextView, index: objc.NSUInteger) objc.BOOL {
        return objc.msgSend(self, "textField:textView:shouldSelectCandidateAtIndex:", objc.BOOL, .{textField, textView, index});
    }

};

pub const TextInsertionIndicatorDisplayMode = enum(objc.NSInteger) {
    Automatic = 0,
    Hidden = 1,
    Visible = 2,
};

pub const TextInsertionIndicatorAutomaticModeOptions = enum(objc.NSInteger) {
    ShowEffectsView = 1,
    ShowWhileTracking = 2,
};

/// https://developer.apple.com/documentation/AppKit/NSTextInsertionIndicator?language=objc
pub const TextInsertionIndicator = opaque {
    pub const InternalInfo = objc.ExternalClass("NSTextInsertionIndicator", @This(), View, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn displayMode(self: *@This()) TextInsertionIndicatorDisplayMode {
        return objc.msgSend(self, "displayMode", TextInsertionIndicatorDisplayMode, .{});
    }

    pub fn setDisplayMode(self: *@This(), displayMode: TextInsertionIndicatorDisplayMode) void {
        return objc.msgSend(self, "setDisplayMode:", void, .{displayMode});
    }

    pub fn color(self: *@This()) ?*Color {
        return objc.msgSend(self, "color", ?*Color, .{});
    }

    pub fn setColor(self: *@This(), color: ?*Color) void {
        return objc.msgSend(self, "setColor:", void, .{color});
    }

    pub fn automaticModeOptions(self: *@This()) TextInsertionIndicatorAutomaticModeOptions {
        return objc.msgSend(self, "automaticModeOptions", TextInsertionIndicatorAutomaticModeOptions, .{});
    }

    pub fn setAutomaticModeOptions(self: *@This(), automaticModeOptions: TextInsertionIndicatorAutomaticModeOptions) void {
        return objc.msgSend(self, "setAutomaticModeOptions:", void, .{automaticModeOptions});
    }

    pub fn effectsViewInserter(self: *@This()) *const fn(?*View) callconv(.C) void {
        return objc.msgSend(self, "effectsViewInserter", *const fn(?*View) callconv(.C) void, .{});
    }

    pub fn setEffectsViewInserter(self: *@This(), effectsViewInserter: *const fn(?*View) callconv(.C) void) void {
        return objc.msgSend(self, "setEffectsViewInserter:", void, .{effectsViewInserter});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSTextContainer?language=objc
pub const TextContainer = opaque {
    pub const InternalInfo = objc.ExternalClass("NSTextContainer", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn initWithSize(self: *@This(), size: core_foundation.CGSize) *@This() {
        return objc.msgSend(self, "initWithSize:", *@This(), .{size});
    }

    pub fn initWithCoder(self: *@This(), coder: ?*foundation.Coder) *@This() {
        return objc.msgSend(self, "initWithCoder:", *@This(), .{coder});
    }

    pub fn lineFragmentRectForProposedRectAtIndexWritingDirectionRemainingRect(self: *@This(), proposedRect: core_foundation.CGRect, characterIndex: objc.NSUInteger, baseWritingDirection: WritingDirection, remainingRect: ?*core_foundation.CGRect, ) core_foundation.CGRect {
        return objc.msgSend(self, "lineFragmentRectForProposedRect:atIndex:writingDirection:remainingRect:", core_foundation.CGRect, .{proposedRect, characterIndex, baseWritingDirection, remainingRect, });
    }

    pub fn textLayoutManager(self: *@This()) ?*TextLayoutManager {
        return objc.msgSend(self, "textLayoutManager", ?*TextLayoutManager, .{});
    }

    pub fn size(self: *@This()) core_foundation.CGSize {
        return objc.msgSend(self, "size", core_foundation.CGSize, .{});
    }

    pub fn setSize(self: *@This(), size: core_foundation.CGSize) void {
        return objc.msgSend(self, "setSize:", void, .{size});
    }

    pub fn lineBreakMode(self: *@This()) LineBreakMode {
        return objc.msgSend(self, "lineBreakMode", LineBreakMode, .{});
    }

    pub fn setLineBreakMode(self: *@This(), lineBreakMode: LineBreakMode) void {
        return objc.msgSend(self, "setLineBreakMode:", void, .{lineBreakMode});
    }

    pub fn lineFragmentPadding(self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(self, "lineFragmentPadding", core_foundation.CGFloat, .{});
    }

    pub fn setLineFragmentPadding(self: *@This(), lineFragmentPadding: core_foundation.CGFloat) void {
        return objc.msgSend(self, "setLineFragmentPadding:", void, .{lineFragmentPadding});
    }

    pub fn maximumNumberOfLines(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "maximumNumberOfLines", objc.NSUInteger, .{});
    }

    pub fn setMaximumNumberOfLines(self: *@This(), maximumNumberOfLines: objc.NSUInteger) void {
        return objc.msgSend(self, "setMaximumNumberOfLines:", void, .{maximumNumberOfLines});
    }

    pub fn isSimpleRectangularTextContainer(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isSimpleRectangularTextContainer", objc.BOOL, .{});
    }

    pub fn widthTracksTextView(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "widthTracksTextView", objc.BOOL, .{});
    }

    pub fn setWidthTracksTextView(self: *@This(), widthTracksTextView: objc.BOOL) void {
        return objc.msgSend(self, "setWidthTracksTextView:", void, .{widthTracksTextView});
    }

    pub fn heightTracksTextView(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "heightTracksTextView", objc.BOOL, .{});
    }

    pub fn setHeightTracksTextView(self: *@This(), heightTracksTextView: objc.BOOL) void {
        return objc.msgSend(self, "setHeightTracksTextView:", void, .{heightTracksTextView});
    }

};

pub const UnderlineStyle = enum(objc.NSInteger) {
    None = 0,
    Single = 1,
    Thick = 2,
    Double = 9,
    PatternSolid = 0,
    PatternDot = 256,
    PatternDash = 512,
    PatternDashDot = 768,
    PatternDashDotDot = 1024,
    ByWord = 32768,
};

pub const WritingDirectionFormatType = enum(objc.NSInteger) {
    Embedding = 0,
    Override = 2,
};

pub const TextEffectStyle = ?*String;

pub const TextHighlightStyle = ?*String;

pub const TextHighlightColorScheme = ?*String;

pub const AttributedStringDocumentType = ?*String;

pub const TextLayoutSectionKey = ?*String;

pub const TextScalingType = enum(objc.NSInteger) {
    Standard = 0,
    ScalingiOS = 1,
};

pub const AttributedStringDocumentAttributeKey = ?*String;

pub const AttributedStringDocumentReadingOptionKey = ?*String;

pub const SpellingState = enum(objc.NSInteger) {
    SpellingFlag = 1,
    GrammarFlag = 2,
};

pub const TextStorageEditActions = enum(objc.NSUInteger) {
    EditedAttributes = 1,
    EditedCharacters = 2,
};

/// https://developer.apple.com/documentation/AppKit/NSTextStorage?language=objc
pub const TextStorage = opaque {
    pub const InternalInfo = objc.ExternalClass("NSTextStorage", @This(), MutableAttributedString, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn addLayoutManager(self: *@This(), aLayoutManager: ?*LayoutManager) void {
        return objc.msgSend(self, "addLayoutManager:", void, .{aLayoutManager});
    }

    pub fn removeLayoutManager(self: *@This(), aLayoutManager: ?*LayoutManager) void {
        return objc.msgSend(self, "removeLayoutManager:", void, .{aLayoutManager});
    }

    pub fn editedRangeChangeInLength(self: *@This(), editedMask: TextStorageEditActions, editedRange: foundation.Range, delta: objc.NSInteger) void {
        return objc.msgSend(self, "edited:range:changeInLength:", void, .{editedMask, editedRange, delta});
    }

    pub fn processEditing(self: *@This()) void {
        return objc.msgSend(self, "processEditing", void, .{});
    }

    pub fn invalidateAttributesInRange(self: *@This(), range: foundation.Range) void {
        return objc.msgSend(self, "invalidateAttributesInRange:", void, .{range});
    }

    pub fn ensureAttributesAreFixedInRange(self: *@This(), range: foundation.Range) void {
        return objc.msgSend(self, "ensureAttributesAreFixedInRange:", void, .{range});
    }

    pub fn layoutManagers(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "layoutManagers", ?*anyopaque, .{});
    }

    pub fn editedMask(self: *@This()) TextStorageEditActions {
        return objc.msgSend(self, "editedMask", TextStorageEditActions, .{});
    }

    pub fn editedRange(self: *@This()) foundation.Range {
        return objc.msgSend(self, "editedRange", foundation.Range, .{});
    }

    pub fn changeInLength(self: *@This()) objc.NSInteger {
        return objc.msgSend(self, "changeInLength", objc.NSInteger, .{});
    }

    pub fn delegate(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "delegate", ?*anyopaque, .{});
    }

    pub fn setDelegate(self: *@This(), delegate: ?*anyopaque) void {
        return objc.msgSend(self, "setDelegate:", void, .{delegate});
    }

    pub fn fixesAttributesLazily(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "fixesAttributesLazily", objc.BOOL, .{});
    }

    pub fn textStorageObserver(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "textStorageObserver", ?*anyopaque, .{});
    }

    pub fn setTextStorageObserver(self: *@This(), textStorageObserver: ?*anyopaque) void {
        return objc.msgSend(self, "setTextStorageObserver:", void, .{textStorageObserver});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSTextStorageDelegate?language=objc
pub const TextStorageDelegate = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{objc.NSObject, });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn textStorageWillProcessEditingRangeChangeInLength(self: *@This(), textStorage: ?*TextStorage, editedMask: TextStorageEditActions, editedRange: foundation.Range, delta: objc.NSInteger, ) void {
        return objc.msgSend(self, "textStorage:willProcessEditing:range:changeInLength:", void, .{textStorage, editedMask, editedRange, delta, });
    }

    pub fn textStorageDidProcessEditingRangeChangeInLength(self: *@This(), textStorage: ?*TextStorage, editedMask: TextStorageEditActions, editedRange: foundation.Range, delta: objc.NSInteger, ) void {
        return objc.msgSend(self, "textStorage:didProcessEditing:range:changeInLength:", void, .{textStorage, editedMask, editedRange, delta, });
    }

};

/// https://developer.apple.com/documentation/AppKit/NSTextStorageObserving?language=objc
pub const TextStorageObserving = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{objc.NSObject, });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn processEditingForTextStorageEditedRangeChangeInLengthInvalidatedRange(self: *@This(), textStorage: ?*TextStorage, editMask: TextStorageEditActions, newCharRange: foundation.Range, delta: objc.NSInteger, invalidatedCharRange: foundation.Range, ) void {
        return objc.msgSend(self, "processEditingForTextStorage:edited:range:changeInLength:invalidatedRange:", void, .{textStorage, editMask, newCharRange, delta, invalidatedCharRange, });
    }

    pub fn performEditingTransactionForTextStorageUsingBlock(self: *@This(), textStorage: ?*TextStorage, transaction: *const fn() callconv(.C) void) void {
        return objc.msgSend(self, "performEditingTransactionForTextStorage:usingBlock:", void, .{textStorage, transaction});
    }

    pub fn textStorage(self: *@This()) ?*TextStorage {
        return objc.msgSend(self, "textStorage", ?*TextStorage, .{});
    }

    pub fn setTextStorage(self: *@This(), textStorage: ?*TextStorage) void {
        return objc.msgSend(self, "setTextStorage:", void, .{textStorage});
    }

};

pub const TextStorageEditedOptions = objc.NSUInteger;

/// https://developer.apple.com/documentation/AppKit/NSGlyphStorage?language=objc
pub const GlyphStorage = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn insertGlyphsLengthForStartingGlyphAtIndexCharacterIndex(self: *@This(), glyphs: ?*Glyph, length: objc.NSUInteger, glyphIndex: objc.NSUInteger, charIndex: objc.NSUInteger, ) void {
        return objc.msgSend(self, "insertGlyphs:length:forStartingGlyphAtIndex:characterIndex:", void, .{glyphs, length, glyphIndex, charIndex, });
    }

    pub fn setIntAttributeValueForGlyphAtIndex(self: *@This(), attributeTag: objc.NSInteger, val: objc.NSInteger, glyphIndex: objc.NSUInteger) void {
        return objc.msgSend(self, "setIntAttribute:value:forGlyphAtIndex:", void, .{attributeTag, val, glyphIndex});
    }

    pub fn attributedString(self: *@This()) ?*AttributedString {
        return objc.msgSend(self, "attributedString", ?*AttributedString, .{});
    }

    pub fn layoutOptions(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "layoutOptions", objc.NSUInteger, .{});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSGlyphGenerator?language=objc
pub const GlyphGenerator = opaque {
    pub const InternalInfo = objc.ExternalClass("NSGlyphGenerator", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn generateGlyphsForGlyphStorageDesiredNumberOfCharactersGlyphIndexCharacterIndex(self: *@This(), glyphStorage: ?*anyopaque, nChars: objc.NSUInteger, glyphIndex: ?*objc.NSUInteger, charIndex: ?*objc.NSUInteger, ) void {
        return objc.msgSend(self, "generateGlyphsForGlyphStorage:desiredNumberOfCharacters:glyphIndex:characterIndex:", void, .{glyphStorage, nChars, glyphIndex, charIndex, });
    }

    pub fn sharedGlyphGenerator(self: *@This()) ?*GlyphGenerator {
        return objc.msgSend(self, "sharedGlyphGenerator", ?*GlyphGenerator, .{});
    }

};

pub const TextLayoutOrientation = enum(objc.NSInteger) {
    Horizontal = 0,
    Vertical = 1,
};

pub const GlyphProperty = enum(objc.NSInteger) {
    Null = 1,
    ControlCharacter = 2,
    Elastic = 4,
    NonBaseCharacter = 8,
};

pub const ControlCharacterAction = enum(objc.NSInteger) {
    ZeroAdvancement = 1,
    Whitespace = 2,
    HorizontalTab = 4,
    LineBreak = 8,
    ParagraphBreak = 16,
    ContainerBreak = 32,
};

/// https://developer.apple.com/documentation/AppKit/NSTextLayoutOrientationProvider?language=objc
pub const TextLayoutOrientationProvider = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn layoutOrientation(self: *@This()) TextLayoutOrientation {
        return objc.msgSend(self, "layoutOrientation", TextLayoutOrientation, .{});
    }

};

pub const TypesetterBehavior = enum(objc.NSInteger) {
    LatestBehavior = -1,
    OriginalBehavior = 0,
    _10_2_WithCompatibility = 1,
    _10_2 = 2,
    _10_3 = 3,
    _10_4 = 4,
};

/// https://developer.apple.com/documentation/AppKit/NSLayoutManager?language=objc
pub const LayoutManager = opaque {
    pub const InternalInfo = objc.ExternalClass("NSLayoutManager", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn init(self: *@This()) *@This() {
        return objc.msgSend(self, "init", *@This(), .{});
    }

    pub fn initWithCoder(self: *@This(), coder: ?*foundation.Coder) *@This() {
        return objc.msgSend(self, "initWithCoder:", *@This(), .{coder});
    }

    pub fn replaceTextStorage(self: *@This(), newTextStorage: ?*TextStorage) void {
        return objc.msgSend(self, "replaceTextStorage:", void, .{newTextStorage});
    }

    pub fn addTextContainer(self: *@This(), container: ?*TextContainer) void {
        return objc.msgSend(self, "addTextContainer:", void, .{container});
    }

    pub fn insertTextContainerAtIndex(self: *@This(), container: ?*TextContainer, index: objc.NSUInteger) void {
        return objc.msgSend(self, "insertTextContainer:atIndex:", void, .{container, index});
    }

    pub fn removeTextContainerAtIndex(self: *@This(), index: objc.NSUInteger) void {
        return objc.msgSend(self, "removeTextContainerAtIndex:", void, .{index});
    }

    pub fn textContainerChangedGeometry(self: *@This(), container: ?*TextContainer) void {
        return objc.msgSend(self, "textContainerChangedGeometry:", void, .{container});
    }

    pub fn textContainerChangedTextView(self: *@This(), container: ?*TextContainer) void {
        return objc.msgSend(self, "textContainerChangedTextView:", void, .{container});
    }

    pub fn invalidateGlyphsForCharacterRangeChangeInLengthActualCharacterRange(self: *@This(), charRange: foundation.Range, delta: objc.NSInteger, actualCharRange: foundation.RangePointer) void {
        return objc.msgSend(self, "invalidateGlyphsForCharacterRange:changeInLength:actualCharacterRange:", void, .{charRange, delta, actualCharRange});
    }

    pub fn invalidateLayoutForCharacterRangeActualCharacterRange(self: *@This(), charRange: foundation.Range, actualCharRange: foundation.RangePointer) void {
        return objc.msgSend(self, "invalidateLayoutForCharacterRange:actualCharacterRange:", void, .{charRange, actualCharRange});
    }

    pub fn invalidateDisplayForCharacterRange(self: *@This(), charRange: foundation.Range) void {
        return objc.msgSend(self, "invalidateDisplayForCharacterRange:", void, .{charRange});
    }

    pub fn invalidateDisplayForGlyphRange(self: *@This(), glyphRange: foundation.Range) void {
        return objc.msgSend(self, "invalidateDisplayForGlyphRange:", void, .{glyphRange});
    }

    pub fn processEditingForTextStorageEditedRangeChangeInLengthInvalidatedRange(self: *@This(), textStorage: ?*TextStorage, editMask: TextStorageEditActions, newCharRange: foundation.Range, delta: objc.NSInteger, invalidatedCharRange: foundation.Range, ) void {
        return objc.msgSend(self, "processEditingForTextStorage:edited:range:changeInLength:invalidatedRange:", void, .{textStorage, editMask, newCharRange, delta, invalidatedCharRange, });
    }

    pub fn ensureGlyphsForCharacterRange(self: *@This(), charRange: foundation.Range) void {
        return objc.msgSend(self, "ensureGlyphsForCharacterRange:", void, .{charRange});
    }

    pub fn ensureGlyphsForGlyphRange(self: *@This(), glyphRange: foundation.Range) void {
        return objc.msgSend(self, "ensureGlyphsForGlyphRange:", void, .{glyphRange});
    }

    pub fn ensureLayoutForCharacterRange(self: *@This(), charRange: foundation.Range) void {
        return objc.msgSend(self, "ensureLayoutForCharacterRange:", void, .{charRange});
    }

    pub fn ensureLayoutForGlyphRange(self: *@This(), glyphRange: foundation.Range) void {
        return objc.msgSend(self, "ensureLayoutForGlyphRange:", void, .{glyphRange});
    }

    pub fn ensureLayoutForTextContainer(self: *@This(), container: ?*TextContainer) void {
        return objc.msgSend(self, "ensureLayoutForTextContainer:", void, .{container});
    }

    pub fn ensureLayoutForBoundingRectInTextContainer(self: *@This(), bounds: foundation.Rect, container: ?*TextContainer) void {
        return objc.msgSend(self, "ensureLayoutForBoundingRect:inTextContainer:", void, .{bounds, container});
    }

    pub fn setGlyphsPropertiesCharacterIndexesFontForGlyphRange(self: *@This(), glyphs: ?*core_graphics.Glyph, props: ?*GlyphProperty, charIndexes: ?*objc.NSUInteger, aFont: ?*Font, glyphRange: foundation.Range, ) void {
        return objc.msgSend(self, "setGlyphs:properties:characterIndexes:font:forGlyphRange:", void, .{glyphs, props, charIndexes, aFont, glyphRange, });
    }

    pub fn CGGlyphAtIndexIsValidIndex(self: *@This(), glyphIndex: objc.NSUInteger, isValidIndex: ?*objc.BOOL) core_graphics.Glyph {
        return objc.msgSend(self, "CGGlyphAtIndex:isValidIndex:", core_graphics.Glyph, .{glyphIndex, isValidIndex});
    }

    pub fn CGGlyphAtIndex(self: *@This(), glyphIndex: objc.NSUInteger) core_graphics.Glyph {
        return objc.msgSend(self, "CGGlyphAtIndex:", core_graphics.Glyph, .{glyphIndex});
    }

    pub fn isValidGlyphIndex(self: *@This(), glyphIndex: objc.NSUInteger) objc.BOOL {
        return objc.msgSend(self, "isValidGlyphIndex:", objc.BOOL, .{glyphIndex});
    }

    pub fn propertyForGlyphAtIndex(self: *@This(), glyphIndex: objc.NSUInteger) GlyphProperty {
        return objc.msgSend(self, "propertyForGlyphAtIndex:", GlyphProperty, .{glyphIndex});
    }

    pub fn characterIndexForGlyphAtIndex(self: *@This(), glyphIndex: objc.NSUInteger) objc.NSUInteger {
        return objc.msgSend(self, "characterIndexForGlyphAtIndex:", objc.NSUInteger, .{glyphIndex});
    }

    pub fn glyphIndexForCharacterAtIndex(self: *@This(), charIndex: objc.NSUInteger) objc.NSUInteger {
        return objc.msgSend(self, "glyphIndexForCharacterAtIndex:", objc.NSUInteger, .{charIndex});
    }

    pub fn getGlyphsInRangeGlyphsPropertiesCharacterIndexesBidiLevels(self: *@This(), glyphRange: foundation.Range, glyphBuffer: ?*core_graphics.Glyph, props: ?*GlyphProperty, charIndexBuffer: ?*objc.NSUInteger, bidiLevelBuffer: ?*u8, ) objc.NSUInteger {
        return objc.msgSend(self, "getGlyphsInRange:glyphs:properties:characterIndexes:bidiLevels:", objc.NSUInteger, .{glyphRange, glyphBuffer, props, charIndexBuffer, bidiLevelBuffer, });
    }

    pub fn setTextContainerForGlyphRange(self: *@This(), container: ?*TextContainer, glyphRange: foundation.Range) void {
        return objc.msgSend(self, "setTextContainer:forGlyphRange:", void, .{container, glyphRange});
    }

    pub fn setLineFragmentRectForGlyphRangeUsedRect(self: *@This(), fragmentRect: foundation.Rect, glyphRange: foundation.Range, usedRect: foundation.Rect) void {
        return objc.msgSend(self, "setLineFragmentRect:forGlyphRange:usedRect:", void, .{fragmentRect, glyphRange, usedRect});
    }

    pub fn setExtraLineFragmentRectUsedRectTextContainer(self: *@This(), fragmentRect: foundation.Rect, usedRect: foundation.Rect, container: ?*TextContainer) void {
        return objc.msgSend(self, "setExtraLineFragmentRect:usedRect:textContainer:", void, .{fragmentRect, usedRect, container});
    }

    pub fn setLocationForStartOfGlyphRange(self: *@This(), location: foundation.Point, glyphRange: foundation.Range) void {
        return objc.msgSend(self, "setLocation:forStartOfGlyphRange:", void, .{location, glyphRange});
    }

    pub fn setNotShownAttributeForGlyphAtIndex(self: *@This(), flag: objc.BOOL, glyphIndex: objc.NSUInteger) void {
        return objc.msgSend(self, "setNotShownAttribute:forGlyphAtIndex:", void, .{flag, glyphIndex});
    }

    pub fn setDrawsOutsideLineFragmentForGlyphAtIndex(self: *@This(), flag: objc.BOOL, glyphIndex: objc.NSUInteger) void {
        return objc.msgSend(self, "setDrawsOutsideLineFragment:forGlyphAtIndex:", void, .{flag, glyphIndex});
    }

    pub fn setAttachmentSizeForGlyphRange(self: *@This(), attachmentSize: foundation.Size, glyphRange: foundation.Range) void {
        return objc.msgSend(self, "setAttachmentSize:forGlyphRange:", void, .{attachmentSize, glyphRange});
    }

    pub fn getFirstUnlaidCharacterIndexGlyphIndex(self: *@This(), charIndex: ?*objc.NSUInteger, glyphIndex: ?*objc.NSUInteger) void {
        return objc.msgSend(self, "getFirstUnlaidCharacterIndex:glyphIndex:", void, .{charIndex, glyphIndex});
    }

    pub fn firstUnlaidCharacterIndex(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "firstUnlaidCharacterIndex", objc.NSUInteger, .{});
    }

    pub fn firstUnlaidGlyphIndex(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "firstUnlaidGlyphIndex", objc.NSUInteger, .{});
    }

    pub fn textContainerForGlyphAtIndexEffectiveRange(self: *@This(), glyphIndex: objc.NSUInteger, effectiveGlyphRange: foundation.RangePointer) ?*TextContainer {
        return objc.msgSend(self, "textContainerForGlyphAtIndex:effectiveRange:", ?*TextContainer, .{glyphIndex, effectiveGlyphRange});
    }

    pub fn textContainerForGlyphAtIndexEffectiveRangeWithoutAdditionalLayout(self: *@This(), glyphIndex: objc.NSUInteger, effectiveGlyphRange: foundation.RangePointer, flag: objc.BOOL) ?*TextContainer {
        return objc.msgSend(self, "textContainerForGlyphAtIndex:effectiveRange:withoutAdditionalLayout:", ?*TextContainer, .{glyphIndex, effectiveGlyphRange, flag});
    }

    pub fn usedRectForTextContainer(self: *@This(), container: ?*TextContainer) foundation.Rect {
        return objc.msgSend(self, "usedRectForTextContainer:", foundation.Rect, .{container});
    }

    pub fn lineFragmentRectForGlyphAtIndexEffectiveRange(self: *@This(), glyphIndex: objc.NSUInteger, effectiveGlyphRange: foundation.RangePointer) foundation.Rect {
        return objc.msgSend(self, "lineFragmentRectForGlyphAtIndex:effectiveRange:", foundation.Rect, .{glyphIndex, effectiveGlyphRange});
    }

    pub fn lineFragmentRectForGlyphAtIndexEffectiveRangeWithoutAdditionalLayout(self: *@This(), glyphIndex: objc.NSUInteger, effectiveGlyphRange: foundation.RangePointer, flag: objc.BOOL) foundation.Rect {
        return objc.msgSend(self, "lineFragmentRectForGlyphAtIndex:effectiveRange:withoutAdditionalLayout:", foundation.Rect, .{glyphIndex, effectiveGlyphRange, flag});
    }

    pub fn lineFragmentUsedRectForGlyphAtIndexEffectiveRange(self: *@This(), glyphIndex: objc.NSUInteger, effectiveGlyphRange: foundation.RangePointer) foundation.Rect {
        return objc.msgSend(self, "lineFragmentUsedRectForGlyphAtIndex:effectiveRange:", foundation.Rect, .{glyphIndex, effectiveGlyphRange});
    }

    pub fn lineFragmentUsedRectForGlyphAtIndexEffectiveRangeWithoutAdditionalLayout(self: *@This(), glyphIndex: objc.NSUInteger, effectiveGlyphRange: foundation.RangePointer, flag: objc.BOOL) foundation.Rect {
        return objc.msgSend(self, "lineFragmentUsedRectForGlyphAtIndex:effectiveRange:withoutAdditionalLayout:", foundation.Rect, .{glyphIndex, effectiveGlyphRange, flag});
    }

    pub fn locationForGlyphAtIndex(self: *@This(), glyphIndex: objc.NSUInteger) foundation.Point {
        return objc.msgSend(self, "locationForGlyphAtIndex:", foundation.Point, .{glyphIndex});
    }

    pub fn notShownAttributeForGlyphAtIndex(self: *@This(), glyphIndex: objc.NSUInteger) objc.BOOL {
        return objc.msgSend(self, "notShownAttributeForGlyphAtIndex:", objc.BOOL, .{glyphIndex});
    }

    pub fn drawsOutsideLineFragmentForGlyphAtIndex(self: *@This(), glyphIndex: objc.NSUInteger) objc.BOOL {
        return objc.msgSend(self, "drawsOutsideLineFragmentForGlyphAtIndex:", objc.BOOL, .{glyphIndex});
    }

    pub fn attachmentSizeForGlyphAtIndex(self: *@This(), glyphIndex: objc.NSUInteger) foundation.Size {
        return objc.msgSend(self, "attachmentSizeForGlyphAtIndex:", foundation.Size, .{glyphIndex});
    }

    pub fn truncatedGlyphRangeInLineFragmentForGlyphAtIndex(self: *@This(), glyphIndex: objc.NSUInteger) foundation.Range {
        return objc.msgSend(self, "truncatedGlyphRangeInLineFragmentForGlyphAtIndex:", foundation.Range, .{glyphIndex});
    }

    pub fn glyphRangeForCharacterRangeActualCharacterRange(self: *@This(), charRange: foundation.Range, actualCharRange: foundation.RangePointer) foundation.Range {
        return objc.msgSend(self, "glyphRangeForCharacterRange:actualCharacterRange:", foundation.Range, .{charRange, actualCharRange});
    }

    pub fn characterRangeForGlyphRangeActualGlyphRange(self: *@This(), glyphRange: foundation.Range, actualGlyphRange: foundation.RangePointer) foundation.Range {
        return objc.msgSend(self, "characterRangeForGlyphRange:actualGlyphRange:", foundation.Range, .{glyphRange, actualGlyphRange});
    }

    pub fn glyphRangeForTextContainer(self: *@This(), container: ?*TextContainer) foundation.Range {
        return objc.msgSend(self, "glyphRangeForTextContainer:", foundation.Range, .{container});
    }

    pub fn rangeOfNominallySpacedGlyphsContainingIndex(self: *@This(), glyphIndex: objc.NSUInteger) foundation.Range {
        return objc.msgSend(self, "rangeOfNominallySpacedGlyphsContainingIndex:", foundation.Range, .{glyphIndex});
    }

    pub fn boundingRectForGlyphRangeInTextContainer(self: *@This(), glyphRange: foundation.Range, container: ?*TextContainer) foundation.Rect {
        return objc.msgSend(self, "boundingRectForGlyphRange:inTextContainer:", foundation.Rect, .{glyphRange, container});
    }

    pub fn glyphRangeForBoundingRectInTextContainer(self: *@This(), bounds: foundation.Rect, container: ?*TextContainer) foundation.Range {
        return objc.msgSend(self, "glyphRangeForBoundingRect:inTextContainer:", foundation.Range, .{bounds, container});
    }

    pub fn glyphRangeForBoundingRectWithoutAdditionalLayoutInTextContainer(self: *@This(), bounds: foundation.Rect, container: ?*TextContainer) foundation.Range {
        return objc.msgSend(self, "glyphRangeForBoundingRectWithoutAdditionalLayout:inTextContainer:", foundation.Range, .{bounds, container});
    }

    pub fn glyphIndexForPointInTextContainerFractionOfDistanceThroughGlyph(self: *@This(), point: foundation.Point, container: ?*TextContainer, partialFraction: ?*core_foundation.CGFloat) objc.NSUInteger {
        return objc.msgSend(self, "glyphIndexForPoint:inTextContainer:fractionOfDistanceThroughGlyph:", objc.NSUInteger, .{point, container, partialFraction});
    }

    pub fn glyphIndexForPointInTextContainer(self: *@This(), point: foundation.Point, container: ?*TextContainer) objc.NSUInteger {
        return objc.msgSend(self, "glyphIndexForPoint:inTextContainer:", objc.NSUInteger, .{point, container});
    }

    pub fn fractionOfDistanceThroughGlyphForPointInTextContainer(self: *@This(), point: foundation.Point, container: ?*TextContainer) core_foundation.CGFloat {
        return objc.msgSend(self, "fractionOfDistanceThroughGlyphForPoint:inTextContainer:", core_foundation.CGFloat, .{point, container});
    }

    pub fn characterIndexForPointInTextContainerFractionOfDistanceBetweenInsertionPoints(self: *@This(), point: foundation.Point, container: ?*TextContainer, partialFraction: ?*core_foundation.CGFloat) objc.NSUInteger {
        return objc.msgSend(self, "characterIndexForPoint:inTextContainer:fractionOfDistanceBetweenInsertionPoints:", objc.NSUInteger, .{point, container, partialFraction});
    }

    pub fn getLineFragmentInsertionPointsForCharacterAtIndexAlternatePositionsInDisplayOrderPositionsCharacterIndexes(self: *@This(), charIndex: objc.NSUInteger, aFlag: objc.BOOL, dFlag: objc.BOOL, positions: ?*core_foundation.CGFloat, charIndexes: ?*objc.NSUInteger, ) objc.NSUInteger {
        return objc.msgSend(self, "getLineFragmentInsertionPointsForCharacterAtIndex:alternatePositions:inDisplayOrder:positions:characterIndexes:", objc.NSUInteger, .{charIndex, aFlag, dFlag, positions, charIndexes, });
    }

    pub fn enumerateLineFragmentsForGlyphRangeUsingBlock(self: *@This(), glyphRange: foundation.Range, block: *const fn(foundation.Rect, foundation.Rect, ?*TextContainer, foundation.Range, ?*objc.BOOL, ) callconv(.C) void) void {
        return objc.msgSend(self, "enumerateLineFragmentsForGlyphRange:usingBlock:", void, .{glyphRange, block});
    }

    pub fn enumerateEnclosingRectsForGlyphRangeWithinSelectedGlyphRangeInTextContainerUsingBlock(self: *@This(), glyphRange: foundation.Range, selectedRange: foundation.Range, textContainer: ?*TextContainer, block: *const fn(foundation.Rect, ?*objc.BOOL) callconv(.C) void, ) void {
        return objc.msgSend(self, "enumerateEnclosingRectsForGlyphRange:withinSelectedGlyphRange:inTextContainer:usingBlock:", void, .{glyphRange, selectedRange, textContainer, block, });
    }

    pub fn drawBackgroundForGlyphRangeAtPoint(self: *@This(), glyphsToShow: foundation.Range, origin: foundation.Point) void {
        return objc.msgSend(self, "drawBackgroundForGlyphRange:atPoint:", void, .{glyphsToShow, origin});
    }

    pub fn drawGlyphsForGlyphRangeAtPoint(self: *@This(), glyphsToShow: foundation.Range, origin: foundation.Point) void {
        return objc.msgSend(self, "drawGlyphsForGlyphRange:atPoint:", void, .{glyphsToShow, origin});
    }

    pub fn showCGGlyphsPositionsCountFontTextMatrixAttributesInContext(self: *@This(), glyphs: ?*core_graphics.Glyph, positions: ?*core_foundation.CGPoint, glyphCount: objc.NSInteger, font: ?*Font, textMatrix: core_foundation.CGAffineTransform, attributes: ?*anyopaque, CGContext: core_graphics.ContextRef, ) void {
        return objc.msgSend(self, "showCGGlyphs:positions:count:font:textMatrix:attributes:inContext:", void, .{glyphs, positions, glyphCount, font, textMatrix, attributes, CGContext, });
    }

    pub fn fillBackgroundRectArrayCountForCharacterRangeColor(self: *@This(), rectArray: ?*foundation.Rect, rectCount: objc.NSUInteger, charRange: foundation.Range, color: ?*Color, ) void {
        return objc.msgSend(self, "fillBackgroundRectArray:count:forCharacterRange:color:", void, .{rectArray, rectCount, charRange, color, });
    }

    pub fn drawUnderlineForGlyphRangeUnderlineTypeBaselineOffsetLineFragmentRectLineFragmentGlyphRangeContainerOrigin(self: *@This(), glyphRange: foundation.Range, underlineVal: UnderlineStyle, baselineOffset: core_foundation.CGFloat, lineRect: foundation.Rect, lineGlyphRange: foundation.Range, containerOrigin: foundation.Point, ) void {
        return objc.msgSend(self, "drawUnderlineForGlyphRange:underlineType:baselineOffset:lineFragmentRect:lineFragmentGlyphRange:containerOrigin:", void, .{glyphRange, underlineVal, baselineOffset, lineRect, lineGlyphRange, containerOrigin, });
    }

    pub fn underlineGlyphRangeUnderlineTypeLineFragmentRectLineFragmentGlyphRangeContainerOrigin(self: *@This(), glyphRange: foundation.Range, underlineVal: UnderlineStyle, lineRect: foundation.Rect, lineGlyphRange: foundation.Range, containerOrigin: foundation.Point, ) void {
        return objc.msgSend(self, "underlineGlyphRange:underlineType:lineFragmentRect:lineFragmentGlyphRange:containerOrigin:", void, .{glyphRange, underlineVal, lineRect, lineGlyphRange, containerOrigin, });
    }

    pub fn drawStrikethroughForGlyphRangeStrikethroughTypeBaselineOffsetLineFragmentRectLineFragmentGlyphRangeContainerOrigin(self: *@This(), glyphRange: foundation.Range, strikethroughVal: UnderlineStyle, baselineOffset: core_foundation.CGFloat, lineRect: foundation.Rect, lineGlyphRange: foundation.Range, containerOrigin: foundation.Point, ) void {
        return objc.msgSend(self, "drawStrikethroughForGlyphRange:strikethroughType:baselineOffset:lineFragmentRect:lineFragmentGlyphRange:containerOrigin:", void, .{glyphRange, strikethroughVal, baselineOffset, lineRect, lineGlyphRange, containerOrigin, });
    }

    pub fn strikethroughGlyphRangeStrikethroughTypeLineFragmentRectLineFragmentGlyphRangeContainerOrigin(self: *@This(), glyphRange: foundation.Range, strikethroughVal: UnderlineStyle, lineRect: foundation.Rect, lineGlyphRange: foundation.Range, containerOrigin: foundation.Point, ) void {
        return objc.msgSend(self, "strikethroughGlyphRange:strikethroughType:lineFragmentRect:lineFragmentGlyphRange:containerOrigin:", void, .{glyphRange, strikethroughVal, lineRect, lineGlyphRange, containerOrigin, });
    }

    pub fn showAttachmentCellInRectCharacterIndex(self: *@This(), cell: ?*Cell, rect: foundation.Rect, attachmentIndex: objc.NSUInteger) void {
        return objc.msgSend(self, "showAttachmentCell:inRect:characterIndex:", void, .{cell, rect, attachmentIndex});
    }

    pub fn setLayoutRectForTextBlockGlyphRange(self: *@This(), rect: foundation.Rect, block: ?*TextBlock, glyphRange: foundation.Range) void {
        return objc.msgSend(self, "setLayoutRect:forTextBlock:glyphRange:", void, .{rect, block, glyphRange});
    }

    pub fn setBoundsRectForTextBlockGlyphRange(self: *@This(), rect: foundation.Rect, block: ?*TextBlock, glyphRange: foundation.Range) void {
        return objc.msgSend(self, "setBoundsRect:forTextBlock:glyphRange:", void, .{rect, block, glyphRange});
    }

    pub fn layoutRectForTextBlockGlyphRange(self: *@This(), block: ?*TextBlock, glyphRange: foundation.Range) foundation.Rect {
        return objc.msgSend(self, "layoutRectForTextBlock:glyphRange:", foundation.Rect, .{block, glyphRange});
    }

    pub fn boundsRectForTextBlockGlyphRange(self: *@This(), block: ?*TextBlock, glyphRange: foundation.Range) foundation.Rect {
        return objc.msgSend(self, "boundsRectForTextBlock:glyphRange:", foundation.Rect, .{block, glyphRange});
    }

    pub fn layoutRectForTextBlockAtIndexEffectiveRange(self: *@This(), block: ?*TextBlock, glyphIndex: objc.NSUInteger, effectiveGlyphRange: foundation.RangePointer) foundation.Rect {
        return objc.msgSend(self, "layoutRectForTextBlock:atIndex:effectiveRange:", foundation.Rect, .{block, glyphIndex, effectiveGlyphRange});
    }

    pub fn boundsRectForTextBlockAtIndexEffectiveRange(self: *@This(), block: ?*TextBlock, glyphIndex: objc.NSUInteger, effectiveGlyphRange: foundation.RangePointer) foundation.Rect {
        return objc.msgSend(self, "boundsRectForTextBlock:atIndex:effectiveRange:", foundation.Rect, .{block, glyphIndex, effectiveGlyphRange});
    }

    pub fn temporaryAttributesAtCharacterIndexEffectiveRange(self: *@This(), charIndex: objc.NSUInteger, effectiveCharRange: foundation.RangePointer) ?*anyopaque {
        return objc.msgSend(self, "temporaryAttributesAtCharacterIndex:effectiveRange:", ?*anyopaque, .{charIndex, effectiveCharRange});
    }

    pub fn setTemporaryAttributesForCharacterRange(self: *@This(), attrs: ?*anyopaque, charRange: foundation.Range) void {
        return objc.msgSend(self, "setTemporaryAttributes:forCharacterRange:", void, .{attrs, charRange});
    }

    pub fn addTemporaryAttributesForCharacterRange(self: *@This(), attrs: ?*anyopaque, charRange: foundation.Range) void {
        return objc.msgSend(self, "addTemporaryAttributes:forCharacterRange:", void, .{attrs, charRange});
    }

    pub fn removeTemporaryAttributeForCharacterRange(self: *@This(), attrName: foundation.AttributedStringKey, charRange: foundation.Range) void {
        return objc.msgSend(self, "removeTemporaryAttribute:forCharacterRange:", void, .{attrName, charRange});
    }

    pub fn temporaryAttributeAtCharacterIndexEffectiveRange(self: *@This(), attrName: foundation.AttributedStringKey, location: objc.NSUInteger, range: foundation.RangePointer) *objc.Id {
        return objc.msgSend(self, "temporaryAttribute:atCharacterIndex:effectiveRange:", *objc.Id, .{attrName, location, range});
    }

    pub fn temporaryAttributeAtCharacterIndexLongestEffectiveRangeInRange(self: *@This(), attrName: foundation.AttributedStringKey, location: objc.NSUInteger, range: foundation.RangePointer, rangeLimit: foundation.Range, ) *objc.Id {
        return objc.msgSend(self, "temporaryAttribute:atCharacterIndex:longestEffectiveRange:inRange:", *objc.Id, .{attrName, location, range, rangeLimit, });
    }

    pub fn temporaryAttributesAtCharacterIndexLongestEffectiveRangeInRange(self: *@This(), location: objc.NSUInteger, range: foundation.RangePointer, rangeLimit: foundation.Range) ?*anyopaque {
        return objc.msgSend(self, "temporaryAttributesAtCharacterIndex:longestEffectiveRange:inRange:", ?*anyopaque, .{location, range, rangeLimit});
    }

    pub fn addTemporaryAttributeValueForCharacterRange(self: *@This(), attrName: foundation.AttributedStringKey, value: *objc.Id, charRange: foundation.Range) void {
        return objc.msgSend(self, "addTemporaryAttribute:value:forCharacterRange:", void, .{attrName, value, charRange});
    }

    pub fn defaultLineHeightForFont(self: *@This(), theFont: ?*Font) core_foundation.CGFloat {
        return objc.msgSend(self, "defaultLineHeightForFont:", core_foundation.CGFloat, .{theFont});
    }

    pub fn defaultBaselineOffsetForFont(self: *@This(), theFont: ?*Font) core_foundation.CGFloat {
        return objc.msgSend(self, "defaultBaselineOffsetForFont:", core_foundation.CGFloat, .{theFont});
    }

    pub fn textStorage(self: *@This()) ?*TextStorage {
        return objc.msgSend(self, "textStorage", ?*TextStorage, .{});
    }

    pub fn setTextStorage(self: *@This(), textStorage: ?*TextStorage) void {
        return objc.msgSend(self, "setTextStorage:", void, .{textStorage});
    }

    pub fn textContainers(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "textContainers", ?*anyopaque, .{});
    }

    pub fn delegate(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "delegate", ?*anyopaque, .{});
    }

    pub fn setDelegate(self: *@This(), delegate: ?*anyopaque) void {
        return objc.msgSend(self, "setDelegate:", void, .{delegate});
    }

    pub fn showsInvisibleCharacters(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "showsInvisibleCharacters", objc.BOOL, .{});
    }

    pub fn setShowsInvisibleCharacters(self: *@This(), showsInvisibleCharacters: objc.BOOL) void {
        return objc.msgSend(self, "setShowsInvisibleCharacters:", void, .{showsInvisibleCharacters});
    }

    pub fn showsControlCharacters(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "showsControlCharacters", objc.BOOL, .{});
    }

    pub fn setShowsControlCharacters(self: *@This(), showsControlCharacters: objc.BOOL) void {
        return objc.msgSend(self, "setShowsControlCharacters:", void, .{showsControlCharacters});
    }

    pub fn usesDefaultHyphenation(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "usesDefaultHyphenation", objc.BOOL, .{});
    }

    pub fn setUsesDefaultHyphenation(self: *@This(), usesDefaultHyphenation: objc.BOOL) void {
        return objc.msgSend(self, "setUsesDefaultHyphenation:", void, .{usesDefaultHyphenation});
    }

    pub fn usesFontLeading(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "usesFontLeading", objc.BOOL, .{});
    }

    pub fn setUsesFontLeading(self: *@This(), usesFontLeading: objc.BOOL) void {
        return objc.msgSend(self, "setUsesFontLeading:", void, .{usesFontLeading});
    }

    pub fn allowsNonContiguousLayout(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "allowsNonContiguousLayout", objc.BOOL, .{});
    }

    pub fn setAllowsNonContiguousLayout(self: *@This(), allowsNonContiguousLayout: objc.BOOL) void {
        return objc.msgSend(self, "setAllowsNonContiguousLayout:", void, .{allowsNonContiguousLayout});
    }

    pub fn hasNonContiguousLayout(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "hasNonContiguousLayout", objc.BOOL, .{});
    }

    pub fn limitsLayoutForSuspiciousContents(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "limitsLayoutForSuspiciousContents", objc.BOOL, .{});
    }

    pub fn setLimitsLayoutForSuspiciousContents(self: *@This(), limitsLayoutForSuspiciousContents: objc.BOOL) void {
        return objc.msgSend(self, "setLimitsLayoutForSuspiciousContents:", void, .{limitsLayoutForSuspiciousContents});
    }

    pub fn backgroundLayoutEnabled(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "backgroundLayoutEnabled", objc.BOOL, .{});
    }

    pub fn setBackgroundLayoutEnabled(self: *@This(), backgroundLayoutEnabled: objc.BOOL) void {
        return objc.msgSend(self, "setBackgroundLayoutEnabled:", void, .{backgroundLayoutEnabled});
    }

    pub fn defaultAttachmentScaling(self: *@This()) ImageScaling {
        return objc.msgSend(self, "defaultAttachmentScaling", ImageScaling, .{});
    }

    pub fn setDefaultAttachmentScaling(self: *@This(), defaultAttachmentScaling: ImageScaling) void {
        return objc.msgSend(self, "setDefaultAttachmentScaling:", void, .{defaultAttachmentScaling});
    }

    pub fn typesetter(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "typesetter", ?*anyopaque, .{});
    }

    pub fn setTypesetter(self: *@This(), typesetter: ?*anyopaque) void {
        return objc.msgSend(self, "setTypesetter:", void, .{typesetter});
    }

    pub fn typesetterBehavior(self: *@This()) TypesetterBehavior {
        return objc.msgSend(self, "typesetterBehavior", TypesetterBehavior, .{});
    }

    pub fn setTypesetterBehavior(self: *@This(), typesetterBehavior: TypesetterBehavior) void {
        return objc.msgSend(self, "setTypesetterBehavior:", void, .{typesetterBehavior});
    }

    pub fn numberOfGlyphs(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "numberOfGlyphs", objc.NSUInteger, .{});
    }

    pub fn extraLineFragmentRect(self: *@This()) foundation.Rect {
        return objc.msgSend(self, "extraLineFragmentRect", foundation.Rect, .{});
    }

    pub fn extraLineFragmentUsedRect(self: *@This()) foundation.Rect {
        return objc.msgSend(self, "extraLineFragmentUsedRect", foundation.Rect, .{});
    }

    pub fn extraLineFragmentTextContainer(self: *@This()) ?*TextContainer {
        return objc.msgSend(self, "extraLineFragmentTextContainer", ?*TextContainer, .{});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSLayoutManagerDelegate?language=objc
pub const LayoutManagerDelegate = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{objc.NSObject, });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn layoutManagerShouldGenerateGlyphsPropertiesCharacterIndexesFontForGlyphRange(self: *@This(), layoutManager: ?*LayoutManager, glyphs: ?*core_graphics.Glyph, props: ?*GlyphProperty, charIndexes: ?*objc.NSUInteger, aFont: ?*Font, glyphRange: foundation.Range, ) objc.NSUInteger {
        return objc.msgSend(self, "layoutManager:shouldGenerateGlyphs:properties:characterIndexes:font:forGlyphRange:", objc.NSUInteger, .{layoutManager, glyphs, props, charIndexes, aFont, glyphRange, });
    }

    pub fn layoutManagerLineSpacingAfterGlyphAtIndexWithProposedLineFragmentRect(self: *@This(), layoutManager: ?*LayoutManager, glyphIndex: objc.NSUInteger, rect: foundation.Rect) core_foundation.CGFloat {
        return objc.msgSend(self, "layoutManager:lineSpacingAfterGlyphAtIndex:withProposedLineFragmentRect:", core_foundation.CGFloat, .{layoutManager, glyphIndex, rect});
    }

    pub fn layoutManagerParagraphSpacingBeforeGlyphAtIndexWithProposedLineFragmentRect(self: *@This(), layoutManager: ?*LayoutManager, glyphIndex: objc.NSUInteger, rect: foundation.Rect) core_foundation.CGFloat {
        return objc.msgSend(self, "layoutManager:paragraphSpacingBeforeGlyphAtIndex:withProposedLineFragmentRect:", core_foundation.CGFloat, .{layoutManager, glyphIndex, rect});
    }

    pub fn layoutManagerParagraphSpacingAfterGlyphAtIndexWithProposedLineFragmentRect(self: *@This(), layoutManager: ?*LayoutManager, glyphIndex: objc.NSUInteger, rect: foundation.Rect) core_foundation.CGFloat {
        return objc.msgSend(self, "layoutManager:paragraphSpacingAfterGlyphAtIndex:withProposedLineFragmentRect:", core_foundation.CGFloat, .{layoutManager, glyphIndex, rect});
    }

    pub fn layoutManagerShouldUseActionForControlCharacterAtIndex(self: *@This(), layoutManager: ?*LayoutManager, action: ControlCharacterAction, charIndex: objc.NSUInteger) ControlCharacterAction {
        return objc.msgSend(self, "layoutManager:shouldUseAction:forControlCharacterAtIndex:", ControlCharacterAction, .{layoutManager, action, charIndex});
    }

    pub fn layoutManagerShouldBreakLineByWordBeforeCharacterAtIndex(self: *@This(), layoutManager: ?*LayoutManager, charIndex: objc.NSUInteger) objc.BOOL {
        return objc.msgSend(self, "layoutManager:shouldBreakLineByWordBeforeCharacterAtIndex:", objc.BOOL, .{layoutManager, charIndex});
    }

    pub fn layoutManagerShouldBreakLineByHyphenatingBeforeCharacterAtIndex(self: *@This(), layoutManager: ?*LayoutManager, charIndex: objc.NSUInteger) objc.BOOL {
        return objc.msgSend(self, "layoutManager:shouldBreakLineByHyphenatingBeforeCharacterAtIndex:", objc.BOOL, .{layoutManager, charIndex});
    }

    pub fn layoutManagerBoundingBoxForControlGlyphAtIndexForTextContainerProposedLineFragmentGlyphPositionCharacterIndex(self: *@This(), layoutManager: ?*LayoutManager, glyphIndex: objc.NSUInteger, textContainer: ?*TextContainer, proposedRect: foundation.Rect, glyphPosition: foundation.Point, charIndex: objc.NSUInteger, ) foundation.Rect {
        return objc.msgSend(self, "layoutManager:boundingBoxForControlGlyphAtIndex:forTextContainer:proposedLineFragment:glyphPosition:characterIndex:", foundation.Rect, .{layoutManager, glyphIndex, textContainer, proposedRect, glyphPosition, charIndex, });
    }

    pub fn layoutManagerShouldSetLineFragmentRectLineFragmentUsedRectBaselineOffsetInTextContainerForGlyphRange(self: *@This(), layoutManager: ?*LayoutManager, lineFragmentRect: ?*foundation.Rect, lineFragmentUsedRect: ?*foundation.Rect, baselineOffset: ?*core_foundation.CGFloat, textContainer: ?*TextContainer, glyphRange: foundation.Range, ) objc.BOOL {
        return objc.msgSend(self, "layoutManager:shouldSetLineFragmentRect:lineFragmentUsedRect:baselineOffset:inTextContainer:forGlyphRange:", objc.BOOL, .{layoutManager, lineFragmentRect, lineFragmentUsedRect, baselineOffset, textContainer, glyphRange, });
    }

    pub fn layoutManagerDidInvalidateLayout(self: *@This(), sender: ?*LayoutManager) void {
        return objc.msgSend(self, "layoutManagerDidInvalidateLayout:", void, .{sender});
    }

    pub fn layoutManagerDidCompleteLayoutForTextContainerAtEnd(self: *@This(), layoutManager: ?*LayoutManager, textContainer: ?*TextContainer, layoutFinishedFlag: objc.BOOL) void {
        return objc.msgSend(self, "layoutManager:didCompleteLayoutForTextContainer:atEnd:", void, .{layoutManager, textContainer, layoutFinishedFlag});
    }

    pub fn layoutManagerTextContainerDidChangeGeometryFromSize(self: *@This(), layoutManager: ?*LayoutManager, textContainer: ?*TextContainer, oldSize: foundation.Size) void {
        return objc.msgSend(self, "layoutManager:textContainer:didChangeGeometryFromSize:", void, .{layoutManager, textContainer, oldSize});
    }

    pub fn layoutManagerShouldUseTemporaryAttributesForDrawingToScreenAtCharacterIndexEffectiveRange(self: *@This(), layoutManager: ?*LayoutManager, attrs: ?*anyopaque, toScreen: objc.BOOL, charIndex: objc.NSUInteger, effectiveCharRange: foundation.RangePointer, ) ?*anyopaque {
        return objc.msgSend(self, "layoutManager:shouldUseTemporaryAttributes:forDrawingToScreen:atCharacterIndex:effectiveRange:", ?*anyopaque, .{layoutManager, attrs, toScreen, charIndex, effectiveCharRange, });
    }

};

pub const GlyphInscription = enum(objc.NSUInteger) {
    InscribeBase = 0,
    InscribeBelow = 1,
    InscribeAbove = 2,
    InscribeOverstrike = 3,
    InscribeOverBelow = 4,
};

pub const LineSweepDirection = enum(objc.NSUInteger) {
    Left = 0,
    Right = 1,
    Down = 2,
    Up = 3,
};

pub const LineMovementDirection = enum(objc.NSUInteger) {
    DoesntMove = 0,
    MovesLeft = 1,
    MovesRight = 2,
    MovesDown = 3,
    MovesUp = 4,
};

pub const TokenStyle = enum(objc.NSUInteger) {
    Default = 0,
    None = 1,
    Rounded = 2,
    Squared = 3,
    PlainSquared = 4,
};

/// https://developer.apple.com/documentation/AppKit/NSTokenFieldCell?language=objc
pub const TokenFieldCell = opaque {
    pub const InternalInfo = objc.ExternalClass("NSTokenFieldCell", @This(), TextFieldCell, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn tokenStyle(self: *@This()) TokenStyle {
        return objc.msgSend(self, "tokenStyle", TokenStyle, .{});
    }

    pub fn setTokenStyle(self: *@This(), tokenStyle: TokenStyle) void {
        return objc.msgSend(self, "setTokenStyle:", void, .{tokenStyle});
    }

    pub fn completionDelay(self: *@This()) foundation.TimeInterval {
        return objc.msgSend(self, "completionDelay", foundation.TimeInterval, .{});
    }

    pub fn setCompletionDelay(self: *@This(), completionDelay: foundation.TimeInterval) void {
        return objc.msgSend(self, "setCompletionDelay:", void, .{completionDelay});
    }

    pub fn defaultCompletionDelay(self: *@This()) foundation.TimeInterval {
        return objc.msgSend(self, "defaultCompletionDelay", foundation.TimeInterval, .{});
    }

    pub fn tokenizingCharacterSet(self: *@This()) ?*CharacterSet {
        return objc.msgSend(self, "tokenizingCharacterSet", ?*CharacterSet, .{});
    }

    pub fn setTokenizingCharacterSet(self: *@This(), tokenizingCharacterSet: ?*CharacterSet) void {
        return objc.msgSend(self, "setTokenizingCharacterSet:", void, .{tokenizingCharacterSet});
    }

    pub fn defaultTokenizingCharacterSet(self: *@This()) ?*CharacterSet {
        return objc.msgSend(self, "defaultTokenizingCharacterSet", ?*CharacterSet, .{});
    }

    pub fn delegate(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "delegate", ?*anyopaque, .{});
    }

    pub fn setDelegate(self: *@This(), delegate: ?*anyopaque) void {
        return objc.msgSend(self, "setDelegate:", void, .{delegate});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSTokenFieldCellDelegate?language=objc
pub const TokenFieldCellDelegate = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{objc.NSObject, });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn tokenFieldCellCompletionsForSubstringIndexOfTokenIndexOfSelectedItem(self: *@This(), tokenFieldCell: ?*TokenFieldCell, substring: ?*String, tokenIndex: objc.NSInteger, selectedIndex: ?*objc.NSInteger, ) ?*Array {
        return objc.msgSend(self, "tokenFieldCell:completionsForSubstring:indexOfToken:indexOfSelectedItem:", ?*Array, .{tokenFieldCell, substring, tokenIndex, selectedIndex, });
    }

    pub fn tokenFieldCellShouldAddObjectsAtIndex(self: *@This(), tokenFieldCell: ?*TokenFieldCell, tokens: ?*Array, index: objc.NSUInteger) ?*Array {
        return objc.msgSend(self, "tokenFieldCell:shouldAddObjects:atIndex:", ?*Array, .{tokenFieldCell, tokens, index});
    }

    pub fn tokenFieldCellDisplayStringForRepresentedObject(self: *@This(), tokenFieldCell: ?*TokenFieldCell, representedObject: *objc.Id) ?*String {
        return objc.msgSend(self, "tokenFieldCell:displayStringForRepresentedObject:", ?*String, .{tokenFieldCell, representedObject});
    }

    pub fn tokenFieldCellEditingStringForRepresentedObject(self: *@This(), tokenFieldCell: ?*TokenFieldCell, representedObject: *objc.Id) ?*String {
        return objc.msgSend(self, "tokenFieldCell:editingStringForRepresentedObject:", ?*String, .{tokenFieldCell, representedObject});
    }

    pub fn tokenFieldCellRepresentedObjectForEditingString(self: *@This(), tokenFieldCell: ?*TokenFieldCell, editingString: ?*String) *objc.Id {
        return objc.msgSend(self, "tokenFieldCell:representedObjectForEditingString:", *objc.Id, .{tokenFieldCell, editingString});
    }

    pub fn tokenFieldCellWriteRepresentedObjectsToPasteboard(self: *@This(), tokenFieldCell: ?*TokenFieldCell, objects: ?*Array, pboard: ?*Pasteboard) objc.BOOL {
        return objc.msgSend(self, "tokenFieldCell:writeRepresentedObjects:toPasteboard:", objc.BOOL, .{tokenFieldCell, objects, pboard});
    }

    pub fn tokenFieldCellReadFromPasteboard(self: *@This(), tokenFieldCell: ?*TokenFieldCell, pboard: ?*Pasteboard) ?*Array {
        return objc.msgSend(self, "tokenFieldCell:readFromPasteboard:", ?*Array, .{tokenFieldCell, pboard});
    }

    pub fn tokenFieldCellMenuForRepresentedObject(self: *@This(), tokenFieldCell: ?*TokenFieldCell, representedObject: *objc.Id) ?*Menu {
        return objc.msgSend(self, "tokenFieldCell:menuForRepresentedObject:", ?*Menu, .{tokenFieldCell, representedObject});
    }

    pub fn tokenFieldCellHasMenuForRepresentedObject(self: *@This(), tokenFieldCell: ?*TokenFieldCell, representedObject: *objc.Id) objc.BOOL {
        return objc.msgSend(self, "tokenFieldCell:hasMenuForRepresentedObject:", objc.BOOL, .{tokenFieldCell, representedObject});
    }

    pub fn tokenFieldCellStyleForRepresentedObject(self: *@This(), tokenFieldCell: ?*TokenFieldCell, representedObject: *objc.Id) TokenStyle {
        return objc.msgSend(self, "tokenFieldCell:styleForRepresentedObject:", TokenStyle, .{tokenFieldCell, representedObject});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSTokenFieldDelegate?language=objc
pub const TokenFieldDelegate = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{TextFieldDelegate, });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn tokenFieldCompletionsForSubstringIndexOfTokenIndexOfSelectedItem(self: *@This(), tokenField: ?*TokenField, substring: ?*String, tokenIndex: objc.NSInteger, selectedIndex: ?*objc.NSInteger, ) ?*Array {
        return objc.msgSend(self, "tokenField:completionsForSubstring:indexOfToken:indexOfSelectedItem:", ?*Array, .{tokenField, substring, tokenIndex, selectedIndex, });
    }

    pub fn tokenFieldShouldAddObjectsAtIndex(self: *@This(), tokenField: ?*TokenField, tokens: ?*Array, index: objc.NSUInteger) ?*Array {
        return objc.msgSend(self, "tokenField:shouldAddObjects:atIndex:", ?*Array, .{tokenField, tokens, index});
    }

    pub fn tokenFieldDisplayStringForRepresentedObject(self: *@This(), tokenField: ?*TokenField, representedObject: *objc.Id) ?*String {
        return objc.msgSend(self, "tokenField:displayStringForRepresentedObject:", ?*String, .{tokenField, representedObject});
    }

    pub fn tokenFieldEditingStringForRepresentedObject(self: *@This(), tokenField: ?*TokenField, representedObject: *objc.Id) ?*String {
        return objc.msgSend(self, "tokenField:editingStringForRepresentedObject:", ?*String, .{tokenField, representedObject});
    }

    pub fn tokenFieldRepresentedObjectForEditingString(self: *@This(), tokenField: ?*TokenField, editingString: ?*String) *objc.Id {
        return objc.msgSend(self, "tokenField:representedObjectForEditingString:", *objc.Id, .{tokenField, editingString});
    }

    pub fn tokenFieldWriteRepresentedObjectsToPasteboard(self: *@This(), tokenField: ?*TokenField, objects: ?*Array, pboard: ?*Pasteboard) objc.BOOL {
        return objc.msgSend(self, "tokenField:writeRepresentedObjects:toPasteboard:", objc.BOOL, .{tokenField, objects, pboard});
    }

    pub fn tokenFieldReadFromPasteboard(self: *@This(), tokenField: ?*TokenField, pboard: ?*Pasteboard) ?*Array {
        return objc.msgSend(self, "tokenField:readFromPasteboard:", ?*Array, .{tokenField, pboard});
    }

    pub fn tokenFieldMenuForRepresentedObject(self: *@This(), tokenField: ?*TokenField, representedObject: *objc.Id) ?*Menu {
        return objc.msgSend(self, "tokenField:menuForRepresentedObject:", ?*Menu, .{tokenField, representedObject});
    }

    pub fn tokenFieldHasMenuForRepresentedObject(self: *@This(), tokenField: ?*TokenField, representedObject: *objc.Id) objc.BOOL {
        return objc.msgSend(self, "tokenField:hasMenuForRepresentedObject:", objc.BOOL, .{tokenField, representedObject});
    }

    pub fn tokenFieldStyleForRepresentedObject(self: *@This(), tokenField: ?*TokenField, representedObject: *objc.Id) TokenStyle {
        return objc.msgSend(self, "tokenField:styleForRepresentedObject:", TokenStyle, .{tokenField, representedObject});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSTokenField?language=objc
pub const TokenField = opaque {
    pub const InternalInfo = objc.ExternalClass("NSTokenField", @This(), TextField, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn delegate(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "delegate", ?*anyopaque, .{});
    }

    pub fn setDelegate(self: *@This(), delegate: ?*anyopaque) void {
        return objc.msgSend(self, "setDelegate:", void, .{delegate});
    }

    pub fn tokenStyle(self: *@This()) TokenStyle {
        return objc.msgSend(self, "tokenStyle", TokenStyle, .{});
    }

    pub fn setTokenStyle(self: *@This(), tokenStyle: TokenStyle) void {
        return objc.msgSend(self, "setTokenStyle:", void, .{tokenStyle});
    }

    pub fn completionDelay(self: *@This()) foundation.TimeInterval {
        return objc.msgSend(self, "completionDelay", foundation.TimeInterval, .{});
    }

    pub fn setCompletionDelay(self: *@This(), completionDelay: foundation.TimeInterval) void {
        return objc.msgSend(self, "setCompletionDelay:", void, .{completionDelay});
    }

    pub fn defaultCompletionDelay(self: *@This()) foundation.TimeInterval {
        return objc.msgSend(self, "defaultCompletionDelay", foundation.TimeInterval, .{});
    }

    pub fn tokenizingCharacterSet(self: *@This()) ?*CharacterSet {
        return objc.msgSend(self, "tokenizingCharacterSet", ?*CharacterSet, .{});
    }

    pub fn setTokenizingCharacterSet(self: *@This(), tokenizingCharacterSet: ?*CharacterSet) void {
        return objc.msgSend(self, "setTokenizingCharacterSet:", void, .{tokenizingCharacterSet});
    }

    pub fn defaultTokenizingCharacterSet(self: *@This()) ?*CharacterSet {
        return objc.msgSend(self, "defaultTokenizingCharacterSet", ?*CharacterSet, .{});
    }

};

pub const TrackingAreaOptions = enum(objc.NSUInteger) {
    MouseEnteredAndExited = 1,
    MouseMoved = 2,
    CursorUpdate = 4,
    ActiveWhenFirstResponder = 16,
    ActiveInKeyWindow = 32,
    ActiveInActiveApp = 64,
    ActiveAlways = 128,
    AssumeInside = 256,
    InVisibleRect = 512,
    EnabledDuringMouseDrag = 1024,
};

/// https://developer.apple.com/documentation/AppKit/NSTrackingArea?language=objc
pub const TrackingArea = opaque {
    pub const InternalInfo = objc.ExternalClass("NSTrackingArea", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn initWithRectOptionsOwnerUserInfo(self: *@This(), rect: foundation.Rect, options: TrackingAreaOptions, owner: *objc.Id, userInfo: ?*anyopaque, ) *@This() {
        return objc.msgSend(self, "initWithRect:options:owner:userInfo:", *@This(), .{rect, options, owner, userInfo, });
    }

    pub fn rect(self: *@This()) foundation.Rect {
        return objc.msgSend(self, "rect", foundation.Rect, .{});
    }

    pub fn options(self: *@This()) TrackingAreaOptions {
        return objc.msgSend(self, "options", TrackingAreaOptions, .{});
    }

    pub fn owner(self: *@This()) *objc.Id {
        return objc.msgSend(self, "owner", *objc.Id, .{});
    }

    pub fn userInfo(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "userInfo", ?*anyopaque, .{});
    }

};

pub const ToolbarIdentifier = ?*String;

pub const ToolbarItemIdentifier = ?*String;

pub const ToolbarUserInfoKey = ?*String;

pub const ToolbarDisplayMode = enum(objc.NSUInteger) {
    Default = 0,
    IconAndLabel = 1,
    IconOnly = 2,
    LabelOnly = 3,
};

pub const ToolbarSizeMode = enum(objc.NSUInteger) {
    Default = 0,
    Regular = 1,
    Small = 2,
};

/// https://developer.apple.com/documentation/AppKit/NSToolbar?language=objc
pub const Toolbar = opaque {
    pub const InternalInfo = objc.ExternalClass("NSToolbar", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn initWithIdentifier(self: *@This(), identifier: ToolbarIdentifier) *@This() {
        return objc.msgSend(self, "initWithIdentifier:", *@This(), .{identifier});
    }

    pub fn init(self: *@This()) *@This() {
        return objc.msgSend(self, "init", *@This(), .{});
    }

    pub fn insertItemWithItemIdentifierAtIndex(self: *@This(), itemIdentifier: ToolbarItemIdentifier, index: objc.NSInteger) void {
        return objc.msgSend(self, "insertItemWithItemIdentifier:atIndex:", void, .{itemIdentifier, index});
    }

    pub fn removeItemAtIndex(self: *@This(), index: objc.NSInteger) void {
        return objc.msgSend(self, "removeItemAtIndex:", void, .{index});
    }

    pub fn removeItemWithItemIdentifier(self: *@This(), itemIdentifier: ToolbarItemIdentifier) void {
        return objc.msgSend(self, "removeItemWithItemIdentifier:", void, .{itemIdentifier});
    }

    pub fn runCustomizationPalette(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "runCustomizationPalette:", void, .{sender});
    }

    pub fn validateVisibleItems(self: *@This()) void {
        return objc.msgSend(self, "validateVisibleItems", void, .{});
    }

    pub fn delegate(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "delegate", ?*anyopaque, .{});
    }

    pub fn setDelegate(self: *@This(), delegate: ?*anyopaque) void {
        return objc.msgSend(self, "setDelegate:", void, .{delegate});
    }

    pub fn isVisible(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isVisible", objc.BOOL, .{});
    }

    pub fn setVisible(self: *@This(), visible: objc.BOOL) void {
        return objc.msgSend(self, "setVisible:", void, .{visible});
    }

    pub fn customizationPaletteIsRunning(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "customizationPaletteIsRunning", objc.BOOL, .{});
    }

    pub fn displayMode(self: *@This()) ToolbarDisplayMode {
        return objc.msgSend(self, "displayMode", ToolbarDisplayMode, .{});
    }

    pub fn setDisplayMode(self: *@This(), displayMode: ToolbarDisplayMode) void {
        return objc.msgSend(self, "setDisplayMode:", void, .{displayMode});
    }

    pub fn selectedItemIdentifier(self: *@This()) ToolbarItemIdentifier {
        return objc.msgSend(self, "selectedItemIdentifier", ToolbarItemIdentifier, .{});
    }

    pub fn setSelectedItemIdentifier(self: *@This(), selectedItemIdentifier: ToolbarItemIdentifier) void {
        return objc.msgSend(self, "setSelectedItemIdentifier:", void, .{selectedItemIdentifier});
    }

    pub fn allowsUserCustomization(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "allowsUserCustomization", objc.BOOL, .{});
    }

    pub fn setAllowsUserCustomization(self: *@This(), allowsUserCustomization: objc.BOOL) void {
        return objc.msgSend(self, "setAllowsUserCustomization:", void, .{allowsUserCustomization});
    }

    pub fn allowsDisplayModeCustomization(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "allowsDisplayModeCustomization", objc.BOOL, .{});
    }

    pub fn setAllowsDisplayModeCustomization(self: *@This(), allowsDisplayModeCustomization: objc.BOOL) void {
        return objc.msgSend(self, "setAllowsDisplayModeCustomization:", void, .{allowsDisplayModeCustomization});
    }

    pub fn identifier(self: *@This()) ToolbarIdentifier {
        return objc.msgSend(self, "identifier", ToolbarIdentifier, .{});
    }

    pub fn items(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "items", ?*anyopaque, .{});
    }

    pub fn visibleItems(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "visibleItems", ?*anyopaque, .{});
    }

    pub fn itemIdentifiers(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "itemIdentifiers", ?*anyopaque, .{});
    }

    pub fn setItemIdentifiers(self: *@This(), itemIdentifiers: ?*anyopaque) void {
        return objc.msgSend(self, "setItemIdentifiers:", void, .{itemIdentifiers});
    }

    pub fn centeredItemIdentifiers(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "centeredItemIdentifiers", ?*anyopaque, .{});
    }

    pub fn setCenteredItemIdentifiers(self: *@This(), centeredItemIdentifiers: ?*anyopaque) void {
        return objc.msgSend(self, "setCenteredItemIdentifiers:", void, .{centeredItemIdentifiers});
    }

    pub fn autosavesConfiguration(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "autosavesConfiguration", objc.BOOL, .{});
    }

    pub fn setAutosavesConfiguration(self: *@This(), autosavesConfiguration: objc.BOOL) void {
        return objc.msgSend(self, "setAutosavesConfiguration:", void, .{autosavesConfiguration});
    }

    pub fn allowsExtensionItems(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "allowsExtensionItems", objc.BOOL, .{});
    }

    pub fn setAllowsExtensionItems(self: *@This(), allowsExtensionItems: objc.BOOL) void {
        return objc.msgSend(self, "setAllowsExtensionItems:", void, .{allowsExtensionItems});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSToolbarDelegate?language=objc
pub const ToolbarDelegate = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{objc.NSObject, });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn toolbarItemForItemIdentifierWillBeInsertedIntoToolbar(self: *@This(), toolbar: ?*Toolbar, itemIdentifier: ToolbarItemIdentifier, flag: objc.BOOL) ?*ToolbarItem {
        return objc.msgSend(self, "toolbar:itemForItemIdentifier:willBeInsertedIntoToolbar:", ?*ToolbarItem, .{toolbar, itemIdentifier, flag});
    }

    pub fn toolbarDefaultItemIdentifiers(self: *@This(), toolbar: ?*Toolbar) ?*anyopaque {
        return objc.msgSend(self, "toolbarDefaultItemIdentifiers:", ?*anyopaque, .{toolbar});
    }

    pub fn toolbarAllowedItemIdentifiers(self: *@This(), toolbar: ?*Toolbar) ?*anyopaque {
        return objc.msgSend(self, "toolbarAllowedItemIdentifiers:", ?*anyopaque, .{toolbar});
    }

    pub fn toolbarSelectableItemIdentifiers(self: *@This(), toolbar: ?*Toolbar) ?*anyopaque {
        return objc.msgSend(self, "toolbarSelectableItemIdentifiers:", ?*anyopaque, .{toolbar});
    }

    pub fn toolbarImmovableItemIdentifiers(self: *@This(), toolbar: ?*Toolbar) ?*anyopaque {
        return objc.msgSend(self, "toolbarImmovableItemIdentifiers:", ?*anyopaque, .{toolbar});
    }

    pub fn toolbarItemIdentifierCanBeInsertedAtIndex(self: *@This(), toolbar: ?*Toolbar, itemIdentifier: ToolbarItemIdentifier, index: objc.NSInteger) objc.BOOL {
        return objc.msgSend(self, "toolbar:itemIdentifier:canBeInsertedAtIndex:", objc.BOOL, .{toolbar, itemIdentifier, index});
    }

    pub fn toolbarWillAddItem(self: *@This(), notification: ?*Notification) void {
        return objc.msgSend(self, "toolbarWillAddItem:", void, .{notification});
    }

    pub fn toolbarDidRemoveItem(self: *@This(), notification: ?*Notification) void {
        return objc.msgSend(self, "toolbarDidRemoveItem:", void, .{notification});
    }

};

pub const ToolbarItemVisibilityPriority = objc.NSInteger;

/// https://developer.apple.com/documentation/AppKit/NSToolbarItem?language=objc
pub const ToolbarItem = opaque {
    pub const InternalInfo = objc.ExternalClass("NSToolbarItem", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn initWithItemIdentifier(self: *@This(), itemIdentifier: ToolbarItemIdentifier) *@This() {
        return objc.msgSend(self, "initWithItemIdentifier:", *@This(), .{itemIdentifier});
    }

    pub fn validate(self: *@This()) void {
        return objc.msgSend(self, "validate", void, .{});
    }

    pub fn itemIdentifier(self: *@This()) ToolbarItemIdentifier {
        return objc.msgSend(self, "itemIdentifier", ToolbarItemIdentifier, .{});
    }

    pub fn toolbar(self: *@This()) ?*Toolbar {
        return objc.msgSend(self, "toolbar", ?*Toolbar, .{});
    }

    pub fn label(self: *@This()) ?*String {
        return objc.msgSend(self, "label", ?*String, .{});
    }

    pub fn setLabel(self: *@This(), label: ?*String) void {
        return objc.msgSend(self, "setLabel:", void, .{label});
    }

    pub fn paletteLabel(self: *@This()) ?*String {
        return objc.msgSend(self, "paletteLabel", ?*String, .{});
    }

    pub fn setPaletteLabel(self: *@This(), paletteLabel: ?*String) void {
        return objc.msgSend(self, "setPaletteLabel:", void, .{paletteLabel});
    }

    pub fn possibleLabels(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "possibleLabels", ?*anyopaque, .{});
    }

    pub fn setPossibleLabels(self: *@This(), possibleLabels: ?*anyopaque) void {
        return objc.msgSend(self, "setPossibleLabels:", void, .{possibleLabels});
    }

    pub fn toolTip(self: *@This()) ?*String {
        return objc.msgSend(self, "toolTip", ?*String, .{});
    }

    pub fn setToolTip(self: *@This(), toolTip: ?*String) void {
        return objc.msgSend(self, "setToolTip:", void, .{toolTip});
    }

    pub fn menuFormRepresentation(self: *@This()) ?*MenuItem {
        return objc.msgSend(self, "menuFormRepresentation", ?*MenuItem, .{});
    }

    pub fn setMenuFormRepresentation(self: *@This(), menuFormRepresentation: ?*MenuItem) void {
        return objc.msgSend(self, "setMenuFormRepresentation:", void, .{menuFormRepresentation});
    }

    pub fn tag(self: *@This()) objc.NSInteger {
        return objc.msgSend(self, "tag", objc.NSInteger, .{});
    }

    pub fn setTag(self: *@This(), tag: objc.NSInteger) void {
        return objc.msgSend(self, "setTag:", void, .{tag});
    }

    pub fn target(self: *@This()) *objc.Id {
        return objc.msgSend(self, "target", *objc.Id, .{});
    }

    pub fn setTarget(self: *@This(), target: *objc.Id) void {
        return objc.msgSend(self, "setTarget:", void, .{target});
    }

    pub fn action(self: *@This()) *objc.SEL {
        return objc.msgSend(self, "action", *objc.SEL, .{});
    }

    pub fn setAction(self: *@This(), action: *objc.SEL) void {
        return objc.msgSend(self, "setAction:", void, .{action});
    }

    pub fn isEnabled(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isEnabled", objc.BOOL, .{});
    }

    pub fn setEnabled(self: *@This(), enabled: objc.BOOL) void {
        return objc.msgSend(self, "setEnabled:", void, .{enabled});
    }

    pub fn image(self: *@This()) ?*Image {
        return objc.msgSend(self, "image", ?*Image, .{});
    }

    pub fn setImage(self: *@This(), image: ?*Image) void {
        return objc.msgSend(self, "setImage:", void, .{image});
    }

    pub fn title(self: *@This()) ?*String {
        return objc.msgSend(self, "title", ?*String, .{});
    }

    pub fn setTitle(self: *@This(), title: ?*String) void {
        return objc.msgSend(self, "setTitle:", void, .{title});
    }

    pub fn isBordered(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isBordered", objc.BOOL, .{});
    }

    pub fn setBordered(self: *@This(), bordered: objc.BOOL) void {
        return objc.msgSend(self, "setBordered:", void, .{bordered});
    }

    pub fn isNavigational(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isNavigational", objc.BOOL, .{});
    }

    pub fn setNavigational(self: *@This(), navigational: objc.BOOL) void {
        return objc.msgSend(self, "setNavigational:", void, .{navigational});
    }

    pub fn view(self: *@This()) ?*View {
        return objc.msgSend(self, "view", ?*View, .{});
    }

    pub fn setView(self: *@This(), view: ?*View) void {
        return objc.msgSend(self, "setView:", void, .{view});
    }

    pub fn isVisible(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isVisible", objc.BOOL, .{});
    }

    pub fn isHidden(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isHidden", objc.BOOL, .{});
    }

    pub fn setHidden(self: *@This(), hidden: objc.BOOL) void {
        return objc.msgSend(self, "setHidden:", void, .{hidden});
    }

    pub fn minSize(self: *@This()) foundation.Size {
        return objc.msgSend(self, "minSize", foundation.Size, .{});
    }

    pub fn setMinSize(self: *@This(), minSize: foundation.Size) void {
        return objc.msgSend(self, "setMinSize:", void, .{minSize});
    }

    pub fn maxSize(self: *@This()) foundation.Size {
        return objc.msgSend(self, "maxSize", foundation.Size, .{});
    }

    pub fn setMaxSize(self: *@This(), maxSize: foundation.Size) void {
        return objc.msgSend(self, "setMaxSize:", void, .{maxSize});
    }

    pub fn visibilityPriority(self: *@This()) ToolbarItemVisibilityPriority {
        return objc.msgSend(self, "visibilityPriority", ToolbarItemVisibilityPriority, .{});
    }

    pub fn setVisibilityPriority(self: *@This(), visibilityPriority: ToolbarItemVisibilityPriority) void {
        return objc.msgSend(self, "setVisibilityPriority:", void, .{visibilityPriority});
    }

    pub fn autovalidates(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "autovalidates", objc.BOOL, .{});
    }

    pub fn setAutovalidates(self: *@This(), autovalidates: objc.BOOL) void {
        return objc.msgSend(self, "setAutovalidates:", void, .{autovalidates});
    }

    pub fn allowsDuplicatesInToolbar(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "allowsDuplicatesInToolbar", objc.BOOL, .{});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSToolbarItemValidation?language=objc
pub const ToolbarItemValidation = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{objc.NSObject, });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn validateToolbarItem(self: *@This(), item: ?*ToolbarItem) objc.BOOL {
        return objc.msgSend(self, "validateToolbarItem:", objc.BOOL, .{item});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSCloudSharingValidation?language=objc
pub const CloudSharingValidation = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{objc.NSObject, });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn cloudShareForUserInterfaceItem(self: *@This(), item: ?*anyopaque) ?*CKShare {
        return objc.msgSend(self, "cloudShareForUserInterfaceItem:", ?*CKShare, .{item});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSTrackingSeparatorToolbarItem?language=objc
pub const TrackingSeparatorToolbarItem = opaque {
    pub const InternalInfo = objc.ExternalClass("NSTrackingSeparatorToolbarItem", @This(), ToolbarItem, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn trackingSeparatorToolbarItemWithIdentifierSplitViewDividerIndex(self: *@This(), identifier: ToolbarItemIdentifier, splitView: ?*SplitView, dividerIndex: objc.NSInteger) *@This() {
        return objc.msgSend(self, "trackingSeparatorToolbarItemWithIdentifier:splitView:dividerIndex:", *@This(), .{identifier, splitView, dividerIndex});
    }

    pub fn splitView(self: *@This()) ?*SplitView {
        return objc.msgSend(self, "splitView", ?*SplitView, .{});
    }

    pub fn setSplitView(self: *@This(), splitView: ?*SplitView) void {
        return objc.msgSend(self, "setSplitView:", void, .{splitView});
    }

    pub fn dividerIndex(self: *@This()) objc.NSInteger {
        return objc.msgSend(self, "dividerIndex", objc.NSInteger, .{});
    }

    pub fn setDividerIndex(self: *@This(), dividerIndex: objc.NSInteger) void {
        return objc.msgSend(self, "setDividerIndex:", void, .{dividerIndex});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSWindowTab?language=objc
pub const WindowTab = opaque {
    pub const InternalInfo = objc.ExternalClass("NSWindowTab", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn title(self: *@This()) ?*String {
        return objc.msgSend(self, "title", ?*String, .{});
    }

    pub fn setTitle(self: *@This(), title: ?*String) void {
        return objc.msgSend(self, "setTitle:", void, .{title});
    }

    pub fn attributedTitle(self: *@This()) ?*AttributedString {
        return objc.msgSend(self, "attributedTitle", ?*AttributedString, .{});
    }

    pub fn setAttributedTitle(self: *@This(), attributedTitle: ?*AttributedString) void {
        return objc.msgSend(self, "setAttributedTitle:", void, .{attributedTitle});
    }

    pub fn toolTip(self: *@This()) ?*String {
        return objc.msgSend(self, "toolTip", ?*String, .{});
    }

    pub fn setToolTip(self: *@This(), toolTip: ?*String) void {
        return objc.msgSend(self, "setToolTip:", void, .{toolTip});
    }

    pub fn accessoryView(self: *@This()) ?*View {
        return objc.msgSend(self, "accessoryView", ?*View, .{});
    }

    pub fn setAccessoryView(self: *@This(), accessoryView: ?*View) void {
        return objc.msgSend(self, "setAccessoryView:", void, .{accessoryView});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSWindowTabGroup?language=objc
pub const WindowTabGroup = opaque {
    pub const InternalInfo = objc.ExternalClass("NSWindowTabGroup", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn addWindow(self: *@This(), window: ?*Window) void {
        return objc.msgSend(self, "addWindow:", void, .{window});
    }

    pub fn insertWindowAtIndex(self: *@This(), window: ?*Window, index: objc.NSInteger) void {
        return objc.msgSend(self, "insertWindow:atIndex:", void, .{window, index});
    }

    pub fn removeWindow(self: *@This(), window: ?*Window) void {
        return objc.msgSend(self, "removeWindow:", void, .{window});
    }

    pub fn identifier(self: *@This()) WindowTabbingIdentifier {
        return objc.msgSend(self, "identifier", WindowTabbingIdentifier, .{});
    }

    pub fn windows(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "windows", ?*anyopaque, .{});
    }

    pub fn isOverviewVisible(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isOverviewVisible", objc.BOOL, .{});
    }

    pub fn setOverviewVisible(self: *@This(), overviewVisible: objc.BOOL) void {
        return objc.msgSend(self, "setOverviewVisible:", void, .{overviewVisible});
    }

    pub fn isTabBarVisible(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isTabBarVisible", objc.BOOL, .{});
    }

    pub fn selectedWindow(self: *@This()) ?*Window {
        return objc.msgSend(self, "selectedWindow", ?*Window, .{});
    }

    pub fn setSelectedWindow(self: *@This(), selectedWindow: ?*Window) void {
        return objc.msgSend(self, "setSelectedWindow:", void, .{selectedWindow});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSWindowController?language=objc
pub const WindowController = opaque {
    pub const InternalInfo = objc.ExternalClass("NSWindowController", @This(), Responder, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn initWithWindow(self: *@This(), window: ?*Window) *@This() {
        return objc.msgSend(self, "initWithWindow:", *@This(), .{window});
    }

    pub fn initWithCoder(self: *@This(), coder: ?*foundation.Coder) *@This() {
        return objc.msgSend(self, "initWithCoder:", *@This(), .{coder});
    }

    pub fn initWithWindowNibName(self: *@This(), windowNibName: NibName) *@This() {
        return objc.msgSend(self, "initWithWindowNibName:", *@This(), .{windowNibName});
    }

    pub fn initWithWindowNibNameOwner(self: *@This(), windowNibName: NibName, owner: *objc.Id) *@This() {
        return objc.msgSend(self, "initWithWindowNibName:owner:", *@This(), .{windowNibName, owner});
    }

    pub fn initWithWindowNibPathOwner(self: *@This(), windowNibPath: ?*String, owner: *objc.Id) *@This() {
        return objc.msgSend(self, "initWithWindowNibPath:owner:", *@This(), .{windowNibPath, owner});
    }

    pub fn setDocumentEdited(self: *@This(), dirtyFlag: objc.BOOL) void {
        return objc.msgSend(self, "setDocumentEdited:", void, .{dirtyFlag});
    }

    pub fn synchronizeWindowTitleWithDocumentName(self: *@This()) void {
        return objc.msgSend(self, "synchronizeWindowTitleWithDocumentName", void, .{});
    }

    pub fn windowTitleForDocumentDisplayName(self: *@This(), displayName: ?*String) ?*String {
        return objc.msgSend(self, "windowTitleForDocumentDisplayName:", ?*String, .{displayName});
    }

    pub fn windowWillLoad(self: *@This()) void {
        return objc.msgSend(self, "windowWillLoad", void, .{});
    }

    pub fn windowDidLoad(self: *@This()) void {
        return objc.msgSend(self, "windowDidLoad", void, .{});
    }

    pub fn loadWindow(self: *@This()) void {
        return objc.msgSend(self, "loadWindow", void, .{});
    }

    pub fn close(self: *@This()) void {
        return objc.msgSend(self, "close", void, .{});
    }

    pub fn showWindow(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "showWindow:", void, .{sender});
    }

    pub fn windowNibName(self: *@This()) NibName {
        return objc.msgSend(self, "windowNibName", NibName, .{});
    }

    pub fn windowNibPath(self: *@This()) ?*String {
        return objc.msgSend(self, "windowNibPath", ?*String, .{});
    }

    pub fn owner(self: *@This()) *objc.Id {
        return objc.msgSend(self, "owner", *objc.Id, .{});
    }

    pub fn windowFrameAutosaveName(self: *@This()) WindowFrameAutosaveName {
        return objc.msgSend(self, "windowFrameAutosaveName", WindowFrameAutosaveName, .{});
    }

    pub fn setWindowFrameAutosaveName(self: *@This(), windowFrameAutosaveName: WindowFrameAutosaveName) void {
        return objc.msgSend(self, "setWindowFrameAutosaveName:", void, .{windowFrameAutosaveName});
    }

    pub fn shouldCascadeWindows(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "shouldCascadeWindows", objc.BOOL, .{});
    }

    pub fn setShouldCascadeWindows(self: *@This(), shouldCascadeWindows: objc.BOOL) void {
        return objc.msgSend(self, "setShouldCascadeWindows:", void, .{shouldCascadeWindows});
    }

    pub fn previewRepresentableActivityItems(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "previewRepresentableActivityItems", ?*anyopaque, .{});
    }

    pub fn setPreviewRepresentableActivityItems(self: *@This(), previewRepresentableActivityItems: ?*anyopaque) void {
        return objc.msgSend(self, "setPreviewRepresentableActivityItems:", void, .{previewRepresentableActivityItems});
    }

    pub fn document(self: *@This()) *objc.Id {
        return objc.msgSend(self, "document", *objc.Id, .{});
    }

    pub fn setDocument(self: *@This(), document: *objc.Id) void {
        return objc.msgSend(self, "setDocument:", void, .{document});
    }

    pub fn shouldCloseDocument(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "shouldCloseDocument", objc.BOOL, .{});
    }

    pub fn setShouldCloseDocument(self: *@This(), shouldCloseDocument: objc.BOOL) void {
        return objc.msgSend(self, "setShouldCloseDocument:", void, .{shouldCloseDocument});
    }

    pub fn contentViewController(self: *@This()) ?*ViewController {
        return objc.msgSend(self, "contentViewController", ?*ViewController, .{});
    }

    pub fn setContentViewController(self: *@This(), contentViewController: ?*ViewController) void {
        return objc.msgSend(self, "setContentViewController:", void, .{contentViewController});
    }

    pub fn window(self: *@This()) ?*Window {
        return objc.msgSend(self, "window", ?*Window, .{});
    }

    pub fn setWindow(self: *@This(), window: ?*Window) void {
        return objc.msgSend(self, "setWindow:", void, .{window});
    }

    pub fn isWindowLoaded(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isWindowLoaded", objc.BOOL, .{});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSComboBoxDataSource?language=objc
pub const ComboBoxDataSource = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{objc.NSObject, });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn numberOfItemsInComboBox(self: *@This(), comboBox: ?*ComboBox) objc.NSInteger {
        return objc.msgSend(self, "numberOfItemsInComboBox:", objc.NSInteger, .{comboBox});
    }

    pub fn comboBoxObjectValueForItemAtIndex(self: *@This(), comboBox: ?*ComboBox, index: objc.NSInteger) *objc.Id {
        return objc.msgSend(self, "comboBox:objectValueForItemAtIndex:", *objc.Id, .{comboBox, index});
    }

    pub fn comboBoxIndexOfItemWithStringValue(self: *@This(), comboBox: ?*ComboBox, string: ?*String) objc.NSUInteger {
        return objc.msgSend(self, "comboBox:indexOfItemWithStringValue:", objc.NSUInteger, .{comboBox, string});
    }

    pub fn comboBoxCompletedString(self: *@This(), comboBox: ?*ComboBox, string: ?*String) ?*String {
        return objc.msgSend(self, "comboBox:completedString:", ?*String, .{comboBox, string});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSComboBoxDelegate?language=objc
pub const ComboBoxDelegate = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{TextFieldDelegate, });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn comboBoxWillPopUp(self: *@This(), notification: ?*Notification) void {
        return objc.msgSend(self, "comboBoxWillPopUp:", void, .{notification});
    }

    pub fn comboBoxWillDismiss(self: *@This(), notification: ?*Notification) void {
        return objc.msgSend(self, "comboBoxWillDismiss:", void, .{notification});
    }

    pub fn comboBoxSelectionDidChange(self: *@This(), notification: ?*Notification) void {
        return objc.msgSend(self, "comboBoxSelectionDidChange:", void, .{notification});
    }

    pub fn comboBoxSelectionIsChanging(self: *@This(), notification: ?*Notification) void {
        return objc.msgSend(self, "comboBoxSelectionIsChanging:", void, .{notification});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSComboBox?language=objc
pub const ComboBox = opaque {
    pub const InternalInfo = objc.ExternalClass("NSComboBox", @This(), TextField, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn reloadData(self: *@This()) void {
        return objc.msgSend(self, "reloadData", void, .{});
    }

    pub fn noteNumberOfItemsChanged(self: *@This()) void {
        return objc.msgSend(self, "noteNumberOfItemsChanged", void, .{});
    }

    pub fn scrollItemAtIndexToTop(self: *@This(), index: objc.NSInteger) void {
        return objc.msgSend(self, "scrollItemAtIndexToTop:", void, .{index});
    }

    pub fn scrollItemAtIndexToVisible(self: *@This(), index: objc.NSInteger) void {
        return objc.msgSend(self, "scrollItemAtIndexToVisible:", void, .{index});
    }

    pub fn selectItemAtIndex(self: *@This(), index: objc.NSInteger) void {
        return objc.msgSend(self, "selectItemAtIndex:", void, .{index});
    }

    pub fn deselectItemAtIndex(self: *@This(), index: objc.NSInteger) void {
        return objc.msgSend(self, "deselectItemAtIndex:", void, .{index});
    }

    pub fn addItemWithObjectValue(self: *@This(), object: *objc.Id) void {
        return objc.msgSend(self, "addItemWithObjectValue:", void, .{object});
    }

    pub fn addItemsWithObjectValues(self: *@This(), objects: ?*Array) void {
        return objc.msgSend(self, "addItemsWithObjectValues:", void, .{objects});
    }

    pub fn insertItemWithObjectValueAtIndex(self: *@This(), object: *objc.Id, index: objc.NSInteger) void {
        return objc.msgSend(self, "insertItemWithObjectValue:atIndex:", void, .{object, index});
    }

    pub fn removeItemWithObjectValue(self: *@This(), object: *objc.Id) void {
        return objc.msgSend(self, "removeItemWithObjectValue:", void, .{object});
    }

    pub fn removeItemAtIndex(self: *@This(), index: objc.NSInteger) void {
        return objc.msgSend(self, "removeItemAtIndex:", void, .{index});
    }

    pub fn removeAllItems(self: *@This()) void {
        return objc.msgSend(self, "removeAllItems", void, .{});
    }

    pub fn selectItemWithObjectValue(self: *@This(), object: *objc.Id) void {
        return objc.msgSend(self, "selectItemWithObjectValue:", void, .{object});
    }

    pub fn itemObjectValueAtIndex(self: *@This(), index: objc.NSInteger) *objc.Id {
        return objc.msgSend(self, "itemObjectValueAtIndex:", *objc.Id, .{index});
    }

    pub fn indexOfItemWithObjectValue(self: *@This(), object: *objc.Id) objc.NSInteger {
        return objc.msgSend(self, "indexOfItemWithObjectValue:", objc.NSInteger, .{object});
    }

    pub fn hasVerticalScroller(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "hasVerticalScroller", objc.BOOL, .{});
    }

    pub fn setHasVerticalScroller(self: *@This(), hasVerticalScroller: objc.BOOL) void {
        return objc.msgSend(self, "setHasVerticalScroller:", void, .{hasVerticalScroller});
    }

    pub fn intercellSpacing(self: *@This()) foundation.Size {
        return objc.msgSend(self, "intercellSpacing", foundation.Size, .{});
    }

    pub fn setIntercellSpacing(self: *@This(), intercellSpacing: foundation.Size) void {
        return objc.msgSend(self, "setIntercellSpacing:", void, .{intercellSpacing});
    }

    pub fn itemHeight(self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(self, "itemHeight", core_foundation.CGFloat, .{});
    }

    pub fn setItemHeight(self: *@This(), itemHeight: core_foundation.CGFloat) void {
        return objc.msgSend(self, "setItemHeight:", void, .{itemHeight});
    }

    pub fn numberOfVisibleItems(self: *@This()) objc.NSInteger {
        return objc.msgSend(self, "numberOfVisibleItems", objc.NSInteger, .{});
    }

    pub fn setNumberOfVisibleItems(self: *@This(), numberOfVisibleItems: objc.NSInteger) void {
        return objc.msgSend(self, "setNumberOfVisibleItems:", void, .{numberOfVisibleItems});
    }

    pub fn isButtonBordered(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isButtonBordered", objc.BOOL, .{});
    }

    pub fn setButtonBordered(self: *@This(), buttonBordered: objc.BOOL) void {
        return objc.msgSend(self, "setButtonBordered:", void, .{buttonBordered});
    }

    pub fn usesDataSource(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "usesDataSource", objc.BOOL, .{});
    }

    pub fn setUsesDataSource(self: *@This(), usesDataSource: objc.BOOL) void {
        return objc.msgSend(self, "setUsesDataSource:", void, .{usesDataSource});
    }

    pub fn indexOfSelectedItem(self: *@This()) objc.NSInteger {
        return objc.msgSend(self, "indexOfSelectedItem", objc.NSInteger, .{});
    }

    pub fn numberOfItems(self: *@This()) objc.NSInteger {
        return objc.msgSend(self, "numberOfItems", objc.NSInteger, .{});
    }

    pub fn completes(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "completes", objc.BOOL, .{});
    }

    pub fn setCompletes(self: *@This(), completes: objc.BOOL) void {
        return objc.msgSend(self, "setCompletes:", void, .{completes});
    }

    pub fn delegate(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "delegate", ?*anyopaque, .{});
    }

    pub fn setDelegate(self: *@This(), delegate: ?*anyopaque) void {
        return objc.msgSend(self, "setDelegate:", void, .{delegate});
    }

    pub fn dataSource(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "dataSource", ?*anyopaque, .{});
    }

    pub fn setDataSource(self: *@This(), dataSource: ?*anyopaque) void {
        return objc.msgSend(self, "setDataSource:", void, .{dataSource});
    }

    pub fn objectValueOfSelectedItem(self: *@This()) *objc.Id {
        return objc.msgSend(self, "objectValueOfSelectedItem", *objc.Id, .{});
    }

    pub fn objectValues(self: *@This()) ?*Array {
        return objc.msgSend(self, "objectValues", ?*Array, .{});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSComboBoxCell?language=objc
pub const ComboBoxCell = opaque {
    pub const InternalInfo = objc.ExternalClass("NSComboBoxCell", @This(), TextFieldCell, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn reloadData(self: *@This()) void {
        return objc.msgSend(self, "reloadData", void, .{});
    }

    pub fn noteNumberOfItemsChanged(self: *@This()) void {
        return objc.msgSend(self, "noteNumberOfItemsChanged", void, .{});
    }

    pub fn scrollItemAtIndexToTop(self: *@This(), index: objc.NSInteger) void {
        return objc.msgSend(self, "scrollItemAtIndexToTop:", void, .{index});
    }

    pub fn scrollItemAtIndexToVisible(self: *@This(), index: objc.NSInteger) void {
        return objc.msgSend(self, "scrollItemAtIndexToVisible:", void, .{index});
    }

    pub fn selectItemAtIndex(self: *@This(), index: objc.NSInteger) void {
        return objc.msgSend(self, "selectItemAtIndex:", void, .{index});
    }

    pub fn deselectItemAtIndex(self: *@This(), index: objc.NSInteger) void {
        return objc.msgSend(self, "deselectItemAtIndex:", void, .{index});
    }

    pub fn completedString(self: *@This(), string: ?*String) ?*String {
        return objc.msgSend(self, "completedString:", ?*String, .{string});
    }

    pub fn addItemWithObjectValue(self: *@This(), object: *objc.Id) void {
        return objc.msgSend(self, "addItemWithObjectValue:", void, .{object});
    }

    pub fn addItemsWithObjectValues(self: *@This(), objects: ?*Array) void {
        return objc.msgSend(self, "addItemsWithObjectValues:", void, .{objects});
    }

    pub fn insertItemWithObjectValueAtIndex(self: *@This(), object: *objc.Id, index: objc.NSInteger) void {
        return objc.msgSend(self, "insertItemWithObjectValue:atIndex:", void, .{object, index});
    }

    pub fn removeItemWithObjectValue(self: *@This(), object: *objc.Id) void {
        return objc.msgSend(self, "removeItemWithObjectValue:", void, .{object});
    }

    pub fn removeItemAtIndex(self: *@This(), index: objc.NSInteger) void {
        return objc.msgSend(self, "removeItemAtIndex:", void, .{index});
    }

    pub fn removeAllItems(self: *@This()) void {
        return objc.msgSend(self, "removeAllItems", void, .{});
    }

    pub fn selectItemWithObjectValue(self: *@This(), object: *objc.Id) void {
        return objc.msgSend(self, "selectItemWithObjectValue:", void, .{object});
    }

    pub fn itemObjectValueAtIndex(self: *@This(), index: objc.NSInteger) *objc.Id {
        return objc.msgSend(self, "itemObjectValueAtIndex:", *objc.Id, .{index});
    }

    pub fn indexOfItemWithObjectValue(self: *@This(), object: *objc.Id) objc.NSInteger {
        return objc.msgSend(self, "indexOfItemWithObjectValue:", objc.NSInteger, .{object});
    }

    pub fn hasVerticalScroller(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "hasVerticalScroller", objc.BOOL, .{});
    }

    pub fn setHasVerticalScroller(self: *@This(), hasVerticalScroller: objc.BOOL) void {
        return objc.msgSend(self, "setHasVerticalScroller:", void, .{hasVerticalScroller});
    }

    pub fn intercellSpacing(self: *@This()) foundation.Size {
        return objc.msgSend(self, "intercellSpacing", foundation.Size, .{});
    }

    pub fn setIntercellSpacing(self: *@This(), intercellSpacing: foundation.Size) void {
        return objc.msgSend(self, "setIntercellSpacing:", void, .{intercellSpacing});
    }

    pub fn itemHeight(self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(self, "itemHeight", core_foundation.CGFloat, .{});
    }

    pub fn setItemHeight(self: *@This(), itemHeight: core_foundation.CGFloat) void {
        return objc.msgSend(self, "setItemHeight:", void, .{itemHeight});
    }

    pub fn numberOfVisibleItems(self: *@This()) objc.NSInteger {
        return objc.msgSend(self, "numberOfVisibleItems", objc.NSInteger, .{});
    }

    pub fn setNumberOfVisibleItems(self: *@This(), numberOfVisibleItems: objc.NSInteger) void {
        return objc.msgSend(self, "setNumberOfVisibleItems:", void, .{numberOfVisibleItems});
    }

    pub fn isButtonBordered(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isButtonBordered", objc.BOOL, .{});
    }

    pub fn setButtonBordered(self: *@This(), buttonBordered: objc.BOOL) void {
        return objc.msgSend(self, "setButtonBordered:", void, .{buttonBordered});
    }

    pub fn usesDataSource(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "usesDataSource", objc.BOOL, .{});
    }

    pub fn setUsesDataSource(self: *@This(), usesDataSource: objc.BOOL) void {
        return objc.msgSend(self, "setUsesDataSource:", void, .{usesDataSource});
    }

    pub fn indexOfSelectedItem(self: *@This()) objc.NSInteger {
        return objc.msgSend(self, "indexOfSelectedItem", objc.NSInteger, .{});
    }

    pub fn numberOfItems(self: *@This()) objc.NSInteger {
        return objc.msgSend(self, "numberOfItems", objc.NSInteger, .{});
    }

    pub fn completes(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "completes", objc.BOOL, .{});
    }

    pub fn setCompletes(self: *@This(), completes: objc.BOOL) void {
        return objc.msgSend(self, "setCompletes:", void, .{completes});
    }

    pub fn dataSource(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "dataSource", ?*anyopaque, .{});
    }

    pub fn setDataSource(self: *@This(), dataSource: ?*anyopaque) void {
        return objc.msgSend(self, "setDataSource:", void, .{dataSource});
    }

    pub fn objectValueOfSelectedItem(self: *@This()) *objc.Id {
        return objc.msgSend(self, "objectValueOfSelectedItem", *objc.Id, .{});
    }

    pub fn objectValues(self: *@This()) ?*Array {
        return objc.msgSend(self, "objectValues", ?*Array, .{});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSComboBoxCellDataSource?language=objc
pub const ComboBoxCellDataSource = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{objc.NSObject, });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn numberOfItemsInComboBoxCell(self: *@This(), comboBoxCell: ?*ComboBoxCell) objc.NSInteger {
        return objc.msgSend(self, "numberOfItemsInComboBoxCell:", objc.NSInteger, .{comboBoxCell});
    }

    pub fn comboBoxCellObjectValueForItemAtIndex(self: *@This(), comboBoxCell: ?*ComboBoxCell, index: objc.NSInteger) *objc.Id {
        return objc.msgSend(self, "comboBoxCell:objectValueForItemAtIndex:", *objc.Id, .{comboBoxCell, index});
    }

    pub fn comboBoxCellIndexOfItemWithStringValue(self: *@This(), comboBoxCell: ?*ComboBoxCell, string: ?*String) objc.NSUInteger {
        return objc.msgSend(self, "comboBoxCell:indexOfItemWithStringValue:", objc.NSUInteger, .{comboBoxCell, string});
    }

    pub fn comboBoxCellCompletedString(self: *@This(), comboBoxCell: ?*ComboBoxCell, uncompletedString: ?*String) ?*String {
        return objc.msgSend(self, "comboBoxCell:completedString:", ?*String, .{comboBoxCell, uncompletedString});
    }

};

pub const ComboButtonStyle = enum(objc.NSInteger) {
    Split = 0,
    Unified = 1,
};

/// https://developer.apple.com/documentation/AppKit/NSComboButton?language=objc
pub const ComboButton = opaque {
    pub const InternalInfo = objc.ExternalClass("NSComboButton", @This(), Control, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn comboButtonWithTitleMenuTargetAction(self: *@This(), title: ?*String, menu: ?*Menu, target: *objc.Id, action: *objc.SEL, ) *@This() {
        return objc.msgSend(self, "comboButtonWithTitle:menu:target:action:", *@This(), .{title, menu, target, action, });
    }

    pub fn comboButtonWithImageMenuTargetAction(self: *@This(), image: ?*Image, menu: ?*Menu, target: *objc.Id, action: *objc.SEL, ) *@This() {
        return objc.msgSend(self, "comboButtonWithImage:menu:target:action:", *@This(), .{image, menu, target, action, });
    }

    pub fn comboButtonWithTitleImageMenuTargetAction(self: *@This(), title: ?*String, image: ?*Image, menu: ?*Menu, target: *objc.Id, action: *objc.SEL, ) *@This() {
        return objc.msgSend(self, "comboButtonWithTitle:image:menu:target:action:", *@This(), .{title, image, menu, target, action, });
    }

    pub fn title(self: *@This()) ?*String {
        return objc.msgSend(self, "title", ?*String, .{});
    }

    pub fn setTitle(self: *@This(), title: ?*String) void {
        return objc.msgSend(self, "setTitle:", void, .{title});
    }

    pub fn image(self: *@This()) ?*Image {
        return objc.msgSend(self, "image", ?*Image, .{});
    }

    pub fn setImage(self: *@This(), image: ?*Image) void {
        return objc.msgSend(self, "setImage:", void, .{image});
    }

    pub fn imageScaling(self: *@This()) ImageScaling {
        return objc.msgSend(self, "imageScaling", ImageScaling, .{});
    }

    pub fn setImageScaling(self: *@This(), imageScaling: ImageScaling) void {
        return objc.msgSend(self, "setImageScaling:", void, .{imageScaling});
    }

    pub fn menu(self: *@This()) ?*Menu {
        return objc.msgSend(self, "menu", ?*Menu, .{});
    }

    pub fn setMenu(self: *@This(), menu: ?*Menu) void {
        return objc.msgSend(self, "setMenu:", void, .{menu});
    }

    pub fn style(self: *@This()) ComboButtonStyle {
        return objc.msgSend(self, "style", ComboButtonStyle, .{});
    }

    pub fn setStyle(self: *@This(), style: ComboButtonStyle) void {
        return objc.msgSend(self, "setStyle:", void, .{style});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSTextInput?language=objc
pub const TextInput = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn insertText(self: *@This(), string: *objc.Id) void {
        return objc.msgSend(self, "insertText:", void, .{string});
    }

    pub fn doCommandBySelector(self: *@This(), selector: *objc.SEL) void {
        return objc.msgSend(self, "doCommandBySelector:", void, .{selector});
    }

    pub fn setMarkedTextSelectedRange(self: *@This(), string: *objc.Id, selRange: foundation.Range) void {
        return objc.msgSend(self, "setMarkedText:selectedRange:", void, .{string, selRange});
    }

    pub fn unmarkText(self: *@This()) void {
        return objc.msgSend(self, "unmarkText", void, .{});
    }

    pub fn hasMarkedText(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "hasMarkedText", objc.BOOL, .{});
    }

    pub fn conversationIdentifier(self: *@This()) objc.NSInteger {
        return objc.msgSend(self, "conversationIdentifier", objc.NSInteger, .{});
    }

    pub fn attributedSubstringFromRange(self: *@This(), range: foundation.Range) ?*AttributedString {
        return objc.msgSend(self, "attributedSubstringFromRange:", ?*AttributedString, .{range});
    }

    pub fn markedRange(self: *@This()) foundation.Range {
        return objc.msgSend(self, "markedRange", foundation.Range, .{});
    }

    pub fn selectedRange(self: *@This()) foundation.Range {
        return objc.msgSend(self, "selectedRange", foundation.Range, .{});
    }

    pub fn firstRectForCharacterRange(self: *@This(), range: foundation.Range) foundation.Rect {
        return objc.msgSend(self, "firstRectForCharacterRange:", foundation.Rect, .{range});
    }

    pub fn characterIndexForPoint(self: *@This(), point: foundation.Point) objc.NSUInteger {
        return objc.msgSend(self, "characterIndexForPoint:", objc.NSUInteger, .{point});
    }

    pub fn validAttributesForMarkedText(self: *@This()) ?*Array {
        return objc.msgSend(self, "validAttributesForMarkedText", ?*Array, .{});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSInputManager?language=objc
pub const InputManager = opaque {
    pub const InternalInfo = objc.ExternalClass("NSInputManager", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn currentInputManager(self: *@This()) ?*InputManager {
        return objc.msgSend(self, "currentInputManager", ?*InputManager, .{});
    }

    pub fn cycleToNextInputLanguage(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "cycleToNextInputLanguage:", void, .{sender});
    }

    pub fn cycleToNextInputServerInLanguage(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "cycleToNextInputServerInLanguage:", void, .{sender});
    }

    pub fn initWithNameHost(self: *@This(), inputServerName: ?*String, hostName: ?*String) ?*InputManager {
        return objc.msgSend(self, "initWithName:host:", ?*InputManager, .{inputServerName, hostName});
    }

    pub fn localizedInputManagerName(self: *@This()) ?*String {
        return objc.msgSend(self, "localizedInputManagerName", ?*String, .{});
    }

    pub fn markedTextAbandoned(self: *@This(), cli: *objc.Id) void {
        return objc.msgSend(self, "markedTextAbandoned:", void, .{cli});
    }

    pub fn markedTextSelectionChangedClient(self: *@This(), newSel: foundation.Range, cli: *objc.Id) void {
        return objc.msgSend(self, "markedTextSelectionChanged:client:", void, .{newSel, cli});
    }

    pub fn wantsToInterpretAllKeystrokes(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "wantsToInterpretAllKeystrokes", objc.BOOL, .{});
    }

    pub fn language(self: *@This()) ?*String {
        return objc.msgSend(self, "language", ?*String, .{});
    }

    pub fn image(self: *@This()) ?*Image {
        return objc.msgSend(self, "image", ?*Image, .{});
    }

    pub fn server(self: *@This()) ?*InputServer {
        return objc.msgSend(self, "server", ?*InputServer, .{});
    }

    pub fn wantsToHandleMouseEvents(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "wantsToHandleMouseEvents", objc.BOOL, .{});
    }

    pub fn handleMouseEvent(self: *@This(), mouseEvent: ?*Event) objc.BOOL {
        return objc.msgSend(self, "handleMouseEvent:", objc.BOOL, .{mouseEvent});
    }

    pub fn wantsToDelayTextChangeNotifications(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "wantsToDelayTextChangeNotifications", objc.BOOL, .{});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSTextAttachmentLayout?language=objc
pub const TextAttachmentLayout = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{objc.NSObject, });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn imageForBoundsAttributesLocationTextContainer(self: *@This(), bounds: core_foundation.CGRect, attributes: ?*anyopaque, location: ?*anyopaque, textContainer: ?*TextContainer, ) ?*Image {
        return objc.msgSend(self, "imageForBounds:attributes:location:textContainer:", ?*Image, .{bounds, attributes, location, textContainer, });
    }

    pub fn attachmentBoundsForAttributesLocationTextContainerProposedLineFragmentPosition(self: *@This(), attributes: ?*anyopaque, location: ?*anyopaque, textContainer: ?*TextContainer, proposedLineFragment: core_foundation.CGRect, position: core_foundation.CGPoint, ) core_foundation.CGRect {
        return objc.msgSend(self, "attachmentBoundsForAttributes:location:textContainer:proposedLineFragment:position:", core_foundation.CGRect, .{attributes, location, textContainer, proposedLineFragment, position, });
    }

    pub fn viewProviderForParentViewLocationTextContainer(self: *@This(), parentView: ?*View, location: ?*anyopaque, textContainer: ?*TextContainer) ?*TextAttachmentViewProvider {
        return objc.msgSend(self, "viewProviderForParentView:location:textContainer:", ?*TextAttachmentViewProvider, .{parentView, location, textContainer});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSTextAttachment?language=objc
pub const TextAttachment = opaque {
    pub const InternalInfo = objc.ExternalClass("NSTextAttachment", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn initWithDataOfType(self: *@This(), contentData: ?*Data, uti: ?*String) *@This() {
        return objc.msgSend(self, "initWithData:ofType:", *@This(), .{contentData, uti});
    }

    pub fn initWithFileWrapper(self: *@This(), fileWrapper: ?*FileWrapper) *@This() {
        return objc.msgSend(self, "initWithFileWrapper:", *@This(), .{fileWrapper});
    }

    pub fn textAttachmentViewProviderClassForFileType(self: *@This(), fileType: ?*String) *objc.Class {
        return objc.msgSend(self, "textAttachmentViewProviderClassForFileType:", *objc.Class, .{fileType});
    }

    pub fn registerTextAttachmentViewProviderClassForFileType(self: *@This(), textAttachmentViewProviderClass: *objc.Class, fileType: ?*String) void {
        return objc.msgSend(self, "registerTextAttachmentViewProviderClass:forFileType:", void, .{textAttachmentViewProviderClass, fileType});
    }

    pub fn contents(self: *@This()) ?*Data {
        return objc.msgSend(self, "contents", ?*Data, .{});
    }

    pub fn setContents(self: *@This(), contents: ?*Data) void {
        return objc.msgSend(self, "setContents:", void, .{contents});
    }

    pub fn fileType(self: *@This()) ?*String {
        return objc.msgSend(self, "fileType", ?*String, .{});
    }

    pub fn setFileType(self: *@This(), fileType: ?*String) void {
        return objc.msgSend(self, "setFileType:", void, .{fileType});
    }

    pub fn image(self: *@This()) ?*Image {
        return objc.msgSend(self, "image", ?*Image, .{});
    }

    pub fn setImage(self: *@This(), image: ?*Image) void {
        return objc.msgSend(self, "setImage:", void, .{image});
    }

    pub fn bounds(self: *@This()) core_foundation.CGRect {
        return objc.msgSend(self, "bounds", core_foundation.CGRect, .{});
    }

    pub fn setBounds(self: *@This(), bounds: core_foundation.CGRect) void {
        return objc.msgSend(self, "setBounds:", void, .{bounds});
    }

    pub fn fileWrapper(self: *@This()) ?*FileWrapper {
        return objc.msgSend(self, "fileWrapper", ?*FileWrapper, .{});
    }

    pub fn setFileWrapper(self: *@This(), fileWrapper: ?*FileWrapper) void {
        return objc.msgSend(self, "setFileWrapper:", void, .{fileWrapper});
    }

    pub fn attachmentCell(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "attachmentCell", ?*anyopaque, .{});
    }

    pub fn setAttachmentCell(self: *@This(), attachmentCell: ?*anyopaque) void {
        return objc.msgSend(self, "setAttachmentCell:", void, .{attachmentCell});
    }

    pub fn lineLayoutPadding(self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(self, "lineLayoutPadding", core_foundation.CGFloat, .{});
    }

    pub fn setLineLayoutPadding(self: *@This(), lineLayoutPadding: core_foundation.CGFloat) void {
        return objc.msgSend(self, "setLineLayoutPadding:", void, .{lineLayoutPadding});
    }

    pub fn allowsTextAttachmentView(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "allowsTextAttachmentView", objc.BOOL, .{});
    }

    pub fn setAllowsTextAttachmentView(self: *@This(), allowsTextAttachmentView: objc.BOOL) void {
        return objc.msgSend(self, "setAllowsTextAttachmentView:", void, .{allowsTextAttachmentView});
    }

    pub fn usesTextAttachmentView(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "usesTextAttachmentView", objc.BOOL, .{});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSTextAttachmentViewProvider?language=objc
pub const TextAttachmentViewProvider = opaque {
    pub const InternalInfo = objc.ExternalClass("NSTextAttachmentViewProvider", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn initWithTextAttachmentParentViewTextLayoutManagerLocation(self: *@This(), textAttachment: ?*TextAttachment, parentView: ?*View, textLayoutManager: ?*TextLayoutManager, location: ?*anyopaque, ) *@This() {
        return objc.msgSend(self, "initWithTextAttachment:parentView:textLayoutManager:location:", *@This(), .{textAttachment, parentView, textLayoutManager, location, });
    }

    pub fn init(self: *@This()) *@This() {
        return objc.msgSend(self, "init", *@This(), .{});
    }

    pub fn new(self: *@This()) *@This() {
        return objc.msgSend(self, "new", *@This(), .{});
    }

    pub fn loadView(self: *@This()) void {
        return objc.msgSend(self, "loadView", void, .{});
    }

    pub fn attachmentBoundsForAttributesLocationTextContainerProposedLineFragmentPosition(self: *@This(), attributes: ?*anyopaque, location: ?*anyopaque, textContainer: ?*TextContainer, proposedLineFragment: core_foundation.CGRect, position: core_foundation.CGPoint, ) core_foundation.CGRect {
        return objc.msgSend(self, "attachmentBoundsForAttributes:location:textContainer:proposedLineFragment:position:", core_foundation.CGRect, .{attributes, location, textContainer, proposedLineFragment, position, });
    }

    pub fn textAttachment(self: *@This()) ?*TextAttachment {
        return objc.msgSend(self, "textAttachment", ?*TextAttachment, .{});
    }

    pub fn textLayoutManager(self: *@This()) ?*TextLayoutManager {
        return objc.msgSend(self, "textLayoutManager", ?*TextLayoutManager, .{});
    }

    pub fn location(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "location", ?*anyopaque, .{});
    }

    pub fn view(self: *@This()) ?*View {
        return objc.msgSend(self, "view", ?*View, .{});
    }

    pub fn setView(self: *@This(), view: ?*View) void {
        return objc.msgSend(self, "setView:", void, .{view});
    }

    pub fn tracksTextAttachmentViewBounds(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "tracksTextAttachmentViewBounds", objc.BOOL, .{});
    }

    pub fn setTracksTextAttachmentViewBounds(self: *@This(), tracksTextAttachmentViewBounds: objc.BOOL) void {
        return objc.msgSend(self, "setTracksTextAttachmentViewBounds:", void, .{tracksTextAttachmentViewBounds});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSTextAttachmentContainer?language=objc
pub const TextAttachmentContainer = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{objc.NSObject, });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn imageForBoundsTextContainerCharacterIndex(self: *@This(), imageBounds: core_foundation.CGRect, textContainer: ?*TextContainer, charIndex: objc.NSUInteger) ?*Image {
        return objc.msgSend(self, "imageForBounds:textContainer:characterIndex:", ?*Image, .{imageBounds, textContainer, charIndex});
    }

    pub fn attachmentBoundsForTextContainerProposedLineFragmentGlyphPositionCharacterIndex(self: *@This(), textContainer: ?*TextContainer, lineFrag: core_foundation.CGRect, position: core_foundation.CGPoint, charIndex: objc.NSUInteger, ) core_foundation.CGRect {
        return objc.msgSend(self, "attachmentBoundsForTextContainer:proposedLineFragment:glyphPosition:characterIndex:", core_foundation.CGRect, .{textContainer, lineFrag, position, charIndex, });
    }

};

/// https://developer.apple.com/documentation/AppKit/NSTextAttachmentCell?language=objc
pub const TextAttachmentCell = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{objc.NSObject, });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn drawWithFrameInView(self: *@This(), cellFrame: foundation.Rect, controlView: ?*View) void {
        return objc.msgSend(self, "drawWithFrame:inView:", void, .{cellFrame, controlView});
    }

    pub fn wantsToTrackMouse(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "wantsToTrackMouse", objc.BOOL, .{});
    }

    pub fn highlightWithFrameInView(self: *@This(), flag: objc.BOOL, cellFrame: foundation.Rect, controlView: ?*View) void {
        return objc.msgSend(self, "highlight:withFrame:inView:", void, .{flag, cellFrame, controlView});
    }

    pub fn trackMouseInRectOfViewUntilMouseUp(self: *@This(), theEvent: ?*Event, cellFrame: foundation.Rect, controlView: ?*View, flag: objc.BOOL, ) objc.BOOL {
        return objc.msgSend(self, "trackMouse:inRect:ofView:untilMouseUp:", objc.BOOL, .{theEvent, cellFrame, controlView, flag, });
    }

    pub fn cellSize(self: *@This()) foundation.Size {
        return objc.msgSend(self, "cellSize", foundation.Size, .{});
    }

    pub fn cellBaselineOffset(self: *@This()) foundation.Point {
        return objc.msgSend(self, "cellBaselineOffset", foundation.Point, .{});
    }

    pub fn drawWithFrameInViewCharacterIndex(self: *@This(), cellFrame: foundation.Rect, controlView: ?*View, charIndex: objc.NSUInteger) void {
        return objc.msgSend(self, "drawWithFrame:inView:characterIndex:", void, .{cellFrame, controlView, charIndex});
    }

    pub fn drawWithFrameInViewCharacterIndexLayoutManager(self: *@This(), cellFrame: foundation.Rect, controlView: ?*View, charIndex: objc.NSUInteger, layoutManager: ?*LayoutManager, ) void {
        return objc.msgSend(self, "drawWithFrame:inView:characterIndex:layoutManager:", void, .{cellFrame, controlView, charIndex, layoutManager, });
    }

    pub fn wantsToTrackMouseForEventInRectOfViewAtCharacterIndex(self: *@This(), theEvent: ?*Event, cellFrame: foundation.Rect, controlView: ?*View, charIndex: objc.NSUInteger, ) objc.BOOL {
        return objc.msgSend(self, "wantsToTrackMouseForEvent:inRect:ofView:atCharacterIndex:", objc.BOOL, .{theEvent, cellFrame, controlView, charIndex, });
    }

    pub fn trackMouseInRectOfViewAtCharacterIndexUntilMouseUp(self: *@This(), theEvent: ?*Event, cellFrame: foundation.Rect, controlView: ?*View, charIndex: objc.NSUInteger, flag: objc.BOOL, ) objc.BOOL {
        return objc.msgSend(self, "trackMouse:inRect:ofView:atCharacterIndex:untilMouseUp:", objc.BOOL, .{theEvent, cellFrame, controlView, charIndex, flag, });
    }

    pub fn cellFrameForTextContainerProposedLineFragmentGlyphPositionCharacterIndex(self: *@This(), textContainer: ?*TextContainer, lineFrag: foundation.Rect, position: foundation.Point, charIndex: objc.NSUInteger, ) foundation.Rect {
        return objc.msgSend(self, "cellFrameForTextContainer:proposedLineFragment:glyphPosition:characterIndex:", foundation.Rect, .{textContainer, lineFrag, position, charIndex, });
    }

    pub fn attachment(self: *@This()) ?*TextAttachment {
        return objc.msgSend(self, "attachment", ?*TextAttachment, .{});
    }

    pub fn setAttachment(self: *@This(), attachment: ?*TextAttachment) void {
        return objc.msgSend(self, "setAttachment:", void, .{attachment});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSTextAttachmentCell?language=objc
pub const TextAttachmentCell = opaque {
    pub const InternalInfo = objc.ExternalClass("NSTextAttachmentCell", @This(), Cell, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;
};

pub const SelectionGranularity = enum(objc.NSUInteger) {
    ByCharacter = 0,
    ByWord = 1,
    ByParagraph = 2,
};

pub const SelectionAffinity = enum(objc.NSUInteger) {
    Upstream = 0,
    Downstream = 1,
};

/// https://developer.apple.com/documentation/AppKit/NSTextView?language=objc
pub const TextView = opaque {
    pub const InternalInfo = objc.ExternalClass("NSTextView", @This(), Text, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn initWithFrameTextContainer(self: *@This(), frameRect: foundation.Rect, container: ?*TextContainer) *@This() {
        return objc.msgSend(self, "initWithFrame:textContainer:", *@This(), .{frameRect, container});
    }

    pub fn initWithCoder(self: *@This(), coder: ?*foundation.Coder) *@This() {
        return objc.msgSend(self, "initWithCoder:", *@This(), .{coder});
    }

    pub fn initWithFrame(self: *@This(), frameRect: foundation.Rect) *@This() {
        return objc.msgSend(self, "initWithFrame:", *@This(), .{frameRect});
    }

    pub fn initUsingTextLayoutManager(self: *@This(), usingTextLayoutManager: objc.BOOL) *@This() {
        return objc.msgSend(self, "initUsingTextLayoutManager:", *@This(), .{usingTextLayoutManager});
    }

    pub fn textViewUsingTextLayoutManager(self: *@This(), usingTextLayoutManager: objc.BOOL) *@This() {
        return objc.msgSend(self, "textViewUsingTextLayoutManager:", *@This(), .{usingTextLayoutManager});
    }

    pub fn replaceTextContainer(self: *@This(), newContainer: ?*TextContainer) void {
        return objc.msgSend(self, "replaceTextContainer:", void, .{newContainer});
    }

    pub fn invalidateTextContainerOrigin(self: *@This()) void {
        return objc.msgSend(self, "invalidateTextContainerOrigin", void, .{});
    }

    pub fn insertText(self: *@This(), insertString: *objc.Id) void {
        return objc.msgSend(self, "insertText:", void, .{insertString});
    }

    pub fn setConstrainedFrameSize(self: *@This(), desiredSize: foundation.Size) void {
        return objc.msgSend(self, "setConstrainedFrameSize:", void, .{desiredSize});
    }

    pub fn setAlignmentRange(self: *@This(), alignment: TextAlignment, range: foundation.Range) void {
        return objc.msgSend(self, "setAlignment:range:", void, .{alignment, range});
    }

    pub fn setBaseWritingDirectionRange(self: *@This(), writingDirection: WritingDirection, range: foundation.Range) void {
        return objc.msgSend(self, "setBaseWritingDirection:range:", void, .{writingDirection, range});
    }

    pub fn turnOffKerning(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "turnOffKerning:", void, .{sender});
    }

    pub fn tightenKerning(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "tightenKerning:", void, .{sender});
    }

    pub fn loosenKerning(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "loosenKerning:", void, .{sender});
    }

    pub fn useStandardKerning(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "useStandardKerning:", void, .{sender});
    }

    pub fn turnOffLigatures(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "turnOffLigatures:", void, .{sender});
    }

    pub fn useStandardLigatures(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "useStandardLigatures:", void, .{sender});
    }

    pub fn useAllLigatures(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "useAllLigatures:", void, .{sender});
    }

    pub fn raiseBaseline(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "raiseBaseline:", void, .{sender});
    }

    pub fn lowerBaseline(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "lowerBaseline:", void, .{sender});
    }

    pub fn toggleTraditionalCharacterShape(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "toggleTraditionalCharacterShape:", void, .{sender});
    }

    pub fn outline(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "outline:", void, .{sender});
    }

    pub fn performFindPanelAction(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "performFindPanelAction:", void, .{sender});
    }

    pub fn alignJustified(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "alignJustified:", void, .{sender});
    }

    pub fn changeColor(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "changeColor:", void, .{sender});
    }

    pub fn changeAttributes(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "changeAttributes:", void, .{sender});
    }

    pub fn changeDocumentBackgroundColor(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "changeDocumentBackgroundColor:", void, .{sender});
    }

    pub fn orderFrontSpacingPanel(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "orderFrontSpacingPanel:", void, .{sender});
    }

    pub fn orderFrontLinkPanel(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "orderFrontLinkPanel:", void, .{sender});
    }

    pub fn orderFrontListPanel(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "orderFrontListPanel:", void, .{sender});
    }

    pub fn orderFrontTablePanel(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "orderFrontTablePanel:", void, .{sender});
    }

    pub fn rulerViewDidMoveMarker(self: *@This(), ruler: ?*RulerView, marker: ?*RulerMarker) void {
        return objc.msgSend(self, "rulerView:didMoveMarker:", void, .{ruler, marker});
    }

    pub fn rulerViewDidRemoveMarker(self: *@This(), ruler: ?*RulerView, marker: ?*RulerMarker) void {
        return objc.msgSend(self, "rulerView:didRemoveMarker:", void, .{ruler, marker});
    }

    pub fn rulerViewDidAddMarker(self: *@This(), ruler: ?*RulerView, marker: ?*RulerMarker) void {
        return objc.msgSend(self, "rulerView:didAddMarker:", void, .{ruler, marker});
    }

    pub fn rulerViewShouldMoveMarker(self: *@This(), ruler: ?*RulerView, marker: ?*RulerMarker) objc.BOOL {
        return objc.msgSend(self, "rulerView:shouldMoveMarker:", objc.BOOL, .{ruler, marker});
    }

    pub fn rulerViewShouldAddMarker(self: *@This(), ruler: ?*RulerView, marker: ?*RulerMarker) objc.BOOL {
        return objc.msgSend(self, "rulerView:shouldAddMarker:", objc.BOOL, .{ruler, marker});
    }

    pub fn rulerViewWillMoveMarkerToLocation(self: *@This(), ruler: ?*RulerView, marker: ?*RulerMarker, location: core_foundation.CGFloat) core_foundation.CGFloat {
        return objc.msgSend(self, "rulerView:willMoveMarker:toLocation:", core_foundation.CGFloat, .{ruler, marker, location});
    }

    pub fn rulerViewShouldRemoveMarker(self: *@This(), ruler: ?*RulerView, marker: ?*RulerMarker) objc.BOOL {
        return objc.msgSend(self, "rulerView:shouldRemoveMarker:", objc.BOOL, .{ruler, marker});
    }

    pub fn rulerViewWillAddMarkerAtLocation(self: *@This(), ruler: ?*RulerView, marker: ?*RulerMarker, location: core_foundation.CGFloat) core_foundation.CGFloat {
        return objc.msgSend(self, "rulerView:willAddMarker:atLocation:", core_foundation.CGFloat, .{ruler, marker, location});
    }

    pub fn rulerViewHandleMouseDown(self: *@This(), ruler: ?*RulerView, event: ?*Event) void {
        return objc.msgSend(self, "rulerView:handleMouseDown:", void, .{ruler, event});
    }

    pub fn setNeedsDisplayInRectAvoidAdditionalLayout(self: *@This(), rect: foundation.Rect, flag: objc.BOOL) void {
        return objc.msgSend(self, "setNeedsDisplayInRect:avoidAdditionalLayout:", void, .{rect, flag});
    }

    pub fn drawInsertionPointInRectColorTurnedOn(self: *@This(), rect: foundation.Rect, color: ?*Color, flag: objc.BOOL) void {
        return objc.msgSend(self, "drawInsertionPointInRect:color:turnedOn:", void, .{rect, color, flag});
    }

    pub fn drawViewBackgroundInRect(self: *@This(), rect: foundation.Rect) void {
        return objc.msgSend(self, "drawViewBackgroundInRect:", void, .{rect});
    }

    pub fn updateRuler(self: *@This()) void {
        return objc.msgSend(self, "updateRuler", void, .{});
    }

    pub fn updateFontPanel(self: *@This()) void {
        return objc.msgSend(self, "updateFontPanel", void, .{});
    }

    pub fn updateDragTypeRegistration(self: *@This()) void {
        return objc.msgSend(self, "updateDragTypeRegistration", void, .{});
    }

    pub fn selectionRangeForProposedRangeGranularity(self: *@This(), proposedCharRange: foundation.Range, granularity: SelectionGranularity) foundation.Range {
        return objc.msgSend(self, "selectionRangeForProposedRange:granularity:", foundation.Range, .{proposedCharRange, granularity});
    }

    pub fn clickedOnLinkAtIndex(self: *@This(), link: *objc.Id, charIndex: objc.NSUInteger) void {
        return objc.msgSend(self, "clickedOnLink:atIndex:", void, .{link, charIndex});
    }

    pub fn startSpeaking(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "startSpeaking:", void, .{sender});
    }

    pub fn stopSpeaking(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "stopSpeaking:", void, .{sender});
    }

    pub fn setLayoutOrientation(self: *@This(), orientation: TextLayoutOrientation) void {
        return objc.msgSend(self, "setLayoutOrientation:", void, .{orientation});
    }

    pub fn changeLayoutOrientation(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "changeLayoutOrientation:", void, .{sender});
    }

    pub fn characterIndexForInsertionAtPoint(self: *@This(), point: foundation.Point) objc.NSUInteger {
        return objc.msgSend(self, "characterIndexForInsertionAtPoint:", objc.NSUInteger, .{point});
    }

    pub fn performValidatedReplacementInRangeWithAttributedString(self: *@This(), range: foundation.Range, attributedString: ?*AttributedString) objc.BOOL {
        return objc.msgSend(self, "performValidatedReplacementInRange:withAttributedString:", objc.BOOL, .{range, attributedString});
    }

    pub fn textContainer(self: *@This()) ?*TextContainer {
        return objc.msgSend(self, "textContainer", ?*TextContainer, .{});
    }

    pub fn setTextContainer(self: *@This(), textContainer: ?*TextContainer) void {
        return objc.msgSend(self, "setTextContainer:", void, .{textContainer});
    }

    pub fn textContainerInset(self: *@This()) foundation.Size {
        return objc.msgSend(self, "textContainerInset", foundation.Size, .{});
    }

    pub fn setTextContainerInset(self: *@This(), textContainerInset: foundation.Size) void {
        return objc.msgSend(self, "setTextContainerInset:", void, .{textContainerInset});
    }

    pub fn textContainerOrigin(self: *@This()) foundation.Point {
        return objc.msgSend(self, "textContainerOrigin", foundation.Point, .{});
    }

    pub fn layoutManager(self: *@This()) ?*LayoutManager {
        return objc.msgSend(self, "layoutManager", ?*LayoutManager, .{});
    }

    pub fn textStorage(self: *@This()) ?*TextStorage {
        return objc.msgSend(self, "textStorage", ?*TextStorage, .{});
    }

    pub fn textLayoutManager(self: *@This()) ?*TextLayoutManager {
        return objc.msgSend(self, "textLayoutManager", ?*TextLayoutManager, .{});
    }

    pub fn textContentStorage(self: *@This()) ?*TextContentStorage {
        return objc.msgSend(self, "textContentStorage", ?*TextContentStorage, .{});
    }

    pub fn shouldDrawInsertionPoint(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "shouldDrawInsertionPoint", objc.BOOL, .{});
    }

    pub fn stronglyReferencesTextStorage(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "stronglyReferencesTextStorage", objc.BOOL, .{});
    }

    pub fn usesAdaptiveColorMappingForDarkAppearance(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "usesAdaptiveColorMappingForDarkAppearance", objc.BOOL, .{});
    }

    pub fn setUsesAdaptiveColorMappingForDarkAppearance(self: *@This(), usesAdaptiveColorMappingForDarkAppearance: objc.BOOL) void {
        return objc.msgSend(self, "setUsesAdaptiveColorMappingForDarkAppearance:", void, .{usesAdaptiveColorMappingForDarkAppearance});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSTextViewDelegate?language=objc
pub const TextViewDelegate = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{TextDelegate, });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn textViewClickedOnLinkAtIndex(self: *@This(), textView: ?*TextView, link: *objc.Id, charIndex: objc.NSUInteger) objc.BOOL {
        return objc.msgSend(self, "textView:clickedOnLink:atIndex:", objc.BOOL, .{textView, link, charIndex});
    }

    pub fn textViewClickedOnCellInRectAtIndex(self: *@This(), textView: ?*TextView, cell: ?*anyopaque, cellFrame: foundation.Rect, charIndex: objc.NSUInteger, ) void {
        return objc.msgSend(self, "textView:clickedOnCell:inRect:atIndex:", void, .{textView, cell, cellFrame, charIndex, });
    }

    pub fn textViewDoubleClickedOnCellInRectAtIndex(self: *@This(), textView: ?*TextView, cell: ?*anyopaque, cellFrame: foundation.Rect, charIndex: objc.NSUInteger, ) void {
        return objc.msgSend(self, "textView:doubleClickedOnCell:inRect:atIndex:", void, .{textView, cell, cellFrame, charIndex, });
    }

    pub fn textViewDraggedCellInRectEventAtIndex(self: *@This(), view: ?*TextView, cell: ?*anyopaque, rect: foundation.Rect, event: ?*Event, charIndex: objc.NSUInteger, ) void {
        return objc.msgSend(self, "textView:draggedCell:inRect:event:atIndex:", void, .{view, cell, rect, event, charIndex, });
    }

    pub fn textViewWritablePasteboardTypesForCellAtIndex(self: *@This(), view: ?*TextView, cell: ?*anyopaque, charIndex: objc.NSUInteger) ?*anyopaque {
        return objc.msgSend(self, "textView:writablePasteboardTypesForCell:atIndex:", ?*anyopaque, .{view, cell, charIndex});
    }

    pub fn textViewWriteCellAtIndexToPasteboardType(self: *@This(), view: ?*TextView, cell: ?*anyopaque, charIndex: objc.NSUInteger, pboard: ?*Pasteboard, @"type": PasteboardType, ) objc.BOOL {
        return objc.msgSend(self, "textView:writeCell:atIndex:toPasteboard:type:", objc.BOOL, .{view, cell, charIndex, pboard, @"type", });
    }

    pub fn textViewWillChangeSelectionFromCharacterRangeToCharacterRange(self: *@This(), textView: ?*TextView, oldSelectedCharRange: foundation.Range, newSelectedCharRange: foundation.Range) foundation.Range {
        return objc.msgSend(self, "textView:willChangeSelectionFromCharacterRange:toCharacterRange:", foundation.Range, .{textView, oldSelectedCharRange, newSelectedCharRange});
    }

    pub fn textViewWillChangeSelectionFromCharacterRangesToCharacterRanges(self: *@This(), textView: ?*TextView, oldSelectedCharRanges: ?*anyopaque, newSelectedCharRanges: ?*anyopaque) ?*anyopaque {
        return objc.msgSend(self, "textView:willChangeSelectionFromCharacterRanges:toCharacterRanges:", ?*anyopaque, .{textView, oldSelectedCharRanges, newSelectedCharRanges});
    }

    pub fn textViewShouldChangeTextInRangesReplacementStrings(self: *@This(), textView: ?*TextView, affectedRanges: ?*anyopaque, replacementStrings: ?*anyopaque) objc.BOOL {
        return objc.msgSend(self, "textView:shouldChangeTextInRanges:replacementStrings:", objc.BOOL, .{textView, affectedRanges, replacementStrings});
    }

    pub fn textViewShouldChangeTypingAttributesToAttributes(self: *@This(), textView: ?*TextView, oldTypingAttributes: ?*anyopaque, newTypingAttributes: ?*anyopaque) ?*anyopaque {
        return objc.msgSend(self, "textView:shouldChangeTypingAttributes:toAttributes:", ?*anyopaque, .{textView, oldTypingAttributes, newTypingAttributes});
    }

    pub fn textViewDidChangeSelection(self: *@This(), notification: ?*Notification) void {
        return objc.msgSend(self, "textViewDidChangeSelection:", void, .{notification});
    }

    pub fn textViewDidChangeTypingAttributes(self: *@This(), notification: ?*Notification) void {
        return objc.msgSend(self, "textViewDidChangeTypingAttributes:", void, .{notification});
    }

    pub fn textViewWillDisplayToolTipForCharacterAtIndex(self: *@This(), textView: ?*TextView, tooltip: ?*String, characterIndex: objc.NSUInteger) ?*String {
        return objc.msgSend(self, "textView:willDisplayToolTip:forCharacterAtIndex:", ?*String, .{textView, tooltip, characterIndex});
    }

    pub fn textViewCompletionsForPartialWordRangeIndexOfSelectedItem(self: *@This(), textView: ?*TextView, words: ?*anyopaque, charRange: foundation.Range, index: ?*objc.NSInteger, ) ?*anyopaque {
        return objc.msgSend(self, "textView:completions:forPartialWordRange:indexOfSelectedItem:", ?*anyopaque, .{textView, words, charRange, index, });
    }

    pub fn textViewShouldChangeTextInRangeReplacementString(self: *@This(), textView: ?*TextView, affectedCharRange: foundation.Range, replacementString: ?*String) objc.BOOL {
        return objc.msgSend(self, "textView:shouldChangeTextInRange:replacementString:", objc.BOOL, .{textView, affectedCharRange, replacementString});
    }

    pub fn textViewDoCommandBySelector(self: *@This(), textView: ?*TextView, commandSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(self, "textView:doCommandBySelector:", objc.BOOL, .{textView, commandSelector});
    }

    pub fn textViewShouldSetSpellingStateRange(self: *@This(), textView: ?*TextView, value: objc.NSInteger, affectedCharRange: foundation.Range) objc.NSInteger {
        return objc.msgSend(self, "textView:shouldSetSpellingState:range:", objc.NSInteger, .{textView, value, affectedCharRange});
    }

    pub fn textViewMenuForEventAtIndex(self: *@This(), view: ?*TextView, menu: ?*Menu, event: ?*Event, charIndex: objc.NSUInteger, ) ?*Menu {
        return objc.msgSend(self, "textView:menu:forEvent:atIndex:", ?*Menu, .{view, menu, event, charIndex, });
    }

    pub fn textViewWillCheckTextInRangeOptionsTypes(self: *@This(), view: ?*TextView, range: foundation.Range, options: ?*anyopaque, checkingTypes: ?*foundation.TextCheckingTypes, ) ?*anyopaque {
        return objc.msgSend(self, "textView:willCheckTextInRange:options:types:", ?*anyopaque, .{view, range, options, checkingTypes, });
    }

    pub fn textViewDidCheckTextInRangeTypesOptionsResultsOrthographyWordCount(self: *@This(), view: ?*TextView, range: foundation.Range, checkingTypes: foundation.TextCheckingTypes, options: ?*anyopaque, results: ?*anyopaque, orthography: ?*Orthography, wordCount: objc.NSInteger, ) ?*anyopaque {
        return objc.msgSend(self, "textView:didCheckTextInRange:types:options:results:orthography:wordCount:", ?*anyopaque, .{view, range, checkingTypes, options, results, orthography, wordCount, });
    }

    pub fn textViewURLForContentsOfTextAttachmentAtIndex(self: *@This(), textView: ?*TextView, textAttachment: ?*TextAttachment, charIndex: objc.NSUInteger) ?*URL {
        return objc.msgSend(self, "textView:URLForContentsOfTextAttachment:atIndex:", ?*URL, .{textView, textAttachment, charIndex});
    }

    pub fn textViewWillShowSharingServicePickerForItems(self: *@This(), textView: ?*TextView, servicePicker: ?*SharingServicePicker, items: ?*Array) ?*SharingServicePicker {
        return objc.msgSend(self, "textView:willShowSharingServicePicker:forItems:", ?*SharingServicePicker, .{textView, servicePicker, items});
    }

    pub fn undoManagerForTextView(self: *@This(), view: ?*TextView) ?*UndoManager {
        return objc.msgSend(self, "undoManagerForTextView:", ?*UndoManager, .{view});
    }

    pub fn textViewShouldUpdateTouchBarItemIdentifiers(self: *@This(), textView: ?*TextView, identifiers: ?*anyopaque) ?*anyopaque {
        return objc.msgSend(self, "textView:shouldUpdateTouchBarItemIdentifiers:", ?*anyopaque, .{textView, identifiers});
    }

    pub fn textViewCandidatesForSelectedRange(self: *@This(), textView: ?*TextView, selectedRange: foundation.Range) ?*Array {
        return objc.msgSend(self, "textView:candidatesForSelectedRange:", ?*Array, .{textView, selectedRange});
    }

    pub fn textViewCandidatesForSelectedRange(self: *@This(), textView: ?*TextView, candidates: ?*anyopaque, selectedRange: foundation.Range) ?*anyopaque {
        return objc.msgSend(self, "textView:candidates:forSelectedRange:", ?*anyopaque, .{textView, candidates, selectedRange});
    }

    pub fn textViewShouldSelectCandidateAtIndex(self: *@This(), textView: ?*TextView, index: objc.NSUInteger) objc.BOOL {
        return objc.msgSend(self, "textView:shouldSelectCandidateAtIndex:", objc.BOOL, .{textView, index});
    }

    pub fn textViewWritingToolsWillBegin(self: *@This(), textView: ?*TextView) void {
        return objc.msgSend(self, "textViewWritingToolsWillBegin:", void, .{textView});
    }

    pub fn textViewWritingToolsDidEnd(self: *@This(), textView: ?*TextView) void {
        return objc.msgSend(self, "textViewWritingToolsDidEnd:", void, .{textView});
    }

    pub fn textViewWritingToolsIgnoredRangesInEnclosingRange(self: *@This(), textView: ?*TextView, enclosingRange: foundation.Range) ?*anyopaque {
        return objc.msgSend(self, "textView:writingToolsIgnoredRangesInEnclosingRange:", ?*anyopaque, .{textView, enclosingRange});
    }

    pub fn textViewClickedOnLink(self: *@This(), textView: ?*TextView, link: *objc.Id) objc.BOOL {
        return objc.msgSend(self, "textView:clickedOnLink:", objc.BOOL, .{textView, link});
    }

    pub fn textViewClickedOnCellInRect(self: *@This(), textView: ?*TextView, cell: ?*anyopaque, cellFrame: foundation.Rect) void {
        return objc.msgSend(self, "textView:clickedOnCell:inRect:", void, .{textView, cell, cellFrame});
    }

    pub fn textViewDoubleClickedOnCellInRect(self: *@This(), textView: ?*TextView, cell: ?*anyopaque, cellFrame: foundation.Rect) void {
        return objc.msgSend(self, "textView:doubleClickedOnCell:inRect:", void, .{textView, cell, cellFrame});
    }

    pub fn textViewDraggedCellInRectEvent(self: *@This(), view: ?*TextView, cell: ?*anyopaque, rect: foundation.Rect, event: ?*Event, ) void {
        return objc.msgSend(self, "textView:draggedCell:inRect:event:", void, .{view, cell, rect, event, });
    }

};

pub const FindPanelAction = enum(objc.NSUInteger) {
    ShowFindPanel = 1,
    Next = 2,
    Previous = 3,
    ReplaceAll = 4,
    Replace = 5,
    ReplaceAndFind = 6,
    SetFindString = 7,
    ReplaceAllInSelection = 8,
    SelectAll = 9,
    SelectAllInSelection = 10,
};

pub const PasteboardTypeFindPanelSearchOptionKey = ?*String;

pub const FindPanelSubstringMatchType = enum(objc.NSUInteger) {
    Contains = 0,
    StartsWith = 1,
    FullWord = 2,
    EndsWith = 3,
};

pub const TableViewDropOperation = enum(objc.NSUInteger) {
    On = 0,
    Above = 1,
};

pub const TableViewColumnAutoresizingStyle = enum(objc.NSUInteger) {
    NoColumnAutoresizing = 0,
    UniformColumnAutoresizingStyle = 1,
    SequentialColumnAutoresizingStyle = 2,
    ReverseSequentialColumnAutoresizingStyle = 3,
    LastColumnOnlyAutoresizingStyle = 4,
    FirstColumnOnlyAutoresizingStyle = 5,
};

pub const TableViewGridLineStyle = enum(objc.NSUInteger) {
    None = 0,
    SolidVerticalGridLineMask = 1,
    SolidHorizontalGridLineMask = 2,
    DashedHorizontalGridLineMask = 8,
};

pub const TableViewRowSizeStyle = enum(objc.NSInteger) {
    Default = -1,
    Custom = 0,
    Small = 1,
    Medium = 2,
    Large = 3,
};

pub const TableViewStyle = enum(objc.NSInteger) {
    Automatic = 0,
    FullWidth = 1,
    Inset = 2,
    SourceList = 3,
    Plain = 4,
};

pub const TableViewSelectionHighlightStyle = enum(objc.NSInteger) {
    None = -1,
    Regular = 0,
    SourceList = 1,
};

pub const TableViewDraggingDestinationFeedbackStyle = enum(objc.NSInteger) {
    None = -1,
    Regular = 0,
    SourceList = 1,
    Gap = 2,
};

pub const TableRowActionEdge = enum(objc.NSInteger) {
    Leading = 0,
    Trailing = 1,
};

pub const TableViewAutosaveName = ?*String;

/// https://developer.apple.com/documentation/AppKit/NSTableView?language=objc
pub const TableView = opaque {
    pub const InternalInfo = objc.ExternalClass("NSTableView", @This(), Control, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn initWithFrame(self: *@This(), frameRect: foundation.Rect) *@This() {
        return objc.msgSend(self, "initWithFrame:", *@This(), .{frameRect});
    }

    pub fn initWithCoder(self: *@This(), coder: ?*foundation.Coder) *@This() {
        return objc.msgSend(self, "initWithCoder:", *@This(), .{coder});
    }

    pub fn setDataSource(self: *@This(), dataSource: ?*anyopaque) void {
        return objc.msgSend(self, "setDataSource:", void, .{dataSource});
    }

    pub fn dataSource(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "dataSource", ?*anyopaque, .{});
    }

    pub fn setDelegate(self: *@This(), delegate: ?*anyopaque) void {
        return objc.msgSend(self, "setDelegate:", void, .{delegate});
    }

    pub fn delegate(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "delegate", ?*anyopaque, .{});
    }

    pub fn setHeaderView(self: *@This(), headerView: ?*TableHeaderView) void {
        return objc.msgSend(self, "setHeaderView:", void, .{headerView});
    }

    pub fn headerView(self: *@This()) ?*TableHeaderView {
        return objc.msgSend(self, "headerView", ?*TableHeaderView, .{});
    }

    pub fn setCornerView(self: *@This(), cornerView: ?*View) void {
        return objc.msgSend(self, "setCornerView:", void, .{cornerView});
    }

    pub fn cornerView(self: *@This()) ?*View {
        return objc.msgSend(self, "cornerView", ?*View, .{});
    }

    pub fn setAllowsColumnReordering(self: *@This(), allowsColumnReordering: objc.BOOL) void {
        return objc.msgSend(self, "setAllowsColumnReordering:", void, .{allowsColumnReordering});
    }

    pub fn allowsColumnReordering(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "allowsColumnReordering", objc.BOOL, .{});
    }

    pub fn allowsColumnResizing(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "allowsColumnResizing", objc.BOOL, .{});
    }

    pub fn setAllowsColumnResizing(self: *@This(), allowsColumnResizing: objc.BOOL) void {
        return objc.msgSend(self, "setAllowsColumnResizing:", void, .{allowsColumnResizing});
    }

    pub fn columnAutoresizingStyle(self: *@This()) TableViewColumnAutoresizingStyle {
        return objc.msgSend(self, "columnAutoresizingStyle", TableViewColumnAutoresizingStyle, .{});
    }

    pub fn setColumnAutoresizingStyle(self: *@This(), columnAutoresizingStyle: TableViewColumnAutoresizingStyle) void {
        return objc.msgSend(self, "setColumnAutoresizingStyle:", void, .{columnAutoresizingStyle});
    }

    pub fn gridStyleMask(self: *@This()) TableViewGridLineStyle {
        return objc.msgSend(self, "gridStyleMask", TableViewGridLineStyle, .{});
    }

    pub fn setGridStyleMask(self: *@This(), gridStyleMask: TableViewGridLineStyle) void {
        return objc.msgSend(self, "setGridStyleMask:", void, .{gridStyleMask});
    }

    pub fn setIntercellSpacing(self: *@This(), intercellSpacing: foundation.Size) void {
        return objc.msgSend(self, "setIntercellSpacing:", void, .{intercellSpacing});
    }

    pub fn intercellSpacing(self: *@This()) foundation.Size {
        return objc.msgSend(self, "intercellSpacing", foundation.Size, .{});
    }

    pub fn usesAlternatingRowBackgroundColors(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "usesAlternatingRowBackgroundColors", objc.BOOL, .{});
    }

    pub fn setUsesAlternatingRowBackgroundColors(self: *@This(), usesAlternatingRowBackgroundColors: objc.BOOL) void {
        return objc.msgSend(self, "setUsesAlternatingRowBackgroundColors:", void, .{usesAlternatingRowBackgroundColors});
    }

    pub fn backgroundColor(self: *@This()) ?*Color {
        return objc.msgSend(self, "backgroundColor", ?*Color, .{});
    }

    pub fn setBackgroundColor(self: *@This(), backgroundColor: ?*Color) void {
        return objc.msgSend(self, "setBackgroundColor:", void, .{backgroundColor});
    }

    pub fn gridColor(self: *@This()) ?*Color {
        return objc.msgSend(self, "gridColor", ?*Color, .{});
    }

    pub fn setGridColor(self: *@This(), gridColor: ?*Color) void {
        return objc.msgSend(self, "setGridColor:", void, .{gridColor});
    }

    pub fn rowSizeStyle(self: *@This()) TableViewRowSizeStyle {
        return objc.msgSend(self, "rowSizeStyle", TableViewRowSizeStyle, .{});
    }

    pub fn setRowSizeStyle(self: *@This(), rowSizeStyle: TableViewRowSizeStyle) void {
        return objc.msgSend(self, "setRowSizeStyle:", void, .{rowSizeStyle});
    }

    pub fn effectiveRowSizeStyle(self: *@This()) TableViewRowSizeStyle {
        return objc.msgSend(self, "effectiveRowSizeStyle", TableViewRowSizeStyle, .{});
    }

    pub fn rowHeight(self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(self, "rowHeight", core_foundation.CGFloat, .{});
    }

    pub fn setRowHeight(self: *@This(), rowHeight: core_foundation.CGFloat) void {
        return objc.msgSend(self, "setRowHeight:", void, .{rowHeight});
    }

    pub fn noteHeightOfRowsWithIndexesChanged(self: *@This(), indexSet: ?*IndexSet) void {
        return objc.msgSend(self, "noteHeightOfRowsWithIndexesChanged:", void, .{indexSet});
    }

    pub fn tableColumns(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "tableColumns", ?*anyopaque, .{});
    }

    pub fn numberOfColumns(self: *@This()) objc.NSInteger {
        return objc.msgSend(self, "numberOfColumns", objc.NSInteger, .{});
    }

    pub fn numberOfRows(self: *@This()) objc.NSInteger {
        return objc.msgSend(self, "numberOfRows", objc.NSInteger, .{});
    }

    pub fn addTableColumn(self: *@This(), tableColumn: ?*TableColumn) void {
        return objc.msgSend(self, "addTableColumn:", void, .{tableColumn});
    }

    pub fn removeTableColumn(self: *@This(), tableColumn: ?*TableColumn) void {
        return objc.msgSend(self, "removeTableColumn:", void, .{tableColumn});
    }

    pub fn moveColumnToColumn(self: *@This(), oldIndex: objc.NSInteger, newIndex: objc.NSInteger) void {
        return objc.msgSend(self, "moveColumn:toColumn:", void, .{oldIndex, newIndex});
    }

    pub fn columnWithIdentifier(self: *@This(), identifier: UserInterfaceItemIdentifier) objc.NSInteger {
        return objc.msgSend(self, "columnWithIdentifier:", objc.NSInteger, .{identifier});
    }

    pub fn tableColumnWithIdentifier(self: *@This(), identifier: UserInterfaceItemIdentifier) ?*TableColumn {
        return objc.msgSend(self, "tableColumnWithIdentifier:", ?*TableColumn, .{identifier});
    }

    pub fn tile(self: *@This()) void {
        return objc.msgSend(self, "tile", void, .{});
    }

    pub fn sizeToFit(self: *@This()) void {
        return objc.msgSend(self, "sizeToFit", void, .{});
    }

    pub fn sizeLastColumnToFit(self: *@This()) void {
        return objc.msgSend(self, "sizeLastColumnToFit", void, .{});
    }

    pub fn scrollRowToVisible(self: *@This(), row: objc.NSInteger) void {
        return objc.msgSend(self, "scrollRowToVisible:", void, .{row});
    }

    pub fn scrollColumnToVisible(self: *@This(), column: objc.NSInteger) void {
        return objc.msgSend(self, "scrollColumnToVisible:", void, .{column});
    }

    pub fn reloadData(self: *@This()) void {
        return objc.msgSend(self, "reloadData", void, .{});
    }

    pub fn noteNumberOfRowsChanged(self: *@This()) void {
        return objc.msgSend(self, "noteNumberOfRowsChanged", void, .{});
    }

    pub fn reloadDataForRowIndexesColumnIndexes(self: *@This(), rowIndexes: ?*IndexSet, columnIndexes: ?*IndexSet) void {
        return objc.msgSend(self, "reloadDataForRowIndexes:columnIndexes:", void, .{rowIndexes, columnIndexes});
    }

    pub fn editedColumn(self: *@This()) objc.NSInteger {
        return objc.msgSend(self, "editedColumn", objc.NSInteger, .{});
    }

    pub fn editedRow(self: *@This()) objc.NSInteger {
        return objc.msgSend(self, "editedRow", objc.NSInteger, .{});
    }

    pub fn clickedColumn(self: *@This()) objc.NSInteger {
        return objc.msgSend(self, "clickedColumn", objc.NSInteger, .{});
    }

    pub fn clickedRow(self: *@This()) objc.NSInteger {
        return objc.msgSend(self, "clickedRow", objc.NSInteger, .{});
    }

    pub fn setDoubleAction(self: *@This(), doubleAction: *objc.SEL) void {
        return objc.msgSend(self, "setDoubleAction:", void, .{doubleAction});
    }

    pub fn doubleAction(self: *@This()) *objc.SEL {
        return objc.msgSend(self, "doubleAction", *objc.SEL, .{});
    }

    pub fn sortDescriptors(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "sortDescriptors", ?*anyopaque, .{});
    }

    pub fn setSortDescriptors(self: *@This(), sortDescriptors: ?*anyopaque) void {
        return objc.msgSend(self, "setSortDescriptors:", void, .{sortDescriptors});
    }

    pub fn setIndicatorImageInTableColumn(self: *@This(), image: ?*Image, tableColumn: ?*TableColumn) void {
        return objc.msgSend(self, "setIndicatorImage:inTableColumn:", void, .{image, tableColumn});
    }

    pub fn indicatorImageInTableColumn(self: *@This(), tableColumn: ?*TableColumn) ?*Image {
        return objc.msgSend(self, "indicatorImageInTableColumn:", ?*Image, .{tableColumn});
    }

    pub fn highlightedTableColumn(self: *@This()) ?*TableColumn {
        return objc.msgSend(self, "highlightedTableColumn", ?*TableColumn, .{});
    }

    pub fn setHighlightedTableColumn(self: *@This(), highlightedTableColumn: ?*TableColumn) void {
        return objc.msgSend(self, "setHighlightedTableColumn:", void, .{highlightedTableColumn});
    }

    pub fn setVerticalMotionCanBeginDrag(self: *@This(), verticalMotionCanBeginDrag: objc.BOOL) void {
        return objc.msgSend(self, "setVerticalMotionCanBeginDrag:", void, .{verticalMotionCanBeginDrag});
    }

    pub fn verticalMotionCanBeginDrag(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "verticalMotionCanBeginDrag", objc.BOOL, .{});
    }

    pub fn canDragRowsWithIndexesAtPoint(self: *@This(), rowIndexes: ?*IndexSet, mouseDownPoint: foundation.Point) objc.BOOL {
        return objc.msgSend(self, "canDragRowsWithIndexes:atPoint:", objc.BOOL, .{rowIndexes, mouseDownPoint});
    }

    pub fn dragImageForRowsWithIndexesTableColumnsEventOffset(self: *@This(), dragRows: ?*IndexSet, tableColumns: ?*anyopaque, dragEvent: ?*Event, dragImageOffset: foundation.PointPointer, ) ?*Image {
        return objc.msgSend(self, "dragImageForRowsWithIndexes:tableColumns:event:offset:", ?*Image, .{dragRows, tableColumns, dragEvent, dragImageOffset, });
    }

    pub fn setDraggingSourceOperationMaskForLocal(self: *@This(), mask: DragOperation, isLocal: objc.BOOL) void {
        return objc.msgSend(self, "setDraggingSourceOperationMask:forLocal:", void, .{mask, isLocal});
    }

    pub fn setDropRowDropOperation(self: *@This(), row: objc.NSInteger, dropOperation: TableViewDropOperation) void {
        return objc.msgSend(self, "setDropRow:dropOperation:", void, .{row, dropOperation});
    }

    pub fn setAllowsMultipleSelection(self: *@This(), allowsMultipleSelection: objc.BOOL) void {
        return objc.msgSend(self, "setAllowsMultipleSelection:", void, .{allowsMultipleSelection});
    }

    pub fn allowsMultipleSelection(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "allowsMultipleSelection", objc.BOOL, .{});
    }

    pub fn setAllowsEmptySelection(self: *@This(), allowsEmptySelection: objc.BOOL) void {
        return objc.msgSend(self, "setAllowsEmptySelection:", void, .{allowsEmptySelection});
    }

    pub fn allowsEmptySelection(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "allowsEmptySelection", objc.BOOL, .{});
    }

    pub fn setAllowsColumnSelection(self: *@This(), allowsColumnSelection: objc.BOOL) void {
        return objc.msgSend(self, "setAllowsColumnSelection:", void, .{allowsColumnSelection});
    }

    pub fn allowsColumnSelection(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "allowsColumnSelection", objc.BOOL, .{});
    }

    pub fn selectAll(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "selectAll:", void, .{sender});
    }

    pub fn deselectAll(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "deselectAll:", void, .{sender});
    }

    pub fn selectColumnIndexesByExtendingSelection(self: *@This(), indexes: ?*IndexSet, extend: objc.BOOL) void {
        return objc.msgSend(self, "selectColumnIndexes:byExtendingSelection:", void, .{indexes, extend});
    }

    pub fn selectRowIndexesByExtendingSelection(self: *@This(), indexes: ?*IndexSet, extend: objc.BOOL) void {
        return objc.msgSend(self, "selectRowIndexes:byExtendingSelection:", void, .{indexes, extend});
    }

    pub fn selectedColumnIndexes(self: *@This()) ?*IndexSet {
        return objc.msgSend(self, "selectedColumnIndexes", ?*IndexSet, .{});
    }

    pub fn selectedRowIndexes(self: *@This()) ?*IndexSet {
        return objc.msgSend(self, "selectedRowIndexes", ?*IndexSet, .{});
    }

    pub fn deselectColumn(self: *@This(), column: objc.NSInteger) void {
        return objc.msgSend(self, "deselectColumn:", void, .{column});
    }

    pub fn deselectRow(self: *@This(), row: objc.NSInteger) void {
        return objc.msgSend(self, "deselectRow:", void, .{row});
    }

    pub fn selectedColumn(self: *@This()) objc.NSInteger {
        return objc.msgSend(self, "selectedColumn", objc.NSInteger, .{});
    }

    pub fn selectedRow(self: *@This()) objc.NSInteger {
        return objc.msgSend(self, "selectedRow", objc.NSInteger, .{});
    }

    pub fn isColumnSelected(self: *@This(), column: objc.NSInteger) objc.BOOL {
        return objc.msgSend(self, "isColumnSelected:", objc.BOOL, .{column});
    }

    pub fn isRowSelected(self: *@This(), row: objc.NSInteger) objc.BOOL {
        return objc.msgSend(self, "isRowSelected:", objc.BOOL, .{row});
    }

    pub fn numberOfSelectedColumns(self: *@This()) objc.NSInteger {
        return objc.msgSend(self, "numberOfSelectedColumns", objc.NSInteger, .{});
    }

    pub fn numberOfSelectedRows(self: *@This()) objc.NSInteger {
        return objc.msgSend(self, "numberOfSelectedRows", objc.NSInteger, .{});
    }

    pub fn allowsTypeSelect(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "allowsTypeSelect", objc.BOOL, .{});
    }

    pub fn setAllowsTypeSelect(self: *@This(), allowsTypeSelect: objc.BOOL) void {
        return objc.msgSend(self, "setAllowsTypeSelect:", void, .{allowsTypeSelect});
    }

    pub fn style(self: *@This()) TableViewStyle {
        return objc.msgSend(self, "style", TableViewStyle, .{});
    }

    pub fn setStyle(self: *@This(), style: TableViewStyle) void {
        return objc.msgSend(self, "setStyle:", void, .{style});
    }

    pub fn effectiveStyle(self: *@This()) TableViewStyle {
        return objc.msgSend(self, "effectiveStyle", TableViewStyle, .{});
    }

    pub fn selectionHighlightStyle(self: *@This()) TableViewSelectionHighlightStyle {
        return objc.msgSend(self, "selectionHighlightStyle", TableViewSelectionHighlightStyle, .{});
    }

    pub fn setSelectionHighlightStyle(self: *@This(), selectionHighlightStyle: TableViewSelectionHighlightStyle) void {
        return objc.msgSend(self, "setSelectionHighlightStyle:", void, .{selectionHighlightStyle});
    }

    pub fn draggingDestinationFeedbackStyle(self: *@This()) TableViewDraggingDestinationFeedbackStyle {
        return objc.msgSend(self, "draggingDestinationFeedbackStyle", TableViewDraggingDestinationFeedbackStyle, .{});
    }

    pub fn setDraggingDestinationFeedbackStyle(self: *@This(), draggingDestinationFeedbackStyle: TableViewDraggingDestinationFeedbackStyle) void {
        return objc.msgSend(self, "setDraggingDestinationFeedbackStyle:", void, .{draggingDestinationFeedbackStyle});
    }

    pub fn rectOfColumn(self: *@This(), column: objc.NSInteger) foundation.Rect {
        return objc.msgSend(self, "rectOfColumn:", foundation.Rect, .{column});
    }

    pub fn rectOfRow(self: *@This(), row: objc.NSInteger) foundation.Rect {
        return objc.msgSend(self, "rectOfRow:", foundation.Rect, .{row});
    }

    pub fn columnIndexesInRect(self: *@This(), rect: foundation.Rect) ?*IndexSet {
        return objc.msgSend(self, "columnIndexesInRect:", ?*IndexSet, .{rect});
    }

    pub fn rowsInRect(self: *@This(), rect: foundation.Rect) foundation.Range {
        return objc.msgSend(self, "rowsInRect:", foundation.Range, .{rect});
    }

    pub fn columnAtPoint(self: *@This(), point: foundation.Point) objc.NSInteger {
        return objc.msgSend(self, "columnAtPoint:", objc.NSInteger, .{point});
    }

    pub fn rowAtPoint(self: *@This(), point: foundation.Point) objc.NSInteger {
        return objc.msgSend(self, "rowAtPoint:", objc.NSInteger, .{point});
    }

    pub fn frameOfCellAtColumnRow(self: *@This(), column: objc.NSInteger, row: objc.NSInteger) foundation.Rect {
        return objc.msgSend(self, "frameOfCellAtColumn:row:", foundation.Rect, .{column, row});
    }

    pub fn setAutosaveName(self: *@This(), autosaveName: TableViewAutosaveName) void {
        return objc.msgSend(self, "setAutosaveName:", void, .{autosaveName});
    }

    pub fn autosaveName(self: *@This()) TableViewAutosaveName {
        return objc.msgSend(self, "autosaveName", TableViewAutosaveName, .{});
    }

    pub fn setAutosaveTableColumns(self: *@This(), autosaveTableColumns: objc.BOOL) void {
        return objc.msgSend(self, "setAutosaveTableColumns:", void, .{autosaveTableColumns});
    }

    pub fn autosaveTableColumns(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "autosaveTableColumns", objc.BOOL, .{});
    }

    pub fn editColumnRowWithEventSelect(self: *@This(), column: objc.NSInteger, row: objc.NSInteger, event: ?*Event, select: objc.BOOL, ) void {
        return objc.msgSend(self, "editColumn:row:withEvent:select:", void, .{column, row, event, select, });
    }

    pub fn drawRowClipRect(self: *@This(), row: objc.NSInteger, clipRect: foundation.Rect) void {
        return objc.msgSend(self, "drawRow:clipRect:", void, .{row, clipRect});
    }

    pub fn highlightSelectionInClipRect(self: *@This(), clipRect: foundation.Rect) void {
        return objc.msgSend(self, "highlightSelectionInClipRect:", void, .{clipRect});
    }

    pub fn drawGridInClipRect(self: *@This(), clipRect: foundation.Rect) void {
        return objc.msgSend(self, "drawGridInClipRect:", void, .{clipRect});
    }

    pub fn drawBackgroundInClipRect(self: *@This(), clipRect: foundation.Rect) void {
        return objc.msgSend(self, "drawBackgroundInClipRect:", void, .{clipRect});
    }

    pub fn viewAtColumnRowMakeIfNecessary(self: *@This(), column: objc.NSInteger, row: objc.NSInteger, makeIfNecessary: objc.BOOL) ?*anyopaque {
        return objc.msgSend(self, "viewAtColumn:row:makeIfNecessary:", ?*anyopaque, .{column, row, makeIfNecessary});
    }

    pub fn rowViewAtRowMakeIfNecessary(self: *@This(), row: objc.NSInteger, makeIfNecessary: objc.BOOL) ?*anyopaque {
        return objc.msgSend(self, "rowViewAtRow:makeIfNecessary:", ?*anyopaque, .{row, makeIfNecessary});
    }

    pub fn rowForView(self: *@This(), view: ?*View) objc.NSInteger {
        return objc.msgSend(self, "rowForView:", objc.NSInteger, .{view});
    }

    pub fn columnForView(self: *@This(), view: ?*View) objc.NSInteger {
        return objc.msgSend(self, "columnForView:", objc.NSInteger, .{view});
    }

    pub fn makeViewWithIdentifierOwner(self: *@This(), identifier: UserInterfaceItemIdentifier, owner: *objc.Id) ?*anyopaque {
        return objc.msgSend(self, "makeViewWithIdentifier:owner:", ?*anyopaque, .{identifier, owner});
    }

    pub fn enumerateAvailableRowViewsUsingBlock(self: *@This(), handler: *const fn(?*anyopaque, objc.NSInteger) callconv(.C) void) void {
        return objc.msgSend(self, "enumerateAvailableRowViewsUsingBlock:", void, .{handler});
    }

    pub fn floatsGroupRows(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "floatsGroupRows", objc.BOOL, .{});
    }

    pub fn setFloatsGroupRows(self: *@This(), floatsGroupRows: objc.BOOL) void {
        return objc.msgSend(self, "setFloatsGroupRows:", void, .{floatsGroupRows});
    }

    pub fn rowActionsVisible(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "rowActionsVisible", objc.BOOL, .{});
    }

    pub fn setRowActionsVisible(self: *@This(), rowActionsVisible: objc.BOOL) void {
        return objc.msgSend(self, "setRowActionsVisible:", void, .{rowActionsVisible});
    }

    pub fn beginUpdates(self: *@This()) void {
        return objc.msgSend(self, "beginUpdates", void, .{});
    }

    pub fn endUpdates(self: *@This()) void {
        return objc.msgSend(self, "endUpdates", void, .{});
    }

    pub fn insertRowsAtIndexesWithAnimation(self: *@This(), indexes: ?*IndexSet, animationOptions: TableViewAnimationOptions) void {
        return objc.msgSend(self, "insertRowsAtIndexes:withAnimation:", void, .{indexes, animationOptions});
    }

    pub fn removeRowsAtIndexesWithAnimation(self: *@This(), indexes: ?*IndexSet, animationOptions: TableViewAnimationOptions) void {
        return objc.msgSend(self, "removeRowsAtIndexes:withAnimation:", void, .{indexes, animationOptions});
    }

    pub fn moveRowAtIndexToIndex(self: *@This(), oldIndex: objc.NSInteger, newIndex: objc.NSInteger) void {
        return objc.msgSend(self, "moveRowAtIndex:toIndex:", void, .{oldIndex, newIndex});
    }

    pub fn hideRowsAtIndexesWithAnimation(self: *@This(), indexes: ?*IndexSet, rowAnimation: TableViewAnimationOptions) void {
        return objc.msgSend(self, "hideRowsAtIndexes:withAnimation:", void, .{indexes, rowAnimation});
    }

    pub fn unhideRowsAtIndexesWithAnimation(self: *@This(), indexes: ?*IndexSet, rowAnimation: TableViewAnimationOptions) void {
        return objc.msgSend(self, "unhideRowsAtIndexes:withAnimation:", void, .{indexes, rowAnimation});
    }

    pub fn hiddenRowIndexes(self: *@This()) ?*IndexSet {
        return objc.msgSend(self, "hiddenRowIndexes", ?*IndexSet, .{});
    }

    pub fn registerNibForIdentifier(self: *@This(), nib: ?*Nib, identifier: UserInterfaceItemIdentifier) void {
        return objc.msgSend(self, "registerNib:forIdentifier:", void, .{nib, identifier});
    }

    pub fn registeredNibsByIdentifier(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "registeredNibsByIdentifier", ?*anyopaque, .{});
    }

    pub fn didAddRowViewForRow(self: *@This(), rowView: ?*TableRowView, row: objc.NSInteger) void {
        return objc.msgSend(self, "didAddRowView:forRow:", void, .{rowView, row});
    }

    pub fn didRemoveRowViewForRow(self: *@This(), rowView: ?*TableRowView, row: objc.NSInteger) void {
        return objc.msgSend(self, "didRemoveRowView:forRow:", void, .{rowView, row});
    }

    pub fn usesStaticContents(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "usesStaticContents", objc.BOOL, .{});
    }

    pub fn setUsesStaticContents(self: *@This(), usesStaticContents: objc.BOOL) void {
        return objc.msgSend(self, "setUsesStaticContents:", void, .{usesStaticContents});
    }

    pub fn userInterfaceLayoutDirection(self: *@This()) UserInterfaceLayoutDirection {
        return objc.msgSend(self, "userInterfaceLayoutDirection", UserInterfaceLayoutDirection, .{});
    }

    pub fn setUserInterfaceLayoutDirection(self: *@This(), userInterfaceLayoutDirection: UserInterfaceLayoutDirection) void {
        return objc.msgSend(self, "setUserInterfaceLayoutDirection:", void, .{userInterfaceLayoutDirection});
    }

    pub fn usesAutomaticRowHeights(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "usesAutomaticRowHeights", objc.BOOL, .{});
    }

    pub fn setUsesAutomaticRowHeights(self: *@This(), usesAutomaticRowHeights: objc.BOOL) void {
        return objc.msgSend(self, "setUsesAutomaticRowHeights:", void, .{usesAutomaticRowHeights});
    }

};

pub const TableViewAnimationOptions = TableViewAnimationOptions;

pub const TableViewAnimationOptions = enum(objc.NSUInteger) {
    EffectNone = 0,
    EffectFade = 1,
    EffectGap = 2,
    SlideUp = 16,
    SlideDown = 32,
    SlideLeft = 48,
    SlideRight = 64,
};

/// https://developer.apple.com/documentation/AppKit/NSTableViewDelegate?language=objc
pub const TableViewDelegate = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{ControlTextEditingDelegate, });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn tableViewViewForTableColumnRow(self: *@This(), tableView: ?*TableView, tableColumn: ?*TableColumn, row: objc.NSInteger) ?*View {
        return objc.msgSend(self, "tableView:viewForTableColumn:row:", ?*View, .{tableView, tableColumn, row});
    }

    pub fn tableViewRowViewForRow(self: *@This(), tableView: ?*TableView, row: objc.NSInteger) ?*TableRowView {
        return objc.msgSend(self, "tableView:rowViewForRow:", ?*TableRowView, .{tableView, row});
    }

    pub fn tableViewDidAddRowViewForRow(self: *@This(), tableView: ?*TableView, rowView: ?*TableRowView, row: objc.NSInteger) void {
        return objc.msgSend(self, "tableView:didAddRowView:forRow:", void, .{tableView, rowView, row});
    }

    pub fn tableViewDidRemoveRowViewForRow(self: *@This(), tableView: ?*TableView, rowView: ?*TableRowView, row: objc.NSInteger) void {
        return objc.msgSend(self, "tableView:didRemoveRowView:forRow:", void, .{tableView, rowView, row});
    }

    pub fn tableViewWillDisplayCellForTableColumnRow(self: *@This(), tableView: ?*TableView, cell: *objc.Id, tableColumn: ?*TableColumn, row: objc.NSInteger, ) void {
        return objc.msgSend(self, "tableView:willDisplayCell:forTableColumn:row:", void, .{tableView, cell, tableColumn, row, });
    }

    pub fn tableViewShouldEditTableColumnRow(self: *@This(), tableView: ?*TableView, tableColumn: ?*TableColumn, row: objc.NSInteger) objc.BOOL {
        return objc.msgSend(self, "tableView:shouldEditTableColumn:row:", objc.BOOL, .{tableView, tableColumn, row});
    }

    pub fn tableViewToolTipForCellRectTableColumnRowMouseLocation(self: *@This(), tableView: ?*TableView, cell: ?*Cell, rect: foundation.RectPointer, tableColumn: ?*TableColumn, row: objc.NSInteger, mouseLocation: foundation.Point, ) ?*String {
        return objc.msgSend(self, "tableView:toolTipForCell:rect:tableColumn:row:mouseLocation:", ?*String, .{tableView, cell, rect, tableColumn, row, mouseLocation, });
    }

    pub fn tableViewShouldShowCellExpansionForTableColumnRow(self: *@This(), tableView: ?*TableView, tableColumn: ?*TableColumn, row: objc.NSInteger) objc.BOOL {
        return objc.msgSend(self, "tableView:shouldShowCellExpansionForTableColumn:row:", objc.BOOL, .{tableView, tableColumn, row});
    }

    pub fn tableViewShouldTrackCellForTableColumnRow(self: *@This(), tableView: ?*TableView, cell: ?*Cell, tableColumn: ?*TableColumn, row: objc.NSInteger, ) objc.BOOL {
        return objc.msgSend(self, "tableView:shouldTrackCell:forTableColumn:row:", objc.BOOL, .{tableView, cell, tableColumn, row, });
    }

    pub fn tableViewDataCellForTableColumnRow(self: *@This(), tableView: ?*TableView, tableColumn: ?*TableColumn, row: objc.NSInteger) ?*Cell {
        return objc.msgSend(self, "tableView:dataCellForTableColumn:row:", ?*Cell, .{tableView, tableColumn, row});
    }

    pub fn selectionShouldChangeInTableView(self: *@This(), tableView: ?*TableView) objc.BOOL {
        return objc.msgSend(self, "selectionShouldChangeInTableView:", objc.BOOL, .{tableView});
    }

    pub fn tableViewShouldSelectRow(self: *@This(), tableView: ?*TableView, row: objc.NSInteger) objc.BOOL {
        return objc.msgSend(self, "tableView:shouldSelectRow:", objc.BOOL, .{tableView, row});
    }

    pub fn tableViewSelectionIndexesForProposedSelection(self: *@This(), tableView: ?*TableView, proposedSelectionIndexes: ?*IndexSet) ?*IndexSet {
        return objc.msgSend(self, "tableView:selectionIndexesForProposedSelection:", ?*IndexSet, .{tableView, proposedSelectionIndexes});
    }

    pub fn tableViewShouldSelectTableColumn(self: *@This(), tableView: ?*TableView, tableColumn: ?*TableColumn) objc.BOOL {
        return objc.msgSend(self, "tableView:shouldSelectTableColumn:", objc.BOOL, .{tableView, tableColumn});
    }

    pub fn tableViewMouseDownInHeaderOfTableColumn(self: *@This(), tableView: ?*TableView, tableColumn: ?*TableColumn) void {
        return objc.msgSend(self, "tableView:mouseDownInHeaderOfTableColumn:", void, .{tableView, tableColumn});
    }

    pub fn tableViewDidClickTableColumn(self: *@This(), tableView: ?*TableView, tableColumn: ?*TableColumn) void {
        return objc.msgSend(self, "tableView:didClickTableColumn:", void, .{tableView, tableColumn});
    }

    pub fn tableViewDidDragTableColumn(self: *@This(), tableView: ?*TableView, tableColumn: ?*TableColumn) void {
        return objc.msgSend(self, "tableView:didDragTableColumn:", void, .{tableView, tableColumn});
    }

    pub fn tableViewHeightOfRow(self: *@This(), tableView: ?*TableView, row: objc.NSInteger) core_foundation.CGFloat {
        return objc.msgSend(self, "tableView:heightOfRow:", core_foundation.CGFloat, .{tableView, row});
    }

    pub fn tableViewTypeSelectStringForTableColumnRow(self: *@This(), tableView: ?*TableView, tableColumn: ?*TableColumn, row: objc.NSInteger) ?*String {
        return objc.msgSend(self, "tableView:typeSelectStringForTableColumn:row:", ?*String, .{tableView, tableColumn, row});
    }

    pub fn tableViewNextTypeSelectMatchFromRowToRowForString(self: *@This(), tableView: ?*TableView, startRow: objc.NSInteger, endRow: objc.NSInteger, searchString: ?*String, ) objc.NSInteger {
        return objc.msgSend(self, "tableView:nextTypeSelectMatchFromRow:toRow:forString:", objc.NSInteger, .{tableView, startRow, endRow, searchString, });
    }

    pub fn tableViewShouldTypeSelectForEventWithCurrentSearchString(self: *@This(), tableView: ?*TableView, event: ?*Event, searchString: ?*String) objc.BOOL {
        return objc.msgSend(self, "tableView:shouldTypeSelectForEvent:withCurrentSearchString:", objc.BOOL, .{tableView, event, searchString});
    }

    pub fn tableViewIsGroupRow(self: *@This(), tableView: ?*TableView, row: objc.NSInteger) objc.BOOL {
        return objc.msgSend(self, "tableView:isGroupRow:", objc.BOOL, .{tableView, row});
    }

    pub fn tableViewSizeToFitWidthOfColumn(self: *@This(), tableView: ?*TableView, column: objc.NSInteger) core_foundation.CGFloat {
        return objc.msgSend(self, "tableView:sizeToFitWidthOfColumn:", core_foundation.CGFloat, .{tableView, column});
    }

    pub fn tableViewShouldReorderColumnToColumn(self: *@This(), tableView: ?*TableView, columnIndex: objc.NSInteger, newColumnIndex: objc.NSInteger) objc.BOOL {
        return objc.msgSend(self, "tableView:shouldReorderColumn:toColumn:", objc.BOOL, .{tableView, columnIndex, newColumnIndex});
    }

    pub fn tableViewRowActionsForRowEdge(self: *@This(), tableView: ?*TableView, row: objc.NSInteger, edge: TableRowActionEdge) ?*anyopaque {
        return objc.msgSend(self, "tableView:rowActionsForRow:edge:", ?*anyopaque, .{tableView, row, edge});
    }

    pub fn tableViewUserCanChangeVisibilityOfTableColumn(self: *@This(), tableView: ?*TableView, column: ?*TableColumn) objc.BOOL {
        return objc.msgSend(self, "tableView:userCanChangeVisibilityOfTableColumn:", objc.BOOL, .{tableView, column});
    }

    pub fn tableViewUserDidChangeVisibilityOfTableColumns(self: *@This(), tableView: ?*TableView, columns: ?*anyopaque) void {
        return objc.msgSend(self, "tableView:userDidChangeVisibilityOfTableColumns:", void, .{tableView, columns});
    }

    pub fn tableViewSelectionDidChange(self: *@This(), notification: ?*Notification) void {
        return objc.msgSend(self, "tableViewSelectionDidChange:", void, .{notification});
    }

    pub fn tableViewColumnDidMove(self: *@This(), notification: ?*Notification) void {
        return objc.msgSend(self, "tableViewColumnDidMove:", void, .{notification});
    }

    pub fn tableViewColumnDidResize(self: *@This(), notification: ?*Notification) void {
        return objc.msgSend(self, "tableViewColumnDidResize:", void, .{notification});
    }

    pub fn tableViewSelectionIsChanging(self: *@This(), notification: ?*Notification) void {
        return objc.msgSend(self, "tableViewSelectionIsChanging:", void, .{notification});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSTableViewDataSource?language=objc
pub const TableViewDataSource = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{objc.NSObject, });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn numberOfRowsInTableView(self: *@This(), tableView: ?*TableView) objc.NSInteger {
        return objc.msgSend(self, "numberOfRowsInTableView:", objc.NSInteger, .{tableView});
    }

    pub fn tableViewObjectValueForTableColumnRow(self: *@This(), tableView: ?*TableView, tableColumn: ?*TableColumn, row: objc.NSInteger) *objc.Id {
        return objc.msgSend(self, "tableView:objectValueForTableColumn:row:", *objc.Id, .{tableView, tableColumn, row});
    }

    pub fn tableViewSetObjectValueForTableColumnRow(self: *@This(), tableView: ?*TableView, object: *objc.Id, tableColumn: ?*TableColumn, row: objc.NSInteger, ) void {
        return objc.msgSend(self, "tableView:setObjectValue:forTableColumn:row:", void, .{tableView, object, tableColumn, row, });
    }

    pub fn tableViewSortDescriptorsDidChange(self: *@This(), tableView: ?*TableView, oldDescriptors: ?*anyopaque) void {
        return objc.msgSend(self, "tableView:sortDescriptorsDidChange:", void, .{tableView, oldDescriptors});
    }

    pub fn tableViewPasteboardWriterForRow(self: *@This(), tableView: ?*TableView, row: objc.NSInteger) ?*anyopaque {
        return objc.msgSend(self, "tableView:pasteboardWriterForRow:", ?*anyopaque, .{tableView, row});
    }

    pub fn tableViewDraggingSessionWillBeginAtPointForRowIndexes(self: *@This(), tableView: ?*TableView, session: ?*DraggingSession, screenPoint: foundation.Point, rowIndexes: ?*IndexSet, ) void {
        return objc.msgSend(self, "tableView:draggingSession:willBeginAtPoint:forRowIndexes:", void, .{tableView, session, screenPoint, rowIndexes, });
    }

    pub fn tableViewDraggingSessionEndedAtPointOperation(self: *@This(), tableView: ?*TableView, session: ?*DraggingSession, screenPoint: foundation.Point, operation: DragOperation, ) void {
        return objc.msgSend(self, "tableView:draggingSession:endedAtPoint:operation:", void, .{tableView, session, screenPoint, operation, });
    }

    pub fn tableViewUpdateDraggingItemsForDrag(self: *@This(), tableView: ?*TableView, draggingInfo: ?*anyopaque) void {
        return objc.msgSend(self, "tableView:updateDraggingItemsForDrag:", void, .{tableView, draggingInfo});
    }

    pub fn tableViewWriteRowsWithIndexesToPasteboard(self: *@This(), tableView: ?*TableView, rowIndexes: ?*IndexSet, pboard: ?*Pasteboard) objc.BOOL {
        return objc.msgSend(self, "tableView:writeRowsWithIndexes:toPasteboard:", objc.BOOL, .{tableView, rowIndexes, pboard});
    }

    pub fn tableViewValidateDropProposedRowProposedDropOperation(self: *@This(), tableView: ?*TableView, info: ?*anyopaque, row: objc.NSInteger, dropOperation: TableViewDropOperation, ) DragOperation {
        return objc.msgSend(self, "tableView:validateDrop:proposedRow:proposedDropOperation:", DragOperation, .{tableView, info, row, dropOperation, });
    }

    pub fn tableViewAcceptDropRowDropOperation(self: *@This(), tableView: ?*TableView, info: ?*anyopaque, row: objc.NSInteger, dropOperation: TableViewDropOperation, ) objc.BOOL {
        return objc.msgSend(self, "tableView:acceptDrop:row:dropOperation:", objc.BOOL, .{tableView, info, row, dropOperation, });
    }

    pub fn tableViewNamesOfPromisedFilesDroppedAtDestinationForDraggedRowsWithIndexes(self: *@This(), tableView: ?*TableView, dropDestination: ?*URL, indexSet: ?*IndexSet) ?*anyopaque {
        return objc.msgSend(self, "tableView:namesOfPromisedFilesDroppedAtDestination:forDraggedRowsWithIndexes:", ?*anyopaque, .{tableView, dropDestination, indexSet});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSTableCellView?language=objc
pub const TableCellView = opaque {
    pub const InternalInfo = objc.ExternalClass("NSTableCellView", @This(), View, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn objectValue(self: *@This()) *objc.Id {
        return objc.msgSend(self, "objectValue", *objc.Id, .{});
    }

    pub fn setObjectValue(self: *@This(), objectValue: *objc.Id) void {
        return objc.msgSend(self, "setObjectValue:", void, .{objectValue});
    }

    pub fn textField(self: *@This()) ?*TextField {
        return objc.msgSend(self, "textField", ?*TextField, .{});
    }

    pub fn setTextField(self: *@This(), textField: ?*TextField) void {
        return objc.msgSend(self, "setTextField:", void, .{textField});
    }

    pub fn imageView(self: *@This()) ?*ImageView {
        return objc.msgSend(self, "imageView", ?*ImageView, .{});
    }

    pub fn setImageView(self: *@This(), imageView: ?*ImageView) void {
        return objc.msgSend(self, "setImageView:", void, .{imageView});
    }

    pub fn backgroundStyle(self: *@This()) BackgroundStyle {
        return objc.msgSend(self, "backgroundStyle", BackgroundStyle, .{});
    }

    pub fn setBackgroundStyle(self: *@This(), backgroundStyle: BackgroundStyle) void {
        return objc.msgSend(self, "setBackgroundStyle:", void, .{backgroundStyle});
    }

    pub fn rowSizeStyle(self: *@This()) TableViewRowSizeStyle {
        return objc.msgSend(self, "rowSizeStyle", TableViewRowSizeStyle, .{});
    }

    pub fn setRowSizeStyle(self: *@This(), rowSizeStyle: TableViewRowSizeStyle) void {
        return objc.msgSend(self, "setRowSizeStyle:", void, .{rowSizeStyle});
    }

    pub fn draggingImageComponents(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "draggingImageComponents", ?*anyopaque, .{});
    }

};

pub const TableColumnResizingOptions = enum(objc.NSUInteger) {
    NoResizing = 0,
    AutoresizingMask = 1,
    UserResizingMask = 2,
};

/// https://developer.apple.com/documentation/AppKit/NSTableColumn?language=objc
pub const TableColumn = opaque {
    pub const InternalInfo = objc.ExternalClass("NSTableColumn", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn initWithIdentifier(self: *@This(), identifier: UserInterfaceItemIdentifier) *@This() {
        return objc.msgSend(self, "initWithIdentifier:", *@This(), .{identifier});
    }

    pub fn initWithCoder(self: *@This(), coder: ?*foundation.Coder) *@This() {
        return objc.msgSend(self, "initWithCoder:", *@This(), .{coder});
    }

    pub fn sizeToFit(self: *@This()) void {
        return objc.msgSend(self, "sizeToFit", void, .{});
    }

    pub fn identifier(self: *@This()) UserInterfaceItemIdentifier {
        return objc.msgSend(self, "identifier", UserInterfaceItemIdentifier, .{});
    }

    pub fn setIdentifier(self: *@This(), identifier: UserInterfaceItemIdentifier) void {
        return objc.msgSend(self, "setIdentifier:", void, .{identifier});
    }

    pub fn tableView(self: *@This()) ?*TableView {
        return objc.msgSend(self, "tableView", ?*TableView, .{});
    }

    pub fn setTableView(self: *@This(), tableView: ?*TableView) void {
        return objc.msgSend(self, "setTableView:", void, .{tableView});
    }

    pub fn width(self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(self, "width", core_foundation.CGFloat, .{});
    }

    pub fn setWidth(self: *@This(), width: core_foundation.CGFloat) void {
        return objc.msgSend(self, "setWidth:", void, .{width});
    }

    pub fn minWidth(self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(self, "minWidth", core_foundation.CGFloat, .{});
    }

    pub fn setMinWidth(self: *@This(), minWidth: core_foundation.CGFloat) void {
        return objc.msgSend(self, "setMinWidth:", void, .{minWidth});
    }

    pub fn maxWidth(self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(self, "maxWidth", core_foundation.CGFloat, .{});
    }

    pub fn setMaxWidth(self: *@This(), maxWidth: core_foundation.CGFloat) void {
        return objc.msgSend(self, "setMaxWidth:", void, .{maxWidth});
    }

    pub fn title(self: *@This()) ?*String {
        return objc.msgSend(self, "title", ?*String, .{});
    }

    pub fn setTitle(self: *@This(), title: ?*String) void {
        return objc.msgSend(self, "setTitle:", void, .{title});
    }

    pub fn headerCell(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "headerCell", ?*anyopaque, .{});
    }

    pub fn setHeaderCell(self: *@This(), headerCell: ?*anyopaque) void {
        return objc.msgSend(self, "setHeaderCell:", void, .{headerCell});
    }

    pub fn isEditable(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isEditable", objc.BOOL, .{});
    }

    pub fn setEditable(self: *@This(), editable: objc.BOOL) void {
        return objc.msgSend(self, "setEditable:", void, .{editable});
    }

    pub fn sortDescriptorPrototype(self: *@This()) ?*SortDescriptor {
        return objc.msgSend(self, "sortDescriptorPrototype", ?*SortDescriptor, .{});
    }

    pub fn setSortDescriptorPrototype(self: *@This(), sortDescriptorPrototype: ?*SortDescriptor) void {
        return objc.msgSend(self, "setSortDescriptorPrototype:", void, .{sortDescriptorPrototype});
    }

    pub fn resizingMask(self: *@This()) TableColumnResizingOptions {
        return objc.msgSend(self, "resizingMask", TableColumnResizingOptions, .{});
    }

    pub fn setResizingMask(self: *@This(), resizingMask: TableColumnResizingOptions) void {
        return objc.msgSend(self, "setResizingMask:", void, .{resizingMask});
    }

    pub fn headerToolTip(self: *@This()) ?*String {
        return objc.msgSend(self, "headerToolTip", ?*String, .{});
    }

    pub fn setHeaderToolTip(self: *@This(), headerToolTip: ?*String) void {
        return objc.msgSend(self, "setHeaderToolTip:", void, .{headerToolTip});
    }

    pub fn isHidden(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isHidden", objc.BOOL, .{});
    }

    pub fn setHidden(self: *@This(), hidden: objc.BOOL) void {
        return objc.msgSend(self, "setHidden:", void, .{hidden});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSTableHeaderCell?language=objc
pub const TableHeaderCell = opaque {
    pub const InternalInfo = objc.ExternalClass("NSTableHeaderCell", @This(), TextFieldCell, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn drawSortIndicatorWithFrameInViewAscendingPriority(self: *@This(), cellFrame: foundation.Rect, controlView: ?*View, ascending: objc.BOOL, priority: objc.NSInteger, ) void {
        return objc.msgSend(self, "drawSortIndicatorWithFrame:inView:ascending:priority:", void, .{cellFrame, controlView, ascending, priority, });
    }

    pub fn sortIndicatorRectForBounds(self: *@This(), rect: foundation.Rect) foundation.Rect {
        return objc.msgSend(self, "sortIndicatorRectForBounds:", foundation.Rect, .{rect});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSTableHeaderView?language=objc
pub const TableHeaderView = opaque {
    pub const InternalInfo = objc.ExternalClass("NSTableHeaderView", @This(), View, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn headerRectOfColumn(self: *@This(), column: objc.NSInteger) foundation.Rect {
        return objc.msgSend(self, "headerRectOfColumn:", foundation.Rect, .{column});
    }

    pub fn columnAtPoint(self: *@This(), point: foundation.Point) objc.NSInteger {
        return objc.msgSend(self, "columnAtPoint:", objc.NSInteger, .{point});
    }

    pub fn tableView(self: *@This()) ?*TableView {
        return objc.msgSend(self, "tableView", ?*TableView, .{});
    }

    pub fn setTableView(self: *@This(), tableView: ?*TableView) void {
        return objc.msgSend(self, "setTableView:", void, .{tableView});
    }

    pub fn draggedColumn(self: *@This()) objc.NSInteger {
        return objc.msgSend(self, "draggedColumn", objc.NSInteger, .{});
    }

    pub fn draggedDistance(self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(self, "draggedDistance", core_foundation.CGFloat, .{});
    }

    pub fn resizedColumn(self: *@This()) objc.NSInteger {
        return objc.msgSend(self, "resizedColumn", objc.NSInteger, .{});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSTableRowView?language=objc
pub const TableRowView = opaque {
    pub const InternalInfo = objc.ExternalClass("NSTableRowView", @This(), View, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn drawBackgroundInRect(self: *@This(), dirtyRect: foundation.Rect) void {
        return objc.msgSend(self, "drawBackgroundInRect:", void, .{dirtyRect});
    }

    pub fn drawSelectionInRect(self: *@This(), dirtyRect: foundation.Rect) void {
        return objc.msgSend(self, "drawSelectionInRect:", void, .{dirtyRect});
    }

    pub fn drawSeparatorInRect(self: *@This(), dirtyRect: foundation.Rect) void {
        return objc.msgSend(self, "drawSeparatorInRect:", void, .{dirtyRect});
    }

    pub fn drawDraggingDestinationFeedbackInRect(self: *@This(), dirtyRect: foundation.Rect) void {
        return objc.msgSend(self, "drawDraggingDestinationFeedbackInRect:", void, .{dirtyRect});
    }

    pub fn viewAtColumn(self: *@This(), column: objc.NSInteger) *objc.Id {
        return objc.msgSend(self, "viewAtColumn:", *objc.Id, .{column});
    }

    pub fn selectionHighlightStyle(self: *@This()) TableViewSelectionHighlightStyle {
        return objc.msgSend(self, "selectionHighlightStyle", TableViewSelectionHighlightStyle, .{});
    }

    pub fn setSelectionHighlightStyle(self: *@This(), selectionHighlightStyle: TableViewSelectionHighlightStyle) void {
        return objc.msgSend(self, "setSelectionHighlightStyle:", void, .{selectionHighlightStyle});
    }

    pub fn isEmphasized(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isEmphasized", objc.BOOL, .{});
    }

    pub fn setEmphasized(self: *@This(), emphasized: objc.BOOL) void {
        return objc.msgSend(self, "setEmphasized:", void, .{emphasized});
    }

    pub fn isGroupRowStyle(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isGroupRowStyle", objc.BOOL, .{});
    }

    pub fn setGroupRowStyle(self: *@This(), groupRowStyle: objc.BOOL) void {
        return objc.msgSend(self, "setGroupRowStyle:", void, .{groupRowStyle});
    }

    pub fn isSelected(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isSelected", objc.BOOL, .{});
    }

    pub fn setSelected(self: *@This(), selected: objc.BOOL) void {
        return objc.msgSend(self, "setSelected:", void, .{selected});
    }

    pub fn isPreviousRowSelected(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isPreviousRowSelected", objc.BOOL, .{});
    }

    pub fn setPreviousRowSelected(self: *@This(), previousRowSelected: objc.BOOL) void {
        return objc.msgSend(self, "setPreviousRowSelected:", void, .{previousRowSelected});
    }

    pub fn isNextRowSelected(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isNextRowSelected", objc.BOOL, .{});
    }

    pub fn setNextRowSelected(self: *@This(), nextRowSelected: objc.BOOL) void {
        return objc.msgSend(self, "setNextRowSelected:", void, .{nextRowSelected});
    }

    pub fn isFloating(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isFloating", objc.BOOL, .{});
    }

    pub fn setFloating(self: *@This(), floating: objc.BOOL) void {
        return objc.msgSend(self, "setFloating:", void, .{floating});
    }

    pub fn isTargetForDropOperation(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isTargetForDropOperation", objc.BOOL, .{});
    }

    pub fn setTargetForDropOperation(self: *@This(), targetForDropOperation: objc.BOOL) void {
        return objc.msgSend(self, "setTargetForDropOperation:", void, .{targetForDropOperation});
    }

    pub fn draggingDestinationFeedbackStyle(self: *@This()) TableViewDraggingDestinationFeedbackStyle {
        return objc.msgSend(self, "draggingDestinationFeedbackStyle", TableViewDraggingDestinationFeedbackStyle, .{});
    }

    pub fn setDraggingDestinationFeedbackStyle(self: *@This(), draggingDestinationFeedbackStyle: TableViewDraggingDestinationFeedbackStyle) void {
        return objc.msgSend(self, "setDraggingDestinationFeedbackStyle:", void, .{draggingDestinationFeedbackStyle});
    }

    pub fn indentationForDropOperation(self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(self, "indentationForDropOperation", core_foundation.CGFloat, .{});
    }

    pub fn setIndentationForDropOperation(self: *@This(), indentationForDropOperation: core_foundation.CGFloat) void {
        return objc.msgSend(self, "setIndentationForDropOperation:", void, .{indentationForDropOperation});
    }

    pub fn interiorBackgroundStyle(self: *@This()) BackgroundStyle {
        return objc.msgSend(self, "interiorBackgroundStyle", BackgroundStyle, .{});
    }

    pub fn backgroundColor(self: *@This()) ?*Color {
        return objc.msgSend(self, "backgroundColor", ?*Color, .{});
    }

    pub fn setBackgroundColor(self: *@This(), backgroundColor: ?*Color) void {
        return objc.msgSend(self, "setBackgroundColor:", void, .{backgroundColor});
    }

    pub fn numberOfColumns(self: *@This()) objc.NSInteger {
        return objc.msgSend(self, "numberOfColumns", objc.NSInteger, .{});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSTableViewDiffableDataSource?language=objc
pub const TableViewDiffableDataSource = opaque {
    pub const InternalInfo = objc.ExternalClass("NSTableViewDiffableDataSource", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn initWithTableViewCellProvider(self: *@This(), tableView: ?*TableView, cellProvider: TableViewDiffableDataSourceCellProvider) *@This() {
        return objc.msgSend(self, "initWithTableView:cellProvider:", *@This(), .{tableView, cellProvider});
    }

    pub fn init(self: *@This()) *@This() {
        return objc.msgSend(self, "init", *@This(), .{});
    }

    pub fn new(self: *@This()) *@This() {
        return objc.msgSend(self, "new", *@This(), .{});
    }

    pub fn snapshot(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "snapshot", ?*anyopaque, .{});
    }

    pub fn applySnapshotAnimatingDifferences(self: *@This(), snapshot: ?*anyopaque, animatingDifferences: objc.BOOL) void {
        return objc.msgSend(self, "applySnapshot:animatingDifferences:", void, .{snapshot, animatingDifferences});
    }

    pub fn applySnapshotAnimatingDifferencesCompletion(self: *@This(), snapshot: ?*anyopaque, animatingDifferences: objc.BOOL, completion: *const fn() callconv(.C) void) void {
        return objc.msgSend(self, "applySnapshot:animatingDifferences:completion:", void, .{snapshot, animatingDifferences, completion});
    }

    pub fn itemIdentifierForRow(self: *@This(), row: objc.NSInteger) void {
        return objc.msgSend(self, "itemIdentifierForRow:", void, .{row});
    }

    pub fn rowForItemIdentifier(self: *@This(), identifier: void) objc.NSInteger {
        return objc.msgSend(self, "rowForItemIdentifier:", objc.NSInteger, .{identifier});
    }

    pub fn sectionIdentifierForRow(self: *@This(), row: objc.NSInteger) void {
        return objc.msgSend(self, "sectionIdentifierForRow:", void, .{row});
    }

    pub fn rowForSectionIdentifier(self: *@This(), identifier: void) objc.NSInteger {
        return objc.msgSend(self, "rowForSectionIdentifier:", objc.NSInteger, .{identifier});
    }

    pub fn rowViewProvider(self: *@This()) TableViewDiffableDataSourceRowProvider {
        return objc.msgSend(self, "rowViewProvider", TableViewDiffableDataSourceRowProvider, .{});
    }

    pub fn setRowViewProvider(self: *@This(), rowViewProvider: TableViewDiffableDataSourceRowProvider) void {
        return objc.msgSend(self, "setRowViewProvider:", void, .{rowViewProvider});
    }

    pub fn sectionHeaderViewProvider(self: *@This()) TableViewDiffableDataSourceSectionHeaderViewProvider {
        return objc.msgSend(self, "sectionHeaderViewProvider", TableViewDiffableDataSourceSectionHeaderViewProvider, .{});
    }

    pub fn setSectionHeaderViewProvider(self: *@This(), sectionHeaderViewProvider: TableViewDiffableDataSourceSectionHeaderViewProvider) void {
        return objc.msgSend(self, "setSectionHeaderViewProvider:", void, .{sectionHeaderViewProvider});
    }

    pub fn defaultRowAnimation(self: *@This()) TableViewAnimationOptions {
        return objc.msgSend(self, "defaultRowAnimation", TableViewAnimationOptions, .{});
    }

    pub fn setDefaultRowAnimation(self: *@This(), defaultRowAnimation: TableViewAnimationOptions) void {
        return objc.msgSend(self, "setDefaultRowAnimation:", void, .{defaultRowAnimation});
    }

};

pub const TableViewDiffableDataSourceCellProvider = *const fn(?*TableView, ?*TableColumn, objc.NSInteger, *objc.Id, ) callconv(.C) ?*View;

pub const TableViewDiffableDataSourceRowProvider = *const fn(?*TableView, objc.NSInteger, *objc.Id) callconv(.C) ?*TableRowView;

pub const TableViewDiffableDataSourceSectionHeaderViewProvider = *const fn(?*TableView, objc.NSInteger, *objc.Id) callconv(.C) ?*View;

pub const TableViewRowActionStyle = enum(objc.NSInteger) {
    Regular = 0,
    Destructive = 1,
};

/// https://developer.apple.com/documentation/AppKit/NSTableViewRowAction?language=objc
pub const TableViewRowAction = opaque {
    pub const InternalInfo = objc.ExternalClass("NSTableViewRowAction", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn rowActionWithStyleTitleHandler(self: *@This(), style: TableViewRowActionStyle, title: ?*String, handler: *const fn(?*TableViewRowAction, objc.NSInteger) callconv(.C) void) *@This() {
        return objc.msgSend(self, "rowActionWithStyle:title:handler:", *@This(), .{style, title, handler});
    }

    pub fn style(self: *@This()) TableViewRowActionStyle {
        return objc.msgSend(self, "style", TableViewRowActionStyle, .{});
    }

    pub fn title(self: *@This()) ?*String {
        return objc.msgSend(self, "title", ?*String, .{});
    }

    pub fn setTitle(self: *@This(), title: ?*String) void {
        return objc.msgSend(self, "setTitle:", void, .{title});
    }

    pub fn backgroundColor(self: *@This()) ?*Color {
        return objc.msgSend(self, "backgroundColor", ?*Color, .{});
    }

    pub fn setBackgroundColor(self: *@This(), backgroundColor: ?*Color) void {
        return objc.msgSend(self, "setBackgroundColor:", void, .{backgroundColor});
    }

    pub fn image(self: *@This()) ?*Image {
        return objc.msgSend(self, "image", ?*Image, .{});
    }

    pub fn setImage(self: *@This(), image: ?*Image) void {
        return objc.msgSend(self, "setImage:", void, .{image});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSOutlineView?language=objc
pub const OutlineView = opaque {
    pub const InternalInfo = objc.ExternalClass("NSOutlineView", @This(), TableView, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn isExpandable(self: *@This(), item: *objc.Id) objc.BOOL {
        return objc.msgSend(self, "isExpandable:", objc.BOOL, .{item});
    }

    pub fn numberOfChildrenOfItem(self: *@This(), item: *objc.Id) objc.NSInteger {
        return objc.msgSend(self, "numberOfChildrenOfItem:", objc.NSInteger, .{item});
    }

    pub fn childOfItem(self: *@This(), index: objc.NSInteger, item: *objc.Id) *objc.Id {
        return objc.msgSend(self, "child:ofItem:", *objc.Id, .{index, item});
    }

    pub fn expandItemExpandChildren(self: *@This(), item: *objc.Id, expandChildren: objc.BOOL) void {
        return objc.msgSend(self, "expandItem:expandChildren:", void, .{item, expandChildren});
    }

    pub fn expandItem(self: *@This(), item: *objc.Id) void {
        return objc.msgSend(self, "expandItem:", void, .{item});
    }

    pub fn collapseItemCollapseChildren(self: *@This(), item: *objc.Id, collapseChildren: objc.BOOL) void {
        return objc.msgSend(self, "collapseItem:collapseChildren:", void, .{item, collapseChildren});
    }

    pub fn collapseItem(self: *@This(), item: *objc.Id) void {
        return objc.msgSend(self, "collapseItem:", void, .{item});
    }

    pub fn reloadItemReloadChildren(self: *@This(), item: *objc.Id, reloadChildren: objc.BOOL) void {
        return objc.msgSend(self, "reloadItem:reloadChildren:", void, .{item, reloadChildren});
    }

    pub fn reloadItem(self: *@This(), item: *objc.Id) void {
        return objc.msgSend(self, "reloadItem:", void, .{item});
    }

    pub fn parentForItem(self: *@This(), item: *objc.Id) *objc.Id {
        return objc.msgSend(self, "parentForItem:", *objc.Id, .{item});
    }

    pub fn childIndexForItem(self: *@This(), item: *objc.Id) objc.NSInteger {
        return objc.msgSend(self, "childIndexForItem:", objc.NSInteger, .{item});
    }

    pub fn itemAtRow(self: *@This(), row: objc.NSInteger) *objc.Id {
        return objc.msgSend(self, "itemAtRow:", *objc.Id, .{row});
    }

    pub fn rowForItem(self: *@This(), item: *objc.Id) objc.NSInteger {
        return objc.msgSend(self, "rowForItem:", objc.NSInteger, .{item});
    }

    pub fn levelForItem(self: *@This(), item: *objc.Id) objc.NSInteger {
        return objc.msgSend(self, "levelForItem:", objc.NSInteger, .{item});
    }

    pub fn levelForRow(self: *@This(), row: objc.NSInteger) objc.NSInteger {
        return objc.msgSend(self, "levelForRow:", objc.NSInteger, .{row});
    }

    pub fn isItemExpanded(self: *@This(), item: *objc.Id) objc.BOOL {
        return objc.msgSend(self, "isItemExpanded:", objc.BOOL, .{item});
    }

    pub fn frameOfOutlineCellAtRow(self: *@This(), row: objc.NSInteger) foundation.Rect {
        return objc.msgSend(self, "frameOfOutlineCellAtRow:", foundation.Rect, .{row});
    }

    pub fn setDropItemDropChildIndex(self: *@This(), item: *objc.Id, index: objc.NSInteger) void {
        return objc.msgSend(self, "setDropItem:dropChildIndex:", void, .{item, index});
    }

    pub fn shouldCollapseAutoExpandedItemsForDeposited(self: *@This(), deposited: objc.BOOL) objc.BOOL {
        return objc.msgSend(self, "shouldCollapseAutoExpandedItemsForDeposited:", objc.BOOL, .{deposited});
    }

    pub fn insertItemsAtIndexesInParentWithAnimation(self: *@This(), indexes: ?*IndexSet, parent: *objc.Id, animationOptions: TableViewAnimationOptions) void {
        return objc.msgSend(self, "insertItemsAtIndexes:inParent:withAnimation:", void, .{indexes, parent, animationOptions});
    }

    pub fn removeItemsAtIndexesInParentWithAnimation(self: *@This(), indexes: ?*IndexSet, parent: *objc.Id, animationOptions: TableViewAnimationOptions) void {
        return objc.msgSend(self, "removeItemsAtIndexes:inParent:withAnimation:", void, .{indexes, parent, animationOptions});
    }

    pub fn moveItemAtIndexInParentToIndexInParent(self: *@This(), fromIndex: objc.NSInteger, oldParent: *objc.Id, toIndex: objc.NSInteger, newParent: *objc.Id, ) void {
        return objc.msgSend(self, "moveItemAtIndex:inParent:toIndex:inParent:", void, .{fromIndex, oldParent, toIndex, newParent, });
    }

    pub fn insertRowsAtIndexesWithAnimation(self: *@This(), indexes: ?*IndexSet, animationOptions: TableViewAnimationOptions) void {
        return objc.msgSend(self, "insertRowsAtIndexes:withAnimation:", void, .{indexes, animationOptions});
    }

    pub fn removeRowsAtIndexesWithAnimation(self: *@This(), indexes: ?*IndexSet, animationOptions: TableViewAnimationOptions) void {
        return objc.msgSend(self, "removeRowsAtIndexes:withAnimation:", void, .{indexes, animationOptions});
    }

    pub fn moveRowAtIndexToIndex(self: *@This(), oldIndex: objc.NSInteger, newIndex: objc.NSInteger) void {
        return objc.msgSend(self, "moveRowAtIndex:toIndex:", void, .{oldIndex, newIndex});
    }

    pub fn delegate(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "delegate", ?*anyopaque, .{});
    }

    pub fn setDelegate(self: *@This(), delegate: ?*anyopaque) void {
        return objc.msgSend(self, "setDelegate:", void, .{delegate});
    }

    pub fn dataSource(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "dataSource", ?*anyopaque, .{});
    }

    pub fn setDataSource(self: *@This(), dataSource: ?*anyopaque) void {
        return objc.msgSend(self, "setDataSource:", void, .{dataSource});
    }

    pub fn outlineTableColumn(self: *@This()) ?*TableColumn {
        return objc.msgSend(self, "outlineTableColumn", ?*TableColumn, .{});
    }

    pub fn setOutlineTableColumn(self: *@This(), outlineTableColumn: ?*TableColumn) void {
        return objc.msgSend(self, "setOutlineTableColumn:", void, .{outlineTableColumn});
    }

    pub fn indentationPerLevel(self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(self, "indentationPerLevel", core_foundation.CGFloat, .{});
    }

    pub fn setIndentationPerLevel(self: *@This(), indentationPerLevel: core_foundation.CGFloat) void {
        return objc.msgSend(self, "setIndentationPerLevel:", void, .{indentationPerLevel});
    }

    pub fn indentationMarkerFollowsCell(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "indentationMarkerFollowsCell", objc.BOOL, .{});
    }

    pub fn setIndentationMarkerFollowsCell(self: *@This(), indentationMarkerFollowsCell: objc.BOOL) void {
        return objc.msgSend(self, "setIndentationMarkerFollowsCell:", void, .{indentationMarkerFollowsCell});
    }

    pub fn autoresizesOutlineColumn(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "autoresizesOutlineColumn", objc.BOOL, .{});
    }

    pub fn setAutoresizesOutlineColumn(self: *@This(), autoresizesOutlineColumn: objc.BOOL) void {
        return objc.msgSend(self, "setAutoresizesOutlineColumn:", void, .{autoresizesOutlineColumn});
    }

    pub fn autosaveExpandedItems(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "autosaveExpandedItems", objc.BOOL, .{});
    }

    pub fn setAutosaveExpandedItems(self: *@This(), autosaveExpandedItems: objc.BOOL) void {
        return objc.msgSend(self, "setAutosaveExpandedItems:", void, .{autosaveExpandedItems});
    }

    pub fn userInterfaceLayoutDirection(self: *@This()) UserInterfaceLayoutDirection {
        return objc.msgSend(self, "userInterfaceLayoutDirection", UserInterfaceLayoutDirection, .{});
    }

    pub fn setUserInterfaceLayoutDirection(self: *@This(), userInterfaceLayoutDirection: UserInterfaceLayoutDirection) void {
        return objc.msgSend(self, "setUserInterfaceLayoutDirection:", void, .{userInterfaceLayoutDirection});
    }

    pub fn stronglyReferencesItems(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "stronglyReferencesItems", objc.BOOL, .{});
    }

    pub fn setStronglyReferencesItems(self: *@This(), stronglyReferencesItems: objc.BOOL) void {
        return objc.msgSend(self, "setStronglyReferencesItems:", void, .{stronglyReferencesItems});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSOutlineViewDataSource?language=objc
pub const OutlineViewDataSource = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{objc.NSObject, });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn outlineViewNumberOfChildrenOfItem(self: *@This(), outlineView: ?*OutlineView, item: *objc.Id) objc.NSInteger {
        return objc.msgSend(self, "outlineView:numberOfChildrenOfItem:", objc.NSInteger, .{outlineView, item});
    }

    pub fn outlineViewChildOfItem(self: *@This(), outlineView: ?*OutlineView, index: objc.NSInteger, item: *objc.Id) *objc.Id {
        return objc.msgSend(self, "outlineView:child:ofItem:", *objc.Id, .{outlineView, index, item});
    }

    pub fn outlineViewIsItemExpandable(self: *@This(), outlineView: ?*OutlineView, item: *objc.Id) objc.BOOL {
        return objc.msgSend(self, "outlineView:isItemExpandable:", objc.BOOL, .{outlineView, item});
    }

    pub fn outlineViewObjectValueForTableColumnByItem(self: *@This(), outlineView: ?*OutlineView, tableColumn: ?*TableColumn, item: *objc.Id) *objc.Id {
        return objc.msgSend(self, "outlineView:objectValueForTableColumn:byItem:", *objc.Id, .{outlineView, tableColumn, item});
    }

    pub fn outlineViewSetObjectValueForTableColumnByItem(self: *@This(), outlineView: ?*OutlineView, object: *objc.Id, tableColumn: ?*TableColumn, item: *objc.Id, ) void {
        return objc.msgSend(self, "outlineView:setObjectValue:forTableColumn:byItem:", void, .{outlineView, object, tableColumn, item, });
    }

    pub fn outlineViewItemForPersistentObject(self: *@This(), outlineView: ?*OutlineView, object: *objc.Id) *objc.Id {
        return objc.msgSend(self, "outlineView:itemForPersistentObject:", *objc.Id, .{outlineView, object});
    }

    pub fn outlineViewPersistentObjectForItem(self: *@This(), outlineView: ?*OutlineView, item: *objc.Id) *objc.Id {
        return objc.msgSend(self, "outlineView:persistentObjectForItem:", *objc.Id, .{outlineView, item});
    }

    pub fn outlineViewSortDescriptorsDidChange(self: *@This(), outlineView: ?*OutlineView, oldDescriptors: ?*anyopaque) void {
        return objc.msgSend(self, "outlineView:sortDescriptorsDidChange:", void, .{outlineView, oldDescriptors});
    }

    pub fn outlineViewPasteboardWriterForItem(self: *@This(), outlineView: ?*OutlineView, item: *objc.Id) ?*anyopaque {
        return objc.msgSend(self, "outlineView:pasteboardWriterForItem:", ?*anyopaque, .{outlineView, item});
    }

    pub fn outlineViewDraggingSessionWillBeginAtPointForItems(self: *@This(), outlineView: ?*OutlineView, session: ?*DraggingSession, screenPoint: foundation.Point, draggedItems: ?*Array, ) void {
        return objc.msgSend(self, "outlineView:draggingSession:willBeginAtPoint:forItems:", void, .{outlineView, session, screenPoint, draggedItems, });
    }

    pub fn outlineViewDraggingSessionEndedAtPointOperation(self: *@This(), outlineView: ?*OutlineView, session: ?*DraggingSession, screenPoint: foundation.Point, operation: DragOperation, ) void {
        return objc.msgSend(self, "outlineView:draggingSession:endedAtPoint:operation:", void, .{outlineView, session, screenPoint, operation, });
    }

    pub fn outlineViewWriteItemsToPasteboard(self: *@This(), outlineView: ?*OutlineView, items: ?*Array, pasteboard: ?*Pasteboard) objc.BOOL {
        return objc.msgSend(self, "outlineView:writeItems:toPasteboard:", objc.BOOL, .{outlineView, items, pasteboard});
    }

    pub fn outlineViewUpdateDraggingItemsForDrag(self: *@This(), outlineView: ?*OutlineView, draggingInfo: ?*anyopaque) void {
        return objc.msgSend(self, "outlineView:updateDraggingItemsForDrag:", void, .{outlineView, draggingInfo});
    }

    pub fn outlineViewValidateDropProposedItemProposedChildIndex(self: *@This(), outlineView: ?*OutlineView, info: ?*anyopaque, item: *objc.Id, index: objc.NSInteger, ) DragOperation {
        return objc.msgSend(self, "outlineView:validateDrop:proposedItem:proposedChildIndex:", DragOperation, .{outlineView, info, item, index, });
    }

    pub fn outlineViewAcceptDropItemChildIndex(self: *@This(), outlineView: ?*OutlineView, info: ?*anyopaque, item: *objc.Id, index: objc.NSInteger, ) objc.BOOL {
        return objc.msgSend(self, "outlineView:acceptDrop:item:childIndex:", objc.BOOL, .{outlineView, info, item, index, });
    }

    pub fn outlineViewNamesOfPromisedFilesDroppedAtDestinationForDraggedItems(self: *@This(), outlineView: ?*OutlineView, dropDestination: ?*URL, items: ?*Array) ?*anyopaque {
        return objc.msgSend(self, "outlineView:namesOfPromisedFilesDroppedAtDestination:forDraggedItems:", ?*anyopaque, .{outlineView, dropDestination, items});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSOutlineViewDelegate?language=objc
pub const OutlineViewDelegate = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{ControlTextEditingDelegate, });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn outlineViewViewForTableColumnItem(self: *@This(), outlineView: ?*OutlineView, tableColumn: ?*TableColumn, item: *objc.Id) ?*View {
        return objc.msgSend(self, "outlineView:viewForTableColumn:item:", ?*View, .{outlineView, tableColumn, item});
    }

    pub fn outlineViewRowViewForItem(self: *@This(), outlineView: ?*OutlineView, item: *objc.Id) ?*TableRowView {
        return objc.msgSend(self, "outlineView:rowViewForItem:", ?*TableRowView, .{outlineView, item});
    }

    pub fn outlineViewDidAddRowViewForRow(self: *@This(), outlineView: ?*OutlineView, rowView: ?*TableRowView, row: objc.NSInteger) void {
        return objc.msgSend(self, "outlineView:didAddRowView:forRow:", void, .{outlineView, rowView, row});
    }

    pub fn outlineViewDidRemoveRowViewForRow(self: *@This(), outlineView: ?*OutlineView, rowView: ?*TableRowView, row: objc.NSInteger) void {
        return objc.msgSend(self, "outlineView:didRemoveRowView:forRow:", void, .{outlineView, rowView, row});
    }

    pub fn outlineViewWillDisplayCellForTableColumnItem(self: *@This(), outlineView: ?*OutlineView, cell: *objc.Id, tableColumn: ?*TableColumn, item: *objc.Id, ) void {
        return objc.msgSend(self, "outlineView:willDisplayCell:forTableColumn:item:", void, .{outlineView, cell, tableColumn, item, });
    }

    pub fn outlineViewShouldEditTableColumnItem(self: *@This(), outlineView: ?*OutlineView, tableColumn: ?*TableColumn, item: *objc.Id) objc.BOOL {
        return objc.msgSend(self, "outlineView:shouldEditTableColumn:item:", objc.BOOL, .{outlineView, tableColumn, item});
    }

    pub fn selectionShouldChangeInOutlineView(self: *@This(), outlineView: ?*OutlineView) objc.BOOL {
        return objc.msgSend(self, "selectionShouldChangeInOutlineView:", objc.BOOL, .{outlineView});
    }

    pub fn outlineViewShouldSelectItem(self: *@This(), outlineView: ?*OutlineView, item: *objc.Id) objc.BOOL {
        return objc.msgSend(self, "outlineView:shouldSelectItem:", objc.BOOL, .{outlineView, item});
    }

    pub fn outlineViewSelectionIndexesForProposedSelection(self: *@This(), outlineView: ?*OutlineView, proposedSelectionIndexes: ?*IndexSet) ?*IndexSet {
        return objc.msgSend(self, "outlineView:selectionIndexesForProposedSelection:", ?*IndexSet, .{outlineView, proposedSelectionIndexes});
    }

    pub fn outlineViewShouldSelectTableColumn(self: *@This(), outlineView: ?*OutlineView, tableColumn: ?*TableColumn) objc.BOOL {
        return objc.msgSend(self, "outlineView:shouldSelectTableColumn:", objc.BOOL, .{outlineView, tableColumn});
    }

    pub fn outlineViewMouseDownInHeaderOfTableColumn(self: *@This(), outlineView: ?*OutlineView, tableColumn: ?*TableColumn) void {
        return objc.msgSend(self, "outlineView:mouseDownInHeaderOfTableColumn:", void, .{outlineView, tableColumn});
    }

    pub fn outlineViewDidClickTableColumn(self: *@This(), outlineView: ?*OutlineView, tableColumn: ?*TableColumn) void {
        return objc.msgSend(self, "outlineView:didClickTableColumn:", void, .{outlineView, tableColumn});
    }

    pub fn outlineViewDidDragTableColumn(self: *@This(), outlineView: ?*OutlineView, tableColumn: ?*TableColumn) void {
        return objc.msgSend(self, "outlineView:didDragTableColumn:", void, .{outlineView, tableColumn});
    }

    pub fn outlineViewToolTipForCellRectTableColumnItemMouseLocation(self: *@This(), outlineView: ?*OutlineView, cell: ?*Cell, rect: foundation.RectPointer, tableColumn: ?*TableColumn, item: *objc.Id, mouseLocation: foundation.Point, ) ?*String {
        return objc.msgSend(self, "outlineView:toolTipForCell:rect:tableColumn:item:mouseLocation:", ?*String, .{outlineView, cell, rect, tableColumn, item, mouseLocation, });
    }

    pub fn outlineViewHeightOfRowByItem(self: *@This(), outlineView: ?*OutlineView, item: *objc.Id) core_foundation.CGFloat {
        return objc.msgSend(self, "outlineView:heightOfRowByItem:", core_foundation.CGFloat, .{outlineView, item});
    }

    pub fn outlineViewTintConfigurationForItem(self: *@This(), outlineView: ?*OutlineView, item: *objc.Id) ?*TintConfiguration {
        return objc.msgSend(self, "outlineView:tintConfigurationForItem:", ?*TintConfiguration, .{outlineView, item});
    }

    pub fn outlineViewTypeSelectStringForTableColumnItem(self: *@This(), outlineView: ?*OutlineView, tableColumn: ?*TableColumn, item: *objc.Id) ?*String {
        return objc.msgSend(self, "outlineView:typeSelectStringForTableColumn:item:", ?*String, .{outlineView, tableColumn, item});
    }

    pub fn outlineViewNextTypeSelectMatchFromItemToItemForString(self: *@This(), outlineView: ?*OutlineView, startItem: *objc.Id, endItem: *objc.Id, searchString: ?*String, ) *objc.Id {
        return objc.msgSend(self, "outlineView:nextTypeSelectMatchFromItem:toItem:forString:", *objc.Id, .{outlineView, startItem, endItem, searchString, });
    }

    pub fn outlineViewShouldTypeSelectForEventWithCurrentSearchString(self: *@This(), outlineView: ?*OutlineView, event: ?*Event, searchString: ?*String) objc.BOOL {
        return objc.msgSend(self, "outlineView:shouldTypeSelectForEvent:withCurrentSearchString:", objc.BOOL, .{outlineView, event, searchString});
    }

    pub fn outlineViewShouldShowCellExpansionForTableColumnItem(self: *@This(), outlineView: ?*OutlineView, tableColumn: ?*TableColumn, item: *objc.Id) objc.BOOL {
        return objc.msgSend(self, "outlineView:shouldShowCellExpansionForTableColumn:item:", objc.BOOL, .{outlineView, tableColumn, item});
    }

    pub fn outlineViewShouldTrackCellForTableColumnItem(self: *@This(), outlineView: ?*OutlineView, cell: ?*Cell, tableColumn: ?*TableColumn, item: *objc.Id, ) objc.BOOL {
        return objc.msgSend(self, "outlineView:shouldTrackCell:forTableColumn:item:", objc.BOOL, .{outlineView, cell, tableColumn, item, });
    }

    pub fn outlineViewDataCellForTableColumnItem(self: *@This(), outlineView: ?*OutlineView, tableColumn: ?*TableColumn, item: *objc.Id) ?*Cell {
        return objc.msgSend(self, "outlineView:dataCellForTableColumn:item:", ?*Cell, .{outlineView, tableColumn, item});
    }

    pub fn outlineViewIsGroupItem(self: *@This(), outlineView: ?*OutlineView, item: *objc.Id) objc.BOOL {
        return objc.msgSend(self, "outlineView:isGroupItem:", objc.BOOL, .{outlineView, item});
    }

    pub fn outlineViewShouldExpandItem(self: *@This(), outlineView: ?*OutlineView, item: *objc.Id) objc.BOOL {
        return objc.msgSend(self, "outlineView:shouldExpandItem:", objc.BOOL, .{outlineView, item});
    }

    pub fn outlineViewShouldCollapseItem(self: *@This(), outlineView: ?*OutlineView, item: *objc.Id) objc.BOOL {
        return objc.msgSend(self, "outlineView:shouldCollapseItem:", objc.BOOL, .{outlineView, item});
    }

    pub fn outlineViewWillDisplayOutlineCellForTableColumnItem(self: *@This(), outlineView: ?*OutlineView, cell: *objc.Id, tableColumn: ?*TableColumn, item: *objc.Id, ) void {
        return objc.msgSend(self, "outlineView:willDisplayOutlineCell:forTableColumn:item:", void, .{outlineView, cell, tableColumn, item, });
    }

    pub fn outlineViewSizeToFitWidthOfColumn(self: *@This(), outlineView: ?*OutlineView, column: objc.NSInteger) core_foundation.CGFloat {
        return objc.msgSend(self, "outlineView:sizeToFitWidthOfColumn:", core_foundation.CGFloat, .{outlineView, column});
    }

    pub fn outlineViewShouldReorderColumnToColumn(self: *@This(), outlineView: ?*OutlineView, columnIndex: objc.NSInteger, newColumnIndex: objc.NSInteger) objc.BOOL {
        return objc.msgSend(self, "outlineView:shouldReorderColumn:toColumn:", objc.BOOL, .{outlineView, columnIndex, newColumnIndex});
    }

    pub fn outlineViewShouldShowOutlineCellForItem(self: *@This(), outlineView: ?*OutlineView, item: *objc.Id) objc.BOOL {
        return objc.msgSend(self, "outlineView:shouldShowOutlineCellForItem:", objc.BOOL, .{outlineView, item});
    }

    pub fn outlineViewUserCanChangeVisibilityOfTableColumn(self: *@This(), outlineView: ?*OutlineView, column: ?*TableColumn) objc.BOOL {
        return objc.msgSend(self, "outlineView:userCanChangeVisibilityOfTableColumn:", objc.BOOL, .{outlineView, column});
    }

    pub fn outlineViewUserDidChangeVisibilityOfTableColumns(self: *@This(), outlineView: ?*OutlineView, columns: ?*anyopaque) void {
        return objc.msgSend(self, "outlineView:userDidChangeVisibilityOfTableColumns:", void, .{outlineView, columns});
    }

    pub fn outlineViewSelectionDidChange(self: *@This(), notification: ?*Notification) void {
        return objc.msgSend(self, "outlineViewSelectionDidChange:", void, .{notification});
    }

    pub fn outlineViewColumnDidMove(self: *@This(), notification: ?*Notification) void {
        return objc.msgSend(self, "outlineViewColumnDidMove:", void, .{notification});
    }

    pub fn outlineViewColumnDidResize(self: *@This(), notification: ?*Notification) void {
        return objc.msgSend(self, "outlineViewColumnDidResize:", void, .{notification});
    }

    pub fn outlineViewSelectionIsChanging(self: *@This(), notification: ?*Notification) void {
        return objc.msgSend(self, "outlineViewSelectionIsChanging:", void, .{notification});
    }

    pub fn outlineViewItemWillExpand(self: *@This(), notification: ?*Notification) void {
        return objc.msgSend(self, "outlineViewItemWillExpand:", void, .{notification});
    }

    pub fn outlineViewItemDidExpand(self: *@This(), notification: ?*Notification) void {
        return objc.msgSend(self, "outlineViewItemDidExpand:", void, .{notification});
    }

    pub fn outlineViewItemWillCollapse(self: *@This(), notification: ?*Notification) void {
        return objc.msgSend(self, "outlineViewItemWillCollapse:", void, .{notification});
    }

    pub fn outlineViewItemDidCollapse(self: *@This(), notification: ?*Notification) void {
        return objc.msgSend(self, "outlineViewItemDidCollapse:", void, .{notification});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSInputServiceProvider?language=objc
pub const InputServiceProvider = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn insertTextClient(self: *@This(), string: *objc.Id, sender: *objc.Id) void {
        return objc.msgSend(self, "insertText:client:", void, .{string, sender});
    }

    pub fn doCommandBySelectorClient(self: *@This(), selector: *objc.SEL, sender: *objc.Id) void {
        return objc.msgSend(self, "doCommandBySelector:client:", void, .{selector, sender});
    }

    pub fn markedTextAbandoned(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "markedTextAbandoned:", void, .{sender});
    }

    pub fn markedTextSelectionChangedClient(self: *@This(), newSel: foundation.Range, sender: *objc.Id) void {
        return objc.msgSend(self, "markedTextSelectionChanged:client:", void, .{newSel, sender});
    }

    pub fn terminate(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "terminate:", void, .{sender});
    }

    pub fn canBeDisabled(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "canBeDisabled", objc.BOOL, .{});
    }

    pub fn wantsToInterpretAllKeystrokes(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "wantsToInterpretAllKeystrokes", objc.BOOL, .{});
    }

    pub fn wantsToHandleMouseEvents(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "wantsToHandleMouseEvents", objc.BOOL, .{});
    }

    pub fn wantsToDelayTextChangeNotifications(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "wantsToDelayTextChangeNotifications", objc.BOOL, .{});
    }

    pub fn inputClientBecomeActive(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "inputClientBecomeActive:", void, .{sender});
    }

    pub fn inputClientResignActive(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "inputClientResignActive:", void, .{sender});
    }

    pub fn inputClientEnabled(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "inputClientEnabled:", void, .{sender});
    }

    pub fn inputClientDisabled(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "inputClientDisabled:", void, .{sender});
    }

    pub fn activeConversationWillChangeFromOldConversation(self: *@This(), sender: *objc.Id, oldConversation: objc.NSInteger) void {
        return objc.msgSend(self, "activeConversationWillChange:fromOldConversation:", void, .{sender, oldConversation});
    }

    pub fn activeConversationChangedToNewConversation(self: *@This(), sender: *objc.Id, newConversation: objc.NSInteger) void {
        return objc.msgSend(self, "activeConversationChanged:toNewConversation:", void, .{sender, newConversation});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSInputServerMouseTracker?language=objc
pub const InputServerMouseTracker = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn mouseDownOnCharacterIndexAtCoordinateWithModifierClient(self: *@This(), index: objc.NSUInteger, point: foundation.Point, flags: objc.NSUInteger, sender: *objc.Id, ) objc.BOOL {
        return objc.msgSend(self, "mouseDownOnCharacterIndex:atCoordinate:withModifier:client:", objc.BOOL, .{index, point, flags, sender, });
    }

    pub fn mouseDraggedOnCharacterIndexAtCoordinateWithModifierClient(self: *@This(), index: objc.NSUInteger, point: foundation.Point, flags: objc.NSUInteger, sender: *objc.Id, ) objc.BOOL {
        return objc.msgSend(self, "mouseDraggedOnCharacterIndex:atCoordinate:withModifier:client:", objc.BOOL, .{index, point, flags, sender, });
    }

    pub fn mouseUpOnCharacterIndexAtCoordinateWithModifierClient(self: *@This(), index: objc.NSUInteger, point: foundation.Point, flags: objc.NSUInteger, sender: *objc.Id, ) void {
        return objc.msgSend(self, "mouseUpOnCharacterIndex:atCoordinate:withModifier:client:", void, .{index, point, flags, sender, });
    }

};

/// https://developer.apple.com/documentation/AppKit/NSInputServer?language=objc
pub const InputServer = opaque {
    pub const InternalInfo = objc.ExternalClass("NSInputServer", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn initWithDelegateName(self: *@This(), delegate: *objc.Id, name: ?*String) *@This() {
        return objc.msgSend(self, "initWithDelegate:name:", *@This(), .{delegate, name});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSStringDrawingContext?language=objc
pub const StringDrawingContext = opaque {
    pub const InternalInfo = objc.ExternalClass("NSStringDrawingContext", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn minimumScaleFactor(self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(self, "minimumScaleFactor", core_foundation.CGFloat, .{});
    }

    pub fn setMinimumScaleFactor(self: *@This(), minimumScaleFactor: core_foundation.CGFloat) void {
        return objc.msgSend(self, "setMinimumScaleFactor:", void, .{minimumScaleFactor});
    }

    pub fn actualScaleFactor(self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(self, "actualScaleFactor", core_foundation.CGFloat, .{});
    }

    pub fn totalBounds(self: *@This()) core_foundation.CGRect {
        return objc.msgSend(self, "totalBounds", core_foundation.CGRect, .{});
    }

};

pub const StringDrawingOptions = enum(objc.NSInteger) {
    UsesLineFragmentOrigin = 1,
    UsesFontLeading = 2,
    UsesDeviceMetrics = 8,
    TruncatesLastVisibleLine = 32,
    DisableScreenFontSubstitution = 4,
    OneShot = 16,
};

/// https://developer.apple.com/documentation/AppKit/NSRulerMarker?language=objc
pub const RulerMarker = opaque {
    pub const InternalInfo = objc.ExternalClass("NSRulerMarker", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn initWithRulerViewMarkerLocationImageImageOrigin(self: *@This(), ruler: ?*RulerView, location: core_foundation.CGFloat, image: ?*Image, imageOrigin: foundation.Point, ) *@This() {
        return objc.msgSend(self, "initWithRulerView:markerLocation:image:imageOrigin:", *@This(), .{ruler, location, image, imageOrigin, });
    }

    pub fn initWithCoder(self: *@This(), coder: ?*foundation.Coder) *@This() {
        return objc.msgSend(self, "initWithCoder:", *@This(), .{coder});
    }

    pub fn init(self: *@This()) *@This() {
        return objc.msgSend(self, "init", *@This(), .{});
    }

    pub fn drawRect(self: *@This(), rect: foundation.Rect) void {
        return objc.msgSend(self, "drawRect:", void, .{rect});
    }

    pub fn trackMouseAdding(self: *@This(), mouseDownEvent: ?*Event, isAdding: objc.BOOL) objc.BOOL {
        return objc.msgSend(self, "trackMouse:adding:", objc.BOOL, .{mouseDownEvent, isAdding});
    }

    pub fn ruler(self: *@This()) ?*RulerView {
        return objc.msgSend(self, "ruler", ?*RulerView, .{});
    }

    pub fn markerLocation(self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(self, "markerLocation", core_foundation.CGFloat, .{});
    }

    pub fn setMarkerLocation(self: *@This(), markerLocation: core_foundation.CGFloat) void {
        return objc.msgSend(self, "setMarkerLocation:", void, .{markerLocation});
    }

    pub fn image(self: *@This()) ?*Image {
        return objc.msgSend(self, "image", ?*Image, .{});
    }

    pub fn setImage(self: *@This(), image: ?*Image) void {
        return objc.msgSend(self, "setImage:", void, .{image});
    }

    pub fn imageOrigin(self: *@This()) foundation.Point {
        return objc.msgSend(self, "imageOrigin", foundation.Point, .{});
    }

    pub fn setImageOrigin(self: *@This(), imageOrigin: foundation.Point) void {
        return objc.msgSend(self, "setImageOrigin:", void, .{imageOrigin});
    }

    pub fn isMovable(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isMovable", objc.BOOL, .{});
    }

    pub fn setMovable(self: *@This(), movable: objc.BOOL) void {
        return objc.msgSend(self, "setMovable:", void, .{movable});
    }

    pub fn isRemovable(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isRemovable", objc.BOOL, .{});
    }

    pub fn setRemovable(self: *@This(), removable: objc.BOOL) void {
        return objc.msgSend(self, "setRemovable:", void, .{removable});
    }

    pub fn isDragging(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isDragging", objc.BOOL, .{});
    }

    pub fn representedObject(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "representedObject", ?*anyopaque, .{});
    }

    pub fn setRepresentedObject(self: *@This(), representedObject: ?*anyopaque) void {
        return objc.msgSend(self, "setRepresentedObject:", void, .{representedObject});
    }

    pub fn imageRectInRuler(self: *@This()) foundation.Rect {
        return objc.msgSend(self, "imageRectInRuler", foundation.Rect, .{});
    }

    pub fn thicknessRequiredInRuler(self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(self, "thicknessRequiredInRuler", core_foundation.CGFloat, .{});
    }

};

pub const RulerOrientation = enum(objc.NSUInteger) {
    HorizontalRuler = 0,
    VerticalRuler = 1,
};

pub const RulerViewUnitName = ?*String;

/// https://developer.apple.com/documentation/AppKit/NSRulerView?language=objc
pub const RulerView = opaque {
    pub const InternalInfo = objc.ExternalClass("NSRulerView", @This(), View, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn registerUnitWithNameAbbreviationUnitToPointsConversionFactorStepUpCycleStepDownCycle(self: *@This(), unitName: RulerViewUnitName, abbreviation: ?*String, conversionFactor: core_foundation.CGFloat, stepUpCycle: ?*anyopaque, stepDownCycle: ?*anyopaque, ) void {
        return objc.msgSend(self, "registerUnitWithName:abbreviation:unitToPointsConversionFactor:stepUpCycle:stepDownCycle:", void, .{unitName, abbreviation, conversionFactor, stepUpCycle, stepDownCycle, });
    }

    pub fn initWithCoder(self: *@This(), coder: ?*foundation.Coder) *@This() {
        return objc.msgSend(self, "initWithCoder:", *@This(), .{coder});
    }

    pub fn initWithScrollViewOrientation(self: *@This(), scrollView: ?*ScrollView, orientation: RulerOrientation) *@This() {
        return objc.msgSend(self, "initWithScrollView:orientation:", *@This(), .{scrollView, orientation});
    }

    pub fn addMarker(self: *@This(), marker: ?*RulerMarker) void {
        return objc.msgSend(self, "addMarker:", void, .{marker});
    }

    pub fn removeMarker(self: *@This(), marker: ?*RulerMarker) void {
        return objc.msgSend(self, "removeMarker:", void, .{marker});
    }

    pub fn trackMarkerWithMouseEvent(self: *@This(), marker: ?*RulerMarker, event: ?*Event) objc.BOOL {
        return objc.msgSend(self, "trackMarker:withMouseEvent:", objc.BOOL, .{marker, event});
    }

    pub fn moveRulerlineFromLocationToLocation(self: *@This(), oldLocation: core_foundation.CGFloat, newLocation: core_foundation.CGFloat) void {
        return objc.msgSend(self, "moveRulerlineFromLocation:toLocation:", void, .{oldLocation, newLocation});
    }

    pub fn invalidateHashMarks(self: *@This()) void {
        return objc.msgSend(self, "invalidateHashMarks", void, .{});
    }

    pub fn drawHashMarksAndLabelsInRect(self: *@This(), rect: foundation.Rect) void {
        return objc.msgSend(self, "drawHashMarksAndLabelsInRect:", void, .{rect});
    }

    pub fn drawMarkersInRect(self: *@This(), rect: foundation.Rect) void {
        return objc.msgSend(self, "drawMarkersInRect:", void, .{rect});
    }

    pub fn scrollView(self: *@This()) ?*ScrollView {
        return objc.msgSend(self, "scrollView", ?*ScrollView, .{});
    }

    pub fn setScrollView(self: *@This(), scrollView: ?*ScrollView) void {
        return objc.msgSend(self, "setScrollView:", void, .{scrollView});
    }

    pub fn orientation(self: *@This()) RulerOrientation {
        return objc.msgSend(self, "orientation", RulerOrientation, .{});
    }

    pub fn setOrientation(self: *@This(), orientation: RulerOrientation) void {
        return objc.msgSend(self, "setOrientation:", void, .{orientation});
    }

    pub fn baselineLocation(self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(self, "baselineLocation", core_foundation.CGFloat, .{});
    }

    pub fn requiredThickness(self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(self, "requiredThickness", core_foundation.CGFloat, .{});
    }

    pub fn ruleThickness(self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(self, "ruleThickness", core_foundation.CGFloat, .{});
    }

    pub fn setRuleThickness(self: *@This(), ruleThickness: core_foundation.CGFloat) void {
        return objc.msgSend(self, "setRuleThickness:", void, .{ruleThickness});
    }

    pub fn reservedThicknessForMarkers(self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(self, "reservedThicknessForMarkers", core_foundation.CGFloat, .{});
    }

    pub fn setReservedThicknessForMarkers(self: *@This(), reservedThicknessForMarkers: core_foundation.CGFloat) void {
        return objc.msgSend(self, "setReservedThicknessForMarkers:", void, .{reservedThicknessForMarkers});
    }

    pub fn reservedThicknessForAccessoryView(self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(self, "reservedThicknessForAccessoryView", core_foundation.CGFloat, .{});
    }

    pub fn setReservedThicknessForAccessoryView(self: *@This(), reservedThicknessForAccessoryView: core_foundation.CGFloat) void {
        return objc.msgSend(self, "setReservedThicknessForAccessoryView:", void, .{reservedThicknessForAccessoryView});
    }

    pub fn measurementUnits(self: *@This()) RulerViewUnitName {
        return objc.msgSend(self, "measurementUnits", RulerViewUnitName, .{});
    }

    pub fn setMeasurementUnits(self: *@This(), measurementUnits: RulerViewUnitName) void {
        return objc.msgSend(self, "setMeasurementUnits:", void, .{measurementUnits});
    }

    pub fn originOffset(self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(self, "originOffset", core_foundation.CGFloat, .{});
    }

    pub fn setOriginOffset(self: *@This(), originOffset: core_foundation.CGFloat) void {
        return objc.msgSend(self, "setOriginOffset:", void, .{originOffset});
    }

    pub fn clientView(self: *@This()) ?*View {
        return objc.msgSend(self, "clientView", ?*View, .{});
    }

    pub fn setClientView(self: *@This(), clientView: ?*View) void {
        return objc.msgSend(self, "setClientView:", void, .{clientView});
    }

    pub fn markers(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "markers", ?*anyopaque, .{});
    }

    pub fn setMarkers(self: *@This(), markers: ?*anyopaque) void {
        return objc.msgSend(self, "setMarkers:", void, .{markers});
    }

    pub fn accessoryView(self: *@This()) ?*View {
        return objc.msgSend(self, "accessoryView", ?*View, .{});
    }

    pub fn setAccessoryView(self: *@This(), accessoryView: ?*View) void {
        return objc.msgSend(self, "setAccessoryView:", void, .{accessoryView});
    }

    pub fn isFlipped(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isFlipped", objc.BOOL, .{});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSSecureTextField?language=objc
pub const SecureTextField = opaque {
    pub const InternalInfo = objc.ExternalClass("NSSecureTextField", @This(), TextField, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;
};

/// https://developer.apple.com/documentation/AppKit/NSSecureTextFieldCell?language=objc
pub const SecureTextFieldCell = opaque {
    pub const InternalInfo = objc.ExternalClass("NSSecureTextFieldCell", @This(), TextFieldCell, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn echosBullets(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "echosBullets", objc.BOOL, .{});
    }

    pub fn setEchosBullets(self: *@This(), echosBullets: objc.BOOL) void {
        return objc.msgSend(self, "setEchosBullets:", void, .{echosBullets});
    }

};

pub const InterfaceStyle = objc.NSUInteger;

pub extern "AppKit" fn InterfaceStyleForKey(key: ?*String, responder: ?*Responder) callconv(.C) InterfaceStyle;

pub const ProgressIndicatorStyle = enum(objc.NSUInteger) {
    Bar = 0,
    Spinning = 1,
};

/// https://developer.apple.com/documentation/AppKit/NSProgressIndicator?language=objc
pub const ProgressIndicator = opaque {
    pub const InternalInfo = objc.ExternalClass("NSProgressIndicator", @This(), View, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn incrementBy(self: *@This(), delta: f64) void {
        return objc.msgSend(self, "incrementBy:", void, .{delta});
    }

    pub fn startAnimation(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "startAnimation:", void, .{sender});
    }

    pub fn stopAnimation(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "stopAnimation:", void, .{sender});
    }

    pub fn sizeToFit(self: *@This()) void {
        return objc.msgSend(self, "sizeToFit", void, .{});
    }

    pub fn isIndeterminate(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isIndeterminate", objc.BOOL, .{});
    }

    pub fn setIndeterminate(self: *@This(), indeterminate: objc.BOOL) void {
        return objc.msgSend(self, "setIndeterminate:", void, .{indeterminate});
    }

    pub fn controlSize(self: *@This()) ControlSize {
        return objc.msgSend(self, "controlSize", ControlSize, .{});
    }

    pub fn setControlSize(self: *@This(), controlSize: ControlSize) void {
        return objc.msgSend(self, "setControlSize:", void, .{controlSize});
    }

    pub fn doubleValue(self: *@This()) f64 {
        return objc.msgSend(self, "doubleValue", f64, .{});
    }

    pub fn setDoubleValue(self: *@This(), doubleValue: f64) void {
        return objc.msgSend(self, "setDoubleValue:", void, .{doubleValue});
    }

    pub fn minValue(self: *@This()) f64 {
        return objc.msgSend(self, "minValue", f64, .{});
    }

    pub fn setMinValue(self: *@This(), minValue: f64) void {
        return objc.msgSend(self, "setMinValue:", void, .{minValue});
    }

    pub fn maxValue(self: *@This()) f64 {
        return objc.msgSend(self, "maxValue", f64, .{});
    }

    pub fn setMaxValue(self: *@This(), maxValue: f64) void {
        return objc.msgSend(self, "setMaxValue:", void, .{maxValue});
    }

    pub fn observedProgress(self: *@This()) ?*foundation.Progress {
        return objc.msgSend(self, "observedProgress", ?*foundation.Progress, .{});
    }

    pub fn setObservedProgress(self: *@This(), observedProgress: ?*foundation.Progress) void {
        return objc.msgSend(self, "setObservedProgress:", void, .{observedProgress});
    }

    pub fn usesThreadedAnimation(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "usesThreadedAnimation", objc.BOOL, .{});
    }

    pub fn setUsesThreadedAnimation(self: *@This(), usesThreadedAnimation: objc.BOOL) void {
        return objc.msgSend(self, "setUsesThreadedAnimation:", void, .{usesThreadedAnimation});
    }

    pub fn style(self: *@This()) ProgressIndicatorStyle {
        return objc.msgSend(self, "style", ProgressIndicatorStyle, .{});
    }

    pub fn setStyle(self: *@This(), style: ProgressIndicatorStyle) void {
        return objc.msgSend(self, "setStyle:", void, .{style});
    }

    pub fn isDisplayedWhenStopped(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isDisplayedWhenStopped", objc.BOOL, .{});
    }

    pub fn setDisplayedWhenStopped(self: *@This(), displayedWhenStopped: objc.BOOL) void {
        return objc.msgSend(self, "setDisplayedWhenStopped:", void, .{displayedWhenStopped});
    }

};

pub const ProgressIndicatorThickness = enum(objc.NSUInteger) {
    PreferredThickness = 14,
    PreferredSmallThickness = 10,
    PreferredLargeThickness = 18,
    PreferredAquaThickness = 12,
};

pub const TabViewType = enum(objc.NSUInteger) {
    TopTabsBezelBorder = 0,
    LeftTabsBezelBorder = 1,
    BottomTabsBezelBorder = 2,
    RightTabsBezelBorder = 3,
    NoTabsBezelBorder = 4,
    NoTabsLineBorder = 5,
    NoTabsNoBorder = 6,
};

pub const TabPosition = enum(objc.NSUInteger) {
    None = 0,
    Top = 1,
    Left = 2,
    Bottom = 3,
    Right = 4,
};

pub const TabViewBorderType = enum(objc.NSUInteger) {
    None = 0,
    Line = 1,
    Bezel = 2,
};

/// https://developer.apple.com/documentation/AppKit/NSTabView?language=objc
pub const TabView = opaque {
    pub const InternalInfo = objc.ExternalClass("NSTabView", @This(), View, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn selectTabViewItem(self: *@This(), tabViewItem: ?*TabViewItem) void {
        return objc.msgSend(self, "selectTabViewItem:", void, .{tabViewItem});
    }

    pub fn selectTabViewItemAtIndex(self: *@This(), index: objc.NSInteger) void {
        return objc.msgSend(self, "selectTabViewItemAtIndex:", void, .{index});
    }

    pub fn selectTabViewItemWithIdentifier(self: *@This(), identifier: *objc.Id) void {
        return objc.msgSend(self, "selectTabViewItemWithIdentifier:", void, .{identifier});
    }

    pub fn takeSelectedTabViewItemFromSender(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "takeSelectedTabViewItemFromSender:", void, .{sender});
    }

    pub fn selectFirstTabViewItem(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "selectFirstTabViewItem:", void, .{sender});
    }

    pub fn selectLastTabViewItem(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "selectLastTabViewItem:", void, .{sender});
    }

    pub fn selectNextTabViewItem(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "selectNextTabViewItem:", void, .{sender});
    }

    pub fn selectPreviousTabViewItem(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "selectPreviousTabViewItem:", void, .{sender});
    }

    pub fn addTabViewItem(self: *@This(), tabViewItem: ?*TabViewItem) void {
        return objc.msgSend(self, "addTabViewItem:", void, .{tabViewItem});
    }

    pub fn insertTabViewItemAtIndex(self: *@This(), tabViewItem: ?*TabViewItem, index: objc.NSInteger) void {
        return objc.msgSend(self, "insertTabViewItem:atIndex:", void, .{tabViewItem, index});
    }

    pub fn removeTabViewItem(self: *@This(), tabViewItem: ?*TabViewItem) void {
        return objc.msgSend(self, "removeTabViewItem:", void, .{tabViewItem});
    }

    pub fn tabViewItemAtPoint(self: *@This(), point: foundation.Point) ?*TabViewItem {
        return objc.msgSend(self, "tabViewItemAtPoint:", ?*TabViewItem, .{point});
    }

    pub fn indexOfTabViewItem(self: *@This(), tabViewItem: ?*TabViewItem) objc.NSInteger {
        return objc.msgSend(self, "indexOfTabViewItem:", objc.NSInteger, .{tabViewItem});
    }

    pub fn tabViewItemAtIndex(self: *@This(), index: objc.NSInteger) ?*TabViewItem {
        return objc.msgSend(self, "tabViewItemAtIndex:", ?*TabViewItem, .{index});
    }

    pub fn indexOfTabViewItemWithIdentifier(self: *@This(), identifier: *objc.Id) objc.NSInteger {
        return objc.msgSend(self, "indexOfTabViewItemWithIdentifier:", objc.NSInteger, .{identifier});
    }

    pub fn selectedTabViewItem(self: *@This()) ?*TabViewItem {
        return objc.msgSend(self, "selectedTabViewItem", ?*TabViewItem, .{});
    }

    pub fn font(self: *@This()) ?*Font {
        return objc.msgSend(self, "font", ?*Font, .{});
    }

    pub fn setFont(self: *@This(), font: ?*Font) void {
        return objc.msgSend(self, "setFont:", void, .{font});
    }

    pub fn tabViewType(self: *@This()) TabViewType {
        return objc.msgSend(self, "tabViewType", TabViewType, .{});
    }

    pub fn setTabViewType(self: *@This(), tabViewType: TabViewType) void {
        return objc.msgSend(self, "setTabViewType:", void, .{tabViewType});
    }

    pub fn tabPosition(self: *@This()) TabPosition {
        return objc.msgSend(self, "tabPosition", TabPosition, .{});
    }

    pub fn setTabPosition(self: *@This(), tabPosition: TabPosition) void {
        return objc.msgSend(self, "setTabPosition:", void, .{tabPosition});
    }

    pub fn tabViewBorderType(self: *@This()) TabViewBorderType {
        return objc.msgSend(self, "tabViewBorderType", TabViewBorderType, .{});
    }

    pub fn setTabViewBorderType(self: *@This(), tabViewBorderType: TabViewBorderType) void {
        return objc.msgSend(self, "setTabViewBorderType:", void, .{tabViewBorderType});
    }

    pub fn tabViewItems(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "tabViewItems", ?*anyopaque, .{});
    }

    pub fn setTabViewItems(self: *@This(), tabViewItems: ?*anyopaque) void {
        return objc.msgSend(self, "setTabViewItems:", void, .{tabViewItems});
    }

    pub fn allowsTruncatedLabels(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "allowsTruncatedLabels", objc.BOOL, .{});
    }

    pub fn setAllowsTruncatedLabels(self: *@This(), allowsTruncatedLabels: objc.BOOL) void {
        return objc.msgSend(self, "setAllowsTruncatedLabels:", void, .{allowsTruncatedLabels});
    }

    pub fn minimumSize(self: *@This()) foundation.Size {
        return objc.msgSend(self, "minimumSize", foundation.Size, .{});
    }

    pub fn drawsBackground(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "drawsBackground", objc.BOOL, .{});
    }

    pub fn setDrawsBackground(self: *@This(), drawsBackground: objc.BOOL) void {
        return objc.msgSend(self, "setDrawsBackground:", void, .{drawsBackground});
    }

    pub fn controlSize(self: *@This()) ControlSize {
        return objc.msgSend(self, "controlSize", ControlSize, .{});
    }

    pub fn setControlSize(self: *@This(), controlSize: ControlSize) void {
        return objc.msgSend(self, "setControlSize:", void, .{controlSize});
    }

    pub fn delegate(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "delegate", ?*anyopaque, .{});
    }

    pub fn setDelegate(self: *@This(), delegate: ?*anyopaque) void {
        return objc.msgSend(self, "setDelegate:", void, .{delegate});
    }

    pub fn contentRect(self: *@This()) foundation.Rect {
        return objc.msgSend(self, "contentRect", foundation.Rect, .{});
    }

    pub fn numberOfTabViewItems(self: *@This()) objc.NSInteger {
        return objc.msgSend(self, "numberOfTabViewItems", objc.NSInteger, .{});
    }

    pub fn controlTint(self: *@This()) ControlTint {
        return objc.msgSend(self, "controlTint", ControlTint, .{});
    }

    pub fn setControlTint(self: *@This(), controlTint: ControlTint) void {
        return objc.msgSend(self, "setControlTint:", void, .{controlTint});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSTabViewDelegate?language=objc
pub const TabViewDelegate = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{objc.NSObject, });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn tabViewShouldSelectTabViewItem(self: *@This(), tabView: ?*TabView, tabViewItem: ?*TabViewItem) objc.BOOL {
        return objc.msgSend(self, "tabView:shouldSelectTabViewItem:", objc.BOOL, .{tabView, tabViewItem});
    }

    pub fn tabViewWillSelectTabViewItem(self: *@This(), tabView: ?*TabView, tabViewItem: ?*TabViewItem) void {
        return objc.msgSend(self, "tabView:willSelectTabViewItem:", void, .{tabView, tabViewItem});
    }

    pub fn tabViewDidSelectTabViewItem(self: *@This(), tabView: ?*TabView, tabViewItem: ?*TabViewItem) void {
        return objc.msgSend(self, "tabView:didSelectTabViewItem:", void, .{tabView, tabViewItem});
    }

    pub fn tabViewDidChangeNumberOfTabViewItems(self: *@This(), tabView: ?*TabView) void {
        return objc.msgSend(self, "tabViewDidChangeNumberOfTabViewItems:", void, .{tabView});
    }

};

pub const TabViewControllerTabStyle = enum(objc.NSInteger) {
    SegmentedControlOnTop = 0,
    SegmentedControlOnBottom = 1,
    Toolbar = 2,
    Unspecified = -1,
};

/// https://developer.apple.com/documentation/AppKit/NSTabViewController?language=objc
pub const TabViewController = opaque {
    pub const InternalInfo = objc.ExternalClass("NSTabViewController", @This(), ViewController, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn addTabViewItem(self: *@This(), tabViewItem: ?*TabViewItem) void {
        return objc.msgSend(self, "addTabViewItem:", void, .{tabViewItem});
    }

    pub fn insertTabViewItemAtIndex(self: *@This(), tabViewItem: ?*TabViewItem, index: objc.NSInteger) void {
        return objc.msgSend(self, "insertTabViewItem:atIndex:", void, .{tabViewItem, index});
    }

    pub fn removeTabViewItem(self: *@This(), tabViewItem: ?*TabViewItem) void {
        return objc.msgSend(self, "removeTabViewItem:", void, .{tabViewItem});
    }

    pub fn tabViewItemForViewController(self: *@This(), viewController: ?*ViewController) ?*TabViewItem {
        return objc.msgSend(self, "tabViewItemForViewController:", ?*TabViewItem, .{viewController});
    }

    pub fn viewDidLoad(self: *@This()) void {
        return objc.msgSend(self, "viewDidLoad", void, .{});
    }

    pub fn tabViewWillSelectTabViewItem(self: *@This(), tabView: ?*TabView, tabViewItem: ?*TabViewItem) void {
        return objc.msgSend(self, "tabView:willSelectTabViewItem:", void, .{tabView, tabViewItem});
    }

    pub fn tabViewDidSelectTabViewItem(self: *@This(), tabView: ?*TabView, tabViewItem: ?*TabViewItem) void {
        return objc.msgSend(self, "tabView:didSelectTabViewItem:", void, .{tabView, tabViewItem});
    }

    pub fn tabViewShouldSelectTabViewItem(self: *@This(), tabView: ?*TabView, tabViewItem: ?*TabViewItem) objc.BOOL {
        return objc.msgSend(self, "tabView:shouldSelectTabViewItem:", objc.BOOL, .{tabView, tabViewItem});
    }

    pub fn toolbarItemForItemIdentifierWillBeInsertedIntoToolbar(self: *@This(), toolbar: ?*Toolbar, itemIdentifier: ToolbarItemIdentifier, flag: objc.BOOL) ?*ToolbarItem {
        return objc.msgSend(self, "toolbar:itemForItemIdentifier:willBeInsertedIntoToolbar:", ?*ToolbarItem, .{toolbar, itemIdentifier, flag});
    }

    pub fn toolbarDefaultItemIdentifiers(self: *@This(), toolbar: ?*Toolbar) ?*anyopaque {
        return objc.msgSend(self, "toolbarDefaultItemIdentifiers:", ?*anyopaque, .{toolbar});
    }

    pub fn toolbarAllowedItemIdentifiers(self: *@This(), toolbar: ?*Toolbar) ?*anyopaque {
        return objc.msgSend(self, "toolbarAllowedItemIdentifiers:", ?*anyopaque, .{toolbar});
    }

    pub fn toolbarSelectableItemIdentifiers(self: *@This(), toolbar: ?*Toolbar) ?*anyopaque {
        return objc.msgSend(self, "toolbarSelectableItemIdentifiers:", ?*anyopaque, .{toolbar});
    }

    pub fn tabStyle(self: *@This()) TabViewControllerTabStyle {
        return objc.msgSend(self, "tabStyle", TabViewControllerTabStyle, .{});
    }

    pub fn setTabStyle(self: *@This(), tabStyle: TabViewControllerTabStyle) void {
        return objc.msgSend(self, "setTabStyle:", void, .{tabStyle});
    }

    pub fn tabView(self: *@This()) ?*TabView {
        return objc.msgSend(self, "tabView", ?*TabView, .{});
    }

    pub fn setTabView(self: *@This(), tabView: ?*TabView) void {
        return objc.msgSend(self, "setTabView:", void, .{tabView});
    }

    pub fn transitionOptions(self: *@This()) ViewControllerTransitionOptions {
        return objc.msgSend(self, "transitionOptions", ViewControllerTransitionOptions, .{});
    }

    pub fn setTransitionOptions(self: *@This(), transitionOptions: ViewControllerTransitionOptions) void {
        return objc.msgSend(self, "setTransitionOptions:", void, .{transitionOptions});
    }

    pub fn canPropagateSelectedChildViewControllerTitle(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "canPropagateSelectedChildViewControllerTitle", objc.BOOL, .{});
    }

    pub fn setCanPropagateSelectedChildViewControllerTitle(self: *@This(), canPropagateSelectedChildViewControllerTitle: objc.BOOL) void {
        return objc.msgSend(self, "setCanPropagateSelectedChildViewControllerTitle:", void, .{canPropagateSelectedChildViewControllerTitle});
    }

    pub fn tabViewItems(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "tabViewItems", ?*anyopaque, .{});
    }

    pub fn setTabViewItems(self: *@This(), tabViewItems: ?*anyopaque) void {
        return objc.msgSend(self, "setTabViewItems:", void, .{tabViewItems});
    }

    pub fn selectedTabViewItemIndex(self: *@This()) objc.NSInteger {
        return objc.msgSend(self, "selectedTabViewItemIndex", objc.NSInteger, .{});
    }

    pub fn setSelectedTabViewItemIndex(self: *@This(), selectedTabViewItemIndex: objc.NSInteger) void {
        return objc.msgSend(self, "setSelectedTabViewItemIndex:", void, .{selectedTabViewItemIndex});
    }

};

pub const TabState = enum(objc.NSUInteger) {
    SelectedTab = 0,
    BackgroundTab = 1,
    PressedTab = 2,
};

/// https://developer.apple.com/documentation/AppKit/NSTabViewItem?language=objc
pub const TabViewItem = opaque {
    pub const InternalInfo = objc.ExternalClass("NSTabViewItem", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn tabViewItemWithViewController(self: *@This(), viewController: ?*ViewController) *@This() {
        return objc.msgSend(self, "tabViewItemWithViewController:", *@This(), .{viewController});
    }

    pub fn initWithIdentifier(self: *@This(), identifier: *objc.Id) *@This() {
        return objc.msgSend(self, "initWithIdentifier:", *@This(), .{identifier});
    }

    pub fn drawLabelInRect(self: *@This(), shouldTruncateLabel: objc.BOOL, labelRect: foundation.Rect) void {
        return objc.msgSend(self, "drawLabel:inRect:", void, .{shouldTruncateLabel, labelRect});
    }

    pub fn sizeOfLabel(self: *@This(), computeMin: objc.BOOL) foundation.Size {
        return objc.msgSend(self, "sizeOfLabel:", foundation.Size, .{computeMin});
    }

    pub fn identifier(self: *@This()) *objc.Id {
        return objc.msgSend(self, "identifier", *objc.Id, .{});
    }

    pub fn setIdentifier(self: *@This(), identifier: *objc.Id) void {
        return objc.msgSend(self, "setIdentifier:", void, .{identifier});
    }

    pub fn color(self: *@This()) ?*Color {
        return objc.msgSend(self, "color", ?*Color, .{});
    }

    pub fn setColor(self: *@This(), color: ?*Color) void {
        return objc.msgSend(self, "setColor:", void, .{color});
    }

    pub fn label(self: *@This()) ?*String {
        return objc.msgSend(self, "label", ?*String, .{});
    }

    pub fn setLabel(self: *@This(), label: ?*String) void {
        return objc.msgSend(self, "setLabel:", void, .{label});
    }

    pub fn image(self: *@This()) ?*Image {
        return objc.msgSend(self, "image", ?*Image, .{});
    }

    pub fn setImage(self: *@This(), image: ?*Image) void {
        return objc.msgSend(self, "setImage:", void, .{image});
    }

    pub fn view(self: *@This()) ?*View {
        return objc.msgSend(self, "view", ?*View, .{});
    }

    pub fn setView(self: *@This(), view: ?*View) void {
        return objc.msgSend(self, "setView:", void, .{view});
    }

    pub fn viewController(self: *@This()) ?*ViewController {
        return objc.msgSend(self, "viewController", ?*ViewController, .{});
    }

    pub fn setViewController(self: *@This(), viewController: ?*ViewController) void {
        return objc.msgSend(self, "setViewController:", void, .{viewController});
    }

    pub fn tabState(self: *@This()) TabState {
        return objc.msgSend(self, "tabState", TabState, .{});
    }

    pub fn tabView(self: *@This()) ?*TabView {
        return objc.msgSend(self, "tabView", ?*TabView, .{});
    }

    pub fn initialFirstResponder(self: *@This()) ?*View {
        return objc.msgSend(self, "initialFirstResponder", ?*View, .{});
    }

    pub fn setInitialFirstResponder(self: *@This(), initialFirstResponder: ?*View) void {
        return objc.msgSend(self, "setInitialFirstResponder:", void, .{initialFirstResponder});
    }

    pub fn toolTip(self: *@This()) ?*String {
        return objc.msgSend(self, "toolTip", ?*String, .{});
    }

    pub fn setToolTip(self: *@This(), toolTip: ?*String) void {
        return objc.msgSend(self, "setToolTip:", void, .{toolTip});
    }

};

pub const LineCapStyle = enum(objc.NSUInteger) {
    Butt = 0,
    Round = 1,
    Square = 2,
};

pub const LineJoinStyle = enum(objc.NSUInteger) {
    Miter = 0,
    Round = 1,
    Bevel = 2,
};

pub const WindingRule = enum(objc.NSUInteger) {
    NonZero = 0,
    EvenOdd = 1,
};

pub const BezierPathElement = enum(objc.NSUInteger) {
    MoveTo = 0,
    LineTo = 1,
    CubicCurveTo = 2,
    ClosePath = 3,
    QuadraticCurveTo = 4,
    CurveTo = 2,
};

/// https://developer.apple.com/documentation/AppKit/NSBezierPath?language=objc
pub const BezierPath = opaque {
    pub const InternalInfo = objc.ExternalClass("NSBezierPath", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn bezierPath(self: *@This()) ?*BezierPath {
        return objc.msgSend(self, "bezierPath", ?*BezierPath, .{});
    }

    pub fn bezierPathWithRect(self: *@This(), rect: foundation.Rect) ?*BezierPath {
        return objc.msgSend(self, "bezierPathWithRect:", ?*BezierPath, .{rect});
    }

    pub fn bezierPathWithOvalInRect(self: *@This(), rect: foundation.Rect) ?*BezierPath {
        return objc.msgSend(self, "bezierPathWithOvalInRect:", ?*BezierPath, .{rect});
    }

    pub fn bezierPathWithRoundedRectXRadiusYRadius(self: *@This(), rect: foundation.Rect, xRadius: core_foundation.CGFloat, yRadius: core_foundation.CGFloat) ?*BezierPath {
        return objc.msgSend(self, "bezierPathWithRoundedRect:xRadius:yRadius:", ?*BezierPath, .{rect, xRadius, yRadius});
    }

    pub fn bezierPathWithCGPath(self: *@This(), cgPath: core_graphics.PathRef) ?*BezierPath {
        return objc.msgSend(self, "bezierPathWithCGPath:", ?*BezierPath, .{cgPath});
    }

    pub fn fillRect(self: *@This(), rect: foundation.Rect) void {
        return objc.msgSend(self, "fillRect:", void, .{rect});
    }

    pub fn strokeRect(self: *@This(), rect: foundation.Rect) void {
        return objc.msgSend(self, "strokeRect:", void, .{rect});
    }

    pub fn clipRect(self: *@This(), rect: foundation.Rect) void {
        return objc.msgSend(self, "clipRect:", void, .{rect});
    }

    pub fn strokeLineFromPointToPoint(self: *@This(), point1: foundation.Point, point2: foundation.Point) void {
        return objc.msgSend(self, "strokeLineFromPoint:toPoint:", void, .{point1, point2});
    }

    pub fn drawPackedGlyphsAtPoint(self: *@This(), packedGlyphs: ?*i8, point: foundation.Point) void {
        return objc.msgSend(self, "drawPackedGlyphs:atPoint:", void, .{packedGlyphs, point});
    }

    pub fn moveToPoint(self: *@This(), point: foundation.Point) void {
        return objc.msgSend(self, "moveToPoint:", void, .{point});
    }

    pub fn lineToPoint(self: *@This(), point: foundation.Point) void {
        return objc.msgSend(self, "lineToPoint:", void, .{point});
    }

    pub fn curveToPointControlPoint1ControlPoint2(self: *@This(), endPoint: foundation.Point, controlPoint1: foundation.Point, controlPoint2: foundation.Point) void {
        return objc.msgSend(self, "curveToPoint:controlPoint1:controlPoint2:", void, .{endPoint, controlPoint1, controlPoint2});
    }

    pub fn curveToPointControlPoint(self: *@This(), endPoint: foundation.Point, controlPoint: foundation.Point) void {
        return objc.msgSend(self, "curveToPoint:controlPoint:", void, .{endPoint, controlPoint});
    }

    pub fn closePath(self: *@This()) void {
        return objc.msgSend(self, "closePath", void, .{});
    }

    pub fn removeAllPoints(self: *@This()) void {
        return objc.msgSend(self, "removeAllPoints", void, .{});
    }

    pub fn relativeMoveToPoint(self: *@This(), point: foundation.Point) void {
        return objc.msgSend(self, "relativeMoveToPoint:", void, .{point});
    }

    pub fn relativeLineToPoint(self: *@This(), point: foundation.Point) void {
        return objc.msgSend(self, "relativeLineToPoint:", void, .{point});
    }

    pub fn relativeCurveToPointControlPoint1ControlPoint2(self: *@This(), endPoint: foundation.Point, controlPoint1: foundation.Point, controlPoint2: foundation.Point) void {
        return objc.msgSend(self, "relativeCurveToPoint:controlPoint1:controlPoint2:", void, .{endPoint, controlPoint1, controlPoint2});
    }

    pub fn relativeCurveToPointControlPoint(self: *@This(), endPoint: foundation.Point, controlPoint: foundation.Point) void {
        return objc.msgSend(self, "relativeCurveToPoint:controlPoint:", void, .{endPoint, controlPoint});
    }

    pub fn getLineDashCountPhase(self: *@This(), pattern: ?*core_foundation.CGFloat, count: ?*objc.NSInteger, phase: ?*core_foundation.CGFloat) void {
        return objc.msgSend(self, "getLineDash:count:phase:", void, .{pattern, count, phase});
    }

    pub fn setLineDashCountPhase(self: *@This(), pattern: ?*core_foundation.CGFloat, count: objc.NSInteger, phase: core_foundation.CGFloat) void {
        return objc.msgSend(self, "setLineDash:count:phase:", void, .{pattern, count, phase});
    }

    pub fn stroke(self: *@This()) void {
        return objc.msgSend(self, "stroke", void, .{});
    }

    pub fn fill(self: *@This()) void {
        return objc.msgSend(self, "fill", void, .{});
    }

    pub fn addClip(self: *@This()) void {
        return objc.msgSend(self, "addClip", void, .{});
    }

    pub fn setClip(self: *@This()) void {
        return objc.msgSend(self, "setClip", void, .{});
    }

    pub fn transformUsingAffineTransform(self: *@This(), transform: ?*AffineTransform) void {
        return objc.msgSend(self, "transformUsingAffineTransform:", void, .{transform});
    }

    pub fn elementAtIndexAssociatedPoints(self: *@This(), index: objc.NSInteger, points: foundation.PointArray) BezierPathElement {
        return objc.msgSend(self, "elementAtIndex:associatedPoints:", BezierPathElement, .{index, points});
    }

    pub fn elementAtIndex(self: *@This(), index: objc.NSInteger) BezierPathElement {
        return objc.msgSend(self, "elementAtIndex:", BezierPathElement, .{index});
    }

    pub fn setAssociatedPointsAtIndex(self: *@This(), points: foundation.PointArray, index: objc.NSInteger) void {
        return objc.msgSend(self, "setAssociatedPoints:atIndex:", void, .{points, index});
    }

    pub fn appendBezierPath(self: *@This(), path: ?*BezierPath) void {
        return objc.msgSend(self, "appendBezierPath:", void, .{path});
    }

    pub fn appendBezierPathWithRect(self: *@This(), rect: foundation.Rect) void {
        return objc.msgSend(self, "appendBezierPathWithRect:", void, .{rect});
    }

    pub fn appendBezierPathWithPointsCount(self: *@This(), points: foundation.PointArray, count: objc.NSInteger) void {
        return objc.msgSend(self, "appendBezierPathWithPoints:count:", void, .{points, count});
    }

    pub fn appendBezierPathWithOvalInRect(self: *@This(), rect: foundation.Rect) void {
        return objc.msgSend(self, "appendBezierPathWithOvalInRect:", void, .{rect});
    }

    pub fn appendBezierPathWithArcWithCenterRadiusStartAngleEndAngleClockwise(self: *@This(), center: foundation.Point, radius: core_foundation.CGFloat, startAngle: core_foundation.CGFloat, endAngle: core_foundation.CGFloat, clockwise: objc.BOOL, ) void {
        return objc.msgSend(self, "appendBezierPathWithArcWithCenter:radius:startAngle:endAngle:clockwise:", void, .{center, radius, startAngle, endAngle, clockwise, });
    }

    pub fn appendBezierPathWithArcWithCenterRadiusStartAngleEndAngle(self: *@This(), center: foundation.Point, radius: core_foundation.CGFloat, startAngle: core_foundation.CGFloat, endAngle: core_foundation.CGFloat, ) void {
        return objc.msgSend(self, "appendBezierPathWithArcWithCenter:radius:startAngle:endAngle:", void, .{center, radius, startAngle, endAngle, });
    }

    pub fn appendBezierPathWithArcFromPointToPointRadius(self: *@This(), point1: foundation.Point, point2: foundation.Point, radius: core_foundation.CGFloat) void {
        return objc.msgSend(self, "appendBezierPathWithArcFromPoint:toPoint:radius:", void, .{point1, point2, radius});
    }

    pub fn appendBezierPathWithCGGlyphInFont(self: *@This(), glyph: core_graphics.Glyph, font: ?*Font) void {
        return objc.msgSend(self, "appendBezierPathWithCGGlyph:inFont:", void, .{glyph, font});
    }

    pub fn appendBezierPathWithCGGlyphsCountInFont(self: *@This(), glyphs: ?*core_graphics.Glyph, count: objc.NSInteger, font: ?*Font) void {
        return objc.msgSend(self, "appendBezierPathWithCGGlyphs:count:inFont:", void, .{glyphs, count, font});
    }

    pub fn appendBezierPathWithRoundedRectXRadiusYRadius(self: *@This(), rect: foundation.Rect, xRadius: core_foundation.CGFloat, yRadius: core_foundation.CGFloat) void {
        return objc.msgSend(self, "appendBezierPathWithRoundedRect:xRadius:yRadius:", void, .{rect, xRadius, yRadius});
    }

    pub fn containsPoint(self: *@This(), point: foundation.Point) objc.BOOL {
        return objc.msgSend(self, "containsPoint:", objc.BOOL, .{point});
    }

    pub fn CGPath(self: *@This()) core_graphics.PathRef {
        return objc.msgSend(self, "CGPath", core_graphics.PathRef, .{});
    }

    pub fn setCGPath(self: *@This(), CGPath: core_graphics.PathRef) void {
        return objc.msgSend(self, "setCGPath:", void, .{CGPath});
    }

    pub fn defaultMiterLimit(self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(self, "defaultMiterLimit", core_foundation.CGFloat, .{});
    }

    pub fn setDefaultMiterLimit(self: *@This(), defaultMiterLimit: core_foundation.CGFloat) void {
        return objc.msgSend(self, "setDefaultMiterLimit:", void, .{defaultMiterLimit});
    }

    pub fn defaultFlatness(self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(self, "defaultFlatness", core_foundation.CGFloat, .{});
    }

    pub fn setDefaultFlatness(self: *@This(), defaultFlatness: core_foundation.CGFloat) void {
        return objc.msgSend(self, "setDefaultFlatness:", void, .{defaultFlatness});
    }

    pub fn defaultWindingRule(self: *@This()) WindingRule {
        return objc.msgSend(self, "defaultWindingRule", WindingRule, .{});
    }

    pub fn setDefaultWindingRule(self: *@This(), defaultWindingRule: WindingRule) void {
        return objc.msgSend(self, "setDefaultWindingRule:", void, .{defaultWindingRule});
    }

    pub fn defaultLineCapStyle(self: *@This()) LineCapStyle {
        return objc.msgSend(self, "defaultLineCapStyle", LineCapStyle, .{});
    }

    pub fn setDefaultLineCapStyle(self: *@This(), defaultLineCapStyle: LineCapStyle) void {
        return objc.msgSend(self, "setDefaultLineCapStyle:", void, .{defaultLineCapStyle});
    }

    pub fn defaultLineJoinStyle(self: *@This()) LineJoinStyle {
        return objc.msgSend(self, "defaultLineJoinStyle", LineJoinStyle, .{});
    }

    pub fn setDefaultLineJoinStyle(self: *@This(), defaultLineJoinStyle: LineJoinStyle) void {
        return objc.msgSend(self, "setDefaultLineJoinStyle:", void, .{defaultLineJoinStyle});
    }

    pub fn defaultLineWidth(self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(self, "defaultLineWidth", core_foundation.CGFloat, .{});
    }

    pub fn setDefaultLineWidth(self: *@This(), defaultLineWidth: core_foundation.CGFloat) void {
        return objc.msgSend(self, "setDefaultLineWidth:", void, .{defaultLineWidth});
    }

    pub fn lineWidth(self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(self, "lineWidth", core_foundation.CGFloat, .{});
    }

    pub fn setLineWidth(self: *@This(), lineWidth: core_foundation.CGFloat) void {
        return objc.msgSend(self, "setLineWidth:", void, .{lineWidth});
    }

    pub fn lineCapStyle(self: *@This()) LineCapStyle {
        return objc.msgSend(self, "lineCapStyle", LineCapStyle, .{});
    }

    pub fn setLineCapStyle(self: *@This(), lineCapStyle: LineCapStyle) void {
        return objc.msgSend(self, "setLineCapStyle:", void, .{lineCapStyle});
    }

    pub fn lineJoinStyle(self: *@This()) LineJoinStyle {
        return objc.msgSend(self, "lineJoinStyle", LineJoinStyle, .{});
    }

    pub fn setLineJoinStyle(self: *@This(), lineJoinStyle: LineJoinStyle) void {
        return objc.msgSend(self, "setLineJoinStyle:", void, .{lineJoinStyle});
    }

    pub fn windingRule(self: *@This()) WindingRule {
        return objc.msgSend(self, "windingRule", WindingRule, .{});
    }

    pub fn setWindingRule(self: *@This(), windingRule: WindingRule) void {
        return objc.msgSend(self, "setWindingRule:", void, .{windingRule});
    }

    pub fn miterLimit(self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(self, "miterLimit", core_foundation.CGFloat, .{});
    }

    pub fn setMiterLimit(self: *@This(), miterLimit: core_foundation.CGFloat) void {
        return objc.msgSend(self, "setMiterLimit:", void, .{miterLimit});
    }

    pub fn flatness(self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(self, "flatness", core_foundation.CGFloat, .{});
    }

    pub fn setFlatness(self: *@This(), flatness: core_foundation.CGFloat) void {
        return objc.msgSend(self, "setFlatness:", void, .{flatness});
    }

    pub fn bezierPathByFlatteningPath(self: *@This()) ?*BezierPath {
        return objc.msgSend(self, "bezierPathByFlatteningPath", ?*BezierPath, .{});
    }

    pub fn bezierPathByReversingPath(self: *@This()) ?*BezierPath {
        return objc.msgSend(self, "bezierPathByReversingPath", ?*BezierPath, .{});
    }

    pub fn isEmpty(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isEmpty", objc.BOOL, .{});
    }

    pub fn currentPoint(self: *@This()) foundation.Point {
        return objc.msgSend(self, "currentPoint", foundation.Point, .{});
    }

    pub fn controlPointBounds(self: *@This()) foundation.Rect {
        return objc.msgSend(self, "controlPointBounds", foundation.Rect, .{});
    }

    pub fn bounds(self: *@This()) foundation.Rect {
        return objc.msgSend(self, "bounds", foundation.Rect, .{});
    }

    pub fn elementCount(self: *@This()) objc.NSInteger {
        return objc.msgSend(self, "elementCount", objc.NSInteger, .{});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSPICTImageRep?language=objc
pub const PICTImageRep = opaque {
    pub const InternalInfo = objc.ExternalClass("NSPICTImageRep", @This(), ImageRep, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn imageRepWithData(self: *@This(), pictData: ?*Data) *@This() {
        return objc.msgSend(self, "imageRepWithData:", *@This(), .{pictData});
    }

    pub fn initWithData(self: *@This(), pictData: ?*Data) *@This() {
        return objc.msgSend(self, "initWithData:", *@This(), .{pictData});
    }

    pub fn PICTRepresentation(self: *@This()) ?*Data {
        return objc.msgSend(self, "PICTRepresentation", ?*Data, .{});
    }

    pub fn boundingBox(self: *@This()) foundation.Rect {
        return objc.msgSend(self, "boundingBox", foundation.Rect, .{});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSStatusBar?language=objc
pub const StatusBar = opaque {
    pub const InternalInfo = objc.ExternalClass("NSStatusBar", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn statusItemWithLength(self: *@This(), length: core_foundation.CGFloat) ?*StatusItem {
        return objc.msgSend(self, "statusItemWithLength:", ?*StatusItem, .{length});
    }

    pub fn removeStatusItem(self: *@This(), item: ?*StatusItem) void {
        return objc.msgSend(self, "removeStatusItem:", void, .{item});
    }

    pub fn systemStatusBar(self: *@This()) ?*StatusBar {
        return objc.msgSend(self, "systemStatusBar", ?*StatusBar, .{});
    }

    pub fn isVertical(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isVertical", objc.BOOL, .{});
    }

    pub fn thickness(self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(self, "thickness", core_foundation.CGFloat, .{});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSStatusBarButton?language=objc
pub const StatusBarButton = opaque {
    pub const InternalInfo = objc.ExternalClass("NSStatusBarButton", @This(), Button, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn appearsDisabled(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "appearsDisabled", objc.BOOL, .{});
    }

    pub fn setAppearsDisabled(self: *@This(), appearsDisabled: objc.BOOL) void {
        return objc.msgSend(self, "setAppearsDisabled:", void, .{appearsDisabled});
    }

};

pub const StatusItemAutosaveName = ?*String;

pub const StatusItemBehavior = enum(objc.NSUInteger) {
    RemovalAllowed = 2,
    TerminationOnRemoval = 4,
};

/// https://developer.apple.com/documentation/AppKit/NSStatusItem?language=objc
pub const StatusItem = opaque {
    pub const InternalInfo = objc.ExternalClass("NSStatusItem", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn statusBar(self: *@This()) ?*StatusBar {
        return objc.msgSend(self, "statusBar", ?*StatusBar, .{});
    }

    pub fn length(self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(self, "length", core_foundation.CGFloat, .{});
    }

    pub fn setLength(self: *@This(), length: core_foundation.CGFloat) void {
        return objc.msgSend(self, "setLength:", void, .{length});
    }

    pub fn menu(self: *@This()) ?*Menu {
        return objc.msgSend(self, "menu", ?*Menu, .{});
    }

    pub fn setMenu(self: *@This(), menu: ?*Menu) void {
        return objc.msgSend(self, "setMenu:", void, .{menu});
    }

    pub fn button(self: *@This()) ?*StatusBarButton {
        return objc.msgSend(self, "button", ?*StatusBarButton, .{});
    }

    pub fn behavior(self: *@This()) StatusItemBehavior {
        return objc.msgSend(self, "behavior", StatusItemBehavior, .{});
    }

    pub fn setBehavior(self: *@This(), behavior: StatusItemBehavior) void {
        return objc.msgSend(self, "setBehavior:", void, .{behavior});
    }

    pub fn isVisible(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isVisible", objc.BOOL, .{});
    }

    pub fn setVisible(self: *@This(), visible: objc.BOOL) void {
        return objc.msgSend(self, "setVisible:", void, .{visible});
    }

    pub fn autosaveName(self: *@This()) StatusItemAutosaveName {
        return objc.msgSend(self, "autosaveName", StatusItemAutosaveName, .{});
    }

    pub fn setAutosaveName(self: *@This(), autosaveName: StatusItemAutosaveName) void {
        return objc.msgSend(self, "setAutosaveName:", void, .{autosaveName});
    }

};

pub const SoundName = ?*String;

pub const SoundPlaybackDeviceIdentifier = ?*String;

/// https://developer.apple.com/documentation/AppKit/NSSound?language=objc
pub const Sound = opaque {
    pub const InternalInfo = objc.ExternalClass("NSSound", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn soundNamed(self: *@This(), name: SoundName) ?*Sound {
        return objc.msgSend(self, "soundNamed:", ?*Sound, .{name});
    }

    pub fn initWithContentsOfURLByReference(self: *@This(), url: ?*URL, byRef: objc.BOOL) *@This() {
        return objc.msgSend(self, "initWithContentsOfURL:byReference:", *@This(), .{url, byRef});
    }

    pub fn initWithContentsOfFileByReference(self: *@This(), path: ?*String, byRef: objc.BOOL) *@This() {
        return objc.msgSend(self, "initWithContentsOfFile:byReference:", *@This(), .{path, byRef});
    }

    pub fn initWithData(self: *@This(), data: ?*Data) *@This() {
        return objc.msgSend(self, "initWithData:", *@This(), .{data});
    }

    pub fn setName(self: *@This(), string: SoundName) objc.BOOL {
        return objc.msgSend(self, "setName:", objc.BOOL, .{string});
    }

    pub fn canInitWithPasteboard(self: *@This(), pasteboard: ?*Pasteboard) objc.BOOL {
        return objc.msgSend(self, "canInitWithPasteboard:", objc.BOOL, .{pasteboard});
    }

    pub fn initWithPasteboard(self: *@This(), pasteboard: ?*Pasteboard) *@This() {
        return objc.msgSend(self, "initWithPasteboard:", *@This(), .{pasteboard});
    }

    pub fn writeToPasteboard(self: *@This(), pasteboard: ?*Pasteboard) void {
        return objc.msgSend(self, "writeToPasteboard:", void, .{pasteboard});
    }

    pub fn play(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "play", objc.BOOL, .{});
    }

    pub fn pause(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "pause", objc.BOOL, .{});
    }

    pub fn @"resume"(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "resume", objc.BOOL, .{});
    }

    pub fn stop(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "stop", objc.BOOL, .{});
    }

    pub fn setChannelMapping(self: *@This(), channelMapping: ?*Array) void {
        return objc.msgSend(self, "setChannelMapping:", void, .{channelMapping});
    }

    pub fn channelMapping(self: *@This()) ?*Array {
        return objc.msgSend(self, "channelMapping", ?*Array, .{});
    }

    pub fn name(self: *@This()) SoundName {
        return objc.msgSend(self, "name", SoundName, .{});
    }

    pub fn soundUnfilteredTypes(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "soundUnfilteredTypes", ?*anyopaque, .{});
    }

    pub fn isPlaying(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isPlaying", objc.BOOL, .{});
    }

    pub fn delegate(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "delegate", ?*anyopaque, .{});
    }

    pub fn setDelegate(self: *@This(), delegate: ?*anyopaque) void {
        return objc.msgSend(self, "setDelegate:", void, .{delegate});
    }

    pub fn duration(self: *@This()) foundation.TimeInterval {
        return objc.msgSend(self, "duration", foundation.TimeInterval, .{});
    }

    pub fn volume(self: *@This()) f32 {
        return objc.msgSend(self, "volume", f32, .{});
    }

    pub fn setVolume(self: *@This(), volume: f32) void {
        return objc.msgSend(self, "setVolume:", void, .{volume});
    }

    pub fn currentTime(self: *@This()) foundation.TimeInterval {
        return objc.msgSend(self, "currentTime", foundation.TimeInterval, .{});
    }

    pub fn setCurrentTime(self: *@This(), currentTime: foundation.TimeInterval) void {
        return objc.msgSend(self, "setCurrentTime:", void, .{currentTime});
    }

    pub fn loops(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "loops", objc.BOOL, .{});
    }

    pub fn setLoops(self: *@This(), loops: objc.BOOL) void {
        return objc.msgSend(self, "setLoops:", void, .{loops});
    }

    pub fn playbackDeviceIdentifier(self: *@This()) SoundPlaybackDeviceIdentifier {
        return objc.msgSend(self, "playbackDeviceIdentifier", SoundPlaybackDeviceIdentifier, .{});
    }

    pub fn setPlaybackDeviceIdentifier(self: *@This(), playbackDeviceIdentifier: SoundPlaybackDeviceIdentifier) void {
        return objc.msgSend(self, "setPlaybackDeviceIdentifier:", void, .{playbackDeviceIdentifier});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSSoundDelegate?language=objc
pub const SoundDelegate = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{objc.NSObject, });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn soundDidFinishPlaying(self: *@This(), sound: ?*Sound, flag: objc.BOOL) void {
        return objc.msgSend(self, "sound:didFinishPlaying:", void, .{sound, flag});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSMovie?language=objc
pub const Movie = opaque {
    pub const InternalInfo = objc.ExternalClass("NSMovie", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn initWithCoder(self: *@This(), coder: ?*foundation.Coder) *@This() {
        return objc.msgSend(self, "initWithCoder:", *@This(), .{coder});
    }

    pub fn init(self: *@This()) *@This() {
        return objc.msgSend(self, "init", *@This(), .{});
    }

    pub fn initWithMovie(self: *@This(), movie: ?*QTMovie) *@This() {
        return objc.msgSend(self, "initWithMovie:", *@This(), .{movie});
    }

    pub fn QTMovie(self: *@This()) ?*QTMovie {
        return objc.msgSend(self, "QTMovie", ?*QTMovie, .{});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSPDFImageRep?language=objc
pub const PDFImageRep = opaque {
    pub const InternalInfo = objc.ExternalClass("NSPDFImageRep", @This(), ImageRep, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn imageRepWithData(self: *@This(), pdfData: ?*Data) *@This() {
        return objc.msgSend(self, "imageRepWithData:", *@This(), .{pdfData});
    }

    pub fn initWithData(self: *@This(), pdfData: ?*Data) *@This() {
        return objc.msgSend(self, "initWithData:", *@This(), .{pdfData});
    }

    pub fn PDFRepresentation(self: *@This()) ?*Data {
        return objc.msgSend(self, "PDFRepresentation", ?*Data, .{});
    }

    pub fn bounds(self: *@This()) foundation.Rect {
        return objc.msgSend(self, "bounds", foundation.Rect, .{});
    }

    pub fn currentPage(self: *@This()) objc.NSInteger {
        return objc.msgSend(self, "currentPage", objc.NSInteger, .{});
    }

    pub fn setCurrentPage(self: *@This(), currentPage: objc.NSInteger) void {
        return objc.msgSend(self, "setCurrentPage:", void, .{currentPage});
    }

    pub fn pageCount(self: *@This()) objc.NSInteger {
        return objc.msgSend(self, "pageCount", objc.NSInteger, .{});
    }

};

pub const DrawerState = enum(objc.NSUInteger) {
    ClosedState = 0,
    OpeningState = 1,
    OpenState = 2,
    ClosingState = 3,
};

/// https://developer.apple.com/documentation/AppKit/NSDrawer?language=objc
pub const Drawer = opaque {
    pub const InternalInfo = objc.ExternalClass("NSDrawer", @This(), Responder, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn initWithContentSizePreferredEdge(self: *@This(), contentSize: foundation.Size, edge: foundation.RectEdge) *@This() {
        return objc.msgSend(self, "initWithContentSize:preferredEdge:", *@This(), .{contentSize, edge});
    }

    pub fn open(self: *@This()) void {
        return objc.msgSend(self, "open", void, .{});
    }

    pub fn openOnEdge(self: *@This(), edge: foundation.RectEdge) void {
        return objc.msgSend(self, "openOnEdge:", void, .{edge});
    }

    pub fn close(self: *@This()) void {
        return objc.msgSend(self, "close", void, .{});
    }

    pub fn open(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "open:", void, .{sender});
    }

    pub fn close(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "close:", void, .{sender});
    }

    pub fn toggle(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "toggle:", void, .{sender});
    }

    pub fn parentWindow(self: *@This()) ?*Window {
        return objc.msgSend(self, "parentWindow", ?*Window, .{});
    }

    pub fn setParentWindow(self: *@This(), parentWindow: ?*Window) void {
        return objc.msgSend(self, "setParentWindow:", void, .{parentWindow});
    }

    pub fn contentView(self: *@This()) ?*View {
        return objc.msgSend(self, "contentView", ?*View, .{});
    }

    pub fn setContentView(self: *@This(), contentView: ?*View) void {
        return objc.msgSend(self, "setContentView:", void, .{contentView});
    }

    pub fn preferredEdge(self: *@This()) foundation.RectEdge {
        return objc.msgSend(self, "preferredEdge", foundation.RectEdge, .{});
    }

    pub fn setPreferredEdge(self: *@This(), preferredEdge: foundation.RectEdge) void {
        return objc.msgSend(self, "setPreferredEdge:", void, .{preferredEdge});
    }

    pub fn delegate(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "delegate", ?*anyopaque, .{});
    }

    pub fn setDelegate(self: *@This(), delegate: ?*anyopaque) void {
        return objc.msgSend(self, "setDelegate:", void, .{delegate});
    }

    pub fn state(self: *@This()) objc.NSInteger {
        return objc.msgSend(self, "state", objc.NSInteger, .{});
    }

    pub fn edge(self: *@This()) foundation.RectEdge {
        return objc.msgSend(self, "edge", foundation.RectEdge, .{});
    }

    pub fn contentSize(self: *@This()) foundation.Size {
        return objc.msgSend(self, "contentSize", foundation.Size, .{});
    }

    pub fn setContentSize(self: *@This(), contentSize: foundation.Size) void {
        return objc.msgSend(self, "setContentSize:", void, .{contentSize});
    }

    pub fn minContentSize(self: *@This()) foundation.Size {
        return objc.msgSend(self, "minContentSize", foundation.Size, .{});
    }

    pub fn setMinContentSize(self: *@This(), minContentSize: foundation.Size) void {
        return objc.msgSend(self, "setMinContentSize:", void, .{minContentSize});
    }

    pub fn maxContentSize(self: *@This()) foundation.Size {
        return objc.msgSend(self, "maxContentSize", foundation.Size, .{});
    }

    pub fn setMaxContentSize(self: *@This(), maxContentSize: foundation.Size) void {
        return objc.msgSend(self, "setMaxContentSize:", void, .{maxContentSize});
    }

    pub fn leadingOffset(self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(self, "leadingOffset", core_foundation.CGFloat, .{});
    }

    pub fn setLeadingOffset(self: *@This(), leadingOffset: core_foundation.CGFloat) void {
        return objc.msgSend(self, "setLeadingOffset:", void, .{leadingOffset});
    }

    pub fn trailingOffset(self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(self, "trailingOffset", core_foundation.CGFloat, .{});
    }

    pub fn setTrailingOffset(self: *@This(), trailingOffset: core_foundation.CGFloat) void {
        return objc.msgSend(self, "setTrailingOffset:", void, .{trailingOffset});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSDrawerDelegate?language=objc
pub const DrawerDelegate = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{objc.NSObject, });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn drawerShouldOpen(self: *@This(), sender: ?*Drawer) objc.BOOL {
        return objc.msgSend(self, "drawerShouldOpen:", objc.BOOL, .{sender});
    }

    pub fn drawerShouldClose(self: *@This(), sender: ?*Drawer) objc.BOOL {
        return objc.msgSend(self, "drawerShouldClose:", objc.BOOL, .{sender});
    }

    pub fn drawerWillResizeContentsToSize(self: *@This(), sender: ?*Drawer, contentSize: foundation.Size) foundation.Size {
        return objc.msgSend(self, "drawerWillResizeContents:toSize:", foundation.Size, .{sender, contentSize});
    }

    pub fn drawerWillOpen(self: *@This(), notification: ?*Notification) void {
        return objc.msgSend(self, "drawerWillOpen:", void, .{notification});
    }

    pub fn drawerDidOpen(self: *@This(), notification: ?*Notification) void {
        return objc.msgSend(self, "drawerDidOpen:", void, .{notification});
    }

    pub fn drawerWillClose(self: *@This(), notification: ?*Notification) void {
        return objc.msgSend(self, "drawerWillClose:", void, .{notification});
    }

    pub fn drawerDidClose(self: *@This(), notification: ?*Notification) void {
        return objc.msgSend(self, "drawerDidClose:", void, .{notification});
    }

};

pub const OpenGLGlobalOption = enum(objc.uint32_t) {
    OFormatCacheSize = 501,
    OClearFormatCache = 502,
    ORetainRenderers = 503,
    OUseBuildCache = 506,
    OResetLibrary = 504,
};

pub extern "AppKit" fn OpenGLSetOption(pname: OpenGLGlobalOption, param: opengl.GLint) callconv(.C) void;

pub extern "AppKit" fn OpenGLGetOption(pname: OpenGLGlobalOption, param: ?*opengl.GLint) callconv(.C) void;

pub extern "AppKit" fn OpenGLGetVersion(major: ?*opengl.GLint, minor: ?*opengl.GLint) callconv(.C) void;

pub const OpenGLPixelFormatAttribute = objc.uint32_t;

/// https://developer.apple.com/documentation/AppKit/NSOpenGLPixelFormat?language=objc
pub const OpenGLPixelFormat = opaque {
    pub const InternalInfo = objc.ExternalClass("NSOpenGLPixelFormat", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn initWithCGLPixelFormatObj(self: *@This(), format: opengl.PixelFormatObj) ?*OpenGLPixelFormat {
        return objc.msgSend(self, "initWithCGLPixelFormatObj:", ?*OpenGLPixelFormat, .{format});
    }

    pub fn initWithAttributes(self: *@This(), attribs: ?*OpenGLPixelFormatAttribute) *@This() {
        return objc.msgSend(self, "initWithAttributes:", *@This(), .{attribs});
    }

    pub fn initWithData(self: *@This(), attribs: ?*Data) *objc.Id {
        return objc.msgSend(self, "initWithData:", *objc.Id, .{attribs});
    }

    pub fn attributes(self: *@This()) ?*Data {
        return objc.msgSend(self, "attributes", ?*Data, .{});
    }

    pub fn setAttributes(self: *@This(), attribs: ?*Data) void {
        return objc.msgSend(self, "setAttributes:", void, .{attribs});
    }

    pub fn getValuesForAttributeForVirtualScreen(self: *@This(), vals: ?*opengl.GLint, attrib: OpenGLPixelFormatAttribute, screen: opengl.GLint) void {
        return objc.msgSend(self, "getValues:forAttribute:forVirtualScreen:", void, .{vals, attrib, screen});
    }

    pub fn numberOfVirtualScreens(self: *@This()) opengl.GLint {
        return objc.msgSend(self, "numberOfVirtualScreens", opengl.GLint, .{});
    }

    pub fn CGLPixelFormatObj(self: *@This()) opengl.PixelFormatObj {
        return objc.msgSend(self, "CGLPixelFormatObj", opengl.PixelFormatObj, .{});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSOpenGLPixelBuffer?language=objc
pub const OpenGLPixelBuffer = opaque {
    pub const InternalInfo = objc.ExternalClass("NSOpenGLPixelBuffer", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn initWithTextureTargetTextureInternalFormatTextureMaxMipMapLevelPixelsWidePixelsHigh(self: *@This(), target: opengl.GLenum, format: opengl.GLenum, maxLevel: opengl.GLint, pixelsWide: opengl.GLsizei, pixelsHigh: opengl.GLsizei, ) *@This() {
        return objc.msgSend(self, "initWithTextureTarget:textureInternalFormat:textureMaxMipMapLevel:pixelsWide:pixelsHigh:", *@This(), .{target, format, maxLevel, pixelsWide, pixelsHigh, });
    }

    pub fn initWithCGLPBufferObj(self: *@This(), pbuffer: opengl.PBufferObj) ?*OpenGLPixelBuffer {
        return objc.msgSend(self, "initWithCGLPBufferObj:", ?*OpenGLPixelBuffer, .{pbuffer});
    }

    pub fn CGLPBufferObj(self: *@This()) opengl.PBufferObj {
        return objc.msgSend(self, "CGLPBufferObj", opengl.PBufferObj, .{});
    }

    pub fn pixelsWide(self: *@This()) opengl.GLsizei {
        return objc.msgSend(self, "pixelsWide", opengl.GLsizei, .{});
    }

    pub fn pixelsHigh(self: *@This()) opengl.GLsizei {
        return objc.msgSend(self, "pixelsHigh", opengl.GLsizei, .{});
    }

    pub fn textureTarget(self: *@This()) opengl.GLenum {
        return objc.msgSend(self, "textureTarget", opengl.GLenum, .{});
    }

    pub fn textureInternalFormat(self: *@This()) opengl.GLenum {
        return objc.msgSend(self, "textureInternalFormat", opengl.GLenum, .{});
    }

    pub fn textureMaxMipMapLevel(self: *@This()) opengl.GLint {
        return objc.msgSend(self, "textureMaxMipMapLevel", opengl.GLint, .{});
    }

};

pub const OpenGLContextParameter = enum(objc.NSInteger) {
    SwapInterval = 222,
    SurfaceOrder = 235,
    SurfaceOpacity = 236,
    SurfaceBackingSize = 304,
    ReclaimResources = 308,
    CurrentRendererID = 309,
    GPUVertexProcessing = 310,
    GPUFragmentProcessing = 311,
    HasDrawable = 314,
    MPSwapsInFlight = 315,
    SwapRectangle = 200,
    SwapRectangleEnable = 201,
    RasterizationEnable = 221,
    StateValidation = 301,
    SurfaceSurfaceVolatile = 306,
};

/// https://developer.apple.com/documentation/AppKit/NSOpenGLContext?language=objc
pub const OpenGLContext = opaque {
    pub const InternalInfo = objc.ExternalClass("NSOpenGLContext", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn initWithFormatShareContext(self: *@This(), format: ?*OpenGLPixelFormat, share: ?*OpenGLContext) *@This() {
        return objc.msgSend(self, "initWithFormat:shareContext:", *@This(), .{format, share});
    }

    pub fn initWithCGLContextObj(self: *@This(), context: opengl.ContextObj) ?*OpenGLContext {
        return objc.msgSend(self, "initWithCGLContextObj:", ?*OpenGLContext, .{context});
    }

    pub fn setView(self: *@This(), view: ?*View) void {
        return objc.msgSend(self, "setView:", void, .{view});
    }

    pub fn setFullScreen(self: *@This()) void {
        return objc.msgSend(self, "setFullScreen", void, .{});
    }

    pub fn setOffScreenWidthHeightRowbytes(self: *@This(), baseaddr: ?*anyopaque, width: opengl.GLsizei, height: opengl.GLsizei, rowbytes: opengl.GLint, ) void {
        return objc.msgSend(self, "setOffScreen:width:height:rowbytes:", void, .{baseaddr, width, height, rowbytes, });
    }

    pub fn clearDrawable(self: *@This()) void {
        return objc.msgSend(self, "clearDrawable", void, .{});
    }

    pub fn update(self: *@This()) void {
        return objc.msgSend(self, "update", void, .{});
    }

    pub fn flushBuffer(self: *@This()) void {
        return objc.msgSend(self, "flushBuffer", void, .{});
    }

    pub fn makeCurrentContext(self: *@This()) void {
        return objc.msgSend(self, "makeCurrentContext", void, .{});
    }

    pub fn clearCurrentContext(self: *@This()) void {
        return objc.msgSend(self, "clearCurrentContext", void, .{});
    }

    pub fn copyAttributesFromContextWithMask(self: *@This(), context: ?*OpenGLContext, mask: opengl.GLbitfield) void {
        return objc.msgSend(self, "copyAttributesFromContext:withMask:", void, .{context, mask});
    }

    pub fn setValuesForParameter(self: *@This(), vals: ?*opengl.GLint, param: OpenGLContextParameter) void {
        return objc.msgSend(self, "setValues:forParameter:", void, .{vals, param});
    }

    pub fn getValuesForParameter(self: *@This(), vals: ?*opengl.GLint, param: OpenGLContextParameter) void {
        return objc.msgSend(self, "getValues:forParameter:", void, .{vals, param});
    }

    pub fn createTextureFromViewInternalFormat(self: *@This(), target: opengl.GLenum, view: ?*View, format: opengl.GLenum) void {
        return objc.msgSend(self, "createTexture:fromView:internalFormat:", void, .{target, view, format});
    }

    pub fn pixelFormat(self: *@This()) ?*OpenGLPixelFormat {
        return objc.msgSend(self, "pixelFormat", ?*OpenGLPixelFormat, .{});
    }

    pub fn view(self: *@This()) ?*View {
        return objc.msgSend(self, "view", ?*View, .{});
    }

    pub fn currentContext(self: *@This()) ?*OpenGLContext {
        return objc.msgSend(self, "currentContext", ?*OpenGLContext, .{});
    }

    pub fn currentVirtualScreen(self: *@This()) opengl.GLint {
        return objc.msgSend(self, "currentVirtualScreen", opengl.GLint, .{});
    }

    pub fn setCurrentVirtualScreen(self: *@This(), currentVirtualScreen: opengl.GLint) void {
        return objc.msgSend(self, "setCurrentVirtualScreen:", void, .{currentVirtualScreen});
    }

    pub fn CGLContextObj(self: *@This()) opengl.ContextObj {
        return objc.msgSend(self, "CGLContextObj", opengl.ContextObj, .{});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSOpenGLLayer?language=objc
pub const OpenGLLayer = opaque {
    pub const InternalInfo = objc.ExternalClass("NSOpenGLLayer", @This(), CAOpenGLLayer, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn openGLPixelFormatForDisplayMask(self: *@This(), mask: objc.uint32_t) ?*OpenGLPixelFormat {
        return objc.msgSend(self, "openGLPixelFormatForDisplayMask:", ?*OpenGLPixelFormat, .{mask});
    }

    pub fn openGLContextForPixelFormat(self: *@This(), pixelFormat: ?*OpenGLPixelFormat) ?*OpenGLContext {
        return objc.msgSend(self, "openGLContextForPixelFormat:", ?*OpenGLContext, .{pixelFormat});
    }

    pub fn canDrawInOpenGLContextPixelFormatForLayerTimeDisplayTime(self: *@This(), context: ?*OpenGLContext, pixelFormat: ?*OpenGLPixelFormat, t: core_foundation.TimeInterval, ts: ?*core_video.TimeStamp, ) objc.BOOL {
        return objc.msgSend(self, "canDrawInOpenGLContext:pixelFormat:forLayerTime:displayTime:", objc.BOOL, .{context, pixelFormat, t, ts, });
    }

    pub fn drawInOpenGLContextPixelFormatForLayerTimeDisplayTime(self: *@This(), context: ?*OpenGLContext, pixelFormat: ?*OpenGLPixelFormat, t: core_foundation.TimeInterval, ts: ?*core_video.TimeStamp, ) void {
        return objc.msgSend(self, "drawInOpenGLContext:pixelFormat:forLayerTime:displayTime:", void, .{context, pixelFormat, t, ts, });
    }

    pub fn view(self: *@This()) ?*View {
        return objc.msgSend(self, "view", ?*View, .{});
    }

    pub fn setView(self: *@This(), view: ?*View) void {
        return objc.msgSend(self, "setView:", void, .{view});
    }

    pub fn openGLPixelFormat(self: *@This()) ?*OpenGLPixelFormat {
        return objc.msgSend(self, "openGLPixelFormat", ?*OpenGLPixelFormat, .{});
    }

    pub fn setOpenGLPixelFormat(self: *@This(), openGLPixelFormat: ?*OpenGLPixelFormat) void {
        return objc.msgSend(self, "setOpenGLPixelFormat:", void, .{openGLPixelFormat});
    }

    pub fn openGLContext(self: *@This()) ?*OpenGLContext {
        return objc.msgSend(self, "openGLContext", ?*OpenGLContext, .{});
    }

    pub fn setOpenGLContext(self: *@This(), openGLContext: ?*OpenGLContext) void {
        return objc.msgSend(self, "setOpenGLContext:", void, .{openGLContext});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSOpenGLView?language=objc
pub const OpenGLView = opaque {
    pub const InternalInfo = objc.ExternalClass("NSOpenGLView", @This(), View, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn defaultPixelFormat(self: *@This()) ?*OpenGLPixelFormat {
        return objc.msgSend(self, "defaultPixelFormat", ?*OpenGLPixelFormat, .{});
    }

    pub fn initWithFramePixelFormat(self: *@This(), frameRect: foundation.Rect, format: ?*OpenGLPixelFormat) *@This() {
        return objc.msgSend(self, "initWithFrame:pixelFormat:", *@This(), .{frameRect, format});
    }

    pub fn clearGLContext(self: *@This()) void {
        return objc.msgSend(self, "clearGLContext", void, .{});
    }

    pub fn update(self: *@This()) void {
        return objc.msgSend(self, "update", void, .{});
    }

    pub fn reshape(self: *@This()) void {
        return objc.msgSend(self, "reshape", void, .{});
    }

    pub fn prepareOpenGL(self: *@This()) void {
        return objc.msgSend(self, "prepareOpenGL", void, .{});
    }

    pub fn openGLContext(self: *@This()) ?*OpenGLContext {
        return objc.msgSend(self, "openGLContext", ?*OpenGLContext, .{});
    }

    pub fn setOpenGLContext(self: *@This(), openGLContext: ?*OpenGLContext) void {
        return objc.msgSend(self, "setOpenGLContext:", void, .{openGLContext});
    }

    pub fn pixelFormat(self: *@This()) ?*OpenGLPixelFormat {
        return objc.msgSend(self, "pixelFormat", ?*OpenGLPixelFormat, .{});
    }

    pub fn setPixelFormat(self: *@This(), pixelFormat: ?*OpenGLPixelFormat) void {
        return objc.msgSend(self, "setPixelFormat:", void, .{pixelFormat});
    }

    pub fn wantsBestResolutionOpenGLSurface(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "wantsBestResolutionOpenGLSurface", objc.BOOL, .{});
    }

    pub fn setWantsBestResolutionOpenGLSurface(self: *@This(), wantsBestResolutionOpenGLSurface: objc.BOOL) void {
        return objc.msgSend(self, "setWantsBestResolutionOpenGLSurface:", void, .{wantsBestResolutionOpenGLSurface});
    }

    pub fn wantsExtendedDynamicRangeOpenGLSurface(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "wantsExtendedDynamicRangeOpenGLSurface", objc.BOOL, .{});
    }

    pub fn setWantsExtendedDynamicRangeOpenGLSurface(self: *@This(), wantsExtendedDynamicRangeOpenGLSurface: objc.BOOL) void {
        return objc.msgSend(self, "setWantsExtendedDynamicRangeOpenGLSurface:", void, .{wantsExtendedDynamicRangeOpenGLSurface});
    }

};

pub const ToolbarItemGroupSelectionMode = enum(objc.NSInteger) {
    SelectOne = 0,
    SelectAny = 1,
    Momentary = 2,
};

pub const ToolbarItemGroupControlRepresentation = enum(objc.NSInteger) {
    Automatic = 0,
    Expanded = 1,
    Collapsed = 2,
};

/// https://developer.apple.com/documentation/AppKit/NSToolbarItemGroup?language=objc
pub const ToolbarItemGroup = opaque {
    pub const InternalInfo = objc.ExternalClass("NSToolbarItemGroup", @This(), ToolbarItem, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn groupWithItemIdentifierTitlesSelectionModeLabelsTargetAction(self: *@This(), itemIdentifier: ToolbarItemIdentifier, titles: ?*anyopaque, selectionMode: ToolbarItemGroupSelectionMode, labels: ?*anyopaque, target: *objc.Id, action: *objc.SEL, ) *@This() {
        return objc.msgSend(self, "groupWithItemIdentifier:titles:selectionMode:labels:target:action:", *@This(), .{itemIdentifier, titles, selectionMode, labels, target, action, });
    }

    pub fn groupWithItemIdentifierImagesSelectionModeLabelsTargetAction(self: *@This(), itemIdentifier: ToolbarItemIdentifier, images: ?*anyopaque, selectionMode: ToolbarItemGroupSelectionMode, labels: ?*anyopaque, target: *objc.Id, action: *objc.SEL, ) *@This() {
        return objc.msgSend(self, "groupWithItemIdentifier:images:selectionMode:labels:target:action:", *@This(), .{itemIdentifier, images, selectionMode, labels, target, action, });
    }

    pub fn setSelectedAtIndex(self: *@This(), selected: objc.BOOL, index: objc.NSInteger) void {
        return objc.msgSend(self, "setSelected:atIndex:", void, .{selected, index});
    }

    pub fn isSelectedAtIndex(self: *@This(), index: objc.NSInteger) objc.BOOL {
        return objc.msgSend(self, "isSelectedAtIndex:", objc.BOOL, .{index});
    }

    pub fn subitems(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "subitems", ?*anyopaque, .{});
    }

    pub fn setSubitems(self: *@This(), subitems: ?*anyopaque) void {
        return objc.msgSend(self, "setSubitems:", void, .{subitems});
    }

    pub fn controlRepresentation(self: *@This()) ToolbarItemGroupControlRepresentation {
        return objc.msgSend(self, "controlRepresentation", ToolbarItemGroupControlRepresentation, .{});
    }

    pub fn setControlRepresentation(self: *@This(), controlRepresentation: ToolbarItemGroupControlRepresentation) void {
        return objc.msgSend(self, "setControlRepresentation:", void, .{controlRepresentation});
    }

    pub fn selectionMode(self: *@This()) ToolbarItemGroupSelectionMode {
        return objc.msgSend(self, "selectionMode", ToolbarItemGroupSelectionMode, .{});
    }

    pub fn setSelectionMode(self: *@This(), selectionMode: ToolbarItemGroupSelectionMode) void {
        return objc.msgSend(self, "setSelectionMode:", void, .{selectionMode});
    }

    pub fn selectedIndex(self: *@This()) objc.NSInteger {
        return objc.msgSend(self, "selectedIndex", objc.NSInteger, .{});
    }

    pub fn setSelectedIndex(self: *@This(), selectedIndex: objc.NSInteger) void {
        return objc.msgSend(self, "setSelectedIndex:", void, .{selectedIndex});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSMenuToolbarItem?language=objc
pub const MenuToolbarItem = opaque {
    pub const InternalInfo = objc.ExternalClass("NSMenuToolbarItem", @This(), ToolbarItem, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn menu(self: *@This()) ?*Menu {
        return objc.msgSend(self, "menu", ?*Menu, .{});
    }

    pub fn setMenu(self: *@This(), menu: ?*Menu) void {
        return objc.msgSend(self, "setMenu:", void, .{menu});
    }

    pub fn showsIndicator(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "showsIndicator", objc.BOOL, .{});
    }

    pub fn setShowsIndicator(self: *@This(), showsIndicator: objc.BOOL) void {
        return objc.msgSend(self, "setShowsIndicator:", void, .{showsIndicator});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSSharingServicePickerToolbarItem?language=objc
pub const SharingServicePickerToolbarItem = opaque {
    pub const InternalInfo = objc.ExternalClass("NSSharingServicePickerToolbarItem", @This(), ToolbarItem, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn delegate(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "delegate", ?*anyopaque, .{});
    }

    pub fn setDelegate(self: *@This(), delegate: ?*anyopaque) void {
        return objc.msgSend(self, "setDelegate:", void, .{delegate});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSSharingServicePickerToolbarItemDelegate?language=objc
pub const SharingServicePickerToolbarItemDelegate = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{SharingServicePickerDelegate, });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn itemsForSharingServicePickerToolbarItem(self: *@This(), pickerToolbarItem: ?*SharingServicePickerToolbarItem) ?*quartz_core.NSArray {
        return objc.msgSend(self, "itemsForSharingServicePickerToolbarItem:", ?*quartz_core.NSArray, .{pickerToolbarItem});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSStepper?language=objc
pub const Stepper = opaque {
    pub const InternalInfo = objc.ExternalClass("NSStepper", @This(), Control, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn minValue(self: *@This()) f64 {
        return objc.msgSend(self, "minValue", f64, .{});
    }

    pub fn setMinValue(self: *@This(), minValue: f64) void {
        return objc.msgSend(self, "setMinValue:", void, .{minValue});
    }

    pub fn maxValue(self: *@This()) f64 {
        return objc.msgSend(self, "maxValue", f64, .{});
    }

    pub fn setMaxValue(self: *@This(), maxValue: f64) void {
        return objc.msgSend(self, "setMaxValue:", void, .{maxValue});
    }

    pub fn increment(self: *@This()) f64 {
        return objc.msgSend(self, "increment", f64, .{});
    }

    pub fn setIncrement(self: *@This(), increment: f64) void {
        return objc.msgSend(self, "setIncrement:", void, .{increment});
    }

    pub fn valueWraps(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "valueWraps", objc.BOOL, .{});
    }

    pub fn setValueWraps(self: *@This(), valueWraps: objc.BOOL) void {
        return objc.msgSend(self, "setValueWraps:", void, .{valueWraps});
    }

    pub fn autorepeat(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "autorepeat", objc.BOOL, .{});
    }

    pub fn setAutorepeat(self: *@This(), autorepeat: objc.BOOL) void {
        return objc.msgSend(self, "setAutorepeat:", void, .{autorepeat});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSStepperCell?language=objc
pub const StepperCell = opaque {
    pub const InternalInfo = objc.ExternalClass("NSStepperCell", @This(), ActionCell, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn minValue(self: *@This()) f64 {
        return objc.msgSend(self, "minValue", f64, .{});
    }

    pub fn setMinValue(self: *@This(), minValue: f64) void {
        return objc.msgSend(self, "setMinValue:", void, .{minValue});
    }

    pub fn maxValue(self: *@This()) f64 {
        return objc.msgSend(self, "maxValue", f64, .{});
    }

    pub fn setMaxValue(self: *@This(), maxValue: f64) void {
        return objc.msgSend(self, "setMaxValue:", void, .{maxValue});
    }

    pub fn increment(self: *@This()) f64 {
        return objc.msgSend(self, "increment", f64, .{});
    }

    pub fn setIncrement(self: *@This(), increment: f64) void {
        return objc.msgSend(self, "setIncrement:", void, .{increment});
    }

    pub fn valueWraps(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "valueWraps", objc.BOOL, .{});
    }

    pub fn setValueWraps(self: *@This(), valueWraps: objc.BOOL) void {
        return objc.msgSend(self, "setValueWraps:", void, .{valueWraps});
    }

    pub fn autorepeat(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "autorepeat", objc.BOOL, .{});
    }

    pub fn setAutorepeat(self: *@This(), autorepeat: objc.BOOL) void {
        return objc.msgSend(self, "setAutorepeat:", void, .{autorepeat});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSGlyphInfo?language=objc
pub const GlyphInfo = opaque {
    pub const InternalInfo = objc.ExternalClass("NSGlyphInfo", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn glyphInfoWithCGGlyphForFontBaseString(self: *@This(), glyph: core_graphics.Glyph, font: ?*Font, string: ?*String) ?*core_text.NSGlyphInfo {
        return objc.msgSend(self, "glyphInfoWithCGGlyph:forFont:baseString:", ?*core_text.NSGlyphInfo, .{glyph, font, string});
    }

    pub fn glyphID(self: *@This()) core_graphics.Glyph {
        return objc.msgSend(self, "glyphID", core_graphics.Glyph, .{});
    }

    pub fn baseString(self: *@This()) ?*String {
        return objc.msgSend(self, "baseString", ?*String, .{});
    }

};

pub const CharacterCollection = enum(objc.NSUInteger) {
    IdentityMappingCharacterCollection = 0,
    AdobeCNS1CharacterCollection = 1,
    AdobeGB1CharacterCollection = 2,
    AdobeJapan1CharacterCollection = 3,
    AdobeJapan2CharacterCollection = 4,
    AdobeKorea1CharacterCollection = 5,
};

/// https://developer.apple.com/documentation/AppKit/NSShadow?language=objc
pub const Shadow = opaque {
    pub const InternalInfo = objc.ExternalClass("NSShadow", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn init(self: *@This()) *@This() {
        return objc.msgSend(self, "init", *@This(), .{});
    }

    pub fn set(self: *@This()) void {
        return objc.msgSend(self, "set", void, .{});
    }

    pub fn shadowOffset(self: *@This()) foundation.Size {
        return objc.msgSend(self, "shadowOffset", foundation.Size, .{});
    }

    pub fn setShadowOffset(self: *@This(), shadowOffset: foundation.Size) void {
        return objc.msgSend(self, "setShadowOffset:", void, .{shadowOffset});
    }

    pub fn shadowBlurRadius(self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(self, "shadowBlurRadius", core_foundation.CGFloat, .{});
    }

    pub fn setShadowBlurRadius(self: *@This(), shadowBlurRadius: core_foundation.CGFloat) void {
        return objc.msgSend(self, "setShadowBlurRadius:", void, .{shadowBlurRadius});
    }

    pub fn shadowColor(self: *@This()) ?*Color {
        return objc.msgSend(self, "shadowColor", ?*Color, .{});
    }

    pub fn setShadowColor(self: *@This(), shadowColor: ?*Color) void {
        return objc.msgSend(self, "setShadowColor:", void, .{shadowColor});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSTypesetter?language=objc
pub const Typesetter = opaque {
    pub const InternalInfo = objc.ExternalClass("NSTypesetter", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn substituteFontForFont(self: *@This(), originalFont: ?*Font) ?*Font {
        return objc.msgSend(self, "substituteFontForFont:", ?*Font, .{originalFont});
    }

    pub fn textTabForGlyphLocationWritingDirectionMaxLocation(self: *@This(), glyphLocation: core_foundation.CGFloat, direction: WritingDirection, maxLocation: core_foundation.CGFloat) ?*core_text.NSTextTab {
        return objc.msgSend(self, "textTabForGlyphLocation:writingDirection:maxLocation:", ?*core_text.NSTextTab, .{glyphLocation, direction, maxLocation});
    }

    pub fn setParagraphGlyphRangeSeparatorGlyphRange(self: *@This(), paragraphRange: foundation.Range, paragraphSeparatorRange: foundation.Range) void {
        return objc.msgSend(self, "setParagraphGlyphRange:separatorGlyphRange:", void, .{paragraphRange, paragraphSeparatorRange});
    }

    pub fn layoutParagraphAtPoint(self: *@This(), lineFragmentOrigin: foundation.PointPointer) objc.NSUInteger {
        return objc.msgSend(self, "layoutParagraphAtPoint:", objc.NSUInteger, .{lineFragmentOrigin});
    }

    pub fn beginParagraph(self: *@This()) void {
        return objc.msgSend(self, "beginParagraph", void, .{});
    }

    pub fn endParagraph(self: *@This()) void {
        return objc.msgSend(self, "endParagraph", void, .{});
    }

    pub fn beginLineWithGlyphAtIndex(self: *@This(), glyphIndex: objc.NSUInteger) void {
        return objc.msgSend(self, "beginLineWithGlyphAtIndex:", void, .{glyphIndex});
    }

    pub fn endLineWithGlyphRange(self: *@This(), lineGlyphRange: foundation.Range) void {
        return objc.msgSend(self, "endLineWithGlyphRange:", void, .{lineGlyphRange});
    }

    pub fn lineSpacingAfterGlyphAtIndexWithProposedLineFragmentRect(self: *@This(), glyphIndex: objc.NSUInteger, rect: foundation.Rect) core_foundation.CGFloat {
        return objc.msgSend(self, "lineSpacingAfterGlyphAtIndex:withProposedLineFragmentRect:", core_foundation.CGFloat, .{glyphIndex, rect});
    }

    pub fn paragraphSpacingBeforeGlyphAtIndexWithProposedLineFragmentRect(self: *@This(), glyphIndex: objc.NSUInteger, rect: foundation.Rect) core_foundation.CGFloat {
        return objc.msgSend(self, "paragraphSpacingBeforeGlyphAtIndex:withProposedLineFragmentRect:", core_foundation.CGFloat, .{glyphIndex, rect});
    }

    pub fn paragraphSpacingAfterGlyphAtIndexWithProposedLineFragmentRect(self: *@This(), glyphIndex: objc.NSUInteger, rect: foundation.Rect) core_foundation.CGFloat {
        return objc.msgSend(self, "paragraphSpacingAfterGlyphAtIndex:withProposedLineFragmentRect:", core_foundation.CGFloat, .{glyphIndex, rect});
    }

    pub fn getLineFragmentRectUsedRectForParagraphSeparatorGlyphRangeAtProposedOrigin(self: *@This(), lineFragmentRect: foundation.RectPointer, lineFragmentUsedRect: foundation.RectPointer, paragraphSeparatorGlyphRange: foundation.Range, lineOrigin: foundation.Point, ) void {
        return objc.msgSend(self, "getLineFragmentRect:usedRect:forParagraphSeparatorGlyphRange:atProposedOrigin:", void, .{lineFragmentRect, lineFragmentUsedRect, paragraphSeparatorGlyphRange, lineOrigin, });
    }

    pub fn setHardInvalidationForGlyphRange(self: *@This(), flag: objc.BOOL, glyphRange: foundation.Range) void {
        return objc.msgSend(self, "setHardInvalidation:forGlyphRange:", void, .{flag, glyphRange});
    }

    pub fn layoutGlyphsInLayoutManagerStartingAtGlyphIndexMaxNumberOfLineFragmentsNextGlyphIndex(self: *@This(), layoutManager: ?*LayoutManager, startGlyphIndex: objc.NSUInteger, maxNumLines: objc.NSUInteger, nextGlyph: ?*objc.NSUInteger, ) void {
        return objc.msgSend(self, "layoutGlyphsInLayoutManager:startingAtGlyphIndex:maxNumberOfLineFragments:nextGlyphIndex:", void, .{layoutManager, startGlyphIndex, maxNumLines, nextGlyph, });
    }

    pub fn layoutCharactersInRangeForLayoutManagerMaximumNumberOfLineFragments(self: *@This(), characterRange: foundation.Range, layoutManager: ?*LayoutManager, maxNumLines: objc.NSUInteger) foundation.Range {
        return objc.msgSend(self, "layoutCharactersInRange:forLayoutManager:maximumNumberOfLineFragments:", foundation.Range, .{characterRange, layoutManager, maxNumLines});
    }

    pub fn printingAdjustmentInLayoutManagerForNominallySpacedGlyphRangePackedGlyphsCount(self: *@This(), layoutMgr: ?*LayoutManager, nominallySpacedGlyphsRange: foundation.Range, packedGlyphs: ?*u8, packedGlyphsCount: objc.NSUInteger, ) foundation.Size {
        return objc.msgSend(self, "printingAdjustmentInLayoutManager:forNominallySpacedGlyphRange:packedGlyphs:count:", foundation.Size, .{layoutMgr, nominallySpacedGlyphsRange, packedGlyphs, packedGlyphsCount, });
    }

    pub fn baselineOffsetInLayoutManagerGlyphIndex(self: *@This(), layoutMgr: ?*LayoutManager, glyphIndex: objc.NSUInteger) core_foundation.CGFloat {
        return objc.msgSend(self, "baselineOffsetInLayoutManager:glyphIndex:", core_foundation.CGFloat, .{layoutMgr, glyphIndex});
    }

    pub fn sharedSystemTypesetterForBehavior(self: *@This(), behavior: TypesetterBehavior) *objc.Id {
        return objc.msgSend(self, "sharedSystemTypesetterForBehavior:", *objc.Id, .{behavior});
    }

    pub fn usesFontLeading(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "usesFontLeading", objc.BOOL, .{});
    }

    pub fn setUsesFontLeading(self: *@This(), usesFontLeading: objc.BOOL) void {
        return objc.msgSend(self, "setUsesFontLeading:", void, .{usesFontLeading});
    }

    pub fn typesetterBehavior(self: *@This()) TypesetterBehavior {
        return objc.msgSend(self, "typesetterBehavior", TypesetterBehavior, .{});
    }

    pub fn setTypesetterBehavior(self: *@This(), typesetterBehavior: TypesetterBehavior) void {
        return objc.msgSend(self, "setTypesetterBehavior:", void, .{typesetterBehavior});
    }

    pub fn hyphenationFactor(self: *@This()) f32 {
        return objc.msgSend(self, "hyphenationFactor", f32, .{});
    }

    pub fn setHyphenationFactor(self: *@This(), hyphenationFactor: f32) void {
        return objc.msgSend(self, "setHyphenationFactor:", void, .{hyphenationFactor});
    }

    pub fn lineFragmentPadding(self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(self, "lineFragmentPadding", core_foundation.CGFloat, .{});
    }

    pub fn setLineFragmentPadding(self: *@This(), lineFragmentPadding: core_foundation.CGFloat) void {
        return objc.msgSend(self, "setLineFragmentPadding:", void, .{lineFragmentPadding});
    }

    pub fn bidiProcessingEnabled(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "bidiProcessingEnabled", objc.BOOL, .{});
    }

    pub fn setBidiProcessingEnabled(self: *@This(), bidiProcessingEnabled: objc.BOOL) void {
        return objc.msgSend(self, "setBidiProcessingEnabled:", void, .{bidiProcessingEnabled});
    }

    pub fn attributedString(self: *@This()) ?*AttributedString {
        return objc.msgSend(self, "attributedString", ?*AttributedString, .{});
    }

    pub fn setAttributedString(self: *@This(), attributedString: ?*AttributedString) void {
        return objc.msgSend(self, "setAttributedString:", void, .{attributedString});
    }

    pub fn paragraphGlyphRange(self: *@This()) foundation.Range {
        return objc.msgSend(self, "paragraphGlyphRange", foundation.Range, .{});
    }

    pub fn paragraphSeparatorGlyphRange(self: *@This()) foundation.Range {
        return objc.msgSend(self, "paragraphSeparatorGlyphRange", foundation.Range, .{});
    }

    pub fn paragraphCharacterRange(self: *@This()) foundation.Range {
        return objc.msgSend(self, "paragraphCharacterRange", foundation.Range, .{});
    }

    pub fn paragraphSeparatorCharacterRange(self: *@This()) foundation.Range {
        return objc.msgSend(self, "paragraphSeparatorCharacterRange", foundation.Range, .{});
    }

    pub fn attributesForExtraLineFragment(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "attributesForExtraLineFragment", ?*anyopaque, .{});
    }

    pub fn layoutManager(self: *@This()) ?*LayoutManager {
        return objc.msgSend(self, "layoutManager", ?*LayoutManager, .{});
    }

    pub fn textContainers(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "textContainers", ?*anyopaque, .{});
    }

    pub fn currentTextContainer(self: *@This()) ?*TextContainer {
        return objc.msgSend(self, "currentTextContainer", ?*TextContainer, .{});
    }

    pub fn currentParagraphStyle(self: *@This()) ?*ParagraphStyle {
        return objc.msgSend(self, "currentParagraphStyle", ?*ParagraphStyle, .{});
    }

    pub fn sharedSystemTypesetter(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "sharedSystemTypesetter", ?*anyopaque, .{});
    }

    pub fn defaultTypesetterBehavior(self: *@This()) TypesetterBehavior {
        return objc.msgSend(self, "defaultTypesetterBehavior", TypesetterBehavior, .{});
    }

};

pub const TypesetterControlCharacterAction = enum(objc.NSUInteger) {
    ZeroAdvancementAction = 1,
    WhitespaceAction = 2,
    HorizontalTabAction = 4,
    LineBreakAction = 8,
    ParagraphBreakAction = 16,
    ContainerBreakAction = 32,
};

/// https://developer.apple.com/documentation/AppKit/NSATSTypesetter?language=objc
pub const ATSTypesetter = opaque {
    pub const InternalInfo = objc.ExternalClass("NSATSTypesetter", @This(), Typesetter, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn sharedTypesetter(self: *@This()) ?*ATSTypesetter {
        return objc.msgSend(self, "sharedTypesetter", ?*ATSTypesetter, .{});
    }

};

pub const SearchFieldRecentsAutosaveName = ?*String;

/// https://developer.apple.com/documentation/AppKit/NSSearchFieldDelegate?language=objc
pub const SearchFieldDelegate = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{TextFieldDelegate, });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn searchFieldDidStartSearching(self: *@This(), sender: ?*SearchField) void {
        return objc.msgSend(self, "searchFieldDidStartSearching:", void, .{sender});
    }

    pub fn searchFieldDidEndSearching(self: *@This(), sender: ?*SearchField) void {
        return objc.msgSend(self, "searchFieldDidEndSearching:", void, .{sender});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSSearchField?language=objc
pub const SearchField = opaque {
    pub const InternalInfo = objc.ExternalClass("NSSearchField", @This(), TextField, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn searchTextBounds(self: *@This()) foundation.Rect {
        return objc.msgSend(self, "searchTextBounds", foundation.Rect, .{});
    }

    pub fn searchButtonBounds(self: *@This()) foundation.Rect {
        return objc.msgSend(self, "searchButtonBounds", foundation.Rect, .{});
    }

    pub fn cancelButtonBounds(self: *@This()) foundation.Rect {
        return objc.msgSend(self, "cancelButtonBounds", foundation.Rect, .{});
    }

    pub fn recentSearches(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "recentSearches", ?*anyopaque, .{});
    }

    pub fn setRecentSearches(self: *@This(), recentSearches: ?*anyopaque) void {
        return objc.msgSend(self, "setRecentSearches:", void, .{recentSearches});
    }

    pub fn recentsAutosaveName(self: *@This()) SearchFieldRecentsAutosaveName {
        return objc.msgSend(self, "recentsAutosaveName", SearchFieldRecentsAutosaveName, .{});
    }

    pub fn setRecentsAutosaveName(self: *@This(), recentsAutosaveName: SearchFieldRecentsAutosaveName) void {
        return objc.msgSend(self, "setRecentsAutosaveName:", void, .{recentsAutosaveName});
    }

    pub fn searchMenuTemplate(self: *@This()) ?*Menu {
        return objc.msgSend(self, "searchMenuTemplate", ?*Menu, .{});
    }

    pub fn setSearchMenuTemplate(self: *@This(), searchMenuTemplate: ?*Menu) void {
        return objc.msgSend(self, "setSearchMenuTemplate:", void, .{searchMenuTemplate});
    }

    pub fn sendsWholeSearchString(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "sendsWholeSearchString", objc.BOOL, .{});
    }

    pub fn setSendsWholeSearchString(self: *@This(), sendsWholeSearchString: objc.BOOL) void {
        return objc.msgSend(self, "setSendsWholeSearchString:", void, .{sendsWholeSearchString});
    }

    pub fn maximumRecents(self: *@This()) objc.NSInteger {
        return objc.msgSend(self, "maximumRecents", objc.NSInteger, .{});
    }

    pub fn setMaximumRecents(self: *@This(), maximumRecents: objc.NSInteger) void {
        return objc.msgSend(self, "setMaximumRecents:", void, .{maximumRecents});
    }

    pub fn sendsSearchStringImmediately(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "sendsSearchStringImmediately", objc.BOOL, .{});
    }

    pub fn setSendsSearchStringImmediately(self: *@This(), sendsSearchStringImmediately: objc.BOOL) void {
        return objc.msgSend(self, "setSendsSearchStringImmediately:", void, .{sendsSearchStringImmediately});
    }

    pub fn delegate(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "delegate", ?*anyopaque, .{});
    }

    pub fn setDelegate(self: *@This(), delegate: ?*anyopaque) void {
        return objc.msgSend(self, "setDelegate:", void, .{delegate});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSSearchFieldCell?language=objc
pub const SearchFieldCell = opaque {
    pub const InternalInfo = objc.ExternalClass("NSSearchFieldCell", @This(), TextFieldCell, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn initTextCell(self: *@This(), string: ?*String) *@This() {
        return objc.msgSend(self, "initTextCell:", *@This(), .{string});
    }

    pub fn initWithCoder(self: *@This(), coder: ?*foundation.Coder) *@This() {
        return objc.msgSend(self, "initWithCoder:", *@This(), .{coder});
    }

    pub fn initImageCell(self: *@This(), image: ?*Image) *@This() {
        return objc.msgSend(self, "initImageCell:", *@This(), .{image});
    }

    pub fn resetSearchButtonCell(self: *@This()) void {
        return objc.msgSend(self, "resetSearchButtonCell", void, .{});
    }

    pub fn resetCancelButtonCell(self: *@This()) void {
        return objc.msgSend(self, "resetCancelButtonCell", void, .{});
    }

    pub fn searchTextRectForBounds(self: *@This(), rect: foundation.Rect) foundation.Rect {
        return objc.msgSend(self, "searchTextRectForBounds:", foundation.Rect, .{rect});
    }

    pub fn searchButtonRectForBounds(self: *@This(), rect: foundation.Rect) foundation.Rect {
        return objc.msgSend(self, "searchButtonRectForBounds:", foundation.Rect, .{rect});
    }

    pub fn cancelButtonRectForBounds(self: *@This(), rect: foundation.Rect) foundation.Rect {
        return objc.msgSend(self, "cancelButtonRectForBounds:", foundation.Rect, .{rect});
    }

    pub fn searchButtonCell(self: *@This()) ?*ButtonCell {
        return objc.msgSend(self, "searchButtonCell", ?*ButtonCell, .{});
    }

    pub fn setSearchButtonCell(self: *@This(), searchButtonCell: ?*ButtonCell) void {
        return objc.msgSend(self, "setSearchButtonCell:", void, .{searchButtonCell});
    }

    pub fn cancelButtonCell(self: *@This()) ?*ButtonCell {
        return objc.msgSend(self, "cancelButtonCell", ?*ButtonCell, .{});
    }

    pub fn setCancelButtonCell(self: *@This(), cancelButtonCell: ?*ButtonCell) void {
        return objc.msgSend(self, "setCancelButtonCell:", void, .{cancelButtonCell});
    }

    pub fn searchMenuTemplate(self: *@This()) ?*Menu {
        return objc.msgSend(self, "searchMenuTemplate", ?*Menu, .{});
    }

    pub fn setSearchMenuTemplate(self: *@This(), searchMenuTemplate: ?*Menu) void {
        return objc.msgSend(self, "setSearchMenuTemplate:", void, .{searchMenuTemplate});
    }

    pub fn sendsWholeSearchString(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "sendsWholeSearchString", objc.BOOL, .{});
    }

    pub fn setSendsWholeSearchString(self: *@This(), sendsWholeSearchString: objc.BOOL) void {
        return objc.msgSend(self, "setSendsWholeSearchString:", void, .{sendsWholeSearchString});
    }

    pub fn maximumRecents(self: *@This()) objc.NSInteger {
        return objc.msgSend(self, "maximumRecents", objc.NSInteger, .{});
    }

    pub fn setMaximumRecents(self: *@This(), maximumRecents: objc.NSInteger) void {
        return objc.msgSend(self, "setMaximumRecents:", void, .{maximumRecents});
    }

    pub fn recentSearches(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "recentSearches", ?*anyopaque, .{});
    }

    pub fn setRecentSearches(self: *@This(), recentSearches: ?*anyopaque) void {
        return objc.msgSend(self, "setRecentSearches:", void, .{recentSearches});
    }

    pub fn recentsAutosaveName(self: *@This()) SearchFieldRecentsAutosaveName {
        return objc.msgSend(self, "recentsAutosaveName", SearchFieldRecentsAutosaveName, .{});
    }

    pub fn setRecentsAutosaveName(self: *@This(), recentsAutosaveName: SearchFieldRecentsAutosaveName) void {
        return objc.msgSend(self, "setRecentsAutosaveName:", void, .{recentsAutosaveName});
    }

    pub fn sendsSearchStringImmediately(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "sendsSearchStringImmediately", objc.BOOL, .{});
    }

    pub fn setSendsSearchStringImmediately(self: *@This(), sendsSearchStringImmediately: objc.BOOL) void {
        return objc.msgSend(self, "setSendsSearchStringImmediately:", void, .{sendsSearchStringImmediately});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSController?language=objc
pub const Controller = opaque {
    pub const InternalInfo = objc.ExternalClass("NSController", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn init(self: *@This()) *@This() {
        return objc.msgSend(self, "init", *@This(), .{});
    }

    pub fn initWithCoder(self: *@This(), coder: ?*foundation.Coder) *@This() {
        return objc.msgSend(self, "initWithCoder:", *@This(), .{coder});
    }

    pub fn objectDidBeginEditing(self: *@This(), editor: ?*anyopaque) void {
        return objc.msgSend(self, "objectDidBeginEditing:", void, .{editor});
    }

    pub fn objectDidEndEditing(self: *@This(), editor: ?*anyopaque) void {
        return objc.msgSend(self, "objectDidEndEditing:", void, .{editor});
    }

    pub fn discardEditing(self: *@This()) void {
        return objc.msgSend(self, "discardEditing", void, .{});
    }

    pub fn commitEditing(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "commitEditing", objc.BOOL, .{});
    }

    pub fn commitEditingWithDelegateDidCommitSelectorContextInfo(self: *@This(), delegate: *objc.Id, didCommitSelector: *objc.SEL, contextInfo: ?*anyopaque) void {
        return objc.msgSend(self, "commitEditingWithDelegate:didCommitSelector:contextInfo:", void, .{delegate, didCommitSelector, contextInfo});
    }

    pub fn isEditing(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isEditing", objc.BOOL, .{});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSObjectController?language=objc
pub const ObjectController = opaque {
    pub const InternalInfo = objc.ExternalClass("NSObjectController", @This(), Controller, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn initWithContent(self: *@This(), content: *objc.Id) *@This() {
        return objc.msgSend(self, "initWithContent:", *@This(), .{content});
    }

    pub fn initWithCoder(self: *@This(), coder: ?*foundation.Coder) *@This() {
        return objc.msgSend(self, "initWithCoder:", *@This(), .{coder});
    }

    pub fn prepareContent(self: *@This()) void {
        return objc.msgSend(self, "prepareContent", void, .{});
    }

    pub fn newObject(self: *@This()) *objc.Id {
        return objc.msgSend(self, "newObject", *objc.Id, .{});
    }

    pub fn addObject(self: *@This(), object: *objc.Id) void {
        return objc.msgSend(self, "addObject:", void, .{object});
    }

    pub fn removeObject(self: *@This(), object: *objc.Id) void {
        return objc.msgSend(self, "removeObject:", void, .{object});
    }

    pub fn add(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "add:", void, .{sender});
    }

    pub fn remove(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "remove:", void, .{sender});
    }

    pub fn validateUserInterfaceItem(self: *@This(), item: ?*anyopaque) objc.BOOL {
        return objc.msgSend(self, "validateUserInterfaceItem:", objc.BOOL, .{item});
    }

    pub fn content(self: *@This()) *objc.Id {
        return objc.msgSend(self, "content", *objc.Id, .{});
    }

    pub fn setContent(self: *@This(), content: *objc.Id) void {
        return objc.msgSend(self, "setContent:", void, .{content});
    }

    pub fn selection(self: *@This()) *objc.Id {
        return objc.msgSend(self, "selection", *objc.Id, .{});
    }

    pub fn selectedObjects(self: *@This()) ?*Array {
        return objc.msgSend(self, "selectedObjects", ?*Array, .{});
    }

    pub fn automaticallyPreparesContent(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "automaticallyPreparesContent", objc.BOOL, .{});
    }

    pub fn setAutomaticallyPreparesContent(self: *@This(), automaticallyPreparesContent: objc.BOOL) void {
        return objc.msgSend(self, "setAutomaticallyPreparesContent:", void, .{automaticallyPreparesContent});
    }

    pub fn objectClass(self: *@This()) *objc.Class {
        return objc.msgSend(self, "objectClass", *objc.Class, .{});
    }

    pub fn setObjectClass(self: *@This(), objectClass: *objc.Class) void {
        return objc.msgSend(self, "setObjectClass:", void, .{objectClass});
    }

    pub fn isEditable(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isEditable", objc.BOOL, .{});
    }

    pub fn setEditable(self: *@This(), editable: objc.BOOL) void {
        return objc.msgSend(self, "setEditable:", void, .{editable});
    }

    pub fn canAdd(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "canAdd", objc.BOOL, .{});
    }

    pub fn canRemove(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "canRemove", objc.BOOL, .{});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSArrayController?language=objc
pub const ArrayController = opaque {
    pub const InternalInfo = objc.ExternalClass("NSArrayController", @This(), ObjectController, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn rearrangeObjects(self: *@This()) void {
        return objc.msgSend(self, "rearrangeObjects", void, .{});
    }

    pub fn didChangeArrangementCriteria(self: *@This()) void {
        return objc.msgSend(self, "didChangeArrangementCriteria", void, .{});
    }

    pub fn arrangeObjects(self: *@This(), objects: ?*Array) ?*Array {
        return objc.msgSend(self, "arrangeObjects:", ?*Array, .{objects});
    }

    pub fn setSelectionIndexes(self: *@This(), indexes: ?*IndexSet) objc.BOOL {
        return objc.msgSend(self, "setSelectionIndexes:", objc.BOOL, .{indexes});
    }

    pub fn setSelectionIndex(self: *@This(), index: objc.NSUInteger) objc.BOOL {
        return objc.msgSend(self, "setSelectionIndex:", objc.BOOL, .{index});
    }

    pub fn addSelectionIndexes(self: *@This(), indexes: ?*IndexSet) objc.BOOL {
        return objc.msgSend(self, "addSelectionIndexes:", objc.BOOL, .{indexes});
    }

    pub fn removeSelectionIndexes(self: *@This(), indexes: ?*IndexSet) objc.BOOL {
        return objc.msgSend(self, "removeSelectionIndexes:", objc.BOOL, .{indexes});
    }

    pub fn setSelectedObjects(self: *@This(), objects: ?*Array) objc.BOOL {
        return objc.msgSend(self, "setSelectedObjects:", objc.BOOL, .{objects});
    }

    pub fn addSelectedObjects(self: *@This(), objects: ?*Array) objc.BOOL {
        return objc.msgSend(self, "addSelectedObjects:", objc.BOOL, .{objects});
    }

    pub fn removeSelectedObjects(self: *@This(), objects: ?*Array) objc.BOOL {
        return objc.msgSend(self, "removeSelectedObjects:", objc.BOOL, .{objects});
    }

    pub fn add(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "add:", void, .{sender});
    }

    pub fn remove(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "remove:", void, .{sender});
    }

    pub fn insert(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "insert:", void, .{sender});
    }

    pub fn selectNext(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "selectNext:", void, .{sender});
    }

    pub fn selectPrevious(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "selectPrevious:", void, .{sender});
    }

    pub fn addObject(self: *@This(), object: *objc.Id) void {
        return objc.msgSend(self, "addObject:", void, .{object});
    }

    pub fn addObjects(self: *@This(), objects: ?*Array) void {
        return objc.msgSend(self, "addObjects:", void, .{objects});
    }

    pub fn insertObjectAtArrangedObjectIndex(self: *@This(), object: *objc.Id, index: objc.NSUInteger) void {
        return objc.msgSend(self, "insertObject:atArrangedObjectIndex:", void, .{object, index});
    }

    pub fn insertObjectsAtArrangedObjectIndexes(self: *@This(), objects: ?*Array, indexes: ?*IndexSet) void {
        return objc.msgSend(self, "insertObjects:atArrangedObjectIndexes:", void, .{objects, indexes});
    }

    pub fn removeObjectAtArrangedObjectIndex(self: *@This(), index: objc.NSUInteger) void {
        return objc.msgSend(self, "removeObjectAtArrangedObjectIndex:", void, .{index});
    }

    pub fn removeObjectsAtArrangedObjectIndexes(self: *@This(), indexes: ?*IndexSet) void {
        return objc.msgSend(self, "removeObjectsAtArrangedObjectIndexes:", void, .{indexes});
    }

    pub fn removeObject(self: *@This(), object: *objc.Id) void {
        return objc.msgSend(self, "removeObject:", void, .{object});
    }

    pub fn removeObjects(self: *@This(), objects: ?*Array) void {
        return objc.msgSend(self, "removeObjects:", void, .{objects});
    }

    pub fn automaticallyRearrangesObjects(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "automaticallyRearrangesObjects", objc.BOOL, .{});
    }

    pub fn setAutomaticallyRearrangesObjects(self: *@This(), automaticallyRearrangesObjects: objc.BOOL) void {
        return objc.msgSend(self, "setAutomaticallyRearrangesObjects:", void, .{automaticallyRearrangesObjects});
    }

    pub fn automaticRearrangementKeyPaths(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "automaticRearrangementKeyPaths", ?*anyopaque, .{});
    }

    pub fn sortDescriptors(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "sortDescriptors", ?*anyopaque, .{});
    }

    pub fn setSortDescriptors(self: *@This(), sortDescriptors: ?*anyopaque) void {
        return objc.msgSend(self, "setSortDescriptors:", void, .{sortDescriptors});
    }

    pub fn filterPredicate(self: *@This()) ?*Predicate {
        return objc.msgSend(self, "filterPredicate", ?*Predicate, .{});
    }

    pub fn setFilterPredicate(self: *@This(), filterPredicate: ?*Predicate) void {
        return objc.msgSend(self, "setFilterPredicate:", void, .{filterPredicate});
    }

    pub fn clearsFilterPredicateOnInsertion(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "clearsFilterPredicateOnInsertion", objc.BOOL, .{});
    }

    pub fn setClearsFilterPredicateOnInsertion(self: *@This(), clearsFilterPredicateOnInsertion: objc.BOOL) void {
        return objc.msgSend(self, "setClearsFilterPredicateOnInsertion:", void, .{clearsFilterPredicateOnInsertion});
    }

    pub fn arrangedObjects(self: *@This()) *objc.Id {
        return objc.msgSend(self, "arrangedObjects", *objc.Id, .{});
    }

    pub fn avoidsEmptySelection(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "avoidsEmptySelection", objc.BOOL, .{});
    }

    pub fn setAvoidsEmptySelection(self: *@This(), avoidsEmptySelection: objc.BOOL) void {
        return objc.msgSend(self, "setAvoidsEmptySelection:", void, .{avoidsEmptySelection});
    }

    pub fn preservesSelection(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "preservesSelection", objc.BOOL, .{});
    }

    pub fn setPreservesSelection(self: *@This(), preservesSelection: objc.BOOL) void {
        return objc.msgSend(self, "setPreservesSelection:", void, .{preservesSelection});
    }

    pub fn selectsInsertedObjects(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "selectsInsertedObjects", objc.BOOL, .{});
    }

    pub fn setSelectsInsertedObjects(self: *@This(), selectsInsertedObjects: objc.BOOL) void {
        return objc.msgSend(self, "setSelectsInsertedObjects:", void, .{selectsInsertedObjects});
    }

    pub fn alwaysUsesMultipleValuesMarker(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "alwaysUsesMultipleValuesMarker", objc.BOOL, .{});
    }

    pub fn setAlwaysUsesMultipleValuesMarker(self: *@This(), alwaysUsesMultipleValuesMarker: objc.BOOL) void {
        return objc.msgSend(self, "setAlwaysUsesMultipleValuesMarker:", void, .{alwaysUsesMultipleValuesMarker});
    }

    pub fn selectionIndexes(self: *@This()) ?*IndexSet {
        return objc.msgSend(self, "selectionIndexes", ?*IndexSet, .{});
    }

    pub fn selectionIndex(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "selectionIndex", objc.NSUInteger, .{});
    }

    pub fn selectedObjects(self: *@This()) ?*Array {
        return objc.msgSend(self, "selectedObjects", ?*Array, .{});
    }

    pub fn canInsert(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "canInsert", objc.BOOL, .{});
    }

    pub fn canSelectNext(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "canSelectNext", objc.BOOL, .{});
    }

    pub fn canSelectPrevious(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "canSelectPrevious", objc.BOOL, .{});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSDictionaryControllerKeyValuePair?language=objc
pub const DictionaryControllerKeyValuePair = opaque {
    pub const InternalInfo = objc.ExternalClass("NSDictionaryControllerKeyValuePair", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn init(self: *@This()) *@This() {
        return objc.msgSend(self, "init", *@This(), .{});
    }

    pub fn key(self: *@This()) ?*String {
        return objc.msgSend(self, "key", ?*String, .{});
    }

    pub fn setKey(self: *@This(), key: ?*String) void {
        return objc.msgSend(self, "setKey:", void, .{key});
    }

    pub fn value(self: *@This()) *objc.Id {
        return objc.msgSend(self, "value", *objc.Id, .{});
    }

    pub fn setValue(self: *@This(), value: *objc.Id) void {
        return objc.msgSend(self, "setValue:", void, .{value});
    }

    pub fn localizedKey(self: *@This()) ?*String {
        return objc.msgSend(self, "localizedKey", ?*String, .{});
    }

    pub fn setLocalizedKey(self: *@This(), localizedKey: ?*String) void {
        return objc.msgSend(self, "setLocalizedKey:", void, .{localizedKey});
    }

    pub fn isExplicitlyIncluded(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isExplicitlyIncluded", objc.BOOL, .{});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSDictionaryController?language=objc
pub const DictionaryController = opaque {
    pub const InternalInfo = objc.ExternalClass("NSDictionaryController", @This(), ArrayController, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn newObject(self: *@This()) ?*DictionaryControllerKeyValuePair {
        return objc.msgSend(self, "newObject", ?*DictionaryControllerKeyValuePair, .{});
    }

    pub fn initialKey(self: *@This()) ?*String {
        return objc.msgSend(self, "initialKey", ?*String, .{});
    }

    pub fn setInitialKey(self: *@This(), initialKey: ?*String) void {
        return objc.msgSend(self, "setInitialKey:", void, .{initialKey});
    }

    pub fn initialValue(self: *@This()) *objc.Id {
        return objc.msgSend(self, "initialValue", *objc.Id, .{});
    }

    pub fn setInitialValue(self: *@This(), initialValue: *objc.Id) void {
        return objc.msgSend(self, "setInitialValue:", void, .{initialValue});
    }

    pub fn includedKeys(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "includedKeys", ?*anyopaque, .{});
    }

    pub fn setIncludedKeys(self: *@This(), includedKeys: ?*anyopaque) void {
        return objc.msgSend(self, "setIncludedKeys:", void, .{includedKeys});
    }

    pub fn excludedKeys(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "excludedKeys", ?*anyopaque, .{});
    }

    pub fn setExcludedKeys(self: *@This(), excludedKeys: ?*anyopaque) void {
        return objc.msgSend(self, "setExcludedKeys:", void, .{excludedKeys});
    }

    pub fn localizedKeyDictionary(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "localizedKeyDictionary", ?*anyopaque, .{});
    }

    pub fn setLocalizedKeyDictionary(self: *@This(), localizedKeyDictionary: ?*anyopaque) void {
        return objc.msgSend(self, "setLocalizedKeyDictionary:", void, .{localizedKeyDictionary});
    }

    pub fn localizedKeyTable(self: *@This()) ?*String {
        return objc.msgSend(self, "localizedKeyTable", ?*String, .{});
    }

    pub fn setLocalizedKeyTable(self: *@This(), localizedKeyTable: ?*String) void {
        return objc.msgSend(self, "setLocalizedKeyTable:", void, .{localizedKeyTable});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSTreeNode?language=objc
pub const TreeNode = opaque {
    pub const InternalInfo = objc.ExternalClass("NSTreeNode", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn treeNodeWithRepresentedObject(self: *@This(), modelObject: *objc.Id) *@This() {
        return objc.msgSend(self, "treeNodeWithRepresentedObject:", *@This(), .{modelObject});
    }

    pub fn initWithRepresentedObject(self: *@This(), modelObject: *objc.Id) *@This() {
        return objc.msgSend(self, "initWithRepresentedObject:", *@This(), .{modelObject});
    }

    pub fn descendantNodeAtIndexPath(self: *@This(), indexPath: ?*IndexPath) ?*TreeNode {
        return objc.msgSend(self, "descendantNodeAtIndexPath:", ?*TreeNode, .{indexPath});
    }

    pub fn sortWithSortDescriptorsRecursively(self: *@This(), sortDescriptors: ?*anyopaque, recursively: objc.BOOL) void {
        return objc.msgSend(self, "sortWithSortDescriptors:recursively:", void, .{sortDescriptors, recursively});
    }

    pub fn representedObject(self: *@This()) *objc.Id {
        return objc.msgSend(self, "representedObject", *objc.Id, .{});
    }

    pub fn indexPath(self: *@This()) ?*IndexPath {
        return objc.msgSend(self, "indexPath", ?*IndexPath, .{});
    }

    pub fn isLeaf(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isLeaf", objc.BOOL, .{});
    }

    pub fn childNodes(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "childNodes", ?*anyopaque, .{});
    }

    pub fn mutableChildNodes(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "mutableChildNodes", ?*anyopaque, .{});
    }

    pub fn parentNode(self: *@This()) ?*TreeNode {
        return objc.msgSend(self, "parentNode", ?*TreeNode, .{});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSTreeController?language=objc
pub const TreeController = opaque {
    pub const InternalInfo = objc.ExternalClass("NSTreeController", @This(), ObjectController, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn rearrangeObjects(self: *@This()) void {
        return objc.msgSend(self, "rearrangeObjects", void, .{});
    }

    pub fn add(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "add:", void, .{sender});
    }

    pub fn remove(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "remove:", void, .{sender});
    }

    pub fn addChild(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "addChild:", void, .{sender});
    }

    pub fn insert(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "insert:", void, .{sender});
    }

    pub fn insertChild(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "insertChild:", void, .{sender});
    }

    pub fn insertObjectAtArrangedObjectIndexPath(self: *@This(), object: *objc.Id, indexPath: ?*IndexPath) void {
        return objc.msgSend(self, "insertObject:atArrangedObjectIndexPath:", void, .{object, indexPath});
    }

    pub fn insertObjectsAtArrangedObjectIndexPaths(self: *@This(), objects: ?*Array, indexPaths: ?*anyopaque) void {
        return objc.msgSend(self, "insertObjects:atArrangedObjectIndexPaths:", void, .{objects, indexPaths});
    }

    pub fn removeObjectAtArrangedObjectIndexPath(self: *@This(), indexPath: ?*IndexPath) void {
        return objc.msgSend(self, "removeObjectAtArrangedObjectIndexPath:", void, .{indexPath});
    }

    pub fn removeObjectsAtArrangedObjectIndexPaths(self: *@This(), indexPaths: ?*anyopaque) void {
        return objc.msgSend(self, "removeObjectsAtArrangedObjectIndexPaths:", void, .{indexPaths});
    }

    pub fn setSelectionIndexPaths(self: *@This(), indexPaths: ?*anyopaque) objc.BOOL {
        return objc.msgSend(self, "setSelectionIndexPaths:", objc.BOOL, .{indexPaths});
    }

    pub fn setSelectionIndexPath(self: *@This(), indexPath: ?*IndexPath) objc.BOOL {
        return objc.msgSend(self, "setSelectionIndexPath:", objc.BOOL, .{indexPath});
    }

    pub fn addSelectionIndexPaths(self: *@This(), indexPaths: ?*anyopaque) objc.BOOL {
        return objc.msgSend(self, "addSelectionIndexPaths:", objc.BOOL, .{indexPaths});
    }

    pub fn removeSelectionIndexPaths(self: *@This(), indexPaths: ?*anyopaque) objc.BOOL {
        return objc.msgSend(self, "removeSelectionIndexPaths:", objc.BOOL, .{indexPaths});
    }

    pub fn moveNodeToIndexPath(self: *@This(), node: ?*TreeNode, indexPath: ?*IndexPath) void {
        return objc.msgSend(self, "moveNode:toIndexPath:", void, .{node, indexPath});
    }

    pub fn moveNodesToIndexPath(self: *@This(), nodes: ?*anyopaque, startingIndexPath: ?*IndexPath) void {
        return objc.msgSend(self, "moveNodes:toIndexPath:", void, .{nodes, startingIndexPath});
    }

    pub fn childrenKeyPathForNode(self: *@This(), node: ?*TreeNode) ?*String {
        return objc.msgSend(self, "childrenKeyPathForNode:", ?*String, .{node});
    }

    pub fn countKeyPathForNode(self: *@This(), node: ?*TreeNode) ?*String {
        return objc.msgSend(self, "countKeyPathForNode:", ?*String, .{node});
    }

    pub fn leafKeyPathForNode(self: *@This(), node: ?*TreeNode) ?*String {
        return objc.msgSend(self, "leafKeyPathForNode:", ?*String, .{node});
    }

    pub fn arrangedObjects(self: *@This()) ?*TreeNode {
        return objc.msgSend(self, "arrangedObjects", ?*TreeNode, .{});
    }

    pub fn childrenKeyPath(self: *@This()) ?*String {
        return objc.msgSend(self, "childrenKeyPath", ?*String, .{});
    }

    pub fn setChildrenKeyPath(self: *@This(), childrenKeyPath: ?*String) void {
        return objc.msgSend(self, "setChildrenKeyPath:", void, .{childrenKeyPath});
    }

    pub fn countKeyPath(self: *@This()) ?*String {
        return objc.msgSend(self, "countKeyPath", ?*String, .{});
    }

    pub fn setCountKeyPath(self: *@This(), countKeyPath: ?*String) void {
        return objc.msgSend(self, "setCountKeyPath:", void, .{countKeyPath});
    }

    pub fn leafKeyPath(self: *@This()) ?*String {
        return objc.msgSend(self, "leafKeyPath", ?*String, .{});
    }

    pub fn setLeafKeyPath(self: *@This(), leafKeyPath: ?*String) void {
        return objc.msgSend(self, "setLeafKeyPath:", void, .{leafKeyPath});
    }

    pub fn sortDescriptors(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "sortDescriptors", ?*anyopaque, .{});
    }

    pub fn setSortDescriptors(self: *@This(), sortDescriptors: ?*anyopaque) void {
        return objc.msgSend(self, "setSortDescriptors:", void, .{sortDescriptors});
    }

    pub fn content(self: *@This()) *objc.Id {
        return objc.msgSend(self, "content", *objc.Id, .{});
    }

    pub fn setContent(self: *@This(), content: *objc.Id) void {
        return objc.msgSend(self, "setContent:", void, .{content});
    }

    pub fn canInsert(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "canInsert", objc.BOOL, .{});
    }

    pub fn canInsertChild(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "canInsertChild", objc.BOOL, .{});
    }

    pub fn canAddChild(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "canAddChild", objc.BOOL, .{});
    }

    pub fn avoidsEmptySelection(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "avoidsEmptySelection", objc.BOOL, .{});
    }

    pub fn setAvoidsEmptySelection(self: *@This(), avoidsEmptySelection: objc.BOOL) void {
        return objc.msgSend(self, "setAvoidsEmptySelection:", void, .{avoidsEmptySelection});
    }

    pub fn preservesSelection(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "preservesSelection", objc.BOOL, .{});
    }

    pub fn setPreservesSelection(self: *@This(), preservesSelection: objc.BOOL) void {
        return objc.msgSend(self, "setPreservesSelection:", void, .{preservesSelection});
    }

    pub fn selectsInsertedObjects(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "selectsInsertedObjects", objc.BOOL, .{});
    }

    pub fn setSelectsInsertedObjects(self: *@This(), selectsInsertedObjects: objc.BOOL) void {
        return objc.msgSend(self, "setSelectsInsertedObjects:", void, .{selectsInsertedObjects});
    }

    pub fn alwaysUsesMultipleValuesMarker(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "alwaysUsesMultipleValuesMarker", objc.BOOL, .{});
    }

    pub fn setAlwaysUsesMultipleValuesMarker(self: *@This(), alwaysUsesMultipleValuesMarker: objc.BOOL) void {
        return objc.msgSend(self, "setAlwaysUsesMultipleValuesMarker:", void, .{alwaysUsesMultipleValuesMarker});
    }

    pub fn selectedObjects(self: *@This()) ?*Array {
        return objc.msgSend(self, "selectedObjects", ?*Array, .{});
    }

    pub fn selectionIndexPaths(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "selectionIndexPaths", ?*anyopaque, .{});
    }

    pub fn selectionIndexPath(self: *@This()) ?*IndexPath {
        return objc.msgSend(self, "selectionIndexPath", ?*IndexPath, .{});
    }

    pub fn selectedNodes(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "selectedNodes", ?*anyopaque, .{});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSUserDefaultsController?language=objc
pub const UserDefaultsController = opaque {
    pub const InternalInfo = objc.ExternalClass("NSUserDefaultsController", @This(), Controller, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn initWithDefaultsInitialValues(self: *@This(), defaults: ?*UserDefaults, initialValues: ?*anyopaque) *@This() {
        return objc.msgSend(self, "initWithDefaults:initialValues:", *@This(), .{defaults, initialValues});
    }

    pub fn initWithCoder(self: *@This(), coder: ?*foundation.Coder) *@This() {
        return objc.msgSend(self, "initWithCoder:", *@This(), .{coder});
    }

    pub fn revert(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "revert:", void, .{sender});
    }

    pub fn save(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "save:", void, .{sender});
    }

    pub fn revertToInitialValues(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "revertToInitialValues:", void, .{sender});
    }

    pub fn sharedUserDefaultsController(self: *@This()) ?*UserDefaultsController {
        return objc.msgSend(self, "sharedUserDefaultsController", ?*UserDefaultsController, .{});
    }

    pub fn defaults(self: *@This()) ?*UserDefaults {
        return objc.msgSend(self, "defaults", ?*UserDefaults, .{});
    }

    pub fn initialValues(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "initialValues", ?*anyopaque, .{});
    }

    pub fn setInitialValues(self: *@This(), initialValues: ?*anyopaque) void {
        return objc.msgSend(self, "setInitialValues:", void, .{initialValues});
    }

    pub fn appliesImmediately(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "appliesImmediately", objc.BOOL, .{});
    }

    pub fn setAppliesImmediately(self: *@This(), appliesImmediately: objc.BOOL) void {
        return objc.msgSend(self, "setAppliesImmediately:", void, .{appliesImmediately});
    }

    pub fn hasUnappliedChanges(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "hasUnappliedChanges", objc.BOOL, .{});
    }

    pub fn values(self: *@This()) *objc.Id {
        return objc.msgSend(self, "values", *objc.Id, .{});
    }

};

pub const TextListOptions = enum(objc.NSUInteger) {
    PrependEnclosingMarker = 1,
};

pub const TextListMarkerFormat = ?*String;

/// https://developer.apple.com/documentation/AppKit/NSTextList?language=objc
pub const TextList = opaque {
    pub const InternalInfo = objc.ExternalClass("NSTextList", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn initWithMarkerFormatOptionsStartingItemNumber(self: *@This(), markerFormat: TextListMarkerFormat, options: TextListOptions, startingItemNumber: objc.NSInteger) *@This() {
        return objc.msgSend(self, "initWithMarkerFormat:options:startingItemNumber:", *@This(), .{markerFormat, options, startingItemNumber});
    }

    pub fn initWithMarkerFormatOptions(self: *@This(), markerFormat: TextListMarkerFormat, options: objc.NSUInteger) *@This() {
        return objc.msgSend(self, "initWithMarkerFormat:options:", *@This(), .{markerFormat, options});
    }

    pub fn initWithCoder(self: *@This(), coder: ?*foundation.Coder) *@This() {
        return objc.msgSend(self, "initWithCoder:", *@This(), .{coder});
    }

    pub fn markerForItemNumber(self: *@This(), itemNumber: objc.NSInteger) ?*String {
        return objc.msgSend(self, "markerForItemNumber:", ?*String, .{itemNumber});
    }

    pub fn markerFormat(self: *@This()) TextListMarkerFormat {
        return objc.msgSend(self, "markerFormat", TextListMarkerFormat, .{});
    }

    pub fn listOptions(self: *@This()) TextListOptions {
        return objc.msgSend(self, "listOptions", TextListOptions, .{});
    }

    pub fn startingItemNumber(self: *@This()) objc.NSInteger {
        return objc.msgSend(self, "startingItemNumber", objc.NSInteger, .{});
    }

    pub fn setStartingItemNumber(self: *@This(), startingItemNumber: objc.NSInteger) void {
        return objc.msgSend(self, "setStartingItemNumber:", void, .{startingItemNumber});
    }

    pub fn isOrdered(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isOrdered", objc.BOOL, .{});
    }

};

pub const TextBlockValueType = enum(objc.NSUInteger) {
    AbsoluteValueType = 0,
    PercentageValueType = 1,
};

pub const TextBlockDimension = enum(objc.NSUInteger) {
    Width = 0,
    MinimumWidth = 1,
    MaximumWidth = 2,
    Height = 4,
    MinimumHeight = 5,
    MaximumHeight = 6,
};

pub const TextBlockLayer = enum(objc.NSInteger) {
    Padding = -1,
    Border = 0,
    Margin = 1,
};

pub const TextBlockVerticalAlignment = enum(objc.NSUInteger) {
    TopAlignment = 0,
    MiddleAlignment = 1,
    BottomAlignment = 2,
    BaselineAlignment = 3,
};

pub const TextTableLayoutAlgorithm = enum(objc.NSUInteger) {
    AutomaticLayoutAlgorithm = 0,
    FixedLayoutAlgorithm = 1,
};

/// https://developer.apple.com/documentation/AppKit/NSTextBlock?language=objc
pub const TextBlock = opaque {
    pub const InternalInfo = objc.ExternalClass("NSTextBlock", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn init(self: *@This()) *@This() {
        return objc.msgSend(self, "init", *@This(), .{});
    }

    pub fn setValueTypeForDimension(self: *@This(), val: core_foundation.CGFloat, @"type": TextBlockValueType, dimension: TextBlockDimension) void {
        return objc.msgSend(self, "setValue:type:forDimension:", void, .{val, @"type", dimension});
    }

    pub fn valueForDimension(self: *@This(), dimension: TextBlockDimension) core_foundation.CGFloat {
        return objc.msgSend(self, "valueForDimension:", core_foundation.CGFloat, .{dimension});
    }

    pub fn valueTypeForDimension(self: *@This(), dimension: TextBlockDimension) TextBlockValueType {
        return objc.msgSend(self, "valueTypeForDimension:", TextBlockValueType, .{dimension});
    }

    pub fn setContentWidthType(self: *@This(), val: core_foundation.CGFloat, @"type": TextBlockValueType) void {
        return objc.msgSend(self, "setContentWidth:type:", void, .{val, @"type"});
    }

    pub fn setWidthTypeForLayerEdge(self: *@This(), val: core_foundation.CGFloat, @"type": TextBlockValueType, layer: TextBlockLayer, edge: foundation.RectEdge, ) void {
        return objc.msgSend(self, "setWidth:type:forLayer:edge:", void, .{val, @"type", layer, edge, });
    }

    pub fn setWidthTypeForLayer(self: *@This(), val: core_foundation.CGFloat, @"type": TextBlockValueType, layer: TextBlockLayer) void {
        return objc.msgSend(self, "setWidth:type:forLayer:", void, .{val, @"type", layer});
    }

    pub fn widthForLayerEdge(self: *@This(), layer: TextBlockLayer, edge: foundation.RectEdge) core_foundation.CGFloat {
        return objc.msgSend(self, "widthForLayer:edge:", core_foundation.CGFloat, .{layer, edge});
    }

    pub fn widthValueTypeForLayerEdge(self: *@This(), layer: TextBlockLayer, edge: foundation.RectEdge) TextBlockValueType {
        return objc.msgSend(self, "widthValueTypeForLayer:edge:", TextBlockValueType, .{layer, edge});
    }

    pub fn setBorderColorForEdge(self: *@This(), color: ?*Color, edge: foundation.RectEdge) void {
        return objc.msgSend(self, "setBorderColor:forEdge:", void, .{color, edge});
    }

    pub fn setBorderColor(self: *@This(), color: ?*Color) void {
        return objc.msgSend(self, "setBorderColor:", void, .{color});
    }

    pub fn borderColorForEdge(self: *@This(), edge: foundation.RectEdge) ?*Color {
        return objc.msgSend(self, "borderColorForEdge:", ?*Color, .{edge});
    }

    pub fn rectForLayoutAtPointInRectTextContainerCharacterRange(self: *@This(), startingPoint: foundation.Point, rect: foundation.Rect, textContainer: ?*TextContainer, charRange: foundation.Range, ) foundation.Rect {
        return objc.msgSend(self, "rectForLayoutAtPoint:inRect:textContainer:characterRange:", foundation.Rect, .{startingPoint, rect, textContainer, charRange, });
    }

    pub fn boundsRectForContentRectInRectTextContainerCharacterRange(self: *@This(), contentRect: foundation.Rect, rect: foundation.Rect, textContainer: ?*TextContainer, charRange: foundation.Range, ) foundation.Rect {
        return objc.msgSend(self, "boundsRectForContentRect:inRect:textContainer:characterRange:", foundation.Rect, .{contentRect, rect, textContainer, charRange, });
    }

    pub fn drawBackgroundWithFrameInViewCharacterRangeLayoutManager(self: *@This(), frameRect: foundation.Rect, controlView: ?*View, charRange: foundation.Range, layoutManager: ?*LayoutManager, ) void {
        return objc.msgSend(self, "drawBackgroundWithFrame:inView:characterRange:layoutManager:", void, .{frameRect, controlView, charRange, layoutManager, });
    }

    pub fn contentWidth(self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(self, "contentWidth", core_foundation.CGFloat, .{});
    }

    pub fn contentWidthValueType(self: *@This()) TextBlockValueType {
        return objc.msgSend(self, "contentWidthValueType", TextBlockValueType, .{});
    }

    pub fn verticalAlignment(self: *@This()) TextBlockVerticalAlignment {
        return objc.msgSend(self, "verticalAlignment", TextBlockVerticalAlignment, .{});
    }

    pub fn setVerticalAlignment(self: *@This(), verticalAlignment: TextBlockVerticalAlignment) void {
        return objc.msgSend(self, "setVerticalAlignment:", void, .{verticalAlignment});
    }

    pub fn backgroundColor(self: *@This()) ?*Color {
        return objc.msgSend(self, "backgroundColor", ?*Color, .{});
    }

    pub fn setBackgroundColor(self: *@This(), backgroundColor: ?*Color) void {
        return objc.msgSend(self, "setBackgroundColor:", void, .{backgroundColor});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSTextTableBlock?language=objc
pub const TextTableBlock = opaque {
    pub const InternalInfo = objc.ExternalClass("NSTextTableBlock", @This(), TextBlock, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn initWithTableStartingRowRowSpanStartingColumnColumnSpan(self: *@This(), table: ?*TextTable, row: objc.NSInteger, rowSpan: objc.NSInteger, col: objc.NSInteger, colSpan: objc.NSInteger, ) *@This() {
        return objc.msgSend(self, "initWithTable:startingRow:rowSpan:startingColumn:columnSpan:", *@This(), .{table, row, rowSpan, col, colSpan, });
    }

    pub fn table(self: *@This()) ?*TextTable {
        return objc.msgSend(self, "table", ?*TextTable, .{});
    }

    pub fn startingRow(self: *@This()) objc.NSInteger {
        return objc.msgSend(self, "startingRow", objc.NSInteger, .{});
    }

    pub fn rowSpan(self: *@This()) objc.NSInteger {
        return objc.msgSend(self, "rowSpan", objc.NSInteger, .{});
    }

    pub fn startingColumn(self: *@This()) objc.NSInteger {
        return objc.msgSend(self, "startingColumn", objc.NSInteger, .{});
    }

    pub fn columnSpan(self: *@This()) objc.NSInteger {
        return objc.msgSend(self, "columnSpan", objc.NSInteger, .{});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSTextTable?language=objc
pub const TextTable = opaque {
    pub const InternalInfo = objc.ExternalClass("NSTextTable", @This(), TextBlock, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn rectForBlockLayoutAtPointInRectTextContainerCharacterRange(self: *@This(), block: ?*TextTableBlock, startingPoint: foundation.Point, rect: foundation.Rect, textContainer: ?*TextContainer, charRange: foundation.Range, ) foundation.Rect {
        return objc.msgSend(self, "rectForBlock:layoutAtPoint:inRect:textContainer:characterRange:", foundation.Rect, .{block, startingPoint, rect, textContainer, charRange, });
    }

    pub fn boundsRectForBlockContentRectInRectTextContainerCharacterRange(self: *@This(), block: ?*TextTableBlock, contentRect: foundation.Rect, rect: foundation.Rect, textContainer: ?*TextContainer, charRange: foundation.Range, ) foundation.Rect {
        return objc.msgSend(self, "boundsRectForBlock:contentRect:inRect:textContainer:characterRange:", foundation.Rect, .{block, contentRect, rect, textContainer, charRange, });
    }

    pub fn drawBackgroundForBlockWithFrameInViewCharacterRangeLayoutManager(self: *@This(), block: ?*TextTableBlock, frameRect: foundation.Rect, controlView: ?*View, charRange: foundation.Range, layoutManager: ?*LayoutManager, ) void {
        return objc.msgSend(self, "drawBackgroundForBlock:withFrame:inView:characterRange:layoutManager:", void, .{block, frameRect, controlView, charRange, layoutManager, });
    }

    pub fn numberOfColumns(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "numberOfColumns", objc.NSUInteger, .{});
    }

    pub fn setNumberOfColumns(self: *@This(), numberOfColumns: objc.NSUInteger) void {
        return objc.msgSend(self, "setNumberOfColumns:", void, .{numberOfColumns});
    }

    pub fn layoutAlgorithm(self: *@This()) TextTableLayoutAlgorithm {
        return objc.msgSend(self, "layoutAlgorithm", TextTableLayoutAlgorithm, .{});
    }

    pub fn setLayoutAlgorithm(self: *@This(), layoutAlgorithm: TextTableLayoutAlgorithm) void {
        return objc.msgSend(self, "setLayoutAlgorithm:", void, .{layoutAlgorithm});
    }

    pub fn collapsesBorders(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "collapsesBorders", objc.BOOL, .{});
    }

    pub fn setCollapsesBorders(self: *@This(), collapsesBorders: objc.BOOL) void {
        return objc.msgSend(self, "setCollapsesBorders:", void, .{collapsesBorders});
    }

    pub fn hidesEmptyCells(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "hidesEmptyCells", objc.BOOL, .{});
    }

    pub fn setHidesEmptyCells(self: *@This(), hidesEmptyCells: objc.BOOL) void {
        return objc.msgSend(self, "setHidesEmptyCells:", void, .{hidesEmptyCells});
    }

};

pub const DatePickerStyle = enum(objc.NSUInteger) {
    TextFieldAndStepper = 0,
    ClockAndCalendar = 1,
    TextField = 2,
};

pub const DatePickerMode = enum(objc.NSUInteger) {
    Single = 0,
    Range = 1,
};

pub const DatePickerElementFlags = enum(objc.NSUInteger) {
    HourMinute = 12,
    HourMinuteSecond = 14,
    TimeZone = 16,
    YearMonth = 192,
    YearMonthDay = 224,
    Era = 256,
};

/// https://developer.apple.com/documentation/AppKit/NSDatePickerCell?language=objc
pub const DatePickerCell = opaque {
    pub const InternalInfo = objc.ExternalClass("NSDatePickerCell", @This(), ActionCell, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn initTextCell(self: *@This(), string: ?*String) *@This() {
        return objc.msgSend(self, "initTextCell:", *@This(), .{string});
    }

    pub fn initWithCoder(self: *@This(), coder: ?*foundation.Coder) *@This() {
        return objc.msgSend(self, "initWithCoder:", *@This(), .{coder});
    }

    pub fn initImageCell(self: *@This(), image: ?*Image) *@This() {
        return objc.msgSend(self, "initImageCell:", *@This(), .{image});
    }

    pub fn datePickerStyle(self: *@This()) DatePickerStyle {
        return objc.msgSend(self, "datePickerStyle", DatePickerStyle, .{});
    }

    pub fn setDatePickerStyle(self: *@This(), datePickerStyle: DatePickerStyle) void {
        return objc.msgSend(self, "setDatePickerStyle:", void, .{datePickerStyle});
    }

    pub fn drawsBackground(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "drawsBackground", objc.BOOL, .{});
    }

    pub fn setDrawsBackground(self: *@This(), drawsBackground: objc.BOOL) void {
        return objc.msgSend(self, "setDrawsBackground:", void, .{drawsBackground});
    }

    pub fn backgroundColor(self: *@This()) ?*Color {
        return objc.msgSend(self, "backgroundColor", ?*Color, .{});
    }

    pub fn setBackgroundColor(self: *@This(), backgroundColor: ?*Color) void {
        return objc.msgSend(self, "setBackgroundColor:", void, .{backgroundColor});
    }

    pub fn textColor(self: *@This()) ?*Color {
        return objc.msgSend(self, "textColor", ?*Color, .{});
    }

    pub fn setTextColor(self: *@This(), textColor: ?*Color) void {
        return objc.msgSend(self, "setTextColor:", void, .{textColor});
    }

    pub fn datePickerMode(self: *@This()) DatePickerMode {
        return objc.msgSend(self, "datePickerMode", DatePickerMode, .{});
    }

    pub fn setDatePickerMode(self: *@This(), datePickerMode: DatePickerMode) void {
        return objc.msgSend(self, "setDatePickerMode:", void, .{datePickerMode});
    }

    pub fn datePickerElements(self: *@This()) DatePickerElementFlags {
        return objc.msgSend(self, "datePickerElements", DatePickerElementFlags, .{});
    }

    pub fn setDatePickerElements(self: *@This(), datePickerElements: DatePickerElementFlags) void {
        return objc.msgSend(self, "setDatePickerElements:", void, .{datePickerElements});
    }

    pub fn calendar(self: *@This()) ?*Calendar {
        return objc.msgSend(self, "calendar", ?*Calendar, .{});
    }

    pub fn setCalendar(self: *@This(), calendar: ?*Calendar) void {
        return objc.msgSend(self, "setCalendar:", void, .{calendar});
    }

    pub fn locale(self: *@This()) ?*Locale {
        return objc.msgSend(self, "locale", ?*Locale, .{});
    }

    pub fn setLocale(self: *@This(), locale: ?*Locale) void {
        return objc.msgSend(self, "setLocale:", void, .{locale});
    }

    pub fn timeZone(self: *@This()) ?*TimeZone {
        return objc.msgSend(self, "timeZone", ?*TimeZone, .{});
    }

    pub fn setTimeZone(self: *@This(), timeZone: ?*TimeZone) void {
        return objc.msgSend(self, "setTimeZone:", void, .{timeZone});
    }

    pub fn dateValue(self: *@This()) ?*Date {
        return objc.msgSend(self, "dateValue", ?*Date, .{});
    }

    pub fn setDateValue(self: *@This(), dateValue: ?*Date) void {
        return objc.msgSend(self, "setDateValue:", void, .{dateValue});
    }

    pub fn timeInterval(self: *@This()) foundation.TimeInterval {
        return objc.msgSend(self, "timeInterval", foundation.TimeInterval, .{});
    }

    pub fn setTimeInterval(self: *@This(), timeInterval: foundation.TimeInterval) void {
        return objc.msgSend(self, "setTimeInterval:", void, .{timeInterval});
    }

    pub fn minDate(self: *@This()) ?*Date {
        return objc.msgSend(self, "minDate", ?*Date, .{});
    }

    pub fn setMinDate(self: *@This(), minDate: ?*Date) void {
        return objc.msgSend(self, "setMinDate:", void, .{minDate});
    }

    pub fn maxDate(self: *@This()) ?*Date {
        return objc.msgSend(self, "maxDate", ?*Date, .{});
    }

    pub fn setMaxDate(self: *@This(), maxDate: ?*Date) void {
        return objc.msgSend(self, "setMaxDate:", void, .{maxDate});
    }

    pub fn delegate(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "delegate", ?*anyopaque, .{});
    }

    pub fn setDelegate(self: *@This(), delegate: ?*anyopaque) void {
        return objc.msgSend(self, "setDelegate:", void, .{delegate});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSDatePickerCellDelegate?language=objc
pub const DatePickerCellDelegate = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{objc.NSObject, });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn datePickerCellValidateProposedDateValueTimeInterval(self: *@This(), datePickerCell: ?*DatePickerCell, proposedDateValue: ?*?*Date, proposedTimeInterval: ?*foundation.TimeInterval) void {
        return objc.msgSend(self, "datePickerCell:validateProposedDateValue:timeInterval:", void, .{datePickerCell, proposedDateValue, proposedTimeInterval});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSDatePicker?language=objc
pub const DatePicker = opaque {
    pub const InternalInfo = objc.ExternalClass("NSDatePicker", @This(), Control, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn datePickerStyle(self: *@This()) DatePickerStyle {
        return objc.msgSend(self, "datePickerStyle", DatePickerStyle, .{});
    }

    pub fn setDatePickerStyle(self: *@This(), datePickerStyle: DatePickerStyle) void {
        return objc.msgSend(self, "setDatePickerStyle:", void, .{datePickerStyle});
    }

    pub fn isBezeled(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isBezeled", objc.BOOL, .{});
    }

    pub fn setBezeled(self: *@This(), bezeled: objc.BOOL) void {
        return objc.msgSend(self, "setBezeled:", void, .{bezeled});
    }

    pub fn isBordered(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isBordered", objc.BOOL, .{});
    }

    pub fn setBordered(self: *@This(), bordered: objc.BOOL) void {
        return objc.msgSend(self, "setBordered:", void, .{bordered});
    }

    pub fn drawsBackground(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "drawsBackground", objc.BOOL, .{});
    }

    pub fn setDrawsBackground(self: *@This(), drawsBackground: objc.BOOL) void {
        return objc.msgSend(self, "setDrawsBackground:", void, .{drawsBackground});
    }

    pub fn backgroundColor(self: *@This()) ?*Color {
        return objc.msgSend(self, "backgroundColor", ?*Color, .{});
    }

    pub fn setBackgroundColor(self: *@This(), backgroundColor: ?*Color) void {
        return objc.msgSend(self, "setBackgroundColor:", void, .{backgroundColor});
    }

    pub fn textColor(self: *@This()) ?*Color {
        return objc.msgSend(self, "textColor", ?*Color, .{});
    }

    pub fn setTextColor(self: *@This(), textColor: ?*Color) void {
        return objc.msgSend(self, "setTextColor:", void, .{textColor});
    }

    pub fn datePickerMode(self: *@This()) DatePickerMode {
        return objc.msgSend(self, "datePickerMode", DatePickerMode, .{});
    }

    pub fn setDatePickerMode(self: *@This(), datePickerMode: DatePickerMode) void {
        return objc.msgSend(self, "setDatePickerMode:", void, .{datePickerMode});
    }

    pub fn datePickerElements(self: *@This()) DatePickerElementFlags {
        return objc.msgSend(self, "datePickerElements", DatePickerElementFlags, .{});
    }

    pub fn setDatePickerElements(self: *@This(), datePickerElements: DatePickerElementFlags) void {
        return objc.msgSend(self, "setDatePickerElements:", void, .{datePickerElements});
    }

    pub fn calendar(self: *@This()) ?*Calendar {
        return objc.msgSend(self, "calendar", ?*Calendar, .{});
    }

    pub fn setCalendar(self: *@This(), calendar: ?*Calendar) void {
        return objc.msgSend(self, "setCalendar:", void, .{calendar});
    }

    pub fn locale(self: *@This()) ?*Locale {
        return objc.msgSend(self, "locale", ?*Locale, .{});
    }

    pub fn setLocale(self: *@This(), locale: ?*Locale) void {
        return objc.msgSend(self, "setLocale:", void, .{locale});
    }

    pub fn timeZone(self: *@This()) ?*TimeZone {
        return objc.msgSend(self, "timeZone", ?*TimeZone, .{});
    }

    pub fn setTimeZone(self: *@This(), timeZone: ?*TimeZone) void {
        return objc.msgSend(self, "setTimeZone:", void, .{timeZone});
    }

    pub fn dateValue(self: *@This()) ?*Date {
        return objc.msgSend(self, "dateValue", ?*Date, .{});
    }

    pub fn setDateValue(self: *@This(), dateValue: ?*Date) void {
        return objc.msgSend(self, "setDateValue:", void, .{dateValue});
    }

    pub fn timeInterval(self: *@This()) foundation.TimeInterval {
        return objc.msgSend(self, "timeInterval", foundation.TimeInterval, .{});
    }

    pub fn setTimeInterval(self: *@This(), timeInterval: foundation.TimeInterval) void {
        return objc.msgSend(self, "setTimeInterval:", void, .{timeInterval});
    }

    pub fn minDate(self: *@This()) ?*Date {
        return objc.msgSend(self, "minDate", ?*Date, .{});
    }

    pub fn setMinDate(self: *@This(), minDate: ?*Date) void {
        return objc.msgSend(self, "setMinDate:", void, .{minDate});
    }

    pub fn maxDate(self: *@This()) ?*Date {
        return objc.msgSend(self, "maxDate", ?*Date, .{});
    }

    pub fn setMaxDate(self: *@This(), maxDate: ?*Date) void {
        return objc.msgSend(self, "setMaxDate:", void, .{maxDate});
    }

    pub fn presentsCalendarOverlay(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "presentsCalendarOverlay", objc.BOOL, .{});
    }

    pub fn setPresentsCalendarOverlay(self: *@This(), presentsCalendarOverlay: objc.BOOL) void {
        return objc.msgSend(self, "setPresentsCalendarOverlay:", void, .{presentsCalendarOverlay});
    }

    pub fn delegate(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "delegate", ?*anyopaque, .{});
    }

    pub fn setDelegate(self: *@This(), delegate: ?*anyopaque) void {
        return objc.msgSend(self, "setDelegate:", void, .{delegate});
    }

};

pub const LevelIndicatorStyle = enum(objc.NSUInteger) {
    Relevancy = 0,
    ContinuousCapacity = 1,
    DiscreteCapacity = 2,
    Rating = 3,
};

/// https://developer.apple.com/documentation/AppKit/NSLevelIndicatorCell?language=objc
pub const LevelIndicatorCell = opaque {
    pub const InternalInfo = objc.ExternalClass("NSLevelIndicatorCell", @This(), ActionCell, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn initWithLevelIndicatorStyle(self: *@This(), levelIndicatorStyle: LevelIndicatorStyle) *@This() {
        return objc.msgSend(self, "initWithLevelIndicatorStyle:", *@This(), .{levelIndicatorStyle});
    }

    pub fn rectOfTickMarkAtIndex(self: *@This(), index: objc.NSInteger) foundation.Rect {
        return objc.msgSend(self, "rectOfTickMarkAtIndex:", foundation.Rect, .{index});
    }

    pub fn tickMarkValueAtIndex(self: *@This(), index: objc.NSInteger) f64 {
        return objc.msgSend(self, "tickMarkValueAtIndex:", f64, .{index});
    }

    pub fn levelIndicatorStyle(self: *@This()) LevelIndicatorStyle {
        return objc.msgSend(self, "levelIndicatorStyle", LevelIndicatorStyle, .{});
    }

    pub fn setLevelIndicatorStyle(self: *@This(), levelIndicatorStyle: LevelIndicatorStyle) void {
        return objc.msgSend(self, "setLevelIndicatorStyle:", void, .{levelIndicatorStyle});
    }

    pub fn minValue(self: *@This()) f64 {
        return objc.msgSend(self, "minValue", f64, .{});
    }

    pub fn setMinValue(self: *@This(), minValue: f64) void {
        return objc.msgSend(self, "setMinValue:", void, .{minValue});
    }

    pub fn maxValue(self: *@This()) f64 {
        return objc.msgSend(self, "maxValue", f64, .{});
    }

    pub fn setMaxValue(self: *@This(), maxValue: f64) void {
        return objc.msgSend(self, "setMaxValue:", void, .{maxValue});
    }

    pub fn warningValue(self: *@This()) f64 {
        return objc.msgSend(self, "warningValue", f64, .{});
    }

    pub fn setWarningValue(self: *@This(), warningValue: f64) void {
        return objc.msgSend(self, "setWarningValue:", void, .{warningValue});
    }

    pub fn criticalValue(self: *@This()) f64 {
        return objc.msgSend(self, "criticalValue", f64, .{});
    }

    pub fn setCriticalValue(self: *@This(), criticalValue: f64) void {
        return objc.msgSend(self, "setCriticalValue:", void, .{criticalValue});
    }

    pub fn tickMarkPosition(self: *@This()) TickMarkPosition {
        return objc.msgSend(self, "tickMarkPosition", TickMarkPosition, .{});
    }

    pub fn setTickMarkPosition(self: *@This(), tickMarkPosition: TickMarkPosition) void {
        return objc.msgSend(self, "setTickMarkPosition:", void, .{tickMarkPosition});
    }

    pub fn numberOfTickMarks(self: *@This()) objc.NSInteger {
        return objc.msgSend(self, "numberOfTickMarks", objc.NSInteger, .{});
    }

    pub fn setNumberOfTickMarks(self: *@This(), numberOfTickMarks: objc.NSInteger) void {
        return objc.msgSend(self, "setNumberOfTickMarks:", void, .{numberOfTickMarks});
    }

    pub fn numberOfMajorTickMarks(self: *@This()) objc.NSInteger {
        return objc.msgSend(self, "numberOfMajorTickMarks", objc.NSInteger, .{});
    }

    pub fn setNumberOfMajorTickMarks(self: *@This(), numberOfMajorTickMarks: objc.NSInteger) void {
        return objc.msgSend(self, "setNumberOfMajorTickMarks:", void, .{numberOfMajorTickMarks});
    }

};

pub const LevelIndicatorPlaceholderVisibility = enum(objc.NSInteger) {
    Automatic = 0,
    Always = 1,
    WhileEditing = 2,
};

/// https://developer.apple.com/documentation/AppKit/NSLevelIndicator?language=objc
pub const LevelIndicator = opaque {
    pub const InternalInfo = objc.ExternalClass("NSLevelIndicator", @This(), Control, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn tickMarkValueAtIndex(self: *@This(), index: objc.NSInteger) f64 {
        return objc.msgSend(self, "tickMarkValueAtIndex:", f64, .{index});
    }

    pub fn rectOfTickMarkAtIndex(self: *@This(), index: objc.NSInteger) foundation.Rect {
        return objc.msgSend(self, "rectOfTickMarkAtIndex:", foundation.Rect, .{index});
    }

    pub fn levelIndicatorStyle(self: *@This()) LevelIndicatorStyle {
        return objc.msgSend(self, "levelIndicatorStyle", LevelIndicatorStyle, .{});
    }

    pub fn setLevelIndicatorStyle(self: *@This(), levelIndicatorStyle: LevelIndicatorStyle) void {
        return objc.msgSend(self, "setLevelIndicatorStyle:", void, .{levelIndicatorStyle});
    }

    pub fn isEditable(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isEditable", objc.BOOL, .{});
    }

    pub fn setEditable(self: *@This(), editable: objc.BOOL) void {
        return objc.msgSend(self, "setEditable:", void, .{editable});
    }

    pub fn minValue(self: *@This()) f64 {
        return objc.msgSend(self, "minValue", f64, .{});
    }

    pub fn setMinValue(self: *@This(), minValue: f64) void {
        return objc.msgSend(self, "setMinValue:", void, .{minValue});
    }

    pub fn maxValue(self: *@This()) f64 {
        return objc.msgSend(self, "maxValue", f64, .{});
    }

    pub fn setMaxValue(self: *@This(), maxValue: f64) void {
        return objc.msgSend(self, "setMaxValue:", void, .{maxValue});
    }

    pub fn warningValue(self: *@This()) f64 {
        return objc.msgSend(self, "warningValue", f64, .{});
    }

    pub fn setWarningValue(self: *@This(), warningValue: f64) void {
        return objc.msgSend(self, "setWarningValue:", void, .{warningValue});
    }

    pub fn criticalValue(self: *@This()) f64 {
        return objc.msgSend(self, "criticalValue", f64, .{});
    }

    pub fn setCriticalValue(self: *@This(), criticalValue: f64) void {
        return objc.msgSend(self, "setCriticalValue:", void, .{criticalValue});
    }

    pub fn tickMarkPosition(self: *@This()) TickMarkPosition {
        return objc.msgSend(self, "tickMarkPosition", TickMarkPosition, .{});
    }

    pub fn setTickMarkPosition(self: *@This(), tickMarkPosition: TickMarkPosition) void {
        return objc.msgSend(self, "setTickMarkPosition:", void, .{tickMarkPosition});
    }

    pub fn numberOfTickMarks(self: *@This()) objc.NSInteger {
        return objc.msgSend(self, "numberOfTickMarks", objc.NSInteger, .{});
    }

    pub fn setNumberOfTickMarks(self: *@This(), numberOfTickMarks: objc.NSInteger) void {
        return objc.msgSend(self, "setNumberOfTickMarks:", void, .{numberOfTickMarks});
    }

    pub fn numberOfMajorTickMarks(self: *@This()) objc.NSInteger {
        return objc.msgSend(self, "numberOfMajorTickMarks", objc.NSInteger, .{});
    }

    pub fn setNumberOfMajorTickMarks(self: *@This(), numberOfMajorTickMarks: objc.NSInteger) void {
        return objc.msgSend(self, "setNumberOfMajorTickMarks:", void, .{numberOfMajorTickMarks});
    }

    pub fn fillColor(self: *@This()) ?*Color {
        return objc.msgSend(self, "fillColor", ?*Color, .{});
    }

    pub fn setFillColor(self: *@This(), fillColor: ?*Color) void {
        return objc.msgSend(self, "setFillColor:", void, .{fillColor});
    }

    pub fn warningFillColor(self: *@This()) ?*Color {
        return objc.msgSend(self, "warningFillColor", ?*Color, .{});
    }

    pub fn setWarningFillColor(self: *@This(), warningFillColor: ?*Color) void {
        return objc.msgSend(self, "setWarningFillColor:", void, .{warningFillColor});
    }

    pub fn criticalFillColor(self: *@This()) ?*Color {
        return objc.msgSend(self, "criticalFillColor", ?*Color, .{});
    }

    pub fn setCriticalFillColor(self: *@This(), criticalFillColor: ?*Color) void {
        return objc.msgSend(self, "setCriticalFillColor:", void, .{criticalFillColor});
    }

    pub fn drawsTieredCapacityLevels(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "drawsTieredCapacityLevels", objc.BOOL, .{});
    }

    pub fn setDrawsTieredCapacityLevels(self: *@This(), drawsTieredCapacityLevels: objc.BOOL) void {
        return objc.msgSend(self, "setDrawsTieredCapacityLevels:", void, .{drawsTieredCapacityLevels});
    }

    pub fn placeholderVisibility(self: *@This()) LevelIndicatorPlaceholderVisibility {
        return objc.msgSend(self, "placeholderVisibility", LevelIndicatorPlaceholderVisibility, .{});
    }

    pub fn setPlaceholderVisibility(self: *@This(), placeholderVisibility: LevelIndicatorPlaceholderVisibility) void {
        return objc.msgSend(self, "setPlaceholderVisibility:", void, .{placeholderVisibility});
    }

    pub fn ratingImage(self: *@This()) ?*Image {
        return objc.msgSend(self, "ratingImage", ?*Image, .{});
    }

    pub fn setRatingImage(self: *@This(), ratingImage: ?*Image) void {
        return objc.msgSend(self, "setRatingImage:", void, .{ratingImage});
    }

    pub fn ratingPlaceholderImage(self: *@This()) ?*Image {
        return objc.msgSend(self, "ratingPlaceholderImage", ?*Image, .{});
    }

    pub fn setRatingPlaceholderImage(self: *@This(), ratingPlaceholderImage: ?*Image) void {
        return objc.msgSend(self, "setRatingPlaceholderImage:", void, .{ratingPlaceholderImage});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSPersistentDocument?language=objc
pub const PersistentDocument = opaque {
    pub const InternalInfo = objc.ExternalClass("NSPersistentDocument", @This(), Document, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn configurePersistentStoreCoordinatorForURLOfTypeModelConfigurationStoreOptionsError(self: *@This(), url: ?*URL, fileType: ?*String, configuration: ?*String, storeOptions: ?*anyopaque, @"error": ?*?*Error, ) objc.BOOL {
        return objc.msgSend(self, "configurePersistentStoreCoordinatorForURL:ofType:modelConfiguration:storeOptions:error:", objc.BOOL, .{url, fileType, configuration, storeOptions, @"error", });
    }

    pub fn persistentStoreTypeForFileType(self: *@This(), fileType: ?*String) ?*String {
        return objc.msgSend(self, "persistentStoreTypeForFileType:", ?*String, .{fileType});
    }

    pub fn writeToURLOfTypeForSaveOperationOriginalContentsURLError(self: *@This(), absoluteURL: ?*URL, typeName: ?*String, saveOperation: SaveOperationType, absoluteOriginalContentsURL: ?*URL, @"error": ?*?*Error, ) objc.BOOL {
        return objc.msgSend(self, "writeToURL:ofType:forSaveOperation:originalContentsURL:error:", objc.BOOL, .{absoluteURL, typeName, saveOperation, absoluteOriginalContentsURL, @"error", });
    }

    pub fn readFromURLOfTypeError(self: *@This(), absoluteURL: ?*URL, typeName: ?*String, @"error": ?*?*Error) objc.BOOL {
        return objc.msgSend(self, "readFromURL:ofType:error:", objc.BOOL, .{absoluteURL, typeName, @"error"});
    }

    pub fn revertToContentsOfURLOfTypeError(self: *@This(), inAbsoluteURL: ?*URL, inTypeName: ?*String, outError: ?*?*Error) objc.BOOL {
        return objc.msgSend(self, "revertToContentsOfURL:ofType:error:", objc.BOOL, .{inAbsoluteURL, inTypeName, outError});
    }

    pub fn managedObjectContext(self: *@This()) ?*ManagedObjectContext {
        return objc.msgSend(self, "managedObjectContext", ?*ManagedObjectContext, .{});
    }

    pub fn setManagedObjectContext(self: *@This(), managedObjectContext: ?*ManagedObjectContext) void {
        return objc.msgSend(self, "setManagedObjectContext:", void, .{managedObjectContext});
    }

    pub fn managedObjectModel(self: *@This()) ?*ManagedObjectModel {
        return objc.msgSend(self, "managedObjectModel", ?*ManagedObjectModel, .{});
    }

};

pub const RuleEditorPredicatePartKey = ?*String;

pub const RuleEditorNestingMode = enum(objc.NSUInteger) {
    Single = 0,
    List = 1,
    Compound = 2,
    Simple = 3,
};

pub const RuleEditorRowType = enum(objc.NSUInteger) {
    Simple = 0,
    Compound = 1,
};

/// https://developer.apple.com/documentation/AppKit/NSRuleEditor?language=objc
pub const RuleEditor = opaque {
    pub const InternalInfo = objc.ExternalClass("NSRuleEditor", @This(), Control, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn reloadCriteria(self: *@This()) void {
        return objc.msgSend(self, "reloadCriteria", void, .{});
    }

    pub fn reloadPredicate(self: *@This()) void {
        return objc.msgSend(self, "reloadPredicate", void, .{});
    }

    pub fn predicateForRow(self: *@This(), row: objc.NSInteger) ?*Predicate {
        return objc.msgSend(self, "predicateForRow:", ?*Predicate, .{row});
    }

    pub fn subrowIndexesForRow(self: *@This(), rowIndex: objc.NSInteger) ?*IndexSet {
        return objc.msgSend(self, "subrowIndexesForRow:", ?*IndexSet, .{rowIndex});
    }

    pub fn criteriaForRow(self: *@This(), row: objc.NSInteger) ?*Array {
        return objc.msgSend(self, "criteriaForRow:", ?*Array, .{row});
    }

    pub fn displayValuesForRow(self: *@This(), row: objc.NSInteger) ?*Array {
        return objc.msgSend(self, "displayValuesForRow:", ?*Array, .{row});
    }

    pub fn rowForDisplayValue(self: *@This(), displayValue: *objc.Id) objc.NSInteger {
        return objc.msgSend(self, "rowForDisplayValue:", objc.NSInteger, .{displayValue});
    }

    pub fn rowTypeForRow(self: *@This(), rowIndex: objc.NSInteger) RuleEditorRowType {
        return objc.msgSend(self, "rowTypeForRow:", RuleEditorRowType, .{rowIndex});
    }

    pub fn parentRowForRow(self: *@This(), rowIndex: objc.NSInteger) objc.NSInteger {
        return objc.msgSend(self, "parentRowForRow:", objc.NSInteger, .{rowIndex});
    }

    pub fn addRow(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "addRow:", void, .{sender});
    }

    pub fn insertRowAtIndexWithTypeAsSubrowOfRowAnimate(self: *@This(), rowIndex: objc.NSInteger, rowType: RuleEditorRowType, parentRow: objc.NSInteger, shouldAnimate: objc.BOOL, ) void {
        return objc.msgSend(self, "insertRowAtIndex:withType:asSubrowOfRow:animate:", void, .{rowIndex, rowType, parentRow, shouldAnimate, });
    }

    pub fn setCriteriaAndDisplayValuesForRowAtIndex(self: *@This(), criteria: ?*Array, values: ?*Array, rowIndex: objc.NSInteger) void {
        return objc.msgSend(self, "setCriteria:andDisplayValues:forRowAtIndex:", void, .{criteria, values, rowIndex});
    }

    pub fn removeRowAtIndex(self: *@This(), rowIndex: objc.NSInteger) void {
        return objc.msgSend(self, "removeRowAtIndex:", void, .{rowIndex});
    }

    pub fn removeRowsAtIndexesIncludeSubrows(self: *@This(), rowIndexes: ?*IndexSet, includeSubrows: objc.BOOL) void {
        return objc.msgSend(self, "removeRowsAtIndexes:includeSubrows:", void, .{rowIndexes, includeSubrows});
    }

    pub fn selectRowIndexesByExtendingSelection(self: *@This(), indexes: ?*IndexSet, extend: objc.BOOL) void {
        return objc.msgSend(self, "selectRowIndexes:byExtendingSelection:", void, .{indexes, extend});
    }

    pub fn delegate(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "delegate", ?*anyopaque, .{});
    }

    pub fn setDelegate(self: *@This(), delegate: ?*anyopaque) void {
        return objc.msgSend(self, "setDelegate:", void, .{delegate});
    }

    pub fn formattingStringsFilename(self: *@This()) ?*String {
        return objc.msgSend(self, "formattingStringsFilename", ?*String, .{});
    }

    pub fn setFormattingStringsFilename(self: *@This(), formattingStringsFilename: ?*String) void {
        return objc.msgSend(self, "setFormattingStringsFilename:", void, .{formattingStringsFilename});
    }

    pub fn formattingDictionary(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "formattingDictionary", ?*anyopaque, .{});
    }

    pub fn setFormattingDictionary(self: *@This(), formattingDictionary: ?*anyopaque) void {
        return objc.msgSend(self, "setFormattingDictionary:", void, .{formattingDictionary});
    }

    pub fn nestingMode(self: *@This()) RuleEditorNestingMode {
        return objc.msgSend(self, "nestingMode", RuleEditorNestingMode, .{});
    }

    pub fn setNestingMode(self: *@This(), nestingMode: RuleEditorNestingMode) void {
        return objc.msgSend(self, "setNestingMode:", void, .{nestingMode});
    }

    pub fn rowHeight(self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(self, "rowHeight", core_foundation.CGFloat, .{});
    }

    pub fn setRowHeight(self: *@This(), rowHeight: core_foundation.CGFloat) void {
        return objc.msgSend(self, "setRowHeight:", void, .{rowHeight});
    }

    pub fn isEditable(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isEditable", objc.BOOL, .{});
    }

    pub fn setEditable(self: *@This(), editable: objc.BOOL) void {
        return objc.msgSend(self, "setEditable:", void, .{editable});
    }

    pub fn canRemoveAllRows(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "canRemoveAllRows", objc.BOOL, .{});
    }

    pub fn setCanRemoveAllRows(self: *@This(), canRemoveAllRows: objc.BOOL) void {
        return objc.msgSend(self, "setCanRemoveAllRows:", void, .{canRemoveAllRows});
    }

    pub fn predicate(self: *@This()) ?*Predicate {
        return objc.msgSend(self, "predicate", ?*Predicate, .{});
    }

    pub fn numberOfRows(self: *@This()) objc.NSInteger {
        return objc.msgSend(self, "numberOfRows", objc.NSInteger, .{});
    }

    pub fn selectedRowIndexes(self: *@This()) ?*IndexSet {
        return objc.msgSend(self, "selectedRowIndexes", ?*IndexSet, .{});
    }

    pub fn rowClass(self: *@This()) *objc.Class {
        return objc.msgSend(self, "rowClass", *objc.Class, .{});
    }

    pub fn setRowClass(self: *@This(), rowClass: *objc.Class) void {
        return objc.msgSend(self, "setRowClass:", void, .{rowClass});
    }

    pub fn rowTypeKeyPath(self: *@This()) ?*String {
        return objc.msgSend(self, "rowTypeKeyPath", ?*String, .{});
    }

    pub fn setRowTypeKeyPath(self: *@This(), rowTypeKeyPath: ?*String) void {
        return objc.msgSend(self, "setRowTypeKeyPath:", void, .{rowTypeKeyPath});
    }

    pub fn subrowsKeyPath(self: *@This()) ?*String {
        return objc.msgSend(self, "subrowsKeyPath", ?*String, .{});
    }

    pub fn setSubrowsKeyPath(self: *@This(), subrowsKeyPath: ?*String) void {
        return objc.msgSend(self, "setSubrowsKeyPath:", void, .{subrowsKeyPath});
    }

    pub fn criteriaKeyPath(self: *@This()) ?*String {
        return objc.msgSend(self, "criteriaKeyPath", ?*String, .{});
    }

    pub fn setCriteriaKeyPath(self: *@This(), criteriaKeyPath: ?*String) void {
        return objc.msgSend(self, "setCriteriaKeyPath:", void, .{criteriaKeyPath});
    }

    pub fn displayValuesKeyPath(self: *@This()) ?*String {
        return objc.msgSend(self, "displayValuesKeyPath", ?*String, .{});
    }

    pub fn setDisplayValuesKeyPath(self: *@This(), displayValuesKeyPath: ?*String) void {
        return objc.msgSend(self, "setDisplayValuesKeyPath:", void, .{displayValuesKeyPath});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSRuleEditorDelegate?language=objc
pub const RuleEditorDelegate = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{objc.NSObject, });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn ruleEditorNumberOfChildrenForCriterionWithRowType(self: *@This(), editor: ?*RuleEditor, criterion: *objc.Id, rowType: RuleEditorRowType) objc.NSInteger {
        return objc.msgSend(self, "ruleEditor:numberOfChildrenForCriterion:withRowType:", objc.NSInteger, .{editor, criterion, rowType});
    }

    pub fn ruleEditorChildForCriterionWithRowType(self: *@This(), editor: ?*RuleEditor, index: objc.NSInteger, criterion: *objc.Id, rowType: RuleEditorRowType, ) *objc.Id {
        return objc.msgSend(self, "ruleEditor:child:forCriterion:withRowType:", *objc.Id, .{editor, index, criterion, rowType, });
    }

    pub fn ruleEditorDisplayValueForCriterionInRow(self: *@This(), editor: ?*RuleEditor, criterion: *objc.Id, row: objc.NSInteger) *objc.Id {
        return objc.msgSend(self, "ruleEditor:displayValueForCriterion:inRow:", *objc.Id, .{editor, criterion, row});
    }

    pub fn ruleEditorPredicatePartsForCriterionWithDisplayValueInRow(self: *@This(), editor: ?*RuleEditor, criterion: *objc.Id, value: *objc.Id, row: objc.NSInteger, ) ?*anyopaque {
        return objc.msgSend(self, "ruleEditor:predicatePartsForCriterion:withDisplayValue:inRow:", ?*anyopaque, .{editor, criterion, value, row, });
    }

    pub fn ruleEditorRowsDidChange(self: *@This(), notification: ?*Notification) void {
        return objc.msgSend(self, "ruleEditorRowsDidChange:", void, .{notification});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSPredicateEditor?language=objc
pub const PredicateEditor = opaque {
    pub const InternalInfo = objc.ExternalClass("NSPredicateEditor", @This(), RuleEditor, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn rowTemplates(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "rowTemplates", ?*anyopaque, .{});
    }

    pub fn setRowTemplates(self: *@This(), rowTemplates: ?*anyopaque) void {
        return objc.msgSend(self, "setRowTemplates:", void, .{rowTemplates});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSPredicateEditorRowTemplate?language=objc
pub const PredicateEditorRowTemplate = opaque {
    pub const InternalInfo = objc.ExternalClass("NSPredicateEditorRowTemplate", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn matchForPredicate(self: *@This(), predicate: ?*Predicate) f64 {
        return objc.msgSend(self, "matchForPredicate:", f64, .{predicate});
    }

    pub fn setPredicate(self: *@This(), predicate: ?*Predicate) void {
        return objc.msgSend(self, "setPredicate:", void, .{predicate});
    }

    pub fn predicateWithSubpredicates(self: *@This(), subpredicates: ?*anyopaque) ?*Predicate {
        return objc.msgSend(self, "predicateWithSubpredicates:", ?*Predicate, .{subpredicates});
    }

    pub fn displayableSubpredicatesOfPredicate(self: *@This(), predicate: ?*Predicate) ?*anyopaque {
        return objc.msgSend(self, "displayableSubpredicatesOfPredicate:", ?*anyopaque, .{predicate});
    }

    pub fn initWithLeftExpressionsRightExpressionsModifierOperatorsOptions(self: *@This(), leftExpressions: ?*anyopaque, rightExpressions: ?*anyopaque, modifier: foundation.ComparisonPredicateModifier, operators: ?*anyopaque, options: objc.NSUInteger, ) *@This() {
        return objc.msgSend(self, "initWithLeftExpressions:rightExpressions:modifier:operators:options:", *@This(), .{leftExpressions, rightExpressions, modifier, operators, options, });
    }

    pub fn initWithLeftExpressionsRightExpressionAttributeTypeModifierOperatorsOptions(self: *@This(), leftExpressions: ?*anyopaque, attributeType: core_data.AttributeType, modifier: foundation.ComparisonPredicateModifier, operators: ?*anyopaque, options: objc.NSUInteger, ) *@This() {
        return objc.msgSend(self, "initWithLeftExpressions:rightExpressionAttributeType:modifier:operators:options:", *@This(), .{leftExpressions, attributeType, modifier, operators, options, });
    }

    pub fn initWithCompoundTypes(self: *@This(), compoundTypes: ?*anyopaque) *@This() {
        return objc.msgSend(self, "initWithCompoundTypes:", *@This(), .{compoundTypes});
    }

    pub fn templatesWithAttributeKeyPathsInEntityDescription(self: *@This(), keyPaths: ?*anyopaque, entityDescription: ?*EntityDescription) ?*anyopaque {
        return objc.msgSend(self, "templatesWithAttributeKeyPaths:inEntityDescription:", ?*anyopaque, .{keyPaths, entityDescription});
    }

    pub fn templateViews(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "templateViews", ?*anyopaque, .{});
    }

    pub fn leftExpressions(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "leftExpressions", ?*anyopaque, .{});
    }

    pub fn rightExpressions(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "rightExpressions", ?*anyopaque, .{});
    }

    pub fn rightExpressionAttributeType(self: *@This()) core_data.AttributeType {
        return objc.msgSend(self, "rightExpressionAttributeType", core_data.AttributeType, .{});
    }

    pub fn modifier(self: *@This()) foundation.ComparisonPredicateModifier {
        return objc.msgSend(self, "modifier", foundation.ComparisonPredicateModifier, .{});
    }

    pub fn operators(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "operators", ?*anyopaque, .{});
    }

    pub fn options(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "options", objc.NSUInteger, .{});
    }

    pub fn compoundTypes(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "compoundTypes", ?*anyopaque, .{});
    }

};

pub const PathStyle = enum(objc.NSInteger) {
    Standard = 0,
    PopUp = 2,
    NavigationBar = 1,
};

/// https://developer.apple.com/documentation/AppKit/NSPathCell?language=objc
pub const PathCell = opaque {
    pub const InternalInfo = objc.ExternalClass("NSPathCell", @This(), ActionCell, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn setObjectValue(self: *@This(), obj: ?*anyopaque) void {
        return objc.msgSend(self, "setObjectValue:", void, .{obj});
    }

    pub fn rectOfPathComponentCellWithFrameInView(self: *@This(), cell: ?*PathComponentCell, frame: foundation.Rect, view: ?*View) foundation.Rect {
        return objc.msgSend(self, "rectOfPathComponentCell:withFrame:inView:", foundation.Rect, .{cell, frame, view});
    }

    pub fn pathComponentCellAtPointWithFrameInView(self: *@This(), point: foundation.Point, frame: foundation.Rect, view: ?*View) ?*PathComponentCell {
        return objc.msgSend(self, "pathComponentCellAtPoint:withFrame:inView:", ?*PathComponentCell, .{point, frame, view});
    }

    pub fn mouseEnteredWithFrameInView(self: *@This(), event: ?*Event, frame: foundation.Rect, view: ?*View) void {
        return objc.msgSend(self, "mouseEntered:withFrame:inView:", void, .{event, frame, view});
    }

    pub fn mouseExitedWithFrameInView(self: *@This(), event: ?*Event, frame: foundation.Rect, view: ?*View) void {
        return objc.msgSend(self, "mouseExited:withFrame:inView:", void, .{event, frame, view});
    }

    pub fn pathStyle(self: *@This()) PathStyle {
        return objc.msgSend(self, "pathStyle", PathStyle, .{});
    }

    pub fn setPathStyle(self: *@This(), pathStyle: PathStyle) void {
        return objc.msgSend(self, "setPathStyle:", void, .{pathStyle});
    }

    pub fn URL(self: *@This()) ?*URL {
        return objc.msgSend(self, "URL", ?*URL, .{});
    }

    pub fn setURL(self: *@This(), URL: ?*URL) void {
        return objc.msgSend(self, "setURL:", void, .{URL});
    }

    pub fn allowedTypes(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "allowedTypes", ?*anyopaque, .{});
    }

    pub fn setAllowedTypes(self: *@This(), allowedTypes: ?*anyopaque) void {
        return objc.msgSend(self, "setAllowedTypes:", void, .{allowedTypes});
    }

    pub fn delegate(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "delegate", ?*anyopaque, .{});
    }

    pub fn setDelegate(self: *@This(), delegate: ?*anyopaque) void {
        return objc.msgSend(self, "setDelegate:", void, .{delegate});
    }

    pub fn pathComponentCellClass(self: *@This()) *objc.Class {
        return objc.msgSend(self, "pathComponentCellClass", *objc.Class, .{});
    }

    pub fn pathComponentCells(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "pathComponentCells", ?*anyopaque, .{});
    }

    pub fn setPathComponentCells(self: *@This(), pathComponentCells: ?*anyopaque) void {
        return objc.msgSend(self, "setPathComponentCells:", void, .{pathComponentCells});
    }

    pub fn clickedPathComponentCell(self: *@This()) ?*PathComponentCell {
        return objc.msgSend(self, "clickedPathComponentCell", ?*PathComponentCell, .{});
    }

    pub fn doubleAction(self: *@This()) *objc.SEL {
        return objc.msgSend(self, "doubleAction", *objc.SEL, .{});
    }

    pub fn setDoubleAction(self: *@This(), doubleAction: *objc.SEL) void {
        return objc.msgSend(self, "setDoubleAction:", void, .{doubleAction});
    }

    pub fn backgroundColor(self: *@This()) ?*Color {
        return objc.msgSend(self, "backgroundColor", ?*Color, .{});
    }

    pub fn setBackgroundColor(self: *@This(), backgroundColor: ?*Color) void {
        return objc.msgSend(self, "setBackgroundColor:", void, .{backgroundColor});
    }

    pub fn placeholderString(self: *@This()) ?*String {
        return objc.msgSend(self, "placeholderString", ?*String, .{});
    }

    pub fn setPlaceholderString(self: *@This(), placeholderString: ?*String) void {
        return objc.msgSend(self, "setPlaceholderString:", void, .{placeholderString});
    }

    pub fn placeholderAttributedString(self: *@This()) ?*AttributedString {
        return objc.msgSend(self, "placeholderAttributedString", ?*AttributedString, .{});
    }

    pub fn setPlaceholderAttributedString(self: *@This(), placeholderAttributedString: ?*AttributedString) void {
        return objc.msgSend(self, "setPlaceholderAttributedString:", void, .{placeholderAttributedString});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSPathCellDelegate?language=objc
pub const PathCellDelegate = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{objc.NSObject, });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn pathCellWillDisplayOpenPanel(self: *@This(), pathCell: ?*PathCell, openPanel: ?*OpenPanel) void {
        return objc.msgSend(self, "pathCell:willDisplayOpenPanel:", void, .{pathCell, openPanel});
    }

    pub fn pathCellWillPopUpMenu(self: *@This(), pathCell: ?*PathCell, menu: ?*Menu) void {
        return objc.msgSend(self, "pathCell:willPopUpMenu:", void, .{pathCell, menu});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSPathControl?language=objc
pub const PathControl = opaque {
    pub const InternalInfo = objc.ExternalClass("NSPathControl", @This(), Control, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn setDraggingSourceOperationMaskForLocal(self: *@This(), mask: DragOperation, isLocal: objc.BOOL) void {
        return objc.msgSend(self, "setDraggingSourceOperationMask:forLocal:", void, .{mask, isLocal});
    }

    pub fn isEditable(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isEditable", objc.BOOL, .{});
    }

    pub fn setEditable(self: *@This(), editable: objc.BOOL) void {
        return objc.msgSend(self, "setEditable:", void, .{editable});
    }

    pub fn allowedTypes(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "allowedTypes", ?*anyopaque, .{});
    }

    pub fn setAllowedTypes(self: *@This(), allowedTypes: ?*anyopaque) void {
        return objc.msgSend(self, "setAllowedTypes:", void, .{allowedTypes});
    }

    pub fn placeholderString(self: *@This()) ?*String {
        return objc.msgSend(self, "placeholderString", ?*String, .{});
    }

    pub fn setPlaceholderString(self: *@This(), placeholderString: ?*String) void {
        return objc.msgSend(self, "setPlaceholderString:", void, .{placeholderString});
    }

    pub fn placeholderAttributedString(self: *@This()) ?*AttributedString {
        return objc.msgSend(self, "placeholderAttributedString", ?*AttributedString, .{});
    }

    pub fn setPlaceholderAttributedString(self: *@This(), placeholderAttributedString: ?*AttributedString) void {
        return objc.msgSend(self, "setPlaceholderAttributedString:", void, .{placeholderAttributedString});
    }

    pub fn URL(self: *@This()) ?*URL {
        return objc.msgSend(self, "URL", ?*URL, .{});
    }

    pub fn setURL(self: *@This(), URL: ?*URL) void {
        return objc.msgSend(self, "setURL:", void, .{URL});
    }

    pub fn doubleAction(self: *@This()) *objc.SEL {
        return objc.msgSend(self, "doubleAction", *objc.SEL, .{});
    }

    pub fn setDoubleAction(self: *@This(), doubleAction: *objc.SEL) void {
        return objc.msgSend(self, "setDoubleAction:", void, .{doubleAction});
    }

    pub fn pathStyle(self: *@This()) PathStyle {
        return objc.msgSend(self, "pathStyle", PathStyle, .{});
    }

    pub fn setPathStyle(self: *@This(), pathStyle: PathStyle) void {
        return objc.msgSend(self, "setPathStyle:", void, .{pathStyle});
    }

    pub fn clickedPathItem(self: *@This()) ?*PathControlItem {
        return objc.msgSend(self, "clickedPathItem", ?*PathControlItem, .{});
    }

    pub fn pathItems(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "pathItems", ?*anyopaque, .{});
    }

    pub fn setPathItems(self: *@This(), pathItems: ?*anyopaque) void {
        return objc.msgSend(self, "setPathItems:", void, .{pathItems});
    }

    pub fn backgroundColor(self: *@This()) ?*Color {
        return objc.msgSend(self, "backgroundColor", ?*Color, .{});
    }

    pub fn setBackgroundColor(self: *@This(), backgroundColor: ?*Color) void {
        return objc.msgSend(self, "setBackgroundColor:", void, .{backgroundColor});
    }

    pub fn delegate(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "delegate", ?*anyopaque, .{});
    }

    pub fn setDelegate(self: *@This(), delegate: ?*anyopaque) void {
        return objc.msgSend(self, "setDelegate:", void, .{delegate});
    }

    pub fn menu(self: *@This()) ?*Menu {
        return objc.msgSend(self, "menu", ?*Menu, .{});
    }

    pub fn setMenu(self: *@This(), menu: ?*Menu) void {
        return objc.msgSend(self, "setMenu:", void, .{menu});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSPathControlDelegate?language=objc
pub const PathControlDelegate = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{objc.NSObject, });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn pathControlShouldDragItemWithPasteboard(self: *@This(), pathControl: ?*PathControl, pathItem: ?*PathControlItem, pasteboard: ?*Pasteboard) objc.BOOL {
        return objc.msgSend(self, "pathControl:shouldDragItem:withPasteboard:", objc.BOOL, .{pathControl, pathItem, pasteboard});
    }

    pub fn pathControlShouldDragPathComponentCellWithPasteboard(self: *@This(), pathControl: ?*PathControl, pathComponentCell: ?*PathComponentCell, pasteboard: ?*Pasteboard) objc.BOOL {
        return objc.msgSend(self, "pathControl:shouldDragPathComponentCell:withPasteboard:", objc.BOOL, .{pathControl, pathComponentCell, pasteboard});
    }

    pub fn pathControlValidateDrop(self: *@This(), pathControl: ?*PathControl, info: ?*anyopaque) DragOperation {
        return objc.msgSend(self, "pathControl:validateDrop:", DragOperation, .{pathControl, info});
    }

    pub fn pathControlAcceptDrop(self: *@This(), pathControl: ?*PathControl, info: ?*anyopaque) objc.BOOL {
        return objc.msgSend(self, "pathControl:acceptDrop:", objc.BOOL, .{pathControl, info});
    }

    pub fn pathControlWillDisplayOpenPanel(self: *@This(), pathControl: ?*PathControl, openPanel: ?*OpenPanel) void {
        return objc.msgSend(self, "pathControl:willDisplayOpenPanel:", void, .{pathControl, openPanel});
    }

    pub fn pathControlWillPopUpMenu(self: *@This(), pathControl: ?*PathControl, menu: ?*Menu) void {
        return objc.msgSend(self, "pathControl:willPopUpMenu:", void, .{pathControl, menu});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSPathComponentCell?language=objc
pub const PathComponentCell = opaque {
    pub const InternalInfo = objc.ExternalClass("NSPathComponentCell", @This(), TextFieldCell, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn image(self: *@This()) ?*Image {
        return objc.msgSend(self, "image", ?*Image, .{});
    }

    pub fn setImage(self: *@This(), image: ?*Image) void {
        return objc.msgSend(self, "setImage:", void, .{image});
    }

    pub fn URL(self: *@This()) ?*URL {
        return objc.msgSend(self, "URL", ?*URL, .{});
    }

    pub fn setURL(self: *@This(), URL: ?*URL) void {
        return objc.msgSend(self, "setURL:", void, .{URL});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSPathControlItem?language=objc
pub const PathControlItem = opaque {
    pub const InternalInfo = objc.ExternalClass("NSPathControlItem", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn title(self: *@This()) ?*String {
        return objc.msgSend(self, "title", ?*String, .{});
    }

    pub fn setTitle(self: *@This(), title: ?*String) void {
        return objc.msgSend(self, "setTitle:", void, .{title});
    }

    pub fn attributedTitle(self: *@This()) ?*AttributedString {
        return objc.msgSend(self, "attributedTitle", ?*AttributedString, .{});
    }

    pub fn setAttributedTitle(self: *@This(), attributedTitle: ?*AttributedString) void {
        return objc.msgSend(self, "setAttributedTitle:", void, .{attributedTitle});
    }

    pub fn image(self: *@This()) ?*Image {
        return objc.msgSend(self, "image", ?*Image, .{});
    }

    pub fn setImage(self: *@This(), image: ?*Image) void {
        return objc.msgSend(self, "setImage:", void, .{image});
    }

    pub fn URL(self: *@This()) ?*URL {
        return objc.msgSend(self, "URL", ?*URL, .{});
    }

};

pub const PageControllerObjectIdentifier = ?*String;

pub const PageControllerTransitionStyle = enum(objc.NSInteger) {
    StackHistory = 0,
    StackBook = 1,
    HorizontalStrip = 2,
};

/// https://developer.apple.com/documentation/AppKit/NSPageController?language=objc
pub const PageController = opaque {
    pub const InternalInfo = objc.ExternalClass("NSPageController", @This(), ViewController, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn navigateForwardToObject(self: *@This(), object: *objc.Id) void {
        return objc.msgSend(self, "navigateForwardToObject:", void, .{object});
    }

    pub fn completeTransition(self: *@This()) void {
        return objc.msgSend(self, "completeTransition", void, .{});
    }

    pub fn navigateBack(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "navigateBack:", void, .{sender});
    }

    pub fn navigateForward(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "navigateForward:", void, .{sender});
    }

    pub fn takeSelectedIndexFrom(self: *@This(), sender: *objc.Id) void {
        return objc.msgSend(self, "takeSelectedIndexFrom:", void, .{sender});
    }

    pub fn delegate(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "delegate", ?*anyopaque, .{});
    }

    pub fn setDelegate(self: *@This(), delegate: ?*anyopaque) void {
        return objc.msgSend(self, "setDelegate:", void, .{delegate});
    }

    pub fn selectedViewController(self: *@This()) ?*ViewController {
        return objc.msgSend(self, "selectedViewController", ?*ViewController, .{});
    }

    pub fn transitionStyle(self: *@This()) PageControllerTransitionStyle {
        return objc.msgSend(self, "transitionStyle", PageControllerTransitionStyle, .{});
    }

    pub fn setTransitionStyle(self: *@This(), transitionStyle: PageControllerTransitionStyle) void {
        return objc.msgSend(self, "setTransitionStyle:", void, .{transitionStyle});
    }

    pub fn arrangedObjects(self: *@This()) ?*Array {
        return objc.msgSend(self, "arrangedObjects", ?*Array, .{});
    }

    pub fn setArrangedObjects(self: *@This(), arrangedObjects: ?*Array) void {
        return objc.msgSend(self, "setArrangedObjects:", void, .{arrangedObjects});
    }

    pub fn selectedIndex(self: *@This()) objc.NSInteger {
        return objc.msgSend(self, "selectedIndex", objc.NSInteger, .{});
    }

    pub fn setSelectedIndex(self: *@This(), selectedIndex: objc.NSInteger) void {
        return objc.msgSend(self, "setSelectedIndex:", void, .{selectedIndex});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSPageControllerDelegate?language=objc
pub const PageControllerDelegate = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{objc.NSObject, });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn pageControllerIdentifierForObject(self: *@This(), pageController: ?*PageController, object: *objc.Id) PageControllerObjectIdentifier {
        return objc.msgSend(self, "pageController:identifierForObject:", PageControllerObjectIdentifier, .{pageController, object});
    }

    pub fn pageControllerViewControllerForIdentifier(self: *@This(), pageController: ?*PageController, identifier: PageControllerObjectIdentifier) ?*ViewController {
        return objc.msgSend(self, "pageController:viewControllerForIdentifier:", ?*ViewController, .{pageController, identifier});
    }

    pub fn pageControllerFrameForObject(self: *@This(), pageController: ?*PageController, object: *objc.Id) foundation.Rect {
        return objc.msgSend(self, "pageController:frameForObject:", foundation.Rect, .{pageController, object});
    }

    pub fn pageControllerPrepareViewControllerWithObject(self: *@This(), pageController: ?*PageController, viewController: ?*ViewController, object: *objc.Id) void {
        return objc.msgSend(self, "pageController:prepareViewController:withObject:", void, .{pageController, viewController, object});
    }

    pub fn pageControllerDidTransitionToObject(self: *@This(), pageController: ?*PageController, object: *objc.Id) void {
        return objc.msgSend(self, "pageController:didTransitionToObject:", void, .{pageController, object});
    }

    pub fn pageControllerWillStartLiveTransition(self: *@This(), pageController: ?*PageController) void {
        return objc.msgSend(self, "pageControllerWillStartLiveTransition:", void, .{pageController});
    }

    pub fn pageControllerDidEndLiveTransition(self: *@This(), pageController: ?*PageController) void {
        return objc.msgSend(self, "pageControllerDidEndLiveTransition:", void, .{pageController});
    }

};

pub const TextInputSourceIdentifier = ?*String;

/// https://developer.apple.com/documentation/AppKit/NSTextInputContext?language=objc
pub const TextInputContext = opaque {
    pub const InternalInfo = objc.ExternalClass("NSTextInputContext", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn initWithClient(self: *@This(), client: ?*anyopaque) *@This() {
        return objc.msgSend(self, "initWithClient:", *@This(), .{client});
    }

    pub fn init(self: *@This()) *@This() {
        return objc.msgSend(self, "init", *@This(), .{});
    }

    pub fn activate(self: *@This()) void {
        return objc.msgSend(self, "activate", void, .{});
    }

    pub fn deactivate(self: *@This()) void {
        return objc.msgSend(self, "deactivate", void, .{});
    }

    pub fn handleEvent(self: *@This(), event: ?*Event) objc.BOOL {
        return objc.msgSend(self, "handleEvent:", objc.BOOL, .{event});
    }

    pub fn discardMarkedText(self: *@This()) void {
        return objc.msgSend(self, "discardMarkedText", void, .{});
    }

    pub fn invalidateCharacterCoordinates(self: *@This()) void {
        return objc.msgSend(self, "invalidateCharacterCoordinates", void, .{});
    }

    pub fn textInputClientWillStartScrollingOrZooming(self: *@This()) void {
        return objc.msgSend(self, "textInputClientWillStartScrollingOrZooming", void, .{});
    }

    pub fn textInputClientDidEndScrollingOrZooming(self: *@This()) void {
        return objc.msgSend(self, "textInputClientDidEndScrollingOrZooming", void, .{});
    }

    pub fn localizedNameForInputSource(self: *@This(), inputSourceIdentifier: TextInputSourceIdentifier) ?*String {
        return objc.msgSend(self, "localizedNameForInputSource:", ?*String, .{inputSourceIdentifier});
    }

    pub fn currentInputContext(self: *@This()) ?*TextInputContext {
        return objc.msgSend(self, "currentInputContext", ?*TextInputContext, .{});
    }

    pub fn client(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "client", ?*anyopaque, .{});
    }

    pub fn acceptsGlyphInfo(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "acceptsGlyphInfo", objc.BOOL, .{});
    }

    pub fn setAcceptsGlyphInfo(self: *@This(), acceptsGlyphInfo: objc.BOOL) void {
        return objc.msgSend(self, "setAcceptsGlyphInfo:", void, .{acceptsGlyphInfo});
    }

    pub fn allowedInputSourceLocales(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "allowedInputSourceLocales", ?*anyopaque, .{});
    }

    pub fn setAllowedInputSourceLocales(self: *@This(), allowedInputSourceLocales: ?*anyopaque) void {
        return objc.msgSend(self, "setAllowedInputSourceLocales:", void, .{allowedInputSourceLocales});
    }

    pub fn keyboardInputSources(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "keyboardInputSources", ?*anyopaque, .{});
    }

    pub fn selectedKeyboardInputSource(self: *@This()) TextInputSourceIdentifier {
        return objc.msgSend(self, "selectedKeyboardInputSource", TextInputSourceIdentifier, .{});
    }

    pub fn setSelectedKeyboardInputSource(self: *@This(), selectedKeyboardInputSource: TextInputSourceIdentifier) void {
        return objc.msgSend(self, "setSelectedKeyboardInputSource:", void, .{selectedKeyboardInputSource});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSUserInterfaceItemSearching?language=objc
pub const UserInterfaceItemSearching = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{objc.NSObject, });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn searchForItemsWithSearchStringResultLimitMatchedItemHandler(self: *@This(), searchString: ?*String, resultLimit: objc.NSInteger, handleMatchedItems: *const fn(?*Array) callconv(.C) void) void {
        return objc.msgSend(self, "searchForItemsWithSearchString:resultLimit:matchedItemHandler:", void, .{searchString, resultLimit, handleMatchedItems});
    }

    pub fn localizedTitlesForItem(self: *@This(), item: *objc.Id) ?*anyopaque {
        return objc.msgSend(self, "localizedTitlesForItem:", ?*anyopaque, .{item});
    }

    pub fn performActionForItem(self: *@This(), item: *objc.Id) void {
        return objc.msgSend(self, "performActionForItem:", void, .{item});
    }

    pub fn showAllHelpTopicsForSearchString(self: *@This(), searchString: ?*String) void {
        return objc.msgSend(self, "showAllHelpTopicsForSearchString:", void, .{searchString});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSWindowRestoration?language=objc
pub const WindowRestoration = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{objc.NSObject, });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn restoreWindowWithIdentifierStateCompletionHandler(self: *@This(), identifier: UserInterfaceItemIdentifier, state: ?*foundation.Coder, completionHandler: *const fn(?*Window, ?*Error) callconv(.C) void) void {
        return objc.msgSend(self, "restoreWindowWithIdentifier:state:completionHandler:", void, .{identifier, state, completionHandler});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSTextAlternatives?language=objc
pub const TextAlternatives = opaque {
    pub const InternalInfo = objc.ExternalClass("NSTextAlternatives", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn initWithPrimaryStringAlternativeStrings(self: *@This(), primaryString: ?*String, alternativeStrings: ?*anyopaque) *@This() {
        return objc.msgSend(self, "initWithPrimaryString:alternativeStrings:", *@This(), .{primaryString, alternativeStrings});
    }

    pub fn noteSelectedAlternativeString(self: *@This(), alternativeString: ?*String) void {
        return objc.msgSend(self, "noteSelectedAlternativeString:", void, .{alternativeString});
    }

    pub fn primaryString(self: *@This()) ?*String {
        return objc.msgSend(self, "primaryString", ?*String, .{});
    }

    pub fn alternativeStrings(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "alternativeStrings", ?*anyopaque, .{});
    }

};

pub const VisualEffectMaterial = enum(objc.NSInteger) {
    Titlebar = 3,
    Selection = 4,
    Menu = 5,
    Popover = 6,
    Sidebar = 7,
    HeaderView = 10,
    Sheet = 11,
    WindowBackground = 12,
    HUDWindow = 13,
    FullScreenUI = 15,
    ToolTip = 17,
    ContentBackground = 18,
    UnderWindowBackground = 21,
    UnderPageBackground = 22,
    AppearanceBased = 0,
    Light = 1,
    Dark = 2,
    MediumLight = 8,
    UltraDark = 9,
};

pub const VisualEffectBlendingMode = enum(objc.NSInteger) {
    BehindWindow = 0,
    WithinWindow = 1,
};

pub const VisualEffectState = enum(objc.NSInteger) {
    FollowsWindowActiveState = 0,
    Active = 1,
    Inactive = 2,
};

/// https://developer.apple.com/documentation/AppKit/NSVisualEffectView?language=objc
pub const VisualEffectView = opaque {
    pub const InternalInfo = objc.ExternalClass("NSVisualEffectView", @This(), View, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn viewDidMoveToWindow(self: *@This()) void {
        return objc.msgSend(self, "viewDidMoveToWindow", void, .{});
    }

    pub fn viewWillMoveToWindow(self: *@This(), newWindow: ?*Window) void {
        return objc.msgSend(self, "viewWillMoveToWindow:", void, .{newWindow});
    }

    pub fn material(self: *@This()) VisualEffectMaterial {
        return objc.msgSend(self, "material", VisualEffectMaterial, .{});
    }

    pub fn setMaterial(self: *@This(), material: VisualEffectMaterial) void {
        return objc.msgSend(self, "setMaterial:", void, .{material});
    }

    pub fn interiorBackgroundStyle(self: *@This()) BackgroundStyle {
        return objc.msgSend(self, "interiorBackgroundStyle", BackgroundStyle, .{});
    }

    pub fn blendingMode(self: *@This()) VisualEffectBlendingMode {
        return objc.msgSend(self, "blendingMode", VisualEffectBlendingMode, .{});
    }

    pub fn setBlendingMode(self: *@This(), blendingMode: VisualEffectBlendingMode) void {
        return objc.msgSend(self, "setBlendingMode:", void, .{blendingMode});
    }

    pub fn state(self: *@This()) VisualEffectState {
        return objc.msgSend(self, "state", VisualEffectState, .{});
    }

    pub fn setState(self: *@This(), state: VisualEffectState) void {
        return objc.msgSend(self, "setState:", void, .{state});
    }

    pub fn maskImage(self: *@This()) ?*Image {
        return objc.msgSend(self, "maskImage", ?*Image, .{});
    }

    pub fn setMaskImage(self: *@This(), maskImage: ?*Image) void {
        return objc.msgSend(self, "setMaskImage:", void, .{maskImage});
    }

    pub fn isEmphasized(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isEmphasized", objc.BOOL, .{});
    }

    pub fn setEmphasized(self: *@This(), emphasized: objc.BOOL) void {
        return objc.msgSend(self, "setEmphasized:", void, .{emphasized});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSTitlebarAccessoryViewController?language=objc
pub const TitlebarAccessoryViewController = opaque {
    pub const InternalInfo = objc.ExternalClass("NSTitlebarAccessoryViewController", @This(), ViewController, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn viewWillAppear(self: *@This()) void {
        return objc.msgSend(self, "viewWillAppear", void, .{});
    }

    pub fn viewDidAppear(self: *@This()) void {
        return objc.msgSend(self, "viewDidAppear", void, .{});
    }

    pub fn viewDidDisappear(self: *@This()) void {
        return objc.msgSend(self, "viewDidDisappear", void, .{});
    }

    pub fn layoutAttribute(self: *@This()) LayoutAttribute {
        return objc.msgSend(self, "layoutAttribute", LayoutAttribute, .{});
    }

    pub fn setLayoutAttribute(self: *@This(), layoutAttribute: LayoutAttribute) void {
        return objc.msgSend(self, "setLayoutAttribute:", void, .{layoutAttribute});
    }

    pub fn fullScreenMinHeight(self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(self, "fullScreenMinHeight", core_foundation.CGFloat, .{});
    }

    pub fn setFullScreenMinHeight(self: *@This(), fullScreenMinHeight: core_foundation.CGFloat) void {
        return objc.msgSend(self, "setFullScreenMinHeight:", void, .{fullScreenMinHeight});
    }

    pub fn isHidden(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isHidden", objc.BOOL, .{});
    }

    pub fn setHidden(self: *@This(), hidden: objc.BOOL) void {
        return objc.msgSend(self, "setHidden:", void, .{hidden});
    }

    pub fn automaticallyAdjustsSize(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "automaticallyAdjustsSize", objc.BOOL, .{});
    }

    pub fn setAutomaticallyAdjustsSize(self: *@This(), automaticallyAdjustsSize: objc.BOOL) void {
        return objc.msgSend(self, "setAutomaticallyAdjustsSize:", void, .{automaticallyAdjustsSize});
    }

};

pub const DataAssetName = ?*String;

/// https://developer.apple.com/documentation/AppKit/NSDataAsset?language=objc
pub const DataAsset = opaque {
    pub const InternalInfo = objc.ExternalClass("NSDataAsset", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn init(self: *@This()) *@This() {
        return objc.msgSend(self, "init", *@This(), .{});
    }

    pub fn initWithName(self: *@This(), name: DataAssetName) *@This() {
        return objc.msgSend(self, "initWithName:", *@This(), .{name});
    }

    pub fn initWithNameBundle(self: *@This(), name: DataAssetName, bundle: ?*Bundle) *@This() {
        return objc.msgSend(self, "initWithName:bundle:", *@This(), .{name, bundle});
    }

    pub fn name(self: *@This()) DataAssetName {
        return objc.msgSend(self, "name", DataAssetName, .{});
    }

    pub fn data(self: *@This()) ?*core_data.Data {
        return objc.msgSend(self, "data", ?*core_data.Data, .{});
    }

    pub fn typeIdentifier(self: *@This()) ?*String {
        return objc.msgSend(self, "typeIdentifier", ?*String, .{});
    }

};

pub const HapticFeedbackPattern = enum(objc.NSInteger) {
    Generic = 0,
    Alignment = 1,
    LevelChange = 2,
};

pub const HapticFeedbackPerformanceTime = enum(objc.NSUInteger) {
    Default = 0,
    Now = 1,
    DrawCompleted = 2,
};

/// https://developer.apple.com/documentation/AppKit/NSHapticFeedbackPerformer?language=objc
pub const HapticFeedbackPerformer = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{objc.NSObject, });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn performFeedbackPatternPerformanceTime(self: *@This(), pattern: HapticFeedbackPattern, performanceTime: HapticFeedbackPerformanceTime) void {
        return objc.msgSend(self, "performFeedbackPattern:performanceTime:", void, .{pattern, performanceTime});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSHapticFeedbackManager?language=objc
pub const HapticFeedbackManager = opaque {
    pub const InternalInfo = objc.ExternalClass("NSHapticFeedbackManager", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn defaultPerformer(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "defaultPerformer", ?*anyopaque, .{});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSAlignmentFeedbackToken?language=objc
pub const AlignmentFeedbackToken = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{objc.NSObject, });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
};

/// https://developer.apple.com/documentation/AppKit/NSAlignmentFeedbackFilter?language=objc
pub const AlignmentFeedbackFilter = opaque {
    pub const InternalInfo = objc.ExternalClass("NSAlignmentFeedbackFilter", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn updateWithEvent(self: *@This(), event: ?*Event) void {
        return objc.msgSend(self, "updateWithEvent:", void, .{event});
    }

    pub fn updateWithPanRecognizer(self: *@This(), panRecognizer: ?*PanGestureRecognizer) void {
        return objc.msgSend(self, "updateWithPanRecognizer:", void, .{panRecognizer});
    }

    pub fn alignmentFeedbackTokenForMovementInViewPreviousPointAlignedPointDefaultPoint(self: *@This(), view: ?*View, previousPoint: foundation.Point, alignedPoint: foundation.Point, defaultPoint: foundation.Point, ) ?*anyopaque {
        return objc.msgSend(self, "alignmentFeedbackTokenForMovementInView:previousPoint:alignedPoint:defaultPoint:", ?*anyopaque, .{view, previousPoint, alignedPoint, defaultPoint, });
    }

    pub fn alignmentFeedbackTokenForHorizontalMovementInViewPreviousXAlignedXDefaultX(self: *@This(), view: ?*View, previousX: core_foundation.CGFloat, alignedX: core_foundation.CGFloat, defaultX: core_foundation.CGFloat, ) ?*anyopaque {
        return objc.msgSend(self, "alignmentFeedbackTokenForHorizontalMovementInView:previousX:alignedX:defaultX:", ?*anyopaque, .{view, previousX, alignedX, defaultX, });
    }

    pub fn alignmentFeedbackTokenForVerticalMovementInViewPreviousYAlignedYDefaultY(self: *@This(), view: ?*View, previousY: core_foundation.CGFloat, alignedY: core_foundation.CGFloat, defaultY: core_foundation.CGFloat, ) ?*anyopaque {
        return objc.msgSend(self, "alignmentFeedbackTokenForVerticalMovementInView:previousY:alignedY:defaultY:", ?*anyopaque, .{view, previousY, alignedY, defaultY, });
    }

    pub fn performFeedbackPerformanceTime(self: *@This(), alignmentFeedbackTokens: ?*anyopaque, performanceTime: HapticFeedbackPerformanceTime) void {
        return objc.msgSend(self, "performFeedback:performanceTime:", void, .{alignmentFeedbackTokens, performanceTime});
    }

    pub fn inputEventMask(self: *@This()) EventMask {
        return objc.msgSend(self, "inputEventMask", EventMask, .{});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSPressureConfiguration?language=objc
pub const PressureConfiguration = opaque {
    pub const InternalInfo = objc.ExternalClass("NSPressureConfiguration", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn initWithPressureBehavior(self: *@This(), pressureBehavior: PressureBehavior) *@This() {
        return objc.msgSend(self, "initWithPressureBehavior:", *@This(), .{pressureBehavior});
    }

    pub fn set(self: *@This()) void {
        return objc.msgSend(self, "set", void, .{});
    }

    pub fn pressureBehavior(self: *@This()) PressureBehavior {
        return objc.msgSend(self, "pressureBehavior", PressureBehavior, .{});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSButtonTouchBarItem?language=objc
pub const ButtonTouchBarItem = opaque {
    pub const InternalInfo = objc.ExternalClass("NSButtonTouchBarItem", @This(), TouchBarItem, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn buttonTouchBarItemWithIdentifierTitleTargetAction(self: *@This(), identifier: TouchBarItemIdentifier, title: ?*String, target: *objc.Id, action: *objc.SEL, ) *@This() {
        return objc.msgSend(self, "buttonTouchBarItemWithIdentifier:title:target:action:", *@This(), .{identifier, title, target, action, });
    }

    pub fn buttonTouchBarItemWithIdentifierImageTargetAction(self: *@This(), identifier: TouchBarItemIdentifier, image: ?*Image, target: *objc.Id, action: *objc.SEL, ) *@This() {
        return objc.msgSend(self, "buttonTouchBarItemWithIdentifier:image:target:action:", *@This(), .{identifier, image, target, action, });
    }

    pub fn buttonTouchBarItemWithIdentifierTitleImageTargetAction(self: *@This(), identifier: TouchBarItemIdentifier, title: ?*String, image: ?*Image, target: *objc.Id, action: *objc.SEL, ) *@This() {
        return objc.msgSend(self, "buttonTouchBarItemWithIdentifier:title:image:target:action:", *@This(), .{identifier, title, image, target, action, });
    }

    pub fn title(self: *@This()) ?*String {
        return objc.msgSend(self, "title", ?*String, .{});
    }

    pub fn setTitle(self: *@This(), title: ?*String) void {
        return objc.msgSend(self, "setTitle:", void, .{title});
    }

    pub fn image(self: *@This()) ?*Image {
        return objc.msgSend(self, "image", ?*Image, .{});
    }

    pub fn setImage(self: *@This(), image: ?*Image) void {
        return objc.msgSend(self, "setImage:", void, .{image});
    }

    pub fn bezelColor(self: *@This()) ?*Color {
        return objc.msgSend(self, "bezelColor", ?*Color, .{});
    }

    pub fn setBezelColor(self: *@This(), bezelColor: ?*Color) void {
        return objc.msgSend(self, "setBezelColor:", void, .{bezelColor});
    }

    pub fn target(self: *@This()) *objc.Id {
        return objc.msgSend(self, "target", *objc.Id, .{});
    }

    pub fn setTarget(self: *@This(), target: *objc.Id) void {
        return objc.msgSend(self, "setTarget:", void, .{target});
    }

    pub fn action(self: *@This()) *objc.SEL {
        return objc.msgSend(self, "action", *objc.SEL, .{});
    }

    pub fn setAction(self: *@This(), action: *objc.SEL) void {
        return objc.msgSend(self, "setAction:", void, .{action});
    }

    pub fn isEnabled(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isEnabled", objc.BOOL, .{});
    }

    pub fn setEnabled(self: *@This(), enabled: objc.BOOL) void {
        return objc.msgSend(self, "setEnabled:", void, .{enabled});
    }

    pub fn customizationLabel(self: *@This()) ?*String {
        return objc.msgSend(self, "customizationLabel", ?*String, .{});
    }

    pub fn setCustomizationLabel(self: *@This(), customizationLabel: ?*String) void {
        return objc.msgSend(self, "setCustomizationLabel:", void, .{customizationLabel});
    }

};

pub const PickerTouchBarItemSelectionMode = enum(objc.NSInteger) {
    SelectOne = 0,
    SelectAny = 1,
    Momentary = 2,
};

pub const PickerTouchBarItemControlRepresentation = enum(objc.NSInteger) {
    Automatic = 0,
    Expanded = 1,
    Collapsed = 2,
};

/// https://developer.apple.com/documentation/AppKit/NSPickerTouchBarItem?language=objc
pub const PickerTouchBarItem = opaque {
    pub const InternalInfo = objc.ExternalClass("NSPickerTouchBarItem", @This(), TouchBarItem, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn pickerTouchBarItemWithIdentifierLabelsSelectionModeTargetAction(self: *@This(), identifier: TouchBarItemIdentifier, labels: ?*anyopaque, selectionMode: PickerTouchBarItemSelectionMode, target: *objc.Id, action: *objc.SEL, ) *@This() {
        return objc.msgSend(self, "pickerTouchBarItemWithIdentifier:labels:selectionMode:target:action:", *@This(), .{identifier, labels, selectionMode, target, action, });
    }

    pub fn pickerTouchBarItemWithIdentifierImagesSelectionModeTargetAction(self: *@This(), identifier: TouchBarItemIdentifier, images: ?*anyopaque, selectionMode: PickerTouchBarItemSelectionMode, target: *objc.Id, action: *objc.SEL, ) *@This() {
        return objc.msgSend(self, "pickerTouchBarItemWithIdentifier:images:selectionMode:target:action:", *@This(), .{identifier, images, selectionMode, target, action, });
    }

    pub fn setImageAtIndex(self: *@This(), image: ?*Image, index: objc.NSInteger) void {
        return objc.msgSend(self, "setImage:atIndex:", void, .{image, index});
    }

    pub fn imageAtIndex(self: *@This(), index: objc.NSInteger) ?*Image {
        return objc.msgSend(self, "imageAtIndex:", ?*Image, .{index});
    }

    pub fn setLabelAtIndex(self: *@This(), label: ?*String, index: objc.NSInteger) void {
        return objc.msgSend(self, "setLabel:atIndex:", void, .{label, index});
    }

    pub fn labelAtIndex(self: *@This(), index: objc.NSInteger) ?*String {
        return objc.msgSend(self, "labelAtIndex:", ?*String, .{index});
    }

    pub fn setEnabledAtIndex(self: *@This(), enabled: objc.BOOL, index: objc.NSInteger) void {
        return objc.msgSend(self, "setEnabled:atIndex:", void, .{enabled, index});
    }

    pub fn isEnabledAtIndex(self: *@This(), index: objc.NSInteger) objc.BOOL {
        return objc.msgSend(self, "isEnabledAtIndex:", objc.BOOL, .{index});
    }

    pub fn controlRepresentation(self: *@This()) PickerTouchBarItemControlRepresentation {
        return objc.msgSend(self, "controlRepresentation", PickerTouchBarItemControlRepresentation, .{});
    }

    pub fn setControlRepresentation(self: *@This(), controlRepresentation: PickerTouchBarItemControlRepresentation) void {
        return objc.msgSend(self, "setControlRepresentation:", void, .{controlRepresentation});
    }

    pub fn collapsedRepresentationLabel(self: *@This()) ?*String {
        return objc.msgSend(self, "collapsedRepresentationLabel", ?*String, .{});
    }

    pub fn setCollapsedRepresentationLabel(self: *@This(), collapsedRepresentationLabel: ?*String) void {
        return objc.msgSend(self, "setCollapsedRepresentationLabel:", void, .{collapsedRepresentationLabel});
    }

    pub fn collapsedRepresentationImage(self: *@This()) ?*Image {
        return objc.msgSend(self, "collapsedRepresentationImage", ?*Image, .{});
    }

    pub fn setCollapsedRepresentationImage(self: *@This(), collapsedRepresentationImage: ?*Image) void {
        return objc.msgSend(self, "setCollapsedRepresentationImage:", void, .{collapsedRepresentationImage});
    }

    pub fn selectedIndex(self: *@This()) objc.NSInteger {
        return objc.msgSend(self, "selectedIndex", objc.NSInteger, .{});
    }

    pub fn setSelectedIndex(self: *@This(), selectedIndex: objc.NSInteger) void {
        return objc.msgSend(self, "setSelectedIndex:", void, .{selectedIndex});
    }

    pub fn selectionColor(self: *@This()) ?*Color {
        return objc.msgSend(self, "selectionColor", ?*Color, .{});
    }

    pub fn setSelectionColor(self: *@This(), selectionColor: ?*Color) void {
        return objc.msgSend(self, "setSelectionColor:", void, .{selectionColor});
    }

    pub fn selectionMode(self: *@This()) PickerTouchBarItemSelectionMode {
        return objc.msgSend(self, "selectionMode", PickerTouchBarItemSelectionMode, .{});
    }

    pub fn setSelectionMode(self: *@This(), selectionMode: PickerTouchBarItemSelectionMode) void {
        return objc.msgSend(self, "setSelectionMode:", void, .{selectionMode});
    }

    pub fn numberOfOptions(self: *@This()) objc.NSInteger {
        return objc.msgSend(self, "numberOfOptions", objc.NSInteger, .{});
    }

    pub fn setNumberOfOptions(self: *@This(), numberOfOptions: objc.NSInteger) void {
        return objc.msgSend(self, "setNumberOfOptions:", void, .{numberOfOptions});
    }

    pub fn target(self: *@This()) *objc.Id {
        return objc.msgSend(self, "target", *objc.Id, .{});
    }

    pub fn setTarget(self: *@This(), target: *objc.Id) void {
        return objc.msgSend(self, "setTarget:", void, .{target});
    }

    pub fn action(self: *@This()) *objc.SEL {
        return objc.msgSend(self, "action", *objc.SEL, .{});
    }

    pub fn setAction(self: *@This(), action: *objc.SEL) void {
        return objc.msgSend(self, "setAction:", void, .{action});
    }

    pub fn isEnabled(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isEnabled", objc.BOOL, .{});
    }

    pub fn setEnabled(self: *@This(), enabled: objc.BOOL) void {
        return objc.msgSend(self, "setEnabled:", void, .{enabled});
    }

    pub fn customizationLabel(self: *@This()) ?*String {
        return objc.msgSend(self, "customizationLabel", ?*String, .{});
    }

    pub fn setCustomizationLabel(self: *@This(), customizationLabel: ?*String) void {
        return objc.msgSend(self, "setCustomizationLabel:", void, .{customizationLabel});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSStepperTouchBarItem?language=objc
pub const StepperTouchBarItem = opaque {
    pub const InternalInfo = objc.ExternalClass("NSStepperTouchBarItem", @This(), TouchBarItem, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn stepperTouchBarItemWithIdentifierFormatter(self: *@This(), identifier: TouchBarItemIdentifier, formatter: ?*Formatter) *@This() {
        return objc.msgSend(self, "stepperTouchBarItemWithIdentifier:formatter:", *@This(), .{identifier, formatter});
    }

    pub fn stepperTouchBarItemWithIdentifierDrawingHandler(self: *@This(), identifier: TouchBarItemIdentifier, drawingHandler: *const fn(foundation.Rect, f64) callconv(.C) void) *@This() {
        return objc.msgSend(self, "stepperTouchBarItemWithIdentifier:drawingHandler:", *@This(), .{identifier, drawingHandler});
    }

    pub fn maxValue(self: *@This()) f64 {
        return objc.msgSend(self, "maxValue", f64, .{});
    }

    pub fn setMaxValue(self: *@This(), maxValue: f64) void {
        return objc.msgSend(self, "setMaxValue:", void, .{maxValue});
    }

    pub fn minValue(self: *@This()) f64 {
        return objc.msgSend(self, "minValue", f64, .{});
    }

    pub fn setMinValue(self: *@This(), minValue: f64) void {
        return objc.msgSend(self, "setMinValue:", void, .{minValue});
    }

    pub fn increment(self: *@This()) f64 {
        return objc.msgSend(self, "increment", f64, .{});
    }

    pub fn setIncrement(self: *@This(), increment: f64) void {
        return objc.msgSend(self, "setIncrement:", void, .{increment});
    }

    pub fn value(self: *@This()) f64 {
        return objc.msgSend(self, "value", f64, .{});
    }

    pub fn setValue(self: *@This(), value: f64) void {
        return objc.msgSend(self, "setValue:", void, .{value});
    }

    pub fn target(self: *@This()) *objc.Id {
        return objc.msgSend(self, "target", *objc.Id, .{});
    }

    pub fn setTarget(self: *@This(), target: *objc.Id) void {
        return objc.msgSend(self, "setTarget:", void, .{target});
    }

    pub fn action(self: *@This()) *objc.SEL {
        return objc.msgSend(self, "action", *objc.SEL, .{});
    }

    pub fn setAction(self: *@This(), action: *objc.SEL) void {
        return objc.msgSend(self, "setAction:", void, .{action});
    }

    pub fn customizationLabel(self: *@This()) ?*String {
        return objc.msgSend(self, "customizationLabel", ?*String, .{});
    }

    pub fn setCustomizationLabel(self: *@This(), customizationLabel: ?*String) void {
        return objc.msgSend(self, "setCustomizationLabel:", void, .{customizationLabel});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSTintConfiguration?language=objc
pub const TintConfiguration = opaque {
    pub const InternalInfo = objc.ExternalClass("NSTintConfiguration", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn tintConfigurationWithPreferredColor(self: *@This(), color: ?*Color) *@This() {
        return objc.msgSend(self, "tintConfigurationWithPreferredColor:", *@This(), .{color});
    }

    pub fn tintConfigurationWithFixedColor(self: *@This(), color: ?*Color) *@This() {
        return objc.msgSend(self, "tintConfigurationWithFixedColor:", *@This(), .{color});
    }

    pub fn defaultTintConfiguration(self: *@This()) ?*TintConfiguration {
        return objc.msgSend(self, "defaultTintConfiguration", ?*TintConfiguration, .{});
    }

    pub fn monochromeTintConfiguration(self: *@This()) ?*TintConfiguration {
        return objc.msgSend(self, "monochromeTintConfiguration", ?*TintConfiguration, .{});
    }

    pub fn baseTintColor(self: *@This()) ?*Color {
        return objc.msgSend(self, "baseTintColor", ?*Color, .{});
    }

    pub fn equivalentContentTintColor(self: *@This()) ?*Color {
        return objc.msgSend(self, "equivalentContentTintColor", ?*Color, .{});
    }

    pub fn adaptsToUserAccentColor(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "adaptsToUserAccentColor", objc.BOOL, .{});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSSearchToolbarItem?language=objc
pub const SearchToolbarItem = opaque {
    pub const InternalInfo = objc.ExternalClass("NSSearchToolbarItem", @This(), ToolbarItem, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn beginSearchInteraction(self: *@This()) void {
        return objc.msgSend(self, "beginSearchInteraction", void, .{});
    }

    pub fn endSearchInteraction(self: *@This()) void {
        return objc.msgSend(self, "endSearchInteraction", void, .{});
    }

    pub fn searchField(self: *@This()) ?*SearchField {
        return objc.msgSend(self, "searchField", ?*SearchField, .{});
    }

    pub fn setSearchField(self: *@This(), searchField: ?*SearchField) void {
        return objc.msgSend(self, "setSearchField:", void, .{searchField});
    }

    pub fn view(self: *@This()) ?*View {
        return objc.msgSend(self, "view", ?*View, .{});
    }

    pub fn setView(self: *@This(), view: ?*View) void {
        return objc.msgSend(self, "setView:", void, .{view});
    }

    pub fn resignsFirstResponderWithCancel(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "resignsFirstResponderWithCancel", objc.BOOL, .{});
    }

    pub fn setResignsFirstResponderWithCancel(self: *@This(), resignsFirstResponderWithCancel: objc.BOOL) void {
        return objc.msgSend(self, "setResignsFirstResponderWithCancel:", void, .{resignsFirstResponderWithCancel});
    }

    pub fn preferredWidthForSearchField(self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(self, "preferredWidthForSearchField", core_foundation.CGFloat, .{});
    }

    pub fn setPreferredWidthForSearchField(self: *@This(), preferredWidthForSearchField: core_foundation.CGFloat) void {
        return objc.msgSend(self, "setPreferredWidthForSearchField:", void, .{preferredWidthForSearchField});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSTextLocation?language=objc
pub const TextLocation = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{objc.NSObject, });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn compare(self: *@This(), location: ?*anyopaque) foundation.ComparisonResult {
        return objc.msgSend(self, "compare:", foundation.ComparisonResult, .{location});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSTextRange?language=objc
pub const TextRange = opaque {
    pub const InternalInfo = objc.ExternalClass("NSTextRange", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn initWithLocationEndLocation(self: *@This(), location: ?*anyopaque, endLocation: ?*anyopaque) *@This() {
        return objc.msgSend(self, "initWithLocation:endLocation:", *@This(), .{location, endLocation});
    }

    pub fn initWithLocation(self: *@This(), location: ?*anyopaque) *@This() {
        return objc.msgSend(self, "initWithLocation:", *@This(), .{location});
    }

    pub fn init(self: *@This()) *@This() {
        return objc.msgSend(self, "init", *@This(), .{});
    }

    pub fn new(self: *@This()) *@This() {
        return objc.msgSend(self, "new", *@This(), .{});
    }

    pub fn isEqualToTextRange(self: *@This(), textRange: ?*TextRange) objc.BOOL {
        return objc.msgSend(self, "isEqualToTextRange:", objc.BOOL, .{textRange});
    }

    pub fn containsLocation(self: *@This(), location: ?*anyopaque) objc.BOOL {
        return objc.msgSend(self, "containsLocation:", objc.BOOL, .{location});
    }

    pub fn containsRange(self: *@This(), textRange: ?*TextRange) objc.BOOL {
        return objc.msgSend(self, "containsRange:", objc.BOOL, .{textRange});
    }

    pub fn intersectsWithTextRange(self: *@This(), textRange: ?*TextRange) objc.BOOL {
        return objc.msgSend(self, "intersectsWithTextRange:", objc.BOOL, .{textRange});
    }

    pub fn textRangeByIntersectingWithTextRange(self: *@This(), textRange: ?*TextRange) *@This() {
        return objc.msgSend(self, "textRangeByIntersectingWithTextRange:", *@This(), .{textRange});
    }

    pub fn textRangeByFormingUnionWithTextRange(self: *@This(), textRange: ?*TextRange) *@This() {
        return objc.msgSend(self, "textRangeByFormingUnionWithTextRange:", *@This(), .{textRange});
    }

    pub fn isEmpty(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isEmpty", objc.BOOL, .{});
    }

    pub fn location(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "location", ?*anyopaque, .{});
    }

    pub fn endLocation(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "endLocation", ?*anyopaque, .{});
    }

};

pub const TextSelectionGranularity = enum(objc.NSInteger) {
    Character = 0,
    Word = 1,
    Paragraph = 2,
    Line = 3,
    Sentence = 4,
};

pub const TextSelectionAffinity = enum(objc.NSInteger) {
    Upstream = 0,
    Downstream = 1,
};

/// https://developer.apple.com/documentation/AppKit/NSTextSelection?language=objc
pub const TextSelection = opaque {
    pub const InternalInfo = objc.ExternalClass("NSTextSelection", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn initWithRangesAffinityGranularity(self: *@This(), textRanges: ?*anyopaque, affinity: TextSelectionAffinity, granularity: TextSelectionGranularity) *@This() {
        return objc.msgSend(self, "initWithRanges:affinity:granularity:", *@This(), .{textRanges, affinity, granularity});
    }

    pub fn initWithCoder(self: *@This(), coder: ?*foundation.Coder) *@This() {
        return objc.msgSend(self, "initWithCoder:", *@This(), .{coder});
    }

    pub fn initWithRangeAffinityGranularity(self: *@This(), range: ?*TextRange, affinity: TextSelectionAffinity, granularity: TextSelectionGranularity) *@This() {
        return objc.msgSend(self, "initWithRange:affinity:granularity:", *@This(), .{range, affinity, granularity});
    }

    pub fn initWithLocationAffinity(self: *@This(), location: ?*anyopaque, affinity: TextSelectionAffinity) *@This() {
        return objc.msgSend(self, "initWithLocation:affinity:", *@This(), .{location, affinity});
    }

    pub fn init(self: *@This()) *@This() {
        return objc.msgSend(self, "init", *@This(), .{});
    }

    pub fn textSelectionWithTextRanges(self: *@This(), textRanges: ?*anyopaque) ?*TextSelection {
        return objc.msgSend(self, "textSelectionWithTextRanges:", ?*TextSelection, .{textRanges});
    }

    pub fn textRanges(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "textRanges", ?*anyopaque, .{});
    }

    pub fn granularity(self: *@This()) TextSelectionGranularity {
        return objc.msgSend(self, "granularity", TextSelectionGranularity, .{});
    }

    pub fn affinity(self: *@This()) TextSelectionAffinity {
        return objc.msgSend(self, "affinity", TextSelectionAffinity, .{});
    }

    pub fn isTransient(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isTransient", objc.BOOL, .{});
    }

    pub fn anchorPositionOffset(self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(self, "anchorPositionOffset", core_foundation.CGFloat, .{});
    }

    pub fn setAnchorPositionOffset(self: *@This(), anchorPositionOffset: core_foundation.CGFloat) void {
        return objc.msgSend(self, "setAnchorPositionOffset:", void, .{anchorPositionOffset});
    }

    pub fn isLogical(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isLogical", objc.BOOL, .{});
    }

    pub fn setLogical(self: *@This(), logical: objc.BOOL) void {
        return objc.msgSend(self, "setLogical:", void, .{logical});
    }

    pub fn secondarySelectionLocation(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "secondarySelectionLocation", ?*anyopaque, .{});
    }

    pub fn setSecondarySelectionLocation(self: *@This(), secondarySelectionLocation: ?*anyopaque) void {
        return objc.msgSend(self, "setSecondarySelectionLocation:", void, .{secondarySelectionLocation});
    }

    pub fn typingAttributes(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "typingAttributes", ?*anyopaque, .{});
    }

    pub fn setTypingAttributes(self: *@This(), typingAttributes: ?*anyopaque) void {
        return objc.msgSend(self, "setTypingAttributes:", void, .{typingAttributes});
    }

};

pub const TextSelectionNavigationDirection = enum(objc.NSInteger) {
    Forward = 0,
    Backward = 1,
    Right = 2,
    Left = 3,
    Up = 4,
    Down = 5,
};

pub const TextSelectionNavigationDestination = enum(objc.NSInteger) {
    Character = 0,
    Word = 1,
    Line = 2,
    Sentence = 3,
    Paragraph = 4,
    Container = 5,
    Document = 6,
};

pub const TextSelectionNavigationModifier = enum(objc.NSUInteger) {
    Extend = 1,
    Visual = 2,
    Multiple = 4,
};

pub const TextSelectionNavigationWritingDirection = enum(objc.NSInteger) {
    LeftToRight = 0,
    RightToLeft = 1,
};

pub const TextSelectionNavigationLayoutOrientation = enum(objc.NSInteger) {
    Horizontal = 0,
    Vertical = 1,
};

/// https://developer.apple.com/documentation/AppKit/NSTextSelectionNavigation?language=objc
pub const TextSelectionNavigation = opaque {
    pub const InternalInfo = objc.ExternalClass("NSTextSelectionNavigation", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn initWithDataSource(self: *@This(), dataSource: ?*anyopaque) *@This() {
        return objc.msgSend(self, "initWithDataSource:", *@This(), .{dataSource});
    }

    pub fn new(self: *@This()) *@This() {
        return objc.msgSend(self, "new", *@This(), .{});
    }

    pub fn init(self: *@This()) *@This() {
        return objc.msgSend(self, "init", *@This(), .{});
    }

    pub fn flushLayoutCache(self: *@This()) void {
        return objc.msgSend(self, "flushLayoutCache", void, .{});
    }

    pub fn destinationSelectionForTextSelectionDirectionDestinationExtendingConfined(self: *@This(), textSelection: ?*TextSelection, direction: TextSelectionNavigationDirection, destination: TextSelectionNavigationDestination, extending: objc.BOOL, confined: objc.BOOL, ) ?*TextSelection {
        return objc.msgSend(self, "destinationSelectionForTextSelection:direction:destination:extending:confined:", ?*TextSelection, .{textSelection, direction, destination, extending, confined, });
    }

    pub fn textSelectionsInteractingAtPointInContainerAtLocationAnchorsModifiersSelectingBounds(self: *@This(), point: core_foundation.CGPoint, containerLocation: ?*anyopaque, anchors: ?*anyopaque, modifiers: TextSelectionNavigationModifier, selecting: objc.BOOL, bounds: core_foundation.CGRect, ) ?*anyopaque {
        return objc.msgSend(self, "textSelectionsInteractingAtPoint:inContainerAtLocation:anchors:modifiers:selecting:bounds:", ?*anyopaque, .{point, containerLocation, anchors, modifiers, selecting, bounds, });
    }

    pub fn textSelectionForSelectionGranularityEnclosingTextSelection(self: *@This(), selectionGranularity: TextSelectionGranularity, textSelection: ?*TextSelection) ?*TextSelection {
        return objc.msgSend(self, "textSelectionForSelectionGranularity:enclosingTextSelection:", ?*TextSelection, .{selectionGranularity, textSelection});
    }

    pub fn textSelectionForSelectionGranularityEnclosingPointInContainerAtLocation(self: *@This(), selectionGranularity: TextSelectionGranularity, point: core_foundation.CGPoint, location: ?*anyopaque) ?*TextSelection {
        return objc.msgSend(self, "textSelectionForSelectionGranularity:enclosingPoint:inContainerAtLocation:", ?*TextSelection, .{selectionGranularity, point, location});
    }

    pub fn resolvedInsertionLocationForTextSelectionWritingDirection(self: *@This(), textSelection: ?*TextSelection, writingDirection: TextSelectionNavigationWritingDirection) ?*anyopaque {
        return objc.msgSend(self, "resolvedInsertionLocationForTextSelection:writingDirection:", ?*anyopaque, .{textSelection, writingDirection});
    }

    pub fn deletionRangesForTextSelectionDirectionDestinationAllowsDecomposition(self: *@This(), textSelection: ?*TextSelection, direction: TextSelectionNavigationDirection, destination: TextSelectionNavigationDestination, allowsDecomposition: objc.BOOL, ) ?*anyopaque {
        return objc.msgSend(self, "deletionRangesForTextSelection:direction:destination:allowsDecomposition:", ?*anyopaque, .{textSelection, direction, destination, allowsDecomposition, });
    }

    pub fn textSelectionDataSource(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "textSelectionDataSource", ?*anyopaque, .{});
    }

    pub fn allowsNonContiguousRanges(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "allowsNonContiguousRanges", objc.BOOL, .{});
    }

    pub fn setAllowsNonContiguousRanges(self: *@This(), allowsNonContiguousRanges: objc.BOOL) void {
        return objc.msgSend(self, "setAllowsNonContiguousRanges:", void, .{allowsNonContiguousRanges});
    }

    pub fn rotatesCoordinateSystemForLayoutOrientation(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "rotatesCoordinateSystemForLayoutOrientation", objc.BOOL, .{});
    }

    pub fn setRotatesCoordinateSystemForLayoutOrientation(self: *@This(), rotatesCoordinateSystemForLayoutOrientation: objc.BOOL) void {
        return objc.msgSend(self, "setRotatesCoordinateSystemForLayoutOrientation:", void, .{rotatesCoordinateSystemForLayoutOrientation});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSTextSelectionDataSource?language=objc
pub const TextSelectionDataSource = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{objc.NSObject, });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn enumerateSubstringsFromLocationOptionsUsingBlock(self: *@This(), location: ?*anyopaque, options: foundation.StringEnumerationOptions, block: *const fn(?*String, ?*TextRange, ?*TextRange, ?*objc.BOOL, ) callconv(.C) void) void {
        return objc.msgSend(self, "enumerateSubstringsFromLocation:options:usingBlock:", void, .{location, options, block});
    }

    pub fn textRangeForSelectionGranularityEnclosingLocation(self: *@This(), selectionGranularity: TextSelectionGranularity, location: ?*anyopaque) ?*TextRange {
        return objc.msgSend(self, "textRangeForSelectionGranularity:enclosingLocation:", ?*TextRange, .{selectionGranularity, location});
    }

    pub fn locationFromLocationWithOffset(self: *@This(), location: ?*anyopaque, offset: objc.NSInteger) ?*anyopaque {
        return objc.msgSend(self, "locationFromLocation:withOffset:", ?*anyopaque, .{location, offset});
    }

    pub fn offsetFromLocationToLocation(self: *@This(), from: ?*anyopaque, to: ?*anyopaque) objc.NSInteger {
        return objc.msgSend(self, "offsetFromLocation:toLocation:", objc.NSInteger, .{from, to});
    }

    pub fn baseWritingDirectionAtLocation(self: *@This(), location: ?*anyopaque) TextSelectionNavigationWritingDirection {
        return objc.msgSend(self, "baseWritingDirectionAtLocation:", TextSelectionNavigationWritingDirection, .{location});
    }

    pub fn enumerateCaretOffsetsInLineFragmentAtLocationUsingBlock(self: *@This(), location: ?*anyopaque, block: *const fn(core_foundation.CGFloat, ?*anyopaque, objc.BOOL, ?*objc.BOOL, ) callconv(.C) void) void {
        return objc.msgSend(self, "enumerateCaretOffsetsInLineFragmentAtLocation:usingBlock:", void, .{location, block});
    }

    pub fn lineFragmentRangeForPointInContainerAtLocation(self: *@This(), point: core_foundation.CGPoint, location: ?*anyopaque) ?*TextRange {
        return objc.msgSend(self, "lineFragmentRangeForPoint:inContainerAtLocation:", ?*TextRange, .{point, location});
    }

    pub fn enumerateContainerBoundariesFromLocationReverseUsingBlock(self: *@This(), location: ?*anyopaque, reverse: objc.BOOL, block: *const fn(?*anyopaque, ?*objc.BOOL) callconv(.C) void) void {
        return objc.msgSend(self, "enumerateContainerBoundariesFromLocation:reverse:usingBlock:", void, .{location, reverse, block});
    }

    pub fn textLayoutOrientationAtLocation(self: *@This(), location: ?*anyopaque) TextSelectionNavigationLayoutOrientation {
        return objc.msgSend(self, "textLayoutOrientationAtLocation:", TextSelectionNavigationLayoutOrientation, .{location});
    }

    pub fn documentRange(self: *@This()) ?*TextRange {
        return objc.msgSend(self, "documentRange", ?*TextRange, .{});
    }

};

pub const TextContentManagerEnumerationOptions = enum(objc.NSUInteger) {
    None = 0,
    Reverse = 1,
};

/// https://developer.apple.com/documentation/AppKit/NSTextElementProvider?language=objc
pub const TextElementProvider = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{objc.NSObject, });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn enumerateTextElementsFromLocationOptionsUsingBlock(self: *@This(), textLocation: ?*anyopaque, options: TextContentManagerEnumerationOptions, block: *const fn(?*TextElement) callconv(.C) objc.BOOL) ?*anyopaque {
        return objc.msgSend(self, "enumerateTextElementsFromLocation:options:usingBlock:", ?*anyopaque, .{textLocation, options, block});
    }

    pub fn replaceContentsInRangeWithTextElements(self: *@This(), range: ?*TextRange, textElements: ?*anyopaque) void {
        return objc.msgSend(self, "replaceContentsInRange:withTextElements:", void, .{range, textElements});
    }

    pub fn synchronizeToBackingStore(self: *@This(), completionHandler: *const fn(?*Error) callconv(.C) void) void {
        return objc.msgSend(self, "synchronizeToBackingStore:", void, .{completionHandler});
    }

    pub fn locationFromLocationWithOffset(self: *@This(), location: ?*anyopaque, offset: objc.NSInteger) ?*anyopaque {
        return objc.msgSend(self, "locationFromLocation:withOffset:", ?*anyopaque, .{location, offset});
    }

    pub fn offsetFromLocationToLocation(self: *@This(), from: ?*anyopaque, to: ?*anyopaque) objc.NSInteger {
        return objc.msgSend(self, "offsetFromLocation:toLocation:", objc.NSInteger, .{from, to});
    }

    pub fn adjustedRangeFromRangeForEditingTextSelection(self: *@This(), textRange: ?*TextRange, forEditingTextSelection: objc.BOOL) ?*TextRange {
        return objc.msgSend(self, "adjustedRangeFromRange:forEditingTextSelection:", ?*TextRange, .{textRange, forEditingTextSelection});
    }

    pub fn documentRange(self: *@This()) ?*TextRange {
        return objc.msgSend(self, "documentRange", ?*TextRange, .{});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSTextContentManager?language=objc
pub const TextContentManager = opaque {
    pub const InternalInfo = objc.ExternalClass("NSTextContentManager", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn init(self: *@This()) *@This() {
        return objc.msgSend(self, "init", *@This(), .{});
    }

    pub fn initWithCoder(self: *@This(), coder: ?*foundation.Coder) *@This() {
        return objc.msgSend(self, "initWithCoder:", *@This(), .{coder});
    }

    pub fn addTextLayoutManager(self: *@This(), textLayoutManager: ?*TextLayoutManager) void {
        return objc.msgSend(self, "addTextLayoutManager:", void, .{textLayoutManager});
    }

    pub fn removeTextLayoutManager(self: *@This(), textLayoutManager: ?*TextLayoutManager) void {
        return objc.msgSend(self, "removeTextLayoutManager:", void, .{textLayoutManager});
    }

    pub fn synchronizeTextLayoutManagers(self: *@This(), completionHandler: *const fn(?*Error) callconv(.C) void) void {
        return objc.msgSend(self, "synchronizeTextLayoutManagers:", void, .{completionHandler});
    }

    pub fn textElementsForRange(self: *@This(), range: ?*TextRange) ?*anyopaque {
        return objc.msgSend(self, "textElementsForRange:", ?*anyopaque, .{range});
    }

    pub fn performEditingTransactionUsingBlock(self: *@This(), transaction: *const fn() callconv(.C) void) void {
        return objc.msgSend(self, "performEditingTransactionUsingBlock:", void, .{transaction});
    }

    pub fn recordEditActionInRangeNewTextRange(self: *@This(), originalTextRange: ?*TextRange, newTextRange: ?*TextRange) void {
        return objc.msgSend(self, "recordEditActionInRange:newTextRange:", void, .{originalTextRange, newTextRange});
    }

    pub fn delegate(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "delegate", ?*anyopaque, .{});
    }

    pub fn setDelegate(self: *@This(), delegate: ?*anyopaque) void {
        return objc.msgSend(self, "setDelegate:", void, .{delegate});
    }

    pub fn textLayoutManagers(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "textLayoutManagers", ?*anyopaque, .{});
    }

    pub fn primaryTextLayoutManager(self: *@This()) ?*TextLayoutManager {
        return objc.msgSend(self, "primaryTextLayoutManager", ?*TextLayoutManager, .{});
    }

    pub fn setPrimaryTextLayoutManager(self: *@This(), primaryTextLayoutManager: ?*TextLayoutManager) void {
        return objc.msgSend(self, "setPrimaryTextLayoutManager:", void, .{primaryTextLayoutManager});
    }

    pub fn hasEditingTransaction(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "hasEditingTransaction", objc.BOOL, .{});
    }

    pub fn automaticallySynchronizesTextLayoutManagers(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "automaticallySynchronizesTextLayoutManagers", objc.BOOL, .{});
    }

    pub fn setAutomaticallySynchronizesTextLayoutManagers(self: *@This(), automaticallySynchronizesTextLayoutManagers: objc.BOOL) void {
        return objc.msgSend(self, "setAutomaticallySynchronizesTextLayoutManagers:", void, .{automaticallySynchronizesTextLayoutManagers});
    }

    pub fn automaticallySynchronizesToBackingStore(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "automaticallySynchronizesToBackingStore", objc.BOOL, .{});
    }

    pub fn setAutomaticallySynchronizesToBackingStore(self: *@This(), automaticallySynchronizesToBackingStore: objc.BOOL) void {
        return objc.msgSend(self, "setAutomaticallySynchronizesToBackingStore:", void, .{automaticallySynchronizesToBackingStore});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSTextContentManagerDelegate?language=objc
pub const TextContentManagerDelegate = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{objc.NSObject, });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn textContentManagerTextElementAtLocation(self: *@This(), textContentManager: ?*TextContentManager, location: ?*anyopaque) ?*TextElement {
        return objc.msgSend(self, "textContentManager:textElementAtLocation:", ?*TextElement, .{textContentManager, location});
    }

    pub fn textContentManagerShouldEnumerateTextElementOptions(self: *@This(), textContentManager: ?*TextContentManager, textElement: ?*TextElement, options: TextContentManagerEnumerationOptions) objc.BOOL {
        return objc.msgSend(self, "textContentManager:shouldEnumerateTextElement:options:", objc.BOOL, .{textContentManager, textElement, options});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSTextContentStorageDelegate?language=objc
pub const TextContentStorageDelegate = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{TextContentManagerDelegate, });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn textContentStorageTextParagraphWithRange(self: *@This(), textContentStorage: ?*TextContentStorage, range: foundation.Range) ?*TextParagraph {
        return objc.msgSend(self, "textContentStorage:textParagraphWithRange:", ?*TextParagraph, .{textContentStorage, range});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSTextContentStorage?language=objc
pub const TextContentStorage = opaque {
    pub const InternalInfo = objc.ExternalClass("NSTextContentStorage", @This(), TextContentManager, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn attributedStringForTextElement(self: *@This(), textElement: ?*TextElement) ?*AttributedString {
        return objc.msgSend(self, "attributedStringForTextElement:", ?*AttributedString, .{textElement});
    }

    pub fn textElementForAttributedString(self: *@This(), attributedString: ?*AttributedString) ?*TextElement {
        return objc.msgSend(self, "textElementForAttributedString:", ?*TextElement, .{attributedString});
    }

    pub fn locationFromLocationWithOffset(self: *@This(), location: ?*anyopaque, offset: objc.NSInteger) ?*anyopaque {
        return objc.msgSend(self, "locationFromLocation:withOffset:", ?*anyopaque, .{location, offset});
    }

    pub fn offsetFromLocationToLocation(self: *@This(), from: ?*anyopaque, to: ?*anyopaque) objc.NSInteger {
        return objc.msgSend(self, "offsetFromLocation:toLocation:", objc.NSInteger, .{from, to});
    }

    pub fn adjustedRangeFromRangeForEditingTextSelection(self: *@This(), textRange: ?*TextRange, forEditingTextSelection: objc.BOOL) ?*TextRange {
        return objc.msgSend(self, "adjustedRangeFromRange:forEditingTextSelection:", ?*TextRange, .{textRange, forEditingTextSelection});
    }

    pub fn delegate(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "delegate", ?*anyopaque, .{});
    }

    pub fn setDelegate(self: *@This(), delegate: ?*anyopaque) void {
        return objc.msgSend(self, "setDelegate:", void, .{delegate});
    }

    pub fn attributedString(self: *@This()) ?*AttributedString {
        return objc.msgSend(self, "attributedString", ?*AttributedString, .{});
    }

    pub fn setAttributedString(self: *@This(), attributedString: ?*AttributedString) void {
        return objc.msgSend(self, "setAttributedString:", void, .{attributedString});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSTextElement?language=objc
pub const TextElement = opaque {
    pub const InternalInfo = objc.ExternalClass("NSTextElement", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn initWithTextContentManager(self: *@This(), textContentManager: ?*TextContentManager) *@This() {
        return objc.msgSend(self, "initWithTextContentManager:", *@This(), .{textContentManager});
    }

    pub fn textContentManager(self: *@This()) ?*TextContentManager {
        return objc.msgSend(self, "textContentManager", ?*TextContentManager, .{});
    }

    pub fn setTextContentManager(self: *@This(), textContentManager: ?*TextContentManager) void {
        return objc.msgSend(self, "setTextContentManager:", void, .{textContentManager});
    }

    pub fn elementRange(self: *@This()) ?*TextRange {
        return objc.msgSend(self, "elementRange", ?*TextRange, .{});
    }

    pub fn setElementRange(self: *@This(), elementRange: ?*TextRange) void {
        return objc.msgSend(self, "setElementRange:", void, .{elementRange});
    }

    pub fn childElements(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "childElements", ?*anyopaque, .{});
    }

    pub fn parentElement(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "parentElement", ?*anyopaque, .{});
    }

    pub fn isRepresentedElement(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isRepresentedElement", objc.BOOL, .{});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSTextParagraph?language=objc
pub const TextParagraph = opaque {
    pub const InternalInfo = objc.ExternalClass("NSTextParagraph", @This(), TextElement, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn initWithAttributedString(self: *@This(), attributedString: ?*AttributedString) *@This() {
        return objc.msgSend(self, "initWithAttributedString:", *@This(), .{attributedString});
    }

    pub fn attributedString(self: *@This()) ?*AttributedString {
        return objc.msgSend(self, "attributedString", ?*AttributedString, .{});
    }

    pub fn paragraphContentRange(self: *@This()) ?*TextRange {
        return objc.msgSend(self, "paragraphContentRange", ?*TextRange, .{});
    }

    pub fn paragraphSeparatorRange(self: *@This()) ?*TextRange {
        return objc.msgSend(self, "paragraphSeparatorRange", ?*TextRange, .{});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSTextListElement?language=objc
pub const TextListElement = opaque {
    pub const InternalInfo = objc.ExternalClass("NSTextListElement", @This(), TextParagraph, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn initWithParentElementTextListContentsMarkerAttributesChildElements(self: *@This(), parent: ?*TextListElement, textList: ?*TextList, contents: ?*AttributedString, markerAttributes: ?*anyopaque, children: ?*anyopaque, ) *@This() {
        return objc.msgSend(self, "initWithParentElement:textList:contents:markerAttributes:childElements:", *@This(), .{parent, textList, contents, markerAttributes, children, });
    }

    pub fn initWithAttributedString(self: *@This(), attributedString: ?*AttributedString) *@This() {
        return objc.msgSend(self, "initWithAttributedString:", *@This(), .{attributedString});
    }

    pub fn textListElementWithContentsMarkerAttributesTextListChildElements(self: *@This(), contents: ?*AttributedString, markerAttributes: ?*anyopaque, textList: ?*TextList, children: ?*anyopaque, ) *@This() {
        return objc.msgSend(self, "textListElementWithContents:markerAttributes:textList:childElements:", *@This(), .{contents, markerAttributes, textList, children, });
    }

    pub fn textListElementWithChildElementsTextListNestingLevel(self: *@This(), children: ?*anyopaque, textList: ?*TextList, nestingLevel: objc.NSInteger) *@This() {
        return objc.msgSend(self, "textListElementWithChildElements:textList:nestingLevel:", *@This(), .{children, textList, nestingLevel});
    }

    pub fn textList(self: *@This()) ?*TextList {
        return objc.msgSend(self, "textList", ?*TextList, .{});
    }

    pub fn contents(self: *@This()) ?*AttributedString {
        return objc.msgSend(self, "contents", ?*AttributedString, .{});
    }

    pub fn markerAttributes(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "markerAttributes", ?*anyopaque, .{});
    }

    pub fn attributedString(self: *@This()) ?*AttributedString {
        return objc.msgSend(self, "attributedString", ?*AttributedString, .{});
    }

    pub fn childElements(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "childElements", ?*anyopaque, .{});
    }

    pub fn parentElement(self: *@This()) ?*TextListElement {
        return objc.msgSend(self, "parentElement", ?*TextListElement, .{});
    }

};

pub const TextLayoutFragmentEnumerationOptions = enum(objc.NSUInteger) {
    None = 0,
    Reverse = 1,
    EstimatesSize = 2,
    EnsuresLayout = 4,
    EnsuresExtraLineFragment = 8,
};

pub const TextLayoutFragmentState = enum(objc.NSUInteger) {
    None = 0,
    EstimatedUsageBounds = 1,
    CalculatedUsageBounds = 2,
    LayoutAvailable = 3,
};

/// https://developer.apple.com/documentation/AppKit/NSTextLayoutFragment?language=objc
pub const TextLayoutFragment = opaque {
    pub const InternalInfo = objc.ExternalClass("NSTextLayoutFragment", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn initWithTextElementRange(self: *@This(), textElement: ?*TextElement, rangeInElement: ?*TextRange) *@This() {
        return objc.msgSend(self, "initWithTextElement:range:", *@This(), .{textElement, rangeInElement});
    }

    pub fn initWithCoder(self: *@This(), coder: ?*foundation.Coder) *@This() {
        return objc.msgSend(self, "initWithCoder:", *@This(), .{coder});
    }

    pub fn init(self: *@This()) *@This() {
        return objc.msgSend(self, "init", *@This(), .{});
    }

    pub fn textLineFragmentForVerticalOffsetRequiresExactMatch(self: *@This(), verticalOffset: core_foundation.CGFloat, requiresExactMatch: objc.BOOL) ?*TextLineFragment {
        return objc.msgSend(self, "textLineFragmentForVerticalOffset:requiresExactMatch:", ?*TextLineFragment, .{verticalOffset, requiresExactMatch});
    }

    pub fn textLineFragmentForTextLocationIsUpstreamAffinity(self: *@This(), textLocation: ?*anyopaque, isUpstreamAffinity: objc.BOOL) ?*TextLineFragment {
        return objc.msgSend(self, "textLineFragmentForTextLocation:isUpstreamAffinity:", ?*TextLineFragment, .{textLocation, isUpstreamAffinity});
    }

    pub fn invalidateLayout(self: *@This()) void {
        return objc.msgSend(self, "invalidateLayout", void, .{});
    }

    pub fn drawAtPointInContext(self: *@This(), point: core_foundation.CGPoint, context: core_graphics.ContextRef) void {
        return objc.msgSend(self, "drawAtPoint:inContext:", void, .{point, context});
    }

    pub fn frameForTextAttachmentAtLocation(self: *@This(), location: ?*anyopaque) core_foundation.CGRect {
        return objc.msgSend(self, "frameForTextAttachmentAtLocation:", core_foundation.CGRect, .{location});
    }

    pub fn textLayoutManager(self: *@This()) ?*TextLayoutManager {
        return objc.msgSend(self, "textLayoutManager", ?*TextLayoutManager, .{});
    }

    pub fn textElement(self: *@This()) ?*TextElement {
        return objc.msgSend(self, "textElement", ?*TextElement, .{});
    }

    pub fn rangeInElement(self: *@This()) ?*TextRange {
        return objc.msgSend(self, "rangeInElement", ?*TextRange, .{});
    }

    pub fn textLineFragments(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "textLineFragments", ?*anyopaque, .{});
    }

    pub fn layoutQueue(self: *@This()) ?*OperationQueue {
        return objc.msgSend(self, "layoutQueue", ?*OperationQueue, .{});
    }

    pub fn setLayoutQueue(self: *@This(), layoutQueue: ?*OperationQueue) void {
        return objc.msgSend(self, "setLayoutQueue:", void, .{layoutQueue});
    }

    pub fn state(self: *@This()) TextLayoutFragmentState {
        return objc.msgSend(self, "state", TextLayoutFragmentState, .{});
    }

    pub fn layoutFragmentFrame(self: *@This()) core_foundation.CGRect {
        return objc.msgSend(self, "layoutFragmentFrame", core_foundation.CGRect, .{});
    }

    pub fn renderingSurfaceBounds(self: *@This()) core_foundation.CGRect {
        return objc.msgSend(self, "renderingSurfaceBounds", core_foundation.CGRect, .{});
    }

    pub fn leadingPadding(self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(self, "leadingPadding", core_foundation.CGFloat, .{});
    }

    pub fn trailingPadding(self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(self, "trailingPadding", core_foundation.CGFloat, .{});
    }

    pub fn topMargin(self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(self, "topMargin", core_foundation.CGFloat, .{});
    }

    pub fn bottomMargin(self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(self, "bottomMargin", core_foundation.CGFloat, .{});
    }

    pub fn textAttachmentViewProviders(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "textAttachmentViewProviders", ?*anyopaque, .{});
    }

};

pub const TextLayoutManagerSegmentType = enum(objc.NSInteger) {
    Standard = 0,
    Selection = 1,
    Highlight = 2,
};

pub const TextLayoutManagerSegmentOptions = enum(objc.NSUInteger) {
    None = 0,
    RangeNotRequired = 1,
    MiddleFragmentsExcluded = 2,
    HeadSegmentExtended = 4,
    TailSegmentExtended = 8,
    UpstreamAffinity = 16,
};

/// https://developer.apple.com/documentation/AppKit/NSTextLayoutManager?language=objc
pub const TextLayoutManager = opaque {
    pub const InternalInfo = objc.ExternalClass("NSTextLayoutManager", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn init(self: *@This()) *@This() {
        return objc.msgSend(self, "init", *@This(), .{});
    }

    pub fn initWithCoder(self: *@This(), coder: ?*foundation.Coder) *@This() {
        return objc.msgSend(self, "initWithCoder:", *@This(), .{coder});
    }

    pub fn replaceTextContentManager(self: *@This(), textContentManager: ?*TextContentManager) void {
        return objc.msgSend(self, "replaceTextContentManager:", void, .{textContentManager});
    }

    pub fn ensureLayoutForRange(self: *@This(), range: ?*TextRange) void {
        return objc.msgSend(self, "ensureLayoutForRange:", void, .{range});
    }

    pub fn ensureLayoutForBounds(self: *@This(), bounds: core_foundation.CGRect) void {
        return objc.msgSend(self, "ensureLayoutForBounds:", void, .{bounds});
    }

    pub fn invalidateLayoutForRange(self: *@This(), range: ?*TextRange) void {
        return objc.msgSend(self, "invalidateLayoutForRange:", void, .{range});
    }

    pub fn textLayoutFragmentForPosition(self: *@This(), position: core_foundation.CGPoint) ?*TextLayoutFragment {
        return objc.msgSend(self, "textLayoutFragmentForPosition:", ?*TextLayoutFragment, .{position});
    }

    pub fn textLayoutFragmentForLocation(self: *@This(), location: ?*anyopaque) ?*TextLayoutFragment {
        return objc.msgSend(self, "textLayoutFragmentForLocation:", ?*TextLayoutFragment, .{location});
    }

    pub fn enumerateTextLayoutFragmentsFromLocationOptionsUsingBlock(self: *@This(), location: ?*anyopaque, options: TextLayoutFragmentEnumerationOptions, block: *const fn(?*TextLayoutFragment) callconv(.C) objc.BOOL) ?*anyopaque {
        return objc.msgSend(self, "enumerateTextLayoutFragmentsFromLocation:options:usingBlock:", ?*anyopaque, .{location, options, block});
    }

    pub fn enumerateRenderingAttributesFromLocationReverseUsingBlock(self: *@This(), location: ?*anyopaque, reverse: objc.BOOL, block: *const fn(?*TextLayoutManager, ?*anyopaque, ?*TextRange) callconv(.C) objc.BOOL) void {
        return objc.msgSend(self, "enumerateRenderingAttributesFromLocation:reverse:usingBlock:", void, .{location, reverse, block});
    }

    pub fn setRenderingAttributesForTextRange(self: *@This(), renderingAttributes: ?*anyopaque, textRange: ?*TextRange) void {
        return objc.msgSend(self, "setRenderingAttributes:forTextRange:", void, .{renderingAttributes, textRange});
    }

    pub fn addRenderingAttributeValueForTextRange(self: *@This(), renderingAttribute: foundation.AttributedStringKey, value: *objc.Id, textRange: ?*TextRange) void {
        return objc.msgSend(self, "addRenderingAttribute:value:forTextRange:", void, .{renderingAttribute, value, textRange});
    }

    pub fn removeRenderingAttributeForTextRange(self: *@This(), renderingAttribute: foundation.AttributedStringKey, textRange: ?*TextRange) void {
        return objc.msgSend(self, "removeRenderingAttribute:forTextRange:", void, .{renderingAttribute, textRange});
    }

    pub fn invalidateRenderingAttributesForTextRange(self: *@This(), textRange: ?*TextRange) void {
        return objc.msgSend(self, "invalidateRenderingAttributesForTextRange:", void, .{textRange});
    }

    pub fn renderingAttributesForLinkAtLocation(self: *@This(), link: *objc.Id, location: ?*anyopaque) ?*anyopaque {
        return objc.msgSend(self, "renderingAttributesForLink:atLocation:", ?*anyopaque, .{link, location});
    }

    pub fn enumerateTextSegmentsInRangeTypeOptionsUsingBlock(self: *@This(), textRange: ?*TextRange, @"type": TextLayoutManagerSegmentType, options: TextLayoutManagerSegmentOptions, block: *const fn(?*TextRange, core_foundation.CGRect, core_foundation.CGFloat, ?*TextContainer, ) callconv(.C) objc.BOOL, ) void {
        return objc.msgSend(self, "enumerateTextSegmentsInRange:type:options:usingBlock:", void, .{textRange, @"type", options, block, });
    }

    pub fn replaceContentsInRangeWithTextElements(self: *@This(), range: ?*TextRange, textElements: ?*anyopaque) void {
        return objc.msgSend(self, "replaceContentsInRange:withTextElements:", void, .{range, textElements});
    }

    pub fn replaceContentsInRangeWithAttributedString(self: *@This(), range: ?*TextRange, attributedString: ?*AttributedString) void {
        return objc.msgSend(self, "replaceContentsInRange:withAttributedString:", void, .{range, attributedString});
    }

    pub fn delegate(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "delegate", ?*anyopaque, .{});
    }

    pub fn setDelegate(self: *@This(), delegate: ?*anyopaque) void {
        return objc.msgSend(self, "setDelegate:", void, .{delegate});
    }

    pub fn usesFontLeading(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "usesFontLeading", objc.BOOL, .{});
    }

    pub fn setUsesFontLeading(self: *@This(), usesFontLeading: objc.BOOL) void {
        return objc.msgSend(self, "setUsesFontLeading:", void, .{usesFontLeading});
    }

    pub fn limitsLayoutForSuspiciousContents(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "limitsLayoutForSuspiciousContents", objc.BOOL, .{});
    }

    pub fn setLimitsLayoutForSuspiciousContents(self: *@This(), limitsLayoutForSuspiciousContents: objc.BOOL) void {
        return objc.msgSend(self, "setLimitsLayoutForSuspiciousContents:", void, .{limitsLayoutForSuspiciousContents});
    }

    pub fn usesHyphenation(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "usesHyphenation", objc.BOOL, .{});
    }

    pub fn setUsesHyphenation(self: *@This(), usesHyphenation: objc.BOOL) void {
        return objc.msgSend(self, "setUsesHyphenation:", void, .{usesHyphenation});
    }

    pub fn textContentManager(self: *@This()) ?*TextContentManager {
        return objc.msgSend(self, "textContentManager", ?*TextContentManager, .{});
    }

    pub fn textContainer(self: *@This()) ?*TextContainer {
        return objc.msgSend(self, "textContainer", ?*TextContainer, .{});
    }

    pub fn setTextContainer(self: *@This(), textContainer: ?*TextContainer) void {
        return objc.msgSend(self, "setTextContainer:", void, .{textContainer});
    }

    pub fn usageBoundsForTextContainer(self: *@This()) core_foundation.CGRect {
        return objc.msgSend(self, "usageBoundsForTextContainer", core_foundation.CGRect, .{});
    }

    pub fn textViewportLayoutController(self: *@This()) ?*TextViewportLayoutController {
        return objc.msgSend(self, "textViewportLayoutController", ?*TextViewportLayoutController, .{});
    }

    pub fn layoutQueue(self: *@This()) ?*OperationQueue {
        return objc.msgSend(self, "layoutQueue", ?*OperationQueue, .{});
    }

    pub fn setLayoutQueue(self: *@This(), layoutQueue: ?*OperationQueue) void {
        return objc.msgSend(self, "setLayoutQueue:", void, .{layoutQueue});
    }

    pub fn textSelections(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "textSelections", ?*anyopaque, .{});
    }

    pub fn setTextSelections(self: *@This(), textSelections: ?*anyopaque) void {
        return objc.msgSend(self, "setTextSelections:", void, .{textSelections});
    }

    pub fn textSelectionNavigation(self: *@This()) ?*TextSelectionNavigation {
        return objc.msgSend(self, "textSelectionNavigation", ?*TextSelectionNavigation, .{});
    }

    pub fn setTextSelectionNavigation(self: *@This(), textSelectionNavigation: ?*TextSelectionNavigation) void {
        return objc.msgSend(self, "setTextSelectionNavigation:", void, .{textSelectionNavigation});
    }

    pub fn renderingAttributesValidator(self: *@This()) *const fn(?*TextLayoutManager, ?*TextLayoutFragment) callconv(.C) void {
        return objc.msgSend(self, "renderingAttributesValidator", *const fn(?*TextLayoutManager, ?*TextLayoutFragment) callconv(.C) void, .{});
    }

    pub fn setRenderingAttributesValidator(self: *@This(), renderingAttributesValidator: *const fn(?*TextLayoutManager, ?*TextLayoutFragment) callconv(.C) void) void {
        return objc.msgSend(self, "setRenderingAttributesValidator:", void, .{renderingAttributesValidator});
    }

    pub fn linkRenderingAttributes(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "linkRenderingAttributes", ?*anyopaque, .{});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSTextLayoutManagerDelegate?language=objc
pub const TextLayoutManagerDelegate = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{objc.NSObject, });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn textLayoutManagerTextLayoutFragmentForLocationInTextElement(self: *@This(), textLayoutManager: ?*TextLayoutManager, location: ?*anyopaque, textElement: ?*TextElement) ?*TextLayoutFragment {
        return objc.msgSend(self, "textLayoutManager:textLayoutFragmentForLocation:inTextElement:", ?*TextLayoutFragment, .{textLayoutManager, location, textElement});
    }

    pub fn textLayoutManagerShouldBreakLineBeforeLocationHyphenating(self: *@This(), textLayoutManager: ?*TextLayoutManager, location: ?*anyopaque, hyphenating: objc.BOOL) objc.BOOL {
        return objc.msgSend(self, "textLayoutManager:shouldBreakLineBeforeLocation:hyphenating:", objc.BOOL, .{textLayoutManager, location, hyphenating});
    }

    pub fn textLayoutManagerRenderingAttributesForLinkAtLocationDefaultAttributes(self: *@This(), textLayoutManager: ?*TextLayoutManager, link: *objc.Id, location: ?*anyopaque, renderingAttributes: ?*anyopaque, ) ?*anyopaque {
        return objc.msgSend(self, "textLayoutManager:renderingAttributesForLink:atLocation:defaultAttributes:", ?*anyopaque, .{textLayoutManager, link, location, renderingAttributes, });
    }

};

/// https://developer.apple.com/documentation/AppKit/NSTextLineFragment?language=objc
pub const TextLineFragment = opaque {
    pub const InternalInfo = objc.ExternalClass("NSTextLineFragment", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn initWithAttributedStringRange(self: *@This(), attributedString: ?*AttributedString, range: foundation.Range) *@This() {
        return objc.msgSend(self, "initWithAttributedString:range:", *@This(), .{attributedString, range});
    }

    pub fn initWithCoder(self: *@This(), aDecoder: ?*foundation.Coder) *@This() {
        return objc.msgSend(self, "initWithCoder:", *@This(), .{aDecoder});
    }

    pub fn initWithStringAttributesRange(self: *@This(), string: ?*String, attributes: ?*anyopaque, range: foundation.Range) *@This() {
        return objc.msgSend(self, "initWithString:attributes:range:", *@This(), .{string, attributes, range});
    }

    pub fn init(self: *@This()) *@This() {
        return objc.msgSend(self, "init", *@This(), .{});
    }

    pub fn drawAtPointInContext(self: *@This(), point: core_foundation.CGPoint, context: core_graphics.ContextRef) void {
        return objc.msgSend(self, "drawAtPoint:inContext:", void, .{point, context});
    }

    pub fn locationForCharacterAtIndex(self: *@This(), index: objc.NSInteger) core_foundation.CGPoint {
        return objc.msgSend(self, "locationForCharacterAtIndex:", core_foundation.CGPoint, .{index});
    }

    pub fn characterIndexForPoint(self: *@This(), point: core_foundation.CGPoint) objc.NSInteger {
        return objc.msgSend(self, "characterIndexForPoint:", objc.NSInteger, .{point});
    }

    pub fn fractionOfDistanceThroughGlyphForPoint(self: *@This(), point: core_foundation.CGPoint) core_foundation.CGFloat {
        return objc.msgSend(self, "fractionOfDistanceThroughGlyphForPoint:", core_foundation.CGFloat, .{point});
    }

    pub fn attributedString(self: *@This()) ?*AttributedString {
        return objc.msgSend(self, "attributedString", ?*AttributedString, .{});
    }

    pub fn characterRange(self: *@This()) foundation.Range {
        return objc.msgSend(self, "characterRange", foundation.Range, .{});
    }

    pub fn typographicBounds(self: *@This()) core_foundation.CGRect {
        return objc.msgSend(self, "typographicBounds", core_foundation.CGRect, .{});
    }

    pub fn glyphOrigin(self: *@This()) core_foundation.CGPoint {
        return objc.msgSend(self, "glyphOrigin", core_foundation.CGPoint, .{});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSTextViewportLayoutControllerDelegate?language=objc
pub const TextViewportLayoutControllerDelegate = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{objc.NSObject, });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn viewportBoundsForTextViewportLayoutController(self: *@This(), textViewportLayoutController: ?*TextViewportLayoutController) core_foundation.CGRect {
        return objc.msgSend(self, "viewportBoundsForTextViewportLayoutController:", core_foundation.CGRect, .{textViewportLayoutController});
    }

    pub fn textViewportLayoutControllerConfigureRenderingSurfaceForTextLayoutFragment(self: *@This(), textViewportLayoutController: ?*TextViewportLayoutController, textLayoutFragment: ?*TextLayoutFragment) void {
        return objc.msgSend(self, "textViewportLayoutController:configureRenderingSurfaceForTextLayoutFragment:", void, .{textViewportLayoutController, textLayoutFragment});
    }

    pub fn textViewportLayoutControllerWillLayout(self: *@This(), textViewportLayoutController: ?*TextViewportLayoutController) void {
        return objc.msgSend(self, "textViewportLayoutControllerWillLayout:", void, .{textViewportLayoutController});
    }

    pub fn textViewportLayoutControllerDidLayout(self: *@This(), textViewportLayoutController: ?*TextViewportLayoutController) void {
        return objc.msgSend(self, "textViewportLayoutControllerDidLayout:", void, .{textViewportLayoutController});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSTextViewportLayoutController?language=objc
pub const TextViewportLayoutController = opaque {
    pub const InternalInfo = objc.ExternalClass("NSTextViewportLayoutController", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn initWithTextLayoutManager(self: *@This(), textLayoutManager: ?*TextLayoutManager) *@This() {
        return objc.msgSend(self, "initWithTextLayoutManager:", *@This(), .{textLayoutManager});
    }

    pub fn new(self: *@This()) *@This() {
        return objc.msgSend(self, "new", *@This(), .{});
    }

    pub fn init(self: *@This()) *@This() {
        return objc.msgSend(self, "init", *@This(), .{});
    }

    pub fn layoutViewport(self: *@This()) void {
        return objc.msgSend(self, "layoutViewport", void, .{});
    }

    pub fn relocateViewportToTextLocation(self: *@This(), textLocation: ?*anyopaque) core_foundation.CGFloat {
        return objc.msgSend(self, "relocateViewportToTextLocation:", core_foundation.CGFloat, .{textLocation});
    }

    pub fn adjustViewportByVerticalOffset(self: *@This(), verticalOffset: core_foundation.CGFloat) void {
        return objc.msgSend(self, "adjustViewportByVerticalOffset:", void, .{verticalOffset});
    }

    pub fn delegate(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "delegate", ?*anyopaque, .{});
    }

    pub fn setDelegate(self: *@This(), delegate: ?*anyopaque) void {
        return objc.msgSend(self, "setDelegate:", void, .{delegate});
    }

    pub fn textLayoutManager(self: *@This()) ?*TextLayoutManager {
        return objc.msgSend(self, "textLayoutManager", ?*TextLayoutManager, .{});
    }

    pub fn viewportBounds(self: *@This()) core_foundation.CGRect {
        return objc.msgSend(self, "viewportBounds", core_foundation.CGRect, .{});
    }

    pub fn viewportRange(self: *@This()) ?*TextRange {
        return objc.msgSend(self, "viewportRange", ?*TextRange, .{});
    }

};

/// https://developer.apple.com/documentation/AppKit/NSAdaptiveImageGlyph?language=objc
pub const AdaptiveImageGlyph = opaque {
    pub const InternalInfo = objc.ExternalClass("NSAdaptiveImageGlyph", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn initWithImageContent(self: *@This(), imageContent: ?*core_data.Data) *@This() {
        return objc.msgSend(self, "initWithImageContent:", *@This(), .{imageContent});
    }

    pub fn initWithCoder(self: *@This(), coder: ?*foundation.Coder) *@This() {
        return objc.msgSend(self, "initWithCoder:", *@This(), .{coder});
    }

    pub fn init(self: *@This()) *@This() {
        return objc.msgSend(self, "init", *@This(), .{});
    }

    pub fn imageContent(self: *@This()) ?*core_data.Data {
        return objc.msgSend(self, "imageContent", ?*core_data.Data, .{});
    }

    pub fn contentIdentifier(self: *@This()) ?*String {
        return objc.msgSend(self, "contentIdentifier", ?*String, .{});
    }

    pub fn contentDescription(self: *@This()) ?*String {
        return objc.msgSend(self, "contentDescription", ?*String, .{});
    }

    pub fn contentType(self: *@This()) ?*UTType {
        return objc.msgSend(self, "contentType", ?*UTType, .{});
    }

};

