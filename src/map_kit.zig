// THIS FILE IS AUTOGENERATED. MODIFICATIONS WILL NOT BE MAINTAINED.

const std = @import("std");
const objc = @import("objc.zig"); // Objective-C Runtime in zig.
const foundation = @import("foundation.zig"); // Framework dependency Foundation.
const core_location = @import("core_location.zig"); // Framework dependency CoreLocation.
const core_foundation = @import("core_foundation.zig"); // Framework dependency CoreFoundation.
const app_kit = @import("app_kit.zig"); // Framework dependency AppKit.
const quartz_core = @import("quartz_core.zig"); // Framework dependency QuartzCore.
const core_image = @import("core_image.zig"); // Framework dependency CoreImage.
const core_graphics = @import("core_graphics.zig"); // Framework dependency CoreGraphics.
const contacts = @import("contacts.zig"); // Framework dependency Contacts.

/// https://developer.apple.com/documentation/MapKit/MKAnnotation?language=objc
pub const Annotation = opaque {
    pub const Internal = objc.ExternProtocol(@This(), &.{objc.NSObject});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "description", ?*foundation.String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "debugDescription", ?*foundation.String, .{});
    }

    pub fn setCoordinate(_self: *@This(), _newCoordinate: core_location.LocationCoordinate2D) void {
        return objc.msgSend(_self, "setCoordinate:", void, .{_newCoordinate});
    }

    pub fn coordinate(_self: *@This()) core_location.LocationCoordinate2D {
        return objc.msgSend(_self, "coordinate", core_location.LocationCoordinate2D, .{});
    }

    pub fn title(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "title", ?*foundation.String, .{});
    }

    pub fn subtitle(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "subtitle", ?*foundation.String, .{});
    }
};

/// https://developer.apple.com/documentation/MapKit/MKDistanceFormatter?language=objc
pub const DistanceFormatter = opaque {
    pub const Units = DistanceFormatter.Units;

    pub const UnitStyle = DistanceFormatter.UnitStyle;

    pub const Internal = objc.ExternClass("MKDistanceFormatter", @This(), foundation.Formatter, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "description", ?*foundation.String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "debugDescription", ?*foundation.String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*foundation.Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*foundation.MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*foundation.MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*foundation.MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*foundation.MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*foundation.Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*foundation.Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn stringForObjectValue(_self: *@This(), _obj: ?objc.Id) ?*foundation.String {
        return objc.msgSend(_self, "stringForObjectValue:", ?*foundation.String, .{_obj});
    }

    pub fn attributedStringForObjectValueWithDefaultAttributes(_self: *@This(), _obj: ?objc.Id, _attrs: ?*anyopaque) ?*foundation.AttributedString {
        return objc.msgSend(_self, "attributedStringForObjectValue:withDefaultAttributes:", ?*foundation.AttributedString, .{ _obj, _attrs });
    }

    pub fn editingStringForObjectValue(_self: *@This(), _obj: ?objc.Id) ?*foundation.String {
        return objc.msgSend(_self, "editingStringForObjectValue:", ?*foundation.String, .{_obj});
    }

    pub fn getObjectValueForStringErrorDescription(_self: *@This(), _obj: ?*?objc.Id, _string: ?*foundation.String, _error: ?*?*foundation.String) objc.BOOL {
        return objc.msgSend(_self, "getObjectValue:forString:errorDescription:", objc.BOOL, .{ _obj, _string, _error });
    }

    pub fn isPartialStringValidNewEditingStringErrorDescription(_self: *@This(), _partialString: ?*foundation.String, _newString: ?*?*foundation.String, _error: ?*?*foundation.String) objc.BOOL {
        return objc.msgSend(_self, "isPartialStringValid:newEditingString:errorDescription:", objc.BOOL, .{ _partialString, _newString, _error });
    }

    pub fn isPartialStringValidProposedSelectedRangeOriginalStringOriginalSelectedRangeErrorDescription(
        _self: *@This(),
        _partialStringPtr: ?*?*foundation.String,
        _proposedSelRangePtr: foundation.RangePointer,
        _origString: ?*foundation.String,
        _origSelRange: foundation.Range,
        _error: ?*?*foundation.String,
    ) objc.BOOL {
        return objc.msgSend(_self, "isPartialStringValid:proposedSelectedRange:originalString:originalSelectedRange:errorDescription:", objc.BOOL, .{
            _partialStringPtr,
            _proposedSelRangePtr,
            _origString,
            _origSelRange,
            _error,
        });
    }

    pub fn stringFromDistance(_self: *@This(), _distance: core_location.LocationDistance) ?*foundation.String {
        return objc.msgSend(_self, "stringFromDistance:", ?*foundation.String, .{_distance});
    }

    pub fn distanceFromString(_self: *@This(), _distance: ?*foundation.String) core_location.LocationDistance {
        return objc.msgSend(_self, "distanceFromString:", core_location.LocationDistance, .{_distance});
    }

    pub fn locale(_self: *@This()) ?*foundation.Locale {
        return objc.msgSend(_self, "locale", ?*foundation.Locale, .{});
    }

    pub fn setLocale(_self: *@This(), _locale: ?*foundation.Locale) void {
        return objc.msgSend(_self, "setLocale:", void, .{_locale});
    }

    pub fn units(_self: *@This()) DistanceFormatter.Units {
        return objc.msgSend(_self, "units", DistanceFormatter.Units, .{});
    }

    pub fn setUnits(_self: *@This(), _units: DistanceFormatter.Units) void {
        return objc.msgSend(_self, "setUnits:", void, .{_units});
    }

    pub fn unitStyle(_self: *@This()) DistanceFormatter.UnitStyle {
        return objc.msgSend(_self, "unitStyle", DistanceFormatter.UnitStyle, .{});
    }

    pub fn setUnitStyle(_self: *@This(), _unitStyle: DistanceFormatter.UnitStyle) void {
        return objc.msgSend(_self, "setUnitStyle:", void, .{_unitStyle});
    }
};

pub const CoordinateSpan = extern struct {
    latitudeDelta: core_location.LocationDegrees,
    longitudeDelta: core_location.LocationDegrees,
};

pub const CoordinateRegion = extern struct {
    center: core_location.LocationCoordinate2D,
    span: CoordinateSpan,
};

extern "MapKit" fn MKCoordinateRegionMakeWithDistance(centerCoordinate: core_location.LocationCoordinate2D, latitudinalMeters: core_location.LocationDistance, longitudinalMeters: core_location.LocationDistance) callconv(.C) CoordinateRegion;
pub const coordinateRegionMakeWithDistance = MKCoordinateRegionMakeWithDistance;

pub const MapPoint = extern struct {
    x: f64,
    y: f64,
};

pub const MapSize = extern struct {
    width: f64,
    height: f64,
};

pub const MapRect = extern struct {
    origin: MapPoint,
    size: MapSize,
};

pub const ZoomScale = core_foundation.CGFloat;

extern "MapKit" fn MKMapPointForCoordinate(coordinate: core_location.LocationCoordinate2D) callconv(.C) MapPoint;
pub const mapPointForCoordinate = MKMapPointForCoordinate;

extern "MapKit" fn MKCoordinateForMapPoint(mapPoint: MapPoint) callconv(.C) core_location.LocationCoordinate2D;
pub const coordinateForMapPoint = MKCoordinateForMapPoint;

extern "MapKit" fn MKMetersPerMapPointAtLatitude(latitude: core_location.LocationDegrees) callconv(.C) core_location.LocationDistance;
pub const metersPerMapPointAtLatitude = MKMetersPerMapPointAtLatitude;

extern "MapKit" fn MKMapPointsPerMeterAtLatitude(latitude: core_location.LocationDegrees) callconv(.C) f64;
pub const mapPointsPerMeterAtLatitude = MKMapPointsPerMeterAtLatitude;

extern "MapKit" fn MKMetersBetweenMapPoints(a: MapPoint, b: MapPoint) callconv(.C) core_location.LocationDistance;
pub const metersBetweenMapPoints = MKMetersBetweenMapPoints;

extern "MapKit" fn MKMapRectUnion(rect1: MapRect, rect2: MapRect) callconv(.C) MapRect;
pub const mapRectUnion = MKMapRectUnion;

extern "MapKit" fn MKMapRectIntersection(rect1: MapRect, rect2: MapRect) callconv(.C) MapRect;
pub const mapRectIntersection = MKMapRectIntersection;

extern "MapKit" fn MKMapRectInset(rect: MapRect, dx: f64, dy: f64) callconv(.C) MapRect;
pub const mapRectInset = MKMapRectInset;

extern "MapKit" fn MKMapRectOffset(rect: MapRect, dx: f64, dy: f64) callconv(.C) MapRect;
pub const mapRectOffset = MKMapRectOffset;

extern "MapKit" fn MKMapRectDivide(
    rect: MapRect,
    slice: ?*MapRect,
    remainder: ?*MapRect,
    amount: f64,
    edge: core_foundation.CGRectEdge,
) callconv(.C) void;
pub const mapRectDivide = MKMapRectDivide;

extern "MapKit" fn MKMapRectContainsPoint(rect: MapRect, point: MapPoint) callconv(.C) objc.BOOL;
pub const mapRectContainsPoint = MKMapRectContainsPoint;

extern "MapKit" fn MKMapRectContainsRect(rect1: MapRect, rect2: MapRect) callconv(.C) objc.BOOL;
pub const mapRectContainsRect = MKMapRectContainsRect;

extern "MapKit" fn MKMapRectIntersectsRect(rect1: MapRect, rect2: MapRect) callconv(.C) objc.BOOL;
pub const mapRectIntersectsRect = MKMapRectIntersectsRect;

extern "MapKit" fn MKCoordinateRegionForMapRect(rect: MapRect) callconv(.C) CoordinateRegion;
pub const coordinateRegionForMapRect = MKCoordinateRegionForMapRect;

extern "MapKit" fn MKMapRectSpans180thMeridian(rect: MapRect) callconv(.C) objc.BOOL;
pub const mapRectSpans180thMeridian = MKMapRectSpans180thMeridian;

extern "MapKit" fn MKMapRectRemainder(rect: MapRect) callconv(.C) MapRect;
pub const mapRectRemainder = MKMapRectRemainder;

/// https://developer.apple.com/documentation/MapKit/MKMapItemIdentifier?language=objc
pub const MapItemIdentifier = opaque {
    pub const Internal = objc.ExternClass("MKMapItemIdentifier", @This(), objc.NSObject, &.{ foundation.Copying, foundation.SecureCoding });
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "description", ?*foundation.String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "debugDescription", ?*foundation.String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*foundation.Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*foundation.MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*foundation.MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*foundation.MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*foundation.MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*foundation.Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*foundation.Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn supportsSecureCoding() objc.BOOL {
        return objc.msgSend(Internal.class(), "supportsSecureCoding", objc.BOOL, .{});
    }

    pub fn initWithIdentifierString(_self: *@This(), _string: ?*foundation.String) *@This() {
        return objc.msgSend(_self, "initWithIdentifierString:", *@This(), .{_string});
    }

    pub fn identifierString(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "identifierString", ?*foundation.String, .{});
    }
};

/// https://developer.apple.com/documentation/MapKit/MKPlacemark?language=objc
pub const Placemark = opaque {
    pub const Internal = objc.ExternClass("MKPlacemark", @This(), core_location.Placemark, &.{Annotation});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "description", ?*foundation.String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "debugDescription", ?*foundation.String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*foundation.Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*foundation.MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*foundation.MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*foundation.MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*foundation.MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*foundation.Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*foundation.Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn supportsSecureCoding() objc.BOOL {
        return objc.msgSend(Internal.class(), "supportsSecureCoding", objc.BOOL, .{});
    }

    pub fn initWithPlacemark(_self: *@This(), _placemark: ?*core_location.Placemark) *@This() {
        return objc.msgSend(_self, "initWithPlacemark:", *@This(), .{_placemark});
    }

    pub fn location(_self: *@This()) ?*core_location.Location {
        return objc.msgSend(_self, "location", ?*core_location.Location, .{});
    }

    pub fn region(_self: *@This()) ?*core_location.Region {
        return objc.msgSend(_self, "region", ?*core_location.Region, .{});
    }

    pub fn timeZone(_self: *@This()) ?*foundation.TimeZone {
        return objc.msgSend(_self, "timeZone", ?*foundation.TimeZone, .{});
    }

    pub fn addressDictionary(_self: *@This()) ?*foundation.Dictionary {
        return objc.msgSend(_self, "addressDictionary", ?*foundation.Dictionary, .{});
    }

    pub fn name(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "name", ?*foundation.String, .{});
    }

    pub fn thoroughfare(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "thoroughfare", ?*foundation.String, .{});
    }

    pub fn subThoroughfare(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "subThoroughfare", ?*foundation.String, .{});
    }

    pub fn locality(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "locality", ?*foundation.String, .{});
    }

    pub fn subLocality(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "subLocality", ?*foundation.String, .{});
    }

    pub fn administrativeArea(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "administrativeArea", ?*foundation.String, .{});
    }

    pub fn subAdministrativeArea(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "subAdministrativeArea", ?*foundation.String, .{});
    }

    pub fn postalCode(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "postalCode", ?*foundation.String, .{});
    }

    pub fn isOcountryCode(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "ISOcountryCode", ?*foundation.String, .{});
    }

    pub fn country(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "country", ?*foundation.String, .{});
    }

    pub fn inlandWater(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "inlandWater", ?*foundation.String, .{});
    }

    pub fn ocean(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "ocean", ?*foundation.String, .{});
    }

    pub fn areasOfInterest(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "areasOfInterest", ?*anyopaque, .{});
    }

    pub fn setCoordinate(_self: *@This(), _newCoordinate: core_location.LocationCoordinate2D) void {
        return objc.msgSend(_self, "setCoordinate:", void, .{_newCoordinate});
    }

    pub fn coordinate(_self: *@This()) core_location.LocationCoordinate2D {
        return objc.msgSend(_self, "coordinate", core_location.LocationCoordinate2D, .{});
    }

    pub fn title(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "title", ?*foundation.String, .{});
    }

    pub fn subtitle(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "subtitle", ?*foundation.String, .{});
    }

    pub fn initWithCoordinate(_self: *@This(), _coordinate: core_location.LocationCoordinate2D) *@This() {
        return objc.msgSend(_self, "initWithCoordinate:", *@This(), .{_coordinate});
    }

    pub fn initWithCoordinateAddressDictionary(_self: *@This(), _coordinate: core_location.LocationCoordinate2D, _addressDictionary: ?*anyopaque) *@This() {
        return objc.msgSend(_self, "initWithCoordinate:addressDictionary:", *@This(), .{ _coordinate, _addressDictionary });
    }

    pub fn initWithCoordinatePostalAddress(_self: *@This(), _coordinate: core_location.LocationCoordinate2D, _postalAddress: ?*contacts.PostalAddress) *@This() {
        return objc.msgSend(_self, "initWithCoordinate:postalAddress:", *@This(), .{ _coordinate, _postalAddress });
    }

    pub fn countryCode(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "countryCode", ?*foundation.String, .{});
    }
};

pub const PointOfInterestCategory = ?*foundation.String;

/// https://developer.apple.com/documentation/MapKit/MKMapItem?language=objc
pub const MapItem = opaque {
    pub const Internal = objc.ExternClass("MKMapItem", @This(), objc.NSObject, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "description", ?*foundation.String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "debugDescription", ?*foundation.String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*foundation.Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*foundation.MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*foundation.MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*foundation.MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*foundation.MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn mapItemForCurrentLocation() ?*MapItem {
        return objc.msgSend(Internal.class(), "mapItemForCurrentLocation", ?*MapItem, .{});
    }

    pub fn initWithPlacemark(_self: *@This(), _placemark: ?*Placemark) *@This() {
        return objc.msgSend(_self, "initWithPlacemark:", *@This(), .{_placemark});
    }

    pub fn openInMapsWithLaunchOptions(_self: *@This(), _launchOptions: ?*anyopaque) objc.BOOL {
        return objc.msgSend(_self, "openInMapsWithLaunchOptions:", objc.BOOL, .{_launchOptions});
    }

    pub fn openMapsWithItemsLaunchOptions(_mapItems: ?*anyopaque, _launchOptions: ?*anyopaque) objc.BOOL {
        return objc.msgSend(Internal.class(), "openMapsWithItems:launchOptions:", objc.BOOL, .{ _mapItems, _launchOptions });
    }

    pub fn openInMapsWithLaunchOptionsCompletionHandler(_self: *@This(), _launchOptions: ?*anyopaque, _completion: *const fn (objc.BOOL) callconv(.C) void) void {
        return objc.msgSend(_self, "openInMapsWithLaunchOptions:completionHandler:", void, .{ _launchOptions, _completion });
    }

    pub fn openMapsWithItemsLaunchOptionsCompletionHandler(_mapItems: ?*anyopaque, _launchOptions: ?*anyopaque, _completion: *const fn (objc.BOOL) callconv(.C) void) void {
        return objc.msgSend(Internal.class(), "openMapsWithItems:launchOptions:completionHandler:", void, .{ _mapItems, _launchOptions, _completion });
    }

    pub fn identifier(_self: *@This()) ?*MapItemIdentifier {
        return objc.msgSend(_self, "identifier", ?*MapItemIdentifier, .{});
    }

    pub fn alternateIdentifiers(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "alternateIdentifiers", ?*anyopaque, .{});
    }

    pub fn placemark(_self: *@This()) ?*Placemark {
        return objc.msgSend(_self, "placemark", ?*Placemark, .{});
    }

    pub fn isCurrentLocation(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isCurrentLocation", objc.BOOL, .{});
    }

    pub fn name(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "name", ?*foundation.String, .{});
    }

    pub fn setName(_self: *@This(), _name: ?*foundation.String) void {
        return objc.msgSend(_self, "setName:", void, .{_name});
    }

    pub fn phoneNumber(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "phoneNumber", ?*foundation.String, .{});
    }

    pub fn setPhoneNumber(_self: *@This(), _phoneNumber: ?*foundation.String) void {
        return objc.msgSend(_self, "setPhoneNumber:", void, .{_phoneNumber});
    }

    pub fn url(_self: *@This()) ?*foundation.URL {
        return objc.msgSend(_self, "url", ?*foundation.URL, .{});
    }

    pub fn setUrl(_self: *@This(), _url: ?*foundation.URL) void {
        return objc.msgSend(_self, "setUrl:", void, .{_url});
    }

    pub fn timeZone(_self: *@This()) ?*foundation.TimeZone {
        return objc.msgSend(_self, "timeZone", ?*foundation.TimeZone, .{});
    }

    pub fn setTimeZone(_self: *@This(), _timeZone: ?*foundation.TimeZone) void {
        return objc.msgSend(_self, "setTimeZone:", void, .{_timeZone});
    }

    pub fn pointOfInterestCategory(_self: *@This()) PointOfInterestCategory {
        return objc.msgSend(_self, "pointOfInterestCategory", PointOfInterestCategory, .{});
    }

    pub fn setPointOfInterestCategory(_self: *@This(), _pointOfInterestCategory: PointOfInterestCategory) void {
        return objc.msgSend(_self, "setPointOfInterestCategory:", void, .{_pointOfInterestCategory});
    }
};

pub const AddressFilterOption = objc.NSUInteger;
pub const AddressFilterOption_Country: objc.NSUInteger = 1;
pub const AddressFilterOption_AdministrativeArea: objc.NSUInteger = 2;
pub const AddressFilterOption_SubAdministrativeArea: objc.NSUInteger = 4;
pub const AddressFilterOption_Locality: objc.NSUInteger = 8;
pub const AddressFilterOption_SubLocality: objc.NSUInteger = 16;
pub const AddressFilterOption_PostalCode: objc.NSUInteger = 32;

/// https://developer.apple.com/documentation/MapKit/MKAddressFilter?language=objc
pub const AddressFilter = opaque {
    pub const Internal = objc.ExternClass("MKAddressFilter", @This(), objc.NSObject, &.{ foundation.SecureCoding, foundation.Copying });
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "description", ?*foundation.String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "debugDescription", ?*foundation.String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*foundation.Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*foundation.MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*foundation.MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*foundation.MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*foundation.MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*foundation.Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*foundation.Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn supportsSecureCoding() objc.BOOL {
        return objc.msgSend(Internal.class(), "supportsSecureCoding", objc.BOOL, .{});
    }

    pub fn initIncludingOptions(_self: *@This(), _options: AddressFilterOption) *@This() {
        return objc.msgSend(_self, "initIncludingOptions:", *@This(), .{_options});
    }

    pub fn initExcludingOptions(_self: *@This(), _options: AddressFilterOption) *@This() {
        return objc.msgSend(_self, "initExcludingOptions:", *@This(), .{_options});
    }

    pub fn includesOptions(_self: *@This(), _options: AddressFilterOption) objc.BOOL {
        return objc.msgSend(_self, "includesOptions:", objc.BOOL, .{_options});
    }

    pub fn excludesOptions(_self: *@This(), _options: AddressFilterOption) objc.BOOL {
        return objc.msgSend(_self, "excludesOptions:", objc.BOOL, .{_options});
    }

    pub fn filterIncludingAll() ?*AddressFilter {
        return objc.msgSend(Internal.class(), "filterIncludingAll", ?*AddressFilter, .{});
    }

    pub fn filterExcludingAll() ?*AddressFilter {
        return objc.msgSend(Internal.class(), "filterExcludingAll", ?*AddressFilter, .{});
    }
};

pub const AnnotationViewDragState = objc.NSUInteger;
pub const AnnotationViewDragState_None: objc.NSUInteger = 0;
pub const AnnotationViewDragState_Starting: objc.NSUInteger = 1;
pub const AnnotationViewDragState_Dragging: objc.NSUInteger = 2;
pub const AnnotationViewDragState_Canceling: objc.NSUInteger = 3;
pub const AnnotationViewDragState_Ending: objc.NSUInteger = 4;

pub const FeatureDisplayPriority = f32;

pub const AnnotationViewZPriority = f32;

pub const AnnotationViewCollisionMode = objc.NSInteger;
pub const AnnotationViewCollisionMode_Rectangle: objc.NSInteger = 0;
pub const AnnotationViewCollisionMode_Circle: objc.NSInteger = 1;
pub const AnnotationViewCollisionMode_None: objc.NSInteger = 2;

/// https://developer.apple.com/documentation/MapKit/MKAnnotationView?language=objc
pub const AnnotationView = opaque {
    pub const Internal = objc.ExternClass("MKAnnotationView", @This(), app_kit.View, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "description", ?*foundation.String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "debugDescription", ?*foundation.String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*foundation.Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*foundation.MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*foundation.MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*foundation.MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*foundation.MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*foundation.Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*foundation.Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn tryToPerformWith(_self: *@This(), _action: objc.Selector, _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "tryToPerform:with:", objc.BOOL, .{ _action, _object });
    }

    pub fn performKeyEquivalent(_self: *@This(), _event: ?*app_kit.Event) objc.BOOL {
        return objc.msgSend(_self, "performKeyEquivalent:", objc.BOOL, .{_event});
    }

    pub fn validRequestorForSendTypeReturnType(_self: *@This(), _sendType: app_kit.PasteboardType, _returnType: app_kit.PasteboardType) ?objc.Id {
        return objc.msgSend(_self, "validRequestorForSendType:returnType:", ?objc.Id, .{ _sendType, _returnType });
    }

    pub fn mouseDown(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "mouseDown:", void, .{_event});
    }

    pub fn rightMouseDown(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "rightMouseDown:", void, .{_event});
    }

    pub fn otherMouseDown(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "otherMouseDown:", void, .{_event});
    }

    pub fn mouseUp(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "mouseUp:", void, .{_event});
    }

    pub fn rightMouseUp(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "rightMouseUp:", void, .{_event});
    }

    pub fn otherMouseUp(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "otherMouseUp:", void, .{_event});
    }

    pub fn mouseMoved(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "mouseMoved:", void, .{_event});
    }

    pub fn mouseDragged(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "mouseDragged:", void, .{_event});
    }

    pub fn scrollWheel(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "scrollWheel:", void, .{_event});
    }

    pub fn rightMouseDragged(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "rightMouseDragged:", void, .{_event});
    }

    pub fn otherMouseDragged(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "otherMouseDragged:", void, .{_event});
    }

    pub fn mouseEntered(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "mouseEntered:", void, .{_event});
    }

    pub fn mouseExited(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "mouseExited:", void, .{_event});
    }

    pub fn keyDown(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "keyDown:", void, .{_event});
    }

    pub fn keyUp(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "keyUp:", void, .{_event});
    }

    pub fn flagsChanged(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "flagsChanged:", void, .{_event});
    }

    pub fn tabletPoint(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "tabletPoint:", void, .{_event});
    }

    pub fn tabletProximity(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "tabletProximity:", void, .{_event});
    }

    pub fn cursorUpdate(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "cursorUpdate:", void, .{_event});
    }

    pub fn magnifyWithEvent(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "magnifyWithEvent:", void, .{_event});
    }

    pub fn rotateWithEvent(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "rotateWithEvent:", void, .{_event});
    }

    pub fn swipeWithEvent(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "swipeWithEvent:", void, .{_event});
    }

    pub fn beginGestureWithEvent(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "beginGestureWithEvent:", void, .{_event});
    }

    pub fn endGestureWithEvent(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "endGestureWithEvent:", void, .{_event});
    }

    pub fn smartMagnifyWithEvent(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "smartMagnifyWithEvent:", void, .{_event});
    }

    pub fn changeModeWithEvent(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "changeModeWithEvent:", void, .{_event});
    }

    pub fn touchesBeganWithEvent(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "touchesBeganWithEvent:", void, .{_event});
    }

    pub fn touchesMovedWithEvent(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "touchesMovedWithEvent:", void, .{_event});
    }

    pub fn touchesEndedWithEvent(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "touchesEndedWithEvent:", void, .{_event});
    }

    pub fn touchesCancelledWithEvent(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "touchesCancelledWithEvent:", void, .{_event});
    }

    pub fn quickLookWithEvent(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "quickLookWithEvent:", void, .{_event});
    }

    pub fn pressureChangeWithEvent(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "pressureChangeWithEvent:", void, .{_event});
    }

    pub fn contextMenuKeyDown(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "contextMenuKeyDown:", void, .{_event});
    }

    pub fn noResponderFor(_self: *@This(), _eventSelector: objc.Selector) void {
        return objc.msgSend(_self, "noResponderFor:", void, .{_eventSelector});
    }

    pub fn becomeFirstResponder(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "becomeFirstResponder", objc.BOOL, .{});
    }

    pub fn resignFirstResponder(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "resignFirstResponder", objc.BOOL, .{});
    }

    pub fn interpretKeyEvents(_self: *@This(), _eventArray: ?*anyopaque) void {
        return objc.msgSend(_self, "interpretKeyEvents:", void, .{_eventArray});
    }

    pub fn flushBufferedKeyEvents(_self: *@This()) void {
        return objc.msgSend(_self, "flushBufferedKeyEvents", void, .{});
    }

    pub fn showContextHelp(_self: *@This(), _sender: ?objc.Id) void {
        return objc.msgSend(_self, "showContextHelp:", void, .{_sender});
    }

    pub fn helpRequested(_self: *@This(), _eventPtr: ?*app_kit.Event) void {
        return objc.msgSend(_self, "helpRequested:", void, .{_eventPtr});
    }

    pub fn shouldBeTreatedAsInkEvent(_self: *@This(), _event: ?*app_kit.Event) objc.BOOL {
        return objc.msgSend(_self, "shouldBeTreatedAsInkEvent:", objc.BOOL, .{_event});
    }

    pub fn wantsScrollEventsForSwipeTrackingOnAxis(_self: *@This(), _axis: app_kit.EventGestureAxis) objc.BOOL {
        return objc.msgSend(_self, "wantsScrollEventsForSwipeTrackingOnAxis:", objc.BOOL, .{_axis});
    }

    pub fn wantsForwardedScrollEventsForAxis(_self: *@This(), _axis: app_kit.EventGestureAxis) objc.BOOL {
        return objc.msgSend(_self, "wantsForwardedScrollEventsForAxis:", objc.BOOL, .{_axis});
    }

    pub fn supplementalTargetForActionSender(_self: *@This(), _action: objc.Selector, _sender: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "supplementalTargetForAction:sender:", ?objc.Id, .{ _action, _sender });
    }

    pub fn nextResponder(_self: *@This()) ?*app_kit.Responder {
        return objc.msgSend(_self, "nextResponder", ?*app_kit.Responder, .{});
    }

    pub fn setNextResponder(_self: *@This(), _nextResponder: ?*app_kit.Responder) void {
        return objc.msgSend(_self, "setNextResponder:", void, .{_nextResponder});
    }

    pub fn acceptsFirstResponder(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "acceptsFirstResponder", objc.BOOL, .{});
    }

    pub fn menu(_self: *@This()) ?*app_kit.Menu {
        return objc.msgSend(_self, "menu", ?*app_kit.Menu, .{});
    }

    pub fn setMenu(_self: *@This(), _menu: ?*app_kit.Menu) void {
        return objc.msgSend(_self, "setMenu:", void, .{_menu});
    }

    pub fn animator(_self: *@This()) *@This() {
        return objc.msgSend(_self, "animator", *@This(), .{});
    }

    pub fn animationForKey(_self: *@This(), _key: app_kit.AnimatablePropertyKey) ?objc.Id {
        return objc.msgSend(_self, "animationForKey:", ?objc.Id, .{_key});
    }

    pub fn defaultAnimationForKey(_key: app_kit.AnimatablePropertyKey) ?objc.Id {
        return objc.msgSend(Internal.class(), "defaultAnimationForKey:", ?objc.Id, .{_key});
    }

    pub fn animations(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "animations", ?*anyopaque, .{});
    }

    pub fn setAnimations(_self: *@This(), _animations: ?*anyopaque) void {
        return objc.msgSend(_self, "setAnimations:", void, .{_animations});
    }

    pub fn identifier(_self: *@This()) app_kit.UserInterfaceItemIdentifier {
        return objc.msgSend(_self, "identifier", app_kit.UserInterfaceItemIdentifier, .{});
    }

    pub fn setIdentifier(_self: *@This(), _identifier: app_kit.UserInterfaceItemIdentifier) void {
        return objc.msgSend(_self, "setIdentifier:", void, .{_identifier});
    }

    pub fn draggingEntered(_self: *@This(), _sender: ?*anyopaque) app_kit.DragOperation {
        return objc.msgSend(_self, "draggingEntered:", app_kit.DragOperation, .{_sender});
    }

    pub fn draggingUpdated(_self: *@This(), _sender: ?*anyopaque) app_kit.DragOperation {
        return objc.msgSend(_self, "draggingUpdated:", app_kit.DragOperation, .{_sender});
    }

    pub fn draggingExited(_self: *@This(), _sender: ?*anyopaque) void {
        return objc.msgSend(_self, "draggingExited:", void, .{_sender});
    }

    pub fn prepareForDragOperation(_self: *@This(), _sender: ?*anyopaque) objc.BOOL {
        return objc.msgSend(_self, "prepareForDragOperation:", objc.BOOL, .{_sender});
    }

    pub fn performDragOperation(_self: *@This(), _sender: ?*anyopaque) objc.BOOL {
        return objc.msgSend(_self, "performDragOperation:", objc.BOOL, .{_sender});
    }

    pub fn concludeDragOperation(_self: *@This(), _sender: ?*anyopaque) void {
        return objc.msgSend(_self, "concludeDragOperation:", void, .{_sender});
    }

    pub fn draggingEnded(_self: *@This(), _sender: ?*anyopaque) void {
        return objc.msgSend(_self, "draggingEnded:", void, .{_sender});
    }

    pub fn wantsPeriodicDraggingUpdates(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "wantsPeriodicDraggingUpdates", objc.BOOL, .{});
    }

    pub fn updateDraggingItemsForDrag(_self: *@This(), _sender: ?*anyopaque) void {
        return objc.msgSend(_self, "updateDraggingItemsForDrag:", void, .{_sender});
    }

    pub fn appearance(_self: *@This()) ?*app_kit.Appearance {
        return objc.msgSend(_self, "appearance", ?*app_kit.Appearance, .{});
    }

    pub fn setAppearance(_self: *@This(), _appearance: ?*app_kit.Appearance) void {
        return objc.msgSend(_self, "setAppearance:", void, .{_appearance});
    }

    pub fn effectiveAppearance(_self: *@This()) ?*app_kit.Appearance {
        return objc.msgSend(_self, "effectiveAppearance", ?*app_kit.Appearance, .{});
    }

    pub fn accessibilityFrame(_self: *@This()) foundation.Rect {
        return objc.msgSend(_self, "accessibilityFrame", foundation.Rect, .{});
    }

    pub fn accessibilityParent(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityParent", ?objc.Id, .{});
    }

    pub fn isAccessibilityFocused(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isAccessibilityFocused", objc.BOOL, .{});
    }

    pub fn accessibilityIdentifier(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "accessibilityIdentifier", ?*foundation.String, .{});
    }

    pub fn accessibilityLayoutPointForScreenPoint(_self: *@This(), _point: foundation.Point) foundation.Point {
        return objc.msgSend(_self, "accessibilityLayoutPointForScreenPoint:", foundation.Point, .{_point});
    }

    pub fn accessibilityLayoutSizeForScreenSize(_self: *@This(), _size: foundation.Size) foundation.Size {
        return objc.msgSend(_self, "accessibilityLayoutSizeForScreenSize:", foundation.Size, .{_size});
    }

    pub fn accessibilityScreenPointForLayoutPoint(_self: *@This(), _point: foundation.Point) foundation.Point {
        return objc.msgSend(_self, "accessibilityScreenPointForLayoutPoint:", foundation.Point, .{_point});
    }

    pub fn accessibilityScreenSizeForLayoutSize(_self: *@This(), _size: foundation.Size) foundation.Size {
        return objc.msgSend(_self, "accessibilityScreenSizeForLayoutSize:", foundation.Size, .{_size});
    }

    pub fn accessibilityCellForColumnRow(_self: *@This(), _column: objc.NSInteger, _row: objc.NSInteger) ?objc.Id {
        return objc.msgSend(_self, "accessibilityCellForColumn:row:", ?objc.Id, .{ _column, _row });
    }

    pub fn accessibilityAttributedStringForRange(_self: *@This(), _range: foundation.Range) ?*foundation.AttributedString {
        return objc.msgSend(_self, "accessibilityAttributedStringForRange:", ?*foundation.AttributedString, .{_range});
    }

    pub fn accessibilityRangeForLine(_self: *@This(), _line: objc.NSInteger) foundation.Range {
        return objc.msgSend(_self, "accessibilityRangeForLine:", foundation.Range, .{_line});
    }

    pub fn accessibilityStringForRange(_self: *@This(), _range: foundation.Range) ?*foundation.String {
        return objc.msgSend(_self, "accessibilityStringForRange:", ?*foundation.String, .{_range});
    }

    pub fn accessibilityRangeForPosition(_self: *@This(), _point: foundation.Point) foundation.Range {
        return objc.msgSend(_self, "accessibilityRangeForPosition:", foundation.Range, .{_point});
    }

    pub fn accessibilityRangeForIndex(_self: *@This(), _index: objc.NSInteger) foundation.Range {
        return objc.msgSend(_self, "accessibilityRangeForIndex:", foundation.Range, .{_index});
    }

    pub fn accessibilityFrameForRange(_self: *@This(), _range: foundation.Range) foundation.Rect {
        return objc.msgSend(_self, "accessibilityFrameForRange:", foundation.Rect, .{_range});
    }

    pub fn accessibilityRTFForRange(_self: *@This(), _range: foundation.Range) ?*foundation.Data {
        return objc.msgSend(_self, "accessibilityRTFForRange:", ?*foundation.Data, .{_range});
    }

    pub fn accessibilityStyleRangeForIndex(_self: *@This(), _index: objc.NSInteger) foundation.Range {
        return objc.msgSend(_self, "accessibilityStyleRangeForIndex:", foundation.Range, .{_index});
    }

    pub fn accessibilityLineForIndex(_self: *@This(), _index: objc.NSInteger) objc.NSInteger {
        return objc.msgSend(_self, "accessibilityLineForIndex:", objc.NSInteger, .{_index});
    }

    pub fn accessibilityPerformCancel(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "accessibilityPerformCancel", objc.BOOL, .{});
    }

    pub fn accessibilityPerformConfirm(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "accessibilityPerformConfirm", objc.BOOL, .{});
    }

    pub fn accessibilityPerformDecrement(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "accessibilityPerformDecrement", objc.BOOL, .{});
    }

    pub fn accessibilityPerformDelete(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "accessibilityPerformDelete", objc.BOOL, .{});
    }

    pub fn accessibilityPerformIncrement(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "accessibilityPerformIncrement", objc.BOOL, .{});
    }

    pub fn accessibilityPerformPick(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "accessibilityPerformPick", objc.BOOL, .{});
    }

    pub fn accessibilityPerformPress(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "accessibilityPerformPress", objc.BOOL, .{});
    }

    pub fn accessibilityPerformRaise(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "accessibilityPerformRaise", objc.BOOL, .{});
    }

    pub fn accessibilityPerformShowAlternateUI(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "accessibilityPerformShowAlternateUI", objc.BOOL, .{});
    }

    pub fn accessibilityPerformShowDefaultUI(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "accessibilityPerformShowDefaultUI", objc.BOOL, .{});
    }

    pub fn accessibilityPerformShowMenu(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "accessibilityPerformShowMenu", objc.BOOL, .{});
    }

    pub fn isAccessibilitySelectorAllowed(_self: *@This(), _selector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "isAccessibilitySelectorAllowed:", objc.BOOL, .{_selector});
    }

    pub fn isAccessibilityElement(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isAccessibilityElement", objc.BOOL, .{});
    }

    pub fn setAccessibilityElement(_self: *@This(), _accessibilityElement: objc.BOOL) void {
        return objc.msgSend(_self, "setAccessibilityElement:", void, .{_accessibilityElement});
    }

    pub fn setAccessibilityFrame(_self: *@This(), _accessibilityFrame: foundation.Rect) void {
        return objc.msgSend(_self, "setAccessibilityFrame:", void, .{_accessibilityFrame});
    }

    pub fn setAccessibilityFocused(_self: *@This(), _accessibilityFocused: objc.BOOL) void {
        return objc.msgSend(_self, "setAccessibilityFocused:", void, .{_accessibilityFocused});
    }

    pub fn accessibilityActivationPoint(_self: *@This()) foundation.Point {
        return objc.msgSend(_self, "accessibilityActivationPoint", foundation.Point, .{});
    }

    pub fn setAccessibilityActivationPoint(_self: *@This(), _accessibilityActivationPoint: foundation.Point) void {
        return objc.msgSend(_self, "setAccessibilityActivationPoint:", void, .{_accessibilityActivationPoint});
    }

    pub fn accessibilityTopLevelUIElement(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityTopLevelUIElement", ?objc.Id, .{});
    }

    pub fn setAccessibilityTopLevelUIElement(_self: *@This(), _accessibilityTopLevelUIElement: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityTopLevelUIElement:", void, .{_accessibilityTopLevelUIElement});
    }

    pub fn accessibilityURL(_self: *@This()) ?*foundation.URL {
        return objc.msgSend(_self, "accessibilityURL", ?*foundation.URL, .{});
    }

    pub fn setAccessibilityURL(_self: *@This(), _accessibilityURL: ?*foundation.URL) void {
        return objc.msgSend(_self, "setAccessibilityURL:", void, .{_accessibilityURL});
    }

    pub fn accessibilityValue(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityValue", ?objc.Id, .{});
    }

    pub fn setAccessibilityValue(_self: *@This(), _accessibilityValue: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityValue:", void, .{_accessibilityValue});
    }

    pub fn accessibilityValueDescription(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "accessibilityValueDescription", ?*foundation.String, .{});
    }

    pub fn setAccessibilityValueDescription(_self: *@This(), _accessibilityValueDescription: ?*foundation.String) void {
        return objc.msgSend(_self, "setAccessibilityValueDescription:", void, .{_accessibilityValueDescription});
    }

    pub fn accessibilityVisibleChildren(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilityVisibleChildren", ?*foundation.Array, .{});
    }

    pub fn setAccessibilityVisibleChildren(_self: *@This(), _accessibilityVisibleChildren: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilityVisibleChildren:", void, .{_accessibilityVisibleChildren});
    }

    pub fn accessibilitySubrole(_self: *@This()) app_kit.AccessibilitySubrole {
        return objc.msgSend(_self, "accessibilitySubrole", app_kit.AccessibilitySubrole, .{});
    }

    pub fn setAccessibilitySubrole(_self: *@This(), _accessibilitySubrole: app_kit.AccessibilitySubrole) void {
        return objc.msgSend(_self, "setAccessibilitySubrole:", void, .{_accessibilitySubrole});
    }

    pub fn accessibilityTitle(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "accessibilityTitle", ?*foundation.String, .{});
    }

    pub fn setAccessibilityTitle(_self: *@This(), _accessibilityTitle: ?*foundation.String) void {
        return objc.msgSend(_self, "setAccessibilityTitle:", void, .{_accessibilityTitle});
    }

    pub fn accessibilityTitleUIElement(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityTitleUIElement", ?objc.Id, .{});
    }

    pub fn setAccessibilityTitleUIElement(_self: *@This(), _accessibilityTitleUIElement: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityTitleUIElement:", void, .{_accessibilityTitleUIElement});
    }

    pub fn accessibilityNextContents(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilityNextContents", ?*foundation.Array, .{});
    }

    pub fn setAccessibilityNextContents(_self: *@This(), _accessibilityNextContents: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilityNextContents:", void, .{_accessibilityNextContents});
    }

    pub fn accessibilityOrientation(_self: *@This()) app_kit.AccessibilityOrientation {
        return objc.msgSend(_self, "accessibilityOrientation", app_kit.AccessibilityOrientation, .{});
    }

    pub fn setAccessibilityOrientation(_self: *@This(), _accessibilityOrientation: app_kit.AccessibilityOrientation) void {
        return objc.msgSend(_self, "setAccessibilityOrientation:", void, .{_accessibilityOrientation});
    }

    pub fn accessibilityOverflowButton(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityOverflowButton", ?objc.Id, .{});
    }

    pub fn setAccessibilityOverflowButton(_self: *@This(), _accessibilityOverflowButton: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityOverflowButton:", void, .{_accessibilityOverflowButton});
    }

    pub fn setAccessibilityParent(_self: *@This(), _accessibilityParent: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityParent:", void, .{_accessibilityParent});
    }

    pub fn accessibilityPlaceholderValue(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "accessibilityPlaceholderValue", ?*foundation.String, .{});
    }

    pub fn setAccessibilityPlaceholderValue(_self: *@This(), _accessibilityPlaceholderValue: ?*foundation.String) void {
        return objc.msgSend(_self, "setAccessibilityPlaceholderValue:", void, .{_accessibilityPlaceholderValue});
    }

    pub fn accessibilityPreviousContents(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilityPreviousContents", ?*foundation.Array, .{});
    }

    pub fn setAccessibilityPreviousContents(_self: *@This(), _accessibilityPreviousContents: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilityPreviousContents:", void, .{_accessibilityPreviousContents});
    }

    pub fn accessibilityRole(_self: *@This()) app_kit.AccessibilityRole {
        return objc.msgSend(_self, "accessibilityRole", app_kit.AccessibilityRole, .{});
    }

    pub fn setAccessibilityRole(_self: *@This(), _accessibilityRole: app_kit.AccessibilityRole) void {
        return objc.msgSend(_self, "setAccessibilityRole:", void, .{_accessibilityRole});
    }

    pub fn accessibilityRoleDescription(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "accessibilityRoleDescription", ?*foundation.String, .{});
    }

    pub fn setAccessibilityRoleDescription(_self: *@This(), _accessibilityRoleDescription: ?*foundation.String) void {
        return objc.msgSend(_self, "setAccessibilityRoleDescription:", void, .{_accessibilityRoleDescription});
    }

    pub fn accessibilitySearchButton(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilitySearchButton", ?objc.Id, .{});
    }

    pub fn setAccessibilitySearchButton(_self: *@This(), _accessibilitySearchButton: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilitySearchButton:", void, .{_accessibilitySearchButton});
    }

    pub fn accessibilitySearchMenu(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilitySearchMenu", ?objc.Id, .{});
    }

    pub fn setAccessibilitySearchMenu(_self: *@This(), _accessibilitySearchMenu: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilitySearchMenu:", void, .{_accessibilitySearchMenu});
    }

    pub fn isAccessibilitySelected(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isAccessibilitySelected", objc.BOOL, .{});
    }

    pub fn setAccessibilitySelected(_self: *@This(), _accessibilitySelected: objc.BOOL) void {
        return objc.msgSend(_self, "setAccessibilitySelected:", void, .{_accessibilitySelected});
    }

    pub fn accessibilitySelectedChildren(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilitySelectedChildren", ?*foundation.Array, .{});
    }

    pub fn setAccessibilitySelectedChildren(_self: *@This(), _accessibilitySelectedChildren: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilitySelectedChildren:", void, .{_accessibilitySelectedChildren});
    }

    pub fn accessibilityServesAsTitleForUIElements(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilityServesAsTitleForUIElements", ?*foundation.Array, .{});
    }

    pub fn setAccessibilityServesAsTitleForUIElements(_self: *@This(), _accessibilityServesAsTitleForUIElements: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilityServesAsTitleForUIElements:", void, .{_accessibilityServesAsTitleForUIElements});
    }

    pub fn accessibilityShownMenu(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityShownMenu", ?objc.Id, .{});
    }

    pub fn setAccessibilityShownMenu(_self: *@This(), _accessibilityShownMenu: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityShownMenu:", void, .{_accessibilityShownMenu});
    }

    pub fn accessibilityMinValue(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityMinValue", ?objc.Id, .{});
    }

    pub fn setAccessibilityMinValue(_self: *@This(), _accessibilityMinValue: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityMinValue:", void, .{_accessibilityMinValue});
    }

    pub fn accessibilityMaxValue(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityMaxValue", ?objc.Id, .{});
    }

    pub fn setAccessibilityMaxValue(_self: *@This(), _accessibilityMaxValue: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityMaxValue:", void, .{_accessibilityMaxValue});
    }

    pub fn accessibilityLinkedUIElements(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilityLinkedUIElements", ?*foundation.Array, .{});
    }

    pub fn setAccessibilityLinkedUIElements(_self: *@This(), _accessibilityLinkedUIElements: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilityLinkedUIElements:", void, .{_accessibilityLinkedUIElements});
    }

    pub fn accessibilityWindow(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityWindow", ?objc.Id, .{});
    }

    pub fn setAccessibilityWindow(_self: *@This(), _accessibilityWindow: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityWindow:", void, .{_accessibilityWindow});
    }

    pub fn setAccessibilityIdentifier(_self: *@This(), _accessibilityIdentifier: ?*foundation.String) void {
        return objc.msgSend(_self, "setAccessibilityIdentifier:", void, .{_accessibilityIdentifier});
    }

    pub fn accessibilityHelp(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "accessibilityHelp", ?*foundation.String, .{});
    }

    pub fn setAccessibilityHelp(_self: *@This(), _accessibilityHelp: ?*foundation.String) void {
        return objc.msgSend(_self, "setAccessibilityHelp:", void, .{_accessibilityHelp});
    }

    pub fn accessibilityFilename(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "accessibilityFilename", ?*foundation.String, .{});
    }

    pub fn setAccessibilityFilename(_self: *@This(), _accessibilityFilename: ?*foundation.String) void {
        return objc.msgSend(_self, "setAccessibilityFilename:", void, .{_accessibilityFilename});
    }

    pub fn isAccessibilityExpanded(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isAccessibilityExpanded", objc.BOOL, .{});
    }

    pub fn setAccessibilityExpanded(_self: *@This(), _accessibilityExpanded: objc.BOOL) void {
        return objc.msgSend(_self, "setAccessibilityExpanded:", void, .{_accessibilityExpanded});
    }

    pub fn isAccessibilityEdited(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isAccessibilityEdited", objc.BOOL, .{});
    }

    pub fn setAccessibilityEdited(_self: *@This(), _accessibilityEdited: objc.BOOL) void {
        return objc.msgSend(_self, "setAccessibilityEdited:", void, .{_accessibilityEdited});
    }

    pub fn isAccessibilityEnabled(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isAccessibilityEnabled", objc.BOOL, .{});
    }

    pub fn setAccessibilityEnabled(_self: *@This(), _accessibilityEnabled: objc.BOOL) void {
        return objc.msgSend(_self, "setAccessibilityEnabled:", void, .{_accessibilityEnabled});
    }

    pub fn accessibilityChildren(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilityChildren", ?*foundation.Array, .{});
    }

    pub fn setAccessibilityChildren(_self: *@This(), _accessibilityChildren: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilityChildren:", void, .{_accessibilityChildren});
    }

    pub fn accessibilityChildrenInNavigationOrder(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "accessibilityChildrenInNavigationOrder", ?*anyopaque, .{});
    }

    pub fn setAccessibilityChildrenInNavigationOrder(_self: *@This(), _accessibilityChildrenInNavigationOrder: ?*anyopaque) void {
        return objc.msgSend(_self, "setAccessibilityChildrenInNavigationOrder:", void, .{_accessibilityChildrenInNavigationOrder});
    }

    pub fn accessibilityClearButton(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityClearButton", ?objc.Id, .{});
    }

    pub fn setAccessibilityClearButton(_self: *@This(), _accessibilityClearButton: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityClearButton:", void, .{_accessibilityClearButton});
    }

    pub fn accessibilityCancelButton(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityCancelButton", ?objc.Id, .{});
    }

    pub fn setAccessibilityCancelButton(_self: *@This(), _accessibilityCancelButton: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityCancelButton:", void, .{_accessibilityCancelButton});
    }

    pub fn isAccessibilityProtectedContent(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isAccessibilityProtectedContent", objc.BOOL, .{});
    }

    pub fn setAccessibilityProtectedContent(_self: *@This(), _accessibilityProtectedContent: objc.BOOL) void {
        return objc.msgSend(_self, "setAccessibilityProtectedContent:", void, .{_accessibilityProtectedContent});
    }

    pub fn accessibilityContents(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilityContents", ?*foundation.Array, .{});
    }

    pub fn setAccessibilityContents(_self: *@This(), _accessibilityContents: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilityContents:", void, .{_accessibilityContents});
    }

    pub fn accessibilityLabel(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "accessibilityLabel", ?*foundation.String, .{});
    }

    pub fn setAccessibilityLabel(_self: *@This(), _accessibilityLabel: ?*foundation.String) void {
        return objc.msgSend(_self, "setAccessibilityLabel:", void, .{_accessibilityLabel});
    }

    pub fn isAccessibilityAlternateUIVisible(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isAccessibilityAlternateUIVisible", objc.BOOL, .{});
    }

    pub fn setAccessibilityAlternateUIVisible(_self: *@This(), _accessibilityAlternateUIVisible: objc.BOOL) void {
        return objc.msgSend(_self, "setAccessibilityAlternateUIVisible:", void, .{_accessibilityAlternateUIVisible});
    }

    pub fn accessibilitySharedFocusElements(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilitySharedFocusElements", ?*foundation.Array, .{});
    }

    pub fn setAccessibilitySharedFocusElements(_self: *@This(), _accessibilitySharedFocusElements: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilitySharedFocusElements:", void, .{_accessibilitySharedFocusElements});
    }

    pub fn isAccessibilityRequired(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isAccessibilityRequired", objc.BOOL, .{});
    }

    pub fn setAccessibilityRequired(_self: *@This(), _accessibilityRequired: objc.BOOL) void {
        return objc.msgSend(_self, "setAccessibilityRequired:", void, .{_accessibilityRequired});
    }

    pub fn accessibilityCustomRotors(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "accessibilityCustomRotors", ?*anyopaque, .{});
    }

    pub fn setAccessibilityCustomRotors(_self: *@This(), _accessibilityCustomRotors: ?*anyopaque) void {
        return objc.msgSend(_self, "setAccessibilityCustomRotors:", void, .{_accessibilityCustomRotors});
    }

    pub fn accessibilityUserInputLabels(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "accessibilityUserInputLabels", ?*anyopaque, .{});
    }

    pub fn setAccessibilityUserInputLabels(_self: *@This(), _accessibilityUserInputLabels: ?*anyopaque) void {
        return objc.msgSend(_self, "setAccessibilityUserInputLabels:", void, .{_accessibilityUserInputLabels});
    }

    pub fn accessibilityAttributedUserInputLabels(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "accessibilityAttributedUserInputLabels", ?*anyopaque, .{});
    }

    pub fn setAccessibilityAttributedUserInputLabels(_self: *@This(), _accessibilityAttributedUserInputLabels: ?*anyopaque) void {
        return objc.msgSend(_self, "setAccessibilityAttributedUserInputLabels:", void, .{_accessibilityAttributedUserInputLabels});
    }

    pub fn accessibilityApplicationFocusedUIElement(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityApplicationFocusedUIElement", ?objc.Id, .{});
    }

    pub fn setAccessibilityApplicationFocusedUIElement(_self: *@This(), _accessibilityApplicationFocusedUIElement: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityApplicationFocusedUIElement:", void, .{_accessibilityApplicationFocusedUIElement});
    }

    pub fn accessibilityMainWindow(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityMainWindow", ?objc.Id, .{});
    }

    pub fn setAccessibilityMainWindow(_self: *@This(), _accessibilityMainWindow: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityMainWindow:", void, .{_accessibilityMainWindow});
    }

    pub fn isAccessibilityHidden(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isAccessibilityHidden", objc.BOOL, .{});
    }

    pub fn setAccessibilityHidden(_self: *@This(), _accessibilityHidden: objc.BOOL) void {
        return objc.msgSend(_self, "setAccessibilityHidden:", void, .{_accessibilityHidden});
    }

    pub fn isAccessibilityFrontmost(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isAccessibilityFrontmost", objc.BOOL, .{});
    }

    pub fn setAccessibilityFrontmost(_self: *@This(), _accessibilityFrontmost: objc.BOOL) void {
        return objc.msgSend(_self, "setAccessibilityFrontmost:", void, .{_accessibilityFrontmost});
    }

    pub fn accessibilityFocusedWindow(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityFocusedWindow", ?objc.Id, .{});
    }

    pub fn setAccessibilityFocusedWindow(_self: *@This(), _accessibilityFocusedWindow: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityFocusedWindow:", void, .{_accessibilityFocusedWindow});
    }

    pub fn accessibilityWindows(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilityWindows", ?*foundation.Array, .{});
    }

    pub fn setAccessibilityWindows(_self: *@This(), _accessibilityWindows: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilityWindows:", void, .{_accessibilityWindows});
    }

    pub fn accessibilityExtrasMenuBar(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityExtrasMenuBar", ?objc.Id, .{});
    }

    pub fn setAccessibilityExtrasMenuBar(_self: *@This(), _accessibilityExtrasMenuBar: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityExtrasMenuBar:", void, .{_accessibilityExtrasMenuBar});
    }

    pub fn accessibilityMenuBar(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityMenuBar", ?objc.Id, .{});
    }

    pub fn setAccessibilityMenuBar(_self: *@This(), _accessibilityMenuBar: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityMenuBar:", void, .{_accessibilityMenuBar});
    }

    pub fn accessibilityColumnTitles(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilityColumnTitles", ?*foundation.Array, .{});
    }

    pub fn setAccessibilityColumnTitles(_self: *@This(), _accessibilityColumnTitles: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilityColumnTitles:", void, .{_accessibilityColumnTitles});
    }

    pub fn isAccessibilityOrderedByRow(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isAccessibilityOrderedByRow", objc.BOOL, .{});
    }

    pub fn setAccessibilityOrderedByRow(_self: *@This(), _accessibilityOrderedByRow: objc.BOOL) void {
        return objc.msgSend(_self, "setAccessibilityOrderedByRow:", void, .{_accessibilityOrderedByRow});
    }

    pub fn accessibilityHorizontalUnits(_self: *@This()) app_kit.AccessibilityUnits {
        return objc.msgSend(_self, "accessibilityHorizontalUnits", app_kit.AccessibilityUnits, .{});
    }

    pub fn setAccessibilityHorizontalUnits(_self: *@This(), _accessibilityHorizontalUnits: app_kit.AccessibilityUnits) void {
        return objc.msgSend(_self, "setAccessibilityHorizontalUnits:", void, .{_accessibilityHorizontalUnits});
    }

    pub fn accessibilityVerticalUnits(_self: *@This()) app_kit.AccessibilityUnits {
        return objc.msgSend(_self, "accessibilityVerticalUnits", app_kit.AccessibilityUnits, .{});
    }

    pub fn setAccessibilityVerticalUnits(_self: *@This(), _accessibilityVerticalUnits: app_kit.AccessibilityUnits) void {
        return objc.msgSend(_self, "setAccessibilityVerticalUnits:", void, .{_accessibilityVerticalUnits});
    }

    pub fn accessibilityHorizontalUnitDescription(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "accessibilityHorizontalUnitDescription", ?*foundation.String, .{});
    }

    pub fn setAccessibilityHorizontalUnitDescription(_self: *@This(), _accessibilityHorizontalUnitDescription: ?*foundation.String) void {
        return objc.msgSend(_self, "setAccessibilityHorizontalUnitDescription:", void, .{_accessibilityHorizontalUnitDescription});
    }

    pub fn accessibilityVerticalUnitDescription(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "accessibilityVerticalUnitDescription", ?*foundation.String, .{});
    }

    pub fn setAccessibilityVerticalUnitDescription(_self: *@This(), _accessibilityVerticalUnitDescription: ?*foundation.String) void {
        return objc.msgSend(_self, "setAccessibilityVerticalUnitDescription:", void, .{_accessibilityVerticalUnitDescription});
    }

    pub fn accessibilityHandles(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilityHandles", ?*foundation.Array, .{});
    }

    pub fn setAccessibilityHandles(_self: *@This(), _accessibilityHandles: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilityHandles:", void, .{_accessibilityHandles});
    }

    pub fn accessibilityWarningValue(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityWarningValue", ?objc.Id, .{});
    }

    pub fn setAccessibilityWarningValue(_self: *@This(), _accessibilityWarningValue: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityWarningValue:", void, .{_accessibilityWarningValue});
    }

    pub fn accessibilityCriticalValue(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityCriticalValue", ?objc.Id, .{});
    }

    pub fn setAccessibilityCriticalValue(_self: *@This(), _accessibilityCriticalValue: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityCriticalValue:", void, .{_accessibilityCriticalValue});
    }

    pub fn isAccessibilityDisclosed(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isAccessibilityDisclosed", objc.BOOL, .{});
    }

    pub fn setAccessibilityDisclosed(_self: *@This(), _accessibilityDisclosed: objc.BOOL) void {
        return objc.msgSend(_self, "setAccessibilityDisclosed:", void, .{_accessibilityDisclosed});
    }

    pub fn accessibilityDisclosedByRow(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityDisclosedByRow", ?objc.Id, .{});
    }

    pub fn setAccessibilityDisclosedByRow(_self: *@This(), _accessibilityDisclosedByRow: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityDisclosedByRow:", void, .{_accessibilityDisclosedByRow});
    }

    pub fn accessibilityDisclosedRows(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityDisclosedRows", ?objc.Id, .{});
    }

    pub fn setAccessibilityDisclosedRows(_self: *@This(), _accessibilityDisclosedRows: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityDisclosedRows:", void, .{_accessibilityDisclosedRows});
    }

    pub fn accessibilityDisclosureLevel(_self: *@This()) objc.NSInteger {
        return objc.msgSend(_self, "accessibilityDisclosureLevel", objc.NSInteger, .{});
    }

    pub fn setAccessibilityDisclosureLevel(_self: *@This(), _accessibilityDisclosureLevel: objc.NSInteger) void {
        return objc.msgSend(_self, "setAccessibilityDisclosureLevel:", void, .{_accessibilityDisclosureLevel});
    }

    pub fn accessibilityMarkerUIElements(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilityMarkerUIElements", ?*foundation.Array, .{});
    }

    pub fn setAccessibilityMarkerUIElements(_self: *@This(), _accessibilityMarkerUIElements: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilityMarkerUIElements:", void, .{_accessibilityMarkerUIElements});
    }

    pub fn accessibilityMarkerValues(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityMarkerValues", ?objc.Id, .{});
    }

    pub fn setAccessibilityMarkerValues(_self: *@This(), _accessibilityMarkerValues: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityMarkerValues:", void, .{_accessibilityMarkerValues});
    }

    pub fn accessibilityMarkerGroupUIElement(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityMarkerGroupUIElement", ?objc.Id, .{});
    }

    pub fn setAccessibilityMarkerGroupUIElement(_self: *@This(), _accessibilityMarkerGroupUIElement: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityMarkerGroupUIElement:", void, .{_accessibilityMarkerGroupUIElement});
    }

    pub fn accessibilityUnits(_self: *@This()) app_kit.AccessibilityUnits {
        return objc.msgSend(_self, "accessibilityUnits", app_kit.AccessibilityUnits, .{});
    }

    pub fn setAccessibilityUnits(_self: *@This(), _accessibilityUnits: app_kit.AccessibilityUnits) void {
        return objc.msgSend(_self, "setAccessibilityUnits:", void, .{_accessibilityUnits});
    }

    pub fn accessibilityUnitDescription(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "accessibilityUnitDescription", ?*foundation.String, .{});
    }

    pub fn setAccessibilityUnitDescription(_self: *@This(), _accessibilityUnitDescription: ?*foundation.String) void {
        return objc.msgSend(_self, "setAccessibilityUnitDescription:", void, .{_accessibilityUnitDescription});
    }

    pub fn accessibilityRulerMarkerType(_self: *@This()) app_kit.AccessibilityRulerMarkerType {
        return objc.msgSend(_self, "accessibilityRulerMarkerType", app_kit.AccessibilityRulerMarkerType, .{});
    }

    pub fn setAccessibilityRulerMarkerType(_self: *@This(), _accessibilityRulerMarkerType: app_kit.AccessibilityRulerMarkerType) void {
        return objc.msgSend(_self, "setAccessibilityRulerMarkerType:", void, .{_accessibilityRulerMarkerType});
    }

    pub fn accessibilityMarkerTypeDescription(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "accessibilityMarkerTypeDescription", ?*foundation.String, .{});
    }

    pub fn setAccessibilityMarkerTypeDescription(_self: *@This(), _accessibilityMarkerTypeDescription: ?*foundation.String) void {
        return objc.msgSend(_self, "setAccessibilityMarkerTypeDescription:", void, .{_accessibilityMarkerTypeDescription});
    }

    pub fn accessibilityHorizontalScrollBar(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityHorizontalScrollBar", ?objc.Id, .{});
    }

    pub fn setAccessibilityHorizontalScrollBar(_self: *@This(), _accessibilityHorizontalScrollBar: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityHorizontalScrollBar:", void, .{_accessibilityHorizontalScrollBar});
    }

    pub fn accessibilityVerticalScrollBar(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityVerticalScrollBar", ?objc.Id, .{});
    }

    pub fn setAccessibilityVerticalScrollBar(_self: *@This(), _accessibilityVerticalScrollBar: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityVerticalScrollBar:", void, .{_accessibilityVerticalScrollBar});
    }

    pub fn accessibilityAllowedValues(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "accessibilityAllowedValues", ?*anyopaque, .{});
    }

    pub fn setAccessibilityAllowedValues(_self: *@This(), _accessibilityAllowedValues: ?*anyopaque) void {
        return objc.msgSend(_self, "setAccessibilityAllowedValues:", void, .{_accessibilityAllowedValues});
    }

    pub fn accessibilityLabelUIElements(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilityLabelUIElements", ?*foundation.Array, .{});
    }

    pub fn setAccessibilityLabelUIElements(_self: *@This(), _accessibilityLabelUIElements: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilityLabelUIElements:", void, .{_accessibilityLabelUIElements});
    }

    pub fn accessibilityLabelValue(_self: *@This()) f32 {
        return objc.msgSend(_self, "accessibilityLabelValue", f32, .{});
    }

    pub fn setAccessibilityLabelValue(_self: *@This(), _accessibilityLabelValue: f32) void {
        return objc.msgSend(_self, "setAccessibilityLabelValue:", void, .{_accessibilityLabelValue});
    }

    pub fn accessibilitySplitters(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilitySplitters", ?*foundation.Array, .{});
    }

    pub fn setAccessibilitySplitters(_self: *@This(), _accessibilitySplitters: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilitySplitters:", void, .{_accessibilitySplitters});
    }

    pub fn accessibilityDecrementButton(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityDecrementButton", ?objc.Id, .{});
    }

    pub fn setAccessibilityDecrementButton(_self: *@This(), _accessibilityDecrementButton: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityDecrementButton:", void, .{_accessibilityDecrementButton});
    }

    pub fn accessibilityIncrementButton(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityIncrementButton", ?objc.Id, .{});
    }

    pub fn setAccessibilityIncrementButton(_self: *@This(), _accessibilityIncrementButton: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityIncrementButton:", void, .{_accessibilityIncrementButton});
    }

    pub fn accessibilityTabs(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilityTabs", ?*foundation.Array, .{});
    }

    pub fn setAccessibilityTabs(_self: *@This(), _accessibilityTabs: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilityTabs:", void, .{_accessibilityTabs});
    }

    pub fn accessibilityHeader(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityHeader", ?objc.Id, .{});
    }

    pub fn setAccessibilityHeader(_self: *@This(), _accessibilityHeader: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityHeader:", void, .{_accessibilityHeader});
    }

    pub fn accessibilityColumnCount(_self: *@This()) objc.NSInteger {
        return objc.msgSend(_self, "accessibilityColumnCount", objc.NSInteger, .{});
    }

    pub fn setAccessibilityColumnCount(_self: *@This(), _accessibilityColumnCount: objc.NSInteger) void {
        return objc.msgSend(_self, "setAccessibilityColumnCount:", void, .{_accessibilityColumnCount});
    }

    pub fn accessibilityRowCount(_self: *@This()) objc.NSInteger {
        return objc.msgSend(_self, "accessibilityRowCount", objc.NSInteger, .{});
    }

    pub fn setAccessibilityRowCount(_self: *@This(), _accessibilityRowCount: objc.NSInteger) void {
        return objc.msgSend(_self, "setAccessibilityRowCount:", void, .{_accessibilityRowCount});
    }

    pub fn accessibilityIndex(_self: *@This()) objc.NSInteger {
        return objc.msgSend(_self, "accessibilityIndex", objc.NSInteger, .{});
    }

    pub fn setAccessibilityIndex(_self: *@This(), _accessibilityIndex: objc.NSInteger) void {
        return objc.msgSend(_self, "setAccessibilityIndex:", void, .{_accessibilityIndex});
    }

    pub fn accessibilityColumns(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilityColumns", ?*foundation.Array, .{});
    }

    pub fn setAccessibilityColumns(_self: *@This(), _accessibilityColumns: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilityColumns:", void, .{_accessibilityColumns});
    }

    pub fn accessibilityRows(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilityRows", ?*foundation.Array, .{});
    }

    pub fn setAccessibilityRows(_self: *@This(), _accessibilityRows: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilityRows:", void, .{_accessibilityRows});
    }

    pub fn accessibilityVisibleRows(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilityVisibleRows", ?*foundation.Array, .{});
    }

    pub fn setAccessibilityVisibleRows(_self: *@This(), _accessibilityVisibleRows: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilityVisibleRows:", void, .{_accessibilityVisibleRows});
    }

    pub fn accessibilitySelectedRows(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilitySelectedRows", ?*foundation.Array, .{});
    }

    pub fn setAccessibilitySelectedRows(_self: *@This(), _accessibilitySelectedRows: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilitySelectedRows:", void, .{_accessibilitySelectedRows});
    }

    pub fn accessibilityVisibleColumns(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilityVisibleColumns", ?*foundation.Array, .{});
    }

    pub fn setAccessibilityVisibleColumns(_self: *@This(), _accessibilityVisibleColumns: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilityVisibleColumns:", void, .{_accessibilityVisibleColumns});
    }

    pub fn accessibilitySelectedColumns(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilitySelectedColumns", ?*foundation.Array, .{});
    }

    pub fn setAccessibilitySelectedColumns(_self: *@This(), _accessibilitySelectedColumns: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilitySelectedColumns:", void, .{_accessibilitySelectedColumns});
    }

    pub fn accessibilitySortDirection(_self: *@This()) app_kit.AccessibilitySortDirection {
        return objc.msgSend(_self, "accessibilitySortDirection", app_kit.AccessibilitySortDirection, .{});
    }

    pub fn setAccessibilitySortDirection(_self: *@This(), _accessibilitySortDirection: app_kit.AccessibilitySortDirection) void {
        return objc.msgSend(_self, "setAccessibilitySortDirection:", void, .{_accessibilitySortDirection});
    }

    pub fn accessibilityRowHeaderUIElements(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilityRowHeaderUIElements", ?*foundation.Array, .{});
    }

    pub fn setAccessibilityRowHeaderUIElements(_self: *@This(), _accessibilityRowHeaderUIElements: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilityRowHeaderUIElements:", void, .{_accessibilityRowHeaderUIElements});
    }

    pub fn accessibilitySelectedCells(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilitySelectedCells", ?*foundation.Array, .{});
    }

    pub fn setAccessibilitySelectedCells(_self: *@This(), _accessibilitySelectedCells: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilitySelectedCells:", void, .{_accessibilitySelectedCells});
    }

    pub fn accessibilityVisibleCells(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilityVisibleCells", ?*foundation.Array, .{});
    }

    pub fn setAccessibilityVisibleCells(_self: *@This(), _accessibilityVisibleCells: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilityVisibleCells:", void, .{_accessibilityVisibleCells});
    }

    pub fn accessibilityColumnHeaderUIElements(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilityColumnHeaderUIElements", ?*foundation.Array, .{});
    }

    pub fn setAccessibilityColumnHeaderUIElements(_self: *@This(), _accessibilityColumnHeaderUIElements: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilityColumnHeaderUIElements:", void, .{_accessibilityColumnHeaderUIElements});
    }

    pub fn accessibilityRowIndexRange(_self: *@This()) foundation.Range {
        return objc.msgSend(_self, "accessibilityRowIndexRange", foundation.Range, .{});
    }

    pub fn setAccessibilityRowIndexRange(_self: *@This(), _accessibilityRowIndexRange: foundation.Range) void {
        return objc.msgSend(_self, "setAccessibilityRowIndexRange:", void, .{_accessibilityRowIndexRange});
    }

    pub fn accessibilityColumnIndexRange(_self: *@This()) foundation.Range {
        return objc.msgSend(_self, "accessibilityColumnIndexRange", foundation.Range, .{});
    }

    pub fn setAccessibilityColumnIndexRange(_self: *@This(), _accessibilityColumnIndexRange: foundation.Range) void {
        return objc.msgSend(_self, "setAccessibilityColumnIndexRange:", void, .{_accessibilityColumnIndexRange});
    }

    pub fn accessibilityInsertionPointLineNumber(_self: *@This()) objc.NSInteger {
        return objc.msgSend(_self, "accessibilityInsertionPointLineNumber", objc.NSInteger, .{});
    }

    pub fn setAccessibilityInsertionPointLineNumber(_self: *@This(), _accessibilityInsertionPointLineNumber: objc.NSInteger) void {
        return objc.msgSend(_self, "setAccessibilityInsertionPointLineNumber:", void, .{_accessibilityInsertionPointLineNumber});
    }

    pub fn accessibilitySharedCharacterRange(_self: *@This()) foundation.Range {
        return objc.msgSend(_self, "accessibilitySharedCharacterRange", foundation.Range, .{});
    }

    pub fn setAccessibilitySharedCharacterRange(_self: *@This(), _accessibilitySharedCharacterRange: foundation.Range) void {
        return objc.msgSend(_self, "setAccessibilitySharedCharacterRange:", void, .{_accessibilitySharedCharacterRange});
    }

    pub fn accessibilitySharedTextUIElements(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilitySharedTextUIElements", ?*foundation.Array, .{});
    }

    pub fn setAccessibilitySharedTextUIElements(_self: *@This(), _accessibilitySharedTextUIElements: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilitySharedTextUIElements:", void, .{_accessibilitySharedTextUIElements});
    }

    pub fn accessibilityVisibleCharacterRange(_self: *@This()) foundation.Range {
        return objc.msgSend(_self, "accessibilityVisibleCharacterRange", foundation.Range, .{});
    }

    pub fn setAccessibilityVisibleCharacterRange(_self: *@This(), _accessibilityVisibleCharacterRange: foundation.Range) void {
        return objc.msgSend(_self, "setAccessibilityVisibleCharacterRange:", void, .{_accessibilityVisibleCharacterRange});
    }

    pub fn accessibilityNumberOfCharacters(_self: *@This()) objc.NSInteger {
        return objc.msgSend(_self, "accessibilityNumberOfCharacters", objc.NSInteger, .{});
    }

    pub fn setAccessibilityNumberOfCharacters(_self: *@This(), _accessibilityNumberOfCharacters: objc.NSInteger) void {
        return objc.msgSend(_self, "setAccessibilityNumberOfCharacters:", void, .{_accessibilityNumberOfCharacters});
    }

    pub fn accessibilitySelectedText(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "accessibilitySelectedText", ?*foundation.String, .{});
    }

    pub fn setAccessibilitySelectedText(_self: *@This(), _accessibilitySelectedText: ?*foundation.String) void {
        return objc.msgSend(_self, "setAccessibilitySelectedText:", void, .{_accessibilitySelectedText});
    }

    pub fn accessibilitySelectedTextRange(_self: *@This()) foundation.Range {
        return objc.msgSend(_self, "accessibilitySelectedTextRange", foundation.Range, .{});
    }

    pub fn setAccessibilitySelectedTextRange(_self: *@This(), _accessibilitySelectedTextRange: foundation.Range) void {
        return objc.msgSend(_self, "setAccessibilitySelectedTextRange:", void, .{_accessibilitySelectedTextRange});
    }

    pub fn accessibilitySelectedTextRanges(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "accessibilitySelectedTextRanges", ?*anyopaque, .{});
    }

    pub fn setAccessibilitySelectedTextRanges(_self: *@This(), _accessibilitySelectedTextRanges: ?*anyopaque) void {
        return objc.msgSend(_self, "setAccessibilitySelectedTextRanges:", void, .{_accessibilitySelectedTextRanges});
    }

    pub fn accessibilityToolbarButton(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityToolbarButton", ?objc.Id, .{});
    }

    pub fn setAccessibilityToolbarButton(_self: *@This(), _accessibilityToolbarButton: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityToolbarButton:", void, .{_accessibilityToolbarButton});
    }

    pub fn isAccessibilityModal(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isAccessibilityModal", objc.BOOL, .{});
    }

    pub fn setAccessibilityModal(_self: *@This(), _accessibilityModal: objc.BOOL) void {
        return objc.msgSend(_self, "setAccessibilityModal:", void, .{_accessibilityModal});
    }

    pub fn accessibilityProxy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityProxy", ?objc.Id, .{});
    }

    pub fn setAccessibilityProxy(_self: *@This(), _accessibilityProxy: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityProxy:", void, .{_accessibilityProxy});
    }

    pub fn isAccessibilityMain(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isAccessibilityMain", objc.BOOL, .{});
    }

    pub fn setAccessibilityMain(_self: *@This(), _accessibilityMain: objc.BOOL) void {
        return objc.msgSend(_self, "setAccessibilityMain:", void, .{_accessibilityMain});
    }

    pub fn accessibilityFullScreenButton(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityFullScreenButton", ?objc.Id, .{});
    }

    pub fn setAccessibilityFullScreenButton(_self: *@This(), _accessibilityFullScreenButton: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityFullScreenButton:", void, .{_accessibilityFullScreenButton});
    }

    pub fn accessibilityGrowArea(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityGrowArea", ?objc.Id, .{});
    }

    pub fn setAccessibilityGrowArea(_self: *@This(), _accessibilityGrowArea: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityGrowArea:", void, .{_accessibilityGrowArea});
    }

    pub fn accessibilityDocument(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "accessibilityDocument", ?*foundation.String, .{});
    }

    pub fn setAccessibilityDocument(_self: *@This(), _accessibilityDocument: ?*foundation.String) void {
        return objc.msgSend(_self, "setAccessibilityDocument:", void, .{_accessibilityDocument});
    }

    pub fn accessibilityDefaultButton(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityDefaultButton", ?objc.Id, .{});
    }

    pub fn setAccessibilityDefaultButton(_self: *@This(), _accessibilityDefaultButton: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityDefaultButton:", void, .{_accessibilityDefaultButton});
    }

    pub fn accessibilityCloseButton(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityCloseButton", ?objc.Id, .{});
    }

    pub fn setAccessibilityCloseButton(_self: *@This(), _accessibilityCloseButton: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityCloseButton:", void, .{_accessibilityCloseButton});
    }

    pub fn accessibilityZoomButton(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityZoomButton", ?objc.Id, .{});
    }

    pub fn setAccessibilityZoomButton(_self: *@This(), _accessibilityZoomButton: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityZoomButton:", void, .{_accessibilityZoomButton});
    }

    pub fn accessibilityMinimizeButton(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityMinimizeButton", ?objc.Id, .{});
    }

    pub fn setAccessibilityMinimizeButton(_self: *@This(), _accessibilityMinimizeButton: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityMinimizeButton:", void, .{_accessibilityMinimizeButton});
    }

    pub fn isAccessibilityMinimized(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isAccessibilityMinimized", objc.BOOL, .{});
    }

    pub fn setAccessibilityMinimized(_self: *@This(), _accessibilityMinimized: objc.BOOL) void {
        return objc.msgSend(_self, "setAccessibilityMinimized:", void, .{_accessibilityMinimized});
    }

    pub fn accessibilityCustomActions(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "accessibilityCustomActions", ?*anyopaque, .{});
    }

    pub fn setAccessibilityCustomActions(_self: *@This(), _accessibilityCustomActions: ?*anyopaque) void {
        return objc.msgSend(_self, "setAccessibilityCustomActions:", void, .{_accessibilityCustomActions});
    }

    pub fn initWithFrame(_self: *@This(), _frameRect: foundation.Rect) *@This() {
        return objc.msgSend(_self, "initWithFrame:", *@This(), .{_frameRect});
    }

    pub fn isDescendantOf(_self: *@This(), _view: ?*app_kit.View) objc.BOOL {
        return objc.msgSend(_self, "isDescendantOf:", objc.BOOL, .{_view});
    }

    pub fn ancestorSharedWithView(_self: *@This(), _view: ?*app_kit.View) ?*app_kit.View {
        return objc.msgSend(_self, "ancestorSharedWithView:", ?*app_kit.View, .{_view});
    }

    pub fn getRectsBeingDrawnCount(_self: *@This(), _rects: ?*?*foundation.Rect, _count: ?*objc.NSInteger) void {
        return objc.msgSend(_self, "getRectsBeingDrawn:count:", void, .{ _rects, _count });
    }

    pub fn needsToDrawRect(_self: *@This(), _rect: foundation.Rect) objc.BOOL {
        return objc.msgSend(_self, "needsToDrawRect:", objc.BOOL, .{_rect});
    }

    pub fn viewDidHide(_self: *@This()) void {
        return objc.msgSend(_self, "viewDidHide", void, .{});
    }

    pub fn viewDidUnhide(_self: *@This()) void {
        return objc.msgSend(_self, "viewDidUnhide", void, .{});
    }

    pub fn addSubview(_self: *@This(), _view: ?*app_kit.View) void {
        return objc.msgSend(_self, "addSubview:", void, .{_view});
    }

    pub fn addSubviewPositionedRelativeTo(_self: *@This(), _view: ?*app_kit.View, _place: app_kit.WindowOrderingMode, _otherView: ?*app_kit.View) void {
        return objc.msgSend(_self, "addSubview:positioned:relativeTo:", void, .{ _view, _place, _otherView });
    }

    pub fn sortSubviewsUsingFunctionContext(_self: *@This(), _compare: ?*const fn (?*anyopaque, ?*anyopaque, ?*anyopaque) callconv(.C) foundation.ComparisonResult, _context: ?*anyopaque) void {
        return objc.msgSend(_self, "sortSubviewsUsingFunction:context:", void, .{ _compare, _context });
    }

    pub fn viewWillMoveToWindow(_self: *@This(), _newWindow: ?*app_kit.Window) void {
        return objc.msgSend(_self, "viewWillMoveToWindow:", void, .{_newWindow});
    }

    pub fn viewDidMoveToWindow(_self: *@This()) void {
        return objc.msgSend(_self, "viewDidMoveToWindow", void, .{});
    }

    pub fn viewWillMoveToSuperview(_self: *@This(), _newSuperview: ?*app_kit.View) void {
        return objc.msgSend(_self, "viewWillMoveToSuperview:", void, .{_newSuperview});
    }

    pub fn viewDidMoveToSuperview(_self: *@This()) void {
        return objc.msgSend(_self, "viewDidMoveToSuperview", void, .{});
    }

    pub fn didAddSubview(_self: *@This(), _subview: ?*app_kit.View) void {
        return objc.msgSend(_self, "didAddSubview:", void, .{_subview});
    }

    pub fn willRemoveSubview(_self: *@This(), _subview: ?*app_kit.View) void {
        return objc.msgSend(_self, "willRemoveSubview:", void, .{_subview});
    }

    pub fn removeFromSuperview(_self: *@This()) void {
        return objc.msgSend(_self, "removeFromSuperview", void, .{});
    }

    pub fn replaceSubviewWith(_self: *@This(), _oldView: ?*app_kit.View, _newView: ?*app_kit.View) void {
        return objc.msgSend(_self, "replaceSubview:with:", void, .{ _oldView, _newView });
    }

    pub fn removeFromSuperviewWithoutNeedingDisplay(_self: *@This()) void {
        return objc.msgSend(_self, "removeFromSuperviewWithoutNeedingDisplay", void, .{});
    }

    pub fn viewDidChangeBackingProperties(_self: *@This()) void {
        return objc.msgSend(_self, "viewDidChangeBackingProperties", void, .{});
    }

    pub fn resizeSubviewsWithOldSize(_self: *@This(), _oldSize: foundation.Size) void {
        return objc.msgSend(_self, "resizeSubviewsWithOldSize:", void, .{_oldSize});
    }

    pub fn resizeWithOldSuperviewSize(_self: *@This(), _oldSize: foundation.Size) void {
        return objc.msgSend(_self, "resizeWithOldSuperviewSize:", void, .{_oldSize});
    }

    pub fn setFrameOrigin(_self: *@This(), _newOrigin: foundation.Point) void {
        return objc.msgSend(_self, "setFrameOrigin:", void, .{_newOrigin});
    }

    pub fn setFrameSize(_self: *@This(), _newSize: foundation.Size) void {
        return objc.msgSend(_self, "setFrameSize:", void, .{_newSize});
    }

    pub fn setBoundsOrigin(_self: *@This(), _newOrigin: foundation.Point) void {
        return objc.msgSend(_self, "setBoundsOrigin:", void, .{_newOrigin});
    }

    pub fn setBoundsSize(_self: *@This(), _newSize: foundation.Size) void {
        return objc.msgSend(_self, "setBoundsSize:", void, .{_newSize});
    }

    pub fn translateOriginToPoint(_self: *@This(), _translation: foundation.Point) void {
        return objc.msgSend(_self, "translateOriginToPoint:", void, .{_translation});
    }

    pub fn scaleUnitSquareToSize(_self: *@This(), _newUnitSize: foundation.Size) void {
        return objc.msgSend(_self, "scaleUnitSquareToSize:", void, .{_newUnitSize});
    }

    pub fn rotateByAngle(_self: *@This(), _angle: core_foundation.CGFloat) void {
        return objc.msgSend(_self, "rotateByAngle:", void, .{_angle});
    }

    pub fn convertPointFromView(_self: *@This(), _point: foundation.Point, _view: ?*app_kit.View) foundation.Point {
        return objc.msgSend(_self, "convertPoint:fromView:", foundation.Point, .{ _point, _view });
    }

    pub fn convertPointToView(_self: *@This(), _point: foundation.Point, _view: ?*app_kit.View) foundation.Point {
        return objc.msgSend(_self, "convertPoint:toView:", foundation.Point, .{ _point, _view });
    }

    pub fn convertSizeFromView(_self: *@This(), _size: foundation.Size, _view: ?*app_kit.View) foundation.Size {
        return objc.msgSend(_self, "convertSize:fromView:", foundation.Size, .{ _size, _view });
    }

    pub fn convertSizeToView(_self: *@This(), _size: foundation.Size, _view: ?*app_kit.View) foundation.Size {
        return objc.msgSend(_self, "convertSize:toView:", foundation.Size, .{ _size, _view });
    }

    pub fn convertRectFromView(_self: *@This(), _rect: foundation.Rect, _view: ?*app_kit.View) foundation.Rect {
        return objc.msgSend(_self, "convertRect:fromView:", foundation.Rect, .{ _rect, _view });
    }

    pub fn convertRectToView(_self: *@This(), _rect: foundation.Rect, _view: ?*app_kit.View) foundation.Rect {
        return objc.msgSend(_self, "convertRect:toView:", foundation.Rect, .{ _rect, _view });
    }

    pub fn backingAlignedRectOptions(_self: *@This(), _rect: foundation.Rect, _options: foundation.AlignmentOptions) foundation.Rect {
        return objc.msgSend(_self, "backingAlignedRect:options:", foundation.Rect, .{ _rect, _options });
    }

    pub fn centerScanRect(_self: *@This(), _rect: foundation.Rect) foundation.Rect {
        return objc.msgSend(_self, "centerScanRect:", foundation.Rect, .{_rect});
    }

    pub fn convertPointToBacking(_self: *@This(), _point: foundation.Point) foundation.Point {
        return objc.msgSend(_self, "convertPointToBacking:", foundation.Point, .{_point});
    }

    pub fn convertPointFromBacking(_self: *@This(), _point: foundation.Point) foundation.Point {
        return objc.msgSend(_self, "convertPointFromBacking:", foundation.Point, .{_point});
    }

    pub fn convertSizeToBacking(_self: *@This(), _size: foundation.Size) foundation.Size {
        return objc.msgSend(_self, "convertSizeToBacking:", foundation.Size, .{_size});
    }

    pub fn convertSizeFromBacking(_self: *@This(), _size: foundation.Size) foundation.Size {
        return objc.msgSend(_self, "convertSizeFromBacking:", foundation.Size, .{_size});
    }

    pub fn convertRectToBacking(_self: *@This(), _rect: foundation.Rect) foundation.Rect {
        return objc.msgSend(_self, "convertRectToBacking:", foundation.Rect, .{_rect});
    }

    pub fn convertRectFromBacking(_self: *@This(), _rect: foundation.Rect) foundation.Rect {
        return objc.msgSend(_self, "convertRectFromBacking:", foundation.Rect, .{_rect});
    }

    pub fn convertPointToLayer(_self: *@This(), _point: foundation.Point) foundation.Point {
        return objc.msgSend(_self, "convertPointToLayer:", foundation.Point, .{_point});
    }

    pub fn convertPointFromLayer(_self: *@This(), _point: foundation.Point) foundation.Point {
        return objc.msgSend(_self, "convertPointFromLayer:", foundation.Point, .{_point});
    }

    pub fn convertSizeToLayer(_self: *@This(), _size: foundation.Size) foundation.Size {
        return objc.msgSend(_self, "convertSizeToLayer:", foundation.Size, .{_size});
    }

    pub fn convertSizeFromLayer(_self: *@This(), _size: foundation.Size) foundation.Size {
        return objc.msgSend(_self, "convertSizeFromLayer:", foundation.Size, .{_size});
    }

    pub fn convertRectToLayer(_self: *@This(), _rect: foundation.Rect) foundation.Rect {
        return objc.msgSend(_self, "convertRectToLayer:", foundation.Rect, .{_rect});
    }

    pub fn convertRectFromLayer(_self: *@This(), _rect: foundation.Rect) foundation.Rect {
        return objc.msgSend(_self, "convertRectFromLayer:", foundation.Rect, .{_rect});
    }

    pub fn setNeedsDisplayInRect(_self: *@This(), _invalidRect: foundation.Rect) void {
        return objc.msgSend(_self, "setNeedsDisplayInRect:", void, .{_invalidRect});
    }

    pub fn lockFocus(_self: *@This()) void {
        return objc.msgSend(_self, "lockFocus", void, .{});
    }

    pub fn unlockFocus(_self: *@This()) void {
        return objc.msgSend(_self, "unlockFocus", void, .{});
    }

    pub fn lockFocusIfCanDraw(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "lockFocusIfCanDraw", objc.BOOL, .{});
    }

    pub fn lockFocusIfCanDrawInContext(_self: *@This(), _context: ?*app_kit.GraphicsContext) objc.BOOL {
        return objc.msgSend(_self, "lockFocusIfCanDrawInContext:", objc.BOOL, .{_context});
    }

    pub fn display(_self: *@This()) void {
        return objc.msgSend(_self, "display", void, .{});
    }

    pub fn displayIfNeeded(_self: *@This()) void {
        return objc.msgSend(_self, "displayIfNeeded", void, .{});
    }

    pub fn displayIfNeededIgnoringOpacity(_self: *@This()) void {
        return objc.msgSend(_self, "displayIfNeededIgnoringOpacity", void, .{});
    }

    pub fn displayRect(_self: *@This(), _rect: foundation.Rect) void {
        return objc.msgSend(_self, "displayRect:", void, .{_rect});
    }

    pub fn displayIfNeededInRect(_self: *@This(), _rect: foundation.Rect) void {
        return objc.msgSend(_self, "displayIfNeededInRect:", void, .{_rect});
    }

    pub fn displayRectIgnoringOpacity(_self: *@This(), _rect: foundation.Rect) void {
        return objc.msgSend(_self, "displayRectIgnoringOpacity:", void, .{_rect});
    }

    pub fn displayIfNeededInRectIgnoringOpacity(_self: *@This(), _rect: foundation.Rect) void {
        return objc.msgSend(_self, "displayIfNeededInRectIgnoringOpacity:", void, .{_rect});
    }

    pub fn drawRect(_self: *@This(), _dirtyRect: foundation.Rect) void {
        return objc.msgSend(_self, "drawRect:", void, .{_dirtyRect});
    }

    pub fn displayRectIgnoringOpacityInContext(_self: *@This(), _rect: foundation.Rect, _context: ?*app_kit.GraphicsContext) void {
        return objc.msgSend(_self, "displayRectIgnoringOpacity:inContext:", void, .{ _rect, _context });
    }

    pub fn bitmapImageRepForCachingDisplayInRect(_self: *@This(), _rect: foundation.Rect) ?*app_kit.BitmapImageRep {
        return objc.msgSend(_self, "bitmapImageRepForCachingDisplayInRect:", ?*app_kit.BitmapImageRep, .{_rect});
    }

    pub fn cacheDisplayInRectToBitmapImageRep(_self: *@This(), _rect: foundation.Rect, _bitmapImageRep: ?*app_kit.BitmapImageRep) void {
        return objc.msgSend(_self, "cacheDisplayInRect:toBitmapImageRep:", void, .{ _rect, _bitmapImageRep });
    }

    pub fn viewWillDraw(_self: *@This()) void {
        return objc.msgSend(_self, "viewWillDraw", void, .{});
    }

    pub fn scrollPoint(_self: *@This(), _point: foundation.Point) void {
        return objc.msgSend(_self, "scrollPoint:", void, .{_point});
    }

    pub fn scrollRectToVisible(_self: *@This(), _rect: foundation.Rect) objc.BOOL {
        return objc.msgSend(_self, "scrollRectToVisible:", objc.BOOL, .{_rect});
    }

    pub fn autoscroll(_self: *@This(), _event: ?*app_kit.Event) objc.BOOL {
        return objc.msgSend(_self, "autoscroll:", objc.BOOL, .{_event});
    }

    pub fn adjustScroll(_self: *@This(), _newVisible: foundation.Rect) foundation.Rect {
        return objc.msgSend(_self, "adjustScroll:", foundation.Rect, .{_newVisible});
    }

    pub fn scrollRectBy(_self: *@This(), _rect: foundation.Rect, _delta: foundation.Size) void {
        return objc.msgSend(_self, "scrollRect:by:", void, .{ _rect, _delta });
    }

    pub fn translateRectsNeedingDisplayInRectBy(_self: *@This(), _clipRect: foundation.Rect, _delta: foundation.Size) void {
        return objc.msgSend(_self, "translateRectsNeedingDisplayInRect:by:", void, .{ _clipRect, _delta });
    }

    pub fn hitTest(_self: *@This(), _point: foundation.Point) ?*app_kit.View {
        return objc.msgSend(_self, "hitTest:", ?*app_kit.View, .{_point});
    }

    pub fn mouseInRect(_self: *@This(), _point: foundation.Point, _rect: foundation.Rect) objc.BOOL {
        return objc.msgSend(_self, "mouse:inRect:", objc.BOOL, .{ _point, _rect });
    }

    pub fn viewWithTag(_self: *@This(), _tag: objc.NSInteger) ?*anyopaque {
        return objc.msgSend(_self, "viewWithTag:", ?*anyopaque, .{_tag});
    }

    pub fn acceptsFirstMouse(_self: *@This(), _event: ?*app_kit.Event) objc.BOOL {
        return objc.msgSend(_self, "acceptsFirstMouse:", objc.BOOL, .{_event});
    }

    pub fn shouldDelayWindowOrderingForEvent(_self: *@This(), _event: ?*app_kit.Event) objc.BOOL {
        return objc.msgSend(_self, "shouldDelayWindowOrderingForEvent:", objc.BOOL, .{_event});
    }

    pub fn makeBackingLayer(_self: *@This()) ?*quartz_core.Layer {
        return objc.msgSend(_self, "makeBackingLayer", ?*quartz_core.Layer, .{});
    }

    pub fn updateLayer(_self: *@This()) void {
        return objc.msgSend(_self, "updateLayer", void, .{});
    }

    pub fn layoutSubtreeIfNeeded(_self: *@This()) void {
        return objc.msgSend(_self, "layoutSubtreeIfNeeded", void, .{});
    }

    pub fn layout(_self: *@This()) void {
        return objc.msgSend(_self, "layout", void, .{});
    }

    pub fn menuForEvent(_self: *@This(), _event: ?*app_kit.Event) ?*app_kit.Menu {
        return objc.msgSend(_self, "menuForEvent:", ?*app_kit.Menu, .{_event});
    }

    pub fn willOpenMenuWithEvent(_self: *@This(), _menu: ?*app_kit.Menu, _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "willOpenMenu:withEvent:", void, .{ _menu, _event });
    }

    pub fn didCloseMenuWithEvent(_self: *@This(), _menu: ?*app_kit.Menu, _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "didCloseMenu:withEvent:", void, .{ _menu, _event });
    }

    pub fn addToolTipRectOwnerUserData(_self: *@This(), _rect: foundation.Rect, _owner: ?objc.Id, _data: ?*anyopaque) app_kit.ToolTipTag {
        return objc.msgSend(_self, "addToolTipRect:owner:userData:", app_kit.ToolTipTag, .{ _rect, _owner, _data });
    }

    pub fn removeToolTip(_self: *@This(), _tag: app_kit.ToolTipTag) void {
        return objc.msgSend(_self, "removeToolTip:", void, .{_tag});
    }

    pub fn removeAllToolTips(_self: *@This()) void {
        return objc.msgSend(_self, "removeAllToolTips", void, .{});
    }

    pub fn viewWillStartLiveResize(_self: *@This()) void {
        return objc.msgSend(_self, "viewWillStartLiveResize", void, .{});
    }

    pub fn viewDidEndLiveResize(_self: *@This()) void {
        return objc.msgSend(_self, "viewDidEndLiveResize", void, .{});
    }

    pub fn getRectsExposedDuringLiveResizeCount(_self: *@This(), _exposedRects: ?*foundation.Rect, _count: ?*objc.NSInteger) void {
        return objc.msgSend(_self, "getRectsExposedDuringLiveResize:count:", void, .{ _exposedRects, _count });
    }

    pub fn rectForSmartMagnificationAtPointInRect(_self: *@This(), _location: foundation.Point, _visibleRect: foundation.Rect) foundation.Rect {
        return objc.msgSend(_self, "rectForSmartMagnificationAtPoint:inRect:", foundation.Rect, .{ _location, _visibleRect });
    }

    pub fn prepareForReuse(_self: *@This()) void {
        return objc.msgSend(_self, "prepareForReuse", void, .{});
    }

    pub fn prepareContentInRect(_self: *@This(), _rect: foundation.Rect) void {
        return objc.msgSend(_self, "prepareContentInRect:", void, .{_rect});
    }

    pub fn viewDidChangeEffectiveAppearance(_self: *@This()) void {
        return objc.msgSend(_self, "viewDidChangeEffectiveAppearance", void, .{});
    }

    pub fn window(_self: *@This()) ?*app_kit.Window {
        return objc.msgSend(_self, "window", ?*app_kit.Window, .{});
    }

    pub fn superview(_self: *@This()) ?*app_kit.View {
        return objc.msgSend(_self, "superview", ?*app_kit.View, .{});
    }

    pub fn subviews(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "subviews", ?*anyopaque, .{});
    }

    pub fn setSubviews(_self: *@This(), _subviews: ?*anyopaque) void {
        return objc.msgSend(_self, "setSubviews:", void, .{_subviews});
    }

    pub fn opaqueAncestor(_self: *@This()) ?*app_kit.View {
        return objc.msgSend(_self, "opaqueAncestor", ?*app_kit.View, .{});
    }

    pub fn isHidden(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isHidden", objc.BOOL, .{});
    }

    pub fn setHidden(_self: *@This(), _hidden: objc.BOOL) void {
        return objc.msgSend(_self, "setHidden:", void, .{_hidden});
    }

    pub fn isHiddenOrHasHiddenAncestor(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isHiddenOrHasHiddenAncestor", objc.BOOL, .{});
    }

    pub fn wantsDefaultClipping(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "wantsDefaultClipping", objc.BOOL, .{});
    }

    pub fn postsFrameChangedNotifications(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "postsFrameChangedNotifications", objc.BOOL, .{});
    }

    pub fn setPostsFrameChangedNotifications(_self: *@This(), _postsFrameChangedNotifications: objc.BOOL) void {
        return objc.msgSend(_self, "setPostsFrameChangedNotifications:", void, .{_postsFrameChangedNotifications});
    }

    pub fn autoresizesSubviews(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "autoresizesSubviews", objc.BOOL, .{});
    }

    pub fn setAutoresizesSubviews(_self: *@This(), _autoresizesSubviews: objc.BOOL) void {
        return objc.msgSend(_self, "setAutoresizesSubviews:", void, .{_autoresizesSubviews});
    }

    pub fn autoresizingMask(_self: *@This()) app_kit.AutoresizingMaskOptions {
        return objc.msgSend(_self, "autoresizingMask", app_kit.AutoresizingMaskOptions, .{});
    }

    pub fn setAutoresizingMask(_self: *@This(), _autoresizingMask: app_kit.AutoresizingMaskOptions) void {
        return objc.msgSend(_self, "setAutoresizingMask:", void, .{_autoresizingMask});
    }

    pub fn frame(_self: *@This()) foundation.Rect {
        return objc.msgSend(_self, "frame", foundation.Rect, .{});
    }

    pub fn setFrame(_self: *@This(), _frame: foundation.Rect) void {
        return objc.msgSend(_self, "setFrame:", void, .{_frame});
    }

    pub fn frameRotation(_self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(_self, "frameRotation", core_foundation.CGFloat, .{});
    }

    pub fn setFrameRotation(_self: *@This(), _frameRotation: core_foundation.CGFloat) void {
        return objc.msgSend(_self, "setFrameRotation:", void, .{_frameRotation});
    }

    pub fn frameCenterRotation(_self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(_self, "frameCenterRotation", core_foundation.CGFloat, .{});
    }

    pub fn setFrameCenterRotation(_self: *@This(), _frameCenterRotation: core_foundation.CGFloat) void {
        return objc.msgSend(_self, "setFrameCenterRotation:", void, .{_frameCenterRotation});
    }

    pub fn boundsRotation(_self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(_self, "boundsRotation", core_foundation.CGFloat, .{});
    }

    pub fn setBoundsRotation(_self: *@This(), _boundsRotation: core_foundation.CGFloat) void {
        return objc.msgSend(_self, "setBoundsRotation:", void, .{_boundsRotation});
    }

    pub fn bounds(_self: *@This()) foundation.Rect {
        return objc.msgSend(_self, "bounds", foundation.Rect, .{});
    }

    pub fn setBounds(_self: *@This(), _bounds: foundation.Rect) void {
        return objc.msgSend(_self, "setBounds:", void, .{_bounds});
    }

    pub fn isFlipped(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isFlipped", objc.BOOL, .{});
    }

    pub fn isRotatedFromBase(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isRotatedFromBase", objc.BOOL, .{});
    }

    pub fn isRotatedOrScaledFromBase(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isRotatedOrScaledFromBase", objc.BOOL, .{});
    }

    pub fn isOpaque(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isOpaque", objc.BOOL, .{});
    }

    pub fn canDrawConcurrently(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "canDrawConcurrently", objc.BOOL, .{});
    }

    pub fn setCanDrawConcurrently(_self: *@This(), _canDrawConcurrently: objc.BOOL) void {
        return objc.msgSend(_self, "setCanDrawConcurrently:", void, .{_canDrawConcurrently});
    }

    pub fn canDraw(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "canDraw", objc.BOOL, .{});
    }

    pub fn needsDisplay(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "needsDisplay", objc.BOOL, .{});
    }

    pub fn setNeedsDisplay(_self: *@This(), _needsDisplay: objc.BOOL) void {
        return objc.msgSend(_self, "setNeedsDisplay:", void, .{_needsDisplay});
    }

    pub fn focusView() ?*app_kit.View {
        return objc.msgSend(Internal.class(), "focusView", ?*app_kit.View, .{});
    }

    pub fn visibleRect(_self: *@This()) foundation.Rect {
        return objc.msgSend(_self, "visibleRect", foundation.Rect, .{});
    }

    pub fn tag(_self: *@This()) objc.NSInteger {
        return objc.msgSend(_self, "tag", objc.NSInteger, .{});
    }

    pub fn needsPanelToBecomeKey(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "needsPanelToBecomeKey", objc.BOOL, .{});
    }

    pub fn mouseDownCanMoveWindow(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "mouseDownCanMoveWindow", objc.BOOL, .{});
    }

    pub fn acceptsTouchEvents(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "acceptsTouchEvents", objc.BOOL, .{});
    }

    pub fn setAcceptsTouchEvents(_self: *@This(), _acceptsTouchEvents: objc.BOOL) void {
        return objc.msgSend(_self, "setAcceptsTouchEvents:", void, .{_acceptsTouchEvents});
    }

    pub fn wantsRestingTouches(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "wantsRestingTouches", objc.BOOL, .{});
    }

    pub fn setWantsRestingTouches(_self: *@This(), _wantsRestingTouches: objc.BOOL) void {
        return objc.msgSend(_self, "setWantsRestingTouches:", void, .{_wantsRestingTouches});
    }

    pub fn layerContentsRedrawPolicy(_self: *@This()) app_kit.ViewLayerContentsRedrawPolicy {
        return objc.msgSend(_self, "layerContentsRedrawPolicy", app_kit.ViewLayerContentsRedrawPolicy, .{});
    }

    pub fn setLayerContentsRedrawPolicy(_self: *@This(), _layerContentsRedrawPolicy: app_kit.ViewLayerContentsRedrawPolicy) void {
        return objc.msgSend(_self, "setLayerContentsRedrawPolicy:", void, .{_layerContentsRedrawPolicy});
    }

    pub fn layerContentsPlacement(_self: *@This()) app_kit.ViewLayerContentsPlacement {
        return objc.msgSend(_self, "layerContentsPlacement", app_kit.ViewLayerContentsPlacement, .{});
    }

    pub fn setLayerContentsPlacement(_self: *@This(), _layerContentsPlacement: app_kit.ViewLayerContentsPlacement) void {
        return objc.msgSend(_self, "setLayerContentsPlacement:", void, .{_layerContentsPlacement});
    }

    pub fn wantsLayer(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "wantsLayer", objc.BOOL, .{});
    }

    pub fn setWantsLayer(_self: *@This(), _wantsLayer: objc.BOOL) void {
        return objc.msgSend(_self, "setWantsLayer:", void, .{_wantsLayer});
    }

    pub fn layer(_self: *@This()) ?*quartz_core.Layer {
        return objc.msgSend(_self, "layer", ?*quartz_core.Layer, .{});
    }

    pub fn setLayer(_self: *@This(), _layer: ?*quartz_core.Layer) void {
        return objc.msgSend(_self, "setLayer:", void, .{_layer});
    }

    pub fn wantsUpdateLayer(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "wantsUpdateLayer", objc.BOOL, .{});
    }

    pub fn canDrawSubviewsIntoLayer(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "canDrawSubviewsIntoLayer", objc.BOOL, .{});
    }

    pub fn setCanDrawSubviewsIntoLayer(_self: *@This(), _canDrawSubviewsIntoLayer: objc.BOOL) void {
        return objc.msgSend(_self, "setCanDrawSubviewsIntoLayer:", void, .{_canDrawSubviewsIntoLayer});
    }

    pub fn needsLayout(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "needsLayout", objc.BOOL, .{});
    }

    pub fn setNeedsLayout(_self: *@This(), _needsLayout: objc.BOOL) void {
        return objc.msgSend(_self, "setNeedsLayout:", void, .{_needsLayout});
    }

    pub fn alphaValue(_self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(_self, "alphaValue", core_foundation.CGFloat, .{});
    }

    pub fn setAlphaValue(_self: *@This(), _alphaValue: core_foundation.CGFloat) void {
        return objc.msgSend(_self, "setAlphaValue:", void, .{_alphaValue});
    }

    pub fn layerUsesCoreImageFilters(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "layerUsesCoreImageFilters", objc.BOOL, .{});
    }

    pub fn setLayerUsesCoreImageFilters(_self: *@This(), _layerUsesCoreImageFilters: objc.BOOL) void {
        return objc.msgSend(_self, "setLayerUsesCoreImageFilters:", void, .{_layerUsesCoreImageFilters});
    }

    pub fn backgroundFilters(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "backgroundFilters", ?*anyopaque, .{});
    }

    pub fn setBackgroundFilters(_self: *@This(), _backgroundFilters: ?*anyopaque) void {
        return objc.msgSend(_self, "setBackgroundFilters:", void, .{_backgroundFilters});
    }

    pub fn compositingFilter(_self: *@This()) ?*core_image.Filter {
        return objc.msgSend(_self, "compositingFilter", ?*core_image.Filter, .{});
    }

    pub fn setCompositingFilter(_self: *@This(), _compositingFilter: ?*core_image.Filter) void {
        return objc.msgSend(_self, "setCompositingFilter:", void, .{_compositingFilter});
    }

    pub fn contentFilters(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "contentFilters", ?*anyopaque, .{});
    }

    pub fn setContentFilters(_self: *@This(), _contentFilters: ?*anyopaque) void {
        return objc.msgSend(_self, "setContentFilters:", void, .{_contentFilters});
    }

    pub fn shadow(_self: *@This()) ?*app_kit.Shadow {
        return objc.msgSend(_self, "shadow", ?*app_kit.Shadow, .{});
    }

    pub fn setShadow(_self: *@This(), _shadow: ?*app_kit.Shadow) void {
        return objc.msgSend(_self, "setShadow:", void, .{_shadow});
    }

    pub fn clipsToBounds(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "clipsToBounds", objc.BOOL, .{});
    }

    pub fn setClipsToBounds(_self: *@This(), _clipsToBounds: objc.BOOL) void {
        return objc.msgSend(_self, "setClipsToBounds:", void, .{_clipsToBounds});
    }

    pub fn postsBoundsChangedNotifications(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "postsBoundsChangedNotifications", objc.BOOL, .{});
    }

    pub fn setPostsBoundsChangedNotifications(_self: *@This(), _postsBoundsChangedNotifications: objc.BOOL) void {
        return objc.msgSend(_self, "setPostsBoundsChangedNotifications:", void, .{_postsBoundsChangedNotifications});
    }

    pub fn enclosingScrollView(_self: *@This()) ?*app_kit.ScrollView {
        return objc.msgSend(_self, "enclosingScrollView", ?*app_kit.ScrollView, .{});
    }

    pub fn defaultMenu() ?*app_kit.Menu {
        return objc.msgSend(Internal.class(), "defaultMenu", ?*app_kit.Menu, .{});
    }

    pub fn toolTip(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "toolTip", ?*foundation.String, .{});
    }

    pub fn setToolTip(_self: *@This(), _toolTip: ?*foundation.String) void {
        return objc.msgSend(_self, "setToolTip:", void, .{_toolTip});
    }

    pub fn inLiveResize(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "inLiveResize", objc.BOOL, .{});
    }

    pub fn preservesContentDuringLiveResize(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "preservesContentDuringLiveResize", objc.BOOL, .{});
    }

    pub fn rectPreservedDuringLiveResize(_self: *@This()) foundation.Rect {
        return objc.msgSend(_self, "rectPreservedDuringLiveResize", foundation.Rect, .{});
    }

    pub fn inputContext(_self: *@This()) ?*app_kit.TextInputContext {
        return objc.msgSend(_self, "inputContext", ?*app_kit.TextInputContext, .{});
    }

    pub fn userInterfaceLayoutDirection(_self: *@This()) app_kit.UserInterfaceLayoutDirection {
        return objc.msgSend(_self, "userInterfaceLayoutDirection", app_kit.UserInterfaceLayoutDirection, .{});
    }

    pub fn setUserInterfaceLayoutDirection(_self: *@This(), _userInterfaceLayoutDirection: app_kit.UserInterfaceLayoutDirection) void {
        return objc.msgSend(_self, "setUserInterfaceLayoutDirection:", void, .{_userInterfaceLayoutDirection});
    }

    pub fn isCompatibleWithResponsiveScrolling() objc.BOOL {
        return objc.msgSend(Internal.class(), "isCompatibleWithResponsiveScrolling", objc.BOOL, .{});
    }

    pub fn preparedContentRect(_self: *@This()) foundation.Rect {
        return objc.msgSend(_self, "preparedContentRect", foundation.Rect, .{});
    }

    pub fn setPreparedContentRect(_self: *@This(), _preparedContentRect: foundation.Rect) void {
        return objc.msgSend(_self, "setPreparedContentRect:", void, .{_preparedContentRect});
    }

    pub fn allowsVibrancy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsVibrancy", objc.BOOL, .{});
    }

    pub fn initWithAnnotationReuseIdentifier(_self: *@This(), _annotation: ?*anyopaque, _reuseIdentifier: ?*foundation.String) *@This() {
        return objc.msgSend(_self, "initWithAnnotation:reuseIdentifier:", *@This(), .{ _annotation, _reuseIdentifier });
    }

    pub fn prepareForDisplay(_self: *@This()) void {
        return objc.msgSend(_self, "prepareForDisplay", void, .{});
    }

    pub fn setSelectedAnimated(_self: *@This(), _selected: objc.BOOL, _animated: objc.BOOL) void {
        return objc.msgSend(_self, "setSelected:animated:", void, .{ _selected, _animated });
    }

    pub fn setDragStateAnimated(_self: *@This(), _newDragState: AnnotationViewDragState, _animated: objc.BOOL) void {
        return objc.msgSend(_self, "setDragState:animated:", void, .{ _newDragState, _animated });
    }

    pub fn reuseIdentifier(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "reuseIdentifier", ?*foundation.String, .{});
    }

    pub fn annotation(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "annotation", ?*anyopaque, .{});
    }

    pub fn setAnnotation(_self: *@This(), _annotation: ?*anyopaque) void {
        return objc.msgSend(_self, "setAnnotation:", void, .{_annotation});
    }

    pub fn image(_self: *@This()) ?*app_kit.Image {
        return objc.msgSend(_self, "image", ?*app_kit.Image, .{});
    }

    pub fn setImage(_self: *@This(), _image: ?*app_kit.Image) void {
        return objc.msgSend(_self, "setImage:", void, .{_image});
    }

    pub fn centerOffset(_self: *@This()) core_foundation.CGPoint {
        return objc.msgSend(_self, "centerOffset", core_foundation.CGPoint, .{});
    }

    pub fn setCenterOffset(_self: *@This(), _centerOffset: core_foundation.CGPoint) void {
        return objc.msgSend(_self, "setCenterOffset:", void, .{_centerOffset});
    }

    pub fn accessoryOffset(_self: *@This()) core_foundation.CGPoint {
        return objc.msgSend(_self, "accessoryOffset", core_foundation.CGPoint, .{});
    }

    pub fn setAccessoryOffset(_self: *@This(), _accessoryOffset: core_foundation.CGPoint) void {
        return objc.msgSend(_self, "setAccessoryOffset:", void, .{_accessoryOffset});
    }

    pub fn calloutOffset(_self: *@This()) core_foundation.CGPoint {
        return objc.msgSend(_self, "calloutOffset", core_foundation.CGPoint, .{});
    }

    pub fn setCalloutOffset(_self: *@This(), _calloutOffset: core_foundation.CGPoint) void {
        return objc.msgSend(_self, "setCalloutOffset:", void, .{_calloutOffset});
    }

    pub fn leftCalloutOffset(_self: *@This()) core_foundation.CGPoint {
        return objc.msgSend(_self, "leftCalloutOffset", core_foundation.CGPoint, .{});
    }

    pub fn setLeftCalloutOffset(_self: *@This(), _leftCalloutOffset: core_foundation.CGPoint) void {
        return objc.msgSend(_self, "setLeftCalloutOffset:", void, .{_leftCalloutOffset});
    }

    pub fn rightCalloutOffset(_self: *@This()) core_foundation.CGPoint {
        return objc.msgSend(_self, "rightCalloutOffset", core_foundation.CGPoint, .{});
    }

    pub fn setRightCalloutOffset(_self: *@This(), _rightCalloutOffset: core_foundation.CGPoint) void {
        return objc.msgSend(_self, "setRightCalloutOffset:", void, .{_rightCalloutOffset});
    }

    pub fn isEnabled(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isEnabled", objc.BOOL, .{});
    }

    pub fn setEnabled(_self: *@This(), _enabled: objc.BOOL) void {
        return objc.msgSend(_self, "setEnabled:", void, .{_enabled});
    }

    pub fn isHighlighted(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isHighlighted", objc.BOOL, .{});
    }

    pub fn setHighlighted(_self: *@This(), _highlighted: objc.BOOL) void {
        return objc.msgSend(_self, "setHighlighted:", void, .{_highlighted});
    }

    pub fn isSelected(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isSelected", objc.BOOL, .{});
    }

    pub fn setSelected(_self: *@This(), _selected: objc.BOOL) void {
        return objc.msgSend(_self, "setSelected:", void, .{_selected});
    }

    pub fn canShowCallout(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "canShowCallout", objc.BOOL, .{});
    }

    pub fn setCanShowCallout(_self: *@This(), _canShowCallout: objc.BOOL) void {
        return objc.msgSend(_self, "setCanShowCallout:", void, .{_canShowCallout});
    }

    pub fn leftCalloutAccessoryView(_self: *@This()) ?*app_kit.View {
        return objc.msgSend(_self, "leftCalloutAccessoryView", ?*app_kit.View, .{});
    }

    pub fn setLeftCalloutAccessoryView(_self: *@This(), _leftCalloutAccessoryView: ?*app_kit.View) void {
        return objc.msgSend(_self, "setLeftCalloutAccessoryView:", void, .{_leftCalloutAccessoryView});
    }

    pub fn rightCalloutAccessoryView(_self: *@This()) ?*app_kit.View {
        return objc.msgSend(_self, "rightCalloutAccessoryView", ?*app_kit.View, .{});
    }

    pub fn setRightCalloutAccessoryView(_self: *@This(), _rightCalloutAccessoryView: ?*app_kit.View) void {
        return objc.msgSend(_self, "setRightCalloutAccessoryView:", void, .{_rightCalloutAccessoryView});
    }

    pub fn detailCalloutAccessoryView(_self: *@This()) ?*app_kit.View {
        return objc.msgSend(_self, "detailCalloutAccessoryView", ?*app_kit.View, .{});
    }

    pub fn setDetailCalloutAccessoryView(_self: *@This(), _detailCalloutAccessoryView: ?*app_kit.View) void {
        return objc.msgSend(_self, "setDetailCalloutAccessoryView:", void, .{_detailCalloutAccessoryView});
    }

    pub fn isDraggable(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isDraggable", objc.BOOL, .{});
    }

    pub fn setDraggable(_self: *@This(), _draggable: objc.BOOL) void {
        return objc.msgSend(_self, "setDraggable:", void, .{_draggable});
    }

    pub fn dragState(_self: *@This()) AnnotationViewDragState {
        return objc.msgSend(_self, "dragState", AnnotationViewDragState, .{});
    }

    pub fn setDragState(_self: *@This(), _dragState: AnnotationViewDragState) void {
        return objc.msgSend(_self, "setDragState:", void, .{_dragState});
    }

    pub fn clusteringIdentifier(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "clusteringIdentifier", ?*foundation.String, .{});
    }

    pub fn setClusteringIdentifier(_self: *@This(), _clusteringIdentifier: ?*foundation.String) void {
        return objc.msgSend(_self, "setClusteringIdentifier:", void, .{_clusteringIdentifier});
    }

    pub fn clusterAnnotationView(_self: *@This()) ?*AnnotationView {
        return objc.msgSend(_self, "clusterAnnotationView", ?*AnnotationView, .{});
    }

    pub fn displayPriority(_self: *@This()) FeatureDisplayPriority {
        return objc.msgSend(_self, "displayPriority", FeatureDisplayPriority, .{});
    }

    pub fn setDisplayPriority(_self: *@This(), _displayPriority: FeatureDisplayPriority) void {
        return objc.msgSend(_self, "setDisplayPriority:", void, .{_displayPriority});
    }

    pub fn zPriority(_self: *@This()) AnnotationViewZPriority {
        return objc.msgSend(_self, "zPriority", AnnotationViewZPriority, .{});
    }

    pub fn setZPriority(_self: *@This(), _zPriority: AnnotationViewZPriority) void {
        return objc.msgSend(_self, "setZPriority:", void, .{_zPriority});
    }

    pub fn selectedZPriority(_self: *@This()) AnnotationViewZPriority {
        return objc.msgSend(_self, "selectedZPriority", AnnotationViewZPriority, .{});
    }

    pub fn setSelectedZPriority(_self: *@This(), _selectedZPriority: AnnotationViewZPriority) void {
        return objc.msgSend(_self, "setSelectedZPriority:", void, .{_selectedZPriority});
    }

    pub fn collisionMode(_self: *@This()) AnnotationViewCollisionMode {
        return objc.msgSend(_self, "collisionMode", AnnotationViewCollisionMode, .{});
    }

    pub fn setCollisionMode(_self: *@This(), _collisionMode: AnnotationViewCollisionMode) void {
        return objc.msgSend(_self, "setCollisionMode:", void, .{_collisionMode});
    }
};

pub const MapType = objc.NSUInteger;
pub const MapType_Standard: objc.NSUInteger = 0;
pub const MapType_Satellite: objc.NSUInteger = 1;
pub const MapType_Hybrid: objc.NSUInteger = 2;
pub const MapType_SatelliteFlyover: objc.NSUInteger = 3;
pub const MapType_HybridFlyover: objc.NSUInteger = 4;
pub const MapType_MutedStandard: objc.NSUInteger = 5;

pub const ErrorCode = objc.NSUInteger;
pub const ErrorCode_Unknown: objc.NSUInteger = 1;
pub const ErrorCode_ServerFailure: objc.NSUInteger = 2;
pub const ErrorCode_LoadingThrottled: objc.NSUInteger = 3;
pub const ErrorCode_PlacemarkNotFound: objc.NSUInteger = 4;
pub const ErrorCode_DirectionsNotFound: objc.NSUInteger = 5;
pub const ErrorCode_DecodingFailed: objc.NSUInteger = 6;

pub const FeatureVisibility = objc.NSInteger;
pub const FeatureVisibility_Adaptive: objc.NSInteger = 0;
pub const FeatureVisibility_Hidden: objc.NSInteger = 1;
pub const FeatureVisibility_Visible: objc.NSInteger = 2;

pub const LocalSearchRegionPriority = objc.NSInteger;
pub const LocalSearchRegionPriority_Default: objc.NSInteger = 0;
pub const LocalSearchRegionPriority_Required: objc.NSInteger = 1;

/// https://developer.apple.com/documentation/MapKit/MKOverlay?language=objc
pub const Overlay = opaque {
    pub const Internal = objc.ExternProtocol(@This(), &.{Annotation});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "description", ?*foundation.String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "debugDescription", ?*foundation.String, .{});
    }

    pub fn setCoordinate(_self: *@This(), _newCoordinate: core_location.LocationCoordinate2D) void {
        return objc.msgSend(_self, "setCoordinate:", void, .{_newCoordinate});
    }

    pub fn coordinate(_self: *@This()) core_location.LocationCoordinate2D {
        return objc.msgSend(_self, "coordinate", core_location.LocationCoordinate2D, .{});
    }

    pub fn title(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "title", ?*foundation.String, .{});
    }

    pub fn subtitle(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "subtitle", ?*foundation.String, .{});
    }

    pub fn intersectsMapRect(_self: *@This(), _mapRect: MapRect) objc.BOOL {
        return objc.msgSend(_self, "intersectsMapRect:", objc.BOOL, .{_mapRect});
    }

    pub fn canReplaceMapContent(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "canReplaceMapContent", objc.BOOL, .{});
    }

    pub fn boundingMapRect(_self: *@This()) MapRect {
        return objc.msgSend(_self, "boundingMapRect", MapRect, .{});
    }
};

/// https://developer.apple.com/documentation/MapKit/MKOverlayRenderer?language=objc
pub const OverlayRenderer = opaque {
    pub const Internal = objc.ExternClass("MKOverlayRenderer", @This(), objc.NSObject, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "description", ?*foundation.String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "debugDescription", ?*foundation.String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*foundation.Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*foundation.MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*foundation.MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*foundation.MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*foundation.MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn initWithOverlay(_self: *@This(), _overlay: ?*anyopaque) *@This() {
        return objc.msgSend(_self, "initWithOverlay:", *@This(), .{_overlay});
    }

    pub fn pointForMapPoint(_self: *@This(), _mapPoint: MapPoint) core_foundation.CGPoint {
        return objc.msgSend(_self, "pointForMapPoint:", core_foundation.CGPoint, .{_mapPoint});
    }

    pub fn mapPointForPoint(_self: *@This(), _point: core_foundation.CGPoint) MapPoint {
        return objc.msgSend(_self, "mapPointForPoint:", MapPoint, .{_point});
    }

    pub fn rectForMapRect(_self: *@This(), _mapRect: MapRect) core_foundation.CGRect {
        return objc.msgSend(_self, "rectForMapRect:", core_foundation.CGRect, .{_mapRect});
    }

    pub fn mapRectForRect(_self: *@This(), _rect: core_foundation.CGRect) MapRect {
        return objc.msgSend(_self, "mapRectForRect:", MapRect, .{_rect});
    }

    pub fn canDrawMapRectZoomScale(_self: *@This(), _mapRect: MapRect, _zoomScale: ZoomScale) objc.BOOL {
        return objc.msgSend(_self, "canDrawMapRect:zoomScale:", objc.BOOL, .{ _mapRect, _zoomScale });
    }

    pub fn drawMapRectZoomScaleInContext(_self: *@This(), _mapRect: MapRect, _zoomScale: ZoomScale, _context: core_graphics.ContextRef) void {
        return objc.msgSend(_self, "drawMapRect:zoomScale:inContext:", void, .{ _mapRect, _zoomScale, _context });
    }

    pub fn setNeedsDisplay(_self: *@This()) void {
        return objc.msgSend(_self, "setNeedsDisplay", void, .{});
    }

    pub fn setNeedsDisplayInMapRect(_self: *@This(), _mapRect: MapRect) void {
        return objc.msgSend(_self, "setNeedsDisplayInMapRect:", void, .{_mapRect});
    }

    pub fn setNeedsDisplayInMapRectZoomScale(_self: *@This(), _mapRect: MapRect, _zoomScale: ZoomScale) void {
        return objc.msgSend(_self, "setNeedsDisplayInMapRect:zoomScale:", void, .{ _mapRect, _zoomScale });
    }

    pub fn overlay(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "overlay", ?*anyopaque, .{});
    }

    pub fn alpha(_self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(_self, "alpha", core_foundation.CGFloat, .{});
    }

    pub fn setAlpha(_self: *@This(), _alpha: core_foundation.CGFloat) void {
        return objc.msgSend(_self, "setAlpha:", void, .{_alpha});
    }

    pub fn contentScaleFactor(_self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(_self, "contentScaleFactor", core_foundation.CGFloat, .{});
    }

    pub fn blendMode(_self: *@This()) core_graphics.BlendMode {
        return objc.msgSend(_self, "blendMode", core_graphics.BlendMode, .{});
    }

    pub fn setBlendMode(_self: *@This(), _blendMode: core_graphics.BlendMode) void {
        return objc.msgSend(_self, "setBlendMode:", void, .{_blendMode});
    }
};

extern "MapKit" fn MKRoadWidthAtZoomScale(zoomScale: ZoomScale) callconv(.C) core_foundation.CGFloat;
pub const roadWidthAtZoomScale = MKRoadWidthAtZoomScale;

/// https://developer.apple.com/documentation/MapKit/MKSelectionAccessory?language=objc
pub const SelectionAccessory = opaque {
    pub const Internal = objc.ExternClass("MKSelectionAccessory", @This(), objc.NSObject, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "description", ?*foundation.String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "debugDescription", ?*foundation.String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*foundation.Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*foundation.MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*foundation.MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*foundation.MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*foundation.MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn mapItemDetailWithPresentationStyle(_presentationStyle: ?*MapItemDetailSelectionAccessoryPresentationStyle) ?*SelectionAccessory {
        return objc.msgSend(Internal.class(), "mapItemDetailWithPresentationStyle:", ?*SelectionAccessory, .{_presentationStyle});
    }
};

pub const MapItemDetailSelectionAccessoryCalloutStyle = objc.NSInteger;
pub const MapItemDetailSelectionAccessoryCalloutStyle_Automatic: objc.NSInteger = 0;
pub const MapItemDetailSelectionAccessoryCalloutStyle_Full: objc.NSInteger = 1;
pub const MapItemDetailSelectionAccessoryCalloutStyle_Compact: objc.NSInteger = 2;

/// https://developer.apple.com/documentation/MapKit/MKMapItemDetailSelectionAccessoryPresentationStyle?language=objc
pub const MapItemDetailSelectionAccessoryPresentationStyle = opaque {
    pub const Internal = objc.ExternClass("MKMapItemDetailSelectionAccessoryPresentationStyle", @This(), objc.NSObject, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "description", ?*foundation.String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "debugDescription", ?*foundation.String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*foundation.Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*foundation.MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*foundation.MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*foundation.MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*foundation.MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn automaticWithPresentationViewController(_presentationViewController: ?*app_kit.ViewController) ?*MapItemDetailSelectionAccessoryPresentationStyle {
        return objc.msgSend(Internal.class(), "automaticWithPresentationViewController:", ?*MapItemDetailSelectionAccessoryPresentationStyle, .{_presentationViewController});
    }

    pub fn calloutWithCalloutStyle(_style: MapItemDetailSelectionAccessoryCalloutStyle) ?*MapItemDetailSelectionAccessoryPresentationStyle {
        return objc.msgSend(Internal.class(), "calloutWithCalloutStyle:", ?*MapItemDetailSelectionAccessoryPresentationStyle, .{_style});
    }

    pub fn sheetPresentedFromViewController(_viewController: ?*app_kit.ViewController) ?*MapItemDetailSelectionAccessoryPresentationStyle {
        return objc.msgSend(Internal.class(), "sheetPresentedFromViewController:", ?*MapItemDetailSelectionAccessoryPresentationStyle, .{_viewController});
    }

    pub fn callout() ?*MapItemDetailSelectionAccessoryPresentationStyle {
        return objc.msgSend(Internal.class(), "callout", ?*MapItemDetailSelectionAccessoryPresentationStyle, .{});
    }

    pub fn openInMaps() ?*MapItemDetailSelectionAccessoryPresentationStyle {
        return objc.msgSend(Internal.class(), "openInMaps", ?*MapItemDetailSelectionAccessoryPresentationStyle, .{});
    }
};

pub const OverlayLevel = objc.NSInteger;
pub const OverlayLevel_AboveRoads: objc.NSInteger = 0;
pub const OverlayLevel_AboveLabels: objc.NSInteger = 1;

pub const UserTrackingMode = objc.NSInteger;
pub const UserTrackingMode_None: objc.NSInteger = 0;
pub const UserTrackingMode_Follow: objc.NSInteger = 1;
pub const UserTrackingMode_FollowWithHeading: objc.NSInteger = 2;

/// https://developer.apple.com/documentation/MapKit/MKMapView?language=objc
pub const MapView = opaque {
    pub const Internal = objc.ExternClass("MKMapView", @This(), app_kit.View, &.{foundation.Coding});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "description", ?*foundation.String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "debugDescription", ?*foundation.String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*foundation.Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*foundation.MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*foundation.MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*foundation.MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*foundation.MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*foundation.Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*foundation.Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn tryToPerformWith(_self: *@This(), _action: objc.Selector, _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "tryToPerform:with:", objc.BOOL, .{ _action, _object });
    }

    pub fn performKeyEquivalent(_self: *@This(), _event: ?*app_kit.Event) objc.BOOL {
        return objc.msgSend(_self, "performKeyEquivalent:", objc.BOOL, .{_event});
    }

    pub fn validRequestorForSendTypeReturnType(_self: *@This(), _sendType: app_kit.PasteboardType, _returnType: app_kit.PasteboardType) ?objc.Id {
        return objc.msgSend(_self, "validRequestorForSendType:returnType:", ?objc.Id, .{ _sendType, _returnType });
    }

    pub fn mouseDown(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "mouseDown:", void, .{_event});
    }

    pub fn rightMouseDown(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "rightMouseDown:", void, .{_event});
    }

    pub fn otherMouseDown(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "otherMouseDown:", void, .{_event});
    }

    pub fn mouseUp(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "mouseUp:", void, .{_event});
    }

    pub fn rightMouseUp(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "rightMouseUp:", void, .{_event});
    }

    pub fn otherMouseUp(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "otherMouseUp:", void, .{_event});
    }

    pub fn mouseMoved(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "mouseMoved:", void, .{_event});
    }

    pub fn mouseDragged(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "mouseDragged:", void, .{_event});
    }

    pub fn scrollWheel(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "scrollWheel:", void, .{_event});
    }

    pub fn rightMouseDragged(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "rightMouseDragged:", void, .{_event});
    }

    pub fn otherMouseDragged(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "otherMouseDragged:", void, .{_event});
    }

    pub fn mouseEntered(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "mouseEntered:", void, .{_event});
    }

    pub fn mouseExited(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "mouseExited:", void, .{_event});
    }

    pub fn keyDown(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "keyDown:", void, .{_event});
    }

    pub fn keyUp(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "keyUp:", void, .{_event});
    }

    pub fn flagsChanged(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "flagsChanged:", void, .{_event});
    }

    pub fn tabletPoint(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "tabletPoint:", void, .{_event});
    }

    pub fn tabletProximity(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "tabletProximity:", void, .{_event});
    }

    pub fn cursorUpdate(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "cursorUpdate:", void, .{_event});
    }

    pub fn magnifyWithEvent(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "magnifyWithEvent:", void, .{_event});
    }

    pub fn rotateWithEvent(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "rotateWithEvent:", void, .{_event});
    }

    pub fn swipeWithEvent(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "swipeWithEvent:", void, .{_event});
    }

    pub fn beginGestureWithEvent(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "beginGestureWithEvent:", void, .{_event});
    }

    pub fn endGestureWithEvent(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "endGestureWithEvent:", void, .{_event});
    }

    pub fn smartMagnifyWithEvent(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "smartMagnifyWithEvent:", void, .{_event});
    }

    pub fn changeModeWithEvent(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "changeModeWithEvent:", void, .{_event});
    }

    pub fn touchesBeganWithEvent(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "touchesBeganWithEvent:", void, .{_event});
    }

    pub fn touchesMovedWithEvent(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "touchesMovedWithEvent:", void, .{_event});
    }

    pub fn touchesEndedWithEvent(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "touchesEndedWithEvent:", void, .{_event});
    }

    pub fn touchesCancelledWithEvent(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "touchesCancelledWithEvent:", void, .{_event});
    }

    pub fn quickLookWithEvent(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "quickLookWithEvent:", void, .{_event});
    }

    pub fn pressureChangeWithEvent(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "pressureChangeWithEvent:", void, .{_event});
    }

    pub fn contextMenuKeyDown(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "contextMenuKeyDown:", void, .{_event});
    }

    pub fn noResponderFor(_self: *@This(), _eventSelector: objc.Selector) void {
        return objc.msgSend(_self, "noResponderFor:", void, .{_eventSelector});
    }

    pub fn becomeFirstResponder(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "becomeFirstResponder", objc.BOOL, .{});
    }

    pub fn resignFirstResponder(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "resignFirstResponder", objc.BOOL, .{});
    }

    pub fn interpretKeyEvents(_self: *@This(), _eventArray: ?*anyopaque) void {
        return objc.msgSend(_self, "interpretKeyEvents:", void, .{_eventArray});
    }

    pub fn flushBufferedKeyEvents(_self: *@This()) void {
        return objc.msgSend(_self, "flushBufferedKeyEvents", void, .{});
    }

    pub fn showContextHelp(_self: *@This(), _sender: ?objc.Id) void {
        return objc.msgSend(_self, "showContextHelp:", void, .{_sender});
    }

    pub fn helpRequested(_self: *@This(), _eventPtr: ?*app_kit.Event) void {
        return objc.msgSend(_self, "helpRequested:", void, .{_eventPtr});
    }

    pub fn shouldBeTreatedAsInkEvent(_self: *@This(), _event: ?*app_kit.Event) objc.BOOL {
        return objc.msgSend(_self, "shouldBeTreatedAsInkEvent:", objc.BOOL, .{_event});
    }

    pub fn wantsScrollEventsForSwipeTrackingOnAxis(_self: *@This(), _axis: app_kit.EventGestureAxis) objc.BOOL {
        return objc.msgSend(_self, "wantsScrollEventsForSwipeTrackingOnAxis:", objc.BOOL, .{_axis});
    }

    pub fn wantsForwardedScrollEventsForAxis(_self: *@This(), _axis: app_kit.EventGestureAxis) objc.BOOL {
        return objc.msgSend(_self, "wantsForwardedScrollEventsForAxis:", objc.BOOL, .{_axis});
    }

    pub fn supplementalTargetForActionSender(_self: *@This(), _action: objc.Selector, _sender: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "supplementalTargetForAction:sender:", ?objc.Id, .{ _action, _sender });
    }

    pub fn nextResponder(_self: *@This()) ?*app_kit.Responder {
        return objc.msgSend(_self, "nextResponder", ?*app_kit.Responder, .{});
    }

    pub fn setNextResponder(_self: *@This(), _nextResponder: ?*app_kit.Responder) void {
        return objc.msgSend(_self, "setNextResponder:", void, .{_nextResponder});
    }

    pub fn acceptsFirstResponder(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "acceptsFirstResponder", objc.BOOL, .{});
    }

    pub fn menu(_self: *@This()) ?*app_kit.Menu {
        return objc.msgSend(_self, "menu", ?*app_kit.Menu, .{});
    }

    pub fn setMenu(_self: *@This(), _menu: ?*app_kit.Menu) void {
        return objc.msgSend(_self, "setMenu:", void, .{_menu});
    }

    pub fn animator(_self: *@This()) *@This() {
        return objc.msgSend(_self, "animator", *@This(), .{});
    }

    pub fn animationForKey(_self: *@This(), _key: app_kit.AnimatablePropertyKey) ?objc.Id {
        return objc.msgSend(_self, "animationForKey:", ?objc.Id, .{_key});
    }

    pub fn defaultAnimationForKey(_key: app_kit.AnimatablePropertyKey) ?objc.Id {
        return objc.msgSend(Internal.class(), "defaultAnimationForKey:", ?objc.Id, .{_key});
    }

    pub fn animations(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "animations", ?*anyopaque, .{});
    }

    pub fn setAnimations(_self: *@This(), _animations: ?*anyopaque) void {
        return objc.msgSend(_self, "setAnimations:", void, .{_animations});
    }

    pub fn identifier(_self: *@This()) app_kit.UserInterfaceItemIdentifier {
        return objc.msgSend(_self, "identifier", app_kit.UserInterfaceItemIdentifier, .{});
    }

    pub fn setIdentifier(_self: *@This(), _identifier: app_kit.UserInterfaceItemIdentifier) void {
        return objc.msgSend(_self, "setIdentifier:", void, .{_identifier});
    }

    pub fn draggingEntered(_self: *@This(), _sender: ?*anyopaque) app_kit.DragOperation {
        return objc.msgSend(_self, "draggingEntered:", app_kit.DragOperation, .{_sender});
    }

    pub fn draggingUpdated(_self: *@This(), _sender: ?*anyopaque) app_kit.DragOperation {
        return objc.msgSend(_self, "draggingUpdated:", app_kit.DragOperation, .{_sender});
    }

    pub fn draggingExited(_self: *@This(), _sender: ?*anyopaque) void {
        return objc.msgSend(_self, "draggingExited:", void, .{_sender});
    }

    pub fn prepareForDragOperation(_self: *@This(), _sender: ?*anyopaque) objc.BOOL {
        return objc.msgSend(_self, "prepareForDragOperation:", objc.BOOL, .{_sender});
    }

    pub fn performDragOperation(_self: *@This(), _sender: ?*anyopaque) objc.BOOL {
        return objc.msgSend(_self, "performDragOperation:", objc.BOOL, .{_sender});
    }

    pub fn concludeDragOperation(_self: *@This(), _sender: ?*anyopaque) void {
        return objc.msgSend(_self, "concludeDragOperation:", void, .{_sender});
    }

    pub fn draggingEnded(_self: *@This(), _sender: ?*anyopaque) void {
        return objc.msgSend(_self, "draggingEnded:", void, .{_sender});
    }

    pub fn wantsPeriodicDraggingUpdates(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "wantsPeriodicDraggingUpdates", objc.BOOL, .{});
    }

    pub fn updateDraggingItemsForDrag(_self: *@This(), _sender: ?*anyopaque) void {
        return objc.msgSend(_self, "updateDraggingItemsForDrag:", void, .{_sender});
    }

    pub fn appearance(_self: *@This()) ?*app_kit.Appearance {
        return objc.msgSend(_self, "appearance", ?*app_kit.Appearance, .{});
    }

    pub fn setAppearance(_self: *@This(), _appearance: ?*app_kit.Appearance) void {
        return objc.msgSend(_self, "setAppearance:", void, .{_appearance});
    }

    pub fn effectiveAppearance(_self: *@This()) ?*app_kit.Appearance {
        return objc.msgSend(_self, "effectiveAppearance", ?*app_kit.Appearance, .{});
    }

    pub fn accessibilityFrame(_self: *@This()) foundation.Rect {
        return objc.msgSend(_self, "accessibilityFrame", foundation.Rect, .{});
    }

    pub fn accessibilityParent(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityParent", ?objc.Id, .{});
    }

    pub fn isAccessibilityFocused(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isAccessibilityFocused", objc.BOOL, .{});
    }

    pub fn accessibilityIdentifier(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "accessibilityIdentifier", ?*foundation.String, .{});
    }

    pub fn accessibilityLayoutPointForScreenPoint(_self: *@This(), _point: foundation.Point) foundation.Point {
        return objc.msgSend(_self, "accessibilityLayoutPointForScreenPoint:", foundation.Point, .{_point});
    }

    pub fn accessibilityLayoutSizeForScreenSize(_self: *@This(), _size: foundation.Size) foundation.Size {
        return objc.msgSend(_self, "accessibilityLayoutSizeForScreenSize:", foundation.Size, .{_size});
    }

    pub fn accessibilityScreenPointForLayoutPoint(_self: *@This(), _point: foundation.Point) foundation.Point {
        return objc.msgSend(_self, "accessibilityScreenPointForLayoutPoint:", foundation.Point, .{_point});
    }

    pub fn accessibilityScreenSizeForLayoutSize(_self: *@This(), _size: foundation.Size) foundation.Size {
        return objc.msgSend(_self, "accessibilityScreenSizeForLayoutSize:", foundation.Size, .{_size});
    }

    pub fn accessibilityCellForColumnRow(_self: *@This(), _column: objc.NSInteger, _row: objc.NSInteger) ?objc.Id {
        return objc.msgSend(_self, "accessibilityCellForColumn:row:", ?objc.Id, .{ _column, _row });
    }

    pub fn accessibilityAttributedStringForRange(_self: *@This(), _range: foundation.Range) ?*foundation.AttributedString {
        return objc.msgSend(_self, "accessibilityAttributedStringForRange:", ?*foundation.AttributedString, .{_range});
    }

    pub fn accessibilityRangeForLine(_self: *@This(), _line: objc.NSInteger) foundation.Range {
        return objc.msgSend(_self, "accessibilityRangeForLine:", foundation.Range, .{_line});
    }

    pub fn accessibilityStringForRange(_self: *@This(), _range: foundation.Range) ?*foundation.String {
        return objc.msgSend(_self, "accessibilityStringForRange:", ?*foundation.String, .{_range});
    }

    pub fn accessibilityRangeForPosition(_self: *@This(), _point: foundation.Point) foundation.Range {
        return objc.msgSend(_self, "accessibilityRangeForPosition:", foundation.Range, .{_point});
    }

    pub fn accessibilityRangeForIndex(_self: *@This(), _index: objc.NSInteger) foundation.Range {
        return objc.msgSend(_self, "accessibilityRangeForIndex:", foundation.Range, .{_index});
    }

    pub fn accessibilityFrameForRange(_self: *@This(), _range: foundation.Range) foundation.Rect {
        return objc.msgSend(_self, "accessibilityFrameForRange:", foundation.Rect, .{_range});
    }

    pub fn accessibilityRTFForRange(_self: *@This(), _range: foundation.Range) ?*foundation.Data {
        return objc.msgSend(_self, "accessibilityRTFForRange:", ?*foundation.Data, .{_range});
    }

    pub fn accessibilityStyleRangeForIndex(_self: *@This(), _index: objc.NSInteger) foundation.Range {
        return objc.msgSend(_self, "accessibilityStyleRangeForIndex:", foundation.Range, .{_index});
    }

    pub fn accessibilityLineForIndex(_self: *@This(), _index: objc.NSInteger) objc.NSInteger {
        return objc.msgSend(_self, "accessibilityLineForIndex:", objc.NSInteger, .{_index});
    }

    pub fn accessibilityPerformCancel(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "accessibilityPerformCancel", objc.BOOL, .{});
    }

    pub fn accessibilityPerformConfirm(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "accessibilityPerformConfirm", objc.BOOL, .{});
    }

    pub fn accessibilityPerformDecrement(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "accessibilityPerformDecrement", objc.BOOL, .{});
    }

    pub fn accessibilityPerformDelete(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "accessibilityPerformDelete", objc.BOOL, .{});
    }

    pub fn accessibilityPerformIncrement(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "accessibilityPerformIncrement", objc.BOOL, .{});
    }

    pub fn accessibilityPerformPick(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "accessibilityPerformPick", objc.BOOL, .{});
    }

    pub fn accessibilityPerformPress(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "accessibilityPerformPress", objc.BOOL, .{});
    }

    pub fn accessibilityPerformRaise(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "accessibilityPerformRaise", objc.BOOL, .{});
    }

    pub fn accessibilityPerformShowAlternateUI(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "accessibilityPerformShowAlternateUI", objc.BOOL, .{});
    }

    pub fn accessibilityPerformShowDefaultUI(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "accessibilityPerformShowDefaultUI", objc.BOOL, .{});
    }

    pub fn accessibilityPerformShowMenu(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "accessibilityPerformShowMenu", objc.BOOL, .{});
    }

    pub fn isAccessibilitySelectorAllowed(_self: *@This(), _selector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "isAccessibilitySelectorAllowed:", objc.BOOL, .{_selector});
    }

    pub fn isAccessibilityElement(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isAccessibilityElement", objc.BOOL, .{});
    }

    pub fn setAccessibilityElement(_self: *@This(), _accessibilityElement: objc.BOOL) void {
        return objc.msgSend(_self, "setAccessibilityElement:", void, .{_accessibilityElement});
    }

    pub fn setAccessibilityFrame(_self: *@This(), _accessibilityFrame: foundation.Rect) void {
        return objc.msgSend(_self, "setAccessibilityFrame:", void, .{_accessibilityFrame});
    }

    pub fn setAccessibilityFocused(_self: *@This(), _accessibilityFocused: objc.BOOL) void {
        return objc.msgSend(_self, "setAccessibilityFocused:", void, .{_accessibilityFocused});
    }

    pub fn accessibilityActivationPoint(_self: *@This()) foundation.Point {
        return objc.msgSend(_self, "accessibilityActivationPoint", foundation.Point, .{});
    }

    pub fn setAccessibilityActivationPoint(_self: *@This(), _accessibilityActivationPoint: foundation.Point) void {
        return objc.msgSend(_self, "setAccessibilityActivationPoint:", void, .{_accessibilityActivationPoint});
    }

    pub fn accessibilityTopLevelUIElement(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityTopLevelUIElement", ?objc.Id, .{});
    }

    pub fn setAccessibilityTopLevelUIElement(_self: *@This(), _accessibilityTopLevelUIElement: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityTopLevelUIElement:", void, .{_accessibilityTopLevelUIElement});
    }

    pub fn accessibilityURL(_self: *@This()) ?*foundation.URL {
        return objc.msgSend(_self, "accessibilityURL", ?*foundation.URL, .{});
    }

    pub fn setAccessibilityURL(_self: *@This(), _accessibilityURL: ?*foundation.URL) void {
        return objc.msgSend(_self, "setAccessibilityURL:", void, .{_accessibilityURL});
    }

    pub fn accessibilityValue(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityValue", ?objc.Id, .{});
    }

    pub fn setAccessibilityValue(_self: *@This(), _accessibilityValue: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityValue:", void, .{_accessibilityValue});
    }

    pub fn accessibilityValueDescription(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "accessibilityValueDescription", ?*foundation.String, .{});
    }

    pub fn setAccessibilityValueDescription(_self: *@This(), _accessibilityValueDescription: ?*foundation.String) void {
        return objc.msgSend(_self, "setAccessibilityValueDescription:", void, .{_accessibilityValueDescription});
    }

    pub fn accessibilityVisibleChildren(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilityVisibleChildren", ?*foundation.Array, .{});
    }

    pub fn setAccessibilityVisibleChildren(_self: *@This(), _accessibilityVisibleChildren: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilityVisibleChildren:", void, .{_accessibilityVisibleChildren});
    }

    pub fn accessibilitySubrole(_self: *@This()) app_kit.AccessibilitySubrole {
        return objc.msgSend(_self, "accessibilitySubrole", app_kit.AccessibilitySubrole, .{});
    }

    pub fn setAccessibilitySubrole(_self: *@This(), _accessibilitySubrole: app_kit.AccessibilitySubrole) void {
        return objc.msgSend(_self, "setAccessibilitySubrole:", void, .{_accessibilitySubrole});
    }

    pub fn accessibilityTitle(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "accessibilityTitle", ?*foundation.String, .{});
    }

    pub fn setAccessibilityTitle(_self: *@This(), _accessibilityTitle: ?*foundation.String) void {
        return objc.msgSend(_self, "setAccessibilityTitle:", void, .{_accessibilityTitle});
    }

    pub fn accessibilityTitleUIElement(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityTitleUIElement", ?objc.Id, .{});
    }

    pub fn setAccessibilityTitleUIElement(_self: *@This(), _accessibilityTitleUIElement: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityTitleUIElement:", void, .{_accessibilityTitleUIElement});
    }

    pub fn accessibilityNextContents(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilityNextContents", ?*foundation.Array, .{});
    }

    pub fn setAccessibilityNextContents(_self: *@This(), _accessibilityNextContents: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilityNextContents:", void, .{_accessibilityNextContents});
    }

    pub fn accessibilityOrientation(_self: *@This()) app_kit.AccessibilityOrientation {
        return objc.msgSend(_self, "accessibilityOrientation", app_kit.AccessibilityOrientation, .{});
    }

    pub fn setAccessibilityOrientation(_self: *@This(), _accessibilityOrientation: app_kit.AccessibilityOrientation) void {
        return objc.msgSend(_self, "setAccessibilityOrientation:", void, .{_accessibilityOrientation});
    }

    pub fn accessibilityOverflowButton(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityOverflowButton", ?objc.Id, .{});
    }

    pub fn setAccessibilityOverflowButton(_self: *@This(), _accessibilityOverflowButton: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityOverflowButton:", void, .{_accessibilityOverflowButton});
    }

    pub fn setAccessibilityParent(_self: *@This(), _accessibilityParent: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityParent:", void, .{_accessibilityParent});
    }

    pub fn accessibilityPlaceholderValue(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "accessibilityPlaceholderValue", ?*foundation.String, .{});
    }

    pub fn setAccessibilityPlaceholderValue(_self: *@This(), _accessibilityPlaceholderValue: ?*foundation.String) void {
        return objc.msgSend(_self, "setAccessibilityPlaceholderValue:", void, .{_accessibilityPlaceholderValue});
    }

    pub fn accessibilityPreviousContents(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilityPreviousContents", ?*foundation.Array, .{});
    }

    pub fn setAccessibilityPreviousContents(_self: *@This(), _accessibilityPreviousContents: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilityPreviousContents:", void, .{_accessibilityPreviousContents});
    }

    pub fn accessibilityRole(_self: *@This()) app_kit.AccessibilityRole {
        return objc.msgSend(_self, "accessibilityRole", app_kit.AccessibilityRole, .{});
    }

    pub fn setAccessibilityRole(_self: *@This(), _accessibilityRole: app_kit.AccessibilityRole) void {
        return objc.msgSend(_self, "setAccessibilityRole:", void, .{_accessibilityRole});
    }

    pub fn accessibilityRoleDescription(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "accessibilityRoleDescription", ?*foundation.String, .{});
    }

    pub fn setAccessibilityRoleDescription(_self: *@This(), _accessibilityRoleDescription: ?*foundation.String) void {
        return objc.msgSend(_self, "setAccessibilityRoleDescription:", void, .{_accessibilityRoleDescription});
    }

    pub fn accessibilitySearchButton(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilitySearchButton", ?objc.Id, .{});
    }

    pub fn setAccessibilitySearchButton(_self: *@This(), _accessibilitySearchButton: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilitySearchButton:", void, .{_accessibilitySearchButton});
    }

    pub fn accessibilitySearchMenu(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilitySearchMenu", ?objc.Id, .{});
    }

    pub fn setAccessibilitySearchMenu(_self: *@This(), _accessibilitySearchMenu: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilitySearchMenu:", void, .{_accessibilitySearchMenu});
    }

    pub fn isAccessibilitySelected(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isAccessibilitySelected", objc.BOOL, .{});
    }

    pub fn setAccessibilitySelected(_self: *@This(), _accessibilitySelected: objc.BOOL) void {
        return objc.msgSend(_self, "setAccessibilitySelected:", void, .{_accessibilitySelected});
    }

    pub fn accessibilitySelectedChildren(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilitySelectedChildren", ?*foundation.Array, .{});
    }

    pub fn setAccessibilitySelectedChildren(_self: *@This(), _accessibilitySelectedChildren: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilitySelectedChildren:", void, .{_accessibilitySelectedChildren});
    }

    pub fn accessibilityServesAsTitleForUIElements(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilityServesAsTitleForUIElements", ?*foundation.Array, .{});
    }

    pub fn setAccessibilityServesAsTitleForUIElements(_self: *@This(), _accessibilityServesAsTitleForUIElements: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilityServesAsTitleForUIElements:", void, .{_accessibilityServesAsTitleForUIElements});
    }

    pub fn accessibilityShownMenu(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityShownMenu", ?objc.Id, .{});
    }

    pub fn setAccessibilityShownMenu(_self: *@This(), _accessibilityShownMenu: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityShownMenu:", void, .{_accessibilityShownMenu});
    }

    pub fn accessibilityMinValue(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityMinValue", ?objc.Id, .{});
    }

    pub fn setAccessibilityMinValue(_self: *@This(), _accessibilityMinValue: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityMinValue:", void, .{_accessibilityMinValue});
    }

    pub fn accessibilityMaxValue(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityMaxValue", ?objc.Id, .{});
    }

    pub fn setAccessibilityMaxValue(_self: *@This(), _accessibilityMaxValue: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityMaxValue:", void, .{_accessibilityMaxValue});
    }

    pub fn accessibilityLinkedUIElements(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilityLinkedUIElements", ?*foundation.Array, .{});
    }

    pub fn setAccessibilityLinkedUIElements(_self: *@This(), _accessibilityLinkedUIElements: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilityLinkedUIElements:", void, .{_accessibilityLinkedUIElements});
    }

    pub fn accessibilityWindow(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityWindow", ?objc.Id, .{});
    }

    pub fn setAccessibilityWindow(_self: *@This(), _accessibilityWindow: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityWindow:", void, .{_accessibilityWindow});
    }

    pub fn setAccessibilityIdentifier(_self: *@This(), _accessibilityIdentifier: ?*foundation.String) void {
        return objc.msgSend(_self, "setAccessibilityIdentifier:", void, .{_accessibilityIdentifier});
    }

    pub fn accessibilityHelp(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "accessibilityHelp", ?*foundation.String, .{});
    }

    pub fn setAccessibilityHelp(_self: *@This(), _accessibilityHelp: ?*foundation.String) void {
        return objc.msgSend(_self, "setAccessibilityHelp:", void, .{_accessibilityHelp});
    }

    pub fn accessibilityFilename(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "accessibilityFilename", ?*foundation.String, .{});
    }

    pub fn setAccessibilityFilename(_self: *@This(), _accessibilityFilename: ?*foundation.String) void {
        return objc.msgSend(_self, "setAccessibilityFilename:", void, .{_accessibilityFilename});
    }

    pub fn isAccessibilityExpanded(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isAccessibilityExpanded", objc.BOOL, .{});
    }

    pub fn setAccessibilityExpanded(_self: *@This(), _accessibilityExpanded: objc.BOOL) void {
        return objc.msgSend(_self, "setAccessibilityExpanded:", void, .{_accessibilityExpanded});
    }

    pub fn isAccessibilityEdited(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isAccessibilityEdited", objc.BOOL, .{});
    }

    pub fn setAccessibilityEdited(_self: *@This(), _accessibilityEdited: objc.BOOL) void {
        return objc.msgSend(_self, "setAccessibilityEdited:", void, .{_accessibilityEdited});
    }

    pub fn isAccessibilityEnabled(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isAccessibilityEnabled", objc.BOOL, .{});
    }

    pub fn setAccessibilityEnabled(_self: *@This(), _accessibilityEnabled: objc.BOOL) void {
        return objc.msgSend(_self, "setAccessibilityEnabled:", void, .{_accessibilityEnabled});
    }

    pub fn accessibilityChildren(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilityChildren", ?*foundation.Array, .{});
    }

    pub fn setAccessibilityChildren(_self: *@This(), _accessibilityChildren: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilityChildren:", void, .{_accessibilityChildren});
    }

    pub fn accessibilityChildrenInNavigationOrder(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "accessibilityChildrenInNavigationOrder", ?*anyopaque, .{});
    }

    pub fn setAccessibilityChildrenInNavigationOrder(_self: *@This(), _accessibilityChildrenInNavigationOrder: ?*anyopaque) void {
        return objc.msgSend(_self, "setAccessibilityChildrenInNavigationOrder:", void, .{_accessibilityChildrenInNavigationOrder});
    }

    pub fn accessibilityClearButton(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityClearButton", ?objc.Id, .{});
    }

    pub fn setAccessibilityClearButton(_self: *@This(), _accessibilityClearButton: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityClearButton:", void, .{_accessibilityClearButton});
    }

    pub fn accessibilityCancelButton(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityCancelButton", ?objc.Id, .{});
    }

    pub fn setAccessibilityCancelButton(_self: *@This(), _accessibilityCancelButton: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityCancelButton:", void, .{_accessibilityCancelButton});
    }

    pub fn isAccessibilityProtectedContent(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isAccessibilityProtectedContent", objc.BOOL, .{});
    }

    pub fn setAccessibilityProtectedContent(_self: *@This(), _accessibilityProtectedContent: objc.BOOL) void {
        return objc.msgSend(_self, "setAccessibilityProtectedContent:", void, .{_accessibilityProtectedContent});
    }

    pub fn accessibilityContents(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilityContents", ?*foundation.Array, .{});
    }

    pub fn setAccessibilityContents(_self: *@This(), _accessibilityContents: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilityContents:", void, .{_accessibilityContents});
    }

    pub fn accessibilityLabel(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "accessibilityLabel", ?*foundation.String, .{});
    }

    pub fn setAccessibilityLabel(_self: *@This(), _accessibilityLabel: ?*foundation.String) void {
        return objc.msgSend(_self, "setAccessibilityLabel:", void, .{_accessibilityLabel});
    }

    pub fn isAccessibilityAlternateUIVisible(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isAccessibilityAlternateUIVisible", objc.BOOL, .{});
    }

    pub fn setAccessibilityAlternateUIVisible(_self: *@This(), _accessibilityAlternateUIVisible: objc.BOOL) void {
        return objc.msgSend(_self, "setAccessibilityAlternateUIVisible:", void, .{_accessibilityAlternateUIVisible});
    }

    pub fn accessibilitySharedFocusElements(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilitySharedFocusElements", ?*foundation.Array, .{});
    }

    pub fn setAccessibilitySharedFocusElements(_self: *@This(), _accessibilitySharedFocusElements: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilitySharedFocusElements:", void, .{_accessibilitySharedFocusElements});
    }

    pub fn isAccessibilityRequired(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isAccessibilityRequired", objc.BOOL, .{});
    }

    pub fn setAccessibilityRequired(_self: *@This(), _accessibilityRequired: objc.BOOL) void {
        return objc.msgSend(_self, "setAccessibilityRequired:", void, .{_accessibilityRequired});
    }

    pub fn accessibilityCustomRotors(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "accessibilityCustomRotors", ?*anyopaque, .{});
    }

    pub fn setAccessibilityCustomRotors(_self: *@This(), _accessibilityCustomRotors: ?*anyopaque) void {
        return objc.msgSend(_self, "setAccessibilityCustomRotors:", void, .{_accessibilityCustomRotors});
    }

    pub fn accessibilityUserInputLabels(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "accessibilityUserInputLabels", ?*anyopaque, .{});
    }

    pub fn setAccessibilityUserInputLabels(_self: *@This(), _accessibilityUserInputLabels: ?*anyopaque) void {
        return objc.msgSend(_self, "setAccessibilityUserInputLabels:", void, .{_accessibilityUserInputLabels});
    }

    pub fn accessibilityAttributedUserInputLabels(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "accessibilityAttributedUserInputLabels", ?*anyopaque, .{});
    }

    pub fn setAccessibilityAttributedUserInputLabels(_self: *@This(), _accessibilityAttributedUserInputLabels: ?*anyopaque) void {
        return objc.msgSend(_self, "setAccessibilityAttributedUserInputLabels:", void, .{_accessibilityAttributedUserInputLabels});
    }

    pub fn accessibilityApplicationFocusedUIElement(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityApplicationFocusedUIElement", ?objc.Id, .{});
    }

    pub fn setAccessibilityApplicationFocusedUIElement(_self: *@This(), _accessibilityApplicationFocusedUIElement: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityApplicationFocusedUIElement:", void, .{_accessibilityApplicationFocusedUIElement});
    }

    pub fn accessibilityMainWindow(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityMainWindow", ?objc.Id, .{});
    }

    pub fn setAccessibilityMainWindow(_self: *@This(), _accessibilityMainWindow: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityMainWindow:", void, .{_accessibilityMainWindow});
    }

    pub fn isAccessibilityHidden(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isAccessibilityHidden", objc.BOOL, .{});
    }

    pub fn setAccessibilityHidden(_self: *@This(), _accessibilityHidden: objc.BOOL) void {
        return objc.msgSend(_self, "setAccessibilityHidden:", void, .{_accessibilityHidden});
    }

    pub fn isAccessibilityFrontmost(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isAccessibilityFrontmost", objc.BOOL, .{});
    }

    pub fn setAccessibilityFrontmost(_self: *@This(), _accessibilityFrontmost: objc.BOOL) void {
        return objc.msgSend(_self, "setAccessibilityFrontmost:", void, .{_accessibilityFrontmost});
    }

    pub fn accessibilityFocusedWindow(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityFocusedWindow", ?objc.Id, .{});
    }

    pub fn setAccessibilityFocusedWindow(_self: *@This(), _accessibilityFocusedWindow: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityFocusedWindow:", void, .{_accessibilityFocusedWindow});
    }

    pub fn accessibilityWindows(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilityWindows", ?*foundation.Array, .{});
    }

    pub fn setAccessibilityWindows(_self: *@This(), _accessibilityWindows: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilityWindows:", void, .{_accessibilityWindows});
    }

    pub fn accessibilityExtrasMenuBar(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityExtrasMenuBar", ?objc.Id, .{});
    }

    pub fn setAccessibilityExtrasMenuBar(_self: *@This(), _accessibilityExtrasMenuBar: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityExtrasMenuBar:", void, .{_accessibilityExtrasMenuBar});
    }

    pub fn accessibilityMenuBar(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityMenuBar", ?objc.Id, .{});
    }

    pub fn setAccessibilityMenuBar(_self: *@This(), _accessibilityMenuBar: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityMenuBar:", void, .{_accessibilityMenuBar});
    }

    pub fn accessibilityColumnTitles(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilityColumnTitles", ?*foundation.Array, .{});
    }

    pub fn setAccessibilityColumnTitles(_self: *@This(), _accessibilityColumnTitles: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilityColumnTitles:", void, .{_accessibilityColumnTitles});
    }

    pub fn isAccessibilityOrderedByRow(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isAccessibilityOrderedByRow", objc.BOOL, .{});
    }

    pub fn setAccessibilityOrderedByRow(_self: *@This(), _accessibilityOrderedByRow: objc.BOOL) void {
        return objc.msgSend(_self, "setAccessibilityOrderedByRow:", void, .{_accessibilityOrderedByRow});
    }

    pub fn accessibilityHorizontalUnits(_self: *@This()) app_kit.AccessibilityUnits {
        return objc.msgSend(_self, "accessibilityHorizontalUnits", app_kit.AccessibilityUnits, .{});
    }

    pub fn setAccessibilityHorizontalUnits(_self: *@This(), _accessibilityHorizontalUnits: app_kit.AccessibilityUnits) void {
        return objc.msgSend(_self, "setAccessibilityHorizontalUnits:", void, .{_accessibilityHorizontalUnits});
    }

    pub fn accessibilityVerticalUnits(_self: *@This()) app_kit.AccessibilityUnits {
        return objc.msgSend(_self, "accessibilityVerticalUnits", app_kit.AccessibilityUnits, .{});
    }

    pub fn setAccessibilityVerticalUnits(_self: *@This(), _accessibilityVerticalUnits: app_kit.AccessibilityUnits) void {
        return objc.msgSend(_self, "setAccessibilityVerticalUnits:", void, .{_accessibilityVerticalUnits});
    }

    pub fn accessibilityHorizontalUnitDescription(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "accessibilityHorizontalUnitDescription", ?*foundation.String, .{});
    }

    pub fn setAccessibilityHorizontalUnitDescription(_self: *@This(), _accessibilityHorizontalUnitDescription: ?*foundation.String) void {
        return objc.msgSend(_self, "setAccessibilityHorizontalUnitDescription:", void, .{_accessibilityHorizontalUnitDescription});
    }

    pub fn accessibilityVerticalUnitDescription(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "accessibilityVerticalUnitDescription", ?*foundation.String, .{});
    }

    pub fn setAccessibilityVerticalUnitDescription(_self: *@This(), _accessibilityVerticalUnitDescription: ?*foundation.String) void {
        return objc.msgSend(_self, "setAccessibilityVerticalUnitDescription:", void, .{_accessibilityVerticalUnitDescription});
    }

    pub fn accessibilityHandles(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilityHandles", ?*foundation.Array, .{});
    }

    pub fn setAccessibilityHandles(_self: *@This(), _accessibilityHandles: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilityHandles:", void, .{_accessibilityHandles});
    }

    pub fn accessibilityWarningValue(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityWarningValue", ?objc.Id, .{});
    }

    pub fn setAccessibilityWarningValue(_self: *@This(), _accessibilityWarningValue: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityWarningValue:", void, .{_accessibilityWarningValue});
    }

    pub fn accessibilityCriticalValue(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityCriticalValue", ?objc.Id, .{});
    }

    pub fn setAccessibilityCriticalValue(_self: *@This(), _accessibilityCriticalValue: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityCriticalValue:", void, .{_accessibilityCriticalValue});
    }

    pub fn isAccessibilityDisclosed(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isAccessibilityDisclosed", objc.BOOL, .{});
    }

    pub fn setAccessibilityDisclosed(_self: *@This(), _accessibilityDisclosed: objc.BOOL) void {
        return objc.msgSend(_self, "setAccessibilityDisclosed:", void, .{_accessibilityDisclosed});
    }

    pub fn accessibilityDisclosedByRow(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityDisclosedByRow", ?objc.Id, .{});
    }

    pub fn setAccessibilityDisclosedByRow(_self: *@This(), _accessibilityDisclosedByRow: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityDisclosedByRow:", void, .{_accessibilityDisclosedByRow});
    }

    pub fn accessibilityDisclosedRows(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityDisclosedRows", ?objc.Id, .{});
    }

    pub fn setAccessibilityDisclosedRows(_self: *@This(), _accessibilityDisclosedRows: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityDisclosedRows:", void, .{_accessibilityDisclosedRows});
    }

    pub fn accessibilityDisclosureLevel(_self: *@This()) objc.NSInteger {
        return objc.msgSend(_self, "accessibilityDisclosureLevel", objc.NSInteger, .{});
    }

    pub fn setAccessibilityDisclosureLevel(_self: *@This(), _accessibilityDisclosureLevel: objc.NSInteger) void {
        return objc.msgSend(_self, "setAccessibilityDisclosureLevel:", void, .{_accessibilityDisclosureLevel});
    }

    pub fn accessibilityMarkerUIElements(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilityMarkerUIElements", ?*foundation.Array, .{});
    }

    pub fn setAccessibilityMarkerUIElements(_self: *@This(), _accessibilityMarkerUIElements: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilityMarkerUIElements:", void, .{_accessibilityMarkerUIElements});
    }

    pub fn accessibilityMarkerValues(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityMarkerValues", ?objc.Id, .{});
    }

    pub fn setAccessibilityMarkerValues(_self: *@This(), _accessibilityMarkerValues: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityMarkerValues:", void, .{_accessibilityMarkerValues});
    }

    pub fn accessibilityMarkerGroupUIElement(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityMarkerGroupUIElement", ?objc.Id, .{});
    }

    pub fn setAccessibilityMarkerGroupUIElement(_self: *@This(), _accessibilityMarkerGroupUIElement: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityMarkerGroupUIElement:", void, .{_accessibilityMarkerGroupUIElement});
    }

    pub fn accessibilityUnits(_self: *@This()) app_kit.AccessibilityUnits {
        return objc.msgSend(_self, "accessibilityUnits", app_kit.AccessibilityUnits, .{});
    }

    pub fn setAccessibilityUnits(_self: *@This(), _accessibilityUnits: app_kit.AccessibilityUnits) void {
        return objc.msgSend(_self, "setAccessibilityUnits:", void, .{_accessibilityUnits});
    }

    pub fn accessibilityUnitDescription(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "accessibilityUnitDescription", ?*foundation.String, .{});
    }

    pub fn setAccessibilityUnitDescription(_self: *@This(), _accessibilityUnitDescription: ?*foundation.String) void {
        return objc.msgSend(_self, "setAccessibilityUnitDescription:", void, .{_accessibilityUnitDescription});
    }

    pub fn accessibilityRulerMarkerType(_self: *@This()) app_kit.AccessibilityRulerMarkerType {
        return objc.msgSend(_self, "accessibilityRulerMarkerType", app_kit.AccessibilityRulerMarkerType, .{});
    }

    pub fn setAccessibilityRulerMarkerType(_self: *@This(), _accessibilityRulerMarkerType: app_kit.AccessibilityRulerMarkerType) void {
        return objc.msgSend(_self, "setAccessibilityRulerMarkerType:", void, .{_accessibilityRulerMarkerType});
    }

    pub fn accessibilityMarkerTypeDescription(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "accessibilityMarkerTypeDescription", ?*foundation.String, .{});
    }

    pub fn setAccessibilityMarkerTypeDescription(_self: *@This(), _accessibilityMarkerTypeDescription: ?*foundation.String) void {
        return objc.msgSend(_self, "setAccessibilityMarkerTypeDescription:", void, .{_accessibilityMarkerTypeDescription});
    }

    pub fn accessibilityHorizontalScrollBar(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityHorizontalScrollBar", ?objc.Id, .{});
    }

    pub fn setAccessibilityHorizontalScrollBar(_self: *@This(), _accessibilityHorizontalScrollBar: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityHorizontalScrollBar:", void, .{_accessibilityHorizontalScrollBar});
    }

    pub fn accessibilityVerticalScrollBar(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityVerticalScrollBar", ?objc.Id, .{});
    }

    pub fn setAccessibilityVerticalScrollBar(_self: *@This(), _accessibilityVerticalScrollBar: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityVerticalScrollBar:", void, .{_accessibilityVerticalScrollBar});
    }

    pub fn accessibilityAllowedValues(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "accessibilityAllowedValues", ?*anyopaque, .{});
    }

    pub fn setAccessibilityAllowedValues(_self: *@This(), _accessibilityAllowedValues: ?*anyopaque) void {
        return objc.msgSend(_self, "setAccessibilityAllowedValues:", void, .{_accessibilityAllowedValues});
    }

    pub fn accessibilityLabelUIElements(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilityLabelUIElements", ?*foundation.Array, .{});
    }

    pub fn setAccessibilityLabelUIElements(_self: *@This(), _accessibilityLabelUIElements: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilityLabelUIElements:", void, .{_accessibilityLabelUIElements});
    }

    pub fn accessibilityLabelValue(_self: *@This()) f32 {
        return objc.msgSend(_self, "accessibilityLabelValue", f32, .{});
    }

    pub fn setAccessibilityLabelValue(_self: *@This(), _accessibilityLabelValue: f32) void {
        return objc.msgSend(_self, "setAccessibilityLabelValue:", void, .{_accessibilityLabelValue});
    }

    pub fn accessibilitySplitters(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilitySplitters", ?*foundation.Array, .{});
    }

    pub fn setAccessibilitySplitters(_self: *@This(), _accessibilitySplitters: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilitySplitters:", void, .{_accessibilitySplitters});
    }

    pub fn accessibilityDecrementButton(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityDecrementButton", ?objc.Id, .{});
    }

    pub fn setAccessibilityDecrementButton(_self: *@This(), _accessibilityDecrementButton: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityDecrementButton:", void, .{_accessibilityDecrementButton});
    }

    pub fn accessibilityIncrementButton(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityIncrementButton", ?objc.Id, .{});
    }

    pub fn setAccessibilityIncrementButton(_self: *@This(), _accessibilityIncrementButton: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityIncrementButton:", void, .{_accessibilityIncrementButton});
    }

    pub fn accessibilityTabs(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilityTabs", ?*foundation.Array, .{});
    }

    pub fn setAccessibilityTabs(_self: *@This(), _accessibilityTabs: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilityTabs:", void, .{_accessibilityTabs});
    }

    pub fn accessibilityHeader(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityHeader", ?objc.Id, .{});
    }

    pub fn setAccessibilityHeader(_self: *@This(), _accessibilityHeader: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityHeader:", void, .{_accessibilityHeader});
    }

    pub fn accessibilityColumnCount(_self: *@This()) objc.NSInteger {
        return objc.msgSend(_self, "accessibilityColumnCount", objc.NSInteger, .{});
    }

    pub fn setAccessibilityColumnCount(_self: *@This(), _accessibilityColumnCount: objc.NSInteger) void {
        return objc.msgSend(_self, "setAccessibilityColumnCount:", void, .{_accessibilityColumnCount});
    }

    pub fn accessibilityRowCount(_self: *@This()) objc.NSInteger {
        return objc.msgSend(_self, "accessibilityRowCount", objc.NSInteger, .{});
    }

    pub fn setAccessibilityRowCount(_self: *@This(), _accessibilityRowCount: objc.NSInteger) void {
        return objc.msgSend(_self, "setAccessibilityRowCount:", void, .{_accessibilityRowCount});
    }

    pub fn accessibilityIndex(_self: *@This()) objc.NSInteger {
        return objc.msgSend(_self, "accessibilityIndex", objc.NSInteger, .{});
    }

    pub fn setAccessibilityIndex(_self: *@This(), _accessibilityIndex: objc.NSInteger) void {
        return objc.msgSend(_self, "setAccessibilityIndex:", void, .{_accessibilityIndex});
    }

    pub fn accessibilityColumns(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilityColumns", ?*foundation.Array, .{});
    }

    pub fn setAccessibilityColumns(_self: *@This(), _accessibilityColumns: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilityColumns:", void, .{_accessibilityColumns});
    }

    pub fn accessibilityRows(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilityRows", ?*foundation.Array, .{});
    }

    pub fn setAccessibilityRows(_self: *@This(), _accessibilityRows: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilityRows:", void, .{_accessibilityRows});
    }

    pub fn accessibilityVisibleRows(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilityVisibleRows", ?*foundation.Array, .{});
    }

    pub fn setAccessibilityVisibleRows(_self: *@This(), _accessibilityVisibleRows: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilityVisibleRows:", void, .{_accessibilityVisibleRows});
    }

    pub fn accessibilitySelectedRows(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilitySelectedRows", ?*foundation.Array, .{});
    }

    pub fn setAccessibilitySelectedRows(_self: *@This(), _accessibilitySelectedRows: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilitySelectedRows:", void, .{_accessibilitySelectedRows});
    }

    pub fn accessibilityVisibleColumns(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilityVisibleColumns", ?*foundation.Array, .{});
    }

    pub fn setAccessibilityVisibleColumns(_self: *@This(), _accessibilityVisibleColumns: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilityVisibleColumns:", void, .{_accessibilityVisibleColumns});
    }

    pub fn accessibilitySelectedColumns(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilitySelectedColumns", ?*foundation.Array, .{});
    }

    pub fn setAccessibilitySelectedColumns(_self: *@This(), _accessibilitySelectedColumns: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilitySelectedColumns:", void, .{_accessibilitySelectedColumns});
    }

    pub fn accessibilitySortDirection(_self: *@This()) app_kit.AccessibilitySortDirection {
        return objc.msgSend(_self, "accessibilitySortDirection", app_kit.AccessibilitySortDirection, .{});
    }

    pub fn setAccessibilitySortDirection(_self: *@This(), _accessibilitySortDirection: app_kit.AccessibilitySortDirection) void {
        return objc.msgSend(_self, "setAccessibilitySortDirection:", void, .{_accessibilitySortDirection});
    }

    pub fn accessibilityRowHeaderUIElements(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilityRowHeaderUIElements", ?*foundation.Array, .{});
    }

    pub fn setAccessibilityRowHeaderUIElements(_self: *@This(), _accessibilityRowHeaderUIElements: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilityRowHeaderUIElements:", void, .{_accessibilityRowHeaderUIElements});
    }

    pub fn accessibilitySelectedCells(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilitySelectedCells", ?*foundation.Array, .{});
    }

    pub fn setAccessibilitySelectedCells(_self: *@This(), _accessibilitySelectedCells: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilitySelectedCells:", void, .{_accessibilitySelectedCells});
    }

    pub fn accessibilityVisibleCells(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilityVisibleCells", ?*foundation.Array, .{});
    }

    pub fn setAccessibilityVisibleCells(_self: *@This(), _accessibilityVisibleCells: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilityVisibleCells:", void, .{_accessibilityVisibleCells});
    }

    pub fn accessibilityColumnHeaderUIElements(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilityColumnHeaderUIElements", ?*foundation.Array, .{});
    }

    pub fn setAccessibilityColumnHeaderUIElements(_self: *@This(), _accessibilityColumnHeaderUIElements: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilityColumnHeaderUIElements:", void, .{_accessibilityColumnHeaderUIElements});
    }

    pub fn accessibilityRowIndexRange(_self: *@This()) foundation.Range {
        return objc.msgSend(_self, "accessibilityRowIndexRange", foundation.Range, .{});
    }

    pub fn setAccessibilityRowIndexRange(_self: *@This(), _accessibilityRowIndexRange: foundation.Range) void {
        return objc.msgSend(_self, "setAccessibilityRowIndexRange:", void, .{_accessibilityRowIndexRange});
    }

    pub fn accessibilityColumnIndexRange(_self: *@This()) foundation.Range {
        return objc.msgSend(_self, "accessibilityColumnIndexRange", foundation.Range, .{});
    }

    pub fn setAccessibilityColumnIndexRange(_self: *@This(), _accessibilityColumnIndexRange: foundation.Range) void {
        return objc.msgSend(_self, "setAccessibilityColumnIndexRange:", void, .{_accessibilityColumnIndexRange});
    }

    pub fn accessibilityInsertionPointLineNumber(_self: *@This()) objc.NSInteger {
        return objc.msgSend(_self, "accessibilityInsertionPointLineNumber", objc.NSInteger, .{});
    }

    pub fn setAccessibilityInsertionPointLineNumber(_self: *@This(), _accessibilityInsertionPointLineNumber: objc.NSInteger) void {
        return objc.msgSend(_self, "setAccessibilityInsertionPointLineNumber:", void, .{_accessibilityInsertionPointLineNumber});
    }

    pub fn accessibilitySharedCharacterRange(_self: *@This()) foundation.Range {
        return objc.msgSend(_self, "accessibilitySharedCharacterRange", foundation.Range, .{});
    }

    pub fn setAccessibilitySharedCharacterRange(_self: *@This(), _accessibilitySharedCharacterRange: foundation.Range) void {
        return objc.msgSend(_self, "setAccessibilitySharedCharacterRange:", void, .{_accessibilitySharedCharacterRange});
    }

    pub fn accessibilitySharedTextUIElements(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilitySharedTextUIElements", ?*foundation.Array, .{});
    }

    pub fn setAccessibilitySharedTextUIElements(_self: *@This(), _accessibilitySharedTextUIElements: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilitySharedTextUIElements:", void, .{_accessibilitySharedTextUIElements});
    }

    pub fn accessibilityVisibleCharacterRange(_self: *@This()) foundation.Range {
        return objc.msgSend(_self, "accessibilityVisibleCharacterRange", foundation.Range, .{});
    }

    pub fn setAccessibilityVisibleCharacterRange(_self: *@This(), _accessibilityVisibleCharacterRange: foundation.Range) void {
        return objc.msgSend(_self, "setAccessibilityVisibleCharacterRange:", void, .{_accessibilityVisibleCharacterRange});
    }

    pub fn accessibilityNumberOfCharacters(_self: *@This()) objc.NSInteger {
        return objc.msgSend(_self, "accessibilityNumberOfCharacters", objc.NSInteger, .{});
    }

    pub fn setAccessibilityNumberOfCharacters(_self: *@This(), _accessibilityNumberOfCharacters: objc.NSInteger) void {
        return objc.msgSend(_self, "setAccessibilityNumberOfCharacters:", void, .{_accessibilityNumberOfCharacters});
    }

    pub fn accessibilitySelectedText(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "accessibilitySelectedText", ?*foundation.String, .{});
    }

    pub fn setAccessibilitySelectedText(_self: *@This(), _accessibilitySelectedText: ?*foundation.String) void {
        return objc.msgSend(_self, "setAccessibilitySelectedText:", void, .{_accessibilitySelectedText});
    }

    pub fn accessibilitySelectedTextRange(_self: *@This()) foundation.Range {
        return objc.msgSend(_self, "accessibilitySelectedTextRange", foundation.Range, .{});
    }

    pub fn setAccessibilitySelectedTextRange(_self: *@This(), _accessibilitySelectedTextRange: foundation.Range) void {
        return objc.msgSend(_self, "setAccessibilitySelectedTextRange:", void, .{_accessibilitySelectedTextRange});
    }

    pub fn accessibilitySelectedTextRanges(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "accessibilitySelectedTextRanges", ?*anyopaque, .{});
    }

    pub fn setAccessibilitySelectedTextRanges(_self: *@This(), _accessibilitySelectedTextRanges: ?*anyopaque) void {
        return objc.msgSend(_self, "setAccessibilitySelectedTextRanges:", void, .{_accessibilitySelectedTextRanges});
    }

    pub fn accessibilityToolbarButton(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityToolbarButton", ?objc.Id, .{});
    }

    pub fn setAccessibilityToolbarButton(_self: *@This(), _accessibilityToolbarButton: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityToolbarButton:", void, .{_accessibilityToolbarButton});
    }

    pub fn isAccessibilityModal(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isAccessibilityModal", objc.BOOL, .{});
    }

    pub fn setAccessibilityModal(_self: *@This(), _accessibilityModal: objc.BOOL) void {
        return objc.msgSend(_self, "setAccessibilityModal:", void, .{_accessibilityModal});
    }

    pub fn accessibilityProxy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityProxy", ?objc.Id, .{});
    }

    pub fn setAccessibilityProxy(_self: *@This(), _accessibilityProxy: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityProxy:", void, .{_accessibilityProxy});
    }

    pub fn isAccessibilityMain(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isAccessibilityMain", objc.BOOL, .{});
    }

    pub fn setAccessibilityMain(_self: *@This(), _accessibilityMain: objc.BOOL) void {
        return objc.msgSend(_self, "setAccessibilityMain:", void, .{_accessibilityMain});
    }

    pub fn accessibilityFullScreenButton(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityFullScreenButton", ?objc.Id, .{});
    }

    pub fn setAccessibilityFullScreenButton(_self: *@This(), _accessibilityFullScreenButton: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityFullScreenButton:", void, .{_accessibilityFullScreenButton});
    }

    pub fn accessibilityGrowArea(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityGrowArea", ?objc.Id, .{});
    }

    pub fn setAccessibilityGrowArea(_self: *@This(), _accessibilityGrowArea: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityGrowArea:", void, .{_accessibilityGrowArea});
    }

    pub fn accessibilityDocument(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "accessibilityDocument", ?*foundation.String, .{});
    }

    pub fn setAccessibilityDocument(_self: *@This(), _accessibilityDocument: ?*foundation.String) void {
        return objc.msgSend(_self, "setAccessibilityDocument:", void, .{_accessibilityDocument});
    }

    pub fn accessibilityDefaultButton(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityDefaultButton", ?objc.Id, .{});
    }

    pub fn setAccessibilityDefaultButton(_self: *@This(), _accessibilityDefaultButton: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityDefaultButton:", void, .{_accessibilityDefaultButton});
    }

    pub fn accessibilityCloseButton(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityCloseButton", ?objc.Id, .{});
    }

    pub fn setAccessibilityCloseButton(_self: *@This(), _accessibilityCloseButton: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityCloseButton:", void, .{_accessibilityCloseButton});
    }

    pub fn accessibilityZoomButton(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityZoomButton", ?objc.Id, .{});
    }

    pub fn setAccessibilityZoomButton(_self: *@This(), _accessibilityZoomButton: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityZoomButton:", void, .{_accessibilityZoomButton});
    }

    pub fn accessibilityMinimizeButton(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityMinimizeButton", ?objc.Id, .{});
    }

    pub fn setAccessibilityMinimizeButton(_self: *@This(), _accessibilityMinimizeButton: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityMinimizeButton:", void, .{_accessibilityMinimizeButton});
    }

    pub fn isAccessibilityMinimized(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isAccessibilityMinimized", objc.BOOL, .{});
    }

    pub fn setAccessibilityMinimized(_self: *@This(), _accessibilityMinimized: objc.BOOL) void {
        return objc.msgSend(_self, "setAccessibilityMinimized:", void, .{_accessibilityMinimized});
    }

    pub fn accessibilityCustomActions(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "accessibilityCustomActions", ?*anyopaque, .{});
    }

    pub fn setAccessibilityCustomActions(_self: *@This(), _accessibilityCustomActions: ?*anyopaque) void {
        return objc.msgSend(_self, "setAccessibilityCustomActions:", void, .{_accessibilityCustomActions});
    }

    pub fn initWithFrame(_self: *@This(), _frameRect: foundation.Rect) *@This() {
        return objc.msgSend(_self, "initWithFrame:", *@This(), .{_frameRect});
    }

    pub fn isDescendantOf(_self: *@This(), _view: ?*app_kit.View) objc.BOOL {
        return objc.msgSend(_self, "isDescendantOf:", objc.BOOL, .{_view});
    }

    pub fn ancestorSharedWithView(_self: *@This(), _view: ?*app_kit.View) ?*app_kit.View {
        return objc.msgSend(_self, "ancestorSharedWithView:", ?*app_kit.View, .{_view});
    }

    pub fn getRectsBeingDrawnCount(_self: *@This(), _rects: ?*?*foundation.Rect, _count: ?*objc.NSInteger) void {
        return objc.msgSend(_self, "getRectsBeingDrawn:count:", void, .{ _rects, _count });
    }

    pub fn needsToDrawRect(_self: *@This(), _rect: foundation.Rect) objc.BOOL {
        return objc.msgSend(_self, "needsToDrawRect:", objc.BOOL, .{_rect});
    }

    pub fn viewDidHide(_self: *@This()) void {
        return objc.msgSend(_self, "viewDidHide", void, .{});
    }

    pub fn viewDidUnhide(_self: *@This()) void {
        return objc.msgSend(_self, "viewDidUnhide", void, .{});
    }

    pub fn addSubview(_self: *@This(), _view: ?*app_kit.View) void {
        return objc.msgSend(_self, "addSubview:", void, .{_view});
    }

    pub fn addSubviewPositionedRelativeTo(_self: *@This(), _view: ?*app_kit.View, _place: app_kit.WindowOrderingMode, _otherView: ?*app_kit.View) void {
        return objc.msgSend(_self, "addSubview:positioned:relativeTo:", void, .{ _view, _place, _otherView });
    }

    pub fn sortSubviewsUsingFunctionContext(_self: *@This(), _compare: ?*const fn (?*anyopaque, ?*anyopaque, ?*anyopaque) callconv(.C) foundation.ComparisonResult, _context: ?*anyopaque) void {
        return objc.msgSend(_self, "sortSubviewsUsingFunction:context:", void, .{ _compare, _context });
    }

    pub fn viewWillMoveToWindow(_self: *@This(), _newWindow: ?*app_kit.Window) void {
        return objc.msgSend(_self, "viewWillMoveToWindow:", void, .{_newWindow});
    }

    pub fn viewDidMoveToWindow(_self: *@This()) void {
        return objc.msgSend(_self, "viewDidMoveToWindow", void, .{});
    }

    pub fn viewWillMoveToSuperview(_self: *@This(), _newSuperview: ?*app_kit.View) void {
        return objc.msgSend(_self, "viewWillMoveToSuperview:", void, .{_newSuperview});
    }

    pub fn viewDidMoveToSuperview(_self: *@This()) void {
        return objc.msgSend(_self, "viewDidMoveToSuperview", void, .{});
    }

    pub fn didAddSubview(_self: *@This(), _subview: ?*app_kit.View) void {
        return objc.msgSend(_self, "didAddSubview:", void, .{_subview});
    }

    pub fn willRemoveSubview(_self: *@This(), _subview: ?*app_kit.View) void {
        return objc.msgSend(_self, "willRemoveSubview:", void, .{_subview});
    }

    pub fn removeFromSuperview(_self: *@This()) void {
        return objc.msgSend(_self, "removeFromSuperview", void, .{});
    }

    pub fn replaceSubviewWith(_self: *@This(), _oldView: ?*app_kit.View, _newView: ?*app_kit.View) void {
        return objc.msgSend(_self, "replaceSubview:with:", void, .{ _oldView, _newView });
    }

    pub fn removeFromSuperviewWithoutNeedingDisplay(_self: *@This()) void {
        return objc.msgSend(_self, "removeFromSuperviewWithoutNeedingDisplay", void, .{});
    }

    pub fn viewDidChangeBackingProperties(_self: *@This()) void {
        return objc.msgSend(_self, "viewDidChangeBackingProperties", void, .{});
    }

    pub fn resizeSubviewsWithOldSize(_self: *@This(), _oldSize: foundation.Size) void {
        return objc.msgSend(_self, "resizeSubviewsWithOldSize:", void, .{_oldSize});
    }

    pub fn resizeWithOldSuperviewSize(_self: *@This(), _oldSize: foundation.Size) void {
        return objc.msgSend(_self, "resizeWithOldSuperviewSize:", void, .{_oldSize});
    }

    pub fn setFrameOrigin(_self: *@This(), _newOrigin: foundation.Point) void {
        return objc.msgSend(_self, "setFrameOrigin:", void, .{_newOrigin});
    }

    pub fn setFrameSize(_self: *@This(), _newSize: foundation.Size) void {
        return objc.msgSend(_self, "setFrameSize:", void, .{_newSize});
    }

    pub fn setBoundsOrigin(_self: *@This(), _newOrigin: foundation.Point) void {
        return objc.msgSend(_self, "setBoundsOrigin:", void, .{_newOrigin});
    }

    pub fn setBoundsSize(_self: *@This(), _newSize: foundation.Size) void {
        return objc.msgSend(_self, "setBoundsSize:", void, .{_newSize});
    }

    pub fn translateOriginToPoint(_self: *@This(), _translation: foundation.Point) void {
        return objc.msgSend(_self, "translateOriginToPoint:", void, .{_translation});
    }

    pub fn scaleUnitSquareToSize(_self: *@This(), _newUnitSize: foundation.Size) void {
        return objc.msgSend(_self, "scaleUnitSquareToSize:", void, .{_newUnitSize});
    }

    pub fn rotateByAngle(_self: *@This(), _angle: core_foundation.CGFloat) void {
        return objc.msgSend(_self, "rotateByAngle:", void, .{_angle});
    }

    pub fn convertPointFromView(_self: *@This(), _point: foundation.Point, _view: ?*app_kit.View) foundation.Point {
        return objc.msgSend(_self, "convertPoint:fromView:", foundation.Point, .{ _point, _view });
    }

    pub fn convertPointToView(_self: *@This(), _point: foundation.Point, _view: ?*app_kit.View) foundation.Point {
        return objc.msgSend(_self, "convertPoint:toView:", foundation.Point, .{ _point, _view });
    }

    pub fn convertSizeFromView(_self: *@This(), _size: foundation.Size, _view: ?*app_kit.View) foundation.Size {
        return objc.msgSend(_self, "convertSize:fromView:", foundation.Size, .{ _size, _view });
    }

    pub fn convertSizeToView(_self: *@This(), _size: foundation.Size, _view: ?*app_kit.View) foundation.Size {
        return objc.msgSend(_self, "convertSize:toView:", foundation.Size, .{ _size, _view });
    }

    pub fn convertRectFromView(_self: *@This(), _rect: foundation.Rect, _view: ?*app_kit.View) foundation.Rect {
        return objc.msgSend(_self, "convertRect:fromView:", foundation.Rect, .{ _rect, _view });
    }

    pub fn convertRectToView(_self: *@This(), _rect: foundation.Rect, _view: ?*app_kit.View) foundation.Rect {
        return objc.msgSend(_self, "convertRect:toView:", foundation.Rect, .{ _rect, _view });
    }

    pub fn backingAlignedRectOptions(_self: *@This(), _rect: foundation.Rect, _options: foundation.AlignmentOptions) foundation.Rect {
        return objc.msgSend(_self, "backingAlignedRect:options:", foundation.Rect, .{ _rect, _options });
    }

    pub fn centerScanRect(_self: *@This(), _rect: foundation.Rect) foundation.Rect {
        return objc.msgSend(_self, "centerScanRect:", foundation.Rect, .{_rect});
    }

    pub fn convertPointToBacking(_self: *@This(), _point: foundation.Point) foundation.Point {
        return objc.msgSend(_self, "convertPointToBacking:", foundation.Point, .{_point});
    }

    pub fn convertPointFromBacking(_self: *@This(), _point: foundation.Point) foundation.Point {
        return objc.msgSend(_self, "convertPointFromBacking:", foundation.Point, .{_point});
    }

    pub fn convertSizeToBacking(_self: *@This(), _size: foundation.Size) foundation.Size {
        return objc.msgSend(_self, "convertSizeToBacking:", foundation.Size, .{_size});
    }

    pub fn convertSizeFromBacking(_self: *@This(), _size: foundation.Size) foundation.Size {
        return objc.msgSend(_self, "convertSizeFromBacking:", foundation.Size, .{_size});
    }

    pub fn convertRectToBacking(_self: *@This(), _rect: foundation.Rect) foundation.Rect {
        return objc.msgSend(_self, "convertRectToBacking:", foundation.Rect, .{_rect});
    }

    pub fn convertRectFromBacking(_self: *@This(), _rect: foundation.Rect) foundation.Rect {
        return objc.msgSend(_self, "convertRectFromBacking:", foundation.Rect, .{_rect});
    }

    pub fn convertPointToLayer(_self: *@This(), _point: foundation.Point) foundation.Point {
        return objc.msgSend(_self, "convertPointToLayer:", foundation.Point, .{_point});
    }

    pub fn convertPointFromLayer(_self: *@This(), _point: foundation.Point) foundation.Point {
        return objc.msgSend(_self, "convertPointFromLayer:", foundation.Point, .{_point});
    }

    pub fn convertSizeToLayer(_self: *@This(), _size: foundation.Size) foundation.Size {
        return objc.msgSend(_self, "convertSizeToLayer:", foundation.Size, .{_size});
    }

    pub fn convertSizeFromLayer(_self: *@This(), _size: foundation.Size) foundation.Size {
        return objc.msgSend(_self, "convertSizeFromLayer:", foundation.Size, .{_size});
    }

    pub fn convertRectToLayer(_self: *@This(), _rect: foundation.Rect) foundation.Rect {
        return objc.msgSend(_self, "convertRectToLayer:", foundation.Rect, .{_rect});
    }

    pub fn convertRectFromLayer(_self: *@This(), _rect: foundation.Rect) foundation.Rect {
        return objc.msgSend(_self, "convertRectFromLayer:", foundation.Rect, .{_rect});
    }

    pub fn setNeedsDisplayInRect(_self: *@This(), _invalidRect: foundation.Rect) void {
        return objc.msgSend(_self, "setNeedsDisplayInRect:", void, .{_invalidRect});
    }

    pub fn lockFocus(_self: *@This()) void {
        return objc.msgSend(_self, "lockFocus", void, .{});
    }

    pub fn unlockFocus(_self: *@This()) void {
        return objc.msgSend(_self, "unlockFocus", void, .{});
    }

    pub fn lockFocusIfCanDraw(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "lockFocusIfCanDraw", objc.BOOL, .{});
    }

    pub fn lockFocusIfCanDrawInContext(_self: *@This(), _context: ?*app_kit.GraphicsContext) objc.BOOL {
        return objc.msgSend(_self, "lockFocusIfCanDrawInContext:", objc.BOOL, .{_context});
    }

    pub fn display(_self: *@This()) void {
        return objc.msgSend(_self, "display", void, .{});
    }

    pub fn displayIfNeeded(_self: *@This()) void {
        return objc.msgSend(_self, "displayIfNeeded", void, .{});
    }

    pub fn displayIfNeededIgnoringOpacity(_self: *@This()) void {
        return objc.msgSend(_self, "displayIfNeededIgnoringOpacity", void, .{});
    }

    pub fn displayRect(_self: *@This(), _rect: foundation.Rect) void {
        return objc.msgSend(_self, "displayRect:", void, .{_rect});
    }

    pub fn displayIfNeededInRect(_self: *@This(), _rect: foundation.Rect) void {
        return objc.msgSend(_self, "displayIfNeededInRect:", void, .{_rect});
    }

    pub fn displayRectIgnoringOpacity(_self: *@This(), _rect: foundation.Rect) void {
        return objc.msgSend(_self, "displayRectIgnoringOpacity:", void, .{_rect});
    }

    pub fn displayIfNeededInRectIgnoringOpacity(_self: *@This(), _rect: foundation.Rect) void {
        return objc.msgSend(_self, "displayIfNeededInRectIgnoringOpacity:", void, .{_rect});
    }

    pub fn drawRect(_self: *@This(), _dirtyRect: foundation.Rect) void {
        return objc.msgSend(_self, "drawRect:", void, .{_dirtyRect});
    }

    pub fn displayRectIgnoringOpacityInContext(_self: *@This(), _rect: foundation.Rect, _context: ?*app_kit.GraphicsContext) void {
        return objc.msgSend(_self, "displayRectIgnoringOpacity:inContext:", void, .{ _rect, _context });
    }

    pub fn bitmapImageRepForCachingDisplayInRect(_self: *@This(), _rect: foundation.Rect) ?*app_kit.BitmapImageRep {
        return objc.msgSend(_self, "bitmapImageRepForCachingDisplayInRect:", ?*app_kit.BitmapImageRep, .{_rect});
    }

    pub fn cacheDisplayInRectToBitmapImageRep(_self: *@This(), _rect: foundation.Rect, _bitmapImageRep: ?*app_kit.BitmapImageRep) void {
        return objc.msgSend(_self, "cacheDisplayInRect:toBitmapImageRep:", void, .{ _rect, _bitmapImageRep });
    }

    pub fn viewWillDraw(_self: *@This()) void {
        return objc.msgSend(_self, "viewWillDraw", void, .{});
    }

    pub fn scrollPoint(_self: *@This(), _point: foundation.Point) void {
        return objc.msgSend(_self, "scrollPoint:", void, .{_point});
    }

    pub fn scrollRectToVisible(_self: *@This(), _rect: foundation.Rect) objc.BOOL {
        return objc.msgSend(_self, "scrollRectToVisible:", objc.BOOL, .{_rect});
    }

    pub fn autoscroll(_self: *@This(), _event: ?*app_kit.Event) objc.BOOL {
        return objc.msgSend(_self, "autoscroll:", objc.BOOL, .{_event});
    }

    pub fn adjustScroll(_self: *@This(), _newVisible: foundation.Rect) foundation.Rect {
        return objc.msgSend(_self, "adjustScroll:", foundation.Rect, .{_newVisible});
    }

    pub fn scrollRectBy(_self: *@This(), _rect: foundation.Rect, _delta: foundation.Size) void {
        return objc.msgSend(_self, "scrollRect:by:", void, .{ _rect, _delta });
    }

    pub fn translateRectsNeedingDisplayInRectBy(_self: *@This(), _clipRect: foundation.Rect, _delta: foundation.Size) void {
        return objc.msgSend(_self, "translateRectsNeedingDisplayInRect:by:", void, .{ _clipRect, _delta });
    }

    pub fn hitTest(_self: *@This(), _point: foundation.Point) ?*app_kit.View {
        return objc.msgSend(_self, "hitTest:", ?*app_kit.View, .{_point});
    }

    pub fn mouseInRect(_self: *@This(), _point: foundation.Point, _rect: foundation.Rect) objc.BOOL {
        return objc.msgSend(_self, "mouse:inRect:", objc.BOOL, .{ _point, _rect });
    }

    pub fn viewWithTag(_self: *@This(), _tag: objc.NSInteger) ?*anyopaque {
        return objc.msgSend(_self, "viewWithTag:", ?*anyopaque, .{_tag});
    }

    pub fn acceptsFirstMouse(_self: *@This(), _event: ?*app_kit.Event) objc.BOOL {
        return objc.msgSend(_self, "acceptsFirstMouse:", objc.BOOL, .{_event});
    }

    pub fn shouldDelayWindowOrderingForEvent(_self: *@This(), _event: ?*app_kit.Event) objc.BOOL {
        return objc.msgSend(_self, "shouldDelayWindowOrderingForEvent:", objc.BOOL, .{_event});
    }

    pub fn makeBackingLayer(_self: *@This()) ?*quartz_core.Layer {
        return objc.msgSend(_self, "makeBackingLayer", ?*quartz_core.Layer, .{});
    }

    pub fn updateLayer(_self: *@This()) void {
        return objc.msgSend(_self, "updateLayer", void, .{});
    }

    pub fn layoutSubtreeIfNeeded(_self: *@This()) void {
        return objc.msgSend(_self, "layoutSubtreeIfNeeded", void, .{});
    }

    pub fn layout(_self: *@This()) void {
        return objc.msgSend(_self, "layout", void, .{});
    }

    pub fn menuForEvent(_self: *@This(), _event: ?*app_kit.Event) ?*app_kit.Menu {
        return objc.msgSend(_self, "menuForEvent:", ?*app_kit.Menu, .{_event});
    }

    pub fn willOpenMenuWithEvent(_self: *@This(), _menu: ?*app_kit.Menu, _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "willOpenMenu:withEvent:", void, .{ _menu, _event });
    }

    pub fn didCloseMenuWithEvent(_self: *@This(), _menu: ?*app_kit.Menu, _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "didCloseMenu:withEvent:", void, .{ _menu, _event });
    }

    pub fn addToolTipRectOwnerUserData(_self: *@This(), _rect: foundation.Rect, _owner: ?objc.Id, _data: ?*anyopaque) app_kit.ToolTipTag {
        return objc.msgSend(_self, "addToolTipRect:owner:userData:", app_kit.ToolTipTag, .{ _rect, _owner, _data });
    }

    pub fn removeToolTip(_self: *@This(), _tag: app_kit.ToolTipTag) void {
        return objc.msgSend(_self, "removeToolTip:", void, .{_tag});
    }

    pub fn removeAllToolTips(_self: *@This()) void {
        return objc.msgSend(_self, "removeAllToolTips", void, .{});
    }

    pub fn viewWillStartLiveResize(_self: *@This()) void {
        return objc.msgSend(_self, "viewWillStartLiveResize", void, .{});
    }

    pub fn viewDidEndLiveResize(_self: *@This()) void {
        return objc.msgSend(_self, "viewDidEndLiveResize", void, .{});
    }

    pub fn getRectsExposedDuringLiveResizeCount(_self: *@This(), _exposedRects: ?*foundation.Rect, _count: ?*objc.NSInteger) void {
        return objc.msgSend(_self, "getRectsExposedDuringLiveResize:count:", void, .{ _exposedRects, _count });
    }

    pub fn rectForSmartMagnificationAtPointInRect(_self: *@This(), _location: foundation.Point, _visibleRect: foundation.Rect) foundation.Rect {
        return objc.msgSend(_self, "rectForSmartMagnificationAtPoint:inRect:", foundation.Rect, .{ _location, _visibleRect });
    }

    pub fn prepareForReuse(_self: *@This()) void {
        return objc.msgSend(_self, "prepareForReuse", void, .{});
    }

    pub fn prepareContentInRect(_self: *@This(), _rect: foundation.Rect) void {
        return objc.msgSend(_self, "prepareContentInRect:", void, .{_rect});
    }

    pub fn viewDidChangeEffectiveAppearance(_self: *@This()) void {
        return objc.msgSend(_self, "viewDidChangeEffectiveAppearance", void, .{});
    }

    pub fn window(_self: *@This()) ?*app_kit.Window {
        return objc.msgSend(_self, "window", ?*app_kit.Window, .{});
    }

    pub fn superview(_self: *@This()) ?*app_kit.View {
        return objc.msgSend(_self, "superview", ?*app_kit.View, .{});
    }

    pub fn subviews(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "subviews", ?*anyopaque, .{});
    }

    pub fn setSubviews(_self: *@This(), _subviews: ?*anyopaque) void {
        return objc.msgSend(_self, "setSubviews:", void, .{_subviews});
    }

    pub fn opaqueAncestor(_self: *@This()) ?*app_kit.View {
        return objc.msgSend(_self, "opaqueAncestor", ?*app_kit.View, .{});
    }

    pub fn isHidden(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isHidden", objc.BOOL, .{});
    }

    pub fn setHidden(_self: *@This(), _hidden: objc.BOOL) void {
        return objc.msgSend(_self, "setHidden:", void, .{_hidden});
    }

    pub fn isHiddenOrHasHiddenAncestor(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isHiddenOrHasHiddenAncestor", objc.BOOL, .{});
    }

    pub fn wantsDefaultClipping(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "wantsDefaultClipping", objc.BOOL, .{});
    }

    pub fn postsFrameChangedNotifications(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "postsFrameChangedNotifications", objc.BOOL, .{});
    }

    pub fn setPostsFrameChangedNotifications(_self: *@This(), _postsFrameChangedNotifications: objc.BOOL) void {
        return objc.msgSend(_self, "setPostsFrameChangedNotifications:", void, .{_postsFrameChangedNotifications});
    }

    pub fn autoresizesSubviews(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "autoresizesSubviews", objc.BOOL, .{});
    }

    pub fn setAutoresizesSubviews(_self: *@This(), _autoresizesSubviews: objc.BOOL) void {
        return objc.msgSend(_self, "setAutoresizesSubviews:", void, .{_autoresizesSubviews});
    }

    pub fn autoresizingMask(_self: *@This()) app_kit.AutoresizingMaskOptions {
        return objc.msgSend(_self, "autoresizingMask", app_kit.AutoresizingMaskOptions, .{});
    }

    pub fn setAutoresizingMask(_self: *@This(), _autoresizingMask: app_kit.AutoresizingMaskOptions) void {
        return objc.msgSend(_self, "setAutoresizingMask:", void, .{_autoresizingMask});
    }

    pub fn frame(_self: *@This()) foundation.Rect {
        return objc.msgSend(_self, "frame", foundation.Rect, .{});
    }

    pub fn setFrame(_self: *@This(), _frame: foundation.Rect) void {
        return objc.msgSend(_self, "setFrame:", void, .{_frame});
    }

    pub fn frameRotation(_self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(_self, "frameRotation", core_foundation.CGFloat, .{});
    }

    pub fn setFrameRotation(_self: *@This(), _frameRotation: core_foundation.CGFloat) void {
        return objc.msgSend(_self, "setFrameRotation:", void, .{_frameRotation});
    }

    pub fn frameCenterRotation(_self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(_self, "frameCenterRotation", core_foundation.CGFloat, .{});
    }

    pub fn setFrameCenterRotation(_self: *@This(), _frameCenterRotation: core_foundation.CGFloat) void {
        return objc.msgSend(_self, "setFrameCenterRotation:", void, .{_frameCenterRotation});
    }

    pub fn boundsRotation(_self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(_self, "boundsRotation", core_foundation.CGFloat, .{});
    }

    pub fn setBoundsRotation(_self: *@This(), _boundsRotation: core_foundation.CGFloat) void {
        return objc.msgSend(_self, "setBoundsRotation:", void, .{_boundsRotation});
    }

    pub fn bounds(_self: *@This()) foundation.Rect {
        return objc.msgSend(_self, "bounds", foundation.Rect, .{});
    }

    pub fn setBounds(_self: *@This(), _bounds: foundation.Rect) void {
        return objc.msgSend(_self, "setBounds:", void, .{_bounds});
    }

    pub fn isFlipped(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isFlipped", objc.BOOL, .{});
    }

    pub fn isRotatedFromBase(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isRotatedFromBase", objc.BOOL, .{});
    }

    pub fn isRotatedOrScaledFromBase(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isRotatedOrScaledFromBase", objc.BOOL, .{});
    }

    pub fn isOpaque(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isOpaque", objc.BOOL, .{});
    }

    pub fn canDrawConcurrently(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "canDrawConcurrently", objc.BOOL, .{});
    }

    pub fn setCanDrawConcurrently(_self: *@This(), _canDrawConcurrently: objc.BOOL) void {
        return objc.msgSend(_self, "setCanDrawConcurrently:", void, .{_canDrawConcurrently});
    }

    pub fn canDraw(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "canDraw", objc.BOOL, .{});
    }

    pub fn needsDisplay(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "needsDisplay", objc.BOOL, .{});
    }

    pub fn setNeedsDisplay(_self: *@This(), _needsDisplay: objc.BOOL) void {
        return objc.msgSend(_self, "setNeedsDisplay:", void, .{_needsDisplay});
    }

    pub fn focusView() ?*app_kit.View {
        return objc.msgSend(Internal.class(), "focusView", ?*app_kit.View, .{});
    }

    pub fn visibleRect(_self: *@This()) foundation.Rect {
        return objc.msgSend(_self, "visibleRect", foundation.Rect, .{});
    }

    pub fn tag(_self: *@This()) objc.NSInteger {
        return objc.msgSend(_self, "tag", objc.NSInteger, .{});
    }

    pub fn needsPanelToBecomeKey(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "needsPanelToBecomeKey", objc.BOOL, .{});
    }

    pub fn mouseDownCanMoveWindow(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "mouseDownCanMoveWindow", objc.BOOL, .{});
    }

    pub fn acceptsTouchEvents(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "acceptsTouchEvents", objc.BOOL, .{});
    }

    pub fn setAcceptsTouchEvents(_self: *@This(), _acceptsTouchEvents: objc.BOOL) void {
        return objc.msgSend(_self, "setAcceptsTouchEvents:", void, .{_acceptsTouchEvents});
    }

    pub fn wantsRestingTouches(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "wantsRestingTouches", objc.BOOL, .{});
    }

    pub fn setWantsRestingTouches(_self: *@This(), _wantsRestingTouches: objc.BOOL) void {
        return objc.msgSend(_self, "setWantsRestingTouches:", void, .{_wantsRestingTouches});
    }

    pub fn layerContentsRedrawPolicy(_self: *@This()) app_kit.ViewLayerContentsRedrawPolicy {
        return objc.msgSend(_self, "layerContentsRedrawPolicy", app_kit.ViewLayerContentsRedrawPolicy, .{});
    }

    pub fn setLayerContentsRedrawPolicy(_self: *@This(), _layerContentsRedrawPolicy: app_kit.ViewLayerContentsRedrawPolicy) void {
        return objc.msgSend(_self, "setLayerContentsRedrawPolicy:", void, .{_layerContentsRedrawPolicy});
    }

    pub fn layerContentsPlacement(_self: *@This()) app_kit.ViewLayerContentsPlacement {
        return objc.msgSend(_self, "layerContentsPlacement", app_kit.ViewLayerContentsPlacement, .{});
    }

    pub fn setLayerContentsPlacement(_self: *@This(), _layerContentsPlacement: app_kit.ViewLayerContentsPlacement) void {
        return objc.msgSend(_self, "setLayerContentsPlacement:", void, .{_layerContentsPlacement});
    }

    pub fn wantsLayer(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "wantsLayer", objc.BOOL, .{});
    }

    pub fn setWantsLayer(_self: *@This(), _wantsLayer: objc.BOOL) void {
        return objc.msgSend(_self, "setWantsLayer:", void, .{_wantsLayer});
    }

    pub fn layer(_self: *@This()) ?*quartz_core.Layer {
        return objc.msgSend(_self, "layer", ?*quartz_core.Layer, .{});
    }

    pub fn setLayer(_self: *@This(), _layer: ?*quartz_core.Layer) void {
        return objc.msgSend(_self, "setLayer:", void, .{_layer});
    }

    pub fn wantsUpdateLayer(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "wantsUpdateLayer", objc.BOOL, .{});
    }

    pub fn canDrawSubviewsIntoLayer(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "canDrawSubviewsIntoLayer", objc.BOOL, .{});
    }

    pub fn setCanDrawSubviewsIntoLayer(_self: *@This(), _canDrawSubviewsIntoLayer: objc.BOOL) void {
        return objc.msgSend(_self, "setCanDrawSubviewsIntoLayer:", void, .{_canDrawSubviewsIntoLayer});
    }

    pub fn needsLayout(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "needsLayout", objc.BOOL, .{});
    }

    pub fn setNeedsLayout(_self: *@This(), _needsLayout: objc.BOOL) void {
        return objc.msgSend(_self, "setNeedsLayout:", void, .{_needsLayout});
    }

    pub fn alphaValue(_self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(_self, "alphaValue", core_foundation.CGFloat, .{});
    }

    pub fn setAlphaValue(_self: *@This(), _alphaValue: core_foundation.CGFloat) void {
        return objc.msgSend(_self, "setAlphaValue:", void, .{_alphaValue});
    }

    pub fn layerUsesCoreImageFilters(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "layerUsesCoreImageFilters", objc.BOOL, .{});
    }

    pub fn setLayerUsesCoreImageFilters(_self: *@This(), _layerUsesCoreImageFilters: objc.BOOL) void {
        return objc.msgSend(_self, "setLayerUsesCoreImageFilters:", void, .{_layerUsesCoreImageFilters});
    }

    pub fn backgroundFilters(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "backgroundFilters", ?*anyopaque, .{});
    }

    pub fn setBackgroundFilters(_self: *@This(), _backgroundFilters: ?*anyopaque) void {
        return objc.msgSend(_self, "setBackgroundFilters:", void, .{_backgroundFilters});
    }

    pub fn compositingFilter(_self: *@This()) ?*core_image.Filter {
        return objc.msgSend(_self, "compositingFilter", ?*core_image.Filter, .{});
    }

    pub fn setCompositingFilter(_self: *@This(), _compositingFilter: ?*core_image.Filter) void {
        return objc.msgSend(_self, "setCompositingFilter:", void, .{_compositingFilter});
    }

    pub fn contentFilters(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "contentFilters", ?*anyopaque, .{});
    }

    pub fn setContentFilters(_self: *@This(), _contentFilters: ?*anyopaque) void {
        return objc.msgSend(_self, "setContentFilters:", void, .{_contentFilters});
    }

    pub fn shadow(_self: *@This()) ?*app_kit.Shadow {
        return objc.msgSend(_self, "shadow", ?*app_kit.Shadow, .{});
    }

    pub fn setShadow(_self: *@This(), _shadow: ?*app_kit.Shadow) void {
        return objc.msgSend(_self, "setShadow:", void, .{_shadow});
    }

    pub fn clipsToBounds(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "clipsToBounds", objc.BOOL, .{});
    }

    pub fn setClipsToBounds(_self: *@This(), _clipsToBounds: objc.BOOL) void {
        return objc.msgSend(_self, "setClipsToBounds:", void, .{_clipsToBounds});
    }

    pub fn postsBoundsChangedNotifications(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "postsBoundsChangedNotifications", objc.BOOL, .{});
    }

    pub fn setPostsBoundsChangedNotifications(_self: *@This(), _postsBoundsChangedNotifications: objc.BOOL) void {
        return objc.msgSend(_self, "setPostsBoundsChangedNotifications:", void, .{_postsBoundsChangedNotifications});
    }

    pub fn enclosingScrollView(_self: *@This()) ?*app_kit.ScrollView {
        return objc.msgSend(_self, "enclosingScrollView", ?*app_kit.ScrollView, .{});
    }

    pub fn defaultMenu() ?*app_kit.Menu {
        return objc.msgSend(Internal.class(), "defaultMenu", ?*app_kit.Menu, .{});
    }

    pub fn toolTip(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "toolTip", ?*foundation.String, .{});
    }

    pub fn setToolTip(_self: *@This(), _toolTip: ?*foundation.String) void {
        return objc.msgSend(_self, "setToolTip:", void, .{_toolTip});
    }

    pub fn inLiveResize(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "inLiveResize", objc.BOOL, .{});
    }

    pub fn preservesContentDuringLiveResize(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "preservesContentDuringLiveResize", objc.BOOL, .{});
    }

    pub fn rectPreservedDuringLiveResize(_self: *@This()) foundation.Rect {
        return objc.msgSend(_self, "rectPreservedDuringLiveResize", foundation.Rect, .{});
    }

    pub fn inputContext(_self: *@This()) ?*app_kit.TextInputContext {
        return objc.msgSend(_self, "inputContext", ?*app_kit.TextInputContext, .{});
    }

    pub fn userInterfaceLayoutDirection(_self: *@This()) app_kit.UserInterfaceLayoutDirection {
        return objc.msgSend(_self, "userInterfaceLayoutDirection", app_kit.UserInterfaceLayoutDirection, .{});
    }

    pub fn setUserInterfaceLayoutDirection(_self: *@This(), _userInterfaceLayoutDirection: app_kit.UserInterfaceLayoutDirection) void {
        return objc.msgSend(_self, "setUserInterfaceLayoutDirection:", void, .{_userInterfaceLayoutDirection});
    }

    pub fn isCompatibleWithResponsiveScrolling() objc.BOOL {
        return objc.msgSend(Internal.class(), "isCompatibleWithResponsiveScrolling", objc.BOOL, .{});
    }

    pub fn preparedContentRect(_self: *@This()) foundation.Rect {
        return objc.msgSend(_self, "preparedContentRect", foundation.Rect, .{});
    }

    pub fn setPreparedContentRect(_self: *@This(), _preparedContentRect: foundation.Rect) void {
        return objc.msgSend(_self, "setPreparedContentRect:", void, .{_preparedContentRect});
    }

    pub fn allowsVibrancy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsVibrancy", objc.BOOL, .{});
    }

    pub fn setRegionAnimated(_self: *@This(), _region: CoordinateRegion, _animated: objc.BOOL) void {
        return objc.msgSend(_self, "setRegion:animated:", void, .{ _region, _animated });
    }

    pub fn setCenterCoordinateAnimated(_self: *@This(), _coordinate: core_location.LocationCoordinate2D, _animated: objc.BOOL) void {
        return objc.msgSend(_self, "setCenterCoordinate:animated:", void, .{ _coordinate, _animated });
    }

    pub fn regionThatFits(_self: *@This(), _region: CoordinateRegion) CoordinateRegion {
        return objc.msgSend(_self, "regionThatFits:", CoordinateRegion, .{_region});
    }

    pub fn setVisibleMapRectAnimated(_self: *@This(), _mapRect: MapRect, _animate: objc.BOOL) void {
        return objc.msgSend(_self, "setVisibleMapRect:animated:", void, .{ _mapRect, _animate });
    }

    pub fn mapRectThatFits(_self: *@This(), _mapRect: MapRect) MapRect {
        return objc.msgSend(_self, "mapRectThatFits:", MapRect, .{_mapRect});
    }

    pub fn setVisibleMapRectEdgePaddingAnimated(_self: *@This(), _mapRect: MapRect, _insets: foundation.EdgeInsets, _animate: objc.BOOL) void {
        return objc.msgSend(_self, "setVisibleMapRect:edgePadding:animated:", void, .{ _mapRect, _insets, _animate });
    }

    pub fn mapRectThatFitsEdgePadding(_self: *@This(), _mapRect: MapRect, _insets: foundation.EdgeInsets) MapRect {
        return objc.msgSend(_self, "mapRectThatFits:edgePadding:", MapRect, .{ _mapRect, _insets });
    }

    pub fn setCameraAnimated(_self: *@This(), _camera: ?*MapCamera, _animated: objc.BOOL) void {
        return objc.msgSend(_self, "setCamera:animated:", void, .{ _camera, _animated });
    }

    pub fn setCameraZoomRangeAnimated(_self: *@This(), _cameraZoomRange: ?*MapCameraZoomRange, _animated: objc.BOOL) void {
        return objc.msgSend(_self, "setCameraZoomRange:animated:", void, .{ _cameraZoomRange, _animated });
    }

    pub fn setCameraBoundaryAnimated(_self: *@This(), _cameraBoundary: ?*MapCameraBoundary, _animated: objc.BOOL) void {
        return objc.msgSend(_self, "setCameraBoundary:animated:", void, .{ _cameraBoundary, _animated });
    }

    pub fn convertCoordinateToPointToView(_self: *@This(), _coordinate: core_location.LocationCoordinate2D, _view: ?*app_kit.View) core_foundation.CGPoint {
        return objc.msgSend(_self, "convertCoordinate:toPointToView:", core_foundation.CGPoint, .{ _coordinate, _view });
    }

    pub fn convertPointToCoordinateFromView(_self: *@This(), _point: core_foundation.CGPoint, _view: ?*app_kit.View) core_location.LocationCoordinate2D {
        return objc.msgSend(_self, "convertPoint:toCoordinateFromView:", core_location.LocationCoordinate2D, .{ _point, _view });
    }

    pub fn convertRegionToRectToView(_self: *@This(), _region: CoordinateRegion, _view: ?*app_kit.View) core_foundation.CGRect {
        return objc.msgSend(_self, "convertRegion:toRectToView:", core_foundation.CGRect, .{ _region, _view });
    }

    pub fn convertRectToRegionFromView(_self: *@This(), _rect: core_foundation.CGRect, _view: ?*app_kit.View) CoordinateRegion {
        return objc.msgSend(_self, "convertRect:toRegionFromView:", CoordinateRegion, .{ _rect, _view });
    }

    pub fn setUserTrackingModeAnimated(_self: *@This(), _mode: UserTrackingMode, _animated: objc.BOOL) void {
        return objc.msgSend(_self, "setUserTrackingMode:animated:", void, .{ _mode, _animated });
    }

    pub fn addAnnotation(_self: *@This(), _annotation: ?*anyopaque) void {
        return objc.msgSend(_self, "addAnnotation:", void, .{_annotation});
    }

    pub fn addAnnotations(_self: *@This(), _annotations: ?*anyopaque) void {
        return objc.msgSend(_self, "addAnnotations:", void, .{_annotations});
    }

    pub fn removeAnnotation(_self: *@This(), _annotation: ?*anyopaque) void {
        return objc.msgSend(_self, "removeAnnotation:", void, .{_annotation});
    }

    pub fn removeAnnotations(_self: *@This(), _annotations: ?*anyopaque) void {
        return objc.msgSend(_self, "removeAnnotations:", void, .{_annotations});
    }

    pub fn annotationsInMapRect(_self: *@This(), _mapRect: MapRect) ?*anyopaque {
        return objc.msgSend(_self, "annotationsInMapRect:", ?*anyopaque, .{_mapRect});
    }

    pub fn viewForAnnotation(_self: *@This(), _annotation: ?*anyopaque) ?*AnnotationView {
        return objc.msgSend(_self, "viewForAnnotation:", ?*AnnotationView, .{_annotation});
    }

    pub fn dequeueReusableAnnotationViewWithIdentifier(_self: *@This(), _identifier: ?*foundation.String) ?*AnnotationView {
        return objc.msgSend(_self, "dequeueReusableAnnotationViewWithIdentifier:", ?*AnnotationView, .{_identifier});
    }

    pub fn dequeueReusableAnnotationViewWithIdentifierForAnnotation(_self: *@This(), _identifier: ?*foundation.String, _annotation: ?*anyopaque) ?*AnnotationView {
        return objc.msgSend(_self, "dequeueReusableAnnotationViewWithIdentifier:forAnnotation:", ?*AnnotationView, .{ _identifier, _annotation });
    }

    pub fn registerClassForAnnotationViewWithReuseIdentifier(_self: *@This(), _viewClass: objc.Class, _identifier: ?*foundation.String) void {
        return objc.msgSend(_self, "registerClass:forAnnotationViewWithReuseIdentifier:", void, .{ _viewClass, _identifier });
    }

    pub fn selectAnnotationAnimated(_self: *@This(), _annotation: ?*anyopaque, _animated: objc.BOOL) void {
        return objc.msgSend(_self, "selectAnnotation:animated:", void, .{ _annotation, _animated });
    }

    pub fn deselectAnnotationAnimated(_self: *@This(), _annotation: ?*anyopaque, _animated: objc.BOOL) void {
        return objc.msgSend(_self, "deselectAnnotation:animated:", void, .{ _annotation, _animated });
    }

    pub fn showAnnotationsAnimated(_self: *@This(), _annotations: ?*anyopaque, _animated: objc.BOOL) void {
        return objc.msgSend(_self, "showAnnotations:animated:", void, .{ _annotations, _animated });
    }

    pub fn delegate(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "delegate", ?*anyopaque, .{});
    }

    pub fn setDelegate(_self: *@This(), _delegate: ?*anyopaque) void {
        return objc.msgSend(_self, "setDelegate:", void, .{_delegate});
    }

    pub fn mapType(_self: *@This()) MapType {
        return objc.msgSend(_self, "mapType", MapType, .{});
    }

    pub fn setMapType(_self: *@This(), _mapType: MapType) void {
        return objc.msgSend(_self, "setMapType:", void, .{_mapType});
    }

    pub fn preferredConfiguration(_self: *@This()) ?*MapConfiguration {
        return objc.msgSend(_self, "preferredConfiguration", ?*MapConfiguration, .{});
    }

    pub fn setPreferredConfiguration(_self: *@This(), _preferredConfiguration: ?*MapConfiguration) void {
        return objc.msgSend(_self, "setPreferredConfiguration:", void, .{_preferredConfiguration});
    }

    pub fn region(_self: *@This()) CoordinateRegion {
        return objc.msgSend(_self, "region", CoordinateRegion, .{});
    }

    pub fn setRegion(_self: *@This(), _region: CoordinateRegion) void {
        return objc.msgSend(_self, "setRegion:", void, .{_region});
    }

    pub fn centerCoordinate(_self: *@This()) core_location.LocationCoordinate2D {
        return objc.msgSend(_self, "centerCoordinate", core_location.LocationCoordinate2D, .{});
    }

    pub fn setCenterCoordinate(_self: *@This(), _centerCoordinate: core_location.LocationCoordinate2D) void {
        return objc.msgSend(_self, "setCenterCoordinate:", void, .{_centerCoordinate});
    }

    pub fn visibleMapRect(_self: *@This()) MapRect {
        return objc.msgSend(_self, "visibleMapRect", MapRect, .{});
    }

    pub fn setVisibleMapRect(_self: *@This(), _visibleMapRect: MapRect) void {
        return objc.msgSend(_self, "setVisibleMapRect:", void, .{_visibleMapRect});
    }

    pub fn camera(_self: *@This()) ?*MapCamera {
        return objc.msgSend(_self, "camera", ?*MapCamera, .{});
    }

    pub fn setCamera(_self: *@This(), _camera: ?*MapCamera) void {
        return objc.msgSend(_self, "setCamera:", void, .{_camera});
    }

    pub fn cameraZoomRange(_self: *@This()) ?*MapCameraZoomRange {
        return objc.msgSend(_self, "cameraZoomRange", ?*MapCameraZoomRange, .{});
    }

    pub fn setCameraZoomRange(_self: *@This(), _cameraZoomRange: ?*MapCameraZoomRange) void {
        return objc.msgSend(_self, "setCameraZoomRange:", void, .{_cameraZoomRange});
    }

    pub fn cameraBoundary(_self: *@This()) ?*MapCameraBoundary {
        return objc.msgSend(_self, "cameraBoundary", ?*MapCameraBoundary, .{});
    }

    pub fn setCameraBoundary(_self: *@This(), _cameraBoundary: ?*MapCameraBoundary) void {
        return objc.msgSend(_self, "setCameraBoundary:", void, .{_cameraBoundary});
    }

    pub fn isZoomEnabled(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isZoomEnabled", objc.BOOL, .{});
    }

    pub fn setZoomEnabled(_self: *@This(), _zoomEnabled: objc.BOOL) void {
        return objc.msgSend(_self, "setZoomEnabled:", void, .{_zoomEnabled});
    }

    pub fn isScrollEnabled(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isScrollEnabled", objc.BOOL, .{});
    }

    pub fn setScrollEnabled(_self: *@This(), _scrollEnabled: objc.BOOL) void {
        return objc.msgSend(_self, "setScrollEnabled:", void, .{_scrollEnabled});
    }

    pub fn isRotateEnabled(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isRotateEnabled", objc.BOOL, .{});
    }

    pub fn setRotateEnabled(_self: *@This(), _rotateEnabled: objc.BOOL) void {
        return objc.msgSend(_self, "setRotateEnabled:", void, .{_rotateEnabled});
    }

    pub fn isPitchEnabled(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isPitchEnabled", objc.BOOL, .{});
    }

    pub fn setPitchEnabled(_self: *@This(), _pitchEnabled: objc.BOOL) void {
        return objc.msgSend(_self, "setPitchEnabled:", void, .{_pitchEnabled});
    }

    pub fn showsUserTrackingButton(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "showsUserTrackingButton", objc.BOOL, .{});
    }

    pub fn setShowsUserTrackingButton(_self: *@This(), _showsUserTrackingButton: objc.BOOL) void {
        return objc.msgSend(_self, "setShowsUserTrackingButton:", void, .{_showsUserTrackingButton});
    }

    pub fn pitchButtonVisibility(_self: *@This()) FeatureVisibility {
        return objc.msgSend(_self, "pitchButtonVisibility", FeatureVisibility, .{});
    }

    pub fn setPitchButtonVisibility(_self: *@This(), _pitchButtonVisibility: FeatureVisibility) void {
        return objc.msgSend(_self, "setPitchButtonVisibility:", void, .{_pitchButtonVisibility});
    }

    pub fn showsPitchControl(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "showsPitchControl", objc.BOOL, .{});
    }

    pub fn setShowsPitchControl(_self: *@This(), _showsPitchControl: objc.BOOL) void {
        return objc.msgSend(_self, "setShowsPitchControl:", void, .{_showsPitchControl});
    }

    pub fn showsZoomControls(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "showsZoomControls", objc.BOOL, .{});
    }

    pub fn setShowsZoomControls(_self: *@This(), _showsZoomControls: objc.BOOL) void {
        return objc.msgSend(_self, "setShowsZoomControls:", void, .{_showsZoomControls});
    }

    pub fn showsCompass(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "showsCompass", objc.BOOL, .{});
    }

    pub fn setShowsCompass(_self: *@This(), _showsCompass: objc.BOOL) void {
        return objc.msgSend(_self, "setShowsCompass:", void, .{_showsCompass});
    }

    pub fn showsScale(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "showsScale", objc.BOOL, .{});
    }

    pub fn setShowsScale(_self: *@This(), _showsScale: objc.BOOL) void {
        return objc.msgSend(_self, "setShowsScale:", void, .{_showsScale});
    }

    pub fn pointOfInterestFilter(_self: *@This()) ?*PointOfInterestFilter {
        return objc.msgSend(_self, "pointOfInterestFilter", ?*PointOfInterestFilter, .{});
    }

    pub fn setPointOfInterestFilter(_self: *@This(), _pointOfInterestFilter: ?*PointOfInterestFilter) void {
        return objc.msgSend(_self, "setPointOfInterestFilter:", void, .{_pointOfInterestFilter});
    }

    pub fn showsPointsOfInterest(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "showsPointsOfInterest", objc.BOOL, .{});
    }

    pub fn setShowsPointsOfInterest(_self: *@This(), _showsPointsOfInterest: objc.BOOL) void {
        return objc.msgSend(_self, "setShowsPointsOfInterest:", void, .{_showsPointsOfInterest});
    }

    pub fn showsBuildings(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "showsBuildings", objc.BOOL, .{});
    }

    pub fn setShowsBuildings(_self: *@This(), _showsBuildings: objc.BOOL) void {
        return objc.msgSend(_self, "setShowsBuildings:", void, .{_showsBuildings});
    }

    pub fn showsTraffic(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "showsTraffic", objc.BOOL, .{});
    }

    pub fn setShowsTraffic(_self: *@This(), _showsTraffic: objc.BOOL) void {
        return objc.msgSend(_self, "setShowsTraffic:", void, .{_showsTraffic});
    }

    pub fn showsUserLocation(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "showsUserLocation", objc.BOOL, .{});
    }

    pub fn setShowsUserLocation(_self: *@This(), _showsUserLocation: objc.BOOL) void {
        return objc.msgSend(_self, "setShowsUserLocation:", void, .{_showsUserLocation});
    }

    pub fn userLocation(_self: *@This()) ?*UserLocation {
        return objc.msgSend(_self, "userLocation", ?*UserLocation, .{});
    }

    pub fn userTrackingMode(_self: *@This()) UserTrackingMode {
        return objc.msgSend(_self, "userTrackingMode", UserTrackingMode, .{});
    }

    pub fn setUserTrackingMode(_self: *@This(), _userTrackingMode: UserTrackingMode) void {
        return objc.msgSend(_self, "setUserTrackingMode:", void, .{_userTrackingMode});
    }

    pub fn isUserLocationVisible(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isUserLocationVisible", objc.BOOL, .{});
    }

    pub fn annotations(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "annotations", ?*anyopaque, .{});
    }

    pub fn selectedAnnotations(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "selectedAnnotations", ?*anyopaque, .{});
    }

    pub fn setSelectedAnnotations(_self: *@This(), _selectedAnnotations: ?*anyopaque) void {
        return objc.msgSend(_self, "setSelectedAnnotations:", void, .{_selectedAnnotations});
    }

    pub fn annotationVisibleRect(_self: *@This()) core_foundation.CGRect {
        return objc.msgSend(_self, "annotationVisibleRect", core_foundation.CGRect, .{});
    }
};

/// https://developer.apple.com/documentation/MapKit/MKMapViewDelegate?language=objc
pub const MapViewDelegate = opaque {
    pub const Internal = objc.ExternProtocol(@This(), &.{objc.NSObject});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "description", ?*foundation.String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "debugDescription", ?*foundation.String, .{});
    }

    pub fn mapViewRegionWillChangeAnimated(_self: *@This(), _mapView: ?*MapView, _animated: objc.BOOL) void {
        return objc.msgSend(_self, "mapView:regionWillChangeAnimated:", void, .{ _mapView, _animated });
    }

    pub fn mapViewRegionDidChangeAnimated(_self: *@This(), _mapView: ?*MapView, _animated: objc.BOOL) void {
        return objc.msgSend(_self, "mapView:regionDidChangeAnimated:", void, .{ _mapView, _animated });
    }

    pub fn mapViewDidChangeVisibleRegion(_self: *@This(), _mapView: ?*MapView) void {
        return objc.msgSend(_self, "mapViewDidChangeVisibleRegion:", void, .{_mapView});
    }

    pub fn mapViewWillStartLoadingMap(_self: *@This(), _mapView: ?*MapView) void {
        return objc.msgSend(_self, "mapViewWillStartLoadingMap:", void, .{_mapView});
    }

    pub fn mapViewDidFinishLoadingMap(_self: *@This(), _mapView: ?*MapView) void {
        return objc.msgSend(_self, "mapViewDidFinishLoadingMap:", void, .{_mapView});
    }

    pub fn mapViewDidFailLoadingMapWithError(_self: *@This(), _mapView: ?*MapView, _error: ?*foundation.Error) void {
        return objc.msgSend(_self, "mapViewDidFailLoadingMap:withError:", void, .{ _mapView, _error });
    }

    pub fn mapViewWillStartRenderingMap(_self: *@This(), _mapView: ?*MapView) void {
        return objc.msgSend(_self, "mapViewWillStartRenderingMap:", void, .{_mapView});
    }

    pub fn mapViewDidFinishRenderingMapFullyRendered(_self: *@This(), _mapView: ?*MapView, _fullyRendered: objc.BOOL) void {
        return objc.msgSend(_self, "mapViewDidFinishRenderingMap:fullyRendered:", void, .{ _mapView, _fullyRendered });
    }

    pub fn mapViewViewForAnnotation(_self: *@This(), _mapView: ?*MapView, _annotation: ?*anyopaque) ?*AnnotationView {
        return objc.msgSend(_self, "mapView:viewForAnnotation:", ?*AnnotationView, .{ _mapView, _annotation });
    }

    pub fn mapViewDidAddAnnotationViews(_self: *@This(), _mapView: ?*MapView, _views: ?*anyopaque) void {
        return objc.msgSend(_self, "mapView:didAddAnnotationViews:", void, .{ _mapView, _views });
    }

    pub fn mapViewDidSelectAnnotationView(_self: *@This(), _mapView: ?*MapView, _view: ?*AnnotationView) void {
        return objc.msgSend(_self, "mapView:didSelectAnnotationView:", void, .{ _mapView, _view });
    }

    pub fn mapViewDidDeselectAnnotationView(_self: *@This(), _mapView: ?*MapView, _view: ?*AnnotationView) void {
        return objc.msgSend(_self, "mapView:didDeselectAnnotationView:", void, .{ _mapView, _view });
    }

    pub fn mapViewDidSelectAnnotation(_self: *@This(), _mapView: ?*MapView, _annotation: ?*anyopaque) void {
        return objc.msgSend(_self, "mapView:didSelectAnnotation:", void, .{ _mapView, _annotation });
    }

    pub fn mapViewDidDeselectAnnotation(_self: *@This(), _mapView: ?*MapView, _annotation: ?*anyopaque) void {
        return objc.msgSend(_self, "mapView:didDeselectAnnotation:", void, .{ _mapView, _annotation });
    }

    pub fn mapViewSelectionAccessoryForAnnotation(_self: *@This(), _mapView: ?*MapView, _annotation: ?*anyopaque) ?*SelectionAccessory {
        return objc.msgSend(_self, "mapView:selectionAccessoryForAnnotation:", ?*SelectionAccessory, .{ _mapView, _annotation });
    }

    pub fn mapViewWillStartLocatingUser(_self: *@This(), _mapView: ?*MapView) void {
        return objc.msgSend(_self, "mapViewWillStartLocatingUser:", void, .{_mapView});
    }

    pub fn mapViewDidStopLocatingUser(_self: *@This(), _mapView: ?*MapView) void {
        return objc.msgSend(_self, "mapViewDidStopLocatingUser:", void, .{_mapView});
    }

    pub fn mapViewDidUpdateUserLocation(_self: *@This(), _mapView: ?*MapView, _userLocation: ?*UserLocation) void {
        return objc.msgSend(_self, "mapView:didUpdateUserLocation:", void, .{ _mapView, _userLocation });
    }

    pub fn mapViewDidFailToLocateUserWithError(_self: *@This(), _mapView: ?*MapView, _error: ?*foundation.Error) void {
        return objc.msgSend(_self, "mapView:didFailToLocateUserWithError:", void, .{ _mapView, _error });
    }

    pub fn mapViewAnnotationViewDidChangeDragStateFromOldState(
        _self: *@This(),
        _mapView: ?*MapView,
        _view: ?*AnnotationView,
        _newState: AnnotationViewDragState,
        _oldState: AnnotationViewDragState,
    ) void {
        return objc.msgSend(_self, "mapView:annotationView:didChangeDragState:fromOldState:", void, .{
            _mapView,
            _view,
            _newState,
            _oldState,
        });
    }

    pub fn mapViewDidChangeUserTrackingModeAnimated(_self: *@This(), _mapView: ?*MapView, _mode: UserTrackingMode, _animated: objc.BOOL) void {
        return objc.msgSend(_self, "mapView:didChangeUserTrackingMode:animated:", void, .{ _mapView, _mode, _animated });
    }

    pub fn mapViewRendererForOverlay(_self: *@This(), _mapView: ?*MapView, _overlay: ?*anyopaque) ?*OverlayRenderer {
        return objc.msgSend(_self, "mapView:rendererForOverlay:", ?*OverlayRenderer, .{ _mapView, _overlay });
    }

    pub fn mapViewDidAddOverlayRenderers(_self: *@This(), _mapView: ?*MapView, _renderers: ?*anyopaque) void {
        return objc.msgSend(_self, "mapView:didAddOverlayRenderers:", void, .{ _mapView, _renderers });
    }

    pub fn mapViewClusterAnnotationForMemberAnnotations(_self: *@This(), _mapView: ?*MapView, _memberAnnotations: ?*anyopaque) ?*ClusterAnnotation {
        return objc.msgSend(_self, "mapView:clusterAnnotationForMemberAnnotations:", ?*ClusterAnnotation, .{ _mapView, _memberAnnotations });
    }
};

/// https://developer.apple.com/documentation/MapKit/MKMarkerAnnotationView?language=objc
pub const MarkerAnnotationView = opaque {
    pub const Internal = objc.ExternClass("MKMarkerAnnotationView", @This(), AnnotationView, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "description", ?*foundation.String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "debugDescription", ?*foundation.String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*foundation.Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*foundation.MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*foundation.MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*foundation.MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*foundation.MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*foundation.Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*foundation.Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn tryToPerformWith(_self: *@This(), _action: objc.Selector, _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "tryToPerform:with:", objc.BOOL, .{ _action, _object });
    }

    pub fn performKeyEquivalent(_self: *@This(), _event: ?*app_kit.Event) objc.BOOL {
        return objc.msgSend(_self, "performKeyEquivalent:", objc.BOOL, .{_event});
    }

    pub fn validRequestorForSendTypeReturnType(_self: *@This(), _sendType: app_kit.PasteboardType, _returnType: app_kit.PasteboardType) ?objc.Id {
        return objc.msgSend(_self, "validRequestorForSendType:returnType:", ?objc.Id, .{ _sendType, _returnType });
    }

    pub fn mouseDown(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "mouseDown:", void, .{_event});
    }

    pub fn rightMouseDown(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "rightMouseDown:", void, .{_event});
    }

    pub fn otherMouseDown(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "otherMouseDown:", void, .{_event});
    }

    pub fn mouseUp(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "mouseUp:", void, .{_event});
    }

    pub fn rightMouseUp(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "rightMouseUp:", void, .{_event});
    }

    pub fn otherMouseUp(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "otherMouseUp:", void, .{_event});
    }

    pub fn mouseMoved(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "mouseMoved:", void, .{_event});
    }

    pub fn mouseDragged(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "mouseDragged:", void, .{_event});
    }

    pub fn scrollWheel(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "scrollWheel:", void, .{_event});
    }

    pub fn rightMouseDragged(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "rightMouseDragged:", void, .{_event});
    }

    pub fn otherMouseDragged(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "otherMouseDragged:", void, .{_event});
    }

    pub fn mouseEntered(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "mouseEntered:", void, .{_event});
    }

    pub fn mouseExited(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "mouseExited:", void, .{_event});
    }

    pub fn keyDown(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "keyDown:", void, .{_event});
    }

    pub fn keyUp(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "keyUp:", void, .{_event});
    }

    pub fn flagsChanged(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "flagsChanged:", void, .{_event});
    }

    pub fn tabletPoint(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "tabletPoint:", void, .{_event});
    }

    pub fn tabletProximity(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "tabletProximity:", void, .{_event});
    }

    pub fn cursorUpdate(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "cursorUpdate:", void, .{_event});
    }

    pub fn magnifyWithEvent(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "magnifyWithEvent:", void, .{_event});
    }

    pub fn rotateWithEvent(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "rotateWithEvent:", void, .{_event});
    }

    pub fn swipeWithEvent(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "swipeWithEvent:", void, .{_event});
    }

    pub fn beginGestureWithEvent(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "beginGestureWithEvent:", void, .{_event});
    }

    pub fn endGestureWithEvent(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "endGestureWithEvent:", void, .{_event});
    }

    pub fn smartMagnifyWithEvent(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "smartMagnifyWithEvent:", void, .{_event});
    }

    pub fn changeModeWithEvent(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "changeModeWithEvent:", void, .{_event});
    }

    pub fn touchesBeganWithEvent(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "touchesBeganWithEvent:", void, .{_event});
    }

    pub fn touchesMovedWithEvent(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "touchesMovedWithEvent:", void, .{_event});
    }

    pub fn touchesEndedWithEvent(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "touchesEndedWithEvent:", void, .{_event});
    }

    pub fn touchesCancelledWithEvent(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "touchesCancelledWithEvent:", void, .{_event});
    }

    pub fn quickLookWithEvent(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "quickLookWithEvent:", void, .{_event});
    }

    pub fn pressureChangeWithEvent(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "pressureChangeWithEvent:", void, .{_event});
    }

    pub fn contextMenuKeyDown(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "contextMenuKeyDown:", void, .{_event});
    }

    pub fn noResponderFor(_self: *@This(), _eventSelector: objc.Selector) void {
        return objc.msgSend(_self, "noResponderFor:", void, .{_eventSelector});
    }

    pub fn becomeFirstResponder(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "becomeFirstResponder", objc.BOOL, .{});
    }

    pub fn resignFirstResponder(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "resignFirstResponder", objc.BOOL, .{});
    }

    pub fn interpretKeyEvents(_self: *@This(), _eventArray: ?*anyopaque) void {
        return objc.msgSend(_self, "interpretKeyEvents:", void, .{_eventArray});
    }

    pub fn flushBufferedKeyEvents(_self: *@This()) void {
        return objc.msgSend(_self, "flushBufferedKeyEvents", void, .{});
    }

    pub fn showContextHelp(_self: *@This(), _sender: ?objc.Id) void {
        return objc.msgSend(_self, "showContextHelp:", void, .{_sender});
    }

    pub fn helpRequested(_self: *@This(), _eventPtr: ?*app_kit.Event) void {
        return objc.msgSend(_self, "helpRequested:", void, .{_eventPtr});
    }

    pub fn shouldBeTreatedAsInkEvent(_self: *@This(), _event: ?*app_kit.Event) objc.BOOL {
        return objc.msgSend(_self, "shouldBeTreatedAsInkEvent:", objc.BOOL, .{_event});
    }

    pub fn wantsScrollEventsForSwipeTrackingOnAxis(_self: *@This(), _axis: app_kit.EventGestureAxis) objc.BOOL {
        return objc.msgSend(_self, "wantsScrollEventsForSwipeTrackingOnAxis:", objc.BOOL, .{_axis});
    }

    pub fn wantsForwardedScrollEventsForAxis(_self: *@This(), _axis: app_kit.EventGestureAxis) objc.BOOL {
        return objc.msgSend(_self, "wantsForwardedScrollEventsForAxis:", objc.BOOL, .{_axis});
    }

    pub fn supplementalTargetForActionSender(_self: *@This(), _action: objc.Selector, _sender: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "supplementalTargetForAction:sender:", ?objc.Id, .{ _action, _sender });
    }

    pub fn nextResponder(_self: *@This()) ?*app_kit.Responder {
        return objc.msgSend(_self, "nextResponder", ?*app_kit.Responder, .{});
    }

    pub fn setNextResponder(_self: *@This(), _nextResponder: ?*app_kit.Responder) void {
        return objc.msgSend(_self, "setNextResponder:", void, .{_nextResponder});
    }

    pub fn acceptsFirstResponder(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "acceptsFirstResponder", objc.BOOL, .{});
    }

    pub fn menu(_self: *@This()) ?*app_kit.Menu {
        return objc.msgSend(_self, "menu", ?*app_kit.Menu, .{});
    }

    pub fn setMenu(_self: *@This(), _menu: ?*app_kit.Menu) void {
        return objc.msgSend(_self, "setMenu:", void, .{_menu});
    }

    pub fn animator(_self: *@This()) *@This() {
        return objc.msgSend(_self, "animator", *@This(), .{});
    }

    pub fn animationForKey(_self: *@This(), _key: app_kit.AnimatablePropertyKey) ?objc.Id {
        return objc.msgSend(_self, "animationForKey:", ?objc.Id, .{_key});
    }

    pub fn defaultAnimationForKey(_key: app_kit.AnimatablePropertyKey) ?objc.Id {
        return objc.msgSend(Internal.class(), "defaultAnimationForKey:", ?objc.Id, .{_key});
    }

    pub fn animations(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "animations", ?*anyopaque, .{});
    }

    pub fn setAnimations(_self: *@This(), _animations: ?*anyopaque) void {
        return objc.msgSend(_self, "setAnimations:", void, .{_animations});
    }

    pub fn identifier(_self: *@This()) app_kit.UserInterfaceItemIdentifier {
        return objc.msgSend(_self, "identifier", app_kit.UserInterfaceItemIdentifier, .{});
    }

    pub fn setIdentifier(_self: *@This(), _identifier: app_kit.UserInterfaceItemIdentifier) void {
        return objc.msgSend(_self, "setIdentifier:", void, .{_identifier});
    }

    pub fn draggingEntered(_self: *@This(), _sender: ?*anyopaque) app_kit.DragOperation {
        return objc.msgSend(_self, "draggingEntered:", app_kit.DragOperation, .{_sender});
    }

    pub fn draggingUpdated(_self: *@This(), _sender: ?*anyopaque) app_kit.DragOperation {
        return objc.msgSend(_self, "draggingUpdated:", app_kit.DragOperation, .{_sender});
    }

    pub fn draggingExited(_self: *@This(), _sender: ?*anyopaque) void {
        return objc.msgSend(_self, "draggingExited:", void, .{_sender});
    }

    pub fn prepareForDragOperation(_self: *@This(), _sender: ?*anyopaque) objc.BOOL {
        return objc.msgSend(_self, "prepareForDragOperation:", objc.BOOL, .{_sender});
    }

    pub fn performDragOperation(_self: *@This(), _sender: ?*anyopaque) objc.BOOL {
        return objc.msgSend(_self, "performDragOperation:", objc.BOOL, .{_sender});
    }

    pub fn concludeDragOperation(_self: *@This(), _sender: ?*anyopaque) void {
        return objc.msgSend(_self, "concludeDragOperation:", void, .{_sender});
    }

    pub fn draggingEnded(_self: *@This(), _sender: ?*anyopaque) void {
        return objc.msgSend(_self, "draggingEnded:", void, .{_sender});
    }

    pub fn wantsPeriodicDraggingUpdates(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "wantsPeriodicDraggingUpdates", objc.BOOL, .{});
    }

    pub fn updateDraggingItemsForDrag(_self: *@This(), _sender: ?*anyopaque) void {
        return objc.msgSend(_self, "updateDraggingItemsForDrag:", void, .{_sender});
    }

    pub fn appearance(_self: *@This()) ?*app_kit.Appearance {
        return objc.msgSend(_self, "appearance", ?*app_kit.Appearance, .{});
    }

    pub fn setAppearance(_self: *@This(), _appearance: ?*app_kit.Appearance) void {
        return objc.msgSend(_self, "setAppearance:", void, .{_appearance});
    }

    pub fn effectiveAppearance(_self: *@This()) ?*app_kit.Appearance {
        return objc.msgSend(_self, "effectiveAppearance", ?*app_kit.Appearance, .{});
    }

    pub fn accessibilityFrame(_self: *@This()) foundation.Rect {
        return objc.msgSend(_self, "accessibilityFrame", foundation.Rect, .{});
    }

    pub fn accessibilityParent(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityParent", ?objc.Id, .{});
    }

    pub fn isAccessibilityFocused(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isAccessibilityFocused", objc.BOOL, .{});
    }

    pub fn accessibilityIdentifier(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "accessibilityIdentifier", ?*foundation.String, .{});
    }

    pub fn accessibilityLayoutPointForScreenPoint(_self: *@This(), _point: foundation.Point) foundation.Point {
        return objc.msgSend(_self, "accessibilityLayoutPointForScreenPoint:", foundation.Point, .{_point});
    }

    pub fn accessibilityLayoutSizeForScreenSize(_self: *@This(), _size: foundation.Size) foundation.Size {
        return objc.msgSend(_self, "accessibilityLayoutSizeForScreenSize:", foundation.Size, .{_size});
    }

    pub fn accessibilityScreenPointForLayoutPoint(_self: *@This(), _point: foundation.Point) foundation.Point {
        return objc.msgSend(_self, "accessibilityScreenPointForLayoutPoint:", foundation.Point, .{_point});
    }

    pub fn accessibilityScreenSizeForLayoutSize(_self: *@This(), _size: foundation.Size) foundation.Size {
        return objc.msgSend(_self, "accessibilityScreenSizeForLayoutSize:", foundation.Size, .{_size});
    }

    pub fn accessibilityCellForColumnRow(_self: *@This(), _column: objc.NSInteger, _row: objc.NSInteger) ?objc.Id {
        return objc.msgSend(_self, "accessibilityCellForColumn:row:", ?objc.Id, .{ _column, _row });
    }

    pub fn accessibilityAttributedStringForRange(_self: *@This(), _range: foundation.Range) ?*foundation.AttributedString {
        return objc.msgSend(_self, "accessibilityAttributedStringForRange:", ?*foundation.AttributedString, .{_range});
    }

    pub fn accessibilityRangeForLine(_self: *@This(), _line: objc.NSInteger) foundation.Range {
        return objc.msgSend(_self, "accessibilityRangeForLine:", foundation.Range, .{_line});
    }

    pub fn accessibilityStringForRange(_self: *@This(), _range: foundation.Range) ?*foundation.String {
        return objc.msgSend(_self, "accessibilityStringForRange:", ?*foundation.String, .{_range});
    }

    pub fn accessibilityRangeForPosition(_self: *@This(), _point: foundation.Point) foundation.Range {
        return objc.msgSend(_self, "accessibilityRangeForPosition:", foundation.Range, .{_point});
    }

    pub fn accessibilityRangeForIndex(_self: *@This(), _index: objc.NSInteger) foundation.Range {
        return objc.msgSend(_self, "accessibilityRangeForIndex:", foundation.Range, .{_index});
    }

    pub fn accessibilityFrameForRange(_self: *@This(), _range: foundation.Range) foundation.Rect {
        return objc.msgSend(_self, "accessibilityFrameForRange:", foundation.Rect, .{_range});
    }

    pub fn accessibilityRTFForRange(_self: *@This(), _range: foundation.Range) ?*foundation.Data {
        return objc.msgSend(_self, "accessibilityRTFForRange:", ?*foundation.Data, .{_range});
    }

    pub fn accessibilityStyleRangeForIndex(_self: *@This(), _index: objc.NSInteger) foundation.Range {
        return objc.msgSend(_self, "accessibilityStyleRangeForIndex:", foundation.Range, .{_index});
    }

    pub fn accessibilityLineForIndex(_self: *@This(), _index: objc.NSInteger) objc.NSInteger {
        return objc.msgSend(_self, "accessibilityLineForIndex:", objc.NSInteger, .{_index});
    }

    pub fn accessibilityPerformCancel(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "accessibilityPerformCancel", objc.BOOL, .{});
    }

    pub fn accessibilityPerformConfirm(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "accessibilityPerformConfirm", objc.BOOL, .{});
    }

    pub fn accessibilityPerformDecrement(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "accessibilityPerformDecrement", objc.BOOL, .{});
    }

    pub fn accessibilityPerformDelete(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "accessibilityPerformDelete", objc.BOOL, .{});
    }

    pub fn accessibilityPerformIncrement(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "accessibilityPerformIncrement", objc.BOOL, .{});
    }

    pub fn accessibilityPerformPick(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "accessibilityPerformPick", objc.BOOL, .{});
    }

    pub fn accessibilityPerformPress(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "accessibilityPerformPress", objc.BOOL, .{});
    }

    pub fn accessibilityPerformRaise(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "accessibilityPerformRaise", objc.BOOL, .{});
    }

    pub fn accessibilityPerformShowAlternateUI(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "accessibilityPerformShowAlternateUI", objc.BOOL, .{});
    }

    pub fn accessibilityPerformShowDefaultUI(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "accessibilityPerformShowDefaultUI", objc.BOOL, .{});
    }

    pub fn accessibilityPerformShowMenu(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "accessibilityPerformShowMenu", objc.BOOL, .{});
    }

    pub fn isAccessibilitySelectorAllowed(_self: *@This(), _selector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "isAccessibilitySelectorAllowed:", objc.BOOL, .{_selector});
    }

    pub fn isAccessibilityElement(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isAccessibilityElement", objc.BOOL, .{});
    }

    pub fn setAccessibilityElement(_self: *@This(), _accessibilityElement: objc.BOOL) void {
        return objc.msgSend(_self, "setAccessibilityElement:", void, .{_accessibilityElement});
    }

    pub fn setAccessibilityFrame(_self: *@This(), _accessibilityFrame: foundation.Rect) void {
        return objc.msgSend(_self, "setAccessibilityFrame:", void, .{_accessibilityFrame});
    }

    pub fn setAccessibilityFocused(_self: *@This(), _accessibilityFocused: objc.BOOL) void {
        return objc.msgSend(_self, "setAccessibilityFocused:", void, .{_accessibilityFocused});
    }

    pub fn accessibilityActivationPoint(_self: *@This()) foundation.Point {
        return objc.msgSend(_self, "accessibilityActivationPoint", foundation.Point, .{});
    }

    pub fn setAccessibilityActivationPoint(_self: *@This(), _accessibilityActivationPoint: foundation.Point) void {
        return objc.msgSend(_self, "setAccessibilityActivationPoint:", void, .{_accessibilityActivationPoint});
    }

    pub fn accessibilityTopLevelUIElement(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityTopLevelUIElement", ?objc.Id, .{});
    }

    pub fn setAccessibilityTopLevelUIElement(_self: *@This(), _accessibilityTopLevelUIElement: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityTopLevelUIElement:", void, .{_accessibilityTopLevelUIElement});
    }

    pub fn accessibilityURL(_self: *@This()) ?*foundation.URL {
        return objc.msgSend(_self, "accessibilityURL", ?*foundation.URL, .{});
    }

    pub fn setAccessibilityURL(_self: *@This(), _accessibilityURL: ?*foundation.URL) void {
        return objc.msgSend(_self, "setAccessibilityURL:", void, .{_accessibilityURL});
    }

    pub fn accessibilityValue(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityValue", ?objc.Id, .{});
    }

    pub fn setAccessibilityValue(_self: *@This(), _accessibilityValue: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityValue:", void, .{_accessibilityValue});
    }

    pub fn accessibilityValueDescription(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "accessibilityValueDescription", ?*foundation.String, .{});
    }

    pub fn setAccessibilityValueDescription(_self: *@This(), _accessibilityValueDescription: ?*foundation.String) void {
        return objc.msgSend(_self, "setAccessibilityValueDescription:", void, .{_accessibilityValueDescription});
    }

    pub fn accessibilityVisibleChildren(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilityVisibleChildren", ?*foundation.Array, .{});
    }

    pub fn setAccessibilityVisibleChildren(_self: *@This(), _accessibilityVisibleChildren: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilityVisibleChildren:", void, .{_accessibilityVisibleChildren});
    }

    pub fn accessibilitySubrole(_self: *@This()) app_kit.AccessibilitySubrole {
        return objc.msgSend(_self, "accessibilitySubrole", app_kit.AccessibilitySubrole, .{});
    }

    pub fn setAccessibilitySubrole(_self: *@This(), _accessibilitySubrole: app_kit.AccessibilitySubrole) void {
        return objc.msgSend(_self, "setAccessibilitySubrole:", void, .{_accessibilitySubrole});
    }

    pub fn accessibilityTitle(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "accessibilityTitle", ?*foundation.String, .{});
    }

    pub fn setAccessibilityTitle(_self: *@This(), _accessibilityTitle: ?*foundation.String) void {
        return objc.msgSend(_self, "setAccessibilityTitle:", void, .{_accessibilityTitle});
    }

    pub fn accessibilityTitleUIElement(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityTitleUIElement", ?objc.Id, .{});
    }

    pub fn setAccessibilityTitleUIElement(_self: *@This(), _accessibilityTitleUIElement: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityTitleUIElement:", void, .{_accessibilityTitleUIElement});
    }

    pub fn accessibilityNextContents(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilityNextContents", ?*foundation.Array, .{});
    }

    pub fn setAccessibilityNextContents(_self: *@This(), _accessibilityNextContents: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilityNextContents:", void, .{_accessibilityNextContents});
    }

    pub fn accessibilityOrientation(_self: *@This()) app_kit.AccessibilityOrientation {
        return objc.msgSend(_self, "accessibilityOrientation", app_kit.AccessibilityOrientation, .{});
    }

    pub fn setAccessibilityOrientation(_self: *@This(), _accessibilityOrientation: app_kit.AccessibilityOrientation) void {
        return objc.msgSend(_self, "setAccessibilityOrientation:", void, .{_accessibilityOrientation});
    }

    pub fn accessibilityOverflowButton(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityOverflowButton", ?objc.Id, .{});
    }

    pub fn setAccessibilityOverflowButton(_self: *@This(), _accessibilityOverflowButton: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityOverflowButton:", void, .{_accessibilityOverflowButton});
    }

    pub fn setAccessibilityParent(_self: *@This(), _accessibilityParent: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityParent:", void, .{_accessibilityParent});
    }

    pub fn accessibilityPlaceholderValue(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "accessibilityPlaceholderValue", ?*foundation.String, .{});
    }

    pub fn setAccessibilityPlaceholderValue(_self: *@This(), _accessibilityPlaceholderValue: ?*foundation.String) void {
        return objc.msgSend(_self, "setAccessibilityPlaceholderValue:", void, .{_accessibilityPlaceholderValue});
    }

    pub fn accessibilityPreviousContents(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilityPreviousContents", ?*foundation.Array, .{});
    }

    pub fn setAccessibilityPreviousContents(_self: *@This(), _accessibilityPreviousContents: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilityPreviousContents:", void, .{_accessibilityPreviousContents});
    }

    pub fn accessibilityRole(_self: *@This()) app_kit.AccessibilityRole {
        return objc.msgSend(_self, "accessibilityRole", app_kit.AccessibilityRole, .{});
    }

    pub fn setAccessibilityRole(_self: *@This(), _accessibilityRole: app_kit.AccessibilityRole) void {
        return objc.msgSend(_self, "setAccessibilityRole:", void, .{_accessibilityRole});
    }

    pub fn accessibilityRoleDescription(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "accessibilityRoleDescription", ?*foundation.String, .{});
    }

    pub fn setAccessibilityRoleDescription(_self: *@This(), _accessibilityRoleDescription: ?*foundation.String) void {
        return objc.msgSend(_self, "setAccessibilityRoleDescription:", void, .{_accessibilityRoleDescription});
    }

    pub fn accessibilitySearchButton(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilitySearchButton", ?objc.Id, .{});
    }

    pub fn setAccessibilitySearchButton(_self: *@This(), _accessibilitySearchButton: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilitySearchButton:", void, .{_accessibilitySearchButton});
    }

    pub fn accessibilitySearchMenu(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilitySearchMenu", ?objc.Id, .{});
    }

    pub fn setAccessibilitySearchMenu(_self: *@This(), _accessibilitySearchMenu: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilitySearchMenu:", void, .{_accessibilitySearchMenu});
    }

    pub fn isAccessibilitySelected(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isAccessibilitySelected", objc.BOOL, .{});
    }

    pub fn setAccessibilitySelected(_self: *@This(), _accessibilitySelected: objc.BOOL) void {
        return objc.msgSend(_self, "setAccessibilitySelected:", void, .{_accessibilitySelected});
    }

    pub fn accessibilitySelectedChildren(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilitySelectedChildren", ?*foundation.Array, .{});
    }

    pub fn setAccessibilitySelectedChildren(_self: *@This(), _accessibilitySelectedChildren: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilitySelectedChildren:", void, .{_accessibilitySelectedChildren});
    }

    pub fn accessibilityServesAsTitleForUIElements(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilityServesAsTitleForUIElements", ?*foundation.Array, .{});
    }

    pub fn setAccessibilityServesAsTitleForUIElements(_self: *@This(), _accessibilityServesAsTitleForUIElements: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilityServesAsTitleForUIElements:", void, .{_accessibilityServesAsTitleForUIElements});
    }

    pub fn accessibilityShownMenu(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityShownMenu", ?objc.Id, .{});
    }

    pub fn setAccessibilityShownMenu(_self: *@This(), _accessibilityShownMenu: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityShownMenu:", void, .{_accessibilityShownMenu});
    }

    pub fn accessibilityMinValue(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityMinValue", ?objc.Id, .{});
    }

    pub fn setAccessibilityMinValue(_self: *@This(), _accessibilityMinValue: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityMinValue:", void, .{_accessibilityMinValue});
    }

    pub fn accessibilityMaxValue(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityMaxValue", ?objc.Id, .{});
    }

    pub fn setAccessibilityMaxValue(_self: *@This(), _accessibilityMaxValue: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityMaxValue:", void, .{_accessibilityMaxValue});
    }

    pub fn accessibilityLinkedUIElements(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilityLinkedUIElements", ?*foundation.Array, .{});
    }

    pub fn setAccessibilityLinkedUIElements(_self: *@This(), _accessibilityLinkedUIElements: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilityLinkedUIElements:", void, .{_accessibilityLinkedUIElements});
    }

    pub fn accessibilityWindow(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityWindow", ?objc.Id, .{});
    }

    pub fn setAccessibilityWindow(_self: *@This(), _accessibilityWindow: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityWindow:", void, .{_accessibilityWindow});
    }

    pub fn setAccessibilityIdentifier(_self: *@This(), _accessibilityIdentifier: ?*foundation.String) void {
        return objc.msgSend(_self, "setAccessibilityIdentifier:", void, .{_accessibilityIdentifier});
    }

    pub fn accessibilityHelp(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "accessibilityHelp", ?*foundation.String, .{});
    }

    pub fn setAccessibilityHelp(_self: *@This(), _accessibilityHelp: ?*foundation.String) void {
        return objc.msgSend(_self, "setAccessibilityHelp:", void, .{_accessibilityHelp});
    }

    pub fn accessibilityFilename(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "accessibilityFilename", ?*foundation.String, .{});
    }

    pub fn setAccessibilityFilename(_self: *@This(), _accessibilityFilename: ?*foundation.String) void {
        return objc.msgSend(_self, "setAccessibilityFilename:", void, .{_accessibilityFilename});
    }

    pub fn isAccessibilityExpanded(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isAccessibilityExpanded", objc.BOOL, .{});
    }

    pub fn setAccessibilityExpanded(_self: *@This(), _accessibilityExpanded: objc.BOOL) void {
        return objc.msgSend(_self, "setAccessibilityExpanded:", void, .{_accessibilityExpanded});
    }

    pub fn isAccessibilityEdited(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isAccessibilityEdited", objc.BOOL, .{});
    }

    pub fn setAccessibilityEdited(_self: *@This(), _accessibilityEdited: objc.BOOL) void {
        return objc.msgSend(_self, "setAccessibilityEdited:", void, .{_accessibilityEdited});
    }

    pub fn isAccessibilityEnabled(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isAccessibilityEnabled", objc.BOOL, .{});
    }

    pub fn setAccessibilityEnabled(_self: *@This(), _accessibilityEnabled: objc.BOOL) void {
        return objc.msgSend(_self, "setAccessibilityEnabled:", void, .{_accessibilityEnabled});
    }

    pub fn accessibilityChildren(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilityChildren", ?*foundation.Array, .{});
    }

    pub fn setAccessibilityChildren(_self: *@This(), _accessibilityChildren: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilityChildren:", void, .{_accessibilityChildren});
    }

    pub fn accessibilityChildrenInNavigationOrder(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "accessibilityChildrenInNavigationOrder", ?*anyopaque, .{});
    }

    pub fn setAccessibilityChildrenInNavigationOrder(_self: *@This(), _accessibilityChildrenInNavigationOrder: ?*anyopaque) void {
        return objc.msgSend(_self, "setAccessibilityChildrenInNavigationOrder:", void, .{_accessibilityChildrenInNavigationOrder});
    }

    pub fn accessibilityClearButton(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityClearButton", ?objc.Id, .{});
    }

    pub fn setAccessibilityClearButton(_self: *@This(), _accessibilityClearButton: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityClearButton:", void, .{_accessibilityClearButton});
    }

    pub fn accessibilityCancelButton(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityCancelButton", ?objc.Id, .{});
    }

    pub fn setAccessibilityCancelButton(_self: *@This(), _accessibilityCancelButton: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityCancelButton:", void, .{_accessibilityCancelButton});
    }

    pub fn isAccessibilityProtectedContent(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isAccessibilityProtectedContent", objc.BOOL, .{});
    }

    pub fn setAccessibilityProtectedContent(_self: *@This(), _accessibilityProtectedContent: objc.BOOL) void {
        return objc.msgSend(_self, "setAccessibilityProtectedContent:", void, .{_accessibilityProtectedContent});
    }

    pub fn accessibilityContents(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilityContents", ?*foundation.Array, .{});
    }

    pub fn setAccessibilityContents(_self: *@This(), _accessibilityContents: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilityContents:", void, .{_accessibilityContents});
    }

    pub fn accessibilityLabel(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "accessibilityLabel", ?*foundation.String, .{});
    }

    pub fn setAccessibilityLabel(_self: *@This(), _accessibilityLabel: ?*foundation.String) void {
        return objc.msgSend(_self, "setAccessibilityLabel:", void, .{_accessibilityLabel});
    }

    pub fn isAccessibilityAlternateUIVisible(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isAccessibilityAlternateUIVisible", objc.BOOL, .{});
    }

    pub fn setAccessibilityAlternateUIVisible(_self: *@This(), _accessibilityAlternateUIVisible: objc.BOOL) void {
        return objc.msgSend(_self, "setAccessibilityAlternateUIVisible:", void, .{_accessibilityAlternateUIVisible});
    }

    pub fn accessibilitySharedFocusElements(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilitySharedFocusElements", ?*foundation.Array, .{});
    }

    pub fn setAccessibilitySharedFocusElements(_self: *@This(), _accessibilitySharedFocusElements: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilitySharedFocusElements:", void, .{_accessibilitySharedFocusElements});
    }

    pub fn isAccessibilityRequired(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isAccessibilityRequired", objc.BOOL, .{});
    }

    pub fn setAccessibilityRequired(_self: *@This(), _accessibilityRequired: objc.BOOL) void {
        return objc.msgSend(_self, "setAccessibilityRequired:", void, .{_accessibilityRequired});
    }

    pub fn accessibilityCustomRotors(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "accessibilityCustomRotors", ?*anyopaque, .{});
    }

    pub fn setAccessibilityCustomRotors(_self: *@This(), _accessibilityCustomRotors: ?*anyopaque) void {
        return objc.msgSend(_self, "setAccessibilityCustomRotors:", void, .{_accessibilityCustomRotors});
    }

    pub fn accessibilityUserInputLabels(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "accessibilityUserInputLabels", ?*anyopaque, .{});
    }

    pub fn setAccessibilityUserInputLabels(_self: *@This(), _accessibilityUserInputLabels: ?*anyopaque) void {
        return objc.msgSend(_self, "setAccessibilityUserInputLabels:", void, .{_accessibilityUserInputLabels});
    }

    pub fn accessibilityAttributedUserInputLabels(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "accessibilityAttributedUserInputLabels", ?*anyopaque, .{});
    }

    pub fn setAccessibilityAttributedUserInputLabels(_self: *@This(), _accessibilityAttributedUserInputLabels: ?*anyopaque) void {
        return objc.msgSend(_self, "setAccessibilityAttributedUserInputLabels:", void, .{_accessibilityAttributedUserInputLabels});
    }

    pub fn accessibilityApplicationFocusedUIElement(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityApplicationFocusedUIElement", ?objc.Id, .{});
    }

    pub fn setAccessibilityApplicationFocusedUIElement(_self: *@This(), _accessibilityApplicationFocusedUIElement: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityApplicationFocusedUIElement:", void, .{_accessibilityApplicationFocusedUIElement});
    }

    pub fn accessibilityMainWindow(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityMainWindow", ?objc.Id, .{});
    }

    pub fn setAccessibilityMainWindow(_self: *@This(), _accessibilityMainWindow: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityMainWindow:", void, .{_accessibilityMainWindow});
    }

    pub fn isAccessibilityHidden(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isAccessibilityHidden", objc.BOOL, .{});
    }

    pub fn setAccessibilityHidden(_self: *@This(), _accessibilityHidden: objc.BOOL) void {
        return objc.msgSend(_self, "setAccessibilityHidden:", void, .{_accessibilityHidden});
    }

    pub fn isAccessibilityFrontmost(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isAccessibilityFrontmost", objc.BOOL, .{});
    }

    pub fn setAccessibilityFrontmost(_self: *@This(), _accessibilityFrontmost: objc.BOOL) void {
        return objc.msgSend(_self, "setAccessibilityFrontmost:", void, .{_accessibilityFrontmost});
    }

    pub fn accessibilityFocusedWindow(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityFocusedWindow", ?objc.Id, .{});
    }

    pub fn setAccessibilityFocusedWindow(_self: *@This(), _accessibilityFocusedWindow: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityFocusedWindow:", void, .{_accessibilityFocusedWindow});
    }

    pub fn accessibilityWindows(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilityWindows", ?*foundation.Array, .{});
    }

    pub fn setAccessibilityWindows(_self: *@This(), _accessibilityWindows: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilityWindows:", void, .{_accessibilityWindows});
    }

    pub fn accessibilityExtrasMenuBar(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityExtrasMenuBar", ?objc.Id, .{});
    }

    pub fn setAccessibilityExtrasMenuBar(_self: *@This(), _accessibilityExtrasMenuBar: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityExtrasMenuBar:", void, .{_accessibilityExtrasMenuBar});
    }

    pub fn accessibilityMenuBar(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityMenuBar", ?objc.Id, .{});
    }

    pub fn setAccessibilityMenuBar(_self: *@This(), _accessibilityMenuBar: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityMenuBar:", void, .{_accessibilityMenuBar});
    }

    pub fn accessibilityColumnTitles(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilityColumnTitles", ?*foundation.Array, .{});
    }

    pub fn setAccessibilityColumnTitles(_self: *@This(), _accessibilityColumnTitles: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilityColumnTitles:", void, .{_accessibilityColumnTitles});
    }

    pub fn isAccessibilityOrderedByRow(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isAccessibilityOrderedByRow", objc.BOOL, .{});
    }

    pub fn setAccessibilityOrderedByRow(_self: *@This(), _accessibilityOrderedByRow: objc.BOOL) void {
        return objc.msgSend(_self, "setAccessibilityOrderedByRow:", void, .{_accessibilityOrderedByRow});
    }

    pub fn accessibilityHorizontalUnits(_self: *@This()) app_kit.AccessibilityUnits {
        return objc.msgSend(_self, "accessibilityHorizontalUnits", app_kit.AccessibilityUnits, .{});
    }

    pub fn setAccessibilityHorizontalUnits(_self: *@This(), _accessibilityHorizontalUnits: app_kit.AccessibilityUnits) void {
        return objc.msgSend(_self, "setAccessibilityHorizontalUnits:", void, .{_accessibilityHorizontalUnits});
    }

    pub fn accessibilityVerticalUnits(_self: *@This()) app_kit.AccessibilityUnits {
        return objc.msgSend(_self, "accessibilityVerticalUnits", app_kit.AccessibilityUnits, .{});
    }

    pub fn setAccessibilityVerticalUnits(_self: *@This(), _accessibilityVerticalUnits: app_kit.AccessibilityUnits) void {
        return objc.msgSend(_self, "setAccessibilityVerticalUnits:", void, .{_accessibilityVerticalUnits});
    }

    pub fn accessibilityHorizontalUnitDescription(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "accessibilityHorizontalUnitDescription", ?*foundation.String, .{});
    }

    pub fn setAccessibilityHorizontalUnitDescription(_self: *@This(), _accessibilityHorizontalUnitDescription: ?*foundation.String) void {
        return objc.msgSend(_self, "setAccessibilityHorizontalUnitDescription:", void, .{_accessibilityHorizontalUnitDescription});
    }

    pub fn accessibilityVerticalUnitDescription(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "accessibilityVerticalUnitDescription", ?*foundation.String, .{});
    }

    pub fn setAccessibilityVerticalUnitDescription(_self: *@This(), _accessibilityVerticalUnitDescription: ?*foundation.String) void {
        return objc.msgSend(_self, "setAccessibilityVerticalUnitDescription:", void, .{_accessibilityVerticalUnitDescription});
    }

    pub fn accessibilityHandles(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilityHandles", ?*foundation.Array, .{});
    }

    pub fn setAccessibilityHandles(_self: *@This(), _accessibilityHandles: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilityHandles:", void, .{_accessibilityHandles});
    }

    pub fn accessibilityWarningValue(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityWarningValue", ?objc.Id, .{});
    }

    pub fn setAccessibilityWarningValue(_self: *@This(), _accessibilityWarningValue: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityWarningValue:", void, .{_accessibilityWarningValue});
    }

    pub fn accessibilityCriticalValue(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityCriticalValue", ?objc.Id, .{});
    }

    pub fn setAccessibilityCriticalValue(_self: *@This(), _accessibilityCriticalValue: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityCriticalValue:", void, .{_accessibilityCriticalValue});
    }

    pub fn isAccessibilityDisclosed(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isAccessibilityDisclosed", objc.BOOL, .{});
    }

    pub fn setAccessibilityDisclosed(_self: *@This(), _accessibilityDisclosed: objc.BOOL) void {
        return objc.msgSend(_self, "setAccessibilityDisclosed:", void, .{_accessibilityDisclosed});
    }

    pub fn accessibilityDisclosedByRow(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityDisclosedByRow", ?objc.Id, .{});
    }

    pub fn setAccessibilityDisclosedByRow(_self: *@This(), _accessibilityDisclosedByRow: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityDisclosedByRow:", void, .{_accessibilityDisclosedByRow});
    }

    pub fn accessibilityDisclosedRows(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityDisclosedRows", ?objc.Id, .{});
    }

    pub fn setAccessibilityDisclosedRows(_self: *@This(), _accessibilityDisclosedRows: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityDisclosedRows:", void, .{_accessibilityDisclosedRows});
    }

    pub fn accessibilityDisclosureLevel(_self: *@This()) objc.NSInteger {
        return objc.msgSend(_self, "accessibilityDisclosureLevel", objc.NSInteger, .{});
    }

    pub fn setAccessibilityDisclosureLevel(_self: *@This(), _accessibilityDisclosureLevel: objc.NSInteger) void {
        return objc.msgSend(_self, "setAccessibilityDisclosureLevel:", void, .{_accessibilityDisclosureLevel});
    }

    pub fn accessibilityMarkerUIElements(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilityMarkerUIElements", ?*foundation.Array, .{});
    }

    pub fn setAccessibilityMarkerUIElements(_self: *@This(), _accessibilityMarkerUIElements: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilityMarkerUIElements:", void, .{_accessibilityMarkerUIElements});
    }

    pub fn accessibilityMarkerValues(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityMarkerValues", ?objc.Id, .{});
    }

    pub fn setAccessibilityMarkerValues(_self: *@This(), _accessibilityMarkerValues: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityMarkerValues:", void, .{_accessibilityMarkerValues});
    }

    pub fn accessibilityMarkerGroupUIElement(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityMarkerGroupUIElement", ?objc.Id, .{});
    }

    pub fn setAccessibilityMarkerGroupUIElement(_self: *@This(), _accessibilityMarkerGroupUIElement: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityMarkerGroupUIElement:", void, .{_accessibilityMarkerGroupUIElement});
    }

    pub fn accessibilityUnits(_self: *@This()) app_kit.AccessibilityUnits {
        return objc.msgSend(_self, "accessibilityUnits", app_kit.AccessibilityUnits, .{});
    }

    pub fn setAccessibilityUnits(_self: *@This(), _accessibilityUnits: app_kit.AccessibilityUnits) void {
        return objc.msgSend(_self, "setAccessibilityUnits:", void, .{_accessibilityUnits});
    }

    pub fn accessibilityUnitDescription(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "accessibilityUnitDescription", ?*foundation.String, .{});
    }

    pub fn setAccessibilityUnitDescription(_self: *@This(), _accessibilityUnitDescription: ?*foundation.String) void {
        return objc.msgSend(_self, "setAccessibilityUnitDescription:", void, .{_accessibilityUnitDescription});
    }

    pub fn accessibilityRulerMarkerType(_self: *@This()) app_kit.AccessibilityRulerMarkerType {
        return objc.msgSend(_self, "accessibilityRulerMarkerType", app_kit.AccessibilityRulerMarkerType, .{});
    }

    pub fn setAccessibilityRulerMarkerType(_self: *@This(), _accessibilityRulerMarkerType: app_kit.AccessibilityRulerMarkerType) void {
        return objc.msgSend(_self, "setAccessibilityRulerMarkerType:", void, .{_accessibilityRulerMarkerType});
    }

    pub fn accessibilityMarkerTypeDescription(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "accessibilityMarkerTypeDescription", ?*foundation.String, .{});
    }

    pub fn setAccessibilityMarkerTypeDescription(_self: *@This(), _accessibilityMarkerTypeDescription: ?*foundation.String) void {
        return objc.msgSend(_self, "setAccessibilityMarkerTypeDescription:", void, .{_accessibilityMarkerTypeDescription});
    }

    pub fn accessibilityHorizontalScrollBar(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityHorizontalScrollBar", ?objc.Id, .{});
    }

    pub fn setAccessibilityHorizontalScrollBar(_self: *@This(), _accessibilityHorizontalScrollBar: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityHorizontalScrollBar:", void, .{_accessibilityHorizontalScrollBar});
    }

    pub fn accessibilityVerticalScrollBar(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityVerticalScrollBar", ?objc.Id, .{});
    }

    pub fn setAccessibilityVerticalScrollBar(_self: *@This(), _accessibilityVerticalScrollBar: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityVerticalScrollBar:", void, .{_accessibilityVerticalScrollBar});
    }

    pub fn accessibilityAllowedValues(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "accessibilityAllowedValues", ?*anyopaque, .{});
    }

    pub fn setAccessibilityAllowedValues(_self: *@This(), _accessibilityAllowedValues: ?*anyopaque) void {
        return objc.msgSend(_self, "setAccessibilityAllowedValues:", void, .{_accessibilityAllowedValues});
    }

    pub fn accessibilityLabelUIElements(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilityLabelUIElements", ?*foundation.Array, .{});
    }

    pub fn setAccessibilityLabelUIElements(_self: *@This(), _accessibilityLabelUIElements: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilityLabelUIElements:", void, .{_accessibilityLabelUIElements});
    }

    pub fn accessibilityLabelValue(_self: *@This()) f32 {
        return objc.msgSend(_self, "accessibilityLabelValue", f32, .{});
    }

    pub fn setAccessibilityLabelValue(_self: *@This(), _accessibilityLabelValue: f32) void {
        return objc.msgSend(_self, "setAccessibilityLabelValue:", void, .{_accessibilityLabelValue});
    }

    pub fn accessibilitySplitters(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilitySplitters", ?*foundation.Array, .{});
    }

    pub fn setAccessibilitySplitters(_self: *@This(), _accessibilitySplitters: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilitySplitters:", void, .{_accessibilitySplitters});
    }

    pub fn accessibilityDecrementButton(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityDecrementButton", ?objc.Id, .{});
    }

    pub fn setAccessibilityDecrementButton(_self: *@This(), _accessibilityDecrementButton: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityDecrementButton:", void, .{_accessibilityDecrementButton});
    }

    pub fn accessibilityIncrementButton(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityIncrementButton", ?objc.Id, .{});
    }

    pub fn setAccessibilityIncrementButton(_self: *@This(), _accessibilityIncrementButton: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityIncrementButton:", void, .{_accessibilityIncrementButton});
    }

    pub fn accessibilityTabs(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilityTabs", ?*foundation.Array, .{});
    }

    pub fn setAccessibilityTabs(_self: *@This(), _accessibilityTabs: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilityTabs:", void, .{_accessibilityTabs});
    }

    pub fn accessibilityHeader(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityHeader", ?objc.Id, .{});
    }

    pub fn setAccessibilityHeader(_self: *@This(), _accessibilityHeader: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityHeader:", void, .{_accessibilityHeader});
    }

    pub fn accessibilityColumnCount(_self: *@This()) objc.NSInteger {
        return objc.msgSend(_self, "accessibilityColumnCount", objc.NSInteger, .{});
    }

    pub fn setAccessibilityColumnCount(_self: *@This(), _accessibilityColumnCount: objc.NSInteger) void {
        return objc.msgSend(_self, "setAccessibilityColumnCount:", void, .{_accessibilityColumnCount});
    }

    pub fn accessibilityRowCount(_self: *@This()) objc.NSInteger {
        return objc.msgSend(_self, "accessibilityRowCount", objc.NSInteger, .{});
    }

    pub fn setAccessibilityRowCount(_self: *@This(), _accessibilityRowCount: objc.NSInteger) void {
        return objc.msgSend(_self, "setAccessibilityRowCount:", void, .{_accessibilityRowCount});
    }

    pub fn accessibilityIndex(_self: *@This()) objc.NSInteger {
        return objc.msgSend(_self, "accessibilityIndex", objc.NSInteger, .{});
    }

    pub fn setAccessibilityIndex(_self: *@This(), _accessibilityIndex: objc.NSInteger) void {
        return objc.msgSend(_self, "setAccessibilityIndex:", void, .{_accessibilityIndex});
    }

    pub fn accessibilityColumns(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilityColumns", ?*foundation.Array, .{});
    }

    pub fn setAccessibilityColumns(_self: *@This(), _accessibilityColumns: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilityColumns:", void, .{_accessibilityColumns});
    }

    pub fn accessibilityRows(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilityRows", ?*foundation.Array, .{});
    }

    pub fn setAccessibilityRows(_self: *@This(), _accessibilityRows: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilityRows:", void, .{_accessibilityRows});
    }

    pub fn accessibilityVisibleRows(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilityVisibleRows", ?*foundation.Array, .{});
    }

    pub fn setAccessibilityVisibleRows(_self: *@This(), _accessibilityVisibleRows: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilityVisibleRows:", void, .{_accessibilityVisibleRows});
    }

    pub fn accessibilitySelectedRows(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilitySelectedRows", ?*foundation.Array, .{});
    }

    pub fn setAccessibilitySelectedRows(_self: *@This(), _accessibilitySelectedRows: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilitySelectedRows:", void, .{_accessibilitySelectedRows});
    }

    pub fn accessibilityVisibleColumns(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilityVisibleColumns", ?*foundation.Array, .{});
    }

    pub fn setAccessibilityVisibleColumns(_self: *@This(), _accessibilityVisibleColumns: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilityVisibleColumns:", void, .{_accessibilityVisibleColumns});
    }

    pub fn accessibilitySelectedColumns(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilitySelectedColumns", ?*foundation.Array, .{});
    }

    pub fn setAccessibilitySelectedColumns(_self: *@This(), _accessibilitySelectedColumns: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilitySelectedColumns:", void, .{_accessibilitySelectedColumns});
    }

    pub fn accessibilitySortDirection(_self: *@This()) app_kit.AccessibilitySortDirection {
        return objc.msgSend(_self, "accessibilitySortDirection", app_kit.AccessibilitySortDirection, .{});
    }

    pub fn setAccessibilitySortDirection(_self: *@This(), _accessibilitySortDirection: app_kit.AccessibilitySortDirection) void {
        return objc.msgSend(_self, "setAccessibilitySortDirection:", void, .{_accessibilitySortDirection});
    }

    pub fn accessibilityRowHeaderUIElements(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilityRowHeaderUIElements", ?*foundation.Array, .{});
    }

    pub fn setAccessibilityRowHeaderUIElements(_self: *@This(), _accessibilityRowHeaderUIElements: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilityRowHeaderUIElements:", void, .{_accessibilityRowHeaderUIElements});
    }

    pub fn accessibilitySelectedCells(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilitySelectedCells", ?*foundation.Array, .{});
    }

    pub fn setAccessibilitySelectedCells(_self: *@This(), _accessibilitySelectedCells: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilitySelectedCells:", void, .{_accessibilitySelectedCells});
    }

    pub fn accessibilityVisibleCells(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilityVisibleCells", ?*foundation.Array, .{});
    }

    pub fn setAccessibilityVisibleCells(_self: *@This(), _accessibilityVisibleCells: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilityVisibleCells:", void, .{_accessibilityVisibleCells});
    }

    pub fn accessibilityColumnHeaderUIElements(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilityColumnHeaderUIElements", ?*foundation.Array, .{});
    }

    pub fn setAccessibilityColumnHeaderUIElements(_self: *@This(), _accessibilityColumnHeaderUIElements: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilityColumnHeaderUIElements:", void, .{_accessibilityColumnHeaderUIElements});
    }

    pub fn accessibilityRowIndexRange(_self: *@This()) foundation.Range {
        return objc.msgSend(_self, "accessibilityRowIndexRange", foundation.Range, .{});
    }

    pub fn setAccessibilityRowIndexRange(_self: *@This(), _accessibilityRowIndexRange: foundation.Range) void {
        return objc.msgSend(_self, "setAccessibilityRowIndexRange:", void, .{_accessibilityRowIndexRange});
    }

    pub fn accessibilityColumnIndexRange(_self: *@This()) foundation.Range {
        return objc.msgSend(_self, "accessibilityColumnIndexRange", foundation.Range, .{});
    }

    pub fn setAccessibilityColumnIndexRange(_self: *@This(), _accessibilityColumnIndexRange: foundation.Range) void {
        return objc.msgSend(_self, "setAccessibilityColumnIndexRange:", void, .{_accessibilityColumnIndexRange});
    }

    pub fn accessibilityInsertionPointLineNumber(_self: *@This()) objc.NSInteger {
        return objc.msgSend(_self, "accessibilityInsertionPointLineNumber", objc.NSInteger, .{});
    }

    pub fn setAccessibilityInsertionPointLineNumber(_self: *@This(), _accessibilityInsertionPointLineNumber: objc.NSInteger) void {
        return objc.msgSend(_self, "setAccessibilityInsertionPointLineNumber:", void, .{_accessibilityInsertionPointLineNumber});
    }

    pub fn accessibilitySharedCharacterRange(_self: *@This()) foundation.Range {
        return objc.msgSend(_self, "accessibilitySharedCharacterRange", foundation.Range, .{});
    }

    pub fn setAccessibilitySharedCharacterRange(_self: *@This(), _accessibilitySharedCharacterRange: foundation.Range) void {
        return objc.msgSend(_self, "setAccessibilitySharedCharacterRange:", void, .{_accessibilitySharedCharacterRange});
    }

    pub fn accessibilitySharedTextUIElements(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilitySharedTextUIElements", ?*foundation.Array, .{});
    }

    pub fn setAccessibilitySharedTextUIElements(_self: *@This(), _accessibilitySharedTextUIElements: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilitySharedTextUIElements:", void, .{_accessibilitySharedTextUIElements});
    }

    pub fn accessibilityVisibleCharacterRange(_self: *@This()) foundation.Range {
        return objc.msgSend(_self, "accessibilityVisibleCharacterRange", foundation.Range, .{});
    }

    pub fn setAccessibilityVisibleCharacterRange(_self: *@This(), _accessibilityVisibleCharacterRange: foundation.Range) void {
        return objc.msgSend(_self, "setAccessibilityVisibleCharacterRange:", void, .{_accessibilityVisibleCharacterRange});
    }

    pub fn accessibilityNumberOfCharacters(_self: *@This()) objc.NSInteger {
        return objc.msgSend(_self, "accessibilityNumberOfCharacters", objc.NSInteger, .{});
    }

    pub fn setAccessibilityNumberOfCharacters(_self: *@This(), _accessibilityNumberOfCharacters: objc.NSInteger) void {
        return objc.msgSend(_self, "setAccessibilityNumberOfCharacters:", void, .{_accessibilityNumberOfCharacters});
    }

    pub fn accessibilitySelectedText(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "accessibilitySelectedText", ?*foundation.String, .{});
    }

    pub fn setAccessibilitySelectedText(_self: *@This(), _accessibilitySelectedText: ?*foundation.String) void {
        return objc.msgSend(_self, "setAccessibilitySelectedText:", void, .{_accessibilitySelectedText});
    }

    pub fn accessibilitySelectedTextRange(_self: *@This()) foundation.Range {
        return objc.msgSend(_self, "accessibilitySelectedTextRange", foundation.Range, .{});
    }

    pub fn setAccessibilitySelectedTextRange(_self: *@This(), _accessibilitySelectedTextRange: foundation.Range) void {
        return objc.msgSend(_self, "setAccessibilitySelectedTextRange:", void, .{_accessibilitySelectedTextRange});
    }

    pub fn accessibilitySelectedTextRanges(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "accessibilitySelectedTextRanges", ?*anyopaque, .{});
    }

    pub fn setAccessibilitySelectedTextRanges(_self: *@This(), _accessibilitySelectedTextRanges: ?*anyopaque) void {
        return objc.msgSend(_self, "setAccessibilitySelectedTextRanges:", void, .{_accessibilitySelectedTextRanges});
    }

    pub fn accessibilityToolbarButton(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityToolbarButton", ?objc.Id, .{});
    }

    pub fn setAccessibilityToolbarButton(_self: *@This(), _accessibilityToolbarButton: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityToolbarButton:", void, .{_accessibilityToolbarButton});
    }

    pub fn isAccessibilityModal(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isAccessibilityModal", objc.BOOL, .{});
    }

    pub fn setAccessibilityModal(_self: *@This(), _accessibilityModal: objc.BOOL) void {
        return objc.msgSend(_self, "setAccessibilityModal:", void, .{_accessibilityModal});
    }

    pub fn accessibilityProxy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityProxy", ?objc.Id, .{});
    }

    pub fn setAccessibilityProxy(_self: *@This(), _accessibilityProxy: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityProxy:", void, .{_accessibilityProxy});
    }

    pub fn isAccessibilityMain(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isAccessibilityMain", objc.BOOL, .{});
    }

    pub fn setAccessibilityMain(_self: *@This(), _accessibilityMain: objc.BOOL) void {
        return objc.msgSend(_self, "setAccessibilityMain:", void, .{_accessibilityMain});
    }

    pub fn accessibilityFullScreenButton(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityFullScreenButton", ?objc.Id, .{});
    }

    pub fn setAccessibilityFullScreenButton(_self: *@This(), _accessibilityFullScreenButton: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityFullScreenButton:", void, .{_accessibilityFullScreenButton});
    }

    pub fn accessibilityGrowArea(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityGrowArea", ?objc.Id, .{});
    }

    pub fn setAccessibilityGrowArea(_self: *@This(), _accessibilityGrowArea: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityGrowArea:", void, .{_accessibilityGrowArea});
    }

    pub fn accessibilityDocument(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "accessibilityDocument", ?*foundation.String, .{});
    }

    pub fn setAccessibilityDocument(_self: *@This(), _accessibilityDocument: ?*foundation.String) void {
        return objc.msgSend(_self, "setAccessibilityDocument:", void, .{_accessibilityDocument});
    }

    pub fn accessibilityDefaultButton(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityDefaultButton", ?objc.Id, .{});
    }

    pub fn setAccessibilityDefaultButton(_self: *@This(), _accessibilityDefaultButton: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityDefaultButton:", void, .{_accessibilityDefaultButton});
    }

    pub fn accessibilityCloseButton(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityCloseButton", ?objc.Id, .{});
    }

    pub fn setAccessibilityCloseButton(_self: *@This(), _accessibilityCloseButton: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityCloseButton:", void, .{_accessibilityCloseButton});
    }

    pub fn accessibilityZoomButton(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityZoomButton", ?objc.Id, .{});
    }

    pub fn setAccessibilityZoomButton(_self: *@This(), _accessibilityZoomButton: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityZoomButton:", void, .{_accessibilityZoomButton});
    }

    pub fn accessibilityMinimizeButton(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityMinimizeButton", ?objc.Id, .{});
    }

    pub fn setAccessibilityMinimizeButton(_self: *@This(), _accessibilityMinimizeButton: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityMinimizeButton:", void, .{_accessibilityMinimizeButton});
    }

    pub fn isAccessibilityMinimized(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isAccessibilityMinimized", objc.BOOL, .{});
    }

    pub fn setAccessibilityMinimized(_self: *@This(), _accessibilityMinimized: objc.BOOL) void {
        return objc.msgSend(_self, "setAccessibilityMinimized:", void, .{_accessibilityMinimized});
    }

    pub fn accessibilityCustomActions(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "accessibilityCustomActions", ?*anyopaque, .{});
    }

    pub fn setAccessibilityCustomActions(_self: *@This(), _accessibilityCustomActions: ?*anyopaque) void {
        return objc.msgSend(_self, "setAccessibilityCustomActions:", void, .{_accessibilityCustomActions});
    }

    pub fn initWithFrame(_self: *@This(), _frameRect: foundation.Rect) *@This() {
        return objc.msgSend(_self, "initWithFrame:", *@This(), .{_frameRect});
    }

    pub fn isDescendantOf(_self: *@This(), _view: ?*app_kit.View) objc.BOOL {
        return objc.msgSend(_self, "isDescendantOf:", objc.BOOL, .{_view});
    }

    pub fn ancestorSharedWithView(_self: *@This(), _view: ?*app_kit.View) ?*app_kit.View {
        return objc.msgSend(_self, "ancestorSharedWithView:", ?*app_kit.View, .{_view});
    }

    pub fn getRectsBeingDrawnCount(_self: *@This(), _rects: ?*?*foundation.Rect, _count: ?*objc.NSInteger) void {
        return objc.msgSend(_self, "getRectsBeingDrawn:count:", void, .{ _rects, _count });
    }

    pub fn needsToDrawRect(_self: *@This(), _rect: foundation.Rect) objc.BOOL {
        return objc.msgSend(_self, "needsToDrawRect:", objc.BOOL, .{_rect});
    }

    pub fn viewDidHide(_self: *@This()) void {
        return objc.msgSend(_self, "viewDidHide", void, .{});
    }

    pub fn viewDidUnhide(_self: *@This()) void {
        return objc.msgSend(_self, "viewDidUnhide", void, .{});
    }

    pub fn addSubview(_self: *@This(), _view: ?*app_kit.View) void {
        return objc.msgSend(_self, "addSubview:", void, .{_view});
    }

    pub fn addSubviewPositionedRelativeTo(_self: *@This(), _view: ?*app_kit.View, _place: app_kit.WindowOrderingMode, _otherView: ?*app_kit.View) void {
        return objc.msgSend(_self, "addSubview:positioned:relativeTo:", void, .{ _view, _place, _otherView });
    }

    pub fn sortSubviewsUsingFunctionContext(_self: *@This(), _compare: ?*const fn (?*anyopaque, ?*anyopaque, ?*anyopaque) callconv(.C) foundation.ComparisonResult, _context: ?*anyopaque) void {
        return objc.msgSend(_self, "sortSubviewsUsingFunction:context:", void, .{ _compare, _context });
    }

    pub fn viewWillMoveToWindow(_self: *@This(), _newWindow: ?*app_kit.Window) void {
        return objc.msgSend(_self, "viewWillMoveToWindow:", void, .{_newWindow});
    }

    pub fn viewDidMoveToWindow(_self: *@This()) void {
        return objc.msgSend(_self, "viewDidMoveToWindow", void, .{});
    }

    pub fn viewWillMoveToSuperview(_self: *@This(), _newSuperview: ?*app_kit.View) void {
        return objc.msgSend(_self, "viewWillMoveToSuperview:", void, .{_newSuperview});
    }

    pub fn viewDidMoveToSuperview(_self: *@This()) void {
        return objc.msgSend(_self, "viewDidMoveToSuperview", void, .{});
    }

    pub fn didAddSubview(_self: *@This(), _subview: ?*app_kit.View) void {
        return objc.msgSend(_self, "didAddSubview:", void, .{_subview});
    }

    pub fn willRemoveSubview(_self: *@This(), _subview: ?*app_kit.View) void {
        return objc.msgSend(_self, "willRemoveSubview:", void, .{_subview});
    }

    pub fn removeFromSuperview(_self: *@This()) void {
        return objc.msgSend(_self, "removeFromSuperview", void, .{});
    }

    pub fn replaceSubviewWith(_self: *@This(), _oldView: ?*app_kit.View, _newView: ?*app_kit.View) void {
        return objc.msgSend(_self, "replaceSubview:with:", void, .{ _oldView, _newView });
    }

    pub fn removeFromSuperviewWithoutNeedingDisplay(_self: *@This()) void {
        return objc.msgSend(_self, "removeFromSuperviewWithoutNeedingDisplay", void, .{});
    }

    pub fn viewDidChangeBackingProperties(_self: *@This()) void {
        return objc.msgSend(_self, "viewDidChangeBackingProperties", void, .{});
    }

    pub fn resizeSubviewsWithOldSize(_self: *@This(), _oldSize: foundation.Size) void {
        return objc.msgSend(_self, "resizeSubviewsWithOldSize:", void, .{_oldSize});
    }

    pub fn resizeWithOldSuperviewSize(_self: *@This(), _oldSize: foundation.Size) void {
        return objc.msgSend(_self, "resizeWithOldSuperviewSize:", void, .{_oldSize});
    }

    pub fn setFrameOrigin(_self: *@This(), _newOrigin: foundation.Point) void {
        return objc.msgSend(_self, "setFrameOrigin:", void, .{_newOrigin});
    }

    pub fn setFrameSize(_self: *@This(), _newSize: foundation.Size) void {
        return objc.msgSend(_self, "setFrameSize:", void, .{_newSize});
    }

    pub fn setBoundsOrigin(_self: *@This(), _newOrigin: foundation.Point) void {
        return objc.msgSend(_self, "setBoundsOrigin:", void, .{_newOrigin});
    }

    pub fn setBoundsSize(_self: *@This(), _newSize: foundation.Size) void {
        return objc.msgSend(_self, "setBoundsSize:", void, .{_newSize});
    }

    pub fn translateOriginToPoint(_self: *@This(), _translation: foundation.Point) void {
        return objc.msgSend(_self, "translateOriginToPoint:", void, .{_translation});
    }

    pub fn scaleUnitSquareToSize(_self: *@This(), _newUnitSize: foundation.Size) void {
        return objc.msgSend(_self, "scaleUnitSquareToSize:", void, .{_newUnitSize});
    }

    pub fn rotateByAngle(_self: *@This(), _angle: core_foundation.CGFloat) void {
        return objc.msgSend(_self, "rotateByAngle:", void, .{_angle});
    }

    pub fn convertPointFromView(_self: *@This(), _point: foundation.Point, _view: ?*app_kit.View) foundation.Point {
        return objc.msgSend(_self, "convertPoint:fromView:", foundation.Point, .{ _point, _view });
    }

    pub fn convertPointToView(_self: *@This(), _point: foundation.Point, _view: ?*app_kit.View) foundation.Point {
        return objc.msgSend(_self, "convertPoint:toView:", foundation.Point, .{ _point, _view });
    }

    pub fn convertSizeFromView(_self: *@This(), _size: foundation.Size, _view: ?*app_kit.View) foundation.Size {
        return objc.msgSend(_self, "convertSize:fromView:", foundation.Size, .{ _size, _view });
    }

    pub fn convertSizeToView(_self: *@This(), _size: foundation.Size, _view: ?*app_kit.View) foundation.Size {
        return objc.msgSend(_self, "convertSize:toView:", foundation.Size, .{ _size, _view });
    }

    pub fn convertRectFromView(_self: *@This(), _rect: foundation.Rect, _view: ?*app_kit.View) foundation.Rect {
        return objc.msgSend(_self, "convertRect:fromView:", foundation.Rect, .{ _rect, _view });
    }

    pub fn convertRectToView(_self: *@This(), _rect: foundation.Rect, _view: ?*app_kit.View) foundation.Rect {
        return objc.msgSend(_self, "convertRect:toView:", foundation.Rect, .{ _rect, _view });
    }

    pub fn backingAlignedRectOptions(_self: *@This(), _rect: foundation.Rect, _options: foundation.AlignmentOptions) foundation.Rect {
        return objc.msgSend(_self, "backingAlignedRect:options:", foundation.Rect, .{ _rect, _options });
    }

    pub fn centerScanRect(_self: *@This(), _rect: foundation.Rect) foundation.Rect {
        return objc.msgSend(_self, "centerScanRect:", foundation.Rect, .{_rect});
    }

    pub fn convertPointToBacking(_self: *@This(), _point: foundation.Point) foundation.Point {
        return objc.msgSend(_self, "convertPointToBacking:", foundation.Point, .{_point});
    }

    pub fn convertPointFromBacking(_self: *@This(), _point: foundation.Point) foundation.Point {
        return objc.msgSend(_self, "convertPointFromBacking:", foundation.Point, .{_point});
    }

    pub fn convertSizeToBacking(_self: *@This(), _size: foundation.Size) foundation.Size {
        return objc.msgSend(_self, "convertSizeToBacking:", foundation.Size, .{_size});
    }

    pub fn convertSizeFromBacking(_self: *@This(), _size: foundation.Size) foundation.Size {
        return objc.msgSend(_self, "convertSizeFromBacking:", foundation.Size, .{_size});
    }

    pub fn convertRectToBacking(_self: *@This(), _rect: foundation.Rect) foundation.Rect {
        return objc.msgSend(_self, "convertRectToBacking:", foundation.Rect, .{_rect});
    }

    pub fn convertRectFromBacking(_self: *@This(), _rect: foundation.Rect) foundation.Rect {
        return objc.msgSend(_self, "convertRectFromBacking:", foundation.Rect, .{_rect});
    }

    pub fn convertPointToLayer(_self: *@This(), _point: foundation.Point) foundation.Point {
        return objc.msgSend(_self, "convertPointToLayer:", foundation.Point, .{_point});
    }

    pub fn convertPointFromLayer(_self: *@This(), _point: foundation.Point) foundation.Point {
        return objc.msgSend(_self, "convertPointFromLayer:", foundation.Point, .{_point});
    }

    pub fn convertSizeToLayer(_self: *@This(), _size: foundation.Size) foundation.Size {
        return objc.msgSend(_self, "convertSizeToLayer:", foundation.Size, .{_size});
    }

    pub fn convertSizeFromLayer(_self: *@This(), _size: foundation.Size) foundation.Size {
        return objc.msgSend(_self, "convertSizeFromLayer:", foundation.Size, .{_size});
    }

    pub fn convertRectToLayer(_self: *@This(), _rect: foundation.Rect) foundation.Rect {
        return objc.msgSend(_self, "convertRectToLayer:", foundation.Rect, .{_rect});
    }

    pub fn convertRectFromLayer(_self: *@This(), _rect: foundation.Rect) foundation.Rect {
        return objc.msgSend(_self, "convertRectFromLayer:", foundation.Rect, .{_rect});
    }

    pub fn setNeedsDisplayInRect(_self: *@This(), _invalidRect: foundation.Rect) void {
        return objc.msgSend(_self, "setNeedsDisplayInRect:", void, .{_invalidRect});
    }

    pub fn lockFocus(_self: *@This()) void {
        return objc.msgSend(_self, "lockFocus", void, .{});
    }

    pub fn unlockFocus(_self: *@This()) void {
        return objc.msgSend(_self, "unlockFocus", void, .{});
    }

    pub fn lockFocusIfCanDraw(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "lockFocusIfCanDraw", objc.BOOL, .{});
    }

    pub fn lockFocusIfCanDrawInContext(_self: *@This(), _context: ?*app_kit.GraphicsContext) objc.BOOL {
        return objc.msgSend(_self, "lockFocusIfCanDrawInContext:", objc.BOOL, .{_context});
    }

    pub fn display(_self: *@This()) void {
        return objc.msgSend(_self, "display", void, .{});
    }

    pub fn displayIfNeeded(_self: *@This()) void {
        return objc.msgSend(_self, "displayIfNeeded", void, .{});
    }

    pub fn displayIfNeededIgnoringOpacity(_self: *@This()) void {
        return objc.msgSend(_self, "displayIfNeededIgnoringOpacity", void, .{});
    }

    pub fn displayRect(_self: *@This(), _rect: foundation.Rect) void {
        return objc.msgSend(_self, "displayRect:", void, .{_rect});
    }

    pub fn displayIfNeededInRect(_self: *@This(), _rect: foundation.Rect) void {
        return objc.msgSend(_self, "displayIfNeededInRect:", void, .{_rect});
    }

    pub fn displayRectIgnoringOpacity(_self: *@This(), _rect: foundation.Rect) void {
        return objc.msgSend(_self, "displayRectIgnoringOpacity:", void, .{_rect});
    }

    pub fn displayIfNeededInRectIgnoringOpacity(_self: *@This(), _rect: foundation.Rect) void {
        return objc.msgSend(_self, "displayIfNeededInRectIgnoringOpacity:", void, .{_rect});
    }

    pub fn drawRect(_self: *@This(), _dirtyRect: foundation.Rect) void {
        return objc.msgSend(_self, "drawRect:", void, .{_dirtyRect});
    }

    pub fn displayRectIgnoringOpacityInContext(_self: *@This(), _rect: foundation.Rect, _context: ?*app_kit.GraphicsContext) void {
        return objc.msgSend(_self, "displayRectIgnoringOpacity:inContext:", void, .{ _rect, _context });
    }

    pub fn bitmapImageRepForCachingDisplayInRect(_self: *@This(), _rect: foundation.Rect) ?*app_kit.BitmapImageRep {
        return objc.msgSend(_self, "bitmapImageRepForCachingDisplayInRect:", ?*app_kit.BitmapImageRep, .{_rect});
    }

    pub fn cacheDisplayInRectToBitmapImageRep(_self: *@This(), _rect: foundation.Rect, _bitmapImageRep: ?*app_kit.BitmapImageRep) void {
        return objc.msgSend(_self, "cacheDisplayInRect:toBitmapImageRep:", void, .{ _rect, _bitmapImageRep });
    }

    pub fn viewWillDraw(_self: *@This()) void {
        return objc.msgSend(_self, "viewWillDraw", void, .{});
    }

    pub fn scrollPoint(_self: *@This(), _point: foundation.Point) void {
        return objc.msgSend(_self, "scrollPoint:", void, .{_point});
    }

    pub fn scrollRectToVisible(_self: *@This(), _rect: foundation.Rect) objc.BOOL {
        return objc.msgSend(_self, "scrollRectToVisible:", objc.BOOL, .{_rect});
    }

    pub fn autoscroll(_self: *@This(), _event: ?*app_kit.Event) objc.BOOL {
        return objc.msgSend(_self, "autoscroll:", objc.BOOL, .{_event});
    }

    pub fn adjustScroll(_self: *@This(), _newVisible: foundation.Rect) foundation.Rect {
        return objc.msgSend(_self, "adjustScroll:", foundation.Rect, .{_newVisible});
    }

    pub fn scrollRectBy(_self: *@This(), _rect: foundation.Rect, _delta: foundation.Size) void {
        return objc.msgSend(_self, "scrollRect:by:", void, .{ _rect, _delta });
    }

    pub fn translateRectsNeedingDisplayInRectBy(_self: *@This(), _clipRect: foundation.Rect, _delta: foundation.Size) void {
        return objc.msgSend(_self, "translateRectsNeedingDisplayInRect:by:", void, .{ _clipRect, _delta });
    }

    pub fn hitTest(_self: *@This(), _point: foundation.Point) ?*app_kit.View {
        return objc.msgSend(_self, "hitTest:", ?*app_kit.View, .{_point});
    }

    pub fn mouseInRect(_self: *@This(), _point: foundation.Point, _rect: foundation.Rect) objc.BOOL {
        return objc.msgSend(_self, "mouse:inRect:", objc.BOOL, .{ _point, _rect });
    }

    pub fn viewWithTag(_self: *@This(), _tag: objc.NSInteger) ?*anyopaque {
        return objc.msgSend(_self, "viewWithTag:", ?*anyopaque, .{_tag});
    }

    pub fn acceptsFirstMouse(_self: *@This(), _event: ?*app_kit.Event) objc.BOOL {
        return objc.msgSend(_self, "acceptsFirstMouse:", objc.BOOL, .{_event});
    }

    pub fn shouldDelayWindowOrderingForEvent(_self: *@This(), _event: ?*app_kit.Event) objc.BOOL {
        return objc.msgSend(_self, "shouldDelayWindowOrderingForEvent:", objc.BOOL, .{_event});
    }

    pub fn makeBackingLayer(_self: *@This()) ?*quartz_core.Layer {
        return objc.msgSend(_self, "makeBackingLayer", ?*quartz_core.Layer, .{});
    }

    pub fn updateLayer(_self: *@This()) void {
        return objc.msgSend(_self, "updateLayer", void, .{});
    }

    pub fn layoutSubtreeIfNeeded(_self: *@This()) void {
        return objc.msgSend(_self, "layoutSubtreeIfNeeded", void, .{});
    }

    pub fn layout(_self: *@This()) void {
        return objc.msgSend(_self, "layout", void, .{});
    }

    pub fn menuForEvent(_self: *@This(), _event: ?*app_kit.Event) ?*app_kit.Menu {
        return objc.msgSend(_self, "menuForEvent:", ?*app_kit.Menu, .{_event});
    }

    pub fn willOpenMenuWithEvent(_self: *@This(), _menu: ?*app_kit.Menu, _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "willOpenMenu:withEvent:", void, .{ _menu, _event });
    }

    pub fn didCloseMenuWithEvent(_self: *@This(), _menu: ?*app_kit.Menu, _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "didCloseMenu:withEvent:", void, .{ _menu, _event });
    }

    pub fn addToolTipRectOwnerUserData(_self: *@This(), _rect: foundation.Rect, _owner: ?objc.Id, _data: ?*anyopaque) app_kit.ToolTipTag {
        return objc.msgSend(_self, "addToolTipRect:owner:userData:", app_kit.ToolTipTag, .{ _rect, _owner, _data });
    }

    pub fn removeToolTip(_self: *@This(), _tag: app_kit.ToolTipTag) void {
        return objc.msgSend(_self, "removeToolTip:", void, .{_tag});
    }

    pub fn removeAllToolTips(_self: *@This()) void {
        return objc.msgSend(_self, "removeAllToolTips", void, .{});
    }

    pub fn viewWillStartLiveResize(_self: *@This()) void {
        return objc.msgSend(_self, "viewWillStartLiveResize", void, .{});
    }

    pub fn viewDidEndLiveResize(_self: *@This()) void {
        return objc.msgSend(_self, "viewDidEndLiveResize", void, .{});
    }

    pub fn getRectsExposedDuringLiveResizeCount(_self: *@This(), _exposedRects: ?*foundation.Rect, _count: ?*objc.NSInteger) void {
        return objc.msgSend(_self, "getRectsExposedDuringLiveResize:count:", void, .{ _exposedRects, _count });
    }

    pub fn rectForSmartMagnificationAtPointInRect(_self: *@This(), _location: foundation.Point, _visibleRect: foundation.Rect) foundation.Rect {
        return objc.msgSend(_self, "rectForSmartMagnificationAtPoint:inRect:", foundation.Rect, .{ _location, _visibleRect });
    }

    pub fn prepareForReuse(_self: *@This()) void {
        return objc.msgSend(_self, "prepareForReuse", void, .{});
    }

    pub fn prepareContentInRect(_self: *@This(), _rect: foundation.Rect) void {
        return objc.msgSend(_self, "prepareContentInRect:", void, .{_rect});
    }

    pub fn viewDidChangeEffectiveAppearance(_self: *@This()) void {
        return objc.msgSend(_self, "viewDidChangeEffectiveAppearance", void, .{});
    }

    pub fn window(_self: *@This()) ?*app_kit.Window {
        return objc.msgSend(_self, "window", ?*app_kit.Window, .{});
    }

    pub fn superview(_self: *@This()) ?*app_kit.View {
        return objc.msgSend(_self, "superview", ?*app_kit.View, .{});
    }

    pub fn subviews(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "subviews", ?*anyopaque, .{});
    }

    pub fn setSubviews(_self: *@This(), _subviews: ?*anyopaque) void {
        return objc.msgSend(_self, "setSubviews:", void, .{_subviews});
    }

    pub fn opaqueAncestor(_self: *@This()) ?*app_kit.View {
        return objc.msgSend(_self, "opaqueAncestor", ?*app_kit.View, .{});
    }

    pub fn isHidden(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isHidden", objc.BOOL, .{});
    }

    pub fn setHidden(_self: *@This(), _hidden: objc.BOOL) void {
        return objc.msgSend(_self, "setHidden:", void, .{_hidden});
    }

    pub fn isHiddenOrHasHiddenAncestor(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isHiddenOrHasHiddenAncestor", objc.BOOL, .{});
    }

    pub fn wantsDefaultClipping(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "wantsDefaultClipping", objc.BOOL, .{});
    }

    pub fn postsFrameChangedNotifications(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "postsFrameChangedNotifications", objc.BOOL, .{});
    }

    pub fn setPostsFrameChangedNotifications(_self: *@This(), _postsFrameChangedNotifications: objc.BOOL) void {
        return objc.msgSend(_self, "setPostsFrameChangedNotifications:", void, .{_postsFrameChangedNotifications});
    }

    pub fn autoresizesSubviews(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "autoresizesSubviews", objc.BOOL, .{});
    }

    pub fn setAutoresizesSubviews(_self: *@This(), _autoresizesSubviews: objc.BOOL) void {
        return objc.msgSend(_self, "setAutoresizesSubviews:", void, .{_autoresizesSubviews});
    }

    pub fn autoresizingMask(_self: *@This()) app_kit.AutoresizingMaskOptions {
        return objc.msgSend(_self, "autoresizingMask", app_kit.AutoresizingMaskOptions, .{});
    }

    pub fn setAutoresizingMask(_self: *@This(), _autoresizingMask: app_kit.AutoresizingMaskOptions) void {
        return objc.msgSend(_self, "setAutoresizingMask:", void, .{_autoresizingMask});
    }

    pub fn frame(_self: *@This()) foundation.Rect {
        return objc.msgSend(_self, "frame", foundation.Rect, .{});
    }

    pub fn setFrame(_self: *@This(), _frame: foundation.Rect) void {
        return objc.msgSend(_self, "setFrame:", void, .{_frame});
    }

    pub fn frameRotation(_self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(_self, "frameRotation", core_foundation.CGFloat, .{});
    }

    pub fn setFrameRotation(_self: *@This(), _frameRotation: core_foundation.CGFloat) void {
        return objc.msgSend(_self, "setFrameRotation:", void, .{_frameRotation});
    }

    pub fn frameCenterRotation(_self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(_self, "frameCenterRotation", core_foundation.CGFloat, .{});
    }

    pub fn setFrameCenterRotation(_self: *@This(), _frameCenterRotation: core_foundation.CGFloat) void {
        return objc.msgSend(_self, "setFrameCenterRotation:", void, .{_frameCenterRotation});
    }

    pub fn boundsRotation(_self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(_self, "boundsRotation", core_foundation.CGFloat, .{});
    }

    pub fn setBoundsRotation(_self: *@This(), _boundsRotation: core_foundation.CGFloat) void {
        return objc.msgSend(_self, "setBoundsRotation:", void, .{_boundsRotation});
    }

    pub fn bounds(_self: *@This()) foundation.Rect {
        return objc.msgSend(_self, "bounds", foundation.Rect, .{});
    }

    pub fn setBounds(_self: *@This(), _bounds: foundation.Rect) void {
        return objc.msgSend(_self, "setBounds:", void, .{_bounds});
    }

    pub fn isFlipped(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isFlipped", objc.BOOL, .{});
    }

    pub fn isRotatedFromBase(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isRotatedFromBase", objc.BOOL, .{});
    }

    pub fn isRotatedOrScaledFromBase(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isRotatedOrScaledFromBase", objc.BOOL, .{});
    }

    pub fn isOpaque(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isOpaque", objc.BOOL, .{});
    }

    pub fn canDrawConcurrently(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "canDrawConcurrently", objc.BOOL, .{});
    }

    pub fn setCanDrawConcurrently(_self: *@This(), _canDrawConcurrently: objc.BOOL) void {
        return objc.msgSend(_self, "setCanDrawConcurrently:", void, .{_canDrawConcurrently});
    }

    pub fn canDraw(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "canDraw", objc.BOOL, .{});
    }

    pub fn needsDisplay(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "needsDisplay", objc.BOOL, .{});
    }

    pub fn setNeedsDisplay(_self: *@This(), _needsDisplay: objc.BOOL) void {
        return objc.msgSend(_self, "setNeedsDisplay:", void, .{_needsDisplay});
    }

    pub fn focusView() ?*app_kit.View {
        return objc.msgSend(Internal.class(), "focusView", ?*app_kit.View, .{});
    }

    pub fn visibleRect(_self: *@This()) foundation.Rect {
        return objc.msgSend(_self, "visibleRect", foundation.Rect, .{});
    }

    pub fn tag(_self: *@This()) objc.NSInteger {
        return objc.msgSend(_self, "tag", objc.NSInteger, .{});
    }

    pub fn needsPanelToBecomeKey(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "needsPanelToBecomeKey", objc.BOOL, .{});
    }

    pub fn mouseDownCanMoveWindow(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "mouseDownCanMoveWindow", objc.BOOL, .{});
    }

    pub fn acceptsTouchEvents(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "acceptsTouchEvents", objc.BOOL, .{});
    }

    pub fn setAcceptsTouchEvents(_self: *@This(), _acceptsTouchEvents: objc.BOOL) void {
        return objc.msgSend(_self, "setAcceptsTouchEvents:", void, .{_acceptsTouchEvents});
    }

    pub fn wantsRestingTouches(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "wantsRestingTouches", objc.BOOL, .{});
    }

    pub fn setWantsRestingTouches(_self: *@This(), _wantsRestingTouches: objc.BOOL) void {
        return objc.msgSend(_self, "setWantsRestingTouches:", void, .{_wantsRestingTouches});
    }

    pub fn layerContentsRedrawPolicy(_self: *@This()) app_kit.ViewLayerContentsRedrawPolicy {
        return objc.msgSend(_self, "layerContentsRedrawPolicy", app_kit.ViewLayerContentsRedrawPolicy, .{});
    }

    pub fn setLayerContentsRedrawPolicy(_self: *@This(), _layerContentsRedrawPolicy: app_kit.ViewLayerContentsRedrawPolicy) void {
        return objc.msgSend(_self, "setLayerContentsRedrawPolicy:", void, .{_layerContentsRedrawPolicy});
    }

    pub fn layerContentsPlacement(_self: *@This()) app_kit.ViewLayerContentsPlacement {
        return objc.msgSend(_self, "layerContentsPlacement", app_kit.ViewLayerContentsPlacement, .{});
    }

    pub fn setLayerContentsPlacement(_self: *@This(), _layerContentsPlacement: app_kit.ViewLayerContentsPlacement) void {
        return objc.msgSend(_self, "setLayerContentsPlacement:", void, .{_layerContentsPlacement});
    }

    pub fn wantsLayer(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "wantsLayer", objc.BOOL, .{});
    }

    pub fn setWantsLayer(_self: *@This(), _wantsLayer: objc.BOOL) void {
        return objc.msgSend(_self, "setWantsLayer:", void, .{_wantsLayer});
    }

    pub fn layer(_self: *@This()) ?*quartz_core.Layer {
        return objc.msgSend(_self, "layer", ?*quartz_core.Layer, .{});
    }

    pub fn setLayer(_self: *@This(), _layer: ?*quartz_core.Layer) void {
        return objc.msgSend(_self, "setLayer:", void, .{_layer});
    }

    pub fn wantsUpdateLayer(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "wantsUpdateLayer", objc.BOOL, .{});
    }

    pub fn canDrawSubviewsIntoLayer(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "canDrawSubviewsIntoLayer", objc.BOOL, .{});
    }

    pub fn setCanDrawSubviewsIntoLayer(_self: *@This(), _canDrawSubviewsIntoLayer: objc.BOOL) void {
        return objc.msgSend(_self, "setCanDrawSubviewsIntoLayer:", void, .{_canDrawSubviewsIntoLayer});
    }

    pub fn needsLayout(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "needsLayout", objc.BOOL, .{});
    }

    pub fn setNeedsLayout(_self: *@This(), _needsLayout: objc.BOOL) void {
        return objc.msgSend(_self, "setNeedsLayout:", void, .{_needsLayout});
    }

    pub fn alphaValue(_self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(_self, "alphaValue", core_foundation.CGFloat, .{});
    }

    pub fn setAlphaValue(_self: *@This(), _alphaValue: core_foundation.CGFloat) void {
        return objc.msgSend(_self, "setAlphaValue:", void, .{_alphaValue});
    }

    pub fn layerUsesCoreImageFilters(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "layerUsesCoreImageFilters", objc.BOOL, .{});
    }

    pub fn setLayerUsesCoreImageFilters(_self: *@This(), _layerUsesCoreImageFilters: objc.BOOL) void {
        return objc.msgSend(_self, "setLayerUsesCoreImageFilters:", void, .{_layerUsesCoreImageFilters});
    }

    pub fn backgroundFilters(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "backgroundFilters", ?*anyopaque, .{});
    }

    pub fn setBackgroundFilters(_self: *@This(), _backgroundFilters: ?*anyopaque) void {
        return objc.msgSend(_self, "setBackgroundFilters:", void, .{_backgroundFilters});
    }

    pub fn compositingFilter(_self: *@This()) ?*core_image.Filter {
        return objc.msgSend(_self, "compositingFilter", ?*core_image.Filter, .{});
    }

    pub fn setCompositingFilter(_self: *@This(), _compositingFilter: ?*core_image.Filter) void {
        return objc.msgSend(_self, "setCompositingFilter:", void, .{_compositingFilter});
    }

    pub fn contentFilters(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "contentFilters", ?*anyopaque, .{});
    }

    pub fn setContentFilters(_self: *@This(), _contentFilters: ?*anyopaque) void {
        return objc.msgSend(_self, "setContentFilters:", void, .{_contentFilters});
    }

    pub fn shadow(_self: *@This()) ?*app_kit.Shadow {
        return objc.msgSend(_self, "shadow", ?*app_kit.Shadow, .{});
    }

    pub fn setShadow(_self: *@This(), _shadow: ?*app_kit.Shadow) void {
        return objc.msgSend(_self, "setShadow:", void, .{_shadow});
    }

    pub fn clipsToBounds(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "clipsToBounds", objc.BOOL, .{});
    }

    pub fn setClipsToBounds(_self: *@This(), _clipsToBounds: objc.BOOL) void {
        return objc.msgSend(_self, "setClipsToBounds:", void, .{_clipsToBounds});
    }

    pub fn postsBoundsChangedNotifications(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "postsBoundsChangedNotifications", objc.BOOL, .{});
    }

    pub fn setPostsBoundsChangedNotifications(_self: *@This(), _postsBoundsChangedNotifications: objc.BOOL) void {
        return objc.msgSend(_self, "setPostsBoundsChangedNotifications:", void, .{_postsBoundsChangedNotifications});
    }

    pub fn enclosingScrollView(_self: *@This()) ?*app_kit.ScrollView {
        return objc.msgSend(_self, "enclosingScrollView", ?*app_kit.ScrollView, .{});
    }

    pub fn defaultMenu() ?*app_kit.Menu {
        return objc.msgSend(Internal.class(), "defaultMenu", ?*app_kit.Menu, .{});
    }

    pub fn toolTip(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "toolTip", ?*foundation.String, .{});
    }

    pub fn setToolTip(_self: *@This(), _toolTip: ?*foundation.String) void {
        return objc.msgSend(_self, "setToolTip:", void, .{_toolTip});
    }

    pub fn inLiveResize(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "inLiveResize", objc.BOOL, .{});
    }

    pub fn preservesContentDuringLiveResize(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "preservesContentDuringLiveResize", objc.BOOL, .{});
    }

    pub fn rectPreservedDuringLiveResize(_self: *@This()) foundation.Rect {
        return objc.msgSend(_self, "rectPreservedDuringLiveResize", foundation.Rect, .{});
    }

    pub fn inputContext(_self: *@This()) ?*app_kit.TextInputContext {
        return objc.msgSend(_self, "inputContext", ?*app_kit.TextInputContext, .{});
    }

    pub fn userInterfaceLayoutDirection(_self: *@This()) app_kit.UserInterfaceLayoutDirection {
        return objc.msgSend(_self, "userInterfaceLayoutDirection", app_kit.UserInterfaceLayoutDirection, .{});
    }

    pub fn setUserInterfaceLayoutDirection(_self: *@This(), _userInterfaceLayoutDirection: app_kit.UserInterfaceLayoutDirection) void {
        return objc.msgSend(_self, "setUserInterfaceLayoutDirection:", void, .{_userInterfaceLayoutDirection});
    }

    pub fn isCompatibleWithResponsiveScrolling() objc.BOOL {
        return objc.msgSend(Internal.class(), "isCompatibleWithResponsiveScrolling", objc.BOOL, .{});
    }

    pub fn preparedContentRect(_self: *@This()) foundation.Rect {
        return objc.msgSend(_self, "preparedContentRect", foundation.Rect, .{});
    }

    pub fn setPreparedContentRect(_self: *@This(), _preparedContentRect: foundation.Rect) void {
        return objc.msgSend(_self, "setPreparedContentRect:", void, .{_preparedContentRect});
    }

    pub fn allowsVibrancy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsVibrancy", objc.BOOL, .{});
    }

    pub fn initWithAnnotationReuseIdentifier(_self: *@This(), _annotation: ?*anyopaque, _reuseIdentifier: ?*foundation.String) *@This() {
        return objc.msgSend(_self, "initWithAnnotation:reuseIdentifier:", *@This(), .{ _annotation, _reuseIdentifier });
    }

    pub fn prepareForDisplay(_self: *@This()) void {
        return objc.msgSend(_self, "prepareForDisplay", void, .{});
    }

    pub fn setSelectedAnimated(_self: *@This(), _selected: objc.BOOL, _animated: objc.BOOL) void {
        return objc.msgSend(_self, "setSelected:animated:", void, .{ _selected, _animated });
    }

    pub fn setDragStateAnimated(_self: *@This(), _newDragState: AnnotationViewDragState, _animated: objc.BOOL) void {
        return objc.msgSend(_self, "setDragState:animated:", void, .{ _newDragState, _animated });
    }

    pub fn reuseIdentifier(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "reuseIdentifier", ?*foundation.String, .{});
    }

    pub fn annotation(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "annotation", ?*anyopaque, .{});
    }

    pub fn setAnnotation(_self: *@This(), _annotation: ?*anyopaque) void {
        return objc.msgSend(_self, "setAnnotation:", void, .{_annotation});
    }

    pub fn image(_self: *@This()) ?*app_kit.Image {
        return objc.msgSend(_self, "image", ?*app_kit.Image, .{});
    }

    pub fn setImage(_self: *@This(), _image: ?*app_kit.Image) void {
        return objc.msgSend(_self, "setImage:", void, .{_image});
    }

    pub fn centerOffset(_self: *@This()) core_foundation.CGPoint {
        return objc.msgSend(_self, "centerOffset", core_foundation.CGPoint, .{});
    }

    pub fn setCenterOffset(_self: *@This(), _centerOffset: core_foundation.CGPoint) void {
        return objc.msgSend(_self, "setCenterOffset:", void, .{_centerOffset});
    }

    pub fn accessoryOffset(_self: *@This()) core_foundation.CGPoint {
        return objc.msgSend(_self, "accessoryOffset", core_foundation.CGPoint, .{});
    }

    pub fn setAccessoryOffset(_self: *@This(), _accessoryOffset: core_foundation.CGPoint) void {
        return objc.msgSend(_self, "setAccessoryOffset:", void, .{_accessoryOffset});
    }

    pub fn calloutOffset(_self: *@This()) core_foundation.CGPoint {
        return objc.msgSend(_self, "calloutOffset", core_foundation.CGPoint, .{});
    }

    pub fn setCalloutOffset(_self: *@This(), _calloutOffset: core_foundation.CGPoint) void {
        return objc.msgSend(_self, "setCalloutOffset:", void, .{_calloutOffset});
    }

    pub fn leftCalloutOffset(_self: *@This()) core_foundation.CGPoint {
        return objc.msgSend(_self, "leftCalloutOffset", core_foundation.CGPoint, .{});
    }

    pub fn setLeftCalloutOffset(_self: *@This(), _leftCalloutOffset: core_foundation.CGPoint) void {
        return objc.msgSend(_self, "setLeftCalloutOffset:", void, .{_leftCalloutOffset});
    }

    pub fn rightCalloutOffset(_self: *@This()) core_foundation.CGPoint {
        return objc.msgSend(_self, "rightCalloutOffset", core_foundation.CGPoint, .{});
    }

    pub fn setRightCalloutOffset(_self: *@This(), _rightCalloutOffset: core_foundation.CGPoint) void {
        return objc.msgSend(_self, "setRightCalloutOffset:", void, .{_rightCalloutOffset});
    }

    pub fn isEnabled(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isEnabled", objc.BOOL, .{});
    }

    pub fn setEnabled(_self: *@This(), _enabled: objc.BOOL) void {
        return objc.msgSend(_self, "setEnabled:", void, .{_enabled});
    }

    pub fn isHighlighted(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isHighlighted", objc.BOOL, .{});
    }

    pub fn setHighlighted(_self: *@This(), _highlighted: objc.BOOL) void {
        return objc.msgSend(_self, "setHighlighted:", void, .{_highlighted});
    }

    pub fn isSelected(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isSelected", objc.BOOL, .{});
    }

    pub fn setSelected(_self: *@This(), _selected: objc.BOOL) void {
        return objc.msgSend(_self, "setSelected:", void, .{_selected});
    }

    pub fn canShowCallout(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "canShowCallout", objc.BOOL, .{});
    }

    pub fn setCanShowCallout(_self: *@This(), _canShowCallout: objc.BOOL) void {
        return objc.msgSend(_self, "setCanShowCallout:", void, .{_canShowCallout});
    }

    pub fn leftCalloutAccessoryView(_self: *@This()) ?*app_kit.View {
        return objc.msgSend(_self, "leftCalloutAccessoryView", ?*app_kit.View, .{});
    }

    pub fn setLeftCalloutAccessoryView(_self: *@This(), _leftCalloutAccessoryView: ?*app_kit.View) void {
        return objc.msgSend(_self, "setLeftCalloutAccessoryView:", void, .{_leftCalloutAccessoryView});
    }

    pub fn rightCalloutAccessoryView(_self: *@This()) ?*app_kit.View {
        return objc.msgSend(_self, "rightCalloutAccessoryView", ?*app_kit.View, .{});
    }

    pub fn setRightCalloutAccessoryView(_self: *@This(), _rightCalloutAccessoryView: ?*app_kit.View) void {
        return objc.msgSend(_self, "setRightCalloutAccessoryView:", void, .{_rightCalloutAccessoryView});
    }

    pub fn detailCalloutAccessoryView(_self: *@This()) ?*app_kit.View {
        return objc.msgSend(_self, "detailCalloutAccessoryView", ?*app_kit.View, .{});
    }

    pub fn setDetailCalloutAccessoryView(_self: *@This(), _detailCalloutAccessoryView: ?*app_kit.View) void {
        return objc.msgSend(_self, "setDetailCalloutAccessoryView:", void, .{_detailCalloutAccessoryView});
    }

    pub fn isDraggable(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isDraggable", objc.BOOL, .{});
    }

    pub fn setDraggable(_self: *@This(), _draggable: objc.BOOL) void {
        return objc.msgSend(_self, "setDraggable:", void, .{_draggable});
    }

    pub fn dragState(_self: *@This()) AnnotationViewDragState {
        return objc.msgSend(_self, "dragState", AnnotationViewDragState, .{});
    }

    pub fn setDragState(_self: *@This(), _dragState: AnnotationViewDragState) void {
        return objc.msgSend(_self, "setDragState:", void, .{_dragState});
    }

    pub fn clusteringIdentifier(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "clusteringIdentifier", ?*foundation.String, .{});
    }

    pub fn setClusteringIdentifier(_self: *@This(), _clusteringIdentifier: ?*foundation.String) void {
        return objc.msgSend(_self, "setClusteringIdentifier:", void, .{_clusteringIdentifier});
    }

    pub fn clusterAnnotationView(_self: *@This()) ?*AnnotationView {
        return objc.msgSend(_self, "clusterAnnotationView", ?*AnnotationView, .{});
    }

    pub fn displayPriority(_self: *@This()) FeatureDisplayPriority {
        return objc.msgSend(_self, "displayPriority", FeatureDisplayPriority, .{});
    }

    pub fn setDisplayPriority(_self: *@This(), _displayPriority: FeatureDisplayPriority) void {
        return objc.msgSend(_self, "setDisplayPriority:", void, .{_displayPriority});
    }

    pub fn zPriority(_self: *@This()) AnnotationViewZPriority {
        return objc.msgSend(_self, "zPriority", AnnotationViewZPriority, .{});
    }

    pub fn setZPriority(_self: *@This(), _zPriority: AnnotationViewZPriority) void {
        return objc.msgSend(_self, "setZPriority:", void, .{_zPriority});
    }

    pub fn selectedZPriority(_self: *@This()) AnnotationViewZPriority {
        return objc.msgSend(_self, "selectedZPriority", AnnotationViewZPriority, .{});
    }

    pub fn setSelectedZPriority(_self: *@This(), _selectedZPriority: AnnotationViewZPriority) void {
        return objc.msgSend(_self, "setSelectedZPriority:", void, .{_selectedZPriority});
    }

    pub fn collisionMode(_self: *@This()) AnnotationViewCollisionMode {
        return objc.msgSend(_self, "collisionMode", AnnotationViewCollisionMode, .{});
    }

    pub fn setCollisionMode(_self: *@This(), _collisionMode: AnnotationViewCollisionMode) void {
        return objc.msgSend(_self, "setCollisionMode:", void, .{_collisionMode});
    }

    pub fn titleVisibility(_self: *@This()) FeatureVisibility {
        return objc.msgSend(_self, "titleVisibility", FeatureVisibility, .{});
    }

    pub fn setTitleVisibility(_self: *@This(), _titleVisibility: FeatureVisibility) void {
        return objc.msgSend(_self, "setTitleVisibility:", void, .{_titleVisibility});
    }

    pub fn subtitleVisibility(_self: *@This()) FeatureVisibility {
        return objc.msgSend(_self, "subtitleVisibility", FeatureVisibility, .{});
    }

    pub fn setSubtitleVisibility(_self: *@This(), _subtitleVisibility: FeatureVisibility) void {
        return objc.msgSend(_self, "setSubtitleVisibility:", void, .{_subtitleVisibility});
    }

    pub fn markerTintColor(_self: *@This()) ?*app_kit.Color {
        return objc.msgSend(_self, "markerTintColor", ?*app_kit.Color, .{});
    }

    pub fn setMarkerTintColor(_self: *@This(), _markerTintColor: ?*app_kit.Color) void {
        return objc.msgSend(_self, "setMarkerTintColor:", void, .{_markerTintColor});
    }

    pub fn glyphTintColor(_self: *@This()) ?*app_kit.Color {
        return objc.msgSend(_self, "glyphTintColor", ?*app_kit.Color, .{});
    }

    pub fn setGlyphTintColor(_self: *@This(), _glyphTintColor: ?*app_kit.Color) void {
        return objc.msgSend(_self, "setGlyphTintColor:", void, .{_glyphTintColor});
    }

    pub fn glyphText(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "glyphText", ?*foundation.String, .{});
    }

    pub fn setGlyphText(_self: *@This(), _glyphText: ?*foundation.String) void {
        return objc.msgSend(_self, "setGlyphText:", void, .{_glyphText});
    }

    pub fn glyphImage(_self: *@This()) ?*app_kit.Image {
        return objc.msgSend(_self, "glyphImage", ?*app_kit.Image, .{});
    }

    pub fn setGlyphImage(_self: *@This(), _glyphImage: ?*app_kit.Image) void {
        return objc.msgSend(_self, "setGlyphImage:", void, .{_glyphImage});
    }

    pub fn selectedGlyphImage(_self: *@This()) ?*app_kit.Image {
        return objc.msgSend(_self, "selectedGlyphImage", ?*app_kit.Image, .{});
    }

    pub fn setSelectedGlyphImage(_self: *@This(), _selectedGlyphImage: ?*app_kit.Image) void {
        return objc.msgSend(_self, "setSelectedGlyphImage:", void, .{_selectedGlyphImage});
    }

    pub fn animatesWhenAdded(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "animatesWhenAdded", objc.BOOL, .{});
    }

    pub fn setAnimatesWhenAdded(_self: *@This(), _animatesWhenAdded: objc.BOOL) void {
        return objc.msgSend(_self, "setAnimatesWhenAdded:", void, .{_animatesWhenAdded});
    }
};

pub const PinAnnotationColor = objc.NSUInteger;
pub const PinAnnotationColor_Red: objc.NSUInteger = 0;
pub const PinAnnotationColor_Green: objc.NSUInteger = 1;
pub const PinAnnotationColor_Purple: objc.NSUInteger = 2;

/// https://developer.apple.com/documentation/MapKit/MKPinAnnotationView?language=objc
pub const PinAnnotationView = opaque {
    pub const Internal = objc.ExternClass("MKPinAnnotationView", @This(), AnnotationView, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "description", ?*foundation.String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "debugDescription", ?*foundation.String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*foundation.Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*foundation.MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*foundation.MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*foundation.MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*foundation.MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*foundation.Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*foundation.Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn tryToPerformWith(_self: *@This(), _action: objc.Selector, _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "tryToPerform:with:", objc.BOOL, .{ _action, _object });
    }

    pub fn performKeyEquivalent(_self: *@This(), _event: ?*app_kit.Event) objc.BOOL {
        return objc.msgSend(_self, "performKeyEquivalent:", objc.BOOL, .{_event});
    }

    pub fn validRequestorForSendTypeReturnType(_self: *@This(), _sendType: app_kit.PasteboardType, _returnType: app_kit.PasteboardType) ?objc.Id {
        return objc.msgSend(_self, "validRequestorForSendType:returnType:", ?objc.Id, .{ _sendType, _returnType });
    }

    pub fn mouseDown(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "mouseDown:", void, .{_event});
    }

    pub fn rightMouseDown(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "rightMouseDown:", void, .{_event});
    }

    pub fn otherMouseDown(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "otherMouseDown:", void, .{_event});
    }

    pub fn mouseUp(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "mouseUp:", void, .{_event});
    }

    pub fn rightMouseUp(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "rightMouseUp:", void, .{_event});
    }

    pub fn otherMouseUp(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "otherMouseUp:", void, .{_event});
    }

    pub fn mouseMoved(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "mouseMoved:", void, .{_event});
    }

    pub fn mouseDragged(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "mouseDragged:", void, .{_event});
    }

    pub fn scrollWheel(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "scrollWheel:", void, .{_event});
    }

    pub fn rightMouseDragged(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "rightMouseDragged:", void, .{_event});
    }

    pub fn otherMouseDragged(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "otherMouseDragged:", void, .{_event});
    }

    pub fn mouseEntered(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "mouseEntered:", void, .{_event});
    }

    pub fn mouseExited(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "mouseExited:", void, .{_event});
    }

    pub fn keyDown(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "keyDown:", void, .{_event});
    }

    pub fn keyUp(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "keyUp:", void, .{_event});
    }

    pub fn flagsChanged(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "flagsChanged:", void, .{_event});
    }

    pub fn tabletPoint(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "tabletPoint:", void, .{_event});
    }

    pub fn tabletProximity(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "tabletProximity:", void, .{_event});
    }

    pub fn cursorUpdate(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "cursorUpdate:", void, .{_event});
    }

    pub fn magnifyWithEvent(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "magnifyWithEvent:", void, .{_event});
    }

    pub fn rotateWithEvent(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "rotateWithEvent:", void, .{_event});
    }

    pub fn swipeWithEvent(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "swipeWithEvent:", void, .{_event});
    }

    pub fn beginGestureWithEvent(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "beginGestureWithEvent:", void, .{_event});
    }

    pub fn endGestureWithEvent(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "endGestureWithEvent:", void, .{_event});
    }

    pub fn smartMagnifyWithEvent(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "smartMagnifyWithEvent:", void, .{_event});
    }

    pub fn changeModeWithEvent(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "changeModeWithEvent:", void, .{_event});
    }

    pub fn touchesBeganWithEvent(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "touchesBeganWithEvent:", void, .{_event});
    }

    pub fn touchesMovedWithEvent(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "touchesMovedWithEvent:", void, .{_event});
    }

    pub fn touchesEndedWithEvent(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "touchesEndedWithEvent:", void, .{_event});
    }

    pub fn touchesCancelledWithEvent(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "touchesCancelledWithEvent:", void, .{_event});
    }

    pub fn quickLookWithEvent(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "quickLookWithEvent:", void, .{_event});
    }

    pub fn pressureChangeWithEvent(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "pressureChangeWithEvent:", void, .{_event});
    }

    pub fn contextMenuKeyDown(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "contextMenuKeyDown:", void, .{_event});
    }

    pub fn noResponderFor(_self: *@This(), _eventSelector: objc.Selector) void {
        return objc.msgSend(_self, "noResponderFor:", void, .{_eventSelector});
    }

    pub fn becomeFirstResponder(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "becomeFirstResponder", objc.BOOL, .{});
    }

    pub fn resignFirstResponder(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "resignFirstResponder", objc.BOOL, .{});
    }

    pub fn interpretKeyEvents(_self: *@This(), _eventArray: ?*anyopaque) void {
        return objc.msgSend(_self, "interpretKeyEvents:", void, .{_eventArray});
    }

    pub fn flushBufferedKeyEvents(_self: *@This()) void {
        return objc.msgSend(_self, "flushBufferedKeyEvents", void, .{});
    }

    pub fn showContextHelp(_self: *@This(), _sender: ?objc.Id) void {
        return objc.msgSend(_self, "showContextHelp:", void, .{_sender});
    }

    pub fn helpRequested(_self: *@This(), _eventPtr: ?*app_kit.Event) void {
        return objc.msgSend(_self, "helpRequested:", void, .{_eventPtr});
    }

    pub fn shouldBeTreatedAsInkEvent(_self: *@This(), _event: ?*app_kit.Event) objc.BOOL {
        return objc.msgSend(_self, "shouldBeTreatedAsInkEvent:", objc.BOOL, .{_event});
    }

    pub fn wantsScrollEventsForSwipeTrackingOnAxis(_self: *@This(), _axis: app_kit.EventGestureAxis) objc.BOOL {
        return objc.msgSend(_self, "wantsScrollEventsForSwipeTrackingOnAxis:", objc.BOOL, .{_axis});
    }

    pub fn wantsForwardedScrollEventsForAxis(_self: *@This(), _axis: app_kit.EventGestureAxis) objc.BOOL {
        return objc.msgSend(_self, "wantsForwardedScrollEventsForAxis:", objc.BOOL, .{_axis});
    }

    pub fn supplementalTargetForActionSender(_self: *@This(), _action: objc.Selector, _sender: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "supplementalTargetForAction:sender:", ?objc.Id, .{ _action, _sender });
    }

    pub fn nextResponder(_self: *@This()) ?*app_kit.Responder {
        return objc.msgSend(_self, "nextResponder", ?*app_kit.Responder, .{});
    }

    pub fn setNextResponder(_self: *@This(), _nextResponder: ?*app_kit.Responder) void {
        return objc.msgSend(_self, "setNextResponder:", void, .{_nextResponder});
    }

    pub fn acceptsFirstResponder(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "acceptsFirstResponder", objc.BOOL, .{});
    }

    pub fn menu(_self: *@This()) ?*app_kit.Menu {
        return objc.msgSend(_self, "menu", ?*app_kit.Menu, .{});
    }

    pub fn setMenu(_self: *@This(), _menu: ?*app_kit.Menu) void {
        return objc.msgSend(_self, "setMenu:", void, .{_menu});
    }

    pub fn animator(_self: *@This()) *@This() {
        return objc.msgSend(_self, "animator", *@This(), .{});
    }

    pub fn animationForKey(_self: *@This(), _key: app_kit.AnimatablePropertyKey) ?objc.Id {
        return objc.msgSend(_self, "animationForKey:", ?objc.Id, .{_key});
    }

    pub fn defaultAnimationForKey(_key: app_kit.AnimatablePropertyKey) ?objc.Id {
        return objc.msgSend(Internal.class(), "defaultAnimationForKey:", ?objc.Id, .{_key});
    }

    pub fn animations(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "animations", ?*anyopaque, .{});
    }

    pub fn setAnimations(_self: *@This(), _animations: ?*anyopaque) void {
        return objc.msgSend(_self, "setAnimations:", void, .{_animations});
    }

    pub fn identifier(_self: *@This()) app_kit.UserInterfaceItemIdentifier {
        return objc.msgSend(_self, "identifier", app_kit.UserInterfaceItemIdentifier, .{});
    }

    pub fn setIdentifier(_self: *@This(), _identifier: app_kit.UserInterfaceItemIdentifier) void {
        return objc.msgSend(_self, "setIdentifier:", void, .{_identifier});
    }

    pub fn draggingEntered(_self: *@This(), _sender: ?*anyopaque) app_kit.DragOperation {
        return objc.msgSend(_self, "draggingEntered:", app_kit.DragOperation, .{_sender});
    }

    pub fn draggingUpdated(_self: *@This(), _sender: ?*anyopaque) app_kit.DragOperation {
        return objc.msgSend(_self, "draggingUpdated:", app_kit.DragOperation, .{_sender});
    }

    pub fn draggingExited(_self: *@This(), _sender: ?*anyopaque) void {
        return objc.msgSend(_self, "draggingExited:", void, .{_sender});
    }

    pub fn prepareForDragOperation(_self: *@This(), _sender: ?*anyopaque) objc.BOOL {
        return objc.msgSend(_self, "prepareForDragOperation:", objc.BOOL, .{_sender});
    }

    pub fn performDragOperation(_self: *@This(), _sender: ?*anyopaque) objc.BOOL {
        return objc.msgSend(_self, "performDragOperation:", objc.BOOL, .{_sender});
    }

    pub fn concludeDragOperation(_self: *@This(), _sender: ?*anyopaque) void {
        return objc.msgSend(_self, "concludeDragOperation:", void, .{_sender});
    }

    pub fn draggingEnded(_self: *@This(), _sender: ?*anyopaque) void {
        return objc.msgSend(_self, "draggingEnded:", void, .{_sender});
    }

    pub fn wantsPeriodicDraggingUpdates(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "wantsPeriodicDraggingUpdates", objc.BOOL, .{});
    }

    pub fn updateDraggingItemsForDrag(_self: *@This(), _sender: ?*anyopaque) void {
        return objc.msgSend(_self, "updateDraggingItemsForDrag:", void, .{_sender});
    }

    pub fn appearance(_self: *@This()) ?*app_kit.Appearance {
        return objc.msgSend(_self, "appearance", ?*app_kit.Appearance, .{});
    }

    pub fn setAppearance(_self: *@This(), _appearance: ?*app_kit.Appearance) void {
        return objc.msgSend(_self, "setAppearance:", void, .{_appearance});
    }

    pub fn effectiveAppearance(_self: *@This()) ?*app_kit.Appearance {
        return objc.msgSend(_self, "effectiveAppearance", ?*app_kit.Appearance, .{});
    }

    pub fn accessibilityFrame(_self: *@This()) foundation.Rect {
        return objc.msgSend(_self, "accessibilityFrame", foundation.Rect, .{});
    }

    pub fn accessibilityParent(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityParent", ?objc.Id, .{});
    }

    pub fn isAccessibilityFocused(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isAccessibilityFocused", objc.BOOL, .{});
    }

    pub fn accessibilityIdentifier(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "accessibilityIdentifier", ?*foundation.String, .{});
    }

    pub fn accessibilityLayoutPointForScreenPoint(_self: *@This(), _point: foundation.Point) foundation.Point {
        return objc.msgSend(_self, "accessibilityLayoutPointForScreenPoint:", foundation.Point, .{_point});
    }

    pub fn accessibilityLayoutSizeForScreenSize(_self: *@This(), _size: foundation.Size) foundation.Size {
        return objc.msgSend(_self, "accessibilityLayoutSizeForScreenSize:", foundation.Size, .{_size});
    }

    pub fn accessibilityScreenPointForLayoutPoint(_self: *@This(), _point: foundation.Point) foundation.Point {
        return objc.msgSend(_self, "accessibilityScreenPointForLayoutPoint:", foundation.Point, .{_point});
    }

    pub fn accessibilityScreenSizeForLayoutSize(_self: *@This(), _size: foundation.Size) foundation.Size {
        return objc.msgSend(_self, "accessibilityScreenSizeForLayoutSize:", foundation.Size, .{_size});
    }

    pub fn accessibilityCellForColumnRow(_self: *@This(), _column: objc.NSInteger, _row: objc.NSInteger) ?objc.Id {
        return objc.msgSend(_self, "accessibilityCellForColumn:row:", ?objc.Id, .{ _column, _row });
    }

    pub fn accessibilityAttributedStringForRange(_self: *@This(), _range: foundation.Range) ?*foundation.AttributedString {
        return objc.msgSend(_self, "accessibilityAttributedStringForRange:", ?*foundation.AttributedString, .{_range});
    }

    pub fn accessibilityRangeForLine(_self: *@This(), _line: objc.NSInteger) foundation.Range {
        return objc.msgSend(_self, "accessibilityRangeForLine:", foundation.Range, .{_line});
    }

    pub fn accessibilityStringForRange(_self: *@This(), _range: foundation.Range) ?*foundation.String {
        return objc.msgSend(_self, "accessibilityStringForRange:", ?*foundation.String, .{_range});
    }

    pub fn accessibilityRangeForPosition(_self: *@This(), _point: foundation.Point) foundation.Range {
        return objc.msgSend(_self, "accessibilityRangeForPosition:", foundation.Range, .{_point});
    }

    pub fn accessibilityRangeForIndex(_self: *@This(), _index: objc.NSInteger) foundation.Range {
        return objc.msgSend(_self, "accessibilityRangeForIndex:", foundation.Range, .{_index});
    }

    pub fn accessibilityFrameForRange(_self: *@This(), _range: foundation.Range) foundation.Rect {
        return objc.msgSend(_self, "accessibilityFrameForRange:", foundation.Rect, .{_range});
    }

    pub fn accessibilityRTFForRange(_self: *@This(), _range: foundation.Range) ?*foundation.Data {
        return objc.msgSend(_self, "accessibilityRTFForRange:", ?*foundation.Data, .{_range});
    }

    pub fn accessibilityStyleRangeForIndex(_self: *@This(), _index: objc.NSInteger) foundation.Range {
        return objc.msgSend(_self, "accessibilityStyleRangeForIndex:", foundation.Range, .{_index});
    }

    pub fn accessibilityLineForIndex(_self: *@This(), _index: objc.NSInteger) objc.NSInteger {
        return objc.msgSend(_self, "accessibilityLineForIndex:", objc.NSInteger, .{_index});
    }

    pub fn accessibilityPerformCancel(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "accessibilityPerformCancel", objc.BOOL, .{});
    }

    pub fn accessibilityPerformConfirm(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "accessibilityPerformConfirm", objc.BOOL, .{});
    }

    pub fn accessibilityPerformDecrement(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "accessibilityPerformDecrement", objc.BOOL, .{});
    }

    pub fn accessibilityPerformDelete(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "accessibilityPerformDelete", objc.BOOL, .{});
    }

    pub fn accessibilityPerformIncrement(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "accessibilityPerformIncrement", objc.BOOL, .{});
    }

    pub fn accessibilityPerformPick(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "accessibilityPerformPick", objc.BOOL, .{});
    }

    pub fn accessibilityPerformPress(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "accessibilityPerformPress", objc.BOOL, .{});
    }

    pub fn accessibilityPerformRaise(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "accessibilityPerformRaise", objc.BOOL, .{});
    }

    pub fn accessibilityPerformShowAlternateUI(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "accessibilityPerformShowAlternateUI", objc.BOOL, .{});
    }

    pub fn accessibilityPerformShowDefaultUI(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "accessibilityPerformShowDefaultUI", objc.BOOL, .{});
    }

    pub fn accessibilityPerformShowMenu(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "accessibilityPerformShowMenu", objc.BOOL, .{});
    }

    pub fn isAccessibilitySelectorAllowed(_self: *@This(), _selector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "isAccessibilitySelectorAllowed:", objc.BOOL, .{_selector});
    }

    pub fn isAccessibilityElement(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isAccessibilityElement", objc.BOOL, .{});
    }

    pub fn setAccessibilityElement(_self: *@This(), _accessibilityElement: objc.BOOL) void {
        return objc.msgSend(_self, "setAccessibilityElement:", void, .{_accessibilityElement});
    }

    pub fn setAccessibilityFrame(_self: *@This(), _accessibilityFrame: foundation.Rect) void {
        return objc.msgSend(_self, "setAccessibilityFrame:", void, .{_accessibilityFrame});
    }

    pub fn setAccessibilityFocused(_self: *@This(), _accessibilityFocused: objc.BOOL) void {
        return objc.msgSend(_self, "setAccessibilityFocused:", void, .{_accessibilityFocused});
    }

    pub fn accessibilityActivationPoint(_self: *@This()) foundation.Point {
        return objc.msgSend(_self, "accessibilityActivationPoint", foundation.Point, .{});
    }

    pub fn setAccessibilityActivationPoint(_self: *@This(), _accessibilityActivationPoint: foundation.Point) void {
        return objc.msgSend(_self, "setAccessibilityActivationPoint:", void, .{_accessibilityActivationPoint});
    }

    pub fn accessibilityTopLevelUIElement(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityTopLevelUIElement", ?objc.Id, .{});
    }

    pub fn setAccessibilityTopLevelUIElement(_self: *@This(), _accessibilityTopLevelUIElement: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityTopLevelUIElement:", void, .{_accessibilityTopLevelUIElement});
    }

    pub fn accessibilityURL(_self: *@This()) ?*foundation.URL {
        return objc.msgSend(_self, "accessibilityURL", ?*foundation.URL, .{});
    }

    pub fn setAccessibilityURL(_self: *@This(), _accessibilityURL: ?*foundation.URL) void {
        return objc.msgSend(_self, "setAccessibilityURL:", void, .{_accessibilityURL});
    }

    pub fn accessibilityValue(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityValue", ?objc.Id, .{});
    }

    pub fn setAccessibilityValue(_self: *@This(), _accessibilityValue: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityValue:", void, .{_accessibilityValue});
    }

    pub fn accessibilityValueDescription(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "accessibilityValueDescription", ?*foundation.String, .{});
    }

    pub fn setAccessibilityValueDescription(_self: *@This(), _accessibilityValueDescription: ?*foundation.String) void {
        return objc.msgSend(_self, "setAccessibilityValueDescription:", void, .{_accessibilityValueDescription});
    }

    pub fn accessibilityVisibleChildren(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilityVisibleChildren", ?*foundation.Array, .{});
    }

    pub fn setAccessibilityVisibleChildren(_self: *@This(), _accessibilityVisibleChildren: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilityVisibleChildren:", void, .{_accessibilityVisibleChildren});
    }

    pub fn accessibilitySubrole(_self: *@This()) app_kit.AccessibilitySubrole {
        return objc.msgSend(_self, "accessibilitySubrole", app_kit.AccessibilitySubrole, .{});
    }

    pub fn setAccessibilitySubrole(_self: *@This(), _accessibilitySubrole: app_kit.AccessibilitySubrole) void {
        return objc.msgSend(_self, "setAccessibilitySubrole:", void, .{_accessibilitySubrole});
    }

    pub fn accessibilityTitle(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "accessibilityTitle", ?*foundation.String, .{});
    }

    pub fn setAccessibilityTitle(_self: *@This(), _accessibilityTitle: ?*foundation.String) void {
        return objc.msgSend(_self, "setAccessibilityTitle:", void, .{_accessibilityTitle});
    }

    pub fn accessibilityTitleUIElement(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityTitleUIElement", ?objc.Id, .{});
    }

    pub fn setAccessibilityTitleUIElement(_self: *@This(), _accessibilityTitleUIElement: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityTitleUIElement:", void, .{_accessibilityTitleUIElement});
    }

    pub fn accessibilityNextContents(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilityNextContents", ?*foundation.Array, .{});
    }

    pub fn setAccessibilityNextContents(_self: *@This(), _accessibilityNextContents: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilityNextContents:", void, .{_accessibilityNextContents});
    }

    pub fn accessibilityOrientation(_self: *@This()) app_kit.AccessibilityOrientation {
        return objc.msgSend(_self, "accessibilityOrientation", app_kit.AccessibilityOrientation, .{});
    }

    pub fn setAccessibilityOrientation(_self: *@This(), _accessibilityOrientation: app_kit.AccessibilityOrientation) void {
        return objc.msgSend(_self, "setAccessibilityOrientation:", void, .{_accessibilityOrientation});
    }

    pub fn accessibilityOverflowButton(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityOverflowButton", ?objc.Id, .{});
    }

    pub fn setAccessibilityOverflowButton(_self: *@This(), _accessibilityOverflowButton: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityOverflowButton:", void, .{_accessibilityOverflowButton});
    }

    pub fn setAccessibilityParent(_self: *@This(), _accessibilityParent: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityParent:", void, .{_accessibilityParent});
    }

    pub fn accessibilityPlaceholderValue(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "accessibilityPlaceholderValue", ?*foundation.String, .{});
    }

    pub fn setAccessibilityPlaceholderValue(_self: *@This(), _accessibilityPlaceholderValue: ?*foundation.String) void {
        return objc.msgSend(_self, "setAccessibilityPlaceholderValue:", void, .{_accessibilityPlaceholderValue});
    }

    pub fn accessibilityPreviousContents(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilityPreviousContents", ?*foundation.Array, .{});
    }

    pub fn setAccessibilityPreviousContents(_self: *@This(), _accessibilityPreviousContents: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilityPreviousContents:", void, .{_accessibilityPreviousContents});
    }

    pub fn accessibilityRole(_self: *@This()) app_kit.AccessibilityRole {
        return objc.msgSend(_self, "accessibilityRole", app_kit.AccessibilityRole, .{});
    }

    pub fn setAccessibilityRole(_self: *@This(), _accessibilityRole: app_kit.AccessibilityRole) void {
        return objc.msgSend(_self, "setAccessibilityRole:", void, .{_accessibilityRole});
    }

    pub fn accessibilityRoleDescription(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "accessibilityRoleDescription", ?*foundation.String, .{});
    }

    pub fn setAccessibilityRoleDescription(_self: *@This(), _accessibilityRoleDescription: ?*foundation.String) void {
        return objc.msgSend(_self, "setAccessibilityRoleDescription:", void, .{_accessibilityRoleDescription});
    }

    pub fn accessibilitySearchButton(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilitySearchButton", ?objc.Id, .{});
    }

    pub fn setAccessibilitySearchButton(_self: *@This(), _accessibilitySearchButton: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilitySearchButton:", void, .{_accessibilitySearchButton});
    }

    pub fn accessibilitySearchMenu(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilitySearchMenu", ?objc.Id, .{});
    }

    pub fn setAccessibilitySearchMenu(_self: *@This(), _accessibilitySearchMenu: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilitySearchMenu:", void, .{_accessibilitySearchMenu});
    }

    pub fn isAccessibilitySelected(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isAccessibilitySelected", objc.BOOL, .{});
    }

    pub fn setAccessibilitySelected(_self: *@This(), _accessibilitySelected: objc.BOOL) void {
        return objc.msgSend(_self, "setAccessibilitySelected:", void, .{_accessibilitySelected});
    }

    pub fn accessibilitySelectedChildren(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilitySelectedChildren", ?*foundation.Array, .{});
    }

    pub fn setAccessibilitySelectedChildren(_self: *@This(), _accessibilitySelectedChildren: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilitySelectedChildren:", void, .{_accessibilitySelectedChildren});
    }

    pub fn accessibilityServesAsTitleForUIElements(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilityServesAsTitleForUIElements", ?*foundation.Array, .{});
    }

    pub fn setAccessibilityServesAsTitleForUIElements(_self: *@This(), _accessibilityServesAsTitleForUIElements: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilityServesAsTitleForUIElements:", void, .{_accessibilityServesAsTitleForUIElements});
    }

    pub fn accessibilityShownMenu(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityShownMenu", ?objc.Id, .{});
    }

    pub fn setAccessibilityShownMenu(_self: *@This(), _accessibilityShownMenu: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityShownMenu:", void, .{_accessibilityShownMenu});
    }

    pub fn accessibilityMinValue(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityMinValue", ?objc.Id, .{});
    }

    pub fn setAccessibilityMinValue(_self: *@This(), _accessibilityMinValue: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityMinValue:", void, .{_accessibilityMinValue});
    }

    pub fn accessibilityMaxValue(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityMaxValue", ?objc.Id, .{});
    }

    pub fn setAccessibilityMaxValue(_self: *@This(), _accessibilityMaxValue: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityMaxValue:", void, .{_accessibilityMaxValue});
    }

    pub fn accessibilityLinkedUIElements(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilityLinkedUIElements", ?*foundation.Array, .{});
    }

    pub fn setAccessibilityLinkedUIElements(_self: *@This(), _accessibilityLinkedUIElements: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilityLinkedUIElements:", void, .{_accessibilityLinkedUIElements});
    }

    pub fn accessibilityWindow(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityWindow", ?objc.Id, .{});
    }

    pub fn setAccessibilityWindow(_self: *@This(), _accessibilityWindow: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityWindow:", void, .{_accessibilityWindow});
    }

    pub fn setAccessibilityIdentifier(_self: *@This(), _accessibilityIdentifier: ?*foundation.String) void {
        return objc.msgSend(_self, "setAccessibilityIdentifier:", void, .{_accessibilityIdentifier});
    }

    pub fn accessibilityHelp(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "accessibilityHelp", ?*foundation.String, .{});
    }

    pub fn setAccessibilityHelp(_self: *@This(), _accessibilityHelp: ?*foundation.String) void {
        return objc.msgSend(_self, "setAccessibilityHelp:", void, .{_accessibilityHelp});
    }

    pub fn accessibilityFilename(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "accessibilityFilename", ?*foundation.String, .{});
    }

    pub fn setAccessibilityFilename(_self: *@This(), _accessibilityFilename: ?*foundation.String) void {
        return objc.msgSend(_self, "setAccessibilityFilename:", void, .{_accessibilityFilename});
    }

    pub fn isAccessibilityExpanded(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isAccessibilityExpanded", objc.BOOL, .{});
    }

    pub fn setAccessibilityExpanded(_self: *@This(), _accessibilityExpanded: objc.BOOL) void {
        return objc.msgSend(_self, "setAccessibilityExpanded:", void, .{_accessibilityExpanded});
    }

    pub fn isAccessibilityEdited(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isAccessibilityEdited", objc.BOOL, .{});
    }

    pub fn setAccessibilityEdited(_self: *@This(), _accessibilityEdited: objc.BOOL) void {
        return objc.msgSend(_self, "setAccessibilityEdited:", void, .{_accessibilityEdited});
    }

    pub fn isAccessibilityEnabled(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isAccessibilityEnabled", objc.BOOL, .{});
    }

    pub fn setAccessibilityEnabled(_self: *@This(), _accessibilityEnabled: objc.BOOL) void {
        return objc.msgSend(_self, "setAccessibilityEnabled:", void, .{_accessibilityEnabled});
    }

    pub fn accessibilityChildren(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilityChildren", ?*foundation.Array, .{});
    }

    pub fn setAccessibilityChildren(_self: *@This(), _accessibilityChildren: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilityChildren:", void, .{_accessibilityChildren});
    }

    pub fn accessibilityChildrenInNavigationOrder(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "accessibilityChildrenInNavigationOrder", ?*anyopaque, .{});
    }

    pub fn setAccessibilityChildrenInNavigationOrder(_self: *@This(), _accessibilityChildrenInNavigationOrder: ?*anyopaque) void {
        return objc.msgSend(_self, "setAccessibilityChildrenInNavigationOrder:", void, .{_accessibilityChildrenInNavigationOrder});
    }

    pub fn accessibilityClearButton(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityClearButton", ?objc.Id, .{});
    }

    pub fn setAccessibilityClearButton(_self: *@This(), _accessibilityClearButton: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityClearButton:", void, .{_accessibilityClearButton});
    }

    pub fn accessibilityCancelButton(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityCancelButton", ?objc.Id, .{});
    }

    pub fn setAccessibilityCancelButton(_self: *@This(), _accessibilityCancelButton: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityCancelButton:", void, .{_accessibilityCancelButton});
    }

    pub fn isAccessibilityProtectedContent(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isAccessibilityProtectedContent", objc.BOOL, .{});
    }

    pub fn setAccessibilityProtectedContent(_self: *@This(), _accessibilityProtectedContent: objc.BOOL) void {
        return objc.msgSend(_self, "setAccessibilityProtectedContent:", void, .{_accessibilityProtectedContent});
    }

    pub fn accessibilityContents(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilityContents", ?*foundation.Array, .{});
    }

    pub fn setAccessibilityContents(_self: *@This(), _accessibilityContents: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilityContents:", void, .{_accessibilityContents});
    }

    pub fn accessibilityLabel(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "accessibilityLabel", ?*foundation.String, .{});
    }

    pub fn setAccessibilityLabel(_self: *@This(), _accessibilityLabel: ?*foundation.String) void {
        return objc.msgSend(_self, "setAccessibilityLabel:", void, .{_accessibilityLabel});
    }

    pub fn isAccessibilityAlternateUIVisible(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isAccessibilityAlternateUIVisible", objc.BOOL, .{});
    }

    pub fn setAccessibilityAlternateUIVisible(_self: *@This(), _accessibilityAlternateUIVisible: objc.BOOL) void {
        return objc.msgSend(_self, "setAccessibilityAlternateUIVisible:", void, .{_accessibilityAlternateUIVisible});
    }

    pub fn accessibilitySharedFocusElements(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilitySharedFocusElements", ?*foundation.Array, .{});
    }

    pub fn setAccessibilitySharedFocusElements(_self: *@This(), _accessibilitySharedFocusElements: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilitySharedFocusElements:", void, .{_accessibilitySharedFocusElements});
    }

    pub fn isAccessibilityRequired(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isAccessibilityRequired", objc.BOOL, .{});
    }

    pub fn setAccessibilityRequired(_self: *@This(), _accessibilityRequired: objc.BOOL) void {
        return objc.msgSend(_self, "setAccessibilityRequired:", void, .{_accessibilityRequired});
    }

    pub fn accessibilityCustomRotors(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "accessibilityCustomRotors", ?*anyopaque, .{});
    }

    pub fn setAccessibilityCustomRotors(_self: *@This(), _accessibilityCustomRotors: ?*anyopaque) void {
        return objc.msgSend(_self, "setAccessibilityCustomRotors:", void, .{_accessibilityCustomRotors});
    }

    pub fn accessibilityUserInputLabels(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "accessibilityUserInputLabels", ?*anyopaque, .{});
    }

    pub fn setAccessibilityUserInputLabels(_self: *@This(), _accessibilityUserInputLabels: ?*anyopaque) void {
        return objc.msgSend(_self, "setAccessibilityUserInputLabels:", void, .{_accessibilityUserInputLabels});
    }

    pub fn accessibilityAttributedUserInputLabels(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "accessibilityAttributedUserInputLabels", ?*anyopaque, .{});
    }

    pub fn setAccessibilityAttributedUserInputLabels(_self: *@This(), _accessibilityAttributedUserInputLabels: ?*anyopaque) void {
        return objc.msgSend(_self, "setAccessibilityAttributedUserInputLabels:", void, .{_accessibilityAttributedUserInputLabels});
    }

    pub fn accessibilityApplicationFocusedUIElement(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityApplicationFocusedUIElement", ?objc.Id, .{});
    }

    pub fn setAccessibilityApplicationFocusedUIElement(_self: *@This(), _accessibilityApplicationFocusedUIElement: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityApplicationFocusedUIElement:", void, .{_accessibilityApplicationFocusedUIElement});
    }

    pub fn accessibilityMainWindow(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityMainWindow", ?objc.Id, .{});
    }

    pub fn setAccessibilityMainWindow(_self: *@This(), _accessibilityMainWindow: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityMainWindow:", void, .{_accessibilityMainWindow});
    }

    pub fn isAccessibilityHidden(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isAccessibilityHidden", objc.BOOL, .{});
    }

    pub fn setAccessibilityHidden(_self: *@This(), _accessibilityHidden: objc.BOOL) void {
        return objc.msgSend(_self, "setAccessibilityHidden:", void, .{_accessibilityHidden});
    }

    pub fn isAccessibilityFrontmost(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isAccessibilityFrontmost", objc.BOOL, .{});
    }

    pub fn setAccessibilityFrontmost(_self: *@This(), _accessibilityFrontmost: objc.BOOL) void {
        return objc.msgSend(_self, "setAccessibilityFrontmost:", void, .{_accessibilityFrontmost});
    }

    pub fn accessibilityFocusedWindow(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityFocusedWindow", ?objc.Id, .{});
    }

    pub fn setAccessibilityFocusedWindow(_self: *@This(), _accessibilityFocusedWindow: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityFocusedWindow:", void, .{_accessibilityFocusedWindow});
    }

    pub fn accessibilityWindows(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilityWindows", ?*foundation.Array, .{});
    }

    pub fn setAccessibilityWindows(_self: *@This(), _accessibilityWindows: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilityWindows:", void, .{_accessibilityWindows});
    }

    pub fn accessibilityExtrasMenuBar(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityExtrasMenuBar", ?objc.Id, .{});
    }

    pub fn setAccessibilityExtrasMenuBar(_self: *@This(), _accessibilityExtrasMenuBar: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityExtrasMenuBar:", void, .{_accessibilityExtrasMenuBar});
    }

    pub fn accessibilityMenuBar(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityMenuBar", ?objc.Id, .{});
    }

    pub fn setAccessibilityMenuBar(_self: *@This(), _accessibilityMenuBar: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityMenuBar:", void, .{_accessibilityMenuBar});
    }

    pub fn accessibilityColumnTitles(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilityColumnTitles", ?*foundation.Array, .{});
    }

    pub fn setAccessibilityColumnTitles(_self: *@This(), _accessibilityColumnTitles: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilityColumnTitles:", void, .{_accessibilityColumnTitles});
    }

    pub fn isAccessibilityOrderedByRow(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isAccessibilityOrderedByRow", objc.BOOL, .{});
    }

    pub fn setAccessibilityOrderedByRow(_self: *@This(), _accessibilityOrderedByRow: objc.BOOL) void {
        return objc.msgSend(_self, "setAccessibilityOrderedByRow:", void, .{_accessibilityOrderedByRow});
    }

    pub fn accessibilityHorizontalUnits(_self: *@This()) app_kit.AccessibilityUnits {
        return objc.msgSend(_self, "accessibilityHorizontalUnits", app_kit.AccessibilityUnits, .{});
    }

    pub fn setAccessibilityHorizontalUnits(_self: *@This(), _accessibilityHorizontalUnits: app_kit.AccessibilityUnits) void {
        return objc.msgSend(_self, "setAccessibilityHorizontalUnits:", void, .{_accessibilityHorizontalUnits});
    }

    pub fn accessibilityVerticalUnits(_self: *@This()) app_kit.AccessibilityUnits {
        return objc.msgSend(_self, "accessibilityVerticalUnits", app_kit.AccessibilityUnits, .{});
    }

    pub fn setAccessibilityVerticalUnits(_self: *@This(), _accessibilityVerticalUnits: app_kit.AccessibilityUnits) void {
        return objc.msgSend(_self, "setAccessibilityVerticalUnits:", void, .{_accessibilityVerticalUnits});
    }

    pub fn accessibilityHorizontalUnitDescription(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "accessibilityHorizontalUnitDescription", ?*foundation.String, .{});
    }

    pub fn setAccessibilityHorizontalUnitDescription(_self: *@This(), _accessibilityHorizontalUnitDescription: ?*foundation.String) void {
        return objc.msgSend(_self, "setAccessibilityHorizontalUnitDescription:", void, .{_accessibilityHorizontalUnitDescription});
    }

    pub fn accessibilityVerticalUnitDescription(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "accessibilityVerticalUnitDescription", ?*foundation.String, .{});
    }

    pub fn setAccessibilityVerticalUnitDescription(_self: *@This(), _accessibilityVerticalUnitDescription: ?*foundation.String) void {
        return objc.msgSend(_self, "setAccessibilityVerticalUnitDescription:", void, .{_accessibilityVerticalUnitDescription});
    }

    pub fn accessibilityHandles(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilityHandles", ?*foundation.Array, .{});
    }

    pub fn setAccessibilityHandles(_self: *@This(), _accessibilityHandles: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilityHandles:", void, .{_accessibilityHandles});
    }

    pub fn accessibilityWarningValue(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityWarningValue", ?objc.Id, .{});
    }

    pub fn setAccessibilityWarningValue(_self: *@This(), _accessibilityWarningValue: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityWarningValue:", void, .{_accessibilityWarningValue});
    }

    pub fn accessibilityCriticalValue(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityCriticalValue", ?objc.Id, .{});
    }

    pub fn setAccessibilityCriticalValue(_self: *@This(), _accessibilityCriticalValue: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityCriticalValue:", void, .{_accessibilityCriticalValue});
    }

    pub fn isAccessibilityDisclosed(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isAccessibilityDisclosed", objc.BOOL, .{});
    }

    pub fn setAccessibilityDisclosed(_self: *@This(), _accessibilityDisclosed: objc.BOOL) void {
        return objc.msgSend(_self, "setAccessibilityDisclosed:", void, .{_accessibilityDisclosed});
    }

    pub fn accessibilityDisclosedByRow(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityDisclosedByRow", ?objc.Id, .{});
    }

    pub fn setAccessibilityDisclosedByRow(_self: *@This(), _accessibilityDisclosedByRow: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityDisclosedByRow:", void, .{_accessibilityDisclosedByRow});
    }

    pub fn accessibilityDisclosedRows(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityDisclosedRows", ?objc.Id, .{});
    }

    pub fn setAccessibilityDisclosedRows(_self: *@This(), _accessibilityDisclosedRows: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityDisclosedRows:", void, .{_accessibilityDisclosedRows});
    }

    pub fn accessibilityDisclosureLevel(_self: *@This()) objc.NSInteger {
        return objc.msgSend(_self, "accessibilityDisclosureLevel", objc.NSInteger, .{});
    }

    pub fn setAccessibilityDisclosureLevel(_self: *@This(), _accessibilityDisclosureLevel: objc.NSInteger) void {
        return objc.msgSend(_self, "setAccessibilityDisclosureLevel:", void, .{_accessibilityDisclosureLevel});
    }

    pub fn accessibilityMarkerUIElements(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilityMarkerUIElements", ?*foundation.Array, .{});
    }

    pub fn setAccessibilityMarkerUIElements(_self: *@This(), _accessibilityMarkerUIElements: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilityMarkerUIElements:", void, .{_accessibilityMarkerUIElements});
    }

    pub fn accessibilityMarkerValues(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityMarkerValues", ?objc.Id, .{});
    }

    pub fn setAccessibilityMarkerValues(_self: *@This(), _accessibilityMarkerValues: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityMarkerValues:", void, .{_accessibilityMarkerValues});
    }

    pub fn accessibilityMarkerGroupUIElement(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityMarkerGroupUIElement", ?objc.Id, .{});
    }

    pub fn setAccessibilityMarkerGroupUIElement(_self: *@This(), _accessibilityMarkerGroupUIElement: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityMarkerGroupUIElement:", void, .{_accessibilityMarkerGroupUIElement});
    }

    pub fn accessibilityUnits(_self: *@This()) app_kit.AccessibilityUnits {
        return objc.msgSend(_self, "accessibilityUnits", app_kit.AccessibilityUnits, .{});
    }

    pub fn setAccessibilityUnits(_self: *@This(), _accessibilityUnits: app_kit.AccessibilityUnits) void {
        return objc.msgSend(_self, "setAccessibilityUnits:", void, .{_accessibilityUnits});
    }

    pub fn accessibilityUnitDescription(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "accessibilityUnitDescription", ?*foundation.String, .{});
    }

    pub fn setAccessibilityUnitDescription(_self: *@This(), _accessibilityUnitDescription: ?*foundation.String) void {
        return objc.msgSend(_self, "setAccessibilityUnitDescription:", void, .{_accessibilityUnitDescription});
    }

    pub fn accessibilityRulerMarkerType(_self: *@This()) app_kit.AccessibilityRulerMarkerType {
        return objc.msgSend(_self, "accessibilityRulerMarkerType", app_kit.AccessibilityRulerMarkerType, .{});
    }

    pub fn setAccessibilityRulerMarkerType(_self: *@This(), _accessibilityRulerMarkerType: app_kit.AccessibilityRulerMarkerType) void {
        return objc.msgSend(_self, "setAccessibilityRulerMarkerType:", void, .{_accessibilityRulerMarkerType});
    }

    pub fn accessibilityMarkerTypeDescription(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "accessibilityMarkerTypeDescription", ?*foundation.String, .{});
    }

    pub fn setAccessibilityMarkerTypeDescription(_self: *@This(), _accessibilityMarkerTypeDescription: ?*foundation.String) void {
        return objc.msgSend(_self, "setAccessibilityMarkerTypeDescription:", void, .{_accessibilityMarkerTypeDescription});
    }

    pub fn accessibilityHorizontalScrollBar(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityHorizontalScrollBar", ?objc.Id, .{});
    }

    pub fn setAccessibilityHorizontalScrollBar(_self: *@This(), _accessibilityHorizontalScrollBar: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityHorizontalScrollBar:", void, .{_accessibilityHorizontalScrollBar});
    }

    pub fn accessibilityVerticalScrollBar(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityVerticalScrollBar", ?objc.Id, .{});
    }

    pub fn setAccessibilityVerticalScrollBar(_self: *@This(), _accessibilityVerticalScrollBar: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityVerticalScrollBar:", void, .{_accessibilityVerticalScrollBar});
    }

    pub fn accessibilityAllowedValues(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "accessibilityAllowedValues", ?*anyopaque, .{});
    }

    pub fn setAccessibilityAllowedValues(_self: *@This(), _accessibilityAllowedValues: ?*anyopaque) void {
        return objc.msgSend(_self, "setAccessibilityAllowedValues:", void, .{_accessibilityAllowedValues});
    }

    pub fn accessibilityLabelUIElements(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilityLabelUIElements", ?*foundation.Array, .{});
    }

    pub fn setAccessibilityLabelUIElements(_self: *@This(), _accessibilityLabelUIElements: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilityLabelUIElements:", void, .{_accessibilityLabelUIElements});
    }

    pub fn accessibilityLabelValue(_self: *@This()) f32 {
        return objc.msgSend(_self, "accessibilityLabelValue", f32, .{});
    }

    pub fn setAccessibilityLabelValue(_self: *@This(), _accessibilityLabelValue: f32) void {
        return objc.msgSend(_self, "setAccessibilityLabelValue:", void, .{_accessibilityLabelValue});
    }

    pub fn accessibilitySplitters(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilitySplitters", ?*foundation.Array, .{});
    }

    pub fn setAccessibilitySplitters(_self: *@This(), _accessibilitySplitters: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilitySplitters:", void, .{_accessibilitySplitters});
    }

    pub fn accessibilityDecrementButton(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityDecrementButton", ?objc.Id, .{});
    }

    pub fn setAccessibilityDecrementButton(_self: *@This(), _accessibilityDecrementButton: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityDecrementButton:", void, .{_accessibilityDecrementButton});
    }

    pub fn accessibilityIncrementButton(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityIncrementButton", ?objc.Id, .{});
    }

    pub fn setAccessibilityIncrementButton(_self: *@This(), _accessibilityIncrementButton: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityIncrementButton:", void, .{_accessibilityIncrementButton});
    }

    pub fn accessibilityTabs(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilityTabs", ?*foundation.Array, .{});
    }

    pub fn setAccessibilityTabs(_self: *@This(), _accessibilityTabs: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilityTabs:", void, .{_accessibilityTabs});
    }

    pub fn accessibilityHeader(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityHeader", ?objc.Id, .{});
    }

    pub fn setAccessibilityHeader(_self: *@This(), _accessibilityHeader: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityHeader:", void, .{_accessibilityHeader});
    }

    pub fn accessibilityColumnCount(_self: *@This()) objc.NSInteger {
        return objc.msgSend(_self, "accessibilityColumnCount", objc.NSInteger, .{});
    }

    pub fn setAccessibilityColumnCount(_self: *@This(), _accessibilityColumnCount: objc.NSInteger) void {
        return objc.msgSend(_self, "setAccessibilityColumnCount:", void, .{_accessibilityColumnCount});
    }

    pub fn accessibilityRowCount(_self: *@This()) objc.NSInteger {
        return objc.msgSend(_self, "accessibilityRowCount", objc.NSInteger, .{});
    }

    pub fn setAccessibilityRowCount(_self: *@This(), _accessibilityRowCount: objc.NSInteger) void {
        return objc.msgSend(_self, "setAccessibilityRowCount:", void, .{_accessibilityRowCount});
    }

    pub fn accessibilityIndex(_self: *@This()) objc.NSInteger {
        return objc.msgSend(_self, "accessibilityIndex", objc.NSInteger, .{});
    }

    pub fn setAccessibilityIndex(_self: *@This(), _accessibilityIndex: objc.NSInteger) void {
        return objc.msgSend(_self, "setAccessibilityIndex:", void, .{_accessibilityIndex});
    }

    pub fn accessibilityColumns(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilityColumns", ?*foundation.Array, .{});
    }

    pub fn setAccessibilityColumns(_self: *@This(), _accessibilityColumns: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilityColumns:", void, .{_accessibilityColumns});
    }

    pub fn accessibilityRows(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilityRows", ?*foundation.Array, .{});
    }

    pub fn setAccessibilityRows(_self: *@This(), _accessibilityRows: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilityRows:", void, .{_accessibilityRows});
    }

    pub fn accessibilityVisibleRows(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilityVisibleRows", ?*foundation.Array, .{});
    }

    pub fn setAccessibilityVisibleRows(_self: *@This(), _accessibilityVisibleRows: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilityVisibleRows:", void, .{_accessibilityVisibleRows});
    }

    pub fn accessibilitySelectedRows(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilitySelectedRows", ?*foundation.Array, .{});
    }

    pub fn setAccessibilitySelectedRows(_self: *@This(), _accessibilitySelectedRows: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilitySelectedRows:", void, .{_accessibilitySelectedRows});
    }

    pub fn accessibilityVisibleColumns(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilityVisibleColumns", ?*foundation.Array, .{});
    }

    pub fn setAccessibilityVisibleColumns(_self: *@This(), _accessibilityVisibleColumns: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilityVisibleColumns:", void, .{_accessibilityVisibleColumns});
    }

    pub fn accessibilitySelectedColumns(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilitySelectedColumns", ?*foundation.Array, .{});
    }

    pub fn setAccessibilitySelectedColumns(_self: *@This(), _accessibilitySelectedColumns: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilitySelectedColumns:", void, .{_accessibilitySelectedColumns});
    }

    pub fn accessibilitySortDirection(_self: *@This()) app_kit.AccessibilitySortDirection {
        return objc.msgSend(_self, "accessibilitySortDirection", app_kit.AccessibilitySortDirection, .{});
    }

    pub fn setAccessibilitySortDirection(_self: *@This(), _accessibilitySortDirection: app_kit.AccessibilitySortDirection) void {
        return objc.msgSend(_self, "setAccessibilitySortDirection:", void, .{_accessibilitySortDirection});
    }

    pub fn accessibilityRowHeaderUIElements(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilityRowHeaderUIElements", ?*foundation.Array, .{});
    }

    pub fn setAccessibilityRowHeaderUIElements(_self: *@This(), _accessibilityRowHeaderUIElements: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilityRowHeaderUIElements:", void, .{_accessibilityRowHeaderUIElements});
    }

    pub fn accessibilitySelectedCells(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilitySelectedCells", ?*foundation.Array, .{});
    }

    pub fn setAccessibilitySelectedCells(_self: *@This(), _accessibilitySelectedCells: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilitySelectedCells:", void, .{_accessibilitySelectedCells});
    }

    pub fn accessibilityVisibleCells(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilityVisibleCells", ?*foundation.Array, .{});
    }

    pub fn setAccessibilityVisibleCells(_self: *@This(), _accessibilityVisibleCells: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilityVisibleCells:", void, .{_accessibilityVisibleCells});
    }

    pub fn accessibilityColumnHeaderUIElements(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilityColumnHeaderUIElements", ?*foundation.Array, .{});
    }

    pub fn setAccessibilityColumnHeaderUIElements(_self: *@This(), _accessibilityColumnHeaderUIElements: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilityColumnHeaderUIElements:", void, .{_accessibilityColumnHeaderUIElements});
    }

    pub fn accessibilityRowIndexRange(_self: *@This()) foundation.Range {
        return objc.msgSend(_self, "accessibilityRowIndexRange", foundation.Range, .{});
    }

    pub fn setAccessibilityRowIndexRange(_self: *@This(), _accessibilityRowIndexRange: foundation.Range) void {
        return objc.msgSend(_self, "setAccessibilityRowIndexRange:", void, .{_accessibilityRowIndexRange});
    }

    pub fn accessibilityColumnIndexRange(_self: *@This()) foundation.Range {
        return objc.msgSend(_self, "accessibilityColumnIndexRange", foundation.Range, .{});
    }

    pub fn setAccessibilityColumnIndexRange(_self: *@This(), _accessibilityColumnIndexRange: foundation.Range) void {
        return objc.msgSend(_self, "setAccessibilityColumnIndexRange:", void, .{_accessibilityColumnIndexRange});
    }

    pub fn accessibilityInsertionPointLineNumber(_self: *@This()) objc.NSInteger {
        return objc.msgSend(_self, "accessibilityInsertionPointLineNumber", objc.NSInteger, .{});
    }

    pub fn setAccessibilityInsertionPointLineNumber(_self: *@This(), _accessibilityInsertionPointLineNumber: objc.NSInteger) void {
        return objc.msgSend(_self, "setAccessibilityInsertionPointLineNumber:", void, .{_accessibilityInsertionPointLineNumber});
    }

    pub fn accessibilitySharedCharacterRange(_self: *@This()) foundation.Range {
        return objc.msgSend(_self, "accessibilitySharedCharacterRange", foundation.Range, .{});
    }

    pub fn setAccessibilitySharedCharacterRange(_self: *@This(), _accessibilitySharedCharacterRange: foundation.Range) void {
        return objc.msgSend(_self, "setAccessibilitySharedCharacterRange:", void, .{_accessibilitySharedCharacterRange});
    }

    pub fn accessibilitySharedTextUIElements(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilitySharedTextUIElements", ?*foundation.Array, .{});
    }

    pub fn setAccessibilitySharedTextUIElements(_self: *@This(), _accessibilitySharedTextUIElements: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilitySharedTextUIElements:", void, .{_accessibilitySharedTextUIElements});
    }

    pub fn accessibilityVisibleCharacterRange(_self: *@This()) foundation.Range {
        return objc.msgSend(_self, "accessibilityVisibleCharacterRange", foundation.Range, .{});
    }

    pub fn setAccessibilityVisibleCharacterRange(_self: *@This(), _accessibilityVisibleCharacterRange: foundation.Range) void {
        return objc.msgSend(_self, "setAccessibilityVisibleCharacterRange:", void, .{_accessibilityVisibleCharacterRange});
    }

    pub fn accessibilityNumberOfCharacters(_self: *@This()) objc.NSInteger {
        return objc.msgSend(_self, "accessibilityNumberOfCharacters", objc.NSInteger, .{});
    }

    pub fn setAccessibilityNumberOfCharacters(_self: *@This(), _accessibilityNumberOfCharacters: objc.NSInteger) void {
        return objc.msgSend(_self, "setAccessibilityNumberOfCharacters:", void, .{_accessibilityNumberOfCharacters});
    }

    pub fn accessibilitySelectedText(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "accessibilitySelectedText", ?*foundation.String, .{});
    }

    pub fn setAccessibilitySelectedText(_self: *@This(), _accessibilitySelectedText: ?*foundation.String) void {
        return objc.msgSend(_self, "setAccessibilitySelectedText:", void, .{_accessibilitySelectedText});
    }

    pub fn accessibilitySelectedTextRange(_self: *@This()) foundation.Range {
        return objc.msgSend(_self, "accessibilitySelectedTextRange", foundation.Range, .{});
    }

    pub fn setAccessibilitySelectedTextRange(_self: *@This(), _accessibilitySelectedTextRange: foundation.Range) void {
        return objc.msgSend(_self, "setAccessibilitySelectedTextRange:", void, .{_accessibilitySelectedTextRange});
    }

    pub fn accessibilitySelectedTextRanges(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "accessibilitySelectedTextRanges", ?*anyopaque, .{});
    }

    pub fn setAccessibilitySelectedTextRanges(_self: *@This(), _accessibilitySelectedTextRanges: ?*anyopaque) void {
        return objc.msgSend(_self, "setAccessibilitySelectedTextRanges:", void, .{_accessibilitySelectedTextRanges});
    }

    pub fn accessibilityToolbarButton(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityToolbarButton", ?objc.Id, .{});
    }

    pub fn setAccessibilityToolbarButton(_self: *@This(), _accessibilityToolbarButton: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityToolbarButton:", void, .{_accessibilityToolbarButton});
    }

    pub fn isAccessibilityModal(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isAccessibilityModal", objc.BOOL, .{});
    }

    pub fn setAccessibilityModal(_self: *@This(), _accessibilityModal: objc.BOOL) void {
        return objc.msgSend(_self, "setAccessibilityModal:", void, .{_accessibilityModal});
    }

    pub fn accessibilityProxy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityProxy", ?objc.Id, .{});
    }

    pub fn setAccessibilityProxy(_self: *@This(), _accessibilityProxy: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityProxy:", void, .{_accessibilityProxy});
    }

    pub fn isAccessibilityMain(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isAccessibilityMain", objc.BOOL, .{});
    }

    pub fn setAccessibilityMain(_self: *@This(), _accessibilityMain: objc.BOOL) void {
        return objc.msgSend(_self, "setAccessibilityMain:", void, .{_accessibilityMain});
    }

    pub fn accessibilityFullScreenButton(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityFullScreenButton", ?objc.Id, .{});
    }

    pub fn setAccessibilityFullScreenButton(_self: *@This(), _accessibilityFullScreenButton: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityFullScreenButton:", void, .{_accessibilityFullScreenButton});
    }

    pub fn accessibilityGrowArea(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityGrowArea", ?objc.Id, .{});
    }

    pub fn setAccessibilityGrowArea(_self: *@This(), _accessibilityGrowArea: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityGrowArea:", void, .{_accessibilityGrowArea});
    }

    pub fn accessibilityDocument(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "accessibilityDocument", ?*foundation.String, .{});
    }

    pub fn setAccessibilityDocument(_self: *@This(), _accessibilityDocument: ?*foundation.String) void {
        return objc.msgSend(_self, "setAccessibilityDocument:", void, .{_accessibilityDocument});
    }

    pub fn accessibilityDefaultButton(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityDefaultButton", ?objc.Id, .{});
    }

    pub fn setAccessibilityDefaultButton(_self: *@This(), _accessibilityDefaultButton: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityDefaultButton:", void, .{_accessibilityDefaultButton});
    }

    pub fn accessibilityCloseButton(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityCloseButton", ?objc.Id, .{});
    }

    pub fn setAccessibilityCloseButton(_self: *@This(), _accessibilityCloseButton: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityCloseButton:", void, .{_accessibilityCloseButton});
    }

    pub fn accessibilityZoomButton(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityZoomButton", ?objc.Id, .{});
    }

    pub fn setAccessibilityZoomButton(_self: *@This(), _accessibilityZoomButton: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityZoomButton:", void, .{_accessibilityZoomButton});
    }

    pub fn accessibilityMinimizeButton(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityMinimizeButton", ?objc.Id, .{});
    }

    pub fn setAccessibilityMinimizeButton(_self: *@This(), _accessibilityMinimizeButton: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityMinimizeButton:", void, .{_accessibilityMinimizeButton});
    }

    pub fn isAccessibilityMinimized(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isAccessibilityMinimized", objc.BOOL, .{});
    }

    pub fn setAccessibilityMinimized(_self: *@This(), _accessibilityMinimized: objc.BOOL) void {
        return objc.msgSend(_self, "setAccessibilityMinimized:", void, .{_accessibilityMinimized});
    }

    pub fn accessibilityCustomActions(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "accessibilityCustomActions", ?*anyopaque, .{});
    }

    pub fn setAccessibilityCustomActions(_self: *@This(), _accessibilityCustomActions: ?*anyopaque) void {
        return objc.msgSend(_self, "setAccessibilityCustomActions:", void, .{_accessibilityCustomActions});
    }

    pub fn initWithFrame(_self: *@This(), _frameRect: foundation.Rect) *@This() {
        return objc.msgSend(_self, "initWithFrame:", *@This(), .{_frameRect});
    }

    pub fn isDescendantOf(_self: *@This(), _view: ?*app_kit.View) objc.BOOL {
        return objc.msgSend(_self, "isDescendantOf:", objc.BOOL, .{_view});
    }

    pub fn ancestorSharedWithView(_self: *@This(), _view: ?*app_kit.View) ?*app_kit.View {
        return objc.msgSend(_self, "ancestorSharedWithView:", ?*app_kit.View, .{_view});
    }

    pub fn getRectsBeingDrawnCount(_self: *@This(), _rects: ?*?*foundation.Rect, _count: ?*objc.NSInteger) void {
        return objc.msgSend(_self, "getRectsBeingDrawn:count:", void, .{ _rects, _count });
    }

    pub fn needsToDrawRect(_self: *@This(), _rect: foundation.Rect) objc.BOOL {
        return objc.msgSend(_self, "needsToDrawRect:", objc.BOOL, .{_rect});
    }

    pub fn viewDidHide(_self: *@This()) void {
        return objc.msgSend(_self, "viewDidHide", void, .{});
    }

    pub fn viewDidUnhide(_self: *@This()) void {
        return objc.msgSend(_self, "viewDidUnhide", void, .{});
    }

    pub fn addSubview(_self: *@This(), _view: ?*app_kit.View) void {
        return objc.msgSend(_self, "addSubview:", void, .{_view});
    }

    pub fn addSubviewPositionedRelativeTo(_self: *@This(), _view: ?*app_kit.View, _place: app_kit.WindowOrderingMode, _otherView: ?*app_kit.View) void {
        return objc.msgSend(_self, "addSubview:positioned:relativeTo:", void, .{ _view, _place, _otherView });
    }

    pub fn sortSubviewsUsingFunctionContext(_self: *@This(), _compare: ?*const fn (?*anyopaque, ?*anyopaque, ?*anyopaque) callconv(.C) foundation.ComparisonResult, _context: ?*anyopaque) void {
        return objc.msgSend(_self, "sortSubviewsUsingFunction:context:", void, .{ _compare, _context });
    }

    pub fn viewWillMoveToWindow(_self: *@This(), _newWindow: ?*app_kit.Window) void {
        return objc.msgSend(_self, "viewWillMoveToWindow:", void, .{_newWindow});
    }

    pub fn viewDidMoveToWindow(_self: *@This()) void {
        return objc.msgSend(_self, "viewDidMoveToWindow", void, .{});
    }

    pub fn viewWillMoveToSuperview(_self: *@This(), _newSuperview: ?*app_kit.View) void {
        return objc.msgSend(_self, "viewWillMoveToSuperview:", void, .{_newSuperview});
    }

    pub fn viewDidMoveToSuperview(_self: *@This()) void {
        return objc.msgSend(_self, "viewDidMoveToSuperview", void, .{});
    }

    pub fn didAddSubview(_self: *@This(), _subview: ?*app_kit.View) void {
        return objc.msgSend(_self, "didAddSubview:", void, .{_subview});
    }

    pub fn willRemoveSubview(_self: *@This(), _subview: ?*app_kit.View) void {
        return objc.msgSend(_self, "willRemoveSubview:", void, .{_subview});
    }

    pub fn removeFromSuperview(_self: *@This()) void {
        return objc.msgSend(_self, "removeFromSuperview", void, .{});
    }

    pub fn replaceSubviewWith(_self: *@This(), _oldView: ?*app_kit.View, _newView: ?*app_kit.View) void {
        return objc.msgSend(_self, "replaceSubview:with:", void, .{ _oldView, _newView });
    }

    pub fn removeFromSuperviewWithoutNeedingDisplay(_self: *@This()) void {
        return objc.msgSend(_self, "removeFromSuperviewWithoutNeedingDisplay", void, .{});
    }

    pub fn viewDidChangeBackingProperties(_self: *@This()) void {
        return objc.msgSend(_self, "viewDidChangeBackingProperties", void, .{});
    }

    pub fn resizeSubviewsWithOldSize(_self: *@This(), _oldSize: foundation.Size) void {
        return objc.msgSend(_self, "resizeSubviewsWithOldSize:", void, .{_oldSize});
    }

    pub fn resizeWithOldSuperviewSize(_self: *@This(), _oldSize: foundation.Size) void {
        return objc.msgSend(_self, "resizeWithOldSuperviewSize:", void, .{_oldSize});
    }

    pub fn setFrameOrigin(_self: *@This(), _newOrigin: foundation.Point) void {
        return objc.msgSend(_self, "setFrameOrigin:", void, .{_newOrigin});
    }

    pub fn setFrameSize(_self: *@This(), _newSize: foundation.Size) void {
        return objc.msgSend(_self, "setFrameSize:", void, .{_newSize});
    }

    pub fn setBoundsOrigin(_self: *@This(), _newOrigin: foundation.Point) void {
        return objc.msgSend(_self, "setBoundsOrigin:", void, .{_newOrigin});
    }

    pub fn setBoundsSize(_self: *@This(), _newSize: foundation.Size) void {
        return objc.msgSend(_self, "setBoundsSize:", void, .{_newSize});
    }

    pub fn translateOriginToPoint(_self: *@This(), _translation: foundation.Point) void {
        return objc.msgSend(_self, "translateOriginToPoint:", void, .{_translation});
    }

    pub fn scaleUnitSquareToSize(_self: *@This(), _newUnitSize: foundation.Size) void {
        return objc.msgSend(_self, "scaleUnitSquareToSize:", void, .{_newUnitSize});
    }

    pub fn rotateByAngle(_self: *@This(), _angle: core_foundation.CGFloat) void {
        return objc.msgSend(_self, "rotateByAngle:", void, .{_angle});
    }

    pub fn convertPointFromView(_self: *@This(), _point: foundation.Point, _view: ?*app_kit.View) foundation.Point {
        return objc.msgSend(_self, "convertPoint:fromView:", foundation.Point, .{ _point, _view });
    }

    pub fn convertPointToView(_self: *@This(), _point: foundation.Point, _view: ?*app_kit.View) foundation.Point {
        return objc.msgSend(_self, "convertPoint:toView:", foundation.Point, .{ _point, _view });
    }

    pub fn convertSizeFromView(_self: *@This(), _size: foundation.Size, _view: ?*app_kit.View) foundation.Size {
        return objc.msgSend(_self, "convertSize:fromView:", foundation.Size, .{ _size, _view });
    }

    pub fn convertSizeToView(_self: *@This(), _size: foundation.Size, _view: ?*app_kit.View) foundation.Size {
        return objc.msgSend(_self, "convertSize:toView:", foundation.Size, .{ _size, _view });
    }

    pub fn convertRectFromView(_self: *@This(), _rect: foundation.Rect, _view: ?*app_kit.View) foundation.Rect {
        return objc.msgSend(_self, "convertRect:fromView:", foundation.Rect, .{ _rect, _view });
    }

    pub fn convertRectToView(_self: *@This(), _rect: foundation.Rect, _view: ?*app_kit.View) foundation.Rect {
        return objc.msgSend(_self, "convertRect:toView:", foundation.Rect, .{ _rect, _view });
    }

    pub fn backingAlignedRectOptions(_self: *@This(), _rect: foundation.Rect, _options: foundation.AlignmentOptions) foundation.Rect {
        return objc.msgSend(_self, "backingAlignedRect:options:", foundation.Rect, .{ _rect, _options });
    }

    pub fn centerScanRect(_self: *@This(), _rect: foundation.Rect) foundation.Rect {
        return objc.msgSend(_self, "centerScanRect:", foundation.Rect, .{_rect});
    }

    pub fn convertPointToBacking(_self: *@This(), _point: foundation.Point) foundation.Point {
        return objc.msgSend(_self, "convertPointToBacking:", foundation.Point, .{_point});
    }

    pub fn convertPointFromBacking(_self: *@This(), _point: foundation.Point) foundation.Point {
        return objc.msgSend(_self, "convertPointFromBacking:", foundation.Point, .{_point});
    }

    pub fn convertSizeToBacking(_self: *@This(), _size: foundation.Size) foundation.Size {
        return objc.msgSend(_self, "convertSizeToBacking:", foundation.Size, .{_size});
    }

    pub fn convertSizeFromBacking(_self: *@This(), _size: foundation.Size) foundation.Size {
        return objc.msgSend(_self, "convertSizeFromBacking:", foundation.Size, .{_size});
    }

    pub fn convertRectToBacking(_self: *@This(), _rect: foundation.Rect) foundation.Rect {
        return objc.msgSend(_self, "convertRectToBacking:", foundation.Rect, .{_rect});
    }

    pub fn convertRectFromBacking(_self: *@This(), _rect: foundation.Rect) foundation.Rect {
        return objc.msgSend(_self, "convertRectFromBacking:", foundation.Rect, .{_rect});
    }

    pub fn convertPointToLayer(_self: *@This(), _point: foundation.Point) foundation.Point {
        return objc.msgSend(_self, "convertPointToLayer:", foundation.Point, .{_point});
    }

    pub fn convertPointFromLayer(_self: *@This(), _point: foundation.Point) foundation.Point {
        return objc.msgSend(_self, "convertPointFromLayer:", foundation.Point, .{_point});
    }

    pub fn convertSizeToLayer(_self: *@This(), _size: foundation.Size) foundation.Size {
        return objc.msgSend(_self, "convertSizeToLayer:", foundation.Size, .{_size});
    }

    pub fn convertSizeFromLayer(_self: *@This(), _size: foundation.Size) foundation.Size {
        return objc.msgSend(_self, "convertSizeFromLayer:", foundation.Size, .{_size});
    }

    pub fn convertRectToLayer(_self: *@This(), _rect: foundation.Rect) foundation.Rect {
        return objc.msgSend(_self, "convertRectToLayer:", foundation.Rect, .{_rect});
    }

    pub fn convertRectFromLayer(_self: *@This(), _rect: foundation.Rect) foundation.Rect {
        return objc.msgSend(_self, "convertRectFromLayer:", foundation.Rect, .{_rect});
    }

    pub fn setNeedsDisplayInRect(_self: *@This(), _invalidRect: foundation.Rect) void {
        return objc.msgSend(_self, "setNeedsDisplayInRect:", void, .{_invalidRect});
    }

    pub fn lockFocus(_self: *@This()) void {
        return objc.msgSend(_self, "lockFocus", void, .{});
    }

    pub fn unlockFocus(_self: *@This()) void {
        return objc.msgSend(_self, "unlockFocus", void, .{});
    }

    pub fn lockFocusIfCanDraw(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "lockFocusIfCanDraw", objc.BOOL, .{});
    }

    pub fn lockFocusIfCanDrawInContext(_self: *@This(), _context: ?*app_kit.GraphicsContext) objc.BOOL {
        return objc.msgSend(_self, "lockFocusIfCanDrawInContext:", objc.BOOL, .{_context});
    }

    pub fn display(_self: *@This()) void {
        return objc.msgSend(_self, "display", void, .{});
    }

    pub fn displayIfNeeded(_self: *@This()) void {
        return objc.msgSend(_self, "displayIfNeeded", void, .{});
    }

    pub fn displayIfNeededIgnoringOpacity(_self: *@This()) void {
        return objc.msgSend(_self, "displayIfNeededIgnoringOpacity", void, .{});
    }

    pub fn displayRect(_self: *@This(), _rect: foundation.Rect) void {
        return objc.msgSend(_self, "displayRect:", void, .{_rect});
    }

    pub fn displayIfNeededInRect(_self: *@This(), _rect: foundation.Rect) void {
        return objc.msgSend(_self, "displayIfNeededInRect:", void, .{_rect});
    }

    pub fn displayRectIgnoringOpacity(_self: *@This(), _rect: foundation.Rect) void {
        return objc.msgSend(_self, "displayRectIgnoringOpacity:", void, .{_rect});
    }

    pub fn displayIfNeededInRectIgnoringOpacity(_self: *@This(), _rect: foundation.Rect) void {
        return objc.msgSend(_self, "displayIfNeededInRectIgnoringOpacity:", void, .{_rect});
    }

    pub fn drawRect(_self: *@This(), _dirtyRect: foundation.Rect) void {
        return objc.msgSend(_self, "drawRect:", void, .{_dirtyRect});
    }

    pub fn displayRectIgnoringOpacityInContext(_self: *@This(), _rect: foundation.Rect, _context: ?*app_kit.GraphicsContext) void {
        return objc.msgSend(_self, "displayRectIgnoringOpacity:inContext:", void, .{ _rect, _context });
    }

    pub fn bitmapImageRepForCachingDisplayInRect(_self: *@This(), _rect: foundation.Rect) ?*app_kit.BitmapImageRep {
        return objc.msgSend(_self, "bitmapImageRepForCachingDisplayInRect:", ?*app_kit.BitmapImageRep, .{_rect});
    }

    pub fn cacheDisplayInRectToBitmapImageRep(_self: *@This(), _rect: foundation.Rect, _bitmapImageRep: ?*app_kit.BitmapImageRep) void {
        return objc.msgSend(_self, "cacheDisplayInRect:toBitmapImageRep:", void, .{ _rect, _bitmapImageRep });
    }

    pub fn viewWillDraw(_self: *@This()) void {
        return objc.msgSend(_self, "viewWillDraw", void, .{});
    }

    pub fn scrollPoint(_self: *@This(), _point: foundation.Point) void {
        return objc.msgSend(_self, "scrollPoint:", void, .{_point});
    }

    pub fn scrollRectToVisible(_self: *@This(), _rect: foundation.Rect) objc.BOOL {
        return objc.msgSend(_self, "scrollRectToVisible:", objc.BOOL, .{_rect});
    }

    pub fn autoscroll(_self: *@This(), _event: ?*app_kit.Event) objc.BOOL {
        return objc.msgSend(_self, "autoscroll:", objc.BOOL, .{_event});
    }

    pub fn adjustScroll(_self: *@This(), _newVisible: foundation.Rect) foundation.Rect {
        return objc.msgSend(_self, "adjustScroll:", foundation.Rect, .{_newVisible});
    }

    pub fn scrollRectBy(_self: *@This(), _rect: foundation.Rect, _delta: foundation.Size) void {
        return objc.msgSend(_self, "scrollRect:by:", void, .{ _rect, _delta });
    }

    pub fn translateRectsNeedingDisplayInRectBy(_self: *@This(), _clipRect: foundation.Rect, _delta: foundation.Size) void {
        return objc.msgSend(_self, "translateRectsNeedingDisplayInRect:by:", void, .{ _clipRect, _delta });
    }

    pub fn hitTest(_self: *@This(), _point: foundation.Point) ?*app_kit.View {
        return objc.msgSend(_self, "hitTest:", ?*app_kit.View, .{_point});
    }

    pub fn mouseInRect(_self: *@This(), _point: foundation.Point, _rect: foundation.Rect) objc.BOOL {
        return objc.msgSend(_self, "mouse:inRect:", objc.BOOL, .{ _point, _rect });
    }

    pub fn viewWithTag(_self: *@This(), _tag: objc.NSInteger) ?*anyopaque {
        return objc.msgSend(_self, "viewWithTag:", ?*anyopaque, .{_tag});
    }

    pub fn acceptsFirstMouse(_self: *@This(), _event: ?*app_kit.Event) objc.BOOL {
        return objc.msgSend(_self, "acceptsFirstMouse:", objc.BOOL, .{_event});
    }

    pub fn shouldDelayWindowOrderingForEvent(_self: *@This(), _event: ?*app_kit.Event) objc.BOOL {
        return objc.msgSend(_self, "shouldDelayWindowOrderingForEvent:", objc.BOOL, .{_event});
    }

    pub fn makeBackingLayer(_self: *@This()) ?*quartz_core.Layer {
        return objc.msgSend(_self, "makeBackingLayer", ?*quartz_core.Layer, .{});
    }

    pub fn updateLayer(_self: *@This()) void {
        return objc.msgSend(_self, "updateLayer", void, .{});
    }

    pub fn layoutSubtreeIfNeeded(_self: *@This()) void {
        return objc.msgSend(_self, "layoutSubtreeIfNeeded", void, .{});
    }

    pub fn layout(_self: *@This()) void {
        return objc.msgSend(_self, "layout", void, .{});
    }

    pub fn menuForEvent(_self: *@This(), _event: ?*app_kit.Event) ?*app_kit.Menu {
        return objc.msgSend(_self, "menuForEvent:", ?*app_kit.Menu, .{_event});
    }

    pub fn willOpenMenuWithEvent(_self: *@This(), _menu: ?*app_kit.Menu, _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "willOpenMenu:withEvent:", void, .{ _menu, _event });
    }

    pub fn didCloseMenuWithEvent(_self: *@This(), _menu: ?*app_kit.Menu, _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "didCloseMenu:withEvent:", void, .{ _menu, _event });
    }

    pub fn addToolTipRectOwnerUserData(_self: *@This(), _rect: foundation.Rect, _owner: ?objc.Id, _data: ?*anyopaque) app_kit.ToolTipTag {
        return objc.msgSend(_self, "addToolTipRect:owner:userData:", app_kit.ToolTipTag, .{ _rect, _owner, _data });
    }

    pub fn removeToolTip(_self: *@This(), _tag: app_kit.ToolTipTag) void {
        return objc.msgSend(_self, "removeToolTip:", void, .{_tag});
    }

    pub fn removeAllToolTips(_self: *@This()) void {
        return objc.msgSend(_self, "removeAllToolTips", void, .{});
    }

    pub fn viewWillStartLiveResize(_self: *@This()) void {
        return objc.msgSend(_self, "viewWillStartLiveResize", void, .{});
    }

    pub fn viewDidEndLiveResize(_self: *@This()) void {
        return objc.msgSend(_self, "viewDidEndLiveResize", void, .{});
    }

    pub fn getRectsExposedDuringLiveResizeCount(_self: *@This(), _exposedRects: ?*foundation.Rect, _count: ?*objc.NSInteger) void {
        return objc.msgSend(_self, "getRectsExposedDuringLiveResize:count:", void, .{ _exposedRects, _count });
    }

    pub fn rectForSmartMagnificationAtPointInRect(_self: *@This(), _location: foundation.Point, _visibleRect: foundation.Rect) foundation.Rect {
        return objc.msgSend(_self, "rectForSmartMagnificationAtPoint:inRect:", foundation.Rect, .{ _location, _visibleRect });
    }

    pub fn prepareForReuse(_self: *@This()) void {
        return objc.msgSend(_self, "prepareForReuse", void, .{});
    }

    pub fn prepareContentInRect(_self: *@This(), _rect: foundation.Rect) void {
        return objc.msgSend(_self, "prepareContentInRect:", void, .{_rect});
    }

    pub fn viewDidChangeEffectiveAppearance(_self: *@This()) void {
        return objc.msgSend(_self, "viewDidChangeEffectiveAppearance", void, .{});
    }

    pub fn window(_self: *@This()) ?*app_kit.Window {
        return objc.msgSend(_self, "window", ?*app_kit.Window, .{});
    }

    pub fn superview(_self: *@This()) ?*app_kit.View {
        return objc.msgSend(_self, "superview", ?*app_kit.View, .{});
    }

    pub fn subviews(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "subviews", ?*anyopaque, .{});
    }

    pub fn setSubviews(_self: *@This(), _subviews: ?*anyopaque) void {
        return objc.msgSend(_self, "setSubviews:", void, .{_subviews});
    }

    pub fn opaqueAncestor(_self: *@This()) ?*app_kit.View {
        return objc.msgSend(_self, "opaqueAncestor", ?*app_kit.View, .{});
    }

    pub fn isHidden(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isHidden", objc.BOOL, .{});
    }

    pub fn setHidden(_self: *@This(), _hidden: objc.BOOL) void {
        return objc.msgSend(_self, "setHidden:", void, .{_hidden});
    }

    pub fn isHiddenOrHasHiddenAncestor(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isHiddenOrHasHiddenAncestor", objc.BOOL, .{});
    }

    pub fn wantsDefaultClipping(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "wantsDefaultClipping", objc.BOOL, .{});
    }

    pub fn postsFrameChangedNotifications(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "postsFrameChangedNotifications", objc.BOOL, .{});
    }

    pub fn setPostsFrameChangedNotifications(_self: *@This(), _postsFrameChangedNotifications: objc.BOOL) void {
        return objc.msgSend(_self, "setPostsFrameChangedNotifications:", void, .{_postsFrameChangedNotifications});
    }

    pub fn autoresizesSubviews(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "autoresizesSubviews", objc.BOOL, .{});
    }

    pub fn setAutoresizesSubviews(_self: *@This(), _autoresizesSubviews: objc.BOOL) void {
        return objc.msgSend(_self, "setAutoresizesSubviews:", void, .{_autoresizesSubviews});
    }

    pub fn autoresizingMask(_self: *@This()) app_kit.AutoresizingMaskOptions {
        return objc.msgSend(_self, "autoresizingMask", app_kit.AutoresizingMaskOptions, .{});
    }

    pub fn setAutoresizingMask(_self: *@This(), _autoresizingMask: app_kit.AutoresizingMaskOptions) void {
        return objc.msgSend(_self, "setAutoresizingMask:", void, .{_autoresizingMask});
    }

    pub fn frame(_self: *@This()) foundation.Rect {
        return objc.msgSend(_self, "frame", foundation.Rect, .{});
    }

    pub fn setFrame(_self: *@This(), _frame: foundation.Rect) void {
        return objc.msgSend(_self, "setFrame:", void, .{_frame});
    }

    pub fn frameRotation(_self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(_self, "frameRotation", core_foundation.CGFloat, .{});
    }

    pub fn setFrameRotation(_self: *@This(), _frameRotation: core_foundation.CGFloat) void {
        return objc.msgSend(_self, "setFrameRotation:", void, .{_frameRotation});
    }

    pub fn frameCenterRotation(_self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(_self, "frameCenterRotation", core_foundation.CGFloat, .{});
    }

    pub fn setFrameCenterRotation(_self: *@This(), _frameCenterRotation: core_foundation.CGFloat) void {
        return objc.msgSend(_self, "setFrameCenterRotation:", void, .{_frameCenterRotation});
    }

    pub fn boundsRotation(_self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(_self, "boundsRotation", core_foundation.CGFloat, .{});
    }

    pub fn setBoundsRotation(_self: *@This(), _boundsRotation: core_foundation.CGFloat) void {
        return objc.msgSend(_self, "setBoundsRotation:", void, .{_boundsRotation});
    }

    pub fn bounds(_self: *@This()) foundation.Rect {
        return objc.msgSend(_self, "bounds", foundation.Rect, .{});
    }

    pub fn setBounds(_self: *@This(), _bounds: foundation.Rect) void {
        return objc.msgSend(_self, "setBounds:", void, .{_bounds});
    }

    pub fn isFlipped(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isFlipped", objc.BOOL, .{});
    }

    pub fn isRotatedFromBase(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isRotatedFromBase", objc.BOOL, .{});
    }

    pub fn isRotatedOrScaledFromBase(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isRotatedOrScaledFromBase", objc.BOOL, .{});
    }

    pub fn isOpaque(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isOpaque", objc.BOOL, .{});
    }

    pub fn canDrawConcurrently(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "canDrawConcurrently", objc.BOOL, .{});
    }

    pub fn setCanDrawConcurrently(_self: *@This(), _canDrawConcurrently: objc.BOOL) void {
        return objc.msgSend(_self, "setCanDrawConcurrently:", void, .{_canDrawConcurrently});
    }

    pub fn canDraw(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "canDraw", objc.BOOL, .{});
    }

    pub fn needsDisplay(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "needsDisplay", objc.BOOL, .{});
    }

    pub fn setNeedsDisplay(_self: *@This(), _needsDisplay: objc.BOOL) void {
        return objc.msgSend(_self, "setNeedsDisplay:", void, .{_needsDisplay});
    }

    pub fn focusView() ?*app_kit.View {
        return objc.msgSend(Internal.class(), "focusView", ?*app_kit.View, .{});
    }

    pub fn visibleRect(_self: *@This()) foundation.Rect {
        return objc.msgSend(_self, "visibleRect", foundation.Rect, .{});
    }

    pub fn tag(_self: *@This()) objc.NSInteger {
        return objc.msgSend(_self, "tag", objc.NSInteger, .{});
    }

    pub fn needsPanelToBecomeKey(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "needsPanelToBecomeKey", objc.BOOL, .{});
    }

    pub fn mouseDownCanMoveWindow(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "mouseDownCanMoveWindow", objc.BOOL, .{});
    }

    pub fn acceptsTouchEvents(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "acceptsTouchEvents", objc.BOOL, .{});
    }

    pub fn setAcceptsTouchEvents(_self: *@This(), _acceptsTouchEvents: objc.BOOL) void {
        return objc.msgSend(_self, "setAcceptsTouchEvents:", void, .{_acceptsTouchEvents});
    }

    pub fn wantsRestingTouches(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "wantsRestingTouches", objc.BOOL, .{});
    }

    pub fn setWantsRestingTouches(_self: *@This(), _wantsRestingTouches: objc.BOOL) void {
        return objc.msgSend(_self, "setWantsRestingTouches:", void, .{_wantsRestingTouches});
    }

    pub fn layerContentsRedrawPolicy(_self: *@This()) app_kit.ViewLayerContentsRedrawPolicy {
        return objc.msgSend(_self, "layerContentsRedrawPolicy", app_kit.ViewLayerContentsRedrawPolicy, .{});
    }

    pub fn setLayerContentsRedrawPolicy(_self: *@This(), _layerContentsRedrawPolicy: app_kit.ViewLayerContentsRedrawPolicy) void {
        return objc.msgSend(_self, "setLayerContentsRedrawPolicy:", void, .{_layerContentsRedrawPolicy});
    }

    pub fn layerContentsPlacement(_self: *@This()) app_kit.ViewLayerContentsPlacement {
        return objc.msgSend(_self, "layerContentsPlacement", app_kit.ViewLayerContentsPlacement, .{});
    }

    pub fn setLayerContentsPlacement(_self: *@This(), _layerContentsPlacement: app_kit.ViewLayerContentsPlacement) void {
        return objc.msgSend(_self, "setLayerContentsPlacement:", void, .{_layerContentsPlacement});
    }

    pub fn wantsLayer(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "wantsLayer", objc.BOOL, .{});
    }

    pub fn setWantsLayer(_self: *@This(), _wantsLayer: objc.BOOL) void {
        return objc.msgSend(_self, "setWantsLayer:", void, .{_wantsLayer});
    }

    pub fn layer(_self: *@This()) ?*quartz_core.Layer {
        return objc.msgSend(_self, "layer", ?*quartz_core.Layer, .{});
    }

    pub fn setLayer(_self: *@This(), _layer: ?*quartz_core.Layer) void {
        return objc.msgSend(_self, "setLayer:", void, .{_layer});
    }

    pub fn wantsUpdateLayer(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "wantsUpdateLayer", objc.BOOL, .{});
    }

    pub fn canDrawSubviewsIntoLayer(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "canDrawSubviewsIntoLayer", objc.BOOL, .{});
    }

    pub fn setCanDrawSubviewsIntoLayer(_self: *@This(), _canDrawSubviewsIntoLayer: objc.BOOL) void {
        return objc.msgSend(_self, "setCanDrawSubviewsIntoLayer:", void, .{_canDrawSubviewsIntoLayer});
    }

    pub fn needsLayout(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "needsLayout", objc.BOOL, .{});
    }

    pub fn setNeedsLayout(_self: *@This(), _needsLayout: objc.BOOL) void {
        return objc.msgSend(_self, "setNeedsLayout:", void, .{_needsLayout});
    }

    pub fn alphaValue(_self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(_self, "alphaValue", core_foundation.CGFloat, .{});
    }

    pub fn setAlphaValue(_self: *@This(), _alphaValue: core_foundation.CGFloat) void {
        return objc.msgSend(_self, "setAlphaValue:", void, .{_alphaValue});
    }

    pub fn layerUsesCoreImageFilters(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "layerUsesCoreImageFilters", objc.BOOL, .{});
    }

    pub fn setLayerUsesCoreImageFilters(_self: *@This(), _layerUsesCoreImageFilters: objc.BOOL) void {
        return objc.msgSend(_self, "setLayerUsesCoreImageFilters:", void, .{_layerUsesCoreImageFilters});
    }

    pub fn backgroundFilters(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "backgroundFilters", ?*anyopaque, .{});
    }

    pub fn setBackgroundFilters(_self: *@This(), _backgroundFilters: ?*anyopaque) void {
        return objc.msgSend(_self, "setBackgroundFilters:", void, .{_backgroundFilters});
    }

    pub fn compositingFilter(_self: *@This()) ?*core_image.Filter {
        return objc.msgSend(_self, "compositingFilter", ?*core_image.Filter, .{});
    }

    pub fn setCompositingFilter(_self: *@This(), _compositingFilter: ?*core_image.Filter) void {
        return objc.msgSend(_self, "setCompositingFilter:", void, .{_compositingFilter});
    }

    pub fn contentFilters(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "contentFilters", ?*anyopaque, .{});
    }

    pub fn setContentFilters(_self: *@This(), _contentFilters: ?*anyopaque) void {
        return objc.msgSend(_self, "setContentFilters:", void, .{_contentFilters});
    }

    pub fn shadow(_self: *@This()) ?*app_kit.Shadow {
        return objc.msgSend(_self, "shadow", ?*app_kit.Shadow, .{});
    }

    pub fn setShadow(_self: *@This(), _shadow: ?*app_kit.Shadow) void {
        return objc.msgSend(_self, "setShadow:", void, .{_shadow});
    }

    pub fn clipsToBounds(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "clipsToBounds", objc.BOOL, .{});
    }

    pub fn setClipsToBounds(_self: *@This(), _clipsToBounds: objc.BOOL) void {
        return objc.msgSend(_self, "setClipsToBounds:", void, .{_clipsToBounds});
    }

    pub fn postsBoundsChangedNotifications(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "postsBoundsChangedNotifications", objc.BOOL, .{});
    }

    pub fn setPostsBoundsChangedNotifications(_self: *@This(), _postsBoundsChangedNotifications: objc.BOOL) void {
        return objc.msgSend(_self, "setPostsBoundsChangedNotifications:", void, .{_postsBoundsChangedNotifications});
    }

    pub fn enclosingScrollView(_self: *@This()) ?*app_kit.ScrollView {
        return objc.msgSend(_self, "enclosingScrollView", ?*app_kit.ScrollView, .{});
    }

    pub fn defaultMenu() ?*app_kit.Menu {
        return objc.msgSend(Internal.class(), "defaultMenu", ?*app_kit.Menu, .{});
    }

    pub fn toolTip(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "toolTip", ?*foundation.String, .{});
    }

    pub fn setToolTip(_self: *@This(), _toolTip: ?*foundation.String) void {
        return objc.msgSend(_self, "setToolTip:", void, .{_toolTip});
    }

    pub fn inLiveResize(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "inLiveResize", objc.BOOL, .{});
    }

    pub fn preservesContentDuringLiveResize(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "preservesContentDuringLiveResize", objc.BOOL, .{});
    }

    pub fn rectPreservedDuringLiveResize(_self: *@This()) foundation.Rect {
        return objc.msgSend(_self, "rectPreservedDuringLiveResize", foundation.Rect, .{});
    }

    pub fn inputContext(_self: *@This()) ?*app_kit.TextInputContext {
        return objc.msgSend(_self, "inputContext", ?*app_kit.TextInputContext, .{});
    }

    pub fn userInterfaceLayoutDirection(_self: *@This()) app_kit.UserInterfaceLayoutDirection {
        return objc.msgSend(_self, "userInterfaceLayoutDirection", app_kit.UserInterfaceLayoutDirection, .{});
    }

    pub fn setUserInterfaceLayoutDirection(_self: *@This(), _userInterfaceLayoutDirection: app_kit.UserInterfaceLayoutDirection) void {
        return objc.msgSend(_self, "setUserInterfaceLayoutDirection:", void, .{_userInterfaceLayoutDirection});
    }

    pub fn isCompatibleWithResponsiveScrolling() objc.BOOL {
        return objc.msgSend(Internal.class(), "isCompatibleWithResponsiveScrolling", objc.BOOL, .{});
    }

    pub fn preparedContentRect(_self: *@This()) foundation.Rect {
        return objc.msgSend(_self, "preparedContentRect", foundation.Rect, .{});
    }

    pub fn setPreparedContentRect(_self: *@This(), _preparedContentRect: foundation.Rect) void {
        return objc.msgSend(_self, "setPreparedContentRect:", void, .{_preparedContentRect});
    }

    pub fn allowsVibrancy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsVibrancy", objc.BOOL, .{});
    }

    pub fn initWithAnnotationReuseIdentifier(_self: *@This(), _annotation: ?*anyopaque, _reuseIdentifier: ?*foundation.String) *@This() {
        return objc.msgSend(_self, "initWithAnnotation:reuseIdentifier:", *@This(), .{ _annotation, _reuseIdentifier });
    }

    pub fn prepareForDisplay(_self: *@This()) void {
        return objc.msgSend(_self, "prepareForDisplay", void, .{});
    }

    pub fn setSelectedAnimated(_self: *@This(), _selected: objc.BOOL, _animated: objc.BOOL) void {
        return objc.msgSend(_self, "setSelected:animated:", void, .{ _selected, _animated });
    }

    pub fn setDragStateAnimated(_self: *@This(), _newDragState: AnnotationViewDragState, _animated: objc.BOOL) void {
        return objc.msgSend(_self, "setDragState:animated:", void, .{ _newDragState, _animated });
    }

    pub fn reuseIdentifier(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "reuseIdentifier", ?*foundation.String, .{});
    }

    pub fn annotation(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "annotation", ?*anyopaque, .{});
    }

    pub fn setAnnotation(_self: *@This(), _annotation: ?*anyopaque) void {
        return objc.msgSend(_self, "setAnnotation:", void, .{_annotation});
    }

    pub fn image(_self: *@This()) ?*app_kit.Image {
        return objc.msgSend(_self, "image", ?*app_kit.Image, .{});
    }

    pub fn setImage(_self: *@This(), _image: ?*app_kit.Image) void {
        return objc.msgSend(_self, "setImage:", void, .{_image});
    }

    pub fn centerOffset(_self: *@This()) core_foundation.CGPoint {
        return objc.msgSend(_self, "centerOffset", core_foundation.CGPoint, .{});
    }

    pub fn setCenterOffset(_self: *@This(), _centerOffset: core_foundation.CGPoint) void {
        return objc.msgSend(_self, "setCenterOffset:", void, .{_centerOffset});
    }

    pub fn accessoryOffset(_self: *@This()) core_foundation.CGPoint {
        return objc.msgSend(_self, "accessoryOffset", core_foundation.CGPoint, .{});
    }

    pub fn setAccessoryOffset(_self: *@This(), _accessoryOffset: core_foundation.CGPoint) void {
        return objc.msgSend(_self, "setAccessoryOffset:", void, .{_accessoryOffset});
    }

    pub fn calloutOffset(_self: *@This()) core_foundation.CGPoint {
        return objc.msgSend(_self, "calloutOffset", core_foundation.CGPoint, .{});
    }

    pub fn setCalloutOffset(_self: *@This(), _calloutOffset: core_foundation.CGPoint) void {
        return objc.msgSend(_self, "setCalloutOffset:", void, .{_calloutOffset});
    }

    pub fn leftCalloutOffset(_self: *@This()) core_foundation.CGPoint {
        return objc.msgSend(_self, "leftCalloutOffset", core_foundation.CGPoint, .{});
    }

    pub fn setLeftCalloutOffset(_self: *@This(), _leftCalloutOffset: core_foundation.CGPoint) void {
        return objc.msgSend(_self, "setLeftCalloutOffset:", void, .{_leftCalloutOffset});
    }

    pub fn rightCalloutOffset(_self: *@This()) core_foundation.CGPoint {
        return objc.msgSend(_self, "rightCalloutOffset", core_foundation.CGPoint, .{});
    }

    pub fn setRightCalloutOffset(_self: *@This(), _rightCalloutOffset: core_foundation.CGPoint) void {
        return objc.msgSend(_self, "setRightCalloutOffset:", void, .{_rightCalloutOffset});
    }

    pub fn isEnabled(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isEnabled", objc.BOOL, .{});
    }

    pub fn setEnabled(_self: *@This(), _enabled: objc.BOOL) void {
        return objc.msgSend(_self, "setEnabled:", void, .{_enabled});
    }

    pub fn isHighlighted(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isHighlighted", objc.BOOL, .{});
    }

    pub fn setHighlighted(_self: *@This(), _highlighted: objc.BOOL) void {
        return objc.msgSend(_self, "setHighlighted:", void, .{_highlighted});
    }

    pub fn isSelected(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isSelected", objc.BOOL, .{});
    }

    pub fn setSelected(_self: *@This(), _selected: objc.BOOL) void {
        return objc.msgSend(_self, "setSelected:", void, .{_selected});
    }

    pub fn canShowCallout(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "canShowCallout", objc.BOOL, .{});
    }

    pub fn setCanShowCallout(_self: *@This(), _canShowCallout: objc.BOOL) void {
        return objc.msgSend(_self, "setCanShowCallout:", void, .{_canShowCallout});
    }

    pub fn leftCalloutAccessoryView(_self: *@This()) ?*app_kit.View {
        return objc.msgSend(_self, "leftCalloutAccessoryView", ?*app_kit.View, .{});
    }

    pub fn setLeftCalloutAccessoryView(_self: *@This(), _leftCalloutAccessoryView: ?*app_kit.View) void {
        return objc.msgSend(_self, "setLeftCalloutAccessoryView:", void, .{_leftCalloutAccessoryView});
    }

    pub fn rightCalloutAccessoryView(_self: *@This()) ?*app_kit.View {
        return objc.msgSend(_self, "rightCalloutAccessoryView", ?*app_kit.View, .{});
    }

    pub fn setRightCalloutAccessoryView(_self: *@This(), _rightCalloutAccessoryView: ?*app_kit.View) void {
        return objc.msgSend(_self, "setRightCalloutAccessoryView:", void, .{_rightCalloutAccessoryView});
    }

    pub fn detailCalloutAccessoryView(_self: *@This()) ?*app_kit.View {
        return objc.msgSend(_self, "detailCalloutAccessoryView", ?*app_kit.View, .{});
    }

    pub fn setDetailCalloutAccessoryView(_self: *@This(), _detailCalloutAccessoryView: ?*app_kit.View) void {
        return objc.msgSend(_self, "setDetailCalloutAccessoryView:", void, .{_detailCalloutAccessoryView});
    }

    pub fn isDraggable(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isDraggable", objc.BOOL, .{});
    }

    pub fn setDraggable(_self: *@This(), _draggable: objc.BOOL) void {
        return objc.msgSend(_self, "setDraggable:", void, .{_draggable});
    }

    pub fn dragState(_self: *@This()) AnnotationViewDragState {
        return objc.msgSend(_self, "dragState", AnnotationViewDragState, .{});
    }

    pub fn setDragState(_self: *@This(), _dragState: AnnotationViewDragState) void {
        return objc.msgSend(_self, "setDragState:", void, .{_dragState});
    }

    pub fn clusteringIdentifier(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "clusteringIdentifier", ?*foundation.String, .{});
    }

    pub fn setClusteringIdentifier(_self: *@This(), _clusteringIdentifier: ?*foundation.String) void {
        return objc.msgSend(_self, "setClusteringIdentifier:", void, .{_clusteringIdentifier});
    }

    pub fn clusterAnnotationView(_self: *@This()) ?*AnnotationView {
        return objc.msgSend(_self, "clusterAnnotationView", ?*AnnotationView, .{});
    }

    pub fn displayPriority(_self: *@This()) FeatureDisplayPriority {
        return objc.msgSend(_self, "displayPriority", FeatureDisplayPriority, .{});
    }

    pub fn setDisplayPriority(_self: *@This(), _displayPriority: FeatureDisplayPriority) void {
        return objc.msgSend(_self, "setDisplayPriority:", void, .{_displayPriority});
    }

    pub fn zPriority(_self: *@This()) AnnotationViewZPriority {
        return objc.msgSend(_self, "zPriority", AnnotationViewZPriority, .{});
    }

    pub fn setZPriority(_self: *@This(), _zPriority: AnnotationViewZPriority) void {
        return objc.msgSend(_self, "setZPriority:", void, .{_zPriority});
    }

    pub fn selectedZPriority(_self: *@This()) AnnotationViewZPriority {
        return objc.msgSend(_self, "selectedZPriority", AnnotationViewZPriority, .{});
    }

    pub fn setSelectedZPriority(_self: *@This(), _selectedZPriority: AnnotationViewZPriority) void {
        return objc.msgSend(_self, "setSelectedZPriority:", void, .{_selectedZPriority});
    }

    pub fn collisionMode(_self: *@This()) AnnotationViewCollisionMode {
        return objc.msgSend(_self, "collisionMode", AnnotationViewCollisionMode, .{});
    }

    pub fn setCollisionMode(_self: *@This(), _collisionMode: AnnotationViewCollisionMode) void {
        return objc.msgSend(_self, "setCollisionMode:", void, .{_collisionMode});
    }

    pub fn redPinColor() ?*app_kit.Color {
        return objc.msgSend(Internal.class(), "redPinColor", ?*app_kit.Color, .{});
    }

    pub fn greenPinColor() ?*app_kit.Color {
        return objc.msgSend(Internal.class(), "greenPinColor", ?*app_kit.Color, .{});
    }

    pub fn purplePinColor() ?*app_kit.Color {
        return objc.msgSend(Internal.class(), "purplePinColor", ?*app_kit.Color, .{});
    }

    pub fn pinTintColor(_self: *@This()) ?*app_kit.Color {
        return objc.msgSend(_self, "pinTintColor", ?*app_kit.Color, .{});
    }

    pub fn setPinTintColor(_self: *@This(), _pinTintColor: ?*app_kit.Color) void {
        return objc.msgSend(_self, "setPinTintColor:", void, .{_pinTintColor});
    }

    pub fn animatesDrop(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "animatesDrop", objc.BOOL, .{});
    }

    pub fn setAnimatesDrop(_self: *@This(), _animatesDrop: objc.BOOL) void {
        return objc.msgSend(_self, "setAnimatesDrop:", void, .{_animatesDrop});
    }

    pub fn pinColor(_self: *@This()) PinAnnotationColor {
        return objc.msgSend(_self, "pinColor", PinAnnotationColor, .{});
    }

    pub fn setPinColor(_self: *@This(), _pinColor: PinAnnotationColor) void {
        return objc.msgSend(_self, "setPinColor:", void, .{_pinColor});
    }
};

/// https://developer.apple.com/documentation/MapKit/MKUserLocation?language=objc
pub const UserLocation = opaque {
    pub const Internal = objc.ExternClass("MKUserLocation", @This(), objc.NSObject, &.{Annotation});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "description", ?*foundation.String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "debugDescription", ?*foundation.String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*foundation.Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*foundation.MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*foundation.MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*foundation.MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*foundation.MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn setCoordinate(_self: *@This(), _newCoordinate: core_location.LocationCoordinate2D) void {
        return objc.msgSend(_self, "setCoordinate:", void, .{_newCoordinate});
    }

    pub fn coordinate(_self: *@This()) core_location.LocationCoordinate2D {
        return objc.msgSend(_self, "coordinate", core_location.LocationCoordinate2D, .{});
    }

    pub fn title(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "title", ?*foundation.String, .{});
    }

    pub fn subtitle(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "subtitle", ?*foundation.String, .{});
    }

    pub fn isUpdating(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isUpdating", objc.BOOL, .{});
    }

    pub fn location(_self: *@This()) ?*core_location.Location {
        return objc.msgSend(_self, "location", ?*core_location.Location, .{});
    }

    pub fn heading(_self: *@This()) ?*core_location.Heading {
        return objc.msgSend(_self, "heading", ?*core_location.Heading, .{});
    }

    pub fn setTitle(_self: *@This(), _title: ?*foundation.String) void {
        return objc.msgSend(_self, "setTitle:", void, .{_title});
    }

    pub fn setSubtitle(_self: *@This(), _subtitle: ?*foundation.String) void {
        return objc.msgSend(_self, "setSubtitle:", void, .{_subtitle});
    }
};

/// https://developer.apple.com/documentation/MapKit/MKUserLocationView?language=objc
pub const UserLocationView = opaque {
    pub const Internal = objc.ExternClass("MKUserLocationView", @This(), AnnotationView, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "description", ?*foundation.String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "debugDescription", ?*foundation.String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*foundation.Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*foundation.MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*foundation.MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*foundation.MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*foundation.MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*foundation.Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*foundation.Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn tryToPerformWith(_self: *@This(), _action: objc.Selector, _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "tryToPerform:with:", objc.BOOL, .{ _action, _object });
    }

    pub fn performKeyEquivalent(_self: *@This(), _event: ?*app_kit.Event) objc.BOOL {
        return objc.msgSend(_self, "performKeyEquivalent:", objc.BOOL, .{_event});
    }

    pub fn validRequestorForSendTypeReturnType(_self: *@This(), _sendType: app_kit.PasteboardType, _returnType: app_kit.PasteboardType) ?objc.Id {
        return objc.msgSend(_self, "validRequestorForSendType:returnType:", ?objc.Id, .{ _sendType, _returnType });
    }

    pub fn mouseDown(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "mouseDown:", void, .{_event});
    }

    pub fn rightMouseDown(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "rightMouseDown:", void, .{_event});
    }

    pub fn otherMouseDown(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "otherMouseDown:", void, .{_event});
    }

    pub fn mouseUp(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "mouseUp:", void, .{_event});
    }

    pub fn rightMouseUp(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "rightMouseUp:", void, .{_event});
    }

    pub fn otherMouseUp(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "otherMouseUp:", void, .{_event});
    }

    pub fn mouseMoved(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "mouseMoved:", void, .{_event});
    }

    pub fn mouseDragged(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "mouseDragged:", void, .{_event});
    }

    pub fn scrollWheel(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "scrollWheel:", void, .{_event});
    }

    pub fn rightMouseDragged(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "rightMouseDragged:", void, .{_event});
    }

    pub fn otherMouseDragged(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "otherMouseDragged:", void, .{_event});
    }

    pub fn mouseEntered(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "mouseEntered:", void, .{_event});
    }

    pub fn mouseExited(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "mouseExited:", void, .{_event});
    }

    pub fn keyDown(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "keyDown:", void, .{_event});
    }

    pub fn keyUp(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "keyUp:", void, .{_event});
    }

    pub fn flagsChanged(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "flagsChanged:", void, .{_event});
    }

    pub fn tabletPoint(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "tabletPoint:", void, .{_event});
    }

    pub fn tabletProximity(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "tabletProximity:", void, .{_event});
    }

    pub fn cursorUpdate(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "cursorUpdate:", void, .{_event});
    }

    pub fn magnifyWithEvent(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "magnifyWithEvent:", void, .{_event});
    }

    pub fn rotateWithEvent(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "rotateWithEvent:", void, .{_event});
    }

    pub fn swipeWithEvent(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "swipeWithEvent:", void, .{_event});
    }

    pub fn beginGestureWithEvent(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "beginGestureWithEvent:", void, .{_event});
    }

    pub fn endGestureWithEvent(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "endGestureWithEvent:", void, .{_event});
    }

    pub fn smartMagnifyWithEvent(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "smartMagnifyWithEvent:", void, .{_event});
    }

    pub fn changeModeWithEvent(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "changeModeWithEvent:", void, .{_event});
    }

    pub fn touchesBeganWithEvent(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "touchesBeganWithEvent:", void, .{_event});
    }

    pub fn touchesMovedWithEvent(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "touchesMovedWithEvent:", void, .{_event});
    }

    pub fn touchesEndedWithEvent(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "touchesEndedWithEvent:", void, .{_event});
    }

    pub fn touchesCancelledWithEvent(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "touchesCancelledWithEvent:", void, .{_event});
    }

    pub fn quickLookWithEvent(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "quickLookWithEvent:", void, .{_event});
    }

    pub fn pressureChangeWithEvent(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "pressureChangeWithEvent:", void, .{_event});
    }

    pub fn contextMenuKeyDown(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "contextMenuKeyDown:", void, .{_event});
    }

    pub fn noResponderFor(_self: *@This(), _eventSelector: objc.Selector) void {
        return objc.msgSend(_self, "noResponderFor:", void, .{_eventSelector});
    }

    pub fn becomeFirstResponder(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "becomeFirstResponder", objc.BOOL, .{});
    }

    pub fn resignFirstResponder(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "resignFirstResponder", objc.BOOL, .{});
    }

    pub fn interpretKeyEvents(_self: *@This(), _eventArray: ?*anyopaque) void {
        return objc.msgSend(_self, "interpretKeyEvents:", void, .{_eventArray});
    }

    pub fn flushBufferedKeyEvents(_self: *@This()) void {
        return objc.msgSend(_self, "flushBufferedKeyEvents", void, .{});
    }

    pub fn showContextHelp(_self: *@This(), _sender: ?objc.Id) void {
        return objc.msgSend(_self, "showContextHelp:", void, .{_sender});
    }

    pub fn helpRequested(_self: *@This(), _eventPtr: ?*app_kit.Event) void {
        return objc.msgSend(_self, "helpRequested:", void, .{_eventPtr});
    }

    pub fn shouldBeTreatedAsInkEvent(_self: *@This(), _event: ?*app_kit.Event) objc.BOOL {
        return objc.msgSend(_self, "shouldBeTreatedAsInkEvent:", objc.BOOL, .{_event});
    }

    pub fn wantsScrollEventsForSwipeTrackingOnAxis(_self: *@This(), _axis: app_kit.EventGestureAxis) objc.BOOL {
        return objc.msgSend(_self, "wantsScrollEventsForSwipeTrackingOnAxis:", objc.BOOL, .{_axis});
    }

    pub fn wantsForwardedScrollEventsForAxis(_self: *@This(), _axis: app_kit.EventGestureAxis) objc.BOOL {
        return objc.msgSend(_self, "wantsForwardedScrollEventsForAxis:", objc.BOOL, .{_axis});
    }

    pub fn supplementalTargetForActionSender(_self: *@This(), _action: objc.Selector, _sender: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "supplementalTargetForAction:sender:", ?objc.Id, .{ _action, _sender });
    }

    pub fn nextResponder(_self: *@This()) ?*app_kit.Responder {
        return objc.msgSend(_self, "nextResponder", ?*app_kit.Responder, .{});
    }

    pub fn setNextResponder(_self: *@This(), _nextResponder: ?*app_kit.Responder) void {
        return objc.msgSend(_self, "setNextResponder:", void, .{_nextResponder});
    }

    pub fn acceptsFirstResponder(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "acceptsFirstResponder", objc.BOOL, .{});
    }

    pub fn menu(_self: *@This()) ?*app_kit.Menu {
        return objc.msgSend(_self, "menu", ?*app_kit.Menu, .{});
    }

    pub fn setMenu(_self: *@This(), _menu: ?*app_kit.Menu) void {
        return objc.msgSend(_self, "setMenu:", void, .{_menu});
    }

    pub fn animator(_self: *@This()) *@This() {
        return objc.msgSend(_self, "animator", *@This(), .{});
    }

    pub fn animationForKey(_self: *@This(), _key: app_kit.AnimatablePropertyKey) ?objc.Id {
        return objc.msgSend(_self, "animationForKey:", ?objc.Id, .{_key});
    }

    pub fn defaultAnimationForKey(_key: app_kit.AnimatablePropertyKey) ?objc.Id {
        return objc.msgSend(Internal.class(), "defaultAnimationForKey:", ?objc.Id, .{_key});
    }

    pub fn animations(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "animations", ?*anyopaque, .{});
    }

    pub fn setAnimations(_self: *@This(), _animations: ?*anyopaque) void {
        return objc.msgSend(_self, "setAnimations:", void, .{_animations});
    }

    pub fn identifier(_self: *@This()) app_kit.UserInterfaceItemIdentifier {
        return objc.msgSend(_self, "identifier", app_kit.UserInterfaceItemIdentifier, .{});
    }

    pub fn setIdentifier(_self: *@This(), _identifier: app_kit.UserInterfaceItemIdentifier) void {
        return objc.msgSend(_self, "setIdentifier:", void, .{_identifier});
    }

    pub fn draggingEntered(_self: *@This(), _sender: ?*anyopaque) app_kit.DragOperation {
        return objc.msgSend(_self, "draggingEntered:", app_kit.DragOperation, .{_sender});
    }

    pub fn draggingUpdated(_self: *@This(), _sender: ?*anyopaque) app_kit.DragOperation {
        return objc.msgSend(_self, "draggingUpdated:", app_kit.DragOperation, .{_sender});
    }

    pub fn draggingExited(_self: *@This(), _sender: ?*anyopaque) void {
        return objc.msgSend(_self, "draggingExited:", void, .{_sender});
    }

    pub fn prepareForDragOperation(_self: *@This(), _sender: ?*anyopaque) objc.BOOL {
        return objc.msgSend(_self, "prepareForDragOperation:", objc.BOOL, .{_sender});
    }

    pub fn performDragOperation(_self: *@This(), _sender: ?*anyopaque) objc.BOOL {
        return objc.msgSend(_self, "performDragOperation:", objc.BOOL, .{_sender});
    }

    pub fn concludeDragOperation(_self: *@This(), _sender: ?*anyopaque) void {
        return objc.msgSend(_self, "concludeDragOperation:", void, .{_sender});
    }

    pub fn draggingEnded(_self: *@This(), _sender: ?*anyopaque) void {
        return objc.msgSend(_self, "draggingEnded:", void, .{_sender});
    }

    pub fn wantsPeriodicDraggingUpdates(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "wantsPeriodicDraggingUpdates", objc.BOOL, .{});
    }

    pub fn updateDraggingItemsForDrag(_self: *@This(), _sender: ?*anyopaque) void {
        return objc.msgSend(_self, "updateDraggingItemsForDrag:", void, .{_sender});
    }

    pub fn appearance(_self: *@This()) ?*app_kit.Appearance {
        return objc.msgSend(_self, "appearance", ?*app_kit.Appearance, .{});
    }

    pub fn setAppearance(_self: *@This(), _appearance: ?*app_kit.Appearance) void {
        return objc.msgSend(_self, "setAppearance:", void, .{_appearance});
    }

    pub fn effectiveAppearance(_self: *@This()) ?*app_kit.Appearance {
        return objc.msgSend(_self, "effectiveAppearance", ?*app_kit.Appearance, .{});
    }

    pub fn accessibilityFrame(_self: *@This()) foundation.Rect {
        return objc.msgSend(_self, "accessibilityFrame", foundation.Rect, .{});
    }

    pub fn accessibilityParent(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityParent", ?objc.Id, .{});
    }

    pub fn isAccessibilityFocused(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isAccessibilityFocused", objc.BOOL, .{});
    }

    pub fn accessibilityIdentifier(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "accessibilityIdentifier", ?*foundation.String, .{});
    }

    pub fn accessibilityLayoutPointForScreenPoint(_self: *@This(), _point: foundation.Point) foundation.Point {
        return objc.msgSend(_self, "accessibilityLayoutPointForScreenPoint:", foundation.Point, .{_point});
    }

    pub fn accessibilityLayoutSizeForScreenSize(_self: *@This(), _size: foundation.Size) foundation.Size {
        return objc.msgSend(_self, "accessibilityLayoutSizeForScreenSize:", foundation.Size, .{_size});
    }

    pub fn accessibilityScreenPointForLayoutPoint(_self: *@This(), _point: foundation.Point) foundation.Point {
        return objc.msgSend(_self, "accessibilityScreenPointForLayoutPoint:", foundation.Point, .{_point});
    }

    pub fn accessibilityScreenSizeForLayoutSize(_self: *@This(), _size: foundation.Size) foundation.Size {
        return objc.msgSend(_self, "accessibilityScreenSizeForLayoutSize:", foundation.Size, .{_size});
    }

    pub fn accessibilityCellForColumnRow(_self: *@This(), _column: objc.NSInteger, _row: objc.NSInteger) ?objc.Id {
        return objc.msgSend(_self, "accessibilityCellForColumn:row:", ?objc.Id, .{ _column, _row });
    }

    pub fn accessibilityAttributedStringForRange(_self: *@This(), _range: foundation.Range) ?*foundation.AttributedString {
        return objc.msgSend(_self, "accessibilityAttributedStringForRange:", ?*foundation.AttributedString, .{_range});
    }

    pub fn accessibilityRangeForLine(_self: *@This(), _line: objc.NSInteger) foundation.Range {
        return objc.msgSend(_self, "accessibilityRangeForLine:", foundation.Range, .{_line});
    }

    pub fn accessibilityStringForRange(_self: *@This(), _range: foundation.Range) ?*foundation.String {
        return objc.msgSend(_self, "accessibilityStringForRange:", ?*foundation.String, .{_range});
    }

    pub fn accessibilityRangeForPosition(_self: *@This(), _point: foundation.Point) foundation.Range {
        return objc.msgSend(_self, "accessibilityRangeForPosition:", foundation.Range, .{_point});
    }

    pub fn accessibilityRangeForIndex(_self: *@This(), _index: objc.NSInteger) foundation.Range {
        return objc.msgSend(_self, "accessibilityRangeForIndex:", foundation.Range, .{_index});
    }

    pub fn accessibilityFrameForRange(_self: *@This(), _range: foundation.Range) foundation.Rect {
        return objc.msgSend(_self, "accessibilityFrameForRange:", foundation.Rect, .{_range});
    }

    pub fn accessibilityRTFForRange(_self: *@This(), _range: foundation.Range) ?*foundation.Data {
        return objc.msgSend(_self, "accessibilityRTFForRange:", ?*foundation.Data, .{_range});
    }

    pub fn accessibilityStyleRangeForIndex(_self: *@This(), _index: objc.NSInteger) foundation.Range {
        return objc.msgSend(_self, "accessibilityStyleRangeForIndex:", foundation.Range, .{_index});
    }

    pub fn accessibilityLineForIndex(_self: *@This(), _index: objc.NSInteger) objc.NSInteger {
        return objc.msgSend(_self, "accessibilityLineForIndex:", objc.NSInteger, .{_index});
    }

    pub fn accessibilityPerformCancel(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "accessibilityPerformCancel", objc.BOOL, .{});
    }

    pub fn accessibilityPerformConfirm(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "accessibilityPerformConfirm", objc.BOOL, .{});
    }

    pub fn accessibilityPerformDecrement(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "accessibilityPerformDecrement", objc.BOOL, .{});
    }

    pub fn accessibilityPerformDelete(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "accessibilityPerformDelete", objc.BOOL, .{});
    }

    pub fn accessibilityPerformIncrement(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "accessibilityPerformIncrement", objc.BOOL, .{});
    }

    pub fn accessibilityPerformPick(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "accessibilityPerformPick", objc.BOOL, .{});
    }

    pub fn accessibilityPerformPress(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "accessibilityPerformPress", objc.BOOL, .{});
    }

    pub fn accessibilityPerformRaise(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "accessibilityPerformRaise", objc.BOOL, .{});
    }

    pub fn accessibilityPerformShowAlternateUI(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "accessibilityPerformShowAlternateUI", objc.BOOL, .{});
    }

    pub fn accessibilityPerformShowDefaultUI(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "accessibilityPerformShowDefaultUI", objc.BOOL, .{});
    }

    pub fn accessibilityPerformShowMenu(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "accessibilityPerformShowMenu", objc.BOOL, .{});
    }

    pub fn isAccessibilitySelectorAllowed(_self: *@This(), _selector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "isAccessibilitySelectorAllowed:", objc.BOOL, .{_selector});
    }

    pub fn isAccessibilityElement(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isAccessibilityElement", objc.BOOL, .{});
    }

    pub fn setAccessibilityElement(_self: *@This(), _accessibilityElement: objc.BOOL) void {
        return objc.msgSend(_self, "setAccessibilityElement:", void, .{_accessibilityElement});
    }

    pub fn setAccessibilityFrame(_self: *@This(), _accessibilityFrame: foundation.Rect) void {
        return objc.msgSend(_self, "setAccessibilityFrame:", void, .{_accessibilityFrame});
    }

    pub fn setAccessibilityFocused(_self: *@This(), _accessibilityFocused: objc.BOOL) void {
        return objc.msgSend(_self, "setAccessibilityFocused:", void, .{_accessibilityFocused});
    }

    pub fn accessibilityActivationPoint(_self: *@This()) foundation.Point {
        return objc.msgSend(_self, "accessibilityActivationPoint", foundation.Point, .{});
    }

    pub fn setAccessibilityActivationPoint(_self: *@This(), _accessibilityActivationPoint: foundation.Point) void {
        return objc.msgSend(_self, "setAccessibilityActivationPoint:", void, .{_accessibilityActivationPoint});
    }

    pub fn accessibilityTopLevelUIElement(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityTopLevelUIElement", ?objc.Id, .{});
    }

    pub fn setAccessibilityTopLevelUIElement(_self: *@This(), _accessibilityTopLevelUIElement: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityTopLevelUIElement:", void, .{_accessibilityTopLevelUIElement});
    }

    pub fn accessibilityURL(_self: *@This()) ?*foundation.URL {
        return objc.msgSend(_self, "accessibilityURL", ?*foundation.URL, .{});
    }

    pub fn setAccessibilityURL(_self: *@This(), _accessibilityURL: ?*foundation.URL) void {
        return objc.msgSend(_self, "setAccessibilityURL:", void, .{_accessibilityURL});
    }

    pub fn accessibilityValue(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityValue", ?objc.Id, .{});
    }

    pub fn setAccessibilityValue(_self: *@This(), _accessibilityValue: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityValue:", void, .{_accessibilityValue});
    }

    pub fn accessibilityValueDescription(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "accessibilityValueDescription", ?*foundation.String, .{});
    }

    pub fn setAccessibilityValueDescription(_self: *@This(), _accessibilityValueDescription: ?*foundation.String) void {
        return objc.msgSend(_self, "setAccessibilityValueDescription:", void, .{_accessibilityValueDescription});
    }

    pub fn accessibilityVisibleChildren(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilityVisibleChildren", ?*foundation.Array, .{});
    }

    pub fn setAccessibilityVisibleChildren(_self: *@This(), _accessibilityVisibleChildren: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilityVisibleChildren:", void, .{_accessibilityVisibleChildren});
    }

    pub fn accessibilitySubrole(_self: *@This()) app_kit.AccessibilitySubrole {
        return objc.msgSend(_self, "accessibilitySubrole", app_kit.AccessibilitySubrole, .{});
    }

    pub fn setAccessibilitySubrole(_self: *@This(), _accessibilitySubrole: app_kit.AccessibilitySubrole) void {
        return objc.msgSend(_self, "setAccessibilitySubrole:", void, .{_accessibilitySubrole});
    }

    pub fn accessibilityTitle(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "accessibilityTitle", ?*foundation.String, .{});
    }

    pub fn setAccessibilityTitle(_self: *@This(), _accessibilityTitle: ?*foundation.String) void {
        return objc.msgSend(_self, "setAccessibilityTitle:", void, .{_accessibilityTitle});
    }

    pub fn accessibilityTitleUIElement(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityTitleUIElement", ?objc.Id, .{});
    }

    pub fn setAccessibilityTitleUIElement(_self: *@This(), _accessibilityTitleUIElement: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityTitleUIElement:", void, .{_accessibilityTitleUIElement});
    }

    pub fn accessibilityNextContents(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilityNextContents", ?*foundation.Array, .{});
    }

    pub fn setAccessibilityNextContents(_self: *@This(), _accessibilityNextContents: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilityNextContents:", void, .{_accessibilityNextContents});
    }

    pub fn accessibilityOrientation(_self: *@This()) app_kit.AccessibilityOrientation {
        return objc.msgSend(_self, "accessibilityOrientation", app_kit.AccessibilityOrientation, .{});
    }

    pub fn setAccessibilityOrientation(_self: *@This(), _accessibilityOrientation: app_kit.AccessibilityOrientation) void {
        return objc.msgSend(_self, "setAccessibilityOrientation:", void, .{_accessibilityOrientation});
    }

    pub fn accessibilityOverflowButton(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityOverflowButton", ?objc.Id, .{});
    }

    pub fn setAccessibilityOverflowButton(_self: *@This(), _accessibilityOverflowButton: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityOverflowButton:", void, .{_accessibilityOverflowButton});
    }

    pub fn setAccessibilityParent(_self: *@This(), _accessibilityParent: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityParent:", void, .{_accessibilityParent});
    }

    pub fn accessibilityPlaceholderValue(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "accessibilityPlaceholderValue", ?*foundation.String, .{});
    }

    pub fn setAccessibilityPlaceholderValue(_self: *@This(), _accessibilityPlaceholderValue: ?*foundation.String) void {
        return objc.msgSend(_self, "setAccessibilityPlaceholderValue:", void, .{_accessibilityPlaceholderValue});
    }

    pub fn accessibilityPreviousContents(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilityPreviousContents", ?*foundation.Array, .{});
    }

    pub fn setAccessibilityPreviousContents(_self: *@This(), _accessibilityPreviousContents: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilityPreviousContents:", void, .{_accessibilityPreviousContents});
    }

    pub fn accessibilityRole(_self: *@This()) app_kit.AccessibilityRole {
        return objc.msgSend(_self, "accessibilityRole", app_kit.AccessibilityRole, .{});
    }

    pub fn setAccessibilityRole(_self: *@This(), _accessibilityRole: app_kit.AccessibilityRole) void {
        return objc.msgSend(_self, "setAccessibilityRole:", void, .{_accessibilityRole});
    }

    pub fn accessibilityRoleDescription(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "accessibilityRoleDescription", ?*foundation.String, .{});
    }

    pub fn setAccessibilityRoleDescription(_self: *@This(), _accessibilityRoleDescription: ?*foundation.String) void {
        return objc.msgSend(_self, "setAccessibilityRoleDescription:", void, .{_accessibilityRoleDescription});
    }

    pub fn accessibilitySearchButton(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilitySearchButton", ?objc.Id, .{});
    }

    pub fn setAccessibilitySearchButton(_self: *@This(), _accessibilitySearchButton: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilitySearchButton:", void, .{_accessibilitySearchButton});
    }

    pub fn accessibilitySearchMenu(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilitySearchMenu", ?objc.Id, .{});
    }

    pub fn setAccessibilitySearchMenu(_self: *@This(), _accessibilitySearchMenu: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilitySearchMenu:", void, .{_accessibilitySearchMenu});
    }

    pub fn isAccessibilitySelected(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isAccessibilitySelected", objc.BOOL, .{});
    }

    pub fn setAccessibilitySelected(_self: *@This(), _accessibilitySelected: objc.BOOL) void {
        return objc.msgSend(_self, "setAccessibilitySelected:", void, .{_accessibilitySelected});
    }

    pub fn accessibilitySelectedChildren(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilitySelectedChildren", ?*foundation.Array, .{});
    }

    pub fn setAccessibilitySelectedChildren(_self: *@This(), _accessibilitySelectedChildren: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilitySelectedChildren:", void, .{_accessibilitySelectedChildren});
    }

    pub fn accessibilityServesAsTitleForUIElements(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilityServesAsTitleForUIElements", ?*foundation.Array, .{});
    }

    pub fn setAccessibilityServesAsTitleForUIElements(_self: *@This(), _accessibilityServesAsTitleForUIElements: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilityServesAsTitleForUIElements:", void, .{_accessibilityServesAsTitleForUIElements});
    }

    pub fn accessibilityShownMenu(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityShownMenu", ?objc.Id, .{});
    }

    pub fn setAccessibilityShownMenu(_self: *@This(), _accessibilityShownMenu: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityShownMenu:", void, .{_accessibilityShownMenu});
    }

    pub fn accessibilityMinValue(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityMinValue", ?objc.Id, .{});
    }

    pub fn setAccessibilityMinValue(_self: *@This(), _accessibilityMinValue: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityMinValue:", void, .{_accessibilityMinValue});
    }

    pub fn accessibilityMaxValue(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityMaxValue", ?objc.Id, .{});
    }

    pub fn setAccessibilityMaxValue(_self: *@This(), _accessibilityMaxValue: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityMaxValue:", void, .{_accessibilityMaxValue});
    }

    pub fn accessibilityLinkedUIElements(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilityLinkedUIElements", ?*foundation.Array, .{});
    }

    pub fn setAccessibilityLinkedUIElements(_self: *@This(), _accessibilityLinkedUIElements: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilityLinkedUIElements:", void, .{_accessibilityLinkedUIElements});
    }

    pub fn accessibilityWindow(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityWindow", ?objc.Id, .{});
    }

    pub fn setAccessibilityWindow(_self: *@This(), _accessibilityWindow: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityWindow:", void, .{_accessibilityWindow});
    }

    pub fn setAccessibilityIdentifier(_self: *@This(), _accessibilityIdentifier: ?*foundation.String) void {
        return objc.msgSend(_self, "setAccessibilityIdentifier:", void, .{_accessibilityIdentifier});
    }

    pub fn accessibilityHelp(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "accessibilityHelp", ?*foundation.String, .{});
    }

    pub fn setAccessibilityHelp(_self: *@This(), _accessibilityHelp: ?*foundation.String) void {
        return objc.msgSend(_self, "setAccessibilityHelp:", void, .{_accessibilityHelp});
    }

    pub fn accessibilityFilename(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "accessibilityFilename", ?*foundation.String, .{});
    }

    pub fn setAccessibilityFilename(_self: *@This(), _accessibilityFilename: ?*foundation.String) void {
        return objc.msgSend(_self, "setAccessibilityFilename:", void, .{_accessibilityFilename});
    }

    pub fn isAccessibilityExpanded(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isAccessibilityExpanded", objc.BOOL, .{});
    }

    pub fn setAccessibilityExpanded(_self: *@This(), _accessibilityExpanded: objc.BOOL) void {
        return objc.msgSend(_self, "setAccessibilityExpanded:", void, .{_accessibilityExpanded});
    }

    pub fn isAccessibilityEdited(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isAccessibilityEdited", objc.BOOL, .{});
    }

    pub fn setAccessibilityEdited(_self: *@This(), _accessibilityEdited: objc.BOOL) void {
        return objc.msgSend(_self, "setAccessibilityEdited:", void, .{_accessibilityEdited});
    }

    pub fn isAccessibilityEnabled(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isAccessibilityEnabled", objc.BOOL, .{});
    }

    pub fn setAccessibilityEnabled(_self: *@This(), _accessibilityEnabled: objc.BOOL) void {
        return objc.msgSend(_self, "setAccessibilityEnabled:", void, .{_accessibilityEnabled});
    }

    pub fn accessibilityChildren(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilityChildren", ?*foundation.Array, .{});
    }

    pub fn setAccessibilityChildren(_self: *@This(), _accessibilityChildren: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilityChildren:", void, .{_accessibilityChildren});
    }

    pub fn accessibilityChildrenInNavigationOrder(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "accessibilityChildrenInNavigationOrder", ?*anyopaque, .{});
    }

    pub fn setAccessibilityChildrenInNavigationOrder(_self: *@This(), _accessibilityChildrenInNavigationOrder: ?*anyopaque) void {
        return objc.msgSend(_self, "setAccessibilityChildrenInNavigationOrder:", void, .{_accessibilityChildrenInNavigationOrder});
    }

    pub fn accessibilityClearButton(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityClearButton", ?objc.Id, .{});
    }

    pub fn setAccessibilityClearButton(_self: *@This(), _accessibilityClearButton: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityClearButton:", void, .{_accessibilityClearButton});
    }

    pub fn accessibilityCancelButton(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityCancelButton", ?objc.Id, .{});
    }

    pub fn setAccessibilityCancelButton(_self: *@This(), _accessibilityCancelButton: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityCancelButton:", void, .{_accessibilityCancelButton});
    }

    pub fn isAccessibilityProtectedContent(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isAccessibilityProtectedContent", objc.BOOL, .{});
    }

    pub fn setAccessibilityProtectedContent(_self: *@This(), _accessibilityProtectedContent: objc.BOOL) void {
        return objc.msgSend(_self, "setAccessibilityProtectedContent:", void, .{_accessibilityProtectedContent});
    }

    pub fn accessibilityContents(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilityContents", ?*foundation.Array, .{});
    }

    pub fn setAccessibilityContents(_self: *@This(), _accessibilityContents: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilityContents:", void, .{_accessibilityContents});
    }

    pub fn accessibilityLabel(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "accessibilityLabel", ?*foundation.String, .{});
    }

    pub fn setAccessibilityLabel(_self: *@This(), _accessibilityLabel: ?*foundation.String) void {
        return objc.msgSend(_self, "setAccessibilityLabel:", void, .{_accessibilityLabel});
    }

    pub fn isAccessibilityAlternateUIVisible(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isAccessibilityAlternateUIVisible", objc.BOOL, .{});
    }

    pub fn setAccessibilityAlternateUIVisible(_self: *@This(), _accessibilityAlternateUIVisible: objc.BOOL) void {
        return objc.msgSend(_self, "setAccessibilityAlternateUIVisible:", void, .{_accessibilityAlternateUIVisible});
    }

    pub fn accessibilitySharedFocusElements(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilitySharedFocusElements", ?*foundation.Array, .{});
    }

    pub fn setAccessibilitySharedFocusElements(_self: *@This(), _accessibilitySharedFocusElements: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilitySharedFocusElements:", void, .{_accessibilitySharedFocusElements});
    }

    pub fn isAccessibilityRequired(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isAccessibilityRequired", objc.BOOL, .{});
    }

    pub fn setAccessibilityRequired(_self: *@This(), _accessibilityRequired: objc.BOOL) void {
        return objc.msgSend(_self, "setAccessibilityRequired:", void, .{_accessibilityRequired});
    }

    pub fn accessibilityCustomRotors(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "accessibilityCustomRotors", ?*anyopaque, .{});
    }

    pub fn setAccessibilityCustomRotors(_self: *@This(), _accessibilityCustomRotors: ?*anyopaque) void {
        return objc.msgSend(_self, "setAccessibilityCustomRotors:", void, .{_accessibilityCustomRotors});
    }

    pub fn accessibilityUserInputLabels(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "accessibilityUserInputLabels", ?*anyopaque, .{});
    }

    pub fn setAccessibilityUserInputLabels(_self: *@This(), _accessibilityUserInputLabels: ?*anyopaque) void {
        return objc.msgSend(_self, "setAccessibilityUserInputLabels:", void, .{_accessibilityUserInputLabels});
    }

    pub fn accessibilityAttributedUserInputLabels(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "accessibilityAttributedUserInputLabels", ?*anyopaque, .{});
    }

    pub fn setAccessibilityAttributedUserInputLabels(_self: *@This(), _accessibilityAttributedUserInputLabels: ?*anyopaque) void {
        return objc.msgSend(_self, "setAccessibilityAttributedUserInputLabels:", void, .{_accessibilityAttributedUserInputLabels});
    }

    pub fn accessibilityApplicationFocusedUIElement(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityApplicationFocusedUIElement", ?objc.Id, .{});
    }

    pub fn setAccessibilityApplicationFocusedUIElement(_self: *@This(), _accessibilityApplicationFocusedUIElement: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityApplicationFocusedUIElement:", void, .{_accessibilityApplicationFocusedUIElement});
    }

    pub fn accessibilityMainWindow(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityMainWindow", ?objc.Id, .{});
    }

    pub fn setAccessibilityMainWindow(_self: *@This(), _accessibilityMainWindow: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityMainWindow:", void, .{_accessibilityMainWindow});
    }

    pub fn isAccessibilityHidden(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isAccessibilityHidden", objc.BOOL, .{});
    }

    pub fn setAccessibilityHidden(_self: *@This(), _accessibilityHidden: objc.BOOL) void {
        return objc.msgSend(_self, "setAccessibilityHidden:", void, .{_accessibilityHidden});
    }

    pub fn isAccessibilityFrontmost(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isAccessibilityFrontmost", objc.BOOL, .{});
    }

    pub fn setAccessibilityFrontmost(_self: *@This(), _accessibilityFrontmost: objc.BOOL) void {
        return objc.msgSend(_self, "setAccessibilityFrontmost:", void, .{_accessibilityFrontmost});
    }

    pub fn accessibilityFocusedWindow(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityFocusedWindow", ?objc.Id, .{});
    }

    pub fn setAccessibilityFocusedWindow(_self: *@This(), _accessibilityFocusedWindow: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityFocusedWindow:", void, .{_accessibilityFocusedWindow});
    }

    pub fn accessibilityWindows(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilityWindows", ?*foundation.Array, .{});
    }

    pub fn setAccessibilityWindows(_self: *@This(), _accessibilityWindows: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilityWindows:", void, .{_accessibilityWindows});
    }

    pub fn accessibilityExtrasMenuBar(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityExtrasMenuBar", ?objc.Id, .{});
    }

    pub fn setAccessibilityExtrasMenuBar(_self: *@This(), _accessibilityExtrasMenuBar: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityExtrasMenuBar:", void, .{_accessibilityExtrasMenuBar});
    }

    pub fn accessibilityMenuBar(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityMenuBar", ?objc.Id, .{});
    }

    pub fn setAccessibilityMenuBar(_self: *@This(), _accessibilityMenuBar: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityMenuBar:", void, .{_accessibilityMenuBar});
    }

    pub fn accessibilityColumnTitles(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilityColumnTitles", ?*foundation.Array, .{});
    }

    pub fn setAccessibilityColumnTitles(_self: *@This(), _accessibilityColumnTitles: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilityColumnTitles:", void, .{_accessibilityColumnTitles});
    }

    pub fn isAccessibilityOrderedByRow(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isAccessibilityOrderedByRow", objc.BOOL, .{});
    }

    pub fn setAccessibilityOrderedByRow(_self: *@This(), _accessibilityOrderedByRow: objc.BOOL) void {
        return objc.msgSend(_self, "setAccessibilityOrderedByRow:", void, .{_accessibilityOrderedByRow});
    }

    pub fn accessibilityHorizontalUnits(_self: *@This()) app_kit.AccessibilityUnits {
        return objc.msgSend(_self, "accessibilityHorizontalUnits", app_kit.AccessibilityUnits, .{});
    }

    pub fn setAccessibilityHorizontalUnits(_self: *@This(), _accessibilityHorizontalUnits: app_kit.AccessibilityUnits) void {
        return objc.msgSend(_self, "setAccessibilityHorizontalUnits:", void, .{_accessibilityHorizontalUnits});
    }

    pub fn accessibilityVerticalUnits(_self: *@This()) app_kit.AccessibilityUnits {
        return objc.msgSend(_self, "accessibilityVerticalUnits", app_kit.AccessibilityUnits, .{});
    }

    pub fn setAccessibilityVerticalUnits(_self: *@This(), _accessibilityVerticalUnits: app_kit.AccessibilityUnits) void {
        return objc.msgSend(_self, "setAccessibilityVerticalUnits:", void, .{_accessibilityVerticalUnits});
    }

    pub fn accessibilityHorizontalUnitDescription(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "accessibilityHorizontalUnitDescription", ?*foundation.String, .{});
    }

    pub fn setAccessibilityHorizontalUnitDescription(_self: *@This(), _accessibilityHorizontalUnitDescription: ?*foundation.String) void {
        return objc.msgSend(_self, "setAccessibilityHorizontalUnitDescription:", void, .{_accessibilityHorizontalUnitDescription});
    }

    pub fn accessibilityVerticalUnitDescription(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "accessibilityVerticalUnitDescription", ?*foundation.String, .{});
    }

    pub fn setAccessibilityVerticalUnitDescription(_self: *@This(), _accessibilityVerticalUnitDescription: ?*foundation.String) void {
        return objc.msgSend(_self, "setAccessibilityVerticalUnitDescription:", void, .{_accessibilityVerticalUnitDescription});
    }

    pub fn accessibilityHandles(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilityHandles", ?*foundation.Array, .{});
    }

    pub fn setAccessibilityHandles(_self: *@This(), _accessibilityHandles: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilityHandles:", void, .{_accessibilityHandles});
    }

    pub fn accessibilityWarningValue(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityWarningValue", ?objc.Id, .{});
    }

    pub fn setAccessibilityWarningValue(_self: *@This(), _accessibilityWarningValue: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityWarningValue:", void, .{_accessibilityWarningValue});
    }

    pub fn accessibilityCriticalValue(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityCriticalValue", ?objc.Id, .{});
    }

    pub fn setAccessibilityCriticalValue(_self: *@This(), _accessibilityCriticalValue: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityCriticalValue:", void, .{_accessibilityCriticalValue});
    }

    pub fn isAccessibilityDisclosed(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isAccessibilityDisclosed", objc.BOOL, .{});
    }

    pub fn setAccessibilityDisclosed(_self: *@This(), _accessibilityDisclosed: objc.BOOL) void {
        return objc.msgSend(_self, "setAccessibilityDisclosed:", void, .{_accessibilityDisclosed});
    }

    pub fn accessibilityDisclosedByRow(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityDisclosedByRow", ?objc.Id, .{});
    }

    pub fn setAccessibilityDisclosedByRow(_self: *@This(), _accessibilityDisclosedByRow: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityDisclosedByRow:", void, .{_accessibilityDisclosedByRow});
    }

    pub fn accessibilityDisclosedRows(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityDisclosedRows", ?objc.Id, .{});
    }

    pub fn setAccessibilityDisclosedRows(_self: *@This(), _accessibilityDisclosedRows: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityDisclosedRows:", void, .{_accessibilityDisclosedRows});
    }

    pub fn accessibilityDisclosureLevel(_self: *@This()) objc.NSInteger {
        return objc.msgSend(_self, "accessibilityDisclosureLevel", objc.NSInteger, .{});
    }

    pub fn setAccessibilityDisclosureLevel(_self: *@This(), _accessibilityDisclosureLevel: objc.NSInteger) void {
        return objc.msgSend(_self, "setAccessibilityDisclosureLevel:", void, .{_accessibilityDisclosureLevel});
    }

    pub fn accessibilityMarkerUIElements(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilityMarkerUIElements", ?*foundation.Array, .{});
    }

    pub fn setAccessibilityMarkerUIElements(_self: *@This(), _accessibilityMarkerUIElements: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilityMarkerUIElements:", void, .{_accessibilityMarkerUIElements});
    }

    pub fn accessibilityMarkerValues(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityMarkerValues", ?objc.Id, .{});
    }

    pub fn setAccessibilityMarkerValues(_self: *@This(), _accessibilityMarkerValues: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityMarkerValues:", void, .{_accessibilityMarkerValues});
    }

    pub fn accessibilityMarkerGroupUIElement(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityMarkerGroupUIElement", ?objc.Id, .{});
    }

    pub fn setAccessibilityMarkerGroupUIElement(_self: *@This(), _accessibilityMarkerGroupUIElement: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityMarkerGroupUIElement:", void, .{_accessibilityMarkerGroupUIElement});
    }

    pub fn accessibilityUnits(_self: *@This()) app_kit.AccessibilityUnits {
        return objc.msgSend(_self, "accessibilityUnits", app_kit.AccessibilityUnits, .{});
    }

    pub fn setAccessibilityUnits(_self: *@This(), _accessibilityUnits: app_kit.AccessibilityUnits) void {
        return objc.msgSend(_self, "setAccessibilityUnits:", void, .{_accessibilityUnits});
    }

    pub fn accessibilityUnitDescription(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "accessibilityUnitDescription", ?*foundation.String, .{});
    }

    pub fn setAccessibilityUnitDescription(_self: *@This(), _accessibilityUnitDescription: ?*foundation.String) void {
        return objc.msgSend(_self, "setAccessibilityUnitDescription:", void, .{_accessibilityUnitDescription});
    }

    pub fn accessibilityRulerMarkerType(_self: *@This()) app_kit.AccessibilityRulerMarkerType {
        return objc.msgSend(_self, "accessibilityRulerMarkerType", app_kit.AccessibilityRulerMarkerType, .{});
    }

    pub fn setAccessibilityRulerMarkerType(_self: *@This(), _accessibilityRulerMarkerType: app_kit.AccessibilityRulerMarkerType) void {
        return objc.msgSend(_self, "setAccessibilityRulerMarkerType:", void, .{_accessibilityRulerMarkerType});
    }

    pub fn accessibilityMarkerTypeDescription(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "accessibilityMarkerTypeDescription", ?*foundation.String, .{});
    }

    pub fn setAccessibilityMarkerTypeDescription(_self: *@This(), _accessibilityMarkerTypeDescription: ?*foundation.String) void {
        return objc.msgSend(_self, "setAccessibilityMarkerTypeDescription:", void, .{_accessibilityMarkerTypeDescription});
    }

    pub fn accessibilityHorizontalScrollBar(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityHorizontalScrollBar", ?objc.Id, .{});
    }

    pub fn setAccessibilityHorizontalScrollBar(_self: *@This(), _accessibilityHorizontalScrollBar: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityHorizontalScrollBar:", void, .{_accessibilityHorizontalScrollBar});
    }

    pub fn accessibilityVerticalScrollBar(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityVerticalScrollBar", ?objc.Id, .{});
    }

    pub fn setAccessibilityVerticalScrollBar(_self: *@This(), _accessibilityVerticalScrollBar: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityVerticalScrollBar:", void, .{_accessibilityVerticalScrollBar});
    }

    pub fn accessibilityAllowedValues(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "accessibilityAllowedValues", ?*anyopaque, .{});
    }

    pub fn setAccessibilityAllowedValues(_self: *@This(), _accessibilityAllowedValues: ?*anyopaque) void {
        return objc.msgSend(_self, "setAccessibilityAllowedValues:", void, .{_accessibilityAllowedValues});
    }

    pub fn accessibilityLabelUIElements(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilityLabelUIElements", ?*foundation.Array, .{});
    }

    pub fn setAccessibilityLabelUIElements(_self: *@This(), _accessibilityLabelUIElements: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilityLabelUIElements:", void, .{_accessibilityLabelUIElements});
    }

    pub fn accessibilityLabelValue(_self: *@This()) f32 {
        return objc.msgSend(_self, "accessibilityLabelValue", f32, .{});
    }

    pub fn setAccessibilityLabelValue(_self: *@This(), _accessibilityLabelValue: f32) void {
        return objc.msgSend(_self, "setAccessibilityLabelValue:", void, .{_accessibilityLabelValue});
    }

    pub fn accessibilitySplitters(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilitySplitters", ?*foundation.Array, .{});
    }

    pub fn setAccessibilitySplitters(_self: *@This(), _accessibilitySplitters: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilitySplitters:", void, .{_accessibilitySplitters});
    }

    pub fn accessibilityDecrementButton(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityDecrementButton", ?objc.Id, .{});
    }

    pub fn setAccessibilityDecrementButton(_self: *@This(), _accessibilityDecrementButton: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityDecrementButton:", void, .{_accessibilityDecrementButton});
    }

    pub fn accessibilityIncrementButton(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityIncrementButton", ?objc.Id, .{});
    }

    pub fn setAccessibilityIncrementButton(_self: *@This(), _accessibilityIncrementButton: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityIncrementButton:", void, .{_accessibilityIncrementButton});
    }

    pub fn accessibilityTabs(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilityTabs", ?*foundation.Array, .{});
    }

    pub fn setAccessibilityTabs(_self: *@This(), _accessibilityTabs: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilityTabs:", void, .{_accessibilityTabs});
    }

    pub fn accessibilityHeader(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityHeader", ?objc.Id, .{});
    }

    pub fn setAccessibilityHeader(_self: *@This(), _accessibilityHeader: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityHeader:", void, .{_accessibilityHeader});
    }

    pub fn accessibilityColumnCount(_self: *@This()) objc.NSInteger {
        return objc.msgSend(_self, "accessibilityColumnCount", objc.NSInteger, .{});
    }

    pub fn setAccessibilityColumnCount(_self: *@This(), _accessibilityColumnCount: objc.NSInteger) void {
        return objc.msgSend(_self, "setAccessibilityColumnCount:", void, .{_accessibilityColumnCount});
    }

    pub fn accessibilityRowCount(_self: *@This()) objc.NSInteger {
        return objc.msgSend(_self, "accessibilityRowCount", objc.NSInteger, .{});
    }

    pub fn setAccessibilityRowCount(_self: *@This(), _accessibilityRowCount: objc.NSInteger) void {
        return objc.msgSend(_self, "setAccessibilityRowCount:", void, .{_accessibilityRowCount});
    }

    pub fn accessibilityIndex(_self: *@This()) objc.NSInteger {
        return objc.msgSend(_self, "accessibilityIndex", objc.NSInteger, .{});
    }

    pub fn setAccessibilityIndex(_self: *@This(), _accessibilityIndex: objc.NSInteger) void {
        return objc.msgSend(_self, "setAccessibilityIndex:", void, .{_accessibilityIndex});
    }

    pub fn accessibilityColumns(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilityColumns", ?*foundation.Array, .{});
    }

    pub fn setAccessibilityColumns(_self: *@This(), _accessibilityColumns: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilityColumns:", void, .{_accessibilityColumns});
    }

    pub fn accessibilityRows(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilityRows", ?*foundation.Array, .{});
    }

    pub fn setAccessibilityRows(_self: *@This(), _accessibilityRows: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilityRows:", void, .{_accessibilityRows});
    }

    pub fn accessibilityVisibleRows(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilityVisibleRows", ?*foundation.Array, .{});
    }

    pub fn setAccessibilityVisibleRows(_self: *@This(), _accessibilityVisibleRows: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilityVisibleRows:", void, .{_accessibilityVisibleRows});
    }

    pub fn accessibilitySelectedRows(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilitySelectedRows", ?*foundation.Array, .{});
    }

    pub fn setAccessibilitySelectedRows(_self: *@This(), _accessibilitySelectedRows: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilitySelectedRows:", void, .{_accessibilitySelectedRows});
    }

    pub fn accessibilityVisibleColumns(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilityVisibleColumns", ?*foundation.Array, .{});
    }

    pub fn setAccessibilityVisibleColumns(_self: *@This(), _accessibilityVisibleColumns: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilityVisibleColumns:", void, .{_accessibilityVisibleColumns});
    }

    pub fn accessibilitySelectedColumns(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilitySelectedColumns", ?*foundation.Array, .{});
    }

    pub fn setAccessibilitySelectedColumns(_self: *@This(), _accessibilitySelectedColumns: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilitySelectedColumns:", void, .{_accessibilitySelectedColumns});
    }

    pub fn accessibilitySortDirection(_self: *@This()) app_kit.AccessibilitySortDirection {
        return objc.msgSend(_self, "accessibilitySortDirection", app_kit.AccessibilitySortDirection, .{});
    }

    pub fn setAccessibilitySortDirection(_self: *@This(), _accessibilitySortDirection: app_kit.AccessibilitySortDirection) void {
        return objc.msgSend(_self, "setAccessibilitySortDirection:", void, .{_accessibilitySortDirection});
    }

    pub fn accessibilityRowHeaderUIElements(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilityRowHeaderUIElements", ?*foundation.Array, .{});
    }

    pub fn setAccessibilityRowHeaderUIElements(_self: *@This(), _accessibilityRowHeaderUIElements: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilityRowHeaderUIElements:", void, .{_accessibilityRowHeaderUIElements});
    }

    pub fn accessibilitySelectedCells(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilitySelectedCells", ?*foundation.Array, .{});
    }

    pub fn setAccessibilitySelectedCells(_self: *@This(), _accessibilitySelectedCells: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilitySelectedCells:", void, .{_accessibilitySelectedCells});
    }

    pub fn accessibilityVisibleCells(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilityVisibleCells", ?*foundation.Array, .{});
    }

    pub fn setAccessibilityVisibleCells(_self: *@This(), _accessibilityVisibleCells: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilityVisibleCells:", void, .{_accessibilityVisibleCells});
    }

    pub fn accessibilityColumnHeaderUIElements(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilityColumnHeaderUIElements", ?*foundation.Array, .{});
    }

    pub fn setAccessibilityColumnHeaderUIElements(_self: *@This(), _accessibilityColumnHeaderUIElements: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilityColumnHeaderUIElements:", void, .{_accessibilityColumnHeaderUIElements});
    }

    pub fn accessibilityRowIndexRange(_self: *@This()) foundation.Range {
        return objc.msgSend(_self, "accessibilityRowIndexRange", foundation.Range, .{});
    }

    pub fn setAccessibilityRowIndexRange(_self: *@This(), _accessibilityRowIndexRange: foundation.Range) void {
        return objc.msgSend(_self, "setAccessibilityRowIndexRange:", void, .{_accessibilityRowIndexRange});
    }

    pub fn accessibilityColumnIndexRange(_self: *@This()) foundation.Range {
        return objc.msgSend(_self, "accessibilityColumnIndexRange", foundation.Range, .{});
    }

    pub fn setAccessibilityColumnIndexRange(_self: *@This(), _accessibilityColumnIndexRange: foundation.Range) void {
        return objc.msgSend(_self, "setAccessibilityColumnIndexRange:", void, .{_accessibilityColumnIndexRange});
    }

    pub fn accessibilityInsertionPointLineNumber(_self: *@This()) objc.NSInteger {
        return objc.msgSend(_self, "accessibilityInsertionPointLineNumber", objc.NSInteger, .{});
    }

    pub fn setAccessibilityInsertionPointLineNumber(_self: *@This(), _accessibilityInsertionPointLineNumber: objc.NSInteger) void {
        return objc.msgSend(_self, "setAccessibilityInsertionPointLineNumber:", void, .{_accessibilityInsertionPointLineNumber});
    }

    pub fn accessibilitySharedCharacterRange(_self: *@This()) foundation.Range {
        return objc.msgSend(_self, "accessibilitySharedCharacterRange", foundation.Range, .{});
    }

    pub fn setAccessibilitySharedCharacterRange(_self: *@This(), _accessibilitySharedCharacterRange: foundation.Range) void {
        return objc.msgSend(_self, "setAccessibilitySharedCharacterRange:", void, .{_accessibilitySharedCharacterRange});
    }

    pub fn accessibilitySharedTextUIElements(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilitySharedTextUIElements", ?*foundation.Array, .{});
    }

    pub fn setAccessibilitySharedTextUIElements(_self: *@This(), _accessibilitySharedTextUIElements: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilitySharedTextUIElements:", void, .{_accessibilitySharedTextUIElements});
    }

    pub fn accessibilityVisibleCharacterRange(_self: *@This()) foundation.Range {
        return objc.msgSend(_self, "accessibilityVisibleCharacterRange", foundation.Range, .{});
    }

    pub fn setAccessibilityVisibleCharacterRange(_self: *@This(), _accessibilityVisibleCharacterRange: foundation.Range) void {
        return objc.msgSend(_self, "setAccessibilityVisibleCharacterRange:", void, .{_accessibilityVisibleCharacterRange});
    }

    pub fn accessibilityNumberOfCharacters(_self: *@This()) objc.NSInteger {
        return objc.msgSend(_self, "accessibilityNumberOfCharacters", objc.NSInteger, .{});
    }

    pub fn setAccessibilityNumberOfCharacters(_self: *@This(), _accessibilityNumberOfCharacters: objc.NSInteger) void {
        return objc.msgSend(_self, "setAccessibilityNumberOfCharacters:", void, .{_accessibilityNumberOfCharacters});
    }

    pub fn accessibilitySelectedText(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "accessibilitySelectedText", ?*foundation.String, .{});
    }

    pub fn setAccessibilitySelectedText(_self: *@This(), _accessibilitySelectedText: ?*foundation.String) void {
        return objc.msgSend(_self, "setAccessibilitySelectedText:", void, .{_accessibilitySelectedText});
    }

    pub fn accessibilitySelectedTextRange(_self: *@This()) foundation.Range {
        return objc.msgSend(_self, "accessibilitySelectedTextRange", foundation.Range, .{});
    }

    pub fn setAccessibilitySelectedTextRange(_self: *@This(), _accessibilitySelectedTextRange: foundation.Range) void {
        return objc.msgSend(_self, "setAccessibilitySelectedTextRange:", void, .{_accessibilitySelectedTextRange});
    }

    pub fn accessibilitySelectedTextRanges(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "accessibilitySelectedTextRanges", ?*anyopaque, .{});
    }

    pub fn setAccessibilitySelectedTextRanges(_self: *@This(), _accessibilitySelectedTextRanges: ?*anyopaque) void {
        return objc.msgSend(_self, "setAccessibilitySelectedTextRanges:", void, .{_accessibilitySelectedTextRanges});
    }

    pub fn accessibilityToolbarButton(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityToolbarButton", ?objc.Id, .{});
    }

    pub fn setAccessibilityToolbarButton(_self: *@This(), _accessibilityToolbarButton: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityToolbarButton:", void, .{_accessibilityToolbarButton});
    }

    pub fn isAccessibilityModal(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isAccessibilityModal", objc.BOOL, .{});
    }

    pub fn setAccessibilityModal(_self: *@This(), _accessibilityModal: objc.BOOL) void {
        return objc.msgSend(_self, "setAccessibilityModal:", void, .{_accessibilityModal});
    }

    pub fn accessibilityProxy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityProxy", ?objc.Id, .{});
    }

    pub fn setAccessibilityProxy(_self: *@This(), _accessibilityProxy: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityProxy:", void, .{_accessibilityProxy});
    }

    pub fn isAccessibilityMain(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isAccessibilityMain", objc.BOOL, .{});
    }

    pub fn setAccessibilityMain(_self: *@This(), _accessibilityMain: objc.BOOL) void {
        return objc.msgSend(_self, "setAccessibilityMain:", void, .{_accessibilityMain});
    }

    pub fn accessibilityFullScreenButton(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityFullScreenButton", ?objc.Id, .{});
    }

    pub fn setAccessibilityFullScreenButton(_self: *@This(), _accessibilityFullScreenButton: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityFullScreenButton:", void, .{_accessibilityFullScreenButton});
    }

    pub fn accessibilityGrowArea(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityGrowArea", ?objc.Id, .{});
    }

    pub fn setAccessibilityGrowArea(_self: *@This(), _accessibilityGrowArea: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityGrowArea:", void, .{_accessibilityGrowArea});
    }

    pub fn accessibilityDocument(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "accessibilityDocument", ?*foundation.String, .{});
    }

    pub fn setAccessibilityDocument(_self: *@This(), _accessibilityDocument: ?*foundation.String) void {
        return objc.msgSend(_self, "setAccessibilityDocument:", void, .{_accessibilityDocument});
    }

    pub fn accessibilityDefaultButton(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityDefaultButton", ?objc.Id, .{});
    }

    pub fn setAccessibilityDefaultButton(_self: *@This(), _accessibilityDefaultButton: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityDefaultButton:", void, .{_accessibilityDefaultButton});
    }

    pub fn accessibilityCloseButton(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityCloseButton", ?objc.Id, .{});
    }

    pub fn setAccessibilityCloseButton(_self: *@This(), _accessibilityCloseButton: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityCloseButton:", void, .{_accessibilityCloseButton});
    }

    pub fn accessibilityZoomButton(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityZoomButton", ?objc.Id, .{});
    }

    pub fn setAccessibilityZoomButton(_self: *@This(), _accessibilityZoomButton: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityZoomButton:", void, .{_accessibilityZoomButton});
    }

    pub fn accessibilityMinimizeButton(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityMinimizeButton", ?objc.Id, .{});
    }

    pub fn setAccessibilityMinimizeButton(_self: *@This(), _accessibilityMinimizeButton: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityMinimizeButton:", void, .{_accessibilityMinimizeButton});
    }

    pub fn isAccessibilityMinimized(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isAccessibilityMinimized", objc.BOOL, .{});
    }

    pub fn setAccessibilityMinimized(_self: *@This(), _accessibilityMinimized: objc.BOOL) void {
        return objc.msgSend(_self, "setAccessibilityMinimized:", void, .{_accessibilityMinimized});
    }

    pub fn accessibilityCustomActions(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "accessibilityCustomActions", ?*anyopaque, .{});
    }

    pub fn setAccessibilityCustomActions(_self: *@This(), _accessibilityCustomActions: ?*anyopaque) void {
        return objc.msgSend(_self, "setAccessibilityCustomActions:", void, .{_accessibilityCustomActions});
    }

    pub fn initWithFrame(_self: *@This(), _frameRect: foundation.Rect) *@This() {
        return objc.msgSend(_self, "initWithFrame:", *@This(), .{_frameRect});
    }

    pub fn isDescendantOf(_self: *@This(), _view: ?*app_kit.View) objc.BOOL {
        return objc.msgSend(_self, "isDescendantOf:", objc.BOOL, .{_view});
    }

    pub fn ancestorSharedWithView(_self: *@This(), _view: ?*app_kit.View) ?*app_kit.View {
        return objc.msgSend(_self, "ancestorSharedWithView:", ?*app_kit.View, .{_view});
    }

    pub fn getRectsBeingDrawnCount(_self: *@This(), _rects: ?*?*foundation.Rect, _count: ?*objc.NSInteger) void {
        return objc.msgSend(_self, "getRectsBeingDrawn:count:", void, .{ _rects, _count });
    }

    pub fn needsToDrawRect(_self: *@This(), _rect: foundation.Rect) objc.BOOL {
        return objc.msgSend(_self, "needsToDrawRect:", objc.BOOL, .{_rect});
    }

    pub fn viewDidHide(_self: *@This()) void {
        return objc.msgSend(_self, "viewDidHide", void, .{});
    }

    pub fn viewDidUnhide(_self: *@This()) void {
        return objc.msgSend(_self, "viewDidUnhide", void, .{});
    }

    pub fn addSubview(_self: *@This(), _view: ?*app_kit.View) void {
        return objc.msgSend(_self, "addSubview:", void, .{_view});
    }

    pub fn addSubviewPositionedRelativeTo(_self: *@This(), _view: ?*app_kit.View, _place: app_kit.WindowOrderingMode, _otherView: ?*app_kit.View) void {
        return objc.msgSend(_self, "addSubview:positioned:relativeTo:", void, .{ _view, _place, _otherView });
    }

    pub fn sortSubviewsUsingFunctionContext(_self: *@This(), _compare: ?*const fn (?*anyopaque, ?*anyopaque, ?*anyopaque) callconv(.C) foundation.ComparisonResult, _context: ?*anyopaque) void {
        return objc.msgSend(_self, "sortSubviewsUsingFunction:context:", void, .{ _compare, _context });
    }

    pub fn viewWillMoveToWindow(_self: *@This(), _newWindow: ?*app_kit.Window) void {
        return objc.msgSend(_self, "viewWillMoveToWindow:", void, .{_newWindow});
    }

    pub fn viewDidMoveToWindow(_self: *@This()) void {
        return objc.msgSend(_self, "viewDidMoveToWindow", void, .{});
    }

    pub fn viewWillMoveToSuperview(_self: *@This(), _newSuperview: ?*app_kit.View) void {
        return objc.msgSend(_self, "viewWillMoveToSuperview:", void, .{_newSuperview});
    }

    pub fn viewDidMoveToSuperview(_self: *@This()) void {
        return objc.msgSend(_self, "viewDidMoveToSuperview", void, .{});
    }

    pub fn didAddSubview(_self: *@This(), _subview: ?*app_kit.View) void {
        return objc.msgSend(_self, "didAddSubview:", void, .{_subview});
    }

    pub fn willRemoveSubview(_self: *@This(), _subview: ?*app_kit.View) void {
        return objc.msgSend(_self, "willRemoveSubview:", void, .{_subview});
    }

    pub fn removeFromSuperview(_self: *@This()) void {
        return objc.msgSend(_self, "removeFromSuperview", void, .{});
    }

    pub fn replaceSubviewWith(_self: *@This(), _oldView: ?*app_kit.View, _newView: ?*app_kit.View) void {
        return objc.msgSend(_self, "replaceSubview:with:", void, .{ _oldView, _newView });
    }

    pub fn removeFromSuperviewWithoutNeedingDisplay(_self: *@This()) void {
        return objc.msgSend(_self, "removeFromSuperviewWithoutNeedingDisplay", void, .{});
    }

    pub fn viewDidChangeBackingProperties(_self: *@This()) void {
        return objc.msgSend(_self, "viewDidChangeBackingProperties", void, .{});
    }

    pub fn resizeSubviewsWithOldSize(_self: *@This(), _oldSize: foundation.Size) void {
        return objc.msgSend(_self, "resizeSubviewsWithOldSize:", void, .{_oldSize});
    }

    pub fn resizeWithOldSuperviewSize(_self: *@This(), _oldSize: foundation.Size) void {
        return objc.msgSend(_self, "resizeWithOldSuperviewSize:", void, .{_oldSize});
    }

    pub fn setFrameOrigin(_self: *@This(), _newOrigin: foundation.Point) void {
        return objc.msgSend(_self, "setFrameOrigin:", void, .{_newOrigin});
    }

    pub fn setFrameSize(_self: *@This(), _newSize: foundation.Size) void {
        return objc.msgSend(_self, "setFrameSize:", void, .{_newSize});
    }

    pub fn setBoundsOrigin(_self: *@This(), _newOrigin: foundation.Point) void {
        return objc.msgSend(_self, "setBoundsOrigin:", void, .{_newOrigin});
    }

    pub fn setBoundsSize(_self: *@This(), _newSize: foundation.Size) void {
        return objc.msgSend(_self, "setBoundsSize:", void, .{_newSize});
    }

    pub fn translateOriginToPoint(_self: *@This(), _translation: foundation.Point) void {
        return objc.msgSend(_self, "translateOriginToPoint:", void, .{_translation});
    }

    pub fn scaleUnitSquareToSize(_self: *@This(), _newUnitSize: foundation.Size) void {
        return objc.msgSend(_self, "scaleUnitSquareToSize:", void, .{_newUnitSize});
    }

    pub fn rotateByAngle(_self: *@This(), _angle: core_foundation.CGFloat) void {
        return objc.msgSend(_self, "rotateByAngle:", void, .{_angle});
    }

    pub fn convertPointFromView(_self: *@This(), _point: foundation.Point, _view: ?*app_kit.View) foundation.Point {
        return objc.msgSend(_self, "convertPoint:fromView:", foundation.Point, .{ _point, _view });
    }

    pub fn convertPointToView(_self: *@This(), _point: foundation.Point, _view: ?*app_kit.View) foundation.Point {
        return objc.msgSend(_self, "convertPoint:toView:", foundation.Point, .{ _point, _view });
    }

    pub fn convertSizeFromView(_self: *@This(), _size: foundation.Size, _view: ?*app_kit.View) foundation.Size {
        return objc.msgSend(_self, "convertSize:fromView:", foundation.Size, .{ _size, _view });
    }

    pub fn convertSizeToView(_self: *@This(), _size: foundation.Size, _view: ?*app_kit.View) foundation.Size {
        return objc.msgSend(_self, "convertSize:toView:", foundation.Size, .{ _size, _view });
    }

    pub fn convertRectFromView(_self: *@This(), _rect: foundation.Rect, _view: ?*app_kit.View) foundation.Rect {
        return objc.msgSend(_self, "convertRect:fromView:", foundation.Rect, .{ _rect, _view });
    }

    pub fn convertRectToView(_self: *@This(), _rect: foundation.Rect, _view: ?*app_kit.View) foundation.Rect {
        return objc.msgSend(_self, "convertRect:toView:", foundation.Rect, .{ _rect, _view });
    }

    pub fn backingAlignedRectOptions(_self: *@This(), _rect: foundation.Rect, _options: foundation.AlignmentOptions) foundation.Rect {
        return objc.msgSend(_self, "backingAlignedRect:options:", foundation.Rect, .{ _rect, _options });
    }

    pub fn centerScanRect(_self: *@This(), _rect: foundation.Rect) foundation.Rect {
        return objc.msgSend(_self, "centerScanRect:", foundation.Rect, .{_rect});
    }

    pub fn convertPointToBacking(_self: *@This(), _point: foundation.Point) foundation.Point {
        return objc.msgSend(_self, "convertPointToBacking:", foundation.Point, .{_point});
    }

    pub fn convertPointFromBacking(_self: *@This(), _point: foundation.Point) foundation.Point {
        return objc.msgSend(_self, "convertPointFromBacking:", foundation.Point, .{_point});
    }

    pub fn convertSizeToBacking(_self: *@This(), _size: foundation.Size) foundation.Size {
        return objc.msgSend(_self, "convertSizeToBacking:", foundation.Size, .{_size});
    }

    pub fn convertSizeFromBacking(_self: *@This(), _size: foundation.Size) foundation.Size {
        return objc.msgSend(_self, "convertSizeFromBacking:", foundation.Size, .{_size});
    }

    pub fn convertRectToBacking(_self: *@This(), _rect: foundation.Rect) foundation.Rect {
        return objc.msgSend(_self, "convertRectToBacking:", foundation.Rect, .{_rect});
    }

    pub fn convertRectFromBacking(_self: *@This(), _rect: foundation.Rect) foundation.Rect {
        return objc.msgSend(_self, "convertRectFromBacking:", foundation.Rect, .{_rect});
    }

    pub fn convertPointToLayer(_self: *@This(), _point: foundation.Point) foundation.Point {
        return objc.msgSend(_self, "convertPointToLayer:", foundation.Point, .{_point});
    }

    pub fn convertPointFromLayer(_self: *@This(), _point: foundation.Point) foundation.Point {
        return objc.msgSend(_self, "convertPointFromLayer:", foundation.Point, .{_point});
    }

    pub fn convertSizeToLayer(_self: *@This(), _size: foundation.Size) foundation.Size {
        return objc.msgSend(_self, "convertSizeToLayer:", foundation.Size, .{_size});
    }

    pub fn convertSizeFromLayer(_self: *@This(), _size: foundation.Size) foundation.Size {
        return objc.msgSend(_self, "convertSizeFromLayer:", foundation.Size, .{_size});
    }

    pub fn convertRectToLayer(_self: *@This(), _rect: foundation.Rect) foundation.Rect {
        return objc.msgSend(_self, "convertRectToLayer:", foundation.Rect, .{_rect});
    }

    pub fn convertRectFromLayer(_self: *@This(), _rect: foundation.Rect) foundation.Rect {
        return objc.msgSend(_self, "convertRectFromLayer:", foundation.Rect, .{_rect});
    }

    pub fn setNeedsDisplayInRect(_self: *@This(), _invalidRect: foundation.Rect) void {
        return objc.msgSend(_self, "setNeedsDisplayInRect:", void, .{_invalidRect});
    }

    pub fn lockFocus(_self: *@This()) void {
        return objc.msgSend(_self, "lockFocus", void, .{});
    }

    pub fn unlockFocus(_self: *@This()) void {
        return objc.msgSend(_self, "unlockFocus", void, .{});
    }

    pub fn lockFocusIfCanDraw(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "lockFocusIfCanDraw", objc.BOOL, .{});
    }

    pub fn lockFocusIfCanDrawInContext(_self: *@This(), _context: ?*app_kit.GraphicsContext) objc.BOOL {
        return objc.msgSend(_self, "lockFocusIfCanDrawInContext:", objc.BOOL, .{_context});
    }

    pub fn display(_self: *@This()) void {
        return objc.msgSend(_self, "display", void, .{});
    }

    pub fn displayIfNeeded(_self: *@This()) void {
        return objc.msgSend(_self, "displayIfNeeded", void, .{});
    }

    pub fn displayIfNeededIgnoringOpacity(_self: *@This()) void {
        return objc.msgSend(_self, "displayIfNeededIgnoringOpacity", void, .{});
    }

    pub fn displayRect(_self: *@This(), _rect: foundation.Rect) void {
        return objc.msgSend(_self, "displayRect:", void, .{_rect});
    }

    pub fn displayIfNeededInRect(_self: *@This(), _rect: foundation.Rect) void {
        return objc.msgSend(_self, "displayIfNeededInRect:", void, .{_rect});
    }

    pub fn displayRectIgnoringOpacity(_self: *@This(), _rect: foundation.Rect) void {
        return objc.msgSend(_self, "displayRectIgnoringOpacity:", void, .{_rect});
    }

    pub fn displayIfNeededInRectIgnoringOpacity(_self: *@This(), _rect: foundation.Rect) void {
        return objc.msgSend(_self, "displayIfNeededInRectIgnoringOpacity:", void, .{_rect});
    }

    pub fn drawRect(_self: *@This(), _dirtyRect: foundation.Rect) void {
        return objc.msgSend(_self, "drawRect:", void, .{_dirtyRect});
    }

    pub fn displayRectIgnoringOpacityInContext(_self: *@This(), _rect: foundation.Rect, _context: ?*app_kit.GraphicsContext) void {
        return objc.msgSend(_self, "displayRectIgnoringOpacity:inContext:", void, .{ _rect, _context });
    }

    pub fn bitmapImageRepForCachingDisplayInRect(_self: *@This(), _rect: foundation.Rect) ?*app_kit.BitmapImageRep {
        return objc.msgSend(_self, "bitmapImageRepForCachingDisplayInRect:", ?*app_kit.BitmapImageRep, .{_rect});
    }

    pub fn cacheDisplayInRectToBitmapImageRep(_self: *@This(), _rect: foundation.Rect, _bitmapImageRep: ?*app_kit.BitmapImageRep) void {
        return objc.msgSend(_self, "cacheDisplayInRect:toBitmapImageRep:", void, .{ _rect, _bitmapImageRep });
    }

    pub fn viewWillDraw(_self: *@This()) void {
        return objc.msgSend(_self, "viewWillDraw", void, .{});
    }

    pub fn scrollPoint(_self: *@This(), _point: foundation.Point) void {
        return objc.msgSend(_self, "scrollPoint:", void, .{_point});
    }

    pub fn scrollRectToVisible(_self: *@This(), _rect: foundation.Rect) objc.BOOL {
        return objc.msgSend(_self, "scrollRectToVisible:", objc.BOOL, .{_rect});
    }

    pub fn autoscroll(_self: *@This(), _event: ?*app_kit.Event) objc.BOOL {
        return objc.msgSend(_self, "autoscroll:", objc.BOOL, .{_event});
    }

    pub fn adjustScroll(_self: *@This(), _newVisible: foundation.Rect) foundation.Rect {
        return objc.msgSend(_self, "adjustScroll:", foundation.Rect, .{_newVisible});
    }

    pub fn scrollRectBy(_self: *@This(), _rect: foundation.Rect, _delta: foundation.Size) void {
        return objc.msgSend(_self, "scrollRect:by:", void, .{ _rect, _delta });
    }

    pub fn translateRectsNeedingDisplayInRectBy(_self: *@This(), _clipRect: foundation.Rect, _delta: foundation.Size) void {
        return objc.msgSend(_self, "translateRectsNeedingDisplayInRect:by:", void, .{ _clipRect, _delta });
    }

    pub fn hitTest(_self: *@This(), _point: foundation.Point) ?*app_kit.View {
        return objc.msgSend(_self, "hitTest:", ?*app_kit.View, .{_point});
    }

    pub fn mouseInRect(_self: *@This(), _point: foundation.Point, _rect: foundation.Rect) objc.BOOL {
        return objc.msgSend(_self, "mouse:inRect:", objc.BOOL, .{ _point, _rect });
    }

    pub fn viewWithTag(_self: *@This(), _tag: objc.NSInteger) ?*anyopaque {
        return objc.msgSend(_self, "viewWithTag:", ?*anyopaque, .{_tag});
    }

    pub fn acceptsFirstMouse(_self: *@This(), _event: ?*app_kit.Event) objc.BOOL {
        return objc.msgSend(_self, "acceptsFirstMouse:", objc.BOOL, .{_event});
    }

    pub fn shouldDelayWindowOrderingForEvent(_self: *@This(), _event: ?*app_kit.Event) objc.BOOL {
        return objc.msgSend(_self, "shouldDelayWindowOrderingForEvent:", objc.BOOL, .{_event});
    }

    pub fn makeBackingLayer(_self: *@This()) ?*quartz_core.Layer {
        return objc.msgSend(_self, "makeBackingLayer", ?*quartz_core.Layer, .{});
    }

    pub fn updateLayer(_self: *@This()) void {
        return objc.msgSend(_self, "updateLayer", void, .{});
    }

    pub fn layoutSubtreeIfNeeded(_self: *@This()) void {
        return objc.msgSend(_self, "layoutSubtreeIfNeeded", void, .{});
    }

    pub fn layout(_self: *@This()) void {
        return objc.msgSend(_self, "layout", void, .{});
    }

    pub fn menuForEvent(_self: *@This(), _event: ?*app_kit.Event) ?*app_kit.Menu {
        return objc.msgSend(_self, "menuForEvent:", ?*app_kit.Menu, .{_event});
    }

    pub fn willOpenMenuWithEvent(_self: *@This(), _menu: ?*app_kit.Menu, _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "willOpenMenu:withEvent:", void, .{ _menu, _event });
    }

    pub fn didCloseMenuWithEvent(_self: *@This(), _menu: ?*app_kit.Menu, _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "didCloseMenu:withEvent:", void, .{ _menu, _event });
    }

    pub fn addToolTipRectOwnerUserData(_self: *@This(), _rect: foundation.Rect, _owner: ?objc.Id, _data: ?*anyopaque) app_kit.ToolTipTag {
        return objc.msgSend(_self, "addToolTipRect:owner:userData:", app_kit.ToolTipTag, .{ _rect, _owner, _data });
    }

    pub fn removeToolTip(_self: *@This(), _tag: app_kit.ToolTipTag) void {
        return objc.msgSend(_self, "removeToolTip:", void, .{_tag});
    }

    pub fn removeAllToolTips(_self: *@This()) void {
        return objc.msgSend(_self, "removeAllToolTips", void, .{});
    }

    pub fn viewWillStartLiveResize(_self: *@This()) void {
        return objc.msgSend(_self, "viewWillStartLiveResize", void, .{});
    }

    pub fn viewDidEndLiveResize(_self: *@This()) void {
        return objc.msgSend(_self, "viewDidEndLiveResize", void, .{});
    }

    pub fn getRectsExposedDuringLiveResizeCount(_self: *@This(), _exposedRects: ?*foundation.Rect, _count: ?*objc.NSInteger) void {
        return objc.msgSend(_self, "getRectsExposedDuringLiveResize:count:", void, .{ _exposedRects, _count });
    }

    pub fn rectForSmartMagnificationAtPointInRect(_self: *@This(), _location: foundation.Point, _visibleRect: foundation.Rect) foundation.Rect {
        return objc.msgSend(_self, "rectForSmartMagnificationAtPoint:inRect:", foundation.Rect, .{ _location, _visibleRect });
    }

    pub fn prepareForReuse(_self: *@This()) void {
        return objc.msgSend(_self, "prepareForReuse", void, .{});
    }

    pub fn prepareContentInRect(_self: *@This(), _rect: foundation.Rect) void {
        return objc.msgSend(_self, "prepareContentInRect:", void, .{_rect});
    }

    pub fn viewDidChangeEffectiveAppearance(_self: *@This()) void {
        return objc.msgSend(_self, "viewDidChangeEffectiveAppearance", void, .{});
    }

    pub fn window(_self: *@This()) ?*app_kit.Window {
        return objc.msgSend(_self, "window", ?*app_kit.Window, .{});
    }

    pub fn superview(_self: *@This()) ?*app_kit.View {
        return objc.msgSend(_self, "superview", ?*app_kit.View, .{});
    }

    pub fn subviews(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "subviews", ?*anyopaque, .{});
    }

    pub fn setSubviews(_self: *@This(), _subviews: ?*anyopaque) void {
        return objc.msgSend(_self, "setSubviews:", void, .{_subviews});
    }

    pub fn opaqueAncestor(_self: *@This()) ?*app_kit.View {
        return objc.msgSend(_self, "opaqueAncestor", ?*app_kit.View, .{});
    }

    pub fn isHidden(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isHidden", objc.BOOL, .{});
    }

    pub fn setHidden(_self: *@This(), _hidden: objc.BOOL) void {
        return objc.msgSend(_self, "setHidden:", void, .{_hidden});
    }

    pub fn isHiddenOrHasHiddenAncestor(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isHiddenOrHasHiddenAncestor", objc.BOOL, .{});
    }

    pub fn wantsDefaultClipping(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "wantsDefaultClipping", objc.BOOL, .{});
    }

    pub fn postsFrameChangedNotifications(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "postsFrameChangedNotifications", objc.BOOL, .{});
    }

    pub fn setPostsFrameChangedNotifications(_self: *@This(), _postsFrameChangedNotifications: objc.BOOL) void {
        return objc.msgSend(_self, "setPostsFrameChangedNotifications:", void, .{_postsFrameChangedNotifications});
    }

    pub fn autoresizesSubviews(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "autoresizesSubviews", objc.BOOL, .{});
    }

    pub fn setAutoresizesSubviews(_self: *@This(), _autoresizesSubviews: objc.BOOL) void {
        return objc.msgSend(_self, "setAutoresizesSubviews:", void, .{_autoresizesSubviews});
    }

    pub fn autoresizingMask(_self: *@This()) app_kit.AutoresizingMaskOptions {
        return objc.msgSend(_self, "autoresizingMask", app_kit.AutoresizingMaskOptions, .{});
    }

    pub fn setAutoresizingMask(_self: *@This(), _autoresizingMask: app_kit.AutoresizingMaskOptions) void {
        return objc.msgSend(_self, "setAutoresizingMask:", void, .{_autoresizingMask});
    }

    pub fn frame(_self: *@This()) foundation.Rect {
        return objc.msgSend(_self, "frame", foundation.Rect, .{});
    }

    pub fn setFrame(_self: *@This(), _frame: foundation.Rect) void {
        return objc.msgSend(_self, "setFrame:", void, .{_frame});
    }

    pub fn frameRotation(_self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(_self, "frameRotation", core_foundation.CGFloat, .{});
    }

    pub fn setFrameRotation(_self: *@This(), _frameRotation: core_foundation.CGFloat) void {
        return objc.msgSend(_self, "setFrameRotation:", void, .{_frameRotation});
    }

    pub fn frameCenterRotation(_self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(_self, "frameCenterRotation", core_foundation.CGFloat, .{});
    }

    pub fn setFrameCenterRotation(_self: *@This(), _frameCenterRotation: core_foundation.CGFloat) void {
        return objc.msgSend(_self, "setFrameCenterRotation:", void, .{_frameCenterRotation});
    }

    pub fn boundsRotation(_self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(_self, "boundsRotation", core_foundation.CGFloat, .{});
    }

    pub fn setBoundsRotation(_self: *@This(), _boundsRotation: core_foundation.CGFloat) void {
        return objc.msgSend(_self, "setBoundsRotation:", void, .{_boundsRotation});
    }

    pub fn bounds(_self: *@This()) foundation.Rect {
        return objc.msgSend(_self, "bounds", foundation.Rect, .{});
    }

    pub fn setBounds(_self: *@This(), _bounds: foundation.Rect) void {
        return objc.msgSend(_self, "setBounds:", void, .{_bounds});
    }

    pub fn isFlipped(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isFlipped", objc.BOOL, .{});
    }

    pub fn isRotatedFromBase(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isRotatedFromBase", objc.BOOL, .{});
    }

    pub fn isRotatedOrScaledFromBase(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isRotatedOrScaledFromBase", objc.BOOL, .{});
    }

    pub fn isOpaque(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isOpaque", objc.BOOL, .{});
    }

    pub fn canDrawConcurrently(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "canDrawConcurrently", objc.BOOL, .{});
    }

    pub fn setCanDrawConcurrently(_self: *@This(), _canDrawConcurrently: objc.BOOL) void {
        return objc.msgSend(_self, "setCanDrawConcurrently:", void, .{_canDrawConcurrently});
    }

    pub fn canDraw(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "canDraw", objc.BOOL, .{});
    }

    pub fn needsDisplay(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "needsDisplay", objc.BOOL, .{});
    }

    pub fn setNeedsDisplay(_self: *@This(), _needsDisplay: objc.BOOL) void {
        return objc.msgSend(_self, "setNeedsDisplay:", void, .{_needsDisplay});
    }

    pub fn focusView() ?*app_kit.View {
        return objc.msgSend(Internal.class(), "focusView", ?*app_kit.View, .{});
    }

    pub fn visibleRect(_self: *@This()) foundation.Rect {
        return objc.msgSend(_self, "visibleRect", foundation.Rect, .{});
    }

    pub fn tag(_self: *@This()) objc.NSInteger {
        return objc.msgSend(_self, "tag", objc.NSInteger, .{});
    }

    pub fn needsPanelToBecomeKey(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "needsPanelToBecomeKey", objc.BOOL, .{});
    }

    pub fn mouseDownCanMoveWindow(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "mouseDownCanMoveWindow", objc.BOOL, .{});
    }

    pub fn acceptsTouchEvents(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "acceptsTouchEvents", objc.BOOL, .{});
    }

    pub fn setAcceptsTouchEvents(_self: *@This(), _acceptsTouchEvents: objc.BOOL) void {
        return objc.msgSend(_self, "setAcceptsTouchEvents:", void, .{_acceptsTouchEvents});
    }

    pub fn wantsRestingTouches(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "wantsRestingTouches", objc.BOOL, .{});
    }

    pub fn setWantsRestingTouches(_self: *@This(), _wantsRestingTouches: objc.BOOL) void {
        return objc.msgSend(_self, "setWantsRestingTouches:", void, .{_wantsRestingTouches});
    }

    pub fn layerContentsRedrawPolicy(_self: *@This()) app_kit.ViewLayerContentsRedrawPolicy {
        return objc.msgSend(_self, "layerContentsRedrawPolicy", app_kit.ViewLayerContentsRedrawPolicy, .{});
    }

    pub fn setLayerContentsRedrawPolicy(_self: *@This(), _layerContentsRedrawPolicy: app_kit.ViewLayerContentsRedrawPolicy) void {
        return objc.msgSend(_self, "setLayerContentsRedrawPolicy:", void, .{_layerContentsRedrawPolicy});
    }

    pub fn layerContentsPlacement(_self: *@This()) app_kit.ViewLayerContentsPlacement {
        return objc.msgSend(_self, "layerContentsPlacement", app_kit.ViewLayerContentsPlacement, .{});
    }

    pub fn setLayerContentsPlacement(_self: *@This(), _layerContentsPlacement: app_kit.ViewLayerContentsPlacement) void {
        return objc.msgSend(_self, "setLayerContentsPlacement:", void, .{_layerContentsPlacement});
    }

    pub fn wantsLayer(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "wantsLayer", objc.BOOL, .{});
    }

    pub fn setWantsLayer(_self: *@This(), _wantsLayer: objc.BOOL) void {
        return objc.msgSend(_self, "setWantsLayer:", void, .{_wantsLayer});
    }

    pub fn layer(_self: *@This()) ?*quartz_core.Layer {
        return objc.msgSend(_self, "layer", ?*quartz_core.Layer, .{});
    }

    pub fn setLayer(_self: *@This(), _layer: ?*quartz_core.Layer) void {
        return objc.msgSend(_self, "setLayer:", void, .{_layer});
    }

    pub fn wantsUpdateLayer(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "wantsUpdateLayer", objc.BOOL, .{});
    }

    pub fn canDrawSubviewsIntoLayer(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "canDrawSubviewsIntoLayer", objc.BOOL, .{});
    }

    pub fn setCanDrawSubviewsIntoLayer(_self: *@This(), _canDrawSubviewsIntoLayer: objc.BOOL) void {
        return objc.msgSend(_self, "setCanDrawSubviewsIntoLayer:", void, .{_canDrawSubviewsIntoLayer});
    }

    pub fn needsLayout(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "needsLayout", objc.BOOL, .{});
    }

    pub fn setNeedsLayout(_self: *@This(), _needsLayout: objc.BOOL) void {
        return objc.msgSend(_self, "setNeedsLayout:", void, .{_needsLayout});
    }

    pub fn alphaValue(_self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(_self, "alphaValue", core_foundation.CGFloat, .{});
    }

    pub fn setAlphaValue(_self: *@This(), _alphaValue: core_foundation.CGFloat) void {
        return objc.msgSend(_self, "setAlphaValue:", void, .{_alphaValue});
    }

    pub fn layerUsesCoreImageFilters(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "layerUsesCoreImageFilters", objc.BOOL, .{});
    }

    pub fn setLayerUsesCoreImageFilters(_self: *@This(), _layerUsesCoreImageFilters: objc.BOOL) void {
        return objc.msgSend(_self, "setLayerUsesCoreImageFilters:", void, .{_layerUsesCoreImageFilters});
    }

    pub fn backgroundFilters(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "backgroundFilters", ?*anyopaque, .{});
    }

    pub fn setBackgroundFilters(_self: *@This(), _backgroundFilters: ?*anyopaque) void {
        return objc.msgSend(_self, "setBackgroundFilters:", void, .{_backgroundFilters});
    }

    pub fn compositingFilter(_self: *@This()) ?*core_image.Filter {
        return objc.msgSend(_self, "compositingFilter", ?*core_image.Filter, .{});
    }

    pub fn setCompositingFilter(_self: *@This(), _compositingFilter: ?*core_image.Filter) void {
        return objc.msgSend(_self, "setCompositingFilter:", void, .{_compositingFilter});
    }

    pub fn contentFilters(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "contentFilters", ?*anyopaque, .{});
    }

    pub fn setContentFilters(_self: *@This(), _contentFilters: ?*anyopaque) void {
        return objc.msgSend(_self, "setContentFilters:", void, .{_contentFilters});
    }

    pub fn shadow(_self: *@This()) ?*app_kit.Shadow {
        return objc.msgSend(_self, "shadow", ?*app_kit.Shadow, .{});
    }

    pub fn setShadow(_self: *@This(), _shadow: ?*app_kit.Shadow) void {
        return objc.msgSend(_self, "setShadow:", void, .{_shadow});
    }

    pub fn clipsToBounds(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "clipsToBounds", objc.BOOL, .{});
    }

    pub fn setClipsToBounds(_self: *@This(), _clipsToBounds: objc.BOOL) void {
        return objc.msgSend(_self, "setClipsToBounds:", void, .{_clipsToBounds});
    }

    pub fn postsBoundsChangedNotifications(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "postsBoundsChangedNotifications", objc.BOOL, .{});
    }

    pub fn setPostsBoundsChangedNotifications(_self: *@This(), _postsBoundsChangedNotifications: objc.BOOL) void {
        return objc.msgSend(_self, "setPostsBoundsChangedNotifications:", void, .{_postsBoundsChangedNotifications});
    }

    pub fn enclosingScrollView(_self: *@This()) ?*app_kit.ScrollView {
        return objc.msgSend(_self, "enclosingScrollView", ?*app_kit.ScrollView, .{});
    }

    pub fn defaultMenu() ?*app_kit.Menu {
        return objc.msgSend(Internal.class(), "defaultMenu", ?*app_kit.Menu, .{});
    }

    pub fn toolTip(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "toolTip", ?*foundation.String, .{});
    }

    pub fn setToolTip(_self: *@This(), _toolTip: ?*foundation.String) void {
        return objc.msgSend(_self, "setToolTip:", void, .{_toolTip});
    }

    pub fn inLiveResize(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "inLiveResize", objc.BOOL, .{});
    }

    pub fn preservesContentDuringLiveResize(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "preservesContentDuringLiveResize", objc.BOOL, .{});
    }

    pub fn rectPreservedDuringLiveResize(_self: *@This()) foundation.Rect {
        return objc.msgSend(_self, "rectPreservedDuringLiveResize", foundation.Rect, .{});
    }

    pub fn inputContext(_self: *@This()) ?*app_kit.TextInputContext {
        return objc.msgSend(_self, "inputContext", ?*app_kit.TextInputContext, .{});
    }

    pub fn userInterfaceLayoutDirection(_self: *@This()) app_kit.UserInterfaceLayoutDirection {
        return objc.msgSend(_self, "userInterfaceLayoutDirection", app_kit.UserInterfaceLayoutDirection, .{});
    }

    pub fn setUserInterfaceLayoutDirection(_self: *@This(), _userInterfaceLayoutDirection: app_kit.UserInterfaceLayoutDirection) void {
        return objc.msgSend(_self, "setUserInterfaceLayoutDirection:", void, .{_userInterfaceLayoutDirection});
    }

    pub fn isCompatibleWithResponsiveScrolling() objc.BOOL {
        return objc.msgSend(Internal.class(), "isCompatibleWithResponsiveScrolling", objc.BOOL, .{});
    }

    pub fn preparedContentRect(_self: *@This()) foundation.Rect {
        return objc.msgSend(_self, "preparedContentRect", foundation.Rect, .{});
    }

    pub fn setPreparedContentRect(_self: *@This(), _preparedContentRect: foundation.Rect) void {
        return objc.msgSend(_self, "setPreparedContentRect:", void, .{_preparedContentRect});
    }

    pub fn allowsVibrancy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsVibrancy", objc.BOOL, .{});
    }

    pub fn initWithAnnotationReuseIdentifier(_self: *@This(), _annotation: ?*anyopaque, _reuseIdentifier: ?*foundation.String) *@This() {
        return objc.msgSend(_self, "initWithAnnotation:reuseIdentifier:", *@This(), .{ _annotation, _reuseIdentifier });
    }

    pub fn prepareForDisplay(_self: *@This()) void {
        return objc.msgSend(_self, "prepareForDisplay", void, .{});
    }

    pub fn setSelectedAnimated(_self: *@This(), _selected: objc.BOOL, _animated: objc.BOOL) void {
        return objc.msgSend(_self, "setSelected:animated:", void, .{ _selected, _animated });
    }

    pub fn setDragStateAnimated(_self: *@This(), _newDragState: AnnotationViewDragState, _animated: objc.BOOL) void {
        return objc.msgSend(_self, "setDragState:animated:", void, .{ _newDragState, _animated });
    }

    pub fn reuseIdentifier(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "reuseIdentifier", ?*foundation.String, .{});
    }

    pub fn annotation(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "annotation", ?*anyopaque, .{});
    }

    pub fn setAnnotation(_self: *@This(), _annotation: ?*anyopaque) void {
        return objc.msgSend(_self, "setAnnotation:", void, .{_annotation});
    }

    pub fn image(_self: *@This()) ?*app_kit.Image {
        return objc.msgSend(_self, "image", ?*app_kit.Image, .{});
    }

    pub fn setImage(_self: *@This(), _image: ?*app_kit.Image) void {
        return objc.msgSend(_self, "setImage:", void, .{_image});
    }

    pub fn centerOffset(_self: *@This()) core_foundation.CGPoint {
        return objc.msgSend(_self, "centerOffset", core_foundation.CGPoint, .{});
    }

    pub fn setCenterOffset(_self: *@This(), _centerOffset: core_foundation.CGPoint) void {
        return objc.msgSend(_self, "setCenterOffset:", void, .{_centerOffset});
    }

    pub fn accessoryOffset(_self: *@This()) core_foundation.CGPoint {
        return objc.msgSend(_self, "accessoryOffset", core_foundation.CGPoint, .{});
    }

    pub fn setAccessoryOffset(_self: *@This(), _accessoryOffset: core_foundation.CGPoint) void {
        return objc.msgSend(_self, "setAccessoryOffset:", void, .{_accessoryOffset});
    }

    pub fn calloutOffset(_self: *@This()) core_foundation.CGPoint {
        return objc.msgSend(_self, "calloutOffset", core_foundation.CGPoint, .{});
    }

    pub fn setCalloutOffset(_self: *@This(), _calloutOffset: core_foundation.CGPoint) void {
        return objc.msgSend(_self, "setCalloutOffset:", void, .{_calloutOffset});
    }

    pub fn leftCalloutOffset(_self: *@This()) core_foundation.CGPoint {
        return objc.msgSend(_self, "leftCalloutOffset", core_foundation.CGPoint, .{});
    }

    pub fn setLeftCalloutOffset(_self: *@This(), _leftCalloutOffset: core_foundation.CGPoint) void {
        return objc.msgSend(_self, "setLeftCalloutOffset:", void, .{_leftCalloutOffset});
    }

    pub fn rightCalloutOffset(_self: *@This()) core_foundation.CGPoint {
        return objc.msgSend(_self, "rightCalloutOffset", core_foundation.CGPoint, .{});
    }

    pub fn setRightCalloutOffset(_self: *@This(), _rightCalloutOffset: core_foundation.CGPoint) void {
        return objc.msgSend(_self, "setRightCalloutOffset:", void, .{_rightCalloutOffset});
    }

    pub fn isEnabled(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isEnabled", objc.BOOL, .{});
    }

    pub fn setEnabled(_self: *@This(), _enabled: objc.BOOL) void {
        return objc.msgSend(_self, "setEnabled:", void, .{_enabled});
    }

    pub fn isHighlighted(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isHighlighted", objc.BOOL, .{});
    }

    pub fn setHighlighted(_self: *@This(), _highlighted: objc.BOOL) void {
        return objc.msgSend(_self, "setHighlighted:", void, .{_highlighted});
    }

    pub fn isSelected(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isSelected", objc.BOOL, .{});
    }

    pub fn setSelected(_self: *@This(), _selected: objc.BOOL) void {
        return objc.msgSend(_self, "setSelected:", void, .{_selected});
    }

    pub fn canShowCallout(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "canShowCallout", objc.BOOL, .{});
    }

    pub fn setCanShowCallout(_self: *@This(), _canShowCallout: objc.BOOL) void {
        return objc.msgSend(_self, "setCanShowCallout:", void, .{_canShowCallout});
    }

    pub fn leftCalloutAccessoryView(_self: *@This()) ?*app_kit.View {
        return objc.msgSend(_self, "leftCalloutAccessoryView", ?*app_kit.View, .{});
    }

    pub fn setLeftCalloutAccessoryView(_self: *@This(), _leftCalloutAccessoryView: ?*app_kit.View) void {
        return objc.msgSend(_self, "setLeftCalloutAccessoryView:", void, .{_leftCalloutAccessoryView});
    }

    pub fn rightCalloutAccessoryView(_self: *@This()) ?*app_kit.View {
        return objc.msgSend(_self, "rightCalloutAccessoryView", ?*app_kit.View, .{});
    }

    pub fn setRightCalloutAccessoryView(_self: *@This(), _rightCalloutAccessoryView: ?*app_kit.View) void {
        return objc.msgSend(_self, "setRightCalloutAccessoryView:", void, .{_rightCalloutAccessoryView});
    }

    pub fn detailCalloutAccessoryView(_self: *@This()) ?*app_kit.View {
        return objc.msgSend(_self, "detailCalloutAccessoryView", ?*app_kit.View, .{});
    }

    pub fn setDetailCalloutAccessoryView(_self: *@This(), _detailCalloutAccessoryView: ?*app_kit.View) void {
        return objc.msgSend(_self, "setDetailCalloutAccessoryView:", void, .{_detailCalloutAccessoryView});
    }

    pub fn isDraggable(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isDraggable", objc.BOOL, .{});
    }

    pub fn setDraggable(_self: *@This(), _draggable: objc.BOOL) void {
        return objc.msgSend(_self, "setDraggable:", void, .{_draggable});
    }

    pub fn dragState(_self: *@This()) AnnotationViewDragState {
        return objc.msgSend(_self, "dragState", AnnotationViewDragState, .{});
    }

    pub fn setDragState(_self: *@This(), _dragState: AnnotationViewDragState) void {
        return objc.msgSend(_self, "setDragState:", void, .{_dragState});
    }

    pub fn clusteringIdentifier(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "clusteringIdentifier", ?*foundation.String, .{});
    }

    pub fn setClusteringIdentifier(_self: *@This(), _clusteringIdentifier: ?*foundation.String) void {
        return objc.msgSend(_self, "setClusteringIdentifier:", void, .{_clusteringIdentifier});
    }

    pub fn clusterAnnotationView(_self: *@This()) ?*AnnotationView {
        return objc.msgSend(_self, "clusterAnnotationView", ?*AnnotationView, .{});
    }

    pub fn displayPriority(_self: *@This()) FeatureDisplayPriority {
        return objc.msgSend(_self, "displayPriority", FeatureDisplayPriority, .{});
    }

    pub fn setDisplayPriority(_self: *@This(), _displayPriority: FeatureDisplayPriority) void {
        return objc.msgSend(_self, "setDisplayPriority:", void, .{_displayPriority});
    }

    pub fn zPriority(_self: *@This()) AnnotationViewZPriority {
        return objc.msgSend(_self, "zPriority", AnnotationViewZPriority, .{});
    }

    pub fn setZPriority(_self: *@This(), _zPriority: AnnotationViewZPriority) void {
        return objc.msgSend(_self, "setZPriority:", void, .{_zPriority});
    }

    pub fn selectedZPriority(_self: *@This()) AnnotationViewZPriority {
        return objc.msgSend(_self, "selectedZPriority", AnnotationViewZPriority, .{});
    }

    pub fn setSelectedZPriority(_self: *@This(), _selectedZPriority: AnnotationViewZPriority) void {
        return objc.msgSend(_self, "setSelectedZPriority:", void, .{_selectedZPriority});
    }

    pub fn collisionMode(_self: *@This()) AnnotationViewCollisionMode {
        return objc.msgSend(_self, "collisionMode", AnnotationViewCollisionMode, .{});
    }

    pub fn setCollisionMode(_self: *@This(), _collisionMode: AnnotationViewCollisionMode) void {
        return objc.msgSend(_self, "setCollisionMode:", void, .{_collisionMode});
    }
};

/// https://developer.apple.com/documentation/MapKit/MKClusterAnnotation?language=objc
pub const ClusterAnnotation = opaque {
    pub const Internal = objc.ExternClass("MKClusterAnnotation", @This(), objc.NSObject, &.{Annotation});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "description", ?*foundation.String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "debugDescription", ?*foundation.String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*foundation.Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*foundation.MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*foundation.MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*foundation.MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*foundation.MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn setCoordinate(_self: *@This(), _newCoordinate: core_location.LocationCoordinate2D) void {
        return objc.msgSend(_self, "setCoordinate:", void, .{_newCoordinate});
    }

    pub fn coordinate(_self: *@This()) core_location.LocationCoordinate2D {
        return objc.msgSend(_self, "coordinate", core_location.LocationCoordinate2D, .{});
    }

    pub fn title(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "title", ?*foundation.String, .{});
    }

    pub fn subtitle(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "subtitle", ?*foundation.String, .{});
    }

    pub fn initWithMemberAnnotations(_self: *@This(), _memberAnnotations: ?*anyopaque) *@This() {
        return objc.msgSend(_self, "initWithMemberAnnotations:", *@This(), .{_memberAnnotations});
    }

    pub fn setTitle(_self: *@This(), _title: ?*foundation.String) void {
        return objc.msgSend(_self, "setTitle:", void, .{_title});
    }

    pub fn setSubtitle(_self: *@This(), _subtitle: ?*foundation.String) void {
        return objc.msgSend(_self, "setSubtitle:", void, .{_subtitle});
    }

    pub fn memberAnnotations(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "memberAnnotations", ?*anyopaque, .{});
    }
};

/// https://developer.apple.com/documentation/MapKit/MKCompassButton?language=objc
pub const CompassButton = opaque {
    pub const Internal = objc.ExternClass("MKCompassButton", @This(), app_kit.View, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "description", ?*foundation.String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "debugDescription", ?*foundation.String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*foundation.Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*foundation.MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*foundation.MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*foundation.MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*foundation.MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*foundation.Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*foundation.Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn tryToPerformWith(_self: *@This(), _action: objc.Selector, _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "tryToPerform:with:", objc.BOOL, .{ _action, _object });
    }

    pub fn performKeyEquivalent(_self: *@This(), _event: ?*app_kit.Event) objc.BOOL {
        return objc.msgSend(_self, "performKeyEquivalent:", objc.BOOL, .{_event});
    }

    pub fn validRequestorForSendTypeReturnType(_self: *@This(), _sendType: app_kit.PasteboardType, _returnType: app_kit.PasteboardType) ?objc.Id {
        return objc.msgSend(_self, "validRequestorForSendType:returnType:", ?objc.Id, .{ _sendType, _returnType });
    }

    pub fn mouseDown(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "mouseDown:", void, .{_event});
    }

    pub fn rightMouseDown(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "rightMouseDown:", void, .{_event});
    }

    pub fn otherMouseDown(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "otherMouseDown:", void, .{_event});
    }

    pub fn mouseUp(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "mouseUp:", void, .{_event});
    }

    pub fn rightMouseUp(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "rightMouseUp:", void, .{_event});
    }

    pub fn otherMouseUp(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "otherMouseUp:", void, .{_event});
    }

    pub fn mouseMoved(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "mouseMoved:", void, .{_event});
    }

    pub fn mouseDragged(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "mouseDragged:", void, .{_event});
    }

    pub fn scrollWheel(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "scrollWheel:", void, .{_event});
    }

    pub fn rightMouseDragged(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "rightMouseDragged:", void, .{_event});
    }

    pub fn otherMouseDragged(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "otherMouseDragged:", void, .{_event});
    }

    pub fn mouseEntered(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "mouseEntered:", void, .{_event});
    }

    pub fn mouseExited(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "mouseExited:", void, .{_event});
    }

    pub fn keyDown(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "keyDown:", void, .{_event});
    }

    pub fn keyUp(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "keyUp:", void, .{_event});
    }

    pub fn flagsChanged(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "flagsChanged:", void, .{_event});
    }

    pub fn tabletPoint(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "tabletPoint:", void, .{_event});
    }

    pub fn tabletProximity(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "tabletProximity:", void, .{_event});
    }

    pub fn cursorUpdate(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "cursorUpdate:", void, .{_event});
    }

    pub fn magnifyWithEvent(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "magnifyWithEvent:", void, .{_event});
    }

    pub fn rotateWithEvent(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "rotateWithEvent:", void, .{_event});
    }

    pub fn swipeWithEvent(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "swipeWithEvent:", void, .{_event});
    }

    pub fn beginGestureWithEvent(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "beginGestureWithEvent:", void, .{_event});
    }

    pub fn endGestureWithEvent(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "endGestureWithEvent:", void, .{_event});
    }

    pub fn smartMagnifyWithEvent(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "smartMagnifyWithEvent:", void, .{_event});
    }

    pub fn changeModeWithEvent(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "changeModeWithEvent:", void, .{_event});
    }

    pub fn touchesBeganWithEvent(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "touchesBeganWithEvent:", void, .{_event});
    }

    pub fn touchesMovedWithEvent(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "touchesMovedWithEvent:", void, .{_event});
    }

    pub fn touchesEndedWithEvent(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "touchesEndedWithEvent:", void, .{_event});
    }

    pub fn touchesCancelledWithEvent(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "touchesCancelledWithEvent:", void, .{_event});
    }

    pub fn quickLookWithEvent(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "quickLookWithEvent:", void, .{_event});
    }

    pub fn pressureChangeWithEvent(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "pressureChangeWithEvent:", void, .{_event});
    }

    pub fn contextMenuKeyDown(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "contextMenuKeyDown:", void, .{_event});
    }

    pub fn noResponderFor(_self: *@This(), _eventSelector: objc.Selector) void {
        return objc.msgSend(_self, "noResponderFor:", void, .{_eventSelector});
    }

    pub fn becomeFirstResponder(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "becomeFirstResponder", objc.BOOL, .{});
    }

    pub fn resignFirstResponder(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "resignFirstResponder", objc.BOOL, .{});
    }

    pub fn interpretKeyEvents(_self: *@This(), _eventArray: ?*anyopaque) void {
        return objc.msgSend(_self, "interpretKeyEvents:", void, .{_eventArray});
    }

    pub fn flushBufferedKeyEvents(_self: *@This()) void {
        return objc.msgSend(_self, "flushBufferedKeyEvents", void, .{});
    }

    pub fn showContextHelp(_self: *@This(), _sender: ?objc.Id) void {
        return objc.msgSend(_self, "showContextHelp:", void, .{_sender});
    }

    pub fn helpRequested(_self: *@This(), _eventPtr: ?*app_kit.Event) void {
        return objc.msgSend(_self, "helpRequested:", void, .{_eventPtr});
    }

    pub fn shouldBeTreatedAsInkEvent(_self: *@This(), _event: ?*app_kit.Event) objc.BOOL {
        return objc.msgSend(_self, "shouldBeTreatedAsInkEvent:", objc.BOOL, .{_event});
    }

    pub fn wantsScrollEventsForSwipeTrackingOnAxis(_self: *@This(), _axis: app_kit.EventGestureAxis) objc.BOOL {
        return objc.msgSend(_self, "wantsScrollEventsForSwipeTrackingOnAxis:", objc.BOOL, .{_axis});
    }

    pub fn wantsForwardedScrollEventsForAxis(_self: *@This(), _axis: app_kit.EventGestureAxis) objc.BOOL {
        return objc.msgSend(_self, "wantsForwardedScrollEventsForAxis:", objc.BOOL, .{_axis});
    }

    pub fn supplementalTargetForActionSender(_self: *@This(), _action: objc.Selector, _sender: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "supplementalTargetForAction:sender:", ?objc.Id, .{ _action, _sender });
    }

    pub fn nextResponder(_self: *@This()) ?*app_kit.Responder {
        return objc.msgSend(_self, "nextResponder", ?*app_kit.Responder, .{});
    }

    pub fn setNextResponder(_self: *@This(), _nextResponder: ?*app_kit.Responder) void {
        return objc.msgSend(_self, "setNextResponder:", void, .{_nextResponder});
    }

    pub fn acceptsFirstResponder(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "acceptsFirstResponder", objc.BOOL, .{});
    }

    pub fn menu(_self: *@This()) ?*app_kit.Menu {
        return objc.msgSend(_self, "menu", ?*app_kit.Menu, .{});
    }

    pub fn setMenu(_self: *@This(), _menu: ?*app_kit.Menu) void {
        return objc.msgSend(_self, "setMenu:", void, .{_menu});
    }

    pub fn animator(_self: *@This()) *@This() {
        return objc.msgSend(_self, "animator", *@This(), .{});
    }

    pub fn animationForKey(_self: *@This(), _key: app_kit.AnimatablePropertyKey) ?objc.Id {
        return objc.msgSend(_self, "animationForKey:", ?objc.Id, .{_key});
    }

    pub fn defaultAnimationForKey(_key: app_kit.AnimatablePropertyKey) ?objc.Id {
        return objc.msgSend(Internal.class(), "defaultAnimationForKey:", ?objc.Id, .{_key});
    }

    pub fn animations(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "animations", ?*anyopaque, .{});
    }

    pub fn setAnimations(_self: *@This(), _animations: ?*anyopaque) void {
        return objc.msgSend(_self, "setAnimations:", void, .{_animations});
    }

    pub fn identifier(_self: *@This()) app_kit.UserInterfaceItemIdentifier {
        return objc.msgSend(_self, "identifier", app_kit.UserInterfaceItemIdentifier, .{});
    }

    pub fn setIdentifier(_self: *@This(), _identifier: app_kit.UserInterfaceItemIdentifier) void {
        return objc.msgSend(_self, "setIdentifier:", void, .{_identifier});
    }

    pub fn draggingEntered(_self: *@This(), _sender: ?*anyopaque) app_kit.DragOperation {
        return objc.msgSend(_self, "draggingEntered:", app_kit.DragOperation, .{_sender});
    }

    pub fn draggingUpdated(_self: *@This(), _sender: ?*anyopaque) app_kit.DragOperation {
        return objc.msgSend(_self, "draggingUpdated:", app_kit.DragOperation, .{_sender});
    }

    pub fn draggingExited(_self: *@This(), _sender: ?*anyopaque) void {
        return objc.msgSend(_self, "draggingExited:", void, .{_sender});
    }

    pub fn prepareForDragOperation(_self: *@This(), _sender: ?*anyopaque) objc.BOOL {
        return objc.msgSend(_self, "prepareForDragOperation:", objc.BOOL, .{_sender});
    }

    pub fn performDragOperation(_self: *@This(), _sender: ?*anyopaque) objc.BOOL {
        return objc.msgSend(_self, "performDragOperation:", objc.BOOL, .{_sender});
    }

    pub fn concludeDragOperation(_self: *@This(), _sender: ?*anyopaque) void {
        return objc.msgSend(_self, "concludeDragOperation:", void, .{_sender});
    }

    pub fn draggingEnded(_self: *@This(), _sender: ?*anyopaque) void {
        return objc.msgSend(_self, "draggingEnded:", void, .{_sender});
    }

    pub fn wantsPeriodicDraggingUpdates(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "wantsPeriodicDraggingUpdates", objc.BOOL, .{});
    }

    pub fn updateDraggingItemsForDrag(_self: *@This(), _sender: ?*anyopaque) void {
        return objc.msgSend(_self, "updateDraggingItemsForDrag:", void, .{_sender});
    }

    pub fn appearance(_self: *@This()) ?*app_kit.Appearance {
        return objc.msgSend(_self, "appearance", ?*app_kit.Appearance, .{});
    }

    pub fn setAppearance(_self: *@This(), _appearance: ?*app_kit.Appearance) void {
        return objc.msgSend(_self, "setAppearance:", void, .{_appearance});
    }

    pub fn effectiveAppearance(_self: *@This()) ?*app_kit.Appearance {
        return objc.msgSend(_self, "effectiveAppearance", ?*app_kit.Appearance, .{});
    }

    pub fn accessibilityFrame(_self: *@This()) foundation.Rect {
        return objc.msgSend(_self, "accessibilityFrame", foundation.Rect, .{});
    }

    pub fn accessibilityParent(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityParent", ?objc.Id, .{});
    }

    pub fn isAccessibilityFocused(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isAccessibilityFocused", objc.BOOL, .{});
    }

    pub fn accessibilityIdentifier(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "accessibilityIdentifier", ?*foundation.String, .{});
    }

    pub fn accessibilityLayoutPointForScreenPoint(_self: *@This(), _point: foundation.Point) foundation.Point {
        return objc.msgSend(_self, "accessibilityLayoutPointForScreenPoint:", foundation.Point, .{_point});
    }

    pub fn accessibilityLayoutSizeForScreenSize(_self: *@This(), _size: foundation.Size) foundation.Size {
        return objc.msgSend(_self, "accessibilityLayoutSizeForScreenSize:", foundation.Size, .{_size});
    }

    pub fn accessibilityScreenPointForLayoutPoint(_self: *@This(), _point: foundation.Point) foundation.Point {
        return objc.msgSend(_self, "accessibilityScreenPointForLayoutPoint:", foundation.Point, .{_point});
    }

    pub fn accessibilityScreenSizeForLayoutSize(_self: *@This(), _size: foundation.Size) foundation.Size {
        return objc.msgSend(_self, "accessibilityScreenSizeForLayoutSize:", foundation.Size, .{_size});
    }

    pub fn accessibilityCellForColumnRow(_self: *@This(), _column: objc.NSInteger, _row: objc.NSInteger) ?objc.Id {
        return objc.msgSend(_self, "accessibilityCellForColumn:row:", ?objc.Id, .{ _column, _row });
    }

    pub fn accessibilityAttributedStringForRange(_self: *@This(), _range: foundation.Range) ?*foundation.AttributedString {
        return objc.msgSend(_self, "accessibilityAttributedStringForRange:", ?*foundation.AttributedString, .{_range});
    }

    pub fn accessibilityRangeForLine(_self: *@This(), _line: objc.NSInteger) foundation.Range {
        return objc.msgSend(_self, "accessibilityRangeForLine:", foundation.Range, .{_line});
    }

    pub fn accessibilityStringForRange(_self: *@This(), _range: foundation.Range) ?*foundation.String {
        return objc.msgSend(_self, "accessibilityStringForRange:", ?*foundation.String, .{_range});
    }

    pub fn accessibilityRangeForPosition(_self: *@This(), _point: foundation.Point) foundation.Range {
        return objc.msgSend(_self, "accessibilityRangeForPosition:", foundation.Range, .{_point});
    }

    pub fn accessibilityRangeForIndex(_self: *@This(), _index: objc.NSInteger) foundation.Range {
        return objc.msgSend(_self, "accessibilityRangeForIndex:", foundation.Range, .{_index});
    }

    pub fn accessibilityFrameForRange(_self: *@This(), _range: foundation.Range) foundation.Rect {
        return objc.msgSend(_self, "accessibilityFrameForRange:", foundation.Rect, .{_range});
    }

    pub fn accessibilityRTFForRange(_self: *@This(), _range: foundation.Range) ?*foundation.Data {
        return objc.msgSend(_self, "accessibilityRTFForRange:", ?*foundation.Data, .{_range});
    }

    pub fn accessibilityStyleRangeForIndex(_self: *@This(), _index: objc.NSInteger) foundation.Range {
        return objc.msgSend(_self, "accessibilityStyleRangeForIndex:", foundation.Range, .{_index});
    }

    pub fn accessibilityLineForIndex(_self: *@This(), _index: objc.NSInteger) objc.NSInteger {
        return objc.msgSend(_self, "accessibilityLineForIndex:", objc.NSInteger, .{_index});
    }

    pub fn accessibilityPerformCancel(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "accessibilityPerformCancel", objc.BOOL, .{});
    }

    pub fn accessibilityPerformConfirm(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "accessibilityPerformConfirm", objc.BOOL, .{});
    }

    pub fn accessibilityPerformDecrement(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "accessibilityPerformDecrement", objc.BOOL, .{});
    }

    pub fn accessibilityPerformDelete(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "accessibilityPerformDelete", objc.BOOL, .{});
    }

    pub fn accessibilityPerformIncrement(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "accessibilityPerformIncrement", objc.BOOL, .{});
    }

    pub fn accessibilityPerformPick(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "accessibilityPerformPick", objc.BOOL, .{});
    }

    pub fn accessibilityPerformPress(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "accessibilityPerformPress", objc.BOOL, .{});
    }

    pub fn accessibilityPerformRaise(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "accessibilityPerformRaise", objc.BOOL, .{});
    }

    pub fn accessibilityPerformShowAlternateUI(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "accessibilityPerformShowAlternateUI", objc.BOOL, .{});
    }

    pub fn accessibilityPerformShowDefaultUI(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "accessibilityPerformShowDefaultUI", objc.BOOL, .{});
    }

    pub fn accessibilityPerformShowMenu(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "accessibilityPerformShowMenu", objc.BOOL, .{});
    }

    pub fn isAccessibilitySelectorAllowed(_self: *@This(), _selector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "isAccessibilitySelectorAllowed:", objc.BOOL, .{_selector});
    }

    pub fn isAccessibilityElement(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isAccessibilityElement", objc.BOOL, .{});
    }

    pub fn setAccessibilityElement(_self: *@This(), _accessibilityElement: objc.BOOL) void {
        return objc.msgSend(_self, "setAccessibilityElement:", void, .{_accessibilityElement});
    }

    pub fn setAccessibilityFrame(_self: *@This(), _accessibilityFrame: foundation.Rect) void {
        return objc.msgSend(_self, "setAccessibilityFrame:", void, .{_accessibilityFrame});
    }

    pub fn setAccessibilityFocused(_self: *@This(), _accessibilityFocused: objc.BOOL) void {
        return objc.msgSend(_self, "setAccessibilityFocused:", void, .{_accessibilityFocused});
    }

    pub fn accessibilityActivationPoint(_self: *@This()) foundation.Point {
        return objc.msgSend(_self, "accessibilityActivationPoint", foundation.Point, .{});
    }

    pub fn setAccessibilityActivationPoint(_self: *@This(), _accessibilityActivationPoint: foundation.Point) void {
        return objc.msgSend(_self, "setAccessibilityActivationPoint:", void, .{_accessibilityActivationPoint});
    }

    pub fn accessibilityTopLevelUIElement(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityTopLevelUIElement", ?objc.Id, .{});
    }

    pub fn setAccessibilityTopLevelUIElement(_self: *@This(), _accessibilityTopLevelUIElement: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityTopLevelUIElement:", void, .{_accessibilityTopLevelUIElement});
    }

    pub fn accessibilityURL(_self: *@This()) ?*foundation.URL {
        return objc.msgSend(_self, "accessibilityURL", ?*foundation.URL, .{});
    }

    pub fn setAccessibilityURL(_self: *@This(), _accessibilityURL: ?*foundation.URL) void {
        return objc.msgSend(_self, "setAccessibilityURL:", void, .{_accessibilityURL});
    }

    pub fn accessibilityValue(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityValue", ?objc.Id, .{});
    }

    pub fn setAccessibilityValue(_self: *@This(), _accessibilityValue: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityValue:", void, .{_accessibilityValue});
    }

    pub fn accessibilityValueDescription(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "accessibilityValueDescription", ?*foundation.String, .{});
    }

    pub fn setAccessibilityValueDescription(_self: *@This(), _accessibilityValueDescription: ?*foundation.String) void {
        return objc.msgSend(_self, "setAccessibilityValueDescription:", void, .{_accessibilityValueDescription});
    }

    pub fn accessibilityVisibleChildren(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilityVisibleChildren", ?*foundation.Array, .{});
    }

    pub fn setAccessibilityVisibleChildren(_self: *@This(), _accessibilityVisibleChildren: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilityVisibleChildren:", void, .{_accessibilityVisibleChildren});
    }

    pub fn accessibilitySubrole(_self: *@This()) app_kit.AccessibilitySubrole {
        return objc.msgSend(_self, "accessibilitySubrole", app_kit.AccessibilitySubrole, .{});
    }

    pub fn setAccessibilitySubrole(_self: *@This(), _accessibilitySubrole: app_kit.AccessibilitySubrole) void {
        return objc.msgSend(_self, "setAccessibilitySubrole:", void, .{_accessibilitySubrole});
    }

    pub fn accessibilityTitle(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "accessibilityTitle", ?*foundation.String, .{});
    }

    pub fn setAccessibilityTitle(_self: *@This(), _accessibilityTitle: ?*foundation.String) void {
        return objc.msgSend(_self, "setAccessibilityTitle:", void, .{_accessibilityTitle});
    }

    pub fn accessibilityTitleUIElement(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityTitleUIElement", ?objc.Id, .{});
    }

    pub fn setAccessibilityTitleUIElement(_self: *@This(), _accessibilityTitleUIElement: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityTitleUIElement:", void, .{_accessibilityTitleUIElement});
    }

    pub fn accessibilityNextContents(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilityNextContents", ?*foundation.Array, .{});
    }

    pub fn setAccessibilityNextContents(_self: *@This(), _accessibilityNextContents: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilityNextContents:", void, .{_accessibilityNextContents});
    }

    pub fn accessibilityOrientation(_self: *@This()) app_kit.AccessibilityOrientation {
        return objc.msgSend(_self, "accessibilityOrientation", app_kit.AccessibilityOrientation, .{});
    }

    pub fn setAccessibilityOrientation(_self: *@This(), _accessibilityOrientation: app_kit.AccessibilityOrientation) void {
        return objc.msgSend(_self, "setAccessibilityOrientation:", void, .{_accessibilityOrientation});
    }

    pub fn accessibilityOverflowButton(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityOverflowButton", ?objc.Id, .{});
    }

    pub fn setAccessibilityOverflowButton(_self: *@This(), _accessibilityOverflowButton: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityOverflowButton:", void, .{_accessibilityOverflowButton});
    }

    pub fn setAccessibilityParent(_self: *@This(), _accessibilityParent: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityParent:", void, .{_accessibilityParent});
    }

    pub fn accessibilityPlaceholderValue(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "accessibilityPlaceholderValue", ?*foundation.String, .{});
    }

    pub fn setAccessibilityPlaceholderValue(_self: *@This(), _accessibilityPlaceholderValue: ?*foundation.String) void {
        return objc.msgSend(_self, "setAccessibilityPlaceholderValue:", void, .{_accessibilityPlaceholderValue});
    }

    pub fn accessibilityPreviousContents(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilityPreviousContents", ?*foundation.Array, .{});
    }

    pub fn setAccessibilityPreviousContents(_self: *@This(), _accessibilityPreviousContents: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilityPreviousContents:", void, .{_accessibilityPreviousContents});
    }

    pub fn accessibilityRole(_self: *@This()) app_kit.AccessibilityRole {
        return objc.msgSend(_self, "accessibilityRole", app_kit.AccessibilityRole, .{});
    }

    pub fn setAccessibilityRole(_self: *@This(), _accessibilityRole: app_kit.AccessibilityRole) void {
        return objc.msgSend(_self, "setAccessibilityRole:", void, .{_accessibilityRole});
    }

    pub fn accessibilityRoleDescription(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "accessibilityRoleDescription", ?*foundation.String, .{});
    }

    pub fn setAccessibilityRoleDescription(_self: *@This(), _accessibilityRoleDescription: ?*foundation.String) void {
        return objc.msgSend(_self, "setAccessibilityRoleDescription:", void, .{_accessibilityRoleDescription});
    }

    pub fn accessibilitySearchButton(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilitySearchButton", ?objc.Id, .{});
    }

    pub fn setAccessibilitySearchButton(_self: *@This(), _accessibilitySearchButton: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilitySearchButton:", void, .{_accessibilitySearchButton});
    }

    pub fn accessibilitySearchMenu(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilitySearchMenu", ?objc.Id, .{});
    }

    pub fn setAccessibilitySearchMenu(_self: *@This(), _accessibilitySearchMenu: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilitySearchMenu:", void, .{_accessibilitySearchMenu});
    }

    pub fn isAccessibilitySelected(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isAccessibilitySelected", objc.BOOL, .{});
    }

    pub fn setAccessibilitySelected(_self: *@This(), _accessibilitySelected: objc.BOOL) void {
        return objc.msgSend(_self, "setAccessibilitySelected:", void, .{_accessibilitySelected});
    }

    pub fn accessibilitySelectedChildren(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilitySelectedChildren", ?*foundation.Array, .{});
    }

    pub fn setAccessibilitySelectedChildren(_self: *@This(), _accessibilitySelectedChildren: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilitySelectedChildren:", void, .{_accessibilitySelectedChildren});
    }

    pub fn accessibilityServesAsTitleForUIElements(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilityServesAsTitleForUIElements", ?*foundation.Array, .{});
    }

    pub fn setAccessibilityServesAsTitleForUIElements(_self: *@This(), _accessibilityServesAsTitleForUIElements: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilityServesAsTitleForUIElements:", void, .{_accessibilityServesAsTitleForUIElements});
    }

    pub fn accessibilityShownMenu(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityShownMenu", ?objc.Id, .{});
    }

    pub fn setAccessibilityShownMenu(_self: *@This(), _accessibilityShownMenu: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityShownMenu:", void, .{_accessibilityShownMenu});
    }

    pub fn accessibilityMinValue(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityMinValue", ?objc.Id, .{});
    }

    pub fn setAccessibilityMinValue(_self: *@This(), _accessibilityMinValue: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityMinValue:", void, .{_accessibilityMinValue});
    }

    pub fn accessibilityMaxValue(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityMaxValue", ?objc.Id, .{});
    }

    pub fn setAccessibilityMaxValue(_self: *@This(), _accessibilityMaxValue: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityMaxValue:", void, .{_accessibilityMaxValue});
    }

    pub fn accessibilityLinkedUIElements(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilityLinkedUIElements", ?*foundation.Array, .{});
    }

    pub fn setAccessibilityLinkedUIElements(_self: *@This(), _accessibilityLinkedUIElements: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilityLinkedUIElements:", void, .{_accessibilityLinkedUIElements});
    }

    pub fn accessibilityWindow(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityWindow", ?objc.Id, .{});
    }

    pub fn setAccessibilityWindow(_self: *@This(), _accessibilityWindow: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityWindow:", void, .{_accessibilityWindow});
    }

    pub fn setAccessibilityIdentifier(_self: *@This(), _accessibilityIdentifier: ?*foundation.String) void {
        return objc.msgSend(_self, "setAccessibilityIdentifier:", void, .{_accessibilityIdentifier});
    }

    pub fn accessibilityHelp(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "accessibilityHelp", ?*foundation.String, .{});
    }

    pub fn setAccessibilityHelp(_self: *@This(), _accessibilityHelp: ?*foundation.String) void {
        return objc.msgSend(_self, "setAccessibilityHelp:", void, .{_accessibilityHelp});
    }

    pub fn accessibilityFilename(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "accessibilityFilename", ?*foundation.String, .{});
    }

    pub fn setAccessibilityFilename(_self: *@This(), _accessibilityFilename: ?*foundation.String) void {
        return objc.msgSend(_self, "setAccessibilityFilename:", void, .{_accessibilityFilename});
    }

    pub fn isAccessibilityExpanded(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isAccessibilityExpanded", objc.BOOL, .{});
    }

    pub fn setAccessibilityExpanded(_self: *@This(), _accessibilityExpanded: objc.BOOL) void {
        return objc.msgSend(_self, "setAccessibilityExpanded:", void, .{_accessibilityExpanded});
    }

    pub fn isAccessibilityEdited(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isAccessibilityEdited", objc.BOOL, .{});
    }

    pub fn setAccessibilityEdited(_self: *@This(), _accessibilityEdited: objc.BOOL) void {
        return objc.msgSend(_self, "setAccessibilityEdited:", void, .{_accessibilityEdited});
    }

    pub fn isAccessibilityEnabled(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isAccessibilityEnabled", objc.BOOL, .{});
    }

    pub fn setAccessibilityEnabled(_self: *@This(), _accessibilityEnabled: objc.BOOL) void {
        return objc.msgSend(_self, "setAccessibilityEnabled:", void, .{_accessibilityEnabled});
    }

    pub fn accessibilityChildren(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilityChildren", ?*foundation.Array, .{});
    }

    pub fn setAccessibilityChildren(_self: *@This(), _accessibilityChildren: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilityChildren:", void, .{_accessibilityChildren});
    }

    pub fn accessibilityChildrenInNavigationOrder(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "accessibilityChildrenInNavigationOrder", ?*anyopaque, .{});
    }

    pub fn setAccessibilityChildrenInNavigationOrder(_self: *@This(), _accessibilityChildrenInNavigationOrder: ?*anyopaque) void {
        return objc.msgSend(_self, "setAccessibilityChildrenInNavigationOrder:", void, .{_accessibilityChildrenInNavigationOrder});
    }

    pub fn accessibilityClearButton(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityClearButton", ?objc.Id, .{});
    }

    pub fn setAccessibilityClearButton(_self: *@This(), _accessibilityClearButton: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityClearButton:", void, .{_accessibilityClearButton});
    }

    pub fn accessibilityCancelButton(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityCancelButton", ?objc.Id, .{});
    }

    pub fn setAccessibilityCancelButton(_self: *@This(), _accessibilityCancelButton: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityCancelButton:", void, .{_accessibilityCancelButton});
    }

    pub fn isAccessibilityProtectedContent(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isAccessibilityProtectedContent", objc.BOOL, .{});
    }

    pub fn setAccessibilityProtectedContent(_self: *@This(), _accessibilityProtectedContent: objc.BOOL) void {
        return objc.msgSend(_self, "setAccessibilityProtectedContent:", void, .{_accessibilityProtectedContent});
    }

    pub fn accessibilityContents(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilityContents", ?*foundation.Array, .{});
    }

    pub fn setAccessibilityContents(_self: *@This(), _accessibilityContents: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilityContents:", void, .{_accessibilityContents});
    }

    pub fn accessibilityLabel(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "accessibilityLabel", ?*foundation.String, .{});
    }

    pub fn setAccessibilityLabel(_self: *@This(), _accessibilityLabel: ?*foundation.String) void {
        return objc.msgSend(_self, "setAccessibilityLabel:", void, .{_accessibilityLabel});
    }

    pub fn isAccessibilityAlternateUIVisible(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isAccessibilityAlternateUIVisible", objc.BOOL, .{});
    }

    pub fn setAccessibilityAlternateUIVisible(_self: *@This(), _accessibilityAlternateUIVisible: objc.BOOL) void {
        return objc.msgSend(_self, "setAccessibilityAlternateUIVisible:", void, .{_accessibilityAlternateUIVisible});
    }

    pub fn accessibilitySharedFocusElements(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilitySharedFocusElements", ?*foundation.Array, .{});
    }

    pub fn setAccessibilitySharedFocusElements(_self: *@This(), _accessibilitySharedFocusElements: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilitySharedFocusElements:", void, .{_accessibilitySharedFocusElements});
    }

    pub fn isAccessibilityRequired(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isAccessibilityRequired", objc.BOOL, .{});
    }

    pub fn setAccessibilityRequired(_self: *@This(), _accessibilityRequired: objc.BOOL) void {
        return objc.msgSend(_self, "setAccessibilityRequired:", void, .{_accessibilityRequired});
    }

    pub fn accessibilityCustomRotors(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "accessibilityCustomRotors", ?*anyopaque, .{});
    }

    pub fn setAccessibilityCustomRotors(_self: *@This(), _accessibilityCustomRotors: ?*anyopaque) void {
        return objc.msgSend(_self, "setAccessibilityCustomRotors:", void, .{_accessibilityCustomRotors});
    }

    pub fn accessibilityUserInputLabels(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "accessibilityUserInputLabels", ?*anyopaque, .{});
    }

    pub fn setAccessibilityUserInputLabels(_self: *@This(), _accessibilityUserInputLabels: ?*anyopaque) void {
        return objc.msgSend(_self, "setAccessibilityUserInputLabels:", void, .{_accessibilityUserInputLabels});
    }

    pub fn accessibilityAttributedUserInputLabels(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "accessibilityAttributedUserInputLabels", ?*anyopaque, .{});
    }

    pub fn setAccessibilityAttributedUserInputLabels(_self: *@This(), _accessibilityAttributedUserInputLabels: ?*anyopaque) void {
        return objc.msgSend(_self, "setAccessibilityAttributedUserInputLabels:", void, .{_accessibilityAttributedUserInputLabels});
    }

    pub fn accessibilityApplicationFocusedUIElement(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityApplicationFocusedUIElement", ?objc.Id, .{});
    }

    pub fn setAccessibilityApplicationFocusedUIElement(_self: *@This(), _accessibilityApplicationFocusedUIElement: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityApplicationFocusedUIElement:", void, .{_accessibilityApplicationFocusedUIElement});
    }

    pub fn accessibilityMainWindow(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityMainWindow", ?objc.Id, .{});
    }

    pub fn setAccessibilityMainWindow(_self: *@This(), _accessibilityMainWindow: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityMainWindow:", void, .{_accessibilityMainWindow});
    }

    pub fn isAccessibilityHidden(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isAccessibilityHidden", objc.BOOL, .{});
    }

    pub fn setAccessibilityHidden(_self: *@This(), _accessibilityHidden: objc.BOOL) void {
        return objc.msgSend(_self, "setAccessibilityHidden:", void, .{_accessibilityHidden});
    }

    pub fn isAccessibilityFrontmost(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isAccessibilityFrontmost", objc.BOOL, .{});
    }

    pub fn setAccessibilityFrontmost(_self: *@This(), _accessibilityFrontmost: objc.BOOL) void {
        return objc.msgSend(_self, "setAccessibilityFrontmost:", void, .{_accessibilityFrontmost});
    }

    pub fn accessibilityFocusedWindow(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityFocusedWindow", ?objc.Id, .{});
    }

    pub fn setAccessibilityFocusedWindow(_self: *@This(), _accessibilityFocusedWindow: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityFocusedWindow:", void, .{_accessibilityFocusedWindow});
    }

    pub fn accessibilityWindows(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilityWindows", ?*foundation.Array, .{});
    }

    pub fn setAccessibilityWindows(_self: *@This(), _accessibilityWindows: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilityWindows:", void, .{_accessibilityWindows});
    }

    pub fn accessibilityExtrasMenuBar(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityExtrasMenuBar", ?objc.Id, .{});
    }

    pub fn setAccessibilityExtrasMenuBar(_self: *@This(), _accessibilityExtrasMenuBar: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityExtrasMenuBar:", void, .{_accessibilityExtrasMenuBar});
    }

    pub fn accessibilityMenuBar(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityMenuBar", ?objc.Id, .{});
    }

    pub fn setAccessibilityMenuBar(_self: *@This(), _accessibilityMenuBar: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityMenuBar:", void, .{_accessibilityMenuBar});
    }

    pub fn accessibilityColumnTitles(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilityColumnTitles", ?*foundation.Array, .{});
    }

    pub fn setAccessibilityColumnTitles(_self: *@This(), _accessibilityColumnTitles: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilityColumnTitles:", void, .{_accessibilityColumnTitles});
    }

    pub fn isAccessibilityOrderedByRow(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isAccessibilityOrderedByRow", objc.BOOL, .{});
    }

    pub fn setAccessibilityOrderedByRow(_self: *@This(), _accessibilityOrderedByRow: objc.BOOL) void {
        return objc.msgSend(_self, "setAccessibilityOrderedByRow:", void, .{_accessibilityOrderedByRow});
    }

    pub fn accessibilityHorizontalUnits(_self: *@This()) app_kit.AccessibilityUnits {
        return objc.msgSend(_self, "accessibilityHorizontalUnits", app_kit.AccessibilityUnits, .{});
    }

    pub fn setAccessibilityHorizontalUnits(_self: *@This(), _accessibilityHorizontalUnits: app_kit.AccessibilityUnits) void {
        return objc.msgSend(_self, "setAccessibilityHorizontalUnits:", void, .{_accessibilityHorizontalUnits});
    }

    pub fn accessibilityVerticalUnits(_self: *@This()) app_kit.AccessibilityUnits {
        return objc.msgSend(_self, "accessibilityVerticalUnits", app_kit.AccessibilityUnits, .{});
    }

    pub fn setAccessibilityVerticalUnits(_self: *@This(), _accessibilityVerticalUnits: app_kit.AccessibilityUnits) void {
        return objc.msgSend(_self, "setAccessibilityVerticalUnits:", void, .{_accessibilityVerticalUnits});
    }

    pub fn accessibilityHorizontalUnitDescription(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "accessibilityHorizontalUnitDescription", ?*foundation.String, .{});
    }

    pub fn setAccessibilityHorizontalUnitDescription(_self: *@This(), _accessibilityHorizontalUnitDescription: ?*foundation.String) void {
        return objc.msgSend(_self, "setAccessibilityHorizontalUnitDescription:", void, .{_accessibilityHorizontalUnitDescription});
    }

    pub fn accessibilityVerticalUnitDescription(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "accessibilityVerticalUnitDescription", ?*foundation.String, .{});
    }

    pub fn setAccessibilityVerticalUnitDescription(_self: *@This(), _accessibilityVerticalUnitDescription: ?*foundation.String) void {
        return objc.msgSend(_self, "setAccessibilityVerticalUnitDescription:", void, .{_accessibilityVerticalUnitDescription});
    }

    pub fn accessibilityHandles(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilityHandles", ?*foundation.Array, .{});
    }

    pub fn setAccessibilityHandles(_self: *@This(), _accessibilityHandles: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilityHandles:", void, .{_accessibilityHandles});
    }

    pub fn accessibilityWarningValue(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityWarningValue", ?objc.Id, .{});
    }

    pub fn setAccessibilityWarningValue(_self: *@This(), _accessibilityWarningValue: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityWarningValue:", void, .{_accessibilityWarningValue});
    }

    pub fn accessibilityCriticalValue(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityCriticalValue", ?objc.Id, .{});
    }

    pub fn setAccessibilityCriticalValue(_self: *@This(), _accessibilityCriticalValue: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityCriticalValue:", void, .{_accessibilityCriticalValue});
    }

    pub fn isAccessibilityDisclosed(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isAccessibilityDisclosed", objc.BOOL, .{});
    }

    pub fn setAccessibilityDisclosed(_self: *@This(), _accessibilityDisclosed: objc.BOOL) void {
        return objc.msgSend(_self, "setAccessibilityDisclosed:", void, .{_accessibilityDisclosed});
    }

    pub fn accessibilityDisclosedByRow(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityDisclosedByRow", ?objc.Id, .{});
    }

    pub fn setAccessibilityDisclosedByRow(_self: *@This(), _accessibilityDisclosedByRow: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityDisclosedByRow:", void, .{_accessibilityDisclosedByRow});
    }

    pub fn accessibilityDisclosedRows(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityDisclosedRows", ?objc.Id, .{});
    }

    pub fn setAccessibilityDisclosedRows(_self: *@This(), _accessibilityDisclosedRows: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityDisclosedRows:", void, .{_accessibilityDisclosedRows});
    }

    pub fn accessibilityDisclosureLevel(_self: *@This()) objc.NSInteger {
        return objc.msgSend(_self, "accessibilityDisclosureLevel", objc.NSInteger, .{});
    }

    pub fn setAccessibilityDisclosureLevel(_self: *@This(), _accessibilityDisclosureLevel: objc.NSInteger) void {
        return objc.msgSend(_self, "setAccessibilityDisclosureLevel:", void, .{_accessibilityDisclosureLevel});
    }

    pub fn accessibilityMarkerUIElements(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilityMarkerUIElements", ?*foundation.Array, .{});
    }

    pub fn setAccessibilityMarkerUIElements(_self: *@This(), _accessibilityMarkerUIElements: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilityMarkerUIElements:", void, .{_accessibilityMarkerUIElements});
    }

    pub fn accessibilityMarkerValues(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityMarkerValues", ?objc.Id, .{});
    }

    pub fn setAccessibilityMarkerValues(_self: *@This(), _accessibilityMarkerValues: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityMarkerValues:", void, .{_accessibilityMarkerValues});
    }

    pub fn accessibilityMarkerGroupUIElement(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityMarkerGroupUIElement", ?objc.Id, .{});
    }

    pub fn setAccessibilityMarkerGroupUIElement(_self: *@This(), _accessibilityMarkerGroupUIElement: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityMarkerGroupUIElement:", void, .{_accessibilityMarkerGroupUIElement});
    }

    pub fn accessibilityUnits(_self: *@This()) app_kit.AccessibilityUnits {
        return objc.msgSend(_self, "accessibilityUnits", app_kit.AccessibilityUnits, .{});
    }

    pub fn setAccessibilityUnits(_self: *@This(), _accessibilityUnits: app_kit.AccessibilityUnits) void {
        return objc.msgSend(_self, "setAccessibilityUnits:", void, .{_accessibilityUnits});
    }

    pub fn accessibilityUnitDescription(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "accessibilityUnitDescription", ?*foundation.String, .{});
    }

    pub fn setAccessibilityUnitDescription(_self: *@This(), _accessibilityUnitDescription: ?*foundation.String) void {
        return objc.msgSend(_self, "setAccessibilityUnitDescription:", void, .{_accessibilityUnitDescription});
    }

    pub fn accessibilityRulerMarkerType(_self: *@This()) app_kit.AccessibilityRulerMarkerType {
        return objc.msgSend(_self, "accessibilityRulerMarkerType", app_kit.AccessibilityRulerMarkerType, .{});
    }

    pub fn setAccessibilityRulerMarkerType(_self: *@This(), _accessibilityRulerMarkerType: app_kit.AccessibilityRulerMarkerType) void {
        return objc.msgSend(_self, "setAccessibilityRulerMarkerType:", void, .{_accessibilityRulerMarkerType});
    }

    pub fn accessibilityMarkerTypeDescription(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "accessibilityMarkerTypeDescription", ?*foundation.String, .{});
    }

    pub fn setAccessibilityMarkerTypeDescription(_self: *@This(), _accessibilityMarkerTypeDescription: ?*foundation.String) void {
        return objc.msgSend(_self, "setAccessibilityMarkerTypeDescription:", void, .{_accessibilityMarkerTypeDescription});
    }

    pub fn accessibilityHorizontalScrollBar(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityHorizontalScrollBar", ?objc.Id, .{});
    }

    pub fn setAccessibilityHorizontalScrollBar(_self: *@This(), _accessibilityHorizontalScrollBar: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityHorizontalScrollBar:", void, .{_accessibilityHorizontalScrollBar});
    }

    pub fn accessibilityVerticalScrollBar(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityVerticalScrollBar", ?objc.Id, .{});
    }

    pub fn setAccessibilityVerticalScrollBar(_self: *@This(), _accessibilityVerticalScrollBar: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityVerticalScrollBar:", void, .{_accessibilityVerticalScrollBar});
    }

    pub fn accessibilityAllowedValues(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "accessibilityAllowedValues", ?*anyopaque, .{});
    }

    pub fn setAccessibilityAllowedValues(_self: *@This(), _accessibilityAllowedValues: ?*anyopaque) void {
        return objc.msgSend(_self, "setAccessibilityAllowedValues:", void, .{_accessibilityAllowedValues});
    }

    pub fn accessibilityLabelUIElements(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilityLabelUIElements", ?*foundation.Array, .{});
    }

    pub fn setAccessibilityLabelUIElements(_self: *@This(), _accessibilityLabelUIElements: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilityLabelUIElements:", void, .{_accessibilityLabelUIElements});
    }

    pub fn accessibilityLabelValue(_self: *@This()) f32 {
        return objc.msgSend(_self, "accessibilityLabelValue", f32, .{});
    }

    pub fn setAccessibilityLabelValue(_self: *@This(), _accessibilityLabelValue: f32) void {
        return objc.msgSend(_self, "setAccessibilityLabelValue:", void, .{_accessibilityLabelValue});
    }

    pub fn accessibilitySplitters(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilitySplitters", ?*foundation.Array, .{});
    }

    pub fn setAccessibilitySplitters(_self: *@This(), _accessibilitySplitters: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilitySplitters:", void, .{_accessibilitySplitters});
    }

    pub fn accessibilityDecrementButton(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityDecrementButton", ?objc.Id, .{});
    }

    pub fn setAccessibilityDecrementButton(_self: *@This(), _accessibilityDecrementButton: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityDecrementButton:", void, .{_accessibilityDecrementButton});
    }

    pub fn accessibilityIncrementButton(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityIncrementButton", ?objc.Id, .{});
    }

    pub fn setAccessibilityIncrementButton(_self: *@This(), _accessibilityIncrementButton: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityIncrementButton:", void, .{_accessibilityIncrementButton});
    }

    pub fn accessibilityTabs(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilityTabs", ?*foundation.Array, .{});
    }

    pub fn setAccessibilityTabs(_self: *@This(), _accessibilityTabs: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilityTabs:", void, .{_accessibilityTabs});
    }

    pub fn accessibilityHeader(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityHeader", ?objc.Id, .{});
    }

    pub fn setAccessibilityHeader(_self: *@This(), _accessibilityHeader: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityHeader:", void, .{_accessibilityHeader});
    }

    pub fn accessibilityColumnCount(_self: *@This()) objc.NSInteger {
        return objc.msgSend(_self, "accessibilityColumnCount", objc.NSInteger, .{});
    }

    pub fn setAccessibilityColumnCount(_self: *@This(), _accessibilityColumnCount: objc.NSInteger) void {
        return objc.msgSend(_self, "setAccessibilityColumnCount:", void, .{_accessibilityColumnCount});
    }

    pub fn accessibilityRowCount(_self: *@This()) objc.NSInteger {
        return objc.msgSend(_self, "accessibilityRowCount", objc.NSInteger, .{});
    }

    pub fn setAccessibilityRowCount(_self: *@This(), _accessibilityRowCount: objc.NSInteger) void {
        return objc.msgSend(_self, "setAccessibilityRowCount:", void, .{_accessibilityRowCount});
    }

    pub fn accessibilityIndex(_self: *@This()) objc.NSInteger {
        return objc.msgSend(_self, "accessibilityIndex", objc.NSInteger, .{});
    }

    pub fn setAccessibilityIndex(_self: *@This(), _accessibilityIndex: objc.NSInteger) void {
        return objc.msgSend(_self, "setAccessibilityIndex:", void, .{_accessibilityIndex});
    }

    pub fn accessibilityColumns(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilityColumns", ?*foundation.Array, .{});
    }

    pub fn setAccessibilityColumns(_self: *@This(), _accessibilityColumns: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilityColumns:", void, .{_accessibilityColumns});
    }

    pub fn accessibilityRows(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilityRows", ?*foundation.Array, .{});
    }

    pub fn setAccessibilityRows(_self: *@This(), _accessibilityRows: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilityRows:", void, .{_accessibilityRows});
    }

    pub fn accessibilityVisibleRows(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilityVisibleRows", ?*foundation.Array, .{});
    }

    pub fn setAccessibilityVisibleRows(_self: *@This(), _accessibilityVisibleRows: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilityVisibleRows:", void, .{_accessibilityVisibleRows});
    }

    pub fn accessibilitySelectedRows(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilitySelectedRows", ?*foundation.Array, .{});
    }

    pub fn setAccessibilitySelectedRows(_self: *@This(), _accessibilitySelectedRows: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilitySelectedRows:", void, .{_accessibilitySelectedRows});
    }

    pub fn accessibilityVisibleColumns(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilityVisibleColumns", ?*foundation.Array, .{});
    }

    pub fn setAccessibilityVisibleColumns(_self: *@This(), _accessibilityVisibleColumns: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilityVisibleColumns:", void, .{_accessibilityVisibleColumns});
    }

    pub fn accessibilitySelectedColumns(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilitySelectedColumns", ?*foundation.Array, .{});
    }

    pub fn setAccessibilitySelectedColumns(_self: *@This(), _accessibilitySelectedColumns: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilitySelectedColumns:", void, .{_accessibilitySelectedColumns});
    }

    pub fn accessibilitySortDirection(_self: *@This()) app_kit.AccessibilitySortDirection {
        return objc.msgSend(_self, "accessibilitySortDirection", app_kit.AccessibilitySortDirection, .{});
    }

    pub fn setAccessibilitySortDirection(_self: *@This(), _accessibilitySortDirection: app_kit.AccessibilitySortDirection) void {
        return objc.msgSend(_self, "setAccessibilitySortDirection:", void, .{_accessibilitySortDirection});
    }

    pub fn accessibilityRowHeaderUIElements(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilityRowHeaderUIElements", ?*foundation.Array, .{});
    }

    pub fn setAccessibilityRowHeaderUIElements(_self: *@This(), _accessibilityRowHeaderUIElements: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilityRowHeaderUIElements:", void, .{_accessibilityRowHeaderUIElements});
    }

    pub fn accessibilitySelectedCells(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilitySelectedCells", ?*foundation.Array, .{});
    }

    pub fn setAccessibilitySelectedCells(_self: *@This(), _accessibilitySelectedCells: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilitySelectedCells:", void, .{_accessibilitySelectedCells});
    }

    pub fn accessibilityVisibleCells(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilityVisibleCells", ?*foundation.Array, .{});
    }

    pub fn setAccessibilityVisibleCells(_self: *@This(), _accessibilityVisibleCells: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilityVisibleCells:", void, .{_accessibilityVisibleCells});
    }

    pub fn accessibilityColumnHeaderUIElements(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilityColumnHeaderUIElements", ?*foundation.Array, .{});
    }

    pub fn setAccessibilityColumnHeaderUIElements(_self: *@This(), _accessibilityColumnHeaderUIElements: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilityColumnHeaderUIElements:", void, .{_accessibilityColumnHeaderUIElements});
    }

    pub fn accessibilityRowIndexRange(_self: *@This()) foundation.Range {
        return objc.msgSend(_self, "accessibilityRowIndexRange", foundation.Range, .{});
    }

    pub fn setAccessibilityRowIndexRange(_self: *@This(), _accessibilityRowIndexRange: foundation.Range) void {
        return objc.msgSend(_self, "setAccessibilityRowIndexRange:", void, .{_accessibilityRowIndexRange});
    }

    pub fn accessibilityColumnIndexRange(_self: *@This()) foundation.Range {
        return objc.msgSend(_self, "accessibilityColumnIndexRange", foundation.Range, .{});
    }

    pub fn setAccessibilityColumnIndexRange(_self: *@This(), _accessibilityColumnIndexRange: foundation.Range) void {
        return objc.msgSend(_self, "setAccessibilityColumnIndexRange:", void, .{_accessibilityColumnIndexRange});
    }

    pub fn accessibilityInsertionPointLineNumber(_self: *@This()) objc.NSInteger {
        return objc.msgSend(_self, "accessibilityInsertionPointLineNumber", objc.NSInteger, .{});
    }

    pub fn setAccessibilityInsertionPointLineNumber(_self: *@This(), _accessibilityInsertionPointLineNumber: objc.NSInteger) void {
        return objc.msgSend(_self, "setAccessibilityInsertionPointLineNumber:", void, .{_accessibilityInsertionPointLineNumber});
    }

    pub fn accessibilitySharedCharacterRange(_self: *@This()) foundation.Range {
        return objc.msgSend(_self, "accessibilitySharedCharacterRange", foundation.Range, .{});
    }

    pub fn setAccessibilitySharedCharacterRange(_self: *@This(), _accessibilitySharedCharacterRange: foundation.Range) void {
        return objc.msgSend(_self, "setAccessibilitySharedCharacterRange:", void, .{_accessibilitySharedCharacterRange});
    }

    pub fn accessibilitySharedTextUIElements(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilitySharedTextUIElements", ?*foundation.Array, .{});
    }

    pub fn setAccessibilitySharedTextUIElements(_self: *@This(), _accessibilitySharedTextUIElements: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilitySharedTextUIElements:", void, .{_accessibilitySharedTextUIElements});
    }

    pub fn accessibilityVisibleCharacterRange(_self: *@This()) foundation.Range {
        return objc.msgSend(_self, "accessibilityVisibleCharacterRange", foundation.Range, .{});
    }

    pub fn setAccessibilityVisibleCharacterRange(_self: *@This(), _accessibilityVisibleCharacterRange: foundation.Range) void {
        return objc.msgSend(_self, "setAccessibilityVisibleCharacterRange:", void, .{_accessibilityVisibleCharacterRange});
    }

    pub fn accessibilityNumberOfCharacters(_self: *@This()) objc.NSInteger {
        return objc.msgSend(_self, "accessibilityNumberOfCharacters", objc.NSInteger, .{});
    }

    pub fn setAccessibilityNumberOfCharacters(_self: *@This(), _accessibilityNumberOfCharacters: objc.NSInteger) void {
        return objc.msgSend(_self, "setAccessibilityNumberOfCharacters:", void, .{_accessibilityNumberOfCharacters});
    }

    pub fn accessibilitySelectedText(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "accessibilitySelectedText", ?*foundation.String, .{});
    }

    pub fn setAccessibilitySelectedText(_self: *@This(), _accessibilitySelectedText: ?*foundation.String) void {
        return objc.msgSend(_self, "setAccessibilitySelectedText:", void, .{_accessibilitySelectedText});
    }

    pub fn accessibilitySelectedTextRange(_self: *@This()) foundation.Range {
        return objc.msgSend(_self, "accessibilitySelectedTextRange", foundation.Range, .{});
    }

    pub fn setAccessibilitySelectedTextRange(_self: *@This(), _accessibilitySelectedTextRange: foundation.Range) void {
        return objc.msgSend(_self, "setAccessibilitySelectedTextRange:", void, .{_accessibilitySelectedTextRange});
    }

    pub fn accessibilitySelectedTextRanges(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "accessibilitySelectedTextRanges", ?*anyopaque, .{});
    }

    pub fn setAccessibilitySelectedTextRanges(_self: *@This(), _accessibilitySelectedTextRanges: ?*anyopaque) void {
        return objc.msgSend(_self, "setAccessibilitySelectedTextRanges:", void, .{_accessibilitySelectedTextRanges});
    }

    pub fn accessibilityToolbarButton(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityToolbarButton", ?objc.Id, .{});
    }

    pub fn setAccessibilityToolbarButton(_self: *@This(), _accessibilityToolbarButton: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityToolbarButton:", void, .{_accessibilityToolbarButton});
    }

    pub fn isAccessibilityModal(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isAccessibilityModal", objc.BOOL, .{});
    }

    pub fn setAccessibilityModal(_self: *@This(), _accessibilityModal: objc.BOOL) void {
        return objc.msgSend(_self, "setAccessibilityModal:", void, .{_accessibilityModal});
    }

    pub fn accessibilityProxy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityProxy", ?objc.Id, .{});
    }

    pub fn setAccessibilityProxy(_self: *@This(), _accessibilityProxy: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityProxy:", void, .{_accessibilityProxy});
    }

    pub fn isAccessibilityMain(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isAccessibilityMain", objc.BOOL, .{});
    }

    pub fn setAccessibilityMain(_self: *@This(), _accessibilityMain: objc.BOOL) void {
        return objc.msgSend(_self, "setAccessibilityMain:", void, .{_accessibilityMain});
    }

    pub fn accessibilityFullScreenButton(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityFullScreenButton", ?objc.Id, .{});
    }

    pub fn setAccessibilityFullScreenButton(_self: *@This(), _accessibilityFullScreenButton: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityFullScreenButton:", void, .{_accessibilityFullScreenButton});
    }

    pub fn accessibilityGrowArea(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityGrowArea", ?objc.Id, .{});
    }

    pub fn setAccessibilityGrowArea(_self: *@This(), _accessibilityGrowArea: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityGrowArea:", void, .{_accessibilityGrowArea});
    }

    pub fn accessibilityDocument(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "accessibilityDocument", ?*foundation.String, .{});
    }

    pub fn setAccessibilityDocument(_self: *@This(), _accessibilityDocument: ?*foundation.String) void {
        return objc.msgSend(_self, "setAccessibilityDocument:", void, .{_accessibilityDocument});
    }

    pub fn accessibilityDefaultButton(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityDefaultButton", ?objc.Id, .{});
    }

    pub fn setAccessibilityDefaultButton(_self: *@This(), _accessibilityDefaultButton: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityDefaultButton:", void, .{_accessibilityDefaultButton});
    }

    pub fn accessibilityCloseButton(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityCloseButton", ?objc.Id, .{});
    }

    pub fn setAccessibilityCloseButton(_self: *@This(), _accessibilityCloseButton: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityCloseButton:", void, .{_accessibilityCloseButton});
    }

    pub fn accessibilityZoomButton(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityZoomButton", ?objc.Id, .{});
    }

    pub fn setAccessibilityZoomButton(_self: *@This(), _accessibilityZoomButton: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityZoomButton:", void, .{_accessibilityZoomButton});
    }

    pub fn accessibilityMinimizeButton(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityMinimizeButton", ?objc.Id, .{});
    }

    pub fn setAccessibilityMinimizeButton(_self: *@This(), _accessibilityMinimizeButton: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityMinimizeButton:", void, .{_accessibilityMinimizeButton});
    }

    pub fn isAccessibilityMinimized(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isAccessibilityMinimized", objc.BOOL, .{});
    }

    pub fn setAccessibilityMinimized(_self: *@This(), _accessibilityMinimized: objc.BOOL) void {
        return objc.msgSend(_self, "setAccessibilityMinimized:", void, .{_accessibilityMinimized});
    }

    pub fn accessibilityCustomActions(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "accessibilityCustomActions", ?*anyopaque, .{});
    }

    pub fn setAccessibilityCustomActions(_self: *@This(), _accessibilityCustomActions: ?*anyopaque) void {
        return objc.msgSend(_self, "setAccessibilityCustomActions:", void, .{_accessibilityCustomActions});
    }

    pub fn initWithFrame(_self: *@This(), _frameRect: foundation.Rect) *@This() {
        return objc.msgSend(_self, "initWithFrame:", *@This(), .{_frameRect});
    }

    pub fn isDescendantOf(_self: *@This(), _view: ?*app_kit.View) objc.BOOL {
        return objc.msgSend(_self, "isDescendantOf:", objc.BOOL, .{_view});
    }

    pub fn ancestorSharedWithView(_self: *@This(), _view: ?*app_kit.View) ?*app_kit.View {
        return objc.msgSend(_self, "ancestorSharedWithView:", ?*app_kit.View, .{_view});
    }

    pub fn getRectsBeingDrawnCount(_self: *@This(), _rects: ?*?*foundation.Rect, _count: ?*objc.NSInteger) void {
        return objc.msgSend(_self, "getRectsBeingDrawn:count:", void, .{ _rects, _count });
    }

    pub fn needsToDrawRect(_self: *@This(), _rect: foundation.Rect) objc.BOOL {
        return objc.msgSend(_self, "needsToDrawRect:", objc.BOOL, .{_rect});
    }

    pub fn viewDidHide(_self: *@This()) void {
        return objc.msgSend(_self, "viewDidHide", void, .{});
    }

    pub fn viewDidUnhide(_self: *@This()) void {
        return objc.msgSend(_self, "viewDidUnhide", void, .{});
    }

    pub fn addSubview(_self: *@This(), _view: ?*app_kit.View) void {
        return objc.msgSend(_self, "addSubview:", void, .{_view});
    }

    pub fn addSubviewPositionedRelativeTo(_self: *@This(), _view: ?*app_kit.View, _place: app_kit.WindowOrderingMode, _otherView: ?*app_kit.View) void {
        return objc.msgSend(_self, "addSubview:positioned:relativeTo:", void, .{ _view, _place, _otherView });
    }

    pub fn sortSubviewsUsingFunctionContext(_self: *@This(), _compare: ?*const fn (?*anyopaque, ?*anyopaque, ?*anyopaque) callconv(.C) foundation.ComparisonResult, _context: ?*anyopaque) void {
        return objc.msgSend(_self, "sortSubviewsUsingFunction:context:", void, .{ _compare, _context });
    }

    pub fn viewWillMoveToWindow(_self: *@This(), _newWindow: ?*app_kit.Window) void {
        return objc.msgSend(_self, "viewWillMoveToWindow:", void, .{_newWindow});
    }

    pub fn viewDidMoveToWindow(_self: *@This()) void {
        return objc.msgSend(_self, "viewDidMoveToWindow", void, .{});
    }

    pub fn viewWillMoveToSuperview(_self: *@This(), _newSuperview: ?*app_kit.View) void {
        return objc.msgSend(_self, "viewWillMoveToSuperview:", void, .{_newSuperview});
    }

    pub fn viewDidMoveToSuperview(_self: *@This()) void {
        return objc.msgSend(_self, "viewDidMoveToSuperview", void, .{});
    }

    pub fn didAddSubview(_self: *@This(), _subview: ?*app_kit.View) void {
        return objc.msgSend(_self, "didAddSubview:", void, .{_subview});
    }

    pub fn willRemoveSubview(_self: *@This(), _subview: ?*app_kit.View) void {
        return objc.msgSend(_self, "willRemoveSubview:", void, .{_subview});
    }

    pub fn removeFromSuperview(_self: *@This()) void {
        return objc.msgSend(_self, "removeFromSuperview", void, .{});
    }

    pub fn replaceSubviewWith(_self: *@This(), _oldView: ?*app_kit.View, _newView: ?*app_kit.View) void {
        return objc.msgSend(_self, "replaceSubview:with:", void, .{ _oldView, _newView });
    }

    pub fn removeFromSuperviewWithoutNeedingDisplay(_self: *@This()) void {
        return objc.msgSend(_self, "removeFromSuperviewWithoutNeedingDisplay", void, .{});
    }

    pub fn viewDidChangeBackingProperties(_self: *@This()) void {
        return objc.msgSend(_self, "viewDidChangeBackingProperties", void, .{});
    }

    pub fn resizeSubviewsWithOldSize(_self: *@This(), _oldSize: foundation.Size) void {
        return objc.msgSend(_self, "resizeSubviewsWithOldSize:", void, .{_oldSize});
    }

    pub fn resizeWithOldSuperviewSize(_self: *@This(), _oldSize: foundation.Size) void {
        return objc.msgSend(_self, "resizeWithOldSuperviewSize:", void, .{_oldSize});
    }

    pub fn setFrameOrigin(_self: *@This(), _newOrigin: foundation.Point) void {
        return objc.msgSend(_self, "setFrameOrigin:", void, .{_newOrigin});
    }

    pub fn setFrameSize(_self: *@This(), _newSize: foundation.Size) void {
        return objc.msgSend(_self, "setFrameSize:", void, .{_newSize});
    }

    pub fn setBoundsOrigin(_self: *@This(), _newOrigin: foundation.Point) void {
        return objc.msgSend(_self, "setBoundsOrigin:", void, .{_newOrigin});
    }

    pub fn setBoundsSize(_self: *@This(), _newSize: foundation.Size) void {
        return objc.msgSend(_self, "setBoundsSize:", void, .{_newSize});
    }

    pub fn translateOriginToPoint(_self: *@This(), _translation: foundation.Point) void {
        return objc.msgSend(_self, "translateOriginToPoint:", void, .{_translation});
    }

    pub fn scaleUnitSquareToSize(_self: *@This(), _newUnitSize: foundation.Size) void {
        return objc.msgSend(_self, "scaleUnitSquareToSize:", void, .{_newUnitSize});
    }

    pub fn rotateByAngle(_self: *@This(), _angle: core_foundation.CGFloat) void {
        return objc.msgSend(_self, "rotateByAngle:", void, .{_angle});
    }

    pub fn convertPointFromView(_self: *@This(), _point: foundation.Point, _view: ?*app_kit.View) foundation.Point {
        return objc.msgSend(_self, "convertPoint:fromView:", foundation.Point, .{ _point, _view });
    }

    pub fn convertPointToView(_self: *@This(), _point: foundation.Point, _view: ?*app_kit.View) foundation.Point {
        return objc.msgSend(_self, "convertPoint:toView:", foundation.Point, .{ _point, _view });
    }

    pub fn convertSizeFromView(_self: *@This(), _size: foundation.Size, _view: ?*app_kit.View) foundation.Size {
        return objc.msgSend(_self, "convertSize:fromView:", foundation.Size, .{ _size, _view });
    }

    pub fn convertSizeToView(_self: *@This(), _size: foundation.Size, _view: ?*app_kit.View) foundation.Size {
        return objc.msgSend(_self, "convertSize:toView:", foundation.Size, .{ _size, _view });
    }

    pub fn convertRectFromView(_self: *@This(), _rect: foundation.Rect, _view: ?*app_kit.View) foundation.Rect {
        return objc.msgSend(_self, "convertRect:fromView:", foundation.Rect, .{ _rect, _view });
    }

    pub fn convertRectToView(_self: *@This(), _rect: foundation.Rect, _view: ?*app_kit.View) foundation.Rect {
        return objc.msgSend(_self, "convertRect:toView:", foundation.Rect, .{ _rect, _view });
    }

    pub fn backingAlignedRectOptions(_self: *@This(), _rect: foundation.Rect, _options: foundation.AlignmentOptions) foundation.Rect {
        return objc.msgSend(_self, "backingAlignedRect:options:", foundation.Rect, .{ _rect, _options });
    }

    pub fn centerScanRect(_self: *@This(), _rect: foundation.Rect) foundation.Rect {
        return objc.msgSend(_self, "centerScanRect:", foundation.Rect, .{_rect});
    }

    pub fn convertPointToBacking(_self: *@This(), _point: foundation.Point) foundation.Point {
        return objc.msgSend(_self, "convertPointToBacking:", foundation.Point, .{_point});
    }

    pub fn convertPointFromBacking(_self: *@This(), _point: foundation.Point) foundation.Point {
        return objc.msgSend(_self, "convertPointFromBacking:", foundation.Point, .{_point});
    }

    pub fn convertSizeToBacking(_self: *@This(), _size: foundation.Size) foundation.Size {
        return objc.msgSend(_self, "convertSizeToBacking:", foundation.Size, .{_size});
    }

    pub fn convertSizeFromBacking(_self: *@This(), _size: foundation.Size) foundation.Size {
        return objc.msgSend(_self, "convertSizeFromBacking:", foundation.Size, .{_size});
    }

    pub fn convertRectToBacking(_self: *@This(), _rect: foundation.Rect) foundation.Rect {
        return objc.msgSend(_self, "convertRectToBacking:", foundation.Rect, .{_rect});
    }

    pub fn convertRectFromBacking(_self: *@This(), _rect: foundation.Rect) foundation.Rect {
        return objc.msgSend(_self, "convertRectFromBacking:", foundation.Rect, .{_rect});
    }

    pub fn convertPointToLayer(_self: *@This(), _point: foundation.Point) foundation.Point {
        return objc.msgSend(_self, "convertPointToLayer:", foundation.Point, .{_point});
    }

    pub fn convertPointFromLayer(_self: *@This(), _point: foundation.Point) foundation.Point {
        return objc.msgSend(_self, "convertPointFromLayer:", foundation.Point, .{_point});
    }

    pub fn convertSizeToLayer(_self: *@This(), _size: foundation.Size) foundation.Size {
        return objc.msgSend(_self, "convertSizeToLayer:", foundation.Size, .{_size});
    }

    pub fn convertSizeFromLayer(_self: *@This(), _size: foundation.Size) foundation.Size {
        return objc.msgSend(_self, "convertSizeFromLayer:", foundation.Size, .{_size});
    }

    pub fn convertRectToLayer(_self: *@This(), _rect: foundation.Rect) foundation.Rect {
        return objc.msgSend(_self, "convertRectToLayer:", foundation.Rect, .{_rect});
    }

    pub fn convertRectFromLayer(_self: *@This(), _rect: foundation.Rect) foundation.Rect {
        return objc.msgSend(_self, "convertRectFromLayer:", foundation.Rect, .{_rect});
    }

    pub fn setNeedsDisplayInRect(_self: *@This(), _invalidRect: foundation.Rect) void {
        return objc.msgSend(_self, "setNeedsDisplayInRect:", void, .{_invalidRect});
    }

    pub fn lockFocus(_self: *@This()) void {
        return objc.msgSend(_self, "lockFocus", void, .{});
    }

    pub fn unlockFocus(_self: *@This()) void {
        return objc.msgSend(_self, "unlockFocus", void, .{});
    }

    pub fn lockFocusIfCanDraw(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "lockFocusIfCanDraw", objc.BOOL, .{});
    }

    pub fn lockFocusIfCanDrawInContext(_self: *@This(), _context: ?*app_kit.GraphicsContext) objc.BOOL {
        return objc.msgSend(_self, "lockFocusIfCanDrawInContext:", objc.BOOL, .{_context});
    }

    pub fn display(_self: *@This()) void {
        return objc.msgSend(_self, "display", void, .{});
    }

    pub fn displayIfNeeded(_self: *@This()) void {
        return objc.msgSend(_self, "displayIfNeeded", void, .{});
    }

    pub fn displayIfNeededIgnoringOpacity(_self: *@This()) void {
        return objc.msgSend(_self, "displayIfNeededIgnoringOpacity", void, .{});
    }

    pub fn displayRect(_self: *@This(), _rect: foundation.Rect) void {
        return objc.msgSend(_self, "displayRect:", void, .{_rect});
    }

    pub fn displayIfNeededInRect(_self: *@This(), _rect: foundation.Rect) void {
        return objc.msgSend(_self, "displayIfNeededInRect:", void, .{_rect});
    }

    pub fn displayRectIgnoringOpacity(_self: *@This(), _rect: foundation.Rect) void {
        return objc.msgSend(_self, "displayRectIgnoringOpacity:", void, .{_rect});
    }

    pub fn displayIfNeededInRectIgnoringOpacity(_self: *@This(), _rect: foundation.Rect) void {
        return objc.msgSend(_self, "displayIfNeededInRectIgnoringOpacity:", void, .{_rect});
    }

    pub fn drawRect(_self: *@This(), _dirtyRect: foundation.Rect) void {
        return objc.msgSend(_self, "drawRect:", void, .{_dirtyRect});
    }

    pub fn displayRectIgnoringOpacityInContext(_self: *@This(), _rect: foundation.Rect, _context: ?*app_kit.GraphicsContext) void {
        return objc.msgSend(_self, "displayRectIgnoringOpacity:inContext:", void, .{ _rect, _context });
    }

    pub fn bitmapImageRepForCachingDisplayInRect(_self: *@This(), _rect: foundation.Rect) ?*app_kit.BitmapImageRep {
        return objc.msgSend(_self, "bitmapImageRepForCachingDisplayInRect:", ?*app_kit.BitmapImageRep, .{_rect});
    }

    pub fn cacheDisplayInRectToBitmapImageRep(_self: *@This(), _rect: foundation.Rect, _bitmapImageRep: ?*app_kit.BitmapImageRep) void {
        return objc.msgSend(_self, "cacheDisplayInRect:toBitmapImageRep:", void, .{ _rect, _bitmapImageRep });
    }

    pub fn viewWillDraw(_self: *@This()) void {
        return objc.msgSend(_self, "viewWillDraw", void, .{});
    }

    pub fn scrollPoint(_self: *@This(), _point: foundation.Point) void {
        return objc.msgSend(_self, "scrollPoint:", void, .{_point});
    }

    pub fn scrollRectToVisible(_self: *@This(), _rect: foundation.Rect) objc.BOOL {
        return objc.msgSend(_self, "scrollRectToVisible:", objc.BOOL, .{_rect});
    }

    pub fn autoscroll(_self: *@This(), _event: ?*app_kit.Event) objc.BOOL {
        return objc.msgSend(_self, "autoscroll:", objc.BOOL, .{_event});
    }

    pub fn adjustScroll(_self: *@This(), _newVisible: foundation.Rect) foundation.Rect {
        return objc.msgSend(_self, "adjustScroll:", foundation.Rect, .{_newVisible});
    }

    pub fn scrollRectBy(_self: *@This(), _rect: foundation.Rect, _delta: foundation.Size) void {
        return objc.msgSend(_self, "scrollRect:by:", void, .{ _rect, _delta });
    }

    pub fn translateRectsNeedingDisplayInRectBy(_self: *@This(), _clipRect: foundation.Rect, _delta: foundation.Size) void {
        return objc.msgSend(_self, "translateRectsNeedingDisplayInRect:by:", void, .{ _clipRect, _delta });
    }

    pub fn hitTest(_self: *@This(), _point: foundation.Point) ?*app_kit.View {
        return objc.msgSend(_self, "hitTest:", ?*app_kit.View, .{_point});
    }

    pub fn mouseInRect(_self: *@This(), _point: foundation.Point, _rect: foundation.Rect) objc.BOOL {
        return objc.msgSend(_self, "mouse:inRect:", objc.BOOL, .{ _point, _rect });
    }

    pub fn viewWithTag(_self: *@This(), _tag: objc.NSInteger) ?*anyopaque {
        return objc.msgSend(_self, "viewWithTag:", ?*anyopaque, .{_tag});
    }

    pub fn acceptsFirstMouse(_self: *@This(), _event: ?*app_kit.Event) objc.BOOL {
        return objc.msgSend(_self, "acceptsFirstMouse:", objc.BOOL, .{_event});
    }

    pub fn shouldDelayWindowOrderingForEvent(_self: *@This(), _event: ?*app_kit.Event) objc.BOOL {
        return objc.msgSend(_self, "shouldDelayWindowOrderingForEvent:", objc.BOOL, .{_event});
    }

    pub fn makeBackingLayer(_self: *@This()) ?*quartz_core.Layer {
        return objc.msgSend(_self, "makeBackingLayer", ?*quartz_core.Layer, .{});
    }

    pub fn updateLayer(_self: *@This()) void {
        return objc.msgSend(_self, "updateLayer", void, .{});
    }

    pub fn layoutSubtreeIfNeeded(_self: *@This()) void {
        return objc.msgSend(_self, "layoutSubtreeIfNeeded", void, .{});
    }

    pub fn layout(_self: *@This()) void {
        return objc.msgSend(_self, "layout", void, .{});
    }

    pub fn menuForEvent(_self: *@This(), _event: ?*app_kit.Event) ?*app_kit.Menu {
        return objc.msgSend(_self, "menuForEvent:", ?*app_kit.Menu, .{_event});
    }

    pub fn willOpenMenuWithEvent(_self: *@This(), _menu: ?*app_kit.Menu, _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "willOpenMenu:withEvent:", void, .{ _menu, _event });
    }

    pub fn didCloseMenuWithEvent(_self: *@This(), _menu: ?*app_kit.Menu, _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "didCloseMenu:withEvent:", void, .{ _menu, _event });
    }

    pub fn addToolTipRectOwnerUserData(_self: *@This(), _rect: foundation.Rect, _owner: ?objc.Id, _data: ?*anyopaque) app_kit.ToolTipTag {
        return objc.msgSend(_self, "addToolTipRect:owner:userData:", app_kit.ToolTipTag, .{ _rect, _owner, _data });
    }

    pub fn removeToolTip(_self: *@This(), _tag: app_kit.ToolTipTag) void {
        return objc.msgSend(_self, "removeToolTip:", void, .{_tag});
    }

    pub fn removeAllToolTips(_self: *@This()) void {
        return objc.msgSend(_self, "removeAllToolTips", void, .{});
    }

    pub fn viewWillStartLiveResize(_self: *@This()) void {
        return objc.msgSend(_self, "viewWillStartLiveResize", void, .{});
    }

    pub fn viewDidEndLiveResize(_self: *@This()) void {
        return objc.msgSend(_self, "viewDidEndLiveResize", void, .{});
    }

    pub fn getRectsExposedDuringLiveResizeCount(_self: *@This(), _exposedRects: ?*foundation.Rect, _count: ?*objc.NSInteger) void {
        return objc.msgSend(_self, "getRectsExposedDuringLiveResize:count:", void, .{ _exposedRects, _count });
    }

    pub fn rectForSmartMagnificationAtPointInRect(_self: *@This(), _location: foundation.Point, _visibleRect: foundation.Rect) foundation.Rect {
        return objc.msgSend(_self, "rectForSmartMagnificationAtPoint:inRect:", foundation.Rect, .{ _location, _visibleRect });
    }

    pub fn prepareForReuse(_self: *@This()) void {
        return objc.msgSend(_self, "prepareForReuse", void, .{});
    }

    pub fn prepareContentInRect(_self: *@This(), _rect: foundation.Rect) void {
        return objc.msgSend(_self, "prepareContentInRect:", void, .{_rect});
    }

    pub fn viewDidChangeEffectiveAppearance(_self: *@This()) void {
        return objc.msgSend(_self, "viewDidChangeEffectiveAppearance", void, .{});
    }

    pub fn window(_self: *@This()) ?*app_kit.Window {
        return objc.msgSend(_self, "window", ?*app_kit.Window, .{});
    }

    pub fn superview(_self: *@This()) ?*app_kit.View {
        return objc.msgSend(_self, "superview", ?*app_kit.View, .{});
    }

    pub fn subviews(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "subviews", ?*anyopaque, .{});
    }

    pub fn setSubviews(_self: *@This(), _subviews: ?*anyopaque) void {
        return objc.msgSend(_self, "setSubviews:", void, .{_subviews});
    }

    pub fn opaqueAncestor(_self: *@This()) ?*app_kit.View {
        return objc.msgSend(_self, "opaqueAncestor", ?*app_kit.View, .{});
    }

    pub fn isHidden(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isHidden", objc.BOOL, .{});
    }

    pub fn setHidden(_self: *@This(), _hidden: objc.BOOL) void {
        return objc.msgSend(_self, "setHidden:", void, .{_hidden});
    }

    pub fn isHiddenOrHasHiddenAncestor(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isHiddenOrHasHiddenAncestor", objc.BOOL, .{});
    }

    pub fn wantsDefaultClipping(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "wantsDefaultClipping", objc.BOOL, .{});
    }

    pub fn postsFrameChangedNotifications(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "postsFrameChangedNotifications", objc.BOOL, .{});
    }

    pub fn setPostsFrameChangedNotifications(_self: *@This(), _postsFrameChangedNotifications: objc.BOOL) void {
        return objc.msgSend(_self, "setPostsFrameChangedNotifications:", void, .{_postsFrameChangedNotifications});
    }

    pub fn autoresizesSubviews(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "autoresizesSubviews", objc.BOOL, .{});
    }

    pub fn setAutoresizesSubviews(_self: *@This(), _autoresizesSubviews: objc.BOOL) void {
        return objc.msgSend(_self, "setAutoresizesSubviews:", void, .{_autoresizesSubviews});
    }

    pub fn autoresizingMask(_self: *@This()) app_kit.AutoresizingMaskOptions {
        return objc.msgSend(_self, "autoresizingMask", app_kit.AutoresizingMaskOptions, .{});
    }

    pub fn setAutoresizingMask(_self: *@This(), _autoresizingMask: app_kit.AutoresizingMaskOptions) void {
        return objc.msgSend(_self, "setAutoresizingMask:", void, .{_autoresizingMask});
    }

    pub fn frame(_self: *@This()) foundation.Rect {
        return objc.msgSend(_self, "frame", foundation.Rect, .{});
    }

    pub fn setFrame(_self: *@This(), _frame: foundation.Rect) void {
        return objc.msgSend(_self, "setFrame:", void, .{_frame});
    }

    pub fn frameRotation(_self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(_self, "frameRotation", core_foundation.CGFloat, .{});
    }

    pub fn setFrameRotation(_self: *@This(), _frameRotation: core_foundation.CGFloat) void {
        return objc.msgSend(_self, "setFrameRotation:", void, .{_frameRotation});
    }

    pub fn frameCenterRotation(_self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(_self, "frameCenterRotation", core_foundation.CGFloat, .{});
    }

    pub fn setFrameCenterRotation(_self: *@This(), _frameCenterRotation: core_foundation.CGFloat) void {
        return objc.msgSend(_self, "setFrameCenterRotation:", void, .{_frameCenterRotation});
    }

    pub fn boundsRotation(_self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(_self, "boundsRotation", core_foundation.CGFloat, .{});
    }

    pub fn setBoundsRotation(_self: *@This(), _boundsRotation: core_foundation.CGFloat) void {
        return objc.msgSend(_self, "setBoundsRotation:", void, .{_boundsRotation});
    }

    pub fn bounds(_self: *@This()) foundation.Rect {
        return objc.msgSend(_self, "bounds", foundation.Rect, .{});
    }

    pub fn setBounds(_self: *@This(), _bounds: foundation.Rect) void {
        return objc.msgSend(_self, "setBounds:", void, .{_bounds});
    }

    pub fn isFlipped(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isFlipped", objc.BOOL, .{});
    }

    pub fn isRotatedFromBase(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isRotatedFromBase", objc.BOOL, .{});
    }

    pub fn isRotatedOrScaledFromBase(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isRotatedOrScaledFromBase", objc.BOOL, .{});
    }

    pub fn isOpaque(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isOpaque", objc.BOOL, .{});
    }

    pub fn canDrawConcurrently(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "canDrawConcurrently", objc.BOOL, .{});
    }

    pub fn setCanDrawConcurrently(_self: *@This(), _canDrawConcurrently: objc.BOOL) void {
        return objc.msgSend(_self, "setCanDrawConcurrently:", void, .{_canDrawConcurrently});
    }

    pub fn canDraw(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "canDraw", objc.BOOL, .{});
    }

    pub fn needsDisplay(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "needsDisplay", objc.BOOL, .{});
    }

    pub fn setNeedsDisplay(_self: *@This(), _needsDisplay: objc.BOOL) void {
        return objc.msgSend(_self, "setNeedsDisplay:", void, .{_needsDisplay});
    }

    pub fn focusView() ?*app_kit.View {
        return objc.msgSend(Internal.class(), "focusView", ?*app_kit.View, .{});
    }

    pub fn visibleRect(_self: *@This()) foundation.Rect {
        return objc.msgSend(_self, "visibleRect", foundation.Rect, .{});
    }

    pub fn tag(_self: *@This()) objc.NSInteger {
        return objc.msgSend(_self, "tag", objc.NSInteger, .{});
    }

    pub fn needsPanelToBecomeKey(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "needsPanelToBecomeKey", objc.BOOL, .{});
    }

    pub fn mouseDownCanMoveWindow(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "mouseDownCanMoveWindow", objc.BOOL, .{});
    }

    pub fn acceptsTouchEvents(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "acceptsTouchEvents", objc.BOOL, .{});
    }

    pub fn setAcceptsTouchEvents(_self: *@This(), _acceptsTouchEvents: objc.BOOL) void {
        return objc.msgSend(_self, "setAcceptsTouchEvents:", void, .{_acceptsTouchEvents});
    }

    pub fn wantsRestingTouches(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "wantsRestingTouches", objc.BOOL, .{});
    }

    pub fn setWantsRestingTouches(_self: *@This(), _wantsRestingTouches: objc.BOOL) void {
        return objc.msgSend(_self, "setWantsRestingTouches:", void, .{_wantsRestingTouches});
    }

    pub fn layerContentsRedrawPolicy(_self: *@This()) app_kit.ViewLayerContentsRedrawPolicy {
        return objc.msgSend(_self, "layerContentsRedrawPolicy", app_kit.ViewLayerContentsRedrawPolicy, .{});
    }

    pub fn setLayerContentsRedrawPolicy(_self: *@This(), _layerContentsRedrawPolicy: app_kit.ViewLayerContentsRedrawPolicy) void {
        return objc.msgSend(_self, "setLayerContentsRedrawPolicy:", void, .{_layerContentsRedrawPolicy});
    }

    pub fn layerContentsPlacement(_self: *@This()) app_kit.ViewLayerContentsPlacement {
        return objc.msgSend(_self, "layerContentsPlacement", app_kit.ViewLayerContentsPlacement, .{});
    }

    pub fn setLayerContentsPlacement(_self: *@This(), _layerContentsPlacement: app_kit.ViewLayerContentsPlacement) void {
        return objc.msgSend(_self, "setLayerContentsPlacement:", void, .{_layerContentsPlacement});
    }

    pub fn wantsLayer(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "wantsLayer", objc.BOOL, .{});
    }

    pub fn setWantsLayer(_self: *@This(), _wantsLayer: objc.BOOL) void {
        return objc.msgSend(_self, "setWantsLayer:", void, .{_wantsLayer});
    }

    pub fn layer(_self: *@This()) ?*quartz_core.Layer {
        return objc.msgSend(_self, "layer", ?*quartz_core.Layer, .{});
    }

    pub fn setLayer(_self: *@This(), _layer: ?*quartz_core.Layer) void {
        return objc.msgSend(_self, "setLayer:", void, .{_layer});
    }

    pub fn wantsUpdateLayer(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "wantsUpdateLayer", objc.BOOL, .{});
    }

    pub fn canDrawSubviewsIntoLayer(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "canDrawSubviewsIntoLayer", objc.BOOL, .{});
    }

    pub fn setCanDrawSubviewsIntoLayer(_self: *@This(), _canDrawSubviewsIntoLayer: objc.BOOL) void {
        return objc.msgSend(_self, "setCanDrawSubviewsIntoLayer:", void, .{_canDrawSubviewsIntoLayer});
    }

    pub fn needsLayout(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "needsLayout", objc.BOOL, .{});
    }

    pub fn setNeedsLayout(_self: *@This(), _needsLayout: objc.BOOL) void {
        return objc.msgSend(_self, "setNeedsLayout:", void, .{_needsLayout});
    }

    pub fn alphaValue(_self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(_self, "alphaValue", core_foundation.CGFloat, .{});
    }

    pub fn setAlphaValue(_self: *@This(), _alphaValue: core_foundation.CGFloat) void {
        return objc.msgSend(_self, "setAlphaValue:", void, .{_alphaValue});
    }

    pub fn layerUsesCoreImageFilters(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "layerUsesCoreImageFilters", objc.BOOL, .{});
    }

    pub fn setLayerUsesCoreImageFilters(_self: *@This(), _layerUsesCoreImageFilters: objc.BOOL) void {
        return objc.msgSend(_self, "setLayerUsesCoreImageFilters:", void, .{_layerUsesCoreImageFilters});
    }

    pub fn backgroundFilters(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "backgroundFilters", ?*anyopaque, .{});
    }

    pub fn setBackgroundFilters(_self: *@This(), _backgroundFilters: ?*anyopaque) void {
        return objc.msgSend(_self, "setBackgroundFilters:", void, .{_backgroundFilters});
    }

    pub fn compositingFilter(_self: *@This()) ?*core_image.Filter {
        return objc.msgSend(_self, "compositingFilter", ?*core_image.Filter, .{});
    }

    pub fn setCompositingFilter(_self: *@This(), _compositingFilter: ?*core_image.Filter) void {
        return objc.msgSend(_self, "setCompositingFilter:", void, .{_compositingFilter});
    }

    pub fn contentFilters(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "contentFilters", ?*anyopaque, .{});
    }

    pub fn setContentFilters(_self: *@This(), _contentFilters: ?*anyopaque) void {
        return objc.msgSend(_self, "setContentFilters:", void, .{_contentFilters});
    }

    pub fn shadow(_self: *@This()) ?*app_kit.Shadow {
        return objc.msgSend(_self, "shadow", ?*app_kit.Shadow, .{});
    }

    pub fn setShadow(_self: *@This(), _shadow: ?*app_kit.Shadow) void {
        return objc.msgSend(_self, "setShadow:", void, .{_shadow});
    }

    pub fn clipsToBounds(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "clipsToBounds", objc.BOOL, .{});
    }

    pub fn setClipsToBounds(_self: *@This(), _clipsToBounds: objc.BOOL) void {
        return objc.msgSend(_self, "setClipsToBounds:", void, .{_clipsToBounds});
    }

    pub fn postsBoundsChangedNotifications(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "postsBoundsChangedNotifications", objc.BOOL, .{});
    }

    pub fn setPostsBoundsChangedNotifications(_self: *@This(), _postsBoundsChangedNotifications: objc.BOOL) void {
        return objc.msgSend(_self, "setPostsBoundsChangedNotifications:", void, .{_postsBoundsChangedNotifications});
    }

    pub fn enclosingScrollView(_self: *@This()) ?*app_kit.ScrollView {
        return objc.msgSend(_self, "enclosingScrollView", ?*app_kit.ScrollView, .{});
    }

    pub fn defaultMenu() ?*app_kit.Menu {
        return objc.msgSend(Internal.class(), "defaultMenu", ?*app_kit.Menu, .{});
    }

    pub fn toolTip(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "toolTip", ?*foundation.String, .{});
    }

    pub fn setToolTip(_self: *@This(), _toolTip: ?*foundation.String) void {
        return objc.msgSend(_self, "setToolTip:", void, .{_toolTip});
    }

    pub fn inLiveResize(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "inLiveResize", objc.BOOL, .{});
    }

    pub fn preservesContentDuringLiveResize(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "preservesContentDuringLiveResize", objc.BOOL, .{});
    }

    pub fn rectPreservedDuringLiveResize(_self: *@This()) foundation.Rect {
        return objc.msgSend(_self, "rectPreservedDuringLiveResize", foundation.Rect, .{});
    }

    pub fn inputContext(_self: *@This()) ?*app_kit.TextInputContext {
        return objc.msgSend(_self, "inputContext", ?*app_kit.TextInputContext, .{});
    }

    pub fn userInterfaceLayoutDirection(_self: *@This()) app_kit.UserInterfaceLayoutDirection {
        return objc.msgSend(_self, "userInterfaceLayoutDirection", app_kit.UserInterfaceLayoutDirection, .{});
    }

    pub fn setUserInterfaceLayoutDirection(_self: *@This(), _userInterfaceLayoutDirection: app_kit.UserInterfaceLayoutDirection) void {
        return objc.msgSend(_self, "setUserInterfaceLayoutDirection:", void, .{_userInterfaceLayoutDirection});
    }

    pub fn isCompatibleWithResponsiveScrolling() objc.BOOL {
        return objc.msgSend(Internal.class(), "isCompatibleWithResponsiveScrolling", objc.BOOL, .{});
    }

    pub fn preparedContentRect(_self: *@This()) foundation.Rect {
        return objc.msgSend(_self, "preparedContentRect", foundation.Rect, .{});
    }

    pub fn setPreparedContentRect(_self: *@This(), _preparedContentRect: foundation.Rect) void {
        return objc.msgSend(_self, "setPreparedContentRect:", void, .{_preparedContentRect});
    }

    pub fn allowsVibrancy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsVibrancy", objc.BOOL, .{});
    }

    pub fn compassButtonWithMapView(_mapView: ?*MapView) *@This() {
        return objc.msgSend(Internal.class(), "compassButtonWithMapView:", *@This(), .{_mapView});
    }

    pub fn mapView(_self: *@This()) ?*MapView {
        return objc.msgSend(_self, "mapView", ?*MapView, .{});
    }

    pub fn setMapView(_self: *@This(), _mapView: ?*MapView) void {
        return objc.msgSend(_self, "setMapView:", void, .{_mapView});
    }

    pub fn compassVisibility(_self: *@This()) FeatureVisibility {
        return objc.msgSend(_self, "compassVisibility", FeatureVisibility, .{});
    }

    pub fn setCompassVisibility(_self: *@This(), _compassVisibility: FeatureVisibility) void {
        return objc.msgSend(_self, "setCompassVisibility:", void, .{_compassVisibility});
    }
};

/// https://developer.apple.com/documentation/MapKit/MKShape?language=objc
pub const Shape = opaque {
    pub const Internal = objc.ExternClass("MKShape", @This(), objc.NSObject, &.{Annotation});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "description", ?*foundation.String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "debugDescription", ?*foundation.String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*foundation.Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*foundation.MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*foundation.MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*foundation.MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*foundation.MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn setCoordinate(_self: *@This(), _newCoordinate: core_location.LocationCoordinate2D) void {
        return objc.msgSend(_self, "setCoordinate:", void, .{_newCoordinate});
    }

    pub fn coordinate(_self: *@This()) core_location.LocationCoordinate2D {
        return objc.msgSend(_self, "coordinate", core_location.LocationCoordinate2D, .{});
    }

    pub fn title(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "title", ?*foundation.String, .{});
    }

    pub fn subtitle(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "subtitle", ?*foundation.String, .{});
    }

    pub fn setTitle(_self: *@This(), _title: ?*foundation.String) void {
        return objc.msgSend(_self, "setTitle:", void, .{_title});
    }

    pub fn setSubtitle(_self: *@This(), _subtitle: ?*foundation.String) void {
        return objc.msgSend(_self, "setSubtitle:", void, .{_subtitle});
    }
};

/// https://developer.apple.com/documentation/MapKit/MKPointAnnotation?language=objc
pub const PointAnnotation = opaque {
    pub const Internal = objc.ExternClass("MKPointAnnotation", @This(), Shape, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "description", ?*foundation.String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "debugDescription", ?*foundation.String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*foundation.Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*foundation.MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*foundation.MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*foundation.MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*foundation.MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn setCoordinate(_self: *@This(), _newCoordinate: core_location.LocationCoordinate2D) void {
        return objc.msgSend(_self, "setCoordinate:", void, .{_newCoordinate});
    }

    pub fn coordinate(_self: *@This()) core_location.LocationCoordinate2D {
        return objc.msgSend(_self, "coordinate", core_location.LocationCoordinate2D, .{});
    }

    pub fn title(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "title", ?*foundation.String, .{});
    }

    pub fn subtitle(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "subtitle", ?*foundation.String, .{});
    }

    pub fn setTitle(_self: *@This(), _title: ?*foundation.String) void {
        return objc.msgSend(_self, "setTitle:", void, .{_title});
    }

    pub fn setSubtitle(_self: *@This(), _subtitle: ?*foundation.String) void {
        return objc.msgSend(_self, "setSubtitle:", void, .{_subtitle});
    }

    pub fn initWithCoordinate(_self: *@This(), _coordinate: core_location.LocationCoordinate2D) *@This() {
        return objc.msgSend(_self, "initWithCoordinate:", *@This(), .{_coordinate});
    }

    pub fn initWithCoordinateTitleSubtitle(_self: *@This(), _coordinate: core_location.LocationCoordinate2D, _title: ?*foundation.String, _subtitle: ?*foundation.String) *@This() {
        return objc.msgSend(_self, "initWithCoordinate:title:subtitle:", *@This(), .{ _coordinate, _title, _subtitle });
    }
};

/// https://developer.apple.com/documentation/MapKit/MKMapItemAnnotation?language=objc
pub const MapItemAnnotation = opaque {
    pub const Internal = objc.ExternClass("MKMapItemAnnotation", @This(), objc.NSObject, &.{Annotation});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "description", ?*foundation.String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "debugDescription", ?*foundation.String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*foundation.Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*foundation.MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*foundation.MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*foundation.MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*foundation.MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn setCoordinate(_self: *@This(), _newCoordinate: core_location.LocationCoordinate2D) void {
        return objc.msgSend(_self, "setCoordinate:", void, .{_newCoordinate});
    }

    pub fn coordinate(_self: *@This()) core_location.LocationCoordinate2D {
        return objc.msgSend(_self, "coordinate", core_location.LocationCoordinate2D, .{});
    }

    pub fn title(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "title", ?*foundation.String, .{});
    }

    pub fn subtitle(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "subtitle", ?*foundation.String, .{});
    }

    pub fn initWithMapItem(_self: *@This(), _mapItem: ?*MapItem) *@This() {
        return objc.msgSend(_self, "initWithMapItem:", *@This(), .{_mapItem});
    }

    pub fn mapItem(_self: *@This()) ?*MapItem {
        return objc.msgSend(_self, "mapItem", ?*MapItem, .{});
    }
};

/// https://developer.apple.com/documentation/MapKit/MKMultiPoint?language=objc
pub const MultiPoint = opaque {
    pub const Internal = objc.ExternClass("MKMultiPoint", @This(), Shape, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "description", ?*foundation.String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "debugDescription", ?*foundation.String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*foundation.Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*foundation.MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*foundation.MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*foundation.MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*foundation.MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn setCoordinate(_self: *@This(), _newCoordinate: core_location.LocationCoordinate2D) void {
        return objc.msgSend(_self, "setCoordinate:", void, .{_newCoordinate});
    }

    pub fn coordinate(_self: *@This()) core_location.LocationCoordinate2D {
        return objc.msgSend(_self, "coordinate", core_location.LocationCoordinate2D, .{});
    }

    pub fn title(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "title", ?*foundation.String, .{});
    }

    pub fn subtitle(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "subtitle", ?*foundation.String, .{});
    }

    pub fn setTitle(_self: *@This(), _title: ?*foundation.String) void {
        return objc.msgSend(_self, "setTitle:", void, .{_title});
    }

    pub fn setSubtitle(_self: *@This(), _subtitle: ?*foundation.String) void {
        return objc.msgSend(_self, "setSubtitle:", void, .{_subtitle});
    }

    pub fn points(_self: *@This()) ?*MapPoint {
        return objc.msgSend(_self, "points", ?*MapPoint, .{});
    }

    pub fn getCoordinatesRange(_self: *@This(), _coords: ?*core_location.LocationCoordinate2D, _range: foundation.Range) void {
        return objc.msgSend(_self, "getCoordinates:range:", void, .{ _coords, _range });
    }

    pub fn locationAtPointIndex(_self: *@This(), _index: objc.NSUInteger) core_foundation.CGFloat {
        return objc.msgSend(_self, "locationAtPointIndex:", core_foundation.CGFloat, .{_index});
    }

    pub fn locationsAtPointIndexes(_self: *@This(), _indexes: ?*foundation.IndexSet) ?*anyopaque {
        return objc.msgSend(_self, "locationsAtPointIndexes:", ?*anyopaque, .{_indexes});
    }

    pub fn pointCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "pointCount", objc.NSUInteger, .{});
    }
};

/// https://developer.apple.com/documentation/MapKit/MKPolygon?language=objc
pub const Polygon = opaque {
    pub const Internal = objc.ExternClass("MKPolygon", @This(), MultiPoint, &.{Overlay});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "description", ?*foundation.String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "debugDescription", ?*foundation.String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*foundation.Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*foundation.MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*foundation.MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*foundation.MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*foundation.MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn setCoordinate(_self: *@This(), _newCoordinate: core_location.LocationCoordinate2D) void {
        return objc.msgSend(_self, "setCoordinate:", void, .{_newCoordinate});
    }

    pub fn coordinate(_self: *@This()) core_location.LocationCoordinate2D {
        return objc.msgSend(_self, "coordinate", core_location.LocationCoordinate2D, .{});
    }

    pub fn title(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "title", ?*foundation.String, .{});
    }

    pub fn subtitle(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "subtitle", ?*foundation.String, .{});
    }

    pub fn setTitle(_self: *@This(), _title: ?*foundation.String) void {
        return objc.msgSend(_self, "setTitle:", void, .{_title});
    }

    pub fn setSubtitle(_self: *@This(), _subtitle: ?*foundation.String) void {
        return objc.msgSend(_self, "setSubtitle:", void, .{_subtitle});
    }

    pub fn points(_self: *@This()) ?*MapPoint {
        return objc.msgSend(_self, "points", ?*MapPoint, .{});
    }

    pub fn getCoordinatesRange(_self: *@This(), _coords: ?*core_location.LocationCoordinate2D, _range: foundation.Range) void {
        return objc.msgSend(_self, "getCoordinates:range:", void, .{ _coords, _range });
    }

    pub fn locationAtPointIndex(_self: *@This(), _index: objc.NSUInteger) core_foundation.CGFloat {
        return objc.msgSend(_self, "locationAtPointIndex:", core_foundation.CGFloat, .{_index});
    }

    pub fn locationsAtPointIndexes(_self: *@This(), _indexes: ?*foundation.IndexSet) ?*anyopaque {
        return objc.msgSend(_self, "locationsAtPointIndexes:", ?*anyopaque, .{_indexes});
    }

    pub fn pointCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "pointCount", objc.NSUInteger, .{});
    }

    pub fn intersectsMapRect(_self: *@This(), _mapRect: MapRect) objc.BOOL {
        return objc.msgSend(_self, "intersectsMapRect:", objc.BOOL, .{_mapRect});
    }

    pub fn canReplaceMapContent(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "canReplaceMapContent", objc.BOOL, .{});
    }

    pub fn boundingMapRect(_self: *@This()) MapRect {
        return objc.msgSend(_self, "boundingMapRect", MapRect, .{});
    }

    pub fn polygonWithPointsCount(_points: ?*MapPoint, _count: objc.NSUInteger) *@This() {
        return objc.msgSend(Internal.class(), "polygonWithPoints:count:", *@This(), .{ _points, _count });
    }

    pub fn polygonWithPointsCountInteriorPolygons(_points: ?*MapPoint, _count: objc.NSUInteger, _interiorPolygons: ?*anyopaque) *@This() {
        return objc.msgSend(Internal.class(), "polygonWithPoints:count:interiorPolygons:", *@This(), .{ _points, _count, _interiorPolygons });
    }

    pub fn polygonWithCoordinatesCount(_coords: ?*core_location.LocationCoordinate2D, _count: objc.NSUInteger) *@This() {
        return objc.msgSend(Internal.class(), "polygonWithCoordinates:count:", *@This(), .{ _coords, _count });
    }

    pub fn polygonWithCoordinatesCountInteriorPolygons(_coords: ?*core_location.LocationCoordinate2D, _count: objc.NSUInteger, _interiorPolygons: ?*anyopaque) *@This() {
        return objc.msgSend(Internal.class(), "polygonWithCoordinates:count:interiorPolygons:", *@This(), .{ _coords, _count, _interiorPolygons });
    }

    pub fn interiorPolygons(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "interiorPolygons", ?*anyopaque, .{});
    }
};

/// https://developer.apple.com/documentation/MapKit/MKMultiPolygon?language=objc
pub const MultiPolygon = opaque {
    pub const Internal = objc.ExternClass("MKMultiPolygon", @This(), Shape, &.{Overlay});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "description", ?*foundation.String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "debugDescription", ?*foundation.String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*foundation.Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*foundation.MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*foundation.MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*foundation.MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*foundation.MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn setCoordinate(_self: *@This(), _newCoordinate: core_location.LocationCoordinate2D) void {
        return objc.msgSend(_self, "setCoordinate:", void, .{_newCoordinate});
    }

    pub fn coordinate(_self: *@This()) core_location.LocationCoordinate2D {
        return objc.msgSend(_self, "coordinate", core_location.LocationCoordinate2D, .{});
    }

    pub fn title(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "title", ?*foundation.String, .{});
    }

    pub fn subtitle(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "subtitle", ?*foundation.String, .{});
    }

    pub fn setTitle(_self: *@This(), _title: ?*foundation.String) void {
        return objc.msgSend(_self, "setTitle:", void, .{_title});
    }

    pub fn setSubtitle(_self: *@This(), _subtitle: ?*foundation.String) void {
        return objc.msgSend(_self, "setSubtitle:", void, .{_subtitle});
    }

    pub fn intersectsMapRect(_self: *@This(), _mapRect: MapRect) objc.BOOL {
        return objc.msgSend(_self, "intersectsMapRect:", objc.BOOL, .{_mapRect});
    }

    pub fn canReplaceMapContent(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "canReplaceMapContent", objc.BOOL, .{});
    }

    pub fn boundingMapRect(_self: *@This()) MapRect {
        return objc.msgSend(_self, "boundingMapRect", MapRect, .{});
    }

    pub fn initWithPolygons(_self: *@This(), _polygons: ?*anyopaque) *@This() {
        return objc.msgSend(_self, "initWithPolygons:", *@This(), .{_polygons});
    }

    pub fn polygons(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "polygons", ?*anyopaque, .{});
    }
};

/// https://developer.apple.com/documentation/MapKit/MKOverlayPathRenderer?language=objc
pub const OverlayPathRenderer = opaque {
    pub const Internal = objc.ExternClass("MKOverlayPathRenderer", @This(), OverlayRenderer, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "description", ?*foundation.String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "debugDescription", ?*foundation.String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*foundation.Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*foundation.MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*foundation.MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*foundation.MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*foundation.MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn initWithOverlay(_self: *@This(), _overlay: ?*anyopaque) *@This() {
        return objc.msgSend(_self, "initWithOverlay:", *@This(), .{_overlay});
    }

    pub fn pointForMapPoint(_self: *@This(), _mapPoint: MapPoint) core_foundation.CGPoint {
        return objc.msgSend(_self, "pointForMapPoint:", core_foundation.CGPoint, .{_mapPoint});
    }

    pub fn mapPointForPoint(_self: *@This(), _point: core_foundation.CGPoint) MapPoint {
        return objc.msgSend(_self, "mapPointForPoint:", MapPoint, .{_point});
    }

    pub fn rectForMapRect(_self: *@This(), _mapRect: MapRect) core_foundation.CGRect {
        return objc.msgSend(_self, "rectForMapRect:", core_foundation.CGRect, .{_mapRect});
    }

    pub fn mapRectForRect(_self: *@This(), _rect: core_foundation.CGRect) MapRect {
        return objc.msgSend(_self, "mapRectForRect:", MapRect, .{_rect});
    }

    pub fn canDrawMapRectZoomScale(_self: *@This(), _mapRect: MapRect, _zoomScale: ZoomScale) objc.BOOL {
        return objc.msgSend(_self, "canDrawMapRect:zoomScale:", objc.BOOL, .{ _mapRect, _zoomScale });
    }

    pub fn drawMapRectZoomScaleInContext(_self: *@This(), _mapRect: MapRect, _zoomScale: ZoomScale, _context: core_graphics.ContextRef) void {
        return objc.msgSend(_self, "drawMapRect:zoomScale:inContext:", void, .{ _mapRect, _zoomScale, _context });
    }

    pub fn setNeedsDisplay(_self: *@This()) void {
        return objc.msgSend(_self, "setNeedsDisplay", void, .{});
    }

    pub fn setNeedsDisplayInMapRect(_self: *@This(), _mapRect: MapRect) void {
        return objc.msgSend(_self, "setNeedsDisplayInMapRect:", void, .{_mapRect});
    }

    pub fn setNeedsDisplayInMapRectZoomScale(_self: *@This(), _mapRect: MapRect, _zoomScale: ZoomScale) void {
        return objc.msgSend(_self, "setNeedsDisplayInMapRect:zoomScale:", void, .{ _mapRect, _zoomScale });
    }

    pub fn overlay(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "overlay", ?*anyopaque, .{});
    }

    pub fn alpha(_self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(_self, "alpha", core_foundation.CGFloat, .{});
    }

    pub fn setAlpha(_self: *@This(), _alpha: core_foundation.CGFloat) void {
        return objc.msgSend(_self, "setAlpha:", void, .{_alpha});
    }

    pub fn contentScaleFactor(_self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(_self, "contentScaleFactor", core_foundation.CGFloat, .{});
    }

    pub fn blendMode(_self: *@This()) core_graphics.BlendMode {
        return objc.msgSend(_self, "blendMode", core_graphics.BlendMode, .{});
    }

    pub fn setBlendMode(_self: *@This(), _blendMode: core_graphics.BlendMode) void {
        return objc.msgSend(_self, "setBlendMode:", void, .{_blendMode});
    }

    pub fn createPath(_self: *@This()) void {
        return objc.msgSend(_self, "createPath", void, .{});
    }

    pub fn invalidatePath(_self: *@This()) void {
        return objc.msgSend(_self, "invalidatePath", void, .{});
    }

    pub fn applyStrokePropertiesToContextAtZoomScale(_self: *@This(), _context: core_graphics.ContextRef, _zoomScale: ZoomScale) void {
        return objc.msgSend(_self, "applyStrokePropertiesToContext:atZoomScale:", void, .{ _context, _zoomScale });
    }

    pub fn applyFillPropertiesToContextAtZoomScale(_self: *@This(), _context: core_graphics.ContextRef, _zoomScale: ZoomScale) void {
        return objc.msgSend(_self, "applyFillPropertiesToContext:atZoomScale:", void, .{ _context, _zoomScale });
    }

    pub fn strokePathInContext(_self: *@This(), _path: core_graphics.PathRef, _context: core_graphics.ContextRef) void {
        return objc.msgSend(_self, "strokePath:inContext:", void, .{ _path, _context });
    }

    pub fn fillPathInContext(_self: *@This(), _path: core_graphics.PathRef, _context: core_graphics.ContextRef) void {
        return objc.msgSend(_self, "fillPath:inContext:", void, .{ _path, _context });
    }

    pub fn fillColor(_self: *@This()) ?*app_kit.Color {
        return objc.msgSend(_self, "fillColor", ?*app_kit.Color, .{});
    }

    pub fn setFillColor(_self: *@This(), _fillColor: ?*app_kit.Color) void {
        return objc.msgSend(_self, "setFillColor:", void, .{_fillColor});
    }

    pub fn strokeColor(_self: *@This()) ?*app_kit.Color {
        return objc.msgSend(_self, "strokeColor", ?*app_kit.Color, .{});
    }

    pub fn setStrokeColor(_self: *@This(), _strokeColor: ?*app_kit.Color) void {
        return objc.msgSend(_self, "setStrokeColor:", void, .{_strokeColor});
    }

    pub fn lineWidth(_self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(_self, "lineWidth", core_foundation.CGFloat, .{});
    }

    pub fn setLineWidth(_self: *@This(), _lineWidth: core_foundation.CGFloat) void {
        return objc.msgSend(_self, "setLineWidth:", void, .{_lineWidth});
    }

    pub fn lineJoin(_self: *@This()) core_graphics.LineJoin {
        return objc.msgSend(_self, "lineJoin", core_graphics.LineJoin, .{});
    }

    pub fn setLineJoin(_self: *@This(), _lineJoin: core_graphics.LineJoin) void {
        return objc.msgSend(_self, "setLineJoin:", void, .{_lineJoin});
    }

    pub fn lineCap(_self: *@This()) core_graphics.LineCap {
        return objc.msgSend(_self, "lineCap", core_graphics.LineCap, .{});
    }

    pub fn setLineCap(_self: *@This(), _lineCap: core_graphics.LineCap) void {
        return objc.msgSend(_self, "setLineCap:", void, .{_lineCap});
    }

    pub fn miterLimit(_self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(_self, "miterLimit", core_foundation.CGFloat, .{});
    }

    pub fn setMiterLimit(_self: *@This(), _miterLimit: core_foundation.CGFloat) void {
        return objc.msgSend(_self, "setMiterLimit:", void, .{_miterLimit});
    }

    pub fn lineDashPhase(_self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(_self, "lineDashPhase", core_foundation.CGFloat, .{});
    }

    pub fn setLineDashPhase(_self: *@This(), _lineDashPhase: core_foundation.CGFloat) void {
        return objc.msgSend(_self, "setLineDashPhase:", void, .{_lineDashPhase});
    }

    pub fn lineDashPattern(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "lineDashPattern", ?*anyopaque, .{});
    }

    pub fn setLineDashPattern(_self: *@This(), _lineDashPattern: ?*anyopaque) void {
        return objc.msgSend(_self, "setLineDashPattern:", void, .{_lineDashPattern});
    }

    pub fn shouldRasterize(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "shouldRasterize", objc.BOOL, .{});
    }

    pub fn setShouldRasterize(_self: *@This(), _shouldRasterize: objc.BOOL) void {
        return objc.msgSend(_self, "setShouldRasterize:", void, .{_shouldRasterize});
    }

    pub fn path(_self: *@This()) core_graphics.PathRef {
        return objc.msgSend(_self, "path", core_graphics.PathRef, .{});
    }

    pub fn setPath(_self: *@This(), _path: core_graphics.PathRef) void {
        return objc.msgSend(_self, "setPath:", void, .{_path});
    }
};

/// https://developer.apple.com/documentation/MapKit/MKMultiPolygonRenderer?language=objc
pub const MultiPolygonRenderer = opaque {
    pub const Internal = objc.ExternClass("MKMultiPolygonRenderer", @This(), OverlayPathRenderer, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "description", ?*foundation.String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "debugDescription", ?*foundation.String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*foundation.Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*foundation.MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*foundation.MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*foundation.MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*foundation.MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn initWithOverlay(_self: *@This(), _overlay: ?*anyopaque) *@This() {
        return objc.msgSend(_self, "initWithOverlay:", *@This(), .{_overlay});
    }

    pub fn pointForMapPoint(_self: *@This(), _mapPoint: MapPoint) core_foundation.CGPoint {
        return objc.msgSend(_self, "pointForMapPoint:", core_foundation.CGPoint, .{_mapPoint});
    }

    pub fn mapPointForPoint(_self: *@This(), _point: core_foundation.CGPoint) MapPoint {
        return objc.msgSend(_self, "mapPointForPoint:", MapPoint, .{_point});
    }

    pub fn rectForMapRect(_self: *@This(), _mapRect: MapRect) core_foundation.CGRect {
        return objc.msgSend(_self, "rectForMapRect:", core_foundation.CGRect, .{_mapRect});
    }

    pub fn mapRectForRect(_self: *@This(), _rect: core_foundation.CGRect) MapRect {
        return objc.msgSend(_self, "mapRectForRect:", MapRect, .{_rect});
    }

    pub fn canDrawMapRectZoomScale(_self: *@This(), _mapRect: MapRect, _zoomScale: ZoomScale) objc.BOOL {
        return objc.msgSend(_self, "canDrawMapRect:zoomScale:", objc.BOOL, .{ _mapRect, _zoomScale });
    }

    pub fn drawMapRectZoomScaleInContext(_self: *@This(), _mapRect: MapRect, _zoomScale: ZoomScale, _context: core_graphics.ContextRef) void {
        return objc.msgSend(_self, "drawMapRect:zoomScale:inContext:", void, .{ _mapRect, _zoomScale, _context });
    }

    pub fn setNeedsDisplay(_self: *@This()) void {
        return objc.msgSend(_self, "setNeedsDisplay", void, .{});
    }

    pub fn setNeedsDisplayInMapRect(_self: *@This(), _mapRect: MapRect) void {
        return objc.msgSend(_self, "setNeedsDisplayInMapRect:", void, .{_mapRect});
    }

    pub fn setNeedsDisplayInMapRectZoomScale(_self: *@This(), _mapRect: MapRect, _zoomScale: ZoomScale) void {
        return objc.msgSend(_self, "setNeedsDisplayInMapRect:zoomScale:", void, .{ _mapRect, _zoomScale });
    }

    pub fn overlay(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "overlay", ?*anyopaque, .{});
    }

    pub fn alpha(_self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(_self, "alpha", core_foundation.CGFloat, .{});
    }

    pub fn setAlpha(_self: *@This(), _alpha: core_foundation.CGFloat) void {
        return objc.msgSend(_self, "setAlpha:", void, .{_alpha});
    }

    pub fn contentScaleFactor(_self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(_self, "contentScaleFactor", core_foundation.CGFloat, .{});
    }

    pub fn blendMode(_self: *@This()) core_graphics.BlendMode {
        return objc.msgSend(_self, "blendMode", core_graphics.BlendMode, .{});
    }

    pub fn setBlendMode(_self: *@This(), _blendMode: core_graphics.BlendMode) void {
        return objc.msgSend(_self, "setBlendMode:", void, .{_blendMode});
    }

    pub fn createPath(_self: *@This()) void {
        return objc.msgSend(_self, "createPath", void, .{});
    }

    pub fn invalidatePath(_self: *@This()) void {
        return objc.msgSend(_self, "invalidatePath", void, .{});
    }

    pub fn applyStrokePropertiesToContextAtZoomScale(_self: *@This(), _context: core_graphics.ContextRef, _zoomScale: ZoomScale) void {
        return objc.msgSend(_self, "applyStrokePropertiesToContext:atZoomScale:", void, .{ _context, _zoomScale });
    }

    pub fn applyFillPropertiesToContextAtZoomScale(_self: *@This(), _context: core_graphics.ContextRef, _zoomScale: ZoomScale) void {
        return objc.msgSend(_self, "applyFillPropertiesToContext:atZoomScale:", void, .{ _context, _zoomScale });
    }

    pub fn strokePathInContext(_self: *@This(), _path: core_graphics.PathRef, _context: core_graphics.ContextRef) void {
        return objc.msgSend(_self, "strokePath:inContext:", void, .{ _path, _context });
    }

    pub fn fillPathInContext(_self: *@This(), _path: core_graphics.PathRef, _context: core_graphics.ContextRef) void {
        return objc.msgSend(_self, "fillPath:inContext:", void, .{ _path, _context });
    }

    pub fn fillColor(_self: *@This()) ?*app_kit.Color {
        return objc.msgSend(_self, "fillColor", ?*app_kit.Color, .{});
    }

    pub fn setFillColor(_self: *@This(), _fillColor: ?*app_kit.Color) void {
        return objc.msgSend(_self, "setFillColor:", void, .{_fillColor});
    }

    pub fn strokeColor(_self: *@This()) ?*app_kit.Color {
        return objc.msgSend(_self, "strokeColor", ?*app_kit.Color, .{});
    }

    pub fn setStrokeColor(_self: *@This(), _strokeColor: ?*app_kit.Color) void {
        return objc.msgSend(_self, "setStrokeColor:", void, .{_strokeColor});
    }

    pub fn lineWidth(_self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(_self, "lineWidth", core_foundation.CGFloat, .{});
    }

    pub fn setLineWidth(_self: *@This(), _lineWidth: core_foundation.CGFloat) void {
        return objc.msgSend(_self, "setLineWidth:", void, .{_lineWidth});
    }

    pub fn lineJoin(_self: *@This()) core_graphics.LineJoin {
        return objc.msgSend(_self, "lineJoin", core_graphics.LineJoin, .{});
    }

    pub fn setLineJoin(_self: *@This(), _lineJoin: core_graphics.LineJoin) void {
        return objc.msgSend(_self, "setLineJoin:", void, .{_lineJoin});
    }

    pub fn lineCap(_self: *@This()) core_graphics.LineCap {
        return objc.msgSend(_self, "lineCap", core_graphics.LineCap, .{});
    }

    pub fn setLineCap(_self: *@This(), _lineCap: core_graphics.LineCap) void {
        return objc.msgSend(_self, "setLineCap:", void, .{_lineCap});
    }

    pub fn miterLimit(_self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(_self, "miterLimit", core_foundation.CGFloat, .{});
    }

    pub fn setMiterLimit(_self: *@This(), _miterLimit: core_foundation.CGFloat) void {
        return objc.msgSend(_self, "setMiterLimit:", void, .{_miterLimit});
    }

    pub fn lineDashPhase(_self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(_self, "lineDashPhase", core_foundation.CGFloat, .{});
    }

    pub fn setLineDashPhase(_self: *@This(), _lineDashPhase: core_foundation.CGFloat) void {
        return objc.msgSend(_self, "setLineDashPhase:", void, .{_lineDashPhase});
    }

    pub fn lineDashPattern(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "lineDashPattern", ?*anyopaque, .{});
    }

    pub fn setLineDashPattern(_self: *@This(), _lineDashPattern: ?*anyopaque) void {
        return objc.msgSend(_self, "setLineDashPattern:", void, .{_lineDashPattern});
    }

    pub fn shouldRasterize(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "shouldRasterize", objc.BOOL, .{});
    }

    pub fn setShouldRasterize(_self: *@This(), _shouldRasterize: objc.BOOL) void {
        return objc.msgSend(_self, "setShouldRasterize:", void, .{_shouldRasterize});
    }

    pub fn path(_self: *@This()) core_graphics.PathRef {
        return objc.msgSend(_self, "path", core_graphics.PathRef, .{});
    }

    pub fn setPath(_self: *@This(), _path: core_graphics.PathRef) void {
        return objc.msgSend(_self, "setPath:", void, .{_path});
    }

    pub fn initWithMultiPolygon(_self: *@This(), _multiPolygon: ?*MultiPolygon) *@This() {
        return objc.msgSend(_self, "initWithMultiPolygon:", *@This(), .{_multiPolygon});
    }

    pub fn multiPolygon(_self: *@This()) ?*MultiPolygon {
        return objc.msgSend(_self, "multiPolygon", ?*MultiPolygon, .{});
    }
};

/// https://developer.apple.com/documentation/MapKit/MKPolyline?language=objc
pub const Polyline = opaque {
    pub const Internal = objc.ExternClass("MKPolyline", @This(), MultiPoint, &.{Overlay});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "description", ?*foundation.String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "debugDescription", ?*foundation.String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*foundation.Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*foundation.MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*foundation.MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*foundation.MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*foundation.MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn setCoordinate(_self: *@This(), _newCoordinate: core_location.LocationCoordinate2D) void {
        return objc.msgSend(_self, "setCoordinate:", void, .{_newCoordinate});
    }

    pub fn coordinate(_self: *@This()) core_location.LocationCoordinate2D {
        return objc.msgSend(_self, "coordinate", core_location.LocationCoordinate2D, .{});
    }

    pub fn title(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "title", ?*foundation.String, .{});
    }

    pub fn subtitle(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "subtitle", ?*foundation.String, .{});
    }

    pub fn setTitle(_self: *@This(), _title: ?*foundation.String) void {
        return objc.msgSend(_self, "setTitle:", void, .{_title});
    }

    pub fn setSubtitle(_self: *@This(), _subtitle: ?*foundation.String) void {
        return objc.msgSend(_self, "setSubtitle:", void, .{_subtitle});
    }

    pub fn points(_self: *@This()) ?*MapPoint {
        return objc.msgSend(_self, "points", ?*MapPoint, .{});
    }

    pub fn getCoordinatesRange(_self: *@This(), _coords: ?*core_location.LocationCoordinate2D, _range: foundation.Range) void {
        return objc.msgSend(_self, "getCoordinates:range:", void, .{ _coords, _range });
    }

    pub fn locationAtPointIndex(_self: *@This(), _index: objc.NSUInteger) core_foundation.CGFloat {
        return objc.msgSend(_self, "locationAtPointIndex:", core_foundation.CGFloat, .{_index});
    }

    pub fn locationsAtPointIndexes(_self: *@This(), _indexes: ?*foundation.IndexSet) ?*anyopaque {
        return objc.msgSend(_self, "locationsAtPointIndexes:", ?*anyopaque, .{_indexes});
    }

    pub fn pointCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "pointCount", objc.NSUInteger, .{});
    }

    pub fn intersectsMapRect(_self: *@This(), _mapRect: MapRect) objc.BOOL {
        return objc.msgSend(_self, "intersectsMapRect:", objc.BOOL, .{_mapRect});
    }

    pub fn canReplaceMapContent(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "canReplaceMapContent", objc.BOOL, .{});
    }

    pub fn boundingMapRect(_self: *@This()) MapRect {
        return objc.msgSend(_self, "boundingMapRect", MapRect, .{});
    }

    pub fn polylineWithPointsCount(_points: ?*MapPoint, _count: objc.NSUInteger) *@This() {
        return objc.msgSend(Internal.class(), "polylineWithPoints:count:", *@This(), .{ _points, _count });
    }

    pub fn polylineWithCoordinatesCount(_coords: ?*core_location.LocationCoordinate2D, _count: objc.NSUInteger) *@This() {
        return objc.msgSend(Internal.class(), "polylineWithCoordinates:count:", *@This(), .{ _coords, _count });
    }
};

/// https://developer.apple.com/documentation/MapKit/MKMultiPolyline?language=objc
pub const MultiPolyline = opaque {
    pub const Internal = objc.ExternClass("MKMultiPolyline", @This(), Shape, &.{Overlay});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "description", ?*foundation.String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "debugDescription", ?*foundation.String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*foundation.Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*foundation.MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*foundation.MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*foundation.MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*foundation.MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn setCoordinate(_self: *@This(), _newCoordinate: core_location.LocationCoordinate2D) void {
        return objc.msgSend(_self, "setCoordinate:", void, .{_newCoordinate});
    }

    pub fn coordinate(_self: *@This()) core_location.LocationCoordinate2D {
        return objc.msgSend(_self, "coordinate", core_location.LocationCoordinate2D, .{});
    }

    pub fn title(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "title", ?*foundation.String, .{});
    }

    pub fn subtitle(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "subtitle", ?*foundation.String, .{});
    }

    pub fn setTitle(_self: *@This(), _title: ?*foundation.String) void {
        return objc.msgSend(_self, "setTitle:", void, .{_title});
    }

    pub fn setSubtitle(_self: *@This(), _subtitle: ?*foundation.String) void {
        return objc.msgSend(_self, "setSubtitle:", void, .{_subtitle});
    }

    pub fn intersectsMapRect(_self: *@This(), _mapRect: MapRect) objc.BOOL {
        return objc.msgSend(_self, "intersectsMapRect:", objc.BOOL, .{_mapRect});
    }

    pub fn canReplaceMapContent(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "canReplaceMapContent", objc.BOOL, .{});
    }

    pub fn boundingMapRect(_self: *@This()) MapRect {
        return objc.msgSend(_self, "boundingMapRect", MapRect, .{});
    }

    pub fn initWithPolylines(_self: *@This(), _polylines: ?*anyopaque) *@This() {
        return objc.msgSend(_self, "initWithPolylines:", *@This(), .{_polylines});
    }

    pub fn polylines(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "polylines", ?*anyopaque, .{});
    }
};

/// https://developer.apple.com/documentation/MapKit/MKMultiPolylineRenderer?language=objc
pub const MultiPolylineRenderer = opaque {
    pub const Internal = objc.ExternClass("MKMultiPolylineRenderer", @This(), OverlayPathRenderer, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "description", ?*foundation.String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "debugDescription", ?*foundation.String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*foundation.Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*foundation.MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*foundation.MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*foundation.MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*foundation.MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn initWithOverlay(_self: *@This(), _overlay: ?*anyopaque) *@This() {
        return objc.msgSend(_self, "initWithOverlay:", *@This(), .{_overlay});
    }

    pub fn pointForMapPoint(_self: *@This(), _mapPoint: MapPoint) core_foundation.CGPoint {
        return objc.msgSend(_self, "pointForMapPoint:", core_foundation.CGPoint, .{_mapPoint});
    }

    pub fn mapPointForPoint(_self: *@This(), _point: core_foundation.CGPoint) MapPoint {
        return objc.msgSend(_self, "mapPointForPoint:", MapPoint, .{_point});
    }

    pub fn rectForMapRect(_self: *@This(), _mapRect: MapRect) core_foundation.CGRect {
        return objc.msgSend(_self, "rectForMapRect:", core_foundation.CGRect, .{_mapRect});
    }

    pub fn mapRectForRect(_self: *@This(), _rect: core_foundation.CGRect) MapRect {
        return objc.msgSend(_self, "mapRectForRect:", MapRect, .{_rect});
    }

    pub fn canDrawMapRectZoomScale(_self: *@This(), _mapRect: MapRect, _zoomScale: ZoomScale) objc.BOOL {
        return objc.msgSend(_self, "canDrawMapRect:zoomScale:", objc.BOOL, .{ _mapRect, _zoomScale });
    }

    pub fn drawMapRectZoomScaleInContext(_self: *@This(), _mapRect: MapRect, _zoomScale: ZoomScale, _context: core_graphics.ContextRef) void {
        return objc.msgSend(_self, "drawMapRect:zoomScale:inContext:", void, .{ _mapRect, _zoomScale, _context });
    }

    pub fn setNeedsDisplay(_self: *@This()) void {
        return objc.msgSend(_self, "setNeedsDisplay", void, .{});
    }

    pub fn setNeedsDisplayInMapRect(_self: *@This(), _mapRect: MapRect) void {
        return objc.msgSend(_self, "setNeedsDisplayInMapRect:", void, .{_mapRect});
    }

    pub fn setNeedsDisplayInMapRectZoomScale(_self: *@This(), _mapRect: MapRect, _zoomScale: ZoomScale) void {
        return objc.msgSend(_self, "setNeedsDisplayInMapRect:zoomScale:", void, .{ _mapRect, _zoomScale });
    }

    pub fn overlay(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "overlay", ?*anyopaque, .{});
    }

    pub fn alpha(_self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(_self, "alpha", core_foundation.CGFloat, .{});
    }

    pub fn setAlpha(_self: *@This(), _alpha: core_foundation.CGFloat) void {
        return objc.msgSend(_self, "setAlpha:", void, .{_alpha});
    }

    pub fn contentScaleFactor(_self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(_self, "contentScaleFactor", core_foundation.CGFloat, .{});
    }

    pub fn blendMode(_self: *@This()) core_graphics.BlendMode {
        return objc.msgSend(_self, "blendMode", core_graphics.BlendMode, .{});
    }

    pub fn setBlendMode(_self: *@This(), _blendMode: core_graphics.BlendMode) void {
        return objc.msgSend(_self, "setBlendMode:", void, .{_blendMode});
    }

    pub fn createPath(_self: *@This()) void {
        return objc.msgSend(_self, "createPath", void, .{});
    }

    pub fn invalidatePath(_self: *@This()) void {
        return objc.msgSend(_self, "invalidatePath", void, .{});
    }

    pub fn applyStrokePropertiesToContextAtZoomScale(_self: *@This(), _context: core_graphics.ContextRef, _zoomScale: ZoomScale) void {
        return objc.msgSend(_self, "applyStrokePropertiesToContext:atZoomScale:", void, .{ _context, _zoomScale });
    }

    pub fn applyFillPropertiesToContextAtZoomScale(_self: *@This(), _context: core_graphics.ContextRef, _zoomScale: ZoomScale) void {
        return objc.msgSend(_self, "applyFillPropertiesToContext:atZoomScale:", void, .{ _context, _zoomScale });
    }

    pub fn strokePathInContext(_self: *@This(), _path: core_graphics.PathRef, _context: core_graphics.ContextRef) void {
        return objc.msgSend(_self, "strokePath:inContext:", void, .{ _path, _context });
    }

    pub fn fillPathInContext(_self: *@This(), _path: core_graphics.PathRef, _context: core_graphics.ContextRef) void {
        return objc.msgSend(_self, "fillPath:inContext:", void, .{ _path, _context });
    }

    pub fn fillColor(_self: *@This()) ?*app_kit.Color {
        return objc.msgSend(_self, "fillColor", ?*app_kit.Color, .{});
    }

    pub fn setFillColor(_self: *@This(), _fillColor: ?*app_kit.Color) void {
        return objc.msgSend(_self, "setFillColor:", void, .{_fillColor});
    }

    pub fn strokeColor(_self: *@This()) ?*app_kit.Color {
        return objc.msgSend(_self, "strokeColor", ?*app_kit.Color, .{});
    }

    pub fn setStrokeColor(_self: *@This(), _strokeColor: ?*app_kit.Color) void {
        return objc.msgSend(_self, "setStrokeColor:", void, .{_strokeColor});
    }

    pub fn lineWidth(_self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(_self, "lineWidth", core_foundation.CGFloat, .{});
    }

    pub fn setLineWidth(_self: *@This(), _lineWidth: core_foundation.CGFloat) void {
        return objc.msgSend(_self, "setLineWidth:", void, .{_lineWidth});
    }

    pub fn lineJoin(_self: *@This()) core_graphics.LineJoin {
        return objc.msgSend(_self, "lineJoin", core_graphics.LineJoin, .{});
    }

    pub fn setLineJoin(_self: *@This(), _lineJoin: core_graphics.LineJoin) void {
        return objc.msgSend(_self, "setLineJoin:", void, .{_lineJoin});
    }

    pub fn lineCap(_self: *@This()) core_graphics.LineCap {
        return objc.msgSend(_self, "lineCap", core_graphics.LineCap, .{});
    }

    pub fn setLineCap(_self: *@This(), _lineCap: core_graphics.LineCap) void {
        return objc.msgSend(_self, "setLineCap:", void, .{_lineCap});
    }

    pub fn miterLimit(_self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(_self, "miterLimit", core_foundation.CGFloat, .{});
    }

    pub fn setMiterLimit(_self: *@This(), _miterLimit: core_foundation.CGFloat) void {
        return objc.msgSend(_self, "setMiterLimit:", void, .{_miterLimit});
    }

    pub fn lineDashPhase(_self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(_self, "lineDashPhase", core_foundation.CGFloat, .{});
    }

    pub fn setLineDashPhase(_self: *@This(), _lineDashPhase: core_foundation.CGFloat) void {
        return objc.msgSend(_self, "setLineDashPhase:", void, .{_lineDashPhase});
    }

    pub fn lineDashPattern(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "lineDashPattern", ?*anyopaque, .{});
    }

    pub fn setLineDashPattern(_self: *@This(), _lineDashPattern: ?*anyopaque) void {
        return objc.msgSend(_self, "setLineDashPattern:", void, .{_lineDashPattern});
    }

    pub fn shouldRasterize(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "shouldRasterize", objc.BOOL, .{});
    }

    pub fn setShouldRasterize(_self: *@This(), _shouldRasterize: objc.BOOL) void {
        return objc.msgSend(_self, "setShouldRasterize:", void, .{_shouldRasterize});
    }

    pub fn path(_self: *@This()) core_graphics.PathRef {
        return objc.msgSend(_self, "path", core_graphics.PathRef, .{});
    }

    pub fn setPath(_self: *@This(), _path: core_graphics.PathRef) void {
        return objc.msgSend(_self, "setPath:", void, .{_path});
    }

    pub fn initWithMultiPolyline(_self: *@This(), _multiPolyline: ?*MultiPolyline) *@This() {
        return objc.msgSend(_self, "initWithMultiPolyline:", *@This(), .{_multiPolyline});
    }

    pub fn multiPolyline(_self: *@This()) ?*MultiPolyline {
        return objc.msgSend(_self, "multiPolyline", ?*MultiPolyline, .{});
    }
};

/// https://developer.apple.com/documentation/MapKit/MKCircle?language=objc
pub const Circle = opaque {
    pub const Internal = objc.ExternClass("MKCircle", @This(), Shape, &.{Overlay});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "description", ?*foundation.String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "debugDescription", ?*foundation.String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*foundation.Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*foundation.MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*foundation.MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*foundation.MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*foundation.MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn setCoordinate(_self: *@This(), _newCoordinate: core_location.LocationCoordinate2D) void {
        return objc.msgSend(_self, "setCoordinate:", void, .{_newCoordinate});
    }

    pub fn coordinate(_self: *@This()) core_location.LocationCoordinate2D {
        return objc.msgSend(_self, "coordinate", core_location.LocationCoordinate2D, .{});
    }

    pub fn title(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "title", ?*foundation.String, .{});
    }

    pub fn subtitle(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "subtitle", ?*foundation.String, .{});
    }

    pub fn setTitle(_self: *@This(), _title: ?*foundation.String) void {
        return objc.msgSend(_self, "setTitle:", void, .{_title});
    }

    pub fn setSubtitle(_self: *@This(), _subtitle: ?*foundation.String) void {
        return objc.msgSend(_self, "setSubtitle:", void, .{_subtitle});
    }

    pub fn intersectsMapRect(_self: *@This(), _mapRect: MapRect) objc.BOOL {
        return objc.msgSend(_self, "intersectsMapRect:", objc.BOOL, .{_mapRect});
    }

    pub fn canReplaceMapContent(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "canReplaceMapContent", objc.BOOL, .{});
    }

    pub fn boundingMapRect(_self: *@This()) MapRect {
        return objc.msgSend(_self, "boundingMapRect", MapRect, .{});
    }

    pub fn circleWithCenterCoordinateRadius(_coord: core_location.LocationCoordinate2D, _radius: core_location.LocationDistance) *@This() {
        return objc.msgSend(Internal.class(), "circleWithCenterCoordinate:radius:", *@This(), .{ _coord, _radius });
    }

    pub fn circleWithMapRect(_mapRect: MapRect) *@This() {
        return objc.msgSend(Internal.class(), "circleWithMapRect:", *@This(), .{_mapRect});
    }

    pub fn radius(_self: *@This()) core_location.LocationDistance {
        return objc.msgSend(_self, "radius", core_location.LocationDistance, .{});
    }
};

/// https://developer.apple.com/documentation/MapKit/MKGeodesicPolyline?language=objc
pub const GeodesicPolyline = opaque {
    pub const Internal = objc.ExternClass("MKGeodesicPolyline", @This(), Polyline, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "description", ?*foundation.String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "debugDescription", ?*foundation.String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*foundation.Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*foundation.MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*foundation.MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*foundation.MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*foundation.MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn setCoordinate(_self: *@This(), _newCoordinate: core_location.LocationCoordinate2D) void {
        return objc.msgSend(_self, "setCoordinate:", void, .{_newCoordinate});
    }

    pub fn coordinate(_self: *@This()) core_location.LocationCoordinate2D {
        return objc.msgSend(_self, "coordinate", core_location.LocationCoordinate2D, .{});
    }

    pub fn title(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "title", ?*foundation.String, .{});
    }

    pub fn subtitle(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "subtitle", ?*foundation.String, .{});
    }

    pub fn setTitle(_self: *@This(), _title: ?*foundation.String) void {
        return objc.msgSend(_self, "setTitle:", void, .{_title});
    }

    pub fn setSubtitle(_self: *@This(), _subtitle: ?*foundation.String) void {
        return objc.msgSend(_self, "setSubtitle:", void, .{_subtitle});
    }

    pub fn points(_self: *@This()) ?*MapPoint {
        return objc.msgSend(_self, "points", ?*MapPoint, .{});
    }

    pub fn getCoordinatesRange(_self: *@This(), _coords: ?*core_location.LocationCoordinate2D, _range: foundation.Range) void {
        return objc.msgSend(_self, "getCoordinates:range:", void, .{ _coords, _range });
    }

    pub fn locationAtPointIndex(_self: *@This(), _index: objc.NSUInteger) core_foundation.CGFloat {
        return objc.msgSend(_self, "locationAtPointIndex:", core_foundation.CGFloat, .{_index});
    }

    pub fn locationsAtPointIndexes(_self: *@This(), _indexes: ?*foundation.IndexSet) ?*anyopaque {
        return objc.msgSend(_self, "locationsAtPointIndexes:", ?*anyopaque, .{_indexes});
    }

    pub fn pointCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "pointCount", objc.NSUInteger, .{});
    }

    pub fn intersectsMapRect(_self: *@This(), _mapRect: MapRect) objc.BOOL {
        return objc.msgSend(_self, "intersectsMapRect:", objc.BOOL, .{_mapRect});
    }

    pub fn canReplaceMapContent(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "canReplaceMapContent", objc.BOOL, .{});
    }

    pub fn boundingMapRect(_self: *@This()) MapRect {
        return objc.msgSend(_self, "boundingMapRect", MapRect, .{});
    }

    pub fn polylineWithPointsCount(_points: ?*MapPoint, _count: objc.NSUInteger) *@This() {
        return objc.msgSend(Internal.class(), "polylineWithPoints:count:", *@This(), .{ _points, _count });
    }

    pub fn polylineWithCoordinatesCount(_coords: ?*core_location.LocationCoordinate2D, _count: objc.NSUInteger) *@This() {
        return objc.msgSend(Internal.class(), "polylineWithCoordinates:count:", *@This(), .{ _coords, _count });
    }
};

/// https://developer.apple.com/documentation/MapKit/MKPolylineRenderer?language=objc
pub const PolylineRenderer = opaque {
    pub const Internal = objc.ExternClass("MKPolylineRenderer", @This(), OverlayPathRenderer, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "description", ?*foundation.String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "debugDescription", ?*foundation.String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*foundation.Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*foundation.MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*foundation.MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*foundation.MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*foundation.MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn initWithOverlay(_self: *@This(), _overlay: ?*anyopaque) *@This() {
        return objc.msgSend(_self, "initWithOverlay:", *@This(), .{_overlay});
    }

    pub fn pointForMapPoint(_self: *@This(), _mapPoint: MapPoint) core_foundation.CGPoint {
        return objc.msgSend(_self, "pointForMapPoint:", core_foundation.CGPoint, .{_mapPoint});
    }

    pub fn mapPointForPoint(_self: *@This(), _point: core_foundation.CGPoint) MapPoint {
        return objc.msgSend(_self, "mapPointForPoint:", MapPoint, .{_point});
    }

    pub fn rectForMapRect(_self: *@This(), _mapRect: MapRect) core_foundation.CGRect {
        return objc.msgSend(_self, "rectForMapRect:", core_foundation.CGRect, .{_mapRect});
    }

    pub fn mapRectForRect(_self: *@This(), _rect: core_foundation.CGRect) MapRect {
        return objc.msgSend(_self, "mapRectForRect:", MapRect, .{_rect});
    }

    pub fn canDrawMapRectZoomScale(_self: *@This(), _mapRect: MapRect, _zoomScale: ZoomScale) objc.BOOL {
        return objc.msgSend(_self, "canDrawMapRect:zoomScale:", objc.BOOL, .{ _mapRect, _zoomScale });
    }

    pub fn drawMapRectZoomScaleInContext(_self: *@This(), _mapRect: MapRect, _zoomScale: ZoomScale, _context: core_graphics.ContextRef) void {
        return objc.msgSend(_self, "drawMapRect:zoomScale:inContext:", void, .{ _mapRect, _zoomScale, _context });
    }

    pub fn setNeedsDisplay(_self: *@This()) void {
        return objc.msgSend(_self, "setNeedsDisplay", void, .{});
    }

    pub fn setNeedsDisplayInMapRect(_self: *@This(), _mapRect: MapRect) void {
        return objc.msgSend(_self, "setNeedsDisplayInMapRect:", void, .{_mapRect});
    }

    pub fn setNeedsDisplayInMapRectZoomScale(_self: *@This(), _mapRect: MapRect, _zoomScale: ZoomScale) void {
        return objc.msgSend(_self, "setNeedsDisplayInMapRect:zoomScale:", void, .{ _mapRect, _zoomScale });
    }

    pub fn overlay(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "overlay", ?*anyopaque, .{});
    }

    pub fn alpha(_self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(_self, "alpha", core_foundation.CGFloat, .{});
    }

    pub fn setAlpha(_self: *@This(), _alpha: core_foundation.CGFloat) void {
        return objc.msgSend(_self, "setAlpha:", void, .{_alpha});
    }

    pub fn contentScaleFactor(_self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(_self, "contentScaleFactor", core_foundation.CGFloat, .{});
    }

    pub fn blendMode(_self: *@This()) core_graphics.BlendMode {
        return objc.msgSend(_self, "blendMode", core_graphics.BlendMode, .{});
    }

    pub fn setBlendMode(_self: *@This(), _blendMode: core_graphics.BlendMode) void {
        return objc.msgSend(_self, "setBlendMode:", void, .{_blendMode});
    }

    pub fn createPath(_self: *@This()) void {
        return objc.msgSend(_self, "createPath", void, .{});
    }

    pub fn invalidatePath(_self: *@This()) void {
        return objc.msgSend(_self, "invalidatePath", void, .{});
    }

    pub fn applyStrokePropertiesToContextAtZoomScale(_self: *@This(), _context: core_graphics.ContextRef, _zoomScale: ZoomScale) void {
        return objc.msgSend(_self, "applyStrokePropertiesToContext:atZoomScale:", void, .{ _context, _zoomScale });
    }

    pub fn applyFillPropertiesToContextAtZoomScale(_self: *@This(), _context: core_graphics.ContextRef, _zoomScale: ZoomScale) void {
        return objc.msgSend(_self, "applyFillPropertiesToContext:atZoomScale:", void, .{ _context, _zoomScale });
    }

    pub fn strokePathInContext(_self: *@This(), _path: core_graphics.PathRef, _context: core_graphics.ContextRef) void {
        return objc.msgSend(_self, "strokePath:inContext:", void, .{ _path, _context });
    }

    pub fn fillPathInContext(_self: *@This(), _path: core_graphics.PathRef, _context: core_graphics.ContextRef) void {
        return objc.msgSend(_self, "fillPath:inContext:", void, .{ _path, _context });
    }

    pub fn fillColor(_self: *@This()) ?*app_kit.Color {
        return objc.msgSend(_self, "fillColor", ?*app_kit.Color, .{});
    }

    pub fn setFillColor(_self: *@This(), _fillColor: ?*app_kit.Color) void {
        return objc.msgSend(_self, "setFillColor:", void, .{_fillColor});
    }

    pub fn strokeColor(_self: *@This()) ?*app_kit.Color {
        return objc.msgSend(_self, "strokeColor", ?*app_kit.Color, .{});
    }

    pub fn setStrokeColor(_self: *@This(), _strokeColor: ?*app_kit.Color) void {
        return objc.msgSend(_self, "setStrokeColor:", void, .{_strokeColor});
    }

    pub fn lineWidth(_self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(_self, "lineWidth", core_foundation.CGFloat, .{});
    }

    pub fn setLineWidth(_self: *@This(), _lineWidth: core_foundation.CGFloat) void {
        return objc.msgSend(_self, "setLineWidth:", void, .{_lineWidth});
    }

    pub fn lineJoin(_self: *@This()) core_graphics.LineJoin {
        return objc.msgSend(_self, "lineJoin", core_graphics.LineJoin, .{});
    }

    pub fn setLineJoin(_self: *@This(), _lineJoin: core_graphics.LineJoin) void {
        return objc.msgSend(_self, "setLineJoin:", void, .{_lineJoin});
    }

    pub fn lineCap(_self: *@This()) core_graphics.LineCap {
        return objc.msgSend(_self, "lineCap", core_graphics.LineCap, .{});
    }

    pub fn setLineCap(_self: *@This(), _lineCap: core_graphics.LineCap) void {
        return objc.msgSend(_self, "setLineCap:", void, .{_lineCap});
    }

    pub fn miterLimit(_self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(_self, "miterLimit", core_foundation.CGFloat, .{});
    }

    pub fn setMiterLimit(_self: *@This(), _miterLimit: core_foundation.CGFloat) void {
        return objc.msgSend(_self, "setMiterLimit:", void, .{_miterLimit});
    }

    pub fn lineDashPhase(_self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(_self, "lineDashPhase", core_foundation.CGFloat, .{});
    }

    pub fn setLineDashPhase(_self: *@This(), _lineDashPhase: core_foundation.CGFloat) void {
        return objc.msgSend(_self, "setLineDashPhase:", void, .{_lineDashPhase});
    }

    pub fn lineDashPattern(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "lineDashPattern", ?*anyopaque, .{});
    }

    pub fn setLineDashPattern(_self: *@This(), _lineDashPattern: ?*anyopaque) void {
        return objc.msgSend(_self, "setLineDashPattern:", void, .{_lineDashPattern});
    }

    pub fn shouldRasterize(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "shouldRasterize", objc.BOOL, .{});
    }

    pub fn setShouldRasterize(_self: *@This(), _shouldRasterize: objc.BOOL) void {
        return objc.msgSend(_self, "setShouldRasterize:", void, .{_shouldRasterize});
    }

    pub fn path(_self: *@This()) core_graphics.PathRef {
        return objc.msgSend(_self, "path", core_graphics.PathRef, .{});
    }

    pub fn setPath(_self: *@This(), _path: core_graphics.PathRef) void {
        return objc.msgSend(_self, "setPath:", void, .{_path});
    }

    pub fn initWithPolyline(_self: *@This(), _polyline: ?*Polyline) *@This() {
        return objc.msgSend(_self, "initWithPolyline:", *@This(), .{_polyline});
    }

    pub fn polyline(_self: *@This()) ?*Polyline {
        return objc.msgSend(_self, "polyline", ?*Polyline, .{});
    }

    pub fn strokeStart(_self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(_self, "strokeStart", core_foundation.CGFloat, .{});
    }

    pub fn setStrokeStart(_self: *@This(), _strokeStart: core_foundation.CGFloat) void {
        return objc.msgSend(_self, "setStrokeStart:", void, .{_strokeStart});
    }

    pub fn strokeEnd(_self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(_self, "strokeEnd", core_foundation.CGFloat, .{});
    }

    pub fn setStrokeEnd(_self: *@This(), _strokeEnd: core_foundation.CGFloat) void {
        return objc.msgSend(_self, "setStrokeEnd:", void, .{_strokeEnd});
    }
};

/// https://developer.apple.com/documentation/MapKit/MKGradientPolylineRenderer?language=objc
pub const GradientPolylineRenderer = opaque {
    pub const Internal = objc.ExternClass("MKGradientPolylineRenderer", @This(), PolylineRenderer, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "description", ?*foundation.String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "debugDescription", ?*foundation.String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*foundation.Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*foundation.MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*foundation.MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*foundation.MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*foundation.MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn initWithOverlay(_self: *@This(), _overlay: ?*anyopaque) *@This() {
        return objc.msgSend(_self, "initWithOverlay:", *@This(), .{_overlay});
    }

    pub fn pointForMapPoint(_self: *@This(), _mapPoint: MapPoint) core_foundation.CGPoint {
        return objc.msgSend(_self, "pointForMapPoint:", core_foundation.CGPoint, .{_mapPoint});
    }

    pub fn mapPointForPoint(_self: *@This(), _point: core_foundation.CGPoint) MapPoint {
        return objc.msgSend(_self, "mapPointForPoint:", MapPoint, .{_point});
    }

    pub fn rectForMapRect(_self: *@This(), _mapRect: MapRect) core_foundation.CGRect {
        return objc.msgSend(_self, "rectForMapRect:", core_foundation.CGRect, .{_mapRect});
    }

    pub fn mapRectForRect(_self: *@This(), _rect: core_foundation.CGRect) MapRect {
        return objc.msgSend(_self, "mapRectForRect:", MapRect, .{_rect});
    }

    pub fn canDrawMapRectZoomScale(_self: *@This(), _mapRect: MapRect, _zoomScale: ZoomScale) objc.BOOL {
        return objc.msgSend(_self, "canDrawMapRect:zoomScale:", objc.BOOL, .{ _mapRect, _zoomScale });
    }

    pub fn drawMapRectZoomScaleInContext(_self: *@This(), _mapRect: MapRect, _zoomScale: ZoomScale, _context: core_graphics.ContextRef) void {
        return objc.msgSend(_self, "drawMapRect:zoomScale:inContext:", void, .{ _mapRect, _zoomScale, _context });
    }

    pub fn setNeedsDisplay(_self: *@This()) void {
        return objc.msgSend(_self, "setNeedsDisplay", void, .{});
    }

    pub fn setNeedsDisplayInMapRect(_self: *@This(), _mapRect: MapRect) void {
        return objc.msgSend(_self, "setNeedsDisplayInMapRect:", void, .{_mapRect});
    }

    pub fn setNeedsDisplayInMapRectZoomScale(_self: *@This(), _mapRect: MapRect, _zoomScale: ZoomScale) void {
        return objc.msgSend(_self, "setNeedsDisplayInMapRect:zoomScale:", void, .{ _mapRect, _zoomScale });
    }

    pub fn overlay(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "overlay", ?*anyopaque, .{});
    }

    pub fn alpha(_self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(_self, "alpha", core_foundation.CGFloat, .{});
    }

    pub fn setAlpha(_self: *@This(), _alpha: core_foundation.CGFloat) void {
        return objc.msgSend(_self, "setAlpha:", void, .{_alpha});
    }

    pub fn contentScaleFactor(_self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(_self, "contentScaleFactor", core_foundation.CGFloat, .{});
    }

    pub fn blendMode(_self: *@This()) core_graphics.BlendMode {
        return objc.msgSend(_self, "blendMode", core_graphics.BlendMode, .{});
    }

    pub fn setBlendMode(_self: *@This(), _blendMode: core_graphics.BlendMode) void {
        return objc.msgSend(_self, "setBlendMode:", void, .{_blendMode});
    }

    pub fn createPath(_self: *@This()) void {
        return objc.msgSend(_self, "createPath", void, .{});
    }

    pub fn invalidatePath(_self: *@This()) void {
        return objc.msgSend(_self, "invalidatePath", void, .{});
    }

    pub fn applyStrokePropertiesToContextAtZoomScale(_self: *@This(), _context: core_graphics.ContextRef, _zoomScale: ZoomScale) void {
        return objc.msgSend(_self, "applyStrokePropertiesToContext:atZoomScale:", void, .{ _context, _zoomScale });
    }

    pub fn applyFillPropertiesToContextAtZoomScale(_self: *@This(), _context: core_graphics.ContextRef, _zoomScale: ZoomScale) void {
        return objc.msgSend(_self, "applyFillPropertiesToContext:atZoomScale:", void, .{ _context, _zoomScale });
    }

    pub fn strokePathInContext(_self: *@This(), _path: core_graphics.PathRef, _context: core_graphics.ContextRef) void {
        return objc.msgSend(_self, "strokePath:inContext:", void, .{ _path, _context });
    }

    pub fn fillPathInContext(_self: *@This(), _path: core_graphics.PathRef, _context: core_graphics.ContextRef) void {
        return objc.msgSend(_self, "fillPath:inContext:", void, .{ _path, _context });
    }

    pub fn fillColor(_self: *@This()) ?*app_kit.Color {
        return objc.msgSend(_self, "fillColor", ?*app_kit.Color, .{});
    }

    pub fn setFillColor(_self: *@This(), _fillColor: ?*app_kit.Color) void {
        return objc.msgSend(_self, "setFillColor:", void, .{_fillColor});
    }

    pub fn strokeColor(_self: *@This()) ?*app_kit.Color {
        return objc.msgSend(_self, "strokeColor", ?*app_kit.Color, .{});
    }

    pub fn setStrokeColor(_self: *@This(), _strokeColor: ?*app_kit.Color) void {
        return objc.msgSend(_self, "setStrokeColor:", void, .{_strokeColor});
    }

    pub fn lineWidth(_self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(_self, "lineWidth", core_foundation.CGFloat, .{});
    }

    pub fn setLineWidth(_self: *@This(), _lineWidth: core_foundation.CGFloat) void {
        return objc.msgSend(_self, "setLineWidth:", void, .{_lineWidth});
    }

    pub fn lineJoin(_self: *@This()) core_graphics.LineJoin {
        return objc.msgSend(_self, "lineJoin", core_graphics.LineJoin, .{});
    }

    pub fn setLineJoin(_self: *@This(), _lineJoin: core_graphics.LineJoin) void {
        return objc.msgSend(_self, "setLineJoin:", void, .{_lineJoin});
    }

    pub fn lineCap(_self: *@This()) core_graphics.LineCap {
        return objc.msgSend(_self, "lineCap", core_graphics.LineCap, .{});
    }

    pub fn setLineCap(_self: *@This(), _lineCap: core_graphics.LineCap) void {
        return objc.msgSend(_self, "setLineCap:", void, .{_lineCap});
    }

    pub fn miterLimit(_self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(_self, "miterLimit", core_foundation.CGFloat, .{});
    }

    pub fn setMiterLimit(_self: *@This(), _miterLimit: core_foundation.CGFloat) void {
        return objc.msgSend(_self, "setMiterLimit:", void, .{_miterLimit});
    }

    pub fn lineDashPhase(_self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(_self, "lineDashPhase", core_foundation.CGFloat, .{});
    }

    pub fn setLineDashPhase(_self: *@This(), _lineDashPhase: core_foundation.CGFloat) void {
        return objc.msgSend(_self, "setLineDashPhase:", void, .{_lineDashPhase});
    }

    pub fn lineDashPattern(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "lineDashPattern", ?*anyopaque, .{});
    }

    pub fn setLineDashPattern(_self: *@This(), _lineDashPattern: ?*anyopaque) void {
        return objc.msgSend(_self, "setLineDashPattern:", void, .{_lineDashPattern});
    }

    pub fn shouldRasterize(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "shouldRasterize", objc.BOOL, .{});
    }

    pub fn setShouldRasterize(_self: *@This(), _shouldRasterize: objc.BOOL) void {
        return objc.msgSend(_self, "setShouldRasterize:", void, .{_shouldRasterize});
    }

    pub fn path(_self: *@This()) core_graphics.PathRef {
        return objc.msgSend(_self, "path", core_graphics.PathRef, .{});
    }

    pub fn setPath(_self: *@This(), _path: core_graphics.PathRef) void {
        return objc.msgSend(_self, "setPath:", void, .{_path});
    }

    pub fn initWithPolyline(_self: *@This(), _polyline: ?*Polyline) *@This() {
        return objc.msgSend(_self, "initWithPolyline:", *@This(), .{_polyline});
    }

    pub fn polyline(_self: *@This()) ?*Polyline {
        return objc.msgSend(_self, "polyline", ?*Polyline, .{});
    }

    pub fn strokeStart(_self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(_self, "strokeStart", core_foundation.CGFloat, .{});
    }

    pub fn setStrokeStart(_self: *@This(), _strokeStart: core_foundation.CGFloat) void {
        return objc.msgSend(_self, "setStrokeStart:", void, .{_strokeStart});
    }

    pub fn strokeEnd(_self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(_self, "strokeEnd", core_foundation.CGFloat, .{});
    }

    pub fn setStrokeEnd(_self: *@This(), _strokeEnd: core_foundation.CGFloat) void {
        return objc.msgSend(_self, "setStrokeEnd:", void, .{_strokeEnd});
    }

    pub fn setColorsAtLocations(_self: *@This(), _colors: ?*anyopaque, _locations: ?*anyopaque) void {
        return objc.msgSend(_self, "setColors:atLocations:", void, .{ _colors, _locations });
    }

    pub fn locations(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "locations", ?*anyopaque, .{});
    }

    pub fn colors(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "colors", ?*anyopaque, .{});
    }
};

/// https://developer.apple.com/documentation/MapKit/MKPolygonRenderer?language=objc
pub const PolygonRenderer = opaque {
    pub const Internal = objc.ExternClass("MKPolygonRenderer", @This(), OverlayPathRenderer, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "description", ?*foundation.String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "debugDescription", ?*foundation.String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*foundation.Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*foundation.MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*foundation.MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*foundation.MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*foundation.MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn initWithOverlay(_self: *@This(), _overlay: ?*anyopaque) *@This() {
        return objc.msgSend(_self, "initWithOverlay:", *@This(), .{_overlay});
    }

    pub fn pointForMapPoint(_self: *@This(), _mapPoint: MapPoint) core_foundation.CGPoint {
        return objc.msgSend(_self, "pointForMapPoint:", core_foundation.CGPoint, .{_mapPoint});
    }

    pub fn mapPointForPoint(_self: *@This(), _point: core_foundation.CGPoint) MapPoint {
        return objc.msgSend(_self, "mapPointForPoint:", MapPoint, .{_point});
    }

    pub fn rectForMapRect(_self: *@This(), _mapRect: MapRect) core_foundation.CGRect {
        return objc.msgSend(_self, "rectForMapRect:", core_foundation.CGRect, .{_mapRect});
    }

    pub fn mapRectForRect(_self: *@This(), _rect: core_foundation.CGRect) MapRect {
        return objc.msgSend(_self, "mapRectForRect:", MapRect, .{_rect});
    }

    pub fn canDrawMapRectZoomScale(_self: *@This(), _mapRect: MapRect, _zoomScale: ZoomScale) objc.BOOL {
        return objc.msgSend(_self, "canDrawMapRect:zoomScale:", objc.BOOL, .{ _mapRect, _zoomScale });
    }

    pub fn drawMapRectZoomScaleInContext(_self: *@This(), _mapRect: MapRect, _zoomScale: ZoomScale, _context: core_graphics.ContextRef) void {
        return objc.msgSend(_self, "drawMapRect:zoomScale:inContext:", void, .{ _mapRect, _zoomScale, _context });
    }

    pub fn setNeedsDisplay(_self: *@This()) void {
        return objc.msgSend(_self, "setNeedsDisplay", void, .{});
    }

    pub fn setNeedsDisplayInMapRect(_self: *@This(), _mapRect: MapRect) void {
        return objc.msgSend(_self, "setNeedsDisplayInMapRect:", void, .{_mapRect});
    }

    pub fn setNeedsDisplayInMapRectZoomScale(_self: *@This(), _mapRect: MapRect, _zoomScale: ZoomScale) void {
        return objc.msgSend(_self, "setNeedsDisplayInMapRect:zoomScale:", void, .{ _mapRect, _zoomScale });
    }

    pub fn overlay(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "overlay", ?*anyopaque, .{});
    }

    pub fn alpha(_self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(_self, "alpha", core_foundation.CGFloat, .{});
    }

    pub fn setAlpha(_self: *@This(), _alpha: core_foundation.CGFloat) void {
        return objc.msgSend(_self, "setAlpha:", void, .{_alpha});
    }

    pub fn contentScaleFactor(_self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(_self, "contentScaleFactor", core_foundation.CGFloat, .{});
    }

    pub fn blendMode(_self: *@This()) core_graphics.BlendMode {
        return objc.msgSend(_self, "blendMode", core_graphics.BlendMode, .{});
    }

    pub fn setBlendMode(_self: *@This(), _blendMode: core_graphics.BlendMode) void {
        return objc.msgSend(_self, "setBlendMode:", void, .{_blendMode});
    }

    pub fn createPath(_self: *@This()) void {
        return objc.msgSend(_self, "createPath", void, .{});
    }

    pub fn invalidatePath(_self: *@This()) void {
        return objc.msgSend(_self, "invalidatePath", void, .{});
    }

    pub fn applyStrokePropertiesToContextAtZoomScale(_self: *@This(), _context: core_graphics.ContextRef, _zoomScale: ZoomScale) void {
        return objc.msgSend(_self, "applyStrokePropertiesToContext:atZoomScale:", void, .{ _context, _zoomScale });
    }

    pub fn applyFillPropertiesToContextAtZoomScale(_self: *@This(), _context: core_graphics.ContextRef, _zoomScale: ZoomScale) void {
        return objc.msgSend(_self, "applyFillPropertiesToContext:atZoomScale:", void, .{ _context, _zoomScale });
    }

    pub fn strokePathInContext(_self: *@This(), _path: core_graphics.PathRef, _context: core_graphics.ContextRef) void {
        return objc.msgSend(_self, "strokePath:inContext:", void, .{ _path, _context });
    }

    pub fn fillPathInContext(_self: *@This(), _path: core_graphics.PathRef, _context: core_graphics.ContextRef) void {
        return objc.msgSend(_self, "fillPath:inContext:", void, .{ _path, _context });
    }

    pub fn fillColor(_self: *@This()) ?*app_kit.Color {
        return objc.msgSend(_self, "fillColor", ?*app_kit.Color, .{});
    }

    pub fn setFillColor(_self: *@This(), _fillColor: ?*app_kit.Color) void {
        return objc.msgSend(_self, "setFillColor:", void, .{_fillColor});
    }

    pub fn strokeColor(_self: *@This()) ?*app_kit.Color {
        return objc.msgSend(_self, "strokeColor", ?*app_kit.Color, .{});
    }

    pub fn setStrokeColor(_self: *@This(), _strokeColor: ?*app_kit.Color) void {
        return objc.msgSend(_self, "setStrokeColor:", void, .{_strokeColor});
    }

    pub fn lineWidth(_self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(_self, "lineWidth", core_foundation.CGFloat, .{});
    }

    pub fn setLineWidth(_self: *@This(), _lineWidth: core_foundation.CGFloat) void {
        return objc.msgSend(_self, "setLineWidth:", void, .{_lineWidth});
    }

    pub fn lineJoin(_self: *@This()) core_graphics.LineJoin {
        return objc.msgSend(_self, "lineJoin", core_graphics.LineJoin, .{});
    }

    pub fn setLineJoin(_self: *@This(), _lineJoin: core_graphics.LineJoin) void {
        return objc.msgSend(_self, "setLineJoin:", void, .{_lineJoin});
    }

    pub fn lineCap(_self: *@This()) core_graphics.LineCap {
        return objc.msgSend(_self, "lineCap", core_graphics.LineCap, .{});
    }

    pub fn setLineCap(_self: *@This(), _lineCap: core_graphics.LineCap) void {
        return objc.msgSend(_self, "setLineCap:", void, .{_lineCap});
    }

    pub fn miterLimit(_self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(_self, "miterLimit", core_foundation.CGFloat, .{});
    }

    pub fn setMiterLimit(_self: *@This(), _miterLimit: core_foundation.CGFloat) void {
        return objc.msgSend(_self, "setMiterLimit:", void, .{_miterLimit});
    }

    pub fn lineDashPhase(_self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(_self, "lineDashPhase", core_foundation.CGFloat, .{});
    }

    pub fn setLineDashPhase(_self: *@This(), _lineDashPhase: core_foundation.CGFloat) void {
        return objc.msgSend(_self, "setLineDashPhase:", void, .{_lineDashPhase});
    }

    pub fn lineDashPattern(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "lineDashPattern", ?*anyopaque, .{});
    }

    pub fn setLineDashPattern(_self: *@This(), _lineDashPattern: ?*anyopaque) void {
        return objc.msgSend(_self, "setLineDashPattern:", void, .{_lineDashPattern});
    }

    pub fn shouldRasterize(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "shouldRasterize", objc.BOOL, .{});
    }

    pub fn setShouldRasterize(_self: *@This(), _shouldRasterize: objc.BOOL) void {
        return objc.msgSend(_self, "setShouldRasterize:", void, .{_shouldRasterize});
    }

    pub fn path(_self: *@This()) core_graphics.PathRef {
        return objc.msgSend(_self, "path", core_graphics.PathRef, .{});
    }

    pub fn setPath(_self: *@This(), _path: core_graphics.PathRef) void {
        return objc.msgSend(_self, "setPath:", void, .{_path});
    }

    pub fn initWithPolygon(_self: *@This(), _polygon: ?*Polygon) *@This() {
        return objc.msgSend(_self, "initWithPolygon:", *@This(), .{_polygon});
    }

    pub fn polygon(_self: *@This()) ?*Polygon {
        return objc.msgSend(_self, "polygon", ?*Polygon, .{});
    }

    pub fn strokeStart(_self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(_self, "strokeStart", core_foundation.CGFloat, .{});
    }

    pub fn setStrokeStart(_self: *@This(), _strokeStart: core_foundation.CGFloat) void {
        return objc.msgSend(_self, "setStrokeStart:", void, .{_strokeStart});
    }

    pub fn strokeEnd(_self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(_self, "strokeEnd", core_foundation.CGFloat, .{});
    }

    pub fn setStrokeEnd(_self: *@This(), _strokeEnd: core_foundation.CGFloat) void {
        return objc.msgSend(_self, "setStrokeEnd:", void, .{_strokeEnd});
    }
};

/// https://developer.apple.com/documentation/MapKit/MKCircleRenderer?language=objc
pub const CircleRenderer = opaque {
    pub const Internal = objc.ExternClass("MKCircleRenderer", @This(), OverlayPathRenderer, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "description", ?*foundation.String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "debugDescription", ?*foundation.String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*foundation.Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*foundation.MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*foundation.MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*foundation.MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*foundation.MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn initWithOverlay(_self: *@This(), _overlay: ?*anyopaque) *@This() {
        return objc.msgSend(_self, "initWithOverlay:", *@This(), .{_overlay});
    }

    pub fn pointForMapPoint(_self: *@This(), _mapPoint: MapPoint) core_foundation.CGPoint {
        return objc.msgSend(_self, "pointForMapPoint:", core_foundation.CGPoint, .{_mapPoint});
    }

    pub fn mapPointForPoint(_self: *@This(), _point: core_foundation.CGPoint) MapPoint {
        return objc.msgSend(_self, "mapPointForPoint:", MapPoint, .{_point});
    }

    pub fn rectForMapRect(_self: *@This(), _mapRect: MapRect) core_foundation.CGRect {
        return objc.msgSend(_self, "rectForMapRect:", core_foundation.CGRect, .{_mapRect});
    }

    pub fn mapRectForRect(_self: *@This(), _rect: core_foundation.CGRect) MapRect {
        return objc.msgSend(_self, "mapRectForRect:", MapRect, .{_rect});
    }

    pub fn canDrawMapRectZoomScale(_self: *@This(), _mapRect: MapRect, _zoomScale: ZoomScale) objc.BOOL {
        return objc.msgSend(_self, "canDrawMapRect:zoomScale:", objc.BOOL, .{ _mapRect, _zoomScale });
    }

    pub fn drawMapRectZoomScaleInContext(_self: *@This(), _mapRect: MapRect, _zoomScale: ZoomScale, _context: core_graphics.ContextRef) void {
        return objc.msgSend(_self, "drawMapRect:zoomScale:inContext:", void, .{ _mapRect, _zoomScale, _context });
    }

    pub fn setNeedsDisplay(_self: *@This()) void {
        return objc.msgSend(_self, "setNeedsDisplay", void, .{});
    }

    pub fn setNeedsDisplayInMapRect(_self: *@This(), _mapRect: MapRect) void {
        return objc.msgSend(_self, "setNeedsDisplayInMapRect:", void, .{_mapRect});
    }

    pub fn setNeedsDisplayInMapRectZoomScale(_self: *@This(), _mapRect: MapRect, _zoomScale: ZoomScale) void {
        return objc.msgSend(_self, "setNeedsDisplayInMapRect:zoomScale:", void, .{ _mapRect, _zoomScale });
    }

    pub fn overlay(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "overlay", ?*anyopaque, .{});
    }

    pub fn alpha(_self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(_self, "alpha", core_foundation.CGFloat, .{});
    }

    pub fn setAlpha(_self: *@This(), _alpha: core_foundation.CGFloat) void {
        return objc.msgSend(_self, "setAlpha:", void, .{_alpha});
    }

    pub fn contentScaleFactor(_self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(_self, "contentScaleFactor", core_foundation.CGFloat, .{});
    }

    pub fn blendMode(_self: *@This()) core_graphics.BlendMode {
        return objc.msgSend(_self, "blendMode", core_graphics.BlendMode, .{});
    }

    pub fn setBlendMode(_self: *@This(), _blendMode: core_graphics.BlendMode) void {
        return objc.msgSend(_self, "setBlendMode:", void, .{_blendMode});
    }

    pub fn createPath(_self: *@This()) void {
        return objc.msgSend(_self, "createPath", void, .{});
    }

    pub fn invalidatePath(_self: *@This()) void {
        return objc.msgSend(_self, "invalidatePath", void, .{});
    }

    pub fn applyStrokePropertiesToContextAtZoomScale(_self: *@This(), _context: core_graphics.ContextRef, _zoomScale: ZoomScale) void {
        return objc.msgSend(_self, "applyStrokePropertiesToContext:atZoomScale:", void, .{ _context, _zoomScale });
    }

    pub fn applyFillPropertiesToContextAtZoomScale(_self: *@This(), _context: core_graphics.ContextRef, _zoomScale: ZoomScale) void {
        return objc.msgSend(_self, "applyFillPropertiesToContext:atZoomScale:", void, .{ _context, _zoomScale });
    }

    pub fn strokePathInContext(_self: *@This(), _path: core_graphics.PathRef, _context: core_graphics.ContextRef) void {
        return objc.msgSend(_self, "strokePath:inContext:", void, .{ _path, _context });
    }

    pub fn fillPathInContext(_self: *@This(), _path: core_graphics.PathRef, _context: core_graphics.ContextRef) void {
        return objc.msgSend(_self, "fillPath:inContext:", void, .{ _path, _context });
    }

    pub fn fillColor(_self: *@This()) ?*app_kit.Color {
        return objc.msgSend(_self, "fillColor", ?*app_kit.Color, .{});
    }

    pub fn setFillColor(_self: *@This(), _fillColor: ?*app_kit.Color) void {
        return objc.msgSend(_self, "setFillColor:", void, .{_fillColor});
    }

    pub fn strokeColor(_self: *@This()) ?*app_kit.Color {
        return objc.msgSend(_self, "strokeColor", ?*app_kit.Color, .{});
    }

    pub fn setStrokeColor(_self: *@This(), _strokeColor: ?*app_kit.Color) void {
        return objc.msgSend(_self, "setStrokeColor:", void, .{_strokeColor});
    }

    pub fn lineWidth(_self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(_self, "lineWidth", core_foundation.CGFloat, .{});
    }

    pub fn setLineWidth(_self: *@This(), _lineWidth: core_foundation.CGFloat) void {
        return objc.msgSend(_self, "setLineWidth:", void, .{_lineWidth});
    }

    pub fn lineJoin(_self: *@This()) core_graphics.LineJoin {
        return objc.msgSend(_self, "lineJoin", core_graphics.LineJoin, .{});
    }

    pub fn setLineJoin(_self: *@This(), _lineJoin: core_graphics.LineJoin) void {
        return objc.msgSend(_self, "setLineJoin:", void, .{_lineJoin});
    }

    pub fn lineCap(_self: *@This()) core_graphics.LineCap {
        return objc.msgSend(_self, "lineCap", core_graphics.LineCap, .{});
    }

    pub fn setLineCap(_self: *@This(), _lineCap: core_graphics.LineCap) void {
        return objc.msgSend(_self, "setLineCap:", void, .{_lineCap});
    }

    pub fn miterLimit(_self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(_self, "miterLimit", core_foundation.CGFloat, .{});
    }

    pub fn setMiterLimit(_self: *@This(), _miterLimit: core_foundation.CGFloat) void {
        return objc.msgSend(_self, "setMiterLimit:", void, .{_miterLimit});
    }

    pub fn lineDashPhase(_self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(_self, "lineDashPhase", core_foundation.CGFloat, .{});
    }

    pub fn setLineDashPhase(_self: *@This(), _lineDashPhase: core_foundation.CGFloat) void {
        return objc.msgSend(_self, "setLineDashPhase:", void, .{_lineDashPhase});
    }

    pub fn lineDashPattern(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "lineDashPattern", ?*anyopaque, .{});
    }

    pub fn setLineDashPattern(_self: *@This(), _lineDashPattern: ?*anyopaque) void {
        return objc.msgSend(_self, "setLineDashPattern:", void, .{_lineDashPattern});
    }

    pub fn shouldRasterize(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "shouldRasterize", objc.BOOL, .{});
    }

    pub fn setShouldRasterize(_self: *@This(), _shouldRasterize: objc.BOOL) void {
        return objc.msgSend(_self, "setShouldRasterize:", void, .{_shouldRasterize});
    }

    pub fn path(_self: *@This()) core_graphics.PathRef {
        return objc.msgSend(_self, "path", core_graphics.PathRef, .{});
    }

    pub fn setPath(_self: *@This(), _path: core_graphics.PathRef) void {
        return objc.msgSend(_self, "setPath:", void, .{_path});
    }

    pub fn initWithCircle(_self: *@This(), _circle: ?*Circle) *@This() {
        return objc.msgSend(_self, "initWithCircle:", *@This(), .{_circle});
    }

    pub fn circle(_self: *@This()) ?*Circle {
        return objc.msgSend(_self, "circle", ?*Circle, .{});
    }

    pub fn strokeStart(_self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(_self, "strokeStart", core_foundation.CGFloat, .{});
    }

    pub fn setStrokeStart(_self: *@This(), _strokeStart: core_foundation.CGFloat) void {
        return objc.msgSend(_self, "setStrokeStart:", void, .{_strokeStart});
    }

    pub fn strokeEnd(_self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(_self, "strokeEnd", core_foundation.CGFloat, .{});
    }

    pub fn setStrokeEnd(_self: *@This(), _strokeEnd: core_foundation.CGFloat) void {
        return objc.msgSend(_self, "setStrokeEnd:", void, .{_strokeEnd});
    }
};

/// https://developer.apple.com/documentation/MapKit/MKPointOfInterestFilter?language=objc
pub const PointOfInterestFilter = opaque {
    pub const Internal = objc.ExternClass("MKPointOfInterestFilter", @This(), objc.NSObject, &.{ foundation.SecureCoding, foundation.Copying });
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "description", ?*foundation.String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "debugDescription", ?*foundation.String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*foundation.Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*foundation.MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*foundation.MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*foundation.MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*foundation.MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*foundation.Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*foundation.Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn supportsSecureCoding() objc.BOOL {
        return objc.msgSend(Internal.class(), "supportsSecureCoding", objc.BOOL, .{});
    }

    pub fn initIncludingCategories(_self: *@This(), _categories: ?*anyopaque) *@This() {
        return objc.msgSend(_self, "initIncludingCategories:", *@This(), .{_categories});
    }

    pub fn initExcludingCategories(_self: *@This(), _categories: ?*anyopaque) *@This() {
        return objc.msgSend(_self, "initExcludingCategories:", *@This(), .{_categories});
    }

    pub fn includesCategory(_self: *@This(), _category: PointOfInterestCategory) objc.BOOL {
        return objc.msgSend(_self, "includesCategory:", objc.BOOL, .{_category});
    }

    pub fn excludesCategory(_self: *@This(), _category: PointOfInterestCategory) objc.BOOL {
        return objc.msgSend(_self, "excludesCategory:", objc.BOOL, .{_category});
    }

    pub fn filterIncludingAllCategories() ?*PointOfInterestFilter {
        return objc.msgSend(Internal.class(), "filterIncludingAllCategories", ?*PointOfInterestFilter, .{});
    }

    pub fn filterExcludingAllCategories() ?*PointOfInterestFilter {
        return objc.msgSend(Internal.class(), "filterExcludingAllCategories", ?*PointOfInterestFilter, .{});
    }
};

/// https://developer.apple.com/documentation/MapKit/MKLocalPointsOfInterestRequest?language=objc
pub const LocalPointsOfInterestRequest = opaque {
    pub const Internal = objc.ExternClass("MKLocalPointsOfInterestRequest", @This(), objc.NSObject, &.{foundation.Copying});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "description", ?*foundation.String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "debugDescription", ?*foundation.String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*foundation.Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*foundation.MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*foundation.MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*foundation.MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*foundation.MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn initWithCenterCoordinateRadius(_self: *@This(), _coordinate: core_location.LocationCoordinate2D, _radius: core_location.LocationDistance) *@This() {
        return objc.msgSend(_self, "initWithCenterCoordinate:radius:", *@This(), .{ _coordinate, _radius });
    }

    pub fn initWithCoordinateRegion(_self: *@This(), _region: CoordinateRegion) *@This() {
        return objc.msgSend(_self, "initWithCoordinateRegion:", *@This(), .{_region});
    }

    pub fn coordinate(_self: *@This()) core_location.LocationCoordinate2D {
        return objc.msgSend(_self, "coordinate", core_location.LocationCoordinate2D, .{});
    }

    pub fn radius(_self: *@This()) core_location.LocationDistance {
        return objc.msgSend(_self, "radius", core_location.LocationDistance, .{});
    }

    pub fn region(_self: *@This()) CoordinateRegion {
        return objc.msgSend(_self, "region", CoordinateRegion, .{});
    }

    pub fn pointOfInterestFilter(_self: *@This()) ?*PointOfInterestFilter {
        return objc.msgSend(_self, "pointOfInterestFilter", ?*PointOfInterestFilter, .{});
    }

    pub fn setPointOfInterestFilter(_self: *@This(), _pointOfInterestFilter: ?*PointOfInterestFilter) void {
        return objc.msgSend(_self, "setPointOfInterestFilter:", void, .{_pointOfInterestFilter});
    }
};

pub const LocalSearchCompletionHandler = *const fn (?*LocalSearchResponse, ?*foundation.Error) callconv(.C) void;

/// https://developer.apple.com/documentation/MapKit/MKLocalSearch?language=objc
pub const LocalSearch = opaque {
    pub const Internal = objc.ExternClass("MKLocalSearch", @This(), objc.NSObject, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "description", ?*foundation.String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "debugDescription", ?*foundation.String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*foundation.Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*foundation.MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*foundation.MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*foundation.MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*foundation.MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn initWithRequest(_self: *@This(), _request: ?*LocalSearchRequest) *@This() {
        return objc.msgSend(_self, "initWithRequest:", *@This(), .{_request});
    }

    pub fn initWithPointsOfInterestRequest(_self: *@This(), _request: ?*LocalPointsOfInterestRequest) *@This() {
        return objc.msgSend(_self, "initWithPointsOfInterestRequest:", *@This(), .{_request});
    }

    pub fn startWithCompletionHandler(_self: *@This(), _completionHandler: LocalSearchCompletionHandler) void {
        return objc.msgSend(_self, "startWithCompletionHandler:", void, .{_completionHandler});
    }

    pub fn cancel(_self: *@This()) void {
        return objc.msgSend(_self, "cancel", void, .{});
    }

    pub fn isSearching(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isSearching", objc.BOOL, .{});
    }
};

pub const LocalSearchResultType = objc.NSUInteger;
pub const LocalSearchResultType_Address: objc.NSUInteger = 1;
pub const LocalSearchResultType_PointOfInterest: objc.NSUInteger = 2;
pub const LocalSearchResultType_PhysicalFeature: objc.NSUInteger = 4;

/// https://developer.apple.com/documentation/MapKit/MKLocalSearchRequest?language=objc
pub const LocalSearchRequest = opaque {
    pub const Internal = objc.ExternClass("MKLocalSearchRequest", @This(), objc.NSObject, &.{foundation.Copying});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "description", ?*foundation.String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "debugDescription", ?*foundation.String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*foundation.Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*foundation.MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*foundation.MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*foundation.MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*foundation.MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn initWithNaturalLanguageQuery(_self: *@This(), _naturalLanguageQuery: ?*foundation.String) *@This() {
        return objc.msgSend(_self, "initWithNaturalLanguageQuery:", *@This(), .{_naturalLanguageQuery});
    }

    pub fn initWithNaturalLanguageQueryRegion(_self: *@This(), _naturalLanguageQuery: ?*foundation.String, _region: CoordinateRegion) *@This() {
        return objc.msgSend(_self, "initWithNaturalLanguageQuery:region:", *@This(), .{ _naturalLanguageQuery, _region });
    }

    pub fn naturalLanguageQuery(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "naturalLanguageQuery", ?*foundation.String, .{});
    }

    pub fn setNaturalLanguageQuery(_self: *@This(), _naturalLanguageQuery: ?*foundation.String) void {
        return objc.msgSend(_self, "setNaturalLanguageQuery:", void, .{_naturalLanguageQuery});
    }

    pub fn region(_self: *@This()) CoordinateRegion {
        return objc.msgSend(_self, "region", CoordinateRegion, .{});
    }

    pub fn setRegion(_self: *@This(), _region: CoordinateRegion) void {
        return objc.msgSend(_self, "setRegion:", void, .{_region});
    }

    pub fn regionPriority(_self: *@This()) LocalSearchRegionPriority {
        return objc.msgSend(_self, "regionPriority", LocalSearchRegionPriority, .{});
    }

    pub fn setRegionPriority(_self: *@This(), _regionPriority: LocalSearchRegionPriority) void {
        return objc.msgSend(_self, "setRegionPriority:", void, .{_regionPriority});
    }

    pub fn resultTypes(_self: *@This()) LocalSearchResultType {
        return objc.msgSend(_self, "resultTypes", LocalSearchResultType, .{});
    }

    pub fn setResultTypes(_self: *@This(), _resultTypes: LocalSearchResultType) void {
        return objc.msgSend(_self, "setResultTypes:", void, .{_resultTypes});
    }

    pub fn pointOfInterestFilter(_self: *@This()) ?*PointOfInterestFilter {
        return objc.msgSend(_self, "pointOfInterestFilter", ?*PointOfInterestFilter, .{});
    }

    pub fn setPointOfInterestFilter(_self: *@This(), _pointOfInterestFilter: ?*PointOfInterestFilter) void {
        return objc.msgSend(_self, "setPointOfInterestFilter:", void, .{_pointOfInterestFilter});
    }

    pub fn addressFilter(_self: *@This()) ?*AddressFilter {
        return objc.msgSend(_self, "addressFilter", ?*AddressFilter, .{});
    }

    pub fn setAddressFilter(_self: *@This(), _addressFilter: ?*AddressFilter) void {
        return objc.msgSend(_self, "setAddressFilter:", void, .{_addressFilter});
    }
};

pub const SearchCompletionFilterType = objc.NSInteger;
pub const SearchCompletionFilterType_LocationsAndQueries: objc.NSInteger = 0;
pub const SearchCompletionFilterType_LocationsOnly: objc.NSInteger = 1;

pub const LocalSearchCompleterResultType = objc.NSUInteger;
pub const LocalSearchCompleterResultType_Address: objc.NSUInteger = 1;
pub const LocalSearchCompleterResultType_PointOfInterest: objc.NSUInteger = 2;
pub const LocalSearchCompleterResultType_Query: objc.NSUInteger = 4;
pub const LocalSearchCompleterResultType_PhysicalFeature: objc.NSUInteger = 8;

/// https://developer.apple.com/documentation/MapKit/MKLocalSearchCompleter?language=objc
pub const LocalSearchCompleter = opaque {
    pub const Internal = objc.ExternClass("MKLocalSearchCompleter", @This(), objc.NSObject, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "description", ?*foundation.String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "debugDescription", ?*foundation.String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*foundation.Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*foundation.MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*foundation.MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*foundation.MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*foundation.MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn cancel(_self: *@This()) void {
        return objc.msgSend(_self, "cancel", void, .{});
    }

    pub fn queryFragment(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "queryFragment", ?*foundation.String, .{});
    }

    pub fn setQueryFragment(_self: *@This(), _queryFragment: ?*foundation.String) void {
        return objc.msgSend(_self, "setQueryFragment:", void, .{_queryFragment});
    }

    pub fn region(_self: *@This()) CoordinateRegion {
        return objc.msgSend(_self, "region", CoordinateRegion, .{});
    }

    pub fn setRegion(_self: *@This(), _region: CoordinateRegion) void {
        return objc.msgSend(_self, "setRegion:", void, .{_region});
    }

    pub fn regionPriority(_self: *@This()) LocalSearchRegionPriority {
        return objc.msgSend(_self, "regionPriority", LocalSearchRegionPriority, .{});
    }

    pub fn setRegionPriority(_self: *@This(), _regionPriority: LocalSearchRegionPriority) void {
        return objc.msgSend(_self, "setRegionPriority:", void, .{_regionPriority});
    }

    pub fn filterType(_self: *@This()) SearchCompletionFilterType {
        return objc.msgSend(_self, "filterType", SearchCompletionFilterType, .{});
    }

    pub fn setFilterType(_self: *@This(), _filterType: SearchCompletionFilterType) void {
        return objc.msgSend(_self, "setFilterType:", void, .{_filterType});
    }

    pub fn resultTypes(_self: *@This()) LocalSearchCompleterResultType {
        return objc.msgSend(_self, "resultTypes", LocalSearchCompleterResultType, .{});
    }

    pub fn setResultTypes(_self: *@This(), _resultTypes: LocalSearchCompleterResultType) void {
        return objc.msgSend(_self, "setResultTypes:", void, .{_resultTypes});
    }

    pub fn pointOfInterestFilter(_self: *@This()) ?*PointOfInterestFilter {
        return objc.msgSend(_self, "pointOfInterestFilter", ?*PointOfInterestFilter, .{});
    }

    pub fn setPointOfInterestFilter(_self: *@This(), _pointOfInterestFilter: ?*PointOfInterestFilter) void {
        return objc.msgSend(_self, "setPointOfInterestFilter:", void, .{_pointOfInterestFilter});
    }

    pub fn addressFilter(_self: *@This()) ?*AddressFilter {
        return objc.msgSend(_self, "addressFilter", ?*AddressFilter, .{});
    }

    pub fn setAddressFilter(_self: *@This(), _addressFilter: ?*AddressFilter) void {
        return objc.msgSend(_self, "setAddressFilter:", void, .{_addressFilter});
    }

    pub fn delegate(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "delegate", ?*anyopaque, .{});
    }

    pub fn setDelegate(_self: *@This(), _delegate: ?*anyopaque) void {
        return objc.msgSend(_self, "setDelegate:", void, .{_delegate});
    }

    pub fn results(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "results", ?*anyopaque, .{});
    }

    pub fn isSearching(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isSearching", objc.BOOL, .{});
    }
};

/// https://developer.apple.com/documentation/MapKit/MKLocalSearchCompleterDelegate?language=objc
pub const LocalSearchCompleterDelegate = opaque {
    pub const Internal = objc.ExternProtocol(@This(), &.{objc.NSObject});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "description", ?*foundation.String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "debugDescription", ?*foundation.String, .{});
    }

    pub fn completerDidUpdateResults(_self: *@This(), _completer: ?*LocalSearchCompleter) void {
        return objc.msgSend(_self, "completerDidUpdateResults:", void, .{_completer});
    }

    pub fn completerDidFailWithError(_self: *@This(), _completer: ?*LocalSearchCompleter, _error: ?*foundation.Error) void {
        return objc.msgSend(_self, "completer:didFailWithError:", void, .{ _completer, _error });
    }
};

/// https://developer.apple.com/documentation/MapKit/MKLocalSearchCompletion?language=objc
pub const LocalSearchCompletion = opaque {
    pub const Internal = objc.ExternClass("MKLocalSearchCompletion", @This(), objc.NSObject, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "description", ?*foundation.String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "debugDescription", ?*foundation.String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*foundation.Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*foundation.MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*foundation.MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*foundation.MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*foundation.MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn title(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "title", ?*foundation.String, .{});
    }

    pub fn titleHighlightRanges(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "titleHighlightRanges", ?*anyopaque, .{});
    }

    pub fn subtitle(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "subtitle", ?*foundation.String, .{});
    }

    pub fn subtitleHighlightRanges(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "subtitleHighlightRanges", ?*anyopaque, .{});
    }
};

/// https://developer.apple.com/documentation/MapKit/MKLocalSearchResponse?language=objc
pub const LocalSearchResponse = opaque {
    pub const Internal = objc.ExternClass("MKLocalSearchResponse", @This(), objc.NSObject, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "description", ?*foundation.String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "debugDescription", ?*foundation.String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*foundation.Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*foundation.MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*foundation.MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*foundation.MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*foundation.MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn mapItems(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "mapItems", ?*anyopaque, .{});
    }

    pub fn boundingRegion(_self: *@This()) CoordinateRegion {
        return objc.msgSend(_self, "boundingRegion", CoordinateRegion, .{});
    }
};

pub const DirectionsTransportType = objc.NSUInteger;
pub const DirectionsTransportType_Automobile: objc.NSUInteger = 1;
pub const DirectionsTransportType_Walking: objc.NSUInteger = 2;
pub const DirectionsTransportType_Transit: objc.NSUInteger = 4;
pub const DirectionsTransportType_Any: objc.NSUInteger = 268435455;

pub const DirectionsRoutePreference = objc.NSInteger;
pub const DirectionsRoutePreference_Any: objc.NSInteger = 0;
pub const DirectionsRoutePreference_Avoid: objc.NSInteger = 1;

/// https://developer.apple.com/documentation/MapKit/MKDirectionsRequest?language=objc
pub const DirectionsRequest = opaque {
    pub const Internal = objc.ExternClass("MKDirectionsRequest", @This(), objc.NSObject, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "description", ?*foundation.String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "debugDescription", ?*foundation.String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*foundation.Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*foundation.MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*foundation.MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*foundation.MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*foundation.MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn setSource(_self: *@This(), _source: ?*MapItem) void {
        return objc.msgSend(_self, "setSource:", void, .{_source});
    }

    pub fn setDestination(_self: *@This(), _destination: ?*MapItem) void {
        return objc.msgSend(_self, "setDestination:", void, .{_destination});
    }

    pub fn source(_self: *@This()) ?*MapItem {
        return objc.msgSend(_self, "source", ?*MapItem, .{});
    }

    pub fn destination(_self: *@This()) ?*MapItem {
        return objc.msgSend(_self, "destination", ?*MapItem, .{});
    }
};

pub const DirectionsHandler = *const fn (?*DirectionsResponse, ?*foundation.Error) callconv(.C) void;

pub const ETAHandler = *const fn (?*ETAResponse, ?*foundation.Error) callconv(.C) void;

/// https://developer.apple.com/documentation/MapKit/MKDirections?language=objc
pub const Directions = opaque {
    pub const Internal = objc.ExternClass("MKDirections", @This(), objc.NSObject, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "description", ?*foundation.String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "debugDescription", ?*foundation.String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*foundation.Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*foundation.MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*foundation.MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*foundation.MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*foundation.MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn initWithRequest(_self: *@This(), _request: ?*DirectionsRequest) *@This() {
        return objc.msgSend(_self, "initWithRequest:", *@This(), .{_request});
    }

    pub fn calculateDirectionsWithCompletionHandler(_self: *@This(), _completionHandler: DirectionsHandler) void {
        return objc.msgSend(_self, "calculateDirectionsWithCompletionHandler:", void, .{_completionHandler});
    }

    pub fn calculateETAWithCompletionHandler(_self: *@This(), _completionHandler: ETAHandler) void {
        return objc.msgSend(_self, "calculateETAWithCompletionHandler:", void, .{_completionHandler});
    }

    pub fn cancel(_self: *@This()) void {
        return objc.msgSend(_self, "cancel", void, .{});
    }

    pub fn isCalculating(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isCalculating", objc.BOOL, .{});
    }
};

/// https://developer.apple.com/documentation/MapKit/MKDirectionsResponse?language=objc
pub const DirectionsResponse = opaque {
    pub const Internal = objc.ExternClass("MKDirectionsResponse", @This(), objc.NSObject, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "description", ?*foundation.String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "debugDescription", ?*foundation.String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*foundation.Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*foundation.MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*foundation.MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*foundation.MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*foundation.MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn source(_self: *@This()) ?*MapItem {
        return objc.msgSend(_self, "source", ?*MapItem, .{});
    }

    pub fn destination(_self: *@This()) ?*MapItem {
        return objc.msgSend(_self, "destination", ?*MapItem, .{});
    }

    pub fn routes(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "routes", ?*anyopaque, .{});
    }
};

/// https://developer.apple.com/documentation/MapKit/MKRoute?language=objc
pub const Route = opaque {
    pub const Internal = objc.ExternClass("MKRoute", @This(), objc.NSObject, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "description", ?*foundation.String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "debugDescription", ?*foundation.String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*foundation.Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*foundation.MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*foundation.MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*foundation.MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*foundation.MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn name(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "name", ?*foundation.String, .{});
    }

    pub fn advisoryNotices(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "advisoryNotices", ?*anyopaque, .{});
    }

    pub fn distance(_self: *@This()) core_location.LocationDistance {
        return objc.msgSend(_self, "distance", core_location.LocationDistance, .{});
    }

    pub fn expectedTravelTime(_self: *@This()) foundation.TimeInterval {
        return objc.msgSend(_self, "expectedTravelTime", foundation.TimeInterval, .{});
    }

    pub fn transportType(_self: *@This()) DirectionsTransportType {
        return objc.msgSend(_self, "transportType", DirectionsTransportType, .{});
    }

    pub fn polyline(_self: *@This()) ?*Polyline {
        return objc.msgSend(_self, "polyline", ?*Polyline, .{});
    }

    pub fn steps(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "steps", ?*anyopaque, .{});
    }

    pub fn hasTolls(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "hasTolls", objc.BOOL, .{});
    }

    pub fn hasHighways(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "hasHighways", objc.BOOL, .{});
    }
};

/// https://developer.apple.com/documentation/MapKit/MKRouteStep?language=objc
pub const RouteStep = opaque {
    pub const Internal = objc.ExternClass("MKRouteStep", @This(), objc.NSObject, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "description", ?*foundation.String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "debugDescription", ?*foundation.String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*foundation.Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*foundation.MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*foundation.MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*foundation.MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*foundation.MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn instructions(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "instructions", ?*foundation.String, .{});
    }

    pub fn notice(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "notice", ?*foundation.String, .{});
    }

    pub fn polyline(_self: *@This()) ?*Polyline {
        return objc.msgSend(_self, "polyline", ?*Polyline, .{});
    }

    pub fn distance(_self: *@This()) core_location.LocationDistance {
        return objc.msgSend(_self, "distance", core_location.LocationDistance, .{});
    }

    pub fn transportType(_self: *@This()) DirectionsTransportType {
        return objc.msgSend(_self, "transportType", DirectionsTransportType, .{});
    }
};

/// https://developer.apple.com/documentation/MapKit/MKETAResponse?language=objc
pub const ETAResponse = opaque {
    pub const Internal = objc.ExternClass("MKETAResponse", @This(), objc.NSObject, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "description", ?*foundation.String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "debugDescription", ?*foundation.String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*foundation.Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*foundation.MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*foundation.MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*foundation.MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*foundation.MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn source(_self: *@This()) ?*MapItem {
        return objc.msgSend(_self, "source", ?*MapItem, .{});
    }

    pub fn destination(_self: *@This()) ?*MapItem {
        return objc.msgSend(_self, "destination", ?*MapItem, .{});
    }

    pub fn expectedTravelTime(_self: *@This()) foundation.TimeInterval {
        return objc.msgSend(_self, "expectedTravelTime", foundation.TimeInterval, .{});
    }

    pub fn distance(_self: *@This()) core_location.LocationDistance {
        return objc.msgSend(_self, "distance", core_location.LocationDistance, .{});
    }

    pub fn expectedArrivalDate(_self: *@This()) ?*foundation.Date {
        return objc.msgSend(_self, "expectedArrivalDate", ?*foundation.Date, .{});
    }

    pub fn expectedDepartureDate(_self: *@This()) ?*foundation.Date {
        return objc.msgSend(_self, "expectedDepartureDate", ?*foundation.Date, .{});
    }

    pub fn transportType(_self: *@This()) DirectionsTransportType {
        return objc.msgSend(_self, "transportType", DirectionsTransportType, .{});
    }
};

/// https://developer.apple.com/documentation/MapKit/MKMapSnapshotOptions?language=objc
pub const MapSnapshotOptions = opaque {
    pub const Internal = objc.ExternClass("MKMapSnapshotOptions", @This(), objc.NSObject, &.{foundation.Copying});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "description", ?*foundation.String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "debugDescription", ?*foundation.String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*foundation.Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*foundation.MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*foundation.MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*foundation.MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*foundation.MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn preferredConfiguration(_self: *@This()) ?*MapConfiguration {
        return objc.msgSend(_self, "preferredConfiguration", ?*MapConfiguration, .{});
    }

    pub fn setPreferredConfiguration(_self: *@This(), _preferredConfiguration: ?*MapConfiguration) void {
        return objc.msgSend(_self, "setPreferredConfiguration:", void, .{_preferredConfiguration});
    }

    pub fn camera(_self: *@This()) ?*MapCamera {
        return objc.msgSend(_self, "camera", ?*MapCamera, .{});
    }

    pub fn setCamera(_self: *@This(), _camera: ?*MapCamera) void {
        return objc.msgSend(_self, "setCamera:", void, .{_camera});
    }

    pub fn mapRect(_self: *@This()) MapRect {
        return objc.msgSend(_self, "mapRect", MapRect, .{});
    }

    pub fn setMapRect(_self: *@This(), _mapRect: MapRect) void {
        return objc.msgSend(_self, "setMapRect:", void, .{_mapRect});
    }

    pub fn region(_self: *@This()) CoordinateRegion {
        return objc.msgSend(_self, "region", CoordinateRegion, .{});
    }

    pub fn setRegion(_self: *@This(), _region: CoordinateRegion) void {
        return objc.msgSend(_self, "setRegion:", void, .{_region});
    }

    pub fn mapType(_self: *@This()) MapType {
        return objc.msgSend(_self, "mapType", MapType, .{});
    }

    pub fn setMapType(_self: *@This(), _mapType: MapType) void {
        return objc.msgSend(_self, "setMapType:", void, .{_mapType});
    }

    pub fn pointOfInterestFilter(_self: *@This()) ?*PointOfInterestFilter {
        return objc.msgSend(_self, "pointOfInterestFilter", ?*PointOfInterestFilter, .{});
    }

    pub fn setPointOfInterestFilter(_self: *@This(), _pointOfInterestFilter: ?*PointOfInterestFilter) void {
        return objc.msgSend(_self, "setPointOfInterestFilter:", void, .{_pointOfInterestFilter});
    }

    pub fn showsPointsOfInterest(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "showsPointsOfInterest", objc.BOOL, .{});
    }

    pub fn setShowsPointsOfInterest(_self: *@This(), _showsPointsOfInterest: objc.BOOL) void {
        return objc.msgSend(_self, "setShowsPointsOfInterest:", void, .{_showsPointsOfInterest});
    }

    pub fn showsBuildings(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "showsBuildings", objc.BOOL, .{});
    }

    pub fn setShowsBuildings(_self: *@This(), _showsBuildings: objc.BOOL) void {
        return objc.msgSend(_self, "setShowsBuildings:", void, .{_showsBuildings});
    }

    pub fn size(_self: *@This()) foundation.Size {
        return objc.msgSend(_self, "size", foundation.Size, .{});
    }

    pub fn setSize(_self: *@This(), _size: foundation.Size) void {
        return objc.msgSend(_self, "setSize:", void, .{_size});
    }

    pub fn appearance(_self: *@This()) ?*app_kit.Appearance {
        return objc.msgSend(_self, "appearance", ?*app_kit.Appearance, .{});
    }

    pub fn setAppearance(_self: *@This(), _appearance: ?*app_kit.Appearance) void {
        return objc.msgSend(_self, "setAppearance:", void, .{_appearance});
    }
};

pub const MapSnapshotCompletionHandler = *const fn (?*MapSnapshot, ?*foundation.Error) callconv(.C) void;

/// https://developer.apple.com/documentation/MapKit/MKMapSnapshotter?language=objc
pub const MapSnapshotter = opaque {
    pub const Internal = objc.ExternClass("MKMapSnapshotter", @This(), objc.NSObject, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "description", ?*foundation.String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "debugDescription", ?*foundation.String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*foundation.Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*foundation.MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*foundation.MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*foundation.MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*foundation.MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn initWithOptions(_self: *@This(), _options: ?*MapSnapshotOptions) *@This() {
        return objc.msgSend(_self, "initWithOptions:", *@This(), .{_options});
    }

    pub fn startWithCompletionHandler(_self: *@This(), _completionHandler: MapSnapshotCompletionHandler) void {
        return objc.msgSend(_self, "startWithCompletionHandler:", void, .{_completionHandler});
    }

    pub fn startWithQueueCompletionHandler(_self: *@This(), _queue: objc.dispatch_queue_t, _completionHandler: MapSnapshotCompletionHandler) void {
        return objc.msgSend(_self, "startWithQueue:completionHandler:", void, .{ _queue, _completionHandler });
    }

    pub fn cancel(_self: *@This()) void {
        return objc.msgSend(_self, "cancel", void, .{});
    }

    pub fn isLoading(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isLoading", objc.BOOL, .{});
    }
};

/// https://developer.apple.com/documentation/MapKit/MKMapSnapshot?language=objc
pub const MapSnapshot = opaque {
    pub const Internal = objc.ExternClass("MKMapSnapshot", @This(), objc.NSObject, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "description", ?*foundation.String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "debugDescription", ?*foundation.String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*foundation.Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*foundation.MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*foundation.MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*foundation.MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*foundation.MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn pointForCoordinate(_self: *@This(), _coordinate: core_location.LocationCoordinate2D) foundation.Point {
        return objc.msgSend(_self, "pointForCoordinate:", foundation.Point, .{_coordinate});
    }

    pub fn image(_self: *@This()) ?*app_kit.Image {
        return objc.msgSend(_self, "image", ?*app_kit.Image, .{});
    }

    pub fn appearance(_self: *@This()) ?*app_kit.Appearance {
        return objc.msgSend(_self, "appearance", ?*app_kit.Appearance, .{});
    }
};

/// https://developer.apple.com/documentation/MapKit/MKTileOverlay?language=objc
pub const TileOverlay = opaque {
    pub const Internal = objc.ExternClass("MKTileOverlay", @This(), objc.NSObject, &.{Overlay});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "description", ?*foundation.String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "debugDescription", ?*foundation.String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*foundation.Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*foundation.MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*foundation.MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*foundation.MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*foundation.MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn setCoordinate(_self: *@This(), _newCoordinate: core_location.LocationCoordinate2D) void {
        return objc.msgSend(_self, "setCoordinate:", void, .{_newCoordinate});
    }

    pub fn coordinate(_self: *@This()) core_location.LocationCoordinate2D {
        return objc.msgSend(_self, "coordinate", core_location.LocationCoordinate2D, .{});
    }

    pub fn title(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "title", ?*foundation.String, .{});
    }

    pub fn subtitle(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "subtitle", ?*foundation.String, .{});
    }

    pub fn intersectsMapRect(_self: *@This(), _mapRect: MapRect) objc.BOOL {
        return objc.msgSend(_self, "intersectsMapRect:", objc.BOOL, .{_mapRect});
    }

    pub fn canReplaceMapContent(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "canReplaceMapContent", objc.BOOL, .{});
    }

    pub fn boundingMapRect(_self: *@This()) MapRect {
        return objc.msgSend(_self, "boundingMapRect", MapRect, .{});
    }

    pub fn initWithURLTemplate(_self: *@This(), _URLTemplate: ?*foundation.String) *@This() {
        return objc.msgSend(_self, "initWithURLTemplate:", *@This(), .{_URLTemplate});
    }

    pub fn tileSize(_self: *@This()) core_foundation.CGSize {
        return objc.msgSend(_self, "tileSize", core_foundation.CGSize, .{});
    }

    pub fn setTileSize(_self: *@This(), _tileSize: core_foundation.CGSize) void {
        return objc.msgSend(_self, "setTileSize:", void, .{_tileSize});
    }

    pub fn isGeometryFlipped(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isGeometryFlipped", objc.BOOL, .{});
    }

    pub fn setGeometryFlipped(_self: *@This(), _geometryFlipped: objc.BOOL) void {
        return objc.msgSend(_self, "setGeometryFlipped:", void, .{_geometryFlipped});
    }

    pub fn minimumZ(_self: *@This()) objc.NSInteger {
        return objc.msgSend(_self, "minimumZ", objc.NSInteger, .{});
    }

    pub fn setMinimumZ(_self: *@This(), _minimumZ: objc.NSInteger) void {
        return objc.msgSend(_self, "setMinimumZ:", void, .{_minimumZ});
    }

    pub fn maximumZ(_self: *@This()) objc.NSInteger {
        return objc.msgSend(_self, "maximumZ", objc.NSInteger, .{});
    }

    pub fn setMaximumZ(_self: *@This(), _maximumZ: objc.NSInteger) void {
        return objc.msgSend(_self, "setMaximumZ:", void, .{_maximumZ});
    }

    pub fn urlTemplate(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "URLTemplate", ?*foundation.String, .{});
    }

    pub fn setCanReplaceMapContent(_self: *@This(), _canReplaceMapContent: objc.BOOL) void {
        return objc.msgSend(_self, "setCanReplaceMapContent:", void, .{_canReplaceMapContent});
    }
};

pub const TileOverlayPath = extern struct {
    x: objc.NSInteger,
    y: objc.NSInteger,
    z: objc.NSInteger,
    contentScaleFactor: core_foundation.CGFloat,
};

/// https://developer.apple.com/documentation/MapKit/MKTileOverlayRenderer?language=objc
pub const TileOverlayRenderer = opaque {
    pub const Internal = objc.ExternClass("MKTileOverlayRenderer", @This(), OverlayRenderer, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "description", ?*foundation.String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "debugDescription", ?*foundation.String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*foundation.Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*foundation.MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*foundation.MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*foundation.MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*foundation.MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn initWithOverlay(_self: *@This(), _overlay: ?*anyopaque) *@This() {
        return objc.msgSend(_self, "initWithOverlay:", *@This(), .{_overlay});
    }

    pub fn pointForMapPoint(_self: *@This(), _mapPoint: MapPoint) core_foundation.CGPoint {
        return objc.msgSend(_self, "pointForMapPoint:", core_foundation.CGPoint, .{_mapPoint});
    }

    pub fn mapPointForPoint(_self: *@This(), _point: core_foundation.CGPoint) MapPoint {
        return objc.msgSend(_self, "mapPointForPoint:", MapPoint, .{_point});
    }

    pub fn rectForMapRect(_self: *@This(), _mapRect: MapRect) core_foundation.CGRect {
        return objc.msgSend(_self, "rectForMapRect:", core_foundation.CGRect, .{_mapRect});
    }

    pub fn mapRectForRect(_self: *@This(), _rect: core_foundation.CGRect) MapRect {
        return objc.msgSend(_self, "mapRectForRect:", MapRect, .{_rect});
    }

    pub fn canDrawMapRectZoomScale(_self: *@This(), _mapRect: MapRect, _zoomScale: ZoomScale) objc.BOOL {
        return objc.msgSend(_self, "canDrawMapRect:zoomScale:", objc.BOOL, .{ _mapRect, _zoomScale });
    }

    pub fn drawMapRectZoomScaleInContext(_self: *@This(), _mapRect: MapRect, _zoomScale: ZoomScale, _context: core_graphics.ContextRef) void {
        return objc.msgSend(_self, "drawMapRect:zoomScale:inContext:", void, .{ _mapRect, _zoomScale, _context });
    }

    pub fn setNeedsDisplay(_self: *@This()) void {
        return objc.msgSend(_self, "setNeedsDisplay", void, .{});
    }

    pub fn setNeedsDisplayInMapRect(_self: *@This(), _mapRect: MapRect) void {
        return objc.msgSend(_self, "setNeedsDisplayInMapRect:", void, .{_mapRect});
    }

    pub fn setNeedsDisplayInMapRectZoomScale(_self: *@This(), _mapRect: MapRect, _zoomScale: ZoomScale) void {
        return objc.msgSend(_self, "setNeedsDisplayInMapRect:zoomScale:", void, .{ _mapRect, _zoomScale });
    }

    pub fn overlay(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "overlay", ?*anyopaque, .{});
    }

    pub fn alpha(_self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(_self, "alpha", core_foundation.CGFloat, .{});
    }

    pub fn setAlpha(_self: *@This(), _alpha: core_foundation.CGFloat) void {
        return objc.msgSend(_self, "setAlpha:", void, .{_alpha});
    }

    pub fn contentScaleFactor(_self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(_self, "contentScaleFactor", core_foundation.CGFloat, .{});
    }

    pub fn blendMode(_self: *@This()) core_graphics.BlendMode {
        return objc.msgSend(_self, "blendMode", core_graphics.BlendMode, .{});
    }

    pub fn setBlendMode(_self: *@This(), _blendMode: core_graphics.BlendMode) void {
        return objc.msgSend(_self, "setBlendMode:", void, .{_blendMode});
    }

    pub fn initWithTileOverlay(_self: *@This(), _overlay: ?*TileOverlay) *@This() {
        return objc.msgSend(_self, "initWithTileOverlay:", *@This(), .{_overlay});
    }

    pub fn reloadData(_self: *@This()) void {
        return objc.msgSend(_self, "reloadData", void, .{});
    }
};

/// https://developer.apple.com/documentation/MapKit/MKMapCamera?language=objc
pub const MapCamera = opaque {
    pub const Internal = objc.ExternClass("MKMapCamera", @This(), objc.NSObject, &.{ foundation.SecureCoding, foundation.Copying });
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "description", ?*foundation.String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "debugDescription", ?*foundation.String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*foundation.Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*foundation.MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*foundation.MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*foundation.MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*foundation.MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*foundation.Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*foundation.Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn supportsSecureCoding() objc.BOOL {
        return objc.msgSend(Internal.class(), "supportsSecureCoding", objc.BOOL, .{});
    }

    pub fn camera() *@This() {
        return objc.msgSend(Internal.class(), "camera", *@This(), .{});
    }

    pub fn cameraLookingAtCenterCoordinateFromEyeCoordinateEyeAltitude(_centerCoordinate: core_location.LocationCoordinate2D, _eyeCoordinate: core_location.LocationCoordinate2D, _eyeAltitude: core_location.LocationDistance) *@This() {
        return objc.msgSend(Internal.class(), "cameraLookingAtCenterCoordinate:fromEyeCoordinate:eyeAltitude:", *@This(), .{ _centerCoordinate, _eyeCoordinate, _eyeAltitude });
    }

    pub fn cameraLookingAtCenterCoordinateFromDistancePitchHeading(
        _centerCoordinate: core_location.LocationCoordinate2D,
        _distance: core_location.LocationDistance,
        _pitch: core_foundation.CGFloat,
        _heading: core_location.LocationDirection,
    ) *@This() {
        return objc.msgSend(Internal.class(), "cameraLookingAtCenterCoordinate:fromDistance:pitch:heading:", *@This(), .{
            _centerCoordinate,
            _distance,
            _pitch,
            _heading,
        });
    }

    pub fn cameraLookingAtMapItemForViewSizeAllowPitch(_mapItem: ?*MapItem, _viewSize: core_foundation.CGSize, _allowPitch: objc.BOOL) *@This() {
        return objc.msgSend(Internal.class(), "cameraLookingAtMapItem:forViewSize:allowPitch:", *@This(), .{ _mapItem, _viewSize, _allowPitch });
    }

    pub fn centerCoordinate(_self: *@This()) core_location.LocationCoordinate2D {
        return objc.msgSend(_self, "centerCoordinate", core_location.LocationCoordinate2D, .{});
    }

    pub fn setCenterCoordinate(_self: *@This(), _centerCoordinate: core_location.LocationCoordinate2D) void {
        return objc.msgSend(_self, "setCenterCoordinate:", void, .{_centerCoordinate});
    }

    pub fn centerCoordinateDistance(_self: *@This()) core_location.LocationDistance {
        return objc.msgSend(_self, "centerCoordinateDistance", core_location.LocationDistance, .{});
    }

    pub fn setCenterCoordinateDistance(_self: *@This(), _centerCoordinateDistance: core_location.LocationDistance) void {
        return objc.msgSend(_self, "setCenterCoordinateDistance:", void, .{_centerCoordinateDistance});
    }

    pub fn heading(_self: *@This()) core_location.LocationDirection {
        return objc.msgSend(_self, "heading", core_location.LocationDirection, .{});
    }

    pub fn setHeading(_self: *@This(), _heading: core_location.LocationDirection) void {
        return objc.msgSend(_self, "setHeading:", void, .{_heading});
    }

    pub fn pitch(_self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(_self, "pitch", core_foundation.CGFloat, .{});
    }

    pub fn setPitch(_self: *@This(), _pitch: core_foundation.CGFloat) void {
        return objc.msgSend(_self, "setPitch:", void, .{_pitch});
    }

    pub fn altitude(_self: *@This()) core_location.LocationDistance {
        return objc.msgSend(_self, "altitude", core_location.LocationDistance, .{});
    }

    pub fn setAltitude(_self: *@This(), _altitude: core_location.LocationDistance) void {
        return objc.msgSend(_self, "setAltitude:", void, .{_altitude});
    }
};

/// https://developer.apple.com/documentation/MapKit/MKGeoJSONObject?language=objc
pub const GeoJSONObject = opaque {
    pub const Internal = objc.ExternProtocol(@This(), &.{objc.NSObject});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "description", ?*foundation.String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "debugDescription", ?*foundation.String, .{});
    }
};

/// https://developer.apple.com/documentation/MapKit/MKGeoJSONDecoder?language=objc
pub const GeoJSONDecoder = opaque {
    pub const Internal = objc.ExternClass("MKGeoJSONDecoder", @This(), objc.NSObject, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "description", ?*foundation.String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "debugDescription", ?*foundation.String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*foundation.Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*foundation.MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*foundation.MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*foundation.MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*foundation.MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn geoJSONObjectsWithDataError(_self: *@This(), _data: ?*foundation.Data, _errorPtr: ?*?*foundation.Error) ?*anyopaque {
        return objc.msgSend(_self, "geoJSONObjectsWithData:error:", ?*anyopaque, .{ _data, _errorPtr });
    }
};

/// https://developer.apple.com/documentation/MapKit/MKGeoJSONFeature?language=objc
pub const GeoJSONFeature = opaque {
    pub const Internal = objc.ExternClass("MKGeoJSONFeature", @This(), objc.NSObject, &.{GeoJSONObject});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "description", ?*foundation.String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "debugDescription", ?*foundation.String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*foundation.Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*foundation.MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*foundation.MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*foundation.MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*foundation.MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn identifier(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "identifier", ?*foundation.String, .{});
    }

    pub fn properties(_self: *@This()) ?*foundation.Data {
        return objc.msgSend(_self, "properties", ?*foundation.Data, .{});
    }

    pub fn geometry(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "geometry", ?*anyopaque, .{});
    }
};

/// https://developer.apple.com/documentation/MapKit/MKMapCameraZoomRange?language=objc
pub const MapCameraZoomRange = opaque {
    pub const Internal = objc.ExternClass("MKMapCameraZoomRange", @This(), objc.NSObject, &.{ foundation.SecureCoding, foundation.Copying });
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "description", ?*foundation.String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "debugDescription", ?*foundation.String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*foundation.Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*foundation.MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*foundation.MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*foundation.MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*foundation.MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*foundation.Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*foundation.Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn supportsSecureCoding() objc.BOOL {
        return objc.msgSend(Internal.class(), "supportsSecureCoding", objc.BOOL, .{});
    }

    pub fn initWithMinCenterCoordinateDistanceMaxCenterCoordinateDistance(_self: *@This(), _minDistance: core_location.LocationDistance, _maxDistance: core_location.LocationDistance) *@This() {
        return objc.msgSend(_self, "initWithMinCenterCoordinateDistance:maxCenterCoordinateDistance:", *@This(), .{ _minDistance, _maxDistance });
    }

    pub fn initWithMinCenterCoordinateDistance(_self: *@This(), _minDistance: core_location.LocationDistance) *@This() {
        return objc.msgSend(_self, "initWithMinCenterCoordinateDistance:", *@This(), .{_minDistance});
    }

    pub fn initWithMaxCenterCoordinateDistance(_self: *@This(), _maxDistance: core_location.LocationDistance) *@This() {
        return objc.msgSend(_self, "initWithMaxCenterCoordinateDistance:", *@This(), .{_maxDistance});
    }

    pub fn minCenterCoordinateDistance(_self: *@This()) core_location.LocationDistance {
        return objc.msgSend(_self, "minCenterCoordinateDistance", core_location.LocationDistance, .{});
    }

    pub fn maxCenterCoordinateDistance(_self: *@This()) core_location.LocationDistance {
        return objc.msgSend(_self, "maxCenterCoordinateDistance", core_location.LocationDistance, .{});
    }
};

/// https://developer.apple.com/documentation/MapKit/MKMapCameraBoundary?language=objc
pub const MapCameraBoundary = opaque {
    pub const Internal = objc.ExternClass("MKMapCameraBoundary", @This(), objc.NSObject, &.{ foundation.SecureCoding, foundation.Copying });
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "description", ?*foundation.String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "debugDescription", ?*foundation.String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*foundation.Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*foundation.MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*foundation.MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*foundation.MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*foundation.MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*foundation.Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*foundation.Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn supportsSecureCoding() objc.BOOL {
        return objc.msgSend(Internal.class(), "supportsSecureCoding", objc.BOOL, .{});
    }

    pub fn initWithMapRect(_self: *@This(), _mapRect: MapRect) *@This() {
        return objc.msgSend(_self, "initWithMapRect:", *@This(), .{_mapRect});
    }

    pub fn initWithCoordinateRegion(_self: *@This(), _region: CoordinateRegion) *@This() {
        return objc.msgSend(_self, "initWithCoordinateRegion:", *@This(), .{_region});
    }

    pub fn mapRect(_self: *@This()) MapRect {
        return objc.msgSend(_self, "mapRect", MapRect, .{});
    }

    pub fn region(_self: *@This()) CoordinateRegion {
        return objc.msgSend(_self, "region", CoordinateRegion, .{});
    }
};

/// https://developer.apple.com/documentation/MapKit/MKPitchControl?language=objc
pub const PitchControl = opaque {
    pub const Internal = objc.ExternClass("MKPitchControl", @This(), app_kit.View, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "description", ?*foundation.String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "debugDescription", ?*foundation.String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*foundation.Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*foundation.MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*foundation.MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*foundation.MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*foundation.MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*foundation.Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*foundation.Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn tryToPerformWith(_self: *@This(), _action: objc.Selector, _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "tryToPerform:with:", objc.BOOL, .{ _action, _object });
    }

    pub fn performKeyEquivalent(_self: *@This(), _event: ?*app_kit.Event) objc.BOOL {
        return objc.msgSend(_self, "performKeyEquivalent:", objc.BOOL, .{_event});
    }

    pub fn validRequestorForSendTypeReturnType(_self: *@This(), _sendType: app_kit.PasteboardType, _returnType: app_kit.PasteboardType) ?objc.Id {
        return objc.msgSend(_self, "validRequestorForSendType:returnType:", ?objc.Id, .{ _sendType, _returnType });
    }

    pub fn mouseDown(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "mouseDown:", void, .{_event});
    }

    pub fn rightMouseDown(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "rightMouseDown:", void, .{_event});
    }

    pub fn otherMouseDown(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "otherMouseDown:", void, .{_event});
    }

    pub fn mouseUp(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "mouseUp:", void, .{_event});
    }

    pub fn rightMouseUp(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "rightMouseUp:", void, .{_event});
    }

    pub fn otherMouseUp(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "otherMouseUp:", void, .{_event});
    }

    pub fn mouseMoved(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "mouseMoved:", void, .{_event});
    }

    pub fn mouseDragged(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "mouseDragged:", void, .{_event});
    }

    pub fn scrollWheel(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "scrollWheel:", void, .{_event});
    }

    pub fn rightMouseDragged(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "rightMouseDragged:", void, .{_event});
    }

    pub fn otherMouseDragged(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "otherMouseDragged:", void, .{_event});
    }

    pub fn mouseEntered(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "mouseEntered:", void, .{_event});
    }

    pub fn mouseExited(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "mouseExited:", void, .{_event});
    }

    pub fn keyDown(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "keyDown:", void, .{_event});
    }

    pub fn keyUp(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "keyUp:", void, .{_event});
    }

    pub fn flagsChanged(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "flagsChanged:", void, .{_event});
    }

    pub fn tabletPoint(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "tabletPoint:", void, .{_event});
    }

    pub fn tabletProximity(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "tabletProximity:", void, .{_event});
    }

    pub fn cursorUpdate(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "cursorUpdate:", void, .{_event});
    }

    pub fn magnifyWithEvent(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "magnifyWithEvent:", void, .{_event});
    }

    pub fn rotateWithEvent(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "rotateWithEvent:", void, .{_event});
    }

    pub fn swipeWithEvent(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "swipeWithEvent:", void, .{_event});
    }

    pub fn beginGestureWithEvent(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "beginGestureWithEvent:", void, .{_event});
    }

    pub fn endGestureWithEvent(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "endGestureWithEvent:", void, .{_event});
    }

    pub fn smartMagnifyWithEvent(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "smartMagnifyWithEvent:", void, .{_event});
    }

    pub fn changeModeWithEvent(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "changeModeWithEvent:", void, .{_event});
    }

    pub fn touchesBeganWithEvent(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "touchesBeganWithEvent:", void, .{_event});
    }

    pub fn touchesMovedWithEvent(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "touchesMovedWithEvent:", void, .{_event});
    }

    pub fn touchesEndedWithEvent(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "touchesEndedWithEvent:", void, .{_event});
    }

    pub fn touchesCancelledWithEvent(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "touchesCancelledWithEvent:", void, .{_event});
    }

    pub fn quickLookWithEvent(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "quickLookWithEvent:", void, .{_event});
    }

    pub fn pressureChangeWithEvent(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "pressureChangeWithEvent:", void, .{_event});
    }

    pub fn contextMenuKeyDown(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "contextMenuKeyDown:", void, .{_event});
    }

    pub fn noResponderFor(_self: *@This(), _eventSelector: objc.Selector) void {
        return objc.msgSend(_self, "noResponderFor:", void, .{_eventSelector});
    }

    pub fn becomeFirstResponder(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "becomeFirstResponder", objc.BOOL, .{});
    }

    pub fn resignFirstResponder(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "resignFirstResponder", objc.BOOL, .{});
    }

    pub fn interpretKeyEvents(_self: *@This(), _eventArray: ?*anyopaque) void {
        return objc.msgSend(_self, "interpretKeyEvents:", void, .{_eventArray});
    }

    pub fn flushBufferedKeyEvents(_self: *@This()) void {
        return objc.msgSend(_self, "flushBufferedKeyEvents", void, .{});
    }

    pub fn showContextHelp(_self: *@This(), _sender: ?objc.Id) void {
        return objc.msgSend(_self, "showContextHelp:", void, .{_sender});
    }

    pub fn helpRequested(_self: *@This(), _eventPtr: ?*app_kit.Event) void {
        return objc.msgSend(_self, "helpRequested:", void, .{_eventPtr});
    }

    pub fn shouldBeTreatedAsInkEvent(_self: *@This(), _event: ?*app_kit.Event) objc.BOOL {
        return objc.msgSend(_self, "shouldBeTreatedAsInkEvent:", objc.BOOL, .{_event});
    }

    pub fn wantsScrollEventsForSwipeTrackingOnAxis(_self: *@This(), _axis: app_kit.EventGestureAxis) objc.BOOL {
        return objc.msgSend(_self, "wantsScrollEventsForSwipeTrackingOnAxis:", objc.BOOL, .{_axis});
    }

    pub fn wantsForwardedScrollEventsForAxis(_self: *@This(), _axis: app_kit.EventGestureAxis) objc.BOOL {
        return objc.msgSend(_self, "wantsForwardedScrollEventsForAxis:", objc.BOOL, .{_axis});
    }

    pub fn supplementalTargetForActionSender(_self: *@This(), _action: objc.Selector, _sender: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "supplementalTargetForAction:sender:", ?objc.Id, .{ _action, _sender });
    }

    pub fn nextResponder(_self: *@This()) ?*app_kit.Responder {
        return objc.msgSend(_self, "nextResponder", ?*app_kit.Responder, .{});
    }

    pub fn setNextResponder(_self: *@This(), _nextResponder: ?*app_kit.Responder) void {
        return objc.msgSend(_self, "setNextResponder:", void, .{_nextResponder});
    }

    pub fn acceptsFirstResponder(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "acceptsFirstResponder", objc.BOOL, .{});
    }

    pub fn menu(_self: *@This()) ?*app_kit.Menu {
        return objc.msgSend(_self, "menu", ?*app_kit.Menu, .{});
    }

    pub fn setMenu(_self: *@This(), _menu: ?*app_kit.Menu) void {
        return objc.msgSend(_self, "setMenu:", void, .{_menu});
    }

    pub fn animator(_self: *@This()) *@This() {
        return objc.msgSend(_self, "animator", *@This(), .{});
    }

    pub fn animationForKey(_self: *@This(), _key: app_kit.AnimatablePropertyKey) ?objc.Id {
        return objc.msgSend(_self, "animationForKey:", ?objc.Id, .{_key});
    }

    pub fn defaultAnimationForKey(_key: app_kit.AnimatablePropertyKey) ?objc.Id {
        return objc.msgSend(Internal.class(), "defaultAnimationForKey:", ?objc.Id, .{_key});
    }

    pub fn animations(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "animations", ?*anyopaque, .{});
    }

    pub fn setAnimations(_self: *@This(), _animations: ?*anyopaque) void {
        return objc.msgSend(_self, "setAnimations:", void, .{_animations});
    }

    pub fn identifier(_self: *@This()) app_kit.UserInterfaceItemIdentifier {
        return objc.msgSend(_self, "identifier", app_kit.UserInterfaceItemIdentifier, .{});
    }

    pub fn setIdentifier(_self: *@This(), _identifier: app_kit.UserInterfaceItemIdentifier) void {
        return objc.msgSend(_self, "setIdentifier:", void, .{_identifier});
    }

    pub fn draggingEntered(_self: *@This(), _sender: ?*anyopaque) app_kit.DragOperation {
        return objc.msgSend(_self, "draggingEntered:", app_kit.DragOperation, .{_sender});
    }

    pub fn draggingUpdated(_self: *@This(), _sender: ?*anyopaque) app_kit.DragOperation {
        return objc.msgSend(_self, "draggingUpdated:", app_kit.DragOperation, .{_sender});
    }

    pub fn draggingExited(_self: *@This(), _sender: ?*anyopaque) void {
        return objc.msgSend(_self, "draggingExited:", void, .{_sender});
    }

    pub fn prepareForDragOperation(_self: *@This(), _sender: ?*anyopaque) objc.BOOL {
        return objc.msgSend(_self, "prepareForDragOperation:", objc.BOOL, .{_sender});
    }

    pub fn performDragOperation(_self: *@This(), _sender: ?*anyopaque) objc.BOOL {
        return objc.msgSend(_self, "performDragOperation:", objc.BOOL, .{_sender});
    }

    pub fn concludeDragOperation(_self: *@This(), _sender: ?*anyopaque) void {
        return objc.msgSend(_self, "concludeDragOperation:", void, .{_sender});
    }

    pub fn draggingEnded(_self: *@This(), _sender: ?*anyopaque) void {
        return objc.msgSend(_self, "draggingEnded:", void, .{_sender});
    }

    pub fn wantsPeriodicDraggingUpdates(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "wantsPeriodicDraggingUpdates", objc.BOOL, .{});
    }

    pub fn updateDraggingItemsForDrag(_self: *@This(), _sender: ?*anyopaque) void {
        return objc.msgSend(_self, "updateDraggingItemsForDrag:", void, .{_sender});
    }

    pub fn appearance(_self: *@This()) ?*app_kit.Appearance {
        return objc.msgSend(_self, "appearance", ?*app_kit.Appearance, .{});
    }

    pub fn setAppearance(_self: *@This(), _appearance: ?*app_kit.Appearance) void {
        return objc.msgSend(_self, "setAppearance:", void, .{_appearance});
    }

    pub fn effectiveAppearance(_self: *@This()) ?*app_kit.Appearance {
        return objc.msgSend(_self, "effectiveAppearance", ?*app_kit.Appearance, .{});
    }

    pub fn accessibilityFrame(_self: *@This()) foundation.Rect {
        return objc.msgSend(_self, "accessibilityFrame", foundation.Rect, .{});
    }

    pub fn accessibilityParent(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityParent", ?objc.Id, .{});
    }

    pub fn isAccessibilityFocused(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isAccessibilityFocused", objc.BOOL, .{});
    }

    pub fn accessibilityIdentifier(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "accessibilityIdentifier", ?*foundation.String, .{});
    }

    pub fn accessibilityLayoutPointForScreenPoint(_self: *@This(), _point: foundation.Point) foundation.Point {
        return objc.msgSend(_self, "accessibilityLayoutPointForScreenPoint:", foundation.Point, .{_point});
    }

    pub fn accessibilityLayoutSizeForScreenSize(_self: *@This(), _size: foundation.Size) foundation.Size {
        return objc.msgSend(_self, "accessibilityLayoutSizeForScreenSize:", foundation.Size, .{_size});
    }

    pub fn accessibilityScreenPointForLayoutPoint(_self: *@This(), _point: foundation.Point) foundation.Point {
        return objc.msgSend(_self, "accessibilityScreenPointForLayoutPoint:", foundation.Point, .{_point});
    }

    pub fn accessibilityScreenSizeForLayoutSize(_self: *@This(), _size: foundation.Size) foundation.Size {
        return objc.msgSend(_self, "accessibilityScreenSizeForLayoutSize:", foundation.Size, .{_size});
    }

    pub fn accessibilityCellForColumnRow(_self: *@This(), _column: objc.NSInteger, _row: objc.NSInteger) ?objc.Id {
        return objc.msgSend(_self, "accessibilityCellForColumn:row:", ?objc.Id, .{ _column, _row });
    }

    pub fn accessibilityAttributedStringForRange(_self: *@This(), _range: foundation.Range) ?*foundation.AttributedString {
        return objc.msgSend(_self, "accessibilityAttributedStringForRange:", ?*foundation.AttributedString, .{_range});
    }

    pub fn accessibilityRangeForLine(_self: *@This(), _line: objc.NSInteger) foundation.Range {
        return objc.msgSend(_self, "accessibilityRangeForLine:", foundation.Range, .{_line});
    }

    pub fn accessibilityStringForRange(_self: *@This(), _range: foundation.Range) ?*foundation.String {
        return objc.msgSend(_self, "accessibilityStringForRange:", ?*foundation.String, .{_range});
    }

    pub fn accessibilityRangeForPosition(_self: *@This(), _point: foundation.Point) foundation.Range {
        return objc.msgSend(_self, "accessibilityRangeForPosition:", foundation.Range, .{_point});
    }

    pub fn accessibilityRangeForIndex(_self: *@This(), _index: objc.NSInteger) foundation.Range {
        return objc.msgSend(_self, "accessibilityRangeForIndex:", foundation.Range, .{_index});
    }

    pub fn accessibilityFrameForRange(_self: *@This(), _range: foundation.Range) foundation.Rect {
        return objc.msgSend(_self, "accessibilityFrameForRange:", foundation.Rect, .{_range});
    }

    pub fn accessibilityRTFForRange(_self: *@This(), _range: foundation.Range) ?*foundation.Data {
        return objc.msgSend(_self, "accessibilityRTFForRange:", ?*foundation.Data, .{_range});
    }

    pub fn accessibilityStyleRangeForIndex(_self: *@This(), _index: objc.NSInteger) foundation.Range {
        return objc.msgSend(_self, "accessibilityStyleRangeForIndex:", foundation.Range, .{_index});
    }

    pub fn accessibilityLineForIndex(_self: *@This(), _index: objc.NSInteger) objc.NSInteger {
        return objc.msgSend(_self, "accessibilityLineForIndex:", objc.NSInteger, .{_index});
    }

    pub fn accessibilityPerformCancel(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "accessibilityPerformCancel", objc.BOOL, .{});
    }

    pub fn accessibilityPerformConfirm(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "accessibilityPerformConfirm", objc.BOOL, .{});
    }

    pub fn accessibilityPerformDecrement(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "accessibilityPerformDecrement", objc.BOOL, .{});
    }

    pub fn accessibilityPerformDelete(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "accessibilityPerformDelete", objc.BOOL, .{});
    }

    pub fn accessibilityPerformIncrement(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "accessibilityPerformIncrement", objc.BOOL, .{});
    }

    pub fn accessibilityPerformPick(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "accessibilityPerformPick", objc.BOOL, .{});
    }

    pub fn accessibilityPerformPress(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "accessibilityPerformPress", objc.BOOL, .{});
    }

    pub fn accessibilityPerformRaise(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "accessibilityPerformRaise", objc.BOOL, .{});
    }

    pub fn accessibilityPerformShowAlternateUI(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "accessibilityPerformShowAlternateUI", objc.BOOL, .{});
    }

    pub fn accessibilityPerformShowDefaultUI(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "accessibilityPerformShowDefaultUI", objc.BOOL, .{});
    }

    pub fn accessibilityPerformShowMenu(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "accessibilityPerformShowMenu", objc.BOOL, .{});
    }

    pub fn isAccessibilitySelectorAllowed(_self: *@This(), _selector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "isAccessibilitySelectorAllowed:", objc.BOOL, .{_selector});
    }

    pub fn isAccessibilityElement(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isAccessibilityElement", objc.BOOL, .{});
    }

    pub fn setAccessibilityElement(_self: *@This(), _accessibilityElement: objc.BOOL) void {
        return objc.msgSend(_self, "setAccessibilityElement:", void, .{_accessibilityElement});
    }

    pub fn setAccessibilityFrame(_self: *@This(), _accessibilityFrame: foundation.Rect) void {
        return objc.msgSend(_self, "setAccessibilityFrame:", void, .{_accessibilityFrame});
    }

    pub fn setAccessibilityFocused(_self: *@This(), _accessibilityFocused: objc.BOOL) void {
        return objc.msgSend(_self, "setAccessibilityFocused:", void, .{_accessibilityFocused});
    }

    pub fn accessibilityActivationPoint(_self: *@This()) foundation.Point {
        return objc.msgSend(_self, "accessibilityActivationPoint", foundation.Point, .{});
    }

    pub fn setAccessibilityActivationPoint(_self: *@This(), _accessibilityActivationPoint: foundation.Point) void {
        return objc.msgSend(_self, "setAccessibilityActivationPoint:", void, .{_accessibilityActivationPoint});
    }

    pub fn accessibilityTopLevelUIElement(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityTopLevelUIElement", ?objc.Id, .{});
    }

    pub fn setAccessibilityTopLevelUIElement(_self: *@This(), _accessibilityTopLevelUIElement: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityTopLevelUIElement:", void, .{_accessibilityTopLevelUIElement});
    }

    pub fn accessibilityURL(_self: *@This()) ?*foundation.URL {
        return objc.msgSend(_self, "accessibilityURL", ?*foundation.URL, .{});
    }

    pub fn setAccessibilityURL(_self: *@This(), _accessibilityURL: ?*foundation.URL) void {
        return objc.msgSend(_self, "setAccessibilityURL:", void, .{_accessibilityURL});
    }

    pub fn accessibilityValue(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityValue", ?objc.Id, .{});
    }

    pub fn setAccessibilityValue(_self: *@This(), _accessibilityValue: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityValue:", void, .{_accessibilityValue});
    }

    pub fn accessibilityValueDescription(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "accessibilityValueDescription", ?*foundation.String, .{});
    }

    pub fn setAccessibilityValueDescription(_self: *@This(), _accessibilityValueDescription: ?*foundation.String) void {
        return objc.msgSend(_self, "setAccessibilityValueDescription:", void, .{_accessibilityValueDescription});
    }

    pub fn accessibilityVisibleChildren(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilityVisibleChildren", ?*foundation.Array, .{});
    }

    pub fn setAccessibilityVisibleChildren(_self: *@This(), _accessibilityVisibleChildren: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilityVisibleChildren:", void, .{_accessibilityVisibleChildren});
    }

    pub fn accessibilitySubrole(_self: *@This()) app_kit.AccessibilitySubrole {
        return objc.msgSend(_self, "accessibilitySubrole", app_kit.AccessibilitySubrole, .{});
    }

    pub fn setAccessibilitySubrole(_self: *@This(), _accessibilitySubrole: app_kit.AccessibilitySubrole) void {
        return objc.msgSend(_self, "setAccessibilitySubrole:", void, .{_accessibilitySubrole});
    }

    pub fn accessibilityTitle(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "accessibilityTitle", ?*foundation.String, .{});
    }

    pub fn setAccessibilityTitle(_self: *@This(), _accessibilityTitle: ?*foundation.String) void {
        return objc.msgSend(_self, "setAccessibilityTitle:", void, .{_accessibilityTitle});
    }

    pub fn accessibilityTitleUIElement(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityTitleUIElement", ?objc.Id, .{});
    }

    pub fn setAccessibilityTitleUIElement(_self: *@This(), _accessibilityTitleUIElement: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityTitleUIElement:", void, .{_accessibilityTitleUIElement});
    }

    pub fn accessibilityNextContents(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilityNextContents", ?*foundation.Array, .{});
    }

    pub fn setAccessibilityNextContents(_self: *@This(), _accessibilityNextContents: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilityNextContents:", void, .{_accessibilityNextContents});
    }

    pub fn accessibilityOrientation(_self: *@This()) app_kit.AccessibilityOrientation {
        return objc.msgSend(_self, "accessibilityOrientation", app_kit.AccessibilityOrientation, .{});
    }

    pub fn setAccessibilityOrientation(_self: *@This(), _accessibilityOrientation: app_kit.AccessibilityOrientation) void {
        return objc.msgSend(_self, "setAccessibilityOrientation:", void, .{_accessibilityOrientation});
    }

    pub fn accessibilityOverflowButton(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityOverflowButton", ?objc.Id, .{});
    }

    pub fn setAccessibilityOverflowButton(_self: *@This(), _accessibilityOverflowButton: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityOverflowButton:", void, .{_accessibilityOverflowButton});
    }

    pub fn setAccessibilityParent(_self: *@This(), _accessibilityParent: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityParent:", void, .{_accessibilityParent});
    }

    pub fn accessibilityPlaceholderValue(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "accessibilityPlaceholderValue", ?*foundation.String, .{});
    }

    pub fn setAccessibilityPlaceholderValue(_self: *@This(), _accessibilityPlaceholderValue: ?*foundation.String) void {
        return objc.msgSend(_self, "setAccessibilityPlaceholderValue:", void, .{_accessibilityPlaceholderValue});
    }

    pub fn accessibilityPreviousContents(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilityPreviousContents", ?*foundation.Array, .{});
    }

    pub fn setAccessibilityPreviousContents(_self: *@This(), _accessibilityPreviousContents: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilityPreviousContents:", void, .{_accessibilityPreviousContents});
    }

    pub fn accessibilityRole(_self: *@This()) app_kit.AccessibilityRole {
        return objc.msgSend(_self, "accessibilityRole", app_kit.AccessibilityRole, .{});
    }

    pub fn setAccessibilityRole(_self: *@This(), _accessibilityRole: app_kit.AccessibilityRole) void {
        return objc.msgSend(_self, "setAccessibilityRole:", void, .{_accessibilityRole});
    }

    pub fn accessibilityRoleDescription(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "accessibilityRoleDescription", ?*foundation.String, .{});
    }

    pub fn setAccessibilityRoleDescription(_self: *@This(), _accessibilityRoleDescription: ?*foundation.String) void {
        return objc.msgSend(_self, "setAccessibilityRoleDescription:", void, .{_accessibilityRoleDescription});
    }

    pub fn accessibilitySearchButton(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilitySearchButton", ?objc.Id, .{});
    }

    pub fn setAccessibilitySearchButton(_self: *@This(), _accessibilitySearchButton: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilitySearchButton:", void, .{_accessibilitySearchButton});
    }

    pub fn accessibilitySearchMenu(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilitySearchMenu", ?objc.Id, .{});
    }

    pub fn setAccessibilitySearchMenu(_self: *@This(), _accessibilitySearchMenu: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilitySearchMenu:", void, .{_accessibilitySearchMenu});
    }

    pub fn isAccessibilitySelected(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isAccessibilitySelected", objc.BOOL, .{});
    }

    pub fn setAccessibilitySelected(_self: *@This(), _accessibilitySelected: objc.BOOL) void {
        return objc.msgSend(_self, "setAccessibilitySelected:", void, .{_accessibilitySelected});
    }

    pub fn accessibilitySelectedChildren(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilitySelectedChildren", ?*foundation.Array, .{});
    }

    pub fn setAccessibilitySelectedChildren(_self: *@This(), _accessibilitySelectedChildren: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilitySelectedChildren:", void, .{_accessibilitySelectedChildren});
    }

    pub fn accessibilityServesAsTitleForUIElements(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilityServesAsTitleForUIElements", ?*foundation.Array, .{});
    }

    pub fn setAccessibilityServesAsTitleForUIElements(_self: *@This(), _accessibilityServesAsTitleForUIElements: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilityServesAsTitleForUIElements:", void, .{_accessibilityServesAsTitleForUIElements});
    }

    pub fn accessibilityShownMenu(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityShownMenu", ?objc.Id, .{});
    }

    pub fn setAccessibilityShownMenu(_self: *@This(), _accessibilityShownMenu: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityShownMenu:", void, .{_accessibilityShownMenu});
    }

    pub fn accessibilityMinValue(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityMinValue", ?objc.Id, .{});
    }

    pub fn setAccessibilityMinValue(_self: *@This(), _accessibilityMinValue: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityMinValue:", void, .{_accessibilityMinValue});
    }

    pub fn accessibilityMaxValue(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityMaxValue", ?objc.Id, .{});
    }

    pub fn setAccessibilityMaxValue(_self: *@This(), _accessibilityMaxValue: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityMaxValue:", void, .{_accessibilityMaxValue});
    }

    pub fn accessibilityLinkedUIElements(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilityLinkedUIElements", ?*foundation.Array, .{});
    }

    pub fn setAccessibilityLinkedUIElements(_self: *@This(), _accessibilityLinkedUIElements: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilityLinkedUIElements:", void, .{_accessibilityLinkedUIElements});
    }

    pub fn accessibilityWindow(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityWindow", ?objc.Id, .{});
    }

    pub fn setAccessibilityWindow(_self: *@This(), _accessibilityWindow: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityWindow:", void, .{_accessibilityWindow});
    }

    pub fn setAccessibilityIdentifier(_self: *@This(), _accessibilityIdentifier: ?*foundation.String) void {
        return objc.msgSend(_self, "setAccessibilityIdentifier:", void, .{_accessibilityIdentifier});
    }

    pub fn accessibilityHelp(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "accessibilityHelp", ?*foundation.String, .{});
    }

    pub fn setAccessibilityHelp(_self: *@This(), _accessibilityHelp: ?*foundation.String) void {
        return objc.msgSend(_self, "setAccessibilityHelp:", void, .{_accessibilityHelp});
    }

    pub fn accessibilityFilename(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "accessibilityFilename", ?*foundation.String, .{});
    }

    pub fn setAccessibilityFilename(_self: *@This(), _accessibilityFilename: ?*foundation.String) void {
        return objc.msgSend(_self, "setAccessibilityFilename:", void, .{_accessibilityFilename});
    }

    pub fn isAccessibilityExpanded(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isAccessibilityExpanded", objc.BOOL, .{});
    }

    pub fn setAccessibilityExpanded(_self: *@This(), _accessibilityExpanded: objc.BOOL) void {
        return objc.msgSend(_self, "setAccessibilityExpanded:", void, .{_accessibilityExpanded});
    }

    pub fn isAccessibilityEdited(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isAccessibilityEdited", objc.BOOL, .{});
    }

    pub fn setAccessibilityEdited(_self: *@This(), _accessibilityEdited: objc.BOOL) void {
        return objc.msgSend(_self, "setAccessibilityEdited:", void, .{_accessibilityEdited});
    }

    pub fn isAccessibilityEnabled(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isAccessibilityEnabled", objc.BOOL, .{});
    }

    pub fn setAccessibilityEnabled(_self: *@This(), _accessibilityEnabled: objc.BOOL) void {
        return objc.msgSend(_self, "setAccessibilityEnabled:", void, .{_accessibilityEnabled});
    }

    pub fn accessibilityChildren(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilityChildren", ?*foundation.Array, .{});
    }

    pub fn setAccessibilityChildren(_self: *@This(), _accessibilityChildren: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilityChildren:", void, .{_accessibilityChildren});
    }

    pub fn accessibilityChildrenInNavigationOrder(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "accessibilityChildrenInNavigationOrder", ?*anyopaque, .{});
    }

    pub fn setAccessibilityChildrenInNavigationOrder(_self: *@This(), _accessibilityChildrenInNavigationOrder: ?*anyopaque) void {
        return objc.msgSend(_self, "setAccessibilityChildrenInNavigationOrder:", void, .{_accessibilityChildrenInNavigationOrder});
    }

    pub fn accessibilityClearButton(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityClearButton", ?objc.Id, .{});
    }

    pub fn setAccessibilityClearButton(_self: *@This(), _accessibilityClearButton: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityClearButton:", void, .{_accessibilityClearButton});
    }

    pub fn accessibilityCancelButton(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityCancelButton", ?objc.Id, .{});
    }

    pub fn setAccessibilityCancelButton(_self: *@This(), _accessibilityCancelButton: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityCancelButton:", void, .{_accessibilityCancelButton});
    }

    pub fn isAccessibilityProtectedContent(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isAccessibilityProtectedContent", objc.BOOL, .{});
    }

    pub fn setAccessibilityProtectedContent(_self: *@This(), _accessibilityProtectedContent: objc.BOOL) void {
        return objc.msgSend(_self, "setAccessibilityProtectedContent:", void, .{_accessibilityProtectedContent});
    }

    pub fn accessibilityContents(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilityContents", ?*foundation.Array, .{});
    }

    pub fn setAccessibilityContents(_self: *@This(), _accessibilityContents: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilityContents:", void, .{_accessibilityContents});
    }

    pub fn accessibilityLabel(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "accessibilityLabel", ?*foundation.String, .{});
    }

    pub fn setAccessibilityLabel(_self: *@This(), _accessibilityLabel: ?*foundation.String) void {
        return objc.msgSend(_self, "setAccessibilityLabel:", void, .{_accessibilityLabel});
    }

    pub fn isAccessibilityAlternateUIVisible(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isAccessibilityAlternateUIVisible", objc.BOOL, .{});
    }

    pub fn setAccessibilityAlternateUIVisible(_self: *@This(), _accessibilityAlternateUIVisible: objc.BOOL) void {
        return objc.msgSend(_self, "setAccessibilityAlternateUIVisible:", void, .{_accessibilityAlternateUIVisible});
    }

    pub fn accessibilitySharedFocusElements(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilitySharedFocusElements", ?*foundation.Array, .{});
    }

    pub fn setAccessibilitySharedFocusElements(_self: *@This(), _accessibilitySharedFocusElements: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilitySharedFocusElements:", void, .{_accessibilitySharedFocusElements});
    }

    pub fn isAccessibilityRequired(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isAccessibilityRequired", objc.BOOL, .{});
    }

    pub fn setAccessibilityRequired(_self: *@This(), _accessibilityRequired: objc.BOOL) void {
        return objc.msgSend(_self, "setAccessibilityRequired:", void, .{_accessibilityRequired});
    }

    pub fn accessibilityCustomRotors(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "accessibilityCustomRotors", ?*anyopaque, .{});
    }

    pub fn setAccessibilityCustomRotors(_self: *@This(), _accessibilityCustomRotors: ?*anyopaque) void {
        return objc.msgSend(_self, "setAccessibilityCustomRotors:", void, .{_accessibilityCustomRotors});
    }

    pub fn accessibilityUserInputLabels(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "accessibilityUserInputLabels", ?*anyopaque, .{});
    }

    pub fn setAccessibilityUserInputLabels(_self: *@This(), _accessibilityUserInputLabels: ?*anyopaque) void {
        return objc.msgSend(_self, "setAccessibilityUserInputLabels:", void, .{_accessibilityUserInputLabels});
    }

    pub fn accessibilityAttributedUserInputLabels(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "accessibilityAttributedUserInputLabels", ?*anyopaque, .{});
    }

    pub fn setAccessibilityAttributedUserInputLabels(_self: *@This(), _accessibilityAttributedUserInputLabels: ?*anyopaque) void {
        return objc.msgSend(_self, "setAccessibilityAttributedUserInputLabels:", void, .{_accessibilityAttributedUserInputLabels});
    }

    pub fn accessibilityApplicationFocusedUIElement(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityApplicationFocusedUIElement", ?objc.Id, .{});
    }

    pub fn setAccessibilityApplicationFocusedUIElement(_self: *@This(), _accessibilityApplicationFocusedUIElement: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityApplicationFocusedUIElement:", void, .{_accessibilityApplicationFocusedUIElement});
    }

    pub fn accessibilityMainWindow(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityMainWindow", ?objc.Id, .{});
    }

    pub fn setAccessibilityMainWindow(_self: *@This(), _accessibilityMainWindow: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityMainWindow:", void, .{_accessibilityMainWindow});
    }

    pub fn isAccessibilityHidden(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isAccessibilityHidden", objc.BOOL, .{});
    }

    pub fn setAccessibilityHidden(_self: *@This(), _accessibilityHidden: objc.BOOL) void {
        return objc.msgSend(_self, "setAccessibilityHidden:", void, .{_accessibilityHidden});
    }

    pub fn isAccessibilityFrontmost(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isAccessibilityFrontmost", objc.BOOL, .{});
    }

    pub fn setAccessibilityFrontmost(_self: *@This(), _accessibilityFrontmost: objc.BOOL) void {
        return objc.msgSend(_self, "setAccessibilityFrontmost:", void, .{_accessibilityFrontmost});
    }

    pub fn accessibilityFocusedWindow(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityFocusedWindow", ?objc.Id, .{});
    }

    pub fn setAccessibilityFocusedWindow(_self: *@This(), _accessibilityFocusedWindow: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityFocusedWindow:", void, .{_accessibilityFocusedWindow});
    }

    pub fn accessibilityWindows(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilityWindows", ?*foundation.Array, .{});
    }

    pub fn setAccessibilityWindows(_self: *@This(), _accessibilityWindows: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilityWindows:", void, .{_accessibilityWindows});
    }

    pub fn accessibilityExtrasMenuBar(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityExtrasMenuBar", ?objc.Id, .{});
    }

    pub fn setAccessibilityExtrasMenuBar(_self: *@This(), _accessibilityExtrasMenuBar: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityExtrasMenuBar:", void, .{_accessibilityExtrasMenuBar});
    }

    pub fn accessibilityMenuBar(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityMenuBar", ?objc.Id, .{});
    }

    pub fn setAccessibilityMenuBar(_self: *@This(), _accessibilityMenuBar: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityMenuBar:", void, .{_accessibilityMenuBar});
    }

    pub fn accessibilityColumnTitles(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilityColumnTitles", ?*foundation.Array, .{});
    }

    pub fn setAccessibilityColumnTitles(_self: *@This(), _accessibilityColumnTitles: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilityColumnTitles:", void, .{_accessibilityColumnTitles});
    }

    pub fn isAccessibilityOrderedByRow(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isAccessibilityOrderedByRow", objc.BOOL, .{});
    }

    pub fn setAccessibilityOrderedByRow(_self: *@This(), _accessibilityOrderedByRow: objc.BOOL) void {
        return objc.msgSend(_self, "setAccessibilityOrderedByRow:", void, .{_accessibilityOrderedByRow});
    }

    pub fn accessibilityHorizontalUnits(_self: *@This()) app_kit.AccessibilityUnits {
        return objc.msgSend(_self, "accessibilityHorizontalUnits", app_kit.AccessibilityUnits, .{});
    }

    pub fn setAccessibilityHorizontalUnits(_self: *@This(), _accessibilityHorizontalUnits: app_kit.AccessibilityUnits) void {
        return objc.msgSend(_self, "setAccessibilityHorizontalUnits:", void, .{_accessibilityHorizontalUnits});
    }

    pub fn accessibilityVerticalUnits(_self: *@This()) app_kit.AccessibilityUnits {
        return objc.msgSend(_self, "accessibilityVerticalUnits", app_kit.AccessibilityUnits, .{});
    }

    pub fn setAccessibilityVerticalUnits(_self: *@This(), _accessibilityVerticalUnits: app_kit.AccessibilityUnits) void {
        return objc.msgSend(_self, "setAccessibilityVerticalUnits:", void, .{_accessibilityVerticalUnits});
    }

    pub fn accessibilityHorizontalUnitDescription(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "accessibilityHorizontalUnitDescription", ?*foundation.String, .{});
    }

    pub fn setAccessibilityHorizontalUnitDescription(_self: *@This(), _accessibilityHorizontalUnitDescription: ?*foundation.String) void {
        return objc.msgSend(_self, "setAccessibilityHorizontalUnitDescription:", void, .{_accessibilityHorizontalUnitDescription});
    }

    pub fn accessibilityVerticalUnitDescription(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "accessibilityVerticalUnitDescription", ?*foundation.String, .{});
    }

    pub fn setAccessibilityVerticalUnitDescription(_self: *@This(), _accessibilityVerticalUnitDescription: ?*foundation.String) void {
        return objc.msgSend(_self, "setAccessibilityVerticalUnitDescription:", void, .{_accessibilityVerticalUnitDescription});
    }

    pub fn accessibilityHandles(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilityHandles", ?*foundation.Array, .{});
    }

    pub fn setAccessibilityHandles(_self: *@This(), _accessibilityHandles: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilityHandles:", void, .{_accessibilityHandles});
    }

    pub fn accessibilityWarningValue(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityWarningValue", ?objc.Id, .{});
    }

    pub fn setAccessibilityWarningValue(_self: *@This(), _accessibilityWarningValue: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityWarningValue:", void, .{_accessibilityWarningValue});
    }

    pub fn accessibilityCriticalValue(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityCriticalValue", ?objc.Id, .{});
    }

    pub fn setAccessibilityCriticalValue(_self: *@This(), _accessibilityCriticalValue: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityCriticalValue:", void, .{_accessibilityCriticalValue});
    }

    pub fn isAccessibilityDisclosed(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isAccessibilityDisclosed", objc.BOOL, .{});
    }

    pub fn setAccessibilityDisclosed(_self: *@This(), _accessibilityDisclosed: objc.BOOL) void {
        return objc.msgSend(_self, "setAccessibilityDisclosed:", void, .{_accessibilityDisclosed});
    }

    pub fn accessibilityDisclosedByRow(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityDisclosedByRow", ?objc.Id, .{});
    }

    pub fn setAccessibilityDisclosedByRow(_self: *@This(), _accessibilityDisclosedByRow: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityDisclosedByRow:", void, .{_accessibilityDisclosedByRow});
    }

    pub fn accessibilityDisclosedRows(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityDisclosedRows", ?objc.Id, .{});
    }

    pub fn setAccessibilityDisclosedRows(_self: *@This(), _accessibilityDisclosedRows: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityDisclosedRows:", void, .{_accessibilityDisclosedRows});
    }

    pub fn accessibilityDisclosureLevel(_self: *@This()) objc.NSInteger {
        return objc.msgSend(_self, "accessibilityDisclosureLevel", objc.NSInteger, .{});
    }

    pub fn setAccessibilityDisclosureLevel(_self: *@This(), _accessibilityDisclosureLevel: objc.NSInteger) void {
        return objc.msgSend(_self, "setAccessibilityDisclosureLevel:", void, .{_accessibilityDisclosureLevel});
    }

    pub fn accessibilityMarkerUIElements(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilityMarkerUIElements", ?*foundation.Array, .{});
    }

    pub fn setAccessibilityMarkerUIElements(_self: *@This(), _accessibilityMarkerUIElements: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilityMarkerUIElements:", void, .{_accessibilityMarkerUIElements});
    }

    pub fn accessibilityMarkerValues(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityMarkerValues", ?objc.Id, .{});
    }

    pub fn setAccessibilityMarkerValues(_self: *@This(), _accessibilityMarkerValues: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityMarkerValues:", void, .{_accessibilityMarkerValues});
    }

    pub fn accessibilityMarkerGroupUIElement(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityMarkerGroupUIElement", ?objc.Id, .{});
    }

    pub fn setAccessibilityMarkerGroupUIElement(_self: *@This(), _accessibilityMarkerGroupUIElement: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityMarkerGroupUIElement:", void, .{_accessibilityMarkerGroupUIElement});
    }

    pub fn accessibilityUnits(_self: *@This()) app_kit.AccessibilityUnits {
        return objc.msgSend(_self, "accessibilityUnits", app_kit.AccessibilityUnits, .{});
    }

    pub fn setAccessibilityUnits(_self: *@This(), _accessibilityUnits: app_kit.AccessibilityUnits) void {
        return objc.msgSend(_self, "setAccessibilityUnits:", void, .{_accessibilityUnits});
    }

    pub fn accessibilityUnitDescription(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "accessibilityUnitDescription", ?*foundation.String, .{});
    }

    pub fn setAccessibilityUnitDescription(_self: *@This(), _accessibilityUnitDescription: ?*foundation.String) void {
        return objc.msgSend(_self, "setAccessibilityUnitDescription:", void, .{_accessibilityUnitDescription});
    }

    pub fn accessibilityRulerMarkerType(_self: *@This()) app_kit.AccessibilityRulerMarkerType {
        return objc.msgSend(_self, "accessibilityRulerMarkerType", app_kit.AccessibilityRulerMarkerType, .{});
    }

    pub fn setAccessibilityRulerMarkerType(_self: *@This(), _accessibilityRulerMarkerType: app_kit.AccessibilityRulerMarkerType) void {
        return objc.msgSend(_self, "setAccessibilityRulerMarkerType:", void, .{_accessibilityRulerMarkerType});
    }

    pub fn accessibilityMarkerTypeDescription(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "accessibilityMarkerTypeDescription", ?*foundation.String, .{});
    }

    pub fn setAccessibilityMarkerTypeDescription(_self: *@This(), _accessibilityMarkerTypeDescription: ?*foundation.String) void {
        return objc.msgSend(_self, "setAccessibilityMarkerTypeDescription:", void, .{_accessibilityMarkerTypeDescription});
    }

    pub fn accessibilityHorizontalScrollBar(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityHorizontalScrollBar", ?objc.Id, .{});
    }

    pub fn setAccessibilityHorizontalScrollBar(_self: *@This(), _accessibilityHorizontalScrollBar: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityHorizontalScrollBar:", void, .{_accessibilityHorizontalScrollBar});
    }

    pub fn accessibilityVerticalScrollBar(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityVerticalScrollBar", ?objc.Id, .{});
    }

    pub fn setAccessibilityVerticalScrollBar(_self: *@This(), _accessibilityVerticalScrollBar: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityVerticalScrollBar:", void, .{_accessibilityVerticalScrollBar});
    }

    pub fn accessibilityAllowedValues(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "accessibilityAllowedValues", ?*anyopaque, .{});
    }

    pub fn setAccessibilityAllowedValues(_self: *@This(), _accessibilityAllowedValues: ?*anyopaque) void {
        return objc.msgSend(_self, "setAccessibilityAllowedValues:", void, .{_accessibilityAllowedValues});
    }

    pub fn accessibilityLabelUIElements(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilityLabelUIElements", ?*foundation.Array, .{});
    }

    pub fn setAccessibilityLabelUIElements(_self: *@This(), _accessibilityLabelUIElements: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilityLabelUIElements:", void, .{_accessibilityLabelUIElements});
    }

    pub fn accessibilityLabelValue(_self: *@This()) f32 {
        return objc.msgSend(_self, "accessibilityLabelValue", f32, .{});
    }

    pub fn setAccessibilityLabelValue(_self: *@This(), _accessibilityLabelValue: f32) void {
        return objc.msgSend(_self, "setAccessibilityLabelValue:", void, .{_accessibilityLabelValue});
    }

    pub fn accessibilitySplitters(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilitySplitters", ?*foundation.Array, .{});
    }

    pub fn setAccessibilitySplitters(_self: *@This(), _accessibilitySplitters: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilitySplitters:", void, .{_accessibilitySplitters});
    }

    pub fn accessibilityDecrementButton(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityDecrementButton", ?objc.Id, .{});
    }

    pub fn setAccessibilityDecrementButton(_self: *@This(), _accessibilityDecrementButton: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityDecrementButton:", void, .{_accessibilityDecrementButton});
    }

    pub fn accessibilityIncrementButton(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityIncrementButton", ?objc.Id, .{});
    }

    pub fn setAccessibilityIncrementButton(_self: *@This(), _accessibilityIncrementButton: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityIncrementButton:", void, .{_accessibilityIncrementButton});
    }

    pub fn accessibilityTabs(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilityTabs", ?*foundation.Array, .{});
    }

    pub fn setAccessibilityTabs(_self: *@This(), _accessibilityTabs: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilityTabs:", void, .{_accessibilityTabs});
    }

    pub fn accessibilityHeader(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityHeader", ?objc.Id, .{});
    }

    pub fn setAccessibilityHeader(_self: *@This(), _accessibilityHeader: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityHeader:", void, .{_accessibilityHeader});
    }

    pub fn accessibilityColumnCount(_self: *@This()) objc.NSInteger {
        return objc.msgSend(_self, "accessibilityColumnCount", objc.NSInteger, .{});
    }

    pub fn setAccessibilityColumnCount(_self: *@This(), _accessibilityColumnCount: objc.NSInteger) void {
        return objc.msgSend(_self, "setAccessibilityColumnCount:", void, .{_accessibilityColumnCount});
    }

    pub fn accessibilityRowCount(_self: *@This()) objc.NSInteger {
        return objc.msgSend(_self, "accessibilityRowCount", objc.NSInteger, .{});
    }

    pub fn setAccessibilityRowCount(_self: *@This(), _accessibilityRowCount: objc.NSInteger) void {
        return objc.msgSend(_self, "setAccessibilityRowCount:", void, .{_accessibilityRowCount});
    }

    pub fn accessibilityIndex(_self: *@This()) objc.NSInteger {
        return objc.msgSend(_self, "accessibilityIndex", objc.NSInteger, .{});
    }

    pub fn setAccessibilityIndex(_self: *@This(), _accessibilityIndex: objc.NSInteger) void {
        return objc.msgSend(_self, "setAccessibilityIndex:", void, .{_accessibilityIndex});
    }

    pub fn accessibilityColumns(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilityColumns", ?*foundation.Array, .{});
    }

    pub fn setAccessibilityColumns(_self: *@This(), _accessibilityColumns: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilityColumns:", void, .{_accessibilityColumns});
    }

    pub fn accessibilityRows(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilityRows", ?*foundation.Array, .{});
    }

    pub fn setAccessibilityRows(_self: *@This(), _accessibilityRows: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilityRows:", void, .{_accessibilityRows});
    }

    pub fn accessibilityVisibleRows(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilityVisibleRows", ?*foundation.Array, .{});
    }

    pub fn setAccessibilityVisibleRows(_self: *@This(), _accessibilityVisibleRows: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilityVisibleRows:", void, .{_accessibilityVisibleRows});
    }

    pub fn accessibilitySelectedRows(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilitySelectedRows", ?*foundation.Array, .{});
    }

    pub fn setAccessibilitySelectedRows(_self: *@This(), _accessibilitySelectedRows: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilitySelectedRows:", void, .{_accessibilitySelectedRows});
    }

    pub fn accessibilityVisibleColumns(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilityVisibleColumns", ?*foundation.Array, .{});
    }

    pub fn setAccessibilityVisibleColumns(_self: *@This(), _accessibilityVisibleColumns: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilityVisibleColumns:", void, .{_accessibilityVisibleColumns});
    }

    pub fn accessibilitySelectedColumns(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilitySelectedColumns", ?*foundation.Array, .{});
    }

    pub fn setAccessibilitySelectedColumns(_self: *@This(), _accessibilitySelectedColumns: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilitySelectedColumns:", void, .{_accessibilitySelectedColumns});
    }

    pub fn accessibilitySortDirection(_self: *@This()) app_kit.AccessibilitySortDirection {
        return objc.msgSend(_self, "accessibilitySortDirection", app_kit.AccessibilitySortDirection, .{});
    }

    pub fn setAccessibilitySortDirection(_self: *@This(), _accessibilitySortDirection: app_kit.AccessibilitySortDirection) void {
        return objc.msgSend(_self, "setAccessibilitySortDirection:", void, .{_accessibilitySortDirection});
    }

    pub fn accessibilityRowHeaderUIElements(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilityRowHeaderUIElements", ?*foundation.Array, .{});
    }

    pub fn setAccessibilityRowHeaderUIElements(_self: *@This(), _accessibilityRowHeaderUIElements: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilityRowHeaderUIElements:", void, .{_accessibilityRowHeaderUIElements});
    }

    pub fn accessibilitySelectedCells(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilitySelectedCells", ?*foundation.Array, .{});
    }

    pub fn setAccessibilitySelectedCells(_self: *@This(), _accessibilitySelectedCells: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilitySelectedCells:", void, .{_accessibilitySelectedCells});
    }

    pub fn accessibilityVisibleCells(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilityVisibleCells", ?*foundation.Array, .{});
    }

    pub fn setAccessibilityVisibleCells(_self: *@This(), _accessibilityVisibleCells: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilityVisibleCells:", void, .{_accessibilityVisibleCells});
    }

    pub fn accessibilityColumnHeaderUIElements(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilityColumnHeaderUIElements", ?*foundation.Array, .{});
    }

    pub fn setAccessibilityColumnHeaderUIElements(_self: *@This(), _accessibilityColumnHeaderUIElements: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilityColumnHeaderUIElements:", void, .{_accessibilityColumnHeaderUIElements});
    }

    pub fn accessibilityRowIndexRange(_self: *@This()) foundation.Range {
        return objc.msgSend(_self, "accessibilityRowIndexRange", foundation.Range, .{});
    }

    pub fn setAccessibilityRowIndexRange(_self: *@This(), _accessibilityRowIndexRange: foundation.Range) void {
        return objc.msgSend(_self, "setAccessibilityRowIndexRange:", void, .{_accessibilityRowIndexRange});
    }

    pub fn accessibilityColumnIndexRange(_self: *@This()) foundation.Range {
        return objc.msgSend(_self, "accessibilityColumnIndexRange", foundation.Range, .{});
    }

    pub fn setAccessibilityColumnIndexRange(_self: *@This(), _accessibilityColumnIndexRange: foundation.Range) void {
        return objc.msgSend(_self, "setAccessibilityColumnIndexRange:", void, .{_accessibilityColumnIndexRange});
    }

    pub fn accessibilityInsertionPointLineNumber(_self: *@This()) objc.NSInteger {
        return objc.msgSend(_self, "accessibilityInsertionPointLineNumber", objc.NSInteger, .{});
    }

    pub fn setAccessibilityInsertionPointLineNumber(_self: *@This(), _accessibilityInsertionPointLineNumber: objc.NSInteger) void {
        return objc.msgSend(_self, "setAccessibilityInsertionPointLineNumber:", void, .{_accessibilityInsertionPointLineNumber});
    }

    pub fn accessibilitySharedCharacterRange(_self: *@This()) foundation.Range {
        return objc.msgSend(_self, "accessibilitySharedCharacterRange", foundation.Range, .{});
    }

    pub fn setAccessibilitySharedCharacterRange(_self: *@This(), _accessibilitySharedCharacterRange: foundation.Range) void {
        return objc.msgSend(_self, "setAccessibilitySharedCharacterRange:", void, .{_accessibilitySharedCharacterRange});
    }

    pub fn accessibilitySharedTextUIElements(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilitySharedTextUIElements", ?*foundation.Array, .{});
    }

    pub fn setAccessibilitySharedTextUIElements(_self: *@This(), _accessibilitySharedTextUIElements: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilitySharedTextUIElements:", void, .{_accessibilitySharedTextUIElements});
    }

    pub fn accessibilityVisibleCharacterRange(_self: *@This()) foundation.Range {
        return objc.msgSend(_self, "accessibilityVisibleCharacterRange", foundation.Range, .{});
    }

    pub fn setAccessibilityVisibleCharacterRange(_self: *@This(), _accessibilityVisibleCharacterRange: foundation.Range) void {
        return objc.msgSend(_self, "setAccessibilityVisibleCharacterRange:", void, .{_accessibilityVisibleCharacterRange});
    }

    pub fn accessibilityNumberOfCharacters(_self: *@This()) objc.NSInteger {
        return objc.msgSend(_self, "accessibilityNumberOfCharacters", objc.NSInteger, .{});
    }

    pub fn setAccessibilityNumberOfCharacters(_self: *@This(), _accessibilityNumberOfCharacters: objc.NSInteger) void {
        return objc.msgSend(_self, "setAccessibilityNumberOfCharacters:", void, .{_accessibilityNumberOfCharacters});
    }

    pub fn accessibilitySelectedText(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "accessibilitySelectedText", ?*foundation.String, .{});
    }

    pub fn setAccessibilitySelectedText(_self: *@This(), _accessibilitySelectedText: ?*foundation.String) void {
        return objc.msgSend(_self, "setAccessibilitySelectedText:", void, .{_accessibilitySelectedText});
    }

    pub fn accessibilitySelectedTextRange(_self: *@This()) foundation.Range {
        return objc.msgSend(_self, "accessibilitySelectedTextRange", foundation.Range, .{});
    }

    pub fn setAccessibilitySelectedTextRange(_self: *@This(), _accessibilitySelectedTextRange: foundation.Range) void {
        return objc.msgSend(_self, "setAccessibilitySelectedTextRange:", void, .{_accessibilitySelectedTextRange});
    }

    pub fn accessibilitySelectedTextRanges(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "accessibilitySelectedTextRanges", ?*anyopaque, .{});
    }

    pub fn setAccessibilitySelectedTextRanges(_self: *@This(), _accessibilitySelectedTextRanges: ?*anyopaque) void {
        return objc.msgSend(_self, "setAccessibilitySelectedTextRanges:", void, .{_accessibilitySelectedTextRanges});
    }

    pub fn accessibilityToolbarButton(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityToolbarButton", ?objc.Id, .{});
    }

    pub fn setAccessibilityToolbarButton(_self: *@This(), _accessibilityToolbarButton: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityToolbarButton:", void, .{_accessibilityToolbarButton});
    }

    pub fn isAccessibilityModal(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isAccessibilityModal", objc.BOOL, .{});
    }

    pub fn setAccessibilityModal(_self: *@This(), _accessibilityModal: objc.BOOL) void {
        return objc.msgSend(_self, "setAccessibilityModal:", void, .{_accessibilityModal});
    }

    pub fn accessibilityProxy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityProxy", ?objc.Id, .{});
    }

    pub fn setAccessibilityProxy(_self: *@This(), _accessibilityProxy: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityProxy:", void, .{_accessibilityProxy});
    }

    pub fn isAccessibilityMain(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isAccessibilityMain", objc.BOOL, .{});
    }

    pub fn setAccessibilityMain(_self: *@This(), _accessibilityMain: objc.BOOL) void {
        return objc.msgSend(_self, "setAccessibilityMain:", void, .{_accessibilityMain});
    }

    pub fn accessibilityFullScreenButton(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityFullScreenButton", ?objc.Id, .{});
    }

    pub fn setAccessibilityFullScreenButton(_self: *@This(), _accessibilityFullScreenButton: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityFullScreenButton:", void, .{_accessibilityFullScreenButton});
    }

    pub fn accessibilityGrowArea(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityGrowArea", ?objc.Id, .{});
    }

    pub fn setAccessibilityGrowArea(_self: *@This(), _accessibilityGrowArea: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityGrowArea:", void, .{_accessibilityGrowArea});
    }

    pub fn accessibilityDocument(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "accessibilityDocument", ?*foundation.String, .{});
    }

    pub fn setAccessibilityDocument(_self: *@This(), _accessibilityDocument: ?*foundation.String) void {
        return objc.msgSend(_self, "setAccessibilityDocument:", void, .{_accessibilityDocument});
    }

    pub fn accessibilityDefaultButton(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityDefaultButton", ?objc.Id, .{});
    }

    pub fn setAccessibilityDefaultButton(_self: *@This(), _accessibilityDefaultButton: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityDefaultButton:", void, .{_accessibilityDefaultButton});
    }

    pub fn accessibilityCloseButton(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityCloseButton", ?objc.Id, .{});
    }

    pub fn setAccessibilityCloseButton(_self: *@This(), _accessibilityCloseButton: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityCloseButton:", void, .{_accessibilityCloseButton});
    }

    pub fn accessibilityZoomButton(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityZoomButton", ?objc.Id, .{});
    }

    pub fn setAccessibilityZoomButton(_self: *@This(), _accessibilityZoomButton: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityZoomButton:", void, .{_accessibilityZoomButton});
    }

    pub fn accessibilityMinimizeButton(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityMinimizeButton", ?objc.Id, .{});
    }

    pub fn setAccessibilityMinimizeButton(_self: *@This(), _accessibilityMinimizeButton: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityMinimizeButton:", void, .{_accessibilityMinimizeButton});
    }

    pub fn isAccessibilityMinimized(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isAccessibilityMinimized", objc.BOOL, .{});
    }

    pub fn setAccessibilityMinimized(_self: *@This(), _accessibilityMinimized: objc.BOOL) void {
        return objc.msgSend(_self, "setAccessibilityMinimized:", void, .{_accessibilityMinimized});
    }

    pub fn accessibilityCustomActions(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "accessibilityCustomActions", ?*anyopaque, .{});
    }

    pub fn setAccessibilityCustomActions(_self: *@This(), _accessibilityCustomActions: ?*anyopaque) void {
        return objc.msgSend(_self, "setAccessibilityCustomActions:", void, .{_accessibilityCustomActions});
    }

    pub fn initWithFrame(_self: *@This(), _frameRect: foundation.Rect) *@This() {
        return objc.msgSend(_self, "initWithFrame:", *@This(), .{_frameRect});
    }

    pub fn isDescendantOf(_self: *@This(), _view: ?*app_kit.View) objc.BOOL {
        return objc.msgSend(_self, "isDescendantOf:", objc.BOOL, .{_view});
    }

    pub fn ancestorSharedWithView(_self: *@This(), _view: ?*app_kit.View) ?*app_kit.View {
        return objc.msgSend(_self, "ancestorSharedWithView:", ?*app_kit.View, .{_view});
    }

    pub fn getRectsBeingDrawnCount(_self: *@This(), _rects: ?*?*foundation.Rect, _count: ?*objc.NSInteger) void {
        return objc.msgSend(_self, "getRectsBeingDrawn:count:", void, .{ _rects, _count });
    }

    pub fn needsToDrawRect(_self: *@This(), _rect: foundation.Rect) objc.BOOL {
        return objc.msgSend(_self, "needsToDrawRect:", objc.BOOL, .{_rect});
    }

    pub fn viewDidHide(_self: *@This()) void {
        return objc.msgSend(_self, "viewDidHide", void, .{});
    }

    pub fn viewDidUnhide(_self: *@This()) void {
        return objc.msgSend(_self, "viewDidUnhide", void, .{});
    }

    pub fn addSubview(_self: *@This(), _view: ?*app_kit.View) void {
        return objc.msgSend(_self, "addSubview:", void, .{_view});
    }

    pub fn addSubviewPositionedRelativeTo(_self: *@This(), _view: ?*app_kit.View, _place: app_kit.WindowOrderingMode, _otherView: ?*app_kit.View) void {
        return objc.msgSend(_self, "addSubview:positioned:relativeTo:", void, .{ _view, _place, _otherView });
    }

    pub fn sortSubviewsUsingFunctionContext(_self: *@This(), _compare: ?*const fn (?*anyopaque, ?*anyopaque, ?*anyopaque) callconv(.C) foundation.ComparisonResult, _context: ?*anyopaque) void {
        return objc.msgSend(_self, "sortSubviewsUsingFunction:context:", void, .{ _compare, _context });
    }

    pub fn viewWillMoveToWindow(_self: *@This(), _newWindow: ?*app_kit.Window) void {
        return objc.msgSend(_self, "viewWillMoveToWindow:", void, .{_newWindow});
    }

    pub fn viewDidMoveToWindow(_self: *@This()) void {
        return objc.msgSend(_self, "viewDidMoveToWindow", void, .{});
    }

    pub fn viewWillMoveToSuperview(_self: *@This(), _newSuperview: ?*app_kit.View) void {
        return objc.msgSend(_self, "viewWillMoveToSuperview:", void, .{_newSuperview});
    }

    pub fn viewDidMoveToSuperview(_self: *@This()) void {
        return objc.msgSend(_self, "viewDidMoveToSuperview", void, .{});
    }

    pub fn didAddSubview(_self: *@This(), _subview: ?*app_kit.View) void {
        return objc.msgSend(_self, "didAddSubview:", void, .{_subview});
    }

    pub fn willRemoveSubview(_self: *@This(), _subview: ?*app_kit.View) void {
        return objc.msgSend(_self, "willRemoveSubview:", void, .{_subview});
    }

    pub fn removeFromSuperview(_self: *@This()) void {
        return objc.msgSend(_self, "removeFromSuperview", void, .{});
    }

    pub fn replaceSubviewWith(_self: *@This(), _oldView: ?*app_kit.View, _newView: ?*app_kit.View) void {
        return objc.msgSend(_self, "replaceSubview:with:", void, .{ _oldView, _newView });
    }

    pub fn removeFromSuperviewWithoutNeedingDisplay(_self: *@This()) void {
        return objc.msgSend(_self, "removeFromSuperviewWithoutNeedingDisplay", void, .{});
    }

    pub fn viewDidChangeBackingProperties(_self: *@This()) void {
        return objc.msgSend(_self, "viewDidChangeBackingProperties", void, .{});
    }

    pub fn resizeSubviewsWithOldSize(_self: *@This(), _oldSize: foundation.Size) void {
        return objc.msgSend(_self, "resizeSubviewsWithOldSize:", void, .{_oldSize});
    }

    pub fn resizeWithOldSuperviewSize(_self: *@This(), _oldSize: foundation.Size) void {
        return objc.msgSend(_self, "resizeWithOldSuperviewSize:", void, .{_oldSize});
    }

    pub fn setFrameOrigin(_self: *@This(), _newOrigin: foundation.Point) void {
        return objc.msgSend(_self, "setFrameOrigin:", void, .{_newOrigin});
    }

    pub fn setFrameSize(_self: *@This(), _newSize: foundation.Size) void {
        return objc.msgSend(_self, "setFrameSize:", void, .{_newSize});
    }

    pub fn setBoundsOrigin(_self: *@This(), _newOrigin: foundation.Point) void {
        return objc.msgSend(_self, "setBoundsOrigin:", void, .{_newOrigin});
    }

    pub fn setBoundsSize(_self: *@This(), _newSize: foundation.Size) void {
        return objc.msgSend(_self, "setBoundsSize:", void, .{_newSize});
    }

    pub fn translateOriginToPoint(_self: *@This(), _translation: foundation.Point) void {
        return objc.msgSend(_self, "translateOriginToPoint:", void, .{_translation});
    }

    pub fn scaleUnitSquareToSize(_self: *@This(), _newUnitSize: foundation.Size) void {
        return objc.msgSend(_self, "scaleUnitSquareToSize:", void, .{_newUnitSize});
    }

    pub fn rotateByAngle(_self: *@This(), _angle: core_foundation.CGFloat) void {
        return objc.msgSend(_self, "rotateByAngle:", void, .{_angle});
    }

    pub fn convertPointFromView(_self: *@This(), _point: foundation.Point, _view: ?*app_kit.View) foundation.Point {
        return objc.msgSend(_self, "convertPoint:fromView:", foundation.Point, .{ _point, _view });
    }

    pub fn convertPointToView(_self: *@This(), _point: foundation.Point, _view: ?*app_kit.View) foundation.Point {
        return objc.msgSend(_self, "convertPoint:toView:", foundation.Point, .{ _point, _view });
    }

    pub fn convertSizeFromView(_self: *@This(), _size: foundation.Size, _view: ?*app_kit.View) foundation.Size {
        return objc.msgSend(_self, "convertSize:fromView:", foundation.Size, .{ _size, _view });
    }

    pub fn convertSizeToView(_self: *@This(), _size: foundation.Size, _view: ?*app_kit.View) foundation.Size {
        return objc.msgSend(_self, "convertSize:toView:", foundation.Size, .{ _size, _view });
    }

    pub fn convertRectFromView(_self: *@This(), _rect: foundation.Rect, _view: ?*app_kit.View) foundation.Rect {
        return objc.msgSend(_self, "convertRect:fromView:", foundation.Rect, .{ _rect, _view });
    }

    pub fn convertRectToView(_self: *@This(), _rect: foundation.Rect, _view: ?*app_kit.View) foundation.Rect {
        return objc.msgSend(_self, "convertRect:toView:", foundation.Rect, .{ _rect, _view });
    }

    pub fn backingAlignedRectOptions(_self: *@This(), _rect: foundation.Rect, _options: foundation.AlignmentOptions) foundation.Rect {
        return objc.msgSend(_self, "backingAlignedRect:options:", foundation.Rect, .{ _rect, _options });
    }

    pub fn centerScanRect(_self: *@This(), _rect: foundation.Rect) foundation.Rect {
        return objc.msgSend(_self, "centerScanRect:", foundation.Rect, .{_rect});
    }

    pub fn convertPointToBacking(_self: *@This(), _point: foundation.Point) foundation.Point {
        return objc.msgSend(_self, "convertPointToBacking:", foundation.Point, .{_point});
    }

    pub fn convertPointFromBacking(_self: *@This(), _point: foundation.Point) foundation.Point {
        return objc.msgSend(_self, "convertPointFromBacking:", foundation.Point, .{_point});
    }

    pub fn convertSizeToBacking(_self: *@This(), _size: foundation.Size) foundation.Size {
        return objc.msgSend(_self, "convertSizeToBacking:", foundation.Size, .{_size});
    }

    pub fn convertSizeFromBacking(_self: *@This(), _size: foundation.Size) foundation.Size {
        return objc.msgSend(_self, "convertSizeFromBacking:", foundation.Size, .{_size});
    }

    pub fn convertRectToBacking(_self: *@This(), _rect: foundation.Rect) foundation.Rect {
        return objc.msgSend(_self, "convertRectToBacking:", foundation.Rect, .{_rect});
    }

    pub fn convertRectFromBacking(_self: *@This(), _rect: foundation.Rect) foundation.Rect {
        return objc.msgSend(_self, "convertRectFromBacking:", foundation.Rect, .{_rect});
    }

    pub fn convertPointToLayer(_self: *@This(), _point: foundation.Point) foundation.Point {
        return objc.msgSend(_self, "convertPointToLayer:", foundation.Point, .{_point});
    }

    pub fn convertPointFromLayer(_self: *@This(), _point: foundation.Point) foundation.Point {
        return objc.msgSend(_self, "convertPointFromLayer:", foundation.Point, .{_point});
    }

    pub fn convertSizeToLayer(_self: *@This(), _size: foundation.Size) foundation.Size {
        return objc.msgSend(_self, "convertSizeToLayer:", foundation.Size, .{_size});
    }

    pub fn convertSizeFromLayer(_self: *@This(), _size: foundation.Size) foundation.Size {
        return objc.msgSend(_self, "convertSizeFromLayer:", foundation.Size, .{_size});
    }

    pub fn convertRectToLayer(_self: *@This(), _rect: foundation.Rect) foundation.Rect {
        return objc.msgSend(_self, "convertRectToLayer:", foundation.Rect, .{_rect});
    }

    pub fn convertRectFromLayer(_self: *@This(), _rect: foundation.Rect) foundation.Rect {
        return objc.msgSend(_self, "convertRectFromLayer:", foundation.Rect, .{_rect});
    }

    pub fn setNeedsDisplayInRect(_self: *@This(), _invalidRect: foundation.Rect) void {
        return objc.msgSend(_self, "setNeedsDisplayInRect:", void, .{_invalidRect});
    }

    pub fn lockFocus(_self: *@This()) void {
        return objc.msgSend(_self, "lockFocus", void, .{});
    }

    pub fn unlockFocus(_self: *@This()) void {
        return objc.msgSend(_self, "unlockFocus", void, .{});
    }

    pub fn lockFocusIfCanDraw(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "lockFocusIfCanDraw", objc.BOOL, .{});
    }

    pub fn lockFocusIfCanDrawInContext(_self: *@This(), _context: ?*app_kit.GraphicsContext) objc.BOOL {
        return objc.msgSend(_self, "lockFocusIfCanDrawInContext:", objc.BOOL, .{_context});
    }

    pub fn display(_self: *@This()) void {
        return objc.msgSend(_self, "display", void, .{});
    }

    pub fn displayIfNeeded(_self: *@This()) void {
        return objc.msgSend(_self, "displayIfNeeded", void, .{});
    }

    pub fn displayIfNeededIgnoringOpacity(_self: *@This()) void {
        return objc.msgSend(_self, "displayIfNeededIgnoringOpacity", void, .{});
    }

    pub fn displayRect(_self: *@This(), _rect: foundation.Rect) void {
        return objc.msgSend(_self, "displayRect:", void, .{_rect});
    }

    pub fn displayIfNeededInRect(_self: *@This(), _rect: foundation.Rect) void {
        return objc.msgSend(_self, "displayIfNeededInRect:", void, .{_rect});
    }

    pub fn displayRectIgnoringOpacity(_self: *@This(), _rect: foundation.Rect) void {
        return objc.msgSend(_self, "displayRectIgnoringOpacity:", void, .{_rect});
    }

    pub fn displayIfNeededInRectIgnoringOpacity(_self: *@This(), _rect: foundation.Rect) void {
        return objc.msgSend(_self, "displayIfNeededInRectIgnoringOpacity:", void, .{_rect});
    }

    pub fn drawRect(_self: *@This(), _dirtyRect: foundation.Rect) void {
        return objc.msgSend(_self, "drawRect:", void, .{_dirtyRect});
    }

    pub fn displayRectIgnoringOpacityInContext(_self: *@This(), _rect: foundation.Rect, _context: ?*app_kit.GraphicsContext) void {
        return objc.msgSend(_self, "displayRectIgnoringOpacity:inContext:", void, .{ _rect, _context });
    }

    pub fn bitmapImageRepForCachingDisplayInRect(_self: *@This(), _rect: foundation.Rect) ?*app_kit.BitmapImageRep {
        return objc.msgSend(_self, "bitmapImageRepForCachingDisplayInRect:", ?*app_kit.BitmapImageRep, .{_rect});
    }

    pub fn cacheDisplayInRectToBitmapImageRep(_self: *@This(), _rect: foundation.Rect, _bitmapImageRep: ?*app_kit.BitmapImageRep) void {
        return objc.msgSend(_self, "cacheDisplayInRect:toBitmapImageRep:", void, .{ _rect, _bitmapImageRep });
    }

    pub fn viewWillDraw(_self: *@This()) void {
        return objc.msgSend(_self, "viewWillDraw", void, .{});
    }

    pub fn scrollPoint(_self: *@This(), _point: foundation.Point) void {
        return objc.msgSend(_self, "scrollPoint:", void, .{_point});
    }

    pub fn scrollRectToVisible(_self: *@This(), _rect: foundation.Rect) objc.BOOL {
        return objc.msgSend(_self, "scrollRectToVisible:", objc.BOOL, .{_rect});
    }

    pub fn autoscroll(_self: *@This(), _event: ?*app_kit.Event) objc.BOOL {
        return objc.msgSend(_self, "autoscroll:", objc.BOOL, .{_event});
    }

    pub fn adjustScroll(_self: *@This(), _newVisible: foundation.Rect) foundation.Rect {
        return objc.msgSend(_self, "adjustScroll:", foundation.Rect, .{_newVisible});
    }

    pub fn scrollRectBy(_self: *@This(), _rect: foundation.Rect, _delta: foundation.Size) void {
        return objc.msgSend(_self, "scrollRect:by:", void, .{ _rect, _delta });
    }

    pub fn translateRectsNeedingDisplayInRectBy(_self: *@This(), _clipRect: foundation.Rect, _delta: foundation.Size) void {
        return objc.msgSend(_self, "translateRectsNeedingDisplayInRect:by:", void, .{ _clipRect, _delta });
    }

    pub fn hitTest(_self: *@This(), _point: foundation.Point) ?*app_kit.View {
        return objc.msgSend(_self, "hitTest:", ?*app_kit.View, .{_point});
    }

    pub fn mouseInRect(_self: *@This(), _point: foundation.Point, _rect: foundation.Rect) objc.BOOL {
        return objc.msgSend(_self, "mouse:inRect:", objc.BOOL, .{ _point, _rect });
    }

    pub fn viewWithTag(_self: *@This(), _tag: objc.NSInteger) ?*anyopaque {
        return objc.msgSend(_self, "viewWithTag:", ?*anyopaque, .{_tag});
    }

    pub fn acceptsFirstMouse(_self: *@This(), _event: ?*app_kit.Event) objc.BOOL {
        return objc.msgSend(_self, "acceptsFirstMouse:", objc.BOOL, .{_event});
    }

    pub fn shouldDelayWindowOrderingForEvent(_self: *@This(), _event: ?*app_kit.Event) objc.BOOL {
        return objc.msgSend(_self, "shouldDelayWindowOrderingForEvent:", objc.BOOL, .{_event});
    }

    pub fn makeBackingLayer(_self: *@This()) ?*quartz_core.Layer {
        return objc.msgSend(_self, "makeBackingLayer", ?*quartz_core.Layer, .{});
    }

    pub fn updateLayer(_self: *@This()) void {
        return objc.msgSend(_self, "updateLayer", void, .{});
    }

    pub fn layoutSubtreeIfNeeded(_self: *@This()) void {
        return objc.msgSend(_self, "layoutSubtreeIfNeeded", void, .{});
    }

    pub fn layout(_self: *@This()) void {
        return objc.msgSend(_self, "layout", void, .{});
    }

    pub fn menuForEvent(_self: *@This(), _event: ?*app_kit.Event) ?*app_kit.Menu {
        return objc.msgSend(_self, "menuForEvent:", ?*app_kit.Menu, .{_event});
    }

    pub fn willOpenMenuWithEvent(_self: *@This(), _menu: ?*app_kit.Menu, _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "willOpenMenu:withEvent:", void, .{ _menu, _event });
    }

    pub fn didCloseMenuWithEvent(_self: *@This(), _menu: ?*app_kit.Menu, _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "didCloseMenu:withEvent:", void, .{ _menu, _event });
    }

    pub fn addToolTipRectOwnerUserData(_self: *@This(), _rect: foundation.Rect, _owner: ?objc.Id, _data: ?*anyopaque) app_kit.ToolTipTag {
        return objc.msgSend(_self, "addToolTipRect:owner:userData:", app_kit.ToolTipTag, .{ _rect, _owner, _data });
    }

    pub fn removeToolTip(_self: *@This(), _tag: app_kit.ToolTipTag) void {
        return objc.msgSend(_self, "removeToolTip:", void, .{_tag});
    }

    pub fn removeAllToolTips(_self: *@This()) void {
        return objc.msgSend(_self, "removeAllToolTips", void, .{});
    }

    pub fn viewWillStartLiveResize(_self: *@This()) void {
        return objc.msgSend(_self, "viewWillStartLiveResize", void, .{});
    }

    pub fn viewDidEndLiveResize(_self: *@This()) void {
        return objc.msgSend(_self, "viewDidEndLiveResize", void, .{});
    }

    pub fn getRectsExposedDuringLiveResizeCount(_self: *@This(), _exposedRects: ?*foundation.Rect, _count: ?*objc.NSInteger) void {
        return objc.msgSend(_self, "getRectsExposedDuringLiveResize:count:", void, .{ _exposedRects, _count });
    }

    pub fn rectForSmartMagnificationAtPointInRect(_self: *@This(), _location: foundation.Point, _visibleRect: foundation.Rect) foundation.Rect {
        return objc.msgSend(_self, "rectForSmartMagnificationAtPoint:inRect:", foundation.Rect, .{ _location, _visibleRect });
    }

    pub fn prepareForReuse(_self: *@This()) void {
        return objc.msgSend(_self, "prepareForReuse", void, .{});
    }

    pub fn prepareContentInRect(_self: *@This(), _rect: foundation.Rect) void {
        return objc.msgSend(_self, "prepareContentInRect:", void, .{_rect});
    }

    pub fn viewDidChangeEffectiveAppearance(_self: *@This()) void {
        return objc.msgSend(_self, "viewDidChangeEffectiveAppearance", void, .{});
    }

    pub fn window(_self: *@This()) ?*app_kit.Window {
        return objc.msgSend(_self, "window", ?*app_kit.Window, .{});
    }

    pub fn superview(_self: *@This()) ?*app_kit.View {
        return objc.msgSend(_self, "superview", ?*app_kit.View, .{});
    }

    pub fn subviews(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "subviews", ?*anyopaque, .{});
    }

    pub fn setSubviews(_self: *@This(), _subviews: ?*anyopaque) void {
        return objc.msgSend(_self, "setSubviews:", void, .{_subviews});
    }

    pub fn opaqueAncestor(_self: *@This()) ?*app_kit.View {
        return objc.msgSend(_self, "opaqueAncestor", ?*app_kit.View, .{});
    }

    pub fn isHidden(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isHidden", objc.BOOL, .{});
    }

    pub fn setHidden(_self: *@This(), _hidden: objc.BOOL) void {
        return objc.msgSend(_self, "setHidden:", void, .{_hidden});
    }

    pub fn isHiddenOrHasHiddenAncestor(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isHiddenOrHasHiddenAncestor", objc.BOOL, .{});
    }

    pub fn wantsDefaultClipping(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "wantsDefaultClipping", objc.BOOL, .{});
    }

    pub fn postsFrameChangedNotifications(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "postsFrameChangedNotifications", objc.BOOL, .{});
    }

    pub fn setPostsFrameChangedNotifications(_self: *@This(), _postsFrameChangedNotifications: objc.BOOL) void {
        return objc.msgSend(_self, "setPostsFrameChangedNotifications:", void, .{_postsFrameChangedNotifications});
    }

    pub fn autoresizesSubviews(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "autoresizesSubviews", objc.BOOL, .{});
    }

    pub fn setAutoresizesSubviews(_self: *@This(), _autoresizesSubviews: objc.BOOL) void {
        return objc.msgSend(_self, "setAutoresizesSubviews:", void, .{_autoresizesSubviews});
    }

    pub fn autoresizingMask(_self: *@This()) app_kit.AutoresizingMaskOptions {
        return objc.msgSend(_self, "autoresizingMask", app_kit.AutoresizingMaskOptions, .{});
    }

    pub fn setAutoresizingMask(_self: *@This(), _autoresizingMask: app_kit.AutoresizingMaskOptions) void {
        return objc.msgSend(_self, "setAutoresizingMask:", void, .{_autoresizingMask});
    }

    pub fn frame(_self: *@This()) foundation.Rect {
        return objc.msgSend(_self, "frame", foundation.Rect, .{});
    }

    pub fn setFrame(_self: *@This(), _frame: foundation.Rect) void {
        return objc.msgSend(_self, "setFrame:", void, .{_frame});
    }

    pub fn frameRotation(_self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(_self, "frameRotation", core_foundation.CGFloat, .{});
    }

    pub fn setFrameRotation(_self: *@This(), _frameRotation: core_foundation.CGFloat) void {
        return objc.msgSend(_self, "setFrameRotation:", void, .{_frameRotation});
    }

    pub fn frameCenterRotation(_self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(_self, "frameCenterRotation", core_foundation.CGFloat, .{});
    }

    pub fn setFrameCenterRotation(_self: *@This(), _frameCenterRotation: core_foundation.CGFloat) void {
        return objc.msgSend(_self, "setFrameCenterRotation:", void, .{_frameCenterRotation});
    }

    pub fn boundsRotation(_self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(_self, "boundsRotation", core_foundation.CGFloat, .{});
    }

    pub fn setBoundsRotation(_self: *@This(), _boundsRotation: core_foundation.CGFloat) void {
        return objc.msgSend(_self, "setBoundsRotation:", void, .{_boundsRotation});
    }

    pub fn bounds(_self: *@This()) foundation.Rect {
        return objc.msgSend(_self, "bounds", foundation.Rect, .{});
    }

    pub fn setBounds(_self: *@This(), _bounds: foundation.Rect) void {
        return objc.msgSend(_self, "setBounds:", void, .{_bounds});
    }

    pub fn isFlipped(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isFlipped", objc.BOOL, .{});
    }

    pub fn isRotatedFromBase(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isRotatedFromBase", objc.BOOL, .{});
    }

    pub fn isRotatedOrScaledFromBase(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isRotatedOrScaledFromBase", objc.BOOL, .{});
    }

    pub fn isOpaque(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isOpaque", objc.BOOL, .{});
    }

    pub fn canDrawConcurrently(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "canDrawConcurrently", objc.BOOL, .{});
    }

    pub fn setCanDrawConcurrently(_self: *@This(), _canDrawConcurrently: objc.BOOL) void {
        return objc.msgSend(_self, "setCanDrawConcurrently:", void, .{_canDrawConcurrently});
    }

    pub fn canDraw(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "canDraw", objc.BOOL, .{});
    }

    pub fn needsDisplay(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "needsDisplay", objc.BOOL, .{});
    }

    pub fn setNeedsDisplay(_self: *@This(), _needsDisplay: objc.BOOL) void {
        return objc.msgSend(_self, "setNeedsDisplay:", void, .{_needsDisplay});
    }

    pub fn focusView() ?*app_kit.View {
        return objc.msgSend(Internal.class(), "focusView", ?*app_kit.View, .{});
    }

    pub fn visibleRect(_self: *@This()) foundation.Rect {
        return objc.msgSend(_self, "visibleRect", foundation.Rect, .{});
    }

    pub fn tag(_self: *@This()) objc.NSInteger {
        return objc.msgSend(_self, "tag", objc.NSInteger, .{});
    }

    pub fn needsPanelToBecomeKey(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "needsPanelToBecomeKey", objc.BOOL, .{});
    }

    pub fn mouseDownCanMoveWindow(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "mouseDownCanMoveWindow", objc.BOOL, .{});
    }

    pub fn acceptsTouchEvents(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "acceptsTouchEvents", objc.BOOL, .{});
    }

    pub fn setAcceptsTouchEvents(_self: *@This(), _acceptsTouchEvents: objc.BOOL) void {
        return objc.msgSend(_self, "setAcceptsTouchEvents:", void, .{_acceptsTouchEvents});
    }

    pub fn wantsRestingTouches(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "wantsRestingTouches", objc.BOOL, .{});
    }

    pub fn setWantsRestingTouches(_self: *@This(), _wantsRestingTouches: objc.BOOL) void {
        return objc.msgSend(_self, "setWantsRestingTouches:", void, .{_wantsRestingTouches});
    }

    pub fn layerContentsRedrawPolicy(_self: *@This()) app_kit.ViewLayerContentsRedrawPolicy {
        return objc.msgSend(_self, "layerContentsRedrawPolicy", app_kit.ViewLayerContentsRedrawPolicy, .{});
    }

    pub fn setLayerContentsRedrawPolicy(_self: *@This(), _layerContentsRedrawPolicy: app_kit.ViewLayerContentsRedrawPolicy) void {
        return objc.msgSend(_self, "setLayerContentsRedrawPolicy:", void, .{_layerContentsRedrawPolicy});
    }

    pub fn layerContentsPlacement(_self: *@This()) app_kit.ViewLayerContentsPlacement {
        return objc.msgSend(_self, "layerContentsPlacement", app_kit.ViewLayerContentsPlacement, .{});
    }

    pub fn setLayerContentsPlacement(_self: *@This(), _layerContentsPlacement: app_kit.ViewLayerContentsPlacement) void {
        return objc.msgSend(_self, "setLayerContentsPlacement:", void, .{_layerContentsPlacement});
    }

    pub fn wantsLayer(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "wantsLayer", objc.BOOL, .{});
    }

    pub fn setWantsLayer(_self: *@This(), _wantsLayer: objc.BOOL) void {
        return objc.msgSend(_self, "setWantsLayer:", void, .{_wantsLayer});
    }

    pub fn layer(_self: *@This()) ?*quartz_core.Layer {
        return objc.msgSend(_self, "layer", ?*quartz_core.Layer, .{});
    }

    pub fn setLayer(_self: *@This(), _layer: ?*quartz_core.Layer) void {
        return objc.msgSend(_self, "setLayer:", void, .{_layer});
    }

    pub fn wantsUpdateLayer(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "wantsUpdateLayer", objc.BOOL, .{});
    }

    pub fn canDrawSubviewsIntoLayer(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "canDrawSubviewsIntoLayer", objc.BOOL, .{});
    }

    pub fn setCanDrawSubviewsIntoLayer(_self: *@This(), _canDrawSubviewsIntoLayer: objc.BOOL) void {
        return objc.msgSend(_self, "setCanDrawSubviewsIntoLayer:", void, .{_canDrawSubviewsIntoLayer});
    }

    pub fn needsLayout(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "needsLayout", objc.BOOL, .{});
    }

    pub fn setNeedsLayout(_self: *@This(), _needsLayout: objc.BOOL) void {
        return objc.msgSend(_self, "setNeedsLayout:", void, .{_needsLayout});
    }

    pub fn alphaValue(_self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(_self, "alphaValue", core_foundation.CGFloat, .{});
    }

    pub fn setAlphaValue(_self: *@This(), _alphaValue: core_foundation.CGFloat) void {
        return objc.msgSend(_self, "setAlphaValue:", void, .{_alphaValue});
    }

    pub fn layerUsesCoreImageFilters(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "layerUsesCoreImageFilters", objc.BOOL, .{});
    }

    pub fn setLayerUsesCoreImageFilters(_self: *@This(), _layerUsesCoreImageFilters: objc.BOOL) void {
        return objc.msgSend(_self, "setLayerUsesCoreImageFilters:", void, .{_layerUsesCoreImageFilters});
    }

    pub fn backgroundFilters(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "backgroundFilters", ?*anyopaque, .{});
    }

    pub fn setBackgroundFilters(_self: *@This(), _backgroundFilters: ?*anyopaque) void {
        return objc.msgSend(_self, "setBackgroundFilters:", void, .{_backgroundFilters});
    }

    pub fn compositingFilter(_self: *@This()) ?*core_image.Filter {
        return objc.msgSend(_self, "compositingFilter", ?*core_image.Filter, .{});
    }

    pub fn setCompositingFilter(_self: *@This(), _compositingFilter: ?*core_image.Filter) void {
        return objc.msgSend(_self, "setCompositingFilter:", void, .{_compositingFilter});
    }

    pub fn contentFilters(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "contentFilters", ?*anyopaque, .{});
    }

    pub fn setContentFilters(_self: *@This(), _contentFilters: ?*anyopaque) void {
        return objc.msgSend(_self, "setContentFilters:", void, .{_contentFilters});
    }

    pub fn shadow(_self: *@This()) ?*app_kit.Shadow {
        return objc.msgSend(_self, "shadow", ?*app_kit.Shadow, .{});
    }

    pub fn setShadow(_self: *@This(), _shadow: ?*app_kit.Shadow) void {
        return objc.msgSend(_self, "setShadow:", void, .{_shadow});
    }

    pub fn clipsToBounds(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "clipsToBounds", objc.BOOL, .{});
    }

    pub fn setClipsToBounds(_self: *@This(), _clipsToBounds: objc.BOOL) void {
        return objc.msgSend(_self, "setClipsToBounds:", void, .{_clipsToBounds});
    }

    pub fn postsBoundsChangedNotifications(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "postsBoundsChangedNotifications", objc.BOOL, .{});
    }

    pub fn setPostsBoundsChangedNotifications(_self: *@This(), _postsBoundsChangedNotifications: objc.BOOL) void {
        return objc.msgSend(_self, "setPostsBoundsChangedNotifications:", void, .{_postsBoundsChangedNotifications});
    }

    pub fn enclosingScrollView(_self: *@This()) ?*app_kit.ScrollView {
        return objc.msgSend(_self, "enclosingScrollView", ?*app_kit.ScrollView, .{});
    }

    pub fn defaultMenu() ?*app_kit.Menu {
        return objc.msgSend(Internal.class(), "defaultMenu", ?*app_kit.Menu, .{});
    }

    pub fn toolTip(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "toolTip", ?*foundation.String, .{});
    }

    pub fn setToolTip(_self: *@This(), _toolTip: ?*foundation.String) void {
        return objc.msgSend(_self, "setToolTip:", void, .{_toolTip});
    }

    pub fn inLiveResize(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "inLiveResize", objc.BOOL, .{});
    }

    pub fn preservesContentDuringLiveResize(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "preservesContentDuringLiveResize", objc.BOOL, .{});
    }

    pub fn rectPreservedDuringLiveResize(_self: *@This()) foundation.Rect {
        return objc.msgSend(_self, "rectPreservedDuringLiveResize", foundation.Rect, .{});
    }

    pub fn inputContext(_self: *@This()) ?*app_kit.TextInputContext {
        return objc.msgSend(_self, "inputContext", ?*app_kit.TextInputContext, .{});
    }

    pub fn userInterfaceLayoutDirection(_self: *@This()) app_kit.UserInterfaceLayoutDirection {
        return objc.msgSend(_self, "userInterfaceLayoutDirection", app_kit.UserInterfaceLayoutDirection, .{});
    }

    pub fn setUserInterfaceLayoutDirection(_self: *@This(), _userInterfaceLayoutDirection: app_kit.UserInterfaceLayoutDirection) void {
        return objc.msgSend(_self, "setUserInterfaceLayoutDirection:", void, .{_userInterfaceLayoutDirection});
    }

    pub fn isCompatibleWithResponsiveScrolling() objc.BOOL {
        return objc.msgSend(Internal.class(), "isCompatibleWithResponsiveScrolling", objc.BOOL, .{});
    }

    pub fn preparedContentRect(_self: *@This()) foundation.Rect {
        return objc.msgSend(_self, "preparedContentRect", foundation.Rect, .{});
    }

    pub fn setPreparedContentRect(_self: *@This(), _preparedContentRect: foundation.Rect) void {
        return objc.msgSend(_self, "setPreparedContentRect:", void, .{_preparedContentRect});
    }

    pub fn allowsVibrancy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsVibrancy", objc.BOOL, .{});
    }

    pub fn pitchControlWithMapView(_mapView: ?*MapView) *@This() {
        return objc.msgSend(Internal.class(), "pitchControlWithMapView:", *@This(), .{_mapView});
    }

    pub fn mapView(_self: *@This()) ?*MapView {
        return objc.msgSend(_self, "mapView", ?*MapView, .{});
    }

    pub fn setMapView(_self: *@This(), _mapView: ?*MapView) void {
        return objc.msgSend(_self, "setMapView:", void, .{_mapView});
    }
};

/// https://developer.apple.com/documentation/MapKit/MKZoomControl?language=objc
pub const ZoomControl = opaque {
    pub const Internal = objc.ExternClass("MKZoomControl", @This(), app_kit.View, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "description", ?*foundation.String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "debugDescription", ?*foundation.String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*foundation.Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*foundation.MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*foundation.MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*foundation.MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*foundation.MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*foundation.Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*foundation.Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn tryToPerformWith(_self: *@This(), _action: objc.Selector, _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "tryToPerform:with:", objc.BOOL, .{ _action, _object });
    }

    pub fn performKeyEquivalent(_self: *@This(), _event: ?*app_kit.Event) objc.BOOL {
        return objc.msgSend(_self, "performKeyEquivalent:", objc.BOOL, .{_event});
    }

    pub fn validRequestorForSendTypeReturnType(_self: *@This(), _sendType: app_kit.PasteboardType, _returnType: app_kit.PasteboardType) ?objc.Id {
        return objc.msgSend(_self, "validRequestorForSendType:returnType:", ?objc.Id, .{ _sendType, _returnType });
    }

    pub fn mouseDown(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "mouseDown:", void, .{_event});
    }

    pub fn rightMouseDown(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "rightMouseDown:", void, .{_event});
    }

    pub fn otherMouseDown(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "otherMouseDown:", void, .{_event});
    }

    pub fn mouseUp(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "mouseUp:", void, .{_event});
    }

    pub fn rightMouseUp(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "rightMouseUp:", void, .{_event});
    }

    pub fn otherMouseUp(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "otherMouseUp:", void, .{_event});
    }

    pub fn mouseMoved(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "mouseMoved:", void, .{_event});
    }

    pub fn mouseDragged(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "mouseDragged:", void, .{_event});
    }

    pub fn scrollWheel(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "scrollWheel:", void, .{_event});
    }

    pub fn rightMouseDragged(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "rightMouseDragged:", void, .{_event});
    }

    pub fn otherMouseDragged(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "otherMouseDragged:", void, .{_event});
    }

    pub fn mouseEntered(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "mouseEntered:", void, .{_event});
    }

    pub fn mouseExited(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "mouseExited:", void, .{_event});
    }

    pub fn keyDown(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "keyDown:", void, .{_event});
    }

    pub fn keyUp(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "keyUp:", void, .{_event});
    }

    pub fn flagsChanged(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "flagsChanged:", void, .{_event});
    }

    pub fn tabletPoint(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "tabletPoint:", void, .{_event});
    }

    pub fn tabletProximity(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "tabletProximity:", void, .{_event});
    }

    pub fn cursorUpdate(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "cursorUpdate:", void, .{_event});
    }

    pub fn magnifyWithEvent(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "magnifyWithEvent:", void, .{_event});
    }

    pub fn rotateWithEvent(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "rotateWithEvent:", void, .{_event});
    }

    pub fn swipeWithEvent(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "swipeWithEvent:", void, .{_event});
    }

    pub fn beginGestureWithEvent(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "beginGestureWithEvent:", void, .{_event});
    }

    pub fn endGestureWithEvent(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "endGestureWithEvent:", void, .{_event});
    }

    pub fn smartMagnifyWithEvent(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "smartMagnifyWithEvent:", void, .{_event});
    }

    pub fn changeModeWithEvent(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "changeModeWithEvent:", void, .{_event});
    }

    pub fn touchesBeganWithEvent(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "touchesBeganWithEvent:", void, .{_event});
    }

    pub fn touchesMovedWithEvent(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "touchesMovedWithEvent:", void, .{_event});
    }

    pub fn touchesEndedWithEvent(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "touchesEndedWithEvent:", void, .{_event});
    }

    pub fn touchesCancelledWithEvent(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "touchesCancelledWithEvent:", void, .{_event});
    }

    pub fn quickLookWithEvent(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "quickLookWithEvent:", void, .{_event});
    }

    pub fn pressureChangeWithEvent(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "pressureChangeWithEvent:", void, .{_event});
    }

    pub fn contextMenuKeyDown(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "contextMenuKeyDown:", void, .{_event});
    }

    pub fn noResponderFor(_self: *@This(), _eventSelector: objc.Selector) void {
        return objc.msgSend(_self, "noResponderFor:", void, .{_eventSelector});
    }

    pub fn becomeFirstResponder(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "becomeFirstResponder", objc.BOOL, .{});
    }

    pub fn resignFirstResponder(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "resignFirstResponder", objc.BOOL, .{});
    }

    pub fn interpretKeyEvents(_self: *@This(), _eventArray: ?*anyopaque) void {
        return objc.msgSend(_self, "interpretKeyEvents:", void, .{_eventArray});
    }

    pub fn flushBufferedKeyEvents(_self: *@This()) void {
        return objc.msgSend(_self, "flushBufferedKeyEvents", void, .{});
    }

    pub fn showContextHelp(_self: *@This(), _sender: ?objc.Id) void {
        return objc.msgSend(_self, "showContextHelp:", void, .{_sender});
    }

    pub fn helpRequested(_self: *@This(), _eventPtr: ?*app_kit.Event) void {
        return objc.msgSend(_self, "helpRequested:", void, .{_eventPtr});
    }

    pub fn shouldBeTreatedAsInkEvent(_self: *@This(), _event: ?*app_kit.Event) objc.BOOL {
        return objc.msgSend(_self, "shouldBeTreatedAsInkEvent:", objc.BOOL, .{_event});
    }

    pub fn wantsScrollEventsForSwipeTrackingOnAxis(_self: *@This(), _axis: app_kit.EventGestureAxis) objc.BOOL {
        return objc.msgSend(_self, "wantsScrollEventsForSwipeTrackingOnAxis:", objc.BOOL, .{_axis});
    }

    pub fn wantsForwardedScrollEventsForAxis(_self: *@This(), _axis: app_kit.EventGestureAxis) objc.BOOL {
        return objc.msgSend(_self, "wantsForwardedScrollEventsForAxis:", objc.BOOL, .{_axis});
    }

    pub fn supplementalTargetForActionSender(_self: *@This(), _action: objc.Selector, _sender: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "supplementalTargetForAction:sender:", ?objc.Id, .{ _action, _sender });
    }

    pub fn nextResponder(_self: *@This()) ?*app_kit.Responder {
        return objc.msgSend(_self, "nextResponder", ?*app_kit.Responder, .{});
    }

    pub fn setNextResponder(_self: *@This(), _nextResponder: ?*app_kit.Responder) void {
        return objc.msgSend(_self, "setNextResponder:", void, .{_nextResponder});
    }

    pub fn acceptsFirstResponder(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "acceptsFirstResponder", objc.BOOL, .{});
    }

    pub fn menu(_self: *@This()) ?*app_kit.Menu {
        return objc.msgSend(_self, "menu", ?*app_kit.Menu, .{});
    }

    pub fn setMenu(_self: *@This(), _menu: ?*app_kit.Menu) void {
        return objc.msgSend(_self, "setMenu:", void, .{_menu});
    }

    pub fn animator(_self: *@This()) *@This() {
        return objc.msgSend(_self, "animator", *@This(), .{});
    }

    pub fn animationForKey(_self: *@This(), _key: app_kit.AnimatablePropertyKey) ?objc.Id {
        return objc.msgSend(_self, "animationForKey:", ?objc.Id, .{_key});
    }

    pub fn defaultAnimationForKey(_key: app_kit.AnimatablePropertyKey) ?objc.Id {
        return objc.msgSend(Internal.class(), "defaultAnimationForKey:", ?objc.Id, .{_key});
    }

    pub fn animations(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "animations", ?*anyopaque, .{});
    }

    pub fn setAnimations(_self: *@This(), _animations: ?*anyopaque) void {
        return objc.msgSend(_self, "setAnimations:", void, .{_animations});
    }

    pub fn identifier(_self: *@This()) app_kit.UserInterfaceItemIdentifier {
        return objc.msgSend(_self, "identifier", app_kit.UserInterfaceItemIdentifier, .{});
    }

    pub fn setIdentifier(_self: *@This(), _identifier: app_kit.UserInterfaceItemIdentifier) void {
        return objc.msgSend(_self, "setIdentifier:", void, .{_identifier});
    }

    pub fn draggingEntered(_self: *@This(), _sender: ?*anyopaque) app_kit.DragOperation {
        return objc.msgSend(_self, "draggingEntered:", app_kit.DragOperation, .{_sender});
    }

    pub fn draggingUpdated(_self: *@This(), _sender: ?*anyopaque) app_kit.DragOperation {
        return objc.msgSend(_self, "draggingUpdated:", app_kit.DragOperation, .{_sender});
    }

    pub fn draggingExited(_self: *@This(), _sender: ?*anyopaque) void {
        return objc.msgSend(_self, "draggingExited:", void, .{_sender});
    }

    pub fn prepareForDragOperation(_self: *@This(), _sender: ?*anyopaque) objc.BOOL {
        return objc.msgSend(_self, "prepareForDragOperation:", objc.BOOL, .{_sender});
    }

    pub fn performDragOperation(_self: *@This(), _sender: ?*anyopaque) objc.BOOL {
        return objc.msgSend(_self, "performDragOperation:", objc.BOOL, .{_sender});
    }

    pub fn concludeDragOperation(_self: *@This(), _sender: ?*anyopaque) void {
        return objc.msgSend(_self, "concludeDragOperation:", void, .{_sender});
    }

    pub fn draggingEnded(_self: *@This(), _sender: ?*anyopaque) void {
        return objc.msgSend(_self, "draggingEnded:", void, .{_sender});
    }

    pub fn wantsPeriodicDraggingUpdates(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "wantsPeriodicDraggingUpdates", objc.BOOL, .{});
    }

    pub fn updateDraggingItemsForDrag(_self: *@This(), _sender: ?*anyopaque) void {
        return objc.msgSend(_self, "updateDraggingItemsForDrag:", void, .{_sender});
    }

    pub fn appearance(_self: *@This()) ?*app_kit.Appearance {
        return objc.msgSend(_self, "appearance", ?*app_kit.Appearance, .{});
    }

    pub fn setAppearance(_self: *@This(), _appearance: ?*app_kit.Appearance) void {
        return objc.msgSend(_self, "setAppearance:", void, .{_appearance});
    }

    pub fn effectiveAppearance(_self: *@This()) ?*app_kit.Appearance {
        return objc.msgSend(_self, "effectiveAppearance", ?*app_kit.Appearance, .{});
    }

    pub fn accessibilityFrame(_self: *@This()) foundation.Rect {
        return objc.msgSend(_self, "accessibilityFrame", foundation.Rect, .{});
    }

    pub fn accessibilityParent(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityParent", ?objc.Id, .{});
    }

    pub fn isAccessibilityFocused(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isAccessibilityFocused", objc.BOOL, .{});
    }

    pub fn accessibilityIdentifier(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "accessibilityIdentifier", ?*foundation.String, .{});
    }

    pub fn accessibilityLayoutPointForScreenPoint(_self: *@This(), _point: foundation.Point) foundation.Point {
        return objc.msgSend(_self, "accessibilityLayoutPointForScreenPoint:", foundation.Point, .{_point});
    }

    pub fn accessibilityLayoutSizeForScreenSize(_self: *@This(), _size: foundation.Size) foundation.Size {
        return objc.msgSend(_self, "accessibilityLayoutSizeForScreenSize:", foundation.Size, .{_size});
    }

    pub fn accessibilityScreenPointForLayoutPoint(_self: *@This(), _point: foundation.Point) foundation.Point {
        return objc.msgSend(_self, "accessibilityScreenPointForLayoutPoint:", foundation.Point, .{_point});
    }

    pub fn accessibilityScreenSizeForLayoutSize(_self: *@This(), _size: foundation.Size) foundation.Size {
        return objc.msgSend(_self, "accessibilityScreenSizeForLayoutSize:", foundation.Size, .{_size});
    }

    pub fn accessibilityCellForColumnRow(_self: *@This(), _column: objc.NSInteger, _row: objc.NSInteger) ?objc.Id {
        return objc.msgSend(_self, "accessibilityCellForColumn:row:", ?objc.Id, .{ _column, _row });
    }

    pub fn accessibilityAttributedStringForRange(_self: *@This(), _range: foundation.Range) ?*foundation.AttributedString {
        return objc.msgSend(_self, "accessibilityAttributedStringForRange:", ?*foundation.AttributedString, .{_range});
    }

    pub fn accessibilityRangeForLine(_self: *@This(), _line: objc.NSInteger) foundation.Range {
        return objc.msgSend(_self, "accessibilityRangeForLine:", foundation.Range, .{_line});
    }

    pub fn accessibilityStringForRange(_self: *@This(), _range: foundation.Range) ?*foundation.String {
        return objc.msgSend(_self, "accessibilityStringForRange:", ?*foundation.String, .{_range});
    }

    pub fn accessibilityRangeForPosition(_self: *@This(), _point: foundation.Point) foundation.Range {
        return objc.msgSend(_self, "accessibilityRangeForPosition:", foundation.Range, .{_point});
    }

    pub fn accessibilityRangeForIndex(_self: *@This(), _index: objc.NSInteger) foundation.Range {
        return objc.msgSend(_self, "accessibilityRangeForIndex:", foundation.Range, .{_index});
    }

    pub fn accessibilityFrameForRange(_self: *@This(), _range: foundation.Range) foundation.Rect {
        return objc.msgSend(_self, "accessibilityFrameForRange:", foundation.Rect, .{_range});
    }

    pub fn accessibilityRTFForRange(_self: *@This(), _range: foundation.Range) ?*foundation.Data {
        return objc.msgSend(_self, "accessibilityRTFForRange:", ?*foundation.Data, .{_range});
    }

    pub fn accessibilityStyleRangeForIndex(_self: *@This(), _index: objc.NSInteger) foundation.Range {
        return objc.msgSend(_self, "accessibilityStyleRangeForIndex:", foundation.Range, .{_index});
    }

    pub fn accessibilityLineForIndex(_self: *@This(), _index: objc.NSInteger) objc.NSInteger {
        return objc.msgSend(_self, "accessibilityLineForIndex:", objc.NSInteger, .{_index});
    }

    pub fn accessibilityPerformCancel(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "accessibilityPerformCancel", objc.BOOL, .{});
    }

    pub fn accessibilityPerformConfirm(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "accessibilityPerformConfirm", objc.BOOL, .{});
    }

    pub fn accessibilityPerformDecrement(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "accessibilityPerformDecrement", objc.BOOL, .{});
    }

    pub fn accessibilityPerformDelete(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "accessibilityPerformDelete", objc.BOOL, .{});
    }

    pub fn accessibilityPerformIncrement(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "accessibilityPerformIncrement", objc.BOOL, .{});
    }

    pub fn accessibilityPerformPick(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "accessibilityPerformPick", objc.BOOL, .{});
    }

    pub fn accessibilityPerformPress(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "accessibilityPerformPress", objc.BOOL, .{});
    }

    pub fn accessibilityPerformRaise(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "accessibilityPerformRaise", objc.BOOL, .{});
    }

    pub fn accessibilityPerformShowAlternateUI(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "accessibilityPerformShowAlternateUI", objc.BOOL, .{});
    }

    pub fn accessibilityPerformShowDefaultUI(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "accessibilityPerformShowDefaultUI", objc.BOOL, .{});
    }

    pub fn accessibilityPerformShowMenu(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "accessibilityPerformShowMenu", objc.BOOL, .{});
    }

    pub fn isAccessibilitySelectorAllowed(_self: *@This(), _selector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "isAccessibilitySelectorAllowed:", objc.BOOL, .{_selector});
    }

    pub fn isAccessibilityElement(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isAccessibilityElement", objc.BOOL, .{});
    }

    pub fn setAccessibilityElement(_self: *@This(), _accessibilityElement: objc.BOOL) void {
        return objc.msgSend(_self, "setAccessibilityElement:", void, .{_accessibilityElement});
    }

    pub fn setAccessibilityFrame(_self: *@This(), _accessibilityFrame: foundation.Rect) void {
        return objc.msgSend(_self, "setAccessibilityFrame:", void, .{_accessibilityFrame});
    }

    pub fn setAccessibilityFocused(_self: *@This(), _accessibilityFocused: objc.BOOL) void {
        return objc.msgSend(_self, "setAccessibilityFocused:", void, .{_accessibilityFocused});
    }

    pub fn accessibilityActivationPoint(_self: *@This()) foundation.Point {
        return objc.msgSend(_self, "accessibilityActivationPoint", foundation.Point, .{});
    }

    pub fn setAccessibilityActivationPoint(_self: *@This(), _accessibilityActivationPoint: foundation.Point) void {
        return objc.msgSend(_self, "setAccessibilityActivationPoint:", void, .{_accessibilityActivationPoint});
    }

    pub fn accessibilityTopLevelUIElement(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityTopLevelUIElement", ?objc.Id, .{});
    }

    pub fn setAccessibilityTopLevelUIElement(_self: *@This(), _accessibilityTopLevelUIElement: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityTopLevelUIElement:", void, .{_accessibilityTopLevelUIElement});
    }

    pub fn accessibilityURL(_self: *@This()) ?*foundation.URL {
        return objc.msgSend(_self, "accessibilityURL", ?*foundation.URL, .{});
    }

    pub fn setAccessibilityURL(_self: *@This(), _accessibilityURL: ?*foundation.URL) void {
        return objc.msgSend(_self, "setAccessibilityURL:", void, .{_accessibilityURL});
    }

    pub fn accessibilityValue(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityValue", ?objc.Id, .{});
    }

    pub fn setAccessibilityValue(_self: *@This(), _accessibilityValue: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityValue:", void, .{_accessibilityValue});
    }

    pub fn accessibilityValueDescription(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "accessibilityValueDescription", ?*foundation.String, .{});
    }

    pub fn setAccessibilityValueDescription(_self: *@This(), _accessibilityValueDescription: ?*foundation.String) void {
        return objc.msgSend(_self, "setAccessibilityValueDescription:", void, .{_accessibilityValueDescription});
    }

    pub fn accessibilityVisibleChildren(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilityVisibleChildren", ?*foundation.Array, .{});
    }

    pub fn setAccessibilityVisibleChildren(_self: *@This(), _accessibilityVisibleChildren: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilityVisibleChildren:", void, .{_accessibilityVisibleChildren});
    }

    pub fn accessibilitySubrole(_self: *@This()) app_kit.AccessibilitySubrole {
        return objc.msgSend(_self, "accessibilitySubrole", app_kit.AccessibilitySubrole, .{});
    }

    pub fn setAccessibilitySubrole(_self: *@This(), _accessibilitySubrole: app_kit.AccessibilitySubrole) void {
        return objc.msgSend(_self, "setAccessibilitySubrole:", void, .{_accessibilitySubrole});
    }

    pub fn accessibilityTitle(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "accessibilityTitle", ?*foundation.String, .{});
    }

    pub fn setAccessibilityTitle(_self: *@This(), _accessibilityTitle: ?*foundation.String) void {
        return objc.msgSend(_self, "setAccessibilityTitle:", void, .{_accessibilityTitle});
    }

    pub fn accessibilityTitleUIElement(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityTitleUIElement", ?objc.Id, .{});
    }

    pub fn setAccessibilityTitleUIElement(_self: *@This(), _accessibilityTitleUIElement: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityTitleUIElement:", void, .{_accessibilityTitleUIElement});
    }

    pub fn accessibilityNextContents(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilityNextContents", ?*foundation.Array, .{});
    }

    pub fn setAccessibilityNextContents(_self: *@This(), _accessibilityNextContents: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilityNextContents:", void, .{_accessibilityNextContents});
    }

    pub fn accessibilityOrientation(_self: *@This()) app_kit.AccessibilityOrientation {
        return objc.msgSend(_self, "accessibilityOrientation", app_kit.AccessibilityOrientation, .{});
    }

    pub fn setAccessibilityOrientation(_self: *@This(), _accessibilityOrientation: app_kit.AccessibilityOrientation) void {
        return objc.msgSend(_self, "setAccessibilityOrientation:", void, .{_accessibilityOrientation});
    }

    pub fn accessibilityOverflowButton(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityOverflowButton", ?objc.Id, .{});
    }

    pub fn setAccessibilityOverflowButton(_self: *@This(), _accessibilityOverflowButton: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityOverflowButton:", void, .{_accessibilityOverflowButton});
    }

    pub fn setAccessibilityParent(_self: *@This(), _accessibilityParent: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityParent:", void, .{_accessibilityParent});
    }

    pub fn accessibilityPlaceholderValue(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "accessibilityPlaceholderValue", ?*foundation.String, .{});
    }

    pub fn setAccessibilityPlaceholderValue(_self: *@This(), _accessibilityPlaceholderValue: ?*foundation.String) void {
        return objc.msgSend(_self, "setAccessibilityPlaceholderValue:", void, .{_accessibilityPlaceholderValue});
    }

    pub fn accessibilityPreviousContents(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilityPreviousContents", ?*foundation.Array, .{});
    }

    pub fn setAccessibilityPreviousContents(_self: *@This(), _accessibilityPreviousContents: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilityPreviousContents:", void, .{_accessibilityPreviousContents});
    }

    pub fn accessibilityRole(_self: *@This()) app_kit.AccessibilityRole {
        return objc.msgSend(_self, "accessibilityRole", app_kit.AccessibilityRole, .{});
    }

    pub fn setAccessibilityRole(_self: *@This(), _accessibilityRole: app_kit.AccessibilityRole) void {
        return objc.msgSend(_self, "setAccessibilityRole:", void, .{_accessibilityRole});
    }

    pub fn accessibilityRoleDescription(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "accessibilityRoleDescription", ?*foundation.String, .{});
    }

    pub fn setAccessibilityRoleDescription(_self: *@This(), _accessibilityRoleDescription: ?*foundation.String) void {
        return objc.msgSend(_self, "setAccessibilityRoleDescription:", void, .{_accessibilityRoleDescription});
    }

    pub fn accessibilitySearchButton(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilitySearchButton", ?objc.Id, .{});
    }

    pub fn setAccessibilitySearchButton(_self: *@This(), _accessibilitySearchButton: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilitySearchButton:", void, .{_accessibilitySearchButton});
    }

    pub fn accessibilitySearchMenu(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilitySearchMenu", ?objc.Id, .{});
    }

    pub fn setAccessibilitySearchMenu(_self: *@This(), _accessibilitySearchMenu: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilitySearchMenu:", void, .{_accessibilitySearchMenu});
    }

    pub fn isAccessibilitySelected(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isAccessibilitySelected", objc.BOOL, .{});
    }

    pub fn setAccessibilitySelected(_self: *@This(), _accessibilitySelected: objc.BOOL) void {
        return objc.msgSend(_self, "setAccessibilitySelected:", void, .{_accessibilitySelected});
    }

    pub fn accessibilitySelectedChildren(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilitySelectedChildren", ?*foundation.Array, .{});
    }

    pub fn setAccessibilitySelectedChildren(_self: *@This(), _accessibilitySelectedChildren: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilitySelectedChildren:", void, .{_accessibilitySelectedChildren});
    }

    pub fn accessibilityServesAsTitleForUIElements(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilityServesAsTitleForUIElements", ?*foundation.Array, .{});
    }

    pub fn setAccessibilityServesAsTitleForUIElements(_self: *@This(), _accessibilityServesAsTitleForUIElements: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilityServesAsTitleForUIElements:", void, .{_accessibilityServesAsTitleForUIElements});
    }

    pub fn accessibilityShownMenu(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityShownMenu", ?objc.Id, .{});
    }

    pub fn setAccessibilityShownMenu(_self: *@This(), _accessibilityShownMenu: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityShownMenu:", void, .{_accessibilityShownMenu});
    }

    pub fn accessibilityMinValue(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityMinValue", ?objc.Id, .{});
    }

    pub fn setAccessibilityMinValue(_self: *@This(), _accessibilityMinValue: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityMinValue:", void, .{_accessibilityMinValue});
    }

    pub fn accessibilityMaxValue(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityMaxValue", ?objc.Id, .{});
    }

    pub fn setAccessibilityMaxValue(_self: *@This(), _accessibilityMaxValue: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityMaxValue:", void, .{_accessibilityMaxValue});
    }

    pub fn accessibilityLinkedUIElements(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilityLinkedUIElements", ?*foundation.Array, .{});
    }

    pub fn setAccessibilityLinkedUIElements(_self: *@This(), _accessibilityLinkedUIElements: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilityLinkedUIElements:", void, .{_accessibilityLinkedUIElements});
    }

    pub fn accessibilityWindow(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityWindow", ?objc.Id, .{});
    }

    pub fn setAccessibilityWindow(_self: *@This(), _accessibilityWindow: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityWindow:", void, .{_accessibilityWindow});
    }

    pub fn setAccessibilityIdentifier(_self: *@This(), _accessibilityIdentifier: ?*foundation.String) void {
        return objc.msgSend(_self, "setAccessibilityIdentifier:", void, .{_accessibilityIdentifier});
    }

    pub fn accessibilityHelp(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "accessibilityHelp", ?*foundation.String, .{});
    }

    pub fn setAccessibilityHelp(_self: *@This(), _accessibilityHelp: ?*foundation.String) void {
        return objc.msgSend(_self, "setAccessibilityHelp:", void, .{_accessibilityHelp});
    }

    pub fn accessibilityFilename(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "accessibilityFilename", ?*foundation.String, .{});
    }

    pub fn setAccessibilityFilename(_self: *@This(), _accessibilityFilename: ?*foundation.String) void {
        return objc.msgSend(_self, "setAccessibilityFilename:", void, .{_accessibilityFilename});
    }

    pub fn isAccessibilityExpanded(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isAccessibilityExpanded", objc.BOOL, .{});
    }

    pub fn setAccessibilityExpanded(_self: *@This(), _accessibilityExpanded: objc.BOOL) void {
        return objc.msgSend(_self, "setAccessibilityExpanded:", void, .{_accessibilityExpanded});
    }

    pub fn isAccessibilityEdited(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isAccessibilityEdited", objc.BOOL, .{});
    }

    pub fn setAccessibilityEdited(_self: *@This(), _accessibilityEdited: objc.BOOL) void {
        return objc.msgSend(_self, "setAccessibilityEdited:", void, .{_accessibilityEdited});
    }

    pub fn isAccessibilityEnabled(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isAccessibilityEnabled", objc.BOOL, .{});
    }

    pub fn setAccessibilityEnabled(_self: *@This(), _accessibilityEnabled: objc.BOOL) void {
        return objc.msgSend(_self, "setAccessibilityEnabled:", void, .{_accessibilityEnabled});
    }

    pub fn accessibilityChildren(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilityChildren", ?*foundation.Array, .{});
    }

    pub fn setAccessibilityChildren(_self: *@This(), _accessibilityChildren: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilityChildren:", void, .{_accessibilityChildren});
    }

    pub fn accessibilityChildrenInNavigationOrder(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "accessibilityChildrenInNavigationOrder", ?*anyopaque, .{});
    }

    pub fn setAccessibilityChildrenInNavigationOrder(_self: *@This(), _accessibilityChildrenInNavigationOrder: ?*anyopaque) void {
        return objc.msgSend(_self, "setAccessibilityChildrenInNavigationOrder:", void, .{_accessibilityChildrenInNavigationOrder});
    }

    pub fn accessibilityClearButton(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityClearButton", ?objc.Id, .{});
    }

    pub fn setAccessibilityClearButton(_self: *@This(), _accessibilityClearButton: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityClearButton:", void, .{_accessibilityClearButton});
    }

    pub fn accessibilityCancelButton(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityCancelButton", ?objc.Id, .{});
    }

    pub fn setAccessibilityCancelButton(_self: *@This(), _accessibilityCancelButton: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityCancelButton:", void, .{_accessibilityCancelButton});
    }

    pub fn isAccessibilityProtectedContent(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isAccessibilityProtectedContent", objc.BOOL, .{});
    }

    pub fn setAccessibilityProtectedContent(_self: *@This(), _accessibilityProtectedContent: objc.BOOL) void {
        return objc.msgSend(_self, "setAccessibilityProtectedContent:", void, .{_accessibilityProtectedContent});
    }

    pub fn accessibilityContents(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilityContents", ?*foundation.Array, .{});
    }

    pub fn setAccessibilityContents(_self: *@This(), _accessibilityContents: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilityContents:", void, .{_accessibilityContents});
    }

    pub fn accessibilityLabel(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "accessibilityLabel", ?*foundation.String, .{});
    }

    pub fn setAccessibilityLabel(_self: *@This(), _accessibilityLabel: ?*foundation.String) void {
        return objc.msgSend(_self, "setAccessibilityLabel:", void, .{_accessibilityLabel});
    }

    pub fn isAccessibilityAlternateUIVisible(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isAccessibilityAlternateUIVisible", objc.BOOL, .{});
    }

    pub fn setAccessibilityAlternateUIVisible(_self: *@This(), _accessibilityAlternateUIVisible: objc.BOOL) void {
        return objc.msgSend(_self, "setAccessibilityAlternateUIVisible:", void, .{_accessibilityAlternateUIVisible});
    }

    pub fn accessibilitySharedFocusElements(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilitySharedFocusElements", ?*foundation.Array, .{});
    }

    pub fn setAccessibilitySharedFocusElements(_self: *@This(), _accessibilitySharedFocusElements: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilitySharedFocusElements:", void, .{_accessibilitySharedFocusElements});
    }

    pub fn isAccessibilityRequired(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isAccessibilityRequired", objc.BOOL, .{});
    }

    pub fn setAccessibilityRequired(_self: *@This(), _accessibilityRequired: objc.BOOL) void {
        return objc.msgSend(_self, "setAccessibilityRequired:", void, .{_accessibilityRequired});
    }

    pub fn accessibilityCustomRotors(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "accessibilityCustomRotors", ?*anyopaque, .{});
    }

    pub fn setAccessibilityCustomRotors(_self: *@This(), _accessibilityCustomRotors: ?*anyopaque) void {
        return objc.msgSend(_self, "setAccessibilityCustomRotors:", void, .{_accessibilityCustomRotors});
    }

    pub fn accessibilityUserInputLabels(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "accessibilityUserInputLabels", ?*anyopaque, .{});
    }

    pub fn setAccessibilityUserInputLabels(_self: *@This(), _accessibilityUserInputLabels: ?*anyopaque) void {
        return objc.msgSend(_self, "setAccessibilityUserInputLabels:", void, .{_accessibilityUserInputLabels});
    }

    pub fn accessibilityAttributedUserInputLabels(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "accessibilityAttributedUserInputLabels", ?*anyopaque, .{});
    }

    pub fn setAccessibilityAttributedUserInputLabels(_self: *@This(), _accessibilityAttributedUserInputLabels: ?*anyopaque) void {
        return objc.msgSend(_self, "setAccessibilityAttributedUserInputLabels:", void, .{_accessibilityAttributedUserInputLabels});
    }

    pub fn accessibilityApplicationFocusedUIElement(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityApplicationFocusedUIElement", ?objc.Id, .{});
    }

    pub fn setAccessibilityApplicationFocusedUIElement(_self: *@This(), _accessibilityApplicationFocusedUIElement: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityApplicationFocusedUIElement:", void, .{_accessibilityApplicationFocusedUIElement});
    }

    pub fn accessibilityMainWindow(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityMainWindow", ?objc.Id, .{});
    }

    pub fn setAccessibilityMainWindow(_self: *@This(), _accessibilityMainWindow: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityMainWindow:", void, .{_accessibilityMainWindow});
    }

    pub fn isAccessibilityHidden(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isAccessibilityHidden", objc.BOOL, .{});
    }

    pub fn setAccessibilityHidden(_self: *@This(), _accessibilityHidden: objc.BOOL) void {
        return objc.msgSend(_self, "setAccessibilityHidden:", void, .{_accessibilityHidden});
    }

    pub fn isAccessibilityFrontmost(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isAccessibilityFrontmost", objc.BOOL, .{});
    }

    pub fn setAccessibilityFrontmost(_self: *@This(), _accessibilityFrontmost: objc.BOOL) void {
        return objc.msgSend(_self, "setAccessibilityFrontmost:", void, .{_accessibilityFrontmost});
    }

    pub fn accessibilityFocusedWindow(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityFocusedWindow", ?objc.Id, .{});
    }

    pub fn setAccessibilityFocusedWindow(_self: *@This(), _accessibilityFocusedWindow: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityFocusedWindow:", void, .{_accessibilityFocusedWindow});
    }

    pub fn accessibilityWindows(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilityWindows", ?*foundation.Array, .{});
    }

    pub fn setAccessibilityWindows(_self: *@This(), _accessibilityWindows: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilityWindows:", void, .{_accessibilityWindows});
    }

    pub fn accessibilityExtrasMenuBar(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityExtrasMenuBar", ?objc.Id, .{});
    }

    pub fn setAccessibilityExtrasMenuBar(_self: *@This(), _accessibilityExtrasMenuBar: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityExtrasMenuBar:", void, .{_accessibilityExtrasMenuBar});
    }

    pub fn accessibilityMenuBar(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityMenuBar", ?objc.Id, .{});
    }

    pub fn setAccessibilityMenuBar(_self: *@This(), _accessibilityMenuBar: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityMenuBar:", void, .{_accessibilityMenuBar});
    }

    pub fn accessibilityColumnTitles(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilityColumnTitles", ?*foundation.Array, .{});
    }

    pub fn setAccessibilityColumnTitles(_self: *@This(), _accessibilityColumnTitles: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilityColumnTitles:", void, .{_accessibilityColumnTitles});
    }

    pub fn isAccessibilityOrderedByRow(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isAccessibilityOrderedByRow", objc.BOOL, .{});
    }

    pub fn setAccessibilityOrderedByRow(_self: *@This(), _accessibilityOrderedByRow: objc.BOOL) void {
        return objc.msgSend(_self, "setAccessibilityOrderedByRow:", void, .{_accessibilityOrderedByRow});
    }

    pub fn accessibilityHorizontalUnits(_self: *@This()) app_kit.AccessibilityUnits {
        return objc.msgSend(_self, "accessibilityHorizontalUnits", app_kit.AccessibilityUnits, .{});
    }

    pub fn setAccessibilityHorizontalUnits(_self: *@This(), _accessibilityHorizontalUnits: app_kit.AccessibilityUnits) void {
        return objc.msgSend(_self, "setAccessibilityHorizontalUnits:", void, .{_accessibilityHorizontalUnits});
    }

    pub fn accessibilityVerticalUnits(_self: *@This()) app_kit.AccessibilityUnits {
        return objc.msgSend(_self, "accessibilityVerticalUnits", app_kit.AccessibilityUnits, .{});
    }

    pub fn setAccessibilityVerticalUnits(_self: *@This(), _accessibilityVerticalUnits: app_kit.AccessibilityUnits) void {
        return objc.msgSend(_self, "setAccessibilityVerticalUnits:", void, .{_accessibilityVerticalUnits});
    }

    pub fn accessibilityHorizontalUnitDescription(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "accessibilityHorizontalUnitDescription", ?*foundation.String, .{});
    }

    pub fn setAccessibilityHorizontalUnitDescription(_self: *@This(), _accessibilityHorizontalUnitDescription: ?*foundation.String) void {
        return objc.msgSend(_self, "setAccessibilityHorizontalUnitDescription:", void, .{_accessibilityHorizontalUnitDescription});
    }

    pub fn accessibilityVerticalUnitDescription(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "accessibilityVerticalUnitDescription", ?*foundation.String, .{});
    }

    pub fn setAccessibilityVerticalUnitDescription(_self: *@This(), _accessibilityVerticalUnitDescription: ?*foundation.String) void {
        return objc.msgSend(_self, "setAccessibilityVerticalUnitDescription:", void, .{_accessibilityVerticalUnitDescription});
    }

    pub fn accessibilityHandles(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilityHandles", ?*foundation.Array, .{});
    }

    pub fn setAccessibilityHandles(_self: *@This(), _accessibilityHandles: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilityHandles:", void, .{_accessibilityHandles});
    }

    pub fn accessibilityWarningValue(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityWarningValue", ?objc.Id, .{});
    }

    pub fn setAccessibilityWarningValue(_self: *@This(), _accessibilityWarningValue: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityWarningValue:", void, .{_accessibilityWarningValue});
    }

    pub fn accessibilityCriticalValue(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityCriticalValue", ?objc.Id, .{});
    }

    pub fn setAccessibilityCriticalValue(_self: *@This(), _accessibilityCriticalValue: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityCriticalValue:", void, .{_accessibilityCriticalValue});
    }

    pub fn isAccessibilityDisclosed(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isAccessibilityDisclosed", objc.BOOL, .{});
    }

    pub fn setAccessibilityDisclosed(_self: *@This(), _accessibilityDisclosed: objc.BOOL) void {
        return objc.msgSend(_self, "setAccessibilityDisclosed:", void, .{_accessibilityDisclosed});
    }

    pub fn accessibilityDisclosedByRow(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityDisclosedByRow", ?objc.Id, .{});
    }

    pub fn setAccessibilityDisclosedByRow(_self: *@This(), _accessibilityDisclosedByRow: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityDisclosedByRow:", void, .{_accessibilityDisclosedByRow});
    }

    pub fn accessibilityDisclosedRows(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityDisclosedRows", ?objc.Id, .{});
    }

    pub fn setAccessibilityDisclosedRows(_self: *@This(), _accessibilityDisclosedRows: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityDisclosedRows:", void, .{_accessibilityDisclosedRows});
    }

    pub fn accessibilityDisclosureLevel(_self: *@This()) objc.NSInteger {
        return objc.msgSend(_self, "accessibilityDisclosureLevel", objc.NSInteger, .{});
    }

    pub fn setAccessibilityDisclosureLevel(_self: *@This(), _accessibilityDisclosureLevel: objc.NSInteger) void {
        return objc.msgSend(_self, "setAccessibilityDisclosureLevel:", void, .{_accessibilityDisclosureLevel});
    }

    pub fn accessibilityMarkerUIElements(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilityMarkerUIElements", ?*foundation.Array, .{});
    }

    pub fn setAccessibilityMarkerUIElements(_self: *@This(), _accessibilityMarkerUIElements: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilityMarkerUIElements:", void, .{_accessibilityMarkerUIElements});
    }

    pub fn accessibilityMarkerValues(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityMarkerValues", ?objc.Id, .{});
    }

    pub fn setAccessibilityMarkerValues(_self: *@This(), _accessibilityMarkerValues: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityMarkerValues:", void, .{_accessibilityMarkerValues});
    }

    pub fn accessibilityMarkerGroupUIElement(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityMarkerGroupUIElement", ?objc.Id, .{});
    }

    pub fn setAccessibilityMarkerGroupUIElement(_self: *@This(), _accessibilityMarkerGroupUIElement: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityMarkerGroupUIElement:", void, .{_accessibilityMarkerGroupUIElement});
    }

    pub fn accessibilityUnits(_self: *@This()) app_kit.AccessibilityUnits {
        return objc.msgSend(_self, "accessibilityUnits", app_kit.AccessibilityUnits, .{});
    }

    pub fn setAccessibilityUnits(_self: *@This(), _accessibilityUnits: app_kit.AccessibilityUnits) void {
        return objc.msgSend(_self, "setAccessibilityUnits:", void, .{_accessibilityUnits});
    }

    pub fn accessibilityUnitDescription(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "accessibilityUnitDescription", ?*foundation.String, .{});
    }

    pub fn setAccessibilityUnitDescription(_self: *@This(), _accessibilityUnitDescription: ?*foundation.String) void {
        return objc.msgSend(_self, "setAccessibilityUnitDescription:", void, .{_accessibilityUnitDescription});
    }

    pub fn accessibilityRulerMarkerType(_self: *@This()) app_kit.AccessibilityRulerMarkerType {
        return objc.msgSend(_self, "accessibilityRulerMarkerType", app_kit.AccessibilityRulerMarkerType, .{});
    }

    pub fn setAccessibilityRulerMarkerType(_self: *@This(), _accessibilityRulerMarkerType: app_kit.AccessibilityRulerMarkerType) void {
        return objc.msgSend(_self, "setAccessibilityRulerMarkerType:", void, .{_accessibilityRulerMarkerType});
    }

    pub fn accessibilityMarkerTypeDescription(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "accessibilityMarkerTypeDescription", ?*foundation.String, .{});
    }

    pub fn setAccessibilityMarkerTypeDescription(_self: *@This(), _accessibilityMarkerTypeDescription: ?*foundation.String) void {
        return objc.msgSend(_self, "setAccessibilityMarkerTypeDescription:", void, .{_accessibilityMarkerTypeDescription});
    }

    pub fn accessibilityHorizontalScrollBar(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityHorizontalScrollBar", ?objc.Id, .{});
    }

    pub fn setAccessibilityHorizontalScrollBar(_self: *@This(), _accessibilityHorizontalScrollBar: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityHorizontalScrollBar:", void, .{_accessibilityHorizontalScrollBar});
    }

    pub fn accessibilityVerticalScrollBar(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityVerticalScrollBar", ?objc.Id, .{});
    }

    pub fn setAccessibilityVerticalScrollBar(_self: *@This(), _accessibilityVerticalScrollBar: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityVerticalScrollBar:", void, .{_accessibilityVerticalScrollBar});
    }

    pub fn accessibilityAllowedValues(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "accessibilityAllowedValues", ?*anyopaque, .{});
    }

    pub fn setAccessibilityAllowedValues(_self: *@This(), _accessibilityAllowedValues: ?*anyopaque) void {
        return objc.msgSend(_self, "setAccessibilityAllowedValues:", void, .{_accessibilityAllowedValues});
    }

    pub fn accessibilityLabelUIElements(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilityLabelUIElements", ?*foundation.Array, .{});
    }

    pub fn setAccessibilityLabelUIElements(_self: *@This(), _accessibilityLabelUIElements: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilityLabelUIElements:", void, .{_accessibilityLabelUIElements});
    }

    pub fn accessibilityLabelValue(_self: *@This()) f32 {
        return objc.msgSend(_self, "accessibilityLabelValue", f32, .{});
    }

    pub fn setAccessibilityLabelValue(_self: *@This(), _accessibilityLabelValue: f32) void {
        return objc.msgSend(_self, "setAccessibilityLabelValue:", void, .{_accessibilityLabelValue});
    }

    pub fn accessibilitySplitters(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilitySplitters", ?*foundation.Array, .{});
    }

    pub fn setAccessibilitySplitters(_self: *@This(), _accessibilitySplitters: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilitySplitters:", void, .{_accessibilitySplitters});
    }

    pub fn accessibilityDecrementButton(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityDecrementButton", ?objc.Id, .{});
    }

    pub fn setAccessibilityDecrementButton(_self: *@This(), _accessibilityDecrementButton: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityDecrementButton:", void, .{_accessibilityDecrementButton});
    }

    pub fn accessibilityIncrementButton(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityIncrementButton", ?objc.Id, .{});
    }

    pub fn setAccessibilityIncrementButton(_self: *@This(), _accessibilityIncrementButton: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityIncrementButton:", void, .{_accessibilityIncrementButton});
    }

    pub fn accessibilityTabs(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilityTabs", ?*foundation.Array, .{});
    }

    pub fn setAccessibilityTabs(_self: *@This(), _accessibilityTabs: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilityTabs:", void, .{_accessibilityTabs});
    }

    pub fn accessibilityHeader(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityHeader", ?objc.Id, .{});
    }

    pub fn setAccessibilityHeader(_self: *@This(), _accessibilityHeader: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityHeader:", void, .{_accessibilityHeader});
    }

    pub fn accessibilityColumnCount(_self: *@This()) objc.NSInteger {
        return objc.msgSend(_self, "accessibilityColumnCount", objc.NSInteger, .{});
    }

    pub fn setAccessibilityColumnCount(_self: *@This(), _accessibilityColumnCount: objc.NSInteger) void {
        return objc.msgSend(_self, "setAccessibilityColumnCount:", void, .{_accessibilityColumnCount});
    }

    pub fn accessibilityRowCount(_self: *@This()) objc.NSInteger {
        return objc.msgSend(_self, "accessibilityRowCount", objc.NSInteger, .{});
    }

    pub fn setAccessibilityRowCount(_self: *@This(), _accessibilityRowCount: objc.NSInteger) void {
        return objc.msgSend(_self, "setAccessibilityRowCount:", void, .{_accessibilityRowCount});
    }

    pub fn accessibilityIndex(_self: *@This()) objc.NSInteger {
        return objc.msgSend(_self, "accessibilityIndex", objc.NSInteger, .{});
    }

    pub fn setAccessibilityIndex(_self: *@This(), _accessibilityIndex: objc.NSInteger) void {
        return objc.msgSend(_self, "setAccessibilityIndex:", void, .{_accessibilityIndex});
    }

    pub fn accessibilityColumns(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilityColumns", ?*foundation.Array, .{});
    }

    pub fn setAccessibilityColumns(_self: *@This(), _accessibilityColumns: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilityColumns:", void, .{_accessibilityColumns});
    }

    pub fn accessibilityRows(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilityRows", ?*foundation.Array, .{});
    }

    pub fn setAccessibilityRows(_self: *@This(), _accessibilityRows: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilityRows:", void, .{_accessibilityRows});
    }

    pub fn accessibilityVisibleRows(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilityVisibleRows", ?*foundation.Array, .{});
    }

    pub fn setAccessibilityVisibleRows(_self: *@This(), _accessibilityVisibleRows: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilityVisibleRows:", void, .{_accessibilityVisibleRows});
    }

    pub fn accessibilitySelectedRows(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilitySelectedRows", ?*foundation.Array, .{});
    }

    pub fn setAccessibilitySelectedRows(_self: *@This(), _accessibilitySelectedRows: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilitySelectedRows:", void, .{_accessibilitySelectedRows});
    }

    pub fn accessibilityVisibleColumns(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilityVisibleColumns", ?*foundation.Array, .{});
    }

    pub fn setAccessibilityVisibleColumns(_self: *@This(), _accessibilityVisibleColumns: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilityVisibleColumns:", void, .{_accessibilityVisibleColumns});
    }

    pub fn accessibilitySelectedColumns(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilitySelectedColumns", ?*foundation.Array, .{});
    }

    pub fn setAccessibilitySelectedColumns(_self: *@This(), _accessibilitySelectedColumns: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilitySelectedColumns:", void, .{_accessibilitySelectedColumns});
    }

    pub fn accessibilitySortDirection(_self: *@This()) app_kit.AccessibilitySortDirection {
        return objc.msgSend(_self, "accessibilitySortDirection", app_kit.AccessibilitySortDirection, .{});
    }

    pub fn setAccessibilitySortDirection(_self: *@This(), _accessibilitySortDirection: app_kit.AccessibilitySortDirection) void {
        return objc.msgSend(_self, "setAccessibilitySortDirection:", void, .{_accessibilitySortDirection});
    }

    pub fn accessibilityRowHeaderUIElements(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilityRowHeaderUIElements", ?*foundation.Array, .{});
    }

    pub fn setAccessibilityRowHeaderUIElements(_self: *@This(), _accessibilityRowHeaderUIElements: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilityRowHeaderUIElements:", void, .{_accessibilityRowHeaderUIElements});
    }

    pub fn accessibilitySelectedCells(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilitySelectedCells", ?*foundation.Array, .{});
    }

    pub fn setAccessibilitySelectedCells(_self: *@This(), _accessibilitySelectedCells: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilitySelectedCells:", void, .{_accessibilitySelectedCells});
    }

    pub fn accessibilityVisibleCells(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilityVisibleCells", ?*foundation.Array, .{});
    }

    pub fn setAccessibilityVisibleCells(_self: *@This(), _accessibilityVisibleCells: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilityVisibleCells:", void, .{_accessibilityVisibleCells});
    }

    pub fn accessibilityColumnHeaderUIElements(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilityColumnHeaderUIElements", ?*foundation.Array, .{});
    }

    pub fn setAccessibilityColumnHeaderUIElements(_self: *@This(), _accessibilityColumnHeaderUIElements: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilityColumnHeaderUIElements:", void, .{_accessibilityColumnHeaderUIElements});
    }

    pub fn accessibilityRowIndexRange(_self: *@This()) foundation.Range {
        return objc.msgSend(_self, "accessibilityRowIndexRange", foundation.Range, .{});
    }

    pub fn setAccessibilityRowIndexRange(_self: *@This(), _accessibilityRowIndexRange: foundation.Range) void {
        return objc.msgSend(_self, "setAccessibilityRowIndexRange:", void, .{_accessibilityRowIndexRange});
    }

    pub fn accessibilityColumnIndexRange(_self: *@This()) foundation.Range {
        return objc.msgSend(_self, "accessibilityColumnIndexRange", foundation.Range, .{});
    }

    pub fn setAccessibilityColumnIndexRange(_self: *@This(), _accessibilityColumnIndexRange: foundation.Range) void {
        return objc.msgSend(_self, "setAccessibilityColumnIndexRange:", void, .{_accessibilityColumnIndexRange});
    }

    pub fn accessibilityInsertionPointLineNumber(_self: *@This()) objc.NSInteger {
        return objc.msgSend(_self, "accessibilityInsertionPointLineNumber", objc.NSInteger, .{});
    }

    pub fn setAccessibilityInsertionPointLineNumber(_self: *@This(), _accessibilityInsertionPointLineNumber: objc.NSInteger) void {
        return objc.msgSend(_self, "setAccessibilityInsertionPointLineNumber:", void, .{_accessibilityInsertionPointLineNumber});
    }

    pub fn accessibilitySharedCharacterRange(_self: *@This()) foundation.Range {
        return objc.msgSend(_self, "accessibilitySharedCharacterRange", foundation.Range, .{});
    }

    pub fn setAccessibilitySharedCharacterRange(_self: *@This(), _accessibilitySharedCharacterRange: foundation.Range) void {
        return objc.msgSend(_self, "setAccessibilitySharedCharacterRange:", void, .{_accessibilitySharedCharacterRange});
    }

    pub fn accessibilitySharedTextUIElements(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilitySharedTextUIElements", ?*foundation.Array, .{});
    }

    pub fn setAccessibilitySharedTextUIElements(_self: *@This(), _accessibilitySharedTextUIElements: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilitySharedTextUIElements:", void, .{_accessibilitySharedTextUIElements});
    }

    pub fn accessibilityVisibleCharacterRange(_self: *@This()) foundation.Range {
        return objc.msgSend(_self, "accessibilityVisibleCharacterRange", foundation.Range, .{});
    }

    pub fn setAccessibilityVisibleCharacterRange(_self: *@This(), _accessibilityVisibleCharacterRange: foundation.Range) void {
        return objc.msgSend(_self, "setAccessibilityVisibleCharacterRange:", void, .{_accessibilityVisibleCharacterRange});
    }

    pub fn accessibilityNumberOfCharacters(_self: *@This()) objc.NSInteger {
        return objc.msgSend(_self, "accessibilityNumberOfCharacters", objc.NSInteger, .{});
    }

    pub fn setAccessibilityNumberOfCharacters(_self: *@This(), _accessibilityNumberOfCharacters: objc.NSInteger) void {
        return objc.msgSend(_self, "setAccessibilityNumberOfCharacters:", void, .{_accessibilityNumberOfCharacters});
    }

    pub fn accessibilitySelectedText(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "accessibilitySelectedText", ?*foundation.String, .{});
    }

    pub fn setAccessibilitySelectedText(_self: *@This(), _accessibilitySelectedText: ?*foundation.String) void {
        return objc.msgSend(_self, "setAccessibilitySelectedText:", void, .{_accessibilitySelectedText});
    }

    pub fn accessibilitySelectedTextRange(_self: *@This()) foundation.Range {
        return objc.msgSend(_self, "accessibilitySelectedTextRange", foundation.Range, .{});
    }

    pub fn setAccessibilitySelectedTextRange(_self: *@This(), _accessibilitySelectedTextRange: foundation.Range) void {
        return objc.msgSend(_self, "setAccessibilitySelectedTextRange:", void, .{_accessibilitySelectedTextRange});
    }

    pub fn accessibilitySelectedTextRanges(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "accessibilitySelectedTextRanges", ?*anyopaque, .{});
    }

    pub fn setAccessibilitySelectedTextRanges(_self: *@This(), _accessibilitySelectedTextRanges: ?*anyopaque) void {
        return objc.msgSend(_self, "setAccessibilitySelectedTextRanges:", void, .{_accessibilitySelectedTextRanges});
    }

    pub fn accessibilityToolbarButton(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityToolbarButton", ?objc.Id, .{});
    }

    pub fn setAccessibilityToolbarButton(_self: *@This(), _accessibilityToolbarButton: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityToolbarButton:", void, .{_accessibilityToolbarButton});
    }

    pub fn isAccessibilityModal(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isAccessibilityModal", objc.BOOL, .{});
    }

    pub fn setAccessibilityModal(_self: *@This(), _accessibilityModal: objc.BOOL) void {
        return objc.msgSend(_self, "setAccessibilityModal:", void, .{_accessibilityModal});
    }

    pub fn accessibilityProxy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityProxy", ?objc.Id, .{});
    }

    pub fn setAccessibilityProxy(_self: *@This(), _accessibilityProxy: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityProxy:", void, .{_accessibilityProxy});
    }

    pub fn isAccessibilityMain(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isAccessibilityMain", objc.BOOL, .{});
    }

    pub fn setAccessibilityMain(_self: *@This(), _accessibilityMain: objc.BOOL) void {
        return objc.msgSend(_self, "setAccessibilityMain:", void, .{_accessibilityMain});
    }

    pub fn accessibilityFullScreenButton(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityFullScreenButton", ?objc.Id, .{});
    }

    pub fn setAccessibilityFullScreenButton(_self: *@This(), _accessibilityFullScreenButton: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityFullScreenButton:", void, .{_accessibilityFullScreenButton});
    }

    pub fn accessibilityGrowArea(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityGrowArea", ?objc.Id, .{});
    }

    pub fn setAccessibilityGrowArea(_self: *@This(), _accessibilityGrowArea: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityGrowArea:", void, .{_accessibilityGrowArea});
    }

    pub fn accessibilityDocument(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "accessibilityDocument", ?*foundation.String, .{});
    }

    pub fn setAccessibilityDocument(_self: *@This(), _accessibilityDocument: ?*foundation.String) void {
        return objc.msgSend(_self, "setAccessibilityDocument:", void, .{_accessibilityDocument});
    }

    pub fn accessibilityDefaultButton(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityDefaultButton", ?objc.Id, .{});
    }

    pub fn setAccessibilityDefaultButton(_self: *@This(), _accessibilityDefaultButton: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityDefaultButton:", void, .{_accessibilityDefaultButton});
    }

    pub fn accessibilityCloseButton(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityCloseButton", ?objc.Id, .{});
    }

    pub fn setAccessibilityCloseButton(_self: *@This(), _accessibilityCloseButton: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityCloseButton:", void, .{_accessibilityCloseButton});
    }

    pub fn accessibilityZoomButton(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityZoomButton", ?objc.Id, .{});
    }

    pub fn setAccessibilityZoomButton(_self: *@This(), _accessibilityZoomButton: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityZoomButton:", void, .{_accessibilityZoomButton});
    }

    pub fn accessibilityMinimizeButton(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "accessibilityMinimizeButton", ?objc.Id, .{});
    }

    pub fn setAccessibilityMinimizeButton(_self: *@This(), _accessibilityMinimizeButton: ?objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityMinimizeButton:", void, .{_accessibilityMinimizeButton});
    }

    pub fn isAccessibilityMinimized(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isAccessibilityMinimized", objc.BOOL, .{});
    }

    pub fn setAccessibilityMinimized(_self: *@This(), _accessibilityMinimized: objc.BOOL) void {
        return objc.msgSend(_self, "setAccessibilityMinimized:", void, .{_accessibilityMinimized});
    }

    pub fn accessibilityCustomActions(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "accessibilityCustomActions", ?*anyopaque, .{});
    }

    pub fn setAccessibilityCustomActions(_self: *@This(), _accessibilityCustomActions: ?*anyopaque) void {
        return objc.msgSend(_self, "setAccessibilityCustomActions:", void, .{_accessibilityCustomActions});
    }

    pub fn initWithFrame(_self: *@This(), _frameRect: foundation.Rect) *@This() {
        return objc.msgSend(_self, "initWithFrame:", *@This(), .{_frameRect});
    }

    pub fn isDescendantOf(_self: *@This(), _view: ?*app_kit.View) objc.BOOL {
        return objc.msgSend(_self, "isDescendantOf:", objc.BOOL, .{_view});
    }

    pub fn ancestorSharedWithView(_self: *@This(), _view: ?*app_kit.View) ?*app_kit.View {
        return objc.msgSend(_self, "ancestorSharedWithView:", ?*app_kit.View, .{_view});
    }

    pub fn getRectsBeingDrawnCount(_self: *@This(), _rects: ?*?*foundation.Rect, _count: ?*objc.NSInteger) void {
        return objc.msgSend(_self, "getRectsBeingDrawn:count:", void, .{ _rects, _count });
    }

    pub fn needsToDrawRect(_self: *@This(), _rect: foundation.Rect) objc.BOOL {
        return objc.msgSend(_self, "needsToDrawRect:", objc.BOOL, .{_rect});
    }

    pub fn viewDidHide(_self: *@This()) void {
        return objc.msgSend(_self, "viewDidHide", void, .{});
    }

    pub fn viewDidUnhide(_self: *@This()) void {
        return objc.msgSend(_self, "viewDidUnhide", void, .{});
    }

    pub fn addSubview(_self: *@This(), _view: ?*app_kit.View) void {
        return objc.msgSend(_self, "addSubview:", void, .{_view});
    }

    pub fn addSubviewPositionedRelativeTo(_self: *@This(), _view: ?*app_kit.View, _place: app_kit.WindowOrderingMode, _otherView: ?*app_kit.View) void {
        return objc.msgSend(_self, "addSubview:positioned:relativeTo:", void, .{ _view, _place, _otherView });
    }

    pub fn sortSubviewsUsingFunctionContext(_self: *@This(), _compare: ?*const fn (?*anyopaque, ?*anyopaque, ?*anyopaque) callconv(.C) foundation.ComparisonResult, _context: ?*anyopaque) void {
        return objc.msgSend(_self, "sortSubviewsUsingFunction:context:", void, .{ _compare, _context });
    }

    pub fn viewWillMoveToWindow(_self: *@This(), _newWindow: ?*app_kit.Window) void {
        return objc.msgSend(_self, "viewWillMoveToWindow:", void, .{_newWindow});
    }

    pub fn viewDidMoveToWindow(_self: *@This()) void {
        return objc.msgSend(_self, "viewDidMoveToWindow", void, .{});
    }

    pub fn viewWillMoveToSuperview(_self: *@This(), _newSuperview: ?*app_kit.View) void {
        return objc.msgSend(_self, "viewWillMoveToSuperview:", void, .{_newSuperview});
    }

    pub fn viewDidMoveToSuperview(_self: *@This()) void {
        return objc.msgSend(_self, "viewDidMoveToSuperview", void, .{});
    }

    pub fn didAddSubview(_self: *@This(), _subview: ?*app_kit.View) void {
        return objc.msgSend(_self, "didAddSubview:", void, .{_subview});
    }

    pub fn willRemoveSubview(_self: *@This(), _subview: ?*app_kit.View) void {
        return objc.msgSend(_self, "willRemoveSubview:", void, .{_subview});
    }

    pub fn removeFromSuperview(_self: *@This()) void {
        return objc.msgSend(_self, "removeFromSuperview", void, .{});
    }

    pub fn replaceSubviewWith(_self: *@This(), _oldView: ?*app_kit.View, _newView: ?*app_kit.View) void {
        return objc.msgSend(_self, "replaceSubview:with:", void, .{ _oldView, _newView });
    }

    pub fn removeFromSuperviewWithoutNeedingDisplay(_self: *@This()) void {
        return objc.msgSend(_self, "removeFromSuperviewWithoutNeedingDisplay", void, .{});
    }

    pub fn viewDidChangeBackingProperties(_self: *@This()) void {
        return objc.msgSend(_self, "viewDidChangeBackingProperties", void, .{});
    }

    pub fn resizeSubviewsWithOldSize(_self: *@This(), _oldSize: foundation.Size) void {
        return objc.msgSend(_self, "resizeSubviewsWithOldSize:", void, .{_oldSize});
    }

    pub fn resizeWithOldSuperviewSize(_self: *@This(), _oldSize: foundation.Size) void {
        return objc.msgSend(_self, "resizeWithOldSuperviewSize:", void, .{_oldSize});
    }

    pub fn setFrameOrigin(_self: *@This(), _newOrigin: foundation.Point) void {
        return objc.msgSend(_self, "setFrameOrigin:", void, .{_newOrigin});
    }

    pub fn setFrameSize(_self: *@This(), _newSize: foundation.Size) void {
        return objc.msgSend(_self, "setFrameSize:", void, .{_newSize});
    }

    pub fn setBoundsOrigin(_self: *@This(), _newOrigin: foundation.Point) void {
        return objc.msgSend(_self, "setBoundsOrigin:", void, .{_newOrigin});
    }

    pub fn setBoundsSize(_self: *@This(), _newSize: foundation.Size) void {
        return objc.msgSend(_self, "setBoundsSize:", void, .{_newSize});
    }

    pub fn translateOriginToPoint(_self: *@This(), _translation: foundation.Point) void {
        return objc.msgSend(_self, "translateOriginToPoint:", void, .{_translation});
    }

    pub fn scaleUnitSquareToSize(_self: *@This(), _newUnitSize: foundation.Size) void {
        return objc.msgSend(_self, "scaleUnitSquareToSize:", void, .{_newUnitSize});
    }

    pub fn rotateByAngle(_self: *@This(), _angle: core_foundation.CGFloat) void {
        return objc.msgSend(_self, "rotateByAngle:", void, .{_angle});
    }

    pub fn convertPointFromView(_self: *@This(), _point: foundation.Point, _view: ?*app_kit.View) foundation.Point {
        return objc.msgSend(_self, "convertPoint:fromView:", foundation.Point, .{ _point, _view });
    }

    pub fn convertPointToView(_self: *@This(), _point: foundation.Point, _view: ?*app_kit.View) foundation.Point {
        return objc.msgSend(_self, "convertPoint:toView:", foundation.Point, .{ _point, _view });
    }

    pub fn convertSizeFromView(_self: *@This(), _size: foundation.Size, _view: ?*app_kit.View) foundation.Size {
        return objc.msgSend(_self, "convertSize:fromView:", foundation.Size, .{ _size, _view });
    }

    pub fn convertSizeToView(_self: *@This(), _size: foundation.Size, _view: ?*app_kit.View) foundation.Size {
        return objc.msgSend(_self, "convertSize:toView:", foundation.Size, .{ _size, _view });
    }

    pub fn convertRectFromView(_self: *@This(), _rect: foundation.Rect, _view: ?*app_kit.View) foundation.Rect {
        return objc.msgSend(_self, "convertRect:fromView:", foundation.Rect, .{ _rect, _view });
    }

    pub fn convertRectToView(_self: *@This(), _rect: foundation.Rect, _view: ?*app_kit.View) foundation.Rect {
        return objc.msgSend(_self, "convertRect:toView:", foundation.Rect, .{ _rect, _view });
    }

    pub fn backingAlignedRectOptions(_self: *@This(), _rect: foundation.Rect, _options: foundation.AlignmentOptions) foundation.Rect {
        return objc.msgSend(_self, "backingAlignedRect:options:", foundation.Rect, .{ _rect, _options });
    }

    pub fn centerScanRect(_self: *@This(), _rect: foundation.Rect) foundation.Rect {
        return objc.msgSend(_self, "centerScanRect:", foundation.Rect, .{_rect});
    }

    pub fn convertPointToBacking(_self: *@This(), _point: foundation.Point) foundation.Point {
        return objc.msgSend(_self, "convertPointToBacking:", foundation.Point, .{_point});
    }

    pub fn convertPointFromBacking(_self: *@This(), _point: foundation.Point) foundation.Point {
        return objc.msgSend(_self, "convertPointFromBacking:", foundation.Point, .{_point});
    }

    pub fn convertSizeToBacking(_self: *@This(), _size: foundation.Size) foundation.Size {
        return objc.msgSend(_self, "convertSizeToBacking:", foundation.Size, .{_size});
    }

    pub fn convertSizeFromBacking(_self: *@This(), _size: foundation.Size) foundation.Size {
        return objc.msgSend(_self, "convertSizeFromBacking:", foundation.Size, .{_size});
    }

    pub fn convertRectToBacking(_self: *@This(), _rect: foundation.Rect) foundation.Rect {
        return objc.msgSend(_self, "convertRectToBacking:", foundation.Rect, .{_rect});
    }

    pub fn convertRectFromBacking(_self: *@This(), _rect: foundation.Rect) foundation.Rect {
        return objc.msgSend(_self, "convertRectFromBacking:", foundation.Rect, .{_rect});
    }

    pub fn convertPointToLayer(_self: *@This(), _point: foundation.Point) foundation.Point {
        return objc.msgSend(_self, "convertPointToLayer:", foundation.Point, .{_point});
    }

    pub fn convertPointFromLayer(_self: *@This(), _point: foundation.Point) foundation.Point {
        return objc.msgSend(_self, "convertPointFromLayer:", foundation.Point, .{_point});
    }

    pub fn convertSizeToLayer(_self: *@This(), _size: foundation.Size) foundation.Size {
        return objc.msgSend(_self, "convertSizeToLayer:", foundation.Size, .{_size});
    }

    pub fn convertSizeFromLayer(_self: *@This(), _size: foundation.Size) foundation.Size {
        return objc.msgSend(_self, "convertSizeFromLayer:", foundation.Size, .{_size});
    }

    pub fn convertRectToLayer(_self: *@This(), _rect: foundation.Rect) foundation.Rect {
        return objc.msgSend(_self, "convertRectToLayer:", foundation.Rect, .{_rect});
    }

    pub fn convertRectFromLayer(_self: *@This(), _rect: foundation.Rect) foundation.Rect {
        return objc.msgSend(_self, "convertRectFromLayer:", foundation.Rect, .{_rect});
    }

    pub fn setNeedsDisplayInRect(_self: *@This(), _invalidRect: foundation.Rect) void {
        return objc.msgSend(_self, "setNeedsDisplayInRect:", void, .{_invalidRect});
    }

    pub fn lockFocus(_self: *@This()) void {
        return objc.msgSend(_self, "lockFocus", void, .{});
    }

    pub fn unlockFocus(_self: *@This()) void {
        return objc.msgSend(_self, "unlockFocus", void, .{});
    }

    pub fn lockFocusIfCanDraw(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "lockFocusIfCanDraw", objc.BOOL, .{});
    }

    pub fn lockFocusIfCanDrawInContext(_self: *@This(), _context: ?*app_kit.GraphicsContext) objc.BOOL {
        return objc.msgSend(_self, "lockFocusIfCanDrawInContext:", objc.BOOL, .{_context});
    }

    pub fn display(_self: *@This()) void {
        return objc.msgSend(_self, "display", void, .{});
    }

    pub fn displayIfNeeded(_self: *@This()) void {
        return objc.msgSend(_self, "displayIfNeeded", void, .{});
    }

    pub fn displayIfNeededIgnoringOpacity(_self: *@This()) void {
        return objc.msgSend(_self, "displayIfNeededIgnoringOpacity", void, .{});
    }

    pub fn displayRect(_self: *@This(), _rect: foundation.Rect) void {
        return objc.msgSend(_self, "displayRect:", void, .{_rect});
    }

    pub fn displayIfNeededInRect(_self: *@This(), _rect: foundation.Rect) void {
        return objc.msgSend(_self, "displayIfNeededInRect:", void, .{_rect});
    }

    pub fn displayRectIgnoringOpacity(_self: *@This(), _rect: foundation.Rect) void {
        return objc.msgSend(_self, "displayRectIgnoringOpacity:", void, .{_rect});
    }

    pub fn displayIfNeededInRectIgnoringOpacity(_self: *@This(), _rect: foundation.Rect) void {
        return objc.msgSend(_self, "displayIfNeededInRectIgnoringOpacity:", void, .{_rect});
    }

    pub fn drawRect(_self: *@This(), _dirtyRect: foundation.Rect) void {
        return objc.msgSend(_self, "drawRect:", void, .{_dirtyRect});
    }

    pub fn displayRectIgnoringOpacityInContext(_self: *@This(), _rect: foundation.Rect, _context: ?*app_kit.GraphicsContext) void {
        return objc.msgSend(_self, "displayRectIgnoringOpacity:inContext:", void, .{ _rect, _context });
    }

    pub fn bitmapImageRepForCachingDisplayInRect(_self: *@This(), _rect: foundation.Rect) ?*app_kit.BitmapImageRep {
        return objc.msgSend(_self, "bitmapImageRepForCachingDisplayInRect:", ?*app_kit.BitmapImageRep, .{_rect});
    }

    pub fn cacheDisplayInRectToBitmapImageRep(_self: *@This(), _rect: foundation.Rect, _bitmapImageRep: ?*app_kit.BitmapImageRep) void {
        return objc.msgSend(_self, "cacheDisplayInRect:toBitmapImageRep:", void, .{ _rect, _bitmapImageRep });
    }

    pub fn viewWillDraw(_self: *@This()) void {
        return objc.msgSend(_self, "viewWillDraw", void, .{});
    }

    pub fn scrollPoint(_self: *@This(), _point: foundation.Point) void {
        return objc.msgSend(_self, "scrollPoint:", void, .{_point});
    }

    pub fn scrollRectToVisible(_self: *@This(), _rect: foundation.Rect) objc.BOOL {
        return objc.msgSend(_self, "scrollRectToVisible:", objc.BOOL, .{_rect});
    }

    pub fn autoscroll(_self: *@This(), _event: ?*app_kit.Event) objc.BOOL {
        return objc.msgSend(_self, "autoscroll:", objc.BOOL, .{_event});
    }

    pub fn adjustScroll(_self: *@This(), _newVisible: foundation.Rect) foundation.Rect {
        return objc.msgSend(_self, "adjustScroll:", foundation.Rect, .{_newVisible});
    }

    pub fn scrollRectBy(_self: *@This(), _rect: foundation.Rect, _delta: foundation.Size) void {
        return objc.msgSend(_self, "scrollRect:by:", void, .{ _rect, _delta });
    }

    pub fn translateRectsNeedingDisplayInRectBy(_self: *@This(), _clipRect: foundation.Rect, _delta: foundation.Size) void {
        return objc.msgSend(_self, "translateRectsNeedingDisplayInRect:by:", void, .{ _clipRect, _delta });
    }

    pub fn hitTest(_self: *@This(), _point: foundation.Point) ?*app_kit.View {
        return objc.msgSend(_self, "hitTest:", ?*app_kit.View, .{_point});
    }

    pub fn mouseInRect(_self: *@This(), _point: foundation.Point, _rect: foundation.Rect) objc.BOOL {
        return objc.msgSend(_self, "mouse:inRect:", objc.BOOL, .{ _point, _rect });
    }

    pub fn viewWithTag(_self: *@This(), _tag: objc.NSInteger) ?*anyopaque {
        return objc.msgSend(_self, "viewWithTag:", ?*anyopaque, .{_tag});
    }

    pub fn acceptsFirstMouse(_self: *@This(), _event: ?*app_kit.Event) objc.BOOL {
        return objc.msgSend(_self, "acceptsFirstMouse:", objc.BOOL, .{_event});
    }

    pub fn shouldDelayWindowOrderingForEvent(_self: *@This(), _event: ?*app_kit.Event) objc.BOOL {
        return objc.msgSend(_self, "shouldDelayWindowOrderingForEvent:", objc.BOOL, .{_event});
    }

    pub fn makeBackingLayer(_self: *@This()) ?*quartz_core.Layer {
        return objc.msgSend(_self, "makeBackingLayer", ?*quartz_core.Layer, .{});
    }

    pub fn updateLayer(_self: *@This()) void {
        return objc.msgSend(_self, "updateLayer", void, .{});
    }

    pub fn layoutSubtreeIfNeeded(_self: *@This()) void {
        return objc.msgSend(_self, "layoutSubtreeIfNeeded", void, .{});
    }

    pub fn layout(_self: *@This()) void {
        return objc.msgSend(_self, "layout", void, .{});
    }

    pub fn menuForEvent(_self: *@This(), _event: ?*app_kit.Event) ?*app_kit.Menu {
        return objc.msgSend(_self, "menuForEvent:", ?*app_kit.Menu, .{_event});
    }

    pub fn willOpenMenuWithEvent(_self: *@This(), _menu: ?*app_kit.Menu, _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "willOpenMenu:withEvent:", void, .{ _menu, _event });
    }

    pub fn didCloseMenuWithEvent(_self: *@This(), _menu: ?*app_kit.Menu, _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "didCloseMenu:withEvent:", void, .{ _menu, _event });
    }

    pub fn addToolTipRectOwnerUserData(_self: *@This(), _rect: foundation.Rect, _owner: ?objc.Id, _data: ?*anyopaque) app_kit.ToolTipTag {
        return objc.msgSend(_self, "addToolTipRect:owner:userData:", app_kit.ToolTipTag, .{ _rect, _owner, _data });
    }

    pub fn removeToolTip(_self: *@This(), _tag: app_kit.ToolTipTag) void {
        return objc.msgSend(_self, "removeToolTip:", void, .{_tag});
    }

    pub fn removeAllToolTips(_self: *@This()) void {
        return objc.msgSend(_self, "removeAllToolTips", void, .{});
    }

    pub fn viewWillStartLiveResize(_self: *@This()) void {
        return objc.msgSend(_self, "viewWillStartLiveResize", void, .{});
    }

    pub fn viewDidEndLiveResize(_self: *@This()) void {
        return objc.msgSend(_self, "viewDidEndLiveResize", void, .{});
    }

    pub fn getRectsExposedDuringLiveResizeCount(_self: *@This(), _exposedRects: ?*foundation.Rect, _count: ?*objc.NSInteger) void {
        return objc.msgSend(_self, "getRectsExposedDuringLiveResize:count:", void, .{ _exposedRects, _count });
    }

    pub fn rectForSmartMagnificationAtPointInRect(_self: *@This(), _location: foundation.Point, _visibleRect: foundation.Rect) foundation.Rect {
        return objc.msgSend(_self, "rectForSmartMagnificationAtPoint:inRect:", foundation.Rect, .{ _location, _visibleRect });
    }

    pub fn prepareForReuse(_self: *@This()) void {
        return objc.msgSend(_self, "prepareForReuse", void, .{});
    }

    pub fn prepareContentInRect(_self: *@This(), _rect: foundation.Rect) void {
        return objc.msgSend(_self, "prepareContentInRect:", void, .{_rect});
    }

    pub fn viewDidChangeEffectiveAppearance(_self: *@This()) void {
        return objc.msgSend(_self, "viewDidChangeEffectiveAppearance", void, .{});
    }

    pub fn window(_self: *@This()) ?*app_kit.Window {
        return objc.msgSend(_self, "window", ?*app_kit.Window, .{});
    }

    pub fn superview(_self: *@This()) ?*app_kit.View {
        return objc.msgSend(_self, "superview", ?*app_kit.View, .{});
    }

    pub fn subviews(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "subviews", ?*anyopaque, .{});
    }

    pub fn setSubviews(_self: *@This(), _subviews: ?*anyopaque) void {
        return objc.msgSend(_self, "setSubviews:", void, .{_subviews});
    }

    pub fn opaqueAncestor(_self: *@This()) ?*app_kit.View {
        return objc.msgSend(_self, "opaqueAncestor", ?*app_kit.View, .{});
    }

    pub fn isHidden(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isHidden", objc.BOOL, .{});
    }

    pub fn setHidden(_self: *@This(), _hidden: objc.BOOL) void {
        return objc.msgSend(_self, "setHidden:", void, .{_hidden});
    }

    pub fn isHiddenOrHasHiddenAncestor(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isHiddenOrHasHiddenAncestor", objc.BOOL, .{});
    }

    pub fn wantsDefaultClipping(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "wantsDefaultClipping", objc.BOOL, .{});
    }

    pub fn postsFrameChangedNotifications(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "postsFrameChangedNotifications", objc.BOOL, .{});
    }

    pub fn setPostsFrameChangedNotifications(_self: *@This(), _postsFrameChangedNotifications: objc.BOOL) void {
        return objc.msgSend(_self, "setPostsFrameChangedNotifications:", void, .{_postsFrameChangedNotifications});
    }

    pub fn autoresizesSubviews(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "autoresizesSubviews", objc.BOOL, .{});
    }

    pub fn setAutoresizesSubviews(_self: *@This(), _autoresizesSubviews: objc.BOOL) void {
        return objc.msgSend(_self, "setAutoresizesSubviews:", void, .{_autoresizesSubviews});
    }

    pub fn autoresizingMask(_self: *@This()) app_kit.AutoresizingMaskOptions {
        return objc.msgSend(_self, "autoresizingMask", app_kit.AutoresizingMaskOptions, .{});
    }

    pub fn setAutoresizingMask(_self: *@This(), _autoresizingMask: app_kit.AutoresizingMaskOptions) void {
        return objc.msgSend(_self, "setAutoresizingMask:", void, .{_autoresizingMask});
    }

    pub fn frame(_self: *@This()) foundation.Rect {
        return objc.msgSend(_self, "frame", foundation.Rect, .{});
    }

    pub fn setFrame(_self: *@This(), _frame: foundation.Rect) void {
        return objc.msgSend(_self, "setFrame:", void, .{_frame});
    }

    pub fn frameRotation(_self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(_self, "frameRotation", core_foundation.CGFloat, .{});
    }

    pub fn setFrameRotation(_self: *@This(), _frameRotation: core_foundation.CGFloat) void {
        return objc.msgSend(_self, "setFrameRotation:", void, .{_frameRotation});
    }

    pub fn frameCenterRotation(_self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(_self, "frameCenterRotation", core_foundation.CGFloat, .{});
    }

    pub fn setFrameCenterRotation(_self: *@This(), _frameCenterRotation: core_foundation.CGFloat) void {
        return objc.msgSend(_self, "setFrameCenterRotation:", void, .{_frameCenterRotation});
    }

    pub fn boundsRotation(_self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(_self, "boundsRotation", core_foundation.CGFloat, .{});
    }

    pub fn setBoundsRotation(_self: *@This(), _boundsRotation: core_foundation.CGFloat) void {
        return objc.msgSend(_self, "setBoundsRotation:", void, .{_boundsRotation});
    }

    pub fn bounds(_self: *@This()) foundation.Rect {
        return objc.msgSend(_self, "bounds", foundation.Rect, .{});
    }

    pub fn setBounds(_self: *@This(), _bounds: foundation.Rect) void {
        return objc.msgSend(_self, "setBounds:", void, .{_bounds});
    }

    pub fn isFlipped(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isFlipped", objc.BOOL, .{});
    }

    pub fn isRotatedFromBase(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isRotatedFromBase", objc.BOOL, .{});
    }

    pub fn isRotatedOrScaledFromBase(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isRotatedOrScaledFromBase", objc.BOOL, .{});
    }

    pub fn isOpaque(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isOpaque", objc.BOOL, .{});
    }

    pub fn canDrawConcurrently(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "canDrawConcurrently", objc.BOOL, .{});
    }

    pub fn setCanDrawConcurrently(_self: *@This(), _canDrawConcurrently: objc.BOOL) void {
        return objc.msgSend(_self, "setCanDrawConcurrently:", void, .{_canDrawConcurrently});
    }

    pub fn canDraw(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "canDraw", objc.BOOL, .{});
    }

    pub fn needsDisplay(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "needsDisplay", objc.BOOL, .{});
    }

    pub fn setNeedsDisplay(_self: *@This(), _needsDisplay: objc.BOOL) void {
        return objc.msgSend(_self, "setNeedsDisplay:", void, .{_needsDisplay});
    }

    pub fn focusView() ?*app_kit.View {
        return objc.msgSend(Internal.class(), "focusView", ?*app_kit.View, .{});
    }

    pub fn visibleRect(_self: *@This()) foundation.Rect {
        return objc.msgSend(_self, "visibleRect", foundation.Rect, .{});
    }

    pub fn tag(_self: *@This()) objc.NSInteger {
        return objc.msgSend(_self, "tag", objc.NSInteger, .{});
    }

    pub fn needsPanelToBecomeKey(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "needsPanelToBecomeKey", objc.BOOL, .{});
    }

    pub fn mouseDownCanMoveWindow(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "mouseDownCanMoveWindow", objc.BOOL, .{});
    }

    pub fn acceptsTouchEvents(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "acceptsTouchEvents", objc.BOOL, .{});
    }

    pub fn setAcceptsTouchEvents(_self: *@This(), _acceptsTouchEvents: objc.BOOL) void {
        return objc.msgSend(_self, "setAcceptsTouchEvents:", void, .{_acceptsTouchEvents});
    }

    pub fn wantsRestingTouches(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "wantsRestingTouches", objc.BOOL, .{});
    }

    pub fn setWantsRestingTouches(_self: *@This(), _wantsRestingTouches: objc.BOOL) void {
        return objc.msgSend(_self, "setWantsRestingTouches:", void, .{_wantsRestingTouches});
    }

    pub fn layerContentsRedrawPolicy(_self: *@This()) app_kit.ViewLayerContentsRedrawPolicy {
        return objc.msgSend(_self, "layerContentsRedrawPolicy", app_kit.ViewLayerContentsRedrawPolicy, .{});
    }

    pub fn setLayerContentsRedrawPolicy(_self: *@This(), _layerContentsRedrawPolicy: app_kit.ViewLayerContentsRedrawPolicy) void {
        return objc.msgSend(_self, "setLayerContentsRedrawPolicy:", void, .{_layerContentsRedrawPolicy});
    }

    pub fn layerContentsPlacement(_self: *@This()) app_kit.ViewLayerContentsPlacement {
        return objc.msgSend(_self, "layerContentsPlacement", app_kit.ViewLayerContentsPlacement, .{});
    }

    pub fn setLayerContentsPlacement(_self: *@This(), _layerContentsPlacement: app_kit.ViewLayerContentsPlacement) void {
        return objc.msgSend(_self, "setLayerContentsPlacement:", void, .{_layerContentsPlacement});
    }

    pub fn wantsLayer(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "wantsLayer", objc.BOOL, .{});
    }

    pub fn setWantsLayer(_self: *@This(), _wantsLayer: objc.BOOL) void {
        return objc.msgSend(_self, "setWantsLayer:", void, .{_wantsLayer});
    }

    pub fn layer(_self: *@This()) ?*quartz_core.Layer {
        return objc.msgSend(_self, "layer", ?*quartz_core.Layer, .{});
    }

    pub fn setLayer(_self: *@This(), _layer: ?*quartz_core.Layer) void {
        return objc.msgSend(_self, "setLayer:", void, .{_layer});
    }

    pub fn wantsUpdateLayer(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "wantsUpdateLayer", objc.BOOL, .{});
    }

    pub fn canDrawSubviewsIntoLayer(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "canDrawSubviewsIntoLayer", objc.BOOL, .{});
    }

    pub fn setCanDrawSubviewsIntoLayer(_self: *@This(), _canDrawSubviewsIntoLayer: objc.BOOL) void {
        return objc.msgSend(_self, "setCanDrawSubviewsIntoLayer:", void, .{_canDrawSubviewsIntoLayer});
    }

    pub fn needsLayout(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "needsLayout", objc.BOOL, .{});
    }

    pub fn setNeedsLayout(_self: *@This(), _needsLayout: objc.BOOL) void {
        return objc.msgSend(_self, "setNeedsLayout:", void, .{_needsLayout});
    }

    pub fn alphaValue(_self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(_self, "alphaValue", core_foundation.CGFloat, .{});
    }

    pub fn setAlphaValue(_self: *@This(), _alphaValue: core_foundation.CGFloat) void {
        return objc.msgSend(_self, "setAlphaValue:", void, .{_alphaValue});
    }

    pub fn layerUsesCoreImageFilters(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "layerUsesCoreImageFilters", objc.BOOL, .{});
    }

    pub fn setLayerUsesCoreImageFilters(_self: *@This(), _layerUsesCoreImageFilters: objc.BOOL) void {
        return objc.msgSend(_self, "setLayerUsesCoreImageFilters:", void, .{_layerUsesCoreImageFilters});
    }

    pub fn backgroundFilters(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "backgroundFilters", ?*anyopaque, .{});
    }

    pub fn setBackgroundFilters(_self: *@This(), _backgroundFilters: ?*anyopaque) void {
        return objc.msgSend(_self, "setBackgroundFilters:", void, .{_backgroundFilters});
    }

    pub fn compositingFilter(_self: *@This()) ?*core_image.Filter {
        return objc.msgSend(_self, "compositingFilter", ?*core_image.Filter, .{});
    }

    pub fn setCompositingFilter(_self: *@This(), _compositingFilter: ?*core_image.Filter) void {
        return objc.msgSend(_self, "setCompositingFilter:", void, .{_compositingFilter});
    }

    pub fn contentFilters(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "contentFilters", ?*anyopaque, .{});
    }

    pub fn setContentFilters(_self: *@This(), _contentFilters: ?*anyopaque) void {
        return objc.msgSend(_self, "setContentFilters:", void, .{_contentFilters});
    }

    pub fn shadow(_self: *@This()) ?*app_kit.Shadow {
        return objc.msgSend(_self, "shadow", ?*app_kit.Shadow, .{});
    }

    pub fn setShadow(_self: *@This(), _shadow: ?*app_kit.Shadow) void {
        return objc.msgSend(_self, "setShadow:", void, .{_shadow});
    }

    pub fn clipsToBounds(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "clipsToBounds", objc.BOOL, .{});
    }

    pub fn setClipsToBounds(_self: *@This(), _clipsToBounds: objc.BOOL) void {
        return objc.msgSend(_self, "setClipsToBounds:", void, .{_clipsToBounds});
    }

    pub fn postsBoundsChangedNotifications(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "postsBoundsChangedNotifications", objc.BOOL, .{});
    }

    pub fn setPostsBoundsChangedNotifications(_self: *@This(), _postsBoundsChangedNotifications: objc.BOOL) void {
        return objc.msgSend(_self, "setPostsBoundsChangedNotifications:", void, .{_postsBoundsChangedNotifications});
    }

    pub fn enclosingScrollView(_self: *@This()) ?*app_kit.ScrollView {
        return objc.msgSend(_self, "enclosingScrollView", ?*app_kit.ScrollView, .{});
    }

    pub fn defaultMenu() ?*app_kit.Menu {
        return objc.msgSend(Internal.class(), "defaultMenu", ?*app_kit.Menu, .{});
    }

    pub fn toolTip(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "toolTip", ?*foundation.String, .{});
    }

    pub fn setToolTip(_self: *@This(), _toolTip: ?*foundation.String) void {
        return objc.msgSend(_self, "setToolTip:", void, .{_toolTip});
    }

    pub fn inLiveResize(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "inLiveResize", objc.BOOL, .{});
    }

    pub fn preservesContentDuringLiveResize(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "preservesContentDuringLiveResize", objc.BOOL, .{});
    }

    pub fn rectPreservedDuringLiveResize(_self: *@This()) foundation.Rect {
        return objc.msgSend(_self, "rectPreservedDuringLiveResize", foundation.Rect, .{});
    }

    pub fn inputContext(_self: *@This()) ?*app_kit.TextInputContext {
        return objc.msgSend(_self, "inputContext", ?*app_kit.TextInputContext, .{});
    }

    pub fn userInterfaceLayoutDirection(_self: *@This()) app_kit.UserInterfaceLayoutDirection {
        return objc.msgSend(_self, "userInterfaceLayoutDirection", app_kit.UserInterfaceLayoutDirection, .{});
    }

    pub fn setUserInterfaceLayoutDirection(_self: *@This(), _userInterfaceLayoutDirection: app_kit.UserInterfaceLayoutDirection) void {
        return objc.msgSend(_self, "setUserInterfaceLayoutDirection:", void, .{_userInterfaceLayoutDirection});
    }

    pub fn isCompatibleWithResponsiveScrolling() objc.BOOL {
        return objc.msgSend(Internal.class(), "isCompatibleWithResponsiveScrolling", objc.BOOL, .{});
    }

    pub fn preparedContentRect(_self: *@This()) foundation.Rect {
        return objc.msgSend(_self, "preparedContentRect", foundation.Rect, .{});
    }

    pub fn setPreparedContentRect(_self: *@This(), _preparedContentRect: foundation.Rect) void {
        return objc.msgSend(_self, "setPreparedContentRect:", void, .{_preparedContentRect});
    }

    pub fn allowsVibrancy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsVibrancy", objc.BOOL, .{});
    }

    pub fn zoomControlWithMapView(_mapView: ?*MapView) *@This() {
        return objc.msgSend(Internal.class(), "zoomControlWithMapView:", *@This(), .{_mapView});
    }

    pub fn mapView(_self: *@This()) ?*MapView {
        return objc.msgSend(_self, "mapView", ?*MapView, .{});
    }

    pub fn setMapView(_self: *@This(), _mapView: ?*MapView) void {
        return objc.msgSend(_self, "setMapView:", void, .{_mapView});
    }
};

pub const MapElevationStyle = objc.NSInteger;
pub const MapElevationStyle_Flat: objc.NSInteger = 0;
pub const MapElevationStyle_Realistic: objc.NSInteger = 1;

/// https://developer.apple.com/documentation/MapKit/MKMapConfiguration?language=objc
pub const MapConfiguration = opaque {
    pub const Internal = objc.ExternClass("MKMapConfiguration", @This(), objc.NSObject, &.{ foundation.SecureCoding, foundation.Copying });
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "description", ?*foundation.String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "debugDescription", ?*foundation.String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*foundation.Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*foundation.MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*foundation.MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*foundation.MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*foundation.MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*foundation.Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*foundation.Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn supportsSecureCoding() objc.BOOL {
        return objc.msgSend(Internal.class(), "supportsSecureCoding", objc.BOOL, .{});
    }

    pub fn elevationStyle(_self: *@This()) MapElevationStyle {
        return objc.msgSend(_self, "elevationStyle", MapElevationStyle, .{});
    }

    pub fn setElevationStyle(_self: *@This(), _elevationStyle: MapElevationStyle) void {
        return objc.msgSend(_self, "setElevationStyle:", void, .{_elevationStyle});
    }
};

/// https://developer.apple.com/documentation/MapKit/MKHybridMapConfiguration?language=objc
pub const HybridMapConfiguration = opaque {
    pub const Internal = objc.ExternClass("MKHybridMapConfiguration", @This(), MapConfiguration, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "description", ?*foundation.String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "debugDescription", ?*foundation.String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*foundation.Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*foundation.MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*foundation.MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*foundation.MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*foundation.MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*foundation.Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*foundation.Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn supportsSecureCoding() objc.BOOL {
        return objc.msgSend(Internal.class(), "supportsSecureCoding", objc.BOOL, .{});
    }

    pub fn elevationStyle(_self: *@This()) MapElevationStyle {
        return objc.msgSend(_self, "elevationStyle", MapElevationStyle, .{});
    }

    pub fn setElevationStyle(_self: *@This(), _elevationStyle: MapElevationStyle) void {
        return objc.msgSend(_self, "setElevationStyle:", void, .{_elevationStyle});
    }

    pub fn initWithElevationStyle(_self: *@This(), _elevationStyle: MapElevationStyle) *@This() {
        return objc.msgSend(_self, "initWithElevationStyle:", *@This(), .{_elevationStyle});
    }

    pub fn pointOfInterestFilter(_self: *@This()) ?*PointOfInterestFilter {
        return objc.msgSend(_self, "pointOfInterestFilter", ?*PointOfInterestFilter, .{});
    }

    pub fn setPointOfInterestFilter(_self: *@This(), _pointOfInterestFilter: ?*PointOfInterestFilter) void {
        return objc.msgSend(_self, "setPointOfInterestFilter:", void, .{_pointOfInterestFilter});
    }

    pub fn showsTraffic(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "showsTraffic", objc.BOOL, .{});
    }

    pub fn setShowsTraffic(_self: *@This(), _showsTraffic: objc.BOOL) void {
        return objc.msgSend(_self, "setShowsTraffic:", void, .{_showsTraffic});
    }
};

/// https://developer.apple.com/documentation/MapKit/MKImageryMapConfiguration?language=objc
pub const ImageryMapConfiguration = opaque {
    pub const Internal = objc.ExternClass("MKImageryMapConfiguration", @This(), MapConfiguration, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "description", ?*foundation.String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "debugDescription", ?*foundation.String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*foundation.Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*foundation.MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*foundation.MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*foundation.MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*foundation.MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*foundation.Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*foundation.Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn supportsSecureCoding() objc.BOOL {
        return objc.msgSend(Internal.class(), "supportsSecureCoding", objc.BOOL, .{});
    }

    pub fn elevationStyle(_self: *@This()) MapElevationStyle {
        return objc.msgSend(_self, "elevationStyle", MapElevationStyle, .{});
    }

    pub fn setElevationStyle(_self: *@This(), _elevationStyle: MapElevationStyle) void {
        return objc.msgSend(_self, "setElevationStyle:", void, .{_elevationStyle});
    }

    pub fn initWithElevationStyle(_self: *@This(), _elevationStyle: MapElevationStyle) *@This() {
        return objc.msgSend(_self, "initWithElevationStyle:", *@This(), .{_elevationStyle});
    }
};

pub const StandardMapEmphasisStyle = objc.NSInteger;
pub const StandardMapEmphasisStyle_Default: objc.NSInteger = 0;
pub const StandardMapEmphasisStyle_Muted: objc.NSInteger = 1;

/// https://developer.apple.com/documentation/MapKit/MKStandardMapConfiguration?language=objc
pub const StandardMapConfiguration = opaque {
    pub const Internal = objc.ExternClass("MKStandardMapConfiguration", @This(), MapConfiguration, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "description", ?*foundation.String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "debugDescription", ?*foundation.String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*foundation.Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*foundation.MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*foundation.MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*foundation.MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*foundation.MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*foundation.Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*foundation.Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn supportsSecureCoding() objc.BOOL {
        return objc.msgSend(Internal.class(), "supportsSecureCoding", objc.BOOL, .{});
    }

    pub fn elevationStyle(_self: *@This()) MapElevationStyle {
        return objc.msgSend(_self, "elevationStyle", MapElevationStyle, .{});
    }

    pub fn setElevationStyle(_self: *@This(), _elevationStyle: MapElevationStyle) void {
        return objc.msgSend(_self, "setElevationStyle:", void, .{_elevationStyle});
    }

    pub fn initWithElevationStyle(_self: *@This(), _elevationStyle: MapElevationStyle) *@This() {
        return objc.msgSend(_self, "initWithElevationStyle:", *@This(), .{_elevationStyle});
    }

    pub fn initWithElevationStyleEmphasisStyle(_self: *@This(), _elevationStyle: MapElevationStyle, _emphasisStyle: StandardMapEmphasisStyle) *@This() {
        return objc.msgSend(_self, "initWithElevationStyle:emphasisStyle:", *@This(), .{ _elevationStyle, _emphasisStyle });
    }

    pub fn initWithEmphasisStyle(_self: *@This(), _emphasisStyle: StandardMapEmphasisStyle) *@This() {
        return objc.msgSend(_self, "initWithEmphasisStyle:", *@This(), .{_emphasisStyle});
    }

    pub fn emphasisStyle(_self: *@This()) StandardMapEmphasisStyle {
        return objc.msgSend(_self, "emphasisStyle", StandardMapEmphasisStyle, .{});
    }

    pub fn setEmphasisStyle(_self: *@This(), _emphasisStyle: StandardMapEmphasisStyle) void {
        return objc.msgSend(_self, "setEmphasisStyle:", void, .{_emphasisStyle});
    }

    pub fn pointOfInterestFilter(_self: *@This()) ?*PointOfInterestFilter {
        return objc.msgSend(_self, "pointOfInterestFilter", ?*PointOfInterestFilter, .{});
    }

    pub fn setPointOfInterestFilter(_self: *@This(), _pointOfInterestFilter: ?*PointOfInterestFilter) void {
        return objc.msgSend(_self, "setPointOfInterestFilter:", void, .{_pointOfInterestFilter});
    }

    pub fn showsTraffic(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "showsTraffic", objc.BOOL, .{});
    }

    pub fn setShowsTraffic(_self: *@This(), _showsTraffic: objc.BOOL) void {
        return objc.msgSend(_self, "setShowsTraffic:", void, .{_showsTraffic});
    }
};

/// https://developer.apple.com/documentation/MapKit/MKLookAroundScene?language=objc
pub const LookAroundScene = opaque {
    pub const Internal = objc.ExternClass("MKLookAroundScene", @This(), objc.NSObject, &.{foundation.Copying});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "description", ?*foundation.String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "debugDescription", ?*foundation.String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*foundation.Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*foundation.MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*foundation.MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*foundation.MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*foundation.MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }
};

/// https://developer.apple.com/documentation/MapKit/MKLookAroundSceneRequest?language=objc
pub const LookAroundSceneRequest = opaque {
    pub const Internal = objc.ExternClass("MKLookAroundSceneRequest", @This(), objc.NSObject, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "description", ?*foundation.String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "debugDescription", ?*foundation.String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*foundation.Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*foundation.MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*foundation.MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*foundation.MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*foundation.MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn initWithCoordinate(_self: *@This(), _coordinate: core_location.LocationCoordinate2D) *@This() {
        return objc.msgSend(_self, "initWithCoordinate:", *@This(), .{_coordinate});
    }

    pub fn initWithMapItem(_self: *@This(), _mapItem: ?*MapItem) *@This() {
        return objc.msgSend(_self, "initWithMapItem:", *@This(), .{_mapItem});
    }

    pub fn getSceneWithCompletionHandler(_self: *@This(), _completionHandler: *const fn (?*LookAroundScene, ?*foundation.Error) callconv(.C) void) void {
        return objc.msgSend(_self, "getSceneWithCompletionHandler:", void, .{_completionHandler});
    }

    pub fn cancel(_self: *@This()) void {
        return objc.msgSend(_self, "cancel", void, .{});
    }

    pub fn coordinate(_self: *@This()) core_location.LocationCoordinate2D {
        return objc.msgSend(_self, "coordinate", core_location.LocationCoordinate2D, .{});
    }

    pub fn mapItem(_self: *@This()) ?*MapItem {
        return objc.msgSend(_self, "mapItem", ?*MapItem, .{});
    }

    pub fn isCancelled(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isCancelled", objc.BOOL, .{});
    }

    pub fn isLoading(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isLoading", objc.BOOL, .{});
    }
};

/// https://developer.apple.com/documentation/MapKit/MKLookAroundSnapshot?language=objc
pub const LookAroundSnapshot = opaque {
    pub const Internal = objc.ExternClass("MKLookAroundSnapshot", @This(), objc.NSObject, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "description", ?*foundation.String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "debugDescription", ?*foundation.String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*foundation.Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*foundation.MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*foundation.MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*foundation.MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*foundation.MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn image(_self: *@This()) ?*app_kit.Image {
        return objc.msgSend(_self, "image", ?*app_kit.Image, .{});
    }
};

/// https://developer.apple.com/documentation/MapKit/MKLookAroundSnapshotOptions?language=objc
pub const LookAroundSnapshotOptions = opaque {
    pub const Internal = objc.ExternClass("MKLookAroundSnapshotOptions", @This(), objc.NSObject, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "description", ?*foundation.String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "debugDescription", ?*foundation.String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*foundation.Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*foundation.MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*foundation.MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*foundation.MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*foundation.MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn pointOfInterestFilter(_self: *@This()) ?*PointOfInterestFilter {
        return objc.msgSend(_self, "pointOfInterestFilter", ?*PointOfInterestFilter, .{});
    }

    pub fn setPointOfInterestFilter(_self: *@This(), _pointOfInterestFilter: ?*PointOfInterestFilter) void {
        return objc.msgSend(_self, "setPointOfInterestFilter:", void, .{_pointOfInterestFilter});
    }

    pub fn size(_self: *@This()) core_foundation.CGSize {
        return objc.msgSend(_self, "size", core_foundation.CGSize, .{});
    }

    pub fn setSize(_self: *@This(), _size: core_foundation.CGSize) void {
        return objc.msgSend(_self, "setSize:", void, .{_size});
    }
};

/// https://developer.apple.com/documentation/MapKit/MKLookAroundSnapshotter?language=objc
pub const LookAroundSnapshotter = opaque {
    pub const Internal = objc.ExternClass("MKLookAroundSnapshotter", @This(), objc.NSObject, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "description", ?*foundation.String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "debugDescription", ?*foundation.String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*foundation.Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*foundation.MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*foundation.MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*foundation.MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*foundation.MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn initWithSceneOptions(_self: *@This(), _scene: ?*LookAroundScene, _options: ?*LookAroundSnapshotOptions) *@This() {
        return objc.msgSend(_self, "initWithScene:options:", *@This(), .{ _scene, _options });
    }

    pub fn getSnapshotWithCompletionHandler(_self: *@This(), _completionHandler: *const fn (?*LookAroundSnapshot, ?*foundation.Error) callconv(.C) void) void {
        return objc.msgSend(_self, "getSnapshotWithCompletionHandler:", void, .{_completionHandler});
    }

    pub fn cancel(_self: *@This()) void {
        return objc.msgSend(_self, "cancel", void, .{});
    }

    pub fn isLoading(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isLoading", objc.BOOL, .{});
    }
};

pub const LookAroundBadgePosition = objc.NSInteger;
pub const LookAroundBadgePosition_TopLeading: objc.NSInteger = 0;
pub const LookAroundBadgePosition_TopTrailing: objc.NSInteger = 1;
pub const LookAroundBadgePosition_BottomTrailing: objc.NSInteger = 2;

/// https://developer.apple.com/documentation/MapKit/MKLookAroundViewController?language=objc
pub const LookAroundViewController = opaque {
    pub const Internal = objc.ExternClass("MKLookAroundViewController", @This(), app_kit.ViewController, &.{ foundation.SecureCoding, foundation.Coding });
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "description", ?*foundation.String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "debugDescription", ?*foundation.String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*foundation.Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*foundation.MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*foundation.MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*foundation.MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*foundation.MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*foundation.Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*foundation.Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn tryToPerformWith(_self: *@This(), _action: objc.Selector, _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "tryToPerform:with:", objc.BOOL, .{ _action, _object });
    }

    pub fn performKeyEquivalent(_self: *@This(), _event: ?*app_kit.Event) objc.BOOL {
        return objc.msgSend(_self, "performKeyEquivalent:", objc.BOOL, .{_event});
    }

    pub fn validRequestorForSendTypeReturnType(_self: *@This(), _sendType: app_kit.PasteboardType, _returnType: app_kit.PasteboardType) ?objc.Id {
        return objc.msgSend(_self, "validRequestorForSendType:returnType:", ?objc.Id, .{ _sendType, _returnType });
    }

    pub fn mouseDown(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "mouseDown:", void, .{_event});
    }

    pub fn rightMouseDown(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "rightMouseDown:", void, .{_event});
    }

    pub fn otherMouseDown(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "otherMouseDown:", void, .{_event});
    }

    pub fn mouseUp(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "mouseUp:", void, .{_event});
    }

    pub fn rightMouseUp(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "rightMouseUp:", void, .{_event});
    }

    pub fn otherMouseUp(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "otherMouseUp:", void, .{_event});
    }

    pub fn mouseMoved(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "mouseMoved:", void, .{_event});
    }

    pub fn mouseDragged(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "mouseDragged:", void, .{_event});
    }

    pub fn scrollWheel(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "scrollWheel:", void, .{_event});
    }

    pub fn rightMouseDragged(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "rightMouseDragged:", void, .{_event});
    }

    pub fn otherMouseDragged(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "otherMouseDragged:", void, .{_event});
    }

    pub fn mouseEntered(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "mouseEntered:", void, .{_event});
    }

    pub fn mouseExited(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "mouseExited:", void, .{_event});
    }

    pub fn keyDown(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "keyDown:", void, .{_event});
    }

    pub fn keyUp(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "keyUp:", void, .{_event});
    }

    pub fn flagsChanged(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "flagsChanged:", void, .{_event});
    }

    pub fn tabletPoint(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "tabletPoint:", void, .{_event});
    }

    pub fn tabletProximity(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "tabletProximity:", void, .{_event});
    }

    pub fn cursorUpdate(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "cursorUpdate:", void, .{_event});
    }

    pub fn magnifyWithEvent(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "magnifyWithEvent:", void, .{_event});
    }

    pub fn rotateWithEvent(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "rotateWithEvent:", void, .{_event});
    }

    pub fn swipeWithEvent(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "swipeWithEvent:", void, .{_event});
    }

    pub fn beginGestureWithEvent(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "beginGestureWithEvent:", void, .{_event});
    }

    pub fn endGestureWithEvent(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "endGestureWithEvent:", void, .{_event});
    }

    pub fn smartMagnifyWithEvent(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "smartMagnifyWithEvent:", void, .{_event});
    }

    pub fn changeModeWithEvent(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "changeModeWithEvent:", void, .{_event});
    }

    pub fn touchesBeganWithEvent(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "touchesBeganWithEvent:", void, .{_event});
    }

    pub fn touchesMovedWithEvent(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "touchesMovedWithEvent:", void, .{_event});
    }

    pub fn touchesEndedWithEvent(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "touchesEndedWithEvent:", void, .{_event});
    }

    pub fn touchesCancelledWithEvent(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "touchesCancelledWithEvent:", void, .{_event});
    }

    pub fn quickLookWithEvent(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "quickLookWithEvent:", void, .{_event});
    }

    pub fn pressureChangeWithEvent(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "pressureChangeWithEvent:", void, .{_event});
    }

    pub fn contextMenuKeyDown(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "contextMenuKeyDown:", void, .{_event});
    }

    pub fn noResponderFor(_self: *@This(), _eventSelector: objc.Selector) void {
        return objc.msgSend(_self, "noResponderFor:", void, .{_eventSelector});
    }

    pub fn becomeFirstResponder(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "becomeFirstResponder", objc.BOOL, .{});
    }

    pub fn resignFirstResponder(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "resignFirstResponder", objc.BOOL, .{});
    }

    pub fn interpretKeyEvents(_self: *@This(), _eventArray: ?*anyopaque) void {
        return objc.msgSend(_self, "interpretKeyEvents:", void, .{_eventArray});
    }

    pub fn flushBufferedKeyEvents(_self: *@This()) void {
        return objc.msgSend(_self, "flushBufferedKeyEvents", void, .{});
    }

    pub fn showContextHelp(_self: *@This(), _sender: ?objc.Id) void {
        return objc.msgSend(_self, "showContextHelp:", void, .{_sender});
    }

    pub fn helpRequested(_self: *@This(), _eventPtr: ?*app_kit.Event) void {
        return objc.msgSend(_self, "helpRequested:", void, .{_eventPtr});
    }

    pub fn shouldBeTreatedAsInkEvent(_self: *@This(), _event: ?*app_kit.Event) objc.BOOL {
        return objc.msgSend(_self, "shouldBeTreatedAsInkEvent:", objc.BOOL, .{_event});
    }

    pub fn wantsScrollEventsForSwipeTrackingOnAxis(_self: *@This(), _axis: app_kit.EventGestureAxis) objc.BOOL {
        return objc.msgSend(_self, "wantsScrollEventsForSwipeTrackingOnAxis:", objc.BOOL, .{_axis});
    }

    pub fn wantsForwardedScrollEventsForAxis(_self: *@This(), _axis: app_kit.EventGestureAxis) objc.BOOL {
        return objc.msgSend(_self, "wantsForwardedScrollEventsForAxis:", objc.BOOL, .{_axis});
    }

    pub fn supplementalTargetForActionSender(_self: *@This(), _action: objc.Selector, _sender: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "supplementalTargetForAction:sender:", ?objc.Id, .{ _action, _sender });
    }

    pub fn nextResponder(_self: *@This()) ?*app_kit.Responder {
        return objc.msgSend(_self, "nextResponder", ?*app_kit.Responder, .{});
    }

    pub fn setNextResponder(_self: *@This(), _nextResponder: ?*app_kit.Responder) void {
        return objc.msgSend(_self, "setNextResponder:", void, .{_nextResponder});
    }

    pub fn acceptsFirstResponder(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "acceptsFirstResponder", objc.BOOL, .{});
    }

    pub fn menu(_self: *@This()) ?*app_kit.Menu {
        return objc.msgSend(_self, "menu", ?*app_kit.Menu, .{});
    }

    pub fn setMenu(_self: *@This(), _menu: ?*app_kit.Menu) void {
        return objc.msgSend(_self, "setMenu:", void, .{_menu});
    }

    pub fn discardEditing(_self: *@This()) void {
        return objc.msgSend(_self, "discardEditing", void, .{});
    }

    pub fn commitEditing(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "commitEditing", objc.BOOL, .{});
    }

    pub fn commitEditingWithDelegateDidCommitSelectorContextInfo(_self: *@This(), _delegate: ?objc.Id, _didCommitSelector: objc.Selector, _contextInfo: ?*anyopaque) void {
        return objc.msgSend(_self, "commitEditingWithDelegate:didCommitSelector:contextInfo:", void, .{ _delegate, _didCommitSelector, _contextInfo });
    }

    pub fn commitEditingAndReturnError(_self: *@This(), _error: ?*?*foundation.Error) objc.BOOL {
        return objc.msgSend(_self, "commitEditingAndReturnError:", objc.BOOL, .{_error});
    }

    pub fn prepareForSegueSender(_self: *@This(), _segue: ?*app_kit.StoryboardSegue, _sender: ?objc.Id) void {
        return objc.msgSend(_self, "prepareForSegue:sender:", void, .{ _segue, _sender });
    }

    pub fn performSegueWithIdentifierSender(_self: *@This(), _identifier: app_kit.StoryboardSegueIdentifier, _sender: ?objc.Id) void {
        return objc.msgSend(_self, "performSegueWithIdentifier:sender:", void, .{ _identifier, _sender });
    }

    pub fn shouldPerformSegueWithIdentifierSender(_self: *@This(), _identifier: app_kit.StoryboardSegueIdentifier, _sender: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "shouldPerformSegueWithIdentifier:sender:", objc.BOOL, .{ _identifier, _sender });
    }

    pub fn identifier(_self: *@This()) app_kit.UserInterfaceItemIdentifier {
        return objc.msgSend(_self, "identifier", app_kit.UserInterfaceItemIdentifier, .{});
    }

    pub fn setIdentifier(_self: *@This(), _identifier: app_kit.UserInterfaceItemIdentifier) void {
        return objc.msgSend(_self, "setIdentifier:", void, .{_identifier});
    }

    pub fn initWithNibNameBundle(_self: *@This(), _nibNameOrNil: app_kit.NibName, _nibBundleOrNil: ?*foundation.Bundle) *@This() {
        return objc.msgSend(_self, "initWithNibName:bundle:", *@This(), .{ _nibNameOrNil, _nibBundleOrNil });
    }

    pub fn loadView(_self: *@This()) void {
        return objc.msgSend(_self, "loadView", void, .{});
    }

    pub fn loadViewIfNeeded(_self: *@This()) void {
        return objc.msgSend(_self, "loadViewIfNeeded", void, .{});
    }

    pub fn viewDidLoad(_self: *@This()) void {
        return objc.msgSend(_self, "viewDidLoad", void, .{});
    }

    pub fn viewWillAppear(_self: *@This()) void {
        return objc.msgSend(_self, "viewWillAppear", void, .{});
    }

    pub fn viewDidAppear(_self: *@This()) void {
        return objc.msgSend(_self, "viewDidAppear", void, .{});
    }

    pub fn viewWillDisappear(_self: *@This()) void {
        return objc.msgSend(_self, "viewWillDisappear", void, .{});
    }

    pub fn viewDidDisappear(_self: *@This()) void {
        return objc.msgSend(_self, "viewDidDisappear", void, .{});
    }

    pub fn updateViewConstraints(_self: *@This()) void {
        return objc.msgSend(_self, "updateViewConstraints", void, .{});
    }

    pub fn viewWillLayout(_self: *@This()) void {
        return objc.msgSend(_self, "viewWillLayout", void, .{});
    }

    pub fn viewDidLayout(_self: *@This()) void {
        return objc.msgSend(_self, "viewDidLayout", void, .{});
    }

    pub fn nibName(_self: *@This()) app_kit.NibName {
        return objc.msgSend(_self, "nibName", app_kit.NibName, .{});
    }

    pub fn nibBundle(_self: *@This()) ?*foundation.Bundle {
        return objc.msgSend(_self, "nibBundle", ?*foundation.Bundle, .{});
    }

    pub fn representedObject(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "representedObject", ?objc.Id, .{});
    }

    pub fn setRepresentedObject(_self: *@This(), _representedObject: ?objc.Id) void {
        return objc.msgSend(_self, "setRepresentedObject:", void, .{_representedObject});
    }

    pub fn title(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "title", ?*foundation.String, .{});
    }

    pub fn setTitle(_self: *@This(), _title: ?*foundation.String) void {
        return objc.msgSend(_self, "setTitle:", void, .{_title});
    }

    pub fn view(_self: *@This()) ?*app_kit.View {
        return objc.msgSend(_self, "view", ?*app_kit.View, .{});
    }

    pub fn setView(_self: *@This(), _view: ?*app_kit.View) void {
        return objc.msgSend(_self, "setView:", void, .{_view});
    }

    pub fn viewIfLoaded(_self: *@This()) ?*app_kit.View {
        return objc.msgSend(_self, "viewIfLoaded", ?*app_kit.View, .{});
    }

    pub fn isViewLoaded(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isViewLoaded", objc.BOOL, .{});
    }

    pub fn preferredContentSize(_self: *@This()) foundation.Size {
        return objc.msgSend(_self, "preferredContentSize", foundation.Size, .{});
    }

    pub fn setPreferredContentSize(_self: *@This(), _preferredContentSize: foundation.Size) void {
        return objc.msgSend(_self, "setPreferredContentSize:", void, .{_preferredContentSize});
    }

    pub fn supportsSecureCoding() objc.BOOL {
        return objc.msgSend(Internal.class(), "supportsSecureCoding", objc.BOOL, .{});
    }

    pub fn initWithScene(_self: *@This(), _scene: ?*LookAroundScene) *@This() {
        return objc.msgSend(_self, "initWithScene:", *@This(), .{_scene});
    }

    pub fn delegate(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "delegate", ?*anyopaque, .{});
    }

    pub fn setDelegate(_self: *@This(), _delegate: ?*anyopaque) void {
        return objc.msgSend(_self, "setDelegate:", void, .{_delegate});
    }

    pub fn scene(_self: *@This()) ?*LookAroundScene {
        return objc.msgSend(_self, "scene", ?*LookAroundScene, .{});
    }

    pub fn setScene(_self: *@This(), _scene: ?*LookAroundScene) void {
        return objc.msgSend(_self, "setScene:", void, .{_scene});
    }

    pub fn isNavigationEnabled(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isNavigationEnabled", objc.BOOL, .{});
    }

    pub fn setNavigationEnabled(_self: *@This(), _navigationEnabled: objc.BOOL) void {
        return objc.msgSend(_self, "setNavigationEnabled:", void, .{_navigationEnabled});
    }

    pub fn showsRoadLabels(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "showsRoadLabels", objc.BOOL, .{});
    }

    pub fn setShowsRoadLabels(_self: *@This(), _showsRoadLabels: objc.BOOL) void {
        return objc.msgSend(_self, "setShowsRoadLabels:", void, .{_showsRoadLabels});
    }

    pub fn pointOfInterestFilter(_self: *@This()) ?*PointOfInterestFilter {
        return objc.msgSend(_self, "pointOfInterestFilter", ?*PointOfInterestFilter, .{});
    }

    pub fn setPointOfInterestFilter(_self: *@This(), _pointOfInterestFilter: ?*PointOfInterestFilter) void {
        return objc.msgSend(_self, "setPointOfInterestFilter:", void, .{_pointOfInterestFilter});
    }

    pub fn badgePosition(_self: *@This()) LookAroundBadgePosition {
        return objc.msgSend(_self, "badgePosition", LookAroundBadgePosition, .{});
    }

    pub fn setBadgePosition(_self: *@This(), _badgePosition: LookAroundBadgePosition) void {
        return objc.msgSend(_self, "setBadgePosition:", void, .{_badgePosition});
    }
};

/// https://developer.apple.com/documentation/MapKit/MKLookAroundViewControllerDelegate?language=objc
pub const LookAroundViewControllerDelegate = opaque {
    pub const Internal = objc.ExternProtocol(@This(), &.{objc.NSObject});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "description", ?*foundation.String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "debugDescription", ?*foundation.String, .{});
    }

    pub fn lookAroundViewControllerWillUpdateScene(_self: *@This(), _viewController: ?*LookAroundViewController) void {
        return objc.msgSend(_self, "lookAroundViewControllerWillUpdateScene:", void, .{_viewController});
    }

    pub fn lookAroundViewControllerDidUpdateScene(_self: *@This(), _viewController: ?*LookAroundViewController) void {
        return objc.msgSend(_self, "lookAroundViewControllerDidUpdateScene:", void, .{_viewController});
    }

    pub fn lookAroundViewControllerWillPresentFullScreen(_self: *@This(), _viewController: ?*LookAroundViewController) void {
        return objc.msgSend(_self, "lookAroundViewControllerWillPresentFullScreen:", void, .{_viewController});
    }

    pub fn lookAroundViewControllerDidPresentFullScreen(_self: *@This(), _viewController: ?*LookAroundViewController) void {
        return objc.msgSend(_self, "lookAroundViewControllerDidPresentFullScreen:", void, .{_viewController});
    }

    pub fn lookAroundViewControllerWillDismissFullScreen(_self: *@This(), _viewController: ?*LookAroundViewController) void {
        return objc.msgSend(_self, "lookAroundViewControllerWillDismissFullScreen:", void, .{_viewController});
    }

    pub fn lookAroundViewControllerDidDismissFullScreen(_self: *@This(), _viewController: ?*LookAroundViewController) void {
        return objc.msgSend(_self, "lookAroundViewControllerDidDismissFullScreen:", void, .{_viewController});
    }
};

/// https://developer.apple.com/documentation/MapKit/MKMapItemDetailViewControllerDelegate?language=objc
pub const MapItemDetailViewControllerDelegate = opaque {
    pub const Internal = objc.ExternProtocol(@This(), &.{objc.NSObject});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "description", ?*foundation.String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "debugDescription", ?*foundation.String, .{});
    }

    pub fn mapItemDetailViewControllerDidFinish(_self: *@This(), _detailViewController: ?*MapItemDetailViewController) void {
        return objc.msgSend(_self, "mapItemDetailViewControllerDidFinish:", void, .{_detailViewController});
    }
};

/// https://developer.apple.com/documentation/MapKit/MKMapItemDetailViewController?language=objc
pub const MapItemDetailViewController = opaque {
    pub const Internal = objc.ExternClass("MKMapItemDetailViewController", @This(), app_kit.ViewController, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "description", ?*foundation.String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "debugDescription", ?*foundation.String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*foundation.Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*foundation.MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*foundation.MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*foundation.MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*foundation.MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*foundation.Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*foundation.Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn tryToPerformWith(_self: *@This(), _action: objc.Selector, _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "tryToPerform:with:", objc.BOOL, .{ _action, _object });
    }

    pub fn performKeyEquivalent(_self: *@This(), _event: ?*app_kit.Event) objc.BOOL {
        return objc.msgSend(_self, "performKeyEquivalent:", objc.BOOL, .{_event});
    }

    pub fn validRequestorForSendTypeReturnType(_self: *@This(), _sendType: app_kit.PasteboardType, _returnType: app_kit.PasteboardType) ?objc.Id {
        return objc.msgSend(_self, "validRequestorForSendType:returnType:", ?objc.Id, .{ _sendType, _returnType });
    }

    pub fn mouseDown(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "mouseDown:", void, .{_event});
    }

    pub fn rightMouseDown(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "rightMouseDown:", void, .{_event});
    }

    pub fn otherMouseDown(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "otherMouseDown:", void, .{_event});
    }

    pub fn mouseUp(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "mouseUp:", void, .{_event});
    }

    pub fn rightMouseUp(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "rightMouseUp:", void, .{_event});
    }

    pub fn otherMouseUp(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "otherMouseUp:", void, .{_event});
    }

    pub fn mouseMoved(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "mouseMoved:", void, .{_event});
    }

    pub fn mouseDragged(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "mouseDragged:", void, .{_event});
    }

    pub fn scrollWheel(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "scrollWheel:", void, .{_event});
    }

    pub fn rightMouseDragged(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "rightMouseDragged:", void, .{_event});
    }

    pub fn otherMouseDragged(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "otherMouseDragged:", void, .{_event});
    }

    pub fn mouseEntered(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "mouseEntered:", void, .{_event});
    }

    pub fn mouseExited(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "mouseExited:", void, .{_event});
    }

    pub fn keyDown(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "keyDown:", void, .{_event});
    }

    pub fn keyUp(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "keyUp:", void, .{_event});
    }

    pub fn flagsChanged(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "flagsChanged:", void, .{_event});
    }

    pub fn tabletPoint(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "tabletPoint:", void, .{_event});
    }

    pub fn tabletProximity(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "tabletProximity:", void, .{_event});
    }

    pub fn cursorUpdate(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "cursorUpdate:", void, .{_event});
    }

    pub fn magnifyWithEvent(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "magnifyWithEvent:", void, .{_event});
    }

    pub fn rotateWithEvent(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "rotateWithEvent:", void, .{_event});
    }

    pub fn swipeWithEvent(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "swipeWithEvent:", void, .{_event});
    }

    pub fn beginGestureWithEvent(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "beginGestureWithEvent:", void, .{_event});
    }

    pub fn endGestureWithEvent(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "endGestureWithEvent:", void, .{_event});
    }

    pub fn smartMagnifyWithEvent(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "smartMagnifyWithEvent:", void, .{_event});
    }

    pub fn changeModeWithEvent(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "changeModeWithEvent:", void, .{_event});
    }

    pub fn touchesBeganWithEvent(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "touchesBeganWithEvent:", void, .{_event});
    }

    pub fn touchesMovedWithEvent(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "touchesMovedWithEvent:", void, .{_event});
    }

    pub fn touchesEndedWithEvent(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "touchesEndedWithEvent:", void, .{_event});
    }

    pub fn touchesCancelledWithEvent(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "touchesCancelledWithEvent:", void, .{_event});
    }

    pub fn quickLookWithEvent(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "quickLookWithEvent:", void, .{_event});
    }

    pub fn pressureChangeWithEvent(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "pressureChangeWithEvent:", void, .{_event});
    }

    pub fn contextMenuKeyDown(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "contextMenuKeyDown:", void, .{_event});
    }

    pub fn noResponderFor(_self: *@This(), _eventSelector: objc.Selector) void {
        return objc.msgSend(_self, "noResponderFor:", void, .{_eventSelector});
    }

    pub fn becomeFirstResponder(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "becomeFirstResponder", objc.BOOL, .{});
    }

    pub fn resignFirstResponder(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "resignFirstResponder", objc.BOOL, .{});
    }

    pub fn interpretKeyEvents(_self: *@This(), _eventArray: ?*anyopaque) void {
        return objc.msgSend(_self, "interpretKeyEvents:", void, .{_eventArray});
    }

    pub fn flushBufferedKeyEvents(_self: *@This()) void {
        return objc.msgSend(_self, "flushBufferedKeyEvents", void, .{});
    }

    pub fn showContextHelp(_self: *@This(), _sender: ?objc.Id) void {
        return objc.msgSend(_self, "showContextHelp:", void, .{_sender});
    }

    pub fn helpRequested(_self: *@This(), _eventPtr: ?*app_kit.Event) void {
        return objc.msgSend(_self, "helpRequested:", void, .{_eventPtr});
    }

    pub fn shouldBeTreatedAsInkEvent(_self: *@This(), _event: ?*app_kit.Event) objc.BOOL {
        return objc.msgSend(_self, "shouldBeTreatedAsInkEvent:", objc.BOOL, .{_event});
    }

    pub fn wantsScrollEventsForSwipeTrackingOnAxis(_self: *@This(), _axis: app_kit.EventGestureAxis) objc.BOOL {
        return objc.msgSend(_self, "wantsScrollEventsForSwipeTrackingOnAxis:", objc.BOOL, .{_axis});
    }

    pub fn wantsForwardedScrollEventsForAxis(_self: *@This(), _axis: app_kit.EventGestureAxis) objc.BOOL {
        return objc.msgSend(_self, "wantsForwardedScrollEventsForAxis:", objc.BOOL, .{_axis});
    }

    pub fn supplementalTargetForActionSender(_self: *@This(), _action: objc.Selector, _sender: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "supplementalTargetForAction:sender:", ?objc.Id, .{ _action, _sender });
    }

    pub fn nextResponder(_self: *@This()) ?*app_kit.Responder {
        return objc.msgSend(_self, "nextResponder", ?*app_kit.Responder, .{});
    }

    pub fn setNextResponder(_self: *@This(), _nextResponder: ?*app_kit.Responder) void {
        return objc.msgSend(_self, "setNextResponder:", void, .{_nextResponder});
    }

    pub fn acceptsFirstResponder(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "acceptsFirstResponder", objc.BOOL, .{});
    }

    pub fn menu(_self: *@This()) ?*app_kit.Menu {
        return objc.msgSend(_self, "menu", ?*app_kit.Menu, .{});
    }

    pub fn setMenu(_self: *@This(), _menu: ?*app_kit.Menu) void {
        return objc.msgSend(_self, "setMenu:", void, .{_menu});
    }

    pub fn discardEditing(_self: *@This()) void {
        return objc.msgSend(_self, "discardEditing", void, .{});
    }

    pub fn commitEditing(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "commitEditing", objc.BOOL, .{});
    }

    pub fn commitEditingWithDelegateDidCommitSelectorContextInfo(_self: *@This(), _delegate: ?objc.Id, _didCommitSelector: objc.Selector, _contextInfo: ?*anyopaque) void {
        return objc.msgSend(_self, "commitEditingWithDelegate:didCommitSelector:contextInfo:", void, .{ _delegate, _didCommitSelector, _contextInfo });
    }

    pub fn commitEditingAndReturnError(_self: *@This(), _error: ?*?*foundation.Error) objc.BOOL {
        return objc.msgSend(_self, "commitEditingAndReturnError:", objc.BOOL, .{_error});
    }

    pub fn prepareForSegueSender(_self: *@This(), _segue: ?*app_kit.StoryboardSegue, _sender: ?objc.Id) void {
        return objc.msgSend(_self, "prepareForSegue:sender:", void, .{ _segue, _sender });
    }

    pub fn performSegueWithIdentifierSender(_self: *@This(), _identifier: app_kit.StoryboardSegueIdentifier, _sender: ?objc.Id) void {
        return objc.msgSend(_self, "performSegueWithIdentifier:sender:", void, .{ _identifier, _sender });
    }

    pub fn shouldPerformSegueWithIdentifierSender(_self: *@This(), _identifier: app_kit.StoryboardSegueIdentifier, _sender: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "shouldPerformSegueWithIdentifier:sender:", objc.BOOL, .{ _identifier, _sender });
    }

    pub fn identifier(_self: *@This()) app_kit.UserInterfaceItemIdentifier {
        return objc.msgSend(_self, "identifier", app_kit.UserInterfaceItemIdentifier, .{});
    }

    pub fn setIdentifier(_self: *@This(), _identifier: app_kit.UserInterfaceItemIdentifier) void {
        return objc.msgSend(_self, "setIdentifier:", void, .{_identifier});
    }

    pub fn initWithNibNameBundle(_self: *@This(), _nibNameOrNil: app_kit.NibName, _nibBundleOrNil: ?*foundation.Bundle) *@This() {
        return objc.msgSend(_self, "initWithNibName:bundle:", *@This(), .{ _nibNameOrNil, _nibBundleOrNil });
    }

    pub fn loadView(_self: *@This()) void {
        return objc.msgSend(_self, "loadView", void, .{});
    }

    pub fn loadViewIfNeeded(_self: *@This()) void {
        return objc.msgSend(_self, "loadViewIfNeeded", void, .{});
    }

    pub fn viewDidLoad(_self: *@This()) void {
        return objc.msgSend(_self, "viewDidLoad", void, .{});
    }

    pub fn viewWillAppear(_self: *@This()) void {
        return objc.msgSend(_self, "viewWillAppear", void, .{});
    }

    pub fn viewDidAppear(_self: *@This()) void {
        return objc.msgSend(_self, "viewDidAppear", void, .{});
    }

    pub fn viewWillDisappear(_self: *@This()) void {
        return objc.msgSend(_self, "viewWillDisappear", void, .{});
    }

    pub fn viewDidDisappear(_self: *@This()) void {
        return objc.msgSend(_self, "viewDidDisappear", void, .{});
    }

    pub fn updateViewConstraints(_self: *@This()) void {
        return objc.msgSend(_self, "updateViewConstraints", void, .{});
    }

    pub fn viewWillLayout(_self: *@This()) void {
        return objc.msgSend(_self, "viewWillLayout", void, .{});
    }

    pub fn viewDidLayout(_self: *@This()) void {
        return objc.msgSend(_self, "viewDidLayout", void, .{});
    }

    pub fn nibName(_self: *@This()) app_kit.NibName {
        return objc.msgSend(_self, "nibName", app_kit.NibName, .{});
    }

    pub fn nibBundle(_self: *@This()) ?*foundation.Bundle {
        return objc.msgSend(_self, "nibBundle", ?*foundation.Bundle, .{});
    }

    pub fn representedObject(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "representedObject", ?objc.Id, .{});
    }

    pub fn setRepresentedObject(_self: *@This(), _representedObject: ?objc.Id) void {
        return objc.msgSend(_self, "setRepresentedObject:", void, .{_representedObject});
    }

    pub fn title(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "title", ?*foundation.String, .{});
    }

    pub fn setTitle(_self: *@This(), _title: ?*foundation.String) void {
        return objc.msgSend(_self, "setTitle:", void, .{_title});
    }

    pub fn view(_self: *@This()) ?*app_kit.View {
        return objc.msgSend(_self, "view", ?*app_kit.View, .{});
    }

    pub fn setView(_self: *@This(), _view: ?*app_kit.View) void {
        return objc.msgSend(_self, "setView:", void, .{_view});
    }

    pub fn viewIfLoaded(_self: *@This()) ?*app_kit.View {
        return objc.msgSend(_self, "viewIfLoaded", ?*app_kit.View, .{});
    }

    pub fn isViewLoaded(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isViewLoaded", objc.BOOL, .{});
    }

    pub fn preferredContentSize(_self: *@This()) foundation.Size {
        return objc.msgSend(_self, "preferredContentSize", foundation.Size, .{});
    }

    pub fn setPreferredContentSize(_self: *@This(), _preferredContentSize: foundation.Size) void {
        return objc.msgSend(_self, "setPreferredContentSize:", void, .{_preferredContentSize});
    }

    pub fn initWithMapItemDisplaysMap(_self: *@This(), _mapItem: ?*MapItem, _displaysMap: objc.BOOL) *@This() {
        return objc.msgSend(_self, "initWithMapItem:displaysMap:", *@This(), .{ _mapItem, _displaysMap });
    }

    pub fn initWithMapItem(_self: *@This(), _mapItem: ?*MapItem) *@This() {
        return objc.msgSend(_self, "initWithMapItem:", *@This(), .{_mapItem});
    }

    pub fn mapItem(_self: *@This()) ?*MapItem {
        return objc.msgSend(_self, "mapItem", ?*MapItem, .{});
    }

    pub fn setMapItem(_self: *@This(), _mapItem: ?*MapItem) void {
        return objc.msgSend(_self, "setMapItem:", void, .{_mapItem});
    }

    pub fn delegate(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "delegate", ?*anyopaque, .{});
    }

    pub fn setDelegate(_self: *@This(), _delegate: ?*anyopaque) void {
        return objc.msgSend(_self, "setDelegate:", void, .{_delegate});
    }
};

/// https://developer.apple.com/documentation/MapKit/MKMapItemRequest?language=objc
pub const MapItemRequest = opaque {
    pub const Internal = objc.ExternClass("MKMapItemRequest", @This(), objc.NSObject, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "description", ?*foundation.String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "debugDescription", ?*foundation.String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*foundation.Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*foundation.MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*foundation.MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*foundation.MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*foundation.MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn initWithMapItemIdentifier(_self: *@This(), _identifier: ?*MapItemIdentifier) *@This() {
        return objc.msgSend(_self, "initWithMapItemIdentifier:", *@This(), .{_identifier});
    }

    pub fn initWithMapFeatureAnnotation(_self: *@This(), _mapFeatureAnnotation: ?*anyopaque) *@This() {
        return objc.msgSend(_self, "initWithMapFeatureAnnotation:", *@This(), .{_mapFeatureAnnotation});
    }

    pub fn getMapItemWithCompletionHandler(_self: *@This(), _completionHandler: *const fn (?*MapItem, ?*foundation.Error) callconv(.C) void) void {
        return objc.msgSend(_self, "getMapItemWithCompletionHandler:", void, .{_completionHandler});
    }

    pub fn cancel(_self: *@This()) void {
        return objc.msgSend(_self, "cancel", void, .{});
    }

    pub fn mapItemIdentifier(_self: *@This()) ?*MapItemIdentifier {
        return objc.msgSend(_self, "mapItemIdentifier", ?*MapItemIdentifier, .{});
    }

    pub fn mapFeatureAnnotation(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "mapFeatureAnnotation", ?*anyopaque, .{});
    }

    pub fn featureAnnotation(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "featureAnnotation", ?*anyopaque, .{});
    }

    pub fn isCancelled(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isCancelled", objc.BOOL, .{});
    }

    pub fn isLoading(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isLoading", objc.BOOL, .{});
    }
};
