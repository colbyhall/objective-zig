// THIS FILE IS AUTOGENERATED. MODIFICATIONS WILL NOT BE MAINTAINED.

const std = @import("std");
const objc = @import("objc.zig"); // Objective-C Runtime in zig.
const core_foundation = @import("core_foundation.zig"); // Framework dependency CoreFoundation.
const io_kit = @import("io_kit.zig"); // Framework dependency IOKit.

pub const anon741 = enum(u32) {
    kDADiskUnmountOptionDefault = 0,
    kDADiskUnmountOptionForce = 524288,
    kDADiskUnmountOptionWhole = 1,
};

pub const anon461 = enum(u32) {
    kDADiskMountOptionDefault = 0,
    kDADiskMountOptionWhole = 1,
    kDADiskMountOptionNoFollow = 2,
};

pub const anon881 = enum(u32) {
    kDADiskEjectOptionDefault = 0,
};

pub const __DASession = extern struct {};

pub const SessionRef = ?*__DASession;

pub extern "DiskArbitration" fn SessionGetTypeID() callconv(.C) core_foundation.TypeID;

pub extern "DiskArbitration" fn SessionCreate(allocator: core_foundation.AllocatorRef) callconv(.C) SessionRef;

pub extern "DiskArbitration" fn SessionScheduleWithRunLoop(session: SessionRef, runLoop: core_foundation.RunLoopRef, runLoopMode: core_foundation.StringRef) callconv(.C) void;

pub extern "DiskArbitration" fn SessionUnscheduleFromRunLoop(session: SessionRef, runLoop: core_foundation.RunLoopRef, runLoopMode: core_foundation.StringRef) callconv(.C) void;

pub extern "DiskArbitration" fn SessionSetDispatchQueue(session: SessionRef, queue: objc.dispatch_queue_t) callconv(.C) void;

pub const ApprovalSessionRef = ?*__DASession;

pub extern "DiskArbitration" fn ApprovalSessionGetTypeID() callconv(.C) core_foundation.TypeID;

pub extern "DiskArbitration" fn ApprovalSessionCreate(allocator: core_foundation.AllocatorRef) callconv(.C) ApprovalSessionRef;

pub extern "DiskArbitration" fn ApprovalSessionScheduleWithRunLoop(session: ApprovalSessionRef, runLoop: core_foundation.RunLoopRef, runLoopMode: core_foundation.StringRef) callconv(.C) void;

pub extern "DiskArbitration" fn ApprovalSessionUnscheduleFromRunLoop(session: ApprovalSessionRef, runLoop: core_foundation.RunLoopRef, runLoopMode: core_foundation.StringRef) callconv(.C) void;

pub const __DADisk = extern struct {};

pub const DiskRef = ?*__DADisk;

pub extern "DiskArbitration" fn DiskGetTypeID() callconv(.C) core_foundation.TypeID;

pub extern "DiskArbitration" fn DiskCreateFromBSDName(allocator: core_foundation.AllocatorRef, session: SessionRef, name: ?*i8) callconv(.C) DiskRef;

pub extern "DiskArbitration" fn DiskCreateFromIOMedia(allocator: core_foundation.AllocatorRef, session: SessionRef, media: io_kit.io_service_t) callconv(.C) DiskRef;

pub extern "DiskArbitration" fn DiskCreateFromVolumePath(allocator: core_foundation.AllocatorRef, session: SessionRef, path: core_foundation.URLRef) callconv(.C) DiskRef;

pub extern "DiskArbitration" fn DiskGetBSDName(disk: DiskRef) callconv(.C) ?*i8;

pub extern "DiskArbitration" fn DiskCopyIOMedia(disk: DiskRef) callconv(.C) io_kit.io_service_t;

pub extern "DiskArbitration" fn DiskCopyDescription(disk: DiskRef) callconv(.C) core_foundation.DictionaryRef;

pub extern "DiskArbitration" fn DiskCopyWholeDisk(disk: DiskRef) callconv(.C) DiskRef;

pub const anon441 = enum(i32) {
    kDAReturnSuccess = 0,
    kDAReturnError = -119930879,
    kDAReturnBusy = -119930878,
    kDAReturnBadArgument = -119930877,
    kDAReturnExclusiveAccess = -119930876,
    kDAReturnNoResources = -119930875,
    kDAReturnNotFound = -119930874,
    kDAReturnNotMounted = -119930873,
    kDAReturnNotPermitted = -119930872,
    kDAReturnNotPrivileged = -119930871,
    kDAReturnNotReady = -119930870,
    kDAReturnNotWritable = -119930869,
    kDAReturnUnsupported = -119930868,
};

pub const Return = objc.mach_error_t;

pub const __DADissenter = extern struct {};

pub const DissenterRef = ?*__DADissenter;

pub extern "DiskArbitration" fn DissenterCreate(allocator: core_foundation.AllocatorRef, status: Return, string: core_foundation.StringRef) callconv(.C) DissenterRef;

pub extern "DiskArbitration" fn DissenterGetStatus(dissenter: DissenterRef) callconv(.C) Return;

pub extern "DiskArbitration" fn DissenterGetStatusString(dissenter: DissenterRef) callconv(.C) core_foundation.StringRef;

pub const DiskMountOptions = objc.UInt32;

pub const anon601 = enum(u32) {
    kDADiskRenameOptionDefault = 0,
};

pub const DiskRenameOptions = objc.UInt32;

pub const DiskUnmountOptions = objc.UInt32;

pub const DiskEjectOptions = objc.UInt32;

pub const anon1001 = enum(u32) {
    kDADiskClaimOptionDefault = 0,
};

pub const DiskClaimOptions = objc.UInt32;

pub const anon1121 = enum(u32) {
    kDADiskOptionDefault = 0,
};

pub const DiskOptions = objc.UInt32;

pub const DiskAppearedCallback = ?*const fn(DiskRef, ?*anyopaque) callconv(.C) void;

pub extern "DiskArbitration" fn RegisterDiskAppearedCallback(session: SessionRef, match: core_foundation.DictionaryRef, callback: DiskAppearedCallback, context: ?*anyopaque, ) callconv(.C) void;

pub const DiskDescriptionChangedCallback = ?*const fn(DiskRef, core_foundation.ArrayRef, ?*anyopaque) callconv(.C) void;

pub extern "DiskArbitration" fn RegisterDiskDescriptionChangedCallback(session: SessionRef, match: core_foundation.DictionaryRef, watch: core_foundation.ArrayRef, callback: DiskDescriptionChangedCallback, context: ?*anyopaque, ) callconv(.C) void;

pub const DiskDisappearedCallback = ?*const fn(DiskRef, ?*anyopaque) callconv(.C) void;

pub extern "DiskArbitration" fn RegisterDiskDisappearedCallback(session: SessionRef, match: core_foundation.DictionaryRef, callback: DiskDisappearedCallback, context: ?*anyopaque, ) callconv(.C) void;

pub const DiskMountCallback = ?*const fn(DiskRef, DissenterRef, ?*anyopaque) callconv(.C) void;

pub extern "DiskArbitration" fn DiskMount(disk: DiskRef, path: core_foundation.URLRef, options: DiskMountOptions, callback: DiskMountCallback, context: ?*anyopaque, ) callconv(.C) void;

pub extern "DiskArbitration" fn DiskMountWithArguments(disk: DiskRef, path: core_foundation.URLRef, options: DiskMountOptions, callback: DiskMountCallback, context: ?*anyopaque, arguments: ?*core_foundation.StringRef, ) callconv(.C) void;

pub const DiskMountApprovalCallback = ?*const fn(DiskRef, ?*anyopaque) callconv(.C) DissenterRef;

pub extern "DiskArbitration" fn RegisterDiskMountApprovalCallback(session: SessionRef, match: core_foundation.DictionaryRef, callback: DiskMountApprovalCallback, context: ?*anyopaque, ) callconv(.C) void;

pub const DiskRenameCallback = ?*const fn(DiskRef, DissenterRef, ?*anyopaque) callconv(.C) void;

pub extern "DiskArbitration" fn DiskRename(disk: DiskRef, name: core_foundation.StringRef, options: DiskRenameOptions, callback: DiskRenameCallback, context: ?*anyopaque, ) callconv(.C) void;

pub const DiskUnmountCallback = ?*const fn(DiskRef, DissenterRef, ?*anyopaque) callconv(.C) void;

pub extern "DiskArbitration" fn DiskUnmount(disk: DiskRef, options: DiskUnmountOptions, callback: DiskUnmountCallback, context: ?*anyopaque, ) callconv(.C) void;

pub const DiskUnmountApprovalCallback = ?*const fn(DiskRef, ?*anyopaque) callconv(.C) DissenterRef;

pub extern "DiskArbitration" fn RegisterDiskUnmountApprovalCallback(session: SessionRef, match: core_foundation.DictionaryRef, callback: DiskUnmountApprovalCallback, context: ?*anyopaque, ) callconv(.C) void;

pub const DiskEjectCallback = ?*const fn(DiskRef, DissenterRef, ?*anyopaque) callconv(.C) void;

pub extern "DiskArbitration" fn DiskEject(disk: DiskRef, options: DiskEjectOptions, callback: DiskEjectCallback, context: ?*anyopaque, ) callconv(.C) void;

pub const DiskEjectApprovalCallback = ?*const fn(DiskRef, ?*anyopaque) callconv(.C) DissenterRef;

pub extern "DiskArbitration" fn RegisterDiskEjectApprovalCallback(session: SessionRef, match: core_foundation.DictionaryRef, callback: DiskEjectApprovalCallback, context: ?*anyopaque, ) callconv(.C) void;

pub const DiskClaimCallback = ?*const fn(DiskRef, DissenterRef, ?*anyopaque) callconv(.C) void;

pub const DiskClaimReleaseCallback = ?*const fn(DiskRef, ?*anyopaque) callconv(.C) DissenterRef;

pub extern "DiskArbitration" fn DiskClaim(disk: DiskRef, options: DiskClaimOptions, release: DiskClaimReleaseCallback, releaseContext: ?*anyopaque, callback: DiskClaimCallback, callbackContext: ?*anyopaque, ) callconv(.C) void;

pub extern "DiskArbitration" fn DiskIsClaimed(disk: DiskRef) callconv(.C) objc.Boolean;

pub extern "DiskArbitration" fn DiskUnclaim(disk: DiskRef) callconv(.C) void;

pub const DiskPeekCallback = ?*const fn(DiskRef, ?*anyopaque) callconv(.C) void;

pub extern "DiskArbitration" fn RegisterDiskPeekCallback(session: SessionRef, match: core_foundation.DictionaryRef, order: core_foundation.Index, callback: DiskPeekCallback, context: ?*anyopaque, ) callconv(.C) void;

pub extern "DiskArbitration" fn DiskGetOptions(disk: DiskRef) callconv(.C) DiskOptions;

pub extern "DiskArbitration" fn DiskSetOptions(disk: DiskRef, options: DiskOptions, value: objc.Boolean) callconv(.C) Return;

pub extern "DiskArbitration" fn UnregisterCallback(session: SessionRef, callback: ?*anyopaque, context: ?*anyopaque) callconv(.C) void;

pub extern "DiskArbitration" fn UnregisterApprovalCallback(session: SessionRef, callback: ?*anyopaque, context: ?*anyopaque) callconv(.C) void;

