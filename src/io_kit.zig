// THIS FILE IS AUTOGENERATED. MODIFICATIONS WILL NOT BE MAINTAINED.

const std = @import("std");
const objc = @import("objc.zig"); // Objective-C Runtime in zig.
const core_foundation = @import("core_foundation.zig"); // Framework dependency CoreFoundation.

pub const Return = objc.kern_return_t;

pub const OptionBits = objc.UInt32;

pub const Fixed = objc.SInt32;

pub const Version = objc.UInt32;

pub const ItemCount = objc.UInt32;

pub const CacheMode = objc.UInt32;

pub const ByteCount32 = objc.UInt32;

pub const ByteCount64 = objc.UInt64;

pub const PhysicalAddress32 = objc.UInt32;

pub const PhysicalAddress64 = objc.UInt64;

pub const PhysicalLength32 = objc.UInt32;

pub const PhysicalLength64 = objc.UInt64;

pub const VirtualAddress = objc.mach_vm_address_t;

pub const ByteCount = ByteCount64;

pub const LogicalAddress = VirtualAddress;

pub const PhysicalAddress = PhysicalAddress64;

pub const PhysicalLength = PhysicalLength64;

pub const PhysicalRange = extern struct {
    address: PhysicalAddress,
    length: ByteCount,
};

pub const VirtualRange = extern struct {
    address: VirtualAddress,
    length: ByteCount,
};

pub const AddressRange = VirtualRange;

pub const NamedValue = extern struct {
    value: i32,
    name: [*:0]const u8,
};

pub const Alignment = u32;

pub const io_object_t = objc.mach_port_t;

pub const io_connect_t = io_object_t;

pub const io_enumerator_t = io_object_t;

pub const io_ident_t = io_object_t;

pub const io_iterator_t = io_object_t;

pub const io_registry_entry_t = io_object_t;

pub const io_service_t = io_object_t;

pub const uext_object_t = io_object_t;

pub const anon331 = u32;
pub const anon331_IODefaultMemoryType: u32 = 0;

pub const anon371 = u32;
pub const anon371_IODefaultCache: u32 = 0;
pub const anon371_IOInhibitCache: u32 = 1;
pub const anon371_IOWriteThruCache: u32 = 2;
pub const anon371_IOCopybackCache: u32 = 3;
pub const anon371_IOWriteCombineCache: u32 = 4;
pub const anon371_IOCopybackInnerCache: u32 = 5;
pub const anon371_IOPostedWrite: u32 = 6;
pub const anon371_IORealTimeCache: u32 = 7;
pub const anon371_IOPostedReordered: u32 = 8;
pub const anon371_IOPostedCombinedReordered: u32 = 9;

pub const anon511 = u32;
pub const anon511_IOMapAnywhere: u32 = 1;
pub const anon511_IOMapCacheMask: u32 = 3840;
pub const anon511_IOMapCacheShift: u32 = 8;
pub const anon511_IOMapDefaultCache: u32 = 0;
pub const anon511_IOMapInhibitCache: u32 = 256;
pub const anon511_IOMapWriteThruCache: u32 = 512;
pub const anon511_IOMapCopybackCache: u32 = 768;
pub const anon511_IOMapWriteCombineCache: u32 = 1024;
pub const anon511_IOMapCopybackInnerCache: u32 = 1280;
pub const anon511_IOMapPostedWrite: u32 = 1536;
pub const anon511_IOMapRealTimeCache: u32 = 1792;
pub const anon511_IOMapPostedReordered: u32 = 2048;
pub const anon511_IOMapPostedCombinedReordered: u32 = 2304;
pub const anon511_IOMapUserOptionsMask: u32 = 4095;
pub const anon511_IOMapReadOnly: u32 = 4096;
pub const anon511_IOMapStatic: u32 = 16777216;
pub const anon511_IOMapReference: u32 = 33554432;
pub const anon511_IOMapUnique: u32 = 67108864;
pub const anon511_IOMapPrefault: u32 = 268435456;
pub const anon511_IOMapOverwrite: u32 = 536870912;
pub const anon511_IOMapGuardedMask: u32 = -1073741824;
pub const anon511_IOMapGuardedSmall: u32 = 1073741824;
pub const anon511_IOMapGuardedLarge: u32 = -2147483648;

pub const anon2001 = u32;
pub const anon2001_NanosecondScale: u32 = 1;
pub const anon2001_MicrosecondScale: u32 = 1000;
pub const anon2001_MillisecondScale: u32 = 1000000;
pub const anon2001_SecondScale: u32 = 1000000000;
pub const anon2001_TickScale: u32 = 10000000;

pub const anon2081 = i32;
pub const anon2081_IOConnectMethodVarOutputSize: i32 = -3;

pub const DeviceNumber = u32;

pub const anon2231 = u32;
pub const anon2231_IOMaxBusStall40usec: u32 = 40000;
pub const anon2231_IOMaxBusStall30usec: u32 = 30000;
pub const anon2231_IOMaxBusStall25usec: u32 = 25000;
pub const anon2231_IOMaxBusStall20usec: u32 = 20000;
pub const anon2231_IOMaxBusStall10usec: u32 = 10000;
pub const anon2231_IOMaxBusStall5usec: u32 = 5000;
pub const anon2231_IOMaxBusStallNone: u32 = 0;

pub const anon2931 = u32;
pub const anon2931_IOSystemStateSleepDescriptionHibernateStateInactive: u32 = 0;
pub const anon2931_IOSystemStateSleepDescriptionHibernateStateHibernating: u32 = 1;
pub const anon2931_IOSystemStateSleepDescriptionHibernateStateWakingFromHibernate: u32 = 2;

pub const anon461 = u32;
pub const anon461_FirstIOKitNotificationType: u32 = 100;
pub const anon461_IOServicePublishNotificationType: u32 = 100;
pub const anon461_IOServiceMatchedNotificationType: u32 = 101;
pub const anon461_IOServiceTerminatedNotificationType: u32 = 102;
pub const anon461_IOAsyncCompletionNotificationType: u32 = 150;
pub const anon461_IOServiceMessageNotificationType: u32 = 160;
pub const anon461_LastIOKitNotificationType: u32 = 199;
pub const anon461_IOKitNoticationTypeMask: u32 = 4095;
pub const anon461_IOKitNoticationTypeSizeAdjShift: u32 = 30;
pub const anon461_IOKitNoticationMsgSizeMask: u32 = 3;

pub const anon611 = u32;
pub const anon611_OSNotificationMessageID: u32 = 53;
pub const anon611_OSAsyncCompleteMessageID: u32 = 57;
pub const anon611_MaxAsyncArgs: u32 = 16;

pub const anon671 = u32;
pub const anon671_IOAsyncReservedIndex: u32 = 0;
pub const anon671_IOAsyncReservedCount: u32 = 1;
pub const anon671_IOAsyncCalloutFuncIndex: u32 = 1;
pub const anon671_IOAsyncCalloutRefconIndex: u32 = 2;
pub const anon671_IOAsyncCalloutCount: u32 = 3;
pub const anon671_IOMatchingCalloutFuncIndex: u32 = 1;
pub const anon671_IOMatchingCalloutRefconIndex: u32 = 2;
pub const anon671_IOMatchingCalloutCount: u32 = 3;
pub const anon671_IOInterestCalloutFuncIndex: u32 = 1;
pub const anon671_IOInterestCalloutRefconIndex: u32 = 2;
pub const anon671_IOInterestCalloutServiceIndex: u32 = 3;
pub const anon671_IOInterestCalloutCount: u32 = 4;

pub const anon881 = u32;
pub const anon881_OSAsyncRef64Count: u32 = 8;
pub const anon881_OSAsyncRef64Size: u32 = 64;

pub const OSAsyncReference64 = objc.io_user_reference_t;

pub const OSNotificationHeader64 = extern struct {
    size: objc.mach_msg_size_t,
    type: objc.natural_t,
    reference: OSAsyncReference64,
    content: *u8,
};

pub const ServiceInterestContent64 = extern struct {
    messageType: objc.natural_t,
    messageArgument: [1]objc.io_user_reference_t,
};

pub const anon1161 = u32;
pub const anon1161_OSAsyncRefCount: u32 = 8;
pub const anon1161_OSAsyncRefSize: u32 = 32;

pub const OSAsyncReference = objc.natural_t;

pub const OSNotificationHeader = extern struct {
    size: objc.mach_msg_size_t,
    type: objc.natural_t,
    reference: OSAsyncReference,
    content: *u8,
};

pub const ServiceInterestContent = extern struct {
    messageType: objc.natural_t,
    messageArgument: [1]?*anyopaque,
};

pub const AsyncCompletionContent = extern struct {
    result: Return,
    args: *?*anyopaque,
};

pub const NotificationPort = extern struct {};

pub const NotificationPortRef = NotificationPort;

pub const ServiceMatchingCallback = ?*const fn (?*anyopaque, io_iterator_t) callconv(.C) void;

pub const ServiceInterestCallback = ?*const fn (
    ?*anyopaque,
    io_service_t,
    objc.uint32_t,
    ?*anyopaque,
) callconv(.C) void;

extern "IOKit" fn IOMainPort(bootstrapPort: objc.mach_port_t, mainPort: ?*objc.mach_port_t) callconv(.C) objc.kern_return_t;
pub const mainPort = IOMainPort;

extern "IOKit" fn IOMasterPort(bootstrapPort: objc.mach_port_t, mainPort: ?*objc.mach_port_t) callconv(.C) objc.kern_return_t;
pub const masterPort = IOMasterPort;

extern "IOKit" fn IONotificationPortCreate(mainPort: objc.mach_port_t) callconv(.C) NotificationPortRef;
pub const notificationPortCreate = IONotificationPortCreate;

extern "IOKit" fn IONotificationPortDestroy(notify: NotificationPortRef) callconv(.C) void;
pub const notificationPortDestroy = IONotificationPortDestroy;

extern "IOKit" fn IONotificationPortGetRunLoopSource(notify: NotificationPortRef) callconv(.C) core_foundation.RunLoopSourceRef;
pub const notificationPortGetRunLoopSource = IONotificationPortGetRunLoopSource;

extern "IOKit" fn IONotificationPortGetMachPort(notify: NotificationPortRef) callconv(.C) objc.mach_port_t;
pub const notificationPortGetMachPort = IONotificationPortGetMachPort;

extern "IOKit" fn IONotificationPortSetImportanceReceiver(notify: NotificationPortRef) callconv(.C) objc.kern_return_t;
pub const notificationPortSetImportanceReceiver = IONotificationPortSetImportanceReceiver;

extern "IOKit" fn IONotificationPortSetDispatchQueue(notify: NotificationPortRef, queue: objc.dispatch_queue_t) callconv(.C) void;
pub const notificationPortSetDispatchQueue = IONotificationPortSetDispatchQueue;

extern "IOKit" fn IODispatchCalloutFromMessage(unused: ?*anyopaque, msg: ?*objc.mach_msg_header_t, reference: ?*anyopaque) callconv(.C) void;
pub const dispatchCalloutFromMessage = IODispatchCalloutFromMessage;

extern "IOKit" fn IOCreateReceivePort(msgType: objc.uint32_t, recvPort: ?*objc.mach_port_t) callconv(.C) objc.kern_return_t;
pub const createReceivePort = IOCreateReceivePort;

extern "IOKit" fn IOObjectRelease(object: io_object_t) callconv(.C) objc.kern_return_t;
pub const objectRelease = IOObjectRelease;

extern "IOKit" fn IOObjectRetain(object: io_object_t) callconv(.C) objc.kern_return_t;
pub const objectRetain = IOObjectRetain;

extern "IOKit" fn IOObjectGetClass(object: io_object_t, className: objc.io_name_t) callconv(.C) objc.kern_return_t;
pub const objectGetClass = IOObjectGetClass;

extern "IOKit" fn IOObjectCopyClass(object: io_object_t) callconv(.C) core_foundation.StringRef;
pub const objectCopyClass = IOObjectCopyClass;

extern "IOKit" fn IOObjectCopySuperclassForClass(classname: core_foundation.StringRef) callconv(.C) core_foundation.StringRef;
pub const objectCopySuperclassForClass = IOObjectCopySuperclassForClass;

extern "IOKit" fn IOObjectCopyBundleIdentifierForClass(classname: core_foundation.StringRef) callconv(.C) core_foundation.StringRef;
pub const objectCopyBundleIdentifierForClass = IOObjectCopyBundleIdentifierForClass;

extern "IOKit" fn IOObjectConformsTo(object: io_object_t, className: objc.io_name_t) callconv(.C) objc.boolean_t;
pub const objectConformsTo = IOObjectConformsTo;

extern "IOKit" fn IOObjectIsEqualTo(object: io_object_t, anObject: io_object_t) callconv(.C) objc.boolean_t;
pub const objectIsEqualTo = IOObjectIsEqualTo;

extern "IOKit" fn IOObjectGetKernelRetainCount(object: io_object_t) callconv(.C) objc.uint32_t;
pub const objectGetKernelRetainCount = IOObjectGetKernelRetainCount;

extern "IOKit" fn IOObjectGetUserRetainCount(object: io_object_t) callconv(.C) objc.uint32_t;
pub const objectGetUserRetainCount = IOObjectGetUserRetainCount;

extern "IOKit" fn IOObjectGetRetainCount(object: io_object_t) callconv(.C) objc.uint32_t;
pub const objectGetRetainCount = IOObjectGetRetainCount;

extern "IOKit" fn IOIteratorNext(iterator: io_iterator_t) callconv(.C) io_object_t;
pub const iteratorNext = IOIteratorNext;

extern "IOKit" fn IOIteratorReset(iterator: io_iterator_t) callconv(.C) void;
pub const iteratorReset = IOIteratorReset;

extern "IOKit" fn IOIteratorIsValid(iterator: io_iterator_t) callconv(.C) objc.boolean_t;
pub const iteratorIsValid = IOIteratorIsValid;

extern "IOKit" fn IOServiceGetMatchingService(mainPort: objc.mach_port_t, matching: core_foundation.DictionaryRef) callconv(.C) io_service_t;
pub const serviceGetMatchingService = IOServiceGetMatchingService;

extern "IOKit" fn IOServiceGetMatchingServices(mainPort: objc.mach_port_t, matching: core_foundation.DictionaryRef, existing: ?*io_iterator_t) callconv(.C) objc.kern_return_t;
pub const serviceGetMatchingServices = IOServiceGetMatchingServices;

extern "IOKit" fn IOServiceAddNotification(
    mainPort: objc.mach_port_t,
    notificationType: objc.io_name_t,
    matching: core_foundation.DictionaryRef,
    wakePort: objc.mach_port_t,
    reference: objc.uintptr_t,
    notification: ?*io_iterator_t,
) callconv(.C) objc.kern_return_t;
pub const serviceAddNotification = IOServiceAddNotification;

extern "IOKit" fn IOServiceAddMatchingNotification(
    notifyPort: NotificationPortRef,
    notificationType: objc.io_name_t,
    matching: core_foundation.DictionaryRef,
    callback: ServiceMatchingCallback,
    refCon: ?*anyopaque,
    notification: ?*io_iterator_t,
) callconv(.C) objc.kern_return_t;
pub const serviceAddMatchingNotification = IOServiceAddMatchingNotification;

extern "IOKit" fn IOServiceAddInterestNotification(
    notifyPort: NotificationPortRef,
    service: io_service_t,
    interestType: objc.io_name_t,
    callback: ServiceInterestCallback,
    refCon: ?*anyopaque,
    notification: ?*io_object_t,
) callconv(.C) objc.kern_return_t;
pub const serviceAddInterestNotification = IOServiceAddInterestNotification;

extern "IOKit" fn IOServiceMatchPropertyTable(service: io_service_t, matching: core_foundation.DictionaryRef, matches: ?*objc.boolean_t) callconv(.C) objc.kern_return_t;
pub const serviceMatchPropertyTable = IOServiceMatchPropertyTable;

extern "IOKit" fn IOServiceGetBusyState(service: io_service_t, busyState: ?*objc.uint32_t) callconv(.C) objc.kern_return_t;
pub const serviceGetBusyState = IOServiceGetBusyState;

extern "IOKit" fn IOServiceWaitQuiet(service: io_service_t, waitTime: ?*objc.mach_timespec_t) callconv(.C) objc.kern_return_t;
pub const serviceWaitQuiet = IOServiceWaitQuiet;

extern "IOKit" fn IOKitGetBusyState(mainPort: objc.mach_port_t, busyState: ?*objc.uint32_t) callconv(.C) objc.kern_return_t;
pub const kitGetBusyState = IOKitGetBusyState;

extern "IOKit" fn IOKitWaitQuietWithOptions(mainPort: objc.mach_port_t, waitTime: ?*objc.mach_timespec_t, options: OptionBits) callconv(.C) objc.kern_return_t;
pub const kitWaitQuietWithOptions = IOKitWaitQuietWithOptions;

extern "IOKit" fn IOKitWaitQuiet(mainPort: objc.mach_port_t, waitTime: ?*objc.mach_timespec_t) callconv(.C) objc.kern_return_t;
pub const kitWaitQuiet = IOKitWaitQuiet;

extern "IOKit" fn IOServiceOpen(
    service: io_service_t,
    owningTask: objc.task_port_t,
    @"type": objc.uint32_t,
    connect: ?*io_connect_t,
) callconv(.C) objc.kern_return_t;
pub const serviceOpen = IOServiceOpen;

extern "IOKit" fn IOServiceRequestProbe(service: io_service_t, options: objc.uint32_t) callconv(.C) objc.kern_return_t;
pub const serviceRequestProbe = IOServiceRequestProbe;

pub const anon6101 = u32;
pub const anon6101_IOServiceInteractionAllowed: u32 = 1;

extern "IOKit" fn IOServiceAuthorize(service: io_service_t, options: objc.uint32_t) callconv(.C) objc.kern_return_t;
pub const serviceAuthorize = IOServiceAuthorize;

extern "IOKit" fn IOServiceOpenAsFileDescriptor(service: io_service_t, oflag: i32) callconv(.C) i32;
pub const serviceOpenAsFileDescriptor = IOServiceOpenAsFileDescriptor;

extern "IOKit" fn IOServiceClose(connect: io_connect_t) callconv(.C) objc.kern_return_t;
pub const serviceClose = IOServiceClose;

extern "IOKit" fn IOConnectAddRef(connect: io_connect_t) callconv(.C) objc.kern_return_t;
pub const connectAddRef = IOConnectAddRef;

extern "IOKit" fn IOConnectRelease(connect: io_connect_t) callconv(.C) objc.kern_return_t;
pub const connectRelease = IOConnectRelease;

extern "IOKit" fn IOConnectGetService(connect: io_connect_t, service: ?*io_service_t) callconv(.C) objc.kern_return_t;
pub const connectGetService = IOConnectGetService;

extern "IOKit" fn IOConnectSetNotificationPort(
    connect: io_connect_t,
    @"type": objc.uint32_t,
    port: objc.mach_port_t,
    reference: objc.uintptr_t,
) callconv(.C) objc.kern_return_t;
pub const connectSetNotificationPort = IOConnectSetNotificationPort;

extern "IOKit" fn IOConnectMapMemory(
    connect: io_connect_t,
    memoryType: objc.uint32_t,
    intoTask: objc.task_port_t,
    atAddress: ?*objc.mach_vm_address_t,
    ofSize: ?*objc.mach_vm_size_t,
    options: OptionBits,
) callconv(.C) objc.kern_return_t;
pub const connectMapMemory = IOConnectMapMemory;

extern "IOKit" fn IOConnectMapMemory64(
    connect: io_connect_t,
    memoryType: objc.uint32_t,
    intoTask: objc.task_port_t,
    atAddress: ?*objc.mach_vm_address_t,
    ofSize: ?*objc.mach_vm_size_t,
    options: OptionBits,
) callconv(.C) objc.kern_return_t;
pub const connectMapMemory64 = IOConnectMapMemory64;

extern "IOKit" fn IOConnectUnmapMemory(
    connect: io_connect_t,
    memoryType: objc.uint32_t,
    fromTask: objc.task_port_t,
    atAddress: objc.mach_vm_address_t,
) callconv(.C) objc.kern_return_t;
pub const connectUnmapMemory = IOConnectUnmapMemory;

extern "IOKit" fn IOConnectUnmapMemory64(
    connect: io_connect_t,
    memoryType: objc.uint32_t,
    fromTask: objc.task_port_t,
    atAddress: objc.mach_vm_address_t,
) callconv(.C) objc.kern_return_t;
pub const connectUnmapMemory64 = IOConnectUnmapMemory64;

extern "IOKit" fn IOConnectSetCFProperties(connect: io_connect_t, properties: core_foundation.TypeRef) callconv(.C) objc.kern_return_t;
pub const connectSetCFProperties = IOConnectSetCFProperties;

extern "IOKit" fn IOConnectSetCFProperty(connect: io_connect_t, propertyName: core_foundation.StringRef, property: core_foundation.TypeRef) callconv(.C) objc.kern_return_t;
pub const connectSetCFProperty = IOConnectSetCFProperty;

extern "IOKit" fn IOConnectCallMethod(
    connection: objc.mach_port_t,
    selector: objc.uint32_t,
    input: ?*const objc.uint64_t,
    inputCnt: objc.uint32_t,
    inputStruct: ?*const anyopaque,
    inputStructCnt: objc.size_t,
    output: ?*objc.uint64_t,
    outputCnt: ?*objc.uint32_t,
    outputStruct: ?*anyopaque,
    outputStructCnt: ?*objc.size_t,
) callconv(.C) objc.kern_return_t;
pub const connectCallMethod = IOConnectCallMethod;

extern "IOKit" fn IOConnectCallAsyncMethod(
    connection: objc.mach_port_t,
    selector: objc.uint32_t,
    wake_port: objc.mach_port_t,
    reference: ?*objc.uint64_t,
    referenceCnt: objc.uint32_t,
    input: ?*const objc.uint64_t,
    inputCnt: objc.uint32_t,
    inputStruct: ?*const anyopaque,
    inputStructCnt: objc.size_t,
    output: ?*objc.uint64_t,
    outputCnt: ?*objc.uint32_t,
    outputStruct: ?*anyopaque,
    outputStructCnt: ?*objc.size_t,
) callconv(.C) objc.kern_return_t;
pub const connectCallAsyncMethod = IOConnectCallAsyncMethod;

extern "IOKit" fn IOConnectCallStructMethod(
    connection: objc.mach_port_t,
    selector: objc.uint32_t,
    inputStruct: ?*const anyopaque,
    inputStructCnt: objc.size_t,
    outputStruct: ?*anyopaque,
    outputStructCnt: ?*objc.size_t,
) callconv(.C) objc.kern_return_t;
pub const connectCallStructMethod = IOConnectCallStructMethod;

extern "IOKit" fn IOConnectCallAsyncStructMethod(
    connection: objc.mach_port_t,
    selector: objc.uint32_t,
    wake_port: objc.mach_port_t,
    reference: ?*objc.uint64_t,
    referenceCnt: objc.uint32_t,
    inputStruct: ?*const anyopaque,
    inputStructCnt: objc.size_t,
    outputStruct: ?*anyopaque,
    outputStructCnt: ?*objc.size_t,
) callconv(.C) objc.kern_return_t;
pub const connectCallAsyncStructMethod = IOConnectCallAsyncStructMethod;

extern "IOKit" fn IOConnectCallScalarMethod(
    connection: objc.mach_port_t,
    selector: objc.uint32_t,
    input: ?*const objc.uint64_t,
    inputCnt: objc.uint32_t,
    output: ?*objc.uint64_t,
    outputCnt: ?*objc.uint32_t,
) callconv(.C) objc.kern_return_t;
pub const connectCallScalarMethod = IOConnectCallScalarMethod;

extern "IOKit" fn IOConnectCallAsyncScalarMethod(
    connection: objc.mach_port_t,
    selector: objc.uint32_t,
    wake_port: objc.mach_port_t,
    reference: ?*objc.uint64_t,
    referenceCnt: objc.uint32_t,
    input: ?*const objc.uint64_t,
    inputCnt: objc.uint32_t,
    output: ?*objc.uint64_t,
    outputCnt: ?*objc.uint32_t,
) callconv(.C) objc.kern_return_t;
pub const connectCallAsyncScalarMethod = IOConnectCallAsyncScalarMethod;

extern "IOKit" fn IOConnectTrap0(connect: io_connect_t, index: objc.uint32_t) callconv(.C) objc.kern_return_t;
pub const connectTrap0 = IOConnectTrap0;

extern "IOKit" fn IOConnectTrap1(connect: io_connect_t, index: objc.uint32_t, p1: objc.uintptr_t) callconv(.C) objc.kern_return_t;
pub const connectTrap1 = IOConnectTrap1;

extern "IOKit" fn IOConnectTrap2(
    connect: io_connect_t,
    index: objc.uint32_t,
    p1: objc.uintptr_t,
    p2: objc.uintptr_t,
) callconv(.C) objc.kern_return_t;
pub const connectTrap2 = IOConnectTrap2;

extern "IOKit" fn IOConnectTrap3(
    connect: io_connect_t,
    index: objc.uint32_t,
    p1: objc.uintptr_t,
    p2: objc.uintptr_t,
    p3: objc.uintptr_t,
) callconv(.C) objc.kern_return_t;
pub const connectTrap3 = IOConnectTrap3;

extern "IOKit" fn IOConnectTrap4(
    connect: io_connect_t,
    index: objc.uint32_t,
    p1: objc.uintptr_t,
    p2: objc.uintptr_t,
    p3: objc.uintptr_t,
    p4: objc.uintptr_t,
) callconv(.C) objc.kern_return_t;
pub const connectTrap4 = IOConnectTrap4;

extern "IOKit" fn IOConnectTrap5(
    connect: io_connect_t,
    index: objc.uint32_t,
    p1: objc.uintptr_t,
    p2: objc.uintptr_t,
    p3: objc.uintptr_t,
    p4: objc.uintptr_t,
    p5: objc.uintptr_t,
) callconv(.C) objc.kern_return_t;
pub const connectTrap5 = IOConnectTrap5;

extern "IOKit" fn IOConnectTrap6(
    connect: io_connect_t,
    index: objc.uint32_t,
    p1: objc.uintptr_t,
    p2: objc.uintptr_t,
    p3: objc.uintptr_t,
    p4: objc.uintptr_t,
    p5: objc.uintptr_t,
    p6: objc.uintptr_t,
) callconv(.C) objc.kern_return_t;
pub const connectTrap6 = IOConnectTrap6;

extern "IOKit" fn IOConnectAddClient(connect: io_connect_t, client: io_connect_t) callconv(.C) objc.kern_return_t;
pub const connectAddClient = IOConnectAddClient;

extern "IOKit" fn IORegistryGetRootEntry(mainPort: objc.mach_port_t) callconv(.C) io_registry_entry_t;
pub const registryGetRootEntry = IORegistryGetRootEntry;

extern "IOKit" fn IORegistryEntryFromPath(mainPort: objc.mach_port_t, path: objc.io_string_t) callconv(.C) io_registry_entry_t;
pub const registryEntryFromPath = IORegistryEntryFromPath;

extern "IOKit" fn IORegistryEntryCopyFromPath(mainPort: objc.mach_port_t, path: core_foundation.StringRef) callconv(.C) io_registry_entry_t;
pub const registryEntryCopyFromPath = IORegistryEntryCopyFromPath;

pub const anon10121 = u32;
pub const anon10121_IORegistryIterateRecursively: u32 = 1;
pub const anon10121_IORegistryIterateParents: u32 = 2;

extern "IOKit" fn IORegistryCreateIterator(
    mainPort: objc.mach_port_t,
    plane: objc.io_name_t,
    options: OptionBits,
    iterator: ?*io_iterator_t,
) callconv(.C) objc.kern_return_t;
pub const registryCreateIterator = IORegistryCreateIterator;

extern "IOKit" fn IORegistryEntryCreateIterator(
    entry: io_registry_entry_t,
    plane: objc.io_name_t,
    options: OptionBits,
    iterator: ?*io_iterator_t,
) callconv(.C) objc.kern_return_t;
pub const registryEntryCreateIterator = IORegistryEntryCreateIterator;

extern "IOKit" fn IORegistryIteratorEnterEntry(iterator: io_iterator_t) callconv(.C) objc.kern_return_t;
pub const registryIteratorEnterEntry = IORegistryIteratorEnterEntry;

extern "IOKit" fn IORegistryIteratorExitEntry(iterator: io_iterator_t) callconv(.C) objc.kern_return_t;
pub const registryIteratorExitEntry = IORegistryIteratorExitEntry;

extern "IOKit" fn IORegistryEntryGetName(entry: io_registry_entry_t, name: objc.io_name_t) callconv(.C) objc.kern_return_t;
pub const registryEntryGetName = IORegistryEntryGetName;

extern "IOKit" fn IORegistryEntryGetNameInPlane(entry: io_registry_entry_t, plane: objc.io_name_t, name: objc.io_name_t) callconv(.C) objc.kern_return_t;
pub const registryEntryGetNameInPlane = IORegistryEntryGetNameInPlane;

extern "IOKit" fn IORegistryEntryGetLocationInPlane(entry: io_registry_entry_t, plane: objc.io_name_t, location: objc.io_name_t) callconv(.C) objc.kern_return_t;
pub const registryEntryGetLocationInPlane = IORegistryEntryGetLocationInPlane;

extern "IOKit" fn IORegistryEntryGetPath(entry: io_registry_entry_t, plane: objc.io_name_t, path: objc.io_string_t) callconv(.C) objc.kern_return_t;
pub const registryEntryGetPath = IORegistryEntryGetPath;

extern "IOKit" fn IORegistryEntryCopyPath(entry: io_registry_entry_t, plane: objc.io_name_t) callconv(.C) core_foundation.StringRef;
pub const registryEntryCopyPath = IORegistryEntryCopyPath;

extern "IOKit" fn IORegistryEntryGetRegistryEntryID(entry: io_registry_entry_t, entryID: ?*objc.uint64_t) callconv(.C) objc.kern_return_t;
pub const registryEntryGetRegistryEntryID = IORegistryEntryGetRegistryEntryID;

extern "IOKit" fn IORegistryEntryCreateCFProperties(
    entry: io_registry_entry_t,
    properties: ?*core_foundation.MutableDictionaryRef,
    allocator: core_foundation.AllocatorRef,
    options: OptionBits,
) callconv(.C) objc.kern_return_t;
pub const registryEntryCreateCFProperties = IORegistryEntryCreateCFProperties;

extern "IOKit" fn IORegistryEntryCreateCFProperty(
    entry: io_registry_entry_t,
    key: core_foundation.StringRef,
    allocator: core_foundation.AllocatorRef,
    options: OptionBits,
) callconv(.C) core_foundation.TypeRef;
pub const registryEntryCreateCFProperty = IORegistryEntryCreateCFProperty;

extern "IOKit" fn IORegistryEntrySearchCFProperty(
    entry: io_registry_entry_t,
    plane: objc.io_name_t,
    key: core_foundation.StringRef,
    allocator: core_foundation.AllocatorRef,
    options: OptionBits,
) callconv(.C) core_foundation.TypeRef;
pub const registryEntrySearchCFProperty = IORegistryEntrySearchCFProperty;

extern "IOKit" fn IORegistryEntryGetProperty(
    entry: io_registry_entry_t,
    propertyName: objc.io_name_t,
    buffer: objc.io_struct_inband_t,
    size: ?*objc.uint32_t,
) callconv(.C) objc.kern_return_t;
pub const registryEntryGetProperty = IORegistryEntryGetProperty;

extern "IOKit" fn IORegistryEntrySetCFProperties(entry: io_registry_entry_t, properties: core_foundation.TypeRef) callconv(.C) objc.kern_return_t;
pub const registryEntrySetCFProperties = IORegistryEntrySetCFProperties;

extern "IOKit" fn IORegistryEntrySetCFProperty(entry: io_registry_entry_t, propertyName: core_foundation.StringRef, property: core_foundation.TypeRef) callconv(.C) objc.kern_return_t;
pub const registryEntrySetCFProperty = IORegistryEntrySetCFProperty;

extern "IOKit" fn IORegistryEntryGetChildIterator(entry: io_registry_entry_t, plane: objc.io_name_t, iterator: ?*io_iterator_t) callconv(.C) objc.kern_return_t;
pub const registryEntryGetChildIterator = IORegistryEntryGetChildIterator;

extern "IOKit" fn IORegistryEntryGetChildEntry(entry: io_registry_entry_t, plane: objc.io_name_t, child: ?*io_registry_entry_t) callconv(.C) objc.kern_return_t;
pub const registryEntryGetChildEntry = IORegistryEntryGetChildEntry;

extern "IOKit" fn IORegistryEntryGetParentIterator(entry: io_registry_entry_t, plane: objc.io_name_t, iterator: ?*io_iterator_t) callconv(.C) objc.kern_return_t;
pub const registryEntryGetParentIterator = IORegistryEntryGetParentIterator;

extern "IOKit" fn IORegistryEntryGetParentEntry(entry: io_registry_entry_t, plane: objc.io_name_t, parent: ?*io_registry_entry_t) callconv(.C) objc.kern_return_t;
pub const registryEntryGetParentEntry = IORegistryEntryGetParentEntry;

extern "IOKit" fn IORegistryEntryInPlane(entry: io_registry_entry_t, plane: objc.io_name_t) callconv(.C) objc.boolean_t;
pub const registryEntryInPlane = IORegistryEntryInPlane;

extern "IOKit" fn IOServiceMatching(name: [*:0]const u8) callconv(.C) core_foundation.MutableDictionaryRef;
pub const serviceMatching = IOServiceMatching;

extern "IOKit" fn IOServiceNameMatching(name: [*:0]const u8) callconv(.C) core_foundation.MutableDictionaryRef;
pub const serviceNameMatching = IOServiceNameMatching;

extern "IOKit" fn IOBSDNameMatching(mainPort: objc.mach_port_t, options: objc.uint32_t, bsdName: [*:0]const u8) callconv(.C) core_foundation.MutableDictionaryRef;
pub const bsdNameMatching = IOBSDNameMatching;

extern "IOKit" fn IOOpenFirmwarePathMatching(mainPort: objc.mach_port_t, options: objc.uint32_t, path: [*:0]const u8) callconv(.C) core_foundation.MutableDictionaryRef;
pub const openFirmwarePathMatching = IOOpenFirmwarePathMatching;

extern "IOKit" fn IORegistryEntryIDMatching(entryID: objc.uint64_t) callconv(.C) core_foundation.MutableDictionaryRef;
pub const registryEntryIDMatching = IORegistryEntryIDMatching;

extern "IOKit" fn IOServiceOFPathToBSDName(mainPort: objc.mach_port_t, openFirmwarePath: objc.io_name_t, bsdName: objc.io_name_t) callconv(.C) objc.kern_return_t;
pub const serviceOFPathToBSDName = IOServiceOFPathToBSDName;

pub const AsyncCallback0 = ?*const fn (?*anyopaque, Return) callconv(.C) void;

pub const AsyncCallback1 = ?*const fn (?*anyopaque, Return, ?*anyopaque) callconv(.C) void;

pub const AsyncCallback2 = ?*const fn (
    ?*anyopaque,
    Return,
    ?*anyopaque,
    ?*anyopaque,
) callconv(.C) void;

pub const AsyncCallback = ?*const fn (
    ?*anyopaque,
    Return,
    ?*?*anyopaque,
    objc.uint32_t,
) callconv(.C) void;

pub extern "IOKit" fn OSGetNotificationFromMessage(
    msg: ?*objc.mach_msg_header_t,
    index: objc.uint32_t,
    @"type": ?*objc.uint32_t,
    reference: ?*objc.uintptr_t,
    content: ?*?*anyopaque,
    size: ?*objc.vm_size_t,
) callconv(.C) objc.kern_return_t;

extern "IOKit" fn IOCatalogueSendData(
    mainPort: objc.mach_port_t,
    flag: objc.uint32_t,
    buffer: [*:0]const u8,
    size: objc.uint32_t,
) callconv(.C) objc.kern_return_t;
pub const catalogueSendData = IOCatalogueSendData;

extern "IOKit" fn IOCatalogueTerminate(mainPort: objc.mach_port_t, flag: objc.uint32_t, description: objc.io_name_t) callconv(.C) objc.kern_return_t;
pub const catalogueTerminate = IOCatalogueTerminate;

extern "IOKit" fn IOCatalogueGetData(
    mainPort: objc.mach_port_t,
    flag: objc.uint32_t,
    buffer: ?*?*c_char,
    size: ?*objc.uint32_t,
) callconv(.C) objc.kern_return_t;
pub const catalogueGetData = IOCatalogueGetData;

extern "IOKit" fn IOCatalogueModuleLoaded(mainPort: objc.mach_port_t, name: objc.io_name_t) callconv(.C) objc.kern_return_t;
pub const catalogueModuleLoaded = IOCatalogueModuleLoaded;

extern "IOKit" fn IOCatalogueReset(mainPort: objc.mach_port_t, flag: objc.uint32_t) callconv(.C) objc.kern_return_t;
pub const catalogueReset = IOCatalogueReset;
