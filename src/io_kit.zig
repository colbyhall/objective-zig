// THIS FILE IS AUTOGENERATED. MODIFICATIONS WILL NOT BE MAINTAINED.

const std = @import("std");
const objc = @import("objc.zig"); // Objective-C Runtime in zig.
const core_foundation = @import("core_foundation.zig"); // Framework dependency CoreFoundation.

pub const Return = objc.kern_return_t;

pub const OptionBits = objc.UInt32;

pub const Fixed = objc.SInt32;

pub const Version = objc.UInt32;

pub const ItemCount = objc.UInt32;

pub const CacheMode = objc.UInt32;

pub const ByteCount32 = objc.UInt32;

pub const ByteCount64 = objc.UInt64;

pub const PhysicalAddress32 = objc.UInt32;

pub const PhysicalAddress64 = objc.UInt64;

pub const PhysicalLength32 = objc.UInt32;

pub const PhysicalLength64 = objc.UInt64;

pub const VirtualAddress = objc.mach_vm_address_t;

pub const ByteCount = ByteCount64;

pub const LogicalAddress = VirtualAddress;

pub const PhysicalAddress = PhysicalAddress64;

pub const PhysicalLength = PhysicalLength64;

pub const PhysicalRange = extern struct {
    address: PhysicalAddress,
    length: ByteCount,
};

pub const VirtualRange = extern struct {
    address: VirtualAddress,
    length: ByteCount,
};

pub const AddressRange = VirtualRange;

pub const NamedValue = extern struct {
    value: i32,
    name: ?*i8,
};

pub const Alignment = u32;

pub const io_object_t = objc.mach_port_t;

pub const io_connect_t = io_object_t;

pub const io_enumerator_t = io_object_t;

pub const io_ident_t = io_object_t;

pub const io_iterator_t = io_object_t;

pub const io_registry_entry_t = io_object_t;

pub const io_service_t = io_object_t;

pub const uext_object_t = io_object_t;

pub const anon331 = enum(u32) {
    kIODefaultMemoryType = 0,
};

pub const anon371 = enum(u32) {
    kIODefaultCache = 0,
    kIOInhibitCache = 1,
    kIOWriteThruCache = 2,
    kIOCopybackCache = 3,
    kIOWriteCombineCache = 4,
    kIOCopybackInnerCache = 5,
    kIOPostedWrite = 6,
    kIORealTimeCache = 7,
    kIOPostedReordered = 8,
    kIOPostedCombinedReordered = 9,
};

pub const anon511 = enum(u32) {
    kIOMapAnywhere = 1,
    kIOMapCacheMask = 3840,
    kIOMapCacheShift = 8,
    kIOMapDefaultCache = 0,
    kIOMapInhibitCache = 256,
    kIOMapWriteThruCache = 512,
    kIOMapCopybackCache = 768,
    kIOMapWriteCombineCache = 1024,
    kIOMapCopybackInnerCache = 1280,
    kIOMapPostedWrite = 1536,
    kIOMapRealTimeCache = 1792,
    kIOMapPostedReordered = 2048,
    kIOMapPostedCombinedReordered = 2304,
    kIOMapUserOptionsMask = 4095,
    kIOMapReadOnly = 4096,
    kIOMapStatic = 16777216,
    kIOMapReference = 33554432,
    kIOMapUnique = 67108864,
    kIOMapPrefault = 268435456,
    kIOMapOverwrite = 536870912,
    kIOMapGuardedMask = -1073741824,
    kIOMapGuardedSmall = 1073741824,
    kIOMapGuardedLarge = -2147483648,
};

pub const anon2001 = enum(u32) {
    kNanosecondScale = 1,
    kMicrosecondScale = 1000,
    kMillisecondScale = 1000000,
    kSecondScale = 1000000000,
    kTickScale = 10000000,
};

pub const anon2081 = enum(i32) {
    kIOConnectMethodVarOutputSize = -3,
};

pub const DeviceNumber = u32;

pub const anon2231 = enum(u32) {
    kIOMaxBusStall40usec = 40000,
    kIOMaxBusStall30usec = 30000,
    kIOMaxBusStall25usec = 25000,
    kIOMaxBusStall20usec = 20000,
    kIOMaxBusStall10usec = 10000,
    kIOMaxBusStall5usec = 5000,
    kIOMaxBusStallNone = 0,
};

pub const anon2931 = enum(u32) {
    kIOSystemStateSleepDescriptionHibernateStateInactive = 0,
    kIOSystemStateSleepDescriptionHibernateStateHibernating = 1,
    kIOSystemStateSleepDescriptionHibernateStateWakingFromHibernate = 2,
};

pub const anon461 = enum(u32) {
    kFirstIOKitNotificationType = 100,
    kIOServicePublishNotificationType = 100,
    kIOServiceMatchedNotificationType = 101,
    kIOServiceTerminatedNotificationType = 102,
    kIOAsyncCompletionNotificationType = 150,
    kIOServiceMessageNotificationType = 160,
    kLastIOKitNotificationType = 199,
    kIOKitNoticationTypeMask = 4095,
    kIOKitNoticationTypeSizeAdjShift = 30,
    kIOKitNoticationMsgSizeMask = 3,
};

pub const anon611 = enum(u32) {
    kOSNotificationMessageID = 53,
    kOSAsyncCompleteMessageID = 57,
    kMaxAsyncArgs = 16,
};

pub const anon671 = enum(u32) {
    kIOAsyncReservedIndex = 0,
    kIOAsyncReservedCount = 1,
    kIOAsyncCalloutFuncIndex = 1,
    kIOAsyncCalloutRefconIndex = 2,
    kIOAsyncCalloutCount = 3,
    kIOMatchingCalloutFuncIndex = 1,
    kIOMatchingCalloutRefconIndex = 2,
    kIOMatchingCalloutCount = 3,
    kIOInterestCalloutFuncIndex = 1,
    kIOInterestCalloutRefconIndex = 2,
    kIOInterestCalloutServiceIndex = 3,
    kIOInterestCalloutCount = 4,
};

pub const anon881 = enum(u32) {
    kOSAsyncRef64Count = 8,
    kOSAsyncRef64Size = 64,
};

pub const OSAsyncReference64 = [8] objc.io_user_reference_t;

pub const OSNotificationHeader64 = extern struct {
    size: objc.mach_msg_size_t,
    @"type": objc.natural_t,
    reference: OSAsyncReference64,
    content: *u8,
};

pub const ServiceInterestContent64 = extern struct {
    messageType: objc.natural_t,
    messageArgument: [1] objc.io_user_reference_t,
};

pub const anon1161 = enum(u32) {
    kOSAsyncRefCount = 8,
    kOSAsyncRefSize = 32,
};

pub const OSAsyncReference = [8] objc.natural_t;

pub const OSNotificationHeader = extern struct {
    size: objc.mach_msg_size_t,
    @"type": objc.natural_t,
    reference: OSAsyncReference,
    content: *u8,
};

pub const ServiceInterestContent = extern struct {
    messageType: objc.natural_t,
    messageArgument: [1] ?*anyopaque,
};

pub const AsyncCompletionContent = extern struct {
    result: Return,
    args: *?*anyopaque,
};

pub const NotificationPort = extern struct {};

pub const NotificationPortRef = ?*NotificationPort;

pub const ServiceMatchingCallback = ?*const fn(?*anyopaque, io_iterator_t) callconv(.C) void;

pub const ServiceInterestCallback = ?*const fn(?*anyopaque, io_service_t, objc.uint32_t, ?*anyopaque, ) callconv(.C) void;

pub extern "IOKit" fn MainPort(bootstrapPort: objc.mach_port_t, mainPort: ?*objc.mach_port_t) callconv(.C) objc.kern_return_t;

pub extern "IOKit" fn MasterPort(bootstrapPort: objc.mach_port_t, mainPort: ?*objc.mach_port_t) callconv(.C) objc.kern_return_t;

pub extern "IOKit" fn NotificationPortCreate(mainPort: objc.mach_port_t) callconv(.C) NotificationPortRef;

pub extern "IOKit" fn NotificationPortDestroy(notify: NotificationPortRef) callconv(.C) void;

pub extern "IOKit" fn NotificationPortGetRunLoopSource(notify: NotificationPortRef) callconv(.C) core_foundation.RunLoopSourceRef;

pub extern "IOKit" fn NotificationPortGetMachPort(notify: NotificationPortRef) callconv(.C) objc.mach_port_t;

pub extern "IOKit" fn NotificationPortSetImportanceReceiver(notify: NotificationPortRef) callconv(.C) objc.kern_return_t;

pub extern "IOKit" fn NotificationPortSetDispatchQueue(notify: NotificationPortRef, queue: objc.dispatch_queue_t) callconv(.C) void;

pub extern "IOKit" fn DispatchCalloutFromMessage(unused: ?*anyopaque, msg: ?*objc.mach_msg_header_t, reference: ?*anyopaque) callconv(.C) void;

pub extern "IOKit" fn CreateReceivePort(msgType: objc.uint32_t, recvPort: ?*objc.mach_port_t) callconv(.C) objc.kern_return_t;

pub extern "IOKit" fn ObjectRelease(object: io_object_t) callconv(.C) objc.kern_return_t;

pub extern "IOKit" fn ObjectRetain(object: io_object_t) callconv(.C) objc.kern_return_t;

pub extern "IOKit" fn ObjectGetClass(object: io_object_t, className: objc.io_name_t) callconv(.C) objc.kern_return_t;

pub extern "IOKit" fn ObjectCopyClass(object: io_object_t) callconv(.C) core_foundation.StringRef;

pub extern "IOKit" fn ObjectCopySuperclassForClass(classname: core_foundation.StringRef) callconv(.C) core_foundation.StringRef;

pub extern "IOKit" fn ObjectCopyBundleIdentifierForClass(classname: core_foundation.StringRef) callconv(.C) core_foundation.StringRef;

pub extern "IOKit" fn ObjectConformsTo(object: io_object_t, className: objc.io_name_t) callconv(.C) objc.boolean_t;

pub extern "IOKit" fn ObjectIsEqualTo(object: io_object_t, anObject: io_object_t) callconv(.C) objc.boolean_t;

pub extern "IOKit" fn ObjectGetKernelRetainCount(object: io_object_t) callconv(.C) objc.uint32_t;

pub extern "IOKit" fn ObjectGetUserRetainCount(object: io_object_t) callconv(.C) objc.uint32_t;

pub extern "IOKit" fn ObjectGetRetainCount(object: io_object_t) callconv(.C) objc.uint32_t;

pub extern "IOKit" fn IteratorNext(iterator: io_iterator_t) callconv(.C) io_object_t;

pub extern "IOKit" fn IteratorReset(iterator: io_iterator_t) callconv(.C) void;

pub extern "IOKit" fn IteratorIsValid(iterator: io_iterator_t) callconv(.C) objc.boolean_t;

pub extern "IOKit" fn ServiceGetMatchingService(mainPort: objc.mach_port_t, matching: core_foundation.DictionaryRef) callconv(.C) io_service_t;

pub extern "IOKit" fn ServiceGetMatchingServices(mainPort: objc.mach_port_t, matching: core_foundation.DictionaryRef, existing: ?*io_iterator_t) callconv(.C) objc.kern_return_t;

pub extern "IOKit" fn ServiceAddNotification(mainPort: objc.mach_port_t, notificationType: objc.io_name_t, matching: core_foundation.DictionaryRef, wakePort: objc.mach_port_t, reference: objc.uintptr_t, notification: ?*io_iterator_t, ) callconv(.C) objc.kern_return_t;

pub extern "IOKit" fn ServiceAddMatchingNotification(notifyPort: NotificationPortRef, notificationType: objc.io_name_t, matching: core_foundation.DictionaryRef, callback: ServiceMatchingCallback, refCon: ?*anyopaque, notification: ?*io_iterator_t, ) callconv(.C) objc.kern_return_t;

pub extern "IOKit" fn ServiceAddInterestNotification(notifyPort: NotificationPortRef, service: io_service_t, interestType: objc.io_name_t, callback: ServiceInterestCallback, refCon: ?*anyopaque, notification: ?*io_object_t, ) callconv(.C) objc.kern_return_t;

pub extern "IOKit" fn ServiceMatchPropertyTable(service: io_service_t, matching: core_foundation.DictionaryRef, matches: ?*objc.boolean_t) callconv(.C) objc.kern_return_t;

pub extern "IOKit" fn ServiceGetBusyState(service: io_service_t, busyState: ?*objc.uint32_t) callconv(.C) objc.kern_return_t;

pub extern "IOKit" fn ServiceWaitQuiet(service: io_service_t, waitTime: ?*objc.mach_timespec_t) callconv(.C) objc.kern_return_t;

pub extern "IOKit" fn KitGetBusyState(mainPort: objc.mach_port_t, busyState: ?*objc.uint32_t) callconv(.C) objc.kern_return_t;

pub extern "IOKit" fn KitWaitQuietWithOptions(mainPort: objc.mach_port_t, waitTime: ?*objc.mach_timespec_t, options: OptionBits) callconv(.C) objc.kern_return_t;

pub extern "IOKit" fn KitWaitQuiet(mainPort: objc.mach_port_t, waitTime: ?*objc.mach_timespec_t) callconv(.C) objc.kern_return_t;

pub extern "IOKit" fn ServiceOpen(service: io_service_t, owningTask: objc.task_port_t, @"type": objc.uint32_t, connect: ?*io_connect_t, ) callconv(.C) objc.kern_return_t;

pub extern "IOKit" fn ServiceRequestProbe(service: io_service_t, options: objc.uint32_t) callconv(.C) objc.kern_return_t;

pub const anon6101 = enum(u32) {
    kIOServiceInteractionAllowed = 1,
};

pub extern "IOKit" fn ServiceAuthorize(service: io_service_t, options: objc.uint32_t) callconv(.C) objc.kern_return_t;

pub extern "IOKit" fn ServiceOpenAsFileDescriptor(service: io_service_t, oflag: i32) callconv(.C) i32;

pub extern "IOKit" fn ServiceClose(connect: io_connect_t) callconv(.C) objc.kern_return_t;

pub extern "IOKit" fn ConnectAddRef(connect: io_connect_t) callconv(.C) objc.kern_return_t;

pub extern "IOKit" fn ConnectRelease(connect: io_connect_t) callconv(.C) objc.kern_return_t;

pub extern "IOKit" fn ConnectGetService(connect: io_connect_t, service: ?*io_service_t) callconv(.C) objc.kern_return_t;

pub extern "IOKit" fn ConnectSetNotificationPort(connect: io_connect_t, @"type": objc.uint32_t, port: objc.mach_port_t, reference: objc.uintptr_t, ) callconv(.C) objc.kern_return_t;

pub extern "IOKit" fn ConnectMapMemory(connect: io_connect_t, memoryType: objc.uint32_t, intoTask: objc.task_port_t, atAddress: ?*objc.mach_vm_address_t, ofSize: ?*objc.mach_vm_size_t, options: OptionBits, ) callconv(.C) objc.kern_return_t;

pub extern "IOKit" fn ConnectMapMemory64(connect: io_connect_t, memoryType: objc.uint32_t, intoTask: objc.task_port_t, atAddress: ?*objc.mach_vm_address_t, ofSize: ?*objc.mach_vm_size_t, options: OptionBits, ) callconv(.C) objc.kern_return_t;

pub extern "IOKit" fn ConnectUnmapMemory(connect: io_connect_t, memoryType: objc.uint32_t, fromTask: objc.task_port_t, atAddress: objc.mach_vm_address_t, ) callconv(.C) objc.kern_return_t;

pub extern "IOKit" fn ConnectUnmapMemory64(connect: io_connect_t, memoryType: objc.uint32_t, fromTask: objc.task_port_t, atAddress: objc.mach_vm_address_t, ) callconv(.C) objc.kern_return_t;

pub extern "IOKit" fn ConnectSetCFProperties(connect: io_connect_t, properties: core_foundation.TypeRef) callconv(.C) objc.kern_return_t;

pub extern "IOKit" fn ConnectSetCFProperty(connect: io_connect_t, propertyName: core_foundation.StringRef, property: core_foundation.TypeRef) callconv(.C) objc.kern_return_t;

pub extern "IOKit" fn ConnectCallMethod(connection: objc.mach_port_t, selector: objc.uint32_t, input: ?*objc.uint64_t, inputCnt: objc.uint32_t, inputStruct: ?*anyopaque, inputStructCnt: objc.size_t, output: ?*objc.uint64_t, outputCnt: ?*objc.uint32_t, outputStruct: ?*anyopaque, outputStructCnt: ?*objc.size_t, ) callconv(.C) objc.kern_return_t;

pub extern "IOKit" fn ConnectCallAsyncMethod(connection: objc.mach_port_t, selector: objc.uint32_t, wake_port: objc.mach_port_t, reference: ?*objc.uint64_t, referenceCnt: objc.uint32_t, input: ?*objc.uint64_t, inputCnt: objc.uint32_t, inputStruct: ?*anyopaque, inputStructCnt: objc.size_t, output: ?*objc.uint64_t, outputCnt: ?*objc.uint32_t, outputStruct: ?*anyopaque, outputStructCnt: ?*objc.size_t, ) callconv(.C) objc.kern_return_t;

pub extern "IOKit" fn ConnectCallStructMethod(connection: objc.mach_port_t, selector: objc.uint32_t, inputStruct: ?*anyopaque, inputStructCnt: objc.size_t, outputStruct: ?*anyopaque, outputStructCnt: ?*objc.size_t, ) callconv(.C) objc.kern_return_t;

pub extern "IOKit" fn ConnectCallAsyncStructMethod(connection: objc.mach_port_t, selector: objc.uint32_t, wake_port: objc.mach_port_t, reference: ?*objc.uint64_t, referenceCnt: objc.uint32_t, inputStruct: ?*anyopaque, inputStructCnt: objc.size_t, outputStruct: ?*anyopaque, outputStructCnt: ?*objc.size_t, ) callconv(.C) objc.kern_return_t;

pub extern "IOKit" fn ConnectCallScalarMethod(connection: objc.mach_port_t, selector: objc.uint32_t, input: ?*objc.uint64_t, inputCnt: objc.uint32_t, output: ?*objc.uint64_t, outputCnt: ?*objc.uint32_t, ) callconv(.C) objc.kern_return_t;

pub extern "IOKit" fn ConnectCallAsyncScalarMethod(connection: objc.mach_port_t, selector: objc.uint32_t, wake_port: objc.mach_port_t, reference: ?*objc.uint64_t, referenceCnt: objc.uint32_t, input: ?*objc.uint64_t, inputCnt: objc.uint32_t, output: ?*objc.uint64_t, outputCnt: ?*objc.uint32_t, ) callconv(.C) objc.kern_return_t;

pub extern "IOKit" fn ConnectTrap0(connect: io_connect_t, index: objc.uint32_t) callconv(.C) objc.kern_return_t;

pub extern "IOKit" fn ConnectTrap1(connect: io_connect_t, index: objc.uint32_t, p1: objc.uintptr_t) callconv(.C) objc.kern_return_t;

pub extern "IOKit" fn ConnectTrap2(connect: io_connect_t, index: objc.uint32_t, p1: objc.uintptr_t, p2: objc.uintptr_t, ) callconv(.C) objc.kern_return_t;

pub extern "IOKit" fn ConnectTrap3(connect: io_connect_t, index: objc.uint32_t, p1: objc.uintptr_t, p2: objc.uintptr_t, p3: objc.uintptr_t, ) callconv(.C) objc.kern_return_t;

pub extern "IOKit" fn ConnectTrap4(connect: io_connect_t, index: objc.uint32_t, p1: objc.uintptr_t, p2: objc.uintptr_t, p3: objc.uintptr_t, p4: objc.uintptr_t, ) callconv(.C) objc.kern_return_t;

pub extern "IOKit" fn ConnectTrap5(connect: io_connect_t, index: objc.uint32_t, p1: objc.uintptr_t, p2: objc.uintptr_t, p3: objc.uintptr_t, p4: objc.uintptr_t, p5: objc.uintptr_t, ) callconv(.C) objc.kern_return_t;

pub extern "IOKit" fn ConnectTrap6(connect: io_connect_t, index: objc.uint32_t, p1: objc.uintptr_t, p2: objc.uintptr_t, p3: objc.uintptr_t, p4: objc.uintptr_t, p5: objc.uintptr_t, p6: objc.uintptr_t, ) callconv(.C) objc.kern_return_t;

pub extern "IOKit" fn ConnectAddClient(connect: io_connect_t, client: io_connect_t) callconv(.C) objc.kern_return_t;

pub extern "IOKit" fn RegistryGetRootEntry(mainPort: objc.mach_port_t) callconv(.C) io_registry_entry_t;

pub extern "IOKit" fn RegistryEntryFromPath(mainPort: objc.mach_port_t, path: objc.io_string_t) callconv(.C) io_registry_entry_t;

pub extern "IOKit" fn RegistryEntryCopyFromPath(mainPort: objc.mach_port_t, path: core_foundation.StringRef) callconv(.C) io_registry_entry_t;

pub const anon10121 = enum(u32) {
    kIORegistryIterateRecursively = 1,
    kIORegistryIterateParents = 2,
};

pub extern "IOKit" fn RegistryCreateIterator(mainPort: objc.mach_port_t, plane: objc.io_name_t, options: OptionBits, iterator: ?*io_iterator_t, ) callconv(.C) objc.kern_return_t;

pub extern "IOKit" fn RegistryEntryCreateIterator(entry: io_registry_entry_t, plane: objc.io_name_t, options: OptionBits, iterator: ?*io_iterator_t, ) callconv(.C) objc.kern_return_t;

pub extern "IOKit" fn RegistryIteratorEnterEntry(iterator: io_iterator_t) callconv(.C) objc.kern_return_t;

pub extern "IOKit" fn RegistryIteratorExitEntry(iterator: io_iterator_t) callconv(.C) objc.kern_return_t;

pub extern "IOKit" fn RegistryEntryGetName(entry: io_registry_entry_t, name: objc.io_name_t) callconv(.C) objc.kern_return_t;

pub extern "IOKit" fn RegistryEntryGetNameInPlane(entry: io_registry_entry_t, plane: objc.io_name_t, name: objc.io_name_t) callconv(.C) objc.kern_return_t;

pub extern "IOKit" fn RegistryEntryGetLocationInPlane(entry: io_registry_entry_t, plane: objc.io_name_t, location: objc.io_name_t) callconv(.C) objc.kern_return_t;

pub extern "IOKit" fn RegistryEntryGetPath(entry: io_registry_entry_t, plane: objc.io_name_t, path: objc.io_string_t) callconv(.C) objc.kern_return_t;

pub extern "IOKit" fn RegistryEntryCopyPath(entry: io_registry_entry_t, plane: objc.io_name_t) callconv(.C) core_foundation.StringRef;

pub extern "IOKit" fn RegistryEntryGetRegistryEntryID(entry: io_registry_entry_t, entryID: ?*objc.uint64_t) callconv(.C) objc.kern_return_t;

pub extern "IOKit" fn RegistryEntryCreateCFProperties(entry: io_registry_entry_t, properties: ?*core_foundation.MutableDictionaryRef, allocator: core_foundation.AllocatorRef, options: OptionBits, ) callconv(.C) objc.kern_return_t;

pub extern "IOKit" fn RegistryEntryCreateCFProperty(entry: io_registry_entry_t, key: core_foundation.StringRef, allocator: core_foundation.AllocatorRef, options: OptionBits, ) callconv(.C) core_foundation.TypeRef;

pub extern "IOKit" fn RegistryEntrySearchCFProperty(entry: io_registry_entry_t, plane: objc.io_name_t, key: core_foundation.StringRef, allocator: core_foundation.AllocatorRef, options: OptionBits, ) callconv(.C) core_foundation.TypeRef;

pub extern "IOKit" fn RegistryEntryGetProperty(entry: io_registry_entry_t, propertyName: objc.io_name_t, buffer: objc.io_struct_inband_t, size: ?*objc.uint32_t, ) callconv(.C) objc.kern_return_t;

pub extern "IOKit" fn RegistryEntrySetCFProperties(entry: io_registry_entry_t, properties: core_foundation.TypeRef) callconv(.C) objc.kern_return_t;

pub extern "IOKit" fn RegistryEntrySetCFProperty(entry: io_registry_entry_t, propertyName: core_foundation.StringRef, property: core_foundation.TypeRef) callconv(.C) objc.kern_return_t;

pub extern "IOKit" fn RegistryEntryGetChildIterator(entry: io_registry_entry_t, plane: objc.io_name_t, iterator: ?*io_iterator_t) callconv(.C) objc.kern_return_t;

pub extern "IOKit" fn RegistryEntryGetChildEntry(entry: io_registry_entry_t, plane: objc.io_name_t, child: ?*io_registry_entry_t) callconv(.C) objc.kern_return_t;

pub extern "IOKit" fn RegistryEntryGetParentIterator(entry: io_registry_entry_t, plane: objc.io_name_t, iterator: ?*io_iterator_t) callconv(.C) objc.kern_return_t;

pub extern "IOKit" fn RegistryEntryGetParentEntry(entry: io_registry_entry_t, plane: objc.io_name_t, parent: ?*io_registry_entry_t) callconv(.C) objc.kern_return_t;

pub extern "IOKit" fn RegistryEntryInPlane(entry: io_registry_entry_t, plane: objc.io_name_t) callconv(.C) objc.boolean_t;

pub extern "IOKit" fn ServiceMatching(name: ?*i8) callconv(.C) core_foundation.MutableDictionaryRef;

pub extern "IOKit" fn ServiceNameMatching(name: ?*i8) callconv(.C) core_foundation.MutableDictionaryRef;

pub extern "IOKit" fn BSDNameMatching(mainPort: objc.mach_port_t, options: objc.uint32_t, bsdName: ?*i8) callconv(.C) core_foundation.MutableDictionaryRef;

pub extern "IOKit" fn OpenFirmwarePathMatching(mainPort: objc.mach_port_t, options: objc.uint32_t, path: ?*i8) callconv(.C) core_foundation.MutableDictionaryRef;

pub extern "IOKit" fn RegistryEntryIDMatching(entryID: objc.uint64_t) callconv(.C) core_foundation.MutableDictionaryRef;

pub extern "IOKit" fn ServiceOFPathToBSDName(mainPort: objc.mach_port_t, openFirmwarePath: objc.io_name_t, bsdName: objc.io_name_t) callconv(.C) objc.kern_return_t;

pub const AsyncCallback0 = ?*const fn(?*anyopaque, Return) callconv(.C) void;

pub const AsyncCallback1 = ?*const fn(?*anyopaque, Return, ?*anyopaque) callconv(.C) void;

pub const AsyncCallback2 = ?*const fn(?*anyopaque, Return, ?*anyopaque, ?*anyopaque, ) callconv(.C) void;

pub const AsyncCallback = ?*const fn(?*anyopaque, Return, ?*?*anyopaque, objc.uint32_t, ) callconv(.C) void;

pub extern "IOKit" fn OSGetNotificationFromMessage(msg: ?*objc.mach_msg_header_t, index: objc.uint32_t, @"type": ?*objc.uint32_t, reference: ?*objc.uintptr_t, content: ?*?*anyopaque, size: ?*objc.vm_size_t, ) callconv(.C) objc.kern_return_t;

pub extern "IOKit" fn CatalogueSendData(mainPort: objc.mach_port_t, flag: objc.uint32_t, buffer: ?*i8, size: objc.uint32_t, ) callconv(.C) objc.kern_return_t;

pub extern "IOKit" fn CatalogueTerminate(mainPort: objc.mach_port_t, flag: objc.uint32_t, description: objc.io_name_t) callconv(.C) objc.kern_return_t;

pub extern "IOKit" fn CatalogueGetData(mainPort: objc.mach_port_t, flag: objc.uint32_t, buffer: ?*?*i8, size: ?*objc.uint32_t, ) callconv(.C) objc.kern_return_t;

pub extern "IOKit" fn CatalogueModuleLoaded(mainPort: objc.mach_port_t, name: objc.io_name_t) callconv(.C) objc.kern_return_t;

pub extern "IOKit" fn CatalogueReset(mainPort: objc.mach_port_t, flag: objc.uint32_t) callconv(.C) objc.kern_return_t;

