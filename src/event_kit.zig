// THIS FILE IS AUTOGENERATED. MODIFICATIONS WILL NOT BE MAINTAINED.

const std = @import("std");
const objc = @import("objc.zig"); // Objective-C Runtime in zig.
const foundation = @import("foundation.zig"); // Framework dependency Foundation.
const core_graphics = @import("core_graphics.zig"); // Framework dependency CoreGraphics.
const app_kit = @import("app_kit.zig"); // Framework dependency AppKit.
const core_location = @import("core_location.zig"); // Framework dependency CoreLocation.
const address_book = @import("address_book.zig"); // Framework dependency AddressBook.
const map_kit = @import("map_kit.zig"); // Framework dependency MapKit.

pub const AuthorizationStatus = objc.NSInteger;
pub const AuthorizationStatus_NotDetermined: objc.NSInteger = 0;
pub const AuthorizationStatus_Restricted: objc.NSInteger = 1;
pub const AuthorizationStatus_Denied: objc.NSInteger = 2;
pub const AuthorizationStatus_FullAccess: objc.NSInteger = 3;
pub const AuthorizationStatus_WriteOnly: objc.NSInteger = 4;
pub const AuthorizationStatus_Authorized: objc.NSInteger = 3;

pub const Weekday = objc.NSInteger;
pub const Weekday_Sunday: objc.NSInteger = 1;
pub const Weekday_Monday: objc.NSInteger = 2;
pub const Weekday_Tuesday: objc.NSInteger = 3;
pub const Weekday_Wednesday: objc.NSInteger = 4;
pub const Weekday_Thursday: objc.NSInteger = 5;
pub const Weekday_Friday: objc.NSInteger = 6;
pub const Weekday_Saturday: objc.NSInteger = 7;

pub const RecurrenceFrequency = objc.NSInteger;
pub const RecurrenceFrequency_Daily: objc.NSInteger = 0;
pub const RecurrenceFrequency_Weekly: objc.NSInteger = 1;
pub const RecurrenceFrequency_Monthly: objc.NSInteger = 2;
pub const RecurrenceFrequency_Yearly: objc.NSInteger = 3;

pub const ParticipantType = objc.NSInteger;
pub const ParticipantType_Unknown: objc.NSInteger = 0;
pub const ParticipantType_Person: objc.NSInteger = 1;
pub const ParticipantType_Room: objc.NSInteger = 2;
pub const ParticipantType_Resource: objc.NSInteger = 3;
pub const ParticipantType_Group: objc.NSInteger = 4;

pub const ParticipantRole = objc.NSInteger;
pub const ParticipantRole_Unknown: objc.NSInteger = 0;
pub const ParticipantRole_Required: objc.NSInteger = 1;
pub const ParticipantRole_Optional: objc.NSInteger = 2;
pub const ParticipantRole_Chair: objc.NSInteger = 3;
pub const ParticipantRole_NonParticipant: objc.NSInteger = 4;

pub const ParticipantScheduleStatus = objc.NSInteger;
pub const ParticipantScheduleStatus_None: objc.NSInteger = 0;
pub const ParticipantScheduleStatus_Pending: objc.NSInteger = 1;
pub const ParticipantScheduleStatus_Sent: objc.NSInteger = 2;
pub const ParticipantScheduleStatus_Delivered: objc.NSInteger = 3;
pub const ParticipantScheduleStatus_RecipientNotRecognized: objc.NSInteger = 4;
pub const ParticipantScheduleStatus_NoPrivileges: objc.NSInteger = 5;
pub const ParticipantScheduleStatus_DeliveryFailed: objc.NSInteger = 6;
pub const ParticipantScheduleStatus_CannotDeliver: objc.NSInteger = 7;
pub const ParticipantScheduleStatus_RecipientNotAllowed: objc.NSInteger = 8;

pub const ParticipantStatus = objc.NSInteger;
pub const ParticipantStatus_Unknown: objc.NSInteger = 0;
pub const ParticipantStatus_Pending: objc.NSInteger = 1;
pub const ParticipantStatus_Accepted: objc.NSInteger = 2;
pub const ParticipantStatus_Declined: objc.NSInteger = 3;
pub const ParticipantStatus_Tentative: objc.NSInteger = 4;
pub const ParticipantStatus_Delegated: objc.NSInteger = 5;
pub const ParticipantStatus_Completed: objc.NSInteger = 6;
pub const ParticipantStatus_InProcess: objc.NSInteger = 7;

pub const CalendarType = objc.NSInteger;
pub const CalendarType_Local: objc.NSInteger = 0;
pub const CalendarType_CalDAV: objc.NSInteger = 1;
pub const CalendarType_Exchange: objc.NSInteger = 2;
pub const CalendarType_Subscription: objc.NSInteger = 3;
pub const CalendarType_Birthday: objc.NSInteger = 4;

pub const CalendarEventAvailabilityMask = objc.NSUInteger;
pub const CalendarEventAvailabilityMask_None: objc.NSUInteger = 0;
pub const CalendarEventAvailabilityMask_Busy: objc.NSUInteger = 1;
pub const CalendarEventAvailabilityMask_Free: objc.NSUInteger = 2;
pub const CalendarEventAvailabilityMask_Tentative: objc.NSUInteger = 4;
pub const CalendarEventAvailabilityMask_Unavailable: objc.NSUInteger = 8;

pub const SourceType = objc.NSInteger;
pub const SourceType_Local: objc.NSInteger = 0;
pub const SourceType_Exchange: objc.NSInteger = 1;
pub const SourceType_CalDAV: objc.NSInteger = 2;
pub const SourceType_MobileMe: objc.NSInteger = 3;
pub const SourceType_Subscribed: objc.NSInteger = 4;
pub const SourceType_Birthdays: objc.NSInteger = 5;

pub const EntityType = objc.NSUInteger;
pub const EntityType_Event: objc.NSUInteger = 0;
pub const EntityType_Reminder: objc.NSUInteger = 1;

pub const EntityMask = objc.NSUInteger;
pub const EntityMask_Event: objc.NSUInteger = 1;
pub const EntityMask_Reminder: objc.NSUInteger = 2;

pub const AlarmProximity = objc.NSInteger;
pub const AlarmProximity_None: objc.NSInteger = 0;
pub const AlarmProximity_Enter: objc.NSInteger = 1;
pub const AlarmProximity_Leave: objc.NSInteger = 2;

pub const AlarmType = objc.NSInteger;
pub const AlarmType_Display: objc.NSInteger = 0;
pub const AlarmType_Audio: objc.NSInteger = 1;
pub const AlarmType_Procedure: objc.NSInteger = 2;
pub const AlarmType_Email: objc.NSInteger = 3;

pub const ReminderPriority = objc.NSUInteger;
pub const ReminderPriority_None: objc.NSUInteger = 0;
pub const ReminderPriority_High: objc.NSUInteger = 1;
pub const ReminderPriority_Medium: objc.NSUInteger = 5;
pub const ReminderPriority_Low: objc.NSUInteger = 9;

/// https://developer.apple.com/documentation/EventKit/EKObject?language=objc
pub const Object = opaque {
    pub const Internal = objc.ExternClass("EKObject", @This(), objc.NSObject, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn reset(_self: *@This()) void {
        return objc.msgSend(_self, "reset", void, .{});
    }

    pub fn rollback(_self: *@This()) void {
        return objc.msgSend(_self, "rollback", void, .{});
    }

    pub fn refresh(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "refresh", objc.BOOL, .{});
    }

    pub fn hasChanges(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "hasChanges", objc.BOOL, .{});
    }

    pub fn isNew(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isNew", objc.BOOL, .{});
    }
};

/// https://developer.apple.com/documentation/EventKit/EKAlarm?language=objc
pub const Alarm = opaque {
    pub const Internal = objc.ExternClass("EKAlarm", @This(), Object, &.{foundation.Copying});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn copyWithZone(_self: *@This(), _zone: ?*foundation.Zone) ?objc.Id {
        return objc.msgSend(_self, "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn alarmWithAbsoluteDate(_date: ?*foundation.Date) ?*Alarm {
        return objc.msgSend(Internal.class(), "alarmWithAbsoluteDate:", ?*Alarm, .{_date});
    }

    pub fn alarmWithRelativeOffset(_offset: foundation.TimeInterval) ?*Alarm {
        return objc.msgSend(Internal.class(), "alarmWithRelativeOffset:", ?*Alarm, .{_offset});
    }

    pub fn relativeOffset(_self: *@This()) foundation.TimeInterval {
        return objc.msgSend(_self, "relativeOffset", foundation.TimeInterval, .{});
    }

    pub fn setRelativeOffset(_self: *@This(), _relativeOffset: foundation.TimeInterval) void {
        return objc.msgSend(_self, "setRelativeOffset:", void, .{_relativeOffset});
    }

    pub fn absoluteDate(_self: *@This()) ?*foundation.Date {
        return objc.msgSend(_self, "absoluteDate", ?*foundation.Date, .{});
    }

    pub fn setAbsoluteDate(_self: *@This(), _absoluteDate: ?*foundation.Date) void {
        return objc.msgSend(_self, "setAbsoluteDate:", void, .{_absoluteDate});
    }

    pub fn structuredLocation(_self: *@This()) ?*StructuredLocation {
        return objc.msgSend(_self, "structuredLocation", ?*StructuredLocation, .{});
    }

    pub fn setStructuredLocation(_self: *@This(), _structuredLocation: ?*StructuredLocation) void {
        return objc.msgSend(_self, "setStructuredLocation:", void, .{_structuredLocation});
    }

    pub fn proximity(_self: *@This()) AlarmProximity {
        return objc.msgSend(_self, "proximity", AlarmProximity, .{});
    }

    pub fn setProximity(_self: *@This(), _proximity: AlarmProximity) void {
        return objc.msgSend(_self, "setProximity:", void, .{_proximity});
    }

    pub fn @"type"(_self: *@This()) AlarmType {
        return objc.msgSend(_self, "type", AlarmType, .{});
    }

    pub fn emailAddress(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "emailAddress", ?*foundation.String, .{});
    }

    pub fn setEmailAddress(_self: *@This(), _emailAddress: ?*foundation.String) void {
        return objc.msgSend(_self, "setEmailAddress:", void, .{_emailAddress});
    }

    pub fn soundName(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "soundName", ?*foundation.String, .{});
    }

    pub fn setSoundName(_self: *@This(), _soundName: ?*foundation.String) void {
        return objc.msgSend(_self, "setSoundName:", void, .{_soundName});
    }

    pub fn url(_self: *@This()) ?*foundation.URL {
        return objc.msgSend(_self, "url", ?*foundation.URL, .{});
    }

    pub fn setUrl(_self: *@This(), _url: ?*foundation.URL) void {
        return objc.msgSend(_self, "setUrl:", void, .{_url});
    }
};

pub const Span = objc.NSInteger;
pub const Span_ThisEvent: objc.NSInteger = 0;
pub const Span_FutureEvents: objc.NSInteger = 1;

pub const EventSearchCallback = *const fn (?*Event, ?*objc.BOOL) callconv(.C) void;

/// https://developer.apple.com/documentation/EventKit/EKEventStore?language=objc
pub const EventStore = opaque {
    pub const RequestAccessCompletionHandler = *const fn (objc.BOOL, ?*foundation.Error) callconv(.C) void;

    pub const Internal = objc.ExternClass("EKEventStore", @This(), objc.NSObject, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn authorizationStatusForEntityType(_entityType: EntityType) AuthorizationStatus {
        return objc.msgSend(Internal.class(), "authorizationStatusForEntityType:", AuthorizationStatus, .{_entityType});
    }

    pub fn initWithAccessToEntityTypes(_self: *@This(), _entityTypes: EntityMask) ?objc.Id {
        return objc.msgSend(_self, "initWithAccessToEntityTypes:", ?objc.Id, .{_entityTypes});
    }

    pub fn init(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "init", ?objc.Id, .{});
    }

    pub fn initWithSources(_self: *@This(), _sources: ?*foundation.Array(?*Source)) *@This() {
        return objc.msgSend(_self, "initWithSources:", *@This(), .{_sources});
    }

    pub fn requestFullAccessToEventsWithCompletion(_self: *@This(), _completion: EventStore.RequestAccessCompletionHandler) void {
        return objc.msgSend(_self, "requestFullAccessToEventsWithCompletion:", void, .{_completion});
    }

    pub fn requestWriteOnlyAccessToEventsWithCompletion(_self: *@This(), _completion: EventStore.RequestAccessCompletionHandler) void {
        return objc.msgSend(_self, "requestWriteOnlyAccessToEventsWithCompletion:", void, .{_completion});
    }

    pub fn requestFullAccessToRemindersWithCompletion(_self: *@This(), _completion: EventStore.RequestAccessCompletionHandler) void {
        return objc.msgSend(_self, "requestFullAccessToRemindersWithCompletion:", void, .{_completion});
    }

    pub fn requestAccessToEntityTypeCompletion(_self: *@This(), _entityType: EntityType, _completion: EventStore.RequestAccessCompletionHandler) void {
        return objc.msgSend(_self, "requestAccessToEntityType:completion:", void, .{ _entityType, _completion });
    }

    pub fn eventStoreIdentifier(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "eventStoreIdentifier", ?*foundation.String, .{});
    }

    pub fn delegateSources(_self: *@This()) ?*foundation.Array(?*Source) {
        return objc.msgSend(_self, "delegateSources", ?*foundation.Array(?*Source), .{});
    }

    pub fn sources(_self: *@This()) ?*foundation.Array(?*Source) {
        return objc.msgSend(_self, "sources", ?*foundation.Array(?*Source), .{});
    }

    pub fn sourceWithIdentifier(_self: *@This(), _identifier: ?*foundation.String) ?*Source {
        return objc.msgSend(_self, "sourceWithIdentifier:", ?*Source, .{_identifier});
    }

    pub fn calendars(_self: *@This()) ?*foundation.Array(?*Calendar) {
        return objc.msgSend(_self, "calendars", ?*foundation.Array(?*Calendar), .{});
    }

    pub fn calendarsForEntityType(_self: *@This(), _entityType: EntityType) ?*foundation.Array(?*Calendar) {
        return objc.msgSend(_self, "calendarsForEntityType:", ?*foundation.Array(?*Calendar), .{_entityType});
    }

    pub fn defaultCalendarForNewEvents(_self: *@This()) ?*Calendar {
        return objc.msgSend(_self, "defaultCalendarForNewEvents", ?*Calendar, .{});
    }

    pub fn defaultCalendarForNewReminders(_self: *@This()) ?*Calendar {
        return objc.msgSend(_self, "defaultCalendarForNewReminders", ?*Calendar, .{});
    }

    pub fn calendarWithIdentifier(_self: *@This(), _identifier: ?*foundation.String) ?*Calendar {
        return objc.msgSend(_self, "calendarWithIdentifier:", ?*Calendar, .{_identifier});
    }

    pub fn saveCalendarCommitError(_self: *@This(), _calendar: ?*Calendar, _commit: objc.BOOL, _error: ?*?*foundation.Error) objc.BOOL {
        return objc.msgSend(_self, "saveCalendar:commit:error:", objc.BOOL, .{ _calendar, _commit, _error });
    }

    pub fn removeCalendarCommitError(_self: *@This(), _calendar: ?*Calendar, _commit: objc.BOOL, _error: ?*?*foundation.Error) objc.BOOL {
        return objc.msgSend(_self, "removeCalendar:commit:error:", objc.BOOL, .{ _calendar, _commit, _error });
    }

    pub fn calendarItemWithIdentifier(_self: *@This(), _identifier: ?*foundation.String) ?*CalendarItem {
        return objc.msgSend(_self, "calendarItemWithIdentifier:", ?*CalendarItem, .{_identifier});
    }

    pub fn calendarItemsWithExternalIdentifier(_self: *@This(), _externalIdentifier: ?*foundation.String) ?*foundation.Array(?*CalendarItem) {
        return objc.msgSend(_self, "calendarItemsWithExternalIdentifier:", ?*foundation.Array(?*CalendarItem), .{_externalIdentifier});
    }

    pub fn saveEventSpanError(_self: *@This(), _event: ?*Event, _span: Span, _error: ?*?*foundation.Error) objc.BOOL {
        return objc.msgSend(_self, "saveEvent:span:error:", objc.BOOL, .{ _event, _span, _error });
    }

    pub fn removeEventSpanError(_self: *@This(), _event: ?*Event, _span: Span, _error: ?*?*foundation.Error) objc.BOOL {
        return objc.msgSend(_self, "removeEvent:span:error:", objc.BOOL, .{ _event, _span, _error });
    }

    pub fn saveEventSpanCommitError(
        _self: *@This(),
        _event: ?*Event,
        _span: Span,
        _commit: objc.BOOL,
        _error: ?*?*foundation.Error,
    ) objc.BOOL {
        return objc.msgSend(_self, "saveEvent:span:commit:error:", objc.BOOL, .{
            _event,
            _span,
            _commit,
            _error,
        });
    }

    pub fn removeEventSpanCommitError(
        _self: *@This(),
        _event: ?*Event,
        _span: Span,
        _commit: objc.BOOL,
        _error: ?*?*foundation.Error,
    ) objc.BOOL {
        return objc.msgSend(_self, "removeEvent:span:commit:error:", objc.BOOL, .{
            _event,
            _span,
            _commit,
            _error,
        });
    }

    pub fn eventWithIdentifier(_self: *@This(), _identifier: ?*foundation.String) ?*Event {
        return objc.msgSend(_self, "eventWithIdentifier:", ?*Event, .{_identifier});
    }

    pub fn eventsMatchingPredicate(_self: *@This(), _predicate: ?*foundation.Predicate) ?*foundation.Array(?*Event) {
        return objc.msgSend(_self, "eventsMatchingPredicate:", ?*foundation.Array(?*Event), .{_predicate});
    }

    pub fn enumerateEventsMatchingPredicateUsingBlock(_self: *@This(), _predicate: ?*foundation.Predicate, _block: EventSearchCallback) void {
        return objc.msgSend(_self, "enumerateEventsMatchingPredicate:usingBlock:", void, .{ _predicate, _block });
    }

    pub fn predicateForEventsWithStartDateEndDateCalendars(_self: *@This(), _startDate: ?*foundation.Date, _endDate: ?*foundation.Date, _calendars: ?*foundation.Array(?*Calendar)) ?*foundation.Predicate {
        return objc.msgSend(_self, "predicateForEventsWithStartDate:endDate:calendars:", ?*foundation.Predicate, .{ _startDate, _endDate, _calendars });
    }

    pub fn saveReminderCommitError(_self: *@This(), _reminder: ?*Reminder, _commit: objc.BOOL, _error: ?*?*foundation.Error) objc.BOOL {
        return objc.msgSend(_self, "saveReminder:commit:error:", objc.BOOL, .{ _reminder, _commit, _error });
    }

    pub fn removeReminderCommitError(_self: *@This(), _reminder: ?*Reminder, _commit: objc.BOOL, _error: ?*?*foundation.Error) objc.BOOL {
        return objc.msgSend(_self, "removeReminder:commit:error:", objc.BOOL, .{ _reminder, _commit, _error });
    }

    pub fn fetchRemindersMatchingPredicateCompletion(_self: *@This(), _predicate: ?*foundation.Predicate, _completion: *const fn (?*foundation.Array(?*Reminder)) callconv(.C) void) ?objc.Id {
        return objc.msgSend(_self, "fetchRemindersMatchingPredicate:completion:", ?objc.Id, .{ _predicate, _completion });
    }

    pub fn cancelFetchRequest(_self: *@This(), _fetchIdentifier: ?objc.Id) void {
        return objc.msgSend(_self, "cancelFetchRequest:", void, .{_fetchIdentifier});
    }

    pub fn predicateForRemindersInCalendars(_self: *@This(), _calendars: ?*foundation.Array(?*Calendar)) ?*foundation.Predicate {
        return objc.msgSend(_self, "predicateForRemindersInCalendars:", ?*foundation.Predicate, .{_calendars});
    }

    pub fn predicateForIncompleteRemindersWithDueDateStartingEndingCalendars(_self: *@This(), _startDate: ?*foundation.Date, _endDate: ?*foundation.Date, _calendars: ?*foundation.Array(?*Calendar)) ?*foundation.Predicate {
        return objc.msgSend(_self, "predicateForIncompleteRemindersWithDueDateStarting:ending:calendars:", ?*foundation.Predicate, .{ _startDate, _endDate, _calendars });
    }

    pub fn predicateForCompletedRemindersWithCompletionDateStartingEndingCalendars(_self: *@This(), _startDate: ?*foundation.Date, _endDate: ?*foundation.Date, _calendars: ?*foundation.Array(?*Calendar)) ?*foundation.Predicate {
        return objc.msgSend(_self, "predicateForCompletedRemindersWithCompletionDateStarting:ending:calendars:", ?*foundation.Predicate, .{ _startDate, _endDate, _calendars });
    }

    pub fn commit(_self: *@This(), _error: ?*?*foundation.Error) objc.BOOL {
        return objc.msgSend(_self, "commit:", objc.BOOL, .{_error});
    }

    pub fn reset(_self: *@This()) void {
        return objc.msgSend(_self, "reset", void, .{});
    }

    pub fn refreshSourcesIfNecessary(_self: *@This()) void {
        return objc.msgSend(_self, "refreshSourcesIfNecessary", void, .{});
    }
};

/// https://developer.apple.com/documentation/EventKit/EKCalendar?language=objc
pub const Calendar = opaque {
    pub const Internal = objc.ExternClass("EKCalendar", @This(), Object, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn calendarWithEventStore(_eventStore: ?*EventStore) ?*Calendar {
        return objc.msgSend(Internal.class(), "calendarWithEventStore:", ?*Calendar, .{_eventStore});
    }

    pub fn calendarForEntityTypeEventStore(_entityType: EntityType, _eventStore: ?*EventStore) ?*Calendar {
        return objc.msgSend(Internal.class(), "calendarForEntityType:eventStore:", ?*Calendar, .{ _entityType, _eventStore });
    }

    pub fn source(_self: *@This()) ?*Source {
        return objc.msgSend(_self, "source", ?*Source, .{});
    }

    pub fn setSource(_self: *@This(), _source: ?*Source) void {
        return objc.msgSend(_self, "setSource:", void, .{_source});
    }

    pub fn calendarIdentifier(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "calendarIdentifier", ?*foundation.String, .{});
    }

    pub fn title(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "title", ?*foundation.String, .{});
    }

    pub fn setTitle(_self: *@This(), _title: ?*foundation.String) void {
        return objc.msgSend(_self, "setTitle:", void, .{_title});
    }

    pub fn @"type"(_self: *@This()) CalendarType {
        return objc.msgSend(_self, "type", CalendarType, .{});
    }

    pub fn allowsContentModifications(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsContentModifications", objc.BOOL, .{});
    }

    pub fn isSubscribed(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isSubscribed", objc.BOOL, .{});
    }

    pub fn isImmutable(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isImmutable", objc.BOOL, .{});
    }

    pub fn cgColor(_self: *@This()) core_graphics.ColorRef {
        return objc.msgSend(_self, "CGColor", core_graphics.ColorRef, .{});
    }

    pub fn setCGColor(_self: *@This(), _CGColor: core_graphics.ColorRef) void {
        return objc.msgSend(_self, "setCGColor:", void, .{_CGColor});
    }

    pub fn color(_self: *@This()) ?*app_kit.Color {
        return objc.msgSend(_self, "color", ?*app_kit.Color, .{});
    }

    pub fn setColor(_self: *@This(), _color: ?*app_kit.Color) void {
        return objc.msgSend(_self, "setColor:", void, .{_color});
    }

    pub fn supportedEventAvailabilities(_self: *@This()) CalendarEventAvailabilityMask {
        return objc.msgSend(_self, "supportedEventAvailabilities", CalendarEventAvailabilityMask, .{});
    }

    pub fn allowedEntityTypes(_self: *@This()) EntityMask {
        return objc.msgSend(_self, "allowedEntityTypes", EntityMask, .{});
    }
};

pub const ErrorCode = objc.NSInteger;
pub const ErrorCode_EventNotMutable: objc.NSInteger = 0;
pub const ErrorCode_NoCalendar: objc.NSInteger = 1;
pub const ErrorCode_NoStartDate: objc.NSInteger = 2;
pub const ErrorCode_NoEndDate: objc.NSInteger = 3;
pub const ErrorCode_DatesInverted: objc.NSInteger = 4;
pub const ErrorCode_InternalFailure: objc.NSInteger = 5;
pub const ErrorCode_CalendarReadOnly: objc.NSInteger = 6;
pub const ErrorCode_DurationGreaterThanRecurrence: objc.NSInteger = 7;
pub const ErrorCode_AlarmGreaterThanRecurrence: objc.NSInteger = 8;
pub const ErrorCode_StartDateTooFarInFuture: objc.NSInteger = 9;
pub const ErrorCode_StartDateCollidesWithOtherOccurrence: objc.NSInteger = 10;
pub const ErrorCode_ObjectBelongsToDifferentStore: objc.NSInteger = 11;
pub const ErrorCode_InvitesCannotBeMoved: objc.NSInteger = 12;
pub const ErrorCode_InvalidSpan: objc.NSInteger = 13;
pub const ErrorCode_CalendarHasNoSource: objc.NSInteger = 14;
pub const ErrorCode_CalendarSourceCannotBeModified: objc.NSInteger = 15;
pub const ErrorCode_CalendarIsImmutable: objc.NSInteger = 16;
pub const ErrorCode_SourceDoesNotAllowCalendarAddDelete: objc.NSInteger = 17;
pub const ErrorCode_RecurringReminderRequiresDueDate: objc.NSInteger = 18;
pub const ErrorCode_StructuredLocationsNotSupported: objc.NSInteger = 19;
pub const ErrorCode_ReminderLocationsNotSupported: objc.NSInteger = 20;
pub const ErrorCode_AlarmProximityNotSupported: objc.NSInteger = 21;
pub const ErrorCode_CalendarDoesNotAllowEvents: objc.NSInteger = 22;
pub const ErrorCode_CalendarDoesNotAllowReminders: objc.NSInteger = 23;
pub const ErrorCode_SourceDoesNotAllowReminders: objc.NSInteger = 24;
pub const ErrorCode_SourceDoesNotAllowEvents: objc.NSInteger = 25;
pub const ErrorCode_PriorityIsInvalid: objc.NSInteger = 26;
pub const ErrorCode_InvalidEntityType: objc.NSInteger = 27;
pub const ErrorCode_ProcedureAlarmsNotMutable: objc.NSInteger = 28;
pub const ErrorCode_EventStoreNotAuthorized: objc.NSInteger = 29;
pub const ErrorCode_OSNotSupported: objc.NSInteger = 30;
pub const ErrorCode_InvalidInviteReplyCalendar: objc.NSInteger = 31;
pub const ErrorCode_NotificationsCollectionFlagNotSet: objc.NSInteger = 32;
pub const ErrorCode_SourceMismatch: objc.NSInteger = 33;
pub const ErrorCode_NotificationCollectionMismatch: objc.NSInteger = 34;
pub const ErrorCode_NotificationSavedWithoutCollection: objc.NSInteger = 35;
pub const ErrorCode_ReminderAlarmContainsEmailOrUrl: objc.NSInteger = 36;
pub const ErrorCode_Last: objc.NSInteger = 37;

/// https://developer.apple.com/documentation/EventKit/EKCalendarItem?language=objc
pub const CalendarItem = opaque {
    pub const Internal = objc.ExternClass("EKCalendarItem", @This(), Object, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn addAlarm(_self: *@This(), _alarm: ?*Alarm) void {
        return objc.msgSend(_self, "addAlarm:", void, .{_alarm});
    }

    pub fn removeAlarm(_self: *@This(), _alarm: ?*Alarm) void {
        return objc.msgSend(_self, "removeAlarm:", void, .{_alarm});
    }

    pub fn addRecurrenceRule(_self: *@This(), _rule: ?*RecurrenceRule) void {
        return objc.msgSend(_self, "addRecurrenceRule:", void, .{_rule});
    }

    pub fn removeRecurrenceRule(_self: *@This(), _rule: ?*RecurrenceRule) void {
        return objc.msgSend(_self, "removeRecurrenceRule:", void, .{_rule});
    }

    pub fn uuid(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "UUID", ?*foundation.String, .{});
    }

    pub fn calendar(_self: *@This()) ?*Calendar {
        return objc.msgSend(_self, "calendar", ?*Calendar, .{});
    }

    pub fn setCalendar(_self: *@This(), _calendar: ?*Calendar) void {
        return objc.msgSend(_self, "setCalendar:", void, .{_calendar});
    }

    pub fn calendarItemIdentifier(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "calendarItemIdentifier", ?*foundation.String, .{});
    }

    pub fn calendarItemExternalIdentifier(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "calendarItemExternalIdentifier", ?*foundation.String, .{});
    }

    pub fn title(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "title", ?*foundation.String, .{});
    }

    pub fn setTitle(_self: *@This(), _title: ?*foundation.String) void {
        return objc.msgSend(_self, "setTitle:", void, .{_title});
    }

    pub fn location(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "location", ?*foundation.String, .{});
    }

    pub fn setLocation(_self: *@This(), _location: ?*foundation.String) void {
        return objc.msgSend(_self, "setLocation:", void, .{_location});
    }

    pub fn notes(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "notes", ?*foundation.String, .{});
    }

    pub fn setNotes(_self: *@This(), _notes: ?*foundation.String) void {
        return objc.msgSend(_self, "setNotes:", void, .{_notes});
    }

    pub fn url(_self: *@This()) ?*foundation.URL {
        return objc.msgSend(_self, "URL", ?*foundation.URL, .{});
    }

    pub fn setURL(_self: *@This(), _URL: ?*foundation.URL) void {
        return objc.msgSend(_self, "setURL:", void, .{_URL});
    }

    pub fn lastModifiedDate(_self: *@This()) ?*foundation.Date {
        return objc.msgSend(_self, "lastModifiedDate", ?*foundation.Date, .{});
    }

    pub fn creationDate(_self: *@This()) ?*foundation.Date {
        return objc.msgSend(_self, "creationDate", ?*foundation.Date, .{});
    }

    pub fn timeZone(_self: *@This()) ?*foundation.TimeZone {
        return objc.msgSend(_self, "timeZone", ?*foundation.TimeZone, .{});
    }

    pub fn setTimeZone(_self: *@This(), _timeZone: ?*foundation.TimeZone) void {
        return objc.msgSend(_self, "setTimeZone:", void, .{_timeZone});
    }

    pub fn hasAlarms(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "hasAlarms", objc.BOOL, .{});
    }

    pub fn hasRecurrenceRules(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "hasRecurrenceRules", objc.BOOL, .{});
    }

    pub fn hasAttendees(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "hasAttendees", objc.BOOL, .{});
    }

    pub fn hasNotes(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "hasNotes", objc.BOOL, .{});
    }

    pub fn attendees(_self: *@This()) ?*foundation.Array(?*Participant) {
        return objc.msgSend(_self, "attendees", ?*foundation.Array(?*Participant), .{});
    }

    pub fn alarms(_self: *@This()) ?*foundation.Array(?*Alarm) {
        return objc.msgSend(_self, "alarms", ?*foundation.Array(?*Alarm), .{});
    }

    pub fn setAlarms(_self: *@This(), _alarms: ?*foundation.Array(?*Alarm)) void {
        return objc.msgSend(_self, "setAlarms:", void, .{_alarms});
    }

    pub fn recurrenceRules(_self: *@This()) ?*foundation.Array(?*RecurrenceRule) {
        return objc.msgSend(_self, "recurrenceRules", ?*foundation.Array(?*RecurrenceRule), .{});
    }

    pub fn setRecurrenceRules(_self: *@This(), _recurrenceRules: ?*foundation.Array(?*RecurrenceRule)) void {
        return objc.msgSend(_self, "setRecurrenceRules:", void, .{_recurrenceRules});
    }
};

pub const EventAvailability = objc.NSInteger;
pub const EventAvailability_NotSupported: objc.NSInteger = -1;
pub const EventAvailability_Busy: objc.NSInteger = 0;
pub const EventAvailability_Free: objc.NSInteger = 1;
pub const EventAvailability_Tentative: objc.NSInteger = 2;
pub const EventAvailability_Unavailable: objc.NSInteger = 3;

pub const EventStatus = objc.NSInteger;
pub const EventStatus_None: objc.NSInteger = 0;
pub const EventStatus_Confirmed: objc.NSInteger = 1;
pub const EventStatus_Tentative: objc.NSInteger = 2;
pub const EventStatus_Canceled: objc.NSInteger = 3;

/// https://developer.apple.com/documentation/EventKit/EKEvent?language=objc
pub const Event = opaque {
    pub const Internal = objc.ExternClass("EKEvent", @This(), CalendarItem, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn eventWithEventStore(_eventStore: ?*EventStore) ?*Event {
        return objc.msgSend(Internal.class(), "eventWithEventStore:", ?*Event, .{_eventStore});
    }

    pub fn compareStartDateWithEvent(_self: *@This(), _other: ?*Event) foundation.ComparisonResult {
        return objc.msgSend(_self, "compareStartDateWithEvent:", foundation.ComparisonResult, .{_other});
    }

    pub fn refresh(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "refresh", objc.BOOL, .{});
    }

    pub fn eventIdentifier(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "eventIdentifier", ?*foundation.String, .{});
    }

    pub fn isAllDay(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isAllDay", objc.BOOL, .{});
    }

    pub fn setAllDay(_self: *@This(), _allDay: objc.BOOL) void {
        return objc.msgSend(_self, "setAllDay:", void, .{_allDay});
    }

    pub fn startDate(_self: *@This()) ?*foundation.Date {
        return objc.msgSend(_self, "startDate", ?*foundation.Date, .{});
    }

    pub fn setStartDate(_self: *@This(), _startDate: ?*foundation.Date) void {
        return objc.msgSend(_self, "setStartDate:", void, .{_startDate});
    }

    pub fn endDate(_self: *@This()) ?*foundation.Date {
        return objc.msgSend(_self, "endDate", ?*foundation.Date, .{});
    }

    pub fn setEndDate(_self: *@This(), _endDate: ?*foundation.Date) void {
        return objc.msgSend(_self, "setEndDate:", void, .{_endDate});
    }

    pub fn structuredLocation(_self: *@This()) ?*StructuredLocation {
        return objc.msgSend(_self, "structuredLocation", ?*StructuredLocation, .{});
    }

    pub fn setStructuredLocation(_self: *@This(), _structuredLocation: ?*StructuredLocation) void {
        return objc.msgSend(_self, "setStructuredLocation:", void, .{_structuredLocation});
    }

    pub fn organizer(_self: *@This()) ?*Participant {
        return objc.msgSend(_self, "organizer", ?*Participant, .{});
    }

    pub fn availability(_self: *@This()) EventAvailability {
        return objc.msgSend(_self, "availability", EventAvailability, .{});
    }

    pub fn setAvailability(_self: *@This(), _availability: EventAvailability) void {
        return objc.msgSend(_self, "setAvailability:", void, .{_availability});
    }

    pub fn status(_self: *@This()) EventStatus {
        return objc.msgSend(_self, "status", EventStatus, .{});
    }

    pub fn isDetached(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isDetached", objc.BOOL, .{});
    }

    pub fn occurrenceDate(_self: *@This()) ?*foundation.Date {
        return objc.msgSend(_self, "occurrenceDate", ?*foundation.Date, .{});
    }

    pub fn birthdayContactIdentifier(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "birthdayContactIdentifier", ?*foundation.String, .{});
    }

    pub fn birthdayPersonID(_self: *@This()) objc.NSInteger {
        return objc.msgSend(_self, "birthdayPersonID", objc.NSInteger, .{});
    }

    pub fn birthdayPersonUniqueID(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "birthdayPersonUniqueID", ?*foundation.String, .{});
    }
};

/// https://developer.apple.com/documentation/EventKit/EKParticipant?language=objc
pub const Participant = opaque {
    pub const Internal = objc.ExternClass("EKParticipant", @This(), Object, &.{foundation.Copying});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn copyWithZone(_self: *@This(), _zone: ?*foundation.Zone) ?objc.Id {
        return objc.msgSend(_self, "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn abPersonInAddressBook(_self: *@This(), _addressBook: ?*address_book.AddressBook) ?*address_book.Person {
        return objc.msgSend(_self, "ABPersonInAddressBook:", ?*address_book.Person, .{_addressBook});
    }

    pub fn url(_self: *@This()) ?*foundation.URL {
        return objc.msgSend(_self, "URL", ?*foundation.URL, .{});
    }

    pub fn name(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "name", ?*foundation.String, .{});
    }

    pub fn participantStatus(_self: *@This()) ParticipantStatus {
        return objc.msgSend(_self, "participantStatus", ParticipantStatus, .{});
    }

    pub fn participantRole(_self: *@This()) ParticipantRole {
        return objc.msgSend(_self, "participantRole", ParticipantRole, .{});
    }

    pub fn participantType(_self: *@This()) ParticipantType {
        return objc.msgSend(_self, "participantType", ParticipantType, .{});
    }

    pub fn isCurrentUser(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isCurrentUser", objc.BOOL, .{});
    }

    pub fn contactPredicate(_self: *@This()) ?*foundation.Predicate {
        return objc.msgSend(_self, "contactPredicate", ?*foundation.Predicate, .{});
    }
};

/// https://developer.apple.com/documentation/EventKit/EKRecurrenceEnd?language=objc
pub const RecurrenceEnd = opaque {
    pub const Internal = objc.ExternClass("EKRecurrenceEnd", @This(), objc.NSObject, &.{ foundation.Copying, foundation.SecureCoding });
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn copyWithZone(_self: *@This(), _zone: ?*foundation.Zone) ?objc.Id {
        return objc.msgSend(_self, "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*foundation.Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*foundation.Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn supportsSecureCoding() objc.BOOL {
        return objc.msgSend(Internal.class(), "supportsSecureCoding", objc.BOOL, .{});
    }

    pub fn recurrenceEndWithEndDate(_endDate: ?*foundation.Date) *@This() {
        return objc.msgSend(Internal.class(), "recurrenceEndWithEndDate:", *@This(), .{_endDate});
    }

    pub fn recurrenceEndWithOccurrenceCount(_occurrenceCount: objc.NSUInteger) *@This() {
        return objc.msgSend(Internal.class(), "recurrenceEndWithOccurrenceCount:", *@This(), .{_occurrenceCount});
    }

    pub fn endDate(_self: *@This()) ?*foundation.Date {
        return objc.msgSend(_self, "endDate", ?*foundation.Date, .{});
    }

    pub fn occurrenceCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "occurrenceCount", objc.NSUInteger, .{});
    }
};

/// https://developer.apple.com/documentation/EventKit/EKRecurrenceDayOfWeek?language=objc
pub const RecurrenceDayOfWeek = opaque {
    pub const Internal = objc.ExternClass("EKRecurrenceDayOfWeek", @This(), objc.NSObject, &.{ foundation.Copying, foundation.SecureCoding });
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn copyWithZone(_self: *@This(), _zone: ?*foundation.Zone) ?objc.Id {
        return objc.msgSend(_self, "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*foundation.Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*foundation.Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn supportsSecureCoding() objc.BOOL {
        return objc.msgSend(Internal.class(), "supportsSecureCoding", objc.BOOL, .{});
    }

    pub fn dayOfWeek(_dayOfTheWeek: Weekday) *@This() {
        return objc.msgSend(Internal.class(), "dayOfWeek:", *@This(), .{_dayOfTheWeek});
    }

    pub fn dayOfWeekWeekNumber(_dayOfTheWeek: Weekday, _weekNumber: objc.NSInteger) *@This() {
        return objc.msgSend(Internal.class(), "dayOfWeek:weekNumber:", *@This(), .{ _dayOfTheWeek, _weekNumber });
    }

    pub fn initWithDayOfTheWeekWeekNumber(_self: *@This(), _dayOfTheWeek: Weekday, _weekNumber: objc.NSInteger) ?objc.Id {
        return objc.msgSend(_self, "initWithDayOfTheWeek:weekNumber:", ?objc.Id, .{ _dayOfTheWeek, _weekNumber });
    }

    pub fn dayOfTheWeek(_self: *@This()) Weekday {
        return objc.msgSend(_self, "dayOfTheWeek", Weekday, .{});
    }

    pub fn weekNumber(_self: *@This()) objc.NSInteger {
        return objc.msgSend(_self, "weekNumber", objc.NSInteger, .{});
    }
};

/// https://developer.apple.com/documentation/EventKit/EKRecurrenceRule?language=objc
pub const RecurrenceRule = opaque {
    pub const Internal = objc.ExternClass("EKRecurrenceRule", @This(), Object, &.{foundation.Copying});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn copyWithZone(_self: *@This(), _zone: ?*foundation.Zone) ?objc.Id {
        return objc.msgSend(_self, "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn initRecurrenceWithFrequencyIntervalEnd(_self: *@This(), _type: RecurrenceFrequency, _interval: objc.NSInteger, _end: ?*RecurrenceEnd) *@This() {
        return objc.msgSend(_self, "initRecurrenceWithFrequency:interval:end:", *@This(), .{ _type, _interval, _end });
    }

    pub fn initRecurrenceWithFrequencyIntervalDaysOfTheWeekDaysOfTheMonthMonthsOfTheYearWeeksOfTheYearDaysOfTheYearSetPositionsEnd(
        _self: *@This(),
        _type: RecurrenceFrequency,
        _interval: objc.NSInteger,
        _days: ?*foundation.Array(?*RecurrenceDayOfWeek),
        _monthDays: ?*foundation.Array(?*foundation.Number),
        _months: ?*foundation.Array(?*foundation.Number),
        _weeksOfTheYear: ?*foundation.Array(?*foundation.Number),
        _daysOfTheYear: ?*foundation.Array(?*foundation.Number),
        _setPositions: ?*foundation.Array(?*foundation.Number),
        _end: ?*RecurrenceEnd,
    ) *@This() {
        return objc.msgSend(_self, "initRecurrenceWithFrequency:interval:daysOfTheWeek:daysOfTheMonth:monthsOfTheYear:weeksOfTheYear:daysOfTheYear:setPositions:end:", *@This(), .{
            _type,
            _interval,
            _days,
            _monthDays,
            _months,
            _weeksOfTheYear,
            _daysOfTheYear,
            _setPositions,
            _end,
        });
    }

    pub fn calendarIdentifier(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "calendarIdentifier", ?*foundation.String, .{});
    }

    pub fn recurrenceEnd(_self: *@This()) ?*RecurrenceEnd {
        return objc.msgSend(_self, "recurrenceEnd", ?*RecurrenceEnd, .{});
    }

    pub fn setRecurrenceEnd(_self: *@This(), _recurrenceEnd: ?*RecurrenceEnd) void {
        return objc.msgSend(_self, "setRecurrenceEnd:", void, .{_recurrenceEnd});
    }

    pub fn frequency(_self: *@This()) RecurrenceFrequency {
        return objc.msgSend(_self, "frequency", RecurrenceFrequency, .{});
    }

    pub fn interval(_self: *@This()) objc.NSInteger {
        return objc.msgSend(_self, "interval", objc.NSInteger, .{});
    }

    pub fn firstDayOfTheWeek(_self: *@This()) objc.NSInteger {
        return objc.msgSend(_self, "firstDayOfTheWeek", objc.NSInteger, .{});
    }

    pub fn daysOfTheWeek(_self: *@This()) ?*foundation.Array(?*RecurrenceDayOfWeek) {
        return objc.msgSend(_self, "daysOfTheWeek", ?*foundation.Array(?*RecurrenceDayOfWeek), .{});
    }

    pub fn daysOfTheMonth(_self: *@This()) ?*foundation.Array(?*foundation.Number) {
        return objc.msgSend(_self, "daysOfTheMonth", ?*foundation.Array(?*foundation.Number), .{});
    }

    pub fn daysOfTheYear(_self: *@This()) ?*foundation.Array(?*foundation.Number) {
        return objc.msgSend(_self, "daysOfTheYear", ?*foundation.Array(?*foundation.Number), .{});
    }

    pub fn weeksOfTheYear(_self: *@This()) ?*foundation.Array(?*foundation.Number) {
        return objc.msgSend(_self, "weeksOfTheYear", ?*foundation.Array(?*foundation.Number), .{});
    }

    pub fn monthsOfTheYear(_self: *@This()) ?*foundation.Array(?*foundation.Number) {
        return objc.msgSend(_self, "monthsOfTheYear", ?*foundation.Array(?*foundation.Number), .{});
    }

    pub fn setPositions(_self: *@This()) ?*foundation.Array(?*foundation.Number) {
        return objc.msgSend(_self, "setPositions", ?*foundation.Array(?*foundation.Number), .{});
    }
};

/// https://developer.apple.com/documentation/EventKit/EKReminder?language=objc
pub const Reminder = opaque {
    pub const Internal = objc.ExternClass("EKReminder", @This(), CalendarItem, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn reminderWithEventStore(_eventStore: ?*EventStore) ?*Reminder {
        return objc.msgSend(Internal.class(), "reminderWithEventStore:", ?*Reminder, .{_eventStore});
    }

    pub fn startDateComponents(_self: *@This()) ?*foundation.DateComponents {
        return objc.msgSend(_self, "startDateComponents", ?*foundation.DateComponents, .{});
    }

    pub fn setStartDateComponents(_self: *@This(), _startDateComponents: ?*foundation.DateComponents) void {
        return objc.msgSend(_self, "setStartDateComponents:", void, .{_startDateComponents});
    }

    pub fn dueDateComponents(_self: *@This()) ?*foundation.DateComponents {
        return objc.msgSend(_self, "dueDateComponents", ?*foundation.DateComponents, .{});
    }

    pub fn setDueDateComponents(_self: *@This(), _dueDateComponents: ?*foundation.DateComponents) void {
        return objc.msgSend(_self, "setDueDateComponents:", void, .{_dueDateComponents});
    }

    pub fn isCompleted(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isCompleted", objc.BOOL, .{});
    }

    pub fn setCompleted(_self: *@This(), _completed: objc.BOOL) void {
        return objc.msgSend(_self, "setCompleted:", void, .{_completed});
    }

    pub fn completionDate(_self: *@This()) ?*foundation.Date {
        return objc.msgSend(_self, "completionDate", ?*foundation.Date, .{});
    }

    pub fn setCompletionDate(_self: *@This(), _completionDate: ?*foundation.Date) void {
        return objc.msgSend(_self, "setCompletionDate:", void, .{_completionDate});
    }

    pub fn priority(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "priority", objc.NSUInteger, .{});
    }

    pub fn setPriority(_self: *@This(), _priority: objc.NSUInteger) void {
        return objc.msgSend(_self, "setPriority:", void, .{_priority});
    }
};

/// https://developer.apple.com/documentation/EventKit/EKSource?language=objc
pub const Source = opaque {
    pub const Internal = objc.ExternClass("EKSource", @This(), Object, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn calendarsForEntityType(_self: *@This(), _entityType: EntityType) ?*foundation.Set(?*Calendar) {
        return objc.msgSend(_self, "calendarsForEntityType:", ?*foundation.Set(?*Calendar), .{_entityType});
    }

    pub fn sourceIdentifier(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "sourceIdentifier", ?*foundation.String, .{});
    }

    pub fn sourceType(_self: *@This()) SourceType {
        return objc.msgSend(_self, "sourceType", SourceType, .{});
    }

    pub fn title(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "title", ?*foundation.String, .{});
    }

    pub fn calendars(_self: *@This()) ?*foundation.Set(?*Calendar) {
        return objc.msgSend(_self, "calendars", ?*foundation.Set(?*Calendar), .{});
    }

    pub fn isDelegate(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isDelegate", objc.BOOL, .{});
    }
};

/// https://developer.apple.com/documentation/EventKit/EKStructuredLocation?language=objc
pub const StructuredLocation = opaque {
    pub const Internal = objc.ExternClass("EKStructuredLocation", @This(), Object, &.{foundation.Copying});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn copyWithZone(_self: *@This(), _zone: ?*foundation.Zone) ?objc.Id {
        return objc.msgSend(_self, "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn locationWithTitle(_title: ?*foundation.String) *@This() {
        return objc.msgSend(Internal.class(), "locationWithTitle:", *@This(), .{_title});
    }

    pub fn locationWithMapItem(_mapItem: ?*map_kit.MapItem) *@This() {
        return objc.msgSend(Internal.class(), "locationWithMapItem:", *@This(), .{_mapItem});
    }

    pub fn title(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "title", ?*foundation.String, .{});
    }

    pub fn setTitle(_self: *@This(), _title: ?*foundation.String) void {
        return objc.msgSend(_self, "setTitle:", void, .{_title});
    }

    pub fn geoLocation(_self: *@This()) ?*core_location.Location {
        return objc.msgSend(_self, "geoLocation", ?*core_location.Location, .{});
    }

    pub fn setGeoLocation(_self: *@This(), _geoLocation: ?*core_location.Location) void {
        return objc.msgSend(_self, "setGeoLocation:", void, .{_geoLocation});
    }

    pub fn radius(_self: *@This()) f64 {
        return objc.msgSend(_self, "radius", f64, .{});
    }

    pub fn setRadius(_self: *@This(), _radius: f64) void {
        return objc.msgSend(_self, "setRadius:", void, .{_radius});
    }
};

pub const VirtualConferenceRoomTypeIdentifier = ?*foundation.String;

/// https://developer.apple.com/documentation/EventKit/EKVirtualConferenceRoomTypeDescriptor?language=objc
pub const VirtualConferenceRoomTypeDescriptor = opaque {
    pub const Internal = objc.ExternClass("EKVirtualConferenceRoomTypeDescriptor", @This(), objc.NSObject, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn initWithTitleIdentifier(_self: *@This(), _title: ?*foundation.String, _identifier: VirtualConferenceRoomTypeIdentifier) *@This() {
        return objc.msgSend(_self, "initWithTitle:identifier:", *@This(), .{ _title, _identifier });
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn title(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "title", ?*foundation.String, .{});
    }

    pub fn identifier(_self: *@This()) VirtualConferenceRoomTypeIdentifier {
        return objc.msgSend(_self, "identifier", VirtualConferenceRoomTypeIdentifier, .{});
    }
};

/// https://developer.apple.com/documentation/EventKit/EKVirtualConferenceURLDescriptor?language=objc
pub const VirtualConferenceURLDescriptor = opaque {
    pub const Internal = objc.ExternClass("EKVirtualConferenceURLDescriptor", @This(), objc.NSObject, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn initWithTitleURL(_self: *@This(), _title: ?*foundation.String, _URL: ?*foundation.URL) *@This() {
        return objc.msgSend(_self, "initWithTitle:URL:", *@This(), .{ _title, _URL });
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn title(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "title", ?*foundation.String, .{});
    }

    pub fn url(_self: *@This()) ?*foundation.URL {
        return objc.msgSend(_self, "URL", ?*foundation.URL, .{});
    }
};

/// https://developer.apple.com/documentation/EventKit/EKVirtualConferenceDescriptor?language=objc
pub const VirtualConferenceDescriptor = opaque {
    pub const Internal = objc.ExternClass("EKVirtualConferenceDescriptor", @This(), objc.NSObject, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn initWithTitleURLDescriptorsConferenceDetails(_self: *@This(), _title: ?*foundation.String, _URLDescriptors: ?*foundation.Array(?*VirtualConferenceURLDescriptor), _conferenceDetails: ?*foundation.String) *@This() {
        return objc.msgSend(_self, "initWithTitle:URLDescriptors:conferenceDetails:", *@This(), .{ _title, _URLDescriptors, _conferenceDetails });
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn title(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "title", ?*foundation.String, .{});
    }

    pub fn urlDescriptors(_self: *@This()) ?*foundation.Array(?*VirtualConferenceURLDescriptor) {
        return objc.msgSend(_self, "URLDescriptors", ?*foundation.Array(?*VirtualConferenceURLDescriptor), .{});
    }

    pub fn conferenceDetails(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "conferenceDetails", ?*foundation.String, .{});
    }
};

/// https://developer.apple.com/documentation/EventKit/EKVirtualConferenceProvider?language=objc
pub const VirtualConferenceProvider = opaque {
    pub const Internal = objc.ExternClass("EKVirtualConferenceProvider", @This(), objc.NSObject, &.{foundation.ExtensionRequestHandling});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "description", ?*foundation.String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "debugDescription", ?*foundation.String, .{});
    }

    pub fn beginRequestWithExtensionContext(_self: *@This(), _context: ?*foundation.ExtensionContext) void {
        return objc.msgSend(_self, "beginRequestWithExtensionContext:", void, .{_context});
    }

    pub fn fetchAvailableRoomTypesWithCompletionHandler(_self: *@This(), _completionHandler: *const fn (?*foundation.Array(?*VirtualConferenceRoomTypeDescriptor), ?*foundation.Error) callconv(.C) void) void {
        return objc.msgSend(_self, "fetchAvailableRoomTypesWithCompletionHandler:", void, .{_completionHandler});
    }

    pub fn fetchVirtualConferenceForIdentifierCompletionHandler(_self: *@This(), _identifier: VirtualConferenceRoomTypeIdentifier, _completionHandler: *const fn (?*VirtualConferenceDescriptor, ?*foundation.Error) callconv(.C) void) void {
        return objc.msgSend(_self, "fetchVirtualConferenceForIdentifier:completionHandler:", void, .{ _identifier, _completionHandler });
    }
};
