// THIS FILE IS AUTOGENERATED. MODIFICATIONS WILL NOT BE MAINTAINED.

const std = @import("std");
const objc = @import("objc.zig"); // Objective-C Runtime in zig.
const foundation = @import("foundation.zig"); // Framework dependency Foundation.

/// https://developer.apple.com/documentation/Symbols/NSSymbolEffectOptionsRepeatBehavior?language=objc
pub const SymbolEffectOptionsRepeatBehavior = opaque {
    pub const Internal = objc.ExternClass("NSSymbolEffectOptionsRepeatBehavior", @This(), objc.NSObject, &.{ foundation.Copying, foundation.SecureCoding });
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn copyWithZone(_self: *@This(), _zone: ?*foundation.Zone) ?objc.Id {
        return objc.msgSend(_self, "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*foundation.Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*foundation.Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn supportsSecureCoding() objc.BOOL {
        return objc.msgSend(Internal.class(), "supportsSecureCoding", objc.BOOL, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn behaviorPeriodic() *@This() {
        return objc.msgSend(Internal.class(), "behaviorPeriodic", *@This(), .{});
    }

    pub fn behaviorPeriodicWithCount(_count: objc.NSInteger) *@This() {
        return objc.msgSend(Internal.class(), "behaviorPeriodicWithCount:", *@This(), .{_count});
    }

    pub fn behaviorPeriodicWithDelay(_delay: f64) *@This() {
        return objc.msgSend(Internal.class(), "behaviorPeriodicWithDelay:", *@This(), .{_delay});
    }

    pub fn behaviorPeriodicWithCountDelay(_count: objc.NSInteger, _delay: f64) *@This() {
        return objc.msgSend(Internal.class(), "behaviorPeriodicWithCount:delay:", *@This(), .{ _count, _delay });
    }

    pub fn behaviorContinuous() *@This() {
        return objc.msgSend(Internal.class(), "behaviorContinuous", *@This(), .{});
    }
};

/// https://developer.apple.com/documentation/Symbols/NSSymbolEffectOptions?language=objc
pub const SymbolEffectOptions = opaque {
    pub const Internal = objc.ExternClass("NSSymbolEffectOptions", @This(), objc.NSObject, &.{ foundation.Copying, foundation.SecureCoding });
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn copyWithZone(_self: *@This(), _zone: ?*foundation.Zone) ?objc.Id {
        return objc.msgSend(_self, "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*foundation.Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*foundation.Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn supportsSecureCoding() objc.BOOL {
        return objc.msgSend(Internal.class(), "supportsSecureCoding", objc.BOOL, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn options() *@This() {
        return objc.msgSend(Internal.class(), "options", *@This(), .{});
    }

    pub fn optionsWithRepeating() *@This() {
        return objc.msgSend(Internal.class(), "optionsWithRepeating", *@This(), .{});
    }

    pub fn optionsWithNonRepeating() *@This() {
        return objc.msgSend(Internal.class(), "optionsWithNonRepeating", *@This(), .{});
    }

    pub fn optionsWithRepeatCount(_count: objc.NSInteger) *@This() {
        return objc.msgSend(Internal.class(), "optionsWithRepeatCount:", *@This(), .{_count});
    }

    pub fn optionsWithSpeed(_speed: f64) *@This() {
        return objc.msgSend(Internal.class(), "optionsWithSpeed:", *@This(), .{_speed});
    }

    pub fn optionsWithRepeatBehavior(_behavior: ?*SymbolEffectOptionsRepeatBehavior) *@This() {
        return objc.msgSend(Internal.class(), "optionsWithRepeatBehavior:", *@This(), .{_behavior});
    }
};

/// https://developer.apple.com/documentation/Symbols/NSSymbolEffect?language=objc
pub const SymbolEffect = opaque {
    pub const Internal = objc.ExternClass("NSSymbolEffect", @This(), objc.NSObject, &.{ foundation.Copying, foundation.SecureCoding });
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn copyWithZone(_self: *@This(), _zone: ?*foundation.Zone) ?objc.Id {
        return objc.msgSend(_self, "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*foundation.Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*foundation.Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn supportsSecureCoding() objc.BOOL {
        return objc.msgSend(Internal.class(), "supportsSecureCoding", objc.BOOL, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }
};

/// https://developer.apple.com/documentation/Symbols/NSSymbolPulseEffect?language=objc
pub const SymbolPulseEffect = opaque {
    pub const Internal = objc.ExternClass("NSSymbolPulseEffect", @This(), SymbolEffect, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn effect() *@This() {
        return objc.msgSend(Internal.class(), "effect", *@This(), .{});
    }

    pub fn effectWithByLayer(_self: *@This()) *@This() {
        return objc.msgSend(_self, "effectWithByLayer", *@This(), .{});
    }

    pub fn effectWithWholeSymbol(_self: *@This()) *@This() {
        return objc.msgSend(_self, "effectWithWholeSymbol", *@This(), .{});
    }
};

/// https://developer.apple.com/documentation/Symbols/NSSymbolBounceEffect?language=objc
pub const SymbolBounceEffect = opaque {
    pub const Internal = objc.ExternClass("NSSymbolBounceEffect", @This(), SymbolEffect, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn effect() *@This() {
        return objc.msgSend(Internal.class(), "effect", *@This(), .{});
    }

    pub fn bounceUpEffect() *@This() {
        return objc.msgSend(Internal.class(), "bounceUpEffect", *@This(), .{});
    }

    pub fn bounceDownEffect() *@This() {
        return objc.msgSend(Internal.class(), "bounceDownEffect", *@This(), .{});
    }

    pub fn effectWithByLayer(_self: *@This()) *@This() {
        return objc.msgSend(_self, "effectWithByLayer", *@This(), .{});
    }

    pub fn effectWithWholeSymbol(_self: *@This()) *@This() {
        return objc.msgSend(_self, "effectWithWholeSymbol", *@This(), .{});
    }
};

/// https://developer.apple.com/documentation/Symbols/NSSymbolVariableColorEffect?language=objc
pub const SymbolVariableColorEffect = opaque {
    pub const Internal = objc.ExternClass("NSSymbolVariableColorEffect", @This(), SymbolEffect, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn effect() *@This() {
        return objc.msgSend(Internal.class(), "effect", *@This(), .{});
    }

    pub fn effectWithIterative(_self: *@This()) *@This() {
        return objc.msgSend(_self, "effectWithIterative", *@This(), .{});
    }

    pub fn effectWithCumulative(_self: *@This()) *@This() {
        return objc.msgSend(_self, "effectWithCumulative", *@This(), .{});
    }

    pub fn effectWithReversing(_self: *@This()) *@This() {
        return objc.msgSend(_self, "effectWithReversing", *@This(), .{});
    }

    pub fn effectWithNonReversing(_self: *@This()) *@This() {
        return objc.msgSend(_self, "effectWithNonReversing", *@This(), .{});
    }

    pub fn effectWithHideInactiveLayers(_self: *@This()) *@This() {
        return objc.msgSend(_self, "effectWithHideInactiveLayers", *@This(), .{});
    }

    pub fn effectWithDimInactiveLayers(_self: *@This()) *@This() {
        return objc.msgSend(_self, "effectWithDimInactiveLayers", *@This(), .{});
    }
};

/// https://developer.apple.com/documentation/Symbols/NSSymbolScaleEffect?language=objc
pub const SymbolScaleEffect = opaque {
    pub const Internal = objc.ExternClass("NSSymbolScaleEffect", @This(), SymbolEffect, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn effect() *@This() {
        return objc.msgSend(Internal.class(), "effect", *@This(), .{});
    }

    pub fn scaleUpEffect() *@This() {
        return objc.msgSend(Internal.class(), "scaleUpEffect", *@This(), .{});
    }

    pub fn scaleDownEffect() *@This() {
        return objc.msgSend(Internal.class(), "scaleDownEffect", *@This(), .{});
    }

    pub fn effectWithByLayer(_self: *@This()) *@This() {
        return objc.msgSend(_self, "effectWithByLayer", *@This(), .{});
    }

    pub fn effectWithWholeSymbol(_self: *@This()) *@This() {
        return objc.msgSend(_self, "effectWithWholeSymbol", *@This(), .{});
    }
};

/// https://developer.apple.com/documentation/Symbols/NSSymbolAppearEffect?language=objc
pub const SymbolAppearEffect = opaque {
    pub const Internal = objc.ExternClass("NSSymbolAppearEffect", @This(), SymbolEffect, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn effect() *@This() {
        return objc.msgSend(Internal.class(), "effect", *@This(), .{});
    }

    pub fn appearUpEffect() *@This() {
        return objc.msgSend(Internal.class(), "appearUpEffect", *@This(), .{});
    }

    pub fn appearDownEffect() *@This() {
        return objc.msgSend(Internal.class(), "appearDownEffect", *@This(), .{});
    }

    pub fn effectWithByLayer(_self: *@This()) *@This() {
        return objc.msgSend(_self, "effectWithByLayer", *@This(), .{});
    }

    pub fn effectWithWholeSymbol(_self: *@This()) *@This() {
        return objc.msgSend(_self, "effectWithWholeSymbol", *@This(), .{});
    }
};

/// https://developer.apple.com/documentation/Symbols/NSSymbolDisappearEffect?language=objc
pub const SymbolDisappearEffect = opaque {
    pub const Internal = objc.ExternClass("NSSymbolDisappearEffect", @This(), SymbolEffect, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn effect() *@This() {
        return objc.msgSend(Internal.class(), "effect", *@This(), .{});
    }

    pub fn disappearUpEffect() *@This() {
        return objc.msgSend(Internal.class(), "disappearUpEffect", *@This(), .{});
    }

    pub fn disappearDownEffect() *@This() {
        return objc.msgSend(Internal.class(), "disappearDownEffect", *@This(), .{});
    }

    pub fn effectWithByLayer(_self: *@This()) *@This() {
        return objc.msgSend(_self, "effectWithByLayer", *@This(), .{});
    }

    pub fn effectWithWholeSymbol(_self: *@This()) *@This() {
        return objc.msgSend(_self, "effectWithWholeSymbol", *@This(), .{});
    }
};

/// https://developer.apple.com/documentation/Symbols/NSSymbolWiggleEffect?language=objc
pub const SymbolWiggleEffect = opaque {
    pub const Internal = objc.ExternClass("NSSymbolWiggleEffect", @This(), SymbolEffect, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn effect() *@This() {
        return objc.msgSend(Internal.class(), "effect", *@This(), .{});
    }

    pub fn wiggleClockwiseEffect() *@This() {
        return objc.msgSend(Internal.class(), "wiggleClockwiseEffect", *@This(), .{});
    }

    pub fn wiggleCounterClockwiseEffect() *@This() {
        return objc.msgSend(Internal.class(), "wiggleCounterClockwiseEffect", *@This(), .{});
    }

    pub fn wiggleLeftEffect() *@This() {
        return objc.msgSend(Internal.class(), "wiggleLeftEffect", *@This(), .{});
    }

    pub fn wiggleRightEffect() *@This() {
        return objc.msgSend(Internal.class(), "wiggleRightEffect", *@This(), .{});
    }

    pub fn wiggleUpEffect() *@This() {
        return objc.msgSend(Internal.class(), "wiggleUpEffect", *@This(), .{});
    }

    pub fn wiggleDownEffect() *@This() {
        return objc.msgSend(Internal.class(), "wiggleDownEffect", *@This(), .{});
    }

    pub fn wiggleForwardEffect() *@This() {
        return objc.msgSend(Internal.class(), "wiggleForwardEffect", *@This(), .{});
    }

    pub fn wiggleBackwardEffect() *@This() {
        return objc.msgSend(Internal.class(), "wiggleBackwardEffect", *@This(), .{});
    }

    pub fn wiggleCustomAngleEffect(_angle: f64) *@This() {
        return objc.msgSend(Internal.class(), "wiggleCustomAngleEffect:", *@This(), .{_angle});
    }

    pub fn effectWithByLayer(_self: *@This()) *@This() {
        return objc.msgSend(_self, "effectWithByLayer", *@This(), .{});
    }

    pub fn effectWithWholeSymbol(_self: *@This()) *@This() {
        return objc.msgSend(_self, "effectWithWholeSymbol", *@This(), .{});
    }
};

/// https://developer.apple.com/documentation/Symbols/NSSymbolRotateEffect?language=objc
pub const SymbolRotateEffect = opaque {
    pub const Internal = objc.ExternClass("NSSymbolRotateEffect", @This(), SymbolEffect, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn effect() *@This() {
        return objc.msgSend(Internal.class(), "effect", *@This(), .{});
    }

    pub fn rotateClockwiseEffect() *@This() {
        return objc.msgSend(Internal.class(), "rotateClockwiseEffect", *@This(), .{});
    }

    pub fn rotateCounterClockwiseEffect() *@This() {
        return objc.msgSend(Internal.class(), "rotateCounterClockwiseEffect", *@This(), .{});
    }

    pub fn effectWithByLayer(_self: *@This()) *@This() {
        return objc.msgSend(_self, "effectWithByLayer", *@This(), .{});
    }

    pub fn effectWithWholeSymbol(_self: *@This()) *@This() {
        return objc.msgSend(_self, "effectWithWholeSymbol", *@This(), .{});
    }
};

/// https://developer.apple.com/documentation/Symbols/NSSymbolBreatheEffect?language=objc
pub const SymbolBreatheEffect = opaque {
    pub const Internal = objc.ExternClass("NSSymbolBreatheEffect", @This(), SymbolEffect, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn effect() *@This() {
        return objc.msgSend(Internal.class(), "effect", *@This(), .{});
    }

    pub fn breathePulseEffect() *@This() {
        return objc.msgSend(Internal.class(), "breathePulseEffect", *@This(), .{});
    }

    pub fn breathePlainEffect() *@This() {
        return objc.msgSend(Internal.class(), "breathePlainEffect", *@This(), .{});
    }

    pub fn effectWithByLayer(_self: *@This()) *@This() {
        return objc.msgSend(_self, "effectWithByLayer", *@This(), .{});
    }

    pub fn effectWithWholeSymbol(_self: *@This()) *@This() {
        return objc.msgSend(_self, "effectWithWholeSymbol", *@This(), .{});
    }
};

/// https://developer.apple.com/documentation/Symbols/NSSymbolContentTransition?language=objc
pub const SymbolContentTransition = opaque {
    pub const Internal = objc.ExternClass("NSSymbolContentTransition", @This(), objc.NSObject, &.{ foundation.Copying, foundation.SecureCoding });
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn copyWithZone(_self: *@This(), _zone: ?*foundation.Zone) ?objc.Id {
        return objc.msgSend(_self, "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*foundation.Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*foundation.Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn supportsSecureCoding() objc.BOOL {
        return objc.msgSend(Internal.class(), "supportsSecureCoding", objc.BOOL, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }
};

/// https://developer.apple.com/documentation/Symbols/NSSymbolMagicReplaceContentTransition?language=objc
pub const SymbolMagicReplaceContentTransition = opaque {
    pub const Internal = objc.ExternClass("NSSymbolMagicReplaceContentTransition", @This(), SymbolContentTransition, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;
};

/// https://developer.apple.com/documentation/Symbols/NSSymbolReplaceContentTransition?language=objc
pub const SymbolReplaceContentTransition = opaque {
    pub const Internal = objc.ExternClass("NSSymbolReplaceContentTransition", @This(), SymbolContentTransition, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn transition() *@This() {
        return objc.msgSend(Internal.class(), "transition", *@This(), .{});
    }

    pub fn replaceDownUpTransition() *@This() {
        return objc.msgSend(Internal.class(), "replaceDownUpTransition", *@This(), .{});
    }

    pub fn replaceUpUpTransition() *@This() {
        return objc.msgSend(Internal.class(), "replaceUpUpTransition", *@This(), .{});
    }

    pub fn replaceOffUpTransition() *@This() {
        return objc.msgSend(Internal.class(), "replaceOffUpTransition", *@This(), .{});
    }

    pub fn transitionWithByLayer(_self: *@This()) *@This() {
        return objc.msgSend(_self, "transitionWithByLayer", *@This(), .{});
    }

    pub fn transitionWithWholeSymbol(_self: *@This()) *@This() {
        return objc.msgSend(_self, "transitionWithWholeSymbol", *@This(), .{});
    }

    pub fn magicTransitionWithFallback(_fallback: ?*SymbolReplaceContentTransition) ?*SymbolMagicReplaceContentTransition {
        return objc.msgSend(Internal.class(), "magicTransitionWithFallback:", ?*SymbolMagicReplaceContentTransition, .{_fallback});
    }
};

/// https://developer.apple.com/documentation/Symbols/NSSymbolAutomaticContentTransition?language=objc
pub const SymbolAutomaticContentTransition = opaque {
    pub const Internal = objc.ExternClass("NSSymbolAutomaticContentTransition", @This(), SymbolContentTransition, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn transition() *@This() {
        return objc.msgSend(Internal.class(), "transition", *@This(), .{});
    }
};
