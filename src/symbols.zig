// THIS FILE IS AUTOGENERATED. MODIFICATIONS WILL NOT BE MAINTAINED.

const std = @import("std");
const objc = @import("objc.zig"); // Objective-C Runtime in zig.
const foundation = @import("foundation.zig"); // Framework dependency Foundation.

/// https://developer.apple.com/documentation/Symbols/NSSymbolEffectOptionsRepeatBehavior?language=objc
pub const SymbolEffectOptionsRepeatBehavior = opaque {
    pub const Internal = objc.ExternClass("NSSymbolEffectOptionsRepeatBehavior", @This(), objc.NSObject, &.{ foundation.Copying, foundation.SecureCoding });
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "description", ?*foundation.String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "debugDescription", ?*foundation.String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*foundation.Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*foundation.MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*foundation.MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*foundation.MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*foundation.MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn version() objc.NSInteger {
        return objc.msgSend(Internal.class(), "version", objc.NSInteger, .{});
    }

    pub fn setVersion(_aVersion: objc.NSInteger) void {
        return objc.msgSend(Internal.class(), "setVersion:", void, .{_aVersion});
    }

    pub fn replacementObjectForCoder(_self: *@This(), _coder: ?*foundation.Coder) ?objc.Id {
        return objc.msgSend(_self, "replacementObjectForCoder:", ?objc.Id, .{_coder});
    }

    pub fn awakeAfterUsingCoder(_self: *@This(), _coder: ?*foundation.Coder) ?objc.Id {
        return objc.msgSend(_self, "awakeAfterUsingCoder:", ?objc.Id, .{_coder});
    }

    pub fn classForCoder(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "classForCoder", objc.Class, .{});
    }

    pub fn poseAsClass(_aClass: objc.Class) void {
        return objc.msgSend(Internal.class(), "poseAsClass:", void, .{_aClass});
    }

    pub fn autoContentAccessingProxy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "autoContentAccessingProxy", ?objc.Id, .{});
    }

    pub fn attemptRecoveryFromErrorOptionIndexDelegateDidRecoverSelectorContextInfo(
        _self: *@This(),
        _error: ?*foundation.Error,
        _recoveryOptionIndex: objc.NSUInteger,
        _delegate: ?objc.Id,
        _didRecoverSelector: objc.Selector,
        _contextInfo: ?*anyopaque,
    ) void {
        return objc.msgSend(_self, "attemptRecoveryFromError:optionIndex:delegate:didRecoverSelector:contextInfo:", void, .{
            _error,
            _recoveryOptionIndex,
            _delegate,
            _didRecoverSelector,
            _contextInfo,
        });
    }

    pub fn attemptRecoveryFromErrorOptionIndex(_self: *@This(), _error: ?*foundation.Error, _recoveryOptionIndex: objc.NSUInteger) objc.BOOL {
        return objc.msgSend(_self, "attemptRecoveryFromError:optionIndex:", objc.BOOL, .{ _error, _recoveryOptionIndex });
    }

    pub fn performSelectorWithObjectAfterDelayInModes(
        _self: *@This(),
        _aSelector: objc.Selector,
        _anArgument: ?objc.Id,
        _delay: foundation.TimeInterval,
        _modes: ?*anyopaque,
    ) void {
        return objc.msgSend(_self, "performSelector:withObject:afterDelay:inModes:", void, .{
            _aSelector,
            _anArgument,
            _delay,
            _modes,
        });
    }

    pub fn performSelectorWithObjectAfterDelay(_self: *@This(), _aSelector: objc.Selector, _anArgument: ?objc.Id, _delay: foundation.TimeInterval) void {
        return objc.msgSend(_self, "performSelector:withObject:afterDelay:", void, .{ _aSelector, _anArgument, _delay });
    }

    pub fn cancelPreviousPerformRequestsWithTargetSelectorObject(_aTarget: ?objc.Id, _aSelector: objc.Selector, _anArgument: ?objc.Id) void {
        return objc.msgSend(Internal.class(), "cancelPreviousPerformRequestsWithTarget:selector:object:", void, .{ _aTarget, _aSelector, _anArgument });
    }

    pub fn cancelPreviousPerformRequestsWithTarget(_aTarget: ?objc.Id) void {
        return objc.msgSend(Internal.class(), "cancelPreviousPerformRequestsWithTarget:", void, .{_aTarget});
    }

    pub fn urlResourceDataDidBecomeAvailable(_self: *@This(), _sender: ?*foundation.URL, _newBytes: ?*foundation.Data) void {
        return objc.msgSend(_self, "URL:resourceDataDidBecomeAvailable:", void, .{ _sender, _newBytes });
    }

    pub fn urlResourceDidFinishLoading(_self: *@This(), _sender: ?*foundation.URL) void {
        return objc.msgSend(_self, "URLResourceDidFinishLoading:", void, .{_sender});
    }

    pub fn urlResourceDidCancelLoading(_self: *@This(), _sender: ?*foundation.URL) void {
        return objc.msgSend(_self, "URLResourceDidCancelLoading:", void, .{_sender});
    }

    pub fn urlResourceDidFailLoadingWithReason(_self: *@This(), _sender: ?*foundation.URL, _reason: ?*foundation.String) void {
        return objc.msgSend(_self, "URL:resourceDidFailLoadingWithReason:", void, .{ _sender, _reason });
    }

    pub fn fileManagerShouldProceedAfterError(_self: *@This(), _fm: ?*foundation.FileManager, _errorInfo: ?*foundation.Dictionary) objc.BOOL {
        return objc.msgSend(_self, "fileManager:shouldProceedAfterError:", objc.BOOL, .{ _fm, _errorInfo });
    }

    pub fn fileManagerWillProcessPath(_self: *@This(), _fm: ?*foundation.FileManager, _path: ?*foundation.String) void {
        return objc.msgSend(_self, "fileManager:willProcessPath:", void, .{ _fm, _path });
    }

    pub fn valueForKey(_self: *@This(), _key: ?*foundation.String) ?objc.Id {
        return objc.msgSend(_self, "valueForKey:", ?objc.Id, .{_key});
    }

    pub fn setValueForKey(_self: *@This(), _value: ?objc.Id, _key: ?*foundation.String) void {
        return objc.msgSend(_self, "setValue:forKey:", void, .{ _value, _key });
    }

    pub fn validateValueForKeyError(_self: *@This(), _ioValue: ?*?objc.Id, _inKey: ?*foundation.String, _outError: ?*?*foundation.Error) objc.BOOL {
        return objc.msgSend(_self, "validateValue:forKey:error:", objc.BOOL, .{ _ioValue, _inKey, _outError });
    }

    pub fn mutableArrayValueForKey(_self: *@This(), _key: ?*foundation.String) ?*foundation.MutableArray {
        return objc.msgSend(_self, "mutableArrayValueForKey:", ?*foundation.MutableArray, .{_key});
    }

    pub fn mutableOrderedSetValueForKey(_self: *@This(), _key: ?*foundation.String) ?*foundation.MutableOrderedSet {
        return objc.msgSend(_self, "mutableOrderedSetValueForKey:", ?*foundation.MutableOrderedSet, .{_key});
    }

    pub fn mutableSetValueForKey(_self: *@This(), _key: ?*foundation.String) ?*foundation.MutableSet {
        return objc.msgSend(_self, "mutableSetValueForKey:", ?*foundation.MutableSet, .{_key});
    }

    pub fn valueForKeyPath(_self: *@This(), _keyPath: ?*foundation.String) ?objc.Id {
        return objc.msgSend(_self, "valueForKeyPath:", ?objc.Id, .{_keyPath});
    }

    pub fn setValueForKeyPath(_self: *@This(), _value: ?objc.Id, _keyPath: ?*foundation.String) void {
        return objc.msgSend(_self, "setValue:forKeyPath:", void, .{ _value, _keyPath });
    }

    pub fn validateValueForKeyPathError(_self: *@This(), _ioValue: ?*?objc.Id, _inKeyPath: ?*foundation.String, _outError: ?*?*foundation.Error) objc.BOOL {
        return objc.msgSend(_self, "validateValue:forKeyPath:error:", objc.BOOL, .{ _ioValue, _inKeyPath, _outError });
    }

    pub fn mutableArrayValueForKeyPath(_self: *@This(), _keyPath: ?*foundation.String) ?*foundation.MutableArray {
        return objc.msgSend(_self, "mutableArrayValueForKeyPath:", ?*foundation.MutableArray, .{_keyPath});
    }

    pub fn mutableOrderedSetValueForKeyPath(_self: *@This(), _keyPath: ?*foundation.String) ?*foundation.MutableOrderedSet {
        return objc.msgSend(_self, "mutableOrderedSetValueForKeyPath:", ?*foundation.MutableOrderedSet, .{_keyPath});
    }

    pub fn mutableSetValueForKeyPath(_self: *@This(), _keyPath: ?*foundation.String) ?*foundation.MutableSet {
        return objc.msgSend(_self, "mutableSetValueForKeyPath:", ?*foundation.MutableSet, .{_keyPath});
    }

    pub fn valueForUndefinedKey(_self: *@This(), _key: ?*foundation.String) ?objc.Id {
        return objc.msgSend(_self, "valueForUndefinedKey:", ?objc.Id, .{_key});
    }

    pub fn setValueForUndefinedKey(_self: *@This(), _value: ?objc.Id, _key: ?*foundation.String) void {
        return objc.msgSend(_self, "setValue:forUndefinedKey:", void, .{ _value, _key });
    }

    pub fn setNilValueForKey(_self: *@This(), _key: ?*foundation.String) void {
        return objc.msgSend(_self, "setNilValueForKey:", void, .{_key});
    }

    pub fn dictionaryWithValuesForKeys(_self: *@This(), _keys: ?*anyopaque) ?*anyopaque {
        return objc.msgSend(_self, "dictionaryWithValuesForKeys:", ?*anyopaque, .{_keys});
    }

    pub fn setValuesForKeysWithDictionary(_self: *@This(), _keyedValues: ?*anyopaque) void {
        return objc.msgSend(_self, "setValuesForKeysWithDictionary:", void, .{_keyedValues});
    }

    pub fn accessInstanceVariablesDirectly() objc.BOOL {
        return objc.msgSend(Internal.class(), "accessInstanceVariablesDirectly", objc.BOOL, .{});
    }

    pub fn useStoredAccessor() objc.BOOL {
        return objc.msgSend(Internal.class(), "useStoredAccessor", objc.BOOL, .{});
    }

    pub fn storedValueForKey(_self: *@This(), _key: ?*foundation.String) ?objc.Id {
        return objc.msgSend(_self, "storedValueForKey:", ?objc.Id, .{_key});
    }

    pub fn takeStoredValueForKey(_self: *@This(), _value: ?objc.Id, _key: ?*foundation.String) void {
        return objc.msgSend(_self, "takeStoredValue:forKey:", void, .{ _value, _key });
    }

    pub fn takeValueForKey(_self: *@This(), _value: ?objc.Id, _key: ?*foundation.String) void {
        return objc.msgSend(_self, "takeValue:forKey:", void, .{ _value, _key });
    }

    pub fn takeValueForKeyPath(_self: *@This(), _value: ?objc.Id, _keyPath: ?*foundation.String) void {
        return objc.msgSend(_self, "takeValue:forKeyPath:", void, .{ _value, _keyPath });
    }

    pub fn handleQueryWithUnboundKey(_self: *@This(), _key: ?*foundation.String) ?objc.Id {
        return objc.msgSend(_self, "handleQueryWithUnboundKey:", ?objc.Id, .{_key});
    }

    pub fn handleTakeValueForUnboundKey(_self: *@This(), _value: ?objc.Id, _key: ?*foundation.String) void {
        return objc.msgSend(_self, "handleTakeValue:forUnboundKey:", void, .{ _value, _key });
    }

    pub fn unableToSetNilForKey(_self: *@This(), _key: ?*foundation.String) void {
        return objc.msgSend(_self, "unableToSetNilForKey:", void, .{_key});
    }

    pub fn valuesForKeys(_self: *@This(), _keys: ?*foundation.Array) ?*foundation.Dictionary {
        return objc.msgSend(_self, "valuesForKeys:", ?*foundation.Dictionary, .{_keys});
    }

    pub fn takeValuesFromDictionary(_self: *@This(), _properties: ?*foundation.Dictionary) void {
        return objc.msgSend(_self, "takeValuesFromDictionary:", void, .{_properties});
    }

    pub fn observeValueForKeyPathOfObjectChangeContext(
        _self: *@This(),
        _keyPath: ?*foundation.String,
        _object: ?objc.Id,
        _change: ?*anyopaque,
        _context: ?*anyopaque,
    ) void {
        return objc.msgSend(_self, "observeValueForKeyPath:ofObject:change:context:", void, .{
            _keyPath,
            _object,
            _change,
            _context,
        });
    }

    pub fn addObserverForKeyPathOptionsContext(
        _self: *@This(),
        _observer: ?*objc.NSObject,
        _keyPath: ?*foundation.String,
        _options: foundation.KeyValueObservingOptions,
        _context: ?*anyopaque,
    ) void {
        return objc.msgSend(_self, "addObserver:forKeyPath:options:context:", void, .{
            _observer,
            _keyPath,
            _options,
            _context,
        });
    }

    pub fn removeObserverForKeyPathContext(_self: *@This(), _observer: ?*objc.NSObject, _keyPath: ?*foundation.String, _context: ?*anyopaque) void {
        return objc.msgSend(_self, "removeObserver:forKeyPath:context:", void, .{ _observer, _keyPath, _context });
    }

    pub fn removeObserverForKeyPath(_self: *@This(), _observer: ?*objc.NSObject, _keyPath: ?*foundation.String) void {
        return objc.msgSend(_self, "removeObserver:forKeyPath:", void, .{ _observer, _keyPath });
    }

    pub fn willChangeValueForKey(_self: *@This(), _key: ?*foundation.String) void {
        return objc.msgSend(_self, "willChangeValueForKey:", void, .{_key});
    }

    pub fn didChangeValueForKey(_self: *@This(), _key: ?*foundation.String) void {
        return objc.msgSend(_self, "didChangeValueForKey:", void, .{_key});
    }

    pub fn willChangeValuesAtIndexesForKey(_self: *@This(), _changeKind: foundation.KeyValueChange, _indexes: ?*foundation.IndexSet, _key: ?*foundation.String) void {
        return objc.msgSend(_self, "willChange:valuesAtIndexes:forKey:", void, .{ _changeKind, _indexes, _key });
    }

    pub fn didChangeValuesAtIndexesForKey(_self: *@This(), _changeKind: foundation.KeyValueChange, _indexes: ?*foundation.IndexSet, _key: ?*foundation.String) void {
        return objc.msgSend(_self, "didChange:valuesAtIndexes:forKey:", void, .{ _changeKind, _indexes, _key });
    }

    pub fn willChangeValueForKeyWithSetMutationUsingObjects(_self: *@This(), _key: ?*foundation.String, _mutationKind: foundation.KeyValueSetMutationKind, _objects: ?*foundation.Set) void {
        return objc.msgSend(_self, "willChangeValueForKey:withSetMutation:usingObjects:", void, .{ _key, _mutationKind, _objects });
    }

    pub fn didChangeValueForKeyWithSetMutationUsingObjects(_self: *@This(), _key: ?*foundation.String, _mutationKind: foundation.KeyValueSetMutationKind, _objects: ?*foundation.Set) void {
        return objc.msgSend(_self, "didChangeValueForKey:withSetMutation:usingObjects:", void, .{ _key, _mutationKind, _objects });
    }

    pub fn keyPathsForValuesAffectingValueForKey(_key: ?*foundation.String) ?*anyopaque {
        return objc.msgSend(Internal.class(), "keyPathsForValuesAffectingValueForKey:", ?*anyopaque, .{_key});
    }

    pub fn automaticallyNotifiesObserversForKey(_key: ?*foundation.String) objc.BOOL {
        return objc.msgSend(Internal.class(), "automaticallyNotifiesObserversForKey:", objc.BOOL, .{_key});
    }

    pub fn observationInfo(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "observationInfo", ?*anyopaque, .{});
    }

    pub fn setObservationInfo(_self: *@This(), _observationInfo: ?*anyopaque) void {
        return objc.msgSend(_self, "setObservationInfo:", void, .{_observationInfo});
    }

    pub fn setKeysTriggerChangeNotificationsForDependentKey(_keys: ?*foundation.Array, _dependentKey: ?*foundation.String) void {
        return objc.msgSend(Internal.class(), "setKeys:triggerChangeNotificationsForDependentKey:", void, .{ _keys, _dependentKey });
    }

    pub fn setSharedObservers(_self: *@This(), _sharedObservers: ?*foundation.KeyValueSharedObserversSnapshot) void {
        return objc.msgSend(_self, "setSharedObservers:", void, .{_sharedObservers});
    }

    pub fn replacementObjectForKeyedArchiver(_self: *@This(), _archiver: ?*foundation.KeyedArchiver) ?objc.Id {
        return objc.msgSend(_self, "replacementObjectForKeyedArchiver:", ?objc.Id, .{_archiver});
    }

    pub fn classFallbacksForKeyedArchiver() ?*anyopaque {
        return objc.msgSend(Internal.class(), "classFallbacksForKeyedArchiver", ?*anyopaque, .{});
    }

    pub fn classForKeyedArchiver(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "classForKeyedArchiver", objc.Class, .{});
    }

    pub fn classForKeyedUnarchiver() objc.Class {
        return objc.msgSend(Internal.class(), "classForKeyedUnarchiver", objc.Class, .{});
    }

    pub fn performSelectorOnMainThreadWithObjectWaitUntilDoneModes(
        _self: *@This(),
        _aSelector: objc.Selector,
        _arg: ?objc.Id,
        _wait: objc.BOOL,
        _array: ?*anyopaque,
    ) void {
        return objc.msgSend(_self, "performSelectorOnMainThread:withObject:waitUntilDone:modes:", void, .{
            _aSelector,
            _arg,
            _wait,
            _array,
        });
    }

    pub fn performSelectorOnMainThreadWithObjectWaitUntilDone(_self: *@This(), _aSelector: objc.Selector, _arg: ?objc.Id, _wait: objc.BOOL) void {
        return objc.msgSend(_self, "performSelectorOnMainThread:withObject:waitUntilDone:", void, .{ _aSelector, _arg, _wait });
    }

    pub fn performSelectorOnThreadWithObjectWaitUntilDoneModes(
        _self: *@This(),
        _aSelector: objc.Selector,
        _thr: ?*foundation.Thread,
        _arg: ?objc.Id,
        _wait: objc.BOOL,
        _array: ?*anyopaque,
    ) void {
        return objc.msgSend(_self, "performSelector:onThread:withObject:waitUntilDone:modes:", void, .{
            _aSelector,
            _thr,
            _arg,
            _wait,
            _array,
        });
    }

    pub fn performSelectorOnThreadWithObjectWaitUntilDone(
        _self: *@This(),
        _aSelector: objc.Selector,
        _thr: ?*foundation.Thread,
        _arg: ?objc.Id,
        _wait: objc.BOOL,
    ) void {
        return objc.msgSend(_self, "performSelector:onThread:withObject:waitUntilDone:", void, .{
            _aSelector,
            _thr,
            _arg,
            _wait,
        });
    }

    pub fn performSelectorInBackgroundWithObject(_self: *@This(), _aSelector: objc.Selector, _arg: ?objc.Id) void {
        return objc.msgSend(_self, "performSelectorInBackground:withObject:", void, .{ _aSelector, _arg });
    }

    pub fn replacementObjectForArchiver(_self: *@This(), _archiver: ?*foundation.Archiver) ?objc.Id {
        return objc.msgSend(_self, "replacementObjectForArchiver:", ?objc.Id, .{_archiver});
    }

    pub fn classForArchiver(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "classForArchiver", objc.Class, .{});
    }

    pub fn replacementObjectForPortCoder(_self: *@This(), _coder: ?*foundation.PortCoder) ?objc.Id {
        return objc.msgSend(_self, "replacementObjectForPortCoder:", ?objc.Id, .{_coder});
    }

    pub fn classForPortCoder(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "classForPortCoder", objc.Class, .{});
    }

    pub fn inverseForRelationshipKey(_self: *@This(), _relationshipKey: ?*foundation.String) ?*foundation.String {
        return objc.msgSend(_self, "inverseForRelationshipKey:", ?*foundation.String, .{_relationshipKey});
    }

    pub fn classDescription(_self: *@This()) ?*foundation.ClassDescription {
        return objc.msgSend(_self, "classDescription", ?*foundation.ClassDescription, .{});
    }

    pub fn attributeKeys(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "attributeKeys", ?*anyopaque, .{});
    }

    pub fn toOneRelationshipKeys(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "toOneRelationshipKeys", ?*anyopaque, .{});
    }

    pub fn toManyRelationshipKeys(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "toManyRelationshipKeys", ?*anyopaque, .{});
    }

    pub fn scriptingValueForSpecifier(_self: *@This(), _objectSpecifier: ?*foundation.ScriptObjectSpecifier) ?objc.Id {
        return objc.msgSend(_self, "scriptingValueForSpecifier:", ?objc.Id, .{_objectSpecifier});
    }

    pub fn copyScriptingValueForKeyWithProperties(_self: *@This(), _value: ?objc.Id, _key: ?*foundation.String, _properties: ?*anyopaque) ?objc.Id {
        return objc.msgSend(_self, "copyScriptingValue:forKey:withProperties:", ?objc.Id, .{ _value, _key, _properties });
    }

    pub fn newScriptingObjectOfClassForValueForKeyWithContentsValueProperties(
        _self: *@This(),
        _objectClass: objc.Class,
        _key: ?*foundation.String,
        _contentsValue: ?objc.Id,
        _properties: ?*anyopaque,
    ) ?objc.Id {
        return objc.msgSend(_self, "newScriptingObjectOfClass:forValueForKey:withContentsValue:properties:", ?objc.Id, .{
            _objectClass,
            _key,
            _contentsValue,
            _properties,
        });
    }

    pub fn scriptingProperties(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "scriptingProperties", ?*anyopaque, .{});
    }

    pub fn setScriptingProperties(_self: *@This(), _scriptingProperties: ?*anyopaque) void {
        return objc.msgSend(_self, "setScriptingProperties:", void, .{_scriptingProperties});
    }

    pub fn classCode(_self: *@This()) objc.FourCharCode {
        return objc.msgSend(_self, "classCode", objc.FourCharCode, .{});
    }

    pub fn className(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "className", ?*foundation.String, .{});
    }

    pub fn valueAtIndexInPropertyWithKey(_self: *@This(), _index: objc.NSUInteger, _key: ?*foundation.String) ?objc.Id {
        return objc.msgSend(_self, "valueAtIndex:inPropertyWithKey:", ?objc.Id, .{ _index, _key });
    }

    pub fn valueWithNameInPropertyWithKey(_self: *@This(), _name: ?*foundation.String, _key: ?*foundation.String) ?objc.Id {
        return objc.msgSend(_self, "valueWithName:inPropertyWithKey:", ?objc.Id, .{ _name, _key });
    }

    pub fn valueWithUniqueIDInPropertyWithKey(_self: *@This(), _uniqueID: ?objc.Id, _key: ?*foundation.String) ?objc.Id {
        return objc.msgSend(_self, "valueWithUniqueID:inPropertyWithKey:", ?objc.Id, .{ _uniqueID, _key });
    }

    pub fn insertValueAtIndexInPropertyWithKey(_self: *@This(), _value: ?objc.Id, _index: objc.NSUInteger, _key: ?*foundation.String) void {
        return objc.msgSend(_self, "insertValue:atIndex:inPropertyWithKey:", void, .{ _value, _index, _key });
    }

    pub fn removeValueAtIndexFromPropertyWithKey(_self: *@This(), _index: objc.NSUInteger, _key: ?*foundation.String) void {
        return objc.msgSend(_self, "removeValueAtIndex:fromPropertyWithKey:", void, .{ _index, _key });
    }

    pub fn replaceValueAtIndexInPropertyWithKeyWithValue(_self: *@This(), _index: objc.NSUInteger, _key: ?*foundation.String, _value: ?objc.Id) void {
        return objc.msgSend(_self, "replaceValueAtIndex:inPropertyWithKey:withValue:", void, .{ _index, _key, _value });
    }

    pub fn insertValueInPropertyWithKey(_self: *@This(), _value: ?objc.Id, _key: ?*foundation.String) void {
        return objc.msgSend(_self, "insertValue:inPropertyWithKey:", void, .{ _value, _key });
    }

    pub fn coerceValueForKey(_self: *@This(), _value: ?objc.Id, _key: ?*foundation.String) ?objc.Id {
        return objc.msgSend(_self, "coerceValue:forKey:", ?objc.Id, .{ _value, _key });
    }

    pub fn indicesOfObjectsByEvaluatingObjectSpecifier(_self: *@This(), _specifier: ?*foundation.ScriptObjectSpecifier) ?*anyopaque {
        return objc.msgSend(_self, "indicesOfObjectsByEvaluatingObjectSpecifier:", ?*anyopaque, .{_specifier});
    }

    pub fn objectSpecifier(_self: *@This()) ?*foundation.ScriptObjectSpecifier {
        return objc.msgSend(_self, "objectSpecifier", ?*foundation.ScriptObjectSpecifier, .{});
    }

    pub fn isEqualTo(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqualTo:", objc.BOOL, .{_object});
    }

    pub fn isLessThanOrEqualTo(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isLessThanOrEqualTo:", objc.BOOL, .{_object});
    }

    pub fn isLessThan(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isLessThan:", objc.BOOL, .{_object});
    }

    pub fn isGreaterThanOrEqualTo(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isGreaterThanOrEqualTo:", objc.BOOL, .{_object});
    }

    pub fn isGreaterThan(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isGreaterThan:", objc.BOOL, .{_object});
    }

    pub fn isNotEqualTo(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isNotEqualTo:", objc.BOOL, .{_object});
    }

    pub fn doesContain(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "doesContain:", objc.BOOL, .{_object});
    }

    pub fn isLike(_self: *@This(), _object: ?*foundation.String) objc.BOOL {
        return objc.msgSend(_self, "isLike:", objc.BOOL, .{_object});
    }

    pub fn isCaseInsensitiveLike(_self: *@This(), _object: ?*foundation.String) objc.BOOL {
        return objc.msgSend(_self, "isCaseInsensitiveLike:", objc.BOOL, .{_object});
    }

    pub fn scriptingIsEqualTo(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "scriptingIsEqualTo:", objc.BOOL, .{_object});
    }

    pub fn scriptingIsLessThanOrEqualTo(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "scriptingIsLessThanOrEqualTo:", objc.BOOL, .{_object});
    }

    pub fn scriptingIsLessThan(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "scriptingIsLessThan:", objc.BOOL, .{_object});
    }

    pub fn scriptingIsGreaterThanOrEqualTo(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "scriptingIsGreaterThanOrEqualTo:", objc.BOOL, .{_object});
    }

    pub fn scriptingIsGreaterThan(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "scriptingIsGreaterThan:", objc.BOOL, .{_object});
    }

    pub fn scriptingBeginsWith(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "scriptingBeginsWith:", objc.BOOL, .{_object});
    }

    pub fn scriptingEndsWith(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "scriptingEndsWith:", objc.BOOL, .{_object});
    }

    pub fn scriptingContains(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "scriptingContains:", objc.BOOL, .{_object});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*foundation.Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*foundation.Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn supportsSecureCoding() objc.BOOL {
        return objc.msgSend(Internal.class(), "supportsSecureCoding", objc.BOOL, .{});
    }

    pub fn behaviorPeriodic() *@This() {
        return objc.msgSend(Internal.class(), "behaviorPeriodic", *@This(), .{});
    }

    pub fn behaviorPeriodicWithCount(_count: objc.NSInteger) *@This() {
        return objc.msgSend(Internal.class(), "behaviorPeriodicWithCount:", *@This(), .{_count});
    }

    pub fn behaviorPeriodicWithDelay(_delay: f64) *@This() {
        return objc.msgSend(Internal.class(), "behaviorPeriodicWithDelay:", *@This(), .{_delay});
    }

    pub fn behaviorPeriodicWithCountDelay(_count: objc.NSInteger, _delay: f64) *@This() {
        return objc.msgSend(Internal.class(), "behaviorPeriodicWithCount:delay:", *@This(), .{ _count, _delay });
    }

    pub fn behaviorContinuous() *@This() {
        return objc.msgSend(Internal.class(), "behaviorContinuous", *@This(), .{});
    }
};

/// https://developer.apple.com/documentation/Symbols/NSSymbolEffectOptions?language=objc
pub const SymbolEffectOptions = opaque {
    pub const Internal = objc.ExternClass("NSSymbolEffectOptions", @This(), objc.NSObject, &.{ foundation.Copying, foundation.SecureCoding });
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "description", ?*foundation.String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "debugDescription", ?*foundation.String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*foundation.Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*foundation.MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*foundation.MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*foundation.MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*foundation.MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn version() objc.NSInteger {
        return objc.msgSend(Internal.class(), "version", objc.NSInteger, .{});
    }

    pub fn setVersion(_aVersion: objc.NSInteger) void {
        return objc.msgSend(Internal.class(), "setVersion:", void, .{_aVersion});
    }

    pub fn replacementObjectForCoder(_self: *@This(), _coder: ?*foundation.Coder) ?objc.Id {
        return objc.msgSend(_self, "replacementObjectForCoder:", ?objc.Id, .{_coder});
    }

    pub fn awakeAfterUsingCoder(_self: *@This(), _coder: ?*foundation.Coder) ?objc.Id {
        return objc.msgSend(_self, "awakeAfterUsingCoder:", ?objc.Id, .{_coder});
    }

    pub fn classForCoder(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "classForCoder", objc.Class, .{});
    }

    pub fn poseAsClass(_aClass: objc.Class) void {
        return objc.msgSend(Internal.class(), "poseAsClass:", void, .{_aClass});
    }

    pub fn autoContentAccessingProxy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "autoContentAccessingProxy", ?objc.Id, .{});
    }

    pub fn attemptRecoveryFromErrorOptionIndexDelegateDidRecoverSelectorContextInfo(
        _self: *@This(),
        _error: ?*foundation.Error,
        _recoveryOptionIndex: objc.NSUInteger,
        _delegate: ?objc.Id,
        _didRecoverSelector: objc.Selector,
        _contextInfo: ?*anyopaque,
    ) void {
        return objc.msgSend(_self, "attemptRecoveryFromError:optionIndex:delegate:didRecoverSelector:contextInfo:", void, .{
            _error,
            _recoveryOptionIndex,
            _delegate,
            _didRecoverSelector,
            _contextInfo,
        });
    }

    pub fn attemptRecoveryFromErrorOptionIndex(_self: *@This(), _error: ?*foundation.Error, _recoveryOptionIndex: objc.NSUInteger) objc.BOOL {
        return objc.msgSend(_self, "attemptRecoveryFromError:optionIndex:", objc.BOOL, .{ _error, _recoveryOptionIndex });
    }

    pub fn performSelectorWithObjectAfterDelayInModes(
        _self: *@This(),
        _aSelector: objc.Selector,
        _anArgument: ?objc.Id,
        _delay: foundation.TimeInterval,
        _modes: ?*anyopaque,
    ) void {
        return objc.msgSend(_self, "performSelector:withObject:afterDelay:inModes:", void, .{
            _aSelector,
            _anArgument,
            _delay,
            _modes,
        });
    }

    pub fn performSelectorWithObjectAfterDelay(_self: *@This(), _aSelector: objc.Selector, _anArgument: ?objc.Id, _delay: foundation.TimeInterval) void {
        return objc.msgSend(_self, "performSelector:withObject:afterDelay:", void, .{ _aSelector, _anArgument, _delay });
    }

    pub fn cancelPreviousPerformRequestsWithTargetSelectorObject(_aTarget: ?objc.Id, _aSelector: objc.Selector, _anArgument: ?objc.Id) void {
        return objc.msgSend(Internal.class(), "cancelPreviousPerformRequestsWithTarget:selector:object:", void, .{ _aTarget, _aSelector, _anArgument });
    }

    pub fn cancelPreviousPerformRequestsWithTarget(_aTarget: ?objc.Id) void {
        return objc.msgSend(Internal.class(), "cancelPreviousPerformRequestsWithTarget:", void, .{_aTarget});
    }

    pub fn urlResourceDataDidBecomeAvailable(_self: *@This(), _sender: ?*foundation.URL, _newBytes: ?*foundation.Data) void {
        return objc.msgSend(_self, "URL:resourceDataDidBecomeAvailable:", void, .{ _sender, _newBytes });
    }

    pub fn urlResourceDidFinishLoading(_self: *@This(), _sender: ?*foundation.URL) void {
        return objc.msgSend(_self, "URLResourceDidFinishLoading:", void, .{_sender});
    }

    pub fn urlResourceDidCancelLoading(_self: *@This(), _sender: ?*foundation.URL) void {
        return objc.msgSend(_self, "URLResourceDidCancelLoading:", void, .{_sender});
    }

    pub fn urlResourceDidFailLoadingWithReason(_self: *@This(), _sender: ?*foundation.URL, _reason: ?*foundation.String) void {
        return objc.msgSend(_self, "URL:resourceDidFailLoadingWithReason:", void, .{ _sender, _reason });
    }

    pub fn fileManagerShouldProceedAfterError(_self: *@This(), _fm: ?*foundation.FileManager, _errorInfo: ?*foundation.Dictionary) objc.BOOL {
        return objc.msgSend(_self, "fileManager:shouldProceedAfterError:", objc.BOOL, .{ _fm, _errorInfo });
    }

    pub fn fileManagerWillProcessPath(_self: *@This(), _fm: ?*foundation.FileManager, _path: ?*foundation.String) void {
        return objc.msgSend(_self, "fileManager:willProcessPath:", void, .{ _fm, _path });
    }

    pub fn valueForKey(_self: *@This(), _key: ?*foundation.String) ?objc.Id {
        return objc.msgSend(_self, "valueForKey:", ?objc.Id, .{_key});
    }

    pub fn setValueForKey(_self: *@This(), _value: ?objc.Id, _key: ?*foundation.String) void {
        return objc.msgSend(_self, "setValue:forKey:", void, .{ _value, _key });
    }

    pub fn validateValueForKeyError(_self: *@This(), _ioValue: ?*?objc.Id, _inKey: ?*foundation.String, _outError: ?*?*foundation.Error) objc.BOOL {
        return objc.msgSend(_self, "validateValue:forKey:error:", objc.BOOL, .{ _ioValue, _inKey, _outError });
    }

    pub fn mutableArrayValueForKey(_self: *@This(), _key: ?*foundation.String) ?*foundation.MutableArray {
        return objc.msgSend(_self, "mutableArrayValueForKey:", ?*foundation.MutableArray, .{_key});
    }

    pub fn mutableOrderedSetValueForKey(_self: *@This(), _key: ?*foundation.String) ?*foundation.MutableOrderedSet {
        return objc.msgSend(_self, "mutableOrderedSetValueForKey:", ?*foundation.MutableOrderedSet, .{_key});
    }

    pub fn mutableSetValueForKey(_self: *@This(), _key: ?*foundation.String) ?*foundation.MutableSet {
        return objc.msgSend(_self, "mutableSetValueForKey:", ?*foundation.MutableSet, .{_key});
    }

    pub fn valueForKeyPath(_self: *@This(), _keyPath: ?*foundation.String) ?objc.Id {
        return objc.msgSend(_self, "valueForKeyPath:", ?objc.Id, .{_keyPath});
    }

    pub fn setValueForKeyPath(_self: *@This(), _value: ?objc.Id, _keyPath: ?*foundation.String) void {
        return objc.msgSend(_self, "setValue:forKeyPath:", void, .{ _value, _keyPath });
    }

    pub fn validateValueForKeyPathError(_self: *@This(), _ioValue: ?*?objc.Id, _inKeyPath: ?*foundation.String, _outError: ?*?*foundation.Error) objc.BOOL {
        return objc.msgSend(_self, "validateValue:forKeyPath:error:", objc.BOOL, .{ _ioValue, _inKeyPath, _outError });
    }

    pub fn mutableArrayValueForKeyPath(_self: *@This(), _keyPath: ?*foundation.String) ?*foundation.MutableArray {
        return objc.msgSend(_self, "mutableArrayValueForKeyPath:", ?*foundation.MutableArray, .{_keyPath});
    }

    pub fn mutableOrderedSetValueForKeyPath(_self: *@This(), _keyPath: ?*foundation.String) ?*foundation.MutableOrderedSet {
        return objc.msgSend(_self, "mutableOrderedSetValueForKeyPath:", ?*foundation.MutableOrderedSet, .{_keyPath});
    }

    pub fn mutableSetValueForKeyPath(_self: *@This(), _keyPath: ?*foundation.String) ?*foundation.MutableSet {
        return objc.msgSend(_self, "mutableSetValueForKeyPath:", ?*foundation.MutableSet, .{_keyPath});
    }

    pub fn valueForUndefinedKey(_self: *@This(), _key: ?*foundation.String) ?objc.Id {
        return objc.msgSend(_self, "valueForUndefinedKey:", ?objc.Id, .{_key});
    }

    pub fn setValueForUndefinedKey(_self: *@This(), _value: ?objc.Id, _key: ?*foundation.String) void {
        return objc.msgSend(_self, "setValue:forUndefinedKey:", void, .{ _value, _key });
    }

    pub fn setNilValueForKey(_self: *@This(), _key: ?*foundation.String) void {
        return objc.msgSend(_self, "setNilValueForKey:", void, .{_key});
    }

    pub fn dictionaryWithValuesForKeys(_self: *@This(), _keys: ?*anyopaque) ?*anyopaque {
        return objc.msgSend(_self, "dictionaryWithValuesForKeys:", ?*anyopaque, .{_keys});
    }

    pub fn setValuesForKeysWithDictionary(_self: *@This(), _keyedValues: ?*anyopaque) void {
        return objc.msgSend(_self, "setValuesForKeysWithDictionary:", void, .{_keyedValues});
    }

    pub fn accessInstanceVariablesDirectly() objc.BOOL {
        return objc.msgSend(Internal.class(), "accessInstanceVariablesDirectly", objc.BOOL, .{});
    }

    pub fn useStoredAccessor() objc.BOOL {
        return objc.msgSend(Internal.class(), "useStoredAccessor", objc.BOOL, .{});
    }

    pub fn storedValueForKey(_self: *@This(), _key: ?*foundation.String) ?objc.Id {
        return objc.msgSend(_self, "storedValueForKey:", ?objc.Id, .{_key});
    }

    pub fn takeStoredValueForKey(_self: *@This(), _value: ?objc.Id, _key: ?*foundation.String) void {
        return objc.msgSend(_self, "takeStoredValue:forKey:", void, .{ _value, _key });
    }

    pub fn takeValueForKey(_self: *@This(), _value: ?objc.Id, _key: ?*foundation.String) void {
        return objc.msgSend(_self, "takeValue:forKey:", void, .{ _value, _key });
    }

    pub fn takeValueForKeyPath(_self: *@This(), _value: ?objc.Id, _keyPath: ?*foundation.String) void {
        return objc.msgSend(_self, "takeValue:forKeyPath:", void, .{ _value, _keyPath });
    }

    pub fn handleQueryWithUnboundKey(_self: *@This(), _key: ?*foundation.String) ?objc.Id {
        return objc.msgSend(_self, "handleQueryWithUnboundKey:", ?objc.Id, .{_key});
    }

    pub fn handleTakeValueForUnboundKey(_self: *@This(), _value: ?objc.Id, _key: ?*foundation.String) void {
        return objc.msgSend(_self, "handleTakeValue:forUnboundKey:", void, .{ _value, _key });
    }

    pub fn unableToSetNilForKey(_self: *@This(), _key: ?*foundation.String) void {
        return objc.msgSend(_self, "unableToSetNilForKey:", void, .{_key});
    }

    pub fn valuesForKeys(_self: *@This(), _keys: ?*foundation.Array) ?*foundation.Dictionary {
        return objc.msgSend(_self, "valuesForKeys:", ?*foundation.Dictionary, .{_keys});
    }

    pub fn takeValuesFromDictionary(_self: *@This(), _properties: ?*foundation.Dictionary) void {
        return objc.msgSend(_self, "takeValuesFromDictionary:", void, .{_properties});
    }

    pub fn observeValueForKeyPathOfObjectChangeContext(
        _self: *@This(),
        _keyPath: ?*foundation.String,
        _object: ?objc.Id,
        _change: ?*anyopaque,
        _context: ?*anyopaque,
    ) void {
        return objc.msgSend(_self, "observeValueForKeyPath:ofObject:change:context:", void, .{
            _keyPath,
            _object,
            _change,
            _context,
        });
    }

    pub fn addObserverForKeyPathOptionsContext(
        _self: *@This(),
        _observer: ?*objc.NSObject,
        _keyPath: ?*foundation.String,
        _options: foundation.KeyValueObservingOptions,
        _context: ?*anyopaque,
    ) void {
        return objc.msgSend(_self, "addObserver:forKeyPath:options:context:", void, .{
            _observer,
            _keyPath,
            _options,
            _context,
        });
    }

    pub fn removeObserverForKeyPathContext(_self: *@This(), _observer: ?*objc.NSObject, _keyPath: ?*foundation.String, _context: ?*anyopaque) void {
        return objc.msgSend(_self, "removeObserver:forKeyPath:context:", void, .{ _observer, _keyPath, _context });
    }

    pub fn removeObserverForKeyPath(_self: *@This(), _observer: ?*objc.NSObject, _keyPath: ?*foundation.String) void {
        return objc.msgSend(_self, "removeObserver:forKeyPath:", void, .{ _observer, _keyPath });
    }

    pub fn willChangeValueForKey(_self: *@This(), _key: ?*foundation.String) void {
        return objc.msgSend(_self, "willChangeValueForKey:", void, .{_key});
    }

    pub fn didChangeValueForKey(_self: *@This(), _key: ?*foundation.String) void {
        return objc.msgSend(_self, "didChangeValueForKey:", void, .{_key});
    }

    pub fn willChangeValuesAtIndexesForKey(_self: *@This(), _changeKind: foundation.KeyValueChange, _indexes: ?*foundation.IndexSet, _key: ?*foundation.String) void {
        return objc.msgSend(_self, "willChange:valuesAtIndexes:forKey:", void, .{ _changeKind, _indexes, _key });
    }

    pub fn didChangeValuesAtIndexesForKey(_self: *@This(), _changeKind: foundation.KeyValueChange, _indexes: ?*foundation.IndexSet, _key: ?*foundation.String) void {
        return objc.msgSend(_self, "didChange:valuesAtIndexes:forKey:", void, .{ _changeKind, _indexes, _key });
    }

    pub fn willChangeValueForKeyWithSetMutationUsingObjects(_self: *@This(), _key: ?*foundation.String, _mutationKind: foundation.KeyValueSetMutationKind, _objects: ?*foundation.Set) void {
        return objc.msgSend(_self, "willChangeValueForKey:withSetMutation:usingObjects:", void, .{ _key, _mutationKind, _objects });
    }

    pub fn didChangeValueForKeyWithSetMutationUsingObjects(_self: *@This(), _key: ?*foundation.String, _mutationKind: foundation.KeyValueSetMutationKind, _objects: ?*foundation.Set) void {
        return objc.msgSend(_self, "didChangeValueForKey:withSetMutation:usingObjects:", void, .{ _key, _mutationKind, _objects });
    }

    pub fn keyPathsForValuesAffectingValueForKey(_key: ?*foundation.String) ?*anyopaque {
        return objc.msgSend(Internal.class(), "keyPathsForValuesAffectingValueForKey:", ?*anyopaque, .{_key});
    }

    pub fn automaticallyNotifiesObserversForKey(_key: ?*foundation.String) objc.BOOL {
        return objc.msgSend(Internal.class(), "automaticallyNotifiesObserversForKey:", objc.BOOL, .{_key});
    }

    pub fn observationInfo(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "observationInfo", ?*anyopaque, .{});
    }

    pub fn setObservationInfo(_self: *@This(), _observationInfo: ?*anyopaque) void {
        return objc.msgSend(_self, "setObservationInfo:", void, .{_observationInfo});
    }

    pub fn setKeysTriggerChangeNotificationsForDependentKey(_keys: ?*foundation.Array, _dependentKey: ?*foundation.String) void {
        return objc.msgSend(Internal.class(), "setKeys:triggerChangeNotificationsForDependentKey:", void, .{ _keys, _dependentKey });
    }

    pub fn setSharedObservers(_self: *@This(), _sharedObservers: ?*foundation.KeyValueSharedObserversSnapshot) void {
        return objc.msgSend(_self, "setSharedObservers:", void, .{_sharedObservers});
    }

    pub fn replacementObjectForKeyedArchiver(_self: *@This(), _archiver: ?*foundation.KeyedArchiver) ?objc.Id {
        return objc.msgSend(_self, "replacementObjectForKeyedArchiver:", ?objc.Id, .{_archiver});
    }

    pub fn classFallbacksForKeyedArchiver() ?*anyopaque {
        return objc.msgSend(Internal.class(), "classFallbacksForKeyedArchiver", ?*anyopaque, .{});
    }

    pub fn classForKeyedArchiver(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "classForKeyedArchiver", objc.Class, .{});
    }

    pub fn classForKeyedUnarchiver() objc.Class {
        return objc.msgSend(Internal.class(), "classForKeyedUnarchiver", objc.Class, .{});
    }

    pub fn performSelectorOnMainThreadWithObjectWaitUntilDoneModes(
        _self: *@This(),
        _aSelector: objc.Selector,
        _arg: ?objc.Id,
        _wait: objc.BOOL,
        _array: ?*anyopaque,
    ) void {
        return objc.msgSend(_self, "performSelectorOnMainThread:withObject:waitUntilDone:modes:", void, .{
            _aSelector,
            _arg,
            _wait,
            _array,
        });
    }

    pub fn performSelectorOnMainThreadWithObjectWaitUntilDone(_self: *@This(), _aSelector: objc.Selector, _arg: ?objc.Id, _wait: objc.BOOL) void {
        return objc.msgSend(_self, "performSelectorOnMainThread:withObject:waitUntilDone:", void, .{ _aSelector, _arg, _wait });
    }

    pub fn performSelectorOnThreadWithObjectWaitUntilDoneModes(
        _self: *@This(),
        _aSelector: objc.Selector,
        _thr: ?*foundation.Thread,
        _arg: ?objc.Id,
        _wait: objc.BOOL,
        _array: ?*anyopaque,
    ) void {
        return objc.msgSend(_self, "performSelector:onThread:withObject:waitUntilDone:modes:", void, .{
            _aSelector,
            _thr,
            _arg,
            _wait,
            _array,
        });
    }

    pub fn performSelectorOnThreadWithObjectWaitUntilDone(
        _self: *@This(),
        _aSelector: objc.Selector,
        _thr: ?*foundation.Thread,
        _arg: ?objc.Id,
        _wait: objc.BOOL,
    ) void {
        return objc.msgSend(_self, "performSelector:onThread:withObject:waitUntilDone:", void, .{
            _aSelector,
            _thr,
            _arg,
            _wait,
        });
    }

    pub fn performSelectorInBackgroundWithObject(_self: *@This(), _aSelector: objc.Selector, _arg: ?objc.Id) void {
        return objc.msgSend(_self, "performSelectorInBackground:withObject:", void, .{ _aSelector, _arg });
    }

    pub fn replacementObjectForArchiver(_self: *@This(), _archiver: ?*foundation.Archiver) ?objc.Id {
        return objc.msgSend(_self, "replacementObjectForArchiver:", ?objc.Id, .{_archiver});
    }

    pub fn classForArchiver(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "classForArchiver", objc.Class, .{});
    }

    pub fn replacementObjectForPortCoder(_self: *@This(), _coder: ?*foundation.PortCoder) ?objc.Id {
        return objc.msgSend(_self, "replacementObjectForPortCoder:", ?objc.Id, .{_coder});
    }

    pub fn classForPortCoder(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "classForPortCoder", objc.Class, .{});
    }

    pub fn inverseForRelationshipKey(_self: *@This(), _relationshipKey: ?*foundation.String) ?*foundation.String {
        return objc.msgSend(_self, "inverseForRelationshipKey:", ?*foundation.String, .{_relationshipKey});
    }

    pub fn classDescription(_self: *@This()) ?*foundation.ClassDescription {
        return objc.msgSend(_self, "classDescription", ?*foundation.ClassDescription, .{});
    }

    pub fn attributeKeys(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "attributeKeys", ?*anyopaque, .{});
    }

    pub fn toOneRelationshipKeys(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "toOneRelationshipKeys", ?*anyopaque, .{});
    }

    pub fn toManyRelationshipKeys(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "toManyRelationshipKeys", ?*anyopaque, .{});
    }

    pub fn scriptingValueForSpecifier(_self: *@This(), _objectSpecifier: ?*foundation.ScriptObjectSpecifier) ?objc.Id {
        return objc.msgSend(_self, "scriptingValueForSpecifier:", ?objc.Id, .{_objectSpecifier});
    }

    pub fn copyScriptingValueForKeyWithProperties(_self: *@This(), _value: ?objc.Id, _key: ?*foundation.String, _properties: ?*anyopaque) ?objc.Id {
        return objc.msgSend(_self, "copyScriptingValue:forKey:withProperties:", ?objc.Id, .{ _value, _key, _properties });
    }

    pub fn newScriptingObjectOfClassForValueForKeyWithContentsValueProperties(
        _self: *@This(),
        _objectClass: objc.Class,
        _key: ?*foundation.String,
        _contentsValue: ?objc.Id,
        _properties: ?*anyopaque,
    ) ?objc.Id {
        return objc.msgSend(_self, "newScriptingObjectOfClass:forValueForKey:withContentsValue:properties:", ?objc.Id, .{
            _objectClass,
            _key,
            _contentsValue,
            _properties,
        });
    }

    pub fn scriptingProperties(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "scriptingProperties", ?*anyopaque, .{});
    }

    pub fn setScriptingProperties(_self: *@This(), _scriptingProperties: ?*anyopaque) void {
        return objc.msgSend(_self, "setScriptingProperties:", void, .{_scriptingProperties});
    }

    pub fn classCode(_self: *@This()) objc.FourCharCode {
        return objc.msgSend(_self, "classCode", objc.FourCharCode, .{});
    }

    pub fn className(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "className", ?*foundation.String, .{});
    }

    pub fn valueAtIndexInPropertyWithKey(_self: *@This(), _index: objc.NSUInteger, _key: ?*foundation.String) ?objc.Id {
        return objc.msgSend(_self, "valueAtIndex:inPropertyWithKey:", ?objc.Id, .{ _index, _key });
    }

    pub fn valueWithNameInPropertyWithKey(_self: *@This(), _name: ?*foundation.String, _key: ?*foundation.String) ?objc.Id {
        return objc.msgSend(_self, "valueWithName:inPropertyWithKey:", ?objc.Id, .{ _name, _key });
    }

    pub fn valueWithUniqueIDInPropertyWithKey(_self: *@This(), _uniqueID: ?objc.Id, _key: ?*foundation.String) ?objc.Id {
        return objc.msgSend(_self, "valueWithUniqueID:inPropertyWithKey:", ?objc.Id, .{ _uniqueID, _key });
    }

    pub fn insertValueAtIndexInPropertyWithKey(_self: *@This(), _value: ?objc.Id, _index: objc.NSUInteger, _key: ?*foundation.String) void {
        return objc.msgSend(_self, "insertValue:atIndex:inPropertyWithKey:", void, .{ _value, _index, _key });
    }

    pub fn removeValueAtIndexFromPropertyWithKey(_self: *@This(), _index: objc.NSUInteger, _key: ?*foundation.String) void {
        return objc.msgSend(_self, "removeValueAtIndex:fromPropertyWithKey:", void, .{ _index, _key });
    }

    pub fn replaceValueAtIndexInPropertyWithKeyWithValue(_self: *@This(), _index: objc.NSUInteger, _key: ?*foundation.String, _value: ?objc.Id) void {
        return objc.msgSend(_self, "replaceValueAtIndex:inPropertyWithKey:withValue:", void, .{ _index, _key, _value });
    }

    pub fn insertValueInPropertyWithKey(_self: *@This(), _value: ?objc.Id, _key: ?*foundation.String) void {
        return objc.msgSend(_self, "insertValue:inPropertyWithKey:", void, .{ _value, _key });
    }

    pub fn coerceValueForKey(_self: *@This(), _value: ?objc.Id, _key: ?*foundation.String) ?objc.Id {
        return objc.msgSend(_self, "coerceValue:forKey:", ?objc.Id, .{ _value, _key });
    }

    pub fn indicesOfObjectsByEvaluatingObjectSpecifier(_self: *@This(), _specifier: ?*foundation.ScriptObjectSpecifier) ?*anyopaque {
        return objc.msgSend(_self, "indicesOfObjectsByEvaluatingObjectSpecifier:", ?*anyopaque, .{_specifier});
    }

    pub fn objectSpecifier(_self: *@This()) ?*foundation.ScriptObjectSpecifier {
        return objc.msgSend(_self, "objectSpecifier", ?*foundation.ScriptObjectSpecifier, .{});
    }

    pub fn isEqualTo(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqualTo:", objc.BOOL, .{_object});
    }

    pub fn isLessThanOrEqualTo(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isLessThanOrEqualTo:", objc.BOOL, .{_object});
    }

    pub fn isLessThan(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isLessThan:", objc.BOOL, .{_object});
    }

    pub fn isGreaterThanOrEqualTo(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isGreaterThanOrEqualTo:", objc.BOOL, .{_object});
    }

    pub fn isGreaterThan(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isGreaterThan:", objc.BOOL, .{_object});
    }

    pub fn isNotEqualTo(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isNotEqualTo:", objc.BOOL, .{_object});
    }

    pub fn doesContain(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "doesContain:", objc.BOOL, .{_object});
    }

    pub fn isLike(_self: *@This(), _object: ?*foundation.String) objc.BOOL {
        return objc.msgSend(_self, "isLike:", objc.BOOL, .{_object});
    }

    pub fn isCaseInsensitiveLike(_self: *@This(), _object: ?*foundation.String) objc.BOOL {
        return objc.msgSend(_self, "isCaseInsensitiveLike:", objc.BOOL, .{_object});
    }

    pub fn scriptingIsEqualTo(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "scriptingIsEqualTo:", objc.BOOL, .{_object});
    }

    pub fn scriptingIsLessThanOrEqualTo(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "scriptingIsLessThanOrEqualTo:", objc.BOOL, .{_object});
    }

    pub fn scriptingIsLessThan(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "scriptingIsLessThan:", objc.BOOL, .{_object});
    }

    pub fn scriptingIsGreaterThanOrEqualTo(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "scriptingIsGreaterThanOrEqualTo:", objc.BOOL, .{_object});
    }

    pub fn scriptingIsGreaterThan(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "scriptingIsGreaterThan:", objc.BOOL, .{_object});
    }

    pub fn scriptingBeginsWith(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "scriptingBeginsWith:", objc.BOOL, .{_object});
    }

    pub fn scriptingEndsWith(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "scriptingEndsWith:", objc.BOOL, .{_object});
    }

    pub fn scriptingContains(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "scriptingContains:", objc.BOOL, .{_object});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*foundation.Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*foundation.Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn supportsSecureCoding() objc.BOOL {
        return objc.msgSend(Internal.class(), "supportsSecureCoding", objc.BOOL, .{});
    }

    pub fn options() *@This() {
        return objc.msgSend(Internal.class(), "options", *@This(), .{});
    }

    pub fn optionsWithRepeating() *@This() {
        return objc.msgSend(Internal.class(), "optionsWithRepeating", *@This(), .{});
    }

    pub fn optionsWithNonRepeating() *@This() {
        return objc.msgSend(Internal.class(), "optionsWithNonRepeating", *@This(), .{});
    }

    pub fn optionsWithRepeatCount(_count: objc.NSInteger) *@This() {
        return objc.msgSend(Internal.class(), "optionsWithRepeatCount:", *@This(), .{_count});
    }

    pub fn optionsWithSpeed(_speed: f64) *@This() {
        return objc.msgSend(Internal.class(), "optionsWithSpeed:", *@This(), .{_speed});
    }

    pub fn optionsWithRepeatBehavior(_behavior: ?*SymbolEffectOptionsRepeatBehavior) *@This() {
        return objc.msgSend(Internal.class(), "optionsWithRepeatBehavior:", *@This(), .{_behavior});
    }
};

/// https://developer.apple.com/documentation/Symbols/NSSymbolEffect?language=objc
pub const SymbolEffect = opaque {
    pub const Internal = objc.ExternClass("NSSymbolEffect", @This(), objc.NSObject, &.{ foundation.Copying, foundation.SecureCoding });
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "description", ?*foundation.String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "debugDescription", ?*foundation.String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*foundation.Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*foundation.MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*foundation.MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*foundation.MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*foundation.MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn version() objc.NSInteger {
        return objc.msgSend(Internal.class(), "version", objc.NSInteger, .{});
    }

    pub fn setVersion(_aVersion: objc.NSInteger) void {
        return objc.msgSend(Internal.class(), "setVersion:", void, .{_aVersion});
    }

    pub fn replacementObjectForCoder(_self: *@This(), _coder: ?*foundation.Coder) ?objc.Id {
        return objc.msgSend(_self, "replacementObjectForCoder:", ?objc.Id, .{_coder});
    }

    pub fn awakeAfterUsingCoder(_self: *@This(), _coder: ?*foundation.Coder) ?objc.Id {
        return objc.msgSend(_self, "awakeAfterUsingCoder:", ?objc.Id, .{_coder});
    }

    pub fn classForCoder(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "classForCoder", objc.Class, .{});
    }

    pub fn poseAsClass(_aClass: objc.Class) void {
        return objc.msgSend(Internal.class(), "poseAsClass:", void, .{_aClass});
    }

    pub fn autoContentAccessingProxy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "autoContentAccessingProxy", ?objc.Id, .{});
    }

    pub fn attemptRecoveryFromErrorOptionIndexDelegateDidRecoverSelectorContextInfo(
        _self: *@This(),
        _error: ?*foundation.Error,
        _recoveryOptionIndex: objc.NSUInteger,
        _delegate: ?objc.Id,
        _didRecoverSelector: objc.Selector,
        _contextInfo: ?*anyopaque,
    ) void {
        return objc.msgSend(_self, "attemptRecoveryFromError:optionIndex:delegate:didRecoverSelector:contextInfo:", void, .{
            _error,
            _recoveryOptionIndex,
            _delegate,
            _didRecoverSelector,
            _contextInfo,
        });
    }

    pub fn attemptRecoveryFromErrorOptionIndex(_self: *@This(), _error: ?*foundation.Error, _recoveryOptionIndex: objc.NSUInteger) objc.BOOL {
        return objc.msgSend(_self, "attemptRecoveryFromError:optionIndex:", objc.BOOL, .{ _error, _recoveryOptionIndex });
    }

    pub fn performSelectorWithObjectAfterDelayInModes(
        _self: *@This(),
        _aSelector: objc.Selector,
        _anArgument: ?objc.Id,
        _delay: foundation.TimeInterval,
        _modes: ?*anyopaque,
    ) void {
        return objc.msgSend(_self, "performSelector:withObject:afterDelay:inModes:", void, .{
            _aSelector,
            _anArgument,
            _delay,
            _modes,
        });
    }

    pub fn performSelectorWithObjectAfterDelay(_self: *@This(), _aSelector: objc.Selector, _anArgument: ?objc.Id, _delay: foundation.TimeInterval) void {
        return objc.msgSend(_self, "performSelector:withObject:afterDelay:", void, .{ _aSelector, _anArgument, _delay });
    }

    pub fn cancelPreviousPerformRequestsWithTargetSelectorObject(_aTarget: ?objc.Id, _aSelector: objc.Selector, _anArgument: ?objc.Id) void {
        return objc.msgSend(Internal.class(), "cancelPreviousPerformRequestsWithTarget:selector:object:", void, .{ _aTarget, _aSelector, _anArgument });
    }

    pub fn cancelPreviousPerformRequestsWithTarget(_aTarget: ?objc.Id) void {
        return objc.msgSend(Internal.class(), "cancelPreviousPerformRequestsWithTarget:", void, .{_aTarget});
    }

    pub fn urlResourceDataDidBecomeAvailable(_self: *@This(), _sender: ?*foundation.URL, _newBytes: ?*foundation.Data) void {
        return objc.msgSend(_self, "URL:resourceDataDidBecomeAvailable:", void, .{ _sender, _newBytes });
    }

    pub fn urlResourceDidFinishLoading(_self: *@This(), _sender: ?*foundation.URL) void {
        return objc.msgSend(_self, "URLResourceDidFinishLoading:", void, .{_sender});
    }

    pub fn urlResourceDidCancelLoading(_self: *@This(), _sender: ?*foundation.URL) void {
        return objc.msgSend(_self, "URLResourceDidCancelLoading:", void, .{_sender});
    }

    pub fn urlResourceDidFailLoadingWithReason(_self: *@This(), _sender: ?*foundation.URL, _reason: ?*foundation.String) void {
        return objc.msgSend(_self, "URL:resourceDidFailLoadingWithReason:", void, .{ _sender, _reason });
    }

    pub fn fileManagerShouldProceedAfterError(_self: *@This(), _fm: ?*foundation.FileManager, _errorInfo: ?*foundation.Dictionary) objc.BOOL {
        return objc.msgSend(_self, "fileManager:shouldProceedAfterError:", objc.BOOL, .{ _fm, _errorInfo });
    }

    pub fn fileManagerWillProcessPath(_self: *@This(), _fm: ?*foundation.FileManager, _path: ?*foundation.String) void {
        return objc.msgSend(_self, "fileManager:willProcessPath:", void, .{ _fm, _path });
    }

    pub fn valueForKey(_self: *@This(), _key: ?*foundation.String) ?objc.Id {
        return objc.msgSend(_self, "valueForKey:", ?objc.Id, .{_key});
    }

    pub fn setValueForKey(_self: *@This(), _value: ?objc.Id, _key: ?*foundation.String) void {
        return objc.msgSend(_self, "setValue:forKey:", void, .{ _value, _key });
    }

    pub fn validateValueForKeyError(_self: *@This(), _ioValue: ?*?objc.Id, _inKey: ?*foundation.String, _outError: ?*?*foundation.Error) objc.BOOL {
        return objc.msgSend(_self, "validateValue:forKey:error:", objc.BOOL, .{ _ioValue, _inKey, _outError });
    }

    pub fn mutableArrayValueForKey(_self: *@This(), _key: ?*foundation.String) ?*foundation.MutableArray {
        return objc.msgSend(_self, "mutableArrayValueForKey:", ?*foundation.MutableArray, .{_key});
    }

    pub fn mutableOrderedSetValueForKey(_self: *@This(), _key: ?*foundation.String) ?*foundation.MutableOrderedSet {
        return objc.msgSend(_self, "mutableOrderedSetValueForKey:", ?*foundation.MutableOrderedSet, .{_key});
    }

    pub fn mutableSetValueForKey(_self: *@This(), _key: ?*foundation.String) ?*foundation.MutableSet {
        return objc.msgSend(_self, "mutableSetValueForKey:", ?*foundation.MutableSet, .{_key});
    }

    pub fn valueForKeyPath(_self: *@This(), _keyPath: ?*foundation.String) ?objc.Id {
        return objc.msgSend(_self, "valueForKeyPath:", ?objc.Id, .{_keyPath});
    }

    pub fn setValueForKeyPath(_self: *@This(), _value: ?objc.Id, _keyPath: ?*foundation.String) void {
        return objc.msgSend(_self, "setValue:forKeyPath:", void, .{ _value, _keyPath });
    }

    pub fn validateValueForKeyPathError(_self: *@This(), _ioValue: ?*?objc.Id, _inKeyPath: ?*foundation.String, _outError: ?*?*foundation.Error) objc.BOOL {
        return objc.msgSend(_self, "validateValue:forKeyPath:error:", objc.BOOL, .{ _ioValue, _inKeyPath, _outError });
    }

    pub fn mutableArrayValueForKeyPath(_self: *@This(), _keyPath: ?*foundation.String) ?*foundation.MutableArray {
        return objc.msgSend(_self, "mutableArrayValueForKeyPath:", ?*foundation.MutableArray, .{_keyPath});
    }

    pub fn mutableOrderedSetValueForKeyPath(_self: *@This(), _keyPath: ?*foundation.String) ?*foundation.MutableOrderedSet {
        return objc.msgSend(_self, "mutableOrderedSetValueForKeyPath:", ?*foundation.MutableOrderedSet, .{_keyPath});
    }

    pub fn mutableSetValueForKeyPath(_self: *@This(), _keyPath: ?*foundation.String) ?*foundation.MutableSet {
        return objc.msgSend(_self, "mutableSetValueForKeyPath:", ?*foundation.MutableSet, .{_keyPath});
    }

    pub fn valueForUndefinedKey(_self: *@This(), _key: ?*foundation.String) ?objc.Id {
        return objc.msgSend(_self, "valueForUndefinedKey:", ?objc.Id, .{_key});
    }

    pub fn setValueForUndefinedKey(_self: *@This(), _value: ?objc.Id, _key: ?*foundation.String) void {
        return objc.msgSend(_self, "setValue:forUndefinedKey:", void, .{ _value, _key });
    }

    pub fn setNilValueForKey(_self: *@This(), _key: ?*foundation.String) void {
        return objc.msgSend(_self, "setNilValueForKey:", void, .{_key});
    }

    pub fn dictionaryWithValuesForKeys(_self: *@This(), _keys: ?*anyopaque) ?*anyopaque {
        return objc.msgSend(_self, "dictionaryWithValuesForKeys:", ?*anyopaque, .{_keys});
    }

    pub fn setValuesForKeysWithDictionary(_self: *@This(), _keyedValues: ?*anyopaque) void {
        return objc.msgSend(_self, "setValuesForKeysWithDictionary:", void, .{_keyedValues});
    }

    pub fn accessInstanceVariablesDirectly() objc.BOOL {
        return objc.msgSend(Internal.class(), "accessInstanceVariablesDirectly", objc.BOOL, .{});
    }

    pub fn useStoredAccessor() objc.BOOL {
        return objc.msgSend(Internal.class(), "useStoredAccessor", objc.BOOL, .{});
    }

    pub fn storedValueForKey(_self: *@This(), _key: ?*foundation.String) ?objc.Id {
        return objc.msgSend(_self, "storedValueForKey:", ?objc.Id, .{_key});
    }

    pub fn takeStoredValueForKey(_self: *@This(), _value: ?objc.Id, _key: ?*foundation.String) void {
        return objc.msgSend(_self, "takeStoredValue:forKey:", void, .{ _value, _key });
    }

    pub fn takeValueForKey(_self: *@This(), _value: ?objc.Id, _key: ?*foundation.String) void {
        return objc.msgSend(_self, "takeValue:forKey:", void, .{ _value, _key });
    }

    pub fn takeValueForKeyPath(_self: *@This(), _value: ?objc.Id, _keyPath: ?*foundation.String) void {
        return objc.msgSend(_self, "takeValue:forKeyPath:", void, .{ _value, _keyPath });
    }

    pub fn handleQueryWithUnboundKey(_self: *@This(), _key: ?*foundation.String) ?objc.Id {
        return objc.msgSend(_self, "handleQueryWithUnboundKey:", ?objc.Id, .{_key});
    }

    pub fn handleTakeValueForUnboundKey(_self: *@This(), _value: ?objc.Id, _key: ?*foundation.String) void {
        return objc.msgSend(_self, "handleTakeValue:forUnboundKey:", void, .{ _value, _key });
    }

    pub fn unableToSetNilForKey(_self: *@This(), _key: ?*foundation.String) void {
        return objc.msgSend(_self, "unableToSetNilForKey:", void, .{_key});
    }

    pub fn valuesForKeys(_self: *@This(), _keys: ?*foundation.Array) ?*foundation.Dictionary {
        return objc.msgSend(_self, "valuesForKeys:", ?*foundation.Dictionary, .{_keys});
    }

    pub fn takeValuesFromDictionary(_self: *@This(), _properties: ?*foundation.Dictionary) void {
        return objc.msgSend(_self, "takeValuesFromDictionary:", void, .{_properties});
    }

    pub fn observeValueForKeyPathOfObjectChangeContext(
        _self: *@This(),
        _keyPath: ?*foundation.String,
        _object: ?objc.Id,
        _change: ?*anyopaque,
        _context: ?*anyopaque,
    ) void {
        return objc.msgSend(_self, "observeValueForKeyPath:ofObject:change:context:", void, .{
            _keyPath,
            _object,
            _change,
            _context,
        });
    }

    pub fn addObserverForKeyPathOptionsContext(
        _self: *@This(),
        _observer: ?*objc.NSObject,
        _keyPath: ?*foundation.String,
        _options: foundation.KeyValueObservingOptions,
        _context: ?*anyopaque,
    ) void {
        return objc.msgSend(_self, "addObserver:forKeyPath:options:context:", void, .{
            _observer,
            _keyPath,
            _options,
            _context,
        });
    }

    pub fn removeObserverForKeyPathContext(_self: *@This(), _observer: ?*objc.NSObject, _keyPath: ?*foundation.String, _context: ?*anyopaque) void {
        return objc.msgSend(_self, "removeObserver:forKeyPath:context:", void, .{ _observer, _keyPath, _context });
    }

    pub fn removeObserverForKeyPath(_self: *@This(), _observer: ?*objc.NSObject, _keyPath: ?*foundation.String) void {
        return objc.msgSend(_self, "removeObserver:forKeyPath:", void, .{ _observer, _keyPath });
    }

    pub fn willChangeValueForKey(_self: *@This(), _key: ?*foundation.String) void {
        return objc.msgSend(_self, "willChangeValueForKey:", void, .{_key});
    }

    pub fn didChangeValueForKey(_self: *@This(), _key: ?*foundation.String) void {
        return objc.msgSend(_self, "didChangeValueForKey:", void, .{_key});
    }

    pub fn willChangeValuesAtIndexesForKey(_self: *@This(), _changeKind: foundation.KeyValueChange, _indexes: ?*foundation.IndexSet, _key: ?*foundation.String) void {
        return objc.msgSend(_self, "willChange:valuesAtIndexes:forKey:", void, .{ _changeKind, _indexes, _key });
    }

    pub fn didChangeValuesAtIndexesForKey(_self: *@This(), _changeKind: foundation.KeyValueChange, _indexes: ?*foundation.IndexSet, _key: ?*foundation.String) void {
        return objc.msgSend(_self, "didChange:valuesAtIndexes:forKey:", void, .{ _changeKind, _indexes, _key });
    }

    pub fn willChangeValueForKeyWithSetMutationUsingObjects(_self: *@This(), _key: ?*foundation.String, _mutationKind: foundation.KeyValueSetMutationKind, _objects: ?*foundation.Set) void {
        return objc.msgSend(_self, "willChangeValueForKey:withSetMutation:usingObjects:", void, .{ _key, _mutationKind, _objects });
    }

    pub fn didChangeValueForKeyWithSetMutationUsingObjects(_self: *@This(), _key: ?*foundation.String, _mutationKind: foundation.KeyValueSetMutationKind, _objects: ?*foundation.Set) void {
        return objc.msgSend(_self, "didChangeValueForKey:withSetMutation:usingObjects:", void, .{ _key, _mutationKind, _objects });
    }

    pub fn keyPathsForValuesAffectingValueForKey(_key: ?*foundation.String) ?*anyopaque {
        return objc.msgSend(Internal.class(), "keyPathsForValuesAffectingValueForKey:", ?*anyopaque, .{_key});
    }

    pub fn automaticallyNotifiesObserversForKey(_key: ?*foundation.String) objc.BOOL {
        return objc.msgSend(Internal.class(), "automaticallyNotifiesObserversForKey:", objc.BOOL, .{_key});
    }

    pub fn observationInfo(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "observationInfo", ?*anyopaque, .{});
    }

    pub fn setObservationInfo(_self: *@This(), _observationInfo: ?*anyopaque) void {
        return objc.msgSend(_self, "setObservationInfo:", void, .{_observationInfo});
    }

    pub fn setKeysTriggerChangeNotificationsForDependentKey(_keys: ?*foundation.Array, _dependentKey: ?*foundation.String) void {
        return objc.msgSend(Internal.class(), "setKeys:triggerChangeNotificationsForDependentKey:", void, .{ _keys, _dependentKey });
    }

    pub fn setSharedObservers(_self: *@This(), _sharedObservers: ?*foundation.KeyValueSharedObserversSnapshot) void {
        return objc.msgSend(_self, "setSharedObservers:", void, .{_sharedObservers});
    }

    pub fn replacementObjectForKeyedArchiver(_self: *@This(), _archiver: ?*foundation.KeyedArchiver) ?objc.Id {
        return objc.msgSend(_self, "replacementObjectForKeyedArchiver:", ?objc.Id, .{_archiver});
    }

    pub fn classFallbacksForKeyedArchiver() ?*anyopaque {
        return objc.msgSend(Internal.class(), "classFallbacksForKeyedArchiver", ?*anyopaque, .{});
    }

    pub fn classForKeyedArchiver(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "classForKeyedArchiver", objc.Class, .{});
    }

    pub fn classForKeyedUnarchiver() objc.Class {
        return objc.msgSend(Internal.class(), "classForKeyedUnarchiver", objc.Class, .{});
    }

    pub fn performSelectorOnMainThreadWithObjectWaitUntilDoneModes(
        _self: *@This(),
        _aSelector: objc.Selector,
        _arg: ?objc.Id,
        _wait: objc.BOOL,
        _array: ?*anyopaque,
    ) void {
        return objc.msgSend(_self, "performSelectorOnMainThread:withObject:waitUntilDone:modes:", void, .{
            _aSelector,
            _arg,
            _wait,
            _array,
        });
    }

    pub fn performSelectorOnMainThreadWithObjectWaitUntilDone(_self: *@This(), _aSelector: objc.Selector, _arg: ?objc.Id, _wait: objc.BOOL) void {
        return objc.msgSend(_self, "performSelectorOnMainThread:withObject:waitUntilDone:", void, .{ _aSelector, _arg, _wait });
    }

    pub fn performSelectorOnThreadWithObjectWaitUntilDoneModes(
        _self: *@This(),
        _aSelector: objc.Selector,
        _thr: ?*foundation.Thread,
        _arg: ?objc.Id,
        _wait: objc.BOOL,
        _array: ?*anyopaque,
    ) void {
        return objc.msgSend(_self, "performSelector:onThread:withObject:waitUntilDone:modes:", void, .{
            _aSelector,
            _thr,
            _arg,
            _wait,
            _array,
        });
    }

    pub fn performSelectorOnThreadWithObjectWaitUntilDone(
        _self: *@This(),
        _aSelector: objc.Selector,
        _thr: ?*foundation.Thread,
        _arg: ?objc.Id,
        _wait: objc.BOOL,
    ) void {
        return objc.msgSend(_self, "performSelector:onThread:withObject:waitUntilDone:", void, .{
            _aSelector,
            _thr,
            _arg,
            _wait,
        });
    }

    pub fn performSelectorInBackgroundWithObject(_self: *@This(), _aSelector: objc.Selector, _arg: ?objc.Id) void {
        return objc.msgSend(_self, "performSelectorInBackground:withObject:", void, .{ _aSelector, _arg });
    }

    pub fn replacementObjectForArchiver(_self: *@This(), _archiver: ?*foundation.Archiver) ?objc.Id {
        return objc.msgSend(_self, "replacementObjectForArchiver:", ?objc.Id, .{_archiver});
    }

    pub fn classForArchiver(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "classForArchiver", objc.Class, .{});
    }

    pub fn replacementObjectForPortCoder(_self: *@This(), _coder: ?*foundation.PortCoder) ?objc.Id {
        return objc.msgSend(_self, "replacementObjectForPortCoder:", ?objc.Id, .{_coder});
    }

    pub fn classForPortCoder(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "classForPortCoder", objc.Class, .{});
    }

    pub fn inverseForRelationshipKey(_self: *@This(), _relationshipKey: ?*foundation.String) ?*foundation.String {
        return objc.msgSend(_self, "inverseForRelationshipKey:", ?*foundation.String, .{_relationshipKey});
    }

    pub fn classDescription(_self: *@This()) ?*foundation.ClassDescription {
        return objc.msgSend(_self, "classDescription", ?*foundation.ClassDescription, .{});
    }

    pub fn attributeKeys(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "attributeKeys", ?*anyopaque, .{});
    }

    pub fn toOneRelationshipKeys(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "toOneRelationshipKeys", ?*anyopaque, .{});
    }

    pub fn toManyRelationshipKeys(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "toManyRelationshipKeys", ?*anyopaque, .{});
    }

    pub fn scriptingValueForSpecifier(_self: *@This(), _objectSpecifier: ?*foundation.ScriptObjectSpecifier) ?objc.Id {
        return objc.msgSend(_self, "scriptingValueForSpecifier:", ?objc.Id, .{_objectSpecifier});
    }

    pub fn copyScriptingValueForKeyWithProperties(_self: *@This(), _value: ?objc.Id, _key: ?*foundation.String, _properties: ?*anyopaque) ?objc.Id {
        return objc.msgSend(_self, "copyScriptingValue:forKey:withProperties:", ?objc.Id, .{ _value, _key, _properties });
    }

    pub fn newScriptingObjectOfClassForValueForKeyWithContentsValueProperties(
        _self: *@This(),
        _objectClass: objc.Class,
        _key: ?*foundation.String,
        _contentsValue: ?objc.Id,
        _properties: ?*anyopaque,
    ) ?objc.Id {
        return objc.msgSend(_self, "newScriptingObjectOfClass:forValueForKey:withContentsValue:properties:", ?objc.Id, .{
            _objectClass,
            _key,
            _contentsValue,
            _properties,
        });
    }

    pub fn scriptingProperties(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "scriptingProperties", ?*anyopaque, .{});
    }

    pub fn setScriptingProperties(_self: *@This(), _scriptingProperties: ?*anyopaque) void {
        return objc.msgSend(_self, "setScriptingProperties:", void, .{_scriptingProperties});
    }

    pub fn classCode(_self: *@This()) objc.FourCharCode {
        return objc.msgSend(_self, "classCode", objc.FourCharCode, .{});
    }

    pub fn className(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "className", ?*foundation.String, .{});
    }

    pub fn valueAtIndexInPropertyWithKey(_self: *@This(), _index: objc.NSUInteger, _key: ?*foundation.String) ?objc.Id {
        return objc.msgSend(_self, "valueAtIndex:inPropertyWithKey:", ?objc.Id, .{ _index, _key });
    }

    pub fn valueWithNameInPropertyWithKey(_self: *@This(), _name: ?*foundation.String, _key: ?*foundation.String) ?objc.Id {
        return objc.msgSend(_self, "valueWithName:inPropertyWithKey:", ?objc.Id, .{ _name, _key });
    }

    pub fn valueWithUniqueIDInPropertyWithKey(_self: *@This(), _uniqueID: ?objc.Id, _key: ?*foundation.String) ?objc.Id {
        return objc.msgSend(_self, "valueWithUniqueID:inPropertyWithKey:", ?objc.Id, .{ _uniqueID, _key });
    }

    pub fn insertValueAtIndexInPropertyWithKey(_self: *@This(), _value: ?objc.Id, _index: objc.NSUInteger, _key: ?*foundation.String) void {
        return objc.msgSend(_self, "insertValue:atIndex:inPropertyWithKey:", void, .{ _value, _index, _key });
    }

    pub fn removeValueAtIndexFromPropertyWithKey(_self: *@This(), _index: objc.NSUInteger, _key: ?*foundation.String) void {
        return objc.msgSend(_self, "removeValueAtIndex:fromPropertyWithKey:", void, .{ _index, _key });
    }

    pub fn replaceValueAtIndexInPropertyWithKeyWithValue(_self: *@This(), _index: objc.NSUInteger, _key: ?*foundation.String, _value: ?objc.Id) void {
        return objc.msgSend(_self, "replaceValueAtIndex:inPropertyWithKey:withValue:", void, .{ _index, _key, _value });
    }

    pub fn insertValueInPropertyWithKey(_self: *@This(), _value: ?objc.Id, _key: ?*foundation.String) void {
        return objc.msgSend(_self, "insertValue:inPropertyWithKey:", void, .{ _value, _key });
    }

    pub fn coerceValueForKey(_self: *@This(), _value: ?objc.Id, _key: ?*foundation.String) ?objc.Id {
        return objc.msgSend(_self, "coerceValue:forKey:", ?objc.Id, .{ _value, _key });
    }

    pub fn indicesOfObjectsByEvaluatingObjectSpecifier(_self: *@This(), _specifier: ?*foundation.ScriptObjectSpecifier) ?*anyopaque {
        return objc.msgSend(_self, "indicesOfObjectsByEvaluatingObjectSpecifier:", ?*anyopaque, .{_specifier});
    }

    pub fn objectSpecifier(_self: *@This()) ?*foundation.ScriptObjectSpecifier {
        return objc.msgSend(_self, "objectSpecifier", ?*foundation.ScriptObjectSpecifier, .{});
    }

    pub fn isEqualTo(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqualTo:", objc.BOOL, .{_object});
    }

    pub fn isLessThanOrEqualTo(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isLessThanOrEqualTo:", objc.BOOL, .{_object});
    }

    pub fn isLessThan(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isLessThan:", objc.BOOL, .{_object});
    }

    pub fn isGreaterThanOrEqualTo(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isGreaterThanOrEqualTo:", objc.BOOL, .{_object});
    }

    pub fn isGreaterThan(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isGreaterThan:", objc.BOOL, .{_object});
    }

    pub fn isNotEqualTo(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isNotEqualTo:", objc.BOOL, .{_object});
    }

    pub fn doesContain(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "doesContain:", objc.BOOL, .{_object});
    }

    pub fn isLike(_self: *@This(), _object: ?*foundation.String) objc.BOOL {
        return objc.msgSend(_self, "isLike:", objc.BOOL, .{_object});
    }

    pub fn isCaseInsensitiveLike(_self: *@This(), _object: ?*foundation.String) objc.BOOL {
        return objc.msgSend(_self, "isCaseInsensitiveLike:", objc.BOOL, .{_object});
    }

    pub fn scriptingIsEqualTo(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "scriptingIsEqualTo:", objc.BOOL, .{_object});
    }

    pub fn scriptingIsLessThanOrEqualTo(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "scriptingIsLessThanOrEqualTo:", objc.BOOL, .{_object});
    }

    pub fn scriptingIsLessThan(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "scriptingIsLessThan:", objc.BOOL, .{_object});
    }

    pub fn scriptingIsGreaterThanOrEqualTo(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "scriptingIsGreaterThanOrEqualTo:", objc.BOOL, .{_object});
    }

    pub fn scriptingIsGreaterThan(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "scriptingIsGreaterThan:", objc.BOOL, .{_object});
    }

    pub fn scriptingBeginsWith(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "scriptingBeginsWith:", objc.BOOL, .{_object});
    }

    pub fn scriptingEndsWith(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "scriptingEndsWith:", objc.BOOL, .{_object});
    }

    pub fn scriptingContains(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "scriptingContains:", objc.BOOL, .{_object});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*foundation.Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*foundation.Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn supportsSecureCoding() objc.BOOL {
        return objc.msgSend(Internal.class(), "supportsSecureCoding", objc.BOOL, .{});
    }
};

/// https://developer.apple.com/documentation/Symbols/NSSymbolPulseEffect?language=objc
pub const SymbolPulseEffect = opaque {
    pub const Internal = objc.ExternClass("NSSymbolPulseEffect", @This(), SymbolEffect, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "description", ?*foundation.String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "debugDescription", ?*foundation.String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*foundation.Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*foundation.MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*foundation.MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*foundation.MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*foundation.MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn version() objc.NSInteger {
        return objc.msgSend(Internal.class(), "version", objc.NSInteger, .{});
    }

    pub fn setVersion(_aVersion: objc.NSInteger) void {
        return objc.msgSend(Internal.class(), "setVersion:", void, .{_aVersion});
    }

    pub fn replacementObjectForCoder(_self: *@This(), _coder: ?*foundation.Coder) ?objc.Id {
        return objc.msgSend(_self, "replacementObjectForCoder:", ?objc.Id, .{_coder});
    }

    pub fn awakeAfterUsingCoder(_self: *@This(), _coder: ?*foundation.Coder) ?objc.Id {
        return objc.msgSend(_self, "awakeAfterUsingCoder:", ?objc.Id, .{_coder});
    }

    pub fn classForCoder(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "classForCoder", objc.Class, .{});
    }

    pub fn poseAsClass(_aClass: objc.Class) void {
        return objc.msgSend(Internal.class(), "poseAsClass:", void, .{_aClass});
    }

    pub fn autoContentAccessingProxy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "autoContentAccessingProxy", ?objc.Id, .{});
    }

    pub fn attemptRecoveryFromErrorOptionIndexDelegateDidRecoverSelectorContextInfo(
        _self: *@This(),
        _error: ?*foundation.Error,
        _recoveryOptionIndex: objc.NSUInteger,
        _delegate: ?objc.Id,
        _didRecoverSelector: objc.Selector,
        _contextInfo: ?*anyopaque,
    ) void {
        return objc.msgSend(_self, "attemptRecoveryFromError:optionIndex:delegate:didRecoverSelector:contextInfo:", void, .{
            _error,
            _recoveryOptionIndex,
            _delegate,
            _didRecoverSelector,
            _contextInfo,
        });
    }

    pub fn attemptRecoveryFromErrorOptionIndex(_self: *@This(), _error: ?*foundation.Error, _recoveryOptionIndex: objc.NSUInteger) objc.BOOL {
        return objc.msgSend(_self, "attemptRecoveryFromError:optionIndex:", objc.BOOL, .{ _error, _recoveryOptionIndex });
    }

    pub fn performSelectorWithObjectAfterDelayInModes(
        _self: *@This(),
        _aSelector: objc.Selector,
        _anArgument: ?objc.Id,
        _delay: foundation.TimeInterval,
        _modes: ?*anyopaque,
    ) void {
        return objc.msgSend(_self, "performSelector:withObject:afterDelay:inModes:", void, .{
            _aSelector,
            _anArgument,
            _delay,
            _modes,
        });
    }

    pub fn performSelectorWithObjectAfterDelay(_self: *@This(), _aSelector: objc.Selector, _anArgument: ?objc.Id, _delay: foundation.TimeInterval) void {
        return objc.msgSend(_self, "performSelector:withObject:afterDelay:", void, .{ _aSelector, _anArgument, _delay });
    }

    pub fn cancelPreviousPerformRequestsWithTargetSelectorObject(_aTarget: ?objc.Id, _aSelector: objc.Selector, _anArgument: ?objc.Id) void {
        return objc.msgSend(Internal.class(), "cancelPreviousPerformRequestsWithTarget:selector:object:", void, .{ _aTarget, _aSelector, _anArgument });
    }

    pub fn cancelPreviousPerformRequestsWithTarget(_aTarget: ?objc.Id) void {
        return objc.msgSend(Internal.class(), "cancelPreviousPerformRequestsWithTarget:", void, .{_aTarget});
    }

    pub fn urlResourceDataDidBecomeAvailable(_self: *@This(), _sender: ?*foundation.URL, _newBytes: ?*foundation.Data) void {
        return objc.msgSend(_self, "URL:resourceDataDidBecomeAvailable:", void, .{ _sender, _newBytes });
    }

    pub fn urlResourceDidFinishLoading(_self: *@This(), _sender: ?*foundation.URL) void {
        return objc.msgSend(_self, "URLResourceDidFinishLoading:", void, .{_sender});
    }

    pub fn urlResourceDidCancelLoading(_self: *@This(), _sender: ?*foundation.URL) void {
        return objc.msgSend(_self, "URLResourceDidCancelLoading:", void, .{_sender});
    }

    pub fn urlResourceDidFailLoadingWithReason(_self: *@This(), _sender: ?*foundation.URL, _reason: ?*foundation.String) void {
        return objc.msgSend(_self, "URL:resourceDidFailLoadingWithReason:", void, .{ _sender, _reason });
    }

    pub fn fileManagerShouldProceedAfterError(_self: *@This(), _fm: ?*foundation.FileManager, _errorInfo: ?*foundation.Dictionary) objc.BOOL {
        return objc.msgSend(_self, "fileManager:shouldProceedAfterError:", objc.BOOL, .{ _fm, _errorInfo });
    }

    pub fn fileManagerWillProcessPath(_self: *@This(), _fm: ?*foundation.FileManager, _path: ?*foundation.String) void {
        return objc.msgSend(_self, "fileManager:willProcessPath:", void, .{ _fm, _path });
    }

    pub fn valueForKey(_self: *@This(), _key: ?*foundation.String) ?objc.Id {
        return objc.msgSend(_self, "valueForKey:", ?objc.Id, .{_key});
    }

    pub fn setValueForKey(_self: *@This(), _value: ?objc.Id, _key: ?*foundation.String) void {
        return objc.msgSend(_self, "setValue:forKey:", void, .{ _value, _key });
    }

    pub fn validateValueForKeyError(_self: *@This(), _ioValue: ?*?objc.Id, _inKey: ?*foundation.String, _outError: ?*?*foundation.Error) objc.BOOL {
        return objc.msgSend(_self, "validateValue:forKey:error:", objc.BOOL, .{ _ioValue, _inKey, _outError });
    }

    pub fn mutableArrayValueForKey(_self: *@This(), _key: ?*foundation.String) ?*foundation.MutableArray {
        return objc.msgSend(_self, "mutableArrayValueForKey:", ?*foundation.MutableArray, .{_key});
    }

    pub fn mutableOrderedSetValueForKey(_self: *@This(), _key: ?*foundation.String) ?*foundation.MutableOrderedSet {
        return objc.msgSend(_self, "mutableOrderedSetValueForKey:", ?*foundation.MutableOrderedSet, .{_key});
    }

    pub fn mutableSetValueForKey(_self: *@This(), _key: ?*foundation.String) ?*foundation.MutableSet {
        return objc.msgSend(_self, "mutableSetValueForKey:", ?*foundation.MutableSet, .{_key});
    }

    pub fn valueForKeyPath(_self: *@This(), _keyPath: ?*foundation.String) ?objc.Id {
        return objc.msgSend(_self, "valueForKeyPath:", ?objc.Id, .{_keyPath});
    }

    pub fn setValueForKeyPath(_self: *@This(), _value: ?objc.Id, _keyPath: ?*foundation.String) void {
        return objc.msgSend(_self, "setValue:forKeyPath:", void, .{ _value, _keyPath });
    }

    pub fn validateValueForKeyPathError(_self: *@This(), _ioValue: ?*?objc.Id, _inKeyPath: ?*foundation.String, _outError: ?*?*foundation.Error) objc.BOOL {
        return objc.msgSend(_self, "validateValue:forKeyPath:error:", objc.BOOL, .{ _ioValue, _inKeyPath, _outError });
    }

    pub fn mutableArrayValueForKeyPath(_self: *@This(), _keyPath: ?*foundation.String) ?*foundation.MutableArray {
        return objc.msgSend(_self, "mutableArrayValueForKeyPath:", ?*foundation.MutableArray, .{_keyPath});
    }

    pub fn mutableOrderedSetValueForKeyPath(_self: *@This(), _keyPath: ?*foundation.String) ?*foundation.MutableOrderedSet {
        return objc.msgSend(_self, "mutableOrderedSetValueForKeyPath:", ?*foundation.MutableOrderedSet, .{_keyPath});
    }

    pub fn mutableSetValueForKeyPath(_self: *@This(), _keyPath: ?*foundation.String) ?*foundation.MutableSet {
        return objc.msgSend(_self, "mutableSetValueForKeyPath:", ?*foundation.MutableSet, .{_keyPath});
    }

    pub fn valueForUndefinedKey(_self: *@This(), _key: ?*foundation.String) ?objc.Id {
        return objc.msgSend(_self, "valueForUndefinedKey:", ?objc.Id, .{_key});
    }

    pub fn setValueForUndefinedKey(_self: *@This(), _value: ?objc.Id, _key: ?*foundation.String) void {
        return objc.msgSend(_self, "setValue:forUndefinedKey:", void, .{ _value, _key });
    }

    pub fn setNilValueForKey(_self: *@This(), _key: ?*foundation.String) void {
        return objc.msgSend(_self, "setNilValueForKey:", void, .{_key});
    }

    pub fn dictionaryWithValuesForKeys(_self: *@This(), _keys: ?*anyopaque) ?*anyopaque {
        return objc.msgSend(_self, "dictionaryWithValuesForKeys:", ?*anyopaque, .{_keys});
    }

    pub fn setValuesForKeysWithDictionary(_self: *@This(), _keyedValues: ?*anyopaque) void {
        return objc.msgSend(_self, "setValuesForKeysWithDictionary:", void, .{_keyedValues});
    }

    pub fn accessInstanceVariablesDirectly() objc.BOOL {
        return objc.msgSend(Internal.class(), "accessInstanceVariablesDirectly", objc.BOOL, .{});
    }

    pub fn useStoredAccessor() objc.BOOL {
        return objc.msgSend(Internal.class(), "useStoredAccessor", objc.BOOL, .{});
    }

    pub fn storedValueForKey(_self: *@This(), _key: ?*foundation.String) ?objc.Id {
        return objc.msgSend(_self, "storedValueForKey:", ?objc.Id, .{_key});
    }

    pub fn takeStoredValueForKey(_self: *@This(), _value: ?objc.Id, _key: ?*foundation.String) void {
        return objc.msgSend(_self, "takeStoredValue:forKey:", void, .{ _value, _key });
    }

    pub fn takeValueForKey(_self: *@This(), _value: ?objc.Id, _key: ?*foundation.String) void {
        return objc.msgSend(_self, "takeValue:forKey:", void, .{ _value, _key });
    }

    pub fn takeValueForKeyPath(_self: *@This(), _value: ?objc.Id, _keyPath: ?*foundation.String) void {
        return objc.msgSend(_self, "takeValue:forKeyPath:", void, .{ _value, _keyPath });
    }

    pub fn handleQueryWithUnboundKey(_self: *@This(), _key: ?*foundation.String) ?objc.Id {
        return objc.msgSend(_self, "handleQueryWithUnboundKey:", ?objc.Id, .{_key});
    }

    pub fn handleTakeValueForUnboundKey(_self: *@This(), _value: ?objc.Id, _key: ?*foundation.String) void {
        return objc.msgSend(_self, "handleTakeValue:forUnboundKey:", void, .{ _value, _key });
    }

    pub fn unableToSetNilForKey(_self: *@This(), _key: ?*foundation.String) void {
        return objc.msgSend(_self, "unableToSetNilForKey:", void, .{_key});
    }

    pub fn valuesForKeys(_self: *@This(), _keys: ?*foundation.Array) ?*foundation.Dictionary {
        return objc.msgSend(_self, "valuesForKeys:", ?*foundation.Dictionary, .{_keys});
    }

    pub fn takeValuesFromDictionary(_self: *@This(), _properties: ?*foundation.Dictionary) void {
        return objc.msgSend(_self, "takeValuesFromDictionary:", void, .{_properties});
    }

    pub fn observeValueForKeyPathOfObjectChangeContext(
        _self: *@This(),
        _keyPath: ?*foundation.String,
        _object: ?objc.Id,
        _change: ?*anyopaque,
        _context: ?*anyopaque,
    ) void {
        return objc.msgSend(_self, "observeValueForKeyPath:ofObject:change:context:", void, .{
            _keyPath,
            _object,
            _change,
            _context,
        });
    }

    pub fn addObserverForKeyPathOptionsContext(
        _self: *@This(),
        _observer: ?*objc.NSObject,
        _keyPath: ?*foundation.String,
        _options: foundation.KeyValueObservingOptions,
        _context: ?*anyopaque,
    ) void {
        return objc.msgSend(_self, "addObserver:forKeyPath:options:context:", void, .{
            _observer,
            _keyPath,
            _options,
            _context,
        });
    }

    pub fn removeObserverForKeyPathContext(_self: *@This(), _observer: ?*objc.NSObject, _keyPath: ?*foundation.String, _context: ?*anyopaque) void {
        return objc.msgSend(_self, "removeObserver:forKeyPath:context:", void, .{ _observer, _keyPath, _context });
    }

    pub fn removeObserverForKeyPath(_self: *@This(), _observer: ?*objc.NSObject, _keyPath: ?*foundation.String) void {
        return objc.msgSend(_self, "removeObserver:forKeyPath:", void, .{ _observer, _keyPath });
    }

    pub fn willChangeValueForKey(_self: *@This(), _key: ?*foundation.String) void {
        return objc.msgSend(_self, "willChangeValueForKey:", void, .{_key});
    }

    pub fn didChangeValueForKey(_self: *@This(), _key: ?*foundation.String) void {
        return objc.msgSend(_self, "didChangeValueForKey:", void, .{_key});
    }

    pub fn willChangeValuesAtIndexesForKey(_self: *@This(), _changeKind: foundation.KeyValueChange, _indexes: ?*foundation.IndexSet, _key: ?*foundation.String) void {
        return objc.msgSend(_self, "willChange:valuesAtIndexes:forKey:", void, .{ _changeKind, _indexes, _key });
    }

    pub fn didChangeValuesAtIndexesForKey(_self: *@This(), _changeKind: foundation.KeyValueChange, _indexes: ?*foundation.IndexSet, _key: ?*foundation.String) void {
        return objc.msgSend(_self, "didChange:valuesAtIndexes:forKey:", void, .{ _changeKind, _indexes, _key });
    }

    pub fn willChangeValueForKeyWithSetMutationUsingObjects(_self: *@This(), _key: ?*foundation.String, _mutationKind: foundation.KeyValueSetMutationKind, _objects: ?*foundation.Set) void {
        return objc.msgSend(_self, "willChangeValueForKey:withSetMutation:usingObjects:", void, .{ _key, _mutationKind, _objects });
    }

    pub fn didChangeValueForKeyWithSetMutationUsingObjects(_self: *@This(), _key: ?*foundation.String, _mutationKind: foundation.KeyValueSetMutationKind, _objects: ?*foundation.Set) void {
        return objc.msgSend(_self, "didChangeValueForKey:withSetMutation:usingObjects:", void, .{ _key, _mutationKind, _objects });
    }

    pub fn keyPathsForValuesAffectingValueForKey(_key: ?*foundation.String) ?*anyopaque {
        return objc.msgSend(Internal.class(), "keyPathsForValuesAffectingValueForKey:", ?*anyopaque, .{_key});
    }

    pub fn automaticallyNotifiesObserversForKey(_key: ?*foundation.String) objc.BOOL {
        return objc.msgSend(Internal.class(), "automaticallyNotifiesObserversForKey:", objc.BOOL, .{_key});
    }

    pub fn observationInfo(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "observationInfo", ?*anyopaque, .{});
    }

    pub fn setObservationInfo(_self: *@This(), _observationInfo: ?*anyopaque) void {
        return objc.msgSend(_self, "setObservationInfo:", void, .{_observationInfo});
    }

    pub fn setKeysTriggerChangeNotificationsForDependentKey(_keys: ?*foundation.Array, _dependentKey: ?*foundation.String) void {
        return objc.msgSend(Internal.class(), "setKeys:triggerChangeNotificationsForDependentKey:", void, .{ _keys, _dependentKey });
    }

    pub fn setSharedObservers(_self: *@This(), _sharedObservers: ?*foundation.KeyValueSharedObserversSnapshot) void {
        return objc.msgSend(_self, "setSharedObservers:", void, .{_sharedObservers});
    }

    pub fn replacementObjectForKeyedArchiver(_self: *@This(), _archiver: ?*foundation.KeyedArchiver) ?objc.Id {
        return objc.msgSend(_self, "replacementObjectForKeyedArchiver:", ?objc.Id, .{_archiver});
    }

    pub fn classFallbacksForKeyedArchiver() ?*anyopaque {
        return objc.msgSend(Internal.class(), "classFallbacksForKeyedArchiver", ?*anyopaque, .{});
    }

    pub fn classForKeyedArchiver(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "classForKeyedArchiver", objc.Class, .{});
    }

    pub fn classForKeyedUnarchiver() objc.Class {
        return objc.msgSend(Internal.class(), "classForKeyedUnarchiver", objc.Class, .{});
    }

    pub fn performSelectorOnMainThreadWithObjectWaitUntilDoneModes(
        _self: *@This(),
        _aSelector: objc.Selector,
        _arg: ?objc.Id,
        _wait: objc.BOOL,
        _array: ?*anyopaque,
    ) void {
        return objc.msgSend(_self, "performSelectorOnMainThread:withObject:waitUntilDone:modes:", void, .{
            _aSelector,
            _arg,
            _wait,
            _array,
        });
    }

    pub fn performSelectorOnMainThreadWithObjectWaitUntilDone(_self: *@This(), _aSelector: objc.Selector, _arg: ?objc.Id, _wait: objc.BOOL) void {
        return objc.msgSend(_self, "performSelectorOnMainThread:withObject:waitUntilDone:", void, .{ _aSelector, _arg, _wait });
    }

    pub fn performSelectorOnThreadWithObjectWaitUntilDoneModes(
        _self: *@This(),
        _aSelector: objc.Selector,
        _thr: ?*foundation.Thread,
        _arg: ?objc.Id,
        _wait: objc.BOOL,
        _array: ?*anyopaque,
    ) void {
        return objc.msgSend(_self, "performSelector:onThread:withObject:waitUntilDone:modes:", void, .{
            _aSelector,
            _thr,
            _arg,
            _wait,
            _array,
        });
    }

    pub fn performSelectorOnThreadWithObjectWaitUntilDone(
        _self: *@This(),
        _aSelector: objc.Selector,
        _thr: ?*foundation.Thread,
        _arg: ?objc.Id,
        _wait: objc.BOOL,
    ) void {
        return objc.msgSend(_self, "performSelector:onThread:withObject:waitUntilDone:", void, .{
            _aSelector,
            _thr,
            _arg,
            _wait,
        });
    }

    pub fn performSelectorInBackgroundWithObject(_self: *@This(), _aSelector: objc.Selector, _arg: ?objc.Id) void {
        return objc.msgSend(_self, "performSelectorInBackground:withObject:", void, .{ _aSelector, _arg });
    }

    pub fn replacementObjectForArchiver(_self: *@This(), _archiver: ?*foundation.Archiver) ?objc.Id {
        return objc.msgSend(_self, "replacementObjectForArchiver:", ?objc.Id, .{_archiver});
    }

    pub fn classForArchiver(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "classForArchiver", objc.Class, .{});
    }

    pub fn replacementObjectForPortCoder(_self: *@This(), _coder: ?*foundation.PortCoder) ?objc.Id {
        return objc.msgSend(_self, "replacementObjectForPortCoder:", ?objc.Id, .{_coder});
    }

    pub fn classForPortCoder(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "classForPortCoder", objc.Class, .{});
    }

    pub fn inverseForRelationshipKey(_self: *@This(), _relationshipKey: ?*foundation.String) ?*foundation.String {
        return objc.msgSend(_self, "inverseForRelationshipKey:", ?*foundation.String, .{_relationshipKey});
    }

    pub fn classDescription(_self: *@This()) ?*foundation.ClassDescription {
        return objc.msgSend(_self, "classDescription", ?*foundation.ClassDescription, .{});
    }

    pub fn attributeKeys(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "attributeKeys", ?*anyopaque, .{});
    }

    pub fn toOneRelationshipKeys(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "toOneRelationshipKeys", ?*anyopaque, .{});
    }

    pub fn toManyRelationshipKeys(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "toManyRelationshipKeys", ?*anyopaque, .{});
    }

    pub fn scriptingValueForSpecifier(_self: *@This(), _objectSpecifier: ?*foundation.ScriptObjectSpecifier) ?objc.Id {
        return objc.msgSend(_self, "scriptingValueForSpecifier:", ?objc.Id, .{_objectSpecifier});
    }

    pub fn copyScriptingValueForKeyWithProperties(_self: *@This(), _value: ?objc.Id, _key: ?*foundation.String, _properties: ?*anyopaque) ?objc.Id {
        return objc.msgSend(_self, "copyScriptingValue:forKey:withProperties:", ?objc.Id, .{ _value, _key, _properties });
    }

    pub fn newScriptingObjectOfClassForValueForKeyWithContentsValueProperties(
        _self: *@This(),
        _objectClass: objc.Class,
        _key: ?*foundation.String,
        _contentsValue: ?objc.Id,
        _properties: ?*anyopaque,
    ) ?objc.Id {
        return objc.msgSend(_self, "newScriptingObjectOfClass:forValueForKey:withContentsValue:properties:", ?objc.Id, .{
            _objectClass,
            _key,
            _contentsValue,
            _properties,
        });
    }

    pub fn scriptingProperties(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "scriptingProperties", ?*anyopaque, .{});
    }

    pub fn setScriptingProperties(_self: *@This(), _scriptingProperties: ?*anyopaque) void {
        return objc.msgSend(_self, "setScriptingProperties:", void, .{_scriptingProperties});
    }

    pub fn classCode(_self: *@This()) objc.FourCharCode {
        return objc.msgSend(_self, "classCode", objc.FourCharCode, .{});
    }

    pub fn className(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "className", ?*foundation.String, .{});
    }

    pub fn valueAtIndexInPropertyWithKey(_self: *@This(), _index: objc.NSUInteger, _key: ?*foundation.String) ?objc.Id {
        return objc.msgSend(_self, "valueAtIndex:inPropertyWithKey:", ?objc.Id, .{ _index, _key });
    }

    pub fn valueWithNameInPropertyWithKey(_self: *@This(), _name: ?*foundation.String, _key: ?*foundation.String) ?objc.Id {
        return objc.msgSend(_self, "valueWithName:inPropertyWithKey:", ?objc.Id, .{ _name, _key });
    }

    pub fn valueWithUniqueIDInPropertyWithKey(_self: *@This(), _uniqueID: ?objc.Id, _key: ?*foundation.String) ?objc.Id {
        return objc.msgSend(_self, "valueWithUniqueID:inPropertyWithKey:", ?objc.Id, .{ _uniqueID, _key });
    }

    pub fn insertValueAtIndexInPropertyWithKey(_self: *@This(), _value: ?objc.Id, _index: objc.NSUInteger, _key: ?*foundation.String) void {
        return objc.msgSend(_self, "insertValue:atIndex:inPropertyWithKey:", void, .{ _value, _index, _key });
    }

    pub fn removeValueAtIndexFromPropertyWithKey(_self: *@This(), _index: objc.NSUInteger, _key: ?*foundation.String) void {
        return objc.msgSend(_self, "removeValueAtIndex:fromPropertyWithKey:", void, .{ _index, _key });
    }

    pub fn replaceValueAtIndexInPropertyWithKeyWithValue(_self: *@This(), _index: objc.NSUInteger, _key: ?*foundation.String, _value: ?objc.Id) void {
        return objc.msgSend(_self, "replaceValueAtIndex:inPropertyWithKey:withValue:", void, .{ _index, _key, _value });
    }

    pub fn insertValueInPropertyWithKey(_self: *@This(), _value: ?objc.Id, _key: ?*foundation.String) void {
        return objc.msgSend(_self, "insertValue:inPropertyWithKey:", void, .{ _value, _key });
    }

    pub fn coerceValueForKey(_self: *@This(), _value: ?objc.Id, _key: ?*foundation.String) ?objc.Id {
        return objc.msgSend(_self, "coerceValue:forKey:", ?objc.Id, .{ _value, _key });
    }

    pub fn indicesOfObjectsByEvaluatingObjectSpecifier(_self: *@This(), _specifier: ?*foundation.ScriptObjectSpecifier) ?*anyopaque {
        return objc.msgSend(_self, "indicesOfObjectsByEvaluatingObjectSpecifier:", ?*anyopaque, .{_specifier});
    }

    pub fn objectSpecifier(_self: *@This()) ?*foundation.ScriptObjectSpecifier {
        return objc.msgSend(_self, "objectSpecifier", ?*foundation.ScriptObjectSpecifier, .{});
    }

    pub fn isEqualTo(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqualTo:", objc.BOOL, .{_object});
    }

    pub fn isLessThanOrEqualTo(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isLessThanOrEqualTo:", objc.BOOL, .{_object});
    }

    pub fn isLessThan(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isLessThan:", objc.BOOL, .{_object});
    }

    pub fn isGreaterThanOrEqualTo(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isGreaterThanOrEqualTo:", objc.BOOL, .{_object});
    }

    pub fn isGreaterThan(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isGreaterThan:", objc.BOOL, .{_object});
    }

    pub fn isNotEqualTo(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isNotEqualTo:", objc.BOOL, .{_object});
    }

    pub fn doesContain(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "doesContain:", objc.BOOL, .{_object});
    }

    pub fn isLike(_self: *@This(), _object: ?*foundation.String) objc.BOOL {
        return objc.msgSend(_self, "isLike:", objc.BOOL, .{_object});
    }

    pub fn isCaseInsensitiveLike(_self: *@This(), _object: ?*foundation.String) objc.BOOL {
        return objc.msgSend(_self, "isCaseInsensitiveLike:", objc.BOOL, .{_object});
    }

    pub fn scriptingIsEqualTo(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "scriptingIsEqualTo:", objc.BOOL, .{_object});
    }

    pub fn scriptingIsLessThanOrEqualTo(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "scriptingIsLessThanOrEqualTo:", objc.BOOL, .{_object});
    }

    pub fn scriptingIsLessThan(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "scriptingIsLessThan:", objc.BOOL, .{_object});
    }

    pub fn scriptingIsGreaterThanOrEqualTo(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "scriptingIsGreaterThanOrEqualTo:", objc.BOOL, .{_object});
    }

    pub fn scriptingIsGreaterThan(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "scriptingIsGreaterThan:", objc.BOOL, .{_object});
    }

    pub fn scriptingBeginsWith(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "scriptingBeginsWith:", objc.BOOL, .{_object});
    }

    pub fn scriptingEndsWith(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "scriptingEndsWith:", objc.BOOL, .{_object});
    }

    pub fn scriptingContains(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "scriptingContains:", objc.BOOL, .{_object});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*foundation.Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*foundation.Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn supportsSecureCoding() objc.BOOL {
        return objc.msgSend(Internal.class(), "supportsSecureCoding", objc.BOOL, .{});
    }

    pub fn effect() *@This() {
        return objc.msgSend(Internal.class(), "effect", *@This(), .{});
    }

    pub fn effectWithByLayer(_self: *@This()) *@This() {
        return objc.msgSend(_self, "effectWithByLayer", *@This(), .{});
    }

    pub fn effectWithWholeSymbol(_self: *@This()) *@This() {
        return objc.msgSend(_self, "effectWithWholeSymbol", *@This(), .{});
    }
};

/// https://developer.apple.com/documentation/Symbols/NSSymbolBounceEffect?language=objc
pub const SymbolBounceEffect = opaque {
    pub const Internal = objc.ExternClass("NSSymbolBounceEffect", @This(), SymbolEffect, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "description", ?*foundation.String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "debugDescription", ?*foundation.String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*foundation.Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*foundation.MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*foundation.MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*foundation.MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*foundation.MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn version() objc.NSInteger {
        return objc.msgSend(Internal.class(), "version", objc.NSInteger, .{});
    }

    pub fn setVersion(_aVersion: objc.NSInteger) void {
        return objc.msgSend(Internal.class(), "setVersion:", void, .{_aVersion});
    }

    pub fn replacementObjectForCoder(_self: *@This(), _coder: ?*foundation.Coder) ?objc.Id {
        return objc.msgSend(_self, "replacementObjectForCoder:", ?objc.Id, .{_coder});
    }

    pub fn awakeAfterUsingCoder(_self: *@This(), _coder: ?*foundation.Coder) ?objc.Id {
        return objc.msgSend(_self, "awakeAfterUsingCoder:", ?objc.Id, .{_coder});
    }

    pub fn classForCoder(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "classForCoder", objc.Class, .{});
    }

    pub fn poseAsClass(_aClass: objc.Class) void {
        return objc.msgSend(Internal.class(), "poseAsClass:", void, .{_aClass});
    }

    pub fn autoContentAccessingProxy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "autoContentAccessingProxy", ?objc.Id, .{});
    }

    pub fn attemptRecoveryFromErrorOptionIndexDelegateDidRecoverSelectorContextInfo(
        _self: *@This(),
        _error: ?*foundation.Error,
        _recoveryOptionIndex: objc.NSUInteger,
        _delegate: ?objc.Id,
        _didRecoverSelector: objc.Selector,
        _contextInfo: ?*anyopaque,
    ) void {
        return objc.msgSend(_self, "attemptRecoveryFromError:optionIndex:delegate:didRecoverSelector:contextInfo:", void, .{
            _error,
            _recoveryOptionIndex,
            _delegate,
            _didRecoverSelector,
            _contextInfo,
        });
    }

    pub fn attemptRecoveryFromErrorOptionIndex(_self: *@This(), _error: ?*foundation.Error, _recoveryOptionIndex: objc.NSUInteger) objc.BOOL {
        return objc.msgSend(_self, "attemptRecoveryFromError:optionIndex:", objc.BOOL, .{ _error, _recoveryOptionIndex });
    }

    pub fn performSelectorWithObjectAfterDelayInModes(
        _self: *@This(),
        _aSelector: objc.Selector,
        _anArgument: ?objc.Id,
        _delay: foundation.TimeInterval,
        _modes: ?*anyopaque,
    ) void {
        return objc.msgSend(_self, "performSelector:withObject:afterDelay:inModes:", void, .{
            _aSelector,
            _anArgument,
            _delay,
            _modes,
        });
    }

    pub fn performSelectorWithObjectAfterDelay(_self: *@This(), _aSelector: objc.Selector, _anArgument: ?objc.Id, _delay: foundation.TimeInterval) void {
        return objc.msgSend(_self, "performSelector:withObject:afterDelay:", void, .{ _aSelector, _anArgument, _delay });
    }

    pub fn cancelPreviousPerformRequestsWithTargetSelectorObject(_aTarget: ?objc.Id, _aSelector: objc.Selector, _anArgument: ?objc.Id) void {
        return objc.msgSend(Internal.class(), "cancelPreviousPerformRequestsWithTarget:selector:object:", void, .{ _aTarget, _aSelector, _anArgument });
    }

    pub fn cancelPreviousPerformRequestsWithTarget(_aTarget: ?objc.Id) void {
        return objc.msgSend(Internal.class(), "cancelPreviousPerformRequestsWithTarget:", void, .{_aTarget});
    }

    pub fn urlResourceDataDidBecomeAvailable(_self: *@This(), _sender: ?*foundation.URL, _newBytes: ?*foundation.Data) void {
        return objc.msgSend(_self, "URL:resourceDataDidBecomeAvailable:", void, .{ _sender, _newBytes });
    }

    pub fn urlResourceDidFinishLoading(_self: *@This(), _sender: ?*foundation.URL) void {
        return objc.msgSend(_self, "URLResourceDidFinishLoading:", void, .{_sender});
    }

    pub fn urlResourceDidCancelLoading(_self: *@This(), _sender: ?*foundation.URL) void {
        return objc.msgSend(_self, "URLResourceDidCancelLoading:", void, .{_sender});
    }

    pub fn urlResourceDidFailLoadingWithReason(_self: *@This(), _sender: ?*foundation.URL, _reason: ?*foundation.String) void {
        return objc.msgSend(_self, "URL:resourceDidFailLoadingWithReason:", void, .{ _sender, _reason });
    }

    pub fn fileManagerShouldProceedAfterError(_self: *@This(), _fm: ?*foundation.FileManager, _errorInfo: ?*foundation.Dictionary) objc.BOOL {
        return objc.msgSend(_self, "fileManager:shouldProceedAfterError:", objc.BOOL, .{ _fm, _errorInfo });
    }

    pub fn fileManagerWillProcessPath(_self: *@This(), _fm: ?*foundation.FileManager, _path: ?*foundation.String) void {
        return objc.msgSend(_self, "fileManager:willProcessPath:", void, .{ _fm, _path });
    }

    pub fn valueForKey(_self: *@This(), _key: ?*foundation.String) ?objc.Id {
        return objc.msgSend(_self, "valueForKey:", ?objc.Id, .{_key});
    }

    pub fn setValueForKey(_self: *@This(), _value: ?objc.Id, _key: ?*foundation.String) void {
        return objc.msgSend(_self, "setValue:forKey:", void, .{ _value, _key });
    }

    pub fn validateValueForKeyError(_self: *@This(), _ioValue: ?*?objc.Id, _inKey: ?*foundation.String, _outError: ?*?*foundation.Error) objc.BOOL {
        return objc.msgSend(_self, "validateValue:forKey:error:", objc.BOOL, .{ _ioValue, _inKey, _outError });
    }

    pub fn mutableArrayValueForKey(_self: *@This(), _key: ?*foundation.String) ?*foundation.MutableArray {
        return objc.msgSend(_self, "mutableArrayValueForKey:", ?*foundation.MutableArray, .{_key});
    }

    pub fn mutableOrderedSetValueForKey(_self: *@This(), _key: ?*foundation.String) ?*foundation.MutableOrderedSet {
        return objc.msgSend(_self, "mutableOrderedSetValueForKey:", ?*foundation.MutableOrderedSet, .{_key});
    }

    pub fn mutableSetValueForKey(_self: *@This(), _key: ?*foundation.String) ?*foundation.MutableSet {
        return objc.msgSend(_self, "mutableSetValueForKey:", ?*foundation.MutableSet, .{_key});
    }

    pub fn valueForKeyPath(_self: *@This(), _keyPath: ?*foundation.String) ?objc.Id {
        return objc.msgSend(_self, "valueForKeyPath:", ?objc.Id, .{_keyPath});
    }

    pub fn setValueForKeyPath(_self: *@This(), _value: ?objc.Id, _keyPath: ?*foundation.String) void {
        return objc.msgSend(_self, "setValue:forKeyPath:", void, .{ _value, _keyPath });
    }

    pub fn validateValueForKeyPathError(_self: *@This(), _ioValue: ?*?objc.Id, _inKeyPath: ?*foundation.String, _outError: ?*?*foundation.Error) objc.BOOL {
        return objc.msgSend(_self, "validateValue:forKeyPath:error:", objc.BOOL, .{ _ioValue, _inKeyPath, _outError });
    }

    pub fn mutableArrayValueForKeyPath(_self: *@This(), _keyPath: ?*foundation.String) ?*foundation.MutableArray {
        return objc.msgSend(_self, "mutableArrayValueForKeyPath:", ?*foundation.MutableArray, .{_keyPath});
    }

    pub fn mutableOrderedSetValueForKeyPath(_self: *@This(), _keyPath: ?*foundation.String) ?*foundation.MutableOrderedSet {
        return objc.msgSend(_self, "mutableOrderedSetValueForKeyPath:", ?*foundation.MutableOrderedSet, .{_keyPath});
    }

    pub fn mutableSetValueForKeyPath(_self: *@This(), _keyPath: ?*foundation.String) ?*foundation.MutableSet {
        return objc.msgSend(_self, "mutableSetValueForKeyPath:", ?*foundation.MutableSet, .{_keyPath});
    }

    pub fn valueForUndefinedKey(_self: *@This(), _key: ?*foundation.String) ?objc.Id {
        return objc.msgSend(_self, "valueForUndefinedKey:", ?objc.Id, .{_key});
    }

    pub fn setValueForUndefinedKey(_self: *@This(), _value: ?objc.Id, _key: ?*foundation.String) void {
        return objc.msgSend(_self, "setValue:forUndefinedKey:", void, .{ _value, _key });
    }

    pub fn setNilValueForKey(_self: *@This(), _key: ?*foundation.String) void {
        return objc.msgSend(_self, "setNilValueForKey:", void, .{_key});
    }

    pub fn dictionaryWithValuesForKeys(_self: *@This(), _keys: ?*anyopaque) ?*anyopaque {
        return objc.msgSend(_self, "dictionaryWithValuesForKeys:", ?*anyopaque, .{_keys});
    }

    pub fn setValuesForKeysWithDictionary(_self: *@This(), _keyedValues: ?*anyopaque) void {
        return objc.msgSend(_self, "setValuesForKeysWithDictionary:", void, .{_keyedValues});
    }

    pub fn accessInstanceVariablesDirectly() objc.BOOL {
        return objc.msgSend(Internal.class(), "accessInstanceVariablesDirectly", objc.BOOL, .{});
    }

    pub fn useStoredAccessor() objc.BOOL {
        return objc.msgSend(Internal.class(), "useStoredAccessor", objc.BOOL, .{});
    }

    pub fn storedValueForKey(_self: *@This(), _key: ?*foundation.String) ?objc.Id {
        return objc.msgSend(_self, "storedValueForKey:", ?objc.Id, .{_key});
    }

    pub fn takeStoredValueForKey(_self: *@This(), _value: ?objc.Id, _key: ?*foundation.String) void {
        return objc.msgSend(_self, "takeStoredValue:forKey:", void, .{ _value, _key });
    }

    pub fn takeValueForKey(_self: *@This(), _value: ?objc.Id, _key: ?*foundation.String) void {
        return objc.msgSend(_self, "takeValue:forKey:", void, .{ _value, _key });
    }

    pub fn takeValueForKeyPath(_self: *@This(), _value: ?objc.Id, _keyPath: ?*foundation.String) void {
        return objc.msgSend(_self, "takeValue:forKeyPath:", void, .{ _value, _keyPath });
    }

    pub fn handleQueryWithUnboundKey(_self: *@This(), _key: ?*foundation.String) ?objc.Id {
        return objc.msgSend(_self, "handleQueryWithUnboundKey:", ?objc.Id, .{_key});
    }

    pub fn handleTakeValueForUnboundKey(_self: *@This(), _value: ?objc.Id, _key: ?*foundation.String) void {
        return objc.msgSend(_self, "handleTakeValue:forUnboundKey:", void, .{ _value, _key });
    }

    pub fn unableToSetNilForKey(_self: *@This(), _key: ?*foundation.String) void {
        return objc.msgSend(_self, "unableToSetNilForKey:", void, .{_key});
    }

    pub fn valuesForKeys(_self: *@This(), _keys: ?*foundation.Array) ?*foundation.Dictionary {
        return objc.msgSend(_self, "valuesForKeys:", ?*foundation.Dictionary, .{_keys});
    }

    pub fn takeValuesFromDictionary(_self: *@This(), _properties: ?*foundation.Dictionary) void {
        return objc.msgSend(_self, "takeValuesFromDictionary:", void, .{_properties});
    }

    pub fn observeValueForKeyPathOfObjectChangeContext(
        _self: *@This(),
        _keyPath: ?*foundation.String,
        _object: ?objc.Id,
        _change: ?*anyopaque,
        _context: ?*anyopaque,
    ) void {
        return objc.msgSend(_self, "observeValueForKeyPath:ofObject:change:context:", void, .{
            _keyPath,
            _object,
            _change,
            _context,
        });
    }

    pub fn addObserverForKeyPathOptionsContext(
        _self: *@This(),
        _observer: ?*objc.NSObject,
        _keyPath: ?*foundation.String,
        _options: foundation.KeyValueObservingOptions,
        _context: ?*anyopaque,
    ) void {
        return objc.msgSend(_self, "addObserver:forKeyPath:options:context:", void, .{
            _observer,
            _keyPath,
            _options,
            _context,
        });
    }

    pub fn removeObserverForKeyPathContext(_self: *@This(), _observer: ?*objc.NSObject, _keyPath: ?*foundation.String, _context: ?*anyopaque) void {
        return objc.msgSend(_self, "removeObserver:forKeyPath:context:", void, .{ _observer, _keyPath, _context });
    }

    pub fn removeObserverForKeyPath(_self: *@This(), _observer: ?*objc.NSObject, _keyPath: ?*foundation.String) void {
        return objc.msgSend(_self, "removeObserver:forKeyPath:", void, .{ _observer, _keyPath });
    }

    pub fn willChangeValueForKey(_self: *@This(), _key: ?*foundation.String) void {
        return objc.msgSend(_self, "willChangeValueForKey:", void, .{_key});
    }

    pub fn didChangeValueForKey(_self: *@This(), _key: ?*foundation.String) void {
        return objc.msgSend(_self, "didChangeValueForKey:", void, .{_key});
    }

    pub fn willChangeValuesAtIndexesForKey(_self: *@This(), _changeKind: foundation.KeyValueChange, _indexes: ?*foundation.IndexSet, _key: ?*foundation.String) void {
        return objc.msgSend(_self, "willChange:valuesAtIndexes:forKey:", void, .{ _changeKind, _indexes, _key });
    }

    pub fn didChangeValuesAtIndexesForKey(_self: *@This(), _changeKind: foundation.KeyValueChange, _indexes: ?*foundation.IndexSet, _key: ?*foundation.String) void {
        return objc.msgSend(_self, "didChange:valuesAtIndexes:forKey:", void, .{ _changeKind, _indexes, _key });
    }

    pub fn willChangeValueForKeyWithSetMutationUsingObjects(_self: *@This(), _key: ?*foundation.String, _mutationKind: foundation.KeyValueSetMutationKind, _objects: ?*foundation.Set) void {
        return objc.msgSend(_self, "willChangeValueForKey:withSetMutation:usingObjects:", void, .{ _key, _mutationKind, _objects });
    }

    pub fn didChangeValueForKeyWithSetMutationUsingObjects(_self: *@This(), _key: ?*foundation.String, _mutationKind: foundation.KeyValueSetMutationKind, _objects: ?*foundation.Set) void {
        return objc.msgSend(_self, "didChangeValueForKey:withSetMutation:usingObjects:", void, .{ _key, _mutationKind, _objects });
    }

    pub fn keyPathsForValuesAffectingValueForKey(_key: ?*foundation.String) ?*anyopaque {
        return objc.msgSend(Internal.class(), "keyPathsForValuesAffectingValueForKey:", ?*anyopaque, .{_key});
    }

    pub fn automaticallyNotifiesObserversForKey(_key: ?*foundation.String) objc.BOOL {
        return objc.msgSend(Internal.class(), "automaticallyNotifiesObserversForKey:", objc.BOOL, .{_key});
    }

    pub fn observationInfo(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "observationInfo", ?*anyopaque, .{});
    }

    pub fn setObservationInfo(_self: *@This(), _observationInfo: ?*anyopaque) void {
        return objc.msgSend(_self, "setObservationInfo:", void, .{_observationInfo});
    }

    pub fn setKeysTriggerChangeNotificationsForDependentKey(_keys: ?*foundation.Array, _dependentKey: ?*foundation.String) void {
        return objc.msgSend(Internal.class(), "setKeys:triggerChangeNotificationsForDependentKey:", void, .{ _keys, _dependentKey });
    }

    pub fn setSharedObservers(_self: *@This(), _sharedObservers: ?*foundation.KeyValueSharedObserversSnapshot) void {
        return objc.msgSend(_self, "setSharedObservers:", void, .{_sharedObservers});
    }

    pub fn replacementObjectForKeyedArchiver(_self: *@This(), _archiver: ?*foundation.KeyedArchiver) ?objc.Id {
        return objc.msgSend(_self, "replacementObjectForKeyedArchiver:", ?objc.Id, .{_archiver});
    }

    pub fn classFallbacksForKeyedArchiver() ?*anyopaque {
        return objc.msgSend(Internal.class(), "classFallbacksForKeyedArchiver", ?*anyopaque, .{});
    }

    pub fn classForKeyedArchiver(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "classForKeyedArchiver", objc.Class, .{});
    }

    pub fn classForKeyedUnarchiver() objc.Class {
        return objc.msgSend(Internal.class(), "classForKeyedUnarchiver", objc.Class, .{});
    }

    pub fn performSelectorOnMainThreadWithObjectWaitUntilDoneModes(
        _self: *@This(),
        _aSelector: objc.Selector,
        _arg: ?objc.Id,
        _wait: objc.BOOL,
        _array: ?*anyopaque,
    ) void {
        return objc.msgSend(_self, "performSelectorOnMainThread:withObject:waitUntilDone:modes:", void, .{
            _aSelector,
            _arg,
            _wait,
            _array,
        });
    }

    pub fn performSelectorOnMainThreadWithObjectWaitUntilDone(_self: *@This(), _aSelector: objc.Selector, _arg: ?objc.Id, _wait: objc.BOOL) void {
        return objc.msgSend(_self, "performSelectorOnMainThread:withObject:waitUntilDone:", void, .{ _aSelector, _arg, _wait });
    }

    pub fn performSelectorOnThreadWithObjectWaitUntilDoneModes(
        _self: *@This(),
        _aSelector: objc.Selector,
        _thr: ?*foundation.Thread,
        _arg: ?objc.Id,
        _wait: objc.BOOL,
        _array: ?*anyopaque,
    ) void {
        return objc.msgSend(_self, "performSelector:onThread:withObject:waitUntilDone:modes:", void, .{
            _aSelector,
            _thr,
            _arg,
            _wait,
            _array,
        });
    }

    pub fn performSelectorOnThreadWithObjectWaitUntilDone(
        _self: *@This(),
        _aSelector: objc.Selector,
        _thr: ?*foundation.Thread,
        _arg: ?objc.Id,
        _wait: objc.BOOL,
    ) void {
        return objc.msgSend(_self, "performSelector:onThread:withObject:waitUntilDone:", void, .{
            _aSelector,
            _thr,
            _arg,
            _wait,
        });
    }

    pub fn performSelectorInBackgroundWithObject(_self: *@This(), _aSelector: objc.Selector, _arg: ?objc.Id) void {
        return objc.msgSend(_self, "performSelectorInBackground:withObject:", void, .{ _aSelector, _arg });
    }

    pub fn replacementObjectForArchiver(_self: *@This(), _archiver: ?*foundation.Archiver) ?objc.Id {
        return objc.msgSend(_self, "replacementObjectForArchiver:", ?objc.Id, .{_archiver});
    }

    pub fn classForArchiver(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "classForArchiver", objc.Class, .{});
    }

    pub fn replacementObjectForPortCoder(_self: *@This(), _coder: ?*foundation.PortCoder) ?objc.Id {
        return objc.msgSend(_self, "replacementObjectForPortCoder:", ?objc.Id, .{_coder});
    }

    pub fn classForPortCoder(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "classForPortCoder", objc.Class, .{});
    }

    pub fn inverseForRelationshipKey(_self: *@This(), _relationshipKey: ?*foundation.String) ?*foundation.String {
        return objc.msgSend(_self, "inverseForRelationshipKey:", ?*foundation.String, .{_relationshipKey});
    }

    pub fn classDescription(_self: *@This()) ?*foundation.ClassDescription {
        return objc.msgSend(_self, "classDescription", ?*foundation.ClassDescription, .{});
    }

    pub fn attributeKeys(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "attributeKeys", ?*anyopaque, .{});
    }

    pub fn toOneRelationshipKeys(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "toOneRelationshipKeys", ?*anyopaque, .{});
    }

    pub fn toManyRelationshipKeys(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "toManyRelationshipKeys", ?*anyopaque, .{});
    }

    pub fn scriptingValueForSpecifier(_self: *@This(), _objectSpecifier: ?*foundation.ScriptObjectSpecifier) ?objc.Id {
        return objc.msgSend(_self, "scriptingValueForSpecifier:", ?objc.Id, .{_objectSpecifier});
    }

    pub fn copyScriptingValueForKeyWithProperties(_self: *@This(), _value: ?objc.Id, _key: ?*foundation.String, _properties: ?*anyopaque) ?objc.Id {
        return objc.msgSend(_self, "copyScriptingValue:forKey:withProperties:", ?objc.Id, .{ _value, _key, _properties });
    }

    pub fn newScriptingObjectOfClassForValueForKeyWithContentsValueProperties(
        _self: *@This(),
        _objectClass: objc.Class,
        _key: ?*foundation.String,
        _contentsValue: ?objc.Id,
        _properties: ?*anyopaque,
    ) ?objc.Id {
        return objc.msgSend(_self, "newScriptingObjectOfClass:forValueForKey:withContentsValue:properties:", ?objc.Id, .{
            _objectClass,
            _key,
            _contentsValue,
            _properties,
        });
    }

    pub fn scriptingProperties(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "scriptingProperties", ?*anyopaque, .{});
    }

    pub fn setScriptingProperties(_self: *@This(), _scriptingProperties: ?*anyopaque) void {
        return objc.msgSend(_self, "setScriptingProperties:", void, .{_scriptingProperties});
    }

    pub fn classCode(_self: *@This()) objc.FourCharCode {
        return objc.msgSend(_self, "classCode", objc.FourCharCode, .{});
    }

    pub fn className(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "className", ?*foundation.String, .{});
    }

    pub fn valueAtIndexInPropertyWithKey(_self: *@This(), _index: objc.NSUInteger, _key: ?*foundation.String) ?objc.Id {
        return objc.msgSend(_self, "valueAtIndex:inPropertyWithKey:", ?objc.Id, .{ _index, _key });
    }

    pub fn valueWithNameInPropertyWithKey(_self: *@This(), _name: ?*foundation.String, _key: ?*foundation.String) ?objc.Id {
        return objc.msgSend(_self, "valueWithName:inPropertyWithKey:", ?objc.Id, .{ _name, _key });
    }

    pub fn valueWithUniqueIDInPropertyWithKey(_self: *@This(), _uniqueID: ?objc.Id, _key: ?*foundation.String) ?objc.Id {
        return objc.msgSend(_self, "valueWithUniqueID:inPropertyWithKey:", ?objc.Id, .{ _uniqueID, _key });
    }

    pub fn insertValueAtIndexInPropertyWithKey(_self: *@This(), _value: ?objc.Id, _index: objc.NSUInteger, _key: ?*foundation.String) void {
        return objc.msgSend(_self, "insertValue:atIndex:inPropertyWithKey:", void, .{ _value, _index, _key });
    }

    pub fn removeValueAtIndexFromPropertyWithKey(_self: *@This(), _index: objc.NSUInteger, _key: ?*foundation.String) void {
        return objc.msgSend(_self, "removeValueAtIndex:fromPropertyWithKey:", void, .{ _index, _key });
    }

    pub fn replaceValueAtIndexInPropertyWithKeyWithValue(_self: *@This(), _index: objc.NSUInteger, _key: ?*foundation.String, _value: ?objc.Id) void {
        return objc.msgSend(_self, "replaceValueAtIndex:inPropertyWithKey:withValue:", void, .{ _index, _key, _value });
    }

    pub fn insertValueInPropertyWithKey(_self: *@This(), _value: ?objc.Id, _key: ?*foundation.String) void {
        return objc.msgSend(_self, "insertValue:inPropertyWithKey:", void, .{ _value, _key });
    }

    pub fn coerceValueForKey(_self: *@This(), _value: ?objc.Id, _key: ?*foundation.String) ?objc.Id {
        return objc.msgSend(_self, "coerceValue:forKey:", ?objc.Id, .{ _value, _key });
    }

    pub fn indicesOfObjectsByEvaluatingObjectSpecifier(_self: *@This(), _specifier: ?*foundation.ScriptObjectSpecifier) ?*anyopaque {
        return objc.msgSend(_self, "indicesOfObjectsByEvaluatingObjectSpecifier:", ?*anyopaque, .{_specifier});
    }

    pub fn objectSpecifier(_self: *@This()) ?*foundation.ScriptObjectSpecifier {
        return objc.msgSend(_self, "objectSpecifier", ?*foundation.ScriptObjectSpecifier, .{});
    }

    pub fn isEqualTo(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqualTo:", objc.BOOL, .{_object});
    }

    pub fn isLessThanOrEqualTo(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isLessThanOrEqualTo:", objc.BOOL, .{_object});
    }

    pub fn isLessThan(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isLessThan:", objc.BOOL, .{_object});
    }

    pub fn isGreaterThanOrEqualTo(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isGreaterThanOrEqualTo:", objc.BOOL, .{_object});
    }

    pub fn isGreaterThan(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isGreaterThan:", objc.BOOL, .{_object});
    }

    pub fn isNotEqualTo(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isNotEqualTo:", objc.BOOL, .{_object});
    }

    pub fn doesContain(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "doesContain:", objc.BOOL, .{_object});
    }

    pub fn isLike(_self: *@This(), _object: ?*foundation.String) objc.BOOL {
        return objc.msgSend(_self, "isLike:", objc.BOOL, .{_object});
    }

    pub fn isCaseInsensitiveLike(_self: *@This(), _object: ?*foundation.String) objc.BOOL {
        return objc.msgSend(_self, "isCaseInsensitiveLike:", objc.BOOL, .{_object});
    }

    pub fn scriptingIsEqualTo(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "scriptingIsEqualTo:", objc.BOOL, .{_object});
    }

    pub fn scriptingIsLessThanOrEqualTo(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "scriptingIsLessThanOrEqualTo:", objc.BOOL, .{_object});
    }

    pub fn scriptingIsLessThan(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "scriptingIsLessThan:", objc.BOOL, .{_object});
    }

    pub fn scriptingIsGreaterThanOrEqualTo(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "scriptingIsGreaterThanOrEqualTo:", objc.BOOL, .{_object});
    }

    pub fn scriptingIsGreaterThan(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "scriptingIsGreaterThan:", objc.BOOL, .{_object});
    }

    pub fn scriptingBeginsWith(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "scriptingBeginsWith:", objc.BOOL, .{_object});
    }

    pub fn scriptingEndsWith(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "scriptingEndsWith:", objc.BOOL, .{_object});
    }

    pub fn scriptingContains(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "scriptingContains:", objc.BOOL, .{_object});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*foundation.Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*foundation.Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn supportsSecureCoding() objc.BOOL {
        return objc.msgSend(Internal.class(), "supportsSecureCoding", objc.BOOL, .{});
    }

    pub fn effect() *@This() {
        return objc.msgSend(Internal.class(), "effect", *@This(), .{});
    }

    pub fn bounceUpEffect() *@This() {
        return objc.msgSend(Internal.class(), "bounceUpEffect", *@This(), .{});
    }

    pub fn bounceDownEffect() *@This() {
        return objc.msgSend(Internal.class(), "bounceDownEffect", *@This(), .{});
    }

    pub fn effectWithByLayer(_self: *@This()) *@This() {
        return objc.msgSend(_self, "effectWithByLayer", *@This(), .{});
    }

    pub fn effectWithWholeSymbol(_self: *@This()) *@This() {
        return objc.msgSend(_self, "effectWithWholeSymbol", *@This(), .{});
    }
};

/// https://developer.apple.com/documentation/Symbols/NSSymbolVariableColorEffect?language=objc
pub const SymbolVariableColorEffect = opaque {
    pub const Internal = objc.ExternClass("NSSymbolVariableColorEffect", @This(), SymbolEffect, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "description", ?*foundation.String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "debugDescription", ?*foundation.String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*foundation.Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*foundation.MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*foundation.MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*foundation.MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*foundation.MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn version() objc.NSInteger {
        return objc.msgSend(Internal.class(), "version", objc.NSInteger, .{});
    }

    pub fn setVersion(_aVersion: objc.NSInteger) void {
        return objc.msgSend(Internal.class(), "setVersion:", void, .{_aVersion});
    }

    pub fn replacementObjectForCoder(_self: *@This(), _coder: ?*foundation.Coder) ?objc.Id {
        return objc.msgSend(_self, "replacementObjectForCoder:", ?objc.Id, .{_coder});
    }

    pub fn awakeAfterUsingCoder(_self: *@This(), _coder: ?*foundation.Coder) ?objc.Id {
        return objc.msgSend(_self, "awakeAfterUsingCoder:", ?objc.Id, .{_coder});
    }

    pub fn classForCoder(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "classForCoder", objc.Class, .{});
    }

    pub fn poseAsClass(_aClass: objc.Class) void {
        return objc.msgSend(Internal.class(), "poseAsClass:", void, .{_aClass});
    }

    pub fn autoContentAccessingProxy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "autoContentAccessingProxy", ?objc.Id, .{});
    }

    pub fn attemptRecoveryFromErrorOptionIndexDelegateDidRecoverSelectorContextInfo(
        _self: *@This(),
        _error: ?*foundation.Error,
        _recoveryOptionIndex: objc.NSUInteger,
        _delegate: ?objc.Id,
        _didRecoverSelector: objc.Selector,
        _contextInfo: ?*anyopaque,
    ) void {
        return objc.msgSend(_self, "attemptRecoveryFromError:optionIndex:delegate:didRecoverSelector:contextInfo:", void, .{
            _error,
            _recoveryOptionIndex,
            _delegate,
            _didRecoverSelector,
            _contextInfo,
        });
    }

    pub fn attemptRecoveryFromErrorOptionIndex(_self: *@This(), _error: ?*foundation.Error, _recoveryOptionIndex: objc.NSUInteger) objc.BOOL {
        return objc.msgSend(_self, "attemptRecoveryFromError:optionIndex:", objc.BOOL, .{ _error, _recoveryOptionIndex });
    }

    pub fn performSelectorWithObjectAfterDelayInModes(
        _self: *@This(),
        _aSelector: objc.Selector,
        _anArgument: ?objc.Id,
        _delay: foundation.TimeInterval,
        _modes: ?*anyopaque,
    ) void {
        return objc.msgSend(_self, "performSelector:withObject:afterDelay:inModes:", void, .{
            _aSelector,
            _anArgument,
            _delay,
            _modes,
        });
    }

    pub fn performSelectorWithObjectAfterDelay(_self: *@This(), _aSelector: objc.Selector, _anArgument: ?objc.Id, _delay: foundation.TimeInterval) void {
        return objc.msgSend(_self, "performSelector:withObject:afterDelay:", void, .{ _aSelector, _anArgument, _delay });
    }

    pub fn cancelPreviousPerformRequestsWithTargetSelectorObject(_aTarget: ?objc.Id, _aSelector: objc.Selector, _anArgument: ?objc.Id) void {
        return objc.msgSend(Internal.class(), "cancelPreviousPerformRequestsWithTarget:selector:object:", void, .{ _aTarget, _aSelector, _anArgument });
    }

    pub fn cancelPreviousPerformRequestsWithTarget(_aTarget: ?objc.Id) void {
        return objc.msgSend(Internal.class(), "cancelPreviousPerformRequestsWithTarget:", void, .{_aTarget});
    }

    pub fn urlResourceDataDidBecomeAvailable(_self: *@This(), _sender: ?*foundation.URL, _newBytes: ?*foundation.Data) void {
        return objc.msgSend(_self, "URL:resourceDataDidBecomeAvailable:", void, .{ _sender, _newBytes });
    }

    pub fn urlResourceDidFinishLoading(_self: *@This(), _sender: ?*foundation.URL) void {
        return objc.msgSend(_self, "URLResourceDidFinishLoading:", void, .{_sender});
    }

    pub fn urlResourceDidCancelLoading(_self: *@This(), _sender: ?*foundation.URL) void {
        return objc.msgSend(_self, "URLResourceDidCancelLoading:", void, .{_sender});
    }

    pub fn urlResourceDidFailLoadingWithReason(_self: *@This(), _sender: ?*foundation.URL, _reason: ?*foundation.String) void {
        return objc.msgSend(_self, "URL:resourceDidFailLoadingWithReason:", void, .{ _sender, _reason });
    }

    pub fn fileManagerShouldProceedAfterError(_self: *@This(), _fm: ?*foundation.FileManager, _errorInfo: ?*foundation.Dictionary) objc.BOOL {
        return objc.msgSend(_self, "fileManager:shouldProceedAfterError:", objc.BOOL, .{ _fm, _errorInfo });
    }

    pub fn fileManagerWillProcessPath(_self: *@This(), _fm: ?*foundation.FileManager, _path: ?*foundation.String) void {
        return objc.msgSend(_self, "fileManager:willProcessPath:", void, .{ _fm, _path });
    }

    pub fn valueForKey(_self: *@This(), _key: ?*foundation.String) ?objc.Id {
        return objc.msgSend(_self, "valueForKey:", ?objc.Id, .{_key});
    }

    pub fn setValueForKey(_self: *@This(), _value: ?objc.Id, _key: ?*foundation.String) void {
        return objc.msgSend(_self, "setValue:forKey:", void, .{ _value, _key });
    }

    pub fn validateValueForKeyError(_self: *@This(), _ioValue: ?*?objc.Id, _inKey: ?*foundation.String, _outError: ?*?*foundation.Error) objc.BOOL {
        return objc.msgSend(_self, "validateValue:forKey:error:", objc.BOOL, .{ _ioValue, _inKey, _outError });
    }

    pub fn mutableArrayValueForKey(_self: *@This(), _key: ?*foundation.String) ?*foundation.MutableArray {
        return objc.msgSend(_self, "mutableArrayValueForKey:", ?*foundation.MutableArray, .{_key});
    }

    pub fn mutableOrderedSetValueForKey(_self: *@This(), _key: ?*foundation.String) ?*foundation.MutableOrderedSet {
        return objc.msgSend(_self, "mutableOrderedSetValueForKey:", ?*foundation.MutableOrderedSet, .{_key});
    }

    pub fn mutableSetValueForKey(_self: *@This(), _key: ?*foundation.String) ?*foundation.MutableSet {
        return objc.msgSend(_self, "mutableSetValueForKey:", ?*foundation.MutableSet, .{_key});
    }

    pub fn valueForKeyPath(_self: *@This(), _keyPath: ?*foundation.String) ?objc.Id {
        return objc.msgSend(_self, "valueForKeyPath:", ?objc.Id, .{_keyPath});
    }

    pub fn setValueForKeyPath(_self: *@This(), _value: ?objc.Id, _keyPath: ?*foundation.String) void {
        return objc.msgSend(_self, "setValue:forKeyPath:", void, .{ _value, _keyPath });
    }

    pub fn validateValueForKeyPathError(_self: *@This(), _ioValue: ?*?objc.Id, _inKeyPath: ?*foundation.String, _outError: ?*?*foundation.Error) objc.BOOL {
        return objc.msgSend(_self, "validateValue:forKeyPath:error:", objc.BOOL, .{ _ioValue, _inKeyPath, _outError });
    }

    pub fn mutableArrayValueForKeyPath(_self: *@This(), _keyPath: ?*foundation.String) ?*foundation.MutableArray {
        return objc.msgSend(_self, "mutableArrayValueForKeyPath:", ?*foundation.MutableArray, .{_keyPath});
    }

    pub fn mutableOrderedSetValueForKeyPath(_self: *@This(), _keyPath: ?*foundation.String) ?*foundation.MutableOrderedSet {
        return objc.msgSend(_self, "mutableOrderedSetValueForKeyPath:", ?*foundation.MutableOrderedSet, .{_keyPath});
    }

    pub fn mutableSetValueForKeyPath(_self: *@This(), _keyPath: ?*foundation.String) ?*foundation.MutableSet {
        return objc.msgSend(_self, "mutableSetValueForKeyPath:", ?*foundation.MutableSet, .{_keyPath});
    }

    pub fn valueForUndefinedKey(_self: *@This(), _key: ?*foundation.String) ?objc.Id {
        return objc.msgSend(_self, "valueForUndefinedKey:", ?objc.Id, .{_key});
    }

    pub fn setValueForUndefinedKey(_self: *@This(), _value: ?objc.Id, _key: ?*foundation.String) void {
        return objc.msgSend(_self, "setValue:forUndefinedKey:", void, .{ _value, _key });
    }

    pub fn setNilValueForKey(_self: *@This(), _key: ?*foundation.String) void {
        return objc.msgSend(_self, "setNilValueForKey:", void, .{_key});
    }

    pub fn dictionaryWithValuesForKeys(_self: *@This(), _keys: ?*anyopaque) ?*anyopaque {
        return objc.msgSend(_self, "dictionaryWithValuesForKeys:", ?*anyopaque, .{_keys});
    }

    pub fn setValuesForKeysWithDictionary(_self: *@This(), _keyedValues: ?*anyopaque) void {
        return objc.msgSend(_self, "setValuesForKeysWithDictionary:", void, .{_keyedValues});
    }

    pub fn accessInstanceVariablesDirectly() objc.BOOL {
        return objc.msgSend(Internal.class(), "accessInstanceVariablesDirectly", objc.BOOL, .{});
    }

    pub fn useStoredAccessor() objc.BOOL {
        return objc.msgSend(Internal.class(), "useStoredAccessor", objc.BOOL, .{});
    }

    pub fn storedValueForKey(_self: *@This(), _key: ?*foundation.String) ?objc.Id {
        return objc.msgSend(_self, "storedValueForKey:", ?objc.Id, .{_key});
    }

    pub fn takeStoredValueForKey(_self: *@This(), _value: ?objc.Id, _key: ?*foundation.String) void {
        return objc.msgSend(_self, "takeStoredValue:forKey:", void, .{ _value, _key });
    }

    pub fn takeValueForKey(_self: *@This(), _value: ?objc.Id, _key: ?*foundation.String) void {
        return objc.msgSend(_self, "takeValue:forKey:", void, .{ _value, _key });
    }

    pub fn takeValueForKeyPath(_self: *@This(), _value: ?objc.Id, _keyPath: ?*foundation.String) void {
        return objc.msgSend(_self, "takeValue:forKeyPath:", void, .{ _value, _keyPath });
    }

    pub fn handleQueryWithUnboundKey(_self: *@This(), _key: ?*foundation.String) ?objc.Id {
        return objc.msgSend(_self, "handleQueryWithUnboundKey:", ?objc.Id, .{_key});
    }

    pub fn handleTakeValueForUnboundKey(_self: *@This(), _value: ?objc.Id, _key: ?*foundation.String) void {
        return objc.msgSend(_self, "handleTakeValue:forUnboundKey:", void, .{ _value, _key });
    }

    pub fn unableToSetNilForKey(_self: *@This(), _key: ?*foundation.String) void {
        return objc.msgSend(_self, "unableToSetNilForKey:", void, .{_key});
    }

    pub fn valuesForKeys(_self: *@This(), _keys: ?*foundation.Array) ?*foundation.Dictionary {
        return objc.msgSend(_self, "valuesForKeys:", ?*foundation.Dictionary, .{_keys});
    }

    pub fn takeValuesFromDictionary(_self: *@This(), _properties: ?*foundation.Dictionary) void {
        return objc.msgSend(_self, "takeValuesFromDictionary:", void, .{_properties});
    }

    pub fn observeValueForKeyPathOfObjectChangeContext(
        _self: *@This(),
        _keyPath: ?*foundation.String,
        _object: ?objc.Id,
        _change: ?*anyopaque,
        _context: ?*anyopaque,
    ) void {
        return objc.msgSend(_self, "observeValueForKeyPath:ofObject:change:context:", void, .{
            _keyPath,
            _object,
            _change,
            _context,
        });
    }

    pub fn addObserverForKeyPathOptionsContext(
        _self: *@This(),
        _observer: ?*objc.NSObject,
        _keyPath: ?*foundation.String,
        _options: foundation.KeyValueObservingOptions,
        _context: ?*anyopaque,
    ) void {
        return objc.msgSend(_self, "addObserver:forKeyPath:options:context:", void, .{
            _observer,
            _keyPath,
            _options,
            _context,
        });
    }

    pub fn removeObserverForKeyPathContext(_self: *@This(), _observer: ?*objc.NSObject, _keyPath: ?*foundation.String, _context: ?*anyopaque) void {
        return objc.msgSend(_self, "removeObserver:forKeyPath:context:", void, .{ _observer, _keyPath, _context });
    }

    pub fn removeObserverForKeyPath(_self: *@This(), _observer: ?*objc.NSObject, _keyPath: ?*foundation.String) void {
        return objc.msgSend(_self, "removeObserver:forKeyPath:", void, .{ _observer, _keyPath });
    }

    pub fn willChangeValueForKey(_self: *@This(), _key: ?*foundation.String) void {
        return objc.msgSend(_self, "willChangeValueForKey:", void, .{_key});
    }

    pub fn didChangeValueForKey(_self: *@This(), _key: ?*foundation.String) void {
        return objc.msgSend(_self, "didChangeValueForKey:", void, .{_key});
    }

    pub fn willChangeValuesAtIndexesForKey(_self: *@This(), _changeKind: foundation.KeyValueChange, _indexes: ?*foundation.IndexSet, _key: ?*foundation.String) void {
        return objc.msgSend(_self, "willChange:valuesAtIndexes:forKey:", void, .{ _changeKind, _indexes, _key });
    }

    pub fn didChangeValuesAtIndexesForKey(_self: *@This(), _changeKind: foundation.KeyValueChange, _indexes: ?*foundation.IndexSet, _key: ?*foundation.String) void {
        return objc.msgSend(_self, "didChange:valuesAtIndexes:forKey:", void, .{ _changeKind, _indexes, _key });
    }

    pub fn willChangeValueForKeyWithSetMutationUsingObjects(_self: *@This(), _key: ?*foundation.String, _mutationKind: foundation.KeyValueSetMutationKind, _objects: ?*foundation.Set) void {
        return objc.msgSend(_self, "willChangeValueForKey:withSetMutation:usingObjects:", void, .{ _key, _mutationKind, _objects });
    }

    pub fn didChangeValueForKeyWithSetMutationUsingObjects(_self: *@This(), _key: ?*foundation.String, _mutationKind: foundation.KeyValueSetMutationKind, _objects: ?*foundation.Set) void {
        return objc.msgSend(_self, "didChangeValueForKey:withSetMutation:usingObjects:", void, .{ _key, _mutationKind, _objects });
    }

    pub fn keyPathsForValuesAffectingValueForKey(_key: ?*foundation.String) ?*anyopaque {
        return objc.msgSend(Internal.class(), "keyPathsForValuesAffectingValueForKey:", ?*anyopaque, .{_key});
    }

    pub fn automaticallyNotifiesObserversForKey(_key: ?*foundation.String) objc.BOOL {
        return objc.msgSend(Internal.class(), "automaticallyNotifiesObserversForKey:", objc.BOOL, .{_key});
    }

    pub fn observationInfo(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "observationInfo", ?*anyopaque, .{});
    }

    pub fn setObservationInfo(_self: *@This(), _observationInfo: ?*anyopaque) void {
        return objc.msgSend(_self, "setObservationInfo:", void, .{_observationInfo});
    }

    pub fn setKeysTriggerChangeNotificationsForDependentKey(_keys: ?*foundation.Array, _dependentKey: ?*foundation.String) void {
        return objc.msgSend(Internal.class(), "setKeys:triggerChangeNotificationsForDependentKey:", void, .{ _keys, _dependentKey });
    }

    pub fn setSharedObservers(_self: *@This(), _sharedObservers: ?*foundation.KeyValueSharedObserversSnapshot) void {
        return objc.msgSend(_self, "setSharedObservers:", void, .{_sharedObservers});
    }

    pub fn replacementObjectForKeyedArchiver(_self: *@This(), _archiver: ?*foundation.KeyedArchiver) ?objc.Id {
        return objc.msgSend(_self, "replacementObjectForKeyedArchiver:", ?objc.Id, .{_archiver});
    }

    pub fn classFallbacksForKeyedArchiver() ?*anyopaque {
        return objc.msgSend(Internal.class(), "classFallbacksForKeyedArchiver", ?*anyopaque, .{});
    }

    pub fn classForKeyedArchiver(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "classForKeyedArchiver", objc.Class, .{});
    }

    pub fn classForKeyedUnarchiver() objc.Class {
        return objc.msgSend(Internal.class(), "classForKeyedUnarchiver", objc.Class, .{});
    }

    pub fn performSelectorOnMainThreadWithObjectWaitUntilDoneModes(
        _self: *@This(),
        _aSelector: objc.Selector,
        _arg: ?objc.Id,
        _wait: objc.BOOL,
        _array: ?*anyopaque,
    ) void {
        return objc.msgSend(_self, "performSelectorOnMainThread:withObject:waitUntilDone:modes:", void, .{
            _aSelector,
            _arg,
            _wait,
            _array,
        });
    }

    pub fn performSelectorOnMainThreadWithObjectWaitUntilDone(_self: *@This(), _aSelector: objc.Selector, _arg: ?objc.Id, _wait: objc.BOOL) void {
        return objc.msgSend(_self, "performSelectorOnMainThread:withObject:waitUntilDone:", void, .{ _aSelector, _arg, _wait });
    }

    pub fn performSelectorOnThreadWithObjectWaitUntilDoneModes(
        _self: *@This(),
        _aSelector: objc.Selector,
        _thr: ?*foundation.Thread,
        _arg: ?objc.Id,
        _wait: objc.BOOL,
        _array: ?*anyopaque,
    ) void {
        return objc.msgSend(_self, "performSelector:onThread:withObject:waitUntilDone:modes:", void, .{
            _aSelector,
            _thr,
            _arg,
            _wait,
            _array,
        });
    }

    pub fn performSelectorOnThreadWithObjectWaitUntilDone(
        _self: *@This(),
        _aSelector: objc.Selector,
        _thr: ?*foundation.Thread,
        _arg: ?objc.Id,
        _wait: objc.BOOL,
    ) void {
        return objc.msgSend(_self, "performSelector:onThread:withObject:waitUntilDone:", void, .{
            _aSelector,
            _thr,
            _arg,
            _wait,
        });
    }

    pub fn performSelectorInBackgroundWithObject(_self: *@This(), _aSelector: objc.Selector, _arg: ?objc.Id) void {
        return objc.msgSend(_self, "performSelectorInBackground:withObject:", void, .{ _aSelector, _arg });
    }

    pub fn replacementObjectForArchiver(_self: *@This(), _archiver: ?*foundation.Archiver) ?objc.Id {
        return objc.msgSend(_self, "replacementObjectForArchiver:", ?objc.Id, .{_archiver});
    }

    pub fn classForArchiver(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "classForArchiver", objc.Class, .{});
    }

    pub fn replacementObjectForPortCoder(_self: *@This(), _coder: ?*foundation.PortCoder) ?objc.Id {
        return objc.msgSend(_self, "replacementObjectForPortCoder:", ?objc.Id, .{_coder});
    }

    pub fn classForPortCoder(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "classForPortCoder", objc.Class, .{});
    }

    pub fn inverseForRelationshipKey(_self: *@This(), _relationshipKey: ?*foundation.String) ?*foundation.String {
        return objc.msgSend(_self, "inverseForRelationshipKey:", ?*foundation.String, .{_relationshipKey});
    }

    pub fn classDescription(_self: *@This()) ?*foundation.ClassDescription {
        return objc.msgSend(_self, "classDescription", ?*foundation.ClassDescription, .{});
    }

    pub fn attributeKeys(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "attributeKeys", ?*anyopaque, .{});
    }

    pub fn toOneRelationshipKeys(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "toOneRelationshipKeys", ?*anyopaque, .{});
    }

    pub fn toManyRelationshipKeys(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "toManyRelationshipKeys", ?*anyopaque, .{});
    }

    pub fn scriptingValueForSpecifier(_self: *@This(), _objectSpecifier: ?*foundation.ScriptObjectSpecifier) ?objc.Id {
        return objc.msgSend(_self, "scriptingValueForSpecifier:", ?objc.Id, .{_objectSpecifier});
    }

    pub fn copyScriptingValueForKeyWithProperties(_self: *@This(), _value: ?objc.Id, _key: ?*foundation.String, _properties: ?*anyopaque) ?objc.Id {
        return objc.msgSend(_self, "copyScriptingValue:forKey:withProperties:", ?objc.Id, .{ _value, _key, _properties });
    }

    pub fn newScriptingObjectOfClassForValueForKeyWithContentsValueProperties(
        _self: *@This(),
        _objectClass: objc.Class,
        _key: ?*foundation.String,
        _contentsValue: ?objc.Id,
        _properties: ?*anyopaque,
    ) ?objc.Id {
        return objc.msgSend(_self, "newScriptingObjectOfClass:forValueForKey:withContentsValue:properties:", ?objc.Id, .{
            _objectClass,
            _key,
            _contentsValue,
            _properties,
        });
    }

    pub fn scriptingProperties(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "scriptingProperties", ?*anyopaque, .{});
    }

    pub fn setScriptingProperties(_self: *@This(), _scriptingProperties: ?*anyopaque) void {
        return objc.msgSend(_self, "setScriptingProperties:", void, .{_scriptingProperties});
    }

    pub fn classCode(_self: *@This()) objc.FourCharCode {
        return objc.msgSend(_self, "classCode", objc.FourCharCode, .{});
    }

    pub fn className(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "className", ?*foundation.String, .{});
    }

    pub fn valueAtIndexInPropertyWithKey(_self: *@This(), _index: objc.NSUInteger, _key: ?*foundation.String) ?objc.Id {
        return objc.msgSend(_self, "valueAtIndex:inPropertyWithKey:", ?objc.Id, .{ _index, _key });
    }

    pub fn valueWithNameInPropertyWithKey(_self: *@This(), _name: ?*foundation.String, _key: ?*foundation.String) ?objc.Id {
        return objc.msgSend(_self, "valueWithName:inPropertyWithKey:", ?objc.Id, .{ _name, _key });
    }

    pub fn valueWithUniqueIDInPropertyWithKey(_self: *@This(), _uniqueID: ?objc.Id, _key: ?*foundation.String) ?objc.Id {
        return objc.msgSend(_self, "valueWithUniqueID:inPropertyWithKey:", ?objc.Id, .{ _uniqueID, _key });
    }

    pub fn insertValueAtIndexInPropertyWithKey(_self: *@This(), _value: ?objc.Id, _index: objc.NSUInteger, _key: ?*foundation.String) void {
        return objc.msgSend(_self, "insertValue:atIndex:inPropertyWithKey:", void, .{ _value, _index, _key });
    }

    pub fn removeValueAtIndexFromPropertyWithKey(_self: *@This(), _index: objc.NSUInteger, _key: ?*foundation.String) void {
        return objc.msgSend(_self, "removeValueAtIndex:fromPropertyWithKey:", void, .{ _index, _key });
    }

    pub fn replaceValueAtIndexInPropertyWithKeyWithValue(_self: *@This(), _index: objc.NSUInteger, _key: ?*foundation.String, _value: ?objc.Id) void {
        return objc.msgSend(_self, "replaceValueAtIndex:inPropertyWithKey:withValue:", void, .{ _index, _key, _value });
    }

    pub fn insertValueInPropertyWithKey(_self: *@This(), _value: ?objc.Id, _key: ?*foundation.String) void {
        return objc.msgSend(_self, "insertValue:inPropertyWithKey:", void, .{ _value, _key });
    }

    pub fn coerceValueForKey(_self: *@This(), _value: ?objc.Id, _key: ?*foundation.String) ?objc.Id {
        return objc.msgSend(_self, "coerceValue:forKey:", ?objc.Id, .{ _value, _key });
    }

    pub fn indicesOfObjectsByEvaluatingObjectSpecifier(_self: *@This(), _specifier: ?*foundation.ScriptObjectSpecifier) ?*anyopaque {
        return objc.msgSend(_self, "indicesOfObjectsByEvaluatingObjectSpecifier:", ?*anyopaque, .{_specifier});
    }

    pub fn objectSpecifier(_self: *@This()) ?*foundation.ScriptObjectSpecifier {
        return objc.msgSend(_self, "objectSpecifier", ?*foundation.ScriptObjectSpecifier, .{});
    }

    pub fn isEqualTo(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqualTo:", objc.BOOL, .{_object});
    }

    pub fn isLessThanOrEqualTo(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isLessThanOrEqualTo:", objc.BOOL, .{_object});
    }

    pub fn isLessThan(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isLessThan:", objc.BOOL, .{_object});
    }

    pub fn isGreaterThanOrEqualTo(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isGreaterThanOrEqualTo:", objc.BOOL, .{_object});
    }

    pub fn isGreaterThan(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isGreaterThan:", objc.BOOL, .{_object});
    }

    pub fn isNotEqualTo(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isNotEqualTo:", objc.BOOL, .{_object});
    }

    pub fn doesContain(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "doesContain:", objc.BOOL, .{_object});
    }

    pub fn isLike(_self: *@This(), _object: ?*foundation.String) objc.BOOL {
        return objc.msgSend(_self, "isLike:", objc.BOOL, .{_object});
    }

    pub fn isCaseInsensitiveLike(_self: *@This(), _object: ?*foundation.String) objc.BOOL {
        return objc.msgSend(_self, "isCaseInsensitiveLike:", objc.BOOL, .{_object});
    }

    pub fn scriptingIsEqualTo(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "scriptingIsEqualTo:", objc.BOOL, .{_object});
    }

    pub fn scriptingIsLessThanOrEqualTo(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "scriptingIsLessThanOrEqualTo:", objc.BOOL, .{_object});
    }

    pub fn scriptingIsLessThan(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "scriptingIsLessThan:", objc.BOOL, .{_object});
    }

    pub fn scriptingIsGreaterThanOrEqualTo(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "scriptingIsGreaterThanOrEqualTo:", objc.BOOL, .{_object});
    }

    pub fn scriptingIsGreaterThan(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "scriptingIsGreaterThan:", objc.BOOL, .{_object});
    }

    pub fn scriptingBeginsWith(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "scriptingBeginsWith:", objc.BOOL, .{_object});
    }

    pub fn scriptingEndsWith(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "scriptingEndsWith:", objc.BOOL, .{_object});
    }

    pub fn scriptingContains(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "scriptingContains:", objc.BOOL, .{_object});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*foundation.Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*foundation.Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn supportsSecureCoding() objc.BOOL {
        return objc.msgSend(Internal.class(), "supportsSecureCoding", objc.BOOL, .{});
    }

    pub fn effect() *@This() {
        return objc.msgSend(Internal.class(), "effect", *@This(), .{});
    }

    pub fn effectWithIterative(_self: *@This()) *@This() {
        return objc.msgSend(_self, "effectWithIterative", *@This(), .{});
    }

    pub fn effectWithCumulative(_self: *@This()) *@This() {
        return objc.msgSend(_self, "effectWithCumulative", *@This(), .{});
    }

    pub fn effectWithReversing(_self: *@This()) *@This() {
        return objc.msgSend(_self, "effectWithReversing", *@This(), .{});
    }

    pub fn effectWithNonReversing(_self: *@This()) *@This() {
        return objc.msgSend(_self, "effectWithNonReversing", *@This(), .{});
    }

    pub fn effectWithHideInactiveLayers(_self: *@This()) *@This() {
        return objc.msgSend(_self, "effectWithHideInactiveLayers", *@This(), .{});
    }

    pub fn effectWithDimInactiveLayers(_self: *@This()) *@This() {
        return objc.msgSend(_self, "effectWithDimInactiveLayers", *@This(), .{});
    }
};

/// https://developer.apple.com/documentation/Symbols/NSSymbolScaleEffect?language=objc
pub const SymbolScaleEffect = opaque {
    pub const Internal = objc.ExternClass("NSSymbolScaleEffect", @This(), SymbolEffect, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "description", ?*foundation.String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "debugDescription", ?*foundation.String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*foundation.Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*foundation.MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*foundation.MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*foundation.MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*foundation.MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn version() objc.NSInteger {
        return objc.msgSend(Internal.class(), "version", objc.NSInteger, .{});
    }

    pub fn setVersion(_aVersion: objc.NSInteger) void {
        return objc.msgSend(Internal.class(), "setVersion:", void, .{_aVersion});
    }

    pub fn replacementObjectForCoder(_self: *@This(), _coder: ?*foundation.Coder) ?objc.Id {
        return objc.msgSend(_self, "replacementObjectForCoder:", ?objc.Id, .{_coder});
    }

    pub fn awakeAfterUsingCoder(_self: *@This(), _coder: ?*foundation.Coder) ?objc.Id {
        return objc.msgSend(_self, "awakeAfterUsingCoder:", ?objc.Id, .{_coder});
    }

    pub fn classForCoder(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "classForCoder", objc.Class, .{});
    }

    pub fn poseAsClass(_aClass: objc.Class) void {
        return objc.msgSend(Internal.class(), "poseAsClass:", void, .{_aClass});
    }

    pub fn autoContentAccessingProxy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "autoContentAccessingProxy", ?objc.Id, .{});
    }

    pub fn attemptRecoveryFromErrorOptionIndexDelegateDidRecoverSelectorContextInfo(
        _self: *@This(),
        _error: ?*foundation.Error,
        _recoveryOptionIndex: objc.NSUInteger,
        _delegate: ?objc.Id,
        _didRecoverSelector: objc.Selector,
        _contextInfo: ?*anyopaque,
    ) void {
        return objc.msgSend(_self, "attemptRecoveryFromError:optionIndex:delegate:didRecoverSelector:contextInfo:", void, .{
            _error,
            _recoveryOptionIndex,
            _delegate,
            _didRecoverSelector,
            _contextInfo,
        });
    }

    pub fn attemptRecoveryFromErrorOptionIndex(_self: *@This(), _error: ?*foundation.Error, _recoveryOptionIndex: objc.NSUInteger) objc.BOOL {
        return objc.msgSend(_self, "attemptRecoveryFromError:optionIndex:", objc.BOOL, .{ _error, _recoveryOptionIndex });
    }

    pub fn performSelectorWithObjectAfterDelayInModes(
        _self: *@This(),
        _aSelector: objc.Selector,
        _anArgument: ?objc.Id,
        _delay: foundation.TimeInterval,
        _modes: ?*anyopaque,
    ) void {
        return objc.msgSend(_self, "performSelector:withObject:afterDelay:inModes:", void, .{
            _aSelector,
            _anArgument,
            _delay,
            _modes,
        });
    }

    pub fn performSelectorWithObjectAfterDelay(_self: *@This(), _aSelector: objc.Selector, _anArgument: ?objc.Id, _delay: foundation.TimeInterval) void {
        return objc.msgSend(_self, "performSelector:withObject:afterDelay:", void, .{ _aSelector, _anArgument, _delay });
    }

    pub fn cancelPreviousPerformRequestsWithTargetSelectorObject(_aTarget: ?objc.Id, _aSelector: objc.Selector, _anArgument: ?objc.Id) void {
        return objc.msgSend(Internal.class(), "cancelPreviousPerformRequestsWithTarget:selector:object:", void, .{ _aTarget, _aSelector, _anArgument });
    }

    pub fn cancelPreviousPerformRequestsWithTarget(_aTarget: ?objc.Id) void {
        return objc.msgSend(Internal.class(), "cancelPreviousPerformRequestsWithTarget:", void, .{_aTarget});
    }

    pub fn urlResourceDataDidBecomeAvailable(_self: *@This(), _sender: ?*foundation.URL, _newBytes: ?*foundation.Data) void {
        return objc.msgSend(_self, "URL:resourceDataDidBecomeAvailable:", void, .{ _sender, _newBytes });
    }

    pub fn urlResourceDidFinishLoading(_self: *@This(), _sender: ?*foundation.URL) void {
        return objc.msgSend(_self, "URLResourceDidFinishLoading:", void, .{_sender});
    }

    pub fn urlResourceDidCancelLoading(_self: *@This(), _sender: ?*foundation.URL) void {
        return objc.msgSend(_self, "URLResourceDidCancelLoading:", void, .{_sender});
    }

    pub fn urlResourceDidFailLoadingWithReason(_self: *@This(), _sender: ?*foundation.URL, _reason: ?*foundation.String) void {
        return objc.msgSend(_self, "URL:resourceDidFailLoadingWithReason:", void, .{ _sender, _reason });
    }

    pub fn fileManagerShouldProceedAfterError(_self: *@This(), _fm: ?*foundation.FileManager, _errorInfo: ?*foundation.Dictionary) objc.BOOL {
        return objc.msgSend(_self, "fileManager:shouldProceedAfterError:", objc.BOOL, .{ _fm, _errorInfo });
    }

    pub fn fileManagerWillProcessPath(_self: *@This(), _fm: ?*foundation.FileManager, _path: ?*foundation.String) void {
        return objc.msgSend(_self, "fileManager:willProcessPath:", void, .{ _fm, _path });
    }

    pub fn valueForKey(_self: *@This(), _key: ?*foundation.String) ?objc.Id {
        return objc.msgSend(_self, "valueForKey:", ?objc.Id, .{_key});
    }

    pub fn setValueForKey(_self: *@This(), _value: ?objc.Id, _key: ?*foundation.String) void {
        return objc.msgSend(_self, "setValue:forKey:", void, .{ _value, _key });
    }

    pub fn validateValueForKeyError(_self: *@This(), _ioValue: ?*?objc.Id, _inKey: ?*foundation.String, _outError: ?*?*foundation.Error) objc.BOOL {
        return objc.msgSend(_self, "validateValue:forKey:error:", objc.BOOL, .{ _ioValue, _inKey, _outError });
    }

    pub fn mutableArrayValueForKey(_self: *@This(), _key: ?*foundation.String) ?*foundation.MutableArray {
        return objc.msgSend(_self, "mutableArrayValueForKey:", ?*foundation.MutableArray, .{_key});
    }

    pub fn mutableOrderedSetValueForKey(_self: *@This(), _key: ?*foundation.String) ?*foundation.MutableOrderedSet {
        return objc.msgSend(_self, "mutableOrderedSetValueForKey:", ?*foundation.MutableOrderedSet, .{_key});
    }

    pub fn mutableSetValueForKey(_self: *@This(), _key: ?*foundation.String) ?*foundation.MutableSet {
        return objc.msgSend(_self, "mutableSetValueForKey:", ?*foundation.MutableSet, .{_key});
    }

    pub fn valueForKeyPath(_self: *@This(), _keyPath: ?*foundation.String) ?objc.Id {
        return objc.msgSend(_self, "valueForKeyPath:", ?objc.Id, .{_keyPath});
    }

    pub fn setValueForKeyPath(_self: *@This(), _value: ?objc.Id, _keyPath: ?*foundation.String) void {
        return objc.msgSend(_self, "setValue:forKeyPath:", void, .{ _value, _keyPath });
    }

    pub fn validateValueForKeyPathError(_self: *@This(), _ioValue: ?*?objc.Id, _inKeyPath: ?*foundation.String, _outError: ?*?*foundation.Error) objc.BOOL {
        return objc.msgSend(_self, "validateValue:forKeyPath:error:", objc.BOOL, .{ _ioValue, _inKeyPath, _outError });
    }

    pub fn mutableArrayValueForKeyPath(_self: *@This(), _keyPath: ?*foundation.String) ?*foundation.MutableArray {
        return objc.msgSend(_self, "mutableArrayValueForKeyPath:", ?*foundation.MutableArray, .{_keyPath});
    }

    pub fn mutableOrderedSetValueForKeyPath(_self: *@This(), _keyPath: ?*foundation.String) ?*foundation.MutableOrderedSet {
        return objc.msgSend(_self, "mutableOrderedSetValueForKeyPath:", ?*foundation.MutableOrderedSet, .{_keyPath});
    }

    pub fn mutableSetValueForKeyPath(_self: *@This(), _keyPath: ?*foundation.String) ?*foundation.MutableSet {
        return objc.msgSend(_self, "mutableSetValueForKeyPath:", ?*foundation.MutableSet, .{_keyPath});
    }

    pub fn valueForUndefinedKey(_self: *@This(), _key: ?*foundation.String) ?objc.Id {
        return objc.msgSend(_self, "valueForUndefinedKey:", ?objc.Id, .{_key});
    }

    pub fn setValueForUndefinedKey(_self: *@This(), _value: ?objc.Id, _key: ?*foundation.String) void {
        return objc.msgSend(_self, "setValue:forUndefinedKey:", void, .{ _value, _key });
    }

    pub fn setNilValueForKey(_self: *@This(), _key: ?*foundation.String) void {
        return objc.msgSend(_self, "setNilValueForKey:", void, .{_key});
    }

    pub fn dictionaryWithValuesForKeys(_self: *@This(), _keys: ?*anyopaque) ?*anyopaque {
        return objc.msgSend(_self, "dictionaryWithValuesForKeys:", ?*anyopaque, .{_keys});
    }

    pub fn setValuesForKeysWithDictionary(_self: *@This(), _keyedValues: ?*anyopaque) void {
        return objc.msgSend(_self, "setValuesForKeysWithDictionary:", void, .{_keyedValues});
    }

    pub fn accessInstanceVariablesDirectly() objc.BOOL {
        return objc.msgSend(Internal.class(), "accessInstanceVariablesDirectly", objc.BOOL, .{});
    }

    pub fn useStoredAccessor() objc.BOOL {
        return objc.msgSend(Internal.class(), "useStoredAccessor", objc.BOOL, .{});
    }

    pub fn storedValueForKey(_self: *@This(), _key: ?*foundation.String) ?objc.Id {
        return objc.msgSend(_self, "storedValueForKey:", ?objc.Id, .{_key});
    }

    pub fn takeStoredValueForKey(_self: *@This(), _value: ?objc.Id, _key: ?*foundation.String) void {
        return objc.msgSend(_self, "takeStoredValue:forKey:", void, .{ _value, _key });
    }

    pub fn takeValueForKey(_self: *@This(), _value: ?objc.Id, _key: ?*foundation.String) void {
        return objc.msgSend(_self, "takeValue:forKey:", void, .{ _value, _key });
    }

    pub fn takeValueForKeyPath(_self: *@This(), _value: ?objc.Id, _keyPath: ?*foundation.String) void {
        return objc.msgSend(_self, "takeValue:forKeyPath:", void, .{ _value, _keyPath });
    }

    pub fn handleQueryWithUnboundKey(_self: *@This(), _key: ?*foundation.String) ?objc.Id {
        return objc.msgSend(_self, "handleQueryWithUnboundKey:", ?objc.Id, .{_key});
    }

    pub fn handleTakeValueForUnboundKey(_self: *@This(), _value: ?objc.Id, _key: ?*foundation.String) void {
        return objc.msgSend(_self, "handleTakeValue:forUnboundKey:", void, .{ _value, _key });
    }

    pub fn unableToSetNilForKey(_self: *@This(), _key: ?*foundation.String) void {
        return objc.msgSend(_self, "unableToSetNilForKey:", void, .{_key});
    }

    pub fn valuesForKeys(_self: *@This(), _keys: ?*foundation.Array) ?*foundation.Dictionary {
        return objc.msgSend(_self, "valuesForKeys:", ?*foundation.Dictionary, .{_keys});
    }

    pub fn takeValuesFromDictionary(_self: *@This(), _properties: ?*foundation.Dictionary) void {
        return objc.msgSend(_self, "takeValuesFromDictionary:", void, .{_properties});
    }

    pub fn observeValueForKeyPathOfObjectChangeContext(
        _self: *@This(),
        _keyPath: ?*foundation.String,
        _object: ?objc.Id,
        _change: ?*anyopaque,
        _context: ?*anyopaque,
    ) void {
        return objc.msgSend(_self, "observeValueForKeyPath:ofObject:change:context:", void, .{
            _keyPath,
            _object,
            _change,
            _context,
        });
    }

    pub fn addObserverForKeyPathOptionsContext(
        _self: *@This(),
        _observer: ?*objc.NSObject,
        _keyPath: ?*foundation.String,
        _options: foundation.KeyValueObservingOptions,
        _context: ?*anyopaque,
    ) void {
        return objc.msgSend(_self, "addObserver:forKeyPath:options:context:", void, .{
            _observer,
            _keyPath,
            _options,
            _context,
        });
    }

    pub fn removeObserverForKeyPathContext(_self: *@This(), _observer: ?*objc.NSObject, _keyPath: ?*foundation.String, _context: ?*anyopaque) void {
        return objc.msgSend(_self, "removeObserver:forKeyPath:context:", void, .{ _observer, _keyPath, _context });
    }

    pub fn removeObserverForKeyPath(_self: *@This(), _observer: ?*objc.NSObject, _keyPath: ?*foundation.String) void {
        return objc.msgSend(_self, "removeObserver:forKeyPath:", void, .{ _observer, _keyPath });
    }

    pub fn willChangeValueForKey(_self: *@This(), _key: ?*foundation.String) void {
        return objc.msgSend(_self, "willChangeValueForKey:", void, .{_key});
    }

    pub fn didChangeValueForKey(_self: *@This(), _key: ?*foundation.String) void {
        return objc.msgSend(_self, "didChangeValueForKey:", void, .{_key});
    }

    pub fn willChangeValuesAtIndexesForKey(_self: *@This(), _changeKind: foundation.KeyValueChange, _indexes: ?*foundation.IndexSet, _key: ?*foundation.String) void {
        return objc.msgSend(_self, "willChange:valuesAtIndexes:forKey:", void, .{ _changeKind, _indexes, _key });
    }

    pub fn didChangeValuesAtIndexesForKey(_self: *@This(), _changeKind: foundation.KeyValueChange, _indexes: ?*foundation.IndexSet, _key: ?*foundation.String) void {
        return objc.msgSend(_self, "didChange:valuesAtIndexes:forKey:", void, .{ _changeKind, _indexes, _key });
    }

    pub fn willChangeValueForKeyWithSetMutationUsingObjects(_self: *@This(), _key: ?*foundation.String, _mutationKind: foundation.KeyValueSetMutationKind, _objects: ?*foundation.Set) void {
        return objc.msgSend(_self, "willChangeValueForKey:withSetMutation:usingObjects:", void, .{ _key, _mutationKind, _objects });
    }

    pub fn didChangeValueForKeyWithSetMutationUsingObjects(_self: *@This(), _key: ?*foundation.String, _mutationKind: foundation.KeyValueSetMutationKind, _objects: ?*foundation.Set) void {
        return objc.msgSend(_self, "didChangeValueForKey:withSetMutation:usingObjects:", void, .{ _key, _mutationKind, _objects });
    }

    pub fn keyPathsForValuesAffectingValueForKey(_key: ?*foundation.String) ?*anyopaque {
        return objc.msgSend(Internal.class(), "keyPathsForValuesAffectingValueForKey:", ?*anyopaque, .{_key});
    }

    pub fn automaticallyNotifiesObserversForKey(_key: ?*foundation.String) objc.BOOL {
        return objc.msgSend(Internal.class(), "automaticallyNotifiesObserversForKey:", objc.BOOL, .{_key});
    }

    pub fn observationInfo(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "observationInfo", ?*anyopaque, .{});
    }

    pub fn setObservationInfo(_self: *@This(), _observationInfo: ?*anyopaque) void {
        return objc.msgSend(_self, "setObservationInfo:", void, .{_observationInfo});
    }

    pub fn setKeysTriggerChangeNotificationsForDependentKey(_keys: ?*foundation.Array, _dependentKey: ?*foundation.String) void {
        return objc.msgSend(Internal.class(), "setKeys:triggerChangeNotificationsForDependentKey:", void, .{ _keys, _dependentKey });
    }

    pub fn setSharedObservers(_self: *@This(), _sharedObservers: ?*foundation.KeyValueSharedObserversSnapshot) void {
        return objc.msgSend(_self, "setSharedObservers:", void, .{_sharedObservers});
    }

    pub fn replacementObjectForKeyedArchiver(_self: *@This(), _archiver: ?*foundation.KeyedArchiver) ?objc.Id {
        return objc.msgSend(_self, "replacementObjectForKeyedArchiver:", ?objc.Id, .{_archiver});
    }

    pub fn classFallbacksForKeyedArchiver() ?*anyopaque {
        return objc.msgSend(Internal.class(), "classFallbacksForKeyedArchiver", ?*anyopaque, .{});
    }

    pub fn classForKeyedArchiver(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "classForKeyedArchiver", objc.Class, .{});
    }

    pub fn classForKeyedUnarchiver() objc.Class {
        return objc.msgSend(Internal.class(), "classForKeyedUnarchiver", objc.Class, .{});
    }

    pub fn performSelectorOnMainThreadWithObjectWaitUntilDoneModes(
        _self: *@This(),
        _aSelector: objc.Selector,
        _arg: ?objc.Id,
        _wait: objc.BOOL,
        _array: ?*anyopaque,
    ) void {
        return objc.msgSend(_self, "performSelectorOnMainThread:withObject:waitUntilDone:modes:", void, .{
            _aSelector,
            _arg,
            _wait,
            _array,
        });
    }

    pub fn performSelectorOnMainThreadWithObjectWaitUntilDone(_self: *@This(), _aSelector: objc.Selector, _arg: ?objc.Id, _wait: objc.BOOL) void {
        return objc.msgSend(_self, "performSelectorOnMainThread:withObject:waitUntilDone:", void, .{ _aSelector, _arg, _wait });
    }

    pub fn performSelectorOnThreadWithObjectWaitUntilDoneModes(
        _self: *@This(),
        _aSelector: objc.Selector,
        _thr: ?*foundation.Thread,
        _arg: ?objc.Id,
        _wait: objc.BOOL,
        _array: ?*anyopaque,
    ) void {
        return objc.msgSend(_self, "performSelector:onThread:withObject:waitUntilDone:modes:", void, .{
            _aSelector,
            _thr,
            _arg,
            _wait,
            _array,
        });
    }

    pub fn performSelectorOnThreadWithObjectWaitUntilDone(
        _self: *@This(),
        _aSelector: objc.Selector,
        _thr: ?*foundation.Thread,
        _arg: ?objc.Id,
        _wait: objc.BOOL,
    ) void {
        return objc.msgSend(_self, "performSelector:onThread:withObject:waitUntilDone:", void, .{
            _aSelector,
            _thr,
            _arg,
            _wait,
        });
    }

    pub fn performSelectorInBackgroundWithObject(_self: *@This(), _aSelector: objc.Selector, _arg: ?objc.Id) void {
        return objc.msgSend(_self, "performSelectorInBackground:withObject:", void, .{ _aSelector, _arg });
    }

    pub fn replacementObjectForArchiver(_self: *@This(), _archiver: ?*foundation.Archiver) ?objc.Id {
        return objc.msgSend(_self, "replacementObjectForArchiver:", ?objc.Id, .{_archiver});
    }

    pub fn classForArchiver(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "classForArchiver", objc.Class, .{});
    }

    pub fn replacementObjectForPortCoder(_self: *@This(), _coder: ?*foundation.PortCoder) ?objc.Id {
        return objc.msgSend(_self, "replacementObjectForPortCoder:", ?objc.Id, .{_coder});
    }

    pub fn classForPortCoder(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "classForPortCoder", objc.Class, .{});
    }

    pub fn inverseForRelationshipKey(_self: *@This(), _relationshipKey: ?*foundation.String) ?*foundation.String {
        return objc.msgSend(_self, "inverseForRelationshipKey:", ?*foundation.String, .{_relationshipKey});
    }

    pub fn classDescription(_self: *@This()) ?*foundation.ClassDescription {
        return objc.msgSend(_self, "classDescription", ?*foundation.ClassDescription, .{});
    }

    pub fn attributeKeys(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "attributeKeys", ?*anyopaque, .{});
    }

    pub fn toOneRelationshipKeys(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "toOneRelationshipKeys", ?*anyopaque, .{});
    }

    pub fn toManyRelationshipKeys(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "toManyRelationshipKeys", ?*anyopaque, .{});
    }

    pub fn scriptingValueForSpecifier(_self: *@This(), _objectSpecifier: ?*foundation.ScriptObjectSpecifier) ?objc.Id {
        return objc.msgSend(_self, "scriptingValueForSpecifier:", ?objc.Id, .{_objectSpecifier});
    }

    pub fn copyScriptingValueForKeyWithProperties(_self: *@This(), _value: ?objc.Id, _key: ?*foundation.String, _properties: ?*anyopaque) ?objc.Id {
        return objc.msgSend(_self, "copyScriptingValue:forKey:withProperties:", ?objc.Id, .{ _value, _key, _properties });
    }

    pub fn newScriptingObjectOfClassForValueForKeyWithContentsValueProperties(
        _self: *@This(),
        _objectClass: objc.Class,
        _key: ?*foundation.String,
        _contentsValue: ?objc.Id,
        _properties: ?*anyopaque,
    ) ?objc.Id {
        return objc.msgSend(_self, "newScriptingObjectOfClass:forValueForKey:withContentsValue:properties:", ?objc.Id, .{
            _objectClass,
            _key,
            _contentsValue,
            _properties,
        });
    }

    pub fn scriptingProperties(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "scriptingProperties", ?*anyopaque, .{});
    }

    pub fn setScriptingProperties(_self: *@This(), _scriptingProperties: ?*anyopaque) void {
        return objc.msgSend(_self, "setScriptingProperties:", void, .{_scriptingProperties});
    }

    pub fn classCode(_self: *@This()) objc.FourCharCode {
        return objc.msgSend(_self, "classCode", objc.FourCharCode, .{});
    }

    pub fn className(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "className", ?*foundation.String, .{});
    }

    pub fn valueAtIndexInPropertyWithKey(_self: *@This(), _index: objc.NSUInteger, _key: ?*foundation.String) ?objc.Id {
        return objc.msgSend(_self, "valueAtIndex:inPropertyWithKey:", ?objc.Id, .{ _index, _key });
    }

    pub fn valueWithNameInPropertyWithKey(_self: *@This(), _name: ?*foundation.String, _key: ?*foundation.String) ?objc.Id {
        return objc.msgSend(_self, "valueWithName:inPropertyWithKey:", ?objc.Id, .{ _name, _key });
    }

    pub fn valueWithUniqueIDInPropertyWithKey(_self: *@This(), _uniqueID: ?objc.Id, _key: ?*foundation.String) ?objc.Id {
        return objc.msgSend(_self, "valueWithUniqueID:inPropertyWithKey:", ?objc.Id, .{ _uniqueID, _key });
    }

    pub fn insertValueAtIndexInPropertyWithKey(_self: *@This(), _value: ?objc.Id, _index: objc.NSUInteger, _key: ?*foundation.String) void {
        return objc.msgSend(_self, "insertValue:atIndex:inPropertyWithKey:", void, .{ _value, _index, _key });
    }

    pub fn removeValueAtIndexFromPropertyWithKey(_self: *@This(), _index: objc.NSUInteger, _key: ?*foundation.String) void {
        return objc.msgSend(_self, "removeValueAtIndex:fromPropertyWithKey:", void, .{ _index, _key });
    }

    pub fn replaceValueAtIndexInPropertyWithKeyWithValue(_self: *@This(), _index: objc.NSUInteger, _key: ?*foundation.String, _value: ?objc.Id) void {
        return objc.msgSend(_self, "replaceValueAtIndex:inPropertyWithKey:withValue:", void, .{ _index, _key, _value });
    }

    pub fn insertValueInPropertyWithKey(_self: *@This(), _value: ?objc.Id, _key: ?*foundation.String) void {
        return objc.msgSend(_self, "insertValue:inPropertyWithKey:", void, .{ _value, _key });
    }

    pub fn coerceValueForKey(_self: *@This(), _value: ?objc.Id, _key: ?*foundation.String) ?objc.Id {
        return objc.msgSend(_self, "coerceValue:forKey:", ?objc.Id, .{ _value, _key });
    }

    pub fn indicesOfObjectsByEvaluatingObjectSpecifier(_self: *@This(), _specifier: ?*foundation.ScriptObjectSpecifier) ?*anyopaque {
        return objc.msgSend(_self, "indicesOfObjectsByEvaluatingObjectSpecifier:", ?*anyopaque, .{_specifier});
    }

    pub fn objectSpecifier(_self: *@This()) ?*foundation.ScriptObjectSpecifier {
        return objc.msgSend(_self, "objectSpecifier", ?*foundation.ScriptObjectSpecifier, .{});
    }

    pub fn isEqualTo(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqualTo:", objc.BOOL, .{_object});
    }

    pub fn isLessThanOrEqualTo(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isLessThanOrEqualTo:", objc.BOOL, .{_object});
    }

    pub fn isLessThan(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isLessThan:", objc.BOOL, .{_object});
    }

    pub fn isGreaterThanOrEqualTo(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isGreaterThanOrEqualTo:", objc.BOOL, .{_object});
    }

    pub fn isGreaterThan(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isGreaterThan:", objc.BOOL, .{_object});
    }

    pub fn isNotEqualTo(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isNotEqualTo:", objc.BOOL, .{_object});
    }

    pub fn doesContain(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "doesContain:", objc.BOOL, .{_object});
    }

    pub fn isLike(_self: *@This(), _object: ?*foundation.String) objc.BOOL {
        return objc.msgSend(_self, "isLike:", objc.BOOL, .{_object});
    }

    pub fn isCaseInsensitiveLike(_self: *@This(), _object: ?*foundation.String) objc.BOOL {
        return objc.msgSend(_self, "isCaseInsensitiveLike:", objc.BOOL, .{_object});
    }

    pub fn scriptingIsEqualTo(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "scriptingIsEqualTo:", objc.BOOL, .{_object});
    }

    pub fn scriptingIsLessThanOrEqualTo(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "scriptingIsLessThanOrEqualTo:", objc.BOOL, .{_object});
    }

    pub fn scriptingIsLessThan(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "scriptingIsLessThan:", objc.BOOL, .{_object});
    }

    pub fn scriptingIsGreaterThanOrEqualTo(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "scriptingIsGreaterThanOrEqualTo:", objc.BOOL, .{_object});
    }

    pub fn scriptingIsGreaterThan(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "scriptingIsGreaterThan:", objc.BOOL, .{_object});
    }

    pub fn scriptingBeginsWith(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "scriptingBeginsWith:", objc.BOOL, .{_object});
    }

    pub fn scriptingEndsWith(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "scriptingEndsWith:", objc.BOOL, .{_object});
    }

    pub fn scriptingContains(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "scriptingContains:", objc.BOOL, .{_object});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*foundation.Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*foundation.Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn supportsSecureCoding() objc.BOOL {
        return objc.msgSend(Internal.class(), "supportsSecureCoding", objc.BOOL, .{});
    }

    pub fn effect() *@This() {
        return objc.msgSend(Internal.class(), "effect", *@This(), .{});
    }

    pub fn scaleUpEffect() *@This() {
        return objc.msgSend(Internal.class(), "scaleUpEffect", *@This(), .{});
    }

    pub fn scaleDownEffect() *@This() {
        return objc.msgSend(Internal.class(), "scaleDownEffect", *@This(), .{});
    }

    pub fn effectWithByLayer(_self: *@This()) *@This() {
        return objc.msgSend(_self, "effectWithByLayer", *@This(), .{});
    }

    pub fn effectWithWholeSymbol(_self: *@This()) *@This() {
        return objc.msgSend(_self, "effectWithWholeSymbol", *@This(), .{});
    }
};

/// https://developer.apple.com/documentation/Symbols/NSSymbolAppearEffect?language=objc
pub const SymbolAppearEffect = opaque {
    pub const Internal = objc.ExternClass("NSSymbolAppearEffect", @This(), SymbolEffect, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "description", ?*foundation.String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "debugDescription", ?*foundation.String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*foundation.Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*foundation.MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*foundation.MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*foundation.MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*foundation.MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn version() objc.NSInteger {
        return objc.msgSend(Internal.class(), "version", objc.NSInteger, .{});
    }

    pub fn setVersion(_aVersion: objc.NSInteger) void {
        return objc.msgSend(Internal.class(), "setVersion:", void, .{_aVersion});
    }

    pub fn replacementObjectForCoder(_self: *@This(), _coder: ?*foundation.Coder) ?objc.Id {
        return objc.msgSend(_self, "replacementObjectForCoder:", ?objc.Id, .{_coder});
    }

    pub fn awakeAfterUsingCoder(_self: *@This(), _coder: ?*foundation.Coder) ?objc.Id {
        return objc.msgSend(_self, "awakeAfterUsingCoder:", ?objc.Id, .{_coder});
    }

    pub fn classForCoder(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "classForCoder", objc.Class, .{});
    }

    pub fn poseAsClass(_aClass: objc.Class) void {
        return objc.msgSend(Internal.class(), "poseAsClass:", void, .{_aClass});
    }

    pub fn autoContentAccessingProxy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "autoContentAccessingProxy", ?objc.Id, .{});
    }

    pub fn attemptRecoveryFromErrorOptionIndexDelegateDidRecoverSelectorContextInfo(
        _self: *@This(),
        _error: ?*foundation.Error,
        _recoveryOptionIndex: objc.NSUInteger,
        _delegate: ?objc.Id,
        _didRecoverSelector: objc.Selector,
        _contextInfo: ?*anyopaque,
    ) void {
        return objc.msgSend(_self, "attemptRecoveryFromError:optionIndex:delegate:didRecoverSelector:contextInfo:", void, .{
            _error,
            _recoveryOptionIndex,
            _delegate,
            _didRecoverSelector,
            _contextInfo,
        });
    }

    pub fn attemptRecoveryFromErrorOptionIndex(_self: *@This(), _error: ?*foundation.Error, _recoveryOptionIndex: objc.NSUInteger) objc.BOOL {
        return objc.msgSend(_self, "attemptRecoveryFromError:optionIndex:", objc.BOOL, .{ _error, _recoveryOptionIndex });
    }

    pub fn performSelectorWithObjectAfterDelayInModes(
        _self: *@This(),
        _aSelector: objc.Selector,
        _anArgument: ?objc.Id,
        _delay: foundation.TimeInterval,
        _modes: ?*anyopaque,
    ) void {
        return objc.msgSend(_self, "performSelector:withObject:afterDelay:inModes:", void, .{
            _aSelector,
            _anArgument,
            _delay,
            _modes,
        });
    }

    pub fn performSelectorWithObjectAfterDelay(_self: *@This(), _aSelector: objc.Selector, _anArgument: ?objc.Id, _delay: foundation.TimeInterval) void {
        return objc.msgSend(_self, "performSelector:withObject:afterDelay:", void, .{ _aSelector, _anArgument, _delay });
    }

    pub fn cancelPreviousPerformRequestsWithTargetSelectorObject(_aTarget: ?objc.Id, _aSelector: objc.Selector, _anArgument: ?objc.Id) void {
        return objc.msgSend(Internal.class(), "cancelPreviousPerformRequestsWithTarget:selector:object:", void, .{ _aTarget, _aSelector, _anArgument });
    }

    pub fn cancelPreviousPerformRequestsWithTarget(_aTarget: ?objc.Id) void {
        return objc.msgSend(Internal.class(), "cancelPreviousPerformRequestsWithTarget:", void, .{_aTarget});
    }

    pub fn urlResourceDataDidBecomeAvailable(_self: *@This(), _sender: ?*foundation.URL, _newBytes: ?*foundation.Data) void {
        return objc.msgSend(_self, "URL:resourceDataDidBecomeAvailable:", void, .{ _sender, _newBytes });
    }

    pub fn urlResourceDidFinishLoading(_self: *@This(), _sender: ?*foundation.URL) void {
        return objc.msgSend(_self, "URLResourceDidFinishLoading:", void, .{_sender});
    }

    pub fn urlResourceDidCancelLoading(_self: *@This(), _sender: ?*foundation.URL) void {
        return objc.msgSend(_self, "URLResourceDidCancelLoading:", void, .{_sender});
    }

    pub fn urlResourceDidFailLoadingWithReason(_self: *@This(), _sender: ?*foundation.URL, _reason: ?*foundation.String) void {
        return objc.msgSend(_self, "URL:resourceDidFailLoadingWithReason:", void, .{ _sender, _reason });
    }

    pub fn fileManagerShouldProceedAfterError(_self: *@This(), _fm: ?*foundation.FileManager, _errorInfo: ?*foundation.Dictionary) objc.BOOL {
        return objc.msgSend(_self, "fileManager:shouldProceedAfterError:", objc.BOOL, .{ _fm, _errorInfo });
    }

    pub fn fileManagerWillProcessPath(_self: *@This(), _fm: ?*foundation.FileManager, _path: ?*foundation.String) void {
        return objc.msgSend(_self, "fileManager:willProcessPath:", void, .{ _fm, _path });
    }

    pub fn valueForKey(_self: *@This(), _key: ?*foundation.String) ?objc.Id {
        return objc.msgSend(_self, "valueForKey:", ?objc.Id, .{_key});
    }

    pub fn setValueForKey(_self: *@This(), _value: ?objc.Id, _key: ?*foundation.String) void {
        return objc.msgSend(_self, "setValue:forKey:", void, .{ _value, _key });
    }

    pub fn validateValueForKeyError(_self: *@This(), _ioValue: ?*?objc.Id, _inKey: ?*foundation.String, _outError: ?*?*foundation.Error) objc.BOOL {
        return objc.msgSend(_self, "validateValue:forKey:error:", objc.BOOL, .{ _ioValue, _inKey, _outError });
    }

    pub fn mutableArrayValueForKey(_self: *@This(), _key: ?*foundation.String) ?*foundation.MutableArray {
        return objc.msgSend(_self, "mutableArrayValueForKey:", ?*foundation.MutableArray, .{_key});
    }

    pub fn mutableOrderedSetValueForKey(_self: *@This(), _key: ?*foundation.String) ?*foundation.MutableOrderedSet {
        return objc.msgSend(_self, "mutableOrderedSetValueForKey:", ?*foundation.MutableOrderedSet, .{_key});
    }

    pub fn mutableSetValueForKey(_self: *@This(), _key: ?*foundation.String) ?*foundation.MutableSet {
        return objc.msgSend(_self, "mutableSetValueForKey:", ?*foundation.MutableSet, .{_key});
    }

    pub fn valueForKeyPath(_self: *@This(), _keyPath: ?*foundation.String) ?objc.Id {
        return objc.msgSend(_self, "valueForKeyPath:", ?objc.Id, .{_keyPath});
    }

    pub fn setValueForKeyPath(_self: *@This(), _value: ?objc.Id, _keyPath: ?*foundation.String) void {
        return objc.msgSend(_self, "setValue:forKeyPath:", void, .{ _value, _keyPath });
    }

    pub fn validateValueForKeyPathError(_self: *@This(), _ioValue: ?*?objc.Id, _inKeyPath: ?*foundation.String, _outError: ?*?*foundation.Error) objc.BOOL {
        return objc.msgSend(_self, "validateValue:forKeyPath:error:", objc.BOOL, .{ _ioValue, _inKeyPath, _outError });
    }

    pub fn mutableArrayValueForKeyPath(_self: *@This(), _keyPath: ?*foundation.String) ?*foundation.MutableArray {
        return objc.msgSend(_self, "mutableArrayValueForKeyPath:", ?*foundation.MutableArray, .{_keyPath});
    }

    pub fn mutableOrderedSetValueForKeyPath(_self: *@This(), _keyPath: ?*foundation.String) ?*foundation.MutableOrderedSet {
        return objc.msgSend(_self, "mutableOrderedSetValueForKeyPath:", ?*foundation.MutableOrderedSet, .{_keyPath});
    }

    pub fn mutableSetValueForKeyPath(_self: *@This(), _keyPath: ?*foundation.String) ?*foundation.MutableSet {
        return objc.msgSend(_self, "mutableSetValueForKeyPath:", ?*foundation.MutableSet, .{_keyPath});
    }

    pub fn valueForUndefinedKey(_self: *@This(), _key: ?*foundation.String) ?objc.Id {
        return objc.msgSend(_self, "valueForUndefinedKey:", ?objc.Id, .{_key});
    }

    pub fn setValueForUndefinedKey(_self: *@This(), _value: ?objc.Id, _key: ?*foundation.String) void {
        return objc.msgSend(_self, "setValue:forUndefinedKey:", void, .{ _value, _key });
    }

    pub fn setNilValueForKey(_self: *@This(), _key: ?*foundation.String) void {
        return objc.msgSend(_self, "setNilValueForKey:", void, .{_key});
    }

    pub fn dictionaryWithValuesForKeys(_self: *@This(), _keys: ?*anyopaque) ?*anyopaque {
        return objc.msgSend(_self, "dictionaryWithValuesForKeys:", ?*anyopaque, .{_keys});
    }

    pub fn setValuesForKeysWithDictionary(_self: *@This(), _keyedValues: ?*anyopaque) void {
        return objc.msgSend(_self, "setValuesForKeysWithDictionary:", void, .{_keyedValues});
    }

    pub fn accessInstanceVariablesDirectly() objc.BOOL {
        return objc.msgSend(Internal.class(), "accessInstanceVariablesDirectly", objc.BOOL, .{});
    }

    pub fn useStoredAccessor() objc.BOOL {
        return objc.msgSend(Internal.class(), "useStoredAccessor", objc.BOOL, .{});
    }

    pub fn storedValueForKey(_self: *@This(), _key: ?*foundation.String) ?objc.Id {
        return objc.msgSend(_self, "storedValueForKey:", ?objc.Id, .{_key});
    }

    pub fn takeStoredValueForKey(_self: *@This(), _value: ?objc.Id, _key: ?*foundation.String) void {
        return objc.msgSend(_self, "takeStoredValue:forKey:", void, .{ _value, _key });
    }

    pub fn takeValueForKey(_self: *@This(), _value: ?objc.Id, _key: ?*foundation.String) void {
        return objc.msgSend(_self, "takeValue:forKey:", void, .{ _value, _key });
    }

    pub fn takeValueForKeyPath(_self: *@This(), _value: ?objc.Id, _keyPath: ?*foundation.String) void {
        return objc.msgSend(_self, "takeValue:forKeyPath:", void, .{ _value, _keyPath });
    }

    pub fn handleQueryWithUnboundKey(_self: *@This(), _key: ?*foundation.String) ?objc.Id {
        return objc.msgSend(_self, "handleQueryWithUnboundKey:", ?objc.Id, .{_key});
    }

    pub fn handleTakeValueForUnboundKey(_self: *@This(), _value: ?objc.Id, _key: ?*foundation.String) void {
        return objc.msgSend(_self, "handleTakeValue:forUnboundKey:", void, .{ _value, _key });
    }

    pub fn unableToSetNilForKey(_self: *@This(), _key: ?*foundation.String) void {
        return objc.msgSend(_self, "unableToSetNilForKey:", void, .{_key});
    }

    pub fn valuesForKeys(_self: *@This(), _keys: ?*foundation.Array) ?*foundation.Dictionary {
        return objc.msgSend(_self, "valuesForKeys:", ?*foundation.Dictionary, .{_keys});
    }

    pub fn takeValuesFromDictionary(_self: *@This(), _properties: ?*foundation.Dictionary) void {
        return objc.msgSend(_self, "takeValuesFromDictionary:", void, .{_properties});
    }

    pub fn observeValueForKeyPathOfObjectChangeContext(
        _self: *@This(),
        _keyPath: ?*foundation.String,
        _object: ?objc.Id,
        _change: ?*anyopaque,
        _context: ?*anyopaque,
    ) void {
        return objc.msgSend(_self, "observeValueForKeyPath:ofObject:change:context:", void, .{
            _keyPath,
            _object,
            _change,
            _context,
        });
    }

    pub fn addObserverForKeyPathOptionsContext(
        _self: *@This(),
        _observer: ?*objc.NSObject,
        _keyPath: ?*foundation.String,
        _options: foundation.KeyValueObservingOptions,
        _context: ?*anyopaque,
    ) void {
        return objc.msgSend(_self, "addObserver:forKeyPath:options:context:", void, .{
            _observer,
            _keyPath,
            _options,
            _context,
        });
    }

    pub fn removeObserverForKeyPathContext(_self: *@This(), _observer: ?*objc.NSObject, _keyPath: ?*foundation.String, _context: ?*anyopaque) void {
        return objc.msgSend(_self, "removeObserver:forKeyPath:context:", void, .{ _observer, _keyPath, _context });
    }

    pub fn removeObserverForKeyPath(_self: *@This(), _observer: ?*objc.NSObject, _keyPath: ?*foundation.String) void {
        return objc.msgSend(_self, "removeObserver:forKeyPath:", void, .{ _observer, _keyPath });
    }

    pub fn willChangeValueForKey(_self: *@This(), _key: ?*foundation.String) void {
        return objc.msgSend(_self, "willChangeValueForKey:", void, .{_key});
    }

    pub fn didChangeValueForKey(_self: *@This(), _key: ?*foundation.String) void {
        return objc.msgSend(_self, "didChangeValueForKey:", void, .{_key});
    }

    pub fn willChangeValuesAtIndexesForKey(_self: *@This(), _changeKind: foundation.KeyValueChange, _indexes: ?*foundation.IndexSet, _key: ?*foundation.String) void {
        return objc.msgSend(_self, "willChange:valuesAtIndexes:forKey:", void, .{ _changeKind, _indexes, _key });
    }

    pub fn didChangeValuesAtIndexesForKey(_self: *@This(), _changeKind: foundation.KeyValueChange, _indexes: ?*foundation.IndexSet, _key: ?*foundation.String) void {
        return objc.msgSend(_self, "didChange:valuesAtIndexes:forKey:", void, .{ _changeKind, _indexes, _key });
    }

    pub fn willChangeValueForKeyWithSetMutationUsingObjects(_self: *@This(), _key: ?*foundation.String, _mutationKind: foundation.KeyValueSetMutationKind, _objects: ?*foundation.Set) void {
        return objc.msgSend(_self, "willChangeValueForKey:withSetMutation:usingObjects:", void, .{ _key, _mutationKind, _objects });
    }

    pub fn didChangeValueForKeyWithSetMutationUsingObjects(_self: *@This(), _key: ?*foundation.String, _mutationKind: foundation.KeyValueSetMutationKind, _objects: ?*foundation.Set) void {
        return objc.msgSend(_self, "didChangeValueForKey:withSetMutation:usingObjects:", void, .{ _key, _mutationKind, _objects });
    }

    pub fn keyPathsForValuesAffectingValueForKey(_key: ?*foundation.String) ?*anyopaque {
        return objc.msgSend(Internal.class(), "keyPathsForValuesAffectingValueForKey:", ?*anyopaque, .{_key});
    }

    pub fn automaticallyNotifiesObserversForKey(_key: ?*foundation.String) objc.BOOL {
        return objc.msgSend(Internal.class(), "automaticallyNotifiesObserversForKey:", objc.BOOL, .{_key});
    }

    pub fn observationInfo(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "observationInfo", ?*anyopaque, .{});
    }

    pub fn setObservationInfo(_self: *@This(), _observationInfo: ?*anyopaque) void {
        return objc.msgSend(_self, "setObservationInfo:", void, .{_observationInfo});
    }

    pub fn setKeysTriggerChangeNotificationsForDependentKey(_keys: ?*foundation.Array, _dependentKey: ?*foundation.String) void {
        return objc.msgSend(Internal.class(), "setKeys:triggerChangeNotificationsForDependentKey:", void, .{ _keys, _dependentKey });
    }

    pub fn setSharedObservers(_self: *@This(), _sharedObservers: ?*foundation.KeyValueSharedObserversSnapshot) void {
        return objc.msgSend(_self, "setSharedObservers:", void, .{_sharedObservers});
    }

    pub fn replacementObjectForKeyedArchiver(_self: *@This(), _archiver: ?*foundation.KeyedArchiver) ?objc.Id {
        return objc.msgSend(_self, "replacementObjectForKeyedArchiver:", ?objc.Id, .{_archiver});
    }

    pub fn classFallbacksForKeyedArchiver() ?*anyopaque {
        return objc.msgSend(Internal.class(), "classFallbacksForKeyedArchiver", ?*anyopaque, .{});
    }

    pub fn classForKeyedArchiver(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "classForKeyedArchiver", objc.Class, .{});
    }

    pub fn classForKeyedUnarchiver() objc.Class {
        return objc.msgSend(Internal.class(), "classForKeyedUnarchiver", objc.Class, .{});
    }

    pub fn performSelectorOnMainThreadWithObjectWaitUntilDoneModes(
        _self: *@This(),
        _aSelector: objc.Selector,
        _arg: ?objc.Id,
        _wait: objc.BOOL,
        _array: ?*anyopaque,
    ) void {
        return objc.msgSend(_self, "performSelectorOnMainThread:withObject:waitUntilDone:modes:", void, .{
            _aSelector,
            _arg,
            _wait,
            _array,
        });
    }

    pub fn performSelectorOnMainThreadWithObjectWaitUntilDone(_self: *@This(), _aSelector: objc.Selector, _arg: ?objc.Id, _wait: objc.BOOL) void {
        return objc.msgSend(_self, "performSelectorOnMainThread:withObject:waitUntilDone:", void, .{ _aSelector, _arg, _wait });
    }

    pub fn performSelectorOnThreadWithObjectWaitUntilDoneModes(
        _self: *@This(),
        _aSelector: objc.Selector,
        _thr: ?*foundation.Thread,
        _arg: ?objc.Id,
        _wait: objc.BOOL,
        _array: ?*anyopaque,
    ) void {
        return objc.msgSend(_self, "performSelector:onThread:withObject:waitUntilDone:modes:", void, .{
            _aSelector,
            _thr,
            _arg,
            _wait,
            _array,
        });
    }

    pub fn performSelectorOnThreadWithObjectWaitUntilDone(
        _self: *@This(),
        _aSelector: objc.Selector,
        _thr: ?*foundation.Thread,
        _arg: ?objc.Id,
        _wait: objc.BOOL,
    ) void {
        return objc.msgSend(_self, "performSelector:onThread:withObject:waitUntilDone:", void, .{
            _aSelector,
            _thr,
            _arg,
            _wait,
        });
    }

    pub fn performSelectorInBackgroundWithObject(_self: *@This(), _aSelector: objc.Selector, _arg: ?objc.Id) void {
        return objc.msgSend(_self, "performSelectorInBackground:withObject:", void, .{ _aSelector, _arg });
    }

    pub fn replacementObjectForArchiver(_self: *@This(), _archiver: ?*foundation.Archiver) ?objc.Id {
        return objc.msgSend(_self, "replacementObjectForArchiver:", ?objc.Id, .{_archiver});
    }

    pub fn classForArchiver(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "classForArchiver", objc.Class, .{});
    }

    pub fn replacementObjectForPortCoder(_self: *@This(), _coder: ?*foundation.PortCoder) ?objc.Id {
        return objc.msgSend(_self, "replacementObjectForPortCoder:", ?objc.Id, .{_coder});
    }

    pub fn classForPortCoder(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "classForPortCoder", objc.Class, .{});
    }

    pub fn inverseForRelationshipKey(_self: *@This(), _relationshipKey: ?*foundation.String) ?*foundation.String {
        return objc.msgSend(_self, "inverseForRelationshipKey:", ?*foundation.String, .{_relationshipKey});
    }

    pub fn classDescription(_self: *@This()) ?*foundation.ClassDescription {
        return objc.msgSend(_self, "classDescription", ?*foundation.ClassDescription, .{});
    }

    pub fn attributeKeys(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "attributeKeys", ?*anyopaque, .{});
    }

    pub fn toOneRelationshipKeys(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "toOneRelationshipKeys", ?*anyopaque, .{});
    }

    pub fn toManyRelationshipKeys(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "toManyRelationshipKeys", ?*anyopaque, .{});
    }

    pub fn scriptingValueForSpecifier(_self: *@This(), _objectSpecifier: ?*foundation.ScriptObjectSpecifier) ?objc.Id {
        return objc.msgSend(_self, "scriptingValueForSpecifier:", ?objc.Id, .{_objectSpecifier});
    }

    pub fn copyScriptingValueForKeyWithProperties(_self: *@This(), _value: ?objc.Id, _key: ?*foundation.String, _properties: ?*anyopaque) ?objc.Id {
        return objc.msgSend(_self, "copyScriptingValue:forKey:withProperties:", ?objc.Id, .{ _value, _key, _properties });
    }

    pub fn newScriptingObjectOfClassForValueForKeyWithContentsValueProperties(
        _self: *@This(),
        _objectClass: objc.Class,
        _key: ?*foundation.String,
        _contentsValue: ?objc.Id,
        _properties: ?*anyopaque,
    ) ?objc.Id {
        return objc.msgSend(_self, "newScriptingObjectOfClass:forValueForKey:withContentsValue:properties:", ?objc.Id, .{
            _objectClass,
            _key,
            _contentsValue,
            _properties,
        });
    }

    pub fn scriptingProperties(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "scriptingProperties", ?*anyopaque, .{});
    }

    pub fn setScriptingProperties(_self: *@This(), _scriptingProperties: ?*anyopaque) void {
        return objc.msgSend(_self, "setScriptingProperties:", void, .{_scriptingProperties});
    }

    pub fn classCode(_self: *@This()) objc.FourCharCode {
        return objc.msgSend(_self, "classCode", objc.FourCharCode, .{});
    }

    pub fn className(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "className", ?*foundation.String, .{});
    }

    pub fn valueAtIndexInPropertyWithKey(_self: *@This(), _index: objc.NSUInteger, _key: ?*foundation.String) ?objc.Id {
        return objc.msgSend(_self, "valueAtIndex:inPropertyWithKey:", ?objc.Id, .{ _index, _key });
    }

    pub fn valueWithNameInPropertyWithKey(_self: *@This(), _name: ?*foundation.String, _key: ?*foundation.String) ?objc.Id {
        return objc.msgSend(_self, "valueWithName:inPropertyWithKey:", ?objc.Id, .{ _name, _key });
    }

    pub fn valueWithUniqueIDInPropertyWithKey(_self: *@This(), _uniqueID: ?objc.Id, _key: ?*foundation.String) ?objc.Id {
        return objc.msgSend(_self, "valueWithUniqueID:inPropertyWithKey:", ?objc.Id, .{ _uniqueID, _key });
    }

    pub fn insertValueAtIndexInPropertyWithKey(_self: *@This(), _value: ?objc.Id, _index: objc.NSUInteger, _key: ?*foundation.String) void {
        return objc.msgSend(_self, "insertValue:atIndex:inPropertyWithKey:", void, .{ _value, _index, _key });
    }

    pub fn removeValueAtIndexFromPropertyWithKey(_self: *@This(), _index: objc.NSUInteger, _key: ?*foundation.String) void {
        return objc.msgSend(_self, "removeValueAtIndex:fromPropertyWithKey:", void, .{ _index, _key });
    }

    pub fn replaceValueAtIndexInPropertyWithKeyWithValue(_self: *@This(), _index: objc.NSUInteger, _key: ?*foundation.String, _value: ?objc.Id) void {
        return objc.msgSend(_self, "replaceValueAtIndex:inPropertyWithKey:withValue:", void, .{ _index, _key, _value });
    }

    pub fn insertValueInPropertyWithKey(_self: *@This(), _value: ?objc.Id, _key: ?*foundation.String) void {
        return objc.msgSend(_self, "insertValue:inPropertyWithKey:", void, .{ _value, _key });
    }

    pub fn coerceValueForKey(_self: *@This(), _value: ?objc.Id, _key: ?*foundation.String) ?objc.Id {
        return objc.msgSend(_self, "coerceValue:forKey:", ?objc.Id, .{ _value, _key });
    }

    pub fn indicesOfObjectsByEvaluatingObjectSpecifier(_self: *@This(), _specifier: ?*foundation.ScriptObjectSpecifier) ?*anyopaque {
        return objc.msgSend(_self, "indicesOfObjectsByEvaluatingObjectSpecifier:", ?*anyopaque, .{_specifier});
    }

    pub fn objectSpecifier(_self: *@This()) ?*foundation.ScriptObjectSpecifier {
        return objc.msgSend(_self, "objectSpecifier", ?*foundation.ScriptObjectSpecifier, .{});
    }

    pub fn isEqualTo(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqualTo:", objc.BOOL, .{_object});
    }

    pub fn isLessThanOrEqualTo(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isLessThanOrEqualTo:", objc.BOOL, .{_object});
    }

    pub fn isLessThan(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isLessThan:", objc.BOOL, .{_object});
    }

    pub fn isGreaterThanOrEqualTo(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isGreaterThanOrEqualTo:", objc.BOOL, .{_object});
    }

    pub fn isGreaterThan(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isGreaterThan:", objc.BOOL, .{_object});
    }

    pub fn isNotEqualTo(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isNotEqualTo:", objc.BOOL, .{_object});
    }

    pub fn doesContain(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "doesContain:", objc.BOOL, .{_object});
    }

    pub fn isLike(_self: *@This(), _object: ?*foundation.String) objc.BOOL {
        return objc.msgSend(_self, "isLike:", objc.BOOL, .{_object});
    }

    pub fn isCaseInsensitiveLike(_self: *@This(), _object: ?*foundation.String) objc.BOOL {
        return objc.msgSend(_self, "isCaseInsensitiveLike:", objc.BOOL, .{_object});
    }

    pub fn scriptingIsEqualTo(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "scriptingIsEqualTo:", objc.BOOL, .{_object});
    }

    pub fn scriptingIsLessThanOrEqualTo(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "scriptingIsLessThanOrEqualTo:", objc.BOOL, .{_object});
    }

    pub fn scriptingIsLessThan(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "scriptingIsLessThan:", objc.BOOL, .{_object});
    }

    pub fn scriptingIsGreaterThanOrEqualTo(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "scriptingIsGreaterThanOrEqualTo:", objc.BOOL, .{_object});
    }

    pub fn scriptingIsGreaterThan(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "scriptingIsGreaterThan:", objc.BOOL, .{_object});
    }

    pub fn scriptingBeginsWith(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "scriptingBeginsWith:", objc.BOOL, .{_object});
    }

    pub fn scriptingEndsWith(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "scriptingEndsWith:", objc.BOOL, .{_object});
    }

    pub fn scriptingContains(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "scriptingContains:", objc.BOOL, .{_object});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*foundation.Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*foundation.Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn supportsSecureCoding() objc.BOOL {
        return objc.msgSend(Internal.class(), "supportsSecureCoding", objc.BOOL, .{});
    }

    pub fn effect() *@This() {
        return objc.msgSend(Internal.class(), "effect", *@This(), .{});
    }

    pub fn appearUpEffect() *@This() {
        return objc.msgSend(Internal.class(), "appearUpEffect", *@This(), .{});
    }

    pub fn appearDownEffect() *@This() {
        return objc.msgSend(Internal.class(), "appearDownEffect", *@This(), .{});
    }

    pub fn effectWithByLayer(_self: *@This()) *@This() {
        return objc.msgSend(_self, "effectWithByLayer", *@This(), .{});
    }

    pub fn effectWithWholeSymbol(_self: *@This()) *@This() {
        return objc.msgSend(_self, "effectWithWholeSymbol", *@This(), .{});
    }
};

/// https://developer.apple.com/documentation/Symbols/NSSymbolDisappearEffect?language=objc
pub const SymbolDisappearEffect = opaque {
    pub const Internal = objc.ExternClass("NSSymbolDisappearEffect", @This(), SymbolEffect, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "description", ?*foundation.String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "debugDescription", ?*foundation.String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*foundation.Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*foundation.MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*foundation.MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*foundation.MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*foundation.MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn version() objc.NSInteger {
        return objc.msgSend(Internal.class(), "version", objc.NSInteger, .{});
    }

    pub fn setVersion(_aVersion: objc.NSInteger) void {
        return objc.msgSend(Internal.class(), "setVersion:", void, .{_aVersion});
    }

    pub fn replacementObjectForCoder(_self: *@This(), _coder: ?*foundation.Coder) ?objc.Id {
        return objc.msgSend(_self, "replacementObjectForCoder:", ?objc.Id, .{_coder});
    }

    pub fn awakeAfterUsingCoder(_self: *@This(), _coder: ?*foundation.Coder) ?objc.Id {
        return objc.msgSend(_self, "awakeAfterUsingCoder:", ?objc.Id, .{_coder});
    }

    pub fn classForCoder(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "classForCoder", objc.Class, .{});
    }

    pub fn poseAsClass(_aClass: objc.Class) void {
        return objc.msgSend(Internal.class(), "poseAsClass:", void, .{_aClass});
    }

    pub fn autoContentAccessingProxy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "autoContentAccessingProxy", ?objc.Id, .{});
    }

    pub fn attemptRecoveryFromErrorOptionIndexDelegateDidRecoverSelectorContextInfo(
        _self: *@This(),
        _error: ?*foundation.Error,
        _recoveryOptionIndex: objc.NSUInteger,
        _delegate: ?objc.Id,
        _didRecoverSelector: objc.Selector,
        _contextInfo: ?*anyopaque,
    ) void {
        return objc.msgSend(_self, "attemptRecoveryFromError:optionIndex:delegate:didRecoverSelector:contextInfo:", void, .{
            _error,
            _recoveryOptionIndex,
            _delegate,
            _didRecoverSelector,
            _contextInfo,
        });
    }

    pub fn attemptRecoveryFromErrorOptionIndex(_self: *@This(), _error: ?*foundation.Error, _recoveryOptionIndex: objc.NSUInteger) objc.BOOL {
        return objc.msgSend(_self, "attemptRecoveryFromError:optionIndex:", objc.BOOL, .{ _error, _recoveryOptionIndex });
    }

    pub fn performSelectorWithObjectAfterDelayInModes(
        _self: *@This(),
        _aSelector: objc.Selector,
        _anArgument: ?objc.Id,
        _delay: foundation.TimeInterval,
        _modes: ?*anyopaque,
    ) void {
        return objc.msgSend(_self, "performSelector:withObject:afterDelay:inModes:", void, .{
            _aSelector,
            _anArgument,
            _delay,
            _modes,
        });
    }

    pub fn performSelectorWithObjectAfterDelay(_self: *@This(), _aSelector: objc.Selector, _anArgument: ?objc.Id, _delay: foundation.TimeInterval) void {
        return objc.msgSend(_self, "performSelector:withObject:afterDelay:", void, .{ _aSelector, _anArgument, _delay });
    }

    pub fn cancelPreviousPerformRequestsWithTargetSelectorObject(_aTarget: ?objc.Id, _aSelector: objc.Selector, _anArgument: ?objc.Id) void {
        return objc.msgSend(Internal.class(), "cancelPreviousPerformRequestsWithTarget:selector:object:", void, .{ _aTarget, _aSelector, _anArgument });
    }

    pub fn cancelPreviousPerformRequestsWithTarget(_aTarget: ?objc.Id) void {
        return objc.msgSend(Internal.class(), "cancelPreviousPerformRequestsWithTarget:", void, .{_aTarget});
    }

    pub fn urlResourceDataDidBecomeAvailable(_self: *@This(), _sender: ?*foundation.URL, _newBytes: ?*foundation.Data) void {
        return objc.msgSend(_self, "URL:resourceDataDidBecomeAvailable:", void, .{ _sender, _newBytes });
    }

    pub fn urlResourceDidFinishLoading(_self: *@This(), _sender: ?*foundation.URL) void {
        return objc.msgSend(_self, "URLResourceDidFinishLoading:", void, .{_sender});
    }

    pub fn urlResourceDidCancelLoading(_self: *@This(), _sender: ?*foundation.URL) void {
        return objc.msgSend(_self, "URLResourceDidCancelLoading:", void, .{_sender});
    }

    pub fn urlResourceDidFailLoadingWithReason(_self: *@This(), _sender: ?*foundation.URL, _reason: ?*foundation.String) void {
        return objc.msgSend(_self, "URL:resourceDidFailLoadingWithReason:", void, .{ _sender, _reason });
    }

    pub fn fileManagerShouldProceedAfterError(_self: *@This(), _fm: ?*foundation.FileManager, _errorInfo: ?*foundation.Dictionary) objc.BOOL {
        return objc.msgSend(_self, "fileManager:shouldProceedAfterError:", objc.BOOL, .{ _fm, _errorInfo });
    }

    pub fn fileManagerWillProcessPath(_self: *@This(), _fm: ?*foundation.FileManager, _path: ?*foundation.String) void {
        return objc.msgSend(_self, "fileManager:willProcessPath:", void, .{ _fm, _path });
    }

    pub fn valueForKey(_self: *@This(), _key: ?*foundation.String) ?objc.Id {
        return objc.msgSend(_self, "valueForKey:", ?objc.Id, .{_key});
    }

    pub fn setValueForKey(_self: *@This(), _value: ?objc.Id, _key: ?*foundation.String) void {
        return objc.msgSend(_self, "setValue:forKey:", void, .{ _value, _key });
    }

    pub fn validateValueForKeyError(_self: *@This(), _ioValue: ?*?objc.Id, _inKey: ?*foundation.String, _outError: ?*?*foundation.Error) objc.BOOL {
        return objc.msgSend(_self, "validateValue:forKey:error:", objc.BOOL, .{ _ioValue, _inKey, _outError });
    }

    pub fn mutableArrayValueForKey(_self: *@This(), _key: ?*foundation.String) ?*foundation.MutableArray {
        return objc.msgSend(_self, "mutableArrayValueForKey:", ?*foundation.MutableArray, .{_key});
    }

    pub fn mutableOrderedSetValueForKey(_self: *@This(), _key: ?*foundation.String) ?*foundation.MutableOrderedSet {
        return objc.msgSend(_self, "mutableOrderedSetValueForKey:", ?*foundation.MutableOrderedSet, .{_key});
    }

    pub fn mutableSetValueForKey(_self: *@This(), _key: ?*foundation.String) ?*foundation.MutableSet {
        return objc.msgSend(_self, "mutableSetValueForKey:", ?*foundation.MutableSet, .{_key});
    }

    pub fn valueForKeyPath(_self: *@This(), _keyPath: ?*foundation.String) ?objc.Id {
        return objc.msgSend(_self, "valueForKeyPath:", ?objc.Id, .{_keyPath});
    }

    pub fn setValueForKeyPath(_self: *@This(), _value: ?objc.Id, _keyPath: ?*foundation.String) void {
        return objc.msgSend(_self, "setValue:forKeyPath:", void, .{ _value, _keyPath });
    }

    pub fn validateValueForKeyPathError(_self: *@This(), _ioValue: ?*?objc.Id, _inKeyPath: ?*foundation.String, _outError: ?*?*foundation.Error) objc.BOOL {
        return objc.msgSend(_self, "validateValue:forKeyPath:error:", objc.BOOL, .{ _ioValue, _inKeyPath, _outError });
    }

    pub fn mutableArrayValueForKeyPath(_self: *@This(), _keyPath: ?*foundation.String) ?*foundation.MutableArray {
        return objc.msgSend(_self, "mutableArrayValueForKeyPath:", ?*foundation.MutableArray, .{_keyPath});
    }

    pub fn mutableOrderedSetValueForKeyPath(_self: *@This(), _keyPath: ?*foundation.String) ?*foundation.MutableOrderedSet {
        return objc.msgSend(_self, "mutableOrderedSetValueForKeyPath:", ?*foundation.MutableOrderedSet, .{_keyPath});
    }

    pub fn mutableSetValueForKeyPath(_self: *@This(), _keyPath: ?*foundation.String) ?*foundation.MutableSet {
        return objc.msgSend(_self, "mutableSetValueForKeyPath:", ?*foundation.MutableSet, .{_keyPath});
    }

    pub fn valueForUndefinedKey(_self: *@This(), _key: ?*foundation.String) ?objc.Id {
        return objc.msgSend(_self, "valueForUndefinedKey:", ?objc.Id, .{_key});
    }

    pub fn setValueForUndefinedKey(_self: *@This(), _value: ?objc.Id, _key: ?*foundation.String) void {
        return objc.msgSend(_self, "setValue:forUndefinedKey:", void, .{ _value, _key });
    }

    pub fn setNilValueForKey(_self: *@This(), _key: ?*foundation.String) void {
        return objc.msgSend(_self, "setNilValueForKey:", void, .{_key});
    }

    pub fn dictionaryWithValuesForKeys(_self: *@This(), _keys: ?*anyopaque) ?*anyopaque {
        return objc.msgSend(_self, "dictionaryWithValuesForKeys:", ?*anyopaque, .{_keys});
    }

    pub fn setValuesForKeysWithDictionary(_self: *@This(), _keyedValues: ?*anyopaque) void {
        return objc.msgSend(_self, "setValuesForKeysWithDictionary:", void, .{_keyedValues});
    }

    pub fn accessInstanceVariablesDirectly() objc.BOOL {
        return objc.msgSend(Internal.class(), "accessInstanceVariablesDirectly", objc.BOOL, .{});
    }

    pub fn useStoredAccessor() objc.BOOL {
        return objc.msgSend(Internal.class(), "useStoredAccessor", objc.BOOL, .{});
    }

    pub fn storedValueForKey(_self: *@This(), _key: ?*foundation.String) ?objc.Id {
        return objc.msgSend(_self, "storedValueForKey:", ?objc.Id, .{_key});
    }

    pub fn takeStoredValueForKey(_self: *@This(), _value: ?objc.Id, _key: ?*foundation.String) void {
        return objc.msgSend(_self, "takeStoredValue:forKey:", void, .{ _value, _key });
    }

    pub fn takeValueForKey(_self: *@This(), _value: ?objc.Id, _key: ?*foundation.String) void {
        return objc.msgSend(_self, "takeValue:forKey:", void, .{ _value, _key });
    }

    pub fn takeValueForKeyPath(_self: *@This(), _value: ?objc.Id, _keyPath: ?*foundation.String) void {
        return objc.msgSend(_self, "takeValue:forKeyPath:", void, .{ _value, _keyPath });
    }

    pub fn handleQueryWithUnboundKey(_self: *@This(), _key: ?*foundation.String) ?objc.Id {
        return objc.msgSend(_self, "handleQueryWithUnboundKey:", ?objc.Id, .{_key});
    }

    pub fn handleTakeValueForUnboundKey(_self: *@This(), _value: ?objc.Id, _key: ?*foundation.String) void {
        return objc.msgSend(_self, "handleTakeValue:forUnboundKey:", void, .{ _value, _key });
    }

    pub fn unableToSetNilForKey(_self: *@This(), _key: ?*foundation.String) void {
        return objc.msgSend(_self, "unableToSetNilForKey:", void, .{_key});
    }

    pub fn valuesForKeys(_self: *@This(), _keys: ?*foundation.Array) ?*foundation.Dictionary {
        return objc.msgSend(_self, "valuesForKeys:", ?*foundation.Dictionary, .{_keys});
    }

    pub fn takeValuesFromDictionary(_self: *@This(), _properties: ?*foundation.Dictionary) void {
        return objc.msgSend(_self, "takeValuesFromDictionary:", void, .{_properties});
    }

    pub fn observeValueForKeyPathOfObjectChangeContext(
        _self: *@This(),
        _keyPath: ?*foundation.String,
        _object: ?objc.Id,
        _change: ?*anyopaque,
        _context: ?*anyopaque,
    ) void {
        return objc.msgSend(_self, "observeValueForKeyPath:ofObject:change:context:", void, .{
            _keyPath,
            _object,
            _change,
            _context,
        });
    }

    pub fn addObserverForKeyPathOptionsContext(
        _self: *@This(),
        _observer: ?*objc.NSObject,
        _keyPath: ?*foundation.String,
        _options: foundation.KeyValueObservingOptions,
        _context: ?*anyopaque,
    ) void {
        return objc.msgSend(_self, "addObserver:forKeyPath:options:context:", void, .{
            _observer,
            _keyPath,
            _options,
            _context,
        });
    }

    pub fn removeObserverForKeyPathContext(_self: *@This(), _observer: ?*objc.NSObject, _keyPath: ?*foundation.String, _context: ?*anyopaque) void {
        return objc.msgSend(_self, "removeObserver:forKeyPath:context:", void, .{ _observer, _keyPath, _context });
    }

    pub fn removeObserverForKeyPath(_self: *@This(), _observer: ?*objc.NSObject, _keyPath: ?*foundation.String) void {
        return objc.msgSend(_self, "removeObserver:forKeyPath:", void, .{ _observer, _keyPath });
    }

    pub fn willChangeValueForKey(_self: *@This(), _key: ?*foundation.String) void {
        return objc.msgSend(_self, "willChangeValueForKey:", void, .{_key});
    }

    pub fn didChangeValueForKey(_self: *@This(), _key: ?*foundation.String) void {
        return objc.msgSend(_self, "didChangeValueForKey:", void, .{_key});
    }

    pub fn willChangeValuesAtIndexesForKey(_self: *@This(), _changeKind: foundation.KeyValueChange, _indexes: ?*foundation.IndexSet, _key: ?*foundation.String) void {
        return objc.msgSend(_self, "willChange:valuesAtIndexes:forKey:", void, .{ _changeKind, _indexes, _key });
    }

    pub fn didChangeValuesAtIndexesForKey(_self: *@This(), _changeKind: foundation.KeyValueChange, _indexes: ?*foundation.IndexSet, _key: ?*foundation.String) void {
        return objc.msgSend(_self, "didChange:valuesAtIndexes:forKey:", void, .{ _changeKind, _indexes, _key });
    }

    pub fn willChangeValueForKeyWithSetMutationUsingObjects(_self: *@This(), _key: ?*foundation.String, _mutationKind: foundation.KeyValueSetMutationKind, _objects: ?*foundation.Set) void {
        return objc.msgSend(_self, "willChangeValueForKey:withSetMutation:usingObjects:", void, .{ _key, _mutationKind, _objects });
    }

    pub fn didChangeValueForKeyWithSetMutationUsingObjects(_self: *@This(), _key: ?*foundation.String, _mutationKind: foundation.KeyValueSetMutationKind, _objects: ?*foundation.Set) void {
        return objc.msgSend(_self, "didChangeValueForKey:withSetMutation:usingObjects:", void, .{ _key, _mutationKind, _objects });
    }

    pub fn keyPathsForValuesAffectingValueForKey(_key: ?*foundation.String) ?*anyopaque {
        return objc.msgSend(Internal.class(), "keyPathsForValuesAffectingValueForKey:", ?*anyopaque, .{_key});
    }

    pub fn automaticallyNotifiesObserversForKey(_key: ?*foundation.String) objc.BOOL {
        return objc.msgSend(Internal.class(), "automaticallyNotifiesObserversForKey:", objc.BOOL, .{_key});
    }

    pub fn observationInfo(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "observationInfo", ?*anyopaque, .{});
    }

    pub fn setObservationInfo(_self: *@This(), _observationInfo: ?*anyopaque) void {
        return objc.msgSend(_self, "setObservationInfo:", void, .{_observationInfo});
    }

    pub fn setKeysTriggerChangeNotificationsForDependentKey(_keys: ?*foundation.Array, _dependentKey: ?*foundation.String) void {
        return objc.msgSend(Internal.class(), "setKeys:triggerChangeNotificationsForDependentKey:", void, .{ _keys, _dependentKey });
    }

    pub fn setSharedObservers(_self: *@This(), _sharedObservers: ?*foundation.KeyValueSharedObserversSnapshot) void {
        return objc.msgSend(_self, "setSharedObservers:", void, .{_sharedObservers});
    }

    pub fn replacementObjectForKeyedArchiver(_self: *@This(), _archiver: ?*foundation.KeyedArchiver) ?objc.Id {
        return objc.msgSend(_self, "replacementObjectForKeyedArchiver:", ?objc.Id, .{_archiver});
    }

    pub fn classFallbacksForKeyedArchiver() ?*anyopaque {
        return objc.msgSend(Internal.class(), "classFallbacksForKeyedArchiver", ?*anyopaque, .{});
    }

    pub fn classForKeyedArchiver(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "classForKeyedArchiver", objc.Class, .{});
    }

    pub fn classForKeyedUnarchiver() objc.Class {
        return objc.msgSend(Internal.class(), "classForKeyedUnarchiver", objc.Class, .{});
    }

    pub fn performSelectorOnMainThreadWithObjectWaitUntilDoneModes(
        _self: *@This(),
        _aSelector: objc.Selector,
        _arg: ?objc.Id,
        _wait: objc.BOOL,
        _array: ?*anyopaque,
    ) void {
        return objc.msgSend(_self, "performSelectorOnMainThread:withObject:waitUntilDone:modes:", void, .{
            _aSelector,
            _arg,
            _wait,
            _array,
        });
    }

    pub fn performSelectorOnMainThreadWithObjectWaitUntilDone(_self: *@This(), _aSelector: objc.Selector, _arg: ?objc.Id, _wait: objc.BOOL) void {
        return objc.msgSend(_self, "performSelectorOnMainThread:withObject:waitUntilDone:", void, .{ _aSelector, _arg, _wait });
    }

    pub fn performSelectorOnThreadWithObjectWaitUntilDoneModes(
        _self: *@This(),
        _aSelector: objc.Selector,
        _thr: ?*foundation.Thread,
        _arg: ?objc.Id,
        _wait: objc.BOOL,
        _array: ?*anyopaque,
    ) void {
        return objc.msgSend(_self, "performSelector:onThread:withObject:waitUntilDone:modes:", void, .{
            _aSelector,
            _thr,
            _arg,
            _wait,
            _array,
        });
    }

    pub fn performSelectorOnThreadWithObjectWaitUntilDone(
        _self: *@This(),
        _aSelector: objc.Selector,
        _thr: ?*foundation.Thread,
        _arg: ?objc.Id,
        _wait: objc.BOOL,
    ) void {
        return objc.msgSend(_self, "performSelector:onThread:withObject:waitUntilDone:", void, .{
            _aSelector,
            _thr,
            _arg,
            _wait,
        });
    }

    pub fn performSelectorInBackgroundWithObject(_self: *@This(), _aSelector: objc.Selector, _arg: ?objc.Id) void {
        return objc.msgSend(_self, "performSelectorInBackground:withObject:", void, .{ _aSelector, _arg });
    }

    pub fn replacementObjectForArchiver(_self: *@This(), _archiver: ?*foundation.Archiver) ?objc.Id {
        return objc.msgSend(_self, "replacementObjectForArchiver:", ?objc.Id, .{_archiver});
    }

    pub fn classForArchiver(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "classForArchiver", objc.Class, .{});
    }

    pub fn replacementObjectForPortCoder(_self: *@This(), _coder: ?*foundation.PortCoder) ?objc.Id {
        return objc.msgSend(_self, "replacementObjectForPortCoder:", ?objc.Id, .{_coder});
    }

    pub fn classForPortCoder(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "classForPortCoder", objc.Class, .{});
    }

    pub fn inverseForRelationshipKey(_self: *@This(), _relationshipKey: ?*foundation.String) ?*foundation.String {
        return objc.msgSend(_self, "inverseForRelationshipKey:", ?*foundation.String, .{_relationshipKey});
    }

    pub fn classDescription(_self: *@This()) ?*foundation.ClassDescription {
        return objc.msgSend(_self, "classDescription", ?*foundation.ClassDescription, .{});
    }

    pub fn attributeKeys(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "attributeKeys", ?*anyopaque, .{});
    }

    pub fn toOneRelationshipKeys(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "toOneRelationshipKeys", ?*anyopaque, .{});
    }

    pub fn toManyRelationshipKeys(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "toManyRelationshipKeys", ?*anyopaque, .{});
    }

    pub fn scriptingValueForSpecifier(_self: *@This(), _objectSpecifier: ?*foundation.ScriptObjectSpecifier) ?objc.Id {
        return objc.msgSend(_self, "scriptingValueForSpecifier:", ?objc.Id, .{_objectSpecifier});
    }

    pub fn copyScriptingValueForKeyWithProperties(_self: *@This(), _value: ?objc.Id, _key: ?*foundation.String, _properties: ?*anyopaque) ?objc.Id {
        return objc.msgSend(_self, "copyScriptingValue:forKey:withProperties:", ?objc.Id, .{ _value, _key, _properties });
    }

    pub fn newScriptingObjectOfClassForValueForKeyWithContentsValueProperties(
        _self: *@This(),
        _objectClass: objc.Class,
        _key: ?*foundation.String,
        _contentsValue: ?objc.Id,
        _properties: ?*anyopaque,
    ) ?objc.Id {
        return objc.msgSend(_self, "newScriptingObjectOfClass:forValueForKey:withContentsValue:properties:", ?objc.Id, .{
            _objectClass,
            _key,
            _contentsValue,
            _properties,
        });
    }

    pub fn scriptingProperties(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "scriptingProperties", ?*anyopaque, .{});
    }

    pub fn setScriptingProperties(_self: *@This(), _scriptingProperties: ?*anyopaque) void {
        return objc.msgSend(_self, "setScriptingProperties:", void, .{_scriptingProperties});
    }

    pub fn classCode(_self: *@This()) objc.FourCharCode {
        return objc.msgSend(_self, "classCode", objc.FourCharCode, .{});
    }

    pub fn className(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "className", ?*foundation.String, .{});
    }

    pub fn valueAtIndexInPropertyWithKey(_self: *@This(), _index: objc.NSUInteger, _key: ?*foundation.String) ?objc.Id {
        return objc.msgSend(_self, "valueAtIndex:inPropertyWithKey:", ?objc.Id, .{ _index, _key });
    }

    pub fn valueWithNameInPropertyWithKey(_self: *@This(), _name: ?*foundation.String, _key: ?*foundation.String) ?objc.Id {
        return objc.msgSend(_self, "valueWithName:inPropertyWithKey:", ?objc.Id, .{ _name, _key });
    }

    pub fn valueWithUniqueIDInPropertyWithKey(_self: *@This(), _uniqueID: ?objc.Id, _key: ?*foundation.String) ?objc.Id {
        return objc.msgSend(_self, "valueWithUniqueID:inPropertyWithKey:", ?objc.Id, .{ _uniqueID, _key });
    }

    pub fn insertValueAtIndexInPropertyWithKey(_self: *@This(), _value: ?objc.Id, _index: objc.NSUInteger, _key: ?*foundation.String) void {
        return objc.msgSend(_self, "insertValue:atIndex:inPropertyWithKey:", void, .{ _value, _index, _key });
    }

    pub fn removeValueAtIndexFromPropertyWithKey(_self: *@This(), _index: objc.NSUInteger, _key: ?*foundation.String) void {
        return objc.msgSend(_self, "removeValueAtIndex:fromPropertyWithKey:", void, .{ _index, _key });
    }

    pub fn replaceValueAtIndexInPropertyWithKeyWithValue(_self: *@This(), _index: objc.NSUInteger, _key: ?*foundation.String, _value: ?objc.Id) void {
        return objc.msgSend(_self, "replaceValueAtIndex:inPropertyWithKey:withValue:", void, .{ _index, _key, _value });
    }

    pub fn insertValueInPropertyWithKey(_self: *@This(), _value: ?objc.Id, _key: ?*foundation.String) void {
        return objc.msgSend(_self, "insertValue:inPropertyWithKey:", void, .{ _value, _key });
    }

    pub fn coerceValueForKey(_self: *@This(), _value: ?objc.Id, _key: ?*foundation.String) ?objc.Id {
        return objc.msgSend(_self, "coerceValue:forKey:", ?objc.Id, .{ _value, _key });
    }

    pub fn indicesOfObjectsByEvaluatingObjectSpecifier(_self: *@This(), _specifier: ?*foundation.ScriptObjectSpecifier) ?*anyopaque {
        return objc.msgSend(_self, "indicesOfObjectsByEvaluatingObjectSpecifier:", ?*anyopaque, .{_specifier});
    }

    pub fn objectSpecifier(_self: *@This()) ?*foundation.ScriptObjectSpecifier {
        return objc.msgSend(_self, "objectSpecifier", ?*foundation.ScriptObjectSpecifier, .{});
    }

    pub fn isEqualTo(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqualTo:", objc.BOOL, .{_object});
    }

    pub fn isLessThanOrEqualTo(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isLessThanOrEqualTo:", objc.BOOL, .{_object});
    }

    pub fn isLessThan(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isLessThan:", objc.BOOL, .{_object});
    }

    pub fn isGreaterThanOrEqualTo(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isGreaterThanOrEqualTo:", objc.BOOL, .{_object});
    }

    pub fn isGreaterThan(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isGreaterThan:", objc.BOOL, .{_object});
    }

    pub fn isNotEqualTo(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isNotEqualTo:", objc.BOOL, .{_object});
    }

    pub fn doesContain(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "doesContain:", objc.BOOL, .{_object});
    }

    pub fn isLike(_self: *@This(), _object: ?*foundation.String) objc.BOOL {
        return objc.msgSend(_self, "isLike:", objc.BOOL, .{_object});
    }

    pub fn isCaseInsensitiveLike(_self: *@This(), _object: ?*foundation.String) objc.BOOL {
        return objc.msgSend(_self, "isCaseInsensitiveLike:", objc.BOOL, .{_object});
    }

    pub fn scriptingIsEqualTo(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "scriptingIsEqualTo:", objc.BOOL, .{_object});
    }

    pub fn scriptingIsLessThanOrEqualTo(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "scriptingIsLessThanOrEqualTo:", objc.BOOL, .{_object});
    }

    pub fn scriptingIsLessThan(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "scriptingIsLessThan:", objc.BOOL, .{_object});
    }

    pub fn scriptingIsGreaterThanOrEqualTo(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "scriptingIsGreaterThanOrEqualTo:", objc.BOOL, .{_object});
    }

    pub fn scriptingIsGreaterThan(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "scriptingIsGreaterThan:", objc.BOOL, .{_object});
    }

    pub fn scriptingBeginsWith(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "scriptingBeginsWith:", objc.BOOL, .{_object});
    }

    pub fn scriptingEndsWith(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "scriptingEndsWith:", objc.BOOL, .{_object});
    }

    pub fn scriptingContains(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "scriptingContains:", objc.BOOL, .{_object});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*foundation.Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*foundation.Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn supportsSecureCoding() objc.BOOL {
        return objc.msgSend(Internal.class(), "supportsSecureCoding", objc.BOOL, .{});
    }

    pub fn effect() *@This() {
        return objc.msgSend(Internal.class(), "effect", *@This(), .{});
    }

    pub fn disappearUpEffect() *@This() {
        return objc.msgSend(Internal.class(), "disappearUpEffect", *@This(), .{});
    }

    pub fn disappearDownEffect() *@This() {
        return objc.msgSend(Internal.class(), "disappearDownEffect", *@This(), .{});
    }

    pub fn effectWithByLayer(_self: *@This()) *@This() {
        return objc.msgSend(_self, "effectWithByLayer", *@This(), .{});
    }

    pub fn effectWithWholeSymbol(_self: *@This()) *@This() {
        return objc.msgSend(_self, "effectWithWholeSymbol", *@This(), .{});
    }
};

/// https://developer.apple.com/documentation/Symbols/NSSymbolWiggleEffect?language=objc
pub const SymbolWiggleEffect = opaque {
    pub const Internal = objc.ExternClass("NSSymbolWiggleEffect", @This(), SymbolEffect, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "description", ?*foundation.String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "debugDescription", ?*foundation.String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*foundation.Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*foundation.MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*foundation.MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*foundation.MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*foundation.MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn version() objc.NSInteger {
        return objc.msgSend(Internal.class(), "version", objc.NSInteger, .{});
    }

    pub fn setVersion(_aVersion: objc.NSInteger) void {
        return objc.msgSend(Internal.class(), "setVersion:", void, .{_aVersion});
    }

    pub fn replacementObjectForCoder(_self: *@This(), _coder: ?*foundation.Coder) ?objc.Id {
        return objc.msgSend(_self, "replacementObjectForCoder:", ?objc.Id, .{_coder});
    }

    pub fn awakeAfterUsingCoder(_self: *@This(), _coder: ?*foundation.Coder) ?objc.Id {
        return objc.msgSend(_self, "awakeAfterUsingCoder:", ?objc.Id, .{_coder});
    }

    pub fn classForCoder(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "classForCoder", objc.Class, .{});
    }

    pub fn poseAsClass(_aClass: objc.Class) void {
        return objc.msgSend(Internal.class(), "poseAsClass:", void, .{_aClass});
    }

    pub fn autoContentAccessingProxy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "autoContentAccessingProxy", ?objc.Id, .{});
    }

    pub fn attemptRecoveryFromErrorOptionIndexDelegateDidRecoverSelectorContextInfo(
        _self: *@This(),
        _error: ?*foundation.Error,
        _recoveryOptionIndex: objc.NSUInteger,
        _delegate: ?objc.Id,
        _didRecoverSelector: objc.Selector,
        _contextInfo: ?*anyopaque,
    ) void {
        return objc.msgSend(_self, "attemptRecoveryFromError:optionIndex:delegate:didRecoverSelector:contextInfo:", void, .{
            _error,
            _recoveryOptionIndex,
            _delegate,
            _didRecoverSelector,
            _contextInfo,
        });
    }

    pub fn attemptRecoveryFromErrorOptionIndex(_self: *@This(), _error: ?*foundation.Error, _recoveryOptionIndex: objc.NSUInteger) objc.BOOL {
        return objc.msgSend(_self, "attemptRecoveryFromError:optionIndex:", objc.BOOL, .{ _error, _recoveryOptionIndex });
    }

    pub fn performSelectorWithObjectAfterDelayInModes(
        _self: *@This(),
        _aSelector: objc.Selector,
        _anArgument: ?objc.Id,
        _delay: foundation.TimeInterval,
        _modes: ?*anyopaque,
    ) void {
        return objc.msgSend(_self, "performSelector:withObject:afterDelay:inModes:", void, .{
            _aSelector,
            _anArgument,
            _delay,
            _modes,
        });
    }

    pub fn performSelectorWithObjectAfterDelay(_self: *@This(), _aSelector: objc.Selector, _anArgument: ?objc.Id, _delay: foundation.TimeInterval) void {
        return objc.msgSend(_self, "performSelector:withObject:afterDelay:", void, .{ _aSelector, _anArgument, _delay });
    }

    pub fn cancelPreviousPerformRequestsWithTargetSelectorObject(_aTarget: ?objc.Id, _aSelector: objc.Selector, _anArgument: ?objc.Id) void {
        return objc.msgSend(Internal.class(), "cancelPreviousPerformRequestsWithTarget:selector:object:", void, .{ _aTarget, _aSelector, _anArgument });
    }

    pub fn cancelPreviousPerformRequestsWithTarget(_aTarget: ?objc.Id) void {
        return objc.msgSend(Internal.class(), "cancelPreviousPerformRequestsWithTarget:", void, .{_aTarget});
    }

    pub fn urlResourceDataDidBecomeAvailable(_self: *@This(), _sender: ?*foundation.URL, _newBytes: ?*foundation.Data) void {
        return objc.msgSend(_self, "URL:resourceDataDidBecomeAvailable:", void, .{ _sender, _newBytes });
    }

    pub fn urlResourceDidFinishLoading(_self: *@This(), _sender: ?*foundation.URL) void {
        return objc.msgSend(_self, "URLResourceDidFinishLoading:", void, .{_sender});
    }

    pub fn urlResourceDidCancelLoading(_self: *@This(), _sender: ?*foundation.URL) void {
        return objc.msgSend(_self, "URLResourceDidCancelLoading:", void, .{_sender});
    }

    pub fn urlResourceDidFailLoadingWithReason(_self: *@This(), _sender: ?*foundation.URL, _reason: ?*foundation.String) void {
        return objc.msgSend(_self, "URL:resourceDidFailLoadingWithReason:", void, .{ _sender, _reason });
    }

    pub fn fileManagerShouldProceedAfterError(_self: *@This(), _fm: ?*foundation.FileManager, _errorInfo: ?*foundation.Dictionary) objc.BOOL {
        return objc.msgSend(_self, "fileManager:shouldProceedAfterError:", objc.BOOL, .{ _fm, _errorInfo });
    }

    pub fn fileManagerWillProcessPath(_self: *@This(), _fm: ?*foundation.FileManager, _path: ?*foundation.String) void {
        return objc.msgSend(_self, "fileManager:willProcessPath:", void, .{ _fm, _path });
    }

    pub fn valueForKey(_self: *@This(), _key: ?*foundation.String) ?objc.Id {
        return objc.msgSend(_self, "valueForKey:", ?objc.Id, .{_key});
    }

    pub fn setValueForKey(_self: *@This(), _value: ?objc.Id, _key: ?*foundation.String) void {
        return objc.msgSend(_self, "setValue:forKey:", void, .{ _value, _key });
    }

    pub fn validateValueForKeyError(_self: *@This(), _ioValue: ?*?objc.Id, _inKey: ?*foundation.String, _outError: ?*?*foundation.Error) objc.BOOL {
        return objc.msgSend(_self, "validateValue:forKey:error:", objc.BOOL, .{ _ioValue, _inKey, _outError });
    }

    pub fn mutableArrayValueForKey(_self: *@This(), _key: ?*foundation.String) ?*foundation.MutableArray {
        return objc.msgSend(_self, "mutableArrayValueForKey:", ?*foundation.MutableArray, .{_key});
    }

    pub fn mutableOrderedSetValueForKey(_self: *@This(), _key: ?*foundation.String) ?*foundation.MutableOrderedSet {
        return objc.msgSend(_self, "mutableOrderedSetValueForKey:", ?*foundation.MutableOrderedSet, .{_key});
    }

    pub fn mutableSetValueForKey(_self: *@This(), _key: ?*foundation.String) ?*foundation.MutableSet {
        return objc.msgSend(_self, "mutableSetValueForKey:", ?*foundation.MutableSet, .{_key});
    }

    pub fn valueForKeyPath(_self: *@This(), _keyPath: ?*foundation.String) ?objc.Id {
        return objc.msgSend(_self, "valueForKeyPath:", ?objc.Id, .{_keyPath});
    }

    pub fn setValueForKeyPath(_self: *@This(), _value: ?objc.Id, _keyPath: ?*foundation.String) void {
        return objc.msgSend(_self, "setValue:forKeyPath:", void, .{ _value, _keyPath });
    }

    pub fn validateValueForKeyPathError(_self: *@This(), _ioValue: ?*?objc.Id, _inKeyPath: ?*foundation.String, _outError: ?*?*foundation.Error) objc.BOOL {
        return objc.msgSend(_self, "validateValue:forKeyPath:error:", objc.BOOL, .{ _ioValue, _inKeyPath, _outError });
    }

    pub fn mutableArrayValueForKeyPath(_self: *@This(), _keyPath: ?*foundation.String) ?*foundation.MutableArray {
        return objc.msgSend(_self, "mutableArrayValueForKeyPath:", ?*foundation.MutableArray, .{_keyPath});
    }

    pub fn mutableOrderedSetValueForKeyPath(_self: *@This(), _keyPath: ?*foundation.String) ?*foundation.MutableOrderedSet {
        return objc.msgSend(_self, "mutableOrderedSetValueForKeyPath:", ?*foundation.MutableOrderedSet, .{_keyPath});
    }

    pub fn mutableSetValueForKeyPath(_self: *@This(), _keyPath: ?*foundation.String) ?*foundation.MutableSet {
        return objc.msgSend(_self, "mutableSetValueForKeyPath:", ?*foundation.MutableSet, .{_keyPath});
    }

    pub fn valueForUndefinedKey(_self: *@This(), _key: ?*foundation.String) ?objc.Id {
        return objc.msgSend(_self, "valueForUndefinedKey:", ?objc.Id, .{_key});
    }

    pub fn setValueForUndefinedKey(_self: *@This(), _value: ?objc.Id, _key: ?*foundation.String) void {
        return objc.msgSend(_self, "setValue:forUndefinedKey:", void, .{ _value, _key });
    }

    pub fn setNilValueForKey(_self: *@This(), _key: ?*foundation.String) void {
        return objc.msgSend(_self, "setNilValueForKey:", void, .{_key});
    }

    pub fn dictionaryWithValuesForKeys(_self: *@This(), _keys: ?*anyopaque) ?*anyopaque {
        return objc.msgSend(_self, "dictionaryWithValuesForKeys:", ?*anyopaque, .{_keys});
    }

    pub fn setValuesForKeysWithDictionary(_self: *@This(), _keyedValues: ?*anyopaque) void {
        return objc.msgSend(_self, "setValuesForKeysWithDictionary:", void, .{_keyedValues});
    }

    pub fn accessInstanceVariablesDirectly() objc.BOOL {
        return objc.msgSend(Internal.class(), "accessInstanceVariablesDirectly", objc.BOOL, .{});
    }

    pub fn useStoredAccessor() objc.BOOL {
        return objc.msgSend(Internal.class(), "useStoredAccessor", objc.BOOL, .{});
    }

    pub fn storedValueForKey(_self: *@This(), _key: ?*foundation.String) ?objc.Id {
        return objc.msgSend(_self, "storedValueForKey:", ?objc.Id, .{_key});
    }

    pub fn takeStoredValueForKey(_self: *@This(), _value: ?objc.Id, _key: ?*foundation.String) void {
        return objc.msgSend(_self, "takeStoredValue:forKey:", void, .{ _value, _key });
    }

    pub fn takeValueForKey(_self: *@This(), _value: ?objc.Id, _key: ?*foundation.String) void {
        return objc.msgSend(_self, "takeValue:forKey:", void, .{ _value, _key });
    }

    pub fn takeValueForKeyPath(_self: *@This(), _value: ?objc.Id, _keyPath: ?*foundation.String) void {
        return objc.msgSend(_self, "takeValue:forKeyPath:", void, .{ _value, _keyPath });
    }

    pub fn handleQueryWithUnboundKey(_self: *@This(), _key: ?*foundation.String) ?objc.Id {
        return objc.msgSend(_self, "handleQueryWithUnboundKey:", ?objc.Id, .{_key});
    }

    pub fn handleTakeValueForUnboundKey(_self: *@This(), _value: ?objc.Id, _key: ?*foundation.String) void {
        return objc.msgSend(_self, "handleTakeValue:forUnboundKey:", void, .{ _value, _key });
    }

    pub fn unableToSetNilForKey(_self: *@This(), _key: ?*foundation.String) void {
        return objc.msgSend(_self, "unableToSetNilForKey:", void, .{_key});
    }

    pub fn valuesForKeys(_self: *@This(), _keys: ?*foundation.Array) ?*foundation.Dictionary {
        return objc.msgSend(_self, "valuesForKeys:", ?*foundation.Dictionary, .{_keys});
    }

    pub fn takeValuesFromDictionary(_self: *@This(), _properties: ?*foundation.Dictionary) void {
        return objc.msgSend(_self, "takeValuesFromDictionary:", void, .{_properties});
    }

    pub fn observeValueForKeyPathOfObjectChangeContext(
        _self: *@This(),
        _keyPath: ?*foundation.String,
        _object: ?objc.Id,
        _change: ?*anyopaque,
        _context: ?*anyopaque,
    ) void {
        return objc.msgSend(_self, "observeValueForKeyPath:ofObject:change:context:", void, .{
            _keyPath,
            _object,
            _change,
            _context,
        });
    }

    pub fn addObserverForKeyPathOptionsContext(
        _self: *@This(),
        _observer: ?*objc.NSObject,
        _keyPath: ?*foundation.String,
        _options: foundation.KeyValueObservingOptions,
        _context: ?*anyopaque,
    ) void {
        return objc.msgSend(_self, "addObserver:forKeyPath:options:context:", void, .{
            _observer,
            _keyPath,
            _options,
            _context,
        });
    }

    pub fn removeObserverForKeyPathContext(_self: *@This(), _observer: ?*objc.NSObject, _keyPath: ?*foundation.String, _context: ?*anyopaque) void {
        return objc.msgSend(_self, "removeObserver:forKeyPath:context:", void, .{ _observer, _keyPath, _context });
    }

    pub fn removeObserverForKeyPath(_self: *@This(), _observer: ?*objc.NSObject, _keyPath: ?*foundation.String) void {
        return objc.msgSend(_self, "removeObserver:forKeyPath:", void, .{ _observer, _keyPath });
    }

    pub fn willChangeValueForKey(_self: *@This(), _key: ?*foundation.String) void {
        return objc.msgSend(_self, "willChangeValueForKey:", void, .{_key});
    }

    pub fn didChangeValueForKey(_self: *@This(), _key: ?*foundation.String) void {
        return objc.msgSend(_self, "didChangeValueForKey:", void, .{_key});
    }

    pub fn willChangeValuesAtIndexesForKey(_self: *@This(), _changeKind: foundation.KeyValueChange, _indexes: ?*foundation.IndexSet, _key: ?*foundation.String) void {
        return objc.msgSend(_self, "willChange:valuesAtIndexes:forKey:", void, .{ _changeKind, _indexes, _key });
    }

    pub fn didChangeValuesAtIndexesForKey(_self: *@This(), _changeKind: foundation.KeyValueChange, _indexes: ?*foundation.IndexSet, _key: ?*foundation.String) void {
        return objc.msgSend(_self, "didChange:valuesAtIndexes:forKey:", void, .{ _changeKind, _indexes, _key });
    }

    pub fn willChangeValueForKeyWithSetMutationUsingObjects(_self: *@This(), _key: ?*foundation.String, _mutationKind: foundation.KeyValueSetMutationKind, _objects: ?*foundation.Set) void {
        return objc.msgSend(_self, "willChangeValueForKey:withSetMutation:usingObjects:", void, .{ _key, _mutationKind, _objects });
    }

    pub fn didChangeValueForKeyWithSetMutationUsingObjects(_self: *@This(), _key: ?*foundation.String, _mutationKind: foundation.KeyValueSetMutationKind, _objects: ?*foundation.Set) void {
        return objc.msgSend(_self, "didChangeValueForKey:withSetMutation:usingObjects:", void, .{ _key, _mutationKind, _objects });
    }

    pub fn keyPathsForValuesAffectingValueForKey(_key: ?*foundation.String) ?*anyopaque {
        return objc.msgSend(Internal.class(), "keyPathsForValuesAffectingValueForKey:", ?*anyopaque, .{_key});
    }

    pub fn automaticallyNotifiesObserversForKey(_key: ?*foundation.String) objc.BOOL {
        return objc.msgSend(Internal.class(), "automaticallyNotifiesObserversForKey:", objc.BOOL, .{_key});
    }

    pub fn observationInfo(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "observationInfo", ?*anyopaque, .{});
    }

    pub fn setObservationInfo(_self: *@This(), _observationInfo: ?*anyopaque) void {
        return objc.msgSend(_self, "setObservationInfo:", void, .{_observationInfo});
    }

    pub fn setKeysTriggerChangeNotificationsForDependentKey(_keys: ?*foundation.Array, _dependentKey: ?*foundation.String) void {
        return objc.msgSend(Internal.class(), "setKeys:triggerChangeNotificationsForDependentKey:", void, .{ _keys, _dependentKey });
    }

    pub fn setSharedObservers(_self: *@This(), _sharedObservers: ?*foundation.KeyValueSharedObserversSnapshot) void {
        return objc.msgSend(_self, "setSharedObservers:", void, .{_sharedObservers});
    }

    pub fn replacementObjectForKeyedArchiver(_self: *@This(), _archiver: ?*foundation.KeyedArchiver) ?objc.Id {
        return objc.msgSend(_self, "replacementObjectForKeyedArchiver:", ?objc.Id, .{_archiver});
    }

    pub fn classFallbacksForKeyedArchiver() ?*anyopaque {
        return objc.msgSend(Internal.class(), "classFallbacksForKeyedArchiver", ?*anyopaque, .{});
    }

    pub fn classForKeyedArchiver(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "classForKeyedArchiver", objc.Class, .{});
    }

    pub fn classForKeyedUnarchiver() objc.Class {
        return objc.msgSend(Internal.class(), "classForKeyedUnarchiver", objc.Class, .{});
    }

    pub fn performSelectorOnMainThreadWithObjectWaitUntilDoneModes(
        _self: *@This(),
        _aSelector: objc.Selector,
        _arg: ?objc.Id,
        _wait: objc.BOOL,
        _array: ?*anyopaque,
    ) void {
        return objc.msgSend(_self, "performSelectorOnMainThread:withObject:waitUntilDone:modes:", void, .{
            _aSelector,
            _arg,
            _wait,
            _array,
        });
    }

    pub fn performSelectorOnMainThreadWithObjectWaitUntilDone(_self: *@This(), _aSelector: objc.Selector, _arg: ?objc.Id, _wait: objc.BOOL) void {
        return objc.msgSend(_self, "performSelectorOnMainThread:withObject:waitUntilDone:", void, .{ _aSelector, _arg, _wait });
    }

    pub fn performSelectorOnThreadWithObjectWaitUntilDoneModes(
        _self: *@This(),
        _aSelector: objc.Selector,
        _thr: ?*foundation.Thread,
        _arg: ?objc.Id,
        _wait: objc.BOOL,
        _array: ?*anyopaque,
    ) void {
        return objc.msgSend(_self, "performSelector:onThread:withObject:waitUntilDone:modes:", void, .{
            _aSelector,
            _thr,
            _arg,
            _wait,
            _array,
        });
    }

    pub fn performSelectorOnThreadWithObjectWaitUntilDone(
        _self: *@This(),
        _aSelector: objc.Selector,
        _thr: ?*foundation.Thread,
        _arg: ?objc.Id,
        _wait: objc.BOOL,
    ) void {
        return objc.msgSend(_self, "performSelector:onThread:withObject:waitUntilDone:", void, .{
            _aSelector,
            _thr,
            _arg,
            _wait,
        });
    }

    pub fn performSelectorInBackgroundWithObject(_self: *@This(), _aSelector: objc.Selector, _arg: ?objc.Id) void {
        return objc.msgSend(_self, "performSelectorInBackground:withObject:", void, .{ _aSelector, _arg });
    }

    pub fn replacementObjectForArchiver(_self: *@This(), _archiver: ?*foundation.Archiver) ?objc.Id {
        return objc.msgSend(_self, "replacementObjectForArchiver:", ?objc.Id, .{_archiver});
    }

    pub fn classForArchiver(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "classForArchiver", objc.Class, .{});
    }

    pub fn replacementObjectForPortCoder(_self: *@This(), _coder: ?*foundation.PortCoder) ?objc.Id {
        return objc.msgSend(_self, "replacementObjectForPortCoder:", ?objc.Id, .{_coder});
    }

    pub fn classForPortCoder(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "classForPortCoder", objc.Class, .{});
    }

    pub fn inverseForRelationshipKey(_self: *@This(), _relationshipKey: ?*foundation.String) ?*foundation.String {
        return objc.msgSend(_self, "inverseForRelationshipKey:", ?*foundation.String, .{_relationshipKey});
    }

    pub fn classDescription(_self: *@This()) ?*foundation.ClassDescription {
        return objc.msgSend(_self, "classDescription", ?*foundation.ClassDescription, .{});
    }

    pub fn attributeKeys(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "attributeKeys", ?*anyopaque, .{});
    }

    pub fn toOneRelationshipKeys(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "toOneRelationshipKeys", ?*anyopaque, .{});
    }

    pub fn toManyRelationshipKeys(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "toManyRelationshipKeys", ?*anyopaque, .{});
    }

    pub fn scriptingValueForSpecifier(_self: *@This(), _objectSpecifier: ?*foundation.ScriptObjectSpecifier) ?objc.Id {
        return objc.msgSend(_self, "scriptingValueForSpecifier:", ?objc.Id, .{_objectSpecifier});
    }

    pub fn copyScriptingValueForKeyWithProperties(_self: *@This(), _value: ?objc.Id, _key: ?*foundation.String, _properties: ?*anyopaque) ?objc.Id {
        return objc.msgSend(_self, "copyScriptingValue:forKey:withProperties:", ?objc.Id, .{ _value, _key, _properties });
    }

    pub fn newScriptingObjectOfClassForValueForKeyWithContentsValueProperties(
        _self: *@This(),
        _objectClass: objc.Class,
        _key: ?*foundation.String,
        _contentsValue: ?objc.Id,
        _properties: ?*anyopaque,
    ) ?objc.Id {
        return objc.msgSend(_self, "newScriptingObjectOfClass:forValueForKey:withContentsValue:properties:", ?objc.Id, .{
            _objectClass,
            _key,
            _contentsValue,
            _properties,
        });
    }

    pub fn scriptingProperties(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "scriptingProperties", ?*anyopaque, .{});
    }

    pub fn setScriptingProperties(_self: *@This(), _scriptingProperties: ?*anyopaque) void {
        return objc.msgSend(_self, "setScriptingProperties:", void, .{_scriptingProperties});
    }

    pub fn classCode(_self: *@This()) objc.FourCharCode {
        return objc.msgSend(_self, "classCode", objc.FourCharCode, .{});
    }

    pub fn className(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "className", ?*foundation.String, .{});
    }

    pub fn valueAtIndexInPropertyWithKey(_self: *@This(), _index: objc.NSUInteger, _key: ?*foundation.String) ?objc.Id {
        return objc.msgSend(_self, "valueAtIndex:inPropertyWithKey:", ?objc.Id, .{ _index, _key });
    }

    pub fn valueWithNameInPropertyWithKey(_self: *@This(), _name: ?*foundation.String, _key: ?*foundation.String) ?objc.Id {
        return objc.msgSend(_self, "valueWithName:inPropertyWithKey:", ?objc.Id, .{ _name, _key });
    }

    pub fn valueWithUniqueIDInPropertyWithKey(_self: *@This(), _uniqueID: ?objc.Id, _key: ?*foundation.String) ?objc.Id {
        return objc.msgSend(_self, "valueWithUniqueID:inPropertyWithKey:", ?objc.Id, .{ _uniqueID, _key });
    }

    pub fn insertValueAtIndexInPropertyWithKey(_self: *@This(), _value: ?objc.Id, _index: objc.NSUInteger, _key: ?*foundation.String) void {
        return objc.msgSend(_self, "insertValue:atIndex:inPropertyWithKey:", void, .{ _value, _index, _key });
    }

    pub fn removeValueAtIndexFromPropertyWithKey(_self: *@This(), _index: objc.NSUInteger, _key: ?*foundation.String) void {
        return objc.msgSend(_self, "removeValueAtIndex:fromPropertyWithKey:", void, .{ _index, _key });
    }

    pub fn replaceValueAtIndexInPropertyWithKeyWithValue(_self: *@This(), _index: objc.NSUInteger, _key: ?*foundation.String, _value: ?objc.Id) void {
        return objc.msgSend(_self, "replaceValueAtIndex:inPropertyWithKey:withValue:", void, .{ _index, _key, _value });
    }

    pub fn insertValueInPropertyWithKey(_self: *@This(), _value: ?objc.Id, _key: ?*foundation.String) void {
        return objc.msgSend(_self, "insertValue:inPropertyWithKey:", void, .{ _value, _key });
    }

    pub fn coerceValueForKey(_self: *@This(), _value: ?objc.Id, _key: ?*foundation.String) ?objc.Id {
        return objc.msgSend(_self, "coerceValue:forKey:", ?objc.Id, .{ _value, _key });
    }

    pub fn indicesOfObjectsByEvaluatingObjectSpecifier(_self: *@This(), _specifier: ?*foundation.ScriptObjectSpecifier) ?*anyopaque {
        return objc.msgSend(_self, "indicesOfObjectsByEvaluatingObjectSpecifier:", ?*anyopaque, .{_specifier});
    }

    pub fn objectSpecifier(_self: *@This()) ?*foundation.ScriptObjectSpecifier {
        return objc.msgSend(_self, "objectSpecifier", ?*foundation.ScriptObjectSpecifier, .{});
    }

    pub fn isEqualTo(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqualTo:", objc.BOOL, .{_object});
    }

    pub fn isLessThanOrEqualTo(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isLessThanOrEqualTo:", objc.BOOL, .{_object});
    }

    pub fn isLessThan(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isLessThan:", objc.BOOL, .{_object});
    }

    pub fn isGreaterThanOrEqualTo(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isGreaterThanOrEqualTo:", objc.BOOL, .{_object});
    }

    pub fn isGreaterThan(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isGreaterThan:", objc.BOOL, .{_object});
    }

    pub fn isNotEqualTo(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isNotEqualTo:", objc.BOOL, .{_object});
    }

    pub fn doesContain(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "doesContain:", objc.BOOL, .{_object});
    }

    pub fn isLike(_self: *@This(), _object: ?*foundation.String) objc.BOOL {
        return objc.msgSend(_self, "isLike:", objc.BOOL, .{_object});
    }

    pub fn isCaseInsensitiveLike(_self: *@This(), _object: ?*foundation.String) objc.BOOL {
        return objc.msgSend(_self, "isCaseInsensitiveLike:", objc.BOOL, .{_object});
    }

    pub fn scriptingIsEqualTo(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "scriptingIsEqualTo:", objc.BOOL, .{_object});
    }

    pub fn scriptingIsLessThanOrEqualTo(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "scriptingIsLessThanOrEqualTo:", objc.BOOL, .{_object});
    }

    pub fn scriptingIsLessThan(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "scriptingIsLessThan:", objc.BOOL, .{_object});
    }

    pub fn scriptingIsGreaterThanOrEqualTo(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "scriptingIsGreaterThanOrEqualTo:", objc.BOOL, .{_object});
    }

    pub fn scriptingIsGreaterThan(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "scriptingIsGreaterThan:", objc.BOOL, .{_object});
    }

    pub fn scriptingBeginsWith(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "scriptingBeginsWith:", objc.BOOL, .{_object});
    }

    pub fn scriptingEndsWith(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "scriptingEndsWith:", objc.BOOL, .{_object});
    }

    pub fn scriptingContains(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "scriptingContains:", objc.BOOL, .{_object});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*foundation.Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*foundation.Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn supportsSecureCoding() objc.BOOL {
        return objc.msgSend(Internal.class(), "supportsSecureCoding", objc.BOOL, .{});
    }

    pub fn effect() *@This() {
        return objc.msgSend(Internal.class(), "effect", *@This(), .{});
    }

    pub fn wiggleClockwiseEffect() *@This() {
        return objc.msgSend(Internal.class(), "wiggleClockwiseEffect", *@This(), .{});
    }

    pub fn wiggleCounterClockwiseEffect() *@This() {
        return objc.msgSend(Internal.class(), "wiggleCounterClockwiseEffect", *@This(), .{});
    }

    pub fn wiggleLeftEffect() *@This() {
        return objc.msgSend(Internal.class(), "wiggleLeftEffect", *@This(), .{});
    }

    pub fn wiggleRightEffect() *@This() {
        return objc.msgSend(Internal.class(), "wiggleRightEffect", *@This(), .{});
    }

    pub fn wiggleUpEffect() *@This() {
        return objc.msgSend(Internal.class(), "wiggleUpEffect", *@This(), .{});
    }

    pub fn wiggleDownEffect() *@This() {
        return objc.msgSend(Internal.class(), "wiggleDownEffect", *@This(), .{});
    }

    pub fn wiggleForwardEffect() *@This() {
        return objc.msgSend(Internal.class(), "wiggleForwardEffect", *@This(), .{});
    }

    pub fn wiggleBackwardEffect() *@This() {
        return objc.msgSend(Internal.class(), "wiggleBackwardEffect", *@This(), .{});
    }

    pub fn wiggleCustomAngleEffect(_angle: f64) *@This() {
        return objc.msgSend(Internal.class(), "wiggleCustomAngleEffect:", *@This(), .{_angle});
    }

    pub fn effectWithByLayer(_self: *@This()) *@This() {
        return objc.msgSend(_self, "effectWithByLayer", *@This(), .{});
    }

    pub fn effectWithWholeSymbol(_self: *@This()) *@This() {
        return objc.msgSend(_self, "effectWithWholeSymbol", *@This(), .{});
    }
};

/// https://developer.apple.com/documentation/Symbols/NSSymbolRotateEffect?language=objc
pub const SymbolRotateEffect = opaque {
    pub const Internal = objc.ExternClass("NSSymbolRotateEffect", @This(), SymbolEffect, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "description", ?*foundation.String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "debugDescription", ?*foundation.String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*foundation.Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*foundation.MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*foundation.MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*foundation.MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*foundation.MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn version() objc.NSInteger {
        return objc.msgSend(Internal.class(), "version", objc.NSInteger, .{});
    }

    pub fn setVersion(_aVersion: objc.NSInteger) void {
        return objc.msgSend(Internal.class(), "setVersion:", void, .{_aVersion});
    }

    pub fn replacementObjectForCoder(_self: *@This(), _coder: ?*foundation.Coder) ?objc.Id {
        return objc.msgSend(_self, "replacementObjectForCoder:", ?objc.Id, .{_coder});
    }

    pub fn awakeAfterUsingCoder(_self: *@This(), _coder: ?*foundation.Coder) ?objc.Id {
        return objc.msgSend(_self, "awakeAfterUsingCoder:", ?objc.Id, .{_coder});
    }

    pub fn classForCoder(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "classForCoder", objc.Class, .{});
    }

    pub fn poseAsClass(_aClass: objc.Class) void {
        return objc.msgSend(Internal.class(), "poseAsClass:", void, .{_aClass});
    }

    pub fn autoContentAccessingProxy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "autoContentAccessingProxy", ?objc.Id, .{});
    }

    pub fn attemptRecoveryFromErrorOptionIndexDelegateDidRecoverSelectorContextInfo(
        _self: *@This(),
        _error: ?*foundation.Error,
        _recoveryOptionIndex: objc.NSUInteger,
        _delegate: ?objc.Id,
        _didRecoverSelector: objc.Selector,
        _contextInfo: ?*anyopaque,
    ) void {
        return objc.msgSend(_self, "attemptRecoveryFromError:optionIndex:delegate:didRecoverSelector:contextInfo:", void, .{
            _error,
            _recoveryOptionIndex,
            _delegate,
            _didRecoverSelector,
            _contextInfo,
        });
    }

    pub fn attemptRecoveryFromErrorOptionIndex(_self: *@This(), _error: ?*foundation.Error, _recoveryOptionIndex: objc.NSUInteger) objc.BOOL {
        return objc.msgSend(_self, "attemptRecoveryFromError:optionIndex:", objc.BOOL, .{ _error, _recoveryOptionIndex });
    }

    pub fn performSelectorWithObjectAfterDelayInModes(
        _self: *@This(),
        _aSelector: objc.Selector,
        _anArgument: ?objc.Id,
        _delay: foundation.TimeInterval,
        _modes: ?*anyopaque,
    ) void {
        return objc.msgSend(_self, "performSelector:withObject:afterDelay:inModes:", void, .{
            _aSelector,
            _anArgument,
            _delay,
            _modes,
        });
    }

    pub fn performSelectorWithObjectAfterDelay(_self: *@This(), _aSelector: objc.Selector, _anArgument: ?objc.Id, _delay: foundation.TimeInterval) void {
        return objc.msgSend(_self, "performSelector:withObject:afterDelay:", void, .{ _aSelector, _anArgument, _delay });
    }

    pub fn cancelPreviousPerformRequestsWithTargetSelectorObject(_aTarget: ?objc.Id, _aSelector: objc.Selector, _anArgument: ?objc.Id) void {
        return objc.msgSend(Internal.class(), "cancelPreviousPerformRequestsWithTarget:selector:object:", void, .{ _aTarget, _aSelector, _anArgument });
    }

    pub fn cancelPreviousPerformRequestsWithTarget(_aTarget: ?objc.Id) void {
        return objc.msgSend(Internal.class(), "cancelPreviousPerformRequestsWithTarget:", void, .{_aTarget});
    }

    pub fn urlResourceDataDidBecomeAvailable(_self: *@This(), _sender: ?*foundation.URL, _newBytes: ?*foundation.Data) void {
        return objc.msgSend(_self, "URL:resourceDataDidBecomeAvailable:", void, .{ _sender, _newBytes });
    }

    pub fn urlResourceDidFinishLoading(_self: *@This(), _sender: ?*foundation.URL) void {
        return objc.msgSend(_self, "URLResourceDidFinishLoading:", void, .{_sender});
    }

    pub fn urlResourceDidCancelLoading(_self: *@This(), _sender: ?*foundation.URL) void {
        return objc.msgSend(_self, "URLResourceDidCancelLoading:", void, .{_sender});
    }

    pub fn urlResourceDidFailLoadingWithReason(_self: *@This(), _sender: ?*foundation.URL, _reason: ?*foundation.String) void {
        return objc.msgSend(_self, "URL:resourceDidFailLoadingWithReason:", void, .{ _sender, _reason });
    }

    pub fn fileManagerShouldProceedAfterError(_self: *@This(), _fm: ?*foundation.FileManager, _errorInfo: ?*foundation.Dictionary) objc.BOOL {
        return objc.msgSend(_self, "fileManager:shouldProceedAfterError:", objc.BOOL, .{ _fm, _errorInfo });
    }

    pub fn fileManagerWillProcessPath(_self: *@This(), _fm: ?*foundation.FileManager, _path: ?*foundation.String) void {
        return objc.msgSend(_self, "fileManager:willProcessPath:", void, .{ _fm, _path });
    }

    pub fn valueForKey(_self: *@This(), _key: ?*foundation.String) ?objc.Id {
        return objc.msgSend(_self, "valueForKey:", ?objc.Id, .{_key});
    }

    pub fn setValueForKey(_self: *@This(), _value: ?objc.Id, _key: ?*foundation.String) void {
        return objc.msgSend(_self, "setValue:forKey:", void, .{ _value, _key });
    }

    pub fn validateValueForKeyError(_self: *@This(), _ioValue: ?*?objc.Id, _inKey: ?*foundation.String, _outError: ?*?*foundation.Error) objc.BOOL {
        return objc.msgSend(_self, "validateValue:forKey:error:", objc.BOOL, .{ _ioValue, _inKey, _outError });
    }

    pub fn mutableArrayValueForKey(_self: *@This(), _key: ?*foundation.String) ?*foundation.MutableArray {
        return objc.msgSend(_self, "mutableArrayValueForKey:", ?*foundation.MutableArray, .{_key});
    }

    pub fn mutableOrderedSetValueForKey(_self: *@This(), _key: ?*foundation.String) ?*foundation.MutableOrderedSet {
        return objc.msgSend(_self, "mutableOrderedSetValueForKey:", ?*foundation.MutableOrderedSet, .{_key});
    }

    pub fn mutableSetValueForKey(_self: *@This(), _key: ?*foundation.String) ?*foundation.MutableSet {
        return objc.msgSend(_self, "mutableSetValueForKey:", ?*foundation.MutableSet, .{_key});
    }

    pub fn valueForKeyPath(_self: *@This(), _keyPath: ?*foundation.String) ?objc.Id {
        return objc.msgSend(_self, "valueForKeyPath:", ?objc.Id, .{_keyPath});
    }

    pub fn setValueForKeyPath(_self: *@This(), _value: ?objc.Id, _keyPath: ?*foundation.String) void {
        return objc.msgSend(_self, "setValue:forKeyPath:", void, .{ _value, _keyPath });
    }

    pub fn validateValueForKeyPathError(_self: *@This(), _ioValue: ?*?objc.Id, _inKeyPath: ?*foundation.String, _outError: ?*?*foundation.Error) objc.BOOL {
        return objc.msgSend(_self, "validateValue:forKeyPath:error:", objc.BOOL, .{ _ioValue, _inKeyPath, _outError });
    }

    pub fn mutableArrayValueForKeyPath(_self: *@This(), _keyPath: ?*foundation.String) ?*foundation.MutableArray {
        return objc.msgSend(_self, "mutableArrayValueForKeyPath:", ?*foundation.MutableArray, .{_keyPath});
    }

    pub fn mutableOrderedSetValueForKeyPath(_self: *@This(), _keyPath: ?*foundation.String) ?*foundation.MutableOrderedSet {
        return objc.msgSend(_self, "mutableOrderedSetValueForKeyPath:", ?*foundation.MutableOrderedSet, .{_keyPath});
    }

    pub fn mutableSetValueForKeyPath(_self: *@This(), _keyPath: ?*foundation.String) ?*foundation.MutableSet {
        return objc.msgSend(_self, "mutableSetValueForKeyPath:", ?*foundation.MutableSet, .{_keyPath});
    }

    pub fn valueForUndefinedKey(_self: *@This(), _key: ?*foundation.String) ?objc.Id {
        return objc.msgSend(_self, "valueForUndefinedKey:", ?objc.Id, .{_key});
    }

    pub fn setValueForUndefinedKey(_self: *@This(), _value: ?objc.Id, _key: ?*foundation.String) void {
        return objc.msgSend(_self, "setValue:forUndefinedKey:", void, .{ _value, _key });
    }

    pub fn setNilValueForKey(_self: *@This(), _key: ?*foundation.String) void {
        return objc.msgSend(_self, "setNilValueForKey:", void, .{_key});
    }

    pub fn dictionaryWithValuesForKeys(_self: *@This(), _keys: ?*anyopaque) ?*anyopaque {
        return objc.msgSend(_self, "dictionaryWithValuesForKeys:", ?*anyopaque, .{_keys});
    }

    pub fn setValuesForKeysWithDictionary(_self: *@This(), _keyedValues: ?*anyopaque) void {
        return objc.msgSend(_self, "setValuesForKeysWithDictionary:", void, .{_keyedValues});
    }

    pub fn accessInstanceVariablesDirectly() objc.BOOL {
        return objc.msgSend(Internal.class(), "accessInstanceVariablesDirectly", objc.BOOL, .{});
    }

    pub fn useStoredAccessor() objc.BOOL {
        return objc.msgSend(Internal.class(), "useStoredAccessor", objc.BOOL, .{});
    }

    pub fn storedValueForKey(_self: *@This(), _key: ?*foundation.String) ?objc.Id {
        return objc.msgSend(_self, "storedValueForKey:", ?objc.Id, .{_key});
    }

    pub fn takeStoredValueForKey(_self: *@This(), _value: ?objc.Id, _key: ?*foundation.String) void {
        return objc.msgSend(_self, "takeStoredValue:forKey:", void, .{ _value, _key });
    }

    pub fn takeValueForKey(_self: *@This(), _value: ?objc.Id, _key: ?*foundation.String) void {
        return objc.msgSend(_self, "takeValue:forKey:", void, .{ _value, _key });
    }

    pub fn takeValueForKeyPath(_self: *@This(), _value: ?objc.Id, _keyPath: ?*foundation.String) void {
        return objc.msgSend(_self, "takeValue:forKeyPath:", void, .{ _value, _keyPath });
    }

    pub fn handleQueryWithUnboundKey(_self: *@This(), _key: ?*foundation.String) ?objc.Id {
        return objc.msgSend(_self, "handleQueryWithUnboundKey:", ?objc.Id, .{_key});
    }

    pub fn handleTakeValueForUnboundKey(_self: *@This(), _value: ?objc.Id, _key: ?*foundation.String) void {
        return objc.msgSend(_self, "handleTakeValue:forUnboundKey:", void, .{ _value, _key });
    }

    pub fn unableToSetNilForKey(_self: *@This(), _key: ?*foundation.String) void {
        return objc.msgSend(_self, "unableToSetNilForKey:", void, .{_key});
    }

    pub fn valuesForKeys(_self: *@This(), _keys: ?*foundation.Array) ?*foundation.Dictionary {
        return objc.msgSend(_self, "valuesForKeys:", ?*foundation.Dictionary, .{_keys});
    }

    pub fn takeValuesFromDictionary(_self: *@This(), _properties: ?*foundation.Dictionary) void {
        return objc.msgSend(_self, "takeValuesFromDictionary:", void, .{_properties});
    }

    pub fn observeValueForKeyPathOfObjectChangeContext(
        _self: *@This(),
        _keyPath: ?*foundation.String,
        _object: ?objc.Id,
        _change: ?*anyopaque,
        _context: ?*anyopaque,
    ) void {
        return objc.msgSend(_self, "observeValueForKeyPath:ofObject:change:context:", void, .{
            _keyPath,
            _object,
            _change,
            _context,
        });
    }

    pub fn addObserverForKeyPathOptionsContext(
        _self: *@This(),
        _observer: ?*objc.NSObject,
        _keyPath: ?*foundation.String,
        _options: foundation.KeyValueObservingOptions,
        _context: ?*anyopaque,
    ) void {
        return objc.msgSend(_self, "addObserver:forKeyPath:options:context:", void, .{
            _observer,
            _keyPath,
            _options,
            _context,
        });
    }

    pub fn removeObserverForKeyPathContext(_self: *@This(), _observer: ?*objc.NSObject, _keyPath: ?*foundation.String, _context: ?*anyopaque) void {
        return objc.msgSend(_self, "removeObserver:forKeyPath:context:", void, .{ _observer, _keyPath, _context });
    }

    pub fn removeObserverForKeyPath(_self: *@This(), _observer: ?*objc.NSObject, _keyPath: ?*foundation.String) void {
        return objc.msgSend(_self, "removeObserver:forKeyPath:", void, .{ _observer, _keyPath });
    }

    pub fn willChangeValueForKey(_self: *@This(), _key: ?*foundation.String) void {
        return objc.msgSend(_self, "willChangeValueForKey:", void, .{_key});
    }

    pub fn didChangeValueForKey(_self: *@This(), _key: ?*foundation.String) void {
        return objc.msgSend(_self, "didChangeValueForKey:", void, .{_key});
    }

    pub fn willChangeValuesAtIndexesForKey(_self: *@This(), _changeKind: foundation.KeyValueChange, _indexes: ?*foundation.IndexSet, _key: ?*foundation.String) void {
        return objc.msgSend(_self, "willChange:valuesAtIndexes:forKey:", void, .{ _changeKind, _indexes, _key });
    }

    pub fn didChangeValuesAtIndexesForKey(_self: *@This(), _changeKind: foundation.KeyValueChange, _indexes: ?*foundation.IndexSet, _key: ?*foundation.String) void {
        return objc.msgSend(_self, "didChange:valuesAtIndexes:forKey:", void, .{ _changeKind, _indexes, _key });
    }

    pub fn willChangeValueForKeyWithSetMutationUsingObjects(_self: *@This(), _key: ?*foundation.String, _mutationKind: foundation.KeyValueSetMutationKind, _objects: ?*foundation.Set) void {
        return objc.msgSend(_self, "willChangeValueForKey:withSetMutation:usingObjects:", void, .{ _key, _mutationKind, _objects });
    }

    pub fn didChangeValueForKeyWithSetMutationUsingObjects(_self: *@This(), _key: ?*foundation.String, _mutationKind: foundation.KeyValueSetMutationKind, _objects: ?*foundation.Set) void {
        return objc.msgSend(_self, "didChangeValueForKey:withSetMutation:usingObjects:", void, .{ _key, _mutationKind, _objects });
    }

    pub fn keyPathsForValuesAffectingValueForKey(_key: ?*foundation.String) ?*anyopaque {
        return objc.msgSend(Internal.class(), "keyPathsForValuesAffectingValueForKey:", ?*anyopaque, .{_key});
    }

    pub fn automaticallyNotifiesObserversForKey(_key: ?*foundation.String) objc.BOOL {
        return objc.msgSend(Internal.class(), "automaticallyNotifiesObserversForKey:", objc.BOOL, .{_key});
    }

    pub fn observationInfo(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "observationInfo", ?*anyopaque, .{});
    }

    pub fn setObservationInfo(_self: *@This(), _observationInfo: ?*anyopaque) void {
        return objc.msgSend(_self, "setObservationInfo:", void, .{_observationInfo});
    }

    pub fn setKeysTriggerChangeNotificationsForDependentKey(_keys: ?*foundation.Array, _dependentKey: ?*foundation.String) void {
        return objc.msgSend(Internal.class(), "setKeys:triggerChangeNotificationsForDependentKey:", void, .{ _keys, _dependentKey });
    }

    pub fn setSharedObservers(_self: *@This(), _sharedObservers: ?*foundation.KeyValueSharedObserversSnapshot) void {
        return objc.msgSend(_self, "setSharedObservers:", void, .{_sharedObservers});
    }

    pub fn replacementObjectForKeyedArchiver(_self: *@This(), _archiver: ?*foundation.KeyedArchiver) ?objc.Id {
        return objc.msgSend(_self, "replacementObjectForKeyedArchiver:", ?objc.Id, .{_archiver});
    }

    pub fn classFallbacksForKeyedArchiver() ?*anyopaque {
        return objc.msgSend(Internal.class(), "classFallbacksForKeyedArchiver", ?*anyopaque, .{});
    }

    pub fn classForKeyedArchiver(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "classForKeyedArchiver", objc.Class, .{});
    }

    pub fn classForKeyedUnarchiver() objc.Class {
        return objc.msgSend(Internal.class(), "classForKeyedUnarchiver", objc.Class, .{});
    }

    pub fn performSelectorOnMainThreadWithObjectWaitUntilDoneModes(
        _self: *@This(),
        _aSelector: objc.Selector,
        _arg: ?objc.Id,
        _wait: objc.BOOL,
        _array: ?*anyopaque,
    ) void {
        return objc.msgSend(_self, "performSelectorOnMainThread:withObject:waitUntilDone:modes:", void, .{
            _aSelector,
            _arg,
            _wait,
            _array,
        });
    }

    pub fn performSelectorOnMainThreadWithObjectWaitUntilDone(_self: *@This(), _aSelector: objc.Selector, _arg: ?objc.Id, _wait: objc.BOOL) void {
        return objc.msgSend(_self, "performSelectorOnMainThread:withObject:waitUntilDone:", void, .{ _aSelector, _arg, _wait });
    }

    pub fn performSelectorOnThreadWithObjectWaitUntilDoneModes(
        _self: *@This(),
        _aSelector: objc.Selector,
        _thr: ?*foundation.Thread,
        _arg: ?objc.Id,
        _wait: objc.BOOL,
        _array: ?*anyopaque,
    ) void {
        return objc.msgSend(_self, "performSelector:onThread:withObject:waitUntilDone:modes:", void, .{
            _aSelector,
            _thr,
            _arg,
            _wait,
            _array,
        });
    }

    pub fn performSelectorOnThreadWithObjectWaitUntilDone(
        _self: *@This(),
        _aSelector: objc.Selector,
        _thr: ?*foundation.Thread,
        _arg: ?objc.Id,
        _wait: objc.BOOL,
    ) void {
        return objc.msgSend(_self, "performSelector:onThread:withObject:waitUntilDone:", void, .{
            _aSelector,
            _thr,
            _arg,
            _wait,
        });
    }

    pub fn performSelectorInBackgroundWithObject(_self: *@This(), _aSelector: objc.Selector, _arg: ?objc.Id) void {
        return objc.msgSend(_self, "performSelectorInBackground:withObject:", void, .{ _aSelector, _arg });
    }

    pub fn replacementObjectForArchiver(_self: *@This(), _archiver: ?*foundation.Archiver) ?objc.Id {
        return objc.msgSend(_self, "replacementObjectForArchiver:", ?objc.Id, .{_archiver});
    }

    pub fn classForArchiver(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "classForArchiver", objc.Class, .{});
    }

    pub fn replacementObjectForPortCoder(_self: *@This(), _coder: ?*foundation.PortCoder) ?objc.Id {
        return objc.msgSend(_self, "replacementObjectForPortCoder:", ?objc.Id, .{_coder});
    }

    pub fn classForPortCoder(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "classForPortCoder", objc.Class, .{});
    }

    pub fn inverseForRelationshipKey(_self: *@This(), _relationshipKey: ?*foundation.String) ?*foundation.String {
        return objc.msgSend(_self, "inverseForRelationshipKey:", ?*foundation.String, .{_relationshipKey});
    }

    pub fn classDescription(_self: *@This()) ?*foundation.ClassDescription {
        return objc.msgSend(_self, "classDescription", ?*foundation.ClassDescription, .{});
    }

    pub fn attributeKeys(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "attributeKeys", ?*anyopaque, .{});
    }

    pub fn toOneRelationshipKeys(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "toOneRelationshipKeys", ?*anyopaque, .{});
    }

    pub fn toManyRelationshipKeys(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "toManyRelationshipKeys", ?*anyopaque, .{});
    }

    pub fn scriptingValueForSpecifier(_self: *@This(), _objectSpecifier: ?*foundation.ScriptObjectSpecifier) ?objc.Id {
        return objc.msgSend(_self, "scriptingValueForSpecifier:", ?objc.Id, .{_objectSpecifier});
    }

    pub fn copyScriptingValueForKeyWithProperties(_self: *@This(), _value: ?objc.Id, _key: ?*foundation.String, _properties: ?*anyopaque) ?objc.Id {
        return objc.msgSend(_self, "copyScriptingValue:forKey:withProperties:", ?objc.Id, .{ _value, _key, _properties });
    }

    pub fn newScriptingObjectOfClassForValueForKeyWithContentsValueProperties(
        _self: *@This(),
        _objectClass: objc.Class,
        _key: ?*foundation.String,
        _contentsValue: ?objc.Id,
        _properties: ?*anyopaque,
    ) ?objc.Id {
        return objc.msgSend(_self, "newScriptingObjectOfClass:forValueForKey:withContentsValue:properties:", ?objc.Id, .{
            _objectClass,
            _key,
            _contentsValue,
            _properties,
        });
    }

    pub fn scriptingProperties(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "scriptingProperties", ?*anyopaque, .{});
    }

    pub fn setScriptingProperties(_self: *@This(), _scriptingProperties: ?*anyopaque) void {
        return objc.msgSend(_self, "setScriptingProperties:", void, .{_scriptingProperties});
    }

    pub fn classCode(_self: *@This()) objc.FourCharCode {
        return objc.msgSend(_self, "classCode", objc.FourCharCode, .{});
    }

    pub fn className(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "className", ?*foundation.String, .{});
    }

    pub fn valueAtIndexInPropertyWithKey(_self: *@This(), _index: objc.NSUInteger, _key: ?*foundation.String) ?objc.Id {
        return objc.msgSend(_self, "valueAtIndex:inPropertyWithKey:", ?objc.Id, .{ _index, _key });
    }

    pub fn valueWithNameInPropertyWithKey(_self: *@This(), _name: ?*foundation.String, _key: ?*foundation.String) ?objc.Id {
        return objc.msgSend(_self, "valueWithName:inPropertyWithKey:", ?objc.Id, .{ _name, _key });
    }

    pub fn valueWithUniqueIDInPropertyWithKey(_self: *@This(), _uniqueID: ?objc.Id, _key: ?*foundation.String) ?objc.Id {
        return objc.msgSend(_self, "valueWithUniqueID:inPropertyWithKey:", ?objc.Id, .{ _uniqueID, _key });
    }

    pub fn insertValueAtIndexInPropertyWithKey(_self: *@This(), _value: ?objc.Id, _index: objc.NSUInteger, _key: ?*foundation.String) void {
        return objc.msgSend(_self, "insertValue:atIndex:inPropertyWithKey:", void, .{ _value, _index, _key });
    }

    pub fn removeValueAtIndexFromPropertyWithKey(_self: *@This(), _index: objc.NSUInteger, _key: ?*foundation.String) void {
        return objc.msgSend(_self, "removeValueAtIndex:fromPropertyWithKey:", void, .{ _index, _key });
    }

    pub fn replaceValueAtIndexInPropertyWithKeyWithValue(_self: *@This(), _index: objc.NSUInteger, _key: ?*foundation.String, _value: ?objc.Id) void {
        return objc.msgSend(_self, "replaceValueAtIndex:inPropertyWithKey:withValue:", void, .{ _index, _key, _value });
    }

    pub fn insertValueInPropertyWithKey(_self: *@This(), _value: ?objc.Id, _key: ?*foundation.String) void {
        return objc.msgSend(_self, "insertValue:inPropertyWithKey:", void, .{ _value, _key });
    }

    pub fn coerceValueForKey(_self: *@This(), _value: ?objc.Id, _key: ?*foundation.String) ?objc.Id {
        return objc.msgSend(_self, "coerceValue:forKey:", ?objc.Id, .{ _value, _key });
    }

    pub fn indicesOfObjectsByEvaluatingObjectSpecifier(_self: *@This(), _specifier: ?*foundation.ScriptObjectSpecifier) ?*anyopaque {
        return objc.msgSend(_self, "indicesOfObjectsByEvaluatingObjectSpecifier:", ?*anyopaque, .{_specifier});
    }

    pub fn objectSpecifier(_self: *@This()) ?*foundation.ScriptObjectSpecifier {
        return objc.msgSend(_self, "objectSpecifier", ?*foundation.ScriptObjectSpecifier, .{});
    }

    pub fn isEqualTo(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqualTo:", objc.BOOL, .{_object});
    }

    pub fn isLessThanOrEqualTo(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isLessThanOrEqualTo:", objc.BOOL, .{_object});
    }

    pub fn isLessThan(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isLessThan:", objc.BOOL, .{_object});
    }

    pub fn isGreaterThanOrEqualTo(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isGreaterThanOrEqualTo:", objc.BOOL, .{_object});
    }

    pub fn isGreaterThan(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isGreaterThan:", objc.BOOL, .{_object});
    }

    pub fn isNotEqualTo(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isNotEqualTo:", objc.BOOL, .{_object});
    }

    pub fn doesContain(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "doesContain:", objc.BOOL, .{_object});
    }

    pub fn isLike(_self: *@This(), _object: ?*foundation.String) objc.BOOL {
        return objc.msgSend(_self, "isLike:", objc.BOOL, .{_object});
    }

    pub fn isCaseInsensitiveLike(_self: *@This(), _object: ?*foundation.String) objc.BOOL {
        return objc.msgSend(_self, "isCaseInsensitiveLike:", objc.BOOL, .{_object});
    }

    pub fn scriptingIsEqualTo(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "scriptingIsEqualTo:", objc.BOOL, .{_object});
    }

    pub fn scriptingIsLessThanOrEqualTo(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "scriptingIsLessThanOrEqualTo:", objc.BOOL, .{_object});
    }

    pub fn scriptingIsLessThan(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "scriptingIsLessThan:", objc.BOOL, .{_object});
    }

    pub fn scriptingIsGreaterThanOrEqualTo(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "scriptingIsGreaterThanOrEqualTo:", objc.BOOL, .{_object});
    }

    pub fn scriptingIsGreaterThan(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "scriptingIsGreaterThan:", objc.BOOL, .{_object});
    }

    pub fn scriptingBeginsWith(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "scriptingBeginsWith:", objc.BOOL, .{_object});
    }

    pub fn scriptingEndsWith(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "scriptingEndsWith:", objc.BOOL, .{_object});
    }

    pub fn scriptingContains(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "scriptingContains:", objc.BOOL, .{_object});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*foundation.Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*foundation.Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn supportsSecureCoding() objc.BOOL {
        return objc.msgSend(Internal.class(), "supportsSecureCoding", objc.BOOL, .{});
    }

    pub fn effect() *@This() {
        return objc.msgSend(Internal.class(), "effect", *@This(), .{});
    }

    pub fn rotateClockwiseEffect() *@This() {
        return objc.msgSend(Internal.class(), "rotateClockwiseEffect", *@This(), .{});
    }

    pub fn rotateCounterClockwiseEffect() *@This() {
        return objc.msgSend(Internal.class(), "rotateCounterClockwiseEffect", *@This(), .{});
    }

    pub fn effectWithByLayer(_self: *@This()) *@This() {
        return objc.msgSend(_self, "effectWithByLayer", *@This(), .{});
    }

    pub fn effectWithWholeSymbol(_self: *@This()) *@This() {
        return objc.msgSend(_self, "effectWithWholeSymbol", *@This(), .{});
    }
};

/// https://developer.apple.com/documentation/Symbols/NSSymbolBreatheEffect?language=objc
pub const SymbolBreatheEffect = opaque {
    pub const Internal = objc.ExternClass("NSSymbolBreatheEffect", @This(), SymbolEffect, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "description", ?*foundation.String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "debugDescription", ?*foundation.String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*foundation.Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*foundation.MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*foundation.MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*foundation.MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*foundation.MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn version() objc.NSInteger {
        return objc.msgSend(Internal.class(), "version", objc.NSInteger, .{});
    }

    pub fn setVersion(_aVersion: objc.NSInteger) void {
        return objc.msgSend(Internal.class(), "setVersion:", void, .{_aVersion});
    }

    pub fn replacementObjectForCoder(_self: *@This(), _coder: ?*foundation.Coder) ?objc.Id {
        return objc.msgSend(_self, "replacementObjectForCoder:", ?objc.Id, .{_coder});
    }

    pub fn awakeAfterUsingCoder(_self: *@This(), _coder: ?*foundation.Coder) ?objc.Id {
        return objc.msgSend(_self, "awakeAfterUsingCoder:", ?objc.Id, .{_coder});
    }

    pub fn classForCoder(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "classForCoder", objc.Class, .{});
    }

    pub fn poseAsClass(_aClass: objc.Class) void {
        return objc.msgSend(Internal.class(), "poseAsClass:", void, .{_aClass});
    }

    pub fn autoContentAccessingProxy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "autoContentAccessingProxy", ?objc.Id, .{});
    }

    pub fn attemptRecoveryFromErrorOptionIndexDelegateDidRecoverSelectorContextInfo(
        _self: *@This(),
        _error: ?*foundation.Error,
        _recoveryOptionIndex: objc.NSUInteger,
        _delegate: ?objc.Id,
        _didRecoverSelector: objc.Selector,
        _contextInfo: ?*anyopaque,
    ) void {
        return objc.msgSend(_self, "attemptRecoveryFromError:optionIndex:delegate:didRecoverSelector:contextInfo:", void, .{
            _error,
            _recoveryOptionIndex,
            _delegate,
            _didRecoverSelector,
            _contextInfo,
        });
    }

    pub fn attemptRecoveryFromErrorOptionIndex(_self: *@This(), _error: ?*foundation.Error, _recoveryOptionIndex: objc.NSUInteger) objc.BOOL {
        return objc.msgSend(_self, "attemptRecoveryFromError:optionIndex:", objc.BOOL, .{ _error, _recoveryOptionIndex });
    }

    pub fn performSelectorWithObjectAfterDelayInModes(
        _self: *@This(),
        _aSelector: objc.Selector,
        _anArgument: ?objc.Id,
        _delay: foundation.TimeInterval,
        _modes: ?*anyopaque,
    ) void {
        return objc.msgSend(_self, "performSelector:withObject:afterDelay:inModes:", void, .{
            _aSelector,
            _anArgument,
            _delay,
            _modes,
        });
    }

    pub fn performSelectorWithObjectAfterDelay(_self: *@This(), _aSelector: objc.Selector, _anArgument: ?objc.Id, _delay: foundation.TimeInterval) void {
        return objc.msgSend(_self, "performSelector:withObject:afterDelay:", void, .{ _aSelector, _anArgument, _delay });
    }

    pub fn cancelPreviousPerformRequestsWithTargetSelectorObject(_aTarget: ?objc.Id, _aSelector: objc.Selector, _anArgument: ?objc.Id) void {
        return objc.msgSend(Internal.class(), "cancelPreviousPerformRequestsWithTarget:selector:object:", void, .{ _aTarget, _aSelector, _anArgument });
    }

    pub fn cancelPreviousPerformRequestsWithTarget(_aTarget: ?objc.Id) void {
        return objc.msgSend(Internal.class(), "cancelPreviousPerformRequestsWithTarget:", void, .{_aTarget});
    }

    pub fn urlResourceDataDidBecomeAvailable(_self: *@This(), _sender: ?*foundation.URL, _newBytes: ?*foundation.Data) void {
        return objc.msgSend(_self, "URL:resourceDataDidBecomeAvailable:", void, .{ _sender, _newBytes });
    }

    pub fn urlResourceDidFinishLoading(_self: *@This(), _sender: ?*foundation.URL) void {
        return objc.msgSend(_self, "URLResourceDidFinishLoading:", void, .{_sender});
    }

    pub fn urlResourceDidCancelLoading(_self: *@This(), _sender: ?*foundation.URL) void {
        return objc.msgSend(_self, "URLResourceDidCancelLoading:", void, .{_sender});
    }

    pub fn urlResourceDidFailLoadingWithReason(_self: *@This(), _sender: ?*foundation.URL, _reason: ?*foundation.String) void {
        return objc.msgSend(_self, "URL:resourceDidFailLoadingWithReason:", void, .{ _sender, _reason });
    }

    pub fn fileManagerShouldProceedAfterError(_self: *@This(), _fm: ?*foundation.FileManager, _errorInfo: ?*foundation.Dictionary) objc.BOOL {
        return objc.msgSend(_self, "fileManager:shouldProceedAfterError:", objc.BOOL, .{ _fm, _errorInfo });
    }

    pub fn fileManagerWillProcessPath(_self: *@This(), _fm: ?*foundation.FileManager, _path: ?*foundation.String) void {
        return objc.msgSend(_self, "fileManager:willProcessPath:", void, .{ _fm, _path });
    }

    pub fn valueForKey(_self: *@This(), _key: ?*foundation.String) ?objc.Id {
        return objc.msgSend(_self, "valueForKey:", ?objc.Id, .{_key});
    }

    pub fn setValueForKey(_self: *@This(), _value: ?objc.Id, _key: ?*foundation.String) void {
        return objc.msgSend(_self, "setValue:forKey:", void, .{ _value, _key });
    }

    pub fn validateValueForKeyError(_self: *@This(), _ioValue: ?*?objc.Id, _inKey: ?*foundation.String, _outError: ?*?*foundation.Error) objc.BOOL {
        return objc.msgSend(_self, "validateValue:forKey:error:", objc.BOOL, .{ _ioValue, _inKey, _outError });
    }

    pub fn mutableArrayValueForKey(_self: *@This(), _key: ?*foundation.String) ?*foundation.MutableArray {
        return objc.msgSend(_self, "mutableArrayValueForKey:", ?*foundation.MutableArray, .{_key});
    }

    pub fn mutableOrderedSetValueForKey(_self: *@This(), _key: ?*foundation.String) ?*foundation.MutableOrderedSet {
        return objc.msgSend(_self, "mutableOrderedSetValueForKey:", ?*foundation.MutableOrderedSet, .{_key});
    }

    pub fn mutableSetValueForKey(_self: *@This(), _key: ?*foundation.String) ?*foundation.MutableSet {
        return objc.msgSend(_self, "mutableSetValueForKey:", ?*foundation.MutableSet, .{_key});
    }

    pub fn valueForKeyPath(_self: *@This(), _keyPath: ?*foundation.String) ?objc.Id {
        return objc.msgSend(_self, "valueForKeyPath:", ?objc.Id, .{_keyPath});
    }

    pub fn setValueForKeyPath(_self: *@This(), _value: ?objc.Id, _keyPath: ?*foundation.String) void {
        return objc.msgSend(_self, "setValue:forKeyPath:", void, .{ _value, _keyPath });
    }

    pub fn validateValueForKeyPathError(_self: *@This(), _ioValue: ?*?objc.Id, _inKeyPath: ?*foundation.String, _outError: ?*?*foundation.Error) objc.BOOL {
        return objc.msgSend(_self, "validateValue:forKeyPath:error:", objc.BOOL, .{ _ioValue, _inKeyPath, _outError });
    }

    pub fn mutableArrayValueForKeyPath(_self: *@This(), _keyPath: ?*foundation.String) ?*foundation.MutableArray {
        return objc.msgSend(_self, "mutableArrayValueForKeyPath:", ?*foundation.MutableArray, .{_keyPath});
    }

    pub fn mutableOrderedSetValueForKeyPath(_self: *@This(), _keyPath: ?*foundation.String) ?*foundation.MutableOrderedSet {
        return objc.msgSend(_self, "mutableOrderedSetValueForKeyPath:", ?*foundation.MutableOrderedSet, .{_keyPath});
    }

    pub fn mutableSetValueForKeyPath(_self: *@This(), _keyPath: ?*foundation.String) ?*foundation.MutableSet {
        return objc.msgSend(_self, "mutableSetValueForKeyPath:", ?*foundation.MutableSet, .{_keyPath});
    }

    pub fn valueForUndefinedKey(_self: *@This(), _key: ?*foundation.String) ?objc.Id {
        return objc.msgSend(_self, "valueForUndefinedKey:", ?objc.Id, .{_key});
    }

    pub fn setValueForUndefinedKey(_self: *@This(), _value: ?objc.Id, _key: ?*foundation.String) void {
        return objc.msgSend(_self, "setValue:forUndefinedKey:", void, .{ _value, _key });
    }

    pub fn setNilValueForKey(_self: *@This(), _key: ?*foundation.String) void {
        return objc.msgSend(_self, "setNilValueForKey:", void, .{_key});
    }

    pub fn dictionaryWithValuesForKeys(_self: *@This(), _keys: ?*anyopaque) ?*anyopaque {
        return objc.msgSend(_self, "dictionaryWithValuesForKeys:", ?*anyopaque, .{_keys});
    }

    pub fn setValuesForKeysWithDictionary(_self: *@This(), _keyedValues: ?*anyopaque) void {
        return objc.msgSend(_self, "setValuesForKeysWithDictionary:", void, .{_keyedValues});
    }

    pub fn accessInstanceVariablesDirectly() objc.BOOL {
        return objc.msgSend(Internal.class(), "accessInstanceVariablesDirectly", objc.BOOL, .{});
    }

    pub fn useStoredAccessor() objc.BOOL {
        return objc.msgSend(Internal.class(), "useStoredAccessor", objc.BOOL, .{});
    }

    pub fn storedValueForKey(_self: *@This(), _key: ?*foundation.String) ?objc.Id {
        return objc.msgSend(_self, "storedValueForKey:", ?objc.Id, .{_key});
    }

    pub fn takeStoredValueForKey(_self: *@This(), _value: ?objc.Id, _key: ?*foundation.String) void {
        return objc.msgSend(_self, "takeStoredValue:forKey:", void, .{ _value, _key });
    }

    pub fn takeValueForKey(_self: *@This(), _value: ?objc.Id, _key: ?*foundation.String) void {
        return objc.msgSend(_self, "takeValue:forKey:", void, .{ _value, _key });
    }

    pub fn takeValueForKeyPath(_self: *@This(), _value: ?objc.Id, _keyPath: ?*foundation.String) void {
        return objc.msgSend(_self, "takeValue:forKeyPath:", void, .{ _value, _keyPath });
    }

    pub fn handleQueryWithUnboundKey(_self: *@This(), _key: ?*foundation.String) ?objc.Id {
        return objc.msgSend(_self, "handleQueryWithUnboundKey:", ?objc.Id, .{_key});
    }

    pub fn handleTakeValueForUnboundKey(_self: *@This(), _value: ?objc.Id, _key: ?*foundation.String) void {
        return objc.msgSend(_self, "handleTakeValue:forUnboundKey:", void, .{ _value, _key });
    }

    pub fn unableToSetNilForKey(_self: *@This(), _key: ?*foundation.String) void {
        return objc.msgSend(_self, "unableToSetNilForKey:", void, .{_key});
    }

    pub fn valuesForKeys(_self: *@This(), _keys: ?*foundation.Array) ?*foundation.Dictionary {
        return objc.msgSend(_self, "valuesForKeys:", ?*foundation.Dictionary, .{_keys});
    }

    pub fn takeValuesFromDictionary(_self: *@This(), _properties: ?*foundation.Dictionary) void {
        return objc.msgSend(_self, "takeValuesFromDictionary:", void, .{_properties});
    }

    pub fn observeValueForKeyPathOfObjectChangeContext(
        _self: *@This(),
        _keyPath: ?*foundation.String,
        _object: ?objc.Id,
        _change: ?*anyopaque,
        _context: ?*anyopaque,
    ) void {
        return objc.msgSend(_self, "observeValueForKeyPath:ofObject:change:context:", void, .{
            _keyPath,
            _object,
            _change,
            _context,
        });
    }

    pub fn addObserverForKeyPathOptionsContext(
        _self: *@This(),
        _observer: ?*objc.NSObject,
        _keyPath: ?*foundation.String,
        _options: foundation.KeyValueObservingOptions,
        _context: ?*anyopaque,
    ) void {
        return objc.msgSend(_self, "addObserver:forKeyPath:options:context:", void, .{
            _observer,
            _keyPath,
            _options,
            _context,
        });
    }

    pub fn removeObserverForKeyPathContext(_self: *@This(), _observer: ?*objc.NSObject, _keyPath: ?*foundation.String, _context: ?*anyopaque) void {
        return objc.msgSend(_self, "removeObserver:forKeyPath:context:", void, .{ _observer, _keyPath, _context });
    }

    pub fn removeObserverForKeyPath(_self: *@This(), _observer: ?*objc.NSObject, _keyPath: ?*foundation.String) void {
        return objc.msgSend(_self, "removeObserver:forKeyPath:", void, .{ _observer, _keyPath });
    }

    pub fn willChangeValueForKey(_self: *@This(), _key: ?*foundation.String) void {
        return objc.msgSend(_self, "willChangeValueForKey:", void, .{_key});
    }

    pub fn didChangeValueForKey(_self: *@This(), _key: ?*foundation.String) void {
        return objc.msgSend(_self, "didChangeValueForKey:", void, .{_key});
    }

    pub fn willChangeValuesAtIndexesForKey(_self: *@This(), _changeKind: foundation.KeyValueChange, _indexes: ?*foundation.IndexSet, _key: ?*foundation.String) void {
        return objc.msgSend(_self, "willChange:valuesAtIndexes:forKey:", void, .{ _changeKind, _indexes, _key });
    }

    pub fn didChangeValuesAtIndexesForKey(_self: *@This(), _changeKind: foundation.KeyValueChange, _indexes: ?*foundation.IndexSet, _key: ?*foundation.String) void {
        return objc.msgSend(_self, "didChange:valuesAtIndexes:forKey:", void, .{ _changeKind, _indexes, _key });
    }

    pub fn willChangeValueForKeyWithSetMutationUsingObjects(_self: *@This(), _key: ?*foundation.String, _mutationKind: foundation.KeyValueSetMutationKind, _objects: ?*foundation.Set) void {
        return objc.msgSend(_self, "willChangeValueForKey:withSetMutation:usingObjects:", void, .{ _key, _mutationKind, _objects });
    }

    pub fn didChangeValueForKeyWithSetMutationUsingObjects(_self: *@This(), _key: ?*foundation.String, _mutationKind: foundation.KeyValueSetMutationKind, _objects: ?*foundation.Set) void {
        return objc.msgSend(_self, "didChangeValueForKey:withSetMutation:usingObjects:", void, .{ _key, _mutationKind, _objects });
    }

    pub fn keyPathsForValuesAffectingValueForKey(_key: ?*foundation.String) ?*anyopaque {
        return objc.msgSend(Internal.class(), "keyPathsForValuesAffectingValueForKey:", ?*anyopaque, .{_key});
    }

    pub fn automaticallyNotifiesObserversForKey(_key: ?*foundation.String) objc.BOOL {
        return objc.msgSend(Internal.class(), "automaticallyNotifiesObserversForKey:", objc.BOOL, .{_key});
    }

    pub fn observationInfo(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "observationInfo", ?*anyopaque, .{});
    }

    pub fn setObservationInfo(_self: *@This(), _observationInfo: ?*anyopaque) void {
        return objc.msgSend(_self, "setObservationInfo:", void, .{_observationInfo});
    }

    pub fn setKeysTriggerChangeNotificationsForDependentKey(_keys: ?*foundation.Array, _dependentKey: ?*foundation.String) void {
        return objc.msgSend(Internal.class(), "setKeys:triggerChangeNotificationsForDependentKey:", void, .{ _keys, _dependentKey });
    }

    pub fn setSharedObservers(_self: *@This(), _sharedObservers: ?*foundation.KeyValueSharedObserversSnapshot) void {
        return objc.msgSend(_self, "setSharedObservers:", void, .{_sharedObservers});
    }

    pub fn replacementObjectForKeyedArchiver(_self: *@This(), _archiver: ?*foundation.KeyedArchiver) ?objc.Id {
        return objc.msgSend(_self, "replacementObjectForKeyedArchiver:", ?objc.Id, .{_archiver});
    }

    pub fn classFallbacksForKeyedArchiver() ?*anyopaque {
        return objc.msgSend(Internal.class(), "classFallbacksForKeyedArchiver", ?*anyopaque, .{});
    }

    pub fn classForKeyedArchiver(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "classForKeyedArchiver", objc.Class, .{});
    }

    pub fn classForKeyedUnarchiver() objc.Class {
        return objc.msgSend(Internal.class(), "classForKeyedUnarchiver", objc.Class, .{});
    }

    pub fn performSelectorOnMainThreadWithObjectWaitUntilDoneModes(
        _self: *@This(),
        _aSelector: objc.Selector,
        _arg: ?objc.Id,
        _wait: objc.BOOL,
        _array: ?*anyopaque,
    ) void {
        return objc.msgSend(_self, "performSelectorOnMainThread:withObject:waitUntilDone:modes:", void, .{
            _aSelector,
            _arg,
            _wait,
            _array,
        });
    }

    pub fn performSelectorOnMainThreadWithObjectWaitUntilDone(_self: *@This(), _aSelector: objc.Selector, _arg: ?objc.Id, _wait: objc.BOOL) void {
        return objc.msgSend(_self, "performSelectorOnMainThread:withObject:waitUntilDone:", void, .{ _aSelector, _arg, _wait });
    }

    pub fn performSelectorOnThreadWithObjectWaitUntilDoneModes(
        _self: *@This(),
        _aSelector: objc.Selector,
        _thr: ?*foundation.Thread,
        _arg: ?objc.Id,
        _wait: objc.BOOL,
        _array: ?*anyopaque,
    ) void {
        return objc.msgSend(_self, "performSelector:onThread:withObject:waitUntilDone:modes:", void, .{
            _aSelector,
            _thr,
            _arg,
            _wait,
            _array,
        });
    }

    pub fn performSelectorOnThreadWithObjectWaitUntilDone(
        _self: *@This(),
        _aSelector: objc.Selector,
        _thr: ?*foundation.Thread,
        _arg: ?objc.Id,
        _wait: objc.BOOL,
    ) void {
        return objc.msgSend(_self, "performSelector:onThread:withObject:waitUntilDone:", void, .{
            _aSelector,
            _thr,
            _arg,
            _wait,
        });
    }

    pub fn performSelectorInBackgroundWithObject(_self: *@This(), _aSelector: objc.Selector, _arg: ?objc.Id) void {
        return objc.msgSend(_self, "performSelectorInBackground:withObject:", void, .{ _aSelector, _arg });
    }

    pub fn replacementObjectForArchiver(_self: *@This(), _archiver: ?*foundation.Archiver) ?objc.Id {
        return objc.msgSend(_self, "replacementObjectForArchiver:", ?objc.Id, .{_archiver});
    }

    pub fn classForArchiver(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "classForArchiver", objc.Class, .{});
    }

    pub fn replacementObjectForPortCoder(_self: *@This(), _coder: ?*foundation.PortCoder) ?objc.Id {
        return objc.msgSend(_self, "replacementObjectForPortCoder:", ?objc.Id, .{_coder});
    }

    pub fn classForPortCoder(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "classForPortCoder", objc.Class, .{});
    }

    pub fn inverseForRelationshipKey(_self: *@This(), _relationshipKey: ?*foundation.String) ?*foundation.String {
        return objc.msgSend(_self, "inverseForRelationshipKey:", ?*foundation.String, .{_relationshipKey});
    }

    pub fn classDescription(_self: *@This()) ?*foundation.ClassDescription {
        return objc.msgSend(_self, "classDescription", ?*foundation.ClassDescription, .{});
    }

    pub fn attributeKeys(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "attributeKeys", ?*anyopaque, .{});
    }

    pub fn toOneRelationshipKeys(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "toOneRelationshipKeys", ?*anyopaque, .{});
    }

    pub fn toManyRelationshipKeys(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "toManyRelationshipKeys", ?*anyopaque, .{});
    }

    pub fn scriptingValueForSpecifier(_self: *@This(), _objectSpecifier: ?*foundation.ScriptObjectSpecifier) ?objc.Id {
        return objc.msgSend(_self, "scriptingValueForSpecifier:", ?objc.Id, .{_objectSpecifier});
    }

    pub fn copyScriptingValueForKeyWithProperties(_self: *@This(), _value: ?objc.Id, _key: ?*foundation.String, _properties: ?*anyopaque) ?objc.Id {
        return objc.msgSend(_self, "copyScriptingValue:forKey:withProperties:", ?objc.Id, .{ _value, _key, _properties });
    }

    pub fn newScriptingObjectOfClassForValueForKeyWithContentsValueProperties(
        _self: *@This(),
        _objectClass: objc.Class,
        _key: ?*foundation.String,
        _contentsValue: ?objc.Id,
        _properties: ?*anyopaque,
    ) ?objc.Id {
        return objc.msgSend(_self, "newScriptingObjectOfClass:forValueForKey:withContentsValue:properties:", ?objc.Id, .{
            _objectClass,
            _key,
            _contentsValue,
            _properties,
        });
    }

    pub fn scriptingProperties(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "scriptingProperties", ?*anyopaque, .{});
    }

    pub fn setScriptingProperties(_self: *@This(), _scriptingProperties: ?*anyopaque) void {
        return objc.msgSend(_self, "setScriptingProperties:", void, .{_scriptingProperties});
    }

    pub fn classCode(_self: *@This()) objc.FourCharCode {
        return objc.msgSend(_self, "classCode", objc.FourCharCode, .{});
    }

    pub fn className(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "className", ?*foundation.String, .{});
    }

    pub fn valueAtIndexInPropertyWithKey(_self: *@This(), _index: objc.NSUInteger, _key: ?*foundation.String) ?objc.Id {
        return objc.msgSend(_self, "valueAtIndex:inPropertyWithKey:", ?objc.Id, .{ _index, _key });
    }

    pub fn valueWithNameInPropertyWithKey(_self: *@This(), _name: ?*foundation.String, _key: ?*foundation.String) ?objc.Id {
        return objc.msgSend(_self, "valueWithName:inPropertyWithKey:", ?objc.Id, .{ _name, _key });
    }

    pub fn valueWithUniqueIDInPropertyWithKey(_self: *@This(), _uniqueID: ?objc.Id, _key: ?*foundation.String) ?objc.Id {
        return objc.msgSend(_self, "valueWithUniqueID:inPropertyWithKey:", ?objc.Id, .{ _uniqueID, _key });
    }

    pub fn insertValueAtIndexInPropertyWithKey(_self: *@This(), _value: ?objc.Id, _index: objc.NSUInteger, _key: ?*foundation.String) void {
        return objc.msgSend(_self, "insertValue:atIndex:inPropertyWithKey:", void, .{ _value, _index, _key });
    }

    pub fn removeValueAtIndexFromPropertyWithKey(_self: *@This(), _index: objc.NSUInteger, _key: ?*foundation.String) void {
        return objc.msgSend(_self, "removeValueAtIndex:fromPropertyWithKey:", void, .{ _index, _key });
    }

    pub fn replaceValueAtIndexInPropertyWithKeyWithValue(_self: *@This(), _index: objc.NSUInteger, _key: ?*foundation.String, _value: ?objc.Id) void {
        return objc.msgSend(_self, "replaceValueAtIndex:inPropertyWithKey:withValue:", void, .{ _index, _key, _value });
    }

    pub fn insertValueInPropertyWithKey(_self: *@This(), _value: ?objc.Id, _key: ?*foundation.String) void {
        return objc.msgSend(_self, "insertValue:inPropertyWithKey:", void, .{ _value, _key });
    }

    pub fn coerceValueForKey(_self: *@This(), _value: ?objc.Id, _key: ?*foundation.String) ?objc.Id {
        return objc.msgSend(_self, "coerceValue:forKey:", ?objc.Id, .{ _value, _key });
    }

    pub fn indicesOfObjectsByEvaluatingObjectSpecifier(_self: *@This(), _specifier: ?*foundation.ScriptObjectSpecifier) ?*anyopaque {
        return objc.msgSend(_self, "indicesOfObjectsByEvaluatingObjectSpecifier:", ?*anyopaque, .{_specifier});
    }

    pub fn objectSpecifier(_self: *@This()) ?*foundation.ScriptObjectSpecifier {
        return objc.msgSend(_self, "objectSpecifier", ?*foundation.ScriptObjectSpecifier, .{});
    }

    pub fn isEqualTo(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqualTo:", objc.BOOL, .{_object});
    }

    pub fn isLessThanOrEqualTo(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isLessThanOrEqualTo:", objc.BOOL, .{_object});
    }

    pub fn isLessThan(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isLessThan:", objc.BOOL, .{_object});
    }

    pub fn isGreaterThanOrEqualTo(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isGreaterThanOrEqualTo:", objc.BOOL, .{_object});
    }

    pub fn isGreaterThan(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isGreaterThan:", objc.BOOL, .{_object});
    }

    pub fn isNotEqualTo(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isNotEqualTo:", objc.BOOL, .{_object});
    }

    pub fn doesContain(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "doesContain:", objc.BOOL, .{_object});
    }

    pub fn isLike(_self: *@This(), _object: ?*foundation.String) objc.BOOL {
        return objc.msgSend(_self, "isLike:", objc.BOOL, .{_object});
    }

    pub fn isCaseInsensitiveLike(_self: *@This(), _object: ?*foundation.String) objc.BOOL {
        return objc.msgSend(_self, "isCaseInsensitiveLike:", objc.BOOL, .{_object});
    }

    pub fn scriptingIsEqualTo(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "scriptingIsEqualTo:", objc.BOOL, .{_object});
    }

    pub fn scriptingIsLessThanOrEqualTo(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "scriptingIsLessThanOrEqualTo:", objc.BOOL, .{_object});
    }

    pub fn scriptingIsLessThan(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "scriptingIsLessThan:", objc.BOOL, .{_object});
    }

    pub fn scriptingIsGreaterThanOrEqualTo(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "scriptingIsGreaterThanOrEqualTo:", objc.BOOL, .{_object});
    }

    pub fn scriptingIsGreaterThan(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "scriptingIsGreaterThan:", objc.BOOL, .{_object});
    }

    pub fn scriptingBeginsWith(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "scriptingBeginsWith:", objc.BOOL, .{_object});
    }

    pub fn scriptingEndsWith(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "scriptingEndsWith:", objc.BOOL, .{_object});
    }

    pub fn scriptingContains(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "scriptingContains:", objc.BOOL, .{_object});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*foundation.Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*foundation.Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn supportsSecureCoding() objc.BOOL {
        return objc.msgSend(Internal.class(), "supportsSecureCoding", objc.BOOL, .{});
    }

    pub fn effect() *@This() {
        return objc.msgSend(Internal.class(), "effect", *@This(), .{});
    }

    pub fn breathePulseEffect() *@This() {
        return objc.msgSend(Internal.class(), "breathePulseEffect", *@This(), .{});
    }

    pub fn breathePlainEffect() *@This() {
        return objc.msgSend(Internal.class(), "breathePlainEffect", *@This(), .{});
    }

    pub fn effectWithByLayer(_self: *@This()) *@This() {
        return objc.msgSend(_self, "effectWithByLayer", *@This(), .{});
    }

    pub fn effectWithWholeSymbol(_self: *@This()) *@This() {
        return objc.msgSend(_self, "effectWithWholeSymbol", *@This(), .{});
    }
};

/// https://developer.apple.com/documentation/Symbols/NSSymbolContentTransition?language=objc
pub const SymbolContentTransition = opaque {
    pub const Internal = objc.ExternClass("NSSymbolContentTransition", @This(), objc.NSObject, &.{ foundation.Copying, foundation.SecureCoding });
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "description", ?*foundation.String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "debugDescription", ?*foundation.String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*foundation.Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*foundation.MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*foundation.MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*foundation.MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*foundation.MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn version() objc.NSInteger {
        return objc.msgSend(Internal.class(), "version", objc.NSInteger, .{});
    }

    pub fn setVersion(_aVersion: objc.NSInteger) void {
        return objc.msgSend(Internal.class(), "setVersion:", void, .{_aVersion});
    }

    pub fn replacementObjectForCoder(_self: *@This(), _coder: ?*foundation.Coder) ?objc.Id {
        return objc.msgSend(_self, "replacementObjectForCoder:", ?objc.Id, .{_coder});
    }

    pub fn awakeAfterUsingCoder(_self: *@This(), _coder: ?*foundation.Coder) ?objc.Id {
        return objc.msgSend(_self, "awakeAfterUsingCoder:", ?objc.Id, .{_coder});
    }

    pub fn classForCoder(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "classForCoder", objc.Class, .{});
    }

    pub fn poseAsClass(_aClass: objc.Class) void {
        return objc.msgSend(Internal.class(), "poseAsClass:", void, .{_aClass});
    }

    pub fn autoContentAccessingProxy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "autoContentAccessingProxy", ?objc.Id, .{});
    }

    pub fn attemptRecoveryFromErrorOptionIndexDelegateDidRecoverSelectorContextInfo(
        _self: *@This(),
        _error: ?*foundation.Error,
        _recoveryOptionIndex: objc.NSUInteger,
        _delegate: ?objc.Id,
        _didRecoverSelector: objc.Selector,
        _contextInfo: ?*anyopaque,
    ) void {
        return objc.msgSend(_self, "attemptRecoveryFromError:optionIndex:delegate:didRecoverSelector:contextInfo:", void, .{
            _error,
            _recoveryOptionIndex,
            _delegate,
            _didRecoverSelector,
            _contextInfo,
        });
    }

    pub fn attemptRecoveryFromErrorOptionIndex(_self: *@This(), _error: ?*foundation.Error, _recoveryOptionIndex: objc.NSUInteger) objc.BOOL {
        return objc.msgSend(_self, "attemptRecoveryFromError:optionIndex:", objc.BOOL, .{ _error, _recoveryOptionIndex });
    }

    pub fn performSelectorWithObjectAfterDelayInModes(
        _self: *@This(),
        _aSelector: objc.Selector,
        _anArgument: ?objc.Id,
        _delay: foundation.TimeInterval,
        _modes: ?*anyopaque,
    ) void {
        return objc.msgSend(_self, "performSelector:withObject:afterDelay:inModes:", void, .{
            _aSelector,
            _anArgument,
            _delay,
            _modes,
        });
    }

    pub fn performSelectorWithObjectAfterDelay(_self: *@This(), _aSelector: objc.Selector, _anArgument: ?objc.Id, _delay: foundation.TimeInterval) void {
        return objc.msgSend(_self, "performSelector:withObject:afterDelay:", void, .{ _aSelector, _anArgument, _delay });
    }

    pub fn cancelPreviousPerformRequestsWithTargetSelectorObject(_aTarget: ?objc.Id, _aSelector: objc.Selector, _anArgument: ?objc.Id) void {
        return objc.msgSend(Internal.class(), "cancelPreviousPerformRequestsWithTarget:selector:object:", void, .{ _aTarget, _aSelector, _anArgument });
    }

    pub fn cancelPreviousPerformRequestsWithTarget(_aTarget: ?objc.Id) void {
        return objc.msgSend(Internal.class(), "cancelPreviousPerformRequestsWithTarget:", void, .{_aTarget});
    }

    pub fn urlResourceDataDidBecomeAvailable(_self: *@This(), _sender: ?*foundation.URL, _newBytes: ?*foundation.Data) void {
        return objc.msgSend(_self, "URL:resourceDataDidBecomeAvailable:", void, .{ _sender, _newBytes });
    }

    pub fn urlResourceDidFinishLoading(_self: *@This(), _sender: ?*foundation.URL) void {
        return objc.msgSend(_self, "URLResourceDidFinishLoading:", void, .{_sender});
    }

    pub fn urlResourceDidCancelLoading(_self: *@This(), _sender: ?*foundation.URL) void {
        return objc.msgSend(_self, "URLResourceDidCancelLoading:", void, .{_sender});
    }

    pub fn urlResourceDidFailLoadingWithReason(_self: *@This(), _sender: ?*foundation.URL, _reason: ?*foundation.String) void {
        return objc.msgSend(_self, "URL:resourceDidFailLoadingWithReason:", void, .{ _sender, _reason });
    }

    pub fn fileManagerShouldProceedAfterError(_self: *@This(), _fm: ?*foundation.FileManager, _errorInfo: ?*foundation.Dictionary) objc.BOOL {
        return objc.msgSend(_self, "fileManager:shouldProceedAfterError:", objc.BOOL, .{ _fm, _errorInfo });
    }

    pub fn fileManagerWillProcessPath(_self: *@This(), _fm: ?*foundation.FileManager, _path: ?*foundation.String) void {
        return objc.msgSend(_self, "fileManager:willProcessPath:", void, .{ _fm, _path });
    }

    pub fn valueForKey(_self: *@This(), _key: ?*foundation.String) ?objc.Id {
        return objc.msgSend(_self, "valueForKey:", ?objc.Id, .{_key});
    }

    pub fn setValueForKey(_self: *@This(), _value: ?objc.Id, _key: ?*foundation.String) void {
        return objc.msgSend(_self, "setValue:forKey:", void, .{ _value, _key });
    }

    pub fn validateValueForKeyError(_self: *@This(), _ioValue: ?*?objc.Id, _inKey: ?*foundation.String, _outError: ?*?*foundation.Error) objc.BOOL {
        return objc.msgSend(_self, "validateValue:forKey:error:", objc.BOOL, .{ _ioValue, _inKey, _outError });
    }

    pub fn mutableArrayValueForKey(_self: *@This(), _key: ?*foundation.String) ?*foundation.MutableArray {
        return objc.msgSend(_self, "mutableArrayValueForKey:", ?*foundation.MutableArray, .{_key});
    }

    pub fn mutableOrderedSetValueForKey(_self: *@This(), _key: ?*foundation.String) ?*foundation.MutableOrderedSet {
        return objc.msgSend(_self, "mutableOrderedSetValueForKey:", ?*foundation.MutableOrderedSet, .{_key});
    }

    pub fn mutableSetValueForKey(_self: *@This(), _key: ?*foundation.String) ?*foundation.MutableSet {
        return objc.msgSend(_self, "mutableSetValueForKey:", ?*foundation.MutableSet, .{_key});
    }

    pub fn valueForKeyPath(_self: *@This(), _keyPath: ?*foundation.String) ?objc.Id {
        return objc.msgSend(_self, "valueForKeyPath:", ?objc.Id, .{_keyPath});
    }

    pub fn setValueForKeyPath(_self: *@This(), _value: ?objc.Id, _keyPath: ?*foundation.String) void {
        return objc.msgSend(_self, "setValue:forKeyPath:", void, .{ _value, _keyPath });
    }

    pub fn validateValueForKeyPathError(_self: *@This(), _ioValue: ?*?objc.Id, _inKeyPath: ?*foundation.String, _outError: ?*?*foundation.Error) objc.BOOL {
        return objc.msgSend(_self, "validateValue:forKeyPath:error:", objc.BOOL, .{ _ioValue, _inKeyPath, _outError });
    }

    pub fn mutableArrayValueForKeyPath(_self: *@This(), _keyPath: ?*foundation.String) ?*foundation.MutableArray {
        return objc.msgSend(_self, "mutableArrayValueForKeyPath:", ?*foundation.MutableArray, .{_keyPath});
    }

    pub fn mutableOrderedSetValueForKeyPath(_self: *@This(), _keyPath: ?*foundation.String) ?*foundation.MutableOrderedSet {
        return objc.msgSend(_self, "mutableOrderedSetValueForKeyPath:", ?*foundation.MutableOrderedSet, .{_keyPath});
    }

    pub fn mutableSetValueForKeyPath(_self: *@This(), _keyPath: ?*foundation.String) ?*foundation.MutableSet {
        return objc.msgSend(_self, "mutableSetValueForKeyPath:", ?*foundation.MutableSet, .{_keyPath});
    }

    pub fn valueForUndefinedKey(_self: *@This(), _key: ?*foundation.String) ?objc.Id {
        return objc.msgSend(_self, "valueForUndefinedKey:", ?objc.Id, .{_key});
    }

    pub fn setValueForUndefinedKey(_self: *@This(), _value: ?objc.Id, _key: ?*foundation.String) void {
        return objc.msgSend(_self, "setValue:forUndefinedKey:", void, .{ _value, _key });
    }

    pub fn setNilValueForKey(_self: *@This(), _key: ?*foundation.String) void {
        return objc.msgSend(_self, "setNilValueForKey:", void, .{_key});
    }

    pub fn dictionaryWithValuesForKeys(_self: *@This(), _keys: ?*anyopaque) ?*anyopaque {
        return objc.msgSend(_self, "dictionaryWithValuesForKeys:", ?*anyopaque, .{_keys});
    }

    pub fn setValuesForKeysWithDictionary(_self: *@This(), _keyedValues: ?*anyopaque) void {
        return objc.msgSend(_self, "setValuesForKeysWithDictionary:", void, .{_keyedValues});
    }

    pub fn accessInstanceVariablesDirectly() objc.BOOL {
        return objc.msgSend(Internal.class(), "accessInstanceVariablesDirectly", objc.BOOL, .{});
    }

    pub fn useStoredAccessor() objc.BOOL {
        return objc.msgSend(Internal.class(), "useStoredAccessor", objc.BOOL, .{});
    }

    pub fn storedValueForKey(_self: *@This(), _key: ?*foundation.String) ?objc.Id {
        return objc.msgSend(_self, "storedValueForKey:", ?objc.Id, .{_key});
    }

    pub fn takeStoredValueForKey(_self: *@This(), _value: ?objc.Id, _key: ?*foundation.String) void {
        return objc.msgSend(_self, "takeStoredValue:forKey:", void, .{ _value, _key });
    }

    pub fn takeValueForKey(_self: *@This(), _value: ?objc.Id, _key: ?*foundation.String) void {
        return objc.msgSend(_self, "takeValue:forKey:", void, .{ _value, _key });
    }

    pub fn takeValueForKeyPath(_self: *@This(), _value: ?objc.Id, _keyPath: ?*foundation.String) void {
        return objc.msgSend(_self, "takeValue:forKeyPath:", void, .{ _value, _keyPath });
    }

    pub fn handleQueryWithUnboundKey(_self: *@This(), _key: ?*foundation.String) ?objc.Id {
        return objc.msgSend(_self, "handleQueryWithUnboundKey:", ?objc.Id, .{_key});
    }

    pub fn handleTakeValueForUnboundKey(_self: *@This(), _value: ?objc.Id, _key: ?*foundation.String) void {
        return objc.msgSend(_self, "handleTakeValue:forUnboundKey:", void, .{ _value, _key });
    }

    pub fn unableToSetNilForKey(_self: *@This(), _key: ?*foundation.String) void {
        return objc.msgSend(_self, "unableToSetNilForKey:", void, .{_key});
    }

    pub fn valuesForKeys(_self: *@This(), _keys: ?*foundation.Array) ?*foundation.Dictionary {
        return objc.msgSend(_self, "valuesForKeys:", ?*foundation.Dictionary, .{_keys});
    }

    pub fn takeValuesFromDictionary(_self: *@This(), _properties: ?*foundation.Dictionary) void {
        return objc.msgSend(_self, "takeValuesFromDictionary:", void, .{_properties});
    }

    pub fn observeValueForKeyPathOfObjectChangeContext(
        _self: *@This(),
        _keyPath: ?*foundation.String,
        _object: ?objc.Id,
        _change: ?*anyopaque,
        _context: ?*anyopaque,
    ) void {
        return objc.msgSend(_self, "observeValueForKeyPath:ofObject:change:context:", void, .{
            _keyPath,
            _object,
            _change,
            _context,
        });
    }

    pub fn addObserverForKeyPathOptionsContext(
        _self: *@This(),
        _observer: ?*objc.NSObject,
        _keyPath: ?*foundation.String,
        _options: foundation.KeyValueObservingOptions,
        _context: ?*anyopaque,
    ) void {
        return objc.msgSend(_self, "addObserver:forKeyPath:options:context:", void, .{
            _observer,
            _keyPath,
            _options,
            _context,
        });
    }

    pub fn removeObserverForKeyPathContext(_self: *@This(), _observer: ?*objc.NSObject, _keyPath: ?*foundation.String, _context: ?*anyopaque) void {
        return objc.msgSend(_self, "removeObserver:forKeyPath:context:", void, .{ _observer, _keyPath, _context });
    }

    pub fn removeObserverForKeyPath(_self: *@This(), _observer: ?*objc.NSObject, _keyPath: ?*foundation.String) void {
        return objc.msgSend(_self, "removeObserver:forKeyPath:", void, .{ _observer, _keyPath });
    }

    pub fn willChangeValueForKey(_self: *@This(), _key: ?*foundation.String) void {
        return objc.msgSend(_self, "willChangeValueForKey:", void, .{_key});
    }

    pub fn didChangeValueForKey(_self: *@This(), _key: ?*foundation.String) void {
        return objc.msgSend(_self, "didChangeValueForKey:", void, .{_key});
    }

    pub fn willChangeValuesAtIndexesForKey(_self: *@This(), _changeKind: foundation.KeyValueChange, _indexes: ?*foundation.IndexSet, _key: ?*foundation.String) void {
        return objc.msgSend(_self, "willChange:valuesAtIndexes:forKey:", void, .{ _changeKind, _indexes, _key });
    }

    pub fn didChangeValuesAtIndexesForKey(_self: *@This(), _changeKind: foundation.KeyValueChange, _indexes: ?*foundation.IndexSet, _key: ?*foundation.String) void {
        return objc.msgSend(_self, "didChange:valuesAtIndexes:forKey:", void, .{ _changeKind, _indexes, _key });
    }

    pub fn willChangeValueForKeyWithSetMutationUsingObjects(_self: *@This(), _key: ?*foundation.String, _mutationKind: foundation.KeyValueSetMutationKind, _objects: ?*foundation.Set) void {
        return objc.msgSend(_self, "willChangeValueForKey:withSetMutation:usingObjects:", void, .{ _key, _mutationKind, _objects });
    }

    pub fn didChangeValueForKeyWithSetMutationUsingObjects(_self: *@This(), _key: ?*foundation.String, _mutationKind: foundation.KeyValueSetMutationKind, _objects: ?*foundation.Set) void {
        return objc.msgSend(_self, "didChangeValueForKey:withSetMutation:usingObjects:", void, .{ _key, _mutationKind, _objects });
    }

    pub fn keyPathsForValuesAffectingValueForKey(_key: ?*foundation.String) ?*anyopaque {
        return objc.msgSend(Internal.class(), "keyPathsForValuesAffectingValueForKey:", ?*anyopaque, .{_key});
    }

    pub fn automaticallyNotifiesObserversForKey(_key: ?*foundation.String) objc.BOOL {
        return objc.msgSend(Internal.class(), "automaticallyNotifiesObserversForKey:", objc.BOOL, .{_key});
    }

    pub fn observationInfo(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "observationInfo", ?*anyopaque, .{});
    }

    pub fn setObservationInfo(_self: *@This(), _observationInfo: ?*anyopaque) void {
        return objc.msgSend(_self, "setObservationInfo:", void, .{_observationInfo});
    }

    pub fn setKeysTriggerChangeNotificationsForDependentKey(_keys: ?*foundation.Array, _dependentKey: ?*foundation.String) void {
        return objc.msgSend(Internal.class(), "setKeys:triggerChangeNotificationsForDependentKey:", void, .{ _keys, _dependentKey });
    }

    pub fn setSharedObservers(_self: *@This(), _sharedObservers: ?*foundation.KeyValueSharedObserversSnapshot) void {
        return objc.msgSend(_self, "setSharedObservers:", void, .{_sharedObservers});
    }

    pub fn replacementObjectForKeyedArchiver(_self: *@This(), _archiver: ?*foundation.KeyedArchiver) ?objc.Id {
        return objc.msgSend(_self, "replacementObjectForKeyedArchiver:", ?objc.Id, .{_archiver});
    }

    pub fn classFallbacksForKeyedArchiver() ?*anyopaque {
        return objc.msgSend(Internal.class(), "classFallbacksForKeyedArchiver", ?*anyopaque, .{});
    }

    pub fn classForKeyedArchiver(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "classForKeyedArchiver", objc.Class, .{});
    }

    pub fn classForKeyedUnarchiver() objc.Class {
        return objc.msgSend(Internal.class(), "classForKeyedUnarchiver", objc.Class, .{});
    }

    pub fn performSelectorOnMainThreadWithObjectWaitUntilDoneModes(
        _self: *@This(),
        _aSelector: objc.Selector,
        _arg: ?objc.Id,
        _wait: objc.BOOL,
        _array: ?*anyopaque,
    ) void {
        return objc.msgSend(_self, "performSelectorOnMainThread:withObject:waitUntilDone:modes:", void, .{
            _aSelector,
            _arg,
            _wait,
            _array,
        });
    }

    pub fn performSelectorOnMainThreadWithObjectWaitUntilDone(_self: *@This(), _aSelector: objc.Selector, _arg: ?objc.Id, _wait: objc.BOOL) void {
        return objc.msgSend(_self, "performSelectorOnMainThread:withObject:waitUntilDone:", void, .{ _aSelector, _arg, _wait });
    }

    pub fn performSelectorOnThreadWithObjectWaitUntilDoneModes(
        _self: *@This(),
        _aSelector: objc.Selector,
        _thr: ?*foundation.Thread,
        _arg: ?objc.Id,
        _wait: objc.BOOL,
        _array: ?*anyopaque,
    ) void {
        return objc.msgSend(_self, "performSelector:onThread:withObject:waitUntilDone:modes:", void, .{
            _aSelector,
            _thr,
            _arg,
            _wait,
            _array,
        });
    }

    pub fn performSelectorOnThreadWithObjectWaitUntilDone(
        _self: *@This(),
        _aSelector: objc.Selector,
        _thr: ?*foundation.Thread,
        _arg: ?objc.Id,
        _wait: objc.BOOL,
    ) void {
        return objc.msgSend(_self, "performSelector:onThread:withObject:waitUntilDone:", void, .{
            _aSelector,
            _thr,
            _arg,
            _wait,
        });
    }

    pub fn performSelectorInBackgroundWithObject(_self: *@This(), _aSelector: objc.Selector, _arg: ?objc.Id) void {
        return objc.msgSend(_self, "performSelectorInBackground:withObject:", void, .{ _aSelector, _arg });
    }

    pub fn replacementObjectForArchiver(_self: *@This(), _archiver: ?*foundation.Archiver) ?objc.Id {
        return objc.msgSend(_self, "replacementObjectForArchiver:", ?objc.Id, .{_archiver});
    }

    pub fn classForArchiver(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "classForArchiver", objc.Class, .{});
    }

    pub fn replacementObjectForPortCoder(_self: *@This(), _coder: ?*foundation.PortCoder) ?objc.Id {
        return objc.msgSend(_self, "replacementObjectForPortCoder:", ?objc.Id, .{_coder});
    }

    pub fn classForPortCoder(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "classForPortCoder", objc.Class, .{});
    }

    pub fn inverseForRelationshipKey(_self: *@This(), _relationshipKey: ?*foundation.String) ?*foundation.String {
        return objc.msgSend(_self, "inverseForRelationshipKey:", ?*foundation.String, .{_relationshipKey});
    }

    pub fn classDescription(_self: *@This()) ?*foundation.ClassDescription {
        return objc.msgSend(_self, "classDescription", ?*foundation.ClassDescription, .{});
    }

    pub fn attributeKeys(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "attributeKeys", ?*anyopaque, .{});
    }

    pub fn toOneRelationshipKeys(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "toOneRelationshipKeys", ?*anyopaque, .{});
    }

    pub fn toManyRelationshipKeys(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "toManyRelationshipKeys", ?*anyopaque, .{});
    }

    pub fn scriptingValueForSpecifier(_self: *@This(), _objectSpecifier: ?*foundation.ScriptObjectSpecifier) ?objc.Id {
        return objc.msgSend(_self, "scriptingValueForSpecifier:", ?objc.Id, .{_objectSpecifier});
    }

    pub fn copyScriptingValueForKeyWithProperties(_self: *@This(), _value: ?objc.Id, _key: ?*foundation.String, _properties: ?*anyopaque) ?objc.Id {
        return objc.msgSend(_self, "copyScriptingValue:forKey:withProperties:", ?objc.Id, .{ _value, _key, _properties });
    }

    pub fn newScriptingObjectOfClassForValueForKeyWithContentsValueProperties(
        _self: *@This(),
        _objectClass: objc.Class,
        _key: ?*foundation.String,
        _contentsValue: ?objc.Id,
        _properties: ?*anyopaque,
    ) ?objc.Id {
        return objc.msgSend(_self, "newScriptingObjectOfClass:forValueForKey:withContentsValue:properties:", ?objc.Id, .{
            _objectClass,
            _key,
            _contentsValue,
            _properties,
        });
    }

    pub fn scriptingProperties(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "scriptingProperties", ?*anyopaque, .{});
    }

    pub fn setScriptingProperties(_self: *@This(), _scriptingProperties: ?*anyopaque) void {
        return objc.msgSend(_self, "setScriptingProperties:", void, .{_scriptingProperties});
    }

    pub fn classCode(_self: *@This()) objc.FourCharCode {
        return objc.msgSend(_self, "classCode", objc.FourCharCode, .{});
    }

    pub fn className(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "className", ?*foundation.String, .{});
    }

    pub fn valueAtIndexInPropertyWithKey(_self: *@This(), _index: objc.NSUInteger, _key: ?*foundation.String) ?objc.Id {
        return objc.msgSend(_self, "valueAtIndex:inPropertyWithKey:", ?objc.Id, .{ _index, _key });
    }

    pub fn valueWithNameInPropertyWithKey(_self: *@This(), _name: ?*foundation.String, _key: ?*foundation.String) ?objc.Id {
        return objc.msgSend(_self, "valueWithName:inPropertyWithKey:", ?objc.Id, .{ _name, _key });
    }

    pub fn valueWithUniqueIDInPropertyWithKey(_self: *@This(), _uniqueID: ?objc.Id, _key: ?*foundation.String) ?objc.Id {
        return objc.msgSend(_self, "valueWithUniqueID:inPropertyWithKey:", ?objc.Id, .{ _uniqueID, _key });
    }

    pub fn insertValueAtIndexInPropertyWithKey(_self: *@This(), _value: ?objc.Id, _index: objc.NSUInteger, _key: ?*foundation.String) void {
        return objc.msgSend(_self, "insertValue:atIndex:inPropertyWithKey:", void, .{ _value, _index, _key });
    }

    pub fn removeValueAtIndexFromPropertyWithKey(_self: *@This(), _index: objc.NSUInteger, _key: ?*foundation.String) void {
        return objc.msgSend(_self, "removeValueAtIndex:fromPropertyWithKey:", void, .{ _index, _key });
    }

    pub fn replaceValueAtIndexInPropertyWithKeyWithValue(_self: *@This(), _index: objc.NSUInteger, _key: ?*foundation.String, _value: ?objc.Id) void {
        return objc.msgSend(_self, "replaceValueAtIndex:inPropertyWithKey:withValue:", void, .{ _index, _key, _value });
    }

    pub fn insertValueInPropertyWithKey(_self: *@This(), _value: ?objc.Id, _key: ?*foundation.String) void {
        return objc.msgSend(_self, "insertValue:inPropertyWithKey:", void, .{ _value, _key });
    }

    pub fn coerceValueForKey(_self: *@This(), _value: ?objc.Id, _key: ?*foundation.String) ?objc.Id {
        return objc.msgSend(_self, "coerceValue:forKey:", ?objc.Id, .{ _value, _key });
    }

    pub fn indicesOfObjectsByEvaluatingObjectSpecifier(_self: *@This(), _specifier: ?*foundation.ScriptObjectSpecifier) ?*anyopaque {
        return objc.msgSend(_self, "indicesOfObjectsByEvaluatingObjectSpecifier:", ?*anyopaque, .{_specifier});
    }

    pub fn objectSpecifier(_self: *@This()) ?*foundation.ScriptObjectSpecifier {
        return objc.msgSend(_self, "objectSpecifier", ?*foundation.ScriptObjectSpecifier, .{});
    }

    pub fn isEqualTo(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqualTo:", objc.BOOL, .{_object});
    }

    pub fn isLessThanOrEqualTo(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isLessThanOrEqualTo:", objc.BOOL, .{_object});
    }

    pub fn isLessThan(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isLessThan:", objc.BOOL, .{_object});
    }

    pub fn isGreaterThanOrEqualTo(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isGreaterThanOrEqualTo:", objc.BOOL, .{_object});
    }

    pub fn isGreaterThan(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isGreaterThan:", objc.BOOL, .{_object});
    }

    pub fn isNotEqualTo(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isNotEqualTo:", objc.BOOL, .{_object});
    }

    pub fn doesContain(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "doesContain:", objc.BOOL, .{_object});
    }

    pub fn isLike(_self: *@This(), _object: ?*foundation.String) objc.BOOL {
        return objc.msgSend(_self, "isLike:", objc.BOOL, .{_object});
    }

    pub fn isCaseInsensitiveLike(_self: *@This(), _object: ?*foundation.String) objc.BOOL {
        return objc.msgSend(_self, "isCaseInsensitiveLike:", objc.BOOL, .{_object});
    }

    pub fn scriptingIsEqualTo(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "scriptingIsEqualTo:", objc.BOOL, .{_object});
    }

    pub fn scriptingIsLessThanOrEqualTo(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "scriptingIsLessThanOrEqualTo:", objc.BOOL, .{_object});
    }

    pub fn scriptingIsLessThan(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "scriptingIsLessThan:", objc.BOOL, .{_object});
    }

    pub fn scriptingIsGreaterThanOrEqualTo(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "scriptingIsGreaterThanOrEqualTo:", objc.BOOL, .{_object});
    }

    pub fn scriptingIsGreaterThan(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "scriptingIsGreaterThan:", objc.BOOL, .{_object});
    }

    pub fn scriptingBeginsWith(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "scriptingBeginsWith:", objc.BOOL, .{_object});
    }

    pub fn scriptingEndsWith(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "scriptingEndsWith:", objc.BOOL, .{_object});
    }

    pub fn scriptingContains(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "scriptingContains:", objc.BOOL, .{_object});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*foundation.Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*foundation.Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn supportsSecureCoding() objc.BOOL {
        return objc.msgSend(Internal.class(), "supportsSecureCoding", objc.BOOL, .{});
    }
};

/// https://developer.apple.com/documentation/Symbols/NSSymbolMagicReplaceContentTransition?language=objc
pub const SymbolMagicReplaceContentTransition = opaque {
    pub const Internal = objc.ExternClass("NSSymbolMagicReplaceContentTransition", @This(), SymbolContentTransition, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "description", ?*foundation.String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "debugDescription", ?*foundation.String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*foundation.Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*foundation.MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*foundation.MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*foundation.MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*foundation.MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn version() objc.NSInteger {
        return objc.msgSend(Internal.class(), "version", objc.NSInteger, .{});
    }

    pub fn setVersion(_aVersion: objc.NSInteger) void {
        return objc.msgSend(Internal.class(), "setVersion:", void, .{_aVersion});
    }

    pub fn replacementObjectForCoder(_self: *@This(), _coder: ?*foundation.Coder) ?objc.Id {
        return objc.msgSend(_self, "replacementObjectForCoder:", ?objc.Id, .{_coder});
    }

    pub fn awakeAfterUsingCoder(_self: *@This(), _coder: ?*foundation.Coder) ?objc.Id {
        return objc.msgSend(_self, "awakeAfterUsingCoder:", ?objc.Id, .{_coder});
    }

    pub fn classForCoder(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "classForCoder", objc.Class, .{});
    }

    pub fn poseAsClass(_aClass: objc.Class) void {
        return objc.msgSend(Internal.class(), "poseAsClass:", void, .{_aClass});
    }

    pub fn autoContentAccessingProxy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "autoContentAccessingProxy", ?objc.Id, .{});
    }

    pub fn attemptRecoveryFromErrorOptionIndexDelegateDidRecoverSelectorContextInfo(
        _self: *@This(),
        _error: ?*foundation.Error,
        _recoveryOptionIndex: objc.NSUInteger,
        _delegate: ?objc.Id,
        _didRecoverSelector: objc.Selector,
        _contextInfo: ?*anyopaque,
    ) void {
        return objc.msgSend(_self, "attemptRecoveryFromError:optionIndex:delegate:didRecoverSelector:contextInfo:", void, .{
            _error,
            _recoveryOptionIndex,
            _delegate,
            _didRecoverSelector,
            _contextInfo,
        });
    }

    pub fn attemptRecoveryFromErrorOptionIndex(_self: *@This(), _error: ?*foundation.Error, _recoveryOptionIndex: objc.NSUInteger) objc.BOOL {
        return objc.msgSend(_self, "attemptRecoveryFromError:optionIndex:", objc.BOOL, .{ _error, _recoveryOptionIndex });
    }

    pub fn performSelectorWithObjectAfterDelayInModes(
        _self: *@This(),
        _aSelector: objc.Selector,
        _anArgument: ?objc.Id,
        _delay: foundation.TimeInterval,
        _modes: ?*anyopaque,
    ) void {
        return objc.msgSend(_self, "performSelector:withObject:afterDelay:inModes:", void, .{
            _aSelector,
            _anArgument,
            _delay,
            _modes,
        });
    }

    pub fn performSelectorWithObjectAfterDelay(_self: *@This(), _aSelector: objc.Selector, _anArgument: ?objc.Id, _delay: foundation.TimeInterval) void {
        return objc.msgSend(_self, "performSelector:withObject:afterDelay:", void, .{ _aSelector, _anArgument, _delay });
    }

    pub fn cancelPreviousPerformRequestsWithTargetSelectorObject(_aTarget: ?objc.Id, _aSelector: objc.Selector, _anArgument: ?objc.Id) void {
        return objc.msgSend(Internal.class(), "cancelPreviousPerformRequestsWithTarget:selector:object:", void, .{ _aTarget, _aSelector, _anArgument });
    }

    pub fn cancelPreviousPerformRequestsWithTarget(_aTarget: ?objc.Id) void {
        return objc.msgSend(Internal.class(), "cancelPreviousPerformRequestsWithTarget:", void, .{_aTarget});
    }

    pub fn urlResourceDataDidBecomeAvailable(_self: *@This(), _sender: ?*foundation.URL, _newBytes: ?*foundation.Data) void {
        return objc.msgSend(_self, "URL:resourceDataDidBecomeAvailable:", void, .{ _sender, _newBytes });
    }

    pub fn urlResourceDidFinishLoading(_self: *@This(), _sender: ?*foundation.URL) void {
        return objc.msgSend(_self, "URLResourceDidFinishLoading:", void, .{_sender});
    }

    pub fn urlResourceDidCancelLoading(_self: *@This(), _sender: ?*foundation.URL) void {
        return objc.msgSend(_self, "URLResourceDidCancelLoading:", void, .{_sender});
    }

    pub fn urlResourceDidFailLoadingWithReason(_self: *@This(), _sender: ?*foundation.URL, _reason: ?*foundation.String) void {
        return objc.msgSend(_self, "URL:resourceDidFailLoadingWithReason:", void, .{ _sender, _reason });
    }

    pub fn fileManagerShouldProceedAfterError(_self: *@This(), _fm: ?*foundation.FileManager, _errorInfo: ?*foundation.Dictionary) objc.BOOL {
        return objc.msgSend(_self, "fileManager:shouldProceedAfterError:", objc.BOOL, .{ _fm, _errorInfo });
    }

    pub fn fileManagerWillProcessPath(_self: *@This(), _fm: ?*foundation.FileManager, _path: ?*foundation.String) void {
        return objc.msgSend(_self, "fileManager:willProcessPath:", void, .{ _fm, _path });
    }

    pub fn valueForKey(_self: *@This(), _key: ?*foundation.String) ?objc.Id {
        return objc.msgSend(_self, "valueForKey:", ?objc.Id, .{_key});
    }

    pub fn setValueForKey(_self: *@This(), _value: ?objc.Id, _key: ?*foundation.String) void {
        return objc.msgSend(_self, "setValue:forKey:", void, .{ _value, _key });
    }

    pub fn validateValueForKeyError(_self: *@This(), _ioValue: ?*?objc.Id, _inKey: ?*foundation.String, _outError: ?*?*foundation.Error) objc.BOOL {
        return objc.msgSend(_self, "validateValue:forKey:error:", objc.BOOL, .{ _ioValue, _inKey, _outError });
    }

    pub fn mutableArrayValueForKey(_self: *@This(), _key: ?*foundation.String) ?*foundation.MutableArray {
        return objc.msgSend(_self, "mutableArrayValueForKey:", ?*foundation.MutableArray, .{_key});
    }

    pub fn mutableOrderedSetValueForKey(_self: *@This(), _key: ?*foundation.String) ?*foundation.MutableOrderedSet {
        return objc.msgSend(_self, "mutableOrderedSetValueForKey:", ?*foundation.MutableOrderedSet, .{_key});
    }

    pub fn mutableSetValueForKey(_self: *@This(), _key: ?*foundation.String) ?*foundation.MutableSet {
        return objc.msgSend(_self, "mutableSetValueForKey:", ?*foundation.MutableSet, .{_key});
    }

    pub fn valueForKeyPath(_self: *@This(), _keyPath: ?*foundation.String) ?objc.Id {
        return objc.msgSend(_self, "valueForKeyPath:", ?objc.Id, .{_keyPath});
    }

    pub fn setValueForKeyPath(_self: *@This(), _value: ?objc.Id, _keyPath: ?*foundation.String) void {
        return objc.msgSend(_self, "setValue:forKeyPath:", void, .{ _value, _keyPath });
    }

    pub fn validateValueForKeyPathError(_self: *@This(), _ioValue: ?*?objc.Id, _inKeyPath: ?*foundation.String, _outError: ?*?*foundation.Error) objc.BOOL {
        return objc.msgSend(_self, "validateValue:forKeyPath:error:", objc.BOOL, .{ _ioValue, _inKeyPath, _outError });
    }

    pub fn mutableArrayValueForKeyPath(_self: *@This(), _keyPath: ?*foundation.String) ?*foundation.MutableArray {
        return objc.msgSend(_self, "mutableArrayValueForKeyPath:", ?*foundation.MutableArray, .{_keyPath});
    }

    pub fn mutableOrderedSetValueForKeyPath(_self: *@This(), _keyPath: ?*foundation.String) ?*foundation.MutableOrderedSet {
        return objc.msgSend(_self, "mutableOrderedSetValueForKeyPath:", ?*foundation.MutableOrderedSet, .{_keyPath});
    }

    pub fn mutableSetValueForKeyPath(_self: *@This(), _keyPath: ?*foundation.String) ?*foundation.MutableSet {
        return objc.msgSend(_self, "mutableSetValueForKeyPath:", ?*foundation.MutableSet, .{_keyPath});
    }

    pub fn valueForUndefinedKey(_self: *@This(), _key: ?*foundation.String) ?objc.Id {
        return objc.msgSend(_self, "valueForUndefinedKey:", ?objc.Id, .{_key});
    }

    pub fn setValueForUndefinedKey(_self: *@This(), _value: ?objc.Id, _key: ?*foundation.String) void {
        return objc.msgSend(_self, "setValue:forUndefinedKey:", void, .{ _value, _key });
    }

    pub fn setNilValueForKey(_self: *@This(), _key: ?*foundation.String) void {
        return objc.msgSend(_self, "setNilValueForKey:", void, .{_key});
    }

    pub fn dictionaryWithValuesForKeys(_self: *@This(), _keys: ?*anyopaque) ?*anyopaque {
        return objc.msgSend(_self, "dictionaryWithValuesForKeys:", ?*anyopaque, .{_keys});
    }

    pub fn setValuesForKeysWithDictionary(_self: *@This(), _keyedValues: ?*anyopaque) void {
        return objc.msgSend(_self, "setValuesForKeysWithDictionary:", void, .{_keyedValues});
    }

    pub fn accessInstanceVariablesDirectly() objc.BOOL {
        return objc.msgSend(Internal.class(), "accessInstanceVariablesDirectly", objc.BOOL, .{});
    }

    pub fn useStoredAccessor() objc.BOOL {
        return objc.msgSend(Internal.class(), "useStoredAccessor", objc.BOOL, .{});
    }

    pub fn storedValueForKey(_self: *@This(), _key: ?*foundation.String) ?objc.Id {
        return objc.msgSend(_self, "storedValueForKey:", ?objc.Id, .{_key});
    }

    pub fn takeStoredValueForKey(_self: *@This(), _value: ?objc.Id, _key: ?*foundation.String) void {
        return objc.msgSend(_self, "takeStoredValue:forKey:", void, .{ _value, _key });
    }

    pub fn takeValueForKey(_self: *@This(), _value: ?objc.Id, _key: ?*foundation.String) void {
        return objc.msgSend(_self, "takeValue:forKey:", void, .{ _value, _key });
    }

    pub fn takeValueForKeyPath(_self: *@This(), _value: ?objc.Id, _keyPath: ?*foundation.String) void {
        return objc.msgSend(_self, "takeValue:forKeyPath:", void, .{ _value, _keyPath });
    }

    pub fn handleQueryWithUnboundKey(_self: *@This(), _key: ?*foundation.String) ?objc.Id {
        return objc.msgSend(_self, "handleQueryWithUnboundKey:", ?objc.Id, .{_key});
    }

    pub fn handleTakeValueForUnboundKey(_self: *@This(), _value: ?objc.Id, _key: ?*foundation.String) void {
        return objc.msgSend(_self, "handleTakeValue:forUnboundKey:", void, .{ _value, _key });
    }

    pub fn unableToSetNilForKey(_self: *@This(), _key: ?*foundation.String) void {
        return objc.msgSend(_self, "unableToSetNilForKey:", void, .{_key});
    }

    pub fn valuesForKeys(_self: *@This(), _keys: ?*foundation.Array) ?*foundation.Dictionary {
        return objc.msgSend(_self, "valuesForKeys:", ?*foundation.Dictionary, .{_keys});
    }

    pub fn takeValuesFromDictionary(_self: *@This(), _properties: ?*foundation.Dictionary) void {
        return objc.msgSend(_self, "takeValuesFromDictionary:", void, .{_properties});
    }

    pub fn observeValueForKeyPathOfObjectChangeContext(
        _self: *@This(),
        _keyPath: ?*foundation.String,
        _object: ?objc.Id,
        _change: ?*anyopaque,
        _context: ?*anyopaque,
    ) void {
        return objc.msgSend(_self, "observeValueForKeyPath:ofObject:change:context:", void, .{
            _keyPath,
            _object,
            _change,
            _context,
        });
    }

    pub fn addObserverForKeyPathOptionsContext(
        _self: *@This(),
        _observer: ?*objc.NSObject,
        _keyPath: ?*foundation.String,
        _options: foundation.KeyValueObservingOptions,
        _context: ?*anyopaque,
    ) void {
        return objc.msgSend(_self, "addObserver:forKeyPath:options:context:", void, .{
            _observer,
            _keyPath,
            _options,
            _context,
        });
    }

    pub fn removeObserverForKeyPathContext(_self: *@This(), _observer: ?*objc.NSObject, _keyPath: ?*foundation.String, _context: ?*anyopaque) void {
        return objc.msgSend(_self, "removeObserver:forKeyPath:context:", void, .{ _observer, _keyPath, _context });
    }

    pub fn removeObserverForKeyPath(_self: *@This(), _observer: ?*objc.NSObject, _keyPath: ?*foundation.String) void {
        return objc.msgSend(_self, "removeObserver:forKeyPath:", void, .{ _observer, _keyPath });
    }

    pub fn willChangeValueForKey(_self: *@This(), _key: ?*foundation.String) void {
        return objc.msgSend(_self, "willChangeValueForKey:", void, .{_key});
    }

    pub fn didChangeValueForKey(_self: *@This(), _key: ?*foundation.String) void {
        return objc.msgSend(_self, "didChangeValueForKey:", void, .{_key});
    }

    pub fn willChangeValuesAtIndexesForKey(_self: *@This(), _changeKind: foundation.KeyValueChange, _indexes: ?*foundation.IndexSet, _key: ?*foundation.String) void {
        return objc.msgSend(_self, "willChange:valuesAtIndexes:forKey:", void, .{ _changeKind, _indexes, _key });
    }

    pub fn didChangeValuesAtIndexesForKey(_self: *@This(), _changeKind: foundation.KeyValueChange, _indexes: ?*foundation.IndexSet, _key: ?*foundation.String) void {
        return objc.msgSend(_self, "didChange:valuesAtIndexes:forKey:", void, .{ _changeKind, _indexes, _key });
    }

    pub fn willChangeValueForKeyWithSetMutationUsingObjects(_self: *@This(), _key: ?*foundation.String, _mutationKind: foundation.KeyValueSetMutationKind, _objects: ?*foundation.Set) void {
        return objc.msgSend(_self, "willChangeValueForKey:withSetMutation:usingObjects:", void, .{ _key, _mutationKind, _objects });
    }

    pub fn didChangeValueForKeyWithSetMutationUsingObjects(_self: *@This(), _key: ?*foundation.String, _mutationKind: foundation.KeyValueSetMutationKind, _objects: ?*foundation.Set) void {
        return objc.msgSend(_self, "didChangeValueForKey:withSetMutation:usingObjects:", void, .{ _key, _mutationKind, _objects });
    }

    pub fn keyPathsForValuesAffectingValueForKey(_key: ?*foundation.String) ?*anyopaque {
        return objc.msgSend(Internal.class(), "keyPathsForValuesAffectingValueForKey:", ?*anyopaque, .{_key});
    }

    pub fn automaticallyNotifiesObserversForKey(_key: ?*foundation.String) objc.BOOL {
        return objc.msgSend(Internal.class(), "automaticallyNotifiesObserversForKey:", objc.BOOL, .{_key});
    }

    pub fn observationInfo(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "observationInfo", ?*anyopaque, .{});
    }

    pub fn setObservationInfo(_self: *@This(), _observationInfo: ?*anyopaque) void {
        return objc.msgSend(_self, "setObservationInfo:", void, .{_observationInfo});
    }

    pub fn setKeysTriggerChangeNotificationsForDependentKey(_keys: ?*foundation.Array, _dependentKey: ?*foundation.String) void {
        return objc.msgSend(Internal.class(), "setKeys:triggerChangeNotificationsForDependentKey:", void, .{ _keys, _dependentKey });
    }

    pub fn setSharedObservers(_self: *@This(), _sharedObservers: ?*foundation.KeyValueSharedObserversSnapshot) void {
        return objc.msgSend(_self, "setSharedObservers:", void, .{_sharedObservers});
    }

    pub fn replacementObjectForKeyedArchiver(_self: *@This(), _archiver: ?*foundation.KeyedArchiver) ?objc.Id {
        return objc.msgSend(_self, "replacementObjectForKeyedArchiver:", ?objc.Id, .{_archiver});
    }

    pub fn classFallbacksForKeyedArchiver() ?*anyopaque {
        return objc.msgSend(Internal.class(), "classFallbacksForKeyedArchiver", ?*anyopaque, .{});
    }

    pub fn classForKeyedArchiver(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "classForKeyedArchiver", objc.Class, .{});
    }

    pub fn classForKeyedUnarchiver() objc.Class {
        return objc.msgSend(Internal.class(), "classForKeyedUnarchiver", objc.Class, .{});
    }

    pub fn performSelectorOnMainThreadWithObjectWaitUntilDoneModes(
        _self: *@This(),
        _aSelector: objc.Selector,
        _arg: ?objc.Id,
        _wait: objc.BOOL,
        _array: ?*anyopaque,
    ) void {
        return objc.msgSend(_self, "performSelectorOnMainThread:withObject:waitUntilDone:modes:", void, .{
            _aSelector,
            _arg,
            _wait,
            _array,
        });
    }

    pub fn performSelectorOnMainThreadWithObjectWaitUntilDone(_self: *@This(), _aSelector: objc.Selector, _arg: ?objc.Id, _wait: objc.BOOL) void {
        return objc.msgSend(_self, "performSelectorOnMainThread:withObject:waitUntilDone:", void, .{ _aSelector, _arg, _wait });
    }

    pub fn performSelectorOnThreadWithObjectWaitUntilDoneModes(
        _self: *@This(),
        _aSelector: objc.Selector,
        _thr: ?*foundation.Thread,
        _arg: ?objc.Id,
        _wait: objc.BOOL,
        _array: ?*anyopaque,
    ) void {
        return objc.msgSend(_self, "performSelector:onThread:withObject:waitUntilDone:modes:", void, .{
            _aSelector,
            _thr,
            _arg,
            _wait,
            _array,
        });
    }

    pub fn performSelectorOnThreadWithObjectWaitUntilDone(
        _self: *@This(),
        _aSelector: objc.Selector,
        _thr: ?*foundation.Thread,
        _arg: ?objc.Id,
        _wait: objc.BOOL,
    ) void {
        return objc.msgSend(_self, "performSelector:onThread:withObject:waitUntilDone:", void, .{
            _aSelector,
            _thr,
            _arg,
            _wait,
        });
    }

    pub fn performSelectorInBackgroundWithObject(_self: *@This(), _aSelector: objc.Selector, _arg: ?objc.Id) void {
        return objc.msgSend(_self, "performSelectorInBackground:withObject:", void, .{ _aSelector, _arg });
    }

    pub fn replacementObjectForArchiver(_self: *@This(), _archiver: ?*foundation.Archiver) ?objc.Id {
        return objc.msgSend(_self, "replacementObjectForArchiver:", ?objc.Id, .{_archiver});
    }

    pub fn classForArchiver(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "classForArchiver", objc.Class, .{});
    }

    pub fn replacementObjectForPortCoder(_self: *@This(), _coder: ?*foundation.PortCoder) ?objc.Id {
        return objc.msgSend(_self, "replacementObjectForPortCoder:", ?objc.Id, .{_coder});
    }

    pub fn classForPortCoder(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "classForPortCoder", objc.Class, .{});
    }

    pub fn inverseForRelationshipKey(_self: *@This(), _relationshipKey: ?*foundation.String) ?*foundation.String {
        return objc.msgSend(_self, "inverseForRelationshipKey:", ?*foundation.String, .{_relationshipKey});
    }

    pub fn classDescription(_self: *@This()) ?*foundation.ClassDescription {
        return objc.msgSend(_self, "classDescription", ?*foundation.ClassDescription, .{});
    }

    pub fn attributeKeys(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "attributeKeys", ?*anyopaque, .{});
    }

    pub fn toOneRelationshipKeys(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "toOneRelationshipKeys", ?*anyopaque, .{});
    }

    pub fn toManyRelationshipKeys(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "toManyRelationshipKeys", ?*anyopaque, .{});
    }

    pub fn scriptingValueForSpecifier(_self: *@This(), _objectSpecifier: ?*foundation.ScriptObjectSpecifier) ?objc.Id {
        return objc.msgSend(_self, "scriptingValueForSpecifier:", ?objc.Id, .{_objectSpecifier});
    }

    pub fn copyScriptingValueForKeyWithProperties(_self: *@This(), _value: ?objc.Id, _key: ?*foundation.String, _properties: ?*anyopaque) ?objc.Id {
        return objc.msgSend(_self, "copyScriptingValue:forKey:withProperties:", ?objc.Id, .{ _value, _key, _properties });
    }

    pub fn newScriptingObjectOfClassForValueForKeyWithContentsValueProperties(
        _self: *@This(),
        _objectClass: objc.Class,
        _key: ?*foundation.String,
        _contentsValue: ?objc.Id,
        _properties: ?*anyopaque,
    ) ?objc.Id {
        return objc.msgSend(_self, "newScriptingObjectOfClass:forValueForKey:withContentsValue:properties:", ?objc.Id, .{
            _objectClass,
            _key,
            _contentsValue,
            _properties,
        });
    }

    pub fn scriptingProperties(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "scriptingProperties", ?*anyopaque, .{});
    }

    pub fn setScriptingProperties(_self: *@This(), _scriptingProperties: ?*anyopaque) void {
        return objc.msgSend(_self, "setScriptingProperties:", void, .{_scriptingProperties});
    }

    pub fn classCode(_self: *@This()) objc.FourCharCode {
        return objc.msgSend(_self, "classCode", objc.FourCharCode, .{});
    }

    pub fn className(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "className", ?*foundation.String, .{});
    }

    pub fn valueAtIndexInPropertyWithKey(_self: *@This(), _index: objc.NSUInteger, _key: ?*foundation.String) ?objc.Id {
        return objc.msgSend(_self, "valueAtIndex:inPropertyWithKey:", ?objc.Id, .{ _index, _key });
    }

    pub fn valueWithNameInPropertyWithKey(_self: *@This(), _name: ?*foundation.String, _key: ?*foundation.String) ?objc.Id {
        return objc.msgSend(_self, "valueWithName:inPropertyWithKey:", ?objc.Id, .{ _name, _key });
    }

    pub fn valueWithUniqueIDInPropertyWithKey(_self: *@This(), _uniqueID: ?objc.Id, _key: ?*foundation.String) ?objc.Id {
        return objc.msgSend(_self, "valueWithUniqueID:inPropertyWithKey:", ?objc.Id, .{ _uniqueID, _key });
    }

    pub fn insertValueAtIndexInPropertyWithKey(_self: *@This(), _value: ?objc.Id, _index: objc.NSUInteger, _key: ?*foundation.String) void {
        return objc.msgSend(_self, "insertValue:atIndex:inPropertyWithKey:", void, .{ _value, _index, _key });
    }

    pub fn removeValueAtIndexFromPropertyWithKey(_self: *@This(), _index: objc.NSUInteger, _key: ?*foundation.String) void {
        return objc.msgSend(_self, "removeValueAtIndex:fromPropertyWithKey:", void, .{ _index, _key });
    }

    pub fn replaceValueAtIndexInPropertyWithKeyWithValue(_self: *@This(), _index: objc.NSUInteger, _key: ?*foundation.String, _value: ?objc.Id) void {
        return objc.msgSend(_self, "replaceValueAtIndex:inPropertyWithKey:withValue:", void, .{ _index, _key, _value });
    }

    pub fn insertValueInPropertyWithKey(_self: *@This(), _value: ?objc.Id, _key: ?*foundation.String) void {
        return objc.msgSend(_self, "insertValue:inPropertyWithKey:", void, .{ _value, _key });
    }

    pub fn coerceValueForKey(_self: *@This(), _value: ?objc.Id, _key: ?*foundation.String) ?objc.Id {
        return objc.msgSend(_self, "coerceValue:forKey:", ?objc.Id, .{ _value, _key });
    }

    pub fn indicesOfObjectsByEvaluatingObjectSpecifier(_self: *@This(), _specifier: ?*foundation.ScriptObjectSpecifier) ?*anyopaque {
        return objc.msgSend(_self, "indicesOfObjectsByEvaluatingObjectSpecifier:", ?*anyopaque, .{_specifier});
    }

    pub fn objectSpecifier(_self: *@This()) ?*foundation.ScriptObjectSpecifier {
        return objc.msgSend(_self, "objectSpecifier", ?*foundation.ScriptObjectSpecifier, .{});
    }

    pub fn isEqualTo(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqualTo:", objc.BOOL, .{_object});
    }

    pub fn isLessThanOrEqualTo(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isLessThanOrEqualTo:", objc.BOOL, .{_object});
    }

    pub fn isLessThan(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isLessThan:", objc.BOOL, .{_object});
    }

    pub fn isGreaterThanOrEqualTo(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isGreaterThanOrEqualTo:", objc.BOOL, .{_object});
    }

    pub fn isGreaterThan(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isGreaterThan:", objc.BOOL, .{_object});
    }

    pub fn isNotEqualTo(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isNotEqualTo:", objc.BOOL, .{_object});
    }

    pub fn doesContain(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "doesContain:", objc.BOOL, .{_object});
    }

    pub fn isLike(_self: *@This(), _object: ?*foundation.String) objc.BOOL {
        return objc.msgSend(_self, "isLike:", objc.BOOL, .{_object});
    }

    pub fn isCaseInsensitiveLike(_self: *@This(), _object: ?*foundation.String) objc.BOOL {
        return objc.msgSend(_self, "isCaseInsensitiveLike:", objc.BOOL, .{_object});
    }

    pub fn scriptingIsEqualTo(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "scriptingIsEqualTo:", objc.BOOL, .{_object});
    }

    pub fn scriptingIsLessThanOrEqualTo(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "scriptingIsLessThanOrEqualTo:", objc.BOOL, .{_object});
    }

    pub fn scriptingIsLessThan(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "scriptingIsLessThan:", objc.BOOL, .{_object});
    }

    pub fn scriptingIsGreaterThanOrEqualTo(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "scriptingIsGreaterThanOrEqualTo:", objc.BOOL, .{_object});
    }

    pub fn scriptingIsGreaterThan(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "scriptingIsGreaterThan:", objc.BOOL, .{_object});
    }

    pub fn scriptingBeginsWith(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "scriptingBeginsWith:", objc.BOOL, .{_object});
    }

    pub fn scriptingEndsWith(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "scriptingEndsWith:", objc.BOOL, .{_object});
    }

    pub fn scriptingContains(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "scriptingContains:", objc.BOOL, .{_object});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*foundation.Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*foundation.Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn supportsSecureCoding() objc.BOOL {
        return objc.msgSend(Internal.class(), "supportsSecureCoding", objc.BOOL, .{});
    }
};

/// https://developer.apple.com/documentation/Symbols/NSSymbolReplaceContentTransition?language=objc
pub const SymbolReplaceContentTransition = opaque {
    pub const Internal = objc.ExternClass("NSSymbolReplaceContentTransition", @This(), SymbolContentTransition, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "description", ?*foundation.String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "debugDescription", ?*foundation.String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*foundation.Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*foundation.MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*foundation.MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*foundation.MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*foundation.MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn version() objc.NSInteger {
        return objc.msgSend(Internal.class(), "version", objc.NSInteger, .{});
    }

    pub fn setVersion(_aVersion: objc.NSInteger) void {
        return objc.msgSend(Internal.class(), "setVersion:", void, .{_aVersion});
    }

    pub fn replacementObjectForCoder(_self: *@This(), _coder: ?*foundation.Coder) ?objc.Id {
        return objc.msgSend(_self, "replacementObjectForCoder:", ?objc.Id, .{_coder});
    }

    pub fn awakeAfterUsingCoder(_self: *@This(), _coder: ?*foundation.Coder) ?objc.Id {
        return objc.msgSend(_self, "awakeAfterUsingCoder:", ?objc.Id, .{_coder});
    }

    pub fn classForCoder(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "classForCoder", objc.Class, .{});
    }

    pub fn poseAsClass(_aClass: objc.Class) void {
        return objc.msgSend(Internal.class(), "poseAsClass:", void, .{_aClass});
    }

    pub fn autoContentAccessingProxy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "autoContentAccessingProxy", ?objc.Id, .{});
    }

    pub fn attemptRecoveryFromErrorOptionIndexDelegateDidRecoverSelectorContextInfo(
        _self: *@This(),
        _error: ?*foundation.Error,
        _recoveryOptionIndex: objc.NSUInteger,
        _delegate: ?objc.Id,
        _didRecoverSelector: objc.Selector,
        _contextInfo: ?*anyopaque,
    ) void {
        return objc.msgSend(_self, "attemptRecoveryFromError:optionIndex:delegate:didRecoverSelector:contextInfo:", void, .{
            _error,
            _recoveryOptionIndex,
            _delegate,
            _didRecoverSelector,
            _contextInfo,
        });
    }

    pub fn attemptRecoveryFromErrorOptionIndex(_self: *@This(), _error: ?*foundation.Error, _recoveryOptionIndex: objc.NSUInteger) objc.BOOL {
        return objc.msgSend(_self, "attemptRecoveryFromError:optionIndex:", objc.BOOL, .{ _error, _recoveryOptionIndex });
    }

    pub fn performSelectorWithObjectAfterDelayInModes(
        _self: *@This(),
        _aSelector: objc.Selector,
        _anArgument: ?objc.Id,
        _delay: foundation.TimeInterval,
        _modes: ?*anyopaque,
    ) void {
        return objc.msgSend(_self, "performSelector:withObject:afterDelay:inModes:", void, .{
            _aSelector,
            _anArgument,
            _delay,
            _modes,
        });
    }

    pub fn performSelectorWithObjectAfterDelay(_self: *@This(), _aSelector: objc.Selector, _anArgument: ?objc.Id, _delay: foundation.TimeInterval) void {
        return objc.msgSend(_self, "performSelector:withObject:afterDelay:", void, .{ _aSelector, _anArgument, _delay });
    }

    pub fn cancelPreviousPerformRequestsWithTargetSelectorObject(_aTarget: ?objc.Id, _aSelector: objc.Selector, _anArgument: ?objc.Id) void {
        return objc.msgSend(Internal.class(), "cancelPreviousPerformRequestsWithTarget:selector:object:", void, .{ _aTarget, _aSelector, _anArgument });
    }

    pub fn cancelPreviousPerformRequestsWithTarget(_aTarget: ?objc.Id) void {
        return objc.msgSend(Internal.class(), "cancelPreviousPerformRequestsWithTarget:", void, .{_aTarget});
    }

    pub fn urlResourceDataDidBecomeAvailable(_self: *@This(), _sender: ?*foundation.URL, _newBytes: ?*foundation.Data) void {
        return objc.msgSend(_self, "URL:resourceDataDidBecomeAvailable:", void, .{ _sender, _newBytes });
    }

    pub fn urlResourceDidFinishLoading(_self: *@This(), _sender: ?*foundation.URL) void {
        return objc.msgSend(_self, "URLResourceDidFinishLoading:", void, .{_sender});
    }

    pub fn urlResourceDidCancelLoading(_self: *@This(), _sender: ?*foundation.URL) void {
        return objc.msgSend(_self, "URLResourceDidCancelLoading:", void, .{_sender});
    }

    pub fn urlResourceDidFailLoadingWithReason(_self: *@This(), _sender: ?*foundation.URL, _reason: ?*foundation.String) void {
        return objc.msgSend(_self, "URL:resourceDidFailLoadingWithReason:", void, .{ _sender, _reason });
    }

    pub fn fileManagerShouldProceedAfterError(_self: *@This(), _fm: ?*foundation.FileManager, _errorInfo: ?*foundation.Dictionary) objc.BOOL {
        return objc.msgSend(_self, "fileManager:shouldProceedAfterError:", objc.BOOL, .{ _fm, _errorInfo });
    }

    pub fn fileManagerWillProcessPath(_self: *@This(), _fm: ?*foundation.FileManager, _path: ?*foundation.String) void {
        return objc.msgSend(_self, "fileManager:willProcessPath:", void, .{ _fm, _path });
    }

    pub fn valueForKey(_self: *@This(), _key: ?*foundation.String) ?objc.Id {
        return objc.msgSend(_self, "valueForKey:", ?objc.Id, .{_key});
    }

    pub fn setValueForKey(_self: *@This(), _value: ?objc.Id, _key: ?*foundation.String) void {
        return objc.msgSend(_self, "setValue:forKey:", void, .{ _value, _key });
    }

    pub fn validateValueForKeyError(_self: *@This(), _ioValue: ?*?objc.Id, _inKey: ?*foundation.String, _outError: ?*?*foundation.Error) objc.BOOL {
        return objc.msgSend(_self, "validateValue:forKey:error:", objc.BOOL, .{ _ioValue, _inKey, _outError });
    }

    pub fn mutableArrayValueForKey(_self: *@This(), _key: ?*foundation.String) ?*foundation.MutableArray {
        return objc.msgSend(_self, "mutableArrayValueForKey:", ?*foundation.MutableArray, .{_key});
    }

    pub fn mutableOrderedSetValueForKey(_self: *@This(), _key: ?*foundation.String) ?*foundation.MutableOrderedSet {
        return objc.msgSend(_self, "mutableOrderedSetValueForKey:", ?*foundation.MutableOrderedSet, .{_key});
    }

    pub fn mutableSetValueForKey(_self: *@This(), _key: ?*foundation.String) ?*foundation.MutableSet {
        return objc.msgSend(_self, "mutableSetValueForKey:", ?*foundation.MutableSet, .{_key});
    }

    pub fn valueForKeyPath(_self: *@This(), _keyPath: ?*foundation.String) ?objc.Id {
        return objc.msgSend(_self, "valueForKeyPath:", ?objc.Id, .{_keyPath});
    }

    pub fn setValueForKeyPath(_self: *@This(), _value: ?objc.Id, _keyPath: ?*foundation.String) void {
        return objc.msgSend(_self, "setValue:forKeyPath:", void, .{ _value, _keyPath });
    }

    pub fn validateValueForKeyPathError(_self: *@This(), _ioValue: ?*?objc.Id, _inKeyPath: ?*foundation.String, _outError: ?*?*foundation.Error) objc.BOOL {
        return objc.msgSend(_self, "validateValue:forKeyPath:error:", objc.BOOL, .{ _ioValue, _inKeyPath, _outError });
    }

    pub fn mutableArrayValueForKeyPath(_self: *@This(), _keyPath: ?*foundation.String) ?*foundation.MutableArray {
        return objc.msgSend(_self, "mutableArrayValueForKeyPath:", ?*foundation.MutableArray, .{_keyPath});
    }

    pub fn mutableOrderedSetValueForKeyPath(_self: *@This(), _keyPath: ?*foundation.String) ?*foundation.MutableOrderedSet {
        return objc.msgSend(_self, "mutableOrderedSetValueForKeyPath:", ?*foundation.MutableOrderedSet, .{_keyPath});
    }

    pub fn mutableSetValueForKeyPath(_self: *@This(), _keyPath: ?*foundation.String) ?*foundation.MutableSet {
        return objc.msgSend(_self, "mutableSetValueForKeyPath:", ?*foundation.MutableSet, .{_keyPath});
    }

    pub fn valueForUndefinedKey(_self: *@This(), _key: ?*foundation.String) ?objc.Id {
        return objc.msgSend(_self, "valueForUndefinedKey:", ?objc.Id, .{_key});
    }

    pub fn setValueForUndefinedKey(_self: *@This(), _value: ?objc.Id, _key: ?*foundation.String) void {
        return objc.msgSend(_self, "setValue:forUndefinedKey:", void, .{ _value, _key });
    }

    pub fn setNilValueForKey(_self: *@This(), _key: ?*foundation.String) void {
        return objc.msgSend(_self, "setNilValueForKey:", void, .{_key});
    }

    pub fn dictionaryWithValuesForKeys(_self: *@This(), _keys: ?*anyopaque) ?*anyopaque {
        return objc.msgSend(_self, "dictionaryWithValuesForKeys:", ?*anyopaque, .{_keys});
    }

    pub fn setValuesForKeysWithDictionary(_self: *@This(), _keyedValues: ?*anyopaque) void {
        return objc.msgSend(_self, "setValuesForKeysWithDictionary:", void, .{_keyedValues});
    }

    pub fn accessInstanceVariablesDirectly() objc.BOOL {
        return objc.msgSend(Internal.class(), "accessInstanceVariablesDirectly", objc.BOOL, .{});
    }

    pub fn useStoredAccessor() objc.BOOL {
        return objc.msgSend(Internal.class(), "useStoredAccessor", objc.BOOL, .{});
    }

    pub fn storedValueForKey(_self: *@This(), _key: ?*foundation.String) ?objc.Id {
        return objc.msgSend(_self, "storedValueForKey:", ?objc.Id, .{_key});
    }

    pub fn takeStoredValueForKey(_self: *@This(), _value: ?objc.Id, _key: ?*foundation.String) void {
        return objc.msgSend(_self, "takeStoredValue:forKey:", void, .{ _value, _key });
    }

    pub fn takeValueForKey(_self: *@This(), _value: ?objc.Id, _key: ?*foundation.String) void {
        return objc.msgSend(_self, "takeValue:forKey:", void, .{ _value, _key });
    }

    pub fn takeValueForKeyPath(_self: *@This(), _value: ?objc.Id, _keyPath: ?*foundation.String) void {
        return objc.msgSend(_self, "takeValue:forKeyPath:", void, .{ _value, _keyPath });
    }

    pub fn handleQueryWithUnboundKey(_self: *@This(), _key: ?*foundation.String) ?objc.Id {
        return objc.msgSend(_self, "handleQueryWithUnboundKey:", ?objc.Id, .{_key});
    }

    pub fn handleTakeValueForUnboundKey(_self: *@This(), _value: ?objc.Id, _key: ?*foundation.String) void {
        return objc.msgSend(_self, "handleTakeValue:forUnboundKey:", void, .{ _value, _key });
    }

    pub fn unableToSetNilForKey(_self: *@This(), _key: ?*foundation.String) void {
        return objc.msgSend(_self, "unableToSetNilForKey:", void, .{_key});
    }

    pub fn valuesForKeys(_self: *@This(), _keys: ?*foundation.Array) ?*foundation.Dictionary {
        return objc.msgSend(_self, "valuesForKeys:", ?*foundation.Dictionary, .{_keys});
    }

    pub fn takeValuesFromDictionary(_self: *@This(), _properties: ?*foundation.Dictionary) void {
        return objc.msgSend(_self, "takeValuesFromDictionary:", void, .{_properties});
    }

    pub fn observeValueForKeyPathOfObjectChangeContext(
        _self: *@This(),
        _keyPath: ?*foundation.String,
        _object: ?objc.Id,
        _change: ?*anyopaque,
        _context: ?*anyopaque,
    ) void {
        return objc.msgSend(_self, "observeValueForKeyPath:ofObject:change:context:", void, .{
            _keyPath,
            _object,
            _change,
            _context,
        });
    }

    pub fn addObserverForKeyPathOptionsContext(
        _self: *@This(),
        _observer: ?*objc.NSObject,
        _keyPath: ?*foundation.String,
        _options: foundation.KeyValueObservingOptions,
        _context: ?*anyopaque,
    ) void {
        return objc.msgSend(_self, "addObserver:forKeyPath:options:context:", void, .{
            _observer,
            _keyPath,
            _options,
            _context,
        });
    }

    pub fn removeObserverForKeyPathContext(_self: *@This(), _observer: ?*objc.NSObject, _keyPath: ?*foundation.String, _context: ?*anyopaque) void {
        return objc.msgSend(_self, "removeObserver:forKeyPath:context:", void, .{ _observer, _keyPath, _context });
    }

    pub fn removeObserverForKeyPath(_self: *@This(), _observer: ?*objc.NSObject, _keyPath: ?*foundation.String) void {
        return objc.msgSend(_self, "removeObserver:forKeyPath:", void, .{ _observer, _keyPath });
    }

    pub fn willChangeValueForKey(_self: *@This(), _key: ?*foundation.String) void {
        return objc.msgSend(_self, "willChangeValueForKey:", void, .{_key});
    }

    pub fn didChangeValueForKey(_self: *@This(), _key: ?*foundation.String) void {
        return objc.msgSend(_self, "didChangeValueForKey:", void, .{_key});
    }

    pub fn willChangeValuesAtIndexesForKey(_self: *@This(), _changeKind: foundation.KeyValueChange, _indexes: ?*foundation.IndexSet, _key: ?*foundation.String) void {
        return objc.msgSend(_self, "willChange:valuesAtIndexes:forKey:", void, .{ _changeKind, _indexes, _key });
    }

    pub fn didChangeValuesAtIndexesForKey(_self: *@This(), _changeKind: foundation.KeyValueChange, _indexes: ?*foundation.IndexSet, _key: ?*foundation.String) void {
        return objc.msgSend(_self, "didChange:valuesAtIndexes:forKey:", void, .{ _changeKind, _indexes, _key });
    }

    pub fn willChangeValueForKeyWithSetMutationUsingObjects(_self: *@This(), _key: ?*foundation.String, _mutationKind: foundation.KeyValueSetMutationKind, _objects: ?*foundation.Set) void {
        return objc.msgSend(_self, "willChangeValueForKey:withSetMutation:usingObjects:", void, .{ _key, _mutationKind, _objects });
    }

    pub fn didChangeValueForKeyWithSetMutationUsingObjects(_self: *@This(), _key: ?*foundation.String, _mutationKind: foundation.KeyValueSetMutationKind, _objects: ?*foundation.Set) void {
        return objc.msgSend(_self, "didChangeValueForKey:withSetMutation:usingObjects:", void, .{ _key, _mutationKind, _objects });
    }

    pub fn keyPathsForValuesAffectingValueForKey(_key: ?*foundation.String) ?*anyopaque {
        return objc.msgSend(Internal.class(), "keyPathsForValuesAffectingValueForKey:", ?*anyopaque, .{_key});
    }

    pub fn automaticallyNotifiesObserversForKey(_key: ?*foundation.String) objc.BOOL {
        return objc.msgSend(Internal.class(), "automaticallyNotifiesObserversForKey:", objc.BOOL, .{_key});
    }

    pub fn observationInfo(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "observationInfo", ?*anyopaque, .{});
    }

    pub fn setObservationInfo(_self: *@This(), _observationInfo: ?*anyopaque) void {
        return objc.msgSend(_self, "setObservationInfo:", void, .{_observationInfo});
    }

    pub fn setKeysTriggerChangeNotificationsForDependentKey(_keys: ?*foundation.Array, _dependentKey: ?*foundation.String) void {
        return objc.msgSend(Internal.class(), "setKeys:triggerChangeNotificationsForDependentKey:", void, .{ _keys, _dependentKey });
    }

    pub fn setSharedObservers(_self: *@This(), _sharedObservers: ?*foundation.KeyValueSharedObserversSnapshot) void {
        return objc.msgSend(_self, "setSharedObservers:", void, .{_sharedObservers});
    }

    pub fn replacementObjectForKeyedArchiver(_self: *@This(), _archiver: ?*foundation.KeyedArchiver) ?objc.Id {
        return objc.msgSend(_self, "replacementObjectForKeyedArchiver:", ?objc.Id, .{_archiver});
    }

    pub fn classFallbacksForKeyedArchiver() ?*anyopaque {
        return objc.msgSend(Internal.class(), "classFallbacksForKeyedArchiver", ?*anyopaque, .{});
    }

    pub fn classForKeyedArchiver(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "classForKeyedArchiver", objc.Class, .{});
    }

    pub fn classForKeyedUnarchiver() objc.Class {
        return objc.msgSend(Internal.class(), "classForKeyedUnarchiver", objc.Class, .{});
    }

    pub fn performSelectorOnMainThreadWithObjectWaitUntilDoneModes(
        _self: *@This(),
        _aSelector: objc.Selector,
        _arg: ?objc.Id,
        _wait: objc.BOOL,
        _array: ?*anyopaque,
    ) void {
        return objc.msgSend(_self, "performSelectorOnMainThread:withObject:waitUntilDone:modes:", void, .{
            _aSelector,
            _arg,
            _wait,
            _array,
        });
    }

    pub fn performSelectorOnMainThreadWithObjectWaitUntilDone(_self: *@This(), _aSelector: objc.Selector, _arg: ?objc.Id, _wait: objc.BOOL) void {
        return objc.msgSend(_self, "performSelectorOnMainThread:withObject:waitUntilDone:", void, .{ _aSelector, _arg, _wait });
    }

    pub fn performSelectorOnThreadWithObjectWaitUntilDoneModes(
        _self: *@This(),
        _aSelector: objc.Selector,
        _thr: ?*foundation.Thread,
        _arg: ?objc.Id,
        _wait: objc.BOOL,
        _array: ?*anyopaque,
    ) void {
        return objc.msgSend(_self, "performSelector:onThread:withObject:waitUntilDone:modes:", void, .{
            _aSelector,
            _thr,
            _arg,
            _wait,
            _array,
        });
    }

    pub fn performSelectorOnThreadWithObjectWaitUntilDone(
        _self: *@This(),
        _aSelector: objc.Selector,
        _thr: ?*foundation.Thread,
        _arg: ?objc.Id,
        _wait: objc.BOOL,
    ) void {
        return objc.msgSend(_self, "performSelector:onThread:withObject:waitUntilDone:", void, .{
            _aSelector,
            _thr,
            _arg,
            _wait,
        });
    }

    pub fn performSelectorInBackgroundWithObject(_self: *@This(), _aSelector: objc.Selector, _arg: ?objc.Id) void {
        return objc.msgSend(_self, "performSelectorInBackground:withObject:", void, .{ _aSelector, _arg });
    }

    pub fn replacementObjectForArchiver(_self: *@This(), _archiver: ?*foundation.Archiver) ?objc.Id {
        return objc.msgSend(_self, "replacementObjectForArchiver:", ?objc.Id, .{_archiver});
    }

    pub fn classForArchiver(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "classForArchiver", objc.Class, .{});
    }

    pub fn replacementObjectForPortCoder(_self: *@This(), _coder: ?*foundation.PortCoder) ?objc.Id {
        return objc.msgSend(_self, "replacementObjectForPortCoder:", ?objc.Id, .{_coder});
    }

    pub fn classForPortCoder(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "classForPortCoder", objc.Class, .{});
    }

    pub fn inverseForRelationshipKey(_self: *@This(), _relationshipKey: ?*foundation.String) ?*foundation.String {
        return objc.msgSend(_self, "inverseForRelationshipKey:", ?*foundation.String, .{_relationshipKey});
    }

    pub fn classDescription(_self: *@This()) ?*foundation.ClassDescription {
        return objc.msgSend(_self, "classDescription", ?*foundation.ClassDescription, .{});
    }

    pub fn attributeKeys(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "attributeKeys", ?*anyopaque, .{});
    }

    pub fn toOneRelationshipKeys(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "toOneRelationshipKeys", ?*anyopaque, .{});
    }

    pub fn toManyRelationshipKeys(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "toManyRelationshipKeys", ?*anyopaque, .{});
    }

    pub fn scriptingValueForSpecifier(_self: *@This(), _objectSpecifier: ?*foundation.ScriptObjectSpecifier) ?objc.Id {
        return objc.msgSend(_self, "scriptingValueForSpecifier:", ?objc.Id, .{_objectSpecifier});
    }

    pub fn copyScriptingValueForKeyWithProperties(_self: *@This(), _value: ?objc.Id, _key: ?*foundation.String, _properties: ?*anyopaque) ?objc.Id {
        return objc.msgSend(_self, "copyScriptingValue:forKey:withProperties:", ?objc.Id, .{ _value, _key, _properties });
    }

    pub fn newScriptingObjectOfClassForValueForKeyWithContentsValueProperties(
        _self: *@This(),
        _objectClass: objc.Class,
        _key: ?*foundation.String,
        _contentsValue: ?objc.Id,
        _properties: ?*anyopaque,
    ) ?objc.Id {
        return objc.msgSend(_self, "newScriptingObjectOfClass:forValueForKey:withContentsValue:properties:", ?objc.Id, .{
            _objectClass,
            _key,
            _contentsValue,
            _properties,
        });
    }

    pub fn scriptingProperties(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "scriptingProperties", ?*anyopaque, .{});
    }

    pub fn setScriptingProperties(_self: *@This(), _scriptingProperties: ?*anyopaque) void {
        return objc.msgSend(_self, "setScriptingProperties:", void, .{_scriptingProperties});
    }

    pub fn classCode(_self: *@This()) objc.FourCharCode {
        return objc.msgSend(_self, "classCode", objc.FourCharCode, .{});
    }

    pub fn className(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "className", ?*foundation.String, .{});
    }

    pub fn valueAtIndexInPropertyWithKey(_self: *@This(), _index: objc.NSUInteger, _key: ?*foundation.String) ?objc.Id {
        return objc.msgSend(_self, "valueAtIndex:inPropertyWithKey:", ?objc.Id, .{ _index, _key });
    }

    pub fn valueWithNameInPropertyWithKey(_self: *@This(), _name: ?*foundation.String, _key: ?*foundation.String) ?objc.Id {
        return objc.msgSend(_self, "valueWithName:inPropertyWithKey:", ?objc.Id, .{ _name, _key });
    }

    pub fn valueWithUniqueIDInPropertyWithKey(_self: *@This(), _uniqueID: ?objc.Id, _key: ?*foundation.String) ?objc.Id {
        return objc.msgSend(_self, "valueWithUniqueID:inPropertyWithKey:", ?objc.Id, .{ _uniqueID, _key });
    }

    pub fn insertValueAtIndexInPropertyWithKey(_self: *@This(), _value: ?objc.Id, _index: objc.NSUInteger, _key: ?*foundation.String) void {
        return objc.msgSend(_self, "insertValue:atIndex:inPropertyWithKey:", void, .{ _value, _index, _key });
    }

    pub fn removeValueAtIndexFromPropertyWithKey(_self: *@This(), _index: objc.NSUInteger, _key: ?*foundation.String) void {
        return objc.msgSend(_self, "removeValueAtIndex:fromPropertyWithKey:", void, .{ _index, _key });
    }

    pub fn replaceValueAtIndexInPropertyWithKeyWithValue(_self: *@This(), _index: objc.NSUInteger, _key: ?*foundation.String, _value: ?objc.Id) void {
        return objc.msgSend(_self, "replaceValueAtIndex:inPropertyWithKey:withValue:", void, .{ _index, _key, _value });
    }

    pub fn insertValueInPropertyWithKey(_self: *@This(), _value: ?objc.Id, _key: ?*foundation.String) void {
        return objc.msgSend(_self, "insertValue:inPropertyWithKey:", void, .{ _value, _key });
    }

    pub fn coerceValueForKey(_self: *@This(), _value: ?objc.Id, _key: ?*foundation.String) ?objc.Id {
        return objc.msgSend(_self, "coerceValue:forKey:", ?objc.Id, .{ _value, _key });
    }

    pub fn indicesOfObjectsByEvaluatingObjectSpecifier(_self: *@This(), _specifier: ?*foundation.ScriptObjectSpecifier) ?*anyopaque {
        return objc.msgSend(_self, "indicesOfObjectsByEvaluatingObjectSpecifier:", ?*anyopaque, .{_specifier});
    }

    pub fn objectSpecifier(_self: *@This()) ?*foundation.ScriptObjectSpecifier {
        return objc.msgSend(_self, "objectSpecifier", ?*foundation.ScriptObjectSpecifier, .{});
    }

    pub fn isEqualTo(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqualTo:", objc.BOOL, .{_object});
    }

    pub fn isLessThanOrEqualTo(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isLessThanOrEqualTo:", objc.BOOL, .{_object});
    }

    pub fn isLessThan(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isLessThan:", objc.BOOL, .{_object});
    }

    pub fn isGreaterThanOrEqualTo(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isGreaterThanOrEqualTo:", objc.BOOL, .{_object});
    }

    pub fn isGreaterThan(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isGreaterThan:", objc.BOOL, .{_object});
    }

    pub fn isNotEqualTo(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isNotEqualTo:", objc.BOOL, .{_object});
    }

    pub fn doesContain(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "doesContain:", objc.BOOL, .{_object});
    }

    pub fn isLike(_self: *@This(), _object: ?*foundation.String) objc.BOOL {
        return objc.msgSend(_self, "isLike:", objc.BOOL, .{_object});
    }

    pub fn isCaseInsensitiveLike(_self: *@This(), _object: ?*foundation.String) objc.BOOL {
        return objc.msgSend(_self, "isCaseInsensitiveLike:", objc.BOOL, .{_object});
    }

    pub fn scriptingIsEqualTo(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "scriptingIsEqualTo:", objc.BOOL, .{_object});
    }

    pub fn scriptingIsLessThanOrEqualTo(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "scriptingIsLessThanOrEqualTo:", objc.BOOL, .{_object});
    }

    pub fn scriptingIsLessThan(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "scriptingIsLessThan:", objc.BOOL, .{_object});
    }

    pub fn scriptingIsGreaterThanOrEqualTo(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "scriptingIsGreaterThanOrEqualTo:", objc.BOOL, .{_object});
    }

    pub fn scriptingIsGreaterThan(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "scriptingIsGreaterThan:", objc.BOOL, .{_object});
    }

    pub fn scriptingBeginsWith(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "scriptingBeginsWith:", objc.BOOL, .{_object});
    }

    pub fn scriptingEndsWith(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "scriptingEndsWith:", objc.BOOL, .{_object});
    }

    pub fn scriptingContains(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "scriptingContains:", objc.BOOL, .{_object});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*foundation.Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*foundation.Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn supportsSecureCoding() objc.BOOL {
        return objc.msgSend(Internal.class(), "supportsSecureCoding", objc.BOOL, .{});
    }

    pub fn transition() *@This() {
        return objc.msgSend(Internal.class(), "transition", *@This(), .{});
    }

    pub fn replaceDownUpTransition() *@This() {
        return objc.msgSend(Internal.class(), "replaceDownUpTransition", *@This(), .{});
    }

    pub fn replaceUpUpTransition() *@This() {
        return objc.msgSend(Internal.class(), "replaceUpUpTransition", *@This(), .{});
    }

    pub fn replaceOffUpTransition() *@This() {
        return objc.msgSend(Internal.class(), "replaceOffUpTransition", *@This(), .{});
    }

    pub fn transitionWithByLayer(_self: *@This()) *@This() {
        return objc.msgSend(_self, "transitionWithByLayer", *@This(), .{});
    }

    pub fn transitionWithWholeSymbol(_self: *@This()) *@This() {
        return objc.msgSend(_self, "transitionWithWholeSymbol", *@This(), .{});
    }

    pub fn magicTransitionWithFallback(_fallback: ?*SymbolReplaceContentTransition) ?*SymbolMagicReplaceContentTransition {
        return objc.msgSend(Internal.class(), "magicTransitionWithFallback:", ?*SymbolMagicReplaceContentTransition, .{_fallback});
    }
};

/// https://developer.apple.com/documentation/Symbols/NSSymbolAutomaticContentTransition?language=objc
pub const SymbolAutomaticContentTransition = opaque {
    pub const Internal = objc.ExternClass("NSSymbolAutomaticContentTransition", @This(), SymbolContentTransition, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "description", ?*foundation.String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "debugDescription", ?*foundation.String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*foundation.Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*foundation.MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*foundation.MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*foundation.MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*foundation.MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn version() objc.NSInteger {
        return objc.msgSend(Internal.class(), "version", objc.NSInteger, .{});
    }

    pub fn setVersion(_aVersion: objc.NSInteger) void {
        return objc.msgSend(Internal.class(), "setVersion:", void, .{_aVersion});
    }

    pub fn replacementObjectForCoder(_self: *@This(), _coder: ?*foundation.Coder) ?objc.Id {
        return objc.msgSend(_self, "replacementObjectForCoder:", ?objc.Id, .{_coder});
    }

    pub fn awakeAfterUsingCoder(_self: *@This(), _coder: ?*foundation.Coder) ?objc.Id {
        return objc.msgSend(_self, "awakeAfterUsingCoder:", ?objc.Id, .{_coder});
    }

    pub fn classForCoder(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "classForCoder", objc.Class, .{});
    }

    pub fn poseAsClass(_aClass: objc.Class) void {
        return objc.msgSend(Internal.class(), "poseAsClass:", void, .{_aClass});
    }

    pub fn autoContentAccessingProxy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "autoContentAccessingProxy", ?objc.Id, .{});
    }

    pub fn attemptRecoveryFromErrorOptionIndexDelegateDidRecoverSelectorContextInfo(
        _self: *@This(),
        _error: ?*foundation.Error,
        _recoveryOptionIndex: objc.NSUInteger,
        _delegate: ?objc.Id,
        _didRecoverSelector: objc.Selector,
        _contextInfo: ?*anyopaque,
    ) void {
        return objc.msgSend(_self, "attemptRecoveryFromError:optionIndex:delegate:didRecoverSelector:contextInfo:", void, .{
            _error,
            _recoveryOptionIndex,
            _delegate,
            _didRecoverSelector,
            _contextInfo,
        });
    }

    pub fn attemptRecoveryFromErrorOptionIndex(_self: *@This(), _error: ?*foundation.Error, _recoveryOptionIndex: objc.NSUInteger) objc.BOOL {
        return objc.msgSend(_self, "attemptRecoveryFromError:optionIndex:", objc.BOOL, .{ _error, _recoveryOptionIndex });
    }

    pub fn performSelectorWithObjectAfterDelayInModes(
        _self: *@This(),
        _aSelector: objc.Selector,
        _anArgument: ?objc.Id,
        _delay: foundation.TimeInterval,
        _modes: ?*anyopaque,
    ) void {
        return objc.msgSend(_self, "performSelector:withObject:afterDelay:inModes:", void, .{
            _aSelector,
            _anArgument,
            _delay,
            _modes,
        });
    }

    pub fn performSelectorWithObjectAfterDelay(_self: *@This(), _aSelector: objc.Selector, _anArgument: ?objc.Id, _delay: foundation.TimeInterval) void {
        return objc.msgSend(_self, "performSelector:withObject:afterDelay:", void, .{ _aSelector, _anArgument, _delay });
    }

    pub fn cancelPreviousPerformRequestsWithTargetSelectorObject(_aTarget: ?objc.Id, _aSelector: objc.Selector, _anArgument: ?objc.Id) void {
        return objc.msgSend(Internal.class(), "cancelPreviousPerformRequestsWithTarget:selector:object:", void, .{ _aTarget, _aSelector, _anArgument });
    }

    pub fn cancelPreviousPerformRequestsWithTarget(_aTarget: ?objc.Id) void {
        return objc.msgSend(Internal.class(), "cancelPreviousPerformRequestsWithTarget:", void, .{_aTarget});
    }

    pub fn urlResourceDataDidBecomeAvailable(_self: *@This(), _sender: ?*foundation.URL, _newBytes: ?*foundation.Data) void {
        return objc.msgSend(_self, "URL:resourceDataDidBecomeAvailable:", void, .{ _sender, _newBytes });
    }

    pub fn urlResourceDidFinishLoading(_self: *@This(), _sender: ?*foundation.URL) void {
        return objc.msgSend(_self, "URLResourceDidFinishLoading:", void, .{_sender});
    }

    pub fn urlResourceDidCancelLoading(_self: *@This(), _sender: ?*foundation.URL) void {
        return objc.msgSend(_self, "URLResourceDidCancelLoading:", void, .{_sender});
    }

    pub fn urlResourceDidFailLoadingWithReason(_self: *@This(), _sender: ?*foundation.URL, _reason: ?*foundation.String) void {
        return objc.msgSend(_self, "URL:resourceDidFailLoadingWithReason:", void, .{ _sender, _reason });
    }

    pub fn fileManagerShouldProceedAfterError(_self: *@This(), _fm: ?*foundation.FileManager, _errorInfo: ?*foundation.Dictionary) objc.BOOL {
        return objc.msgSend(_self, "fileManager:shouldProceedAfterError:", objc.BOOL, .{ _fm, _errorInfo });
    }

    pub fn fileManagerWillProcessPath(_self: *@This(), _fm: ?*foundation.FileManager, _path: ?*foundation.String) void {
        return objc.msgSend(_self, "fileManager:willProcessPath:", void, .{ _fm, _path });
    }

    pub fn valueForKey(_self: *@This(), _key: ?*foundation.String) ?objc.Id {
        return objc.msgSend(_self, "valueForKey:", ?objc.Id, .{_key});
    }

    pub fn setValueForKey(_self: *@This(), _value: ?objc.Id, _key: ?*foundation.String) void {
        return objc.msgSend(_self, "setValue:forKey:", void, .{ _value, _key });
    }

    pub fn validateValueForKeyError(_self: *@This(), _ioValue: ?*?objc.Id, _inKey: ?*foundation.String, _outError: ?*?*foundation.Error) objc.BOOL {
        return objc.msgSend(_self, "validateValue:forKey:error:", objc.BOOL, .{ _ioValue, _inKey, _outError });
    }

    pub fn mutableArrayValueForKey(_self: *@This(), _key: ?*foundation.String) ?*foundation.MutableArray {
        return objc.msgSend(_self, "mutableArrayValueForKey:", ?*foundation.MutableArray, .{_key});
    }

    pub fn mutableOrderedSetValueForKey(_self: *@This(), _key: ?*foundation.String) ?*foundation.MutableOrderedSet {
        return objc.msgSend(_self, "mutableOrderedSetValueForKey:", ?*foundation.MutableOrderedSet, .{_key});
    }

    pub fn mutableSetValueForKey(_self: *@This(), _key: ?*foundation.String) ?*foundation.MutableSet {
        return objc.msgSend(_self, "mutableSetValueForKey:", ?*foundation.MutableSet, .{_key});
    }

    pub fn valueForKeyPath(_self: *@This(), _keyPath: ?*foundation.String) ?objc.Id {
        return objc.msgSend(_self, "valueForKeyPath:", ?objc.Id, .{_keyPath});
    }

    pub fn setValueForKeyPath(_self: *@This(), _value: ?objc.Id, _keyPath: ?*foundation.String) void {
        return objc.msgSend(_self, "setValue:forKeyPath:", void, .{ _value, _keyPath });
    }

    pub fn validateValueForKeyPathError(_self: *@This(), _ioValue: ?*?objc.Id, _inKeyPath: ?*foundation.String, _outError: ?*?*foundation.Error) objc.BOOL {
        return objc.msgSend(_self, "validateValue:forKeyPath:error:", objc.BOOL, .{ _ioValue, _inKeyPath, _outError });
    }

    pub fn mutableArrayValueForKeyPath(_self: *@This(), _keyPath: ?*foundation.String) ?*foundation.MutableArray {
        return objc.msgSend(_self, "mutableArrayValueForKeyPath:", ?*foundation.MutableArray, .{_keyPath});
    }

    pub fn mutableOrderedSetValueForKeyPath(_self: *@This(), _keyPath: ?*foundation.String) ?*foundation.MutableOrderedSet {
        return objc.msgSend(_self, "mutableOrderedSetValueForKeyPath:", ?*foundation.MutableOrderedSet, .{_keyPath});
    }

    pub fn mutableSetValueForKeyPath(_self: *@This(), _keyPath: ?*foundation.String) ?*foundation.MutableSet {
        return objc.msgSend(_self, "mutableSetValueForKeyPath:", ?*foundation.MutableSet, .{_keyPath});
    }

    pub fn valueForUndefinedKey(_self: *@This(), _key: ?*foundation.String) ?objc.Id {
        return objc.msgSend(_self, "valueForUndefinedKey:", ?objc.Id, .{_key});
    }

    pub fn setValueForUndefinedKey(_self: *@This(), _value: ?objc.Id, _key: ?*foundation.String) void {
        return objc.msgSend(_self, "setValue:forUndefinedKey:", void, .{ _value, _key });
    }

    pub fn setNilValueForKey(_self: *@This(), _key: ?*foundation.String) void {
        return objc.msgSend(_self, "setNilValueForKey:", void, .{_key});
    }

    pub fn dictionaryWithValuesForKeys(_self: *@This(), _keys: ?*anyopaque) ?*anyopaque {
        return objc.msgSend(_self, "dictionaryWithValuesForKeys:", ?*anyopaque, .{_keys});
    }

    pub fn setValuesForKeysWithDictionary(_self: *@This(), _keyedValues: ?*anyopaque) void {
        return objc.msgSend(_self, "setValuesForKeysWithDictionary:", void, .{_keyedValues});
    }

    pub fn accessInstanceVariablesDirectly() objc.BOOL {
        return objc.msgSend(Internal.class(), "accessInstanceVariablesDirectly", objc.BOOL, .{});
    }

    pub fn useStoredAccessor() objc.BOOL {
        return objc.msgSend(Internal.class(), "useStoredAccessor", objc.BOOL, .{});
    }

    pub fn storedValueForKey(_self: *@This(), _key: ?*foundation.String) ?objc.Id {
        return objc.msgSend(_self, "storedValueForKey:", ?objc.Id, .{_key});
    }

    pub fn takeStoredValueForKey(_self: *@This(), _value: ?objc.Id, _key: ?*foundation.String) void {
        return objc.msgSend(_self, "takeStoredValue:forKey:", void, .{ _value, _key });
    }

    pub fn takeValueForKey(_self: *@This(), _value: ?objc.Id, _key: ?*foundation.String) void {
        return objc.msgSend(_self, "takeValue:forKey:", void, .{ _value, _key });
    }

    pub fn takeValueForKeyPath(_self: *@This(), _value: ?objc.Id, _keyPath: ?*foundation.String) void {
        return objc.msgSend(_self, "takeValue:forKeyPath:", void, .{ _value, _keyPath });
    }

    pub fn handleQueryWithUnboundKey(_self: *@This(), _key: ?*foundation.String) ?objc.Id {
        return objc.msgSend(_self, "handleQueryWithUnboundKey:", ?objc.Id, .{_key});
    }

    pub fn handleTakeValueForUnboundKey(_self: *@This(), _value: ?objc.Id, _key: ?*foundation.String) void {
        return objc.msgSend(_self, "handleTakeValue:forUnboundKey:", void, .{ _value, _key });
    }

    pub fn unableToSetNilForKey(_self: *@This(), _key: ?*foundation.String) void {
        return objc.msgSend(_self, "unableToSetNilForKey:", void, .{_key});
    }

    pub fn valuesForKeys(_self: *@This(), _keys: ?*foundation.Array) ?*foundation.Dictionary {
        return objc.msgSend(_self, "valuesForKeys:", ?*foundation.Dictionary, .{_keys});
    }

    pub fn takeValuesFromDictionary(_self: *@This(), _properties: ?*foundation.Dictionary) void {
        return objc.msgSend(_self, "takeValuesFromDictionary:", void, .{_properties});
    }

    pub fn observeValueForKeyPathOfObjectChangeContext(
        _self: *@This(),
        _keyPath: ?*foundation.String,
        _object: ?objc.Id,
        _change: ?*anyopaque,
        _context: ?*anyopaque,
    ) void {
        return objc.msgSend(_self, "observeValueForKeyPath:ofObject:change:context:", void, .{
            _keyPath,
            _object,
            _change,
            _context,
        });
    }

    pub fn addObserverForKeyPathOptionsContext(
        _self: *@This(),
        _observer: ?*objc.NSObject,
        _keyPath: ?*foundation.String,
        _options: foundation.KeyValueObservingOptions,
        _context: ?*anyopaque,
    ) void {
        return objc.msgSend(_self, "addObserver:forKeyPath:options:context:", void, .{
            _observer,
            _keyPath,
            _options,
            _context,
        });
    }

    pub fn removeObserverForKeyPathContext(_self: *@This(), _observer: ?*objc.NSObject, _keyPath: ?*foundation.String, _context: ?*anyopaque) void {
        return objc.msgSend(_self, "removeObserver:forKeyPath:context:", void, .{ _observer, _keyPath, _context });
    }

    pub fn removeObserverForKeyPath(_self: *@This(), _observer: ?*objc.NSObject, _keyPath: ?*foundation.String) void {
        return objc.msgSend(_self, "removeObserver:forKeyPath:", void, .{ _observer, _keyPath });
    }

    pub fn willChangeValueForKey(_self: *@This(), _key: ?*foundation.String) void {
        return objc.msgSend(_self, "willChangeValueForKey:", void, .{_key});
    }

    pub fn didChangeValueForKey(_self: *@This(), _key: ?*foundation.String) void {
        return objc.msgSend(_self, "didChangeValueForKey:", void, .{_key});
    }

    pub fn willChangeValuesAtIndexesForKey(_self: *@This(), _changeKind: foundation.KeyValueChange, _indexes: ?*foundation.IndexSet, _key: ?*foundation.String) void {
        return objc.msgSend(_self, "willChange:valuesAtIndexes:forKey:", void, .{ _changeKind, _indexes, _key });
    }

    pub fn didChangeValuesAtIndexesForKey(_self: *@This(), _changeKind: foundation.KeyValueChange, _indexes: ?*foundation.IndexSet, _key: ?*foundation.String) void {
        return objc.msgSend(_self, "didChange:valuesAtIndexes:forKey:", void, .{ _changeKind, _indexes, _key });
    }

    pub fn willChangeValueForKeyWithSetMutationUsingObjects(_self: *@This(), _key: ?*foundation.String, _mutationKind: foundation.KeyValueSetMutationKind, _objects: ?*foundation.Set) void {
        return objc.msgSend(_self, "willChangeValueForKey:withSetMutation:usingObjects:", void, .{ _key, _mutationKind, _objects });
    }

    pub fn didChangeValueForKeyWithSetMutationUsingObjects(_self: *@This(), _key: ?*foundation.String, _mutationKind: foundation.KeyValueSetMutationKind, _objects: ?*foundation.Set) void {
        return objc.msgSend(_self, "didChangeValueForKey:withSetMutation:usingObjects:", void, .{ _key, _mutationKind, _objects });
    }

    pub fn keyPathsForValuesAffectingValueForKey(_key: ?*foundation.String) ?*anyopaque {
        return objc.msgSend(Internal.class(), "keyPathsForValuesAffectingValueForKey:", ?*anyopaque, .{_key});
    }

    pub fn automaticallyNotifiesObserversForKey(_key: ?*foundation.String) objc.BOOL {
        return objc.msgSend(Internal.class(), "automaticallyNotifiesObserversForKey:", objc.BOOL, .{_key});
    }

    pub fn observationInfo(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "observationInfo", ?*anyopaque, .{});
    }

    pub fn setObservationInfo(_self: *@This(), _observationInfo: ?*anyopaque) void {
        return objc.msgSend(_self, "setObservationInfo:", void, .{_observationInfo});
    }

    pub fn setKeysTriggerChangeNotificationsForDependentKey(_keys: ?*foundation.Array, _dependentKey: ?*foundation.String) void {
        return objc.msgSend(Internal.class(), "setKeys:triggerChangeNotificationsForDependentKey:", void, .{ _keys, _dependentKey });
    }

    pub fn setSharedObservers(_self: *@This(), _sharedObservers: ?*foundation.KeyValueSharedObserversSnapshot) void {
        return objc.msgSend(_self, "setSharedObservers:", void, .{_sharedObservers});
    }

    pub fn replacementObjectForKeyedArchiver(_self: *@This(), _archiver: ?*foundation.KeyedArchiver) ?objc.Id {
        return objc.msgSend(_self, "replacementObjectForKeyedArchiver:", ?objc.Id, .{_archiver});
    }

    pub fn classFallbacksForKeyedArchiver() ?*anyopaque {
        return objc.msgSend(Internal.class(), "classFallbacksForKeyedArchiver", ?*anyopaque, .{});
    }

    pub fn classForKeyedArchiver(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "classForKeyedArchiver", objc.Class, .{});
    }

    pub fn classForKeyedUnarchiver() objc.Class {
        return objc.msgSend(Internal.class(), "classForKeyedUnarchiver", objc.Class, .{});
    }

    pub fn performSelectorOnMainThreadWithObjectWaitUntilDoneModes(
        _self: *@This(),
        _aSelector: objc.Selector,
        _arg: ?objc.Id,
        _wait: objc.BOOL,
        _array: ?*anyopaque,
    ) void {
        return objc.msgSend(_self, "performSelectorOnMainThread:withObject:waitUntilDone:modes:", void, .{
            _aSelector,
            _arg,
            _wait,
            _array,
        });
    }

    pub fn performSelectorOnMainThreadWithObjectWaitUntilDone(_self: *@This(), _aSelector: objc.Selector, _arg: ?objc.Id, _wait: objc.BOOL) void {
        return objc.msgSend(_self, "performSelectorOnMainThread:withObject:waitUntilDone:", void, .{ _aSelector, _arg, _wait });
    }

    pub fn performSelectorOnThreadWithObjectWaitUntilDoneModes(
        _self: *@This(),
        _aSelector: objc.Selector,
        _thr: ?*foundation.Thread,
        _arg: ?objc.Id,
        _wait: objc.BOOL,
        _array: ?*anyopaque,
    ) void {
        return objc.msgSend(_self, "performSelector:onThread:withObject:waitUntilDone:modes:", void, .{
            _aSelector,
            _thr,
            _arg,
            _wait,
            _array,
        });
    }

    pub fn performSelectorOnThreadWithObjectWaitUntilDone(
        _self: *@This(),
        _aSelector: objc.Selector,
        _thr: ?*foundation.Thread,
        _arg: ?objc.Id,
        _wait: objc.BOOL,
    ) void {
        return objc.msgSend(_self, "performSelector:onThread:withObject:waitUntilDone:", void, .{
            _aSelector,
            _thr,
            _arg,
            _wait,
        });
    }

    pub fn performSelectorInBackgroundWithObject(_self: *@This(), _aSelector: objc.Selector, _arg: ?objc.Id) void {
        return objc.msgSend(_self, "performSelectorInBackground:withObject:", void, .{ _aSelector, _arg });
    }

    pub fn replacementObjectForArchiver(_self: *@This(), _archiver: ?*foundation.Archiver) ?objc.Id {
        return objc.msgSend(_self, "replacementObjectForArchiver:", ?objc.Id, .{_archiver});
    }

    pub fn classForArchiver(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "classForArchiver", objc.Class, .{});
    }

    pub fn replacementObjectForPortCoder(_self: *@This(), _coder: ?*foundation.PortCoder) ?objc.Id {
        return objc.msgSend(_self, "replacementObjectForPortCoder:", ?objc.Id, .{_coder});
    }

    pub fn classForPortCoder(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "classForPortCoder", objc.Class, .{});
    }

    pub fn inverseForRelationshipKey(_self: *@This(), _relationshipKey: ?*foundation.String) ?*foundation.String {
        return objc.msgSend(_self, "inverseForRelationshipKey:", ?*foundation.String, .{_relationshipKey});
    }

    pub fn classDescription(_self: *@This()) ?*foundation.ClassDescription {
        return objc.msgSend(_self, "classDescription", ?*foundation.ClassDescription, .{});
    }

    pub fn attributeKeys(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "attributeKeys", ?*anyopaque, .{});
    }

    pub fn toOneRelationshipKeys(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "toOneRelationshipKeys", ?*anyopaque, .{});
    }

    pub fn toManyRelationshipKeys(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "toManyRelationshipKeys", ?*anyopaque, .{});
    }

    pub fn scriptingValueForSpecifier(_self: *@This(), _objectSpecifier: ?*foundation.ScriptObjectSpecifier) ?objc.Id {
        return objc.msgSend(_self, "scriptingValueForSpecifier:", ?objc.Id, .{_objectSpecifier});
    }

    pub fn copyScriptingValueForKeyWithProperties(_self: *@This(), _value: ?objc.Id, _key: ?*foundation.String, _properties: ?*anyopaque) ?objc.Id {
        return objc.msgSend(_self, "copyScriptingValue:forKey:withProperties:", ?objc.Id, .{ _value, _key, _properties });
    }

    pub fn newScriptingObjectOfClassForValueForKeyWithContentsValueProperties(
        _self: *@This(),
        _objectClass: objc.Class,
        _key: ?*foundation.String,
        _contentsValue: ?objc.Id,
        _properties: ?*anyopaque,
    ) ?objc.Id {
        return objc.msgSend(_self, "newScriptingObjectOfClass:forValueForKey:withContentsValue:properties:", ?objc.Id, .{
            _objectClass,
            _key,
            _contentsValue,
            _properties,
        });
    }

    pub fn scriptingProperties(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "scriptingProperties", ?*anyopaque, .{});
    }

    pub fn setScriptingProperties(_self: *@This(), _scriptingProperties: ?*anyopaque) void {
        return objc.msgSend(_self, "setScriptingProperties:", void, .{_scriptingProperties});
    }

    pub fn classCode(_self: *@This()) objc.FourCharCode {
        return objc.msgSend(_self, "classCode", objc.FourCharCode, .{});
    }

    pub fn className(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "className", ?*foundation.String, .{});
    }

    pub fn valueAtIndexInPropertyWithKey(_self: *@This(), _index: objc.NSUInteger, _key: ?*foundation.String) ?objc.Id {
        return objc.msgSend(_self, "valueAtIndex:inPropertyWithKey:", ?objc.Id, .{ _index, _key });
    }

    pub fn valueWithNameInPropertyWithKey(_self: *@This(), _name: ?*foundation.String, _key: ?*foundation.String) ?objc.Id {
        return objc.msgSend(_self, "valueWithName:inPropertyWithKey:", ?objc.Id, .{ _name, _key });
    }

    pub fn valueWithUniqueIDInPropertyWithKey(_self: *@This(), _uniqueID: ?objc.Id, _key: ?*foundation.String) ?objc.Id {
        return objc.msgSend(_self, "valueWithUniqueID:inPropertyWithKey:", ?objc.Id, .{ _uniqueID, _key });
    }

    pub fn insertValueAtIndexInPropertyWithKey(_self: *@This(), _value: ?objc.Id, _index: objc.NSUInteger, _key: ?*foundation.String) void {
        return objc.msgSend(_self, "insertValue:atIndex:inPropertyWithKey:", void, .{ _value, _index, _key });
    }

    pub fn removeValueAtIndexFromPropertyWithKey(_self: *@This(), _index: objc.NSUInteger, _key: ?*foundation.String) void {
        return objc.msgSend(_self, "removeValueAtIndex:fromPropertyWithKey:", void, .{ _index, _key });
    }

    pub fn replaceValueAtIndexInPropertyWithKeyWithValue(_self: *@This(), _index: objc.NSUInteger, _key: ?*foundation.String, _value: ?objc.Id) void {
        return objc.msgSend(_self, "replaceValueAtIndex:inPropertyWithKey:withValue:", void, .{ _index, _key, _value });
    }

    pub fn insertValueInPropertyWithKey(_self: *@This(), _value: ?objc.Id, _key: ?*foundation.String) void {
        return objc.msgSend(_self, "insertValue:inPropertyWithKey:", void, .{ _value, _key });
    }

    pub fn coerceValueForKey(_self: *@This(), _value: ?objc.Id, _key: ?*foundation.String) ?objc.Id {
        return objc.msgSend(_self, "coerceValue:forKey:", ?objc.Id, .{ _value, _key });
    }

    pub fn indicesOfObjectsByEvaluatingObjectSpecifier(_self: *@This(), _specifier: ?*foundation.ScriptObjectSpecifier) ?*anyopaque {
        return objc.msgSend(_self, "indicesOfObjectsByEvaluatingObjectSpecifier:", ?*anyopaque, .{_specifier});
    }

    pub fn objectSpecifier(_self: *@This()) ?*foundation.ScriptObjectSpecifier {
        return objc.msgSend(_self, "objectSpecifier", ?*foundation.ScriptObjectSpecifier, .{});
    }

    pub fn isEqualTo(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqualTo:", objc.BOOL, .{_object});
    }

    pub fn isLessThanOrEqualTo(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isLessThanOrEqualTo:", objc.BOOL, .{_object});
    }

    pub fn isLessThan(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isLessThan:", objc.BOOL, .{_object});
    }

    pub fn isGreaterThanOrEqualTo(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isGreaterThanOrEqualTo:", objc.BOOL, .{_object});
    }

    pub fn isGreaterThan(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isGreaterThan:", objc.BOOL, .{_object});
    }

    pub fn isNotEqualTo(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isNotEqualTo:", objc.BOOL, .{_object});
    }

    pub fn doesContain(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "doesContain:", objc.BOOL, .{_object});
    }

    pub fn isLike(_self: *@This(), _object: ?*foundation.String) objc.BOOL {
        return objc.msgSend(_self, "isLike:", objc.BOOL, .{_object});
    }

    pub fn isCaseInsensitiveLike(_self: *@This(), _object: ?*foundation.String) objc.BOOL {
        return objc.msgSend(_self, "isCaseInsensitiveLike:", objc.BOOL, .{_object});
    }

    pub fn scriptingIsEqualTo(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "scriptingIsEqualTo:", objc.BOOL, .{_object});
    }

    pub fn scriptingIsLessThanOrEqualTo(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "scriptingIsLessThanOrEqualTo:", objc.BOOL, .{_object});
    }

    pub fn scriptingIsLessThan(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "scriptingIsLessThan:", objc.BOOL, .{_object});
    }

    pub fn scriptingIsGreaterThanOrEqualTo(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "scriptingIsGreaterThanOrEqualTo:", objc.BOOL, .{_object});
    }

    pub fn scriptingIsGreaterThan(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "scriptingIsGreaterThan:", objc.BOOL, .{_object});
    }

    pub fn scriptingBeginsWith(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "scriptingBeginsWith:", objc.BOOL, .{_object});
    }

    pub fn scriptingEndsWith(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "scriptingEndsWith:", objc.BOOL, .{_object});
    }

    pub fn scriptingContains(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "scriptingContains:", objc.BOOL, .{_object});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*foundation.Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*foundation.Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn supportsSecureCoding() objc.BOOL {
        return objc.msgSend(Internal.class(), "supportsSecureCoding", objc.BOOL, .{});
    }

    pub fn transition() *@This() {
        return objc.msgSend(Internal.class(), "transition", *@This(), .{});
    }
};
