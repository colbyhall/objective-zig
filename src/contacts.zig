// THIS FILE IS AUTOGENERATED. MODIFICATIONS WILL NOT BE MAINTAINED.

const std = @import("std");
const objc = @import("objc.zig"); // Objective-C Runtime in zig.
const foundation = @import("foundation.zig"); // Framework dependency Foundation.

/// https://developer.apple.com/documentation/Contacts/CNLabeledValue?language=objc
pub fn LabeledValue(comptime ValueType: type) type {
    const unused0 = ValueType;
    _ = unused0; // Prevent unused parameter warning!!!
    return struct {
        pub const Internal = objc.ExternClass("CNLabeledValue", @This(), objc.NSObject, &.{ foundation.Copying, foundation.SecureCoding });
        pub const as = Internal.as;
        pub const retain = Internal.retain;
        pub const release = Internal.release;
        pub const autorelease = Internal.autorelease;
        pub const new = Internal.new;
        pub const alloc = Internal.alloc;

        pub fn copyWithZone(_self: *@This(), _zone: ?*foundation.Zone) ?objc.Id {
            return objc.msgSend(_self, "copyWithZone:", ?objc.Id, .{_zone});
        }

        pub fn encodeWithCoder(_self: *@This(), _coder: ?*foundation.Coder) void {
            return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
        }

        pub fn initWithCoder(_self: *@This(), _coder: ?*foundation.Coder) *@This() {
            return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
        }

        pub fn supportsSecureCoding() objc.BOOL {
            return objc.msgSend(Internal.class(), "supportsSecureCoding", objc.BOOL, .{});
        }

        pub fn labeledValueWithLabelValue(_label: ?*foundation.String, _value: ValueType) *@This() {
            return objc.msgSend(Internal.class(), "labeledValueWithLabel:value:", *@This(), .{ _label, _value });
        }

        pub fn initWithLabelValue(_self: *@This(), _label: ?*foundation.String, _value: ValueType) *@This() {
            return objc.msgSend(_self, "initWithLabel:value:", *@This(), .{ _label, _value });
        }

        pub fn labeledValueBySettingLabel(_self: *@This(), _label: ?*foundation.String) *@This() {
            return objc.msgSend(_self, "labeledValueBySettingLabel:", *@This(), .{_label});
        }

        pub fn labeledValueBySettingValue(_self: *@This(), _value: ValueType) *@This() {
            return objc.msgSend(_self, "labeledValueBySettingValue:", *@This(), .{_value});
        }

        pub fn labeledValueBySettingLabelValue(_self: *@This(), _label: ?*foundation.String, _value: ValueType) *@This() {
            return objc.msgSend(_self, "labeledValueBySettingLabel:value:", *@This(), .{ _label, _value });
        }

        pub fn localizedStringForLabel(_label: ?*foundation.String) ?*foundation.String {
            return objc.msgSend(Internal.class(), "localizedStringForLabel:", ?*foundation.String, .{_label});
        }

        pub fn identifier(_self: *@This()) ?*foundation.String {
            return objc.msgSend(_self, "identifier", ?*foundation.String, .{});
        }

        pub fn label(_self: *@This()) ?*foundation.String {
            return objc.msgSend(_self, "label", ?*foundation.String, .{});
        }

        pub fn value(_self: *@This()) ValueType {
            return objc.msgSend(_self, "value", ValueType, .{});
        }
    };
}

/// https://developer.apple.com/documentation/Contacts/CNPhoneNumber?language=objc
pub const PhoneNumber = opaque {
    pub const Internal = objc.ExternClass("CNPhoneNumber", @This(), objc.NSObject, &.{ foundation.Copying, foundation.SecureCoding });
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn copyWithZone(_self: *@This(), _zone: ?*foundation.Zone) ?objc.Id {
        return objc.msgSend(_self, "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*foundation.Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*foundation.Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn supportsSecureCoding() objc.BOOL {
        return objc.msgSend(Internal.class(), "supportsSecureCoding", objc.BOOL, .{});
    }

    pub fn phoneNumberWithStringValue(_stringValue: ?*foundation.String) *@This() {
        return objc.msgSend(Internal.class(), "phoneNumberWithStringValue:", *@This(), .{_stringValue});
    }

    pub fn initWithStringValue(_self: *@This(), _string: ?*foundation.String) *@This() {
        return objc.msgSend(_self, "initWithStringValue:", *@This(), .{_string});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn stringValue(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "stringValue", ?*foundation.String, .{});
    }
};

/// https://developer.apple.com/documentation/Contacts/CNPostalAddress?language=objc
pub const PostalAddress = opaque {
    pub const Internal = objc.ExternClass("CNPostalAddress", @This(), objc.NSObject, &.{ foundation.Copying, foundation.MutableCopying, foundation.SecureCoding });
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn copyWithZone(_self: *@This(), _zone: ?*foundation.Zone) ?objc.Id {
        return objc.msgSend(_self, "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_self: *@This(), _zone: ?*foundation.Zone) ?objc.Id {
        return objc.msgSend(_self, "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*foundation.Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*foundation.Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn supportsSecureCoding() objc.BOOL {
        return objc.msgSend(Internal.class(), "supportsSecureCoding", objc.BOOL, .{});
    }

    pub fn localizedStringForKey(_key: ?*foundation.String) ?*foundation.String {
        return objc.msgSend(Internal.class(), "localizedStringForKey:", ?*foundation.String, .{_key});
    }

    pub fn street(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "street", ?*foundation.String, .{});
    }

    pub fn subLocality(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "subLocality", ?*foundation.String, .{});
    }

    pub fn city(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "city", ?*foundation.String, .{});
    }

    pub fn subAdministrativeArea(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "subAdministrativeArea", ?*foundation.String, .{});
    }

    pub fn state(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "state", ?*foundation.String, .{});
    }

    pub fn postalCode(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "postalCode", ?*foundation.String, .{});
    }

    pub fn country(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "country", ?*foundation.String, .{});
    }

    pub fn isoCountryCode(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "ISOCountryCode", ?*foundation.String, .{});
    }
};

/// https://developer.apple.com/documentation/Contacts/CNContactRelation?language=objc
pub const ContactRelation = opaque {
    pub const Internal = objc.ExternClass("CNContactRelation", @This(), objc.NSObject, &.{ foundation.Copying, foundation.SecureCoding });
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn copyWithZone(_self: *@This(), _zone: ?*foundation.Zone) ?objc.Id {
        return objc.msgSend(_self, "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*foundation.Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*foundation.Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn supportsSecureCoding() objc.BOOL {
        return objc.msgSend(Internal.class(), "supportsSecureCoding", objc.BOOL, .{});
    }

    pub fn contactRelationWithName(_name: ?*foundation.String) *@This() {
        return objc.msgSend(Internal.class(), "contactRelationWithName:", *@This(), .{_name});
    }

    pub fn initWithName(_self: *@This(), _name: ?*foundation.String) *@This() {
        return objc.msgSend(_self, "initWithName:", *@This(), .{_name});
    }

    pub fn name(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "name", ?*foundation.String, .{});
    }
};

/// https://developer.apple.com/documentation/Contacts/CNSocialProfile?language=objc
pub const SocialProfile = opaque {
    pub const Internal = objc.ExternClass("CNSocialProfile", @This(), objc.NSObject, &.{ foundation.Copying, foundation.SecureCoding });
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn copyWithZone(_self: *@This(), _zone: ?*foundation.Zone) ?objc.Id {
        return objc.msgSend(_self, "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*foundation.Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*foundation.Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn supportsSecureCoding() objc.BOOL {
        return objc.msgSend(Internal.class(), "supportsSecureCoding", objc.BOOL, .{});
    }

    pub fn initWithUrlStringUsernameUserIdentifierService(
        _self: *@This(),
        _urlString: ?*foundation.String,
        _username: ?*foundation.String,
        _userIdentifier: ?*foundation.String,
        _service: ?*foundation.String,
    ) *@This() {
        return objc.msgSend(_self, "initWithUrlString:username:userIdentifier:service:", *@This(), .{
            _urlString,
            _username,
            _userIdentifier,
            _service,
        });
    }

    pub fn localizedStringForKey(_key: ?*foundation.String) ?*foundation.String {
        return objc.msgSend(Internal.class(), "localizedStringForKey:", ?*foundation.String, .{_key});
    }

    pub fn localizedStringForService(_service: ?*foundation.String) ?*foundation.String {
        return objc.msgSend(Internal.class(), "localizedStringForService:", ?*foundation.String, .{_service});
    }

    pub fn urlString(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "urlString", ?*foundation.String, .{});
    }

    pub fn username(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "username", ?*foundation.String, .{});
    }

    pub fn userIdentifier(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "userIdentifier", ?*foundation.String, .{});
    }

    pub fn service(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "service", ?*foundation.String, .{});
    }
};

/// https://developer.apple.com/documentation/Contacts/CNInstantMessageAddress?language=objc
pub const InstantMessageAddress = opaque {
    pub const Internal = objc.ExternClass("CNInstantMessageAddress", @This(), objc.NSObject, &.{ foundation.Copying, foundation.SecureCoding });
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn copyWithZone(_self: *@This(), _zone: ?*foundation.Zone) ?objc.Id {
        return objc.msgSend(_self, "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*foundation.Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*foundation.Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn supportsSecureCoding() objc.BOOL {
        return objc.msgSend(Internal.class(), "supportsSecureCoding", objc.BOOL, .{});
    }

    pub fn initWithUsernameService(_self: *@This(), _username: ?*foundation.String, _service: ?*foundation.String) *@This() {
        return objc.msgSend(_self, "initWithUsername:service:", *@This(), .{ _username, _service });
    }

    pub fn localizedStringForKey(_key: ?*foundation.String) ?*foundation.String {
        return objc.msgSend(Internal.class(), "localizedStringForKey:", ?*foundation.String, .{_key});
    }

    pub fn localizedStringForService(_service: ?*foundation.String) ?*foundation.String {
        return objc.msgSend(Internal.class(), "localizedStringForService:", ?*foundation.String, .{_service});
    }

    pub fn username(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "username", ?*foundation.String, .{});
    }

    pub fn service(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "service", ?*foundation.String, .{});
    }
};

pub const ContactType = objc.NSInteger;
pub const ContactType_Person: objc.NSInteger = 0;
pub const ContactType_Organization: objc.NSInteger = 1;

pub const ContactSortOrder = objc.NSInteger;
pub const ContactSortOrder_None: objc.NSInteger = 0;
pub const ContactSortOrder_UserDefault: objc.NSInteger = 1;
pub const ContactSortOrder_GivenName: objc.NSInteger = 2;
pub const ContactSortOrder_FamilyName: objc.NSInteger = 3;

/// https://developer.apple.com/documentation/Contacts/CNKeyDescriptor?language=objc
pub const KeyDescriptor = opaque {
    pub const Internal = objc.ExternProtocol(@This(), &.{ objc.NSObject, foundation.SecureCoding, foundation.Copying });
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "description", ?*foundation.String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "debugDescription", ?*foundation.String, .{});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*foundation.Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*foundation.Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn supportsSecureCoding() objc.BOOL {
        return objc.msgSend(Internal.class(), "supportsSecureCoding", objc.BOOL, .{});
    }

    pub fn copyWithZone(_self: *@This(), _zone: ?*foundation.Zone) ?objc.Id {
        return objc.msgSend(_self, "copyWithZone:", ?objc.Id, .{_zone});
    }
};

/// https://developer.apple.com/documentation/Contacts/CNContact?language=objc
pub const Contact = opaque {
    pub const Internal = objc.ExternClass("CNContact", @This(), objc.NSObject, &.{ foundation.Copying, foundation.MutableCopying, foundation.SecureCoding, foundation.ItemProviderReading, foundation.ItemProviderWriting });
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn copyWithZone(_self: *@This(), _zone: ?*foundation.Zone) ?objc.Id {
        return objc.msgSend(_self, "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_self: *@This(), _zone: ?*foundation.Zone) ?objc.Id {
        return objc.msgSend(_self, "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*foundation.Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*foundation.Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn supportsSecureCoding() objc.BOOL {
        return objc.msgSend(Internal.class(), "supportsSecureCoding", objc.BOOL, .{});
    }

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "description", ?*foundation.String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "debugDescription", ?*foundation.String, .{});
    }

    pub fn objectWithItemProviderDataTypeIdentifierError(_data: ?*foundation.Data, _typeIdentifier: ?*foundation.String, _outError: ?*?*foundation.Error) *@This() {
        return objc.msgSend(Internal.class(), "objectWithItemProviderData:typeIdentifier:error:", *@This(), .{ _data, _typeIdentifier, _outError });
    }

    pub fn readableTypeIdentifiersForItemProvider() ?*foundation.Array(?*foundation.String) {
        return objc.msgSend(Internal.class(), "readableTypeIdentifiersForItemProvider", ?*foundation.Array(?*foundation.String), .{});
    }

    pub fn itemProviderVisibilityForRepresentationWithTypeIdentifier(_typeIdentifier: ?*foundation.String) foundation.ItemProviderRepresentationVisibility {
        return objc.msgSend(Internal.class(), "itemProviderVisibilityForRepresentationWithTypeIdentifier:", foundation.ItemProviderRepresentationVisibility, .{_typeIdentifier});
    }

    pub fn loadDataWithTypeIdentifierForItemProviderCompletionHandler(_self: *@This(), _typeIdentifier: ?*foundation.String, _completionHandler: *const fn (?*foundation.Data, ?*foundation.Error) callconv(.C) void) ?*foundation.Progress {
        return objc.msgSend(_self, "loadDataWithTypeIdentifier:forItemProviderCompletionHandler:", ?*foundation.Progress, .{ _typeIdentifier, _completionHandler });
    }

    pub fn writableTypeIdentifiersForItemProvider() ?*foundation.Array(?*foundation.String) {
        return objc.msgSend(Internal.class(), "writableTypeIdentifiersForItemProvider", ?*foundation.Array(?*foundation.String), .{});
    }

    pub fn isKeyAvailable(_self: *@This(), _key: ?*foundation.String) objc.BOOL {
        return objc.msgSend(_self, "isKeyAvailable:", objc.BOOL, .{_key});
    }

    pub fn areKeysAvailable(_self: *@This(), _keyDescriptors: ?*foundation.Array(?*objc.id)) objc.BOOL {
        return objc.msgSend(_self, "areKeysAvailable:", objc.BOOL, .{_keyDescriptors});
    }

    pub fn localizedStringForKey(_key: ?*foundation.String) ?*foundation.String {
        return objc.msgSend(Internal.class(), "localizedStringForKey:", ?*foundation.String, .{_key});
    }

    pub fn comparatorForNameSortOrder(_sortOrder: ContactSortOrder) foundation.Comparator {
        return objc.msgSend(Internal.class(), "comparatorForNameSortOrder:", foundation.Comparator, .{_sortOrder});
    }

    pub fn descriptorForAllComparatorKeys() ?*objc.id {
        return objc.msgSend(Internal.class(), "descriptorForAllComparatorKeys", ?*objc.id, .{});
    }

    pub fn isUnifiedWithContactWithIdentifier(_self: *@This(), _contactIdentifier: ?*foundation.String) objc.BOOL {
        return objc.msgSend(_self, "isUnifiedWithContactWithIdentifier:", objc.BOOL, .{_contactIdentifier});
    }

    pub fn identifier(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "identifier", ?*foundation.String, .{});
    }

    pub fn contactType(_self: *@This()) ContactType {
        return objc.msgSend(_self, "contactType", ContactType, .{});
    }

    pub fn namePrefix(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "namePrefix", ?*foundation.String, .{});
    }

    pub fn givenName(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "givenName", ?*foundation.String, .{});
    }

    pub fn middleName(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "middleName", ?*foundation.String, .{});
    }

    pub fn familyName(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "familyName", ?*foundation.String, .{});
    }

    pub fn previousFamilyName(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "previousFamilyName", ?*foundation.String, .{});
    }

    pub fn nameSuffix(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "nameSuffix", ?*foundation.String, .{});
    }

    pub fn nickname(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "nickname", ?*foundation.String, .{});
    }

    pub fn organizationName(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "organizationName", ?*foundation.String, .{});
    }

    pub fn departmentName(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "departmentName", ?*foundation.String, .{});
    }

    pub fn jobTitle(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "jobTitle", ?*foundation.String, .{});
    }

    pub fn phoneticGivenName(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "phoneticGivenName", ?*foundation.String, .{});
    }

    pub fn phoneticMiddleName(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "phoneticMiddleName", ?*foundation.String, .{});
    }

    pub fn phoneticFamilyName(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "phoneticFamilyName", ?*foundation.String, .{});
    }

    pub fn phoneticOrganizationName(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "phoneticOrganizationName", ?*foundation.String, .{});
    }

    pub fn note(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "note", ?*foundation.String, .{});
    }

    pub fn imageData(_self: *@This()) ?*foundation.Data {
        return objc.msgSend(_self, "imageData", ?*foundation.Data, .{});
    }

    pub fn thumbnailImageData(_self: *@This()) ?*foundation.Data {
        return objc.msgSend(_self, "thumbnailImageData", ?*foundation.Data, .{});
    }

    pub fn imageDataAvailable(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "imageDataAvailable", objc.BOOL, .{});
    }

    pub fn phoneNumbers(_self: *@This()) ?*foundation.Array(?*LabeledValue(?*PhoneNumber)) {
        return objc.msgSend(_self, "phoneNumbers", ?*foundation.Array(?*LabeledValue(?*PhoneNumber)), .{});
    }

    pub fn emailAddresses(_self: *@This()) ?*foundation.Array(?*LabeledValue(?*foundation.String)) {
        return objc.msgSend(_self, "emailAddresses", ?*foundation.Array(?*LabeledValue(?*foundation.String)), .{});
    }

    pub fn postalAddresses(_self: *@This()) ?*foundation.Array(?*LabeledValue(?*PostalAddress)) {
        return objc.msgSend(_self, "postalAddresses", ?*foundation.Array(?*LabeledValue(?*PostalAddress)), .{});
    }

    pub fn urlAddresses(_self: *@This()) ?*foundation.Array(?*LabeledValue(?*foundation.String)) {
        return objc.msgSend(_self, "urlAddresses", ?*foundation.Array(?*LabeledValue(?*foundation.String)), .{});
    }

    pub fn contactRelations(_self: *@This()) ?*foundation.Array(?*LabeledValue(?*ContactRelation)) {
        return objc.msgSend(_self, "contactRelations", ?*foundation.Array(?*LabeledValue(?*ContactRelation)), .{});
    }

    pub fn socialProfiles(_self: *@This()) ?*foundation.Array(?*LabeledValue(?*SocialProfile)) {
        return objc.msgSend(_self, "socialProfiles", ?*foundation.Array(?*LabeledValue(?*SocialProfile)), .{});
    }

    pub fn instantMessageAddresses(_self: *@This()) ?*foundation.Array(?*LabeledValue(?*InstantMessageAddress)) {
        return objc.msgSend(_self, "instantMessageAddresses", ?*foundation.Array(?*LabeledValue(?*InstantMessageAddress)), .{});
    }

    pub fn birthday(_self: *@This()) ?*foundation.DateComponents {
        return objc.msgSend(_self, "birthday", ?*foundation.DateComponents, .{});
    }

    pub fn nonGregorianBirthday(_self: *@This()) ?*foundation.DateComponents {
        return objc.msgSend(_self, "nonGregorianBirthday", ?*foundation.DateComponents, .{});
    }

    pub fn dates(_self: *@This()) ?*foundation.Array(?*LabeledValue(?*foundation.DateComponents)) {
        return objc.msgSend(_self, "dates", ?*foundation.Array(?*LabeledValue(?*foundation.DateComponents)), .{});
    }

    pub fn predicateForContactsMatchingName(_name: ?*foundation.String) ?*foundation.Predicate {
        return objc.msgSend(Internal.class(), "predicateForContactsMatchingName:", ?*foundation.Predicate, .{_name});
    }

    pub fn predicateForContactsMatchingEmailAddress(_emailAddress: ?*foundation.String) ?*foundation.Predicate {
        return objc.msgSend(Internal.class(), "predicateForContactsMatchingEmailAddress:", ?*foundation.Predicate, .{_emailAddress});
    }

    pub fn predicateForContactsMatchingPhoneNumber(_phoneNumber: ?*PhoneNumber) ?*foundation.Predicate {
        return objc.msgSend(Internal.class(), "predicateForContactsMatchingPhoneNumber:", ?*foundation.Predicate, .{_phoneNumber});
    }

    pub fn predicateForContactsWithIdentifiers(_identifiers: ?*foundation.Array(?*foundation.String)) ?*foundation.Predicate {
        return objc.msgSend(Internal.class(), "predicateForContactsWithIdentifiers:", ?*foundation.Predicate, .{_identifiers});
    }

    pub fn predicateForContactsInGroupWithIdentifier(_groupIdentifier: ?*foundation.String) ?*foundation.Predicate {
        return objc.msgSend(Internal.class(), "predicateForContactsInGroupWithIdentifier:", ?*foundation.Predicate, .{_groupIdentifier});
    }

    pub fn predicateForContactsInContainerWithIdentifier(_containerIdentifier: ?*foundation.String) ?*foundation.Predicate {
        return objc.msgSend(Internal.class(), "predicateForContactsInContainerWithIdentifier:", ?*foundation.Predicate, .{_containerIdentifier});
    }
};

pub const EntityType = objc.NSInteger;
pub const EntityType_Contacts: objc.NSInteger = 0;

pub const AuthorizationStatus = objc.NSInteger;
pub const AuthorizationStatus_NotDetermined: objc.NSInteger = 0;
pub const AuthorizationStatus_Restricted: objc.NSInteger = 1;
pub const AuthorizationStatus_Denied: objc.NSInteger = 2;
pub const AuthorizationStatus_Authorized: objc.NSInteger = 3;
pub const AuthorizationStatus_Limited: objc.NSInteger = 4;

/// https://developer.apple.com/documentation/Contacts/CNContactStore?language=objc
pub const ContactStore = opaque {
    pub const Internal = objc.ExternClass("CNContactStore", @This(), objc.NSObject, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn authorizationStatusForEntityType(_entityType: EntityType) AuthorizationStatus {
        return objc.msgSend(Internal.class(), "authorizationStatusForEntityType:", AuthorizationStatus, .{_entityType});
    }

    pub fn requestAccessForEntityTypeCompletionHandler(_self: *@This(), _entityType: EntityType, _completionHandler: *const fn (objc.BOOL, ?*foundation.Error) callconv(.C) void) void {
        return objc.msgSend(_self, "requestAccessForEntityType:completionHandler:", void, .{ _entityType, _completionHandler });
    }

    pub fn unifiedContactsMatchingPredicateKeysToFetchError(_self: *@This(), _predicate: ?*foundation.Predicate, _keys: ?*foundation.Array(?*objc.id), _error: ?*?*foundation.Error) ?*foundation.Array(?*Contact) {
        return objc.msgSend(_self, "unifiedContactsMatchingPredicate:keysToFetch:error:", ?*foundation.Array(?*Contact), .{ _predicate, _keys, _error });
    }

    pub fn unifiedContactWithIdentifierKeysToFetchError(_self: *@This(), _identifier: ?*foundation.String, _keys: ?*foundation.Array(?*objc.id), _error: ?*?*foundation.Error) ?*Contact {
        return objc.msgSend(_self, "unifiedContactWithIdentifier:keysToFetch:error:", ?*Contact, .{ _identifier, _keys, _error });
    }

    pub fn unifiedMeContactWithKeysToFetchError(_self: *@This(), _keys: ?*foundation.Array(?*objc.id), _error: ?*?*foundation.Error) ?*Contact {
        return objc.msgSend(_self, "unifiedMeContactWithKeysToFetch:error:", ?*Contact, .{ _keys, _error });
    }

    pub fn enumeratorForContactFetchRequestError(_self: *@This(), _request: ?*ContactFetchRequest, _error: ?*?*foundation.Error) ?*FetchResult(?*foundation.Enumerator(?*Contact)) {
        return objc.msgSend(_self, "enumeratorForContactFetchRequest:error:", ?*FetchResult(?*foundation.Enumerator(?*Contact)), .{ _request, _error });
    }

    pub fn enumeratorForChangeHistoryFetchRequestError(_self: *@This(), _request: ?*ChangeHistoryFetchRequest, _error: ?*?*foundation.Error) ?*FetchResult(?*foundation.Enumerator(?*ChangeHistoryEvent)) {
        return objc.msgSend(_self, "enumeratorForChangeHistoryFetchRequest:error:", ?*FetchResult(?*foundation.Enumerator(?*ChangeHistoryEvent)), .{ _request, _error });
    }

    pub fn enumerateContactsWithFetchRequestErrorUsingBlock(_self: *@This(), _fetchRequest: ?*ContactFetchRequest, _error: ?*?*foundation.Error, _block: *const fn (?*Contact, ?*objc.BOOL) callconv(.C) void) objc.BOOL {
        return objc.msgSend(_self, "enumerateContactsWithFetchRequest:error:usingBlock:", objc.BOOL, .{ _fetchRequest, _error, _block });
    }

    pub fn groupsMatchingPredicateError(_self: *@This(), _predicate: ?*foundation.Predicate, _error: ?*?*foundation.Error) ?*foundation.Array(?*Group) {
        return objc.msgSend(_self, "groupsMatchingPredicate:error:", ?*foundation.Array(?*Group), .{ _predicate, _error });
    }

    pub fn containersMatchingPredicateError(_self: *@This(), _predicate: ?*foundation.Predicate, _error: ?*?*foundation.Error) ?*foundation.Array(?*Container) {
        return objc.msgSend(_self, "containersMatchingPredicate:error:", ?*foundation.Array(?*Container), .{ _predicate, _error });
    }

    pub fn executeSaveRequestError(_self: *@This(), _saveRequest: ?*SaveRequest, _error: ?*?*foundation.Error) objc.BOOL {
        return objc.msgSend(_self, "executeSaveRequest:error:", objc.BOOL, .{ _saveRequest, _error });
    }

    pub fn defaultContainerIdentifier(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "defaultContainerIdentifier", ?*foundation.String, .{});
    }

    pub fn currentHistoryToken(_self: *@This()) ?*foundation.Data {
        return objc.msgSend(_self, "currentHistoryToken", ?*foundation.Data, .{});
    }
};

/// https://developer.apple.com/documentation/Contacts/CNFetchRequest?language=objc
pub const FetchRequest = opaque {
    pub const Internal = objc.ExternClass("CNFetchRequest", @This(), objc.NSObject, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;
};

/// https://developer.apple.com/documentation/Contacts/CNContactFetchRequest?language=objc
pub const ContactFetchRequest = opaque {
    pub const Internal = objc.ExternClass("CNContactFetchRequest", @This(), FetchRequest, &.{foundation.SecureCoding});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*foundation.Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*foundation.Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn supportsSecureCoding() objc.BOOL {
        return objc.msgSend(Internal.class(), "supportsSecureCoding", objc.BOOL, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn initWithKeysToFetch(_self: *@This(), _keysToFetch: ?*foundation.Array(?*objc.id)) *@This() {
        return objc.msgSend(_self, "initWithKeysToFetch:", *@This(), .{_keysToFetch});
    }

    pub fn predicate(_self: *@This()) ?*foundation.Predicate {
        return objc.msgSend(_self, "predicate", ?*foundation.Predicate, .{});
    }

    pub fn setPredicate(_self: *@This(), _predicate: ?*foundation.Predicate) void {
        return objc.msgSend(_self, "setPredicate:", void, .{_predicate});
    }

    pub fn keysToFetch(_self: *@This()) ?*foundation.Array(?*objc.id) {
        return objc.msgSend(_self, "keysToFetch", ?*foundation.Array(?*objc.id), .{});
    }

    pub fn setKeysToFetch(_self: *@This(), _keysToFetch: ?*foundation.Array(?*objc.id)) void {
        return objc.msgSend(_self, "setKeysToFetch:", void, .{_keysToFetch});
    }

    pub fn mutableObjects(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "mutableObjects", objc.BOOL, .{});
    }

    pub fn setMutableObjects(_self: *@This(), _mutableObjects: objc.BOOL) void {
        return objc.msgSend(_self, "setMutableObjects:", void, .{_mutableObjects});
    }

    pub fn unifyResults(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "unifyResults", objc.BOOL, .{});
    }

    pub fn setUnifyResults(_self: *@This(), _unifyResults: objc.BOOL) void {
        return objc.msgSend(_self, "setUnifyResults:", void, .{_unifyResults});
    }

    pub fn sortOrder(_self: *@This()) ContactSortOrder {
        return objc.msgSend(_self, "sortOrder", ContactSortOrder, .{});
    }

    pub fn setSortOrder(_self: *@This(), _sortOrder: ContactSortOrder) void {
        return objc.msgSend(_self, "setSortOrder:", void, .{_sortOrder});
    }
};

/// https://developer.apple.com/documentation/Contacts/CNFetchResult?language=objc
pub fn FetchResult(comptime ValueType: type) type {
    const unused0 = ValueType;
    _ = unused0; // Prevent unused parameter warning!!!
    return struct {
        pub const Internal = objc.ExternClass("CNFetchResult", @This(), objc.NSObject, &.{});
        pub const as = Internal.as;
        pub const retain = Internal.retain;
        pub const release = Internal.release;
        pub const autorelease = Internal.autorelease;
        pub const new = Internal.new;
        pub const alloc = Internal.alloc;

        pub fn init(_self: *@This()) *@This() {
            return objc.msgSend(_self, "init", *@This(), .{});
        }

        pub fn value(_self: *@This()) ValueType {
            return objc.msgSend(_self, "value", ValueType, .{});
        }

        pub fn currentHistoryToken(_self: *@This()) ?*foundation.Data {
            return objc.msgSend(_self, "currentHistoryToken", ?*foundation.Data, .{});
        }
    };
}

/// https://developer.apple.com/documentation/Contacts/CNSaveRequest?language=objc
pub const SaveRequest = opaque {
    pub const Internal = objc.ExternClass("CNSaveRequest", @This(), objc.NSObject, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn addContactToContainerWithIdentifier(_self: *@This(), _contact: ?*MutableContact, _identifier: ?*foundation.String) void {
        return objc.msgSend(_self, "addContact:toContainerWithIdentifier:", void, .{ _contact, _identifier });
    }

    pub fn updateContact(_self: *@This(), _contact: ?*MutableContact) void {
        return objc.msgSend(_self, "updateContact:", void, .{_contact});
    }

    pub fn deleteContact(_self: *@This(), _contact: ?*MutableContact) void {
        return objc.msgSend(_self, "deleteContact:", void, .{_contact});
    }

    pub fn addGroupToContainerWithIdentifier(_self: *@This(), _group: ?*MutableGroup, _identifier: ?*foundation.String) void {
        return objc.msgSend(_self, "addGroup:toContainerWithIdentifier:", void, .{ _group, _identifier });
    }

    pub fn updateGroup(_self: *@This(), _group: ?*MutableGroup) void {
        return objc.msgSend(_self, "updateGroup:", void, .{_group});
    }

    pub fn deleteGroup(_self: *@This(), _group: ?*MutableGroup) void {
        return objc.msgSend(_self, "deleteGroup:", void, .{_group});
    }

    pub fn addSubgroupToGroup(_self: *@This(), _subgroup: ?*Group, _group: ?*Group) void {
        return objc.msgSend(_self, "addSubgroup:toGroup:", void, .{ _subgroup, _group });
    }

    pub fn removeSubgroupFromGroup(_self: *@This(), _subgroup: ?*Group, _group: ?*Group) void {
        return objc.msgSend(_self, "removeSubgroup:fromGroup:", void, .{ _subgroup, _group });
    }

    pub fn addMemberToGroup(_self: *@This(), _contact: ?*Contact, _group: ?*Group) void {
        return objc.msgSend(_self, "addMember:toGroup:", void, .{ _contact, _group });
    }

    pub fn removeMemberFromGroup(_self: *@This(), _contact: ?*Contact, _group: ?*Group) void {
        return objc.msgSend(_self, "removeMember:fromGroup:", void, .{ _contact, _group });
    }

    pub fn transactionAuthor(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "transactionAuthor", ?*foundation.String, .{});
    }

    pub fn setTransactionAuthor(_self: *@This(), _transactionAuthor: ?*foundation.String) void {
        return objc.msgSend(_self, "setTransactionAuthor:", void, .{_transactionAuthor});
    }

    pub fn shouldRefetchContacts(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "shouldRefetchContacts", objc.BOOL, .{});
    }

    pub fn setShouldRefetchContacts(_self: *@This(), _shouldRefetchContacts: objc.BOOL) void {
        return objc.msgSend(_self, "setShouldRefetchContacts:", void, .{_shouldRefetchContacts});
    }
};

/// https://developer.apple.com/documentation/Contacts/CNChangeHistoryFetchRequest?language=objc
pub const ChangeHistoryFetchRequest = opaque {
    pub const Internal = objc.ExternClass("CNChangeHistoryFetchRequest", @This(), FetchRequest, &.{foundation.SecureCoding});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*foundation.Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*foundation.Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn supportsSecureCoding() objc.BOOL {
        return objc.msgSend(Internal.class(), "supportsSecureCoding", objc.BOOL, .{});
    }

    pub fn startingToken(_self: *@This()) ?*foundation.Data {
        return objc.msgSend(_self, "startingToken", ?*foundation.Data, .{});
    }

    pub fn setStartingToken(_self: *@This(), _startingToken: ?*foundation.Data) void {
        return objc.msgSend(_self, "setStartingToken:", void, .{_startingToken});
    }

    pub fn additionalContactKeyDescriptors(_self: *@This()) ?*foundation.Array(?*objc.id) {
        return objc.msgSend(_self, "additionalContactKeyDescriptors", ?*foundation.Array(?*objc.id), .{});
    }

    pub fn setAdditionalContactKeyDescriptors(_self: *@This(), _additionalContactKeyDescriptors: ?*foundation.Array(?*objc.id)) void {
        return objc.msgSend(_self, "setAdditionalContactKeyDescriptors:", void, .{_additionalContactKeyDescriptors});
    }

    pub fn shouldUnifyResults(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "shouldUnifyResults", objc.BOOL, .{});
    }

    pub fn setShouldUnifyResults(_self: *@This(), _shouldUnifyResults: objc.BOOL) void {
        return objc.msgSend(_self, "setShouldUnifyResults:", void, .{_shouldUnifyResults});
    }

    pub fn mutableObjects(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "mutableObjects", objc.BOOL, .{});
    }

    pub fn setMutableObjects(_self: *@This(), _mutableObjects: objc.BOOL) void {
        return objc.msgSend(_self, "setMutableObjects:", void, .{_mutableObjects});
    }

    pub fn includeGroupChanges(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "includeGroupChanges", objc.BOOL, .{});
    }

    pub fn setIncludeGroupChanges(_self: *@This(), _includeGroupChanges: objc.BOOL) void {
        return objc.msgSend(_self, "setIncludeGroupChanges:", void, .{_includeGroupChanges});
    }

    pub fn excludedTransactionAuthors(_self: *@This()) ?*foundation.Array(?*foundation.String) {
        return objc.msgSend(_self, "excludedTransactionAuthors", ?*foundation.Array(?*foundation.String), .{});
    }

    pub fn setExcludedTransactionAuthors(_self: *@This(), _excludedTransactionAuthors: ?*foundation.Array(?*foundation.String)) void {
        return objc.msgSend(_self, "setExcludedTransactionAuthors:", void, .{_excludedTransactionAuthors});
    }
};

/// https://developer.apple.com/documentation/Contacts/CNChangeHistoryEvent?language=objc
pub const ChangeHistoryEvent = opaque {
    pub const Internal = objc.ExternClass("CNChangeHistoryEvent", @This(), objc.NSObject, &.{ foundation.Copying, foundation.SecureCoding });
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn copyWithZone(_self: *@This(), _zone: ?*foundation.Zone) ?objc.Id {
        return objc.msgSend(_self, "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*foundation.Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*foundation.Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn supportsSecureCoding() objc.BOOL {
        return objc.msgSend(Internal.class(), "supportsSecureCoding", objc.BOOL, .{});
    }

    pub fn acceptEventVisitor(_self: *@This(), _visitor: ?*objc.id) void {
        return objc.msgSend(_self, "acceptEventVisitor:", void, .{_visitor});
    }
};

/// https://developer.apple.com/documentation/Contacts/CNChangeHistoryDropEverythingEvent?language=objc
pub const ChangeHistoryDropEverythingEvent = opaque {
    pub const Internal = objc.ExternClass("CNChangeHistoryDropEverythingEvent", @This(), ChangeHistoryEvent, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;
};

/// https://developer.apple.com/documentation/Contacts/CNChangeHistoryAddContactEvent?language=objc
pub const ChangeHistoryAddContactEvent = opaque {
    pub const Internal = objc.ExternClass("CNChangeHistoryAddContactEvent", @This(), ChangeHistoryEvent, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn contact(_self: *@This()) ?*Contact {
        return objc.msgSend(_self, "contact", ?*Contact, .{});
    }

    pub fn containerIdentifier(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "containerIdentifier", ?*foundation.String, .{});
    }
};

/// https://developer.apple.com/documentation/Contacts/CNChangeHistoryUpdateContactEvent?language=objc
pub const ChangeHistoryUpdateContactEvent = opaque {
    pub const Internal = objc.ExternClass("CNChangeHistoryUpdateContactEvent", @This(), ChangeHistoryEvent, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn contact(_self: *@This()) ?*Contact {
        return objc.msgSend(_self, "contact", ?*Contact, .{});
    }
};

/// https://developer.apple.com/documentation/Contacts/CNChangeHistoryDeleteContactEvent?language=objc
pub const ChangeHistoryDeleteContactEvent = opaque {
    pub const Internal = objc.ExternClass("CNChangeHistoryDeleteContactEvent", @This(), ChangeHistoryEvent, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn contactIdentifier(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "contactIdentifier", ?*foundation.String, .{});
    }
};

/// https://developer.apple.com/documentation/Contacts/CNChangeHistoryAddGroupEvent?language=objc
pub const ChangeHistoryAddGroupEvent = opaque {
    pub const Internal = objc.ExternClass("CNChangeHistoryAddGroupEvent", @This(), ChangeHistoryEvent, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn group(_self: *@This()) ?*Group {
        return objc.msgSend(_self, "group", ?*Group, .{});
    }

    pub fn containerIdentifier(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "containerIdentifier", ?*foundation.String, .{});
    }
};

/// https://developer.apple.com/documentation/Contacts/CNChangeHistoryUpdateGroupEvent?language=objc
pub const ChangeHistoryUpdateGroupEvent = opaque {
    pub const Internal = objc.ExternClass("CNChangeHistoryUpdateGroupEvent", @This(), ChangeHistoryEvent, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn group(_self: *@This()) ?*Group {
        return objc.msgSend(_self, "group", ?*Group, .{});
    }
};

/// https://developer.apple.com/documentation/Contacts/CNChangeHistoryDeleteGroupEvent?language=objc
pub const ChangeHistoryDeleteGroupEvent = opaque {
    pub const Internal = objc.ExternClass("CNChangeHistoryDeleteGroupEvent", @This(), ChangeHistoryEvent, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn groupIdentifier(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "groupIdentifier", ?*foundation.String, .{});
    }
};

/// https://developer.apple.com/documentation/Contacts/CNChangeHistoryAddMemberToGroupEvent?language=objc
pub const ChangeHistoryAddMemberToGroupEvent = opaque {
    pub const Internal = objc.ExternClass("CNChangeHistoryAddMemberToGroupEvent", @This(), ChangeHistoryEvent, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn member(_self: *@This()) ?*Contact {
        return objc.msgSend(_self, "member", ?*Contact, .{});
    }

    pub fn group(_self: *@This()) ?*Group {
        return objc.msgSend(_self, "group", ?*Group, .{});
    }
};

/// https://developer.apple.com/documentation/Contacts/CNChangeHistoryRemoveMemberFromGroupEvent?language=objc
pub const ChangeHistoryRemoveMemberFromGroupEvent = opaque {
    pub const Internal = objc.ExternClass("CNChangeHistoryRemoveMemberFromGroupEvent", @This(), ChangeHistoryEvent, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn member(_self: *@This()) ?*Contact {
        return objc.msgSend(_self, "member", ?*Contact, .{});
    }

    pub fn group(_self: *@This()) ?*Group {
        return objc.msgSend(_self, "group", ?*Group, .{});
    }
};

/// https://developer.apple.com/documentation/Contacts/CNChangeHistoryAddSubgroupToGroupEvent?language=objc
pub const ChangeHistoryAddSubgroupToGroupEvent = opaque {
    pub const Internal = objc.ExternClass("CNChangeHistoryAddSubgroupToGroupEvent", @This(), ChangeHistoryEvent, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn subgroup(_self: *@This()) ?*Group {
        return objc.msgSend(_self, "subgroup", ?*Group, .{});
    }

    pub fn group(_self: *@This()) ?*Group {
        return objc.msgSend(_self, "group", ?*Group, .{});
    }
};

/// https://developer.apple.com/documentation/Contacts/CNChangeHistoryRemoveSubgroupFromGroupEvent?language=objc
pub const ChangeHistoryRemoveSubgroupFromGroupEvent = opaque {
    pub const Internal = objc.ExternClass("CNChangeHistoryRemoveSubgroupFromGroupEvent", @This(), ChangeHistoryEvent, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn subgroup(_self: *@This()) ?*Group {
        return objc.msgSend(_self, "subgroup", ?*Group, .{});
    }

    pub fn group(_self: *@This()) ?*Group {
        return objc.msgSend(_self, "group", ?*Group, .{});
    }
};

/// https://developer.apple.com/documentation/Contacts/CNChangeHistoryEventVisitor?language=objc
pub const ChangeHistoryEventVisitor = opaque {
    pub const Internal = objc.ExternProtocol(@This(), &.{objc.NSObject});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "description", ?*foundation.String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "debugDescription", ?*foundation.String, .{});
    }

    pub fn visitDropEverythingEvent(_self: *@This(), _event: ?*ChangeHistoryDropEverythingEvent) void {
        return objc.msgSend(_self, "visitDropEverythingEvent:", void, .{_event});
    }

    pub fn visitAddContactEvent(_self: *@This(), _event: ?*ChangeHistoryAddContactEvent) void {
        return objc.msgSend(_self, "visitAddContactEvent:", void, .{_event});
    }

    pub fn visitUpdateContactEvent(_self: *@This(), _event: ?*ChangeHistoryUpdateContactEvent) void {
        return objc.msgSend(_self, "visitUpdateContactEvent:", void, .{_event});
    }

    pub fn visitDeleteContactEvent(_self: *@This(), _event: ?*ChangeHistoryDeleteContactEvent) void {
        return objc.msgSend(_self, "visitDeleteContactEvent:", void, .{_event});
    }

    pub fn visitAddGroupEvent(_self: *@This(), _event: ?*ChangeHistoryAddGroupEvent) void {
        return objc.msgSend(_self, "visitAddGroupEvent:", void, .{_event});
    }

    pub fn visitUpdateGroupEvent(_self: *@This(), _event: ?*ChangeHistoryUpdateGroupEvent) void {
        return objc.msgSend(_self, "visitUpdateGroupEvent:", void, .{_event});
    }

    pub fn visitDeleteGroupEvent(_self: *@This(), _event: ?*ChangeHistoryDeleteGroupEvent) void {
        return objc.msgSend(_self, "visitDeleteGroupEvent:", void, .{_event});
    }

    pub fn visitAddMemberToGroupEvent(_self: *@This(), _event: ?*ChangeHistoryAddMemberToGroupEvent) void {
        return objc.msgSend(_self, "visitAddMemberToGroupEvent:", void, .{_event});
    }

    pub fn visitRemoveMemberFromGroupEvent(_self: *@This(), _event: ?*ChangeHistoryRemoveMemberFromGroupEvent) void {
        return objc.msgSend(_self, "visitRemoveMemberFromGroupEvent:", void, .{_event});
    }

    pub fn visitAddSubgroupToGroupEvent(_self: *@This(), _event: ?*ChangeHistoryAddSubgroupToGroupEvent) void {
        return objc.msgSend(_self, "visitAddSubgroupToGroupEvent:", void, .{_event});
    }

    pub fn visitRemoveSubgroupFromGroupEvent(_self: *@This(), _event: ?*ChangeHistoryRemoveSubgroupFromGroupEvent) void {
        return objc.msgSend(_self, "visitRemoveSubgroupFromGroupEvent:", void, .{_event});
    }
};

/// https://developer.apple.com/documentation/Contacts/CNMutableContact?language=objc
pub const MutableContact = opaque {
    pub const Internal = objc.ExternClass("CNMutableContact", @This(), Contact, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn contactType(_self: *@This()) ContactType {
        return objc.msgSend(_self, "contactType", ContactType, .{});
    }

    pub fn setContactType(_self: *@This(), _contactType: ContactType) void {
        return objc.msgSend(_self, "setContactType:", void, .{_contactType});
    }

    pub fn namePrefix(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "namePrefix", ?*foundation.String, .{});
    }

    pub fn setNamePrefix(_self: *@This(), _namePrefix: ?*foundation.String) void {
        return objc.msgSend(_self, "setNamePrefix:", void, .{_namePrefix});
    }

    pub fn givenName(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "givenName", ?*foundation.String, .{});
    }

    pub fn setGivenName(_self: *@This(), _givenName: ?*foundation.String) void {
        return objc.msgSend(_self, "setGivenName:", void, .{_givenName});
    }

    pub fn middleName(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "middleName", ?*foundation.String, .{});
    }

    pub fn setMiddleName(_self: *@This(), _middleName: ?*foundation.String) void {
        return objc.msgSend(_self, "setMiddleName:", void, .{_middleName});
    }

    pub fn familyName(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "familyName", ?*foundation.String, .{});
    }

    pub fn setFamilyName(_self: *@This(), _familyName: ?*foundation.String) void {
        return objc.msgSend(_self, "setFamilyName:", void, .{_familyName});
    }

    pub fn previousFamilyName(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "previousFamilyName", ?*foundation.String, .{});
    }

    pub fn setPreviousFamilyName(_self: *@This(), _previousFamilyName: ?*foundation.String) void {
        return objc.msgSend(_self, "setPreviousFamilyName:", void, .{_previousFamilyName});
    }

    pub fn nameSuffix(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "nameSuffix", ?*foundation.String, .{});
    }

    pub fn setNameSuffix(_self: *@This(), _nameSuffix: ?*foundation.String) void {
        return objc.msgSend(_self, "setNameSuffix:", void, .{_nameSuffix});
    }

    pub fn nickname(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "nickname", ?*foundation.String, .{});
    }

    pub fn setNickname(_self: *@This(), _nickname: ?*foundation.String) void {
        return objc.msgSend(_self, "setNickname:", void, .{_nickname});
    }

    pub fn organizationName(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "organizationName", ?*foundation.String, .{});
    }

    pub fn setOrganizationName(_self: *@This(), _organizationName: ?*foundation.String) void {
        return objc.msgSend(_self, "setOrganizationName:", void, .{_organizationName});
    }

    pub fn departmentName(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "departmentName", ?*foundation.String, .{});
    }

    pub fn setDepartmentName(_self: *@This(), _departmentName: ?*foundation.String) void {
        return objc.msgSend(_self, "setDepartmentName:", void, .{_departmentName});
    }

    pub fn jobTitle(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "jobTitle", ?*foundation.String, .{});
    }

    pub fn setJobTitle(_self: *@This(), _jobTitle: ?*foundation.String) void {
        return objc.msgSend(_self, "setJobTitle:", void, .{_jobTitle});
    }

    pub fn phoneticGivenName(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "phoneticGivenName", ?*foundation.String, .{});
    }

    pub fn setPhoneticGivenName(_self: *@This(), _phoneticGivenName: ?*foundation.String) void {
        return objc.msgSend(_self, "setPhoneticGivenName:", void, .{_phoneticGivenName});
    }

    pub fn phoneticMiddleName(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "phoneticMiddleName", ?*foundation.String, .{});
    }

    pub fn setPhoneticMiddleName(_self: *@This(), _phoneticMiddleName: ?*foundation.String) void {
        return objc.msgSend(_self, "setPhoneticMiddleName:", void, .{_phoneticMiddleName});
    }

    pub fn phoneticFamilyName(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "phoneticFamilyName", ?*foundation.String, .{});
    }

    pub fn setPhoneticFamilyName(_self: *@This(), _phoneticFamilyName: ?*foundation.String) void {
        return objc.msgSend(_self, "setPhoneticFamilyName:", void, .{_phoneticFamilyName});
    }

    pub fn phoneticOrganizationName(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "phoneticOrganizationName", ?*foundation.String, .{});
    }

    pub fn setPhoneticOrganizationName(_self: *@This(), _phoneticOrganizationName: ?*foundation.String) void {
        return objc.msgSend(_self, "setPhoneticOrganizationName:", void, .{_phoneticOrganizationName});
    }

    pub fn note(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "note", ?*foundation.String, .{});
    }

    pub fn setNote(_self: *@This(), _note: ?*foundation.String) void {
        return objc.msgSend(_self, "setNote:", void, .{_note});
    }

    pub fn imageData(_self: *@This()) ?*foundation.Data {
        return objc.msgSend(_self, "imageData", ?*foundation.Data, .{});
    }

    pub fn setImageData(_self: *@This(), _imageData: ?*foundation.Data) void {
        return objc.msgSend(_self, "setImageData:", void, .{_imageData});
    }

    pub fn phoneNumbers(_self: *@This()) ?*foundation.Array(?*LabeledValue(?*PhoneNumber)) {
        return objc.msgSend(_self, "phoneNumbers", ?*foundation.Array(?*LabeledValue(?*PhoneNumber)), .{});
    }

    pub fn setPhoneNumbers(_self: *@This(), _phoneNumbers: ?*foundation.Array(?*LabeledValue(?*PhoneNumber))) void {
        return objc.msgSend(_self, "setPhoneNumbers:", void, .{_phoneNumbers});
    }

    pub fn emailAddresses(_self: *@This()) ?*foundation.Array(?*LabeledValue(?*foundation.String)) {
        return objc.msgSend(_self, "emailAddresses", ?*foundation.Array(?*LabeledValue(?*foundation.String)), .{});
    }

    pub fn setEmailAddresses(_self: *@This(), _emailAddresses: ?*foundation.Array(?*LabeledValue(?*foundation.String))) void {
        return objc.msgSend(_self, "setEmailAddresses:", void, .{_emailAddresses});
    }

    pub fn postalAddresses(_self: *@This()) ?*foundation.Array(?*LabeledValue(?*PostalAddress)) {
        return objc.msgSend(_self, "postalAddresses", ?*foundation.Array(?*LabeledValue(?*PostalAddress)), .{});
    }

    pub fn setPostalAddresses(_self: *@This(), _postalAddresses: ?*foundation.Array(?*LabeledValue(?*PostalAddress))) void {
        return objc.msgSend(_self, "setPostalAddresses:", void, .{_postalAddresses});
    }

    pub fn urlAddresses(_self: *@This()) ?*foundation.Array(?*LabeledValue(?*foundation.String)) {
        return objc.msgSend(_self, "urlAddresses", ?*foundation.Array(?*LabeledValue(?*foundation.String)), .{});
    }

    pub fn setUrlAddresses(_self: *@This(), _urlAddresses: ?*foundation.Array(?*LabeledValue(?*foundation.String))) void {
        return objc.msgSend(_self, "setUrlAddresses:", void, .{_urlAddresses});
    }

    pub fn contactRelations(_self: *@This()) ?*foundation.Array(?*LabeledValue(?*ContactRelation)) {
        return objc.msgSend(_self, "contactRelations", ?*foundation.Array(?*LabeledValue(?*ContactRelation)), .{});
    }

    pub fn setContactRelations(_self: *@This(), _contactRelations: ?*foundation.Array(?*LabeledValue(?*ContactRelation))) void {
        return objc.msgSend(_self, "setContactRelations:", void, .{_contactRelations});
    }

    pub fn socialProfiles(_self: *@This()) ?*foundation.Array(?*LabeledValue(?*SocialProfile)) {
        return objc.msgSend(_self, "socialProfiles", ?*foundation.Array(?*LabeledValue(?*SocialProfile)), .{});
    }

    pub fn setSocialProfiles(_self: *@This(), _socialProfiles: ?*foundation.Array(?*LabeledValue(?*SocialProfile))) void {
        return objc.msgSend(_self, "setSocialProfiles:", void, .{_socialProfiles});
    }

    pub fn instantMessageAddresses(_self: *@This()) ?*foundation.Array(?*LabeledValue(?*InstantMessageAddress)) {
        return objc.msgSend(_self, "instantMessageAddresses", ?*foundation.Array(?*LabeledValue(?*InstantMessageAddress)), .{});
    }

    pub fn setInstantMessageAddresses(_self: *@This(), _instantMessageAddresses: ?*foundation.Array(?*LabeledValue(?*InstantMessageAddress))) void {
        return objc.msgSend(_self, "setInstantMessageAddresses:", void, .{_instantMessageAddresses});
    }

    pub fn birthday(_self: *@This()) ?*foundation.DateComponents {
        return objc.msgSend(_self, "birthday", ?*foundation.DateComponents, .{});
    }

    pub fn setBirthday(_self: *@This(), _birthday: ?*foundation.DateComponents) void {
        return objc.msgSend(_self, "setBirthday:", void, .{_birthday});
    }

    pub fn nonGregorianBirthday(_self: *@This()) ?*foundation.DateComponents {
        return objc.msgSend(_self, "nonGregorianBirthday", ?*foundation.DateComponents, .{});
    }

    pub fn setNonGregorianBirthday(_self: *@This(), _nonGregorianBirthday: ?*foundation.DateComponents) void {
        return objc.msgSend(_self, "setNonGregorianBirthday:", void, .{_nonGregorianBirthday});
    }

    pub fn dates(_self: *@This()) ?*foundation.Array(?*LabeledValue(?*foundation.DateComponents)) {
        return objc.msgSend(_self, "dates", ?*foundation.Array(?*LabeledValue(?*foundation.DateComponents)), .{});
    }

    pub fn setDates(_self: *@This(), _dates: ?*foundation.Array(?*LabeledValue(?*foundation.DateComponents))) void {
        return objc.msgSend(_self, "setDates:", void, .{_dates});
    }
};

/// https://developer.apple.com/documentation/Contacts/CNMutablePostalAddress?language=objc
pub const MutablePostalAddress = opaque {
    pub const Internal = objc.ExternClass("CNMutablePostalAddress", @This(), PostalAddress, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn street(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "street", ?*foundation.String, .{});
    }

    pub fn setStreet(_self: *@This(), _street: ?*foundation.String) void {
        return objc.msgSend(_self, "setStreet:", void, .{_street});
    }

    pub fn subLocality(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "subLocality", ?*foundation.String, .{});
    }

    pub fn setSubLocality(_self: *@This(), _subLocality: ?*foundation.String) void {
        return objc.msgSend(_self, "setSubLocality:", void, .{_subLocality});
    }

    pub fn city(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "city", ?*foundation.String, .{});
    }

    pub fn setCity(_self: *@This(), _city: ?*foundation.String) void {
        return objc.msgSend(_self, "setCity:", void, .{_city});
    }

    pub fn subAdministrativeArea(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "subAdministrativeArea", ?*foundation.String, .{});
    }

    pub fn setSubAdministrativeArea(_self: *@This(), _subAdministrativeArea: ?*foundation.String) void {
        return objc.msgSend(_self, "setSubAdministrativeArea:", void, .{_subAdministrativeArea});
    }

    pub fn state(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "state", ?*foundation.String, .{});
    }

    pub fn setState(_self: *@This(), _state: ?*foundation.String) void {
        return objc.msgSend(_self, "setState:", void, .{_state});
    }

    pub fn postalCode(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "postalCode", ?*foundation.String, .{});
    }

    pub fn setPostalCode(_self: *@This(), _postalCode: ?*foundation.String) void {
        return objc.msgSend(_self, "setPostalCode:", void, .{_postalCode});
    }

    pub fn country(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "country", ?*foundation.String, .{});
    }

    pub fn setCountry(_self: *@This(), _country: ?*foundation.String) void {
        return objc.msgSend(_self, "setCountry:", void, .{_country});
    }

    pub fn isoCountryCode(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "ISOCountryCode", ?*foundation.String, .{});
    }

    pub fn setISOCountryCode(_self: *@This(), _ISOCountryCode: ?*foundation.String) void {
        return objc.msgSend(_self, "setISOCountryCode:", void, .{_ISOCountryCode});
    }
};

/// https://developer.apple.com/documentation/Contacts/CNGroup?language=objc
pub const Group = opaque {
    pub const Internal = objc.ExternClass("CNGroup", @This(), objc.NSObject, &.{ foundation.Copying, foundation.MutableCopying, foundation.SecureCoding });
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn copyWithZone(_self: *@This(), _zone: ?*foundation.Zone) ?objc.Id {
        return objc.msgSend(_self, "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_self: *@This(), _zone: ?*foundation.Zone) ?objc.Id {
        return objc.msgSend(_self, "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*foundation.Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*foundation.Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn supportsSecureCoding() objc.BOOL {
        return objc.msgSend(Internal.class(), "supportsSecureCoding", objc.BOOL, .{});
    }

    pub fn identifier(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "identifier", ?*foundation.String, .{});
    }

    pub fn name(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "name", ?*foundation.String, .{});
    }

    pub fn predicateForGroupsWithIdentifiers(_identifiers: ?*foundation.Array(?*foundation.String)) ?*foundation.Predicate {
        return objc.msgSend(Internal.class(), "predicateForGroupsWithIdentifiers:", ?*foundation.Predicate, .{_identifiers});
    }

    pub fn predicateForSubgroupsInGroupWithIdentifier(_parentGroupIdentifier: ?*foundation.String) ?*foundation.Predicate {
        return objc.msgSend(Internal.class(), "predicateForSubgroupsInGroupWithIdentifier:", ?*foundation.Predicate, .{_parentGroupIdentifier});
    }

    pub fn predicateForGroupsInContainerWithIdentifier(_containerIdentifier: ?*foundation.String) ?*foundation.Predicate {
        return objc.msgSend(Internal.class(), "predicateForGroupsInContainerWithIdentifier:", ?*foundation.Predicate, .{_containerIdentifier});
    }
};

/// https://developer.apple.com/documentation/Contacts/CNMutableGroup?language=objc
pub const MutableGroup = opaque {
    pub const Internal = objc.ExternClass("CNMutableGroup", @This(), Group, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn name(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "name", ?*foundation.String, .{});
    }

    pub fn setName(_self: *@This(), _name: ?*foundation.String) void {
        return objc.msgSend(_self, "setName:", void, .{_name});
    }
};

pub const ContainerType = objc.NSInteger;
pub const ContainerType_Unassigned: objc.NSInteger = 0;
pub const ContainerType_Local: objc.NSInteger = 1;
pub const ContainerType_Exchange: objc.NSInteger = 2;
pub const ContainerType_CardDAV: objc.NSInteger = 3;

/// https://developer.apple.com/documentation/Contacts/CNContainer?language=objc
pub const Container = opaque {
    pub const Internal = objc.ExternClass("CNContainer", @This(), objc.NSObject, &.{ foundation.Copying, foundation.SecureCoding });
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn copyWithZone(_self: *@This(), _zone: ?*foundation.Zone) ?objc.Id {
        return objc.msgSend(_self, "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*foundation.Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*foundation.Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn supportsSecureCoding() objc.BOOL {
        return objc.msgSend(Internal.class(), "supportsSecureCoding", objc.BOOL, .{});
    }

    pub fn identifier(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "identifier", ?*foundation.String, .{});
    }

    pub fn name(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "name", ?*foundation.String, .{});
    }

    pub fn @"type"(_self: *@This()) ContainerType {
        return objc.msgSend(_self, "type", ContainerType, .{});
    }

    pub fn predicateForContainersWithIdentifiers(_identifiers: ?*foundation.Array(?*foundation.String)) ?*foundation.Predicate {
        return objc.msgSend(Internal.class(), "predicateForContainersWithIdentifiers:", ?*foundation.Predicate, .{_identifiers});
    }

    pub fn predicateForContainerOfContactWithIdentifier(_contactIdentifier: ?*foundation.String) ?*foundation.Predicate {
        return objc.msgSend(Internal.class(), "predicateForContainerOfContactWithIdentifier:", ?*foundation.Predicate, .{_contactIdentifier});
    }

    pub fn predicateForContainerOfGroupWithIdentifier(_groupIdentifier: ?*foundation.String) ?*foundation.Predicate {
        return objc.msgSend(Internal.class(), "predicateForContainerOfGroupWithIdentifier:", ?*foundation.Predicate, .{_groupIdentifier});
    }
};

pub const ContactFormatterStyle = objc.NSInteger;
pub const ContactFormatterStyle_FullName: objc.NSInteger = 0;
pub const ContactFormatterStyle_PhoneticFullName: objc.NSInteger = 1;

pub const ContactDisplayNameOrder = objc.NSInteger;
pub const ContactDisplayNameOrder_UserDefault: objc.NSInteger = 0;
pub const ContactDisplayNameOrder_GivenNameFirst: objc.NSInteger = 1;
pub const ContactDisplayNameOrder_FamilyNameFirst: objc.NSInteger = 2;

/// https://developer.apple.com/documentation/Contacts/CNContactFormatter?language=objc
pub const ContactFormatter = opaque {
    pub const Internal = objc.ExternClass("CNContactFormatter", @This(), foundation.Formatter, &.{foundation.SecureCoding});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*foundation.Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*foundation.Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn supportsSecureCoding() objc.BOOL {
        return objc.msgSend(Internal.class(), "supportsSecureCoding", objc.BOOL, .{});
    }

    pub fn descriptorForRequiredKeysForStyle(_style: ContactFormatterStyle) ?*objc.id {
        return objc.msgSend(Internal.class(), "descriptorForRequiredKeysForStyle:", ?*objc.id, .{_style});
    }

    pub fn stringFromContactStyle(_contact: ?*Contact, _style: ContactFormatterStyle) ?*foundation.String {
        return objc.msgSend(Internal.class(), "stringFromContact:style:", ?*foundation.String, .{ _contact, _style });
    }

    pub fn attributedStringFromContactStyleDefaultAttributes(_contact: ?*Contact, _style: ContactFormatterStyle, _attributes: ?*foundation.Dictionary) ?*foundation.AttributedString {
        return objc.msgSend(Internal.class(), "attributedStringFromContact:style:defaultAttributes:", ?*foundation.AttributedString, .{ _contact, _style, _attributes });
    }

    pub fn nameOrderForContact(_contact: ?*Contact) ContactDisplayNameOrder {
        return objc.msgSend(Internal.class(), "nameOrderForContact:", ContactDisplayNameOrder, .{_contact});
    }

    pub fn delimiterForContact(_contact: ?*Contact) ?*foundation.String {
        return objc.msgSend(Internal.class(), "delimiterForContact:", ?*foundation.String, .{_contact});
    }

    pub fn stringFromContact(_self: *@This(), _contact: ?*Contact) ?*foundation.String {
        return objc.msgSend(_self, "stringFromContact:", ?*foundation.String, .{_contact});
    }

    pub fn attributedStringFromContactDefaultAttributes(_self: *@This(), _contact: ?*Contact, _attributes: ?*foundation.Dictionary) ?*foundation.AttributedString {
        return objc.msgSend(_self, "attributedStringFromContact:defaultAttributes:", ?*foundation.AttributedString, .{ _contact, _attributes });
    }

    pub fn descriptorForRequiredKeysForNameOrder() ?*objc.id {
        return objc.msgSend(Internal.class(), "descriptorForRequiredKeysForNameOrder", ?*objc.id, .{});
    }

    pub fn descriptorForRequiredKeysForDelimiter() ?*objc.id {
        return objc.msgSend(Internal.class(), "descriptorForRequiredKeysForDelimiter", ?*objc.id, .{});
    }

    pub fn style(_self: *@This()) ContactFormatterStyle {
        return objc.msgSend(_self, "style", ContactFormatterStyle, .{});
    }

    pub fn setStyle(_self: *@This(), _style: ContactFormatterStyle) void {
        return objc.msgSend(_self, "setStyle:", void, .{_style});
    }
};

pub const PostalAddressFormatterStyle = objc.NSInteger;
pub const PostalAddressFormatterStyle_MailingAddress: objc.NSInteger = 0;

/// https://developer.apple.com/documentation/Contacts/CNPostalAddressFormatter?language=objc
pub const PostalAddressFormatter = opaque {
    pub const Internal = objc.ExternClass("CNPostalAddressFormatter", @This(), foundation.Formatter, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn stringFromPostalAddressStyle(_postalAddress: ?*PostalAddress, _style: PostalAddressFormatterStyle) ?*foundation.String {
        return objc.msgSend(Internal.class(), "stringFromPostalAddress:style:", ?*foundation.String, .{ _postalAddress, _style });
    }

    pub fn attributedStringFromPostalAddressStyleWithDefaultAttributes(_postalAddress: ?*PostalAddress, _style: PostalAddressFormatterStyle, _attributes: ?*foundation.Dictionary) ?*foundation.AttributedString {
        return objc.msgSend(Internal.class(), "attributedStringFromPostalAddress:style:withDefaultAttributes:", ?*foundation.AttributedString, .{ _postalAddress, _style, _attributes });
    }

    pub fn stringFromPostalAddress(_self: *@This(), _postalAddress: ?*PostalAddress) ?*foundation.String {
        return objc.msgSend(_self, "stringFromPostalAddress:", ?*foundation.String, .{_postalAddress});
    }

    pub fn attributedStringFromPostalAddressWithDefaultAttributes(_self: *@This(), _postalAddress: ?*PostalAddress, _attributes: ?*foundation.Dictionary) ?*foundation.AttributedString {
        return objc.msgSend(_self, "attributedStringFromPostalAddress:withDefaultAttributes:", ?*foundation.AttributedString, .{ _postalAddress, _attributes });
    }

    pub fn style(_self: *@This()) PostalAddressFormatterStyle {
        return objc.msgSend(_self, "style", PostalAddressFormatterStyle, .{});
    }

    pub fn setStyle(_self: *@This(), _style: PostalAddressFormatterStyle) void {
        return objc.msgSend(_self, "setStyle:", void, .{_style});
    }
};

/// https://developer.apple.com/documentation/Contacts/CNContactVCardSerialization?language=objc
pub const ContactVCardSerialization = opaque {
    pub const Internal = objc.ExternClass("CNContactVCardSerialization", @This(), objc.NSObject, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn descriptorForRequiredKeys() ?*objc.id {
        return objc.msgSend(Internal.class(), "descriptorForRequiredKeys", ?*objc.id, .{});
    }

    pub fn dataWithContactsError(_contacts: ?*foundation.Array(?*Contact), _error: ?*?*foundation.Error) ?*foundation.Data {
        return objc.msgSend(Internal.class(), "dataWithContacts:error:", ?*foundation.Data, .{ _contacts, _error });
    }

    pub fn contactsWithDataError(_data: ?*foundation.Data, _error: ?*?*foundation.Error) ?*foundation.Array(?*Contact) {
        return objc.msgSend(Internal.class(), "contactsWithData:error:", ?*foundation.Array(?*Contact), .{ _data, _error });
    }
};

/// https://developer.apple.com/documentation/Contacts/CNContactsUserDefaults?language=objc
pub const ContactsUserDefaults = opaque {
    pub const Internal = objc.ExternClass("CNContactsUserDefaults", @This(), objc.NSObject, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn sharedDefaults() *@This() {
        return objc.msgSend(Internal.class(), "sharedDefaults", *@This(), .{});
    }

    pub fn sortOrder(_self: *@This()) ContactSortOrder {
        return objc.msgSend(_self, "sortOrder", ContactSortOrder, .{});
    }

    pub fn countryCode(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "countryCode", ?*foundation.String, .{});
    }
};

/// https://developer.apple.com/documentation/Contacts/CNContactProperty?language=objc
pub const ContactProperty = opaque {
    pub const Internal = objc.ExternClass("CNContactProperty", @This(), objc.NSObject, &.{ foundation.Copying, foundation.SecureCoding });
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn copyWithZone(_self: *@This(), _zone: ?*foundation.Zone) ?objc.Id {
        return objc.msgSend(_self, "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*foundation.Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*foundation.Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn supportsSecureCoding() objc.BOOL {
        return objc.msgSend(Internal.class(), "supportsSecureCoding", objc.BOOL, .{});
    }

    pub fn contact(_self: *@This()) ?*Contact {
        return objc.msgSend(_self, "contact", ?*Contact, .{});
    }

    pub fn key(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "key", ?*foundation.String, .{});
    }

    pub fn value(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "value", ?objc.Id, .{});
    }

    pub fn identifier(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "identifier", ?*foundation.String, .{});
    }

    pub fn label(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "label", ?*foundation.String, .{});
    }
};

pub const ErrorCode = objc.NSInteger;
pub const ErrorCode_CommunicationError: objc.NSInteger = 1;
pub const ErrorCode_DataAccessError: objc.NSInteger = 2;
pub const ErrorCode_AuthorizationDenied: objc.NSInteger = 100;
pub const ErrorCode_NoAccessableWritableContainers: objc.NSInteger = 101;
pub const ErrorCode_UnauthorizedKeys: objc.NSInteger = 102;
pub const ErrorCode_FeatureDisabledByUser: objc.NSInteger = 103;
pub const ErrorCode_FeatureNotAvailable: objc.NSInteger = 104;
pub const ErrorCode_RecordDoesNotExist: objc.NSInteger = 200;
pub const ErrorCode_InsertedRecordAlreadyExists: objc.NSInteger = 201;
pub const ErrorCode_ContainmentCycle: objc.NSInteger = 202;
pub const ErrorCode_ContainmentScope: objc.NSInteger = 203;
pub const ErrorCode_ParentRecordDoesNotExist: objc.NSInteger = 204;
pub const ErrorCode_RecordIdentifierInvalid: objc.NSInteger = 205;
pub const ErrorCode_RecordNotWritable: objc.NSInteger = 206;
pub const ErrorCode_ParentContainerNotWritable: objc.NSInteger = 207;
pub const ErrorCode_ValidationMultipleErrors: objc.NSInteger = 300;
pub const ErrorCode_ValidationTypeMismatch: objc.NSInteger = 301;
pub const ErrorCode_ValidationConfigurationError: objc.NSInteger = 302;
pub const ErrorCode_PredicateInvalid: objc.NSInteger = 400;
pub const ErrorCode_PolicyViolation: objc.NSInteger = 500;
pub const ErrorCode_ClientIdentifierInvalid: objc.NSInteger = 600;
pub const ErrorCode_ClientIdentifierDoesNotExist: objc.NSInteger = 601;
pub const ErrorCode_ClientIdentifierCollision: objc.NSInteger = 602;
pub const ErrorCode_ChangeHistoryExpired: objc.NSInteger = 603;
pub const ErrorCode_ChangeHistoryInvalidAnchor: objc.NSInteger = 604;
pub const ErrorCode_ChangeHistoryInvalidFetchRequest: objc.NSInteger = 605;
pub const ErrorCode_VCardMalformed: objc.NSInteger = 700;
pub const ErrorCode_VCardSummarizationError: objc.NSInteger = 701;
