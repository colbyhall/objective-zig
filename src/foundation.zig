// THIS FILE IS AUTOGENERATED. MODIFICATIONS WILL NOT BE MAINTAINED.

const std = @import("std");
const objc = @import("objc.zig"); // Objective-C Runtime in zig.
const core_foundation = @import("core_foundation.zig"); // Framework dependency CoreFoundation.
const security = @import("security.zig"); // Framework dependency Security.
const core_services = @import("core_services.zig"); // Framework dependency CoreServices.
const app_kit = @import("app_kit.zig"); // Framework dependency AppKit.

pub const ExceptionName = ?*String;

pub const RunLoopMode = ?*String;

extern "Foundation" fn NSStringFromSelector(aSelector: objc.Selector) callconv(.C) ?*String;
pub const stringFromSelector = NSStringFromSelector;

extern "Foundation" fn NSSelectorFromString(aSelectorName: ?*String) callconv(.C) objc.Selector;
pub const selectorFromString = NSSelectorFromString;

extern "Foundation" fn NSStringFromClass(aClass: objc.Class) callconv(.C) ?*String;
pub const stringFromClass = NSStringFromClass;

extern "Foundation" fn NSClassFromString(aClassName: ?*String) callconv(.C) objc.Class;
pub const classFromString = NSClassFromString;

extern "Foundation" fn NSStringFromProtocol(proto: ?**objc.Protocol) callconv(.C) ?*String;
pub const stringFromProtocol = NSStringFromProtocol;

extern "Foundation" fn NSProtocolFromString(namestr: ?*String) callconv(.C) ?**objc.Protocol;
pub const protocolFromString = NSProtocolFromString;

extern "Foundation" fn NSGetSizeAndAlignment(typePtr: ?*i8, sizep: ?*objc.NSUInteger, alignp: ?*objc.NSUInteger) callconv(.C) ?*i8;
pub const getSizeAndAlignment = NSGetSizeAndAlignment;

extern "Foundation" fn NSLog(format: ?*String) callconv(.C) void;
pub const log = NSLog;

extern "Foundation" fn NSLogv(format: ?*String, args: objc.va_list) callconv(.C) void;
pub const logv = NSLogv;

pub const ComparisonResult = objc.NSInteger;
pub const ComparisonResult_OrderedAscending: objc.NSInteger = -1;
pub const ComparisonResult_OrderedSame: objc.NSInteger = 0;
pub const ComparisonResult_OrderedDescending: objc.NSInteger = 1;

pub const Comparator = ComparisonResult;

pub const EnumerationOptions = objc.NSUInteger;
pub const EnumerationOptions_Concurrent: objc.NSUInteger = 1;
pub const EnumerationOptions_Reverse: objc.NSUInteger = 2;

pub const SortOptions = objc.NSUInteger;
pub const SortOptions_Concurrent: objc.NSUInteger = 1;
pub const SortOptions_Stable: objc.NSUInteger = 16;

pub const QualityOfService = objc.NSInteger;
pub const QualityOfService_UserInteractive: objc.NSInteger = 33;
pub const QualityOfService_UserInitiated: objc.NSInteger = 25;
pub const QualityOfService_Utility: objc.NSInteger = 17;
pub const QualityOfService_Background: objc.NSInteger = 9;
pub const QualityOfService_Default: objc.NSInteger = -1;

pub const Zone = objc._NSZone;

extern "Foundation" fn NSDefaultMallocZone() callconv(.C) ?*Zone;
pub const defaultMallocZone = NSDefaultMallocZone;

extern "Foundation" fn NSCreateZone(startSize: objc.NSUInteger, granularity: objc.NSUInteger, canFree: objc.BOOL) callconv(.C) ?*Zone;
pub const createZone = NSCreateZone;

extern "Foundation" fn NSRecycleZone(zone: ?*Zone) callconv(.C) void;
pub const recycleZone = NSRecycleZone;

extern "Foundation" fn NSSetZoneName(zone: ?*Zone, name: ?*String) callconv(.C) void;
pub const setZoneName = NSSetZoneName;

extern "Foundation" fn NSZoneName(zone: ?*Zone) callconv(.C) ?*String;
pub const zoneName = NSZoneName;

extern "Foundation" fn NSZoneFromPointer(ptr: ?*anyopaque) callconv(.C) ?*Zone;
pub const zoneFromPointer = NSZoneFromPointer;

extern "Foundation" fn NSZoneMalloc(zone: ?*Zone, size: objc.NSUInteger) callconv(.C) ?*anyopaque;
pub const zoneMalloc = NSZoneMalloc;

extern "Foundation" fn NSZoneCalloc(zone: ?*Zone, numElems: objc.NSUInteger, byteSize: objc.NSUInteger) callconv(.C) ?*anyopaque;
pub const zoneCalloc = NSZoneCalloc;

extern "Foundation" fn NSZoneRealloc(zone: ?*Zone, ptr: ?*anyopaque, size: objc.NSUInteger) callconv(.C) ?*anyopaque;
pub const zoneRealloc = NSZoneRealloc;

extern "Foundation" fn NSZoneFree(zone: ?*Zone, ptr: ?*anyopaque) callconv(.C) void;
pub const zoneFree = NSZoneFree;

pub const anon321 = objc.NSUInteger;
pub const anon321_NSScannedOption: objc.NSUInteger = 1;
pub const anon321_NSCollectorDisabledOption: objc.NSUInteger = 2;
pub const anon321_NSTextCheckingAllSystemTypes: objc.NSUInteger = 4294967295;
pub const anon321_NSTextCheckingAllCustomTypes: objc.NSUInteger = -4294967296;
pub const anon321_NSTextCheckingAllTypes: objc.NSUInteger = -1;
pub const anon321_AEUserTerminology: objc.NSUInteger = 1634039156;
pub const anon321_AETerminologyExtension: objc.NSUInteger = 1634038885;
pub const anon321_AEScriptingSizeResource: objc.NSUInteger = 1935897466;
pub const anon321_AEOSAXSizeResource: objc.NSUInteger = 1869834618;

extern "Foundation" fn NSAllocateCollectable(size: objc.NSUInteger, options: objc.NSUInteger) callconv(.C) ?*anyopaque;
pub const allocateCollectable = NSAllocateCollectable;

extern "Foundation" fn NSReallocateCollectable(ptr: ?*anyopaque, size: objc.NSUInteger, options: objc.NSUInteger) callconv(.C) ?*anyopaque;
pub const reallocateCollectable = NSReallocateCollectable;

extern "Foundation" fn NSPageSize() callconv(.C) objc.NSUInteger;
pub const pageSize = NSPageSize;

extern "Foundation" fn NSLogPageSize() callconv(.C) objc.NSUInteger;
pub const logPageSize = NSLogPageSize;

extern "Foundation" fn NSRoundUpToMultipleOfPageSize(bytes: objc.NSUInteger) callconv(.C) objc.NSUInteger;
pub const roundUpToMultipleOfPageSize = NSRoundUpToMultipleOfPageSize;

extern "Foundation" fn NSRoundDownToMultipleOfPageSize(bytes: objc.NSUInteger) callconv(.C) objc.NSUInteger;
pub const roundDownToMultipleOfPageSize = NSRoundDownToMultipleOfPageSize;

extern "Foundation" fn NSAllocateMemoryPages(bytes: objc.NSUInteger) callconv(.C) ?*anyopaque;
pub const allocateMemoryPages = NSAllocateMemoryPages;

extern "Foundation" fn NSDeallocateMemoryPages(ptr: ?*anyopaque, bytes: objc.NSUInteger) callconv(.C) void;
pub const deallocateMemoryPages = NSDeallocateMemoryPages;

extern "Foundation" fn NSCopyMemoryPages(source: ?*anyopaque, dest: ?*anyopaque, bytes: objc.NSUInteger) callconv(.C) void;
pub const copyMemoryPages = NSCopyMemoryPages;

extern "Foundation" fn NSRealMemoryAvailable() callconv(.C) objc.NSUInteger;
pub const realMemoryAvailable = NSRealMemoryAvailable;

/// https://developer.apple.com/documentation/Foundation/NSCopying?language=objc
pub const Copying = opaque {
    pub const Internal = objc.ExternProtocol(@This(), &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;

    pub fn copyWithZone(_self: *@This(), _zone: ?*Zone) ?objc.Id {
        return objc.msgSend(_self, "copyWithZone:", ?objc.Id, .{_zone});
    }
};

/// https://developer.apple.com/documentation/Foundation/NSMutableCopying?language=objc
pub const MutableCopying = opaque {
    pub const Internal = objc.ExternProtocol(@This(), &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;

    pub fn mutableCopyWithZone(_self: *@This(), _zone: ?*Zone) ?objc.Id {
        return objc.msgSend(_self, "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }
};

/// https://developer.apple.com/documentation/Foundation/NSCoding?language=objc
pub const Coding = opaque {
    pub const Internal = objc.ExternProtocol(@This(), &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }
};

/// https://developer.apple.com/documentation/Foundation/NSSecureCoding?language=objc
pub const SecureCoding = opaque {
    pub const Internal = objc.ExternProtocol(@This(), &.{Coding});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn supportsSecureCoding() objc.BOOL {
        return objc.msgSend(Internal.class(), "supportsSecureCoding", objc.BOOL, .{});
    }
};

/// https://developer.apple.com/documentation/Foundation/NSDiscardableContent?language=objc
pub const DiscardableContent = opaque {
    pub const Internal = objc.ExternProtocol(@This(), &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;

    pub fn beginContentAccess(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "beginContentAccess", objc.BOOL, .{});
    }

    pub fn endContentAccess(_self: *@This()) void {
        return objc.msgSend(_self, "endContentAccess", void, .{});
    }

    pub fn discardContentIfPossible(_self: *@This()) void {
        return objc.msgSend(_self, "discardContentIfPossible", void, .{});
    }

    pub fn isContentDiscarded(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isContentDiscarded", objc.BOOL, .{});
    }
};

extern "Foundation" fn NSAllocateObject(aClass: objc.Class, extraBytes: objc.NSUInteger, zone: ?*Zone) callconv(.C) ?objc.Id;
pub const allocateObject = NSAllocateObject;

extern "Foundation" fn NSDeallocateObject(object: ?objc.Id) callconv(.C) void;
pub const deallocateObject = NSDeallocateObject;

extern "Foundation" fn NSCopyObject(object: ?objc.Id, extraBytes: objc.NSUInteger, zone: ?*Zone) callconv(.C) ?objc.Id;
pub const copyObject = NSCopyObject;

extern "Foundation" fn NSShouldRetainWithZone(anObject: ?objc.Id, requestedZone: ?*Zone) callconv(.C) objc.BOOL;
pub const shouldRetainWithZone = NSShouldRetainWithZone;

extern "Foundation" fn NSIncrementExtraRefCount(object: ?objc.Id) callconv(.C) void;
pub const incrementExtraRefCount = NSIncrementExtraRefCount;

extern "Foundation" fn NSDecrementExtraRefCountWasZero(object: ?objc.Id) callconv(.C) objc.BOOL;
pub const decrementExtraRefCountWasZero = NSDecrementExtraRefCountWasZero;

extern "Foundation" fn NSExtraRefCount(object: ?objc.Id) callconv(.C) objc.NSUInteger;
pub const extraRefCount = NSExtraRefCount;

pub const FastEnumerationState = extern struct {
    state: u64,
    itemsPtr: ?*?objc.Id,
    mutationsPtr: ?*u64,
    extra: [5]u64,
};

/// https://developer.apple.com/documentation/Foundation/NSFastEnumeration?language=objc
pub const FastEnumeration = opaque {
    pub const Internal = objc.ExternProtocol(@This(), &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;

    pub fn countByEnumeratingWithStateObjectsCount(_self: *@This(), _state: ?*FastEnumerationState, _buffer: ?*?objc.Id, _len: objc.NSUInteger) objc.NSUInteger {
        return objc.msgSend(_self, "countByEnumeratingWithState:objects:count:", objc.NSUInteger, .{ _state, _buffer, _len });
    }
};

/// https://developer.apple.com/documentation/Foundation/NSEnumerator?language=objc
pub fn Enumerator(comptime ObjectType: type) type {
    const unused0 = ObjectType;
    _ = unused0; // Prevent unused parameter warning!!!
    return struct {
        pub const Internal = objc.ExternClass("NSEnumerator", @This(), objc.NSObject, &.{FastEnumeration});
        pub const as = Internal.as;
        pub const retain = Internal.retain;
        pub const release = Internal.release;
        pub const autorelease = Internal.autorelease;
        pub const new = Internal.new;
        pub const alloc = Internal.alloc;

        pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
            return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
        }

        pub fn hash(_self: *@This()) objc.NSUInteger {
            return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
        }

        pub fn superclass(_self: *@This()) objc.Class {
            return objc.msgSend(_self, "superclass", objc.Class, .{});
        }

        pub fn class(_self: *@This()) objc.Class {
            return objc.msgSend(_self, "class", objc.Class, .{});
        }

        pub fn self(_self: *@This()) *@This() {
            return objc.msgSend(_self, "self", *@This(), .{});
        }

        pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
            return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
        }

        pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
            return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
        }

        pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
            return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
        }

        pub fn isProxy(_self: *@This()) objc.BOOL {
            return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
        }

        pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
            return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
        }

        pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
            return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
        }

        pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
            return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
        }

        pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
            return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
        }

        pub fn retainCount(_self: *@This()) objc.NSUInteger {
            return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
        }

        pub fn zone(_self: *@This()) ?*objc._NSZone {
            return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
        }

        pub fn description(_self: *@This()) ?*String {
            return objc.msgSend(_self, "description", ?*String, .{});
        }

        pub fn debugDescription(_self: *@This()) ?*String {
            return objc.msgSend(_self, "debugDescription", ?*String, .{});
        }

        pub fn load() void {
            return objc.msgSend(Internal.class(), "load", void, .{});
        }

        pub fn initialize() void {
            return objc.msgSend(Internal.class(), "initialize", void, .{});
        }

        pub fn init(_self: *@This()) *@This() {
            return objc.msgSend(_self, "init", *@This(), .{});
        }

        pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
            return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
        }

        pub fn dealloc(_self: *@This()) void {
            return objc.msgSend(_self, "dealloc", void, .{});
        }

        pub fn finalize(_self: *@This()) void {
            return objc.msgSend(_self, "finalize", void, .{});
        }

        pub fn copy(_self: *@This()) ?objc.Id {
            return objc.msgSend(_self, "copy", ?objc.Id, .{});
        }

        pub fn mutableCopy(_self: *@This()) ?objc.Id {
            return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
        }

        pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
            return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
        }

        pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
            return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
        }

        pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
            return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
        }

        pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
            return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
        }

        pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
            return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
        }

        pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
            return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
        }

        pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
            return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
        }

        pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
            return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
        }

        pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
            return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
        }

        pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
            return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
        }

        pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
            return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
        }

        pub fn retainWeakReference(_self: *@This()) objc.BOOL {
            return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
        }

        pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
            return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
        }

        pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
            return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
        }

        pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
            return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
        }

        pub fn countByEnumeratingWithStateObjectsCount(_self: *@This(), _state: ?*FastEnumerationState, _buffer: ?*?objc.Id, _len: objc.NSUInteger) objc.NSUInteger {
            return objc.msgSend(_self, "countByEnumeratingWithState:objects:count:", objc.NSUInteger, .{ _state, _buffer, _len });
        }

        pub fn nextObject(_self: *@This()) ObjectType {
            return objc.msgSend(_self, "nextObject", ObjectType, .{});
        }
    };
}

/// https://developer.apple.com/documentation/Foundation/NSValue?language=objc
pub const Value = opaque {
    pub const Internal = objc.ExternClass("NSValue", @This(), objc.NSObject, &.{ Copying, SecureCoding });
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn supportsSecureCoding() objc.BOOL {
        return objc.msgSend(Internal.class(), "supportsSecureCoding", objc.BOOL, .{});
    }

    pub fn getValueSize(_self: *@This(), _value: ?*anyopaque, _size: objc.NSUInteger) void {
        return objc.msgSend(_self, "getValue:size:", void, .{ _value, _size });
    }

    pub fn initWithBytesObjCType(_self: *@This(), _value: ?*anyopaque, _type: ?*i8) *@This() {
        return objc.msgSend(_self, "initWithBytes:objCType:", *@This(), .{ _value, _type });
    }

    pub fn objCType(_self: *@This()) ?*i8 {
        return objc.msgSend(_self, "objCType", ?*i8, .{});
    }
};

/// https://developer.apple.com/documentation/Foundation/NSNumber?language=objc
pub const Number = opaque {
    pub const Internal = objc.ExternClass("NSNumber", @This(), Value, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn supportsSecureCoding() objc.BOOL {
        return objc.msgSend(Internal.class(), "supportsSecureCoding", objc.BOOL, .{});
    }

    pub fn getValueSize(_self: *@This(), _value: ?*anyopaque, _size: objc.NSUInteger) void {
        return objc.msgSend(_self, "getValue:size:", void, .{ _value, _size });
    }

    pub fn initWithBytesObjCType(_self: *@This(), _value: ?*anyopaque, _type: ?*i8) *@This() {
        return objc.msgSend(_self, "initWithBytes:objCType:", *@This(), .{ _value, _type });
    }

    pub fn objCType(_self: *@This()) ?*i8 {
        return objc.msgSend(_self, "objCType", ?*i8, .{});
    }

    pub fn initWithChar(_self: *@This(), _value: i8) ?*Number {
        return objc.msgSend(_self, "initWithChar:", ?*Number, .{_value});
    }

    pub fn initWithUnsignedChar(_self: *@This(), _value: u8) ?*Number {
        return objc.msgSend(_self, "initWithUnsignedChar:", ?*Number, .{_value});
    }

    pub fn initWithShort(_self: *@This(), _value: i16) ?*Number {
        return objc.msgSend(_self, "initWithShort:", ?*Number, .{_value});
    }

    pub fn initWithUnsignedShort(_self: *@This(), _value: u16) ?*Number {
        return objc.msgSend(_self, "initWithUnsignedShort:", ?*Number, .{_value});
    }

    pub fn initWithInt(_self: *@This(), _value: i32) ?*Number {
        return objc.msgSend(_self, "initWithInt:", ?*Number, .{_value});
    }

    pub fn initWithUnsignedInt(_self: *@This(), _value: u32) ?*Number {
        return objc.msgSend(_self, "initWithUnsignedInt:", ?*Number, .{_value});
    }

    pub fn initWithLong(_self: *@This(), _value: i64) ?*Number {
        return objc.msgSend(_self, "initWithLong:", ?*Number, .{_value});
    }

    pub fn initWithUnsignedLong(_self: *@This(), _value: u64) ?*Number {
        return objc.msgSend(_self, "initWithUnsignedLong:", ?*Number, .{_value});
    }

    pub fn initWithLongLong(_self: *@This(), _value: i64) ?*Number {
        return objc.msgSend(_self, "initWithLongLong:", ?*Number, .{_value});
    }

    pub fn initWithUnsignedLongLong(_self: *@This(), _value: u64) ?*Number {
        return objc.msgSend(_self, "initWithUnsignedLongLong:", ?*Number, .{_value});
    }

    pub fn initWithFloat(_self: *@This(), _value: f32) ?*Number {
        return objc.msgSend(_self, "initWithFloat:", ?*Number, .{_value});
    }

    pub fn initWithDouble(_self: *@This(), _value: f64) ?*Number {
        return objc.msgSend(_self, "initWithDouble:", ?*Number, .{_value});
    }

    pub fn initWithBool(_self: *@This(), _value: objc.BOOL) ?*Number {
        return objc.msgSend(_self, "initWithBool:", ?*Number, .{_value});
    }

    pub fn initWithInteger(_self: *@This(), _value: objc.NSInteger) ?*Number {
        return objc.msgSend(_self, "initWithInteger:", ?*Number, .{_value});
    }

    pub fn initWithUnsignedInteger(_self: *@This(), _value: objc.NSUInteger) ?*Number {
        return objc.msgSend(_self, "initWithUnsignedInteger:", ?*Number, .{_value});
    }

    pub fn compare(_self: *@This(), _otherNumber: ?*Number) ComparisonResult {
        return objc.msgSend(_self, "compare:", ComparisonResult, .{_otherNumber});
    }

    pub fn isEqualToNumber(_self: *@This(), _number: ?*Number) objc.BOOL {
        return objc.msgSend(_self, "isEqualToNumber:", objc.BOOL, .{_number});
    }

    pub fn descriptionWithLocale(_self: *@This(), _locale: ?objc.Id) ?*String {
        return objc.msgSend(_self, "descriptionWithLocale:", ?*String, .{_locale});
    }

    pub fn charValue(_self: *@This()) i8 {
        return objc.msgSend(_self, "charValue", i8, .{});
    }

    pub fn unsignedCharValue(_self: *@This()) u8 {
        return objc.msgSend(_self, "unsignedCharValue", u8, .{});
    }

    pub fn shortValue(_self: *@This()) i16 {
        return objc.msgSend(_self, "shortValue", i16, .{});
    }

    pub fn unsignedShortValue(_self: *@This()) u16 {
        return objc.msgSend(_self, "unsignedShortValue", u16, .{});
    }

    pub fn intValue(_self: *@This()) i32 {
        return objc.msgSend(_self, "intValue", i32, .{});
    }

    pub fn unsignedIntValue(_self: *@This()) u32 {
        return objc.msgSend(_self, "unsignedIntValue", u32, .{});
    }

    pub fn longValue(_self: *@This()) i64 {
        return objc.msgSend(_self, "longValue", i64, .{});
    }

    pub fn unsignedLongValue(_self: *@This()) u64 {
        return objc.msgSend(_self, "unsignedLongValue", u64, .{});
    }

    pub fn longLongValue(_self: *@This()) i64 {
        return objc.msgSend(_self, "longLongValue", i64, .{});
    }

    pub fn unsignedLongLongValue(_self: *@This()) u64 {
        return objc.msgSend(_self, "unsignedLongLongValue", u64, .{});
    }

    pub fn floatValue(_self: *@This()) f32 {
        return objc.msgSend(_self, "floatValue", f32, .{});
    }

    pub fn doubleValue(_self: *@This()) f64 {
        return objc.msgSend(_self, "doubleValue", f64, .{});
    }

    pub fn boolValue(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "boolValue", objc.BOOL, .{});
    }

    pub fn integerValue(_self: *@This()) objc.NSInteger {
        return objc.msgSend(_self, "integerValue", objc.NSInteger, .{});
    }

    pub fn unsignedIntegerValue(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "unsignedIntegerValue", objc.NSUInteger, .{});
    }

    pub fn stringValue(_self: *@This()) ?*String {
        return objc.msgSend(_self, "stringValue", ?*String, .{});
    }
};

pub const _NSRange = extern struct {
    location: objc.NSUInteger,
    length: objc.NSUInteger,
};

pub const Range = _NSRange;

pub const RangePointer = Range;

extern "Foundation" fn NSUnionRange(range1: Range, range2: Range) callconv(.C) Range;
pub const unionRange = NSUnionRange;

extern "Foundation" fn NSIntersectionRange(range1: Range, range2: Range) callconv(.C) Range;
pub const intersectionRange = NSIntersectionRange;

extern "Foundation" fn NSStringFromRange(range: Range) callconv(.C) ?*String;
pub const stringFromRange = NSStringFromRange;

extern "Foundation" fn NSRangeFromString(aString: ?*String) callconv(.C) Range;
pub const rangeFromString = NSRangeFromString;

pub const CollectionChangeType = objc.NSInteger;
pub const CollectionChangeType_Insert: objc.NSInteger = 0;
pub const CollectionChangeType_Remove: objc.NSInteger = 1;

/// https://developer.apple.com/documentation/Foundation/NSOrderedCollectionChange?language=objc
pub fn OrderedCollectionChange(comptime ObjectType: type) type {
    const unused0 = ObjectType;
    _ = unused0; // Prevent unused parameter warning!!!
    return struct {
        pub const Internal = objc.ExternClass("NSOrderedCollectionChange", @This(), objc.NSObject, &.{});
        pub const as = Internal.as;
        pub const retain = Internal.retain;
        pub const release = Internal.release;
        pub const autorelease = Internal.autorelease;
        pub const new = Internal.new;
        pub const alloc = Internal.alloc;

        pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
            return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
        }

        pub fn hash(_self: *@This()) objc.NSUInteger {
            return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
        }

        pub fn superclass(_self: *@This()) objc.Class {
            return objc.msgSend(_self, "superclass", objc.Class, .{});
        }

        pub fn class(_self: *@This()) objc.Class {
            return objc.msgSend(_self, "class", objc.Class, .{});
        }

        pub fn self(_self: *@This()) *@This() {
            return objc.msgSend(_self, "self", *@This(), .{});
        }

        pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
            return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
        }

        pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
            return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
        }

        pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
            return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
        }

        pub fn isProxy(_self: *@This()) objc.BOOL {
            return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
        }

        pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
            return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
        }

        pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
            return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
        }

        pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
            return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
        }

        pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
            return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
        }

        pub fn retainCount(_self: *@This()) objc.NSUInteger {
            return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
        }

        pub fn zone(_self: *@This()) ?*objc._NSZone {
            return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
        }

        pub fn description(_self: *@This()) ?*String {
            return objc.msgSend(_self, "description", ?*String, .{});
        }

        pub fn debugDescription(_self: *@This()) ?*String {
            return objc.msgSend(_self, "debugDescription", ?*String, .{});
        }

        pub fn load() void {
            return objc.msgSend(Internal.class(), "load", void, .{});
        }

        pub fn initialize() void {
            return objc.msgSend(Internal.class(), "initialize", void, .{});
        }

        pub fn init(_self: *@This()) *@This() {
            return objc.msgSend(_self, "init", *@This(), .{});
        }

        pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
            return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
        }

        pub fn dealloc(_self: *@This()) void {
            return objc.msgSend(_self, "dealloc", void, .{});
        }

        pub fn finalize(_self: *@This()) void {
            return objc.msgSend(_self, "finalize", void, .{});
        }

        pub fn copy(_self: *@This()) ?objc.Id {
            return objc.msgSend(_self, "copy", ?objc.Id, .{});
        }

        pub fn mutableCopy(_self: *@This()) ?objc.Id {
            return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
        }

        pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
            return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
        }

        pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
            return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
        }

        pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
            return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
        }

        pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
            return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
        }

        pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
            return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
        }

        pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
            return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
        }

        pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
            return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
        }

        pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
            return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
        }

        pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
            return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
        }

        pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
            return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
        }

        pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
            return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
        }

        pub fn retainWeakReference(_self: *@This()) objc.BOOL {
            return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
        }

        pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
            return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
        }

        pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
            return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
        }

        pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
            return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
        }

        pub fn changeWithObjectTypeIndex(_anObject: ObjectType, _type: CollectionChangeType, _index: objc.NSUInteger) ?*anyopaque {
            return objc.msgSend(Internal.class(), "changeWithObject:type:index:", ?*anyopaque, .{ _anObject, _type, _index });
        }

        pub fn changeWithObjectTypeIndexAssociatedIndex(
            _anObject: ObjectType,
            _type: CollectionChangeType,
            _index: objc.NSUInteger,
            _associatedIndex: objc.NSUInteger,
        ) ?*anyopaque {
            return objc.msgSend(Internal.class(), "changeWithObject:type:index:associatedIndex:", ?*anyopaque, .{
                _anObject,
                _type,
                _index,
                _associatedIndex,
            });
        }

        pub fn initWithObjectTypeIndex(_self: *@This(), _anObject: ObjectType, _type: CollectionChangeType, _index: objc.NSUInteger) *@This() {
            return objc.msgSend(_self, "initWithObject:type:index:", *@This(), .{ _anObject, _type, _index });
        }

        pub fn initWithObjectTypeIndexAssociatedIndex(
            _self: *@This(),
            _anObject: ObjectType,
            _type: CollectionChangeType,
            _index: objc.NSUInteger,
            _associatedIndex: objc.NSUInteger,
        ) *@This() {
            return objc.msgSend(_self, "initWithObject:type:index:associatedIndex:", *@This(), .{
                _anObject,
                _type,
                _index,
                _associatedIndex,
            });
        }

        pub fn object(_self: *@This()) ObjectType {
            return objc.msgSend(_self, "object", ObjectType, .{});
        }

        pub fn changeType(_self: *@This()) CollectionChangeType {
            return objc.msgSend(_self, "changeType", CollectionChangeType, .{});
        }

        pub fn index(_self: *@This()) objc.NSUInteger {
            return objc.msgSend(_self, "index", objc.NSUInteger, .{});
        }

        pub fn associatedIndex(_self: *@This()) objc.NSUInteger {
            return objc.msgSend(_self, "associatedIndex", objc.NSUInteger, .{});
        }
    };
}

/// https://developer.apple.com/documentation/Foundation/NSIndexSet?language=objc
pub const IndexSet = opaque {
    pub const anon335 = extern struct {
        _hasSingleRange: objc.NSUInteger,
        _hasBitfield: objc.NSUInteger,
        _reservedArrayBinderController: objc.NSUInteger,
    };

    pub const anon385 = extern union {
        pub const anon399 = extern struct {
            _range: Range,
        };

        pub const anon429 = extern struct {
            _data: ?*anyopaque,
            _reserved: ?*anyopaque,
        };

        pub const anon469 = extern struct {
            _bitfield: objc.uint64_t,
        };

        _singleRange: IndexSet.anon385.anon399,
        _multipleRanges: IndexSet.anon385.anon429,
        _singleBitfield: IndexSet.anon385.anon469,
    };

    pub const Internal = objc.ExternClass("NSIndexSet", @This(), objc.NSObject, &.{ Copying, MutableCopying, SecureCoding });
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn supportsSecureCoding() objc.BOOL {
        return objc.msgSend(Internal.class(), "supportsSecureCoding", objc.BOOL, .{});
    }

    pub fn indexSet() *@This() {
        return objc.msgSend(Internal.class(), "indexSet", *@This(), .{});
    }

    pub fn indexSetWithIndex(_value: objc.NSUInteger) *@This() {
        return objc.msgSend(Internal.class(), "indexSetWithIndex:", *@This(), .{_value});
    }

    pub fn indexSetWithIndexesInRange(_range: Range) *@This() {
        return objc.msgSend(Internal.class(), "indexSetWithIndexesInRange:", *@This(), .{_range});
    }

    pub fn initWithIndexesInRange(_self: *@This(), _range: Range) *@This() {
        return objc.msgSend(_self, "initWithIndexesInRange:", *@This(), .{_range});
    }

    pub fn initWithIndexSet(_self: *@This(), _indexSet: ?*IndexSet) *@This() {
        return objc.msgSend(_self, "initWithIndexSet:", *@This(), .{_indexSet});
    }

    pub fn initWithIndex(_self: *@This(), _value: objc.NSUInteger) *@This() {
        return objc.msgSend(_self, "initWithIndex:", *@This(), .{_value});
    }

    pub fn isEqualToIndexSet(_self: *@This(), _indexSet: ?*IndexSet) objc.BOOL {
        return objc.msgSend(_self, "isEqualToIndexSet:", objc.BOOL, .{_indexSet});
    }

    pub fn indexGreaterThanIndex(_self: *@This(), _value: objc.NSUInteger) objc.NSUInteger {
        return objc.msgSend(_self, "indexGreaterThanIndex:", objc.NSUInteger, .{_value});
    }

    pub fn indexLessThanIndex(_self: *@This(), _value: objc.NSUInteger) objc.NSUInteger {
        return objc.msgSend(_self, "indexLessThanIndex:", objc.NSUInteger, .{_value});
    }

    pub fn indexGreaterThanOrEqualToIndex(_self: *@This(), _value: objc.NSUInteger) objc.NSUInteger {
        return objc.msgSend(_self, "indexGreaterThanOrEqualToIndex:", objc.NSUInteger, .{_value});
    }

    pub fn indexLessThanOrEqualToIndex(_self: *@This(), _value: objc.NSUInteger) objc.NSUInteger {
        return objc.msgSend(_self, "indexLessThanOrEqualToIndex:", objc.NSUInteger, .{_value});
    }

    pub fn getIndexesMaxCountInIndexRange(_self: *@This(), _indexBuffer: ?*objc.NSUInteger, _bufferSize: objc.NSUInteger, _range: RangePointer) objc.NSUInteger {
        return objc.msgSend(_self, "getIndexes:maxCount:inIndexRange:", objc.NSUInteger, .{ _indexBuffer, _bufferSize, _range });
    }

    pub fn countOfIndexesInRange(_self: *@This(), _range: Range) objc.NSUInteger {
        return objc.msgSend(_self, "countOfIndexesInRange:", objc.NSUInteger, .{_range});
    }

    pub fn containsIndex(_self: *@This(), _value: objc.NSUInteger) objc.BOOL {
        return objc.msgSend(_self, "containsIndex:", objc.BOOL, .{_value});
    }

    pub fn containsIndexesInRange(_self: *@This(), _range: Range) objc.BOOL {
        return objc.msgSend(_self, "containsIndexesInRange:", objc.BOOL, .{_range});
    }

    pub fn containsIndexes(_self: *@This(), _indexSet: ?*IndexSet) objc.BOOL {
        return objc.msgSend(_self, "containsIndexes:", objc.BOOL, .{_indexSet});
    }

    pub fn intersectsIndexesInRange(_self: *@This(), _range: Range) objc.BOOL {
        return objc.msgSend(_self, "intersectsIndexesInRange:", objc.BOOL, .{_range});
    }

    pub fn enumerateIndexesUsingBlock(_self: *@This(), _block: *const fn (objc.NSUInteger, ?*objc.BOOL) callconv(.C) void) void {
        return objc.msgSend(_self, "enumerateIndexesUsingBlock:", void, .{_block});
    }

    pub fn enumerateIndexesWithOptionsUsingBlock(_self: *@This(), _opts: EnumerationOptions, _block: *const fn (objc.NSUInteger, ?*objc.BOOL) callconv(.C) void) void {
        return objc.msgSend(_self, "enumerateIndexesWithOptions:usingBlock:", void, .{ _opts, _block });
    }

    pub fn enumerateIndexesInRangeOptionsUsingBlock(_self: *@This(), _range: Range, _opts: EnumerationOptions, _block: *const fn (objc.NSUInteger, ?*objc.BOOL) callconv(.C) void) void {
        return objc.msgSend(_self, "enumerateIndexesInRange:options:usingBlock:", void, .{ _range, _opts, _block });
    }

    pub fn indexPassingTest(_self: *@This(), _predicate: *const fn (objc.NSUInteger, ?*objc.BOOL) callconv(.C) objc.BOOL) objc.NSUInteger {
        return objc.msgSend(_self, "indexPassingTest:", objc.NSUInteger, .{_predicate});
    }

    pub fn indexWithOptionsPassingTest(_self: *@This(), _opts: EnumerationOptions, _predicate: *const fn (objc.NSUInteger, ?*objc.BOOL) callconv(.C) objc.BOOL) objc.NSUInteger {
        return objc.msgSend(_self, "indexWithOptions:passingTest:", objc.NSUInteger, .{ _opts, _predicate });
    }

    pub fn indexInRangeOptionsPassingTest(_self: *@This(), _range: Range, _opts: EnumerationOptions, _predicate: *const fn (objc.NSUInteger, ?*objc.BOOL) callconv(.C) objc.BOOL) objc.NSUInteger {
        return objc.msgSend(_self, "indexInRange:options:passingTest:", objc.NSUInteger, .{ _range, _opts, _predicate });
    }

    pub fn indexesPassingTest(_self: *@This(), _predicate: *const fn (objc.NSUInteger, ?*objc.BOOL) callconv(.C) objc.BOOL) ?*IndexSet {
        return objc.msgSend(_self, "indexesPassingTest:", ?*IndexSet, .{_predicate});
    }

    pub fn indexesWithOptionsPassingTest(_self: *@This(), _opts: EnumerationOptions, _predicate: *const fn (objc.NSUInteger, ?*objc.BOOL) callconv(.C) objc.BOOL) ?*IndexSet {
        return objc.msgSend(_self, "indexesWithOptions:passingTest:", ?*IndexSet, .{ _opts, _predicate });
    }

    pub fn indexesInRangeOptionsPassingTest(_self: *@This(), _range: Range, _opts: EnumerationOptions, _predicate: *const fn (objc.NSUInteger, ?*objc.BOOL) callconv(.C) objc.BOOL) ?*IndexSet {
        return objc.msgSend(_self, "indexesInRange:options:passingTest:", ?*IndexSet, .{ _range, _opts, _predicate });
    }

    pub fn enumerateRangesUsingBlock(_self: *@This(), _block: *const fn (Range, ?*objc.BOOL) callconv(.C) void) void {
        return objc.msgSend(_self, "enumerateRangesUsingBlock:", void, .{_block});
    }

    pub fn enumerateRangesWithOptionsUsingBlock(_self: *@This(), _opts: EnumerationOptions, _block: *const fn (Range, ?*objc.BOOL) callconv(.C) void) void {
        return objc.msgSend(_self, "enumerateRangesWithOptions:usingBlock:", void, .{ _opts, _block });
    }

    pub fn enumerateRangesInRangeOptionsUsingBlock(_self: *@This(), _range: Range, _opts: EnumerationOptions, _block: *const fn (Range, ?*objc.BOOL) callconv(.C) void) void {
        return objc.msgSend(_self, "enumerateRangesInRange:options:usingBlock:", void, .{ _range, _opts, _block });
    }

    pub fn count(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "count", objc.NSUInteger, .{});
    }

    pub fn firstIndex(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "firstIndex", objc.NSUInteger, .{});
    }

    pub fn lastIndex(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "lastIndex", objc.NSUInteger, .{});
    }
};

/// https://developer.apple.com/documentation/Foundation/NSMutableIndexSet?language=objc
pub const MutableIndexSet = opaque {
    pub const Internal = objc.ExternClass("NSMutableIndexSet", @This(), IndexSet, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn supportsSecureCoding() objc.BOOL {
        return objc.msgSend(Internal.class(), "supportsSecureCoding", objc.BOOL, .{});
    }

    pub fn indexSet() *@This() {
        return objc.msgSend(Internal.class(), "indexSet", *@This(), .{});
    }

    pub fn indexSetWithIndex(_value: objc.NSUInteger) *@This() {
        return objc.msgSend(Internal.class(), "indexSetWithIndex:", *@This(), .{_value});
    }

    pub fn indexSetWithIndexesInRange(_range: Range) *@This() {
        return objc.msgSend(Internal.class(), "indexSetWithIndexesInRange:", *@This(), .{_range});
    }

    pub fn initWithIndexesInRange(_self: *@This(), _range: Range) *@This() {
        return objc.msgSend(_self, "initWithIndexesInRange:", *@This(), .{_range});
    }

    pub fn initWithIndexSet(_self: *@This(), _indexSet: ?*IndexSet) *@This() {
        return objc.msgSend(_self, "initWithIndexSet:", *@This(), .{_indexSet});
    }

    pub fn initWithIndex(_self: *@This(), _value: objc.NSUInteger) *@This() {
        return objc.msgSend(_self, "initWithIndex:", *@This(), .{_value});
    }

    pub fn isEqualToIndexSet(_self: *@This(), _indexSet: ?*IndexSet) objc.BOOL {
        return objc.msgSend(_self, "isEqualToIndexSet:", objc.BOOL, .{_indexSet});
    }

    pub fn indexGreaterThanIndex(_self: *@This(), _value: objc.NSUInteger) objc.NSUInteger {
        return objc.msgSend(_self, "indexGreaterThanIndex:", objc.NSUInteger, .{_value});
    }

    pub fn indexLessThanIndex(_self: *@This(), _value: objc.NSUInteger) objc.NSUInteger {
        return objc.msgSend(_self, "indexLessThanIndex:", objc.NSUInteger, .{_value});
    }

    pub fn indexGreaterThanOrEqualToIndex(_self: *@This(), _value: objc.NSUInteger) objc.NSUInteger {
        return objc.msgSend(_self, "indexGreaterThanOrEqualToIndex:", objc.NSUInteger, .{_value});
    }

    pub fn indexLessThanOrEqualToIndex(_self: *@This(), _value: objc.NSUInteger) objc.NSUInteger {
        return objc.msgSend(_self, "indexLessThanOrEqualToIndex:", objc.NSUInteger, .{_value});
    }

    pub fn getIndexesMaxCountInIndexRange(_self: *@This(), _indexBuffer: ?*objc.NSUInteger, _bufferSize: objc.NSUInteger, _range: RangePointer) objc.NSUInteger {
        return objc.msgSend(_self, "getIndexes:maxCount:inIndexRange:", objc.NSUInteger, .{ _indexBuffer, _bufferSize, _range });
    }

    pub fn countOfIndexesInRange(_self: *@This(), _range: Range) objc.NSUInteger {
        return objc.msgSend(_self, "countOfIndexesInRange:", objc.NSUInteger, .{_range});
    }

    pub fn containsIndex(_self: *@This(), _value: objc.NSUInteger) objc.BOOL {
        return objc.msgSend(_self, "containsIndex:", objc.BOOL, .{_value});
    }

    pub fn containsIndexesInRange(_self: *@This(), _range: Range) objc.BOOL {
        return objc.msgSend(_self, "containsIndexesInRange:", objc.BOOL, .{_range});
    }

    pub fn containsIndexes(_self: *@This(), _indexSet: ?*IndexSet) objc.BOOL {
        return objc.msgSend(_self, "containsIndexes:", objc.BOOL, .{_indexSet});
    }

    pub fn intersectsIndexesInRange(_self: *@This(), _range: Range) objc.BOOL {
        return objc.msgSend(_self, "intersectsIndexesInRange:", objc.BOOL, .{_range});
    }

    pub fn enumerateIndexesUsingBlock(_self: *@This(), _block: *const fn (objc.NSUInteger, ?*objc.BOOL) callconv(.C) void) void {
        return objc.msgSend(_self, "enumerateIndexesUsingBlock:", void, .{_block});
    }

    pub fn enumerateIndexesWithOptionsUsingBlock(_self: *@This(), _opts: EnumerationOptions, _block: *const fn (objc.NSUInteger, ?*objc.BOOL) callconv(.C) void) void {
        return objc.msgSend(_self, "enumerateIndexesWithOptions:usingBlock:", void, .{ _opts, _block });
    }

    pub fn enumerateIndexesInRangeOptionsUsingBlock(_self: *@This(), _range: Range, _opts: EnumerationOptions, _block: *const fn (objc.NSUInteger, ?*objc.BOOL) callconv(.C) void) void {
        return objc.msgSend(_self, "enumerateIndexesInRange:options:usingBlock:", void, .{ _range, _opts, _block });
    }

    pub fn indexPassingTest(_self: *@This(), _predicate: *const fn (objc.NSUInteger, ?*objc.BOOL) callconv(.C) objc.BOOL) objc.NSUInteger {
        return objc.msgSend(_self, "indexPassingTest:", objc.NSUInteger, .{_predicate});
    }

    pub fn indexWithOptionsPassingTest(_self: *@This(), _opts: EnumerationOptions, _predicate: *const fn (objc.NSUInteger, ?*objc.BOOL) callconv(.C) objc.BOOL) objc.NSUInteger {
        return objc.msgSend(_self, "indexWithOptions:passingTest:", objc.NSUInteger, .{ _opts, _predicate });
    }

    pub fn indexInRangeOptionsPassingTest(_self: *@This(), _range: Range, _opts: EnumerationOptions, _predicate: *const fn (objc.NSUInteger, ?*objc.BOOL) callconv(.C) objc.BOOL) objc.NSUInteger {
        return objc.msgSend(_self, "indexInRange:options:passingTest:", objc.NSUInteger, .{ _range, _opts, _predicate });
    }

    pub fn indexesPassingTest(_self: *@This(), _predicate: *const fn (objc.NSUInteger, ?*objc.BOOL) callconv(.C) objc.BOOL) ?*IndexSet {
        return objc.msgSend(_self, "indexesPassingTest:", ?*IndexSet, .{_predicate});
    }

    pub fn indexesWithOptionsPassingTest(_self: *@This(), _opts: EnumerationOptions, _predicate: *const fn (objc.NSUInteger, ?*objc.BOOL) callconv(.C) objc.BOOL) ?*IndexSet {
        return objc.msgSend(_self, "indexesWithOptions:passingTest:", ?*IndexSet, .{ _opts, _predicate });
    }

    pub fn indexesInRangeOptionsPassingTest(_self: *@This(), _range: Range, _opts: EnumerationOptions, _predicate: *const fn (objc.NSUInteger, ?*objc.BOOL) callconv(.C) objc.BOOL) ?*IndexSet {
        return objc.msgSend(_self, "indexesInRange:options:passingTest:", ?*IndexSet, .{ _range, _opts, _predicate });
    }

    pub fn enumerateRangesUsingBlock(_self: *@This(), _block: *const fn (Range, ?*objc.BOOL) callconv(.C) void) void {
        return objc.msgSend(_self, "enumerateRangesUsingBlock:", void, .{_block});
    }

    pub fn enumerateRangesWithOptionsUsingBlock(_self: *@This(), _opts: EnumerationOptions, _block: *const fn (Range, ?*objc.BOOL) callconv(.C) void) void {
        return objc.msgSend(_self, "enumerateRangesWithOptions:usingBlock:", void, .{ _opts, _block });
    }

    pub fn enumerateRangesInRangeOptionsUsingBlock(_self: *@This(), _range: Range, _opts: EnumerationOptions, _block: *const fn (Range, ?*objc.BOOL) callconv(.C) void) void {
        return objc.msgSend(_self, "enumerateRangesInRange:options:usingBlock:", void, .{ _range, _opts, _block });
    }

    pub fn count(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "count", objc.NSUInteger, .{});
    }

    pub fn firstIndex(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "firstIndex", objc.NSUInteger, .{});
    }

    pub fn lastIndex(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "lastIndex", objc.NSUInteger, .{});
    }

    pub fn addIndexes(_self: *@This(), _indexSet: ?*IndexSet) void {
        return objc.msgSend(_self, "addIndexes:", void, .{_indexSet});
    }

    pub fn removeIndexes(_self: *@This(), _indexSet: ?*IndexSet) void {
        return objc.msgSend(_self, "removeIndexes:", void, .{_indexSet});
    }

    pub fn removeAllIndexes(_self: *@This()) void {
        return objc.msgSend(_self, "removeAllIndexes", void, .{});
    }

    pub fn addIndex(_self: *@This(), _value: objc.NSUInteger) void {
        return objc.msgSend(_self, "addIndex:", void, .{_value});
    }

    pub fn removeIndex(_self: *@This(), _value: objc.NSUInteger) void {
        return objc.msgSend(_self, "removeIndex:", void, .{_value});
    }

    pub fn addIndexesInRange(_self: *@This(), _range: Range) void {
        return objc.msgSend(_self, "addIndexesInRange:", void, .{_range});
    }

    pub fn removeIndexesInRange(_self: *@This(), _range: Range) void {
        return objc.msgSend(_self, "removeIndexesInRange:", void, .{_range});
    }

    pub fn shiftIndexesStartingAtIndexBy(_self: *@This(), _index: objc.NSUInteger, _delta: objc.NSInteger) void {
        return objc.msgSend(_self, "shiftIndexesStartingAtIndex:by:", void, .{ _index, _delta });
    }
};

pub const OrderedCollectionDifferenceCalculationOptions = objc.NSUInteger;
pub const OrderedCollectionDifferenceCalculationOptions_OmitInsertedObjects: objc.NSUInteger = 1;
pub const OrderedCollectionDifferenceCalculationOptions_OmitRemovedObjects: objc.NSUInteger = 2;
pub const OrderedCollectionDifferenceCalculationOptions_InferMoves: objc.NSUInteger = 4;

/// https://developer.apple.com/documentation/Foundation/NSOrderedCollectionDifference?language=objc
pub fn OrderedCollectionDifference(comptime ObjectType: type) type {
    const unused0 = ObjectType;
    _ = unused0; // Prevent unused parameter warning!!!
    return struct {
        pub const Internal = objc.ExternClass("NSOrderedCollectionDifference", @This(), objc.NSObject, &.{FastEnumeration});
        pub const as = Internal.as;
        pub const retain = Internal.retain;
        pub const release = Internal.release;
        pub const autorelease = Internal.autorelease;
        pub const new = Internal.new;
        pub const alloc = Internal.alloc;

        pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
            return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
        }

        pub fn hash(_self: *@This()) objc.NSUInteger {
            return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
        }

        pub fn superclass(_self: *@This()) objc.Class {
            return objc.msgSend(_self, "superclass", objc.Class, .{});
        }

        pub fn class(_self: *@This()) objc.Class {
            return objc.msgSend(_self, "class", objc.Class, .{});
        }

        pub fn self(_self: *@This()) *@This() {
            return objc.msgSend(_self, "self", *@This(), .{});
        }

        pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
            return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
        }

        pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
            return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
        }

        pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
            return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
        }

        pub fn isProxy(_self: *@This()) objc.BOOL {
            return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
        }

        pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
            return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
        }

        pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
            return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
        }

        pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
            return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
        }

        pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
            return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
        }

        pub fn retainCount(_self: *@This()) objc.NSUInteger {
            return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
        }

        pub fn zone(_self: *@This()) ?*objc._NSZone {
            return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
        }

        pub fn description(_self: *@This()) ?*String {
            return objc.msgSend(_self, "description", ?*String, .{});
        }

        pub fn debugDescription(_self: *@This()) ?*String {
            return objc.msgSend(_self, "debugDescription", ?*String, .{});
        }

        pub fn load() void {
            return objc.msgSend(Internal.class(), "load", void, .{});
        }

        pub fn initialize() void {
            return objc.msgSend(Internal.class(), "initialize", void, .{});
        }

        pub fn init(_self: *@This()) *@This() {
            return objc.msgSend(_self, "init", *@This(), .{});
        }

        pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
            return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
        }

        pub fn dealloc(_self: *@This()) void {
            return objc.msgSend(_self, "dealloc", void, .{});
        }

        pub fn finalize(_self: *@This()) void {
            return objc.msgSend(_self, "finalize", void, .{});
        }

        pub fn copy(_self: *@This()) ?objc.Id {
            return objc.msgSend(_self, "copy", ?objc.Id, .{});
        }

        pub fn mutableCopy(_self: *@This()) ?objc.Id {
            return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
        }

        pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
            return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
        }

        pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
            return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
        }

        pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
            return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
        }

        pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
            return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
        }

        pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
            return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
        }

        pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
            return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
        }

        pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
            return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
        }

        pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
            return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
        }

        pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
            return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
        }

        pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
            return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
        }

        pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
            return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
        }

        pub fn retainWeakReference(_self: *@This()) objc.BOOL {
            return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
        }

        pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
            return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
        }

        pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
            return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
        }

        pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
            return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
        }

        pub fn countByEnumeratingWithStateObjectsCount(_self: *@This(), _state: ?*FastEnumerationState, _buffer: ?*?objc.Id, _len: objc.NSUInteger) objc.NSUInteger {
            return objc.msgSend(_self, "countByEnumeratingWithState:objects:count:", objc.NSUInteger, .{ _state, _buffer, _len });
        }

        pub fn initWithChanges(_self: *@This(), _changes: ?*anyopaque) *@This() {
            return objc.msgSend(_self, "initWithChanges:", *@This(), .{_changes});
        }

        pub fn initWithInsertIndexesInsertedObjectsRemoveIndexesRemovedObjectsAdditionalChanges(
            _self: *@This(),
            _inserts: ?*IndexSet,
            _insertedObjects: ?*anyopaque,
            _removes: ?*IndexSet,
            _removedObjects: ?*anyopaque,
            _changes: ?*anyopaque,
        ) *@This() {
            return objc.msgSend(_self, "initWithInsertIndexes:insertedObjects:removeIndexes:removedObjects:additionalChanges:", *@This(), .{
                _inserts,
                _insertedObjects,
                _removes,
                _removedObjects,
                _changes,
            });
        }

        pub fn initWithInsertIndexesInsertedObjectsRemoveIndexesRemovedObjects(
            _self: *@This(),
            _inserts: ?*IndexSet,
            _insertedObjects: ?*anyopaque,
            _removes: ?*IndexSet,
            _removedObjects: ?*anyopaque,
        ) *@This() {
            return objc.msgSend(_self, "initWithInsertIndexes:insertedObjects:removeIndexes:removedObjects:", *@This(), .{
                _inserts,
                _insertedObjects,
                _removes,
                _removedObjects,
            });
        }

        pub fn differenceByTransformingChangesWithBlock(_self: *@This(), _block: *const fn (?*anyopaque) callconv(.C) ?*anyopaque) ?*anyopaque {
            return objc.msgSend(_self, "differenceByTransformingChangesWithBlock:", ?*anyopaque, .{_block});
        }

        pub fn inverseDifference(_self: *@This()) *@This() {
            return objc.msgSend(_self, "inverseDifference", *@This(), .{});
        }

        pub fn insertions(_self: *@This()) ?*anyopaque {
            return objc.msgSend(_self, "insertions", ?*anyopaque, .{});
        }

        pub fn removals(_self: *@This()) ?*anyopaque {
            return objc.msgSend(_self, "removals", ?*anyopaque, .{});
        }

        pub fn hasChanges(_self: *@This()) objc.BOOL {
            return objc.msgSend(_self, "hasChanges", objc.BOOL, .{});
        }
    };
}

/// https://developer.apple.com/documentation/Foundation/NSArray?language=objc
pub fn Array(comptime ObjectType: type) type {
    const unused0 = ObjectType;
    _ = unused0; // Prevent unused parameter warning!!!
    return struct {
        pub const Internal = objc.ExternClass("NSArray", @This(), objc.NSObject, &.{ Copying, MutableCopying, SecureCoding, FastEnumeration });
        pub const as = Internal.as;
        pub const retain = Internal.retain;
        pub const release = Internal.release;
        pub const autorelease = Internal.autorelease;
        pub const new = Internal.new;
        pub const alloc = Internal.alloc;

        pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
            return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
        }

        pub fn hash(_self: *@This()) objc.NSUInteger {
            return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
        }

        pub fn superclass(_self: *@This()) objc.Class {
            return objc.msgSend(_self, "superclass", objc.Class, .{});
        }

        pub fn class(_self: *@This()) objc.Class {
            return objc.msgSend(_self, "class", objc.Class, .{});
        }

        pub fn self(_self: *@This()) *@This() {
            return objc.msgSend(_self, "self", *@This(), .{});
        }

        pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
            return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
        }

        pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
            return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
        }

        pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
            return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
        }

        pub fn isProxy(_self: *@This()) objc.BOOL {
            return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
        }

        pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
            return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
        }

        pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
            return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
        }

        pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
            return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
        }

        pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
            return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
        }

        pub fn retainCount(_self: *@This()) objc.NSUInteger {
            return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
        }

        pub fn zone(_self: *@This()) ?*objc._NSZone {
            return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
        }

        pub fn description(_self: *@This()) ?*String {
            return objc.msgSend(_self, "description", ?*String, .{});
        }

        pub fn debugDescription(_self: *@This()) ?*String {
            return objc.msgSend(_self, "debugDescription", ?*String, .{});
        }

        pub fn load() void {
            return objc.msgSend(Internal.class(), "load", void, .{});
        }

        pub fn initialize() void {
            return objc.msgSend(Internal.class(), "initialize", void, .{});
        }

        pub fn init(_self: *@This()) *@This() {
            return objc.msgSend(_self, "init", *@This(), .{});
        }

        pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
            return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
        }

        pub fn dealloc(_self: *@This()) void {
            return objc.msgSend(_self, "dealloc", void, .{});
        }

        pub fn finalize(_self: *@This()) void {
            return objc.msgSend(_self, "finalize", void, .{});
        }

        pub fn copy(_self: *@This()) ?objc.Id {
            return objc.msgSend(_self, "copy", ?objc.Id, .{});
        }

        pub fn mutableCopy(_self: *@This()) ?objc.Id {
            return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
        }

        pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
            return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
        }

        pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
            return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
        }

        pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
            return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
        }

        pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
            return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
        }

        pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
            return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
        }

        pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
            return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
        }

        pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
            return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
        }

        pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
            return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
        }

        pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
            return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
        }

        pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
            return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
        }

        pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
            return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
        }

        pub fn retainWeakReference(_self: *@This()) objc.BOOL {
            return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
        }

        pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
            return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
        }

        pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
            return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
        }

        pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
            return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
        }

        pub fn encodeWithCoder(_self: *@This(), _coder: ?*Coder) void {
            return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
        }

        pub fn initWithCoder(_self: *@This(), _coder: ?*Coder) *@This() {
            return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
        }

        pub fn supportsSecureCoding() objc.BOOL {
            return objc.msgSend(Internal.class(), "supportsSecureCoding", objc.BOOL, .{});
        }

        pub fn countByEnumeratingWithStateObjectsCount(_self: *@This(), _state: ?*FastEnumerationState, _buffer: ?*?objc.Id, _len: objc.NSUInteger) objc.NSUInteger {
            return objc.msgSend(_self, "countByEnumeratingWithState:objects:count:", objc.NSUInteger, .{ _state, _buffer, _len });
        }

        pub fn objectAtIndex(_self: *@This(), _index: objc.NSUInteger) ObjectType {
            return objc.msgSend(_self, "objectAtIndex:", ObjectType, .{_index});
        }

        pub fn initWithObjectsCount(_self: *@This(), _objects: ?*ObjectType, _cnt: objc.NSUInteger) *@This() {
            return objc.msgSend(_self, "initWithObjects:count:", *@This(), .{ _objects, _cnt });
        }

        pub fn count(_self: *@This()) objc.NSUInteger {
            return objc.msgSend(_self, "count", objc.NSUInteger, .{});
        }
    };
}

pub const BinarySearchingOptions = objc.NSUInteger;
pub const BinarySearchingOptions_FirstEqual: objc.NSUInteger = 256;
pub const BinarySearchingOptions_LastEqual: objc.NSUInteger = 512;
pub const BinarySearchingOptions_InsertionIndex: objc.NSUInteger = 1024;

/// https://developer.apple.com/documentation/Foundation/NSMutableArray?language=objc
pub fn MutableArray(comptime ObjectType: type) type {
    const unused0 = ObjectType;
    _ = unused0; // Prevent unused parameter warning!!!
    return struct {
        pub const Internal = objc.ExternClass("NSMutableArray", @This(), Array, &.{});
        pub const as = Internal.as;
        pub const retain = Internal.retain;
        pub const release = Internal.release;
        pub const autorelease = Internal.autorelease;
        pub const new = Internal.new;
        pub const alloc = Internal.alloc;

        pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
            return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
        }

        pub fn hash(_self: *@This()) objc.NSUInteger {
            return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
        }

        pub fn superclass(_self: *@This()) objc.Class {
            return objc.msgSend(_self, "superclass", objc.Class, .{});
        }

        pub fn class(_self: *@This()) objc.Class {
            return objc.msgSend(_self, "class", objc.Class, .{});
        }

        pub fn self(_self: *@This()) *@This() {
            return objc.msgSend(_self, "self", *@This(), .{});
        }

        pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
            return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
        }

        pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
            return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
        }

        pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
            return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
        }

        pub fn isProxy(_self: *@This()) objc.BOOL {
            return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
        }

        pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
            return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
        }

        pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
            return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
        }

        pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
            return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
        }

        pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
            return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
        }

        pub fn retainCount(_self: *@This()) objc.NSUInteger {
            return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
        }

        pub fn zone(_self: *@This()) ?*objc._NSZone {
            return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
        }

        pub fn description(_self: *@This()) ?*String {
            return objc.msgSend(_self, "description", ?*String, .{});
        }

        pub fn debugDescription(_self: *@This()) ?*String {
            return objc.msgSend(_self, "debugDescription", ?*String, .{});
        }

        pub fn load() void {
            return objc.msgSend(Internal.class(), "load", void, .{});
        }

        pub fn initialize() void {
            return objc.msgSend(Internal.class(), "initialize", void, .{});
        }

        pub fn init(_self: *@This()) *@This() {
            return objc.msgSend(_self, "init", *@This(), .{});
        }

        pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
            return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
        }

        pub fn dealloc(_self: *@This()) void {
            return objc.msgSend(_self, "dealloc", void, .{});
        }

        pub fn finalize(_self: *@This()) void {
            return objc.msgSend(_self, "finalize", void, .{});
        }

        pub fn copy(_self: *@This()) ?objc.Id {
            return objc.msgSend(_self, "copy", ?objc.Id, .{});
        }

        pub fn mutableCopy(_self: *@This()) ?objc.Id {
            return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
        }

        pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
            return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
        }

        pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
            return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
        }

        pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
            return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
        }

        pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
            return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
        }

        pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
            return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
        }

        pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
            return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
        }

        pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
            return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
        }

        pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
            return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
        }

        pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
            return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
        }

        pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
            return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
        }

        pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
            return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
        }

        pub fn retainWeakReference(_self: *@This()) objc.BOOL {
            return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
        }

        pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
            return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
        }

        pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
            return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
        }

        pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
            return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
        }

        pub fn encodeWithCoder(_self: *@This(), _coder: ?*Coder) void {
            return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
        }

        pub fn initWithCoder(_self: *@This(), _coder: ?*Coder) *@This() {
            return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
        }

        pub fn supportsSecureCoding() objc.BOOL {
            return objc.msgSend(Internal.class(), "supportsSecureCoding", objc.BOOL, .{});
        }

        pub fn countByEnumeratingWithStateObjectsCount(_self: *@This(), _state: ?*FastEnumerationState, _buffer: ?*?objc.Id, _len: objc.NSUInteger) objc.NSUInteger {
            return objc.msgSend(_self, "countByEnumeratingWithState:objects:count:", objc.NSUInteger, .{ _state, _buffer, _len });
        }

        pub fn objectAtIndex(_self: *@This(), _index: objc.NSUInteger) ObjectType {
            return objc.msgSend(_self, "objectAtIndex:", ObjectType, .{_index});
        }

        pub fn initWithObjectsCount(_self: *@This(), _objects: ?*ObjectType, _cnt: objc.NSUInteger) *@This() {
            return objc.msgSend(_self, "initWithObjects:count:", *@This(), .{ _objects, _cnt });
        }

        pub fn count(_self: *@This()) objc.NSUInteger {
            return objc.msgSend(_self, "count", objc.NSUInteger, .{});
        }

        pub fn addObject(_self: *@This(), _anObject: ObjectType) void {
            return objc.msgSend(_self, "addObject:", void, .{_anObject});
        }

        pub fn insertObjectAtIndex(_self: *@This(), _anObject: ObjectType, _index: objc.NSUInteger) void {
            return objc.msgSend(_self, "insertObject:atIndex:", void, .{ _anObject, _index });
        }

        pub fn removeLastObject(_self: *@This()) void {
            return objc.msgSend(_self, "removeLastObject", void, .{});
        }

        pub fn removeObjectAtIndex(_self: *@This(), _index: objc.NSUInteger) void {
            return objc.msgSend(_self, "removeObjectAtIndex:", void, .{_index});
        }

        pub fn replaceObjectAtIndexWithObject(_self: *@This(), _index: objc.NSUInteger, _anObject: ObjectType) void {
            return objc.msgSend(_self, "replaceObjectAtIndex:withObject:", void, .{ _index, _anObject });
        }

        pub fn initWithCapacity(_self: *@This(), _numItems: objc.NSUInteger) *@This() {
            return objc.msgSend(_self, "initWithCapacity:", *@This(), .{_numItems});
        }
    };
}

/// https://developer.apple.com/documentation/Foundation/NSAutoreleasePool?language=objc
pub const AutoreleasePool = opaque {
    pub const Internal = objc.ExternClass("NSAutoreleasePool", @This(), objc.NSObject, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn addObject(_anObject: ?objc.Id) void {
        return objc.msgSend(Internal.class(), "addObject:", void, .{_anObject});
    }

    pub fn drain(_self: *@This()) void {
        return objc.msgSend(_self, "drain", void, .{});
    }
};

pub const unichar = u16;

pub const ItemProviderRepresentationVisibility = objc.NSInteger;
pub const ItemProviderRepresentationVisibility_All: objc.NSInteger = 0;
pub const ItemProviderRepresentationVisibility_Team: objc.NSInteger = 1;
pub const ItemProviderRepresentationVisibility_Group: objc.NSInteger = 2;
pub const ItemProviderRepresentationVisibility_OwnProcess: objc.NSInteger = 3;

pub const ItemProviderFileOptions = objc.NSInteger;
pub const ItemProviderFileOptions_OpenInPlace: objc.NSInteger = 1;

/// https://developer.apple.com/documentation/Foundation/NSItemProviderWriting?language=objc
pub const ItemProviderWriting = opaque {
    pub const Internal = objc.ExternProtocol(@This(), &.{objc.NSObject});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn itemProviderVisibilityForRepresentationWithTypeIdentifier(_typeIdentifier: ?*String) ItemProviderRepresentationVisibility {
        return objc.msgSend(Internal.class(), "itemProviderVisibilityForRepresentationWithTypeIdentifier:", ItemProviderRepresentationVisibility, .{_typeIdentifier});
    }

    pub fn loadDataWithTypeIdentifierForItemProviderCompletionHandler(_self: *@This(), _typeIdentifier: ?*String, _completionHandler: *const fn (?*Data, ?*Error) callconv(.C) void) ?*Progress {
        return objc.msgSend(_self, "loadDataWithTypeIdentifier:forItemProviderCompletionHandler:", ?*Progress, .{ _typeIdentifier, _completionHandler });
    }

    pub fn writableTypeIdentifiersForItemProvider() ?*anyopaque {
        return objc.msgSend(Internal.class(), "writableTypeIdentifiersForItemProvider", ?*anyopaque, .{});
    }
};

/// https://developer.apple.com/documentation/Foundation/NSItemProviderReading?language=objc
pub const ItemProviderReading = opaque {
    pub const Internal = objc.ExternProtocol(@This(), &.{objc.NSObject});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn objectWithItemProviderDataTypeIdentifierError(_data: ?*Data, _typeIdentifier: ?*String, _outError: ?*?*Error) *@This() {
        return objc.msgSend(Internal.class(), "objectWithItemProviderData:typeIdentifier:error:", *@This(), .{ _data, _typeIdentifier, _outError });
    }

    pub fn readableTypeIdentifiersForItemProvider() ?*anyopaque {
        return objc.msgSend(Internal.class(), "readableTypeIdentifiersForItemProvider", ?*anyopaque, .{});
    }
};

pub const ItemProviderCompletionHandler = *const fn (?*anyopaque, ?*Error) callconv(.C) void;

pub const ItemProviderLoadHandler = *const fn (ItemProviderCompletionHandler, objc.Class, ?*Dictionary) callconv(.C) void;

/// https://developer.apple.com/documentation/Foundation/NSItemProvider?language=objc
pub const ItemProvider = opaque {
    pub const Internal = objc.ExternClass("NSItemProvider", @This(), objc.NSObject, &.{Copying});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn registerDataRepresentationForTypeIdentifierVisibilityLoadHandler(_self: *@This(), _typeIdentifier: ?*String, _visibility: ItemProviderRepresentationVisibility, _loadHandler: *const fn (*const fn (?*Data, ?*Error) callconv(.C) void) callconv(.C) ?*Progress) void {
        return objc.msgSend(_self, "registerDataRepresentationForTypeIdentifier:visibility:loadHandler:", void, .{ _typeIdentifier, _visibility, _loadHandler });
    }

    pub fn registerFileRepresentationForTypeIdentifierFileOptionsVisibilityLoadHandler(
        _self: *@This(),
        _typeIdentifier: ?*String,
        _fileOptions: ItemProviderFileOptions,
        _visibility: ItemProviderRepresentationVisibility,
        _loadHandler: *const fn (*const fn (?*URL, objc.BOOL, ?*Error) callconv(.C) void) callconv(.C) ?*Progress,
    ) void {
        return objc.msgSend(_self, "registerFileRepresentationForTypeIdentifier:fileOptions:visibility:loadHandler:", void, .{
            _typeIdentifier,
            _fileOptions,
            _visibility,
            _loadHandler,
        });
    }

    pub fn registeredTypeIdentifiersWithFileOptions(_self: *@This(), _fileOptions: ItemProviderFileOptions) ?*anyopaque {
        return objc.msgSend(_self, "registeredTypeIdentifiersWithFileOptions:", ?*anyopaque, .{_fileOptions});
    }

    pub fn hasItemConformingToTypeIdentifier(_self: *@This(), _typeIdentifier: ?*String) objc.BOOL {
        return objc.msgSend(_self, "hasItemConformingToTypeIdentifier:", objc.BOOL, .{_typeIdentifier});
    }

    pub fn hasRepresentationConformingToTypeIdentifierFileOptions(_self: *@This(), _typeIdentifier: ?*String, _fileOptions: ItemProviderFileOptions) objc.BOOL {
        return objc.msgSend(_self, "hasRepresentationConformingToTypeIdentifier:fileOptions:", objc.BOOL, .{ _typeIdentifier, _fileOptions });
    }

    pub fn loadDataRepresentationForTypeIdentifierCompletionHandler(_self: *@This(), _typeIdentifier: ?*String, _completionHandler: *const fn (?*Data, ?*Error) callconv(.C) void) ?*Progress {
        return objc.msgSend(_self, "loadDataRepresentationForTypeIdentifier:completionHandler:", ?*Progress, .{ _typeIdentifier, _completionHandler });
    }

    pub fn loadFileRepresentationForTypeIdentifierCompletionHandler(_self: *@This(), _typeIdentifier: ?*String, _completionHandler: *const fn (?*URL, ?*Error) callconv(.C) void) ?*Progress {
        return objc.msgSend(_self, "loadFileRepresentationForTypeIdentifier:completionHandler:", ?*Progress, .{ _typeIdentifier, _completionHandler });
    }

    pub fn loadInPlaceFileRepresentationForTypeIdentifierCompletionHandler(_self: *@This(), _typeIdentifier: ?*String, _completionHandler: *const fn (?*URL, objc.BOOL, ?*Error) callconv(.C) void) ?*Progress {
        return objc.msgSend(_self, "loadInPlaceFileRepresentationForTypeIdentifier:completionHandler:", ?*Progress, .{ _typeIdentifier, _completionHandler });
    }

    pub fn initWithObject(_self: *@This(), _object: ?*anyopaque) *@This() {
        return objc.msgSend(_self, "initWithObject:", *@This(), .{_object});
    }

    pub fn registerObjectVisibility(_self: *@This(), _object: ?*anyopaque, _visibility: ItemProviderRepresentationVisibility) void {
        return objc.msgSend(_self, "registerObject:visibility:", void, .{ _object, _visibility });
    }

    pub fn registerObjectOfClassVisibilityLoadHandler(_self: *@This(), _aClass: ?*anyopaque, _visibility: ItemProviderRepresentationVisibility, _loadHandler: *const fn (*const fn (?*anyopaque, ?*Error) callconv(.C) void) callconv(.C) ?*Progress) void {
        return objc.msgSend(_self, "registerObjectOfClass:visibility:loadHandler:", void, .{ _aClass, _visibility, _loadHandler });
    }

    pub fn canLoadObjectOfClass(_self: *@This(), _aClass: ?*anyopaque) objc.BOOL {
        return objc.msgSend(_self, "canLoadObjectOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn loadObjectOfClassCompletionHandler(_self: *@This(), _aClass: ?*anyopaque, _completionHandler: *const fn (?*anyopaque, ?*Error) callconv(.C) void) ?*Progress {
        return objc.msgSend(_self, "loadObjectOfClass:completionHandler:", ?*Progress, .{ _aClass, _completionHandler });
    }

    pub fn initWithItemTypeIdentifier(_self: *@This(), _item: ?*anyopaque, _typeIdentifier: ?*String) *@This() {
        return objc.msgSend(_self, "initWithItem:typeIdentifier:", *@This(), .{ _item, _typeIdentifier });
    }

    pub fn initWithContentsOfURL(_self: *@This(), _fileURL: ?*URL) *@This() {
        return objc.msgSend(_self, "initWithContentsOfURL:", *@This(), .{_fileURL});
    }

    pub fn registerItemForTypeIdentifierLoadHandler(_self: *@This(), _typeIdentifier: ?*String, _loadHandler: ItemProviderLoadHandler) void {
        return objc.msgSend(_self, "registerItemForTypeIdentifier:loadHandler:", void, .{ _typeIdentifier, _loadHandler });
    }

    pub fn loadItemForTypeIdentifierOptionsCompletionHandler(_self: *@This(), _typeIdentifier: ?*String, _options: ?*Dictionary, _completionHandler: ItemProviderCompletionHandler) void {
        return objc.msgSend(_self, "loadItemForTypeIdentifier:options:completionHandler:", void, .{ _typeIdentifier, _options, _completionHandler });
    }

    pub fn registeredTypeIdentifiers(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "registeredTypeIdentifiers", ?*anyopaque, .{});
    }

    pub fn suggestedName(_self: *@This()) ?*String {
        return objc.msgSend(_self, "suggestedName", ?*String, .{});
    }

    pub fn setSuggestedName(_self: *@This(), _suggestedName: ?*String) void {
        return objc.msgSend(_self, "setSuggestedName:", void, .{_suggestedName});
    }
};

pub const ItemProviderErrorCode = objc.NSInteger;
pub const ItemProviderErrorCode_UnknownError: objc.NSInteger = -1;
pub const ItemProviderErrorCode_ItemUnavailableError: objc.NSInteger = -1000;
pub const ItemProviderErrorCode_UnexpectedValueClassError: objc.NSInteger = -1100;
pub const ItemProviderErrorCode_UnavailableCoercionError: objc.NSInteger = -1200;

pub const StringCompareOptions = objc.NSUInteger;
pub const StringCompareOptions_CaseInsensitiveSearch: objc.NSUInteger = 1;
pub const StringCompareOptions_LiteralSearch: objc.NSUInteger = 2;
pub const StringCompareOptions_BackwardsSearch: objc.NSUInteger = 4;
pub const StringCompareOptions_AnchoredSearch: objc.NSUInteger = 8;
pub const StringCompareOptions_NumericSearch: objc.NSUInteger = 64;
pub const StringCompareOptions_DiacriticInsensitiveSearch: objc.NSUInteger = 128;
pub const StringCompareOptions_WidthInsensitiveSearch: objc.NSUInteger = 256;
pub const StringCompareOptions_ForcedOrderingSearch: objc.NSUInteger = 512;
pub const StringCompareOptions_RegularExpressionSearch: objc.NSUInteger = 1024;

pub const StringEncoding = objc.NSUInteger;

pub const anon681 = StringEncoding;
pub const anon681_NSASCIIStringEncoding: StringEncoding = 1;
pub const anon681_NSNEXTSTEPStringEncoding: StringEncoding = 2;
pub const anon681_NSJapaneseEUCStringEncoding: StringEncoding = 3;
pub const anon681_NSUTF8StringEncoding: StringEncoding = 4;
pub const anon681_NSISOLatin1StringEncoding: StringEncoding = 5;
pub const anon681_NSSymbolStringEncoding: StringEncoding = 6;
pub const anon681_NSNonLossyASCIIStringEncoding: StringEncoding = 7;
pub const anon681_NSShiftJISStringEncoding: StringEncoding = 8;
pub const anon681_NSISOLatin2StringEncoding: StringEncoding = 9;
pub const anon681_NSUnicodeStringEncoding: StringEncoding = 10;
pub const anon681_NSWindowsCP1251StringEncoding: StringEncoding = 11;
pub const anon681_NSWindowsCP1252StringEncoding: StringEncoding = 12;
pub const anon681_NSWindowsCP1253StringEncoding: StringEncoding = 13;
pub const anon681_NSWindowsCP1254StringEncoding: StringEncoding = 14;
pub const anon681_NSWindowsCP1250StringEncoding: StringEncoding = 15;
pub const anon681_NSISO2022JPStringEncoding: StringEncoding = 21;
pub const anon681_NSMacOSRomanStringEncoding: StringEncoding = 30;
pub const anon681_NSUTF16StringEncoding: StringEncoding = 10;
pub const anon681_NSUTF16BigEndianStringEncoding: StringEncoding = 2415919360;
pub const anon681_NSUTF16LittleEndianStringEncoding: StringEncoding = 2483028224;
pub const anon681_NSUTF32StringEncoding: StringEncoding = 2348810496;
pub const anon681_NSUTF32BigEndianStringEncoding: StringEncoding = 2550137088;
pub const anon681_NSUTF32LittleEndianStringEncoding: StringEncoding = 2617245952;
pub const anon681_eyAERangeStart: StringEncoding = 1937006962;
pub const anon681_eyAERangeStop: StringEncoding = 1937010544;
pub const anon681_eyDisposeTokenProc: StringEncoding = 2020896619;
pub const anon681_eyAECompareProc: StringEncoding = 1668116594;
pub const anon681_eyAECountProc: StringEncoding = 1668247156;
pub const anon681_eyAEMarkTokenProc: StringEncoding = 1835755876;
pub const anon681_eyAEMarkProc: StringEncoding = 1835102827;
pub const anon681_eyAEAdjustMarksProc: StringEncoding = 1633970797;
pub const anon681_eyAEGetErrDescProc: StringEncoding = 1768842339;

pub const StringEncodingConversionOptions = objc.NSUInteger;
pub const StringEncodingConversionOptions_AllowLossy: objc.NSUInteger = 1;
pub const StringEncodingConversionOptions_ExternalRepresentation: objc.NSUInteger = 2;

/// https://developer.apple.com/documentation/Foundation/NSString?language=objc
pub const String = opaque {
    pub const Internal = objc.ExternClass("NSString", @This(), objc.NSObject, &.{ Copying, MutableCopying, SecureCoding });
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn supportsSecureCoding() objc.BOOL {
        return objc.msgSend(Internal.class(), "supportsSecureCoding", objc.BOOL, .{});
    }

    pub fn characterAtIndex(_self: *@This(), _index: objc.NSUInteger) unichar {
        return objc.msgSend(_self, "characterAtIndex:", unichar, .{_index});
    }

    pub fn length(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "length", objc.NSUInteger, .{});
    }
};

pub const StringEnumerationOptions = objc.NSUInteger;
pub const StringEnumerationOptions_ByLines: objc.NSUInteger = 0;
pub const StringEnumerationOptions_ByParagraphs: objc.NSUInteger = 1;
pub const StringEnumerationOptions_ByComposedCharacterSequences: objc.NSUInteger = 2;
pub const StringEnumerationOptions_ByWords: objc.NSUInteger = 3;
pub const StringEnumerationOptions_BySentences: objc.NSUInteger = 4;
pub const StringEnumerationOptions_ByCaretPositions: objc.NSUInteger = 5;
pub const StringEnumerationOptions_ByDeletionClusters: objc.NSUInteger = 6;
pub const StringEnumerationOptions_Reverse: objc.NSUInteger = 256;
pub const StringEnumerationOptions_SubstringNotRequired: objc.NSUInteger = 512;
pub const StringEnumerationOptions_Localized: objc.NSUInteger = 1024;

pub const StringTransform = ?*String;

pub const StringEncodingDetectionOptionsKey = ?*String;

/// https://developer.apple.com/documentation/Foundation/NSMutableString?language=objc
pub const MutableString = opaque {
    pub const Internal = objc.ExternClass("NSMutableString", @This(), String, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn supportsSecureCoding() objc.BOOL {
        return objc.msgSend(Internal.class(), "supportsSecureCoding", objc.BOOL, .{});
    }

    pub fn characterAtIndex(_self: *@This(), _index: objc.NSUInteger) unichar {
        return objc.msgSend(_self, "characterAtIndex:", unichar, .{_index});
    }

    pub fn length(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "length", objc.NSUInteger, .{});
    }

    pub fn replaceCharactersInRangeWithString(_self: *@This(), _range: Range, _aString: ?*String) void {
        return objc.msgSend(_self, "replaceCharactersInRange:withString:", void, .{ _range, _aString });
    }
};

pub const anon5481 = StringEncoding;
pub const anon5481_NSProprietaryStringEncoding: StringEncoding = 65536;

/// https://developer.apple.com/documentation/Foundation/NSSimpleCString?language=objc
pub const SimpleCString = opaque {
    pub const Internal = objc.ExternClass("NSSimpleCString", @This(), String, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn supportsSecureCoding() objc.BOOL {
        return objc.msgSend(Internal.class(), "supportsSecureCoding", objc.BOOL, .{});
    }

    pub fn characterAtIndex(_self: *@This(), _index: objc.NSUInteger) unichar {
        return objc.msgSend(_self, "characterAtIndex:", unichar, .{_index});
    }

    pub fn length(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "length", objc.NSUInteger, .{});
    }
};

/// https://developer.apple.com/documentation/Foundation/NSConstantString?language=objc
pub const ConstantString = opaque {
    pub const Internal = objc.ExternClass("NSConstantString", @This(), SimpleCString, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn supportsSecureCoding() objc.BOOL {
        return objc.msgSend(Internal.class(), "supportsSecureCoding", objc.BOOL, .{});
    }

    pub fn characterAtIndex(_self: *@This(), _index: objc.NSUInteger) unichar {
        return objc.msgSend(_self, "characterAtIndex:", unichar, .{_index});
    }

    pub fn length(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "length", objc.NSUInteger, .{});
    }
};

/// https://developer.apple.com/documentation/Foundation/NSDictionary?language=objc
pub fn Dictionary(comptime KeyType: type, comptime ObjectType: type) type {
    const unused0 = KeyType;
    _ = unused0; // Prevent unused parameter warning!!!
    const unused1 = ObjectType;
    _ = unused1; // Prevent unused parameter warning!!!
    return struct {
        pub const Internal = objc.ExternClass("NSDictionary", @This(), objc.NSObject, &.{ Copying, MutableCopying, SecureCoding, FastEnumeration });
        pub const as = Internal.as;
        pub const retain = Internal.retain;
        pub const release = Internal.release;
        pub const autorelease = Internal.autorelease;
        pub const new = Internal.new;
        pub const alloc = Internal.alloc;

        pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
            return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
        }

        pub fn hash(_self: *@This()) objc.NSUInteger {
            return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
        }

        pub fn superclass(_self: *@This()) objc.Class {
            return objc.msgSend(_self, "superclass", objc.Class, .{});
        }

        pub fn class(_self: *@This()) objc.Class {
            return objc.msgSend(_self, "class", objc.Class, .{});
        }

        pub fn self(_self: *@This()) *@This() {
            return objc.msgSend(_self, "self", *@This(), .{});
        }

        pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
            return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
        }

        pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
            return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
        }

        pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
            return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
        }

        pub fn isProxy(_self: *@This()) objc.BOOL {
            return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
        }

        pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
            return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
        }

        pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
            return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
        }

        pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
            return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
        }

        pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
            return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
        }

        pub fn retainCount(_self: *@This()) objc.NSUInteger {
            return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
        }

        pub fn zone(_self: *@This()) ?*objc._NSZone {
            return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
        }

        pub fn description(_self: *@This()) ?*String {
            return objc.msgSend(_self, "description", ?*String, .{});
        }

        pub fn debugDescription(_self: *@This()) ?*String {
            return objc.msgSend(_self, "debugDescription", ?*String, .{});
        }

        pub fn load() void {
            return objc.msgSend(Internal.class(), "load", void, .{});
        }

        pub fn initialize() void {
            return objc.msgSend(Internal.class(), "initialize", void, .{});
        }

        pub fn init(_self: *@This()) *@This() {
            return objc.msgSend(_self, "init", *@This(), .{});
        }

        pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
            return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
        }

        pub fn dealloc(_self: *@This()) void {
            return objc.msgSend(_self, "dealloc", void, .{});
        }

        pub fn finalize(_self: *@This()) void {
            return objc.msgSend(_self, "finalize", void, .{});
        }

        pub fn copy(_self: *@This()) ?objc.Id {
            return objc.msgSend(_self, "copy", ?objc.Id, .{});
        }

        pub fn mutableCopy(_self: *@This()) ?objc.Id {
            return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
        }

        pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
            return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
        }

        pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
            return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
        }

        pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
            return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
        }

        pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
            return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
        }

        pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
            return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
        }

        pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
            return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
        }

        pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
            return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
        }

        pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
            return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
        }

        pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
            return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
        }

        pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
            return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
        }

        pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
            return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
        }

        pub fn retainWeakReference(_self: *@This()) objc.BOOL {
            return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
        }

        pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
            return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
        }

        pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
            return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
        }

        pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
            return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
        }

        pub fn encodeWithCoder(_self: *@This(), _coder: ?*Coder) void {
            return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
        }

        pub fn initWithCoder(_self: *@This(), _coder: ?*Coder) *@This() {
            return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
        }

        pub fn supportsSecureCoding() objc.BOOL {
            return objc.msgSend(Internal.class(), "supportsSecureCoding", objc.BOOL, .{});
        }

        pub fn countByEnumeratingWithStateObjectsCount(_self: *@This(), _state: ?*FastEnumerationState, _buffer: ?*?objc.Id, _len: objc.NSUInteger) objc.NSUInteger {
            return objc.msgSend(_self, "countByEnumeratingWithState:objects:count:", objc.NSUInteger, .{ _state, _buffer, _len });
        }

        pub fn objectForKey(_self: *@This(), _aKey: KeyType) ObjectType {
            return objc.msgSend(_self, "objectForKey:", ObjectType, .{_aKey});
        }

        pub fn keyEnumerator(_self: *@This()) ?*anyopaque {
            return objc.msgSend(_self, "keyEnumerator", ?*anyopaque, .{});
        }

        pub fn initWithObjectsForKeysCount(_self: *@This(), _objects: ?*ObjectType, _keys: ?*?objc.Id, _cnt: objc.NSUInteger) *@This() {
            return objc.msgSend(_self, "initWithObjects:forKeys:count:", *@This(), .{ _objects, _keys, _cnt });
        }

        pub fn count(_self: *@This()) objc.NSUInteger {
            return objc.msgSend(_self, "count", objc.NSUInteger, .{});
        }
    };
}

/// https://developer.apple.com/documentation/Foundation/NSMutableDictionary?language=objc
pub fn MutableDictionary(comptime KeyType: type, comptime ObjectType: type) type {
    const unused0 = KeyType;
    _ = unused0; // Prevent unused parameter warning!!!
    const unused1 = ObjectType;
    _ = unused1; // Prevent unused parameter warning!!!
    return struct {
        pub const Internal = objc.ExternClass("NSMutableDictionary", @This(), Dictionary, &.{});
        pub const as = Internal.as;
        pub const retain = Internal.retain;
        pub const release = Internal.release;
        pub const autorelease = Internal.autorelease;
        pub const new = Internal.new;
        pub const alloc = Internal.alloc;

        pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
            return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
        }

        pub fn hash(_self: *@This()) objc.NSUInteger {
            return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
        }

        pub fn superclass(_self: *@This()) objc.Class {
            return objc.msgSend(_self, "superclass", objc.Class, .{});
        }

        pub fn class(_self: *@This()) objc.Class {
            return objc.msgSend(_self, "class", objc.Class, .{});
        }

        pub fn self(_self: *@This()) *@This() {
            return objc.msgSend(_self, "self", *@This(), .{});
        }

        pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
            return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
        }

        pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
            return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
        }

        pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
            return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
        }

        pub fn isProxy(_self: *@This()) objc.BOOL {
            return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
        }

        pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
            return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
        }

        pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
            return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
        }

        pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
            return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
        }

        pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
            return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
        }

        pub fn retainCount(_self: *@This()) objc.NSUInteger {
            return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
        }

        pub fn zone(_self: *@This()) ?*objc._NSZone {
            return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
        }

        pub fn description(_self: *@This()) ?*String {
            return objc.msgSend(_self, "description", ?*String, .{});
        }

        pub fn debugDescription(_self: *@This()) ?*String {
            return objc.msgSend(_self, "debugDescription", ?*String, .{});
        }

        pub fn load() void {
            return objc.msgSend(Internal.class(), "load", void, .{});
        }

        pub fn initialize() void {
            return objc.msgSend(Internal.class(), "initialize", void, .{});
        }

        pub fn init(_self: *@This()) *@This() {
            return objc.msgSend(_self, "init", *@This(), .{});
        }

        pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
            return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
        }

        pub fn dealloc(_self: *@This()) void {
            return objc.msgSend(_self, "dealloc", void, .{});
        }

        pub fn finalize(_self: *@This()) void {
            return objc.msgSend(_self, "finalize", void, .{});
        }

        pub fn copy(_self: *@This()) ?objc.Id {
            return objc.msgSend(_self, "copy", ?objc.Id, .{});
        }

        pub fn mutableCopy(_self: *@This()) ?objc.Id {
            return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
        }

        pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
            return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
        }

        pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
            return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
        }

        pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
            return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
        }

        pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
            return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
        }

        pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
            return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
        }

        pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
            return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
        }

        pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
            return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
        }

        pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
            return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
        }

        pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
            return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
        }

        pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
            return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
        }

        pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
            return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
        }

        pub fn retainWeakReference(_self: *@This()) objc.BOOL {
            return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
        }

        pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
            return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
        }

        pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
            return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
        }

        pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
            return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
        }

        pub fn encodeWithCoder(_self: *@This(), _coder: ?*Coder) void {
            return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
        }

        pub fn initWithCoder(_self: *@This(), _coder: ?*Coder) *@This() {
            return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
        }

        pub fn supportsSecureCoding() objc.BOOL {
            return objc.msgSend(Internal.class(), "supportsSecureCoding", objc.BOOL, .{});
        }

        pub fn countByEnumeratingWithStateObjectsCount(_self: *@This(), _state: ?*FastEnumerationState, _buffer: ?*?objc.Id, _len: objc.NSUInteger) objc.NSUInteger {
            return objc.msgSend(_self, "countByEnumeratingWithState:objects:count:", objc.NSUInteger, .{ _state, _buffer, _len });
        }

        pub fn objectForKey(_self: *@This(), _aKey: KeyType) ObjectType {
            return objc.msgSend(_self, "objectForKey:", ObjectType, .{_aKey});
        }

        pub fn keyEnumerator(_self: *@This()) ?*anyopaque {
            return objc.msgSend(_self, "keyEnumerator", ?*anyopaque, .{});
        }

        pub fn initWithObjectsForKeysCount(_self: *@This(), _objects: ?*ObjectType, _keys: ?*?objc.Id, _cnt: objc.NSUInteger) *@This() {
            return objc.msgSend(_self, "initWithObjects:forKeys:count:", *@This(), .{ _objects, _keys, _cnt });
        }

        pub fn count(_self: *@This()) objc.NSUInteger {
            return objc.msgSend(_self, "count", objc.NSUInteger, .{});
        }

        pub fn removeObjectForKey(_self: *@This(), _aKey: KeyType) void {
            return objc.msgSend(_self, "removeObjectForKey:", void, .{_aKey});
        }

        pub fn setObjectForKey(_self: *@This(), _anObject: ObjectType, _aKey: ?objc.Id) void {
            return objc.msgSend(_self, "setObject:forKey:", void, .{ _anObject, _aKey });
        }

        pub fn initWithCapacity(_self: *@This(), _numItems: objc.NSUInteger) *@This() {
            return objc.msgSend(_self, "initWithCapacity:", *@This(), .{_numItems});
        }
    };
}

/// https://developer.apple.com/documentation/Foundation/NSSet?language=objc
pub fn Set(comptime ObjectType: type) type {
    const unused0 = ObjectType;
    _ = unused0; // Prevent unused parameter warning!!!
    return struct {
        pub const Internal = objc.ExternClass("NSSet", @This(), objc.NSObject, &.{ Copying, MutableCopying, SecureCoding, FastEnumeration });
        pub const as = Internal.as;
        pub const retain = Internal.retain;
        pub const release = Internal.release;
        pub const autorelease = Internal.autorelease;
        pub const new = Internal.new;
        pub const alloc = Internal.alloc;

        pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
            return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
        }

        pub fn hash(_self: *@This()) objc.NSUInteger {
            return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
        }

        pub fn superclass(_self: *@This()) objc.Class {
            return objc.msgSend(_self, "superclass", objc.Class, .{});
        }

        pub fn class(_self: *@This()) objc.Class {
            return objc.msgSend(_self, "class", objc.Class, .{});
        }

        pub fn self(_self: *@This()) *@This() {
            return objc.msgSend(_self, "self", *@This(), .{});
        }

        pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
            return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
        }

        pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
            return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
        }

        pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
            return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
        }

        pub fn isProxy(_self: *@This()) objc.BOOL {
            return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
        }

        pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
            return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
        }

        pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
            return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
        }

        pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
            return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
        }

        pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
            return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
        }

        pub fn retainCount(_self: *@This()) objc.NSUInteger {
            return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
        }

        pub fn zone(_self: *@This()) ?*objc._NSZone {
            return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
        }

        pub fn description(_self: *@This()) ?*String {
            return objc.msgSend(_self, "description", ?*String, .{});
        }

        pub fn debugDescription(_self: *@This()) ?*String {
            return objc.msgSend(_self, "debugDescription", ?*String, .{});
        }

        pub fn load() void {
            return objc.msgSend(Internal.class(), "load", void, .{});
        }

        pub fn initialize() void {
            return objc.msgSend(Internal.class(), "initialize", void, .{});
        }

        pub fn init(_self: *@This()) *@This() {
            return objc.msgSend(_self, "init", *@This(), .{});
        }

        pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
            return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
        }

        pub fn dealloc(_self: *@This()) void {
            return objc.msgSend(_self, "dealloc", void, .{});
        }

        pub fn finalize(_self: *@This()) void {
            return objc.msgSend(_self, "finalize", void, .{});
        }

        pub fn copy(_self: *@This()) ?objc.Id {
            return objc.msgSend(_self, "copy", ?objc.Id, .{});
        }

        pub fn mutableCopy(_self: *@This()) ?objc.Id {
            return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
        }

        pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
            return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
        }

        pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
            return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
        }

        pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
            return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
        }

        pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
            return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
        }

        pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
            return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
        }

        pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
            return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
        }

        pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
            return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
        }

        pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
            return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
        }

        pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
            return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
        }

        pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
            return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
        }

        pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
            return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
        }

        pub fn retainWeakReference(_self: *@This()) objc.BOOL {
            return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
        }

        pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
            return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
        }

        pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
            return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
        }

        pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
            return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
        }

        pub fn encodeWithCoder(_self: *@This(), _coder: ?*Coder) void {
            return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
        }

        pub fn initWithCoder(_self: *@This(), _coder: ?*Coder) *@This() {
            return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
        }

        pub fn supportsSecureCoding() objc.BOOL {
            return objc.msgSend(Internal.class(), "supportsSecureCoding", objc.BOOL, .{});
        }

        pub fn countByEnumeratingWithStateObjectsCount(_self: *@This(), _state: ?*FastEnumerationState, _buffer: ?*?objc.Id, _len: objc.NSUInteger) objc.NSUInteger {
            return objc.msgSend(_self, "countByEnumeratingWithState:objects:count:", objc.NSUInteger, .{ _state, _buffer, _len });
        }

        pub fn member(_self: *@This(), _object: ObjectType) ObjectType {
            return objc.msgSend(_self, "member:", ObjectType, .{_object});
        }

        pub fn objectEnumerator(_self: *@This()) ?*anyopaque {
            return objc.msgSend(_self, "objectEnumerator", ?*anyopaque, .{});
        }

        pub fn initWithObjectsCount(_self: *@This(), _objects: ?*ObjectType, _cnt: objc.NSUInteger) *@This() {
            return objc.msgSend(_self, "initWithObjects:count:", *@This(), .{ _objects, _cnt });
        }

        pub fn count(_self: *@This()) objc.NSUInteger {
            return objc.msgSend(_self, "count", objc.NSUInteger, .{});
        }
    };
}

/// https://developer.apple.com/documentation/Foundation/NSMutableSet?language=objc
pub fn MutableSet(comptime ObjectType: type) type {
    const unused0 = ObjectType;
    _ = unused0; // Prevent unused parameter warning!!!
    return struct {
        pub const Internal = objc.ExternClass("NSMutableSet", @This(), Set, &.{});
        pub const as = Internal.as;
        pub const retain = Internal.retain;
        pub const release = Internal.release;
        pub const autorelease = Internal.autorelease;
        pub const new = Internal.new;
        pub const alloc = Internal.alloc;

        pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
            return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
        }

        pub fn hash(_self: *@This()) objc.NSUInteger {
            return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
        }

        pub fn superclass(_self: *@This()) objc.Class {
            return objc.msgSend(_self, "superclass", objc.Class, .{});
        }

        pub fn class(_self: *@This()) objc.Class {
            return objc.msgSend(_self, "class", objc.Class, .{});
        }

        pub fn self(_self: *@This()) *@This() {
            return objc.msgSend(_self, "self", *@This(), .{});
        }

        pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
            return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
        }

        pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
            return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
        }

        pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
            return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
        }

        pub fn isProxy(_self: *@This()) objc.BOOL {
            return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
        }

        pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
            return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
        }

        pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
            return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
        }

        pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
            return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
        }

        pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
            return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
        }

        pub fn retainCount(_self: *@This()) objc.NSUInteger {
            return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
        }

        pub fn zone(_self: *@This()) ?*objc._NSZone {
            return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
        }

        pub fn description(_self: *@This()) ?*String {
            return objc.msgSend(_self, "description", ?*String, .{});
        }

        pub fn debugDescription(_self: *@This()) ?*String {
            return objc.msgSend(_self, "debugDescription", ?*String, .{});
        }

        pub fn load() void {
            return objc.msgSend(Internal.class(), "load", void, .{});
        }

        pub fn initialize() void {
            return objc.msgSend(Internal.class(), "initialize", void, .{});
        }

        pub fn init(_self: *@This()) *@This() {
            return objc.msgSend(_self, "init", *@This(), .{});
        }

        pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
            return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
        }

        pub fn dealloc(_self: *@This()) void {
            return objc.msgSend(_self, "dealloc", void, .{});
        }

        pub fn finalize(_self: *@This()) void {
            return objc.msgSend(_self, "finalize", void, .{});
        }

        pub fn copy(_self: *@This()) ?objc.Id {
            return objc.msgSend(_self, "copy", ?objc.Id, .{});
        }

        pub fn mutableCopy(_self: *@This()) ?objc.Id {
            return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
        }

        pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
            return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
        }

        pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
            return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
        }

        pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
            return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
        }

        pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
            return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
        }

        pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
            return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
        }

        pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
            return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
        }

        pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
            return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
        }

        pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
            return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
        }

        pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
            return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
        }

        pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
            return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
        }

        pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
            return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
        }

        pub fn retainWeakReference(_self: *@This()) objc.BOOL {
            return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
        }

        pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
            return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
        }

        pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
            return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
        }

        pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
            return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
        }

        pub fn encodeWithCoder(_self: *@This(), _coder: ?*Coder) void {
            return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
        }

        pub fn initWithCoder(_self: *@This(), _coder: ?*Coder) *@This() {
            return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
        }

        pub fn supportsSecureCoding() objc.BOOL {
            return objc.msgSend(Internal.class(), "supportsSecureCoding", objc.BOOL, .{});
        }

        pub fn countByEnumeratingWithStateObjectsCount(_self: *@This(), _state: ?*FastEnumerationState, _buffer: ?*?objc.Id, _len: objc.NSUInteger) objc.NSUInteger {
            return objc.msgSend(_self, "countByEnumeratingWithState:objects:count:", objc.NSUInteger, .{ _state, _buffer, _len });
        }

        pub fn member(_self: *@This(), _object: ObjectType) ObjectType {
            return objc.msgSend(_self, "member:", ObjectType, .{_object});
        }

        pub fn objectEnumerator(_self: *@This()) ?*anyopaque {
            return objc.msgSend(_self, "objectEnumerator", ?*anyopaque, .{});
        }

        pub fn initWithObjectsCount(_self: *@This(), _objects: ?*ObjectType, _cnt: objc.NSUInteger) *@This() {
            return objc.msgSend(_self, "initWithObjects:count:", *@This(), .{ _objects, _cnt });
        }

        pub fn count(_self: *@This()) objc.NSUInteger {
            return objc.msgSend(_self, "count", objc.NSUInteger, .{});
        }

        pub fn addObject(_self: *@This(), _object: ObjectType) void {
            return objc.msgSend(_self, "addObject:", void, .{_object});
        }

        pub fn removeObject(_self: *@This(), _object: ObjectType) void {
            return objc.msgSend(_self, "removeObject:", void, .{_object});
        }

        pub fn initWithCapacity(_self: *@This(), _numItems: objc.NSUInteger) *@This() {
            return objc.msgSend(_self, "initWithCapacity:", *@This(), .{_numItems});
        }
    };
}

/// https://developer.apple.com/documentation/Foundation/NSCountedSet?language=objc
pub fn CountedSet(comptime ObjectType: type) type {
    const unused0 = ObjectType;
    _ = unused0; // Prevent unused parameter warning!!!
    return struct {
        pub const Internal = objc.ExternClass("NSCountedSet", @This(), MutableSet, &.{});
        pub const as = Internal.as;
        pub const retain = Internal.retain;
        pub const release = Internal.release;
        pub const autorelease = Internal.autorelease;
        pub const new = Internal.new;
        pub const alloc = Internal.alloc;

        pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
            return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
        }

        pub fn hash(_self: *@This()) objc.NSUInteger {
            return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
        }

        pub fn superclass(_self: *@This()) objc.Class {
            return objc.msgSend(_self, "superclass", objc.Class, .{});
        }

        pub fn class(_self: *@This()) objc.Class {
            return objc.msgSend(_self, "class", objc.Class, .{});
        }

        pub fn self(_self: *@This()) *@This() {
            return objc.msgSend(_self, "self", *@This(), .{});
        }

        pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
            return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
        }

        pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
            return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
        }

        pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
            return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
        }

        pub fn isProxy(_self: *@This()) objc.BOOL {
            return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
        }

        pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
            return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
        }

        pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
            return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
        }

        pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
            return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
        }

        pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
            return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
        }

        pub fn retainCount(_self: *@This()) objc.NSUInteger {
            return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
        }

        pub fn zone(_self: *@This()) ?*objc._NSZone {
            return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
        }

        pub fn description(_self: *@This()) ?*String {
            return objc.msgSend(_self, "description", ?*String, .{});
        }

        pub fn debugDescription(_self: *@This()) ?*String {
            return objc.msgSend(_self, "debugDescription", ?*String, .{});
        }

        pub fn load() void {
            return objc.msgSend(Internal.class(), "load", void, .{});
        }

        pub fn initialize() void {
            return objc.msgSend(Internal.class(), "initialize", void, .{});
        }

        pub fn init(_self: *@This()) *@This() {
            return objc.msgSend(_self, "init", *@This(), .{});
        }

        pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
            return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
        }

        pub fn dealloc(_self: *@This()) void {
            return objc.msgSend(_self, "dealloc", void, .{});
        }

        pub fn finalize(_self: *@This()) void {
            return objc.msgSend(_self, "finalize", void, .{});
        }

        pub fn copy(_self: *@This()) ?objc.Id {
            return objc.msgSend(_self, "copy", ?objc.Id, .{});
        }

        pub fn mutableCopy(_self: *@This()) ?objc.Id {
            return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
        }

        pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
            return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
        }

        pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
            return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
        }

        pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
            return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
        }

        pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
            return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
        }

        pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
            return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
        }

        pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
            return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
        }

        pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
            return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
        }

        pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
            return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
        }

        pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
            return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
        }

        pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
            return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
        }

        pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
            return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
        }

        pub fn retainWeakReference(_self: *@This()) objc.BOOL {
            return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
        }

        pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
            return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
        }

        pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
            return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
        }

        pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
            return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
        }

        pub fn encodeWithCoder(_self: *@This(), _coder: ?*Coder) void {
            return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
        }

        pub fn initWithCoder(_self: *@This(), _coder: ?*Coder) *@This() {
            return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
        }

        pub fn supportsSecureCoding() objc.BOOL {
            return objc.msgSend(Internal.class(), "supportsSecureCoding", objc.BOOL, .{});
        }

        pub fn countByEnumeratingWithStateObjectsCount(_self: *@This(), _state: ?*FastEnumerationState, _buffer: ?*?objc.Id, _len: objc.NSUInteger) objc.NSUInteger {
            return objc.msgSend(_self, "countByEnumeratingWithState:objects:count:", objc.NSUInteger, .{ _state, _buffer, _len });
        }

        pub fn member(_self: *@This(), _object: ObjectType) ObjectType {
            return objc.msgSend(_self, "member:", ObjectType, .{_object});
        }

        pub fn objectEnumerator(_self: *@This()) ?*anyopaque {
            return objc.msgSend(_self, "objectEnumerator", ?*anyopaque, .{});
        }

        pub fn initWithObjectsCount(_self: *@This(), _objects: ?*ObjectType, _cnt: objc.NSUInteger) *@This() {
            return objc.msgSend(_self, "initWithObjects:count:", *@This(), .{ _objects, _cnt });
        }

        pub fn count(_self: *@This()) objc.NSUInteger {
            return objc.msgSend(_self, "count", objc.NSUInteger, .{});
        }

        pub fn addObject(_self: *@This(), _object: ObjectType) void {
            return objc.msgSend(_self, "addObject:", void, .{_object});
        }

        pub fn removeObject(_self: *@This(), _object: ObjectType) void {
            return objc.msgSend(_self, "removeObject:", void, .{_object});
        }

        pub fn initWithCapacity(_self: *@This(), _numItems: objc.NSUInteger) *@This() {
            return objc.msgSend(_self, "initWithCapacity:", *@This(), .{_numItems});
        }

        pub fn initWithArray(_self: *@This(), _array: ?*anyopaque) *@This() {
            return objc.msgSend(_self, "initWithArray:", *@This(), .{_array});
        }

        pub fn initWithSet(_self: *@This(), _set: ?*anyopaque) *@This() {
            return objc.msgSend(_self, "initWithSet:", *@This(), .{_set});
        }

        pub fn countForObject(_self: *@This(), _object: ObjectType) objc.NSUInteger {
            return objc.msgSend(_self, "countForObject:", objc.NSUInteger, .{_object});
        }
    };
}

pub const ProgressKind = ?*String;

pub const ProgressUserInfoKey = ?*String;

pub const ProgressFileOperationKind = ?*String;

/// https://developer.apple.com/documentation/Foundation/NSProgress?language=objc
pub const Progress = opaque {
    pub const UnpublishingHandler = *const fn () callconv(.C) void;

    pub const PublishingHandler = Progress.UnpublishingHandler;

    pub const Internal = objc.ExternClass("NSProgress", @This(), objc.NSObject, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn currentProgress() ?*Progress {
        return objc.msgSend(Internal.class(), "currentProgress", ?*Progress, .{});
    }

    pub fn progressWithTotalUnitCount(_unitCount: objc.int64_t) ?*Progress {
        return objc.msgSend(Internal.class(), "progressWithTotalUnitCount:", ?*Progress, .{_unitCount});
    }

    pub fn discreteProgressWithTotalUnitCount(_unitCount: objc.int64_t) ?*Progress {
        return objc.msgSend(Internal.class(), "discreteProgressWithTotalUnitCount:", ?*Progress, .{_unitCount});
    }

    pub fn progressWithTotalUnitCountParentPendingUnitCount(_unitCount: objc.int64_t, _parent: ?*Progress, _portionOfParentTotalUnitCount: objc.int64_t) ?*Progress {
        return objc.msgSend(Internal.class(), "progressWithTotalUnitCount:parent:pendingUnitCount:", ?*Progress, .{ _unitCount, _parent, _portionOfParentTotalUnitCount });
    }

    pub fn initWithParentUserInfo(_self: *@This(), _parentProgressOrNil: ?*Progress, _userInfoOrNil: ?*anyopaque) *@This() {
        return objc.msgSend(_self, "initWithParent:userInfo:", *@This(), .{ _parentProgressOrNil, _userInfoOrNil });
    }

    pub fn becomeCurrentWithPendingUnitCount(_self: *@This(), _unitCount: objc.int64_t) void {
        return objc.msgSend(_self, "becomeCurrentWithPendingUnitCount:", void, .{_unitCount});
    }

    pub fn performAsCurrentWithPendingUnitCountUsingBlock(_self: *@This(), _unitCount: objc.int64_t, _work: *const fn () callconv(.C) void) void {
        return objc.msgSend(_self, "performAsCurrentWithPendingUnitCount:usingBlock:", void, .{ _unitCount, _work });
    }

    pub fn resignCurrent(_self: *@This()) void {
        return objc.msgSend(_self, "resignCurrent", void, .{});
    }

    pub fn addChildWithPendingUnitCount(_self: *@This(), _child: ?*Progress, _inUnitCount: objc.int64_t) void {
        return objc.msgSend(_self, "addChild:withPendingUnitCount:", void, .{ _child, _inUnitCount });
    }

    pub fn setTotalUnitCount(_self: *@This(), _totalUnitCount: objc.int64_t) void {
        return objc.msgSend(_self, "setTotalUnitCount:", void, .{_totalUnitCount});
    }

    pub fn totalUnitCount(_self: *@This()) objc.int64_t {
        return objc.msgSend(_self, "totalUnitCount", objc.int64_t, .{});
    }

    pub fn completedUnitCount(_self: *@This()) objc.int64_t {
        return objc.msgSend(_self, "completedUnitCount", objc.int64_t, .{});
    }

    pub fn setCompletedUnitCount(_self: *@This(), _completedUnitCount: objc.int64_t) void {
        return objc.msgSend(_self, "setCompletedUnitCount:", void, .{_completedUnitCount});
    }

    pub fn localizedDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "localizedDescription", ?*String, .{});
    }

    pub fn setLocalizedDescription(_self: *@This(), _localizedDescription: ?*String) void {
        return objc.msgSend(_self, "setLocalizedDescription:", void, .{_localizedDescription});
    }

    pub fn setLocalizedAdditionalDescription(_self: *@This(), _localizedAdditionalDescription: ?*String) void {
        return objc.msgSend(_self, "setLocalizedAdditionalDescription:", void, .{_localizedAdditionalDescription});
    }

    pub fn localizedAdditionalDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "localizedAdditionalDescription", ?*String, .{});
    }

    pub fn setCancellable(_self: *@This(), _cancellable: objc.BOOL) void {
        return objc.msgSend(_self, "setCancellable:", void, .{_cancellable});
    }

    pub fn isCancellable(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isCancellable", objc.BOOL, .{});
    }

    pub fn setPausable(_self: *@This(), _pausable: objc.BOOL) void {
        return objc.msgSend(_self, "setPausable:", void, .{_pausable});
    }

    pub fn isPausable(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isPausable", objc.BOOL, .{});
    }

    pub fn isCancelled(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isCancelled", objc.BOOL, .{});
    }

    pub fn isPaused(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isPaused", objc.BOOL, .{});
    }

    pub fn cancellationHandler(_self: *@This()) *const fn () callconv(.C) void {
        return objc.msgSend(_self, "cancellationHandler", *const fn () callconv(.C) void, .{});
    }

    pub fn setCancellationHandler(_self: *@This(), _cancellationHandler: *const fn () callconv(.C) void) void {
        return objc.msgSend(_self, "setCancellationHandler:", void, .{_cancellationHandler});
    }

    pub fn pausingHandler(_self: *@This()) *const fn () callconv(.C) void {
        return objc.msgSend(_self, "pausingHandler", *const fn () callconv(.C) void, .{});
    }

    pub fn setPausingHandler(_self: *@This(), _pausingHandler: *const fn () callconv(.C) void) void {
        return objc.msgSend(_self, "setPausingHandler:", void, .{_pausingHandler});
    }

    pub fn setResumingHandler(_self: *@This(), _resumingHandler: *const fn () callconv(.C) void) void {
        return objc.msgSend(_self, "setResumingHandler:", void, .{_resumingHandler});
    }

    pub fn resumingHandler(_self: *@This()) *const fn () callconv(.C) void {
        return objc.msgSend(_self, "resumingHandler", *const fn () callconv(.C) void, .{});
    }

    pub fn setUserInfoObjectForKey(_self: *@This(), _objectOrNil: ?objc.Id, _key: ProgressUserInfoKey) void {
        return objc.msgSend(_self, "setUserInfoObject:forKey:", void, .{ _objectOrNil, _key });
    }

    pub fn isIndeterminate(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isIndeterminate", objc.BOOL, .{});
    }

    pub fn fractionCompleted(_self: *@This()) f64 {
        return objc.msgSend(_self, "fractionCompleted", f64, .{});
    }

    pub fn isFinished(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isFinished", objc.BOOL, .{});
    }

    pub fn cancel(_self: *@This()) void {
        return objc.msgSend(_self, "cancel", void, .{});
    }

    pub fn pause(_self: *@This()) void {
        return objc.msgSend(_self, "pause", void, .{});
    }

    pub fn @"resume"(_self: *@This()) void {
        return objc.msgSend(_self, "resume", void, .{});
    }

    pub fn userInfo(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "userInfo", ?*anyopaque, .{});
    }

    pub fn kind(_self: *@This()) ProgressKind {
        return objc.msgSend(_self, "kind", ProgressKind, .{});
    }

    pub fn setKind(_self: *@This(), _kind: ProgressKind) void {
        return objc.msgSend(_self, "setKind:", void, .{_kind});
    }

    pub fn estimatedTimeRemaining(_self: *@This()) ?*Number {
        return objc.msgSend(_self, "estimatedTimeRemaining", ?*Number, .{});
    }

    pub fn setEstimatedTimeRemaining(_self: *@This(), _estimatedTimeRemaining: ?*Number) void {
        return objc.msgSend(_self, "setEstimatedTimeRemaining:", void, .{_estimatedTimeRemaining});
    }

    pub fn throughput(_self: *@This()) ?*Number {
        return objc.msgSend(_self, "throughput", ?*Number, .{});
    }

    pub fn setThroughput(_self: *@This(), _throughput: ?*Number) void {
        return objc.msgSend(_self, "setThroughput:", void, .{_throughput});
    }

    pub fn fileOperationKind(_self: *@This()) ProgressFileOperationKind {
        return objc.msgSend(_self, "fileOperationKind", ProgressFileOperationKind, .{});
    }

    pub fn setFileOperationKind(_self: *@This(), _fileOperationKind: ProgressFileOperationKind) void {
        return objc.msgSend(_self, "setFileOperationKind:", void, .{_fileOperationKind});
    }

    pub fn fileURL(_self: *@This()) ?*URL {
        return objc.msgSend(_self, "fileURL", ?*URL, .{});
    }

    pub fn setFileURL(_self: *@This(), _fileURL: ?*URL) void {
        return objc.msgSend(_self, "setFileURL:", void, .{_fileURL});
    }

    pub fn setFileTotalCount(_self: *@This(), _fileTotalCount: ?*Number) void {
        return objc.msgSend(_self, "setFileTotalCount:", void, .{_fileTotalCount});
    }

    pub fn fileTotalCount(_self: *@This()) ?*Number {
        return objc.msgSend(_self, "fileTotalCount", ?*Number, .{});
    }

    pub fn fileCompletedCount(_self: *@This()) ?*Number {
        return objc.msgSend(_self, "fileCompletedCount", ?*Number, .{});
    }

    pub fn setFileCompletedCount(_self: *@This(), _fileCompletedCount: ?*Number) void {
        return objc.msgSend(_self, "setFileCompletedCount:", void, .{_fileCompletedCount});
    }

    pub fn publish(_self: *@This()) void {
        return objc.msgSend(_self, "publish", void, .{});
    }

    pub fn unpublish(_self: *@This()) void {
        return objc.msgSend(_self, "unpublish", void, .{});
    }

    pub fn addSubscriberForFileURLWithPublishingHandler(_url: ?*URL, _publishingHandler: Progress.PublishingHandler) ?objc.Id {
        return objc.msgSend(Internal.class(), "addSubscriberForFileURL:withPublishingHandler:", ?objc.Id, .{ _url, _publishingHandler });
    }

    pub fn removeSubscriber(_subscriber: ?objc.Id) void {
        return objc.msgSend(Internal.class(), "removeSubscriber:", void, .{_subscriber});
    }

    pub fn isOld(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isOld", objc.BOOL, .{});
    }
};

/// https://developer.apple.com/documentation/Foundation/NSProgressReporting?language=objc
pub const ProgressReporting = opaque {
    pub const Internal = objc.ExternProtocol(@This(), &.{objc.NSObject});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn progress(_self: *@This()) ?*Progress {
        return objc.msgSend(_self, "progress", ?*Progress, .{});
    }
};

pub const NotificationName = ?*String;

/// https://developer.apple.com/documentation/Foundation/NSNotification?language=objc
pub const Notification = opaque {
    pub const Internal = objc.ExternClass("NSNotification", @This(), objc.NSObject, &.{ Copying, Coding });
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn initWithNameObjectUserInfo(_self: *@This(), _name: NotificationName, _object: ?objc.Id, _userInfo: ?*Dictionary) *@This() {
        return objc.msgSend(_self, "initWithName:object:userInfo:", *@This(), .{ _name, _object, _userInfo });
    }

    pub fn name(_self: *@This()) NotificationName {
        return objc.msgSend(_self, "name", NotificationName, .{});
    }

    pub fn object(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "object", ?objc.Id, .{});
    }

    pub fn userInfo(_self: *@This()) ?*Dictionary {
        return objc.msgSend(_self, "userInfo", ?*Dictionary, .{});
    }
};

/// https://developer.apple.com/documentation/Foundation/NSNotificationCenter?language=objc
pub const NotificationCenter = opaque {
    pub const Internal = objc.ExternClass("NSNotificationCenter", @This(), objc.NSObject, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn addObserverSelectorNameObject(
        _self: *@This(),
        _observer: ?objc.Id,
        _aSelector: objc.Selector,
        _aName: NotificationName,
        _anObject: ?objc.Id,
    ) void {
        return objc.msgSend(_self, "addObserver:selector:name:object:", void, .{
            _observer,
            _aSelector,
            _aName,
            _anObject,
        });
    }

    pub fn postNotification(_self: *@This(), _notification: ?*Notification) void {
        return objc.msgSend(_self, "postNotification:", void, .{_notification});
    }

    pub fn postNotificationNameObject(_self: *@This(), _aName: NotificationName, _anObject: ?objc.Id) void {
        return objc.msgSend(_self, "postNotificationName:object:", void, .{ _aName, _anObject });
    }

    pub fn postNotificationNameObjectUserInfo(_self: *@This(), _aName: NotificationName, _anObject: ?objc.Id, _aUserInfo: ?*Dictionary) void {
        return objc.msgSend(_self, "postNotificationName:object:userInfo:", void, .{ _aName, _anObject, _aUserInfo });
    }

    pub fn removeObserver(_self: *@This(), _observer: ?objc.Id) void {
        return objc.msgSend(_self, "removeObserver:", void, .{_observer});
    }

    pub fn removeObserverNameObject(_self: *@This(), _observer: ?objc.Id, _aName: NotificationName, _anObject: ?objc.Id) void {
        return objc.msgSend(_self, "removeObserver:name:object:", void, .{ _observer, _aName, _anObject });
    }

    pub fn addObserverForNameObjectQueueUsingBlock(
        _self: *@This(),
        _name: NotificationName,
        _obj: ?objc.Id,
        _queue: ?*OperationQueue,
        _block: *const fn (?*Notification) callconv(.C) void,
    ) ?*anyopaque {
        return objc.msgSend(_self, "addObserverForName:object:queue:usingBlock:", ?*anyopaque, .{
            _name,
            _obj,
            _queue,
            _block,
        });
    }

    pub fn defaultCenter() ?*NotificationCenter {
        return objc.msgSend(Internal.class(), "defaultCenter", ?*NotificationCenter, .{});
    }
};

/// https://developer.apple.com/documentation/Foundation/NSBundle?language=objc
pub const Bundle = opaque {
    pub const anon1181 = u32;
    pub const anon1181_NSBundleExecutableArchitectureI386: u32 = 7;
    pub const anon1181_NSBundleExecutableArchitecturePPC: u32 = 18;
    pub const anon1181_NSBundleExecutableArchitectureX86_64: u32 = 16777223;
    pub const anon1181_NSBundleExecutableArchitecturePPC64: u32 = 16777234;
    pub const anon1181_NSBundleExecutableArchitectureARM64: u32 = 16777228;
    pub const anon1181_fsRdAccessPerm: u32 = 1;
    pub const anon1181_fsWrAccessPerm: u32 = 2;
    pub const anon1181_fsRdDenyPerm: u32 = 16;
    pub const anon1181_fsWrDenyPerm: u32 = 32;

    pub const Internal = objc.ExternClass("NSBundle", @This(), objc.NSObject, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn mainBundle() ?*Bundle {
        return objc.msgSend(Internal.class(), "mainBundle", ?*Bundle, .{});
    }

    pub fn bundleWithPath(_path: ?*String) *@This() {
        return objc.msgSend(Internal.class(), "bundleWithPath:", *@This(), .{_path});
    }

    pub fn initWithPath(_self: *@This(), _path: ?*String) *@This() {
        return objc.msgSend(_self, "initWithPath:", *@This(), .{_path});
    }

    pub fn bundleWithURL(_url: ?*URL) *@This() {
        return objc.msgSend(Internal.class(), "bundleWithURL:", *@This(), .{_url});
    }

    pub fn initWithURL(_self: *@This(), _url: ?*URL) *@This() {
        return objc.msgSend(_self, "initWithURL:", *@This(), .{_url});
    }

    pub fn bundleForClass(_aClass: objc.Class) ?*Bundle {
        return objc.msgSend(Internal.class(), "bundleForClass:", ?*Bundle, .{_aClass});
    }

    pub fn bundleWithIdentifier(_identifier: ?*String) ?*Bundle {
        return objc.msgSend(Internal.class(), "bundleWithIdentifier:", ?*Bundle, .{_identifier});
    }

    pub fn allBundles() ?*anyopaque {
        return objc.msgSend(Internal.class(), "allBundles", ?*anyopaque, .{});
    }

    pub fn allFrameworks() ?*anyopaque {
        return objc.msgSend(Internal.class(), "allFrameworks", ?*anyopaque, .{});
    }

    pub fn isLoaded(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isLoaded", objc.BOOL, .{});
    }

    pub fn unload(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "unload", objc.BOOL, .{});
    }

    pub fn preflightAndReturnError(_self: *@This(), _error: ?*?*Error) objc.BOOL {
        return objc.msgSend(_self, "preflightAndReturnError:", objc.BOOL, .{_error});
    }

    pub fn loadAndReturnError(_self: *@This(), _error: ?*?*Error) objc.BOOL {
        return objc.msgSend(_self, "loadAndReturnError:", objc.BOOL, .{_error});
    }

    pub fn bundleURL(_self: *@This()) ?*URL {
        return objc.msgSend(_self, "bundleURL", ?*URL, .{});
    }

    pub fn resourceURL(_self: *@This()) ?*URL {
        return objc.msgSend(_self, "resourceURL", ?*URL, .{});
    }

    pub fn executableURL(_self: *@This()) ?*URL {
        return objc.msgSend(_self, "executableURL", ?*URL, .{});
    }

    pub fn urlForAuxiliaryExecutable(_self: *@This(), _executableName: ?*String) ?*URL {
        return objc.msgSend(_self, "URLForAuxiliaryExecutable:", ?*URL, .{_executableName});
    }

    pub fn privateFrameworksURL(_self: *@This()) ?*URL {
        return objc.msgSend(_self, "privateFrameworksURL", ?*URL, .{});
    }

    pub fn sharedFrameworksURL(_self: *@This()) ?*URL {
        return objc.msgSend(_self, "sharedFrameworksURL", ?*URL, .{});
    }

    pub fn sharedSupportURL(_self: *@This()) ?*URL {
        return objc.msgSend(_self, "sharedSupportURL", ?*URL, .{});
    }

    pub fn builtInPlugInsURL(_self: *@This()) ?*URL {
        return objc.msgSend(_self, "builtInPlugInsURL", ?*URL, .{});
    }

    pub fn appStoreReceiptURL(_self: *@This()) ?*URL {
        return objc.msgSend(_self, "appStoreReceiptURL", ?*URL, .{});
    }

    pub fn bundlePath(_self: *@This()) ?*String {
        return objc.msgSend(_self, "bundlePath", ?*String, .{});
    }

    pub fn resourcePath(_self: *@This()) ?*String {
        return objc.msgSend(_self, "resourcePath", ?*String, .{});
    }

    pub fn executablePath(_self: *@This()) ?*String {
        return objc.msgSend(_self, "executablePath", ?*String, .{});
    }

    pub fn pathForAuxiliaryExecutable(_self: *@This(), _executableName: ?*String) ?*String {
        return objc.msgSend(_self, "pathForAuxiliaryExecutable:", ?*String, .{_executableName});
    }

    pub fn privateFrameworksPath(_self: *@This()) ?*String {
        return objc.msgSend(_self, "privateFrameworksPath", ?*String, .{});
    }

    pub fn sharedFrameworksPath(_self: *@This()) ?*String {
        return objc.msgSend(_self, "sharedFrameworksPath", ?*String, .{});
    }

    pub fn sharedSupportPath(_self: *@This()) ?*String {
        return objc.msgSend(_self, "sharedSupportPath", ?*String, .{});
    }

    pub fn builtInPlugInsPath(_self: *@This()) ?*String {
        return objc.msgSend(_self, "builtInPlugInsPath", ?*String, .{});
    }

    pub fn urlForResourceWithExtensionSubdirectoryInBundleWithURL(
        _name: ?*String,
        _ext: ?*String,
        _subpath: ?*String,
        _bundleURL: ?*URL,
    ) ?*URL {
        return objc.msgSend(Internal.class(), "URLForResource:withExtension:subdirectory:inBundleWithURL:", ?*URL, .{
            _name,
            _ext,
            _subpath,
            _bundleURL,
        });
    }

    pub fn urLsForResourcesWithExtensionSubdirectoryInBundleWithURL(_ext: ?*String, _subpath: ?*String, _bundleURL: ?*URL) ?*anyopaque {
        return objc.msgSend(Internal.class(), "URLsForResourcesWithExtension:subdirectory:inBundleWithURL:", ?*anyopaque, .{ _ext, _subpath, _bundleURL });
    }

    pub fn urlForResourceWithExtension(_self: *@This(), _name: ?*String, _ext: ?*String) ?*URL {
        return objc.msgSend(_self, "URLForResource:withExtension:", ?*URL, .{ _name, _ext });
    }

    pub fn urlForResourceWithExtensionSubdirectory(_self: *@This(), _name: ?*String, _ext: ?*String, _subpath: ?*String) ?*URL {
        return objc.msgSend(_self, "URLForResource:withExtension:subdirectory:", ?*URL, .{ _name, _ext, _subpath });
    }

    pub fn urlForResourceWithExtensionSubdirectoryLocalization(
        _self: *@This(),
        _name: ?*String,
        _ext: ?*String,
        _subpath: ?*String,
        _localizationName: ?*String,
    ) ?*URL {
        return objc.msgSend(_self, "URLForResource:withExtension:subdirectory:localization:", ?*URL, .{
            _name,
            _ext,
            _subpath,
            _localizationName,
        });
    }

    pub fn urLsForResourcesWithExtensionSubdirectory(_self: *@This(), _ext: ?*String, _subpath: ?*String) ?*anyopaque {
        return objc.msgSend(_self, "URLsForResourcesWithExtension:subdirectory:", ?*anyopaque, .{ _ext, _subpath });
    }

    pub fn urLsForResourcesWithExtensionSubdirectoryLocalization(_self: *@This(), _ext: ?*String, _subpath: ?*String, _localizationName: ?*String) ?*anyopaque {
        return objc.msgSend(_self, "URLsForResourcesWithExtension:subdirectory:localization:", ?*anyopaque, .{ _ext, _subpath, _localizationName });
    }

    pub fn pathForResourceOfTypeInDirectory(_name: ?*String, _ext: ?*String, _bundlePath: ?*String) ?*String {
        return objc.msgSend(Internal.class(), "pathForResource:ofType:inDirectory:", ?*String, .{ _name, _ext, _bundlePath });
    }

    pub fn pathsForResourcesOfTypeInDirectory(_ext: ?*String, _bundlePath: ?*String) ?*anyopaque {
        return objc.msgSend(Internal.class(), "pathsForResourcesOfType:inDirectory:", ?*anyopaque, .{ _ext, _bundlePath });
    }

    pub fn pathForResourceOfType(_self: *@This(), _name: ?*String, _ext: ?*String) ?*String {
        return objc.msgSend(_self, "pathForResource:ofType:", ?*String, .{ _name, _ext });
    }

    pub fn pathForResourceOfTypeInDirectoryForLocalization(
        _self: *@This(),
        _name: ?*String,
        _ext: ?*String,
        _subpath: ?*String,
        _localizationName: ?*String,
    ) ?*String {
        return objc.msgSend(_self, "pathForResource:ofType:inDirectory:forLocalization:", ?*String, .{
            _name,
            _ext,
            _subpath,
            _localizationName,
        });
    }

    pub fn pathsForResourcesOfTypeInDirectoryForLocalization(_self: *@This(), _ext: ?*String, _subpath: ?*String, _localizationName: ?*String) ?*anyopaque {
        return objc.msgSend(_self, "pathsForResourcesOfType:inDirectory:forLocalization:", ?*anyopaque, .{ _ext, _subpath, _localizationName });
    }

    pub fn localizedStringForKeyValueTable(_self: *@This(), _key: ?*String, _value: ?*String, _tableName: ?*String) ?*String {
        return objc.msgSend(_self, "localizedStringForKey:value:table:", ?*String, .{ _key, _value, _tableName });
    }

    pub fn localizedAttributedStringForKeyValueTable(_self: *@This(), _key: ?*String, _value: ?*String, _tableName: ?*String) ?*AttributedString {
        return objc.msgSend(_self, "localizedAttributedStringForKey:value:table:", ?*AttributedString, .{ _key, _value, _tableName });
    }

    pub fn bundleIdentifier(_self: *@This()) ?*String {
        return objc.msgSend(_self, "bundleIdentifier", ?*String, .{});
    }

    pub fn infoDictionary(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "infoDictionary", ?*anyopaque, .{});
    }

    pub fn localizedInfoDictionary(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "localizedInfoDictionary", ?*anyopaque, .{});
    }

    pub fn objectForInfoDictionaryKey(_self: *@This(), _key: ?*String) ?objc.Id {
        return objc.msgSend(_self, "objectForInfoDictionaryKey:", ?objc.Id, .{_key});
    }

    pub fn classNamed(_self: *@This(), _className: ?*String) objc.Class {
        return objc.msgSend(_self, "classNamed:", objc.Class, .{_className});
    }

    pub fn principalClass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "principalClass", objc.Class, .{});
    }

    pub fn preferredLocalizations(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "preferredLocalizations", ?*anyopaque, .{});
    }

    pub fn localizations(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "localizations", ?*anyopaque, .{});
    }

    pub fn developmentLocalization(_self: *@This()) ?*String {
        return objc.msgSend(_self, "developmentLocalization", ?*String, .{});
    }

    pub fn preferredLocalizationsFromArray(_localizationsArray: ?*anyopaque) ?*anyopaque {
        return objc.msgSend(Internal.class(), "preferredLocalizationsFromArray:", ?*anyopaque, .{_localizationsArray});
    }

    pub fn preferredLocalizationsFromArrayForPreferences(_localizationsArray: ?*anyopaque, _preferencesArray: ?*anyopaque) ?*anyopaque {
        return objc.msgSend(Internal.class(), "preferredLocalizationsFromArray:forPreferences:", ?*anyopaque, .{ _localizationsArray, _preferencesArray });
    }

    pub fn executableArchitectures(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "executableArchitectures", ?*anyopaque, .{});
    }
};

/// https://developer.apple.com/documentation/Foundation/NSBundleResourceRequest?language=objc
pub const BundleResourceRequest = opaque {
    pub const Internal = objc.ExternClass("NSBundleResourceRequest", @This(), objc.NSObject, &.{ProgressReporting});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn progress(_self: *@This()) ?*Progress {
        return objc.msgSend(_self, "progress", ?*Progress, .{});
    }

    pub fn initWithTags(_self: *@This(), _tags: ?*anyopaque) *@This() {
        return objc.msgSend(_self, "initWithTags:", *@This(), .{_tags});
    }

    pub fn initWithTagsBundle(_self: *@This(), _tags: ?*anyopaque, _bundle: ?*Bundle) *@This() {
        return objc.msgSend(_self, "initWithTags:bundle:", *@This(), .{ _tags, _bundle });
    }

    pub fn beginAccessingResourcesWithCompletionHandler(_self: *@This(), _completionHandler: *const fn (?*Error) callconv(.C) void) void {
        return objc.msgSend(_self, "beginAccessingResourcesWithCompletionHandler:", void, .{_completionHandler});
    }

    pub fn conditionallyBeginAccessingResourcesWithCompletionHandler(_self: *@This(), _completionHandler: *const fn (objc.BOOL) callconv(.C) void) void {
        return objc.msgSend(_self, "conditionallyBeginAccessingResourcesWithCompletionHandler:", void, .{_completionHandler});
    }

    pub fn endAccessingResources(_self: *@This()) void {
        return objc.msgSend(_self, "endAccessingResources", void, .{});
    }

    pub fn loadingPriority(_self: *@This()) f64 {
        return objc.msgSend(_self, "loadingPriority", f64, .{});
    }

    pub fn setLoadingPriority(_self: *@This(), _loadingPriority: f64) void {
        return objc.msgSend(_self, "setLoadingPriority:", void, .{_loadingPriority});
    }

    pub fn tags(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "tags", ?*anyopaque, .{});
    }

    pub fn bundle(_self: *@This()) ?*Bundle {
        return objc.msgSend(_self, "bundle", ?*Bundle, .{});
    }
};

pub const anon101 = u32;
pub const anon101_NS_UnknownByteOrder: u32 = 0;
pub const anon101_NS_LittleEndian: u32 = 1;
pub const anon101_NS_BigEndian: u32 = 2;

pub const SwappedFloat = extern struct {
    v: u32,
};

pub const SwappedDouble = extern struct {
    v: u64,
};

pub const TimeInterval = f64;

/// https://developer.apple.com/documentation/Foundation/NSDate?language=objc
pub const Date = opaque {
    pub const Internal = objc.ExternClass("NSDate", @This(), objc.NSObject, &.{ Copying, SecureCoding });
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn supportsSecureCoding() objc.BOOL {
        return objc.msgSend(Internal.class(), "supportsSecureCoding", objc.BOOL, .{});
    }

    pub fn initWithTimeIntervalSinceReferenceDate(_self: *@This(), _ti: TimeInterval) *@This() {
        return objc.msgSend(_self, "initWithTimeIntervalSinceReferenceDate:", *@This(), .{_ti});
    }

    pub fn timeIntervalSinceReferenceDate(_self: *@This()) TimeInterval {
        return objc.msgSend(_self, "timeIntervalSinceReferenceDate", TimeInterval, .{});
    }
};

pub const CalendarIdentifier = ?*String;

pub const CalendarUnit = objc.NSUInteger;
pub const CalendarUnit_Era: objc.NSUInteger = 2;
pub const CalendarUnit_Year: objc.NSUInteger = 4;
pub const CalendarUnit_Month: objc.NSUInteger = 8;
pub const CalendarUnit_Day: objc.NSUInteger = 16;
pub const CalendarUnit_Hour: objc.NSUInteger = 32;
pub const CalendarUnit_Minute: objc.NSUInteger = 64;
pub const CalendarUnit_Second: objc.NSUInteger = 128;
pub const CalendarUnit_Weekday: objc.NSUInteger = 512;
pub const CalendarUnit_WeekdayOrdinal: objc.NSUInteger = 1024;
pub const CalendarUnit_Quarter: objc.NSUInteger = 2048;
pub const CalendarUnit_WeekOfMonth: objc.NSUInteger = 4096;
pub const CalendarUnit_WeekOfYear: objc.NSUInteger = 8192;
pub const CalendarUnit_YearForWeekOfYear: objc.NSUInteger = 16384;
pub const CalendarUnit_Nanosecond: objc.NSUInteger = 32768;
pub const CalendarUnit_DayOfYear: objc.NSUInteger = 65536;
pub const CalendarUnit_Calendar: objc.NSUInteger = 1048576;
pub const CalendarUnit_TimeZone: objc.NSUInteger = 2097152;
pub const CalendarUnit_EraCalendarUnit: objc.NSUInteger = 2;
pub const CalendarUnit_YearCalendarUnit: objc.NSUInteger = 4;
pub const CalendarUnit_MonthCalendarUnit: objc.NSUInteger = 8;
pub const CalendarUnit_DayCalendarUnit: objc.NSUInteger = 16;
pub const CalendarUnit_HourCalendarUnit: objc.NSUInteger = 32;
pub const CalendarUnit_MinuteCalendarUnit: objc.NSUInteger = 64;
pub const CalendarUnit_SecondCalendarUnit: objc.NSUInteger = 128;
pub const CalendarUnit_WeekCalendarUnit: objc.NSUInteger = 256;
pub const CalendarUnit_WeekdayCalendarUnit: objc.NSUInteger = 512;
pub const CalendarUnit_WeekdayOrdinalCalendarUnit: objc.NSUInteger = 1024;
pub const CalendarUnit_QuarterCalendarUnit: objc.NSUInteger = 2048;
pub const CalendarUnit_WeekOfMonthCalendarUnit: objc.NSUInteger = 4096;
pub const CalendarUnit_WeekOfYearCalendarUnit: objc.NSUInteger = 8192;
pub const CalendarUnit_YearForWeekOfYearCalendarUnit: objc.NSUInteger = 16384;
pub const CalendarUnit_CalendarUnit: objc.NSUInteger = 1048576;
pub const CalendarUnit_TimeZoneCalendarUnit: objc.NSUInteger = 2097152;

pub const CalendarOptions = objc.NSUInteger;
pub const CalendarOptions_WrapComponents: objc.NSUInteger = 1;
pub const CalendarOptions_MatchStrictly: objc.NSUInteger = 2;
pub const CalendarOptions_SearchBackwards: objc.NSUInteger = 4;
pub const CalendarOptions_MatchPreviousTimePreservingSmallerUnits: objc.NSUInteger = 256;
pub const CalendarOptions_MatchNextTimePreservingSmallerUnits: objc.NSUInteger = 512;
pub const CalendarOptions_MatchNextTime: objc.NSUInteger = 1024;
pub const CalendarOptions_MatchFirst: objc.NSUInteger = 4096;
pub const CalendarOptions_MatchLast: objc.NSUInteger = 8192;

pub const anon1011 = u32;
pub const anon1011_NSWrapCalendarComponents: u32 = 1;
pub const anon1011_registerComponentGlobal: u32 = 1;
pub const anon1011_registerComponentNoDuplicates: u32 = 2;
pub const anon1011_registerComponentAfterExisting: u32 = 4;
pub const anon1011_registerComponentAliasesOnly: u32 = 8;
pub const anon1011_TEC_MIBEnumDontCare: u32 = -1;

/// https://developer.apple.com/documentation/Foundation/NSCalendar?language=objc
pub const Calendar = opaque {
    pub const Internal = objc.ExternClass("NSCalendar", @This(), objc.NSObject, &.{ Copying, SecureCoding });
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn supportsSecureCoding() objc.BOOL {
        return objc.msgSend(Internal.class(), "supportsSecureCoding", objc.BOOL, .{});
    }

    pub fn calendarWithIdentifier(_calendarIdentifierConstant: CalendarIdentifier) ?*Calendar {
        return objc.msgSend(Internal.class(), "calendarWithIdentifier:", ?*Calendar, .{_calendarIdentifierConstant});
    }

    pub fn initWithCalendarIdentifier(_self: *@This(), _ident: CalendarIdentifier) ?objc.Id {
        return objc.msgSend(_self, "initWithCalendarIdentifier:", ?objc.Id, .{_ident});
    }

    pub fn minimumRangeOfUnit(_self: *@This(), _unit: CalendarUnit) Range {
        return objc.msgSend(_self, "minimumRangeOfUnit:", Range, .{_unit});
    }

    pub fn maximumRangeOfUnit(_self: *@This(), _unit: CalendarUnit) Range {
        return objc.msgSend(_self, "maximumRangeOfUnit:", Range, .{_unit});
    }

    pub fn rangeOfUnitInUnitForDate(_self: *@This(), _smaller: CalendarUnit, _larger: CalendarUnit, _date: ?*Date) Range {
        return objc.msgSend(_self, "rangeOfUnit:inUnit:forDate:", Range, .{ _smaller, _larger, _date });
    }

    pub fn ordinalityOfUnitInUnitForDate(_self: *@This(), _smaller: CalendarUnit, _larger: CalendarUnit, _date: ?*Date) objc.NSUInteger {
        return objc.msgSend(_self, "ordinalityOfUnit:inUnit:forDate:", objc.NSUInteger, .{ _smaller, _larger, _date });
    }

    pub fn rangeOfUnitStartDateIntervalForDate(
        _self: *@This(),
        _unit: CalendarUnit,
        _datep: ?*?*Date,
        _tip: ?*TimeInterval,
        _date: ?*Date,
    ) objc.BOOL {
        return objc.msgSend(_self, "rangeOfUnit:startDate:interval:forDate:", objc.BOOL, .{
            _unit,
            _datep,
            _tip,
            _date,
        });
    }

    pub fn dateFromComponents(_self: *@This(), _comps: ?*DateComponents) ?*Date {
        return objc.msgSend(_self, "dateFromComponents:", ?*Date, .{_comps});
    }

    pub fn componentsFromDate(_self: *@This(), _unitFlags: CalendarUnit, _date: ?*Date) ?*DateComponents {
        return objc.msgSend(_self, "components:fromDate:", ?*DateComponents, .{ _unitFlags, _date });
    }

    pub fn dateByAddingComponentsToDateOptions(_self: *@This(), _comps: ?*DateComponents, _date: ?*Date, _opts: CalendarOptions) ?*Date {
        return objc.msgSend(_self, "dateByAddingComponents:toDate:options:", ?*Date, .{ _comps, _date, _opts });
    }

    pub fn componentsFromDateToDateOptions(
        _self: *@This(),
        _unitFlags: CalendarUnit,
        _startingDate: ?*Date,
        _resultDate: ?*Date,
        _opts: CalendarOptions,
    ) ?*DateComponents {
        return objc.msgSend(_self, "components:fromDate:toDate:options:", ?*DateComponents, .{
            _unitFlags,
            _startingDate,
            _resultDate,
            _opts,
        });
    }

    pub fn getEraYearMonthDayFromDate(
        _self: *@This(),
        _eraValuePointer: ?*objc.NSInteger,
        _yearValuePointer: ?*objc.NSInteger,
        _monthValuePointer: ?*objc.NSInteger,
        _dayValuePointer: ?*objc.NSInteger,
        _date: ?*Date,
    ) void {
        return objc.msgSend(_self, "getEra:year:month:day:fromDate:", void, .{
            _eraValuePointer,
            _yearValuePointer,
            _monthValuePointer,
            _dayValuePointer,
            _date,
        });
    }

    pub fn getEraYearForWeekOfYearWeekOfYearWeekdayFromDate(
        _self: *@This(),
        _eraValuePointer: ?*objc.NSInteger,
        _yearValuePointer: ?*objc.NSInteger,
        _weekValuePointer: ?*objc.NSInteger,
        _weekdayValuePointer: ?*objc.NSInteger,
        _date: ?*Date,
    ) void {
        return objc.msgSend(_self, "getEra:yearForWeekOfYear:weekOfYear:weekday:fromDate:", void, .{
            _eraValuePointer,
            _yearValuePointer,
            _weekValuePointer,
            _weekdayValuePointer,
            _date,
        });
    }

    pub fn getHourMinuteSecondNanosecondFromDate(
        _self: *@This(),
        _hourValuePointer: ?*objc.NSInteger,
        _minuteValuePointer: ?*objc.NSInteger,
        _secondValuePointer: ?*objc.NSInteger,
        _nanosecondValuePointer: ?*objc.NSInteger,
        _date: ?*Date,
    ) void {
        return objc.msgSend(_self, "getHour:minute:second:nanosecond:fromDate:", void, .{
            _hourValuePointer,
            _minuteValuePointer,
            _secondValuePointer,
            _nanosecondValuePointer,
            _date,
        });
    }

    pub fn componentFromDate(_self: *@This(), _unit: CalendarUnit, _date: ?*Date) objc.NSInteger {
        return objc.msgSend(_self, "component:fromDate:", objc.NSInteger, .{ _unit, _date });
    }

    pub fn dateWithEraYearMonthDayHourMinuteSecondNanosecond(
        _self: *@This(),
        _eraValue: objc.NSInteger,
        _yearValue: objc.NSInteger,
        _monthValue: objc.NSInteger,
        _dayValue: objc.NSInteger,
        _hourValue: objc.NSInteger,
        _minuteValue: objc.NSInteger,
        _secondValue: objc.NSInteger,
        _nanosecondValue: objc.NSInteger,
    ) ?*Date {
        return objc.msgSend(_self, "dateWithEra:year:month:day:hour:minute:second:nanosecond:", ?*Date, .{
            _eraValue,
            _yearValue,
            _monthValue,
            _dayValue,
            _hourValue,
            _minuteValue,
            _secondValue,
            _nanosecondValue,
        });
    }

    pub fn dateWithEraYearForWeekOfYearWeekOfYearWeekdayHourMinuteSecondNanosecond(
        _self: *@This(),
        _eraValue: objc.NSInteger,
        _yearValue: objc.NSInteger,
        _weekValue: objc.NSInteger,
        _weekdayValue: objc.NSInteger,
        _hourValue: objc.NSInteger,
        _minuteValue: objc.NSInteger,
        _secondValue: objc.NSInteger,
        _nanosecondValue: objc.NSInteger,
    ) ?*Date {
        return objc.msgSend(_self, "dateWithEra:yearForWeekOfYear:weekOfYear:weekday:hour:minute:second:nanosecond:", ?*Date, .{
            _eraValue,
            _yearValue,
            _weekValue,
            _weekdayValue,
            _hourValue,
            _minuteValue,
            _secondValue,
            _nanosecondValue,
        });
    }

    pub fn startOfDayForDate(_self: *@This(), _date: ?*Date) ?*Date {
        return objc.msgSend(_self, "startOfDayForDate:", ?*Date, .{_date});
    }

    pub fn componentsInTimeZoneFromDate(_self: *@This(), _timezone: ?*TimeZone, _date: ?*Date) ?*DateComponents {
        return objc.msgSend(_self, "componentsInTimeZone:fromDate:", ?*DateComponents, .{ _timezone, _date });
    }

    pub fn compareDateToDateToUnitGranularity(_self: *@This(), _date1: ?*Date, _date2: ?*Date, _unit: CalendarUnit) ComparisonResult {
        return objc.msgSend(_self, "compareDate:toDate:toUnitGranularity:", ComparisonResult, .{ _date1, _date2, _unit });
    }

    pub fn isDateEqualToDateToUnitGranularity(_self: *@This(), _date1: ?*Date, _date2: ?*Date, _unit: CalendarUnit) objc.BOOL {
        return objc.msgSend(_self, "isDate:equalToDate:toUnitGranularity:", objc.BOOL, .{ _date1, _date2, _unit });
    }

    pub fn isDateInSameDayAsDate(_self: *@This(), _date1: ?*Date, _date2: ?*Date) objc.BOOL {
        return objc.msgSend(_self, "isDate:inSameDayAsDate:", objc.BOOL, .{ _date1, _date2 });
    }

    pub fn isDateInToday(_self: *@This(), _date: ?*Date) objc.BOOL {
        return objc.msgSend(_self, "isDateInToday:", objc.BOOL, .{_date});
    }

    pub fn isDateInYesterday(_self: *@This(), _date: ?*Date) objc.BOOL {
        return objc.msgSend(_self, "isDateInYesterday:", objc.BOOL, .{_date});
    }

    pub fn isDateInTomorrow(_self: *@This(), _date: ?*Date) objc.BOOL {
        return objc.msgSend(_self, "isDateInTomorrow:", objc.BOOL, .{_date});
    }

    pub fn isDateInWeekend(_self: *@This(), _date: ?*Date) objc.BOOL {
        return objc.msgSend(_self, "isDateInWeekend:", objc.BOOL, .{_date});
    }

    pub fn rangeOfWeekendStartDateIntervalContainingDate(_self: *@This(), _datep: ?*?*Date, _tip: ?*TimeInterval, _date: ?*Date) objc.BOOL {
        return objc.msgSend(_self, "rangeOfWeekendStartDate:interval:containingDate:", objc.BOOL, .{ _datep, _tip, _date });
    }

    pub fn nextWeekendStartDateIntervalOptionsAfterDate(
        _self: *@This(),
        _datep: ?*?*Date,
        _tip: ?*TimeInterval,
        _options: CalendarOptions,
        _date: ?*Date,
    ) objc.BOOL {
        return objc.msgSend(_self, "nextWeekendStartDate:interval:options:afterDate:", objc.BOOL, .{
            _datep,
            _tip,
            _options,
            _date,
        });
    }

    pub fn componentsFromDateComponentsToDateComponentsOptions(
        _self: *@This(),
        _unitFlags: CalendarUnit,
        _startingDateComp: ?*DateComponents,
        _resultDateComp: ?*DateComponents,
        _options: CalendarOptions,
    ) ?*DateComponents {
        return objc.msgSend(_self, "components:fromDateComponents:toDateComponents:options:", ?*DateComponents, .{
            _unitFlags,
            _startingDateComp,
            _resultDateComp,
            _options,
        });
    }

    pub fn dateByAddingUnitValueToDateOptions(
        _self: *@This(),
        _unit: CalendarUnit,
        _value: objc.NSInteger,
        _date: ?*Date,
        _options: CalendarOptions,
    ) ?*Date {
        return objc.msgSend(_self, "dateByAddingUnit:value:toDate:options:", ?*Date, .{
            _unit,
            _value,
            _date,
            _options,
        });
    }

    pub fn enumerateDatesStartingAfterDateMatchingComponentsOptionsUsingBlock(
        _self: *@This(),
        _start: ?*Date,
        _comps: ?*DateComponents,
        _opts: CalendarOptions,
        _block: *const fn (?*Date, objc.BOOL, ?*objc.BOOL) callconv(.C) void,
    ) void {
        return objc.msgSend(_self, "enumerateDatesStartingAfterDate:matchingComponents:options:usingBlock:", void, .{
            _start,
            _comps,
            _opts,
            _block,
        });
    }

    pub fn nextDateAfterDateMatchingComponentsOptions(_self: *@This(), _date: ?*Date, _comps: ?*DateComponents, _options: CalendarOptions) ?*Date {
        return objc.msgSend(_self, "nextDateAfterDate:matchingComponents:options:", ?*Date, .{ _date, _comps, _options });
    }

    pub fn nextDateAfterDateMatchingUnitValueOptions(
        _self: *@This(),
        _date: ?*Date,
        _unit: CalendarUnit,
        _value: objc.NSInteger,
        _options: CalendarOptions,
    ) ?*Date {
        return objc.msgSend(_self, "nextDateAfterDate:matchingUnit:value:options:", ?*Date, .{
            _date,
            _unit,
            _value,
            _options,
        });
    }

    pub fn nextDateAfterDateMatchingHourMinuteSecondOptions(
        _self: *@This(),
        _date: ?*Date,
        _hourValue: objc.NSInteger,
        _minuteValue: objc.NSInteger,
        _secondValue: objc.NSInteger,
        _options: CalendarOptions,
    ) ?*Date {
        return objc.msgSend(_self, "nextDateAfterDate:matchingHour:minute:second:options:", ?*Date, .{
            _date,
            _hourValue,
            _minuteValue,
            _secondValue,
            _options,
        });
    }

    pub fn dateBySettingUnitValueOfDateOptions(
        _self: *@This(),
        _unit: CalendarUnit,
        _v: objc.NSInteger,
        _date: ?*Date,
        _opts: CalendarOptions,
    ) ?*Date {
        return objc.msgSend(_self, "dateBySettingUnit:value:ofDate:options:", ?*Date, .{
            _unit,
            _v,
            _date,
            _opts,
        });
    }

    pub fn dateBySettingHourMinuteSecondOfDateOptions(
        _self: *@This(),
        _h: objc.NSInteger,
        _m: objc.NSInteger,
        _s: objc.NSInteger,
        _date: ?*Date,
        _opts: CalendarOptions,
    ) ?*Date {
        return objc.msgSend(_self, "dateBySettingHour:minute:second:ofDate:options:", ?*Date, .{
            _h,
            _m,
            _s,
            _date,
            _opts,
        });
    }

    pub fn dateMatchesComponents(_self: *@This(), _date: ?*Date, _components: ?*DateComponents) objc.BOOL {
        return objc.msgSend(_self, "date:matchesComponents:", objc.BOOL, .{ _date, _components });
    }

    pub fn currentCalendar() ?*Calendar {
        return objc.msgSend(Internal.class(), "currentCalendar", ?*Calendar, .{});
    }

    pub fn autoupdatingCurrentCalendar() ?*Calendar {
        return objc.msgSend(Internal.class(), "autoupdatingCurrentCalendar", ?*Calendar, .{});
    }

    pub fn calendarIdentifier(_self: *@This()) CalendarIdentifier {
        return objc.msgSend(_self, "calendarIdentifier", CalendarIdentifier, .{});
    }

    pub fn locale(_self: *@This()) ?*Locale {
        return objc.msgSend(_self, "locale", ?*Locale, .{});
    }

    pub fn setLocale(_self: *@This(), _locale: ?*Locale) void {
        return objc.msgSend(_self, "setLocale:", void, .{_locale});
    }

    pub fn timeZone(_self: *@This()) ?*TimeZone {
        return objc.msgSend(_self, "timeZone", ?*TimeZone, .{});
    }

    pub fn setTimeZone(_self: *@This(), _timeZone: ?*TimeZone) void {
        return objc.msgSend(_self, "setTimeZone:", void, .{_timeZone});
    }

    pub fn firstWeekday(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "firstWeekday", objc.NSUInteger, .{});
    }

    pub fn setFirstWeekday(_self: *@This(), _firstWeekday: objc.NSUInteger) void {
        return objc.msgSend(_self, "setFirstWeekday:", void, .{_firstWeekday});
    }

    pub fn minimumDaysInFirstWeek(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "minimumDaysInFirstWeek", objc.NSUInteger, .{});
    }

    pub fn setMinimumDaysInFirstWeek(_self: *@This(), _minimumDaysInFirstWeek: objc.NSUInteger) void {
        return objc.msgSend(_self, "setMinimumDaysInFirstWeek:", void, .{_minimumDaysInFirstWeek});
    }

    pub fn eraSymbols(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "eraSymbols", ?*anyopaque, .{});
    }

    pub fn longEraSymbols(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "longEraSymbols", ?*anyopaque, .{});
    }

    pub fn monthSymbols(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "monthSymbols", ?*anyopaque, .{});
    }

    pub fn shortMonthSymbols(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "shortMonthSymbols", ?*anyopaque, .{});
    }

    pub fn veryShortMonthSymbols(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "veryShortMonthSymbols", ?*anyopaque, .{});
    }

    pub fn standaloneMonthSymbols(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "standaloneMonthSymbols", ?*anyopaque, .{});
    }

    pub fn shortStandaloneMonthSymbols(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "shortStandaloneMonthSymbols", ?*anyopaque, .{});
    }

    pub fn veryShortStandaloneMonthSymbols(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "veryShortStandaloneMonthSymbols", ?*anyopaque, .{});
    }

    pub fn weekdaySymbols(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "weekdaySymbols", ?*anyopaque, .{});
    }

    pub fn shortWeekdaySymbols(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "shortWeekdaySymbols", ?*anyopaque, .{});
    }

    pub fn veryShortWeekdaySymbols(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "veryShortWeekdaySymbols", ?*anyopaque, .{});
    }

    pub fn standaloneWeekdaySymbols(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "standaloneWeekdaySymbols", ?*anyopaque, .{});
    }

    pub fn shortStandaloneWeekdaySymbols(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "shortStandaloneWeekdaySymbols", ?*anyopaque, .{});
    }

    pub fn veryShortStandaloneWeekdaySymbols(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "veryShortStandaloneWeekdaySymbols", ?*anyopaque, .{});
    }

    pub fn quarterSymbols(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "quarterSymbols", ?*anyopaque, .{});
    }

    pub fn shortQuarterSymbols(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "shortQuarterSymbols", ?*anyopaque, .{});
    }

    pub fn standaloneQuarterSymbols(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "standaloneQuarterSymbols", ?*anyopaque, .{});
    }

    pub fn shortStandaloneQuarterSymbols(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "shortStandaloneQuarterSymbols", ?*anyopaque, .{});
    }

    pub fn amSymbol(_self: *@This()) ?*String {
        return objc.msgSend(_self, "AMSymbol", ?*String, .{});
    }

    pub fn pmSymbol(_self: *@This()) ?*String {
        return objc.msgSend(_self, "PMSymbol", ?*String, .{});
    }
};

pub const anon4111 = objc.NSInteger;
pub const anon4111_NSDateComponentUndefined: objc.NSInteger = 9223372036854775807;
pub const anon4111_NSUndefinedDateComponent: objc.NSInteger = 9223372036854775807;

/// https://developer.apple.com/documentation/Foundation/NSDateComponents?language=objc
pub const DateComponents = opaque {
    pub const Internal = objc.ExternClass("NSDateComponents", @This(), objc.NSObject, &.{ Copying, SecureCoding });
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn supportsSecureCoding() objc.BOOL {
        return objc.msgSend(Internal.class(), "supportsSecureCoding", objc.BOOL, .{});
    }

    pub fn week(_self: *@This()) objc.NSInteger {
        return objc.msgSend(_self, "week", objc.NSInteger, .{});
    }

    pub fn setWeek(_self: *@This(), _v: objc.NSInteger) void {
        return objc.msgSend(_self, "setWeek:", void, .{_v});
    }

    pub fn setValueForComponent(_self: *@This(), _value: objc.NSInteger, _unit: CalendarUnit) void {
        return objc.msgSend(_self, "setValue:forComponent:", void, .{ _value, _unit });
    }

    pub fn valueForComponent(_self: *@This(), _unit: CalendarUnit) objc.NSInteger {
        return objc.msgSend(_self, "valueForComponent:", objc.NSInteger, .{_unit});
    }

    pub fn isValidDateInCalendar(_self: *@This(), _calendar: ?*Calendar) objc.BOOL {
        return objc.msgSend(_self, "isValidDateInCalendar:", objc.BOOL, .{_calendar});
    }

    pub fn calendar(_self: *@This()) ?*Calendar {
        return objc.msgSend(_self, "calendar", ?*Calendar, .{});
    }

    pub fn setCalendar(_self: *@This(), _calendar: ?*Calendar) void {
        return objc.msgSend(_self, "setCalendar:", void, .{_calendar});
    }

    pub fn timeZone(_self: *@This()) ?*TimeZone {
        return objc.msgSend(_self, "timeZone", ?*TimeZone, .{});
    }

    pub fn setTimeZone(_self: *@This(), _timeZone: ?*TimeZone) void {
        return objc.msgSend(_self, "setTimeZone:", void, .{_timeZone});
    }

    pub fn era(_self: *@This()) objc.NSInteger {
        return objc.msgSend(_self, "era", objc.NSInteger, .{});
    }

    pub fn setEra(_self: *@This(), _era: objc.NSInteger) void {
        return objc.msgSend(_self, "setEra:", void, .{_era});
    }

    pub fn year(_self: *@This()) objc.NSInteger {
        return objc.msgSend(_self, "year", objc.NSInteger, .{});
    }

    pub fn setYear(_self: *@This(), _year: objc.NSInteger) void {
        return objc.msgSend(_self, "setYear:", void, .{_year});
    }

    pub fn month(_self: *@This()) objc.NSInteger {
        return objc.msgSend(_self, "month", objc.NSInteger, .{});
    }

    pub fn setMonth(_self: *@This(), _month: objc.NSInteger) void {
        return objc.msgSend(_self, "setMonth:", void, .{_month});
    }

    pub fn day(_self: *@This()) objc.NSInteger {
        return objc.msgSend(_self, "day", objc.NSInteger, .{});
    }

    pub fn setDay(_self: *@This(), _day: objc.NSInteger) void {
        return objc.msgSend(_self, "setDay:", void, .{_day});
    }

    pub fn hour(_self: *@This()) objc.NSInteger {
        return objc.msgSend(_self, "hour", objc.NSInteger, .{});
    }

    pub fn setHour(_self: *@This(), _hour: objc.NSInteger) void {
        return objc.msgSend(_self, "setHour:", void, .{_hour});
    }

    pub fn minute(_self: *@This()) objc.NSInteger {
        return objc.msgSend(_self, "minute", objc.NSInteger, .{});
    }

    pub fn setMinute(_self: *@This(), _minute: objc.NSInteger) void {
        return objc.msgSend(_self, "setMinute:", void, .{_minute});
    }

    pub fn second(_self: *@This()) objc.NSInteger {
        return objc.msgSend(_self, "second", objc.NSInteger, .{});
    }

    pub fn setSecond(_self: *@This(), _second: objc.NSInteger) void {
        return objc.msgSend(_self, "setSecond:", void, .{_second});
    }

    pub fn nanosecond(_self: *@This()) objc.NSInteger {
        return objc.msgSend(_self, "nanosecond", objc.NSInteger, .{});
    }

    pub fn setNanosecond(_self: *@This(), _nanosecond: objc.NSInteger) void {
        return objc.msgSend(_self, "setNanosecond:", void, .{_nanosecond});
    }

    pub fn weekday(_self: *@This()) objc.NSInteger {
        return objc.msgSend(_self, "weekday", objc.NSInteger, .{});
    }

    pub fn setWeekday(_self: *@This(), _weekday: objc.NSInteger) void {
        return objc.msgSend(_self, "setWeekday:", void, .{_weekday});
    }

    pub fn weekdayOrdinal(_self: *@This()) objc.NSInteger {
        return objc.msgSend(_self, "weekdayOrdinal", objc.NSInteger, .{});
    }

    pub fn setWeekdayOrdinal(_self: *@This(), _weekdayOrdinal: objc.NSInteger) void {
        return objc.msgSend(_self, "setWeekdayOrdinal:", void, .{_weekdayOrdinal});
    }

    pub fn quarter(_self: *@This()) objc.NSInteger {
        return objc.msgSend(_self, "quarter", objc.NSInteger, .{});
    }

    pub fn setQuarter(_self: *@This(), _quarter: objc.NSInteger) void {
        return objc.msgSend(_self, "setQuarter:", void, .{_quarter});
    }

    pub fn weekOfMonth(_self: *@This()) objc.NSInteger {
        return objc.msgSend(_self, "weekOfMonth", objc.NSInteger, .{});
    }

    pub fn setWeekOfMonth(_self: *@This(), _weekOfMonth: objc.NSInteger) void {
        return objc.msgSend(_self, "setWeekOfMonth:", void, .{_weekOfMonth});
    }

    pub fn weekOfYear(_self: *@This()) objc.NSInteger {
        return objc.msgSend(_self, "weekOfYear", objc.NSInteger, .{});
    }

    pub fn setWeekOfYear(_self: *@This(), _weekOfYear: objc.NSInteger) void {
        return objc.msgSend(_self, "setWeekOfYear:", void, .{_weekOfYear});
    }

    pub fn yearForWeekOfYear(_self: *@This()) objc.NSInteger {
        return objc.msgSend(_self, "yearForWeekOfYear", objc.NSInteger, .{});
    }

    pub fn setYearForWeekOfYear(_self: *@This(), _yearForWeekOfYear: objc.NSInteger) void {
        return objc.msgSend(_self, "setYearForWeekOfYear:", void, .{_yearForWeekOfYear});
    }

    pub fn dayOfYear(_self: *@This()) objc.NSInteger {
        return objc.msgSend(_self, "dayOfYear", objc.NSInteger, .{});
    }

    pub fn setDayOfYear(_self: *@This(), _dayOfYear: objc.NSInteger) void {
        return objc.msgSend(_self, "setDayOfYear:", void, .{_dayOfYear});
    }

    pub fn isLeapMonth(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isLeapMonth", objc.BOOL, .{});
    }

    pub fn setLeapMonth(_self: *@This(), _leapMonth: objc.BOOL) void {
        return objc.msgSend(_self, "setLeapMonth:", void, .{_leapMonth});
    }

    pub fn date(_self: *@This()) ?*Date {
        return objc.msgSend(_self, "date", ?*Date, .{});
    }

    pub fn isValidDate(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isValidDate", objc.BOOL, .{});
    }
};

pub const anon141 = u32;
pub const anon141_NSOpenStepUnicodeReservedBase: u32 = 62464;

/// https://developer.apple.com/documentation/Foundation/NSCharacterSet?language=objc
pub const CharacterSet = opaque {
    pub const Internal = objc.ExternClass("NSCharacterSet", @This(), objc.NSObject, &.{ Copying, MutableCopying, SecureCoding });
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn supportsSecureCoding() objc.BOOL {
        return objc.msgSend(Internal.class(), "supportsSecureCoding", objc.BOOL, .{});
    }

    pub fn characterSetWithRange(_aRange: Range) ?*CharacterSet {
        return objc.msgSend(Internal.class(), "characterSetWithRange:", ?*CharacterSet, .{_aRange});
    }

    pub fn characterSetWithCharactersInString(_aString: ?*String) ?*CharacterSet {
        return objc.msgSend(Internal.class(), "characterSetWithCharactersInString:", ?*CharacterSet, .{_aString});
    }

    pub fn characterSetWithBitmapRepresentation(_data: ?*Data) ?*CharacterSet {
        return objc.msgSend(Internal.class(), "characterSetWithBitmapRepresentation:", ?*CharacterSet, .{_data});
    }

    pub fn characterSetWithContentsOfFile(_fName: ?*String) ?*CharacterSet {
        return objc.msgSend(Internal.class(), "characterSetWithContentsOfFile:", ?*CharacterSet, .{_fName});
    }

    pub fn characterIsMember(_self: *@This(), _aCharacter: unichar) objc.BOOL {
        return objc.msgSend(_self, "characterIsMember:", objc.BOOL, .{_aCharacter});
    }

    pub fn longCharacterIsMember(_self: *@This(), _theLongChar: objc.UTF32Char) objc.BOOL {
        return objc.msgSend(_self, "longCharacterIsMember:", objc.BOOL, .{_theLongChar});
    }

    pub fn isSupersetOfSet(_self: *@This(), _theOtherSet: ?*CharacterSet) objc.BOOL {
        return objc.msgSend(_self, "isSupersetOfSet:", objc.BOOL, .{_theOtherSet});
    }

    pub fn hasMemberInPlane(_self: *@This(), _thePlane: objc.uint8_t) objc.BOOL {
        return objc.msgSend(_self, "hasMemberInPlane:", objc.BOOL, .{_thePlane});
    }

    pub fn controlCharacterSet() ?*CharacterSet {
        return objc.msgSend(Internal.class(), "controlCharacterSet", ?*CharacterSet, .{});
    }

    pub fn whitespaceCharacterSet() ?*CharacterSet {
        return objc.msgSend(Internal.class(), "whitespaceCharacterSet", ?*CharacterSet, .{});
    }

    pub fn whitespaceAndNewlineCharacterSet() ?*CharacterSet {
        return objc.msgSend(Internal.class(), "whitespaceAndNewlineCharacterSet", ?*CharacterSet, .{});
    }

    pub fn decimalDigitCharacterSet() ?*CharacterSet {
        return objc.msgSend(Internal.class(), "decimalDigitCharacterSet", ?*CharacterSet, .{});
    }

    pub fn letterCharacterSet() ?*CharacterSet {
        return objc.msgSend(Internal.class(), "letterCharacterSet", ?*CharacterSet, .{});
    }

    pub fn lowercaseLetterCharacterSet() ?*CharacterSet {
        return objc.msgSend(Internal.class(), "lowercaseLetterCharacterSet", ?*CharacterSet, .{});
    }

    pub fn uppercaseLetterCharacterSet() ?*CharacterSet {
        return objc.msgSend(Internal.class(), "uppercaseLetterCharacterSet", ?*CharacterSet, .{});
    }

    pub fn nonBaseCharacterSet() ?*CharacterSet {
        return objc.msgSend(Internal.class(), "nonBaseCharacterSet", ?*CharacterSet, .{});
    }

    pub fn alphanumericCharacterSet() ?*CharacterSet {
        return objc.msgSend(Internal.class(), "alphanumericCharacterSet", ?*CharacterSet, .{});
    }

    pub fn decomposableCharacterSet() ?*CharacterSet {
        return objc.msgSend(Internal.class(), "decomposableCharacterSet", ?*CharacterSet, .{});
    }

    pub fn illegalCharacterSet() ?*CharacterSet {
        return objc.msgSend(Internal.class(), "illegalCharacterSet", ?*CharacterSet, .{});
    }

    pub fn punctuationCharacterSet() ?*CharacterSet {
        return objc.msgSend(Internal.class(), "punctuationCharacterSet", ?*CharacterSet, .{});
    }

    pub fn capitalizedLetterCharacterSet() ?*CharacterSet {
        return objc.msgSend(Internal.class(), "capitalizedLetterCharacterSet", ?*CharacterSet, .{});
    }

    pub fn symbolCharacterSet() ?*CharacterSet {
        return objc.msgSend(Internal.class(), "symbolCharacterSet", ?*CharacterSet, .{});
    }

    pub fn newlineCharacterSet() ?*CharacterSet {
        return objc.msgSend(Internal.class(), "newlineCharacterSet", ?*CharacterSet, .{});
    }

    pub fn bitmapRepresentation(_self: *@This()) ?*Data {
        return objc.msgSend(_self, "bitmapRepresentation", ?*Data, .{});
    }

    pub fn invertedSet(_self: *@This()) ?*CharacterSet {
        return objc.msgSend(_self, "invertedSet", ?*CharacterSet, .{});
    }
};

/// https://developer.apple.com/documentation/Foundation/NSMutableCharacterSet?language=objc
pub const MutableCharacterSet = opaque {
    pub const Internal = objc.ExternClass("NSMutableCharacterSet", @This(), CharacterSet, &.{ Copying, MutableCopying, SecureCoding });
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn supportsSecureCoding() objc.BOOL {
        return objc.msgSend(Internal.class(), "supportsSecureCoding", objc.BOOL, .{});
    }

    pub fn characterSetWithRange(_aRange: Range) ?*CharacterSet {
        return objc.msgSend(Internal.class(), "characterSetWithRange:", ?*CharacterSet, .{_aRange});
    }

    pub fn characterSetWithCharactersInString(_aString: ?*String) ?*CharacterSet {
        return objc.msgSend(Internal.class(), "characterSetWithCharactersInString:", ?*CharacterSet, .{_aString});
    }

    pub fn characterSetWithBitmapRepresentation(_data: ?*Data) ?*CharacterSet {
        return objc.msgSend(Internal.class(), "characterSetWithBitmapRepresentation:", ?*CharacterSet, .{_data});
    }

    pub fn characterSetWithContentsOfFile(_fName: ?*String) ?*CharacterSet {
        return objc.msgSend(Internal.class(), "characterSetWithContentsOfFile:", ?*CharacterSet, .{_fName});
    }

    pub fn characterIsMember(_self: *@This(), _aCharacter: unichar) objc.BOOL {
        return objc.msgSend(_self, "characterIsMember:", objc.BOOL, .{_aCharacter});
    }

    pub fn longCharacterIsMember(_self: *@This(), _theLongChar: objc.UTF32Char) objc.BOOL {
        return objc.msgSend(_self, "longCharacterIsMember:", objc.BOOL, .{_theLongChar});
    }

    pub fn isSupersetOfSet(_self: *@This(), _theOtherSet: ?*CharacterSet) objc.BOOL {
        return objc.msgSend(_self, "isSupersetOfSet:", objc.BOOL, .{_theOtherSet});
    }

    pub fn hasMemberInPlane(_self: *@This(), _thePlane: objc.uint8_t) objc.BOOL {
        return objc.msgSend(_self, "hasMemberInPlane:", objc.BOOL, .{_thePlane});
    }

    pub fn controlCharacterSet() ?*CharacterSet {
        return objc.msgSend(Internal.class(), "controlCharacterSet", ?*CharacterSet, .{});
    }

    pub fn whitespaceCharacterSet() ?*CharacterSet {
        return objc.msgSend(Internal.class(), "whitespaceCharacterSet", ?*CharacterSet, .{});
    }

    pub fn whitespaceAndNewlineCharacterSet() ?*CharacterSet {
        return objc.msgSend(Internal.class(), "whitespaceAndNewlineCharacterSet", ?*CharacterSet, .{});
    }

    pub fn decimalDigitCharacterSet() ?*CharacterSet {
        return objc.msgSend(Internal.class(), "decimalDigitCharacterSet", ?*CharacterSet, .{});
    }

    pub fn letterCharacterSet() ?*CharacterSet {
        return objc.msgSend(Internal.class(), "letterCharacterSet", ?*CharacterSet, .{});
    }

    pub fn lowercaseLetterCharacterSet() ?*CharacterSet {
        return objc.msgSend(Internal.class(), "lowercaseLetterCharacterSet", ?*CharacterSet, .{});
    }

    pub fn uppercaseLetterCharacterSet() ?*CharacterSet {
        return objc.msgSend(Internal.class(), "uppercaseLetterCharacterSet", ?*CharacterSet, .{});
    }

    pub fn nonBaseCharacterSet() ?*CharacterSet {
        return objc.msgSend(Internal.class(), "nonBaseCharacterSet", ?*CharacterSet, .{});
    }

    pub fn alphanumericCharacterSet() ?*CharacterSet {
        return objc.msgSend(Internal.class(), "alphanumericCharacterSet", ?*CharacterSet, .{});
    }

    pub fn decomposableCharacterSet() ?*CharacterSet {
        return objc.msgSend(Internal.class(), "decomposableCharacterSet", ?*CharacterSet, .{});
    }

    pub fn illegalCharacterSet() ?*CharacterSet {
        return objc.msgSend(Internal.class(), "illegalCharacterSet", ?*CharacterSet, .{});
    }

    pub fn punctuationCharacterSet() ?*CharacterSet {
        return objc.msgSend(Internal.class(), "punctuationCharacterSet", ?*CharacterSet, .{});
    }

    pub fn capitalizedLetterCharacterSet() ?*CharacterSet {
        return objc.msgSend(Internal.class(), "capitalizedLetterCharacterSet", ?*CharacterSet, .{});
    }

    pub fn symbolCharacterSet() ?*CharacterSet {
        return objc.msgSend(Internal.class(), "symbolCharacterSet", ?*CharacterSet, .{});
    }

    pub fn newlineCharacterSet() ?*CharacterSet {
        return objc.msgSend(Internal.class(), "newlineCharacterSet", ?*CharacterSet, .{});
    }

    pub fn bitmapRepresentation(_self: *@This()) ?*Data {
        return objc.msgSend(_self, "bitmapRepresentation", ?*Data, .{});
    }

    pub fn invertedSet(_self: *@This()) ?*CharacterSet {
        return objc.msgSend(_self, "invertedSet", ?*CharacterSet, .{});
    }

    pub fn addCharactersInRange(_self: *@This(), _aRange: Range) void {
        return objc.msgSend(_self, "addCharactersInRange:", void, .{_aRange});
    }

    pub fn removeCharactersInRange(_self: *@This(), _aRange: Range) void {
        return objc.msgSend(_self, "removeCharactersInRange:", void, .{_aRange});
    }

    pub fn addCharactersInString(_self: *@This(), _aString: ?*String) void {
        return objc.msgSend(_self, "addCharactersInString:", void, .{_aString});
    }

    pub fn removeCharactersInString(_self: *@This(), _aString: ?*String) void {
        return objc.msgSend(_self, "removeCharactersInString:", void, .{_aString});
    }

    pub fn formUnionWithCharacterSet(_self: *@This(), _otherSet: ?*CharacterSet) void {
        return objc.msgSend(_self, "formUnionWithCharacterSet:", void, .{_otherSet});
    }

    pub fn formIntersectionWithCharacterSet(_self: *@This(), _otherSet: ?*CharacterSet) void {
        return objc.msgSend(_self, "formIntersectionWithCharacterSet:", void, .{_otherSet});
    }

    pub fn invert(_self: *@This()) void {
        return objc.msgSend(_self, "invert", void, .{});
    }
};

pub const DecodingFailurePolicy = objc.NSInteger;
pub const DecodingFailurePolicy_RaiseException: objc.NSInteger = 0;
pub const DecodingFailurePolicy_SetErrorAndReturn: objc.NSInteger = 1;

/// https://developer.apple.com/documentation/Foundation/NSCoder?language=objc
pub const Coder = opaque {
    pub const Internal = objc.ExternClass("NSCoder", @This(), objc.NSObject, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn encodeValueOfObjCTypeAt(_self: *@This(), _type: ?*i8, _addr: ?*anyopaque) void {
        return objc.msgSend(_self, "encodeValueOfObjCType:at:", void, .{ _type, _addr });
    }

    pub fn encodeDataObject(_self: *@This(), _data: ?*Data) void {
        return objc.msgSend(_self, "encodeDataObject:", void, .{_data});
    }

    pub fn decodeDataObject(_self: *@This()) ?*Data {
        return objc.msgSend(_self, "decodeDataObject", ?*Data, .{});
    }

    pub fn decodeValueOfObjCTypeAtSize(_self: *@This(), _type: ?*i8, _data: ?*anyopaque, _size: objc.NSUInteger) void {
        return objc.msgSend(_self, "decodeValueOfObjCType:at:size:", void, .{ _type, _data, _size });
    }

    pub fn versionForClassName(_self: *@This(), _className: ?*String) objc.NSInteger {
        return objc.msgSend(_self, "versionForClassName:", objc.NSInteger, .{_className});
    }
};

pub extern "Foundation" fn NXReadNSObjectFromCoder(decoder: ?*Coder) callconv(.C) ?*objc.NSObject;

pub const DataReadingOptions = objc.NSUInteger;
pub const DataReadingOptions_MappedIfSafe: objc.NSUInteger = 1;
pub const DataReadingOptions_Uncached: objc.NSUInteger = 2;
pub const DataReadingOptions_MappedAlways: objc.NSUInteger = 8;
pub const DataReadingOptions_Mapped: objc.NSUInteger = 1;
pub const DataReadingOptions_MappedRead: objc.NSUInteger = 1;
pub const DataReadingOptions_UncachedRead: objc.NSUInteger = 2;

pub const DataWritingOptions = objc.NSUInteger;
pub const DataWritingOptions_Atomic: objc.NSUInteger = 1;
pub const DataWritingOptions_WithoutOverwriting: objc.NSUInteger = 2;
pub const DataWritingOptions_FileProtectionNone: objc.NSUInteger = 268435456;
pub const DataWritingOptions_FileProtectionComplete: objc.NSUInteger = 536870912;
pub const DataWritingOptions_FileProtectionCompleteUnlessOpen: objc.NSUInteger = 805306368;
pub const DataWritingOptions_FileProtectionCompleteUntilFirstUserAuthentication: objc.NSUInteger = 1073741824;
pub const DataWritingOptions_FileProtectionCompleteWhenUserInactive: objc.NSUInteger = 1342177280;
pub const DataWritingOptions_FileProtectionMask: objc.NSUInteger = 4026531840;
pub const DataWritingOptions_AtomicWrite: objc.NSUInteger = 1;

pub const DataSearchOptions = objc.NSUInteger;
pub const DataSearchOptions_Backwards: objc.NSUInteger = 1;
pub const DataSearchOptions_Anchored: objc.NSUInteger = 2;

pub const DataBase64EncodingOptions = objc.NSUInteger;
pub const DataBase64EncodingOptions_Encoding64CharacterLineLength: objc.NSUInteger = 1;
pub const DataBase64EncodingOptions_Encoding76CharacterLineLength: objc.NSUInteger = 2;
pub const DataBase64EncodingOptions_EndLineWithCarriageReturn: objc.NSUInteger = 16;
pub const DataBase64EncodingOptions_EndLineWithLineFeed: objc.NSUInteger = 32;

pub const DataBase64DecodingOptions = objc.NSUInteger;
pub const DataBase64DecodingOptions_IgnoreUnknownCharacters: objc.NSUInteger = 1;

/// https://developer.apple.com/documentation/Foundation/NSData?language=objc
pub const Data = opaque {
    pub const Internal = objc.ExternClass("NSData", @This(), objc.NSObject, &.{ Copying, MutableCopying, SecureCoding });
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn supportsSecureCoding() objc.BOOL {
        return objc.msgSend(Internal.class(), "supportsSecureCoding", objc.BOOL, .{});
    }

    pub fn length(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "length", objc.NSUInteger, .{});
    }

    pub fn bytes(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "bytes", ?*anyopaque, .{});
    }
};

pub const DataCompressionAlgorithm = objc.NSInteger;
pub const DataCompressionAlgorithm_LZFSE: objc.NSInteger = 0;
pub const DataCompressionAlgorithm_LZ4: objc.NSInteger = 1;
pub const DataCompressionAlgorithm_LZMA: objc.NSInteger = 2;
pub const DataCompressionAlgorithm_Zlib: objc.NSInteger = 3;

/// https://developer.apple.com/documentation/Foundation/NSMutableData?language=objc
pub const MutableData = opaque {
    pub const Internal = objc.ExternClass("NSMutableData", @This(), Data, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn supportsSecureCoding() objc.BOOL {
        return objc.msgSend(Internal.class(), "supportsSecureCoding", objc.BOOL, .{});
    }

    pub fn length(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "length", objc.NSUInteger, .{});
    }

    pub fn bytes(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "bytes", ?*anyopaque, .{});
    }

    pub fn mutableBytes(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "mutableBytes", ?*anyopaque, .{});
    }

    pub fn setLength(_self: *@This(), _length: objc.NSUInteger) void {
        return objc.msgSend(_self, "setLength:", void, .{_length});
    }
};

/// https://developer.apple.com/documentation/Foundation/NSPurgeableData?language=objc
pub const PurgeableData = opaque {
    pub const Internal = objc.ExternClass("NSPurgeableData", @This(), MutableData, &.{DiscardableContent});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn supportsSecureCoding() objc.BOOL {
        return objc.msgSend(Internal.class(), "supportsSecureCoding", objc.BOOL, .{});
    }

    pub fn length(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "length", objc.NSUInteger, .{});
    }

    pub fn bytes(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "bytes", ?*anyopaque, .{});
    }

    pub fn mutableBytes(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "mutableBytes", ?*anyopaque, .{});
    }

    pub fn setLength(_self: *@This(), _length: objc.NSUInteger) void {
        return objc.msgSend(_self, "setLength:", void, .{_length});
    }

    pub fn beginContentAccess(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "beginContentAccess", objc.BOOL, .{});
    }

    pub fn endContentAccess(_self: *@This()) void {
        return objc.msgSend(_self, "endContentAccess", void, .{});
    }

    pub fn discardContentIfPossible(_self: *@This()) void {
        return objc.msgSend(_self, "discardContentIfPossible", void, .{});
    }

    pub fn isContentDiscarded(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isContentDiscarded", objc.BOOL, .{});
    }
};

/// https://developer.apple.com/documentation/Foundation/NSDateInterval?language=objc
pub const DateInterval = opaque {
    pub const Internal = objc.ExternClass("NSDateInterval", @This(), objc.NSObject, &.{ Copying, SecureCoding });
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn supportsSecureCoding() objc.BOOL {
        return objc.msgSend(Internal.class(), "supportsSecureCoding", objc.BOOL, .{});
    }

    pub fn initWithStartDateDuration(_self: *@This(), _startDate: ?*Date, _duration: TimeInterval) *@This() {
        return objc.msgSend(_self, "initWithStartDate:duration:", *@This(), .{ _startDate, _duration });
    }

    pub fn initWithStartDateEndDate(_self: *@This(), _startDate: ?*Date, _endDate: ?*Date) *@This() {
        return objc.msgSend(_self, "initWithStartDate:endDate:", *@This(), .{ _startDate, _endDate });
    }

    pub fn compare(_self: *@This(), _dateInterval: ?*DateInterval) ComparisonResult {
        return objc.msgSend(_self, "compare:", ComparisonResult, .{_dateInterval});
    }

    pub fn isEqualToDateInterval(_self: *@This(), _dateInterval: ?*DateInterval) objc.BOOL {
        return objc.msgSend(_self, "isEqualToDateInterval:", objc.BOOL, .{_dateInterval});
    }

    pub fn intersectsDateInterval(_self: *@This(), _dateInterval: ?*DateInterval) objc.BOOL {
        return objc.msgSend(_self, "intersectsDateInterval:", objc.BOOL, .{_dateInterval});
    }

    pub fn intersectionWithDateInterval(_self: *@This(), _dateInterval: ?*DateInterval) ?*DateInterval {
        return objc.msgSend(_self, "intersectionWithDateInterval:", ?*DateInterval, .{_dateInterval});
    }

    pub fn containsDate(_self: *@This(), _date: ?*Date) objc.BOOL {
        return objc.msgSend(_self, "containsDate:", objc.BOOL, .{_date});
    }

    pub fn startDate(_self: *@This()) ?*Date {
        return objc.msgSend(_self, "startDate", ?*Date, .{});
    }

    pub fn endDate(_self: *@This()) ?*Date {
        return objc.msgSend(_self, "endDate", ?*Date, .{});
    }

    pub fn duration(_self: *@This()) TimeInterval {
        return objc.msgSend(_self, "duration", TimeInterval, .{});
    }
};

pub const AttributedStringKey = ?*String;

pub const AttributedStringFormattingContextKey = ?*String;

/// https://developer.apple.com/documentation/Foundation/NSAttributedString?language=objc
pub const AttributedString = opaque {
    pub const Internal = objc.ExternClass("NSAttributedString", @This(), objc.NSObject, &.{ Copying, MutableCopying, SecureCoding });
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn supportsSecureCoding() objc.BOOL {
        return objc.msgSend(Internal.class(), "supportsSecureCoding", objc.BOOL, .{});
    }

    pub fn attributesAtIndexEffectiveRange(_self: *@This(), _location: objc.NSUInteger, _range: RangePointer) ?*anyopaque {
        return objc.msgSend(_self, "attributesAtIndex:effectiveRange:", ?*anyopaque, .{ _location, _range });
    }

    pub fn string(_self: *@This()) ?*String {
        return objc.msgSend(_self, "string", ?*String, .{});
    }
};

pub const AttributedStringEnumerationOptions = objc.NSUInteger;
pub const AttributedStringEnumerationOptions_Reverse: objc.NSUInteger = 2;
pub const AttributedStringEnumerationOptions_LongestEffectiveRangeNotRequired: objc.NSUInteger = 1048576;

/// https://developer.apple.com/documentation/Foundation/NSMutableAttributedString?language=objc
pub const MutableAttributedString = opaque {
    pub const Internal = objc.ExternClass("NSMutableAttributedString", @This(), AttributedString, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn supportsSecureCoding() objc.BOOL {
        return objc.msgSend(Internal.class(), "supportsSecureCoding", objc.BOOL, .{});
    }

    pub fn attributesAtIndexEffectiveRange(_self: *@This(), _location: objc.NSUInteger, _range: RangePointer) ?*anyopaque {
        return objc.msgSend(_self, "attributesAtIndex:effectiveRange:", ?*anyopaque, .{ _location, _range });
    }

    pub fn string(_self: *@This()) ?*String {
        return objc.msgSend(_self, "string", ?*String, .{});
    }

    pub fn replaceCharactersInRangeWithString(_self: *@This(), _range: Range, _str: ?*String) void {
        return objc.msgSend(_self, "replaceCharactersInRange:withString:", void, .{ _range, _str });
    }

    pub fn setAttributesRange(_self: *@This(), _attrs: ?*anyopaque, _range: Range) void {
        return objc.msgSend(_self, "setAttributes:range:", void, .{ _attrs, _range });
    }
};

pub const InlinePresentationIntent = objc.NSUInteger;
pub const InlinePresentationIntent_Emphasized: objc.NSUInteger = 1;
pub const InlinePresentationIntent_StronglyEmphasized: objc.NSUInteger = 2;
pub const InlinePresentationIntent_Code: objc.NSUInteger = 4;
pub const InlinePresentationIntent_Strikethrough: objc.NSUInteger = 32;
pub const InlinePresentationIntent_SoftBreak: objc.NSUInteger = 64;
pub const InlinePresentationIntent_LineBreak: objc.NSUInteger = 128;
pub const InlinePresentationIntent_InlineHTML: objc.NSUInteger = 256;
pub const InlinePresentationIntent_BlockHTML: objc.NSUInteger = 512;

pub const AttributedStringMarkdownParsingFailurePolicy = objc.NSInteger;
pub const AttributedStringMarkdownParsingFailurePolicy_ReturnError: objc.NSInteger = 0;
pub const AttributedStringMarkdownParsingFailurePolicy_ReturnPartiallyParsedIfPossible: objc.NSInteger = 1;

pub const AttributedStringMarkdownInterpretedSyntax = objc.NSInteger;
pub const AttributedStringMarkdownInterpretedSyntax_Full: objc.NSInteger = 0;
pub const AttributedStringMarkdownInterpretedSyntax_InlineOnly: objc.NSInteger = 1;
pub const AttributedStringMarkdownInterpretedSyntax_InlineOnlyPreservingWhitespace: objc.NSInteger = 2;

/// https://developer.apple.com/documentation/Foundation/NSAttributedStringMarkdownSourcePosition?language=objc
pub const AttributedStringMarkdownSourcePosition = opaque {
    pub const Internal = objc.ExternClass("NSAttributedStringMarkdownSourcePosition", @This(), objc.NSObject, &.{ Copying, SecureCoding });
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn supportsSecureCoding() objc.BOOL {
        return objc.msgSend(Internal.class(), "supportsSecureCoding", objc.BOOL, .{});
    }

    pub fn initWithStartLineStartColumnEndLineEndColumn(
        _self: *@This(),
        _startLine: objc.NSInteger,
        _startColumn: objc.NSInteger,
        _endLine: objc.NSInteger,
        _endColumn: objc.NSInteger,
    ) *@This() {
        return objc.msgSend(_self, "initWithStartLine:startColumn:endLine:endColumn:", *@This(), .{
            _startLine,
            _startColumn,
            _endLine,
            _endColumn,
        });
    }

    pub fn rangeInString(_self: *@This(), _string: ?*String) Range {
        return objc.msgSend(_self, "rangeInString:", Range, .{_string});
    }

    pub fn startLine(_self: *@This()) objc.NSInteger {
        return objc.msgSend(_self, "startLine", objc.NSInteger, .{});
    }

    pub fn startColumn(_self: *@This()) objc.NSInteger {
        return objc.msgSend(_self, "startColumn", objc.NSInteger, .{});
    }

    pub fn endLine(_self: *@This()) objc.NSInteger {
        return objc.msgSend(_self, "endLine", objc.NSInteger, .{});
    }

    pub fn endColumn(_self: *@This()) objc.NSInteger {
        return objc.msgSend(_self, "endColumn", objc.NSInteger, .{});
    }
};

/// https://developer.apple.com/documentation/Foundation/NSAttributedStringMarkdownParsingOptions?language=objc
pub const AttributedStringMarkdownParsingOptions = opaque {
    pub const Internal = objc.ExternClass("NSAttributedStringMarkdownParsingOptions", @This(), objc.NSObject, &.{Copying});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn allowsExtendedAttributes(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsExtendedAttributes", objc.BOOL, .{});
    }

    pub fn setAllowsExtendedAttributes(_self: *@This(), _allowsExtendedAttributes: objc.BOOL) void {
        return objc.msgSend(_self, "setAllowsExtendedAttributes:", void, .{_allowsExtendedAttributes});
    }

    pub fn interpretedSyntax(_self: *@This()) AttributedStringMarkdownInterpretedSyntax {
        return objc.msgSend(_self, "interpretedSyntax", AttributedStringMarkdownInterpretedSyntax, .{});
    }

    pub fn setInterpretedSyntax(_self: *@This(), _interpretedSyntax: AttributedStringMarkdownInterpretedSyntax) void {
        return objc.msgSend(_self, "setInterpretedSyntax:", void, .{_interpretedSyntax});
    }

    pub fn failurePolicy(_self: *@This()) AttributedStringMarkdownParsingFailurePolicy {
        return objc.msgSend(_self, "failurePolicy", AttributedStringMarkdownParsingFailurePolicy, .{});
    }

    pub fn setFailurePolicy(_self: *@This(), _failurePolicy: AttributedStringMarkdownParsingFailurePolicy) void {
        return objc.msgSend(_self, "setFailurePolicy:", void, .{_failurePolicy});
    }

    pub fn languageCode(_self: *@This()) ?*String {
        return objc.msgSend(_self, "languageCode", ?*String, .{});
    }

    pub fn setLanguageCode(_self: *@This(), _languageCode: ?*String) void {
        return objc.msgSend(_self, "setLanguageCode:", void, .{_languageCode});
    }

    pub fn appliesSourcePositionAttributes(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "appliesSourcePositionAttributes", objc.BOOL, .{});
    }

    pub fn setAppliesSourcePositionAttributes(_self: *@This(), _appliesSourcePositionAttributes: objc.BOOL) void {
        return objc.msgSend(_self, "setAppliesSourcePositionAttributes:", void, .{_appliesSourcePositionAttributes});
    }
};

pub const AttributedStringFormattingOptions = objc.NSUInteger;
pub const AttributedStringFormattingOptions_InsertArgumentAttributesWithoutMerging: objc.NSUInteger = 1;
pub const AttributedStringFormattingOptions_ApplyReplacementIndexAttribute: objc.NSUInteger = 2;

pub const PresentationIntentKind = objc.NSInteger;
pub const PresentationIntentKind_Paragraph: objc.NSInteger = 0;
pub const PresentationIntentKind_Header: objc.NSInteger = 1;
pub const PresentationIntentKind_OrderedList: objc.NSInteger = 2;
pub const PresentationIntentKind_UnorderedList: objc.NSInteger = 3;
pub const PresentationIntentKind_ListItem: objc.NSInteger = 4;
pub const PresentationIntentKind_CodeBlock: objc.NSInteger = 5;
pub const PresentationIntentKind_BlockQuote: objc.NSInteger = 6;
pub const PresentationIntentKind_ThematicBreak: objc.NSInteger = 7;
pub const PresentationIntentKind_Table: objc.NSInteger = 8;
pub const PresentationIntentKind_TableHeaderRow: objc.NSInteger = 9;
pub const PresentationIntentKind_TableRow: objc.NSInteger = 10;
pub const PresentationIntentKind_TableCell: objc.NSInteger = 11;

pub const PresentationIntentTableColumnAlignment = objc.NSInteger;
pub const PresentationIntentTableColumnAlignment_Left: objc.NSInteger = 0;
pub const PresentationIntentTableColumnAlignment_Center: objc.NSInteger = 1;
pub const PresentationIntentTableColumnAlignment_Right: objc.NSInteger = 2;

/// https://developer.apple.com/documentation/Foundation/NSPresentationIntent?language=objc
pub const PresentationIntent = opaque {
    pub const Internal = objc.ExternClass("NSPresentationIntent", @This(), objc.NSObject, &.{ Copying, SecureCoding });
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn supportsSecureCoding() objc.BOOL {
        return objc.msgSend(Internal.class(), "supportsSecureCoding", objc.BOOL, .{});
    }

    pub fn paragraphIntentWithIdentityNestedInsideIntent(_identity: objc.NSInteger, _parent: ?*PresentationIntent) ?*PresentationIntent {
        return objc.msgSend(Internal.class(), "paragraphIntentWithIdentity:nestedInsideIntent:", ?*PresentationIntent, .{ _identity, _parent });
    }

    pub fn headerIntentWithIdentityLevelNestedInsideIntent(_identity: objc.NSInteger, _level: objc.NSInteger, _parent: ?*PresentationIntent) ?*PresentationIntent {
        return objc.msgSend(Internal.class(), "headerIntentWithIdentity:level:nestedInsideIntent:", ?*PresentationIntent, .{ _identity, _level, _parent });
    }

    pub fn codeBlockIntentWithIdentityLanguageHintNestedInsideIntent(_identity: objc.NSInteger, _languageHint: ?*String, _parent: ?*PresentationIntent) ?*PresentationIntent {
        return objc.msgSend(Internal.class(), "codeBlockIntentWithIdentity:languageHint:nestedInsideIntent:", ?*PresentationIntent, .{ _identity, _languageHint, _parent });
    }

    pub fn thematicBreakIntentWithIdentityNestedInsideIntent(_identity: objc.NSInteger, _parent: ?*PresentationIntent) ?*PresentationIntent {
        return objc.msgSend(Internal.class(), "thematicBreakIntentWithIdentity:nestedInsideIntent:", ?*PresentationIntent, .{ _identity, _parent });
    }

    pub fn orderedListIntentWithIdentityNestedInsideIntent(_identity: objc.NSInteger, _parent: ?*PresentationIntent) ?*PresentationIntent {
        return objc.msgSend(Internal.class(), "orderedListIntentWithIdentity:nestedInsideIntent:", ?*PresentationIntent, .{ _identity, _parent });
    }

    pub fn unorderedListIntentWithIdentityNestedInsideIntent(_identity: objc.NSInteger, _parent: ?*PresentationIntent) ?*PresentationIntent {
        return objc.msgSend(Internal.class(), "unorderedListIntentWithIdentity:nestedInsideIntent:", ?*PresentationIntent, .{ _identity, _parent });
    }

    pub fn listItemIntentWithIdentityOrdinalNestedInsideIntent(_identity: objc.NSInteger, _ordinal: objc.NSInteger, _parent: ?*PresentationIntent) ?*PresentationIntent {
        return objc.msgSend(Internal.class(), "listItemIntentWithIdentity:ordinal:nestedInsideIntent:", ?*PresentationIntent, .{ _identity, _ordinal, _parent });
    }

    pub fn blockQuoteIntentWithIdentityNestedInsideIntent(_identity: objc.NSInteger, _parent: ?*PresentationIntent) ?*PresentationIntent {
        return objc.msgSend(Internal.class(), "blockQuoteIntentWithIdentity:nestedInsideIntent:", ?*PresentationIntent, .{ _identity, _parent });
    }

    pub fn tableIntentWithIdentityColumnCountAlignmentsNestedInsideIntent(
        _identity: objc.NSInteger,
        _columnCount: objc.NSInteger,
        _alignments: ?*anyopaque,
        _parent: ?*PresentationIntent,
    ) ?*PresentationIntent {
        return objc.msgSend(Internal.class(), "tableIntentWithIdentity:columnCount:alignments:nestedInsideIntent:", ?*PresentationIntent, .{
            _identity,
            _columnCount,
            _alignments,
            _parent,
        });
    }

    pub fn tableHeaderRowIntentWithIdentityNestedInsideIntent(_identity: objc.NSInteger, _parent: ?*PresentationIntent) ?*PresentationIntent {
        return objc.msgSend(Internal.class(), "tableHeaderRowIntentWithIdentity:nestedInsideIntent:", ?*PresentationIntent, .{ _identity, _parent });
    }

    pub fn tableRowIntentWithIdentityRowNestedInsideIntent(_identity: objc.NSInteger, _row: objc.NSInteger, _parent: ?*PresentationIntent) ?*PresentationIntent {
        return objc.msgSend(Internal.class(), "tableRowIntentWithIdentity:row:nestedInsideIntent:", ?*PresentationIntent, .{ _identity, _row, _parent });
    }

    pub fn tableCellIntentWithIdentityColumnNestedInsideIntent(_identity: objc.NSInteger, _column: objc.NSInteger, _parent: ?*PresentationIntent) ?*PresentationIntent {
        return objc.msgSend(Internal.class(), "tableCellIntentWithIdentity:column:nestedInsideIntent:", ?*PresentationIntent, .{ _identity, _column, _parent });
    }

    pub fn isEquivalentToPresentationIntent(_self: *@This(), _other: ?*PresentationIntent) objc.BOOL {
        return objc.msgSend(_self, "isEquivalentToPresentationIntent:", objc.BOOL, .{_other});
    }

    pub fn intentKind(_self: *@This()) PresentationIntentKind {
        return objc.msgSend(_self, "intentKind", PresentationIntentKind, .{});
    }

    pub fn parentIntent(_self: *@This()) ?*PresentationIntent {
        return objc.msgSend(_self, "parentIntent", ?*PresentationIntent, .{});
    }

    pub fn identity(_self: *@This()) objc.NSInteger {
        return objc.msgSend(_self, "identity", objc.NSInteger, .{});
    }

    pub fn ordinal(_self: *@This()) objc.NSInteger {
        return objc.msgSend(_self, "ordinal", objc.NSInteger, .{});
    }

    pub fn columnAlignments(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "columnAlignments", ?*anyopaque, .{});
    }

    pub fn columnCount(_self: *@This()) objc.NSInteger {
        return objc.msgSend(_self, "columnCount", objc.NSInteger, .{});
    }

    pub fn headerLevel(_self: *@This()) objc.NSInteger {
        return objc.msgSend(_self, "headerLevel", objc.NSInteger, .{});
    }

    pub fn languageHint(_self: *@This()) ?*String {
        return objc.msgSend(_self, "languageHint", ?*String, .{});
    }

    pub fn column(_self: *@This()) objc.NSInteger {
        return objc.msgSend(_self, "column", objc.NSInteger, .{});
    }

    pub fn row(_self: *@This()) objc.NSInteger {
        return objc.msgSend(_self, "row", objc.NSInteger, .{});
    }

    pub fn indentationLevel(_self: *@This()) objc.NSInteger {
        return objc.msgSend(_self, "indentationLevel", objc.NSInteger, .{});
    }
};

pub const FormattingContext = objc.NSInteger;
pub const FormattingContext_Unknown: objc.NSInteger = 0;
pub const FormattingContext_Dynamic: objc.NSInteger = 1;
pub const FormattingContext_Standalone: objc.NSInteger = 2;
pub const FormattingContext_ListItem: objc.NSInteger = 3;
pub const FormattingContext_BeginningOfSentence: objc.NSInteger = 4;
pub const FormattingContext_MiddleOfSentence: objc.NSInteger = 5;

pub const FormattingUnitStyle = objc.NSInteger;
pub const FormattingUnitStyle_Short: objc.NSInteger = 1;
pub const FormattingUnitStyle_Medium: objc.NSInteger = 2;
pub const FormattingUnitStyle_Long: objc.NSInteger = 3;

/// https://developer.apple.com/documentation/Foundation/NSFormatter?language=objc
pub const Formatter = opaque {
    pub const Internal = objc.ExternClass("NSFormatter", @This(), objc.NSObject, &.{ Copying, Coding });
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn stringForObjectValue(_self: *@This(), _obj: ?objc.Id) ?*String {
        return objc.msgSend(_self, "stringForObjectValue:", ?*String, .{_obj});
    }

    pub fn attributedStringForObjectValueWithDefaultAttributes(_self: *@This(), _obj: ?objc.Id, _attrs: ?*anyopaque) ?*AttributedString {
        return objc.msgSend(_self, "attributedStringForObjectValue:withDefaultAttributes:", ?*AttributedString, .{ _obj, _attrs });
    }

    pub fn editingStringForObjectValue(_self: *@This(), _obj: ?objc.Id) ?*String {
        return objc.msgSend(_self, "editingStringForObjectValue:", ?*String, .{_obj});
    }

    pub fn getObjectValueForStringErrorDescription(_self: *@This(), _obj: ?*?objc.Id, _string: ?*String, _error: ?*?*String) objc.BOOL {
        return objc.msgSend(_self, "getObjectValue:forString:errorDescription:", objc.BOOL, .{ _obj, _string, _error });
    }

    pub fn isPartialStringValidNewEditingStringErrorDescription(_self: *@This(), _partialString: ?*String, _newString: ?*?*String, _error: ?*?*String) objc.BOOL {
        return objc.msgSend(_self, "isPartialStringValid:newEditingString:errorDescription:", objc.BOOL, .{ _partialString, _newString, _error });
    }

    pub fn isPartialStringValidProposedSelectedRangeOriginalStringOriginalSelectedRangeErrorDescription(
        _self: *@This(),
        _partialStringPtr: ?*?*String,
        _proposedSelRangePtr: RangePointer,
        _origString: ?*String,
        _origSelRange: Range,
        _error: ?*?*String,
    ) objc.BOOL {
        return objc.msgSend(_self, "isPartialStringValid:proposedSelectedRange:originalString:originalSelectedRange:errorDescription:", objc.BOOL, .{
            _partialStringPtr,
            _proposedSelRangePtr,
            _origString,
            _origSelRange,
            _error,
        });
    }
};

/// https://developer.apple.com/documentation/Foundation/NSDateFormatter?language=objc
pub const DateFormatter = opaque {
    pub const Style = DateFormatter.Style;

    pub const Behavior = DateFormatter.Behavior;

    pub const Internal = objc.ExternClass("NSDateFormatter", @This(), Formatter, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn stringForObjectValue(_self: *@This(), _obj: ?objc.Id) ?*String {
        return objc.msgSend(_self, "stringForObjectValue:", ?*String, .{_obj});
    }

    pub fn attributedStringForObjectValueWithDefaultAttributes(_self: *@This(), _obj: ?objc.Id, _attrs: ?*anyopaque) ?*AttributedString {
        return objc.msgSend(_self, "attributedStringForObjectValue:withDefaultAttributes:", ?*AttributedString, .{ _obj, _attrs });
    }

    pub fn editingStringForObjectValue(_self: *@This(), _obj: ?objc.Id) ?*String {
        return objc.msgSend(_self, "editingStringForObjectValue:", ?*String, .{_obj});
    }

    pub fn getObjectValueForStringErrorDescription(_self: *@This(), _obj: ?*?objc.Id, _string: ?*String, _error: ?*?*String) objc.BOOL {
        return objc.msgSend(_self, "getObjectValue:forString:errorDescription:", objc.BOOL, .{ _obj, _string, _error });
    }

    pub fn isPartialStringValidNewEditingStringErrorDescription(_self: *@This(), _partialString: ?*String, _newString: ?*?*String, _error: ?*?*String) objc.BOOL {
        return objc.msgSend(_self, "isPartialStringValid:newEditingString:errorDescription:", objc.BOOL, .{ _partialString, _newString, _error });
    }

    pub fn isPartialStringValidProposedSelectedRangeOriginalStringOriginalSelectedRangeErrorDescription(
        _self: *@This(),
        _partialStringPtr: ?*?*String,
        _proposedSelRangePtr: RangePointer,
        _origString: ?*String,
        _origSelRange: Range,
        _error: ?*?*String,
    ) objc.BOOL {
        return objc.msgSend(_self, "isPartialStringValid:proposedSelectedRange:originalString:originalSelectedRange:errorDescription:", objc.BOOL, .{
            _partialStringPtr,
            _proposedSelRangePtr,
            _origString,
            _origSelRange,
            _error,
        });
    }

    pub fn setFormattingContext(_self: *@This(), _formattingContext: FormattingContext) void {
        return objc.msgSend(_self, "setFormattingContext:", void, .{_formattingContext});
    }

    pub fn formattingContext(_self: *@This()) FormattingContext {
        return objc.msgSend(_self, "formattingContext", FormattingContext, .{});
    }

    pub fn getObjectValueForStringRangeError(
        _self: *@This(),
        _obj: ?*?objc.Id,
        _string: ?*String,
        _rangep: ?*Range,
        _error: ?*?*Error,
    ) objc.BOOL {
        return objc.msgSend(_self, "getObjectValue:forString:range:error:", objc.BOOL, .{
            _obj,
            _string,
            _rangep,
            _error,
        });
    }

    pub fn stringFromDate(_self: *@This(), _date: ?*Date) ?*String {
        return objc.msgSend(_self, "stringFromDate:", ?*String, .{_date});
    }

    pub fn dateFromString(_self: *@This(), _string: ?*String) ?*Date {
        return objc.msgSend(_self, "dateFromString:", ?*Date, .{_string});
    }

    pub fn localizedStringFromDateDateStyleTimeStyle(_date: ?*Date, _dstyle: DateFormatter.Style, _tstyle: DateFormatter.Style) ?*String {
        return objc.msgSend(Internal.class(), "localizedStringFromDate:dateStyle:timeStyle:", ?*String, .{ _date, _dstyle, _tstyle });
    }

    pub fn dateFormatFromTemplateOptionsLocale(_tmplate: ?*String, _opts: objc.NSUInteger, _locale: ?*Locale) ?*String {
        return objc.msgSend(Internal.class(), "dateFormatFromTemplate:options:locale:", ?*String, .{ _tmplate, _opts, _locale });
    }

    pub fn setDefaultFormatterBehavior(_defaultFormatterBehavior: DateFormatter.Behavior) void {
        return objc.msgSend(Internal.class(), "setDefaultFormatterBehavior:", void, .{_defaultFormatterBehavior});
    }

    pub fn defaultFormatterBehavior() DateFormatter.Behavior {
        return objc.msgSend(Internal.class(), "defaultFormatterBehavior", DateFormatter.Behavior, .{});
    }

    pub fn setLocalizedDateFormatFromTemplate(_self: *@This(), _dateFormatTemplate: ?*String) void {
        return objc.msgSend(_self, "setLocalizedDateFormatFromTemplate:", void, .{_dateFormatTemplate});
    }

    pub fn setDateFormat(_self: *@This(), _dateFormat: ?*String) void {
        return objc.msgSend(_self, "setDateFormat:", void, .{_dateFormat});
    }

    pub fn dateFormat(_self: *@This()) ?*String {
        return objc.msgSend(_self, "dateFormat", ?*String, .{});
    }

    pub fn setDateStyle(_self: *@This(), _dateStyle: DateFormatter.Style) void {
        return objc.msgSend(_self, "setDateStyle:", void, .{_dateStyle});
    }

    pub fn dateStyle(_self: *@This()) DateFormatter.Style {
        return objc.msgSend(_self, "dateStyle", DateFormatter.Style, .{});
    }

    pub fn setTimeStyle(_self: *@This(), _timeStyle: DateFormatter.Style) void {
        return objc.msgSend(_self, "setTimeStyle:", void, .{_timeStyle});
    }

    pub fn timeStyle(_self: *@This()) DateFormatter.Style {
        return objc.msgSend(_self, "timeStyle", DateFormatter.Style, .{});
    }

    pub fn locale(_self: *@This()) ?*Locale {
        return objc.msgSend(_self, "locale", ?*Locale, .{});
    }

    pub fn setLocale(_self: *@This(), _locale: ?*Locale) void {
        return objc.msgSend(_self, "setLocale:", void, .{_locale});
    }

    pub fn setGeneratesCalendarDates(_self: *@This(), _generatesCalendarDates: objc.BOOL) void {
        return objc.msgSend(_self, "setGeneratesCalendarDates:", void, .{_generatesCalendarDates});
    }

    pub fn generatesCalendarDates(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "generatesCalendarDates", objc.BOOL, .{});
    }

    pub fn setFormatterBehavior(_self: *@This(), _formatterBehavior: DateFormatter.Behavior) void {
        return objc.msgSend(_self, "setFormatterBehavior:", void, .{_formatterBehavior});
    }

    pub fn formatterBehavior(_self: *@This()) DateFormatter.Behavior {
        return objc.msgSend(_self, "formatterBehavior", DateFormatter.Behavior, .{});
    }

    pub fn setTimeZone(_self: *@This(), _timeZone: ?*TimeZone) void {
        return objc.msgSend(_self, "setTimeZone:", void, .{_timeZone});
    }

    pub fn timeZone(_self: *@This()) ?*TimeZone {
        return objc.msgSend(_self, "timeZone", ?*TimeZone, .{});
    }

    pub fn setCalendar(_self: *@This(), _calendar: ?*Calendar) void {
        return objc.msgSend(_self, "setCalendar:", void, .{_calendar});
    }

    pub fn calendar(_self: *@This()) ?*Calendar {
        return objc.msgSend(_self, "calendar", ?*Calendar, .{});
    }

    pub fn setLenient(_self: *@This(), _lenient: objc.BOOL) void {
        return objc.msgSend(_self, "setLenient:", void, .{_lenient});
    }

    pub fn isLenient(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isLenient", objc.BOOL, .{});
    }

    pub fn setTwoDigitStartDate(_self: *@This(), _twoDigitStartDate: ?*Date) void {
        return objc.msgSend(_self, "setTwoDigitStartDate:", void, .{_twoDigitStartDate});
    }

    pub fn twoDigitStartDate(_self: *@This()) ?*Date {
        return objc.msgSend(_self, "twoDigitStartDate", ?*Date, .{});
    }

    pub fn setDefaultDate(_self: *@This(), _defaultDate: ?*Date) void {
        return objc.msgSend(_self, "setDefaultDate:", void, .{_defaultDate});
    }

    pub fn defaultDate(_self: *@This()) ?*Date {
        return objc.msgSend(_self, "defaultDate", ?*Date, .{});
    }

    pub fn eraSymbols(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "eraSymbols", ?*anyopaque, .{});
    }

    pub fn setEraSymbols(_self: *@This(), _eraSymbols: ?*anyopaque) void {
        return objc.msgSend(_self, "setEraSymbols:", void, .{_eraSymbols});
    }

    pub fn monthSymbols(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "monthSymbols", ?*anyopaque, .{});
    }

    pub fn setMonthSymbols(_self: *@This(), _monthSymbols: ?*anyopaque) void {
        return objc.msgSend(_self, "setMonthSymbols:", void, .{_monthSymbols});
    }

    pub fn shortMonthSymbols(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "shortMonthSymbols", ?*anyopaque, .{});
    }

    pub fn setShortMonthSymbols(_self: *@This(), _shortMonthSymbols: ?*anyopaque) void {
        return objc.msgSend(_self, "setShortMonthSymbols:", void, .{_shortMonthSymbols});
    }

    pub fn weekdaySymbols(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "weekdaySymbols", ?*anyopaque, .{});
    }

    pub fn setWeekdaySymbols(_self: *@This(), _weekdaySymbols: ?*anyopaque) void {
        return objc.msgSend(_self, "setWeekdaySymbols:", void, .{_weekdaySymbols});
    }

    pub fn shortWeekdaySymbols(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "shortWeekdaySymbols", ?*anyopaque, .{});
    }

    pub fn setShortWeekdaySymbols(_self: *@This(), _shortWeekdaySymbols: ?*anyopaque) void {
        return objc.msgSend(_self, "setShortWeekdaySymbols:", void, .{_shortWeekdaySymbols});
    }

    pub fn setAMSymbol(_self: *@This(), _AMSymbol: ?*String) void {
        return objc.msgSend(_self, "setAMSymbol:", void, .{_AMSymbol});
    }

    pub fn amSymbol(_self: *@This()) ?*String {
        return objc.msgSend(_self, "AMSymbol", ?*String, .{});
    }

    pub fn setPMSymbol(_self: *@This(), _PMSymbol: ?*String) void {
        return objc.msgSend(_self, "setPMSymbol:", void, .{_PMSymbol});
    }

    pub fn pmSymbol(_self: *@This()) ?*String {
        return objc.msgSend(_self, "PMSymbol", ?*String, .{});
    }

    pub fn setLongEraSymbols(_self: *@This(), _longEraSymbols: ?*anyopaque) void {
        return objc.msgSend(_self, "setLongEraSymbols:", void, .{_longEraSymbols});
    }

    pub fn longEraSymbols(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "longEraSymbols", ?*anyopaque, .{});
    }

    pub fn setVeryShortMonthSymbols(_self: *@This(), _veryShortMonthSymbols: ?*anyopaque) void {
        return objc.msgSend(_self, "setVeryShortMonthSymbols:", void, .{_veryShortMonthSymbols});
    }

    pub fn veryShortMonthSymbols(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "veryShortMonthSymbols", ?*anyopaque, .{});
    }

    pub fn setStandaloneMonthSymbols(_self: *@This(), _standaloneMonthSymbols: ?*anyopaque) void {
        return objc.msgSend(_self, "setStandaloneMonthSymbols:", void, .{_standaloneMonthSymbols});
    }

    pub fn standaloneMonthSymbols(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "standaloneMonthSymbols", ?*anyopaque, .{});
    }

    pub fn setShortStandaloneMonthSymbols(_self: *@This(), _shortStandaloneMonthSymbols: ?*anyopaque) void {
        return objc.msgSend(_self, "setShortStandaloneMonthSymbols:", void, .{_shortStandaloneMonthSymbols});
    }

    pub fn shortStandaloneMonthSymbols(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "shortStandaloneMonthSymbols", ?*anyopaque, .{});
    }

    pub fn setVeryShortStandaloneMonthSymbols(_self: *@This(), _veryShortStandaloneMonthSymbols: ?*anyopaque) void {
        return objc.msgSend(_self, "setVeryShortStandaloneMonthSymbols:", void, .{_veryShortStandaloneMonthSymbols});
    }

    pub fn veryShortStandaloneMonthSymbols(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "veryShortStandaloneMonthSymbols", ?*anyopaque, .{});
    }

    pub fn setVeryShortWeekdaySymbols(_self: *@This(), _veryShortWeekdaySymbols: ?*anyopaque) void {
        return objc.msgSend(_self, "setVeryShortWeekdaySymbols:", void, .{_veryShortWeekdaySymbols});
    }

    pub fn veryShortWeekdaySymbols(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "veryShortWeekdaySymbols", ?*anyopaque, .{});
    }

    pub fn standaloneWeekdaySymbols(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "standaloneWeekdaySymbols", ?*anyopaque, .{});
    }

    pub fn setStandaloneWeekdaySymbols(_self: *@This(), _standaloneWeekdaySymbols: ?*anyopaque) void {
        return objc.msgSend(_self, "setStandaloneWeekdaySymbols:", void, .{_standaloneWeekdaySymbols});
    }

    pub fn shortStandaloneWeekdaySymbols(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "shortStandaloneWeekdaySymbols", ?*anyopaque, .{});
    }

    pub fn setShortStandaloneWeekdaySymbols(_self: *@This(), _shortStandaloneWeekdaySymbols: ?*anyopaque) void {
        return objc.msgSend(_self, "setShortStandaloneWeekdaySymbols:", void, .{_shortStandaloneWeekdaySymbols});
    }

    pub fn veryShortStandaloneWeekdaySymbols(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "veryShortStandaloneWeekdaySymbols", ?*anyopaque, .{});
    }

    pub fn setVeryShortStandaloneWeekdaySymbols(_self: *@This(), _veryShortStandaloneWeekdaySymbols: ?*anyopaque) void {
        return objc.msgSend(_self, "setVeryShortStandaloneWeekdaySymbols:", void, .{_veryShortStandaloneWeekdaySymbols});
    }

    pub fn quarterSymbols(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "quarterSymbols", ?*anyopaque, .{});
    }

    pub fn setQuarterSymbols(_self: *@This(), _quarterSymbols: ?*anyopaque) void {
        return objc.msgSend(_self, "setQuarterSymbols:", void, .{_quarterSymbols});
    }

    pub fn shortQuarterSymbols(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "shortQuarterSymbols", ?*anyopaque, .{});
    }

    pub fn setShortQuarterSymbols(_self: *@This(), _shortQuarterSymbols: ?*anyopaque) void {
        return objc.msgSend(_self, "setShortQuarterSymbols:", void, .{_shortQuarterSymbols});
    }

    pub fn standaloneQuarterSymbols(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "standaloneQuarterSymbols", ?*anyopaque, .{});
    }

    pub fn setStandaloneQuarterSymbols(_self: *@This(), _standaloneQuarterSymbols: ?*anyopaque) void {
        return objc.msgSend(_self, "setStandaloneQuarterSymbols:", void, .{_standaloneQuarterSymbols});
    }

    pub fn setShortStandaloneQuarterSymbols(_self: *@This(), _shortStandaloneQuarterSymbols: ?*anyopaque) void {
        return objc.msgSend(_self, "setShortStandaloneQuarterSymbols:", void, .{_shortStandaloneQuarterSymbols});
    }

    pub fn shortStandaloneQuarterSymbols(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "shortStandaloneQuarterSymbols", ?*anyopaque, .{});
    }

    pub fn setGregorianStartDate(_self: *@This(), _gregorianStartDate: ?*Date) void {
        return objc.msgSend(_self, "setGregorianStartDate:", void, .{_gregorianStartDate});
    }

    pub fn gregorianStartDate(_self: *@This()) ?*Date {
        return objc.msgSend(_self, "gregorianStartDate", ?*Date, .{});
    }

    pub fn doesRelativeDateFormatting(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "doesRelativeDateFormatting", objc.BOOL, .{});
    }

    pub fn setDoesRelativeDateFormatting(_self: *@This(), _doesRelativeDateFormatting: objc.BOOL) void {
        return objc.msgSend(_self, "setDoesRelativeDateFormatting:", void, .{_doesRelativeDateFormatting});
    }
};

pub const DateIntervalFormatterStyle = objc.NSUInteger;
pub const DateIntervalFormatterStyle_NoStyle: objc.NSUInteger = 0;
pub const DateIntervalFormatterStyle_ShortStyle: objc.NSUInteger = 1;
pub const DateIntervalFormatterStyle_MediumStyle: objc.NSUInteger = 2;
pub const DateIntervalFormatterStyle_LongStyle: objc.NSUInteger = 3;
pub const DateIntervalFormatterStyle_FullStyle: objc.NSUInteger = 4;

/// https://developer.apple.com/documentation/Foundation/NSDateIntervalFormatter?language=objc
pub const DateIntervalFormatter = opaque {
    pub const Internal = objc.ExternClass("NSDateIntervalFormatter", @This(), Formatter, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn stringForObjectValue(_self: *@This(), _obj: ?objc.Id) ?*String {
        return objc.msgSend(_self, "stringForObjectValue:", ?*String, .{_obj});
    }

    pub fn attributedStringForObjectValueWithDefaultAttributes(_self: *@This(), _obj: ?objc.Id, _attrs: ?*anyopaque) ?*AttributedString {
        return objc.msgSend(_self, "attributedStringForObjectValue:withDefaultAttributes:", ?*AttributedString, .{ _obj, _attrs });
    }

    pub fn editingStringForObjectValue(_self: *@This(), _obj: ?objc.Id) ?*String {
        return objc.msgSend(_self, "editingStringForObjectValue:", ?*String, .{_obj});
    }

    pub fn getObjectValueForStringErrorDescription(_self: *@This(), _obj: ?*?objc.Id, _string: ?*String, _error: ?*?*String) objc.BOOL {
        return objc.msgSend(_self, "getObjectValue:forString:errorDescription:", objc.BOOL, .{ _obj, _string, _error });
    }

    pub fn isPartialStringValidNewEditingStringErrorDescription(_self: *@This(), _partialString: ?*String, _newString: ?*?*String, _error: ?*?*String) objc.BOOL {
        return objc.msgSend(_self, "isPartialStringValid:newEditingString:errorDescription:", objc.BOOL, .{ _partialString, _newString, _error });
    }

    pub fn isPartialStringValidProposedSelectedRangeOriginalStringOriginalSelectedRangeErrorDescription(
        _self: *@This(),
        _partialStringPtr: ?*?*String,
        _proposedSelRangePtr: RangePointer,
        _origString: ?*String,
        _origSelRange: Range,
        _error: ?*?*String,
    ) objc.BOOL {
        return objc.msgSend(_self, "isPartialStringValid:proposedSelectedRange:originalString:originalSelectedRange:errorDescription:", objc.BOOL, .{
            _partialStringPtr,
            _proposedSelRangePtr,
            _origString,
            _origSelRange,
            _error,
        });
    }

    pub fn stringFromDateToDate(_self: *@This(), _fromDate: ?*Date, _toDate: ?*Date) ?*String {
        return objc.msgSend(_self, "stringFromDate:toDate:", ?*String, .{ _fromDate, _toDate });
    }

    pub fn stringFromDateInterval(_self: *@This(), _dateInterval: ?*DateInterval) ?*String {
        return objc.msgSend(_self, "stringFromDateInterval:", ?*String, .{_dateInterval});
    }

    pub fn locale(_self: *@This()) ?*Locale {
        return objc.msgSend(_self, "locale", ?*Locale, .{});
    }

    pub fn setLocale(_self: *@This(), _locale: ?*Locale) void {
        return objc.msgSend(_self, "setLocale:", void, .{_locale});
    }

    pub fn calendar(_self: *@This()) ?*Calendar {
        return objc.msgSend(_self, "calendar", ?*Calendar, .{});
    }

    pub fn setCalendar(_self: *@This(), _calendar: ?*Calendar) void {
        return objc.msgSend(_self, "setCalendar:", void, .{_calendar});
    }

    pub fn timeZone(_self: *@This()) ?*TimeZone {
        return objc.msgSend(_self, "timeZone", ?*TimeZone, .{});
    }

    pub fn setTimeZone(_self: *@This(), _timeZone: ?*TimeZone) void {
        return objc.msgSend(_self, "setTimeZone:", void, .{_timeZone});
    }

    pub fn dateTemplate(_self: *@This()) ?*String {
        return objc.msgSend(_self, "dateTemplate", ?*String, .{});
    }

    pub fn setDateTemplate(_self: *@This(), _dateTemplate: ?*String) void {
        return objc.msgSend(_self, "setDateTemplate:", void, .{_dateTemplate});
    }

    pub fn dateStyle(_self: *@This()) DateIntervalFormatterStyle {
        return objc.msgSend(_self, "dateStyle", DateIntervalFormatterStyle, .{});
    }

    pub fn setDateStyle(_self: *@This(), _dateStyle: DateIntervalFormatterStyle) void {
        return objc.msgSend(_self, "setDateStyle:", void, .{_dateStyle});
    }

    pub fn timeStyle(_self: *@This()) DateIntervalFormatterStyle {
        return objc.msgSend(_self, "timeStyle", DateIntervalFormatterStyle, .{});
    }

    pub fn setTimeStyle(_self: *@This(), _timeStyle: DateIntervalFormatterStyle) void {
        return objc.msgSend(_self, "setTimeStyle:", void, .{_timeStyle});
    }
};

pub const ISO8601DateFormatOptions = objc.NSUInteger;
pub const ISO8601DateFormatOptions_WithYear: objc.NSUInteger = 1;
pub const ISO8601DateFormatOptions_WithMonth: objc.NSUInteger = 2;
pub const ISO8601DateFormatOptions_WithWeekOfYear: objc.NSUInteger = 4;
pub const ISO8601DateFormatOptions_WithDay: objc.NSUInteger = 16;
pub const ISO8601DateFormatOptions_WithTime: objc.NSUInteger = 32;
pub const ISO8601DateFormatOptions_WithTimeZone: objc.NSUInteger = 64;
pub const ISO8601DateFormatOptions_WithSpaceBetweenDateAndTime: objc.NSUInteger = 128;
pub const ISO8601DateFormatOptions_WithDashSeparatorInDate: objc.NSUInteger = 256;
pub const ISO8601DateFormatOptions_WithColonSeparatorInTime: objc.NSUInteger = 512;
pub const ISO8601DateFormatOptions_WithColonSeparatorInTimeZone: objc.NSUInteger = 1024;
pub const ISO8601DateFormatOptions_WithFractionalSeconds: objc.NSUInteger = 2048;
pub const ISO8601DateFormatOptions_WithFullDate: objc.NSUInteger = 275;
pub const ISO8601DateFormatOptions_WithFullTime: objc.NSUInteger = 1632;
pub const ISO8601DateFormatOptions_WithInternetDateTime: objc.NSUInteger = 1907;

/// https://developer.apple.com/documentation/Foundation/NSISO8601DateFormatter?language=objc
pub const ISO8601DateFormatter = opaque {
    pub const Internal = objc.ExternClass("NSISO8601DateFormatter", @This(), Formatter, &.{SecureCoding});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn stringForObjectValue(_self: *@This(), _obj: ?objc.Id) ?*String {
        return objc.msgSend(_self, "stringForObjectValue:", ?*String, .{_obj});
    }

    pub fn attributedStringForObjectValueWithDefaultAttributes(_self: *@This(), _obj: ?objc.Id, _attrs: ?*anyopaque) ?*AttributedString {
        return objc.msgSend(_self, "attributedStringForObjectValue:withDefaultAttributes:", ?*AttributedString, .{ _obj, _attrs });
    }

    pub fn editingStringForObjectValue(_self: *@This(), _obj: ?objc.Id) ?*String {
        return objc.msgSend(_self, "editingStringForObjectValue:", ?*String, .{_obj});
    }

    pub fn getObjectValueForStringErrorDescription(_self: *@This(), _obj: ?*?objc.Id, _string: ?*String, _error: ?*?*String) objc.BOOL {
        return objc.msgSend(_self, "getObjectValue:forString:errorDescription:", objc.BOOL, .{ _obj, _string, _error });
    }

    pub fn isPartialStringValidNewEditingStringErrorDescription(_self: *@This(), _partialString: ?*String, _newString: ?*?*String, _error: ?*?*String) objc.BOOL {
        return objc.msgSend(_self, "isPartialStringValid:newEditingString:errorDescription:", objc.BOOL, .{ _partialString, _newString, _error });
    }

    pub fn isPartialStringValidProposedSelectedRangeOriginalStringOriginalSelectedRangeErrorDescription(
        _self: *@This(),
        _partialStringPtr: ?*?*String,
        _proposedSelRangePtr: RangePointer,
        _origString: ?*String,
        _origSelRange: Range,
        _error: ?*?*String,
    ) objc.BOOL {
        return objc.msgSend(_self, "isPartialStringValid:proposedSelectedRange:originalString:originalSelectedRange:errorDescription:", objc.BOOL, .{
            _partialStringPtr,
            _proposedSelRangePtr,
            _origString,
            _origSelRange,
            _error,
        });
    }

    pub fn supportsSecureCoding() objc.BOOL {
        return objc.msgSend(Internal.class(), "supportsSecureCoding", objc.BOOL, .{});
    }

    pub fn stringFromDate(_self: *@This(), _date: ?*Date) ?*String {
        return objc.msgSend(_self, "stringFromDate:", ?*String, .{_date});
    }

    pub fn dateFromString(_self: *@This(), _string: ?*String) ?*Date {
        return objc.msgSend(_self, "dateFromString:", ?*Date, .{_string});
    }

    pub fn stringFromDateTimeZoneFormatOptions(_date: ?*Date, _timeZone: ?*TimeZone, _formatOptions: ISO8601DateFormatOptions) ?*String {
        return objc.msgSend(Internal.class(), "stringFromDate:timeZone:formatOptions:", ?*String, .{ _date, _timeZone, _formatOptions });
    }

    pub fn timeZone(_self: *@This()) ?*TimeZone {
        return objc.msgSend(_self, "timeZone", ?*TimeZone, .{});
    }

    pub fn setTimeZone(_self: *@This(), _timeZone: ?*TimeZone) void {
        return objc.msgSend(_self, "setTimeZone:", void, .{_timeZone});
    }

    pub fn formatOptions(_self: *@This()) ISO8601DateFormatOptions {
        return objc.msgSend(_self, "formatOptions", ISO8601DateFormatOptions, .{});
    }

    pub fn setFormatOptions(_self: *@This(), _formatOptions: ISO8601DateFormatOptions) void {
        return objc.msgSend(_self, "setFormatOptions:", void, .{_formatOptions});
    }
};

pub const MassFormatterUnit = objc.NSInteger;
pub const MassFormatterUnit_Gram: objc.NSInteger = 11;
pub const MassFormatterUnit_Kilogram: objc.NSInteger = 14;
pub const MassFormatterUnit_Ounce: objc.NSInteger = 1537;
pub const MassFormatterUnit_Pound: objc.NSInteger = 1538;
pub const MassFormatterUnit_Stone: objc.NSInteger = 1539;

/// https://developer.apple.com/documentation/Foundation/NSMassFormatter?language=objc
pub const MassFormatter = opaque {
    pub const Internal = objc.ExternClass("NSMassFormatter", @This(), Formatter, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn stringForObjectValue(_self: *@This(), _obj: ?objc.Id) ?*String {
        return objc.msgSend(_self, "stringForObjectValue:", ?*String, .{_obj});
    }

    pub fn attributedStringForObjectValueWithDefaultAttributes(_self: *@This(), _obj: ?objc.Id, _attrs: ?*anyopaque) ?*AttributedString {
        return objc.msgSend(_self, "attributedStringForObjectValue:withDefaultAttributes:", ?*AttributedString, .{ _obj, _attrs });
    }

    pub fn editingStringForObjectValue(_self: *@This(), _obj: ?objc.Id) ?*String {
        return objc.msgSend(_self, "editingStringForObjectValue:", ?*String, .{_obj});
    }

    pub fn getObjectValueForStringErrorDescription(_self: *@This(), _obj: ?*?objc.Id, _string: ?*String, _error: ?*?*String) objc.BOOL {
        return objc.msgSend(_self, "getObjectValue:forString:errorDescription:", objc.BOOL, .{ _obj, _string, _error });
    }

    pub fn isPartialStringValidNewEditingStringErrorDescription(_self: *@This(), _partialString: ?*String, _newString: ?*?*String, _error: ?*?*String) objc.BOOL {
        return objc.msgSend(_self, "isPartialStringValid:newEditingString:errorDescription:", objc.BOOL, .{ _partialString, _newString, _error });
    }

    pub fn isPartialStringValidProposedSelectedRangeOriginalStringOriginalSelectedRangeErrorDescription(
        _self: *@This(),
        _partialStringPtr: ?*?*String,
        _proposedSelRangePtr: RangePointer,
        _origString: ?*String,
        _origSelRange: Range,
        _error: ?*?*String,
    ) objc.BOOL {
        return objc.msgSend(_self, "isPartialStringValid:proposedSelectedRange:originalString:originalSelectedRange:errorDescription:", objc.BOOL, .{
            _partialStringPtr,
            _proposedSelRangePtr,
            _origString,
            _origSelRange,
            _error,
        });
    }

    pub fn stringFromValueUnit(_self: *@This(), _value: f64, _unit: MassFormatterUnit) ?*String {
        return objc.msgSend(_self, "stringFromValue:unit:", ?*String, .{ _value, _unit });
    }

    pub fn stringFromKilograms(_self: *@This(), _numberInKilograms: f64) ?*String {
        return objc.msgSend(_self, "stringFromKilograms:", ?*String, .{_numberInKilograms});
    }

    pub fn unitStringFromValueUnit(_self: *@This(), _value: f64, _unit: MassFormatterUnit) ?*String {
        return objc.msgSend(_self, "unitStringFromValue:unit:", ?*String, .{ _value, _unit });
    }

    pub fn unitStringFromKilogramsUsedUnit(_self: *@This(), _numberInKilograms: f64, _unitp: ?*MassFormatterUnit) ?*String {
        return objc.msgSend(_self, "unitStringFromKilograms:usedUnit:", ?*String, .{ _numberInKilograms, _unitp });
    }

    pub fn numberFormatter(_self: *@This()) ?*NumberFormatter {
        return objc.msgSend(_self, "numberFormatter", ?*NumberFormatter, .{});
    }

    pub fn setNumberFormatter(_self: *@This(), _numberFormatter: ?*NumberFormatter) void {
        return objc.msgSend(_self, "setNumberFormatter:", void, .{_numberFormatter});
    }

    pub fn unitStyle(_self: *@This()) FormattingUnitStyle {
        return objc.msgSend(_self, "unitStyle", FormattingUnitStyle, .{});
    }

    pub fn setUnitStyle(_self: *@This(), _unitStyle: FormattingUnitStyle) void {
        return objc.msgSend(_self, "setUnitStyle:", void, .{_unitStyle});
    }

    pub fn isForPersonMassUse(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isForPersonMassUse", objc.BOOL, .{});
    }

    pub fn setForPersonMassUse(_self: *@This(), _forPersonMassUse: objc.BOOL) void {
        return objc.msgSend(_self, "setForPersonMassUse:", void, .{_forPersonMassUse});
    }
};

pub const LengthFormatterUnit = objc.NSInteger;
pub const LengthFormatterUnit_Millimeter: objc.NSInteger = 8;
pub const LengthFormatterUnit_Centimeter: objc.NSInteger = 9;
pub const LengthFormatterUnit_Meter: objc.NSInteger = 11;
pub const LengthFormatterUnit_Kilometer: objc.NSInteger = 14;
pub const LengthFormatterUnit_Inch: objc.NSInteger = 1281;
pub const LengthFormatterUnit_Foot: objc.NSInteger = 1282;
pub const LengthFormatterUnit_Yard: objc.NSInteger = 1283;
pub const LengthFormatterUnit_Mile: objc.NSInteger = 1284;

/// https://developer.apple.com/documentation/Foundation/NSLengthFormatter?language=objc
pub const LengthFormatter = opaque {
    pub const Internal = objc.ExternClass("NSLengthFormatter", @This(), Formatter, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn stringForObjectValue(_self: *@This(), _obj: ?objc.Id) ?*String {
        return objc.msgSend(_self, "stringForObjectValue:", ?*String, .{_obj});
    }

    pub fn attributedStringForObjectValueWithDefaultAttributes(_self: *@This(), _obj: ?objc.Id, _attrs: ?*anyopaque) ?*AttributedString {
        return objc.msgSend(_self, "attributedStringForObjectValue:withDefaultAttributes:", ?*AttributedString, .{ _obj, _attrs });
    }

    pub fn editingStringForObjectValue(_self: *@This(), _obj: ?objc.Id) ?*String {
        return objc.msgSend(_self, "editingStringForObjectValue:", ?*String, .{_obj});
    }

    pub fn getObjectValueForStringErrorDescription(_self: *@This(), _obj: ?*?objc.Id, _string: ?*String, _error: ?*?*String) objc.BOOL {
        return objc.msgSend(_self, "getObjectValue:forString:errorDescription:", objc.BOOL, .{ _obj, _string, _error });
    }

    pub fn isPartialStringValidNewEditingStringErrorDescription(_self: *@This(), _partialString: ?*String, _newString: ?*?*String, _error: ?*?*String) objc.BOOL {
        return objc.msgSend(_self, "isPartialStringValid:newEditingString:errorDescription:", objc.BOOL, .{ _partialString, _newString, _error });
    }

    pub fn isPartialStringValidProposedSelectedRangeOriginalStringOriginalSelectedRangeErrorDescription(
        _self: *@This(),
        _partialStringPtr: ?*?*String,
        _proposedSelRangePtr: RangePointer,
        _origString: ?*String,
        _origSelRange: Range,
        _error: ?*?*String,
    ) objc.BOOL {
        return objc.msgSend(_self, "isPartialStringValid:proposedSelectedRange:originalString:originalSelectedRange:errorDescription:", objc.BOOL, .{
            _partialStringPtr,
            _proposedSelRangePtr,
            _origString,
            _origSelRange,
            _error,
        });
    }

    pub fn stringFromValueUnit(_self: *@This(), _value: f64, _unit: LengthFormatterUnit) ?*String {
        return objc.msgSend(_self, "stringFromValue:unit:", ?*String, .{ _value, _unit });
    }

    pub fn stringFromMeters(_self: *@This(), _numberInMeters: f64) ?*String {
        return objc.msgSend(_self, "stringFromMeters:", ?*String, .{_numberInMeters});
    }

    pub fn unitStringFromValueUnit(_self: *@This(), _value: f64, _unit: LengthFormatterUnit) ?*String {
        return objc.msgSend(_self, "unitStringFromValue:unit:", ?*String, .{ _value, _unit });
    }

    pub fn unitStringFromMetersUsedUnit(_self: *@This(), _numberInMeters: f64, _unitp: ?*LengthFormatterUnit) ?*String {
        return objc.msgSend(_self, "unitStringFromMeters:usedUnit:", ?*String, .{ _numberInMeters, _unitp });
    }

    pub fn numberFormatter(_self: *@This()) ?*NumberFormatter {
        return objc.msgSend(_self, "numberFormatter", ?*NumberFormatter, .{});
    }

    pub fn setNumberFormatter(_self: *@This(), _numberFormatter: ?*NumberFormatter) void {
        return objc.msgSend(_self, "setNumberFormatter:", void, .{_numberFormatter});
    }

    pub fn unitStyle(_self: *@This()) FormattingUnitStyle {
        return objc.msgSend(_self, "unitStyle", FormattingUnitStyle, .{});
    }

    pub fn setUnitStyle(_self: *@This(), _unitStyle: FormattingUnitStyle) void {
        return objc.msgSend(_self, "setUnitStyle:", void, .{_unitStyle});
    }

    pub fn isForPersonHeightUse(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isForPersonHeightUse", objc.BOOL, .{});
    }

    pub fn setForPersonHeightUse(_self: *@This(), _forPersonHeightUse: objc.BOOL) void {
        return objc.msgSend(_self, "setForPersonHeightUse:", void, .{_forPersonHeightUse});
    }
};

pub const EnergyFormatterUnit = objc.NSInteger;
pub const EnergyFormatterUnit_Joule: objc.NSInteger = 11;
pub const EnergyFormatterUnit_Kilojoule: objc.NSInteger = 14;
pub const EnergyFormatterUnit_Calorie: objc.NSInteger = 1793;
pub const EnergyFormatterUnit_Kilocalorie: objc.NSInteger = 1794;

/// https://developer.apple.com/documentation/Foundation/NSEnergyFormatter?language=objc
pub const EnergyFormatter = opaque {
    pub const Internal = objc.ExternClass("NSEnergyFormatter", @This(), Formatter, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn stringForObjectValue(_self: *@This(), _obj: ?objc.Id) ?*String {
        return objc.msgSend(_self, "stringForObjectValue:", ?*String, .{_obj});
    }

    pub fn attributedStringForObjectValueWithDefaultAttributes(_self: *@This(), _obj: ?objc.Id, _attrs: ?*anyopaque) ?*AttributedString {
        return objc.msgSend(_self, "attributedStringForObjectValue:withDefaultAttributes:", ?*AttributedString, .{ _obj, _attrs });
    }

    pub fn editingStringForObjectValue(_self: *@This(), _obj: ?objc.Id) ?*String {
        return objc.msgSend(_self, "editingStringForObjectValue:", ?*String, .{_obj});
    }

    pub fn getObjectValueForStringErrorDescription(_self: *@This(), _obj: ?*?objc.Id, _string: ?*String, _error: ?*?*String) objc.BOOL {
        return objc.msgSend(_self, "getObjectValue:forString:errorDescription:", objc.BOOL, .{ _obj, _string, _error });
    }

    pub fn isPartialStringValidNewEditingStringErrorDescription(_self: *@This(), _partialString: ?*String, _newString: ?*?*String, _error: ?*?*String) objc.BOOL {
        return objc.msgSend(_self, "isPartialStringValid:newEditingString:errorDescription:", objc.BOOL, .{ _partialString, _newString, _error });
    }

    pub fn isPartialStringValidProposedSelectedRangeOriginalStringOriginalSelectedRangeErrorDescription(
        _self: *@This(),
        _partialStringPtr: ?*?*String,
        _proposedSelRangePtr: RangePointer,
        _origString: ?*String,
        _origSelRange: Range,
        _error: ?*?*String,
    ) objc.BOOL {
        return objc.msgSend(_self, "isPartialStringValid:proposedSelectedRange:originalString:originalSelectedRange:errorDescription:", objc.BOOL, .{
            _partialStringPtr,
            _proposedSelRangePtr,
            _origString,
            _origSelRange,
            _error,
        });
    }

    pub fn stringFromValueUnit(_self: *@This(), _value: f64, _unit: EnergyFormatterUnit) ?*String {
        return objc.msgSend(_self, "stringFromValue:unit:", ?*String, .{ _value, _unit });
    }

    pub fn stringFromJoules(_self: *@This(), _numberInJoules: f64) ?*String {
        return objc.msgSend(_self, "stringFromJoules:", ?*String, .{_numberInJoules});
    }

    pub fn unitStringFromValueUnit(_self: *@This(), _value: f64, _unit: EnergyFormatterUnit) ?*String {
        return objc.msgSend(_self, "unitStringFromValue:unit:", ?*String, .{ _value, _unit });
    }

    pub fn unitStringFromJoulesUsedUnit(_self: *@This(), _numberInJoules: f64, _unitp: ?*EnergyFormatterUnit) ?*String {
        return objc.msgSend(_self, "unitStringFromJoules:usedUnit:", ?*String, .{ _numberInJoules, _unitp });
    }

    pub fn numberFormatter(_self: *@This()) ?*NumberFormatter {
        return objc.msgSend(_self, "numberFormatter", ?*NumberFormatter, .{});
    }

    pub fn setNumberFormatter(_self: *@This(), _numberFormatter: ?*NumberFormatter) void {
        return objc.msgSend(_self, "setNumberFormatter:", void, .{_numberFormatter});
    }

    pub fn unitStyle(_self: *@This()) FormattingUnitStyle {
        return objc.msgSend(_self, "unitStyle", FormattingUnitStyle, .{});
    }

    pub fn setUnitStyle(_self: *@This(), _unitStyle: FormattingUnitStyle) void {
        return objc.msgSend(_self, "setUnitStyle:", void, .{_unitStyle});
    }

    pub fn isForFoodEnergyUse(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isForFoodEnergyUse", objc.BOOL, .{});
    }

    pub fn setForFoodEnergyUse(_self: *@This(), _forFoodEnergyUse: objc.BOOL) void {
        return objc.msgSend(_self, "setForFoodEnergyUse:", void, .{_forFoodEnergyUse});
    }
};

/// https://developer.apple.com/documentation/Foundation/NSUnitConverter?language=objc
pub const UnitConverter = opaque {
    pub const Internal = objc.ExternClass("NSUnitConverter", @This(), objc.NSObject, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn baseUnitValueFromValue(_self: *@This(), _value: f64) f64 {
        return objc.msgSend(_self, "baseUnitValueFromValue:", f64, .{_value});
    }

    pub fn valueFromBaseUnitValue(_self: *@This(), _baseUnitValue: f64) f64 {
        return objc.msgSend(_self, "valueFromBaseUnitValue:", f64, .{_baseUnitValue});
    }
};

/// https://developer.apple.com/documentation/Foundation/NSUnitConverterLinear?language=objc
pub const UnitConverterLinear = opaque {
    pub const Internal = objc.ExternClass("NSUnitConverterLinear", @This(), UnitConverter, &.{SecureCoding});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn baseUnitValueFromValue(_self: *@This(), _value: f64) f64 {
        return objc.msgSend(_self, "baseUnitValueFromValue:", f64, .{_value});
    }

    pub fn valueFromBaseUnitValue(_self: *@This(), _baseUnitValue: f64) f64 {
        return objc.msgSend(_self, "valueFromBaseUnitValue:", f64, .{_baseUnitValue});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn supportsSecureCoding() objc.BOOL {
        return objc.msgSend(Internal.class(), "supportsSecureCoding", objc.BOOL, .{});
    }

    pub fn initWithCoefficient(_self: *@This(), _coefficient: f64) *@This() {
        return objc.msgSend(_self, "initWithCoefficient:", *@This(), .{_coefficient});
    }

    pub fn initWithCoefficientConstant(_self: *@This(), _coefficient: f64, _constant: f64) *@This() {
        return objc.msgSend(_self, "initWithCoefficient:constant:", *@This(), .{ _coefficient, _constant });
    }

    pub fn coefficient(_self: *@This()) f64 {
        return objc.msgSend(_self, "coefficient", f64, .{});
    }

    pub fn constant(_self: *@This()) f64 {
        return objc.msgSend(_self, "constant", f64, .{});
    }
};

/// https://developer.apple.com/documentation/Foundation/NSUnit?language=objc
pub const Unit = opaque {
    pub const Internal = objc.ExternClass("NSUnit", @This(), objc.NSObject, &.{ Copying, SecureCoding });
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn supportsSecureCoding() objc.BOOL {
        return objc.msgSend(Internal.class(), "supportsSecureCoding", objc.BOOL, .{});
    }

    pub fn initWithSymbol(_self: *@This(), _symbol: ?*String) *@This() {
        return objc.msgSend(_self, "initWithSymbol:", *@This(), .{_symbol});
    }

    pub fn symbol(_self: *@This()) ?*String {
        return objc.msgSend(_self, "symbol", ?*String, .{});
    }
};

/// https://developer.apple.com/documentation/Foundation/NSDimension?language=objc
pub const Dimension = opaque {
    pub const Internal = objc.ExternClass("NSDimension", @This(), Unit, &.{SecureCoding});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn supportsSecureCoding() objc.BOOL {
        return objc.msgSend(Internal.class(), "supportsSecureCoding", objc.BOOL, .{});
    }

    pub fn initWithSymbol(_self: *@This(), _symbol: ?*String) *@This() {
        return objc.msgSend(_self, "initWithSymbol:", *@This(), .{_symbol});
    }

    pub fn symbol(_self: *@This()) ?*String {
        return objc.msgSend(_self, "symbol", ?*String, .{});
    }

    pub fn initWithSymbolConverter(_self: *@This(), _symbol: ?*String, _converter: ?*UnitConverter) *@This() {
        return objc.msgSend(_self, "initWithSymbol:converter:", *@This(), .{ _symbol, _converter });
    }

    pub fn baseUnit() *@This() {
        return objc.msgSend(Internal.class(), "baseUnit", *@This(), .{});
    }

    pub fn converter(_self: *@This()) ?*UnitConverter {
        return objc.msgSend(_self, "converter", ?*UnitConverter, .{});
    }
};

/// https://developer.apple.com/documentation/Foundation/NSUnitAcceleration?language=objc
pub const UnitAcceleration = opaque {
    pub const Internal = objc.ExternClass("NSUnitAcceleration", @This(), Dimension, &.{SecureCoding});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn supportsSecureCoding() objc.BOOL {
        return objc.msgSend(Internal.class(), "supportsSecureCoding", objc.BOOL, .{});
    }

    pub fn initWithSymbol(_self: *@This(), _symbol: ?*String) *@This() {
        return objc.msgSend(_self, "initWithSymbol:", *@This(), .{_symbol});
    }

    pub fn symbol(_self: *@This()) ?*String {
        return objc.msgSend(_self, "symbol", ?*String, .{});
    }

    pub fn initWithSymbolConverter(_self: *@This(), _symbol: ?*String, _converter: ?*UnitConverter) *@This() {
        return objc.msgSend(_self, "initWithSymbol:converter:", *@This(), .{ _symbol, _converter });
    }

    pub fn baseUnit() *@This() {
        return objc.msgSend(Internal.class(), "baseUnit", *@This(), .{});
    }

    pub fn converter(_self: *@This()) ?*UnitConverter {
        return objc.msgSend(_self, "converter", ?*UnitConverter, .{});
    }

    pub fn metersPerSecondSquared() ?*UnitAcceleration {
        return objc.msgSend(Internal.class(), "metersPerSecondSquared", ?*UnitAcceleration, .{});
    }

    pub fn gravity() ?*UnitAcceleration {
        return objc.msgSend(Internal.class(), "gravity", ?*UnitAcceleration, .{});
    }
};

/// https://developer.apple.com/documentation/Foundation/NSUnitAngle?language=objc
pub const UnitAngle = opaque {
    pub const Internal = objc.ExternClass("NSUnitAngle", @This(), Dimension, &.{SecureCoding});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn supportsSecureCoding() objc.BOOL {
        return objc.msgSend(Internal.class(), "supportsSecureCoding", objc.BOOL, .{});
    }

    pub fn initWithSymbol(_self: *@This(), _symbol: ?*String) *@This() {
        return objc.msgSend(_self, "initWithSymbol:", *@This(), .{_symbol});
    }

    pub fn symbol(_self: *@This()) ?*String {
        return objc.msgSend(_self, "symbol", ?*String, .{});
    }

    pub fn initWithSymbolConverter(_self: *@This(), _symbol: ?*String, _converter: ?*UnitConverter) *@This() {
        return objc.msgSend(_self, "initWithSymbol:converter:", *@This(), .{ _symbol, _converter });
    }

    pub fn baseUnit() *@This() {
        return objc.msgSend(Internal.class(), "baseUnit", *@This(), .{});
    }

    pub fn converter(_self: *@This()) ?*UnitConverter {
        return objc.msgSend(_self, "converter", ?*UnitConverter, .{});
    }

    pub fn degrees() ?*UnitAngle {
        return objc.msgSend(Internal.class(), "degrees", ?*UnitAngle, .{});
    }

    pub fn arcMinutes() ?*UnitAngle {
        return objc.msgSend(Internal.class(), "arcMinutes", ?*UnitAngle, .{});
    }

    pub fn arcSeconds() ?*UnitAngle {
        return objc.msgSend(Internal.class(), "arcSeconds", ?*UnitAngle, .{});
    }

    pub fn radians() ?*UnitAngle {
        return objc.msgSend(Internal.class(), "radians", ?*UnitAngle, .{});
    }

    pub fn gradians() ?*UnitAngle {
        return objc.msgSend(Internal.class(), "gradians", ?*UnitAngle, .{});
    }

    pub fn revolutions() ?*UnitAngle {
        return objc.msgSend(Internal.class(), "revolutions", ?*UnitAngle, .{});
    }
};

/// https://developer.apple.com/documentation/Foundation/NSUnitArea?language=objc
pub const UnitArea = opaque {
    pub const Internal = objc.ExternClass("NSUnitArea", @This(), Dimension, &.{SecureCoding});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn supportsSecureCoding() objc.BOOL {
        return objc.msgSend(Internal.class(), "supportsSecureCoding", objc.BOOL, .{});
    }

    pub fn initWithSymbol(_self: *@This(), _symbol: ?*String) *@This() {
        return objc.msgSend(_self, "initWithSymbol:", *@This(), .{_symbol});
    }

    pub fn symbol(_self: *@This()) ?*String {
        return objc.msgSend(_self, "symbol", ?*String, .{});
    }

    pub fn initWithSymbolConverter(_self: *@This(), _symbol: ?*String, _converter: ?*UnitConverter) *@This() {
        return objc.msgSend(_self, "initWithSymbol:converter:", *@This(), .{ _symbol, _converter });
    }

    pub fn baseUnit() *@This() {
        return objc.msgSend(Internal.class(), "baseUnit", *@This(), .{});
    }

    pub fn converter(_self: *@This()) ?*UnitConverter {
        return objc.msgSend(_self, "converter", ?*UnitConverter, .{});
    }

    pub fn squareMegameters() ?*UnitArea {
        return objc.msgSend(Internal.class(), "squareMegameters", ?*UnitArea, .{});
    }

    pub fn squareKilometers() ?*UnitArea {
        return objc.msgSend(Internal.class(), "squareKilometers", ?*UnitArea, .{});
    }

    pub fn squareMeters() ?*UnitArea {
        return objc.msgSend(Internal.class(), "squareMeters", ?*UnitArea, .{});
    }

    pub fn squareCentimeters() ?*UnitArea {
        return objc.msgSend(Internal.class(), "squareCentimeters", ?*UnitArea, .{});
    }

    pub fn squareMillimeters() ?*UnitArea {
        return objc.msgSend(Internal.class(), "squareMillimeters", ?*UnitArea, .{});
    }

    pub fn squareMicrometers() ?*UnitArea {
        return objc.msgSend(Internal.class(), "squareMicrometers", ?*UnitArea, .{});
    }

    pub fn squareNanometers() ?*UnitArea {
        return objc.msgSend(Internal.class(), "squareNanometers", ?*UnitArea, .{});
    }

    pub fn squareInches() ?*UnitArea {
        return objc.msgSend(Internal.class(), "squareInches", ?*UnitArea, .{});
    }

    pub fn squareFeet() ?*UnitArea {
        return objc.msgSend(Internal.class(), "squareFeet", ?*UnitArea, .{});
    }

    pub fn squareYards() ?*UnitArea {
        return objc.msgSend(Internal.class(), "squareYards", ?*UnitArea, .{});
    }

    pub fn squareMiles() ?*UnitArea {
        return objc.msgSend(Internal.class(), "squareMiles", ?*UnitArea, .{});
    }

    pub fn acres() ?*UnitArea {
        return objc.msgSend(Internal.class(), "acres", ?*UnitArea, .{});
    }

    pub fn ares() ?*UnitArea {
        return objc.msgSend(Internal.class(), "ares", ?*UnitArea, .{});
    }

    pub fn hectares() ?*UnitArea {
        return objc.msgSend(Internal.class(), "hectares", ?*UnitArea, .{});
    }
};

/// https://developer.apple.com/documentation/Foundation/NSUnitConcentrationMass?language=objc
pub const UnitConcentrationMass = opaque {
    pub const Internal = objc.ExternClass("NSUnitConcentrationMass", @This(), Dimension, &.{SecureCoding});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn supportsSecureCoding() objc.BOOL {
        return objc.msgSend(Internal.class(), "supportsSecureCoding", objc.BOOL, .{});
    }

    pub fn initWithSymbol(_self: *@This(), _symbol: ?*String) *@This() {
        return objc.msgSend(_self, "initWithSymbol:", *@This(), .{_symbol});
    }

    pub fn symbol(_self: *@This()) ?*String {
        return objc.msgSend(_self, "symbol", ?*String, .{});
    }

    pub fn initWithSymbolConverter(_self: *@This(), _symbol: ?*String, _converter: ?*UnitConverter) *@This() {
        return objc.msgSend(_self, "initWithSymbol:converter:", *@This(), .{ _symbol, _converter });
    }

    pub fn baseUnit() *@This() {
        return objc.msgSend(Internal.class(), "baseUnit", *@This(), .{});
    }

    pub fn converter(_self: *@This()) ?*UnitConverter {
        return objc.msgSend(_self, "converter", ?*UnitConverter, .{});
    }

    pub fn millimolesPerLiterWithGramsPerMole(_gramsPerMole: f64) ?*UnitConcentrationMass {
        return objc.msgSend(Internal.class(), "millimolesPerLiterWithGramsPerMole:", ?*UnitConcentrationMass, .{_gramsPerMole});
    }

    pub fn gramsPerLiter() ?*UnitConcentrationMass {
        return objc.msgSend(Internal.class(), "gramsPerLiter", ?*UnitConcentrationMass, .{});
    }

    pub fn milligramsPerDeciliter() ?*UnitConcentrationMass {
        return objc.msgSend(Internal.class(), "milligramsPerDeciliter", ?*UnitConcentrationMass, .{});
    }
};

/// https://developer.apple.com/documentation/Foundation/NSUnitDispersion?language=objc
pub const UnitDispersion = opaque {
    pub const Internal = objc.ExternClass("NSUnitDispersion", @This(), Dimension, &.{SecureCoding});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn supportsSecureCoding() objc.BOOL {
        return objc.msgSend(Internal.class(), "supportsSecureCoding", objc.BOOL, .{});
    }

    pub fn initWithSymbol(_self: *@This(), _symbol: ?*String) *@This() {
        return objc.msgSend(_self, "initWithSymbol:", *@This(), .{_symbol});
    }

    pub fn symbol(_self: *@This()) ?*String {
        return objc.msgSend(_self, "symbol", ?*String, .{});
    }

    pub fn initWithSymbolConverter(_self: *@This(), _symbol: ?*String, _converter: ?*UnitConverter) *@This() {
        return objc.msgSend(_self, "initWithSymbol:converter:", *@This(), .{ _symbol, _converter });
    }

    pub fn baseUnit() *@This() {
        return objc.msgSend(Internal.class(), "baseUnit", *@This(), .{});
    }

    pub fn converter(_self: *@This()) ?*UnitConverter {
        return objc.msgSend(_self, "converter", ?*UnitConverter, .{});
    }

    pub fn partsPerMillion() ?*UnitDispersion {
        return objc.msgSend(Internal.class(), "partsPerMillion", ?*UnitDispersion, .{});
    }
};

/// https://developer.apple.com/documentation/Foundation/NSUnitDuration?language=objc
pub const UnitDuration = opaque {
    pub const Internal = objc.ExternClass("NSUnitDuration", @This(), Dimension, &.{SecureCoding});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn supportsSecureCoding() objc.BOOL {
        return objc.msgSend(Internal.class(), "supportsSecureCoding", objc.BOOL, .{});
    }

    pub fn initWithSymbol(_self: *@This(), _symbol: ?*String) *@This() {
        return objc.msgSend(_self, "initWithSymbol:", *@This(), .{_symbol});
    }

    pub fn symbol(_self: *@This()) ?*String {
        return objc.msgSend(_self, "symbol", ?*String, .{});
    }

    pub fn initWithSymbolConverter(_self: *@This(), _symbol: ?*String, _converter: ?*UnitConverter) *@This() {
        return objc.msgSend(_self, "initWithSymbol:converter:", *@This(), .{ _symbol, _converter });
    }

    pub fn baseUnit() *@This() {
        return objc.msgSend(Internal.class(), "baseUnit", *@This(), .{});
    }

    pub fn converter(_self: *@This()) ?*UnitConverter {
        return objc.msgSend(_self, "converter", ?*UnitConverter, .{});
    }

    pub fn hours() ?*UnitDuration {
        return objc.msgSend(Internal.class(), "hours", ?*UnitDuration, .{});
    }

    pub fn minutes() ?*UnitDuration {
        return objc.msgSend(Internal.class(), "minutes", ?*UnitDuration, .{});
    }

    pub fn seconds() ?*UnitDuration {
        return objc.msgSend(Internal.class(), "seconds", ?*UnitDuration, .{});
    }

    pub fn milliseconds() ?*UnitDuration {
        return objc.msgSend(Internal.class(), "milliseconds", ?*UnitDuration, .{});
    }

    pub fn microseconds() ?*UnitDuration {
        return objc.msgSend(Internal.class(), "microseconds", ?*UnitDuration, .{});
    }

    pub fn nanoseconds() ?*UnitDuration {
        return objc.msgSend(Internal.class(), "nanoseconds", ?*UnitDuration, .{});
    }

    pub fn picoseconds() ?*UnitDuration {
        return objc.msgSend(Internal.class(), "picoseconds", ?*UnitDuration, .{});
    }
};

/// https://developer.apple.com/documentation/Foundation/NSUnitElectricCharge?language=objc
pub const UnitElectricCharge = opaque {
    pub const Internal = objc.ExternClass("NSUnitElectricCharge", @This(), Dimension, &.{SecureCoding});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn supportsSecureCoding() objc.BOOL {
        return objc.msgSend(Internal.class(), "supportsSecureCoding", objc.BOOL, .{});
    }

    pub fn initWithSymbol(_self: *@This(), _symbol: ?*String) *@This() {
        return objc.msgSend(_self, "initWithSymbol:", *@This(), .{_symbol});
    }

    pub fn symbol(_self: *@This()) ?*String {
        return objc.msgSend(_self, "symbol", ?*String, .{});
    }

    pub fn initWithSymbolConverter(_self: *@This(), _symbol: ?*String, _converter: ?*UnitConverter) *@This() {
        return objc.msgSend(_self, "initWithSymbol:converter:", *@This(), .{ _symbol, _converter });
    }

    pub fn baseUnit() *@This() {
        return objc.msgSend(Internal.class(), "baseUnit", *@This(), .{});
    }

    pub fn converter(_self: *@This()) ?*UnitConverter {
        return objc.msgSend(_self, "converter", ?*UnitConverter, .{});
    }

    pub fn coulombs() ?*UnitElectricCharge {
        return objc.msgSend(Internal.class(), "coulombs", ?*UnitElectricCharge, .{});
    }

    pub fn megaampereHours() ?*UnitElectricCharge {
        return objc.msgSend(Internal.class(), "megaampereHours", ?*UnitElectricCharge, .{});
    }

    pub fn kiloampereHours() ?*UnitElectricCharge {
        return objc.msgSend(Internal.class(), "kiloampereHours", ?*UnitElectricCharge, .{});
    }

    pub fn ampereHours() ?*UnitElectricCharge {
        return objc.msgSend(Internal.class(), "ampereHours", ?*UnitElectricCharge, .{});
    }

    pub fn milliampereHours() ?*UnitElectricCharge {
        return objc.msgSend(Internal.class(), "milliampereHours", ?*UnitElectricCharge, .{});
    }

    pub fn microampereHours() ?*UnitElectricCharge {
        return objc.msgSend(Internal.class(), "microampereHours", ?*UnitElectricCharge, .{});
    }
};

/// https://developer.apple.com/documentation/Foundation/NSUnitElectricCurrent?language=objc
pub const UnitElectricCurrent = opaque {
    pub const Internal = objc.ExternClass("NSUnitElectricCurrent", @This(), Dimension, &.{SecureCoding});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn supportsSecureCoding() objc.BOOL {
        return objc.msgSend(Internal.class(), "supportsSecureCoding", objc.BOOL, .{});
    }

    pub fn initWithSymbol(_self: *@This(), _symbol: ?*String) *@This() {
        return objc.msgSend(_self, "initWithSymbol:", *@This(), .{_symbol});
    }

    pub fn symbol(_self: *@This()) ?*String {
        return objc.msgSend(_self, "symbol", ?*String, .{});
    }

    pub fn initWithSymbolConverter(_self: *@This(), _symbol: ?*String, _converter: ?*UnitConverter) *@This() {
        return objc.msgSend(_self, "initWithSymbol:converter:", *@This(), .{ _symbol, _converter });
    }

    pub fn baseUnit() *@This() {
        return objc.msgSend(Internal.class(), "baseUnit", *@This(), .{});
    }

    pub fn converter(_self: *@This()) ?*UnitConverter {
        return objc.msgSend(_self, "converter", ?*UnitConverter, .{});
    }

    pub fn megaamperes() ?*UnitElectricCurrent {
        return objc.msgSend(Internal.class(), "megaamperes", ?*UnitElectricCurrent, .{});
    }

    pub fn kiloamperes() ?*UnitElectricCurrent {
        return objc.msgSend(Internal.class(), "kiloamperes", ?*UnitElectricCurrent, .{});
    }

    pub fn amperes() ?*UnitElectricCurrent {
        return objc.msgSend(Internal.class(), "amperes", ?*UnitElectricCurrent, .{});
    }

    pub fn milliamperes() ?*UnitElectricCurrent {
        return objc.msgSend(Internal.class(), "milliamperes", ?*UnitElectricCurrent, .{});
    }

    pub fn microamperes() ?*UnitElectricCurrent {
        return objc.msgSend(Internal.class(), "microamperes", ?*UnitElectricCurrent, .{});
    }
};

/// https://developer.apple.com/documentation/Foundation/NSUnitElectricPotentialDifference?language=objc
pub const UnitElectricPotentialDifference = opaque {
    pub const Internal = objc.ExternClass("NSUnitElectricPotentialDifference", @This(), Dimension, &.{SecureCoding});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn supportsSecureCoding() objc.BOOL {
        return objc.msgSend(Internal.class(), "supportsSecureCoding", objc.BOOL, .{});
    }

    pub fn initWithSymbol(_self: *@This(), _symbol: ?*String) *@This() {
        return objc.msgSend(_self, "initWithSymbol:", *@This(), .{_symbol});
    }

    pub fn symbol(_self: *@This()) ?*String {
        return objc.msgSend(_self, "symbol", ?*String, .{});
    }

    pub fn initWithSymbolConverter(_self: *@This(), _symbol: ?*String, _converter: ?*UnitConverter) *@This() {
        return objc.msgSend(_self, "initWithSymbol:converter:", *@This(), .{ _symbol, _converter });
    }

    pub fn baseUnit() *@This() {
        return objc.msgSend(Internal.class(), "baseUnit", *@This(), .{});
    }

    pub fn converter(_self: *@This()) ?*UnitConverter {
        return objc.msgSend(_self, "converter", ?*UnitConverter, .{});
    }

    pub fn megavolts() ?*UnitElectricPotentialDifference {
        return objc.msgSend(Internal.class(), "megavolts", ?*UnitElectricPotentialDifference, .{});
    }

    pub fn kilovolts() ?*UnitElectricPotentialDifference {
        return objc.msgSend(Internal.class(), "kilovolts", ?*UnitElectricPotentialDifference, .{});
    }

    pub fn volts() ?*UnitElectricPotentialDifference {
        return objc.msgSend(Internal.class(), "volts", ?*UnitElectricPotentialDifference, .{});
    }

    pub fn millivolts() ?*UnitElectricPotentialDifference {
        return objc.msgSend(Internal.class(), "millivolts", ?*UnitElectricPotentialDifference, .{});
    }

    pub fn microvolts() ?*UnitElectricPotentialDifference {
        return objc.msgSend(Internal.class(), "microvolts", ?*UnitElectricPotentialDifference, .{});
    }
};

/// https://developer.apple.com/documentation/Foundation/NSUnitElectricResistance?language=objc
pub const UnitElectricResistance = opaque {
    pub const Internal = objc.ExternClass("NSUnitElectricResistance", @This(), Dimension, &.{SecureCoding});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn supportsSecureCoding() objc.BOOL {
        return objc.msgSend(Internal.class(), "supportsSecureCoding", objc.BOOL, .{});
    }

    pub fn initWithSymbol(_self: *@This(), _symbol: ?*String) *@This() {
        return objc.msgSend(_self, "initWithSymbol:", *@This(), .{_symbol});
    }

    pub fn symbol(_self: *@This()) ?*String {
        return objc.msgSend(_self, "symbol", ?*String, .{});
    }

    pub fn initWithSymbolConverter(_self: *@This(), _symbol: ?*String, _converter: ?*UnitConverter) *@This() {
        return objc.msgSend(_self, "initWithSymbol:converter:", *@This(), .{ _symbol, _converter });
    }

    pub fn baseUnit() *@This() {
        return objc.msgSend(Internal.class(), "baseUnit", *@This(), .{});
    }

    pub fn converter(_self: *@This()) ?*UnitConverter {
        return objc.msgSend(_self, "converter", ?*UnitConverter, .{});
    }

    pub fn megaohms() ?*UnitElectricResistance {
        return objc.msgSend(Internal.class(), "megaohms", ?*UnitElectricResistance, .{});
    }

    pub fn kiloohms() ?*UnitElectricResistance {
        return objc.msgSend(Internal.class(), "kiloohms", ?*UnitElectricResistance, .{});
    }

    pub fn ohms() ?*UnitElectricResistance {
        return objc.msgSend(Internal.class(), "ohms", ?*UnitElectricResistance, .{});
    }

    pub fn milliohms() ?*UnitElectricResistance {
        return objc.msgSend(Internal.class(), "milliohms", ?*UnitElectricResistance, .{});
    }

    pub fn microohms() ?*UnitElectricResistance {
        return objc.msgSend(Internal.class(), "microohms", ?*UnitElectricResistance, .{});
    }
};

/// https://developer.apple.com/documentation/Foundation/NSUnitEnergy?language=objc
pub const UnitEnergy = opaque {
    pub const Internal = objc.ExternClass("NSUnitEnergy", @This(), Dimension, &.{SecureCoding});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn supportsSecureCoding() objc.BOOL {
        return objc.msgSend(Internal.class(), "supportsSecureCoding", objc.BOOL, .{});
    }

    pub fn initWithSymbol(_self: *@This(), _symbol: ?*String) *@This() {
        return objc.msgSend(_self, "initWithSymbol:", *@This(), .{_symbol});
    }

    pub fn symbol(_self: *@This()) ?*String {
        return objc.msgSend(_self, "symbol", ?*String, .{});
    }

    pub fn initWithSymbolConverter(_self: *@This(), _symbol: ?*String, _converter: ?*UnitConverter) *@This() {
        return objc.msgSend(_self, "initWithSymbol:converter:", *@This(), .{ _symbol, _converter });
    }

    pub fn baseUnit() *@This() {
        return objc.msgSend(Internal.class(), "baseUnit", *@This(), .{});
    }

    pub fn converter(_self: *@This()) ?*UnitConverter {
        return objc.msgSend(_self, "converter", ?*UnitConverter, .{});
    }

    pub fn kilojoules() ?*UnitEnergy {
        return objc.msgSend(Internal.class(), "kilojoules", ?*UnitEnergy, .{});
    }

    pub fn joules() ?*UnitEnergy {
        return objc.msgSend(Internal.class(), "joules", ?*UnitEnergy, .{});
    }

    pub fn kilocalories() ?*UnitEnergy {
        return objc.msgSend(Internal.class(), "kilocalories", ?*UnitEnergy, .{});
    }

    pub fn calories() ?*UnitEnergy {
        return objc.msgSend(Internal.class(), "calories", ?*UnitEnergy, .{});
    }

    pub fn kilowattHours() ?*UnitEnergy {
        return objc.msgSend(Internal.class(), "kilowattHours", ?*UnitEnergy, .{});
    }
};

/// https://developer.apple.com/documentation/Foundation/NSUnitFrequency?language=objc
pub const UnitFrequency = opaque {
    pub const Internal = objc.ExternClass("NSUnitFrequency", @This(), Dimension, &.{SecureCoding});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn supportsSecureCoding() objc.BOOL {
        return objc.msgSend(Internal.class(), "supportsSecureCoding", objc.BOOL, .{});
    }

    pub fn initWithSymbol(_self: *@This(), _symbol: ?*String) *@This() {
        return objc.msgSend(_self, "initWithSymbol:", *@This(), .{_symbol});
    }

    pub fn symbol(_self: *@This()) ?*String {
        return objc.msgSend(_self, "symbol", ?*String, .{});
    }

    pub fn initWithSymbolConverter(_self: *@This(), _symbol: ?*String, _converter: ?*UnitConverter) *@This() {
        return objc.msgSend(_self, "initWithSymbol:converter:", *@This(), .{ _symbol, _converter });
    }

    pub fn baseUnit() *@This() {
        return objc.msgSend(Internal.class(), "baseUnit", *@This(), .{});
    }

    pub fn converter(_self: *@This()) ?*UnitConverter {
        return objc.msgSend(_self, "converter", ?*UnitConverter, .{});
    }

    pub fn terahertz() ?*UnitFrequency {
        return objc.msgSend(Internal.class(), "terahertz", ?*UnitFrequency, .{});
    }

    pub fn gigahertz() ?*UnitFrequency {
        return objc.msgSend(Internal.class(), "gigahertz", ?*UnitFrequency, .{});
    }

    pub fn megahertz() ?*UnitFrequency {
        return objc.msgSend(Internal.class(), "megahertz", ?*UnitFrequency, .{});
    }

    pub fn kilohertz() ?*UnitFrequency {
        return objc.msgSend(Internal.class(), "kilohertz", ?*UnitFrequency, .{});
    }

    pub fn hertz() ?*UnitFrequency {
        return objc.msgSend(Internal.class(), "hertz", ?*UnitFrequency, .{});
    }

    pub fn millihertz() ?*UnitFrequency {
        return objc.msgSend(Internal.class(), "millihertz", ?*UnitFrequency, .{});
    }

    pub fn microhertz() ?*UnitFrequency {
        return objc.msgSend(Internal.class(), "microhertz", ?*UnitFrequency, .{});
    }

    pub fn nanohertz() ?*UnitFrequency {
        return objc.msgSend(Internal.class(), "nanohertz", ?*UnitFrequency, .{});
    }

    pub fn framesPerSecond() ?*UnitFrequency {
        return objc.msgSend(Internal.class(), "framesPerSecond", ?*UnitFrequency, .{});
    }
};

/// https://developer.apple.com/documentation/Foundation/NSUnitFuelEfficiency?language=objc
pub const UnitFuelEfficiency = opaque {
    pub const Internal = objc.ExternClass("NSUnitFuelEfficiency", @This(), Dimension, &.{SecureCoding});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn supportsSecureCoding() objc.BOOL {
        return objc.msgSend(Internal.class(), "supportsSecureCoding", objc.BOOL, .{});
    }

    pub fn initWithSymbol(_self: *@This(), _symbol: ?*String) *@This() {
        return objc.msgSend(_self, "initWithSymbol:", *@This(), .{_symbol});
    }

    pub fn symbol(_self: *@This()) ?*String {
        return objc.msgSend(_self, "symbol", ?*String, .{});
    }

    pub fn initWithSymbolConverter(_self: *@This(), _symbol: ?*String, _converter: ?*UnitConverter) *@This() {
        return objc.msgSend(_self, "initWithSymbol:converter:", *@This(), .{ _symbol, _converter });
    }

    pub fn baseUnit() *@This() {
        return objc.msgSend(Internal.class(), "baseUnit", *@This(), .{});
    }

    pub fn converter(_self: *@This()) ?*UnitConverter {
        return objc.msgSend(_self, "converter", ?*UnitConverter, .{});
    }

    pub fn litersPer100Kilometers() ?*UnitFuelEfficiency {
        return objc.msgSend(Internal.class(), "litersPer100Kilometers", ?*UnitFuelEfficiency, .{});
    }

    pub fn milesPerImperialGallon() ?*UnitFuelEfficiency {
        return objc.msgSend(Internal.class(), "milesPerImperialGallon", ?*UnitFuelEfficiency, .{});
    }

    pub fn milesPerGallon() ?*UnitFuelEfficiency {
        return objc.msgSend(Internal.class(), "milesPerGallon", ?*UnitFuelEfficiency, .{});
    }
};

/// https://developer.apple.com/documentation/Foundation/NSUnitInformationStorage?language=objc
pub const UnitInformationStorage = opaque {
    pub const Internal = objc.ExternClass("NSUnitInformationStorage", @This(), Dimension, &.{SecureCoding});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn supportsSecureCoding() objc.BOOL {
        return objc.msgSend(Internal.class(), "supportsSecureCoding", objc.BOOL, .{});
    }

    pub fn initWithSymbol(_self: *@This(), _symbol: ?*String) *@This() {
        return objc.msgSend(_self, "initWithSymbol:", *@This(), .{_symbol});
    }

    pub fn symbol(_self: *@This()) ?*String {
        return objc.msgSend(_self, "symbol", ?*String, .{});
    }

    pub fn initWithSymbolConverter(_self: *@This(), _symbol: ?*String, _converter: ?*UnitConverter) *@This() {
        return objc.msgSend(_self, "initWithSymbol:converter:", *@This(), .{ _symbol, _converter });
    }

    pub fn baseUnit() *@This() {
        return objc.msgSend(Internal.class(), "baseUnit", *@This(), .{});
    }

    pub fn converter(_self: *@This()) ?*UnitConverter {
        return objc.msgSend(_self, "converter", ?*UnitConverter, .{});
    }

    pub fn bytes() ?*UnitInformationStorage {
        return objc.msgSend(Internal.class(), "bytes", ?*UnitInformationStorage, .{});
    }

    pub fn bits() ?*UnitInformationStorage {
        return objc.msgSend(Internal.class(), "bits", ?*UnitInformationStorage, .{});
    }

    pub fn nibbles() ?*UnitInformationStorage {
        return objc.msgSend(Internal.class(), "nibbles", ?*UnitInformationStorage, .{});
    }

    pub fn yottabytes() ?*UnitInformationStorage {
        return objc.msgSend(Internal.class(), "yottabytes", ?*UnitInformationStorage, .{});
    }

    pub fn zettabytes() ?*UnitInformationStorage {
        return objc.msgSend(Internal.class(), "zettabytes", ?*UnitInformationStorage, .{});
    }

    pub fn exabytes() ?*UnitInformationStorage {
        return objc.msgSend(Internal.class(), "exabytes", ?*UnitInformationStorage, .{});
    }

    pub fn petabytes() ?*UnitInformationStorage {
        return objc.msgSend(Internal.class(), "petabytes", ?*UnitInformationStorage, .{});
    }

    pub fn terabytes() ?*UnitInformationStorage {
        return objc.msgSend(Internal.class(), "terabytes", ?*UnitInformationStorage, .{});
    }

    pub fn gigabytes() ?*UnitInformationStorage {
        return objc.msgSend(Internal.class(), "gigabytes", ?*UnitInformationStorage, .{});
    }

    pub fn megabytes() ?*UnitInformationStorage {
        return objc.msgSend(Internal.class(), "megabytes", ?*UnitInformationStorage, .{});
    }

    pub fn kilobytes() ?*UnitInformationStorage {
        return objc.msgSend(Internal.class(), "kilobytes", ?*UnitInformationStorage, .{});
    }

    pub fn yottabits() ?*UnitInformationStorage {
        return objc.msgSend(Internal.class(), "yottabits", ?*UnitInformationStorage, .{});
    }

    pub fn zettabits() ?*UnitInformationStorage {
        return objc.msgSend(Internal.class(), "zettabits", ?*UnitInformationStorage, .{});
    }

    pub fn exabits() ?*UnitInformationStorage {
        return objc.msgSend(Internal.class(), "exabits", ?*UnitInformationStorage, .{});
    }

    pub fn petabits() ?*UnitInformationStorage {
        return objc.msgSend(Internal.class(), "petabits", ?*UnitInformationStorage, .{});
    }

    pub fn terabits() ?*UnitInformationStorage {
        return objc.msgSend(Internal.class(), "terabits", ?*UnitInformationStorage, .{});
    }

    pub fn gigabits() ?*UnitInformationStorage {
        return objc.msgSend(Internal.class(), "gigabits", ?*UnitInformationStorage, .{});
    }

    pub fn megabits() ?*UnitInformationStorage {
        return objc.msgSend(Internal.class(), "megabits", ?*UnitInformationStorage, .{});
    }

    pub fn kilobits() ?*UnitInformationStorage {
        return objc.msgSend(Internal.class(), "kilobits", ?*UnitInformationStorage, .{});
    }

    pub fn yobibytes() ?*UnitInformationStorage {
        return objc.msgSend(Internal.class(), "yobibytes", ?*UnitInformationStorage, .{});
    }

    pub fn zebibytes() ?*UnitInformationStorage {
        return objc.msgSend(Internal.class(), "zebibytes", ?*UnitInformationStorage, .{});
    }

    pub fn exbibytes() ?*UnitInformationStorage {
        return objc.msgSend(Internal.class(), "exbibytes", ?*UnitInformationStorage, .{});
    }

    pub fn pebibytes() ?*UnitInformationStorage {
        return objc.msgSend(Internal.class(), "pebibytes", ?*UnitInformationStorage, .{});
    }

    pub fn tebibytes() ?*UnitInformationStorage {
        return objc.msgSend(Internal.class(), "tebibytes", ?*UnitInformationStorage, .{});
    }

    pub fn gibibytes() ?*UnitInformationStorage {
        return objc.msgSend(Internal.class(), "gibibytes", ?*UnitInformationStorage, .{});
    }

    pub fn mebibytes() ?*UnitInformationStorage {
        return objc.msgSend(Internal.class(), "mebibytes", ?*UnitInformationStorage, .{});
    }

    pub fn kibibytes() ?*UnitInformationStorage {
        return objc.msgSend(Internal.class(), "kibibytes", ?*UnitInformationStorage, .{});
    }

    pub fn yobibits() ?*UnitInformationStorage {
        return objc.msgSend(Internal.class(), "yobibits", ?*UnitInformationStorage, .{});
    }

    pub fn zebibits() ?*UnitInformationStorage {
        return objc.msgSend(Internal.class(), "zebibits", ?*UnitInformationStorage, .{});
    }

    pub fn exbibits() ?*UnitInformationStorage {
        return objc.msgSend(Internal.class(), "exbibits", ?*UnitInformationStorage, .{});
    }

    pub fn pebibits() ?*UnitInformationStorage {
        return objc.msgSend(Internal.class(), "pebibits", ?*UnitInformationStorage, .{});
    }

    pub fn tebibits() ?*UnitInformationStorage {
        return objc.msgSend(Internal.class(), "tebibits", ?*UnitInformationStorage, .{});
    }

    pub fn gibibits() ?*UnitInformationStorage {
        return objc.msgSend(Internal.class(), "gibibits", ?*UnitInformationStorage, .{});
    }

    pub fn mebibits() ?*UnitInformationStorage {
        return objc.msgSend(Internal.class(), "mebibits", ?*UnitInformationStorage, .{});
    }

    pub fn kibibits() ?*UnitInformationStorage {
        return objc.msgSend(Internal.class(), "kibibits", ?*UnitInformationStorage, .{});
    }
};

/// https://developer.apple.com/documentation/Foundation/NSUnitLength?language=objc
pub const UnitLength = opaque {
    pub const Internal = objc.ExternClass("NSUnitLength", @This(), Dimension, &.{SecureCoding});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn supportsSecureCoding() objc.BOOL {
        return objc.msgSend(Internal.class(), "supportsSecureCoding", objc.BOOL, .{});
    }

    pub fn initWithSymbol(_self: *@This(), _symbol: ?*String) *@This() {
        return objc.msgSend(_self, "initWithSymbol:", *@This(), .{_symbol});
    }

    pub fn symbol(_self: *@This()) ?*String {
        return objc.msgSend(_self, "symbol", ?*String, .{});
    }

    pub fn initWithSymbolConverter(_self: *@This(), _symbol: ?*String, _converter: ?*UnitConverter) *@This() {
        return objc.msgSend(_self, "initWithSymbol:converter:", *@This(), .{ _symbol, _converter });
    }

    pub fn baseUnit() *@This() {
        return objc.msgSend(Internal.class(), "baseUnit", *@This(), .{});
    }

    pub fn converter(_self: *@This()) ?*UnitConverter {
        return objc.msgSend(_self, "converter", ?*UnitConverter, .{});
    }

    pub fn megameters() ?*UnitLength {
        return objc.msgSend(Internal.class(), "megameters", ?*UnitLength, .{});
    }

    pub fn kilometers() ?*UnitLength {
        return objc.msgSend(Internal.class(), "kilometers", ?*UnitLength, .{});
    }

    pub fn hectometers() ?*UnitLength {
        return objc.msgSend(Internal.class(), "hectometers", ?*UnitLength, .{});
    }

    pub fn decameters() ?*UnitLength {
        return objc.msgSend(Internal.class(), "decameters", ?*UnitLength, .{});
    }

    pub fn meters() ?*UnitLength {
        return objc.msgSend(Internal.class(), "meters", ?*UnitLength, .{});
    }

    pub fn decimeters() ?*UnitLength {
        return objc.msgSend(Internal.class(), "decimeters", ?*UnitLength, .{});
    }

    pub fn centimeters() ?*UnitLength {
        return objc.msgSend(Internal.class(), "centimeters", ?*UnitLength, .{});
    }

    pub fn millimeters() ?*UnitLength {
        return objc.msgSend(Internal.class(), "millimeters", ?*UnitLength, .{});
    }

    pub fn micrometers() ?*UnitLength {
        return objc.msgSend(Internal.class(), "micrometers", ?*UnitLength, .{});
    }

    pub fn nanometers() ?*UnitLength {
        return objc.msgSend(Internal.class(), "nanometers", ?*UnitLength, .{});
    }

    pub fn picometers() ?*UnitLength {
        return objc.msgSend(Internal.class(), "picometers", ?*UnitLength, .{});
    }

    pub fn inches() ?*UnitLength {
        return objc.msgSend(Internal.class(), "inches", ?*UnitLength, .{});
    }

    pub fn feet() ?*UnitLength {
        return objc.msgSend(Internal.class(), "feet", ?*UnitLength, .{});
    }

    pub fn yards() ?*UnitLength {
        return objc.msgSend(Internal.class(), "yards", ?*UnitLength, .{});
    }

    pub fn miles() ?*UnitLength {
        return objc.msgSend(Internal.class(), "miles", ?*UnitLength, .{});
    }

    pub fn scandinavianMiles() ?*UnitLength {
        return objc.msgSend(Internal.class(), "scandinavianMiles", ?*UnitLength, .{});
    }

    pub fn lightyears() ?*UnitLength {
        return objc.msgSend(Internal.class(), "lightyears", ?*UnitLength, .{});
    }

    pub fn nauticalMiles() ?*UnitLength {
        return objc.msgSend(Internal.class(), "nauticalMiles", ?*UnitLength, .{});
    }

    pub fn fathoms() ?*UnitLength {
        return objc.msgSend(Internal.class(), "fathoms", ?*UnitLength, .{});
    }

    pub fn furlongs() ?*UnitLength {
        return objc.msgSend(Internal.class(), "furlongs", ?*UnitLength, .{});
    }

    pub fn astronomicalUnits() ?*UnitLength {
        return objc.msgSend(Internal.class(), "astronomicalUnits", ?*UnitLength, .{});
    }

    pub fn parsecs() ?*UnitLength {
        return objc.msgSend(Internal.class(), "parsecs", ?*UnitLength, .{});
    }
};

/// https://developer.apple.com/documentation/Foundation/NSUnitIlluminance?language=objc
pub const UnitIlluminance = opaque {
    pub const Internal = objc.ExternClass("NSUnitIlluminance", @This(), Dimension, &.{SecureCoding});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn supportsSecureCoding() objc.BOOL {
        return objc.msgSend(Internal.class(), "supportsSecureCoding", objc.BOOL, .{});
    }

    pub fn initWithSymbol(_self: *@This(), _symbol: ?*String) *@This() {
        return objc.msgSend(_self, "initWithSymbol:", *@This(), .{_symbol});
    }

    pub fn symbol(_self: *@This()) ?*String {
        return objc.msgSend(_self, "symbol", ?*String, .{});
    }

    pub fn initWithSymbolConverter(_self: *@This(), _symbol: ?*String, _converter: ?*UnitConverter) *@This() {
        return objc.msgSend(_self, "initWithSymbol:converter:", *@This(), .{ _symbol, _converter });
    }

    pub fn baseUnit() *@This() {
        return objc.msgSend(Internal.class(), "baseUnit", *@This(), .{});
    }

    pub fn converter(_self: *@This()) ?*UnitConverter {
        return objc.msgSend(_self, "converter", ?*UnitConverter, .{});
    }

    pub fn lux() ?*UnitIlluminance {
        return objc.msgSend(Internal.class(), "lux", ?*UnitIlluminance, .{});
    }
};

/// https://developer.apple.com/documentation/Foundation/NSUnitMass?language=objc
pub const UnitMass = opaque {
    pub const Internal = objc.ExternClass("NSUnitMass", @This(), Dimension, &.{SecureCoding});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn supportsSecureCoding() objc.BOOL {
        return objc.msgSend(Internal.class(), "supportsSecureCoding", objc.BOOL, .{});
    }

    pub fn initWithSymbol(_self: *@This(), _symbol: ?*String) *@This() {
        return objc.msgSend(_self, "initWithSymbol:", *@This(), .{_symbol});
    }

    pub fn symbol(_self: *@This()) ?*String {
        return objc.msgSend(_self, "symbol", ?*String, .{});
    }

    pub fn initWithSymbolConverter(_self: *@This(), _symbol: ?*String, _converter: ?*UnitConverter) *@This() {
        return objc.msgSend(_self, "initWithSymbol:converter:", *@This(), .{ _symbol, _converter });
    }

    pub fn baseUnit() *@This() {
        return objc.msgSend(Internal.class(), "baseUnit", *@This(), .{});
    }

    pub fn converter(_self: *@This()) ?*UnitConverter {
        return objc.msgSend(_self, "converter", ?*UnitConverter, .{});
    }

    pub fn kilograms() ?*UnitMass {
        return objc.msgSend(Internal.class(), "kilograms", ?*UnitMass, .{});
    }

    pub fn grams() ?*UnitMass {
        return objc.msgSend(Internal.class(), "grams", ?*UnitMass, .{});
    }

    pub fn decigrams() ?*UnitMass {
        return objc.msgSend(Internal.class(), "decigrams", ?*UnitMass, .{});
    }

    pub fn centigrams() ?*UnitMass {
        return objc.msgSend(Internal.class(), "centigrams", ?*UnitMass, .{});
    }

    pub fn milligrams() ?*UnitMass {
        return objc.msgSend(Internal.class(), "milligrams", ?*UnitMass, .{});
    }

    pub fn micrograms() ?*UnitMass {
        return objc.msgSend(Internal.class(), "micrograms", ?*UnitMass, .{});
    }

    pub fn nanograms() ?*UnitMass {
        return objc.msgSend(Internal.class(), "nanograms", ?*UnitMass, .{});
    }

    pub fn picograms() ?*UnitMass {
        return objc.msgSend(Internal.class(), "picograms", ?*UnitMass, .{});
    }

    pub fn ounces() ?*UnitMass {
        return objc.msgSend(Internal.class(), "ounces", ?*UnitMass, .{});
    }

    pub fn poundsMass() ?*UnitMass {
        return objc.msgSend(Internal.class(), "poundsMass", ?*UnitMass, .{});
    }

    pub fn stones() ?*UnitMass {
        return objc.msgSend(Internal.class(), "stones", ?*UnitMass, .{});
    }

    pub fn metricTons() ?*UnitMass {
        return objc.msgSend(Internal.class(), "metricTons", ?*UnitMass, .{});
    }

    pub fn shortTons() ?*UnitMass {
        return objc.msgSend(Internal.class(), "shortTons", ?*UnitMass, .{});
    }

    pub fn carats() ?*UnitMass {
        return objc.msgSend(Internal.class(), "carats", ?*UnitMass, .{});
    }

    pub fn ouncesTroy() ?*UnitMass {
        return objc.msgSend(Internal.class(), "ouncesTroy", ?*UnitMass, .{});
    }

    pub fn slugs() ?*UnitMass {
        return objc.msgSend(Internal.class(), "slugs", ?*UnitMass, .{});
    }
};

/// https://developer.apple.com/documentation/Foundation/NSUnitPower?language=objc
pub const UnitPower = opaque {
    pub const Internal = objc.ExternClass("NSUnitPower", @This(), Dimension, &.{SecureCoding});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn supportsSecureCoding() objc.BOOL {
        return objc.msgSend(Internal.class(), "supportsSecureCoding", objc.BOOL, .{});
    }

    pub fn initWithSymbol(_self: *@This(), _symbol: ?*String) *@This() {
        return objc.msgSend(_self, "initWithSymbol:", *@This(), .{_symbol});
    }

    pub fn symbol(_self: *@This()) ?*String {
        return objc.msgSend(_self, "symbol", ?*String, .{});
    }

    pub fn initWithSymbolConverter(_self: *@This(), _symbol: ?*String, _converter: ?*UnitConverter) *@This() {
        return objc.msgSend(_self, "initWithSymbol:converter:", *@This(), .{ _symbol, _converter });
    }

    pub fn baseUnit() *@This() {
        return objc.msgSend(Internal.class(), "baseUnit", *@This(), .{});
    }

    pub fn converter(_self: *@This()) ?*UnitConverter {
        return objc.msgSend(_self, "converter", ?*UnitConverter, .{});
    }

    pub fn terawatts() ?*UnitPower {
        return objc.msgSend(Internal.class(), "terawatts", ?*UnitPower, .{});
    }

    pub fn gigawatts() ?*UnitPower {
        return objc.msgSend(Internal.class(), "gigawatts", ?*UnitPower, .{});
    }

    pub fn megawatts() ?*UnitPower {
        return objc.msgSend(Internal.class(), "megawatts", ?*UnitPower, .{});
    }

    pub fn kilowatts() ?*UnitPower {
        return objc.msgSend(Internal.class(), "kilowatts", ?*UnitPower, .{});
    }

    pub fn watts() ?*UnitPower {
        return objc.msgSend(Internal.class(), "watts", ?*UnitPower, .{});
    }

    pub fn milliwatts() ?*UnitPower {
        return objc.msgSend(Internal.class(), "milliwatts", ?*UnitPower, .{});
    }

    pub fn microwatts() ?*UnitPower {
        return objc.msgSend(Internal.class(), "microwatts", ?*UnitPower, .{});
    }

    pub fn nanowatts() ?*UnitPower {
        return objc.msgSend(Internal.class(), "nanowatts", ?*UnitPower, .{});
    }

    pub fn picowatts() ?*UnitPower {
        return objc.msgSend(Internal.class(), "picowatts", ?*UnitPower, .{});
    }

    pub fn femtowatts() ?*UnitPower {
        return objc.msgSend(Internal.class(), "femtowatts", ?*UnitPower, .{});
    }

    pub fn horsepower() ?*UnitPower {
        return objc.msgSend(Internal.class(), "horsepower", ?*UnitPower, .{});
    }
};

/// https://developer.apple.com/documentation/Foundation/NSUnitPressure?language=objc
pub const UnitPressure = opaque {
    pub const Internal = objc.ExternClass("NSUnitPressure", @This(), Dimension, &.{SecureCoding});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn supportsSecureCoding() objc.BOOL {
        return objc.msgSend(Internal.class(), "supportsSecureCoding", objc.BOOL, .{});
    }

    pub fn initWithSymbol(_self: *@This(), _symbol: ?*String) *@This() {
        return objc.msgSend(_self, "initWithSymbol:", *@This(), .{_symbol});
    }

    pub fn symbol(_self: *@This()) ?*String {
        return objc.msgSend(_self, "symbol", ?*String, .{});
    }

    pub fn initWithSymbolConverter(_self: *@This(), _symbol: ?*String, _converter: ?*UnitConverter) *@This() {
        return objc.msgSend(_self, "initWithSymbol:converter:", *@This(), .{ _symbol, _converter });
    }

    pub fn baseUnit() *@This() {
        return objc.msgSend(Internal.class(), "baseUnit", *@This(), .{});
    }

    pub fn converter(_self: *@This()) ?*UnitConverter {
        return objc.msgSend(_self, "converter", ?*UnitConverter, .{});
    }

    pub fn newtonsPerMetersSquared() ?*UnitPressure {
        return objc.msgSend(Internal.class(), "newtonsPerMetersSquared", ?*UnitPressure, .{});
    }

    pub fn gigapascals() ?*UnitPressure {
        return objc.msgSend(Internal.class(), "gigapascals", ?*UnitPressure, .{});
    }

    pub fn megapascals() ?*UnitPressure {
        return objc.msgSend(Internal.class(), "megapascals", ?*UnitPressure, .{});
    }

    pub fn kilopascals() ?*UnitPressure {
        return objc.msgSend(Internal.class(), "kilopascals", ?*UnitPressure, .{});
    }

    pub fn hectopascals() ?*UnitPressure {
        return objc.msgSend(Internal.class(), "hectopascals", ?*UnitPressure, .{});
    }

    pub fn inchesOfMercury() ?*UnitPressure {
        return objc.msgSend(Internal.class(), "inchesOfMercury", ?*UnitPressure, .{});
    }

    pub fn bars() ?*UnitPressure {
        return objc.msgSend(Internal.class(), "bars", ?*UnitPressure, .{});
    }

    pub fn millibars() ?*UnitPressure {
        return objc.msgSend(Internal.class(), "millibars", ?*UnitPressure, .{});
    }

    pub fn millimetersOfMercury() ?*UnitPressure {
        return objc.msgSend(Internal.class(), "millimetersOfMercury", ?*UnitPressure, .{});
    }

    pub fn poundsForcePerSquareInch() ?*UnitPressure {
        return objc.msgSend(Internal.class(), "poundsForcePerSquareInch", ?*UnitPressure, .{});
    }
};

/// https://developer.apple.com/documentation/Foundation/NSUnitSpeed?language=objc
pub const UnitSpeed = opaque {
    pub const Internal = objc.ExternClass("NSUnitSpeed", @This(), Dimension, &.{SecureCoding});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn supportsSecureCoding() objc.BOOL {
        return objc.msgSend(Internal.class(), "supportsSecureCoding", objc.BOOL, .{});
    }

    pub fn initWithSymbol(_self: *@This(), _symbol: ?*String) *@This() {
        return objc.msgSend(_self, "initWithSymbol:", *@This(), .{_symbol});
    }

    pub fn symbol(_self: *@This()) ?*String {
        return objc.msgSend(_self, "symbol", ?*String, .{});
    }

    pub fn initWithSymbolConverter(_self: *@This(), _symbol: ?*String, _converter: ?*UnitConverter) *@This() {
        return objc.msgSend(_self, "initWithSymbol:converter:", *@This(), .{ _symbol, _converter });
    }

    pub fn baseUnit() *@This() {
        return objc.msgSend(Internal.class(), "baseUnit", *@This(), .{});
    }

    pub fn converter(_self: *@This()) ?*UnitConverter {
        return objc.msgSend(_self, "converter", ?*UnitConverter, .{});
    }

    pub fn metersPerSecond() ?*UnitSpeed {
        return objc.msgSend(Internal.class(), "metersPerSecond", ?*UnitSpeed, .{});
    }

    pub fn kilometersPerHour() ?*UnitSpeed {
        return objc.msgSend(Internal.class(), "kilometersPerHour", ?*UnitSpeed, .{});
    }

    pub fn milesPerHour() ?*UnitSpeed {
        return objc.msgSend(Internal.class(), "milesPerHour", ?*UnitSpeed, .{});
    }

    pub fn knots() ?*UnitSpeed {
        return objc.msgSend(Internal.class(), "knots", ?*UnitSpeed, .{});
    }
};

/// https://developer.apple.com/documentation/Foundation/NSUnitTemperature?language=objc
pub const UnitTemperature = opaque {
    pub const Internal = objc.ExternClass("NSUnitTemperature", @This(), Dimension, &.{SecureCoding});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn supportsSecureCoding() objc.BOOL {
        return objc.msgSend(Internal.class(), "supportsSecureCoding", objc.BOOL, .{});
    }

    pub fn initWithSymbol(_self: *@This(), _symbol: ?*String) *@This() {
        return objc.msgSend(_self, "initWithSymbol:", *@This(), .{_symbol});
    }

    pub fn symbol(_self: *@This()) ?*String {
        return objc.msgSend(_self, "symbol", ?*String, .{});
    }

    pub fn initWithSymbolConverter(_self: *@This(), _symbol: ?*String, _converter: ?*UnitConverter) *@This() {
        return objc.msgSend(_self, "initWithSymbol:converter:", *@This(), .{ _symbol, _converter });
    }

    pub fn baseUnit() *@This() {
        return objc.msgSend(Internal.class(), "baseUnit", *@This(), .{});
    }

    pub fn converter(_self: *@This()) ?*UnitConverter {
        return objc.msgSend(_self, "converter", ?*UnitConverter, .{});
    }

    pub fn kelvin() ?*UnitTemperature {
        return objc.msgSend(Internal.class(), "kelvin", ?*UnitTemperature, .{});
    }

    pub fn celsius() ?*UnitTemperature {
        return objc.msgSend(Internal.class(), "celsius", ?*UnitTemperature, .{});
    }

    pub fn fahrenheit() ?*UnitTemperature {
        return objc.msgSend(Internal.class(), "fahrenheit", ?*UnitTemperature, .{});
    }
};

/// https://developer.apple.com/documentation/Foundation/NSUnitVolume?language=objc
pub const UnitVolume = opaque {
    pub const Internal = objc.ExternClass("NSUnitVolume", @This(), Dimension, &.{SecureCoding});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn supportsSecureCoding() objc.BOOL {
        return objc.msgSend(Internal.class(), "supportsSecureCoding", objc.BOOL, .{});
    }

    pub fn initWithSymbol(_self: *@This(), _symbol: ?*String) *@This() {
        return objc.msgSend(_self, "initWithSymbol:", *@This(), .{_symbol});
    }

    pub fn symbol(_self: *@This()) ?*String {
        return objc.msgSend(_self, "symbol", ?*String, .{});
    }

    pub fn initWithSymbolConverter(_self: *@This(), _symbol: ?*String, _converter: ?*UnitConverter) *@This() {
        return objc.msgSend(_self, "initWithSymbol:converter:", *@This(), .{ _symbol, _converter });
    }

    pub fn baseUnit() *@This() {
        return objc.msgSend(Internal.class(), "baseUnit", *@This(), .{});
    }

    pub fn converter(_self: *@This()) ?*UnitConverter {
        return objc.msgSend(_self, "converter", ?*UnitConverter, .{});
    }

    pub fn megaliters() ?*UnitVolume {
        return objc.msgSend(Internal.class(), "megaliters", ?*UnitVolume, .{});
    }

    pub fn kiloliters() ?*UnitVolume {
        return objc.msgSend(Internal.class(), "kiloliters", ?*UnitVolume, .{});
    }

    pub fn liters() ?*UnitVolume {
        return objc.msgSend(Internal.class(), "liters", ?*UnitVolume, .{});
    }

    pub fn deciliters() ?*UnitVolume {
        return objc.msgSend(Internal.class(), "deciliters", ?*UnitVolume, .{});
    }

    pub fn centiliters() ?*UnitVolume {
        return objc.msgSend(Internal.class(), "centiliters", ?*UnitVolume, .{});
    }

    pub fn milliliters() ?*UnitVolume {
        return objc.msgSend(Internal.class(), "milliliters", ?*UnitVolume, .{});
    }

    pub fn cubicKilometers() ?*UnitVolume {
        return objc.msgSend(Internal.class(), "cubicKilometers", ?*UnitVolume, .{});
    }

    pub fn cubicMeters() ?*UnitVolume {
        return objc.msgSend(Internal.class(), "cubicMeters", ?*UnitVolume, .{});
    }

    pub fn cubicDecimeters() ?*UnitVolume {
        return objc.msgSend(Internal.class(), "cubicDecimeters", ?*UnitVolume, .{});
    }

    pub fn cubicCentimeters() ?*UnitVolume {
        return objc.msgSend(Internal.class(), "cubicCentimeters", ?*UnitVolume, .{});
    }

    pub fn cubicMillimeters() ?*UnitVolume {
        return objc.msgSend(Internal.class(), "cubicMillimeters", ?*UnitVolume, .{});
    }

    pub fn cubicInches() ?*UnitVolume {
        return objc.msgSend(Internal.class(), "cubicInches", ?*UnitVolume, .{});
    }

    pub fn cubicFeet() ?*UnitVolume {
        return objc.msgSend(Internal.class(), "cubicFeet", ?*UnitVolume, .{});
    }

    pub fn cubicYards() ?*UnitVolume {
        return objc.msgSend(Internal.class(), "cubicYards", ?*UnitVolume, .{});
    }

    pub fn cubicMiles() ?*UnitVolume {
        return objc.msgSend(Internal.class(), "cubicMiles", ?*UnitVolume, .{});
    }

    pub fn acreFeet() ?*UnitVolume {
        return objc.msgSend(Internal.class(), "acreFeet", ?*UnitVolume, .{});
    }

    pub fn bushels() ?*UnitVolume {
        return objc.msgSend(Internal.class(), "bushels", ?*UnitVolume, .{});
    }

    pub fn teaspoons() ?*UnitVolume {
        return objc.msgSend(Internal.class(), "teaspoons", ?*UnitVolume, .{});
    }

    pub fn tablespoons() ?*UnitVolume {
        return objc.msgSend(Internal.class(), "tablespoons", ?*UnitVolume, .{});
    }

    pub fn fluidOunces() ?*UnitVolume {
        return objc.msgSend(Internal.class(), "fluidOunces", ?*UnitVolume, .{});
    }

    pub fn cups() ?*UnitVolume {
        return objc.msgSend(Internal.class(), "cups", ?*UnitVolume, .{});
    }

    pub fn pints() ?*UnitVolume {
        return objc.msgSend(Internal.class(), "pints", ?*UnitVolume, .{});
    }

    pub fn quarts() ?*UnitVolume {
        return objc.msgSend(Internal.class(), "quarts", ?*UnitVolume, .{});
    }

    pub fn gallons() ?*UnitVolume {
        return objc.msgSend(Internal.class(), "gallons", ?*UnitVolume, .{});
    }

    pub fn imperialTeaspoons() ?*UnitVolume {
        return objc.msgSend(Internal.class(), "imperialTeaspoons", ?*UnitVolume, .{});
    }

    pub fn imperialTablespoons() ?*UnitVolume {
        return objc.msgSend(Internal.class(), "imperialTablespoons", ?*UnitVolume, .{});
    }

    pub fn imperialFluidOunces() ?*UnitVolume {
        return objc.msgSend(Internal.class(), "imperialFluidOunces", ?*UnitVolume, .{});
    }

    pub fn imperialPints() ?*UnitVolume {
        return objc.msgSend(Internal.class(), "imperialPints", ?*UnitVolume, .{});
    }

    pub fn imperialQuarts() ?*UnitVolume {
        return objc.msgSend(Internal.class(), "imperialQuarts", ?*UnitVolume, .{});
    }

    pub fn imperialGallons() ?*UnitVolume {
        return objc.msgSend(Internal.class(), "imperialGallons", ?*UnitVolume, .{});
    }

    pub fn metricCups() ?*UnitVolume {
        return objc.msgSend(Internal.class(), "metricCups", ?*UnitVolume, .{});
    }
};

/// https://developer.apple.com/documentation/Foundation/NSMeasurement?language=objc
pub fn Measurement(comptime UnitType: type) type {
    const unused0 = UnitType;
    _ = unused0; // Prevent unused parameter warning!!!
    return struct {
        pub const Internal = objc.ExternClass("NSMeasurement", @This(), objc.NSObject, &.{ Copying, SecureCoding });
        pub const as = Internal.as;
        pub const retain = Internal.retain;
        pub const release = Internal.release;
        pub const autorelease = Internal.autorelease;
        pub const new = Internal.new;
        pub const alloc = Internal.alloc;

        pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
            return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
        }

        pub fn hash(_self: *@This()) objc.NSUInteger {
            return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
        }

        pub fn superclass(_self: *@This()) objc.Class {
            return objc.msgSend(_self, "superclass", objc.Class, .{});
        }

        pub fn class(_self: *@This()) objc.Class {
            return objc.msgSend(_self, "class", objc.Class, .{});
        }

        pub fn self(_self: *@This()) *@This() {
            return objc.msgSend(_self, "self", *@This(), .{});
        }

        pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
            return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
        }

        pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
            return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
        }

        pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
            return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
        }

        pub fn isProxy(_self: *@This()) objc.BOOL {
            return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
        }

        pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
            return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
        }

        pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
            return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
        }

        pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
            return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
        }

        pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
            return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
        }

        pub fn retainCount(_self: *@This()) objc.NSUInteger {
            return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
        }

        pub fn zone(_self: *@This()) ?*objc._NSZone {
            return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
        }

        pub fn description(_self: *@This()) ?*String {
            return objc.msgSend(_self, "description", ?*String, .{});
        }

        pub fn debugDescription(_self: *@This()) ?*String {
            return objc.msgSend(_self, "debugDescription", ?*String, .{});
        }

        pub fn load() void {
            return objc.msgSend(Internal.class(), "load", void, .{});
        }

        pub fn initialize() void {
            return objc.msgSend(Internal.class(), "initialize", void, .{});
        }

        pub fn init(_self: *@This()) *@This() {
            return objc.msgSend(_self, "init", *@This(), .{});
        }

        pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
            return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
        }

        pub fn dealloc(_self: *@This()) void {
            return objc.msgSend(_self, "dealloc", void, .{});
        }

        pub fn finalize(_self: *@This()) void {
            return objc.msgSend(_self, "finalize", void, .{});
        }

        pub fn copy(_self: *@This()) ?objc.Id {
            return objc.msgSend(_self, "copy", ?objc.Id, .{});
        }

        pub fn mutableCopy(_self: *@This()) ?objc.Id {
            return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
        }

        pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
            return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
        }

        pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
            return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
        }

        pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
            return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
        }

        pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
            return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
        }

        pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
            return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
        }

        pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
            return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
        }

        pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
            return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
        }

        pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
            return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
        }

        pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
            return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
        }

        pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
            return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
        }

        pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
            return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
        }

        pub fn retainWeakReference(_self: *@This()) objc.BOOL {
            return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
        }

        pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
            return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
        }

        pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
            return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
        }

        pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
            return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
        }

        pub fn encodeWithCoder(_self: *@This(), _coder: ?*Coder) void {
            return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
        }

        pub fn initWithCoder(_self: *@This(), _coder: ?*Coder) *@This() {
            return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
        }

        pub fn supportsSecureCoding() objc.BOOL {
            return objc.msgSend(Internal.class(), "supportsSecureCoding", objc.BOOL, .{});
        }

        pub fn initWithDoubleValueUnit(_self: *@This(), _doubleValue: f64, _unit: UnitType) *@This() {
            return objc.msgSend(_self, "initWithDoubleValue:unit:", *@This(), .{ _doubleValue, _unit });
        }

        pub fn canBeConvertedToUnit(_self: *@This(), _unit: ?*Unit) objc.BOOL {
            return objc.msgSend(_self, "canBeConvertedToUnit:", objc.BOOL, .{_unit});
        }

        pub fn measurementByConvertingToUnit(_self: *@This(), _unit: ?*Unit) ?*Measurement {
            return objc.msgSend(_self, "measurementByConvertingToUnit:", ?*Measurement, .{_unit});
        }

        pub fn measurementByAddingMeasurement(_self: *@This(), _measurement: ?*anyopaque) ?*anyopaque {
            return objc.msgSend(_self, "measurementByAddingMeasurement:", ?*anyopaque, .{_measurement});
        }

        pub fn measurementBySubtractingMeasurement(_self: *@This(), _measurement: ?*anyopaque) ?*anyopaque {
            return objc.msgSend(_self, "measurementBySubtractingMeasurement:", ?*anyopaque, .{_measurement});
        }

        pub fn unit(_self: *@This()) UnitType {
            return objc.msgSend(_self, "unit", UnitType, .{});
        }

        pub fn doubleValue(_self: *@This()) f64 {
            return objc.msgSend(_self, "doubleValue", f64, .{});
        }
    };
}

pub const NumberFormatterBehavior = objc.NSUInteger;
pub const NumberFormatterBehavior_Default: objc.NSUInteger = 0;
pub const NumberFormatterBehavior_10_0: objc.NSUInteger = 1000;
pub const NumberFormatterBehavior_10_4: objc.NSUInteger = 1040;

/// https://developer.apple.com/documentation/Foundation/NSNumberFormatter?language=objc
pub const NumberFormatter = opaque {
    pub const Style = NumberFormatter.Style;

    pub const PadPosition = NumberFormatter.PadPosition;

    pub const RoundingMode = NumberFormatter.RoundingMode;

    pub const Internal = objc.ExternClass("NSNumberFormatter", @This(), Formatter, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn stringForObjectValue(_self: *@This(), _obj: ?objc.Id) ?*String {
        return objc.msgSend(_self, "stringForObjectValue:", ?*String, .{_obj});
    }

    pub fn attributedStringForObjectValueWithDefaultAttributes(_self: *@This(), _obj: ?objc.Id, _attrs: ?*anyopaque) ?*AttributedString {
        return objc.msgSend(_self, "attributedStringForObjectValue:withDefaultAttributes:", ?*AttributedString, .{ _obj, _attrs });
    }

    pub fn editingStringForObjectValue(_self: *@This(), _obj: ?objc.Id) ?*String {
        return objc.msgSend(_self, "editingStringForObjectValue:", ?*String, .{_obj});
    }

    pub fn getObjectValueForStringErrorDescription(_self: *@This(), _obj: ?*?objc.Id, _string: ?*String, _error: ?*?*String) objc.BOOL {
        return objc.msgSend(_self, "getObjectValue:forString:errorDescription:", objc.BOOL, .{ _obj, _string, _error });
    }

    pub fn isPartialStringValidNewEditingStringErrorDescription(_self: *@This(), _partialString: ?*String, _newString: ?*?*String, _error: ?*?*String) objc.BOOL {
        return objc.msgSend(_self, "isPartialStringValid:newEditingString:errorDescription:", objc.BOOL, .{ _partialString, _newString, _error });
    }

    pub fn isPartialStringValidProposedSelectedRangeOriginalStringOriginalSelectedRangeErrorDescription(
        _self: *@This(),
        _partialStringPtr: ?*?*String,
        _proposedSelRangePtr: RangePointer,
        _origString: ?*String,
        _origSelRange: Range,
        _error: ?*?*String,
    ) objc.BOOL {
        return objc.msgSend(_self, "isPartialStringValid:proposedSelectedRange:originalString:originalSelectedRange:errorDescription:", objc.BOOL, .{
            _partialStringPtr,
            _proposedSelRangePtr,
            _origString,
            _origSelRange,
            _error,
        });
    }

    pub fn setFormattingContext(_self: *@This(), _formattingContext: FormattingContext) void {
        return objc.msgSend(_self, "setFormattingContext:", void, .{_formattingContext});
    }

    pub fn formattingContext(_self: *@This()) FormattingContext {
        return objc.msgSend(_self, "formattingContext", FormattingContext, .{});
    }

    pub fn getObjectValueForStringRangeError(
        _self: *@This(),
        _obj: ?*?objc.Id,
        _string: ?*String,
        _rangep: ?*Range,
        _error: ?*?*Error,
    ) objc.BOOL {
        return objc.msgSend(_self, "getObjectValue:forString:range:error:", objc.BOOL, .{
            _obj,
            _string,
            _rangep,
            _error,
        });
    }

    pub fn stringFromNumber(_self: *@This(), _number: ?*Number) ?*String {
        return objc.msgSend(_self, "stringFromNumber:", ?*String, .{_number});
    }

    pub fn numberFromString(_self: *@This(), _string: ?*String) ?*Number {
        return objc.msgSend(_self, "numberFromString:", ?*Number, .{_string});
    }

    pub fn localizedStringFromNumberNumberStyle(_num: ?*Number, _nstyle: NumberFormatter.Style) ?*String {
        return objc.msgSend(Internal.class(), "localizedStringFromNumber:numberStyle:", ?*String, .{ _num, _nstyle });
    }

    pub fn defaultFormatterBehavior() NumberFormatterBehavior {
        return objc.msgSend(Internal.class(), "defaultFormatterBehavior", NumberFormatterBehavior, .{});
    }

    pub fn setDefaultFormatterBehavior(_behavior: NumberFormatterBehavior) void {
        return objc.msgSend(Internal.class(), "setDefaultFormatterBehavior:", void, .{_behavior});
    }

    pub fn minimumGroupingDigits(_self: *@This()) objc.NSInteger {
        return objc.msgSend(_self, "minimumGroupingDigits", objc.NSInteger, .{});
    }

    pub fn setMinimumGroupingDigits(_self: *@This(), _minimumGroupingDigits: objc.NSInteger) void {
        return objc.msgSend(_self, "setMinimumGroupingDigits:", void, .{_minimumGroupingDigits});
    }

    pub fn numberStyle(_self: *@This()) NumberFormatter.Style {
        return objc.msgSend(_self, "numberStyle", NumberFormatter.Style, .{});
    }

    pub fn setNumberStyle(_self: *@This(), _numberStyle: NumberFormatter.Style) void {
        return objc.msgSend(_self, "setNumberStyle:", void, .{_numberStyle});
    }

    pub fn locale(_self: *@This()) ?*Locale {
        return objc.msgSend(_self, "locale", ?*Locale, .{});
    }

    pub fn setLocale(_self: *@This(), _locale: ?*Locale) void {
        return objc.msgSend(_self, "setLocale:", void, .{_locale});
    }

    pub fn setGeneratesDecimalNumbers(_self: *@This(), _generatesDecimalNumbers: objc.BOOL) void {
        return objc.msgSend(_self, "setGeneratesDecimalNumbers:", void, .{_generatesDecimalNumbers});
    }

    pub fn generatesDecimalNumbers(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "generatesDecimalNumbers", objc.BOOL, .{});
    }

    pub fn setFormatterBehavior(_self: *@This(), _formatterBehavior: NumberFormatterBehavior) void {
        return objc.msgSend(_self, "setFormatterBehavior:", void, .{_formatterBehavior});
    }

    pub fn formatterBehavior(_self: *@This()) NumberFormatterBehavior {
        return objc.msgSend(_self, "formatterBehavior", NumberFormatterBehavior, .{});
    }

    pub fn setNegativeFormat(_self: *@This(), _negativeFormat: ?*String) void {
        return objc.msgSend(_self, "setNegativeFormat:", void, .{_negativeFormat});
    }

    pub fn negativeFormat(_self: *@This()) ?*String {
        return objc.msgSend(_self, "negativeFormat", ?*String, .{});
    }

    pub fn textAttributesForNegativeValues(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "textAttributesForNegativeValues", ?*anyopaque, .{});
    }

    pub fn setTextAttributesForNegativeValues(_self: *@This(), _textAttributesForNegativeValues: ?*anyopaque) void {
        return objc.msgSend(_self, "setTextAttributesForNegativeValues:", void, .{_textAttributesForNegativeValues});
    }

    pub fn positiveFormat(_self: *@This()) ?*String {
        return objc.msgSend(_self, "positiveFormat", ?*String, .{});
    }

    pub fn setPositiveFormat(_self: *@This(), _positiveFormat: ?*String) void {
        return objc.msgSend(_self, "setPositiveFormat:", void, .{_positiveFormat});
    }

    pub fn textAttributesForPositiveValues(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "textAttributesForPositiveValues", ?*anyopaque, .{});
    }

    pub fn setTextAttributesForPositiveValues(_self: *@This(), _textAttributesForPositiveValues: ?*anyopaque) void {
        return objc.msgSend(_self, "setTextAttributesForPositiveValues:", void, .{_textAttributesForPositiveValues});
    }

    pub fn setAllowsFloats(_self: *@This(), _allowsFloats: objc.BOOL) void {
        return objc.msgSend(_self, "setAllowsFloats:", void, .{_allowsFloats});
    }

    pub fn allowsFloats(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsFloats", objc.BOOL, .{});
    }

    pub fn decimalSeparator(_self: *@This()) ?*String {
        return objc.msgSend(_self, "decimalSeparator", ?*String, .{});
    }

    pub fn setDecimalSeparator(_self: *@This(), _decimalSeparator: ?*String) void {
        return objc.msgSend(_self, "setDecimalSeparator:", void, .{_decimalSeparator});
    }

    pub fn alwaysShowsDecimalSeparator(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "alwaysShowsDecimalSeparator", objc.BOOL, .{});
    }

    pub fn setAlwaysShowsDecimalSeparator(_self: *@This(), _alwaysShowsDecimalSeparator: objc.BOOL) void {
        return objc.msgSend(_self, "setAlwaysShowsDecimalSeparator:", void, .{_alwaysShowsDecimalSeparator});
    }

    pub fn currencyDecimalSeparator(_self: *@This()) ?*String {
        return objc.msgSend(_self, "currencyDecimalSeparator", ?*String, .{});
    }

    pub fn setCurrencyDecimalSeparator(_self: *@This(), _currencyDecimalSeparator: ?*String) void {
        return objc.msgSend(_self, "setCurrencyDecimalSeparator:", void, .{_currencyDecimalSeparator});
    }

    pub fn setUsesGroupingSeparator(_self: *@This(), _usesGroupingSeparator: objc.BOOL) void {
        return objc.msgSend(_self, "setUsesGroupingSeparator:", void, .{_usesGroupingSeparator});
    }

    pub fn usesGroupingSeparator(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "usesGroupingSeparator", objc.BOOL, .{});
    }

    pub fn setGroupingSeparator(_self: *@This(), _groupingSeparator: ?*String) void {
        return objc.msgSend(_self, "setGroupingSeparator:", void, .{_groupingSeparator});
    }

    pub fn groupingSeparator(_self: *@This()) ?*String {
        return objc.msgSend(_self, "groupingSeparator", ?*String, .{});
    }

    pub fn setZeroSymbol(_self: *@This(), _zeroSymbol: ?*String) void {
        return objc.msgSend(_self, "setZeroSymbol:", void, .{_zeroSymbol});
    }

    pub fn zeroSymbol(_self: *@This()) ?*String {
        return objc.msgSend(_self, "zeroSymbol", ?*String, .{});
    }

    pub fn textAttributesForZero(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "textAttributesForZero", ?*anyopaque, .{});
    }

    pub fn setTextAttributesForZero(_self: *@This(), _textAttributesForZero: ?*anyopaque) void {
        return objc.msgSend(_self, "setTextAttributesForZero:", void, .{_textAttributesForZero});
    }

    pub fn setNilSymbol(_self: *@This(), _nilSymbol: ?*String) void {
        return objc.msgSend(_self, "setNilSymbol:", void, .{_nilSymbol});
    }

    pub fn nilSymbol(_self: *@This()) ?*String {
        return objc.msgSend(_self, "nilSymbol", ?*String, .{});
    }

    pub fn setTextAttributesForNil(_self: *@This(), _textAttributesForNil: ?*anyopaque) void {
        return objc.msgSend(_self, "setTextAttributesForNil:", void, .{_textAttributesForNil});
    }

    pub fn textAttributesForNil(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "textAttributesForNil", ?*anyopaque, .{});
    }

    pub fn setNotANumberSymbol(_self: *@This(), _notANumberSymbol: ?*String) void {
        return objc.msgSend(_self, "setNotANumberSymbol:", void, .{_notANumberSymbol});
    }

    pub fn notANumberSymbol(_self: *@This()) ?*String {
        return objc.msgSend(_self, "notANumberSymbol", ?*String, .{});
    }

    pub fn setTextAttributesForNotANumber(_self: *@This(), _textAttributesForNotANumber: ?*anyopaque) void {
        return objc.msgSend(_self, "setTextAttributesForNotANumber:", void, .{_textAttributesForNotANumber});
    }

    pub fn textAttributesForNotANumber(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "textAttributesForNotANumber", ?*anyopaque, .{});
    }

    pub fn setPositiveInfinitySymbol(_self: *@This(), _positiveInfinitySymbol: ?*String) void {
        return objc.msgSend(_self, "setPositiveInfinitySymbol:", void, .{_positiveInfinitySymbol});
    }

    pub fn positiveInfinitySymbol(_self: *@This()) ?*String {
        return objc.msgSend(_self, "positiveInfinitySymbol", ?*String, .{});
    }

    pub fn textAttributesForPositiveInfinity(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "textAttributesForPositiveInfinity", ?*anyopaque, .{});
    }

    pub fn setTextAttributesForPositiveInfinity(_self: *@This(), _textAttributesForPositiveInfinity: ?*anyopaque) void {
        return objc.msgSend(_self, "setTextAttributesForPositiveInfinity:", void, .{_textAttributesForPositiveInfinity});
    }

    pub fn setNegativeInfinitySymbol(_self: *@This(), _negativeInfinitySymbol: ?*String) void {
        return objc.msgSend(_self, "setNegativeInfinitySymbol:", void, .{_negativeInfinitySymbol});
    }

    pub fn negativeInfinitySymbol(_self: *@This()) ?*String {
        return objc.msgSend(_self, "negativeInfinitySymbol", ?*String, .{});
    }

    pub fn textAttributesForNegativeInfinity(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "textAttributesForNegativeInfinity", ?*anyopaque, .{});
    }

    pub fn setTextAttributesForNegativeInfinity(_self: *@This(), _textAttributesForNegativeInfinity: ?*anyopaque) void {
        return objc.msgSend(_self, "setTextAttributesForNegativeInfinity:", void, .{_textAttributesForNegativeInfinity});
    }

    pub fn positivePrefix(_self: *@This()) ?*String {
        return objc.msgSend(_self, "positivePrefix", ?*String, .{});
    }

    pub fn setPositivePrefix(_self: *@This(), _positivePrefix: ?*String) void {
        return objc.msgSend(_self, "setPositivePrefix:", void, .{_positivePrefix});
    }

    pub fn setPositiveSuffix(_self: *@This(), _positiveSuffix: ?*String) void {
        return objc.msgSend(_self, "setPositiveSuffix:", void, .{_positiveSuffix});
    }

    pub fn positiveSuffix(_self: *@This()) ?*String {
        return objc.msgSend(_self, "positiveSuffix", ?*String, .{});
    }

    pub fn setNegativePrefix(_self: *@This(), _negativePrefix: ?*String) void {
        return objc.msgSend(_self, "setNegativePrefix:", void, .{_negativePrefix});
    }

    pub fn negativePrefix(_self: *@This()) ?*String {
        return objc.msgSend(_self, "negativePrefix", ?*String, .{});
    }

    pub fn setNegativeSuffix(_self: *@This(), _negativeSuffix: ?*String) void {
        return objc.msgSend(_self, "setNegativeSuffix:", void, .{_negativeSuffix});
    }

    pub fn negativeSuffix(_self: *@This()) ?*String {
        return objc.msgSend(_self, "negativeSuffix", ?*String, .{});
    }

    pub fn setCurrencyCode(_self: *@This(), _currencyCode: ?*String) void {
        return objc.msgSend(_self, "setCurrencyCode:", void, .{_currencyCode});
    }

    pub fn currencyCode(_self: *@This()) ?*String {
        return objc.msgSend(_self, "currencyCode", ?*String, .{});
    }

    pub fn setCurrencySymbol(_self: *@This(), _currencySymbol: ?*String) void {
        return objc.msgSend(_self, "setCurrencySymbol:", void, .{_currencySymbol});
    }

    pub fn currencySymbol(_self: *@This()) ?*String {
        return objc.msgSend(_self, "currencySymbol", ?*String, .{});
    }

    pub fn setInternationalCurrencySymbol(_self: *@This(), _internationalCurrencySymbol: ?*String) void {
        return objc.msgSend(_self, "setInternationalCurrencySymbol:", void, .{_internationalCurrencySymbol});
    }

    pub fn internationalCurrencySymbol(_self: *@This()) ?*String {
        return objc.msgSend(_self, "internationalCurrencySymbol", ?*String, .{});
    }

    pub fn percentSymbol(_self: *@This()) ?*String {
        return objc.msgSend(_self, "percentSymbol", ?*String, .{});
    }

    pub fn setPercentSymbol(_self: *@This(), _percentSymbol: ?*String) void {
        return objc.msgSend(_self, "setPercentSymbol:", void, .{_percentSymbol});
    }

    pub fn perMillSymbol(_self: *@This()) ?*String {
        return objc.msgSend(_self, "perMillSymbol", ?*String, .{});
    }

    pub fn setPerMillSymbol(_self: *@This(), _perMillSymbol: ?*String) void {
        return objc.msgSend(_self, "setPerMillSymbol:", void, .{_perMillSymbol});
    }

    pub fn minusSign(_self: *@This()) ?*String {
        return objc.msgSend(_self, "minusSign", ?*String, .{});
    }

    pub fn setMinusSign(_self: *@This(), _minusSign: ?*String) void {
        return objc.msgSend(_self, "setMinusSign:", void, .{_minusSign});
    }

    pub fn setPlusSign(_self: *@This(), _plusSign: ?*String) void {
        return objc.msgSend(_self, "setPlusSign:", void, .{_plusSign});
    }

    pub fn plusSign(_self: *@This()) ?*String {
        return objc.msgSend(_self, "plusSign", ?*String, .{});
    }

    pub fn exponentSymbol(_self: *@This()) ?*String {
        return objc.msgSend(_self, "exponentSymbol", ?*String, .{});
    }

    pub fn setExponentSymbol(_self: *@This(), _exponentSymbol: ?*String) void {
        return objc.msgSend(_self, "setExponentSymbol:", void, .{_exponentSymbol});
    }

    pub fn groupingSize(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "groupingSize", objc.NSUInteger, .{});
    }

    pub fn setGroupingSize(_self: *@This(), _groupingSize: objc.NSUInteger) void {
        return objc.msgSend(_self, "setGroupingSize:", void, .{_groupingSize});
    }

    pub fn secondaryGroupingSize(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "secondaryGroupingSize", objc.NSUInteger, .{});
    }

    pub fn setSecondaryGroupingSize(_self: *@This(), _secondaryGroupingSize: objc.NSUInteger) void {
        return objc.msgSend(_self, "setSecondaryGroupingSize:", void, .{_secondaryGroupingSize});
    }

    pub fn multiplier(_self: *@This()) ?*Number {
        return objc.msgSend(_self, "multiplier", ?*Number, .{});
    }

    pub fn setMultiplier(_self: *@This(), _multiplier: ?*Number) void {
        return objc.msgSend(_self, "setMultiplier:", void, .{_multiplier});
    }

    pub fn formatWidth(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "formatWidth", objc.NSUInteger, .{});
    }

    pub fn setFormatWidth(_self: *@This(), _formatWidth: objc.NSUInteger) void {
        return objc.msgSend(_self, "setFormatWidth:", void, .{_formatWidth});
    }

    pub fn paddingCharacter(_self: *@This()) ?*String {
        return objc.msgSend(_self, "paddingCharacter", ?*String, .{});
    }

    pub fn setPaddingCharacter(_self: *@This(), _paddingCharacter: ?*String) void {
        return objc.msgSend(_self, "setPaddingCharacter:", void, .{_paddingCharacter});
    }

    pub fn setPaddingPosition(_self: *@This(), _paddingPosition: NumberFormatter.PadPosition) void {
        return objc.msgSend(_self, "setPaddingPosition:", void, .{_paddingPosition});
    }

    pub fn paddingPosition(_self: *@This()) NumberFormatter.PadPosition {
        return objc.msgSend(_self, "paddingPosition", NumberFormatter.PadPosition, .{});
    }

    pub fn setRoundingMode(_self: *@This(), _roundingMode: NumberFormatter.RoundingMode) void {
        return objc.msgSend(_self, "setRoundingMode:", void, .{_roundingMode});
    }

    pub fn roundingMode(_self: *@This()) NumberFormatter.RoundingMode {
        return objc.msgSend(_self, "roundingMode", NumberFormatter.RoundingMode, .{});
    }

    pub fn setRoundingIncrement(_self: *@This(), _roundingIncrement: ?*Number) void {
        return objc.msgSend(_self, "setRoundingIncrement:", void, .{_roundingIncrement});
    }

    pub fn roundingIncrement(_self: *@This()) ?*Number {
        return objc.msgSend(_self, "roundingIncrement", ?*Number, .{});
    }

    pub fn minimumIntegerDigits(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "minimumIntegerDigits", objc.NSUInteger, .{});
    }

    pub fn setMinimumIntegerDigits(_self: *@This(), _minimumIntegerDigits: objc.NSUInteger) void {
        return objc.msgSend(_self, "setMinimumIntegerDigits:", void, .{_minimumIntegerDigits});
    }

    pub fn setMaximumIntegerDigits(_self: *@This(), _maximumIntegerDigits: objc.NSUInteger) void {
        return objc.msgSend(_self, "setMaximumIntegerDigits:", void, .{_maximumIntegerDigits});
    }

    pub fn maximumIntegerDigits(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "maximumIntegerDigits", objc.NSUInteger, .{});
    }

    pub fn setMinimumFractionDigits(_self: *@This(), _minimumFractionDigits: objc.NSUInteger) void {
        return objc.msgSend(_self, "setMinimumFractionDigits:", void, .{_minimumFractionDigits});
    }

    pub fn minimumFractionDigits(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "minimumFractionDigits", objc.NSUInteger, .{});
    }

    pub fn maximumFractionDigits(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "maximumFractionDigits", objc.NSUInteger, .{});
    }

    pub fn setMaximumFractionDigits(_self: *@This(), _maximumFractionDigits: objc.NSUInteger) void {
        return objc.msgSend(_self, "setMaximumFractionDigits:", void, .{_maximumFractionDigits});
    }

    pub fn setMinimum(_self: *@This(), _minimum: ?*Number) void {
        return objc.msgSend(_self, "setMinimum:", void, .{_minimum});
    }

    pub fn minimum(_self: *@This()) ?*Number {
        return objc.msgSend(_self, "minimum", ?*Number, .{});
    }

    pub fn setMaximum(_self: *@This(), _maximum: ?*Number) void {
        return objc.msgSend(_self, "setMaximum:", void, .{_maximum});
    }

    pub fn maximum(_self: *@This()) ?*Number {
        return objc.msgSend(_self, "maximum", ?*Number, .{});
    }

    pub fn setCurrencyGroupingSeparator(_self: *@This(), _currencyGroupingSeparator: ?*String) void {
        return objc.msgSend(_self, "setCurrencyGroupingSeparator:", void, .{_currencyGroupingSeparator});
    }

    pub fn currencyGroupingSeparator(_self: *@This()) ?*String {
        return objc.msgSend(_self, "currencyGroupingSeparator", ?*String, .{});
    }

    pub fn isLenient(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isLenient", objc.BOOL, .{});
    }

    pub fn setLenient(_self: *@This(), _lenient: objc.BOOL) void {
        return objc.msgSend(_self, "setLenient:", void, .{_lenient});
    }

    pub fn usesSignificantDigits(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "usesSignificantDigits", objc.BOOL, .{});
    }

    pub fn setUsesSignificantDigits(_self: *@This(), _usesSignificantDigits: objc.BOOL) void {
        return objc.msgSend(_self, "setUsesSignificantDigits:", void, .{_usesSignificantDigits});
    }

    pub fn minimumSignificantDigits(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "minimumSignificantDigits", objc.NSUInteger, .{});
    }

    pub fn setMinimumSignificantDigits(_self: *@This(), _minimumSignificantDigits: objc.NSUInteger) void {
        return objc.msgSend(_self, "setMinimumSignificantDigits:", void, .{_minimumSignificantDigits});
    }

    pub fn setMaximumSignificantDigits(_self: *@This(), _maximumSignificantDigits: objc.NSUInteger) void {
        return objc.msgSend(_self, "setMaximumSignificantDigits:", void, .{_maximumSignificantDigits});
    }

    pub fn maximumSignificantDigits(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "maximumSignificantDigits", objc.NSUInteger, .{});
    }

    pub fn isPartialStringValidationEnabled(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isPartialStringValidationEnabled", objc.BOOL, .{});
    }

    pub fn setPartialStringValidationEnabled(_self: *@This(), _partialStringValidationEnabled: objc.BOOL) void {
        return objc.msgSend(_self, "setPartialStringValidationEnabled:", void, .{_partialStringValidationEnabled});
    }
};

pub const LocaleKey = ?*String;

/// https://developer.apple.com/documentation/Foundation/NSLocale?language=objc
pub const Locale = opaque {
    pub const Internal = objc.ExternClass("NSLocale", @This(), objc.NSObject, &.{ Copying, SecureCoding });
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn supportsSecureCoding() objc.BOOL {
        return objc.msgSend(Internal.class(), "supportsSecureCoding", objc.BOOL, .{});
    }

    pub fn objectForKey(_self: *@This(), _key: LocaleKey) ?objc.Id {
        return objc.msgSend(_self, "objectForKey:", ?objc.Id, .{_key});
    }

    pub fn displayNameForKeyValue(_self: *@This(), _key: LocaleKey, _value: ?objc.Id) ?*String {
        return objc.msgSend(_self, "displayNameForKey:value:", ?*String, .{ _key, _value });
    }

    pub fn initWithLocaleIdentifier(_self: *@This(), _string: ?*String) *@This() {
        return objc.msgSend(_self, "initWithLocaleIdentifier:", *@This(), .{_string});
    }
};

pub const LocaleLanguageDirection = objc.NSUInteger;
pub const LocaleLanguageDirection_Unknown: objc.NSUInteger = 0;
pub const LocaleLanguageDirection_LeftToRight: objc.NSUInteger = 1;
pub const LocaleLanguageDirection_RightToLeft: objc.NSUInteger = 2;
pub const LocaleLanguageDirection_TopToBottom: objc.NSUInteger = 3;
pub const LocaleLanguageDirection_BottomToTop: objc.NSUInteger = 4;

pub const MeasurementFormatterUnitOptions = objc.NSUInteger;
pub const MeasurementFormatterUnitOptions_ProvidedUnit: objc.NSUInteger = 1;
pub const MeasurementFormatterUnitOptions_NaturalScale: objc.NSUInteger = 2;
pub const MeasurementFormatterUnitOptions_TemperatureWithoutUnit: objc.NSUInteger = 4;

/// https://developer.apple.com/documentation/Foundation/NSMeasurementFormatter?language=objc
pub const MeasurementFormatter = opaque {
    pub const Internal = objc.ExternClass("NSMeasurementFormatter", @This(), Formatter, &.{SecureCoding});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn stringForObjectValue(_self: *@This(), _obj: ?objc.Id) ?*String {
        return objc.msgSend(_self, "stringForObjectValue:", ?*String, .{_obj});
    }

    pub fn attributedStringForObjectValueWithDefaultAttributes(_self: *@This(), _obj: ?objc.Id, _attrs: ?*anyopaque) ?*AttributedString {
        return objc.msgSend(_self, "attributedStringForObjectValue:withDefaultAttributes:", ?*AttributedString, .{ _obj, _attrs });
    }

    pub fn editingStringForObjectValue(_self: *@This(), _obj: ?objc.Id) ?*String {
        return objc.msgSend(_self, "editingStringForObjectValue:", ?*String, .{_obj});
    }

    pub fn getObjectValueForStringErrorDescription(_self: *@This(), _obj: ?*?objc.Id, _string: ?*String, _error: ?*?*String) objc.BOOL {
        return objc.msgSend(_self, "getObjectValue:forString:errorDescription:", objc.BOOL, .{ _obj, _string, _error });
    }

    pub fn isPartialStringValidNewEditingStringErrorDescription(_self: *@This(), _partialString: ?*String, _newString: ?*?*String, _error: ?*?*String) objc.BOOL {
        return objc.msgSend(_self, "isPartialStringValid:newEditingString:errorDescription:", objc.BOOL, .{ _partialString, _newString, _error });
    }

    pub fn isPartialStringValidProposedSelectedRangeOriginalStringOriginalSelectedRangeErrorDescription(
        _self: *@This(),
        _partialStringPtr: ?*?*String,
        _proposedSelRangePtr: RangePointer,
        _origString: ?*String,
        _origSelRange: Range,
        _error: ?*?*String,
    ) objc.BOOL {
        return objc.msgSend(_self, "isPartialStringValid:proposedSelectedRange:originalString:originalSelectedRange:errorDescription:", objc.BOOL, .{
            _partialStringPtr,
            _proposedSelRangePtr,
            _origString,
            _origSelRange,
            _error,
        });
    }

    pub fn supportsSecureCoding() objc.BOOL {
        return objc.msgSend(Internal.class(), "supportsSecureCoding", objc.BOOL, .{});
    }

    pub fn stringFromMeasurement(_self: *@This(), _measurement: ?*Measurement) ?*String {
        return objc.msgSend(_self, "stringFromMeasurement:", ?*String, .{_measurement});
    }

    pub fn stringFromUnit(_self: *@This(), _unit: ?*Unit) ?*String {
        return objc.msgSend(_self, "stringFromUnit:", ?*String, .{_unit});
    }

    pub fn unitOptions(_self: *@This()) MeasurementFormatterUnitOptions {
        return objc.msgSend(_self, "unitOptions", MeasurementFormatterUnitOptions, .{});
    }

    pub fn setUnitOptions(_self: *@This(), _unitOptions: MeasurementFormatterUnitOptions) void {
        return objc.msgSend(_self, "setUnitOptions:", void, .{_unitOptions});
    }

    pub fn unitStyle(_self: *@This()) FormattingUnitStyle {
        return objc.msgSend(_self, "unitStyle", FormattingUnitStyle, .{});
    }

    pub fn setUnitStyle(_self: *@This(), _unitStyle: FormattingUnitStyle) void {
        return objc.msgSend(_self, "setUnitStyle:", void, .{_unitStyle});
    }

    pub fn locale(_self: *@This()) ?*Locale {
        return objc.msgSend(_self, "locale", ?*Locale, .{});
    }

    pub fn setLocale(_self: *@This(), _locale: ?*Locale) void {
        return objc.msgSend(_self, "setLocale:", void, .{_locale});
    }

    pub fn numberFormatter(_self: *@This()) ?*NumberFormatter {
        return objc.msgSend(_self, "numberFormatter", ?*NumberFormatter, .{});
    }

    pub fn setNumberFormatter(_self: *@This(), _numberFormatter: ?*NumberFormatter) void {
        return objc.msgSend(_self, "setNumberFormatter:", void, .{_numberFormatter});
    }
};

/// https://developer.apple.com/documentation/Foundation/NSPersonNameComponents?language=objc
pub const PersonNameComponents = opaque {
    pub const Internal = objc.ExternClass("NSPersonNameComponents", @This(), objc.NSObject, &.{ Copying, SecureCoding });
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn supportsSecureCoding() objc.BOOL {
        return objc.msgSend(Internal.class(), "supportsSecureCoding", objc.BOOL, .{});
    }

    pub fn namePrefix(_self: *@This()) ?*String {
        return objc.msgSend(_self, "namePrefix", ?*String, .{});
    }

    pub fn setNamePrefix(_self: *@This(), _namePrefix: ?*String) void {
        return objc.msgSend(_self, "setNamePrefix:", void, .{_namePrefix});
    }

    pub fn givenName(_self: *@This()) ?*String {
        return objc.msgSend(_self, "givenName", ?*String, .{});
    }

    pub fn setGivenName(_self: *@This(), _givenName: ?*String) void {
        return objc.msgSend(_self, "setGivenName:", void, .{_givenName});
    }

    pub fn middleName(_self: *@This()) ?*String {
        return objc.msgSend(_self, "middleName", ?*String, .{});
    }

    pub fn setMiddleName(_self: *@This(), _middleName: ?*String) void {
        return objc.msgSend(_self, "setMiddleName:", void, .{_middleName});
    }

    pub fn familyName(_self: *@This()) ?*String {
        return objc.msgSend(_self, "familyName", ?*String, .{});
    }

    pub fn setFamilyName(_self: *@This(), _familyName: ?*String) void {
        return objc.msgSend(_self, "setFamilyName:", void, .{_familyName});
    }

    pub fn nameSuffix(_self: *@This()) ?*String {
        return objc.msgSend(_self, "nameSuffix", ?*String, .{});
    }

    pub fn setNameSuffix(_self: *@This(), _nameSuffix: ?*String) void {
        return objc.msgSend(_self, "setNameSuffix:", void, .{_nameSuffix});
    }

    pub fn nickname(_self: *@This()) ?*String {
        return objc.msgSend(_self, "nickname", ?*String, .{});
    }

    pub fn setNickname(_self: *@This(), _nickname: ?*String) void {
        return objc.msgSend(_self, "setNickname:", void, .{_nickname});
    }

    pub fn phoneticRepresentation(_self: *@This()) ?*PersonNameComponents {
        return objc.msgSend(_self, "phoneticRepresentation", ?*PersonNameComponents, .{});
    }

    pub fn setPhoneticRepresentation(_self: *@This(), _phoneticRepresentation: ?*PersonNameComponents) void {
        return objc.msgSend(_self, "setPhoneticRepresentation:", void, .{_phoneticRepresentation});
    }
};

pub const PersonNameComponentsFormatterStyle = objc.NSInteger;
pub const PersonNameComponentsFormatterStyle_Default: objc.NSInteger = 0;
pub const PersonNameComponentsFormatterStyle_Short: objc.NSInteger = 1;
pub const PersonNameComponentsFormatterStyle_Medium: objc.NSInteger = 2;
pub const PersonNameComponentsFormatterStyle_Long: objc.NSInteger = 3;
pub const PersonNameComponentsFormatterStyle_Abbreviated: objc.NSInteger = 4;

pub const PersonNameComponentsFormatterOptions = objc.NSUInteger;
pub const PersonNameComponentsFormatterOptions_Phonetic: objc.NSUInteger = 2;

/// https://developer.apple.com/documentation/Foundation/NSPersonNameComponentsFormatter?language=objc
pub const PersonNameComponentsFormatter = opaque {
    pub const Internal = objc.ExternClass("NSPersonNameComponentsFormatter", @This(), Formatter, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn stringForObjectValue(_self: *@This(), _obj: ?objc.Id) ?*String {
        return objc.msgSend(_self, "stringForObjectValue:", ?*String, .{_obj});
    }

    pub fn attributedStringForObjectValueWithDefaultAttributes(_self: *@This(), _obj: ?objc.Id, _attrs: ?*anyopaque) ?*AttributedString {
        return objc.msgSend(_self, "attributedStringForObjectValue:withDefaultAttributes:", ?*AttributedString, .{ _obj, _attrs });
    }

    pub fn editingStringForObjectValue(_self: *@This(), _obj: ?objc.Id) ?*String {
        return objc.msgSend(_self, "editingStringForObjectValue:", ?*String, .{_obj});
    }

    pub fn getObjectValueForStringErrorDescription(_self: *@This(), _obj: ?*?objc.Id, _string: ?*String, _error: ?*?*String) objc.BOOL {
        return objc.msgSend(_self, "getObjectValue:forString:errorDescription:", objc.BOOL, .{ _obj, _string, _error });
    }

    pub fn isPartialStringValidNewEditingStringErrorDescription(_self: *@This(), _partialString: ?*String, _newString: ?*?*String, _error: ?*?*String) objc.BOOL {
        return objc.msgSend(_self, "isPartialStringValid:newEditingString:errorDescription:", objc.BOOL, .{ _partialString, _newString, _error });
    }

    pub fn isPartialStringValidProposedSelectedRangeOriginalStringOriginalSelectedRangeErrorDescription(
        _self: *@This(),
        _partialStringPtr: ?*?*String,
        _proposedSelRangePtr: RangePointer,
        _origString: ?*String,
        _origSelRange: Range,
        _error: ?*?*String,
    ) objc.BOOL {
        return objc.msgSend(_self, "isPartialStringValid:proposedSelectedRange:originalString:originalSelectedRange:errorDescription:", objc.BOOL, .{
            _partialStringPtr,
            _proposedSelRangePtr,
            _origString,
            _origSelRange,
            _error,
        });
    }

    pub fn localizedStringFromPersonNameComponentsStyleOptions(_components: ?*PersonNameComponents, _nameFormatStyle: PersonNameComponentsFormatterStyle, _nameOptions: PersonNameComponentsFormatterOptions) ?*String {
        return objc.msgSend(Internal.class(), "localizedStringFromPersonNameComponents:style:options:", ?*String, .{ _components, _nameFormatStyle, _nameOptions });
    }

    pub fn stringFromPersonNameComponents(_self: *@This(), _components: ?*PersonNameComponents) ?*String {
        return objc.msgSend(_self, "stringFromPersonNameComponents:", ?*String, .{_components});
    }

    pub fn annotatedStringFromPersonNameComponents(_self: *@This(), _components: ?*PersonNameComponents) ?*AttributedString {
        return objc.msgSend(_self, "annotatedStringFromPersonNameComponents:", ?*AttributedString, .{_components});
    }

    pub fn personNameComponentsFromString(_self: *@This(), _string: ?*String) ?*PersonNameComponents {
        return objc.msgSend(_self, "personNameComponentsFromString:", ?*PersonNameComponents, .{_string});
    }

    pub fn style(_self: *@This()) PersonNameComponentsFormatterStyle {
        return objc.msgSend(_self, "style", PersonNameComponentsFormatterStyle, .{});
    }

    pub fn setStyle(_self: *@This(), _style: PersonNameComponentsFormatterStyle) void {
        return objc.msgSend(_self, "setStyle:", void, .{_style});
    }

    pub fn isPhonetic(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isPhonetic", objc.BOOL, .{});
    }

    pub fn setPhonetic(_self: *@This(), _phonetic: objc.BOOL) void {
        return objc.msgSend(_self, "setPhonetic:", void, .{_phonetic});
    }

    pub fn locale(_self: *@This()) ?*Locale {
        return objc.msgSend(_self, "locale", ?*Locale, .{});
    }

    pub fn setLocale(_self: *@This(), _locale: ?*Locale) void {
        return objc.msgSend(_self, "setLocale:", void, .{_locale});
    }
};

pub const RelativeDateTimeFormatterStyle = objc.NSInteger;
pub const RelativeDateTimeFormatterStyle_Numeric: objc.NSInteger = 0;
pub const RelativeDateTimeFormatterStyle_Named: objc.NSInteger = 1;

pub const RelativeDateTimeFormatterUnitsStyle = objc.NSInteger;
pub const RelativeDateTimeFormatterUnitsStyle_Full: objc.NSInteger = 0;
pub const RelativeDateTimeFormatterUnitsStyle_SpellOut: objc.NSInteger = 1;
pub const RelativeDateTimeFormatterUnitsStyle_Short: objc.NSInteger = 2;
pub const RelativeDateTimeFormatterUnitsStyle_Abbreviated: objc.NSInteger = 3;

/// https://developer.apple.com/documentation/Foundation/NSRelativeDateTimeFormatter?language=objc
pub const RelativeDateTimeFormatter = opaque {
    pub const Internal = objc.ExternClass("NSRelativeDateTimeFormatter", @This(), Formatter, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn stringForObjectValue(_self: *@This(), _obj: ?objc.Id) ?*String {
        return objc.msgSend(_self, "stringForObjectValue:", ?*String, .{_obj});
    }

    pub fn attributedStringForObjectValueWithDefaultAttributes(_self: *@This(), _obj: ?objc.Id, _attrs: ?*anyopaque) ?*AttributedString {
        return objc.msgSend(_self, "attributedStringForObjectValue:withDefaultAttributes:", ?*AttributedString, .{ _obj, _attrs });
    }

    pub fn editingStringForObjectValue(_self: *@This(), _obj: ?objc.Id) ?*String {
        return objc.msgSend(_self, "editingStringForObjectValue:", ?*String, .{_obj});
    }

    pub fn getObjectValueForStringErrorDescription(_self: *@This(), _obj: ?*?objc.Id, _string: ?*String, _error: ?*?*String) objc.BOOL {
        return objc.msgSend(_self, "getObjectValue:forString:errorDescription:", objc.BOOL, .{ _obj, _string, _error });
    }

    pub fn isPartialStringValidNewEditingStringErrorDescription(_self: *@This(), _partialString: ?*String, _newString: ?*?*String, _error: ?*?*String) objc.BOOL {
        return objc.msgSend(_self, "isPartialStringValid:newEditingString:errorDescription:", objc.BOOL, .{ _partialString, _newString, _error });
    }

    pub fn isPartialStringValidProposedSelectedRangeOriginalStringOriginalSelectedRangeErrorDescription(
        _self: *@This(),
        _partialStringPtr: ?*?*String,
        _proposedSelRangePtr: RangePointer,
        _origString: ?*String,
        _origSelRange: Range,
        _error: ?*?*String,
    ) objc.BOOL {
        return objc.msgSend(_self, "isPartialStringValid:proposedSelectedRange:originalString:originalSelectedRange:errorDescription:", objc.BOOL, .{
            _partialStringPtr,
            _proposedSelRangePtr,
            _origString,
            _origSelRange,
            _error,
        });
    }

    pub fn localizedStringFromDateComponents(_self: *@This(), _dateComponents: ?*DateComponents) ?*String {
        return objc.msgSend(_self, "localizedStringFromDateComponents:", ?*String, .{_dateComponents});
    }

    pub fn localizedStringFromTimeInterval(_self: *@This(), _timeInterval: TimeInterval) ?*String {
        return objc.msgSend(_self, "localizedStringFromTimeInterval:", ?*String, .{_timeInterval});
    }

    pub fn localizedStringForDateRelativeToDate(_self: *@This(), _date: ?*Date, _referenceDate: ?*Date) ?*String {
        return objc.msgSend(_self, "localizedStringForDate:relativeToDate:", ?*String, .{ _date, _referenceDate });
    }

    pub fn dateTimeStyle(_self: *@This()) RelativeDateTimeFormatterStyle {
        return objc.msgSend(_self, "dateTimeStyle", RelativeDateTimeFormatterStyle, .{});
    }

    pub fn setDateTimeStyle(_self: *@This(), _dateTimeStyle: RelativeDateTimeFormatterStyle) void {
        return objc.msgSend(_self, "setDateTimeStyle:", void, .{_dateTimeStyle});
    }

    pub fn unitsStyle(_self: *@This()) RelativeDateTimeFormatterUnitsStyle {
        return objc.msgSend(_self, "unitsStyle", RelativeDateTimeFormatterUnitsStyle, .{});
    }

    pub fn setUnitsStyle(_self: *@This(), _unitsStyle: RelativeDateTimeFormatterUnitsStyle) void {
        return objc.msgSend(_self, "setUnitsStyle:", void, .{_unitsStyle});
    }

    pub fn formattingContext(_self: *@This()) FormattingContext {
        return objc.msgSend(_self, "formattingContext", FormattingContext, .{});
    }

    pub fn setFormattingContext(_self: *@This(), _formattingContext: FormattingContext) void {
        return objc.msgSend(_self, "setFormattingContext:", void, .{_formattingContext});
    }

    pub fn calendar(_self: *@This()) ?*Calendar {
        return objc.msgSend(_self, "calendar", ?*Calendar, .{});
    }

    pub fn setCalendar(_self: *@This(), _calendar: ?*Calendar) void {
        return objc.msgSend(_self, "setCalendar:", void, .{_calendar});
    }

    pub fn locale(_self: *@This()) ?*Locale {
        return objc.msgSend(_self, "locale", ?*Locale, .{});
    }

    pub fn setLocale(_self: *@This(), _locale: ?*Locale) void {
        return objc.msgSend(_self, "setLocale:", void, .{_locale});
    }
};

/// https://developer.apple.com/documentation/Foundation/NSListFormatter?language=objc
pub const ListFormatter = opaque {
    pub const Internal = objc.ExternClass("NSListFormatter", @This(), Formatter, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn stringForObjectValue(_self: *@This(), _obj: ?objc.Id) ?*String {
        return objc.msgSend(_self, "stringForObjectValue:", ?*String, .{_obj});
    }

    pub fn attributedStringForObjectValueWithDefaultAttributes(_self: *@This(), _obj: ?objc.Id, _attrs: ?*anyopaque) ?*AttributedString {
        return objc.msgSend(_self, "attributedStringForObjectValue:withDefaultAttributes:", ?*AttributedString, .{ _obj, _attrs });
    }

    pub fn editingStringForObjectValue(_self: *@This(), _obj: ?objc.Id) ?*String {
        return objc.msgSend(_self, "editingStringForObjectValue:", ?*String, .{_obj});
    }

    pub fn getObjectValueForStringErrorDescription(_self: *@This(), _obj: ?*?objc.Id, _string: ?*String, _error: ?*?*String) objc.BOOL {
        return objc.msgSend(_self, "getObjectValue:forString:errorDescription:", objc.BOOL, .{ _obj, _string, _error });
    }

    pub fn isPartialStringValidNewEditingStringErrorDescription(_self: *@This(), _partialString: ?*String, _newString: ?*?*String, _error: ?*?*String) objc.BOOL {
        return objc.msgSend(_self, "isPartialStringValid:newEditingString:errorDescription:", objc.BOOL, .{ _partialString, _newString, _error });
    }

    pub fn isPartialStringValidProposedSelectedRangeOriginalStringOriginalSelectedRangeErrorDescription(
        _self: *@This(),
        _partialStringPtr: ?*?*String,
        _proposedSelRangePtr: RangePointer,
        _origString: ?*String,
        _origSelRange: Range,
        _error: ?*?*String,
    ) objc.BOOL {
        return objc.msgSend(_self, "isPartialStringValid:proposedSelectedRange:originalString:originalSelectedRange:errorDescription:", objc.BOOL, .{
            _partialStringPtr,
            _proposedSelRangePtr,
            _origString,
            _origSelRange,
            _error,
        });
    }

    pub fn localizedStringByJoiningStrings(_strings: ?*anyopaque) ?*String {
        return objc.msgSend(Internal.class(), "localizedStringByJoiningStrings:", ?*String, .{_strings});
    }

    pub fn stringFromItems(_self: *@This(), _items: ?*Array) ?*String {
        return objc.msgSend(_self, "stringFromItems:", ?*String, .{_items});
    }

    pub fn locale(_self: *@This()) ?*Locale {
        return objc.msgSend(_self, "locale", ?*Locale, .{});
    }

    pub fn setLocale(_self: *@This(), _locale: ?*Locale) void {
        return objc.msgSend(_self, "setLocale:", void, .{_locale});
    }

    pub fn itemFormatter(_self: *@This()) ?*Formatter {
        return objc.msgSend(_self, "itemFormatter", ?*Formatter, .{});
    }

    pub fn setItemFormatter(_self: *@This(), _itemFormatter: ?*Formatter) void {
        return objc.msgSend(_self, "setItemFormatter:", void, .{_itemFormatter});
    }
};

pub const RoundingMode = objc.NSUInteger;
pub const RoundingMode_Plain: objc.NSUInteger = 0;
pub const RoundingMode_Down: objc.NSUInteger = 1;
pub const RoundingMode_Up: objc.NSUInteger = 2;
pub const RoundingMode_Bankers: objc.NSUInteger = 3;

pub const CalculationError = objc.NSUInteger;
pub const CalculationError_NoError: objc.NSUInteger = 0;
pub const CalculationError_LossOfPrecision: objc.NSUInteger = 1;
pub const CalculationError_Underflow: objc.NSUInteger = 2;
pub const CalculationError_Overflow: objc.NSUInteger = 3;
pub const CalculationError_DivideByZero: objc.NSUInteger = 4;

pub const Decimal = extern struct {
    _exponent: i32,
    _length: u32,
    _isNegative: u32,
    _isCompact: u32,
    _reserved: u32,
    _mantissa: [8]u16,
};

extern "Foundation" fn NSDecimalCopy(destination: ?*Decimal, source: ?*Decimal) callconv(.C) void;
pub const decimalCopy = NSDecimalCopy;

extern "Foundation" fn NSDecimalCompact(number: ?*Decimal) callconv(.C) void;
pub const decimalCompact = NSDecimalCompact;

extern "Foundation" fn NSDecimalCompare(leftOperand: ?*Decimal, rightOperand: ?*Decimal) callconv(.C) ComparisonResult;
pub const decimalCompare = NSDecimalCompare;

extern "Foundation" fn NSDecimalRound(
    result: ?*Decimal,
    number: ?*Decimal,
    scale: objc.NSInteger,
    roundingMode: RoundingMode,
) callconv(.C) void;
pub const decimalRound = NSDecimalRound;

extern "Foundation" fn NSDecimalNormalize(number1: ?*Decimal, number2: ?*Decimal, roundingMode: RoundingMode) callconv(.C) CalculationError;
pub const decimalNormalize = NSDecimalNormalize;

extern "Foundation" fn NSDecimalAdd(
    result: ?*Decimal,
    leftOperand: ?*Decimal,
    rightOperand: ?*Decimal,
    roundingMode: RoundingMode,
) callconv(.C) CalculationError;
pub const decimalAdd = NSDecimalAdd;

extern "Foundation" fn NSDecimalSubtract(
    result: ?*Decimal,
    leftOperand: ?*Decimal,
    rightOperand: ?*Decimal,
    roundingMode: RoundingMode,
) callconv(.C) CalculationError;
pub const decimalSubtract = NSDecimalSubtract;

extern "Foundation" fn NSDecimalMultiply(
    result: ?*Decimal,
    leftOperand: ?*Decimal,
    rightOperand: ?*Decimal,
    roundingMode: RoundingMode,
) callconv(.C) CalculationError;
pub const decimalMultiply = NSDecimalMultiply;

extern "Foundation" fn NSDecimalDivide(
    result: ?*Decimal,
    leftOperand: ?*Decimal,
    rightOperand: ?*Decimal,
    roundingMode: RoundingMode,
) callconv(.C) CalculationError;
pub const decimalDivide = NSDecimalDivide;

extern "Foundation" fn NSDecimalPower(
    result: ?*Decimal,
    number: ?*Decimal,
    power: objc.NSUInteger,
    roundingMode: RoundingMode,
) callconv(.C) CalculationError;
pub const decimalPower = NSDecimalPower;

extern "Foundation" fn NSDecimalMultiplyByPowerOf10(
    result: ?*Decimal,
    number: ?*Decimal,
    power: i16,
    roundingMode: RoundingMode,
) callconv(.C) CalculationError;
pub const decimalMultiplyByPowerOf10 = NSDecimalMultiplyByPowerOf10;

extern "Foundation" fn NSDecimalString(dcm: ?*Decimal, locale: ?objc.Id) callconv(.C) ?*String;
pub const decimalString = NSDecimalString;

/// https://developer.apple.com/documentation/Foundation/NSScanner?language=objc
pub const Scanner = opaque {
    pub const Internal = objc.ExternClass("NSScanner", @This(), objc.NSObject, &.{Copying});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn initWithString(_self: *@This(), _string: ?*String) *@This() {
        return objc.msgSend(_self, "initWithString:", *@This(), .{_string});
    }

    pub fn string(_self: *@This()) ?*String {
        return objc.msgSend(_self, "string", ?*String, .{});
    }

    pub fn scanLocation(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "scanLocation", objc.NSUInteger, .{});
    }

    pub fn setScanLocation(_self: *@This(), _scanLocation: objc.NSUInteger) void {
        return objc.msgSend(_self, "setScanLocation:", void, .{_scanLocation});
    }

    pub fn charactersToBeSkipped(_self: *@This()) ?*CharacterSet {
        return objc.msgSend(_self, "charactersToBeSkipped", ?*CharacterSet, .{});
    }

    pub fn setCharactersToBeSkipped(_self: *@This(), _charactersToBeSkipped: ?*CharacterSet) void {
        return objc.msgSend(_self, "setCharactersToBeSkipped:", void, .{_charactersToBeSkipped});
    }

    pub fn caseSensitive(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "caseSensitive", objc.BOOL, .{});
    }

    pub fn setCaseSensitive(_self: *@This(), _caseSensitive: objc.BOOL) void {
        return objc.msgSend(_self, "setCaseSensitive:", void, .{_caseSensitive});
    }

    pub fn locale(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "locale", ?objc.Id, .{});
    }

    pub fn setLocale(_self: *@This(), _locale: ?objc.Id) void {
        return objc.msgSend(_self, "setLocale:", void, .{_locale});
    }
};

/// https://developer.apple.com/documentation/Foundation/NSException?language=objc
pub const Exception = opaque {
    pub const Internal = objc.ExternClass("NSException", @This(), objc.NSObject, &.{ Copying, SecureCoding });
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn supportsSecureCoding() objc.BOOL {
        return objc.msgSend(Internal.class(), "supportsSecureCoding", objc.BOOL, .{});
    }

    pub fn exceptionWithNameReasonUserInfo(_name: ExceptionName, _reason: ?*String, _userInfo: ?*Dictionary) ?*Exception {
        return objc.msgSend(Internal.class(), "exceptionWithName:reason:userInfo:", ?*Exception, .{ _name, _reason, _userInfo });
    }

    pub fn initWithNameReasonUserInfo(_self: *@This(), _aName: ExceptionName, _aReason: ?*String, _aUserInfo: ?*Dictionary) *@This() {
        return objc.msgSend(_self, "initWithName:reason:userInfo:", *@This(), .{ _aName, _aReason, _aUserInfo });
    }

    pub fn raise(_self: *@This()) void {
        return objc.msgSend(_self, "raise", void, .{});
    }

    pub fn name(_self: *@This()) ExceptionName {
        return objc.msgSend(_self, "name", ExceptionName, .{});
    }

    pub fn reason(_self: *@This()) ?*String {
        return objc.msgSend(_self, "reason", ?*String, .{});
    }

    pub fn userInfo(_self: *@This()) ?*Dictionary {
        return objc.msgSend(_self, "userInfo", ?*Dictionary, .{});
    }

    pub fn callStackReturnAddresses(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "callStackReturnAddresses", ?*anyopaque, .{});
    }

    pub fn callStackSymbols(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "callStackSymbols", ?*anyopaque, .{});
    }
};

pub const UncaughtExceptionHandler = fn (?*Exception) callconv(.C) void;

extern "Foundation" fn NSGetUncaughtExceptionHandler() callconv(.C) ?*UncaughtExceptionHandler;
pub const getUncaughtExceptionHandler = NSGetUncaughtExceptionHandler;

extern "Foundation" fn NSSetUncaughtExceptionHandler(?*UncaughtExceptionHandler) callconv(.C) void;
pub const setUncaughtExceptionHandler = NSSetUncaughtExceptionHandler;

/// https://developer.apple.com/documentation/Foundation/NSAssertionHandler?language=objc
pub const AssertionHandler = opaque {
    pub const Internal = objc.ExternClass("NSAssertionHandler", @This(), objc.NSObject, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn handleFailureInMethodObjectFileLineNumberDescription(
        _self: *@This(),
        _selector: objc.Selector,
        _object: ?objc.Id,
        _fileName: ?*String,
        _line: objc.NSInteger,
        _format: ?*String,
    ) void {
        return objc.msgSend(_self, "handleFailureInMethod:object:file:lineNumber:description:", void, .{
            _selector,
            _object,
            _fileName,
            _line,
            _format,
        });
    }

    pub fn handleFailureInFunctionFileLineNumberDescription(
        _self: *@This(),
        _functionName: ?*String,
        _fileName: ?*String,
        _line: objc.NSInteger,
        _format: ?*String,
    ) void {
        return objc.msgSend(_self, "handleFailureInFunction:file:lineNumber:description:", void, .{
            _functionName,
            _fileName,
            _line,
            _format,
        });
    }

    pub fn currentHandler() ?*AssertionHandler {
        return objc.msgSend(Internal.class(), "currentHandler", ?*AssertionHandler, .{});
    }
};

/// https://developer.apple.com/documentation/Foundation/NSDecimalNumberBehaviors?language=objc
pub const DecimalNumberBehaviors = opaque {
    pub const Internal = objc.ExternProtocol(@This(), &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;

    pub fn roundingMode(_self: *@This()) RoundingMode {
        return objc.msgSend(_self, "roundingMode", RoundingMode, .{});
    }

    pub fn scale(_self: *@This()) i16 {
        return objc.msgSend(_self, "scale", i16, .{});
    }

    pub fn exceptionDuringOperationErrorLeftOperandRightOperand(
        _self: *@This(),
        _operation: objc.Selector,
        _error: CalculationError,
        _leftOperand: ?*DecimalNumber,
        _rightOperand: ?*DecimalNumber,
    ) ?*DecimalNumber {
        return objc.msgSend(_self, "exceptionDuringOperation:error:leftOperand:rightOperand:", ?*DecimalNumber, .{
            _operation,
            _error,
            _leftOperand,
            _rightOperand,
        });
    }
};

/// https://developer.apple.com/documentation/Foundation/NSDecimalNumber?language=objc
pub const DecimalNumber = opaque {
    pub const Internal = objc.ExternClass("NSDecimalNumber", @This(), Number, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn supportsSecureCoding() objc.BOOL {
        return objc.msgSend(Internal.class(), "supportsSecureCoding", objc.BOOL, .{});
    }

    pub fn getValueSize(_self: *@This(), _value: ?*anyopaque, _size: objc.NSUInteger) void {
        return objc.msgSend(_self, "getValue:size:", void, .{ _value, _size });
    }

    pub fn initWithBytesObjCType(_self: *@This(), _value: ?*anyopaque, _type: ?*i8) *@This() {
        return objc.msgSend(_self, "initWithBytes:objCType:", *@This(), .{ _value, _type });
    }

    pub fn objCType(_self: *@This()) ?*i8 {
        return objc.msgSend(_self, "objCType", ?*i8, .{});
    }

    pub fn initWithChar(_self: *@This(), _value: i8) ?*Number {
        return objc.msgSend(_self, "initWithChar:", ?*Number, .{_value});
    }

    pub fn initWithUnsignedChar(_self: *@This(), _value: u8) ?*Number {
        return objc.msgSend(_self, "initWithUnsignedChar:", ?*Number, .{_value});
    }

    pub fn initWithShort(_self: *@This(), _value: i16) ?*Number {
        return objc.msgSend(_self, "initWithShort:", ?*Number, .{_value});
    }

    pub fn initWithUnsignedShort(_self: *@This(), _value: u16) ?*Number {
        return objc.msgSend(_self, "initWithUnsignedShort:", ?*Number, .{_value});
    }

    pub fn initWithInt(_self: *@This(), _value: i32) ?*Number {
        return objc.msgSend(_self, "initWithInt:", ?*Number, .{_value});
    }

    pub fn initWithUnsignedInt(_self: *@This(), _value: u32) ?*Number {
        return objc.msgSend(_self, "initWithUnsignedInt:", ?*Number, .{_value});
    }

    pub fn initWithLong(_self: *@This(), _value: i64) ?*Number {
        return objc.msgSend(_self, "initWithLong:", ?*Number, .{_value});
    }

    pub fn initWithUnsignedLong(_self: *@This(), _value: u64) ?*Number {
        return objc.msgSend(_self, "initWithUnsignedLong:", ?*Number, .{_value});
    }

    pub fn initWithLongLong(_self: *@This(), _value: i64) ?*Number {
        return objc.msgSend(_self, "initWithLongLong:", ?*Number, .{_value});
    }

    pub fn initWithUnsignedLongLong(_self: *@This(), _value: u64) ?*Number {
        return objc.msgSend(_self, "initWithUnsignedLongLong:", ?*Number, .{_value});
    }

    pub fn initWithFloat(_self: *@This(), _value: f32) ?*Number {
        return objc.msgSend(_self, "initWithFloat:", ?*Number, .{_value});
    }

    pub fn initWithDouble(_self: *@This(), _value: f64) ?*Number {
        return objc.msgSend(_self, "initWithDouble:", ?*Number, .{_value});
    }

    pub fn initWithBool(_self: *@This(), _value: objc.BOOL) ?*Number {
        return objc.msgSend(_self, "initWithBool:", ?*Number, .{_value});
    }

    pub fn initWithInteger(_self: *@This(), _value: objc.NSInteger) ?*Number {
        return objc.msgSend(_self, "initWithInteger:", ?*Number, .{_value});
    }

    pub fn initWithUnsignedInteger(_self: *@This(), _value: objc.NSUInteger) ?*Number {
        return objc.msgSend(_self, "initWithUnsignedInteger:", ?*Number, .{_value});
    }

    pub fn compare(_self: *@This(), _otherNumber: ?*Number) ComparisonResult {
        return objc.msgSend(_self, "compare:", ComparisonResult, .{_otherNumber});
    }

    pub fn isEqualToNumber(_self: *@This(), _number: ?*Number) objc.BOOL {
        return objc.msgSend(_self, "isEqualToNumber:", objc.BOOL, .{_number});
    }

    pub fn descriptionWithLocale(_self: *@This(), _locale: ?objc.Id) ?*String {
        return objc.msgSend(_self, "descriptionWithLocale:", ?*String, .{_locale});
    }

    pub fn charValue(_self: *@This()) i8 {
        return objc.msgSend(_self, "charValue", i8, .{});
    }

    pub fn unsignedCharValue(_self: *@This()) u8 {
        return objc.msgSend(_self, "unsignedCharValue", u8, .{});
    }

    pub fn shortValue(_self: *@This()) i16 {
        return objc.msgSend(_self, "shortValue", i16, .{});
    }

    pub fn unsignedShortValue(_self: *@This()) u16 {
        return objc.msgSend(_self, "unsignedShortValue", u16, .{});
    }

    pub fn intValue(_self: *@This()) i32 {
        return objc.msgSend(_self, "intValue", i32, .{});
    }

    pub fn unsignedIntValue(_self: *@This()) u32 {
        return objc.msgSend(_self, "unsignedIntValue", u32, .{});
    }

    pub fn longValue(_self: *@This()) i64 {
        return objc.msgSend(_self, "longValue", i64, .{});
    }

    pub fn unsignedLongValue(_self: *@This()) u64 {
        return objc.msgSend(_self, "unsignedLongValue", u64, .{});
    }

    pub fn longLongValue(_self: *@This()) i64 {
        return objc.msgSend(_self, "longLongValue", i64, .{});
    }

    pub fn unsignedLongLongValue(_self: *@This()) u64 {
        return objc.msgSend(_self, "unsignedLongLongValue", u64, .{});
    }

    pub fn floatValue(_self: *@This()) f32 {
        return objc.msgSend(_self, "floatValue", f32, .{});
    }

    pub fn doubleValue(_self: *@This()) f64 {
        return objc.msgSend(_self, "doubleValue", f64, .{});
    }

    pub fn boolValue(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "boolValue", objc.BOOL, .{});
    }

    pub fn integerValue(_self: *@This()) objc.NSInteger {
        return objc.msgSend(_self, "integerValue", objc.NSInteger, .{});
    }

    pub fn unsignedIntegerValue(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "unsignedIntegerValue", objc.NSUInteger, .{});
    }

    pub fn stringValue(_self: *@This()) ?*String {
        return objc.msgSend(_self, "stringValue", ?*String, .{});
    }

    pub fn initWithMantissaExponentIsNegative(_self: *@This(), _mantissa: u64, _exponent: i16, _flag: objc.BOOL) *@This() {
        return objc.msgSend(_self, "initWithMantissa:exponent:isNegative:", *@This(), .{ _mantissa, _exponent, _flag });
    }

    pub fn initWithDecimal(_self: *@This(), _dcm: Decimal) *@This() {
        return objc.msgSend(_self, "initWithDecimal:", *@This(), .{_dcm});
    }

    pub fn initWithString(_self: *@This(), _numberValue: ?*String) *@This() {
        return objc.msgSend(_self, "initWithString:", *@This(), .{_numberValue});
    }

    pub fn initWithStringLocale(_self: *@This(), _numberValue: ?*String, _locale: ?objc.Id) *@This() {
        return objc.msgSend(_self, "initWithString:locale:", *@This(), .{ _numberValue, _locale });
    }

    pub fn decimalNumberWithMantissaExponentIsNegative(_mantissa: u64, _exponent: i16, _flag: objc.BOOL) ?*DecimalNumber {
        return objc.msgSend(Internal.class(), "decimalNumberWithMantissa:exponent:isNegative:", ?*DecimalNumber, .{ _mantissa, _exponent, _flag });
    }

    pub fn decimalNumberWithDecimal(_dcm: Decimal) ?*DecimalNumber {
        return objc.msgSend(Internal.class(), "decimalNumberWithDecimal:", ?*DecimalNumber, .{_dcm});
    }

    pub fn decimalNumberWithString(_numberValue: ?*String) ?*DecimalNumber {
        return objc.msgSend(Internal.class(), "decimalNumberWithString:", ?*DecimalNumber, .{_numberValue});
    }

    pub fn decimalNumberWithStringLocale(_numberValue: ?*String, _locale: ?objc.Id) ?*DecimalNumber {
        return objc.msgSend(Internal.class(), "decimalNumberWithString:locale:", ?*DecimalNumber, .{ _numberValue, _locale });
    }

    pub fn decimalNumberByAdding(_self: *@This(), _decimalNumber: ?*DecimalNumber) ?*DecimalNumber {
        return objc.msgSend(_self, "decimalNumberByAdding:", ?*DecimalNumber, .{_decimalNumber});
    }

    pub fn decimalNumberByAddingWithBehavior(_self: *@This(), _decimalNumber: ?*DecimalNumber, _behavior: ?*anyopaque) ?*DecimalNumber {
        return objc.msgSend(_self, "decimalNumberByAdding:withBehavior:", ?*DecimalNumber, .{ _decimalNumber, _behavior });
    }

    pub fn decimalNumberBySubtracting(_self: *@This(), _decimalNumber: ?*DecimalNumber) ?*DecimalNumber {
        return objc.msgSend(_self, "decimalNumberBySubtracting:", ?*DecimalNumber, .{_decimalNumber});
    }

    pub fn decimalNumberBySubtractingWithBehavior(_self: *@This(), _decimalNumber: ?*DecimalNumber, _behavior: ?*anyopaque) ?*DecimalNumber {
        return objc.msgSend(_self, "decimalNumberBySubtracting:withBehavior:", ?*DecimalNumber, .{ _decimalNumber, _behavior });
    }

    pub fn decimalNumberByMultiplyingBy(_self: *@This(), _decimalNumber: ?*DecimalNumber) ?*DecimalNumber {
        return objc.msgSend(_self, "decimalNumberByMultiplyingBy:", ?*DecimalNumber, .{_decimalNumber});
    }

    pub fn decimalNumberByMultiplyingByWithBehavior(_self: *@This(), _decimalNumber: ?*DecimalNumber, _behavior: ?*anyopaque) ?*DecimalNumber {
        return objc.msgSend(_self, "decimalNumberByMultiplyingBy:withBehavior:", ?*DecimalNumber, .{ _decimalNumber, _behavior });
    }

    pub fn decimalNumberByDividingBy(_self: *@This(), _decimalNumber: ?*DecimalNumber) ?*DecimalNumber {
        return objc.msgSend(_self, "decimalNumberByDividingBy:", ?*DecimalNumber, .{_decimalNumber});
    }

    pub fn decimalNumberByDividingByWithBehavior(_self: *@This(), _decimalNumber: ?*DecimalNumber, _behavior: ?*anyopaque) ?*DecimalNumber {
        return objc.msgSend(_self, "decimalNumberByDividingBy:withBehavior:", ?*DecimalNumber, .{ _decimalNumber, _behavior });
    }

    pub fn decimalNumberByRaisingToPower(_self: *@This(), _power: objc.NSUInteger) ?*DecimalNumber {
        return objc.msgSend(_self, "decimalNumberByRaisingToPower:", ?*DecimalNumber, .{_power});
    }

    pub fn decimalNumberByRaisingToPowerWithBehavior(_self: *@This(), _power: objc.NSUInteger, _behavior: ?*anyopaque) ?*DecimalNumber {
        return objc.msgSend(_self, "decimalNumberByRaisingToPower:withBehavior:", ?*DecimalNumber, .{ _power, _behavior });
    }

    pub fn decimalNumberByMultiplyingByPowerOf10(_self: *@This(), _power: i16) ?*DecimalNumber {
        return objc.msgSend(_self, "decimalNumberByMultiplyingByPowerOf10:", ?*DecimalNumber, .{_power});
    }

    pub fn decimalNumberByMultiplyingByPowerOf10WithBehavior(_self: *@This(), _power: i16, _behavior: ?*anyopaque) ?*DecimalNumber {
        return objc.msgSend(_self, "decimalNumberByMultiplyingByPowerOf10:withBehavior:", ?*DecimalNumber, .{ _power, _behavior });
    }

    pub fn decimalNumberByRoundingAccordingToBehavior(_self: *@This(), _behavior: ?*anyopaque) ?*DecimalNumber {
        return objc.msgSend(_self, "decimalNumberByRoundingAccordingToBehavior:", ?*DecimalNumber, .{_behavior});
    }

    pub fn decimalValue(_self: *@This()) Decimal {
        return objc.msgSend(_self, "decimalValue", Decimal, .{});
    }

    pub fn zero() ?*DecimalNumber {
        return objc.msgSend(Internal.class(), "zero", ?*DecimalNumber, .{});
    }

    pub fn one() ?*DecimalNumber {
        return objc.msgSend(Internal.class(), "one", ?*DecimalNumber, .{});
    }

    pub fn minimumDecimalNumber() ?*DecimalNumber {
        return objc.msgSend(Internal.class(), "minimumDecimalNumber", ?*DecimalNumber, .{});
    }

    pub fn maximumDecimalNumber() ?*DecimalNumber {
        return objc.msgSend(Internal.class(), "maximumDecimalNumber", ?*DecimalNumber, .{});
    }

    pub fn notANumber() ?*DecimalNumber {
        return objc.msgSend(Internal.class(), "notANumber", ?*DecimalNumber, .{});
    }

    pub fn defaultBehavior() ?*anyopaque {
        return objc.msgSend(Internal.class(), "defaultBehavior", ?*anyopaque, .{});
    }

    pub fn setDefaultBehavior(_defaultBehavior: ?*anyopaque) void {
        return objc.msgSend(Internal.class(), "setDefaultBehavior:", void, .{_defaultBehavior});
    }
};

/// https://developer.apple.com/documentation/Foundation/NSDecimalNumberHandler?language=objc
pub const DecimalNumberHandler = opaque {
    pub const Internal = objc.ExternClass("NSDecimalNumberHandler", @This(), objc.NSObject, &.{ DecimalNumberBehaviors, Coding });
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn roundingMode(_self: *@This()) RoundingMode {
        return objc.msgSend(_self, "roundingMode", RoundingMode, .{});
    }

    pub fn scale(_self: *@This()) i16 {
        return objc.msgSend(_self, "scale", i16, .{});
    }

    pub fn exceptionDuringOperationErrorLeftOperandRightOperand(
        _self: *@This(),
        _operation: objc.Selector,
        _error: CalculationError,
        _leftOperand: ?*DecimalNumber,
        _rightOperand: ?*DecimalNumber,
    ) ?*DecimalNumber {
        return objc.msgSend(_self, "exceptionDuringOperation:error:leftOperand:rightOperand:", ?*DecimalNumber, .{
            _operation,
            _error,
            _leftOperand,
            _rightOperand,
        });
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn initWithRoundingModeScaleRaiseOnExactnessRaiseOnOverflowRaiseOnUnderflowRaiseOnDivideByZero(
        _self: *@This(),
        _roundingMode: RoundingMode,
        _scale: i16,
        _exact: objc.BOOL,
        _overflow: objc.BOOL,
        _underflow: objc.BOOL,
        _divideByZero: objc.BOOL,
    ) *@This() {
        return objc.msgSend(_self, "initWithRoundingMode:scale:raiseOnExactness:raiseOnOverflow:raiseOnUnderflow:raiseOnDivideByZero:", *@This(), .{
            _roundingMode,
            _scale,
            _exact,
            _overflow,
            _underflow,
            _divideByZero,
        });
    }

    pub fn decimalNumberHandlerWithRoundingModeScaleRaiseOnExactnessRaiseOnOverflowRaiseOnUnderflowRaiseOnDivideByZero(
        _roundingMode: RoundingMode,
        _scale: i16,
        _exact: objc.BOOL,
        _overflow: objc.BOOL,
        _underflow: objc.BOOL,
        _divideByZero: objc.BOOL,
    ) *@This() {
        return objc.msgSend(Internal.class(), "decimalNumberHandlerWithRoundingMode:scale:raiseOnExactness:raiseOnOverflow:raiseOnUnderflow:raiseOnDivideByZero:", *@This(), .{
            _roundingMode,
            _scale,
            _exact,
            _overflow,
            _underflow,
            _divideByZero,
        });
    }

    pub fn defaultDecimalNumberHandler() ?*DecimalNumberHandler {
        return objc.msgSend(Internal.class(), "defaultDecimalNumberHandler", ?*DecimalNumberHandler, .{});
    }
};

pub const ErrorDomain = ?*String;

pub const ErrorUserInfoKey = ?*String;

/// https://developer.apple.com/documentation/Foundation/NSError?language=objc
pub const Error = opaque {
    pub const Internal = objc.ExternClass("NSError", @This(), objc.NSObject, &.{ Copying, SecureCoding });
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn supportsSecureCoding() objc.BOOL {
        return objc.msgSend(Internal.class(), "supportsSecureCoding", objc.BOOL, .{});
    }

    pub fn initWithDomainCodeUserInfo(_self: *@This(), _domain: ErrorDomain, _code: objc.NSInteger, _dict: ?*anyopaque) *@This() {
        return objc.msgSend(_self, "initWithDomain:code:userInfo:", *@This(), .{ _domain, _code, _dict });
    }

    pub fn errorWithDomainCodeUserInfo(_domain: ErrorDomain, _code: objc.NSInteger, _dict: ?*anyopaque) *@This() {
        return objc.msgSend(Internal.class(), "errorWithDomain:code:userInfo:", *@This(), .{ _domain, _code, _dict });
    }

    pub fn setUserInfoValueProviderForDomainProvider(_errorDomain: ErrorDomain, _provider: *const fn (?*Error, ErrorUserInfoKey) callconv(.C) ?objc.Id) void {
        return objc.msgSend(Internal.class(), "setUserInfoValueProviderForDomain:provider:", void, .{ _errorDomain, _provider });
    }

    pub fn userInfoValueProviderForDomain(_err: ?*Error, _userInfoKey: ErrorUserInfoKey, _errorDomain: ErrorDomain) *const fn (?*Error, ErrorUserInfoKey) callconv(.C) ?objc.Id {
        return objc.msgSend(Internal.class(), "userInfoValueProviderForDomain:", *const fn (?*Error, ErrorUserInfoKey) callconv(.C) ?objc.Id, .{ _err, _userInfoKey, _errorDomain });
    }

    pub fn domain(_self: *@This()) ErrorDomain {
        return objc.msgSend(_self, "domain", ErrorDomain, .{});
    }

    pub fn code(_self: *@This()) objc.NSInteger {
        return objc.msgSend(_self, "code", objc.NSInteger, .{});
    }

    pub fn userInfo(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "userInfo", ?*anyopaque, .{});
    }

    pub fn localizedDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "localizedDescription", ?*String, .{});
    }

    pub fn localizedFailureReason(_self: *@This()) ?*String {
        return objc.msgSend(_self, "localizedFailureReason", ?*String, .{});
    }

    pub fn localizedRecoverySuggestion(_self: *@This()) ?*String {
        return objc.msgSend(_self, "localizedRecoverySuggestion", ?*String, .{});
    }

    pub fn localizedRecoveryOptions(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "localizedRecoveryOptions", ?*anyopaque, .{});
    }

    pub fn recoveryAttempter(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "recoveryAttempter", ?objc.Id, .{});
    }

    pub fn helpAnchor(_self: *@This()) ?*String {
        return objc.msgSend(_self, "helpAnchor", ?*String, .{});
    }

    pub fn underlyingErrors(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "underlyingErrors", ?*anyopaque, .{});
    }
};

/// https://developer.apple.com/documentation/Foundation/NSRunLoop?language=objc
pub const RunLoop = opaque {
    pub const Internal = objc.ExternClass("NSRunLoop", @This(), objc.NSObject, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn getCFRunLoop(_self: *@This()) core_foundation.RunLoopRef {
        return objc.msgSend(_self, "getCFRunLoop", core_foundation.RunLoopRef, .{});
    }

    pub fn addTimerForMode(_self: *@This(), _timer: ?*Timer, _mode: RunLoopMode) void {
        return objc.msgSend(_self, "addTimer:forMode:", void, .{ _timer, _mode });
    }

    pub fn addPortForMode(_self: *@This(), _aPort: ?*Port, _mode: RunLoopMode) void {
        return objc.msgSend(_self, "addPort:forMode:", void, .{ _aPort, _mode });
    }

    pub fn removePortForMode(_self: *@This(), _aPort: ?*Port, _mode: RunLoopMode) void {
        return objc.msgSend(_self, "removePort:forMode:", void, .{ _aPort, _mode });
    }

    pub fn limitDateForMode(_self: *@This(), _mode: RunLoopMode) ?*Date {
        return objc.msgSend(_self, "limitDateForMode:", ?*Date, .{_mode});
    }

    pub fn acceptInputForModeBeforeDate(_self: *@This(), _mode: RunLoopMode, _limitDate: ?*Date) void {
        return objc.msgSend(_self, "acceptInputForMode:beforeDate:", void, .{ _mode, _limitDate });
    }

    pub fn currentRunLoop() ?*RunLoop {
        return objc.msgSend(Internal.class(), "currentRunLoop", ?*RunLoop, .{});
    }

    pub fn mainRunLoop() ?*RunLoop {
        return objc.msgSend(Internal.class(), "mainRunLoop", ?*RunLoop, .{});
    }

    pub fn currentMode(_self: *@This()) RunLoopMode {
        return objc.msgSend(_self, "currentMode", RunLoopMode, .{});
    }
};

/// https://developer.apple.com/documentation/Foundation/NSFileHandle?language=objc
pub const FileHandle = opaque {
    pub const Internal = objc.ExternClass("NSFileHandle", @This(), objc.NSObject, &.{SecureCoding});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn supportsSecureCoding() objc.BOOL {
        return objc.msgSend(Internal.class(), "supportsSecureCoding", objc.BOOL, .{});
    }

    pub fn initWithFileDescriptorCloseOnDealloc(_self: *@This(), _fd: i32, _closeopt: objc.BOOL) *@This() {
        return objc.msgSend(_self, "initWithFileDescriptor:closeOnDealloc:", *@This(), .{ _fd, _closeopt });
    }

    pub fn readDataToEndOfFileAndReturnError(_self: *@This(), _error: ?*?*Error) ?*Data {
        return objc.msgSend(_self, "readDataToEndOfFileAndReturnError:", ?*Data, .{_error});
    }

    pub fn readDataUpToLengthError(_self: *@This(), _length: objc.NSUInteger, _error: ?*?*Error) ?*Data {
        return objc.msgSend(_self, "readDataUpToLength:error:", ?*Data, .{ _length, _error });
    }

    pub fn writeDataError(_self: *@This(), _data: ?*Data, _error: ?*?*Error) objc.BOOL {
        return objc.msgSend(_self, "writeData:error:", objc.BOOL, .{ _data, _error });
    }

    pub fn getOffsetError(_self: *@This(), _offsetInFile: ?*u64, _error: ?*?*Error) objc.BOOL {
        return objc.msgSend(_self, "getOffset:error:", objc.BOOL, .{ _offsetInFile, _error });
    }

    pub fn seekToEndReturningOffsetError(_self: *@This(), _offsetInFile: ?*u64, _error: ?*?*Error) objc.BOOL {
        return objc.msgSend(_self, "seekToEndReturningOffset:error:", objc.BOOL, .{ _offsetInFile, _error });
    }

    pub fn seekToOffsetError(_self: *@This(), _offset: u64, _error: ?*?*Error) objc.BOOL {
        return objc.msgSend(_self, "seekToOffset:error:", objc.BOOL, .{ _offset, _error });
    }

    pub fn truncateAtOffsetError(_self: *@This(), _offset: u64, _error: ?*?*Error) objc.BOOL {
        return objc.msgSend(_self, "truncateAtOffset:error:", objc.BOOL, .{ _offset, _error });
    }

    pub fn synchronizeAndReturnError(_self: *@This(), _error: ?*?*Error) objc.BOOL {
        return objc.msgSend(_self, "synchronizeAndReturnError:", objc.BOOL, .{_error});
    }

    pub fn closeAndReturnError(_self: *@This(), _error: ?*?*Error) objc.BOOL {
        return objc.msgSend(_self, "closeAndReturnError:", objc.BOOL, .{_error});
    }

    pub fn availableData(_self: *@This()) ?*Data {
        return objc.msgSend(_self, "availableData", ?*Data, .{});
    }
};

/// https://developer.apple.com/documentation/Foundation/NSPipe?language=objc
pub const Pipe = opaque {
    pub const Internal = objc.ExternClass("NSPipe", @This(), objc.NSObject, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn pipe() ?*Pipe {
        return objc.msgSend(Internal.class(), "pipe", ?*Pipe, .{});
    }

    pub fn fileHandleForReading(_self: *@This()) ?*FileHandle {
        return objc.msgSend(_self, "fileHandleForReading", ?*FileHandle, .{});
    }

    pub fn fileHandleForWriting(_self: *@This()) ?*FileHandle {
        return objc.msgSend(_self, "fileHandleForWriting", ?*FileHandle, .{});
    }
};

extern "Foundation" fn NSUserName() callconv(.C) ?*String;
pub const userName = NSUserName;

extern "Foundation" fn NSFullUserName() callconv(.C) ?*String;
pub const fullUserName = NSFullUserName;

extern "Foundation" fn NSHomeDirectory() callconv(.C) ?*String;
pub const homeDirectory = NSHomeDirectory;

extern "Foundation" fn NSHomeDirectoryForUser(userName: ?*String) callconv(.C) ?*String;
pub const homeDirectoryForUser = NSHomeDirectoryForUser;

extern "Foundation" fn NSTemporaryDirectory() callconv(.C) ?*String;
pub const temporaryDirectory = NSTemporaryDirectory;

extern "Foundation" fn NSOpenStepRootDirectory() callconv(.C) ?*String;
pub const openStepRootDirectory = NSOpenStepRootDirectory;

pub const SearchPathDirectory = objc.NSUInteger;
pub const SearchPathDirectory_ApplicationDirectory: objc.NSUInteger = 1;
pub const SearchPathDirectory_DemoApplicationDirectory: objc.NSUInteger = 2;
pub const SearchPathDirectory_DeveloperApplicationDirectory: objc.NSUInteger = 3;
pub const SearchPathDirectory_AdminApplicationDirectory: objc.NSUInteger = 4;
pub const SearchPathDirectory_LibraryDirectory: objc.NSUInteger = 5;
pub const SearchPathDirectory_DeveloperDirectory: objc.NSUInteger = 6;
pub const SearchPathDirectory_UserDirectory: objc.NSUInteger = 7;
pub const SearchPathDirectory_DocumentationDirectory: objc.NSUInteger = 8;
pub const SearchPathDirectory_DocumentDirectory: objc.NSUInteger = 9;
pub const SearchPathDirectory_CoreServiceDirectory: objc.NSUInteger = 10;
pub const SearchPathDirectory_AutosavedInformationDirectory: objc.NSUInteger = 11;
pub const SearchPathDirectory_DesktopDirectory: objc.NSUInteger = 12;
pub const SearchPathDirectory_CachesDirectory: objc.NSUInteger = 13;
pub const SearchPathDirectory_ApplicationSupportDirectory: objc.NSUInteger = 14;
pub const SearchPathDirectory_DownloadsDirectory: objc.NSUInteger = 15;
pub const SearchPathDirectory_InputMethodsDirectory: objc.NSUInteger = 16;
pub const SearchPathDirectory_MoviesDirectory: objc.NSUInteger = 17;
pub const SearchPathDirectory_MusicDirectory: objc.NSUInteger = 18;
pub const SearchPathDirectory_PicturesDirectory: objc.NSUInteger = 19;
pub const SearchPathDirectory_PrinterDescriptionDirectory: objc.NSUInteger = 20;
pub const SearchPathDirectory_SharedPublicDirectory: objc.NSUInteger = 21;
pub const SearchPathDirectory_PreferencePanesDirectory: objc.NSUInteger = 22;
pub const SearchPathDirectory_ApplicationScriptsDirectory: objc.NSUInteger = 23;
pub const SearchPathDirectory_ItemReplacementDirectory: objc.NSUInteger = 99;
pub const SearchPathDirectory_AllApplicationsDirectory: objc.NSUInteger = 100;
pub const SearchPathDirectory_AllLibrariesDirectory: objc.NSUInteger = 101;
pub const SearchPathDirectory_TrashDirectory: objc.NSUInteger = 102;

pub const SearchPathDomainMask = objc.NSUInteger;
pub const SearchPathDomainMask_UserDomainMask: objc.NSUInteger = 1;
pub const SearchPathDomainMask_LocalDomainMask: objc.NSUInteger = 2;
pub const SearchPathDomainMask_NetworkDomainMask: objc.NSUInteger = 4;
pub const SearchPathDomainMask_SystemDomainMask: objc.NSUInteger = 8;
pub const SearchPathDomainMask_AllDomainsMask: objc.NSUInteger = 65535;

extern "Foundation" fn NSSearchPathForDirectoriesInDomains(directory: SearchPathDirectory, domainMask: SearchPathDomainMask, expandTilde: objc.BOOL) callconv(.C) ?*anyopaque;
pub const searchPathForDirectoriesInDomains = NSSearchPathForDirectoriesInDomains;

pub const URLHandleStatus = objc.NSUInteger;
pub const URLHandleStatus_NotLoaded: objc.NSUInteger = 0;
pub const URLHandleStatus_LoadSucceeded: objc.NSUInteger = 1;
pub const URLHandleStatus_LoadInProgress: objc.NSUInteger = 2;
pub const URLHandleStatus_LoadFailed: objc.NSUInteger = 3;

/// https://developer.apple.com/documentation/Foundation/NSURLHandleClient?language=objc
pub const URLHandleClient = opaque {
    pub const Internal = objc.ExternProtocol(@This(), &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;

    pub fn urlHandleResourceDataDidBecomeAvailable(_self: *@This(), _sender: ?*URLHandle, _newBytes: ?*Data) void {
        return objc.msgSend(_self, "URLHandle:resourceDataDidBecomeAvailable:", void, .{ _sender, _newBytes });
    }

    pub fn urlHandleResourceDidBeginLoading(_self: *@This(), _sender: ?*URLHandle) void {
        return objc.msgSend(_self, "URLHandleResourceDidBeginLoading:", void, .{_sender});
    }

    pub fn urlHandleResourceDidFinishLoading(_self: *@This(), _sender: ?*URLHandle) void {
        return objc.msgSend(_self, "URLHandleResourceDidFinishLoading:", void, .{_sender});
    }

    pub fn urlHandleResourceDidCancelLoading(_self: *@This(), _sender: ?*URLHandle) void {
        return objc.msgSend(_self, "URLHandleResourceDidCancelLoading:", void, .{_sender});
    }

    pub fn urlHandleResourceDidFailLoadingWithReason(_self: *@This(), _sender: ?*URLHandle, _reason: ?*String) void {
        return objc.msgSend(_self, "URLHandle:resourceDidFailLoadingWithReason:", void, .{ _sender, _reason });
    }
};

/// https://developer.apple.com/documentation/Foundation/NSURLHandle?language=objc
pub const URLHandle = opaque {
    pub const Internal = objc.ExternClass("NSURLHandle", @This(), objc.NSObject, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn registerURLHandleClass(_anURLHandleSubclass: objc.Class) void {
        return objc.msgSend(Internal.class(), "registerURLHandleClass:", void, .{_anURLHandleSubclass});
    }

    pub fn urlHandleClassForURL(_anURL: ?*URL) objc.Class {
        return objc.msgSend(Internal.class(), "URLHandleClassForURL:", objc.Class, .{_anURL});
    }

    pub fn status(_self: *@This()) URLHandleStatus {
        return objc.msgSend(_self, "status", URLHandleStatus, .{});
    }

    pub fn failureReason(_self: *@This()) ?*String {
        return objc.msgSend(_self, "failureReason", ?*String, .{});
    }

    pub fn addClient(_self: *@This(), _client: ?*anyopaque) void {
        return objc.msgSend(_self, "addClient:", void, .{_client});
    }

    pub fn removeClient(_self: *@This(), _client: ?*anyopaque) void {
        return objc.msgSend(_self, "removeClient:", void, .{_client});
    }

    pub fn loadInBackground(_self: *@This()) void {
        return objc.msgSend(_self, "loadInBackground", void, .{});
    }

    pub fn cancelLoadInBackground(_self: *@This()) void {
        return objc.msgSend(_self, "cancelLoadInBackground", void, .{});
    }

    pub fn resourceData(_self: *@This()) ?*Data {
        return objc.msgSend(_self, "resourceData", ?*Data, .{});
    }

    pub fn availableResourceData(_self: *@This()) ?*Data {
        return objc.msgSend(_self, "availableResourceData", ?*Data, .{});
    }

    pub fn expectedResourceDataSize(_self: *@This()) i64 {
        return objc.msgSend(_self, "expectedResourceDataSize", i64, .{});
    }

    pub fn flushCachedData(_self: *@This()) void {
        return objc.msgSend(_self, "flushCachedData", void, .{});
    }

    pub fn backgroundLoadDidFailWithReason(_self: *@This(), _reason: ?*String) void {
        return objc.msgSend(_self, "backgroundLoadDidFailWithReason:", void, .{_reason});
    }

    pub fn didLoadBytesLoadComplete(_self: *@This(), _newBytes: ?*Data, _yorn: objc.BOOL) void {
        return objc.msgSend(_self, "didLoadBytes:loadComplete:", void, .{ _newBytes, _yorn });
    }

    pub fn canInitWithURL(_anURL: ?*URL) objc.BOOL {
        return objc.msgSend(Internal.class(), "canInitWithURL:", objc.BOOL, .{_anURL});
    }

    pub fn cachedHandleForURL(_anURL: ?*URL) ?*URLHandle {
        return objc.msgSend(Internal.class(), "cachedHandleForURL:", ?*URLHandle, .{_anURL});
    }

    pub fn initWithURLCached(_self: *@This(), _anURL: ?*URL, _willCache: objc.BOOL) ?objc.Id {
        return objc.msgSend(_self, "initWithURL:cached:", ?objc.Id, .{ _anURL, _willCache });
    }

    pub fn propertyForKey(_self: *@This(), _propertyKey: ?*String) ?objc.Id {
        return objc.msgSend(_self, "propertyForKey:", ?objc.Id, .{_propertyKey});
    }

    pub fn propertyForKeyIfAvailable(_self: *@This(), _propertyKey: ?*String) ?objc.Id {
        return objc.msgSend(_self, "propertyForKeyIfAvailable:", ?objc.Id, .{_propertyKey});
    }

    pub fn writePropertyForKey(_self: *@This(), _propertyValue: ?objc.Id, _propertyKey: ?*String) objc.BOOL {
        return objc.msgSend(_self, "writeProperty:forKey:", objc.BOOL, .{ _propertyValue, _propertyKey });
    }

    pub fn writeData(_self: *@This(), _data: ?*Data) objc.BOOL {
        return objc.msgSend(_self, "writeData:", objc.BOOL, .{_data});
    }

    pub fn loadInForeground(_self: *@This()) ?*Data {
        return objc.msgSend(_self, "loadInForeground", ?*Data, .{});
    }

    pub fn beginLoadInBackground(_self: *@This()) void {
        return objc.msgSend(_self, "beginLoadInBackground", void, .{});
    }

    pub fn endLoadInBackground(_self: *@This()) void {
        return objc.msgSend(_self, "endLoadInBackground", void, .{});
    }
};

pub const URLResourceKey = ?*String;

/// https://developer.apple.com/documentation/Foundation/NSURL?language=objc
pub const URL = opaque {
    pub const FileResourceType = ?*String;

    pub const ThumbnailDictionaryItem = ?*String;

    pub const FileProtectionType = ?*String;

    pub const UbiquitousItemDownloadingStatus = ?*String;

    pub const UbiquitousSharedItemRole = ?*String;

    pub const UbiquitousSharedItemPermissions = ?*String;

    pub const BookmarkCreationOptions = URL.BookmarkCreationOptions;

    pub const BookmarkResolutionOptions = URL.BookmarkResolutionOptions;

    pub const BookmarkFileCreationOptions = objc.NSUInteger;

    pub const Internal = objc.ExternClass("NSURL", @This(), objc.NSObject, &.{ SecureCoding, Copying });
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn supportsSecureCoding() objc.BOOL {
        return objc.msgSend(Internal.class(), "supportsSecureCoding", objc.BOOL, .{});
    }

    pub fn initWithSchemeHostPath(_self: *@This(), _scheme: ?*String, _host: ?*String, _path: ?*String) *@This() {
        return objc.msgSend(_self, "initWithScheme:host:path:", *@This(), .{ _scheme, _host, _path });
    }

    pub fn initFileURLWithPathIsDirectoryRelativeToURL(_self: *@This(), _path: ?*String, _isDir: objc.BOOL, _baseURL: ?*URL) *@This() {
        return objc.msgSend(_self, "initFileURLWithPath:isDirectory:relativeToURL:", *@This(), .{ _path, _isDir, _baseURL });
    }

    pub fn initFileURLWithPathRelativeToURL(_self: *@This(), _path: ?*String, _baseURL: ?*URL) *@This() {
        return objc.msgSend(_self, "initFileURLWithPath:relativeToURL:", *@This(), .{ _path, _baseURL });
    }

    pub fn initFileURLWithPathIsDirectory(_self: *@This(), _path: ?*String, _isDir: objc.BOOL) *@This() {
        return objc.msgSend(_self, "initFileURLWithPath:isDirectory:", *@This(), .{ _path, _isDir });
    }

    pub fn initFileURLWithPath(_self: *@This(), _path: ?*String) *@This() {
        return objc.msgSend(_self, "initFileURLWithPath:", *@This(), .{_path});
    }

    pub fn fileURLWithPathIsDirectoryRelativeToURL(_path: ?*String, _isDir: objc.BOOL, _baseURL: ?*URL) ?*URL {
        return objc.msgSend(Internal.class(), "fileURLWithPath:isDirectory:relativeToURL:", ?*URL, .{ _path, _isDir, _baseURL });
    }

    pub fn fileURLWithPathRelativeToURL(_path: ?*String, _baseURL: ?*URL) ?*URL {
        return objc.msgSend(Internal.class(), "fileURLWithPath:relativeToURL:", ?*URL, .{ _path, _baseURL });
    }

    pub fn fileURLWithPathIsDirectory(_path: ?*String, _isDir: objc.BOOL) ?*URL {
        return objc.msgSend(Internal.class(), "fileURLWithPath:isDirectory:", ?*URL, .{ _path, _isDir });
    }

    pub fn fileURLWithPath(_path: ?*String) ?*URL {
        return objc.msgSend(Internal.class(), "fileURLWithPath:", ?*URL, .{_path});
    }

    pub fn initFileURLWithFileSystemRepresentationIsDirectoryRelativeToURL(_self: *@This(), _path: ?*i8, _isDir: objc.BOOL, _baseURL: ?*URL) *@This() {
        return objc.msgSend(_self, "initFileURLWithFileSystemRepresentation:isDirectory:relativeToURL:", *@This(), .{ _path, _isDir, _baseURL });
    }

    pub fn fileURLWithFileSystemRepresentationIsDirectoryRelativeToURL(_path: ?*i8, _isDir: objc.BOOL, _baseURL: ?*URL) ?*URL {
        return objc.msgSend(Internal.class(), "fileURLWithFileSystemRepresentation:isDirectory:relativeToURL:", ?*URL, .{ _path, _isDir, _baseURL });
    }

    pub fn initWithString(_self: *@This(), _URLString: ?*String) *@This() {
        return objc.msgSend(_self, "initWithString:", *@This(), .{_URLString});
    }

    pub fn initWithStringRelativeToURL(_self: *@This(), _URLString: ?*String, _baseURL: ?*URL) *@This() {
        return objc.msgSend(_self, "initWithString:relativeToURL:", *@This(), .{ _URLString, _baseURL });
    }

    pub fn urlWithString(_URLString: ?*String) *@This() {
        return objc.msgSend(Internal.class(), "URLWithString:", *@This(), .{_URLString});
    }

    pub fn urlWithStringRelativeToURL(_URLString: ?*String, _baseURL: ?*URL) *@This() {
        return objc.msgSend(Internal.class(), "URLWithString:relativeToURL:", *@This(), .{ _URLString, _baseURL });
    }

    pub fn initWithStringEncodingInvalidCharacters(_self: *@This(), _URLString: ?*String, _encodingInvalidCharacters: objc.BOOL) *@This() {
        return objc.msgSend(_self, "initWithString:encodingInvalidCharacters:", *@This(), .{ _URLString, _encodingInvalidCharacters });
    }

    pub fn urlWithStringEncodingInvalidCharacters(_URLString: ?*String, _encodingInvalidCharacters: objc.BOOL) *@This() {
        return objc.msgSend(Internal.class(), "URLWithString:encodingInvalidCharacters:", *@This(), .{ _URLString, _encodingInvalidCharacters });
    }

    pub fn initWithDataRepresentationRelativeToURL(_self: *@This(), _data: ?*Data, _baseURL: ?*URL) *@This() {
        return objc.msgSend(_self, "initWithDataRepresentation:relativeToURL:", *@This(), .{ _data, _baseURL });
    }

    pub fn urlWithDataRepresentationRelativeToURL(_data: ?*Data, _baseURL: ?*URL) ?*URL {
        return objc.msgSend(Internal.class(), "URLWithDataRepresentation:relativeToURL:", ?*URL, .{ _data, _baseURL });
    }

    pub fn initAbsoluteURLWithDataRepresentationRelativeToURL(_self: *@This(), _data: ?*Data, _baseURL: ?*URL) *@This() {
        return objc.msgSend(_self, "initAbsoluteURLWithDataRepresentation:relativeToURL:", *@This(), .{ _data, _baseURL });
    }

    pub fn absoluteURLWithDataRepresentationRelativeToURL(_data: ?*Data, _baseURL: ?*URL) ?*URL {
        return objc.msgSend(Internal.class(), "absoluteURLWithDataRepresentation:relativeToURL:", ?*URL, .{ _data, _baseURL });
    }

    pub fn dataRepresentation(_self: *@This()) ?*Data {
        return objc.msgSend(_self, "dataRepresentation", ?*Data, .{});
    }

    pub fn absoluteString(_self: *@This()) ?*String {
        return objc.msgSend(_self, "absoluteString", ?*String, .{});
    }

    pub fn relativeString(_self: *@This()) ?*String {
        return objc.msgSend(_self, "relativeString", ?*String, .{});
    }

    pub fn baseURL(_self: *@This()) ?*URL {
        return objc.msgSend(_self, "baseURL", ?*URL, .{});
    }

    pub fn absoluteURL(_self: *@This()) ?*URL {
        return objc.msgSend(_self, "absoluteURL", ?*URL, .{});
    }

    pub fn scheme(_self: *@This()) ?*String {
        return objc.msgSend(_self, "scheme", ?*String, .{});
    }

    pub fn resourceSpecifier(_self: *@This()) ?*String {
        return objc.msgSend(_self, "resourceSpecifier", ?*String, .{});
    }

    pub fn host(_self: *@This()) ?*String {
        return objc.msgSend(_self, "host", ?*String, .{});
    }

    pub fn port(_self: *@This()) ?*Number {
        return objc.msgSend(_self, "port", ?*Number, .{});
    }

    pub fn user(_self: *@This()) ?*String {
        return objc.msgSend(_self, "user", ?*String, .{});
    }

    pub fn password(_self: *@This()) ?*String {
        return objc.msgSend(_self, "password", ?*String, .{});
    }

    pub fn path(_self: *@This()) ?*String {
        return objc.msgSend(_self, "path", ?*String, .{});
    }

    pub fn fragment(_self: *@This()) ?*String {
        return objc.msgSend(_self, "fragment", ?*String, .{});
    }

    pub fn parameterString(_self: *@This()) ?*String {
        return objc.msgSend(_self, "parameterString", ?*String, .{});
    }

    pub fn query(_self: *@This()) ?*String {
        return objc.msgSend(_self, "query", ?*String, .{});
    }

    pub fn relativePath(_self: *@This()) ?*String {
        return objc.msgSend(_self, "relativePath", ?*String, .{});
    }

    pub fn hasDirectoryPath(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "hasDirectoryPath", objc.BOOL, .{});
    }

    pub fn getFileSystemRepresentationMaxLength(_self: *@This(), _buffer: ?*i8, _maxBufferLength: objc.NSUInteger) objc.BOOL {
        return objc.msgSend(_self, "getFileSystemRepresentation:maxLength:", objc.BOOL, .{ _buffer, _maxBufferLength });
    }

    pub fn fileSystemRepresentation(_self: *@This()) ?*i8 {
        return objc.msgSend(_self, "fileSystemRepresentation", ?*i8, .{});
    }

    pub fn isFileURL(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isFileURL", objc.BOOL, .{});
    }

    pub fn standardizedURL(_self: *@This()) ?*URL {
        return objc.msgSend(_self, "standardizedURL", ?*URL, .{});
    }

    pub fn isFileReferenceURL(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isFileReferenceURL", objc.BOOL, .{});
    }

    pub fn fileReferenceURL(_self: *@This()) ?*URL {
        return objc.msgSend(_self, "fileReferenceURL", ?*URL, .{});
    }

    pub fn filePathURL(_self: *@This()) ?*URL {
        return objc.msgSend(_self, "filePathURL", ?*URL, .{});
    }

    pub fn getResourceValueForKeyError(_self: *@This(), _value: ?*?objc.Id, _key: URLResourceKey, _error: ?*?*Error) objc.BOOL {
        return objc.msgSend(_self, "getResourceValue:forKey:error:", objc.BOOL, .{ _value, _key, _error });
    }

    pub fn resourceValuesForKeysError(_self: *@This(), _keys: ?*anyopaque, _error: ?*?*Error) ?*anyopaque {
        return objc.msgSend(_self, "resourceValuesForKeys:error:", ?*anyopaque, .{ _keys, _error });
    }

    pub fn setResourceValueForKeyError(_self: *@This(), _value: ?objc.Id, _key: URLResourceKey, _error: ?*?*Error) objc.BOOL {
        return objc.msgSend(_self, "setResourceValue:forKey:error:", objc.BOOL, .{ _value, _key, _error });
    }

    pub fn setResourceValuesError(_self: *@This(), _keyedValues: ?*anyopaque, _error: ?*?*Error) objc.BOOL {
        return objc.msgSend(_self, "setResourceValues:error:", objc.BOOL, .{ _keyedValues, _error });
    }

    pub fn removeCachedResourceValueForKey(_self: *@This(), _key: URLResourceKey) void {
        return objc.msgSend(_self, "removeCachedResourceValueForKey:", void, .{_key});
    }

    pub fn removeAllCachedResourceValues(_self: *@This()) void {
        return objc.msgSend(_self, "removeAllCachedResourceValues", void, .{});
    }

    pub fn setTemporaryResourceValueForKey(_self: *@This(), _value: ?objc.Id, _key: URLResourceKey) void {
        return objc.msgSend(_self, "setTemporaryResourceValue:forKey:", void, .{ _value, _key });
    }

    pub fn bookmarkDataWithOptionsIncludingResourceValuesForKeysRelativeToURLError(
        _self: *@This(),
        _options: URL.BookmarkCreationOptions,
        _keys: ?*anyopaque,
        _relativeURL: ?*URL,
        _error: ?*?*Error,
    ) ?*Data {
        return objc.msgSend(_self, "bookmarkDataWithOptions:includingResourceValuesForKeys:relativeToURL:error:", ?*Data, .{
            _options,
            _keys,
            _relativeURL,
            _error,
        });
    }

    pub fn initByResolvingBookmarkDataOptionsRelativeToURLBookmarkDataIsStaleError(
        _self: *@This(),
        _bookmarkData: ?*Data,
        _options: URL.BookmarkResolutionOptions,
        _relativeURL: ?*URL,
        _isStale: ?*objc.BOOL,
        _error: ?*?*Error,
    ) *@This() {
        return objc.msgSend(_self, "initByResolvingBookmarkData:options:relativeToURL:bookmarkDataIsStale:error:", *@This(), .{
            _bookmarkData,
            _options,
            _relativeURL,
            _isStale,
            _error,
        });
    }

    pub fn urlByResolvingBookmarkDataOptionsRelativeToURLBookmarkDataIsStaleError(
        _bookmarkData: ?*Data,
        _options: URL.BookmarkResolutionOptions,
        _relativeURL: ?*URL,
        _isStale: ?*objc.BOOL,
        _error: ?*?*Error,
    ) *@This() {
        return objc.msgSend(Internal.class(), "URLByResolvingBookmarkData:options:relativeToURL:bookmarkDataIsStale:error:", *@This(), .{
            _bookmarkData,
            _options,
            _relativeURL,
            _isStale,
            _error,
        });
    }

    pub fn resourceValuesForKeysFromBookmarkData(_keys: ?*anyopaque, _bookmarkData: ?*Data) ?*anyopaque {
        return objc.msgSend(Internal.class(), "resourceValuesForKeys:fromBookmarkData:", ?*anyopaque, .{ _keys, _bookmarkData });
    }

    pub fn writeBookmarkDataToURLOptionsError(
        _bookmarkData: ?*Data,
        _bookmarkFileURL: ?*URL,
        _options: URL.BookmarkFileCreationOptions,
        _error: ?*?*Error,
    ) objc.BOOL {
        return objc.msgSend(Internal.class(), "writeBookmarkData:toURL:options:error:", objc.BOOL, .{
            _bookmarkData,
            _bookmarkFileURL,
            _options,
            _error,
        });
    }

    pub fn bookmarkDataWithContentsOfURLError(_bookmarkFileURL: ?*URL, _error: ?*?*Error) ?*Data {
        return objc.msgSend(Internal.class(), "bookmarkDataWithContentsOfURL:error:", ?*Data, .{ _bookmarkFileURL, _error });
    }

    pub fn urlByResolvingAliasFileAtURLOptionsError(_url: ?*URL, _options: URL.BookmarkResolutionOptions, _error: ?*?*Error) *@This() {
        return objc.msgSend(Internal.class(), "URLByResolvingAliasFileAtURL:options:error:", *@This(), .{ _url, _options, _error });
    }

    pub fn startAccessingSecurityScopedResource(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "startAccessingSecurityScopedResource", objc.BOOL, .{});
    }

    pub fn stopAccessingSecurityScopedResource(_self: *@This()) void {
        return objc.msgSend(_self, "stopAccessingSecurityScopedResource", void, .{});
    }
};

/// https://developer.apple.com/documentation/Foundation/NSURLQueryItem?language=objc
pub const URLQueryItem = opaque {
    pub const Internal = objc.ExternClass("NSURLQueryItem", @This(), objc.NSObject, &.{ SecureCoding, Copying });
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn supportsSecureCoding() objc.BOOL {
        return objc.msgSend(Internal.class(), "supportsSecureCoding", objc.BOOL, .{});
    }

    pub fn initWithNameValue(_self: *@This(), _name: ?*String, _value: ?*String) *@This() {
        return objc.msgSend(_self, "initWithName:value:", *@This(), .{ _name, _value });
    }

    pub fn queryItemWithNameValue(_name: ?*String, _value: ?*String) *@This() {
        return objc.msgSend(Internal.class(), "queryItemWithName:value:", *@This(), .{ _name, _value });
    }

    pub fn name(_self: *@This()) ?*String {
        return objc.msgSend(_self, "name", ?*String, .{});
    }

    pub fn value(_self: *@This()) ?*String {
        return objc.msgSend(_self, "value", ?*String, .{});
    }
};

/// https://developer.apple.com/documentation/Foundation/NSURLComponents?language=objc
pub const URLComponents = opaque {
    pub const Internal = objc.ExternClass("NSURLComponents", @This(), objc.NSObject, &.{Copying});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn initWithURLResolvingAgainstBaseURL(_self: *@This(), _url: ?*URL, _resolve: objc.BOOL) *@This() {
        return objc.msgSend(_self, "initWithURL:resolvingAgainstBaseURL:", *@This(), .{ _url, _resolve });
    }

    pub fn componentsWithURLResolvingAgainstBaseURL(_url: ?*URL, _resolve: objc.BOOL) *@This() {
        return objc.msgSend(Internal.class(), "componentsWithURL:resolvingAgainstBaseURL:", *@This(), .{ _url, _resolve });
    }

    pub fn initWithString(_self: *@This(), _URLString: ?*String) *@This() {
        return objc.msgSend(_self, "initWithString:", *@This(), .{_URLString});
    }

    pub fn componentsWithString(_URLString: ?*String) *@This() {
        return objc.msgSend(Internal.class(), "componentsWithString:", *@This(), .{_URLString});
    }

    pub fn initWithStringEncodingInvalidCharacters(_self: *@This(), _URLString: ?*String, _encodingInvalidCharacters: objc.BOOL) *@This() {
        return objc.msgSend(_self, "initWithString:encodingInvalidCharacters:", *@This(), .{ _URLString, _encodingInvalidCharacters });
    }

    pub fn componentsWithStringEncodingInvalidCharacters(_URLString: ?*String, _encodingInvalidCharacters: objc.BOOL) *@This() {
        return objc.msgSend(Internal.class(), "componentsWithString:encodingInvalidCharacters:", *@This(), .{ _URLString, _encodingInvalidCharacters });
    }

    pub fn urlRelativeToURL(_self: *@This(), _baseURL: ?*URL) ?*URL {
        return objc.msgSend(_self, "URLRelativeToURL:", ?*URL, .{_baseURL});
    }

    pub fn url(_self: *@This()) ?*URL {
        return objc.msgSend(_self, "URL", ?*URL, .{});
    }

    pub fn string(_self: *@This()) ?*String {
        return objc.msgSend(_self, "string", ?*String, .{});
    }

    pub fn scheme(_self: *@This()) ?*String {
        return objc.msgSend(_self, "scheme", ?*String, .{});
    }

    pub fn setScheme(_self: *@This(), _scheme: ?*String) void {
        return objc.msgSend(_self, "setScheme:", void, .{_scheme});
    }

    pub fn user(_self: *@This()) ?*String {
        return objc.msgSend(_self, "user", ?*String, .{});
    }

    pub fn setUser(_self: *@This(), _user: ?*String) void {
        return objc.msgSend(_self, "setUser:", void, .{_user});
    }

    pub fn password(_self: *@This()) ?*String {
        return objc.msgSend(_self, "password", ?*String, .{});
    }

    pub fn setPassword(_self: *@This(), _password: ?*String) void {
        return objc.msgSend(_self, "setPassword:", void, .{_password});
    }

    pub fn host(_self: *@This()) ?*String {
        return objc.msgSend(_self, "host", ?*String, .{});
    }

    pub fn setHost(_self: *@This(), _host: ?*String) void {
        return objc.msgSend(_self, "setHost:", void, .{_host});
    }

    pub fn port(_self: *@This()) ?*Number {
        return objc.msgSend(_self, "port", ?*Number, .{});
    }

    pub fn setPort(_self: *@This(), _port: ?*Number) void {
        return objc.msgSend(_self, "setPort:", void, .{_port});
    }

    pub fn path(_self: *@This()) ?*String {
        return objc.msgSend(_self, "path", ?*String, .{});
    }

    pub fn setPath(_self: *@This(), _path: ?*String) void {
        return objc.msgSend(_self, "setPath:", void, .{_path});
    }

    pub fn query(_self: *@This()) ?*String {
        return objc.msgSend(_self, "query", ?*String, .{});
    }

    pub fn setQuery(_self: *@This(), _query: ?*String) void {
        return objc.msgSend(_self, "setQuery:", void, .{_query});
    }

    pub fn fragment(_self: *@This()) ?*String {
        return objc.msgSend(_self, "fragment", ?*String, .{});
    }

    pub fn setFragment(_self: *@This(), _fragment: ?*String) void {
        return objc.msgSend(_self, "setFragment:", void, .{_fragment});
    }

    pub fn percentEncodedUser(_self: *@This()) ?*String {
        return objc.msgSend(_self, "percentEncodedUser", ?*String, .{});
    }

    pub fn setPercentEncodedUser(_self: *@This(), _percentEncodedUser: ?*String) void {
        return objc.msgSend(_self, "setPercentEncodedUser:", void, .{_percentEncodedUser});
    }

    pub fn percentEncodedPassword(_self: *@This()) ?*String {
        return objc.msgSend(_self, "percentEncodedPassword", ?*String, .{});
    }

    pub fn setPercentEncodedPassword(_self: *@This(), _percentEncodedPassword: ?*String) void {
        return objc.msgSend(_self, "setPercentEncodedPassword:", void, .{_percentEncodedPassword});
    }

    pub fn percentEncodedHost(_self: *@This()) ?*String {
        return objc.msgSend(_self, "percentEncodedHost", ?*String, .{});
    }

    pub fn setPercentEncodedHost(_self: *@This(), _percentEncodedHost: ?*String) void {
        return objc.msgSend(_self, "setPercentEncodedHost:", void, .{_percentEncodedHost});
    }

    pub fn percentEncodedPath(_self: *@This()) ?*String {
        return objc.msgSend(_self, "percentEncodedPath", ?*String, .{});
    }

    pub fn setPercentEncodedPath(_self: *@This(), _percentEncodedPath: ?*String) void {
        return objc.msgSend(_self, "setPercentEncodedPath:", void, .{_percentEncodedPath});
    }

    pub fn percentEncodedQuery(_self: *@This()) ?*String {
        return objc.msgSend(_self, "percentEncodedQuery", ?*String, .{});
    }

    pub fn setPercentEncodedQuery(_self: *@This(), _percentEncodedQuery: ?*String) void {
        return objc.msgSend(_self, "setPercentEncodedQuery:", void, .{_percentEncodedQuery});
    }

    pub fn percentEncodedFragment(_self: *@This()) ?*String {
        return objc.msgSend(_self, "percentEncodedFragment", ?*String, .{});
    }

    pub fn setPercentEncodedFragment(_self: *@This(), _percentEncodedFragment: ?*String) void {
        return objc.msgSend(_self, "setPercentEncodedFragment:", void, .{_percentEncodedFragment});
    }

    pub fn encodedHost(_self: *@This()) ?*String {
        return objc.msgSend(_self, "encodedHost", ?*String, .{});
    }

    pub fn setEncodedHost(_self: *@This(), _encodedHost: ?*String) void {
        return objc.msgSend(_self, "setEncodedHost:", void, .{_encodedHost});
    }

    pub fn rangeOfScheme(_self: *@This()) Range {
        return objc.msgSend(_self, "rangeOfScheme", Range, .{});
    }

    pub fn rangeOfUser(_self: *@This()) Range {
        return objc.msgSend(_self, "rangeOfUser", Range, .{});
    }

    pub fn rangeOfPassword(_self: *@This()) Range {
        return objc.msgSend(_self, "rangeOfPassword", Range, .{});
    }

    pub fn rangeOfHost(_self: *@This()) Range {
        return objc.msgSend(_self, "rangeOfHost", Range, .{});
    }

    pub fn rangeOfPort(_self: *@This()) Range {
        return objc.msgSend(_self, "rangeOfPort", Range, .{});
    }

    pub fn rangeOfPath(_self: *@This()) Range {
        return objc.msgSend(_self, "rangeOfPath", Range, .{});
    }

    pub fn rangeOfQuery(_self: *@This()) Range {
        return objc.msgSend(_self, "rangeOfQuery", Range, .{});
    }

    pub fn rangeOfFragment(_self: *@This()) Range {
        return objc.msgSend(_self, "rangeOfFragment", Range, .{});
    }

    pub fn queryItems(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "queryItems", ?*anyopaque, .{});
    }

    pub fn setQueryItems(_self: *@This(), _queryItems: ?*anyopaque) void {
        return objc.msgSend(_self, "setQueryItems:", void, .{_queryItems});
    }

    pub fn percentEncodedQueryItems(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "percentEncodedQueryItems", ?*anyopaque, .{});
    }

    pub fn setPercentEncodedQueryItems(_self: *@This(), _percentEncodedQueryItems: ?*anyopaque) void {
        return objc.msgSend(_self, "setPercentEncodedQueryItems:", void, .{_percentEncodedQueryItems});
    }
};

/// https://developer.apple.com/documentation/Foundation/NSFileSecurity?language=objc
pub const FileSecurity = opaque {
    pub const Internal = objc.ExternClass("NSFileSecurity", @This(), objc.NSObject, &.{ Copying, SecureCoding });
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn supportsSecureCoding() objc.BOOL {
        return objc.msgSend(Internal.class(), "supportsSecureCoding", objc.BOOL, .{});
    }
};

pub const FileAttributeKey = ?*String;

pub const FileAttributeType = ?*String;

pub const FileProtectionType = ?*String;

pub const FileProviderServiceName = ?*String;

pub const VolumeEnumerationOptions = objc.NSUInteger;
pub const VolumeEnumerationOptions_SkipHiddenVolumes: objc.NSUInteger = 2;
pub const VolumeEnumerationOptions_ProduceFileReferenceURLs: objc.NSUInteger = 4;

pub const DirectoryEnumerationOptions = objc.NSUInteger;
pub const DirectoryEnumerationOptions_SkipsSubdirectoryDescendants: objc.NSUInteger = 1;
pub const DirectoryEnumerationOptions_SkipsPackageDescendants: objc.NSUInteger = 2;
pub const DirectoryEnumerationOptions_SkipsHiddenFiles: objc.NSUInteger = 4;
pub const DirectoryEnumerationOptions_IncludesDirectoriesPostOrder: objc.NSUInteger = 8;
pub const DirectoryEnumerationOptions_ProducesRelativePathURLs: objc.NSUInteger = 16;

pub const FileManagerItemReplacementOptions = objc.NSUInteger;
pub const FileManagerItemReplacementOptions_UsingNewMetadataOnly: objc.NSUInteger = 1;
pub const FileManagerItemReplacementOptions_WithoutDeletingBackupItem: objc.NSUInteger = 2;

pub const URLRelationship = objc.NSInteger;
pub const URLRelationship_Contains: objc.NSInteger = 0;
pub const URLRelationship_Same: objc.NSInteger = 1;
pub const URLRelationship_Other: objc.NSInteger = 2;

pub const FileManagerUnmountOptions = objc.NSUInteger;
pub const FileManagerUnmountOptions_AllPartitionsAndEjectDisk: objc.NSUInteger = 1;
pub const FileManagerUnmountOptions_WithoutUI: objc.NSUInteger = 2;

/// https://developer.apple.com/documentation/Foundation/NSFileManager?language=objc
pub const FileManager = opaque {
    pub const Internal = objc.ExternClass("NSFileManager", @This(), objc.NSObject, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn mountedVolumeURLsIncludingResourceValuesForKeysOptions(_self: *@This(), _propertyKeys: ?*anyopaque, _options: VolumeEnumerationOptions) ?*anyopaque {
        return objc.msgSend(_self, "mountedVolumeURLsIncludingResourceValuesForKeys:options:", ?*anyopaque, .{ _propertyKeys, _options });
    }

    pub fn unmountVolumeAtURLOptionsCompletionHandler(_self: *@This(), _url: ?*URL, _mask: FileManagerUnmountOptions, _completionHandler: *const fn (?*Error) callconv(.C) void) void {
        return objc.msgSend(_self, "unmountVolumeAtURL:options:completionHandler:", void, .{ _url, _mask, _completionHandler });
    }

    pub fn contentsOfDirectoryAtURLIncludingPropertiesForKeysOptionsError(
        _self: *@This(),
        _url: ?*URL,
        _keys: ?*anyopaque,
        _mask: DirectoryEnumerationOptions,
        _error: ?*?*Error,
    ) ?*anyopaque {
        return objc.msgSend(_self, "contentsOfDirectoryAtURL:includingPropertiesForKeys:options:error:", ?*anyopaque, .{
            _url,
            _keys,
            _mask,
            _error,
        });
    }

    pub fn urLsForDirectoryInDomains(_self: *@This(), _directory: SearchPathDirectory, _domainMask: SearchPathDomainMask) ?*anyopaque {
        return objc.msgSend(_self, "URLsForDirectory:inDomains:", ?*anyopaque, .{ _directory, _domainMask });
    }

    pub fn urlForDirectoryInDomainAppropriateForURLCreateError(
        _self: *@This(),
        _directory: SearchPathDirectory,
        _domain: SearchPathDomainMask,
        _url: ?*URL,
        _shouldCreate: objc.BOOL,
        _error: ?*?*Error,
    ) ?*URL {
        return objc.msgSend(_self, "URLForDirectory:inDomain:appropriateForURL:create:error:", ?*URL, .{
            _directory,
            _domain,
            _url,
            _shouldCreate,
            _error,
        });
    }

    pub fn getRelationshipOfDirectoryAtURLToItemAtURLError(
        _self: *@This(),
        _outRelationship: ?*URLRelationship,
        _directoryURL: ?*URL,
        _otherURL: ?*URL,
        _error: ?*?*Error,
    ) objc.BOOL {
        return objc.msgSend(_self, "getRelationship:ofDirectoryAtURL:toItemAtURL:error:", objc.BOOL, .{
            _outRelationship,
            _directoryURL,
            _otherURL,
            _error,
        });
    }

    pub fn getRelationshipOfDirectoryInDomainToItemAtURLError(
        _self: *@This(),
        _outRelationship: ?*URLRelationship,
        _directory: SearchPathDirectory,
        _domainMask: SearchPathDomainMask,
        _url: ?*URL,
        _error: ?*?*Error,
    ) objc.BOOL {
        return objc.msgSend(_self, "getRelationship:ofDirectory:inDomain:toItemAtURL:error:", objc.BOOL, .{
            _outRelationship,
            _directory,
            _domainMask,
            _url,
            _error,
        });
    }

    pub fn createDirectoryAtURLWithIntermediateDirectoriesAttributesError(
        _self: *@This(),
        _url: ?*URL,
        _createIntermediates: objc.BOOL,
        _attributes: ?*anyopaque,
        _error: ?*?*Error,
    ) objc.BOOL {
        return objc.msgSend(_self, "createDirectoryAtURL:withIntermediateDirectories:attributes:error:", objc.BOOL, .{
            _url,
            _createIntermediates,
            _attributes,
            _error,
        });
    }

    pub fn createSymbolicLinkAtURLWithDestinationURLError(_self: *@This(), _url: ?*URL, _destURL: ?*URL, _error: ?*?*Error) objc.BOOL {
        return objc.msgSend(_self, "createSymbolicLinkAtURL:withDestinationURL:error:", objc.BOOL, .{ _url, _destURL, _error });
    }

    pub fn setAttributesOfItemAtPathError(_self: *@This(), _attributes: ?*anyopaque, _path: ?*String, _error: ?*?*Error) objc.BOOL {
        return objc.msgSend(_self, "setAttributes:ofItemAtPath:error:", objc.BOOL, .{ _attributes, _path, _error });
    }

    pub fn createDirectoryAtPathWithIntermediateDirectoriesAttributesError(
        _self: *@This(),
        _path: ?*String,
        _createIntermediates: objc.BOOL,
        _attributes: ?*anyopaque,
        _error: ?*?*Error,
    ) objc.BOOL {
        return objc.msgSend(_self, "createDirectoryAtPath:withIntermediateDirectories:attributes:error:", objc.BOOL, .{
            _path,
            _createIntermediates,
            _attributes,
            _error,
        });
    }

    pub fn contentsOfDirectoryAtPathError(_self: *@This(), _path: ?*String, _error: ?*?*Error) ?*anyopaque {
        return objc.msgSend(_self, "contentsOfDirectoryAtPath:error:", ?*anyopaque, .{ _path, _error });
    }

    pub fn subpathsOfDirectoryAtPathError(_self: *@This(), _path: ?*String, _error: ?*?*Error) ?*anyopaque {
        return objc.msgSend(_self, "subpathsOfDirectoryAtPath:error:", ?*anyopaque, .{ _path, _error });
    }

    pub fn attributesOfItemAtPathError(_self: *@This(), _path: ?*String, _error: ?*?*Error) ?*anyopaque {
        return objc.msgSend(_self, "attributesOfItemAtPath:error:", ?*anyopaque, .{ _path, _error });
    }

    pub fn attributesOfFileSystemForPathError(_self: *@This(), _path: ?*String, _error: ?*?*Error) ?*anyopaque {
        return objc.msgSend(_self, "attributesOfFileSystemForPath:error:", ?*anyopaque, .{ _path, _error });
    }

    pub fn createSymbolicLinkAtPathWithDestinationPathError(_self: *@This(), _path: ?*String, _destPath: ?*String, _error: ?*?*Error) objc.BOOL {
        return objc.msgSend(_self, "createSymbolicLinkAtPath:withDestinationPath:error:", objc.BOOL, .{ _path, _destPath, _error });
    }

    pub fn destinationOfSymbolicLinkAtPathError(_self: *@This(), _path: ?*String, _error: ?*?*Error) ?*String {
        return objc.msgSend(_self, "destinationOfSymbolicLinkAtPath:error:", ?*String, .{ _path, _error });
    }

    pub fn copyItemAtPathToPathError(_self: *@This(), _srcPath: ?*String, _dstPath: ?*String, _error: ?*?*Error) objc.BOOL {
        return objc.msgSend(_self, "copyItemAtPath:toPath:error:", objc.BOOL, .{ _srcPath, _dstPath, _error });
    }

    pub fn moveItemAtPathToPathError(_self: *@This(), _srcPath: ?*String, _dstPath: ?*String, _error: ?*?*Error) objc.BOOL {
        return objc.msgSend(_self, "moveItemAtPath:toPath:error:", objc.BOOL, .{ _srcPath, _dstPath, _error });
    }

    pub fn linkItemAtPathToPathError(_self: *@This(), _srcPath: ?*String, _dstPath: ?*String, _error: ?*?*Error) objc.BOOL {
        return objc.msgSend(_self, "linkItemAtPath:toPath:error:", objc.BOOL, .{ _srcPath, _dstPath, _error });
    }

    pub fn removeItemAtPathError(_self: *@This(), _path: ?*String, _error: ?*?*Error) objc.BOOL {
        return objc.msgSend(_self, "removeItemAtPath:error:", objc.BOOL, .{ _path, _error });
    }

    pub fn copyItemAtURLToURLError(_self: *@This(), _srcURL: ?*URL, _dstURL: ?*URL, _error: ?*?*Error) objc.BOOL {
        return objc.msgSend(_self, "copyItemAtURL:toURL:error:", objc.BOOL, .{ _srcURL, _dstURL, _error });
    }

    pub fn moveItemAtURLToURLError(_self: *@This(), _srcURL: ?*URL, _dstURL: ?*URL, _error: ?*?*Error) objc.BOOL {
        return objc.msgSend(_self, "moveItemAtURL:toURL:error:", objc.BOOL, .{ _srcURL, _dstURL, _error });
    }

    pub fn linkItemAtURLToURLError(_self: *@This(), _srcURL: ?*URL, _dstURL: ?*URL, _error: ?*?*Error) objc.BOOL {
        return objc.msgSend(_self, "linkItemAtURL:toURL:error:", objc.BOOL, .{ _srcURL, _dstURL, _error });
    }

    pub fn removeItemAtURLError(_self: *@This(), _URL: ?*URL, _error: ?*?*Error) objc.BOOL {
        return objc.msgSend(_self, "removeItemAtURL:error:", objc.BOOL, .{ _URL, _error });
    }

    pub fn trashItemAtURLResultingItemURLError(_self: *@This(), _url: ?*URL, _outResultingURL: ?*?*URL, _error: ?*?*Error) objc.BOOL {
        return objc.msgSend(_self, "trashItemAtURL:resultingItemURL:error:", objc.BOOL, .{ _url, _outResultingURL, _error });
    }

    pub fn fileAttributesAtPathTraverseLink(_self: *@This(), _path: ?*String, _yorn: objc.BOOL) ?*Dictionary {
        return objc.msgSend(_self, "fileAttributesAtPath:traverseLink:", ?*Dictionary, .{ _path, _yorn });
    }

    pub fn changeFileAttributesAtPath(_self: *@This(), _attributes: ?*Dictionary, _path: ?*String) objc.BOOL {
        return objc.msgSend(_self, "changeFileAttributes:atPath:", objc.BOOL, .{ _attributes, _path });
    }

    pub fn directoryContentsAtPath(_self: *@This(), _path: ?*String) ?*Array {
        return objc.msgSend(_self, "directoryContentsAtPath:", ?*Array, .{_path});
    }

    pub fn fileSystemAttributesAtPath(_self: *@This(), _path: ?*String) ?*Dictionary {
        return objc.msgSend(_self, "fileSystemAttributesAtPath:", ?*Dictionary, .{_path});
    }

    pub fn pathContentOfSymbolicLinkAtPath(_self: *@This(), _path: ?*String) ?*String {
        return objc.msgSend(_self, "pathContentOfSymbolicLinkAtPath:", ?*String, .{_path});
    }

    pub fn createSymbolicLinkAtPathPathContent(_self: *@This(), _path: ?*String, _otherpath: ?*String) objc.BOOL {
        return objc.msgSend(_self, "createSymbolicLinkAtPath:pathContent:", objc.BOOL, .{ _path, _otherpath });
    }

    pub fn createDirectoryAtPathAttributes(_self: *@This(), _path: ?*String, _attributes: ?*Dictionary) objc.BOOL {
        return objc.msgSend(_self, "createDirectoryAtPath:attributes:", objc.BOOL, .{ _path, _attributes });
    }

    pub fn linkPathToPathHandler(_self: *@This(), _src: ?*String, _dest: ?*String, _handler: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "linkPath:toPath:handler:", objc.BOOL, .{ _src, _dest, _handler });
    }

    pub fn copyPathToPathHandler(_self: *@This(), _src: ?*String, _dest: ?*String, _handler: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "copyPath:toPath:handler:", objc.BOOL, .{ _src, _dest, _handler });
    }

    pub fn movePathToPathHandler(_self: *@This(), _src: ?*String, _dest: ?*String, _handler: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "movePath:toPath:handler:", objc.BOOL, .{ _src, _dest, _handler });
    }

    pub fn removeFileAtPathHandler(_self: *@This(), _path: ?*String, _handler: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "removeFileAtPath:handler:", objc.BOOL, .{ _path, _handler });
    }

    pub fn changeCurrentDirectoryPath(_self: *@This(), _path: ?*String) objc.BOOL {
        return objc.msgSend(_self, "changeCurrentDirectoryPath:", objc.BOOL, .{_path});
    }

    pub fn fileExistsAtPath(_self: *@This(), _path: ?*String) objc.BOOL {
        return objc.msgSend(_self, "fileExistsAtPath:", objc.BOOL, .{_path});
    }

    pub fn fileExistsAtPathIsDirectory(_self: *@This(), _path: ?*String, _isDirectory: ?*objc.BOOL) objc.BOOL {
        return objc.msgSend(_self, "fileExistsAtPath:isDirectory:", objc.BOOL, .{ _path, _isDirectory });
    }

    pub fn isReadableFileAtPath(_self: *@This(), _path: ?*String) objc.BOOL {
        return objc.msgSend(_self, "isReadableFileAtPath:", objc.BOOL, .{_path});
    }

    pub fn isWritableFileAtPath(_self: *@This(), _path: ?*String) objc.BOOL {
        return objc.msgSend(_self, "isWritableFileAtPath:", objc.BOOL, .{_path});
    }

    pub fn isExecutableFileAtPath(_self: *@This(), _path: ?*String) objc.BOOL {
        return objc.msgSend(_self, "isExecutableFileAtPath:", objc.BOOL, .{_path});
    }

    pub fn isDeletableFileAtPath(_self: *@This(), _path: ?*String) objc.BOOL {
        return objc.msgSend(_self, "isDeletableFileAtPath:", objc.BOOL, .{_path});
    }

    pub fn contentsEqualAtPathAndPath(_self: *@This(), _path1: ?*String, _path2: ?*String) objc.BOOL {
        return objc.msgSend(_self, "contentsEqualAtPath:andPath:", objc.BOOL, .{ _path1, _path2 });
    }

    pub fn displayNameAtPath(_self: *@This(), _path: ?*String) ?*String {
        return objc.msgSend(_self, "displayNameAtPath:", ?*String, .{_path});
    }

    pub fn componentsToDisplayForPath(_self: *@This(), _path: ?*String) ?*anyopaque {
        return objc.msgSend(_self, "componentsToDisplayForPath:", ?*anyopaque, .{_path});
    }

    pub fn enumeratorAtPath(_self: *@This(), _path: ?*String) ?*anyopaque {
        return objc.msgSend(_self, "enumeratorAtPath:", ?*anyopaque, .{_path});
    }

    pub fn enumeratorAtURLIncludingPropertiesForKeysOptionsErrorHandler(
        _self: *@This(),
        _url: ?*URL,
        _keys: ?*anyopaque,
        _mask: DirectoryEnumerationOptions,
        _handler: *const fn (?*URL, ?*Error) callconv(.C) objc.BOOL,
    ) ?*anyopaque {
        return objc.msgSend(_self, "enumeratorAtURL:includingPropertiesForKeys:options:errorHandler:", ?*anyopaque, .{
            _url,
            _keys,
            _mask,
            _handler,
        });
    }

    pub fn subpathsAtPath(_self: *@This(), _path: ?*String) ?*anyopaque {
        return objc.msgSend(_self, "subpathsAtPath:", ?*anyopaque, .{_path});
    }

    pub fn contentsAtPath(_self: *@This(), _path: ?*String) ?*Data {
        return objc.msgSend(_self, "contentsAtPath:", ?*Data, .{_path});
    }

    pub fn createFileAtPathContentsAttributes(_self: *@This(), _path: ?*String, _data: ?*Data, _attr: ?*anyopaque) objc.BOOL {
        return objc.msgSend(_self, "createFileAtPath:contents:attributes:", objc.BOOL, .{ _path, _data, _attr });
    }

    pub fn fileSystemRepresentationWithPath(_self: *@This(), _path: ?*String) ?*i8 {
        return objc.msgSend(_self, "fileSystemRepresentationWithPath:", ?*i8, .{_path});
    }

    pub fn stringWithFileSystemRepresentationLength(_self: *@This(), _str: ?*i8, _len: objc.NSUInteger) ?*String {
        return objc.msgSend(_self, "stringWithFileSystemRepresentation:length:", ?*String, .{ _str, _len });
    }

    pub fn replaceItemAtURLWithItemAtURLBackupItemNameOptionsResultingItemURLError(
        _self: *@This(),
        _originalItemURL: ?*URL,
        _newItemURL: ?*URL,
        _backupItemName: ?*String,
        _options: FileManagerItemReplacementOptions,
        _resultingURL: ?*?*URL,
        _error: ?*?*Error,
    ) objc.BOOL {
        return objc.msgSend(_self, "replaceItemAtURL:withItemAtURL:backupItemName:options:resultingItemURL:error:", objc.BOOL, .{
            _originalItemURL,
            _newItemURL,
            _backupItemName,
            _options,
            _resultingURL,
            _error,
        });
    }

    pub fn setUbiquitousItemAtURLDestinationURLError(
        _self: *@This(),
        _flag: objc.BOOL,
        _url: ?*URL,
        _destinationURL: ?*URL,
        _error: ?*?*Error,
    ) objc.BOOL {
        return objc.msgSend(_self, "setUbiquitous:itemAtURL:destinationURL:error:", objc.BOOL, .{
            _flag,
            _url,
            _destinationURL,
            _error,
        });
    }

    pub fn isUbiquitousItemAtURL(_self: *@This(), _url: ?*URL) objc.BOOL {
        return objc.msgSend(_self, "isUbiquitousItemAtURL:", objc.BOOL, .{_url});
    }

    pub fn startDownloadingUbiquitousItemAtURLError(_self: *@This(), _url: ?*URL, _error: ?*?*Error) objc.BOOL {
        return objc.msgSend(_self, "startDownloadingUbiquitousItemAtURL:error:", objc.BOOL, .{ _url, _error });
    }

    pub fn evictUbiquitousItemAtURLError(_self: *@This(), _url: ?*URL, _error: ?*?*Error) objc.BOOL {
        return objc.msgSend(_self, "evictUbiquitousItemAtURL:error:", objc.BOOL, .{ _url, _error });
    }

    pub fn urlForUbiquityContainerIdentifier(_self: *@This(), _containerIdentifier: ?*String) ?*URL {
        return objc.msgSend(_self, "URLForUbiquityContainerIdentifier:", ?*URL, .{_containerIdentifier});
    }

    pub fn urlForPublishingUbiquitousItemAtURLExpirationDateError(_self: *@This(), _url: ?*URL, _outDate: ?*?*Date, _error: ?*?*Error) ?*URL {
        return objc.msgSend(_self, "URLForPublishingUbiquitousItemAtURL:expirationDate:error:", ?*URL, .{ _url, _outDate, _error });
    }

    pub fn getFileProviderServicesForItemAtURLCompletionHandler(_self: *@This(), _url: ?*URL, _completionHandler: *const fn (?*anyopaque, ?*Error) callconv(.C) void) void {
        return objc.msgSend(_self, "getFileProviderServicesForItemAtURL:completionHandler:", void, .{ _url, _completionHandler });
    }

    pub fn containerURLForSecurityApplicationGroupIdentifier(_self: *@This(), _groupIdentifier: ?*String) ?*URL {
        return objc.msgSend(_self, "containerURLForSecurityApplicationGroupIdentifier:", ?*URL, .{_groupIdentifier});
    }

    pub fn defaultManager() ?*FileManager {
        return objc.msgSend(Internal.class(), "defaultManager", ?*FileManager, .{});
    }

    pub fn delegate(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "delegate", ?*anyopaque, .{});
    }

    pub fn setDelegate(_self: *@This(), _delegate: ?*anyopaque) void {
        return objc.msgSend(_self, "setDelegate:", void, .{_delegate});
    }

    pub fn currentDirectoryPath(_self: *@This()) ?*String {
        return objc.msgSend(_self, "currentDirectoryPath", ?*String, .{});
    }

    pub fn ubiquityIdentityToken(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "ubiquityIdentityToken", ?*anyopaque, .{});
    }
};

/// https://developer.apple.com/documentation/Foundation/NSFileManagerDelegate?language=objc
pub const FileManagerDelegate = opaque {
    pub const Internal = objc.ExternProtocol(@This(), &.{objc.NSObject});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn fileManagerShouldCopyItemAtPathToPath(_self: *@This(), _fileManager: ?*FileManager, _srcPath: ?*String, _dstPath: ?*String) objc.BOOL {
        return objc.msgSend(_self, "fileManager:shouldCopyItemAtPath:toPath:", objc.BOOL, .{ _fileManager, _srcPath, _dstPath });
    }

    pub fn fileManagerShouldCopyItemAtURLToURL(_self: *@This(), _fileManager: ?*FileManager, _srcURL: ?*URL, _dstURL: ?*URL) objc.BOOL {
        return objc.msgSend(_self, "fileManager:shouldCopyItemAtURL:toURL:", objc.BOOL, .{ _fileManager, _srcURL, _dstURL });
    }

    pub fn fileManagerShouldProceedAfterErrorCopyingItemAtPathToPath(
        _self: *@This(),
        _fileManager: ?*FileManager,
        _error: ?*Error,
        _srcPath: ?*String,
        _dstPath: ?*String,
    ) objc.BOOL {
        return objc.msgSend(_self, "fileManager:shouldProceedAfterError:copyingItemAtPath:toPath:", objc.BOOL, .{
            _fileManager,
            _error,
            _srcPath,
            _dstPath,
        });
    }

    pub fn fileManagerShouldProceedAfterErrorCopyingItemAtURLToURL(
        _self: *@This(),
        _fileManager: ?*FileManager,
        _error: ?*Error,
        _srcURL: ?*URL,
        _dstURL: ?*URL,
    ) objc.BOOL {
        return objc.msgSend(_self, "fileManager:shouldProceedAfterError:copyingItemAtURL:toURL:", objc.BOOL, .{
            _fileManager,
            _error,
            _srcURL,
            _dstURL,
        });
    }

    pub fn fileManagerShouldMoveItemAtPathToPath(_self: *@This(), _fileManager: ?*FileManager, _srcPath: ?*String, _dstPath: ?*String) objc.BOOL {
        return objc.msgSend(_self, "fileManager:shouldMoveItemAtPath:toPath:", objc.BOOL, .{ _fileManager, _srcPath, _dstPath });
    }

    pub fn fileManagerShouldMoveItemAtURLToURL(_self: *@This(), _fileManager: ?*FileManager, _srcURL: ?*URL, _dstURL: ?*URL) objc.BOOL {
        return objc.msgSend(_self, "fileManager:shouldMoveItemAtURL:toURL:", objc.BOOL, .{ _fileManager, _srcURL, _dstURL });
    }

    pub fn fileManagerShouldProceedAfterErrorMovingItemAtPathToPath(
        _self: *@This(),
        _fileManager: ?*FileManager,
        _error: ?*Error,
        _srcPath: ?*String,
        _dstPath: ?*String,
    ) objc.BOOL {
        return objc.msgSend(_self, "fileManager:shouldProceedAfterError:movingItemAtPath:toPath:", objc.BOOL, .{
            _fileManager,
            _error,
            _srcPath,
            _dstPath,
        });
    }

    pub fn fileManagerShouldProceedAfterErrorMovingItemAtURLToURL(
        _self: *@This(),
        _fileManager: ?*FileManager,
        _error: ?*Error,
        _srcURL: ?*URL,
        _dstURL: ?*URL,
    ) objc.BOOL {
        return objc.msgSend(_self, "fileManager:shouldProceedAfterError:movingItemAtURL:toURL:", objc.BOOL, .{
            _fileManager,
            _error,
            _srcURL,
            _dstURL,
        });
    }

    pub fn fileManagerShouldLinkItemAtPathToPath(_self: *@This(), _fileManager: ?*FileManager, _srcPath: ?*String, _dstPath: ?*String) objc.BOOL {
        return objc.msgSend(_self, "fileManager:shouldLinkItemAtPath:toPath:", objc.BOOL, .{ _fileManager, _srcPath, _dstPath });
    }

    pub fn fileManagerShouldLinkItemAtURLToURL(_self: *@This(), _fileManager: ?*FileManager, _srcURL: ?*URL, _dstURL: ?*URL) objc.BOOL {
        return objc.msgSend(_self, "fileManager:shouldLinkItemAtURL:toURL:", objc.BOOL, .{ _fileManager, _srcURL, _dstURL });
    }

    pub fn fileManagerShouldProceedAfterErrorLinkingItemAtPathToPath(
        _self: *@This(),
        _fileManager: ?*FileManager,
        _error: ?*Error,
        _srcPath: ?*String,
        _dstPath: ?*String,
    ) objc.BOOL {
        return objc.msgSend(_self, "fileManager:shouldProceedAfterError:linkingItemAtPath:toPath:", objc.BOOL, .{
            _fileManager,
            _error,
            _srcPath,
            _dstPath,
        });
    }

    pub fn fileManagerShouldProceedAfterErrorLinkingItemAtURLToURL(
        _self: *@This(),
        _fileManager: ?*FileManager,
        _error: ?*Error,
        _srcURL: ?*URL,
        _dstURL: ?*URL,
    ) objc.BOOL {
        return objc.msgSend(_self, "fileManager:shouldProceedAfterError:linkingItemAtURL:toURL:", objc.BOOL, .{
            _fileManager,
            _error,
            _srcURL,
            _dstURL,
        });
    }

    pub fn fileManagerShouldRemoveItemAtPath(_self: *@This(), _fileManager: ?*FileManager, _path: ?*String) objc.BOOL {
        return objc.msgSend(_self, "fileManager:shouldRemoveItemAtPath:", objc.BOOL, .{ _fileManager, _path });
    }

    pub fn fileManagerShouldRemoveItemAtURL(_self: *@This(), _fileManager: ?*FileManager, _URL: ?*URL) objc.BOOL {
        return objc.msgSend(_self, "fileManager:shouldRemoveItemAtURL:", objc.BOOL, .{ _fileManager, _URL });
    }

    pub fn fileManagerShouldProceedAfterErrorRemovingItemAtPath(_self: *@This(), _fileManager: ?*FileManager, _error: ?*Error, _path: ?*String) objc.BOOL {
        return objc.msgSend(_self, "fileManager:shouldProceedAfterError:removingItemAtPath:", objc.BOOL, .{ _fileManager, _error, _path });
    }

    pub fn fileManagerShouldProceedAfterErrorRemovingItemAtURL(_self: *@This(), _fileManager: ?*FileManager, _error: ?*Error, _URL: ?*URL) objc.BOOL {
        return objc.msgSend(_self, "fileManager:shouldProceedAfterError:removingItemAtURL:", objc.BOOL, .{ _fileManager, _error, _URL });
    }
};

/// https://developer.apple.com/documentation/Foundation/NSDirectoryEnumerator?language=objc
pub fn DirectoryEnumerator(comptime ObjectType: type) type {
    const unused0 = ObjectType;
    _ = unused0; // Prevent unused parameter warning!!!
    return struct {
        pub const Internal = objc.ExternClass("NSDirectoryEnumerator", @This(), Enumerator, &.{});
        pub const as = Internal.as;
        pub const retain = Internal.retain;
        pub const release = Internal.release;
        pub const autorelease = Internal.autorelease;
        pub const new = Internal.new;
        pub const alloc = Internal.alloc;

        pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
            return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
        }

        pub fn hash(_self: *@This()) objc.NSUInteger {
            return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
        }

        pub fn superclass(_self: *@This()) objc.Class {
            return objc.msgSend(_self, "superclass", objc.Class, .{});
        }

        pub fn class(_self: *@This()) objc.Class {
            return objc.msgSend(_self, "class", objc.Class, .{});
        }

        pub fn self(_self: *@This()) *@This() {
            return objc.msgSend(_self, "self", *@This(), .{});
        }

        pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
            return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
        }

        pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
            return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
        }

        pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
            return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
        }

        pub fn isProxy(_self: *@This()) objc.BOOL {
            return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
        }

        pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
            return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
        }

        pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
            return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
        }

        pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
            return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
        }

        pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
            return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
        }

        pub fn retainCount(_self: *@This()) objc.NSUInteger {
            return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
        }

        pub fn zone(_self: *@This()) ?*objc._NSZone {
            return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
        }

        pub fn description(_self: *@This()) ?*String {
            return objc.msgSend(_self, "description", ?*String, .{});
        }

        pub fn debugDescription(_self: *@This()) ?*String {
            return objc.msgSend(_self, "debugDescription", ?*String, .{});
        }

        pub fn load() void {
            return objc.msgSend(Internal.class(), "load", void, .{});
        }

        pub fn initialize() void {
            return objc.msgSend(Internal.class(), "initialize", void, .{});
        }

        pub fn init(_self: *@This()) *@This() {
            return objc.msgSend(_self, "init", *@This(), .{});
        }

        pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
            return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
        }

        pub fn dealloc(_self: *@This()) void {
            return objc.msgSend(_self, "dealloc", void, .{});
        }

        pub fn finalize(_self: *@This()) void {
            return objc.msgSend(_self, "finalize", void, .{});
        }

        pub fn copy(_self: *@This()) ?objc.Id {
            return objc.msgSend(_self, "copy", ?objc.Id, .{});
        }

        pub fn mutableCopy(_self: *@This()) ?objc.Id {
            return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
        }

        pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
            return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
        }

        pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
            return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
        }

        pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
            return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
        }

        pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
            return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
        }

        pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
            return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
        }

        pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
            return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
        }

        pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
            return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
        }

        pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
            return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
        }

        pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
            return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
        }

        pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
            return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
        }

        pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
            return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
        }

        pub fn retainWeakReference(_self: *@This()) objc.BOOL {
            return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
        }

        pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
            return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
        }

        pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
            return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
        }

        pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
            return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
        }

        pub fn countByEnumeratingWithStateObjectsCount(_self: *@This(), _state: ?*FastEnumerationState, _buffer: ?*?objc.Id, _len: objc.NSUInteger) objc.NSUInteger {
            return objc.msgSend(_self, "countByEnumeratingWithState:objects:count:", objc.NSUInteger, .{ _state, _buffer, _len });
        }

        pub fn nextObject(_self: *@This()) ObjectType {
            return objc.msgSend(_self, "nextObject", ObjectType, .{});
        }

        pub fn skipDescendents(_self: *@This()) void {
            return objc.msgSend(_self, "skipDescendents", void, .{});
        }

        pub fn skipDescendants(_self: *@This()) void {
            return objc.msgSend(_self, "skipDescendants", void, .{});
        }

        pub fn fileAttributes(_self: *@This()) ?*anyopaque {
            return objc.msgSend(_self, "fileAttributes", ?*anyopaque, .{});
        }

        pub fn directoryAttributes(_self: *@This()) ?*anyopaque {
            return objc.msgSend(_self, "directoryAttributes", ?*anyopaque, .{});
        }

        pub fn isEnumeratingDirectoryPostOrder(_self: *@This()) objc.BOOL {
            return objc.msgSend(_self, "isEnumeratingDirectoryPostOrder", objc.BOOL, .{});
        }

        pub fn level(_self: *@This()) objc.NSUInteger {
            return objc.msgSend(_self, "level", objc.NSUInteger, .{});
        }
    };
}

/// https://developer.apple.com/documentation/Foundation/NSFileProviderService?language=objc
pub const FileProviderService = opaque {
    pub const Internal = objc.ExternClass("NSFileProviderService", @This(), objc.NSObject, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn getFileProviderConnectionWithCompletionHandler(_self: *@This(), _completionHandler: *const fn (?*XPCConnection, ?*Error) callconv(.C) void) void {
        return objc.msgSend(_self, "getFileProviderConnectionWithCompletionHandler:", void, .{_completionHandler});
    }

    pub fn name(_self: *@This()) FileProviderServiceName {
        return objc.msgSend(_self, "name", FileProviderServiceName, .{});
    }
};

pub const PointerFunctionsOptions = objc.NSUInteger;
pub const PointerFunctionsOptions_StrongMemory: objc.NSUInteger = 0;
pub const PointerFunctionsOptions_ZeroingWeakMemory: objc.NSUInteger = 1;
pub const PointerFunctionsOptions_OpaqueMemory: objc.NSUInteger = 2;
pub const PointerFunctionsOptions_MallocMemory: objc.NSUInteger = 3;
pub const PointerFunctionsOptions_MachVirtualMemory: objc.NSUInteger = 4;
pub const PointerFunctionsOptions_WeakMemory: objc.NSUInteger = 5;
pub const PointerFunctionsOptions_ObjectPersonality: objc.NSUInteger = 0;
pub const PointerFunctionsOptions_OpaquePersonality: objc.NSUInteger = 256;
pub const PointerFunctionsOptions_ObjectPointerPersonality: objc.NSUInteger = 512;
pub const PointerFunctionsOptions_CStringPersonality: objc.NSUInteger = 768;
pub const PointerFunctionsOptions_StructPersonality: objc.NSUInteger = 1024;
pub const PointerFunctionsOptions_IntegerPersonality: objc.NSUInteger = 1280;
pub const PointerFunctionsOptions_CopyIn: objc.NSUInteger = 65536;

/// https://developer.apple.com/documentation/Foundation/NSPointerFunctions?language=objc
pub const PointerFunctions = opaque {
    pub const Internal = objc.ExternClass("NSPointerFunctions", @This(), objc.NSObject, &.{Copying});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn initWithOptions(_self: *@This(), _options: PointerFunctionsOptions) *@This() {
        return objc.msgSend(_self, "initWithOptions:", *@This(), .{_options});
    }

    pub fn pointerFunctionsWithOptions(_options: PointerFunctionsOptions) ?*PointerFunctions {
        return objc.msgSend(Internal.class(), "pointerFunctionsWithOptions:", ?*PointerFunctions, .{_options});
    }

    pub fn hashFunction(_self: *@This()) ?*const fn (?*anyopaque, ?*const fn (?*anyopaque) callconv(.C) objc.NSUInteger) callconv(.C) objc.NSUInteger {
        return objc.msgSend(_self, "hashFunction", ?*const fn (?*anyopaque, ?*const fn (?*anyopaque) callconv(.C) objc.NSUInteger) callconv(.C) objc.NSUInteger, .{});
    }

    pub fn setHashFunction(_self: *@This(), _hashFunction: ?*const fn (?*anyopaque, ?*const fn (?*anyopaque) callconv(.C) objc.NSUInteger) callconv(.C) objc.NSUInteger) void {
        return objc.msgSend(_self, "setHashFunction:", void, .{_hashFunction});
    }

    pub fn isEqualFunction(_self: *@This()) ?*const fn (?*anyopaque, ?*anyopaque, ?*const fn (?*anyopaque) callconv(.C) objc.NSUInteger) callconv(.C) objc.BOOL {
        return objc.msgSend(_self, "isEqualFunction", ?*const fn (?*anyopaque, ?*anyopaque, ?*const fn (?*anyopaque) callconv(.C) objc.NSUInteger) callconv(.C) objc.BOOL, .{});
    }

    pub fn setIsEqualFunction(_self: *@This(), _isEqualFunction: ?*const fn (?*anyopaque, ?*anyopaque, ?*const fn (?*anyopaque) callconv(.C) objc.NSUInteger) callconv(.C) objc.BOOL) void {
        return objc.msgSend(_self, "setIsEqualFunction:", void, .{_isEqualFunction});
    }

    pub fn sizeFunction(_self: *@This()) ?*const fn (?*anyopaque) callconv(.C) objc.NSUInteger {
        return objc.msgSend(_self, "sizeFunction", ?*const fn (?*anyopaque) callconv(.C) objc.NSUInteger, .{});
    }

    pub fn setSizeFunction(_self: *@This(), _sizeFunction: ?*const fn (?*anyopaque) callconv(.C) objc.NSUInteger) void {
        return objc.msgSend(_self, "setSizeFunction:", void, .{_sizeFunction});
    }

    pub fn descriptionFunction(_self: *@This()) ?*const fn (?*anyopaque) callconv(.C) ?*String {
        return objc.msgSend(_self, "descriptionFunction", ?*const fn (?*anyopaque) callconv(.C) ?*String, .{});
    }

    pub fn setDescriptionFunction(_self: *@This(), _descriptionFunction: ?*const fn (?*anyopaque) callconv(.C) ?*String) void {
        return objc.msgSend(_self, "setDescriptionFunction:", void, .{_descriptionFunction});
    }

    pub fn relinquishFunction(_self: *@This()) ?*const fn (?*anyopaque, ?*const fn (?*anyopaque) callconv(.C) objc.NSUInteger) callconv(.C) void {
        return objc.msgSend(_self, "relinquishFunction", ?*const fn (?*anyopaque, ?*const fn (?*anyopaque) callconv(.C) objc.NSUInteger) callconv(.C) void, .{});
    }

    pub fn setRelinquishFunction(_self: *@This(), _relinquishFunction: ?*const fn (?*anyopaque, ?*const fn (?*anyopaque) callconv(.C) objc.NSUInteger) callconv(.C) void) void {
        return objc.msgSend(_self, "setRelinquishFunction:", void, .{_relinquishFunction});
    }

    pub fn acquireFunction(_self: *@This()) ?*const fn (?*anyopaque, ?*const fn (?*anyopaque) callconv(.C) objc.NSUInteger, objc.BOOL) callconv(.C) ?*anyopaque {
        return objc.msgSend(_self, "acquireFunction", ?*const fn (?*anyopaque, ?*const fn (?*anyopaque) callconv(.C) objc.NSUInteger, objc.BOOL) callconv(.C) ?*anyopaque, .{});
    }

    pub fn setAcquireFunction(_self: *@This(), _acquireFunction: ?*const fn (?*anyopaque, ?*const fn (?*anyopaque) callconv(.C) objc.NSUInteger, objc.BOOL) callconv(.C) ?*anyopaque) void {
        return objc.msgSend(_self, "setAcquireFunction:", void, .{_acquireFunction});
    }

    pub fn usesStrongWriteBarrier(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "usesStrongWriteBarrier", objc.BOOL, .{});
    }

    pub fn setUsesStrongWriteBarrier(_self: *@This(), _usesStrongWriteBarrier: objc.BOOL) void {
        return objc.msgSend(_self, "setUsesStrongWriteBarrier:", void, .{_usesStrongWriteBarrier});
    }

    pub fn usesWeakReadAndWriteBarriers(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "usesWeakReadAndWriteBarriers", objc.BOOL, .{});
    }

    pub fn setUsesWeakReadAndWriteBarriers(_self: *@This(), _usesWeakReadAndWriteBarriers: objc.BOOL) void {
        return objc.msgSend(_self, "setUsesWeakReadAndWriteBarriers:", void, .{_usesWeakReadAndWriteBarriers});
    }
};

pub const HashTableOptions = objc.NSUInteger;

/// https://developer.apple.com/documentation/Foundation/NSHashTable?language=objc
pub fn HashTable(comptime ObjectType: type) type {
    const unused0 = ObjectType;
    _ = unused0; // Prevent unused parameter warning!!!
    return struct {
        pub const Internal = objc.ExternClass("NSHashTable", @This(), objc.NSObject, &.{ Copying, SecureCoding, FastEnumeration });
        pub const as = Internal.as;
        pub const retain = Internal.retain;
        pub const release = Internal.release;
        pub const autorelease = Internal.autorelease;
        pub const new = Internal.new;
        pub const alloc = Internal.alloc;

        pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
            return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
        }

        pub fn hash(_self: *@This()) objc.NSUInteger {
            return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
        }

        pub fn superclass(_self: *@This()) objc.Class {
            return objc.msgSend(_self, "superclass", objc.Class, .{});
        }

        pub fn class(_self: *@This()) objc.Class {
            return objc.msgSend(_self, "class", objc.Class, .{});
        }

        pub fn self(_self: *@This()) *@This() {
            return objc.msgSend(_self, "self", *@This(), .{});
        }

        pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
            return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
        }

        pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
            return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
        }

        pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
            return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
        }

        pub fn isProxy(_self: *@This()) objc.BOOL {
            return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
        }

        pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
            return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
        }

        pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
            return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
        }

        pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
            return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
        }

        pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
            return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
        }

        pub fn retainCount(_self: *@This()) objc.NSUInteger {
            return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
        }

        pub fn zone(_self: *@This()) ?*objc._NSZone {
            return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
        }

        pub fn description(_self: *@This()) ?*String {
            return objc.msgSend(_self, "description", ?*String, .{});
        }

        pub fn debugDescription(_self: *@This()) ?*String {
            return objc.msgSend(_self, "debugDescription", ?*String, .{});
        }

        pub fn load() void {
            return objc.msgSend(Internal.class(), "load", void, .{});
        }

        pub fn initialize() void {
            return objc.msgSend(Internal.class(), "initialize", void, .{});
        }

        pub fn init(_self: *@This()) *@This() {
            return objc.msgSend(_self, "init", *@This(), .{});
        }

        pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
            return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
        }

        pub fn dealloc(_self: *@This()) void {
            return objc.msgSend(_self, "dealloc", void, .{});
        }

        pub fn finalize(_self: *@This()) void {
            return objc.msgSend(_self, "finalize", void, .{});
        }

        pub fn copy(_self: *@This()) ?objc.Id {
            return objc.msgSend(_self, "copy", ?objc.Id, .{});
        }

        pub fn mutableCopy(_self: *@This()) ?objc.Id {
            return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
        }

        pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
            return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
        }

        pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
            return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
        }

        pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
            return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
        }

        pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
            return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
        }

        pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
            return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
        }

        pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
            return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
        }

        pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
            return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
        }

        pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
            return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
        }

        pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
            return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
        }

        pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
            return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
        }

        pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
            return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
        }

        pub fn retainWeakReference(_self: *@This()) objc.BOOL {
            return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
        }

        pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
            return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
        }

        pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
            return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
        }

        pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
            return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
        }

        pub fn encodeWithCoder(_self: *@This(), _coder: ?*Coder) void {
            return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
        }

        pub fn initWithCoder(_self: *@This(), _coder: ?*Coder) *@This() {
            return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
        }

        pub fn supportsSecureCoding() objc.BOOL {
            return objc.msgSend(Internal.class(), "supportsSecureCoding", objc.BOOL, .{});
        }

        pub fn countByEnumeratingWithStateObjectsCount(_self: *@This(), _state: ?*FastEnumerationState, _buffer: ?*?objc.Id, _len: objc.NSUInteger) objc.NSUInteger {
            return objc.msgSend(_self, "countByEnumeratingWithState:objects:count:", objc.NSUInteger, .{ _state, _buffer, _len });
        }

        pub fn initWithOptionsCapacity(_self: *@This(), _options: PointerFunctionsOptions, _initialCapacity: objc.NSUInteger) *@This() {
            return objc.msgSend(_self, "initWithOptions:capacity:", *@This(), .{ _options, _initialCapacity });
        }

        pub fn initWithPointerFunctionsCapacity(_self: *@This(), _functions: ?*PointerFunctions, _initialCapacity: objc.NSUInteger) *@This() {
            return objc.msgSend(_self, "initWithPointerFunctions:capacity:", *@This(), .{ _functions, _initialCapacity });
        }

        pub fn hashTableWithOptions(_options: PointerFunctionsOptions) ?*anyopaque {
            return objc.msgSend(Internal.class(), "hashTableWithOptions:", ?*anyopaque, .{_options});
        }

        pub fn hashTableWithWeakObjects() ?objc.Id {
            return objc.msgSend(Internal.class(), "hashTableWithWeakObjects", ?objc.Id, .{});
        }

        pub fn weakObjectsHashTable() ?*anyopaque {
            return objc.msgSend(Internal.class(), "weakObjectsHashTable", ?*anyopaque, .{});
        }

        pub fn member(_self: *@This(), _object: ObjectType) ObjectType {
            return objc.msgSend(_self, "member:", ObjectType, .{_object});
        }

        pub fn objectEnumerator(_self: *@This()) ?*anyopaque {
            return objc.msgSend(_self, "objectEnumerator", ?*anyopaque, .{});
        }

        pub fn addObject(_self: *@This(), _object: ObjectType) void {
            return objc.msgSend(_self, "addObject:", void, .{_object});
        }

        pub fn removeObject(_self: *@This(), _object: ObjectType) void {
            return objc.msgSend(_self, "removeObject:", void, .{_object});
        }

        pub fn removeAllObjects(_self: *@This()) void {
            return objc.msgSend(_self, "removeAllObjects", void, .{});
        }

        pub fn containsObject(_self: *@This(), _anObject: ObjectType) objc.BOOL {
            return objc.msgSend(_self, "containsObject:", objc.BOOL, .{_anObject});
        }

        pub fn intersectsHashTable(_self: *@This(), _other: ?*anyopaque) objc.BOOL {
            return objc.msgSend(_self, "intersectsHashTable:", objc.BOOL, .{_other});
        }

        pub fn isEqualToHashTable(_self: *@This(), _other: ?*anyopaque) objc.BOOL {
            return objc.msgSend(_self, "isEqualToHashTable:", objc.BOOL, .{_other});
        }

        pub fn isSubsetOfHashTable(_self: *@This(), _other: ?*anyopaque) objc.BOOL {
            return objc.msgSend(_self, "isSubsetOfHashTable:", objc.BOOL, .{_other});
        }

        pub fn intersectHashTable(_self: *@This(), _other: ?*anyopaque) void {
            return objc.msgSend(_self, "intersectHashTable:", void, .{_other});
        }

        pub fn unionHashTable(_self: *@This(), _other: ?*anyopaque) void {
            return objc.msgSend(_self, "unionHashTable:", void, .{_other});
        }

        pub fn minusHashTable(_self: *@This(), _other: ?*anyopaque) void {
            return objc.msgSend(_self, "minusHashTable:", void, .{_other});
        }

        pub fn pointerFunctions(_self: *@This()) ?*PointerFunctions {
            return objc.msgSend(_self, "pointerFunctions", ?*PointerFunctions, .{});
        }

        pub fn count(_self: *@This()) objc.NSUInteger {
            return objc.msgSend(_self, "count", objc.NSUInteger, .{});
        }

        pub fn allObjects(_self: *@This()) ?*anyopaque {
            return objc.msgSend(_self, "allObjects", ?*anyopaque, .{});
        }

        pub fn anyObject(_self: *@This()) ObjectType {
            return objc.msgSend(_self, "anyObject", ObjectType, .{});
        }

        pub fn setRepresentation(_self: *@This()) ?*anyopaque {
            return objc.msgSend(_self, "setRepresentation", ?*anyopaque, .{});
        }
    };
}

pub const HashEnumerator = extern struct {
    _pi: objc.NSUInteger,
    _si: objc.NSUInteger,
    _bs: ?*anyopaque,
};

extern "Foundation" fn NSFreeHashTable(table: ?*HashTable) callconv(.C) void;
pub const freeHashTable = NSFreeHashTable;

extern "Foundation" fn NSResetHashTable(table: ?*HashTable) callconv(.C) void;
pub const resetHashTable = NSResetHashTable;

extern "Foundation" fn NSCompareHashTables(table1: ?*HashTable, table2: ?*HashTable) callconv(.C) objc.BOOL;
pub const compareHashTables = NSCompareHashTables;

extern "Foundation" fn NSCopyHashTableWithZone(table: ?*HashTable, zone: ?*Zone) callconv(.C) ?*HashTable;
pub const copyHashTableWithZone = NSCopyHashTableWithZone;

extern "Foundation" fn NSHashGet(table: ?*HashTable, pointer: ?*anyopaque) callconv(.C) ?*anyopaque;
pub const hashGet = NSHashGet;

extern "Foundation" fn NSHashInsert(table: ?*HashTable, pointer: ?*anyopaque) callconv(.C) void;
pub const hashInsert = NSHashInsert;

extern "Foundation" fn NSHashInsertKnownAbsent(table: ?*HashTable, pointer: ?*anyopaque) callconv(.C) void;
pub const hashInsertKnownAbsent = NSHashInsertKnownAbsent;

extern "Foundation" fn NSHashInsertIfAbsent(table: ?*HashTable, pointer: ?*anyopaque) callconv(.C) ?*anyopaque;
pub const hashInsertIfAbsent = NSHashInsertIfAbsent;

extern "Foundation" fn NSHashRemove(table: ?*HashTable, pointer: ?*anyopaque) callconv(.C) void;
pub const hashRemove = NSHashRemove;

extern "Foundation" fn NSEnumerateHashTable(table: ?*HashTable) callconv(.C) HashEnumerator;
pub const enumerateHashTable = NSEnumerateHashTable;

extern "Foundation" fn NSNextHashEnumeratorItem(enumerator: ?*HashEnumerator) callconv(.C) ?*anyopaque;
pub const nextHashEnumeratorItem = NSNextHashEnumeratorItem;

extern "Foundation" fn NSEndHashTableEnumeration(enumerator: ?*HashEnumerator) callconv(.C) void;
pub const endHashTableEnumeration = NSEndHashTableEnumeration;

extern "Foundation" fn NSCountHashTable(table: ?*HashTable) callconv(.C) objc.NSUInteger;
pub const countHashTable = NSCountHashTable;

extern "Foundation" fn NSStringFromHashTable(table: ?*HashTable) callconv(.C) ?*String;
pub const stringFromHashTable = NSStringFromHashTable;

extern "Foundation" fn NSAllHashTableObjects(table: ?*HashTable) callconv(.C) ?*Array;
pub const allHashTableObjects = NSAllHashTableObjects;

pub const HashTableCallBacks = extern struct {
    hash: ?*const fn (?*HashTable, ?*anyopaque) callconv(.C) objc.NSUInteger,
    isEqual: ?*const fn (?*HashTable, ?*anyopaque, ?*anyopaque) callconv(.C) objc.BOOL,
    retain: ?*const fn (?*HashTable, ?*anyopaque) callconv(.C) void,
    release: ?*const fn (?*HashTable, ?*anyopaque) callconv(.C) void,
    describe: ?*const fn (?*HashTable, ?*anyopaque) callconv(.C) ?*String,
};

extern "Foundation" fn NSCreateHashTableWithZone(callBacks: HashTableCallBacks, capacity: objc.NSUInteger, zone: ?*Zone) callconv(.C) ?*HashTable;
pub const createHashTableWithZone = NSCreateHashTableWithZone;

extern "Foundation" fn NSCreateHashTable(callBacks: HashTableCallBacks, capacity: objc.NSUInteger) callconv(.C) ?*HashTable;
pub const createHashTable = NSCreateHashTable;

pub const HTTPCookiePropertyKey = ?*String;

pub const HTTPCookieStringPolicy = ?*String;

/// https://developer.apple.com/documentation/Foundation/NSHTTPCookie?language=objc
pub const HTTPCookie = opaque {
    pub const Internal = objc.ExternClass("NSHTTPCookie", @This(), objc.NSObject, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn initWithProperties(_self: *@This(), _properties: ?*anyopaque) *@This() {
        return objc.msgSend(_self, "initWithProperties:", *@This(), .{_properties});
    }

    pub fn cookieWithProperties(_properties: ?*anyopaque) ?*HTTPCookie {
        return objc.msgSend(Internal.class(), "cookieWithProperties:", ?*HTTPCookie, .{_properties});
    }

    pub fn requestHeaderFieldsWithCookies(_cookies: ?*anyopaque) ?*anyopaque {
        return objc.msgSend(Internal.class(), "requestHeaderFieldsWithCookies:", ?*anyopaque, .{_cookies});
    }

    pub fn cookiesWithResponseHeaderFieldsForURL(_headerFields: ?*anyopaque, _URL: ?*URL) ?*anyopaque {
        return objc.msgSend(Internal.class(), "cookiesWithResponseHeaderFields:forURL:", ?*anyopaque, .{ _headerFields, _URL });
    }

    pub fn properties(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "properties", ?*anyopaque, .{});
    }

    pub fn version(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "version", objc.NSUInteger, .{});
    }

    pub fn name(_self: *@This()) ?*String {
        return objc.msgSend(_self, "name", ?*String, .{});
    }

    pub fn value(_self: *@This()) ?*String {
        return objc.msgSend(_self, "value", ?*String, .{});
    }

    pub fn expiresDate(_self: *@This()) ?*Date {
        return objc.msgSend(_self, "expiresDate", ?*Date, .{});
    }

    pub fn isSessionOnly(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isSessionOnly", objc.BOOL, .{});
    }

    pub fn domain(_self: *@This()) ?*String {
        return objc.msgSend(_self, "domain", ?*String, .{});
    }

    pub fn path(_self: *@This()) ?*String {
        return objc.msgSend(_self, "path", ?*String, .{});
    }

    pub fn isSecure(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isSecure", objc.BOOL, .{});
    }

    pub fn isHTTPOnly(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isHTTPOnly", objc.BOOL, .{});
    }

    pub fn comment(_self: *@This()) ?*String {
        return objc.msgSend(_self, "comment", ?*String, .{});
    }

    pub fn commentURL(_self: *@This()) ?*URL {
        return objc.msgSend(_self, "commentURL", ?*URL, .{});
    }

    pub fn portList(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "portList", ?*anyopaque, .{});
    }

    pub fn sameSitePolicy(_self: *@This()) HTTPCookieStringPolicy {
        return objc.msgSend(_self, "sameSitePolicy", HTTPCookieStringPolicy, .{});
    }
};

pub const HTTPCookieAcceptPolicy = objc.NSUInteger;
pub const HTTPCookieAcceptPolicy_Always: objc.NSUInteger = 0;
pub const HTTPCookieAcceptPolicy_Never: objc.NSUInteger = 1;
pub const HTTPCookieAcceptPolicy_OnlyFromMainDocumentDomain: objc.NSUInteger = 2;

/// https://developer.apple.com/documentation/Foundation/NSHTTPCookieStorage?language=objc
pub const HTTPCookieStorage = opaque {
    pub const Internal = objc.ExternClass("NSHTTPCookieStorage", @This(), objc.NSObject, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn sharedCookieStorageForGroupContainerIdentifier(_identifier: ?*String) ?*HTTPCookieStorage {
        return objc.msgSend(Internal.class(), "sharedCookieStorageForGroupContainerIdentifier:", ?*HTTPCookieStorage, .{_identifier});
    }

    pub fn setCookie(_self: *@This(), _cookie: ?*HTTPCookie) void {
        return objc.msgSend(_self, "setCookie:", void, .{_cookie});
    }

    pub fn deleteCookie(_self: *@This(), _cookie: ?*HTTPCookie) void {
        return objc.msgSend(_self, "deleteCookie:", void, .{_cookie});
    }

    pub fn removeCookiesSinceDate(_self: *@This(), _date: ?*Date) void {
        return objc.msgSend(_self, "removeCookiesSinceDate:", void, .{_date});
    }

    pub fn cookiesForURL(_self: *@This(), _URL: ?*URL) ?*anyopaque {
        return objc.msgSend(_self, "cookiesForURL:", ?*anyopaque, .{_URL});
    }

    pub fn setCookiesForURLMainDocumentURL(_self: *@This(), _cookies: ?*anyopaque, _URL: ?*URL, _mainDocumentURL: ?*URL) void {
        return objc.msgSend(_self, "setCookies:forURL:mainDocumentURL:", void, .{ _cookies, _URL, _mainDocumentURL });
    }

    pub fn sortedCookiesUsingDescriptors(_self: *@This(), _sortOrder: ?*anyopaque) ?*anyopaque {
        return objc.msgSend(_self, "sortedCookiesUsingDescriptors:", ?*anyopaque, .{_sortOrder});
    }

    pub fn sharedHTTPCookieStorage() ?*HTTPCookieStorage {
        return objc.msgSend(Internal.class(), "sharedHTTPCookieStorage", ?*HTTPCookieStorage, .{});
    }

    pub fn cookies(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "cookies", ?*anyopaque, .{});
    }

    pub fn cookieAcceptPolicy(_self: *@This()) HTTPCookieAcceptPolicy {
        return objc.msgSend(_self, "cookieAcceptPolicy", HTTPCookieAcceptPolicy, .{});
    }

    pub fn setCookieAcceptPolicy(_self: *@This(), _cookieAcceptPolicy: HTTPCookieAcceptPolicy) void {
        return objc.msgSend(_self, "setCookieAcceptPolicy:", void, .{_cookieAcceptPolicy});
    }
};

/// https://developer.apple.com/documentation/Foundation/NSIndexPath?language=objc
pub const IndexPath = opaque {
    pub const Internal = objc.ExternClass("NSIndexPath", @This(), objc.NSObject, &.{ Copying, SecureCoding });
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn supportsSecureCoding() objc.BOOL {
        return objc.msgSend(Internal.class(), "supportsSecureCoding", objc.BOOL, .{});
    }

    pub fn indexPathWithIndex(_index: objc.NSUInteger) *@This() {
        return objc.msgSend(Internal.class(), "indexPathWithIndex:", *@This(), .{_index});
    }

    pub fn indexPathWithIndexesLength(_indexes: ?*objc.NSUInteger, _length: objc.NSUInteger) *@This() {
        return objc.msgSend(Internal.class(), "indexPathWithIndexes:length:", *@This(), .{ _indexes, _length });
    }

    pub fn initWithIndexesLength(_self: *@This(), _indexes: ?*objc.NSUInteger, _length: objc.NSUInteger) *@This() {
        return objc.msgSend(_self, "initWithIndexes:length:", *@This(), .{ _indexes, _length });
    }

    pub fn initWithIndex(_self: *@This(), _index: objc.NSUInteger) *@This() {
        return objc.msgSend(_self, "initWithIndex:", *@This(), .{_index});
    }

    pub fn indexPathByAddingIndex(_self: *@This(), _index: objc.NSUInteger) ?*IndexPath {
        return objc.msgSend(_self, "indexPathByAddingIndex:", ?*IndexPath, .{_index});
    }

    pub fn indexPathByRemovingLastIndex(_self: *@This()) ?*IndexPath {
        return objc.msgSend(_self, "indexPathByRemovingLastIndex", ?*IndexPath, .{});
    }

    pub fn indexAtPosition(_self: *@This(), _position: objc.NSUInteger) objc.NSUInteger {
        return objc.msgSend(_self, "indexAtPosition:", objc.NSUInteger, .{_position});
    }

    pub fn getIndexesRange(_self: *@This(), _indexes: ?*objc.NSUInteger, _positionRange: Range) void {
        return objc.msgSend(_self, "getIndexes:range:", void, .{ _indexes, _positionRange });
    }

    pub fn compare(_self: *@This(), _otherObject: ?*IndexPath) ComparisonResult {
        return objc.msgSend(_self, "compare:", ComparisonResult, .{_otherObject});
    }

    pub fn length(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "length", objc.NSUInteger, .{});
    }
};

/// https://developer.apple.com/documentation/Foundation/NSInflectionRule?language=objc
pub const InflectionRule = opaque {
    pub const Internal = objc.ExternClass("NSInflectionRule", @This(), objc.NSObject, &.{ Copying, SecureCoding });
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn supportsSecureCoding() objc.BOOL {
        return objc.msgSend(Internal.class(), "supportsSecureCoding", objc.BOOL, .{});
    }

    pub fn automaticRule() ?*InflectionRule {
        return objc.msgSend(Internal.class(), "automaticRule", ?*InflectionRule, .{});
    }
};

/// https://developer.apple.com/documentation/Foundation/NSInflectionRuleExplicit?language=objc
pub const InflectionRuleExplicit = opaque {
    pub const Internal = objc.ExternClass("NSInflectionRuleExplicit", @This(), InflectionRule, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn supportsSecureCoding() objc.BOOL {
        return objc.msgSend(Internal.class(), "supportsSecureCoding", objc.BOOL, .{});
    }

    pub fn automaticRule() ?*InflectionRule {
        return objc.msgSend(Internal.class(), "automaticRule", ?*InflectionRule, .{});
    }

    pub fn initWithMorphology(_self: *@This(), _morphology: ?*Morphology) *@This() {
        return objc.msgSend(_self, "initWithMorphology:", *@This(), .{_morphology});
    }

    pub fn morphology(_self: *@This()) ?*Morphology {
        return objc.msgSend(_self, "morphology", ?*Morphology, .{});
    }
};

/// https://developer.apple.com/documentation/Foundation/NSInvocation?language=objc
pub const Invocation = opaque {
    pub const Internal = objc.ExternClass("NSInvocation", @This(), objc.NSObject, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn invocationWithMethodSignature(_sig: ?*MethodSignature) ?*Invocation {
        return objc.msgSend(Internal.class(), "invocationWithMethodSignature:", ?*Invocation, .{_sig});
    }

    pub fn retainArguments(_self: *@This()) void {
        return objc.msgSend(_self, "retainArguments", void, .{});
    }

    pub fn getReturnValue(_self: *@This(), _retLoc: ?*anyopaque) void {
        return objc.msgSend(_self, "getReturnValue:", void, .{_retLoc});
    }

    pub fn setReturnValue(_self: *@This(), _retLoc: ?*anyopaque) void {
        return objc.msgSend(_self, "setReturnValue:", void, .{_retLoc});
    }

    pub fn getArgumentAtIndex(_self: *@This(), _argumentLocation: ?*anyopaque, _idx: objc.NSInteger) void {
        return objc.msgSend(_self, "getArgument:atIndex:", void, .{ _argumentLocation, _idx });
    }

    pub fn setArgumentAtIndex(_self: *@This(), _argumentLocation: ?*anyopaque, _idx: objc.NSInteger) void {
        return objc.msgSend(_self, "setArgument:atIndex:", void, .{ _argumentLocation, _idx });
    }

    pub fn invoke(_self: *@This()) void {
        return objc.msgSend(_self, "invoke", void, .{});
    }

    pub fn invokeWithTarget(_self: *@This(), _target: ?objc.Id) void {
        return objc.msgSend(_self, "invokeWithTarget:", void, .{_target});
    }

    pub fn invokeUsingIMP(_self: *@This(), _imp: objc.IMP) void {
        return objc.msgSend(_self, "invokeUsingIMP:", void, .{_imp});
    }

    pub fn methodSignature(_self: *@This()) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignature", ?*MethodSignature, .{});
    }

    pub fn argumentsRetained(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "argumentsRetained", objc.BOOL, .{});
    }

    pub fn target(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "target", ?objc.Id, .{});
    }

    pub fn setTarget(_self: *@This(), _target: ?objc.Id) void {
        return objc.msgSend(_self, "setTarget:", void, .{_target});
    }

    pub fn selector(_self: *@This()) objc.Selector {
        return objc.msgSend(_self, "selector", objc.Selector, .{});
    }

    pub fn setSelector(_self: *@This(), _selector: objc.Selector) void {
        return objc.msgSend(_self, "setSelector:", void, .{_selector});
    }
};

pub const JSONReadingOptions = objc.NSUInteger;
pub const JSONReadingOptions_MutableContainers: objc.NSUInteger = 1;
pub const JSONReadingOptions_MutableLeaves: objc.NSUInteger = 2;
pub const JSONReadingOptions_FragmentsAllowed: objc.NSUInteger = 4;
pub const JSONReadingOptions_JSON5Allowed: objc.NSUInteger = 8;
pub const JSONReadingOptions_TopLevelDictionaryAssumed: objc.NSUInteger = 16;
pub const JSONReadingOptions_AllowFragments: objc.NSUInteger = 4;

pub const JSONWritingOptions = objc.NSUInteger;
pub const JSONWritingOptions_PrettyPrinted: objc.NSUInteger = 1;
pub const JSONWritingOptions_SortedKeys: objc.NSUInteger = 2;
pub const JSONWritingOptions_FragmentsAllowed: objc.NSUInteger = 4;
pub const JSONWritingOptions_WithoutEscapingSlashes: objc.NSUInteger = 8;

/// https://developer.apple.com/documentation/Foundation/NSJSONSerialization?language=objc
pub const JSONSerialization = opaque {
    pub const Internal = objc.ExternClass("NSJSONSerialization", @This(), objc.NSObject, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn isValidJSONObject(_obj: ?objc.Id) objc.BOOL {
        return objc.msgSend(Internal.class(), "isValidJSONObject:", objc.BOOL, .{_obj});
    }

    pub fn dataWithJSONObjectOptionsError(_obj: ?objc.Id, _opt: JSONWritingOptions, _error: ?*?*Error) ?*Data {
        return objc.msgSend(Internal.class(), "dataWithJSONObject:options:error:", ?*Data, .{ _obj, _opt, _error });
    }

    pub fn jsonObjectWithDataOptionsError(_data: ?*Data, _opt: JSONReadingOptions, _error: ?*?*Error) ?objc.Id {
        return objc.msgSend(Internal.class(), "JSONObjectWithData:options:error:", ?objc.Id, .{ _data, _opt, _error });
    }

    pub fn writeJSONObjectToStreamOptionsError(
        _obj: ?objc.Id,
        _stream: ?*OutputStream,
        _opt: JSONWritingOptions,
        _error: ?*?*Error,
    ) objc.NSInteger {
        return objc.msgSend(Internal.class(), "writeJSONObject:toStream:options:error:", objc.NSInteger, .{
            _obj,
            _stream,
            _opt,
            _error,
        });
    }

    pub fn jsonObjectWithStreamOptionsError(_stream: ?*InputStream, _opt: JSONReadingOptions, _error: ?*?*Error) ?objc.Id {
        return objc.msgSend(Internal.class(), "JSONObjectWithStream:options:error:", ?objc.Id, .{ _stream, _opt, _error });
    }
};

/// https://developer.apple.com/documentation/Foundation/NSOrderedSet?language=objc
pub fn OrderedSet(comptime ObjectType: type) type {
    const unused0 = ObjectType;
    _ = unused0; // Prevent unused parameter warning!!!
    return struct {
        pub const Internal = objc.ExternClass("NSOrderedSet", @This(), objc.NSObject, &.{ Copying, MutableCopying, SecureCoding, FastEnumeration });
        pub const as = Internal.as;
        pub const retain = Internal.retain;
        pub const release = Internal.release;
        pub const autorelease = Internal.autorelease;
        pub const new = Internal.new;
        pub const alloc = Internal.alloc;

        pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
            return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
        }

        pub fn hash(_self: *@This()) objc.NSUInteger {
            return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
        }

        pub fn superclass(_self: *@This()) objc.Class {
            return objc.msgSend(_self, "superclass", objc.Class, .{});
        }

        pub fn class(_self: *@This()) objc.Class {
            return objc.msgSend(_self, "class", objc.Class, .{});
        }

        pub fn self(_self: *@This()) *@This() {
            return objc.msgSend(_self, "self", *@This(), .{});
        }

        pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
            return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
        }

        pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
            return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
        }

        pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
            return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
        }

        pub fn isProxy(_self: *@This()) objc.BOOL {
            return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
        }

        pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
            return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
        }

        pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
            return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
        }

        pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
            return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
        }

        pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
            return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
        }

        pub fn retainCount(_self: *@This()) objc.NSUInteger {
            return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
        }

        pub fn zone(_self: *@This()) ?*objc._NSZone {
            return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
        }

        pub fn description(_self: *@This()) ?*String {
            return objc.msgSend(_self, "description", ?*String, .{});
        }

        pub fn debugDescription(_self: *@This()) ?*String {
            return objc.msgSend(_self, "debugDescription", ?*String, .{});
        }

        pub fn load() void {
            return objc.msgSend(Internal.class(), "load", void, .{});
        }

        pub fn initialize() void {
            return objc.msgSend(Internal.class(), "initialize", void, .{});
        }

        pub fn init(_self: *@This()) *@This() {
            return objc.msgSend(_self, "init", *@This(), .{});
        }

        pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
            return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
        }

        pub fn dealloc(_self: *@This()) void {
            return objc.msgSend(_self, "dealloc", void, .{});
        }

        pub fn finalize(_self: *@This()) void {
            return objc.msgSend(_self, "finalize", void, .{});
        }

        pub fn copy(_self: *@This()) ?objc.Id {
            return objc.msgSend(_self, "copy", ?objc.Id, .{});
        }

        pub fn mutableCopy(_self: *@This()) ?objc.Id {
            return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
        }

        pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
            return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
        }

        pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
            return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
        }

        pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
            return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
        }

        pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
            return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
        }

        pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
            return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
        }

        pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
            return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
        }

        pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
            return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
        }

        pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
            return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
        }

        pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
            return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
        }

        pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
            return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
        }

        pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
            return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
        }

        pub fn retainWeakReference(_self: *@This()) objc.BOOL {
            return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
        }

        pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
            return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
        }

        pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
            return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
        }

        pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
            return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
        }

        pub fn encodeWithCoder(_self: *@This(), _coder: ?*Coder) void {
            return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
        }

        pub fn initWithCoder(_self: *@This(), _coder: ?*Coder) *@This() {
            return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
        }

        pub fn supportsSecureCoding() objc.BOOL {
            return objc.msgSend(Internal.class(), "supportsSecureCoding", objc.BOOL, .{});
        }

        pub fn countByEnumeratingWithStateObjectsCount(_self: *@This(), _state: ?*FastEnumerationState, _buffer: ?*?objc.Id, _len: objc.NSUInteger) objc.NSUInteger {
            return objc.msgSend(_self, "countByEnumeratingWithState:objects:count:", objc.NSUInteger, .{ _state, _buffer, _len });
        }

        pub fn objectAtIndex(_self: *@This(), _idx: objc.NSUInteger) ObjectType {
            return objc.msgSend(_self, "objectAtIndex:", ObjectType, .{_idx});
        }

        pub fn indexOfObject(_self: *@This(), _object: ObjectType) objc.NSUInteger {
            return objc.msgSend(_self, "indexOfObject:", objc.NSUInteger, .{_object});
        }

        pub fn initWithObjectsCount(_self: *@This(), _objects: ?*ObjectType, _cnt: objc.NSUInteger) *@This() {
            return objc.msgSend(_self, "initWithObjects:count:", *@This(), .{ _objects, _cnt });
        }

        pub fn count(_self: *@This()) objc.NSUInteger {
            return objc.msgSend(_self, "count", objc.NSUInteger, .{});
        }
    };
}

/// https://developer.apple.com/documentation/Foundation/NSMutableOrderedSet?language=objc
pub fn MutableOrderedSet(comptime ObjectType: type) type {
    const unused0 = ObjectType;
    _ = unused0; // Prevent unused parameter warning!!!
    return struct {
        pub const Internal = objc.ExternClass("NSMutableOrderedSet", @This(), OrderedSet, &.{});
        pub const as = Internal.as;
        pub const retain = Internal.retain;
        pub const release = Internal.release;
        pub const autorelease = Internal.autorelease;
        pub const new = Internal.new;
        pub const alloc = Internal.alloc;

        pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
            return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
        }

        pub fn hash(_self: *@This()) objc.NSUInteger {
            return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
        }

        pub fn superclass(_self: *@This()) objc.Class {
            return objc.msgSend(_self, "superclass", objc.Class, .{});
        }

        pub fn class(_self: *@This()) objc.Class {
            return objc.msgSend(_self, "class", objc.Class, .{});
        }

        pub fn self(_self: *@This()) *@This() {
            return objc.msgSend(_self, "self", *@This(), .{});
        }

        pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
            return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
        }

        pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
            return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
        }

        pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
            return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
        }

        pub fn isProxy(_self: *@This()) objc.BOOL {
            return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
        }

        pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
            return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
        }

        pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
            return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
        }

        pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
            return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
        }

        pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
            return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
        }

        pub fn retainCount(_self: *@This()) objc.NSUInteger {
            return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
        }

        pub fn zone(_self: *@This()) ?*objc._NSZone {
            return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
        }

        pub fn description(_self: *@This()) ?*String {
            return objc.msgSend(_self, "description", ?*String, .{});
        }

        pub fn debugDescription(_self: *@This()) ?*String {
            return objc.msgSend(_self, "debugDescription", ?*String, .{});
        }

        pub fn load() void {
            return objc.msgSend(Internal.class(), "load", void, .{});
        }

        pub fn initialize() void {
            return objc.msgSend(Internal.class(), "initialize", void, .{});
        }

        pub fn init(_self: *@This()) *@This() {
            return objc.msgSend(_self, "init", *@This(), .{});
        }

        pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
            return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
        }

        pub fn dealloc(_self: *@This()) void {
            return objc.msgSend(_self, "dealloc", void, .{});
        }

        pub fn finalize(_self: *@This()) void {
            return objc.msgSend(_self, "finalize", void, .{});
        }

        pub fn copy(_self: *@This()) ?objc.Id {
            return objc.msgSend(_self, "copy", ?objc.Id, .{});
        }

        pub fn mutableCopy(_self: *@This()) ?objc.Id {
            return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
        }

        pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
            return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
        }

        pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
            return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
        }

        pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
            return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
        }

        pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
            return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
        }

        pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
            return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
        }

        pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
            return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
        }

        pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
            return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
        }

        pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
            return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
        }

        pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
            return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
        }

        pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
            return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
        }

        pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
            return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
        }

        pub fn retainWeakReference(_self: *@This()) objc.BOOL {
            return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
        }

        pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
            return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
        }

        pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
            return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
        }

        pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
            return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
        }

        pub fn encodeWithCoder(_self: *@This(), _coder: ?*Coder) void {
            return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
        }

        pub fn initWithCoder(_self: *@This(), _coder: ?*Coder) *@This() {
            return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
        }

        pub fn supportsSecureCoding() objc.BOOL {
            return objc.msgSend(Internal.class(), "supportsSecureCoding", objc.BOOL, .{});
        }

        pub fn countByEnumeratingWithStateObjectsCount(_self: *@This(), _state: ?*FastEnumerationState, _buffer: ?*?objc.Id, _len: objc.NSUInteger) objc.NSUInteger {
            return objc.msgSend(_self, "countByEnumeratingWithState:objects:count:", objc.NSUInteger, .{ _state, _buffer, _len });
        }

        pub fn objectAtIndex(_self: *@This(), _idx: objc.NSUInteger) ObjectType {
            return objc.msgSend(_self, "objectAtIndex:", ObjectType, .{_idx});
        }

        pub fn indexOfObject(_self: *@This(), _object: ObjectType) objc.NSUInteger {
            return objc.msgSend(_self, "indexOfObject:", objc.NSUInteger, .{_object});
        }

        pub fn initWithObjectsCount(_self: *@This(), _objects: ?*ObjectType, _cnt: objc.NSUInteger) *@This() {
            return objc.msgSend(_self, "initWithObjects:count:", *@This(), .{ _objects, _cnt });
        }

        pub fn count(_self: *@This()) objc.NSUInteger {
            return objc.msgSend(_self, "count", objc.NSUInteger, .{});
        }

        pub fn insertObjectAtIndex(_self: *@This(), _object: ObjectType, _idx: objc.NSUInteger) void {
            return objc.msgSend(_self, "insertObject:atIndex:", void, .{ _object, _idx });
        }

        pub fn removeObjectAtIndex(_self: *@This(), _idx: objc.NSUInteger) void {
            return objc.msgSend(_self, "removeObjectAtIndex:", void, .{_idx});
        }

        pub fn replaceObjectAtIndexWithObject(_self: *@This(), _idx: objc.NSUInteger, _object: ObjectType) void {
            return objc.msgSend(_self, "replaceObjectAtIndex:withObject:", void, .{ _idx, _object });
        }

        pub fn initWithCapacity(_self: *@This(), _numItems: objc.NSUInteger) *@This() {
            return objc.msgSend(_self, "initWithCapacity:", *@This(), .{_numItems});
        }
    };
}

pub const KeyValueOperator = ?*String;

pub const KeyValueObservingOptions = objc.NSUInteger;
pub const KeyValueObservingOptions_New: objc.NSUInteger = 1;
pub const KeyValueObservingOptions_Old: objc.NSUInteger = 2;
pub const KeyValueObservingOptions_Initial: objc.NSUInteger = 4;
pub const KeyValueObservingOptions_Prior: objc.NSUInteger = 8;

pub const KeyValueChange = objc.NSUInteger;
pub const KeyValueChange_Setting: objc.NSUInteger = 1;
pub const KeyValueChange_Insertion: objc.NSUInteger = 2;
pub const KeyValueChange_Removal: objc.NSUInteger = 3;
pub const KeyValueChange_Replacement: objc.NSUInteger = 4;

pub const KeyValueSetMutationKind = objc.NSUInteger;
pub const KeyValueSetMutationKind_UnionSetMutation: objc.NSUInteger = 1;
pub const KeyValueSetMutationKind_MinusSetMutation: objc.NSUInteger = 2;
pub const KeyValueSetMutationKind_IntersectSetMutation: objc.NSUInteger = 3;
pub const KeyValueSetMutationKind_SetMutation: objc.NSUInteger = 4;

pub const KeyValueChangeKey = ?*String;

/// https://developer.apple.com/documentation/Foundation/NSKeyValueSharedObserversSnapshot?language=objc
pub const KeyValueSharedObserversSnapshot = opaque {
    pub const Internal = objc.ExternClass("NSKeyValueSharedObserversSnapshot", @This(), objc.NSObject, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }
};

/// https://developer.apple.com/documentation/Foundation/NSKeyValueSharedObservers?language=objc
pub const KeyValueSharedObservers = opaque {
    pub const Internal = objc.ExternClass("NSKeyValueSharedObservers", @This(), objc.NSObject, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn initWithObservableClass(_self: *@This(), _observableClass: objc.Class) ?objc.Id {
        return objc.msgSend(_self, "initWithObservableClass:", ?objc.Id, .{_observableClass});
    }

    pub fn addSharedObserverForKeyOptionsContext(
        _self: *@This(),
        _observer: ?*objc.NSObject,
        _key: ?*String,
        _options: KeyValueObservingOptions,
        _context: ?*anyopaque,
    ) void {
        return objc.msgSend(_self, "addSharedObserver:forKey:options:context:", void, .{
            _observer,
            _key,
            _options,
            _context,
        });
    }

    pub fn addObserverForKeyPathOptionsContext(
        _self: *@This(),
        _observer: ?*objc.NSObject,
        _keyPath: ?*String,
        _options: KeyValueObservingOptions,
        _context: ?*anyopaque,
    ) void {
        return objc.msgSend(_self, "addObserver:forKeyPath:options:context:", void, .{
            _observer,
            _keyPath,
            _options,
            _context,
        });
    }

    pub fn snapshot(_self: *@This()) ?*KeyValueSharedObserversSnapshot {
        return objc.msgSend(_self, "snapshot", ?*KeyValueSharedObserversSnapshot, .{});
    }
};

pub const PropertyListMutabilityOptions = objc.NSUInteger;
pub const PropertyListMutabilityOptions_Immutable: objc.NSUInteger = 0;
pub const PropertyListMutabilityOptions_MutableContainers: objc.NSUInteger = 1;
pub const PropertyListMutabilityOptions_MutableContainersAndLeaves: objc.NSUInteger = 2;

pub const PropertyListFormat = objc.NSUInteger;
pub const PropertyListFormat_OpenStepFormat: objc.NSUInteger = 1;
pub const PropertyListFormat_XMLFormat_v1_0: objc.NSUInteger = 100;
pub const PropertyListFormat_BinaryFormat_v1_0: objc.NSUInteger = 200;

pub const PropertyListReadOptions = PropertyListMutabilityOptions;

pub const PropertyListWriteOptions = objc.NSUInteger;

/// https://developer.apple.com/documentation/Foundation/NSPropertyListSerialization?language=objc
pub const PropertyListSerialization = opaque {
    pub const Internal = objc.ExternClass("NSPropertyListSerialization", @This(), objc.NSObject, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn propertyListIsValidForFormat(_plist: ?objc.Id, _format: PropertyListFormat) objc.BOOL {
        return objc.msgSend(Internal.class(), "propertyList:isValidForFormat:", objc.BOOL, .{ _plist, _format });
    }

    pub fn dataWithPropertyListFormatOptionsError(
        _plist: ?objc.Id,
        _format: PropertyListFormat,
        _opt: PropertyListWriteOptions,
        _error: ?*?*Error,
    ) ?*Data {
        return objc.msgSend(Internal.class(), "dataWithPropertyList:format:options:error:", ?*Data, .{
            _plist,
            _format,
            _opt,
            _error,
        });
    }

    pub fn writePropertyListToStreamFormatOptionsError(
        _plist: ?objc.Id,
        _stream: ?*OutputStream,
        _format: PropertyListFormat,
        _opt: PropertyListWriteOptions,
        _error: ?*?*Error,
    ) objc.NSInteger {
        return objc.msgSend(Internal.class(), "writePropertyList:toStream:format:options:error:", objc.NSInteger, .{
            _plist,
            _stream,
            _format,
            _opt,
            _error,
        });
    }

    pub fn propertyListWithDataOptionsFormatError(
        _data: ?*Data,
        _opt: PropertyListReadOptions,
        _format: ?*PropertyListFormat,
        _error: ?*?*Error,
    ) ?objc.Id {
        return objc.msgSend(Internal.class(), "propertyListWithData:options:format:error:", ?objc.Id, .{
            _data,
            _opt,
            _format,
            _error,
        });
    }

    pub fn propertyListWithStreamOptionsFormatError(
        _stream: ?*InputStream,
        _opt: PropertyListReadOptions,
        _format: ?*PropertyListFormat,
        _error: ?*?*Error,
    ) ?objc.Id {
        return objc.msgSend(Internal.class(), "propertyListWithStream:options:format:error:", ?objc.Id, .{
            _stream,
            _opt,
            _format,
            _error,
        });
    }

    pub fn dataFromPropertyListFormatErrorDescription(_plist: ?objc.Id, _format: PropertyListFormat, _errorString: ?*?*String) ?*Data {
        return objc.msgSend(Internal.class(), "dataFromPropertyList:format:errorDescription:", ?*Data, .{ _plist, _format, _errorString });
    }

    pub fn propertyListFromDataMutabilityOptionFormatErrorDescription(
        _data: ?*Data,
        _opt: PropertyListMutabilityOptions,
        _format: ?*PropertyListFormat,
        _errorString: ?*?*String,
    ) ?objc.Id {
        return objc.msgSend(Internal.class(), "propertyListFromData:mutabilityOption:format:errorDescription:", ?objc.Id, .{
            _data,
            _opt,
            _format,
            _errorString,
        });
    }
};

pub const Point = core_foundation.CGPoint;

pub const PointPointer = Point;

pub const PointArray = Point;

pub const Size = core_foundation.CGSize;

pub const SizePointer = Size;

pub const SizeArray = Size;

pub const Rect = core_foundation.CGRect;

pub const RectPointer = Rect;

pub const RectArray = Rect;

pub const RectEdge = objc.NSUInteger;
pub const RectEdge_MinX: objc.NSUInteger = 0;
pub const RectEdge_MinY: objc.NSUInteger = 1;
pub const RectEdge_MaxX: objc.NSUInteger = 2;
pub const RectEdge_MaxY: objc.NSUInteger = 3;
pub const RectEdge_MinXEdge: objc.NSUInteger = 0;
pub const RectEdge_MinYEdge: objc.NSUInteger = 1;
pub const RectEdge_MaxXEdge: objc.NSUInteger = 2;
pub const RectEdge_MaxYEdge: objc.NSUInteger = 3;

pub const EdgeInsets = extern struct {
    top: core_foundation.CGFloat,
    left: core_foundation.CGFloat,
    bottom: core_foundation.CGFloat,
    right: core_foundation.CGFloat,
};

pub const AlignmentOptions = u64;
pub const AlignmentOptions_MinXInward: u64 = 1;
pub const AlignmentOptions_MinYInward: u64 = 2;
pub const AlignmentOptions_MaxXInward: u64 = 4;
pub const AlignmentOptions_MaxYInward: u64 = 8;
pub const AlignmentOptions_WidthInward: u64 = 16;
pub const AlignmentOptions_HeightInward: u64 = 32;
pub const AlignmentOptions_MinXOutward: u64 = 256;
pub const AlignmentOptions_MinYOutward: u64 = 512;
pub const AlignmentOptions_MaxXOutward: u64 = 1024;
pub const AlignmentOptions_MaxYOutward: u64 = 2048;
pub const AlignmentOptions_WidthOutward: u64 = 4096;
pub const AlignmentOptions_HeightOutward: u64 = 8192;
pub const AlignmentOptions_MinXNearest: u64 = 65536;
pub const AlignmentOptions_MinYNearest: u64 = 131072;
pub const AlignmentOptions_MaxXNearest: u64 = 262144;
pub const AlignmentOptions_MaxYNearest: u64 = 524288;
pub const AlignmentOptions_WidthNearest: u64 = 1048576;
pub const AlignmentOptions_HeightNearest: u64 = 2097152;
pub const AlignmentOptions_RectFlipped: u64 = -9223372036854775808;
pub const AlignmentOptions_AllEdgesInward: u64 = 15;
pub const AlignmentOptions_AllEdgesOutward: u64 = 3840;
pub const AlignmentOptions_AllEdgesNearest: u64 = 983040;

extern "Foundation" fn NSEqualPoints(aPoint: Point, bPoint: Point) callconv(.C) objc.BOOL;
pub const equalPoints = NSEqualPoints;

extern "Foundation" fn NSEqualSizes(aSize: Size, bSize: Size) callconv(.C) objc.BOOL;
pub const equalSizes = NSEqualSizes;

extern "Foundation" fn NSEqualRects(aRect: Rect, bRect: Rect) callconv(.C) objc.BOOL;
pub const equalRects = NSEqualRects;

extern "Foundation" fn NSIsEmptyRect(aRect: Rect) callconv(.C) objc.BOOL;
pub const isEmptyRect = NSIsEmptyRect;

extern "Foundation" fn NSEdgeInsetsEqual(aInsets: EdgeInsets, bInsets: EdgeInsets) callconv(.C) objc.BOOL;
pub const edgeInsetsEqual = NSEdgeInsetsEqual;

extern "Foundation" fn NSInsetRect(aRect: Rect, dX: core_foundation.CGFloat, dY: core_foundation.CGFloat) callconv(.C) Rect;
pub const insetRect = NSInsetRect;

extern "Foundation" fn NSIntegralRect(aRect: Rect) callconv(.C) Rect;
pub const integralRect = NSIntegralRect;

extern "Foundation" fn NSIntegralRectWithOptions(aRect: Rect, opts: AlignmentOptions) callconv(.C) Rect;
pub const integralRectWithOptions = NSIntegralRectWithOptions;

extern "Foundation" fn NSUnionRect(aRect: Rect, bRect: Rect) callconv(.C) Rect;
pub const unionRect = NSUnionRect;

extern "Foundation" fn NSIntersectionRect(aRect: Rect, bRect: Rect) callconv(.C) Rect;
pub const intersectionRect = NSIntersectionRect;

extern "Foundation" fn NSOffsetRect(aRect: Rect, dX: core_foundation.CGFloat, dY: core_foundation.CGFloat) callconv(.C) Rect;
pub const offsetRect = NSOffsetRect;

extern "Foundation" fn NSDivideRect(
    inRect: Rect,
    slice: ?*Rect,
    rem: ?*Rect,
    amount: core_foundation.CGFloat,
    edge: RectEdge,
) callconv(.C) void;
pub const divideRect = NSDivideRect;

extern "Foundation" fn NSPointInRect(aPoint: Point, aRect: Rect) callconv(.C) objc.BOOL;
pub const pointInRect = NSPointInRect;

extern "Foundation" fn NSMouseInRect(aPoint: Point, aRect: Rect, flipped: objc.BOOL) callconv(.C) objc.BOOL;
pub const mouseInRect = NSMouseInRect;

extern "Foundation" fn NSContainsRect(aRect: Rect, bRect: Rect) callconv(.C) objc.BOOL;
pub const containsRect = NSContainsRect;

extern "Foundation" fn NSIntersectsRect(aRect: Rect, bRect: Rect) callconv(.C) objc.BOOL;
pub const intersectsRect = NSIntersectsRect;

extern "Foundation" fn NSStringFromPoint(aPoint: Point) callconv(.C) ?*String;
pub const stringFromPoint = NSStringFromPoint;

extern "Foundation" fn NSStringFromSize(aSize: Size) callconv(.C) ?*String;
pub const stringFromSize = NSStringFromSize;

extern "Foundation" fn NSStringFromRect(aRect: Rect) callconv(.C) ?*String;
pub const stringFromRect = NSStringFromRect;

extern "Foundation" fn NSPointFromString(aString: ?*String) callconv(.C) Point;
pub const pointFromString = NSPointFromString;

extern "Foundation" fn NSSizeFromString(aString: ?*String) callconv(.C) Size;
pub const sizeFromString = NSSizeFromString;

extern "Foundation" fn NSRectFromString(aString: ?*String) callconv(.C) Rect;
pub const rectFromString = NSRectFromString;

/// https://developer.apple.com/documentation/Foundation/NSKeyedArchiver?language=objc
pub const KeyedArchiver = opaque {
    pub const Internal = objc.ExternClass("NSKeyedArchiver", @This(), Coder, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn encodeValueOfObjCTypeAt(_self: *@This(), _type: ?*i8, _addr: ?*anyopaque) void {
        return objc.msgSend(_self, "encodeValueOfObjCType:at:", void, .{ _type, _addr });
    }

    pub fn encodeDataObject(_self: *@This(), _data: ?*Data) void {
        return objc.msgSend(_self, "encodeDataObject:", void, .{_data});
    }

    pub fn decodeDataObject(_self: *@This()) ?*Data {
        return objc.msgSend(_self, "decodeDataObject", ?*Data, .{});
    }

    pub fn decodeValueOfObjCTypeAtSize(_self: *@This(), _type: ?*i8, _data: ?*anyopaque, _size: objc.NSUInteger) void {
        return objc.msgSend(_self, "decodeValueOfObjCType:at:size:", void, .{ _type, _data, _size });
    }

    pub fn versionForClassName(_self: *@This(), _className: ?*String) objc.NSInteger {
        return objc.msgSend(_self, "versionForClassName:", objc.NSInteger, .{_className});
    }

    pub fn initRequiringSecureCoding(_self: *@This(), _requiresSecureCoding: objc.BOOL) *@This() {
        return objc.msgSend(_self, "initRequiringSecureCoding:", *@This(), .{_requiresSecureCoding});
    }

    pub fn archivedDataWithRootObjectRequiringSecureCodingError(_object: ?objc.Id, _requiresSecureCoding: objc.BOOL, _error: ?*?*Error) ?*Data {
        return objc.msgSend(Internal.class(), "archivedDataWithRootObject:requiringSecureCoding:error:", ?*Data, .{ _object, _requiresSecureCoding, _error });
    }

    pub fn initForWritingWithMutableData(_self: *@This(), _data: ?*MutableData) *@This() {
        return objc.msgSend(_self, "initForWritingWithMutableData:", *@This(), .{_data});
    }

    pub fn archivedDataWithRootObject(_rootObject: ?objc.Id) ?*Data {
        return objc.msgSend(Internal.class(), "archivedDataWithRootObject:", ?*Data, .{_rootObject});
    }

    pub fn archiveRootObjectToFile(_rootObject: ?objc.Id, _path: ?*String) objc.BOOL {
        return objc.msgSend(Internal.class(), "archiveRootObject:toFile:", objc.BOOL, .{ _rootObject, _path });
    }

    pub fn finishEncoding(_self: *@This()) void {
        return objc.msgSend(_self, "finishEncoding", void, .{});
    }

    pub fn setClassNameForClass(_codedName: ?*String, _cls: objc.Class) void {
        return objc.msgSend(Internal.class(), "setClassName:forClass:", void, .{ _codedName, _cls });
    }

    pub fn classNameForClass(_cls: objc.Class) ?*String {
        return objc.msgSend(Internal.class(), "classNameForClass:", ?*String, .{_cls});
    }

    pub fn encodeObjectForKey(_self: *@This(), _object: ?objc.Id, _key: ?*String) void {
        return objc.msgSend(_self, "encodeObject:forKey:", void, .{ _object, _key });
    }

    pub fn encodeConditionalObjectForKey(_self: *@This(), _object: ?objc.Id, _key: ?*String) void {
        return objc.msgSend(_self, "encodeConditionalObject:forKey:", void, .{ _object, _key });
    }

    pub fn encodeBoolForKey(_self: *@This(), _value: objc.BOOL, _key: ?*String) void {
        return objc.msgSend(_self, "encodeBool:forKey:", void, .{ _value, _key });
    }

    pub fn encodeIntForKey(_self: *@This(), _value: i32, _key: ?*String) void {
        return objc.msgSend(_self, "encodeInt:forKey:", void, .{ _value, _key });
    }

    pub fn encodeInt32ForKey(_self: *@This(), _value: objc.int32_t, _key: ?*String) void {
        return objc.msgSend(_self, "encodeInt32:forKey:", void, .{ _value, _key });
    }

    pub fn encodeInt64ForKey(_self: *@This(), _value: objc.int64_t, _key: ?*String) void {
        return objc.msgSend(_self, "encodeInt64:forKey:", void, .{ _value, _key });
    }

    pub fn encodeFloatForKey(_self: *@This(), _value: f32, _key: ?*String) void {
        return objc.msgSend(_self, "encodeFloat:forKey:", void, .{ _value, _key });
    }

    pub fn encodeDoubleForKey(_self: *@This(), _value: f64, _key: ?*String) void {
        return objc.msgSend(_self, "encodeDouble:forKey:", void, .{ _value, _key });
    }

    pub fn encodeBytesLengthForKey(_self: *@This(), _bytes: ?*objc.uint8_t, _length: objc.NSUInteger, _key: ?*String) void {
        return objc.msgSend(_self, "encodeBytes:length:forKey:", void, .{ _bytes, _length, _key });
    }

    pub fn delegate(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "delegate", ?*anyopaque, .{});
    }

    pub fn setDelegate(_self: *@This(), _delegate: ?*anyopaque) void {
        return objc.msgSend(_self, "setDelegate:", void, .{_delegate});
    }

    pub fn outputFormat(_self: *@This()) PropertyListFormat {
        return objc.msgSend(_self, "outputFormat", PropertyListFormat, .{});
    }

    pub fn setOutputFormat(_self: *@This(), _outputFormat: PropertyListFormat) void {
        return objc.msgSend(_self, "setOutputFormat:", void, .{_outputFormat});
    }

    pub fn encodedData(_self: *@This()) ?*Data {
        return objc.msgSend(_self, "encodedData", ?*Data, .{});
    }

    pub fn requiresSecureCoding(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "requiresSecureCoding", objc.BOOL, .{});
    }

    pub fn setRequiresSecureCoding(_self: *@This(), _requiresSecureCoding: objc.BOOL) void {
        return objc.msgSend(_self, "setRequiresSecureCoding:", void, .{_requiresSecureCoding});
    }
};

/// https://developer.apple.com/documentation/Foundation/NSKeyedUnarchiver?language=objc
pub const KeyedUnarchiver = opaque {
    pub const Internal = objc.ExternClass("NSKeyedUnarchiver", @This(), Coder, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn encodeValueOfObjCTypeAt(_self: *@This(), _type: ?*i8, _addr: ?*anyopaque) void {
        return objc.msgSend(_self, "encodeValueOfObjCType:at:", void, .{ _type, _addr });
    }

    pub fn encodeDataObject(_self: *@This(), _data: ?*Data) void {
        return objc.msgSend(_self, "encodeDataObject:", void, .{_data});
    }

    pub fn decodeDataObject(_self: *@This()) ?*Data {
        return objc.msgSend(_self, "decodeDataObject", ?*Data, .{});
    }

    pub fn decodeValueOfObjCTypeAtSize(_self: *@This(), _type: ?*i8, _data: ?*anyopaque, _size: objc.NSUInteger) void {
        return objc.msgSend(_self, "decodeValueOfObjCType:at:size:", void, .{ _type, _data, _size });
    }

    pub fn versionForClassName(_self: *@This(), _className: ?*String) objc.NSInteger {
        return objc.msgSend(_self, "versionForClassName:", objc.NSInteger, .{_className});
    }

    pub fn initForReadingFromDataError(_self: *@This(), _data: ?*Data, _error: ?*?*Error) *@This() {
        return objc.msgSend(_self, "initForReadingFromData:error:", *@This(), .{ _data, _error });
    }

    pub fn unarchivedObjectOfClassFromDataError(_cls: objc.Class, _data: ?*Data, _error: ?*?*Error) ?objc.Id {
        return objc.msgSend(Internal.class(), "unarchivedObjectOfClass:fromData:error:", ?objc.Id, .{ _cls, _data, _error });
    }

    pub fn unarchivedArrayOfObjectsOfClassFromDataError(_cls: objc.Class, _data: ?*Data, _error: ?*?*Error) ?*Array {
        return objc.msgSend(Internal.class(), "unarchivedArrayOfObjectsOfClass:fromData:error:", ?*Array, .{ _cls, _data, _error });
    }

    pub fn unarchivedDictionaryWithKeysOfClassObjectsOfClassFromDataError(
        _keyCls: objc.Class,
        _valueCls: objc.Class,
        _data: ?*Data,
        _error: ?*?*Error,
    ) ?*Dictionary {
        return objc.msgSend(Internal.class(), "unarchivedDictionaryWithKeysOfClass:objectsOfClass:fromData:error:", ?*Dictionary, .{
            _keyCls,
            _valueCls,
            _data,
            _error,
        });
    }

    pub fn unarchivedObjectOfClassesFromDataError(_classes: ?*anyopaque, _data: ?*Data, _error: ?*?*Error) ?objc.Id {
        return objc.msgSend(Internal.class(), "unarchivedObjectOfClasses:fromData:error:", ?objc.Id, .{ _classes, _data, _error });
    }

    pub fn unarchivedArrayOfObjectsOfClassesFromDataError(_classes: ?*anyopaque, _data: ?*Data, _error: ?*?*Error) ?*Array {
        return objc.msgSend(Internal.class(), "unarchivedArrayOfObjectsOfClasses:fromData:error:", ?*Array, .{ _classes, _data, _error });
    }

    pub fn unarchivedDictionaryWithKeysOfClassesObjectsOfClassesFromDataError(
        _keyClasses: ?*anyopaque,
        _valueClasses: ?*anyopaque,
        _data: ?*Data,
        _error: ?*?*Error,
    ) ?*Dictionary {
        return objc.msgSend(Internal.class(), "unarchivedDictionaryWithKeysOfClasses:objectsOfClasses:fromData:error:", ?*Dictionary, .{
            _keyClasses,
            _valueClasses,
            _data,
            _error,
        });
    }

    pub fn initForReadingWithData(_self: *@This(), _data: ?*Data) *@This() {
        return objc.msgSend(_self, "initForReadingWithData:", *@This(), .{_data});
    }

    pub fn unarchiveObjectWithData(_data: ?*Data) ?objc.Id {
        return objc.msgSend(Internal.class(), "unarchiveObjectWithData:", ?objc.Id, .{_data});
    }

    pub fn unarchiveTopLevelObjectWithDataError(_data: ?*Data, _error: ?*?*Error) ?objc.Id {
        return objc.msgSend(Internal.class(), "unarchiveTopLevelObjectWithData:error:", ?objc.Id, .{ _data, _error });
    }

    pub fn unarchiveObjectWithFile(_path: ?*String) ?objc.Id {
        return objc.msgSend(Internal.class(), "unarchiveObjectWithFile:", ?objc.Id, .{_path});
    }

    pub fn finishDecoding(_self: *@This()) void {
        return objc.msgSend(_self, "finishDecoding", void, .{});
    }

    pub fn setClassForClassName(_cls: objc.Class, _codedName: ?*String) void {
        return objc.msgSend(Internal.class(), "setClass:forClassName:", void, .{ _cls, _codedName });
    }

    pub fn classForClassName(_codedName: ?*String) objc.Class {
        return objc.msgSend(Internal.class(), "classForClassName:", objc.Class, .{_codedName});
    }

    pub fn containsValueForKey(_self: *@This(), _key: ?*String) objc.BOOL {
        return objc.msgSend(_self, "containsValueForKey:", objc.BOOL, .{_key});
    }

    pub fn decodeObjectForKey(_self: *@This(), _key: ?*String) ?objc.Id {
        return objc.msgSend(_self, "decodeObjectForKey:", ?objc.Id, .{_key});
    }

    pub fn decodeBoolForKey(_self: *@This(), _key: ?*String) objc.BOOL {
        return objc.msgSend(_self, "decodeBoolForKey:", objc.BOOL, .{_key});
    }

    pub fn decodeIntForKey(_self: *@This(), _key: ?*String) i32 {
        return objc.msgSend(_self, "decodeIntForKey:", i32, .{_key});
    }

    pub fn decodeInt32ForKey(_self: *@This(), _key: ?*String) objc.int32_t {
        return objc.msgSend(_self, "decodeInt32ForKey:", objc.int32_t, .{_key});
    }

    pub fn decodeInt64ForKey(_self: *@This(), _key: ?*String) objc.int64_t {
        return objc.msgSend(_self, "decodeInt64ForKey:", objc.int64_t, .{_key});
    }

    pub fn decodeFloatForKey(_self: *@This(), _key: ?*String) f32 {
        return objc.msgSend(_self, "decodeFloatForKey:", f32, .{_key});
    }

    pub fn decodeDoubleForKey(_self: *@This(), _key: ?*String) f64 {
        return objc.msgSend(_self, "decodeDoubleForKey:", f64, .{_key});
    }

    pub fn decodeBytesForKeyReturnedLength(_self: *@This(), _key: ?*String, _lengthp: ?*objc.NSUInteger) ?*objc.uint8_t {
        return objc.msgSend(_self, "decodeBytesForKey:returnedLength:", ?*objc.uint8_t, .{ _key, _lengthp });
    }

    pub fn delegate(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "delegate", ?*anyopaque, .{});
    }

    pub fn setDelegate(_self: *@This(), _delegate: ?*anyopaque) void {
        return objc.msgSend(_self, "setDelegate:", void, .{_delegate});
    }

    pub fn requiresSecureCoding(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "requiresSecureCoding", objc.BOOL, .{});
    }

    pub fn setRequiresSecureCoding(_self: *@This(), _requiresSecureCoding: objc.BOOL) void {
        return objc.msgSend(_self, "setRequiresSecureCoding:", void, .{_requiresSecureCoding});
    }

    pub fn decodingFailurePolicy(_self: *@This()) DecodingFailurePolicy {
        return objc.msgSend(_self, "decodingFailurePolicy", DecodingFailurePolicy, .{});
    }

    pub fn setDecodingFailurePolicy(_self: *@This(), _decodingFailurePolicy: DecodingFailurePolicy) void {
        return objc.msgSend(_self, "setDecodingFailurePolicy:", void, .{_decodingFailurePolicy});
    }
};

/// https://developer.apple.com/documentation/Foundation/NSKeyedArchiverDelegate?language=objc
pub const KeyedArchiverDelegate = opaque {
    pub const Internal = objc.ExternProtocol(@This(), &.{objc.NSObject});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn archiverWillEncodeObject(_self: *@This(), _archiver: ?*KeyedArchiver, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "archiver:willEncodeObject:", ?objc.Id, .{ _archiver, _object });
    }

    pub fn archiverDidEncodeObject(_self: *@This(), _archiver: ?*KeyedArchiver, _object: ?objc.Id) void {
        return objc.msgSend(_self, "archiver:didEncodeObject:", void, .{ _archiver, _object });
    }

    pub fn archiverWillReplaceObjectWithObject(_self: *@This(), _archiver: ?*KeyedArchiver, _object: ?objc.Id, _newObject: ?objc.Id) void {
        return objc.msgSend(_self, "archiver:willReplaceObject:withObject:", void, .{ _archiver, _object, _newObject });
    }

    pub fn archiverWillFinish(_self: *@This(), _archiver: ?*KeyedArchiver) void {
        return objc.msgSend(_self, "archiverWillFinish:", void, .{_archiver});
    }

    pub fn archiverDidFinish(_self: *@This(), _archiver: ?*KeyedArchiver) void {
        return objc.msgSend(_self, "archiverDidFinish:", void, .{_archiver});
    }
};

/// https://developer.apple.com/documentation/Foundation/NSKeyedUnarchiverDelegate?language=objc
pub const KeyedUnarchiverDelegate = opaque {
    pub const Internal = objc.ExternProtocol(@This(), &.{objc.NSObject});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn unarchiverCannotDecodeObjectOfClassNameOriginalClasses(_self: *@This(), _unarchiver: ?*KeyedUnarchiver, _name: ?*String, _classNames: ?*anyopaque) objc.Class {
        return objc.msgSend(_self, "unarchiver:cannotDecodeObjectOfClassName:originalClasses:", objc.Class, .{ _unarchiver, _name, _classNames });
    }

    pub fn unarchiverDidDecodeObject(_self: *@This(), _unarchiver: ?*KeyedUnarchiver, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "unarchiver:didDecodeObject:", ?objc.Id, .{ _unarchiver, _object });
    }

    pub fn unarchiverWillReplaceObjectWithObject(_self: *@This(), _unarchiver: ?*KeyedUnarchiver, _object: ?objc.Id, _newObject: ?objc.Id) void {
        return objc.msgSend(_self, "unarchiver:willReplaceObject:withObject:", void, .{ _unarchiver, _object, _newObject });
    }

    pub fn unarchiverWillFinish(_self: *@This(), _unarchiver: ?*KeyedUnarchiver) void {
        return objc.msgSend(_self, "unarchiverWillFinish:", void, .{_unarchiver});
    }

    pub fn unarchiverDidFinish(_self: *@This(), _unarchiver: ?*KeyedUnarchiver) void {
        return objc.msgSend(_self, "unarchiverDidFinish:", void, .{_unarchiver});
    }
};

/// https://developer.apple.com/documentation/Foundation/NSLocking?language=objc
pub const Locking = opaque {
    pub const Internal = objc.ExternProtocol(@This(), &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;

    pub fn lock(_self: *@This()) void {
        return objc.msgSend(_self, "lock", void, .{});
    }

    pub fn unlock(_self: *@This()) void {
        return objc.msgSend(_self, "unlock", void, .{});
    }
};

/// https://developer.apple.com/documentation/Foundation/NSLock?language=objc
pub const Lock = opaque {
    pub const Internal = objc.ExternClass("NSLock", @This(), objc.NSObject, &.{Locking});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn lock(_self: *@This()) void {
        return objc.msgSend(_self, "lock", void, .{});
    }

    pub fn unlock(_self: *@This()) void {
        return objc.msgSend(_self, "unlock", void, .{});
    }

    pub fn tryLock(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "tryLock", objc.BOOL, .{});
    }

    pub fn lockBeforeDate(_self: *@This(), _limit: ?*Date) objc.BOOL {
        return objc.msgSend(_self, "lockBeforeDate:", objc.BOOL, .{_limit});
    }

    pub fn name(_self: *@This()) ?*String {
        return objc.msgSend(_self, "name", ?*String, .{});
    }

    pub fn setName(_self: *@This(), _name: ?*String) void {
        return objc.msgSend(_self, "setName:", void, .{_name});
    }
};

/// https://developer.apple.com/documentation/Foundation/NSConditionLock?language=objc
pub const ConditionLock = opaque {
    pub const Internal = objc.ExternClass("NSConditionLock", @This(), objc.NSObject, &.{Locking});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn lock(_self: *@This()) void {
        return objc.msgSend(_self, "lock", void, .{});
    }

    pub fn unlock(_self: *@This()) void {
        return objc.msgSend(_self, "unlock", void, .{});
    }

    pub fn initWithCondition(_self: *@This(), _condition: objc.NSInteger) *@This() {
        return objc.msgSend(_self, "initWithCondition:", *@This(), .{_condition});
    }

    pub fn lockWhenCondition(_self: *@This(), _condition: objc.NSInteger) void {
        return objc.msgSend(_self, "lockWhenCondition:", void, .{_condition});
    }

    pub fn tryLock(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "tryLock", objc.BOOL, .{});
    }

    pub fn tryLockWhenCondition(_self: *@This(), _condition: objc.NSInteger) objc.BOOL {
        return objc.msgSend(_self, "tryLockWhenCondition:", objc.BOOL, .{_condition});
    }

    pub fn unlockWithCondition(_self: *@This(), _condition: objc.NSInteger) void {
        return objc.msgSend(_self, "unlockWithCondition:", void, .{_condition});
    }

    pub fn lockBeforeDate(_self: *@This(), _limit: ?*Date) objc.BOOL {
        return objc.msgSend(_self, "lockBeforeDate:", objc.BOOL, .{_limit});
    }

    pub fn lockWhenConditionBeforeDate(_self: *@This(), _condition: objc.NSInteger, _limit: ?*Date) objc.BOOL {
        return objc.msgSend(_self, "lockWhenCondition:beforeDate:", objc.BOOL, .{ _condition, _limit });
    }

    pub fn condition(_self: *@This()) objc.NSInteger {
        return objc.msgSend(_self, "condition", objc.NSInteger, .{});
    }

    pub fn name(_self: *@This()) ?*String {
        return objc.msgSend(_self, "name", ?*String, .{});
    }

    pub fn setName(_self: *@This(), _name: ?*String) void {
        return objc.msgSend(_self, "setName:", void, .{_name});
    }
};

/// https://developer.apple.com/documentation/Foundation/NSRecursiveLock?language=objc
pub const RecursiveLock = opaque {
    pub const Internal = objc.ExternClass("NSRecursiveLock", @This(), objc.NSObject, &.{Locking});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn lock(_self: *@This()) void {
        return objc.msgSend(_self, "lock", void, .{});
    }

    pub fn unlock(_self: *@This()) void {
        return objc.msgSend(_self, "unlock", void, .{});
    }

    pub fn tryLock(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "tryLock", objc.BOOL, .{});
    }

    pub fn lockBeforeDate(_self: *@This(), _limit: ?*Date) objc.BOOL {
        return objc.msgSend(_self, "lockBeforeDate:", objc.BOOL, .{_limit});
    }

    pub fn name(_self: *@This()) ?*String {
        return objc.msgSend(_self, "name", ?*String, .{});
    }

    pub fn setName(_self: *@This(), _name: ?*String) void {
        return objc.msgSend(_self, "setName:", void, .{_name});
    }
};

/// https://developer.apple.com/documentation/Foundation/NSCondition?language=objc
pub const Condition = opaque {
    pub const Internal = objc.ExternClass("NSCondition", @This(), objc.NSObject, &.{Locking});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn lock(_self: *@This()) void {
        return objc.msgSend(_self, "lock", void, .{});
    }

    pub fn unlock(_self: *@This()) void {
        return objc.msgSend(_self, "unlock", void, .{});
    }

    pub fn wait(_self: *@This()) void {
        return objc.msgSend(_self, "wait", void, .{});
    }

    pub fn waitUntilDate(_self: *@This(), _limit: ?*Date) objc.BOOL {
        return objc.msgSend(_self, "waitUntilDate:", objc.BOOL, .{_limit});
    }

    pub fn signal(_self: *@This()) void {
        return objc.msgSend(_self, "signal", void, .{});
    }

    pub fn broadcast(_self: *@This()) void {
        return objc.msgSend(_self, "broadcast", void, .{});
    }

    pub fn name(_self: *@This()) ?*String {
        return objc.msgSend(_self, "name", ?*String, .{});
    }

    pub fn setName(_self: *@This(), _name: ?*String) void {
        return objc.msgSend(_self, "setName:", void, .{_name});
    }
};

pub const MapTableOptions = objc.NSUInteger;

/// https://developer.apple.com/documentation/Foundation/NSMapTable?language=objc
pub fn MapTable(comptime KeyType: type, comptime ObjectType: type) type {
    const unused0 = KeyType;
    _ = unused0; // Prevent unused parameter warning!!!
    const unused1 = ObjectType;
    _ = unused1; // Prevent unused parameter warning!!!
    return struct {
        pub const Internal = objc.ExternClass("NSMapTable", @This(), objc.NSObject, &.{ Copying, SecureCoding, FastEnumeration });
        pub const as = Internal.as;
        pub const retain = Internal.retain;
        pub const release = Internal.release;
        pub const autorelease = Internal.autorelease;
        pub const new = Internal.new;
        pub const alloc = Internal.alloc;

        pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
            return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
        }

        pub fn hash(_self: *@This()) objc.NSUInteger {
            return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
        }

        pub fn superclass(_self: *@This()) objc.Class {
            return objc.msgSend(_self, "superclass", objc.Class, .{});
        }

        pub fn class(_self: *@This()) objc.Class {
            return objc.msgSend(_self, "class", objc.Class, .{});
        }

        pub fn self(_self: *@This()) *@This() {
            return objc.msgSend(_self, "self", *@This(), .{});
        }

        pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
            return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
        }

        pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
            return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
        }

        pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
            return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
        }

        pub fn isProxy(_self: *@This()) objc.BOOL {
            return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
        }

        pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
            return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
        }

        pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
            return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
        }

        pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
            return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
        }

        pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
            return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
        }

        pub fn retainCount(_self: *@This()) objc.NSUInteger {
            return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
        }

        pub fn zone(_self: *@This()) ?*objc._NSZone {
            return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
        }

        pub fn description(_self: *@This()) ?*String {
            return objc.msgSend(_self, "description", ?*String, .{});
        }

        pub fn debugDescription(_self: *@This()) ?*String {
            return objc.msgSend(_self, "debugDescription", ?*String, .{});
        }

        pub fn load() void {
            return objc.msgSend(Internal.class(), "load", void, .{});
        }

        pub fn initialize() void {
            return objc.msgSend(Internal.class(), "initialize", void, .{});
        }

        pub fn init(_self: *@This()) *@This() {
            return objc.msgSend(_self, "init", *@This(), .{});
        }

        pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
            return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
        }

        pub fn dealloc(_self: *@This()) void {
            return objc.msgSend(_self, "dealloc", void, .{});
        }

        pub fn finalize(_self: *@This()) void {
            return objc.msgSend(_self, "finalize", void, .{});
        }

        pub fn copy(_self: *@This()) ?objc.Id {
            return objc.msgSend(_self, "copy", ?objc.Id, .{});
        }

        pub fn mutableCopy(_self: *@This()) ?objc.Id {
            return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
        }

        pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
            return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
        }

        pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
            return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
        }

        pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
            return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
        }

        pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
            return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
        }

        pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
            return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
        }

        pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
            return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
        }

        pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
            return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
        }

        pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
            return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
        }

        pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
            return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
        }

        pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
            return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
        }

        pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
            return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
        }

        pub fn retainWeakReference(_self: *@This()) objc.BOOL {
            return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
        }

        pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
            return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
        }

        pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
            return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
        }

        pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
            return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
        }

        pub fn encodeWithCoder(_self: *@This(), _coder: ?*Coder) void {
            return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
        }

        pub fn initWithCoder(_self: *@This(), _coder: ?*Coder) *@This() {
            return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
        }

        pub fn supportsSecureCoding() objc.BOOL {
            return objc.msgSend(Internal.class(), "supportsSecureCoding", objc.BOOL, .{});
        }

        pub fn countByEnumeratingWithStateObjectsCount(_self: *@This(), _state: ?*FastEnumerationState, _buffer: ?*?objc.Id, _len: objc.NSUInteger) objc.NSUInteger {
            return objc.msgSend(_self, "countByEnumeratingWithState:objects:count:", objc.NSUInteger, .{ _state, _buffer, _len });
        }

        pub fn initWithKeyOptionsValueOptionsCapacity(_self: *@This(), _keyOptions: PointerFunctionsOptions, _valueOptions: PointerFunctionsOptions, _initialCapacity: objc.NSUInteger) *@This() {
            return objc.msgSend(_self, "initWithKeyOptions:valueOptions:capacity:", *@This(), .{ _keyOptions, _valueOptions, _initialCapacity });
        }

        pub fn initWithKeyPointerFunctionsValuePointerFunctionsCapacity(_self: *@This(), _keyFunctions: ?*PointerFunctions, _valueFunctions: ?*PointerFunctions, _initialCapacity: objc.NSUInteger) *@This() {
            return objc.msgSend(_self, "initWithKeyPointerFunctions:valuePointerFunctions:capacity:", *@This(), .{ _keyFunctions, _valueFunctions, _initialCapacity });
        }

        pub fn mapTableWithKeyOptionsValueOptions(_keyOptions: PointerFunctionsOptions, _valueOptions: PointerFunctionsOptions) ?*anyopaque {
            return objc.msgSend(Internal.class(), "mapTableWithKeyOptions:valueOptions:", ?*anyopaque, .{ _keyOptions, _valueOptions });
        }

        pub fn mapTableWithStrongToStrongObjects() ?objc.Id {
            return objc.msgSend(Internal.class(), "mapTableWithStrongToStrongObjects", ?objc.Id, .{});
        }

        pub fn mapTableWithWeakToStrongObjects() ?objc.Id {
            return objc.msgSend(Internal.class(), "mapTableWithWeakToStrongObjects", ?objc.Id, .{});
        }

        pub fn mapTableWithStrongToWeakObjects() ?objc.Id {
            return objc.msgSend(Internal.class(), "mapTableWithStrongToWeakObjects", ?objc.Id, .{});
        }

        pub fn mapTableWithWeakToWeakObjects() ?objc.Id {
            return objc.msgSend(Internal.class(), "mapTableWithWeakToWeakObjects", ?objc.Id, .{});
        }

        pub fn strongToStrongObjectsMapTable() ?*anyopaque {
            return objc.msgSend(Internal.class(), "strongToStrongObjectsMapTable", ?*anyopaque, .{});
        }

        pub fn weakToStrongObjectsMapTable() ?*anyopaque {
            return objc.msgSend(Internal.class(), "weakToStrongObjectsMapTable", ?*anyopaque, .{});
        }

        pub fn strongToWeakObjectsMapTable() ?*anyopaque {
            return objc.msgSend(Internal.class(), "strongToWeakObjectsMapTable", ?*anyopaque, .{});
        }

        pub fn weakToWeakObjectsMapTable() ?*anyopaque {
            return objc.msgSend(Internal.class(), "weakToWeakObjectsMapTable", ?*anyopaque, .{});
        }

        pub fn objectForKey(_self: *@This(), _aKey: KeyType) ObjectType {
            return objc.msgSend(_self, "objectForKey:", ObjectType, .{_aKey});
        }

        pub fn removeObjectForKey(_self: *@This(), _aKey: KeyType) void {
            return objc.msgSend(_self, "removeObjectForKey:", void, .{_aKey});
        }

        pub fn setObjectForKey(_self: *@This(), _anObject: ObjectType, _aKey: KeyType) void {
            return objc.msgSend(_self, "setObject:forKey:", void, .{ _anObject, _aKey });
        }

        pub fn keyEnumerator(_self: *@This()) ?*anyopaque {
            return objc.msgSend(_self, "keyEnumerator", ?*anyopaque, .{});
        }

        pub fn objectEnumerator(_self: *@This()) ?*anyopaque {
            return objc.msgSend(_self, "objectEnumerator", ?*anyopaque, .{});
        }

        pub fn removeAllObjects(_self: *@This()) void {
            return objc.msgSend(_self, "removeAllObjects", void, .{});
        }

        pub fn dictionaryRepresentation(_self: *@This()) ?*anyopaque {
            return objc.msgSend(_self, "dictionaryRepresentation", ?*anyopaque, .{});
        }

        pub fn keyPointerFunctions(_self: *@This()) ?*PointerFunctions {
            return objc.msgSend(_self, "keyPointerFunctions", ?*PointerFunctions, .{});
        }

        pub fn valuePointerFunctions(_self: *@This()) ?*PointerFunctions {
            return objc.msgSend(_self, "valuePointerFunctions", ?*PointerFunctions, .{});
        }

        pub fn count(_self: *@This()) objc.NSUInteger {
            return objc.msgSend(_self, "count", objc.NSUInteger, .{});
        }
    };
}

pub const MapEnumerator = extern struct {
    _pi: objc.NSUInteger,
    _si: objc.NSUInteger,
    _bs: ?*anyopaque,
};

extern "Foundation" fn NSFreeMapTable(table: ?*MapTable) callconv(.C) void;
pub const freeMapTable = NSFreeMapTable;

extern "Foundation" fn NSResetMapTable(table: ?*MapTable) callconv(.C) void;
pub const resetMapTable = NSResetMapTable;

extern "Foundation" fn NSCompareMapTables(table1: ?*MapTable, table2: ?*MapTable) callconv(.C) objc.BOOL;
pub const compareMapTables = NSCompareMapTables;

extern "Foundation" fn NSCopyMapTableWithZone(table: ?*MapTable, zone: ?*Zone) callconv(.C) ?*MapTable;
pub const copyMapTableWithZone = NSCopyMapTableWithZone;

extern "Foundation" fn NSMapMember(
    table: ?*MapTable,
    key: ?*anyopaque,
    originalKey: ?*?*anyopaque,
    value: ?*?*anyopaque,
) callconv(.C) objc.BOOL;
pub const mapMember = NSMapMember;

extern "Foundation" fn NSMapGet(table: ?*MapTable, key: ?*anyopaque) callconv(.C) ?*anyopaque;
pub const mapGet = NSMapGet;

extern "Foundation" fn NSMapInsert(table: ?*MapTable, key: ?*anyopaque, value: ?*anyopaque) callconv(.C) void;
pub const mapInsert = NSMapInsert;

extern "Foundation" fn NSMapInsertKnownAbsent(table: ?*MapTable, key: ?*anyopaque, value: ?*anyopaque) callconv(.C) void;
pub const mapInsertKnownAbsent = NSMapInsertKnownAbsent;

extern "Foundation" fn NSMapInsertIfAbsent(table: ?*MapTable, key: ?*anyopaque, value: ?*anyopaque) callconv(.C) ?*anyopaque;
pub const mapInsertIfAbsent = NSMapInsertIfAbsent;

extern "Foundation" fn NSMapRemove(table: ?*MapTable, key: ?*anyopaque) callconv(.C) void;
pub const mapRemove = NSMapRemove;

extern "Foundation" fn NSEnumerateMapTable(table: ?*MapTable) callconv(.C) MapEnumerator;
pub const enumerateMapTable = NSEnumerateMapTable;

extern "Foundation" fn NSNextMapEnumeratorPair(enumerator: ?*MapEnumerator, key: ?*?*anyopaque, value: ?*?*anyopaque) callconv(.C) objc.BOOL;
pub const nextMapEnumeratorPair = NSNextMapEnumeratorPair;

extern "Foundation" fn NSEndMapTableEnumeration(enumerator: ?*MapEnumerator) callconv(.C) void;
pub const endMapTableEnumeration = NSEndMapTableEnumeration;

extern "Foundation" fn NSCountMapTable(table: ?*MapTable) callconv(.C) objc.NSUInteger;
pub const countMapTable = NSCountMapTable;

extern "Foundation" fn NSStringFromMapTable(table: ?*MapTable) callconv(.C) ?*String;
pub const stringFromMapTable = NSStringFromMapTable;

extern "Foundation" fn NSAllMapTableKeys(table: ?*MapTable) callconv(.C) ?*Array;
pub const allMapTableKeys = NSAllMapTableKeys;

extern "Foundation" fn NSAllMapTableValues(table: ?*MapTable) callconv(.C) ?*Array;
pub const allMapTableValues = NSAllMapTableValues;

pub const MapTableKeyCallBacks = extern struct {
    hash: ?*const fn (?*MapTable, ?*anyopaque) callconv(.C) objc.NSUInteger,
    isEqual: ?*const fn (?*MapTable, ?*anyopaque, ?*anyopaque) callconv(.C) objc.BOOL,
    retain: ?*const fn (?*MapTable, ?*anyopaque) callconv(.C) void,
    release: ?*const fn (?*MapTable, ?*anyopaque) callconv(.C) void,
    describe: ?*const fn (?*MapTable, ?*anyopaque) callconv(.C) ?*String,
    notAKeyMarker: ?*anyopaque,
};

pub const MapTableValueCallBacks = extern struct {
    retain: ?*const fn (?*MapTable, ?*anyopaque) callconv(.C) void,
    release: ?*const fn (?*MapTable, ?*anyopaque) callconv(.C) void,
    describe: ?*const fn (?*MapTable, ?*anyopaque) callconv(.C) ?*String,
};

extern "Foundation" fn NSCreateMapTableWithZone(
    keyCallBacks: MapTableKeyCallBacks,
    valueCallBacks: MapTableValueCallBacks,
    capacity: objc.NSUInteger,
    zone: ?*Zone,
) callconv(.C) ?*MapTable;
pub const createMapTableWithZone = NSCreateMapTableWithZone;

extern "Foundation" fn NSCreateMapTable(keyCallBacks: MapTableKeyCallBacks, valueCallBacks: MapTableValueCallBacks, capacity: objc.NSUInteger) callconv(.C) ?*MapTable;
pub const createMapTable = NSCreateMapTable;

/// https://developer.apple.com/documentation/Foundation/NSMethodSignature?language=objc
pub const MethodSignature = opaque {
    pub const Internal = objc.ExternClass("NSMethodSignature", @This(), objc.NSObject, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn signatureWithObjCTypes(_types: ?*i8) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "signatureWithObjCTypes:", ?*MethodSignature, .{_types});
    }

    pub fn getArgumentTypeAtIndex(_self: *@This(), _idx: objc.NSUInteger) ?*i8 {
        return objc.msgSend(_self, "getArgumentTypeAtIndex:", ?*i8, .{_idx});
    }

    pub fn isOneway(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isOneway", objc.BOOL, .{});
    }

    pub fn numberOfArguments(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "numberOfArguments", objc.NSUInteger, .{});
    }

    pub fn frameLength(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "frameLength", objc.NSUInteger, .{});
    }

    pub fn methodReturnType(_self: *@This()) ?*i8 {
        return objc.msgSend(_self, "methodReturnType", ?*i8, .{});
    }

    pub fn methodReturnLength(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "methodReturnLength", objc.NSUInteger, .{});
    }
};

pub const GrammaticalGender = objc.NSInteger;
pub const GrammaticalGender_NotSet: objc.NSInteger = 0;
pub const GrammaticalGender_Feminine: objc.NSInteger = 1;
pub const GrammaticalGender_Masculine: objc.NSInteger = 2;
pub const GrammaticalGender_Neuter: objc.NSInteger = 3;

pub const GrammaticalPartOfSpeech = objc.NSInteger;
pub const GrammaticalPartOfSpeech_NotSet: objc.NSInteger = 0;
pub const GrammaticalPartOfSpeech_Determiner: objc.NSInteger = 1;
pub const GrammaticalPartOfSpeech_Pronoun: objc.NSInteger = 2;
pub const GrammaticalPartOfSpeech_Letter: objc.NSInteger = 3;
pub const GrammaticalPartOfSpeech_Adverb: objc.NSInteger = 4;
pub const GrammaticalPartOfSpeech_Particle: objc.NSInteger = 5;
pub const GrammaticalPartOfSpeech_Adjective: objc.NSInteger = 6;
pub const GrammaticalPartOfSpeech_Adposition: objc.NSInteger = 7;
pub const GrammaticalPartOfSpeech_Verb: objc.NSInteger = 8;
pub const GrammaticalPartOfSpeech_Noun: objc.NSInteger = 9;
pub const GrammaticalPartOfSpeech_Conjunction: objc.NSInteger = 10;
pub const GrammaticalPartOfSpeech_Numeral: objc.NSInteger = 11;
pub const GrammaticalPartOfSpeech_Interjection: objc.NSInteger = 12;
pub const GrammaticalPartOfSpeech_Preposition: objc.NSInteger = 13;
pub const GrammaticalPartOfSpeech_Abbreviation: objc.NSInteger = 14;

pub const GrammaticalNumber = objc.NSInteger;
pub const GrammaticalNumber_NotSet: objc.NSInteger = 0;
pub const GrammaticalNumber_Singular: objc.NSInteger = 1;
pub const GrammaticalNumber_Zero: objc.NSInteger = 2;
pub const GrammaticalNumber_Plural: objc.NSInteger = 3;
pub const GrammaticalNumber_PluralTwo: objc.NSInteger = 4;
pub const GrammaticalNumber_PluralFew: objc.NSInteger = 5;
pub const GrammaticalNumber_PluralMany: objc.NSInteger = 6;

pub const GrammaticalCase = objc.NSInteger;
pub const GrammaticalCase_NotSet: objc.NSInteger = 0;
pub const GrammaticalCase_Nominative: objc.NSInteger = 1;
pub const GrammaticalCase_Accusative: objc.NSInteger = 2;
pub const GrammaticalCase_Dative: objc.NSInteger = 3;
pub const GrammaticalCase_Genitive: objc.NSInteger = 4;
pub const GrammaticalCase_Prepositional: objc.NSInteger = 5;
pub const GrammaticalCase_Ablative: objc.NSInteger = 6;
pub const GrammaticalCase_Adessive: objc.NSInteger = 7;
pub const GrammaticalCase_Allative: objc.NSInteger = 8;
pub const GrammaticalCase_Elative: objc.NSInteger = 9;
pub const GrammaticalCase_Illative: objc.NSInteger = 10;
pub const GrammaticalCase_Essive: objc.NSInteger = 11;
pub const GrammaticalCase_Inessive: objc.NSInteger = 12;
pub const GrammaticalCase_Locative: objc.NSInteger = 13;
pub const GrammaticalCase_Translative: objc.NSInteger = 14;

pub const GrammaticalPronounType = objc.NSInteger;
pub const GrammaticalPronounType_NotSet: objc.NSInteger = 0;
pub const GrammaticalPronounType_Personal: objc.NSInteger = 1;
pub const GrammaticalPronounType_Reflexive: objc.NSInteger = 2;
pub const GrammaticalPronounType_Possessive: objc.NSInteger = 3;

pub const GrammaticalPerson = objc.NSInteger;
pub const GrammaticalPerson_NotSet: objc.NSInteger = 0;
pub const GrammaticalPerson_First: objc.NSInteger = 1;
pub const GrammaticalPerson_Second: objc.NSInteger = 2;
pub const GrammaticalPerson_Third: objc.NSInteger = 3;

pub const GrammaticalDetermination = objc.NSInteger;
pub const GrammaticalDetermination_NotSet: objc.NSInteger = 0;
pub const GrammaticalDetermination_Independent: objc.NSInteger = 1;
pub const GrammaticalDetermination_Dependent: objc.NSInteger = 2;

pub const GrammaticalDefiniteness = objc.NSInteger;
pub const GrammaticalDefiniteness_NotSet: objc.NSInteger = 0;
pub const GrammaticalDefiniteness_Indefinite: objc.NSInteger = 1;
pub const GrammaticalDefiniteness_Definite: objc.NSInteger = 2;

/// https://developer.apple.com/documentation/Foundation/NSMorphology?language=objc
pub const Morphology = opaque {
    pub const Internal = objc.ExternClass("NSMorphology", @This(), objc.NSObject, &.{ Copying, SecureCoding });
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn supportsSecureCoding() objc.BOOL {
        return objc.msgSend(Internal.class(), "supportsSecureCoding", objc.BOOL, .{});
    }

    pub fn grammaticalGender(_self: *@This()) GrammaticalGender {
        return objc.msgSend(_self, "grammaticalGender", GrammaticalGender, .{});
    }

    pub fn setGrammaticalGender(_self: *@This(), _grammaticalGender: GrammaticalGender) void {
        return objc.msgSend(_self, "setGrammaticalGender:", void, .{_grammaticalGender});
    }

    pub fn partOfSpeech(_self: *@This()) GrammaticalPartOfSpeech {
        return objc.msgSend(_self, "partOfSpeech", GrammaticalPartOfSpeech, .{});
    }

    pub fn setPartOfSpeech(_self: *@This(), _partOfSpeech: GrammaticalPartOfSpeech) void {
        return objc.msgSend(_self, "setPartOfSpeech:", void, .{_partOfSpeech});
    }

    pub fn number(_self: *@This()) GrammaticalNumber {
        return objc.msgSend(_self, "number", GrammaticalNumber, .{});
    }

    pub fn setNumber(_self: *@This(), _number: GrammaticalNumber) void {
        return objc.msgSend(_self, "setNumber:", void, .{_number});
    }

    pub fn grammaticalCase(_self: *@This()) GrammaticalCase {
        return objc.msgSend(_self, "grammaticalCase", GrammaticalCase, .{});
    }

    pub fn setGrammaticalCase(_self: *@This(), _grammaticalCase: GrammaticalCase) void {
        return objc.msgSend(_self, "setGrammaticalCase:", void, .{_grammaticalCase});
    }

    pub fn determination(_self: *@This()) GrammaticalDetermination {
        return objc.msgSend(_self, "determination", GrammaticalDetermination, .{});
    }

    pub fn setDetermination(_self: *@This(), _determination: GrammaticalDetermination) void {
        return objc.msgSend(_self, "setDetermination:", void, .{_determination});
    }

    pub fn grammaticalPerson(_self: *@This()) GrammaticalPerson {
        return objc.msgSend(_self, "grammaticalPerson", GrammaticalPerson, .{});
    }

    pub fn setGrammaticalPerson(_self: *@This(), _grammaticalPerson: GrammaticalPerson) void {
        return objc.msgSend(_self, "setGrammaticalPerson:", void, .{_grammaticalPerson});
    }

    pub fn pronounType(_self: *@This()) GrammaticalPronounType {
        return objc.msgSend(_self, "pronounType", GrammaticalPronounType, .{});
    }

    pub fn setPronounType(_self: *@This(), _pronounType: GrammaticalPronounType) void {
        return objc.msgSend(_self, "setPronounType:", void, .{_pronounType});
    }

    pub fn definiteness(_self: *@This()) GrammaticalDefiniteness {
        return objc.msgSend(_self, "definiteness", GrammaticalDefiniteness, .{});
    }

    pub fn setDefiniteness(_self: *@This(), _definiteness: GrammaticalDefiniteness) void {
        return objc.msgSend(_self, "setDefiniteness:", void, .{_definiteness});
    }
};

/// https://developer.apple.com/documentation/Foundation/NSMorphologyPronoun?language=objc
pub const MorphologyPronoun = opaque {
    pub const Internal = objc.ExternClass("NSMorphologyPronoun", @This(), objc.NSObject, &.{ Copying, SecureCoding });
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn supportsSecureCoding() objc.BOOL {
        return objc.msgSend(Internal.class(), "supportsSecureCoding", objc.BOOL, .{});
    }

    pub fn initWithPronounMorphologyDependentMorphology(_self: *@This(), _pronoun: ?*String, _morphology: ?*Morphology, _dependentMorphology: ?*Morphology) *@This() {
        return objc.msgSend(_self, "initWithPronoun:morphology:dependentMorphology:", *@This(), .{ _pronoun, _morphology, _dependentMorphology });
    }

    pub fn pronoun(_self: *@This()) ?*String {
        return objc.msgSend(_self, "pronoun", ?*String, .{});
    }

    pub fn morphology(_self: *@This()) ?*Morphology {
        return objc.msgSend(_self, "morphology", ?*Morphology, .{});
    }

    pub fn dependentMorphology(_self: *@This()) ?*Morphology {
        return objc.msgSend(_self, "dependentMorphology", ?*Morphology, .{});
    }
};

/// https://developer.apple.com/documentation/Foundation/NSMorphologyCustomPronoun?language=objc
pub const MorphologyCustomPronoun = opaque {
    pub const Internal = objc.ExternClass("NSMorphologyCustomPronoun", @This(), objc.NSObject, &.{ Copying, SecureCoding });
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn supportsSecureCoding() objc.BOOL {
        return objc.msgSend(Internal.class(), "supportsSecureCoding", objc.BOOL, .{});
    }

    pub fn isSupportedForLanguage(_language: ?*String) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSupportedForLanguage:", objc.BOOL, .{_language});
    }

    pub fn requiredKeysForLanguage(_language: ?*String) ?*anyopaque {
        return objc.msgSend(Internal.class(), "requiredKeysForLanguage:", ?*anyopaque, .{_language});
    }

    pub fn subjectForm(_self: *@This()) ?*String {
        return objc.msgSend(_self, "subjectForm", ?*String, .{});
    }

    pub fn setSubjectForm(_self: *@This(), _subjectForm: ?*String) void {
        return objc.msgSend(_self, "setSubjectForm:", void, .{_subjectForm});
    }

    pub fn objectForm(_self: *@This()) ?*String {
        return objc.msgSend(_self, "objectForm", ?*String, .{});
    }

    pub fn setObjectForm(_self: *@This(), _objectForm: ?*String) void {
        return objc.msgSend(_self, "setObjectForm:", void, .{_objectForm});
    }

    pub fn possessiveForm(_self: *@This()) ?*String {
        return objc.msgSend(_self, "possessiveForm", ?*String, .{});
    }

    pub fn setPossessiveForm(_self: *@This(), _possessiveForm: ?*String) void {
        return objc.msgSend(_self, "setPossessiveForm:", void, .{_possessiveForm});
    }

    pub fn possessiveAdjectiveForm(_self: *@This()) ?*String {
        return objc.msgSend(_self, "possessiveAdjectiveForm", ?*String, .{});
    }

    pub fn setPossessiveAdjectiveForm(_self: *@This(), _possessiveAdjectiveForm: ?*String) void {
        return objc.msgSend(_self, "setPossessiveAdjectiveForm:", void, .{_possessiveAdjectiveForm});
    }

    pub fn reflexiveForm(_self: *@This()) ?*String {
        return objc.msgSend(_self, "reflexiveForm", ?*String, .{});
    }

    pub fn setReflexiveForm(_self: *@This(), _reflexiveForm: ?*String) void {
        return objc.msgSend(_self, "setReflexiveForm:", void, .{_reflexiveForm});
    }
};

/// https://developer.apple.com/documentation/Foundation/NSTermOfAddress?language=objc
pub const TermOfAddress = opaque {
    pub const Internal = objc.ExternClass("NSTermOfAddress", @This(), objc.NSObject, &.{ Copying, SecureCoding });
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn supportsSecureCoding() objc.BOOL {
        return objc.msgSend(Internal.class(), "supportsSecureCoding", objc.BOOL, .{});
    }

    pub fn neutral() *@This() {
        return objc.msgSend(Internal.class(), "neutral", *@This(), .{});
    }

    pub fn feminine() *@This() {
        return objc.msgSend(Internal.class(), "feminine", *@This(), .{});
    }

    pub fn masculine() *@This() {
        return objc.msgSend(Internal.class(), "masculine", *@This(), .{});
    }

    pub fn currentUser() *@This() {
        return objc.msgSend(Internal.class(), "currentUser", *@This(), .{});
    }

    pub fn localizedForLanguageIdentifierWithPronouns(_language: ?*String, _pronouns: ?*anyopaque) *@This() {
        return objc.msgSend(Internal.class(), "localizedForLanguageIdentifier:withPronouns:", *@This(), .{ _language, _pronouns });
    }

    pub fn languageIdentifier(_self: *@This()) ?*String {
        return objc.msgSend(_self, "languageIdentifier", ?*String, .{});
    }

    pub fn pronouns(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "pronouns", ?*anyopaque, .{});
    }
};

pub const PostingStyle = objc.NSUInteger;
pub const PostingStyle_WhenIdle: objc.NSUInteger = 1;
pub const PostingStyle_ASAP: objc.NSUInteger = 2;
pub const PostingStyle_Now: objc.NSUInteger = 3;

pub const NotificationCoalescing = objc.NSUInteger;
pub const NotificationCoalescing_NoCoalescing: objc.NSUInteger = 0;
pub const NotificationCoalescing_OnName: objc.NSUInteger = 1;
pub const NotificationCoalescing_OnSender: objc.NSUInteger = 2;

/// https://developer.apple.com/documentation/Foundation/NSNotificationQueue?language=objc
pub const NotificationQueue = opaque {
    pub const Internal = objc.ExternClass("NSNotificationQueue", @This(), objc.NSObject, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn initWithNotificationCenter(_self: *@This(), _notificationCenter: ?*NotificationCenter) *@This() {
        return objc.msgSend(_self, "initWithNotificationCenter:", *@This(), .{_notificationCenter});
    }

    pub fn enqueueNotificationPostingStyle(_self: *@This(), _notification: ?*Notification, _postingStyle: PostingStyle) void {
        return objc.msgSend(_self, "enqueueNotification:postingStyle:", void, .{ _notification, _postingStyle });
    }

    pub fn enqueueNotificationPostingStyleCoalesceMaskForModes(
        _self: *@This(),
        _notification: ?*Notification,
        _postingStyle: PostingStyle,
        _coalesceMask: NotificationCoalescing,
        _modes: ?*anyopaque,
    ) void {
        return objc.msgSend(_self, "enqueueNotification:postingStyle:coalesceMask:forModes:", void, .{
            _notification,
            _postingStyle,
            _coalesceMask,
            _modes,
        });
    }

    pub fn dequeueNotificationsMatchingCoalesceMask(_self: *@This(), _notification: ?*Notification, _coalesceMask: objc.NSUInteger) void {
        return objc.msgSend(_self, "dequeueNotificationsMatching:coalesceMask:", void, .{ _notification, _coalesceMask });
    }

    pub fn defaultQueue() ?*NotificationQueue {
        return objc.msgSend(Internal.class(), "defaultQueue", ?*NotificationQueue, .{});
    }
};

/// https://developer.apple.com/documentation/Foundation/NSNull?language=objc
pub const Null = opaque {
    pub const Internal = objc.ExternClass("NSNull", @This(), objc.NSObject, &.{ Copying, SecureCoding });
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn supportsSecureCoding() objc.BOOL {
        return objc.msgSend(Internal.class(), "supportsSecureCoding", objc.BOOL, .{});
    }

    pub fn @"null"() ?*Null {
        return objc.msgSend(Internal.class(), "null", ?*Null, .{});
    }
};

/// https://developer.apple.com/documentation/Foundation/NSLocalizedNumberFormatRule?language=objc
pub const LocalizedNumberFormatRule = opaque {
    pub const Internal = objc.ExternClass("NSLocalizedNumberFormatRule", @This(), objc.NSObject, &.{ Copying, SecureCoding });
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn supportsSecureCoding() objc.BOOL {
        return objc.msgSend(Internal.class(), "supportsSecureCoding", objc.BOOL, .{});
    }

    pub fn automatic() ?*LocalizedNumberFormatRule {
        return objc.msgSend(Internal.class(), "automatic", ?*LocalizedNumberFormatRule, .{});
    }
};

/// https://developer.apple.com/documentation/Foundation/NSOperation?language=objc
pub const Operation = opaque {
    pub const QueuePriority = Operation.QueuePriority;

    pub const Internal = objc.ExternClass("NSOperation", @This(), objc.NSObject, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn start(_self: *@This()) void {
        return objc.msgSend(_self, "start", void, .{});
    }

    pub fn main(_self: *@This()) void {
        return objc.msgSend(_self, "main", void, .{});
    }

    pub fn isCancelled(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isCancelled", objc.BOOL, .{});
    }

    pub fn cancel(_self: *@This()) void {
        return objc.msgSend(_self, "cancel", void, .{});
    }

    pub fn isExecuting(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isExecuting", objc.BOOL, .{});
    }

    pub fn isFinished(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isFinished", objc.BOOL, .{});
    }

    pub fn isConcurrent(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isConcurrent", objc.BOOL, .{});
    }

    pub fn isAsynchronous(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isAsynchronous", objc.BOOL, .{});
    }

    pub fn isReady(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isReady", objc.BOOL, .{});
    }

    pub fn addDependency(_self: *@This(), _op: ?*Operation) void {
        return objc.msgSend(_self, "addDependency:", void, .{_op});
    }

    pub fn removeDependency(_self: *@This(), _op: ?*Operation) void {
        return objc.msgSend(_self, "removeDependency:", void, .{_op});
    }

    pub fn dependencies(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "dependencies", ?*anyopaque, .{});
    }

    pub fn setQueuePriority(_self: *@This(), _queuePriority: Operation.QueuePriority) void {
        return objc.msgSend(_self, "setQueuePriority:", void, .{_queuePriority});
    }

    pub fn queuePriority(_self: *@This()) Operation.QueuePriority {
        return objc.msgSend(_self, "queuePriority", Operation.QueuePriority, .{});
    }

    pub fn setCompletionBlock(_self: *@This(), _completionBlock: *const fn () callconv(.C) void) void {
        return objc.msgSend(_self, "setCompletionBlock:", void, .{_completionBlock});
    }

    pub fn completionBlock(_self: *@This()) *const fn () callconv(.C) void {
        return objc.msgSend(_self, "completionBlock", *const fn () callconv(.C) void, .{});
    }

    pub fn waitUntilFinished(_self: *@This()) void {
        return objc.msgSend(_self, "waitUntilFinished", void, .{});
    }

    pub fn setThreadPriority(_self: *@This(), _threadPriority: f64) void {
        return objc.msgSend(_self, "setThreadPriority:", void, .{_threadPriority});
    }

    pub fn threadPriority(_self: *@This()) f64 {
        return objc.msgSend(_self, "threadPriority", f64, .{});
    }

    pub fn qualityOfService(_self: *@This()) QualityOfService {
        return objc.msgSend(_self, "qualityOfService", QualityOfService, .{});
    }

    pub fn setQualityOfService(_self: *@This(), _qualityOfService: QualityOfService) void {
        return objc.msgSend(_self, "setQualityOfService:", void, .{_qualityOfService});
    }

    pub fn name(_self: *@This()) ?*String {
        return objc.msgSend(_self, "name", ?*String, .{});
    }

    pub fn setName(_self: *@This(), _name: ?*String) void {
        return objc.msgSend(_self, "setName:", void, .{_name});
    }
};

/// https://developer.apple.com/documentation/Foundation/NSBlockOperation?language=objc
pub const BlockOperation = opaque {
    pub const Internal = objc.ExternClass("NSBlockOperation", @This(), Operation, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn start(_self: *@This()) void {
        return objc.msgSend(_self, "start", void, .{});
    }

    pub fn main(_self: *@This()) void {
        return objc.msgSend(_self, "main", void, .{});
    }

    pub fn isCancelled(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isCancelled", objc.BOOL, .{});
    }

    pub fn cancel(_self: *@This()) void {
        return objc.msgSend(_self, "cancel", void, .{});
    }

    pub fn isExecuting(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isExecuting", objc.BOOL, .{});
    }

    pub fn isFinished(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isFinished", objc.BOOL, .{});
    }

    pub fn isConcurrent(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isConcurrent", objc.BOOL, .{});
    }

    pub fn isAsynchronous(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isAsynchronous", objc.BOOL, .{});
    }

    pub fn isReady(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isReady", objc.BOOL, .{});
    }

    pub fn addDependency(_self: *@This(), _op: ?*Operation) void {
        return objc.msgSend(_self, "addDependency:", void, .{_op});
    }

    pub fn removeDependency(_self: *@This(), _op: ?*Operation) void {
        return objc.msgSend(_self, "removeDependency:", void, .{_op});
    }

    pub fn dependencies(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "dependencies", ?*anyopaque, .{});
    }

    pub fn setQueuePriority(_self: *@This(), _queuePriority: Operation.QueuePriority) void {
        return objc.msgSend(_self, "setQueuePriority:", void, .{_queuePriority});
    }

    pub fn queuePriority(_self: *@This()) Operation.QueuePriority {
        return objc.msgSend(_self, "queuePriority", Operation.QueuePriority, .{});
    }

    pub fn setCompletionBlock(_self: *@This(), _completionBlock: *const fn () callconv(.C) void) void {
        return objc.msgSend(_self, "setCompletionBlock:", void, .{_completionBlock});
    }

    pub fn completionBlock(_self: *@This()) *const fn () callconv(.C) void {
        return objc.msgSend(_self, "completionBlock", *const fn () callconv(.C) void, .{});
    }

    pub fn waitUntilFinished(_self: *@This()) void {
        return objc.msgSend(_self, "waitUntilFinished", void, .{});
    }

    pub fn setThreadPriority(_self: *@This(), _threadPriority: f64) void {
        return objc.msgSend(_self, "setThreadPriority:", void, .{_threadPriority});
    }

    pub fn threadPriority(_self: *@This()) f64 {
        return objc.msgSend(_self, "threadPriority", f64, .{});
    }

    pub fn qualityOfService(_self: *@This()) QualityOfService {
        return objc.msgSend(_self, "qualityOfService", QualityOfService, .{});
    }

    pub fn setQualityOfService(_self: *@This(), _qualityOfService: QualityOfService) void {
        return objc.msgSend(_self, "setQualityOfService:", void, .{_qualityOfService});
    }

    pub fn name(_self: *@This()) ?*String {
        return objc.msgSend(_self, "name", ?*String, .{});
    }

    pub fn setName(_self: *@This(), _name: ?*String) void {
        return objc.msgSend(_self, "setName:", void, .{_name});
    }

    pub fn blockOperationWithBlock(_block: *const fn () callconv(.C) void) *@This() {
        return objc.msgSend(Internal.class(), "blockOperationWithBlock:", *@This(), .{_block});
    }

    pub fn addExecutionBlock(_self: *@This(), _block: *const fn () callconv(.C) void) void {
        return objc.msgSend(_self, "addExecutionBlock:", void, .{_block});
    }

    pub fn executionBlocks(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "executionBlocks", ?*anyopaque, .{});
    }
};

/// https://developer.apple.com/documentation/Foundation/NSInvocationOperation?language=objc
pub const InvocationOperation = opaque {
    pub const Internal = objc.ExternClass("NSInvocationOperation", @This(), Operation, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn start(_self: *@This()) void {
        return objc.msgSend(_self, "start", void, .{});
    }

    pub fn main(_self: *@This()) void {
        return objc.msgSend(_self, "main", void, .{});
    }

    pub fn isCancelled(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isCancelled", objc.BOOL, .{});
    }

    pub fn cancel(_self: *@This()) void {
        return objc.msgSend(_self, "cancel", void, .{});
    }

    pub fn isExecuting(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isExecuting", objc.BOOL, .{});
    }

    pub fn isFinished(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isFinished", objc.BOOL, .{});
    }

    pub fn isConcurrent(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isConcurrent", objc.BOOL, .{});
    }

    pub fn isAsynchronous(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isAsynchronous", objc.BOOL, .{});
    }

    pub fn isReady(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isReady", objc.BOOL, .{});
    }

    pub fn addDependency(_self: *@This(), _op: ?*Operation) void {
        return objc.msgSend(_self, "addDependency:", void, .{_op});
    }

    pub fn removeDependency(_self: *@This(), _op: ?*Operation) void {
        return objc.msgSend(_self, "removeDependency:", void, .{_op});
    }

    pub fn dependencies(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "dependencies", ?*anyopaque, .{});
    }

    pub fn setQueuePriority(_self: *@This(), _queuePriority: Operation.QueuePriority) void {
        return objc.msgSend(_self, "setQueuePriority:", void, .{_queuePriority});
    }

    pub fn queuePriority(_self: *@This()) Operation.QueuePriority {
        return objc.msgSend(_self, "queuePriority", Operation.QueuePriority, .{});
    }

    pub fn setCompletionBlock(_self: *@This(), _completionBlock: *const fn () callconv(.C) void) void {
        return objc.msgSend(_self, "setCompletionBlock:", void, .{_completionBlock});
    }

    pub fn completionBlock(_self: *@This()) *const fn () callconv(.C) void {
        return objc.msgSend(_self, "completionBlock", *const fn () callconv(.C) void, .{});
    }

    pub fn waitUntilFinished(_self: *@This()) void {
        return objc.msgSend(_self, "waitUntilFinished", void, .{});
    }

    pub fn setThreadPriority(_self: *@This(), _threadPriority: f64) void {
        return objc.msgSend(_self, "setThreadPriority:", void, .{_threadPriority});
    }

    pub fn threadPriority(_self: *@This()) f64 {
        return objc.msgSend(_self, "threadPriority", f64, .{});
    }

    pub fn qualityOfService(_self: *@This()) QualityOfService {
        return objc.msgSend(_self, "qualityOfService", QualityOfService, .{});
    }

    pub fn setQualityOfService(_self: *@This(), _qualityOfService: QualityOfService) void {
        return objc.msgSend(_self, "setQualityOfService:", void, .{_qualityOfService});
    }

    pub fn name(_self: *@This()) ?*String {
        return objc.msgSend(_self, "name", ?*String, .{});
    }

    pub fn setName(_self: *@This(), _name: ?*String) void {
        return objc.msgSend(_self, "setName:", void, .{_name});
    }

    pub fn initWithTargetSelectorObject(_self: *@This(), _target: ?objc.Id, _sel: objc.Selector, _arg: ?objc.Id) *@This() {
        return objc.msgSend(_self, "initWithTarget:selector:object:", *@This(), .{ _target, _sel, _arg });
    }

    pub fn initWithInvocation(_self: *@This(), _inv: ?*Invocation) *@This() {
        return objc.msgSend(_self, "initWithInvocation:", *@This(), .{_inv});
    }

    pub fn invocation(_self: *@This()) ?*Invocation {
        return objc.msgSend(_self, "invocation", ?*Invocation, .{});
    }

    pub fn result(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "result", ?objc.Id, .{});
    }
};

/// https://developer.apple.com/documentation/Foundation/NSOperationQueue?language=objc
pub const OperationQueue = opaque {
    pub const Internal = objc.ExternClass("NSOperationQueue", @This(), objc.NSObject, &.{ProgressReporting});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn progress(_self: *@This()) ?*Progress {
        return objc.msgSend(_self, "progress", ?*Progress, .{});
    }

    pub fn addOperation(_self: *@This(), _op: ?*Operation) void {
        return objc.msgSend(_self, "addOperation:", void, .{_op});
    }

    pub fn addOperationsWaitUntilFinished(_self: *@This(), _ops: ?*anyopaque, _wait: objc.BOOL) void {
        return objc.msgSend(_self, "addOperations:waitUntilFinished:", void, .{ _ops, _wait });
    }

    pub fn addOperationWithBlock(_self: *@This(), _block: *const fn () callconv(.C) void) void {
        return objc.msgSend(_self, "addOperationWithBlock:", void, .{_block});
    }

    pub fn addBarrierBlock(_self: *@This(), _barrier: *const fn () callconv(.C) void) void {
        return objc.msgSend(_self, "addBarrierBlock:", void, .{_barrier});
    }

    pub fn cancelAllOperations(_self: *@This()) void {
        return objc.msgSend(_self, "cancelAllOperations", void, .{});
    }

    pub fn waitUntilAllOperationsAreFinished(_self: *@This()) void {
        return objc.msgSend(_self, "waitUntilAllOperationsAreFinished", void, .{});
    }

    pub fn maxConcurrentOperationCount(_self: *@This()) objc.NSInteger {
        return objc.msgSend(_self, "maxConcurrentOperationCount", objc.NSInteger, .{});
    }

    pub fn setMaxConcurrentOperationCount(_self: *@This(), _maxConcurrentOperationCount: objc.NSInteger) void {
        return objc.msgSend(_self, "setMaxConcurrentOperationCount:", void, .{_maxConcurrentOperationCount});
    }

    pub fn isSuspended(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isSuspended", objc.BOOL, .{});
    }

    pub fn setSuspended(_self: *@This(), _suspended: objc.BOOL) void {
        return objc.msgSend(_self, "setSuspended:", void, .{_suspended});
    }

    pub fn name(_self: *@This()) ?*String {
        return objc.msgSend(_self, "name", ?*String, .{});
    }

    pub fn setName(_self: *@This(), _name: ?*String) void {
        return objc.msgSend(_self, "setName:", void, .{_name});
    }

    pub fn qualityOfService(_self: *@This()) QualityOfService {
        return objc.msgSend(_self, "qualityOfService", QualityOfService, .{});
    }

    pub fn setQualityOfService(_self: *@This(), _qualityOfService: QualityOfService) void {
        return objc.msgSend(_self, "setQualityOfService:", void, .{_qualityOfService});
    }

    pub fn underlyingQueue(_self: *@This()) objc.dispatch_queue_t {
        return objc.msgSend(_self, "underlyingQueue", objc.dispatch_queue_t, .{});
    }

    pub fn setUnderlyingQueue(_self: *@This(), _underlyingQueue: objc.dispatch_queue_t) void {
        return objc.msgSend(_self, "setUnderlyingQueue:", void, .{_underlyingQueue});
    }

    pub fn currentQueue() ?*OperationQueue {
        return objc.msgSend(Internal.class(), "currentQueue", ?*OperationQueue, .{});
    }

    pub fn mainQueue() ?*OperationQueue {
        return objc.msgSend(Internal.class(), "mainQueue", ?*OperationQueue, .{});
    }
};

/// https://developer.apple.com/documentation/Foundation/NSOrthography?language=objc
pub const Orthography = opaque {
    pub const Internal = objc.ExternClass("NSOrthography", @This(), objc.NSObject, &.{ Copying, SecureCoding });
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn supportsSecureCoding() objc.BOOL {
        return objc.msgSend(Internal.class(), "supportsSecureCoding", objc.BOOL, .{});
    }

    pub fn initWithDominantScriptLanguageMap(_self: *@This(), _script: ?*String, _map: ?*anyopaque) *@This() {
        return objc.msgSend(_self, "initWithDominantScript:languageMap:", *@This(), .{ _script, _map });
    }

    pub fn dominantScript(_self: *@This()) ?*String {
        return objc.msgSend(_self, "dominantScript", ?*String, .{});
    }

    pub fn languageMap(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "languageMap", ?*anyopaque, .{});
    }
};

/// https://developer.apple.com/documentation/Foundation/NSPointerArray?language=objc
pub const PointerArray = opaque {
    pub const Internal = objc.ExternClass("NSPointerArray", @This(), objc.NSObject, &.{ FastEnumeration, Copying, SecureCoding });
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn countByEnumeratingWithStateObjectsCount(_self: *@This(), _state: ?*FastEnumerationState, _buffer: ?*?objc.Id, _len: objc.NSUInteger) objc.NSUInteger {
        return objc.msgSend(_self, "countByEnumeratingWithState:objects:count:", objc.NSUInteger, .{ _state, _buffer, _len });
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn supportsSecureCoding() objc.BOOL {
        return objc.msgSend(Internal.class(), "supportsSecureCoding", objc.BOOL, .{});
    }

    pub fn initWithOptions(_self: *@This(), _options: PointerFunctionsOptions) *@This() {
        return objc.msgSend(_self, "initWithOptions:", *@This(), .{_options});
    }

    pub fn initWithPointerFunctions(_self: *@This(), _functions: ?*PointerFunctions) *@This() {
        return objc.msgSend(_self, "initWithPointerFunctions:", *@This(), .{_functions});
    }

    pub fn pointerArrayWithOptions(_options: PointerFunctionsOptions) ?*PointerArray {
        return objc.msgSend(Internal.class(), "pointerArrayWithOptions:", ?*PointerArray, .{_options});
    }

    pub fn pointerArrayWithPointerFunctions(_functions: ?*PointerFunctions) ?*PointerArray {
        return objc.msgSend(Internal.class(), "pointerArrayWithPointerFunctions:", ?*PointerArray, .{_functions});
    }

    pub fn pointerAtIndex(_self: *@This(), _index: objc.NSUInteger) ?*anyopaque {
        return objc.msgSend(_self, "pointerAtIndex:", ?*anyopaque, .{_index});
    }

    pub fn addPointer(_self: *@This(), _pointer: ?*anyopaque) void {
        return objc.msgSend(_self, "addPointer:", void, .{_pointer});
    }

    pub fn removePointerAtIndex(_self: *@This(), _index: objc.NSUInteger) void {
        return objc.msgSend(_self, "removePointerAtIndex:", void, .{_index});
    }

    pub fn insertPointerAtIndex(_self: *@This(), _item: ?*anyopaque, _index: objc.NSUInteger) void {
        return objc.msgSend(_self, "insertPointer:atIndex:", void, .{ _item, _index });
    }

    pub fn replacePointerAtIndexWithPointer(_self: *@This(), _index: objc.NSUInteger, _item: ?*anyopaque) void {
        return objc.msgSend(_self, "replacePointerAtIndex:withPointer:", void, .{ _index, _item });
    }

    pub fn compact(_self: *@This()) void {
        return objc.msgSend(_self, "compact", void, .{});
    }

    pub fn pointerFunctions(_self: *@This()) ?*PointerFunctions {
        return objc.msgSend(_self, "pointerFunctions", ?*PointerFunctions, .{});
    }

    pub fn count(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "count", objc.NSUInteger, .{});
    }

    pub fn setCount(_self: *@This(), _count: objc.NSUInteger) void {
        return objc.msgSend(_self, "setCount:", void, .{_count});
    }
};

pub const SocketNativeHandle = i32;

/// https://developer.apple.com/documentation/Foundation/NSPort?language=objc
pub const Port = opaque {
    pub const Internal = objc.ExternClass("NSPort", @This(), objc.NSObject, &.{ Copying, Coding });
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn port() ?*Port {
        return objc.msgSend(Internal.class(), "port", ?*Port, .{});
    }

    pub fn invalidate(_self: *@This()) void {
        return objc.msgSend(_self, "invalidate", void, .{});
    }

    pub fn setDelegate(_self: *@This(), _anObject: ?*anyopaque) void {
        return objc.msgSend(_self, "setDelegate:", void, .{_anObject});
    }

    pub fn delegate(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "delegate", ?*anyopaque, .{});
    }

    pub fn scheduleInRunLoopForMode(_self: *@This(), _runLoop: ?*RunLoop, _mode: RunLoopMode) void {
        return objc.msgSend(_self, "scheduleInRunLoop:forMode:", void, .{ _runLoop, _mode });
    }

    pub fn removeFromRunLoopForMode(_self: *@This(), _runLoop: ?*RunLoop, _mode: RunLoopMode) void {
        return objc.msgSend(_self, "removeFromRunLoop:forMode:", void, .{ _runLoop, _mode });
    }

    pub fn sendBeforeDateComponentsFromReserved(
        _self: *@This(),
        _limitDate: ?*Date,
        _components: ?*MutableArray,
        _receivePort: ?*Port,
        _headerSpaceReserved: objc.NSUInteger,
    ) objc.BOOL {
        return objc.msgSend(_self, "sendBeforeDate:components:from:reserved:", objc.BOOL, .{
            _limitDate,
            _components,
            _receivePort,
            _headerSpaceReserved,
        });
    }

    pub fn sendBeforeDateMsgidComponentsFromReserved(
        _self: *@This(),
        _limitDate: ?*Date,
        _msgID: objc.NSUInteger,
        _components: ?*MutableArray,
        _receivePort: ?*Port,
        _headerSpaceReserved: objc.NSUInteger,
    ) objc.BOOL {
        return objc.msgSend(_self, "sendBeforeDate:msgid:components:from:reserved:", objc.BOOL, .{
            _limitDate,
            _msgID,
            _components,
            _receivePort,
            _headerSpaceReserved,
        });
    }

    pub fn addConnectionToRunLoopForMode(_self: *@This(), _conn: ?*Connection, _runLoop: ?*RunLoop, _mode: RunLoopMode) void {
        return objc.msgSend(_self, "addConnection:toRunLoop:forMode:", void, .{ _conn, _runLoop, _mode });
    }

    pub fn removeConnectionFromRunLoopForMode(_self: *@This(), _conn: ?*Connection, _runLoop: ?*RunLoop, _mode: RunLoopMode) void {
        return objc.msgSend(_self, "removeConnection:fromRunLoop:forMode:", void, .{ _conn, _runLoop, _mode });
    }

    pub fn isValid(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isValid", objc.BOOL, .{});
    }

    pub fn reservedSpaceLength(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "reservedSpaceLength", objc.NSUInteger, .{});
    }
};

/// https://developer.apple.com/documentation/Foundation/NSPortDelegate?language=objc
pub const PortDelegate = opaque {
    pub const Internal = objc.ExternProtocol(@This(), &.{objc.NSObject});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn handlePortMessage(_self: *@This(), _message: ?*PortMessage) void {
        return objc.msgSend(_self, "handlePortMessage:", void, .{_message});
    }
};

/// https://developer.apple.com/documentation/Foundation/NSMachPort?language=objc
pub const MachPort = opaque {
    pub const Options = MachPort.Options;

    pub const Internal = objc.ExternClass("NSMachPort", @This(), Port, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn port() ?*Port {
        return objc.msgSend(Internal.class(), "port", ?*Port, .{});
    }

    pub fn invalidate(_self: *@This()) void {
        return objc.msgSend(_self, "invalidate", void, .{});
    }

    pub fn setDelegate(_self: *@This(), _anObject: ?*anyopaque) void {
        return objc.msgSend(_self, "setDelegate:", void, .{_anObject});
    }

    pub fn delegate(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "delegate", ?*anyopaque, .{});
    }

    pub fn scheduleInRunLoopForMode(_self: *@This(), _runLoop: ?*RunLoop, _mode: RunLoopMode) void {
        return objc.msgSend(_self, "scheduleInRunLoop:forMode:", void, .{ _runLoop, _mode });
    }

    pub fn removeFromRunLoopForMode(_self: *@This(), _runLoop: ?*RunLoop, _mode: RunLoopMode) void {
        return objc.msgSend(_self, "removeFromRunLoop:forMode:", void, .{ _runLoop, _mode });
    }

    pub fn sendBeforeDateComponentsFromReserved(
        _self: *@This(),
        _limitDate: ?*Date,
        _components: ?*MutableArray,
        _receivePort: ?*Port,
        _headerSpaceReserved: objc.NSUInteger,
    ) objc.BOOL {
        return objc.msgSend(_self, "sendBeforeDate:components:from:reserved:", objc.BOOL, .{
            _limitDate,
            _components,
            _receivePort,
            _headerSpaceReserved,
        });
    }

    pub fn sendBeforeDateMsgidComponentsFromReserved(
        _self: *@This(),
        _limitDate: ?*Date,
        _msgID: objc.NSUInteger,
        _components: ?*MutableArray,
        _receivePort: ?*Port,
        _headerSpaceReserved: objc.NSUInteger,
    ) objc.BOOL {
        return objc.msgSend(_self, "sendBeforeDate:msgid:components:from:reserved:", objc.BOOL, .{
            _limitDate,
            _msgID,
            _components,
            _receivePort,
            _headerSpaceReserved,
        });
    }

    pub fn addConnectionToRunLoopForMode(_self: *@This(), _conn: ?*Connection, _runLoop: ?*RunLoop, _mode: RunLoopMode) void {
        return objc.msgSend(_self, "addConnection:toRunLoop:forMode:", void, .{ _conn, _runLoop, _mode });
    }

    pub fn removeConnectionFromRunLoopForMode(_self: *@This(), _conn: ?*Connection, _runLoop: ?*RunLoop, _mode: RunLoopMode) void {
        return objc.msgSend(_self, "removeConnection:fromRunLoop:forMode:", void, .{ _conn, _runLoop, _mode });
    }

    pub fn isValid(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isValid", objc.BOOL, .{});
    }

    pub fn reservedSpaceLength(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "reservedSpaceLength", objc.NSUInteger, .{});
    }

    pub fn portWithMachPort(_machPort: objc.uint32_t) ?*Port {
        return objc.msgSend(Internal.class(), "portWithMachPort:", ?*Port, .{_machPort});
    }

    pub fn initWithMachPort(_self: *@This(), _machPort: objc.uint32_t) *@This() {
        return objc.msgSend(_self, "initWithMachPort:", *@This(), .{_machPort});
    }

    pub fn portWithMachPortOptions(_machPort: objc.uint32_t, _f: MachPort.Options) ?*Port {
        return objc.msgSend(Internal.class(), "portWithMachPort:options:", ?*Port, .{ _machPort, _f });
    }

    pub fn initWithMachPortOptions(_self: *@This(), _machPort: objc.uint32_t, _f: MachPort.Options) *@This() {
        return objc.msgSend(_self, "initWithMachPort:options:", *@This(), .{ _machPort, _f });
    }

    pub fn machPort(_self: *@This()) objc.uint32_t {
        return objc.msgSend(_self, "machPort", objc.uint32_t, .{});
    }
};

/// https://developer.apple.com/documentation/Foundation/NSMachPortDelegate?language=objc
pub const MachPortDelegate = opaque {
    pub const Internal = objc.ExternProtocol(@This(), &.{PortDelegate});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn handlePortMessage(_self: *@This(), _message: ?*PortMessage) void {
        return objc.msgSend(_self, "handlePortMessage:", void, .{_message});
    }

    pub fn handleMachMessage(_self: *@This(), _msg: ?*anyopaque) void {
        return objc.msgSend(_self, "handleMachMessage:", void, .{_msg});
    }
};

/// https://developer.apple.com/documentation/Foundation/NSMessagePort?language=objc
pub const MessagePort = opaque {
    pub const Internal = objc.ExternClass("NSMessagePort", @This(), Port, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn port() ?*Port {
        return objc.msgSend(Internal.class(), "port", ?*Port, .{});
    }

    pub fn invalidate(_self: *@This()) void {
        return objc.msgSend(_self, "invalidate", void, .{});
    }

    pub fn setDelegate(_self: *@This(), _anObject: ?*anyopaque) void {
        return objc.msgSend(_self, "setDelegate:", void, .{_anObject});
    }

    pub fn delegate(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "delegate", ?*anyopaque, .{});
    }

    pub fn scheduleInRunLoopForMode(_self: *@This(), _runLoop: ?*RunLoop, _mode: RunLoopMode) void {
        return objc.msgSend(_self, "scheduleInRunLoop:forMode:", void, .{ _runLoop, _mode });
    }

    pub fn removeFromRunLoopForMode(_self: *@This(), _runLoop: ?*RunLoop, _mode: RunLoopMode) void {
        return objc.msgSend(_self, "removeFromRunLoop:forMode:", void, .{ _runLoop, _mode });
    }

    pub fn sendBeforeDateComponentsFromReserved(
        _self: *@This(),
        _limitDate: ?*Date,
        _components: ?*MutableArray,
        _receivePort: ?*Port,
        _headerSpaceReserved: objc.NSUInteger,
    ) objc.BOOL {
        return objc.msgSend(_self, "sendBeforeDate:components:from:reserved:", objc.BOOL, .{
            _limitDate,
            _components,
            _receivePort,
            _headerSpaceReserved,
        });
    }

    pub fn sendBeforeDateMsgidComponentsFromReserved(
        _self: *@This(),
        _limitDate: ?*Date,
        _msgID: objc.NSUInteger,
        _components: ?*MutableArray,
        _receivePort: ?*Port,
        _headerSpaceReserved: objc.NSUInteger,
    ) objc.BOOL {
        return objc.msgSend(_self, "sendBeforeDate:msgid:components:from:reserved:", objc.BOOL, .{
            _limitDate,
            _msgID,
            _components,
            _receivePort,
            _headerSpaceReserved,
        });
    }

    pub fn addConnectionToRunLoopForMode(_self: *@This(), _conn: ?*Connection, _runLoop: ?*RunLoop, _mode: RunLoopMode) void {
        return objc.msgSend(_self, "addConnection:toRunLoop:forMode:", void, .{ _conn, _runLoop, _mode });
    }

    pub fn removeConnectionFromRunLoopForMode(_self: *@This(), _conn: ?*Connection, _runLoop: ?*RunLoop, _mode: RunLoopMode) void {
        return objc.msgSend(_self, "removeConnection:fromRunLoop:forMode:", void, .{ _conn, _runLoop, _mode });
    }

    pub fn isValid(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isValid", objc.BOOL, .{});
    }

    pub fn reservedSpaceLength(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "reservedSpaceLength", objc.NSUInteger, .{});
    }
};

/// https://developer.apple.com/documentation/Foundation/NSSocketPort?language=objc
pub const SocketPort = opaque {
    pub const Internal = objc.ExternClass("NSSocketPort", @This(), Port, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn port() ?*Port {
        return objc.msgSend(Internal.class(), "port", ?*Port, .{});
    }

    pub fn invalidate(_self: *@This()) void {
        return objc.msgSend(_self, "invalidate", void, .{});
    }

    pub fn setDelegate(_self: *@This(), _anObject: ?*anyopaque) void {
        return objc.msgSend(_self, "setDelegate:", void, .{_anObject});
    }

    pub fn delegate(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "delegate", ?*anyopaque, .{});
    }

    pub fn scheduleInRunLoopForMode(_self: *@This(), _runLoop: ?*RunLoop, _mode: RunLoopMode) void {
        return objc.msgSend(_self, "scheduleInRunLoop:forMode:", void, .{ _runLoop, _mode });
    }

    pub fn removeFromRunLoopForMode(_self: *@This(), _runLoop: ?*RunLoop, _mode: RunLoopMode) void {
        return objc.msgSend(_self, "removeFromRunLoop:forMode:", void, .{ _runLoop, _mode });
    }

    pub fn sendBeforeDateComponentsFromReserved(
        _self: *@This(),
        _limitDate: ?*Date,
        _components: ?*MutableArray,
        _receivePort: ?*Port,
        _headerSpaceReserved: objc.NSUInteger,
    ) objc.BOOL {
        return objc.msgSend(_self, "sendBeforeDate:components:from:reserved:", objc.BOOL, .{
            _limitDate,
            _components,
            _receivePort,
            _headerSpaceReserved,
        });
    }

    pub fn sendBeforeDateMsgidComponentsFromReserved(
        _self: *@This(),
        _limitDate: ?*Date,
        _msgID: objc.NSUInteger,
        _components: ?*MutableArray,
        _receivePort: ?*Port,
        _headerSpaceReserved: objc.NSUInteger,
    ) objc.BOOL {
        return objc.msgSend(_self, "sendBeforeDate:msgid:components:from:reserved:", objc.BOOL, .{
            _limitDate,
            _msgID,
            _components,
            _receivePort,
            _headerSpaceReserved,
        });
    }

    pub fn addConnectionToRunLoopForMode(_self: *@This(), _conn: ?*Connection, _runLoop: ?*RunLoop, _mode: RunLoopMode) void {
        return objc.msgSend(_self, "addConnection:toRunLoop:forMode:", void, .{ _conn, _runLoop, _mode });
    }

    pub fn removeConnectionFromRunLoopForMode(_self: *@This(), _conn: ?*Connection, _runLoop: ?*RunLoop, _mode: RunLoopMode) void {
        return objc.msgSend(_self, "removeConnection:fromRunLoop:forMode:", void, .{ _conn, _runLoop, _mode });
    }

    pub fn isValid(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isValid", objc.BOOL, .{});
    }

    pub fn reservedSpaceLength(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "reservedSpaceLength", objc.NSUInteger, .{});
    }

    pub fn initWithTCPPort(_self: *@This(), _port: u16) *@This() {
        return objc.msgSend(_self, "initWithTCPPort:", *@This(), .{_port});
    }

    pub fn initWithProtocolFamilySocketTypeProtocolAddress(
        _self: *@This(),
        _family: i32,
        _type: i32,
        _protocol: i32,
        _address: ?*Data,
    ) *@This() {
        return objc.msgSend(_self, "initWithProtocolFamily:socketType:protocol:address:", *@This(), .{
            _family,
            _type,
            _protocol,
            _address,
        });
    }

    pub fn initWithProtocolFamilySocketTypeProtocolSocket(
        _self: *@This(),
        _family: i32,
        _type: i32,
        _protocol: i32,
        _sock: SocketNativeHandle,
    ) *@This() {
        return objc.msgSend(_self, "initWithProtocolFamily:socketType:protocol:socket:", *@This(), .{
            _family,
            _type,
            _protocol,
            _sock,
        });
    }

    pub fn initRemoteWithTCPPortHost(_self: *@This(), _port: u16, _hostName: ?*String) *@This() {
        return objc.msgSend(_self, "initRemoteWithTCPPort:host:", *@This(), .{ _port, _hostName });
    }

    pub fn initRemoteWithProtocolFamilySocketTypeProtocolAddress(
        _self: *@This(),
        _family: i32,
        _type: i32,
        _protocol: i32,
        _address: ?*Data,
    ) *@This() {
        return objc.msgSend(_self, "initRemoteWithProtocolFamily:socketType:protocol:address:", *@This(), .{
            _family,
            _type,
            _protocol,
            _address,
        });
    }

    pub fn protocolFamily(_self: *@This()) i32 {
        return objc.msgSend(_self, "protocolFamily", i32, .{});
    }

    pub fn socketType(_self: *@This()) i32 {
        return objc.msgSend(_self, "socketType", i32, .{});
    }

    pub fn protocol(_self: *@This()) i32 {
        return objc.msgSend(_self, "protocol", i32, .{});
    }

    pub fn address(_self: *@This()) ?*Data {
        return objc.msgSend(_self, "address", ?*Data, .{});
    }

    pub fn socket(_self: *@This()) SocketNativeHandle {
        return objc.msgSend(_self, "socket", SocketNativeHandle, .{});
    }
};

pub const anon111 = u32;
pub const anon111_NSWindowsNTOperatingSystem: u32 = 1;
pub const anon111_NSWindows95OperatingSystem: u32 = 2;
pub const anon111_NSSolarisOperatingSystem: u32 = 3;
pub const anon111_NSHPUXOperatingSystem: u32 = 4;
pub const anon111_NSMACHOperatingSystem: u32 = 5;
pub const anon111_NSSunOSOperatingSystem: u32 = 6;
pub const anon111_NSOSF1OperatingSystem: u32 = 7;
pub const anon111_NSFileNoSuchFileError: u32 = 4;
pub const anon111_NSFileLockingError: u32 = 255;
pub const anon111_NSFileReadUnknownError: u32 = 256;
pub const anon111_NSFileReadNoPermissionError: u32 = 257;
pub const anon111_NSFileReadInvalidFileNameError: u32 = 258;
pub const anon111_NSFileReadCorruptFileError: u32 = 259;
pub const anon111_NSFileReadNoSuchFileError: u32 = 260;
pub const anon111_NSFileReadInapplicableStringEncodingError: u32 = 261;
pub const anon111_NSFileReadUnsupportedSchemeError: u32 = 262;
pub const anon111_NSFileReadTooLargeError: u32 = 263;
pub const anon111_NSFileReadUnknownStringEncodingError: u32 = 264;
pub const anon111_NSFileWriteUnknownError: u32 = 512;
pub const anon111_NSFileWriteNoPermissionError: u32 = 513;
pub const anon111_NSFileWriteInvalidFileNameError: u32 = 514;
pub const anon111_NSFileWriteFileExistsError: u32 = 516;
pub const anon111_NSFileWriteInapplicableStringEncodingError: u32 = 517;
pub const anon111_NSFileWriteUnsupportedSchemeError: u32 = 518;
pub const anon111_NSFileWriteOutOfSpaceError: u32 = 640;
pub const anon111_NSFileWriteVolumeReadOnlyError: u32 = 642;
pub const anon111_NSFileManagerUnmountUnknownError: u32 = 768;
pub const anon111_NSFileManagerUnmountBusyError: u32 = 769;
pub const anon111_NSKeyValueValidationError: u32 = 1024;
pub const anon111_NSFormattingError: u32 = 2048;
pub const anon111_NSUserCancelledError: u32 = 3072;
pub const anon111_NSFeatureUnsupportedError: u32 = 3328;
pub const anon111_NSExecutableNotLoadableError: u32 = 3584;
pub const anon111_NSExecutableArchitectureMismatchError: u32 = 3585;
pub const anon111_NSExecutableRuntimeMismatchError: u32 = 3586;
pub const anon111_NSExecutableLoadError: u32 = 3587;
pub const anon111_NSExecutableLinkError: u32 = 3588;
pub const anon111_NSFileErrorMinimum: u32 = 0;
pub const anon111_NSFileErrorMaximum: u32 = 1023;
pub const anon111_NSValidationErrorMinimum: u32 = 1024;
pub const anon111_NSValidationErrorMaximum: u32 = 2047;
pub const anon111_NSExecutableErrorMinimum: u32 = 3584;
pub const anon111_NSExecutableErrorMaximum: u32 = 3839;
pub const anon111_NSFormattingErrorMinimum: u32 = 2048;
pub const anon111_NSFormattingErrorMaximum: u32 = 2559;
pub const anon111_NSPropertyListReadCorruptError: u32 = 3840;
pub const anon111_NSPropertyListReadUnknownVersionError: u32 = 3841;
pub const anon111_NSPropertyListReadStreamError: u32 = 3842;
pub const anon111_NSPropertyListWriteStreamError: u32 = 3851;
pub const anon111_NSPropertyListWriteInvalidError: u32 = 3852;
pub const anon111_NSPropertyListErrorMinimum: u32 = 3840;
pub const anon111_NSPropertyListErrorMaximum: u32 = 4095;
pub const anon111_NSXPCConnectionInterrupted: u32 = 4097;
pub const anon111_NSXPCConnectionInvalid: u32 = 4099;
pub const anon111_NSXPCConnectionReplyInvalid: u32 = 4101;
pub const anon111_NSXPCConnectionCodeSigningRequirementFailure: u32 = 4102;
pub const anon111_NSXPCConnectionErrorMinimum: u32 = 4096;
pub const anon111_NSXPCConnectionErrorMaximum: u32 = 4224;
pub const anon111_NSUbiquitousFileUnavailableError: u32 = 4353;
pub const anon111_NSUbiquitousFileNotUploadedDueToQuotaError: u32 = 4354;
pub const anon111_NSUbiquitousFileUbiquityServerNotAvailable: u32 = 4355;
pub const anon111_NSUbiquitousFileErrorMinimum: u32 = 4352;
pub const anon111_NSUbiquitousFileErrorMaximum: u32 = 4607;
pub const anon111_NSUserActivityHandoffFailedError: u32 = 4608;
pub const anon111_NSUserActivityConnectionUnavailableError: u32 = 4609;
pub const anon111_NSUserActivityRemoteApplicationTimedOutError: u32 = 4610;
pub const anon111_NSUserActivityHandoffUserInfoTooLargeError: u32 = 4611;
pub const anon111_NSUserActivityErrorMinimum: u32 = 4608;
pub const anon111_NSUserActivityErrorMaximum: u32 = 4863;
pub const anon111_NSCoderReadCorruptError: u32 = 4864;
pub const anon111_NSCoderValueNotFoundError: u32 = 4865;
pub const anon111_NSCoderInvalidValueError: u32 = 4866;
pub const anon111_NSCoderErrorMinimum: u32 = 4864;
pub const anon111_NSCoderErrorMaximum: u32 = 4991;
pub const anon111_NSBundleErrorMinimum: u32 = 4992;
pub const anon111_NSBundleErrorMaximum: u32 = 5119;
pub const anon111_NSBundleOnDemandResourceOutOfSpaceError: u32 = 4992;
pub const anon111_NSBundleOnDemandResourceExceededMaximumSizeError: u32 = 4993;
pub const anon111_NSBundleOnDemandResourceInvalidTagError: u32 = 4994;
pub const anon111_NSCloudSharingNetworkFailureError: u32 = 5120;
pub const anon111_NSCloudSharingQuotaExceededError: u32 = 5121;
pub const anon111_NSCloudSharingTooManyParticipantsError: u32 = 5122;
pub const anon111_NSCloudSharingConflictError: u32 = 5123;
pub const anon111_NSCloudSharingNoPermissionError: u32 = 5124;
pub const anon111_NSCloudSharingOtherError: u32 = 5375;
pub const anon111_NSCloudSharingErrorMinimum: u32 = 5120;
pub const anon111_NSCloudSharingErrorMaximum: u32 = 5375;
pub const anon111_NSCompressionFailedError: u32 = 5376;
pub const anon111_NSDecompressionFailedError: u32 = 5377;
pub const anon111_NSCompressionErrorMinimum: u32 = 5376;
pub const anon111_NSCompressionErrorMaximum: u32 = 5503;

pub const OperatingSystemVersion = extern struct {
    majorVersion: objc.NSInteger,
    minorVersion: objc.NSInteger,
    patchVersion: objc.NSInteger,
};

/// https://developer.apple.com/documentation/Foundation/NSProcessInfo?language=objc
pub const ProcessInfo = opaque {
    pub const Internal = objc.ExternClass("NSProcessInfo", @This(), objc.NSObject, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn operatingSystem(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "operatingSystem", objc.NSUInteger, .{});
    }

    pub fn operatingSystemName(_self: *@This()) ?*String {
        return objc.msgSend(_self, "operatingSystemName", ?*String, .{});
    }

    pub fn isOperatingSystemAtLeastVersion(_self: *@This(), _version: OperatingSystemVersion) objc.BOOL {
        return objc.msgSend(_self, "isOperatingSystemAtLeastVersion:", objc.BOOL, .{_version});
    }

    pub fn disableSuddenTermination(_self: *@This()) void {
        return objc.msgSend(_self, "disableSuddenTermination", void, .{});
    }

    pub fn enableSuddenTermination(_self: *@This()) void {
        return objc.msgSend(_self, "enableSuddenTermination", void, .{});
    }

    pub fn disableAutomaticTermination(_self: *@This(), _reason: ?*String) void {
        return objc.msgSend(_self, "disableAutomaticTermination:", void, .{_reason});
    }

    pub fn enableAutomaticTermination(_self: *@This(), _reason: ?*String) void {
        return objc.msgSend(_self, "enableAutomaticTermination:", void, .{_reason});
    }

    pub fn processInfo() ?*ProcessInfo {
        return objc.msgSend(Internal.class(), "processInfo", ?*ProcessInfo, .{});
    }

    pub fn environment(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "environment", ?*anyopaque, .{});
    }

    pub fn arguments(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "arguments", ?*anyopaque, .{});
    }

    pub fn hostName(_self: *@This()) ?*String {
        return objc.msgSend(_self, "hostName", ?*String, .{});
    }

    pub fn processName(_self: *@This()) ?*String {
        return objc.msgSend(_self, "processName", ?*String, .{});
    }

    pub fn setProcessName(_self: *@This(), _processName: ?*String) void {
        return objc.msgSend(_self, "setProcessName:", void, .{_processName});
    }

    pub fn processIdentifier(_self: *@This()) i32 {
        return objc.msgSend(_self, "processIdentifier", i32, .{});
    }

    pub fn globallyUniqueString(_self: *@This()) ?*String {
        return objc.msgSend(_self, "globallyUniqueString", ?*String, .{});
    }

    pub fn operatingSystemVersionString(_self: *@This()) ?*String {
        return objc.msgSend(_self, "operatingSystemVersionString", ?*String, .{});
    }

    pub fn operatingSystemVersion(_self: *@This()) OperatingSystemVersion {
        return objc.msgSend(_self, "operatingSystemVersion", OperatingSystemVersion, .{});
    }

    pub fn processorCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "processorCount", objc.NSUInteger, .{});
    }

    pub fn activeProcessorCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "activeProcessorCount", objc.NSUInteger, .{});
    }

    pub fn physicalMemory(_self: *@This()) u64 {
        return objc.msgSend(_self, "physicalMemory", u64, .{});
    }

    pub fn systemUptime(_self: *@This()) TimeInterval {
        return objc.msgSend(_self, "systemUptime", TimeInterval, .{});
    }

    pub fn automaticTerminationSupportEnabled(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "automaticTerminationSupportEnabled", objc.BOOL, .{});
    }

    pub fn setAutomaticTerminationSupportEnabled(_self: *@This(), _automaticTerminationSupportEnabled: objc.BOOL) void {
        return objc.msgSend(_self, "setAutomaticTerminationSupportEnabled:", void, .{_automaticTerminationSupportEnabled});
    }
};

pub const ActivityOptions = objc.uint64_t;
pub const ActivityOptions_IdleDisplaySleepDisabled: objc.uint64_t = 1099511627776;
pub const ActivityOptions_IdleSystemSleepDisabled: objc.uint64_t = 1048576;
pub const ActivityOptions_SuddenTerminationDisabled: objc.uint64_t = 16384;
pub const ActivityOptions_AutomaticTerminationDisabled: objc.uint64_t = 32768;
pub const ActivityOptions_AnimationTrackingEnabled: objc.uint64_t = 35184372088832;
pub const ActivityOptions_TrackingEnabled: objc.uint64_t = 70368744177664;
pub const ActivityOptions_UserInitiated: objc.uint64_t = 16777215;
pub const ActivityOptions_UserInitiatedAllowingIdleSystemSleep: objc.uint64_t = 15728639;
pub const ActivityOptions_Background: objc.uint64_t = 255;
pub const ActivityOptions_LatencyCritical: objc.uint64_t = 1095216660480;
pub const ActivityOptions_UserInteractive: objc.uint64_t = 1095233437695;

pub const ProcessInfoThermalState = objc.NSInteger;
pub const ProcessInfoThermalState_Nominal: objc.NSInteger = 0;
pub const ProcessInfoThermalState_Fair: objc.NSInteger = 1;
pub const ProcessInfoThermalState_Serious: objc.NSInteger = 2;
pub const ProcessInfoThermalState_Critical: objc.NSInteger = 3;

/// https://developer.apple.com/documentation/Foundation/NSProxy?language=objc
pub const Proxy = opaque {
    pub const Internal = objc.ExternClass("NSProxy", @This(), objc.NSObject, &.{objc.NSObject});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn allocWithZone(_zone: ?*Zone) ?objc.Id {
        return objc.msgSend(Internal.class(), "allocWithZone:", ?objc.Id, .{_zone});
    }

    pub fn forwardInvocation(_self: *@This(), _invocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_invocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _sel: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_sel});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }
};

pub const TextCheckingType = objc.uint64_t;
pub const TextCheckingType_Orthography: objc.uint64_t = 1;
pub const TextCheckingType_Spelling: objc.uint64_t = 2;
pub const TextCheckingType_Grammar: objc.uint64_t = 4;
pub const TextCheckingType_Date: objc.uint64_t = 8;
pub const TextCheckingType_Address: objc.uint64_t = 16;
pub const TextCheckingType_Link: objc.uint64_t = 32;
pub const TextCheckingType_Quote: objc.uint64_t = 64;
pub const TextCheckingType_Dash: objc.uint64_t = 128;
pub const TextCheckingType_Replacement: objc.uint64_t = 256;
pub const TextCheckingType_Correction: objc.uint64_t = 512;
pub const TextCheckingType_RegularExpression: objc.uint64_t = 1024;
pub const TextCheckingType_PhoneNumber: objc.uint64_t = 2048;
pub const TextCheckingType_TransitInformation: objc.uint64_t = 4096;

pub const TextCheckingTypes = objc.uint64_t;

pub const TextCheckingKey = ?*String;

/// https://developer.apple.com/documentation/Foundation/NSTextCheckingResult?language=objc
pub const TextCheckingResult = opaque {
    pub const Internal = objc.ExternClass("NSTextCheckingResult", @This(), objc.NSObject, &.{ Copying, SecureCoding });
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn supportsSecureCoding() objc.BOOL {
        return objc.msgSend(Internal.class(), "supportsSecureCoding", objc.BOOL, .{});
    }

    pub fn resultType(_self: *@This()) TextCheckingType {
        return objc.msgSend(_self, "resultType", TextCheckingType, .{});
    }

    pub fn range(_self: *@This()) Range {
        return objc.msgSend(_self, "range", Range, .{});
    }
};

pub const RegularExpressionOptions = objc.NSUInteger;
pub const RegularExpressionOptions_CaseInsensitive: objc.NSUInteger = 1;
pub const RegularExpressionOptions_AllowCommentsAndWhitespace: objc.NSUInteger = 2;
pub const RegularExpressionOptions_IgnoreMetacharacters: objc.NSUInteger = 4;
pub const RegularExpressionOptions_DotMatchesLineSeparators: objc.NSUInteger = 8;
pub const RegularExpressionOptions_AnchorsMatchLines: objc.NSUInteger = 16;
pub const RegularExpressionOptions_UseUnixLineSeparators: objc.NSUInteger = 32;
pub const RegularExpressionOptions_UseUnicodeWordBoundaries: objc.NSUInteger = 64;

/// https://developer.apple.com/documentation/Foundation/NSRegularExpression?language=objc
pub const RegularExpression = opaque {
    pub const Internal = objc.ExternClass("NSRegularExpression", @This(), objc.NSObject, &.{ Copying, SecureCoding });
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn supportsSecureCoding() objc.BOOL {
        return objc.msgSend(Internal.class(), "supportsSecureCoding", objc.BOOL, .{});
    }

    pub fn regularExpressionWithPatternOptionsError(_pattern: ?*String, _options: RegularExpressionOptions, _error: ?*?*Error) ?*RegularExpression {
        return objc.msgSend(Internal.class(), "regularExpressionWithPattern:options:error:", ?*RegularExpression, .{ _pattern, _options, _error });
    }

    pub fn initWithPatternOptionsError(_self: *@This(), _pattern: ?*String, _options: RegularExpressionOptions, _error: ?*?*Error) *@This() {
        return objc.msgSend(_self, "initWithPattern:options:error:", *@This(), .{ _pattern, _options, _error });
    }

    pub fn escapedPatternForString(_string: ?*String) ?*String {
        return objc.msgSend(Internal.class(), "escapedPatternForString:", ?*String, .{_string});
    }

    pub fn pattern(_self: *@This()) ?*String {
        return objc.msgSend(_self, "pattern", ?*String, .{});
    }

    pub fn options(_self: *@This()) RegularExpressionOptions {
        return objc.msgSend(_self, "options", RegularExpressionOptions, .{});
    }

    pub fn numberOfCaptureGroups(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "numberOfCaptureGroups", objc.NSUInteger, .{});
    }
};

pub const MatchingOptions = objc.NSUInteger;
pub const MatchingOptions_ReportProgress: objc.NSUInteger = 1;
pub const MatchingOptions_ReportCompletion: objc.NSUInteger = 2;
pub const MatchingOptions_Anchored: objc.NSUInteger = 4;
pub const MatchingOptions_WithTransparentBounds: objc.NSUInteger = 8;
pub const MatchingOptions_WithoutAnchoringBounds: objc.NSUInteger = 16;

pub const MatchingFlags = objc.NSUInteger;
pub const MatchingFlags_Progress: objc.NSUInteger = 1;
pub const MatchingFlags_Completed: objc.NSUInteger = 2;
pub const MatchingFlags_HitEnd: objc.NSUInteger = 4;
pub const MatchingFlags_RequiredEnd: objc.NSUInteger = 8;
pub const MatchingFlags_InternalError: objc.NSUInteger = 16;

/// https://developer.apple.com/documentation/Foundation/NSDataDetector?language=objc
pub const DataDetector = opaque {
    pub const Internal = objc.ExternClass("NSDataDetector", @This(), RegularExpression, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn supportsSecureCoding() objc.BOOL {
        return objc.msgSend(Internal.class(), "supportsSecureCoding", objc.BOOL, .{});
    }

    pub fn regularExpressionWithPatternOptionsError(_pattern: ?*String, _options: RegularExpressionOptions, _error: ?*?*Error) ?*RegularExpression {
        return objc.msgSend(Internal.class(), "regularExpressionWithPattern:options:error:", ?*RegularExpression, .{ _pattern, _options, _error });
    }

    pub fn initWithPatternOptionsError(_self: *@This(), _pattern: ?*String, _options: RegularExpressionOptions, _error: ?*?*Error) *@This() {
        return objc.msgSend(_self, "initWithPattern:options:error:", *@This(), .{ _pattern, _options, _error });
    }

    pub fn escapedPatternForString(_string: ?*String) ?*String {
        return objc.msgSend(Internal.class(), "escapedPatternForString:", ?*String, .{_string});
    }

    pub fn pattern(_self: *@This()) ?*String {
        return objc.msgSend(_self, "pattern", ?*String, .{});
    }

    pub fn options(_self: *@This()) RegularExpressionOptions {
        return objc.msgSend(_self, "options", RegularExpressionOptions, .{});
    }

    pub fn numberOfCaptureGroups(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "numberOfCaptureGroups", objc.NSUInteger, .{});
    }

    pub fn dataDetectorWithTypesError(_checkingTypes: TextCheckingTypes, _error: ?*?*Error) ?*DataDetector {
        return objc.msgSend(Internal.class(), "dataDetectorWithTypes:error:", ?*DataDetector, .{ _checkingTypes, _error });
    }

    pub fn initWithTypesError(_self: *@This(), _checkingTypes: TextCheckingTypes, _error: ?*?*Error) *@This() {
        return objc.msgSend(_self, "initWithTypes:error:", *@This(), .{ _checkingTypes, _error });
    }

    pub fn checkingTypes(_self: *@This()) TextCheckingTypes {
        return objc.msgSend(_self, "checkingTypes", TextCheckingTypes, .{});
    }
};

/// https://developer.apple.com/documentation/Foundation/NSSortDescriptor?language=objc
pub const SortDescriptor = opaque {
    pub const Internal = objc.ExternClass("NSSortDescriptor", @This(), objc.NSObject, &.{ SecureCoding, Copying });
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn supportsSecureCoding() objc.BOOL {
        return objc.msgSend(Internal.class(), "supportsSecureCoding", objc.BOOL, .{});
    }

    pub fn sortDescriptorWithKeyAscending(_key: ?*String, _ascending: objc.BOOL) *@This() {
        return objc.msgSend(Internal.class(), "sortDescriptorWithKey:ascending:", *@This(), .{ _key, _ascending });
    }

    pub fn sortDescriptorWithKeyAscendingSelector(_key: ?*String, _ascending: objc.BOOL, _selector: objc.Selector) *@This() {
        return objc.msgSend(Internal.class(), "sortDescriptorWithKey:ascending:selector:", *@This(), .{ _key, _ascending, _selector });
    }

    pub fn initWithKeyAscending(_self: *@This(), _key: ?*String, _ascending: objc.BOOL) *@This() {
        return objc.msgSend(_self, "initWithKey:ascending:", *@This(), .{ _key, _ascending });
    }

    pub fn initWithKeyAscendingSelector(_self: *@This(), _key: ?*String, _ascending: objc.BOOL, _selector: objc.Selector) *@This() {
        return objc.msgSend(_self, "initWithKey:ascending:selector:", *@This(), .{ _key, _ascending, _selector });
    }

    pub fn allowEvaluation(_self: *@This()) void {
        return objc.msgSend(_self, "allowEvaluation", void, .{});
    }

    pub fn sortDescriptorWithKeyAscendingComparator(_key: ?*String, _ascending: objc.BOOL, _cmptr: Comparator) *@This() {
        return objc.msgSend(Internal.class(), "sortDescriptorWithKey:ascending:comparator:", *@This(), .{ _key, _ascending, _cmptr });
    }

    pub fn initWithKeyAscendingComparator(_self: *@This(), _key: ?*String, _ascending: objc.BOOL, _cmptr: Comparator) *@This() {
        return objc.msgSend(_self, "initWithKey:ascending:comparator:", *@This(), .{ _key, _ascending, _cmptr });
    }

    pub fn compareObjectToObject(_self: *@This(), _object1: ?objc.Id, _object2: ?objc.Id) ComparisonResult {
        return objc.msgSend(_self, "compareObject:toObject:", ComparisonResult, .{ _object1, _object2 });
    }

    pub fn key(_self: *@This()) ?*String {
        return objc.msgSend(_self, "key", ?*String, .{});
    }

    pub fn ascending(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "ascending", objc.BOOL, .{});
    }

    pub fn selector(_self: *@This()) objc.Selector {
        return objc.msgSend(_self, "selector", objc.Selector, .{});
    }

    pub fn comparator(_self: *@This()) Comparator {
        return objc.msgSend(_self, "comparator", Comparator, .{});
    }

    pub fn reversedSortDescriptor(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "reversedSortDescriptor", ?objc.Id, .{});
    }
};

pub const StreamPropertyKey = ?*String;

pub const StreamStatus = objc.NSUInteger;
pub const StreamStatus_NotOpen: objc.NSUInteger = 0;
pub const StreamStatus_Opening: objc.NSUInteger = 1;
pub const StreamStatus_Open: objc.NSUInteger = 2;
pub const StreamStatus_Reading: objc.NSUInteger = 3;
pub const StreamStatus_Writing: objc.NSUInteger = 4;
pub const StreamStatus_AtEnd: objc.NSUInteger = 5;
pub const StreamStatus_Closed: objc.NSUInteger = 6;
pub const StreamStatus_Error: objc.NSUInteger = 7;

pub const StreamEvent = objc.NSUInteger;
pub const StreamEvent_None: objc.NSUInteger = 0;
pub const StreamEvent_OpenCompleted: objc.NSUInteger = 1;
pub const StreamEvent_HasBytesAvailable: objc.NSUInteger = 2;
pub const StreamEvent_HasSpaceAvailable: objc.NSUInteger = 4;
pub const StreamEvent_ErrorOccurred: objc.NSUInteger = 8;
pub const StreamEvent_EndEncountered: objc.NSUInteger = 16;

/// https://developer.apple.com/documentation/Foundation/NSStream?language=objc
pub const Stream = opaque {
    pub const Internal = objc.ExternClass("NSStream", @This(), objc.NSObject, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn open(_self: *@This()) void {
        return objc.msgSend(_self, "open", void, .{});
    }

    pub fn close(_self: *@This()) void {
        return objc.msgSend(_self, "close", void, .{});
    }

    pub fn propertyForKey(_self: *@This(), _key: StreamPropertyKey) ?objc.Id {
        return objc.msgSend(_self, "propertyForKey:", ?objc.Id, .{_key});
    }

    pub fn setPropertyForKey(_self: *@This(), _property: ?objc.Id, _key: StreamPropertyKey) objc.BOOL {
        return objc.msgSend(_self, "setProperty:forKey:", objc.BOOL, .{ _property, _key });
    }

    pub fn scheduleInRunLoopForMode(_self: *@This(), _aRunLoop: ?*RunLoop, _mode: RunLoopMode) void {
        return objc.msgSend(_self, "scheduleInRunLoop:forMode:", void, .{ _aRunLoop, _mode });
    }

    pub fn removeFromRunLoopForMode(_self: *@This(), _aRunLoop: ?*RunLoop, _mode: RunLoopMode) void {
        return objc.msgSend(_self, "removeFromRunLoop:forMode:", void, .{ _aRunLoop, _mode });
    }

    pub fn delegate(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "delegate", ?*anyopaque, .{});
    }

    pub fn setDelegate(_self: *@This(), _delegate: ?*anyopaque) void {
        return objc.msgSend(_self, "setDelegate:", void, .{_delegate});
    }

    pub fn streamStatus(_self: *@This()) StreamStatus {
        return objc.msgSend(_self, "streamStatus", StreamStatus, .{});
    }

    pub fn streamError(_self: *@This()) ?*Error {
        return objc.msgSend(_self, "streamError", ?*Error, .{});
    }
};

/// https://developer.apple.com/documentation/Foundation/NSInputStream?language=objc
pub const InputStream = opaque {
    pub const Internal = objc.ExternClass("NSInputStream", @This(), Stream, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn open(_self: *@This()) void {
        return objc.msgSend(_self, "open", void, .{});
    }

    pub fn close(_self: *@This()) void {
        return objc.msgSend(_self, "close", void, .{});
    }

    pub fn propertyForKey(_self: *@This(), _key: StreamPropertyKey) ?objc.Id {
        return objc.msgSend(_self, "propertyForKey:", ?objc.Id, .{_key});
    }

    pub fn setPropertyForKey(_self: *@This(), _property: ?objc.Id, _key: StreamPropertyKey) objc.BOOL {
        return objc.msgSend(_self, "setProperty:forKey:", objc.BOOL, .{ _property, _key });
    }

    pub fn scheduleInRunLoopForMode(_self: *@This(), _aRunLoop: ?*RunLoop, _mode: RunLoopMode) void {
        return objc.msgSend(_self, "scheduleInRunLoop:forMode:", void, .{ _aRunLoop, _mode });
    }

    pub fn removeFromRunLoopForMode(_self: *@This(), _aRunLoop: ?*RunLoop, _mode: RunLoopMode) void {
        return objc.msgSend(_self, "removeFromRunLoop:forMode:", void, .{ _aRunLoop, _mode });
    }

    pub fn delegate(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "delegate", ?*anyopaque, .{});
    }

    pub fn setDelegate(_self: *@This(), _delegate: ?*anyopaque) void {
        return objc.msgSend(_self, "setDelegate:", void, .{_delegate});
    }

    pub fn streamStatus(_self: *@This()) StreamStatus {
        return objc.msgSend(_self, "streamStatus", StreamStatus, .{});
    }

    pub fn streamError(_self: *@This()) ?*Error {
        return objc.msgSend(_self, "streamError", ?*Error, .{});
    }

    pub fn readMaxLength(_self: *@This(), _buffer: ?*objc.uint8_t, _len: objc.NSUInteger) objc.NSInteger {
        return objc.msgSend(_self, "read:maxLength:", objc.NSInteger, .{ _buffer, _len });
    }

    pub fn getBufferLength(_self: *@This(), _buffer: ?*?*objc.uint8_t, _len: ?*objc.NSUInteger) objc.BOOL {
        return objc.msgSend(_self, "getBuffer:length:", objc.BOOL, .{ _buffer, _len });
    }

    pub fn initWithData(_self: *@This(), _data: ?*Data) *@This() {
        return objc.msgSend(_self, "initWithData:", *@This(), .{_data});
    }

    pub fn initWithURL(_self: *@This(), _url: ?*URL) *@This() {
        return objc.msgSend(_self, "initWithURL:", *@This(), .{_url});
    }

    pub fn hasBytesAvailable(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "hasBytesAvailable", objc.BOOL, .{});
    }
};

/// https://developer.apple.com/documentation/Foundation/NSOutputStream?language=objc
pub const OutputStream = opaque {
    pub const Internal = objc.ExternClass("NSOutputStream", @This(), Stream, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn open(_self: *@This()) void {
        return objc.msgSend(_self, "open", void, .{});
    }

    pub fn close(_self: *@This()) void {
        return objc.msgSend(_self, "close", void, .{});
    }

    pub fn propertyForKey(_self: *@This(), _key: StreamPropertyKey) ?objc.Id {
        return objc.msgSend(_self, "propertyForKey:", ?objc.Id, .{_key});
    }

    pub fn setPropertyForKey(_self: *@This(), _property: ?objc.Id, _key: StreamPropertyKey) objc.BOOL {
        return objc.msgSend(_self, "setProperty:forKey:", objc.BOOL, .{ _property, _key });
    }

    pub fn scheduleInRunLoopForMode(_self: *@This(), _aRunLoop: ?*RunLoop, _mode: RunLoopMode) void {
        return objc.msgSend(_self, "scheduleInRunLoop:forMode:", void, .{ _aRunLoop, _mode });
    }

    pub fn removeFromRunLoopForMode(_self: *@This(), _aRunLoop: ?*RunLoop, _mode: RunLoopMode) void {
        return objc.msgSend(_self, "removeFromRunLoop:forMode:", void, .{ _aRunLoop, _mode });
    }

    pub fn delegate(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "delegate", ?*anyopaque, .{});
    }

    pub fn setDelegate(_self: *@This(), _delegate: ?*anyopaque) void {
        return objc.msgSend(_self, "setDelegate:", void, .{_delegate});
    }

    pub fn streamStatus(_self: *@This()) StreamStatus {
        return objc.msgSend(_self, "streamStatus", StreamStatus, .{});
    }

    pub fn streamError(_self: *@This()) ?*Error {
        return objc.msgSend(_self, "streamError", ?*Error, .{});
    }

    pub fn writeMaxLength(_self: *@This(), _buffer: ?*objc.uint8_t, _len: objc.NSUInteger) objc.NSInteger {
        return objc.msgSend(_self, "write:maxLength:", objc.NSInteger, .{ _buffer, _len });
    }

    pub fn initToMemory(_self: *@This()) *@This() {
        return objc.msgSend(_self, "initToMemory", *@This(), .{});
    }

    pub fn initToBufferCapacity(_self: *@This(), _buffer: ?*objc.uint8_t, _capacity: objc.NSUInteger) *@This() {
        return objc.msgSend(_self, "initToBuffer:capacity:", *@This(), .{ _buffer, _capacity });
    }

    pub fn initWithURLAppend(_self: *@This(), _url: ?*URL, _shouldAppend: objc.BOOL) *@This() {
        return objc.msgSend(_self, "initWithURL:append:", *@This(), .{ _url, _shouldAppend });
    }

    pub fn hasSpaceAvailable(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "hasSpaceAvailable", objc.BOOL, .{});
    }
};

/// https://developer.apple.com/documentation/Foundation/NSStreamDelegate?language=objc
pub const StreamDelegate = opaque {
    pub const Internal = objc.ExternProtocol(@This(), &.{objc.NSObject});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn streamHandleEvent(_self: *@This(), _aStream: ?*Stream, _eventCode: StreamEvent) void {
        return objc.msgSend(_self, "stream:handleEvent:", void, .{ _aStream, _eventCode });
    }
};

pub const StreamSocketSecurityLevel = ?*String;

pub const StreamSOCKSProxyConfiguration = ?*String;

pub const StreamSOCKSProxyVersion = ?*String;

pub const StreamNetworkServiceTypeValue = ?*String;

/// https://developer.apple.com/documentation/Foundation/NSThread?language=objc
pub const Thread = opaque {
    pub const Internal = objc.ExternClass("NSThread", @This(), objc.NSObject, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn detachNewThreadWithBlock(_block: *const fn () callconv(.C) void) void {
        return objc.msgSend(Internal.class(), "detachNewThreadWithBlock:", void, .{_block});
    }

    pub fn detachNewThreadSelectorToTargetWithObject(_selector: objc.Selector, _target: ?objc.Id, _argument: ?objc.Id) void {
        return objc.msgSend(Internal.class(), "detachNewThreadSelector:toTarget:withObject:", void, .{ _selector, _target, _argument });
    }

    pub fn isMultiThreaded() objc.BOOL {
        return objc.msgSend(Internal.class(), "isMultiThreaded", objc.BOOL, .{});
    }

    pub fn sleepUntilDate(_date: ?*Date) void {
        return objc.msgSend(Internal.class(), "sleepUntilDate:", void, .{_date});
    }

    pub fn sleepForTimeInterval(_ti: TimeInterval) void {
        return objc.msgSend(Internal.class(), "sleepForTimeInterval:", void, .{_ti});
    }

    pub fn exit() void {
        return objc.msgSend(Internal.class(), "exit", void, .{});
    }

    pub fn threadPriority() f64 {
        return objc.msgSend(Internal.class(), "threadPriority", f64, .{});
    }

    pub fn setThreadPriority(_p: f64) objc.BOOL {
        return objc.msgSend(Internal.class(), "setThreadPriority:", objc.BOOL, .{_p});
    }

    pub fn initWithTargetSelectorObject(_self: *@This(), _target: ?objc.Id, _selector: objc.Selector, _argument: ?objc.Id) *@This() {
        return objc.msgSend(_self, "initWithTarget:selector:object:", *@This(), .{ _target, _selector, _argument });
    }

    pub fn initWithBlock(_self: *@This(), _block: *const fn () callconv(.C) void) *@This() {
        return objc.msgSend(_self, "initWithBlock:", *@This(), .{_block});
    }

    pub fn cancel(_self: *@This()) void {
        return objc.msgSend(_self, "cancel", void, .{});
    }

    pub fn start(_self: *@This()) void {
        return objc.msgSend(_self, "start", void, .{});
    }

    pub fn main(_self: *@This()) void {
        return objc.msgSend(_self, "main", void, .{});
    }

    pub fn currentThread() ?*Thread {
        return objc.msgSend(Internal.class(), "currentThread", ?*Thread, .{});
    }

    pub fn threadDictionary(_self: *@This()) ?*MutableDictionary {
        return objc.msgSend(_self, "threadDictionary", ?*MutableDictionary, .{});
    }

    pub fn qualityOfService(_self: *@This()) QualityOfService {
        return objc.msgSend(_self, "qualityOfService", QualityOfService, .{});
    }

    pub fn setQualityOfService(_self: *@This(), _qualityOfService: QualityOfService) void {
        return objc.msgSend(_self, "setQualityOfService:", void, .{_qualityOfService});
    }

    pub fn callStackReturnAddresses() ?*anyopaque {
        return objc.msgSend(Internal.class(), "callStackReturnAddresses", ?*anyopaque, .{});
    }

    pub fn callStackSymbols() ?*anyopaque {
        return objc.msgSend(Internal.class(), "callStackSymbols", ?*anyopaque, .{});
    }

    pub fn name(_self: *@This()) ?*String {
        return objc.msgSend(_self, "name", ?*String, .{});
    }

    pub fn setName(_self: *@This(), _name: ?*String) void {
        return objc.msgSend(_self, "setName:", void, .{_name});
    }

    pub fn stackSize(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "stackSize", objc.NSUInteger, .{});
    }

    pub fn setStackSize(_self: *@This(), _stackSize: objc.NSUInteger) void {
        return objc.msgSend(_self, "setStackSize:", void, .{_stackSize});
    }

    pub fn isMainThread(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isMainThread", objc.BOOL, .{});
    }

    pub fn mainThread() ?*Thread {
        return objc.msgSend(Internal.class(), "mainThread", ?*Thread, .{});
    }

    pub fn isExecuting(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isExecuting", objc.BOOL, .{});
    }

    pub fn isFinished(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isFinished", objc.BOOL, .{});
    }

    pub fn isCancelled(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isCancelled", objc.BOOL, .{});
    }
};

/// https://developer.apple.com/documentation/Foundation/NSTimeZone?language=objc
pub const TimeZone = opaque {
    pub const Internal = objc.ExternClass("NSTimeZone", @This(), objc.NSObject, &.{ Copying, SecureCoding });
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn supportsSecureCoding() objc.BOOL {
        return objc.msgSend(Internal.class(), "supportsSecureCoding", objc.BOOL, .{});
    }

    pub fn secondsFromGMTForDate(_self: *@This(), _aDate: ?*Date) objc.NSInteger {
        return objc.msgSend(_self, "secondsFromGMTForDate:", objc.NSInteger, .{_aDate});
    }

    pub fn abbreviationForDate(_self: *@This(), _aDate: ?*Date) ?*String {
        return objc.msgSend(_self, "abbreviationForDate:", ?*String, .{_aDate});
    }

    pub fn isDaylightSavingTimeForDate(_self: *@This(), _aDate: ?*Date) objc.BOOL {
        return objc.msgSend(_self, "isDaylightSavingTimeForDate:", objc.BOOL, .{_aDate});
    }

    pub fn daylightSavingTimeOffsetForDate(_self: *@This(), _aDate: ?*Date) TimeInterval {
        return objc.msgSend(_self, "daylightSavingTimeOffsetForDate:", TimeInterval, .{_aDate});
    }

    pub fn nextDaylightSavingTimeTransitionAfterDate(_self: *@This(), _aDate: ?*Date) ?*Date {
        return objc.msgSend(_self, "nextDaylightSavingTimeTransitionAfterDate:", ?*Date, .{_aDate});
    }

    pub fn name(_self: *@This()) ?*String {
        return objc.msgSend(_self, "name", ?*String, .{});
    }

    pub fn data(_self: *@This()) ?*Data {
        return objc.msgSend(_self, "data", ?*Data, .{});
    }
};

pub const TimeZoneNameStyle = objc.NSInteger;
pub const TimeZoneNameStyle_Standard: objc.NSInteger = 0;
pub const TimeZoneNameStyle_ShortStandard: objc.NSInteger = 1;
pub const TimeZoneNameStyle_DaylightSaving: objc.NSInteger = 2;
pub const TimeZoneNameStyle_ShortDaylightSaving: objc.NSInteger = 3;
pub const TimeZoneNameStyle_Generic: objc.NSInteger = 4;
pub const TimeZoneNameStyle_ShortGeneric: objc.NSInteger = 5;

/// https://developer.apple.com/documentation/Foundation/NSTimer?language=objc
pub const Timer = opaque {
    pub const Internal = objc.ExternClass("NSTimer", @This(), objc.NSObject, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn timerWithTimeIntervalInvocationRepeats(_ti: TimeInterval, _invocation: ?*Invocation, _yesOrNo: objc.BOOL) ?*Timer {
        return objc.msgSend(Internal.class(), "timerWithTimeInterval:invocation:repeats:", ?*Timer, .{ _ti, _invocation, _yesOrNo });
    }

    pub fn scheduledTimerWithTimeIntervalInvocationRepeats(_ti: TimeInterval, _invocation: ?*Invocation, _yesOrNo: objc.BOOL) ?*Timer {
        return objc.msgSend(Internal.class(), "scheduledTimerWithTimeInterval:invocation:repeats:", ?*Timer, .{ _ti, _invocation, _yesOrNo });
    }

    pub fn timerWithTimeIntervalTargetSelectorUserInfoRepeats(
        _ti: TimeInterval,
        _aTarget: ?objc.Id,
        _aSelector: objc.Selector,
        _userInfo: ?objc.Id,
        _yesOrNo: objc.BOOL,
    ) ?*Timer {
        return objc.msgSend(Internal.class(), "timerWithTimeInterval:target:selector:userInfo:repeats:", ?*Timer, .{
            _ti,
            _aTarget,
            _aSelector,
            _userInfo,
            _yesOrNo,
        });
    }

    pub fn scheduledTimerWithTimeIntervalTargetSelectorUserInfoRepeats(
        _ti: TimeInterval,
        _aTarget: ?objc.Id,
        _aSelector: objc.Selector,
        _userInfo: ?objc.Id,
        _yesOrNo: objc.BOOL,
    ) ?*Timer {
        return objc.msgSend(Internal.class(), "scheduledTimerWithTimeInterval:target:selector:userInfo:repeats:", ?*Timer, .{
            _ti,
            _aTarget,
            _aSelector,
            _userInfo,
            _yesOrNo,
        });
    }

    pub fn timerWithTimeIntervalRepeatsBlock(_interval: TimeInterval, _repeats: objc.BOOL, _block: *const fn (?*Timer) callconv(.C) void) ?*Timer {
        return objc.msgSend(Internal.class(), "timerWithTimeInterval:repeats:block:", ?*Timer, .{ _interval, _repeats, _block });
    }

    pub fn scheduledTimerWithTimeIntervalRepeatsBlock(_interval: TimeInterval, _repeats: objc.BOOL, _block: *const fn (?*Timer) callconv(.C) void) ?*Timer {
        return objc.msgSend(Internal.class(), "scheduledTimerWithTimeInterval:repeats:block:", ?*Timer, .{ _interval, _repeats, _block });
    }

    pub fn initWithFireDateIntervalRepeatsBlock(
        _self: *@This(),
        _date: ?*Date,
        _interval: TimeInterval,
        _repeats: objc.BOOL,
        _block: *const fn (?*Timer) callconv(.C) void,
    ) *@This() {
        return objc.msgSend(_self, "initWithFireDate:interval:repeats:block:", *@This(), .{
            _date,
            _interval,
            _repeats,
            _block,
        });
    }

    pub fn initWithFireDateIntervalTargetSelectorUserInfoRepeats(
        _self: *@This(),
        _date: ?*Date,
        _ti: TimeInterval,
        _t: ?objc.Id,
        _s: objc.Selector,
        _ui: ?objc.Id,
        _rep: objc.BOOL,
    ) *@This() {
        return objc.msgSend(_self, "initWithFireDate:interval:target:selector:userInfo:repeats:", *@This(), .{
            _date,
            _ti,
            _t,
            _s,
            _ui,
            _rep,
        });
    }

    pub fn fire(_self: *@This()) void {
        return objc.msgSend(_self, "fire", void, .{});
    }

    pub fn invalidate(_self: *@This()) void {
        return objc.msgSend(_self, "invalidate", void, .{});
    }

    pub fn fireDate(_self: *@This()) ?*Date {
        return objc.msgSend(_self, "fireDate", ?*Date, .{});
    }

    pub fn setFireDate(_self: *@This(), _fireDate: ?*Date) void {
        return objc.msgSend(_self, "setFireDate:", void, .{_fireDate});
    }

    pub fn timeInterval(_self: *@This()) TimeInterval {
        return objc.msgSend(_self, "timeInterval", TimeInterval, .{});
    }

    pub fn tolerance(_self: *@This()) TimeInterval {
        return objc.msgSend(_self, "tolerance", TimeInterval, .{});
    }

    pub fn setTolerance(_self: *@This(), _tolerance: TimeInterval) void {
        return objc.msgSend(_self, "setTolerance:", void, .{_tolerance});
    }

    pub fn isValid(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isValid", objc.BOOL, .{});
    }

    pub fn userInfo(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "userInfo", ?objc.Id, .{});
    }
};

/// https://developer.apple.com/documentation/Foundation/NSURLAuthenticationChallengeSender?language=objc
pub const URLAuthenticationChallengeSender = opaque {
    pub const Internal = objc.ExternProtocol(@This(), &.{objc.NSObject});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn useCredentialForAuthenticationChallenge(_self: *@This(), _credential: ?*URLCredential, _challenge: ?*URLAuthenticationChallenge) void {
        return objc.msgSend(_self, "useCredential:forAuthenticationChallenge:", void, .{ _credential, _challenge });
    }

    pub fn continueWithoutCredentialForAuthenticationChallenge(_self: *@This(), _challenge: ?*URLAuthenticationChallenge) void {
        return objc.msgSend(_self, "continueWithoutCredentialForAuthenticationChallenge:", void, .{_challenge});
    }

    pub fn cancelAuthenticationChallenge(_self: *@This(), _challenge: ?*URLAuthenticationChallenge) void {
        return objc.msgSend(_self, "cancelAuthenticationChallenge:", void, .{_challenge});
    }

    pub fn performDefaultHandlingForAuthenticationChallenge(_self: *@This(), _challenge: ?*URLAuthenticationChallenge) void {
        return objc.msgSend(_self, "performDefaultHandlingForAuthenticationChallenge:", void, .{_challenge});
    }

    pub fn rejectProtectionSpaceAndContinueWithChallenge(_self: *@This(), _challenge: ?*URLAuthenticationChallenge) void {
        return objc.msgSend(_self, "rejectProtectionSpaceAndContinueWithChallenge:", void, .{_challenge});
    }
};

/// https://developer.apple.com/documentation/Foundation/NSURLAuthenticationChallenge?language=objc
pub const URLAuthenticationChallenge = opaque {
    pub const Internal = objc.ExternClass("NSURLAuthenticationChallenge", @This(), objc.NSObject, &.{SecureCoding});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn supportsSecureCoding() objc.BOOL {
        return objc.msgSend(Internal.class(), "supportsSecureCoding", objc.BOOL, .{});
    }

    pub fn initWithProtectionSpaceProposedCredentialPreviousFailureCountFailureResponseErrorSender(
        _self: *@This(),
        _space: ?*URLProtectionSpace,
        _credential: ?*URLCredential,
        _previousFailureCount: objc.NSInteger,
        _response: ?*URLResponse,
        _error: ?*Error,
        _sender: ?*anyopaque,
    ) *@This() {
        return objc.msgSend(_self, "initWithProtectionSpace:proposedCredential:previousFailureCount:failureResponse:error:sender:", *@This(), .{
            _space,
            _credential,
            _previousFailureCount,
            _response,
            _error,
            _sender,
        });
    }

    pub fn initWithAuthenticationChallengeSender(_self: *@This(), _challenge: ?*URLAuthenticationChallenge, _sender: ?*anyopaque) *@This() {
        return objc.msgSend(_self, "initWithAuthenticationChallenge:sender:", *@This(), .{ _challenge, _sender });
    }

    pub fn protectionSpace(_self: *@This()) ?*URLProtectionSpace {
        return objc.msgSend(_self, "protectionSpace", ?*URLProtectionSpace, .{});
    }

    pub fn proposedCredential(_self: *@This()) ?*URLCredential {
        return objc.msgSend(_self, "proposedCredential", ?*URLCredential, .{});
    }

    pub fn previousFailureCount(_self: *@This()) objc.NSInteger {
        return objc.msgSend(_self, "previousFailureCount", objc.NSInteger, .{});
    }

    pub fn failureResponse(_self: *@This()) ?*URLResponse {
        return objc.msgSend(_self, "failureResponse", ?*URLResponse, .{});
    }

    pub fn @"error"(_self: *@This()) ?*Error {
        return objc.msgSend(_self, "error", ?*Error, .{});
    }

    pub fn sender(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "sender", ?*anyopaque, .{});
    }
};

pub const URLCacheStoragePolicy = objc.NSUInteger;
pub const URLCacheStoragePolicy_Allowed: objc.NSUInteger = 0;
pub const URLCacheStoragePolicy_AllowedInMemoryOnly: objc.NSUInteger = 1;
pub const URLCacheStoragePolicy_NotAllowed: objc.NSUInteger = 2;

/// https://developer.apple.com/documentation/Foundation/NSCachedURLResponse?language=objc
pub const CachedURLResponse = opaque {
    pub const Internal = objc.ExternClass("NSCachedURLResponse", @This(), objc.NSObject, &.{ SecureCoding, Copying });
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn supportsSecureCoding() objc.BOOL {
        return objc.msgSend(Internal.class(), "supportsSecureCoding", objc.BOOL, .{});
    }

    pub fn initWithResponseData(_self: *@This(), _response: ?*URLResponse, _data: ?*Data) *@This() {
        return objc.msgSend(_self, "initWithResponse:data:", *@This(), .{ _response, _data });
    }

    pub fn initWithResponseDataUserInfoStoragePolicy(
        _self: *@This(),
        _response: ?*URLResponse,
        _data: ?*Data,
        _userInfo: ?*Dictionary,
        _storagePolicy: URLCacheStoragePolicy,
    ) *@This() {
        return objc.msgSend(_self, "initWithResponse:data:userInfo:storagePolicy:", *@This(), .{
            _response,
            _data,
            _userInfo,
            _storagePolicy,
        });
    }

    pub fn response(_self: *@This()) ?*URLResponse {
        return objc.msgSend(_self, "response", ?*URLResponse, .{});
    }

    pub fn data(_self: *@This()) ?*Data {
        return objc.msgSend(_self, "data", ?*Data, .{});
    }

    pub fn userInfo(_self: *@This()) ?*Dictionary {
        return objc.msgSend(_self, "userInfo", ?*Dictionary, .{});
    }

    pub fn storagePolicy(_self: *@This()) URLCacheStoragePolicy {
        return objc.msgSend(_self, "storagePolicy", URLCacheStoragePolicy, .{});
    }
};

/// https://developer.apple.com/documentation/Foundation/NSURLCache?language=objc
pub const URLCache = opaque {
    pub const Internal = objc.ExternClass("NSURLCache", @This(), objc.NSObject, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn initWithMemoryCapacityDiskCapacityDiskPath(_self: *@This(), _memoryCapacity: objc.NSUInteger, _diskCapacity: objc.NSUInteger, _path: ?*String) *@This() {
        return objc.msgSend(_self, "initWithMemoryCapacity:diskCapacity:diskPath:", *@This(), .{ _memoryCapacity, _diskCapacity, _path });
    }

    pub fn initWithMemoryCapacityDiskCapacityDirectoryURL(_self: *@This(), _memoryCapacity: objc.NSUInteger, _diskCapacity: objc.NSUInteger, _directoryURL: ?*URL) *@This() {
        return objc.msgSend(_self, "initWithMemoryCapacity:diskCapacity:directoryURL:", *@This(), .{ _memoryCapacity, _diskCapacity, _directoryURL });
    }

    pub fn cachedResponseForRequest(_self: *@This(), _request: ?*URLRequest) ?*CachedURLResponse {
        return objc.msgSend(_self, "cachedResponseForRequest:", ?*CachedURLResponse, .{_request});
    }

    pub fn storeCachedResponseForRequest(_self: *@This(), _cachedResponse: ?*CachedURLResponse, _request: ?*URLRequest) void {
        return objc.msgSend(_self, "storeCachedResponse:forRequest:", void, .{ _cachedResponse, _request });
    }

    pub fn removeCachedResponseForRequest(_self: *@This(), _request: ?*URLRequest) void {
        return objc.msgSend(_self, "removeCachedResponseForRequest:", void, .{_request});
    }

    pub fn removeAllCachedResponses(_self: *@This()) void {
        return objc.msgSend(_self, "removeAllCachedResponses", void, .{});
    }

    pub fn removeCachedResponsesSinceDate(_self: *@This(), _date: ?*Date) void {
        return objc.msgSend(_self, "removeCachedResponsesSinceDate:", void, .{_date});
    }

    pub fn sharedURLCache() ?*URLCache {
        return objc.msgSend(Internal.class(), "sharedURLCache", ?*URLCache, .{});
    }

    pub fn setSharedURLCache(_sharedURLCache: ?*URLCache) void {
        return objc.msgSend(Internal.class(), "setSharedURLCache:", void, .{_sharedURLCache});
    }

    pub fn memoryCapacity(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "memoryCapacity", objc.NSUInteger, .{});
    }

    pub fn setMemoryCapacity(_self: *@This(), _memoryCapacity: objc.NSUInteger) void {
        return objc.msgSend(_self, "setMemoryCapacity:", void, .{_memoryCapacity});
    }

    pub fn diskCapacity(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "diskCapacity", objc.NSUInteger, .{});
    }

    pub fn setDiskCapacity(_self: *@This(), _diskCapacity: objc.NSUInteger) void {
        return objc.msgSend(_self, "setDiskCapacity:", void, .{_diskCapacity});
    }

    pub fn currentMemoryUsage(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "currentMemoryUsage", objc.NSUInteger, .{});
    }

    pub fn currentDiskUsage(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "currentDiskUsage", objc.NSUInteger, .{});
    }
};

/// https://developer.apple.com/documentation/Foundation/NSURLConnection?language=objc
pub const URLConnection = opaque {
    pub const Internal = objc.ExternClass("NSURLConnection", @This(), objc.NSObject, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn initWithRequestDelegateStartImmediately(_self: *@This(), _request: ?*URLRequest, _delegate: ?objc.Id, _startImmediately: objc.BOOL) *@This() {
        return objc.msgSend(_self, "initWithRequest:delegate:startImmediately:", *@This(), .{ _request, _delegate, _startImmediately });
    }

    pub fn initWithRequestDelegate(_self: *@This(), _request: ?*URLRequest, _delegate: ?objc.Id) *@This() {
        return objc.msgSend(_self, "initWithRequest:delegate:", *@This(), .{ _request, _delegate });
    }

    pub fn connectionWithRequestDelegate(_request: ?*URLRequest, _delegate: ?objc.Id) ?*URLConnection {
        return objc.msgSend(Internal.class(), "connectionWithRequest:delegate:", ?*URLConnection, .{ _request, _delegate });
    }

    pub fn start(_self: *@This()) void {
        return objc.msgSend(_self, "start", void, .{});
    }

    pub fn cancel(_self: *@This()) void {
        return objc.msgSend(_self, "cancel", void, .{});
    }

    pub fn scheduleInRunLoopForMode(_self: *@This(), _aRunLoop: ?*RunLoop, _mode: RunLoopMode) void {
        return objc.msgSend(_self, "scheduleInRunLoop:forMode:", void, .{ _aRunLoop, _mode });
    }

    pub fn unscheduleFromRunLoopForMode(_self: *@This(), _aRunLoop: ?*RunLoop, _mode: RunLoopMode) void {
        return objc.msgSend(_self, "unscheduleFromRunLoop:forMode:", void, .{ _aRunLoop, _mode });
    }

    pub fn setDelegateQueue(_self: *@This(), _queue: ?*OperationQueue) void {
        return objc.msgSend(_self, "setDelegateQueue:", void, .{_queue});
    }

    pub fn canHandleRequest(_request: ?*URLRequest) objc.BOOL {
        return objc.msgSend(Internal.class(), "canHandleRequest:", objc.BOOL, .{_request});
    }

    pub fn originalRequest(_self: *@This()) ?*URLRequest {
        return objc.msgSend(_self, "originalRequest", ?*URLRequest, .{});
    }

    pub fn currentRequest(_self: *@This()) ?*URLRequest {
        return objc.msgSend(_self, "currentRequest", ?*URLRequest, .{});
    }
};

/// https://developer.apple.com/documentation/Foundation/NSURLConnectionDelegate?language=objc
pub const URLConnectionDelegate = opaque {
    pub const Internal = objc.ExternProtocol(@This(), &.{objc.NSObject});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn connectionDidFailWithError(_self: *@This(), _connection: ?*URLConnection, _error: ?*Error) void {
        return objc.msgSend(_self, "connection:didFailWithError:", void, .{ _connection, _error });
    }

    pub fn connectionShouldUseCredentialStorage(_self: *@This(), _connection: ?*URLConnection) objc.BOOL {
        return objc.msgSend(_self, "connectionShouldUseCredentialStorage:", objc.BOOL, .{_connection});
    }

    pub fn connectionWillSendRequestForAuthenticationChallenge(_self: *@This(), _connection: ?*URLConnection, _challenge: ?*URLAuthenticationChallenge) void {
        return objc.msgSend(_self, "connection:willSendRequestForAuthenticationChallenge:", void, .{ _connection, _challenge });
    }

    pub fn connectionCanAuthenticateAgainstProtectionSpace(_self: *@This(), _connection: ?*URLConnection, _protectionSpace: ?*URLProtectionSpace) objc.BOOL {
        return objc.msgSend(_self, "connection:canAuthenticateAgainstProtectionSpace:", objc.BOOL, .{ _connection, _protectionSpace });
    }

    pub fn connectionDidReceiveAuthenticationChallenge(_self: *@This(), _connection: ?*URLConnection, _challenge: ?*URLAuthenticationChallenge) void {
        return objc.msgSend(_self, "connection:didReceiveAuthenticationChallenge:", void, .{ _connection, _challenge });
    }

    pub fn connectionDidCancelAuthenticationChallenge(_self: *@This(), _connection: ?*URLConnection, _challenge: ?*URLAuthenticationChallenge) void {
        return objc.msgSend(_self, "connection:didCancelAuthenticationChallenge:", void, .{ _connection, _challenge });
    }
};

/// https://developer.apple.com/documentation/Foundation/NSURLConnectionDataDelegate?language=objc
pub const URLConnectionDataDelegate = opaque {
    pub const Internal = objc.ExternProtocol(@This(), &.{URLConnectionDelegate});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn connectionDidFailWithError(_self: *@This(), _connection: ?*URLConnection, _error: ?*Error) void {
        return objc.msgSend(_self, "connection:didFailWithError:", void, .{ _connection, _error });
    }

    pub fn connectionShouldUseCredentialStorage(_self: *@This(), _connection: ?*URLConnection) objc.BOOL {
        return objc.msgSend(_self, "connectionShouldUseCredentialStorage:", objc.BOOL, .{_connection});
    }

    pub fn connectionWillSendRequestForAuthenticationChallenge(_self: *@This(), _connection: ?*URLConnection, _challenge: ?*URLAuthenticationChallenge) void {
        return objc.msgSend(_self, "connection:willSendRequestForAuthenticationChallenge:", void, .{ _connection, _challenge });
    }

    pub fn connectionCanAuthenticateAgainstProtectionSpace(_self: *@This(), _connection: ?*URLConnection, _protectionSpace: ?*URLProtectionSpace) objc.BOOL {
        return objc.msgSend(_self, "connection:canAuthenticateAgainstProtectionSpace:", objc.BOOL, .{ _connection, _protectionSpace });
    }

    pub fn connectionDidReceiveAuthenticationChallenge(_self: *@This(), _connection: ?*URLConnection, _challenge: ?*URLAuthenticationChallenge) void {
        return objc.msgSend(_self, "connection:didReceiveAuthenticationChallenge:", void, .{ _connection, _challenge });
    }

    pub fn connectionDidCancelAuthenticationChallenge(_self: *@This(), _connection: ?*URLConnection, _challenge: ?*URLAuthenticationChallenge) void {
        return objc.msgSend(_self, "connection:didCancelAuthenticationChallenge:", void, .{ _connection, _challenge });
    }

    pub fn connectionWillSendRequestRedirectResponse(_self: *@This(), _connection: ?*URLConnection, _request: ?*URLRequest, _response: ?*URLResponse) ?*URLRequest {
        return objc.msgSend(_self, "connection:willSendRequest:redirectResponse:", ?*URLRequest, .{ _connection, _request, _response });
    }

    pub fn connectionDidReceiveResponse(_self: *@This(), _connection: ?*URLConnection, _response: ?*URLResponse) void {
        return objc.msgSend(_self, "connection:didReceiveResponse:", void, .{ _connection, _response });
    }

    pub fn connectionDidReceiveData(_self: *@This(), _connection: ?*URLConnection, _data: ?*Data) void {
        return objc.msgSend(_self, "connection:didReceiveData:", void, .{ _connection, _data });
    }

    pub fn connectionNeedNewBodyStream(_self: *@This(), _connection: ?*URLConnection, _request: ?*URLRequest) ?*InputStream {
        return objc.msgSend(_self, "connection:needNewBodyStream:", ?*InputStream, .{ _connection, _request });
    }

    pub fn connectionDidSendBodyDataTotalBytesWrittenTotalBytesExpectedToWrite(
        _self: *@This(),
        _connection: ?*URLConnection,
        _bytesWritten: objc.NSInteger,
        _totalBytesWritten: objc.NSInteger,
        _totalBytesExpectedToWrite: objc.NSInteger,
    ) void {
        return objc.msgSend(_self, "connection:didSendBodyData:totalBytesWritten:totalBytesExpectedToWrite:", void, .{
            _connection,
            _bytesWritten,
            _totalBytesWritten,
            _totalBytesExpectedToWrite,
        });
    }

    pub fn connectionWillCacheResponse(_self: *@This(), _connection: ?*URLConnection, _cachedResponse: ?*CachedURLResponse) ?*CachedURLResponse {
        return objc.msgSend(_self, "connection:willCacheResponse:", ?*CachedURLResponse, .{ _connection, _cachedResponse });
    }

    pub fn connectionDidFinishLoading(_self: *@This(), _connection: ?*URLConnection) void {
        return objc.msgSend(_self, "connectionDidFinishLoading:", void, .{_connection});
    }
};

/// https://developer.apple.com/documentation/Foundation/NSURLConnectionDownloadDelegate?language=objc
pub const URLConnectionDownloadDelegate = opaque {
    pub const Internal = objc.ExternProtocol(@This(), &.{URLConnectionDelegate});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn connectionDidFailWithError(_self: *@This(), _connection: ?*URLConnection, _error: ?*Error) void {
        return objc.msgSend(_self, "connection:didFailWithError:", void, .{ _connection, _error });
    }

    pub fn connectionShouldUseCredentialStorage(_self: *@This(), _connection: ?*URLConnection) objc.BOOL {
        return objc.msgSend(_self, "connectionShouldUseCredentialStorage:", objc.BOOL, .{_connection});
    }

    pub fn connectionWillSendRequestForAuthenticationChallenge(_self: *@This(), _connection: ?*URLConnection, _challenge: ?*URLAuthenticationChallenge) void {
        return objc.msgSend(_self, "connection:willSendRequestForAuthenticationChallenge:", void, .{ _connection, _challenge });
    }

    pub fn connectionCanAuthenticateAgainstProtectionSpace(_self: *@This(), _connection: ?*URLConnection, _protectionSpace: ?*URLProtectionSpace) objc.BOOL {
        return objc.msgSend(_self, "connection:canAuthenticateAgainstProtectionSpace:", objc.BOOL, .{ _connection, _protectionSpace });
    }

    pub fn connectionDidReceiveAuthenticationChallenge(_self: *@This(), _connection: ?*URLConnection, _challenge: ?*URLAuthenticationChallenge) void {
        return objc.msgSend(_self, "connection:didReceiveAuthenticationChallenge:", void, .{ _connection, _challenge });
    }

    pub fn connectionDidCancelAuthenticationChallenge(_self: *@This(), _connection: ?*URLConnection, _challenge: ?*URLAuthenticationChallenge) void {
        return objc.msgSend(_self, "connection:didCancelAuthenticationChallenge:", void, .{ _connection, _challenge });
    }

    pub fn connectionDidWriteDataTotalBytesWrittenExpectedTotalBytes(
        _self: *@This(),
        _connection: ?*URLConnection,
        _bytesWritten: i64,
        _totalBytesWritten: i64,
        _expectedTotalBytes: i64,
    ) void {
        return objc.msgSend(_self, "connection:didWriteData:totalBytesWritten:expectedTotalBytes:", void, .{
            _connection,
            _bytesWritten,
            _totalBytesWritten,
            _expectedTotalBytes,
        });
    }

    pub fn connectionDidResumeDownloadingTotalBytesWrittenExpectedTotalBytes(_self: *@This(), _connection: ?*URLConnection, _totalBytesWritten: i64, _expectedTotalBytes: i64) void {
        return objc.msgSend(_self, "connectionDidResumeDownloading:totalBytesWritten:expectedTotalBytes:", void, .{ _connection, _totalBytesWritten, _expectedTotalBytes });
    }

    pub fn connectionDidFinishDownloadingDestinationURL(_self: *@This(), _connection: ?*URLConnection, _destinationURL: ?*URL) void {
        return objc.msgSend(_self, "connectionDidFinishDownloading:destinationURL:", void, .{ _connection, _destinationURL });
    }
};

pub const URLCredentialPersistence = objc.NSUInteger;
pub const URLCredentialPersistence_None: objc.NSUInteger = 0;
pub const URLCredentialPersistence_ForSession: objc.NSUInteger = 1;
pub const URLCredentialPersistence_Permanent: objc.NSUInteger = 2;
pub const URLCredentialPersistence_Synchronizable: objc.NSUInteger = 3;

/// https://developer.apple.com/documentation/Foundation/NSURLCredential?language=objc
pub const URLCredential = opaque {
    pub const Internal = objc.ExternClass("NSURLCredential", @This(), objc.NSObject, &.{ SecureCoding, Copying });
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn supportsSecureCoding() objc.BOOL {
        return objc.msgSend(Internal.class(), "supportsSecureCoding", objc.BOOL, .{});
    }

    pub fn persistence(_self: *@This()) URLCredentialPersistence {
        return objc.msgSend(_self, "persistence", URLCredentialPersistence, .{});
    }
};

/// https://developer.apple.com/documentation/Foundation/NSURLProtectionSpace?language=objc
pub const URLProtectionSpace = opaque {
    pub const Internal = objc.ExternClass("NSURLProtectionSpace", @This(), objc.NSObject, &.{ SecureCoding, Copying });
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn supportsSecureCoding() objc.BOOL {
        return objc.msgSend(Internal.class(), "supportsSecureCoding", objc.BOOL, .{});
    }

    pub fn initWithHostPortProtocolRealmAuthenticationMethod(
        _self: *@This(),
        _host: ?*String,
        _port: objc.NSInteger,
        _protocol: ?*String,
        _realm: ?*String,
        _authenticationMethod: ?*String,
    ) *@This() {
        return objc.msgSend(_self, "initWithHost:port:protocol:realm:authenticationMethod:", *@This(), .{
            _host,
            _port,
            _protocol,
            _realm,
            _authenticationMethod,
        });
    }

    pub fn initWithProxyHostPortTypeRealmAuthenticationMethod(
        _self: *@This(),
        _host: ?*String,
        _port: objc.NSInteger,
        _type: ?*String,
        _realm: ?*String,
        _authenticationMethod: ?*String,
    ) *@This() {
        return objc.msgSend(_self, "initWithProxyHost:port:type:realm:authenticationMethod:", *@This(), .{
            _host,
            _port,
            _type,
            _realm,
            _authenticationMethod,
        });
    }

    pub fn realm(_self: *@This()) ?*String {
        return objc.msgSend(_self, "realm", ?*String, .{});
    }

    pub fn receivesCredentialSecurely(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "receivesCredentialSecurely", objc.BOOL, .{});
    }

    pub fn host(_self: *@This()) ?*String {
        return objc.msgSend(_self, "host", ?*String, .{});
    }

    pub fn port(_self: *@This()) objc.NSInteger {
        return objc.msgSend(_self, "port", objc.NSInteger, .{});
    }

    pub fn proxyType(_self: *@This()) ?*String {
        return objc.msgSend(_self, "proxyType", ?*String, .{});
    }

    pub fn protocol(_self: *@This()) ?*String {
        return objc.msgSend(_self, "protocol", ?*String, .{});
    }

    pub fn authenticationMethod(_self: *@This()) ?*String {
        return objc.msgSend(_self, "authenticationMethod", ?*String, .{});
    }
};

/// https://developer.apple.com/documentation/Foundation/NSURLCredentialStorage?language=objc
pub const URLCredentialStorage = opaque {
    pub const Internal = objc.ExternClass("NSURLCredentialStorage", @This(), objc.NSObject, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn credentialsForProtectionSpace(_self: *@This(), _space: ?*URLProtectionSpace) ?*anyopaque {
        return objc.msgSend(_self, "credentialsForProtectionSpace:", ?*anyopaque, .{_space});
    }

    pub fn setCredentialForProtectionSpace(_self: *@This(), _credential: ?*URLCredential, _space: ?*URLProtectionSpace) void {
        return objc.msgSend(_self, "setCredential:forProtectionSpace:", void, .{ _credential, _space });
    }

    pub fn removeCredentialForProtectionSpace(_self: *@This(), _credential: ?*URLCredential, _space: ?*URLProtectionSpace) void {
        return objc.msgSend(_self, "removeCredential:forProtectionSpace:", void, .{ _credential, _space });
    }

    pub fn removeCredentialForProtectionSpaceOptions(_self: *@This(), _credential: ?*URLCredential, _space: ?*URLProtectionSpace, _options: ?*anyopaque) void {
        return objc.msgSend(_self, "removeCredential:forProtectionSpace:options:", void, .{ _credential, _space, _options });
    }

    pub fn defaultCredentialForProtectionSpace(_self: *@This(), _space: ?*URLProtectionSpace) ?*URLCredential {
        return objc.msgSend(_self, "defaultCredentialForProtectionSpace:", ?*URLCredential, .{_space});
    }

    pub fn setDefaultCredentialForProtectionSpace(_self: *@This(), _credential: ?*URLCredential, _space: ?*URLProtectionSpace) void {
        return objc.msgSend(_self, "setDefaultCredential:forProtectionSpace:", void, .{ _credential, _space });
    }

    pub fn sharedCredentialStorage() ?*URLCredentialStorage {
        return objc.msgSend(Internal.class(), "sharedCredentialStorage", ?*URLCredentialStorage, .{});
    }

    pub fn allCredentials(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "allCredentials", ?*anyopaque, .{});
    }
};

pub const URLErrorNetworkUnavailableReason = objc.NSInteger;
pub const URLErrorNetworkUnavailableReason_Cellular: objc.NSInteger = 0;
pub const URLErrorNetworkUnavailableReason_Expensive: objc.NSInteger = 1;
pub const URLErrorNetworkUnavailableReason_Constrained: objc.NSInteger = 2;

pub const anon1001 = objc.NSInteger;
pub const anon1001_NSURLErrorUnknown: objc.NSInteger = -1;
pub const anon1001_NSURLErrorCancelled: objc.NSInteger = -999;
pub const anon1001_NSURLErrorBadURL: objc.NSInteger = -1000;
pub const anon1001_NSURLErrorTimedOut: objc.NSInteger = -1001;
pub const anon1001_NSURLErrorUnsupportedURL: objc.NSInteger = -1002;
pub const anon1001_NSURLErrorCannotFindHost: objc.NSInteger = -1003;
pub const anon1001_NSURLErrorCannotConnectToHost: objc.NSInteger = -1004;
pub const anon1001_NSURLErrorNetworkConnectionLost: objc.NSInteger = -1005;
pub const anon1001_NSURLErrorDNSLookupFailed: objc.NSInteger = -1006;
pub const anon1001_NSURLErrorHTTPTooManyRedirects: objc.NSInteger = -1007;
pub const anon1001_NSURLErrorResourceUnavailable: objc.NSInteger = -1008;
pub const anon1001_NSURLErrorNotConnectedToInternet: objc.NSInteger = -1009;
pub const anon1001_NSURLErrorRedirectToNonExistentLocation: objc.NSInteger = -1010;
pub const anon1001_NSURLErrorBadServerResponse: objc.NSInteger = -1011;
pub const anon1001_NSURLErrorUserCancelledAuthentication: objc.NSInteger = -1012;
pub const anon1001_NSURLErrorUserAuthenticationRequired: objc.NSInteger = -1013;
pub const anon1001_NSURLErrorZeroByteResource: objc.NSInteger = -1014;
pub const anon1001_NSURLErrorCannotDecodeRawData: objc.NSInteger = -1015;
pub const anon1001_NSURLErrorCannotDecodeContentData: objc.NSInteger = -1016;
pub const anon1001_NSURLErrorCannotParseResponse: objc.NSInteger = -1017;
pub const anon1001_NSURLErrorAppTransportSecurityRequiresSecureConnection: objc.NSInteger = -1022;
pub const anon1001_NSURLErrorFileDoesNotExist: objc.NSInteger = -1100;
pub const anon1001_NSURLErrorFileIsDirectory: objc.NSInteger = -1101;
pub const anon1001_NSURLErrorNoPermissionsToReadFile: objc.NSInteger = -1102;
pub const anon1001_NSURLErrorDataLengthExceedsMaximum: objc.NSInteger = -1103;
pub const anon1001_NSURLErrorFileOutsideSafeArea: objc.NSInteger = -1104;
pub const anon1001_NSURLErrorSecureConnectionFailed: objc.NSInteger = -1200;
pub const anon1001_NSURLErrorServerCertificateHasBadDate: objc.NSInteger = -1201;
pub const anon1001_NSURLErrorServerCertificateUntrusted: objc.NSInteger = -1202;
pub const anon1001_NSURLErrorServerCertificateHasUnknownRoot: objc.NSInteger = -1203;
pub const anon1001_NSURLErrorServerCertificateNotYetValid: objc.NSInteger = -1204;
pub const anon1001_NSURLErrorClientCertificateRejected: objc.NSInteger = -1205;
pub const anon1001_NSURLErrorClientCertificateRequired: objc.NSInteger = -1206;
pub const anon1001_NSURLErrorCannotLoadFromNetwork: objc.NSInteger = -2000;
pub const anon1001_NSURLErrorCannotCreateFile: objc.NSInteger = -3000;
pub const anon1001_NSURLErrorCannotOpenFile: objc.NSInteger = -3001;
pub const anon1001_NSURLErrorCannotCloseFile: objc.NSInteger = -3002;
pub const anon1001_NSURLErrorCannotWriteToFile: objc.NSInteger = -3003;
pub const anon1001_NSURLErrorCannotRemoveFile: objc.NSInteger = -3004;
pub const anon1001_NSURLErrorCannotMoveFile: objc.NSInteger = -3005;
pub const anon1001_NSURLErrorDownloadDecodingFailedMidStream: objc.NSInteger = -3006;
pub const anon1001_NSURLErrorDownloadDecodingFailedToComplete: objc.NSInteger = -3007;
pub const anon1001_NSURLErrorInternationalRoamingOff: objc.NSInteger = -1018;
pub const anon1001_NSURLErrorCallIsActive: objc.NSInteger = -1019;
pub const anon1001_NSURLErrorDataNotAllowed: objc.NSInteger = -1020;
pub const anon1001_NSURLErrorRequestBodyStreamExhausted: objc.NSInteger = -1021;
pub const anon1001_NSURLErrorBackgroundSessionRequiresSharedContainer: objc.NSInteger = -995;
pub const anon1001_NSURLErrorBackgroundSessionInUseByAnotherProcess: objc.NSInteger = -996;
pub const anon1001_NSURLErrorBackgroundSessionWasDisconnected: objc.NSInteger = -997;

/// https://developer.apple.com/documentation/Foundation/NSURLProtocolClient?language=objc
pub const URLProtocolClient = opaque {
    pub const Internal = objc.ExternProtocol(@This(), &.{objc.NSObject});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn urlProtocolWasRedirectedToRequestRedirectResponse(_self: *@This(), _protocol: ?*URLProtocol, _request: ?*URLRequest, _redirectResponse: ?*URLResponse) void {
        return objc.msgSend(_self, "URLProtocol:wasRedirectedToRequest:redirectResponse:", void, .{ _protocol, _request, _redirectResponse });
    }

    pub fn urlProtocolCachedResponseIsValid(_self: *@This(), _protocol: ?*URLProtocol, _cachedResponse: ?*CachedURLResponse) void {
        return objc.msgSend(_self, "URLProtocol:cachedResponseIsValid:", void, .{ _protocol, _cachedResponse });
    }

    pub fn urlProtocolDidReceiveResponseCacheStoragePolicy(_self: *@This(), _protocol: ?*URLProtocol, _response: ?*URLResponse, _policy: URLCacheStoragePolicy) void {
        return objc.msgSend(_self, "URLProtocol:didReceiveResponse:cacheStoragePolicy:", void, .{ _protocol, _response, _policy });
    }

    pub fn urlProtocolDidLoadData(_self: *@This(), _protocol: ?*URLProtocol, _data: ?*Data) void {
        return objc.msgSend(_self, "URLProtocol:didLoadData:", void, .{ _protocol, _data });
    }

    pub fn urlProtocolDidFinishLoading(_self: *@This(), _protocol: ?*URLProtocol) void {
        return objc.msgSend(_self, "URLProtocolDidFinishLoading:", void, .{_protocol});
    }

    pub fn urlProtocolDidFailWithError(_self: *@This(), _protocol: ?*URLProtocol, _error: ?*Error) void {
        return objc.msgSend(_self, "URLProtocol:didFailWithError:", void, .{ _protocol, _error });
    }

    pub fn urlProtocolDidReceiveAuthenticationChallenge(_self: *@This(), _protocol: ?*URLProtocol, _challenge: ?*URLAuthenticationChallenge) void {
        return objc.msgSend(_self, "URLProtocol:didReceiveAuthenticationChallenge:", void, .{ _protocol, _challenge });
    }

    pub fn urlProtocolDidCancelAuthenticationChallenge(_self: *@This(), _protocol: ?*URLProtocol, _challenge: ?*URLAuthenticationChallenge) void {
        return objc.msgSend(_self, "URLProtocol:didCancelAuthenticationChallenge:", void, .{ _protocol, _challenge });
    }
};

/// https://developer.apple.com/documentation/Foundation/NSURLProtocol?language=objc
pub const URLProtocol = opaque {
    pub const Internal = objc.ExternClass("NSURLProtocol", @This(), objc.NSObject, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn initWithRequestCachedResponseClient(_self: *@This(), _request: ?*URLRequest, _cachedResponse: ?*CachedURLResponse, _client: ?*anyopaque) *@This() {
        return objc.msgSend(_self, "initWithRequest:cachedResponse:client:", *@This(), .{ _request, _cachedResponse, _client });
    }

    pub fn canInitWithRequest(_request: ?*URLRequest) objc.BOOL {
        return objc.msgSend(Internal.class(), "canInitWithRequest:", objc.BOOL, .{_request});
    }

    pub fn canonicalRequestForRequest(_request: ?*URLRequest) ?*URLRequest {
        return objc.msgSend(Internal.class(), "canonicalRequestForRequest:", ?*URLRequest, .{_request});
    }

    pub fn requestIsCacheEquivalentToRequest(_a: ?*URLRequest, _b: ?*URLRequest) objc.BOOL {
        return objc.msgSend(Internal.class(), "requestIsCacheEquivalent:toRequest:", objc.BOOL, .{ _a, _b });
    }

    pub fn startLoading(_self: *@This()) void {
        return objc.msgSend(_self, "startLoading", void, .{});
    }

    pub fn stopLoading(_self: *@This()) void {
        return objc.msgSend(_self, "stopLoading", void, .{});
    }

    pub fn propertyForKeyInRequest(_key: ?*String, _request: ?*URLRequest) ?objc.Id {
        return objc.msgSend(Internal.class(), "propertyForKey:inRequest:", ?objc.Id, .{ _key, _request });
    }

    pub fn setPropertyForKeyInRequest(_value: ?objc.Id, _key: ?*String, _request: ?*MutableURLRequest) void {
        return objc.msgSend(Internal.class(), "setProperty:forKey:inRequest:", void, .{ _value, _key, _request });
    }

    pub fn removePropertyForKeyInRequest(_key: ?*String, _request: ?*MutableURLRequest) void {
        return objc.msgSend(Internal.class(), "removePropertyForKey:inRequest:", void, .{ _key, _request });
    }

    pub fn registerClass(_protocolClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "registerClass:", objc.BOOL, .{_protocolClass});
    }

    pub fn unregisterClass(_protocolClass: objc.Class) void {
        return objc.msgSend(Internal.class(), "unregisterClass:", void, .{_protocolClass});
    }

    pub fn client(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "client", ?*anyopaque, .{});
    }

    pub fn request(_self: *@This()) ?*URLRequest {
        return objc.msgSend(_self, "request", ?*URLRequest, .{});
    }

    pub fn cachedResponse(_self: *@This()) ?*CachedURLResponse {
        return objc.msgSend(_self, "cachedResponse", ?*CachedURLResponse, .{});
    }
};

pub const URLRequestCachePolicy = objc.NSUInteger;
pub const URLRequestCachePolicy_UseProtocolCachePolicy: objc.NSUInteger = 0;
pub const URLRequestCachePolicy_ReloadIgnoringLocalCacheData: objc.NSUInteger = 1;
pub const URLRequestCachePolicy_ReloadIgnoringLocalAndRemoteCacheData: objc.NSUInteger = 4;
pub const URLRequestCachePolicy_ReloadIgnoringCacheData: objc.NSUInteger = 1;
pub const URLRequestCachePolicy_ReturnCacheDataElseLoad: objc.NSUInteger = 2;
pub const URLRequestCachePolicy_ReturnCacheDataDontLoad: objc.NSUInteger = 3;
pub const URLRequestCachePolicy_ReloadRevalidatingCacheData: objc.NSUInteger = 5;

pub const URLRequestNetworkServiceType = objc.NSUInteger;
pub const URLRequestNetworkServiceType_NetworkServiceTypeDefault: objc.NSUInteger = 0;
pub const URLRequestNetworkServiceType_NetworkServiceTypeVoIP: objc.NSUInteger = 1;
pub const URLRequestNetworkServiceType_NetworkServiceTypeVideo: objc.NSUInteger = 2;
pub const URLRequestNetworkServiceType_NetworkServiceTypeBackground: objc.NSUInteger = 3;
pub const URLRequestNetworkServiceType_NetworkServiceTypeVoice: objc.NSUInteger = 4;
pub const URLRequestNetworkServiceType_NetworkServiceTypeResponsiveData: objc.NSUInteger = 6;
pub const URLRequestNetworkServiceType_NetworkServiceTypeAVStreaming: objc.NSUInteger = 8;
pub const URLRequestNetworkServiceType_NetworkServiceTypeResponsiveAV: objc.NSUInteger = 9;
pub const URLRequestNetworkServiceType_NetworkServiceTypeCallSignaling: objc.NSUInteger = 11;

pub const URLRequestAttribution = objc.NSUInteger;
pub const URLRequestAttribution_Developer: objc.NSUInteger = 0;
pub const URLRequestAttribution_User: objc.NSUInteger = 1;

/// https://developer.apple.com/documentation/Foundation/NSURLRequest?language=objc
pub const URLRequest = opaque {
    pub const Internal = objc.ExternClass("NSURLRequest", @This(), objc.NSObject, &.{ SecureCoding, Copying, MutableCopying });
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn supportsSecureCoding() objc.BOOL {
        return objc.msgSend(Internal.class(), "supportsSecureCoding", objc.BOOL, .{});
    }

    pub fn requestWithURL(_URL: ?*URL) *@This() {
        return objc.msgSend(Internal.class(), "requestWithURL:", *@This(), .{_URL});
    }

    pub fn requestWithURLCachePolicyTimeoutInterval(_URL: ?*URL, _cachePolicy: URLRequestCachePolicy, _timeoutInterval: TimeInterval) *@This() {
        return objc.msgSend(Internal.class(), "requestWithURL:cachePolicy:timeoutInterval:", *@This(), .{ _URL, _cachePolicy, _timeoutInterval });
    }

    pub fn initWithURL(_self: *@This(), _URL: ?*URL) *@This() {
        return objc.msgSend(_self, "initWithURL:", *@This(), .{_URL});
    }

    pub fn initWithURLCachePolicyTimeoutInterval(_self: *@This(), _URL: ?*URL, _cachePolicy: URLRequestCachePolicy, _timeoutInterval: TimeInterval) *@This() {
        return objc.msgSend(_self, "initWithURL:cachePolicy:timeoutInterval:", *@This(), .{ _URL, _cachePolicy, _timeoutInterval });
    }

    pub fn url(_self: *@This()) ?*URL {
        return objc.msgSend(_self, "URL", ?*URL, .{});
    }

    pub fn cachePolicy(_self: *@This()) URLRequestCachePolicy {
        return objc.msgSend(_self, "cachePolicy", URLRequestCachePolicy, .{});
    }

    pub fn timeoutInterval(_self: *@This()) TimeInterval {
        return objc.msgSend(_self, "timeoutInterval", TimeInterval, .{});
    }

    pub fn mainDocumentURL(_self: *@This()) ?*URL {
        return objc.msgSend(_self, "mainDocumentURL", ?*URL, .{});
    }

    pub fn networkServiceType(_self: *@This()) URLRequestNetworkServiceType {
        return objc.msgSend(_self, "networkServiceType", URLRequestNetworkServiceType, .{});
    }

    pub fn allowsCellularAccess(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsCellularAccess", objc.BOOL, .{});
    }

    pub fn allowsExpensiveNetworkAccess(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsExpensiveNetworkAccess", objc.BOOL, .{});
    }

    pub fn allowsConstrainedNetworkAccess(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsConstrainedNetworkAccess", objc.BOOL, .{});
    }

    pub fn assumesHTTP3Capable(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "assumesHTTP3Capable", objc.BOOL, .{});
    }

    pub fn attribution(_self: *@This()) URLRequestAttribution {
        return objc.msgSend(_self, "attribution", URLRequestAttribution, .{});
    }

    pub fn requiresDNSSECValidation(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "requiresDNSSECValidation", objc.BOOL, .{});
    }

    pub fn allowsPersistentDNS(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsPersistentDNS", objc.BOOL, .{});
    }
};

/// https://developer.apple.com/documentation/Foundation/NSMutableURLRequest?language=objc
pub const MutableURLRequest = opaque {
    pub const Internal = objc.ExternClass("NSMutableURLRequest", @This(), URLRequest, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn supportsSecureCoding() objc.BOOL {
        return objc.msgSend(Internal.class(), "supportsSecureCoding", objc.BOOL, .{});
    }

    pub fn requestWithURL(_URL: ?*URL) *@This() {
        return objc.msgSend(Internal.class(), "requestWithURL:", *@This(), .{_URL});
    }

    pub fn requestWithURLCachePolicyTimeoutInterval(_URL: ?*URL, _cachePolicy: URLRequestCachePolicy, _timeoutInterval: TimeInterval) *@This() {
        return objc.msgSend(Internal.class(), "requestWithURL:cachePolicy:timeoutInterval:", *@This(), .{ _URL, _cachePolicy, _timeoutInterval });
    }

    pub fn initWithURL(_self: *@This(), _URL: ?*URL) *@This() {
        return objc.msgSend(_self, "initWithURL:", *@This(), .{_URL});
    }

    pub fn initWithURLCachePolicyTimeoutInterval(_self: *@This(), _URL: ?*URL, _cachePolicy: URLRequestCachePolicy, _timeoutInterval: TimeInterval) *@This() {
        return objc.msgSend(_self, "initWithURL:cachePolicy:timeoutInterval:", *@This(), .{ _URL, _cachePolicy, _timeoutInterval });
    }

    pub fn url(_self: *@This()) ?*URL {
        return objc.msgSend(_self, "URL", ?*URL, .{});
    }

    pub fn cachePolicy(_self: *@This()) URLRequestCachePolicy {
        return objc.msgSend(_self, "cachePolicy", URLRequestCachePolicy, .{});
    }

    pub fn timeoutInterval(_self: *@This()) TimeInterval {
        return objc.msgSend(_self, "timeoutInterval", TimeInterval, .{});
    }

    pub fn mainDocumentURL(_self: *@This()) ?*URL {
        return objc.msgSend(_self, "mainDocumentURL", ?*URL, .{});
    }

    pub fn networkServiceType(_self: *@This()) URLRequestNetworkServiceType {
        return objc.msgSend(_self, "networkServiceType", URLRequestNetworkServiceType, .{});
    }

    pub fn allowsCellularAccess(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsCellularAccess", objc.BOOL, .{});
    }

    pub fn allowsExpensiveNetworkAccess(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsExpensiveNetworkAccess", objc.BOOL, .{});
    }

    pub fn allowsConstrainedNetworkAccess(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsConstrainedNetworkAccess", objc.BOOL, .{});
    }

    pub fn assumesHTTP3Capable(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "assumesHTTP3Capable", objc.BOOL, .{});
    }

    pub fn attribution(_self: *@This()) URLRequestAttribution {
        return objc.msgSend(_self, "attribution", URLRequestAttribution, .{});
    }

    pub fn requiresDNSSECValidation(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "requiresDNSSECValidation", objc.BOOL, .{});
    }

    pub fn allowsPersistentDNS(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsPersistentDNS", objc.BOOL, .{});
    }

    pub fn setURL(_self: *@This(), _URL: ?*URL) void {
        return objc.msgSend(_self, "setURL:", void, .{_URL});
    }

    pub fn setCachePolicy(_self: *@This(), _cachePolicy: URLRequestCachePolicy) void {
        return objc.msgSend(_self, "setCachePolicy:", void, .{_cachePolicy});
    }

    pub fn setTimeoutInterval(_self: *@This(), _timeoutInterval: TimeInterval) void {
        return objc.msgSend(_self, "setTimeoutInterval:", void, .{_timeoutInterval});
    }

    pub fn setMainDocumentURL(_self: *@This(), _mainDocumentURL: ?*URL) void {
        return objc.msgSend(_self, "setMainDocumentURL:", void, .{_mainDocumentURL});
    }

    pub fn setNetworkServiceType(_self: *@This(), _networkServiceType: URLRequestNetworkServiceType) void {
        return objc.msgSend(_self, "setNetworkServiceType:", void, .{_networkServiceType});
    }

    pub fn setAllowsCellularAccess(_self: *@This(), _allowsCellularAccess: objc.BOOL) void {
        return objc.msgSend(_self, "setAllowsCellularAccess:", void, .{_allowsCellularAccess});
    }

    pub fn setAllowsExpensiveNetworkAccess(_self: *@This(), _allowsExpensiveNetworkAccess: objc.BOOL) void {
        return objc.msgSend(_self, "setAllowsExpensiveNetworkAccess:", void, .{_allowsExpensiveNetworkAccess});
    }

    pub fn setAllowsConstrainedNetworkAccess(_self: *@This(), _allowsConstrainedNetworkAccess: objc.BOOL) void {
        return objc.msgSend(_self, "setAllowsConstrainedNetworkAccess:", void, .{_allowsConstrainedNetworkAccess});
    }

    pub fn setAssumesHTTP3Capable(_self: *@This(), _assumesHTTP3Capable: objc.BOOL) void {
        return objc.msgSend(_self, "setAssumesHTTP3Capable:", void, .{_assumesHTTP3Capable});
    }

    pub fn setAttribution(_self: *@This(), _attribution: URLRequestAttribution) void {
        return objc.msgSend(_self, "setAttribution:", void, .{_attribution});
    }

    pub fn setRequiresDNSSECValidation(_self: *@This(), _requiresDNSSECValidation: objc.BOOL) void {
        return objc.msgSend(_self, "setRequiresDNSSECValidation:", void, .{_requiresDNSSECValidation});
    }

    pub fn setAllowsPersistentDNS(_self: *@This(), _allowsPersistentDNS: objc.BOOL) void {
        return objc.msgSend(_self, "setAllowsPersistentDNS:", void, .{_allowsPersistentDNS});
    }
};

/// https://developer.apple.com/documentation/Foundation/NSURLResponse?language=objc
pub const URLResponse = opaque {
    pub const Internal = objc.ExternClass("NSURLResponse", @This(), objc.NSObject, &.{ SecureCoding, Copying });
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn supportsSecureCoding() objc.BOOL {
        return objc.msgSend(Internal.class(), "supportsSecureCoding", objc.BOOL, .{});
    }

    pub fn initWithURLMIMETypeExpectedContentLengthTextEncodingName(
        _self: *@This(),
        _URL: ?*URL,
        _MIMEType: ?*String,
        _length: objc.NSInteger,
        _name: ?*String,
    ) *@This() {
        return objc.msgSend(_self, "initWithURL:MIMEType:expectedContentLength:textEncodingName:", *@This(), .{
            _URL,
            _MIMEType,
            _length,
            _name,
        });
    }

    pub fn url(_self: *@This()) ?*URL {
        return objc.msgSend(_self, "URL", ?*URL, .{});
    }

    pub fn mimeType(_self: *@This()) ?*String {
        return objc.msgSend(_self, "MIMEType", ?*String, .{});
    }

    pub fn expectedContentLength(_self: *@This()) i64 {
        return objc.msgSend(_self, "expectedContentLength", i64, .{});
    }

    pub fn textEncodingName(_self: *@This()) ?*String {
        return objc.msgSend(_self, "textEncodingName", ?*String, .{});
    }

    pub fn suggestedFilename(_self: *@This()) ?*String {
        return objc.msgSend(_self, "suggestedFilename", ?*String, .{});
    }
};

/// https://developer.apple.com/documentation/Foundation/NSHTTPURLResponse?language=objc
pub const HTTPURLResponse = opaque {
    pub const Internal = objc.ExternClass("NSHTTPURLResponse", @This(), URLResponse, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn supportsSecureCoding() objc.BOOL {
        return objc.msgSend(Internal.class(), "supportsSecureCoding", objc.BOOL, .{});
    }

    pub fn initWithURLMIMETypeExpectedContentLengthTextEncodingName(
        _self: *@This(),
        _URL: ?*URL,
        _MIMEType: ?*String,
        _length: objc.NSInteger,
        _name: ?*String,
    ) *@This() {
        return objc.msgSend(_self, "initWithURL:MIMEType:expectedContentLength:textEncodingName:", *@This(), .{
            _URL,
            _MIMEType,
            _length,
            _name,
        });
    }

    pub fn url(_self: *@This()) ?*URL {
        return objc.msgSend(_self, "URL", ?*URL, .{});
    }

    pub fn mimeType(_self: *@This()) ?*String {
        return objc.msgSend(_self, "MIMEType", ?*String, .{});
    }

    pub fn expectedContentLength(_self: *@This()) i64 {
        return objc.msgSend(_self, "expectedContentLength", i64, .{});
    }

    pub fn textEncodingName(_self: *@This()) ?*String {
        return objc.msgSend(_self, "textEncodingName", ?*String, .{});
    }

    pub fn suggestedFilename(_self: *@This()) ?*String {
        return objc.msgSend(_self, "suggestedFilename", ?*String, .{});
    }

    pub fn initWithURLStatusCodeHTTPVersionHeaderFields(
        _self: *@This(),
        _url: ?*URL,
        _statusCode: objc.NSInteger,
        _HTTPVersion: ?*String,
        _headerFields: ?*anyopaque,
    ) *@This() {
        return objc.msgSend(_self, "initWithURL:statusCode:HTTPVersion:headerFields:", *@This(), .{
            _url,
            _statusCode,
            _HTTPVersion,
            _headerFields,
        });
    }

    pub fn valueForHTTPHeaderField(_self: *@This(), _field: ?*String) ?*String {
        return objc.msgSend(_self, "valueForHTTPHeaderField:", ?*String, .{_field});
    }

    pub fn localizedStringForStatusCode(_statusCode: objc.NSInteger) ?*String {
        return objc.msgSend(Internal.class(), "localizedStringForStatusCode:", ?*String, .{_statusCode});
    }

    pub fn statusCode(_self: *@This()) objc.NSInteger {
        return objc.msgSend(_self, "statusCode", objc.NSInteger, .{});
    }

    pub fn allHeaderFields(_self: *@This()) ?*Dictionary {
        return objc.msgSend(_self, "allHeaderFields", ?*Dictionary, .{});
    }
};

/// https://developer.apple.com/documentation/Foundation/NSUserDefaults?language=objc
pub const UserDefaults = opaque {
    pub const Internal = objc.ExternClass("NSUserDefaults", @This(), objc.NSObject, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn resetStandardUserDefaults() void {
        return objc.msgSend(Internal.class(), "resetStandardUserDefaults", void, .{});
    }

    pub fn initWithSuiteName(_self: *@This(), _suitename: ?*String) *@This() {
        return objc.msgSend(_self, "initWithSuiteName:", *@This(), .{_suitename});
    }

    pub fn initWithUser(_self: *@This(), _username: ?*String) ?objc.Id {
        return objc.msgSend(_self, "initWithUser:", ?objc.Id, .{_username});
    }

    pub fn objectForKey(_self: *@This(), _defaultName: ?*String) ?objc.Id {
        return objc.msgSend(_self, "objectForKey:", ?objc.Id, .{_defaultName});
    }

    pub fn setObjectForKey(_self: *@This(), _value: ?objc.Id, _defaultName: ?*String) void {
        return objc.msgSend(_self, "setObject:forKey:", void, .{ _value, _defaultName });
    }

    pub fn removeObjectForKey(_self: *@This(), _defaultName: ?*String) void {
        return objc.msgSend(_self, "removeObjectForKey:", void, .{_defaultName});
    }

    pub fn stringForKey(_self: *@This(), _defaultName: ?*String) ?*String {
        return objc.msgSend(_self, "stringForKey:", ?*String, .{_defaultName});
    }

    pub fn arrayForKey(_self: *@This(), _defaultName: ?*String) ?*Array {
        return objc.msgSend(_self, "arrayForKey:", ?*Array, .{_defaultName});
    }

    pub fn dictionaryForKey(_self: *@This(), _defaultName: ?*String) ?*anyopaque {
        return objc.msgSend(_self, "dictionaryForKey:", ?*anyopaque, .{_defaultName});
    }

    pub fn dataForKey(_self: *@This(), _defaultName: ?*String) ?*Data {
        return objc.msgSend(_self, "dataForKey:", ?*Data, .{_defaultName});
    }

    pub fn stringArrayForKey(_self: *@This(), _defaultName: ?*String) ?*anyopaque {
        return objc.msgSend(_self, "stringArrayForKey:", ?*anyopaque, .{_defaultName});
    }

    pub fn integerForKey(_self: *@This(), _defaultName: ?*String) objc.NSInteger {
        return objc.msgSend(_self, "integerForKey:", objc.NSInteger, .{_defaultName});
    }

    pub fn floatForKey(_self: *@This(), _defaultName: ?*String) f32 {
        return objc.msgSend(_self, "floatForKey:", f32, .{_defaultName});
    }

    pub fn doubleForKey(_self: *@This(), _defaultName: ?*String) f64 {
        return objc.msgSend(_self, "doubleForKey:", f64, .{_defaultName});
    }

    pub fn boolForKey(_self: *@This(), _defaultName: ?*String) objc.BOOL {
        return objc.msgSend(_self, "boolForKey:", objc.BOOL, .{_defaultName});
    }

    pub fn urlForKey(_self: *@This(), _defaultName: ?*String) ?*URL {
        return objc.msgSend(_self, "URLForKey:", ?*URL, .{_defaultName});
    }

    pub fn setIntegerForKey(_self: *@This(), _value: objc.NSInteger, _defaultName: ?*String) void {
        return objc.msgSend(_self, "setInteger:forKey:", void, .{ _value, _defaultName });
    }

    pub fn setFloatForKey(_self: *@This(), _value: f32, _defaultName: ?*String) void {
        return objc.msgSend(_self, "setFloat:forKey:", void, .{ _value, _defaultName });
    }

    pub fn setDoubleForKey(_self: *@This(), _value: f64, _defaultName: ?*String) void {
        return objc.msgSend(_self, "setDouble:forKey:", void, .{ _value, _defaultName });
    }

    pub fn setBoolForKey(_self: *@This(), _value: objc.BOOL, _defaultName: ?*String) void {
        return objc.msgSend(_self, "setBool:forKey:", void, .{ _value, _defaultName });
    }

    pub fn setURLForKey(_self: *@This(), _url: ?*URL, _defaultName: ?*String) void {
        return objc.msgSend(_self, "setURL:forKey:", void, .{ _url, _defaultName });
    }

    pub fn registerDefaults(_self: *@This(), _registrationDictionary: ?*anyopaque) void {
        return objc.msgSend(_self, "registerDefaults:", void, .{_registrationDictionary});
    }

    pub fn addSuiteNamed(_self: *@This(), _suiteName: ?*String) void {
        return objc.msgSend(_self, "addSuiteNamed:", void, .{_suiteName});
    }

    pub fn removeSuiteNamed(_self: *@This(), _suiteName: ?*String) void {
        return objc.msgSend(_self, "removeSuiteNamed:", void, .{_suiteName});
    }

    pub fn dictionaryRepresentation(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "dictionaryRepresentation", ?*anyopaque, .{});
    }

    pub fn volatileDomainForName(_self: *@This(), _domainName: ?*String) ?*anyopaque {
        return objc.msgSend(_self, "volatileDomainForName:", ?*anyopaque, .{_domainName});
    }

    pub fn setVolatileDomainForName(_self: *@This(), _domain: ?*anyopaque, _domainName: ?*String) void {
        return objc.msgSend(_self, "setVolatileDomain:forName:", void, .{ _domain, _domainName });
    }

    pub fn removeVolatileDomainForName(_self: *@This(), _domainName: ?*String) void {
        return objc.msgSend(_self, "removeVolatileDomainForName:", void, .{_domainName});
    }

    pub fn persistentDomainNames(_self: *@This()) ?*Array {
        return objc.msgSend(_self, "persistentDomainNames", ?*Array, .{});
    }

    pub fn persistentDomainForName(_self: *@This(), _domainName: ?*String) ?*anyopaque {
        return objc.msgSend(_self, "persistentDomainForName:", ?*anyopaque, .{_domainName});
    }

    pub fn setPersistentDomainForName(_self: *@This(), _domain: ?*anyopaque, _domainName: ?*String) void {
        return objc.msgSend(_self, "setPersistentDomain:forName:", void, .{ _domain, _domainName });
    }

    pub fn removePersistentDomainForName(_self: *@This(), _domainName: ?*String) void {
        return objc.msgSend(_self, "removePersistentDomainForName:", void, .{_domainName});
    }

    pub fn synchronize(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "synchronize", objc.BOOL, .{});
    }

    pub fn objectIsForcedForKey(_self: *@This(), _key: ?*String) objc.BOOL {
        return objc.msgSend(_self, "objectIsForcedForKey:", objc.BOOL, .{_key});
    }

    pub fn objectIsForcedForKeyInDomain(_self: *@This(), _key: ?*String, _domain: ?*String) objc.BOOL {
        return objc.msgSend(_self, "objectIsForcedForKey:inDomain:", objc.BOOL, .{ _key, _domain });
    }

    pub fn standardUserDefaults() ?*UserDefaults {
        return objc.msgSend(Internal.class(), "standardUserDefaults", ?*UserDefaults, .{});
    }

    pub fn volatileDomainNames(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "volatileDomainNames", ?*anyopaque, .{});
    }
};

pub const ValueTransformerName = ?*String;

/// https://developer.apple.com/documentation/Foundation/NSValueTransformer?language=objc
pub const ValueTransformer = opaque {
    pub const Internal = objc.ExternClass("NSValueTransformer", @This(), objc.NSObject, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn setValueTransformerForName(_transformer: ?*ValueTransformer, _name: ValueTransformerName) void {
        return objc.msgSend(Internal.class(), "setValueTransformer:forName:", void, .{ _transformer, _name });
    }

    pub fn valueTransformerForName(_name: ValueTransformerName) ?*ValueTransformer {
        return objc.msgSend(Internal.class(), "valueTransformerForName:", ?*ValueTransformer, .{_name});
    }

    pub fn valueTransformerNames() ?*anyopaque {
        return objc.msgSend(Internal.class(), "valueTransformerNames", ?*anyopaque, .{});
    }

    pub fn transformedValueClass() objc.Class {
        return objc.msgSend(Internal.class(), "transformedValueClass", objc.Class, .{});
    }

    pub fn allowsReverseTransformation() objc.BOOL {
        return objc.msgSend(Internal.class(), "allowsReverseTransformation", objc.BOOL, .{});
    }

    pub fn transformedValue(_self: *@This(), _value: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "transformedValue:", ?objc.Id, .{_value});
    }

    pub fn reverseTransformedValue(_self: *@This(), _value: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "reverseTransformedValue:", ?objc.Id, .{_value});
    }
};

/// https://developer.apple.com/documentation/Foundation/NSSecureUnarchiveFromDataTransformer?language=objc
pub const SecureUnarchiveFromDataTransformer = opaque {
    pub const Internal = objc.ExternClass("NSSecureUnarchiveFromDataTransformer", @This(), ValueTransformer, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn setValueTransformerForName(_transformer: ?*ValueTransformer, _name: ValueTransformerName) void {
        return objc.msgSend(Internal.class(), "setValueTransformer:forName:", void, .{ _transformer, _name });
    }

    pub fn valueTransformerForName(_name: ValueTransformerName) ?*ValueTransformer {
        return objc.msgSend(Internal.class(), "valueTransformerForName:", ?*ValueTransformer, .{_name});
    }

    pub fn valueTransformerNames() ?*anyopaque {
        return objc.msgSend(Internal.class(), "valueTransformerNames", ?*anyopaque, .{});
    }

    pub fn transformedValueClass() objc.Class {
        return objc.msgSend(Internal.class(), "transformedValueClass", objc.Class, .{});
    }

    pub fn allowsReverseTransformation() objc.BOOL {
        return objc.msgSend(Internal.class(), "allowsReverseTransformation", objc.BOOL, .{});
    }

    pub fn transformedValue(_self: *@This(), _value: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "transformedValue:", ?objc.Id, .{_value});
    }

    pub fn reverseTransformedValue(_self: *@This(), _value: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "reverseTransformedValue:", ?objc.Id, .{_value});
    }

    pub fn allowedTopLevelClasses() ?*anyopaque {
        return objc.msgSend(Internal.class(), "allowedTopLevelClasses", ?*anyopaque, .{});
    }
};

pub const XMLParserExternalEntityResolvingPolicy = objc.NSUInteger;
pub const XMLParserExternalEntityResolvingPolicy_ResolveExternalEntitiesNever: objc.NSUInteger = 0;
pub const XMLParserExternalEntityResolvingPolicy_ResolveExternalEntitiesNoNetwork: objc.NSUInteger = 1;
pub const XMLParserExternalEntityResolvingPolicy_ResolveExternalEntitiesSameOriginOnly: objc.NSUInteger = 2;
pub const XMLParserExternalEntityResolvingPolicy_ResolveExternalEntitiesAlways: objc.NSUInteger = 3;

/// https://developer.apple.com/documentation/Foundation/NSXMLParser?language=objc
pub const XMLParser = opaque {
    pub const Internal = objc.ExternClass("NSXMLParser", @This(), objc.NSObject, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn initWithContentsOfURL(_self: *@This(), _url: ?*URL) *@This() {
        return objc.msgSend(_self, "initWithContentsOfURL:", *@This(), .{_url});
    }

    pub fn initWithData(_self: *@This(), _data: ?*Data) *@This() {
        return objc.msgSend(_self, "initWithData:", *@This(), .{_data});
    }

    pub fn initWithStream(_self: *@This(), _stream: ?*InputStream) *@This() {
        return objc.msgSend(_self, "initWithStream:", *@This(), .{_stream});
    }

    pub fn parse(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "parse", objc.BOOL, .{});
    }

    pub fn abortParsing(_self: *@This()) void {
        return objc.msgSend(_self, "abortParsing", void, .{});
    }

    pub fn delegate(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "delegate", ?*anyopaque, .{});
    }

    pub fn setDelegate(_self: *@This(), _delegate: ?*anyopaque) void {
        return objc.msgSend(_self, "setDelegate:", void, .{_delegate});
    }

    pub fn shouldProcessNamespaces(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "shouldProcessNamespaces", objc.BOOL, .{});
    }

    pub fn setShouldProcessNamespaces(_self: *@This(), _shouldProcessNamespaces: objc.BOOL) void {
        return objc.msgSend(_self, "setShouldProcessNamespaces:", void, .{_shouldProcessNamespaces});
    }

    pub fn shouldReportNamespacePrefixes(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "shouldReportNamespacePrefixes", objc.BOOL, .{});
    }

    pub fn setShouldReportNamespacePrefixes(_self: *@This(), _shouldReportNamespacePrefixes: objc.BOOL) void {
        return objc.msgSend(_self, "setShouldReportNamespacePrefixes:", void, .{_shouldReportNamespacePrefixes});
    }

    pub fn externalEntityResolvingPolicy(_self: *@This()) XMLParserExternalEntityResolvingPolicy {
        return objc.msgSend(_self, "externalEntityResolvingPolicy", XMLParserExternalEntityResolvingPolicy, .{});
    }

    pub fn setExternalEntityResolvingPolicy(_self: *@This(), _externalEntityResolvingPolicy: XMLParserExternalEntityResolvingPolicy) void {
        return objc.msgSend(_self, "setExternalEntityResolvingPolicy:", void, .{_externalEntityResolvingPolicy});
    }

    pub fn allowedExternalEntityURLs(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "allowedExternalEntityURLs", ?*anyopaque, .{});
    }

    pub fn setAllowedExternalEntityURLs(_self: *@This(), _allowedExternalEntityURLs: ?*anyopaque) void {
        return objc.msgSend(_self, "setAllowedExternalEntityURLs:", void, .{_allowedExternalEntityURLs});
    }

    pub fn parserError(_self: *@This()) ?*Error {
        return objc.msgSend(_self, "parserError", ?*Error, .{});
    }

    pub fn shouldResolveExternalEntities(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "shouldResolveExternalEntities", objc.BOOL, .{});
    }

    pub fn setShouldResolveExternalEntities(_self: *@This(), _shouldResolveExternalEntities: objc.BOOL) void {
        return objc.msgSend(_self, "setShouldResolveExternalEntities:", void, .{_shouldResolveExternalEntities});
    }
};

/// https://developer.apple.com/documentation/Foundation/NSXMLParserDelegate?language=objc
pub const XMLParserDelegate = opaque {
    pub const Internal = objc.ExternProtocol(@This(), &.{objc.NSObject});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn parserDidStartDocument(_self: *@This(), _parser: ?*XMLParser) void {
        return objc.msgSend(_self, "parserDidStartDocument:", void, .{_parser});
    }

    pub fn parserDidEndDocument(_self: *@This(), _parser: ?*XMLParser) void {
        return objc.msgSend(_self, "parserDidEndDocument:", void, .{_parser});
    }

    pub fn parserFoundNotationDeclarationWithNamePublicIDSystemID(
        _self: *@This(),
        _parser: ?*XMLParser,
        _name: ?*String,
        _publicID: ?*String,
        _systemID: ?*String,
    ) void {
        return objc.msgSend(_self, "parser:foundNotationDeclarationWithName:publicID:systemID:", void, .{
            _parser,
            _name,
            _publicID,
            _systemID,
        });
    }

    pub fn parserFoundUnparsedEntityDeclarationWithNamePublicIDSystemIDNotationName(
        _self: *@This(),
        _parser: ?*XMLParser,
        _name: ?*String,
        _publicID: ?*String,
        _systemID: ?*String,
        _notationName: ?*String,
    ) void {
        return objc.msgSend(_self, "parser:foundUnparsedEntityDeclarationWithName:publicID:systemID:notationName:", void, .{
            _parser,
            _name,
            _publicID,
            _systemID,
            _notationName,
        });
    }

    pub fn parserFoundAttributeDeclarationWithNameForElementTypeDefaultValue(
        _self: *@This(),
        _parser: ?*XMLParser,
        _attributeName: ?*String,
        _elementName: ?*String,
        _type: ?*String,
        _defaultValue: ?*String,
    ) void {
        return objc.msgSend(_self, "parser:foundAttributeDeclarationWithName:forElement:type:defaultValue:", void, .{
            _parser,
            _attributeName,
            _elementName,
            _type,
            _defaultValue,
        });
    }

    pub fn parserFoundElementDeclarationWithNameModel(_self: *@This(), _parser: ?*XMLParser, _elementName: ?*String, _model: ?*String) void {
        return objc.msgSend(_self, "parser:foundElementDeclarationWithName:model:", void, .{ _parser, _elementName, _model });
    }

    pub fn parserFoundInternalEntityDeclarationWithNameValue(_self: *@This(), _parser: ?*XMLParser, _name: ?*String, _value: ?*String) void {
        return objc.msgSend(_self, "parser:foundInternalEntityDeclarationWithName:value:", void, .{ _parser, _name, _value });
    }

    pub fn parserFoundExternalEntityDeclarationWithNamePublicIDSystemID(
        _self: *@This(),
        _parser: ?*XMLParser,
        _name: ?*String,
        _publicID: ?*String,
        _systemID: ?*String,
    ) void {
        return objc.msgSend(_self, "parser:foundExternalEntityDeclarationWithName:publicID:systemID:", void, .{
            _parser,
            _name,
            _publicID,
            _systemID,
        });
    }

    pub fn parserDidStartElementNamespaceURIQualifiedNameAttributes(
        _self: *@This(),
        _parser: ?*XMLParser,
        _elementName: ?*String,
        _namespaceURI: ?*String,
        _qName: ?*String,
        _attributeDict: ?*anyopaque,
    ) void {
        return objc.msgSend(_self, "parser:didStartElement:namespaceURI:qualifiedName:attributes:", void, .{
            _parser,
            _elementName,
            _namespaceURI,
            _qName,
            _attributeDict,
        });
    }

    pub fn parserDidEndElementNamespaceURIQualifiedName(
        _self: *@This(),
        _parser: ?*XMLParser,
        _elementName: ?*String,
        _namespaceURI: ?*String,
        _qName: ?*String,
    ) void {
        return objc.msgSend(_self, "parser:didEndElement:namespaceURI:qualifiedName:", void, .{
            _parser,
            _elementName,
            _namespaceURI,
            _qName,
        });
    }

    pub fn parserDidStartMappingPrefixToURI(_self: *@This(), _parser: ?*XMLParser, _prefix: ?*String, _namespaceURI: ?*String) void {
        return objc.msgSend(_self, "parser:didStartMappingPrefix:toURI:", void, .{ _parser, _prefix, _namespaceURI });
    }

    pub fn parserDidEndMappingPrefix(_self: *@This(), _parser: ?*XMLParser, _prefix: ?*String) void {
        return objc.msgSend(_self, "parser:didEndMappingPrefix:", void, .{ _parser, _prefix });
    }

    pub fn parserFoundCharacters(_self: *@This(), _parser: ?*XMLParser, _string: ?*String) void {
        return objc.msgSend(_self, "parser:foundCharacters:", void, .{ _parser, _string });
    }

    pub fn parserFoundIgnorableWhitespace(_self: *@This(), _parser: ?*XMLParser, _whitespaceString: ?*String) void {
        return objc.msgSend(_self, "parser:foundIgnorableWhitespace:", void, .{ _parser, _whitespaceString });
    }

    pub fn parserFoundProcessingInstructionWithTargetData(_self: *@This(), _parser: ?*XMLParser, _target: ?*String, _data: ?*String) void {
        return objc.msgSend(_self, "parser:foundProcessingInstructionWithTarget:data:", void, .{ _parser, _target, _data });
    }

    pub fn parserFoundComment(_self: *@This(), _parser: ?*XMLParser, _comment: ?*String) void {
        return objc.msgSend(_self, "parser:foundComment:", void, .{ _parser, _comment });
    }

    pub fn parserFoundCDATA(_self: *@This(), _parser: ?*XMLParser, _CDATABlock: ?*Data) void {
        return objc.msgSend(_self, "parser:foundCDATA:", void, .{ _parser, _CDATABlock });
    }

    pub fn parserResolveExternalEntityNameSystemID(_self: *@This(), _parser: ?*XMLParser, _name: ?*String, _systemID: ?*String) ?*Data {
        return objc.msgSend(_self, "parser:resolveExternalEntityName:systemID:", ?*Data, .{ _parser, _name, _systemID });
    }

    pub fn parserParseErrorOccurred(_self: *@This(), _parser: ?*XMLParser, _parseError: ?*Error) void {
        return objc.msgSend(_self, "parser:parseErrorOccurred:", void, .{ _parser, _parseError });
    }

    pub fn parserValidationErrorOccurred(_self: *@This(), _parser: ?*XMLParser, _validationError: ?*Error) void {
        return objc.msgSend(_self, "parser:validationErrorOccurred:", void, .{ _parser, _validationError });
    }
};

pub const XMLParserError = objc.NSInteger;
pub const XMLParserError_InternalError: objc.NSInteger = 1;
pub const XMLParserError_OutOfMemoryError: objc.NSInteger = 2;
pub const XMLParserError_DocumentStartError: objc.NSInteger = 3;
pub const XMLParserError_EmptyDocumentError: objc.NSInteger = 4;
pub const XMLParserError_PrematureDocumentEndError: objc.NSInteger = 5;
pub const XMLParserError_InvalidHexCharacterRefError: objc.NSInteger = 6;
pub const XMLParserError_InvalidDecimalCharacterRefError: objc.NSInteger = 7;
pub const XMLParserError_InvalidCharacterRefError: objc.NSInteger = 8;
pub const XMLParserError_InvalidCharacterError: objc.NSInteger = 9;
pub const XMLParserError_CharacterRefAtEOFError: objc.NSInteger = 10;
pub const XMLParserError_CharacterRefInPrologError: objc.NSInteger = 11;
pub const XMLParserError_CharacterRefInEpilogError: objc.NSInteger = 12;
pub const XMLParserError_CharacterRefInDTDError: objc.NSInteger = 13;
pub const XMLParserError_EntityRefAtEOFError: objc.NSInteger = 14;
pub const XMLParserError_EntityRefInPrologError: objc.NSInteger = 15;
pub const XMLParserError_EntityRefInEpilogError: objc.NSInteger = 16;
pub const XMLParserError_EntityRefInDTDError: objc.NSInteger = 17;
pub const XMLParserError_ParsedEntityRefAtEOFError: objc.NSInteger = 18;
pub const XMLParserError_ParsedEntityRefInPrologError: objc.NSInteger = 19;
pub const XMLParserError_ParsedEntityRefInEpilogError: objc.NSInteger = 20;
pub const XMLParserError_ParsedEntityRefInInternalSubsetError: objc.NSInteger = 21;
pub const XMLParserError_EntityReferenceWithoutNameError: objc.NSInteger = 22;
pub const XMLParserError_EntityReferenceMissingSemiError: objc.NSInteger = 23;
pub const XMLParserError_ParsedEntityRefNoNameError: objc.NSInteger = 24;
pub const XMLParserError_ParsedEntityRefMissingSemiError: objc.NSInteger = 25;
pub const XMLParserError_UndeclaredEntityError: objc.NSInteger = 26;
pub const XMLParserError_UnparsedEntityError: objc.NSInteger = 28;
pub const XMLParserError_EntityIsExternalError: objc.NSInteger = 29;
pub const XMLParserError_EntityIsParameterError: objc.NSInteger = 30;
pub const XMLParserError_UnknownEncodingError: objc.NSInteger = 31;
pub const XMLParserError_EncodingNotSupportedError: objc.NSInteger = 32;
pub const XMLParserError_StringNotStartedError: objc.NSInteger = 33;
pub const XMLParserError_StringNotClosedError: objc.NSInteger = 34;
pub const XMLParserError_NamespaceDeclarationError: objc.NSInteger = 35;
pub const XMLParserError_EntityNotStartedError: objc.NSInteger = 36;
pub const XMLParserError_EntityNotFinishedError: objc.NSInteger = 37;
pub const XMLParserError_LessThanSymbolInAttributeError: objc.NSInteger = 38;
pub const XMLParserError_AttributeNotStartedError: objc.NSInteger = 39;
pub const XMLParserError_AttributeNotFinishedError: objc.NSInteger = 40;
pub const XMLParserError_AttributeHasNoValueError: objc.NSInteger = 41;
pub const XMLParserError_AttributeRedefinedError: objc.NSInteger = 42;
pub const XMLParserError_LiteralNotStartedError: objc.NSInteger = 43;
pub const XMLParserError_LiteralNotFinishedError: objc.NSInteger = 44;
pub const XMLParserError_CommentNotFinishedError: objc.NSInteger = 45;
pub const XMLParserError_ProcessingInstructionNotStartedError: objc.NSInteger = 46;
pub const XMLParserError_ProcessingInstructionNotFinishedError: objc.NSInteger = 47;
pub const XMLParserError_NotationNotStartedError: objc.NSInteger = 48;
pub const XMLParserError_NotationNotFinishedError: objc.NSInteger = 49;
pub const XMLParserError_AttributeListNotStartedError: objc.NSInteger = 50;
pub const XMLParserError_AttributeListNotFinishedError: objc.NSInteger = 51;
pub const XMLParserError_MixedContentDeclNotStartedError: objc.NSInteger = 52;
pub const XMLParserError_MixedContentDeclNotFinishedError: objc.NSInteger = 53;
pub const XMLParserError_ElementContentDeclNotStartedError: objc.NSInteger = 54;
pub const XMLParserError_ElementContentDeclNotFinishedError: objc.NSInteger = 55;
pub const XMLParserError_XMLDeclNotStartedError: objc.NSInteger = 56;
pub const XMLParserError_XMLDeclNotFinishedError: objc.NSInteger = 57;
pub const XMLParserError_ConditionalSectionNotStartedError: objc.NSInteger = 58;
pub const XMLParserError_ConditionalSectionNotFinishedError: objc.NSInteger = 59;
pub const XMLParserError_ExternalSubsetNotFinishedError: objc.NSInteger = 60;
pub const XMLParserError_DOCTYPEDeclNotFinishedError: objc.NSInteger = 61;
pub const XMLParserError_MisplacedCDATAEndStringError: objc.NSInteger = 62;
pub const XMLParserError_CDATANotFinishedError: objc.NSInteger = 63;
pub const XMLParserError_MisplacedXMLDeclarationError: objc.NSInteger = 64;
pub const XMLParserError_SpaceRequiredError: objc.NSInteger = 65;
pub const XMLParserError_SeparatorRequiredError: objc.NSInteger = 66;
pub const XMLParserError_NMTOKENRequiredError: objc.NSInteger = 67;
pub const XMLParserError_NAMERequiredError: objc.NSInteger = 68;
pub const XMLParserError_PCDATARequiredError: objc.NSInteger = 69;
pub const XMLParserError_URIRequiredError: objc.NSInteger = 70;
pub const XMLParserError_PublicIdentifierRequiredError: objc.NSInteger = 71;
pub const XMLParserError_LTRequiredError: objc.NSInteger = 72;
pub const XMLParserError_GTRequiredError: objc.NSInteger = 73;
pub const XMLParserError_LTSlashRequiredError: objc.NSInteger = 74;
pub const XMLParserError_EqualExpectedError: objc.NSInteger = 75;
pub const XMLParserError_TagNameMismatchError: objc.NSInteger = 76;
pub const XMLParserError_UnfinishedTagError: objc.NSInteger = 77;
pub const XMLParserError_StandaloneValueError: objc.NSInteger = 78;
pub const XMLParserError_InvalidEncodingNameError: objc.NSInteger = 79;
pub const XMLParserError_CommentContainsDoubleHyphenError: objc.NSInteger = 80;
pub const XMLParserError_InvalidEncodingError: objc.NSInteger = 81;
pub const XMLParserError_ExternalStandaloneEntityError: objc.NSInteger = 82;
pub const XMLParserError_InvalidConditionalSectionError: objc.NSInteger = 83;
pub const XMLParserError_EntityValueRequiredError: objc.NSInteger = 84;
pub const XMLParserError_NotWellBalancedError: objc.NSInteger = 85;
pub const XMLParserError_ExtraContentError: objc.NSInteger = 86;
pub const XMLParserError_InvalidCharacterInEntityError: objc.NSInteger = 87;
pub const XMLParserError_ParsedEntityRefInInternalError: objc.NSInteger = 88;
pub const XMLParserError_EntityRefLoopError: objc.NSInteger = 89;
pub const XMLParserError_EntityBoundaryError: objc.NSInteger = 90;
pub const XMLParserError_InvalidURIError: objc.NSInteger = 91;
pub const XMLParserError_URIFragmentError: objc.NSInteger = 92;
pub const XMLParserError_NoDTDError: objc.NSInteger = 94;
pub const XMLParserError_DelegateAbortedParseError: objc.NSInteger = 512;

/// https://developer.apple.com/documentation/Foundation/NSXPCProxyCreating?language=objc
pub const XPCProxyCreating = opaque {
    pub const Internal = objc.ExternProtocol(@This(), &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;

    pub fn remoteObjectProxy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "remoteObjectProxy", ?objc.Id, .{});
    }

    pub fn remoteObjectProxyWithErrorHandler(_self: *@This(), _handler: *const fn (?*Error) callconv(.C) void) ?objc.Id {
        return objc.msgSend(_self, "remoteObjectProxyWithErrorHandler:", ?objc.Id, .{_handler});
    }

    pub fn synchronousRemoteObjectProxyWithErrorHandler(_self: *@This(), _handler: *const fn (?*Error) callconv(.C) void) ?objc.Id {
        return objc.msgSend(_self, "synchronousRemoteObjectProxyWithErrorHandler:", ?objc.Id, .{_handler});
    }
};

pub const XPCConnectionOptions = objc.NSUInteger;
pub const XPCConnectionOptions_Privileged: objc.NSUInteger = 4096;

/// https://developer.apple.com/documentation/Foundation/NSXPCConnection?language=objc
pub const XPCConnection = opaque {
    pub const Internal = objc.ExternClass("NSXPCConnection", @This(), objc.NSObject, &.{XPCProxyCreating});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn remoteObjectProxy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "remoteObjectProxy", ?objc.Id, .{});
    }

    pub fn remoteObjectProxyWithErrorHandler(_self: *@This(), _handler: *const fn (?*Error) callconv(.C) void) ?objc.Id {
        return objc.msgSend(_self, "remoteObjectProxyWithErrorHandler:", ?objc.Id, .{_handler});
    }

    pub fn synchronousRemoteObjectProxyWithErrorHandler(_self: *@This(), _handler: *const fn (?*Error) callconv(.C) void) ?objc.Id {
        return objc.msgSend(_self, "synchronousRemoteObjectProxyWithErrorHandler:", ?objc.Id, .{_handler});
    }

    pub fn initWithServiceName(_self: *@This(), _serviceName: ?*String) *@This() {
        return objc.msgSend(_self, "initWithServiceName:", *@This(), .{_serviceName});
    }

    pub fn initWithMachServiceNameOptions(_self: *@This(), _name: ?*String, _options: XPCConnectionOptions) *@This() {
        return objc.msgSend(_self, "initWithMachServiceName:options:", *@This(), .{ _name, _options });
    }

    pub fn initWithListenerEndpoint(_self: *@This(), _endpoint: ?*XPCListenerEndpoint) *@This() {
        return objc.msgSend(_self, "initWithListenerEndpoint:", *@This(), .{_endpoint});
    }

    pub fn @"resume"(_self: *@This()) void {
        return objc.msgSend(_self, "resume", void, .{});
    }

    pub fn @"suspend"(_self: *@This()) void {
        return objc.msgSend(_self, "suspend", void, .{});
    }

    pub fn activate(_self: *@This()) void {
        return objc.msgSend(_self, "activate", void, .{});
    }

    pub fn invalidate(_self: *@This()) void {
        return objc.msgSend(_self, "invalidate", void, .{});
    }

    pub fn currentConnection() ?*XPCConnection {
        return objc.msgSend(Internal.class(), "currentConnection", ?*XPCConnection, .{});
    }

    pub fn scheduleSendBarrierBlock(_self: *@This(), _block: *const fn () callconv(.C) void) void {
        return objc.msgSend(_self, "scheduleSendBarrierBlock:", void, .{_block});
    }

    pub fn setCodeSigningRequirement(_self: *@This(), _requirement: ?*String) void {
        return objc.msgSend(_self, "setCodeSigningRequirement:", void, .{_requirement});
    }

    pub fn serviceName(_self: *@This()) ?*String {
        return objc.msgSend(_self, "serviceName", ?*String, .{});
    }

    pub fn endpoint(_self: *@This()) ?*XPCListenerEndpoint {
        return objc.msgSend(_self, "endpoint", ?*XPCListenerEndpoint, .{});
    }

    pub fn exportedInterface(_self: *@This()) ?*XPCInterface {
        return objc.msgSend(_self, "exportedInterface", ?*XPCInterface, .{});
    }

    pub fn setExportedInterface(_self: *@This(), _exportedInterface: ?*XPCInterface) void {
        return objc.msgSend(_self, "setExportedInterface:", void, .{_exportedInterface});
    }

    pub fn exportedObject(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "exportedObject", ?objc.Id, .{});
    }

    pub fn setExportedObject(_self: *@This(), _exportedObject: ?objc.Id) void {
        return objc.msgSend(_self, "setExportedObject:", void, .{_exportedObject});
    }

    pub fn remoteObjectInterface(_self: *@This()) ?*XPCInterface {
        return objc.msgSend(_self, "remoteObjectInterface", ?*XPCInterface, .{});
    }

    pub fn setRemoteObjectInterface(_self: *@This(), _remoteObjectInterface: ?*XPCInterface) void {
        return objc.msgSend(_self, "setRemoteObjectInterface:", void, .{_remoteObjectInterface});
    }

    pub fn interruptionHandler(_self: *@This()) *const fn () callconv(.C) void {
        return objc.msgSend(_self, "interruptionHandler", *const fn () callconv(.C) void, .{});
    }

    pub fn setInterruptionHandler(_self: *@This(), _interruptionHandler: *const fn () callconv(.C) void) void {
        return objc.msgSend(_self, "setInterruptionHandler:", void, .{_interruptionHandler});
    }

    pub fn invalidationHandler(_self: *@This()) *const fn () callconv(.C) void {
        return objc.msgSend(_self, "invalidationHandler", *const fn () callconv(.C) void, .{});
    }

    pub fn setInvalidationHandler(_self: *@This(), _invalidationHandler: *const fn () callconv(.C) void) void {
        return objc.msgSend(_self, "setInvalidationHandler:", void, .{_invalidationHandler});
    }

    pub fn auditSessionIdentifier(_self: *@This()) objc.au_asid_t {
        return objc.msgSend(_self, "auditSessionIdentifier", objc.au_asid_t, .{});
    }

    pub fn processIdentifier(_self: *@This()) objc.pid_t {
        return objc.msgSend(_self, "processIdentifier", objc.pid_t, .{});
    }

    pub fn effectiveUserIdentifier(_self: *@This()) objc.uid_t {
        return objc.msgSend(_self, "effectiveUserIdentifier", objc.uid_t, .{});
    }

    pub fn effectiveGroupIdentifier(_self: *@This()) objc.gid_t {
        return objc.msgSend(_self, "effectiveGroupIdentifier", objc.gid_t, .{});
    }
};

/// https://developer.apple.com/documentation/Foundation/NSXPCListener?language=objc
pub const XPCListener = opaque {
    pub const Internal = objc.ExternClass("NSXPCListener", @This(), objc.NSObject, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn serviceListener() ?*XPCListener {
        return objc.msgSend(Internal.class(), "serviceListener", ?*XPCListener, .{});
    }

    pub fn anonymousListener() ?*XPCListener {
        return objc.msgSend(Internal.class(), "anonymousListener", ?*XPCListener, .{});
    }

    pub fn initWithMachServiceName(_self: *@This(), _name: ?*String) *@This() {
        return objc.msgSend(_self, "initWithMachServiceName:", *@This(), .{_name});
    }

    pub fn @"resume"(_self: *@This()) void {
        return objc.msgSend(_self, "resume", void, .{});
    }

    pub fn @"suspend"(_self: *@This()) void {
        return objc.msgSend(_self, "suspend", void, .{});
    }

    pub fn activate(_self: *@This()) void {
        return objc.msgSend(_self, "activate", void, .{});
    }

    pub fn invalidate(_self: *@This()) void {
        return objc.msgSend(_self, "invalidate", void, .{});
    }

    pub fn setConnectionCodeSigningRequirement(_self: *@This(), _requirement: ?*String) void {
        return objc.msgSend(_self, "setConnectionCodeSigningRequirement:", void, .{_requirement});
    }

    pub fn delegate(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "delegate", ?*anyopaque, .{});
    }

    pub fn setDelegate(_self: *@This(), _delegate: ?*anyopaque) void {
        return objc.msgSend(_self, "setDelegate:", void, .{_delegate});
    }

    pub fn endpoint(_self: *@This()) ?*XPCListenerEndpoint {
        return objc.msgSend(_self, "endpoint", ?*XPCListenerEndpoint, .{});
    }
};

/// https://developer.apple.com/documentation/Foundation/NSXPCListenerDelegate?language=objc
pub const XPCListenerDelegate = opaque {
    pub const Internal = objc.ExternProtocol(@This(), &.{objc.NSObject});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn listenerShouldAcceptNewConnection(_self: *@This(), _listener: ?*XPCListener, _newConnection: ?*XPCConnection) objc.BOOL {
        return objc.msgSend(_self, "listener:shouldAcceptNewConnection:", objc.BOOL, .{ _listener, _newConnection });
    }
};

/// https://developer.apple.com/documentation/Foundation/NSXPCInterface?language=objc
pub const XPCInterface = opaque {
    pub const Internal = objc.ExternClass("NSXPCInterface", @This(), objc.NSObject, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn interfaceWithProtocol(_protocol: ?**objc.Protocol) ?*XPCInterface {
        return objc.msgSend(Internal.class(), "interfaceWithProtocol:", ?*XPCInterface, .{_protocol});
    }

    pub fn setClassesForSelectorArgumentIndexOfReply(
        _self: *@This(),
        _classes: ?*anyopaque,
        _sel: objc.Selector,
        _arg: objc.NSUInteger,
        _ofReply: objc.BOOL,
    ) void {
        return objc.msgSend(_self, "setClasses:forSelector:argumentIndex:ofReply:", void, .{
            _classes,
            _sel,
            _arg,
            _ofReply,
        });
    }

    pub fn classesForSelectorArgumentIndexOfReply(_self: *@This(), _sel: objc.Selector, _arg: objc.NSUInteger, _ofReply: objc.BOOL) ?*anyopaque {
        return objc.msgSend(_self, "classesForSelector:argumentIndex:ofReply:", ?*anyopaque, .{ _sel, _arg, _ofReply });
    }

    pub fn setInterfaceForSelectorArgumentIndexOfReply(
        _self: *@This(),
        _ifc: ?*XPCInterface,
        _sel: objc.Selector,
        _arg: objc.NSUInteger,
        _ofReply: objc.BOOL,
    ) void {
        return objc.msgSend(_self, "setInterface:forSelector:argumentIndex:ofReply:", void, .{
            _ifc,
            _sel,
            _arg,
            _ofReply,
        });
    }

    pub fn interfaceForSelectorArgumentIndexOfReply(_self: *@This(), _sel: objc.Selector, _arg: objc.NSUInteger, _ofReply: objc.BOOL) ?*XPCInterface {
        return objc.msgSend(_self, "interfaceForSelector:argumentIndex:ofReply:", ?*XPCInterface, .{ _sel, _arg, _ofReply });
    }

    pub fn setXPCTypeForSelectorArgumentIndexOfReply(
        _self: *@This(),
        _type: objc.xpc_type_t,
        _sel: objc.Selector,
        _arg: objc.NSUInteger,
        _ofReply: objc.BOOL,
    ) void {
        return objc.msgSend(_self, "setXPCType:forSelector:argumentIndex:ofReply:", void, .{
            _type,
            _sel,
            _arg,
            _ofReply,
        });
    }

    pub fn xpcTypeForSelectorArgumentIndexOfReply(_self: *@This(), _sel: objc.Selector, _arg: objc.NSUInteger, _ofReply: objc.BOOL) objc.xpc_type_t {
        return objc.msgSend(_self, "XPCTypeForSelector:argumentIndex:ofReply:", objc.xpc_type_t, .{ _sel, _arg, _ofReply });
    }

    pub fn protocol(_self: *@This()) ?**objc.Protocol {
        return objc.msgSend(_self, "protocol", ?**objc.Protocol, .{});
    }

    pub fn setProtocol(_self: *@This(), _protocol: ?**objc.Protocol) void {
        return objc.msgSend(_self, "setProtocol:", void, .{_protocol});
    }
};

/// https://developer.apple.com/documentation/Foundation/NSXPCListenerEndpoint?language=objc
pub const XPCListenerEndpoint = opaque {
    pub const Internal = objc.ExternClass("NSXPCListenerEndpoint", @This(), objc.NSObject, &.{SecureCoding});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn supportsSecureCoding() objc.BOOL {
        return objc.msgSend(Internal.class(), "supportsSecureCoding", objc.BOOL, .{});
    }
};

/// https://developer.apple.com/documentation/Foundation/NSXPCCoder?language=objc
pub const XPCCoder = opaque {
    pub const Internal = objc.ExternClass("NSXPCCoder", @This(), Coder, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn encodeValueOfObjCTypeAt(_self: *@This(), _type: ?*i8, _addr: ?*anyopaque) void {
        return objc.msgSend(_self, "encodeValueOfObjCType:at:", void, .{ _type, _addr });
    }

    pub fn encodeDataObject(_self: *@This(), _data: ?*Data) void {
        return objc.msgSend(_self, "encodeDataObject:", void, .{_data});
    }

    pub fn decodeDataObject(_self: *@This()) ?*Data {
        return objc.msgSend(_self, "decodeDataObject", ?*Data, .{});
    }

    pub fn decodeValueOfObjCTypeAtSize(_self: *@This(), _type: ?*i8, _data: ?*anyopaque, _size: objc.NSUInteger) void {
        return objc.msgSend(_self, "decodeValueOfObjCType:at:size:", void, .{ _type, _data, _size });
    }

    pub fn versionForClassName(_self: *@This(), _className: ?*String) objc.NSInteger {
        return objc.msgSend(_self, "versionForClassName:", objc.NSInteger, .{_className});
    }

    pub fn encodeXPCObjectForKey(_self: *@This(), _xpcObject: objc.xpc_object_t, _key: ?*String) void {
        return objc.msgSend(_self, "encodeXPCObject:forKey:", void, .{ _xpcObject, _key });
    }

    pub fn decodeXPCObjectOfTypeForKey(_self: *@This(), _type: objc.xpc_type_t, _key: ?*String) objc.xpc_object_t {
        return objc.msgSend(_self, "decodeXPCObjectOfType:forKey:", objc.xpc_object_t, .{ _type, _key });
    }

    pub fn userInfo(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "userInfo", ?*anyopaque, .{});
    }

    pub fn setUserInfo(_self: *@This(), _userInfo: ?*anyopaque) void {
        return objc.msgSend(_self, "setUserInfo:", void, .{_userInfo});
    }

    pub fn connection(_self: *@This()) ?*XPCConnection {
        return objc.msgSend(_self, "connection", ?*XPCConnection, .{});
    }
};

pub const ByteCountFormatterUnits = objc.NSUInteger;
pub const ByteCountFormatterUnits_UseDefault: objc.NSUInteger = 0;
pub const ByteCountFormatterUnits_UseBytes: objc.NSUInteger = 1;
pub const ByteCountFormatterUnits_UseKB: objc.NSUInteger = 2;
pub const ByteCountFormatterUnits_UseMB: objc.NSUInteger = 4;
pub const ByteCountFormatterUnits_UseGB: objc.NSUInteger = 8;
pub const ByteCountFormatterUnits_UseTB: objc.NSUInteger = 16;
pub const ByteCountFormatterUnits_UsePB: objc.NSUInteger = 32;
pub const ByteCountFormatterUnits_UseEB: objc.NSUInteger = 64;
pub const ByteCountFormatterUnits_UseZB: objc.NSUInteger = 128;
pub const ByteCountFormatterUnits_UseYBOrHigher: objc.NSUInteger = 65280;
pub const ByteCountFormatterUnits_UseAll: objc.NSUInteger = 65535;

pub const ByteCountFormatterCountStyle = objc.NSInteger;
pub const ByteCountFormatterCountStyle_File: objc.NSInteger = 0;
pub const ByteCountFormatterCountStyle_Memory: objc.NSInteger = 1;
pub const ByteCountFormatterCountStyle_Decimal: objc.NSInteger = 2;
pub const ByteCountFormatterCountStyle_Binary: objc.NSInteger = 3;

/// https://developer.apple.com/documentation/Foundation/NSByteCountFormatter?language=objc
pub const ByteCountFormatter = opaque {
    pub const Internal = objc.ExternClass("NSByteCountFormatter", @This(), Formatter, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn stringForObjectValue(_self: *@This(), _obj: ?objc.Id) ?*String {
        return objc.msgSend(_self, "stringForObjectValue:", ?*String, .{_obj});
    }

    pub fn attributedStringForObjectValueWithDefaultAttributes(_self: *@This(), _obj: ?objc.Id, _attrs: ?*anyopaque) ?*AttributedString {
        return objc.msgSend(_self, "attributedStringForObjectValue:withDefaultAttributes:", ?*AttributedString, .{ _obj, _attrs });
    }

    pub fn editingStringForObjectValue(_self: *@This(), _obj: ?objc.Id) ?*String {
        return objc.msgSend(_self, "editingStringForObjectValue:", ?*String, .{_obj});
    }

    pub fn getObjectValueForStringErrorDescription(_self: *@This(), _obj: ?*?objc.Id, _string: ?*String, _error: ?*?*String) objc.BOOL {
        return objc.msgSend(_self, "getObjectValue:forString:errorDescription:", objc.BOOL, .{ _obj, _string, _error });
    }

    pub fn isPartialStringValidNewEditingStringErrorDescription(_self: *@This(), _partialString: ?*String, _newString: ?*?*String, _error: ?*?*String) objc.BOOL {
        return objc.msgSend(_self, "isPartialStringValid:newEditingString:errorDescription:", objc.BOOL, .{ _partialString, _newString, _error });
    }

    pub fn isPartialStringValidProposedSelectedRangeOriginalStringOriginalSelectedRangeErrorDescription(
        _self: *@This(),
        _partialStringPtr: ?*?*String,
        _proposedSelRangePtr: RangePointer,
        _origString: ?*String,
        _origSelRange: Range,
        _error: ?*?*String,
    ) objc.BOOL {
        return objc.msgSend(_self, "isPartialStringValid:proposedSelectedRange:originalString:originalSelectedRange:errorDescription:", objc.BOOL, .{
            _partialStringPtr,
            _proposedSelRangePtr,
            _origString,
            _origSelRange,
            _error,
        });
    }

    pub fn stringFromByteCountCountStyle(_byteCount: i64, _countStyle: ByteCountFormatterCountStyle) ?*String {
        return objc.msgSend(Internal.class(), "stringFromByteCount:countStyle:", ?*String, .{ _byteCount, _countStyle });
    }

    pub fn stringFromByteCount(_self: *@This(), _byteCount: i64) ?*String {
        return objc.msgSend(_self, "stringFromByteCount:", ?*String, .{_byteCount});
    }

    pub fn stringFromMeasurementCountStyle(_measurement: ?*anyopaque, _countStyle: ByteCountFormatterCountStyle) ?*String {
        return objc.msgSend(Internal.class(), "stringFromMeasurement:countStyle:", ?*String, .{ _measurement, _countStyle });
    }

    pub fn stringFromMeasurement(_self: *@This(), _measurement: ?*anyopaque) ?*String {
        return objc.msgSend(_self, "stringFromMeasurement:", ?*String, .{_measurement});
    }

    pub fn allowedUnits(_self: *@This()) ByteCountFormatterUnits {
        return objc.msgSend(_self, "allowedUnits", ByteCountFormatterUnits, .{});
    }

    pub fn setAllowedUnits(_self: *@This(), _allowedUnits: ByteCountFormatterUnits) void {
        return objc.msgSend(_self, "setAllowedUnits:", void, .{_allowedUnits});
    }

    pub fn countStyle(_self: *@This()) ByteCountFormatterCountStyle {
        return objc.msgSend(_self, "countStyle", ByteCountFormatterCountStyle, .{});
    }

    pub fn setCountStyle(_self: *@This(), _countStyle: ByteCountFormatterCountStyle) void {
        return objc.msgSend(_self, "setCountStyle:", void, .{_countStyle});
    }

    pub fn allowsNonnumericFormatting(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsNonnumericFormatting", objc.BOOL, .{});
    }

    pub fn setAllowsNonnumericFormatting(_self: *@This(), _allowsNonnumericFormatting: objc.BOOL) void {
        return objc.msgSend(_self, "setAllowsNonnumericFormatting:", void, .{_allowsNonnumericFormatting});
    }

    pub fn includesUnit(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "includesUnit", objc.BOOL, .{});
    }

    pub fn setIncludesUnit(_self: *@This(), _includesUnit: objc.BOOL) void {
        return objc.msgSend(_self, "setIncludesUnit:", void, .{_includesUnit});
    }

    pub fn includesCount(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "includesCount", objc.BOOL, .{});
    }

    pub fn setIncludesCount(_self: *@This(), _includesCount: objc.BOOL) void {
        return objc.msgSend(_self, "setIncludesCount:", void, .{_includesCount});
    }

    pub fn includesActualByteCount(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "includesActualByteCount", objc.BOOL, .{});
    }

    pub fn setIncludesActualByteCount(_self: *@This(), _includesActualByteCount: objc.BOOL) void {
        return objc.msgSend(_self, "setIncludesActualByteCount:", void, .{_includesActualByteCount});
    }

    pub fn isAdaptive(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isAdaptive", objc.BOOL, .{});
    }

    pub fn setAdaptive(_self: *@This(), _adaptive: objc.BOOL) void {
        return objc.msgSend(_self, "setAdaptive:", void, .{_adaptive});
    }

    pub fn zeroPadsFractionDigits(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "zeroPadsFractionDigits", objc.BOOL, .{});
    }

    pub fn setZeroPadsFractionDigits(_self: *@This(), _zeroPadsFractionDigits: objc.BOOL) void {
        return objc.msgSend(_self, "setZeroPadsFractionDigits:", void, .{_zeroPadsFractionDigits});
    }

    pub fn formattingContext(_self: *@This()) FormattingContext {
        return objc.msgSend(_self, "formattingContext", FormattingContext, .{});
    }

    pub fn setFormattingContext(_self: *@This(), _formattingContext: FormattingContext) void {
        return objc.msgSend(_self, "setFormattingContext:", void, .{_formattingContext});
    }
};

/// https://developer.apple.com/documentation/Foundation/NSCache?language=objc
pub fn Cache(comptime KeyType: type, comptime ObjectType: type) type {
    const unused0 = KeyType;
    _ = unused0; // Prevent unused parameter warning!!!
    const unused1 = ObjectType;
    _ = unused1; // Prevent unused parameter warning!!!
    return struct {
        pub const Internal = objc.ExternClass("NSCache", @This(), objc.NSObject, &.{});
        pub const as = Internal.as;
        pub const retain = Internal.retain;
        pub const release = Internal.release;
        pub const autorelease = Internal.autorelease;
        pub const new = Internal.new;
        pub const alloc = Internal.alloc;

        pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
            return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
        }

        pub fn hash(_self: *@This()) objc.NSUInteger {
            return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
        }

        pub fn superclass(_self: *@This()) objc.Class {
            return objc.msgSend(_self, "superclass", objc.Class, .{});
        }

        pub fn class(_self: *@This()) objc.Class {
            return objc.msgSend(_self, "class", objc.Class, .{});
        }

        pub fn self(_self: *@This()) *@This() {
            return objc.msgSend(_self, "self", *@This(), .{});
        }

        pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
            return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
        }

        pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
            return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
        }

        pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
            return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
        }

        pub fn isProxy(_self: *@This()) objc.BOOL {
            return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
        }

        pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
            return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
        }

        pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
            return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
        }

        pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
            return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
        }

        pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
            return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
        }

        pub fn retainCount(_self: *@This()) objc.NSUInteger {
            return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
        }

        pub fn zone(_self: *@This()) ?*objc._NSZone {
            return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
        }

        pub fn description(_self: *@This()) ?*String {
            return objc.msgSend(_self, "description", ?*String, .{});
        }

        pub fn debugDescription(_self: *@This()) ?*String {
            return objc.msgSend(_self, "debugDescription", ?*String, .{});
        }

        pub fn load() void {
            return objc.msgSend(Internal.class(), "load", void, .{});
        }

        pub fn initialize() void {
            return objc.msgSend(Internal.class(), "initialize", void, .{});
        }

        pub fn init(_self: *@This()) *@This() {
            return objc.msgSend(_self, "init", *@This(), .{});
        }

        pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
            return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
        }

        pub fn dealloc(_self: *@This()) void {
            return objc.msgSend(_self, "dealloc", void, .{});
        }

        pub fn finalize(_self: *@This()) void {
            return objc.msgSend(_self, "finalize", void, .{});
        }

        pub fn copy(_self: *@This()) ?objc.Id {
            return objc.msgSend(_self, "copy", ?objc.Id, .{});
        }

        pub fn mutableCopy(_self: *@This()) ?objc.Id {
            return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
        }

        pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
            return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
        }

        pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
            return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
        }

        pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
            return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
        }

        pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
            return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
        }

        pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
            return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
        }

        pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
            return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
        }

        pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
            return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
        }

        pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
            return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
        }

        pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
            return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
        }

        pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
            return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
        }

        pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
            return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
        }

        pub fn retainWeakReference(_self: *@This()) objc.BOOL {
            return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
        }

        pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
            return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
        }

        pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
            return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
        }

        pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
            return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
        }

        pub fn objectForKey(_self: *@This(), _key: KeyType) ObjectType {
            return objc.msgSend(_self, "objectForKey:", ObjectType, .{_key});
        }

        pub fn setObjectForKey(_self: *@This(), _obj: ObjectType, _key: KeyType) void {
            return objc.msgSend(_self, "setObject:forKey:", void, .{ _obj, _key });
        }

        pub fn setObjectForKeyCost(_self: *@This(), _obj: ObjectType, _key: KeyType, _g: objc.NSUInteger) void {
            return objc.msgSend(_self, "setObject:forKey:cost:", void, .{ _obj, _key, _g });
        }

        pub fn removeObjectForKey(_self: *@This(), _key: KeyType) void {
            return objc.msgSend(_self, "removeObjectForKey:", void, .{_key});
        }

        pub fn removeAllObjects(_self: *@This()) void {
            return objc.msgSend(_self, "removeAllObjects", void, .{});
        }

        pub fn name(_self: *@This()) ?*String {
            return objc.msgSend(_self, "name", ?*String, .{});
        }

        pub fn setName(_self: *@This(), _name: ?*String) void {
            return objc.msgSend(_self, "setName:", void, .{_name});
        }

        pub fn delegate(_self: *@This()) ?*anyopaque {
            return objc.msgSend(_self, "delegate", ?*anyopaque, .{});
        }

        pub fn setDelegate(_self: *@This(), _delegate: ?*anyopaque) void {
            return objc.msgSend(_self, "setDelegate:", void, .{_delegate});
        }

        pub fn totalCostLimit(_self: *@This()) objc.NSUInteger {
            return objc.msgSend(_self, "totalCostLimit", objc.NSUInteger, .{});
        }

        pub fn setTotalCostLimit(_self: *@This(), _totalCostLimit: objc.NSUInteger) void {
            return objc.msgSend(_self, "setTotalCostLimit:", void, .{_totalCostLimit});
        }

        pub fn countLimit(_self: *@This()) objc.NSUInteger {
            return objc.msgSend(_self, "countLimit", objc.NSUInteger, .{});
        }

        pub fn setCountLimit(_self: *@This(), _countLimit: objc.NSUInteger) void {
            return objc.msgSend(_self, "setCountLimit:", void, .{_countLimit});
        }

        pub fn evictsObjectsWithDiscardedContent(_self: *@This()) objc.BOOL {
            return objc.msgSend(_self, "evictsObjectsWithDiscardedContent", objc.BOOL, .{});
        }

        pub fn setEvictsObjectsWithDiscardedContent(_self: *@This(), _evictsObjectsWithDiscardedContent: objc.BOOL) void {
            return objc.msgSend(_self, "setEvictsObjectsWithDiscardedContent:", void, .{_evictsObjectsWithDiscardedContent});
        }
    };
}

/// https://developer.apple.com/documentation/Foundation/NSCacheDelegate?language=objc
pub const CacheDelegate = opaque {
    pub const Internal = objc.ExternProtocol(@This(), &.{objc.NSObject});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn cacheWillEvictObject(_self: *@This(), _cache: ?*Cache, _obj: ?objc.Id) void {
        return objc.msgSend(_self, "cache:willEvictObject:", void, .{ _cache, _obj });
    }
};

/// https://developer.apple.com/documentation/Foundation/NSPredicate?language=objc
pub const Predicate = opaque {
    pub const _predicateFlags = extern struct {
        _evaluationBlocked: u32,
        _reservedPredicateFlags: u32,
    };

    pub const Internal = objc.ExternClass("NSPredicate", @This(), objc.NSObject, &.{ SecureCoding, Copying });
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn supportsSecureCoding() objc.BOOL {
        return objc.msgSend(Internal.class(), "supportsSecureCoding", objc.BOOL, .{});
    }

    pub fn predicateWithFormatArgumentArray(_predicateFormat: ?*String, _arguments: ?*Array) ?*Predicate {
        return objc.msgSend(Internal.class(), "predicateWithFormat:argumentArray:", ?*Predicate, .{ _predicateFormat, _arguments });
    }

    pub fn predicateWithFormat(_predicateFormat: ?*String) ?*Predicate {
        return objc.msgSend(Internal.class(), "predicateWithFormat:", ?*Predicate, .{_predicateFormat});
    }

    pub fn predicateWithFormatArguments(_predicateFormat: ?*String, _argList: objc.va_list) ?*Predicate {
        return objc.msgSend(Internal.class(), "predicateWithFormat:arguments:", ?*Predicate, .{ _predicateFormat, _argList });
    }

    pub fn predicateFromMetadataQueryString(_queryString: ?*String) ?*Predicate {
        return objc.msgSend(Internal.class(), "predicateFromMetadataQueryString:", ?*Predicate, .{_queryString});
    }

    pub fn predicateWithValue(_value: objc.BOOL) ?*Predicate {
        return objc.msgSend(Internal.class(), "predicateWithValue:", ?*Predicate, .{_value});
    }

    pub fn predicateWithBlock(_block: *const fn (?objc.Id, ?*anyopaque) callconv(.C) objc.BOOL) ?*Predicate {
        return objc.msgSend(Internal.class(), "predicateWithBlock:", ?*Predicate, .{_block});
    }

    pub fn predicateWithSubstitutionVariables(_self: *@This(), _variables: ?*anyopaque) *@This() {
        return objc.msgSend(_self, "predicateWithSubstitutionVariables:", *@This(), .{_variables});
    }

    pub fn evaluateWithObject(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "evaluateWithObject:", objc.BOOL, .{_object});
    }

    pub fn evaluateWithObjectSubstitutionVariables(_self: *@This(), _object: ?objc.Id, _bindings: ?*anyopaque) objc.BOOL {
        return objc.msgSend(_self, "evaluateWithObject:substitutionVariables:", objc.BOOL, .{ _object, _bindings });
    }

    pub fn allowEvaluation(_self: *@This()) void {
        return objc.msgSend(_self, "allowEvaluation", void, .{});
    }

    pub fn predicateFormat(_self: *@This()) ?*String {
        return objc.msgSend(_self, "predicateFormat", ?*String, .{});
    }
};

pub const ComparisonPredicateOptions = objc.NSUInteger;
pub const ComparisonPredicateOptions_CaseInsensitivePredicateOption: objc.NSUInteger = 1;
pub const ComparisonPredicateOptions_DiacriticInsensitivePredicateOption: objc.NSUInteger = 2;
pub const ComparisonPredicateOptions_NormalizedPredicateOption: objc.NSUInteger = 4;

pub const ComparisonPredicateModifier = objc.NSUInteger;
pub const ComparisonPredicateModifier_DirectPredicateModifier: objc.NSUInteger = 0;
pub const ComparisonPredicateModifier_AllPredicateModifier: objc.NSUInteger = 1;
pub const ComparisonPredicateModifier_AnyPredicateModifier: objc.NSUInteger = 2;

pub const PredicateOperatorType = objc.NSUInteger;
pub const PredicateOperatorType_LessThanPredicateOperatorType: objc.NSUInteger = 0;
pub const PredicateOperatorType_LessThanOrEqualToPredicateOperatorType: objc.NSUInteger = 1;
pub const PredicateOperatorType_GreaterThanPredicateOperatorType: objc.NSUInteger = 2;
pub const PredicateOperatorType_GreaterThanOrEqualToPredicateOperatorType: objc.NSUInteger = 3;
pub const PredicateOperatorType_EqualToPredicateOperatorType: objc.NSUInteger = 4;
pub const PredicateOperatorType_NotEqualToPredicateOperatorType: objc.NSUInteger = 5;
pub const PredicateOperatorType_MatchesPredicateOperatorType: objc.NSUInteger = 6;
pub const PredicateOperatorType_LikePredicateOperatorType: objc.NSUInteger = 7;
pub const PredicateOperatorType_BeginsWithPredicateOperatorType: objc.NSUInteger = 8;
pub const PredicateOperatorType_EndsWithPredicateOperatorType: objc.NSUInteger = 9;
pub const PredicateOperatorType_InPredicateOperatorType: objc.NSUInteger = 10;
pub const PredicateOperatorType_CustomSelectorPredicateOperatorType: objc.NSUInteger = 11;
pub const PredicateOperatorType_ContainsPredicateOperatorType: objc.NSUInteger = 99;
pub const PredicateOperatorType_BetweenPredicateOperatorType: objc.NSUInteger = 100;

/// https://developer.apple.com/documentation/Foundation/NSComparisonPredicate?language=objc
pub const ComparisonPredicate = opaque {
    pub const Internal = objc.ExternClass("NSComparisonPredicate", @This(), Predicate, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn supportsSecureCoding() objc.BOOL {
        return objc.msgSend(Internal.class(), "supportsSecureCoding", objc.BOOL, .{});
    }

    pub fn predicateWithFormatArgumentArray(_predicateFormat: ?*String, _arguments: ?*Array) ?*Predicate {
        return objc.msgSend(Internal.class(), "predicateWithFormat:argumentArray:", ?*Predicate, .{ _predicateFormat, _arguments });
    }

    pub fn predicateWithFormat(_predicateFormat: ?*String) ?*Predicate {
        return objc.msgSend(Internal.class(), "predicateWithFormat:", ?*Predicate, .{_predicateFormat});
    }

    pub fn predicateWithFormatArguments(_predicateFormat: ?*String, _argList: objc.va_list) ?*Predicate {
        return objc.msgSend(Internal.class(), "predicateWithFormat:arguments:", ?*Predicate, .{ _predicateFormat, _argList });
    }

    pub fn predicateFromMetadataQueryString(_queryString: ?*String) ?*Predicate {
        return objc.msgSend(Internal.class(), "predicateFromMetadataQueryString:", ?*Predicate, .{_queryString});
    }

    pub fn predicateWithValue(_value: objc.BOOL) ?*Predicate {
        return objc.msgSend(Internal.class(), "predicateWithValue:", ?*Predicate, .{_value});
    }

    pub fn predicateWithBlock(_block: *const fn (?objc.Id, ?*anyopaque) callconv(.C) objc.BOOL) ?*Predicate {
        return objc.msgSend(Internal.class(), "predicateWithBlock:", ?*Predicate, .{_block});
    }

    pub fn predicateWithSubstitutionVariables(_self: *@This(), _variables: ?*anyopaque) *@This() {
        return objc.msgSend(_self, "predicateWithSubstitutionVariables:", *@This(), .{_variables});
    }

    pub fn evaluateWithObject(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "evaluateWithObject:", objc.BOOL, .{_object});
    }

    pub fn evaluateWithObjectSubstitutionVariables(_self: *@This(), _object: ?objc.Id, _bindings: ?*anyopaque) objc.BOOL {
        return objc.msgSend(_self, "evaluateWithObject:substitutionVariables:", objc.BOOL, .{ _object, _bindings });
    }

    pub fn allowEvaluation(_self: *@This()) void {
        return objc.msgSend(_self, "allowEvaluation", void, .{});
    }

    pub fn predicateFormat(_self: *@This()) ?*String {
        return objc.msgSend(_self, "predicateFormat", ?*String, .{});
    }

    pub fn predicateWithLeftExpressionRightExpressionModifierTypeOptions(
        _lhs: ?*Expression,
        _rhs: ?*Expression,
        _modifier: ComparisonPredicateModifier,
        _type: PredicateOperatorType,
        _options: ComparisonPredicateOptions,
    ) ?*ComparisonPredicate {
        return objc.msgSend(Internal.class(), "predicateWithLeftExpression:rightExpression:modifier:type:options:", ?*ComparisonPredicate, .{
            _lhs,
            _rhs,
            _modifier,
            _type,
            _options,
        });
    }

    pub fn predicateWithLeftExpressionRightExpressionCustomSelector(_lhs: ?*Expression, _rhs: ?*Expression, _selector: objc.Selector) ?*ComparisonPredicate {
        return objc.msgSend(Internal.class(), "predicateWithLeftExpression:rightExpression:customSelector:", ?*ComparisonPredicate, .{ _lhs, _rhs, _selector });
    }

    pub fn initWithLeftExpressionRightExpressionModifierTypeOptions(
        _self: *@This(),
        _lhs: ?*Expression,
        _rhs: ?*Expression,
        _modifier: ComparisonPredicateModifier,
        _type: PredicateOperatorType,
        _options: ComparisonPredicateOptions,
    ) *@This() {
        return objc.msgSend(_self, "initWithLeftExpression:rightExpression:modifier:type:options:", *@This(), .{
            _lhs,
            _rhs,
            _modifier,
            _type,
            _options,
        });
    }

    pub fn initWithLeftExpressionRightExpressionCustomSelector(_self: *@This(), _lhs: ?*Expression, _rhs: ?*Expression, _selector: objc.Selector) *@This() {
        return objc.msgSend(_self, "initWithLeftExpression:rightExpression:customSelector:", *@This(), .{ _lhs, _rhs, _selector });
    }

    pub fn predicateOperatorType(_self: *@This()) PredicateOperatorType {
        return objc.msgSend(_self, "predicateOperatorType", PredicateOperatorType, .{});
    }

    pub fn comparisonPredicateModifier(_self: *@This()) ComparisonPredicateModifier {
        return objc.msgSend(_self, "comparisonPredicateModifier", ComparisonPredicateModifier, .{});
    }

    pub fn leftExpression(_self: *@This()) ?*Expression {
        return objc.msgSend(_self, "leftExpression", ?*Expression, .{});
    }

    pub fn rightExpression(_self: *@This()) ?*Expression {
        return objc.msgSend(_self, "rightExpression", ?*Expression, .{});
    }

    pub fn customSelector(_self: *@This()) objc.Selector {
        return objc.msgSend(_self, "customSelector", objc.Selector, .{});
    }

    pub fn options(_self: *@This()) ComparisonPredicateOptions {
        return objc.msgSend(_self, "options", ComparisonPredicateOptions, .{});
    }
};

pub const CompoundPredicateType = objc.NSUInteger;
pub const CompoundPredicateType_NotPredicateType: objc.NSUInteger = 0;
pub const CompoundPredicateType_AndPredicateType: objc.NSUInteger = 1;
pub const CompoundPredicateType_OrPredicateType: objc.NSUInteger = 2;

/// https://developer.apple.com/documentation/Foundation/NSCompoundPredicate?language=objc
pub const CompoundPredicate = opaque {
    pub const Internal = objc.ExternClass("NSCompoundPredicate", @This(), Predicate, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn supportsSecureCoding() objc.BOOL {
        return objc.msgSend(Internal.class(), "supportsSecureCoding", objc.BOOL, .{});
    }

    pub fn predicateWithFormatArgumentArray(_predicateFormat: ?*String, _arguments: ?*Array) ?*Predicate {
        return objc.msgSend(Internal.class(), "predicateWithFormat:argumentArray:", ?*Predicate, .{ _predicateFormat, _arguments });
    }

    pub fn predicateWithFormat(_predicateFormat: ?*String) ?*Predicate {
        return objc.msgSend(Internal.class(), "predicateWithFormat:", ?*Predicate, .{_predicateFormat});
    }

    pub fn predicateWithFormatArguments(_predicateFormat: ?*String, _argList: objc.va_list) ?*Predicate {
        return objc.msgSend(Internal.class(), "predicateWithFormat:arguments:", ?*Predicate, .{ _predicateFormat, _argList });
    }

    pub fn predicateFromMetadataQueryString(_queryString: ?*String) ?*Predicate {
        return objc.msgSend(Internal.class(), "predicateFromMetadataQueryString:", ?*Predicate, .{_queryString});
    }

    pub fn predicateWithValue(_value: objc.BOOL) ?*Predicate {
        return objc.msgSend(Internal.class(), "predicateWithValue:", ?*Predicate, .{_value});
    }

    pub fn predicateWithBlock(_block: *const fn (?objc.Id, ?*anyopaque) callconv(.C) objc.BOOL) ?*Predicate {
        return objc.msgSend(Internal.class(), "predicateWithBlock:", ?*Predicate, .{_block});
    }

    pub fn predicateWithSubstitutionVariables(_self: *@This(), _variables: ?*anyopaque) *@This() {
        return objc.msgSend(_self, "predicateWithSubstitutionVariables:", *@This(), .{_variables});
    }

    pub fn evaluateWithObject(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "evaluateWithObject:", objc.BOOL, .{_object});
    }

    pub fn evaluateWithObjectSubstitutionVariables(_self: *@This(), _object: ?objc.Id, _bindings: ?*anyopaque) objc.BOOL {
        return objc.msgSend(_self, "evaluateWithObject:substitutionVariables:", objc.BOOL, .{ _object, _bindings });
    }

    pub fn allowEvaluation(_self: *@This()) void {
        return objc.msgSend(_self, "allowEvaluation", void, .{});
    }

    pub fn predicateFormat(_self: *@This()) ?*String {
        return objc.msgSend(_self, "predicateFormat", ?*String, .{});
    }

    pub fn initWithTypeSubpredicates(_self: *@This(), _type: CompoundPredicateType, _subpredicates: ?*anyopaque) *@This() {
        return objc.msgSend(_self, "initWithType:subpredicates:", *@This(), .{ _type, _subpredicates });
    }

    pub fn andPredicateWithSubpredicates(_subpredicates: ?*anyopaque) ?*CompoundPredicate {
        return objc.msgSend(Internal.class(), "andPredicateWithSubpredicates:", ?*CompoundPredicate, .{_subpredicates});
    }

    pub fn orPredicateWithSubpredicates(_subpredicates: ?*anyopaque) ?*CompoundPredicate {
        return objc.msgSend(Internal.class(), "orPredicateWithSubpredicates:", ?*CompoundPredicate, .{_subpredicates});
    }

    pub fn notPredicateWithSubpredicate(_predicate: ?*Predicate) ?*CompoundPredicate {
        return objc.msgSend(Internal.class(), "notPredicateWithSubpredicate:", ?*CompoundPredicate, .{_predicate});
    }

    pub fn compoundPredicateType(_self: *@This()) CompoundPredicateType {
        return objc.msgSend(_self, "compoundPredicateType", CompoundPredicateType, .{});
    }

    pub fn subpredicates(_self: *@This()) ?*Array {
        return objc.msgSend(_self, "subpredicates", ?*Array, .{});
    }
};

pub const DateComponentsFormatterUnitsStyle = objc.NSInteger;
pub const DateComponentsFormatterUnitsStyle_Positional: objc.NSInteger = 0;
pub const DateComponentsFormatterUnitsStyle_Abbreviated: objc.NSInteger = 1;
pub const DateComponentsFormatterUnitsStyle_Short: objc.NSInteger = 2;
pub const DateComponentsFormatterUnitsStyle_Full: objc.NSInteger = 3;
pub const DateComponentsFormatterUnitsStyle_SpellOut: objc.NSInteger = 4;
pub const DateComponentsFormatterUnitsStyle_Brief: objc.NSInteger = 5;

pub const DateComponentsFormatterZeroFormattingBehavior = objc.NSUInteger;
pub const DateComponentsFormatterZeroFormattingBehavior_None: objc.NSUInteger = 0;
pub const DateComponentsFormatterZeroFormattingBehavior_Default: objc.NSUInteger = 1;
pub const DateComponentsFormatterZeroFormattingBehavior_DropLeading: objc.NSUInteger = 2;
pub const DateComponentsFormatterZeroFormattingBehavior_DropMiddle: objc.NSUInteger = 4;
pub const DateComponentsFormatterZeroFormattingBehavior_DropTrailing: objc.NSUInteger = 8;
pub const DateComponentsFormatterZeroFormattingBehavior_DropAll: objc.NSUInteger = 14;
pub const DateComponentsFormatterZeroFormattingBehavior_Pad: objc.NSUInteger = 65536;

/// https://developer.apple.com/documentation/Foundation/NSDateComponentsFormatter?language=objc
pub const DateComponentsFormatter = opaque {
    pub const Internal = objc.ExternClass("NSDateComponentsFormatter", @This(), Formatter, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn stringForObjectValue(_self: *@This(), _obj: ?objc.Id) ?*String {
        return objc.msgSend(_self, "stringForObjectValue:", ?*String, .{_obj});
    }

    pub fn attributedStringForObjectValueWithDefaultAttributes(_self: *@This(), _obj: ?objc.Id, _attrs: ?*anyopaque) ?*AttributedString {
        return objc.msgSend(_self, "attributedStringForObjectValue:withDefaultAttributes:", ?*AttributedString, .{ _obj, _attrs });
    }

    pub fn editingStringForObjectValue(_self: *@This(), _obj: ?objc.Id) ?*String {
        return objc.msgSend(_self, "editingStringForObjectValue:", ?*String, .{_obj});
    }

    pub fn getObjectValueForStringErrorDescription(_self: *@This(), _obj: ?*?objc.Id, _string: ?*String, _error: ?*?*String) objc.BOOL {
        return objc.msgSend(_self, "getObjectValue:forString:errorDescription:", objc.BOOL, .{ _obj, _string, _error });
    }

    pub fn isPartialStringValidNewEditingStringErrorDescription(_self: *@This(), _partialString: ?*String, _newString: ?*?*String, _error: ?*?*String) objc.BOOL {
        return objc.msgSend(_self, "isPartialStringValid:newEditingString:errorDescription:", objc.BOOL, .{ _partialString, _newString, _error });
    }

    pub fn isPartialStringValidProposedSelectedRangeOriginalStringOriginalSelectedRangeErrorDescription(
        _self: *@This(),
        _partialStringPtr: ?*?*String,
        _proposedSelRangePtr: RangePointer,
        _origString: ?*String,
        _origSelRange: Range,
        _error: ?*?*String,
    ) objc.BOOL {
        return objc.msgSend(_self, "isPartialStringValid:proposedSelectedRange:originalString:originalSelectedRange:errorDescription:", objc.BOOL, .{
            _partialStringPtr,
            _proposedSelRangePtr,
            _origString,
            _origSelRange,
            _error,
        });
    }

    pub fn stringFromDateComponents(_self: *@This(), _components: ?*DateComponents) ?*String {
        return objc.msgSend(_self, "stringFromDateComponents:", ?*String, .{_components});
    }

    pub fn stringFromDateToDate(_self: *@This(), _startDate: ?*Date, _endDate: ?*Date) ?*String {
        return objc.msgSend(_self, "stringFromDate:toDate:", ?*String, .{ _startDate, _endDate });
    }

    pub fn stringFromTimeInterval(_self: *@This(), _ti: TimeInterval) ?*String {
        return objc.msgSend(_self, "stringFromTimeInterval:", ?*String, .{_ti});
    }

    pub fn localizedStringFromDateComponentsUnitsStyle(_components: ?*DateComponents, _unitsStyle: DateComponentsFormatterUnitsStyle) ?*String {
        return objc.msgSend(Internal.class(), "localizedStringFromDateComponents:unitsStyle:", ?*String, .{ _components, _unitsStyle });
    }

    pub fn unitsStyle(_self: *@This()) DateComponentsFormatterUnitsStyle {
        return objc.msgSend(_self, "unitsStyle", DateComponentsFormatterUnitsStyle, .{});
    }

    pub fn setUnitsStyle(_self: *@This(), _unitsStyle: DateComponentsFormatterUnitsStyle) void {
        return objc.msgSend(_self, "setUnitsStyle:", void, .{_unitsStyle});
    }

    pub fn allowedUnits(_self: *@This()) CalendarUnit {
        return objc.msgSend(_self, "allowedUnits", CalendarUnit, .{});
    }

    pub fn setAllowedUnits(_self: *@This(), _allowedUnits: CalendarUnit) void {
        return objc.msgSend(_self, "setAllowedUnits:", void, .{_allowedUnits});
    }

    pub fn zeroFormattingBehavior(_self: *@This()) DateComponentsFormatterZeroFormattingBehavior {
        return objc.msgSend(_self, "zeroFormattingBehavior", DateComponentsFormatterZeroFormattingBehavior, .{});
    }

    pub fn setZeroFormattingBehavior(_self: *@This(), _zeroFormattingBehavior: DateComponentsFormatterZeroFormattingBehavior) void {
        return objc.msgSend(_self, "setZeroFormattingBehavior:", void, .{_zeroFormattingBehavior});
    }

    pub fn calendar(_self: *@This()) ?*Calendar {
        return objc.msgSend(_self, "calendar", ?*Calendar, .{});
    }

    pub fn setCalendar(_self: *@This(), _calendar: ?*Calendar) void {
        return objc.msgSend(_self, "setCalendar:", void, .{_calendar});
    }

    pub fn referenceDate(_self: *@This()) ?*Date {
        return objc.msgSend(_self, "referenceDate", ?*Date, .{});
    }

    pub fn setReferenceDate(_self: *@This(), _referenceDate: ?*Date) void {
        return objc.msgSend(_self, "setReferenceDate:", void, .{_referenceDate});
    }

    pub fn allowsFractionalUnits(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsFractionalUnits", objc.BOOL, .{});
    }

    pub fn setAllowsFractionalUnits(_self: *@This(), _allowsFractionalUnits: objc.BOOL) void {
        return objc.msgSend(_self, "setAllowsFractionalUnits:", void, .{_allowsFractionalUnits});
    }

    pub fn maximumUnitCount(_self: *@This()) objc.NSInteger {
        return objc.msgSend(_self, "maximumUnitCount", objc.NSInteger, .{});
    }

    pub fn setMaximumUnitCount(_self: *@This(), _maximumUnitCount: objc.NSInteger) void {
        return objc.msgSend(_self, "setMaximumUnitCount:", void, .{_maximumUnitCount});
    }

    pub fn collapsesLargestUnit(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "collapsesLargestUnit", objc.BOOL, .{});
    }

    pub fn setCollapsesLargestUnit(_self: *@This(), _collapsesLargestUnit: objc.BOOL) void {
        return objc.msgSend(_self, "setCollapsesLargestUnit:", void, .{_collapsesLargestUnit});
    }

    pub fn includesApproximationPhrase(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "includesApproximationPhrase", objc.BOOL, .{});
    }

    pub fn setIncludesApproximationPhrase(_self: *@This(), _includesApproximationPhrase: objc.BOOL) void {
        return objc.msgSend(_self, "setIncludesApproximationPhrase:", void, .{_includesApproximationPhrase});
    }

    pub fn includesTimeRemainingPhrase(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "includesTimeRemainingPhrase", objc.BOOL, .{});
    }

    pub fn setIncludesTimeRemainingPhrase(_self: *@This(), _includesTimeRemainingPhrase: objc.BOOL) void {
        return objc.msgSend(_self, "setIncludesTimeRemainingPhrase:", void, .{_includesTimeRemainingPhrase});
    }

    pub fn formattingContext(_self: *@This()) FormattingContext {
        return objc.msgSend(_self, "formattingContext", FormattingContext, .{});
    }

    pub fn setFormattingContext(_self: *@This(), _formattingContext: FormattingContext) void {
        return objc.msgSend(_self, "setFormattingContext:", void, .{_formattingContext});
    }
};

pub const ExpressionType = objc.NSUInteger;
pub const ExpressionType_ConstantValueExpressionType: objc.NSUInteger = 0;
pub const ExpressionType_EvaluatedObjectExpressionType: objc.NSUInteger = 1;
pub const ExpressionType_VariableExpressionType: objc.NSUInteger = 2;
pub const ExpressionType_KeyPathExpressionType: objc.NSUInteger = 3;
pub const ExpressionType_FunctionExpressionType: objc.NSUInteger = 4;
pub const ExpressionType_UnionSetExpressionType: objc.NSUInteger = 5;
pub const ExpressionType_IntersectSetExpressionType: objc.NSUInteger = 6;
pub const ExpressionType_MinusSetExpressionType: objc.NSUInteger = 7;
pub const ExpressionType_SubqueryExpressionType: objc.NSUInteger = 13;
pub const ExpressionType_AggregateExpressionType: objc.NSUInteger = 14;
pub const ExpressionType_AnyKeyExpressionType: objc.NSUInteger = 15;
pub const ExpressionType_BlockExpressionType: objc.NSUInteger = 19;
pub const ExpressionType_ConditionalExpressionType: objc.NSUInteger = 20;

/// https://developer.apple.com/documentation/Foundation/NSExpression?language=objc
pub const Expression = opaque {
    pub const _expressionFlags = extern struct {
        _evaluationBlocked: u32,
        _usesKVC: u32,
        _validatedExpression: u32,
        _validatedKeys: u32,
        _reservedExpressionFlags: u32,
    };

    pub const Internal = objc.ExternClass("NSExpression", @This(), objc.NSObject, &.{ SecureCoding, Copying });
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn supportsSecureCoding() objc.BOOL {
        return objc.msgSend(Internal.class(), "supportsSecureCoding", objc.BOOL, .{});
    }

    pub fn expressionWithFormatArgumentArray(_expressionFormat: ?*String, _arguments: ?*Array) ?*Expression {
        return objc.msgSend(Internal.class(), "expressionWithFormat:argumentArray:", ?*Expression, .{ _expressionFormat, _arguments });
    }

    pub fn expressionWithFormat(_expressionFormat: ?*String) ?*Expression {
        return objc.msgSend(Internal.class(), "expressionWithFormat:", ?*Expression, .{_expressionFormat});
    }

    pub fn expressionWithFormatArguments(_expressionFormat: ?*String, _argList: objc.va_list) ?*Expression {
        return objc.msgSend(Internal.class(), "expressionWithFormat:arguments:", ?*Expression, .{ _expressionFormat, _argList });
    }

    pub fn expressionForConstantValue(_obj: ?objc.Id) ?*Expression {
        return objc.msgSend(Internal.class(), "expressionForConstantValue:", ?*Expression, .{_obj});
    }

    pub fn expressionForEvaluatedObject() ?*Expression {
        return objc.msgSend(Internal.class(), "expressionForEvaluatedObject", ?*Expression, .{});
    }

    pub fn expressionForVariable(_string: ?*String) ?*Expression {
        return objc.msgSend(Internal.class(), "expressionForVariable:", ?*Expression, .{_string});
    }

    pub fn expressionForKeyPath(_keyPath: ?*String) ?*Expression {
        return objc.msgSend(Internal.class(), "expressionForKeyPath:", ?*Expression, .{_keyPath});
    }

    pub fn expressionForFunctionArguments(_name: ?*String, _parameters: ?*Array) ?*Expression {
        return objc.msgSend(Internal.class(), "expressionForFunction:arguments:", ?*Expression, .{ _name, _parameters });
    }

    pub fn expressionForAggregate(_subexpressions: ?*anyopaque) ?*Expression {
        return objc.msgSend(Internal.class(), "expressionForAggregate:", ?*Expression, .{_subexpressions});
    }

    pub fn expressionForUnionSetWith(_left: ?*Expression, _right: ?*Expression) ?*Expression {
        return objc.msgSend(Internal.class(), "expressionForUnionSet:with:", ?*Expression, .{ _left, _right });
    }

    pub fn expressionForIntersectSetWith(_left: ?*Expression, _right: ?*Expression) ?*Expression {
        return objc.msgSend(Internal.class(), "expressionForIntersectSet:with:", ?*Expression, .{ _left, _right });
    }

    pub fn expressionForMinusSetWith(_left: ?*Expression, _right: ?*Expression) ?*Expression {
        return objc.msgSend(Internal.class(), "expressionForMinusSet:with:", ?*Expression, .{ _left, _right });
    }

    pub fn expressionForSubqueryUsingIteratorVariablePredicate(_expression: ?*Expression, _variable: ?*String, _predicate: ?*Predicate) ?*Expression {
        return objc.msgSend(Internal.class(), "expressionForSubquery:usingIteratorVariable:predicate:", ?*Expression, .{ _expression, _variable, _predicate });
    }

    pub fn expressionForFunctionSelectorNameArguments(_target: ?*Expression, _name: ?*String, _parameters: ?*Array) ?*Expression {
        return objc.msgSend(Internal.class(), "expressionForFunction:selectorName:arguments:", ?*Expression, .{ _target, _name, _parameters });
    }

    pub fn expressionForAnyKey() ?*Expression {
        return objc.msgSend(Internal.class(), "expressionForAnyKey", ?*Expression, .{});
    }

    pub fn expressionForBlockArguments(_block: *const fn (?objc.Id, ?*anyopaque, ?*MutableDictionary) callconv(.C) ?objc.Id, _arguments: ?*anyopaque) ?*Expression {
        return objc.msgSend(Internal.class(), "expressionForBlock:arguments:", ?*Expression, .{ _block, _arguments });
    }

    pub fn expressionForConditionalTrueExpressionFalseExpression(_predicate: ?*Predicate, _trueExpression: ?*Expression, _falseExpression: ?*Expression) ?*Expression {
        return objc.msgSend(Internal.class(), "expressionForConditional:trueExpression:falseExpression:", ?*Expression, .{ _predicate, _trueExpression, _falseExpression });
    }

    pub fn initWithExpressionType(_self: *@This(), _type: ExpressionType) *@This() {
        return objc.msgSend(_self, "initWithExpressionType:", *@This(), .{_type});
    }

    pub fn expressionValueWithObjectContext(_self: *@This(), _object: ?objc.Id, _context: ?*MutableDictionary) ?objc.Id {
        return objc.msgSend(_self, "expressionValueWithObject:context:", ?objc.Id, .{ _object, _context });
    }

    pub fn allowEvaluation(_self: *@This()) void {
        return objc.msgSend(_self, "allowEvaluation", void, .{});
    }

    pub fn expressionType(_self: *@This()) ExpressionType {
        return objc.msgSend(_self, "expressionType", ExpressionType, .{});
    }

    pub fn constantValue(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "constantValue", ?objc.Id, .{});
    }

    pub fn keyPath(_self: *@This()) ?*String {
        return objc.msgSend(_self, "keyPath", ?*String, .{});
    }

    pub fn function(_self: *@This()) ?*String {
        return objc.msgSend(_self, "function", ?*String, .{});
    }

    pub fn variable(_self: *@This()) ?*String {
        return objc.msgSend(_self, "variable", ?*String, .{});
    }

    pub fn operand(_self: *@This()) ?*Expression {
        return objc.msgSend(_self, "operand", ?*Expression, .{});
    }

    pub fn arguments(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "arguments", ?*anyopaque, .{});
    }

    pub fn collection(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "collection", ?objc.Id, .{});
    }

    pub fn predicate(_self: *@This()) ?*Predicate {
        return objc.msgSend(_self, "predicate", ?*Predicate, .{});
    }

    pub fn leftExpression(_self: *@This()) ?*Expression {
        return objc.msgSend(_self, "leftExpression", ?*Expression, .{});
    }

    pub fn rightExpression(_self: *@This()) ?*Expression {
        return objc.msgSend(_self, "rightExpression", ?*Expression, .{});
    }

    pub fn trueExpression(_self: *@This()) ?*Expression {
        return objc.msgSend(_self, "trueExpression", ?*Expression, .{});
    }

    pub fn falseExpression(_self: *@This()) ?*Expression {
        return objc.msgSend(_self, "falseExpression", ?*Expression, .{});
    }

    pub fn expressionBlock(_self: *@This()) *const fn (?objc.Id, ?*anyopaque, ?*MutableDictionary) callconv(.C) ?objc.Id {
        return objc.msgSend(_self, "expressionBlock", *const fn (?objc.Id, ?*anyopaque, ?*MutableDictionary) callconv(.C) ?objc.Id, .{});
    }
};

/// https://developer.apple.com/documentation/Foundation/NSExtensionContext?language=objc
pub const ExtensionContext = opaque {
    pub const Internal = objc.ExternClass("NSExtensionContext", @This(), objc.NSObject, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn completeRequestReturningItemsCompletionHandler(_self: *@This(), _items: ?*Array, _completionHandler: *const fn (objc.BOOL) callconv(.C) void) void {
        return objc.msgSend(_self, "completeRequestReturningItems:completionHandler:", void, .{ _items, _completionHandler });
    }

    pub fn cancelRequestWithError(_self: *@This(), _error: ?*Error) void {
        return objc.msgSend(_self, "cancelRequestWithError:", void, .{_error});
    }

    pub fn openURLCompletionHandler(_self: *@This(), _URL: ?*URL, _completionHandler: *const fn (objc.BOOL) callconv(.C) void) void {
        return objc.msgSend(_self, "openURL:completionHandler:", void, .{ _URL, _completionHandler });
    }

    pub fn inputItems(_self: *@This()) ?*Array {
        return objc.msgSend(_self, "inputItems", ?*Array, .{});
    }
};

/// https://developer.apple.com/documentation/Foundation/NSExtensionItem?language=objc
pub const ExtensionItem = opaque {
    pub const Internal = objc.ExternClass("NSExtensionItem", @This(), objc.NSObject, &.{ Copying, SecureCoding });
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn supportsSecureCoding() objc.BOOL {
        return objc.msgSend(Internal.class(), "supportsSecureCoding", objc.BOOL, .{});
    }

    pub fn attributedTitle(_self: *@This()) ?*AttributedString {
        return objc.msgSend(_self, "attributedTitle", ?*AttributedString, .{});
    }

    pub fn setAttributedTitle(_self: *@This(), _attributedTitle: ?*AttributedString) void {
        return objc.msgSend(_self, "setAttributedTitle:", void, .{_attributedTitle});
    }

    pub fn attributedContentText(_self: *@This()) ?*AttributedString {
        return objc.msgSend(_self, "attributedContentText", ?*AttributedString, .{});
    }

    pub fn setAttributedContentText(_self: *@This(), _attributedContentText: ?*AttributedString) void {
        return objc.msgSend(_self, "setAttributedContentText:", void, .{_attributedContentText});
    }

    pub fn attachments(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "attachments", ?*anyopaque, .{});
    }

    pub fn setAttachments(_self: *@This(), _attachments: ?*anyopaque) void {
        return objc.msgSend(_self, "setAttachments:", void, .{_attachments});
    }

    pub fn userInfo(_self: *@This()) ?*Dictionary {
        return objc.msgSend(_self, "userInfo", ?*Dictionary, .{});
    }

    pub fn setUserInfo(_self: *@This(), _userInfo: ?*Dictionary) void {
        return objc.msgSend(_self, "setUserInfo:", void, .{_userInfo});
    }
};

/// https://developer.apple.com/documentation/Foundation/NSExtensionRequestHandling?language=objc
pub const ExtensionRequestHandling = opaque {
    pub const Internal = objc.ExternProtocol(@This(), &.{objc.NSObject});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn beginRequestWithExtensionContext(_self: *@This(), _context: ?*ExtensionContext) void {
        return objc.msgSend(_self, "beginRequestWithExtensionContext:", void, .{_context});
    }
};

pub const FileCoordinatorReadingOptions = objc.NSUInteger;
pub const FileCoordinatorReadingOptions_WithoutChanges: objc.NSUInteger = 1;
pub const FileCoordinatorReadingOptions_ResolvesSymbolicLink: objc.NSUInteger = 2;
pub const FileCoordinatorReadingOptions_ImmediatelyAvailableMetadataOnly: objc.NSUInteger = 4;
pub const FileCoordinatorReadingOptions_ForUploading: objc.NSUInteger = 8;

pub const FileCoordinatorWritingOptions = objc.NSUInteger;
pub const FileCoordinatorWritingOptions_ForDeleting: objc.NSUInteger = 1;
pub const FileCoordinatorWritingOptions_ForMoving: objc.NSUInteger = 2;
pub const FileCoordinatorWritingOptions_ForMerging: objc.NSUInteger = 4;
pub const FileCoordinatorWritingOptions_ForReplacing: objc.NSUInteger = 8;
pub const FileCoordinatorWritingOptions_ContentIndependentMetadataOnly: objc.NSUInteger = 16;

/// https://developer.apple.com/documentation/Foundation/NSFileAccessIntent?language=objc
pub const FileAccessIntent = opaque {
    pub const Internal = objc.ExternClass("NSFileAccessIntent", @This(), objc.NSObject, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn readingIntentWithURLOptions(_url: ?*URL, _options: FileCoordinatorReadingOptions) *@This() {
        return objc.msgSend(Internal.class(), "readingIntentWithURL:options:", *@This(), .{ _url, _options });
    }

    pub fn writingIntentWithURLOptions(_url: ?*URL, _options: FileCoordinatorWritingOptions) *@This() {
        return objc.msgSend(Internal.class(), "writingIntentWithURL:options:", *@This(), .{ _url, _options });
    }

    pub fn url(_self: *@This()) ?*URL {
        return objc.msgSend(_self, "URL", ?*URL, .{});
    }
};

/// https://developer.apple.com/documentation/Foundation/NSFileCoordinator?language=objc
pub const FileCoordinator = opaque {
    pub const Internal = objc.ExternClass("NSFileCoordinator", @This(), objc.NSObject, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn addFilePresenter(_filePresenter: ?*anyopaque) void {
        return objc.msgSend(Internal.class(), "addFilePresenter:", void, .{_filePresenter});
    }

    pub fn removeFilePresenter(_filePresenter: ?*anyopaque) void {
        return objc.msgSend(Internal.class(), "removeFilePresenter:", void, .{_filePresenter});
    }

    pub fn initWithFilePresenter(_self: *@This(), _filePresenterOrNil: ?*anyopaque) *@This() {
        return objc.msgSend(_self, "initWithFilePresenter:", *@This(), .{_filePresenterOrNil});
    }

    pub fn coordinateAccessWithIntentsQueueByAccessor(_self: *@This(), _intents: ?*anyopaque, _queue: ?*OperationQueue, _accessor: *const fn (?*Error) callconv(.C) void) void {
        return objc.msgSend(_self, "coordinateAccessWithIntents:queue:byAccessor:", void, .{ _intents, _queue, _accessor });
    }

    pub fn coordinateReadingItemAtURLOptionsErrorByAccessor(
        _self: *@This(),
        _url: ?*URL,
        _options: FileCoordinatorReadingOptions,
        _outError: ?*?*Error,
        _reader: *const fn (?*URL) callconv(.C) void,
    ) void {
        return objc.msgSend(_self, "coordinateReadingItemAtURL:options:error:byAccessor:", void, .{
            _url,
            _options,
            _outError,
            _reader,
        });
    }

    pub fn coordinateWritingItemAtURLOptionsErrorByAccessor(
        _self: *@This(),
        _url: ?*URL,
        _options: FileCoordinatorWritingOptions,
        _outError: ?*?*Error,
        _writer: *const fn (?*URL) callconv(.C) void,
    ) void {
        return objc.msgSend(_self, "coordinateWritingItemAtURL:options:error:byAccessor:", void, .{
            _url,
            _options,
            _outError,
            _writer,
        });
    }

    pub fn coordinateReadingItemAtURLOptionsWritingItemAtURLOptionsErrorByAccessor(
        _self: *@This(),
        _readingURL: ?*URL,
        _readingOptions: FileCoordinatorReadingOptions,
        _writingURL: ?*URL,
        _writingOptions: FileCoordinatorWritingOptions,
        _outError: ?*?*Error,
        _readerWriter: *const fn (?*URL, ?*URL) callconv(.C) void,
    ) void {
        return objc.msgSend(_self, "coordinateReadingItemAtURL:options:writingItemAtURL:options:error:byAccessor:", void, .{
            _readingURL,
            _readingOptions,
            _writingURL,
            _writingOptions,
            _outError,
            _readerWriter,
        });
    }

    pub fn coordinateWritingItemAtURLOptionsWritingItemAtURLOptionsErrorByAccessor(
        _self: *@This(),
        _url1: ?*URL,
        _options1: FileCoordinatorWritingOptions,
        _url2: ?*URL,
        _options2: FileCoordinatorWritingOptions,
        _outError: ?*?*Error,
        _writer: *const fn (?*URL, ?*URL) callconv(.C) void,
    ) void {
        return objc.msgSend(_self, "coordinateWritingItemAtURL:options:writingItemAtURL:options:error:byAccessor:", void, .{
            _url1,
            _options1,
            _url2,
            _options2,
            _outError,
            _writer,
        });
    }

    pub fn prepareForReadingItemsAtURLsOptionsWritingItemsAtURLsOptionsErrorByAccessor(
        _self: *@This(),
        _readingURLs: ?*anyopaque,
        _readingOptions: FileCoordinatorReadingOptions,
        _writingURLs: ?*anyopaque,
        _writingOptions: FileCoordinatorWritingOptions,
        _outError: ?*?*Error,
        _batchAccessor: *const fn (*const fn () callconv(.C) void) callconv(.C) void,
    ) void {
        return objc.msgSend(_self, "prepareForReadingItemsAtURLs:options:writingItemsAtURLs:options:error:byAccessor:", void, .{
            _readingURLs,
            _readingOptions,
            _writingURLs,
            _writingOptions,
            _outError,
            _batchAccessor,
        });
    }

    pub fn itemAtURLWillMoveToURL(_self: *@This(), _oldURL: ?*URL, _newURL: ?*URL) void {
        return objc.msgSend(_self, "itemAtURL:willMoveToURL:", void, .{ _oldURL, _newURL });
    }

    pub fn itemAtURLDidMoveToURL(_self: *@This(), _oldURL: ?*URL, _newURL: ?*URL) void {
        return objc.msgSend(_self, "itemAtURL:didMoveToURL:", void, .{ _oldURL, _newURL });
    }

    pub fn itemAtURLDidChangeUbiquityAttributes(_self: *@This(), _url: ?*URL, _attributes: ?*anyopaque) void {
        return objc.msgSend(_self, "itemAtURL:didChangeUbiquityAttributes:", void, .{ _url, _attributes });
    }

    pub fn cancel(_self: *@This()) void {
        return objc.msgSend(_self, "cancel", void, .{});
    }

    pub fn filePresenters() ?*anyopaque {
        return objc.msgSend(Internal.class(), "filePresenters", ?*anyopaque, .{});
    }

    pub fn purposeIdentifier(_self: *@This()) ?*String {
        return objc.msgSend(_self, "purposeIdentifier", ?*String, .{});
    }

    pub fn setPurposeIdentifier(_self: *@This(), _purposeIdentifier: ?*String) void {
        return objc.msgSend(_self, "setPurposeIdentifier:", void, .{_purposeIdentifier});
    }
};

/// https://developer.apple.com/documentation/Foundation/NSFilePresenter?language=objc
pub const FilePresenter = opaque {
    pub const Internal = objc.ExternProtocol(@This(), &.{objc.NSObject});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn relinquishPresentedItemToReader(_self: *@This(), _reader: *const fn (*const fn () callconv(.C) void) callconv(.C) void) void {
        return objc.msgSend(_self, "relinquishPresentedItemToReader:", void, .{_reader});
    }

    pub fn relinquishPresentedItemToWriter(_self: *@This(), _writer: *const fn (*const fn () callconv(.C) void) callconv(.C) void) void {
        return objc.msgSend(_self, "relinquishPresentedItemToWriter:", void, .{_writer});
    }

    pub fn savePresentedItemChangesWithCompletionHandler(_self: *@This(), _completionHandler: *const fn (?*Error) callconv(.C) void) void {
        return objc.msgSend(_self, "savePresentedItemChangesWithCompletionHandler:", void, .{_completionHandler});
    }

    pub fn accommodatePresentedItemDeletionWithCompletionHandler(_self: *@This(), _completionHandler: *const fn (?*Error) callconv(.C) void) void {
        return objc.msgSend(_self, "accommodatePresentedItemDeletionWithCompletionHandler:", void, .{_completionHandler});
    }

    pub fn accommodatePresentedItemEvictionWithCompletionHandler(_self: *@This(), _completionHandler: *const fn (?*Error) callconv(.C) void) void {
        return objc.msgSend(_self, "accommodatePresentedItemEvictionWithCompletionHandler:", void, .{_completionHandler});
    }

    pub fn presentedItemDidMoveToURL(_self: *@This(), _newURL: ?*URL) void {
        return objc.msgSend(_self, "presentedItemDidMoveToURL:", void, .{_newURL});
    }

    pub fn presentedItemDidChange(_self: *@This()) void {
        return objc.msgSend(_self, "presentedItemDidChange", void, .{});
    }

    pub fn presentedItemDidChangeUbiquityAttributes(_self: *@This(), _attributes: ?*anyopaque) void {
        return objc.msgSend(_self, "presentedItemDidChangeUbiquityAttributes:", void, .{_attributes});
    }

    pub fn presentedItemDidGainVersion(_self: *@This(), _version: ?*FileVersion) void {
        return objc.msgSend(_self, "presentedItemDidGainVersion:", void, .{_version});
    }

    pub fn presentedItemDidLoseVersion(_self: *@This(), _version: ?*FileVersion) void {
        return objc.msgSend(_self, "presentedItemDidLoseVersion:", void, .{_version});
    }

    pub fn presentedItemDidResolveConflictVersion(_self: *@This(), _version: ?*FileVersion) void {
        return objc.msgSend(_self, "presentedItemDidResolveConflictVersion:", void, .{_version});
    }

    pub fn accommodatePresentedSubitemDeletionAtURLCompletionHandler(_self: *@This(), _url: ?*URL, _completionHandler: *const fn (?*Error) callconv(.C) void) void {
        return objc.msgSend(_self, "accommodatePresentedSubitemDeletionAtURL:completionHandler:", void, .{ _url, _completionHandler });
    }

    pub fn presentedSubitemDidAppearAtURL(_self: *@This(), _url: ?*URL) void {
        return objc.msgSend(_self, "presentedSubitemDidAppearAtURL:", void, .{_url});
    }

    pub fn presentedSubitemAtURLDidMoveToURL(_self: *@This(), _oldURL: ?*URL, _newURL: ?*URL) void {
        return objc.msgSend(_self, "presentedSubitemAtURL:didMoveToURL:", void, .{ _oldURL, _newURL });
    }

    pub fn presentedSubitemDidChangeAtURL(_self: *@This(), _url: ?*URL) void {
        return objc.msgSend(_self, "presentedSubitemDidChangeAtURL:", void, .{_url});
    }

    pub fn presentedSubitemAtURLDidGainVersion(_self: *@This(), _url: ?*URL, _version: ?*FileVersion) void {
        return objc.msgSend(_self, "presentedSubitemAtURL:didGainVersion:", void, .{ _url, _version });
    }

    pub fn presentedSubitemAtURLDidLoseVersion(_self: *@This(), _url: ?*URL, _version: ?*FileVersion) void {
        return objc.msgSend(_self, "presentedSubitemAtURL:didLoseVersion:", void, .{ _url, _version });
    }

    pub fn presentedSubitemAtURLDidResolveConflictVersion(_self: *@This(), _url: ?*URL, _version: ?*FileVersion) void {
        return objc.msgSend(_self, "presentedSubitemAtURL:didResolveConflictVersion:", void, .{ _url, _version });
    }

    pub fn presentedItemURL(_self: *@This()) ?*URL {
        return objc.msgSend(_self, "presentedItemURL", ?*URL, .{});
    }

    pub fn presentedItemOperationQueue(_self: *@This()) ?*OperationQueue {
        return objc.msgSend(_self, "presentedItemOperationQueue", ?*OperationQueue, .{});
    }

    pub fn primaryPresentedItemURL(_self: *@This()) ?*URL {
        return objc.msgSend(_self, "primaryPresentedItemURL", ?*URL, .{});
    }

    pub fn observedPresentedItemUbiquityAttributes(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "observedPresentedItemUbiquityAttributes", ?*anyopaque, .{});
    }
};

pub const FileVersionAddingOptions = objc.NSUInteger;
pub const FileVersionAddingOptions_ByMoving: objc.NSUInteger = 1;

pub const FileVersionReplacingOptions = objc.NSUInteger;
pub const FileVersionReplacingOptions_ByMoving: objc.NSUInteger = 1;

/// https://developer.apple.com/documentation/Foundation/NSFileVersion?language=objc
pub const FileVersion = opaque {
    pub const Internal = objc.ExternClass("NSFileVersion", @This(), objc.NSObject, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn currentVersionOfItemAtURL(_url: ?*URL) ?*FileVersion {
        return objc.msgSend(Internal.class(), "currentVersionOfItemAtURL:", ?*FileVersion, .{_url});
    }

    pub fn otherVersionsOfItemAtURL(_url: ?*URL) ?*anyopaque {
        return objc.msgSend(Internal.class(), "otherVersionsOfItemAtURL:", ?*anyopaque, .{_url});
    }

    pub fn unresolvedConflictVersionsOfItemAtURL(_url: ?*URL) ?*anyopaque {
        return objc.msgSend(Internal.class(), "unresolvedConflictVersionsOfItemAtURL:", ?*anyopaque, .{_url});
    }

    pub fn getNonlocalVersionsOfItemAtURLCompletionHandler(_url: ?*URL, _completionHandler: *const fn (?*anyopaque, ?*Error) callconv(.C) void) void {
        return objc.msgSend(Internal.class(), "getNonlocalVersionsOfItemAtURL:completionHandler:", void, .{ _url, _completionHandler });
    }

    pub fn versionOfItemAtURLForPersistentIdentifier(_url: ?*URL, _persistentIdentifier: ?objc.Id) ?*FileVersion {
        return objc.msgSend(Internal.class(), "versionOfItemAtURL:forPersistentIdentifier:", ?*FileVersion, .{ _url, _persistentIdentifier });
    }

    pub fn addVersionOfItemAtURLWithContentsOfURLOptionsError(
        _url: ?*URL,
        _contentsURL: ?*URL,
        _options: FileVersionAddingOptions,
        _outError: ?*?*Error,
    ) ?*FileVersion {
        return objc.msgSend(Internal.class(), "addVersionOfItemAtURL:withContentsOfURL:options:error:", ?*FileVersion, .{
            _url,
            _contentsURL,
            _options,
            _outError,
        });
    }

    pub fn temporaryDirectoryURLForNewVersionOfItemAtURL(_url: ?*URL) ?*URL {
        return objc.msgSend(Internal.class(), "temporaryDirectoryURLForNewVersionOfItemAtURL:", ?*URL, .{_url});
    }

    pub fn replaceItemAtURLOptionsError(_self: *@This(), _url: ?*URL, _options: FileVersionReplacingOptions, _error: ?*?*Error) ?*URL {
        return objc.msgSend(_self, "replaceItemAtURL:options:error:", ?*URL, .{ _url, _options, _error });
    }

    pub fn removeAndReturnError(_self: *@This(), _outError: ?*?*Error) objc.BOOL {
        return objc.msgSend(_self, "removeAndReturnError:", objc.BOOL, .{_outError});
    }

    pub fn removeOtherVersionsOfItemAtURLError(_url: ?*URL, _outError: ?*?*Error) objc.BOOL {
        return objc.msgSend(Internal.class(), "removeOtherVersionsOfItemAtURL:error:", objc.BOOL, .{ _url, _outError });
    }

    pub fn url(_self: *@This()) ?*URL {
        return objc.msgSend(_self, "URL", ?*URL, .{});
    }

    pub fn localizedName(_self: *@This()) ?*String {
        return objc.msgSend(_self, "localizedName", ?*String, .{});
    }

    pub fn localizedNameOfSavingComputer(_self: *@This()) ?*String {
        return objc.msgSend(_self, "localizedNameOfSavingComputer", ?*String, .{});
    }

    pub fn originatorNameComponents(_self: *@This()) ?*PersonNameComponents {
        return objc.msgSend(_self, "originatorNameComponents", ?*PersonNameComponents, .{});
    }

    pub fn modificationDate(_self: *@This()) ?*Date {
        return objc.msgSend(_self, "modificationDate", ?*Date, .{});
    }

    pub fn persistentIdentifier(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "persistentIdentifier", ?*anyopaque, .{});
    }

    pub fn isConflict(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isConflict", objc.BOOL, .{});
    }

    pub fn isResolved(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isResolved", objc.BOOL, .{});
    }

    pub fn setResolved(_self: *@This(), _resolved: objc.BOOL) void {
        return objc.msgSend(_self, "setResolved:", void, .{_resolved});
    }

    pub fn isDiscardable(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isDiscardable", objc.BOOL, .{});
    }

    pub fn setDiscardable(_self: *@This(), _discardable: objc.BOOL) void {
        return objc.msgSend(_self, "setDiscardable:", void, .{_discardable});
    }

    pub fn hasLocalContents(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "hasLocalContents", objc.BOOL, .{});
    }

    pub fn hasThumbnail(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "hasThumbnail", objc.BOOL, .{});
    }
};

pub const FileWrapperReadingOptions = objc.NSUInteger;
pub const FileWrapperReadingOptions_Immediate: objc.NSUInteger = 1;
pub const FileWrapperReadingOptions_WithoutMapping: objc.NSUInteger = 2;

pub const FileWrapperWritingOptions = objc.NSUInteger;
pub const FileWrapperWritingOptions_Atomic: objc.NSUInteger = 1;
pub const FileWrapperWritingOptions_WithNameUpdating: objc.NSUInteger = 2;

/// https://developer.apple.com/documentation/Foundation/NSFileWrapper?language=objc
pub const FileWrapper = opaque {
    pub const Internal = objc.ExternClass("NSFileWrapper", @This(), objc.NSObject, &.{SecureCoding});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn supportsSecureCoding() objc.BOOL {
        return objc.msgSend(Internal.class(), "supportsSecureCoding", objc.BOOL, .{});
    }

    pub fn initWithURLOptionsError(_self: *@This(), _url: ?*URL, _options: FileWrapperReadingOptions, _outError: ?*?*Error) *@This() {
        return objc.msgSend(_self, "initWithURL:options:error:", *@This(), .{ _url, _options, _outError });
    }

    pub fn initDirectoryWithFileWrappers(_self: *@This(), _childrenByPreferredName: ?*anyopaque) *@This() {
        return objc.msgSend(_self, "initDirectoryWithFileWrappers:", *@This(), .{_childrenByPreferredName});
    }

    pub fn initRegularFileWithContents(_self: *@This(), _contents: ?*Data) *@This() {
        return objc.msgSend(_self, "initRegularFileWithContents:", *@This(), .{_contents});
    }

    pub fn initSymbolicLinkWithDestinationURL(_self: *@This(), _url: ?*URL) *@This() {
        return objc.msgSend(_self, "initSymbolicLinkWithDestinationURL:", *@This(), .{_url});
    }

    pub fn initWithSerializedRepresentation(_self: *@This(), _serializeRepresentation: ?*Data) *@This() {
        return objc.msgSend(_self, "initWithSerializedRepresentation:", *@This(), .{_serializeRepresentation});
    }

    pub fn matchesContentsOfURL(_self: *@This(), _url: ?*URL) objc.BOOL {
        return objc.msgSend(_self, "matchesContentsOfURL:", objc.BOOL, .{_url});
    }

    pub fn readFromURLOptionsError(_self: *@This(), _url: ?*URL, _options: FileWrapperReadingOptions, _outError: ?*?*Error) objc.BOOL {
        return objc.msgSend(_self, "readFromURL:options:error:", objc.BOOL, .{ _url, _options, _outError });
    }

    pub fn writeToURLOptionsOriginalContentsURLError(
        _self: *@This(),
        _url: ?*URL,
        _options: FileWrapperWritingOptions,
        _originalContentsURL: ?*URL,
        _outError: ?*?*Error,
    ) objc.BOOL {
        return objc.msgSend(_self, "writeToURL:options:originalContentsURL:error:", objc.BOOL, .{
            _url,
            _options,
            _originalContentsURL,
            _outError,
        });
    }

    pub fn addFileWrapper(_self: *@This(), _child: ?*FileWrapper) ?*String {
        return objc.msgSend(_self, "addFileWrapper:", ?*String, .{_child});
    }

    pub fn addRegularFileWithContentsPreferredFilename(_self: *@This(), _data: ?*Data, _fileName: ?*String) ?*String {
        return objc.msgSend(_self, "addRegularFileWithContents:preferredFilename:", ?*String, .{ _data, _fileName });
    }

    pub fn removeFileWrapper(_self: *@This(), _child: ?*FileWrapper) void {
        return objc.msgSend(_self, "removeFileWrapper:", void, .{_child});
    }

    pub fn keyForFileWrapper(_self: *@This(), _child: ?*FileWrapper) ?*String {
        return objc.msgSend(_self, "keyForFileWrapper:", ?*String, .{_child});
    }

    pub fn isDirectory(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isDirectory", objc.BOOL, .{});
    }

    pub fn isRegularFile(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isRegularFile", objc.BOOL, .{});
    }

    pub fn isSymbolicLink(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isSymbolicLink", objc.BOOL, .{});
    }

    pub fn preferredFilename(_self: *@This()) ?*String {
        return objc.msgSend(_self, "preferredFilename", ?*String, .{});
    }

    pub fn setPreferredFilename(_self: *@This(), _preferredFilename: ?*String) void {
        return objc.msgSend(_self, "setPreferredFilename:", void, .{_preferredFilename});
    }

    pub fn filename(_self: *@This()) ?*String {
        return objc.msgSend(_self, "filename", ?*String, .{});
    }

    pub fn setFilename(_self: *@This(), _filename: ?*String) void {
        return objc.msgSend(_self, "setFilename:", void, .{_filename});
    }

    pub fn fileAttributes(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "fileAttributes", ?*anyopaque, .{});
    }

    pub fn setFileAttributes(_self: *@This(), _fileAttributes: ?*anyopaque) void {
        return objc.msgSend(_self, "setFileAttributes:", void, .{_fileAttributes});
    }

    pub fn serializedRepresentation(_self: *@This()) ?*Data {
        return objc.msgSend(_self, "serializedRepresentation", ?*Data, .{});
    }

    pub fn fileWrappers(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "fileWrappers", ?*anyopaque, .{});
    }

    pub fn regularFileContents(_self: *@This()) ?*Data {
        return objc.msgSend(_self, "regularFileContents", ?*Data, .{});
    }

    pub fn symbolicLinkDestinationURL(_self: *@This()) ?*URL {
        return objc.msgSend(_self, "symbolicLinkDestinationURL", ?*URL, .{});
    }
};

pub const LinguisticTagScheme = ?*String;

pub const LinguisticTag = ?*String;

pub const LinguisticTaggerUnit = objc.NSInteger;
pub const LinguisticTaggerUnit_Word: objc.NSInteger = 0;
pub const LinguisticTaggerUnit_Sentence: objc.NSInteger = 1;
pub const LinguisticTaggerUnit_Paragraph: objc.NSInteger = 2;
pub const LinguisticTaggerUnit_Document: objc.NSInteger = 3;

pub const LinguisticTaggerOptions = objc.NSUInteger;
pub const LinguisticTaggerOptions_OmitWords: objc.NSUInteger = 1;
pub const LinguisticTaggerOptions_OmitPunctuation: objc.NSUInteger = 2;
pub const LinguisticTaggerOptions_OmitWhitespace: objc.NSUInteger = 4;
pub const LinguisticTaggerOptions_OmitOther: objc.NSUInteger = 8;
pub const LinguisticTaggerOptions_JoinNames: objc.NSUInteger = 16;

/// https://developer.apple.com/documentation/Foundation/NSLinguisticTagger?language=objc
pub const LinguisticTagger = opaque {
    pub const Internal = objc.ExternClass("NSLinguisticTagger", @This(), objc.NSObject, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn initWithTagSchemesOptions(_self: *@This(), _tagSchemes: ?*anyopaque, _opts: objc.NSUInteger) *@This() {
        return objc.msgSend(_self, "initWithTagSchemes:options:", *@This(), .{ _tagSchemes, _opts });
    }

    pub fn availableTagSchemesForUnitLanguage(_unit: LinguisticTaggerUnit, _language: ?*String) ?*anyopaque {
        return objc.msgSend(Internal.class(), "availableTagSchemesForUnit:language:", ?*anyopaque, .{ _unit, _language });
    }

    pub fn availableTagSchemesForLanguage(_language: ?*String) ?*anyopaque {
        return objc.msgSend(Internal.class(), "availableTagSchemesForLanguage:", ?*anyopaque, .{_language});
    }

    pub fn setOrthographyRange(_self: *@This(), _orthography: ?*Orthography, _range: Range) void {
        return objc.msgSend(_self, "setOrthography:range:", void, .{ _orthography, _range });
    }

    pub fn orthographyAtIndexEffectiveRange(_self: *@This(), _charIndex: objc.NSUInteger, _effectiveRange: RangePointer) ?*Orthography {
        return objc.msgSend(_self, "orthographyAtIndex:effectiveRange:", ?*Orthography, .{ _charIndex, _effectiveRange });
    }

    pub fn stringEditedInRangeChangeInLength(_self: *@This(), _newRange: Range, _delta: objc.NSInteger) void {
        return objc.msgSend(_self, "stringEditedInRange:changeInLength:", void, .{ _newRange, _delta });
    }

    pub fn tokenRangeAtIndexUnit(_self: *@This(), _charIndex: objc.NSUInteger, _unit: LinguisticTaggerUnit) Range {
        return objc.msgSend(_self, "tokenRangeAtIndex:unit:", Range, .{ _charIndex, _unit });
    }

    pub fn sentenceRangeForRange(_self: *@This(), _range: Range) Range {
        return objc.msgSend(_self, "sentenceRangeForRange:", Range, .{_range});
    }

    pub fn enumerateTagsInRangeUnitSchemeOptionsUsingBlock(
        _self: *@This(),
        _range: Range,
        _unit: LinguisticTaggerUnit,
        _scheme: LinguisticTagScheme,
        _options: LinguisticTaggerOptions,
        _block: *const fn (LinguisticTag, Range, ?*objc.BOOL) callconv(.C) void,
    ) void {
        return objc.msgSend(_self, "enumerateTagsInRange:unit:scheme:options:usingBlock:", void, .{
            _range,
            _unit,
            _scheme,
            _options,
            _block,
        });
    }

    pub fn tagAtIndexUnitSchemeTokenRange(
        _self: *@This(),
        _charIndex: objc.NSUInteger,
        _unit: LinguisticTaggerUnit,
        _scheme: LinguisticTagScheme,
        _tokenRange: RangePointer,
    ) LinguisticTag {
        return objc.msgSend(_self, "tagAtIndex:unit:scheme:tokenRange:", LinguisticTag, .{
            _charIndex,
            _unit,
            _scheme,
            _tokenRange,
        });
    }

    pub fn tagsInRangeUnitSchemeOptionsTokenRanges(
        _self: *@This(),
        _range: Range,
        _unit: LinguisticTaggerUnit,
        _scheme: LinguisticTagScheme,
        _options: LinguisticTaggerOptions,
        _tokenRanges: ?*?*anyopaque,
    ) ?*anyopaque {
        return objc.msgSend(_self, "tagsInRange:unit:scheme:options:tokenRanges:", ?*anyopaque, .{
            _range,
            _unit,
            _scheme,
            _options,
            _tokenRanges,
        });
    }

    pub fn enumerateTagsInRangeSchemeOptionsUsingBlock(
        _self: *@This(),
        _range: Range,
        _tagScheme: LinguisticTagScheme,
        _opts: LinguisticTaggerOptions,
        _block: *const fn (
            LinguisticTag,
            Range,
            Range,
            ?*objc.BOOL,
        ) callconv(.C) void,
    ) void {
        return objc.msgSend(_self, "enumerateTagsInRange:scheme:options:usingBlock:", void, .{
            _range,
            _tagScheme,
            _opts,
            _block,
        });
    }

    pub fn tagAtIndexSchemeTokenRangeSentenceRange(
        _self: *@This(),
        _charIndex: objc.NSUInteger,
        _scheme: LinguisticTagScheme,
        _tokenRange: RangePointer,
        _sentenceRange: RangePointer,
    ) LinguisticTag {
        return objc.msgSend(_self, "tagAtIndex:scheme:tokenRange:sentenceRange:", LinguisticTag, .{
            _charIndex,
            _scheme,
            _tokenRange,
            _sentenceRange,
        });
    }

    pub fn tagsInRangeSchemeOptionsTokenRanges(
        _self: *@This(),
        _range: Range,
        _tagScheme: ?*String,
        _opts: LinguisticTaggerOptions,
        _tokenRanges: ?*?*anyopaque,
    ) ?*anyopaque {
        return objc.msgSend(_self, "tagsInRange:scheme:options:tokenRanges:", ?*anyopaque, .{
            _range,
            _tagScheme,
            _opts,
            _tokenRanges,
        });
    }

    pub fn dominantLanguageForString(_string: ?*String) ?*String {
        return objc.msgSend(Internal.class(), "dominantLanguageForString:", ?*String, .{_string});
    }

    pub fn tagForStringAtIndexUnitSchemeOrthographyTokenRange(
        _string: ?*String,
        _charIndex: objc.NSUInteger,
        _unit: LinguisticTaggerUnit,
        _scheme: LinguisticTagScheme,
        _orthography: ?*Orthography,
        _tokenRange: RangePointer,
    ) LinguisticTag {
        return objc.msgSend(Internal.class(), "tagForString:atIndex:unit:scheme:orthography:tokenRange:", LinguisticTag, .{
            _string,
            _charIndex,
            _unit,
            _scheme,
            _orthography,
            _tokenRange,
        });
    }

    pub fn tagsForStringRangeUnitSchemeOptionsOrthographyTokenRanges(
        _string: ?*String,
        _range: Range,
        _unit: LinguisticTaggerUnit,
        _scheme: LinguisticTagScheme,
        _options: LinguisticTaggerOptions,
        _orthography: ?*Orthography,
        _tokenRanges: ?*?*anyopaque,
    ) ?*anyopaque {
        return objc.msgSend(Internal.class(), "tagsForString:range:unit:scheme:options:orthography:tokenRanges:", ?*anyopaque, .{
            _string,
            _range,
            _unit,
            _scheme,
            _options,
            _orthography,
            _tokenRanges,
        });
    }

    pub fn enumerateTagsForStringRangeUnitSchemeOptionsOrthographyUsingBlock(
        _string: ?*String,
        _range: Range,
        _unit: LinguisticTaggerUnit,
        _scheme: LinguisticTagScheme,
        _options: LinguisticTaggerOptions,
        _orthography: ?*Orthography,
        _block: *const fn (LinguisticTag, Range, ?*objc.BOOL) callconv(.C) void,
    ) void {
        return objc.msgSend(Internal.class(), "enumerateTagsForString:range:unit:scheme:options:orthography:usingBlock:", void, .{
            _string,
            _range,
            _unit,
            _scheme,
            _options,
            _orthography,
            _block,
        });
    }

    pub fn possibleTagsAtIndexSchemeTokenRangeSentenceRangeScores(
        _self: *@This(),
        _charIndex: objc.NSUInteger,
        _tagScheme: ?*String,
        _tokenRange: RangePointer,
        _sentenceRange: RangePointer,
        _scores: ?*?*anyopaque,
    ) ?*anyopaque {
        return objc.msgSend(_self, "possibleTagsAtIndex:scheme:tokenRange:sentenceRange:scores:", ?*anyopaque, .{
            _charIndex,
            _tagScheme,
            _tokenRange,
            _sentenceRange,
            _scores,
        });
    }

    pub fn tagSchemes(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "tagSchemes", ?*anyopaque, .{});
    }

    pub fn string(_self: *@This()) ?*String {
        return objc.msgSend(_self, "string", ?*String, .{});
    }

    pub fn setString(_self: *@This(), _string: ?*String) void {
        return objc.msgSend(_self, "setString:", void, .{_string});
    }

    pub fn dominantLanguage(_self: *@This()) ?*String {
        return objc.msgSend(_self, "dominantLanguage", ?*String, .{});
    }
};

/// https://developer.apple.com/documentation/Foundation/NSMetadataQuery?language=objc
pub const MetadataQuery = opaque {
    pub const Internal = objc.ExternClass("NSMetadataQuery", @This(), objc.NSObject, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn startQuery(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "startQuery", objc.BOOL, .{});
    }

    pub fn stopQuery(_self: *@This()) void {
        return objc.msgSend(_self, "stopQuery", void, .{});
    }

    pub fn disableUpdates(_self: *@This()) void {
        return objc.msgSend(_self, "disableUpdates", void, .{});
    }

    pub fn enableUpdates(_self: *@This()) void {
        return objc.msgSend(_self, "enableUpdates", void, .{});
    }

    pub fn resultAtIndex(_self: *@This(), _idx: objc.NSUInteger) ?objc.Id {
        return objc.msgSend(_self, "resultAtIndex:", ?objc.Id, .{_idx});
    }

    pub fn enumerateResultsUsingBlock(_self: *@This(), _block: *const fn (?objc.Id, objc.NSUInteger, ?*objc.BOOL) callconv(.C) void) void {
        return objc.msgSend(_self, "enumerateResultsUsingBlock:", void, .{_block});
    }

    pub fn enumerateResultsWithOptionsUsingBlock(_self: *@This(), _opts: EnumerationOptions, _block: *const fn (?objc.Id, objc.NSUInteger, ?*objc.BOOL) callconv(.C) void) void {
        return objc.msgSend(_self, "enumerateResultsWithOptions:usingBlock:", void, .{ _opts, _block });
    }

    pub fn indexOfResult(_self: *@This(), _result: ?objc.Id) objc.NSUInteger {
        return objc.msgSend(_self, "indexOfResult:", objc.NSUInteger, .{_result});
    }

    pub fn valueOfAttributeForResultAtIndex(_self: *@This(), _attrName: ?*String, _idx: objc.NSUInteger) ?objc.Id {
        return objc.msgSend(_self, "valueOfAttribute:forResultAtIndex:", ?objc.Id, .{ _attrName, _idx });
    }

    pub fn delegate(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "delegate", ?*anyopaque, .{});
    }

    pub fn setDelegate(_self: *@This(), _delegate: ?*anyopaque) void {
        return objc.msgSend(_self, "setDelegate:", void, .{_delegate});
    }

    pub fn predicate(_self: *@This()) ?*Predicate {
        return objc.msgSend(_self, "predicate", ?*Predicate, .{});
    }

    pub fn setPredicate(_self: *@This(), _predicate: ?*Predicate) void {
        return objc.msgSend(_self, "setPredicate:", void, .{_predicate});
    }

    pub fn sortDescriptors(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "sortDescriptors", ?*anyopaque, .{});
    }

    pub fn setSortDescriptors(_self: *@This(), _sortDescriptors: ?*anyopaque) void {
        return objc.msgSend(_self, "setSortDescriptors:", void, .{_sortDescriptors});
    }

    pub fn valueListAttributes(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "valueListAttributes", ?*anyopaque, .{});
    }

    pub fn setValueListAttributes(_self: *@This(), _valueListAttributes: ?*anyopaque) void {
        return objc.msgSend(_self, "setValueListAttributes:", void, .{_valueListAttributes});
    }

    pub fn groupingAttributes(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "groupingAttributes", ?*anyopaque, .{});
    }

    pub fn setGroupingAttributes(_self: *@This(), _groupingAttributes: ?*anyopaque) void {
        return objc.msgSend(_self, "setGroupingAttributes:", void, .{_groupingAttributes});
    }

    pub fn notificationBatchingInterval(_self: *@This()) TimeInterval {
        return objc.msgSend(_self, "notificationBatchingInterval", TimeInterval, .{});
    }

    pub fn setNotificationBatchingInterval(_self: *@This(), _notificationBatchingInterval: TimeInterval) void {
        return objc.msgSend(_self, "setNotificationBatchingInterval:", void, .{_notificationBatchingInterval});
    }

    pub fn searchScopes(_self: *@This()) ?*Array {
        return objc.msgSend(_self, "searchScopes", ?*Array, .{});
    }

    pub fn setSearchScopes(_self: *@This(), _searchScopes: ?*Array) void {
        return objc.msgSend(_self, "setSearchScopes:", void, .{_searchScopes});
    }

    pub fn searchItems(_self: *@This()) ?*Array {
        return objc.msgSend(_self, "searchItems", ?*Array, .{});
    }

    pub fn setSearchItems(_self: *@This(), _searchItems: ?*Array) void {
        return objc.msgSend(_self, "setSearchItems:", void, .{_searchItems});
    }

    pub fn operationQueue(_self: *@This()) ?*OperationQueue {
        return objc.msgSend(_self, "operationQueue", ?*OperationQueue, .{});
    }

    pub fn setOperationQueue(_self: *@This(), _operationQueue: ?*OperationQueue) void {
        return objc.msgSend(_self, "setOperationQueue:", void, .{_operationQueue});
    }

    pub fn isStarted(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isStarted", objc.BOOL, .{});
    }

    pub fn isGathering(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isGathering", objc.BOOL, .{});
    }

    pub fn isStopped(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isStopped", objc.BOOL, .{});
    }

    pub fn resultCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "resultCount", objc.NSUInteger, .{});
    }

    pub fn results(_self: *@This()) ?*Array {
        return objc.msgSend(_self, "results", ?*Array, .{});
    }

    pub fn valueLists(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "valueLists", ?*anyopaque, .{});
    }

    pub fn groupedResults(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "groupedResults", ?*anyopaque, .{});
    }
};

/// https://developer.apple.com/documentation/Foundation/NSMetadataQueryDelegate?language=objc
pub const MetadataQueryDelegate = opaque {
    pub const Internal = objc.ExternProtocol(@This(), &.{objc.NSObject});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn metadataQueryReplacementObjectForResultObject(_self: *@This(), _query: ?*MetadataQuery, _result: ?*MetadataItem) ?objc.Id {
        return objc.msgSend(_self, "metadataQuery:replacementObjectForResultObject:", ?objc.Id, .{ _query, _result });
    }

    pub fn metadataQueryReplacementValueForAttributeValue(_self: *@This(), _query: ?*MetadataQuery, _attrName: ?*String, _attrValue: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "metadataQuery:replacementValueForAttribute:value:", ?objc.Id, .{ _query, _attrName, _attrValue });
    }
};

/// https://developer.apple.com/documentation/Foundation/NSMetadataItem?language=objc
pub const MetadataItem = opaque {
    pub const Internal = objc.ExternClass("NSMetadataItem", @This(), objc.NSObject, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn initWithURL(_self: *@This(), _url: ?*URL) *@This() {
        return objc.msgSend(_self, "initWithURL:", *@This(), .{_url});
    }

    pub fn valueForAttribute(_self: *@This(), _key: ?*String) ?objc.Id {
        return objc.msgSend(_self, "valueForAttribute:", ?objc.Id, .{_key});
    }

    pub fn valuesForAttributes(_self: *@This(), _keys: ?*anyopaque) ?*anyopaque {
        return objc.msgSend(_self, "valuesForAttributes:", ?*anyopaque, .{_keys});
    }

    pub fn attributes(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "attributes", ?*anyopaque, .{});
    }
};

/// https://developer.apple.com/documentation/Foundation/NSMetadataQueryAttributeValueTuple?language=objc
pub const MetadataQueryAttributeValueTuple = opaque {
    pub const Internal = objc.ExternClass("NSMetadataQueryAttributeValueTuple", @This(), objc.NSObject, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn attribute(_self: *@This()) ?*String {
        return objc.msgSend(_self, "attribute", ?*String, .{});
    }

    pub fn value(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "value", ?objc.Id, .{});
    }

    pub fn count(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "count", objc.NSUInteger, .{});
    }
};

/// https://developer.apple.com/documentation/Foundation/NSMetadataQueryResultGroup?language=objc
pub const MetadataQueryResultGroup = opaque {
    pub const Internal = objc.ExternClass("NSMetadataQueryResultGroup", @This(), objc.NSObject, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn resultAtIndex(_self: *@This(), _idx: objc.NSUInteger) ?objc.Id {
        return objc.msgSend(_self, "resultAtIndex:", ?objc.Id, .{_idx});
    }

    pub fn attribute(_self: *@This()) ?*String {
        return objc.msgSend(_self, "attribute", ?*String, .{});
    }

    pub fn value(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "value", ?objc.Id, .{});
    }

    pub fn subgroups(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "subgroups", ?*anyopaque, .{});
    }

    pub fn resultCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "resultCount", objc.NSUInteger, .{});
    }

    pub fn results(_self: *@This()) ?*Array {
        return objc.msgSend(_self, "results", ?*Array, .{});
    }
};

pub const NetServicesError = objc.NSInteger;
pub const NetServicesError_UnknownError: objc.NSInteger = -72000;
pub const NetServicesError_CollisionError: objc.NSInteger = -72001;
pub const NetServicesError_NotFoundError: objc.NSInteger = -72002;
pub const NetServicesError_ActivityInProgress: objc.NSInteger = -72003;
pub const NetServicesError_BadArgumentError: objc.NSInteger = -72004;
pub const NetServicesError_CancelledError: objc.NSInteger = -72005;
pub const NetServicesError_InvalidError: objc.NSInteger = -72006;
pub const NetServicesError_TimeoutError: objc.NSInteger = -72007;
pub const NetServicesError_MissingRequiredConfigurationError: objc.NSInteger = -72008;

pub const NetServiceOptions = objc.NSUInteger;
pub const NetServiceOptions_NoAutoRename: objc.NSUInteger = 1;
pub const NetServiceOptions_ListenForConnections: objc.NSUInteger = 2;

/// https://developer.apple.com/documentation/Foundation/NSNetService?language=objc
pub const NetService = opaque {
    pub const Internal = objc.ExternClass("NSNetService", @This(), objc.NSObject, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn initWithDomainTypeNamePort(
        _self: *@This(),
        _domain: ?*String,
        _type: ?*String,
        _name: ?*String,
        _port: i32,
    ) *@This() {
        return objc.msgSend(_self, "initWithDomain:type:name:port:", *@This(), .{
            _domain,
            _type,
            _name,
            _port,
        });
    }

    pub fn initWithDomainTypeName(_self: *@This(), _domain: ?*String, _type: ?*String, _name: ?*String) *@This() {
        return objc.msgSend(_self, "initWithDomain:type:name:", *@This(), .{ _domain, _type, _name });
    }

    pub fn scheduleInRunLoopForMode(_self: *@This(), _aRunLoop: ?*RunLoop, _mode: RunLoopMode) void {
        return objc.msgSend(_self, "scheduleInRunLoop:forMode:", void, .{ _aRunLoop, _mode });
    }

    pub fn removeFromRunLoopForMode(_self: *@This(), _aRunLoop: ?*RunLoop, _mode: RunLoopMode) void {
        return objc.msgSend(_self, "removeFromRunLoop:forMode:", void, .{ _aRunLoop, _mode });
    }

    pub fn publish(_self: *@This()) void {
        return objc.msgSend(_self, "publish", void, .{});
    }

    pub fn publishWithOptions(_self: *@This(), _options: NetServiceOptions) void {
        return objc.msgSend(_self, "publishWithOptions:", void, .{_options});
    }

    pub fn resolve(_self: *@This()) void {
        return objc.msgSend(_self, "resolve", void, .{});
    }

    pub fn stop(_self: *@This()) void {
        return objc.msgSend(_self, "stop", void, .{});
    }

    pub fn dictionaryFromTXTRecordData(_txtData: ?*Data) ?*anyopaque {
        return objc.msgSend(Internal.class(), "dictionaryFromTXTRecordData:", ?*anyopaque, .{_txtData});
    }

    pub fn dataFromTXTRecordDictionary(_txtDictionary: ?*anyopaque) ?*Data {
        return objc.msgSend(Internal.class(), "dataFromTXTRecordDictionary:", ?*Data, .{_txtDictionary});
    }

    pub fn resolveWithTimeout(_self: *@This(), _timeout: TimeInterval) void {
        return objc.msgSend(_self, "resolveWithTimeout:", void, .{_timeout});
    }

    pub fn getInputStreamOutputStream(_self: *@This(), _inputStream: ?*?*InputStream, _outputStream: ?*?*OutputStream) objc.BOOL {
        return objc.msgSend(_self, "getInputStream:outputStream:", objc.BOOL, .{ _inputStream, _outputStream });
    }

    pub fn setTXTRecordData(_self: *@This(), _recordData: ?*Data) objc.BOOL {
        return objc.msgSend(_self, "setTXTRecordData:", objc.BOOL, .{_recordData});
    }

    pub fn txtRecordData(_self: *@This()) ?*Data {
        return objc.msgSend(_self, "TXTRecordData", ?*Data, .{});
    }

    pub fn startMonitoring(_self: *@This()) void {
        return objc.msgSend(_self, "startMonitoring", void, .{});
    }

    pub fn stopMonitoring(_self: *@This()) void {
        return objc.msgSend(_self, "stopMonitoring", void, .{});
    }

    pub fn delegate(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "delegate", ?*anyopaque, .{});
    }

    pub fn setDelegate(_self: *@This(), _delegate: ?*anyopaque) void {
        return objc.msgSend(_self, "setDelegate:", void, .{_delegate});
    }

    pub fn includesPeerToPeer(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "includesPeerToPeer", objc.BOOL, .{});
    }

    pub fn setIncludesPeerToPeer(_self: *@This(), _includesPeerToPeer: objc.BOOL) void {
        return objc.msgSend(_self, "setIncludesPeerToPeer:", void, .{_includesPeerToPeer});
    }

    pub fn name(_self: *@This()) ?*String {
        return objc.msgSend(_self, "name", ?*String, .{});
    }

    pub fn @"type"(_self: *@This()) ?*String {
        return objc.msgSend(_self, "type", ?*String, .{});
    }

    pub fn domain(_self: *@This()) ?*String {
        return objc.msgSend(_self, "domain", ?*String, .{});
    }

    pub fn hostName(_self: *@This()) ?*String {
        return objc.msgSend(_self, "hostName", ?*String, .{});
    }

    pub fn addresses(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "addresses", ?*anyopaque, .{});
    }

    pub fn port(_self: *@This()) objc.NSInteger {
        return objc.msgSend(_self, "port", objc.NSInteger, .{});
    }
};

/// https://developer.apple.com/documentation/Foundation/NSNetServiceBrowser?language=objc
pub const NetServiceBrowser = opaque {
    pub const Internal = objc.ExternClass("NSNetServiceBrowser", @This(), objc.NSObject, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn scheduleInRunLoopForMode(_self: *@This(), _aRunLoop: ?*RunLoop, _mode: RunLoopMode) void {
        return objc.msgSend(_self, "scheduleInRunLoop:forMode:", void, .{ _aRunLoop, _mode });
    }

    pub fn removeFromRunLoopForMode(_self: *@This(), _aRunLoop: ?*RunLoop, _mode: RunLoopMode) void {
        return objc.msgSend(_self, "removeFromRunLoop:forMode:", void, .{ _aRunLoop, _mode });
    }

    pub fn searchForBrowsableDomains(_self: *@This()) void {
        return objc.msgSend(_self, "searchForBrowsableDomains", void, .{});
    }

    pub fn searchForRegistrationDomains(_self: *@This()) void {
        return objc.msgSend(_self, "searchForRegistrationDomains", void, .{});
    }

    pub fn searchForServicesOfTypeInDomain(_self: *@This(), _type: ?*String, _domainString: ?*String) void {
        return objc.msgSend(_self, "searchForServicesOfType:inDomain:", void, .{ _type, _domainString });
    }

    pub fn stop(_self: *@This()) void {
        return objc.msgSend(_self, "stop", void, .{});
    }

    pub fn delegate(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "delegate", ?*anyopaque, .{});
    }

    pub fn setDelegate(_self: *@This(), _delegate: ?*anyopaque) void {
        return objc.msgSend(_self, "setDelegate:", void, .{_delegate});
    }

    pub fn includesPeerToPeer(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "includesPeerToPeer", objc.BOOL, .{});
    }

    pub fn setIncludesPeerToPeer(_self: *@This(), _includesPeerToPeer: objc.BOOL) void {
        return objc.msgSend(_self, "setIncludesPeerToPeer:", void, .{_includesPeerToPeer});
    }
};

/// https://developer.apple.com/documentation/Foundation/NSNetServiceDelegate?language=objc
pub const NetServiceDelegate = opaque {
    pub const Internal = objc.ExternProtocol(@This(), &.{objc.NSObject});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn netServiceWillPublish(_self: *@This(), _sender: ?*NetService) void {
        return objc.msgSend(_self, "netServiceWillPublish:", void, .{_sender});
    }

    pub fn netServiceDidPublish(_self: *@This(), _sender: ?*NetService) void {
        return objc.msgSend(_self, "netServiceDidPublish:", void, .{_sender});
    }

    pub fn netServiceDidNotPublish(_self: *@This(), _sender: ?*NetService, _errorDict: ?*anyopaque) void {
        return objc.msgSend(_self, "netService:didNotPublish:", void, .{ _sender, _errorDict });
    }

    pub fn netServiceWillResolve(_self: *@This(), _sender: ?*NetService) void {
        return objc.msgSend(_self, "netServiceWillResolve:", void, .{_sender});
    }

    pub fn netServiceDidResolveAddress(_self: *@This(), _sender: ?*NetService) void {
        return objc.msgSend(_self, "netServiceDidResolveAddress:", void, .{_sender});
    }

    pub fn netServiceDidNotResolve(_self: *@This(), _sender: ?*NetService, _errorDict: ?*anyopaque) void {
        return objc.msgSend(_self, "netService:didNotResolve:", void, .{ _sender, _errorDict });
    }

    pub fn netServiceDidStop(_self: *@This(), _sender: ?*NetService) void {
        return objc.msgSend(_self, "netServiceDidStop:", void, .{_sender});
    }

    pub fn netServiceDidUpdateTXTRecordData(_self: *@This(), _sender: ?*NetService, _data: ?*Data) void {
        return objc.msgSend(_self, "netService:didUpdateTXTRecordData:", void, .{ _sender, _data });
    }

    pub fn netServiceDidAcceptConnectionWithInputStreamOutputStream(_self: *@This(), _sender: ?*NetService, _inputStream: ?*InputStream, _outputStream: ?*OutputStream) void {
        return objc.msgSend(_self, "netService:didAcceptConnectionWithInputStream:outputStream:", void, .{ _sender, _inputStream, _outputStream });
    }
};

/// https://developer.apple.com/documentation/Foundation/NSNetServiceBrowserDelegate?language=objc
pub const NetServiceBrowserDelegate = opaque {
    pub const Internal = objc.ExternProtocol(@This(), &.{objc.NSObject});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn netServiceBrowserWillSearch(_self: *@This(), _browser: ?*NetServiceBrowser) void {
        return objc.msgSend(_self, "netServiceBrowserWillSearch:", void, .{_browser});
    }

    pub fn netServiceBrowserDidStopSearch(_self: *@This(), _browser: ?*NetServiceBrowser) void {
        return objc.msgSend(_self, "netServiceBrowserDidStopSearch:", void, .{_browser});
    }

    pub fn netServiceBrowserDidNotSearch(_self: *@This(), _browser: ?*NetServiceBrowser, _errorDict: ?*anyopaque) void {
        return objc.msgSend(_self, "netServiceBrowser:didNotSearch:", void, .{ _browser, _errorDict });
    }

    pub fn netServiceBrowserDidFindDomainMoreComing(_self: *@This(), _browser: ?*NetServiceBrowser, _domainString: ?*String, _moreComing: objc.BOOL) void {
        return objc.msgSend(_self, "netServiceBrowser:didFindDomain:moreComing:", void, .{ _browser, _domainString, _moreComing });
    }

    pub fn netServiceBrowserDidFindServiceMoreComing(_self: *@This(), _browser: ?*NetServiceBrowser, _service: ?*NetService, _moreComing: objc.BOOL) void {
        return objc.msgSend(_self, "netServiceBrowser:didFindService:moreComing:", void, .{ _browser, _service, _moreComing });
    }

    pub fn netServiceBrowserDidRemoveDomainMoreComing(_self: *@This(), _browser: ?*NetServiceBrowser, _domainString: ?*String, _moreComing: objc.BOOL) void {
        return objc.msgSend(_self, "netServiceBrowser:didRemoveDomain:moreComing:", void, .{ _browser, _domainString, _moreComing });
    }

    pub fn netServiceBrowserDidRemoveServiceMoreComing(_self: *@This(), _browser: ?*NetServiceBrowser, _service: ?*NetService, _moreComing: objc.BOOL) void {
        return objc.msgSend(_self, "netServiceBrowser:didRemoveService:moreComing:", void, .{ _browser, _service, _moreComing });
    }
};

/// https://developer.apple.com/documentation/Foundation/NSUbiquitousKeyValueStore?language=objc
pub const UbiquitousKeyValueStore = opaque {
    pub const Internal = objc.ExternClass("NSUbiquitousKeyValueStore", @This(), objc.NSObject, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn objectForKey(_self: *@This(), _aKey: ?*String) ?objc.Id {
        return objc.msgSend(_self, "objectForKey:", ?objc.Id, .{_aKey});
    }

    pub fn setObjectForKey(_self: *@This(), _anObject: ?objc.Id, _aKey: ?*String) void {
        return objc.msgSend(_self, "setObject:forKey:", void, .{ _anObject, _aKey });
    }

    pub fn removeObjectForKey(_self: *@This(), _aKey: ?*String) void {
        return objc.msgSend(_self, "removeObjectForKey:", void, .{_aKey});
    }

    pub fn stringForKey(_self: *@This(), _aKey: ?*String) ?*String {
        return objc.msgSend(_self, "stringForKey:", ?*String, .{_aKey});
    }

    pub fn arrayForKey(_self: *@This(), _aKey: ?*String) ?*Array {
        return objc.msgSend(_self, "arrayForKey:", ?*Array, .{_aKey});
    }

    pub fn dictionaryForKey(_self: *@This(), _aKey: ?*String) ?*anyopaque {
        return objc.msgSend(_self, "dictionaryForKey:", ?*anyopaque, .{_aKey});
    }

    pub fn dataForKey(_self: *@This(), _aKey: ?*String) ?*Data {
        return objc.msgSend(_self, "dataForKey:", ?*Data, .{_aKey});
    }

    pub fn longLongForKey(_self: *@This(), _aKey: ?*String) i64 {
        return objc.msgSend(_self, "longLongForKey:", i64, .{_aKey});
    }

    pub fn doubleForKey(_self: *@This(), _aKey: ?*String) f64 {
        return objc.msgSend(_self, "doubleForKey:", f64, .{_aKey});
    }

    pub fn boolForKey(_self: *@This(), _aKey: ?*String) objc.BOOL {
        return objc.msgSend(_self, "boolForKey:", objc.BOOL, .{_aKey});
    }

    pub fn setStringForKey(_self: *@This(), _aString: ?*String, _aKey: ?*String) void {
        return objc.msgSend(_self, "setString:forKey:", void, .{ _aString, _aKey });
    }

    pub fn setDataForKey(_self: *@This(), _aData: ?*Data, _aKey: ?*String) void {
        return objc.msgSend(_self, "setData:forKey:", void, .{ _aData, _aKey });
    }

    pub fn setArrayForKey(_self: *@This(), _anArray: ?*Array, _aKey: ?*String) void {
        return objc.msgSend(_self, "setArray:forKey:", void, .{ _anArray, _aKey });
    }

    pub fn setDictionaryForKey(_self: *@This(), _aDictionary: ?*anyopaque, _aKey: ?*String) void {
        return objc.msgSend(_self, "setDictionary:forKey:", void, .{ _aDictionary, _aKey });
    }

    pub fn setLongLongForKey(_self: *@This(), _value: i64, _aKey: ?*String) void {
        return objc.msgSend(_self, "setLongLong:forKey:", void, .{ _value, _aKey });
    }

    pub fn setDoubleForKey(_self: *@This(), _value: f64, _aKey: ?*String) void {
        return objc.msgSend(_self, "setDouble:forKey:", void, .{ _value, _aKey });
    }

    pub fn setBoolForKey(_self: *@This(), _value: objc.BOOL, _aKey: ?*String) void {
        return objc.msgSend(_self, "setBool:forKey:", void, .{ _value, _aKey });
    }

    pub fn synchronize(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "synchronize", objc.BOOL, .{});
    }

    pub fn defaultStore() ?*UbiquitousKeyValueStore {
        return objc.msgSend(Internal.class(), "defaultStore", ?*UbiquitousKeyValueStore, .{});
    }

    pub fn dictionaryRepresentation(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "dictionaryRepresentation", ?*anyopaque, .{});
    }
};

pub const UndoManagerUserInfoKey = ?*String;

/// https://developer.apple.com/documentation/Foundation/NSUndoManager?language=objc
pub const UndoManager = opaque {
    pub const Internal = objc.ExternClass("NSUndoManager", @This(), objc.NSObject, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn beginUndoGrouping(_self: *@This()) void {
        return objc.msgSend(_self, "beginUndoGrouping", void, .{});
    }

    pub fn endUndoGrouping(_self: *@This()) void {
        return objc.msgSend(_self, "endUndoGrouping", void, .{});
    }

    pub fn groupingLevel(_self: *@This()) objc.NSInteger {
        return objc.msgSend(_self, "groupingLevel", objc.NSInteger, .{});
    }

    pub fn disableUndoRegistration(_self: *@This()) void {
        return objc.msgSend(_self, "disableUndoRegistration", void, .{});
    }

    pub fn enableUndoRegistration(_self: *@This()) void {
        return objc.msgSend(_self, "enableUndoRegistration", void, .{});
    }

    pub fn isUndoRegistrationEnabled(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isUndoRegistrationEnabled", objc.BOOL, .{});
    }

    pub fn setGroupsByEvent(_self: *@This(), _groupsByEvent: objc.BOOL) void {
        return objc.msgSend(_self, "setGroupsByEvent:", void, .{_groupsByEvent});
    }

    pub fn groupsByEvent(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "groupsByEvent", objc.BOOL, .{});
    }

    pub fn setLevelsOfUndo(_self: *@This(), _levelsOfUndo: objc.NSUInteger) void {
        return objc.msgSend(_self, "setLevelsOfUndo:", void, .{_levelsOfUndo});
    }

    pub fn levelsOfUndo(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "levelsOfUndo", objc.NSUInteger, .{});
    }

    pub fn setRunLoopModes(_self: *@This(), _runLoopModes: ?*anyopaque) void {
        return objc.msgSend(_self, "setRunLoopModes:", void, .{_runLoopModes});
    }

    pub fn runLoopModes(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "runLoopModes", ?*anyopaque, .{});
    }

    pub fn undo(_self: *@This()) void {
        return objc.msgSend(_self, "undo", void, .{});
    }

    pub fn redo(_self: *@This()) void {
        return objc.msgSend(_self, "redo", void, .{});
    }

    pub fn undoNestedGroup(_self: *@This()) void {
        return objc.msgSend(_self, "undoNestedGroup", void, .{});
    }

    pub fn canUndo(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "canUndo", objc.BOOL, .{});
    }

    pub fn canRedo(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "canRedo", objc.BOOL, .{});
    }

    pub fn undoCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "undoCount", objc.NSUInteger, .{});
    }

    pub fn redoCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "redoCount", objc.NSUInteger, .{});
    }

    pub fn isUndoing(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isUndoing", objc.BOOL, .{});
    }

    pub fn isRedoing(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isRedoing", objc.BOOL, .{});
    }

    pub fn removeAllActions(_self: *@This()) void {
        return objc.msgSend(_self, "removeAllActions", void, .{});
    }

    pub fn removeAllActionsWithTarget(_self: *@This(), _target: ?objc.Id) void {
        return objc.msgSend(_self, "removeAllActionsWithTarget:", void, .{_target});
    }

    pub fn registerUndoWithTargetSelectorObject(_self: *@This(), _target: ?objc.Id, _selector: objc.Selector, _object: ?objc.Id) void {
        return objc.msgSend(_self, "registerUndoWithTarget:selector:object:", void, .{ _target, _selector, _object });
    }

    pub fn prepareWithInvocationTarget(_self: *@This(), _target: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "prepareWithInvocationTarget:", ?objc.Id, .{_target});
    }

    pub fn registerUndoWithTargetHandler(_self: *@This(), _target: ?objc.Id, _undoHandler: *const fn (?objc.Id) callconv(.C) void) void {
        return objc.msgSend(_self, "registerUndoWithTarget:handler:", void, .{ _target, _undoHandler });
    }

    pub fn setActionIsDiscardable(_self: *@This(), _discardable: objc.BOOL) void {
        return objc.msgSend(_self, "setActionIsDiscardable:", void, .{_discardable});
    }

    pub fn undoActionIsDiscardable(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "undoActionIsDiscardable", objc.BOOL, .{});
    }

    pub fn redoActionIsDiscardable(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "redoActionIsDiscardable", objc.BOOL, .{});
    }

    pub fn undoActionName(_self: *@This()) ?*String {
        return objc.msgSend(_self, "undoActionName", ?*String, .{});
    }

    pub fn redoActionName(_self: *@This()) ?*String {
        return objc.msgSend(_self, "redoActionName", ?*String, .{});
    }

    pub fn setActionName(_self: *@This(), _actionName: ?*String) void {
        return objc.msgSend(_self, "setActionName:", void, .{_actionName});
    }

    pub fn undoActionUserInfoValueForKey(_self: *@This(), _key: UndoManagerUserInfoKey) ?objc.Id {
        return objc.msgSend(_self, "undoActionUserInfoValueForKey:", ?objc.Id, .{_key});
    }

    pub fn redoActionUserInfoValueForKey(_self: *@This(), _key: UndoManagerUserInfoKey) ?objc.Id {
        return objc.msgSend(_self, "redoActionUserInfoValueForKey:", ?objc.Id, .{_key});
    }

    pub fn setActionUserInfoValueForKey(_self: *@This(), _info: ?objc.Id, _key: UndoManagerUserInfoKey) void {
        return objc.msgSend(_self, "setActionUserInfoValue:forKey:", void, .{ _info, _key });
    }

    pub fn undoMenuItemTitle(_self: *@This()) ?*String {
        return objc.msgSend(_self, "undoMenuItemTitle", ?*String, .{});
    }

    pub fn redoMenuItemTitle(_self: *@This()) ?*String {
        return objc.msgSend(_self, "redoMenuItemTitle", ?*String, .{});
    }

    pub fn undoMenuTitleForUndoActionName(_self: *@This(), _actionName: ?*String) ?*String {
        return objc.msgSend(_self, "undoMenuTitleForUndoActionName:", ?*String, .{_actionName});
    }

    pub fn redoMenuTitleForUndoActionName(_self: *@This(), _actionName: ?*String) ?*String {
        return objc.msgSend(_self, "redoMenuTitleForUndoActionName:", ?*String, .{_actionName});
    }
};

/// https://developer.apple.com/documentation/Foundation/NSURLSession?language=objc
pub const URLSession = opaque {
    pub const Internal = objc.ExternClass("NSURLSession", @This(), objc.NSObject, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn sessionWithConfiguration(_configuration: ?*URLSessionConfiguration) ?*URLSession {
        return objc.msgSend(Internal.class(), "sessionWithConfiguration:", ?*URLSession, .{_configuration});
    }

    pub fn sessionWithConfigurationDelegateDelegateQueue(_configuration: ?*URLSessionConfiguration, _delegate: ?*anyopaque, _queue: ?*OperationQueue) ?*URLSession {
        return objc.msgSend(Internal.class(), "sessionWithConfiguration:delegate:delegateQueue:", ?*URLSession, .{ _configuration, _delegate, _queue });
    }

    pub fn finishTasksAndInvalidate(_self: *@This()) void {
        return objc.msgSend(_self, "finishTasksAndInvalidate", void, .{});
    }

    pub fn invalidateAndCancel(_self: *@This()) void {
        return objc.msgSend(_self, "invalidateAndCancel", void, .{});
    }

    pub fn resetWithCompletionHandler(_self: *@This(), _completionHandler: *const fn () callconv(.C) void) void {
        return objc.msgSend(_self, "resetWithCompletionHandler:", void, .{_completionHandler});
    }

    pub fn flushWithCompletionHandler(_self: *@This(), _completionHandler: *const fn () callconv(.C) void) void {
        return objc.msgSend(_self, "flushWithCompletionHandler:", void, .{_completionHandler});
    }

    pub fn getTasksWithCompletionHandler(_self: *@This(), _completionHandler: *const fn (?*anyopaque, ?*anyopaque, ?*anyopaque) callconv(.C) void) void {
        return objc.msgSend(_self, "getTasksWithCompletionHandler:", void, .{_completionHandler});
    }

    pub fn getAllTasksWithCompletionHandler(_self: *@This(), _completionHandler: *const fn (?*anyopaque) callconv(.C) void) void {
        return objc.msgSend(_self, "getAllTasksWithCompletionHandler:", void, .{_completionHandler});
    }

    pub fn dataTaskWithRequest(_self: *@This(), _request: ?*URLRequest) ?*URLSessionDataTask {
        return objc.msgSend(_self, "dataTaskWithRequest:", ?*URLSessionDataTask, .{_request});
    }

    pub fn dataTaskWithURL(_self: *@This(), _url: ?*URL) ?*URLSessionDataTask {
        return objc.msgSend(_self, "dataTaskWithURL:", ?*URLSessionDataTask, .{_url});
    }

    pub fn uploadTaskWithRequestFromFile(_self: *@This(), _request: ?*URLRequest, _fileURL: ?*URL) ?*URLSessionUploadTask {
        return objc.msgSend(_self, "uploadTaskWithRequest:fromFile:", ?*URLSessionUploadTask, .{ _request, _fileURL });
    }

    pub fn uploadTaskWithRequestFromData(_self: *@This(), _request: ?*URLRequest, _bodyData: ?*Data) ?*URLSessionUploadTask {
        return objc.msgSend(_self, "uploadTaskWithRequest:fromData:", ?*URLSessionUploadTask, .{ _request, _bodyData });
    }

    pub fn uploadTaskWithResumeData(_self: *@This(), _resumeData: ?*Data) ?*URLSessionUploadTask {
        return objc.msgSend(_self, "uploadTaskWithResumeData:", ?*URLSessionUploadTask, .{_resumeData});
    }

    pub fn uploadTaskWithStreamedRequest(_self: *@This(), _request: ?*URLRequest) ?*URLSessionUploadTask {
        return objc.msgSend(_self, "uploadTaskWithStreamedRequest:", ?*URLSessionUploadTask, .{_request});
    }

    pub fn downloadTaskWithRequest(_self: *@This(), _request: ?*URLRequest) ?*URLSessionDownloadTask {
        return objc.msgSend(_self, "downloadTaskWithRequest:", ?*URLSessionDownloadTask, .{_request});
    }

    pub fn downloadTaskWithURL(_self: *@This(), _url: ?*URL) ?*URLSessionDownloadTask {
        return objc.msgSend(_self, "downloadTaskWithURL:", ?*URLSessionDownloadTask, .{_url});
    }

    pub fn downloadTaskWithResumeData(_self: *@This(), _resumeData: ?*Data) ?*URLSessionDownloadTask {
        return objc.msgSend(_self, "downloadTaskWithResumeData:", ?*URLSessionDownloadTask, .{_resumeData});
    }

    pub fn streamTaskWithHostNamePort(_self: *@This(), _hostname: ?*String, _port: objc.NSInteger) ?*URLSessionStreamTask {
        return objc.msgSend(_self, "streamTaskWithHostName:port:", ?*URLSessionStreamTask, .{ _hostname, _port });
    }

    pub fn streamTaskWithNetService(_self: *@This(), _service: ?*NetService) ?*URLSessionStreamTask {
        return objc.msgSend(_self, "streamTaskWithNetService:", ?*URLSessionStreamTask, .{_service});
    }

    pub fn webSocketTaskWithURL(_self: *@This(), _url: ?*URL) ?*URLSessionWebSocketTask {
        return objc.msgSend(_self, "webSocketTaskWithURL:", ?*URLSessionWebSocketTask, .{_url});
    }

    pub fn webSocketTaskWithURLProtocols(_self: *@This(), _url: ?*URL, _protocols: ?*anyopaque) ?*URLSessionWebSocketTask {
        return objc.msgSend(_self, "webSocketTaskWithURL:protocols:", ?*URLSessionWebSocketTask, .{ _url, _protocols });
    }

    pub fn webSocketTaskWithRequest(_self: *@This(), _request: ?*URLRequest) ?*URLSessionWebSocketTask {
        return objc.msgSend(_self, "webSocketTaskWithRequest:", ?*URLSessionWebSocketTask, .{_request});
    }

    pub fn sharedSession() ?*URLSession {
        return objc.msgSend(Internal.class(), "sharedSession", ?*URLSession, .{});
    }

    pub fn delegateQueue(_self: *@This()) ?*OperationQueue {
        return objc.msgSend(_self, "delegateQueue", ?*OperationQueue, .{});
    }

    pub fn delegate(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "delegate", ?*anyopaque, .{});
    }

    pub fn configuration(_self: *@This()) ?*URLSessionConfiguration {
        return objc.msgSend(_self, "configuration", ?*URLSessionConfiguration, .{});
    }

    pub fn sessionDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "sessionDescription", ?*String, .{});
    }

    pub fn setSessionDescription(_self: *@This(), _sessionDescription: ?*String) void {
        return objc.msgSend(_self, "setSessionDescription:", void, .{_sessionDescription});
    }
};

pub const URLSessionTaskState = objc.NSInteger;
pub const URLSessionTaskState_Running: objc.NSInteger = 0;
pub const URLSessionTaskState_Suspended: objc.NSInteger = 1;
pub const URLSessionTaskState_Canceling: objc.NSInteger = 2;
pub const URLSessionTaskState_Completed: objc.NSInteger = 3;

/// https://developer.apple.com/documentation/Foundation/NSURLSessionTask?language=objc
pub const URLSessionTask = opaque {
    pub const Internal = objc.ExternClass("NSURLSessionTask", @This(), objc.NSObject, &.{ Copying, ProgressReporting });
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn progress(_self: *@This()) ?*Progress {
        return objc.msgSend(_self, "progress", ?*Progress, .{});
    }

    pub fn cancel(_self: *@This()) void {
        return objc.msgSend(_self, "cancel", void, .{});
    }

    pub fn @"suspend"(_self: *@This()) void {
        return objc.msgSend(_self, "suspend", void, .{});
    }

    pub fn @"resume"(_self: *@This()) void {
        return objc.msgSend(_self, "resume", void, .{});
    }

    pub fn taskIdentifier(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "taskIdentifier", objc.NSUInteger, .{});
    }

    pub fn originalRequest(_self: *@This()) ?*URLRequest {
        return objc.msgSend(_self, "originalRequest", ?*URLRequest, .{});
    }

    pub fn currentRequest(_self: *@This()) ?*URLRequest {
        return objc.msgSend(_self, "currentRequest", ?*URLRequest, .{});
    }

    pub fn response(_self: *@This()) ?*URLResponse {
        return objc.msgSend(_self, "response", ?*URLResponse, .{});
    }

    pub fn delegate(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "delegate", ?*anyopaque, .{});
    }

    pub fn setDelegate(_self: *@This(), _delegate: ?*anyopaque) void {
        return objc.msgSend(_self, "setDelegate:", void, .{_delegate});
    }

    pub fn earliestBeginDate(_self: *@This()) ?*Date {
        return objc.msgSend(_self, "earliestBeginDate", ?*Date, .{});
    }

    pub fn setEarliestBeginDate(_self: *@This(), _earliestBeginDate: ?*Date) void {
        return objc.msgSend(_self, "setEarliestBeginDate:", void, .{_earliestBeginDate});
    }

    pub fn countOfBytesClientExpectsToSend(_self: *@This()) objc.int64_t {
        return objc.msgSend(_self, "countOfBytesClientExpectsToSend", objc.int64_t, .{});
    }

    pub fn setCountOfBytesClientExpectsToSend(_self: *@This(), _countOfBytesClientExpectsToSend: objc.int64_t) void {
        return objc.msgSend(_self, "setCountOfBytesClientExpectsToSend:", void, .{_countOfBytesClientExpectsToSend});
    }

    pub fn countOfBytesClientExpectsToReceive(_self: *@This()) objc.int64_t {
        return objc.msgSend(_self, "countOfBytesClientExpectsToReceive", objc.int64_t, .{});
    }

    pub fn setCountOfBytesClientExpectsToReceive(_self: *@This(), _countOfBytesClientExpectsToReceive: objc.int64_t) void {
        return objc.msgSend(_self, "setCountOfBytesClientExpectsToReceive:", void, .{_countOfBytesClientExpectsToReceive});
    }

    pub fn countOfBytesSent(_self: *@This()) objc.int64_t {
        return objc.msgSend(_self, "countOfBytesSent", objc.int64_t, .{});
    }

    pub fn countOfBytesReceived(_self: *@This()) objc.int64_t {
        return objc.msgSend(_self, "countOfBytesReceived", objc.int64_t, .{});
    }

    pub fn countOfBytesExpectedToSend(_self: *@This()) objc.int64_t {
        return objc.msgSend(_self, "countOfBytesExpectedToSend", objc.int64_t, .{});
    }

    pub fn countOfBytesExpectedToReceive(_self: *@This()) objc.int64_t {
        return objc.msgSend(_self, "countOfBytesExpectedToReceive", objc.int64_t, .{});
    }

    pub fn taskDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "taskDescription", ?*String, .{});
    }

    pub fn setTaskDescription(_self: *@This(), _taskDescription: ?*String) void {
        return objc.msgSend(_self, "setTaskDescription:", void, .{_taskDescription});
    }

    pub fn state(_self: *@This()) URLSessionTaskState {
        return objc.msgSend(_self, "state", URLSessionTaskState, .{});
    }

    pub fn @"error"(_self: *@This()) ?*Error {
        return objc.msgSend(_self, "error", ?*Error, .{});
    }

    pub fn priority(_self: *@This()) f32 {
        return objc.msgSend(_self, "priority", f32, .{});
    }

    pub fn setPriority(_self: *@This(), _priority: f32) void {
        return objc.msgSend(_self, "setPriority:", void, .{_priority});
    }

    pub fn prefersIncrementalDelivery(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "prefersIncrementalDelivery", objc.BOOL, .{});
    }

    pub fn setPrefersIncrementalDelivery(_self: *@This(), _prefersIncrementalDelivery: objc.BOOL) void {
        return objc.msgSend(_self, "setPrefersIncrementalDelivery:", void, .{_prefersIncrementalDelivery});
    }
};

/// https://developer.apple.com/documentation/Foundation/NSURLSessionDataTask?language=objc
pub const URLSessionDataTask = opaque {
    pub const Internal = objc.ExternClass("NSURLSessionDataTask", @This(), URLSessionTask, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn progress(_self: *@This()) ?*Progress {
        return objc.msgSend(_self, "progress", ?*Progress, .{});
    }

    pub fn cancel(_self: *@This()) void {
        return objc.msgSend(_self, "cancel", void, .{});
    }

    pub fn @"suspend"(_self: *@This()) void {
        return objc.msgSend(_self, "suspend", void, .{});
    }

    pub fn @"resume"(_self: *@This()) void {
        return objc.msgSend(_self, "resume", void, .{});
    }

    pub fn taskIdentifier(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "taskIdentifier", objc.NSUInteger, .{});
    }

    pub fn originalRequest(_self: *@This()) ?*URLRequest {
        return objc.msgSend(_self, "originalRequest", ?*URLRequest, .{});
    }

    pub fn currentRequest(_self: *@This()) ?*URLRequest {
        return objc.msgSend(_self, "currentRequest", ?*URLRequest, .{});
    }

    pub fn response(_self: *@This()) ?*URLResponse {
        return objc.msgSend(_self, "response", ?*URLResponse, .{});
    }

    pub fn delegate(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "delegate", ?*anyopaque, .{});
    }

    pub fn setDelegate(_self: *@This(), _delegate: ?*anyopaque) void {
        return objc.msgSend(_self, "setDelegate:", void, .{_delegate});
    }

    pub fn earliestBeginDate(_self: *@This()) ?*Date {
        return objc.msgSend(_self, "earliestBeginDate", ?*Date, .{});
    }

    pub fn setEarliestBeginDate(_self: *@This(), _earliestBeginDate: ?*Date) void {
        return objc.msgSend(_self, "setEarliestBeginDate:", void, .{_earliestBeginDate});
    }

    pub fn countOfBytesClientExpectsToSend(_self: *@This()) objc.int64_t {
        return objc.msgSend(_self, "countOfBytesClientExpectsToSend", objc.int64_t, .{});
    }

    pub fn setCountOfBytesClientExpectsToSend(_self: *@This(), _countOfBytesClientExpectsToSend: objc.int64_t) void {
        return objc.msgSend(_self, "setCountOfBytesClientExpectsToSend:", void, .{_countOfBytesClientExpectsToSend});
    }

    pub fn countOfBytesClientExpectsToReceive(_self: *@This()) objc.int64_t {
        return objc.msgSend(_self, "countOfBytesClientExpectsToReceive", objc.int64_t, .{});
    }

    pub fn setCountOfBytesClientExpectsToReceive(_self: *@This(), _countOfBytesClientExpectsToReceive: objc.int64_t) void {
        return objc.msgSend(_self, "setCountOfBytesClientExpectsToReceive:", void, .{_countOfBytesClientExpectsToReceive});
    }

    pub fn countOfBytesSent(_self: *@This()) objc.int64_t {
        return objc.msgSend(_self, "countOfBytesSent", objc.int64_t, .{});
    }

    pub fn countOfBytesReceived(_self: *@This()) objc.int64_t {
        return objc.msgSend(_self, "countOfBytesReceived", objc.int64_t, .{});
    }

    pub fn countOfBytesExpectedToSend(_self: *@This()) objc.int64_t {
        return objc.msgSend(_self, "countOfBytesExpectedToSend", objc.int64_t, .{});
    }

    pub fn countOfBytesExpectedToReceive(_self: *@This()) objc.int64_t {
        return objc.msgSend(_self, "countOfBytesExpectedToReceive", objc.int64_t, .{});
    }

    pub fn taskDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "taskDescription", ?*String, .{});
    }

    pub fn setTaskDescription(_self: *@This(), _taskDescription: ?*String) void {
        return objc.msgSend(_self, "setTaskDescription:", void, .{_taskDescription});
    }

    pub fn state(_self: *@This()) URLSessionTaskState {
        return objc.msgSend(_self, "state", URLSessionTaskState, .{});
    }

    pub fn @"error"(_self: *@This()) ?*Error {
        return objc.msgSend(_self, "error", ?*Error, .{});
    }

    pub fn priority(_self: *@This()) f32 {
        return objc.msgSend(_self, "priority", f32, .{});
    }

    pub fn setPriority(_self: *@This(), _priority: f32) void {
        return objc.msgSend(_self, "setPriority:", void, .{_priority});
    }

    pub fn prefersIncrementalDelivery(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "prefersIncrementalDelivery", objc.BOOL, .{});
    }

    pub fn setPrefersIncrementalDelivery(_self: *@This(), _prefersIncrementalDelivery: objc.BOOL) void {
        return objc.msgSend(_self, "setPrefersIncrementalDelivery:", void, .{_prefersIncrementalDelivery});
    }
};

/// https://developer.apple.com/documentation/Foundation/NSURLSessionUploadTask?language=objc
pub const URLSessionUploadTask = opaque {
    pub const Internal = objc.ExternClass("NSURLSessionUploadTask", @This(), URLSessionDataTask, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn progress(_self: *@This()) ?*Progress {
        return objc.msgSend(_self, "progress", ?*Progress, .{});
    }

    pub fn cancel(_self: *@This()) void {
        return objc.msgSend(_self, "cancel", void, .{});
    }

    pub fn @"suspend"(_self: *@This()) void {
        return objc.msgSend(_self, "suspend", void, .{});
    }

    pub fn @"resume"(_self: *@This()) void {
        return objc.msgSend(_self, "resume", void, .{});
    }

    pub fn taskIdentifier(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "taskIdentifier", objc.NSUInteger, .{});
    }

    pub fn originalRequest(_self: *@This()) ?*URLRequest {
        return objc.msgSend(_self, "originalRequest", ?*URLRequest, .{});
    }

    pub fn currentRequest(_self: *@This()) ?*URLRequest {
        return objc.msgSend(_self, "currentRequest", ?*URLRequest, .{});
    }

    pub fn response(_self: *@This()) ?*URLResponse {
        return objc.msgSend(_self, "response", ?*URLResponse, .{});
    }

    pub fn delegate(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "delegate", ?*anyopaque, .{});
    }

    pub fn setDelegate(_self: *@This(), _delegate: ?*anyopaque) void {
        return objc.msgSend(_self, "setDelegate:", void, .{_delegate});
    }

    pub fn earliestBeginDate(_self: *@This()) ?*Date {
        return objc.msgSend(_self, "earliestBeginDate", ?*Date, .{});
    }

    pub fn setEarliestBeginDate(_self: *@This(), _earliestBeginDate: ?*Date) void {
        return objc.msgSend(_self, "setEarliestBeginDate:", void, .{_earliestBeginDate});
    }

    pub fn countOfBytesClientExpectsToSend(_self: *@This()) objc.int64_t {
        return objc.msgSend(_self, "countOfBytesClientExpectsToSend", objc.int64_t, .{});
    }

    pub fn setCountOfBytesClientExpectsToSend(_self: *@This(), _countOfBytesClientExpectsToSend: objc.int64_t) void {
        return objc.msgSend(_self, "setCountOfBytesClientExpectsToSend:", void, .{_countOfBytesClientExpectsToSend});
    }

    pub fn countOfBytesClientExpectsToReceive(_self: *@This()) objc.int64_t {
        return objc.msgSend(_self, "countOfBytesClientExpectsToReceive", objc.int64_t, .{});
    }

    pub fn setCountOfBytesClientExpectsToReceive(_self: *@This(), _countOfBytesClientExpectsToReceive: objc.int64_t) void {
        return objc.msgSend(_self, "setCountOfBytesClientExpectsToReceive:", void, .{_countOfBytesClientExpectsToReceive});
    }

    pub fn countOfBytesSent(_self: *@This()) objc.int64_t {
        return objc.msgSend(_self, "countOfBytesSent", objc.int64_t, .{});
    }

    pub fn countOfBytesReceived(_self: *@This()) objc.int64_t {
        return objc.msgSend(_self, "countOfBytesReceived", objc.int64_t, .{});
    }

    pub fn countOfBytesExpectedToSend(_self: *@This()) objc.int64_t {
        return objc.msgSend(_self, "countOfBytesExpectedToSend", objc.int64_t, .{});
    }

    pub fn countOfBytesExpectedToReceive(_self: *@This()) objc.int64_t {
        return objc.msgSend(_self, "countOfBytesExpectedToReceive", objc.int64_t, .{});
    }

    pub fn taskDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "taskDescription", ?*String, .{});
    }

    pub fn setTaskDescription(_self: *@This(), _taskDescription: ?*String) void {
        return objc.msgSend(_self, "setTaskDescription:", void, .{_taskDescription});
    }

    pub fn state(_self: *@This()) URLSessionTaskState {
        return objc.msgSend(_self, "state", URLSessionTaskState, .{});
    }

    pub fn @"error"(_self: *@This()) ?*Error {
        return objc.msgSend(_self, "error", ?*Error, .{});
    }

    pub fn priority(_self: *@This()) f32 {
        return objc.msgSend(_self, "priority", f32, .{});
    }

    pub fn setPriority(_self: *@This(), _priority: f32) void {
        return objc.msgSend(_self, "setPriority:", void, .{_priority});
    }

    pub fn prefersIncrementalDelivery(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "prefersIncrementalDelivery", objc.BOOL, .{});
    }

    pub fn setPrefersIncrementalDelivery(_self: *@This(), _prefersIncrementalDelivery: objc.BOOL) void {
        return objc.msgSend(_self, "setPrefersIncrementalDelivery:", void, .{_prefersIncrementalDelivery});
    }

    pub fn cancelByProducingResumeData(_self: *@This(), _completionHandler: *const fn (?*Data) callconv(.C) void) void {
        return objc.msgSend(_self, "cancelByProducingResumeData:", void, .{_completionHandler});
    }
};

/// https://developer.apple.com/documentation/Foundation/NSURLSessionDownloadTask?language=objc
pub const URLSessionDownloadTask = opaque {
    pub const Internal = objc.ExternClass("NSURLSessionDownloadTask", @This(), URLSessionTask, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn progress(_self: *@This()) ?*Progress {
        return objc.msgSend(_self, "progress", ?*Progress, .{});
    }

    pub fn cancel(_self: *@This()) void {
        return objc.msgSend(_self, "cancel", void, .{});
    }

    pub fn @"suspend"(_self: *@This()) void {
        return objc.msgSend(_self, "suspend", void, .{});
    }

    pub fn @"resume"(_self: *@This()) void {
        return objc.msgSend(_self, "resume", void, .{});
    }

    pub fn taskIdentifier(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "taskIdentifier", objc.NSUInteger, .{});
    }

    pub fn originalRequest(_self: *@This()) ?*URLRequest {
        return objc.msgSend(_self, "originalRequest", ?*URLRequest, .{});
    }

    pub fn currentRequest(_self: *@This()) ?*URLRequest {
        return objc.msgSend(_self, "currentRequest", ?*URLRequest, .{});
    }

    pub fn response(_self: *@This()) ?*URLResponse {
        return objc.msgSend(_self, "response", ?*URLResponse, .{});
    }

    pub fn delegate(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "delegate", ?*anyopaque, .{});
    }

    pub fn setDelegate(_self: *@This(), _delegate: ?*anyopaque) void {
        return objc.msgSend(_self, "setDelegate:", void, .{_delegate});
    }

    pub fn earliestBeginDate(_self: *@This()) ?*Date {
        return objc.msgSend(_self, "earliestBeginDate", ?*Date, .{});
    }

    pub fn setEarliestBeginDate(_self: *@This(), _earliestBeginDate: ?*Date) void {
        return objc.msgSend(_self, "setEarliestBeginDate:", void, .{_earliestBeginDate});
    }

    pub fn countOfBytesClientExpectsToSend(_self: *@This()) objc.int64_t {
        return objc.msgSend(_self, "countOfBytesClientExpectsToSend", objc.int64_t, .{});
    }

    pub fn setCountOfBytesClientExpectsToSend(_self: *@This(), _countOfBytesClientExpectsToSend: objc.int64_t) void {
        return objc.msgSend(_self, "setCountOfBytesClientExpectsToSend:", void, .{_countOfBytesClientExpectsToSend});
    }

    pub fn countOfBytesClientExpectsToReceive(_self: *@This()) objc.int64_t {
        return objc.msgSend(_self, "countOfBytesClientExpectsToReceive", objc.int64_t, .{});
    }

    pub fn setCountOfBytesClientExpectsToReceive(_self: *@This(), _countOfBytesClientExpectsToReceive: objc.int64_t) void {
        return objc.msgSend(_self, "setCountOfBytesClientExpectsToReceive:", void, .{_countOfBytesClientExpectsToReceive});
    }

    pub fn countOfBytesSent(_self: *@This()) objc.int64_t {
        return objc.msgSend(_self, "countOfBytesSent", objc.int64_t, .{});
    }

    pub fn countOfBytesReceived(_self: *@This()) objc.int64_t {
        return objc.msgSend(_self, "countOfBytesReceived", objc.int64_t, .{});
    }

    pub fn countOfBytesExpectedToSend(_self: *@This()) objc.int64_t {
        return objc.msgSend(_self, "countOfBytesExpectedToSend", objc.int64_t, .{});
    }

    pub fn countOfBytesExpectedToReceive(_self: *@This()) objc.int64_t {
        return objc.msgSend(_self, "countOfBytesExpectedToReceive", objc.int64_t, .{});
    }

    pub fn taskDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "taskDescription", ?*String, .{});
    }

    pub fn setTaskDescription(_self: *@This(), _taskDescription: ?*String) void {
        return objc.msgSend(_self, "setTaskDescription:", void, .{_taskDescription});
    }

    pub fn state(_self: *@This()) URLSessionTaskState {
        return objc.msgSend(_self, "state", URLSessionTaskState, .{});
    }

    pub fn @"error"(_self: *@This()) ?*Error {
        return objc.msgSend(_self, "error", ?*Error, .{});
    }

    pub fn priority(_self: *@This()) f32 {
        return objc.msgSend(_self, "priority", f32, .{});
    }

    pub fn setPriority(_self: *@This(), _priority: f32) void {
        return objc.msgSend(_self, "setPriority:", void, .{_priority});
    }

    pub fn prefersIncrementalDelivery(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "prefersIncrementalDelivery", objc.BOOL, .{});
    }

    pub fn setPrefersIncrementalDelivery(_self: *@This(), _prefersIncrementalDelivery: objc.BOOL) void {
        return objc.msgSend(_self, "setPrefersIncrementalDelivery:", void, .{_prefersIncrementalDelivery});
    }

    pub fn cancelByProducingResumeData(_self: *@This(), _completionHandler: *const fn (?*Data) callconv(.C) void) void {
        return objc.msgSend(_self, "cancelByProducingResumeData:", void, .{_completionHandler});
    }
};

/// https://developer.apple.com/documentation/Foundation/NSURLSessionStreamTask?language=objc
pub const URLSessionStreamTask = opaque {
    pub const Internal = objc.ExternClass("NSURLSessionStreamTask", @This(), URLSessionTask, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn progress(_self: *@This()) ?*Progress {
        return objc.msgSend(_self, "progress", ?*Progress, .{});
    }

    pub fn cancel(_self: *@This()) void {
        return objc.msgSend(_self, "cancel", void, .{});
    }

    pub fn @"suspend"(_self: *@This()) void {
        return objc.msgSend(_self, "suspend", void, .{});
    }

    pub fn @"resume"(_self: *@This()) void {
        return objc.msgSend(_self, "resume", void, .{});
    }

    pub fn taskIdentifier(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "taskIdentifier", objc.NSUInteger, .{});
    }

    pub fn originalRequest(_self: *@This()) ?*URLRequest {
        return objc.msgSend(_self, "originalRequest", ?*URLRequest, .{});
    }

    pub fn currentRequest(_self: *@This()) ?*URLRequest {
        return objc.msgSend(_self, "currentRequest", ?*URLRequest, .{});
    }

    pub fn response(_self: *@This()) ?*URLResponse {
        return objc.msgSend(_self, "response", ?*URLResponse, .{});
    }

    pub fn delegate(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "delegate", ?*anyopaque, .{});
    }

    pub fn setDelegate(_self: *@This(), _delegate: ?*anyopaque) void {
        return objc.msgSend(_self, "setDelegate:", void, .{_delegate});
    }

    pub fn earliestBeginDate(_self: *@This()) ?*Date {
        return objc.msgSend(_self, "earliestBeginDate", ?*Date, .{});
    }

    pub fn setEarliestBeginDate(_self: *@This(), _earliestBeginDate: ?*Date) void {
        return objc.msgSend(_self, "setEarliestBeginDate:", void, .{_earliestBeginDate});
    }

    pub fn countOfBytesClientExpectsToSend(_self: *@This()) objc.int64_t {
        return objc.msgSend(_self, "countOfBytesClientExpectsToSend", objc.int64_t, .{});
    }

    pub fn setCountOfBytesClientExpectsToSend(_self: *@This(), _countOfBytesClientExpectsToSend: objc.int64_t) void {
        return objc.msgSend(_self, "setCountOfBytesClientExpectsToSend:", void, .{_countOfBytesClientExpectsToSend});
    }

    pub fn countOfBytesClientExpectsToReceive(_self: *@This()) objc.int64_t {
        return objc.msgSend(_self, "countOfBytesClientExpectsToReceive", objc.int64_t, .{});
    }

    pub fn setCountOfBytesClientExpectsToReceive(_self: *@This(), _countOfBytesClientExpectsToReceive: objc.int64_t) void {
        return objc.msgSend(_self, "setCountOfBytesClientExpectsToReceive:", void, .{_countOfBytesClientExpectsToReceive});
    }

    pub fn countOfBytesSent(_self: *@This()) objc.int64_t {
        return objc.msgSend(_self, "countOfBytesSent", objc.int64_t, .{});
    }

    pub fn countOfBytesReceived(_self: *@This()) objc.int64_t {
        return objc.msgSend(_self, "countOfBytesReceived", objc.int64_t, .{});
    }

    pub fn countOfBytesExpectedToSend(_self: *@This()) objc.int64_t {
        return objc.msgSend(_self, "countOfBytesExpectedToSend", objc.int64_t, .{});
    }

    pub fn countOfBytesExpectedToReceive(_self: *@This()) objc.int64_t {
        return objc.msgSend(_self, "countOfBytesExpectedToReceive", objc.int64_t, .{});
    }

    pub fn taskDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "taskDescription", ?*String, .{});
    }

    pub fn setTaskDescription(_self: *@This(), _taskDescription: ?*String) void {
        return objc.msgSend(_self, "setTaskDescription:", void, .{_taskDescription});
    }

    pub fn state(_self: *@This()) URLSessionTaskState {
        return objc.msgSend(_self, "state", URLSessionTaskState, .{});
    }

    pub fn @"error"(_self: *@This()) ?*Error {
        return objc.msgSend(_self, "error", ?*Error, .{});
    }

    pub fn priority(_self: *@This()) f32 {
        return objc.msgSend(_self, "priority", f32, .{});
    }

    pub fn setPriority(_self: *@This(), _priority: f32) void {
        return objc.msgSend(_self, "setPriority:", void, .{_priority});
    }

    pub fn prefersIncrementalDelivery(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "prefersIncrementalDelivery", objc.BOOL, .{});
    }

    pub fn setPrefersIncrementalDelivery(_self: *@This(), _prefersIncrementalDelivery: objc.BOOL) void {
        return objc.msgSend(_self, "setPrefersIncrementalDelivery:", void, .{_prefersIncrementalDelivery});
    }

    pub fn readDataOfMinLengthMaxLengthTimeoutCompletionHandler(
        _self: *@This(),
        _minBytes: objc.NSUInteger,
        _maxBytes: objc.NSUInteger,
        _timeout: TimeInterval,
        _completionHandler: *const fn (?*Data, objc.BOOL, ?*Error) callconv(.C) void,
    ) void {
        return objc.msgSend(_self, "readDataOfMinLength:maxLength:timeout:completionHandler:", void, .{
            _minBytes,
            _maxBytes,
            _timeout,
            _completionHandler,
        });
    }

    pub fn writeDataTimeoutCompletionHandler(_self: *@This(), _data: ?*Data, _timeout: TimeInterval, _completionHandler: *const fn (?*Error) callconv(.C) void) void {
        return objc.msgSend(_self, "writeData:timeout:completionHandler:", void, .{ _data, _timeout, _completionHandler });
    }

    pub fn captureStreams(_self: *@This()) void {
        return objc.msgSend(_self, "captureStreams", void, .{});
    }

    pub fn closeWrite(_self: *@This()) void {
        return objc.msgSend(_self, "closeWrite", void, .{});
    }

    pub fn closeRead(_self: *@This()) void {
        return objc.msgSend(_self, "closeRead", void, .{});
    }

    pub fn startSecureConnection(_self: *@This()) void {
        return objc.msgSend(_self, "startSecureConnection", void, .{});
    }

    pub fn stopSecureConnection(_self: *@This()) void {
        return objc.msgSend(_self, "stopSecureConnection", void, .{});
    }
};

pub const URLSessionWebSocketMessageType = objc.NSInteger;
pub const URLSessionWebSocketMessageType_Data: objc.NSInteger = 0;
pub const URLSessionWebSocketMessageType_String: objc.NSInteger = 1;

/// https://developer.apple.com/documentation/Foundation/NSURLSessionWebSocketMessage?language=objc
pub const URLSessionWebSocketMessage = opaque {
    pub const Internal = objc.ExternClass("NSURLSessionWebSocketMessage", @This(), objc.NSObject, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn initWithData(_self: *@This(), _data: ?*Data) *@This() {
        return objc.msgSend(_self, "initWithData:", *@This(), .{_data});
    }

    pub fn initWithString(_self: *@This(), _string: ?*String) *@This() {
        return objc.msgSend(_self, "initWithString:", *@This(), .{_string});
    }

    pub fn @"type"(_self: *@This()) URLSessionWebSocketMessageType {
        return objc.msgSend(_self, "type", URLSessionWebSocketMessageType, .{});
    }

    pub fn data(_self: *@This()) ?*Data {
        return objc.msgSend(_self, "data", ?*Data, .{});
    }

    pub fn string(_self: *@This()) ?*String {
        return objc.msgSend(_self, "string", ?*String, .{});
    }
};

pub const URLSessionWebSocketCloseCode = objc.NSInteger;
pub const URLSessionWebSocketCloseCode_Invalid: objc.NSInteger = 0;
pub const URLSessionWebSocketCloseCode_NormalClosure: objc.NSInteger = 1000;
pub const URLSessionWebSocketCloseCode_GoingAway: objc.NSInteger = 1001;
pub const URLSessionWebSocketCloseCode_ProtocolError: objc.NSInteger = 1002;
pub const URLSessionWebSocketCloseCode_UnsupportedData: objc.NSInteger = 1003;
pub const URLSessionWebSocketCloseCode_NoStatusReceived: objc.NSInteger = 1005;
pub const URLSessionWebSocketCloseCode_AbnormalClosure: objc.NSInteger = 1006;
pub const URLSessionWebSocketCloseCode_InvalidFramePayloadData: objc.NSInteger = 1007;
pub const URLSessionWebSocketCloseCode_PolicyViolation: objc.NSInteger = 1008;
pub const URLSessionWebSocketCloseCode_MessageTooBig: objc.NSInteger = 1009;
pub const URLSessionWebSocketCloseCode_MandatoryExtensionMissing: objc.NSInteger = 1010;
pub const URLSessionWebSocketCloseCode_InternalServerError: objc.NSInteger = 1011;
pub const URLSessionWebSocketCloseCode_TLSHandshakeFailure: objc.NSInteger = 1015;

/// https://developer.apple.com/documentation/Foundation/NSURLSessionWebSocketTask?language=objc
pub const URLSessionWebSocketTask = opaque {
    pub const Internal = objc.ExternClass("NSURLSessionWebSocketTask", @This(), URLSessionTask, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn progress(_self: *@This()) ?*Progress {
        return objc.msgSend(_self, "progress", ?*Progress, .{});
    }

    pub fn cancel(_self: *@This()) void {
        return objc.msgSend(_self, "cancel", void, .{});
    }

    pub fn @"suspend"(_self: *@This()) void {
        return objc.msgSend(_self, "suspend", void, .{});
    }

    pub fn @"resume"(_self: *@This()) void {
        return objc.msgSend(_self, "resume", void, .{});
    }

    pub fn taskIdentifier(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "taskIdentifier", objc.NSUInteger, .{});
    }

    pub fn originalRequest(_self: *@This()) ?*URLRequest {
        return objc.msgSend(_self, "originalRequest", ?*URLRequest, .{});
    }

    pub fn currentRequest(_self: *@This()) ?*URLRequest {
        return objc.msgSend(_self, "currentRequest", ?*URLRequest, .{});
    }

    pub fn response(_self: *@This()) ?*URLResponse {
        return objc.msgSend(_self, "response", ?*URLResponse, .{});
    }

    pub fn delegate(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "delegate", ?*anyopaque, .{});
    }

    pub fn setDelegate(_self: *@This(), _delegate: ?*anyopaque) void {
        return objc.msgSend(_self, "setDelegate:", void, .{_delegate});
    }

    pub fn earliestBeginDate(_self: *@This()) ?*Date {
        return objc.msgSend(_self, "earliestBeginDate", ?*Date, .{});
    }

    pub fn setEarliestBeginDate(_self: *@This(), _earliestBeginDate: ?*Date) void {
        return objc.msgSend(_self, "setEarliestBeginDate:", void, .{_earliestBeginDate});
    }

    pub fn countOfBytesClientExpectsToSend(_self: *@This()) objc.int64_t {
        return objc.msgSend(_self, "countOfBytesClientExpectsToSend", objc.int64_t, .{});
    }

    pub fn setCountOfBytesClientExpectsToSend(_self: *@This(), _countOfBytesClientExpectsToSend: objc.int64_t) void {
        return objc.msgSend(_self, "setCountOfBytesClientExpectsToSend:", void, .{_countOfBytesClientExpectsToSend});
    }

    pub fn countOfBytesClientExpectsToReceive(_self: *@This()) objc.int64_t {
        return objc.msgSend(_self, "countOfBytesClientExpectsToReceive", objc.int64_t, .{});
    }

    pub fn setCountOfBytesClientExpectsToReceive(_self: *@This(), _countOfBytesClientExpectsToReceive: objc.int64_t) void {
        return objc.msgSend(_self, "setCountOfBytesClientExpectsToReceive:", void, .{_countOfBytesClientExpectsToReceive});
    }

    pub fn countOfBytesSent(_self: *@This()) objc.int64_t {
        return objc.msgSend(_self, "countOfBytesSent", objc.int64_t, .{});
    }

    pub fn countOfBytesReceived(_self: *@This()) objc.int64_t {
        return objc.msgSend(_self, "countOfBytesReceived", objc.int64_t, .{});
    }

    pub fn countOfBytesExpectedToSend(_self: *@This()) objc.int64_t {
        return objc.msgSend(_self, "countOfBytesExpectedToSend", objc.int64_t, .{});
    }

    pub fn countOfBytesExpectedToReceive(_self: *@This()) objc.int64_t {
        return objc.msgSend(_self, "countOfBytesExpectedToReceive", objc.int64_t, .{});
    }

    pub fn taskDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "taskDescription", ?*String, .{});
    }

    pub fn setTaskDescription(_self: *@This(), _taskDescription: ?*String) void {
        return objc.msgSend(_self, "setTaskDescription:", void, .{_taskDescription});
    }

    pub fn state(_self: *@This()) URLSessionTaskState {
        return objc.msgSend(_self, "state", URLSessionTaskState, .{});
    }

    pub fn @"error"(_self: *@This()) ?*Error {
        return objc.msgSend(_self, "error", ?*Error, .{});
    }

    pub fn priority(_self: *@This()) f32 {
        return objc.msgSend(_self, "priority", f32, .{});
    }

    pub fn setPriority(_self: *@This(), _priority: f32) void {
        return objc.msgSend(_self, "setPriority:", void, .{_priority});
    }

    pub fn prefersIncrementalDelivery(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "prefersIncrementalDelivery", objc.BOOL, .{});
    }

    pub fn setPrefersIncrementalDelivery(_self: *@This(), _prefersIncrementalDelivery: objc.BOOL) void {
        return objc.msgSend(_self, "setPrefersIncrementalDelivery:", void, .{_prefersIncrementalDelivery});
    }

    pub fn sendMessageCompletionHandler(_self: *@This(), _message: ?*URLSessionWebSocketMessage, _completionHandler: *const fn (?*Error) callconv(.C) void) void {
        return objc.msgSend(_self, "sendMessage:completionHandler:", void, .{ _message, _completionHandler });
    }

    pub fn receiveMessageWithCompletionHandler(_self: *@This(), _completionHandler: *const fn (?*URLSessionWebSocketMessage, ?*Error) callconv(.C) void) void {
        return objc.msgSend(_self, "receiveMessageWithCompletionHandler:", void, .{_completionHandler});
    }

    pub fn sendPingWithPongReceiveHandler(_self: *@This(), _pongReceiveHandler: *const fn (?*Error) callconv(.C) void) void {
        return objc.msgSend(_self, "sendPingWithPongReceiveHandler:", void, .{_pongReceiveHandler});
    }

    pub fn cancelWithCloseCodeReason(_self: *@This(), _closeCode: URLSessionWebSocketCloseCode, _reason: ?*Data) void {
        return objc.msgSend(_self, "cancelWithCloseCode:reason:", void, .{ _closeCode, _reason });
    }

    pub fn maximumMessageSize(_self: *@This()) objc.NSInteger {
        return objc.msgSend(_self, "maximumMessageSize", objc.NSInteger, .{});
    }

    pub fn setMaximumMessageSize(_self: *@This(), _maximumMessageSize: objc.NSInteger) void {
        return objc.msgSend(_self, "setMaximumMessageSize:", void, .{_maximumMessageSize});
    }

    pub fn closeCode(_self: *@This()) URLSessionWebSocketCloseCode {
        return objc.msgSend(_self, "closeCode", URLSessionWebSocketCloseCode, .{});
    }

    pub fn closeReason(_self: *@This()) ?*Data {
        return objc.msgSend(_self, "closeReason", ?*Data, .{});
    }
};

pub const URLSessionMultipathServiceType = objc.NSInteger;
pub const URLSessionMultipathServiceType_None: objc.NSInteger = 0;
pub const URLSessionMultipathServiceType_Handover: objc.NSInteger = 1;
pub const URLSessionMultipathServiceType_Interactive: objc.NSInteger = 2;
pub const URLSessionMultipathServiceType_Aggregate: objc.NSInteger = 3;

/// https://developer.apple.com/documentation/Foundation/NSURLSessionConfiguration?language=objc
pub const URLSessionConfiguration = opaque {
    pub const Internal = objc.ExternClass("NSURLSessionConfiguration", @This(), objc.NSObject, &.{Copying});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn backgroundSessionConfigurationWithIdentifier(_identifier: ?*String) ?*URLSessionConfiguration {
        return objc.msgSend(Internal.class(), "backgroundSessionConfigurationWithIdentifier:", ?*URLSessionConfiguration, .{_identifier});
    }

    pub fn defaultSessionConfiguration() ?*URLSessionConfiguration {
        return objc.msgSend(Internal.class(), "defaultSessionConfiguration", ?*URLSessionConfiguration, .{});
    }

    pub fn ephemeralSessionConfiguration() ?*URLSessionConfiguration {
        return objc.msgSend(Internal.class(), "ephemeralSessionConfiguration", ?*URLSessionConfiguration, .{});
    }

    pub fn identifier(_self: *@This()) ?*String {
        return objc.msgSend(_self, "identifier", ?*String, .{});
    }

    pub fn requestCachePolicy(_self: *@This()) URLRequestCachePolicy {
        return objc.msgSend(_self, "requestCachePolicy", URLRequestCachePolicy, .{});
    }

    pub fn setRequestCachePolicy(_self: *@This(), _requestCachePolicy: URLRequestCachePolicy) void {
        return objc.msgSend(_self, "setRequestCachePolicy:", void, .{_requestCachePolicy});
    }

    pub fn timeoutIntervalForRequest(_self: *@This()) TimeInterval {
        return objc.msgSend(_self, "timeoutIntervalForRequest", TimeInterval, .{});
    }

    pub fn setTimeoutIntervalForRequest(_self: *@This(), _timeoutIntervalForRequest: TimeInterval) void {
        return objc.msgSend(_self, "setTimeoutIntervalForRequest:", void, .{_timeoutIntervalForRequest});
    }

    pub fn timeoutIntervalForResource(_self: *@This()) TimeInterval {
        return objc.msgSend(_self, "timeoutIntervalForResource", TimeInterval, .{});
    }

    pub fn setTimeoutIntervalForResource(_self: *@This(), _timeoutIntervalForResource: TimeInterval) void {
        return objc.msgSend(_self, "setTimeoutIntervalForResource:", void, .{_timeoutIntervalForResource});
    }

    pub fn networkServiceType(_self: *@This()) URLRequestNetworkServiceType {
        return objc.msgSend(_self, "networkServiceType", URLRequestNetworkServiceType, .{});
    }

    pub fn setNetworkServiceType(_self: *@This(), _networkServiceType: URLRequestNetworkServiceType) void {
        return objc.msgSend(_self, "setNetworkServiceType:", void, .{_networkServiceType});
    }

    pub fn allowsCellularAccess(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsCellularAccess", objc.BOOL, .{});
    }

    pub fn setAllowsCellularAccess(_self: *@This(), _allowsCellularAccess: objc.BOOL) void {
        return objc.msgSend(_self, "setAllowsCellularAccess:", void, .{_allowsCellularAccess});
    }

    pub fn allowsExpensiveNetworkAccess(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsExpensiveNetworkAccess", objc.BOOL, .{});
    }

    pub fn setAllowsExpensiveNetworkAccess(_self: *@This(), _allowsExpensiveNetworkAccess: objc.BOOL) void {
        return objc.msgSend(_self, "setAllowsExpensiveNetworkAccess:", void, .{_allowsExpensiveNetworkAccess});
    }

    pub fn allowsConstrainedNetworkAccess(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsConstrainedNetworkAccess", objc.BOOL, .{});
    }

    pub fn setAllowsConstrainedNetworkAccess(_self: *@This(), _allowsConstrainedNetworkAccess: objc.BOOL) void {
        return objc.msgSend(_self, "setAllowsConstrainedNetworkAccess:", void, .{_allowsConstrainedNetworkAccess});
    }

    pub fn requiresDNSSECValidation(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "requiresDNSSECValidation", objc.BOOL, .{});
    }

    pub fn setRequiresDNSSECValidation(_self: *@This(), _requiresDNSSECValidation: objc.BOOL) void {
        return objc.msgSend(_self, "setRequiresDNSSECValidation:", void, .{_requiresDNSSECValidation});
    }

    pub fn waitsForConnectivity(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "waitsForConnectivity", objc.BOOL, .{});
    }

    pub fn setWaitsForConnectivity(_self: *@This(), _waitsForConnectivity: objc.BOOL) void {
        return objc.msgSend(_self, "setWaitsForConnectivity:", void, .{_waitsForConnectivity});
    }

    pub fn isDiscretionary(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isDiscretionary", objc.BOOL, .{});
    }

    pub fn setDiscretionary(_self: *@This(), _discretionary: objc.BOOL) void {
        return objc.msgSend(_self, "setDiscretionary:", void, .{_discretionary});
    }

    pub fn sharedContainerIdentifier(_self: *@This()) ?*String {
        return objc.msgSend(_self, "sharedContainerIdentifier", ?*String, .{});
    }

    pub fn setSharedContainerIdentifier(_self: *@This(), _sharedContainerIdentifier: ?*String) void {
        return objc.msgSend(_self, "setSharedContainerIdentifier:", void, .{_sharedContainerIdentifier});
    }

    pub fn sessionSendsLaunchEvents(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "sessionSendsLaunchEvents", objc.BOOL, .{});
    }

    pub fn setSessionSendsLaunchEvents(_self: *@This(), _sessionSendsLaunchEvents: objc.BOOL) void {
        return objc.msgSend(_self, "setSessionSendsLaunchEvents:", void, .{_sessionSendsLaunchEvents});
    }

    pub fn connectionProxyDictionary(_self: *@This()) ?*Dictionary {
        return objc.msgSend(_self, "connectionProxyDictionary", ?*Dictionary, .{});
    }

    pub fn setConnectionProxyDictionary(_self: *@This(), _connectionProxyDictionary: ?*Dictionary) void {
        return objc.msgSend(_self, "setConnectionProxyDictionary:", void, .{_connectionProxyDictionary});
    }

    pub fn tlsMinimumSupportedProtocol(_self: *@This()) security.SSLProtocol {
        return objc.msgSend(_self, "TLSMinimumSupportedProtocol", security.SSLProtocol, .{});
    }

    pub fn setTLSMinimumSupportedProtocol(_self: *@This(), _TLSMinimumSupportedProtocol: security.SSLProtocol) void {
        return objc.msgSend(_self, "setTLSMinimumSupportedProtocol:", void, .{_TLSMinimumSupportedProtocol});
    }

    pub fn tlsMaximumSupportedProtocol(_self: *@This()) security.SSLProtocol {
        return objc.msgSend(_self, "TLSMaximumSupportedProtocol", security.SSLProtocol, .{});
    }

    pub fn setTLSMaximumSupportedProtocol(_self: *@This(), _TLSMaximumSupportedProtocol: security.SSLProtocol) void {
        return objc.msgSend(_self, "setTLSMaximumSupportedProtocol:", void, .{_TLSMaximumSupportedProtocol});
    }

    pub fn tlsMinimumSupportedProtocolVersion(_self: *@This()) security.tls_protocol_version_t {
        return objc.msgSend(_self, "TLSMinimumSupportedProtocolVersion", security.tls_protocol_version_t, .{});
    }

    pub fn setTLSMinimumSupportedProtocolVersion(_self: *@This(), _TLSMinimumSupportedProtocolVersion: security.tls_protocol_version_t) void {
        return objc.msgSend(_self, "setTLSMinimumSupportedProtocolVersion:", void, .{_TLSMinimumSupportedProtocolVersion});
    }

    pub fn tlsMaximumSupportedProtocolVersion(_self: *@This()) security.tls_protocol_version_t {
        return objc.msgSend(_self, "TLSMaximumSupportedProtocolVersion", security.tls_protocol_version_t, .{});
    }

    pub fn setTLSMaximumSupportedProtocolVersion(_self: *@This(), _TLSMaximumSupportedProtocolVersion: security.tls_protocol_version_t) void {
        return objc.msgSend(_self, "setTLSMaximumSupportedProtocolVersion:", void, .{_TLSMaximumSupportedProtocolVersion});
    }

    pub fn httpShouldUsePipelining(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "HTTPShouldUsePipelining", objc.BOOL, .{});
    }

    pub fn setHTTPShouldUsePipelining(_self: *@This(), _HTTPShouldUsePipelining: objc.BOOL) void {
        return objc.msgSend(_self, "setHTTPShouldUsePipelining:", void, .{_HTTPShouldUsePipelining});
    }

    pub fn httpShouldSetCookies(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "HTTPShouldSetCookies", objc.BOOL, .{});
    }

    pub fn setHTTPShouldSetCookies(_self: *@This(), _HTTPShouldSetCookies: objc.BOOL) void {
        return objc.msgSend(_self, "setHTTPShouldSetCookies:", void, .{_HTTPShouldSetCookies});
    }

    pub fn httpCookieAcceptPolicy(_self: *@This()) HTTPCookieAcceptPolicy {
        return objc.msgSend(_self, "HTTPCookieAcceptPolicy", HTTPCookieAcceptPolicy, .{});
    }

    pub fn setHTTPCookieAcceptPolicy(_self: *@This(), _HTTPCookieAcceptPolicy: HTTPCookieAcceptPolicy) void {
        return objc.msgSend(_self, "setHTTPCookieAcceptPolicy:", void, .{_HTTPCookieAcceptPolicy});
    }

    pub fn httpAdditionalHeaders(_self: *@This()) ?*Dictionary {
        return objc.msgSend(_self, "HTTPAdditionalHeaders", ?*Dictionary, .{});
    }

    pub fn setHTTPAdditionalHeaders(_self: *@This(), _HTTPAdditionalHeaders: ?*Dictionary) void {
        return objc.msgSend(_self, "setHTTPAdditionalHeaders:", void, .{_HTTPAdditionalHeaders});
    }

    pub fn httpMaximumConnectionsPerHost(_self: *@This()) objc.NSInteger {
        return objc.msgSend(_self, "HTTPMaximumConnectionsPerHost", objc.NSInteger, .{});
    }

    pub fn setHTTPMaximumConnectionsPerHost(_self: *@This(), _HTTPMaximumConnectionsPerHost: objc.NSInteger) void {
        return objc.msgSend(_self, "setHTTPMaximumConnectionsPerHost:", void, .{_HTTPMaximumConnectionsPerHost});
    }

    pub fn httpCookieStorage(_self: *@This()) ?*HTTPCookieStorage {
        return objc.msgSend(_self, "HTTPCookieStorage", ?*HTTPCookieStorage, .{});
    }

    pub fn setHTTPCookieStorage(_self: *@This(), _HTTPCookieStorage: ?*HTTPCookieStorage) void {
        return objc.msgSend(_self, "setHTTPCookieStorage:", void, .{_HTTPCookieStorage});
    }

    pub fn urlCredentialStorage(_self: *@This()) ?*URLCredentialStorage {
        return objc.msgSend(_self, "URLCredentialStorage", ?*URLCredentialStorage, .{});
    }

    pub fn setURLCredentialStorage(_self: *@This(), _URLCredentialStorage: ?*URLCredentialStorage) void {
        return objc.msgSend(_self, "setURLCredentialStorage:", void, .{_URLCredentialStorage});
    }

    pub fn urlCache(_self: *@This()) ?*URLCache {
        return objc.msgSend(_self, "URLCache", ?*URLCache, .{});
    }

    pub fn setURLCache(_self: *@This(), _URLCache: ?*URLCache) void {
        return objc.msgSend(_self, "setURLCache:", void, .{_URLCache});
    }

    pub fn shouldUseExtendedBackgroundIdleMode(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "shouldUseExtendedBackgroundIdleMode", objc.BOOL, .{});
    }

    pub fn setShouldUseExtendedBackgroundIdleMode(_self: *@This(), _shouldUseExtendedBackgroundIdleMode: objc.BOOL) void {
        return objc.msgSend(_self, "setShouldUseExtendedBackgroundIdleMode:", void, .{_shouldUseExtendedBackgroundIdleMode});
    }

    pub fn protocolClasses(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "protocolClasses", ?*anyopaque, .{});
    }

    pub fn setProtocolClasses(_self: *@This(), _protocolClasses: ?*anyopaque) void {
        return objc.msgSend(_self, "setProtocolClasses:", void, .{_protocolClasses});
    }

    pub fn multipathServiceType(_self: *@This()) URLSessionMultipathServiceType {
        return objc.msgSend(_self, "multipathServiceType", URLSessionMultipathServiceType, .{});
    }

    pub fn setMultipathServiceType(_self: *@This(), _multipathServiceType: URLSessionMultipathServiceType) void {
        return objc.msgSend(_self, "setMultipathServiceType:", void, .{_multipathServiceType});
    }
};

pub const URLSessionDelayedRequestDisposition = objc.NSInteger;
pub const URLSessionDelayedRequestDisposition_ContinueLoading: objc.NSInteger = 0;
pub const URLSessionDelayedRequestDisposition_UseNewRequest: objc.NSInteger = 1;
pub const URLSessionDelayedRequestDisposition_Cancel: objc.NSInteger = 2;

pub const URLSessionAuthChallengeDisposition = objc.NSInteger;
pub const URLSessionAuthChallengeDisposition_UseCredential: objc.NSInteger = 0;
pub const URLSessionAuthChallengeDisposition_PerformDefaultHandling: objc.NSInteger = 1;
pub const URLSessionAuthChallengeDisposition_CancelAuthenticationChallenge: objc.NSInteger = 2;
pub const URLSessionAuthChallengeDisposition_RejectProtectionSpace: objc.NSInteger = 3;

pub const URLSessionResponseDisposition = objc.NSInteger;
pub const URLSessionResponseDisposition_Cancel: objc.NSInteger = 0;
pub const URLSessionResponseDisposition_Allow: objc.NSInteger = 1;
pub const URLSessionResponseDisposition_BecomeDownload: objc.NSInteger = 2;
pub const URLSessionResponseDisposition_BecomeStream: objc.NSInteger = 3;

/// https://developer.apple.com/documentation/Foundation/NSURLSessionDelegate?language=objc
pub const URLSessionDelegate = opaque {
    pub const Internal = objc.ExternProtocol(@This(), &.{objc.NSObject});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn urlSessionDidBecomeInvalidWithError(_self: *@This(), _session: ?*URLSession, _error: ?*Error) void {
        return objc.msgSend(_self, "URLSession:didBecomeInvalidWithError:", void, .{ _session, _error });
    }

    pub fn urlSessionDidReceiveChallengeCompletionHandler(_self: *@This(), _session: ?*URLSession, _challenge: ?*URLAuthenticationChallenge, _completionHandler: *const fn (URLSessionAuthChallengeDisposition, ?*URLCredential) callconv(.C) void) void {
        return objc.msgSend(_self, "URLSession:didReceiveChallenge:completionHandler:", void, .{ _session, _challenge, _completionHandler });
    }

    pub fn urlSessionDidFinishEventsForBackgroundURLSession(_self: *@This(), _session: ?*URLSession) void {
        return objc.msgSend(_self, "URLSessionDidFinishEventsForBackgroundURLSession:", void, .{_session});
    }
};

/// https://developer.apple.com/documentation/Foundation/NSURLSessionTaskDelegate?language=objc
pub const URLSessionTaskDelegate = opaque {
    pub const Internal = objc.ExternProtocol(@This(), &.{URLSessionDelegate});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn urlSessionDidBecomeInvalidWithError(_self: *@This(), _session: ?*URLSession, _error: ?*Error) void {
        return objc.msgSend(_self, "URLSession:didBecomeInvalidWithError:", void, .{ _session, _error });
    }

    pub fn urlSessionDidReceiveChallengeCompletionHandler(_self: *@This(), _session: ?*URLSession, _challenge: ?*URLAuthenticationChallenge, _completionHandler: *const fn (URLSessionAuthChallengeDisposition, ?*URLCredential) callconv(.C) void) void {
        return objc.msgSend(_self, "URLSession:didReceiveChallenge:completionHandler:", void, .{ _session, _challenge, _completionHandler });
    }

    pub fn urlSessionDidFinishEventsForBackgroundURLSession(_self: *@This(), _session: ?*URLSession) void {
        return objc.msgSend(_self, "URLSessionDidFinishEventsForBackgroundURLSession:", void, .{_session});
    }

    pub fn urlSessionDidCreateTask(_self: *@This(), _session: ?*URLSession, _task: ?*URLSessionTask) void {
        return objc.msgSend(_self, "URLSession:didCreateTask:", void, .{ _session, _task });
    }

    pub fn urlSessionTaskWillBeginDelayedRequestCompletionHandler(
        _self: *@This(),
        _session: ?*URLSession,
        _task: ?*URLSessionTask,
        _request: ?*URLRequest,
        _completionHandler: *const fn (URLSessionDelayedRequestDisposition, ?*URLRequest) callconv(.C) void,
    ) void {
        return objc.msgSend(_self, "URLSession:task:willBeginDelayedRequest:completionHandler:", void, .{
            _session,
            _task,
            _request,
            _completionHandler,
        });
    }

    pub fn urlSessionTaskIsWaitingForConnectivity(_self: *@This(), _session: ?*URLSession, _task: ?*URLSessionTask) void {
        return objc.msgSend(_self, "URLSession:taskIsWaitingForConnectivity:", void, .{ _session, _task });
    }

    pub fn urlSessionTaskWillPerformHTTPRedirectionNewRequestCompletionHandler(
        _self: *@This(),
        _session: ?*URLSession,
        _task: ?*URLSessionTask,
        _response: ?*HTTPURLResponse,
        _request: ?*URLRequest,
        _completionHandler: *const fn (?*URLRequest) callconv(.C) void,
    ) void {
        return objc.msgSend(_self, "URLSession:task:willPerformHTTPRedirection:newRequest:completionHandler:", void, .{
            _session,
            _task,
            _response,
            _request,
            _completionHandler,
        });
    }

    pub fn urlSessionTaskDidReceiveChallengeCompletionHandler(
        _self: *@This(),
        _session: ?*URLSession,
        _task: ?*URLSessionTask,
        _challenge: ?*URLAuthenticationChallenge,
        _completionHandler: *const fn (URLSessionAuthChallengeDisposition, ?*URLCredential) callconv(.C) void,
    ) void {
        return objc.msgSend(_self, "URLSession:task:didReceiveChallenge:completionHandler:", void, .{
            _session,
            _task,
            _challenge,
            _completionHandler,
        });
    }

    pub fn urlSessionTaskNeedNewBodyStream(_self: *@This(), _session: ?*URLSession, _task: ?*URLSessionTask, _completionHandler: *const fn (?*InputStream) callconv(.C) void) void {
        return objc.msgSend(_self, "URLSession:task:needNewBodyStream:", void, .{ _session, _task, _completionHandler });
    }

    pub fn urlSessionTaskNeedNewBodyStreamFromOffsetCompletionHandler(
        _self: *@This(),
        _session: ?*URLSession,
        _task: ?*URLSessionTask,
        _offset: objc.int64_t,
        _completionHandler: *const fn (?*InputStream) callconv(.C) void,
    ) void {
        return objc.msgSend(_self, "URLSession:task:needNewBodyStreamFromOffset:completionHandler:", void, .{
            _session,
            _task,
            _offset,
            _completionHandler,
        });
    }

    pub fn urlSessionTaskDidSendBodyDataTotalBytesSentTotalBytesExpectedToSend(
        _self: *@This(),
        _session: ?*URLSession,
        _task: ?*URLSessionTask,
        _bytesSent: objc.int64_t,
        _totalBytesSent: objc.int64_t,
        _totalBytesExpectedToSend: objc.int64_t,
    ) void {
        return objc.msgSend(_self, "URLSession:task:didSendBodyData:totalBytesSent:totalBytesExpectedToSend:", void, .{
            _session,
            _task,
            _bytesSent,
            _totalBytesSent,
            _totalBytesExpectedToSend,
        });
    }

    pub fn urlSessionTaskDidReceiveInformationalResponse(_self: *@This(), _session: ?*URLSession, _task: ?*URLSessionTask, _response: ?*HTTPURLResponse) void {
        return objc.msgSend(_self, "URLSession:task:didReceiveInformationalResponse:", void, .{ _session, _task, _response });
    }

    pub fn urlSessionTaskDidFinishCollectingMetrics(_self: *@This(), _session: ?*URLSession, _task: ?*URLSessionTask, _metrics: ?*URLSessionTaskMetrics) void {
        return objc.msgSend(_self, "URLSession:task:didFinishCollectingMetrics:", void, .{ _session, _task, _metrics });
    }

    pub fn urlSessionTaskDidCompleteWithError(_self: *@This(), _session: ?*URLSession, _task: ?*URLSessionTask, _error: ?*Error) void {
        return objc.msgSend(_self, "URLSession:task:didCompleteWithError:", void, .{ _session, _task, _error });
    }
};

/// https://developer.apple.com/documentation/Foundation/NSURLSessionDataDelegate?language=objc
pub const URLSessionDataDelegate = opaque {
    pub const Internal = objc.ExternProtocol(@This(), &.{URLSessionTaskDelegate});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn urlSessionDidBecomeInvalidWithError(_self: *@This(), _session: ?*URLSession, _error: ?*Error) void {
        return objc.msgSend(_self, "URLSession:didBecomeInvalidWithError:", void, .{ _session, _error });
    }

    pub fn urlSessionDidReceiveChallengeCompletionHandler(_self: *@This(), _session: ?*URLSession, _challenge: ?*URLAuthenticationChallenge, _completionHandler: *const fn (URLSessionAuthChallengeDisposition, ?*URLCredential) callconv(.C) void) void {
        return objc.msgSend(_self, "URLSession:didReceiveChallenge:completionHandler:", void, .{ _session, _challenge, _completionHandler });
    }

    pub fn urlSessionDidFinishEventsForBackgroundURLSession(_self: *@This(), _session: ?*URLSession) void {
        return objc.msgSend(_self, "URLSessionDidFinishEventsForBackgroundURLSession:", void, .{_session});
    }

    pub fn urlSessionDidCreateTask(_self: *@This(), _session: ?*URLSession, _task: ?*URLSessionTask) void {
        return objc.msgSend(_self, "URLSession:didCreateTask:", void, .{ _session, _task });
    }

    pub fn urlSessionTaskWillBeginDelayedRequestCompletionHandler(
        _self: *@This(),
        _session: ?*URLSession,
        _task: ?*URLSessionTask,
        _request: ?*URLRequest,
        _completionHandler: *const fn (URLSessionDelayedRequestDisposition, ?*URLRequest) callconv(.C) void,
    ) void {
        return objc.msgSend(_self, "URLSession:task:willBeginDelayedRequest:completionHandler:", void, .{
            _session,
            _task,
            _request,
            _completionHandler,
        });
    }

    pub fn urlSessionTaskIsWaitingForConnectivity(_self: *@This(), _session: ?*URLSession, _task: ?*URLSessionTask) void {
        return objc.msgSend(_self, "URLSession:taskIsWaitingForConnectivity:", void, .{ _session, _task });
    }

    pub fn urlSessionTaskWillPerformHTTPRedirectionNewRequestCompletionHandler(
        _self: *@This(),
        _session: ?*URLSession,
        _task: ?*URLSessionTask,
        _response: ?*HTTPURLResponse,
        _request: ?*URLRequest,
        _completionHandler: *const fn (?*URLRequest) callconv(.C) void,
    ) void {
        return objc.msgSend(_self, "URLSession:task:willPerformHTTPRedirection:newRequest:completionHandler:", void, .{
            _session,
            _task,
            _response,
            _request,
            _completionHandler,
        });
    }

    pub fn urlSessionTaskDidReceiveChallengeCompletionHandler(
        _self: *@This(),
        _session: ?*URLSession,
        _task: ?*URLSessionTask,
        _challenge: ?*URLAuthenticationChallenge,
        _completionHandler: *const fn (URLSessionAuthChallengeDisposition, ?*URLCredential) callconv(.C) void,
    ) void {
        return objc.msgSend(_self, "URLSession:task:didReceiveChallenge:completionHandler:", void, .{
            _session,
            _task,
            _challenge,
            _completionHandler,
        });
    }

    pub fn urlSessionTaskNeedNewBodyStream(_self: *@This(), _session: ?*URLSession, _task: ?*URLSessionTask, _completionHandler: *const fn (?*InputStream) callconv(.C) void) void {
        return objc.msgSend(_self, "URLSession:task:needNewBodyStream:", void, .{ _session, _task, _completionHandler });
    }

    pub fn urlSessionTaskNeedNewBodyStreamFromOffsetCompletionHandler(
        _self: *@This(),
        _session: ?*URLSession,
        _task: ?*URLSessionTask,
        _offset: objc.int64_t,
        _completionHandler: *const fn (?*InputStream) callconv(.C) void,
    ) void {
        return objc.msgSend(_self, "URLSession:task:needNewBodyStreamFromOffset:completionHandler:", void, .{
            _session,
            _task,
            _offset,
            _completionHandler,
        });
    }

    pub fn urlSessionTaskDidSendBodyDataTotalBytesSentTotalBytesExpectedToSend(
        _self: *@This(),
        _session: ?*URLSession,
        _task: ?*URLSessionTask,
        _bytesSent: objc.int64_t,
        _totalBytesSent: objc.int64_t,
        _totalBytesExpectedToSend: objc.int64_t,
    ) void {
        return objc.msgSend(_self, "URLSession:task:didSendBodyData:totalBytesSent:totalBytesExpectedToSend:", void, .{
            _session,
            _task,
            _bytesSent,
            _totalBytesSent,
            _totalBytesExpectedToSend,
        });
    }

    pub fn urlSessionTaskDidReceiveInformationalResponse(_self: *@This(), _session: ?*URLSession, _task: ?*URLSessionTask, _response: ?*HTTPURLResponse) void {
        return objc.msgSend(_self, "URLSession:task:didReceiveInformationalResponse:", void, .{ _session, _task, _response });
    }

    pub fn urlSessionTaskDidFinishCollectingMetrics(_self: *@This(), _session: ?*URLSession, _task: ?*URLSessionTask, _metrics: ?*URLSessionTaskMetrics) void {
        return objc.msgSend(_self, "URLSession:task:didFinishCollectingMetrics:", void, .{ _session, _task, _metrics });
    }

    pub fn urlSessionTaskDidCompleteWithError(_self: *@This(), _session: ?*URLSession, _task: ?*URLSessionTask, _error: ?*Error) void {
        return objc.msgSend(_self, "URLSession:task:didCompleteWithError:", void, .{ _session, _task, _error });
    }

    pub fn urlSessionDataTaskDidReceiveResponseCompletionHandler(
        _self: *@This(),
        _session: ?*URLSession,
        _dataTask: ?*URLSessionDataTask,
        _response: ?*URLResponse,
        _completionHandler: *const fn (URLSessionResponseDisposition) callconv(.C) void,
    ) void {
        return objc.msgSend(_self, "URLSession:dataTask:didReceiveResponse:completionHandler:", void, .{
            _session,
            _dataTask,
            _response,
            _completionHandler,
        });
    }

    pub fn urlSessionDataTaskDidBecomeDownloadTask(_self: *@This(), _session: ?*URLSession, _dataTask: ?*URLSessionDataTask, _downloadTask: ?*URLSessionDownloadTask) void {
        return objc.msgSend(_self, "URLSession:dataTask:didBecomeDownloadTask:", void, .{ _session, _dataTask, _downloadTask });
    }

    pub fn urlSessionDataTaskDidBecomeStreamTask(_self: *@This(), _session: ?*URLSession, _dataTask: ?*URLSessionDataTask, _streamTask: ?*URLSessionStreamTask) void {
        return objc.msgSend(_self, "URLSession:dataTask:didBecomeStreamTask:", void, .{ _session, _dataTask, _streamTask });
    }

    pub fn urlSessionDataTaskDidReceiveData(_self: *@This(), _session: ?*URLSession, _dataTask: ?*URLSessionDataTask, _data: ?*Data) void {
        return objc.msgSend(_self, "URLSession:dataTask:didReceiveData:", void, .{ _session, _dataTask, _data });
    }

    pub fn urlSessionDataTaskWillCacheResponseCompletionHandler(
        _self: *@This(),
        _session: ?*URLSession,
        _dataTask: ?*URLSessionDataTask,
        _proposedResponse: ?*CachedURLResponse,
        _completionHandler: *const fn (?*CachedURLResponse) callconv(.C) void,
    ) void {
        return objc.msgSend(_self, "URLSession:dataTask:willCacheResponse:completionHandler:", void, .{
            _session,
            _dataTask,
            _proposedResponse,
            _completionHandler,
        });
    }
};

/// https://developer.apple.com/documentation/Foundation/NSURLSessionDownloadDelegate?language=objc
pub const URLSessionDownloadDelegate = opaque {
    pub const Internal = objc.ExternProtocol(@This(), &.{URLSessionTaskDelegate});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn urlSessionDidBecomeInvalidWithError(_self: *@This(), _session: ?*URLSession, _error: ?*Error) void {
        return objc.msgSend(_self, "URLSession:didBecomeInvalidWithError:", void, .{ _session, _error });
    }

    pub fn urlSessionDidReceiveChallengeCompletionHandler(_self: *@This(), _session: ?*URLSession, _challenge: ?*URLAuthenticationChallenge, _completionHandler: *const fn (URLSessionAuthChallengeDisposition, ?*URLCredential) callconv(.C) void) void {
        return objc.msgSend(_self, "URLSession:didReceiveChallenge:completionHandler:", void, .{ _session, _challenge, _completionHandler });
    }

    pub fn urlSessionDidFinishEventsForBackgroundURLSession(_self: *@This(), _session: ?*URLSession) void {
        return objc.msgSend(_self, "URLSessionDidFinishEventsForBackgroundURLSession:", void, .{_session});
    }

    pub fn urlSessionDidCreateTask(_self: *@This(), _session: ?*URLSession, _task: ?*URLSessionTask) void {
        return objc.msgSend(_self, "URLSession:didCreateTask:", void, .{ _session, _task });
    }

    pub fn urlSessionTaskWillBeginDelayedRequestCompletionHandler(
        _self: *@This(),
        _session: ?*URLSession,
        _task: ?*URLSessionTask,
        _request: ?*URLRequest,
        _completionHandler: *const fn (URLSessionDelayedRequestDisposition, ?*URLRequest) callconv(.C) void,
    ) void {
        return objc.msgSend(_self, "URLSession:task:willBeginDelayedRequest:completionHandler:", void, .{
            _session,
            _task,
            _request,
            _completionHandler,
        });
    }

    pub fn urlSessionTaskIsWaitingForConnectivity(_self: *@This(), _session: ?*URLSession, _task: ?*URLSessionTask) void {
        return objc.msgSend(_self, "URLSession:taskIsWaitingForConnectivity:", void, .{ _session, _task });
    }

    pub fn urlSessionTaskWillPerformHTTPRedirectionNewRequestCompletionHandler(
        _self: *@This(),
        _session: ?*URLSession,
        _task: ?*URLSessionTask,
        _response: ?*HTTPURLResponse,
        _request: ?*URLRequest,
        _completionHandler: *const fn (?*URLRequest) callconv(.C) void,
    ) void {
        return objc.msgSend(_self, "URLSession:task:willPerformHTTPRedirection:newRequest:completionHandler:", void, .{
            _session,
            _task,
            _response,
            _request,
            _completionHandler,
        });
    }

    pub fn urlSessionTaskDidReceiveChallengeCompletionHandler(
        _self: *@This(),
        _session: ?*URLSession,
        _task: ?*URLSessionTask,
        _challenge: ?*URLAuthenticationChallenge,
        _completionHandler: *const fn (URLSessionAuthChallengeDisposition, ?*URLCredential) callconv(.C) void,
    ) void {
        return objc.msgSend(_self, "URLSession:task:didReceiveChallenge:completionHandler:", void, .{
            _session,
            _task,
            _challenge,
            _completionHandler,
        });
    }

    pub fn urlSessionTaskNeedNewBodyStream(_self: *@This(), _session: ?*URLSession, _task: ?*URLSessionTask, _completionHandler: *const fn (?*InputStream) callconv(.C) void) void {
        return objc.msgSend(_self, "URLSession:task:needNewBodyStream:", void, .{ _session, _task, _completionHandler });
    }

    pub fn urlSessionTaskNeedNewBodyStreamFromOffsetCompletionHandler(
        _self: *@This(),
        _session: ?*URLSession,
        _task: ?*URLSessionTask,
        _offset: objc.int64_t,
        _completionHandler: *const fn (?*InputStream) callconv(.C) void,
    ) void {
        return objc.msgSend(_self, "URLSession:task:needNewBodyStreamFromOffset:completionHandler:", void, .{
            _session,
            _task,
            _offset,
            _completionHandler,
        });
    }

    pub fn urlSessionTaskDidSendBodyDataTotalBytesSentTotalBytesExpectedToSend(
        _self: *@This(),
        _session: ?*URLSession,
        _task: ?*URLSessionTask,
        _bytesSent: objc.int64_t,
        _totalBytesSent: objc.int64_t,
        _totalBytesExpectedToSend: objc.int64_t,
    ) void {
        return objc.msgSend(_self, "URLSession:task:didSendBodyData:totalBytesSent:totalBytesExpectedToSend:", void, .{
            _session,
            _task,
            _bytesSent,
            _totalBytesSent,
            _totalBytesExpectedToSend,
        });
    }

    pub fn urlSessionTaskDidReceiveInformationalResponse(_self: *@This(), _session: ?*URLSession, _task: ?*URLSessionTask, _response: ?*HTTPURLResponse) void {
        return objc.msgSend(_self, "URLSession:task:didReceiveInformationalResponse:", void, .{ _session, _task, _response });
    }

    pub fn urlSessionTaskDidFinishCollectingMetrics(_self: *@This(), _session: ?*URLSession, _task: ?*URLSessionTask, _metrics: ?*URLSessionTaskMetrics) void {
        return objc.msgSend(_self, "URLSession:task:didFinishCollectingMetrics:", void, .{ _session, _task, _metrics });
    }

    pub fn urlSessionTaskDidCompleteWithError(_self: *@This(), _session: ?*URLSession, _task: ?*URLSessionTask, _error: ?*Error) void {
        return objc.msgSend(_self, "URLSession:task:didCompleteWithError:", void, .{ _session, _task, _error });
    }

    pub fn urlSessionDownloadTaskDidFinishDownloadingToURL(_self: *@This(), _session: ?*URLSession, _downloadTask: ?*URLSessionDownloadTask, _location: ?*URL) void {
        return objc.msgSend(_self, "URLSession:downloadTask:didFinishDownloadingToURL:", void, .{ _session, _downloadTask, _location });
    }

    pub fn urlSessionDownloadTaskDidWriteDataTotalBytesWrittenTotalBytesExpectedToWrite(
        _self: *@This(),
        _session: ?*URLSession,
        _downloadTask: ?*URLSessionDownloadTask,
        _bytesWritten: objc.int64_t,
        _totalBytesWritten: objc.int64_t,
        _totalBytesExpectedToWrite: objc.int64_t,
    ) void {
        return objc.msgSend(_self, "URLSession:downloadTask:didWriteData:totalBytesWritten:totalBytesExpectedToWrite:", void, .{
            _session,
            _downloadTask,
            _bytesWritten,
            _totalBytesWritten,
            _totalBytesExpectedToWrite,
        });
    }

    pub fn urlSessionDownloadTaskDidResumeAtOffsetExpectedTotalBytes(
        _self: *@This(),
        _session: ?*URLSession,
        _downloadTask: ?*URLSessionDownloadTask,
        _fileOffset: objc.int64_t,
        _expectedTotalBytes: objc.int64_t,
    ) void {
        return objc.msgSend(_self, "URLSession:downloadTask:didResumeAtOffset:expectedTotalBytes:", void, .{
            _session,
            _downloadTask,
            _fileOffset,
            _expectedTotalBytes,
        });
    }
};

/// https://developer.apple.com/documentation/Foundation/NSURLSessionStreamDelegate?language=objc
pub const URLSessionStreamDelegate = opaque {
    pub const Internal = objc.ExternProtocol(@This(), &.{URLSessionTaskDelegate});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn urlSessionDidBecomeInvalidWithError(_self: *@This(), _session: ?*URLSession, _error: ?*Error) void {
        return objc.msgSend(_self, "URLSession:didBecomeInvalidWithError:", void, .{ _session, _error });
    }

    pub fn urlSessionDidReceiveChallengeCompletionHandler(_self: *@This(), _session: ?*URLSession, _challenge: ?*URLAuthenticationChallenge, _completionHandler: *const fn (URLSessionAuthChallengeDisposition, ?*URLCredential) callconv(.C) void) void {
        return objc.msgSend(_self, "URLSession:didReceiveChallenge:completionHandler:", void, .{ _session, _challenge, _completionHandler });
    }

    pub fn urlSessionDidFinishEventsForBackgroundURLSession(_self: *@This(), _session: ?*URLSession) void {
        return objc.msgSend(_self, "URLSessionDidFinishEventsForBackgroundURLSession:", void, .{_session});
    }

    pub fn urlSessionDidCreateTask(_self: *@This(), _session: ?*URLSession, _task: ?*URLSessionTask) void {
        return objc.msgSend(_self, "URLSession:didCreateTask:", void, .{ _session, _task });
    }

    pub fn urlSessionTaskWillBeginDelayedRequestCompletionHandler(
        _self: *@This(),
        _session: ?*URLSession,
        _task: ?*URLSessionTask,
        _request: ?*URLRequest,
        _completionHandler: *const fn (URLSessionDelayedRequestDisposition, ?*URLRequest) callconv(.C) void,
    ) void {
        return objc.msgSend(_self, "URLSession:task:willBeginDelayedRequest:completionHandler:", void, .{
            _session,
            _task,
            _request,
            _completionHandler,
        });
    }

    pub fn urlSessionTaskIsWaitingForConnectivity(_self: *@This(), _session: ?*URLSession, _task: ?*URLSessionTask) void {
        return objc.msgSend(_self, "URLSession:taskIsWaitingForConnectivity:", void, .{ _session, _task });
    }

    pub fn urlSessionTaskWillPerformHTTPRedirectionNewRequestCompletionHandler(
        _self: *@This(),
        _session: ?*URLSession,
        _task: ?*URLSessionTask,
        _response: ?*HTTPURLResponse,
        _request: ?*URLRequest,
        _completionHandler: *const fn (?*URLRequest) callconv(.C) void,
    ) void {
        return objc.msgSend(_self, "URLSession:task:willPerformHTTPRedirection:newRequest:completionHandler:", void, .{
            _session,
            _task,
            _response,
            _request,
            _completionHandler,
        });
    }

    pub fn urlSessionTaskDidReceiveChallengeCompletionHandler(
        _self: *@This(),
        _session: ?*URLSession,
        _task: ?*URLSessionTask,
        _challenge: ?*URLAuthenticationChallenge,
        _completionHandler: *const fn (URLSessionAuthChallengeDisposition, ?*URLCredential) callconv(.C) void,
    ) void {
        return objc.msgSend(_self, "URLSession:task:didReceiveChallenge:completionHandler:", void, .{
            _session,
            _task,
            _challenge,
            _completionHandler,
        });
    }

    pub fn urlSessionTaskNeedNewBodyStream(_self: *@This(), _session: ?*URLSession, _task: ?*URLSessionTask, _completionHandler: *const fn (?*InputStream) callconv(.C) void) void {
        return objc.msgSend(_self, "URLSession:task:needNewBodyStream:", void, .{ _session, _task, _completionHandler });
    }

    pub fn urlSessionTaskNeedNewBodyStreamFromOffsetCompletionHandler(
        _self: *@This(),
        _session: ?*URLSession,
        _task: ?*URLSessionTask,
        _offset: objc.int64_t,
        _completionHandler: *const fn (?*InputStream) callconv(.C) void,
    ) void {
        return objc.msgSend(_self, "URLSession:task:needNewBodyStreamFromOffset:completionHandler:", void, .{
            _session,
            _task,
            _offset,
            _completionHandler,
        });
    }

    pub fn urlSessionTaskDidSendBodyDataTotalBytesSentTotalBytesExpectedToSend(
        _self: *@This(),
        _session: ?*URLSession,
        _task: ?*URLSessionTask,
        _bytesSent: objc.int64_t,
        _totalBytesSent: objc.int64_t,
        _totalBytesExpectedToSend: objc.int64_t,
    ) void {
        return objc.msgSend(_self, "URLSession:task:didSendBodyData:totalBytesSent:totalBytesExpectedToSend:", void, .{
            _session,
            _task,
            _bytesSent,
            _totalBytesSent,
            _totalBytesExpectedToSend,
        });
    }

    pub fn urlSessionTaskDidReceiveInformationalResponse(_self: *@This(), _session: ?*URLSession, _task: ?*URLSessionTask, _response: ?*HTTPURLResponse) void {
        return objc.msgSend(_self, "URLSession:task:didReceiveInformationalResponse:", void, .{ _session, _task, _response });
    }

    pub fn urlSessionTaskDidFinishCollectingMetrics(_self: *@This(), _session: ?*URLSession, _task: ?*URLSessionTask, _metrics: ?*URLSessionTaskMetrics) void {
        return objc.msgSend(_self, "URLSession:task:didFinishCollectingMetrics:", void, .{ _session, _task, _metrics });
    }

    pub fn urlSessionTaskDidCompleteWithError(_self: *@This(), _session: ?*URLSession, _task: ?*URLSessionTask, _error: ?*Error) void {
        return objc.msgSend(_self, "URLSession:task:didCompleteWithError:", void, .{ _session, _task, _error });
    }

    pub fn urlSessionReadClosedForStreamTask(_self: *@This(), _session: ?*URLSession, _streamTask: ?*URLSessionStreamTask) void {
        return objc.msgSend(_self, "URLSession:readClosedForStreamTask:", void, .{ _session, _streamTask });
    }

    pub fn urlSessionWriteClosedForStreamTask(_self: *@This(), _session: ?*URLSession, _streamTask: ?*URLSessionStreamTask) void {
        return objc.msgSend(_self, "URLSession:writeClosedForStreamTask:", void, .{ _session, _streamTask });
    }

    pub fn urlSessionBetterRouteDiscoveredForStreamTask(_self: *@This(), _session: ?*URLSession, _streamTask: ?*URLSessionStreamTask) void {
        return objc.msgSend(_self, "URLSession:betterRouteDiscoveredForStreamTask:", void, .{ _session, _streamTask });
    }

    pub fn urlSessionStreamTaskDidBecomeInputStreamOutputStream(
        _self: *@This(),
        _session: ?*URLSession,
        _streamTask: ?*URLSessionStreamTask,
        _inputStream: ?*InputStream,
        _outputStream: ?*OutputStream,
    ) void {
        return objc.msgSend(_self, "URLSession:streamTask:didBecomeInputStream:outputStream:", void, .{
            _session,
            _streamTask,
            _inputStream,
            _outputStream,
        });
    }
};

/// https://developer.apple.com/documentation/Foundation/NSURLSessionWebSocketDelegate?language=objc
pub const URLSessionWebSocketDelegate = opaque {
    pub const Internal = objc.ExternProtocol(@This(), &.{URLSessionTaskDelegate});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn urlSessionDidBecomeInvalidWithError(_self: *@This(), _session: ?*URLSession, _error: ?*Error) void {
        return objc.msgSend(_self, "URLSession:didBecomeInvalidWithError:", void, .{ _session, _error });
    }

    pub fn urlSessionDidReceiveChallengeCompletionHandler(_self: *@This(), _session: ?*URLSession, _challenge: ?*URLAuthenticationChallenge, _completionHandler: *const fn (URLSessionAuthChallengeDisposition, ?*URLCredential) callconv(.C) void) void {
        return objc.msgSend(_self, "URLSession:didReceiveChallenge:completionHandler:", void, .{ _session, _challenge, _completionHandler });
    }

    pub fn urlSessionDidFinishEventsForBackgroundURLSession(_self: *@This(), _session: ?*URLSession) void {
        return objc.msgSend(_self, "URLSessionDidFinishEventsForBackgroundURLSession:", void, .{_session});
    }

    pub fn urlSessionDidCreateTask(_self: *@This(), _session: ?*URLSession, _task: ?*URLSessionTask) void {
        return objc.msgSend(_self, "URLSession:didCreateTask:", void, .{ _session, _task });
    }

    pub fn urlSessionTaskWillBeginDelayedRequestCompletionHandler(
        _self: *@This(),
        _session: ?*URLSession,
        _task: ?*URLSessionTask,
        _request: ?*URLRequest,
        _completionHandler: *const fn (URLSessionDelayedRequestDisposition, ?*URLRequest) callconv(.C) void,
    ) void {
        return objc.msgSend(_self, "URLSession:task:willBeginDelayedRequest:completionHandler:", void, .{
            _session,
            _task,
            _request,
            _completionHandler,
        });
    }

    pub fn urlSessionTaskIsWaitingForConnectivity(_self: *@This(), _session: ?*URLSession, _task: ?*URLSessionTask) void {
        return objc.msgSend(_self, "URLSession:taskIsWaitingForConnectivity:", void, .{ _session, _task });
    }

    pub fn urlSessionTaskWillPerformHTTPRedirectionNewRequestCompletionHandler(
        _self: *@This(),
        _session: ?*URLSession,
        _task: ?*URLSessionTask,
        _response: ?*HTTPURLResponse,
        _request: ?*URLRequest,
        _completionHandler: *const fn (?*URLRequest) callconv(.C) void,
    ) void {
        return objc.msgSend(_self, "URLSession:task:willPerformHTTPRedirection:newRequest:completionHandler:", void, .{
            _session,
            _task,
            _response,
            _request,
            _completionHandler,
        });
    }

    pub fn urlSessionTaskDidReceiveChallengeCompletionHandler(
        _self: *@This(),
        _session: ?*URLSession,
        _task: ?*URLSessionTask,
        _challenge: ?*URLAuthenticationChallenge,
        _completionHandler: *const fn (URLSessionAuthChallengeDisposition, ?*URLCredential) callconv(.C) void,
    ) void {
        return objc.msgSend(_self, "URLSession:task:didReceiveChallenge:completionHandler:", void, .{
            _session,
            _task,
            _challenge,
            _completionHandler,
        });
    }

    pub fn urlSessionTaskNeedNewBodyStream(_self: *@This(), _session: ?*URLSession, _task: ?*URLSessionTask, _completionHandler: *const fn (?*InputStream) callconv(.C) void) void {
        return objc.msgSend(_self, "URLSession:task:needNewBodyStream:", void, .{ _session, _task, _completionHandler });
    }

    pub fn urlSessionTaskNeedNewBodyStreamFromOffsetCompletionHandler(
        _self: *@This(),
        _session: ?*URLSession,
        _task: ?*URLSessionTask,
        _offset: objc.int64_t,
        _completionHandler: *const fn (?*InputStream) callconv(.C) void,
    ) void {
        return objc.msgSend(_self, "URLSession:task:needNewBodyStreamFromOffset:completionHandler:", void, .{
            _session,
            _task,
            _offset,
            _completionHandler,
        });
    }

    pub fn urlSessionTaskDidSendBodyDataTotalBytesSentTotalBytesExpectedToSend(
        _self: *@This(),
        _session: ?*URLSession,
        _task: ?*URLSessionTask,
        _bytesSent: objc.int64_t,
        _totalBytesSent: objc.int64_t,
        _totalBytesExpectedToSend: objc.int64_t,
    ) void {
        return objc.msgSend(_self, "URLSession:task:didSendBodyData:totalBytesSent:totalBytesExpectedToSend:", void, .{
            _session,
            _task,
            _bytesSent,
            _totalBytesSent,
            _totalBytesExpectedToSend,
        });
    }

    pub fn urlSessionTaskDidReceiveInformationalResponse(_self: *@This(), _session: ?*URLSession, _task: ?*URLSessionTask, _response: ?*HTTPURLResponse) void {
        return objc.msgSend(_self, "URLSession:task:didReceiveInformationalResponse:", void, .{ _session, _task, _response });
    }

    pub fn urlSessionTaskDidFinishCollectingMetrics(_self: *@This(), _session: ?*URLSession, _task: ?*URLSessionTask, _metrics: ?*URLSessionTaskMetrics) void {
        return objc.msgSend(_self, "URLSession:task:didFinishCollectingMetrics:", void, .{ _session, _task, _metrics });
    }

    pub fn urlSessionTaskDidCompleteWithError(_self: *@This(), _session: ?*URLSession, _task: ?*URLSessionTask, _error: ?*Error) void {
        return objc.msgSend(_self, "URLSession:task:didCompleteWithError:", void, .{ _session, _task, _error });
    }

    pub fn urlSessionWebSocketTaskDidOpenWithProtocol(_self: *@This(), _session: ?*URLSession, _webSocketTask: ?*URLSessionWebSocketTask, _protocol: ?*String) void {
        return objc.msgSend(_self, "URLSession:webSocketTask:didOpenWithProtocol:", void, .{ _session, _webSocketTask, _protocol });
    }

    pub fn urlSessionWebSocketTaskDidCloseWithCodeReason(
        _self: *@This(),
        _session: ?*URLSession,
        _webSocketTask: ?*URLSessionWebSocketTask,
        _closeCode: URLSessionWebSocketCloseCode,
        _reason: ?*Data,
    ) void {
        return objc.msgSend(_self, "URLSession:webSocketTask:didCloseWithCode:reason:", void, .{
            _session,
            _webSocketTask,
            _closeCode,
            _reason,
        });
    }
};

pub const URLSessionTaskMetricsResourceFetchType = objc.NSInteger;
pub const URLSessionTaskMetricsResourceFetchType_Unknown: objc.NSInteger = 0;
pub const URLSessionTaskMetricsResourceFetchType_NetworkLoad: objc.NSInteger = 1;
pub const URLSessionTaskMetricsResourceFetchType_ServerPush: objc.NSInteger = 2;
pub const URLSessionTaskMetricsResourceFetchType_LocalCache: objc.NSInteger = 3;

pub const URLSessionTaskMetricsDomainResolutionProtocol = objc.NSInteger;
pub const URLSessionTaskMetricsDomainResolutionProtocol_Unknown: objc.NSInteger = 0;
pub const URLSessionTaskMetricsDomainResolutionProtocol_UDP: objc.NSInteger = 1;
pub const URLSessionTaskMetricsDomainResolutionProtocol_TCP: objc.NSInteger = 2;
pub const URLSessionTaskMetricsDomainResolutionProtocol_TLS: objc.NSInteger = 3;
pub const URLSessionTaskMetricsDomainResolutionProtocol_HTTPS: objc.NSInteger = 4;

/// https://developer.apple.com/documentation/Foundation/NSURLSessionTaskTransactionMetrics?language=objc
pub const URLSessionTaskTransactionMetrics = opaque {
    pub const Internal = objc.ExternClass("NSURLSessionTaskTransactionMetrics", @This(), objc.NSObject, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn request(_self: *@This()) ?*URLRequest {
        return objc.msgSend(_self, "request", ?*URLRequest, .{});
    }

    pub fn response(_self: *@This()) ?*URLResponse {
        return objc.msgSend(_self, "response", ?*URLResponse, .{});
    }

    pub fn fetchStartDate(_self: *@This()) ?*Date {
        return objc.msgSend(_self, "fetchStartDate", ?*Date, .{});
    }

    pub fn domainLookupStartDate(_self: *@This()) ?*Date {
        return objc.msgSend(_self, "domainLookupStartDate", ?*Date, .{});
    }

    pub fn domainLookupEndDate(_self: *@This()) ?*Date {
        return objc.msgSend(_self, "domainLookupEndDate", ?*Date, .{});
    }

    pub fn connectStartDate(_self: *@This()) ?*Date {
        return objc.msgSend(_self, "connectStartDate", ?*Date, .{});
    }

    pub fn secureConnectionStartDate(_self: *@This()) ?*Date {
        return objc.msgSend(_self, "secureConnectionStartDate", ?*Date, .{});
    }

    pub fn secureConnectionEndDate(_self: *@This()) ?*Date {
        return objc.msgSend(_self, "secureConnectionEndDate", ?*Date, .{});
    }

    pub fn connectEndDate(_self: *@This()) ?*Date {
        return objc.msgSend(_self, "connectEndDate", ?*Date, .{});
    }

    pub fn requestStartDate(_self: *@This()) ?*Date {
        return objc.msgSend(_self, "requestStartDate", ?*Date, .{});
    }

    pub fn requestEndDate(_self: *@This()) ?*Date {
        return objc.msgSend(_self, "requestEndDate", ?*Date, .{});
    }

    pub fn responseStartDate(_self: *@This()) ?*Date {
        return objc.msgSend(_self, "responseStartDate", ?*Date, .{});
    }

    pub fn responseEndDate(_self: *@This()) ?*Date {
        return objc.msgSend(_self, "responseEndDate", ?*Date, .{});
    }

    pub fn networkProtocolName(_self: *@This()) ?*String {
        return objc.msgSend(_self, "networkProtocolName", ?*String, .{});
    }

    pub fn isProxyConnection(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxyConnection", objc.BOOL, .{});
    }

    pub fn isReusedConnection(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isReusedConnection", objc.BOOL, .{});
    }

    pub fn resourceFetchType(_self: *@This()) URLSessionTaskMetricsResourceFetchType {
        return objc.msgSend(_self, "resourceFetchType", URLSessionTaskMetricsResourceFetchType, .{});
    }

    pub fn countOfRequestHeaderBytesSent(_self: *@This()) objc.int64_t {
        return objc.msgSend(_self, "countOfRequestHeaderBytesSent", objc.int64_t, .{});
    }

    pub fn countOfRequestBodyBytesSent(_self: *@This()) objc.int64_t {
        return objc.msgSend(_self, "countOfRequestBodyBytesSent", objc.int64_t, .{});
    }

    pub fn countOfRequestBodyBytesBeforeEncoding(_self: *@This()) objc.int64_t {
        return objc.msgSend(_self, "countOfRequestBodyBytesBeforeEncoding", objc.int64_t, .{});
    }

    pub fn countOfResponseHeaderBytesReceived(_self: *@This()) objc.int64_t {
        return objc.msgSend(_self, "countOfResponseHeaderBytesReceived", objc.int64_t, .{});
    }

    pub fn countOfResponseBodyBytesReceived(_self: *@This()) objc.int64_t {
        return objc.msgSend(_self, "countOfResponseBodyBytesReceived", objc.int64_t, .{});
    }

    pub fn countOfResponseBodyBytesAfterDecoding(_self: *@This()) objc.int64_t {
        return objc.msgSend(_self, "countOfResponseBodyBytesAfterDecoding", objc.int64_t, .{});
    }

    pub fn localAddress(_self: *@This()) ?*String {
        return objc.msgSend(_self, "localAddress", ?*String, .{});
    }

    pub fn localPort(_self: *@This()) ?*Number {
        return objc.msgSend(_self, "localPort", ?*Number, .{});
    }

    pub fn remoteAddress(_self: *@This()) ?*String {
        return objc.msgSend(_self, "remoteAddress", ?*String, .{});
    }

    pub fn remotePort(_self: *@This()) ?*Number {
        return objc.msgSend(_self, "remotePort", ?*Number, .{});
    }

    pub fn negotiatedTLSProtocolVersion(_self: *@This()) ?*Number {
        return objc.msgSend(_self, "negotiatedTLSProtocolVersion", ?*Number, .{});
    }

    pub fn negotiatedTLSCipherSuite(_self: *@This()) ?*Number {
        return objc.msgSend(_self, "negotiatedTLSCipherSuite", ?*Number, .{});
    }

    pub fn isCellular(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isCellular", objc.BOOL, .{});
    }

    pub fn isExpensive(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isExpensive", objc.BOOL, .{});
    }

    pub fn isConstrained(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isConstrained", objc.BOOL, .{});
    }

    pub fn isMultipath(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isMultipath", objc.BOOL, .{});
    }

    pub fn domainResolutionProtocol(_self: *@This()) URLSessionTaskMetricsDomainResolutionProtocol {
        return objc.msgSend(_self, "domainResolutionProtocol", URLSessionTaskMetricsDomainResolutionProtocol, .{});
    }
};

/// https://developer.apple.com/documentation/Foundation/NSURLSessionTaskMetrics?language=objc
pub const URLSessionTaskMetrics = opaque {
    pub const Internal = objc.ExternClass("NSURLSessionTaskMetrics", @This(), objc.NSObject, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn transactionMetrics(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "transactionMetrics", ?*anyopaque, .{});
    }

    pub fn taskInterval(_self: *@This()) ?*DateInterval {
        return objc.msgSend(_self, "taskInterval", ?*DateInterval, .{});
    }

    pub fn redirectCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "redirectCount", objc.NSUInteger, .{});
    }
};

pub const UserActivityPersistentIdentifier = ?*String;

/// https://developer.apple.com/documentation/Foundation/NSUserActivity?language=objc
pub const UserActivity = opaque {
    pub const Internal = objc.ExternClass("NSUserActivity", @This(), objc.NSObject, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn initWithActivityType(_self: *@This(), _activityType: ?*String) *@This() {
        return objc.msgSend(_self, "initWithActivityType:", *@This(), .{_activityType});
    }

    pub fn addUserInfoEntriesFromDictionary(_self: *@This(), _otherDictionary: ?*Dictionary) void {
        return objc.msgSend(_self, "addUserInfoEntriesFromDictionary:", void, .{_otherDictionary});
    }

    pub fn becomeCurrent(_self: *@This()) void {
        return objc.msgSend(_self, "becomeCurrent", void, .{});
    }

    pub fn resignCurrent(_self: *@This()) void {
        return objc.msgSend(_self, "resignCurrent", void, .{});
    }

    pub fn invalidate(_self: *@This()) void {
        return objc.msgSend(_self, "invalidate", void, .{});
    }

    pub fn getContinuationStreamsWithCompletionHandler(_self: *@This(), _completionHandler: *const fn (?*InputStream, ?*OutputStream, ?*Error) callconv(.C) void) void {
        return objc.msgSend(_self, "getContinuationStreamsWithCompletionHandler:", void, .{_completionHandler});
    }

    pub fn deleteSavedUserActivitiesWithPersistentIdentifiersCompletionHandler(_persistentIdentifiers: ?*anyopaque, _handler: *const fn () callconv(.C) void) void {
        return objc.msgSend(Internal.class(), "deleteSavedUserActivitiesWithPersistentIdentifiers:completionHandler:", void, .{ _persistentIdentifiers, _handler });
    }

    pub fn deleteAllSavedUserActivitiesWithCompletionHandler(_handler: *const fn () callconv(.C) void) void {
        return objc.msgSend(Internal.class(), "deleteAllSavedUserActivitiesWithCompletionHandler:", void, .{_handler});
    }

    pub fn activityType(_self: *@This()) ?*String {
        return objc.msgSend(_self, "activityType", ?*String, .{});
    }

    pub fn title(_self: *@This()) ?*String {
        return objc.msgSend(_self, "title", ?*String, .{});
    }

    pub fn setTitle(_self: *@This(), _title: ?*String) void {
        return objc.msgSend(_self, "setTitle:", void, .{_title});
    }

    pub fn userInfo(_self: *@This()) ?*Dictionary {
        return objc.msgSend(_self, "userInfo", ?*Dictionary, .{});
    }

    pub fn setUserInfo(_self: *@This(), _userInfo: ?*Dictionary) void {
        return objc.msgSend(_self, "setUserInfo:", void, .{_userInfo});
    }

    pub fn requiredUserInfoKeys(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "requiredUserInfoKeys", ?*anyopaque, .{});
    }

    pub fn setRequiredUserInfoKeys(_self: *@This(), _requiredUserInfoKeys: ?*anyopaque) void {
        return objc.msgSend(_self, "setRequiredUserInfoKeys:", void, .{_requiredUserInfoKeys});
    }

    pub fn needsSave(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "needsSave", objc.BOOL, .{});
    }

    pub fn setNeedsSave(_self: *@This(), _needsSave: objc.BOOL) void {
        return objc.msgSend(_self, "setNeedsSave:", void, .{_needsSave});
    }

    pub fn webpageURL(_self: *@This()) ?*URL {
        return objc.msgSend(_self, "webpageURL", ?*URL, .{});
    }

    pub fn setWebpageURL(_self: *@This(), _webpageURL: ?*URL) void {
        return objc.msgSend(_self, "setWebpageURL:", void, .{_webpageURL});
    }

    pub fn referrerURL(_self: *@This()) ?*URL {
        return objc.msgSend(_self, "referrerURL", ?*URL, .{});
    }

    pub fn setReferrerURL(_self: *@This(), _referrerURL: ?*URL) void {
        return objc.msgSend(_self, "setReferrerURL:", void, .{_referrerURL});
    }

    pub fn expirationDate(_self: *@This()) ?*Date {
        return objc.msgSend(_self, "expirationDate", ?*Date, .{});
    }

    pub fn setExpirationDate(_self: *@This(), _expirationDate: ?*Date) void {
        return objc.msgSend(_self, "setExpirationDate:", void, .{_expirationDate});
    }

    pub fn keywords(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "keywords", ?*anyopaque, .{});
    }

    pub fn setKeywords(_self: *@This(), _keywords: ?*anyopaque) void {
        return objc.msgSend(_self, "setKeywords:", void, .{_keywords});
    }

    pub fn supportsContinuationStreams(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "supportsContinuationStreams", objc.BOOL, .{});
    }

    pub fn setSupportsContinuationStreams(_self: *@This(), _supportsContinuationStreams: objc.BOOL) void {
        return objc.msgSend(_self, "setSupportsContinuationStreams:", void, .{_supportsContinuationStreams});
    }

    pub fn delegate(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "delegate", ?*anyopaque, .{});
    }

    pub fn setDelegate(_self: *@This(), _delegate: ?*anyopaque) void {
        return objc.msgSend(_self, "setDelegate:", void, .{_delegate});
    }

    pub fn targetContentIdentifier(_self: *@This()) ?*String {
        return objc.msgSend(_self, "targetContentIdentifier", ?*String, .{});
    }

    pub fn setTargetContentIdentifier(_self: *@This(), _targetContentIdentifier: ?*String) void {
        return objc.msgSend(_self, "setTargetContentIdentifier:", void, .{_targetContentIdentifier});
    }

    pub fn isEligibleForHandoff(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isEligibleForHandoff", objc.BOOL, .{});
    }

    pub fn setEligibleForHandoff(_self: *@This(), _eligibleForHandoff: objc.BOOL) void {
        return objc.msgSend(_self, "setEligibleForHandoff:", void, .{_eligibleForHandoff});
    }

    pub fn isEligibleForSearch(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isEligibleForSearch", objc.BOOL, .{});
    }

    pub fn setEligibleForSearch(_self: *@This(), _eligibleForSearch: objc.BOOL) void {
        return objc.msgSend(_self, "setEligibleForSearch:", void, .{_eligibleForSearch});
    }

    pub fn isEligibleForPublicIndexing(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isEligibleForPublicIndexing", objc.BOOL, .{});
    }

    pub fn setEligibleForPublicIndexing(_self: *@This(), _eligibleForPublicIndexing: objc.BOOL) void {
        return objc.msgSend(_self, "setEligibleForPublicIndexing:", void, .{_eligibleForPublicIndexing});
    }

    pub fn isEligibleForPrediction(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isEligibleForPrediction", objc.BOOL, .{});
    }

    pub fn setEligibleForPrediction(_self: *@This(), _eligibleForPrediction: objc.BOOL) void {
        return objc.msgSend(_self, "setEligibleForPrediction:", void, .{_eligibleForPrediction});
    }

    pub fn persistentIdentifier(_self: *@This()) UserActivityPersistentIdentifier {
        return objc.msgSend(_self, "persistentIdentifier", UserActivityPersistentIdentifier, .{});
    }

    pub fn setPersistentIdentifier(_self: *@This(), _persistentIdentifier: UserActivityPersistentIdentifier) void {
        return objc.msgSend(_self, "setPersistentIdentifier:", void, .{_persistentIdentifier});
    }
};

/// https://developer.apple.com/documentation/Foundation/NSUserActivityDelegate?language=objc
pub const UserActivityDelegate = opaque {
    pub const Internal = objc.ExternProtocol(@This(), &.{objc.NSObject});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn userActivityWillSave(_self: *@This(), _userActivity: ?*UserActivity) void {
        return objc.msgSend(_self, "userActivityWillSave:", void, .{_userActivity});
    }

    pub fn userActivityWasContinued(_self: *@This(), _userActivity: ?*UserActivity) void {
        return objc.msgSend(_self, "userActivityWasContinued:", void, .{_userActivity});
    }

    pub fn userActivityDidReceiveInputStreamOutputStream(_self: *@This(), _userActivity: ?*UserActivity, _inputStream: ?*InputStream, _outputStream: ?*OutputStream) void {
        return objc.msgSend(_self, "userActivity:didReceiveInputStream:outputStream:", void, .{ _userActivity, _inputStream, _outputStream });
    }
};

/// https://developer.apple.com/documentation/Foundation/NSUUID?language=objc
pub const UUID = opaque {
    pub const Internal = objc.ExternClass("NSUUID", @This(), objc.NSObject, &.{ Copying, SecureCoding });
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn supportsSecureCoding() objc.BOOL {
        return objc.msgSend(Internal.class(), "supportsSecureCoding", objc.BOOL, .{});
    }

    pub fn uuid() *@This() {
        return objc.msgSend(Internal.class(), "UUID", *@This(), .{});
    }

    pub fn initWithUUIDString(_self: *@This(), _string: ?*String) *@This() {
        return objc.msgSend(_self, "initWithUUIDString:", *@This(), .{_string});
    }

    pub fn initWithUUIDBytes(_self: *@This(), _bytes: ?*u8) *@This() {
        return objc.msgSend(_self, "initWithUUIDBytes:", *@This(), .{_bytes});
    }

    pub fn getUUIDBytes(_self: *@This(), _uuid: ?*u8) void {
        return objc.msgSend(_self, "getUUIDBytes:", void, .{_uuid});
    }

    pub fn compare(_self: *@This(), _otherUUID: ?*UUID) ComparisonResult {
        return objc.msgSend(_self, "compare:", ComparisonResult, .{_otherUUID});
    }

    pub fn uuidString(_self: *@This()) ?*String {
        return objc.msgSend(_self, "UUIDString", ?*String, .{});
    }
};

pub const AffineTransformStruct = extern struct {
    m11: core_foundation.CGFloat,
    m12: core_foundation.CGFloat,
    m21: core_foundation.CGFloat,
    m22: core_foundation.CGFloat,
    tX: core_foundation.CGFloat,
    tY: core_foundation.CGFloat,
};

/// https://developer.apple.com/documentation/Foundation/NSAffineTransform?language=objc
pub const AffineTransform = opaque {
    pub const Internal = objc.ExternClass("NSAffineTransform", @This(), objc.NSObject, &.{ Copying, SecureCoding });
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn supportsSecureCoding() objc.BOOL {
        return objc.msgSend(Internal.class(), "supportsSecureCoding", objc.BOOL, .{});
    }

    pub fn transform() ?*AffineTransform {
        return objc.msgSend(Internal.class(), "transform", ?*AffineTransform, .{});
    }

    pub fn initWithTransform(_self: *@This(), _transform: ?*AffineTransform) *@This() {
        return objc.msgSend(_self, "initWithTransform:", *@This(), .{_transform});
    }

    pub fn translateXByYBy(_self: *@This(), _deltaX: core_foundation.CGFloat, _deltaY: core_foundation.CGFloat) void {
        return objc.msgSend(_self, "translateXBy:yBy:", void, .{ _deltaX, _deltaY });
    }

    pub fn rotateByDegrees(_self: *@This(), _angle: core_foundation.CGFloat) void {
        return objc.msgSend(_self, "rotateByDegrees:", void, .{_angle});
    }

    pub fn rotateByRadians(_self: *@This(), _angle: core_foundation.CGFloat) void {
        return objc.msgSend(_self, "rotateByRadians:", void, .{_angle});
    }

    pub fn scaleBy(_self: *@This(), _scale: core_foundation.CGFloat) void {
        return objc.msgSend(_self, "scaleBy:", void, .{_scale});
    }

    pub fn scaleXByYBy(_self: *@This(), _scaleX: core_foundation.CGFloat, _scaleY: core_foundation.CGFloat) void {
        return objc.msgSend(_self, "scaleXBy:yBy:", void, .{ _scaleX, _scaleY });
    }

    pub fn invert(_self: *@This()) void {
        return objc.msgSend(_self, "invert", void, .{});
    }

    pub fn appendTransform(_self: *@This(), _transform: ?*AffineTransform) void {
        return objc.msgSend(_self, "appendTransform:", void, .{_transform});
    }

    pub fn prependTransform(_self: *@This(), _transform: ?*AffineTransform) void {
        return objc.msgSend(_self, "prependTransform:", void, .{_transform});
    }

    pub fn transformPoint(_self: *@This(), _aPoint: Point) Point {
        return objc.msgSend(_self, "transformPoint:", Point, .{_aPoint});
    }

    pub fn transformSize(_self: *@This(), _aSize: Size) Size {
        return objc.msgSend(_self, "transformSize:", Size, .{_aSize});
    }

    pub fn transformStruct(_self: *@This()) AffineTransformStruct {
        return objc.msgSend(_self, "transformStruct", AffineTransformStruct, .{});
    }

    pub fn setTransformStruct(_self: *@This(), _transformStruct: AffineTransformStruct) void {
        return objc.msgSend(_self, "setTransformStruct:", void, .{_transformStruct});
    }
};

/// https://developer.apple.com/documentation/Foundation/NSAppleScript?language=objc
pub const AppleScript = opaque {
    pub const Internal = objc.ExternClass("NSAppleScript", @This(), objc.NSObject, &.{Copying});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn initWithContentsOfURLError(_self: *@This(), _url: ?*URL, _errorInfo: ?*?*anyopaque) *@This() {
        return objc.msgSend(_self, "initWithContentsOfURL:error:", *@This(), .{ _url, _errorInfo });
    }

    pub fn initWithSource(_self: *@This(), _source: ?*String) *@This() {
        return objc.msgSend(_self, "initWithSource:", *@This(), .{_source});
    }

    pub fn compileAndReturnError(_self: *@This(), _errorInfo: ?*?*anyopaque) objc.BOOL {
        return objc.msgSend(_self, "compileAndReturnError:", objc.BOOL, .{_errorInfo});
    }

    pub fn executeAndReturnError(_self: *@This(), _errorInfo: ?*?*anyopaque) ?*AppleEventDescriptor {
        return objc.msgSend(_self, "executeAndReturnError:", ?*AppleEventDescriptor, .{_errorInfo});
    }

    pub fn executeAppleEventError(_self: *@This(), _event: ?*AppleEventDescriptor, _errorInfo: ?*?*anyopaque) ?*AppleEventDescriptor {
        return objc.msgSend(_self, "executeAppleEvent:error:", ?*AppleEventDescriptor, .{ _event, _errorInfo });
    }

    pub fn source(_self: *@This()) ?*String {
        return objc.msgSend(_self, "source", ?*String, .{});
    }

    pub fn isCompiled(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isCompiled", objc.BOOL, .{});
    }
};

/// https://developer.apple.com/documentation/Foundation/NSArchiver?language=objc
pub const Archiver = opaque {
    pub const Internal = objc.ExternClass("NSArchiver", @This(), Coder, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn encodeValueOfObjCTypeAt(_self: *@This(), _type: ?*i8, _addr: ?*anyopaque) void {
        return objc.msgSend(_self, "encodeValueOfObjCType:at:", void, .{ _type, _addr });
    }

    pub fn encodeDataObject(_self: *@This(), _data: ?*Data) void {
        return objc.msgSend(_self, "encodeDataObject:", void, .{_data});
    }

    pub fn decodeDataObject(_self: *@This()) ?*Data {
        return objc.msgSend(_self, "decodeDataObject", ?*Data, .{});
    }

    pub fn decodeValueOfObjCTypeAtSize(_self: *@This(), _type: ?*i8, _data: ?*anyopaque, _size: objc.NSUInteger) void {
        return objc.msgSend(_self, "decodeValueOfObjCType:at:size:", void, .{ _type, _data, _size });
    }

    pub fn versionForClassName(_self: *@This(), _className: ?*String) objc.NSInteger {
        return objc.msgSend(_self, "versionForClassName:", objc.NSInteger, .{_className});
    }

    pub fn initForWritingWithMutableData(_self: *@This(), _mdata: ?*MutableData) *@This() {
        return objc.msgSend(_self, "initForWritingWithMutableData:", *@This(), .{_mdata});
    }

    pub fn encodeRootObject(_self: *@This(), _rootObject: ?objc.Id) void {
        return objc.msgSend(_self, "encodeRootObject:", void, .{_rootObject});
    }

    pub fn encodeConditionalObject(_self: *@This(), _object: ?objc.Id) void {
        return objc.msgSend(_self, "encodeConditionalObject:", void, .{_object});
    }

    pub fn archivedDataWithRootObject(_rootObject: ?objc.Id) ?*Data {
        return objc.msgSend(Internal.class(), "archivedDataWithRootObject:", ?*Data, .{_rootObject});
    }

    pub fn archiveRootObjectToFile(_rootObject: ?objc.Id, _path: ?*String) objc.BOOL {
        return objc.msgSend(Internal.class(), "archiveRootObject:toFile:", objc.BOOL, .{ _rootObject, _path });
    }

    pub fn encodeClassNameIntoClassName(_self: *@This(), _trueName: ?*String, _inArchiveName: ?*String) void {
        return objc.msgSend(_self, "encodeClassName:intoClassName:", void, .{ _trueName, _inArchiveName });
    }

    pub fn classNameEncodedForTrueClassName(_self: *@This(), _trueName: ?*String) ?*String {
        return objc.msgSend(_self, "classNameEncodedForTrueClassName:", ?*String, .{_trueName});
    }

    pub fn replaceObjectWithObject(_self: *@This(), _object: ?objc.Id, _newObject: ?objc.Id) void {
        return objc.msgSend(_self, "replaceObject:withObject:", void, .{ _object, _newObject });
    }

    pub fn archiverData(_self: *@This()) ?*MutableData {
        return objc.msgSend(_self, "archiverData", ?*MutableData, .{});
    }
};

/// https://developer.apple.com/documentation/Foundation/NSUnarchiver?language=objc
pub const Unarchiver = opaque {
    pub const Internal = objc.ExternClass("NSUnarchiver", @This(), Coder, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn encodeValueOfObjCTypeAt(_self: *@This(), _type: ?*i8, _addr: ?*anyopaque) void {
        return objc.msgSend(_self, "encodeValueOfObjCType:at:", void, .{ _type, _addr });
    }

    pub fn encodeDataObject(_self: *@This(), _data: ?*Data) void {
        return objc.msgSend(_self, "encodeDataObject:", void, .{_data});
    }

    pub fn decodeDataObject(_self: *@This()) ?*Data {
        return objc.msgSend(_self, "decodeDataObject", ?*Data, .{});
    }

    pub fn decodeValueOfObjCTypeAtSize(_self: *@This(), _type: ?*i8, _data: ?*anyopaque, _size: objc.NSUInteger) void {
        return objc.msgSend(_self, "decodeValueOfObjCType:at:size:", void, .{ _type, _data, _size });
    }

    pub fn versionForClassName(_self: *@This(), _className: ?*String) objc.NSInteger {
        return objc.msgSend(_self, "versionForClassName:", objc.NSInteger, .{_className});
    }

    pub fn initForReadingWithData(_self: *@This(), _data: ?*Data) *@This() {
        return objc.msgSend(_self, "initForReadingWithData:", *@This(), .{_data});
    }

    pub fn setObjectZone(_self: *@This(), _zone: ?*Zone) void {
        return objc.msgSend(_self, "setObjectZone:", void, .{_zone});
    }

    pub fn objectZone(_self: *@This()) ?*Zone {
        return objc.msgSend(_self, "objectZone", ?*Zone, .{});
    }

    pub fn unarchiveObjectWithData(_data: ?*Data) ?objc.Id {
        return objc.msgSend(Internal.class(), "unarchiveObjectWithData:", ?objc.Id, .{_data});
    }

    pub fn unarchiveObjectWithFile(_path: ?*String) ?objc.Id {
        return objc.msgSend(Internal.class(), "unarchiveObjectWithFile:", ?objc.Id, .{_path});
    }

    pub fn decodeClassNameAsClassName(_inArchiveName: ?*String, _trueName: ?*String) void {
        return objc.msgSend(Internal.class(), "decodeClassName:asClassName:", void, .{ _inArchiveName, _trueName });
    }

    pub fn classNameDecodedForArchiveClassName(_inArchiveName: ?*String) ?*String {
        return objc.msgSend(Internal.class(), "classNameDecodedForArchiveClassName:", ?*String, .{_inArchiveName});
    }

    pub fn replaceObjectWithObject(_self: *@This(), _object: ?objc.Id, _newObject: ?objc.Id) void {
        return objc.msgSend(_self, "replaceObject:withObject:", void, .{ _object, _newObject });
    }

    pub fn isAtEnd(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isAtEnd", objc.BOOL, .{});
    }

    pub fn systemVersion(_self: *@This()) u32 {
        return objc.msgSend(_self, "systemVersion", u32, .{});
    }
};

pub const BackgroundActivityResult = objc.NSInteger;
pub const BackgroundActivityResult_Finished: objc.NSInteger = 1;
pub const BackgroundActivityResult_Deferred: objc.NSInteger = 2;

pub const BackgroundActivityCompletionHandler = *const fn (BackgroundActivityResult) callconv(.C) void;

/// https://developer.apple.com/documentation/Foundation/NSBackgroundActivityScheduler?language=objc
pub const BackgroundActivityScheduler = opaque {
    pub const Internal = objc.ExternClass("NSBackgroundActivityScheduler", @This(), objc.NSObject, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn initWithIdentifier(_self: *@This(), _identifier: ?*String) *@This() {
        return objc.msgSend(_self, "initWithIdentifier:", *@This(), .{_identifier});
    }

    pub fn scheduleWithBlock(_self: *@This(), _block: *const fn (BackgroundActivityCompletionHandler) callconv(.C) void) void {
        return objc.msgSend(_self, "scheduleWithBlock:", void, .{_block});
    }

    pub fn invalidate(_self: *@This()) void {
        return objc.msgSend(_self, "invalidate", void, .{});
    }

    pub fn identifier(_self: *@This()) ?*String {
        return objc.msgSend(_self, "identifier", ?*String, .{});
    }

    pub fn qualityOfService(_self: *@This()) QualityOfService {
        return objc.msgSend(_self, "qualityOfService", QualityOfService, .{});
    }

    pub fn setQualityOfService(_self: *@This(), _qualityOfService: QualityOfService) void {
        return objc.msgSend(_self, "setQualityOfService:", void, .{_qualityOfService});
    }

    pub fn repeats(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "repeats", objc.BOOL, .{});
    }

    pub fn setRepeats(_self: *@This(), _repeats: objc.BOOL) void {
        return objc.msgSend(_self, "setRepeats:", void, .{_repeats});
    }

    pub fn interval(_self: *@This()) TimeInterval {
        return objc.msgSend(_self, "interval", TimeInterval, .{});
    }

    pub fn setInterval(_self: *@This(), _interval: TimeInterval) void {
        return objc.msgSend(_self, "setInterval:", void, .{_interval});
    }

    pub fn tolerance(_self: *@This()) TimeInterval {
        return objc.msgSend(_self, "tolerance", TimeInterval, .{});
    }

    pub fn setTolerance(_self: *@This(), _tolerance: TimeInterval) void {
        return objc.msgSend(_self, "setTolerance:", void, .{_tolerance});
    }

    pub fn shouldDefer(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "shouldDefer", objc.BOOL, .{});
    }
};

/// https://developer.apple.com/documentation/Foundation/NSCalendarDate?language=objc
pub const CalendarDate = opaque {
    pub const Internal = objc.ExternClass("NSCalendarDate", @This(), Date, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn supportsSecureCoding() objc.BOOL {
        return objc.msgSend(Internal.class(), "supportsSecureCoding", objc.BOOL, .{});
    }

    pub fn initWithTimeIntervalSinceReferenceDate(_self: *@This(), _ti: TimeInterval) *@This() {
        return objc.msgSend(_self, "initWithTimeIntervalSinceReferenceDate:", *@This(), .{_ti});
    }

    pub fn timeIntervalSinceReferenceDate(_self: *@This()) TimeInterval {
        return objc.msgSend(_self, "timeIntervalSinceReferenceDate", TimeInterval, .{});
    }

    pub fn calendarDate() ?objc.Id {
        return objc.msgSend(Internal.class(), "calendarDate", ?objc.Id, .{});
    }

    pub fn dateWithStringCalendarFormatLocale(_description: ?*String, _format: ?*String, _locale: ?objc.Id) ?objc.Id {
        return objc.msgSend(Internal.class(), "dateWithString:calendarFormat:locale:", ?objc.Id, .{ _description, _format, _locale });
    }

    pub fn dateWithStringCalendarFormat(_description: ?*String, _format: ?*String) ?objc.Id {
        return objc.msgSend(Internal.class(), "dateWithString:calendarFormat:", ?objc.Id, .{ _description, _format });
    }

    pub fn dateWithYearMonthDayHourMinuteSecondTimeZone(
        _year: objc.NSInteger,
        _month: objc.NSUInteger,
        _day: objc.NSUInteger,
        _hour: objc.NSUInteger,
        _minute: objc.NSUInteger,
        _second: objc.NSUInteger,
        _aTimeZone: ?*TimeZone,
    ) ?objc.Id {
        return objc.msgSend(Internal.class(), "dateWithYear:month:day:hour:minute:second:timeZone:", ?objc.Id, .{
            _year,
            _month,
            _day,
            _hour,
            _minute,
            _second,
            _aTimeZone,
        });
    }

    pub fn dateByAddingYearsMonthsDaysHoursMinutesSeconds(
        _self: *@This(),
        _year: objc.NSInteger,
        _month: objc.NSInteger,
        _day: objc.NSInteger,
        _hour: objc.NSInteger,
        _minute: objc.NSInteger,
        _second: objc.NSInteger,
    ) ?*CalendarDate {
        return objc.msgSend(_self, "dateByAddingYears:months:days:hours:minutes:seconds:", ?*CalendarDate, .{
            _year,
            _month,
            _day,
            _hour,
            _minute,
            _second,
        });
    }

    pub fn dayOfCommonEra(_self: *@This()) objc.NSInteger {
        return objc.msgSend(_self, "dayOfCommonEra", objc.NSInteger, .{});
    }

    pub fn dayOfMonth(_self: *@This()) objc.NSInteger {
        return objc.msgSend(_self, "dayOfMonth", objc.NSInteger, .{});
    }

    pub fn dayOfWeek(_self: *@This()) objc.NSInteger {
        return objc.msgSend(_self, "dayOfWeek", objc.NSInteger, .{});
    }

    pub fn dayOfYear(_self: *@This()) objc.NSInteger {
        return objc.msgSend(_self, "dayOfYear", objc.NSInteger, .{});
    }

    pub fn hourOfDay(_self: *@This()) objc.NSInteger {
        return objc.msgSend(_self, "hourOfDay", objc.NSInteger, .{});
    }

    pub fn minuteOfHour(_self: *@This()) objc.NSInteger {
        return objc.msgSend(_self, "minuteOfHour", objc.NSInteger, .{});
    }

    pub fn monthOfYear(_self: *@This()) objc.NSInteger {
        return objc.msgSend(_self, "monthOfYear", objc.NSInteger, .{});
    }

    pub fn secondOfMinute(_self: *@This()) objc.NSInteger {
        return objc.msgSend(_self, "secondOfMinute", objc.NSInteger, .{});
    }

    pub fn yearOfCommonEra(_self: *@This()) objc.NSInteger {
        return objc.msgSend(_self, "yearOfCommonEra", objc.NSInteger, .{});
    }

    pub fn calendarFormat(_self: *@This()) ?*String {
        return objc.msgSend(_self, "calendarFormat", ?*String, .{});
    }

    pub fn descriptionWithCalendarFormatLocale(_self: *@This(), _format: ?*String, _locale: ?objc.Id) ?*String {
        return objc.msgSend(_self, "descriptionWithCalendarFormat:locale:", ?*String, .{ _format, _locale });
    }

    pub fn descriptionWithCalendarFormat(_self: *@This(), _format: ?*String) ?*String {
        return objc.msgSend(_self, "descriptionWithCalendarFormat:", ?*String, .{_format});
    }

    pub fn descriptionWithLocale(_self: *@This(), _locale: ?objc.Id) ?*String {
        return objc.msgSend(_self, "descriptionWithLocale:", ?*String, .{_locale});
    }

    pub fn timeZone(_self: *@This()) ?*TimeZone {
        return objc.msgSend(_self, "timeZone", ?*TimeZone, .{});
    }

    pub fn initWithStringCalendarFormatLocale(_self: *@This(), _description: ?*String, _format: ?*String, _locale: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "initWithString:calendarFormat:locale:", ?objc.Id, .{ _description, _format, _locale });
    }

    pub fn initWithStringCalendarFormat(_self: *@This(), _description: ?*String, _format: ?*String) ?objc.Id {
        return objc.msgSend(_self, "initWithString:calendarFormat:", ?objc.Id, .{ _description, _format });
    }

    pub fn initWithString(_self: *@This(), _description: ?*String) ?objc.Id {
        return objc.msgSend(_self, "initWithString:", ?objc.Id, .{_description});
    }

    pub fn initWithYearMonthDayHourMinuteSecondTimeZone(
        _self: *@This(),
        _year: objc.NSInteger,
        _month: objc.NSUInteger,
        _day: objc.NSUInteger,
        _hour: objc.NSUInteger,
        _minute: objc.NSUInteger,
        _second: objc.NSUInteger,
        _aTimeZone: ?*TimeZone,
    ) ?objc.Id {
        return objc.msgSend(_self, "initWithYear:month:day:hour:minute:second:timeZone:", ?objc.Id, .{
            _year,
            _month,
            _day,
            _hour,
            _minute,
            _second,
            _aTimeZone,
        });
    }

    pub fn setCalendarFormat(_self: *@This(), _format: ?*String) void {
        return objc.msgSend(_self, "setCalendarFormat:", void, .{_format});
    }

    pub fn setTimeZone(_self: *@This(), _aTimeZone: ?*TimeZone) void {
        return objc.msgSend(_self, "setTimeZone:", void, .{_aTimeZone});
    }

    pub fn yearsMonthsDaysHoursMinutesSecondsSinceDate(
        _self: *@This(),
        _yp: ?*objc.NSInteger,
        _mop: ?*objc.NSInteger,
        _dp: ?*objc.NSInteger,
        _hp: ?*objc.NSInteger,
        _mip: ?*objc.NSInteger,
        _sp: ?*objc.NSInteger,
        _date: ?*CalendarDate,
    ) void {
        return objc.msgSend(_self, "years:months:days:hours:minutes:seconds:sinceDate:", void, .{
            _yp,
            _mop,
            _dp,
            _hp,
            _mip,
            _sp,
            _date,
        });
    }

    pub fn distantFuture() *@This() {
        return objc.msgSend(Internal.class(), "distantFuture", *@This(), .{});
    }

    pub fn distantPast() *@This() {
        return objc.msgSend(Internal.class(), "distantPast", *@This(), .{});
    }
};

/// https://developer.apple.com/documentation/Foundation/NSConnection?language=objc
pub const Connection = opaque {
    pub const Internal = objc.ExternClass("NSConnection", @This(), objc.NSObject, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn allConnections() ?*anyopaque {
        return objc.msgSend(Internal.class(), "allConnections", ?*anyopaque, .{});
    }

    pub fn defaultConnection() ?*Connection {
        return objc.msgSend(Internal.class(), "defaultConnection", ?*Connection, .{});
    }

    pub fn connectionWithRegisteredNameHost(_name: ?*String, _hostName: ?*String) *@This() {
        return objc.msgSend(Internal.class(), "connectionWithRegisteredName:host:", *@This(), .{ _name, _hostName });
    }

    pub fn connectionWithRegisteredNameHostUsingNameServer(_name: ?*String, _hostName: ?*String, _server: ?*PortNameServer) *@This() {
        return objc.msgSend(Internal.class(), "connectionWithRegisteredName:host:usingNameServer:", *@This(), .{ _name, _hostName, _server });
    }

    pub fn rootProxyForConnectionWithRegisteredNameHost(_name: ?*String, _hostName: ?*String) ?*DistantObject {
        return objc.msgSend(Internal.class(), "rootProxyForConnectionWithRegisteredName:host:", ?*DistantObject, .{ _name, _hostName });
    }

    pub fn rootProxyForConnectionWithRegisteredNameHostUsingNameServer(_name: ?*String, _hostName: ?*String, _server: ?*PortNameServer) ?*DistantObject {
        return objc.msgSend(Internal.class(), "rootProxyForConnectionWithRegisteredName:host:usingNameServer:", ?*DistantObject, .{ _name, _hostName, _server });
    }

    pub fn serviceConnectionWithNameRootObjectUsingNameServer(_name: ?*String, _root: ?objc.Id, _server: ?*PortNameServer) *@This() {
        return objc.msgSend(Internal.class(), "serviceConnectionWithName:rootObject:usingNameServer:", *@This(), .{ _name, _root, _server });
    }

    pub fn serviceConnectionWithNameRootObject(_name: ?*String, _root: ?objc.Id) *@This() {
        return objc.msgSend(Internal.class(), "serviceConnectionWithName:rootObject:", *@This(), .{ _name, _root });
    }

    pub fn invalidate(_self: *@This()) void {
        return objc.msgSend(_self, "invalidate", void, .{});
    }

    pub fn addRequestMode(_self: *@This(), _rmode: ?*String) void {
        return objc.msgSend(_self, "addRequestMode:", void, .{_rmode});
    }

    pub fn removeRequestMode(_self: *@This(), _rmode: ?*String) void {
        return objc.msgSend(_self, "removeRequestMode:", void, .{_rmode});
    }

    pub fn registerName(_self: *@This(), _name: ?*String) objc.BOOL {
        return objc.msgSend(_self, "registerName:", objc.BOOL, .{_name});
    }

    pub fn registerNameWithNameServer(_self: *@This(), _name: ?*String, _server: ?*PortNameServer) objc.BOOL {
        return objc.msgSend(_self, "registerName:withNameServer:", objc.BOOL, .{ _name, _server });
    }

    pub fn connectionWithReceivePortSendPort(_receivePort: ?*Port, _sendPort: ?*Port) *@This() {
        return objc.msgSend(Internal.class(), "connectionWithReceivePort:sendPort:", *@This(), .{ _receivePort, _sendPort });
    }

    pub fn currentConversation() ?objc.Id {
        return objc.msgSend(Internal.class(), "currentConversation", ?objc.Id, .{});
    }

    pub fn initWithReceivePortSendPort(_self: *@This(), _receivePort: ?*Port, _sendPort: ?*Port) *@This() {
        return objc.msgSend(_self, "initWithReceivePort:sendPort:", *@This(), .{ _receivePort, _sendPort });
    }

    pub fn enableMultipleThreads(_self: *@This()) void {
        return objc.msgSend(_self, "enableMultipleThreads", void, .{});
    }

    pub fn addRunLoop(_self: *@This(), _runloop: ?*RunLoop) void {
        return objc.msgSend(_self, "addRunLoop:", void, .{_runloop});
    }

    pub fn removeRunLoop(_self: *@This(), _runloop: ?*RunLoop) void {
        return objc.msgSend(_self, "removeRunLoop:", void, .{_runloop});
    }

    pub fn runInNewThread(_self: *@This()) void {
        return objc.msgSend(_self, "runInNewThread", void, .{});
    }

    pub fn dispatchWithComponents(_self: *@This(), _components: ?*Array) void {
        return objc.msgSend(_self, "dispatchWithComponents:", void, .{_components});
    }

    pub fn statistics(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "statistics", ?*anyopaque, .{});
    }

    pub fn requestTimeout(_self: *@This()) TimeInterval {
        return objc.msgSend(_self, "requestTimeout", TimeInterval, .{});
    }

    pub fn setRequestTimeout(_self: *@This(), _requestTimeout: TimeInterval) void {
        return objc.msgSend(_self, "setRequestTimeout:", void, .{_requestTimeout});
    }

    pub fn replyTimeout(_self: *@This()) TimeInterval {
        return objc.msgSend(_self, "replyTimeout", TimeInterval, .{});
    }

    pub fn setReplyTimeout(_self: *@This(), _replyTimeout: TimeInterval) void {
        return objc.msgSend(_self, "setReplyTimeout:", void, .{_replyTimeout});
    }

    pub fn rootObject(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "rootObject", ?objc.Id, .{});
    }

    pub fn setRootObject(_self: *@This(), _rootObject: ?objc.Id) void {
        return objc.msgSend(_self, "setRootObject:", void, .{_rootObject});
    }

    pub fn delegate(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "delegate", ?*anyopaque, .{});
    }

    pub fn setDelegate(_self: *@This(), _delegate: ?*anyopaque) void {
        return objc.msgSend(_self, "setDelegate:", void, .{_delegate});
    }

    pub fn independentConversationQueueing(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "independentConversationQueueing", objc.BOOL, .{});
    }

    pub fn setIndependentConversationQueueing(_self: *@This(), _independentConversationQueueing: objc.BOOL) void {
        return objc.msgSend(_self, "setIndependentConversationQueueing:", void, .{_independentConversationQueueing});
    }

    pub fn isValid(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isValid", objc.BOOL, .{});
    }

    pub fn rootProxy(_self: *@This()) ?*DistantObject {
        return objc.msgSend(_self, "rootProxy", ?*DistantObject, .{});
    }

    pub fn requestModes(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "requestModes", ?*anyopaque, .{});
    }

    pub fn sendPort(_self: *@This()) ?*Port {
        return objc.msgSend(_self, "sendPort", ?*Port, .{});
    }

    pub fn receivePort(_self: *@This()) ?*Port {
        return objc.msgSend(_self, "receivePort", ?*Port, .{});
    }

    pub fn multipleThreadsEnabled(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "multipleThreadsEnabled", objc.BOOL, .{});
    }

    pub fn remoteObjects(_self: *@This()) ?*Array {
        return objc.msgSend(_self, "remoteObjects", ?*Array, .{});
    }

    pub fn localObjects(_self: *@This()) ?*Array {
        return objc.msgSend(_self, "localObjects", ?*Array, .{});
    }
};

/// https://developer.apple.com/documentation/Foundation/NSConnectionDelegate?language=objc
pub const ConnectionDelegate = opaque {
    pub const Internal = objc.ExternProtocol(@This(), &.{objc.NSObject});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn makeNewConnectionSender(_self: *@This(), _conn: ?*Connection, _ancestor: ?*Connection) objc.BOOL {
        return objc.msgSend(_self, "makeNewConnection:sender:", objc.BOOL, .{ _conn, _ancestor });
    }

    pub fn connectionShouldMakeNewConnection(_self: *@This(), _ancestor: ?*Connection, _conn: ?*Connection) objc.BOOL {
        return objc.msgSend(_self, "connection:shouldMakeNewConnection:", objc.BOOL, .{ _ancestor, _conn });
    }

    pub fn authenticationDataForComponents(_self: *@This(), _components: ?*Array) ?*Data {
        return objc.msgSend(_self, "authenticationDataForComponents:", ?*Data, .{_components});
    }

    pub fn authenticateComponentsWithData(_self: *@This(), _components: ?*Array, _signature: ?*Data) objc.BOOL {
        return objc.msgSend(_self, "authenticateComponents:withData:", objc.BOOL, .{ _components, _signature });
    }

    pub fn createConversationForConnection(_self: *@This(), _conn: ?*Connection) ?objc.Id {
        return objc.msgSend(_self, "createConversationForConnection:", ?objc.Id, .{_conn});
    }

    pub fn connectionHandleRequest(_self: *@This(), _connection: ?*Connection, _doreq: ?*DistantObjectRequest) objc.BOOL {
        return objc.msgSend(_self, "connection:handleRequest:", objc.BOOL, .{ _connection, _doreq });
    }
};

/// https://developer.apple.com/documentation/Foundation/NSDistantObjectRequest?language=objc
pub const DistantObjectRequest = opaque {
    pub const Internal = objc.ExternClass("NSDistantObjectRequest", @This(), objc.NSObject, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn replyWithException(_self: *@This(), _exception: ?*Exception) void {
        return objc.msgSend(_self, "replyWithException:", void, .{_exception});
    }

    pub fn invocation(_self: *@This()) ?*Invocation {
        return objc.msgSend(_self, "invocation", ?*Invocation, .{});
    }

    pub fn connection(_self: *@This()) ?*Connection {
        return objc.msgSend(_self, "connection", ?*Connection, .{});
    }

    pub fn conversation(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "conversation", ?objc.Id, .{});
    }
};

/// https://developer.apple.com/documentation/Foundation/NSDistantObject?language=objc
pub const DistantObject = opaque {
    pub const Internal = objc.ExternClass("NSDistantObject", @This(), Proxy, &.{Coding});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn allocWithZone(_zone: ?*Zone) ?objc.Id {
        return objc.msgSend(Internal.class(), "allocWithZone:", ?objc.Id, .{_zone});
    }

    pub fn forwardInvocation(_self: *@This(), _invocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_invocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _sel: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_sel});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn proxyWithTargetConnection(_target: ?objc.Id, _connection: ?*Connection) ?objc.Id {
        return objc.msgSend(Internal.class(), "proxyWithTarget:connection:", ?objc.Id, .{ _target, _connection });
    }

    pub fn initWithTargetConnection(_self: *@This(), _target: ?objc.Id, _connection: ?*Connection) *@This() {
        return objc.msgSend(_self, "initWithTarget:connection:", *@This(), .{ _target, _connection });
    }

    pub fn proxyWithLocalConnection(_target: ?objc.Id, _connection: ?*Connection) ?objc.Id {
        return objc.msgSend(Internal.class(), "proxyWithLocal:connection:", ?objc.Id, .{ _target, _connection });
    }

    pub fn initWithLocalConnection(_self: *@This(), _target: ?objc.Id, _connection: ?*Connection) *@This() {
        return objc.msgSend(_self, "initWithLocal:connection:", *@This(), .{ _target, _connection });
    }

    pub fn setProtocolForProxy(_self: *@This(), _proto: ?**objc.Protocol) void {
        return objc.msgSend(_self, "setProtocolForProxy:", void, .{_proto});
    }

    pub fn connectionForProxy(_self: *@This()) ?*Connection {
        return objc.msgSend(_self, "connectionForProxy", ?*Connection, .{});
    }
};

pub const DistributedNotificationCenterType = ?*String;

pub const NotificationSuspensionBehavior = objc.NSUInteger;
pub const NotificationSuspensionBehavior_Drop: objc.NSUInteger = 1;
pub const NotificationSuspensionBehavior_Coalesce: objc.NSUInteger = 2;
pub const NotificationSuspensionBehavior_Hold: objc.NSUInteger = 3;
pub const NotificationSuspensionBehavior_DeliverImmediately: objc.NSUInteger = 4;

pub const DistributedNotificationOptions = objc.NSUInteger;
pub const DistributedNotificationOptions_DeliverImmediately: objc.NSUInteger = 1;
pub const DistributedNotificationOptions_PostToAllSessions: objc.NSUInteger = 2;

/// https://developer.apple.com/documentation/Foundation/NSDistributedNotificationCenter?language=objc
pub const DistributedNotificationCenter = opaque {
    pub const Internal = objc.ExternClass("NSDistributedNotificationCenter", @This(), NotificationCenter, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn addObserverSelectorNameObject(
        _self: *@This(),
        _observer: ?objc.Id,
        _aSelector: objc.Selector,
        _aName: NotificationName,
        _anObject: ?objc.Id,
    ) void {
        return objc.msgSend(_self, "addObserver:selector:name:object:", void, .{
            _observer,
            _aSelector,
            _aName,
            _anObject,
        });
    }

    pub fn postNotification(_self: *@This(), _notification: ?*Notification) void {
        return objc.msgSend(_self, "postNotification:", void, .{_notification});
    }

    pub fn postNotificationNameObject(_self: *@This(), _aName: NotificationName, _anObject: ?objc.Id) void {
        return objc.msgSend(_self, "postNotificationName:object:", void, .{ _aName, _anObject });
    }

    pub fn postNotificationNameObjectUserInfo(_self: *@This(), _aName: NotificationName, _anObject: ?objc.Id, _aUserInfo: ?*Dictionary) void {
        return objc.msgSend(_self, "postNotificationName:object:userInfo:", void, .{ _aName, _anObject, _aUserInfo });
    }

    pub fn removeObserver(_self: *@This(), _observer: ?objc.Id) void {
        return objc.msgSend(_self, "removeObserver:", void, .{_observer});
    }

    pub fn removeObserverNameObject(_self: *@This(), _observer: ?objc.Id, _aName: NotificationName, _anObject: ?objc.Id) void {
        return objc.msgSend(_self, "removeObserver:name:object:", void, .{ _observer, _aName, _anObject });
    }

    pub fn addObserverForNameObjectQueueUsingBlock(
        _self: *@This(),
        _name: NotificationName,
        _obj: ?objc.Id,
        _queue: ?*OperationQueue,
        _block: *const fn (?*Notification) callconv(.C) void,
    ) ?*anyopaque {
        return objc.msgSend(_self, "addObserverForName:object:queue:usingBlock:", ?*anyopaque, .{
            _name,
            _obj,
            _queue,
            _block,
        });
    }

    pub fn defaultCenter() ?*NotificationCenter {
        return objc.msgSend(Internal.class(), "defaultCenter", ?*NotificationCenter, .{});
    }

    pub fn notificationCenterForType(_notificationCenterType: DistributedNotificationCenterType) ?*DistributedNotificationCenter {
        return objc.msgSend(Internal.class(), "notificationCenterForType:", ?*DistributedNotificationCenter, .{_notificationCenterType});
    }

    pub fn addObserverSelectorNameObjectSuspensionBehavior(
        _self: *@This(),
        _observer: ?objc.Id,
        _selector: objc.Selector,
        _name: NotificationName,
        _object: ?*String,
        _suspensionBehavior: NotificationSuspensionBehavior,
    ) void {
        return objc.msgSend(_self, "addObserver:selector:name:object:suspensionBehavior:", void, .{
            _observer,
            _selector,
            _name,
            _object,
            _suspensionBehavior,
        });
    }

    pub fn postNotificationNameObjectUserInfoDeliverImmediately(
        _self: *@This(),
        _name: NotificationName,
        _object: ?*String,
        _userInfo: ?*Dictionary,
        _deliverImmediately: objc.BOOL,
    ) void {
        return objc.msgSend(_self, "postNotificationName:object:userInfo:deliverImmediately:", void, .{
            _name,
            _object,
            _userInfo,
            _deliverImmediately,
        });
    }

    pub fn postNotificationNameObjectUserInfoOptions(
        _self: *@This(),
        _name: NotificationName,
        _object: ?*String,
        _userInfo: ?*Dictionary,
        _options: DistributedNotificationOptions,
    ) void {
        return objc.msgSend(_self, "postNotificationName:object:userInfo:options:", void, .{
            _name,
            _object,
            _userInfo,
            _options,
        });
    }

    pub fn suspended(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "suspended", objc.BOOL, .{});
    }

    pub fn setSuspended(_self: *@This(), _suspended: objc.BOOL) void {
        return objc.msgSend(_self, "setSuspended:", void, .{_suspended});
    }
};

/// https://developer.apple.com/documentation/Foundation/NSPortCoder?language=objc
pub const PortCoder = opaque {
    pub const Internal = objc.ExternClass("NSPortCoder", @This(), Coder, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn encodeValueOfObjCTypeAt(_self: *@This(), _type: ?*i8, _addr: ?*anyopaque) void {
        return objc.msgSend(_self, "encodeValueOfObjCType:at:", void, .{ _type, _addr });
    }

    pub fn encodeDataObject(_self: *@This(), _data: ?*Data) void {
        return objc.msgSend(_self, "encodeDataObject:", void, .{_data});
    }

    pub fn decodeDataObject(_self: *@This()) ?*Data {
        return objc.msgSend(_self, "decodeDataObject", ?*Data, .{});
    }

    pub fn decodeValueOfObjCTypeAtSize(_self: *@This(), _type: ?*i8, _data: ?*anyopaque, _size: objc.NSUInteger) void {
        return objc.msgSend(_self, "decodeValueOfObjCType:at:size:", void, .{ _type, _data, _size });
    }

    pub fn versionForClassName(_self: *@This(), _className: ?*String) objc.NSInteger {
        return objc.msgSend(_self, "versionForClassName:", objc.NSInteger, .{_className});
    }

    pub fn isBycopy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isBycopy", objc.BOOL, .{});
    }

    pub fn isByref(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isByref", objc.BOOL, .{});
    }

    pub fn encodePortObject(_self: *@This(), _aport: ?*Port) void {
        return objc.msgSend(_self, "encodePortObject:", void, .{_aport});
    }

    pub fn decodePortObject(_self: *@This()) ?*Port {
        return objc.msgSend(_self, "decodePortObject", ?*Port, .{});
    }

    pub fn connection(_self: *@This()) ?*Connection {
        return objc.msgSend(_self, "connection", ?*Connection, .{});
    }

    pub fn portCoderWithReceivePortSendPortComponents(_rcvPort: ?*Port, _sndPort: ?*Port, _comps: ?*Array) ?objc.Id {
        return objc.msgSend(Internal.class(), "portCoderWithReceivePort:sendPort:components:", ?objc.Id, .{ _rcvPort, _sndPort, _comps });
    }

    pub fn initWithReceivePortSendPortComponents(_self: *@This(), _rcvPort: ?*Port, _sndPort: ?*Port, _comps: ?*Array) ?objc.Id {
        return objc.msgSend(_self, "initWithReceivePort:sendPort:components:", ?objc.Id, .{ _rcvPort, _sndPort, _comps });
    }

    pub fn dispatch(_self: *@This()) void {
        return objc.msgSend(_self, "dispatch", void, .{});
    }
};

/// https://developer.apple.com/documentation/Foundation/NSPortMessage?language=objc
pub const PortMessage = opaque {
    pub const Internal = objc.ExternClass("NSPortMessage", @This(), objc.NSObject, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn initWithSendPortReceivePortComponents(_self: *@This(), _sendPort: ?*Port, _replyPort: ?*Port, _components: ?*Array) *@This() {
        return objc.msgSend(_self, "initWithSendPort:receivePort:components:", *@This(), .{ _sendPort, _replyPort, _components });
    }

    pub fn sendBeforeDate(_self: *@This(), _date: ?*Date) objc.BOOL {
        return objc.msgSend(_self, "sendBeforeDate:", objc.BOOL, .{_date});
    }

    pub fn components(_self: *@This()) ?*Array {
        return objc.msgSend(_self, "components", ?*Array, .{});
    }

    pub fn receivePort(_self: *@This()) ?*Port {
        return objc.msgSend(_self, "receivePort", ?*Port, .{});
    }

    pub fn sendPort(_self: *@This()) ?*Port {
        return objc.msgSend(_self, "sendPort", ?*Port, .{});
    }

    pub fn msgid(_self: *@This()) objc.uint32_t {
        return objc.msgSend(_self, "msgid", objc.uint32_t, .{});
    }

    pub fn setMsgid(_self: *@This(), _msgid: objc.uint32_t) void {
        return objc.msgSend(_self, "setMsgid:", void, .{_msgid});
    }
};

/// https://developer.apple.com/documentation/Foundation/NSPortNameServer?language=objc
pub const PortNameServer = opaque {
    pub const Internal = objc.ExternClass("NSPortNameServer", @This(), objc.NSObject, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn systemDefaultPortNameServer() ?*PortNameServer {
        return objc.msgSend(Internal.class(), "systemDefaultPortNameServer", ?*PortNameServer, .{});
    }

    pub fn portForName(_self: *@This(), _name: ?*String) ?*Port {
        return objc.msgSend(_self, "portForName:", ?*Port, .{_name});
    }

    pub fn portForNameHost(_self: *@This(), _name: ?*String, _host: ?*String) ?*Port {
        return objc.msgSend(_self, "portForName:host:", ?*Port, .{ _name, _host });
    }

    pub fn registerPortName(_self: *@This(), _port: ?*Port, _name: ?*String) objc.BOOL {
        return objc.msgSend(_self, "registerPort:name:", objc.BOOL, .{ _port, _name });
    }

    pub fn removePortForName(_self: *@This(), _name: ?*String) objc.BOOL {
        return objc.msgSend(_self, "removePortForName:", objc.BOOL, .{_name});
    }
};

/// https://developer.apple.com/documentation/Foundation/NSMachBootstrapServer?language=objc
pub const MachBootstrapServer = opaque {
    pub const Internal = objc.ExternClass("NSMachBootstrapServer", @This(), PortNameServer, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn systemDefaultPortNameServer() ?*PortNameServer {
        return objc.msgSend(Internal.class(), "systemDefaultPortNameServer", ?*PortNameServer, .{});
    }

    pub fn portForName(_self: *@This(), _name: ?*String) ?*Port {
        return objc.msgSend(_self, "portForName:", ?*Port, .{_name});
    }

    pub fn portForNameHost(_self: *@This(), _name: ?*String, _host: ?*String) ?*Port {
        return objc.msgSend(_self, "portForName:host:", ?*Port, .{ _name, _host });
    }

    pub fn registerPortName(_self: *@This(), _port: ?*Port, _name: ?*String) objc.BOOL {
        return objc.msgSend(_self, "registerPort:name:", objc.BOOL, .{ _port, _name });
    }

    pub fn removePortForName(_self: *@This(), _name: ?*String) objc.BOOL {
        return objc.msgSend(_self, "removePortForName:", objc.BOOL, .{_name});
    }

    pub fn sharedInstance() ?objc.Id {
        return objc.msgSend(Internal.class(), "sharedInstance", ?objc.Id, .{});
    }

    pub fn servicePortWithName(_self: *@This(), _name: ?*String) ?*Port {
        return objc.msgSend(_self, "servicePortWithName:", ?*Port, .{_name});
    }
};

/// https://developer.apple.com/documentation/Foundation/NSMessagePortNameServer?language=objc
pub const MessagePortNameServer = opaque {
    pub const Internal = objc.ExternClass("NSMessagePortNameServer", @This(), PortNameServer, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn systemDefaultPortNameServer() ?*PortNameServer {
        return objc.msgSend(Internal.class(), "systemDefaultPortNameServer", ?*PortNameServer, .{});
    }

    pub fn portForName(_self: *@This(), _name: ?*String) ?*Port {
        return objc.msgSend(_self, "portForName:", ?*Port, .{_name});
    }

    pub fn portForNameHost(_self: *@This(), _name: ?*String, _host: ?*String) ?*Port {
        return objc.msgSend(_self, "portForName:host:", ?*Port, .{ _name, _host });
    }

    pub fn registerPortName(_self: *@This(), _port: ?*Port, _name: ?*String) objc.BOOL {
        return objc.msgSend(_self, "registerPort:name:", objc.BOOL, .{ _port, _name });
    }

    pub fn removePortForName(_self: *@This(), _name: ?*String) objc.BOOL {
        return objc.msgSend(_self, "removePortForName:", objc.BOOL, .{_name});
    }

    pub fn sharedInstance() ?objc.Id {
        return objc.msgSend(Internal.class(), "sharedInstance", ?objc.Id, .{});
    }
};

/// https://developer.apple.com/documentation/Foundation/NSSocketPortNameServer?language=objc
pub const SocketPortNameServer = opaque {
    pub const Internal = objc.ExternClass("NSSocketPortNameServer", @This(), PortNameServer, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn systemDefaultPortNameServer() ?*PortNameServer {
        return objc.msgSend(Internal.class(), "systemDefaultPortNameServer", ?*PortNameServer, .{});
    }

    pub fn portForName(_self: *@This(), _name: ?*String) ?*Port {
        return objc.msgSend(_self, "portForName:", ?*Port, .{_name});
    }

    pub fn portForNameHost(_self: *@This(), _name: ?*String, _host: ?*String) ?*Port {
        return objc.msgSend(_self, "portForName:host:", ?*Port, .{ _name, _host });
    }

    pub fn registerPortName(_self: *@This(), _port: ?*Port, _name: ?*String) objc.BOOL {
        return objc.msgSend(_self, "registerPort:name:", objc.BOOL, .{ _port, _name });
    }

    pub fn removePortForName(_self: *@This(), _name: ?*String) objc.BOOL {
        return objc.msgSend(_self, "removePortForName:", objc.BOOL, .{_name});
    }

    pub fn sharedInstance() ?objc.Id {
        return objc.msgSend(Internal.class(), "sharedInstance", ?objc.Id, .{});
    }

    pub fn portForNameHostNameServerPortNumber(_self: *@This(), _name: ?*String, _host: ?*String, _portNumber: objc.uint16_t) ?*Port {
        return objc.msgSend(_self, "portForName:host:nameServerPortNumber:", ?*Port, .{ _name, _host, _portNumber });
    }

    pub fn registerPortNameNameServerPortNumber(_self: *@This(), _port: ?*Port, _name: ?*String, _portNumber: objc.uint16_t) objc.BOOL {
        return objc.msgSend(_self, "registerPort:name:nameServerPortNumber:", objc.BOOL, .{ _port, _name, _portNumber });
    }

    pub fn defaultNameServerPortNumber(_self: *@This()) objc.uint16_t {
        return objc.msgSend(_self, "defaultNameServerPortNumber", objc.uint16_t, .{});
    }

    pub fn setDefaultNameServerPortNumber(_self: *@This(), _defaultNameServerPortNumber: objc.uint16_t) void {
        return objc.msgSend(_self, "setDefaultNameServerPortNumber:", void, .{_defaultNameServerPortNumber});
    }
};

/// https://developer.apple.com/documentation/Foundation/NSProtocolChecker?language=objc
pub const ProtocolChecker = opaque {
    pub const Internal = objc.ExternClass("NSProtocolChecker", @This(), Proxy, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn allocWithZone(_zone: ?*Zone) ?objc.Id {
        return objc.msgSend(Internal.class(), "allocWithZone:", ?objc.Id, .{_zone});
    }

    pub fn forwardInvocation(_self: *@This(), _invocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_invocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _sel: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_sel});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn protocol(_self: *@This()) ?**objc.Protocol {
        return objc.msgSend(_self, "protocol", ?**objc.Protocol, .{});
    }

    pub fn target(_self: *@This()) ?*objc.NSObject {
        return objc.msgSend(_self, "target", ?*objc.NSObject, .{});
    }
};

pub const TaskTerminationReason = objc.NSInteger;
pub const TaskTerminationReason_Exit: objc.NSInteger = 1;
pub const TaskTerminationReason_UncaughtSignal: objc.NSInteger = 2;

/// https://developer.apple.com/documentation/Foundation/NSTask?language=objc
pub const Task = opaque {
    pub const Internal = objc.ExternClass("NSTask", @This(), objc.NSObject, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn launchAndReturnError(_self: *@This(), _error: ?*?*Error) objc.BOOL {
        return objc.msgSend(_self, "launchAndReturnError:", objc.BOOL, .{_error});
    }

    pub fn interrupt(_self: *@This()) void {
        return objc.msgSend(_self, "interrupt", void, .{});
    }

    pub fn terminate(_self: *@This()) void {
        return objc.msgSend(_self, "terminate", void, .{});
    }

    pub fn @"suspend"(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "suspend", objc.BOOL, .{});
    }

    pub fn @"resume"(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "resume", objc.BOOL, .{});
    }

    pub fn executableURL(_self: *@This()) ?*URL {
        return objc.msgSend(_self, "executableURL", ?*URL, .{});
    }

    pub fn setExecutableURL(_self: *@This(), _executableURL: ?*URL) void {
        return objc.msgSend(_self, "setExecutableURL:", void, .{_executableURL});
    }

    pub fn arguments(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "arguments", ?*anyopaque, .{});
    }

    pub fn setArguments(_self: *@This(), _arguments: ?*anyopaque) void {
        return objc.msgSend(_self, "setArguments:", void, .{_arguments});
    }

    pub fn environment(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "environment", ?*anyopaque, .{});
    }

    pub fn setEnvironment(_self: *@This(), _environment: ?*anyopaque) void {
        return objc.msgSend(_self, "setEnvironment:", void, .{_environment});
    }

    pub fn currentDirectoryURL(_self: *@This()) ?*URL {
        return objc.msgSend(_self, "currentDirectoryURL", ?*URL, .{});
    }

    pub fn setCurrentDirectoryURL(_self: *@This(), _currentDirectoryURL: ?*URL) void {
        return objc.msgSend(_self, "setCurrentDirectoryURL:", void, .{_currentDirectoryURL});
    }

    pub fn launchRequirementData(_self: *@This()) ?*Data {
        return objc.msgSend(_self, "launchRequirementData", ?*Data, .{});
    }

    pub fn setLaunchRequirementData(_self: *@This(), _launchRequirementData: ?*Data) void {
        return objc.msgSend(_self, "setLaunchRequirementData:", void, .{_launchRequirementData});
    }

    pub fn standardInput(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "standardInput", ?objc.Id, .{});
    }

    pub fn setStandardInput(_self: *@This(), _standardInput: ?objc.Id) void {
        return objc.msgSend(_self, "setStandardInput:", void, .{_standardInput});
    }

    pub fn standardOutput(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "standardOutput", ?objc.Id, .{});
    }

    pub fn setStandardOutput(_self: *@This(), _standardOutput: ?objc.Id) void {
        return objc.msgSend(_self, "setStandardOutput:", void, .{_standardOutput});
    }

    pub fn standardError(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "standardError", ?objc.Id, .{});
    }

    pub fn setStandardError(_self: *@This(), _standardError: ?objc.Id) void {
        return objc.msgSend(_self, "setStandardError:", void, .{_standardError});
    }

    pub fn processIdentifier(_self: *@This()) i32 {
        return objc.msgSend(_self, "processIdentifier", i32, .{});
    }

    pub fn isRunning(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isRunning", objc.BOOL, .{});
    }

    pub fn terminationStatus(_self: *@This()) i32 {
        return objc.msgSend(_self, "terminationStatus", i32, .{});
    }

    pub fn terminationReason(_self: *@This()) TaskTerminationReason {
        return objc.msgSend(_self, "terminationReason", TaskTerminationReason, .{});
    }

    pub fn terminationHandler(_self: *@This()) *const fn (?*Task) callconv(.C) void {
        return objc.msgSend(_self, "terminationHandler", *const fn (?*Task) callconv(.C) void, .{});
    }

    pub fn setTerminationHandler(_self: *@This(), _terminationHandler: *const fn (?*Task) callconv(.C) void) void {
        return objc.msgSend(_self, "setTerminationHandler:", void, .{_terminationHandler});
    }

    pub fn qualityOfService(_self: *@This()) QualityOfService {
        return objc.msgSend(_self, "qualityOfService", QualityOfService, .{});
    }

    pub fn setQualityOfService(_self: *@This(), _qualityOfService: QualityOfService) void {
        return objc.msgSend(_self, "setQualityOfService:", void, .{_qualityOfService});
    }
};

pub const XMLNodeOptions = objc.NSUInteger;
pub const XMLNodeOptions_None: objc.NSUInteger = 0;
pub const XMLNodeOptions_IsCDATA: objc.NSUInteger = 1;
pub const XMLNodeOptions_ExpandEmptyElement: objc.NSUInteger = 2;
pub const XMLNodeOptions_CompactEmptyElement: objc.NSUInteger = 4;
pub const XMLNodeOptions_UseSingleQuotes: objc.NSUInteger = 8;
pub const XMLNodeOptions_UseDoubleQuotes: objc.NSUInteger = 16;
pub const XMLNodeOptions_NeverEscapeContents: objc.NSUInteger = 32;
pub const XMLNodeOptions_DocumentTidyHTML: objc.NSUInteger = 512;
pub const XMLNodeOptions_DocumentTidyXML: objc.NSUInteger = 1024;
pub const XMLNodeOptions_DocumentValidate: objc.NSUInteger = 8192;
pub const XMLNodeOptions_LoadExternalEntitiesAlways: objc.NSUInteger = 16384;
pub const XMLNodeOptions_LoadExternalEntitiesSameOriginOnly: objc.NSUInteger = 32768;
pub const XMLNodeOptions_LoadExternalEntitiesNever: objc.NSUInteger = 524288;
pub const XMLNodeOptions_DocumentXInclude: objc.NSUInteger = 65536;
pub const XMLNodeOptions_PrettyPrint: objc.NSUInteger = 131072;
pub const XMLNodeOptions_DocumentIncludeContentTypeDeclaration: objc.NSUInteger = 262144;
pub const XMLNodeOptions_PreserveNamespaceOrder: objc.NSUInteger = 1048576;
pub const XMLNodeOptions_PreserveAttributeOrder: objc.NSUInteger = 2097152;
pub const XMLNodeOptions_PreserveEntities: objc.NSUInteger = 4194304;
pub const XMLNodeOptions_PreservePrefixes: objc.NSUInteger = 8388608;
pub const XMLNodeOptions_PreserveCDATA: objc.NSUInteger = 16777216;
pub const XMLNodeOptions_PreserveWhitespace: objc.NSUInteger = 33554432;
pub const XMLNodeOptions_PreserveDTD: objc.NSUInteger = 67108864;
pub const XMLNodeOptions_PreserveCharacterReferences: objc.NSUInteger = 134217728;
pub const XMLNodeOptions_PromoteSignificantWhitespace: objc.NSUInteger = 268435456;
pub const XMLNodeOptions_PreserveEmptyElements: objc.NSUInteger = 6;
pub const XMLNodeOptions_PreserveQuotes: objc.NSUInteger = 24;
pub const XMLNodeOptions_PreserveAll: objc.NSUInteger = 4293918750;

pub const XMLNodeKind = objc.NSUInteger;
pub const XMLNodeKind_InvalidKind: objc.NSUInteger = 0;
pub const XMLNodeKind_DocumentKind: objc.NSUInteger = 1;
pub const XMLNodeKind_ElementKind: objc.NSUInteger = 2;
pub const XMLNodeKind_AttributeKind: objc.NSUInteger = 3;
pub const XMLNodeKind_NamespaceKind: objc.NSUInteger = 4;
pub const XMLNodeKind_ProcessingInstructionKind: objc.NSUInteger = 5;
pub const XMLNodeKind_CommentKind: objc.NSUInteger = 6;
pub const XMLNodeKind_TextKind: objc.NSUInteger = 7;
pub const XMLNodeKind_DTDKind: objc.NSUInteger = 8;
pub const XMLNodeKind_EntityDeclarationKind: objc.NSUInteger = 9;
pub const XMLNodeKind_AttributeDeclarationKind: objc.NSUInteger = 10;
pub const XMLNodeKind_ElementDeclarationKind: objc.NSUInteger = 11;
pub const XMLNodeKind_NotationDeclarationKind: objc.NSUInteger = 12;

/// https://developer.apple.com/documentation/Foundation/NSXMLNode?language=objc
pub const XMLNode = opaque {
    pub const Internal = objc.ExternClass("NSXMLNode", @This(), objc.NSObject, &.{Copying});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn initWithKind(_self: *@This(), _kind: XMLNodeKind) *@This() {
        return objc.msgSend(_self, "initWithKind:", *@This(), .{_kind});
    }

    pub fn initWithKindOptions(_self: *@This(), _kind: XMLNodeKind, _options: XMLNodeOptions) *@This() {
        return objc.msgSend(_self, "initWithKind:options:", *@This(), .{ _kind, _options });
    }

    pub fn document() ?objc.Id {
        return objc.msgSend(Internal.class(), "document", ?objc.Id, .{});
    }

    pub fn documentWithRootElement(_element: ?*XMLElement) ?objc.Id {
        return objc.msgSend(Internal.class(), "documentWithRootElement:", ?objc.Id, .{_element});
    }

    pub fn elementWithName(_name: ?*String) ?objc.Id {
        return objc.msgSend(Internal.class(), "elementWithName:", ?objc.Id, .{_name});
    }

    pub fn elementWithNameURI(_name: ?*String, _URI: ?*String) ?objc.Id {
        return objc.msgSend(Internal.class(), "elementWithName:URI:", ?objc.Id, .{ _name, _URI });
    }

    pub fn elementWithNameStringValue(_name: ?*String, _string: ?*String) ?objc.Id {
        return objc.msgSend(Internal.class(), "elementWithName:stringValue:", ?objc.Id, .{ _name, _string });
    }

    pub fn elementWithNameChildrenAttributes(_name: ?*String, _children: ?*anyopaque, _attributes: ?*anyopaque) ?objc.Id {
        return objc.msgSend(Internal.class(), "elementWithName:children:attributes:", ?objc.Id, .{ _name, _children, _attributes });
    }

    pub fn attributeWithNameStringValue(_name: ?*String, _stringValue: ?*String) ?objc.Id {
        return objc.msgSend(Internal.class(), "attributeWithName:stringValue:", ?objc.Id, .{ _name, _stringValue });
    }

    pub fn attributeWithNameURIStringValue(_name: ?*String, _URI: ?*String, _stringValue: ?*String) ?objc.Id {
        return objc.msgSend(Internal.class(), "attributeWithName:URI:stringValue:", ?objc.Id, .{ _name, _URI, _stringValue });
    }

    pub fn namespaceWithNameStringValue(_name: ?*String, _stringValue: ?*String) ?objc.Id {
        return objc.msgSend(Internal.class(), "namespaceWithName:stringValue:", ?objc.Id, .{ _name, _stringValue });
    }

    pub fn processingInstructionWithNameStringValue(_name: ?*String, _stringValue: ?*String) ?objc.Id {
        return objc.msgSend(Internal.class(), "processingInstructionWithName:stringValue:", ?objc.Id, .{ _name, _stringValue });
    }

    pub fn commentWithStringValue(_stringValue: ?*String) ?objc.Id {
        return objc.msgSend(Internal.class(), "commentWithStringValue:", ?objc.Id, .{_stringValue});
    }

    pub fn textWithStringValue(_stringValue: ?*String) ?objc.Id {
        return objc.msgSend(Internal.class(), "textWithStringValue:", ?objc.Id, .{_stringValue});
    }

    pub fn dtdNodeWithXMLString(_string: ?*String) ?objc.Id {
        return objc.msgSend(Internal.class(), "DTDNodeWithXMLString:", ?objc.Id, .{_string});
    }

    pub fn setStringValueResolvingEntities(_self: *@This(), _string: ?*String, _resolve: objc.BOOL) void {
        return objc.msgSend(_self, "setStringValue:resolvingEntities:", void, .{ _string, _resolve });
    }

    pub fn childAtIndex(_self: *@This(), _index: objc.NSUInteger) ?*XMLNode {
        return objc.msgSend(_self, "childAtIndex:", ?*XMLNode, .{_index});
    }

    pub fn detach(_self: *@This()) void {
        return objc.msgSend(_self, "detach", void, .{});
    }

    pub fn localNameForName(_name: ?*String) ?*String {
        return objc.msgSend(Internal.class(), "localNameForName:", ?*String, .{_name});
    }

    pub fn prefixForName(_name: ?*String) ?*String {
        return objc.msgSend(Internal.class(), "prefixForName:", ?*String, .{_name});
    }

    pub fn predefinedNamespaceForPrefix(_name: ?*String) ?*XMLNode {
        return objc.msgSend(Internal.class(), "predefinedNamespaceForPrefix:", ?*XMLNode, .{_name});
    }

    pub fn xmlStringWithOptions(_self: *@This(), _options: XMLNodeOptions) ?*String {
        return objc.msgSend(_self, "XMLStringWithOptions:", ?*String, .{_options});
    }

    pub fn canonicalXMLStringPreservingComments(_self: *@This(), _comments: objc.BOOL) ?*String {
        return objc.msgSend(_self, "canonicalXMLStringPreservingComments:", ?*String, .{_comments});
    }

    pub fn nodesForXPathError(_self: *@This(), _xpath: ?*String, _error: ?*?*Error) ?*anyopaque {
        return objc.msgSend(_self, "nodesForXPath:error:", ?*anyopaque, .{ _xpath, _error });
    }

    pub fn objectsForXQueryConstantsError(_self: *@This(), _xquery: ?*String, _constants: ?*anyopaque, _error: ?*?*Error) ?*Array {
        return objc.msgSend(_self, "objectsForXQuery:constants:error:", ?*Array, .{ _xquery, _constants, _error });
    }

    pub fn objectsForXQueryError(_self: *@This(), _xquery: ?*String, _error: ?*?*Error) ?*Array {
        return objc.msgSend(_self, "objectsForXQuery:error:", ?*Array, .{ _xquery, _error });
    }

    pub fn kind(_self: *@This()) XMLNodeKind {
        return objc.msgSend(_self, "kind", XMLNodeKind, .{});
    }

    pub fn name(_self: *@This()) ?*String {
        return objc.msgSend(_self, "name", ?*String, .{});
    }

    pub fn setName(_self: *@This(), _name: ?*String) void {
        return objc.msgSend(_self, "setName:", void, .{_name});
    }

    pub fn objectValue(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "objectValue", ?objc.Id, .{});
    }

    pub fn setObjectValue(_self: *@This(), _objectValue: ?objc.Id) void {
        return objc.msgSend(_self, "setObjectValue:", void, .{_objectValue});
    }

    pub fn stringValue(_self: *@This()) ?*String {
        return objc.msgSend(_self, "stringValue", ?*String, .{});
    }

    pub fn setStringValue(_self: *@This(), _stringValue: ?*String) void {
        return objc.msgSend(_self, "setStringValue:", void, .{_stringValue});
    }

    pub fn index(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "index", objc.NSUInteger, .{});
    }

    pub fn level(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "level", objc.NSUInteger, .{});
    }

    pub fn rootDocument(_self: *@This()) ?*XMLDocument {
        return objc.msgSend(_self, "rootDocument", ?*XMLDocument, .{});
    }

    pub fn parent(_self: *@This()) ?*XMLNode {
        return objc.msgSend(_self, "parent", ?*XMLNode, .{});
    }

    pub fn childCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "childCount", objc.NSUInteger, .{});
    }

    pub fn children(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "children", ?*anyopaque, .{});
    }

    pub fn previousSibling(_self: *@This()) ?*XMLNode {
        return objc.msgSend(_self, "previousSibling", ?*XMLNode, .{});
    }

    pub fn nextSibling(_self: *@This()) ?*XMLNode {
        return objc.msgSend(_self, "nextSibling", ?*XMLNode, .{});
    }

    pub fn previousNode(_self: *@This()) ?*XMLNode {
        return objc.msgSend(_self, "previousNode", ?*XMLNode, .{});
    }

    pub fn nextNode(_self: *@This()) ?*XMLNode {
        return objc.msgSend(_self, "nextNode", ?*XMLNode, .{});
    }

    pub fn xPath(_self: *@This()) ?*String {
        return objc.msgSend(_self, "XPath", ?*String, .{});
    }

    pub fn localName(_self: *@This()) ?*String {
        return objc.msgSend(_self, "localName", ?*String, .{});
    }

    pub fn prefix(_self: *@This()) ?*String {
        return objc.msgSend(_self, "prefix", ?*String, .{});
    }

    pub fn uri(_self: *@This()) ?*String {
        return objc.msgSend(_self, "URI", ?*String, .{});
    }

    pub fn setURI(_self: *@This(), _URI: ?*String) void {
        return objc.msgSend(_self, "setURI:", void, .{_URI});
    }

    pub fn xmlString(_self: *@This()) ?*String {
        return objc.msgSend(_self, "XMLString", ?*String, .{});
    }
};

/// https://developer.apple.com/documentation/Foundation/NSXMLDTD?language=objc
pub const XMLDTD = opaque {
    pub const Internal = objc.ExternClass("NSXMLDTD", @This(), XMLNode, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn initWithKind(_self: *@This(), _kind: XMLNodeKind) *@This() {
        return objc.msgSend(_self, "initWithKind:", *@This(), .{_kind});
    }

    pub fn initWithKindOptions(_self: *@This(), _kind: XMLNodeKind, _options: XMLNodeOptions) *@This() {
        return objc.msgSend(_self, "initWithKind:options:", *@This(), .{ _kind, _options });
    }

    pub fn document() ?objc.Id {
        return objc.msgSend(Internal.class(), "document", ?objc.Id, .{});
    }

    pub fn documentWithRootElement(_element: ?*XMLElement) ?objc.Id {
        return objc.msgSend(Internal.class(), "documentWithRootElement:", ?objc.Id, .{_element});
    }

    pub fn elementWithName(_name: ?*String) ?objc.Id {
        return objc.msgSend(Internal.class(), "elementWithName:", ?objc.Id, .{_name});
    }

    pub fn elementWithNameURI(_name: ?*String, _URI: ?*String) ?objc.Id {
        return objc.msgSend(Internal.class(), "elementWithName:URI:", ?objc.Id, .{ _name, _URI });
    }

    pub fn elementWithNameStringValue(_name: ?*String, _string: ?*String) ?objc.Id {
        return objc.msgSend(Internal.class(), "elementWithName:stringValue:", ?objc.Id, .{ _name, _string });
    }

    pub fn elementWithNameChildrenAttributes(_name: ?*String, _children: ?*anyopaque, _attributes: ?*anyopaque) ?objc.Id {
        return objc.msgSend(Internal.class(), "elementWithName:children:attributes:", ?objc.Id, .{ _name, _children, _attributes });
    }

    pub fn attributeWithNameStringValue(_name: ?*String, _stringValue: ?*String) ?objc.Id {
        return objc.msgSend(Internal.class(), "attributeWithName:stringValue:", ?objc.Id, .{ _name, _stringValue });
    }

    pub fn attributeWithNameURIStringValue(_name: ?*String, _URI: ?*String, _stringValue: ?*String) ?objc.Id {
        return objc.msgSend(Internal.class(), "attributeWithName:URI:stringValue:", ?objc.Id, .{ _name, _URI, _stringValue });
    }

    pub fn namespaceWithNameStringValue(_name: ?*String, _stringValue: ?*String) ?objc.Id {
        return objc.msgSend(Internal.class(), "namespaceWithName:stringValue:", ?objc.Id, .{ _name, _stringValue });
    }

    pub fn processingInstructionWithNameStringValue(_name: ?*String, _stringValue: ?*String) ?objc.Id {
        return objc.msgSend(Internal.class(), "processingInstructionWithName:stringValue:", ?objc.Id, .{ _name, _stringValue });
    }

    pub fn commentWithStringValue(_stringValue: ?*String) ?objc.Id {
        return objc.msgSend(Internal.class(), "commentWithStringValue:", ?objc.Id, .{_stringValue});
    }

    pub fn textWithStringValue(_stringValue: ?*String) ?objc.Id {
        return objc.msgSend(Internal.class(), "textWithStringValue:", ?objc.Id, .{_stringValue});
    }

    pub fn dtdNodeWithXMLString(_string: ?*String) ?objc.Id {
        return objc.msgSend(Internal.class(), "DTDNodeWithXMLString:", ?objc.Id, .{_string});
    }

    pub fn setStringValueResolvingEntities(_self: *@This(), _string: ?*String, _resolve: objc.BOOL) void {
        return objc.msgSend(_self, "setStringValue:resolvingEntities:", void, .{ _string, _resolve });
    }

    pub fn childAtIndex(_self: *@This(), _index: objc.NSUInteger) ?*XMLNode {
        return objc.msgSend(_self, "childAtIndex:", ?*XMLNode, .{_index});
    }

    pub fn detach(_self: *@This()) void {
        return objc.msgSend(_self, "detach", void, .{});
    }

    pub fn localNameForName(_name: ?*String) ?*String {
        return objc.msgSend(Internal.class(), "localNameForName:", ?*String, .{_name});
    }

    pub fn prefixForName(_name: ?*String) ?*String {
        return objc.msgSend(Internal.class(), "prefixForName:", ?*String, .{_name});
    }

    pub fn predefinedNamespaceForPrefix(_name: ?*String) ?*XMLNode {
        return objc.msgSend(Internal.class(), "predefinedNamespaceForPrefix:", ?*XMLNode, .{_name});
    }

    pub fn xmlStringWithOptions(_self: *@This(), _options: XMLNodeOptions) ?*String {
        return objc.msgSend(_self, "XMLStringWithOptions:", ?*String, .{_options});
    }

    pub fn canonicalXMLStringPreservingComments(_self: *@This(), _comments: objc.BOOL) ?*String {
        return objc.msgSend(_self, "canonicalXMLStringPreservingComments:", ?*String, .{_comments});
    }

    pub fn nodesForXPathError(_self: *@This(), _xpath: ?*String, _error: ?*?*Error) ?*anyopaque {
        return objc.msgSend(_self, "nodesForXPath:error:", ?*anyopaque, .{ _xpath, _error });
    }

    pub fn objectsForXQueryConstantsError(_self: *@This(), _xquery: ?*String, _constants: ?*anyopaque, _error: ?*?*Error) ?*Array {
        return objc.msgSend(_self, "objectsForXQuery:constants:error:", ?*Array, .{ _xquery, _constants, _error });
    }

    pub fn objectsForXQueryError(_self: *@This(), _xquery: ?*String, _error: ?*?*Error) ?*Array {
        return objc.msgSend(_self, "objectsForXQuery:error:", ?*Array, .{ _xquery, _error });
    }

    pub fn kind(_self: *@This()) XMLNodeKind {
        return objc.msgSend(_self, "kind", XMLNodeKind, .{});
    }

    pub fn name(_self: *@This()) ?*String {
        return objc.msgSend(_self, "name", ?*String, .{});
    }

    pub fn setName(_self: *@This(), _name: ?*String) void {
        return objc.msgSend(_self, "setName:", void, .{_name});
    }

    pub fn objectValue(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "objectValue", ?objc.Id, .{});
    }

    pub fn setObjectValue(_self: *@This(), _objectValue: ?objc.Id) void {
        return objc.msgSend(_self, "setObjectValue:", void, .{_objectValue});
    }

    pub fn stringValue(_self: *@This()) ?*String {
        return objc.msgSend(_self, "stringValue", ?*String, .{});
    }

    pub fn setStringValue(_self: *@This(), _stringValue: ?*String) void {
        return objc.msgSend(_self, "setStringValue:", void, .{_stringValue});
    }

    pub fn index(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "index", objc.NSUInteger, .{});
    }

    pub fn level(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "level", objc.NSUInteger, .{});
    }

    pub fn rootDocument(_self: *@This()) ?*XMLDocument {
        return objc.msgSend(_self, "rootDocument", ?*XMLDocument, .{});
    }

    pub fn parent(_self: *@This()) ?*XMLNode {
        return objc.msgSend(_self, "parent", ?*XMLNode, .{});
    }

    pub fn childCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "childCount", objc.NSUInteger, .{});
    }

    pub fn children(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "children", ?*anyopaque, .{});
    }

    pub fn previousSibling(_self: *@This()) ?*XMLNode {
        return objc.msgSend(_self, "previousSibling", ?*XMLNode, .{});
    }

    pub fn nextSibling(_self: *@This()) ?*XMLNode {
        return objc.msgSend(_self, "nextSibling", ?*XMLNode, .{});
    }

    pub fn previousNode(_self: *@This()) ?*XMLNode {
        return objc.msgSend(_self, "previousNode", ?*XMLNode, .{});
    }

    pub fn nextNode(_self: *@This()) ?*XMLNode {
        return objc.msgSend(_self, "nextNode", ?*XMLNode, .{});
    }

    pub fn xPath(_self: *@This()) ?*String {
        return objc.msgSend(_self, "XPath", ?*String, .{});
    }

    pub fn localName(_self: *@This()) ?*String {
        return objc.msgSend(_self, "localName", ?*String, .{});
    }

    pub fn prefix(_self: *@This()) ?*String {
        return objc.msgSend(_self, "prefix", ?*String, .{});
    }

    pub fn uri(_self: *@This()) ?*String {
        return objc.msgSend(_self, "URI", ?*String, .{});
    }

    pub fn setURI(_self: *@This(), _URI: ?*String) void {
        return objc.msgSend(_self, "setURI:", void, .{_URI});
    }

    pub fn xmlString(_self: *@This()) ?*String {
        return objc.msgSend(_self, "XMLString", ?*String, .{});
    }

    pub fn initWithContentsOfURLOptionsError(_self: *@This(), _url: ?*URL, _mask: XMLNodeOptions, _error: ?*?*Error) *@This() {
        return objc.msgSend(_self, "initWithContentsOfURL:options:error:", *@This(), .{ _url, _mask, _error });
    }

    pub fn initWithDataOptionsError(_self: *@This(), _data: ?*Data, _mask: XMLNodeOptions, _error: ?*?*Error) *@This() {
        return objc.msgSend(_self, "initWithData:options:error:", *@This(), .{ _data, _mask, _error });
    }

    pub fn insertChildAtIndex(_self: *@This(), _child: ?*XMLNode, _index: objc.NSUInteger) void {
        return objc.msgSend(_self, "insertChild:atIndex:", void, .{ _child, _index });
    }

    pub fn insertChildrenAtIndex(_self: *@This(), _children: ?*anyopaque, _index: objc.NSUInteger) void {
        return objc.msgSend(_self, "insertChildren:atIndex:", void, .{ _children, _index });
    }

    pub fn removeChildAtIndex(_self: *@This(), _index: objc.NSUInteger) void {
        return objc.msgSend(_self, "removeChildAtIndex:", void, .{_index});
    }

    pub fn setChildren(_self: *@This(), _children: ?*anyopaque) void {
        return objc.msgSend(_self, "setChildren:", void, .{_children});
    }

    pub fn addChild(_self: *@This(), _child: ?*XMLNode) void {
        return objc.msgSend(_self, "addChild:", void, .{_child});
    }

    pub fn replaceChildAtIndexWithNode(_self: *@This(), _index: objc.NSUInteger, _node: ?*XMLNode) void {
        return objc.msgSend(_self, "replaceChildAtIndex:withNode:", void, .{ _index, _node });
    }

    pub fn entityDeclarationForName(_self: *@This(), _name: ?*String) ?*XMLDTDNode {
        return objc.msgSend(_self, "entityDeclarationForName:", ?*XMLDTDNode, .{_name});
    }

    pub fn notationDeclarationForName(_self: *@This(), _name: ?*String) ?*XMLDTDNode {
        return objc.msgSend(_self, "notationDeclarationForName:", ?*XMLDTDNode, .{_name});
    }

    pub fn elementDeclarationForName(_self: *@This(), _name: ?*String) ?*XMLDTDNode {
        return objc.msgSend(_self, "elementDeclarationForName:", ?*XMLDTDNode, .{_name});
    }

    pub fn attributeDeclarationForNameElementName(_self: *@This(), _name: ?*String, _elementName: ?*String) ?*XMLDTDNode {
        return objc.msgSend(_self, "attributeDeclarationForName:elementName:", ?*XMLDTDNode, .{ _name, _elementName });
    }

    pub fn predefinedEntityDeclarationForName(_name: ?*String) ?*XMLDTDNode {
        return objc.msgSend(Internal.class(), "predefinedEntityDeclarationForName:", ?*XMLDTDNode, .{_name});
    }

    pub fn publicID(_self: *@This()) ?*String {
        return objc.msgSend(_self, "publicID", ?*String, .{});
    }

    pub fn setPublicID(_self: *@This(), _publicID: ?*String) void {
        return objc.msgSend(_self, "setPublicID:", void, .{_publicID});
    }

    pub fn systemID(_self: *@This()) ?*String {
        return objc.msgSend(_self, "systemID", ?*String, .{});
    }

    pub fn setSystemID(_self: *@This(), _systemID: ?*String) void {
        return objc.msgSend(_self, "setSystemID:", void, .{_systemID});
    }
};

pub const XMLDTDNodeKind = objc.NSUInteger;
pub const XMLDTDNodeKind_EntityGeneralKind: objc.NSUInteger = 1;
pub const XMLDTDNodeKind_EntityParsedKind: objc.NSUInteger = 2;
pub const XMLDTDNodeKind_EntityUnparsedKind: objc.NSUInteger = 3;
pub const XMLDTDNodeKind_EntityParameterKind: objc.NSUInteger = 4;
pub const XMLDTDNodeKind_EntityPredefined: objc.NSUInteger = 5;
pub const XMLDTDNodeKind_AttributeCDATAKind: objc.NSUInteger = 6;
pub const XMLDTDNodeKind_AttributeIDKind: objc.NSUInteger = 7;
pub const XMLDTDNodeKind_AttributeIDRefKind: objc.NSUInteger = 8;
pub const XMLDTDNodeKind_AttributeIDRefsKind: objc.NSUInteger = 9;
pub const XMLDTDNodeKind_AttributeEntityKind: objc.NSUInteger = 10;
pub const XMLDTDNodeKind_AttributeEntitiesKind: objc.NSUInteger = 11;
pub const XMLDTDNodeKind_AttributeNMTokenKind: objc.NSUInteger = 12;
pub const XMLDTDNodeKind_AttributeNMTokensKind: objc.NSUInteger = 13;
pub const XMLDTDNodeKind_AttributeEnumerationKind: objc.NSUInteger = 14;
pub const XMLDTDNodeKind_AttributeNotationKind: objc.NSUInteger = 15;
pub const XMLDTDNodeKind_ElementDeclarationUndefinedKind: objc.NSUInteger = 16;
pub const XMLDTDNodeKind_ElementDeclarationEmptyKind: objc.NSUInteger = 17;
pub const XMLDTDNodeKind_ElementDeclarationAnyKind: objc.NSUInteger = 18;
pub const XMLDTDNodeKind_ElementDeclarationMixedKind: objc.NSUInteger = 19;
pub const XMLDTDNodeKind_ElementDeclarationElementKind: objc.NSUInteger = 20;

/// https://developer.apple.com/documentation/Foundation/NSXMLDTDNode?language=objc
pub const XMLDTDNode = opaque {
    pub const Internal = objc.ExternClass("NSXMLDTDNode", @This(), XMLNode, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn initWithKind(_self: *@This(), _kind: XMLNodeKind) *@This() {
        return objc.msgSend(_self, "initWithKind:", *@This(), .{_kind});
    }

    pub fn initWithKindOptions(_self: *@This(), _kind: XMLNodeKind, _options: XMLNodeOptions) *@This() {
        return objc.msgSend(_self, "initWithKind:options:", *@This(), .{ _kind, _options });
    }

    pub fn document() ?objc.Id {
        return objc.msgSend(Internal.class(), "document", ?objc.Id, .{});
    }

    pub fn documentWithRootElement(_element: ?*XMLElement) ?objc.Id {
        return objc.msgSend(Internal.class(), "documentWithRootElement:", ?objc.Id, .{_element});
    }

    pub fn elementWithName(_name: ?*String) ?objc.Id {
        return objc.msgSend(Internal.class(), "elementWithName:", ?objc.Id, .{_name});
    }

    pub fn elementWithNameURI(_name: ?*String, _URI: ?*String) ?objc.Id {
        return objc.msgSend(Internal.class(), "elementWithName:URI:", ?objc.Id, .{ _name, _URI });
    }

    pub fn elementWithNameStringValue(_name: ?*String, _string: ?*String) ?objc.Id {
        return objc.msgSend(Internal.class(), "elementWithName:stringValue:", ?objc.Id, .{ _name, _string });
    }

    pub fn elementWithNameChildrenAttributes(_name: ?*String, _children: ?*anyopaque, _attributes: ?*anyopaque) ?objc.Id {
        return objc.msgSend(Internal.class(), "elementWithName:children:attributes:", ?objc.Id, .{ _name, _children, _attributes });
    }

    pub fn attributeWithNameStringValue(_name: ?*String, _stringValue: ?*String) ?objc.Id {
        return objc.msgSend(Internal.class(), "attributeWithName:stringValue:", ?objc.Id, .{ _name, _stringValue });
    }

    pub fn attributeWithNameURIStringValue(_name: ?*String, _URI: ?*String, _stringValue: ?*String) ?objc.Id {
        return objc.msgSend(Internal.class(), "attributeWithName:URI:stringValue:", ?objc.Id, .{ _name, _URI, _stringValue });
    }

    pub fn namespaceWithNameStringValue(_name: ?*String, _stringValue: ?*String) ?objc.Id {
        return objc.msgSend(Internal.class(), "namespaceWithName:stringValue:", ?objc.Id, .{ _name, _stringValue });
    }

    pub fn processingInstructionWithNameStringValue(_name: ?*String, _stringValue: ?*String) ?objc.Id {
        return objc.msgSend(Internal.class(), "processingInstructionWithName:stringValue:", ?objc.Id, .{ _name, _stringValue });
    }

    pub fn commentWithStringValue(_stringValue: ?*String) ?objc.Id {
        return objc.msgSend(Internal.class(), "commentWithStringValue:", ?objc.Id, .{_stringValue});
    }

    pub fn textWithStringValue(_stringValue: ?*String) ?objc.Id {
        return objc.msgSend(Internal.class(), "textWithStringValue:", ?objc.Id, .{_stringValue});
    }

    pub fn dtdNodeWithXMLString(_string: ?*String) ?objc.Id {
        return objc.msgSend(Internal.class(), "DTDNodeWithXMLString:", ?objc.Id, .{_string});
    }

    pub fn setStringValueResolvingEntities(_self: *@This(), _string: ?*String, _resolve: objc.BOOL) void {
        return objc.msgSend(_self, "setStringValue:resolvingEntities:", void, .{ _string, _resolve });
    }

    pub fn childAtIndex(_self: *@This(), _index: objc.NSUInteger) ?*XMLNode {
        return objc.msgSend(_self, "childAtIndex:", ?*XMLNode, .{_index});
    }

    pub fn detach(_self: *@This()) void {
        return objc.msgSend(_self, "detach", void, .{});
    }

    pub fn localNameForName(_name: ?*String) ?*String {
        return objc.msgSend(Internal.class(), "localNameForName:", ?*String, .{_name});
    }

    pub fn prefixForName(_name: ?*String) ?*String {
        return objc.msgSend(Internal.class(), "prefixForName:", ?*String, .{_name});
    }

    pub fn predefinedNamespaceForPrefix(_name: ?*String) ?*XMLNode {
        return objc.msgSend(Internal.class(), "predefinedNamespaceForPrefix:", ?*XMLNode, .{_name});
    }

    pub fn xmlStringWithOptions(_self: *@This(), _options: XMLNodeOptions) ?*String {
        return objc.msgSend(_self, "XMLStringWithOptions:", ?*String, .{_options});
    }

    pub fn canonicalXMLStringPreservingComments(_self: *@This(), _comments: objc.BOOL) ?*String {
        return objc.msgSend(_self, "canonicalXMLStringPreservingComments:", ?*String, .{_comments});
    }

    pub fn nodesForXPathError(_self: *@This(), _xpath: ?*String, _error: ?*?*Error) ?*anyopaque {
        return objc.msgSend(_self, "nodesForXPath:error:", ?*anyopaque, .{ _xpath, _error });
    }

    pub fn objectsForXQueryConstantsError(_self: *@This(), _xquery: ?*String, _constants: ?*anyopaque, _error: ?*?*Error) ?*Array {
        return objc.msgSend(_self, "objectsForXQuery:constants:error:", ?*Array, .{ _xquery, _constants, _error });
    }

    pub fn objectsForXQueryError(_self: *@This(), _xquery: ?*String, _error: ?*?*Error) ?*Array {
        return objc.msgSend(_self, "objectsForXQuery:error:", ?*Array, .{ _xquery, _error });
    }

    pub fn kind(_self: *@This()) XMLNodeKind {
        return objc.msgSend(_self, "kind", XMLNodeKind, .{});
    }

    pub fn name(_self: *@This()) ?*String {
        return objc.msgSend(_self, "name", ?*String, .{});
    }

    pub fn setName(_self: *@This(), _name: ?*String) void {
        return objc.msgSend(_self, "setName:", void, .{_name});
    }

    pub fn objectValue(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "objectValue", ?objc.Id, .{});
    }

    pub fn setObjectValue(_self: *@This(), _objectValue: ?objc.Id) void {
        return objc.msgSend(_self, "setObjectValue:", void, .{_objectValue});
    }

    pub fn stringValue(_self: *@This()) ?*String {
        return objc.msgSend(_self, "stringValue", ?*String, .{});
    }

    pub fn setStringValue(_self: *@This(), _stringValue: ?*String) void {
        return objc.msgSend(_self, "setStringValue:", void, .{_stringValue});
    }

    pub fn index(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "index", objc.NSUInteger, .{});
    }

    pub fn level(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "level", objc.NSUInteger, .{});
    }

    pub fn rootDocument(_self: *@This()) ?*XMLDocument {
        return objc.msgSend(_self, "rootDocument", ?*XMLDocument, .{});
    }

    pub fn parent(_self: *@This()) ?*XMLNode {
        return objc.msgSend(_self, "parent", ?*XMLNode, .{});
    }

    pub fn childCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "childCount", objc.NSUInteger, .{});
    }

    pub fn children(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "children", ?*anyopaque, .{});
    }

    pub fn previousSibling(_self: *@This()) ?*XMLNode {
        return objc.msgSend(_self, "previousSibling", ?*XMLNode, .{});
    }

    pub fn nextSibling(_self: *@This()) ?*XMLNode {
        return objc.msgSend(_self, "nextSibling", ?*XMLNode, .{});
    }

    pub fn previousNode(_self: *@This()) ?*XMLNode {
        return objc.msgSend(_self, "previousNode", ?*XMLNode, .{});
    }

    pub fn nextNode(_self: *@This()) ?*XMLNode {
        return objc.msgSend(_self, "nextNode", ?*XMLNode, .{});
    }

    pub fn xPath(_self: *@This()) ?*String {
        return objc.msgSend(_self, "XPath", ?*String, .{});
    }

    pub fn localName(_self: *@This()) ?*String {
        return objc.msgSend(_self, "localName", ?*String, .{});
    }

    pub fn prefix(_self: *@This()) ?*String {
        return objc.msgSend(_self, "prefix", ?*String, .{});
    }

    pub fn uri(_self: *@This()) ?*String {
        return objc.msgSend(_self, "URI", ?*String, .{});
    }

    pub fn setURI(_self: *@This(), _URI: ?*String) void {
        return objc.msgSend(_self, "setURI:", void, .{_URI});
    }

    pub fn xmlString(_self: *@This()) ?*String {
        return objc.msgSend(_self, "XMLString", ?*String, .{});
    }

    pub fn initWithXMLString(_self: *@This(), _string: ?*String) *@This() {
        return objc.msgSend(_self, "initWithXMLString:", *@This(), .{_string});
    }

    pub fn dtdKind(_self: *@This()) XMLDTDNodeKind {
        return objc.msgSend(_self, "DTDKind", XMLDTDNodeKind, .{});
    }

    pub fn setDTDKind(_self: *@This(), _DTDKind: XMLDTDNodeKind) void {
        return objc.msgSend(_self, "setDTDKind:", void, .{_DTDKind});
    }

    pub fn isExternal(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isExternal", objc.BOOL, .{});
    }

    pub fn publicID(_self: *@This()) ?*String {
        return objc.msgSend(_self, "publicID", ?*String, .{});
    }

    pub fn setPublicID(_self: *@This(), _publicID: ?*String) void {
        return objc.msgSend(_self, "setPublicID:", void, .{_publicID});
    }

    pub fn systemID(_self: *@This()) ?*String {
        return objc.msgSend(_self, "systemID", ?*String, .{});
    }

    pub fn setSystemID(_self: *@This(), _systemID: ?*String) void {
        return objc.msgSend(_self, "setSystemID:", void, .{_systemID});
    }

    pub fn notationName(_self: *@This()) ?*String {
        return objc.msgSend(_self, "notationName", ?*String, .{});
    }

    pub fn setNotationName(_self: *@This(), _notationName: ?*String) void {
        return objc.msgSend(_self, "setNotationName:", void, .{_notationName});
    }
};

pub const XMLDocumentContentKind = objc.NSUInteger;
pub const XMLDocumentContentKind_XMLKind: objc.NSUInteger = 0;
pub const XMLDocumentContentKind_XHTMLKind: objc.NSUInteger = 1;
pub const XMLDocumentContentKind_HTMLKind: objc.NSUInteger = 2;
pub const XMLDocumentContentKind_TextKind: objc.NSUInteger = 3;

/// https://developer.apple.com/documentation/Foundation/NSXMLDocument?language=objc
pub const XMLDocument = opaque {
    pub const Internal = objc.ExternClass("NSXMLDocument", @This(), XMLNode, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn initWithKind(_self: *@This(), _kind: XMLNodeKind) *@This() {
        return objc.msgSend(_self, "initWithKind:", *@This(), .{_kind});
    }

    pub fn initWithKindOptions(_self: *@This(), _kind: XMLNodeKind, _options: XMLNodeOptions) *@This() {
        return objc.msgSend(_self, "initWithKind:options:", *@This(), .{ _kind, _options });
    }

    pub fn document() ?objc.Id {
        return objc.msgSend(Internal.class(), "document", ?objc.Id, .{});
    }

    pub fn documentWithRootElement(_element: ?*XMLElement) ?objc.Id {
        return objc.msgSend(Internal.class(), "documentWithRootElement:", ?objc.Id, .{_element});
    }

    pub fn elementWithName(_name: ?*String) ?objc.Id {
        return objc.msgSend(Internal.class(), "elementWithName:", ?objc.Id, .{_name});
    }

    pub fn elementWithNameURI(_name: ?*String, _URI: ?*String) ?objc.Id {
        return objc.msgSend(Internal.class(), "elementWithName:URI:", ?objc.Id, .{ _name, _URI });
    }

    pub fn elementWithNameStringValue(_name: ?*String, _string: ?*String) ?objc.Id {
        return objc.msgSend(Internal.class(), "elementWithName:stringValue:", ?objc.Id, .{ _name, _string });
    }

    pub fn elementWithNameChildrenAttributes(_name: ?*String, _children: ?*anyopaque, _attributes: ?*anyopaque) ?objc.Id {
        return objc.msgSend(Internal.class(), "elementWithName:children:attributes:", ?objc.Id, .{ _name, _children, _attributes });
    }

    pub fn attributeWithNameStringValue(_name: ?*String, _stringValue: ?*String) ?objc.Id {
        return objc.msgSend(Internal.class(), "attributeWithName:stringValue:", ?objc.Id, .{ _name, _stringValue });
    }

    pub fn attributeWithNameURIStringValue(_name: ?*String, _URI: ?*String, _stringValue: ?*String) ?objc.Id {
        return objc.msgSend(Internal.class(), "attributeWithName:URI:stringValue:", ?objc.Id, .{ _name, _URI, _stringValue });
    }

    pub fn namespaceWithNameStringValue(_name: ?*String, _stringValue: ?*String) ?objc.Id {
        return objc.msgSend(Internal.class(), "namespaceWithName:stringValue:", ?objc.Id, .{ _name, _stringValue });
    }

    pub fn processingInstructionWithNameStringValue(_name: ?*String, _stringValue: ?*String) ?objc.Id {
        return objc.msgSend(Internal.class(), "processingInstructionWithName:stringValue:", ?objc.Id, .{ _name, _stringValue });
    }

    pub fn commentWithStringValue(_stringValue: ?*String) ?objc.Id {
        return objc.msgSend(Internal.class(), "commentWithStringValue:", ?objc.Id, .{_stringValue});
    }

    pub fn textWithStringValue(_stringValue: ?*String) ?objc.Id {
        return objc.msgSend(Internal.class(), "textWithStringValue:", ?objc.Id, .{_stringValue});
    }

    pub fn dtdNodeWithXMLString(_string: ?*String) ?objc.Id {
        return objc.msgSend(Internal.class(), "DTDNodeWithXMLString:", ?objc.Id, .{_string});
    }

    pub fn setStringValueResolvingEntities(_self: *@This(), _string: ?*String, _resolve: objc.BOOL) void {
        return objc.msgSend(_self, "setStringValue:resolvingEntities:", void, .{ _string, _resolve });
    }

    pub fn childAtIndex(_self: *@This(), _index: objc.NSUInteger) ?*XMLNode {
        return objc.msgSend(_self, "childAtIndex:", ?*XMLNode, .{_index});
    }

    pub fn detach(_self: *@This()) void {
        return objc.msgSend(_self, "detach", void, .{});
    }

    pub fn localNameForName(_name: ?*String) ?*String {
        return objc.msgSend(Internal.class(), "localNameForName:", ?*String, .{_name});
    }

    pub fn prefixForName(_name: ?*String) ?*String {
        return objc.msgSend(Internal.class(), "prefixForName:", ?*String, .{_name});
    }

    pub fn predefinedNamespaceForPrefix(_name: ?*String) ?*XMLNode {
        return objc.msgSend(Internal.class(), "predefinedNamespaceForPrefix:", ?*XMLNode, .{_name});
    }

    pub fn xmlStringWithOptions(_self: *@This(), _options: XMLNodeOptions) ?*String {
        return objc.msgSend(_self, "XMLStringWithOptions:", ?*String, .{_options});
    }

    pub fn canonicalXMLStringPreservingComments(_self: *@This(), _comments: objc.BOOL) ?*String {
        return objc.msgSend(_self, "canonicalXMLStringPreservingComments:", ?*String, .{_comments});
    }

    pub fn nodesForXPathError(_self: *@This(), _xpath: ?*String, _error: ?*?*Error) ?*anyopaque {
        return objc.msgSend(_self, "nodesForXPath:error:", ?*anyopaque, .{ _xpath, _error });
    }

    pub fn objectsForXQueryConstantsError(_self: *@This(), _xquery: ?*String, _constants: ?*anyopaque, _error: ?*?*Error) ?*Array {
        return objc.msgSend(_self, "objectsForXQuery:constants:error:", ?*Array, .{ _xquery, _constants, _error });
    }

    pub fn objectsForXQueryError(_self: *@This(), _xquery: ?*String, _error: ?*?*Error) ?*Array {
        return objc.msgSend(_self, "objectsForXQuery:error:", ?*Array, .{ _xquery, _error });
    }

    pub fn kind(_self: *@This()) XMLNodeKind {
        return objc.msgSend(_self, "kind", XMLNodeKind, .{});
    }

    pub fn name(_self: *@This()) ?*String {
        return objc.msgSend(_self, "name", ?*String, .{});
    }

    pub fn setName(_self: *@This(), _name: ?*String) void {
        return objc.msgSend(_self, "setName:", void, .{_name});
    }

    pub fn objectValue(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "objectValue", ?objc.Id, .{});
    }

    pub fn setObjectValue(_self: *@This(), _objectValue: ?objc.Id) void {
        return objc.msgSend(_self, "setObjectValue:", void, .{_objectValue});
    }

    pub fn stringValue(_self: *@This()) ?*String {
        return objc.msgSend(_self, "stringValue", ?*String, .{});
    }

    pub fn setStringValue(_self: *@This(), _stringValue: ?*String) void {
        return objc.msgSend(_self, "setStringValue:", void, .{_stringValue});
    }

    pub fn index(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "index", objc.NSUInteger, .{});
    }

    pub fn level(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "level", objc.NSUInteger, .{});
    }

    pub fn rootDocument(_self: *@This()) ?*XMLDocument {
        return objc.msgSend(_self, "rootDocument", ?*XMLDocument, .{});
    }

    pub fn parent(_self: *@This()) ?*XMLNode {
        return objc.msgSend(_self, "parent", ?*XMLNode, .{});
    }

    pub fn childCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "childCount", objc.NSUInteger, .{});
    }

    pub fn children(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "children", ?*anyopaque, .{});
    }

    pub fn previousSibling(_self: *@This()) ?*XMLNode {
        return objc.msgSend(_self, "previousSibling", ?*XMLNode, .{});
    }

    pub fn nextSibling(_self: *@This()) ?*XMLNode {
        return objc.msgSend(_self, "nextSibling", ?*XMLNode, .{});
    }

    pub fn previousNode(_self: *@This()) ?*XMLNode {
        return objc.msgSend(_self, "previousNode", ?*XMLNode, .{});
    }

    pub fn nextNode(_self: *@This()) ?*XMLNode {
        return objc.msgSend(_self, "nextNode", ?*XMLNode, .{});
    }

    pub fn xPath(_self: *@This()) ?*String {
        return objc.msgSend(_self, "XPath", ?*String, .{});
    }

    pub fn localName(_self: *@This()) ?*String {
        return objc.msgSend(_self, "localName", ?*String, .{});
    }

    pub fn prefix(_self: *@This()) ?*String {
        return objc.msgSend(_self, "prefix", ?*String, .{});
    }

    pub fn uri(_self: *@This()) ?*String {
        return objc.msgSend(_self, "URI", ?*String, .{});
    }

    pub fn setURI(_self: *@This(), _URI: ?*String) void {
        return objc.msgSend(_self, "setURI:", void, .{_URI});
    }

    pub fn xmlString(_self: *@This()) ?*String {
        return objc.msgSend(_self, "XMLString", ?*String, .{});
    }

    pub fn initWithXMLStringOptionsError(_self: *@This(), _string: ?*String, _mask: XMLNodeOptions, _error: ?*?*Error) *@This() {
        return objc.msgSend(_self, "initWithXMLString:options:error:", *@This(), .{ _string, _mask, _error });
    }

    pub fn initWithContentsOfURLOptionsError(_self: *@This(), _url: ?*URL, _mask: XMLNodeOptions, _error: ?*?*Error) *@This() {
        return objc.msgSend(_self, "initWithContentsOfURL:options:error:", *@This(), .{ _url, _mask, _error });
    }

    pub fn initWithDataOptionsError(_self: *@This(), _data: ?*Data, _mask: XMLNodeOptions, _error: ?*?*Error) *@This() {
        return objc.msgSend(_self, "initWithData:options:error:", *@This(), .{ _data, _mask, _error });
    }

    pub fn initWithRootElement(_self: *@This(), _element: ?*XMLElement) *@This() {
        return objc.msgSend(_self, "initWithRootElement:", *@This(), .{_element});
    }

    pub fn replacementClassForClass(_cls: objc.Class) objc.Class {
        return objc.msgSend(Internal.class(), "replacementClassForClass:", objc.Class, .{_cls});
    }

    pub fn setRootElement(_self: *@This(), _root: ?*XMLElement) void {
        return objc.msgSend(_self, "setRootElement:", void, .{_root});
    }

    pub fn rootElement(_self: *@This()) ?*XMLElement {
        return objc.msgSend(_self, "rootElement", ?*XMLElement, .{});
    }

    pub fn insertChildAtIndex(_self: *@This(), _child: ?*XMLNode, _index: objc.NSUInteger) void {
        return objc.msgSend(_self, "insertChild:atIndex:", void, .{ _child, _index });
    }

    pub fn insertChildrenAtIndex(_self: *@This(), _children: ?*anyopaque, _index: objc.NSUInteger) void {
        return objc.msgSend(_self, "insertChildren:atIndex:", void, .{ _children, _index });
    }

    pub fn removeChildAtIndex(_self: *@This(), _index: objc.NSUInteger) void {
        return objc.msgSend(_self, "removeChildAtIndex:", void, .{_index});
    }

    pub fn setChildren(_self: *@This(), _children: ?*anyopaque) void {
        return objc.msgSend(_self, "setChildren:", void, .{_children});
    }

    pub fn addChild(_self: *@This(), _child: ?*XMLNode) void {
        return objc.msgSend(_self, "addChild:", void, .{_child});
    }

    pub fn replaceChildAtIndexWithNode(_self: *@This(), _index: objc.NSUInteger, _node: ?*XMLNode) void {
        return objc.msgSend(_self, "replaceChildAtIndex:withNode:", void, .{ _index, _node });
    }

    pub fn xmlDataWithOptions(_self: *@This(), _options: XMLNodeOptions) ?*Data {
        return objc.msgSend(_self, "XMLDataWithOptions:", ?*Data, .{_options});
    }

    pub fn objectByApplyingXSLTArgumentsError(_self: *@This(), _xslt: ?*Data, _arguments: ?*anyopaque, _error: ?*?*Error) ?objc.Id {
        return objc.msgSend(_self, "objectByApplyingXSLT:arguments:error:", ?objc.Id, .{ _xslt, _arguments, _error });
    }

    pub fn objectByApplyingXSLTStringArgumentsError(_self: *@This(), _xslt: ?*String, _arguments: ?*anyopaque, _error: ?*?*Error) ?objc.Id {
        return objc.msgSend(_self, "objectByApplyingXSLTString:arguments:error:", ?objc.Id, .{ _xslt, _arguments, _error });
    }

    pub fn objectByApplyingXSLTAtURLArgumentsError(_self: *@This(), _xsltURL: ?*URL, _argument: ?*anyopaque, _error: ?*?*Error) ?objc.Id {
        return objc.msgSend(_self, "objectByApplyingXSLTAtURL:arguments:error:", ?objc.Id, .{ _xsltURL, _argument, _error });
    }

    pub fn validateAndReturnError(_self: *@This(), _error: ?*?*Error) objc.BOOL {
        return objc.msgSend(_self, "validateAndReturnError:", objc.BOOL, .{_error});
    }

    pub fn characterEncoding(_self: *@This()) ?*String {
        return objc.msgSend(_self, "characterEncoding", ?*String, .{});
    }

    pub fn setCharacterEncoding(_self: *@This(), _characterEncoding: ?*String) void {
        return objc.msgSend(_self, "setCharacterEncoding:", void, .{_characterEncoding});
    }

    pub fn version(_self: *@This()) ?*String {
        return objc.msgSend(_self, "version", ?*String, .{});
    }

    pub fn setVersion(_self: *@This(), _version: ?*String) void {
        return objc.msgSend(_self, "setVersion:", void, .{_version});
    }

    pub fn isStandalone(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isStandalone", objc.BOOL, .{});
    }

    pub fn setStandalone(_self: *@This(), _standalone: objc.BOOL) void {
        return objc.msgSend(_self, "setStandalone:", void, .{_standalone});
    }

    pub fn documentContentKind(_self: *@This()) XMLDocumentContentKind {
        return objc.msgSend(_self, "documentContentKind", XMLDocumentContentKind, .{});
    }

    pub fn setDocumentContentKind(_self: *@This(), _documentContentKind: XMLDocumentContentKind) void {
        return objc.msgSend(_self, "setDocumentContentKind:", void, .{_documentContentKind});
    }

    pub fn mimeType(_self: *@This()) ?*String {
        return objc.msgSend(_self, "MIMEType", ?*String, .{});
    }

    pub fn setMIMEType(_self: *@This(), _MIMEType: ?*String) void {
        return objc.msgSend(_self, "setMIMEType:", void, .{_MIMEType});
    }

    pub fn dtd(_self: *@This()) ?*XMLDTD {
        return objc.msgSend(_self, "DTD", ?*XMLDTD, .{});
    }

    pub fn setDTD(_self: *@This(), _DTD: ?*XMLDTD) void {
        return objc.msgSend(_self, "setDTD:", void, .{_DTD});
    }

    pub fn xmlData(_self: *@This()) ?*Data {
        return objc.msgSend(_self, "XMLData", ?*Data, .{});
    }
};

/// https://developer.apple.com/documentation/Foundation/NSXMLElement?language=objc
pub const XMLElement = opaque {
    pub const Internal = objc.ExternClass("NSXMLElement", @This(), XMLNode, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn initWithKind(_self: *@This(), _kind: XMLNodeKind) *@This() {
        return objc.msgSend(_self, "initWithKind:", *@This(), .{_kind});
    }

    pub fn initWithKindOptions(_self: *@This(), _kind: XMLNodeKind, _options: XMLNodeOptions) *@This() {
        return objc.msgSend(_self, "initWithKind:options:", *@This(), .{ _kind, _options });
    }

    pub fn document() ?objc.Id {
        return objc.msgSend(Internal.class(), "document", ?objc.Id, .{});
    }

    pub fn documentWithRootElement(_element: ?*XMLElement) ?objc.Id {
        return objc.msgSend(Internal.class(), "documentWithRootElement:", ?objc.Id, .{_element});
    }

    pub fn elementWithName(_name: ?*String) ?objc.Id {
        return objc.msgSend(Internal.class(), "elementWithName:", ?objc.Id, .{_name});
    }

    pub fn elementWithNameURI(_name: ?*String, _URI: ?*String) ?objc.Id {
        return objc.msgSend(Internal.class(), "elementWithName:URI:", ?objc.Id, .{ _name, _URI });
    }

    pub fn elementWithNameStringValue(_name: ?*String, _string: ?*String) ?objc.Id {
        return objc.msgSend(Internal.class(), "elementWithName:stringValue:", ?objc.Id, .{ _name, _string });
    }

    pub fn elementWithNameChildrenAttributes(_name: ?*String, _children: ?*anyopaque, _attributes: ?*anyopaque) ?objc.Id {
        return objc.msgSend(Internal.class(), "elementWithName:children:attributes:", ?objc.Id, .{ _name, _children, _attributes });
    }

    pub fn attributeWithNameStringValue(_name: ?*String, _stringValue: ?*String) ?objc.Id {
        return objc.msgSend(Internal.class(), "attributeWithName:stringValue:", ?objc.Id, .{ _name, _stringValue });
    }

    pub fn attributeWithNameURIStringValue(_name: ?*String, _URI: ?*String, _stringValue: ?*String) ?objc.Id {
        return objc.msgSend(Internal.class(), "attributeWithName:URI:stringValue:", ?objc.Id, .{ _name, _URI, _stringValue });
    }

    pub fn namespaceWithNameStringValue(_name: ?*String, _stringValue: ?*String) ?objc.Id {
        return objc.msgSend(Internal.class(), "namespaceWithName:stringValue:", ?objc.Id, .{ _name, _stringValue });
    }

    pub fn processingInstructionWithNameStringValue(_name: ?*String, _stringValue: ?*String) ?objc.Id {
        return objc.msgSend(Internal.class(), "processingInstructionWithName:stringValue:", ?objc.Id, .{ _name, _stringValue });
    }

    pub fn commentWithStringValue(_stringValue: ?*String) ?objc.Id {
        return objc.msgSend(Internal.class(), "commentWithStringValue:", ?objc.Id, .{_stringValue});
    }

    pub fn textWithStringValue(_stringValue: ?*String) ?objc.Id {
        return objc.msgSend(Internal.class(), "textWithStringValue:", ?objc.Id, .{_stringValue});
    }

    pub fn dtdNodeWithXMLString(_string: ?*String) ?objc.Id {
        return objc.msgSend(Internal.class(), "DTDNodeWithXMLString:", ?objc.Id, .{_string});
    }

    pub fn setStringValueResolvingEntities(_self: *@This(), _string: ?*String, _resolve: objc.BOOL) void {
        return objc.msgSend(_self, "setStringValue:resolvingEntities:", void, .{ _string, _resolve });
    }

    pub fn childAtIndex(_self: *@This(), _index: objc.NSUInteger) ?*XMLNode {
        return objc.msgSend(_self, "childAtIndex:", ?*XMLNode, .{_index});
    }

    pub fn detach(_self: *@This()) void {
        return objc.msgSend(_self, "detach", void, .{});
    }

    pub fn localNameForName(_name: ?*String) ?*String {
        return objc.msgSend(Internal.class(), "localNameForName:", ?*String, .{_name});
    }

    pub fn prefixForName(_name: ?*String) ?*String {
        return objc.msgSend(Internal.class(), "prefixForName:", ?*String, .{_name});
    }

    pub fn predefinedNamespaceForPrefix(_name: ?*String) ?*XMLNode {
        return objc.msgSend(Internal.class(), "predefinedNamespaceForPrefix:", ?*XMLNode, .{_name});
    }

    pub fn xmlStringWithOptions(_self: *@This(), _options: XMLNodeOptions) ?*String {
        return objc.msgSend(_self, "XMLStringWithOptions:", ?*String, .{_options});
    }

    pub fn canonicalXMLStringPreservingComments(_self: *@This(), _comments: objc.BOOL) ?*String {
        return objc.msgSend(_self, "canonicalXMLStringPreservingComments:", ?*String, .{_comments});
    }

    pub fn nodesForXPathError(_self: *@This(), _xpath: ?*String, _error: ?*?*Error) ?*anyopaque {
        return objc.msgSend(_self, "nodesForXPath:error:", ?*anyopaque, .{ _xpath, _error });
    }

    pub fn objectsForXQueryConstantsError(_self: *@This(), _xquery: ?*String, _constants: ?*anyopaque, _error: ?*?*Error) ?*Array {
        return objc.msgSend(_self, "objectsForXQuery:constants:error:", ?*Array, .{ _xquery, _constants, _error });
    }

    pub fn objectsForXQueryError(_self: *@This(), _xquery: ?*String, _error: ?*?*Error) ?*Array {
        return objc.msgSend(_self, "objectsForXQuery:error:", ?*Array, .{ _xquery, _error });
    }

    pub fn kind(_self: *@This()) XMLNodeKind {
        return objc.msgSend(_self, "kind", XMLNodeKind, .{});
    }

    pub fn name(_self: *@This()) ?*String {
        return objc.msgSend(_self, "name", ?*String, .{});
    }

    pub fn setName(_self: *@This(), _name: ?*String) void {
        return objc.msgSend(_self, "setName:", void, .{_name});
    }

    pub fn objectValue(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "objectValue", ?objc.Id, .{});
    }

    pub fn setObjectValue(_self: *@This(), _objectValue: ?objc.Id) void {
        return objc.msgSend(_self, "setObjectValue:", void, .{_objectValue});
    }

    pub fn stringValue(_self: *@This()) ?*String {
        return objc.msgSend(_self, "stringValue", ?*String, .{});
    }

    pub fn setStringValue(_self: *@This(), _stringValue: ?*String) void {
        return objc.msgSend(_self, "setStringValue:", void, .{_stringValue});
    }

    pub fn index(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "index", objc.NSUInteger, .{});
    }

    pub fn level(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "level", objc.NSUInteger, .{});
    }

    pub fn rootDocument(_self: *@This()) ?*XMLDocument {
        return objc.msgSend(_self, "rootDocument", ?*XMLDocument, .{});
    }

    pub fn parent(_self: *@This()) ?*XMLNode {
        return objc.msgSend(_self, "parent", ?*XMLNode, .{});
    }

    pub fn childCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "childCount", objc.NSUInteger, .{});
    }

    pub fn children(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "children", ?*anyopaque, .{});
    }

    pub fn previousSibling(_self: *@This()) ?*XMLNode {
        return objc.msgSend(_self, "previousSibling", ?*XMLNode, .{});
    }

    pub fn nextSibling(_self: *@This()) ?*XMLNode {
        return objc.msgSend(_self, "nextSibling", ?*XMLNode, .{});
    }

    pub fn previousNode(_self: *@This()) ?*XMLNode {
        return objc.msgSend(_self, "previousNode", ?*XMLNode, .{});
    }

    pub fn nextNode(_self: *@This()) ?*XMLNode {
        return objc.msgSend(_self, "nextNode", ?*XMLNode, .{});
    }

    pub fn xPath(_self: *@This()) ?*String {
        return objc.msgSend(_self, "XPath", ?*String, .{});
    }

    pub fn localName(_self: *@This()) ?*String {
        return objc.msgSend(_self, "localName", ?*String, .{});
    }

    pub fn prefix(_self: *@This()) ?*String {
        return objc.msgSend(_self, "prefix", ?*String, .{});
    }

    pub fn uri(_self: *@This()) ?*String {
        return objc.msgSend(_self, "URI", ?*String, .{});
    }

    pub fn setURI(_self: *@This(), _URI: ?*String) void {
        return objc.msgSend(_self, "setURI:", void, .{_URI});
    }

    pub fn xmlString(_self: *@This()) ?*String {
        return objc.msgSend(_self, "XMLString", ?*String, .{});
    }

    pub fn initWithName(_self: *@This(), _name: ?*String) *@This() {
        return objc.msgSend(_self, "initWithName:", *@This(), .{_name});
    }

    pub fn initWithNameURI(_self: *@This(), _name: ?*String, _URI: ?*String) *@This() {
        return objc.msgSend(_self, "initWithName:URI:", *@This(), .{ _name, _URI });
    }

    pub fn initWithNameStringValue(_self: *@This(), _name: ?*String, _string: ?*String) *@This() {
        return objc.msgSend(_self, "initWithName:stringValue:", *@This(), .{ _name, _string });
    }

    pub fn initWithXMLStringError(_self: *@This(), _string: ?*String, _error: ?*?*Error) *@This() {
        return objc.msgSend(_self, "initWithXMLString:error:", *@This(), .{ _string, _error });
    }

    pub fn elementsForName(_self: *@This(), _name: ?*String) ?*anyopaque {
        return objc.msgSend(_self, "elementsForName:", ?*anyopaque, .{_name});
    }

    pub fn elementsForLocalNameURI(_self: *@This(), _localName: ?*String, _URI: ?*String) ?*anyopaque {
        return objc.msgSend(_self, "elementsForLocalName:URI:", ?*anyopaque, .{ _localName, _URI });
    }

    pub fn addAttribute(_self: *@This(), _attribute: ?*XMLNode) void {
        return objc.msgSend(_self, "addAttribute:", void, .{_attribute});
    }

    pub fn removeAttributeForName(_self: *@This(), _name: ?*String) void {
        return objc.msgSend(_self, "removeAttributeForName:", void, .{_name});
    }

    pub fn setAttributesWithDictionary(_self: *@This(), _attributes: ?*anyopaque) void {
        return objc.msgSend(_self, "setAttributesWithDictionary:", void, .{_attributes});
    }

    pub fn attributeForName(_self: *@This(), _name: ?*String) ?*XMLNode {
        return objc.msgSend(_self, "attributeForName:", ?*XMLNode, .{_name});
    }

    pub fn attributeForLocalNameURI(_self: *@This(), _localName: ?*String, _URI: ?*String) ?*XMLNode {
        return objc.msgSend(_self, "attributeForLocalName:URI:", ?*XMLNode, .{ _localName, _URI });
    }

    pub fn addNamespace(_self: *@This(), _aNamespace: ?*XMLNode) void {
        return objc.msgSend(_self, "addNamespace:", void, .{_aNamespace});
    }

    pub fn removeNamespaceForPrefix(_self: *@This(), _name: ?*String) void {
        return objc.msgSend(_self, "removeNamespaceForPrefix:", void, .{_name});
    }

    pub fn namespaceForPrefix(_self: *@This(), _name: ?*String) ?*XMLNode {
        return objc.msgSend(_self, "namespaceForPrefix:", ?*XMLNode, .{_name});
    }

    pub fn resolveNamespaceForName(_self: *@This(), _name: ?*String) ?*XMLNode {
        return objc.msgSend(_self, "resolveNamespaceForName:", ?*XMLNode, .{_name});
    }

    pub fn resolvePrefixForNamespaceURI(_self: *@This(), _namespaceURI: ?*String) ?*String {
        return objc.msgSend(_self, "resolvePrefixForNamespaceURI:", ?*String, .{_namespaceURI});
    }

    pub fn insertChildAtIndex(_self: *@This(), _child: ?*XMLNode, _index: objc.NSUInteger) void {
        return objc.msgSend(_self, "insertChild:atIndex:", void, .{ _child, _index });
    }

    pub fn insertChildrenAtIndex(_self: *@This(), _children: ?*anyopaque, _index: objc.NSUInteger) void {
        return objc.msgSend(_self, "insertChildren:atIndex:", void, .{ _children, _index });
    }

    pub fn removeChildAtIndex(_self: *@This(), _index: objc.NSUInteger) void {
        return objc.msgSend(_self, "removeChildAtIndex:", void, .{_index});
    }

    pub fn setChildren(_self: *@This(), _children: ?*anyopaque) void {
        return objc.msgSend(_self, "setChildren:", void, .{_children});
    }

    pub fn addChild(_self: *@This(), _child: ?*XMLNode) void {
        return objc.msgSend(_self, "addChild:", void, .{_child});
    }

    pub fn replaceChildAtIndexWithNode(_self: *@This(), _index: objc.NSUInteger, _node: ?*XMLNode) void {
        return objc.msgSend(_self, "replaceChildAtIndex:withNode:", void, .{ _index, _node });
    }

    pub fn normalizeAdjacentTextNodesPreservingCDATA(_self: *@This(), _preserve: objc.BOOL) void {
        return objc.msgSend(_self, "normalizeAdjacentTextNodesPreservingCDATA:", void, .{_preserve});
    }

    pub fn attributes(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "attributes", ?*anyopaque, .{});
    }

    pub fn setAttributes(_self: *@This(), _attributes: ?*anyopaque) void {
        return objc.msgSend(_self, "setAttributes:", void, .{_attributes});
    }

    pub fn namespaces(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "namespaces", ?*anyopaque, .{});
    }

    pub fn setNamespaces(_self: *@This(), _namespaces: ?*anyopaque) void {
        return objc.msgSend(_self, "setNamespaces:", void, .{_namespaces});
    }
};

/// https://developer.apple.com/documentation/Foundation/NSURLDownload?language=objc
pub const URLDownload = opaque {
    pub const Internal = objc.ExternClass("NSURLDownload", @This(), objc.NSObject, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn canResumeDownloadDecodedWithEncodingMIMEType(_MIMEType: ?*String) objc.BOOL {
        return objc.msgSend(Internal.class(), "canResumeDownloadDecodedWithEncodingMIMEType:", objc.BOOL, .{_MIMEType});
    }

    pub fn initWithRequestDelegate(_self: *@This(), _request: ?*URLRequest, _delegate: ?*anyopaque) *@This() {
        return objc.msgSend(_self, "initWithRequest:delegate:", *@This(), .{ _request, _delegate });
    }

    pub fn initWithResumeDataDelegatePath(_self: *@This(), _resumeData: ?*Data, _delegate: ?*anyopaque, _path: ?*String) *@This() {
        return objc.msgSend(_self, "initWithResumeData:delegate:path:", *@This(), .{ _resumeData, _delegate, _path });
    }

    pub fn cancel(_self: *@This()) void {
        return objc.msgSend(_self, "cancel", void, .{});
    }

    pub fn setDestinationAllowOverwrite(_self: *@This(), _path: ?*String, _allowOverwrite: objc.BOOL) void {
        return objc.msgSend(_self, "setDestination:allowOverwrite:", void, .{ _path, _allowOverwrite });
    }

    pub fn request(_self: *@This()) ?*URLRequest {
        return objc.msgSend(_self, "request", ?*URLRequest, .{});
    }

    pub fn resumeData(_self: *@This()) ?*Data {
        return objc.msgSend(_self, "resumeData", ?*Data, .{});
    }

    pub fn deletesFileUponFailure(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "deletesFileUponFailure", objc.BOOL, .{});
    }

    pub fn setDeletesFileUponFailure(_self: *@This(), _deletesFileUponFailure: objc.BOOL) void {
        return objc.msgSend(_self, "setDeletesFileUponFailure:", void, .{_deletesFileUponFailure});
    }
};

/// https://developer.apple.com/documentation/Foundation/NSURLDownloadDelegate?language=objc
pub const URLDownloadDelegate = opaque {
    pub const Internal = objc.ExternProtocol(@This(), &.{objc.NSObject});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn downloadDidBegin(_self: *@This(), _download: ?*URLDownload) void {
        return objc.msgSend(_self, "downloadDidBegin:", void, .{_download});
    }

    pub fn downloadWillSendRequestRedirectResponse(_self: *@This(), _download: ?*URLDownload, _request: ?*URLRequest, _redirectResponse: ?*URLResponse) ?*URLRequest {
        return objc.msgSend(_self, "download:willSendRequest:redirectResponse:", ?*URLRequest, .{ _download, _request, _redirectResponse });
    }

    pub fn downloadCanAuthenticateAgainstProtectionSpace(_self: *@This(), _connection: ?*URLDownload, _protectionSpace: ?*URLProtectionSpace) objc.BOOL {
        return objc.msgSend(_self, "download:canAuthenticateAgainstProtectionSpace:", objc.BOOL, .{ _connection, _protectionSpace });
    }

    pub fn downloadDidReceiveAuthenticationChallenge(_self: *@This(), _download: ?*URLDownload, _challenge: ?*URLAuthenticationChallenge) void {
        return objc.msgSend(_self, "download:didReceiveAuthenticationChallenge:", void, .{ _download, _challenge });
    }

    pub fn downloadDidCancelAuthenticationChallenge(_self: *@This(), _download: ?*URLDownload, _challenge: ?*URLAuthenticationChallenge) void {
        return objc.msgSend(_self, "download:didCancelAuthenticationChallenge:", void, .{ _download, _challenge });
    }

    pub fn downloadShouldUseCredentialStorage(_self: *@This(), _download: ?*URLDownload) objc.BOOL {
        return objc.msgSend(_self, "downloadShouldUseCredentialStorage:", objc.BOOL, .{_download});
    }

    pub fn downloadDidReceiveResponse(_self: *@This(), _download: ?*URLDownload, _response: ?*URLResponse) void {
        return objc.msgSend(_self, "download:didReceiveResponse:", void, .{ _download, _response });
    }

    pub fn downloadWillResumeWithResponseFromByte(_self: *@This(), _download: ?*URLDownload, _response: ?*URLResponse, _startingByte: i64) void {
        return objc.msgSend(_self, "download:willResumeWithResponse:fromByte:", void, .{ _download, _response, _startingByte });
    }

    pub fn downloadDidReceiveDataOfLength(_self: *@This(), _download: ?*URLDownload, _length: objc.NSUInteger) void {
        return objc.msgSend(_self, "download:didReceiveDataOfLength:", void, .{ _download, _length });
    }

    pub fn downloadShouldDecodeSourceDataOfMIMEType(_self: *@This(), _download: ?*URLDownload, _encodingType: ?*String) objc.BOOL {
        return objc.msgSend(_self, "download:shouldDecodeSourceDataOfMIMEType:", objc.BOOL, .{ _download, _encodingType });
    }

    pub fn downloadDecideDestinationWithSuggestedFilename(_self: *@This(), _download: ?*URLDownload, _filename: ?*String) void {
        return objc.msgSend(_self, "download:decideDestinationWithSuggestedFilename:", void, .{ _download, _filename });
    }

    pub fn downloadDidCreateDestination(_self: *@This(), _download: ?*URLDownload, _path: ?*String) void {
        return objc.msgSend(_self, "download:didCreateDestination:", void, .{ _download, _path });
    }

    pub fn downloadDidFinish(_self: *@This(), _download: ?*URLDownload) void {
        return objc.msgSend(_self, "downloadDidFinish:", void, .{_download});
    }

    pub fn downloadDidFailWithError(_self: *@This(), _download: ?*URLDownload, _error: ?*Error) void {
        return objc.msgSend(_self, "download:didFailWithError:", void, .{ _download, _error });
    }
};

pub const AppleEventSendOptions = objc.NSUInteger;
pub const AppleEventSendOptions_NoReply: objc.NSUInteger = 1;
pub const AppleEventSendOptions_QueueReply: objc.NSUInteger = 2;
pub const AppleEventSendOptions_WaitForReply: objc.NSUInteger = 3;
pub const AppleEventSendOptions_NeverInteract: objc.NSUInteger = 16;
pub const AppleEventSendOptions_CanInteract: objc.NSUInteger = 32;
pub const AppleEventSendOptions_AlwaysInteract: objc.NSUInteger = 48;
pub const AppleEventSendOptions_CanSwitchLayer: objc.NSUInteger = 64;
pub const AppleEventSendOptions_DontRecord: objc.NSUInteger = 4096;
pub const AppleEventSendOptions_DontExecute: objc.NSUInteger = 8192;
pub const AppleEventSendOptions_DontAnnotate: objc.NSUInteger = 65536;
pub const AppleEventSendOptions_DefaultOptions: objc.NSUInteger = 35;

/// https://developer.apple.com/documentation/Foundation/NSAppleEventDescriptor?language=objc
pub const AppleEventDescriptor = opaque {
    pub const Internal = objc.ExternClass("NSAppleEventDescriptor", @This(), objc.NSObject, &.{ Copying, SecureCoding });
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn supportsSecureCoding() objc.BOOL {
        return objc.msgSend(Internal.class(), "supportsSecureCoding", objc.BOOL, .{});
    }

    pub fn nullDescriptor() ?*AppleEventDescriptor {
        return objc.msgSend(Internal.class(), "nullDescriptor", ?*AppleEventDescriptor, .{});
    }

    pub fn descriptorWithDescriptorTypeBytesLength(_descriptorType: core_services.DescType, _bytes: ?*anyopaque, _byteCount: objc.NSUInteger) ?*AppleEventDescriptor {
        return objc.msgSend(Internal.class(), "descriptorWithDescriptorType:bytes:length:", ?*AppleEventDescriptor, .{ _descriptorType, _bytes, _byteCount });
    }

    pub fn descriptorWithDescriptorTypeData(_descriptorType: core_services.DescType, _data: ?*Data) ?*AppleEventDescriptor {
        return objc.msgSend(Internal.class(), "descriptorWithDescriptorType:data:", ?*AppleEventDescriptor, .{ _descriptorType, _data });
    }

    pub fn descriptorWithBoolean(_boolean: objc.Boolean) ?*AppleEventDescriptor {
        return objc.msgSend(Internal.class(), "descriptorWithBoolean:", ?*AppleEventDescriptor, .{_boolean});
    }

    pub fn descriptorWithEnumCode(_enumerator: objc.OSType) ?*AppleEventDescriptor {
        return objc.msgSend(Internal.class(), "descriptorWithEnumCode:", ?*AppleEventDescriptor, .{_enumerator});
    }

    pub fn descriptorWithInt32(_signedInt: objc.SInt32) ?*AppleEventDescriptor {
        return objc.msgSend(Internal.class(), "descriptorWithInt32:", ?*AppleEventDescriptor, .{_signedInt});
    }

    pub fn descriptorWithDouble(_doubleValue: f64) ?*AppleEventDescriptor {
        return objc.msgSend(Internal.class(), "descriptorWithDouble:", ?*AppleEventDescriptor, .{_doubleValue});
    }

    pub fn descriptorWithTypeCode(_typeCode: objc.OSType) ?*AppleEventDescriptor {
        return objc.msgSend(Internal.class(), "descriptorWithTypeCode:", ?*AppleEventDescriptor, .{_typeCode});
    }

    pub fn descriptorWithString(_string: ?*String) ?*AppleEventDescriptor {
        return objc.msgSend(Internal.class(), "descriptorWithString:", ?*AppleEventDescriptor, .{_string});
    }

    pub fn descriptorWithDate(_date: ?*Date) ?*AppleEventDescriptor {
        return objc.msgSend(Internal.class(), "descriptorWithDate:", ?*AppleEventDescriptor, .{_date});
    }

    pub fn descriptorWithFileURL(_fileURL: ?*URL) ?*AppleEventDescriptor {
        return objc.msgSend(Internal.class(), "descriptorWithFileURL:", ?*AppleEventDescriptor, .{_fileURL});
    }

    pub fn appleEventWithEventClassEventIDTargetDescriptorReturnIDTransactionID(
        _eventClass: core_services.AEEventClass,
        _eventID: core_services.AEEventID,
        _targetDescriptor: ?*AppleEventDescriptor,
        _returnID: core_services.AEReturnID,
        _transactionID: core_services.AETransactionID,
    ) ?*AppleEventDescriptor {
        return objc.msgSend(Internal.class(), "appleEventWithEventClass:eventID:targetDescriptor:returnID:transactionID:", ?*AppleEventDescriptor, .{
            _eventClass,
            _eventID,
            _targetDescriptor,
            _returnID,
            _transactionID,
        });
    }

    pub fn listDescriptor() ?*AppleEventDescriptor {
        return objc.msgSend(Internal.class(), "listDescriptor", ?*AppleEventDescriptor, .{});
    }

    pub fn recordDescriptor() ?*AppleEventDescriptor {
        return objc.msgSend(Internal.class(), "recordDescriptor", ?*AppleEventDescriptor, .{});
    }

    pub fn currentProcessDescriptor() ?*AppleEventDescriptor {
        return objc.msgSend(Internal.class(), "currentProcessDescriptor", ?*AppleEventDescriptor, .{});
    }

    pub fn descriptorWithProcessIdentifier(_processIdentifier: objc.pid_t) ?*AppleEventDescriptor {
        return objc.msgSend(Internal.class(), "descriptorWithProcessIdentifier:", ?*AppleEventDescriptor, .{_processIdentifier});
    }

    pub fn descriptorWithBundleIdentifier(_bundleIdentifier: ?*String) ?*AppleEventDescriptor {
        return objc.msgSend(Internal.class(), "descriptorWithBundleIdentifier:", ?*AppleEventDescriptor, .{_bundleIdentifier});
    }

    pub fn descriptorWithApplicationURL(_applicationURL: ?*URL) ?*AppleEventDescriptor {
        return objc.msgSend(Internal.class(), "descriptorWithApplicationURL:", ?*AppleEventDescriptor, .{_applicationURL});
    }

    pub fn initWithAEDescNoCopy(_self: *@This(), _aeDesc: ?*core_services.AEDesc) *@This() {
        return objc.msgSend(_self, "initWithAEDescNoCopy:", *@This(), .{_aeDesc});
    }

    pub fn initWithDescriptorTypeBytesLength(_self: *@This(), _descriptorType: core_services.DescType, _bytes: ?*anyopaque, _byteCount: objc.NSUInteger) *@This() {
        return objc.msgSend(_self, "initWithDescriptorType:bytes:length:", *@This(), .{ _descriptorType, _bytes, _byteCount });
    }

    pub fn initWithDescriptorTypeData(_self: *@This(), _descriptorType: core_services.DescType, _data: ?*Data) *@This() {
        return objc.msgSend(_self, "initWithDescriptorType:data:", *@This(), .{ _descriptorType, _data });
    }

    pub fn initWithEventClassEventIDTargetDescriptorReturnIDTransactionID(
        _self: *@This(),
        _eventClass: core_services.AEEventClass,
        _eventID: core_services.AEEventID,
        _targetDescriptor: ?*AppleEventDescriptor,
        _returnID: core_services.AEReturnID,
        _transactionID: core_services.AETransactionID,
    ) *@This() {
        return objc.msgSend(_self, "initWithEventClass:eventID:targetDescriptor:returnID:transactionID:", *@This(), .{
            _eventClass,
            _eventID,
            _targetDescriptor,
            _returnID,
            _transactionID,
        });
    }

    pub fn initListDescriptor(_self: *@This()) *@This() {
        return objc.msgSend(_self, "initListDescriptor", *@This(), .{});
    }

    pub fn initRecordDescriptor(_self: *@This()) *@This() {
        return objc.msgSend(_self, "initRecordDescriptor", *@This(), .{});
    }

    pub fn setParamDescriptorForKeyword(_self: *@This(), _descriptor: ?*AppleEventDescriptor, _keyword: core_services.AEKeyword) void {
        return objc.msgSend(_self, "setParamDescriptor:forKeyword:", void, .{ _descriptor, _keyword });
    }

    pub fn paramDescriptorForKeyword(_self: *@This(), _keyword: core_services.AEKeyword) ?*AppleEventDescriptor {
        return objc.msgSend(_self, "paramDescriptorForKeyword:", ?*AppleEventDescriptor, .{_keyword});
    }

    pub fn removeParamDescriptorWithKeyword(_self: *@This(), _keyword: core_services.AEKeyword) void {
        return objc.msgSend(_self, "removeParamDescriptorWithKeyword:", void, .{_keyword});
    }

    pub fn setAttributeDescriptorForKeyword(_self: *@This(), _descriptor: ?*AppleEventDescriptor, _keyword: core_services.AEKeyword) void {
        return objc.msgSend(_self, "setAttributeDescriptor:forKeyword:", void, .{ _descriptor, _keyword });
    }

    pub fn attributeDescriptorForKeyword(_self: *@This(), _keyword: core_services.AEKeyword) ?*AppleEventDescriptor {
        return objc.msgSend(_self, "attributeDescriptorForKeyword:", ?*AppleEventDescriptor, .{_keyword});
    }

    pub fn sendEventWithOptionsTimeoutError(_self: *@This(), _sendOptions: AppleEventSendOptions, _timeoutInSeconds: TimeInterval, _error: ?*?*Error) ?*AppleEventDescriptor {
        return objc.msgSend(_self, "sendEventWithOptions:timeout:error:", ?*AppleEventDescriptor, .{ _sendOptions, _timeoutInSeconds, _error });
    }

    pub fn insertDescriptorAtIndex(_self: *@This(), _descriptor: ?*AppleEventDescriptor, _index: objc.NSInteger) void {
        return objc.msgSend(_self, "insertDescriptor:atIndex:", void, .{ _descriptor, _index });
    }

    pub fn descriptorAtIndex(_self: *@This(), _index: objc.NSInteger) ?*AppleEventDescriptor {
        return objc.msgSend(_self, "descriptorAtIndex:", ?*AppleEventDescriptor, .{_index});
    }

    pub fn removeDescriptorAtIndex(_self: *@This(), _index: objc.NSInteger) void {
        return objc.msgSend(_self, "removeDescriptorAtIndex:", void, .{_index});
    }

    pub fn setDescriptorForKeyword(_self: *@This(), _descriptor: ?*AppleEventDescriptor, _keyword: core_services.AEKeyword) void {
        return objc.msgSend(_self, "setDescriptor:forKeyword:", void, .{ _descriptor, _keyword });
    }

    pub fn descriptorForKeyword(_self: *@This(), _keyword: core_services.AEKeyword) ?*AppleEventDescriptor {
        return objc.msgSend(_self, "descriptorForKeyword:", ?*AppleEventDescriptor, .{_keyword});
    }

    pub fn removeDescriptorWithKeyword(_self: *@This(), _keyword: core_services.AEKeyword) void {
        return objc.msgSend(_self, "removeDescriptorWithKeyword:", void, .{_keyword});
    }

    pub fn keywordForDescriptorAtIndex(_self: *@This(), _index: objc.NSInteger) core_services.AEKeyword {
        return objc.msgSend(_self, "keywordForDescriptorAtIndex:", core_services.AEKeyword, .{_index});
    }

    pub fn coerceToDescriptorType(_self: *@This(), _descriptorType: core_services.DescType) ?*AppleEventDescriptor {
        return objc.msgSend(_self, "coerceToDescriptorType:", ?*AppleEventDescriptor, .{_descriptorType});
    }

    pub fn aeDesc(_self: *@This()) ?*core_services.AEDesc {
        return objc.msgSend(_self, "aeDesc", ?*core_services.AEDesc, .{});
    }

    pub fn descriptorType(_self: *@This()) core_services.DescType {
        return objc.msgSend(_self, "descriptorType", core_services.DescType, .{});
    }

    pub fn data(_self: *@This()) ?*Data {
        return objc.msgSend(_self, "data", ?*Data, .{});
    }

    pub fn booleanValue(_self: *@This()) objc.Boolean {
        return objc.msgSend(_self, "booleanValue", objc.Boolean, .{});
    }

    pub fn enumCodeValue(_self: *@This()) objc.OSType {
        return objc.msgSend(_self, "enumCodeValue", objc.OSType, .{});
    }

    pub fn int32Value(_self: *@This()) objc.SInt32 {
        return objc.msgSend(_self, "int32Value", objc.SInt32, .{});
    }

    pub fn doubleValue(_self: *@This()) f64 {
        return objc.msgSend(_self, "doubleValue", f64, .{});
    }

    pub fn typeCodeValue(_self: *@This()) objc.OSType {
        return objc.msgSend(_self, "typeCodeValue", objc.OSType, .{});
    }

    pub fn stringValue(_self: *@This()) ?*String {
        return objc.msgSend(_self, "stringValue", ?*String, .{});
    }

    pub fn dateValue(_self: *@This()) ?*Date {
        return objc.msgSend(_self, "dateValue", ?*Date, .{});
    }

    pub fn fileURLValue(_self: *@This()) ?*URL {
        return objc.msgSend(_self, "fileURLValue", ?*URL, .{});
    }

    pub fn eventClass(_self: *@This()) core_services.AEEventClass {
        return objc.msgSend(_self, "eventClass", core_services.AEEventClass, .{});
    }

    pub fn eventID(_self: *@This()) core_services.AEEventID {
        return objc.msgSend(_self, "eventID", core_services.AEEventID, .{});
    }

    pub fn returnID(_self: *@This()) core_services.AEReturnID {
        return objc.msgSend(_self, "returnID", core_services.AEReturnID, .{});
    }

    pub fn transactionID(_self: *@This()) core_services.AETransactionID {
        return objc.msgSend(_self, "transactionID", core_services.AETransactionID, .{});
    }

    pub fn isRecordDescriptor(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isRecordDescriptor", objc.BOOL, .{});
    }

    pub fn numberOfItems(_self: *@This()) objc.NSInteger {
        return objc.msgSend(_self, "numberOfItems", objc.NSInteger, .{});
    }
};

pub const __NSAppleEventManagerSuspension = extern struct {};

pub const AppleEventManagerSuspensionID = __NSAppleEventManagerSuspension;

/// https://developer.apple.com/documentation/Foundation/NSAppleEventManager?language=objc
pub const AppleEventManager = opaque {
    pub const Internal = objc.ExternClass("NSAppleEventManager", @This(), objc.NSObject, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn sharedAppleEventManager() ?*AppleEventManager {
        return objc.msgSend(Internal.class(), "sharedAppleEventManager", ?*AppleEventManager, .{});
    }

    pub fn setEventHandlerAndSelectorForEventClassAndEventID(
        _self: *@This(),
        _handler: ?objc.Id,
        _handleEventSelector: objc.Selector,
        _eventClass: core_services.AEEventClass,
        _eventID: core_services.AEEventID,
    ) void {
        return objc.msgSend(_self, "setEventHandler:andSelector:forEventClass:andEventID:", void, .{
            _handler,
            _handleEventSelector,
            _eventClass,
            _eventID,
        });
    }

    pub fn removeEventHandlerForEventClassAndEventID(_self: *@This(), _eventClass: core_services.AEEventClass, _eventID: core_services.AEEventID) void {
        return objc.msgSend(_self, "removeEventHandlerForEventClass:andEventID:", void, .{ _eventClass, _eventID });
    }

    pub fn dispatchRawAppleEventWithRawReplyHandlerRefCon(_self: *@This(), _theAppleEvent: ?*core_services.AppleEvent, _theReply: ?*core_services.AppleEvent, _handlerRefCon: objc.SRefCon) objc.OSErr {
        return objc.msgSend(_self, "dispatchRawAppleEvent:withRawReply:handlerRefCon:", objc.OSErr, .{ _theAppleEvent, _theReply, _handlerRefCon });
    }

    pub fn suspendCurrentAppleEvent(_self: *@This()) AppleEventManagerSuspensionID {
        return objc.msgSend(_self, "suspendCurrentAppleEvent", AppleEventManagerSuspensionID, .{});
    }

    pub fn appleEventForSuspensionID(_self: *@This(), _suspensionID: AppleEventManagerSuspensionID) ?*AppleEventDescriptor {
        return objc.msgSend(_self, "appleEventForSuspensionID:", ?*AppleEventDescriptor, .{_suspensionID});
    }

    pub fn replyAppleEventForSuspensionID(_self: *@This(), _suspensionID: AppleEventManagerSuspensionID) ?*AppleEventDescriptor {
        return objc.msgSend(_self, "replyAppleEventForSuspensionID:", ?*AppleEventDescriptor, .{_suspensionID});
    }

    pub fn setCurrentAppleEventAndReplyEventWithSuspensionID(_self: *@This(), _suspensionID: AppleEventManagerSuspensionID) void {
        return objc.msgSend(_self, "setCurrentAppleEventAndReplyEventWithSuspensionID:", void, .{_suspensionID});
    }

    pub fn resumeWithSuspensionID(_self: *@This(), _suspensionID: AppleEventManagerSuspensionID) void {
        return objc.msgSend(_self, "resumeWithSuspensionID:", void, .{_suspensionID});
    }

    pub fn currentAppleEvent(_self: *@This()) ?*AppleEventDescriptor {
        return objc.msgSend(_self, "currentAppleEvent", ?*AppleEventDescriptor, .{});
    }

    pub fn currentReplyAppleEvent(_self: *@This()) ?*AppleEventDescriptor {
        return objc.msgSend(_self, "currentReplyAppleEvent", ?*AppleEventDescriptor, .{});
    }
};

/// https://developer.apple.com/documentation/Foundation/NSClassDescription?language=objc
pub const ClassDescription = opaque {
    pub const Internal = objc.ExternClass("NSClassDescription", @This(), objc.NSObject, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn registerClassDescriptionForClass(_description: ?*ClassDescription, _aClass: objc.Class) void {
        return objc.msgSend(Internal.class(), "registerClassDescription:forClass:", void, .{ _description, _aClass });
    }

    pub fn invalidateClassDescriptionCache() void {
        return objc.msgSend(Internal.class(), "invalidateClassDescriptionCache", void, .{});
    }

    pub fn classDescriptionForClass(_aClass: objc.Class) ?*ClassDescription {
        return objc.msgSend(Internal.class(), "classDescriptionForClass:", ?*ClassDescription, .{_aClass});
    }

    pub fn inverseForRelationshipKey(_self: *@This(), _relationshipKey: ?*String) ?*String {
        return objc.msgSend(_self, "inverseForRelationshipKey:", ?*String, .{_relationshipKey});
    }

    pub fn attributeKeys(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "attributeKeys", ?*anyopaque, .{});
    }

    pub fn toOneRelationshipKeys(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "toOneRelationshipKeys", ?*anyopaque, .{});
    }

    pub fn toManyRelationshipKeys(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "toManyRelationshipKeys", ?*anyopaque, .{});
    }
};

/// https://developer.apple.com/documentation/Foundation/NSDistributedLock?language=objc
pub const DistributedLock = opaque {
    pub const Internal = objc.ExternClass("NSDistributedLock", @This(), objc.NSObject, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn lockWithPath(_path: ?*String) ?*DistributedLock {
        return objc.msgSend(Internal.class(), "lockWithPath:", ?*DistributedLock, .{_path});
    }

    pub fn initWithPath(_self: *@This(), _path: ?*String) *@This() {
        return objc.msgSend(_self, "initWithPath:", *@This(), .{_path});
    }

    pub fn tryLock(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "tryLock", objc.BOOL, .{});
    }

    pub fn unlock(_self: *@This()) void {
        return objc.msgSend(_self, "unlock", void, .{});
    }

    pub fn breakLock(_self: *@This()) void {
        return objc.msgSend(_self, "breakLock", void, .{});
    }

    pub fn lockDate(_self: *@This()) ?*Date {
        return objc.msgSend(_self, "lockDate", ?*Date, .{});
    }
};

/// https://developer.apple.com/documentation/Foundation/NSGarbageCollector?language=objc
pub const GarbageCollector = opaque {
    pub const Internal = objc.ExternClass("NSGarbageCollector", @This(), objc.NSObject, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn defaultCollector() ?objc.Id {
        return objc.msgSend(Internal.class(), "defaultCollector", ?objc.Id, .{});
    }

    pub fn isCollecting(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isCollecting", objc.BOOL, .{});
    }

    pub fn disable(_self: *@This()) void {
        return objc.msgSend(_self, "disable", void, .{});
    }

    pub fn enable(_self: *@This()) void {
        return objc.msgSend(_self, "enable", void, .{});
    }

    pub fn isEnabled(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isEnabled", objc.BOOL, .{});
    }

    pub fn collectIfNeeded(_self: *@This()) void {
        return objc.msgSend(_self, "collectIfNeeded", void, .{});
    }

    pub fn collectExhaustively(_self: *@This()) void {
        return objc.msgSend(_self, "collectExhaustively", void, .{});
    }

    pub fn disableCollectorForPointer(_self: *@This(), _ptr: ?*anyopaque) void {
        return objc.msgSend(_self, "disableCollectorForPointer:", void, .{_ptr});
    }

    pub fn enableCollectorForPointer(_self: *@This(), _ptr: ?*anyopaque) void {
        return objc.msgSend(_self, "enableCollectorForPointer:", void, .{_ptr});
    }
};

extern "Foundation" fn NSFileTypeForHFSTypeCode(hfsFileTypeCode: objc.OSType) callconv(.C) ?*String;
pub const fileTypeForHFSTypeCode = NSFileTypeForHFSTypeCode;

extern "Foundation" fn NSHFSTypeCodeFromFileType(fileTypeString: ?*String) callconv(.C) objc.OSType;
pub const hfsTypeCodeFromFileType = NSHFSTypeCodeFromFileType;

extern "Foundation" fn NSHFSTypeOfFile(fullFilePath: ?*String) callconv(.C) ?*String;
pub const hfsTypeOfFile = NSHFSTypeOfFile;

/// https://developer.apple.com/documentation/Foundation/NSHost?language=objc
pub const Host = opaque {
    pub const Internal = objc.ExternClass("NSHost", @This(), objc.NSObject, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn currentHost() *@This() {
        return objc.msgSend(Internal.class(), "currentHost", *@This(), .{});
    }

    pub fn hostWithName(_name: ?*String) *@This() {
        return objc.msgSend(Internal.class(), "hostWithName:", *@This(), .{_name});
    }

    pub fn hostWithAddress(_address: ?*String) *@This() {
        return objc.msgSend(Internal.class(), "hostWithAddress:", *@This(), .{_address});
    }

    pub fn isEqualToHost(_self: *@This(), _aHost: ?*Host) objc.BOOL {
        return objc.msgSend(_self, "isEqualToHost:", objc.BOOL, .{_aHost});
    }

    pub fn setHostCacheEnabled(_flag: objc.BOOL) void {
        return objc.msgSend(Internal.class(), "setHostCacheEnabled:", void, .{_flag});
    }

    pub fn isHostCacheEnabled() objc.BOOL {
        return objc.msgSend(Internal.class(), "isHostCacheEnabled", objc.BOOL, .{});
    }

    pub fn flushHostCache() void {
        return objc.msgSend(Internal.class(), "flushHostCache", void, .{});
    }

    pub fn name(_self: *@This()) ?*String {
        return objc.msgSend(_self, "name", ?*String, .{});
    }

    pub fn names(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "names", ?*anyopaque, .{});
    }

    pub fn address(_self: *@This()) ?*String {
        return objc.msgSend(_self, "address", ?*String, .{});
    }

    pub fn addresses(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "addresses", ?*anyopaque, .{});
    }

    pub fn localizedName(_self: *@This()) ?*String {
        return objc.msgSend(_self, "localizedName", ?*String, .{});
    }
};

/// https://developer.apple.com/documentation/Foundation/NSScriptClassDescription?language=objc
pub const ScriptClassDescription = opaque {
    pub const Internal = objc.ExternClass("NSScriptClassDescription", @This(), ClassDescription, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn registerClassDescriptionForClass(_description: ?*ClassDescription, _aClass: objc.Class) void {
        return objc.msgSend(Internal.class(), "registerClassDescription:forClass:", void, .{ _description, _aClass });
    }

    pub fn invalidateClassDescriptionCache() void {
        return objc.msgSend(Internal.class(), "invalidateClassDescriptionCache", void, .{});
    }

    pub fn classDescriptionForClass(_aClass: objc.Class) ?*ClassDescription {
        return objc.msgSend(Internal.class(), "classDescriptionForClass:", ?*ClassDescription, .{_aClass});
    }

    pub fn inverseForRelationshipKey(_self: *@This(), _relationshipKey: ?*String) ?*String {
        return objc.msgSend(_self, "inverseForRelationshipKey:", ?*String, .{_relationshipKey});
    }

    pub fn attributeKeys(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "attributeKeys", ?*anyopaque, .{});
    }

    pub fn toOneRelationshipKeys(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "toOneRelationshipKeys", ?*anyopaque, .{});
    }

    pub fn toManyRelationshipKeys(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "toManyRelationshipKeys", ?*anyopaque, .{});
    }

    pub fn initWithSuiteNameClassNameDictionary(_self: *@This(), _suiteName: ?*String, _className: ?*String, _classDeclaration: ?*Dictionary) *@This() {
        return objc.msgSend(_self, "initWithSuiteName:className:dictionary:", *@This(), .{ _suiteName, _className, _classDeclaration });
    }

    pub fn matchesAppleEventCode(_self: *@This(), _appleEventCode: objc.FourCharCode) objc.BOOL {
        return objc.msgSend(_self, "matchesAppleEventCode:", objc.BOOL, .{_appleEventCode});
    }

    pub fn supportsCommand(_self: *@This(), _commandDescription: ?*ScriptCommandDescription) objc.BOOL {
        return objc.msgSend(_self, "supportsCommand:", objc.BOOL, .{_commandDescription});
    }

    pub fn selectorForCommand(_self: *@This(), _commandDescription: ?*ScriptCommandDescription) objc.Selector {
        return objc.msgSend(_self, "selectorForCommand:", objc.Selector, .{_commandDescription});
    }

    pub fn typeForKey(_self: *@This(), _key: ?*String) ?*String {
        return objc.msgSend(_self, "typeForKey:", ?*String, .{_key});
    }

    pub fn classDescriptionForKey(_self: *@This(), _key: ?*String) ?*ScriptClassDescription {
        return objc.msgSend(_self, "classDescriptionForKey:", ?*ScriptClassDescription, .{_key});
    }

    pub fn appleEventCodeForKey(_self: *@This(), _key: ?*String) objc.FourCharCode {
        return objc.msgSend(_self, "appleEventCodeForKey:", objc.FourCharCode, .{_key});
    }

    pub fn keyWithAppleEventCode(_self: *@This(), _appleEventCode: objc.FourCharCode) ?*String {
        return objc.msgSend(_self, "keyWithAppleEventCode:", ?*String, .{_appleEventCode});
    }

    pub fn isLocationRequiredToCreateForKey(_self: *@This(), _toManyRelationshipKey: ?*String) objc.BOOL {
        return objc.msgSend(_self, "isLocationRequiredToCreateForKey:", objc.BOOL, .{_toManyRelationshipKey});
    }

    pub fn hasPropertyForKey(_self: *@This(), _key: ?*String) objc.BOOL {
        return objc.msgSend(_self, "hasPropertyForKey:", objc.BOOL, .{_key});
    }

    pub fn hasOrderedToManyRelationshipForKey(_self: *@This(), _key: ?*String) objc.BOOL {
        return objc.msgSend(_self, "hasOrderedToManyRelationshipForKey:", objc.BOOL, .{_key});
    }

    pub fn hasReadablePropertyForKey(_self: *@This(), _key: ?*String) objc.BOOL {
        return objc.msgSend(_self, "hasReadablePropertyForKey:", objc.BOOL, .{_key});
    }

    pub fn hasWritablePropertyForKey(_self: *@This(), _key: ?*String) objc.BOOL {
        return objc.msgSend(_self, "hasWritablePropertyForKey:", objc.BOOL, .{_key});
    }

    pub fn suiteName(_self: *@This()) ?*String {
        return objc.msgSend(_self, "suiteName", ?*String, .{});
    }

    pub fn className(_self: *@This()) ?*String {
        return objc.msgSend(_self, "className", ?*String, .{});
    }

    pub fn implementationClassName(_self: *@This()) ?*String {
        return objc.msgSend(_self, "implementationClassName", ?*String, .{});
    }

    pub fn superclassDescription(_self: *@This()) ?*ScriptClassDescription {
        return objc.msgSend(_self, "superclassDescription", ?*ScriptClassDescription, .{});
    }

    pub fn appleEventCode(_self: *@This()) objc.FourCharCode {
        return objc.msgSend(_self, "appleEventCode", objc.FourCharCode, .{});
    }

    pub fn defaultSubcontainerAttributeKey(_self: *@This()) ?*String {
        return objc.msgSend(_self, "defaultSubcontainerAttributeKey", ?*String, .{});
    }
};

/// https://developer.apple.com/documentation/Foundation/NSScriptCoercionHandler?language=objc
pub const ScriptCoercionHandler = opaque {
    pub const Internal = objc.ExternClass("NSScriptCoercionHandler", @This(), objc.NSObject, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn sharedCoercionHandler() ?*ScriptCoercionHandler {
        return objc.msgSend(Internal.class(), "sharedCoercionHandler", ?*ScriptCoercionHandler, .{});
    }

    pub fn coerceValueToClass(_self: *@This(), _value: ?objc.Id, _toClass: objc.Class) ?objc.Id {
        return objc.msgSend(_self, "coerceValue:toClass:", ?objc.Id, .{ _value, _toClass });
    }

    pub fn registerCoercerSelectorToConvertFromClassToClass(
        _self: *@This(),
        _coercer: ?objc.Id,
        _selector: objc.Selector,
        _fromClass: objc.Class,
        _toClass: objc.Class,
    ) void {
        return objc.msgSend(_self, "registerCoercer:selector:toConvertFromClass:toClass:", void, .{
            _coercer,
            _selector,
            _fromClass,
            _toClass,
        });
    }
};

pub const anon131 = objc.NSInteger;
pub const anon131_NSNoScriptError: objc.NSInteger = 0;
pub const anon131_NSReceiverEvaluationScriptError: objc.NSInteger = 1;
pub const anon131_NSKeySpecifierEvaluationScriptError: objc.NSInteger = 2;
pub const anon131_NSArgumentEvaluationScriptError: objc.NSInteger = 3;
pub const anon131_NSReceiversCantHandleCommandScriptError: objc.NSInteger = 4;
pub const anon131_NSRequiredArgumentsMissingScriptError: objc.NSInteger = 5;
pub const anon131_NSArgumentsWrongScriptError: objc.NSInteger = 6;
pub const anon131_NSUnknownKeyScriptError: objc.NSInteger = 7;
pub const anon131_NSInternalScriptError: objc.NSInteger = 8;
pub const anon131_NSOperationNotSupportedForKeyScriptError: objc.NSInteger = 9;
pub const anon131_NSCannotCreateScriptCommandError: objc.NSInteger = 10;
pub const anon131_NSNoSpecifierError: objc.NSInteger = 0;
pub const anon131_NSNoTopLevelContainersSpecifierError: objc.NSInteger = 1;
pub const anon131_NSContainerSpecifierError: objc.NSInteger = 2;
pub const anon131_NSUnknownKeySpecifierError: objc.NSInteger = 3;
pub const anon131_NSInvalidIndexSpecifierError: objc.NSInteger = 4;
pub const anon131_NSInternalSpecifierError: objc.NSInteger = 5;
pub const anon131_NSOperationNotSupportedForKeySpecifierError: objc.NSInteger = 6;

/// https://developer.apple.com/documentation/Foundation/NSScriptCommand?language=objc
pub const ScriptCommand = opaque {
    pub const anon375 = extern struct {
        hasEvaluatedReceivers: u32,
        hasEvaluatedArguments: u32,
        RESERVED: u32,
    };

    pub const Internal = objc.ExternClass("NSScriptCommand", @This(), objc.NSObject, &.{Coding});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn initWithCommandDescription(_self: *@This(), _commandDef: ?*ScriptCommandDescription) *@This() {
        return objc.msgSend(_self, "initWithCommandDescription:", *@This(), .{_commandDef});
    }

    pub fn performDefaultImplementation(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "performDefaultImplementation", ?objc.Id, .{});
    }

    pub fn executeCommand(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "executeCommand", ?objc.Id, .{});
    }

    pub fn currentCommand() ?*ScriptCommand {
        return objc.msgSend(Internal.class(), "currentCommand", ?*ScriptCommand, .{});
    }

    pub fn suspendExecution(_self: *@This()) void {
        return objc.msgSend(_self, "suspendExecution", void, .{});
    }

    pub fn resumeExecutionWithResult(_self: *@This(), _result: ?objc.Id) void {
        return objc.msgSend(_self, "resumeExecutionWithResult:", void, .{_result});
    }

    pub fn commandDescription(_self: *@This()) ?*ScriptCommandDescription {
        return objc.msgSend(_self, "commandDescription", ?*ScriptCommandDescription, .{});
    }

    pub fn directParameter(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "directParameter", ?objc.Id, .{});
    }

    pub fn setDirectParameter(_self: *@This(), _directParameter: ?objc.Id) void {
        return objc.msgSend(_self, "setDirectParameter:", void, .{_directParameter});
    }

    pub fn receiversSpecifier(_self: *@This()) ?*ScriptObjectSpecifier {
        return objc.msgSend(_self, "receiversSpecifier", ?*ScriptObjectSpecifier, .{});
    }

    pub fn setReceiversSpecifier(_self: *@This(), _receiversSpecifier: ?*ScriptObjectSpecifier) void {
        return objc.msgSend(_self, "setReceiversSpecifier:", void, .{_receiversSpecifier});
    }

    pub fn evaluatedReceivers(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "evaluatedReceivers", ?objc.Id, .{});
    }

    pub fn arguments(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "arguments", ?*anyopaque, .{});
    }

    pub fn setArguments(_self: *@This(), _arguments: ?*anyopaque) void {
        return objc.msgSend(_self, "setArguments:", void, .{_arguments});
    }

    pub fn evaluatedArguments(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "evaluatedArguments", ?*anyopaque, .{});
    }

    pub fn isWellFormed(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isWellFormed", objc.BOOL, .{});
    }

    pub fn scriptErrorNumber(_self: *@This()) objc.NSInteger {
        return objc.msgSend(_self, "scriptErrorNumber", objc.NSInteger, .{});
    }

    pub fn setScriptErrorNumber(_self: *@This(), _scriptErrorNumber: objc.NSInteger) void {
        return objc.msgSend(_self, "setScriptErrorNumber:", void, .{_scriptErrorNumber});
    }

    pub fn scriptErrorOffendingObjectDescriptor(_self: *@This()) ?*AppleEventDescriptor {
        return objc.msgSend(_self, "scriptErrorOffendingObjectDescriptor", ?*AppleEventDescriptor, .{});
    }

    pub fn setScriptErrorOffendingObjectDescriptor(_self: *@This(), _scriptErrorOffendingObjectDescriptor: ?*AppleEventDescriptor) void {
        return objc.msgSend(_self, "setScriptErrorOffendingObjectDescriptor:", void, .{_scriptErrorOffendingObjectDescriptor});
    }

    pub fn scriptErrorExpectedTypeDescriptor(_self: *@This()) ?*AppleEventDescriptor {
        return objc.msgSend(_self, "scriptErrorExpectedTypeDescriptor", ?*AppleEventDescriptor, .{});
    }

    pub fn setScriptErrorExpectedTypeDescriptor(_self: *@This(), _scriptErrorExpectedTypeDescriptor: ?*AppleEventDescriptor) void {
        return objc.msgSend(_self, "setScriptErrorExpectedTypeDescriptor:", void, .{_scriptErrorExpectedTypeDescriptor});
    }

    pub fn scriptErrorString(_self: *@This()) ?*String {
        return objc.msgSend(_self, "scriptErrorString", ?*String, .{});
    }

    pub fn setScriptErrorString(_self: *@This(), _scriptErrorString: ?*String) void {
        return objc.msgSend(_self, "setScriptErrorString:", void, .{_scriptErrorString});
    }

    pub fn appleEvent(_self: *@This()) ?*AppleEventDescriptor {
        return objc.msgSend(_self, "appleEvent", ?*AppleEventDescriptor, .{});
    }
};

/// https://developer.apple.com/documentation/Foundation/NSScriptCommandDescription?language=objc
pub const ScriptCommandDescription = opaque {
    pub const Internal = objc.ExternClass("NSScriptCommandDescription", @This(), objc.NSObject, &.{Coding});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn initWithSuiteNameCommandNameDictionary(_self: *@This(), _suiteName: ?*String, _commandName: ?*String, _commandDeclaration: ?*Dictionary) *@This() {
        return objc.msgSend(_self, "initWithSuiteName:commandName:dictionary:", *@This(), .{ _suiteName, _commandName, _commandDeclaration });
    }

    pub fn typeForArgumentWithName(_self: *@This(), _argumentName: ?*String) ?*String {
        return objc.msgSend(_self, "typeForArgumentWithName:", ?*String, .{_argumentName});
    }

    pub fn appleEventCodeForArgumentWithName(_self: *@This(), _argumentName: ?*String) objc.FourCharCode {
        return objc.msgSend(_self, "appleEventCodeForArgumentWithName:", objc.FourCharCode, .{_argumentName});
    }

    pub fn isOptionalArgumentWithName(_self: *@This(), _argumentName: ?*String) objc.BOOL {
        return objc.msgSend(_self, "isOptionalArgumentWithName:", objc.BOOL, .{_argumentName});
    }

    pub fn createCommandInstance(_self: *@This()) ?*ScriptCommand {
        return objc.msgSend(_self, "createCommandInstance", ?*ScriptCommand, .{});
    }

    pub fn createCommandInstanceWithZone(_self: *@This(), _zone: ?*Zone) ?*ScriptCommand {
        return objc.msgSend(_self, "createCommandInstanceWithZone:", ?*ScriptCommand, .{_zone});
    }

    pub fn suiteName(_self: *@This()) ?*String {
        return objc.msgSend(_self, "suiteName", ?*String, .{});
    }

    pub fn commandName(_self: *@This()) ?*String {
        return objc.msgSend(_self, "commandName", ?*String, .{});
    }

    pub fn appleEventClassCode(_self: *@This()) objc.FourCharCode {
        return objc.msgSend(_self, "appleEventClassCode", objc.FourCharCode, .{});
    }

    pub fn appleEventCode(_self: *@This()) objc.FourCharCode {
        return objc.msgSend(_self, "appleEventCode", objc.FourCharCode, .{});
    }

    pub fn commandClassName(_self: *@This()) ?*String {
        return objc.msgSend(_self, "commandClassName", ?*String, .{});
    }

    pub fn returnType(_self: *@This()) ?*String {
        return objc.msgSend(_self, "returnType", ?*String, .{});
    }

    pub fn appleEventCodeForReturnType(_self: *@This()) objc.FourCharCode {
        return objc.msgSend(_self, "appleEventCodeForReturnType", objc.FourCharCode, .{});
    }

    pub fn argumentNames(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "argumentNames", ?*anyopaque, .{});
    }
};

/// https://developer.apple.com/documentation/Foundation/NSScriptExecutionContext?language=objc
pub const ScriptExecutionContext = opaque {
    pub const Internal = objc.ExternClass("NSScriptExecutionContext", @This(), objc.NSObject, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn sharedScriptExecutionContext() ?*ScriptExecutionContext {
        return objc.msgSend(Internal.class(), "sharedScriptExecutionContext", ?*ScriptExecutionContext, .{});
    }

    pub fn topLevelObject(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "topLevelObject", ?objc.Id, .{});
    }

    pub fn setTopLevelObject(_self: *@This(), _topLevelObject: ?objc.Id) void {
        return objc.msgSend(_self, "setTopLevelObject:", void, .{_topLevelObject});
    }

    pub fn objectBeingTested(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "objectBeingTested", ?objc.Id, .{});
    }

    pub fn setObjectBeingTested(_self: *@This(), _objectBeingTested: ?objc.Id) void {
        return objc.msgSend(_self, "setObjectBeingTested:", void, .{_objectBeingTested});
    }

    pub fn rangeContainerObject(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "rangeContainerObject", ?objc.Id, .{});
    }

    pub fn setRangeContainerObject(_self: *@This(), _rangeContainerObject: ?objc.Id) void {
        return objc.msgSend(_self, "setRangeContainerObject:", void, .{_rangeContainerObject});
    }
};

pub const InsertionPosition = objc.NSUInteger;
pub const InsertionPosition_PositionAfter: objc.NSUInteger = 0;
pub const InsertionPosition_PositionBefore: objc.NSUInteger = 1;
pub const InsertionPosition_PositionBeginning: objc.NSUInteger = 2;
pub const InsertionPosition_PositionEnd: objc.NSUInteger = 3;
pub const InsertionPosition_PositionReplace: objc.NSUInteger = 4;

pub const RelativePosition = objc.NSUInteger;
pub const RelativePosition_After: objc.NSUInteger = 0;
pub const RelativePosition_Before: objc.NSUInteger = 1;

pub const WhoseSubelementIdentifier = objc.NSUInteger;
pub const WhoseSubelementIdentifier_IndexSubelement: objc.NSUInteger = 0;
pub const WhoseSubelementIdentifier_EverySubelement: objc.NSUInteger = 1;
pub const WhoseSubelementIdentifier_MiddleSubelement: objc.NSUInteger = 2;
pub const WhoseSubelementIdentifier_RandomSubelement: objc.NSUInteger = 3;
pub const WhoseSubelementIdentifier_NoSubelement: objc.NSUInteger = 4;

/// https://developer.apple.com/documentation/Foundation/NSScriptObjectSpecifier?language=objc
pub const ScriptObjectSpecifier = opaque {
    pub const Internal = objc.ExternClass("NSScriptObjectSpecifier", @This(), objc.NSObject, &.{Coding});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn objectSpecifierWithDescriptor(_descriptor: ?*AppleEventDescriptor) ?*ScriptObjectSpecifier {
        return objc.msgSend(Internal.class(), "objectSpecifierWithDescriptor:", ?*ScriptObjectSpecifier, .{_descriptor});
    }

    pub fn initWithContainerSpecifierKey(_self: *@This(), _container: ?*ScriptObjectSpecifier, _property: ?*String) *@This() {
        return objc.msgSend(_self, "initWithContainerSpecifier:key:", *@This(), .{ _container, _property });
    }

    pub fn initWithContainerClassDescriptionContainerSpecifierKey(_self: *@This(), _classDesc: ?*ScriptClassDescription, _container: ?*ScriptObjectSpecifier, _property: ?*String) *@This() {
        return objc.msgSend(_self, "initWithContainerClassDescription:containerSpecifier:key:", *@This(), .{ _classDesc, _container, _property });
    }

    pub fn indicesOfObjectsByEvaluatingWithContainerCount(_self: *@This(), _container: ?objc.Id, _count: ?*objc.NSInteger) ?*objc.NSInteger {
        return objc.msgSend(_self, "indicesOfObjectsByEvaluatingWithContainer:count:", ?*objc.NSInteger, .{ _container, _count });
    }

    pub fn objectsByEvaluatingWithContainers(_self: *@This(), _containers: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "objectsByEvaluatingWithContainers:", ?objc.Id, .{_containers});
    }

    pub fn childSpecifier(_self: *@This()) ?*ScriptObjectSpecifier {
        return objc.msgSend(_self, "childSpecifier", ?*ScriptObjectSpecifier, .{});
    }

    pub fn setChildSpecifier(_self: *@This(), _childSpecifier: ?*ScriptObjectSpecifier) void {
        return objc.msgSend(_self, "setChildSpecifier:", void, .{_childSpecifier});
    }

    pub fn containerSpecifier(_self: *@This()) ?*ScriptObjectSpecifier {
        return objc.msgSend(_self, "containerSpecifier", ?*ScriptObjectSpecifier, .{});
    }

    pub fn setContainerSpecifier(_self: *@This(), _containerSpecifier: ?*ScriptObjectSpecifier) void {
        return objc.msgSend(_self, "setContainerSpecifier:", void, .{_containerSpecifier});
    }

    pub fn containerIsObjectBeingTested(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "containerIsObjectBeingTested", objc.BOOL, .{});
    }

    pub fn setContainerIsObjectBeingTested(_self: *@This(), _containerIsObjectBeingTested: objc.BOOL) void {
        return objc.msgSend(_self, "setContainerIsObjectBeingTested:", void, .{_containerIsObjectBeingTested});
    }

    pub fn containerIsRangeContainerObject(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "containerIsRangeContainerObject", objc.BOOL, .{});
    }

    pub fn setContainerIsRangeContainerObject(_self: *@This(), _containerIsRangeContainerObject: objc.BOOL) void {
        return objc.msgSend(_self, "setContainerIsRangeContainerObject:", void, .{_containerIsRangeContainerObject});
    }

    pub fn key(_self: *@This()) ?*String {
        return objc.msgSend(_self, "key", ?*String, .{});
    }

    pub fn setKey(_self: *@This(), _key: ?*String) void {
        return objc.msgSend(_self, "setKey:", void, .{_key});
    }

    pub fn containerClassDescription(_self: *@This()) ?*ScriptClassDescription {
        return objc.msgSend(_self, "containerClassDescription", ?*ScriptClassDescription, .{});
    }

    pub fn setContainerClassDescription(_self: *@This(), _containerClassDescription: ?*ScriptClassDescription) void {
        return objc.msgSend(_self, "setContainerClassDescription:", void, .{_containerClassDescription});
    }

    pub fn keyClassDescription(_self: *@This()) ?*ScriptClassDescription {
        return objc.msgSend(_self, "keyClassDescription", ?*ScriptClassDescription, .{});
    }

    pub fn objectsByEvaluatingSpecifier(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "objectsByEvaluatingSpecifier", ?objc.Id, .{});
    }

    pub fn evaluationErrorNumber(_self: *@This()) objc.NSInteger {
        return objc.msgSend(_self, "evaluationErrorNumber", objc.NSInteger, .{});
    }

    pub fn setEvaluationErrorNumber(_self: *@This(), _evaluationErrorNumber: objc.NSInteger) void {
        return objc.msgSend(_self, "setEvaluationErrorNumber:", void, .{_evaluationErrorNumber});
    }

    pub fn evaluationErrorSpecifier(_self: *@This()) ?*ScriptObjectSpecifier {
        return objc.msgSend(_self, "evaluationErrorSpecifier", ?*ScriptObjectSpecifier, .{});
    }

    pub fn descriptor(_self: *@This()) ?*AppleEventDescriptor {
        return objc.msgSend(_self, "descriptor", ?*AppleEventDescriptor, .{});
    }
};

/// https://developer.apple.com/documentation/Foundation/NSIndexSpecifier?language=objc
pub const IndexSpecifier = opaque {
    pub const Internal = objc.ExternClass("NSIndexSpecifier", @This(), ScriptObjectSpecifier, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn objectSpecifierWithDescriptor(_descriptor: ?*AppleEventDescriptor) ?*ScriptObjectSpecifier {
        return objc.msgSend(Internal.class(), "objectSpecifierWithDescriptor:", ?*ScriptObjectSpecifier, .{_descriptor});
    }

    pub fn initWithContainerSpecifierKey(_self: *@This(), _container: ?*ScriptObjectSpecifier, _property: ?*String) *@This() {
        return objc.msgSend(_self, "initWithContainerSpecifier:key:", *@This(), .{ _container, _property });
    }

    pub fn initWithContainerClassDescriptionContainerSpecifierKey(_self: *@This(), _classDesc: ?*ScriptClassDescription, _container: ?*ScriptObjectSpecifier, _property: ?*String) *@This() {
        return objc.msgSend(_self, "initWithContainerClassDescription:containerSpecifier:key:", *@This(), .{ _classDesc, _container, _property });
    }

    pub fn indicesOfObjectsByEvaluatingWithContainerCount(_self: *@This(), _container: ?objc.Id, _count: ?*objc.NSInteger) ?*objc.NSInteger {
        return objc.msgSend(_self, "indicesOfObjectsByEvaluatingWithContainer:count:", ?*objc.NSInteger, .{ _container, _count });
    }

    pub fn objectsByEvaluatingWithContainers(_self: *@This(), _containers: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "objectsByEvaluatingWithContainers:", ?objc.Id, .{_containers});
    }

    pub fn childSpecifier(_self: *@This()) ?*ScriptObjectSpecifier {
        return objc.msgSend(_self, "childSpecifier", ?*ScriptObjectSpecifier, .{});
    }

    pub fn setChildSpecifier(_self: *@This(), _childSpecifier: ?*ScriptObjectSpecifier) void {
        return objc.msgSend(_self, "setChildSpecifier:", void, .{_childSpecifier});
    }

    pub fn containerSpecifier(_self: *@This()) ?*ScriptObjectSpecifier {
        return objc.msgSend(_self, "containerSpecifier", ?*ScriptObjectSpecifier, .{});
    }

    pub fn setContainerSpecifier(_self: *@This(), _containerSpecifier: ?*ScriptObjectSpecifier) void {
        return objc.msgSend(_self, "setContainerSpecifier:", void, .{_containerSpecifier});
    }

    pub fn containerIsObjectBeingTested(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "containerIsObjectBeingTested", objc.BOOL, .{});
    }

    pub fn setContainerIsObjectBeingTested(_self: *@This(), _containerIsObjectBeingTested: objc.BOOL) void {
        return objc.msgSend(_self, "setContainerIsObjectBeingTested:", void, .{_containerIsObjectBeingTested});
    }

    pub fn containerIsRangeContainerObject(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "containerIsRangeContainerObject", objc.BOOL, .{});
    }

    pub fn setContainerIsRangeContainerObject(_self: *@This(), _containerIsRangeContainerObject: objc.BOOL) void {
        return objc.msgSend(_self, "setContainerIsRangeContainerObject:", void, .{_containerIsRangeContainerObject});
    }

    pub fn key(_self: *@This()) ?*String {
        return objc.msgSend(_self, "key", ?*String, .{});
    }

    pub fn setKey(_self: *@This(), _key: ?*String) void {
        return objc.msgSend(_self, "setKey:", void, .{_key});
    }

    pub fn containerClassDescription(_self: *@This()) ?*ScriptClassDescription {
        return objc.msgSend(_self, "containerClassDescription", ?*ScriptClassDescription, .{});
    }

    pub fn setContainerClassDescription(_self: *@This(), _containerClassDescription: ?*ScriptClassDescription) void {
        return objc.msgSend(_self, "setContainerClassDescription:", void, .{_containerClassDescription});
    }

    pub fn keyClassDescription(_self: *@This()) ?*ScriptClassDescription {
        return objc.msgSend(_self, "keyClassDescription", ?*ScriptClassDescription, .{});
    }

    pub fn objectsByEvaluatingSpecifier(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "objectsByEvaluatingSpecifier", ?objc.Id, .{});
    }

    pub fn evaluationErrorNumber(_self: *@This()) objc.NSInteger {
        return objc.msgSend(_self, "evaluationErrorNumber", objc.NSInteger, .{});
    }

    pub fn setEvaluationErrorNumber(_self: *@This(), _evaluationErrorNumber: objc.NSInteger) void {
        return objc.msgSend(_self, "setEvaluationErrorNumber:", void, .{_evaluationErrorNumber});
    }

    pub fn evaluationErrorSpecifier(_self: *@This()) ?*ScriptObjectSpecifier {
        return objc.msgSend(_self, "evaluationErrorSpecifier", ?*ScriptObjectSpecifier, .{});
    }

    pub fn descriptor(_self: *@This()) ?*AppleEventDescriptor {
        return objc.msgSend(_self, "descriptor", ?*AppleEventDescriptor, .{});
    }

    pub fn initWithContainerClassDescriptionContainerSpecifierKeyIndex(
        _self: *@This(),
        _classDesc: ?*ScriptClassDescription,
        _container: ?*ScriptObjectSpecifier,
        _property: ?*String,
        _index: objc.NSInteger,
    ) *@This() {
        return objc.msgSend(_self, "initWithContainerClassDescription:containerSpecifier:key:index:", *@This(), .{
            _classDesc,
            _container,
            _property,
            _index,
        });
    }

    pub fn index(_self: *@This()) objc.NSInteger {
        return objc.msgSend(_self, "index", objc.NSInteger, .{});
    }

    pub fn setIndex(_self: *@This(), _index: objc.NSInteger) void {
        return objc.msgSend(_self, "setIndex:", void, .{_index});
    }
};

/// https://developer.apple.com/documentation/Foundation/NSMiddleSpecifier?language=objc
pub const MiddleSpecifier = opaque {
    pub const Internal = objc.ExternClass("NSMiddleSpecifier", @This(), ScriptObjectSpecifier, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn objectSpecifierWithDescriptor(_descriptor: ?*AppleEventDescriptor) ?*ScriptObjectSpecifier {
        return objc.msgSend(Internal.class(), "objectSpecifierWithDescriptor:", ?*ScriptObjectSpecifier, .{_descriptor});
    }

    pub fn initWithContainerSpecifierKey(_self: *@This(), _container: ?*ScriptObjectSpecifier, _property: ?*String) *@This() {
        return objc.msgSend(_self, "initWithContainerSpecifier:key:", *@This(), .{ _container, _property });
    }

    pub fn initWithContainerClassDescriptionContainerSpecifierKey(_self: *@This(), _classDesc: ?*ScriptClassDescription, _container: ?*ScriptObjectSpecifier, _property: ?*String) *@This() {
        return objc.msgSend(_self, "initWithContainerClassDescription:containerSpecifier:key:", *@This(), .{ _classDesc, _container, _property });
    }

    pub fn indicesOfObjectsByEvaluatingWithContainerCount(_self: *@This(), _container: ?objc.Id, _count: ?*objc.NSInteger) ?*objc.NSInteger {
        return objc.msgSend(_self, "indicesOfObjectsByEvaluatingWithContainer:count:", ?*objc.NSInteger, .{ _container, _count });
    }

    pub fn objectsByEvaluatingWithContainers(_self: *@This(), _containers: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "objectsByEvaluatingWithContainers:", ?objc.Id, .{_containers});
    }

    pub fn childSpecifier(_self: *@This()) ?*ScriptObjectSpecifier {
        return objc.msgSend(_self, "childSpecifier", ?*ScriptObjectSpecifier, .{});
    }

    pub fn setChildSpecifier(_self: *@This(), _childSpecifier: ?*ScriptObjectSpecifier) void {
        return objc.msgSend(_self, "setChildSpecifier:", void, .{_childSpecifier});
    }

    pub fn containerSpecifier(_self: *@This()) ?*ScriptObjectSpecifier {
        return objc.msgSend(_self, "containerSpecifier", ?*ScriptObjectSpecifier, .{});
    }

    pub fn setContainerSpecifier(_self: *@This(), _containerSpecifier: ?*ScriptObjectSpecifier) void {
        return objc.msgSend(_self, "setContainerSpecifier:", void, .{_containerSpecifier});
    }

    pub fn containerIsObjectBeingTested(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "containerIsObjectBeingTested", objc.BOOL, .{});
    }

    pub fn setContainerIsObjectBeingTested(_self: *@This(), _containerIsObjectBeingTested: objc.BOOL) void {
        return objc.msgSend(_self, "setContainerIsObjectBeingTested:", void, .{_containerIsObjectBeingTested});
    }

    pub fn containerIsRangeContainerObject(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "containerIsRangeContainerObject", objc.BOOL, .{});
    }

    pub fn setContainerIsRangeContainerObject(_self: *@This(), _containerIsRangeContainerObject: objc.BOOL) void {
        return objc.msgSend(_self, "setContainerIsRangeContainerObject:", void, .{_containerIsRangeContainerObject});
    }

    pub fn key(_self: *@This()) ?*String {
        return objc.msgSend(_self, "key", ?*String, .{});
    }

    pub fn setKey(_self: *@This(), _key: ?*String) void {
        return objc.msgSend(_self, "setKey:", void, .{_key});
    }

    pub fn containerClassDescription(_self: *@This()) ?*ScriptClassDescription {
        return objc.msgSend(_self, "containerClassDescription", ?*ScriptClassDescription, .{});
    }

    pub fn setContainerClassDescription(_self: *@This(), _containerClassDescription: ?*ScriptClassDescription) void {
        return objc.msgSend(_self, "setContainerClassDescription:", void, .{_containerClassDescription});
    }

    pub fn keyClassDescription(_self: *@This()) ?*ScriptClassDescription {
        return objc.msgSend(_self, "keyClassDescription", ?*ScriptClassDescription, .{});
    }

    pub fn objectsByEvaluatingSpecifier(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "objectsByEvaluatingSpecifier", ?objc.Id, .{});
    }

    pub fn evaluationErrorNumber(_self: *@This()) objc.NSInteger {
        return objc.msgSend(_self, "evaluationErrorNumber", objc.NSInteger, .{});
    }

    pub fn setEvaluationErrorNumber(_self: *@This(), _evaluationErrorNumber: objc.NSInteger) void {
        return objc.msgSend(_self, "setEvaluationErrorNumber:", void, .{_evaluationErrorNumber});
    }

    pub fn evaluationErrorSpecifier(_self: *@This()) ?*ScriptObjectSpecifier {
        return objc.msgSend(_self, "evaluationErrorSpecifier", ?*ScriptObjectSpecifier, .{});
    }

    pub fn descriptor(_self: *@This()) ?*AppleEventDescriptor {
        return objc.msgSend(_self, "descriptor", ?*AppleEventDescriptor, .{});
    }
};

/// https://developer.apple.com/documentation/Foundation/NSNameSpecifier?language=objc
pub const NameSpecifier = opaque {
    pub const Internal = objc.ExternClass("NSNameSpecifier", @This(), ScriptObjectSpecifier, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn objectSpecifierWithDescriptor(_descriptor: ?*AppleEventDescriptor) ?*ScriptObjectSpecifier {
        return objc.msgSend(Internal.class(), "objectSpecifierWithDescriptor:", ?*ScriptObjectSpecifier, .{_descriptor});
    }

    pub fn initWithContainerSpecifierKey(_self: *@This(), _container: ?*ScriptObjectSpecifier, _property: ?*String) *@This() {
        return objc.msgSend(_self, "initWithContainerSpecifier:key:", *@This(), .{ _container, _property });
    }

    pub fn initWithContainerClassDescriptionContainerSpecifierKey(_self: *@This(), _classDesc: ?*ScriptClassDescription, _container: ?*ScriptObjectSpecifier, _property: ?*String) *@This() {
        return objc.msgSend(_self, "initWithContainerClassDescription:containerSpecifier:key:", *@This(), .{ _classDesc, _container, _property });
    }

    pub fn indicesOfObjectsByEvaluatingWithContainerCount(_self: *@This(), _container: ?objc.Id, _count: ?*objc.NSInteger) ?*objc.NSInteger {
        return objc.msgSend(_self, "indicesOfObjectsByEvaluatingWithContainer:count:", ?*objc.NSInteger, .{ _container, _count });
    }

    pub fn objectsByEvaluatingWithContainers(_self: *@This(), _containers: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "objectsByEvaluatingWithContainers:", ?objc.Id, .{_containers});
    }

    pub fn childSpecifier(_self: *@This()) ?*ScriptObjectSpecifier {
        return objc.msgSend(_self, "childSpecifier", ?*ScriptObjectSpecifier, .{});
    }

    pub fn setChildSpecifier(_self: *@This(), _childSpecifier: ?*ScriptObjectSpecifier) void {
        return objc.msgSend(_self, "setChildSpecifier:", void, .{_childSpecifier});
    }

    pub fn containerSpecifier(_self: *@This()) ?*ScriptObjectSpecifier {
        return objc.msgSend(_self, "containerSpecifier", ?*ScriptObjectSpecifier, .{});
    }

    pub fn setContainerSpecifier(_self: *@This(), _containerSpecifier: ?*ScriptObjectSpecifier) void {
        return objc.msgSend(_self, "setContainerSpecifier:", void, .{_containerSpecifier});
    }

    pub fn containerIsObjectBeingTested(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "containerIsObjectBeingTested", objc.BOOL, .{});
    }

    pub fn setContainerIsObjectBeingTested(_self: *@This(), _containerIsObjectBeingTested: objc.BOOL) void {
        return objc.msgSend(_self, "setContainerIsObjectBeingTested:", void, .{_containerIsObjectBeingTested});
    }

    pub fn containerIsRangeContainerObject(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "containerIsRangeContainerObject", objc.BOOL, .{});
    }

    pub fn setContainerIsRangeContainerObject(_self: *@This(), _containerIsRangeContainerObject: objc.BOOL) void {
        return objc.msgSend(_self, "setContainerIsRangeContainerObject:", void, .{_containerIsRangeContainerObject});
    }

    pub fn key(_self: *@This()) ?*String {
        return objc.msgSend(_self, "key", ?*String, .{});
    }

    pub fn setKey(_self: *@This(), _key: ?*String) void {
        return objc.msgSend(_self, "setKey:", void, .{_key});
    }

    pub fn containerClassDescription(_self: *@This()) ?*ScriptClassDescription {
        return objc.msgSend(_self, "containerClassDescription", ?*ScriptClassDescription, .{});
    }

    pub fn setContainerClassDescription(_self: *@This(), _containerClassDescription: ?*ScriptClassDescription) void {
        return objc.msgSend(_self, "setContainerClassDescription:", void, .{_containerClassDescription});
    }

    pub fn keyClassDescription(_self: *@This()) ?*ScriptClassDescription {
        return objc.msgSend(_self, "keyClassDescription", ?*ScriptClassDescription, .{});
    }

    pub fn objectsByEvaluatingSpecifier(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "objectsByEvaluatingSpecifier", ?objc.Id, .{});
    }

    pub fn evaluationErrorNumber(_self: *@This()) objc.NSInteger {
        return objc.msgSend(_self, "evaluationErrorNumber", objc.NSInteger, .{});
    }

    pub fn setEvaluationErrorNumber(_self: *@This(), _evaluationErrorNumber: objc.NSInteger) void {
        return objc.msgSend(_self, "setEvaluationErrorNumber:", void, .{_evaluationErrorNumber});
    }

    pub fn evaluationErrorSpecifier(_self: *@This()) ?*ScriptObjectSpecifier {
        return objc.msgSend(_self, "evaluationErrorSpecifier", ?*ScriptObjectSpecifier, .{});
    }

    pub fn descriptor(_self: *@This()) ?*AppleEventDescriptor {
        return objc.msgSend(_self, "descriptor", ?*AppleEventDescriptor, .{});
    }

    pub fn initWithContainerClassDescriptionContainerSpecifierKeyName(
        _self: *@This(),
        _classDesc: ?*ScriptClassDescription,
        _container: ?*ScriptObjectSpecifier,
        _property: ?*String,
        _name: ?*String,
    ) *@This() {
        return objc.msgSend(_self, "initWithContainerClassDescription:containerSpecifier:key:name:", *@This(), .{
            _classDesc,
            _container,
            _property,
            _name,
        });
    }

    pub fn name(_self: *@This()) ?*String {
        return objc.msgSend(_self, "name", ?*String, .{});
    }

    pub fn setName(_self: *@This(), _name: ?*String) void {
        return objc.msgSend(_self, "setName:", void, .{_name});
    }
};

/// https://developer.apple.com/documentation/Foundation/NSPositionalSpecifier?language=objc
pub const PositionalSpecifier = opaque {
    pub const Internal = objc.ExternClass("NSPositionalSpecifier", @This(), objc.NSObject, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn initWithPositionObjectSpecifier(_self: *@This(), _position: InsertionPosition, _specifier: ?*ScriptObjectSpecifier) *@This() {
        return objc.msgSend(_self, "initWithPosition:objectSpecifier:", *@This(), .{ _position, _specifier });
    }

    pub fn setInsertionClassDescription(_self: *@This(), _classDescription: ?*ScriptClassDescription) void {
        return objc.msgSend(_self, "setInsertionClassDescription:", void, .{_classDescription});
    }

    pub fn evaluate(_self: *@This()) void {
        return objc.msgSend(_self, "evaluate", void, .{});
    }

    pub fn position(_self: *@This()) InsertionPosition {
        return objc.msgSend(_self, "position", InsertionPosition, .{});
    }

    pub fn objectSpecifier(_self: *@This()) ?*ScriptObjectSpecifier {
        return objc.msgSend(_self, "objectSpecifier", ?*ScriptObjectSpecifier, .{});
    }

    pub fn insertionContainer(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "insertionContainer", ?objc.Id, .{});
    }

    pub fn insertionKey(_self: *@This()) ?*String {
        return objc.msgSend(_self, "insertionKey", ?*String, .{});
    }

    pub fn insertionIndex(_self: *@This()) objc.NSInteger {
        return objc.msgSend(_self, "insertionIndex", objc.NSInteger, .{});
    }

    pub fn insertionReplaces(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "insertionReplaces", objc.BOOL, .{});
    }
};

/// https://developer.apple.com/documentation/Foundation/NSPropertySpecifier?language=objc
pub const PropertySpecifier = opaque {
    pub const Internal = objc.ExternClass("NSPropertySpecifier", @This(), ScriptObjectSpecifier, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn objectSpecifierWithDescriptor(_descriptor: ?*AppleEventDescriptor) ?*ScriptObjectSpecifier {
        return objc.msgSend(Internal.class(), "objectSpecifierWithDescriptor:", ?*ScriptObjectSpecifier, .{_descriptor});
    }

    pub fn initWithContainerSpecifierKey(_self: *@This(), _container: ?*ScriptObjectSpecifier, _property: ?*String) *@This() {
        return objc.msgSend(_self, "initWithContainerSpecifier:key:", *@This(), .{ _container, _property });
    }

    pub fn initWithContainerClassDescriptionContainerSpecifierKey(_self: *@This(), _classDesc: ?*ScriptClassDescription, _container: ?*ScriptObjectSpecifier, _property: ?*String) *@This() {
        return objc.msgSend(_self, "initWithContainerClassDescription:containerSpecifier:key:", *@This(), .{ _classDesc, _container, _property });
    }

    pub fn indicesOfObjectsByEvaluatingWithContainerCount(_self: *@This(), _container: ?objc.Id, _count: ?*objc.NSInteger) ?*objc.NSInteger {
        return objc.msgSend(_self, "indicesOfObjectsByEvaluatingWithContainer:count:", ?*objc.NSInteger, .{ _container, _count });
    }

    pub fn objectsByEvaluatingWithContainers(_self: *@This(), _containers: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "objectsByEvaluatingWithContainers:", ?objc.Id, .{_containers});
    }

    pub fn childSpecifier(_self: *@This()) ?*ScriptObjectSpecifier {
        return objc.msgSend(_self, "childSpecifier", ?*ScriptObjectSpecifier, .{});
    }

    pub fn setChildSpecifier(_self: *@This(), _childSpecifier: ?*ScriptObjectSpecifier) void {
        return objc.msgSend(_self, "setChildSpecifier:", void, .{_childSpecifier});
    }

    pub fn containerSpecifier(_self: *@This()) ?*ScriptObjectSpecifier {
        return objc.msgSend(_self, "containerSpecifier", ?*ScriptObjectSpecifier, .{});
    }

    pub fn setContainerSpecifier(_self: *@This(), _containerSpecifier: ?*ScriptObjectSpecifier) void {
        return objc.msgSend(_self, "setContainerSpecifier:", void, .{_containerSpecifier});
    }

    pub fn containerIsObjectBeingTested(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "containerIsObjectBeingTested", objc.BOOL, .{});
    }

    pub fn setContainerIsObjectBeingTested(_self: *@This(), _containerIsObjectBeingTested: objc.BOOL) void {
        return objc.msgSend(_self, "setContainerIsObjectBeingTested:", void, .{_containerIsObjectBeingTested});
    }

    pub fn containerIsRangeContainerObject(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "containerIsRangeContainerObject", objc.BOOL, .{});
    }

    pub fn setContainerIsRangeContainerObject(_self: *@This(), _containerIsRangeContainerObject: objc.BOOL) void {
        return objc.msgSend(_self, "setContainerIsRangeContainerObject:", void, .{_containerIsRangeContainerObject});
    }

    pub fn key(_self: *@This()) ?*String {
        return objc.msgSend(_self, "key", ?*String, .{});
    }

    pub fn setKey(_self: *@This(), _key: ?*String) void {
        return objc.msgSend(_self, "setKey:", void, .{_key});
    }

    pub fn containerClassDescription(_self: *@This()) ?*ScriptClassDescription {
        return objc.msgSend(_self, "containerClassDescription", ?*ScriptClassDescription, .{});
    }

    pub fn setContainerClassDescription(_self: *@This(), _containerClassDescription: ?*ScriptClassDescription) void {
        return objc.msgSend(_self, "setContainerClassDescription:", void, .{_containerClassDescription});
    }

    pub fn keyClassDescription(_self: *@This()) ?*ScriptClassDescription {
        return objc.msgSend(_self, "keyClassDescription", ?*ScriptClassDescription, .{});
    }

    pub fn objectsByEvaluatingSpecifier(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "objectsByEvaluatingSpecifier", ?objc.Id, .{});
    }

    pub fn evaluationErrorNumber(_self: *@This()) objc.NSInteger {
        return objc.msgSend(_self, "evaluationErrorNumber", objc.NSInteger, .{});
    }

    pub fn setEvaluationErrorNumber(_self: *@This(), _evaluationErrorNumber: objc.NSInteger) void {
        return objc.msgSend(_self, "setEvaluationErrorNumber:", void, .{_evaluationErrorNumber});
    }

    pub fn evaluationErrorSpecifier(_self: *@This()) ?*ScriptObjectSpecifier {
        return objc.msgSend(_self, "evaluationErrorSpecifier", ?*ScriptObjectSpecifier, .{});
    }

    pub fn descriptor(_self: *@This()) ?*AppleEventDescriptor {
        return objc.msgSend(_self, "descriptor", ?*AppleEventDescriptor, .{});
    }
};

/// https://developer.apple.com/documentation/Foundation/NSRandomSpecifier?language=objc
pub const RandomSpecifier = opaque {
    pub const Internal = objc.ExternClass("NSRandomSpecifier", @This(), ScriptObjectSpecifier, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn objectSpecifierWithDescriptor(_descriptor: ?*AppleEventDescriptor) ?*ScriptObjectSpecifier {
        return objc.msgSend(Internal.class(), "objectSpecifierWithDescriptor:", ?*ScriptObjectSpecifier, .{_descriptor});
    }

    pub fn initWithContainerSpecifierKey(_self: *@This(), _container: ?*ScriptObjectSpecifier, _property: ?*String) *@This() {
        return objc.msgSend(_self, "initWithContainerSpecifier:key:", *@This(), .{ _container, _property });
    }

    pub fn initWithContainerClassDescriptionContainerSpecifierKey(_self: *@This(), _classDesc: ?*ScriptClassDescription, _container: ?*ScriptObjectSpecifier, _property: ?*String) *@This() {
        return objc.msgSend(_self, "initWithContainerClassDescription:containerSpecifier:key:", *@This(), .{ _classDesc, _container, _property });
    }

    pub fn indicesOfObjectsByEvaluatingWithContainerCount(_self: *@This(), _container: ?objc.Id, _count: ?*objc.NSInteger) ?*objc.NSInteger {
        return objc.msgSend(_self, "indicesOfObjectsByEvaluatingWithContainer:count:", ?*objc.NSInteger, .{ _container, _count });
    }

    pub fn objectsByEvaluatingWithContainers(_self: *@This(), _containers: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "objectsByEvaluatingWithContainers:", ?objc.Id, .{_containers});
    }

    pub fn childSpecifier(_self: *@This()) ?*ScriptObjectSpecifier {
        return objc.msgSend(_self, "childSpecifier", ?*ScriptObjectSpecifier, .{});
    }

    pub fn setChildSpecifier(_self: *@This(), _childSpecifier: ?*ScriptObjectSpecifier) void {
        return objc.msgSend(_self, "setChildSpecifier:", void, .{_childSpecifier});
    }

    pub fn containerSpecifier(_self: *@This()) ?*ScriptObjectSpecifier {
        return objc.msgSend(_self, "containerSpecifier", ?*ScriptObjectSpecifier, .{});
    }

    pub fn setContainerSpecifier(_self: *@This(), _containerSpecifier: ?*ScriptObjectSpecifier) void {
        return objc.msgSend(_self, "setContainerSpecifier:", void, .{_containerSpecifier});
    }

    pub fn containerIsObjectBeingTested(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "containerIsObjectBeingTested", objc.BOOL, .{});
    }

    pub fn setContainerIsObjectBeingTested(_self: *@This(), _containerIsObjectBeingTested: objc.BOOL) void {
        return objc.msgSend(_self, "setContainerIsObjectBeingTested:", void, .{_containerIsObjectBeingTested});
    }

    pub fn containerIsRangeContainerObject(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "containerIsRangeContainerObject", objc.BOOL, .{});
    }

    pub fn setContainerIsRangeContainerObject(_self: *@This(), _containerIsRangeContainerObject: objc.BOOL) void {
        return objc.msgSend(_self, "setContainerIsRangeContainerObject:", void, .{_containerIsRangeContainerObject});
    }

    pub fn key(_self: *@This()) ?*String {
        return objc.msgSend(_self, "key", ?*String, .{});
    }

    pub fn setKey(_self: *@This(), _key: ?*String) void {
        return objc.msgSend(_self, "setKey:", void, .{_key});
    }

    pub fn containerClassDescription(_self: *@This()) ?*ScriptClassDescription {
        return objc.msgSend(_self, "containerClassDescription", ?*ScriptClassDescription, .{});
    }

    pub fn setContainerClassDescription(_self: *@This(), _containerClassDescription: ?*ScriptClassDescription) void {
        return objc.msgSend(_self, "setContainerClassDescription:", void, .{_containerClassDescription});
    }

    pub fn keyClassDescription(_self: *@This()) ?*ScriptClassDescription {
        return objc.msgSend(_self, "keyClassDescription", ?*ScriptClassDescription, .{});
    }

    pub fn objectsByEvaluatingSpecifier(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "objectsByEvaluatingSpecifier", ?objc.Id, .{});
    }

    pub fn evaluationErrorNumber(_self: *@This()) objc.NSInteger {
        return objc.msgSend(_self, "evaluationErrorNumber", objc.NSInteger, .{});
    }

    pub fn setEvaluationErrorNumber(_self: *@This(), _evaluationErrorNumber: objc.NSInteger) void {
        return objc.msgSend(_self, "setEvaluationErrorNumber:", void, .{_evaluationErrorNumber});
    }

    pub fn evaluationErrorSpecifier(_self: *@This()) ?*ScriptObjectSpecifier {
        return objc.msgSend(_self, "evaluationErrorSpecifier", ?*ScriptObjectSpecifier, .{});
    }

    pub fn descriptor(_self: *@This()) ?*AppleEventDescriptor {
        return objc.msgSend(_self, "descriptor", ?*AppleEventDescriptor, .{});
    }
};

/// https://developer.apple.com/documentation/Foundation/NSRangeSpecifier?language=objc
pub const RangeSpecifier = opaque {
    pub const Internal = objc.ExternClass("NSRangeSpecifier", @This(), ScriptObjectSpecifier, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn objectSpecifierWithDescriptor(_descriptor: ?*AppleEventDescriptor) ?*ScriptObjectSpecifier {
        return objc.msgSend(Internal.class(), "objectSpecifierWithDescriptor:", ?*ScriptObjectSpecifier, .{_descriptor});
    }

    pub fn initWithContainerSpecifierKey(_self: *@This(), _container: ?*ScriptObjectSpecifier, _property: ?*String) *@This() {
        return objc.msgSend(_self, "initWithContainerSpecifier:key:", *@This(), .{ _container, _property });
    }

    pub fn initWithContainerClassDescriptionContainerSpecifierKey(_self: *@This(), _classDesc: ?*ScriptClassDescription, _container: ?*ScriptObjectSpecifier, _property: ?*String) *@This() {
        return objc.msgSend(_self, "initWithContainerClassDescription:containerSpecifier:key:", *@This(), .{ _classDesc, _container, _property });
    }

    pub fn indicesOfObjectsByEvaluatingWithContainerCount(_self: *@This(), _container: ?objc.Id, _count: ?*objc.NSInteger) ?*objc.NSInteger {
        return objc.msgSend(_self, "indicesOfObjectsByEvaluatingWithContainer:count:", ?*objc.NSInteger, .{ _container, _count });
    }

    pub fn objectsByEvaluatingWithContainers(_self: *@This(), _containers: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "objectsByEvaluatingWithContainers:", ?objc.Id, .{_containers});
    }

    pub fn childSpecifier(_self: *@This()) ?*ScriptObjectSpecifier {
        return objc.msgSend(_self, "childSpecifier", ?*ScriptObjectSpecifier, .{});
    }

    pub fn setChildSpecifier(_self: *@This(), _childSpecifier: ?*ScriptObjectSpecifier) void {
        return objc.msgSend(_self, "setChildSpecifier:", void, .{_childSpecifier});
    }

    pub fn containerSpecifier(_self: *@This()) ?*ScriptObjectSpecifier {
        return objc.msgSend(_self, "containerSpecifier", ?*ScriptObjectSpecifier, .{});
    }

    pub fn setContainerSpecifier(_self: *@This(), _containerSpecifier: ?*ScriptObjectSpecifier) void {
        return objc.msgSend(_self, "setContainerSpecifier:", void, .{_containerSpecifier});
    }

    pub fn containerIsObjectBeingTested(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "containerIsObjectBeingTested", objc.BOOL, .{});
    }

    pub fn setContainerIsObjectBeingTested(_self: *@This(), _containerIsObjectBeingTested: objc.BOOL) void {
        return objc.msgSend(_self, "setContainerIsObjectBeingTested:", void, .{_containerIsObjectBeingTested});
    }

    pub fn containerIsRangeContainerObject(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "containerIsRangeContainerObject", objc.BOOL, .{});
    }

    pub fn setContainerIsRangeContainerObject(_self: *@This(), _containerIsRangeContainerObject: objc.BOOL) void {
        return objc.msgSend(_self, "setContainerIsRangeContainerObject:", void, .{_containerIsRangeContainerObject});
    }

    pub fn key(_self: *@This()) ?*String {
        return objc.msgSend(_self, "key", ?*String, .{});
    }

    pub fn setKey(_self: *@This(), _key: ?*String) void {
        return objc.msgSend(_self, "setKey:", void, .{_key});
    }

    pub fn containerClassDescription(_self: *@This()) ?*ScriptClassDescription {
        return objc.msgSend(_self, "containerClassDescription", ?*ScriptClassDescription, .{});
    }

    pub fn setContainerClassDescription(_self: *@This(), _containerClassDescription: ?*ScriptClassDescription) void {
        return objc.msgSend(_self, "setContainerClassDescription:", void, .{_containerClassDescription});
    }

    pub fn keyClassDescription(_self: *@This()) ?*ScriptClassDescription {
        return objc.msgSend(_self, "keyClassDescription", ?*ScriptClassDescription, .{});
    }

    pub fn objectsByEvaluatingSpecifier(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "objectsByEvaluatingSpecifier", ?objc.Id, .{});
    }

    pub fn evaluationErrorNumber(_self: *@This()) objc.NSInteger {
        return objc.msgSend(_self, "evaluationErrorNumber", objc.NSInteger, .{});
    }

    pub fn setEvaluationErrorNumber(_self: *@This(), _evaluationErrorNumber: objc.NSInteger) void {
        return objc.msgSend(_self, "setEvaluationErrorNumber:", void, .{_evaluationErrorNumber});
    }

    pub fn evaluationErrorSpecifier(_self: *@This()) ?*ScriptObjectSpecifier {
        return objc.msgSend(_self, "evaluationErrorSpecifier", ?*ScriptObjectSpecifier, .{});
    }

    pub fn descriptor(_self: *@This()) ?*AppleEventDescriptor {
        return objc.msgSend(_self, "descriptor", ?*AppleEventDescriptor, .{});
    }

    pub fn initWithContainerClassDescriptionContainerSpecifierKeyStartSpecifierEndSpecifier(
        _self: *@This(),
        _classDesc: ?*ScriptClassDescription,
        _container: ?*ScriptObjectSpecifier,
        _property: ?*String,
        _startSpec: ?*ScriptObjectSpecifier,
        _endSpec: ?*ScriptObjectSpecifier,
    ) *@This() {
        return objc.msgSend(_self, "initWithContainerClassDescription:containerSpecifier:key:startSpecifier:endSpecifier:", *@This(), .{
            _classDesc,
            _container,
            _property,
            _startSpec,
            _endSpec,
        });
    }

    pub fn startSpecifier(_self: *@This()) ?*ScriptObjectSpecifier {
        return objc.msgSend(_self, "startSpecifier", ?*ScriptObjectSpecifier, .{});
    }

    pub fn setStartSpecifier(_self: *@This(), _startSpecifier: ?*ScriptObjectSpecifier) void {
        return objc.msgSend(_self, "setStartSpecifier:", void, .{_startSpecifier});
    }

    pub fn endSpecifier(_self: *@This()) ?*ScriptObjectSpecifier {
        return objc.msgSend(_self, "endSpecifier", ?*ScriptObjectSpecifier, .{});
    }

    pub fn setEndSpecifier(_self: *@This(), _endSpecifier: ?*ScriptObjectSpecifier) void {
        return objc.msgSend(_self, "setEndSpecifier:", void, .{_endSpecifier});
    }
};

/// https://developer.apple.com/documentation/Foundation/NSRelativeSpecifier?language=objc
pub const RelativeSpecifier = opaque {
    pub const Internal = objc.ExternClass("NSRelativeSpecifier", @This(), ScriptObjectSpecifier, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn objectSpecifierWithDescriptor(_descriptor: ?*AppleEventDescriptor) ?*ScriptObjectSpecifier {
        return objc.msgSend(Internal.class(), "objectSpecifierWithDescriptor:", ?*ScriptObjectSpecifier, .{_descriptor});
    }

    pub fn initWithContainerSpecifierKey(_self: *@This(), _container: ?*ScriptObjectSpecifier, _property: ?*String) *@This() {
        return objc.msgSend(_self, "initWithContainerSpecifier:key:", *@This(), .{ _container, _property });
    }

    pub fn initWithContainerClassDescriptionContainerSpecifierKey(_self: *@This(), _classDesc: ?*ScriptClassDescription, _container: ?*ScriptObjectSpecifier, _property: ?*String) *@This() {
        return objc.msgSend(_self, "initWithContainerClassDescription:containerSpecifier:key:", *@This(), .{ _classDesc, _container, _property });
    }

    pub fn indicesOfObjectsByEvaluatingWithContainerCount(_self: *@This(), _container: ?objc.Id, _count: ?*objc.NSInteger) ?*objc.NSInteger {
        return objc.msgSend(_self, "indicesOfObjectsByEvaluatingWithContainer:count:", ?*objc.NSInteger, .{ _container, _count });
    }

    pub fn objectsByEvaluatingWithContainers(_self: *@This(), _containers: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "objectsByEvaluatingWithContainers:", ?objc.Id, .{_containers});
    }

    pub fn childSpecifier(_self: *@This()) ?*ScriptObjectSpecifier {
        return objc.msgSend(_self, "childSpecifier", ?*ScriptObjectSpecifier, .{});
    }

    pub fn setChildSpecifier(_self: *@This(), _childSpecifier: ?*ScriptObjectSpecifier) void {
        return objc.msgSend(_self, "setChildSpecifier:", void, .{_childSpecifier});
    }

    pub fn containerSpecifier(_self: *@This()) ?*ScriptObjectSpecifier {
        return objc.msgSend(_self, "containerSpecifier", ?*ScriptObjectSpecifier, .{});
    }

    pub fn setContainerSpecifier(_self: *@This(), _containerSpecifier: ?*ScriptObjectSpecifier) void {
        return objc.msgSend(_self, "setContainerSpecifier:", void, .{_containerSpecifier});
    }

    pub fn containerIsObjectBeingTested(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "containerIsObjectBeingTested", objc.BOOL, .{});
    }

    pub fn setContainerIsObjectBeingTested(_self: *@This(), _containerIsObjectBeingTested: objc.BOOL) void {
        return objc.msgSend(_self, "setContainerIsObjectBeingTested:", void, .{_containerIsObjectBeingTested});
    }

    pub fn containerIsRangeContainerObject(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "containerIsRangeContainerObject", objc.BOOL, .{});
    }

    pub fn setContainerIsRangeContainerObject(_self: *@This(), _containerIsRangeContainerObject: objc.BOOL) void {
        return objc.msgSend(_self, "setContainerIsRangeContainerObject:", void, .{_containerIsRangeContainerObject});
    }

    pub fn key(_self: *@This()) ?*String {
        return objc.msgSend(_self, "key", ?*String, .{});
    }

    pub fn setKey(_self: *@This(), _key: ?*String) void {
        return objc.msgSend(_self, "setKey:", void, .{_key});
    }

    pub fn containerClassDescription(_self: *@This()) ?*ScriptClassDescription {
        return objc.msgSend(_self, "containerClassDescription", ?*ScriptClassDescription, .{});
    }

    pub fn setContainerClassDescription(_self: *@This(), _containerClassDescription: ?*ScriptClassDescription) void {
        return objc.msgSend(_self, "setContainerClassDescription:", void, .{_containerClassDescription});
    }

    pub fn keyClassDescription(_self: *@This()) ?*ScriptClassDescription {
        return objc.msgSend(_self, "keyClassDescription", ?*ScriptClassDescription, .{});
    }

    pub fn objectsByEvaluatingSpecifier(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "objectsByEvaluatingSpecifier", ?objc.Id, .{});
    }

    pub fn evaluationErrorNumber(_self: *@This()) objc.NSInteger {
        return objc.msgSend(_self, "evaluationErrorNumber", objc.NSInteger, .{});
    }

    pub fn setEvaluationErrorNumber(_self: *@This(), _evaluationErrorNumber: objc.NSInteger) void {
        return objc.msgSend(_self, "setEvaluationErrorNumber:", void, .{_evaluationErrorNumber});
    }

    pub fn evaluationErrorSpecifier(_self: *@This()) ?*ScriptObjectSpecifier {
        return objc.msgSend(_self, "evaluationErrorSpecifier", ?*ScriptObjectSpecifier, .{});
    }

    pub fn descriptor(_self: *@This()) ?*AppleEventDescriptor {
        return objc.msgSend(_self, "descriptor", ?*AppleEventDescriptor, .{});
    }

    pub fn initWithContainerClassDescriptionContainerSpecifierKeyRelativePositionBaseSpecifier(
        _self: *@This(),
        _classDesc: ?*ScriptClassDescription,
        _container: ?*ScriptObjectSpecifier,
        _property: ?*String,
        _relPos: RelativePosition,
        _baseSpecifier: ?*ScriptObjectSpecifier,
    ) *@This() {
        return objc.msgSend(_self, "initWithContainerClassDescription:containerSpecifier:key:relativePosition:baseSpecifier:", *@This(), .{
            _classDesc,
            _container,
            _property,
            _relPos,
            _baseSpecifier,
        });
    }

    pub fn relativePosition(_self: *@This()) RelativePosition {
        return objc.msgSend(_self, "relativePosition", RelativePosition, .{});
    }

    pub fn setRelativePosition(_self: *@This(), _relativePosition: RelativePosition) void {
        return objc.msgSend(_self, "setRelativePosition:", void, .{_relativePosition});
    }

    pub fn baseSpecifier(_self: *@This()) ?*ScriptObjectSpecifier {
        return objc.msgSend(_self, "baseSpecifier", ?*ScriptObjectSpecifier, .{});
    }

    pub fn setBaseSpecifier(_self: *@This(), _baseSpecifier: ?*ScriptObjectSpecifier) void {
        return objc.msgSend(_self, "setBaseSpecifier:", void, .{_baseSpecifier});
    }
};

/// https://developer.apple.com/documentation/Foundation/NSUniqueIDSpecifier?language=objc
pub const UniqueIDSpecifier = opaque {
    pub const Internal = objc.ExternClass("NSUniqueIDSpecifier", @This(), ScriptObjectSpecifier, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn objectSpecifierWithDescriptor(_descriptor: ?*AppleEventDescriptor) ?*ScriptObjectSpecifier {
        return objc.msgSend(Internal.class(), "objectSpecifierWithDescriptor:", ?*ScriptObjectSpecifier, .{_descriptor});
    }

    pub fn initWithContainerSpecifierKey(_self: *@This(), _container: ?*ScriptObjectSpecifier, _property: ?*String) *@This() {
        return objc.msgSend(_self, "initWithContainerSpecifier:key:", *@This(), .{ _container, _property });
    }

    pub fn initWithContainerClassDescriptionContainerSpecifierKey(_self: *@This(), _classDesc: ?*ScriptClassDescription, _container: ?*ScriptObjectSpecifier, _property: ?*String) *@This() {
        return objc.msgSend(_self, "initWithContainerClassDescription:containerSpecifier:key:", *@This(), .{ _classDesc, _container, _property });
    }

    pub fn indicesOfObjectsByEvaluatingWithContainerCount(_self: *@This(), _container: ?objc.Id, _count: ?*objc.NSInteger) ?*objc.NSInteger {
        return objc.msgSend(_self, "indicesOfObjectsByEvaluatingWithContainer:count:", ?*objc.NSInteger, .{ _container, _count });
    }

    pub fn objectsByEvaluatingWithContainers(_self: *@This(), _containers: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "objectsByEvaluatingWithContainers:", ?objc.Id, .{_containers});
    }

    pub fn childSpecifier(_self: *@This()) ?*ScriptObjectSpecifier {
        return objc.msgSend(_self, "childSpecifier", ?*ScriptObjectSpecifier, .{});
    }

    pub fn setChildSpecifier(_self: *@This(), _childSpecifier: ?*ScriptObjectSpecifier) void {
        return objc.msgSend(_self, "setChildSpecifier:", void, .{_childSpecifier});
    }

    pub fn containerSpecifier(_self: *@This()) ?*ScriptObjectSpecifier {
        return objc.msgSend(_self, "containerSpecifier", ?*ScriptObjectSpecifier, .{});
    }

    pub fn setContainerSpecifier(_self: *@This(), _containerSpecifier: ?*ScriptObjectSpecifier) void {
        return objc.msgSend(_self, "setContainerSpecifier:", void, .{_containerSpecifier});
    }

    pub fn containerIsObjectBeingTested(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "containerIsObjectBeingTested", objc.BOOL, .{});
    }

    pub fn setContainerIsObjectBeingTested(_self: *@This(), _containerIsObjectBeingTested: objc.BOOL) void {
        return objc.msgSend(_self, "setContainerIsObjectBeingTested:", void, .{_containerIsObjectBeingTested});
    }

    pub fn containerIsRangeContainerObject(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "containerIsRangeContainerObject", objc.BOOL, .{});
    }

    pub fn setContainerIsRangeContainerObject(_self: *@This(), _containerIsRangeContainerObject: objc.BOOL) void {
        return objc.msgSend(_self, "setContainerIsRangeContainerObject:", void, .{_containerIsRangeContainerObject});
    }

    pub fn key(_self: *@This()) ?*String {
        return objc.msgSend(_self, "key", ?*String, .{});
    }

    pub fn setKey(_self: *@This(), _key: ?*String) void {
        return objc.msgSend(_self, "setKey:", void, .{_key});
    }

    pub fn containerClassDescription(_self: *@This()) ?*ScriptClassDescription {
        return objc.msgSend(_self, "containerClassDescription", ?*ScriptClassDescription, .{});
    }

    pub fn setContainerClassDescription(_self: *@This(), _containerClassDescription: ?*ScriptClassDescription) void {
        return objc.msgSend(_self, "setContainerClassDescription:", void, .{_containerClassDescription});
    }

    pub fn keyClassDescription(_self: *@This()) ?*ScriptClassDescription {
        return objc.msgSend(_self, "keyClassDescription", ?*ScriptClassDescription, .{});
    }

    pub fn objectsByEvaluatingSpecifier(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "objectsByEvaluatingSpecifier", ?objc.Id, .{});
    }

    pub fn evaluationErrorNumber(_self: *@This()) objc.NSInteger {
        return objc.msgSend(_self, "evaluationErrorNumber", objc.NSInteger, .{});
    }

    pub fn setEvaluationErrorNumber(_self: *@This(), _evaluationErrorNumber: objc.NSInteger) void {
        return objc.msgSend(_self, "setEvaluationErrorNumber:", void, .{_evaluationErrorNumber});
    }

    pub fn evaluationErrorSpecifier(_self: *@This()) ?*ScriptObjectSpecifier {
        return objc.msgSend(_self, "evaluationErrorSpecifier", ?*ScriptObjectSpecifier, .{});
    }

    pub fn descriptor(_self: *@This()) ?*AppleEventDescriptor {
        return objc.msgSend(_self, "descriptor", ?*AppleEventDescriptor, .{});
    }

    pub fn initWithContainerClassDescriptionContainerSpecifierKeyUniqueID(
        _self: *@This(),
        _classDesc: ?*ScriptClassDescription,
        _container: ?*ScriptObjectSpecifier,
        _property: ?*String,
        _uniqueID: ?objc.Id,
    ) *@This() {
        return objc.msgSend(_self, "initWithContainerClassDescription:containerSpecifier:key:uniqueID:", *@This(), .{
            _classDesc,
            _container,
            _property,
            _uniqueID,
        });
    }

    pub fn uniqueID(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "uniqueID", ?objc.Id, .{});
    }

    pub fn setUniqueID(_self: *@This(), _uniqueID: ?objc.Id) void {
        return objc.msgSend(_self, "setUniqueID:", void, .{_uniqueID});
    }
};

/// https://developer.apple.com/documentation/Foundation/NSWhoseSpecifier?language=objc
pub const WhoseSpecifier = opaque {
    pub const Internal = objc.ExternClass("NSWhoseSpecifier", @This(), ScriptObjectSpecifier, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn objectSpecifierWithDescriptor(_descriptor: ?*AppleEventDescriptor) ?*ScriptObjectSpecifier {
        return objc.msgSend(Internal.class(), "objectSpecifierWithDescriptor:", ?*ScriptObjectSpecifier, .{_descriptor});
    }

    pub fn initWithContainerSpecifierKey(_self: *@This(), _container: ?*ScriptObjectSpecifier, _property: ?*String) *@This() {
        return objc.msgSend(_self, "initWithContainerSpecifier:key:", *@This(), .{ _container, _property });
    }

    pub fn initWithContainerClassDescriptionContainerSpecifierKey(_self: *@This(), _classDesc: ?*ScriptClassDescription, _container: ?*ScriptObjectSpecifier, _property: ?*String) *@This() {
        return objc.msgSend(_self, "initWithContainerClassDescription:containerSpecifier:key:", *@This(), .{ _classDesc, _container, _property });
    }

    pub fn indicesOfObjectsByEvaluatingWithContainerCount(_self: *@This(), _container: ?objc.Id, _count: ?*objc.NSInteger) ?*objc.NSInteger {
        return objc.msgSend(_self, "indicesOfObjectsByEvaluatingWithContainer:count:", ?*objc.NSInteger, .{ _container, _count });
    }

    pub fn objectsByEvaluatingWithContainers(_self: *@This(), _containers: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "objectsByEvaluatingWithContainers:", ?objc.Id, .{_containers});
    }

    pub fn childSpecifier(_self: *@This()) ?*ScriptObjectSpecifier {
        return objc.msgSend(_self, "childSpecifier", ?*ScriptObjectSpecifier, .{});
    }

    pub fn setChildSpecifier(_self: *@This(), _childSpecifier: ?*ScriptObjectSpecifier) void {
        return objc.msgSend(_self, "setChildSpecifier:", void, .{_childSpecifier});
    }

    pub fn containerSpecifier(_self: *@This()) ?*ScriptObjectSpecifier {
        return objc.msgSend(_self, "containerSpecifier", ?*ScriptObjectSpecifier, .{});
    }

    pub fn setContainerSpecifier(_self: *@This(), _containerSpecifier: ?*ScriptObjectSpecifier) void {
        return objc.msgSend(_self, "setContainerSpecifier:", void, .{_containerSpecifier});
    }

    pub fn containerIsObjectBeingTested(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "containerIsObjectBeingTested", objc.BOOL, .{});
    }

    pub fn setContainerIsObjectBeingTested(_self: *@This(), _containerIsObjectBeingTested: objc.BOOL) void {
        return objc.msgSend(_self, "setContainerIsObjectBeingTested:", void, .{_containerIsObjectBeingTested});
    }

    pub fn containerIsRangeContainerObject(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "containerIsRangeContainerObject", objc.BOOL, .{});
    }

    pub fn setContainerIsRangeContainerObject(_self: *@This(), _containerIsRangeContainerObject: objc.BOOL) void {
        return objc.msgSend(_self, "setContainerIsRangeContainerObject:", void, .{_containerIsRangeContainerObject});
    }

    pub fn key(_self: *@This()) ?*String {
        return objc.msgSend(_self, "key", ?*String, .{});
    }

    pub fn setKey(_self: *@This(), _key: ?*String) void {
        return objc.msgSend(_self, "setKey:", void, .{_key});
    }

    pub fn containerClassDescription(_self: *@This()) ?*ScriptClassDescription {
        return objc.msgSend(_self, "containerClassDescription", ?*ScriptClassDescription, .{});
    }

    pub fn setContainerClassDescription(_self: *@This(), _containerClassDescription: ?*ScriptClassDescription) void {
        return objc.msgSend(_self, "setContainerClassDescription:", void, .{_containerClassDescription});
    }

    pub fn keyClassDescription(_self: *@This()) ?*ScriptClassDescription {
        return objc.msgSend(_self, "keyClassDescription", ?*ScriptClassDescription, .{});
    }

    pub fn objectsByEvaluatingSpecifier(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "objectsByEvaluatingSpecifier", ?objc.Id, .{});
    }

    pub fn evaluationErrorNumber(_self: *@This()) objc.NSInteger {
        return objc.msgSend(_self, "evaluationErrorNumber", objc.NSInteger, .{});
    }

    pub fn setEvaluationErrorNumber(_self: *@This(), _evaluationErrorNumber: objc.NSInteger) void {
        return objc.msgSend(_self, "setEvaluationErrorNumber:", void, .{_evaluationErrorNumber});
    }

    pub fn evaluationErrorSpecifier(_self: *@This()) ?*ScriptObjectSpecifier {
        return objc.msgSend(_self, "evaluationErrorSpecifier", ?*ScriptObjectSpecifier, .{});
    }

    pub fn descriptor(_self: *@This()) ?*AppleEventDescriptor {
        return objc.msgSend(_self, "descriptor", ?*AppleEventDescriptor, .{});
    }

    pub fn initWithContainerClassDescriptionContainerSpecifierKeyTest(
        _self: *@This(),
        _classDesc: ?*ScriptClassDescription,
        _container: ?*ScriptObjectSpecifier,
        _property: ?*String,
        _test: ?*ScriptWhoseTest,
    ) *@This() {
        return objc.msgSend(_self, "initWithContainerClassDescription:containerSpecifier:key:test:", *@This(), .{
            _classDesc,
            _container,
            _property,
            _test,
        });
    }

    pub fn @"test"(_self: *@This()) ?*ScriptWhoseTest {
        return objc.msgSend(_self, "test", ?*ScriptWhoseTest, .{});
    }

    pub fn setTest(_self: *@This(), _test: ?*ScriptWhoseTest) void {
        return objc.msgSend(_self, "setTest:", void, .{_test});
    }

    pub fn startSubelementIdentifier(_self: *@This()) WhoseSubelementIdentifier {
        return objc.msgSend(_self, "startSubelementIdentifier", WhoseSubelementIdentifier, .{});
    }

    pub fn setStartSubelementIdentifier(_self: *@This(), _startSubelementIdentifier: WhoseSubelementIdentifier) void {
        return objc.msgSend(_self, "setStartSubelementIdentifier:", void, .{_startSubelementIdentifier});
    }

    pub fn startSubelementIndex(_self: *@This()) objc.NSInteger {
        return objc.msgSend(_self, "startSubelementIndex", objc.NSInteger, .{});
    }

    pub fn setStartSubelementIndex(_self: *@This(), _startSubelementIndex: objc.NSInteger) void {
        return objc.msgSend(_self, "setStartSubelementIndex:", void, .{_startSubelementIndex});
    }

    pub fn endSubelementIdentifier(_self: *@This()) WhoseSubelementIdentifier {
        return objc.msgSend(_self, "endSubelementIdentifier", WhoseSubelementIdentifier, .{});
    }

    pub fn setEndSubelementIdentifier(_self: *@This(), _endSubelementIdentifier: WhoseSubelementIdentifier) void {
        return objc.msgSend(_self, "setEndSubelementIdentifier:", void, .{_endSubelementIdentifier});
    }

    pub fn endSubelementIndex(_self: *@This()) objc.NSInteger {
        return objc.msgSend(_self, "endSubelementIndex", objc.NSInteger, .{});
    }

    pub fn setEndSubelementIndex(_self: *@This(), _endSubelementIndex: objc.NSInteger) void {
        return objc.msgSend(_self, "setEndSubelementIndex:", void, .{_endSubelementIndex});
    }
};

pub const SaveOptions = objc.NSUInteger;
pub const SaveOptions_Yes: objc.NSUInteger = 0;
pub const SaveOptions_No: objc.NSUInteger = 1;
pub const SaveOptions_Ask: objc.NSUInteger = 2;

/// https://developer.apple.com/documentation/Foundation/NSCloneCommand?language=objc
pub const CloneCommand = opaque {
    pub const Internal = objc.ExternClass("NSCloneCommand", @This(), ScriptCommand, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn initWithCommandDescription(_self: *@This(), _commandDef: ?*ScriptCommandDescription) *@This() {
        return objc.msgSend(_self, "initWithCommandDescription:", *@This(), .{_commandDef});
    }

    pub fn performDefaultImplementation(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "performDefaultImplementation", ?objc.Id, .{});
    }

    pub fn executeCommand(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "executeCommand", ?objc.Id, .{});
    }

    pub fn currentCommand() ?*ScriptCommand {
        return objc.msgSend(Internal.class(), "currentCommand", ?*ScriptCommand, .{});
    }

    pub fn suspendExecution(_self: *@This()) void {
        return objc.msgSend(_self, "suspendExecution", void, .{});
    }

    pub fn resumeExecutionWithResult(_self: *@This(), _result: ?objc.Id) void {
        return objc.msgSend(_self, "resumeExecutionWithResult:", void, .{_result});
    }

    pub fn commandDescription(_self: *@This()) ?*ScriptCommandDescription {
        return objc.msgSend(_self, "commandDescription", ?*ScriptCommandDescription, .{});
    }

    pub fn directParameter(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "directParameter", ?objc.Id, .{});
    }

    pub fn setDirectParameter(_self: *@This(), _directParameter: ?objc.Id) void {
        return objc.msgSend(_self, "setDirectParameter:", void, .{_directParameter});
    }

    pub fn receiversSpecifier(_self: *@This()) ?*ScriptObjectSpecifier {
        return objc.msgSend(_self, "receiversSpecifier", ?*ScriptObjectSpecifier, .{});
    }

    pub fn setReceiversSpecifier(_self: *@This(), _receiversSpecifier: ?*ScriptObjectSpecifier) void {
        return objc.msgSend(_self, "setReceiversSpecifier:", void, .{_receiversSpecifier});
    }

    pub fn evaluatedReceivers(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "evaluatedReceivers", ?objc.Id, .{});
    }

    pub fn arguments(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "arguments", ?*anyopaque, .{});
    }

    pub fn setArguments(_self: *@This(), _arguments: ?*anyopaque) void {
        return objc.msgSend(_self, "setArguments:", void, .{_arguments});
    }

    pub fn evaluatedArguments(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "evaluatedArguments", ?*anyopaque, .{});
    }

    pub fn isWellFormed(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isWellFormed", objc.BOOL, .{});
    }

    pub fn scriptErrorNumber(_self: *@This()) objc.NSInteger {
        return objc.msgSend(_self, "scriptErrorNumber", objc.NSInteger, .{});
    }

    pub fn setScriptErrorNumber(_self: *@This(), _scriptErrorNumber: objc.NSInteger) void {
        return objc.msgSend(_self, "setScriptErrorNumber:", void, .{_scriptErrorNumber});
    }

    pub fn scriptErrorOffendingObjectDescriptor(_self: *@This()) ?*AppleEventDescriptor {
        return objc.msgSend(_self, "scriptErrorOffendingObjectDescriptor", ?*AppleEventDescriptor, .{});
    }

    pub fn setScriptErrorOffendingObjectDescriptor(_self: *@This(), _scriptErrorOffendingObjectDescriptor: ?*AppleEventDescriptor) void {
        return objc.msgSend(_self, "setScriptErrorOffendingObjectDescriptor:", void, .{_scriptErrorOffendingObjectDescriptor});
    }

    pub fn scriptErrorExpectedTypeDescriptor(_self: *@This()) ?*AppleEventDescriptor {
        return objc.msgSend(_self, "scriptErrorExpectedTypeDescriptor", ?*AppleEventDescriptor, .{});
    }

    pub fn setScriptErrorExpectedTypeDescriptor(_self: *@This(), _scriptErrorExpectedTypeDescriptor: ?*AppleEventDescriptor) void {
        return objc.msgSend(_self, "setScriptErrorExpectedTypeDescriptor:", void, .{_scriptErrorExpectedTypeDescriptor});
    }

    pub fn scriptErrorString(_self: *@This()) ?*String {
        return objc.msgSend(_self, "scriptErrorString", ?*String, .{});
    }

    pub fn setScriptErrorString(_self: *@This(), _scriptErrorString: ?*String) void {
        return objc.msgSend(_self, "setScriptErrorString:", void, .{_scriptErrorString});
    }

    pub fn appleEvent(_self: *@This()) ?*AppleEventDescriptor {
        return objc.msgSend(_self, "appleEvent", ?*AppleEventDescriptor, .{});
    }

    pub fn keySpecifier(_self: *@This()) ?*ScriptObjectSpecifier {
        return objc.msgSend(_self, "keySpecifier", ?*ScriptObjectSpecifier, .{});
    }
};

/// https://developer.apple.com/documentation/Foundation/NSCloseCommand?language=objc
pub const CloseCommand = opaque {
    pub const Internal = objc.ExternClass("NSCloseCommand", @This(), ScriptCommand, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn initWithCommandDescription(_self: *@This(), _commandDef: ?*ScriptCommandDescription) *@This() {
        return objc.msgSend(_self, "initWithCommandDescription:", *@This(), .{_commandDef});
    }

    pub fn performDefaultImplementation(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "performDefaultImplementation", ?objc.Id, .{});
    }

    pub fn executeCommand(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "executeCommand", ?objc.Id, .{});
    }

    pub fn currentCommand() ?*ScriptCommand {
        return objc.msgSend(Internal.class(), "currentCommand", ?*ScriptCommand, .{});
    }

    pub fn suspendExecution(_self: *@This()) void {
        return objc.msgSend(_self, "suspendExecution", void, .{});
    }

    pub fn resumeExecutionWithResult(_self: *@This(), _result: ?objc.Id) void {
        return objc.msgSend(_self, "resumeExecutionWithResult:", void, .{_result});
    }

    pub fn commandDescription(_self: *@This()) ?*ScriptCommandDescription {
        return objc.msgSend(_self, "commandDescription", ?*ScriptCommandDescription, .{});
    }

    pub fn directParameter(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "directParameter", ?objc.Id, .{});
    }

    pub fn setDirectParameter(_self: *@This(), _directParameter: ?objc.Id) void {
        return objc.msgSend(_self, "setDirectParameter:", void, .{_directParameter});
    }

    pub fn receiversSpecifier(_self: *@This()) ?*ScriptObjectSpecifier {
        return objc.msgSend(_self, "receiversSpecifier", ?*ScriptObjectSpecifier, .{});
    }

    pub fn setReceiversSpecifier(_self: *@This(), _receiversSpecifier: ?*ScriptObjectSpecifier) void {
        return objc.msgSend(_self, "setReceiversSpecifier:", void, .{_receiversSpecifier});
    }

    pub fn evaluatedReceivers(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "evaluatedReceivers", ?objc.Id, .{});
    }

    pub fn arguments(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "arguments", ?*anyopaque, .{});
    }

    pub fn setArguments(_self: *@This(), _arguments: ?*anyopaque) void {
        return objc.msgSend(_self, "setArguments:", void, .{_arguments});
    }

    pub fn evaluatedArguments(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "evaluatedArguments", ?*anyopaque, .{});
    }

    pub fn isWellFormed(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isWellFormed", objc.BOOL, .{});
    }

    pub fn scriptErrorNumber(_self: *@This()) objc.NSInteger {
        return objc.msgSend(_self, "scriptErrorNumber", objc.NSInteger, .{});
    }

    pub fn setScriptErrorNumber(_self: *@This(), _scriptErrorNumber: objc.NSInteger) void {
        return objc.msgSend(_self, "setScriptErrorNumber:", void, .{_scriptErrorNumber});
    }

    pub fn scriptErrorOffendingObjectDescriptor(_self: *@This()) ?*AppleEventDescriptor {
        return objc.msgSend(_self, "scriptErrorOffendingObjectDescriptor", ?*AppleEventDescriptor, .{});
    }

    pub fn setScriptErrorOffendingObjectDescriptor(_self: *@This(), _scriptErrorOffendingObjectDescriptor: ?*AppleEventDescriptor) void {
        return objc.msgSend(_self, "setScriptErrorOffendingObjectDescriptor:", void, .{_scriptErrorOffendingObjectDescriptor});
    }

    pub fn scriptErrorExpectedTypeDescriptor(_self: *@This()) ?*AppleEventDescriptor {
        return objc.msgSend(_self, "scriptErrorExpectedTypeDescriptor", ?*AppleEventDescriptor, .{});
    }

    pub fn setScriptErrorExpectedTypeDescriptor(_self: *@This(), _scriptErrorExpectedTypeDescriptor: ?*AppleEventDescriptor) void {
        return objc.msgSend(_self, "setScriptErrorExpectedTypeDescriptor:", void, .{_scriptErrorExpectedTypeDescriptor});
    }

    pub fn scriptErrorString(_self: *@This()) ?*String {
        return objc.msgSend(_self, "scriptErrorString", ?*String, .{});
    }

    pub fn setScriptErrorString(_self: *@This(), _scriptErrorString: ?*String) void {
        return objc.msgSend(_self, "setScriptErrorString:", void, .{_scriptErrorString});
    }

    pub fn appleEvent(_self: *@This()) ?*AppleEventDescriptor {
        return objc.msgSend(_self, "appleEvent", ?*AppleEventDescriptor, .{});
    }

    pub fn saveOptions(_self: *@This()) SaveOptions {
        return objc.msgSend(_self, "saveOptions", SaveOptions, .{});
    }
};

/// https://developer.apple.com/documentation/Foundation/NSCountCommand?language=objc
pub const CountCommand = opaque {
    pub const Internal = objc.ExternClass("NSCountCommand", @This(), ScriptCommand, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn initWithCommandDescription(_self: *@This(), _commandDef: ?*ScriptCommandDescription) *@This() {
        return objc.msgSend(_self, "initWithCommandDescription:", *@This(), .{_commandDef});
    }

    pub fn performDefaultImplementation(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "performDefaultImplementation", ?objc.Id, .{});
    }

    pub fn executeCommand(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "executeCommand", ?objc.Id, .{});
    }

    pub fn currentCommand() ?*ScriptCommand {
        return objc.msgSend(Internal.class(), "currentCommand", ?*ScriptCommand, .{});
    }

    pub fn suspendExecution(_self: *@This()) void {
        return objc.msgSend(_self, "suspendExecution", void, .{});
    }

    pub fn resumeExecutionWithResult(_self: *@This(), _result: ?objc.Id) void {
        return objc.msgSend(_self, "resumeExecutionWithResult:", void, .{_result});
    }

    pub fn commandDescription(_self: *@This()) ?*ScriptCommandDescription {
        return objc.msgSend(_self, "commandDescription", ?*ScriptCommandDescription, .{});
    }

    pub fn directParameter(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "directParameter", ?objc.Id, .{});
    }

    pub fn setDirectParameter(_self: *@This(), _directParameter: ?objc.Id) void {
        return objc.msgSend(_self, "setDirectParameter:", void, .{_directParameter});
    }

    pub fn receiversSpecifier(_self: *@This()) ?*ScriptObjectSpecifier {
        return objc.msgSend(_self, "receiversSpecifier", ?*ScriptObjectSpecifier, .{});
    }

    pub fn setReceiversSpecifier(_self: *@This(), _receiversSpecifier: ?*ScriptObjectSpecifier) void {
        return objc.msgSend(_self, "setReceiversSpecifier:", void, .{_receiversSpecifier});
    }

    pub fn evaluatedReceivers(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "evaluatedReceivers", ?objc.Id, .{});
    }

    pub fn arguments(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "arguments", ?*anyopaque, .{});
    }

    pub fn setArguments(_self: *@This(), _arguments: ?*anyopaque) void {
        return objc.msgSend(_self, "setArguments:", void, .{_arguments});
    }

    pub fn evaluatedArguments(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "evaluatedArguments", ?*anyopaque, .{});
    }

    pub fn isWellFormed(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isWellFormed", objc.BOOL, .{});
    }

    pub fn scriptErrorNumber(_self: *@This()) objc.NSInteger {
        return objc.msgSend(_self, "scriptErrorNumber", objc.NSInteger, .{});
    }

    pub fn setScriptErrorNumber(_self: *@This(), _scriptErrorNumber: objc.NSInteger) void {
        return objc.msgSend(_self, "setScriptErrorNumber:", void, .{_scriptErrorNumber});
    }

    pub fn scriptErrorOffendingObjectDescriptor(_self: *@This()) ?*AppleEventDescriptor {
        return objc.msgSend(_self, "scriptErrorOffendingObjectDescriptor", ?*AppleEventDescriptor, .{});
    }

    pub fn setScriptErrorOffendingObjectDescriptor(_self: *@This(), _scriptErrorOffendingObjectDescriptor: ?*AppleEventDescriptor) void {
        return objc.msgSend(_self, "setScriptErrorOffendingObjectDescriptor:", void, .{_scriptErrorOffendingObjectDescriptor});
    }

    pub fn scriptErrorExpectedTypeDescriptor(_self: *@This()) ?*AppleEventDescriptor {
        return objc.msgSend(_self, "scriptErrorExpectedTypeDescriptor", ?*AppleEventDescriptor, .{});
    }

    pub fn setScriptErrorExpectedTypeDescriptor(_self: *@This(), _scriptErrorExpectedTypeDescriptor: ?*AppleEventDescriptor) void {
        return objc.msgSend(_self, "setScriptErrorExpectedTypeDescriptor:", void, .{_scriptErrorExpectedTypeDescriptor});
    }

    pub fn scriptErrorString(_self: *@This()) ?*String {
        return objc.msgSend(_self, "scriptErrorString", ?*String, .{});
    }

    pub fn setScriptErrorString(_self: *@This(), _scriptErrorString: ?*String) void {
        return objc.msgSend(_self, "setScriptErrorString:", void, .{_scriptErrorString});
    }

    pub fn appleEvent(_self: *@This()) ?*AppleEventDescriptor {
        return objc.msgSend(_self, "appleEvent", ?*AppleEventDescriptor, .{});
    }
};

/// https://developer.apple.com/documentation/Foundation/NSCreateCommand?language=objc
pub const CreateCommand = opaque {
    pub const Internal = objc.ExternClass("NSCreateCommand", @This(), ScriptCommand, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn initWithCommandDescription(_self: *@This(), _commandDef: ?*ScriptCommandDescription) *@This() {
        return objc.msgSend(_self, "initWithCommandDescription:", *@This(), .{_commandDef});
    }

    pub fn performDefaultImplementation(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "performDefaultImplementation", ?objc.Id, .{});
    }

    pub fn executeCommand(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "executeCommand", ?objc.Id, .{});
    }

    pub fn currentCommand() ?*ScriptCommand {
        return objc.msgSend(Internal.class(), "currentCommand", ?*ScriptCommand, .{});
    }

    pub fn suspendExecution(_self: *@This()) void {
        return objc.msgSend(_self, "suspendExecution", void, .{});
    }

    pub fn resumeExecutionWithResult(_self: *@This(), _result: ?objc.Id) void {
        return objc.msgSend(_self, "resumeExecutionWithResult:", void, .{_result});
    }

    pub fn commandDescription(_self: *@This()) ?*ScriptCommandDescription {
        return objc.msgSend(_self, "commandDescription", ?*ScriptCommandDescription, .{});
    }

    pub fn directParameter(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "directParameter", ?objc.Id, .{});
    }

    pub fn setDirectParameter(_self: *@This(), _directParameter: ?objc.Id) void {
        return objc.msgSend(_self, "setDirectParameter:", void, .{_directParameter});
    }

    pub fn receiversSpecifier(_self: *@This()) ?*ScriptObjectSpecifier {
        return objc.msgSend(_self, "receiversSpecifier", ?*ScriptObjectSpecifier, .{});
    }

    pub fn setReceiversSpecifier(_self: *@This(), _receiversSpecifier: ?*ScriptObjectSpecifier) void {
        return objc.msgSend(_self, "setReceiversSpecifier:", void, .{_receiversSpecifier});
    }

    pub fn evaluatedReceivers(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "evaluatedReceivers", ?objc.Id, .{});
    }

    pub fn arguments(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "arguments", ?*anyopaque, .{});
    }

    pub fn setArguments(_self: *@This(), _arguments: ?*anyopaque) void {
        return objc.msgSend(_self, "setArguments:", void, .{_arguments});
    }

    pub fn evaluatedArguments(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "evaluatedArguments", ?*anyopaque, .{});
    }

    pub fn isWellFormed(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isWellFormed", objc.BOOL, .{});
    }

    pub fn scriptErrorNumber(_self: *@This()) objc.NSInteger {
        return objc.msgSend(_self, "scriptErrorNumber", objc.NSInteger, .{});
    }

    pub fn setScriptErrorNumber(_self: *@This(), _scriptErrorNumber: objc.NSInteger) void {
        return objc.msgSend(_self, "setScriptErrorNumber:", void, .{_scriptErrorNumber});
    }

    pub fn scriptErrorOffendingObjectDescriptor(_self: *@This()) ?*AppleEventDescriptor {
        return objc.msgSend(_self, "scriptErrorOffendingObjectDescriptor", ?*AppleEventDescriptor, .{});
    }

    pub fn setScriptErrorOffendingObjectDescriptor(_self: *@This(), _scriptErrorOffendingObjectDescriptor: ?*AppleEventDescriptor) void {
        return objc.msgSend(_self, "setScriptErrorOffendingObjectDescriptor:", void, .{_scriptErrorOffendingObjectDescriptor});
    }

    pub fn scriptErrorExpectedTypeDescriptor(_self: *@This()) ?*AppleEventDescriptor {
        return objc.msgSend(_self, "scriptErrorExpectedTypeDescriptor", ?*AppleEventDescriptor, .{});
    }

    pub fn setScriptErrorExpectedTypeDescriptor(_self: *@This(), _scriptErrorExpectedTypeDescriptor: ?*AppleEventDescriptor) void {
        return objc.msgSend(_self, "setScriptErrorExpectedTypeDescriptor:", void, .{_scriptErrorExpectedTypeDescriptor});
    }

    pub fn scriptErrorString(_self: *@This()) ?*String {
        return objc.msgSend(_self, "scriptErrorString", ?*String, .{});
    }

    pub fn setScriptErrorString(_self: *@This(), _scriptErrorString: ?*String) void {
        return objc.msgSend(_self, "setScriptErrorString:", void, .{_scriptErrorString});
    }

    pub fn appleEvent(_self: *@This()) ?*AppleEventDescriptor {
        return objc.msgSend(_self, "appleEvent", ?*AppleEventDescriptor, .{});
    }

    pub fn createClassDescription(_self: *@This()) ?*ScriptClassDescription {
        return objc.msgSend(_self, "createClassDescription", ?*ScriptClassDescription, .{});
    }

    pub fn resolvedKeyDictionary(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "resolvedKeyDictionary", ?*anyopaque, .{});
    }
};

/// https://developer.apple.com/documentation/Foundation/NSDeleteCommand?language=objc
pub const DeleteCommand = opaque {
    pub const Internal = objc.ExternClass("NSDeleteCommand", @This(), ScriptCommand, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn initWithCommandDescription(_self: *@This(), _commandDef: ?*ScriptCommandDescription) *@This() {
        return objc.msgSend(_self, "initWithCommandDescription:", *@This(), .{_commandDef});
    }

    pub fn performDefaultImplementation(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "performDefaultImplementation", ?objc.Id, .{});
    }

    pub fn executeCommand(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "executeCommand", ?objc.Id, .{});
    }

    pub fn currentCommand() ?*ScriptCommand {
        return objc.msgSend(Internal.class(), "currentCommand", ?*ScriptCommand, .{});
    }

    pub fn suspendExecution(_self: *@This()) void {
        return objc.msgSend(_self, "suspendExecution", void, .{});
    }

    pub fn resumeExecutionWithResult(_self: *@This(), _result: ?objc.Id) void {
        return objc.msgSend(_self, "resumeExecutionWithResult:", void, .{_result});
    }

    pub fn commandDescription(_self: *@This()) ?*ScriptCommandDescription {
        return objc.msgSend(_self, "commandDescription", ?*ScriptCommandDescription, .{});
    }

    pub fn directParameter(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "directParameter", ?objc.Id, .{});
    }

    pub fn setDirectParameter(_self: *@This(), _directParameter: ?objc.Id) void {
        return objc.msgSend(_self, "setDirectParameter:", void, .{_directParameter});
    }

    pub fn receiversSpecifier(_self: *@This()) ?*ScriptObjectSpecifier {
        return objc.msgSend(_self, "receiversSpecifier", ?*ScriptObjectSpecifier, .{});
    }

    pub fn setReceiversSpecifier(_self: *@This(), _receiversSpecifier: ?*ScriptObjectSpecifier) void {
        return objc.msgSend(_self, "setReceiversSpecifier:", void, .{_receiversSpecifier});
    }

    pub fn evaluatedReceivers(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "evaluatedReceivers", ?objc.Id, .{});
    }

    pub fn arguments(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "arguments", ?*anyopaque, .{});
    }

    pub fn setArguments(_self: *@This(), _arguments: ?*anyopaque) void {
        return objc.msgSend(_self, "setArguments:", void, .{_arguments});
    }

    pub fn evaluatedArguments(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "evaluatedArguments", ?*anyopaque, .{});
    }

    pub fn isWellFormed(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isWellFormed", objc.BOOL, .{});
    }

    pub fn scriptErrorNumber(_self: *@This()) objc.NSInteger {
        return objc.msgSend(_self, "scriptErrorNumber", objc.NSInteger, .{});
    }

    pub fn setScriptErrorNumber(_self: *@This(), _scriptErrorNumber: objc.NSInteger) void {
        return objc.msgSend(_self, "setScriptErrorNumber:", void, .{_scriptErrorNumber});
    }

    pub fn scriptErrorOffendingObjectDescriptor(_self: *@This()) ?*AppleEventDescriptor {
        return objc.msgSend(_self, "scriptErrorOffendingObjectDescriptor", ?*AppleEventDescriptor, .{});
    }

    pub fn setScriptErrorOffendingObjectDescriptor(_self: *@This(), _scriptErrorOffendingObjectDescriptor: ?*AppleEventDescriptor) void {
        return objc.msgSend(_self, "setScriptErrorOffendingObjectDescriptor:", void, .{_scriptErrorOffendingObjectDescriptor});
    }

    pub fn scriptErrorExpectedTypeDescriptor(_self: *@This()) ?*AppleEventDescriptor {
        return objc.msgSend(_self, "scriptErrorExpectedTypeDescriptor", ?*AppleEventDescriptor, .{});
    }

    pub fn setScriptErrorExpectedTypeDescriptor(_self: *@This(), _scriptErrorExpectedTypeDescriptor: ?*AppleEventDescriptor) void {
        return objc.msgSend(_self, "setScriptErrorExpectedTypeDescriptor:", void, .{_scriptErrorExpectedTypeDescriptor});
    }

    pub fn scriptErrorString(_self: *@This()) ?*String {
        return objc.msgSend(_self, "scriptErrorString", ?*String, .{});
    }

    pub fn setScriptErrorString(_self: *@This(), _scriptErrorString: ?*String) void {
        return objc.msgSend(_self, "setScriptErrorString:", void, .{_scriptErrorString});
    }

    pub fn appleEvent(_self: *@This()) ?*AppleEventDescriptor {
        return objc.msgSend(_self, "appleEvent", ?*AppleEventDescriptor, .{});
    }

    pub fn keySpecifier(_self: *@This()) ?*ScriptObjectSpecifier {
        return objc.msgSend(_self, "keySpecifier", ?*ScriptObjectSpecifier, .{});
    }
};

/// https://developer.apple.com/documentation/Foundation/NSExistsCommand?language=objc
pub const ExistsCommand = opaque {
    pub const Internal = objc.ExternClass("NSExistsCommand", @This(), ScriptCommand, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn initWithCommandDescription(_self: *@This(), _commandDef: ?*ScriptCommandDescription) *@This() {
        return objc.msgSend(_self, "initWithCommandDescription:", *@This(), .{_commandDef});
    }

    pub fn performDefaultImplementation(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "performDefaultImplementation", ?objc.Id, .{});
    }

    pub fn executeCommand(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "executeCommand", ?objc.Id, .{});
    }

    pub fn currentCommand() ?*ScriptCommand {
        return objc.msgSend(Internal.class(), "currentCommand", ?*ScriptCommand, .{});
    }

    pub fn suspendExecution(_self: *@This()) void {
        return objc.msgSend(_self, "suspendExecution", void, .{});
    }

    pub fn resumeExecutionWithResult(_self: *@This(), _result: ?objc.Id) void {
        return objc.msgSend(_self, "resumeExecutionWithResult:", void, .{_result});
    }

    pub fn commandDescription(_self: *@This()) ?*ScriptCommandDescription {
        return objc.msgSend(_self, "commandDescription", ?*ScriptCommandDescription, .{});
    }

    pub fn directParameter(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "directParameter", ?objc.Id, .{});
    }

    pub fn setDirectParameter(_self: *@This(), _directParameter: ?objc.Id) void {
        return objc.msgSend(_self, "setDirectParameter:", void, .{_directParameter});
    }

    pub fn receiversSpecifier(_self: *@This()) ?*ScriptObjectSpecifier {
        return objc.msgSend(_self, "receiversSpecifier", ?*ScriptObjectSpecifier, .{});
    }

    pub fn setReceiversSpecifier(_self: *@This(), _receiversSpecifier: ?*ScriptObjectSpecifier) void {
        return objc.msgSend(_self, "setReceiversSpecifier:", void, .{_receiversSpecifier});
    }

    pub fn evaluatedReceivers(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "evaluatedReceivers", ?objc.Id, .{});
    }

    pub fn arguments(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "arguments", ?*anyopaque, .{});
    }

    pub fn setArguments(_self: *@This(), _arguments: ?*anyopaque) void {
        return objc.msgSend(_self, "setArguments:", void, .{_arguments});
    }

    pub fn evaluatedArguments(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "evaluatedArguments", ?*anyopaque, .{});
    }

    pub fn isWellFormed(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isWellFormed", objc.BOOL, .{});
    }

    pub fn scriptErrorNumber(_self: *@This()) objc.NSInteger {
        return objc.msgSend(_self, "scriptErrorNumber", objc.NSInteger, .{});
    }

    pub fn setScriptErrorNumber(_self: *@This(), _scriptErrorNumber: objc.NSInteger) void {
        return objc.msgSend(_self, "setScriptErrorNumber:", void, .{_scriptErrorNumber});
    }

    pub fn scriptErrorOffendingObjectDescriptor(_self: *@This()) ?*AppleEventDescriptor {
        return objc.msgSend(_self, "scriptErrorOffendingObjectDescriptor", ?*AppleEventDescriptor, .{});
    }

    pub fn setScriptErrorOffendingObjectDescriptor(_self: *@This(), _scriptErrorOffendingObjectDescriptor: ?*AppleEventDescriptor) void {
        return objc.msgSend(_self, "setScriptErrorOffendingObjectDescriptor:", void, .{_scriptErrorOffendingObjectDescriptor});
    }

    pub fn scriptErrorExpectedTypeDescriptor(_self: *@This()) ?*AppleEventDescriptor {
        return objc.msgSend(_self, "scriptErrorExpectedTypeDescriptor", ?*AppleEventDescriptor, .{});
    }

    pub fn setScriptErrorExpectedTypeDescriptor(_self: *@This(), _scriptErrorExpectedTypeDescriptor: ?*AppleEventDescriptor) void {
        return objc.msgSend(_self, "setScriptErrorExpectedTypeDescriptor:", void, .{_scriptErrorExpectedTypeDescriptor});
    }

    pub fn scriptErrorString(_self: *@This()) ?*String {
        return objc.msgSend(_self, "scriptErrorString", ?*String, .{});
    }

    pub fn setScriptErrorString(_self: *@This(), _scriptErrorString: ?*String) void {
        return objc.msgSend(_self, "setScriptErrorString:", void, .{_scriptErrorString});
    }

    pub fn appleEvent(_self: *@This()) ?*AppleEventDescriptor {
        return objc.msgSend(_self, "appleEvent", ?*AppleEventDescriptor, .{});
    }
};

/// https://developer.apple.com/documentation/Foundation/NSGetCommand?language=objc
pub const GetCommand = opaque {
    pub const Internal = objc.ExternClass("NSGetCommand", @This(), ScriptCommand, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn initWithCommandDescription(_self: *@This(), _commandDef: ?*ScriptCommandDescription) *@This() {
        return objc.msgSend(_self, "initWithCommandDescription:", *@This(), .{_commandDef});
    }

    pub fn performDefaultImplementation(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "performDefaultImplementation", ?objc.Id, .{});
    }

    pub fn executeCommand(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "executeCommand", ?objc.Id, .{});
    }

    pub fn currentCommand() ?*ScriptCommand {
        return objc.msgSend(Internal.class(), "currentCommand", ?*ScriptCommand, .{});
    }

    pub fn suspendExecution(_self: *@This()) void {
        return objc.msgSend(_self, "suspendExecution", void, .{});
    }

    pub fn resumeExecutionWithResult(_self: *@This(), _result: ?objc.Id) void {
        return objc.msgSend(_self, "resumeExecutionWithResult:", void, .{_result});
    }

    pub fn commandDescription(_self: *@This()) ?*ScriptCommandDescription {
        return objc.msgSend(_self, "commandDescription", ?*ScriptCommandDescription, .{});
    }

    pub fn directParameter(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "directParameter", ?objc.Id, .{});
    }

    pub fn setDirectParameter(_self: *@This(), _directParameter: ?objc.Id) void {
        return objc.msgSend(_self, "setDirectParameter:", void, .{_directParameter});
    }

    pub fn receiversSpecifier(_self: *@This()) ?*ScriptObjectSpecifier {
        return objc.msgSend(_self, "receiversSpecifier", ?*ScriptObjectSpecifier, .{});
    }

    pub fn setReceiversSpecifier(_self: *@This(), _receiversSpecifier: ?*ScriptObjectSpecifier) void {
        return objc.msgSend(_self, "setReceiversSpecifier:", void, .{_receiversSpecifier});
    }

    pub fn evaluatedReceivers(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "evaluatedReceivers", ?objc.Id, .{});
    }

    pub fn arguments(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "arguments", ?*anyopaque, .{});
    }

    pub fn setArguments(_self: *@This(), _arguments: ?*anyopaque) void {
        return objc.msgSend(_self, "setArguments:", void, .{_arguments});
    }

    pub fn evaluatedArguments(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "evaluatedArguments", ?*anyopaque, .{});
    }

    pub fn isWellFormed(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isWellFormed", objc.BOOL, .{});
    }

    pub fn scriptErrorNumber(_self: *@This()) objc.NSInteger {
        return objc.msgSend(_self, "scriptErrorNumber", objc.NSInteger, .{});
    }

    pub fn setScriptErrorNumber(_self: *@This(), _scriptErrorNumber: objc.NSInteger) void {
        return objc.msgSend(_self, "setScriptErrorNumber:", void, .{_scriptErrorNumber});
    }

    pub fn scriptErrorOffendingObjectDescriptor(_self: *@This()) ?*AppleEventDescriptor {
        return objc.msgSend(_self, "scriptErrorOffendingObjectDescriptor", ?*AppleEventDescriptor, .{});
    }

    pub fn setScriptErrorOffendingObjectDescriptor(_self: *@This(), _scriptErrorOffendingObjectDescriptor: ?*AppleEventDescriptor) void {
        return objc.msgSend(_self, "setScriptErrorOffendingObjectDescriptor:", void, .{_scriptErrorOffendingObjectDescriptor});
    }

    pub fn scriptErrorExpectedTypeDescriptor(_self: *@This()) ?*AppleEventDescriptor {
        return objc.msgSend(_self, "scriptErrorExpectedTypeDescriptor", ?*AppleEventDescriptor, .{});
    }

    pub fn setScriptErrorExpectedTypeDescriptor(_self: *@This(), _scriptErrorExpectedTypeDescriptor: ?*AppleEventDescriptor) void {
        return objc.msgSend(_self, "setScriptErrorExpectedTypeDescriptor:", void, .{_scriptErrorExpectedTypeDescriptor});
    }

    pub fn scriptErrorString(_self: *@This()) ?*String {
        return objc.msgSend(_self, "scriptErrorString", ?*String, .{});
    }

    pub fn setScriptErrorString(_self: *@This(), _scriptErrorString: ?*String) void {
        return objc.msgSend(_self, "setScriptErrorString:", void, .{_scriptErrorString});
    }

    pub fn appleEvent(_self: *@This()) ?*AppleEventDescriptor {
        return objc.msgSend(_self, "appleEvent", ?*AppleEventDescriptor, .{});
    }
};

/// https://developer.apple.com/documentation/Foundation/NSMoveCommand?language=objc
pub const MoveCommand = opaque {
    pub const Internal = objc.ExternClass("NSMoveCommand", @This(), ScriptCommand, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn initWithCommandDescription(_self: *@This(), _commandDef: ?*ScriptCommandDescription) *@This() {
        return objc.msgSend(_self, "initWithCommandDescription:", *@This(), .{_commandDef});
    }

    pub fn performDefaultImplementation(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "performDefaultImplementation", ?objc.Id, .{});
    }

    pub fn executeCommand(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "executeCommand", ?objc.Id, .{});
    }

    pub fn currentCommand() ?*ScriptCommand {
        return objc.msgSend(Internal.class(), "currentCommand", ?*ScriptCommand, .{});
    }

    pub fn suspendExecution(_self: *@This()) void {
        return objc.msgSend(_self, "suspendExecution", void, .{});
    }

    pub fn resumeExecutionWithResult(_self: *@This(), _result: ?objc.Id) void {
        return objc.msgSend(_self, "resumeExecutionWithResult:", void, .{_result});
    }

    pub fn commandDescription(_self: *@This()) ?*ScriptCommandDescription {
        return objc.msgSend(_self, "commandDescription", ?*ScriptCommandDescription, .{});
    }

    pub fn directParameter(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "directParameter", ?objc.Id, .{});
    }

    pub fn setDirectParameter(_self: *@This(), _directParameter: ?objc.Id) void {
        return objc.msgSend(_self, "setDirectParameter:", void, .{_directParameter});
    }

    pub fn receiversSpecifier(_self: *@This()) ?*ScriptObjectSpecifier {
        return objc.msgSend(_self, "receiversSpecifier", ?*ScriptObjectSpecifier, .{});
    }

    pub fn setReceiversSpecifier(_self: *@This(), _receiversSpecifier: ?*ScriptObjectSpecifier) void {
        return objc.msgSend(_self, "setReceiversSpecifier:", void, .{_receiversSpecifier});
    }

    pub fn evaluatedReceivers(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "evaluatedReceivers", ?objc.Id, .{});
    }

    pub fn arguments(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "arguments", ?*anyopaque, .{});
    }

    pub fn setArguments(_self: *@This(), _arguments: ?*anyopaque) void {
        return objc.msgSend(_self, "setArguments:", void, .{_arguments});
    }

    pub fn evaluatedArguments(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "evaluatedArguments", ?*anyopaque, .{});
    }

    pub fn isWellFormed(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isWellFormed", objc.BOOL, .{});
    }

    pub fn scriptErrorNumber(_self: *@This()) objc.NSInteger {
        return objc.msgSend(_self, "scriptErrorNumber", objc.NSInteger, .{});
    }

    pub fn setScriptErrorNumber(_self: *@This(), _scriptErrorNumber: objc.NSInteger) void {
        return objc.msgSend(_self, "setScriptErrorNumber:", void, .{_scriptErrorNumber});
    }

    pub fn scriptErrorOffendingObjectDescriptor(_self: *@This()) ?*AppleEventDescriptor {
        return objc.msgSend(_self, "scriptErrorOffendingObjectDescriptor", ?*AppleEventDescriptor, .{});
    }

    pub fn setScriptErrorOffendingObjectDescriptor(_self: *@This(), _scriptErrorOffendingObjectDescriptor: ?*AppleEventDescriptor) void {
        return objc.msgSend(_self, "setScriptErrorOffendingObjectDescriptor:", void, .{_scriptErrorOffendingObjectDescriptor});
    }

    pub fn scriptErrorExpectedTypeDescriptor(_self: *@This()) ?*AppleEventDescriptor {
        return objc.msgSend(_self, "scriptErrorExpectedTypeDescriptor", ?*AppleEventDescriptor, .{});
    }

    pub fn setScriptErrorExpectedTypeDescriptor(_self: *@This(), _scriptErrorExpectedTypeDescriptor: ?*AppleEventDescriptor) void {
        return objc.msgSend(_self, "setScriptErrorExpectedTypeDescriptor:", void, .{_scriptErrorExpectedTypeDescriptor});
    }

    pub fn scriptErrorString(_self: *@This()) ?*String {
        return objc.msgSend(_self, "scriptErrorString", ?*String, .{});
    }

    pub fn setScriptErrorString(_self: *@This(), _scriptErrorString: ?*String) void {
        return objc.msgSend(_self, "setScriptErrorString:", void, .{_scriptErrorString});
    }

    pub fn appleEvent(_self: *@This()) ?*AppleEventDescriptor {
        return objc.msgSend(_self, "appleEvent", ?*AppleEventDescriptor, .{});
    }

    pub fn keySpecifier(_self: *@This()) ?*ScriptObjectSpecifier {
        return objc.msgSend(_self, "keySpecifier", ?*ScriptObjectSpecifier, .{});
    }
};

/// https://developer.apple.com/documentation/Foundation/NSQuitCommand?language=objc
pub const QuitCommand = opaque {
    pub const Internal = objc.ExternClass("NSQuitCommand", @This(), ScriptCommand, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn initWithCommandDescription(_self: *@This(), _commandDef: ?*ScriptCommandDescription) *@This() {
        return objc.msgSend(_self, "initWithCommandDescription:", *@This(), .{_commandDef});
    }

    pub fn performDefaultImplementation(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "performDefaultImplementation", ?objc.Id, .{});
    }

    pub fn executeCommand(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "executeCommand", ?objc.Id, .{});
    }

    pub fn currentCommand() ?*ScriptCommand {
        return objc.msgSend(Internal.class(), "currentCommand", ?*ScriptCommand, .{});
    }

    pub fn suspendExecution(_self: *@This()) void {
        return objc.msgSend(_self, "suspendExecution", void, .{});
    }

    pub fn resumeExecutionWithResult(_self: *@This(), _result: ?objc.Id) void {
        return objc.msgSend(_self, "resumeExecutionWithResult:", void, .{_result});
    }

    pub fn commandDescription(_self: *@This()) ?*ScriptCommandDescription {
        return objc.msgSend(_self, "commandDescription", ?*ScriptCommandDescription, .{});
    }

    pub fn directParameter(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "directParameter", ?objc.Id, .{});
    }

    pub fn setDirectParameter(_self: *@This(), _directParameter: ?objc.Id) void {
        return objc.msgSend(_self, "setDirectParameter:", void, .{_directParameter});
    }

    pub fn receiversSpecifier(_self: *@This()) ?*ScriptObjectSpecifier {
        return objc.msgSend(_self, "receiversSpecifier", ?*ScriptObjectSpecifier, .{});
    }

    pub fn setReceiversSpecifier(_self: *@This(), _receiversSpecifier: ?*ScriptObjectSpecifier) void {
        return objc.msgSend(_self, "setReceiversSpecifier:", void, .{_receiversSpecifier});
    }

    pub fn evaluatedReceivers(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "evaluatedReceivers", ?objc.Id, .{});
    }

    pub fn arguments(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "arguments", ?*anyopaque, .{});
    }

    pub fn setArguments(_self: *@This(), _arguments: ?*anyopaque) void {
        return objc.msgSend(_self, "setArguments:", void, .{_arguments});
    }

    pub fn evaluatedArguments(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "evaluatedArguments", ?*anyopaque, .{});
    }

    pub fn isWellFormed(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isWellFormed", objc.BOOL, .{});
    }

    pub fn scriptErrorNumber(_self: *@This()) objc.NSInteger {
        return objc.msgSend(_self, "scriptErrorNumber", objc.NSInteger, .{});
    }

    pub fn setScriptErrorNumber(_self: *@This(), _scriptErrorNumber: objc.NSInteger) void {
        return objc.msgSend(_self, "setScriptErrorNumber:", void, .{_scriptErrorNumber});
    }

    pub fn scriptErrorOffendingObjectDescriptor(_self: *@This()) ?*AppleEventDescriptor {
        return objc.msgSend(_self, "scriptErrorOffendingObjectDescriptor", ?*AppleEventDescriptor, .{});
    }

    pub fn setScriptErrorOffendingObjectDescriptor(_self: *@This(), _scriptErrorOffendingObjectDescriptor: ?*AppleEventDescriptor) void {
        return objc.msgSend(_self, "setScriptErrorOffendingObjectDescriptor:", void, .{_scriptErrorOffendingObjectDescriptor});
    }

    pub fn scriptErrorExpectedTypeDescriptor(_self: *@This()) ?*AppleEventDescriptor {
        return objc.msgSend(_self, "scriptErrorExpectedTypeDescriptor", ?*AppleEventDescriptor, .{});
    }

    pub fn setScriptErrorExpectedTypeDescriptor(_self: *@This(), _scriptErrorExpectedTypeDescriptor: ?*AppleEventDescriptor) void {
        return objc.msgSend(_self, "setScriptErrorExpectedTypeDescriptor:", void, .{_scriptErrorExpectedTypeDescriptor});
    }

    pub fn scriptErrorString(_self: *@This()) ?*String {
        return objc.msgSend(_self, "scriptErrorString", ?*String, .{});
    }

    pub fn setScriptErrorString(_self: *@This(), _scriptErrorString: ?*String) void {
        return objc.msgSend(_self, "setScriptErrorString:", void, .{_scriptErrorString});
    }

    pub fn appleEvent(_self: *@This()) ?*AppleEventDescriptor {
        return objc.msgSend(_self, "appleEvent", ?*AppleEventDescriptor, .{});
    }

    pub fn saveOptions(_self: *@This()) SaveOptions {
        return objc.msgSend(_self, "saveOptions", SaveOptions, .{});
    }
};

/// https://developer.apple.com/documentation/Foundation/NSSetCommand?language=objc
pub const SetCommand = opaque {
    pub const Internal = objc.ExternClass("NSSetCommand", @This(), ScriptCommand, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn initWithCommandDescription(_self: *@This(), _commandDef: ?*ScriptCommandDescription) *@This() {
        return objc.msgSend(_self, "initWithCommandDescription:", *@This(), .{_commandDef});
    }

    pub fn performDefaultImplementation(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "performDefaultImplementation", ?objc.Id, .{});
    }

    pub fn executeCommand(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "executeCommand", ?objc.Id, .{});
    }

    pub fn currentCommand() ?*ScriptCommand {
        return objc.msgSend(Internal.class(), "currentCommand", ?*ScriptCommand, .{});
    }

    pub fn suspendExecution(_self: *@This()) void {
        return objc.msgSend(_self, "suspendExecution", void, .{});
    }

    pub fn resumeExecutionWithResult(_self: *@This(), _result: ?objc.Id) void {
        return objc.msgSend(_self, "resumeExecutionWithResult:", void, .{_result});
    }

    pub fn commandDescription(_self: *@This()) ?*ScriptCommandDescription {
        return objc.msgSend(_self, "commandDescription", ?*ScriptCommandDescription, .{});
    }

    pub fn directParameter(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "directParameter", ?objc.Id, .{});
    }

    pub fn setDirectParameter(_self: *@This(), _directParameter: ?objc.Id) void {
        return objc.msgSend(_self, "setDirectParameter:", void, .{_directParameter});
    }

    pub fn receiversSpecifier(_self: *@This()) ?*ScriptObjectSpecifier {
        return objc.msgSend(_self, "receiversSpecifier", ?*ScriptObjectSpecifier, .{});
    }

    pub fn setReceiversSpecifier(_self: *@This(), _receiversSpecifier: ?*ScriptObjectSpecifier) void {
        return objc.msgSend(_self, "setReceiversSpecifier:", void, .{_receiversSpecifier});
    }

    pub fn evaluatedReceivers(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "evaluatedReceivers", ?objc.Id, .{});
    }

    pub fn arguments(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "arguments", ?*anyopaque, .{});
    }

    pub fn setArguments(_self: *@This(), _arguments: ?*anyopaque) void {
        return objc.msgSend(_self, "setArguments:", void, .{_arguments});
    }

    pub fn evaluatedArguments(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "evaluatedArguments", ?*anyopaque, .{});
    }

    pub fn isWellFormed(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isWellFormed", objc.BOOL, .{});
    }

    pub fn scriptErrorNumber(_self: *@This()) objc.NSInteger {
        return objc.msgSend(_self, "scriptErrorNumber", objc.NSInteger, .{});
    }

    pub fn setScriptErrorNumber(_self: *@This(), _scriptErrorNumber: objc.NSInteger) void {
        return objc.msgSend(_self, "setScriptErrorNumber:", void, .{_scriptErrorNumber});
    }

    pub fn scriptErrorOffendingObjectDescriptor(_self: *@This()) ?*AppleEventDescriptor {
        return objc.msgSend(_self, "scriptErrorOffendingObjectDescriptor", ?*AppleEventDescriptor, .{});
    }

    pub fn setScriptErrorOffendingObjectDescriptor(_self: *@This(), _scriptErrorOffendingObjectDescriptor: ?*AppleEventDescriptor) void {
        return objc.msgSend(_self, "setScriptErrorOffendingObjectDescriptor:", void, .{_scriptErrorOffendingObjectDescriptor});
    }

    pub fn scriptErrorExpectedTypeDescriptor(_self: *@This()) ?*AppleEventDescriptor {
        return objc.msgSend(_self, "scriptErrorExpectedTypeDescriptor", ?*AppleEventDescriptor, .{});
    }

    pub fn setScriptErrorExpectedTypeDescriptor(_self: *@This(), _scriptErrorExpectedTypeDescriptor: ?*AppleEventDescriptor) void {
        return objc.msgSend(_self, "setScriptErrorExpectedTypeDescriptor:", void, .{_scriptErrorExpectedTypeDescriptor});
    }

    pub fn scriptErrorString(_self: *@This()) ?*String {
        return objc.msgSend(_self, "scriptErrorString", ?*String, .{});
    }

    pub fn setScriptErrorString(_self: *@This(), _scriptErrorString: ?*String) void {
        return objc.msgSend(_self, "setScriptErrorString:", void, .{_scriptErrorString});
    }

    pub fn appleEvent(_self: *@This()) ?*AppleEventDescriptor {
        return objc.msgSend(_self, "appleEvent", ?*AppleEventDescriptor, .{});
    }

    pub fn keySpecifier(_self: *@This()) ?*ScriptObjectSpecifier {
        return objc.msgSend(_self, "keySpecifier", ?*ScriptObjectSpecifier, .{});
    }
};

/// https://developer.apple.com/documentation/Foundation/NSScriptSuiteRegistry?language=objc
pub const ScriptSuiteRegistry = opaque {
    pub const Internal = objc.ExternClass("NSScriptSuiteRegistry", @This(), objc.NSObject, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn sharedScriptSuiteRegistry() ?*ScriptSuiteRegistry {
        return objc.msgSend(Internal.class(), "sharedScriptSuiteRegistry", ?*ScriptSuiteRegistry, .{});
    }

    pub fn setSharedScriptSuiteRegistry(_registry: ?*ScriptSuiteRegistry) void {
        return objc.msgSend(Internal.class(), "setSharedScriptSuiteRegistry:", void, .{_registry});
    }

    pub fn loadSuitesFromBundle(_self: *@This(), _bundle: ?*Bundle) void {
        return objc.msgSend(_self, "loadSuitesFromBundle:", void, .{_bundle});
    }

    pub fn loadSuiteWithDictionaryFromBundle(_self: *@This(), _suiteDeclaration: ?*Dictionary, _bundle: ?*Bundle) void {
        return objc.msgSend(_self, "loadSuiteWithDictionary:fromBundle:", void, .{ _suiteDeclaration, _bundle });
    }

    pub fn registerClassDescription(_self: *@This(), _classDescription: ?*ScriptClassDescription) void {
        return objc.msgSend(_self, "registerClassDescription:", void, .{_classDescription});
    }

    pub fn registerCommandDescription(_self: *@This(), _commandDescription: ?*ScriptCommandDescription) void {
        return objc.msgSend(_self, "registerCommandDescription:", void, .{_commandDescription});
    }

    pub fn appleEventCodeForSuite(_self: *@This(), _suiteName: ?*String) objc.FourCharCode {
        return objc.msgSend(_self, "appleEventCodeForSuite:", objc.FourCharCode, .{_suiteName});
    }

    pub fn bundleForSuite(_self: *@This(), _suiteName: ?*String) ?*Bundle {
        return objc.msgSend(_self, "bundleForSuite:", ?*Bundle, .{_suiteName});
    }

    pub fn classDescriptionsInSuite(_self: *@This(), _suiteName: ?*String) ?*anyopaque {
        return objc.msgSend(_self, "classDescriptionsInSuite:", ?*anyopaque, .{_suiteName});
    }

    pub fn commandDescriptionsInSuite(_self: *@This(), _suiteName: ?*String) ?*anyopaque {
        return objc.msgSend(_self, "commandDescriptionsInSuite:", ?*anyopaque, .{_suiteName});
    }

    pub fn suiteForAppleEventCode(_self: *@This(), _appleEventCode: objc.FourCharCode) ?*String {
        return objc.msgSend(_self, "suiteForAppleEventCode:", ?*String, .{_appleEventCode});
    }

    pub fn classDescriptionWithAppleEventCode(_self: *@This(), _appleEventCode: objc.FourCharCode) ?*ScriptClassDescription {
        return objc.msgSend(_self, "classDescriptionWithAppleEventCode:", ?*ScriptClassDescription, .{_appleEventCode});
    }

    pub fn commandDescriptionWithAppleEventClassAndAppleEventCode(_self: *@This(), _appleEventClassCode: objc.FourCharCode, _appleEventIDCode: objc.FourCharCode) ?*ScriptCommandDescription {
        return objc.msgSend(_self, "commandDescriptionWithAppleEventClass:andAppleEventCode:", ?*ScriptCommandDescription, .{ _appleEventClassCode, _appleEventIDCode });
    }

    pub fn aeteResource(_self: *@This(), _languageName: ?*String) ?*Data {
        return objc.msgSend(_self, "aeteResource:", ?*Data, .{_languageName});
    }

    pub fn suiteNames(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "suiteNames", ?*anyopaque, .{});
    }
};

pub const TestComparisonOperation = objc.NSUInteger;
pub const TestComparisonOperation_EqualToComparison: objc.NSUInteger = 0;
pub const TestComparisonOperation_LessThanOrEqualToComparison: objc.NSUInteger = 1;
pub const TestComparisonOperation_LessThanComparison: objc.NSUInteger = 2;
pub const TestComparisonOperation_GreaterThanOrEqualToComparison: objc.NSUInteger = 3;
pub const TestComparisonOperation_GreaterThanComparison: objc.NSUInteger = 4;
pub const TestComparisonOperation_BeginsWithComparison: objc.NSUInteger = 5;
pub const TestComparisonOperation_EndsWithComparison: objc.NSUInteger = 6;
pub const TestComparisonOperation_ContainsComparison: objc.NSUInteger = 7;

/// https://developer.apple.com/documentation/Foundation/NSScriptWhoseTest?language=objc
pub const ScriptWhoseTest = opaque {
    pub const Internal = objc.ExternClass("NSScriptWhoseTest", @This(), objc.NSObject, &.{Coding});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn isTrue(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isTrue", objc.BOOL, .{});
    }
};

/// https://developer.apple.com/documentation/Foundation/NSLogicalTest?language=objc
pub const LogicalTest = opaque {
    pub const Internal = objc.ExternClass("NSLogicalTest", @This(), ScriptWhoseTest, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn isTrue(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isTrue", objc.BOOL, .{});
    }

    pub fn initAndTestWithTests(_self: *@This(), _subTests: ?*anyopaque) *@This() {
        return objc.msgSend(_self, "initAndTestWithTests:", *@This(), .{_subTests});
    }

    pub fn initOrTestWithTests(_self: *@This(), _subTests: ?*anyopaque) *@This() {
        return objc.msgSend(_self, "initOrTestWithTests:", *@This(), .{_subTests});
    }

    pub fn initNotTestWithTest(_self: *@This(), _subTest: ?*ScriptWhoseTest) *@This() {
        return objc.msgSend(_self, "initNotTestWithTest:", *@This(), .{_subTest});
    }
};

/// https://developer.apple.com/documentation/Foundation/NSSpecifierTest?language=objc
pub const SpecifierTest = opaque {
    pub const Internal = objc.ExternClass("NSSpecifierTest", @This(), ScriptWhoseTest, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn isTrue(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isTrue", objc.BOOL, .{});
    }

    pub fn initWithObjectSpecifierComparisonOperatorTestObject(_self: *@This(), _obj1: ?*ScriptObjectSpecifier, _compOp: TestComparisonOperation, _obj2: ?objc.Id) *@This() {
        return objc.msgSend(_self, "initWithObjectSpecifier:comparisonOperator:testObject:", *@This(), .{ _obj1, _compOp, _obj2 });
    }
};

/// https://developer.apple.com/documentation/Foundation/NSSpellServer?language=objc
pub const SpellServer = opaque {
    pub const Internal = objc.ExternClass("NSSpellServer", @This(), objc.NSObject, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn registerLanguageByVendor(_self: *@This(), _language: ?*String, _vendor: ?*String) objc.BOOL {
        return objc.msgSend(_self, "registerLanguage:byVendor:", objc.BOOL, .{ _language, _vendor });
    }

    pub fn isWordInUserDictionariesCaseSensitive(_self: *@This(), _word: ?*String, _flag: objc.BOOL) objc.BOOL {
        return objc.msgSend(_self, "isWordInUserDictionaries:caseSensitive:", objc.BOOL, .{ _word, _flag });
    }

    pub fn run(_self: *@This()) void {
        return objc.msgSend(_self, "run", void, .{});
    }

    pub fn delegate(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "delegate", ?*anyopaque, .{});
    }

    pub fn setDelegate(_self: *@This(), _delegate: ?*anyopaque) void {
        return objc.msgSend(_self, "setDelegate:", void, .{_delegate});
    }
};

/// https://developer.apple.com/documentation/Foundation/NSSpellServerDelegate?language=objc
pub const SpellServerDelegate = opaque {
    pub const Internal = objc.ExternProtocol(@This(), &.{objc.NSObject});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn spellServerFindMisspelledWordInStringLanguageWordCountCountOnly(
        _self: *@This(),
        _sender: ?*SpellServer,
        _stringToCheck: ?*String,
        _language: ?*String,
        _wordCount: ?*objc.NSInteger,
        _countOnly: objc.BOOL,
    ) Range {
        return objc.msgSend(_self, "spellServer:findMisspelledWordInString:language:wordCount:countOnly:", Range, .{
            _sender,
            _stringToCheck,
            _language,
            _wordCount,
            _countOnly,
        });
    }

    pub fn spellServerSuggestGuessesForWordInLanguage(_self: *@This(), _sender: ?*SpellServer, _word: ?*String, _language: ?*String) ?*anyopaque {
        return objc.msgSend(_self, "spellServer:suggestGuessesForWord:inLanguage:", ?*anyopaque, .{ _sender, _word, _language });
    }

    pub fn spellServerDidLearnWordInLanguage(_self: *@This(), _sender: ?*SpellServer, _word: ?*String, _language: ?*String) void {
        return objc.msgSend(_self, "spellServer:didLearnWord:inLanguage:", void, .{ _sender, _word, _language });
    }

    pub fn spellServerDidForgetWordInLanguage(_self: *@This(), _sender: ?*SpellServer, _word: ?*String, _language: ?*String) void {
        return objc.msgSend(_self, "spellServer:didForgetWord:inLanguage:", void, .{ _sender, _word, _language });
    }

    pub fn spellServerSuggestCompletionsForPartialWordRangeInStringLanguage(
        _self: *@This(),
        _sender: ?*SpellServer,
        _range: Range,
        _string: ?*String,
        _language: ?*String,
    ) ?*anyopaque {
        return objc.msgSend(_self, "spellServer:suggestCompletionsForPartialWordRange:inString:language:", ?*anyopaque, .{
            _sender,
            _range,
            _string,
            _language,
        });
    }

    pub fn spellServerCheckGrammarInStringLanguageDetails(
        _self: *@This(),
        _sender: ?*SpellServer,
        _stringToCheck: ?*String,
        _language: ?*String,
        _details: ?*?*anyopaque,
    ) Range {
        return objc.msgSend(_self, "spellServer:checkGrammarInString:language:details:", Range, .{
            _sender,
            _stringToCheck,
            _language,
            _details,
        });
    }

    pub fn spellServerCheckStringOffsetTypesOptionsOrthographyWordCount(
        _self: *@This(),
        _sender: ?*SpellServer,
        _stringToCheck: ?*String,
        _offset: objc.NSUInteger,
        _checkingTypes: TextCheckingTypes,
        _options: ?*anyopaque,
        _orthography: ?*Orthography,
        _wordCount: ?*objc.NSInteger,
    ) ?*anyopaque {
        return objc.msgSend(_self, "spellServer:checkString:offset:types:options:orthography:wordCount:", ?*anyopaque, .{
            _sender,
            _stringToCheck,
            _offset,
            _checkingTypes,
            _options,
            _orthography,
            _wordCount,
        });
    }

    pub fn spellServerRecordResponseToCorrectionForWordLanguage(
        _self: *@This(),
        _sender: ?*SpellServer,
        _response: objc.NSUInteger,
        _correction: ?*String,
        _word: ?*String,
        _language: ?*String,
    ) void {
        return objc.msgSend(_self, "spellServer:recordResponse:toCorrection:forWord:language:", void, .{
            _sender,
            _response,
            _correction,
            _word,
            _language,
        });
    }
};

pub const UserNotificationActivationType = objc.NSInteger;
pub const UserNotificationActivationType_None: objc.NSInteger = 0;
pub const UserNotificationActivationType_ContentsClicked: objc.NSInteger = 1;
pub const UserNotificationActivationType_ActionButtonClicked: objc.NSInteger = 2;
pub const UserNotificationActivationType_Replied: objc.NSInteger = 3;
pub const UserNotificationActivationType_AdditionalActionClicked: objc.NSInteger = 4;

/// https://developer.apple.com/documentation/Foundation/NSUserNotification?language=objc
pub const UserNotification = opaque {
    pub const Internal = objc.ExternClass("NSUserNotification", @This(), objc.NSObject, &.{Copying});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn title(_self: *@This()) ?*String {
        return objc.msgSend(_self, "title", ?*String, .{});
    }

    pub fn setTitle(_self: *@This(), _title: ?*String) void {
        return objc.msgSend(_self, "setTitle:", void, .{_title});
    }

    pub fn subtitle(_self: *@This()) ?*String {
        return objc.msgSend(_self, "subtitle", ?*String, .{});
    }

    pub fn setSubtitle(_self: *@This(), _subtitle: ?*String) void {
        return objc.msgSend(_self, "setSubtitle:", void, .{_subtitle});
    }

    pub fn informativeText(_self: *@This()) ?*String {
        return objc.msgSend(_self, "informativeText", ?*String, .{});
    }

    pub fn setInformativeText(_self: *@This(), _informativeText: ?*String) void {
        return objc.msgSend(_self, "setInformativeText:", void, .{_informativeText});
    }

    pub fn actionButtonTitle(_self: *@This()) ?*String {
        return objc.msgSend(_self, "actionButtonTitle", ?*String, .{});
    }

    pub fn setActionButtonTitle(_self: *@This(), _actionButtonTitle: ?*String) void {
        return objc.msgSend(_self, "setActionButtonTitle:", void, .{_actionButtonTitle});
    }

    pub fn userInfo(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "userInfo", ?*anyopaque, .{});
    }

    pub fn setUserInfo(_self: *@This(), _userInfo: ?*anyopaque) void {
        return objc.msgSend(_self, "setUserInfo:", void, .{_userInfo});
    }

    pub fn deliveryDate(_self: *@This()) ?*Date {
        return objc.msgSend(_self, "deliveryDate", ?*Date, .{});
    }

    pub fn setDeliveryDate(_self: *@This(), _deliveryDate: ?*Date) void {
        return objc.msgSend(_self, "setDeliveryDate:", void, .{_deliveryDate});
    }

    pub fn deliveryTimeZone(_self: *@This()) ?*TimeZone {
        return objc.msgSend(_self, "deliveryTimeZone", ?*TimeZone, .{});
    }

    pub fn setDeliveryTimeZone(_self: *@This(), _deliveryTimeZone: ?*TimeZone) void {
        return objc.msgSend(_self, "setDeliveryTimeZone:", void, .{_deliveryTimeZone});
    }

    pub fn deliveryRepeatInterval(_self: *@This()) ?*DateComponents {
        return objc.msgSend(_self, "deliveryRepeatInterval", ?*DateComponents, .{});
    }

    pub fn setDeliveryRepeatInterval(_self: *@This(), _deliveryRepeatInterval: ?*DateComponents) void {
        return objc.msgSend(_self, "setDeliveryRepeatInterval:", void, .{_deliveryRepeatInterval});
    }

    pub fn actualDeliveryDate(_self: *@This()) ?*Date {
        return objc.msgSend(_self, "actualDeliveryDate", ?*Date, .{});
    }

    pub fn isPresented(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isPresented", objc.BOOL, .{});
    }

    pub fn isRemote(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isRemote", objc.BOOL, .{});
    }

    pub fn soundName(_self: *@This()) ?*String {
        return objc.msgSend(_self, "soundName", ?*String, .{});
    }

    pub fn setSoundName(_self: *@This(), _soundName: ?*String) void {
        return objc.msgSend(_self, "setSoundName:", void, .{_soundName});
    }

    pub fn hasActionButton(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "hasActionButton", objc.BOOL, .{});
    }

    pub fn setHasActionButton(_self: *@This(), _hasActionButton: objc.BOOL) void {
        return objc.msgSend(_self, "setHasActionButton:", void, .{_hasActionButton});
    }

    pub fn activationType(_self: *@This()) UserNotificationActivationType {
        return objc.msgSend(_self, "activationType", UserNotificationActivationType, .{});
    }

    pub fn otherButtonTitle(_self: *@This()) ?*String {
        return objc.msgSend(_self, "otherButtonTitle", ?*String, .{});
    }

    pub fn setOtherButtonTitle(_self: *@This(), _otherButtonTitle: ?*String) void {
        return objc.msgSend(_self, "setOtherButtonTitle:", void, .{_otherButtonTitle});
    }

    pub fn identifier(_self: *@This()) ?*String {
        return objc.msgSend(_self, "identifier", ?*String, .{});
    }

    pub fn setIdentifier(_self: *@This(), _identifier: ?*String) void {
        return objc.msgSend(_self, "setIdentifier:", void, .{_identifier});
    }

    pub fn contentImage(_self: *@This()) ?*app_kit.Image {
        return objc.msgSend(_self, "contentImage", ?*app_kit.Image, .{});
    }

    pub fn setContentImage(_self: *@This(), _contentImage: ?*app_kit.Image) void {
        return objc.msgSend(_self, "setContentImage:", void, .{_contentImage});
    }

    pub fn hasReplyButton(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "hasReplyButton", objc.BOOL, .{});
    }

    pub fn setHasReplyButton(_self: *@This(), _hasReplyButton: objc.BOOL) void {
        return objc.msgSend(_self, "setHasReplyButton:", void, .{_hasReplyButton});
    }

    pub fn responsePlaceholder(_self: *@This()) ?*String {
        return objc.msgSend(_self, "responsePlaceholder", ?*String, .{});
    }

    pub fn setResponsePlaceholder(_self: *@This(), _responsePlaceholder: ?*String) void {
        return objc.msgSend(_self, "setResponsePlaceholder:", void, .{_responsePlaceholder});
    }

    pub fn response(_self: *@This()) ?*AttributedString {
        return objc.msgSend(_self, "response", ?*AttributedString, .{});
    }

    pub fn additionalActions(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "additionalActions", ?*anyopaque, .{});
    }

    pub fn setAdditionalActions(_self: *@This(), _additionalActions: ?*anyopaque) void {
        return objc.msgSend(_self, "setAdditionalActions:", void, .{_additionalActions});
    }

    pub fn additionalActivationAction(_self: *@This()) ?*UserNotificationAction {
        return objc.msgSend(_self, "additionalActivationAction", ?*UserNotificationAction, .{});
    }
};

/// https://developer.apple.com/documentation/Foundation/NSUserNotificationAction?language=objc
pub const UserNotificationAction = opaque {
    pub const Internal = objc.ExternClass("NSUserNotificationAction", @This(), objc.NSObject, &.{Copying});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn actionWithIdentifierTitle(_identifier: ?*String, _title: ?*String) *@This() {
        return objc.msgSend(Internal.class(), "actionWithIdentifier:title:", *@This(), .{ _identifier, _title });
    }

    pub fn identifier(_self: *@This()) ?*String {
        return objc.msgSend(_self, "identifier", ?*String, .{});
    }

    pub fn title(_self: *@This()) ?*String {
        return objc.msgSend(_self, "title", ?*String, .{});
    }
};

/// https://developer.apple.com/documentation/Foundation/NSUserNotificationCenter?language=objc
pub const UserNotificationCenter = opaque {
    pub const Internal = objc.ExternClass("NSUserNotificationCenter", @This(), objc.NSObject, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn scheduleNotification(_self: *@This(), _notification: ?*UserNotification) void {
        return objc.msgSend(_self, "scheduleNotification:", void, .{_notification});
    }

    pub fn removeScheduledNotification(_self: *@This(), _notification: ?*UserNotification) void {
        return objc.msgSend(_self, "removeScheduledNotification:", void, .{_notification});
    }

    pub fn deliverNotification(_self: *@This(), _notification: ?*UserNotification) void {
        return objc.msgSend(_self, "deliverNotification:", void, .{_notification});
    }

    pub fn removeDeliveredNotification(_self: *@This(), _notification: ?*UserNotification) void {
        return objc.msgSend(_self, "removeDeliveredNotification:", void, .{_notification});
    }

    pub fn removeAllDeliveredNotifications(_self: *@This()) void {
        return objc.msgSend(_self, "removeAllDeliveredNotifications", void, .{});
    }

    pub fn defaultUserNotificationCenter() ?*UserNotificationCenter {
        return objc.msgSend(Internal.class(), "defaultUserNotificationCenter", ?*UserNotificationCenter, .{});
    }

    pub fn delegate(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "delegate", ?*anyopaque, .{});
    }

    pub fn setDelegate(_self: *@This(), _delegate: ?*anyopaque) void {
        return objc.msgSend(_self, "setDelegate:", void, .{_delegate});
    }

    pub fn scheduledNotifications(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "scheduledNotifications", ?*anyopaque, .{});
    }

    pub fn setScheduledNotifications(_self: *@This(), _scheduledNotifications: ?*anyopaque) void {
        return objc.msgSend(_self, "setScheduledNotifications:", void, .{_scheduledNotifications});
    }

    pub fn deliveredNotifications(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "deliveredNotifications", ?*anyopaque, .{});
    }
};

/// https://developer.apple.com/documentation/Foundation/NSUserNotificationCenterDelegate?language=objc
pub const UserNotificationCenterDelegate = opaque {
    pub const Internal = objc.ExternProtocol(@This(), &.{objc.NSObject});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn userNotificationCenterDidDeliverNotification(_self: *@This(), _center: ?*UserNotificationCenter, _notification: ?*UserNotification) void {
        return objc.msgSend(_self, "userNotificationCenter:didDeliverNotification:", void, .{ _center, _notification });
    }

    pub fn userNotificationCenterDidActivateNotification(_self: *@This(), _center: ?*UserNotificationCenter, _notification: ?*UserNotification) void {
        return objc.msgSend(_self, "userNotificationCenter:didActivateNotification:", void, .{ _center, _notification });
    }

    pub fn userNotificationCenterShouldPresentNotification(_self: *@This(), _center: ?*UserNotificationCenter, _notification: ?*UserNotification) objc.BOOL {
        return objc.msgSend(_self, "userNotificationCenter:shouldPresentNotification:", objc.BOOL, .{ _center, _notification });
    }
};

/// https://developer.apple.com/documentation/Foundation/NSUserScriptTask?language=objc
pub const UserScriptTask = opaque {
    pub const CompletionHandler = *const fn (?*Error) callconv(.C) void;

    pub const Internal = objc.ExternClass("NSUserScriptTask", @This(), objc.NSObject, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn initWithURLError(_self: *@This(), _url: ?*URL, _error: ?*?*Error) *@This() {
        return objc.msgSend(_self, "initWithURL:error:", *@This(), .{ _url, _error });
    }

    pub fn scriptURL(_self: *@This()) ?*URL {
        return objc.msgSend(_self, "scriptURL", ?*URL, .{});
    }

    pub fn executeWithCompletionHandler(_self: *@This(), _handler: UserScriptTask.CompletionHandler) void {
        return objc.msgSend(_self, "executeWithCompletionHandler:", void, .{_handler});
    }
};

/// https://developer.apple.com/documentation/Foundation/NSUserUnixTask?language=objc
pub const UserUnixTask = opaque {
    pub const CompletionHandler = *const fn (?*Error) callconv(.C) void;

    pub const Internal = objc.ExternClass("NSUserUnixTask", @This(), UserScriptTask, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn initWithURLError(_self: *@This(), _url: ?*URL, _error: ?*?*Error) *@This() {
        return objc.msgSend(_self, "initWithURL:error:", *@This(), .{ _url, _error });
    }

    pub fn scriptURL(_self: *@This()) ?*URL {
        return objc.msgSend(_self, "scriptURL", ?*URL, .{});
    }

    pub fn executeWithCompletionHandler(_self: *@This(), _handler: UserScriptTask.CompletionHandler) void {
        return objc.msgSend(_self, "executeWithCompletionHandler:", void, .{_handler});
    }

    pub fn standardInput(_self: *@This()) ?*FileHandle {
        return objc.msgSend(_self, "standardInput", ?*FileHandle, .{});
    }

    pub fn setStandardInput(_self: *@This(), _standardInput: ?*FileHandle) void {
        return objc.msgSend(_self, "setStandardInput:", void, .{_standardInput});
    }

    pub fn standardOutput(_self: *@This()) ?*FileHandle {
        return objc.msgSend(_self, "standardOutput", ?*FileHandle, .{});
    }

    pub fn setStandardOutput(_self: *@This(), _standardOutput: ?*FileHandle) void {
        return objc.msgSend(_self, "setStandardOutput:", void, .{_standardOutput});
    }

    pub fn standardError(_self: *@This()) ?*FileHandle {
        return objc.msgSend(_self, "standardError", ?*FileHandle, .{});
    }

    pub fn setStandardError(_self: *@This(), _standardError: ?*FileHandle) void {
        return objc.msgSend(_self, "setStandardError:", void, .{_standardError});
    }

    pub fn executeWithArgumentsCompletionHandler(_self: *@This(), _arguments: ?*anyopaque, _handler: UserUnixTask.CompletionHandler) void {
        return objc.msgSend(_self, "executeWithArguments:completionHandler:", void, .{ _arguments, _handler });
    }
};

/// https://developer.apple.com/documentation/Foundation/NSUserAppleScriptTask?language=objc
pub const UserAppleScriptTask = opaque {
    pub const CompletionHandler = *const fn (?*AppleEventDescriptor, ?*Error) callconv(.C) void;

    pub const Internal = objc.ExternClass("NSUserAppleScriptTask", @This(), UserScriptTask, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn initWithURLError(_self: *@This(), _url: ?*URL, _error: ?*?*Error) *@This() {
        return objc.msgSend(_self, "initWithURL:error:", *@This(), .{ _url, _error });
    }

    pub fn scriptURL(_self: *@This()) ?*URL {
        return objc.msgSend(_self, "scriptURL", ?*URL, .{});
    }

    pub fn executeWithCompletionHandler(_self: *@This(), _handler: UserScriptTask.CompletionHandler) void {
        return objc.msgSend(_self, "executeWithCompletionHandler:", void, .{_handler});
    }

    pub fn executeWithAppleEventCompletionHandler(_self: *@This(), _event: ?*AppleEventDescriptor, _handler: UserAppleScriptTask.CompletionHandler) void {
        return objc.msgSend(_self, "executeWithAppleEvent:completionHandler:", void, .{ _event, _handler });
    }
};

/// https://developer.apple.com/documentation/Foundation/NSUserAutomatorTask?language=objc
pub const UserAutomatorTask = opaque {
    pub const CompletionHandler = *const fn (?objc.Id, ?*Error) callconv(.C) void;

    pub const Internal = objc.ExternClass("NSUserAutomatorTask", @This(), UserScriptTask, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*String {
        return objc.msgSend(_self, "description", ?*String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*String {
        return objc.msgSend(_self, "debugDescription", ?*String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn initWithURLError(_self: *@This(), _url: ?*URL, _error: ?*?*Error) *@This() {
        return objc.msgSend(_self, "initWithURL:error:", *@This(), .{ _url, _error });
    }

    pub fn scriptURL(_self: *@This()) ?*URL {
        return objc.msgSend(_self, "scriptURL", ?*URL, .{});
    }

    pub fn executeWithCompletionHandler(_self: *@This(), _handler: UserScriptTask.CompletionHandler) void {
        return objc.msgSend(_self, "executeWithCompletionHandler:", void, .{_handler});
    }

    pub fn variables(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "variables", ?*anyopaque, .{});
    }

    pub fn setVariables(_self: *@This(), _variables: ?*anyopaque) void {
        return objc.msgSend(_self, "setVariables:", void, .{_variables});
    }

    pub fn executeWithInputCompletionHandler(_self: *@This(), _input: ?*anyopaque, _handler: UserAutomatorTask.CompletionHandler) void {
        return objc.msgSend(_self, "executeWithInput:completionHandler:", void, .{ _input, _handler });
    }
};
